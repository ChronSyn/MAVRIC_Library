
MegaFly2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00030fda  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80033000  80033000  00033400  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000064c  80033200  80033200  00033600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  8003384c  8003384c  00033c4c  2**0
                  ALLOC
  6 .data.rel.ro  00000178  00000004  80033850  00034004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .got          00000930  0000017c  800339c8  0003417c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000163c  00000aac  800342f8  00034aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007630  000020e8  80035934  000360e8  2**2
                  ALLOC
 10 .comment      00000030  00000000  00000000  000360e8  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000c88  00000000  00000000  00036118  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00007ac0  00000000  00000000  00036da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0005d64d  00000000  00000000  0003e860  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00009636  00000000  00000000  0009bead  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00011d5a  00000000  00000000  000a54e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008c78  00000000  00000000  000b7240  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000efa1  00000000  00000000  000bfeb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000e0b1  00000000  00000000  000cee59  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000400  2**0
                  ALLOC
 20 .debug_ranges 00000650  00000000  00000000  000dcf10  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002000:	fe ff 00 04 	ld.w	pc,pc[4]
80002004:	80 02       	ld.sh	r2,r0[0x0]
80002006:	d1 04       	*unknown*

Disassembly of section .text:

80002008 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
80002008:	eb cd 40 80 	pushm	r7,lr
8000200c:	1a 97       	mov	r7,sp
8000200e:	20 2d       	sub	sp,8
80002010:	ef 4c ff fc 	st.w	r7[-4],r12
80002014:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
80002018:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000201c:	2f f8       	sub	r8,-1
8000201e:	11 88       	ld.ub	r8,r8[0x0]
80002020:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002024:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
80002026:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000202a:	f0 c9 ff ff 	sub	r9,r8,-1
8000202e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002032:	11 88       	ld.ub	r8,r8[0x0]
80002034:	b2 88       	st.b	r9[0x0],r8
}
80002036:	2f ed       	sub	sp,-8
80002038:	e3 cd 80 80 	ldm	sp++,r7,pc

8000203c <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
8000203c:	eb cd 40 80 	pushm	r7,lr
80002040:	1a 97       	mov	r7,sp
80002042:	20 2d       	sub	sp,8
80002044:	ef 4c ff fc 	st.w	r7[-4],r12
80002048:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
8000204c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002050:	2f d8       	sub	r8,-3
80002052:	11 88       	ld.ub	r8,r8[0x0]
80002054:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002058:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
8000205a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000205e:	f0 c9 ff ff 	sub	r9,r8,-1
80002062:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002066:	2f e8       	sub	r8,-2
80002068:	11 88       	ld.ub	r8,r8[0x0]
8000206a:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
8000206c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002070:	f0 c9 ff fe 	sub	r9,r8,-2
80002074:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002078:	2f f8       	sub	r8,-1
8000207a:	11 88       	ld.ub	r8,r8[0x0]
8000207c:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
8000207e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002082:	f0 c9 ff fd 	sub	r9,r8,-3
80002086:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000208a:	11 88       	ld.ub	r8,r8[0x0]
8000208c:	b2 88       	st.b	r9[0x0],r8
}
8000208e:	2f ed       	sub	sp,-8
80002090:	e3 cd 80 80 	ldm	sp++,r7,pc

80002094 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80002094:	eb cd 40 c0 	pushm	r6-r7,lr
80002098:	1a 97       	mov	r7,sp
8000209a:	20 3d       	sub	sp,12
8000209c:	49 06       	lddpc	r6,800020dc <mav_array_memcpy+0x48>
8000209e:	1e 26       	rsub	r6,pc
800020a0:	ef 4c ff fc 	st.w	r7[-4],r12
800020a4:	ef 4b ff f8 	st.w	r7[-8],r11
800020a8:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
800020ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020b0:	58 08       	cp.w	r8,0
800020b2:	c0 91       	brne	800020c4 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
800020b4:	ee fa ff f4 	ld.w	r10,r7[-12]
800020b8:	30 0b       	mov	r11,0
800020ba:	ee fc ff fc 	ld.w	r12,r7[-4]
800020be:	f0 16 00 31 	mcall	r6[196]
800020c2:	c0 98       	rjmp	800020d4 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
800020c4:	ee fa ff f4 	ld.w	r10,r7[-12]
800020c8:	ee fb ff f8 	ld.w	r11,r7[-8]
800020cc:	ee fc ff fc 	ld.w	r12,r7[-4]
800020d0:	f0 16 00 1b 	mcall	r6[108]
	}
}
800020d4:	2f dd       	sub	sp,-12
800020d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800020da:	00 00       	add	r0,r0
800020dc:	80 00       	ld.sh	r0,r0[0x0]
800020de:	1f 22       	ld.uh	r2,pc++

800020e0 <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
800020e0:	eb cd 40 c0 	pushm	r6-r7,lr
800020e4:	1a 97       	mov	r7,sp
800020e6:	20 3d       	sub	sp,12
800020e8:	48 d6       	lddpc	r6,8000211c <_MAV_RETURN_uint16_t+0x3c>
800020ea:	1e 26       	rsub	r6,pc
800020ec:	ef 4c ff f8 	st.w	r7[-8],r12
800020f0:	16 98       	mov	r8,r11
800020f2:	ef 68 ff f4 	st.b	r7[-12],r8
800020f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020fa:	2f 88       	sub	r8,-8
800020fc:	10 99       	mov	r9,r8
800020fe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002102:	10 09       	add	r9,r8
80002104:	ee c8 00 02 	sub	r8,r7,2
80002108:	12 9b       	mov	r11,r9
8000210a:	10 9c       	mov	r12,r8
8000210c:	c7 ef       	rcall	80002008 <byte_swap_2>
8000210e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002112:	10 9c       	mov	r12,r8
80002114:	2f dd       	sub	sp,-12
80002116:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000211a:	00 00       	add	r0,r0
8000211c:	80 00       	ld.sh	r0,r0[0x0]
8000211e:	1f 6e       	ld.uh	lr,--pc

80002120 <_MAV_RETURN_int16_t>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
80002120:	eb cd 40 c0 	pushm	r6-r7,lr
80002124:	1a 97       	mov	r7,sp
80002126:	20 3d       	sub	sp,12
80002128:	48 d6       	lddpc	r6,8000215c <_MAV_RETURN_int16_t+0x3c>
8000212a:	1e 26       	rsub	r6,pc
8000212c:	ef 4c ff f8 	st.w	r7[-8],r12
80002130:	16 98       	mov	r8,r11
80002132:	ef 68 ff f4 	st.b	r7[-12],r8
80002136:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000213a:	2f 88       	sub	r8,-8
8000213c:	10 99       	mov	r9,r8
8000213e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002142:	10 09       	add	r9,r8
80002144:	ee c8 00 02 	sub	r8,r7,2
80002148:	12 9b       	mov	r11,r9
8000214a:	10 9c       	mov	r12,r8
8000214c:	c5 ef       	rcall	80002008 <byte_swap_2>
8000214e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002152:	10 9c       	mov	r12,r8
80002154:	2f dd       	sub	sp,-12
80002156:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000215a:	00 00       	add	r0,r0
8000215c:	80 00       	ld.sh	r0,r0[0x0]
8000215e:	1f ae       	ld.ub	lr,pc[0x2]

80002160 <_MAV_RETURN_uint32_t>:
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
80002160:	eb cd 40 c0 	pushm	r6-r7,lr
80002164:	1a 97       	mov	r7,sp
80002166:	20 3d       	sub	sp,12
80002168:	48 d6       	lddpc	r6,8000219c <_MAV_RETURN_uint32_t+0x3c>
8000216a:	1e 26       	rsub	r6,pc
8000216c:	ef 4c ff f8 	st.w	r7[-8],r12
80002170:	16 98       	mov	r8,r11
80002172:	ef 68 ff f4 	st.b	r7[-12],r8
80002176:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000217a:	2f 88       	sub	r8,-8
8000217c:	10 99       	mov	r9,r8
8000217e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002182:	10 09       	add	r9,r8
80002184:	ee c8 00 04 	sub	r8,r7,4
80002188:	12 9b       	mov	r11,r9
8000218a:	10 9c       	mov	r12,r8
8000218c:	c5 8f       	rcall	8000203c <byte_swap_4>
8000218e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002192:	10 9c       	mov	r12,r8
80002194:	2f dd       	sub	sp,-12
80002196:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000219a:	00 00       	add	r0,r0
8000219c:	80 00       	ld.sh	r0,r0[0x0]
8000219e:	1f ee       	ld.ub	lr,pc[0x6]

800021a0 <_MAV_RETURN_int32_t>:
_MAV_MSG_RETURN_TYPE(int32_t,  4)
800021a0:	eb cd 40 c0 	pushm	r6-r7,lr
800021a4:	1a 97       	mov	r7,sp
800021a6:	20 3d       	sub	sp,12
800021a8:	48 d6       	lddpc	r6,800021dc <_MAV_RETURN_int32_t+0x3c>
800021aa:	1e 26       	rsub	r6,pc
800021ac:	ef 4c ff f8 	st.w	r7[-8],r12
800021b0:	16 98       	mov	r8,r11
800021b2:	ef 68 ff f4 	st.b	r7[-12],r8
800021b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800021ba:	2f 88       	sub	r8,-8
800021bc:	10 99       	mov	r9,r8
800021be:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800021c2:	10 09       	add	r9,r8
800021c4:	ee c8 00 04 	sub	r8,r7,4
800021c8:	12 9b       	mov	r11,r9
800021ca:	10 9c       	mov	r12,r8
800021cc:	c3 8f       	rcall	8000203c <byte_swap_4>
800021ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021d2:	10 9c       	mov	r12,r8
800021d4:	2f dd       	sub	sp,-12
800021d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800021da:	00 00       	add	r0,r0
800021dc:	80 00       	ld.sh	r0,r0[0x0]
800021de:	20 2e       	sub	lr,2

800021e0 <mavlink_msg_global_position_int_get_time_boot_ms>:
 * @brief Get field time_boot_ms from global_position_int message
 *
 * @return Timestamp (milliseconds since system boot)
 */
static inline uint32_t mavlink_msg_global_position_int_get_time_boot_ms(const mavlink_message_t* msg)
{
800021e0:	eb cd 40 c0 	pushm	r6-r7,lr
800021e4:	1a 97       	mov	r7,sp
800021e6:	20 1d       	sub	sp,4
800021e8:	48 76       	lddpc	r6,80002204 <mavlink_msg_global_position_int_get_time_boot_ms+0x24>
800021ea:	1e 26       	rsub	r6,pc
800021ec:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint32_t(msg,  0);
800021f0:	30 0b       	mov	r11,0
800021f2:	ee fc ff fc 	ld.w	r12,r7[-4]
800021f6:	cb 5f       	rcall	80002160 <_MAV_RETURN_uint32_t>
800021f8:	18 98       	mov	r8,r12
}
800021fa:	10 9c       	mov	r12,r8
800021fc:	2f fd       	sub	sp,-4
800021fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002202:	00 00       	add	r0,r0
80002204:	80 00       	ld.sh	r0,r0[0x0]
80002206:	20 6e       	sub	lr,6

80002208 <mavlink_msg_global_position_int_get_lat>:
 * @brief Get field lat from global_position_int message
 *
 * @return Latitude, expressed as * 1E7
 */
static inline int32_t mavlink_msg_global_position_int_get_lat(const mavlink_message_t* msg)
{
80002208:	eb cd 40 c0 	pushm	r6-r7,lr
8000220c:	1a 97       	mov	r7,sp
8000220e:	20 1d       	sub	sp,4
80002210:	48 76       	lddpc	r6,8000222c <mavlink_msg_global_position_int_get_lat+0x24>
80002212:	1e 26       	rsub	r6,pc
80002214:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  4);
80002218:	30 4b       	mov	r11,4
8000221a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000221e:	cc 1f       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002220:	18 98       	mov	r8,r12
}
80002222:	10 9c       	mov	r12,r8
80002224:	2f fd       	sub	sp,-4
80002226:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000222a:	00 00       	add	r0,r0
8000222c:	80 00       	ld.sh	r0,r0[0x0]
8000222e:	20 96       	sub	r6,9

80002230 <mavlink_msg_global_position_int_get_lon>:
 * @brief Get field lon from global_position_int message
 *
 * @return Longitude, expressed as * 1E7
 */
static inline int32_t mavlink_msg_global_position_int_get_lon(const mavlink_message_t* msg)
{
80002230:	eb cd 40 c0 	pushm	r6-r7,lr
80002234:	1a 97       	mov	r7,sp
80002236:	20 1d       	sub	sp,4
80002238:	48 76       	lddpc	r6,80002254 <mavlink_msg_global_position_int_get_lon+0x24>
8000223a:	1e 26       	rsub	r6,pc
8000223c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  8);
80002240:	30 8b       	mov	r11,8
80002242:	ee fc ff fc 	ld.w	r12,r7[-4]
80002246:	ca df       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002248:	18 98       	mov	r8,r12
}
8000224a:	10 9c       	mov	r12,r8
8000224c:	2f fd       	sub	sp,-4
8000224e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002252:	00 00       	add	r0,r0
80002254:	80 00       	ld.sh	r0,r0[0x0]
80002256:	20 be       	sub	lr,11

80002258 <mavlink_msg_global_position_int_get_alt>:
 * @brief Get field alt from global_position_int message
 *
 * @return Altitude in meters, expressed as * 1000 (millimeters), above MSL
 */
static inline int32_t mavlink_msg_global_position_int_get_alt(const mavlink_message_t* msg)
{
80002258:	eb cd 40 c0 	pushm	r6-r7,lr
8000225c:	1a 97       	mov	r7,sp
8000225e:	20 1d       	sub	sp,4
80002260:	48 76       	lddpc	r6,8000227c <mavlink_msg_global_position_int_get_alt+0x24>
80002262:	1e 26       	rsub	r6,pc
80002264:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  12);
80002268:	30 cb       	mov	r11,12
8000226a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000226e:	c9 9f       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002270:	18 98       	mov	r8,r12
}
80002272:	10 9c       	mov	r12,r8
80002274:	2f fd       	sub	sp,-4
80002276:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000227a:	00 00       	add	r0,r0
8000227c:	80 00       	ld.sh	r0,r0[0x0]
8000227e:	20 e6       	sub	r6,14

80002280 <mavlink_msg_global_position_int_get_relative_alt>:
 * @brief Get field relative_alt from global_position_int message
 *
 * @return Altitude above ground in meters, expressed as * 1000 (millimeters)
 */
static inline int32_t mavlink_msg_global_position_int_get_relative_alt(const mavlink_message_t* msg)
{
80002280:	eb cd 40 c0 	pushm	r6-r7,lr
80002284:	1a 97       	mov	r7,sp
80002286:	20 1d       	sub	sp,4
80002288:	48 76       	lddpc	r6,800022a4 <mavlink_msg_global_position_int_get_relative_alt+0x24>
8000228a:	1e 26       	rsub	r6,pc
8000228c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  16);
80002290:	31 0b       	mov	r11,16
80002292:	ee fc ff fc 	ld.w	r12,r7[-4]
80002296:	c8 5f       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002298:	18 98       	mov	r8,r12
}
8000229a:	10 9c       	mov	r12,r8
8000229c:	2f fd       	sub	sp,-4
8000229e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022a2:	00 00       	add	r0,r0
800022a4:	80 00       	ld.sh	r0,r0[0x0]
800022a6:	21 0e       	sub	lr,16

800022a8 <mavlink_msg_global_position_int_get_vx>:
 * @brief Get field vx from global_position_int message
 *
 * @return Ground X Speed (Latitude), expressed as m/s * 100
 */
static inline int16_t mavlink_msg_global_position_int_get_vx(const mavlink_message_t* msg)
{
800022a8:	eb cd 40 c0 	pushm	r6-r7,lr
800022ac:	1a 97       	mov	r7,sp
800022ae:	20 1d       	sub	sp,4
800022b0:	48 76       	lddpc	r6,800022cc <mavlink_msg_global_position_int_get_vx+0x24>
800022b2:	1e 26       	rsub	r6,pc
800022b4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  20);
800022b8:	31 4b       	mov	r11,20
800022ba:	ee fc ff fc 	ld.w	r12,r7[-4]
800022be:	c3 1f       	rcall	80002120 <_MAV_RETURN_int16_t>
800022c0:	18 98       	mov	r8,r12
}
800022c2:	10 9c       	mov	r12,r8
800022c4:	2f fd       	sub	sp,-4
800022c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022ca:	00 00       	add	r0,r0
800022cc:	80 00       	ld.sh	r0,r0[0x0]
800022ce:	21 36       	sub	r6,19

800022d0 <mavlink_msg_global_position_int_get_vy>:
 * @brief Get field vy from global_position_int message
 *
 * @return Ground Y Speed (Longitude), expressed as m/s * 100
 */
static inline int16_t mavlink_msg_global_position_int_get_vy(const mavlink_message_t* msg)
{
800022d0:	eb cd 40 c0 	pushm	r6-r7,lr
800022d4:	1a 97       	mov	r7,sp
800022d6:	20 1d       	sub	sp,4
800022d8:	48 76       	lddpc	r6,800022f4 <mavlink_msg_global_position_int_get_vy+0x24>
800022da:	1e 26       	rsub	r6,pc
800022dc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  22);
800022e0:	31 6b       	mov	r11,22
800022e2:	ee fc ff fc 	ld.w	r12,r7[-4]
800022e6:	c1 df       	rcall	80002120 <_MAV_RETURN_int16_t>
800022e8:	18 98       	mov	r8,r12
}
800022ea:	10 9c       	mov	r12,r8
800022ec:	2f fd       	sub	sp,-4
800022ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022f2:	00 00       	add	r0,r0
800022f4:	80 00       	ld.sh	r0,r0[0x0]
800022f6:	21 5e       	sub	lr,21

800022f8 <mavlink_msg_global_position_int_get_vz>:
 * @brief Get field vz from global_position_int message
 *
 * @return Ground Z Speed (Altitude), expressed as m/s * 100
 */
static inline int16_t mavlink_msg_global_position_int_get_vz(const mavlink_message_t* msg)
{
800022f8:	eb cd 40 c0 	pushm	r6-r7,lr
800022fc:	1a 97       	mov	r7,sp
800022fe:	20 1d       	sub	sp,4
80002300:	48 76       	lddpc	r6,8000231c <mavlink_msg_global_position_int_get_vz+0x24>
80002302:	1e 26       	rsub	r6,pc
80002304:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  24);
80002308:	31 8b       	mov	r11,24
8000230a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000230e:	c0 9f       	rcall	80002120 <_MAV_RETURN_int16_t>
80002310:	18 98       	mov	r8,r12
}
80002312:	10 9c       	mov	r12,r8
80002314:	2f fd       	sub	sp,-4
80002316:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000231a:	00 00       	add	r0,r0
8000231c:	80 00       	ld.sh	r0,r0[0x0]
8000231e:	21 86       	sub	r6,24

80002320 <mavlink_msg_global_position_int_get_hdg>:
 * @brief Get field hdg from global_position_int message
 *
 * @return Compass heading in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
 */
static inline uint16_t mavlink_msg_global_position_int_get_hdg(const mavlink_message_t* msg)
{
80002320:	eb cd 40 c0 	pushm	r6-r7,lr
80002324:	1a 97       	mov	r7,sp
80002326:	20 1d       	sub	sp,4
80002328:	48 86       	lddpc	r6,80002348 <mavlink_msg_global_position_int_get_hdg+0x28>
8000232a:	1e 26       	rsub	r6,pc
8000232c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  26);
80002330:	31 ab       	mov	r11,26
80002332:	ee fc ff fc 	ld.w	r12,r7[-4]
80002336:	cd 5e       	rcall	800020e0 <_MAV_RETURN_uint16_t>
80002338:	18 98       	mov	r8,r12
8000233a:	5c 88       	casts.h	r8
8000233c:	5c 88       	casts.h	r8
}
8000233e:	10 9c       	mov	r12,r8
80002340:	2f fd       	sub	sp,-4
80002342:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002346:	00 00       	add	r0,r0
80002348:	80 00       	ld.sh	r0,r0[0x0]
8000234a:	21 ae       	sub	lr,26

8000234c <mavlink_msg_global_position_int_decode>:
 *
 * @param msg The message to decode
 * @param global_position_int C-struct to decode the message contents into
 */
static inline void mavlink_msg_global_position_int_decode(const mavlink_message_t* msg, mavlink_global_position_int_t* global_position_int)
{
8000234c:	eb cd 40 c0 	pushm	r6-r7,lr
80002350:	1a 97       	mov	r7,sp
80002352:	20 2d       	sub	sp,8
80002354:	4a 76       	lddpc	r6,800023f0 <mavlink_msg_global_position_int_decode+0xa4>
80002356:	1e 26       	rsub	r6,pc
80002358:	ef 4c ff fc 	st.w	r7[-4],r12
8000235c:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	global_position_int->time_boot_ms = mavlink_msg_global_position_int_get_time_boot_ms(msg);
80002360:	ee fc ff fc 	ld.w	r12,r7[-4]
80002364:	c3 ef       	rcall	800021e0 <mavlink_msg_global_position_int_get_time_boot_ms>
80002366:	18 99       	mov	r9,r12
80002368:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000236c:	91 09       	st.w	r8[0x0],r9
	global_position_int->lat = mavlink_msg_global_position_int_get_lat(msg);
8000236e:	ee fc ff fc 	ld.w	r12,r7[-4]
80002372:	c4 bf       	rcall	80002208 <mavlink_msg_global_position_int_get_lat>
80002374:	18 99       	mov	r9,r12
80002376:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000237a:	91 19       	st.w	r8[0x4],r9
	global_position_int->lon = mavlink_msg_global_position_int_get_lon(msg);
8000237c:	ee fc ff fc 	ld.w	r12,r7[-4]
80002380:	c5 8f       	rcall	80002230 <mavlink_msg_global_position_int_get_lon>
80002382:	18 99       	mov	r9,r12
80002384:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002388:	91 29       	st.w	r8[0x8],r9
	global_position_int->alt = mavlink_msg_global_position_int_get_alt(msg);
8000238a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000238e:	c6 5f       	rcall	80002258 <mavlink_msg_global_position_int_get_alt>
80002390:	18 99       	mov	r9,r12
80002392:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002396:	91 39       	st.w	r8[0xc],r9
	global_position_int->relative_alt = mavlink_msg_global_position_int_get_relative_alt(msg);
80002398:	ee fc ff fc 	ld.w	r12,r7[-4]
8000239c:	c7 2f       	rcall	80002280 <mavlink_msg_global_position_int_get_relative_alt>
8000239e:	18 99       	mov	r9,r12
800023a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023a4:	91 49       	st.w	r8[0x10],r9
	global_position_int->vx = mavlink_msg_global_position_int_get_vx(msg);
800023a6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023aa:	c7 ff       	rcall	800022a8 <mavlink_msg_global_position_int_get_vx>
800023ac:	18 98       	mov	r8,r12
800023ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023b2:	f3 58 00 14 	st.h	r9[20],r8
	global_position_int->vy = mavlink_msg_global_position_int_get_vy(msg);
800023b6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023ba:	c8 bf       	rcall	800022d0 <mavlink_msg_global_position_int_get_vy>
800023bc:	18 98       	mov	r8,r12
800023be:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023c2:	f3 58 00 16 	st.h	r9[22],r8
	global_position_int->vz = mavlink_msg_global_position_int_get_vz(msg);
800023c6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023ca:	c9 7f       	rcall	800022f8 <mavlink_msg_global_position_int_get_vz>
800023cc:	18 98       	mov	r8,r12
800023ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023d2:	f3 58 00 18 	st.h	r9[24],r8
	global_position_int->hdg = mavlink_msg_global_position_int_get_hdg(msg);
800023d6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023da:	ca 3f       	rcall	80002320 <mavlink_msg_global_position_int_get_hdg>
800023dc:	18 98       	mov	r8,r12
800023de:	5c 88       	casts.h	r8
800023e0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023e4:	f3 58 00 1a 	st.h	r9[26],r8
#else
	memcpy(global_position_int, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN);
#endif
}
800023e8:	2f ed       	sub	sp,-8
800023ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800023ee:	00 00       	add	r0,r0
800023f0:	80 00       	ld.sh	r0,r0[0x0]
800023f2:	21 da       	sub	r10,29

800023f4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800023f4:	eb cd 40 c0 	pushm	r6-r7,lr
800023f8:	1a 97       	mov	r7,sp
800023fa:	20 6d       	sub	sp,24
800023fc:	49 e6       	lddpc	r6,80002474 <interpolate+0x80>
800023fe:	1e 26       	rsub	r6,pc
80002400:	ef 4c ff f8 	st.w	r7[-8],r12
80002404:	ef 4b ff f4 	st.w	r7[-12],r11
80002408:	ef 4a ff f0 	st.w	r7[-16],r10
8000240c:	ef 49 ff ec 	st.w	r7[-20],r9
80002410:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80002414:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002418:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000241c:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80002420:	c0 41       	brne	80002428 <interpolate+0x34>
	{
		return y1;
80002422:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002426:	c2 38       	rjmp	8000246c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80002428:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000242c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002430:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80002434:	ee fa ff f8 	ld.w	r10,r7[-8]
80002438:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000243c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80002440:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002444:	ee fa ff f0 	ld.w	r10,r7[-16]
80002448:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000244c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002450:	12 9b       	mov	r11,r9
80002452:	10 9c       	mov	r12,r8
80002454:	f0 16 00 08 	mcall	r6[32]
80002458:	18 98       	mov	r8,r12
8000245a:	10 99       	mov	r9,r8
8000245c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002460:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80002464:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80002468:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000246c:	10 9c       	mov	r12,r8
8000246e:	2f ad       	sub	sp,-24
80002470:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002474:	80 00       	ld.sh	r0,r0[0x0]
80002476:	22 82       	sub	r2,40

80002478 <init_neighbors>:
#include <stdbool.h>

central_data_t *centralData;

void init_neighbors()
{
80002478:	eb cd 40 c0 	pushm	r6-r7,lr
8000247c:	1a 97       	mov	r7,sp
8000247e:	48 96       	lddpc	r6,800024a0 <init_neighbors+0x28>
80002480:	1e 26       	rsub	r6,pc
	centralData = get_central_data();
80002482:	f0 16 00 33 	mcall	r6[204]
80002486:	18 99       	mov	r9,r12
80002488:	ec f8 00 00 	ld.w	r8,r6[0]
8000248c:	91 09       	st.w	r8[0x0],r9
	centralData->number_of_neighbors = 0;
8000248e:	ec f8 00 00 	ld.w	r8,r6[0]
80002492:	70 09       	ld.w	r9,r8[0x0]
80002494:	30 08       	mov	r8,0
80002496:	f3 68 0d 44 	st.b	r9[3396],r8
}
8000249a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000249e:	00 00       	add	r0,r0
800024a0:	80 00       	ld.sh	r0,r0[0x0]
800024a2:	23 04       	sub	r4,48
800024a4:	54 68       	stdsp	sp[0x118],r8
800024a6:	65 72       	ld.w	r2,r2[0x5c]
800024a8:	65 20       	ld.w	r0,r2[0x48]
800024aa:	69 73       	ld.w	r3,r4[0x5c]
800024ac:	20 6d       	sub	sp,24
800024ae:	6f 72       	ld.w	r2,r7[0x5c]
800024b0:	65 20       	ld.w	r0,r2[0x48]
800024b2:	6e 65       	ld.w	r5,r7[0x18]
800024b4:	69 67       	ld.w	r7,r4[0x58]
800024b6:	68 62       	ld.w	r2,r4[0x18]
800024b8:	6f 72       	ld.w	r2,r7[0x5c]
800024ba:	73 20       	ld.w	r0,r9[0x48]
800024bc:	74 68       	ld.w	r8,r10[0x18]
800024be:	61 6e       	ld.w	lr,r0[0x58]
800024c0:	20 70       	sub	r0,7
800024c2:	6c 61       	ld.w	r1,r6[0x18]
800024c4:	6e 6e       	ld.w	lr,r7[0x18]
800024c6:	65 64       	ld.w	r4,r2[0x58]
800024c8:	21 0a       	sub	r10,16
	...

800024cc <read_msg_from_neighbors>:


void read_msg_from_neighbors(Mavlink_Received_t* rec)
{
800024cc:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800024d0:	1a 97       	mov	r7,sp
800024d2:	fa cd 00 a0 	sub	sp,sp,160
800024d6:	fe f6 03 66 	ld.w	r6,pc[870]
800024da:	1e 26       	rsub	r6,pc
800024dc:	ef 4c ff 90 	st.w	r7[-112],r12
	uint8_t i;
	
	mavlink_global_position_int_t packet;
	mavlink_msg_global_position_int_decode(&rec->msg,&packet);
800024e0:	ee f8 ff 90 	ld.w	r8,r7[-112]
800024e4:	ee c9 00 20 	sub	r9,r7,32
800024e8:	12 9b       	mov	r11,r9
800024ea:	10 9c       	mov	r12,r8
800024ec:	c3 0f       	rcall	8000234c <mavlink_msg_global_position_int_decode>
	//Check if coming from a neighbor
	
	if (rec->msg.sysid != mavlink_system.sysid)
800024ee:	ee f8 ff 90 	ld.w	r8,r7[-112]
800024f2:	11 d9       	ld.ub	r9,r8[0x5]
800024f4:	ec f8 00 74 	ld.w	r8,r6[116]
800024f8:	11 88       	ld.ub	r8,r8[0x0]
800024fa:	f0 09 18 00 	cp.b	r9,r8
800024fe:	e0 80 01 9b 	breq	80002834 <read_msg_from_neighbors+0x368>
	{
		global_position_t globalPosNeighbor;
		local_coordinates_t localPosNeighbor;
		uint8_t actualNeighbor;
		
		globalPosNeighbor.longitude = packet.lon / 10000000.0;
80002502:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002506:	10 9c       	mov	r12,r8
80002508:	f0 16 00 1a 	mcall	r6[104]
8000250c:	30 08       	mov	r8,0
8000250e:	e0 69 12 d0 	mov	r9,4816
80002512:	ea 19 41 63 	orh	r9,0x4163
80002516:	f0 16 00 0c 	mcall	r6[48]
8000251a:	14 98       	mov	r8,r10
8000251c:	16 99       	mov	r9,r11
8000251e:	ee e9 ff c4 	st.d	r7[-60],r8
		globalPosNeighbor.latitude = packet.lat / 10000000.0;
80002522:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002526:	10 9c       	mov	r12,r8
80002528:	f0 16 00 1a 	mcall	r6[104]
8000252c:	30 08       	mov	r8,0
8000252e:	e0 69 12 d0 	mov	r9,4816
80002532:	ea 19 41 63 	orh	r9,0x4163
80002536:	f0 16 00 0c 	mcall	r6[48]
8000253a:	14 98       	mov	r8,r10
8000253c:	16 99       	mov	r9,r11
8000253e:	ee e9 ff cc 	st.d	r7[-52],r8
		globalPosNeighbor.altitude = packet.alt / 1000.0;
80002542:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002546:	10 9c       	mov	r12,r8
80002548:	f0 16 00 1a 	mcall	r6[104]
8000254c:	30 08       	mov	r8,0
8000254e:	e0 69 40 00 	mov	r9,16384
80002552:	ea 19 40 8f 	orh	r9,0x408f
80002556:	f0 16 00 0c 	mcall	r6[48]
8000255a:	14 98       	mov	r8,r10
8000255c:	16 99       	mov	r9,r11
8000255e:	10 9a       	mov	r10,r8
80002560:	12 9b       	mov	r11,r9
80002562:	f0 16 00 09 	mcall	r6[36]
80002566:	18 98       	mov	r8,r12
80002568:	ef 48 ff d4 	st.w	r7[-44],r8
		globalPosNeighbor.heading = packet.hdg;
8000256c:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80002570:	5c 78       	castu.h	r8
80002572:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
80002576:	ef 48 ff d8 	st.w	r7[-40],r8
		
		localPosNeighbor = global_to_local_position(globalPosNeighbor,centralData->position_estimator.localPosition.origin);
8000257a:	ec f8 00 00 	ld.w	r8,r6[0]
8000257e:	70 08       	ld.w	r8,r8[0x0]
80002580:	ee cc 00 a0 	sub	r12,r7,160
80002584:	20 7d       	sub	sp,28
80002586:	1a 99       	mov	r9,sp
80002588:	12 9a       	mov	r10,r9
8000258a:	f0 cb f6 0c 	sub	r11,r8,-2548
8000258e:	f4 c8 00 00 	sub	r8,r10,0
80002592:	f6 c9 00 00 	sub	r9,r11,0
80002596:	72 0e       	ld.w	lr,r9[0x0]
80002598:	91 0e       	st.w	r8[0x0],lr
8000259a:	72 1e       	ld.w	lr,r9[0x4]
8000259c:	91 1e       	st.w	r8[0x4],lr
8000259e:	72 2e       	ld.w	lr,r9[0x8]
800025a0:	91 2e       	st.w	r8[0x8],lr
800025a2:	72 39       	ld.w	r9,r9[0xc]
800025a4:	91 39       	st.w	r8[0xc],r9
800025a6:	f6 e8 00 10 	ld.d	r8,r11[16]
800025aa:	f4 e9 00 10 	st.d	r10[16],r8
800025ae:	76 68       	ld.w	r8,r11[0x18]
800025b0:	95 68       	st.w	r10[0x18],r8
800025b2:	20 7d       	sub	sp,28
800025b4:	1a 98       	mov	r8,sp
800025b6:	10 9a       	mov	r10,r8
800025b8:	ee cb 00 3c 	sub	r11,r7,60
800025bc:	f4 c8 00 00 	sub	r8,r10,0
800025c0:	f6 c9 00 00 	sub	r9,r11,0
800025c4:	72 0e       	ld.w	lr,r9[0x0]
800025c6:	91 0e       	st.w	r8[0x0],lr
800025c8:	72 1e       	ld.w	lr,r9[0x4]
800025ca:	91 1e       	st.w	r8[0x4],lr
800025cc:	72 2e       	ld.w	lr,r9[0x8]
800025ce:	91 2e       	st.w	r8[0x8],lr
800025d0:	72 39       	ld.w	r9,r9[0xc]
800025d2:	91 39       	st.w	r8[0xc],r9
800025d4:	f6 e8 00 10 	ld.d	r8,r11[16]
800025d8:	f4 e9 00 10 	st.d	r10[16],r8
800025dc:	76 68       	ld.w	r8,r11[0x18]
800025de:	95 68       	st.w	r10[0x18],r8
800025e0:	f0 16 00 7f 	mcall	r6[508]
800025e4:	2f 2d       	sub	sp,-56
800025e6:	ee cb 00 6c 	sub	r11,r7,108
800025ea:	ee ca 00 a0 	sub	r10,r7,160
800025ee:	f6 c8 00 00 	sub	r8,r11,0
800025f2:	f4 c9 00 00 	sub	r9,r10,0
800025f6:	72 0c       	ld.w	r12,r9[0x0]
800025f8:	91 0c       	st.w	r8[0x0],r12
800025fa:	72 1c       	ld.w	r12,r9[0x4]
800025fc:	91 1c       	st.w	r8[0x4],r12
800025fe:	72 2c       	ld.w	r12,r9[0x8]
80002600:	91 2c       	st.w	r8[0x8],r12
80002602:	72 39       	ld.w	r9,r9[0xc]
80002604:	91 39       	st.w	r8[0xc],r9
80002606:	f6 c8 ff f0 	sub	r8,r11,-16
8000260a:	f4 c9 ff f0 	sub	r9,r10,-16
8000260e:	72 0c       	ld.w	r12,r9[0x0]
80002610:	91 0c       	st.w	r8[0x0],r12
80002612:	72 1c       	ld.w	r12,r9[0x4]
80002614:	91 1c       	st.w	r8[0x4],r12
80002616:	72 2c       	ld.w	r12,r9[0x8]
80002618:	91 2c       	st.w	r8[0x8],r12
8000261a:	72 39       	ld.w	r9,r9[0xc]
8000261c:	91 39       	st.w	r8[0xc],r9
8000261e:	f6 c8 ff e0 	sub	r8,r11,-32
80002622:	f4 c9 ff e0 	sub	r9,r10,-32
80002626:	72 0a       	ld.w	r10,r9[0x0]
80002628:	91 0a       	st.w	r8[0x0],r10
8000262a:	72 1a       	ld.w	r10,r9[0x4]
8000262c:	91 1a       	st.w	r8[0x4],r10
8000262e:	72 2a       	ld.w	r10,r9[0x8]
80002630:	91 2a       	st.w	r8[0x8],r10
80002632:	72 39       	ld.w	r9,r9[0xc]
80002634:	91 39       	st.w	r8[0xc],r9
		
		bool ID_found = false;
80002636:	30 08       	mov	r8,0
80002638:	ef 68 ff ff 	st.b	r7[-1],r8
		i = 0;
8000263c:	30 08       	mov	r8,0
8000263e:	ef 68 ff fd 	st.b	r7[-3],r8
		while ((!ID_found)&&(i<centralData->number_of_neighbors))
80002642:	c1 b8       	rjmp	80002678 <read_msg_from_neighbors+0x1ac>
		{
			if (rec->msg.sysid == centralData->listNeighbors[i].neighborID)
80002644:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002648:	11 d9       	ld.ub	r9,r8[0x5]
8000264a:	ec f8 00 00 	ld.w	r8,r6[0]
8000264e:	70 0a       	ld.w	r10,r8[0x0]
80002650:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80002654:	a5 78       	lsl	r8,0x5
80002656:	f4 08 00 08 	add	r8,r10,r8
8000265a:	f0 c8 f2 b4 	sub	r8,r8,-3404
8000265e:	11 88       	ld.ub	r8,r8[0x0]
80002660:	f0 09 18 00 	cp.b	r9,r8
80002664:	c0 51       	brne	8000266e <read_msg_from_neighbors+0x1a2>
			{
				ID_found = true;
80002666:	30 18       	mov	r8,1
80002668:	ef 68 ff ff 	st.b	r7[-1],r8
8000266c:	c0 68       	rjmp	80002678 <read_msg_from_neighbors+0x1ac>
			}else{
				i++;
8000266e:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80002672:	2f f8       	sub	r8,-1
80002674:	ef 68 ff fd 	st.b	r7[-3],r8
		
		localPosNeighbor = global_to_local_position(globalPosNeighbor,centralData->position_estimator.localPosition.origin);
		
		bool ID_found = false;
		i = 0;
		while ((!ID_found)&&(i<centralData->number_of_neighbors))
80002678:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000267c:	ec 18 00 01 	eorl	r8,0x1
80002680:	5c 58       	castu.b	r8
80002682:	c0 b0       	breq	80002698 <read_msg_from_neighbors+0x1cc>
80002684:	ec f8 00 00 	ld.w	r8,r6[0]
80002688:	70 08       	ld.w	r8,r8[0x0]
8000268a:	f1 38 0d 44 	ld.ub	r8,r8[3396]
8000268e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80002692:	f0 09 18 00 	cp.b	r9,r8
80002696:	cd 73       	brcs	80002644 <read_msg_from_neighbors+0x178>
			//{
				//ID_found = true;
			//}
		}
		
		if (i>=centralData->number_of_neighbors)
80002698:	ec f8 00 00 	ld.w	r8,r6[0]
8000269c:	70 08       	ld.w	r8,r8[0x0]
8000269e:	f1 38 0d 44 	ld.ub	r8,r8[3396]
800026a2:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800026a6:	f0 09 18 00 	cp.b	r9,r8
800026aa:	c2 93       	brcs	800026fc <read_msg_from_neighbors+0x230>
		{
			if (centralData->number_of_neighbors < MAX_NUM_NEIGHBORS)
800026ac:	ec f8 00 00 	ld.w	r8,r6[0]
800026b0:	70 08       	ld.w	r8,r8[0x0]
800026b2:	f1 39 0d 44 	ld.ub	r9,r8[3396]
800026b6:	30 e8       	mov	r8,14
800026b8:	f0 09 18 00 	cp.b	r9,r8
800026bc:	e0 8b 00 13 	brhi	800026e2 <read_msg_from_neighbors+0x216>
			{
				actualNeighbor = centralData->number_of_neighbors;
800026c0:	ec f8 00 00 	ld.w	r8,r6[0]
800026c4:	70 08       	ld.w	r8,r8[0x0]
800026c6:	f1 38 0d 44 	ld.ub	r8,r8[3396]
800026ca:	ef 68 ff fe 	st.b	r7[-2],r8
				centralData->number_of_neighbors++;
800026ce:	ec f8 00 00 	ld.w	r8,r6[0]
800026d2:	70 08       	ld.w	r8,r8[0x0]
800026d4:	f1 39 0d 44 	ld.ub	r9,r8[3396]
800026d8:	2f f9       	sub	r9,-1
800026da:	5c 59       	castu.b	r9
800026dc:	f1 69 0d 44 	st.b	r8[3396],r9
800026e0:	c1 28       	rjmp	80002704 <read_msg_from_neighbors+0x238>
			}else{
				// This case shouldn't happen
				dbg_print("There is more neighbors than planned!\n");
800026e2:	fe cc 02 3e 	sub	r12,pc,574
800026e6:	f0 16 00 01 	mcall	r6[4]
				actualNeighbor = centralData->number_of_neighbors-1;
800026ea:	ec f8 00 00 	ld.w	r8,r6[0]
800026ee:	70 08       	ld.w	r8,r8[0x0]
800026f0:	f1 38 0d 44 	ld.ub	r8,r8[3396]
800026f4:	20 18       	sub	r8,1
800026f6:	ef 68 ff fe 	st.b	r7[-2],r8
800026fa:	c0 58       	rjmp	80002704 <read_msg_from_neighbors+0x238>
			}
		}else{
			actualNeighbor = i;
800026fc:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80002700:	ef 68 ff fe 	st.b	r7[-2],r8
		}
		
		
		
		centralData->listNeighbors[actualNeighbor].neighborID = rec->msg.sysid;
80002704:	ec f8 00 00 	ld.w	r8,r6[0]
80002708:	70 0a       	ld.w	r10,r8[0x0]
8000270a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000270e:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002712:	11 d8       	ld.ub	r8,r8[0x5]
80002714:	a5 79       	lsl	r9,0x5
80002716:	f4 09 00 09 	add	r9,r10,r9
8000271a:	f2 c9 f2 b4 	sub	r9,r9,-3404
8000271e:	b2 88       	st.b	r9[0x0],r8
		
		for (i=0;i<3;i++)
80002720:	30 08       	mov	r8,0
80002722:	ef 68 ff fd 	st.b	r7[-3],r8
80002726:	c1 b8       	rjmp	8000275c <read_msg_from_neighbors+0x290>
		{
			centralData->listNeighbors[actualNeighbor].position[i] = localPosNeighbor.pos[i];
80002728:	ec f8 00 00 	ld.w	r8,r6[0]
8000272c:	70 09       	ld.w	r9,r8[0x0]
8000272e:	ef 3c ff fe 	ld.ub	r12,r7[-2]
80002732:	ef 3b ff fd 	ld.ub	r11,r7[-3]
80002736:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000273a:	a3 68       	lsl	r8,0x2
8000273c:	ee 08 00 08 	add	r8,r7,r8
80002740:	f0 fa ff 94 	ld.w	r10,r8[-108]
80002744:	f8 08 15 03 	lsl	r8,r12,0x3
80002748:	16 08       	add	r8,r11
8000274a:	f0 c8 fc ac 	sub	r8,r8,-852
8000274e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
		
		
		
		centralData->listNeighbors[actualNeighbor].neighborID = rec->msg.sysid;
		
		for (i=0;i<3;i++)
80002752:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80002756:	2f f8       	sub	r8,-1
80002758:	ef 68 ff fd 	st.b	r7[-3],r8
8000275c:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80002760:	30 28       	mov	r8,2
80002762:	f0 09 18 00 	cp.b	r9,r8
80002766:	fe 98 ff e1 	brls	80002728 <read_msg_from_neighbors+0x25c>
		{
			centralData->listNeighbors[actualNeighbor].position[i] = localPosNeighbor.pos[i];
		}
		centralData->listNeighbors[actualNeighbor].velocity[X] = packet.vx / 100.0;
8000276a:	ec f8 00 00 	ld.w	r8,r6[0]
8000276e:	70 05       	ld.w	r5,r8[0x0]
80002770:	ef 33 ff fe 	ld.ub	r3,r7[-2]
80002774:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80002778:	10 9c       	mov	r12,r8
8000277a:	f0 16 00 1a 	mcall	r6[104]
8000277e:	30 08       	mov	r8,0
80002780:	fc 19 40 59 	movh	r9,0x4059
80002784:	f0 16 00 0c 	mcall	r6[48]
80002788:	14 98       	mov	r8,r10
8000278a:	16 99       	mov	r9,r11
8000278c:	10 9a       	mov	r10,r8
8000278e:	12 9b       	mov	r11,r9
80002790:	f0 16 00 09 	mcall	r6[36]
80002794:	18 99       	mov	r9,r12
80002796:	e6 08 15 01 	lsl	r8,r3,0x1
8000279a:	2f f8       	sub	r8,-1
8000279c:	a5 68       	lsl	r8,0x4
8000279e:	ea 08 00 08 	add	r8,r5,r8
800027a2:	f0 c8 f2 b4 	sub	r8,r8,-3404
800027a6:	91 09       	st.w	r8[0x0],r9
		centralData->listNeighbors[actualNeighbor].velocity[Y] = packet.vy / 100.0;
800027a8:	ec f8 00 00 	ld.w	r8,r6[0]
800027ac:	70 05       	ld.w	r5,r8[0x0]
800027ae:	ef 33 ff fe 	ld.ub	r3,r7[-2]
800027b2:	ef 08 ff f6 	ld.sh	r8,r7[-10]
800027b6:	10 9c       	mov	r12,r8
800027b8:	f0 16 00 1a 	mcall	r6[104]
800027bc:	30 08       	mov	r8,0
800027be:	fc 19 40 59 	movh	r9,0x4059
800027c2:	f0 16 00 0c 	mcall	r6[48]
800027c6:	14 98       	mov	r8,r10
800027c8:	16 99       	mov	r9,r11
800027ca:	10 9a       	mov	r10,r8
800027cc:	12 9b       	mov	r11,r9
800027ce:	f0 16 00 09 	mcall	r6[36]
800027d2:	18 99       	mov	r9,r12
800027d4:	e6 c8 ff 95 	sub	r8,r3,-107
800027d8:	a5 78       	lsl	r8,0x5
800027da:	ea 08 00 08 	add	r8,r5,r8
800027de:	91 09       	st.w	r8[0x0],r9
		centralData->listNeighbors[actualNeighbor].velocity[Z] = packet.vz / 100.0;
800027e0:	ec f8 00 00 	ld.w	r8,r6[0]
800027e4:	70 05       	ld.w	r5,r8[0x0]
800027e6:	ef 33 ff fe 	ld.ub	r3,r7[-2]
800027ea:	ef 08 ff f8 	ld.sh	r8,r7[-8]
800027ee:	10 9c       	mov	r12,r8
800027f0:	f0 16 00 1a 	mcall	r6[104]
800027f4:	30 08       	mov	r8,0
800027f6:	fc 19 40 59 	movh	r9,0x4059
800027fa:	f0 16 00 0c 	mcall	r6[48]
800027fe:	14 98       	mov	r8,r10
80002800:	16 99       	mov	r9,r11
80002802:	10 9a       	mov	r10,r8
80002804:	12 9b       	mov	r11,r9
80002806:	f0 16 00 09 	mcall	r6[36]
8000280a:	18 99       	mov	r9,r12
8000280c:	e6 08 15 05 	lsl	r8,r3,0x5
80002810:	ea 08 00 08 	add	r8,r5,r8
80002814:	f0 c8 f2 9c 	sub	r8,r8,-3428
80002818:	91 09       	st.w	r8[0x0],r9
		
		centralData->listNeighbors[actualNeighbor].size = SIZE_VHC_ORCA;
8000281a:	ec f8 00 00 	ld.w	r8,r6[0]
8000281e:	70 09       	ld.w	r9,r8[0x0]
80002820:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80002824:	a5 78       	lsl	r8,0x5
80002826:	f2 08 00 08 	add	r8,r9,r8
8000282a:	f0 c8 f2 98 	sub	r8,r8,-3432
8000282e:	fc 19 40 a0 	movh	r9,0x40a0
80002832:	91 09       	st.w	r8[0x0],r9
		//dbg_print(" with velocity ");
		//dbg_print_vector(centralData->listNeighbors[actualNeighbor].velocity,2);
		//dbg_print("\n");
		
	}
80002834:	2d 8d       	sub	sp,-160
80002836:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000283a:	00 00       	add	r0,r0
8000283c:	80 00       	ld.sh	r0,r0[0x0]
8000283e:	23 5e       	sub	lr,53

80002840 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80002840:	eb cd 40 c0 	pushm	r6-r7,lr
80002844:	1a 97       	mov	r7,sp
80002846:	20 3d       	sub	sp,12
80002848:	49 06       	lddpc	r6,80002888 <mav_array_memcpy+0x48>
8000284a:	1e 26       	rsub	r6,pc
8000284c:	ef 4c ff fc 	st.w	r7[-4],r12
80002850:	ef 4b ff f8 	st.w	r7[-8],r11
80002854:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80002858:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000285c:	58 08       	cp.w	r8,0
8000285e:	c0 91       	brne	80002870 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80002860:	ee fa ff f4 	ld.w	r10,r7[-12]
80002864:	30 0b       	mov	r11,0
80002866:	ee fc ff fc 	ld.w	r12,r7[-4]
8000286a:	f0 16 00 31 	mcall	r6[196]
8000286e:	c0 98       	rjmp	80002880 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80002870:	ee fa ff f4 	ld.w	r10,r7[-12]
80002874:	ee fb ff f8 	ld.w	r11,r7[-8]
80002878:	ee fc ff fc 	ld.w	r12,r7[-4]
8000287c:	f0 16 00 1b 	mcall	r6[108]
	}
}
80002880:	2f dd       	sub	sp,-12
80002882:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002886:	00 00       	add	r0,r0
80002888:	80 00       	ld.sh	r0,r0[0x0]
8000288a:	26 ce       	sub	lr,108

8000288c <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8000288c:	eb cd 40 80 	pushm	r7,lr
80002890:	1a 97       	mov	r7,sp
80002892:	20 3d       	sub	sp,12
80002894:	ef 4c ff f8 	st.w	r7[-8],r12
80002898:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8000289c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028a0:	70 09       	ld.w	r9,r8[0x0]
800028a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028a6:	70 08       	ld.w	r8,r8[0x0]
800028a8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800028ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028b0:	2f c8       	sub	r8,-4
800028b2:	70 0a       	ld.w	r10,r8[0x0]
800028b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028b8:	2f c8       	sub	r8,-4
800028ba:	70 08       	ld.w	r8,r8[0x0]
800028bc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800028c0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800028c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028c8:	2f 88       	sub	r8,-8
800028ca:	70 0a       	ld.w	r10,r8[0x0]
800028cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028d0:	2f 88       	sub	r8,-8
800028d2:	70 08       	ld.w	r8,r8[0x0]
800028d4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800028d8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800028dc:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
800028e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800028e4:	10 9c       	mov	r12,r8
800028e6:	2f dd       	sub	sp,-12
800028e8:	e3 cd 80 80 	ldm	sp++,r7,pc

800028ec <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
800028ec:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800028f0:	1a 97       	mov	r7,sp
800028f2:	20 7d       	sub	sp,28
800028f4:	4b d6       	lddpc	r6,800029e8 <quat_multi+0xfc>
800028f6:	1e 26       	rsub	r6,pc
800028f8:	ee c8 ff ec 	sub	r8,r7,-20
800028fc:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
800028fe:	70 2a       	ld.w	r10,r8[0x8]
80002900:	70 79       	ld.w	r9,r8[0x1c]
80002902:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80002906:	70 3b       	ld.w	r11,r8[0xc]
80002908:	70 69       	ld.w	r9,r8[0x18]
8000290a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000290e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002912:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
80002916:	70 3a       	ld.w	r10,r8[0xc]
80002918:	70 59       	ld.w	r9,r8[0x14]
8000291a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000291e:	70 1b       	ld.w	r11,r8[0x4]
80002920:	70 79       	ld.w	r9,r8[0x1c]
80002922:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80002926:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000292a:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8000292e:	70 1a       	ld.w	r10,r8[0x4]
80002930:	70 69       	ld.w	r9,r8[0x18]
80002932:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80002936:	70 2b       	ld.w	r11,r8[0x8]
80002938:	70 59       	ld.w	r9,r8[0x14]
8000293a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000293e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002942:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
80002946:	70 4a       	ld.w	r10,r8[0x10]
80002948:	70 19       	ld.w	r9,r8[0x4]
8000294a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000294e:	70 0b       	ld.w	r11,r8[0x0]
80002950:	70 59       	ld.w	r9,r8[0x14]
80002952:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80002956:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000295a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000295e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80002962:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
80002966:	70 4a       	ld.w	r10,r8[0x10]
80002968:	70 29       	ld.w	r9,r8[0x8]
8000296a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000296e:	70 0b       	ld.w	r11,r8[0x0]
80002970:	70 69       	ld.w	r9,r8[0x18]
80002972:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80002976:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000297a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000297e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80002982:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
80002986:	70 4a       	ld.w	r10,r8[0x10]
80002988:	70 39       	ld.w	r9,r8[0xc]
8000298a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000298e:	70 0b       	ld.w	r11,r8[0x0]
80002990:	70 79       	ld.w	r9,r8[0x1c]
80002992:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80002996:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000299a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000299e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800029a2:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
800029a6:	70 0a       	ld.w	r10,r8[0x0]
800029a8:	70 49       	ld.w	r9,r8[0x10]
800029aa:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
800029ae:	f0 c9 ff f0 	sub	r9,r8,-16
800029b2:	2f c9       	sub	r9,-4
800029b4:	2f c8       	sub	r8,-4
800029b6:	12 9b       	mov	r11,r9
800029b8:	10 9c       	mov	r12,r8
800029ba:	c6 9f       	rcall	8000288c <scalar_product>
800029bc:	18 98       	mov	r8,r12
800029be:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
800029c2:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
800029c6:	0a 98       	mov	r8,r5
800029c8:	ee c9 00 1c 	sub	r9,r7,28
800029cc:	20 08       	sub	r8,0
800029ce:	20 09       	sub	r9,0
800029d0:	72 0a       	ld.w	r10,r9[0x0]
800029d2:	91 0a       	st.w	r8[0x0],r10
800029d4:	72 1a       	ld.w	r10,r9[0x4]
800029d6:	91 1a       	st.w	r8[0x4],r10
800029d8:	72 2a       	ld.w	r10,r9[0x8]
800029da:	91 2a       	st.w	r8[0x8],r10
800029dc:	72 39       	ld.w	r9,r9[0xc]
800029de:	91 39       	st.w	r8[0xc],r9
}
800029e0:	0a 9c       	mov	r12,r5
800029e2:	2f 9d       	sub	sp,-28
800029e4:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800029e8:	80 00       	ld.sh	r0,r0[0x0]
800029ea:	27 7a       	sub	r10,119

800029ec <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
800029ec:	eb cd 40 80 	pushm	r7,lr
800029f0:	1a 97       	mov	r7,sp
800029f2:	20 5d       	sub	sp,20
800029f4:	ee c9 ff f8 	sub	r9,r7,-8
800029f8:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
800029fa:	72 08       	ld.w	r8,r9[0x0]
800029fc:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
80002a00:	30 08       	mov	r8,0
80002a02:	ef 48 ff fc 	st.w	r7[-4],r8
80002a06:	c1 58       	rjmp	80002a30 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
80002a08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a0c:	ee fb ff fc 	ld.w	r11,r7[-4]
80002a10:	2f fb       	sub	r11,-1
80002a12:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
80002a16:	ee 1b 80 00 	eorh	r11,0x8000
80002a1a:	2f f8       	sub	r8,-1
80002a1c:	a3 68       	lsl	r8,0x2
80002a1e:	ee 08 00 08 	add	r8,r7,r8
80002a22:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
80002a26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a2a:	2f f8       	sub	r8,-1
80002a2c:	ef 48 ff fc 	st.w	r7[-4],r8
80002a30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a34:	58 28       	cp.w	r8,2
80002a36:	fe 9a ff e9 	brle	80002a08 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
80002a3a:	14 98       	mov	r8,r10
80002a3c:	ee c9 00 14 	sub	r9,r7,20
80002a40:	20 08       	sub	r8,0
80002a42:	20 09       	sub	r9,0
80002a44:	72 0b       	ld.w	r11,r9[0x0]
80002a46:	91 0b       	st.w	r8[0x0],r11
80002a48:	72 1b       	ld.w	r11,r9[0x4]
80002a4a:	91 1b       	st.w	r8[0x4],r11
80002a4c:	72 2b       	ld.w	r11,r9[0x8]
80002a4e:	91 2b       	st.w	r8[0x8],r11
80002a50:	72 39       	ld.w	r9,r9[0xc]
80002a52:	91 39       	st.w	r8[0xc],r9
}
80002a54:	14 9c       	mov	r12,r10
80002a56:	2f bd       	sub	sp,-20
80002a58:	e3 cd 80 80 	ldm	sp++,r7,pc

80002a5c <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
80002a5c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80002a60:	1a 97       	mov	r7,sp
80002a62:	20 cd       	sub	sp,48
80002a64:	4b c6       	lddpc	r6,80002b54 <quat_global_to_local+0xf8>
80002a66:	1e 26       	rsub	r6,pc
80002a68:	ee c5 ff ec 	sub	r5,r7,-20
80002a6c:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
80002a6e:	ee ca 00 10 	sub	r10,r7,16
80002a72:	20 4d       	sub	sp,16
80002a74:	1a 98       	mov	r8,sp
80002a76:	0a 99       	mov	r9,r5
80002a78:	20 08       	sub	r8,0
80002a7a:	20 09       	sub	r9,0
80002a7c:	72 0b       	ld.w	r11,r9[0x0]
80002a7e:	91 0b       	st.w	r8[0x0],r11
80002a80:	72 1b       	ld.w	r11,r9[0x4]
80002a82:	91 1b       	st.w	r8[0x4],r11
80002a84:	72 2b       	ld.w	r11,r9[0x8]
80002a86:	91 2b       	st.w	r8[0x8],r11
80002a88:	72 39       	ld.w	r9,r9[0xc]
80002a8a:	91 39       	st.w	r8[0xc],r9
80002a8c:	14 9c       	mov	r12,r10
80002a8e:	ca ff       	rcall	800029ec <quat_inv>
80002a90:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
80002a92:	ee ca 00 20 	sub	r10,r7,32
80002a96:	20 4d       	sub	sp,16
80002a98:	1a 98       	mov	r8,sp
80002a9a:	ea c9 ff f0 	sub	r9,r5,-16
80002a9e:	20 08       	sub	r8,0
80002aa0:	20 09       	sub	r9,0
80002aa2:	72 0b       	ld.w	r11,r9[0x0]
80002aa4:	91 0b       	st.w	r8[0x0],r11
80002aa6:	72 1b       	ld.w	r11,r9[0x4]
80002aa8:	91 1b       	st.w	r8[0x4],r11
80002aaa:	72 2b       	ld.w	r11,r9[0x8]
80002aac:	91 2b       	st.w	r8[0x8],r11
80002aae:	72 39       	ld.w	r9,r9[0xc]
80002ab0:	91 39       	st.w	r8[0xc],r9
80002ab2:	20 4d       	sub	sp,16
80002ab4:	1a 98       	mov	r8,sp
80002ab6:	ee c9 00 10 	sub	r9,r7,16
80002aba:	20 08       	sub	r8,0
80002abc:	20 09       	sub	r9,0
80002abe:	72 0b       	ld.w	r11,r9[0x0]
80002ac0:	91 0b       	st.w	r8[0x0],r11
80002ac2:	72 1b       	ld.w	r11,r9[0x4]
80002ac4:	91 1b       	st.w	r8[0x4],r11
80002ac6:	72 2b       	ld.w	r11,r9[0x8]
80002ac8:	91 2b       	st.w	r8[0x8],r11
80002aca:	72 39       	ld.w	r9,r9[0xc]
80002acc:	91 39       	st.w	r8[0xc],r9
80002ace:	14 9c       	mov	r12,r10
80002ad0:	c0 ef       	rcall	800028ec <quat_multi>
80002ad2:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
80002ad4:	ee ca 00 30 	sub	r10,r7,48
80002ad8:	20 4d       	sub	sp,16
80002ada:	1a 98       	mov	r8,sp
80002adc:	0a 99       	mov	r9,r5
80002ade:	20 08       	sub	r8,0
80002ae0:	20 09       	sub	r9,0
80002ae2:	72 0b       	ld.w	r11,r9[0x0]
80002ae4:	91 0b       	st.w	r8[0x0],r11
80002ae6:	72 1b       	ld.w	r11,r9[0x4]
80002ae8:	91 1b       	st.w	r8[0x4],r11
80002aea:	72 2b       	ld.w	r11,r9[0x8]
80002aec:	91 2b       	st.w	r8[0x8],r11
80002aee:	72 39       	ld.w	r9,r9[0xc]
80002af0:	91 39       	st.w	r8[0xc],r9
80002af2:	20 4d       	sub	sp,16
80002af4:	1a 98       	mov	r8,sp
80002af6:	ee c9 00 20 	sub	r9,r7,32
80002afa:	20 08       	sub	r8,0
80002afc:	20 09       	sub	r9,0
80002afe:	72 0b       	ld.w	r11,r9[0x0]
80002b00:	91 0b       	st.w	r8[0x0],r11
80002b02:	72 1b       	ld.w	r11,r9[0x4]
80002b04:	91 1b       	st.w	r8[0x4],r11
80002b06:	72 2b       	ld.w	r11,r9[0x8]
80002b08:	91 2b       	st.w	r8[0x8],r11
80002b0a:	72 39       	ld.w	r9,r9[0xc]
80002b0c:	91 39       	st.w	r8[0xc],r9
80002b0e:	14 9c       	mov	r12,r10
80002b10:	ce ee       	rcall	800028ec <quat_multi>
80002b12:	2f 8d       	sub	sp,-32
80002b14:	ee c8 00 20 	sub	r8,r7,32
80002b18:	ee c9 00 30 	sub	r9,r7,48
80002b1c:	20 08       	sub	r8,0
80002b1e:	20 09       	sub	r9,0
80002b20:	72 0a       	ld.w	r10,r9[0x0]
80002b22:	91 0a       	st.w	r8[0x0],r10
80002b24:	72 1a       	ld.w	r10,r9[0x4]
80002b26:	91 1a       	st.w	r8[0x4],r10
80002b28:	72 2a       	ld.w	r10,r9[0x8]
80002b2a:	91 2a       	st.w	r8[0x8],r10
80002b2c:	72 39       	ld.w	r9,r9[0xc]
80002b2e:	91 39       	st.w	r8[0xc],r9

	return qtmp;
80002b30:	06 98       	mov	r8,r3
80002b32:	ee c9 00 20 	sub	r9,r7,32
80002b36:	20 08       	sub	r8,0
80002b38:	20 09       	sub	r9,0
80002b3a:	72 0a       	ld.w	r10,r9[0x0]
80002b3c:	91 0a       	st.w	r8[0x0],r10
80002b3e:	72 1a       	ld.w	r10,r9[0x4]
80002b40:	91 1a       	st.w	r8[0x4],r10
80002b42:	72 2a       	ld.w	r10,r9[0x8]
80002b44:	91 2a       	st.w	r8[0x8],r10
80002b46:	72 39       	ld.w	r9,r9[0xc]
80002b48:	91 39       	st.w	r8[0xc],r9
}
80002b4a:	06 9c       	mov	r12,r3
80002b4c:	2f 4d       	sub	sp,-48
80002b4e:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80002b52:	00 00       	add	r0,r0
80002b54:	80 00       	ld.sh	r0,r0[0x0]
80002b56:	28 ea       	sub	r10,-114

80002b58 <fast_sqrt>:
	
	return qtmp;
}

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
80002b58:	eb cd 40 c0 	pushm	r6-r7,lr
80002b5c:	1a 97       	mov	r7,sp
80002b5e:	20 2d       	sub	sp,8
80002b60:	4b 26       	lddpc	r6,80002c28 <fast_sqrt+0xd0>
80002b62:	1e 26       	rsub	r6,pc
80002b64:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
80002b68:	30 18       	mov	r8,1
80002b6a:	ee fa ff f8 	ld.w	r10,r7[-8]
80002b6e:	30 09       	mov	r9,0
80002b70:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80002b74:	e0 8c 00 03 	brvs	80002b7a <fast_sqrt+0x22>
80002b78:	c0 25       	brlt	80002b7c <fast_sqrt+0x24>
80002b7a:	30 08       	mov	r8,0
80002b7c:	5c 58       	castu.b	r8
80002b7e:	c0 30       	breq	80002b84 <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
80002b80:	30 08       	mov	r8,0
80002b82:	c4 f8       	rjmp	80002c20 <fast_sqrt+0xc8>
	}
	float result=1.0;
80002b84:	fc 18 3f 80 	movh	r8,0x3f80
80002b88:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002b8c:	ee fb ff fc 	ld.w	r11,r7[-4]
80002b90:	ee fc ff f8 	ld.w	r12,r7[-8]
80002b94:	f0 16 00 08 	mcall	r6[32]
80002b98:	18 98       	mov	r8,r12
80002b9a:	10 99       	mov	r9,r8
80002b9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ba0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002ba4:	fc 18 3f 00 	movh	r8,0x3f00
80002ba8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002bac:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002bb0:	ee fb ff fc 	ld.w	r11,r7[-4]
80002bb4:	ee fc ff f8 	ld.w	r12,r7[-8]
80002bb8:	f0 16 00 08 	mcall	r6[32]
80002bbc:	18 98       	mov	r8,r12
80002bbe:	10 99       	mov	r9,r8
80002bc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002bc4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002bc8:	fc 18 3f 00 	movh	r8,0x3f00
80002bcc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002bd0:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002bd4:	ee fb ff fc 	ld.w	r11,r7[-4]
80002bd8:	ee fc ff f8 	ld.w	r12,r7[-8]
80002bdc:	f0 16 00 08 	mcall	r6[32]
80002be0:	18 98       	mov	r8,r12
80002be2:	10 99       	mov	r9,r8
80002be4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002be8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002bec:	fc 18 3f 00 	movh	r8,0x3f00
80002bf0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002bf4:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002bf8:	ee fb ff fc 	ld.w	r11,r7[-4]
80002bfc:	ee fc ff f8 	ld.w	r12,r7[-8]
80002c00:	f0 16 00 08 	mcall	r6[32]
80002c04:	18 98       	mov	r8,r12
80002c06:	10 99       	mov	r9,r8
80002c08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c0c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002c10:	fc 18 3f 00 	movh	r8,0x3f00
80002c14:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002c18:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
80002c1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80002c20:	10 9c       	mov	r12,r8
80002c22:	2f ed       	sub	sp,-8
80002c24:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c28:	80 00       	ld.sh	r0,r0[0x0]
80002c2a:	29 e6       	sub	r6,-98

80002c2c <vector_norm_sqr>:

float static inline vector_norm_sqr(float u[])
{
80002c2c:	eb cd 40 c0 	pushm	r6-r7,lr
80002c30:	1a 97       	mov	r7,sp
80002c32:	20 2d       	sub	sp,8
80002c34:	48 96       	lddpc	r6,80002c58 <vector_norm_sqr+0x2c>
80002c36:	1e 26       	rsub	r6,pc
80002c38:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
80002c3c:	ee fb ff f8 	ld.w	r11,r7[-8]
80002c40:	ee fc ff f8 	ld.w	r12,r7[-8]
80002c44:	c2 4e       	rcall	8000288c <scalar_product>
80002c46:	18 98       	mov	r8,r12
80002c48:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
80002c4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80002c50:	10 9c       	mov	r12,r8
80002c52:	2f ed       	sub	sp,-8
80002c54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c58:	80 00       	ld.sh	r0,r0[0x0]
80002c5a:	2a ba       	sub	r10,-85

80002c5c <vector_norm>:

float static inline vector_norm(float u[])
{
80002c5c:	eb cd 40 c0 	pushm	r6-r7,lr
80002c60:	1a 97       	mov	r7,sp
80002c62:	20 1d       	sub	sp,4
80002c64:	48 86       	lddpc	r6,80002c84 <vector_norm+0x28>
80002c66:	1e 26       	rsub	r6,pc
80002c68:	ef 4c ff fc 	st.w	r7[-4],r12
	return fast_sqrt(vector_norm_sqr(u));
80002c6c:	ee fc ff fc 	ld.w	r12,r7[-4]
80002c70:	cd ef       	rcall	80002c2c <vector_norm_sqr>
80002c72:	18 98       	mov	r8,r12
80002c74:	10 9c       	mov	r12,r8
80002c76:	c7 1f       	rcall	80002b58 <fast_sqrt>
80002c78:	18 98       	mov	r8,r12
}
80002c7a:	10 9c       	mov	r12,r8
80002c7c:	2f fd       	sub	sp,-4
80002c7e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c82:	00 00       	add	r0,r0
80002c84:	80 00       	ld.sh	r0,r0[0x0]
80002c86:	2a ea       	sub	r10,-82

80002c88 <f_min>:
	}else{
		return -a;
	}
}

static inline float f_min(const float a, const float b){
80002c88:	eb cd 40 80 	pushm	r7,lr
80002c8c:	1a 97       	mov	r7,sp
80002c8e:	20 2d       	sub	sp,8
80002c90:	ef 4c ff fc 	st.w	r7[-4],r12
80002c94:	ef 4b ff f8 	st.w	r7[-8],r11
	if (a <= b)
80002c98:	30 18       	mov	r8,1
80002c9a:	ee fa ff fc 	ld.w	r10,r7[-4]
80002c9e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002ca2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80002ca6:	e0 8c 00 04 	brvs	80002cae <f_min+0x26>
80002caa:	e0 8a 00 03 	brle	80002cb0 <f_min+0x28>
80002cae:	30 08       	mov	r8,0
80002cb0:	5c 58       	castu.b	r8
80002cb2:	c0 40       	breq	80002cba <f_min+0x32>
	{
		return a;
80002cb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002cb8:	c0 38       	rjmp	80002cbe <f_min+0x36>
	}else{
		return b;
80002cba:	ee f8 ff f8 	ld.w	r8,r7[-8]
	}
}
80002cbe:	10 9c       	mov	r12,r8
80002cc0:	2f ed       	sub	sp,-8
80002cc2:	e3 cd 80 80 	ldm	sp++,r7,pc

80002cc6 <f_max>:

static inline float f_max(const float a, const float b){
80002cc6:	eb cd 40 80 	pushm	r7,lr
80002cca:	1a 97       	mov	r7,sp
80002ccc:	20 2d       	sub	sp,8
80002cce:	ef 4c ff fc 	st.w	r7[-4],r12
80002cd2:	ef 4b ff f8 	st.w	r7[-8],r11
	if (a >= b)
80002cd6:	30 18       	mov	r8,1
80002cd8:	ee fa ff fc 	ld.w	r10,r7[-4]
80002cdc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002ce0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80002ce4:	e0 8c 00 03 	brvs	80002cea <f_max+0x24>
80002ce8:	c0 24       	brge	80002cec <f_max+0x26>
80002cea:	30 08       	mov	r8,0
80002cec:	5c 58       	castu.b	r8
80002cee:	c0 40       	breq	80002cf6 <f_max+0x30>
	{
		return a;
80002cf0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002cf4:	c0 38       	rjmp	80002cfa <f_max+0x34>
	}else{
		return b;
80002cf6:	ee f8 ff f8 	ld.w	r8,r7[-8]
	}
}
80002cfa:	10 9c       	mov	r12,r8
80002cfc:	2f ed       	sub	sp,-8
80002cfe:	e3 cd 80 80 	ldm	sp++,r7,pc

80002d02 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80002d02:	eb cd 40 c0 	pushm	r6-r7,lr
80002d06:	1a 97       	mov	r7,sp
80002d08:	20 6d       	sub	sp,24
80002d0a:	49 f6       	lddpc	r6,80002d84 <interpolate+0x82>
80002d0c:	1e 26       	rsub	r6,pc
80002d0e:	ef 4c ff f8 	st.w	r7[-8],r12
80002d12:	ef 4b ff f4 	st.w	r7[-12],r11
80002d16:	ef 4a ff f0 	st.w	r7[-16],r10
80002d1a:	ef 49 ff ec 	st.w	r7[-20],r9
80002d1e:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80002d22:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002d26:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d2a:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80002d2e:	c0 41       	brne	80002d36 <interpolate+0x34>
	{
		return y1;
80002d30:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002d34:	c2 38       	rjmp	80002d7a <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80002d36:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002d3a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002d3e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80002d42:	ee fa ff f8 	ld.w	r10,r7[-8]
80002d46:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d4a:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80002d4e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002d52:	ee fa ff f0 	ld.w	r10,r7[-16]
80002d56:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002d5a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002d5e:	12 9b       	mov	r11,r9
80002d60:	10 9c       	mov	r12,r8
80002d62:	f0 16 00 08 	mcall	r6[32]
80002d66:	18 98       	mov	r8,r12
80002d68:	10 99       	mov	r9,r8
80002d6a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002d6e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80002d72:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80002d76:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80002d7a:	10 9c       	mov	r12,r8
80002d7c:	2f ad       	sub	sp,-24
80002d7e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002d82:	00 00       	add	r0,r0
80002d84:	80 00       	ld.sh	r0,r0[0x0]
80002d86:	2b 90       	sub	r0,-71

80002d88 <init_orca>:
float timeHorizon, invTimeHorizon;

int8_t loop_count_orca = 0;

void init_orca()
{
80002d88:	eb cd 40 c0 	pushm	r6-r7,lr
80002d8c:	1a 97       	mov	r7,sp
80002d8e:	49 26       	lddpc	r6,80002dd4 <init_orca+0x4c>
80002d90:	1e 26       	rsub	r6,pc
	centralData = get_central_data();
80002d92:	f0 16 00 33 	mcall	r6[204]
80002d96:	18 99       	mov	r9,r12
80002d98:	ec f8 00 00 	ld.w	r8,r6[0]
80002d9c:	91 09       	st.w	r8[0x0],r9
	centralData->safe_size = SIZE_VHC_ORCA;
80002d9e:	ec f8 00 00 	ld.w	r8,r6[0]
80002da2:	70 08       	ld.w	r8,r8[0x0]
80002da4:	fc 19 40 a0 	movh	r9,0x40a0
80002da8:	f1 49 0d 48 	st.w	r8[3400],r9
		
	timeHorizon = 8.0;
80002dac:	ec f8 04 4c 	ld.w	r8,r6[1100]
80002db0:	fc 19 41 00 	movh	r9,0x4100
80002db4:	91 09       	st.w	r8[0x0],r9
	invTimeHorizon = 1.0/timeHorizon;
80002db6:	ec f8 04 4c 	ld.w	r8,r6[1100]
80002dba:	70 08       	ld.w	r8,r8[0x0]
80002dbc:	10 9b       	mov	r11,r8
80002dbe:	fc 1c 3f 80 	movh	r12,0x3f80
80002dc2:	f0 16 00 08 	mcall	r6[32]
80002dc6:	18 98       	mov	r8,r12
80002dc8:	10 99       	mov	r9,r8
80002dca:	ec f8 02 d0 	ld.w	r8,r6[720]
80002dce:	91 09       	st.w	r8[0x0],r9
}
80002dd0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002dd4:	80 00       	ld.sh	r0,r0[0x0]
80002dd6:	2c 14       	sub	r4,-63
80002dd8:	43 6f       	lddsp	pc,sp[0xd8]
80002dda:	6c 6c       	ld.w	r12,r6[0x18]
80002ddc:	69 73       	ld.w	r3,r4[0x5c]
80002dde:	69 6f       	ld.w	pc,r4[0x58]
80002de0:	6e 21       	ld.w	r1,r7[0x8]
80002de2:	20 00       	sub	r0,0
80002de4:	44 69       	lddsp	r9,sp[0x118]
80002de6:	73 74       	ld.w	r4,r9[0x5c]
80002de8:	61 6e       	ld.w	lr,r0[0x58]
80002dea:	63 65       	ld.w	r5,r1[0x58]
80002dec:	20 77       	sub	r7,7
80002dee:	69 74       	ld.w	r4,r4[0x5c]
80002df0:	68 20       	ld.w	r0,r4[0x8]
80002df2:	6e 65       	ld.w	r5,r7[0x18]
80002df4:	69 67       	ld.w	r7,r4[0x58]
80002df6:	68 62       	ld.w	r2,r4[0x18]
80002df8:	6f 72       	ld.w	r2,r7[0x5c]
80002dfa:	20 00       	sub	r0,0
80002dfc:	28 78       	sub	r8,-121
80002dfe:	31 30       	mov	r0,19
80002e00:	30 29       	mov	r9,2
80002e02:	3a 00       	mov	r0,-96
80002e04:	0a 00       	add	r0,r5
80002e06:	00 00       	add	r0,r0
80002e08:	4f 72       	lddpc	r2,80002fe4 <computeNewVelocity+0x1b8>
80002e0a:	63 61       	ld.w	r1,r1[0x58]
80002e0c:	20 64       	sub	r4,6
80002e0e:	69 66       	ld.w	r6,r4[0x58]
80002e10:	66 76       	ld.w	r6,r3[0x1c]
80002e12:	65 6c       	ld.w	r12,r2[0x58]
80002e14:	3a 00       	mov	r0,-96
80002e16:	00 00       	add	r0,r0
80002e18:	2c 20       	sub	r0,-62
80002e1a:	4f 70       	lddpc	r0,80002ff4 <computeNewVelocity+0x1c8>
80002e1c:	74 69       	ld.w	r9,r10[0x18]
80002e1e:	6d 61       	ld.w	r1,r6[0x58]
80002e20:	6c 3a       	ld.w	r10,r6[0xc]
80002e22:	00 00       	add	r0,r0
80002e24:	2c 20       	sub	r0,-62
80002e26:	4e 65       	lddpc	r5,80002fbc <computeNewVelocity+0x190>
80002e28:	77 3a       	ld.w	r10,r11[0x4c]
	...

80002e2c <computeNewVelocity>:

void computeNewVelocity(float OptimalVelocity[], float NewVelocity[])
{
80002e2c:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80002e30:	1a 97       	mov	r7,sp
80002e32:	fa cd 02 34 	sub	sp,sp,564
80002e36:	fe f6 09 ee 	ld.w	r6,pc[2542]
80002e3a:	1e 26       	rsub	r6,pc
80002e3c:	ef 4c fd e0 	st.w	r7[-544],r12
80002e40:	ef 4b fd dc 	st.w	r7[-548],r11
	float relativePosition[3], relativeVelocity[3];
	float combinedRadius, distSq, combinedRadiusSq, dotProduct, wLength, wLenghtSq;
	
	float w[3], unitW[3], u[3], neighor_bf[3];
	
	for (i=0;i<3;i++)
80002e44:	30 08       	mov	r8,0
80002e46:	ef 68 ff cf 	st.b	r7[-49],r8
80002e4a:	c1 68       	rjmp	80002e76 <computeNewVelocity+0x4a>
	{
		NewVelocity[i] = OptimalVelocity[i];
80002e4c:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002e50:	a3 68       	lsl	r8,0x2
80002e52:	ee f9 fd dc 	ld.w	r9,r7[-548]
80002e56:	f2 08 00 08 	add	r8,r9,r8
80002e5a:	ef 29 ff cf 	ld.sb	r9,r7[-49]
80002e5e:	a3 69       	lsl	r9,0x2
80002e60:	ee fa fd e0 	ld.w	r10,r7[-544]
80002e64:	f4 09 00 09 	add	r9,r10,r9
80002e68:	72 09       	ld.w	r9,r9[0x0]
80002e6a:	91 09       	st.w	r8[0x0],r9
	float relativePosition[3], relativeVelocity[3];
	float combinedRadius, distSq, combinedRadiusSq, dotProduct, wLength, wLenghtSq;
	
	float w[3], unitW[3], u[3], neighor_bf[3];
	
	for (i=0;i<3;i++)
80002e6c:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80002e70:	2f f8       	sub	r8,-1
80002e72:	ef 68 ff cf 	st.b	r7[-49],r8
80002e76:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80002e7a:	30 28       	mov	r8,2
80002e7c:	f0 09 18 00 	cp.b	r9,r8
80002e80:	fe 9a ff e6 	brle	80002e4c <computeNewVelocity+0x20>
	{
		NewVelocity[i] = OptimalVelocity[i];
	}
	
	/* Create agent ORCA planes. */
	for (ind=0; ind<centralData->number_of_neighbors; ind++)
80002e84:	30 08       	mov	r8,0
80002e86:	ef 68 ff ce 	st.b	r7[-50],r8
80002e8a:	e0 8f 04 22 	bral	800036ce <computeNewVelocity+0x8a2>
		//{
			//relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
			//relativeVelocity[i] = centralData->position_estimator.vel_bf[i] - neighor_bf[i];
		//}
		
		for (i=0;i<3;i++)
80002e8e:	30 08       	mov	r8,0
80002e90:	ef 68 ff cf 	st.b	r7[-49],r8
80002e94:	c4 68       	rjmp	80002f20 <computeNewVelocity+0xf4>
		{
			relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
80002e96:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002e9a:	ec f9 00 00 	ld.w	r9,r6[0]
80002e9e:	72 09       	ld.w	r9,r9[0x0]
80002ea0:	ef 2b ff ce 	ld.sb	r11,r7[-50]
80002ea4:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80002ea8:	a3 7b       	lsl	r11,0x3
80002eaa:	f6 0a 00 0a 	add	r10,r11,r10
80002eae:	f4 ca fc ac 	sub	r10,r10,-852
80002eb2:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80002eb6:	ec f9 00 00 	ld.w	r9,r6[0]
80002eba:	72 09       	ld.w	r9,r9[0x0]
80002ebc:	ef 2b ff cf 	ld.sb	r11,r7[-49]
80002ec0:	f6 cb fd 87 	sub	r11,r11,-633
80002ec4:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80002ec8:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002ecc:	a3 68       	lsl	r8,0x2
80002ece:	ee 08 00 08 	add	r8,r7,r8
80002ed2:	f1 49 fe 38 	st.w	r8[-456],r9
			relativeVelocity[i] = centralData->position_estimator.vel[i] - centralData->listNeighbors[ind].velocity[i];
80002ed6:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002eda:	ec f9 00 00 	ld.w	r9,r6[0]
80002ede:	72 09       	ld.w	r9,r9[0x0]
80002ee0:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80002ee4:	f4 ca fd 91 	sub	r10,r10,-623
80002ee8:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80002eec:	ec f9 00 00 	ld.w	r9,r6[0]
80002ef0:	72 09       	ld.w	r9,r9[0x0]
80002ef2:	ef 2c ff ce 	ld.sb	r12,r7[-50]
80002ef6:	ef 2b ff cf 	ld.sb	r11,r7[-49]
80002efa:	a3 7c       	lsl	r12,0x3
80002efc:	f8 0b 00 0b 	add	r11,r12,r11
80002f00:	f6 cb fc a9 	sub	r11,r11,-855
80002f04:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80002f08:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002f0c:	a3 68       	lsl	r8,0x2
80002f0e:	ee 08 00 08 	add	r8,r7,r8
80002f12:	f1 49 fe 2c 	st.w	r8[-468],r9
		//{
			//relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
			//relativeVelocity[i] = centralData->position_estimator.vel_bf[i] - neighor_bf[i];
		//}
		
		for (i=0;i<3;i++)
80002f16:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80002f1a:	2f f8       	sub	r8,-1
80002f1c:	ef 68 ff cf 	st.b	r7[-49],r8
80002f20:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80002f24:	30 28       	mov	r8,2
80002f26:	f0 09 18 00 	cp.b	r9,r8
80002f2a:	fe 9a ff b6 	brle	80002e96 <computeNewVelocity+0x6a>
		{
			relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
			relativeVelocity[i] = centralData->position_estimator.vel[i] - centralData->listNeighbors[ind].velocity[i];
		}
		
		q_neighbor.s = 0.0;
80002f2e:	30 08       	mov	r8,0
80002f30:	ef 48 fe 54 	st.w	r7[-428],r8
		q_neighbor.v[0] = relativeVelocity[0];
80002f34:	ee f8 fe 2c 	ld.w	r8,r7[-468]
80002f38:	ef 48 fe 58 	st.w	r7[-424],r8
		q_neighbor.v[1] = relativeVelocity[1];
80002f3c:	ee f8 fe 30 	ld.w	r8,r7[-464]
80002f40:	ef 48 fe 5c 	st.w	r7[-420],r8
		q_neighbor.v[2] = relativeVelocity[2];
80002f44:	ee f8 fe 34 	ld.w	r8,r7[-460]
80002f48:	ef 48 fe 60 	st.w	r7[-416],r8
		q_neighbor_bf = quat_global_to_local(centralData->imu1.attitude.qe,q_neighbor);
80002f4c:	ec f8 00 00 	ld.w	r8,r6[0]
80002f50:	70 0b       	ld.w	r11,r8[0x0]
80002f52:	ee ca 01 bc 	sub	r10,r7,444
80002f56:	20 4d       	sub	sp,16
80002f58:	1a 98       	mov	r8,sp
80002f5a:	ee c9 01 ac 	sub	r9,r7,428
80002f5e:	20 08       	sub	r8,0
80002f60:	20 09       	sub	r9,0
80002f62:	72 0c       	ld.w	r12,r9[0x0]
80002f64:	91 0c       	st.w	r8[0x0],r12
80002f66:	72 1c       	ld.w	r12,r9[0x4]
80002f68:	91 1c       	st.w	r8[0x4],r12
80002f6a:	72 2c       	ld.w	r12,r9[0x8]
80002f6c:	91 2c       	st.w	r8[0x8],r12
80002f6e:	72 39       	ld.w	r9,r9[0xc]
80002f70:	91 39       	st.w	r8[0xc],r9
80002f72:	20 4d       	sub	sp,16
80002f74:	1a 98       	mov	r8,sp
80002f76:	16 99       	mov	r9,r11
80002f78:	20 08       	sub	r8,0
80002f7a:	20 09       	sub	r9,0
80002f7c:	72 0b       	ld.w	r11,r9[0x0]
80002f7e:	91 0b       	st.w	r8[0x0],r11
80002f80:	72 1b       	ld.w	r11,r9[0x4]
80002f82:	91 1b       	st.w	r8[0x4],r11
80002f84:	72 2b       	ld.w	r11,r9[0x8]
80002f86:	91 2b       	st.w	r8[0x8],r11
80002f88:	72 39       	ld.w	r9,r9[0xc]
80002f8a:	91 39       	st.w	r8[0xc],r9
80002f8c:	14 9c       	mov	r12,r10
80002f8e:	fe b0 fd 67 	rcall	80002a5c <quat_global_to_local>
80002f92:	2f 8d       	sub	sp,-32
		
		neighor_bf[0] = q_neighbor_bf.v[0];
80002f94:	ee f8 fe 48 	ld.w	r8,r7[-440]
80002f98:	ef 48 fd fc 	st.w	r7[-516],r8
		neighor_bf[1] = q_neighbor_bf.v[1];
80002f9c:	ee f8 fe 4c 	ld.w	r8,r7[-436]
80002fa0:	ef 48 fe 00 	st.w	r7[-512],r8
		neighor_bf[2] = q_neighbor_bf.v[2];
80002fa4:	ee f8 fe 50 	ld.w	r8,r7[-432]
80002fa8:	ef 48 fe 04 	st.w	r7[-508],r8
		
		for (i=0;i<3;i++)
80002fac:	30 08       	mov	r8,0
80002fae:	ef 68 ff cf 	st.b	r7[-49],r8
80002fb2:	c1 58       	rjmp	80002fdc <computeNewVelocity+0x1b0>
		{
			relativeVelocity[i] = neighor_bf[i];
80002fb4:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80002fb8:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002fbc:	a3 68       	lsl	r8,0x2
80002fbe:	ee 08 00 08 	add	r8,r7,r8
80002fc2:	f0 f9 fd fc 	ld.w	r9,r8[-516]
80002fc6:	f4 08 15 02 	lsl	r8,r10,0x2
80002fca:	ee 08 00 08 	add	r8,r7,r8
80002fce:	f1 49 fe 2c 	st.w	r8[-468],r9
		
		neighor_bf[0] = q_neighbor_bf.v[0];
		neighor_bf[1] = q_neighbor_bf.v[1];
		neighor_bf[2] = q_neighbor_bf.v[2];
		
		for (i=0;i<3;i++)
80002fd2:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80002fd6:	2f f8       	sub	r8,-1
80002fd8:	ef 68 ff cf 	st.b	r7[-49],r8
80002fdc:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80002fe0:	30 28       	mov	r8,2
80002fe2:	f0 09 18 00 	cp.b	r9,r8
80002fe6:	fe 9a ff e7 	brle	80002fb4 <computeNewVelocity+0x188>
		{
			relativeVelocity[i] = neighor_bf[i];
		}
		
		q_neighbor.s = 0.0;
80002fea:	30 08       	mov	r8,0
80002fec:	ef 48 fe 54 	st.w	r7[-428],r8
		q_neighbor.v[0] = relativePosition[0];
80002ff0:	ee f8 fe 38 	ld.w	r8,r7[-456]
80002ff4:	ef 48 fe 58 	st.w	r7[-424],r8
		q_neighbor.v[1] = relativePosition[1];
80002ff8:	ee f8 fe 3c 	ld.w	r8,r7[-452]
80002ffc:	ef 48 fe 5c 	st.w	r7[-420],r8
		q_neighbor.v[2] = relativePosition[2];
80003000:	ee f8 fe 40 	ld.w	r8,r7[-448]
80003004:	ef 48 fe 60 	st.w	r7[-416],r8
		q_neighbor_bf = quat_global_to_local(centralData->imu1.attitude.qe,q_neighbor);
80003008:	ec f8 00 00 	ld.w	r8,r6[0]
8000300c:	70 0b       	ld.w	r11,r8[0x0]
8000300e:	ee ca 02 34 	sub	r10,r7,564
80003012:	20 4d       	sub	sp,16
80003014:	1a 98       	mov	r8,sp
80003016:	ee c9 01 ac 	sub	r9,r7,428
8000301a:	20 08       	sub	r8,0
8000301c:	20 09       	sub	r9,0
8000301e:	72 0c       	ld.w	r12,r9[0x0]
80003020:	91 0c       	st.w	r8[0x0],r12
80003022:	72 1c       	ld.w	r12,r9[0x4]
80003024:	91 1c       	st.w	r8[0x4],r12
80003026:	72 2c       	ld.w	r12,r9[0x8]
80003028:	91 2c       	st.w	r8[0x8],r12
8000302a:	72 39       	ld.w	r9,r9[0xc]
8000302c:	91 39       	st.w	r8[0xc],r9
8000302e:	20 4d       	sub	sp,16
80003030:	1a 98       	mov	r8,sp
80003032:	16 99       	mov	r9,r11
80003034:	20 08       	sub	r8,0
80003036:	20 09       	sub	r9,0
80003038:	72 0b       	ld.w	r11,r9[0x0]
8000303a:	91 0b       	st.w	r8[0x0],r11
8000303c:	72 1b       	ld.w	r11,r9[0x4]
8000303e:	91 1b       	st.w	r8[0x4],r11
80003040:	72 2b       	ld.w	r11,r9[0x8]
80003042:	91 2b       	st.w	r8[0x8],r11
80003044:	72 39       	ld.w	r9,r9[0xc]
80003046:	91 39       	st.w	r8[0xc],r9
80003048:	14 9c       	mov	r12,r10
8000304a:	fe b0 fd 09 	rcall	80002a5c <quat_global_to_local>
8000304e:	2f 8d       	sub	sp,-32
80003050:	ee c8 01 bc 	sub	r8,r7,444
80003054:	ee c9 02 34 	sub	r9,r7,564
80003058:	20 08       	sub	r8,0
8000305a:	20 09       	sub	r9,0
8000305c:	72 0a       	ld.w	r10,r9[0x0]
8000305e:	91 0a       	st.w	r8[0x0],r10
80003060:	72 1a       	ld.w	r10,r9[0x4]
80003062:	91 1a       	st.w	r8[0x4],r10
80003064:	72 2a       	ld.w	r10,r9[0x8]
80003066:	91 2a       	st.w	r8[0x8],r10
80003068:	72 39       	ld.w	r9,r9[0xc]
8000306a:	91 39       	st.w	r8[0xc],r9
		
		neighor_bf[0] = q_neighbor_bf.v[0];
8000306c:	ee f8 fe 48 	ld.w	r8,r7[-440]
80003070:	ef 48 fd fc 	st.w	r7[-516],r8
		neighor_bf[1] = q_neighbor_bf.v[1];
80003074:	ee f8 fe 4c 	ld.w	r8,r7[-436]
80003078:	ef 48 fe 00 	st.w	r7[-512],r8
		neighor_bf[2] = q_neighbor_bf.v[2];
8000307c:	ee f8 fe 50 	ld.w	r8,r7[-432]
80003080:	ef 48 fe 04 	st.w	r7[-508],r8
		
		for (i=0;i<3;i++)
80003084:	30 08       	mov	r8,0
80003086:	ef 68 ff cf 	st.b	r7[-49],r8
8000308a:	c1 58       	rjmp	800030b4 <computeNewVelocity+0x288>
		{
			relativePosition[i] = neighor_bf[i];
8000308c:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80003090:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003094:	a3 68       	lsl	r8,0x2
80003096:	ee 08 00 08 	add	r8,r7,r8
8000309a:	f0 f9 fd fc 	ld.w	r9,r8[-516]
8000309e:	f4 08 15 02 	lsl	r8,r10,0x2
800030a2:	ee 08 00 08 	add	r8,r7,r8
800030a6:	f1 49 fe 38 	st.w	r8[-456],r9
		
		neighor_bf[0] = q_neighbor_bf.v[0];
		neighor_bf[1] = q_neighbor_bf.v[1];
		neighor_bf[2] = q_neighbor_bf.v[2];
		
		for (i=0;i<3;i++)
800030aa:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800030ae:	2f f8       	sub	r8,-1
800030b0:	ef 68 ff cf 	st.b	r7[-49],r8
800030b4:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800030b8:	30 28       	mov	r8,2
800030ba:	f0 09 18 00 	cp.b	r9,r8
800030be:	fe 9a ff e7 	brle	8000308c <computeNewVelocity+0x260>
		{
			relativePosition[i] = neighor_bf[i];
		}
		
		distSq = vector_norm_sqr(relativePosition);
800030c2:	ee c8 01 c8 	sub	r8,r7,456
800030c6:	10 9c       	mov	r12,r8
800030c8:	fe b0 fd b2 	rcall	80002c2c <vector_norm_sqr>
800030cc:	18 98       	mov	r8,r12
800030ce:	ef 48 ff d4 	st.w	r7[-44],r8
		combinedRadius = centralData->safe_size + centralData->listNeighbors[ind].size;
800030d2:	ec f8 00 00 	ld.w	r8,r6[0]
800030d6:	70 08       	ld.w	r8,r8[0x0]
800030d8:	f0 f9 0d 48 	ld.w	r9,r8[3400]
800030dc:	ec f8 00 00 	ld.w	r8,r6[0]
800030e0:	70 0a       	ld.w	r10,r8[0x0]
800030e2:	ef 28 ff ce 	ld.sb	r8,r7[-50]
800030e6:	a5 78       	lsl	r8,0x5
800030e8:	f4 08 00 08 	add	r8,r10,r8
800030ec:	f0 c8 f2 98 	sub	r8,r8,-3432
800030f0:	70 08       	ld.w	r8,r8[0x0]
800030f2:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800030f6:	ef 48 ff d0 	st.w	r7[-48],r8
		combinedRadiusSq = SQR(combinedRadius);
800030fa:	ee f9 ff d0 	ld.w	r9,r7[-48]
800030fe:	ee f8 ff d0 	ld.w	r8,r7[-48]
80003102:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003106:	ef 48 ff d8 	st.w	r7[-40],r8
		
		
		if (distSq > combinedRadiusSq)
8000310a:	30 18       	mov	r8,1
8000310c:	ee fa ff d4 	ld.w	r10,r7[-44]
80003110:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003114:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003118:	e0 8c 00 04 	brvs	80003120 <computeNewVelocity+0x2f4>
8000311c:	e0 89 00 03 	brgt	80003122 <computeNewVelocity+0x2f6>
80003120:	30 08       	mov	r8,0
80003122:	5c 58       	castu.b	r8
80003124:	e0 80 01 c7 	breq	800034b2 <computeNewVelocity+0x686>
		{
			for (i=0;i<3;i++)
80003128:	30 08       	mov	r8,0
8000312a:	ef 68 ff cf 	st.b	r7[-49],r8
8000312e:	c2 38       	rjmp	80003174 <computeNewVelocity+0x348>
			{
				w[i] = relativeVelocity[i] - invTimeHorizon * relativePosition[i];
80003130:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80003134:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003138:	a3 68       	lsl	r8,0x2
8000313a:	ee 08 00 08 	add	r8,r7,r8
8000313e:	f0 f9 fe 2c 	ld.w	r9,r8[-468]
80003142:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003146:	a3 68       	lsl	r8,0x2
80003148:	ee 08 00 08 	add	r8,r7,r8
8000314c:	f0 fb fe 38 	ld.w	r11,r8[-456]
80003150:	ec f8 02 d0 	ld.w	r8,r6[720]
80003154:	70 08       	ld.w	r8,r8[0x0]
80003156:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000315a:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000315e:	f4 08 15 02 	lsl	r8,r10,0x2
80003162:	ee 08 00 08 	add	r8,r7,r8
80003166:	f1 49 fe 20 	st.w	r8[-480],r9
		combinedRadiusSq = SQR(combinedRadius);
		
		
		if (distSq > combinedRadiusSq)
		{
			for (i=0;i<3;i++)
8000316a:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000316e:	2f f8       	sub	r8,-1
80003170:	ef 68 ff cf 	st.b	r7[-49],r8
80003174:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003178:	30 28       	mov	r8,2
8000317a:	f0 09 18 00 	cp.b	r9,r8
8000317e:	fe 9a ff d9 	brle	80003130 <computeNewVelocity+0x304>
			{
				w[i] = relativeVelocity[i] - invTimeHorizon * relativePosition[i];
			}
			wLenghtSq = vector_norm_sqr(w);
80003182:	ee c8 01 e0 	sub	r8,r7,480
80003186:	10 9c       	mov	r12,r8
80003188:	fe b0 fd 52 	rcall	80002c2c <vector_norm_sqr>
8000318c:	18 98       	mov	r8,r12
8000318e:	ef 48 ff e4 	st.w	r7[-28],r8
			
			dotProduct = scalar_product(w,relativePosition);
80003192:	ee c9 01 c8 	sub	r9,r7,456
80003196:	ee c8 01 e0 	sub	r8,r7,480
8000319a:	12 9b       	mov	r11,r9
8000319c:	10 9c       	mov	r12,r8
8000319e:	fe b0 fb 77 	rcall	8000288c <scalar_product>
800031a2:	18 98       	mov	r8,r12
800031a4:	ef 48 ff dc 	st.w	r7[-36],r8
			
			if ((dotProduct < 0.0)&&(SQR(dotProduct) > (combinedRadiusSq * wLenghtSq)))
800031a8:	30 18       	mov	r8,1
800031aa:	ee fa ff dc 	ld.w	r10,r7[-36]
800031ae:	30 09       	mov	r9,0
800031b0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800031b4:	e0 8c 00 03 	brvs	800031ba <computeNewVelocity+0x38e>
800031b8:	c0 25       	brlt	800031bc <computeNewVelocity+0x390>
800031ba:	30 08       	mov	r8,0
800031bc:	5c 58       	castu.b	r8
800031be:	c7 70       	breq	800032ac <computeNewVelocity+0x480>
800031c0:	ee f9 ff dc 	ld.w	r9,r7[-36]
800031c4:	ee f8 ff dc 	ld.w	r8,r7[-36]
800031c8:	e5 a2 0a 98 	cop	cp0,cr10,cr9,cr8,0x44
800031cc:	ee f9 ff d8 	ld.w	r9,r7[-40]
800031d0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800031d4:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800031d8:	30 18       	mov	r8,1
800031da:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800031de:	e0 8c 00 04 	brvs	800031e6 <computeNewVelocity+0x3ba>
800031e2:	e0 89 00 03 	brgt	800031e8 <computeNewVelocity+0x3bc>
800031e6:	30 08       	mov	r8,0
800031e8:	5c 58       	castu.b	r8
800031ea:	c6 10       	breq	800032ac <computeNewVelocity+0x480>
			{
				/* Project on cut-off circle. */
				wLength = fast_sqrt(wLenghtSq);
800031ec:	ee fc ff e4 	ld.w	r12,r7[-28]
800031f0:	fe b0 fc b4 	rcall	80002b58 <fast_sqrt>
800031f4:	18 98       	mov	r8,r12
800031f6:	ef 48 ff e0 	st.w	r7[-32],r8
				for (i=0;i<3;i++)
800031fa:	30 08       	mov	r8,0
800031fc:	ef 68 ff cf 	st.b	r7[-49],r8
80003200:	c4 d8       	rjmp	8000329a <computeNewVelocity+0x46e>
				{
					unitW[i] = w[i] / wLength;
80003202:	ef 25 ff cf 	ld.sb	r5,r7[-49]
80003206:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000320a:	a3 68       	lsl	r8,0x2
8000320c:	ee 08 00 08 	add	r8,r7,r8
80003210:	f0 f8 fe 20 	ld.w	r8,r8[-480]
80003214:	ee fb ff e0 	ld.w	r11,r7[-32]
80003218:	10 9c       	mov	r12,r8
8000321a:	f0 16 00 08 	mcall	r6[32]
8000321e:	18 98       	mov	r8,r12
80003220:	10 99       	mov	r9,r8
80003222:	ea 08 15 02 	lsl	r8,r5,0x2
80003226:	ee 08 00 08 	add	r8,r7,r8
8000322a:	f1 49 fe 14 	st.w	r8[-492],r9
					planes[ind].normal[i] = unitW[i];
8000322e:	ef 29 ff ce 	ld.sb	r9,r7[-50]
80003232:	ef 2b ff cf 	ld.sb	r11,r7[-49]
80003236:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000323a:	a3 68       	lsl	r8,0x2
8000323c:	ee 08 00 08 	add	r8,r7,r8
80003240:	f0 fa fe 14 	ld.w	r10,r8[-492]
80003244:	12 98       	mov	r8,r9
80003246:	a1 78       	lsl	r8,0x1
80003248:	12 08       	add	r8,r9
8000324a:	a1 78       	lsl	r8,0x1
8000324c:	16 08       	add	r8,r11
8000324e:	a3 68       	lsl	r8,0x2
80003250:	ee 08 00 08 	add	r8,r7,r8
80003254:	f1 4a fe 64 	st.w	r8[-412],r10
					u[i] = (combinedRadius * invTimeHorizon - wLength) * unitW[i];
80003258:	ef 2a ff cf 	ld.sb	r10,r7[-49]
8000325c:	ec f8 02 d0 	ld.w	r8,r6[720]
80003260:	70 09       	ld.w	r9,r8[0x0]
80003262:	ee f8 ff d0 	ld.w	r8,r7[-48]
80003266:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000326a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000326e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003272:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003276:	a3 68       	lsl	r8,0x2
80003278:	ee 08 00 08 	add	r8,r7,r8
8000327c:	f0 f8 fe 14 	ld.w	r8,r8[-492]
80003280:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003284:	f4 08 15 02 	lsl	r8,r10,0x2
80003288:	ee 08 00 08 	add	r8,r7,r8
8000328c:	f1 49 fe 08 	st.w	r8[-504],r9
			
			if ((dotProduct < 0.0)&&(SQR(dotProduct) > (combinedRadiusSq * wLenghtSq)))
			{
				/* Project on cut-off circle. */
				wLength = fast_sqrt(wLenghtSq);
				for (i=0;i<3;i++)
80003290:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80003294:	2f f8       	sub	r8,-1
80003296:	ef 68 ff cf 	st.b	r7[-49],r8
8000329a:	ef 39 ff cf 	ld.ub	r9,r7[-49]
8000329e:	30 28       	mov	r8,2
800032a0:	f0 09 18 00 	cp.b	r9,r8
800032a4:	fe 9a ff af 	brle	80003202 <computeNewVelocity+0x3d6>
			}
			wLenghtSq = vector_norm_sqr(w);
			
			dotProduct = scalar_product(w,relativePosition);
			
			if ((dotProduct < 0.0)&&(SQR(dotProduct) > (combinedRadiusSq * wLenghtSq)))
800032a8:	e0 8f 01 c5 	bral	80003632 <computeNewVelocity+0x806>
					planes[ind].normal[i] = unitW[i];
					u[i] = (combinedRadius * invTimeHorizon - wLength) * unitW[i];
				}
			}else{
				/* Project on cone. */
				float a = distSq;
800032ac:	ee f8 ff d4 	ld.w	r8,r7[-44]
800032b0:	ef 48 ff ec 	st.w	r7[-20],r8
				float b = scalar_product(relativePosition,relativeVelocity);
800032b4:	ee c9 01 d4 	sub	r9,r7,468
800032b8:	ee c8 01 c8 	sub	r8,r7,456
800032bc:	12 9b       	mov	r11,r9
800032be:	10 9c       	mov	r12,r8
800032c0:	fe b0 fa e6 	rcall	8000288c <scalar_product>
800032c4:	18 98       	mov	r8,r12
800032c6:	ef 48 ff f0 	st.w	r7[-16],r8
				float crossProduct[3];
				CROSS(relativePosition,relativeVelocity,crossProduct);
800032ca:	ee f9 fe 3c 	ld.w	r9,r7[-452]
800032ce:	ee f8 fe 34 	ld.w	r8,r7[-460]
800032d2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800032d6:	ee fa fe 40 	ld.w	r10,r7[-448]
800032da:	ee f8 fe 30 	ld.w	r8,r7[-464]
800032de:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800032e2:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800032e6:	ef 48 fd e4 	st.w	r7[-540],r8
800032ea:	ee f9 fe 40 	ld.w	r9,r7[-448]
800032ee:	ee f8 fe 2c 	ld.w	r8,r7[-468]
800032f2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800032f6:	ee fa fe 38 	ld.w	r10,r7[-456]
800032fa:	ee f8 fe 34 	ld.w	r8,r7[-460]
800032fe:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80003302:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80003306:	ef 48 fd e8 	st.w	r7[-536],r8
8000330a:	ee f9 fe 38 	ld.w	r9,r7[-456]
8000330e:	ee f8 fe 30 	ld.w	r8,r7[-464]
80003312:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003316:	ee fa fe 3c 	ld.w	r10,r7[-452]
8000331a:	ee f8 fe 2c 	ld.w	r8,r7[-468]
8000331e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80003322:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80003326:	ef 48 fd ec 	st.w	r7[-532],r8
				float c = vector_norm_sqr(relativeVelocity) - vector_norm_sqr(crossProduct) / (distSq - combinedRadiusSq);
8000332a:	ee c8 01 d4 	sub	r8,r7,468
8000332e:	10 9c       	mov	r12,r8
80003330:	fe b0 fc 7e 	rcall	80002c2c <vector_norm_sqr>
80003334:	18 95       	mov	r5,r12
80003336:	ee c8 02 1c 	sub	r8,r7,540
8000333a:	10 9c       	mov	r12,r8
8000333c:	fe b0 fc 78 	rcall	80002c2c <vector_norm_sqr>
80003340:	18 98       	mov	r8,r12
80003342:	ee fa ff d4 	ld.w	r10,r7[-44]
80003346:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000334a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000334e:	12 9b       	mov	r11,r9
80003350:	10 9c       	mov	r12,r8
80003352:	f0 16 00 08 	mcall	r6[32]
80003356:	18 98       	mov	r8,r12
80003358:	e5 a1 08 58 	cop	cp0,cr8,cr5,cr8,0x42
8000335c:	ef 48 ff f4 	st.w	r7[-12],r8
				float t = (b + fast_sqrt(SQR(b) - a*c)) / a;
80003360:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003364:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003368:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000336c:	ee fa ff ec 	ld.w	r10,r7[-20]
80003370:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003374:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80003378:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000337c:	10 9c       	mov	r12,r8
8000337e:	fe b0 fb ed 	rcall	80002b58 <fast_sqrt>
80003382:	18 99       	mov	r9,r12
80003384:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003388:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000338c:	ee fb ff ec 	ld.w	r11,r7[-20]
80003390:	10 9c       	mov	r12,r8
80003392:	f0 16 00 08 	mcall	r6[32]
80003396:	18 98       	mov	r8,r12
80003398:	ef 48 ff f8 	st.w	r7[-8],r8
				for (i=0;i<3;i++)
8000339c:	30 08       	mov	r8,0
8000339e:	ef 68 ff cf 	st.b	r7[-49],r8
800033a2:	c2 28       	rjmp	800033e6 <computeNewVelocity+0x5ba>
				{
					w[i] = relativeVelocity[i] - t * relativePosition[i];
800033a4:	ef 2a ff cf 	ld.sb	r10,r7[-49]
800033a8:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800033ac:	a3 68       	lsl	r8,0x2
800033ae:	ee 08 00 08 	add	r8,r7,r8
800033b2:	f0 f9 fe 2c 	ld.w	r9,r8[-468]
800033b6:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800033ba:	a3 68       	lsl	r8,0x2
800033bc:	ee 08 00 08 	add	r8,r7,r8
800033c0:	f0 fb fe 38 	ld.w	r11,r8[-456]
800033c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033c8:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
800033cc:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800033d0:	f4 08 15 02 	lsl	r8,r10,0x2
800033d4:	ee 08 00 08 	add	r8,r7,r8
800033d8:	f1 49 fe 20 	st.w	r8[-480],r9
				float b = scalar_product(relativePosition,relativeVelocity);
				float crossProduct[3];
				CROSS(relativePosition,relativeVelocity,crossProduct);
				float c = vector_norm_sqr(relativeVelocity) - vector_norm_sqr(crossProduct) / (distSq - combinedRadiusSq);
				float t = (b + fast_sqrt(SQR(b) - a*c)) / a;
				for (i=0;i<3;i++)
800033dc:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800033e0:	2f f8       	sub	r8,-1
800033e2:	ef 68 ff cf 	st.b	r7[-49],r8
800033e6:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800033ea:	30 28       	mov	r8,2
800033ec:	f0 09 18 00 	cp.b	r9,r8
800033f0:	fe 9a ff da 	brle	800033a4 <computeNewVelocity+0x578>
				{
					w[i] = relativeVelocity[i] - t * relativePosition[i];
				}
				wLength = vector_norm(w);
800033f4:	ee c8 01 e0 	sub	r8,r7,480
800033f8:	10 9c       	mov	r12,r8
800033fa:	fe b0 fc 31 	rcall	80002c5c <vector_norm>
800033fe:	18 98       	mov	r8,r12
80003400:	ef 48 ff e0 	st.w	r7[-32],r8
				for (i=0;i<3;i++)
80003404:	30 08       	mov	r8,0
80003406:	ef 68 ff cf 	st.b	r7[-49],r8
8000340a:	c4 c8       	rjmp	800034a2 <computeNewVelocity+0x676>
				{
					unitW[i] = w[i] / wLength;
8000340c:	ef 25 ff cf 	ld.sb	r5,r7[-49]
80003410:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003414:	a3 68       	lsl	r8,0x2
80003416:	ee 08 00 08 	add	r8,r7,r8
8000341a:	f0 f8 fe 20 	ld.w	r8,r8[-480]
8000341e:	ee fb ff e0 	ld.w	r11,r7[-32]
80003422:	10 9c       	mov	r12,r8
80003424:	f0 16 00 08 	mcall	r6[32]
80003428:	18 98       	mov	r8,r12
8000342a:	10 99       	mov	r9,r8
8000342c:	ea 08 15 02 	lsl	r8,r5,0x2
80003430:	ee 08 00 08 	add	r8,r7,r8
80003434:	f1 49 fe 14 	st.w	r8[-492],r9
					planes[ind].normal[i] = unitW[i];
80003438:	ef 29 ff ce 	ld.sb	r9,r7[-50]
8000343c:	ef 2b ff cf 	ld.sb	r11,r7[-49]
80003440:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003444:	a3 68       	lsl	r8,0x2
80003446:	ee 08 00 08 	add	r8,r7,r8
8000344a:	f0 fa fe 14 	ld.w	r10,r8[-492]
8000344e:	12 98       	mov	r8,r9
80003450:	a1 78       	lsl	r8,0x1
80003452:	12 08       	add	r8,r9
80003454:	a1 78       	lsl	r8,0x1
80003456:	16 08       	add	r8,r11
80003458:	a3 68       	lsl	r8,0x2
8000345a:	ee 08 00 08 	add	r8,r7,r8
8000345e:	f1 4a fe 64 	st.w	r8[-412],r10
					u[i] = (combinedRadius * t - wLength) * unitW[i];
80003462:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80003466:	ee f9 ff d0 	ld.w	r9,r7[-48]
8000346a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000346e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003472:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003476:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000347a:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000347e:	a3 68       	lsl	r8,0x2
80003480:	ee 08 00 08 	add	r8,r7,r8
80003484:	f0 f8 fe 14 	ld.w	r8,r8[-492]
80003488:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000348c:	f4 08 15 02 	lsl	r8,r10,0x2
80003490:	ee 08 00 08 	add	r8,r7,r8
80003494:	f1 49 fe 08 	st.w	r8[-504],r9
				for (i=0;i<3;i++)
				{
					w[i] = relativeVelocity[i] - t * relativePosition[i];
				}
				wLength = vector_norm(w);
				for (i=0;i<3;i++)
80003498:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000349c:	2f f8       	sub	r8,-1
8000349e:	ef 68 ff cf 	st.b	r7[-49],r8
800034a2:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800034a6:	30 28       	mov	r8,2
800034a8:	f0 09 18 00 	cp.b	r9,r8
800034ac:	fe 9a ff b0 	brle	8000340c <computeNewVelocity+0x5e0>
800034b0:	cc 18       	rjmp	80003632 <computeNewVelocity+0x806>
					u[i] = (combinedRadius * t - wLength) * unitW[i];
				}
			}
		}else{
			/* Collisions */
			dbg_print("Collision! ");
800034b2:	fe cc 06 da 	sub	r12,pc,1754
800034b6:	f0 16 00 01 	mcall	r6[4]
			dbg_print("Distance with neighbor ");
800034ba:	fe cc 06 d6 	sub	r12,pc,1750
800034be:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(ind,10);
800034c2:	ef 28 ff ce 	ld.sb	r8,r7[-50]
800034c6:	30 ab       	mov	r11,10
800034c8:	10 9c       	mov	r12,r8
800034ca:	f0 16 00 04 	mcall	r6[16]
			dbg_print("(x100):");
800034ce:	fe cc 06 d2 	sub	r12,pc,1746
800034d2:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(sqrt(distSq)*100.0,10);
800034d6:	ee fc ff d4 	ld.w	r12,r7[-44]
800034da:	f0 16 00 02 	mcall	r6[8]
800034de:	14 98       	mov	r8,r10
800034e0:	16 99       	mov	r9,r11
800034e2:	10 9a       	mov	r10,r8
800034e4:	12 9b       	mov	r11,r9
800034e6:	f0 16 00 70 	mcall	r6[448]
800034ea:	30 08       	mov	r8,0
800034ec:	fc 19 40 59 	movh	r9,0x4059
800034f0:	f0 16 00 03 	mcall	r6[12]
800034f4:	14 98       	mov	r8,r10
800034f6:	16 99       	mov	r9,r11
800034f8:	10 9a       	mov	r10,r8
800034fa:	12 9b       	mov	r11,r9
800034fc:	f0 16 00 14 	mcall	r6[80]
80003500:	18 98       	mov	r8,r12
80003502:	30 ab       	mov	r11,10
80003504:	10 9c       	mov	r12,r8
80003506:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8000350a:	fe cc 07 06 	sub	r12,pc,1798
8000350e:	f0 16 00 01 	mcall	r6[4]
			
			float invTimeStep = 1.0 / ORCA_TIME_STEP_MILLIS; //PROBLEM wrong time step
80003512:	e0 68 cc cd 	mov	r8,52429
80003516:	ea 18 3d cc 	orh	r8,0x3dcc
8000351a:	ef 48 ff fc 	st.w	r7[-4],r8
			for (i=0;i<3;i++)
8000351e:	30 08       	mov	r8,0
80003520:	ef 68 ff cf 	st.b	r7[-49],r8
80003524:	c2 28       	rjmp	80003568 <computeNewVelocity+0x73c>
			{
				w[i] = relativeVelocity[i] - invTimeStep * relativePosition[i];
80003526:	ef 2a ff cf 	ld.sb	r10,r7[-49]
8000352a:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000352e:	a3 68       	lsl	r8,0x2
80003530:	ee 08 00 08 	add	r8,r7,r8
80003534:	f0 f9 fe 2c 	ld.w	r9,r8[-468]
80003538:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000353c:	a3 68       	lsl	r8,0x2
8000353e:	ee 08 00 08 	add	r8,r7,r8
80003542:	f0 fb fe 38 	ld.w	r11,r8[-456]
80003546:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000354a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000354e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003552:	f4 08 15 02 	lsl	r8,r10,0x2
80003556:	ee 08 00 08 	add	r8,r7,r8
8000355a:	f1 49 fe 20 	st.w	r8[-480],r9
			dbg_print("(x100):");
			dbg_print_num(sqrt(distSq)*100.0,10);
			dbg_print("\n");
			
			float invTimeStep = 1.0 / ORCA_TIME_STEP_MILLIS; //PROBLEM wrong time step
			for (i=0;i<3;i++)
8000355e:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80003562:	2f f8       	sub	r8,-1
80003564:	ef 68 ff cf 	st.b	r7[-49],r8
80003568:	ef 39 ff cf 	ld.ub	r9,r7[-49]
8000356c:	30 28       	mov	r8,2
8000356e:	f0 09 18 00 	cp.b	r9,r8
80003572:	fe 9a ff da 	brle	80003526 <computeNewVelocity+0x6fa>
			{
				w[i] = relativeVelocity[i] - invTimeStep * relativePosition[i];
			}
			wLength = vector_norm(w);
80003576:	ee c8 01 e0 	sub	r8,r7,480
8000357a:	10 9c       	mov	r12,r8
8000357c:	fe b0 fb 70 	rcall	80002c5c <vector_norm>
80003580:	18 98       	mov	r8,r12
80003582:	ef 48 ff e0 	st.w	r7[-32],r8
			for (i=0;i<3;i++)
80003586:	30 08       	mov	r8,0
80003588:	ef 68 ff cf 	st.b	r7[-49],r8
8000358c:	c4 c8       	rjmp	80003624 <computeNewVelocity+0x7f8>
			{
				unitW[i] = w[i] / wLength;
8000358e:	ef 25 ff cf 	ld.sb	r5,r7[-49]
80003592:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003596:	a3 68       	lsl	r8,0x2
80003598:	ee 08 00 08 	add	r8,r7,r8
8000359c:	f0 f8 fe 20 	ld.w	r8,r8[-480]
800035a0:	ee fb ff e0 	ld.w	r11,r7[-32]
800035a4:	10 9c       	mov	r12,r8
800035a6:	f0 16 00 08 	mcall	r6[32]
800035aa:	18 98       	mov	r8,r12
800035ac:	10 99       	mov	r9,r8
800035ae:	ea 08 15 02 	lsl	r8,r5,0x2
800035b2:	ee 08 00 08 	add	r8,r7,r8
800035b6:	f1 49 fe 14 	st.w	r8[-492],r9
				planes[ind].normal[i] = unitW[i];
800035ba:	ef 29 ff ce 	ld.sb	r9,r7[-50]
800035be:	ef 2b ff cf 	ld.sb	r11,r7[-49]
800035c2:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800035c6:	a3 68       	lsl	r8,0x2
800035c8:	ee 08 00 08 	add	r8,r7,r8
800035cc:	f0 fa fe 14 	ld.w	r10,r8[-492]
800035d0:	12 98       	mov	r8,r9
800035d2:	a1 78       	lsl	r8,0x1
800035d4:	12 08       	add	r8,r9
800035d6:	a1 78       	lsl	r8,0x1
800035d8:	16 08       	add	r8,r11
800035da:	a3 68       	lsl	r8,0x2
800035dc:	ee 08 00 08 	add	r8,r7,r8
800035e0:	f1 4a fe 64 	st.w	r8[-412],r10
				u[i] = (combinedRadius * invTimeStep - wLength) * unitW[i];
800035e4:	ef 2a ff cf 	ld.sb	r10,r7[-49]
800035e8:	ee f9 ff d0 	ld.w	r9,r7[-48]
800035ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800035f0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800035f4:	ee f8 ff e0 	ld.w	r8,r7[-32]
800035f8:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800035fc:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003600:	a3 68       	lsl	r8,0x2
80003602:	ee 08 00 08 	add	r8,r7,r8
80003606:	f0 f8 fe 14 	ld.w	r8,r8[-492]
8000360a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000360e:	f4 08 15 02 	lsl	r8,r10,0x2
80003612:	ee 08 00 08 	add	r8,r7,r8
80003616:	f1 49 fe 08 	st.w	r8[-504],r9
			for (i=0;i<3;i++)
			{
				w[i] = relativeVelocity[i] - invTimeStep * relativePosition[i];
			}
			wLength = vector_norm(w);
			for (i=0;i<3;i++)
8000361a:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000361e:	2f f8       	sub	r8,-1
80003620:	ef 68 ff cf 	st.b	r7[-49],r8
80003624:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003628:	30 28       	mov	r8,2
8000362a:	f0 09 18 00 	cp.b	r9,r8
8000362e:	fe 9a ff b0 	brle	8000358e <computeNewVelocity+0x762>
				planes[ind].normal[i] = unitW[i];
				u[i] = (combinedRadius * invTimeStep - wLength) * unitW[i];
			}
		}
		
		for (i=0;i<3;i++)
80003632:	30 08       	mov	r8,0
80003634:	ef 68 ff cf 	st.b	r7[-49],r8
80003638:	c3 f8       	rjmp	800036b6 <computeNewVelocity+0x88a>
		{
			planes[ind].point[i] = centralData->position_estimator.vel_bf[i] + 0.5 * u[i];
8000363a:	ef 25 ff ce 	ld.sb	r5,r7[-50]
8000363e:	ef 21 ff cf 	ld.sb	r1,r7[-49]
80003642:	ec f8 00 00 	ld.w	r8,r6[0]
80003646:	70 08       	ld.w	r8,r8[0x0]
80003648:	ef 29 ff cf 	ld.sb	r9,r7[-49]
8000364c:	f2 c9 fd 94 	sub	r9,r9,-620
80003650:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003654:	10 9c       	mov	r12,r8
80003656:	f0 16 00 02 	mcall	r6[8]
8000365a:	14 92       	mov	r2,r10
8000365c:	16 93       	mov	r3,r11
8000365e:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003662:	a3 68       	lsl	r8,0x2
80003664:	ee 08 00 08 	add	r8,r7,r8
80003668:	f0 f8 fe 08 	ld.w	r8,r8[-504]
8000366c:	10 9c       	mov	r12,r8
8000366e:	f0 16 00 02 	mcall	r6[8]
80003672:	30 08       	mov	r8,0
80003674:	fc 19 3f e0 	movh	r9,0x3fe0
80003678:	f0 16 00 03 	mcall	r6[12]
8000367c:	14 98       	mov	r8,r10
8000367e:	16 99       	mov	r9,r11
80003680:	04 9a       	mov	r10,r2
80003682:	06 9b       	mov	r11,r3
80003684:	f0 16 00 05 	mcall	r6[20]
80003688:	14 98       	mov	r8,r10
8000368a:	16 99       	mov	r9,r11
8000368c:	10 9a       	mov	r10,r8
8000368e:	12 9b       	mov	r11,r9
80003690:	f0 16 00 09 	mcall	r6[36]
80003694:	18 99       	mov	r9,r12
80003696:	0a 98       	mov	r8,r5
80003698:	a1 78       	lsl	r8,0x1
8000369a:	0a 08       	add	r8,r5
8000369c:	a1 78       	lsl	r8,0x1
8000369e:	02 08       	add	r8,r1
800036a0:	2f d8       	sub	r8,-3
800036a2:	a3 68       	lsl	r8,0x2
800036a4:	ee 08 00 08 	add	r8,r7,r8
800036a8:	f1 49 fe 64 	st.w	r8[-412],r9
				planes[ind].normal[i] = unitW[i];
				u[i] = (combinedRadius * invTimeStep - wLength) * unitW[i];
			}
		}
		
		for (i=0;i<3;i++)
800036ac:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800036b0:	2f f8       	sub	r8,-1
800036b2:	ef 68 ff cf 	st.b	r7[-49],r8
800036b6:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800036ba:	30 28       	mov	r8,2
800036bc:	f0 09 18 00 	cp.b	r9,r8
800036c0:	fe 9a ff bd 	brle	8000363a <computeNewVelocity+0x80e>
	{
		NewVelocity[i] = OptimalVelocity[i];
	}
	
	/* Create agent ORCA planes. */
	for (ind=0; ind<centralData->number_of_neighbors; ind++)
800036c4:	ef 38 ff ce 	ld.ub	r8,r7[-50]
800036c8:	2f f8       	sub	r8,-1
800036ca:	ef 68 ff ce 	st.b	r7[-50],r8
800036ce:	ef 29 ff ce 	ld.sb	r9,r7[-50]
800036d2:	ec f8 00 00 	ld.w	r8,r6[0]
800036d6:	70 08       	ld.w	r8,r8[0x0]
800036d8:	f1 38 0d 44 	ld.ub	r8,r8[3396]
800036dc:	10 39       	cp.w	r9,r8
800036de:	fe 95 fb d8 	brlt	80002e8e <computeNewVelocity+0x62>
		{
			planes[ind].point[i] = centralData->position_estimator.vel_bf[i] + 0.5 * u[i];
		}
		
	}
	float planeFail = linearProgram3(planes, OptimalVelocity, MAXSPEED, NewVelocity, false);
800036e2:	ee cc 01 9c 	sub	r12,r7,412
800036e6:	30 08       	mov	r8,0
800036e8:	ee f9 fd dc 	ld.w	r9,r7[-548]
800036ec:	fc 1a 40 90 	movh	r10,0x4090
800036f0:	ee fb fd e0 	ld.w	r11,r7[-544]
800036f4:	f0 16 01 15 	mcall	r6[1108]
800036f8:	18 98       	mov	r8,r12
800036fa:	ef 48 ff e8 	st.w	r7[-24],r8
	if (planeFail < centralData->number_of_neighbors)
800036fe:	ec f8 00 00 	ld.w	r8,r6[0]
80003702:	70 08       	ld.w	r8,r8[0x0]
80003704:	f1 38 0d 44 	ld.ub	r8,r8[3396]
80003708:	e5 a6 0a 08 	cop	cp0,cr10,cr0,cr8,0x4c
8000370c:	30 18       	mov	r8,1
8000370e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003712:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003716:	e0 8c 00 04 	brvs	8000371e <computeNewVelocity+0x8f2>
8000371a:	e0 89 00 03 	brgt	80003720 <computeNewVelocity+0x8f4>
8000371e:	30 08       	mov	r8,0
80003720:	5c 58       	castu.b	r8
80003722:	c1 10       	breq	80003744 <computeNewVelocity+0x918>
	{
		linearProgram4(planes,planeFail,MAXSPEED,NewVelocity);
80003724:	ee f8 ff e8 	ld.w	r8,r7[-24]
80003728:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000372c:	5c 58       	castu.b	r8
8000372e:	f7 d8 b0 08 	bfexts	r11,r8,0x0,0x8
80003732:	ee c8 01 9c 	sub	r8,r7,412
80003736:	ee f9 fd dc 	ld.w	r9,r7[-548]
8000373a:	fc 1a 40 90 	movh	r10,0x4090
8000373e:	10 9c       	mov	r12,r8
80003740:	f0 16 02 1b 	mcall	r6[2156]
	}
	
	loop_count_orca = loop_count_orca++ % 100;
80003744:	ec f8 02 50 	ld.w	r8,r6[592]
80003748:	11 89       	ld.ub	r9,r8[0x0]
8000374a:	f1 d9 b0 08 	bfexts	r8,r9,0x0,0x8
8000374e:	e0 6a 85 1f 	mov	r10,34079
80003752:	ea 1a 51 eb 	orh	r10,0x51eb
80003756:	f0 0a 04 4a 	muls.d	r10,r8,r10
8000375a:	a5 5b       	asr	r11,0x5
8000375c:	f0 0a 14 1f 	asr	r10,r8,0x1f
80003760:	f6 0a 01 0a 	sub	r10,r11,r10
80003764:	f4 0a 10 64 	mul	r10,r10,100
80003768:	14 18       	sub	r8,r10
8000376a:	5c 58       	castu.b	r8
8000376c:	ec fa 02 50 	ld.w	r10,r6[592]
80003770:	b4 88       	st.b	r10[0x0],r8
80003772:	f2 c8 ff ff 	sub	r8,r9,-1
80003776:	5c 58       	castu.b	r8
80003778:	ec f9 02 50 	ld.w	r9,r6[592]
8000377c:	b2 88       	st.b	r9[0x0],r8
	
	float orca_diff[3];
	for (i=0;i<3;i++)
8000377e:	30 08       	mov	r8,0
80003780:	ef 68 ff cf 	st.b	r7[-49],r8
80003784:	c1 f8       	rjmp	800037c2 <computeNewVelocity+0x996>
	{
		orca_diff[i] = OptimalVelocity[i] - NewVelocity[i];
80003786:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000378a:	ef 29 ff cf 	ld.sb	r9,r7[-49]
8000378e:	a3 69       	lsl	r9,0x2
80003790:	ee fa fd e0 	ld.w	r10,r7[-544]
80003794:	f4 09 00 09 	add	r9,r10,r9
80003798:	72 0a       	ld.w	r10,r9[0x0]
8000379a:	ef 29 ff cf 	ld.sb	r9,r7[-49]
8000379e:	a3 69       	lsl	r9,0x2
800037a0:	ee fb fd dc 	ld.w	r11,r7[-548]
800037a4:	f6 09 00 09 	add	r9,r11,r9
800037a8:	72 09       	ld.w	r9,r9[0x0]
800037aa:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800037ae:	a3 68       	lsl	r8,0x2
800037b0:	ee 08 00 08 	add	r8,r7,r8
800037b4:	f1 49 fd f0 	st.w	r8[-528],r9
	}
	
	loop_count_orca = loop_count_orca++ % 100;
	
	float orca_diff[3];
	for (i=0;i<3;i++)
800037b8:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800037bc:	2f f8       	sub	r8,-1
800037be:	ef 68 ff cf 	st.b	r7[-49],r8
800037c2:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800037c6:	30 28       	mov	r8,2
800037c8:	f0 09 18 00 	cp.b	r9,r8
800037cc:	fe 9a ff dd 	brle	80003786 <computeNewVelocity+0x95a>
	{
		orca_diff[i] = OptimalVelocity[i] - NewVelocity[i];
	}
	
	if (loop_count_orca == 0)
800037d0:	ec f8 02 50 	ld.w	r8,r6[592]
800037d4:	11 88       	ld.ub	r8,r8[0x0]
800037d6:	58 08       	cp.w	r8,0
800037d8:	c2 11       	brne	8000381a <computeNewVelocity+0x9ee>
	{
		dbg_print("Orca diffvel:");
800037da:	fe cc 09 d2 	sub	r12,pc,2514
800037de:	f0 16 00 01 	mcall	r6[4]
		dbg_print_vector(orca_diff,2);
800037e2:	ee c8 02 10 	sub	r8,r7,528
800037e6:	30 2b       	mov	r11,2
800037e8:	10 9c       	mov	r12,r8
800037ea:	f0 16 00 d4 	mcall	r6[848]
		dbg_print(", Optimal:");
800037ee:	fe cc 09 d6 	sub	r12,pc,2518
800037f2:	f0 16 00 01 	mcall	r6[4]
		dbg_print_vector(OptimalVelocity,2);
800037f6:	30 2b       	mov	r11,2
800037f8:	ee fc fd e0 	ld.w	r12,r7[-544]
800037fc:	f0 16 00 d4 	mcall	r6[848]
		dbg_print(", New:");
80003800:	fe cc 09 dc 	sub	r12,pc,2524
80003804:	f0 16 00 01 	mcall	r6[4]
		dbg_print_vector(NewVelocity,2);
80003808:	30 2b       	mov	r11,2
8000380a:	ee fc fd dc 	ld.w	r12,r7[-548]
8000380e:	f0 16 00 d4 	mcall	r6[848]
		dbg_print("\n");
80003812:	fe cc 0a 0e 	sub	r12,pc,2574
80003816:	f0 16 00 01 	mcall	r6[4]
			//dbg_print_vector(NewVelocity,2);
			//dbg_print("\n");
		//}
	}

}
8000381a:	fe 3d fd cc 	sub	sp,-564
8000381e:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
80003822:	00 00       	add	r0,r0
80003824:	80 00       	ld.sh	r0,r0[0x0]
80003826:	2c be       	sub	lr,-53

80003828 <linearProgram1>:

bool linearProgram1(plane_t planes[], int8_t index, line_t line, float maxSpeed, float OptimalVelocity[], float NewVelocity[], bool directionOpt)
{
80003828:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000382c:	1a 97       	mov	r7,sp
8000382e:	21 7d       	sub	sp,92
80003830:	fe f6 04 a8 	ld.w	r6,pc[1192]
80003834:	1e 26       	rsub	r6,pc
80003836:	ee c5 ff ec 	sub	r5,r7,-20
8000383a:	ef 4c ff b8 	st.w	r7[-72],r12
8000383e:	ef 4a ff b0 	st.w	r7[-80],r10
80003842:	ef 49 ff ac 	st.w	r7[-84],r9
80003846:	ef 48 ff a8 	st.w	r7[-88],r8
8000384a:	6a 68       	ld.w	r8,r5[0x18]
8000384c:	16 99       	mov	r9,r11
8000384e:	ef 69 ff b4 	st.b	r7[-76],r9
80003852:	ef 68 ff a4 	st.b	r7[-92],r8
	int8_t i;
	
	float dotProduct = scalar_product(line.point,line.direction);
80003856:	ea c8 ff f4 	sub	r8,r5,-12
8000385a:	0a 9b       	mov	r11,r5
8000385c:	10 9c       	mov	r12,r8
8000385e:	fe b0 f8 17 	rcall	8000288c <scalar_product>
80003862:	18 98       	mov	r8,r12
80003864:	ef 48 ff d8 	st.w	r7[-40],r8
	float discriminant = SQR(dotProduct) + SQR(maxSpeed) - vector_norm_sqr(line.point);
80003868:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000386c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003870:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003874:	ee fa ff b0 	ld.w	r10,r7[-80]
80003878:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000387c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80003880:	e5 a0 03 98 	cop	cp0,cr3,cr9,cr8,0x40
80003884:	ea c8 ff f4 	sub	r8,r5,-12
80003888:	10 9c       	mov	r12,r8
8000388a:	fe b0 f9 d1 	rcall	80002c2c <vector_norm_sqr>
8000388e:	18 98       	mov	r8,r12
80003890:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
80003894:	ef 48 ff dc 	st.w	r7[-36],r8
	
	if (discriminant < 0.0)
80003898:	30 18       	mov	r8,1
8000389a:	ee fa ff dc 	ld.w	r10,r7[-36]
8000389e:	30 09       	mov	r9,0
800038a0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800038a4:	e0 8c 00 03 	brvs	800038aa <linearProgram1+0x82>
800038a8:	c0 25       	brlt	800038ac <linearProgram1+0x84>
800038aa:	30 08       	mov	r8,0
800038ac:	5c 58       	castu.b	r8
800038ae:	c0 40       	breq	800038b6 <linearProgram1+0x8e>
	{
		/* Max speed sphere fully invalidates line. */
		return false;
800038b0:	30 08       	mov	r8,0
800038b2:	e0 8f 02 0e 	bral	80003cce <linearProgram1+0x4a6>
	}
	
	float sqrtDiscriminant = fast_sqrt(discriminant);
800038b6:	ee fc ff dc 	ld.w	r12,r7[-36]
800038ba:	fe b0 f9 4f 	rcall	80002b58 <fast_sqrt>
800038be:	18 98       	mov	r8,r12
800038c0:	ef 48 ff e0 	st.w	r7[-32],r8
	float tLeft = -dotProduct - sqrtDiscriminant;
800038c4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800038c8:	10 99       	mov	r9,r8
800038ca:	ee 19 80 00 	eorh	r9,0x8000
800038ce:	ee f8 ff e0 	ld.w	r8,r7[-32]
800038d2:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800038d6:	ef 48 ff e4 	st.w	r7[-28],r8
	float tRight = -dotProduct + sqrtDiscriminant;
800038da:	ee f9 ff e0 	ld.w	r9,r7[-32]
800038de:	ee f8 ff d8 	ld.w	r8,r7[-40]
800038e2:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800038e6:	ef 48 ff e8 	st.w	r7[-24],r8
	
	int8_t index2;
	for (index2=0;index2<index;index2++)
800038ea:	30 08       	mov	r8,0
800038ec:	ef 68 ff ef 	st.b	r7[-17],r8
800038f0:	cb e8       	rjmp	80003a6c <linearProgram1+0x244>
	{
		float diffPoints[3];
		for (i=0;i<3;i++)
800038f2:	30 08       	mov	r8,0
800038f4:	ef 68 ff d7 	st.b	r7[-41],r8
800038f8:	c2 48       	rjmp	80003940 <linearProgram1+0x118>
		{
			diffPoints[i] = planes[index2].point[i] - line.point[i];
800038fa:	ef 2a ff d7 	ld.sb	r10,r7[-41]
800038fe:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80003902:	12 98       	mov	r8,r9
80003904:	a1 78       	lsl	r8,0x1
80003906:	12 08       	add	r8,r9
80003908:	a3 78       	lsl	r8,0x3
8000390a:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000390e:	f2 08 00 08 	add	r8,r9,r8
80003912:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003916:	2f d9       	sub	r9,-3
80003918:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000391c:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003920:	2f d8       	sub	r8,-3
80003922:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
80003926:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000392a:	f4 08 15 02 	lsl	r8,r10,0x2
8000392e:	ee 08 00 08 	add	r8,r7,r8
80003932:	f1 49 ff c8 	st.w	r8[-56],r9
	
	int8_t index2;
	for (index2=0;index2<index;index2++)
	{
		float diffPoints[3];
		for (i=0;i<3;i++)
80003936:	ef 38 ff d7 	ld.ub	r8,r7[-41]
8000393a:	2f f8       	sub	r8,-1
8000393c:	ef 68 ff d7 	st.b	r7[-41],r8
80003940:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003944:	30 28       	mov	r8,2
80003946:	f0 09 18 00 	cp.b	r9,r8
8000394a:	fe 9a ff d8 	brle	800038fa <linearProgram1+0xd2>
		{
			diffPoints[i] = planes[index2].point[i] - line.point[i];
		}
		float numerator = scalar_product(diffPoints, planes[index2].normal);
8000394e:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80003952:	12 98       	mov	r8,r9
80003954:	a1 78       	lsl	r8,0x1
80003956:	12 08       	add	r8,r9
80003958:	a3 78       	lsl	r8,0x3
8000395a:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000395e:	f2 08 00 08 	add	r8,r9,r8
80003962:	10 99       	mov	r9,r8
80003964:	ee c8 00 38 	sub	r8,r7,56
80003968:	12 9b       	mov	r11,r9
8000396a:	10 9c       	mov	r12,r8
8000396c:	fe b0 f7 90 	rcall	8000288c <scalar_product>
80003970:	18 98       	mov	r8,r12
80003972:	ef 48 ff f0 	st.w	r7[-16],r8
		float denominator = scalar_product(line.direction, planes[index2].normal);
80003976:	ef 29 ff ef 	ld.sb	r9,r7[-17]
8000397a:	12 98       	mov	r8,r9
8000397c:	a1 78       	lsl	r8,0x1
8000397e:	12 08       	add	r8,r9
80003980:	a3 78       	lsl	r8,0x3
80003982:	ee f9 ff b8 	ld.w	r9,r7[-72]
80003986:	f2 08 00 08 	add	r8,r9,r8
8000398a:	10 9b       	mov	r11,r8
8000398c:	0a 9c       	mov	r12,r5
8000398e:	fe b0 f7 7f 	rcall	8000288c <scalar_product>
80003992:	18 98       	mov	r8,r12
80003994:	ef 48 ff f4 	st.w	r7[-12],r8
		
		if (SQR(denominator) <= RVO_EPSILON)
80003998:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000399c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800039a0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800039a4:	10 9c       	mov	r12,r8
800039a6:	f0 16 00 02 	mcall	r6[8]
800039aa:	14 98       	mov	r8,r10
800039ac:	16 99       	mov	r9,r11
800039ae:	30 03       	mov	r3,0
800039b0:	e0 6a 43 2d 	mov	r10,17197
800039b4:	ea 1a eb 1c 	orh	r10,0xeb1c
800039b8:	e0 6b 36 e2 	mov	r11,14050
800039bc:	ea 1b 3f 1a 	orh	r11,0x3f1a
800039c0:	f0 16 00 82 	mcall	r6[520]
800039c4:	18 98       	mov	r8,r12
800039c6:	58 08       	cp.w	r8,0
800039c8:	c0 20       	breq	800039cc <linearProgram1+0x1a4>
800039ca:	30 13       	mov	r3,1
800039cc:	f1 d3 c0 08 	bfextu	r8,r3,0x0,0x8
800039d0:	c1 00       	breq	800039f0 <linearProgram1+0x1c8>
		{
			/* Lines line is (almost) parallel to plane i. */
			if (numerator > 0.0)
800039d2:	30 18       	mov	r8,1
800039d4:	ee fa ff f0 	ld.w	r10,r7[-16]
800039d8:	30 09       	mov	r9,0
800039da:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800039de:	e0 8c 00 04 	brvs	800039e6 <linearProgram1+0x1be>
800039e2:	e0 89 00 03 	brgt	800039e8 <linearProgram1+0x1c0>
800039e6:	30 08       	mov	r8,0
800039e8:	5c 58       	castu.b	r8
800039ea:	c3 b0       	breq	80003a60 <linearProgram1+0x238>
			{
				return false;
800039ec:	30 08       	mov	r8,0
800039ee:	c7 09       	rjmp	80003cce <linearProgram1+0x4a6>
			}else{
				continue;
			}
		}
		
		float t = numerator / denominator;
800039f0:	ee fb ff f4 	ld.w	r11,r7[-12]
800039f4:	ee fc ff f0 	ld.w	r12,r7[-16]
800039f8:	f0 16 00 08 	mcall	r6[32]
800039fc:	18 98       	mov	r8,r12
800039fe:	ef 48 ff f8 	st.w	r7[-8],r8
		
		if (denominator >= 0.0)
80003a02:	30 18       	mov	r8,1
80003a04:	ee fa ff f4 	ld.w	r10,r7[-12]
80003a08:	30 09       	mov	r9,0
80003a0a:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003a0e:	e0 8c 00 03 	brvs	80003a14 <linearProgram1+0x1ec>
80003a12:	c0 24       	brge	80003a16 <linearProgram1+0x1ee>
80003a14:	30 08       	mov	r8,0
80003a16:	5c 58       	castu.b	r8
80003a18:	c0 b0       	breq	80003a2e <linearProgram1+0x206>
		{
			/* Plane i bounds line on the left. */
			tLeft = f_max(tLeft, t);
80003a1a:	ee fb ff f8 	ld.w	r11,r7[-8]
80003a1e:	ee fc ff e4 	ld.w	r12,r7[-28]
80003a22:	fe b0 f9 52 	rcall	80002cc6 <f_max>
80003a26:	18 98       	mov	r8,r12
80003a28:	ef 48 ff e4 	st.w	r7[-28],r8
80003a2c:	c0 a8       	rjmp	80003a40 <linearProgram1+0x218>
		}else{
			/* Plane i bounds line on the right. */
			tRight = f_min(tRight, t);
80003a2e:	ee fb ff f8 	ld.w	r11,r7[-8]
80003a32:	ee fc ff e8 	ld.w	r12,r7[-24]
80003a36:	fe b0 f9 29 	rcall	80002c88 <f_min>
80003a3a:	18 98       	mov	r8,r12
80003a3c:	ef 48 ff e8 	st.w	r7[-24],r8
		}
		
		if (tLeft > tRight)
80003a40:	30 18       	mov	r8,1
80003a42:	ee fa ff e4 	ld.w	r10,r7[-28]
80003a46:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003a4a:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003a4e:	e0 8c 00 04 	brvs	80003a56 <linearProgram1+0x22e>
80003a52:	e0 89 00 03 	brgt	80003a58 <linearProgram1+0x230>
80003a56:	30 08       	mov	r8,0
80003a58:	5c 58       	castu.b	r8
80003a5a:	c0 40       	breq	80003a62 <linearProgram1+0x23a>
		{
			return false;
80003a5c:	30 08       	mov	r8,0
80003a5e:	c3 89       	rjmp	80003cce <linearProgram1+0x4a6>
			/* Lines line is (almost) parallel to plane i. */
			if (numerator > 0.0)
			{
				return false;
			}else{
				continue;
80003a60:	d7 03       	nop
	float sqrtDiscriminant = fast_sqrt(discriminant);
	float tLeft = -dotProduct - sqrtDiscriminant;
	float tRight = -dotProduct + sqrtDiscriminant;
	
	int8_t index2;
	for (index2=0;index2<index;index2++)
80003a62:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80003a66:	2f f8       	sub	r8,-1
80003a68:	ef 68 ff ef 	st.b	r7[-17],r8
80003a6c:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80003a70:	ef 38 ff b4 	ld.ub	r8,r7[-76]
80003a74:	f0 09 18 00 	cp.b	r9,r8
80003a78:	fe 95 ff 3d 	brlt	800038f2 <linearProgram1+0xca>
		{
			return false;
		}
	}
	
	if (directionOpt)
80003a7c:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80003a80:	30 08       	mov	r8,0
80003a82:	f0 09 18 00 	cp.b	r9,r8
80003a86:	c6 20       	breq	80003b4a <linearProgram1+0x322>
	{
		/* Optimize direction. */
		if (scalar_product(OptimalVelocity, line.direction) > 0.0f) {
80003a88:	0a 9b       	mov	r11,r5
80003a8a:	ee fc ff ac 	ld.w	r12,r7[-84]
80003a8e:	fe b0 f6 ff 	rcall	8000288c <scalar_product>
80003a92:	18 9a       	mov	r10,r12
80003a94:	30 18       	mov	r8,1
80003a96:	30 09       	mov	r9,0
80003a98:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003a9c:	e0 8c 00 04 	brvs	80003aa4 <linearProgram1+0x27c>
80003aa0:	e0 89 00 03 	brgt	80003aa6 <linearProgram1+0x27e>
80003aa4:	30 08       	mov	r8,0
80003aa6:	5c 58       	castu.b	r8
80003aa8:	c2 90       	breq	80003afa <linearProgram1+0x2d2>
			/* Take right extreme. */
			for (i=0;i<3;i++)
80003aaa:	30 08       	mov	r8,0
80003aac:	ef 68 ff d7 	st.b	r7[-41],r8
80003ab0:	c1 d8       	rjmp	80003aea <linearProgram1+0x2c2>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
80003ab2:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003ab6:	a3 68       	lsl	r8,0x2
80003ab8:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003abc:	f2 08 00 08 	add	r8,r9,r8
80003ac0:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003ac4:	2f d9       	sub	r9,-3
80003ac6:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003aca:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003ace:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003ad2:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003ad6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003ada:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003ade:	91 09       	st.w	r8[0x0],r9
	if (directionOpt)
	{
		/* Optimize direction. */
		if (scalar_product(OptimalVelocity, line.direction) > 0.0f) {
			/* Take right extreme. */
			for (i=0;i<3;i++)
80003ae0:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003ae4:	2f f8       	sub	r8,-1
80003ae6:	ef 68 ff d7 	st.b	r7[-41],r8
80003aea:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003aee:	30 28       	mov	r8,2
80003af0:	f0 09 18 00 	cp.b	r9,r8
80003af4:	fe 9a ff df 	brle	80003ab2 <linearProgram1+0x28a>
80003af8:	ce a8       	rjmp	80003ccc <linearProgram1+0x4a4>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else {
			/* Take left extreme. */
			for (i=0;i<3;i++)
80003afa:	30 08       	mov	r8,0
80003afc:	ef 68 ff d7 	st.b	r7[-41],r8
80003b00:	c1 d8       	rjmp	80003b3a <linearProgram1+0x312>
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
80003b02:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003b06:	a3 68       	lsl	r8,0x2
80003b08:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003b0c:	f2 08 00 08 	add	r8,r9,r8
80003b10:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b14:	2f d9       	sub	r9,-3
80003b16:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003b1a:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b1e:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003b22:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003b26:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003b2a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003b2e:	91 09       	st.w	r8[0x0],r9
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else {
			/* Take left extreme. */
			for (i=0;i<3;i++)
80003b30:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003b34:	2f f8       	sub	r8,-1
80003b36:	ef 68 ff d7 	st.b	r7[-41],r8
80003b3a:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003b3e:	30 28       	mov	r8,2
80003b40:	f0 09 18 00 	cp.b	r9,r8
80003b44:	fe 9a ff df 	brle	80003b02 <linearProgram1+0x2da>
80003b48:	cc 28       	rjmp	80003ccc <linearProgram1+0x4a4>
			}
		}
	}else{
		/* Optimize closest point. */
		float diffVelPoint[3];
		for (i=0;i<3;i++)
80003b4a:	30 08       	mov	r8,0
80003b4c:	ef 68 ff d7 	st.b	r7[-41],r8
80003b50:	c1 c8       	rjmp	80003b88 <linearProgram1+0x360>
		{
			diffVelPoint[i] = OptimalVelocity[i] - line.point[i];
80003b52:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003b56:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b5a:	a3 69       	lsl	r9,0x2
80003b5c:	ee fa ff ac 	ld.w	r10,r7[-84]
80003b60:	f4 09 00 09 	add	r9,r10,r9
80003b64:	72 0a       	ld.w	r10,r9[0x0]
80003b66:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b6a:	2f d9       	sub	r9,-3
80003b6c:	ea 09 03 29 	ld.w	r9,r5[r9<<0x2]
80003b70:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80003b74:	a3 68       	lsl	r8,0x2
80003b76:	ee 08 00 08 	add	r8,r7,r8
80003b7a:	f1 49 ff bc 	st.w	r8[-68],r9
			}
		}
	}else{
		/* Optimize closest point. */
		float diffVelPoint[3];
		for (i=0;i<3;i++)
80003b7e:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003b82:	2f f8       	sub	r8,-1
80003b84:	ef 68 ff d7 	st.b	r7[-41],r8
80003b88:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003b8c:	30 28       	mov	r8,2
80003b8e:	f0 09 18 00 	cp.b	r9,r8
80003b92:	fe 9a ff e0 	brle	80003b52 <linearProgram1+0x32a>
		{
			diffVelPoint[i] = OptimalVelocity[i] - line.point[i];
		}
		
		float t = scalar_product(line.direction, diffVelPoint);
80003b96:	ee c8 00 44 	sub	r8,r7,68
80003b9a:	10 9b       	mov	r11,r8
80003b9c:	0a 9c       	mov	r12,r5
80003b9e:	fe b0 f6 77 	rcall	8000288c <scalar_product>
80003ba2:	18 98       	mov	r8,r12
80003ba4:	ef 48 ff fc 	st.w	r7[-4],r8

		if (t < tLeft)
80003ba8:	30 18       	mov	r8,1
80003baa:	ee fa ff fc 	ld.w	r10,r7[-4]
80003bae:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003bb2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003bb6:	e0 8c 00 03 	brvs	80003bbc <linearProgram1+0x394>
80003bba:	c0 25       	brlt	80003bbe <linearProgram1+0x396>
80003bbc:	30 08       	mov	r8,0
80003bbe:	5c 58       	castu.b	r8
80003bc0:	c2 90       	breq	80003c12 <linearProgram1+0x3ea>
		{
			for (i=0;i<3;i++)
80003bc2:	30 08       	mov	r8,0
80003bc4:	ef 68 ff d7 	st.b	r7[-41],r8
80003bc8:	c1 d8       	rjmp	80003c02 <linearProgram1+0x3da>
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
80003bca:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003bce:	a3 68       	lsl	r8,0x2
80003bd0:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003bd4:	f2 08 00 08 	add	r8,r9,r8
80003bd8:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003bdc:	2f d9       	sub	r9,-3
80003bde:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003be2:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003be6:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003bea:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003bee:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003bf2:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003bf6:	91 09       	st.w	r8[0x0],r9
		
		float t = scalar_product(line.direction, diffVelPoint);

		if (t < tLeft)
		{
			for (i=0;i<3;i++)
80003bf8:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003bfc:	2f f8       	sub	r8,-1
80003bfe:	ef 68 ff d7 	st.b	r7[-41],r8
80003c02:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003c06:	30 28       	mov	r8,2
80003c08:	f0 09 18 00 	cp.b	r9,r8
80003c0c:	fe 9a ff df 	brle	80003bca <linearProgram1+0x3a2>
80003c10:	c5 e8       	rjmp	80003ccc <linearProgram1+0x4a4>
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
			}
		}else if (t > tRight){
80003c12:	30 18       	mov	r8,1
80003c14:	ee fa ff fc 	ld.w	r10,r7[-4]
80003c18:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003c1c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003c20:	e0 8c 00 04 	brvs	80003c28 <linearProgram1+0x400>
80003c24:	e0 89 00 03 	brgt	80003c2a <linearProgram1+0x402>
80003c28:	30 08       	mov	r8,0
80003c2a:	5c 58       	castu.b	r8
80003c2c:	c2 90       	breq	80003c7e <linearProgram1+0x456>
			for (i=0;i<3;i++)
80003c2e:	30 08       	mov	r8,0
80003c30:	ef 68 ff d7 	st.b	r7[-41],r8
80003c34:	c1 d8       	rjmp	80003c6e <linearProgram1+0x446>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
80003c36:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003c3a:	a3 68       	lsl	r8,0x2
80003c3c:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003c40:	f2 08 00 08 	add	r8,r9,r8
80003c44:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003c48:	2f d9       	sub	r9,-3
80003c4a:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003c4e:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003c52:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003c56:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003c5a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003c5e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003c62:	91 09       	st.w	r8[0x0],r9
			for (i=0;i<3;i++)
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
			}
		}else if (t > tRight){
			for (i=0;i<3;i++)
80003c64:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003c68:	2f f8       	sub	r8,-1
80003c6a:	ef 68 ff d7 	st.b	r7[-41],r8
80003c6e:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003c72:	30 28       	mov	r8,2
80003c74:	f0 09 18 00 	cp.b	r9,r8
80003c78:	fe 9a ff df 	brle	80003c36 <linearProgram1+0x40e>
80003c7c:	c2 88       	rjmp	80003ccc <linearProgram1+0x4a4>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else{
			for (i=0;i<3;i++)
80003c7e:	30 08       	mov	r8,0
80003c80:	ef 68 ff d7 	st.b	r7[-41],r8
80003c84:	c1 d8       	rjmp	80003cbe <linearProgram1+0x496>
			{
				NewVelocity[i] = line.point[i] + t * line.direction[i];
80003c86:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003c8a:	a3 68       	lsl	r8,0x2
80003c8c:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003c90:	f2 08 00 08 	add	r8,r9,r8
80003c94:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003c98:	2f d9       	sub	r9,-3
80003c9a:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003c9e:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003ca2:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003ca6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003caa:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003cae:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003cb2:	91 09       	st.w	r8[0x0],r9
			for (i=0;i<3;i++)
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else{
			for (i=0;i<3;i++)
80003cb4:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003cb8:	2f f8       	sub	r8,-1
80003cba:	ef 68 ff d7 	st.b	r7[-41],r8
80003cbe:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003cc2:	30 28       	mov	r8,2
80003cc4:	f0 09 18 00 	cp.b	r9,r8
80003cc8:	fe 9a ff df 	brle	80003c86 <linearProgram1+0x45e>
			{
				NewVelocity[i] = line.point[i] + t * line.direction[i];
			}
		}
	}
	return true;
80003ccc:	30 18       	mov	r8,1
}
80003cce:	10 9c       	mov	r12,r8
80003cd0:	2e 9d       	sub	sp,-92
80003cd2:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80003cd6:	00 00       	add	r0,r0
80003cd8:	80 00       	ld.sh	r0,r0[0x0]
80003cda:	36 b8       	mov	r8,107

80003cdc <linearProgram2>:

bool linearProgram2(plane_t planes[], int8_t ind, float maxSpeed, float OptimalVelocity[], float NewVelocity[], bool directionOpt)
{
80003cdc:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80003ce0:	1a 97       	mov	r7,sp
80003ce2:	fa cd 00 cc 	sub	sp,sp,204
80003ce6:	fe f6 09 6e 	ld.w	r6,pc[2414]
80003cea:	1e 26       	rsub	r6,pc
80003cec:	ee ce ff ec 	sub	lr,r7,-20
80003cf0:	ef 4c ff 48 	st.w	r7[-184],r12
80003cf4:	ef 4a ff 40 	st.w	r7[-192],r10
80003cf8:	ef 49 ff 3c 	st.w	r7[-196],r9
80003cfc:	ef 48 ff 38 	st.w	r7[-200],r8
80003d00:	7c 08       	ld.w	r8,lr[0x0]
80003d02:	16 99       	mov	r9,r11
80003d04:	ef 69 ff 44 	st.b	r7[-188],r9
80003d08:	ef 68 ff 34 	st.b	r7[-204],r8
	int8_t i;
	
	float planeDist = scalar_product(planes[ind].point,planes[ind].normal);
80003d0c:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003d10:	12 98       	mov	r8,r9
80003d12:	a1 78       	lsl	r8,0x1
80003d14:	12 08       	add	r8,r9
80003d16:	a3 78       	lsl	r8,0x3
80003d18:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003d1c:	f2 08 00 08 	add	r8,r9,r8
80003d20:	10 9a       	mov	r10,r8
80003d22:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003d26:	12 98       	mov	r8,r9
80003d28:	a1 78       	lsl	r8,0x1
80003d2a:	12 08       	add	r8,r9
80003d2c:	a3 78       	lsl	r8,0x3
80003d2e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003d32:	f2 08 00 08 	add	r8,r9,r8
80003d36:	2f 48       	sub	r8,-12
80003d38:	14 9b       	mov	r11,r10
80003d3a:	10 9c       	mov	r12,r8
80003d3c:	fe b0 f5 a8 	rcall	8000288c <scalar_product>
80003d40:	18 98       	mov	r8,r12
80003d42:	ef 48 ff c8 	st.w	r7[-56],r8
	float planeDistSq = SQR(planeDist);
80003d46:	ee f9 ff c8 	ld.w	r9,r7[-56]
80003d4a:	ee f8 ff c8 	ld.w	r8,r7[-56]
80003d4e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003d52:	ef 48 ff cc 	st.w	r7[-52],r8
	float radiusSq = SQR(maxSpeed);
80003d56:	ee f9 ff 40 	ld.w	r9,r7[-192]
80003d5a:	ee f8 ff 40 	ld.w	r8,r7[-192]
80003d5e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003d62:	ef 48 ff d0 	st.w	r7[-48],r8
	
	if (planeDistSq > radiusSq)
80003d66:	30 18       	mov	r8,1
80003d68:	ee fa ff cc 	ld.w	r10,r7[-52]
80003d6c:	ee f9 ff d0 	ld.w	r9,r7[-48]
80003d70:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003d74:	e0 8c 00 04 	brvs	80003d7c <linearProgram2+0xa0>
80003d78:	e0 89 00 03 	brgt	80003d7e <linearProgram2+0xa2>
80003d7c:	30 08       	mov	r8,0
80003d7e:	5c 58       	castu.b	r8
80003d80:	c0 40       	breq	80003d88 <linearProgram2+0xac>
	{
		/* Max speed sphere fully invalidates plane planeNo. */
		return false;
80003d82:	30 08       	mov	r8,0
80003d84:	e0 8f 04 64 	bral	8000464c <linearProgram2+0x970>
	}
	
	float planeRadiusSq = radiusSq - planeDistSq;
80003d88:	ee f9 ff d0 	ld.w	r9,r7[-48]
80003d8c:	ee f8 ff cc 	ld.w	r8,r7[-52]
80003d90:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80003d94:	ef 48 ff d4 	st.w	r7[-44],r8
	
	float planeCenter[3];
	for(i=0;i<3;i++)
80003d98:	30 08       	mov	r8,0
80003d9a:	ef 68 ff c7 	st.b	r7[-57],r8
80003d9e:	c2 08       	rjmp	80003dde <linearProgram2+0x102>
	{
		planeCenter[i] = planeDist * planes[ind].normal[i];
80003da0:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80003da4:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003da8:	12 98       	mov	r8,r9
80003daa:	a1 78       	lsl	r8,0x1
80003dac:	12 08       	add	r8,r9
80003dae:	a3 78       	lsl	r8,0x3
80003db0:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003db4:	f2 08 00 08 	add	r8,r9,r8
80003db8:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80003dbc:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003dc0:	ee f8 ff c8 	ld.w	r8,r7[-56]
80003dc4:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003dc8:	f4 08 15 02 	lsl	r8,r10,0x2
80003dcc:	ee 08 00 08 	add	r8,r7,r8
80003dd0:	f1 49 ff b8 	st.w	r8[-72],r9
	}
	
	float planeRadiusSq = radiusSq - planeDistSq;
	
	float planeCenter[3];
	for(i=0;i<3;i++)
80003dd4:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003dd8:	2f f8       	sub	r8,-1
80003dda:	ef 68 ff c7 	st.b	r7[-57],r8
80003dde:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003de2:	30 28       	mov	r8,2
80003de4:	f0 09 18 00 	cp.b	r9,r8
80003de8:	fe 9a ff dc 	brle	80003da0 <linearProgram2+0xc4>
	{
		planeCenter[i] = planeDist * planes[ind].normal[i];
	}
	
	if (directionOpt)
80003dec:	ef 39 ff 34 	ld.ub	r9,r7[-204]
80003df0:	30 08       	mov	r8,0
80003df2:	f0 09 18 00 	cp.b	r9,r8
80003df6:	e0 80 00 c0 	breq	80003f76 <linearProgram2+0x29a>
	{
		/* Project direction optVelocity on plane ind. */
		float planeOptVelocity[3];
		float scalarProduct = scalar_product(OptimalVelocity,planes[ind].normal);
80003dfa:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003dfe:	12 98       	mov	r8,r9
80003e00:	a1 78       	lsl	r8,0x1
80003e02:	12 08       	add	r8,r9
80003e04:	a3 78       	lsl	r8,0x3
80003e06:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003e0a:	f2 08 00 08 	add	r8,r9,r8
80003e0e:	10 9b       	mov	r11,r8
80003e10:	ee fc ff 3c 	ld.w	r12,r7[-196]
80003e14:	fe b0 f5 3c 	rcall	8000288c <scalar_product>
80003e18:	18 98       	mov	r8,r12
80003e1a:	ef 48 ff dc 	st.w	r7[-36],r8
		for(i=0;i<3;i++)
80003e1e:	30 08       	mov	r8,0
80003e20:	ef 68 ff c7 	st.b	r7[-57],r8
80003e24:	c2 a8       	rjmp	80003e78 <linearProgram2+0x19c>
		{
			planeOptVelocity[i] = OptimalVelocity[i] - scalarProduct * planes[ind].normal[i];
80003e26:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80003e2a:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003e2e:	a3 68       	lsl	r8,0x2
80003e30:	ee f9 ff 3c 	ld.w	r9,r7[-196]
80003e34:	f2 08 00 08 	add	r8,r9,r8
80003e38:	70 0b       	ld.w	r11,r8[0x0]
80003e3a:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003e3e:	12 98       	mov	r8,r9
80003e40:	a1 78       	lsl	r8,0x1
80003e42:	12 08       	add	r8,r9
80003e44:	a3 78       	lsl	r8,0x3
80003e46:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003e4a:	f2 08 00 08 	add	r8,r9,r8
80003e4e:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80003e52:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003e56:	ee f8 ff dc 	ld.w	r8,r7[-36]
80003e5a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003e5e:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
80003e62:	f4 08 15 02 	lsl	r8,r10,0x2
80003e66:	ee 08 00 08 	add	r8,r7,r8
80003e6a:	f1 49 ff ac 	st.w	r8[-84],r9
	if (directionOpt)
	{
		/* Project direction optVelocity on plane ind. */
		float planeOptVelocity[3];
		float scalarProduct = scalar_product(OptimalVelocity,planes[ind].normal);
		for(i=0;i<3;i++)
80003e6e:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003e72:	2f f8       	sub	r8,-1
80003e74:	ef 68 ff c7 	st.b	r7[-57],r8
80003e78:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003e7c:	30 28       	mov	r8,2
80003e7e:	f0 09 18 00 	cp.b	r9,r8
80003e82:	fe 9a ff d2 	brle	80003e26 <linearProgram2+0x14a>
		{
			planeOptVelocity[i] = OptimalVelocity[i] - scalarProduct * planes[ind].normal[i];
		}
		float planeOptVelocityLengthSq = vector_norm_sqr(planeOptVelocity);
80003e86:	ee c8 00 54 	sub	r8,r7,84
80003e8a:	10 9c       	mov	r12,r8
80003e8c:	fe b0 f6 d0 	rcall	80002c2c <vector_norm_sqr>
80003e90:	18 98       	mov	r8,r12
80003e92:	ef 48 ff e0 	st.w	r7[-32],r8
		
		if (planeOptVelocityLengthSq <= RVO_EPSILON)
80003e96:	ee fc ff e0 	ld.w	r12,r7[-32]
80003e9a:	f0 16 00 02 	mcall	r6[8]
80003e9e:	14 98       	mov	r8,r10
80003ea0:	16 99       	mov	r9,r11
80003ea2:	30 05       	mov	r5,0
80003ea4:	e0 6a 43 2d 	mov	r10,17197
80003ea8:	ea 1a eb 1c 	orh	r10,0xeb1c
80003eac:	e0 6b 36 e2 	mov	r11,14050
80003eb0:	ea 1b 3f 1a 	orh	r11,0x3f1a
80003eb4:	f0 16 00 82 	mcall	r6[520]
80003eb8:	18 98       	mov	r8,r12
80003eba:	58 08       	cp.w	r8,0
80003ebc:	c0 20       	breq	80003ec0 <linearProgram2+0x1e4>
80003ebe:	30 15       	mov	r5,1
80003ec0:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80003ec4:	c2 00       	breq	80003f04 <linearProgram2+0x228>
		{
			for(i=0;i<3;i++)
80003ec6:	30 08       	mov	r8,0
80003ec8:	ef 68 ff c7 	st.b	r7[-57],r8
80003ecc:	c1 48       	rjmp	80003ef4 <linearProgram2+0x218>
			{
				NewVelocity[i] = planeCenter[i];
80003ece:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003ed2:	a3 68       	lsl	r8,0x2
80003ed4:	ee f9 ff 38 	ld.w	r9,r7[-200]
80003ed8:	10 09       	add	r9,r8
80003eda:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003ede:	a3 68       	lsl	r8,0x2
80003ee0:	ee 08 00 08 	add	r8,r7,r8
80003ee4:	f0 f8 ff b8 	ld.w	r8,r8[-72]
80003ee8:	93 08       	st.w	r9[0x0],r8
		}
		float planeOptVelocityLengthSq = vector_norm_sqr(planeOptVelocity);
		
		if (planeOptVelocityLengthSq <= RVO_EPSILON)
		{
			for(i=0;i<3;i++)
80003eea:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003eee:	2f f8       	sub	r8,-1
80003ef0:	ef 68 ff c7 	st.b	r7[-57],r8
80003ef4:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003ef8:	30 28       	mov	r8,2
80003efa:	f0 09 18 00 	cp.b	r9,r8
80003efe:	fe 9a ff e8 	brle	80003ece <linearProgram2+0x1f2>
80003f02:	c2 d9       	rjmp	8000415c <linearProgram2+0x480>
			{
				NewVelocity[i] = planeCenter[i];
			}
		}else{
			float sqrtPlane = fast_sqrt(planeRadiusSq / planeOptVelocityLengthSq);
80003f04:	ee fb ff e0 	ld.w	r11,r7[-32]
80003f08:	ee fc ff d4 	ld.w	r12,r7[-44]
80003f0c:	f0 16 00 08 	mcall	r6[32]
80003f10:	18 98       	mov	r8,r12
80003f12:	10 9c       	mov	r12,r8
80003f14:	fe b0 f6 22 	rcall	80002b58 <fast_sqrt>
80003f18:	18 98       	mov	r8,r12
80003f1a:	ef 48 ff e4 	st.w	r7[-28],r8
			for(i=0;i<3;i++)
80003f1e:	30 08       	mov	r8,0
80003f20:	ef 68 ff c7 	st.b	r7[-57],r8
80003f24:	c2 18       	rjmp	80003f66 <linearProgram2+0x28a>
			{
				NewVelocity[i] = planeCenter[i] + sqrtPlane * planeOptVelocity[i];
80003f26:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003f2a:	a3 68       	lsl	r8,0x2
80003f2c:	ee f9 ff 38 	ld.w	r9,r7[-200]
80003f30:	10 09       	add	r9,r8
80003f32:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003f36:	a3 68       	lsl	r8,0x2
80003f38:	ee 08 00 08 	add	r8,r7,r8
80003f3c:	f0 fa ff b8 	ld.w	r10,r8[-72]
80003f40:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003f44:	a3 68       	lsl	r8,0x2
80003f46:	ee 08 00 08 	add	r8,r7,r8
80003f4a:	f0 fb ff ac 	ld.w	r11,r8[-84]
80003f4e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003f52:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80003f56:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80003f5a:	93 08       	st.w	r9[0x0],r8
			{
				NewVelocity[i] = planeCenter[i];
			}
		}else{
			float sqrtPlane = fast_sqrt(planeRadiusSq / planeOptVelocityLengthSq);
			for(i=0;i<3;i++)
80003f5c:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003f60:	2f f8       	sub	r8,-1
80003f62:	ef 68 ff c7 	st.b	r7[-57],r8
80003f66:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003f6a:	30 28       	mov	r8,2
80003f6c:	f0 09 18 00 	cp.b	r9,r8
80003f70:	fe 9a ff db 	brle	80003f26 <linearProgram2+0x24a>
80003f74:	cf 48       	rjmp	8000415c <linearProgram2+0x480>
			}
		}
	}else{
		/* Project point optVelocity on plane ind. */
		float diffPtsVel[3];
		for(i=0;i<3;i++)
80003f76:	30 08       	mov	r8,0
80003f78:	ef 68 ff c7 	st.b	r7[-57],r8
80003f7c:	c2 78       	rjmp	80003fca <linearProgram2+0x2ee>
		{
			diffPtsVel[i] = planes[ind].point[i]-OptimalVelocity[i];
80003f7e:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80003f82:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003f86:	12 98       	mov	r8,r9
80003f88:	a1 78       	lsl	r8,0x1
80003f8a:	12 08       	add	r8,r9
80003f8c:	a3 78       	lsl	r8,0x3
80003f8e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003f92:	f2 08 00 08 	add	r8,r9,r8
80003f96:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80003f9a:	2f d9       	sub	r9,-3
80003f9c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003fa0:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003fa4:	a3 68       	lsl	r8,0x2
80003fa6:	ee fb ff 3c 	ld.w	r11,r7[-196]
80003faa:	f6 08 00 08 	add	r8,r11,r8
80003fae:	70 08       	ld.w	r8,r8[0x0]
80003fb0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003fb4:	f4 08 15 02 	lsl	r8,r10,0x2
80003fb8:	ee 08 00 08 	add	r8,r7,r8
80003fbc:	f1 49 ff a0 	st.w	r8[-96],r9
			}
		}
	}else{
		/* Project point optVelocity on plane ind. */
		float diffPtsVel[3];
		for(i=0;i<3;i++)
80003fc0:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003fc4:	2f f8       	sub	r8,-1
80003fc6:	ef 68 ff c7 	st.b	r7[-57],r8
80003fca:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003fce:	30 28       	mov	r8,2
80003fd0:	f0 09 18 00 	cp.b	r9,r8
80003fd4:	fe 9a ff d5 	brle	80003f7e <linearProgram2+0x2a2>
		{
			diffPtsVel[i] = planes[ind].point[i]-OptimalVelocity[i];
		}
		float scalarProduct = scalar_product(diffPtsVel,planes[ind].normal);
80003fd8:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003fdc:	12 98       	mov	r8,r9
80003fde:	a1 78       	lsl	r8,0x1
80003fe0:	12 08       	add	r8,r9
80003fe2:	a3 78       	lsl	r8,0x3
80003fe4:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003fe8:	f2 08 00 08 	add	r8,r9,r8
80003fec:	10 99       	mov	r9,r8
80003fee:	ee c8 00 60 	sub	r8,r7,96
80003ff2:	12 9b       	mov	r11,r9
80003ff4:	10 9c       	mov	r12,r8
80003ff6:	fe b0 f4 4b 	rcall	8000288c <scalar_product>
80003ffa:	18 98       	mov	r8,r12
80003ffc:	ef 48 ff e8 	st.w	r7[-24],r8
		for(i=0;i<3;i++)
80004000:	30 08       	mov	r8,0
80004002:	ef 68 ff c7 	st.b	r7[-57],r8
80004006:	c2 a8       	rjmp	8000405a <linearProgram2+0x37e>
		{
			NewVelocity[i] = OptimalVelocity[i] + scalarProduct * planes[ind].normal[i];
80004008:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000400c:	a3 68       	lsl	r8,0x2
8000400e:	ee f9 ff 38 	ld.w	r9,r7[-200]
80004012:	f2 08 00 0a 	add	r10,r9,r8
80004016:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000401a:	a3 68       	lsl	r8,0x2
8000401c:	ee f9 ff 3c 	ld.w	r9,r7[-196]
80004020:	f2 08 00 08 	add	r8,r9,r8
80004024:	70 0b       	ld.w	r11,r8[0x0]
80004026:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000402a:	12 98       	mov	r8,r9
8000402c:	a1 78       	lsl	r8,0x1
8000402e:	12 08       	add	r8,r9
80004030:	a3 78       	lsl	r8,0x3
80004032:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004036:	f2 08 00 08 	add	r8,r9,r8
8000403a:	ef 29 ff c7 	ld.sb	r9,r7[-57]
8000403e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004042:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004046:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000404a:	e5 a0 08 b8 	cop	cp0,cr8,cr11,cr8,0x40
8000404e:	95 08       	st.w	r10[0x0],r8
		for(i=0;i<3;i++)
		{
			diffPtsVel[i] = planes[ind].point[i]-OptimalVelocity[i];
		}
		float scalarProduct = scalar_product(diffPtsVel,planes[ind].normal);
		for(i=0;i<3;i++)
80004050:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80004054:	2f f8       	sub	r8,-1
80004056:	ef 68 ff c7 	st.b	r7[-57],r8
8000405a:	ef 39 ff c7 	ld.ub	r9,r7[-57]
8000405e:	30 28       	mov	r8,2
80004060:	f0 09 18 00 	cp.b	r9,r8
80004064:	fe 9a ff d2 	brle	80004008 <linearProgram2+0x32c>
		{
			NewVelocity[i] = OptimalVelocity[i] + scalarProduct * planes[ind].normal[i];
		}
		/* If outside planeCircle, project on planeCircle. */
		if (vector_norm_sqr(NewVelocity) > radiusSq) {
80004068:	ee fc ff 38 	ld.w	r12,r7[-200]
8000406c:	fe b0 f5 e0 	rcall	80002c2c <vector_norm_sqr>
80004070:	18 9a       	mov	r10,r12
80004072:	30 18       	mov	r8,1
80004074:	ee f9 ff d0 	ld.w	r9,r7[-48]
80004078:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000407c:	e0 8c 00 04 	brvs	80004084 <linearProgram2+0x3a8>
80004080:	e0 89 00 03 	brgt	80004086 <linearProgram2+0x3aa>
80004084:	30 08       	mov	r8,0
80004086:	5c 58       	castu.b	r8
80004088:	c6 a0       	breq	8000415c <linearProgram2+0x480>
			float planeResult[3];
			for(i=0;i<3;i++)
8000408a:	30 08       	mov	r8,0
8000408c:	ef 68 ff c7 	st.b	r7[-57],r8
80004090:	c1 f8       	rjmp	800040ce <linearProgram2+0x3f2>
			{
				planeResult[i] = NewVelocity[i] - planeCenter[i];
80004092:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80004096:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000409a:	a3 68       	lsl	r8,0x2
8000409c:	ee f9 ff 38 	ld.w	r9,r7[-200]
800040a0:	f2 08 00 08 	add	r8,r9,r8
800040a4:	70 09       	ld.w	r9,r8[0x0]
800040a6:	ef 28 ff c7 	ld.sb	r8,r7[-57]
800040aa:	a3 68       	lsl	r8,0x2
800040ac:	ee 08 00 08 	add	r8,r7,r8
800040b0:	f0 f8 ff b8 	ld.w	r8,r8[-72]
800040b4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800040b8:	f4 08 15 02 	lsl	r8,r10,0x2
800040bc:	ee 08 00 08 	add	r8,r7,r8
800040c0:	f1 49 ff 94 	st.w	r8[-108],r9
			NewVelocity[i] = OptimalVelocity[i] + scalarProduct * planes[ind].normal[i];
		}
		/* If outside planeCircle, project on planeCircle. */
		if (vector_norm_sqr(NewVelocity) > radiusSq) {
			float planeResult[3];
			for(i=0;i<3;i++)
800040c4:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800040c8:	2f f8       	sub	r8,-1
800040ca:	ef 68 ff c7 	st.b	r7[-57],r8
800040ce:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800040d2:	30 28       	mov	r8,2
800040d4:	f0 09 18 00 	cp.b	r9,r8
800040d8:	fe 9a ff dd 	brle	80004092 <linearProgram2+0x3b6>
			{
				planeResult[i] = NewVelocity[i] - planeCenter[i];
			}
			float planeResultLengthSq = vector_norm_sqr(planeResult);
800040dc:	ee c8 00 6c 	sub	r8,r7,108
800040e0:	10 9c       	mov	r12,r8
800040e2:	fe b0 f5 a5 	rcall	80002c2c <vector_norm_sqr>
800040e6:	18 98       	mov	r8,r12
800040e8:	ef 48 ff ec 	st.w	r7[-20],r8
			
			float planeSqrt = fast_sqrt(planeRadiusSq / planeResultLengthSq);
800040ec:	ee fb ff ec 	ld.w	r11,r7[-20]
800040f0:	ee fc ff d4 	ld.w	r12,r7[-44]
800040f4:	f0 16 00 08 	mcall	r6[32]
800040f8:	18 98       	mov	r8,r12
800040fa:	10 9c       	mov	r12,r8
800040fc:	fe b0 f5 2e 	rcall	80002b58 <fast_sqrt>
80004100:	18 98       	mov	r8,r12
80004102:	ef 48 ff f0 	st.w	r7[-16],r8
			for(i=0;i<3;i++)
80004106:	30 08       	mov	r8,0
80004108:	ef 68 ff c7 	st.b	r7[-57],r8
8000410c:	c2 18       	rjmp	8000414e <linearProgram2+0x472>
			{
				NewVelocity[i] = planeCenter[i] + planeSqrt * planeResult[i];
8000410e:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004112:	a3 68       	lsl	r8,0x2
80004114:	ee f9 ff 38 	ld.w	r9,r7[-200]
80004118:	10 09       	add	r9,r8
8000411a:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000411e:	a3 68       	lsl	r8,0x2
80004120:	ee 08 00 08 	add	r8,r7,r8
80004124:	f0 fa ff b8 	ld.w	r10,r8[-72]
80004128:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000412c:	a3 68       	lsl	r8,0x2
8000412e:	ee 08 00 08 	add	r8,r7,r8
80004132:	f0 fb ff 94 	ld.w	r11,r8[-108]
80004136:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000413a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000413e:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80004142:	93 08       	st.w	r9[0x0],r8
				planeResult[i] = NewVelocity[i] - planeCenter[i];
			}
			float planeResultLengthSq = vector_norm_sqr(planeResult);
			
			float planeSqrt = fast_sqrt(planeRadiusSq / planeResultLengthSq);
			for(i=0;i<3;i++)
80004144:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80004148:	2f f8       	sub	r8,-1
8000414a:	ef 68 ff c7 	st.b	r7[-57],r8
8000414e:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80004152:	30 28       	mov	r8,2
80004154:	f0 09 18 00 	cp.b	r9,r8
80004158:	fe 9a ff db 	brle	8000410e <linearProgram2+0x432>
			}
		}
	}
	
	int8_t index;
	for (index=0;index<ind;index++)
8000415c:	30 08       	mov	r8,0
8000415e:	ef 68 ff db 	st.b	r7[-37],r8
80004162:	e0 8f 02 6c 	bral	8000463a <linearProgram2+0x95e>
	{
		float diffPtsNewVel[3];
		for (i=0;i<3;i++)
80004166:	30 08       	mov	r8,0
80004168:	ef 68 ff c7 	st.b	r7[-57],r8
8000416c:	c2 78       	rjmp	800041ba <linearProgram2+0x4de>
		{
			diffPtsNewVel[i] = planes[index].point[i] - NewVelocity[i];
8000416e:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80004172:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004176:	12 98       	mov	r8,r9
80004178:	a1 78       	lsl	r8,0x1
8000417a:	12 08       	add	r8,r9
8000417c:	a3 78       	lsl	r8,0x3
8000417e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004182:	f2 08 00 08 	add	r8,r9,r8
80004186:	ef 29 ff c7 	ld.sb	r9,r7[-57]
8000418a:	2f d9       	sub	r9,-3
8000418c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004190:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004194:	a3 68       	lsl	r8,0x2
80004196:	ee fb ff 38 	ld.w	r11,r7[-200]
8000419a:	f6 08 00 08 	add	r8,r11,r8
8000419e:	70 08       	ld.w	r8,r8[0x0]
800041a0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800041a4:	f4 08 15 02 	lsl	r8,r10,0x2
800041a8:	ee 08 00 08 	add	r8,r7,r8
800041ac:	f1 49 ff 88 	st.w	r8[-120],r9
	
	int8_t index;
	for (index=0;index<ind;index++)
	{
		float diffPtsNewVel[3];
		for (i=0;i<3;i++)
800041b0:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800041b4:	2f f8       	sub	r8,-1
800041b6:	ef 68 ff c7 	st.b	r7[-57],r8
800041ba:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800041be:	30 28       	mov	r8,2
800041c0:	f0 09 18 00 	cp.b	r9,r8
800041c4:	fe 9a ff d5 	brle	8000416e <linearProgram2+0x492>
		{
			diffPtsNewVel[i] = planes[index].point[i] - NewVelocity[i];
		}
		if (scalar_product(planes[index].normal,diffPtsNewVel)>0.0)
800041c8:	ef 29 ff db 	ld.sb	r9,r7[-37]
800041cc:	12 98       	mov	r8,r9
800041ce:	a1 78       	lsl	r8,0x1
800041d0:	12 08       	add	r8,r9
800041d2:	a3 78       	lsl	r8,0x3
800041d4:	ee f9 ff 48 	ld.w	r9,r7[-184]
800041d8:	f2 08 00 08 	add	r8,r9,r8
800041dc:	ee c9 00 78 	sub	r9,r7,120
800041e0:	12 9b       	mov	r11,r9
800041e2:	10 9c       	mov	r12,r8
800041e4:	fe b0 f3 54 	rcall	8000288c <scalar_product>
800041e8:	18 9a       	mov	r10,r12
800041ea:	30 18       	mov	r8,1
800041ec:	30 09       	mov	r9,0
800041ee:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800041f2:	e0 8c 00 04 	brvs	800041fa <linearProgram2+0x51e>
800041f6:	e0 89 00 03 	brgt	800041fc <linearProgram2+0x520>
800041fa:	30 08       	mov	r8,0
800041fc:	5c 58       	castu.b	r8
800041fe:	e0 80 02 19 	breq	80004630 <linearProgram2+0x954>
		{
			/* Result does not satisfy constraint index. Compute new optimal result. */
			/* Compute intersection line of plane index and plane ind. */
			float crossProduct[3];
			CROSS(planes[index].normal,planes[ind].normal,crossProduct);
80004202:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004206:	12 98       	mov	r8,r9
80004208:	a1 78       	lsl	r8,0x1
8000420a:	12 08       	add	r8,r9
8000420c:	a3 78       	lsl	r8,0x3
8000420e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004212:	f2 08 00 08 	add	r8,r9,r8
80004216:	70 1a       	ld.w	r10,r8[0x4]
80004218:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000421c:	12 98       	mov	r8,r9
8000421e:	a1 78       	lsl	r8,0x1
80004220:	12 08       	add	r8,r9
80004222:	a3 78       	lsl	r8,0x3
80004224:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004228:	f2 08 00 08 	add	r8,r9,r8
8000422c:	70 28       	ld.w	r8,r8[0x8]
8000422e:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004232:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004236:	12 98       	mov	r8,r9
80004238:	a1 78       	lsl	r8,0x1
8000423a:	12 08       	add	r8,r9
8000423c:	a3 78       	lsl	r8,0x3
8000423e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004242:	f2 08 00 08 	add	r8,r9,r8
80004246:	70 2b       	ld.w	r11,r8[0x8]
80004248:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000424c:	12 98       	mov	r8,r9
8000424e:	a1 78       	lsl	r8,0x1
80004250:	12 08       	add	r8,r9
80004252:	a3 78       	lsl	r8,0x3
80004254:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004258:	f2 08 00 08 	add	r8,r9,r8
8000425c:	70 18       	ld.w	r8,r8[0x4]
8000425e:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004262:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004266:	ef 48 ff 7c 	st.w	r7[-132],r8
8000426a:	ef 29 ff db 	ld.sb	r9,r7[-37]
8000426e:	12 98       	mov	r8,r9
80004270:	a1 78       	lsl	r8,0x1
80004272:	12 08       	add	r8,r9
80004274:	a3 78       	lsl	r8,0x3
80004276:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000427a:	f2 08 00 08 	add	r8,r9,r8
8000427e:	70 2a       	ld.w	r10,r8[0x8]
80004280:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004284:	12 98       	mov	r8,r9
80004286:	a1 78       	lsl	r8,0x1
80004288:	12 08       	add	r8,r9
8000428a:	a3 78       	lsl	r8,0x3
8000428c:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004290:	f2 08 00 08 	add	r8,r9,r8
80004294:	70 08       	ld.w	r8,r8[0x0]
80004296:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000429a:	ef 29 ff db 	ld.sb	r9,r7[-37]
8000429e:	12 98       	mov	r8,r9
800042a0:	a1 78       	lsl	r8,0x1
800042a2:	12 08       	add	r8,r9
800042a4:	a3 78       	lsl	r8,0x3
800042a6:	ee f9 ff 48 	ld.w	r9,r7[-184]
800042aa:	f2 08 00 08 	add	r8,r9,r8
800042ae:	70 0b       	ld.w	r11,r8[0x0]
800042b0:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800042b4:	12 98       	mov	r8,r9
800042b6:	a1 78       	lsl	r8,0x1
800042b8:	12 08       	add	r8,r9
800042ba:	a3 78       	lsl	r8,0x3
800042bc:	ee f9 ff 48 	ld.w	r9,r7[-184]
800042c0:	f2 08 00 08 	add	r8,r9,r8
800042c4:	70 28       	ld.w	r8,r8[0x8]
800042c6:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
800042ca:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800042ce:	ef 48 ff 80 	st.w	r7[-128],r8
800042d2:	ef 29 ff db 	ld.sb	r9,r7[-37]
800042d6:	12 98       	mov	r8,r9
800042d8:	a1 78       	lsl	r8,0x1
800042da:	12 08       	add	r8,r9
800042dc:	a3 78       	lsl	r8,0x3
800042de:	ee f9 ff 48 	ld.w	r9,r7[-184]
800042e2:	f2 08 00 08 	add	r8,r9,r8
800042e6:	70 0a       	ld.w	r10,r8[0x0]
800042e8:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800042ec:	12 98       	mov	r8,r9
800042ee:	a1 78       	lsl	r8,0x1
800042f0:	12 08       	add	r8,r9
800042f2:	a3 78       	lsl	r8,0x3
800042f4:	ee f9 ff 48 	ld.w	r9,r7[-184]
800042f8:	f2 08 00 08 	add	r8,r9,r8
800042fc:	70 18       	ld.w	r8,r8[0x4]
800042fe:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004302:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004306:	12 98       	mov	r8,r9
80004308:	a1 78       	lsl	r8,0x1
8000430a:	12 08       	add	r8,r9
8000430c:	a3 78       	lsl	r8,0x3
8000430e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004312:	f2 08 00 08 	add	r8,r9,r8
80004316:	70 1b       	ld.w	r11,r8[0x4]
80004318:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000431c:	12 98       	mov	r8,r9
8000431e:	a1 78       	lsl	r8,0x1
80004320:	12 08       	add	r8,r9
80004322:	a3 78       	lsl	r8,0x3
80004324:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004328:	f2 08 00 08 	add	r8,r9,r8
8000432c:	70 08       	ld.w	r8,r8[0x0]
8000432e:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004332:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004336:	ef 48 ff 84 	st.w	r7[-124],r8
			
			if (vector_norm_sqr(crossProduct) <= RVO_EPSILON)
8000433a:	ee c8 00 84 	sub	r8,r7,132
8000433e:	10 9c       	mov	r12,r8
80004340:	fe b0 f4 76 	rcall	80002c2c <vector_norm_sqr>
80004344:	18 98       	mov	r8,r12
80004346:	10 9c       	mov	r12,r8
80004348:	f0 16 00 02 	mcall	r6[8]
8000434c:	14 98       	mov	r8,r10
8000434e:	16 99       	mov	r9,r11
80004350:	30 05       	mov	r5,0
80004352:	e0 6a 43 2d 	mov	r10,17197
80004356:	ea 1a eb 1c 	orh	r10,0xeb1c
8000435a:	e0 6b 36 e2 	mov	r11,14050
8000435e:	ea 1b 3f 1a 	orh	r11,0x3f1a
80004362:	f0 16 00 82 	mcall	r6[520]
80004366:	18 98       	mov	r8,r12
80004368:	58 08       	cp.w	r8,0
8000436a:	c0 20       	breq	8000436e <linearProgram2+0x692>
8000436c:	30 15       	mov	r5,1
8000436e:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80004372:	c0 30       	breq	80004378 <linearProgram2+0x69c>
			{
				/* Planes ind and index are (almost) parallel, and plane index fully invalidates plane ind. */
				return false;
80004374:	30 08       	mov	r8,0
80004376:	c6 b9       	rjmp	8000464c <linearProgram2+0x970>
			}
			
			line_t line;
			float normCrossProduct = vector_norm(crossProduct);
80004378:	ee c8 00 84 	sub	r8,r7,132
8000437c:	10 9c       	mov	r12,r8
8000437e:	fe b0 f4 6f 	rcall	80002c5c <vector_norm>
80004382:	18 98       	mov	r8,r12
80004384:	ef 48 ff f4 	st.w	r7[-12],r8
			for (i=0;i<3;i++)
80004388:	30 08       	mov	r8,0
8000438a:	ef 68 ff c7 	st.b	r7[-57],r8
8000438e:	c1 c8       	rjmp	800043c6 <linearProgram2+0x6ea>
			{
				line.direction[i] = crossProduct[i] / normCrossProduct;
80004390:	ef 25 ff c7 	ld.sb	r5,r7[-57]
80004394:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004398:	a3 68       	lsl	r8,0x2
8000439a:	ee 08 00 08 	add	r8,r7,r8
8000439e:	f0 f8 ff 7c 	ld.w	r8,r8[-132]
800043a2:	ee fb ff f4 	ld.w	r11,r7[-12]
800043a6:	10 9c       	mov	r12,r8
800043a8:	f0 16 00 08 	mcall	r6[32]
800043ac:	18 98       	mov	r8,r12
800043ae:	10 99       	mov	r9,r8
800043b0:	ea 08 15 02 	lsl	r8,r5,0x2
800043b4:	ee 08 00 08 	add	r8,r7,r8
800043b8:	f1 49 ff 64 	st.w	r8[-156],r9
				return false;
			}
			
			line_t line;
			float normCrossProduct = vector_norm(crossProduct);
			for (i=0;i<3;i++)
800043bc:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800043c0:	2f f8       	sub	r8,-1
800043c2:	ef 68 ff c7 	st.b	r7[-57],r8
800043c6:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800043ca:	30 28       	mov	r8,2
800043cc:	f0 09 18 00 	cp.b	r9,r8
800043d0:	fe 9a ff e0 	brle	80004390 <linearProgram2+0x6b4>
			{
				line.direction[i] = crossProduct[i] / normCrossProduct;
			}
			float lineNormal[3];
			CROSS(line.direction,planes[ind].normal,lineNormal);
800043d4:	ee fa ff 68 	ld.w	r10,r7[-152]
800043d8:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800043dc:	12 98       	mov	r8,r9
800043de:	a1 78       	lsl	r8,0x1
800043e0:	12 08       	add	r8,r9
800043e2:	a3 78       	lsl	r8,0x3
800043e4:	ee f9 ff 48 	ld.w	r9,r7[-184]
800043e8:	f2 08 00 08 	add	r8,r9,r8
800043ec:	70 28       	ld.w	r8,r8[0x8]
800043ee:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
800043f2:	ee fb ff 6c 	ld.w	r11,r7[-148]
800043f6:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800043fa:	12 98       	mov	r8,r9
800043fc:	a1 78       	lsl	r8,0x1
800043fe:	12 08       	add	r8,r9
80004400:	a3 78       	lsl	r8,0x3
80004402:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004406:	f2 08 00 08 	add	r8,r9,r8
8000440a:	70 18       	ld.w	r8,r8[0x4]
8000440c:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004410:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004414:	ef 48 ff 58 	st.w	r7[-168],r8
80004418:	ee fa ff 6c 	ld.w	r10,r7[-148]
8000441c:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004420:	12 98       	mov	r8,r9
80004422:	a1 78       	lsl	r8,0x1
80004424:	12 08       	add	r8,r9
80004426:	a3 78       	lsl	r8,0x3
80004428:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000442c:	f2 08 00 08 	add	r8,r9,r8
80004430:	70 08       	ld.w	r8,r8[0x0]
80004432:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004436:	ee fb ff 64 	ld.w	r11,r7[-156]
8000443a:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000443e:	12 98       	mov	r8,r9
80004440:	a1 78       	lsl	r8,0x1
80004442:	12 08       	add	r8,r9
80004444:	a3 78       	lsl	r8,0x3
80004446:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000444a:	f2 08 00 08 	add	r8,r9,r8
8000444e:	70 28       	ld.w	r8,r8[0x8]
80004450:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004454:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004458:	ef 48 ff 5c 	st.w	r7[-164],r8
8000445c:	ee fa ff 64 	ld.w	r10,r7[-156]
80004460:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004464:	12 98       	mov	r8,r9
80004466:	a1 78       	lsl	r8,0x1
80004468:	12 08       	add	r8,r9
8000446a:	a3 78       	lsl	r8,0x3
8000446c:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004470:	f2 08 00 08 	add	r8,r9,r8
80004474:	70 18       	ld.w	r8,r8[0x4]
80004476:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000447a:	ee fb ff 68 	ld.w	r11,r7[-152]
8000447e:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004482:	12 98       	mov	r8,r9
80004484:	a1 78       	lsl	r8,0x1
80004486:	12 08       	add	r8,r9
80004488:	a3 78       	lsl	r8,0x3
8000448a:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000448e:	f2 08 00 08 	add	r8,r9,r8
80004492:	70 08       	ld.w	r8,r8[0x0]
80004494:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004498:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000449c:	ef 48 ff 60 	st.w	r7[-160],r8
			
			float diffPoints[3];
			for (i=0;i<3;i++)
800044a0:	30 08       	mov	r8,0
800044a2:	ef 68 ff c7 	st.b	r7[-57],r8
800044a6:	c2 e8       	rjmp	80004502 <linearProgram2+0x826>
			{
				diffPoints[i] = planes[index].point[i] - planes[ind].point[i];
800044a8:	ef 2a ff c7 	ld.sb	r10,r7[-57]
800044ac:	ef 29 ff db 	ld.sb	r9,r7[-37]
800044b0:	12 98       	mov	r8,r9
800044b2:	a1 78       	lsl	r8,0x1
800044b4:	12 08       	add	r8,r9
800044b6:	a3 78       	lsl	r8,0x3
800044b8:	ee f9 ff 48 	ld.w	r9,r7[-184]
800044bc:	f2 08 00 08 	add	r8,r9,r8
800044c0:	ef 29 ff c7 	ld.sb	r9,r7[-57]
800044c4:	2f d9       	sub	r9,-3
800044c6:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
800044ca:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800044ce:	12 98       	mov	r8,r9
800044d0:	a1 78       	lsl	r8,0x1
800044d2:	12 08       	add	r8,r9
800044d4:	a3 78       	lsl	r8,0x3
800044d6:	ee f9 ff 48 	ld.w	r9,r7[-184]
800044da:	f2 08 00 08 	add	r8,r9,r8
800044de:	ef 29 ff c7 	ld.sb	r9,r7[-57]
800044e2:	2f d9       	sub	r9,-3
800044e4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800044e8:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
800044ec:	f4 08 15 02 	lsl	r8,r10,0x2
800044f0:	ee 08 00 08 	add	r8,r7,r8
800044f4:	f1 49 ff 4c 	st.w	r8[-180],r9
			}
			float lineNormal[3];
			CROSS(line.direction,planes[ind].normal,lineNormal);
			
			float diffPoints[3];
			for (i=0;i<3;i++)
800044f8:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800044fc:	2f f8       	sub	r8,-1
800044fe:	ef 68 ff c7 	st.b	r7[-57],r8
80004502:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80004506:	30 28       	mov	r8,2
80004508:	f0 09 18 00 	cp.b	r9,r8
8000450c:	fe 9a ff ce 	brle	800044a8 <linearProgram2+0x7cc>
			{
				diffPoints[i] = planes[index].point[i] - planes[ind].point[i];
			}
			float scalarProductPointsNormal = scalar_product(diffPoints,planes[index].normal);
80004510:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004514:	12 98       	mov	r8,r9
80004516:	a1 78       	lsl	r8,0x1
80004518:	12 08       	add	r8,r9
8000451a:	a3 78       	lsl	r8,0x3
8000451c:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004520:	f2 08 00 08 	add	r8,r9,r8
80004524:	10 99       	mov	r9,r8
80004526:	ee c8 00 b4 	sub	r8,r7,180
8000452a:	12 9b       	mov	r11,r9
8000452c:	10 9c       	mov	r12,r8
8000452e:	fe b0 f1 af 	rcall	8000288c <scalar_product>
80004532:	18 98       	mov	r8,r12
80004534:	ef 48 ff f8 	st.w	r7[-8],r8
			float scalarProductNormals = scalar_product(lineNormal,planes[index].normal);
80004538:	ef 29 ff db 	ld.sb	r9,r7[-37]
8000453c:	12 98       	mov	r8,r9
8000453e:	a1 78       	lsl	r8,0x1
80004540:	12 08       	add	r8,r9
80004542:	a3 78       	lsl	r8,0x3
80004544:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004548:	f2 08 00 08 	add	r8,r9,r8
8000454c:	10 99       	mov	r9,r8
8000454e:	ee c8 00 a8 	sub	r8,r7,168
80004552:	12 9b       	mov	r11,r9
80004554:	10 9c       	mov	r12,r8
80004556:	fe b0 f1 9b 	rcall	8000288c <scalar_product>
8000455a:	18 98       	mov	r8,r12
8000455c:	ef 48 ff fc 	st.w	r7[-4],r8
			for(i=0;i<3;i++)
80004560:	30 08       	mov	r8,0
80004562:	ef 68 ff c7 	st.b	r7[-57],r8
80004566:	c3 18       	rjmp	800045c8 <linearProgram2+0x8ec>
			{
				line.point[i] = planes[ind].point[i] + (scalarProductPointsNormal / scalarProductNormals) * lineNormal[i];
80004568:	ef 25 ff c7 	ld.sb	r5,r7[-57]
8000456c:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004570:	12 98       	mov	r8,r9
80004572:	a1 78       	lsl	r8,0x1
80004574:	12 08       	add	r8,r9
80004576:	a3 78       	lsl	r8,0x3
80004578:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000457c:	f2 08 00 08 	add	r8,r9,r8
80004580:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80004584:	2f d9       	sub	r9,-3
80004586:	f0 09 03 23 	ld.w	r3,r8[r9<<0x2]
8000458a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000458e:	ee fc ff f8 	ld.w	r12,r7[-8]
80004592:	f0 16 00 08 	mcall	r6[32]
80004596:	18 98       	mov	r8,r12
80004598:	10 99       	mov	r9,r8
8000459a:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000459e:	a3 68       	lsl	r8,0x2
800045a0:	ee 08 00 08 	add	r8,r7,r8
800045a4:	f0 f8 ff 58 	ld.w	r8,r8[-168]
800045a8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800045ac:	e5 a0 09 38 	cop	cp0,cr9,cr3,cr8,0x40
800045b0:	ea c8 ff fd 	sub	r8,r5,-3
800045b4:	a3 68       	lsl	r8,0x2
800045b6:	ee 08 00 08 	add	r8,r7,r8
800045ba:	f1 49 ff 64 	st.w	r8[-156],r9
			{
				diffPoints[i] = planes[index].point[i] - planes[ind].point[i];
			}
			float scalarProductPointsNormal = scalar_product(diffPoints,planes[index].normal);
			float scalarProductNormals = scalar_product(lineNormal,planes[index].normal);
			for(i=0;i<3;i++)
800045be:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800045c2:	2f f8       	sub	r8,-1
800045c4:	ef 68 ff c7 	st.b	r7[-57],r8
800045c8:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800045cc:	30 28       	mov	r8,2
800045ce:	f0 09 18 00 	cp.b	r9,r8
800045d2:	fe 9a ff cb 	brle	80004568 <linearProgram2+0x88c>
			{
				line.point[i] = planes[ind].point[i] + (scalarProductPointsNormal / scalarProductNormals) * lineNormal[i];
			}
			
			if (!(linearProgram1(planes,index,line,maxSpeed,OptimalVelocity,NewVelocity,directionOpt)))
800045d6:	ef 38 ff 34 	ld.ub	r8,r7[-204]
800045da:	ef 2c ff db 	ld.sb	r12,r7[-37]
800045de:	1a d8       	st.w	--sp,r8
800045e0:	20 6d       	sub	sp,24
800045e2:	1a 98       	mov	r8,sp
800045e4:	10 9a       	mov	r10,r8
800045e6:	ee cb 00 9c 	sub	r11,r7,156
800045ea:	f4 c8 00 00 	sub	r8,r10,0
800045ee:	f6 c9 00 00 	sub	r9,r11,0
800045f2:	72 0e       	ld.w	lr,r9[0x0]
800045f4:	91 0e       	st.w	r8[0x0],lr
800045f6:	72 1e       	ld.w	lr,r9[0x4]
800045f8:	91 1e       	st.w	r8[0x4],lr
800045fa:	72 2e       	ld.w	lr,r9[0x8]
800045fc:	91 2e       	st.w	r8[0x8],lr
800045fe:	72 39       	ld.w	r9,r9[0xc]
80004600:	91 39       	st.w	r8[0xc],r9
80004602:	f6 e8 00 10 	ld.d	r8,r11[16]
80004606:	f4 e9 00 10 	st.d	r10[16],r8
8000460a:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000460e:	ee f9 ff 3c 	ld.w	r9,r7[-196]
80004612:	ee fa ff 40 	ld.w	r10,r7[-192]
80004616:	18 9b       	mov	r11,r12
80004618:	ee fc ff 48 	ld.w	r12,r7[-184]
8000461c:	f0 16 01 db 	mcall	r6[1900]
80004620:	2f 9d       	sub	sp,-28
80004622:	18 98       	mov	r8,r12
80004624:	ec 18 00 01 	eorl	r8,0x1
80004628:	5c 58       	castu.b	r8
8000462a:	c0 30       	breq	80004630 <linearProgram2+0x954>
			{
				return false;
8000462c:	30 08       	mov	r8,0
8000462e:	c0 f8       	rjmp	8000464c <linearProgram2+0x970>
			}
		}
	}
	
	int8_t index;
	for (index=0;index<ind;index++)
80004630:	ef 38 ff db 	ld.ub	r8,r7[-37]
80004634:	2f f8       	sub	r8,-1
80004636:	ef 68 ff db 	st.b	r7[-37],r8
8000463a:	ef 39 ff db 	ld.ub	r9,r7[-37]
8000463e:	ef 38 ff 44 	ld.ub	r8,r7[-188]
80004642:	f0 09 18 00 	cp.b	r9,r8
80004646:	fe 95 fd 90 	brlt	80004166 <linearProgram2+0x48a>
			{
				return false;
			}
		}
	}
	return true;
8000464a:	30 18       	mov	r8,1
}
8000464c:	10 9c       	mov	r12,r8
8000464e:	2c dd       	sub	sp,-204
80004650:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80004654:	80 00       	ld.sh	r0,r0[0x0]
80004656:	3b 6e       	mov	lr,-74

80004658 <linearProgram3>:

float linearProgram3(plane_t planes[], float OptimalVelocity[], float maxSpeed, float NewVelocity[], bool directionOpt)
{
80004658:	eb cd 40 e0 	pushm	r5-r7,lr
8000465c:	1a 97       	mov	r7,sp
8000465e:	20 ed       	sub	sp,56
80004660:	fe f6 02 e0 	ld.w	r6,pc[736]
80004664:	1e 26       	rsub	r6,pc
80004666:	ef 4c ff d8 	st.w	r7[-40],r12
8000466a:	ef 4b ff d4 	st.w	r7[-44],r11
8000466e:	ef 4a ff d0 	st.w	r7[-48],r10
80004672:	ef 49 ff cc 	st.w	r7[-52],r9
80004676:	ef 68 ff c8 	st.b	r7[-56],r8
	int8_t i;
	
	if (directionOpt)
8000467a:	ef 39 ff c8 	ld.ub	r9,r7[-56]
8000467e:	30 08       	mov	r8,0
80004680:	f0 09 18 00 	cp.b	r9,r8
80004684:	c3 40       	breq	800046ec <linearProgram3+0x94>
	{
		/* Optimize direction. Note that the optimization velocity is of unit length in this case. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
80004686:	ee fc ff d4 	ld.w	r12,r7[-44]
8000468a:	fe b0 f2 e9 	rcall	80002c5c <vector_norm>
8000468e:	18 98       	mov	r8,r12
80004690:	ef 48 ff f8 	st.w	r7[-8],r8
		for(i=0;i<3;i++)
80004694:	30 08       	mov	r8,0
80004696:	ef 68 ff f6 	st.b	r7[-10],r8
8000469a:	c2 18       	rjmp	800046dc <linearProgram3+0x84>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
8000469c:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800046a0:	a3 68       	lsl	r8,0x2
800046a2:	ee f9 ff cc 	ld.w	r9,r7[-52]
800046a6:	f2 08 00 05 	add	r5,r9,r8
800046aa:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800046ae:	a3 68       	lsl	r8,0x2
800046b0:	ee f9 ff d4 	ld.w	r9,r7[-44]
800046b4:	f2 08 00 08 	add	r8,r9,r8
800046b8:	70 08       	ld.w	r8,r8[0x0]
800046ba:	ee fb ff f8 	ld.w	r11,r7[-8]
800046be:	10 9c       	mov	r12,r8
800046c0:	f0 16 00 08 	mcall	r6[32]
800046c4:	18 98       	mov	r8,r12
800046c6:	10 99       	mov	r9,r8
800046c8:	ee f8 ff d0 	ld.w	r8,r7[-48]
800046cc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800046d0:	8b 08       	st.w	r5[0x0],r8
	
	if (directionOpt)
	{
		/* Optimize direction. Note that the optimization velocity is of unit length in this case. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
		for(i=0;i<3;i++)
800046d2:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800046d6:	2f f8       	sub	r8,-1
800046d8:	ef 68 ff f6 	st.b	r7[-10],r8
800046dc:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800046e0:	30 28       	mov	r8,2
800046e2:	f0 09 18 00 	cp.b	r9,r8
800046e6:	fe 9a ff db 	brle	8000469c <linearProgram3+0x44>
800046ea:	c6 98       	rjmp	800047bc <linearProgram3+0x164>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else if (vector_norm_sqr(OptimalVelocity) > SQR(maxSpeed)){
800046ec:	ee fc ff d4 	ld.w	r12,r7[-44]
800046f0:	fe b0 f2 9e 	rcall	80002c2c <vector_norm_sqr>
800046f4:	18 9a       	mov	r10,r12
800046f6:	ee f9 ff d0 	ld.w	r9,r7[-48]
800046fa:	ee f8 ff d0 	ld.w	r8,r7[-48]
800046fe:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80004702:	30 18       	mov	r8,1
80004704:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004708:	e0 8c 00 04 	brvs	80004710 <linearProgram3+0xb8>
8000470c:	e0 89 00 03 	brgt	80004712 <linearProgram3+0xba>
80004710:	30 08       	mov	r8,0
80004712:	5c 58       	castu.b	r8
80004714:	c3 40       	breq	8000477c <linearProgram3+0x124>
		/* Optimize closest point and outside circle. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
80004716:	ee fc ff d4 	ld.w	r12,r7[-44]
8000471a:	fe b0 f2 a1 	rcall	80002c5c <vector_norm>
8000471e:	18 98       	mov	r8,r12
80004720:	ef 48 ff fc 	st.w	r7[-4],r8
		for(i=0;i<3;i++)
80004724:	30 08       	mov	r8,0
80004726:	ef 68 ff f6 	st.b	r7[-10],r8
8000472a:	c2 18       	rjmp	8000476c <linearProgram3+0x114>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
8000472c:	ef 28 ff f6 	ld.sb	r8,r7[-10]
80004730:	a3 68       	lsl	r8,0x2
80004732:	ee f9 ff cc 	ld.w	r9,r7[-52]
80004736:	f2 08 00 05 	add	r5,r9,r8
8000473a:	ef 28 ff f6 	ld.sb	r8,r7[-10]
8000473e:	a3 68       	lsl	r8,0x2
80004740:	ee f9 ff d4 	ld.w	r9,r7[-44]
80004744:	f2 08 00 08 	add	r8,r9,r8
80004748:	70 08       	ld.w	r8,r8[0x0]
8000474a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000474e:	10 9c       	mov	r12,r8
80004750:	f0 16 00 08 	mcall	r6[32]
80004754:	18 98       	mov	r8,r12
80004756:	10 99       	mov	r9,r8
80004758:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000475c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80004760:	8b 08       	st.w	r5[0x0],r8
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else if (vector_norm_sqr(OptimalVelocity) > SQR(maxSpeed)){
		/* Optimize closest point and outside circle. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
		for(i=0;i<3;i++)
80004762:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004766:	2f f8       	sub	r8,-1
80004768:	ef 68 ff f6 	st.b	r7[-10],r8
8000476c:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80004770:	30 28       	mov	r8,2
80004772:	f0 09 18 00 	cp.b	r9,r8
80004776:	fe 9a ff db 	brle	8000472c <linearProgram3+0xd4>
8000477a:	c2 18       	rjmp	800047bc <linearProgram3+0x164>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else{
		for(i=0;i<3;i++)
8000477c:	30 08       	mov	r8,0
8000477e:	ef 68 ff f6 	st.b	r7[-10],r8
80004782:	c1 68       	rjmp	800047ae <linearProgram3+0x156>
		{
			NewVelocity[i] = OptimalVelocity[i];
80004784:	ef 28 ff f6 	ld.sb	r8,r7[-10]
80004788:	a3 68       	lsl	r8,0x2
8000478a:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000478e:	f2 08 00 08 	add	r8,r9,r8
80004792:	ef 29 ff f6 	ld.sb	r9,r7[-10]
80004796:	a3 69       	lsl	r9,0x2
80004798:	ee fa ff d4 	ld.w	r10,r7[-44]
8000479c:	f4 09 00 09 	add	r9,r10,r9
800047a0:	72 09       	ld.w	r9,r9[0x0]
800047a2:	91 09       	st.w	r8[0x0],r9
		for(i=0;i<3;i++)
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else{
		for(i=0;i<3;i++)
800047a4:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800047a8:	2f f8       	sub	r8,-1
800047aa:	ef 68 ff f6 	st.b	r7[-10],r8
800047ae:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800047b2:	30 28       	mov	r8,2
800047b4:	f0 09 18 00 	cp.b	r9,r8
800047b8:	fe 9a ff e6 	brle	80004784 <linearProgram3+0x12c>
		}
	}
	
	int8_t ind;
	
	for (ind=0;ind<centralData->number_of_neighbors;ind++)
800047bc:	30 08       	mov	r8,0
800047be:	ef 68 ff f7 	st.b	r7[-9],r8
800047c2:	ca a8       	rjmp	80004916 <linearProgram3+0x2be>
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
800047c4:	30 08       	mov	r8,0
800047c6:	ef 68 ff f6 	st.b	r7[-10],r8
800047ca:	c2 78       	rjmp	80004818 <linearProgram3+0x1c0>
		{
			diffPointVel[i] = planes[ind].point[i] - NewVelocity[i];
800047cc:	ef 2a ff f6 	ld.sb	r10,r7[-10]
800047d0:	ef 29 ff f7 	ld.sb	r9,r7[-9]
800047d4:	12 98       	mov	r8,r9
800047d6:	a1 78       	lsl	r8,0x1
800047d8:	12 08       	add	r8,r9
800047da:	a3 78       	lsl	r8,0x3
800047dc:	ee f9 ff d8 	ld.w	r9,r7[-40]
800047e0:	f2 08 00 08 	add	r8,r9,r8
800047e4:	ef 29 ff f6 	ld.sb	r9,r7[-10]
800047e8:	2f d9       	sub	r9,-3
800047ea:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800047ee:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800047f2:	a3 68       	lsl	r8,0x2
800047f4:	ee fb ff cc 	ld.w	r11,r7[-52]
800047f8:	f6 08 00 08 	add	r8,r11,r8
800047fc:	70 08       	ld.w	r8,r8[0x0]
800047fe:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80004802:	f4 08 15 02 	lsl	r8,r10,0x2
80004806:	ee 08 00 08 	add	r8,r7,r8
8000480a:	f1 49 ff e8 	st.w	r8[-24],r9
	int8_t ind;
	
	for (ind=0;ind<centralData->number_of_neighbors;ind++)
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
8000480e:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004812:	2f f8       	sub	r8,-1
80004814:	ef 68 ff f6 	st.b	r7[-10],r8
80004818:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000481c:	30 28       	mov	r8,2
8000481e:	f0 09 18 00 	cp.b	r9,r8
80004822:	fe 9a ff d5 	brle	800047cc <linearProgram3+0x174>
		{
			diffPointVel[i] = planes[ind].point[i] - NewVelocity[i];
		}
		if (scalar_product(planes[ind].normal, diffPointVel ) > 0.0)
80004826:	ef 29 ff f7 	ld.sb	r9,r7[-9]
8000482a:	12 98       	mov	r8,r9
8000482c:	a1 78       	lsl	r8,0x1
8000482e:	12 08       	add	r8,r9
80004830:	a3 78       	lsl	r8,0x3
80004832:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004836:	f2 08 00 08 	add	r8,r9,r8
8000483a:	ee c9 00 18 	sub	r9,r7,24
8000483e:	12 9b       	mov	r11,r9
80004840:	10 9c       	mov	r12,r8
80004842:	fe b0 f0 25 	rcall	8000288c <scalar_product>
80004846:	18 9a       	mov	r10,r12
80004848:	30 18       	mov	r8,1
8000484a:	30 09       	mov	r9,0
8000484c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004850:	e0 8c 00 04 	brvs	80004858 <linearProgram3+0x200>
80004854:	e0 89 00 03 	brgt	8000485a <linearProgram3+0x202>
80004858:	30 08       	mov	r8,0
8000485a:	5c 58       	castu.b	r8
8000485c:	c5 80       	breq	8000490c <linearProgram3+0x2b4>
		{
			/* Result does not satisfy constraint ind. Compute new optimal result. */
			float tempResult[3];
			for (i=0;i<3;i++)
8000485e:	30 08       	mov	r8,0
80004860:	ef 68 ff f6 	st.b	r7[-10],r8
80004864:	c1 58       	rjmp	8000488e <linearProgram3+0x236>
			{
				tempResult[i] = NewVelocity[i];
80004866:	ef 28 ff f6 	ld.sb	r8,r7[-10]
8000486a:	ef 29 ff f6 	ld.sb	r9,r7[-10]
8000486e:	a3 69       	lsl	r9,0x2
80004870:	ee fa ff cc 	ld.w	r10,r7[-52]
80004874:	f4 09 00 09 	add	r9,r10,r9
80004878:	72 09       	ld.w	r9,r9[0x0]
8000487a:	a3 68       	lsl	r8,0x2
8000487c:	ee 08 00 08 	add	r8,r7,r8
80004880:	f1 49 ff dc 	st.w	r8[-36],r9
		}
		if (scalar_product(planes[ind].normal, diffPointVel ) > 0.0)
		{
			/* Result does not satisfy constraint ind. Compute new optimal result. */
			float tempResult[3];
			for (i=0;i<3;i++)
80004884:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004888:	2f f8       	sub	r8,-1
8000488a:	ef 68 ff f6 	st.b	r7[-10],r8
8000488e:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80004892:	30 28       	mov	r8,2
80004894:	f0 09 18 00 	cp.b	r9,r8
80004898:	fe 9a ff e7 	brle	80004866 <linearProgram3+0x20e>
			{
				tempResult[i] = NewVelocity[i];
			}
			if (!(linearProgram2(planes,ind,maxSpeed,OptimalVelocity,NewVelocity,directionOpt)))
8000489c:	ef 38 ff c8 	ld.ub	r8,r7[-56]
800048a0:	ef 2b ff f7 	ld.sb	r11,r7[-9]
800048a4:	1a d8       	st.w	--sp,r8
800048a6:	ee f8 ff cc 	ld.w	r8,r7[-52]
800048aa:	ee f9 ff d4 	ld.w	r9,r7[-44]
800048ae:	ee fa ff d0 	ld.w	r10,r7[-48]
800048b2:	ee fc ff d8 	ld.w	r12,r7[-40]
800048b6:	f0 16 01 8b 	mcall	r6[1580]
800048ba:	2f fd       	sub	sp,-4
800048bc:	18 98       	mov	r8,r12
800048be:	ec 18 00 01 	eorl	r8,0x1
800048c2:	5c 58       	castu.b	r8
800048c4:	c2 40       	breq	8000490c <linearProgram3+0x2b4>
			{
				for (i=0;i<3;i++)
800048c6:	30 08       	mov	r8,0
800048c8:	ef 68 ff f6 	st.b	r7[-10],r8
800048cc:	c1 48       	rjmp	800048f4 <linearProgram3+0x29c>
				{
					NewVelocity[i] = tempResult[i];
800048ce:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800048d2:	a3 68       	lsl	r8,0x2
800048d4:	ee f9 ff cc 	ld.w	r9,r7[-52]
800048d8:	10 09       	add	r9,r8
800048da:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800048de:	a3 68       	lsl	r8,0x2
800048e0:	ee 08 00 08 	add	r8,r7,r8
800048e4:	f0 f8 ff dc 	ld.w	r8,r8[-36]
800048e8:	93 08       	st.w	r9[0x0],r8
			{
				tempResult[i] = NewVelocity[i];
			}
			if (!(linearProgram2(planes,ind,maxSpeed,OptimalVelocity,NewVelocity,directionOpt)))
			{
				for (i=0;i<3;i++)
800048ea:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800048ee:	2f f8       	sub	r8,-1
800048f0:	ef 68 ff f6 	st.b	r7[-10],r8
800048f4:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800048f8:	30 28       	mov	r8,2
800048fa:	f0 09 18 00 	cp.b	r9,r8
800048fe:	fe 9a ff e8 	brle	800048ce <linearProgram3+0x276>
				{
					NewVelocity[i] = tempResult[i];
				}
				
				return ind;
80004902:	ef 28 ff f7 	ld.sb	r8,r7[-9]
80004906:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8000490a:	c1 78       	rjmp	80004938 <linearProgram3+0x2e0>
		}
	}
	
	int8_t ind;
	
	for (ind=0;ind<centralData->number_of_neighbors;ind++)
8000490c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004910:	2f f8       	sub	r8,-1
80004912:	ef 68 ff f7 	st.b	r7[-9],r8
80004916:	ef 29 ff f7 	ld.sb	r9,r7[-9]
8000491a:	ec f8 00 00 	ld.w	r8,r6[0]
8000491e:	70 08       	ld.w	r8,r8[0x0]
80004920:	f1 38 0d 44 	ld.ub	r8,r8[3396]
80004924:	10 39       	cp.w	r9,r8
80004926:	fe 95 ff 4f 	brlt	800047c4 <linearProgram3+0x16c>
				
				return ind;
			}
		}
	}
	return centralData->number_of_neighbors;
8000492a:	ec f8 00 00 	ld.w	r8,r6[0]
8000492e:	70 08       	ld.w	r8,r8[0x0]
80004930:	f1 38 0d 44 	ld.ub	r8,r8[3396]
80004934:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
}
80004938:	10 9c       	mov	r12,r8
8000493a:	2f 2d       	sub	sp,-56
8000493c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80004940:	80 00       	ld.sh	r0,r0[0x0]
80004942:	44 e8       	lddsp	r8,sp[0x138]

80004944 <linearProgram4>:

void linearProgram4(plane_t planes[], int8_t ind, float maxSpeed, float NewVelocity[])
{
80004944:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80004948:	1a 97       	mov	r7,sp
8000494a:	fa cd 01 ec 	sub	sp,sp,492
8000494e:	fe f6 07 7a 	ld.w	r6,pc[1914]
80004952:	1e 26       	rsub	r6,pc
80004954:	ef 4c fe 20 	st.w	r7[-480],r12
80004958:	16 98       	mov	r8,r11
8000495a:	ef 4a fe 18 	st.w	r7[-488],r10
8000495e:	ef 49 fe 14 	st.w	r7[-492],r9
80004962:	ef 68 fe 1c 	st.b	r7[-484],r8
	
	int8_t index,index2;
	
	plane_t projPlanes[MAX_NUM_NEIGHBORS];
	
	float distance = 0.0;
80004966:	30 08       	mov	r8,0
80004968:	ef 48 ff f0 	st.w	r7[-16],r8
	
	for (index = ind;index<centralData->number_of_neighbors;index++)
8000496c:	ef 38 fe 1c 	ld.ub	r8,r7[-484]
80004970:	ef 68 ff ee 	st.b	r7[-18],r8
80004974:	e0 8f 03 9c 	bral	800050ac <linearProgram4+0x768>
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
80004978:	30 08       	mov	r8,0
8000497a:	ef 68 ff ed 	st.b	r7[-19],r8
8000497e:	c2 78       	rjmp	800049cc <linearProgram4+0x88>
		{
			diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
80004980:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004984:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004988:	12 98       	mov	r8,r9
8000498a:	a1 78       	lsl	r8,0x1
8000498c:	12 08       	add	r8,r9
8000498e:	a3 78       	lsl	r8,0x3
80004990:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004994:	f2 08 00 08 	add	r8,r9,r8
80004998:	ef 29 ff ed 	ld.sb	r9,r7[-19]
8000499c:	2f d9       	sub	r9,-3
8000499e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800049a2:	ef 28 ff ed 	ld.sb	r8,r7[-19]
800049a6:	a3 68       	lsl	r8,0x2
800049a8:	ee fb fe 14 	ld.w	r11,r7[-492]
800049ac:	f6 08 00 08 	add	r8,r11,r8
800049b0:	70 08       	ld.w	r8,r8[0x0]
800049b2:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800049b6:	f4 08 15 02 	lsl	r8,r10,0x2
800049ba:	ee 08 00 08 	add	r8,r7,r8
800049be:	f1 49 fe 78 	st.w	r8[-392],r9
	float distance = 0.0;
	
	for (index = ind;index<centralData->number_of_neighbors;index++)
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
800049c2:	ef 38 ff ed 	ld.ub	r8,r7[-19]
800049c6:	2f f8       	sub	r8,-1
800049c8:	ef 68 ff ed 	st.b	r7[-19],r8
800049cc:	ef 39 ff ed 	ld.ub	r9,r7[-19]
800049d0:	30 28       	mov	r8,2
800049d2:	f0 09 18 00 	cp.b	r9,r8
800049d6:	fe 9a ff d5 	brle	80004980 <linearProgram4+0x3c>
		{
			diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
		}
		if (scalar_product(planes[index].normal,diffPointVel)>distance)
800049da:	ef 29 ff ee 	ld.sb	r9,r7[-18]
800049de:	12 98       	mov	r8,r9
800049e0:	a1 78       	lsl	r8,0x1
800049e2:	12 08       	add	r8,r9
800049e4:	a3 78       	lsl	r8,0x3
800049e6:	ee f9 fe 20 	ld.w	r9,r7[-480]
800049ea:	f2 08 00 08 	add	r8,r9,r8
800049ee:	ee c9 01 88 	sub	r9,r7,392
800049f2:	12 9b       	mov	r11,r9
800049f4:	10 9c       	mov	r12,r8
800049f6:	fe b0 ef 4b 	rcall	8000288c <scalar_product>
800049fa:	18 9a       	mov	r10,r12
800049fc:	30 18       	mov	r8,1
800049fe:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004a02:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004a06:	e0 8c 00 04 	brvs	80004a0e <linearProgram4+0xca>
80004a0a:	e0 89 00 03 	brgt	80004a10 <linearProgram4+0xcc>
80004a0e:	30 08       	mov	r8,0
80004a10:	5c 58       	castu.b	r8
80004a12:	e0 80 03 48 	breq	800050a2 <linearProgram4+0x75e>
		{
			/* Result does not satisfy constraint of plane i. */
			
			for (index2 = 0;index2<index;index2++)
80004a16:	30 08       	mov	r8,0
80004a18:	ef 68 ff ef 	st.b	r7[-17],r8
80004a1c:	e0 8f 02 98 	bral	80004f4c <linearProgram4+0x608>
			{
				plane_t plane;
				float crossProduct[3];
				CROSS(planes[index2].normal, planes[index].normal, crossProduct);
80004a20:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004a24:	12 98       	mov	r8,r9
80004a26:	a1 78       	lsl	r8,0x1
80004a28:	12 08       	add	r8,r9
80004a2a:	a3 78       	lsl	r8,0x3
80004a2c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a30:	f2 08 00 08 	add	r8,r9,r8
80004a34:	70 1a       	ld.w	r10,r8[0x4]
80004a36:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004a3a:	12 98       	mov	r8,r9
80004a3c:	a1 78       	lsl	r8,0x1
80004a3e:	12 08       	add	r8,r9
80004a40:	a3 78       	lsl	r8,0x3
80004a42:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a46:	f2 08 00 08 	add	r8,r9,r8
80004a4a:	70 28       	ld.w	r8,r8[0x8]
80004a4c:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004a50:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004a54:	12 98       	mov	r8,r9
80004a56:	a1 78       	lsl	r8,0x1
80004a58:	12 08       	add	r8,r9
80004a5a:	a3 78       	lsl	r8,0x3
80004a5c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a60:	f2 08 00 08 	add	r8,r9,r8
80004a64:	70 2b       	ld.w	r11,r8[0x8]
80004a66:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004a6a:	12 98       	mov	r8,r9
80004a6c:	a1 78       	lsl	r8,0x1
80004a6e:	12 08       	add	r8,r9
80004a70:	a3 78       	lsl	r8,0x3
80004a72:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a76:	f2 08 00 08 	add	r8,r9,r8
80004a7a:	70 18       	ld.w	r8,r8[0x4]
80004a7c:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004a80:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004a84:	ef 48 fe 3c 	st.w	r7[-452],r8
80004a88:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004a8c:	12 98       	mov	r8,r9
80004a8e:	a1 78       	lsl	r8,0x1
80004a90:	12 08       	add	r8,r9
80004a92:	a3 78       	lsl	r8,0x3
80004a94:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a98:	f2 08 00 08 	add	r8,r9,r8
80004a9c:	70 2a       	ld.w	r10,r8[0x8]
80004a9e:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004aa2:	12 98       	mov	r8,r9
80004aa4:	a1 78       	lsl	r8,0x1
80004aa6:	12 08       	add	r8,r9
80004aa8:	a3 78       	lsl	r8,0x3
80004aaa:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004aae:	f2 08 00 08 	add	r8,r9,r8
80004ab2:	70 08       	ld.w	r8,r8[0x0]
80004ab4:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004ab8:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004abc:	12 98       	mov	r8,r9
80004abe:	a1 78       	lsl	r8,0x1
80004ac0:	12 08       	add	r8,r9
80004ac2:	a3 78       	lsl	r8,0x3
80004ac4:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004ac8:	f2 08 00 08 	add	r8,r9,r8
80004acc:	70 0b       	ld.w	r11,r8[0x0]
80004ace:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004ad2:	12 98       	mov	r8,r9
80004ad4:	a1 78       	lsl	r8,0x1
80004ad6:	12 08       	add	r8,r9
80004ad8:	a3 78       	lsl	r8,0x3
80004ada:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004ade:	f2 08 00 08 	add	r8,r9,r8
80004ae2:	70 28       	ld.w	r8,r8[0x8]
80004ae4:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004ae8:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004aec:	ef 48 fe 40 	st.w	r7[-448],r8
80004af0:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004af4:	12 98       	mov	r8,r9
80004af6:	a1 78       	lsl	r8,0x1
80004af8:	12 08       	add	r8,r9
80004afa:	a3 78       	lsl	r8,0x3
80004afc:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b00:	f2 08 00 08 	add	r8,r9,r8
80004b04:	70 0a       	ld.w	r10,r8[0x0]
80004b06:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004b0a:	12 98       	mov	r8,r9
80004b0c:	a1 78       	lsl	r8,0x1
80004b0e:	12 08       	add	r8,r9
80004b10:	a3 78       	lsl	r8,0x3
80004b12:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b16:	f2 08 00 08 	add	r8,r9,r8
80004b1a:	70 18       	ld.w	r8,r8[0x4]
80004b1c:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004b20:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004b24:	12 98       	mov	r8,r9
80004b26:	a1 78       	lsl	r8,0x1
80004b28:	12 08       	add	r8,r9
80004b2a:	a3 78       	lsl	r8,0x3
80004b2c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b30:	f2 08 00 08 	add	r8,r9,r8
80004b34:	70 1b       	ld.w	r11,r8[0x4]
80004b36:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004b3a:	12 98       	mov	r8,r9
80004b3c:	a1 78       	lsl	r8,0x1
80004b3e:	12 08       	add	r8,r9
80004b40:	a3 78       	lsl	r8,0x3
80004b42:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b46:	f2 08 00 08 	add	r8,r9,r8
80004b4a:	70 08       	ld.w	r8,r8[0x0]
80004b4c:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004b50:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004b54:	ef 48 fe 44 	st.w	r7[-444],r8
				
				if (vector_norm_sqr(crossProduct)<=RVO_EPSILON)
80004b58:	ee c8 01 c4 	sub	r8,r7,452
80004b5c:	10 9c       	mov	r12,r8
80004b5e:	fe b0 f0 67 	rcall	80002c2c <vector_norm_sqr>
80004b62:	18 98       	mov	r8,r12
80004b64:	10 9c       	mov	r12,r8
80004b66:	f0 16 00 02 	mcall	r6[8]
80004b6a:	14 98       	mov	r8,r10
80004b6c:	16 99       	mov	r9,r11
80004b6e:	30 05       	mov	r5,0
80004b70:	e0 6a 43 2d 	mov	r10,17197
80004b74:	ea 1a eb 1c 	orh	r10,0xeb1c
80004b78:	e0 6b 36 e2 	mov	r11,14050
80004b7c:	ea 1b 3f 1a 	orh	r11,0x3f1a
80004b80:	f0 16 00 82 	mcall	r6[520]
80004b84:	18 98       	mov	r8,r12
80004b86:	58 08       	cp.w	r8,0
80004b88:	c0 20       	breq	80004b8c <linearProgram4+0x248>
80004b8a:	30 15       	mov	r5,1
80004b8c:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80004b90:	c6 50       	breq	80004c5a <linearProgram4+0x316>
				{
					/* Plane index and plane index2 are (almost) parallel. */
					if (scalar_product(planes[index].normal, planes[index2].normal) > 0.0f) {
80004b92:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004b96:	12 98       	mov	r8,r9
80004b98:	a1 78       	lsl	r8,0x1
80004b9a:	12 08       	add	r8,r9
80004b9c:	a3 78       	lsl	r8,0x3
80004b9e:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004ba2:	f2 08 00 08 	add	r8,r9,r8
80004ba6:	10 9a       	mov	r10,r8
80004ba8:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004bac:	12 98       	mov	r8,r9
80004bae:	a1 78       	lsl	r8,0x1
80004bb0:	12 08       	add	r8,r9
80004bb2:	a3 78       	lsl	r8,0x3
80004bb4:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004bb8:	f2 08 00 08 	add	r8,r9,r8
80004bbc:	14 9b       	mov	r11,r10
80004bbe:	10 9c       	mov	r12,r8
80004bc0:	fe b0 ee 66 	rcall	8000288c <scalar_product>
80004bc4:	18 9a       	mov	r10,r12
80004bc6:	30 18       	mov	r8,1
80004bc8:	30 09       	mov	r9,0
80004bca:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004bce:	e0 8c 00 04 	brvs	80004bd6 <linearProgram4+0x292>
80004bd2:	e0 89 00 03 	brgt	80004bd8 <linearProgram4+0x294>
80004bd6:	30 08       	mov	r8,0
80004bd8:	5c 58       	castu.b	r8
80004bda:	e0 81 01 b3 	brne	80004f40 <linearProgram4+0x5fc>
						/* Plane index and plane index2 point in the same direction. */
						continue;
					}else{
						/* Plane index and plane index2 point in opposite direction. */
						for (i=0;i<3;i++)
80004bde:	30 08       	mov	r8,0
80004be0:	ef 68 ff ed 	st.b	r7[-19],r8
80004be4:	c3 38       	rjmp	80004c4a <linearProgram4+0x306>
						{
							plane.point[i] = 0.5 * (planes[index].point[i] + planes[index2].point[i]);
80004be6:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004bea:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004bee:	12 98       	mov	r8,r9
80004bf0:	a1 78       	lsl	r8,0x1
80004bf2:	12 08       	add	r8,r9
80004bf4:	a3 78       	lsl	r8,0x3
80004bf6:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004bfa:	f2 08 00 08 	add	r8,r9,r8
80004bfe:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004c02:	2f d9       	sub	r9,-3
80004c04:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
80004c08:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004c0c:	12 98       	mov	r8,r9
80004c0e:	a1 78       	lsl	r8,0x1
80004c10:	12 08       	add	r8,r9
80004c12:	a3 78       	lsl	r8,0x3
80004c14:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004c18:	f2 08 00 08 	add	r8,r9,r8
80004c1c:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004c20:	2f d9       	sub	r9,-3
80004c22:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004c26:	e5 a0 09 b8 	cop	cp0,cr9,cr11,cr8,0x40
80004c2a:	fc 18 3f 00 	movh	r8,0x3f00
80004c2e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80004c32:	f4 c8 ff fd 	sub	r8,r10,-3
80004c36:	a3 68       	lsl	r8,0x2
80004c38:	ee 08 00 08 	add	r8,r7,r8
80004c3c:	f1 49 fe 48 	st.w	r8[-440],r9
					if (scalar_product(planes[index].normal, planes[index2].normal) > 0.0f) {
						/* Plane index and plane index2 point in the same direction. */
						continue;
					}else{
						/* Plane index and plane index2 point in opposite direction. */
						for (i=0;i<3;i++)
80004c40:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004c44:	2f f8       	sub	r8,-1
80004c46:	ef 68 ff ed 	st.b	r7[-19],r8
80004c4a:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004c4e:	30 28       	mov	r8,2
80004c50:	f0 09 18 00 	cp.b	r9,r8
80004c54:	fe 9a ff c9 	brle	80004be6 <linearProgram4+0x2a2>
80004c58:	c5 69       	rjmp	80004f04 <linearProgram4+0x5c0>
							plane.point[i] = 0.5 * (planes[index].point[i] + planes[index2].point[i]);
						}
					}
				}else{
					float lineNormal[3];
					CROSS(crossProduct,planes[index].normal,lineNormal);
80004c5a:	ee fa fe 40 	ld.w	r10,r7[-448]
80004c5e:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004c62:	12 98       	mov	r8,r9
80004c64:	a1 78       	lsl	r8,0x1
80004c66:	12 08       	add	r8,r9
80004c68:	a3 78       	lsl	r8,0x3
80004c6a:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004c6e:	f2 08 00 08 	add	r8,r9,r8
80004c72:	70 28       	ld.w	r8,r8[0x8]
80004c74:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004c78:	ee fb fe 44 	ld.w	r11,r7[-444]
80004c7c:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004c80:	12 98       	mov	r8,r9
80004c82:	a1 78       	lsl	r8,0x1
80004c84:	12 08       	add	r8,r9
80004c86:	a3 78       	lsl	r8,0x3
80004c88:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004c8c:	f2 08 00 08 	add	r8,r9,r8
80004c90:	70 18       	ld.w	r8,r8[0x4]
80004c92:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004c96:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004c9a:	ef 48 fe 30 	st.w	r7[-464],r8
80004c9e:	ee fa fe 44 	ld.w	r10,r7[-444]
80004ca2:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004ca6:	12 98       	mov	r8,r9
80004ca8:	a1 78       	lsl	r8,0x1
80004caa:	12 08       	add	r8,r9
80004cac:	a3 78       	lsl	r8,0x3
80004cae:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004cb2:	f2 08 00 08 	add	r8,r9,r8
80004cb6:	70 08       	ld.w	r8,r8[0x0]
80004cb8:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004cbc:	ee fb fe 3c 	ld.w	r11,r7[-452]
80004cc0:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004cc4:	12 98       	mov	r8,r9
80004cc6:	a1 78       	lsl	r8,0x1
80004cc8:	12 08       	add	r8,r9
80004cca:	a3 78       	lsl	r8,0x3
80004ccc:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004cd0:	f2 08 00 08 	add	r8,r9,r8
80004cd4:	70 28       	ld.w	r8,r8[0x8]
80004cd6:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004cda:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004cde:	ef 48 fe 34 	st.w	r7[-460],r8
80004ce2:	ee fa fe 3c 	ld.w	r10,r7[-452]
80004ce6:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004cea:	12 98       	mov	r8,r9
80004cec:	a1 78       	lsl	r8,0x1
80004cee:	12 08       	add	r8,r9
80004cf0:	a3 78       	lsl	r8,0x3
80004cf2:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004cf6:	f2 08 00 08 	add	r8,r9,r8
80004cfa:	70 18       	ld.w	r8,r8[0x4]
80004cfc:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004d00:	ee fb fe 40 	ld.w	r11,r7[-448]
80004d04:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004d08:	12 98       	mov	r8,r9
80004d0a:	a1 78       	lsl	r8,0x1
80004d0c:	12 08       	add	r8,r9
80004d0e:	a3 78       	lsl	r8,0x3
80004d10:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004d14:	f2 08 00 08 	add	r8,r9,r8
80004d18:	70 08       	ld.w	r8,r8[0x0]
80004d1a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004d1e:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004d22:	ef 48 fe 38 	st.w	r7[-456],r8
					
					float diffPoints[3];
					for (i=0;i<3;i++)
80004d26:	30 08       	mov	r8,0
80004d28:	ef 68 ff ed 	st.b	r7[-19],r8
80004d2c:	c2 e8       	rjmp	80004d88 <linearProgram4+0x444>
					{
						diffPoints[i] = planes[index2].point[i] - planes[index].point[i];
80004d2e:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004d32:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004d36:	12 98       	mov	r8,r9
80004d38:	a1 78       	lsl	r8,0x1
80004d3a:	12 08       	add	r8,r9
80004d3c:	a3 78       	lsl	r8,0x3
80004d3e:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004d42:	f2 08 00 08 	add	r8,r9,r8
80004d46:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004d4a:	2f d9       	sub	r9,-3
80004d4c:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
80004d50:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004d54:	12 98       	mov	r8,r9
80004d56:	a1 78       	lsl	r8,0x1
80004d58:	12 08       	add	r8,r9
80004d5a:	a3 78       	lsl	r8,0x3
80004d5c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004d60:	f2 08 00 08 	add	r8,r9,r8
80004d64:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004d68:	2f d9       	sub	r9,-3
80004d6a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004d6e:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
80004d72:	f4 08 15 02 	lsl	r8,r10,0x2
80004d76:	ee 08 00 08 	add	r8,r7,r8
80004d7a:	f1 49 fe 24 	st.w	r8[-476],r9
				}else{
					float lineNormal[3];
					CROSS(crossProduct,planes[index].normal,lineNormal);
					
					float diffPoints[3];
					for (i=0;i<3;i++)
80004d7e:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004d82:	2f f8       	sub	r8,-1
80004d84:	ef 68 ff ed 	st.b	r7[-19],r8
80004d88:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004d8c:	30 28       	mov	r8,2
80004d8e:	f0 09 18 00 	cp.b	r9,r8
80004d92:	fe 9a ff ce 	brle	80004d2e <linearProgram4+0x3ea>
					{
						diffPoints[i] = planes[index2].point[i] - planes[index].point[i];
					}
					
					float scalarProdPtsNormal = scalar_product(diffPoints, planes[index2].normal);
80004d96:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004d9a:	12 98       	mov	r8,r9
80004d9c:	a1 78       	lsl	r8,0x1
80004d9e:	12 08       	add	r8,r9
80004da0:	a3 78       	lsl	r8,0x3
80004da2:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004da6:	f2 08 00 08 	add	r8,r9,r8
80004daa:	10 99       	mov	r9,r8
80004dac:	ee c8 01 dc 	sub	r8,r7,476
80004db0:	12 9b       	mov	r11,r9
80004db2:	10 9c       	mov	r12,r8
80004db4:	fe b0 ed 6c 	rcall	8000288c <scalar_product>
80004db8:	18 98       	mov	r8,r12
80004dba:	ef 48 ff f4 	st.w	r7[-12],r8
					float scalarProdNormals = scalar_product(lineNormal, planes[index2].normal);
80004dbe:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004dc2:	12 98       	mov	r8,r9
80004dc4:	a1 78       	lsl	r8,0x1
80004dc6:	12 08       	add	r8,r9
80004dc8:	a3 78       	lsl	r8,0x3
80004dca:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004dce:	f2 08 00 08 	add	r8,r9,r8
80004dd2:	10 99       	mov	r9,r8
80004dd4:	ee c8 01 d0 	sub	r8,r7,464
80004dd8:	12 9b       	mov	r11,r9
80004dda:	10 9c       	mov	r12,r8
80004ddc:	fe b0 ed 58 	rcall	8000288c <scalar_product>
80004de0:	18 98       	mov	r8,r12
80004de2:	ef 48 ff f8 	st.w	r7[-8],r8
					for (i=0;i<3;i++)
80004de6:	30 08       	mov	r8,0
80004de8:	ef 68 ff ed 	st.b	r7[-19],r8
80004dec:	c5 78       	rjmp	80004e9a <linearProgram4+0x556>
					{
						plane.point[i] = planes[index].point[i] + (scalarProdPtsNormal / scalarProdNormals) * lineNormal[i];
80004dee:	ef 25 ff ed 	ld.sb	r5,r7[-19]
80004df2:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004df6:	12 98       	mov	r8,r9
80004df8:	a1 78       	lsl	r8,0x1
80004dfa:	12 08       	add	r8,r9
80004dfc:	a3 78       	lsl	r8,0x3
80004dfe:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004e02:	f2 08 00 08 	add	r8,r9,r8
80004e06:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004e0a:	2f d9       	sub	r9,-3
80004e0c:	f0 09 03 23 	ld.w	r3,r8[r9<<0x2]
80004e10:	ee fb ff f8 	ld.w	r11,r7[-8]
80004e14:	ee fc ff f4 	ld.w	r12,r7[-12]
80004e18:	f0 16 00 08 	mcall	r6[32]
80004e1c:	18 98       	mov	r8,r12
80004e1e:	10 99       	mov	r9,r8
80004e20:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004e24:	a3 68       	lsl	r8,0x2
80004e26:	ee 08 00 08 	add	r8,r7,r8
80004e2a:	f0 f8 fe 30 	ld.w	r8,r8[-464]
80004e2e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80004e32:	e5 a0 09 38 	cop	cp0,cr9,cr3,cr8,0x40
80004e36:	ea c8 ff fd 	sub	r8,r5,-3
80004e3a:	a3 68       	lsl	r8,0x2
80004e3c:	ee 08 00 08 	add	r8,r7,r8
80004e40:	f1 49 fe 48 	st.w	r8[-440],r9
						plane.normal[i] = planes[index2].normal[i] - planes[index].normal[i];
80004e44:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004e48:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004e4c:	12 98       	mov	r8,r9
80004e4e:	a1 78       	lsl	r8,0x1
80004e50:	12 08       	add	r8,r9
80004e52:	a3 78       	lsl	r8,0x3
80004e54:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004e58:	f2 08 00 08 	add	r8,r9,r8
80004e5c:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004e60:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
80004e64:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004e68:	12 98       	mov	r8,r9
80004e6a:	a1 78       	lsl	r8,0x1
80004e6c:	12 08       	add	r8,r9
80004e6e:	a3 78       	lsl	r8,0x3
80004e70:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004e74:	f2 08 00 08 	add	r8,r9,r8
80004e78:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004e7c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004e80:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
80004e84:	f4 08 15 02 	lsl	r8,r10,0x2
80004e88:	ee 08 00 08 	add	r8,r7,r8
80004e8c:	f1 49 fe 48 	st.w	r8[-440],r9
						diffPoints[i] = planes[index2].point[i] - planes[index].point[i];
					}
					
					float scalarProdPtsNormal = scalar_product(diffPoints, planes[index2].normal);
					float scalarProdNormals = scalar_product(lineNormal, planes[index2].normal);
					for (i=0;i<3;i++)
80004e90:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004e94:	2f f8       	sub	r8,-1
80004e96:	ef 68 ff ed 	st.b	r7[-19],r8
80004e9a:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004e9e:	30 28       	mov	r8,2
80004ea0:	f0 09 18 00 	cp.b	r9,r8
80004ea4:	fe 9a ff a5 	brle	80004dee <linearProgram4+0x4aa>
					{
						plane.point[i] = planes[index].point[i] + (scalarProdPtsNormal / scalarProdNormals) * lineNormal[i];
						plane.normal[i] = planes[index2].normal[i] - planes[index].normal[i];
					}
					
					float normNormal = vector_norm(plane.normal);
80004ea8:	ee c8 01 b8 	sub	r8,r7,440
80004eac:	10 9c       	mov	r12,r8
80004eae:	fe b0 ee d7 	rcall	80002c5c <vector_norm>
80004eb2:	18 98       	mov	r8,r12
80004eb4:	ef 48 ff fc 	st.w	r7[-4],r8
					for(i=0;i<3;i++)
80004eb8:	30 08       	mov	r8,0
80004eba:	ef 68 ff ed 	st.b	r7[-19],r8
80004ebe:	c1 c8       	rjmp	80004ef6 <linearProgram4+0x5b2>
					{
						plane.normal[i] = plane.normal[i] / normNormal;
80004ec0:	ef 25 ff ed 	ld.sb	r5,r7[-19]
80004ec4:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004ec8:	a3 68       	lsl	r8,0x2
80004eca:	ee 08 00 08 	add	r8,r7,r8
80004ece:	f0 f8 fe 48 	ld.w	r8,r8[-440]
80004ed2:	ee fb ff fc 	ld.w	r11,r7[-4]
80004ed6:	10 9c       	mov	r12,r8
80004ed8:	f0 16 00 08 	mcall	r6[32]
80004edc:	18 98       	mov	r8,r12
80004ede:	10 99       	mov	r9,r8
80004ee0:	ea 08 15 02 	lsl	r8,r5,0x2
80004ee4:	ee 08 00 08 	add	r8,r7,r8
80004ee8:	f1 49 fe 48 	st.w	r8[-440],r9
						plane.point[i] = planes[index].point[i] + (scalarProdPtsNormal / scalarProdNormals) * lineNormal[i];
						plane.normal[i] = planes[index2].normal[i] - planes[index].normal[i];
					}
					
					float normNormal = vector_norm(plane.normal);
					for(i=0;i<3;i++)
80004eec:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004ef0:	2f f8       	sub	r8,-1
80004ef2:	ef 68 ff ed 	st.b	r7[-19],r8
80004ef6:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004efa:	30 28       	mov	r8,2
80004efc:	f0 09 18 00 	cp.b	r9,r8
80004f00:	fe 9a ff e0 	brle	80004ec0 <linearProgram4+0x57c>
					{
						plane.normal[i] = plane.normal[i] / normNormal;
					}
				}
				projPlanes[index2] = plane;
80004f04:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004f08:	12 98       	mov	r8,r9
80004f0a:	a1 78       	lsl	r8,0x1
80004f0c:	12 08       	add	r8,r9
80004f0e:	a3 78       	lsl	r8,0x3
80004f10:	ee 08 00 08 	add	r8,r7,r8
80004f14:	f0 c8 01 7c 	sub	r8,r8,380
80004f18:	10 9a       	mov	r10,r8
80004f1a:	ee cb 01 b8 	sub	r11,r7,440
80004f1e:	f4 c8 00 00 	sub	r8,r10,0
80004f22:	f6 c9 00 00 	sub	r9,r11,0
80004f26:	72 0c       	ld.w	r12,r9[0x0]
80004f28:	91 0c       	st.w	r8[0x0],r12
80004f2a:	72 1c       	ld.w	r12,r9[0x4]
80004f2c:	91 1c       	st.w	r8[0x4],r12
80004f2e:	72 2c       	ld.w	r12,r9[0x8]
80004f30:	91 2c       	st.w	r8[0x8],r12
80004f32:	72 39       	ld.w	r9,r9[0xc]
80004f34:	91 39       	st.w	r8[0xc],r9
80004f36:	f6 e8 00 10 	ld.d	r8,r11[16]
80004f3a:	f4 e9 00 10 	st.d	r10[16],r8
80004f3e:	c0 28       	rjmp	80004f42 <linearProgram4+0x5fe>
				if (vector_norm_sqr(crossProduct)<=RVO_EPSILON)
				{
					/* Plane index and plane index2 are (almost) parallel. */
					if (scalar_product(planes[index].normal, planes[index2].normal) > 0.0f) {
						/* Plane index and plane index2 point in the same direction. */
						continue;
80004f40:	d7 03       	nop
		}
		if (scalar_product(planes[index].normal,diffPointVel)>distance)
		{
			/* Result does not satisfy constraint of plane i. */
			
			for (index2 = 0;index2<index;index2++)
80004f42:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80004f46:	2f f8       	sub	r8,-1
80004f48:	ef 68 ff ef 	st.b	r7[-17],r8
80004f4c:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80004f50:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80004f54:	f0 09 18 00 	cp.b	r9,r8
80004f58:	fe 95 fd 64 	brlt	80004a20 <linearProgram4+0xdc>
				}
				projPlanes[index2] = plane;
			}
			
			float tempResult[3];
			for (i=0;i<3;i++)
80004f5c:	30 08       	mov	r8,0
80004f5e:	ef 68 ff ed 	st.b	r7[-19],r8
80004f62:	c1 58       	rjmp	80004f8c <linearProgram4+0x648>
			{
				tempResult[i] = NewVelocity[i];
80004f64:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004f68:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004f6c:	a3 69       	lsl	r9,0x2
80004f6e:	ee fa fe 14 	ld.w	r10,r7[-492]
80004f72:	f4 09 00 09 	add	r9,r10,r9
80004f76:	72 09       	ld.w	r9,r9[0x0]
80004f78:	a3 68       	lsl	r8,0x2
80004f7a:	ee 08 00 08 	add	r8,r7,r8
80004f7e:	f1 49 fe 6c 	st.w	r8[-404],r9
				}
				projPlanes[index2] = plane;
			}
			
			float tempResult[3];
			for (i=0;i<3;i++)
80004f82:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004f86:	2f f8       	sub	r8,-1
80004f88:	ef 68 ff ed 	st.b	r7[-19],r8
80004f8c:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004f90:	30 28       	mov	r8,2
80004f92:	f0 09 18 00 	cp.b	r9,r8
80004f96:	fe 9a ff e7 	brle	80004f64 <linearProgram4+0x620>
			{
				tempResult[i] = NewVelocity[i];
			}
			if (linearProgram3(projPlanes,planes[index].normal,maxSpeed,NewVelocity,true)<index)
80004f9a:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004f9e:	12 98       	mov	r8,r9
80004fa0:	a1 78       	lsl	r8,0x1
80004fa2:	12 08       	add	r8,r9
80004fa4:	a3 78       	lsl	r8,0x3
80004fa6:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004faa:	f2 08 00 08 	add	r8,r9,r8
80004fae:	10 9b       	mov	r11,r8
80004fb0:	ee cc 01 7c 	sub	r12,r7,380
80004fb4:	30 18       	mov	r8,1
80004fb6:	ee f9 fe 14 	ld.w	r9,r7[-492]
80004fba:	ee fa fe 18 	ld.w	r10,r7[-488]
80004fbe:	f0 16 01 15 	mcall	r6[1108]
80004fc2:	18 9a       	mov	r10,r12
80004fc4:	ef 28 ff ee 	ld.sb	r8,r7[-18]
80004fc8:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
80004fcc:	30 18       	mov	r8,1
80004fce:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004fd2:	e0 8c 00 03 	brvs	80004fd8 <linearProgram4+0x694>
80004fd6:	c0 25       	brlt	80004fda <linearProgram4+0x696>
80004fd8:	30 08       	mov	r8,0
80004fda:	5c 58       	castu.b	r8
80004fdc:	c1 f0       	breq	8000501a <linearProgram4+0x6d6>
			{
				for (i=0;i<3;i++)
80004fde:	30 08       	mov	r8,0
80004fe0:	ef 68 ff ed 	st.b	r7[-19],r8
80004fe4:	c1 48       	rjmp	8000500c <linearProgram4+0x6c8>
				{
					NewVelocity[i] = tempResult[i];
80004fe6:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004fea:	a3 68       	lsl	r8,0x2
80004fec:	ee f9 fe 14 	ld.w	r9,r7[-492]
80004ff0:	10 09       	add	r9,r8
80004ff2:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004ff6:	a3 68       	lsl	r8,0x2
80004ff8:	ee 08 00 08 	add	r8,r7,r8
80004ffc:	f0 f8 fe 6c 	ld.w	r8,r8[-404]
80005000:	93 08       	st.w	r9[0x0],r8
			{
				tempResult[i] = NewVelocity[i];
			}
			if (linearProgram3(projPlanes,planes[index].normal,maxSpeed,NewVelocity,true)<index)
			{
				for (i=0;i<3;i++)
80005002:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80005006:	2f f8       	sub	r8,-1
80005008:	ef 68 ff ed 	st.b	r7[-19],r8
8000500c:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80005010:	30 28       	mov	r8,2
80005012:	f0 09 18 00 	cp.b	r9,r8
80005016:	fe 9a ff e8 	brle	80004fe6 <linearProgram4+0x6a2>
				{
					NewVelocity[i] = tempResult[i];
				}
			}
			float diffPointVel[3];
			for (i=0;i<3;i++)
8000501a:	30 08       	mov	r8,0
8000501c:	ef 68 ff ed 	st.b	r7[-19],r8
80005020:	c2 78       	rjmp	8000506e <linearProgram4+0x72a>
			{
				diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
80005022:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80005026:	ef 29 ff ee 	ld.sb	r9,r7[-18]
8000502a:	12 98       	mov	r8,r9
8000502c:	a1 78       	lsl	r8,0x1
8000502e:	12 08       	add	r8,r9
80005030:	a3 78       	lsl	r8,0x3
80005032:	ee f9 fe 20 	ld.w	r9,r7[-480]
80005036:	f2 08 00 08 	add	r8,r9,r8
8000503a:	ef 29 ff ed 	ld.sb	r9,r7[-19]
8000503e:	2f d9       	sub	r9,-3
80005040:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80005044:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80005048:	a3 68       	lsl	r8,0x2
8000504a:	ee fb fe 14 	ld.w	r11,r7[-492]
8000504e:	f6 08 00 08 	add	r8,r11,r8
80005052:	70 08       	ld.w	r8,r8[0x0]
80005054:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80005058:	f4 08 15 02 	lsl	r8,r10,0x2
8000505c:	ee 08 00 08 	add	r8,r7,r8
80005060:	f1 49 fe 60 	st.w	r8[-416],r9
				{
					NewVelocity[i] = tempResult[i];
				}
			}
			float diffPointVel[3];
			for (i=0;i<3;i++)
80005064:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80005068:	2f f8       	sub	r8,-1
8000506a:	ef 68 ff ed 	st.b	r7[-19],r8
8000506e:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80005072:	30 28       	mov	r8,2
80005074:	f0 09 18 00 	cp.b	r9,r8
80005078:	fe 9a ff d5 	brle	80005022 <linearProgram4+0x6de>
			{
				diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
			}
			distance = scalar_product(planes[index].normal,diffPointVel);
8000507c:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80005080:	12 98       	mov	r8,r9
80005082:	a1 78       	lsl	r8,0x1
80005084:	12 08       	add	r8,r9
80005086:	a3 78       	lsl	r8,0x3
80005088:	ee f9 fe 20 	ld.w	r9,r7[-480]
8000508c:	f2 08 00 08 	add	r8,r9,r8
80005090:	ee c9 01 a0 	sub	r9,r7,416
80005094:	12 9b       	mov	r11,r9
80005096:	10 9c       	mov	r12,r8
80005098:	fe b0 eb fa 	rcall	8000288c <scalar_product>
8000509c:	18 98       	mov	r8,r12
8000509e:	ef 48 ff f0 	st.w	r7[-16],r8
	
	plane_t projPlanes[MAX_NUM_NEIGHBORS];
	
	float distance = 0.0;
	
	for (index = ind;index<centralData->number_of_neighbors;index++)
800050a2:	ef 38 ff ee 	ld.ub	r8,r7[-18]
800050a6:	2f f8       	sub	r8,-1
800050a8:	ef 68 ff ee 	st.b	r7[-18],r8
800050ac:	ef 29 ff ee 	ld.sb	r9,r7[-18]
800050b0:	ec f8 00 00 	ld.w	r8,r6[0]
800050b4:	70 08       	ld.w	r8,r8[0x0]
800050b6:	f1 38 0d 44 	ld.ub	r8,r8[3396]
800050ba:	10 39       	cp.w	r9,r8
800050bc:	fe 95 fc 5e 	brlt	80004978 <linearProgram4+0x34>
				diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
			}
			distance = scalar_product(planes[index].normal,diffPointVel);
		}
	}
800050c0:	28 5d       	sub	sp,-492
800050c2:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800050c6:	00 00       	add	r0,r0
800050c8:	80 00       	ld.sh	r0,r0[0x0]
800050ca:	47 d6       	lddsp	r6,sp[0x1f4]

800050cc <init_analog_monitor>:
#define MONITOR_CHANNELS 4
#define MONITOR_SAMPLES 10

int16_t monitor_buffer[MONITOR_CHANNELS *MONITOR_SAMPLES];

void init_analog_monitor() {
800050cc:	eb cd 40 c0 	pushm	r6-r7,lr
800050d0:	1a 97       	mov	r7,sp
800050d2:	49 06       	lddpc	r6,80005110 <init_analog_monitor+0x44>
800050d4:	1e 26       	rsub	r6,pc
	Init_ADCI(100000, ADCIFA_REF06VDD, 16, 4);
800050d6:	30 49       	mov	r9,4
800050d8:	31 0a       	mov	r10,16
800050da:	30 1b       	mov	r11,1
800050dc:	e0 7c 86 a0 	mov	r12,100000
800050e0:	f0 16 02 1a 	mcall	r6[2152]
	adc_sequencer_add(AVR32_ADCIFA_INP_ADCIN6, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1);  // 6V
800050e4:	30 0a       	mov	r10,0
800050e6:	30 9b       	mov	r11,9
800050e8:	30 6c       	mov	r12,6
800050ea:	f0 16 00 97 	mcall	r6[604]
	adc_sequencer_add(AVR32_ADCIFA_INP_ADCIN7, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1);  // 5V_ANALOG
800050ee:	30 0a       	mov	r10,0
800050f0:	30 9b       	mov	r11,9
800050f2:	30 7c       	mov	r12,7
800050f4:	f0 16 00 97 	mcall	r6[604]
	adc_sequencer_add(AVR32_ADCIFA_INP_GNDANA, AVR32_ADCIFA_INN_ADCIN10,ADCIFA_SHG_1); // BAT_FILTERED
800050f8:	30 0a       	mov	r10,0
800050fa:	30 2b       	mov	r11,2
800050fc:	30 ac       	mov	r12,10
800050fe:	f0 16 00 97 	mcall	r6[604]
	adc_sequencer_add(AVR32_ADCIFA_INP_GNDANA, AVR32_ADCIFA_INN_ADCIN11, ADCIFA_SHG_1); //INPUT
80005102:	30 0a       	mov	r10,0
80005104:	30 3b       	mov	r11,3
80005106:	30 ac       	mov	r12,10
80005108:	f0 16 00 97 	mcall	r6[604]
	//ADCI_Start_Sampling(&monitor_buffer, MONITOR_CHANNELS, MONITOR_SAMPLES, 100, false);
}
8000510c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005110:	80 00       	ld.sh	r0,r0[0x0]
80005112:	4f 58       	lddpc	r8,800052e4 <init_time_keeper+0x20>

80005114 <trigger_analog_monitor>:

void trigger_analog_monitor() {
80005114:	eb cd 40 c0 	pushm	r6-r7,lr
80005118:	1a 97       	mov	r7,sp
8000511a:	48 76       	lddpc	r6,80005134 <trigger_analog_monitor+0x20>
8000511c:	1e 26       	rsub	r6,pc
	ADCI_Start_Sampling(&monitor_buffer, MONITOR_CHANNELS, MONITOR_SAMPLES, 100, false);
8000511e:	30 08       	mov	r8,0
80005120:	36 49       	mov	r9,100
80005122:	30 aa       	mov	r10,10
80005124:	30 4b       	mov	r11,4
80005126:	ec fc 03 d8 	ld.w	r12,r6[984]
8000512a:	f0 16 01 99 	mcall	r6[1636]
}
8000512e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005132:	00 00       	add	r0,r0
80005134:	80 00       	ld.sh	r0,r0[0x0]
80005136:	4f a0       	lddpc	r0,8000531c <get_millis>

80005138 <get_monitored_avg>:

float get_monitored_avg(int channel) {
80005138:	eb cd 40 c0 	pushm	r6-r7,lr
8000513c:	1a 97       	mov	r7,sp
8000513e:	20 3d       	sub	sp,12
80005140:	49 c6       	lddpc	r6,800051b0 <get_monitored_avg+0x78>
80005142:	1e 26       	rsub	r6,pc
80005144:	ef 4c ff f4 	st.w	r7[-12],r12
	float out=0.0;
80005148:	30 08       	mov	r8,0
8000514a:	ef 48 ff f8 	st.w	r7[-8],r8
	int i;
	for (i=0; i<MONITOR_SAMPLES; i++) {
8000514e:	30 08       	mov	r8,0
80005150:	ef 48 ff fc 	st.w	r7[-4],r8
80005154:	c1 98       	rjmp	80005186 <get_monitored_avg+0x4e>
		out+=(float)monitor_buffer[channel + i*MONITOR_CHANNELS];
80005156:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000515a:	f0 09 15 02 	lsl	r9,r8,0x2
8000515e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005162:	10 09       	add	r9,r8
80005164:	ec f8 03 d8 	ld.w	r8,r6[984]
80005168:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
8000516c:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80005170:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005174:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005178:	ef 48 ff f8 	st.w	r7[-8],r8
}

float get_monitored_avg(int channel) {
	float out=0.0;
	int i;
	for (i=0; i<MONITOR_SAMPLES; i++) {
8000517c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005180:	2f f8       	sub	r8,-1
80005182:	ef 48 ff fc 	st.w	r7[-4],r8
80005186:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000518a:	58 98       	cp.w	r8,9
8000518c:	fe 9a ff e5 	brle	80005156 <get_monitored_avg+0x1e>
		out+=(float)monitor_buffer[channel + i*MONITOR_CHANNELS];
	}
	out=out / MONITOR_SAMPLES;
80005190:	fc 1b 41 20 	movh	r11,0x4120
80005194:	ee fc ff f8 	ld.w	r12,r7[-8]
80005198:	f0 16 00 08 	mcall	r6[32]
8000519c:	18 98       	mov	r8,r12
8000519e:	ef 48 ff f8 	st.w	r7[-8],r8
	return out;
800051a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
800051a6:	10 9c       	mov	r12,r8
800051a8:	2f dd       	sub	sp,-12
800051aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800051ae:	00 00       	add	r0,r0
800051b0:	80 00       	ld.sh	r0,r0[0x0]
800051b2:	4f c6       	lddpc	r6,800053a0 <ticks_to_seconds+0x1c>

800051b4 <get_battery_rail>:

float get_battery_rail(){
800051b4:	eb cd 40 c0 	pushm	r6-r7,lr
800051b8:	1a 97       	mov	r7,sp
800051ba:	48 f6       	lddpc	r6,800051f4 <get_battery_rail+0x40>
800051bc:	1e 26       	rsub	r6,pc
	return -CONV_FACTOR_BAT * get_monitored_avg(3);
800051be:	30 3c       	mov	r12,3
800051c0:	f0 16 00 8d 	mcall	r6[564]
800051c4:	18 98       	mov	r8,r12
800051c6:	10 9c       	mov	r12,r8
800051c8:	f0 16 00 02 	mcall	r6[8]
800051cc:	e0 68 67 a1 	mov	r8,26529
800051d0:	ea 18 ea b3 	orh	r8,0xeab3
800051d4:	e0 69 b5 73 	mov	r9,46451
800051d8:	ea 19 bf 65 	orh	r9,0xbf65
800051dc:	f0 16 00 03 	mcall	r6[12]
800051e0:	14 98       	mov	r8,r10
800051e2:	16 99       	mov	r9,r11
800051e4:	10 9a       	mov	r10,r8
800051e6:	12 9b       	mov	r11,r9
800051e8:	f0 16 00 09 	mcall	r6[36]
800051ec:	18 98       	mov	r8,r12
}
800051ee:	10 9c       	mov	r12,r8
800051f0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800051f4:	80 00       	ld.sh	r0,r0[0x0]
800051f6:	50 40       	stdsp	sp[0x10],r0

800051f8 <get_internal_rail>:

float get_internal_rail(){
800051f8:	eb cd 40 c0 	pushm	r6-r7,lr
800051fc:	1a 97       	mov	r7,sp
800051fe:	48 f6       	lddpc	r6,80005238 <get_internal_rail+0x40>
80005200:	1e 26       	rsub	r6,pc
	return -CONV_FACTOR_INT * get_monitored_avg(2);
80005202:	30 2c       	mov	r12,2
80005204:	f0 16 00 8d 	mcall	r6[564]
80005208:	18 98       	mov	r8,r12
8000520a:	10 9c       	mov	r12,r8
8000520c:	f0 16 00 02 	mcall	r6[8]
80005210:	e0 68 67 a1 	mov	r8,26529
80005214:	ea 18 ea b3 	orh	r8,0xeab3
80005218:	e0 69 b5 73 	mov	r9,46451
8000521c:	ea 19 bf 65 	orh	r9,0xbf65
80005220:	f0 16 00 03 	mcall	r6[12]
80005224:	14 98       	mov	r8,r10
80005226:	16 99       	mov	r9,r11
80005228:	10 9a       	mov	r10,r8
8000522a:	12 9b       	mov	r11,r9
8000522c:	f0 16 00 09 	mcall	r6[36]
80005230:	18 98       	mov	r8,r12
}
80005232:	10 9c       	mov	r12,r8
80005234:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005238:	80 00       	ld.sh	r0,r0[0x0]
8000523a:	50 84       	stdsp	sp[0x20],r4

8000523c <get_6V_analog_rail>:


float get_6V_analog_rail(){
8000523c:	eb cd 40 c0 	pushm	r6-r7,lr
80005240:	1a 97       	mov	r7,sp
80005242:	48 f6       	lddpc	r6,8000527c <get_6V_analog_rail+0x40>
80005244:	1e 26       	rsub	r6,pc
	return CONV_FACTOR_6V * get_monitored_avg(0);
80005246:	30 0c       	mov	r12,0
80005248:	f0 16 00 8d 	mcall	r6[564]
8000524c:	18 98       	mov	r8,r12
8000524e:	10 9c       	mov	r12,r8
80005250:	f0 16 00 02 	mcall	r6[8]
80005254:	e0 68 61 13 	mov	r8,24851
80005258:	ea 18 d3 c3 	orh	r8,0xd3c3
8000525c:	e0 69 65 2b 	mov	r9,25899
80005260:	ea 19 3f 59 	orh	r9,0x3f59
80005264:	f0 16 00 03 	mcall	r6[12]
80005268:	14 98       	mov	r8,r10
8000526a:	16 99       	mov	r9,r11
8000526c:	10 9a       	mov	r10,r8
8000526e:	12 9b       	mov	r11,r9
80005270:	f0 16 00 09 	mcall	r6[36]
80005274:	18 98       	mov	r8,r12
}
80005276:	10 9c       	mov	r12,r8
80005278:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000527c:	80 00       	ld.sh	r0,r0[0x0]
8000527e:	50 c8       	stdsp	sp[0x30],r8

80005280 <get_5V_analog_rail>:


float get_5V_analog_rail(){
80005280:	eb cd 40 c0 	pushm	r6-r7,lr
80005284:	1a 97       	mov	r7,sp
80005286:	48 f6       	lddpc	r6,800052c0 <get_5V_analog_rail+0x40>
80005288:	1e 26       	rsub	r6,pc
	return CONV_FACTOR_5V * get_monitored_avg(1);
8000528a:	30 1c       	mov	r12,1
8000528c:	f0 16 00 8d 	mcall	r6[564]
80005290:	18 98       	mov	r8,r12
80005292:	10 9c       	mov	r12,r8
80005294:	f0 16 00 02 	mcall	r6[8]
80005298:	e0 68 61 13 	mov	r8,24851
8000529c:	ea 18 d3 c3 	orh	r8,0xd3c3
800052a0:	e0 69 65 2b 	mov	r9,25899
800052a4:	ea 19 3f 59 	orh	r9,0x3f59
800052a8:	f0 16 00 03 	mcall	r6[12]
800052ac:	14 98       	mov	r8,r10
800052ae:	16 99       	mov	r9,r11
800052b0:	10 9a       	mov	r10,r8
800052b2:	12 9b       	mov	r11,r9
800052b4:	f0 16 00 09 	mcall	r6[36]
800052b8:	18 98       	mov	r8,r12
}
800052ba:	10 9c       	mov	r12,r8
800052bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800052c0:	80 00       	ld.sh	r0,r0[0x0]
800052c2:	51 0c       	stdsp	sp[0x40],r12

800052c4 <init_time_keeper>:


#include "time_keeper.h"


void init_time_keeper() {
800052c4:	eb cd 40 c0 	pushm	r6-r7,lr
800052c8:	1a 97       	mov	r7,sp
800052ca:	48 86       	lddpc	r6,800052e8 <init_time_keeper+0x24>
800052cc:	1e 26       	rsub	r6,pc
	ast_init_counter(&AVR32_AST, AST_OSC_PB, AST_PRESCALER_SETTING, 0);
800052ce:	30 09       	mov	r9,0
800052d0:	30 5a       	mov	r10,5
800052d2:	30 2b       	mov	r11,2
800052d4:	fe 7c 0c 00 	mov	r12,-62464
800052d8:	f0 16 01 84 	mcall	r6[1552]
	ast_enable(&AVR32_AST);
800052dc:	fe 7c 0c 00 	mov	r12,-62464
800052e0:	f0 16 01 e8 	mcall	r6[1952]
}
800052e4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800052e8:	80 00       	ld.sh	r0,r0[0x0]
800052ea:	51 50       	stdsp	sp[0x54],r0

800052ec <get_time>:


double get_time(){          // time in seconds since system start
800052ec:	eb cd 40 c0 	pushm	r6-r7,lr
800052f0:	1a 97       	mov	r7,sp
800052f2:	48 a6       	lddpc	r6,80005318 <get_time+0x2c>
800052f4:	1e 26       	rsub	r6,pc
	return ticks_to_seconds(get_time_ticks());
800052f6:	f0 16 00 2d 	mcall	r6[180]
800052fa:	18 98       	mov	r8,r12
800052fc:	10 9c       	mov	r12,r8
800052fe:	f0 16 00 c1 	mcall	r6[772]
80005302:	18 98       	mov	r8,r12
80005304:	10 9c       	mov	r12,r8
80005306:	f0 16 00 02 	mcall	r6[8]
8000530a:	14 98       	mov	r8,r10
8000530c:	16 99       	mov	r9,r11
}
8000530e:	10 9a       	mov	r10,r8
80005310:	12 9b       	mov	r11,r9
80005312:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005316:	00 00       	add	r0,r0
80005318:	80 00       	ld.sh	r0,r0[0x0]
8000531a:	51 78       	stdsp	sp[0x5c],r8

8000531c <get_millis>:
uint32_t get_millis() {     //milliseconds since system start
8000531c:	eb cd 40 c0 	pushm	r6-r7,lr
80005320:	1a 97       	mov	r7,sp
80005322:	48 96       	lddpc	r6,80005344 <get_millis+0x28>
80005324:	1e 26       	rsub	r6,pc
	return get_time_ticks()/1000; /// (TK_AST_FREQUENCY/1000);
80005326:	f0 16 00 2d 	mcall	r6[180]
8000532a:	18 99       	mov	r9,r12
8000532c:	e0 68 4d d3 	mov	r8,19923
80005330:	ea 18 10 62 	orh	r8,0x1062
80005334:	f2 08 06 48 	mulu.d	r8,r9,r8
80005338:	f2 08 16 06 	lsr	r8,r9,0x6
}	
8000533c:	10 9c       	mov	r12,r8
8000533e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005342:	00 00       	add	r0,r0
80005344:	80 00       	ld.sh	r0,r0[0x0]
80005346:	51 a8       	stdsp	sp[0x68],r8

80005348 <get_micros>:
uint32_t get_micros() {     // microseconds since system start. Will run over after an hour.
80005348:	eb cd 40 c0 	pushm	r6-r7,lr
8000534c:	1a 97       	mov	r7,sp
8000534e:	48 56       	lddpc	r6,80005360 <get_micros+0x18>
80005350:	1e 26       	rsub	r6,pc
	return get_time_ticks()* (1000000/TK_AST_FREQUENCY);
80005352:	f0 16 00 2d 	mcall	r6[180]
80005356:	18 98       	mov	r8,r12
}	
80005358:	10 9c       	mov	r12,r8
8000535a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000535e:	00 00       	add	r0,r0
80005360:	80 00       	ld.sh	r0,r0[0x0]
80005362:	51 d4       	stdsp	sp[0x74],r4

80005364 <get_time_ticks>:

uint32_t get_time_ticks(){ //raw timer ticks
80005364:	eb cd 40 c0 	pushm	r6-r7,lr
80005368:	1a 97       	mov	r7,sp
8000536a:	48 66       	lddpc	r6,80005380 <get_time_ticks+0x1c>
8000536c:	1e 26       	rsub	r6,pc
	return ast_get_counter_value(&AVR32_AST);
8000536e:	fe 7c 0c 00 	mov	r12,-62464
80005372:	f0 16 02 1d 	mcall	r6[2164]
80005376:	18 98       	mov	r8,r12
}
80005378:	10 9c       	mov	r12,r8
8000537a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000537e:	00 00       	add	r0,r0
80005380:	80 00       	ld.sh	r0,r0[0x0]
80005382:	51 f0       	stdsp	sp[0x7c],r0

80005384 <ticks_to_seconds>:

float ticks_to_seconds(uint32_t timer_ticks){
80005384:	eb cd 40 c0 	pushm	r6-r7,lr
80005388:	1a 97       	mov	r7,sp
8000538a:	20 1d       	sub	sp,4
8000538c:	48 d6       	lddpc	r6,800053c0 <ticks_to_seconds+0x3c>
8000538e:	1e 26       	rsub	r6,pc
80005390:	ef 4c ff fc 	st.w	r7[-4],r12
	return ((double)timer_ticks/(double)TK_AST_FREQUENCY);
80005394:	ee fc ff fc 	ld.w	r12,r7[-4]
80005398:	f0 16 00 52 	mcall	r6[328]
8000539c:	30 08       	mov	r8,0
8000539e:	e0 69 84 80 	mov	r9,33920
800053a2:	ea 19 41 2e 	orh	r9,0x412e
800053a6:	f0 16 00 0c 	mcall	r6[48]
800053aa:	14 98       	mov	r8,r10
800053ac:	16 99       	mov	r9,r11
800053ae:	10 9a       	mov	r10,r8
800053b0:	12 9b       	mov	r11,r9
800053b2:	f0 16 00 09 	mcall	r6[36]
800053b6:	18 98       	mov	r8,r12
}
800053b8:	10 9c       	mov	r12,r8
800053ba:	2f fd       	sub	sp,-4
800053bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800053c0:	80 00       	ld.sh	r0,r0[0x0]
800053c2:	52 12       	stdsp	sp[0x84],r2

800053c4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800053c4:	eb cd 40 c0 	pushm	r6-r7,lr
800053c8:	1a 97       	mov	r7,sp
800053ca:	20 6d       	sub	sp,24
800053cc:	49 e6       	lddpc	r6,80005444 <interpolate+0x80>
800053ce:	1e 26       	rsub	r6,pc
800053d0:	ef 4c ff f8 	st.w	r7[-8],r12
800053d4:	ef 4b ff f4 	st.w	r7[-12],r11
800053d8:	ef 4a ff f0 	st.w	r7[-16],r10
800053dc:	ef 49 ff ec 	st.w	r7[-20],r9
800053e0:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
800053e4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800053e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800053ec:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800053f0:	c0 41       	brne	800053f8 <interpolate+0x34>
	{
		return y1;
800053f2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800053f6:	c2 38       	rjmp	8000543c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
800053f8:	ee f9 ff e8 	ld.w	r9,r7[-24]
800053fc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005400:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80005404:	ee fa ff f8 	ld.w	r10,r7[-8]
80005408:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000540c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80005410:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005414:	ee fa ff f0 	ld.w	r10,r7[-16]
80005418:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000541c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80005420:	12 9b       	mov	r11,r9
80005422:	10 9c       	mov	r12,r8
80005424:	f0 16 00 08 	mcall	r6[32]
80005428:	18 98       	mov	r8,r12
8000542a:	10 99       	mov	r9,r8
8000542c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005430:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005434:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80005438:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000543c:	10 9c       	mov	r12,r8
8000543e:	2f ad       	sub	sp,-24
80005440:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005444:	80 00       	ld.sh	r0,r0[0x0]
80005446:	52 52       	stdsp	sp[0x94],r2

80005448 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80005448:	eb cd 40 c0 	pushm	r6-r7,lr
8000544c:	1a 97       	mov	r7,sp
8000544e:	20 3d       	sub	sp,12
80005450:	49 06       	lddpc	r6,80005490 <mav_array_memcpy+0x48>
80005452:	1e 26       	rsub	r6,pc
80005454:	ef 4c ff fc 	st.w	r7[-4],r12
80005458:	ef 4b ff f8 	st.w	r7[-8],r11
8000545c:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80005460:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005464:	58 08       	cp.w	r8,0
80005466:	c0 91       	brne	80005478 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80005468:	ee fa ff f4 	ld.w	r10,r7[-12]
8000546c:	30 0b       	mov	r11,0
8000546e:	ee fc ff fc 	ld.w	r12,r7[-4]
80005472:	f0 16 00 31 	mcall	r6[196]
80005476:	c0 98       	rjmp	80005488 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80005478:	ee fa ff f4 	ld.w	r10,r7[-12]
8000547c:	ee fb ff f8 	ld.w	r11,r7[-8]
80005480:	ee fc ff fc 	ld.w	r12,r7[-4]
80005484:	f0 16 00 1b 	mcall	r6[108]
	}
}
80005488:	2f dd       	sub	sp,-12
8000548a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000548e:	00 00       	add	r0,r0
80005490:	80 00       	ld.sh	r0,r0[0x0]
80005492:	52 d6       	stdsp	sp[0xb4],r6

80005494 <e_init>:

uint32_t timeLastGpsMsgEstimator;

//----------------------------INITIALISATION------------------------
void e_init()
{
80005494:	eb cd 40 c0 	pushm	r6-r7,lr
80005498:	1a 97       	mov	r7,sp
8000549a:	fe f6 02 06 	ld.w	r6,pc[518]
8000549e:	1e 26       	rsub	r6,pc
	//board=get_board_hardware();
	centralData=get_central_data();
800054a0:	f0 16 00 33 	mcall	r6[204]
800054a4:	18 99       	mov	r9,r12
800054a6:	ec f8 00 00 	ld.w	r8,r6[0]
800054aa:	91 09       	st.w	r8[0x0],r9
	e_kalman_init(X,INIT_X_P); //e stands for estimator not extended
800054ac:	fc 1b 41 20 	movh	r11,0x4120
800054b0:	30 0c       	mov	r12,0
800054b2:	f0 16 00 cb 	mcall	r6[812]
	e_kalman_init(Y,INIT_Y_P);
800054b6:	fc 1b 41 20 	movh	r11,0x4120
800054ba:	30 1c       	mov	r12,1
800054bc:	f0 16 00 cb 	mcall	r6[812]
	e_kalman_init(Z,INIT_Z_P);
800054c0:	fc 1b 41 20 	movh	r11,0x4120
800054c4:	30 2c       	mov	r12,2
800054c6:	f0 16 00 cb 	mcall	r6[812]
	Q[0][0]=Q_X0;
800054ca:	ec fa 00 e0 	ld.w	r10,r6[224]
800054ce:	e0 68 a9 fc 	mov	r8,43516
800054d2:	ea 18 d2 f1 	orh	r8,0xd2f1
800054d6:	e0 69 62 4d 	mov	r9,25165
800054da:	ea 19 3f 50 	orh	r9,0x3f50
800054de:	f4 e9 00 00 	st.d	r10[0],r8
	Q[0][1]=Q_X1;
800054e2:	ec fa 00 e0 	ld.w	r10,r6[224]
800054e6:	30 08       	mov	r8,0
800054e8:	30 09       	mov	r9,0
800054ea:	f4 e9 00 08 	st.d	r10[8],r8
	Q[0][2]=Q_X2;
800054ee:	ec fa 00 e0 	ld.w	r10,r6[224]
800054f2:	30 08       	mov	r8,0
800054f4:	30 09       	mov	r9,0
800054f6:	f4 e9 00 10 	st.d	r10[16],r8
	Q[1][0]=Q_Y0;
800054fa:	ec fa 00 e0 	ld.w	r10,r6[224]
800054fe:	30 08       	mov	r8,0
80005500:	30 09       	mov	r9,0
80005502:	f4 e9 00 18 	st.d	r10[24],r8
	Q[1][1]=Q_Y1;
80005506:	ec fa 00 e0 	ld.w	r10,r6[224]
8000550a:	e0 68 a9 fc 	mov	r8,43516
8000550e:	ea 18 d2 f1 	orh	r8,0xd2f1
80005512:	e0 69 62 4d 	mov	r9,25165
80005516:	ea 19 3f 50 	orh	r9,0x3f50
8000551a:	f4 e9 00 20 	st.d	r10[32],r8
	Q[1][2]=Q_Y2;
8000551e:	ec fa 00 e0 	ld.w	r10,r6[224]
80005522:	30 08       	mov	r8,0
80005524:	30 09       	mov	r9,0
80005526:	f4 e9 00 28 	st.d	r10[40],r8
	Q[2][0]=Q_Z0;
8000552a:	ec fa 00 e0 	ld.w	r10,r6[224]
8000552e:	30 08       	mov	r8,0
80005530:	30 09       	mov	r9,0
80005532:	f4 e9 00 30 	st.d	r10[48],r8
	Q[2][1]=Q_Z1;
80005536:	ec fa 00 e0 	ld.w	r10,r6[224]
8000553a:	30 08       	mov	r8,0
8000553c:	30 09       	mov	r9,0
8000553e:	f4 e9 00 38 	st.d	r10[56],r8
	Q[2][2]=Q_Z2;
80005542:	ec fa 00 e0 	ld.w	r10,r6[224]
80005546:	e0 68 a9 fc 	mov	r8,43516
8000554a:	ea 18 d2 f1 	orh	r8,0xd2f1
8000554e:	e0 69 62 4d 	mov	r9,25165
80005552:	ea 19 3f 50 	orh	r9,0x3f50
80005556:	f4 e9 00 40 	st.d	r10[64],r8
	R[0]=R_X_POS;
8000555a:	ec fa 01 74 	ld.w	r10,r6[372]
8000555e:	e0 68 b0 21 	mov	r8,45089
80005562:	ea 18 68 72 	orh	r8,0x6872
80005566:	e0 69 ed 91 	mov	r9,60817
8000556a:	ea 19 3f d8 	orh	r9,0x3fd8
8000556e:	f4 e9 00 00 	st.d	r10[0],r8
	R[1]=R_Y_POS;
80005572:	ec fa 01 74 	ld.w	r10,r6[372]
80005576:	e0 68 a1 62 	mov	r8,41314
8000557a:	ea 18 34 d6 	orh	r8,0x34d6
8000557e:	e0 69 38 ef 	mov	r9,14575
80005582:	ea 19 3f e3 	orh	r9,0x3fe3
80005586:	f4 e9 00 08 	st.d	r10[8],r8
	R[2]=R_Z_POS;
8000558a:	ec fa 01 74 	ld.w	r10,r6[372]
8000558e:	e0 68 6e 2f 	mov	r8,28207
80005592:	ea 18 01 a3 	orh	r8,0x1a3
80005596:	e0 69 05 bc 	mov	r9,1468
8000559a:	ea 19 40 05 	orh	r9,0x4005
8000559e:	f4 e9 00 10 	st.d	r10[16],r8
	
	Q2[0][0]=Q_X0;
800055a2:	ec fa 00 e4 	ld.w	r10,r6[228]
800055a6:	e0 68 a9 fc 	mov	r8,43516
800055aa:	ea 18 d2 f1 	orh	r8,0xd2f1
800055ae:	e0 69 62 4d 	mov	r9,25165
800055b2:	ea 19 3f 50 	orh	r9,0x3f50
800055b6:	f4 e9 00 00 	st.d	r10[0],r8
	Q2[0][1]=Q_X1;
800055ba:	ec fa 00 e4 	ld.w	r10,r6[228]
800055be:	30 08       	mov	r8,0
800055c0:	30 09       	mov	r9,0
800055c2:	f4 e9 00 08 	st.d	r10[8],r8
	Q2[0][2]=Q_X2;
800055c6:	ec fa 00 e4 	ld.w	r10,r6[228]
800055ca:	30 08       	mov	r8,0
800055cc:	30 09       	mov	r9,0
800055ce:	f4 e9 00 10 	st.d	r10[16],r8
	Q2[1][0]=Q_Y0;
800055d2:	ec fa 00 e4 	ld.w	r10,r6[228]
800055d6:	30 08       	mov	r8,0
800055d8:	30 09       	mov	r9,0
800055da:	f4 e9 00 18 	st.d	r10[24],r8
	Q2[1][1]=Q_Y1;
800055de:	ec fa 00 e4 	ld.w	r10,r6[228]
800055e2:	e0 68 a9 fc 	mov	r8,43516
800055e6:	ea 18 d2 f1 	orh	r8,0xd2f1
800055ea:	e0 69 62 4d 	mov	r9,25165
800055ee:	ea 19 3f 50 	orh	r9,0x3f50
800055f2:	f4 e9 00 20 	st.d	r10[32],r8
	Q2[1][2]=Q_Y2;
800055f6:	ec fa 00 e4 	ld.w	r10,r6[228]
800055fa:	30 08       	mov	r8,0
800055fc:	30 09       	mov	r9,0
800055fe:	f4 e9 00 28 	st.d	r10[40],r8
	Q2[2][0]=Q_Z0;
80005602:	ec fa 00 e4 	ld.w	r10,r6[228]
80005606:	30 08       	mov	r8,0
80005608:	30 09       	mov	r9,0
8000560a:	f4 e9 00 30 	st.d	r10[48],r8
	Q2[2][1]=Q_Z1;
8000560e:	ec fa 00 e4 	ld.w	r10,r6[228]
80005612:	30 08       	mov	r8,0
80005614:	30 09       	mov	r9,0
80005616:	f4 e9 00 38 	st.d	r10[56],r8
	Q2[2][2]=Q_Z2;
8000561a:	ec fa 00 e4 	ld.w	r10,r6[228]
8000561e:	e0 68 a9 fc 	mov	r8,43516
80005622:	ea 18 d2 f1 	orh	r8,0xd2f1
80005626:	e0 69 62 4d 	mov	r9,25165
8000562a:	ea 19 3f 50 	orh	r9,0x3f50
8000562e:	f4 e9 00 40 	st.d	r10[64],r8
	R2[0]=R_X_POS;
80005632:	ec fa 01 70 	ld.w	r10,r6[368]
80005636:	e0 68 b0 21 	mov	r8,45089
8000563a:	ea 18 68 72 	orh	r8,0x6872
8000563e:	e0 69 ed 91 	mov	r9,60817
80005642:	ea 19 3f d8 	orh	r9,0x3fd8
80005646:	f4 e9 00 00 	st.d	r10[0],r8
	R2[1]=R_Y_POS;
8000564a:	ec fa 01 70 	ld.w	r10,r6[368]
8000564e:	e0 68 a1 62 	mov	r8,41314
80005652:	ea 18 34 d6 	orh	r8,0x34d6
80005656:	e0 69 38 ef 	mov	r9,14575
8000565a:	ea 19 3f e3 	orh	r9,0x3fe3
8000565e:	f4 e9 00 08 	st.d	r10[8],r8
	R2[2]=R_Z_POS;
80005662:	ec fa 01 70 	ld.w	r10,r6[368]
80005666:	e0 68 6e 2f 	mov	r8,28207
8000566a:	ea 18 01 a3 	orh	r8,0x1a3
8000566e:	e0 69 05 bc 	mov	r9,1468
80005672:	ea 19 40 05 	orh	r9,0x4005
80005676:	f4 e9 00 10 	st.d	r10[16],r8
	
	centralData->position_estimator.init_gps_position = false;
8000567a:	ec f8 00 00 	ld.w	r8,r6[0]
8000567e:	70 09       	ld.w	r9,r8[0x0]
80005680:	30 08       	mov	r8,0
80005682:	f3 68 09 ac 	st.b	r9[2476],r8
	
	timeLastGpsMsgEstimator = 0;
80005686:	ec f8 02 ac 	ld.w	r8,r6[684]
8000568a:	30 09       	mov	r9,0
8000568c:	91 09       	st.w	r8[0x0],r9
	
	filter_init_delta_t = false;
8000568e:	ec f9 02 f4 	ld.w	r9,r6[756]
80005692:	30 08       	mov	r8,0
80005694:	b2 88       	st.b	r9[0x0],r8
	
	init_pos_gps_estimator();
80005696:	f0 16 01 1c 	mcall	r6[1136]
}
8000569a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000569e:	00 00       	add	r0,r0
800056a0:	80 00       	ld.sh	r0,r0[0x0]
800056a2:	53 22       	stdsp	sp[0xc8],r2
800056a4:	47 50       	lddsp	r0,sp[0x1d4]
800056a6:	53 20       	stdsp	sp[0xc8],r0
800056a8:	70 6f       	ld.w	pc,r8[0x18]
800056aa:	73 69       	ld.w	r9,r9[0x58]
800056ac:	74 69       	ld.w	r9,r10[0x18]
800056ae:	6f 6e       	ld.w	lr,r7[0x58]
800056b0:	20 69       	sub	r9,6
800056b2:	6e 69       	ld.w	r9,r7[0x18]
800056b4:	74 69       	ld.w	r9,r10[0x18]
800056b6:	61 6c       	ld.w	r12,r0[0x58]
800056b8:	69 7a       	ld.w	r10,r4[0x5c]
800056ba:	65 64       	ld.w	r4,r2[0x58]
800056bc:	21 0a       	sub	r10,16
	...

800056c0 <init_pos_gps_estimator>:

void init_pos_gps_estimator()
{
800056c0:	eb cd 40 c0 	pushm	r6-r7,lr
800056c4:	1a 97       	mov	r7,sp
800056c6:	49 f6       	lddpc	r6,80005740 <init_pos_gps_estimator+0x80>
800056c8:	1e 26       	rsub	r6,pc
	if (newValidGpsMsg(&timeLastGpsMsgEstimator) && (!(centralData->position_estimator.init_gps_position)))
800056ca:	ec fc 02 ac 	ld.w	r12,r6[684]
800056ce:	f0 16 00 9a 	mcall	r6[616]
800056d2:	18 98       	mov	r8,r12
800056d4:	58 08       	cp.w	r8,0
800056d6:	c3 20       	breq	8000573a <init_pos_gps_estimator+0x7a>
800056d8:	ec f8 00 00 	ld.w	r8,r6[0]
800056dc:	70 08       	ld.w	r8,r8[0x0]
800056de:	f1 38 09 ac 	ld.ub	r8,r8[2476]
800056e2:	ec 18 00 01 	eorl	r8,0x1
800056e6:	5c 58       	castu.b	r8
800056e8:	c2 90       	breq	8000573a <init_pos_gps_estimator+0x7a>
	{
		centralData->position_estimator.init_gps_position = true;
800056ea:	ec f8 00 00 	ld.w	r8,r6[0]
800056ee:	70 09       	ld.w	r9,r8[0x0]
800056f0:	30 18       	mov	r8,1
800056f2:	f3 68 09 ac 	st.b	r9[2476],r8
		
		centralData->position_estimator.localPosition.origin.longitude = centralData->GPS_data.longitude;
800056f6:	ec f8 00 00 	ld.w	r8,r6[0]
800056fa:	70 0a       	ld.w	r10,r8[0x0]
800056fc:	ec f8 00 00 	ld.w	r8,r6[0]
80005700:	70 08       	ld.w	r8,r8[0x0]
80005702:	f0 e8 07 58 	ld.d	r8,r8[1880]
80005706:	f4 e9 09 f4 	st.d	r10[2548],r8
		centralData->position_estimator.localPosition.origin.latitude = centralData->GPS_data.latitude;
8000570a:	ec f8 00 00 	ld.w	r8,r6[0]
8000570e:	70 0a       	ld.w	r10,r8[0x0]
80005710:	ec f8 00 00 	ld.w	r8,r6[0]
80005714:	70 08       	ld.w	r8,r8[0x0]
80005716:	f0 e8 07 50 	ld.d	r8,r8[1872]
8000571a:	f4 e9 09 fc 	st.d	r10[2556],r8
		centralData->position_estimator.localPosition.origin.altitude = centralData->GPS_data.altitude;
8000571e:	ec f8 00 00 	ld.w	r8,r6[0]
80005722:	70 08       	ld.w	r8,r8[0x0]
80005724:	ec f9 00 00 	ld.w	r9,r6[0]
80005728:	72 09       	ld.w	r9,r9[0x0]
8000572a:	f2 f9 07 60 	ld.w	r9,r9[1888]
8000572e:	f1 49 0a 04 	st.w	r8[2564],r9
		
		dbg_print("GPS position initialized!\n");
80005732:	fe cc 00 8e 	sub	r12,pc,142
80005736:	f0 16 00 01 	mcall	r6[4]
	}
}
8000573a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000573e:	00 00       	add	r0,r0
80005740:	80 00       	ld.sh	r0,r0[0x0]
80005742:	55 4c       	stdsp	sp[0x150],r12

80005744 <e_kalman_init>:

void e_kalman_init (int axis,float init_p) // axis = Z, X or Y
{
80005744:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80005748:	1a 97       	mov	r7,sp
8000574a:	20 4d       	sub	sp,16
8000574c:	4d e6       	lddpc	r6,800058c4 <e_kalman_init+0x180>
8000574e:	1e 26       	rsub	r6,pc
80005750:	ef 4c ff f4 	st.w	r7[-12],r12
80005754:	ef 4b ff f0 	st.w	r7[-16],r11
	int i, j;
	
	centralData->estimation.state[axis][POSITION] = 0; // Differential par rapport au point de depart
80005758:	ec f8 00 00 	ld.w	r8,r6[0]
8000575c:	70 0a       	ld.w	r10,r8[0x0]
8000575e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005762:	12 98       	mov	r8,r9
80005764:	a1 78       	lsl	r8,0x1
80005766:	12 08       	add	r8,r9
80005768:	a3 78       	lsl	r8,0x3
8000576a:	f4 08 00 08 	add	r8,r10,r8
8000576e:	f0 ca f8 5c 	sub	r10,r8,-1956
80005772:	30 08       	mov	r8,0
80005774:	30 09       	mov	r9,0
80005776:	f4 e9 00 00 	st.d	r10[0],r8
	centralData->estimation.state[axis][SPEED] = 0;
8000577a:	ec f8 00 00 	ld.w	r8,r6[0]
8000577e:	70 0a       	ld.w	r10,r8[0x0]
80005780:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005784:	12 98       	mov	r8,r9
80005786:	a1 78       	lsl	r8,0x1
80005788:	12 08       	add	r8,r9
8000578a:	2f f8       	sub	r8,-1
8000578c:	a3 78       	lsl	r8,0x3
8000578e:	f4 08 00 08 	add	r8,r10,r8
80005792:	30 0a       	mov	r10,0
80005794:	30 0b       	mov	r11,0
80005796:	f0 eb 07 a4 	st.d	r8[1956],r10
	
	centralData->estimation.state[axis][BIAIS] = centralData->imu1.attitude.be[axis + ACC_OFFSET];
8000579a:	ec f8 00 00 	ld.w	r8,r6[0]
8000579e:	70 03       	ld.w	r3,r8[0x0]
800057a0:	ee f5 ff f4 	ld.w	r5,r7[-12]
800057a4:	ec f8 00 00 	ld.w	r8,r6[0]
800057a8:	70 08       	ld.w	r8,r8[0x0]
800057aa:	ee f9 ff f4 	ld.w	r9,r7[-12]
800057ae:	2f d9       	sub	r9,-3
800057b0:	2f 49       	sub	r9,-12
800057b2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800057b6:	10 9c       	mov	r12,r8
800057b8:	f0 16 00 02 	mcall	r6[8]
800057bc:	0a 98       	mov	r8,r5
800057be:	a1 78       	lsl	r8,0x1
800057c0:	0a 08       	add	r8,r5
800057c2:	a3 78       	lsl	r8,0x3
800057c4:	e6 08 00 08 	add	r8,r3,r8
800057c8:	f0 c8 f8 4c 	sub	r8,r8,-1972
800057cc:	f0 eb 00 00 	st.d	r8[0],r10
	
	for (i=0; i<3; i++)
800057d0:	30 08       	mov	r8,0
800057d2:	ef 48 ff f8 	st.w	r7[-8],r8
800057d6:	c6 e8       	rjmp	800058b2 <e_kalman_init+0x16e>
	{
		for (j=0; j<3; j++)
800057d8:	30 08       	mov	r8,0
800057da:	ef 48 ff fc 	st.w	r7[-4],r8
800057de:	c3 28       	rjmp	80005842 <e_kalman_init+0xfe>
		{
			P[axis][i][j] = 0.0;
800057e0:	ee fa ff f4 	ld.w	r10,r7[-12]
800057e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800057e8:	ee fc ff fc 	ld.w	r12,r7[-4]
800057ec:	ec fb 00 18 	ld.w	r11,r6[24]
800057f0:	10 99       	mov	r9,r8
800057f2:	a1 79       	lsl	r9,0x1
800057f4:	10 09       	add	r9,r8
800057f6:	14 98       	mov	r8,r10
800057f8:	a3 78       	lsl	r8,0x3
800057fa:	14 08       	add	r8,r10
800057fc:	f2 08 00 08 	add	r8,r9,r8
80005800:	f0 0c 00 0a 	add	r10,r8,r12
80005804:	30 08       	mov	r8,0
80005806:	30 09       	mov	r9,0
80005808:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
			P2[axis][i][j] = 0.0;
8000580c:	ee fa ff f4 	ld.w	r10,r7[-12]
80005810:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005814:	ee fc ff fc 	ld.w	r12,r7[-4]
80005818:	ec fb 00 1c 	ld.w	r11,r6[28]
8000581c:	10 99       	mov	r9,r8
8000581e:	a1 79       	lsl	r9,0x1
80005820:	10 09       	add	r9,r8
80005822:	14 98       	mov	r8,r10
80005824:	a3 78       	lsl	r8,0x3
80005826:	14 08       	add	r8,r10
80005828:	f2 08 00 08 	add	r8,r9,r8
8000582c:	f0 0c 00 0a 	add	r10,r8,r12
80005830:	30 08       	mov	r8,0
80005832:	30 09       	mov	r9,0
80005834:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
	
	centralData->estimation.state[axis][BIAIS] = centralData->imu1.attitude.be[axis + ACC_OFFSET];
	
	for (i=0; i<3; i++)
	{
		for (j=0; j<3; j++)
80005838:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000583c:	2f f8       	sub	r8,-1
8000583e:	ef 48 ff fc 	st.w	r7[-4],r8
80005842:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005846:	58 28       	cp.w	r8,2
80005848:	fe 9a ff cc 	brle	800057e0 <e_kalman_init+0x9c>
		{
			P[axis][i][j] = 0.0;
			P2[axis][i][j] = 0.0;
		}
		P[axis][i][i] = init_p;
8000584c:	ee f5 ff f4 	ld.w	r5,r7[-12]
80005850:	ee f3 ff f8 	ld.w	r3,r7[-8]
80005854:	ee f2 ff f8 	ld.w	r2,r7[-8]
80005858:	ee fc ff f0 	ld.w	r12,r7[-16]
8000585c:	f0 16 00 02 	mcall	r6[8]
80005860:	ec fc 00 18 	ld.w	r12,r6[24]
80005864:	06 99       	mov	r9,r3
80005866:	a1 79       	lsl	r9,0x1
80005868:	06 09       	add	r9,r3
8000586a:	0a 98       	mov	r8,r5
8000586c:	a3 78       	lsl	r8,0x3
8000586e:	0a 08       	add	r8,r5
80005870:	f2 08 00 08 	add	r8,r9,r8
80005874:	04 08       	add	r8,r2
80005876:	f8 08 08 3a 	st.d	r12[r8<<0x3],r10
		P2[axis][i][i] = init_p;
8000587a:	ee f5 ff f4 	ld.w	r5,r7[-12]
8000587e:	ee f3 ff f8 	ld.w	r3,r7[-8]
80005882:	ee f2 ff f8 	ld.w	r2,r7[-8]
80005886:	ee fc ff f0 	ld.w	r12,r7[-16]
8000588a:	f0 16 00 02 	mcall	r6[8]
8000588e:	ec fc 00 1c 	ld.w	r12,r6[28]
80005892:	06 99       	mov	r9,r3
80005894:	a1 79       	lsl	r9,0x1
80005896:	06 09       	add	r9,r3
80005898:	0a 98       	mov	r8,r5
8000589a:	a3 78       	lsl	r8,0x3
8000589c:	0a 08       	add	r8,r5
8000589e:	f2 08 00 08 	add	r8,r9,r8
800058a2:	04 08       	add	r8,r2
800058a4:	f8 08 08 3a 	st.d	r12[r8<<0x3],r10
	centralData->estimation.state[axis][POSITION] = 0; // Differential par rapport au point de depart
	centralData->estimation.state[axis][SPEED] = 0;
	
	centralData->estimation.state[axis][BIAIS] = centralData->imu1.attitude.be[axis + ACC_OFFSET];
	
	for (i=0; i<3; i++)
800058a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800058ac:	2f f8       	sub	r8,-1
800058ae:	ef 48 ff f8 	st.w	r7[-8],r8
800058b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800058b6:	58 28       	cp.w	r8,2
800058b8:	fe 9a ff 90 	brle	800057d8 <e_kalman_init+0x94>
			P2[axis][i][j] = 0.0;
		}
		P[axis][i][i] = init_p;
		P2[axis][i][i] = init_p;
	}
}
800058bc:	2f cd       	sub	sp,-16
800058be:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
800058c2:	00 00       	add	r0,r0
800058c4:	80 00       	ld.sh	r0,r0[0x0]
800058c6:	55 d2       	stdsp	sp[0x174],r2

800058c8 <e_predict>:

//------------------------------PREDICTION--------------------------
void e_predict (UQuat_t *qe, float a[], float dt)
{
800058c8:	eb cd 40 c0 	pushm	r6-r7,lr
800058cc:	1a 97       	mov	r7,sp
800058ce:	21 9d       	sub	sp,100
800058d0:	fe f6 03 00 	ld.w	r6,pc[768]
800058d4:	1e 26       	rsub	r6,pc
800058d6:	ef 4c ff a4 	st.w	r7[-92],r12
800058da:	ef 4b ff a0 	st.w	r7[-96],r11
800058de:	ef 4a ff 9c 	st.w	r7[-100],r10
	//MUL_V_SCA(z,-a[2])
	//e_kalman_predict(X,(x[0]*x[0]+y[0]*y[0]+z[0]*z[0]),dt);//final x (in NED) acc
	//e_kalman_predict(Y,(x[1]*x[1]+y[1]*y[1]+z[1]*z[1]),dt);
	//e_kalman_predict(Z,(x[2]*x[2]+y[2]*y[2]+z[2]*z[2]),dt);
	
	qe_tmp = *qe;
800058e2:	ee f9 ff a4 	ld.w	r9,r7[-92]
800058e6:	ee c8 00 40 	sub	r8,r7,64
800058ea:	20 08       	sub	r8,0
800058ec:	20 09       	sub	r9,0
800058ee:	72 0a       	ld.w	r10,r9[0x0]
800058f0:	91 0a       	st.w	r8[0x0],r10
800058f2:	72 1a       	ld.w	r10,r9[0x4]
800058f4:	91 1a       	st.w	r8[0x4],r10
800058f6:	72 2a       	ld.w	r10,r9[0x8]
800058f8:	91 2a       	st.w	r8[0x8],r10
800058fa:	72 39       	ld.w	r9,r9[0xc]
800058fc:	91 39       	st.w	r8[0xc],r9
	
	// compute acceleration in global frame
	// acc_glo = qe * acc_bf * qe-1
	qtmp1.s=0.0; qtmp1.v[0]=a[0]; qtmp1.v[1]=a[1];qtmp1.v[2]=a[2];
800058fe:	30 08       	mov	r8,0
80005900:	ef 48 ff f0 	st.w	r7[-16],r8
80005904:	ee f8 ff a0 	ld.w	r8,r7[-96]
80005908:	70 08       	ld.w	r8,r8[0x0]
8000590a:	ef 48 ff f4 	st.w	r7[-12],r8
8000590e:	ee f8 ff a0 	ld.w	r8,r7[-96]
80005912:	2f c8       	sub	r8,-4
80005914:	70 08       	ld.w	r8,r8[0x0]
80005916:	ef 48 ff f8 	st.w	r7[-8],r8
8000591a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000591e:	2f 88       	sub	r8,-8
80005920:	70 08       	ld.w	r8,r8[0x0]
80005922:	ef 48 ff fc 	st.w	r7[-4],r8
	QMUL(qe_tmp,qtmp1,qtmp2);
80005926:	ee f9 ff c8 	ld.w	r9,r7[-56]
8000592a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000592e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005932:	ee fa ff cc 	ld.w	r10,r7[-52]
80005936:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000593a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000593e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005942:	ef 48 ff b4 	st.w	r7[-76],r8
80005946:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000594a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000594e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005952:	ee fa ff c4 	ld.w	r10,r7[-60]
80005956:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000595a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000595e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005962:	ef 48 ff b8 	st.w	r7[-72],r8
80005966:	ee f9 ff c4 	ld.w	r9,r7[-60]
8000596a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000596e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005972:	ee fa ff c8 	ld.w	r10,r7[-56]
80005976:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000597a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000597e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005982:	ef 48 ff bc 	st.w	r7[-68],r8
80005986:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000598a:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000598e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005992:	ee fa ff c0 	ld.w	r10,r7[-64]
80005996:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000599a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000599e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800059a2:	ee f8 ff b4 	ld.w	r8,r7[-76]
800059a6:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800059aa:	ef 48 ff e4 	st.w	r7[-28],r8
800059ae:	ee f9 ff f0 	ld.w	r9,r7[-16]
800059b2:	ee f8 ff c8 	ld.w	r8,r7[-56]
800059b6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800059ba:	ee fa ff c0 	ld.w	r10,r7[-64]
800059be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800059c2:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800059c6:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800059ca:	ee f8 ff b8 	ld.w	r8,r7[-72]
800059ce:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800059d2:	ef 48 ff e8 	st.w	r7[-24],r8
800059d6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800059da:	ee f8 ff cc 	ld.w	r8,r7[-52]
800059de:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800059e2:	ee fa ff c0 	ld.w	r10,r7[-64]
800059e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800059ea:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800059ee:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800059f2:	ee f8 ff bc 	ld.w	r8,r7[-68]
800059f6:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800059fa:	ef 48 ff ec 	st.w	r7[-20],r8
800059fe:	ee f9 ff c0 	ld.w	r9,r7[-64]
80005a02:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005a06:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005a0a:	ee fa ff c4 	ld.w	r10,r7[-60]
80005a0e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005a12:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80005a16:	ee fb ff c8 	ld.w	r11,r7[-56]
80005a1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a1e:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80005a22:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
80005a26:	ee fb ff cc 	ld.w	r11,r7[-52]
80005a2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a2e:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80005a32:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80005a36:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005a3a:	ef 48 ff e0 	st.w	r7[-32],r8
	QI(qe_tmp,qtmp1);
80005a3e:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005a42:	ef 48 ff f0 	st.w	r7[-16],r8
80005a46:	ee f8 ff c4 	ld.w	r8,r7[-60]
80005a4a:	ee 18 80 00 	eorh	r8,0x8000
80005a4e:	ef 48 ff f4 	st.w	r7[-12],r8
80005a52:	ee f8 ff c8 	ld.w	r8,r7[-56]
80005a56:	ee 18 80 00 	eorh	r8,0x8000
80005a5a:	ef 48 ff f8 	st.w	r7[-8],r8
80005a5e:	ee f8 ff cc 	ld.w	r8,r7[-52]
80005a62:	ee 18 80 00 	eorh	r8,0x8000
80005a66:	ef 48 ff fc 	st.w	r7[-4],r8
	QMUL(qtmp2,qtmp1,qtmp3);
80005a6a:	ee f9 ff e8 	ld.w	r9,r7[-24]
80005a6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a72:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005a76:	ee fa ff ec 	ld.w	r10,r7[-20]
80005a7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005a7e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005a82:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005a86:	ef 48 ff b4 	st.w	r7[-76],r8
80005a8a:	ee f9 ff ec 	ld.w	r9,r7[-20]
80005a8e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005a92:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005a96:	ee fa ff e4 	ld.w	r10,r7[-28]
80005a9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005a9e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005aa2:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005aa6:	ef 48 ff b8 	st.w	r7[-72],r8
80005aaa:	ee f9 ff e4 	ld.w	r9,r7[-28]
80005aae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005ab2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005ab6:	ee fa ff e8 	ld.w	r10,r7[-24]
80005aba:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005abe:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005ac2:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005ac6:	ef 48 ff bc 	st.w	r7[-68],r8
80005aca:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005ace:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005ad2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005ad6:	ee fa ff e0 	ld.w	r10,r7[-32]
80005ada:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005ade:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005ae2:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005ae6:	ee f8 ff b4 	ld.w	r8,r7[-76]
80005aea:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005aee:	ef 48 ff d4 	st.w	r7[-44],r8
80005af2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005af6:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005afa:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005afe:	ee fa ff e0 	ld.w	r10,r7[-32]
80005b02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b06:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005b0a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005b0e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80005b12:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005b16:	ef 48 ff d8 	st.w	r7[-40],r8
80005b1a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005b1e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005b22:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005b26:	ee fa ff e0 	ld.w	r10,r7[-32]
80005b2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005b2e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005b32:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005b36:	ee f8 ff bc 	ld.w	r8,r7[-68]
80005b3a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005b3e:	ef 48 ff dc 	st.w	r7[-36],r8
80005b42:	ee f9 ff e0 	ld.w	r9,r7[-32]
80005b46:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005b4a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005b4e:	ee fa ff e4 	ld.w	r10,r7[-28]
80005b52:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005b56:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80005b5a:	ee fb ff e8 	ld.w	r11,r7[-24]
80005b5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005b62:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80005b66:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
80005b6a:	ee fb ff ec 	ld.w	r11,r7[-20]
80005b6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005b72:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80005b76:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80005b7a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005b7e:	ef 48 ff d0 	st.w	r7[-48],r8
	acc_glo[0]=qtmp3.v[0];acc_glo[1]=qtmp3.v[1];acc_glo[2]=qtmp3.v[2];
80005b82:	ee f8 ff d4 	ld.w	r8,r7[-44]
80005b86:	ef 48 ff a8 	st.w	r7[-88],r8
80005b8a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80005b8e:	ef 48 ff ac 	st.w	r7[-84],r8
80005b92:	ee f8 ff dc 	ld.w	r8,r7[-36]
80005b96:	ef 48 ff b0 	st.w	r7[-80],r8
	//dbg_print_num(centralData->imu1.attitude.a[X]*1000,10);
	//dbg_print_num(centralData->imu1.attitude.a[Y]*1000,10);
	//dbg_print_num(centralData->imu1.attitude.a[Z]*1000,10);
	//dbg_print("\n");

	e_kalman_predict(X,acc_glo[X],dt);//final x (in NED) acc
80005b9a:	ee f8 ff a8 	ld.w	r8,r7[-88]
80005b9e:	ee fa ff 9c 	ld.w	r10,r7[-100]
80005ba2:	10 9b       	mov	r11,r8
80005ba4:	30 0c       	mov	r12,0
80005ba6:	f0 16 00 d0 	mcall	r6[832]
	e_kalman_predict(Y,acc_glo[Y],dt);
80005baa:	ee f8 ff ac 	ld.w	r8,r7[-84]
80005bae:	ee fa ff 9c 	ld.w	r10,r7[-100]
80005bb2:	10 9b       	mov	r11,r8
80005bb4:	30 1c       	mov	r12,1
80005bb6:	f0 16 00 d0 	mcall	r6[832]
	//e_kalman_predict_hf(X,acc_glo[X],dt);//final x (in NED) acc
	//e_kalman_predict_hf(Y,acc_glo[Y],dt);
	e_kalman_predict(Z,acc_glo[Z],dt);
80005bba:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005bbe:	ee fa ff 9c 	ld.w	r10,r7[-100]
80005bc2:	10 9b       	mov	r11,r8
80005bc4:	30 2c       	mov	r12,2
80005bc6:	f0 16 00 d0 	mcall	r6[832]
}
80005bca:	2e 7d       	sub	sp,-100
80005bcc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005bd0:	80 00       	ld.sh	r0,r0[0x0]
80005bd2:	57 58       	stdsp	sp[0x1d4],r8

80005bd4 <quat_rot>:

//Rotation of vector vect with the quaternion quat
void quat_rot(UQuat_t *quat,float *vect)
{
80005bd4:	eb cd 40 80 	pushm	r7,lr
80005bd8:	1a 97       	mov	r7,sp
80005bda:	20 8d       	sub	sp,32
80005bdc:	ef 4c ff e4 	st.w	r7[-28],r12
80005be0:	ef 4b ff e0 	st.w	r7[-32],r11
	float temp1[3],temp2[3];
	CP((*quat).v,vect,temp1);
80005be4:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005be8:	70 29       	ld.w	r9,r8[0x8]
80005bea:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005bee:	2f 88       	sub	r8,-8
80005bf0:	70 08       	ld.w	r8,r8[0x0]
80005bf2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005bf6:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005bfa:	70 3a       	ld.w	r10,r8[0xc]
80005bfc:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005c00:	2f c8       	sub	r8,-4
80005c02:	70 08       	ld.w	r8,r8[0x0]
80005c04:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005c08:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005c0c:	ef 48 ff f4 	st.w	r7[-12],r8
80005c10:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005c14:	70 39       	ld.w	r9,r8[0xc]
80005c16:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005c1a:	70 08       	ld.w	r8,r8[0x0]
80005c1c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005c20:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005c24:	70 1a       	ld.w	r10,r8[0x4]
80005c26:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005c2a:	2f 88       	sub	r8,-8
80005c2c:	70 08       	ld.w	r8,r8[0x0]
80005c2e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005c32:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005c36:	ef 48 ff f8 	st.w	r7[-8],r8
80005c3a:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005c3e:	70 19       	ld.w	r9,r8[0x4]
80005c40:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005c44:	2f c8       	sub	r8,-4
80005c46:	70 08       	ld.w	r8,r8[0x0]
80005c48:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005c4c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005c50:	70 2a       	ld.w	r10,r8[0x8]
80005c52:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005c56:	70 08       	ld.w	r8,r8[0x0]
80005c58:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005c5c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005c60:	ef 48 ff fc 	st.w	r7[-4],r8
	temp1[0]=temp1[0]+(*quat).s*vect[0];
80005c64:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005c68:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005c6c:	70 0a       	ld.w	r10,r8[0x0]
80005c6e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005c72:	70 08       	ld.w	r8,r8[0x0]
80005c74:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005c78:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005c7c:	ef 48 ff f4 	st.w	r7[-12],r8
	temp1[1]=temp1[1]+(*quat).s*vect[1];
80005c80:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005c84:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005c88:	70 0a       	ld.w	r10,r8[0x0]
80005c8a:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005c8e:	2f c8       	sub	r8,-4
80005c90:	70 08       	ld.w	r8,r8[0x0]
80005c92:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005c96:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005c9a:	ef 48 ff f8 	st.w	r7[-8],r8
	temp1[2]=temp1[2]+(*quat).s*vect[2];
80005c9e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005ca2:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005ca6:	70 0a       	ld.w	r10,r8[0x0]
80005ca8:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005cac:	2f 88       	sub	r8,-8
80005cae:	70 08       	ld.w	r8,r8[0x0]
80005cb0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005cb4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005cb8:	ef 48 ff fc 	st.w	r7[-4],r8
	CP((*quat).v,temp1,temp2);
80005cbc:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005cc0:	70 29       	ld.w	r9,r8[0x8]
80005cc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005cc6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005cca:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005cce:	70 3a       	ld.w	r10,r8[0xc]
80005cd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005cd4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005cd8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005cdc:	ef 48 ff e8 	st.w	r7[-24],r8
80005ce0:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005ce4:	70 39       	ld.w	r9,r8[0xc]
80005ce6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005cea:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005cee:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005cf2:	70 1a       	ld.w	r10,r8[0x4]
80005cf4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005cf8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005cfc:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005d00:	ef 48 ff ec 	st.w	r7[-20],r8
80005d04:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005d08:	70 19       	ld.w	r9,r8[0x4]
80005d0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005d0e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005d12:	ee f8 ff e4 	ld.w	r8,r7[-28]
80005d16:	70 2a       	ld.w	r10,r8[0x8]
80005d18:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005d1c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005d20:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005d24:	ef 48 ff f0 	st.w	r7[-16],r8
	vect[0]= vect[0]+temp2[0]+temp2[0];
80005d28:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005d2c:	70 09       	ld.w	r9,r8[0x0]
80005d2e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d32:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005d36:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d3a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005d3e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005d42:	91 09       	st.w	r8[0x0],r9
	vect[1]= vect[1]+temp2[1]+temp2[1];
80005d44:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005d48:	2f c8       	sub	r8,-4
80005d4a:	ee f9 ff e0 	ld.w	r9,r7[-32]
80005d4e:	2f c9       	sub	r9,-4
80005d50:	72 0a       	ld.w	r10,r9[0x0]
80005d52:	ee f9 ff ec 	ld.w	r9,r7[-20]
80005d56:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80005d5a:	ee f9 ff ec 	ld.w	r9,r7[-20]
80005d5e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80005d62:	91 09       	st.w	r8[0x0],r9
	vect[2]= vect[2]+temp2[2]+temp2[2];
80005d64:	ee f8 ff e0 	ld.w	r8,r7[-32]
80005d68:	2f 88       	sub	r8,-8
80005d6a:	ee f9 ff e0 	ld.w	r9,r7[-32]
80005d6e:	2f 89       	sub	r9,-8
80005d70:	72 0a       	ld.w	r10,r9[0x0]
80005d72:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005d76:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80005d7a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005d7e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80005d82:	91 09       	st.w	r8[0x0],r9
}
80005d84:	2f 8d       	sub	sp,-32
80005d86:	e3 cd 80 80 	ldm	sp++,r7,pc

80005d8a <e_kalman_predict>:

Pk1 = F * Pk0 * F' + Q;

*/
void e_kalman_predict (int axis, float accel_meas, float dt)
{
80005d8a:	d4 31       	pushm	r0-r7,lr
80005d8c:	1a 97       	mov	r7,sp
80005d8e:	fa cd 00 cc 	sub	sp,sp,204
80005d92:	fe f6 0d 02 	ld.w	r6,pc[3330]
80005d96:	1e 26       	rsub	r6,pc
80005d98:	ef 4c ff ac 	st.w	r7[-84],r12
80005d9c:	ef 4b ff a8 	st.w	r7[-88],r11
80005da0:	ef 4a ff a4 	st.w	r7[-92],r10
	/* update state */

	//centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED]*(1.0-(VEL_DECAY*dt)) + dt * accel_meas;
	//centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION]*(1.0-(POS_DECAY*dt)) + dt * centralData->estimation.state[axis][SPEED];
	
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + dt * accel_meas;
80005da4:	ec f8 00 00 	ld.w	r8,r6[0]
80005da8:	70 01       	ld.w	r1,r8[0x0]
80005daa:	ee f5 ff ac 	ld.w	r5,r7[-84]
80005dae:	ec f8 00 00 	ld.w	r8,r6[0]
80005db2:	70 0a       	ld.w	r10,r8[0x0]
80005db4:	ee f9 ff ac 	ld.w	r9,r7[-84]
80005db8:	12 98       	mov	r8,r9
80005dba:	a1 78       	lsl	r8,0x1
80005dbc:	12 08       	add	r8,r9
80005dbe:	2f f8       	sub	r8,-1
80005dc0:	a3 78       	lsl	r8,0x3
80005dc2:	f4 08 00 08 	add	r8,r10,r8
80005dc6:	f0 e2 07 a4 	ld.d	r2,r8[1956]
80005dca:	ee f9 ff a4 	ld.w	r9,r7[-92]
80005dce:	ee f8 ff a8 	ld.w	r8,r7[-88]
80005dd2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005dd6:	10 9c       	mov	r12,r8
80005dd8:	f0 16 00 02 	mcall	r6[8]
80005ddc:	14 98       	mov	r8,r10
80005dde:	16 99       	mov	r9,r11
80005de0:	04 9a       	mov	r10,r2
80005de2:	06 9b       	mov	r11,r3
80005de4:	f0 16 00 05 	mcall	r6[20]
80005de8:	14 98       	mov	r8,r10
80005dea:	16 99       	mov	r9,r11
80005dec:	10 9a       	mov	r10,r8
80005dee:	12 9b       	mov	r11,r9
80005df0:	0a 98       	mov	r8,r5
80005df2:	a1 78       	lsl	r8,0x1
80005df4:	0a 08       	add	r8,r5
80005df6:	2f f8       	sub	r8,-1
80005df8:	a3 78       	lsl	r8,0x3
80005dfa:	e2 08 00 08 	add	r8,r1,r8
80005dfe:	f0 eb 07 a4 	st.d	r8[1956],r10
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + dt * centralData->estimation.state[axis][SPEED];
80005e02:	ec f8 00 00 	ld.w	r8,r6[0]
80005e06:	70 01       	ld.w	r1,r8[0x0]
80005e08:	ee f5 ff ac 	ld.w	r5,r7[-84]
80005e0c:	ec f8 00 00 	ld.w	r8,r6[0]
80005e10:	70 0a       	ld.w	r10,r8[0x0]
80005e12:	ee f9 ff ac 	ld.w	r9,r7[-84]
80005e16:	12 98       	mov	r8,r9
80005e18:	a1 78       	lsl	r8,0x1
80005e1a:	12 08       	add	r8,r9
80005e1c:	a3 78       	lsl	r8,0x3
80005e1e:	f4 08 00 08 	add	r8,r10,r8
80005e22:	f0 c8 f8 5c 	sub	r8,r8,-1956
80005e26:	f0 e2 00 00 	ld.d	r2,r8[0]
80005e2a:	ee fc ff a4 	ld.w	r12,r7[-92]
80005e2e:	f0 16 00 02 	mcall	r6[8]
80005e32:	ec f8 00 00 	ld.w	r8,r6[0]
80005e36:	70 0c       	ld.w	r12,r8[0x0]
80005e38:	ee f9 ff ac 	ld.w	r9,r7[-84]
80005e3c:	12 98       	mov	r8,r9
80005e3e:	a1 78       	lsl	r8,0x1
80005e40:	12 08       	add	r8,r9
80005e42:	2f f8       	sub	r8,-1
80005e44:	a3 78       	lsl	r8,0x3
80005e46:	f8 08 00 08 	add	r8,r12,r8
80005e4a:	f0 e8 07 a4 	ld.d	r8,r8[1956]
80005e4e:	f0 16 00 03 	mcall	r6[12]
80005e52:	14 98       	mov	r8,r10
80005e54:	16 99       	mov	r9,r11
80005e56:	04 9a       	mov	r10,r2
80005e58:	06 9b       	mov	r11,r3
80005e5a:	f0 16 00 05 	mcall	r6[20]
80005e5e:	14 98       	mov	r8,r10
80005e60:	16 99       	mov	r9,r11
80005e62:	10 9a       	mov	r10,r8
80005e64:	12 9b       	mov	r11,r9
80005e66:	0a 98       	mov	r8,r5
80005e68:	a1 78       	lsl	r8,0x1
80005e6a:	0a 08       	add	r8,r5
80005e6c:	a3 78       	lsl	r8,0x3
80005e6e:	e2 08 00 08 	add	r8,r1,r8
80005e72:	f0 c8 f8 5c 	sub	r8,r8,-1956
80005e76:	f0 eb 00 00 	st.d	r8[0],r10
	//centralData->estimation.state[axis][SPEED] = centralData->position_estimator.vel[axis];
	
	
	/* update covariance */
	// F*P*F' calculation
	FPF00 = P[axis][0][0] + dt * ( P[axis][1][0] + P[axis][0][1] + dt * P[axis][1][1] );
80005e7a:	ee f9 ff ac 	ld.w	r9,r7[-84]
80005e7e:	ec fa 00 18 	ld.w	r10,r6[24]
80005e82:	12 98       	mov	r8,r9
80005e84:	a3 78       	lsl	r8,0x3
80005e86:	12 08       	add	r8,r9
80005e88:	a3 78       	lsl	r8,0x3
80005e8a:	f4 08 00 08 	add	r8,r10,r8
80005e8e:	f0 ea 00 00 	ld.d	r10,r8[0]
80005e92:	ee eb ff 34 	st.d	r7[-204],r10
80005e96:	ee fc ff a4 	ld.w	r12,r7[-92]
80005e9a:	f0 16 00 02 	mcall	r6[8]
80005e9e:	14 90       	mov	r0,r10
80005ea0:	16 91       	mov	r1,r11
80005ea2:	ee f9 ff ac 	ld.w	r9,r7[-84]
80005ea6:	ec fa 00 18 	ld.w	r10,r6[24]
80005eaa:	12 98       	mov	r8,r9
80005eac:	a3 78       	lsl	r8,0x3
80005eae:	12 08       	add	r8,r9
80005eb0:	a3 78       	lsl	r8,0x3
80005eb2:	f4 08 00 08 	add	r8,r10,r8
80005eb6:	2e 88       	sub	r8,-24
80005eb8:	f0 ea 00 00 	ld.d	r10,r8[0]
80005ebc:	ee f9 ff ac 	ld.w	r9,r7[-84]
80005ec0:	ec fc 00 18 	ld.w	r12,r6[24]
80005ec4:	12 98       	mov	r8,r9
80005ec6:	a3 78       	lsl	r8,0x3
80005ec8:	12 08       	add	r8,r9
80005eca:	2f f8       	sub	r8,-1
80005ecc:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80005ed0:	f0 16 00 05 	mcall	r6[20]
80005ed4:	14 98       	mov	r8,r10
80005ed6:	16 99       	mov	r9,r11
80005ed8:	10 92       	mov	r2,r8
80005eda:	12 93       	mov	r3,r9
80005edc:	ee fc ff a4 	ld.w	r12,r7[-92]
80005ee0:	f0 16 00 02 	mcall	r6[8]
80005ee4:	ee f9 ff ac 	ld.w	r9,r7[-84]
80005ee8:	ec fc 00 18 	ld.w	r12,r6[24]
80005eec:	12 98       	mov	r8,r9
80005eee:	a3 78       	lsl	r8,0x3
80005ef0:	12 08       	add	r8,r9
80005ef2:	a3 78       	lsl	r8,0x3
80005ef4:	f8 08 00 08 	add	r8,r12,r8
80005ef8:	2e 08       	sub	r8,-32
80005efa:	f0 e8 00 00 	ld.d	r8,r8[0]
80005efe:	f0 16 00 03 	mcall	r6[12]
80005f02:	14 98       	mov	r8,r10
80005f04:	16 99       	mov	r9,r11
80005f06:	04 9a       	mov	r10,r2
80005f08:	06 9b       	mov	r11,r3
80005f0a:	f0 16 00 05 	mcall	r6[20]
80005f0e:	14 98       	mov	r8,r10
80005f10:	16 99       	mov	r9,r11
80005f12:	00 9a       	mov	r10,r0
80005f14:	02 9b       	mov	r11,r1
80005f16:	f0 16 00 03 	mcall	r6[12]
80005f1a:	14 98       	mov	r8,r10
80005f1c:	16 99       	mov	r9,r11
80005f1e:	ee ea ff 34 	ld.d	r10,r7[-204]
80005f22:	f0 16 00 05 	mcall	r6[20]
80005f26:	14 98       	mov	r8,r10
80005f28:	16 99       	mov	r9,r11
80005f2a:	ee e9 ff b8 	st.d	r7[-72],r8
	FPF01 = P[axis][0][1] + dt * ( P[axis][1][1] - P[axis][0][2] - dt * P[axis][1][2] );
80005f2e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80005f32:	ec fa 00 18 	ld.w	r10,r6[24]
80005f36:	12 98       	mov	r8,r9
80005f38:	a3 78       	lsl	r8,0x3
80005f3a:	12 08       	add	r8,r9
80005f3c:	2f f8       	sub	r8,-1
80005f3e:	f4 08 02 34 	ld.d	r4,r10[r8<<0x3]
80005f42:	ee e5 ff 3c 	st.d	r7[-196],r4
80005f46:	ee fc ff a4 	ld.w	r12,r7[-92]
80005f4a:	f0 16 00 02 	mcall	r6[8]
80005f4e:	14 90       	mov	r0,r10
80005f50:	16 91       	mov	r1,r11
80005f52:	ee f9 ff ac 	ld.w	r9,r7[-84]
80005f56:	ec fa 00 18 	ld.w	r10,r6[24]
80005f5a:	12 98       	mov	r8,r9
80005f5c:	a3 78       	lsl	r8,0x3
80005f5e:	12 08       	add	r8,r9
80005f60:	a3 78       	lsl	r8,0x3
80005f62:	f4 08 00 08 	add	r8,r10,r8
80005f66:	2e 08       	sub	r8,-32
80005f68:	f0 ea 00 00 	ld.d	r10,r8[0]
80005f6c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80005f70:	ec fc 00 18 	ld.w	r12,r6[24]
80005f74:	12 98       	mov	r8,r9
80005f76:	a3 78       	lsl	r8,0x3
80005f78:	12 08       	add	r8,r9
80005f7a:	a3 78       	lsl	r8,0x3
80005f7c:	f8 08 00 08 	add	r8,r12,r8
80005f80:	2f 08       	sub	r8,-16
80005f82:	f0 e8 00 00 	ld.d	r8,r8[0]
80005f86:	f0 16 00 11 	mcall	r6[68]
80005f8a:	14 98       	mov	r8,r10
80005f8c:	16 99       	mov	r9,r11
80005f8e:	10 92       	mov	r2,r8
80005f90:	12 93       	mov	r3,r9
80005f92:	ee fc ff a4 	ld.w	r12,r7[-92]
80005f96:	f0 16 00 02 	mcall	r6[8]
80005f9a:	ee f9 ff ac 	ld.w	r9,r7[-84]
80005f9e:	ec fc 00 18 	ld.w	r12,r6[24]
80005fa2:	12 98       	mov	r8,r9
80005fa4:	a3 78       	lsl	r8,0x3
80005fa6:	12 08       	add	r8,r9
80005fa8:	a3 78       	lsl	r8,0x3
80005faa:	f8 08 00 08 	add	r8,r12,r8
80005fae:	2d 88       	sub	r8,-40
80005fb0:	f0 e8 00 00 	ld.d	r8,r8[0]
80005fb4:	f0 16 00 03 	mcall	r6[12]
80005fb8:	14 98       	mov	r8,r10
80005fba:	16 99       	mov	r9,r11
80005fbc:	04 9a       	mov	r10,r2
80005fbe:	06 9b       	mov	r11,r3
80005fc0:	f0 16 00 11 	mcall	r6[68]
80005fc4:	14 98       	mov	r8,r10
80005fc6:	16 99       	mov	r9,r11
80005fc8:	00 9a       	mov	r10,r0
80005fca:	02 9b       	mov	r11,r1
80005fcc:	f0 16 00 03 	mcall	r6[12]
80005fd0:	14 98       	mov	r8,r10
80005fd2:	16 99       	mov	r9,r11
80005fd4:	ee ea ff 3c 	ld.d	r10,r7[-196]
80005fd8:	f0 16 00 05 	mcall	r6[20]
80005fdc:	14 98       	mov	r8,r10
80005fde:	16 99       	mov	r9,r11
80005fe0:	ee e9 ff c0 	st.d	r7[-64],r8
	FPF02 = P[axis][0][2] + dt * ( P[axis][1][2] );
80005fe4:	ee f9 ff ac 	ld.w	r9,r7[-84]
80005fe8:	ec fa 00 18 	ld.w	r10,r6[24]
80005fec:	12 98       	mov	r8,r9
80005fee:	a3 78       	lsl	r8,0x3
80005ff0:	12 08       	add	r8,r9
80005ff2:	a3 78       	lsl	r8,0x3
80005ff4:	f4 08 00 08 	add	r8,r10,r8
80005ff8:	2f 08       	sub	r8,-16
80005ffa:	f0 e2 00 00 	ld.d	r2,r8[0]
80005ffe:	ee fc ff a4 	ld.w	r12,r7[-92]
80006002:	f0 16 00 02 	mcall	r6[8]
80006006:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000600a:	ec fc 00 18 	ld.w	r12,r6[24]
8000600e:	12 98       	mov	r8,r9
80006010:	a3 78       	lsl	r8,0x3
80006012:	12 08       	add	r8,r9
80006014:	a3 78       	lsl	r8,0x3
80006016:	f8 08 00 08 	add	r8,r12,r8
8000601a:	2d 88       	sub	r8,-40
8000601c:	f0 e8 00 00 	ld.d	r8,r8[0]
80006020:	f0 16 00 03 	mcall	r6[12]
80006024:	14 98       	mov	r8,r10
80006026:	16 99       	mov	r9,r11
80006028:	04 9a       	mov	r10,r2
8000602a:	06 9b       	mov	r11,r3
8000602c:	f0 16 00 05 	mcall	r6[20]
80006030:	14 98       	mov	r8,r10
80006032:	16 99       	mov	r9,r11
80006034:	ee e9 ff c8 	st.d	r7[-56],r8
	FPF10 = P[axis][1][0] + dt * (-P[axis][2][0] + P[axis][1][1] - dt * P[axis][2][1] );
80006038:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000603c:	ec fa 00 18 	ld.w	r10,r6[24]
80006040:	12 98       	mov	r8,r9
80006042:	a3 78       	lsl	r8,0x3
80006044:	12 08       	add	r8,r9
80006046:	a3 78       	lsl	r8,0x3
80006048:	f4 08 00 08 	add	r8,r10,r8
8000604c:	2e 88       	sub	r8,-24
8000604e:	f0 ea 00 00 	ld.d	r10,r8[0]
80006052:	ee eb ff 44 	st.d	r7[-188],r10
80006056:	ee fc ff a4 	ld.w	r12,r7[-92]
8000605a:	f0 16 00 02 	mcall	r6[8]
8000605e:	14 90       	mov	r0,r10
80006060:	16 91       	mov	r1,r11
80006062:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006066:	ec fa 00 18 	ld.w	r10,r6[24]
8000606a:	12 98       	mov	r8,r9
8000606c:	a3 78       	lsl	r8,0x3
8000606e:	12 08       	add	r8,r9
80006070:	a3 78       	lsl	r8,0x3
80006072:	f4 08 00 08 	add	r8,r10,r8
80006076:	2e 08       	sub	r8,-32
80006078:	f0 ea 00 00 	ld.d	r10,r8[0]
8000607c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006080:	ec fc 00 18 	ld.w	r12,r6[24]
80006084:	12 98       	mov	r8,r9
80006086:	a3 78       	lsl	r8,0x3
80006088:	12 08       	add	r8,r9
8000608a:	a3 78       	lsl	r8,0x3
8000608c:	f8 08 00 08 	add	r8,r12,r8
80006090:	2d 08       	sub	r8,-48
80006092:	f0 e8 00 00 	ld.d	r8,r8[0]
80006096:	f0 16 00 11 	mcall	r6[68]
8000609a:	14 98       	mov	r8,r10
8000609c:	16 99       	mov	r9,r11
8000609e:	10 92       	mov	r2,r8
800060a0:	12 93       	mov	r3,r9
800060a2:	ee fc ff a4 	ld.w	r12,r7[-92]
800060a6:	f0 16 00 02 	mcall	r6[8]
800060aa:	ee f9 ff ac 	ld.w	r9,r7[-84]
800060ae:	ec fc 00 18 	ld.w	r12,r6[24]
800060b2:	12 98       	mov	r8,r9
800060b4:	a3 78       	lsl	r8,0x3
800060b6:	12 08       	add	r8,r9
800060b8:	a3 78       	lsl	r8,0x3
800060ba:	f8 08 00 08 	add	r8,r12,r8
800060be:	2c 88       	sub	r8,-56
800060c0:	f0 e8 00 00 	ld.d	r8,r8[0]
800060c4:	f0 16 00 03 	mcall	r6[12]
800060c8:	14 98       	mov	r8,r10
800060ca:	16 99       	mov	r9,r11
800060cc:	04 9a       	mov	r10,r2
800060ce:	06 9b       	mov	r11,r3
800060d0:	f0 16 00 11 	mcall	r6[68]
800060d4:	14 98       	mov	r8,r10
800060d6:	16 99       	mov	r9,r11
800060d8:	00 9a       	mov	r10,r0
800060da:	02 9b       	mov	r11,r1
800060dc:	f0 16 00 03 	mcall	r6[12]
800060e0:	14 98       	mov	r8,r10
800060e2:	16 99       	mov	r9,r11
800060e4:	ee ea ff 44 	ld.d	r10,r7[-188]
800060e8:	f0 16 00 05 	mcall	r6[20]
800060ec:	14 98       	mov	r8,r10
800060ee:	16 99       	mov	r9,r11
800060f0:	ee e9 ff d0 	st.d	r7[-48],r8
	FPF11 = P[axis][1][1] + dt * (-P[axis][2][1] - P[axis][1][2] + dt * P[axis][2][2] );
800060f4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800060f8:	ec fa 00 18 	ld.w	r10,r6[24]
800060fc:	12 98       	mov	r8,r9
800060fe:	a3 78       	lsl	r8,0x3
80006100:	12 08       	add	r8,r9
80006102:	a3 78       	lsl	r8,0x3
80006104:	f4 08 00 08 	add	r8,r10,r8
80006108:	2e 08       	sub	r8,-32
8000610a:	f0 e4 00 00 	ld.d	r4,r8[0]
8000610e:	ee e5 ff 4c 	st.d	r7[-180],r4
80006112:	ee fc ff a4 	ld.w	r12,r7[-92]
80006116:	f0 16 00 02 	mcall	r6[8]
8000611a:	14 90       	mov	r0,r10
8000611c:	16 91       	mov	r1,r11
8000611e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006122:	ec fa 00 18 	ld.w	r10,r6[24]
80006126:	12 98       	mov	r8,r9
80006128:	a3 78       	lsl	r8,0x3
8000612a:	12 08       	add	r8,r9
8000612c:	a3 78       	lsl	r8,0x3
8000612e:	f4 08 00 08 	add	r8,r10,r8
80006132:	2c 88       	sub	r8,-56
80006134:	f0 e8 00 00 	ld.d	r8,r8[0]
80006138:	12 94       	mov	r4,r9
8000613a:	ee 14 80 00 	eorh	r4,0x8000
8000613e:	ef 44 ff 54 	st.w	r7[-172],r4
80006142:	10 9c       	mov	r12,r8
80006144:	ef 4c ff 58 	st.w	r7[-168],r12
80006148:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000614c:	ec fa 00 18 	ld.w	r10,r6[24]
80006150:	12 98       	mov	r8,r9
80006152:	a3 78       	lsl	r8,0x3
80006154:	12 08       	add	r8,r9
80006156:	a3 78       	lsl	r8,0x3
80006158:	f4 08 00 08 	add	r8,r10,r8
8000615c:	2d 88       	sub	r8,-40
8000615e:	f0 e8 00 00 	ld.d	r8,r8[0]
80006162:	ee ea ff 54 	ld.d	r10,r7[-172]
80006166:	f0 16 00 11 	mcall	r6[68]
8000616a:	14 98       	mov	r8,r10
8000616c:	16 99       	mov	r9,r11
8000616e:	10 92       	mov	r2,r8
80006170:	12 93       	mov	r3,r9
80006172:	ee fc ff a4 	ld.w	r12,r7[-92]
80006176:	f0 16 00 02 	mcall	r6[8]
8000617a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000617e:	ec fc 00 18 	ld.w	r12,r6[24]
80006182:	12 98       	mov	r8,r9
80006184:	a3 78       	lsl	r8,0x3
80006186:	12 08       	add	r8,r9
80006188:	a3 78       	lsl	r8,0x3
8000618a:	f8 08 00 08 	add	r8,r12,r8
8000618e:	2c 08       	sub	r8,-64
80006190:	f0 e8 00 00 	ld.d	r8,r8[0]
80006194:	f0 16 00 03 	mcall	r6[12]
80006198:	14 98       	mov	r8,r10
8000619a:	16 99       	mov	r9,r11
8000619c:	04 9a       	mov	r10,r2
8000619e:	06 9b       	mov	r11,r3
800061a0:	f0 16 00 05 	mcall	r6[20]
800061a4:	14 98       	mov	r8,r10
800061a6:	16 99       	mov	r9,r11
800061a8:	00 9a       	mov	r10,r0
800061aa:	02 9b       	mov	r11,r1
800061ac:	f0 16 00 03 	mcall	r6[12]
800061b0:	14 98       	mov	r8,r10
800061b2:	16 99       	mov	r9,r11
800061b4:	ee ea ff 4c 	ld.d	r10,r7[-180]
800061b8:	f0 16 00 05 	mcall	r6[20]
800061bc:	14 98       	mov	r8,r10
800061be:	16 99       	mov	r9,r11
800061c0:	ee e9 ff d8 	st.d	r7[-40],r8
	FPF12 = P[axis][1][2] + dt * (-P[axis][2][2] );
800061c4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800061c8:	ec fa 00 18 	ld.w	r10,r6[24]
800061cc:	12 98       	mov	r8,r9
800061ce:	a3 78       	lsl	r8,0x3
800061d0:	12 08       	add	r8,r9
800061d2:	a3 78       	lsl	r8,0x3
800061d4:	f4 08 00 08 	add	r8,r10,r8
800061d8:	2d 88       	sub	r8,-40
800061da:	f0 e0 00 00 	ld.d	r0,r8[0]
800061de:	ee fc ff a4 	ld.w	r12,r7[-92]
800061e2:	f0 16 00 02 	mcall	r6[8]
800061e6:	14 92       	mov	r2,r10
800061e8:	16 93       	mov	r3,r11
800061ea:	ee f9 ff ac 	ld.w	r9,r7[-84]
800061ee:	ec fa 00 18 	ld.w	r10,r6[24]
800061f2:	12 98       	mov	r8,r9
800061f4:	a3 78       	lsl	r8,0x3
800061f6:	12 08       	add	r8,r9
800061f8:	a3 78       	lsl	r8,0x3
800061fa:	f4 08 00 08 	add	r8,r10,r8
800061fe:	2c 08       	sub	r8,-64
80006200:	f0 e8 00 00 	ld.d	r8,r8[0]
80006204:	12 9b       	mov	r11,r9
80006206:	ee 1b 80 00 	eorh	r11,0x8000
8000620a:	ef 4b ff 5c 	st.w	r7[-164],r11
8000620e:	10 9a       	mov	r10,r8
80006210:	ef 4a ff 60 	st.w	r7[-160],r10
80006214:	ee e8 ff 5c 	ld.d	r8,r7[-164]
80006218:	04 9a       	mov	r10,r2
8000621a:	06 9b       	mov	r11,r3
8000621c:	f0 16 00 03 	mcall	r6[12]
80006220:	14 98       	mov	r8,r10
80006222:	16 99       	mov	r9,r11
80006224:	00 9a       	mov	r10,r0
80006226:	02 9b       	mov	r11,r1
80006228:	f0 16 00 05 	mcall	r6[20]
8000622c:	14 98       	mov	r8,r10
8000622e:	16 99       	mov	r9,r11
80006230:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF20 = P[axis][2][0] + dt * ( P[axis][2][1] );
80006234:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006238:	ec fa 00 18 	ld.w	r10,r6[24]
8000623c:	12 98       	mov	r8,r9
8000623e:	a3 78       	lsl	r8,0x3
80006240:	12 08       	add	r8,r9
80006242:	a3 78       	lsl	r8,0x3
80006244:	f4 08 00 08 	add	r8,r10,r8
80006248:	2d 08       	sub	r8,-48
8000624a:	f0 e2 00 00 	ld.d	r2,r8[0]
8000624e:	ee fc ff a4 	ld.w	r12,r7[-92]
80006252:	f0 16 00 02 	mcall	r6[8]
80006256:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000625a:	ec fc 00 18 	ld.w	r12,r6[24]
8000625e:	12 98       	mov	r8,r9
80006260:	a3 78       	lsl	r8,0x3
80006262:	12 08       	add	r8,r9
80006264:	a3 78       	lsl	r8,0x3
80006266:	f8 08 00 08 	add	r8,r12,r8
8000626a:	2c 88       	sub	r8,-56
8000626c:	f0 e8 00 00 	ld.d	r8,r8[0]
80006270:	f0 16 00 03 	mcall	r6[12]
80006274:	14 98       	mov	r8,r10
80006276:	16 99       	mov	r9,r11
80006278:	04 9a       	mov	r10,r2
8000627a:	06 9b       	mov	r11,r3
8000627c:	f0 16 00 05 	mcall	r6[20]
80006280:	14 98       	mov	r8,r10
80006282:	16 99       	mov	r9,r11
80006284:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF21 = P[axis][2][1] + dt * (-P[axis][2][2] );
80006288:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000628c:	ec fa 00 18 	ld.w	r10,r6[24]
80006290:	12 98       	mov	r8,r9
80006292:	a3 78       	lsl	r8,0x3
80006294:	12 08       	add	r8,r9
80006296:	a3 78       	lsl	r8,0x3
80006298:	f4 08 00 08 	add	r8,r10,r8
8000629c:	2c 88       	sub	r8,-56
8000629e:	f0 e2 00 00 	ld.d	r2,r8[0]
800062a2:	ee fc ff a4 	ld.w	r12,r7[-92]
800062a6:	f0 16 00 02 	mcall	r6[8]
800062aa:	ee f9 ff ac 	ld.w	r9,r7[-84]
800062ae:	ec fc 00 18 	ld.w	r12,r6[24]
800062b2:	12 98       	mov	r8,r9
800062b4:	a3 78       	lsl	r8,0x3
800062b6:	12 08       	add	r8,r9
800062b8:	a3 78       	lsl	r8,0x3
800062ba:	f8 08 00 08 	add	r8,r12,r8
800062be:	2c 08       	sub	r8,-64
800062c0:	f0 e8 00 00 	ld.d	r8,r8[0]
800062c4:	12 95       	mov	r5,r9
800062c6:	ee 15 80 00 	eorh	r5,0x8000
800062ca:	ef 45 ff 64 	st.w	r7[-156],r5
800062ce:	10 94       	mov	r4,r8
800062d0:	ef 44 ff 68 	st.w	r7[-152],r4
800062d4:	ee e8 ff 64 	ld.d	r8,r7[-156]
800062d8:	f0 16 00 03 	mcall	r6[12]
800062dc:	14 98       	mov	r8,r10
800062de:	16 99       	mov	r9,r11
800062e0:	04 9a       	mov	r10,r2
800062e2:	06 9b       	mov	r11,r3
800062e4:	f0 16 00 05 	mcall	r6[20]
800062e8:	14 98       	mov	r8,r10
800062ea:	16 99       	mov	r9,r11
800062ec:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF22 = P[axis][2][2];
800062f0:	ee f9 ff ac 	ld.w	r9,r7[-84]
800062f4:	ec fa 00 18 	ld.w	r10,r6[24]
800062f8:	12 98       	mov	r8,r9
800062fa:	a3 78       	lsl	r8,0x3
800062fc:	12 08       	add	r8,r9
800062fe:	a3 78       	lsl	r8,0x3
80006300:	f4 08 00 08 	add	r8,r10,r8
80006304:	2c 08       	sub	r8,-64
80006306:	f0 e8 00 00 	ld.d	r8,r8[0]
8000630a:	ee e9 ff f8 	st.d	r7[-8],r8
	// P = F*P*F' + Q
	P[axis][0][0] = FPF00 + Q[axis][POSITION];
8000630e:	ee f5 ff ac 	ld.w	r5,r7[-84]
80006312:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006316:	ec fa 00 e0 	ld.w	r10,r6[224]
8000631a:	12 98       	mov	r8,r9
8000631c:	a1 78       	lsl	r8,0x1
8000631e:	12 08       	add	r8,r9
80006320:	a3 78       	lsl	r8,0x3
80006322:	f4 08 00 08 	add	r8,r10,r8
80006326:	f0 ea 00 00 	ld.d	r10,r8[0]
8000632a:	ee e8 ff b8 	ld.d	r8,r7[-72]
8000632e:	f0 16 00 05 	mcall	r6[20]
80006332:	14 98       	mov	r8,r10
80006334:	16 99       	mov	r9,r11
80006336:	10 9a       	mov	r10,r8
80006338:	12 9b       	mov	r11,r9
8000633a:	ec f9 00 18 	ld.w	r9,r6[24]
8000633e:	0a 98       	mov	r8,r5
80006340:	a3 78       	lsl	r8,0x3
80006342:	0a 08       	add	r8,r5
80006344:	a3 78       	lsl	r8,0x3
80006346:	f2 08 00 08 	add	r8,r9,r8
8000634a:	f0 eb 00 00 	st.d	r8[0],r10
	P[axis][0][1] = FPF01;
8000634e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006352:	ec fa 00 18 	ld.w	r10,r6[24]
80006356:	12 98       	mov	r8,r9
80006358:	a3 78       	lsl	r8,0x3
8000635a:	12 08       	add	r8,r9
8000635c:	f0 cb ff ff 	sub	r11,r8,-1
80006360:	ee e8 ff c0 	ld.d	r8,r7[-64]
80006364:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P[axis][0][2] = FPF02;
80006368:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000636c:	ec fa 00 18 	ld.w	r10,r6[24]
80006370:	12 98       	mov	r8,r9
80006372:	a3 78       	lsl	r8,0x3
80006374:	12 08       	add	r8,r9
80006376:	a3 78       	lsl	r8,0x3
80006378:	f4 08 00 08 	add	r8,r10,r8
8000637c:	f0 ca ff f0 	sub	r10,r8,-16
80006380:	ee e8 ff c8 	ld.d	r8,r7[-56]
80006384:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][0] = FPF10;
80006388:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000638c:	ec fa 00 18 	ld.w	r10,r6[24]
80006390:	12 98       	mov	r8,r9
80006392:	a3 78       	lsl	r8,0x3
80006394:	12 08       	add	r8,r9
80006396:	a3 78       	lsl	r8,0x3
80006398:	f4 08 00 08 	add	r8,r10,r8
8000639c:	f0 ca ff e8 	sub	r10,r8,-24
800063a0:	ee e8 ff d0 	ld.d	r8,r7[-48]
800063a4:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = FPF11 + Q[axis][SPEED];
800063a8:	ee f5 ff ac 	ld.w	r5,r7[-84]
800063ac:	ee f9 ff ac 	ld.w	r9,r7[-84]
800063b0:	ec fa 00 e0 	ld.w	r10,r6[224]
800063b4:	12 98       	mov	r8,r9
800063b6:	a1 78       	lsl	r8,0x1
800063b8:	12 08       	add	r8,r9
800063ba:	2f f8       	sub	r8,-1
800063bc:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
800063c0:	ee e8 ff d8 	ld.d	r8,r7[-40]
800063c4:	f0 16 00 05 	mcall	r6[20]
800063c8:	14 98       	mov	r8,r10
800063ca:	16 99       	mov	r9,r11
800063cc:	10 9a       	mov	r10,r8
800063ce:	12 9b       	mov	r11,r9
800063d0:	ec f9 00 18 	ld.w	r9,r6[24]
800063d4:	0a 98       	mov	r8,r5
800063d6:	a3 78       	lsl	r8,0x3
800063d8:	0a 08       	add	r8,r5
800063da:	a3 78       	lsl	r8,0x3
800063dc:	f2 08 00 08 	add	r8,r9,r8
800063e0:	2e 08       	sub	r8,-32
800063e2:	f0 eb 00 00 	st.d	r8[0],r10
	P[axis][1][2] = FPF12;
800063e6:	ee f9 ff ac 	ld.w	r9,r7[-84]
800063ea:	ec fa 00 18 	ld.w	r10,r6[24]
800063ee:	12 98       	mov	r8,r9
800063f0:	a3 78       	lsl	r8,0x3
800063f2:	12 08       	add	r8,r9
800063f4:	a3 78       	lsl	r8,0x3
800063f6:	f4 08 00 08 	add	r8,r10,r8
800063fa:	f0 ca ff d8 	sub	r10,r8,-40
800063fe:	ee e8 ff e0 	ld.d	r8,r7[-32]
80006402:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][0] = FPF20;
80006406:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000640a:	ec fa 00 18 	ld.w	r10,r6[24]
8000640e:	12 98       	mov	r8,r9
80006410:	a3 78       	lsl	r8,0x3
80006412:	12 08       	add	r8,r9
80006414:	a3 78       	lsl	r8,0x3
80006416:	f4 08 00 08 	add	r8,r10,r8
8000641a:	f0 ca ff d0 	sub	r10,r8,-48
8000641e:	ee e8 ff e8 	ld.d	r8,r7[-24]
80006422:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][1] = FPF21;
80006426:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000642a:	ec fa 00 18 	ld.w	r10,r6[24]
8000642e:	12 98       	mov	r8,r9
80006430:	a3 78       	lsl	r8,0x3
80006432:	12 08       	add	r8,r9
80006434:	a3 78       	lsl	r8,0x3
80006436:	f4 08 00 08 	add	r8,r10,r8
8000643a:	f0 ca ff c8 	sub	r10,r8,-56
8000643e:	ee e8 ff f0 	ld.d	r8,r7[-16]
80006442:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][2] = FPF22 + Q[axis][BIAIS];
80006446:	ee f5 ff ac 	ld.w	r5,r7[-84]
8000644a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000644e:	ec fa 00 e0 	ld.w	r10,r6[224]
80006452:	12 98       	mov	r8,r9
80006454:	a1 78       	lsl	r8,0x1
80006456:	12 08       	add	r8,r9
80006458:	a3 78       	lsl	r8,0x3
8000645a:	f4 08 00 08 	add	r8,r10,r8
8000645e:	2f 08       	sub	r8,-16
80006460:	f0 ea 00 00 	ld.d	r10,r8[0]
80006464:	ee e8 ff f8 	ld.d	r8,r7[-8]
80006468:	f0 16 00 05 	mcall	r6[20]
8000646c:	14 98       	mov	r8,r10
8000646e:	16 99       	mov	r9,r11
80006470:	10 9a       	mov	r10,r8
80006472:	12 9b       	mov	r11,r9
80006474:	ec f9 00 18 	ld.w	r9,r6[24]
80006478:	0a 98       	mov	r8,r5
8000647a:	a3 78       	lsl	r8,0x3
8000647c:	0a 08       	add	r8,r5
8000647e:	a3 78       	lsl	r8,0x3
80006480:	f2 08 00 08 	add	r8,r9,r8
80006484:	2c 08       	sub	r8,-64
80006486:	f0 eb 00 00 	st.d	r8[0],r10
	
	
	/*************************************************************************************/
	FPF00 = P2[axis][0][0] + dt * ( P2[axis][1][0] + P2[axis][0][1] + dt * P2[axis][1][1] );
8000648a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000648e:	ec fa 00 1c 	ld.w	r10,r6[28]
80006492:	12 98       	mov	r8,r9
80006494:	a3 78       	lsl	r8,0x3
80006496:	12 08       	add	r8,r9
80006498:	a3 78       	lsl	r8,0x3
8000649a:	f4 08 00 08 	add	r8,r10,r8
8000649e:	f0 ea 00 00 	ld.d	r10,r8[0]
800064a2:	ee eb ff 6c 	st.d	r7[-148],r10
800064a6:	ee fc ff a4 	ld.w	r12,r7[-92]
800064aa:	f0 16 00 02 	mcall	r6[8]
800064ae:	14 90       	mov	r0,r10
800064b0:	16 91       	mov	r1,r11
800064b2:	ee f9 ff ac 	ld.w	r9,r7[-84]
800064b6:	ec fa 00 1c 	ld.w	r10,r6[28]
800064ba:	12 98       	mov	r8,r9
800064bc:	a3 78       	lsl	r8,0x3
800064be:	12 08       	add	r8,r9
800064c0:	a3 78       	lsl	r8,0x3
800064c2:	f4 08 00 08 	add	r8,r10,r8
800064c6:	2e 88       	sub	r8,-24
800064c8:	f0 ea 00 00 	ld.d	r10,r8[0]
800064cc:	ee f9 ff ac 	ld.w	r9,r7[-84]
800064d0:	ec fc 00 1c 	ld.w	r12,r6[28]
800064d4:	12 98       	mov	r8,r9
800064d6:	a3 78       	lsl	r8,0x3
800064d8:	12 08       	add	r8,r9
800064da:	2f f8       	sub	r8,-1
800064dc:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
800064e0:	f0 16 00 05 	mcall	r6[20]
800064e4:	14 98       	mov	r8,r10
800064e6:	16 99       	mov	r9,r11
800064e8:	10 92       	mov	r2,r8
800064ea:	12 93       	mov	r3,r9
800064ec:	ee fc ff a4 	ld.w	r12,r7[-92]
800064f0:	f0 16 00 02 	mcall	r6[8]
800064f4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800064f8:	ec fc 00 1c 	ld.w	r12,r6[28]
800064fc:	12 98       	mov	r8,r9
800064fe:	a3 78       	lsl	r8,0x3
80006500:	12 08       	add	r8,r9
80006502:	a3 78       	lsl	r8,0x3
80006504:	f8 08 00 08 	add	r8,r12,r8
80006508:	2e 08       	sub	r8,-32
8000650a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000650e:	f0 16 00 03 	mcall	r6[12]
80006512:	14 98       	mov	r8,r10
80006514:	16 99       	mov	r9,r11
80006516:	04 9a       	mov	r10,r2
80006518:	06 9b       	mov	r11,r3
8000651a:	f0 16 00 05 	mcall	r6[20]
8000651e:	14 98       	mov	r8,r10
80006520:	16 99       	mov	r9,r11
80006522:	00 9a       	mov	r10,r0
80006524:	02 9b       	mov	r11,r1
80006526:	f0 16 00 03 	mcall	r6[12]
8000652a:	14 98       	mov	r8,r10
8000652c:	16 99       	mov	r9,r11
8000652e:	ee ea ff 6c 	ld.d	r10,r7[-148]
80006532:	f0 16 00 05 	mcall	r6[20]
80006536:	14 98       	mov	r8,r10
80006538:	16 99       	mov	r9,r11
8000653a:	ee e9 ff b8 	st.d	r7[-72],r8
	FPF01 = P2[axis][0][1] + dt * ( P2[axis][1][1] - P2[axis][0][2] - dt * P2[axis][1][2] );
8000653e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006542:	ec fa 00 1c 	ld.w	r10,r6[28]
80006546:	12 98       	mov	r8,r9
80006548:	a3 78       	lsl	r8,0x3
8000654a:	12 08       	add	r8,r9
8000654c:	2f f8       	sub	r8,-1
8000654e:	f4 08 02 34 	ld.d	r4,r10[r8<<0x3]
80006552:	ee e5 ff 74 	st.d	r7[-140],r4
80006556:	ee fc ff a4 	ld.w	r12,r7[-92]
8000655a:	f0 16 00 02 	mcall	r6[8]
8000655e:	14 90       	mov	r0,r10
80006560:	16 91       	mov	r1,r11
80006562:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006566:	ec fa 00 1c 	ld.w	r10,r6[28]
8000656a:	12 98       	mov	r8,r9
8000656c:	a3 78       	lsl	r8,0x3
8000656e:	12 08       	add	r8,r9
80006570:	a3 78       	lsl	r8,0x3
80006572:	f4 08 00 08 	add	r8,r10,r8
80006576:	2e 08       	sub	r8,-32
80006578:	f0 ea 00 00 	ld.d	r10,r8[0]
8000657c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006580:	ec fc 00 1c 	ld.w	r12,r6[28]
80006584:	12 98       	mov	r8,r9
80006586:	a3 78       	lsl	r8,0x3
80006588:	12 08       	add	r8,r9
8000658a:	a3 78       	lsl	r8,0x3
8000658c:	f8 08 00 08 	add	r8,r12,r8
80006590:	2f 08       	sub	r8,-16
80006592:	f0 e8 00 00 	ld.d	r8,r8[0]
80006596:	f0 16 00 11 	mcall	r6[68]
8000659a:	14 98       	mov	r8,r10
8000659c:	16 99       	mov	r9,r11
8000659e:	10 92       	mov	r2,r8
800065a0:	12 93       	mov	r3,r9
800065a2:	ee fc ff a4 	ld.w	r12,r7[-92]
800065a6:	f0 16 00 02 	mcall	r6[8]
800065aa:	ee f9 ff ac 	ld.w	r9,r7[-84]
800065ae:	ec fc 00 1c 	ld.w	r12,r6[28]
800065b2:	12 98       	mov	r8,r9
800065b4:	a3 78       	lsl	r8,0x3
800065b6:	12 08       	add	r8,r9
800065b8:	a3 78       	lsl	r8,0x3
800065ba:	f8 08 00 08 	add	r8,r12,r8
800065be:	2d 88       	sub	r8,-40
800065c0:	f0 e8 00 00 	ld.d	r8,r8[0]
800065c4:	f0 16 00 03 	mcall	r6[12]
800065c8:	14 98       	mov	r8,r10
800065ca:	16 99       	mov	r9,r11
800065cc:	04 9a       	mov	r10,r2
800065ce:	06 9b       	mov	r11,r3
800065d0:	f0 16 00 11 	mcall	r6[68]
800065d4:	14 98       	mov	r8,r10
800065d6:	16 99       	mov	r9,r11
800065d8:	00 9a       	mov	r10,r0
800065da:	02 9b       	mov	r11,r1
800065dc:	f0 16 00 03 	mcall	r6[12]
800065e0:	14 98       	mov	r8,r10
800065e2:	16 99       	mov	r9,r11
800065e4:	ee ea ff 74 	ld.d	r10,r7[-140]
800065e8:	f0 16 00 05 	mcall	r6[20]
800065ec:	14 98       	mov	r8,r10
800065ee:	16 99       	mov	r9,r11
800065f0:	ee e9 ff c0 	st.d	r7[-64],r8
	FPF02 = P2[axis][0][2] + dt * ( P2[axis][1][2] );
800065f4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800065f8:	ec fa 00 1c 	ld.w	r10,r6[28]
800065fc:	12 98       	mov	r8,r9
800065fe:	a3 78       	lsl	r8,0x3
80006600:	12 08       	add	r8,r9
80006602:	a3 78       	lsl	r8,0x3
80006604:	f4 08 00 08 	add	r8,r10,r8
80006608:	2f 08       	sub	r8,-16
8000660a:	f0 e2 00 00 	ld.d	r2,r8[0]
8000660e:	ee fc ff a4 	ld.w	r12,r7[-92]
80006612:	f0 16 00 02 	mcall	r6[8]
80006616:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000661a:	ec fc 00 1c 	ld.w	r12,r6[28]
8000661e:	12 98       	mov	r8,r9
80006620:	a3 78       	lsl	r8,0x3
80006622:	12 08       	add	r8,r9
80006624:	a3 78       	lsl	r8,0x3
80006626:	f8 08 00 08 	add	r8,r12,r8
8000662a:	2d 88       	sub	r8,-40
8000662c:	f0 e8 00 00 	ld.d	r8,r8[0]
80006630:	f0 16 00 03 	mcall	r6[12]
80006634:	14 98       	mov	r8,r10
80006636:	16 99       	mov	r9,r11
80006638:	04 9a       	mov	r10,r2
8000663a:	06 9b       	mov	r11,r3
8000663c:	f0 16 00 05 	mcall	r6[20]
80006640:	14 98       	mov	r8,r10
80006642:	16 99       	mov	r9,r11
80006644:	ee e9 ff c8 	st.d	r7[-56],r8
	FPF10 = P2[axis][1][0] + dt * (-P2[axis][2][0] + P2[axis][1][1] - dt * P2[axis][2][1] );
80006648:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000664c:	ec fa 00 1c 	ld.w	r10,r6[28]
80006650:	12 98       	mov	r8,r9
80006652:	a3 78       	lsl	r8,0x3
80006654:	12 08       	add	r8,r9
80006656:	a3 78       	lsl	r8,0x3
80006658:	f4 08 00 08 	add	r8,r10,r8
8000665c:	2e 88       	sub	r8,-24
8000665e:	f0 ea 00 00 	ld.d	r10,r8[0]
80006662:	ee eb ff 7c 	st.d	r7[-132],r10
80006666:	ee fc ff a4 	ld.w	r12,r7[-92]
8000666a:	f0 16 00 02 	mcall	r6[8]
8000666e:	14 90       	mov	r0,r10
80006670:	16 91       	mov	r1,r11
80006672:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006676:	ec fa 00 1c 	ld.w	r10,r6[28]
8000667a:	12 98       	mov	r8,r9
8000667c:	a3 78       	lsl	r8,0x3
8000667e:	12 08       	add	r8,r9
80006680:	a3 78       	lsl	r8,0x3
80006682:	f4 08 00 08 	add	r8,r10,r8
80006686:	2e 08       	sub	r8,-32
80006688:	f0 ea 00 00 	ld.d	r10,r8[0]
8000668c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006690:	ec fc 00 1c 	ld.w	r12,r6[28]
80006694:	12 98       	mov	r8,r9
80006696:	a3 78       	lsl	r8,0x3
80006698:	12 08       	add	r8,r9
8000669a:	a3 78       	lsl	r8,0x3
8000669c:	f8 08 00 08 	add	r8,r12,r8
800066a0:	2d 08       	sub	r8,-48
800066a2:	f0 e8 00 00 	ld.d	r8,r8[0]
800066a6:	f0 16 00 11 	mcall	r6[68]
800066aa:	14 98       	mov	r8,r10
800066ac:	16 99       	mov	r9,r11
800066ae:	10 92       	mov	r2,r8
800066b0:	12 93       	mov	r3,r9
800066b2:	ee fc ff a4 	ld.w	r12,r7[-92]
800066b6:	f0 16 00 02 	mcall	r6[8]
800066ba:	ee f9 ff ac 	ld.w	r9,r7[-84]
800066be:	ec fc 00 1c 	ld.w	r12,r6[28]
800066c2:	12 98       	mov	r8,r9
800066c4:	a3 78       	lsl	r8,0x3
800066c6:	12 08       	add	r8,r9
800066c8:	a3 78       	lsl	r8,0x3
800066ca:	f8 08 00 08 	add	r8,r12,r8
800066ce:	2c 88       	sub	r8,-56
800066d0:	f0 e8 00 00 	ld.d	r8,r8[0]
800066d4:	f0 16 00 03 	mcall	r6[12]
800066d8:	14 98       	mov	r8,r10
800066da:	16 99       	mov	r9,r11
800066dc:	04 9a       	mov	r10,r2
800066de:	06 9b       	mov	r11,r3
800066e0:	f0 16 00 11 	mcall	r6[68]
800066e4:	14 98       	mov	r8,r10
800066e6:	16 99       	mov	r9,r11
800066e8:	00 9a       	mov	r10,r0
800066ea:	02 9b       	mov	r11,r1
800066ec:	f0 16 00 03 	mcall	r6[12]
800066f0:	14 98       	mov	r8,r10
800066f2:	16 99       	mov	r9,r11
800066f4:	ee ea ff 7c 	ld.d	r10,r7[-132]
800066f8:	f0 16 00 05 	mcall	r6[20]
800066fc:	14 98       	mov	r8,r10
800066fe:	16 99       	mov	r9,r11
80006700:	ee e9 ff d0 	st.d	r7[-48],r8
	FPF11 = P2[axis][1][1] + dt * (-P2[axis][2][1] - P2[axis][1][2] + dt * P2[axis][2][2] );
80006704:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006708:	ec fa 00 1c 	ld.w	r10,r6[28]
8000670c:	12 98       	mov	r8,r9
8000670e:	a3 78       	lsl	r8,0x3
80006710:	12 08       	add	r8,r9
80006712:	a3 78       	lsl	r8,0x3
80006714:	f4 08 00 08 	add	r8,r10,r8
80006718:	2e 08       	sub	r8,-32
8000671a:	f0 e0 00 00 	ld.d	r0,r8[0]
8000671e:	ee fc ff a4 	ld.w	r12,r7[-92]
80006722:	f0 16 00 02 	mcall	r6[8]
80006726:	ee eb ff 84 	st.d	r7[-124],r10
8000672a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000672e:	ec fa 00 1c 	ld.w	r10,r6[28]
80006732:	12 98       	mov	r8,r9
80006734:	a3 78       	lsl	r8,0x3
80006736:	12 08       	add	r8,r9
80006738:	a3 78       	lsl	r8,0x3
8000673a:	f4 08 00 08 	add	r8,r10,r8
8000673e:	2c 88       	sub	r8,-56
80006740:	f0 e8 00 00 	ld.d	r8,r8[0]
80006744:	12 9a       	mov	r10,r9
80006746:	ee 1a 80 00 	eorh	r10,0x8000
8000674a:	ef 4a ff 8c 	st.w	r7[-116],r10
8000674e:	10 95       	mov	r5,r8
80006750:	ef 45 ff 90 	st.w	r7[-112],r5
80006754:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006758:	ec fa 00 1c 	ld.w	r10,r6[28]
8000675c:	12 98       	mov	r8,r9
8000675e:	a3 78       	lsl	r8,0x3
80006760:	12 08       	add	r8,r9
80006762:	a3 78       	lsl	r8,0x3
80006764:	f4 08 00 08 	add	r8,r10,r8
80006768:	2d 88       	sub	r8,-40
8000676a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000676e:	ee ea ff 8c 	ld.d	r10,r7[-116]
80006772:	f0 16 00 11 	mcall	r6[68]
80006776:	14 98       	mov	r8,r10
80006778:	16 99       	mov	r9,r11
8000677a:	10 92       	mov	r2,r8
8000677c:	12 93       	mov	r3,r9
8000677e:	ee fc ff a4 	ld.w	r12,r7[-92]
80006782:	f0 16 00 02 	mcall	r6[8]
80006786:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000678a:	ec fc 00 1c 	ld.w	r12,r6[28]
8000678e:	12 98       	mov	r8,r9
80006790:	a3 78       	lsl	r8,0x3
80006792:	12 08       	add	r8,r9
80006794:	a3 78       	lsl	r8,0x3
80006796:	f8 08 00 08 	add	r8,r12,r8
8000679a:	2c 08       	sub	r8,-64
8000679c:	f0 e8 00 00 	ld.d	r8,r8[0]
800067a0:	f0 16 00 03 	mcall	r6[12]
800067a4:	14 98       	mov	r8,r10
800067a6:	16 99       	mov	r9,r11
800067a8:	04 9a       	mov	r10,r2
800067aa:	06 9b       	mov	r11,r3
800067ac:	f0 16 00 05 	mcall	r6[20]
800067b0:	14 98       	mov	r8,r10
800067b2:	16 99       	mov	r9,r11
800067b4:	ee ea ff 84 	ld.d	r10,r7[-124]
800067b8:	f0 16 00 03 	mcall	r6[12]
800067bc:	14 98       	mov	r8,r10
800067be:	16 99       	mov	r9,r11
800067c0:	00 9a       	mov	r10,r0
800067c2:	02 9b       	mov	r11,r1
800067c4:	f0 16 00 05 	mcall	r6[20]
800067c8:	14 98       	mov	r8,r10
800067ca:	16 99       	mov	r9,r11
800067cc:	ee e9 ff d8 	st.d	r7[-40],r8
	FPF12 = P2[axis][1][2] + dt * (-P2[axis][2][2] );
800067d0:	ee f9 ff ac 	ld.w	r9,r7[-84]
800067d4:	ec fa 00 1c 	ld.w	r10,r6[28]
800067d8:	12 98       	mov	r8,r9
800067da:	a3 78       	lsl	r8,0x3
800067dc:	12 08       	add	r8,r9
800067de:	a3 78       	lsl	r8,0x3
800067e0:	f4 08 00 08 	add	r8,r10,r8
800067e4:	2d 88       	sub	r8,-40
800067e6:	f0 e2 00 00 	ld.d	r2,r8[0]
800067ea:	ee fc ff a4 	ld.w	r12,r7[-92]
800067ee:	f0 16 00 02 	mcall	r6[8]
800067f2:	ee f9 ff ac 	ld.w	r9,r7[-84]
800067f6:	ec fc 00 1c 	ld.w	r12,r6[28]
800067fa:	12 98       	mov	r8,r9
800067fc:	a3 78       	lsl	r8,0x3
800067fe:	12 08       	add	r8,r9
80006800:	a3 78       	lsl	r8,0x3
80006802:	f8 08 00 08 	add	r8,r12,r8
80006806:	2c 08       	sub	r8,-64
80006808:	f0 e8 00 00 	ld.d	r8,r8[0]
8000680c:	12 94       	mov	r4,r9
8000680e:	ee 14 80 00 	eorh	r4,0x8000
80006812:	ef 44 ff 94 	st.w	r7[-108],r4
80006816:	10 9c       	mov	r12,r8
80006818:	ef 4c ff 98 	st.w	r7[-104],r12
8000681c:	ee e8 ff 94 	ld.d	r8,r7[-108]
80006820:	f0 16 00 03 	mcall	r6[12]
80006824:	14 98       	mov	r8,r10
80006826:	16 99       	mov	r9,r11
80006828:	04 9a       	mov	r10,r2
8000682a:	06 9b       	mov	r11,r3
8000682c:	f0 16 00 05 	mcall	r6[20]
80006830:	14 98       	mov	r8,r10
80006832:	16 99       	mov	r9,r11
80006834:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF20 = P2[axis][2][0] + dt * ( P2[axis][2][1] );
80006838:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000683c:	ec fa 00 1c 	ld.w	r10,r6[28]
80006840:	12 98       	mov	r8,r9
80006842:	a3 78       	lsl	r8,0x3
80006844:	12 08       	add	r8,r9
80006846:	a3 78       	lsl	r8,0x3
80006848:	f4 08 00 08 	add	r8,r10,r8
8000684c:	2d 08       	sub	r8,-48
8000684e:	f0 e2 00 00 	ld.d	r2,r8[0]
80006852:	ee fc ff a4 	ld.w	r12,r7[-92]
80006856:	f0 16 00 02 	mcall	r6[8]
8000685a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000685e:	ec fc 00 1c 	ld.w	r12,r6[28]
80006862:	12 98       	mov	r8,r9
80006864:	a3 78       	lsl	r8,0x3
80006866:	12 08       	add	r8,r9
80006868:	a3 78       	lsl	r8,0x3
8000686a:	f8 08 00 08 	add	r8,r12,r8
8000686e:	2c 88       	sub	r8,-56
80006870:	f0 e8 00 00 	ld.d	r8,r8[0]
80006874:	f0 16 00 03 	mcall	r6[12]
80006878:	14 98       	mov	r8,r10
8000687a:	16 99       	mov	r9,r11
8000687c:	04 9a       	mov	r10,r2
8000687e:	06 9b       	mov	r11,r3
80006880:	f0 16 00 05 	mcall	r6[20]
80006884:	14 98       	mov	r8,r10
80006886:	16 99       	mov	r9,r11
80006888:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF21 = P2[axis][2][1] + dt * (-P2[axis][2][2] );
8000688c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006890:	ec fa 00 1c 	ld.w	r10,r6[28]
80006894:	12 98       	mov	r8,r9
80006896:	a3 78       	lsl	r8,0x3
80006898:	12 08       	add	r8,r9
8000689a:	a3 78       	lsl	r8,0x3
8000689c:	f4 08 00 08 	add	r8,r10,r8
800068a0:	2c 88       	sub	r8,-56
800068a2:	f0 e2 00 00 	ld.d	r2,r8[0]
800068a6:	ee fc ff a4 	ld.w	r12,r7[-92]
800068aa:	f0 16 00 02 	mcall	r6[8]
800068ae:	ee f9 ff ac 	ld.w	r9,r7[-84]
800068b2:	ec fc 00 1c 	ld.w	r12,r6[28]
800068b6:	12 98       	mov	r8,r9
800068b8:	a3 78       	lsl	r8,0x3
800068ba:	12 08       	add	r8,r9
800068bc:	a3 78       	lsl	r8,0x3
800068be:	f8 08 00 08 	add	r8,r12,r8
800068c2:	2c 08       	sub	r8,-64
800068c4:	f0 e8 00 00 	ld.d	r8,r8[0]
800068c8:	12 95       	mov	r5,r9
800068ca:	ee 15 80 00 	eorh	r5,0x8000
800068ce:	ef 45 ff 9c 	st.w	r7[-100],r5
800068d2:	10 94       	mov	r4,r8
800068d4:	ef 44 ff a0 	st.w	r7[-96],r4
800068d8:	ee e8 ff 9c 	ld.d	r8,r7[-100]
800068dc:	f0 16 00 03 	mcall	r6[12]
800068e0:	14 98       	mov	r8,r10
800068e2:	16 99       	mov	r9,r11
800068e4:	04 9a       	mov	r10,r2
800068e6:	06 9b       	mov	r11,r3
800068e8:	f0 16 00 05 	mcall	r6[20]
800068ec:	14 98       	mov	r8,r10
800068ee:	16 99       	mov	r9,r11
800068f0:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF22 = P2[axis][2][2];
800068f4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800068f8:	ec fa 00 1c 	ld.w	r10,r6[28]
800068fc:	12 98       	mov	r8,r9
800068fe:	a3 78       	lsl	r8,0x3
80006900:	12 08       	add	r8,r9
80006902:	a3 78       	lsl	r8,0x3
80006904:	f4 08 00 08 	add	r8,r10,r8
80006908:	2c 08       	sub	r8,-64
8000690a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000690e:	ee e9 ff f8 	st.d	r7[-8],r8
	// P = F*P*F' + Q
	P2[axis][0][0] = FPF00 + Q2[axis][POSITION];
80006912:	ee f5 ff ac 	ld.w	r5,r7[-84]
80006916:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000691a:	ec fa 00 e4 	ld.w	r10,r6[228]
8000691e:	12 98       	mov	r8,r9
80006920:	a1 78       	lsl	r8,0x1
80006922:	12 08       	add	r8,r9
80006924:	a3 78       	lsl	r8,0x3
80006926:	f4 08 00 08 	add	r8,r10,r8
8000692a:	f0 ea 00 00 	ld.d	r10,r8[0]
8000692e:	ee e8 ff b8 	ld.d	r8,r7[-72]
80006932:	f0 16 00 05 	mcall	r6[20]
80006936:	14 98       	mov	r8,r10
80006938:	16 99       	mov	r9,r11
8000693a:	10 9a       	mov	r10,r8
8000693c:	12 9b       	mov	r11,r9
8000693e:	ec f9 00 1c 	ld.w	r9,r6[28]
80006942:	0a 98       	mov	r8,r5
80006944:	a3 78       	lsl	r8,0x3
80006946:	0a 08       	add	r8,r5
80006948:	a3 78       	lsl	r8,0x3
8000694a:	f2 08 00 08 	add	r8,r9,r8
8000694e:	f0 eb 00 00 	st.d	r8[0],r10
	P2[axis][0][1] = FPF01;
80006952:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006956:	ec fa 00 1c 	ld.w	r10,r6[28]
8000695a:	12 98       	mov	r8,r9
8000695c:	a3 78       	lsl	r8,0x3
8000695e:	12 08       	add	r8,r9
80006960:	f0 cb ff ff 	sub	r11,r8,-1
80006964:	ee e8 ff c0 	ld.d	r8,r7[-64]
80006968:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][0][2] = FPF02;
8000696c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006970:	ec fa 00 1c 	ld.w	r10,r6[28]
80006974:	12 98       	mov	r8,r9
80006976:	a3 78       	lsl	r8,0x3
80006978:	12 08       	add	r8,r9
8000697a:	a3 78       	lsl	r8,0x3
8000697c:	f4 08 00 08 	add	r8,r10,r8
80006980:	f0 ca ff f0 	sub	r10,r8,-16
80006984:	ee e8 ff c8 	ld.d	r8,r7[-56]
80006988:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][0] = FPF10;
8000698c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006990:	ec fa 00 1c 	ld.w	r10,r6[28]
80006994:	12 98       	mov	r8,r9
80006996:	a3 78       	lsl	r8,0x3
80006998:	12 08       	add	r8,r9
8000699a:	a3 78       	lsl	r8,0x3
8000699c:	f4 08 00 08 	add	r8,r10,r8
800069a0:	f0 ca ff e8 	sub	r10,r8,-24
800069a4:	ee e8 ff d0 	ld.d	r8,r7[-48]
800069a8:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = FPF11 + Q2[axis][SPEED];
800069ac:	ee f5 ff ac 	ld.w	r5,r7[-84]
800069b0:	ee f9 ff ac 	ld.w	r9,r7[-84]
800069b4:	ec fa 00 e4 	ld.w	r10,r6[228]
800069b8:	12 98       	mov	r8,r9
800069ba:	a1 78       	lsl	r8,0x1
800069bc:	12 08       	add	r8,r9
800069be:	2f f8       	sub	r8,-1
800069c0:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
800069c4:	ee e8 ff d8 	ld.d	r8,r7[-40]
800069c8:	f0 16 00 05 	mcall	r6[20]
800069cc:	14 98       	mov	r8,r10
800069ce:	16 99       	mov	r9,r11
800069d0:	10 9a       	mov	r10,r8
800069d2:	12 9b       	mov	r11,r9
800069d4:	ec f9 00 1c 	ld.w	r9,r6[28]
800069d8:	0a 98       	mov	r8,r5
800069da:	a3 78       	lsl	r8,0x3
800069dc:	0a 08       	add	r8,r5
800069de:	a3 78       	lsl	r8,0x3
800069e0:	f2 08 00 08 	add	r8,r9,r8
800069e4:	2e 08       	sub	r8,-32
800069e6:	f0 eb 00 00 	st.d	r8[0],r10
	P2[axis][1][2] = FPF12;
800069ea:	ee f9 ff ac 	ld.w	r9,r7[-84]
800069ee:	ec fa 00 1c 	ld.w	r10,r6[28]
800069f2:	12 98       	mov	r8,r9
800069f4:	a3 78       	lsl	r8,0x3
800069f6:	12 08       	add	r8,r9
800069f8:	a3 78       	lsl	r8,0x3
800069fa:	f4 08 00 08 	add	r8,r10,r8
800069fe:	f0 ca ff d8 	sub	r10,r8,-40
80006a02:	ee e8 ff e0 	ld.d	r8,r7[-32]
80006a06:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][0] = FPF20;
80006a0a:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006a0e:	ec fa 00 1c 	ld.w	r10,r6[28]
80006a12:	12 98       	mov	r8,r9
80006a14:	a3 78       	lsl	r8,0x3
80006a16:	12 08       	add	r8,r9
80006a18:	a3 78       	lsl	r8,0x3
80006a1a:	f4 08 00 08 	add	r8,r10,r8
80006a1e:	f0 ca ff d0 	sub	r10,r8,-48
80006a22:	ee e8 ff e8 	ld.d	r8,r7[-24]
80006a26:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][1] = FPF21;
80006a2a:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006a2e:	ec fa 00 1c 	ld.w	r10,r6[28]
80006a32:	12 98       	mov	r8,r9
80006a34:	a3 78       	lsl	r8,0x3
80006a36:	12 08       	add	r8,r9
80006a38:	a3 78       	lsl	r8,0x3
80006a3a:	f4 08 00 08 	add	r8,r10,r8
80006a3e:	f0 ca ff c8 	sub	r10,r8,-56
80006a42:	ee e8 ff f0 	ld.d	r8,r7[-16]
80006a46:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][2] = FPF22 + Q2[axis][BIAIS];
80006a4a:	ee f5 ff ac 	ld.w	r5,r7[-84]
80006a4e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006a52:	ec fa 00 e4 	ld.w	r10,r6[228]
80006a56:	12 98       	mov	r8,r9
80006a58:	a1 78       	lsl	r8,0x1
80006a5a:	12 08       	add	r8,r9
80006a5c:	a3 78       	lsl	r8,0x3
80006a5e:	f4 08 00 08 	add	r8,r10,r8
80006a62:	2f 08       	sub	r8,-16
80006a64:	f0 ea 00 00 	ld.d	r10,r8[0]
80006a68:	ee e8 ff f8 	ld.d	r8,r7[-8]
80006a6c:	f0 16 00 05 	mcall	r6[20]
80006a70:	14 98       	mov	r8,r10
80006a72:	16 99       	mov	r9,r11
80006a74:	10 9a       	mov	r10,r8
80006a76:	12 9b       	mov	r11,r9
80006a78:	ec f9 00 1c 	ld.w	r9,r6[28]
80006a7c:	0a 98       	mov	r8,r5
80006a7e:	a3 78       	lsl	r8,0x3
80006a80:	0a 08       	add	r8,r5
80006a82:	a3 78       	lsl	r8,0x3
80006a84:	f2 08 00 08 	add	r8,r9,r8
80006a88:	2c 08       	sub	r8,-64
80006a8a:	f0 eb 00 00 	st.d	r8[0],r10
}
80006a8e:	2c dd       	sub	sp,-204
80006a90:	d8 32       	popm	r0-r7,pc
80006a92:	00 00       	add	r0,r0
80006a94:	80 00       	ld.sh	r0,r0[0x0]
80006a96:	5c 1a       	scr	r10

80006a98 <e_kalman_predict_hf>:


void e_kalman_predict_hf(int axis, float accel_meas, float dt)
{
80006a98:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80006a9c:	1a 97       	mov	r7,sp
80006a9e:	20 fd       	sub	sp,60
80006aa0:	fe f6 05 88 	ld.w	r6,pc[1416]
80006aa4:	1e 26       	rsub	r6,pc
80006aa6:	ef 4c ff dc 	st.w	r7[-36],r12
80006aaa:	ef 4b ff d8 	st.w	r7[-40],r11
80006aae:	ef 4a ff d4 	st.w	r7[-44],r10
	double FPF00,FPF01,FPF10,FPF11;
	
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + dt * centralData->estimation.state[axis][SPEED] + dt*dt*accel_meas;
80006ab2:	ec f8 00 00 	ld.w	r8,r6[0]
80006ab6:	70 01       	ld.w	r1,r8[0x0]
80006ab8:	ee f5 ff dc 	ld.w	r5,r7[-36]
80006abc:	ec f8 00 00 	ld.w	r8,r6[0]
80006ac0:	70 0a       	ld.w	r10,r8[0x0]
80006ac2:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006ac6:	12 98       	mov	r8,r9
80006ac8:	a1 78       	lsl	r8,0x1
80006aca:	12 08       	add	r8,r9
80006acc:	a3 78       	lsl	r8,0x3
80006ace:	f4 08 00 08 	add	r8,r10,r8
80006ad2:	f0 c8 f8 5c 	sub	r8,r8,-1956
80006ad6:	f0 e2 00 00 	ld.d	r2,r8[0]
80006ada:	ee fc ff d4 	ld.w	r12,r7[-44]
80006ade:	f0 16 00 02 	mcall	r6[8]
80006ae2:	ec f8 00 00 	ld.w	r8,r6[0]
80006ae6:	70 0c       	ld.w	r12,r8[0x0]
80006ae8:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006aec:	12 98       	mov	r8,r9
80006aee:	a1 78       	lsl	r8,0x1
80006af0:	12 08       	add	r8,r9
80006af2:	2f f8       	sub	r8,-1
80006af4:	a3 78       	lsl	r8,0x3
80006af6:	f8 08 00 08 	add	r8,r12,r8
80006afa:	f0 e8 07 a4 	ld.d	r8,r8[1956]
80006afe:	f0 16 00 03 	mcall	r6[12]
80006b02:	14 98       	mov	r8,r10
80006b04:	16 99       	mov	r9,r11
80006b06:	04 9a       	mov	r10,r2
80006b08:	06 9b       	mov	r11,r3
80006b0a:	f0 16 00 05 	mcall	r6[20]
80006b0e:	14 98       	mov	r8,r10
80006b10:	16 99       	mov	r9,r11
80006b12:	10 92       	mov	r2,r8
80006b14:	12 93       	mov	r3,r9
80006b16:	ee f9 ff d4 	ld.w	r9,r7[-44]
80006b1a:	ee f8 ff d4 	ld.w	r8,r7[-44]
80006b1e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006b22:	ee f8 ff d8 	ld.w	r8,r7[-40]
80006b26:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80006b2a:	10 9c       	mov	r12,r8
80006b2c:	f0 16 00 02 	mcall	r6[8]
80006b30:	14 98       	mov	r8,r10
80006b32:	16 99       	mov	r9,r11
80006b34:	04 9a       	mov	r10,r2
80006b36:	06 9b       	mov	r11,r3
80006b38:	f0 16 00 05 	mcall	r6[20]
80006b3c:	14 98       	mov	r8,r10
80006b3e:	16 99       	mov	r9,r11
80006b40:	10 9a       	mov	r10,r8
80006b42:	12 9b       	mov	r11,r9
80006b44:	0a 98       	mov	r8,r5
80006b46:	a1 78       	lsl	r8,0x1
80006b48:	0a 08       	add	r8,r5
80006b4a:	a3 78       	lsl	r8,0x3
80006b4c:	e2 08 00 08 	add	r8,r1,r8
80006b50:	f0 c8 f8 5c 	sub	r8,r8,-1956
80006b54:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + dt * centralData->estimation.state[axis][SPEED];
80006b58:	ec f8 00 00 	ld.w	r8,r6[0]
80006b5c:	70 01       	ld.w	r1,r8[0x0]
80006b5e:	ee f5 ff dc 	ld.w	r5,r7[-36]
80006b62:	ec f8 00 00 	ld.w	r8,r6[0]
80006b66:	70 0a       	ld.w	r10,r8[0x0]
80006b68:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006b6c:	12 98       	mov	r8,r9
80006b6e:	a1 78       	lsl	r8,0x1
80006b70:	12 08       	add	r8,r9
80006b72:	a3 78       	lsl	r8,0x3
80006b74:	f4 08 00 08 	add	r8,r10,r8
80006b78:	f0 c8 f8 5c 	sub	r8,r8,-1956
80006b7c:	f0 e2 00 00 	ld.d	r2,r8[0]
80006b80:	ee fc ff d4 	ld.w	r12,r7[-44]
80006b84:	f0 16 00 02 	mcall	r6[8]
80006b88:	ec f8 00 00 	ld.w	r8,r6[0]
80006b8c:	70 0c       	ld.w	r12,r8[0x0]
80006b8e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006b92:	12 98       	mov	r8,r9
80006b94:	a1 78       	lsl	r8,0x1
80006b96:	12 08       	add	r8,r9
80006b98:	2f f8       	sub	r8,-1
80006b9a:	a3 78       	lsl	r8,0x3
80006b9c:	f8 08 00 08 	add	r8,r12,r8
80006ba0:	f0 e8 07 a4 	ld.d	r8,r8[1956]
80006ba4:	f0 16 00 03 	mcall	r6[12]
80006ba8:	14 98       	mov	r8,r10
80006baa:	16 99       	mov	r9,r11
80006bac:	04 9a       	mov	r10,r2
80006bae:	06 9b       	mov	r11,r3
80006bb0:	f0 16 00 05 	mcall	r6[20]
80006bb4:	14 98       	mov	r8,r10
80006bb6:	16 99       	mov	r9,r11
80006bb8:	10 9a       	mov	r10,r8
80006bba:	12 9b       	mov	r11,r9
80006bbc:	0a 98       	mov	r8,r5
80006bbe:	a1 78       	lsl	r8,0x1
80006bc0:	0a 08       	add	r8,r5
80006bc2:	a3 78       	lsl	r8,0x3
80006bc4:	e2 08 00 08 	add	r8,r1,r8
80006bc8:	f0 c8 f8 5c 	sub	r8,r8,-1956
80006bcc:	f0 eb 00 00 	st.d	r8[0],r10
	
	FPF00 = P[axis][0][0] + dt * (P[axis][1][0] + P[axis][0][1] + dt * P[axis][1][1]);
80006bd0:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006bd4:	ec fa 00 18 	ld.w	r10,r6[24]
80006bd8:	12 98       	mov	r8,r9
80006bda:	a3 78       	lsl	r8,0x3
80006bdc:	12 08       	add	r8,r9
80006bde:	a3 78       	lsl	r8,0x3
80006be0:	f4 08 00 08 	add	r8,r10,r8
80006be4:	f0 e2 00 00 	ld.d	r2,r8[0]
80006be8:	ee fc ff d4 	ld.w	r12,r7[-44]
80006bec:	f0 16 00 02 	mcall	r6[8]
80006bf0:	14 90       	mov	r0,r10
80006bf2:	16 91       	mov	r1,r11
80006bf4:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006bf8:	ec fa 00 18 	ld.w	r10,r6[24]
80006bfc:	12 98       	mov	r8,r9
80006bfe:	a3 78       	lsl	r8,0x3
80006c00:	12 08       	add	r8,r9
80006c02:	a3 78       	lsl	r8,0x3
80006c04:	f4 08 00 08 	add	r8,r10,r8
80006c08:	2e 88       	sub	r8,-24
80006c0a:	f0 ea 00 00 	ld.d	r10,r8[0]
80006c0e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006c12:	ec fc 00 18 	ld.w	r12,r6[24]
80006c16:	12 98       	mov	r8,r9
80006c18:	a3 78       	lsl	r8,0x3
80006c1a:	12 08       	add	r8,r9
80006c1c:	2f f8       	sub	r8,-1
80006c1e:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80006c22:	f0 16 00 05 	mcall	r6[20]
80006c26:	14 98       	mov	r8,r10
80006c28:	16 99       	mov	r9,r11
80006c2a:	ee e9 ff c4 	st.d	r7[-60],r8
80006c2e:	ee fc ff d4 	ld.w	r12,r7[-44]
80006c32:	f0 16 00 02 	mcall	r6[8]
80006c36:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006c3a:	ec fc 00 18 	ld.w	r12,r6[24]
80006c3e:	12 98       	mov	r8,r9
80006c40:	a3 78       	lsl	r8,0x3
80006c42:	12 08       	add	r8,r9
80006c44:	a3 78       	lsl	r8,0x3
80006c46:	f8 08 00 08 	add	r8,r12,r8
80006c4a:	2e 08       	sub	r8,-32
80006c4c:	f0 e8 00 00 	ld.d	r8,r8[0]
80006c50:	f0 16 00 03 	mcall	r6[12]
80006c54:	14 98       	mov	r8,r10
80006c56:	16 99       	mov	r9,r11
80006c58:	ee ea ff c4 	ld.d	r10,r7[-60]
80006c5c:	f0 16 00 05 	mcall	r6[20]
80006c60:	14 98       	mov	r8,r10
80006c62:	16 99       	mov	r9,r11
80006c64:	00 9a       	mov	r10,r0
80006c66:	02 9b       	mov	r11,r1
80006c68:	f0 16 00 03 	mcall	r6[12]
80006c6c:	14 98       	mov	r8,r10
80006c6e:	16 99       	mov	r9,r11
80006c70:	04 9a       	mov	r10,r2
80006c72:	06 9b       	mov	r11,r3
80006c74:	f0 16 00 05 	mcall	r6[20]
80006c78:	14 98       	mov	r8,r10
80006c7a:	16 99       	mov	r9,r11
80006c7c:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF01 = P[axis][0][1] + dt * P[axis][1][1];
80006c80:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006c84:	ec fa 00 18 	ld.w	r10,r6[24]
80006c88:	12 98       	mov	r8,r9
80006c8a:	a3 78       	lsl	r8,0x3
80006c8c:	12 08       	add	r8,r9
80006c8e:	2f f8       	sub	r8,-1
80006c90:	f4 08 02 32 	ld.d	r2,r10[r8<<0x3]
80006c94:	ee fc ff d4 	ld.w	r12,r7[-44]
80006c98:	f0 16 00 02 	mcall	r6[8]
80006c9c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006ca0:	ec fc 00 18 	ld.w	r12,r6[24]
80006ca4:	12 98       	mov	r8,r9
80006ca6:	a3 78       	lsl	r8,0x3
80006ca8:	12 08       	add	r8,r9
80006caa:	a3 78       	lsl	r8,0x3
80006cac:	f8 08 00 08 	add	r8,r12,r8
80006cb0:	2e 08       	sub	r8,-32
80006cb2:	f0 e8 00 00 	ld.d	r8,r8[0]
80006cb6:	f0 16 00 03 	mcall	r6[12]
80006cba:	14 98       	mov	r8,r10
80006cbc:	16 99       	mov	r9,r11
80006cbe:	04 9a       	mov	r10,r2
80006cc0:	06 9b       	mov	r11,r3
80006cc2:	f0 16 00 05 	mcall	r6[20]
80006cc6:	14 98       	mov	r8,r10
80006cc8:	16 99       	mov	r9,r11
80006cca:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF10 = P[axis][1][0] + dt * P[axis][1][1];
80006cce:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006cd2:	ec fa 00 18 	ld.w	r10,r6[24]
80006cd6:	12 98       	mov	r8,r9
80006cd8:	a3 78       	lsl	r8,0x3
80006cda:	12 08       	add	r8,r9
80006cdc:	a3 78       	lsl	r8,0x3
80006cde:	f4 08 00 08 	add	r8,r10,r8
80006ce2:	2e 88       	sub	r8,-24
80006ce4:	f0 e2 00 00 	ld.d	r2,r8[0]
80006ce8:	ee fc ff d4 	ld.w	r12,r7[-44]
80006cec:	f0 16 00 02 	mcall	r6[8]
80006cf0:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006cf4:	ec fc 00 18 	ld.w	r12,r6[24]
80006cf8:	12 98       	mov	r8,r9
80006cfa:	a3 78       	lsl	r8,0x3
80006cfc:	12 08       	add	r8,r9
80006cfe:	a3 78       	lsl	r8,0x3
80006d00:	f8 08 00 08 	add	r8,r12,r8
80006d04:	2e 08       	sub	r8,-32
80006d06:	f0 e8 00 00 	ld.d	r8,r8[0]
80006d0a:	f0 16 00 03 	mcall	r6[12]
80006d0e:	14 98       	mov	r8,r10
80006d10:	16 99       	mov	r9,r11
80006d12:	04 9a       	mov	r10,r2
80006d14:	06 9b       	mov	r11,r3
80006d16:	f0 16 00 05 	mcall	r6[20]
80006d1a:	14 98       	mov	r8,r10
80006d1c:	16 99       	mov	r9,r11
80006d1e:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF11 = P[axis][1][1];
80006d22:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006d26:	ec fa 00 18 	ld.w	r10,r6[24]
80006d2a:	12 98       	mov	r8,r9
80006d2c:	a3 78       	lsl	r8,0x3
80006d2e:	12 08       	add	r8,r9
80006d30:	a3 78       	lsl	r8,0x3
80006d32:	f4 08 00 08 	add	r8,r10,r8
80006d36:	2e 08       	sub	r8,-32
80006d38:	f0 e8 00 00 	ld.d	r8,r8[0]
80006d3c:	ee e9 ff f8 	st.d	r7[-8],r8
	
	P[axis][0][0] = FPF00 + Q[axis][POSITION];
80006d40:	ee f5 ff dc 	ld.w	r5,r7[-36]
80006d44:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006d48:	ec fa 00 e0 	ld.w	r10,r6[224]
80006d4c:	12 98       	mov	r8,r9
80006d4e:	a1 78       	lsl	r8,0x1
80006d50:	12 08       	add	r8,r9
80006d52:	a3 78       	lsl	r8,0x3
80006d54:	f4 08 00 08 	add	r8,r10,r8
80006d58:	f0 ea 00 00 	ld.d	r10,r8[0]
80006d5c:	ee e8 ff e0 	ld.d	r8,r7[-32]
80006d60:	f0 16 00 05 	mcall	r6[20]
80006d64:	14 98       	mov	r8,r10
80006d66:	16 99       	mov	r9,r11
80006d68:	10 9a       	mov	r10,r8
80006d6a:	12 9b       	mov	r11,r9
80006d6c:	ec f9 00 18 	ld.w	r9,r6[24]
80006d70:	0a 98       	mov	r8,r5
80006d72:	a3 78       	lsl	r8,0x3
80006d74:	0a 08       	add	r8,r5
80006d76:	a3 78       	lsl	r8,0x3
80006d78:	f2 08 00 08 	add	r8,r9,r8
80006d7c:	f0 eb 00 00 	st.d	r8[0],r10
	P[axis][0][1] = FPF01;
80006d80:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006d84:	ec fa 00 18 	ld.w	r10,r6[24]
80006d88:	12 98       	mov	r8,r9
80006d8a:	a3 78       	lsl	r8,0x3
80006d8c:	12 08       	add	r8,r9
80006d8e:	f0 cb ff ff 	sub	r11,r8,-1
80006d92:	ee e8 ff e8 	ld.d	r8,r7[-24]
80006d96:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P[axis][1][0] = FPF10;
80006d9a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006d9e:	ec fa 00 18 	ld.w	r10,r6[24]
80006da2:	12 98       	mov	r8,r9
80006da4:	a3 78       	lsl	r8,0x3
80006da6:	12 08       	add	r8,r9
80006da8:	a3 78       	lsl	r8,0x3
80006daa:	f4 08 00 08 	add	r8,r10,r8
80006dae:	f0 ca ff e8 	sub	r10,r8,-24
80006db2:	ee e8 ff f0 	ld.d	r8,r7[-16]
80006db6:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = FPF11 + Q[axis][SPEED];
80006dba:	ee f5 ff dc 	ld.w	r5,r7[-36]
80006dbe:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006dc2:	ec fa 00 e0 	ld.w	r10,r6[224]
80006dc6:	12 98       	mov	r8,r9
80006dc8:	a1 78       	lsl	r8,0x1
80006dca:	12 08       	add	r8,r9
80006dcc:	2f f8       	sub	r8,-1
80006dce:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
80006dd2:	ee e8 ff f8 	ld.d	r8,r7[-8]
80006dd6:	f0 16 00 05 	mcall	r6[20]
80006dda:	14 98       	mov	r8,r10
80006ddc:	16 99       	mov	r9,r11
80006dde:	10 9a       	mov	r10,r8
80006de0:	12 9b       	mov	r11,r9
80006de2:	ec f9 00 18 	ld.w	r9,r6[24]
80006de6:	0a 98       	mov	r8,r5
80006de8:	a3 78       	lsl	r8,0x3
80006dea:	0a 08       	add	r8,r5
80006dec:	a3 78       	lsl	r8,0x3
80006dee:	f2 08 00 08 	add	r8,r9,r8
80006df2:	2e 08       	sub	r8,-32
80006df4:	f0 eb 00 00 	st.d	r8[0],r10
	
	/*************************************************************************************/
	FPF00 = P2[axis][0][0] + dt * (P2[axis][1][0] + P2[axis][0][1] + dt * P2[axis][1][1]);
80006df8:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006dfc:	ec fa 00 1c 	ld.w	r10,r6[28]
80006e00:	12 98       	mov	r8,r9
80006e02:	a3 78       	lsl	r8,0x3
80006e04:	12 08       	add	r8,r9
80006e06:	a3 78       	lsl	r8,0x3
80006e08:	f4 08 00 08 	add	r8,r10,r8
80006e0c:	f0 e2 00 00 	ld.d	r2,r8[0]
80006e10:	ee fc ff d4 	ld.w	r12,r7[-44]
80006e14:	f0 16 00 02 	mcall	r6[8]
80006e18:	14 90       	mov	r0,r10
80006e1a:	16 91       	mov	r1,r11
80006e1c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006e20:	ec fa 00 1c 	ld.w	r10,r6[28]
80006e24:	12 98       	mov	r8,r9
80006e26:	a3 78       	lsl	r8,0x3
80006e28:	12 08       	add	r8,r9
80006e2a:	a3 78       	lsl	r8,0x3
80006e2c:	f4 08 00 08 	add	r8,r10,r8
80006e30:	2e 88       	sub	r8,-24
80006e32:	f0 ea 00 00 	ld.d	r10,r8[0]
80006e36:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006e3a:	ec fc 00 1c 	ld.w	r12,r6[28]
80006e3e:	12 98       	mov	r8,r9
80006e40:	a3 78       	lsl	r8,0x3
80006e42:	12 08       	add	r8,r9
80006e44:	2f f8       	sub	r8,-1
80006e46:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80006e4a:	f0 16 00 05 	mcall	r6[20]
80006e4e:	14 98       	mov	r8,r10
80006e50:	16 99       	mov	r9,r11
80006e52:	ee e9 ff cc 	st.d	r7[-52],r8
80006e56:	ee fc ff d4 	ld.w	r12,r7[-44]
80006e5a:	f0 16 00 02 	mcall	r6[8]
80006e5e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006e62:	ec fc 00 1c 	ld.w	r12,r6[28]
80006e66:	12 98       	mov	r8,r9
80006e68:	a3 78       	lsl	r8,0x3
80006e6a:	12 08       	add	r8,r9
80006e6c:	a3 78       	lsl	r8,0x3
80006e6e:	f8 08 00 08 	add	r8,r12,r8
80006e72:	2e 08       	sub	r8,-32
80006e74:	f0 e8 00 00 	ld.d	r8,r8[0]
80006e78:	f0 16 00 03 	mcall	r6[12]
80006e7c:	14 98       	mov	r8,r10
80006e7e:	16 99       	mov	r9,r11
80006e80:	ee ea ff cc 	ld.d	r10,r7[-52]
80006e84:	f0 16 00 05 	mcall	r6[20]
80006e88:	14 98       	mov	r8,r10
80006e8a:	16 99       	mov	r9,r11
80006e8c:	00 9a       	mov	r10,r0
80006e8e:	02 9b       	mov	r11,r1
80006e90:	f0 16 00 03 	mcall	r6[12]
80006e94:	14 98       	mov	r8,r10
80006e96:	16 99       	mov	r9,r11
80006e98:	04 9a       	mov	r10,r2
80006e9a:	06 9b       	mov	r11,r3
80006e9c:	f0 16 00 05 	mcall	r6[20]
80006ea0:	14 98       	mov	r8,r10
80006ea2:	16 99       	mov	r9,r11
80006ea4:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF01 = P2[axis][0][1] + dt * P2[axis][1][1];
80006ea8:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006eac:	ec fa 00 1c 	ld.w	r10,r6[28]
80006eb0:	12 98       	mov	r8,r9
80006eb2:	a3 78       	lsl	r8,0x3
80006eb4:	12 08       	add	r8,r9
80006eb6:	2f f8       	sub	r8,-1
80006eb8:	f4 08 02 32 	ld.d	r2,r10[r8<<0x3]
80006ebc:	ee fc ff d4 	ld.w	r12,r7[-44]
80006ec0:	f0 16 00 02 	mcall	r6[8]
80006ec4:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006ec8:	ec fc 00 1c 	ld.w	r12,r6[28]
80006ecc:	12 98       	mov	r8,r9
80006ece:	a3 78       	lsl	r8,0x3
80006ed0:	12 08       	add	r8,r9
80006ed2:	a3 78       	lsl	r8,0x3
80006ed4:	f8 08 00 08 	add	r8,r12,r8
80006ed8:	2e 08       	sub	r8,-32
80006eda:	f0 e8 00 00 	ld.d	r8,r8[0]
80006ede:	f0 16 00 03 	mcall	r6[12]
80006ee2:	14 98       	mov	r8,r10
80006ee4:	16 99       	mov	r9,r11
80006ee6:	04 9a       	mov	r10,r2
80006ee8:	06 9b       	mov	r11,r3
80006eea:	f0 16 00 05 	mcall	r6[20]
80006eee:	14 98       	mov	r8,r10
80006ef0:	16 99       	mov	r9,r11
80006ef2:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF10 = P2[axis][1][0] + dt * P2[axis][1][1];
80006ef6:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006efa:	ec fa 00 1c 	ld.w	r10,r6[28]
80006efe:	12 98       	mov	r8,r9
80006f00:	a3 78       	lsl	r8,0x3
80006f02:	12 08       	add	r8,r9
80006f04:	a3 78       	lsl	r8,0x3
80006f06:	f4 08 00 08 	add	r8,r10,r8
80006f0a:	2e 88       	sub	r8,-24
80006f0c:	f0 e2 00 00 	ld.d	r2,r8[0]
80006f10:	ee fc ff d4 	ld.w	r12,r7[-44]
80006f14:	f0 16 00 02 	mcall	r6[8]
80006f18:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006f1c:	ec fc 00 1c 	ld.w	r12,r6[28]
80006f20:	12 98       	mov	r8,r9
80006f22:	a3 78       	lsl	r8,0x3
80006f24:	12 08       	add	r8,r9
80006f26:	a3 78       	lsl	r8,0x3
80006f28:	f8 08 00 08 	add	r8,r12,r8
80006f2c:	2e 08       	sub	r8,-32
80006f2e:	f0 e8 00 00 	ld.d	r8,r8[0]
80006f32:	f0 16 00 03 	mcall	r6[12]
80006f36:	14 98       	mov	r8,r10
80006f38:	16 99       	mov	r9,r11
80006f3a:	04 9a       	mov	r10,r2
80006f3c:	06 9b       	mov	r11,r3
80006f3e:	f0 16 00 05 	mcall	r6[20]
80006f42:	14 98       	mov	r8,r10
80006f44:	16 99       	mov	r9,r11
80006f46:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF11 = P2[axis][1][1];
80006f4a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006f4e:	ec fa 00 1c 	ld.w	r10,r6[28]
80006f52:	12 98       	mov	r8,r9
80006f54:	a3 78       	lsl	r8,0x3
80006f56:	12 08       	add	r8,r9
80006f58:	a3 78       	lsl	r8,0x3
80006f5a:	f4 08 00 08 	add	r8,r10,r8
80006f5e:	2e 08       	sub	r8,-32
80006f60:	f0 e8 00 00 	ld.d	r8,r8[0]
80006f64:	ee e9 ff f8 	st.d	r7[-8],r8
	
	P2[axis][0][0] = FPF00 + Q2[axis][POSITION];
80006f68:	ee f5 ff dc 	ld.w	r5,r7[-36]
80006f6c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006f70:	ec fa 00 e4 	ld.w	r10,r6[228]
80006f74:	12 98       	mov	r8,r9
80006f76:	a1 78       	lsl	r8,0x1
80006f78:	12 08       	add	r8,r9
80006f7a:	a3 78       	lsl	r8,0x3
80006f7c:	f4 08 00 08 	add	r8,r10,r8
80006f80:	f0 ea 00 00 	ld.d	r10,r8[0]
80006f84:	ee e8 ff e0 	ld.d	r8,r7[-32]
80006f88:	f0 16 00 05 	mcall	r6[20]
80006f8c:	14 98       	mov	r8,r10
80006f8e:	16 99       	mov	r9,r11
80006f90:	10 9a       	mov	r10,r8
80006f92:	12 9b       	mov	r11,r9
80006f94:	ec f9 00 1c 	ld.w	r9,r6[28]
80006f98:	0a 98       	mov	r8,r5
80006f9a:	a3 78       	lsl	r8,0x3
80006f9c:	0a 08       	add	r8,r5
80006f9e:	a3 78       	lsl	r8,0x3
80006fa0:	f2 08 00 08 	add	r8,r9,r8
80006fa4:	f0 eb 00 00 	st.d	r8[0],r10
	P2[axis][0][1] = FPF01;
80006fa8:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006fac:	ec fa 00 1c 	ld.w	r10,r6[28]
80006fb0:	12 98       	mov	r8,r9
80006fb2:	a3 78       	lsl	r8,0x3
80006fb4:	12 08       	add	r8,r9
80006fb6:	f0 cb ff ff 	sub	r11,r8,-1
80006fba:	ee e8 ff e8 	ld.d	r8,r7[-24]
80006fbe:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][1][0] = FPF10;
80006fc2:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006fc6:	ec fa 00 1c 	ld.w	r10,r6[28]
80006fca:	12 98       	mov	r8,r9
80006fcc:	a3 78       	lsl	r8,0x3
80006fce:	12 08       	add	r8,r9
80006fd0:	a3 78       	lsl	r8,0x3
80006fd2:	f4 08 00 08 	add	r8,r10,r8
80006fd6:	f0 ca ff e8 	sub	r10,r8,-24
80006fda:	ee e8 ff f0 	ld.d	r8,r7[-16]
80006fde:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = FPF11 + Q2[axis][SPEED];
80006fe2:	ee f5 ff dc 	ld.w	r5,r7[-36]
80006fe6:	ee f9 ff dc 	ld.w	r9,r7[-36]
80006fea:	ec fa 00 e4 	ld.w	r10,r6[228]
80006fee:	12 98       	mov	r8,r9
80006ff0:	a1 78       	lsl	r8,0x1
80006ff2:	12 08       	add	r8,r9
80006ff4:	2f f8       	sub	r8,-1
80006ff6:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
80006ffa:	ee e8 ff f8 	ld.d	r8,r7[-8]
80006ffe:	f0 16 00 05 	mcall	r6[20]
80007002:	14 98       	mov	r8,r10
80007004:	16 99       	mov	r9,r11
80007006:	10 9a       	mov	r10,r8
80007008:	12 9b       	mov	r11,r9
8000700a:	ec f9 00 1c 	ld.w	r9,r6[28]
8000700e:	0a 98       	mov	r8,r5
80007010:	a3 78       	lsl	r8,0x3
80007012:	0a 08       	add	r8,r5
80007014:	a3 78       	lsl	r8,0x3
80007016:	f2 08 00 08 	add	r8,r9,r8
8000701a:	2e 08       	sub	r8,-32
8000701c:	f0 eb 00 00 	st.d	r8[0],r10
}
80007020:	2f 1d       	sub	sp,-60
80007022:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80007026:	00 00       	add	r0,r0
80007028:	80 00       	ld.sh	r0,r0[0x0]
8000702a:	69 28       	ld.w	r8,r4[0x48]

8000702c <e_kalman_update_position>:

// update covariance
Pp = Pm - K*H*Pm;
*/
void e_kalman_update_position (int axis, double position_meas)
{
8000702c:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80007030:	1a 97       	mov	r7,sp
80007032:	fa cd 00 e4 	sub	sp,sp,228
80007036:	fe f6 0b fe 	ld.w	r6,pc[3070]
8000703a:	1e 26       	rsub	r6,pc
8000703c:	ef 4c ff 84 	st.w	r7[-124],r12
80007040:	ee eb ff 7c 	st.d	r7[-132],r10
	double y,y2,S,K1,K2,K3;
	double P11,P12,P13,P21,P22,P23,P31,P32,P33;

	y = position_meas - centralData->estimation.state[axis][POSITION];
80007044:	ec f8 00 00 	ld.w	r8,r6[0]
80007048:	70 0a       	ld.w	r10,r8[0x0]
8000704a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000704e:	12 98       	mov	r8,r9
80007050:	a1 78       	lsl	r8,0x1
80007052:	12 08       	add	r8,r9
80007054:	a3 78       	lsl	r8,0x3
80007056:	f4 08 00 08 	add	r8,r10,r8
8000705a:	f0 c8 f8 5c 	sub	r8,r8,-1956
8000705e:	f0 e8 00 00 	ld.d	r8,r8[0]
80007062:	ee ea ff 7c 	ld.d	r10,r7[-132]
80007066:	f0 16 00 11 	mcall	r6[68]
8000706a:	14 98       	mov	r8,r10
8000706c:	16 99       	mov	r9,r11
8000706e:	ee e9 ff 88 	st.d	r7[-120],r8
	
	
	S = P[axis][0][0] + R[axis];
80007072:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007076:	ec fa 00 18 	ld.w	r10,r6[24]
8000707a:	12 98       	mov	r8,r9
8000707c:	a3 78       	lsl	r8,0x3
8000707e:	12 08       	add	r8,r9
80007080:	a3 78       	lsl	r8,0x3
80007082:	f4 08 00 08 	add	r8,r10,r8
80007086:	f0 ea 00 00 	ld.d	r10,r8[0]
8000708a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000708e:	ec f8 01 74 	ld.w	r8,r6[372]
80007092:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80007096:	f0 16 00 05 	mcall	r6[20]
8000709a:	14 98       	mov	r8,r10
8000709c:	16 99       	mov	r9,r11
8000709e:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P[axis][0][0] * 1/S;
800070a2:	ee f9 ff 84 	ld.w	r9,r7[-124]
800070a6:	ec fa 00 18 	ld.w	r10,r6[24]
800070aa:	12 98       	mov	r8,r9
800070ac:	a3 78       	lsl	r8,0x3
800070ae:	12 08       	add	r8,r9
800070b0:	a3 78       	lsl	r8,0x3
800070b2:	f4 08 00 08 	add	r8,r10,r8
800070b6:	f0 ea 00 00 	ld.d	r10,r8[0]
800070ba:	ee e8 ff 98 	ld.d	r8,r7[-104]
800070be:	f0 16 00 0c 	mcall	r6[48]
800070c2:	14 98       	mov	r8,r10
800070c4:	16 99       	mov	r9,r11
800070c6:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P[axis][1][0] * 1/S;
800070ca:	ee f9 ff 84 	ld.w	r9,r7[-124]
800070ce:	ec fa 00 18 	ld.w	r10,r6[24]
800070d2:	12 98       	mov	r8,r9
800070d4:	a3 78       	lsl	r8,0x3
800070d6:	12 08       	add	r8,r9
800070d8:	a3 78       	lsl	r8,0x3
800070da:	f4 08 00 08 	add	r8,r10,r8
800070de:	2e 88       	sub	r8,-24
800070e0:	f0 ea 00 00 	ld.d	r10,r8[0]
800070e4:	ee e8 ff 98 	ld.d	r8,r7[-104]
800070e8:	f0 16 00 0c 	mcall	r6[48]
800070ec:	14 98       	mov	r8,r10
800070ee:	16 99       	mov	r9,r11
800070f0:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P[axis][2][0] * 1/S;
800070f4:	ee f9 ff 84 	ld.w	r9,r7[-124]
800070f8:	ec fa 00 18 	ld.w	r10,r6[24]
800070fc:	12 98       	mov	r8,r9
800070fe:	a3 78       	lsl	r8,0x3
80007100:	12 08       	add	r8,r9
80007102:	a3 78       	lsl	r8,0x3
80007104:	f4 08 00 08 	add	r8,r10,r8
80007108:	2d 08       	sub	r8,-48
8000710a:	f0 ea 00 00 	ld.d	r10,r8[0]
8000710e:	ee e8 ff 98 	ld.d	r8,r7[-104]
80007112:	f0 16 00 0c 	mcall	r6[48]
80007116:	14 98       	mov	r8,r10
80007118:	16 99       	mov	r9,r11
8000711a:	ee e9 ff b0 	st.d	r7[-80],r8

	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * y;
8000711e:	ec f8 00 00 	ld.w	r8,r6[0]
80007122:	70 01       	ld.w	r1,r8[0x0]
80007124:	ee f5 ff 84 	ld.w	r5,r7[-124]
80007128:	ec f8 00 00 	ld.w	r8,r6[0]
8000712c:	70 0a       	ld.w	r10,r8[0x0]
8000712e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007132:	12 98       	mov	r8,r9
80007134:	a1 78       	lsl	r8,0x1
80007136:	12 08       	add	r8,r9
80007138:	a3 78       	lsl	r8,0x3
8000713a:	f4 08 00 08 	add	r8,r10,r8
8000713e:	f0 c8 f8 5c 	sub	r8,r8,-1956
80007142:	f0 e2 00 00 	ld.d	r2,r8[0]
80007146:	ee e8 ff 88 	ld.d	r8,r7[-120]
8000714a:	ee ea ff a0 	ld.d	r10,r7[-96]
8000714e:	f0 16 00 03 	mcall	r6[12]
80007152:	14 98       	mov	r8,r10
80007154:	16 99       	mov	r9,r11
80007156:	04 9a       	mov	r10,r2
80007158:	06 9b       	mov	r11,r3
8000715a:	f0 16 00 05 	mcall	r6[20]
8000715e:	14 98       	mov	r8,r10
80007160:	16 99       	mov	r9,r11
80007162:	10 9a       	mov	r10,r8
80007164:	12 9b       	mov	r11,r9
80007166:	0a 98       	mov	r8,r5
80007168:	a1 78       	lsl	r8,0x1
8000716a:	0a 08       	add	r8,r5
8000716c:	a3 78       	lsl	r8,0x3
8000716e:	e2 08 00 08 	add	r8,r1,r8
80007172:	f0 c8 f8 5c 	sub	r8,r8,-1956
80007176:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * y;
8000717a:	ec f8 00 00 	ld.w	r8,r6[0]
8000717e:	70 01       	ld.w	r1,r8[0x0]
80007180:	ee f5 ff 84 	ld.w	r5,r7[-124]
80007184:	ec f8 00 00 	ld.w	r8,r6[0]
80007188:	70 0a       	ld.w	r10,r8[0x0]
8000718a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000718e:	12 98       	mov	r8,r9
80007190:	a1 78       	lsl	r8,0x1
80007192:	12 08       	add	r8,r9
80007194:	2f f8       	sub	r8,-1
80007196:	a3 78       	lsl	r8,0x3
80007198:	f4 08 00 08 	add	r8,r10,r8
8000719c:	f0 e2 07 a4 	ld.d	r2,r8[1956]
800071a0:	ee e8 ff 88 	ld.d	r8,r7[-120]
800071a4:	ee ea ff a8 	ld.d	r10,r7[-88]
800071a8:	f0 16 00 03 	mcall	r6[12]
800071ac:	14 98       	mov	r8,r10
800071ae:	16 99       	mov	r9,r11
800071b0:	04 9a       	mov	r10,r2
800071b2:	06 9b       	mov	r11,r3
800071b4:	f0 16 00 05 	mcall	r6[20]
800071b8:	14 98       	mov	r8,r10
800071ba:	16 99       	mov	r9,r11
800071bc:	10 9a       	mov	r10,r8
800071be:	12 9b       	mov	r11,r9
800071c0:	0a 98       	mov	r8,r5
800071c2:	a1 78       	lsl	r8,0x1
800071c4:	0a 08       	add	r8,r5
800071c6:	2f f8       	sub	r8,-1
800071c8:	a3 78       	lsl	r8,0x3
800071ca:	e2 08 00 08 	add	r8,r1,r8
800071ce:	f0 eb 07 a4 	st.d	r8[1956],r10
	centralData->estimation.state[axis][BIAIS] = centralData->estimation.state[axis][BIAIS] + K3 * y;
800071d2:	ec f8 00 00 	ld.w	r8,r6[0]
800071d6:	70 01       	ld.w	r1,r8[0x0]
800071d8:	ee f5 ff 84 	ld.w	r5,r7[-124]
800071dc:	ec f8 00 00 	ld.w	r8,r6[0]
800071e0:	70 0a       	ld.w	r10,r8[0x0]
800071e2:	ee f9 ff 84 	ld.w	r9,r7[-124]
800071e6:	12 98       	mov	r8,r9
800071e8:	a1 78       	lsl	r8,0x1
800071ea:	12 08       	add	r8,r9
800071ec:	a3 78       	lsl	r8,0x3
800071ee:	f4 08 00 08 	add	r8,r10,r8
800071f2:	f0 c8 f8 4c 	sub	r8,r8,-1972
800071f6:	f0 e2 00 00 	ld.d	r2,r8[0]
800071fa:	ee e8 ff 88 	ld.d	r8,r7[-120]
800071fe:	ee ea ff b0 	ld.d	r10,r7[-80]
80007202:	f0 16 00 03 	mcall	r6[12]
80007206:	14 98       	mov	r8,r10
80007208:	16 99       	mov	r9,r11
8000720a:	04 9a       	mov	r10,r2
8000720c:	06 9b       	mov	r11,r3
8000720e:	f0 16 00 05 	mcall	r6[20]
80007212:	14 98       	mov	r8,r10
80007214:	16 99       	mov	r9,r11
80007216:	10 9a       	mov	r10,r8
80007218:	12 9b       	mov	r11,r9
8000721a:	0a 98       	mov	r8,r5
8000721c:	a1 78       	lsl	r8,0x1
8000721e:	0a 08       	add	r8,r5
80007220:	a3 78       	lsl	r8,0x3
80007222:	e2 08 00 08 	add	r8,r1,r8
80007226:	f0 c8 f8 4c 	sub	r8,r8,-1972
8000722a:	f0 eb 00 00 	st.d	r8[0],r10

	P11 = (1. - K1) * P[axis][0][0];
8000722e:	ee e8 ff a0 	ld.d	r8,r7[-96]
80007232:	30 0a       	mov	r10,0
80007234:	fc 1b 3f f0 	movh	r11,0x3ff0
80007238:	f0 16 00 11 	mcall	r6[68]
8000723c:	14 98       	mov	r8,r10
8000723e:	16 99       	mov	r9,r11
80007240:	10 9a       	mov	r10,r8
80007242:	12 9b       	mov	r11,r9
80007244:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007248:	ec fc 00 18 	ld.w	r12,r6[24]
8000724c:	12 98       	mov	r8,r9
8000724e:	a3 78       	lsl	r8,0x3
80007250:	12 08       	add	r8,r9
80007252:	a3 78       	lsl	r8,0x3
80007254:	f8 08 00 08 	add	r8,r12,r8
80007258:	f0 e8 00 00 	ld.d	r8,r8[0]
8000725c:	f0 16 00 03 	mcall	r6[12]
80007260:	14 98       	mov	r8,r10
80007262:	16 99       	mov	r9,r11
80007264:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = (1. - K1) * P[axis][0][1];
80007268:	ee e8 ff a0 	ld.d	r8,r7[-96]
8000726c:	30 0a       	mov	r10,0
8000726e:	fc 1b 3f f0 	movh	r11,0x3ff0
80007272:	f0 16 00 11 	mcall	r6[68]
80007276:	14 98       	mov	r8,r10
80007278:	16 99       	mov	r9,r11
8000727a:	10 9a       	mov	r10,r8
8000727c:	12 9b       	mov	r11,r9
8000727e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007282:	ec fc 00 18 	ld.w	r12,r6[24]
80007286:	12 98       	mov	r8,r9
80007288:	a3 78       	lsl	r8,0x3
8000728a:	12 08       	add	r8,r9
8000728c:	2f f8       	sub	r8,-1
8000728e:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80007292:	f0 16 00 03 	mcall	r6[12]
80007296:	14 98       	mov	r8,r10
80007298:	16 99       	mov	r9,r11
8000729a:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = (1. - K1) * P[axis][0][2];
8000729e:	ee e8 ff a0 	ld.d	r8,r7[-96]
800072a2:	30 0a       	mov	r10,0
800072a4:	fc 1b 3f f0 	movh	r11,0x3ff0
800072a8:	f0 16 00 11 	mcall	r6[68]
800072ac:	14 98       	mov	r8,r10
800072ae:	16 99       	mov	r9,r11
800072b0:	10 9a       	mov	r10,r8
800072b2:	12 9b       	mov	r11,r9
800072b4:	ee f9 ff 84 	ld.w	r9,r7[-124]
800072b8:	ec fc 00 18 	ld.w	r12,r6[24]
800072bc:	12 98       	mov	r8,r9
800072be:	a3 78       	lsl	r8,0x3
800072c0:	12 08       	add	r8,r9
800072c2:	a3 78       	lsl	r8,0x3
800072c4:	f8 08 00 08 	add	r8,r12,r8
800072c8:	2f 08       	sub	r8,-16
800072ca:	f0 e8 00 00 	ld.d	r8,r8[0]
800072ce:	f0 16 00 03 	mcall	r6[12]
800072d2:	14 98       	mov	r8,r10
800072d4:	16 99       	mov	r9,r11
800072d6:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = -K2 * P[axis][0][0] + P[axis][1][0];
800072da:	ee f8 ff a8 	ld.w	r8,r7[-88]
800072de:	10 99       	mov	r9,r8
800072e0:	ee 19 80 00 	eorh	r9,0x8000
800072e4:	ef 49 ff 1c 	st.w	r7[-228],r9
800072e8:	ee f8 ff ac 	ld.w	r8,r7[-84]
800072ec:	ef 48 ff 20 	st.w	r7[-224],r8
800072f0:	ee f9 ff 84 	ld.w	r9,r7[-124]
800072f4:	ec fa 00 18 	ld.w	r10,r6[24]
800072f8:	12 98       	mov	r8,r9
800072fa:	a3 78       	lsl	r8,0x3
800072fc:	12 08       	add	r8,r9
800072fe:	a3 78       	lsl	r8,0x3
80007300:	f4 08 00 08 	add	r8,r10,r8
80007304:	f0 e8 00 00 	ld.d	r8,r8[0]
80007308:	ee ea ff 1c 	ld.d	r10,r7[-228]
8000730c:	f0 16 00 03 	mcall	r6[12]
80007310:	14 98       	mov	r8,r10
80007312:	16 99       	mov	r9,r11
80007314:	10 9a       	mov	r10,r8
80007316:	12 9b       	mov	r11,r9
80007318:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000731c:	ec fc 00 18 	ld.w	r12,r6[24]
80007320:	12 98       	mov	r8,r9
80007322:	a3 78       	lsl	r8,0x3
80007324:	12 08       	add	r8,r9
80007326:	a3 78       	lsl	r8,0x3
80007328:	f8 08 00 08 	add	r8,r12,r8
8000732c:	2e 88       	sub	r8,-24
8000732e:	f0 e8 00 00 	ld.d	r8,r8[0]
80007332:	f0 16 00 05 	mcall	r6[20]
80007336:	14 98       	mov	r8,r10
80007338:	16 99       	mov	r9,r11
8000733a:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = -K2 * P[axis][0][1] + P[axis][1][1];
8000733e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80007342:	10 99       	mov	r9,r8
80007344:	ee 19 80 00 	eorh	r9,0x8000
80007348:	ef 49 ff 24 	st.w	r7[-220],r9
8000734c:	ee f8 ff ac 	ld.w	r8,r7[-84]
80007350:	ef 48 ff 28 	st.w	r7[-216],r8
80007354:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007358:	ec fa 00 18 	ld.w	r10,r6[24]
8000735c:	12 98       	mov	r8,r9
8000735e:	a3 78       	lsl	r8,0x3
80007360:	12 08       	add	r8,r9
80007362:	2f f8       	sub	r8,-1
80007364:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80007368:	ee ea ff 24 	ld.d	r10,r7[-220]
8000736c:	f0 16 00 03 	mcall	r6[12]
80007370:	14 98       	mov	r8,r10
80007372:	16 99       	mov	r9,r11
80007374:	10 9a       	mov	r10,r8
80007376:	12 9b       	mov	r11,r9
80007378:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000737c:	ec fc 00 18 	ld.w	r12,r6[24]
80007380:	12 98       	mov	r8,r9
80007382:	a3 78       	lsl	r8,0x3
80007384:	12 08       	add	r8,r9
80007386:	a3 78       	lsl	r8,0x3
80007388:	f8 08 00 08 	add	r8,r12,r8
8000738c:	2e 08       	sub	r8,-32
8000738e:	f0 e8 00 00 	ld.d	r8,r8[0]
80007392:	f0 16 00 05 	mcall	r6[20]
80007396:	14 98       	mov	r8,r10
80007398:	16 99       	mov	r9,r11
8000739a:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = -K2 * P[axis][0][2] + P[axis][1][2];
8000739e:	ee f8 ff a8 	ld.w	r8,r7[-88]
800073a2:	10 99       	mov	r9,r8
800073a4:	ee 19 80 00 	eorh	r9,0x8000
800073a8:	ef 49 ff 2c 	st.w	r7[-212],r9
800073ac:	ee f8 ff ac 	ld.w	r8,r7[-84]
800073b0:	ef 48 ff 30 	st.w	r7[-208],r8
800073b4:	ee f9 ff 84 	ld.w	r9,r7[-124]
800073b8:	ec fa 00 18 	ld.w	r10,r6[24]
800073bc:	12 98       	mov	r8,r9
800073be:	a3 78       	lsl	r8,0x3
800073c0:	12 08       	add	r8,r9
800073c2:	a3 78       	lsl	r8,0x3
800073c4:	f4 08 00 08 	add	r8,r10,r8
800073c8:	2f 08       	sub	r8,-16
800073ca:	f0 e8 00 00 	ld.d	r8,r8[0]
800073ce:	ee ea ff 2c 	ld.d	r10,r7[-212]
800073d2:	f0 16 00 03 	mcall	r6[12]
800073d6:	14 98       	mov	r8,r10
800073d8:	16 99       	mov	r9,r11
800073da:	10 9a       	mov	r10,r8
800073dc:	12 9b       	mov	r11,r9
800073de:	ee f9 ff 84 	ld.w	r9,r7[-124]
800073e2:	ec fc 00 18 	ld.w	r12,r6[24]
800073e6:	12 98       	mov	r8,r9
800073e8:	a3 78       	lsl	r8,0x3
800073ea:	12 08       	add	r8,r9
800073ec:	a3 78       	lsl	r8,0x3
800073ee:	f8 08 00 08 	add	r8,r12,r8
800073f2:	2d 88       	sub	r8,-40
800073f4:	f0 e8 00 00 	ld.d	r8,r8[0]
800073f8:	f0 16 00 05 	mcall	r6[20]
800073fc:	14 98       	mov	r8,r10
800073fe:	16 99       	mov	r9,r11
80007400:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P[axis][0][0] + P[axis][2][0];
80007404:	ee f8 ff b0 	ld.w	r8,r7[-80]
80007408:	10 99       	mov	r9,r8
8000740a:	ee 19 80 00 	eorh	r9,0x8000
8000740e:	ef 49 ff 34 	st.w	r7[-204],r9
80007412:	ee f8 ff b4 	ld.w	r8,r7[-76]
80007416:	ef 48 ff 38 	st.w	r7[-200],r8
8000741a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000741e:	ec fa 00 18 	ld.w	r10,r6[24]
80007422:	12 98       	mov	r8,r9
80007424:	a3 78       	lsl	r8,0x3
80007426:	12 08       	add	r8,r9
80007428:	a3 78       	lsl	r8,0x3
8000742a:	f4 08 00 08 	add	r8,r10,r8
8000742e:	f0 e8 00 00 	ld.d	r8,r8[0]
80007432:	ee ea ff 34 	ld.d	r10,r7[-204]
80007436:	f0 16 00 03 	mcall	r6[12]
8000743a:	14 98       	mov	r8,r10
8000743c:	16 99       	mov	r9,r11
8000743e:	10 9a       	mov	r10,r8
80007440:	12 9b       	mov	r11,r9
80007442:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007446:	ec fc 00 18 	ld.w	r12,r6[24]
8000744a:	12 98       	mov	r8,r9
8000744c:	a3 78       	lsl	r8,0x3
8000744e:	12 08       	add	r8,r9
80007450:	a3 78       	lsl	r8,0x3
80007452:	f8 08 00 08 	add	r8,r12,r8
80007456:	2d 08       	sub	r8,-48
80007458:	f0 e8 00 00 	ld.d	r8,r8[0]
8000745c:	f0 16 00 05 	mcall	r6[20]
80007460:	14 98       	mov	r8,r10
80007462:	16 99       	mov	r9,r11
80007464:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P[axis][0][1] + P[axis][2][1];
80007468:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000746c:	10 99       	mov	r9,r8
8000746e:	ee 19 80 00 	eorh	r9,0x8000
80007472:	ef 49 ff 3c 	st.w	r7[-196],r9
80007476:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000747a:	ef 48 ff 40 	st.w	r7[-192],r8
8000747e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007482:	ec fa 00 18 	ld.w	r10,r6[24]
80007486:	12 98       	mov	r8,r9
80007488:	a3 78       	lsl	r8,0x3
8000748a:	12 08       	add	r8,r9
8000748c:	2f f8       	sub	r8,-1
8000748e:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80007492:	ee ea ff 3c 	ld.d	r10,r7[-196]
80007496:	f0 16 00 03 	mcall	r6[12]
8000749a:	14 98       	mov	r8,r10
8000749c:	16 99       	mov	r9,r11
8000749e:	10 9a       	mov	r10,r8
800074a0:	12 9b       	mov	r11,r9
800074a2:	ee f9 ff 84 	ld.w	r9,r7[-124]
800074a6:	ec fc 00 18 	ld.w	r12,r6[24]
800074aa:	12 98       	mov	r8,r9
800074ac:	a3 78       	lsl	r8,0x3
800074ae:	12 08       	add	r8,r9
800074b0:	a3 78       	lsl	r8,0x3
800074b2:	f8 08 00 08 	add	r8,r12,r8
800074b6:	2c 88       	sub	r8,-56
800074b8:	f0 e8 00 00 	ld.d	r8,r8[0]
800074bc:	f0 16 00 05 	mcall	r6[20]
800074c0:	14 98       	mov	r8,r10
800074c2:	16 99       	mov	r9,r11
800074c4:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P[axis][0][2] + P[axis][2][2];
800074c8:	ee f8 ff b0 	ld.w	r8,r7[-80]
800074cc:	10 99       	mov	r9,r8
800074ce:	ee 19 80 00 	eorh	r9,0x8000
800074d2:	ef 49 ff 44 	st.w	r7[-188],r9
800074d6:	ee f8 ff b4 	ld.w	r8,r7[-76]
800074da:	ef 48 ff 48 	st.w	r7[-184],r8
800074de:	ee f9 ff 84 	ld.w	r9,r7[-124]
800074e2:	ec fa 00 18 	ld.w	r10,r6[24]
800074e6:	12 98       	mov	r8,r9
800074e8:	a3 78       	lsl	r8,0x3
800074ea:	12 08       	add	r8,r9
800074ec:	a3 78       	lsl	r8,0x3
800074ee:	f4 08 00 08 	add	r8,r10,r8
800074f2:	2f 08       	sub	r8,-16
800074f4:	f0 e8 00 00 	ld.d	r8,r8[0]
800074f8:	ee ea ff 44 	ld.d	r10,r7[-188]
800074fc:	f0 16 00 03 	mcall	r6[12]
80007500:	14 98       	mov	r8,r10
80007502:	16 99       	mov	r9,r11
80007504:	10 9a       	mov	r10,r8
80007506:	12 9b       	mov	r11,r9
80007508:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000750c:	ec fc 00 18 	ld.w	r12,r6[24]
80007510:	12 98       	mov	r8,r9
80007512:	a3 78       	lsl	r8,0x3
80007514:	12 08       	add	r8,r9
80007516:	a3 78       	lsl	r8,0x3
80007518:	f8 08 00 08 	add	r8,r12,r8
8000751c:	2c 08       	sub	r8,-64
8000751e:	f0 e8 00 00 	ld.d	r8,r8[0]
80007522:	f0 16 00 05 	mcall	r6[20]
80007526:	14 98       	mov	r8,r10
80007528:	16 99       	mov	r9,r11
8000752a:	ee e9 ff f8 	st.d	r7[-8],r8

	P[axis][0][0] = P11;
8000752e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007532:	ec fa 00 18 	ld.w	r10,r6[24]
80007536:	12 98       	mov	r8,r9
80007538:	a3 78       	lsl	r8,0x3
8000753a:	12 08       	add	r8,r9
8000753c:	a3 78       	lsl	r8,0x3
8000753e:	10 0a       	add	r10,r8
80007540:	ee e8 ff b8 	ld.d	r8,r7[-72]
80007544:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][0][1] = P12;
80007548:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000754c:	ec fb 00 18 	ld.w	r11,r6[24]
80007550:	12 98       	mov	r8,r9
80007552:	a3 78       	lsl	r8,0x3
80007554:	12 08       	add	r8,r9
80007556:	f0 ca ff ff 	sub	r10,r8,-1
8000755a:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000755e:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
	P[axis][0][2] = P13;
80007562:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007566:	ec fa 00 18 	ld.w	r10,r6[24]
8000756a:	12 98       	mov	r8,r9
8000756c:	a3 78       	lsl	r8,0x3
8000756e:	12 08       	add	r8,r9
80007570:	a3 78       	lsl	r8,0x3
80007572:	f4 08 00 08 	add	r8,r10,r8
80007576:	f0 ca ff f0 	sub	r10,r8,-16
8000757a:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000757e:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][0] = P21;
80007582:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007586:	ec fa 00 18 	ld.w	r10,r6[24]
8000758a:	12 98       	mov	r8,r9
8000758c:	a3 78       	lsl	r8,0x3
8000758e:	12 08       	add	r8,r9
80007590:	a3 78       	lsl	r8,0x3
80007592:	f4 08 00 08 	add	r8,r10,r8
80007596:	f0 ca ff e8 	sub	r10,r8,-24
8000759a:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000759e:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = P22;
800075a2:	ee f9 ff 84 	ld.w	r9,r7[-124]
800075a6:	ec fa 00 18 	ld.w	r10,r6[24]
800075aa:	12 98       	mov	r8,r9
800075ac:	a3 78       	lsl	r8,0x3
800075ae:	12 08       	add	r8,r9
800075b0:	a3 78       	lsl	r8,0x3
800075b2:	f4 08 00 08 	add	r8,r10,r8
800075b6:	f0 ca ff e0 	sub	r10,r8,-32
800075ba:	ee e8 ff d8 	ld.d	r8,r7[-40]
800075be:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][2] = P23;
800075c2:	ee f9 ff 84 	ld.w	r9,r7[-124]
800075c6:	ec fa 00 18 	ld.w	r10,r6[24]
800075ca:	12 98       	mov	r8,r9
800075cc:	a3 78       	lsl	r8,0x3
800075ce:	12 08       	add	r8,r9
800075d0:	a3 78       	lsl	r8,0x3
800075d2:	f4 08 00 08 	add	r8,r10,r8
800075d6:	f0 ca ff d8 	sub	r10,r8,-40
800075da:	ee e8 ff e0 	ld.d	r8,r7[-32]
800075de:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][0] = P31;
800075e2:	ee f9 ff 84 	ld.w	r9,r7[-124]
800075e6:	ec fa 00 18 	ld.w	r10,r6[24]
800075ea:	12 98       	mov	r8,r9
800075ec:	a3 78       	lsl	r8,0x3
800075ee:	12 08       	add	r8,r9
800075f0:	a3 78       	lsl	r8,0x3
800075f2:	f4 08 00 08 	add	r8,r10,r8
800075f6:	f0 ca ff d0 	sub	r10,r8,-48
800075fa:	ee e8 ff e8 	ld.d	r8,r7[-24]
800075fe:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][1] = P32;
80007602:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007606:	ec fa 00 18 	ld.w	r10,r6[24]
8000760a:	12 98       	mov	r8,r9
8000760c:	a3 78       	lsl	r8,0x3
8000760e:	12 08       	add	r8,r9
80007610:	a3 78       	lsl	r8,0x3
80007612:	f4 08 00 08 	add	r8,r10,r8
80007616:	f0 ca ff c8 	sub	r10,r8,-56
8000761a:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000761e:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][2] = P33;
80007622:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007626:	ec fa 00 18 	ld.w	r10,r6[24]
8000762a:	12 98       	mov	r8,r9
8000762c:	a3 78       	lsl	r8,0x3
8000762e:	12 08       	add	r8,r9
80007630:	a3 78       	lsl	r8,0x3
80007632:	f4 08 00 08 	add	r8,r10,r8
80007636:	f0 ca ff c0 	sub	r10,r8,-64
8000763a:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000763e:	f4 e9 00 00 	st.d	r10[0],r8
	
	/*************************************************************************************/
	y = position_meas - centralData->position_estimator.localPosition.pos[axis];
80007642:	ec f8 00 00 	ld.w	r8,r6[0]
80007646:	70 09       	ld.w	r9,r8[0x0]
80007648:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000764c:	f0 c8 fd 87 	sub	r8,r8,-633
80007650:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80007654:	10 9c       	mov	r12,r8
80007656:	f0 16 00 02 	mcall	r6[8]
8000765a:	14 98       	mov	r8,r10
8000765c:	16 99       	mov	r9,r11
8000765e:	ee ea ff 7c 	ld.d	r10,r7[-132]
80007662:	f0 16 00 11 	mcall	r6[68]
80007666:	14 98       	mov	r8,r10
80007668:	16 99       	mov	r9,r11
8000766a:	ee e9 ff 88 	st.d	r7[-120],r8
	
	S = P2[axis][0][0] + R2[axis];
8000766e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007672:	ec fa 00 1c 	ld.w	r10,r6[28]
80007676:	12 98       	mov	r8,r9
80007678:	a3 78       	lsl	r8,0x3
8000767a:	12 08       	add	r8,r9
8000767c:	a3 78       	lsl	r8,0x3
8000767e:	f4 08 00 08 	add	r8,r10,r8
80007682:	f0 ea 00 00 	ld.d	r10,r8[0]
80007686:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000768a:	ec f8 01 70 	ld.w	r8,r6[368]
8000768e:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80007692:	f0 16 00 05 	mcall	r6[20]
80007696:	14 98       	mov	r8,r10
80007698:	16 99       	mov	r9,r11
8000769a:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P2[axis][0][0] * 1/S;
8000769e:	ee f9 ff 84 	ld.w	r9,r7[-124]
800076a2:	ec fa 00 1c 	ld.w	r10,r6[28]
800076a6:	12 98       	mov	r8,r9
800076a8:	a3 78       	lsl	r8,0x3
800076aa:	12 08       	add	r8,r9
800076ac:	a3 78       	lsl	r8,0x3
800076ae:	f4 08 00 08 	add	r8,r10,r8
800076b2:	f0 ea 00 00 	ld.d	r10,r8[0]
800076b6:	ee e8 ff 98 	ld.d	r8,r7[-104]
800076ba:	f0 16 00 0c 	mcall	r6[48]
800076be:	14 98       	mov	r8,r10
800076c0:	16 99       	mov	r9,r11
800076c2:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P2[axis][1][0] * 1/S;
800076c6:	ee f9 ff 84 	ld.w	r9,r7[-124]
800076ca:	ec fa 00 1c 	ld.w	r10,r6[28]
800076ce:	12 98       	mov	r8,r9
800076d0:	a3 78       	lsl	r8,0x3
800076d2:	12 08       	add	r8,r9
800076d4:	a3 78       	lsl	r8,0x3
800076d6:	f4 08 00 08 	add	r8,r10,r8
800076da:	2e 88       	sub	r8,-24
800076dc:	f0 ea 00 00 	ld.d	r10,r8[0]
800076e0:	ee e8 ff 98 	ld.d	r8,r7[-104]
800076e4:	f0 16 00 0c 	mcall	r6[48]
800076e8:	14 98       	mov	r8,r10
800076ea:	16 99       	mov	r9,r11
800076ec:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P2[axis][2][0] * 1/S;
800076f0:	ee f9 ff 84 	ld.w	r9,r7[-124]
800076f4:	ec fa 00 1c 	ld.w	r10,r6[28]
800076f8:	12 98       	mov	r8,r9
800076fa:	a3 78       	lsl	r8,0x3
800076fc:	12 08       	add	r8,r9
800076fe:	a3 78       	lsl	r8,0x3
80007700:	f4 08 00 08 	add	r8,r10,r8
80007704:	2d 08       	sub	r8,-48
80007706:	f0 ea 00 00 	ld.d	r10,r8[0]
8000770a:	ee e8 ff 98 	ld.d	r8,r7[-104]
8000770e:	f0 16 00 0c 	mcall	r6[48]
80007712:	14 98       	mov	r8,r10
80007714:	16 99       	mov	r9,r11
80007716:	ee e9 ff b0 	st.d	r7[-80],r8
	
	centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * y;
8000771a:	ec f8 00 00 	ld.w	r8,r6[0]
8000771e:	70 01       	ld.w	r1,r8[0x0]
80007720:	ee f5 ff 84 	ld.w	r5,r7[-124]
80007724:	ec f8 00 00 	ld.w	r8,r6[0]
80007728:	70 09       	ld.w	r9,r8[0x0]
8000772a:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000772e:	f0 c8 fd 87 	sub	r8,r8,-633
80007732:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80007736:	10 9c       	mov	r12,r8
80007738:	f0 16 00 02 	mcall	r6[8]
8000773c:	14 92       	mov	r2,r10
8000773e:	16 93       	mov	r3,r11
80007740:	ee e8 ff 88 	ld.d	r8,r7[-120]
80007744:	ee ea ff a0 	ld.d	r10,r7[-96]
80007748:	f0 16 00 03 	mcall	r6[12]
8000774c:	14 98       	mov	r8,r10
8000774e:	16 99       	mov	r9,r11
80007750:	04 9a       	mov	r10,r2
80007752:	06 9b       	mov	r11,r3
80007754:	f0 16 00 05 	mcall	r6[20]
80007758:	14 98       	mov	r8,r10
8000775a:	16 99       	mov	r9,r11
8000775c:	10 9a       	mov	r10,r8
8000775e:	12 9b       	mov	r11,r9
80007760:	f0 16 00 09 	mcall	r6[36]
80007764:	18 99       	mov	r9,r12
80007766:	ea c8 fd 87 	sub	r8,r5,-633
8000776a:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * y;
8000776e:	ec f8 00 00 	ld.w	r8,r6[0]
80007772:	70 01       	ld.w	r1,r8[0x0]
80007774:	ee f5 ff 84 	ld.w	r5,r7[-124]
80007778:	ec f8 00 00 	ld.w	r8,r6[0]
8000777c:	70 09       	ld.w	r9,r8[0x0]
8000777e:	ee f8 ff 84 	ld.w	r8,r7[-124]
80007782:	f0 c8 fd 91 	sub	r8,r8,-623
80007786:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
8000778a:	10 9c       	mov	r12,r8
8000778c:	f0 16 00 02 	mcall	r6[8]
80007790:	14 92       	mov	r2,r10
80007792:	16 93       	mov	r3,r11
80007794:	ee e8 ff 88 	ld.d	r8,r7[-120]
80007798:	ee ea ff a8 	ld.d	r10,r7[-88]
8000779c:	f0 16 00 03 	mcall	r6[12]
800077a0:	14 98       	mov	r8,r10
800077a2:	16 99       	mov	r9,r11
800077a4:	04 9a       	mov	r10,r2
800077a6:	06 9b       	mov	r11,r3
800077a8:	f0 16 00 05 	mcall	r6[20]
800077ac:	14 98       	mov	r8,r10
800077ae:	16 99       	mov	r9,r11
800077b0:	10 9a       	mov	r10,r8
800077b2:	12 9b       	mov	r11,r9
800077b4:	f0 16 00 09 	mcall	r6[36]
800077b8:	18 99       	mov	r9,r12
800077ba:	ea c8 fd 91 	sub	r8,r5,-623
800077be:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->imu1.attitude.be[axis+ACC_OFFSET] = centralData->imu1.attitude.be[axis+ACC_OFFSET] + K3 * y;
800077c2:	ec f8 00 00 	ld.w	r8,r6[0]
800077c6:	70 01       	ld.w	r1,r8[0x0]
800077c8:	ee f8 ff 84 	ld.w	r8,r7[-124]
800077cc:	f0 c5 ff fd 	sub	r5,r8,-3
800077d0:	ec f8 00 00 	ld.w	r8,r6[0]
800077d4:	70 09       	ld.w	r9,r8[0x0]
800077d6:	ee f8 ff 84 	ld.w	r8,r7[-124]
800077da:	2f d8       	sub	r8,-3
800077dc:	2f 48       	sub	r8,-12
800077de:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
800077e2:	10 9c       	mov	r12,r8
800077e4:	f0 16 00 02 	mcall	r6[8]
800077e8:	14 92       	mov	r2,r10
800077ea:	16 93       	mov	r3,r11
800077ec:	ee e8 ff 88 	ld.d	r8,r7[-120]
800077f0:	ee ea ff b0 	ld.d	r10,r7[-80]
800077f4:	f0 16 00 03 	mcall	r6[12]
800077f8:	14 98       	mov	r8,r10
800077fa:	16 99       	mov	r9,r11
800077fc:	04 9a       	mov	r10,r2
800077fe:	06 9b       	mov	r11,r3
80007800:	f0 16 00 05 	mcall	r6[20]
80007804:	14 98       	mov	r8,r10
80007806:	16 99       	mov	r9,r11
80007808:	10 9a       	mov	r10,r8
8000780a:	12 9b       	mov	r11,r9
8000780c:	f0 16 00 09 	mcall	r6[36]
80007810:	18 99       	mov	r9,r12
80007812:	ea c8 ff f4 	sub	r8,r5,-12
80007816:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	
	P11 = (1. - K1) * P2[axis][0][0];
8000781a:	ee e8 ff a0 	ld.d	r8,r7[-96]
8000781e:	30 0a       	mov	r10,0
80007820:	fc 1b 3f f0 	movh	r11,0x3ff0
80007824:	f0 16 00 11 	mcall	r6[68]
80007828:	14 98       	mov	r8,r10
8000782a:	16 99       	mov	r9,r11
8000782c:	10 9a       	mov	r10,r8
8000782e:	12 9b       	mov	r11,r9
80007830:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007834:	ec fc 00 1c 	ld.w	r12,r6[28]
80007838:	12 98       	mov	r8,r9
8000783a:	a3 78       	lsl	r8,0x3
8000783c:	12 08       	add	r8,r9
8000783e:	a3 78       	lsl	r8,0x3
80007840:	f8 08 00 08 	add	r8,r12,r8
80007844:	f0 e8 00 00 	ld.d	r8,r8[0]
80007848:	f0 16 00 03 	mcall	r6[12]
8000784c:	14 98       	mov	r8,r10
8000784e:	16 99       	mov	r9,r11
80007850:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = (1. - K1) * P2[axis][0][1];
80007854:	ee e8 ff a0 	ld.d	r8,r7[-96]
80007858:	30 0a       	mov	r10,0
8000785a:	fc 1b 3f f0 	movh	r11,0x3ff0
8000785e:	f0 16 00 11 	mcall	r6[68]
80007862:	14 98       	mov	r8,r10
80007864:	16 99       	mov	r9,r11
80007866:	10 9a       	mov	r10,r8
80007868:	12 9b       	mov	r11,r9
8000786a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000786e:	ec fc 00 1c 	ld.w	r12,r6[28]
80007872:	12 98       	mov	r8,r9
80007874:	a3 78       	lsl	r8,0x3
80007876:	12 08       	add	r8,r9
80007878:	2f f8       	sub	r8,-1
8000787a:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000787e:	f0 16 00 03 	mcall	r6[12]
80007882:	14 98       	mov	r8,r10
80007884:	16 99       	mov	r9,r11
80007886:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = (1. - K1) * P2[axis][0][2];
8000788a:	ee e8 ff a0 	ld.d	r8,r7[-96]
8000788e:	30 0a       	mov	r10,0
80007890:	fc 1b 3f f0 	movh	r11,0x3ff0
80007894:	f0 16 00 11 	mcall	r6[68]
80007898:	14 98       	mov	r8,r10
8000789a:	16 99       	mov	r9,r11
8000789c:	10 9a       	mov	r10,r8
8000789e:	12 9b       	mov	r11,r9
800078a0:	ee f9 ff 84 	ld.w	r9,r7[-124]
800078a4:	ec fc 00 1c 	ld.w	r12,r6[28]
800078a8:	12 98       	mov	r8,r9
800078aa:	a3 78       	lsl	r8,0x3
800078ac:	12 08       	add	r8,r9
800078ae:	a3 78       	lsl	r8,0x3
800078b0:	f8 08 00 08 	add	r8,r12,r8
800078b4:	2f 08       	sub	r8,-16
800078b6:	f0 e8 00 00 	ld.d	r8,r8[0]
800078ba:	f0 16 00 03 	mcall	r6[12]
800078be:	14 98       	mov	r8,r10
800078c0:	16 99       	mov	r9,r11
800078c2:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = -K2 * P2[axis][0][0] + P2[axis][1][0];
800078c6:	ee f8 ff a8 	ld.w	r8,r7[-88]
800078ca:	10 99       	mov	r9,r8
800078cc:	ee 19 80 00 	eorh	r9,0x8000
800078d0:	ef 49 ff 4c 	st.w	r7[-180],r9
800078d4:	ee f8 ff ac 	ld.w	r8,r7[-84]
800078d8:	ef 48 ff 50 	st.w	r7[-176],r8
800078dc:	ee f9 ff 84 	ld.w	r9,r7[-124]
800078e0:	ec fa 00 1c 	ld.w	r10,r6[28]
800078e4:	12 98       	mov	r8,r9
800078e6:	a3 78       	lsl	r8,0x3
800078e8:	12 08       	add	r8,r9
800078ea:	a3 78       	lsl	r8,0x3
800078ec:	f4 08 00 08 	add	r8,r10,r8
800078f0:	f0 e8 00 00 	ld.d	r8,r8[0]
800078f4:	ee ea ff 4c 	ld.d	r10,r7[-180]
800078f8:	f0 16 00 03 	mcall	r6[12]
800078fc:	14 98       	mov	r8,r10
800078fe:	16 99       	mov	r9,r11
80007900:	10 9a       	mov	r10,r8
80007902:	12 9b       	mov	r11,r9
80007904:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007908:	ec fc 00 1c 	ld.w	r12,r6[28]
8000790c:	12 98       	mov	r8,r9
8000790e:	a3 78       	lsl	r8,0x3
80007910:	12 08       	add	r8,r9
80007912:	a3 78       	lsl	r8,0x3
80007914:	f8 08 00 08 	add	r8,r12,r8
80007918:	2e 88       	sub	r8,-24
8000791a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000791e:	f0 16 00 05 	mcall	r6[20]
80007922:	14 98       	mov	r8,r10
80007924:	16 99       	mov	r9,r11
80007926:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = -K2 * P2[axis][0][1] + P2[axis][1][1];
8000792a:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000792e:	10 99       	mov	r9,r8
80007930:	ee 19 80 00 	eorh	r9,0x8000
80007934:	ef 49 ff 54 	st.w	r7[-172],r9
80007938:	ee f8 ff ac 	ld.w	r8,r7[-84]
8000793c:	ef 48 ff 58 	st.w	r7[-168],r8
80007940:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007944:	ec fa 00 1c 	ld.w	r10,r6[28]
80007948:	12 98       	mov	r8,r9
8000794a:	a3 78       	lsl	r8,0x3
8000794c:	12 08       	add	r8,r9
8000794e:	2f f8       	sub	r8,-1
80007950:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80007954:	ee ea ff 54 	ld.d	r10,r7[-172]
80007958:	f0 16 00 03 	mcall	r6[12]
8000795c:	14 98       	mov	r8,r10
8000795e:	16 99       	mov	r9,r11
80007960:	10 9a       	mov	r10,r8
80007962:	12 9b       	mov	r11,r9
80007964:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007968:	ec fc 00 1c 	ld.w	r12,r6[28]
8000796c:	12 98       	mov	r8,r9
8000796e:	a3 78       	lsl	r8,0x3
80007970:	12 08       	add	r8,r9
80007972:	a3 78       	lsl	r8,0x3
80007974:	f8 08 00 08 	add	r8,r12,r8
80007978:	2e 08       	sub	r8,-32
8000797a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000797e:	f0 16 00 05 	mcall	r6[20]
80007982:	14 98       	mov	r8,r10
80007984:	16 99       	mov	r9,r11
80007986:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = -K2 * P2[axis][0][2] + P2[axis][1][2];
8000798a:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000798e:	10 99       	mov	r9,r8
80007990:	ee 19 80 00 	eorh	r9,0x8000
80007994:	ef 49 ff 5c 	st.w	r7[-164],r9
80007998:	ee f8 ff ac 	ld.w	r8,r7[-84]
8000799c:	ef 48 ff 60 	st.w	r7[-160],r8
800079a0:	ee f9 ff 84 	ld.w	r9,r7[-124]
800079a4:	ec fa 00 1c 	ld.w	r10,r6[28]
800079a8:	12 98       	mov	r8,r9
800079aa:	a3 78       	lsl	r8,0x3
800079ac:	12 08       	add	r8,r9
800079ae:	a3 78       	lsl	r8,0x3
800079b0:	f4 08 00 08 	add	r8,r10,r8
800079b4:	2f 08       	sub	r8,-16
800079b6:	f0 e8 00 00 	ld.d	r8,r8[0]
800079ba:	ee ea ff 5c 	ld.d	r10,r7[-164]
800079be:	f0 16 00 03 	mcall	r6[12]
800079c2:	14 98       	mov	r8,r10
800079c4:	16 99       	mov	r9,r11
800079c6:	10 9a       	mov	r10,r8
800079c8:	12 9b       	mov	r11,r9
800079ca:	ee f9 ff 84 	ld.w	r9,r7[-124]
800079ce:	ec fc 00 1c 	ld.w	r12,r6[28]
800079d2:	12 98       	mov	r8,r9
800079d4:	a3 78       	lsl	r8,0x3
800079d6:	12 08       	add	r8,r9
800079d8:	a3 78       	lsl	r8,0x3
800079da:	f8 08 00 08 	add	r8,r12,r8
800079de:	2d 88       	sub	r8,-40
800079e0:	f0 e8 00 00 	ld.d	r8,r8[0]
800079e4:	f0 16 00 05 	mcall	r6[20]
800079e8:	14 98       	mov	r8,r10
800079ea:	16 99       	mov	r9,r11
800079ec:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P2[axis][0][0] + P2[axis][2][0];
800079f0:	ee f8 ff b0 	ld.w	r8,r7[-80]
800079f4:	10 99       	mov	r9,r8
800079f6:	ee 19 80 00 	eorh	r9,0x8000
800079fa:	ef 49 ff 64 	st.w	r7[-156],r9
800079fe:	ee f8 ff b4 	ld.w	r8,r7[-76]
80007a02:	ef 48 ff 68 	st.w	r7[-152],r8
80007a06:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007a0a:	ec fa 00 1c 	ld.w	r10,r6[28]
80007a0e:	12 98       	mov	r8,r9
80007a10:	a3 78       	lsl	r8,0x3
80007a12:	12 08       	add	r8,r9
80007a14:	a3 78       	lsl	r8,0x3
80007a16:	f4 08 00 08 	add	r8,r10,r8
80007a1a:	f0 e8 00 00 	ld.d	r8,r8[0]
80007a1e:	ee ea ff 64 	ld.d	r10,r7[-156]
80007a22:	f0 16 00 03 	mcall	r6[12]
80007a26:	14 98       	mov	r8,r10
80007a28:	16 99       	mov	r9,r11
80007a2a:	10 9a       	mov	r10,r8
80007a2c:	12 9b       	mov	r11,r9
80007a2e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007a32:	ec fc 00 1c 	ld.w	r12,r6[28]
80007a36:	12 98       	mov	r8,r9
80007a38:	a3 78       	lsl	r8,0x3
80007a3a:	12 08       	add	r8,r9
80007a3c:	a3 78       	lsl	r8,0x3
80007a3e:	f8 08 00 08 	add	r8,r12,r8
80007a42:	2d 08       	sub	r8,-48
80007a44:	f0 e8 00 00 	ld.d	r8,r8[0]
80007a48:	f0 16 00 05 	mcall	r6[20]
80007a4c:	14 98       	mov	r8,r10
80007a4e:	16 99       	mov	r9,r11
80007a50:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P2[axis][0][1] + P2[axis][2][1];
80007a54:	ee f8 ff b0 	ld.w	r8,r7[-80]
80007a58:	10 99       	mov	r9,r8
80007a5a:	ee 19 80 00 	eorh	r9,0x8000
80007a5e:	ef 49 ff 6c 	st.w	r7[-148],r9
80007a62:	ee f8 ff b4 	ld.w	r8,r7[-76]
80007a66:	ef 48 ff 70 	st.w	r7[-144],r8
80007a6a:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007a6e:	ec fa 00 1c 	ld.w	r10,r6[28]
80007a72:	12 98       	mov	r8,r9
80007a74:	a3 78       	lsl	r8,0x3
80007a76:	12 08       	add	r8,r9
80007a78:	2f f8       	sub	r8,-1
80007a7a:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80007a7e:	ee ea ff 6c 	ld.d	r10,r7[-148]
80007a82:	f0 16 00 03 	mcall	r6[12]
80007a86:	14 98       	mov	r8,r10
80007a88:	16 99       	mov	r9,r11
80007a8a:	10 9a       	mov	r10,r8
80007a8c:	12 9b       	mov	r11,r9
80007a8e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007a92:	ec fc 00 1c 	ld.w	r12,r6[28]
80007a96:	12 98       	mov	r8,r9
80007a98:	a3 78       	lsl	r8,0x3
80007a9a:	12 08       	add	r8,r9
80007a9c:	a3 78       	lsl	r8,0x3
80007a9e:	f8 08 00 08 	add	r8,r12,r8
80007aa2:	2c 88       	sub	r8,-56
80007aa4:	f0 e8 00 00 	ld.d	r8,r8[0]
80007aa8:	f0 16 00 05 	mcall	r6[20]
80007aac:	14 98       	mov	r8,r10
80007aae:	16 99       	mov	r9,r11
80007ab0:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P2[axis][0][2] + P2[axis][2][2];
80007ab4:	ee f8 ff b0 	ld.w	r8,r7[-80]
80007ab8:	10 99       	mov	r9,r8
80007aba:	ee 19 80 00 	eorh	r9,0x8000
80007abe:	ef 49 ff 74 	st.w	r7[-140],r9
80007ac2:	ee f8 ff b4 	ld.w	r8,r7[-76]
80007ac6:	ef 48 ff 78 	st.w	r7[-136],r8
80007aca:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007ace:	ec fa 00 1c 	ld.w	r10,r6[28]
80007ad2:	12 98       	mov	r8,r9
80007ad4:	a3 78       	lsl	r8,0x3
80007ad6:	12 08       	add	r8,r9
80007ad8:	a3 78       	lsl	r8,0x3
80007ada:	f4 08 00 08 	add	r8,r10,r8
80007ade:	2f 08       	sub	r8,-16
80007ae0:	f0 e8 00 00 	ld.d	r8,r8[0]
80007ae4:	ee ea ff 74 	ld.d	r10,r7[-140]
80007ae8:	f0 16 00 03 	mcall	r6[12]
80007aec:	14 98       	mov	r8,r10
80007aee:	16 99       	mov	r9,r11
80007af0:	10 9a       	mov	r10,r8
80007af2:	12 9b       	mov	r11,r9
80007af4:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007af8:	ec fc 00 1c 	ld.w	r12,r6[28]
80007afc:	12 98       	mov	r8,r9
80007afe:	a3 78       	lsl	r8,0x3
80007b00:	12 08       	add	r8,r9
80007b02:	a3 78       	lsl	r8,0x3
80007b04:	f8 08 00 08 	add	r8,r12,r8
80007b08:	2c 08       	sub	r8,-64
80007b0a:	f0 e8 00 00 	ld.d	r8,r8[0]
80007b0e:	f0 16 00 05 	mcall	r6[20]
80007b12:	14 98       	mov	r8,r10
80007b14:	16 99       	mov	r9,r11
80007b16:	ee e9 ff f8 	st.d	r7[-8],r8

	P2[axis][0][0] = P11;
80007b1a:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007b1e:	ec fa 00 1c 	ld.w	r10,r6[28]
80007b22:	12 98       	mov	r8,r9
80007b24:	a3 78       	lsl	r8,0x3
80007b26:	12 08       	add	r8,r9
80007b28:	a3 78       	lsl	r8,0x3
80007b2a:	10 0a       	add	r10,r8
80007b2c:	ee e8 ff b8 	ld.d	r8,r7[-72]
80007b30:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][0][1] = P12;
80007b34:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007b38:	ec fa 00 1c 	ld.w	r10,r6[28]
80007b3c:	12 98       	mov	r8,r9
80007b3e:	a3 78       	lsl	r8,0x3
80007b40:	12 08       	add	r8,r9
80007b42:	f0 cb ff ff 	sub	r11,r8,-1
80007b46:	ee e8 ff c0 	ld.d	r8,r7[-64]
80007b4a:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][0][2] = P13;
80007b4e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007b52:	ec fa 00 1c 	ld.w	r10,r6[28]
80007b56:	12 98       	mov	r8,r9
80007b58:	a3 78       	lsl	r8,0x3
80007b5a:	12 08       	add	r8,r9
80007b5c:	a3 78       	lsl	r8,0x3
80007b5e:	f4 08 00 08 	add	r8,r10,r8
80007b62:	f0 ca ff f0 	sub	r10,r8,-16
80007b66:	ee e8 ff c8 	ld.d	r8,r7[-56]
80007b6a:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][0] = P21;
80007b6e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007b72:	ec fa 00 1c 	ld.w	r10,r6[28]
80007b76:	12 98       	mov	r8,r9
80007b78:	a3 78       	lsl	r8,0x3
80007b7a:	12 08       	add	r8,r9
80007b7c:	a3 78       	lsl	r8,0x3
80007b7e:	f4 08 00 08 	add	r8,r10,r8
80007b82:	f0 ca ff e8 	sub	r10,r8,-24
80007b86:	ee e8 ff d0 	ld.d	r8,r7[-48]
80007b8a:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = P22;
80007b8e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007b92:	ec fa 00 1c 	ld.w	r10,r6[28]
80007b96:	12 98       	mov	r8,r9
80007b98:	a3 78       	lsl	r8,0x3
80007b9a:	12 08       	add	r8,r9
80007b9c:	a3 78       	lsl	r8,0x3
80007b9e:	f4 08 00 08 	add	r8,r10,r8
80007ba2:	f0 ca ff e0 	sub	r10,r8,-32
80007ba6:	ee e8 ff d8 	ld.d	r8,r7[-40]
80007baa:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][2] = P23;
80007bae:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007bb2:	ec fa 00 1c 	ld.w	r10,r6[28]
80007bb6:	12 98       	mov	r8,r9
80007bb8:	a3 78       	lsl	r8,0x3
80007bba:	12 08       	add	r8,r9
80007bbc:	a3 78       	lsl	r8,0x3
80007bbe:	f4 08 00 08 	add	r8,r10,r8
80007bc2:	f0 ca ff d8 	sub	r10,r8,-40
80007bc6:	ee e8 ff e0 	ld.d	r8,r7[-32]
80007bca:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][0] = P31;
80007bce:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007bd2:	ec fa 00 1c 	ld.w	r10,r6[28]
80007bd6:	12 98       	mov	r8,r9
80007bd8:	a3 78       	lsl	r8,0x3
80007bda:	12 08       	add	r8,r9
80007bdc:	a3 78       	lsl	r8,0x3
80007bde:	f4 08 00 08 	add	r8,r10,r8
80007be2:	f0 ca ff d0 	sub	r10,r8,-48
80007be6:	ee e8 ff e8 	ld.d	r8,r7[-24]
80007bea:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][1] = P32;
80007bee:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007bf2:	ec fa 00 1c 	ld.w	r10,r6[28]
80007bf6:	12 98       	mov	r8,r9
80007bf8:	a3 78       	lsl	r8,0x3
80007bfa:	12 08       	add	r8,r9
80007bfc:	a3 78       	lsl	r8,0x3
80007bfe:	f4 08 00 08 	add	r8,r10,r8
80007c02:	f0 ca ff c8 	sub	r10,r8,-56
80007c06:	ee e8 ff f0 	ld.d	r8,r7[-16]
80007c0a:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][2] = P33;
80007c0e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007c12:	ec fa 00 1c 	ld.w	r10,r6[28]
80007c16:	12 98       	mov	r8,r9
80007c18:	a3 78       	lsl	r8,0x3
80007c1a:	12 08       	add	r8,r9
80007c1c:	a3 78       	lsl	r8,0x3
80007c1e:	f4 08 00 08 	add	r8,r10,r8
80007c22:	f0 ca ff c0 	sub	r10,r8,-64
80007c26:	ee e8 ff f8 	ld.d	r8,r7[-8]
80007c2a:	f4 e9 00 00 	st.d	r10[0],r8
}
80007c2e:	2c 7d       	sub	sp,-228
80007c30:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
80007c34:	80 00       	ld.sh	r0,r0[0x0]
80007c36:	6e be       	ld.w	lr,r7[0x2c]

80007c38 <e_kalman_update_speed>:

// update covariance
Pp = Pm - K*H*Pm;
*/
void e_kalman_update_speed(int axis, float speed_meas)
{
80007c38:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80007c3c:	1a 97       	mov	r7,sp
80007c3e:	fa cd 00 d8 	sub	sp,sp,216
80007c42:	fe f6 0c 1a 	ld.w	r6,pc[3098]
80007c46:	1e 26       	rsub	r6,pc
80007c48:	ef 4c ff 8c 	st.w	r7[-116],r12
80007c4c:	ef 4b ff 88 	st.w	r7[-120],r11
	
	double yd,S,K1,K2,K3;
	double P11,P12,P13,P21,P22,P23,P31,P32,P33;
	
	yd = speed_meas - centralData->estimation.state[axis][SPEED];
80007c50:	ee fc ff 88 	ld.w	r12,r7[-120]
80007c54:	f0 16 00 02 	mcall	r6[8]
80007c58:	ec f8 00 00 	ld.w	r8,r6[0]
80007c5c:	70 0c       	ld.w	r12,r8[0x0]
80007c5e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80007c62:	12 98       	mov	r8,r9
80007c64:	a1 78       	lsl	r8,0x1
80007c66:	12 08       	add	r8,r9
80007c68:	2f f8       	sub	r8,-1
80007c6a:	a3 78       	lsl	r8,0x3
80007c6c:	f8 08 00 08 	add	r8,r12,r8
80007c70:	f0 e8 07 a4 	ld.d	r8,r8[1956]
80007c74:	f0 16 00 11 	mcall	r6[68]
80007c78:	14 98       	mov	r8,r10
80007c7a:	16 99       	mov	r9,r11
80007c7c:	ee e9 ff 90 	st.d	r7[-112],r8
	
	
	S = P[axis][1][1] + R[axis];
80007c80:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80007c84:	ec fa 00 18 	ld.w	r10,r6[24]
80007c88:	12 98       	mov	r8,r9
80007c8a:	a3 78       	lsl	r8,0x3
80007c8c:	12 08       	add	r8,r9
80007c8e:	a3 78       	lsl	r8,0x3
80007c90:	f4 08 00 08 	add	r8,r10,r8
80007c94:	2e 08       	sub	r8,-32
80007c96:	f0 ea 00 00 	ld.d	r10,r8[0]
80007c9a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80007c9e:	ec f8 01 74 	ld.w	r8,r6[372]
80007ca2:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80007ca6:	f0 16 00 05 	mcall	r6[20]
80007caa:	14 98       	mov	r8,r10
80007cac:	16 99       	mov	r9,r11
80007cae:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P[axis][0][1] * 1/S;
80007cb2:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80007cb6:	ec fa 00 18 	ld.w	r10,r6[24]
80007cba:	12 98       	mov	r8,r9
80007cbc:	a3 78       	lsl	r8,0x3
80007cbe:	12 08       	add	r8,r9
80007cc0:	2f f8       	sub	r8,-1
80007cc2:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
80007cc6:	ee e8 ff 98 	ld.d	r8,r7[-104]
80007cca:	f0 16 00 0c 	mcall	r6[48]
80007cce:	14 98       	mov	r8,r10
80007cd0:	16 99       	mov	r9,r11
80007cd2:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P[axis][1][1] * 1/S;
80007cd6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80007cda:	ec fa 00 18 	ld.w	r10,r6[24]
80007cde:	12 98       	mov	r8,r9
80007ce0:	a3 78       	lsl	r8,0x3
80007ce2:	12 08       	add	r8,r9
80007ce4:	a3 78       	lsl	r8,0x3
80007ce6:	f4 08 00 08 	add	r8,r10,r8
80007cea:	2e 08       	sub	r8,-32
80007cec:	f0 ea 00 00 	ld.d	r10,r8[0]
80007cf0:	ee e8 ff 98 	ld.d	r8,r7[-104]
80007cf4:	f0 16 00 0c 	mcall	r6[48]
80007cf8:	14 98       	mov	r8,r10
80007cfa:	16 99       	mov	r9,r11
80007cfc:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P[axis][2][1] * 1/S;
80007d00:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80007d04:	ec fa 00 18 	ld.w	r10,r6[24]
80007d08:	12 98       	mov	r8,r9
80007d0a:	a3 78       	lsl	r8,0x3
80007d0c:	12 08       	add	r8,r9
80007d0e:	a3 78       	lsl	r8,0x3
80007d10:	f4 08 00 08 	add	r8,r10,r8
80007d14:	2c 88       	sub	r8,-56
80007d16:	f0 ea 00 00 	ld.d	r10,r8[0]
80007d1a:	ee e8 ff 98 	ld.d	r8,r7[-104]
80007d1e:	f0 16 00 0c 	mcall	r6[48]
80007d22:	14 98       	mov	r8,r10
80007d24:	16 99       	mov	r9,r11
80007d26:	ee e9 ff b0 	st.d	r7[-80],r8

	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * yd;
80007d2a:	ec f8 00 00 	ld.w	r8,r6[0]
80007d2e:	70 01       	ld.w	r1,r8[0x0]
80007d30:	ee f5 ff 8c 	ld.w	r5,r7[-116]
80007d34:	ec f8 00 00 	ld.w	r8,r6[0]
80007d38:	70 0a       	ld.w	r10,r8[0x0]
80007d3a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80007d3e:	12 98       	mov	r8,r9
80007d40:	a1 78       	lsl	r8,0x1
80007d42:	12 08       	add	r8,r9
80007d44:	a3 78       	lsl	r8,0x3
80007d46:	f4 08 00 08 	add	r8,r10,r8
80007d4a:	f0 c8 f8 5c 	sub	r8,r8,-1956
80007d4e:	f0 e2 00 00 	ld.d	r2,r8[0]
80007d52:	ee e8 ff 90 	ld.d	r8,r7[-112]
80007d56:	ee ea ff a0 	ld.d	r10,r7[-96]
80007d5a:	f0 16 00 03 	mcall	r6[12]
80007d5e:	14 98       	mov	r8,r10
80007d60:	16 99       	mov	r9,r11
80007d62:	04 9a       	mov	r10,r2
80007d64:	06 9b       	mov	r11,r3
80007d66:	f0 16 00 05 	mcall	r6[20]
80007d6a:	14 98       	mov	r8,r10
80007d6c:	16 99       	mov	r9,r11
80007d6e:	10 9a       	mov	r10,r8
80007d70:	12 9b       	mov	r11,r9
80007d72:	0a 98       	mov	r8,r5
80007d74:	a1 78       	lsl	r8,0x1
80007d76:	0a 08       	add	r8,r5
80007d78:	a3 78       	lsl	r8,0x3
80007d7a:	e2 08 00 08 	add	r8,r1,r8
80007d7e:	f0 c8 f8 5c 	sub	r8,r8,-1956
80007d82:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * yd;
80007d86:	ec f8 00 00 	ld.w	r8,r6[0]
80007d8a:	70 01       	ld.w	r1,r8[0x0]
80007d8c:	ee f5 ff 8c 	ld.w	r5,r7[-116]
80007d90:	ec f8 00 00 	ld.w	r8,r6[0]
80007d94:	70 0a       	ld.w	r10,r8[0x0]
80007d96:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80007d9a:	12 98       	mov	r8,r9
80007d9c:	a1 78       	lsl	r8,0x1
80007d9e:	12 08       	add	r8,r9
80007da0:	2f f8       	sub	r8,-1
80007da2:	a3 78       	lsl	r8,0x3
80007da4:	f4 08 00 08 	add	r8,r10,r8
80007da8:	f0 e2 07 a4 	ld.d	r2,r8[1956]
80007dac:	ee e8 ff 90 	ld.d	r8,r7[-112]
80007db0:	ee ea ff a8 	ld.d	r10,r7[-88]
80007db4:	f0 16 00 03 	mcall	r6[12]
80007db8:	14 98       	mov	r8,r10
80007dba:	16 99       	mov	r9,r11
80007dbc:	04 9a       	mov	r10,r2
80007dbe:	06 9b       	mov	r11,r3
80007dc0:	f0 16 00 05 	mcall	r6[20]
80007dc4:	14 98       	mov	r8,r10
80007dc6:	16 99       	mov	r9,r11
80007dc8:	10 9a       	mov	r10,r8
80007dca:	12 9b       	mov	r11,r9
80007dcc:	0a 98       	mov	r8,r5
80007dce:	a1 78       	lsl	r8,0x1
80007dd0:	0a 08       	add	r8,r5
80007dd2:	2f f8       	sub	r8,-1
80007dd4:	a3 78       	lsl	r8,0x3
80007dd6:	e2 08 00 08 	add	r8,r1,r8
80007dda:	f0 eb 07 a4 	st.d	r8[1956],r10
	centralData->estimation.state[axis][BIAIS] = centralData->estimation.state[axis][BIAIS] + K3 * yd;
80007dde:	ec f8 00 00 	ld.w	r8,r6[0]
80007de2:	70 01       	ld.w	r1,r8[0x0]
80007de4:	ee f5 ff 8c 	ld.w	r5,r7[-116]
80007de8:	ec f8 00 00 	ld.w	r8,r6[0]
80007dec:	70 0a       	ld.w	r10,r8[0x0]
80007dee:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80007df2:	12 98       	mov	r8,r9
80007df4:	a1 78       	lsl	r8,0x1
80007df6:	12 08       	add	r8,r9
80007df8:	a3 78       	lsl	r8,0x3
80007dfa:	f4 08 00 08 	add	r8,r10,r8
80007dfe:	f0 c8 f8 4c 	sub	r8,r8,-1972
80007e02:	f0 e2 00 00 	ld.d	r2,r8[0]
80007e06:	ee e8 ff 90 	ld.d	r8,r7[-112]
80007e0a:	ee ea ff b0 	ld.d	r10,r7[-80]
80007e0e:	f0 16 00 03 	mcall	r6[12]
80007e12:	14 98       	mov	r8,r10
80007e14:	16 99       	mov	r9,r11
80007e16:	04 9a       	mov	r10,r2
80007e18:	06 9b       	mov	r11,r3
80007e1a:	f0 16 00 05 	mcall	r6[20]
80007e1e:	14 98       	mov	r8,r10
80007e20:	16 99       	mov	r9,r11
80007e22:	10 9a       	mov	r10,r8
80007e24:	12 9b       	mov	r11,r9
80007e26:	0a 98       	mov	r8,r5
80007e28:	a1 78       	lsl	r8,0x1
80007e2a:	0a 08       	add	r8,r5
80007e2c:	a3 78       	lsl	r8,0x3
80007e2e:	e2 08 00 08 	add	r8,r1,r8
80007e32:	f0 c8 f8 4c 	sub	r8,r8,-1972
80007e36:	f0 eb 00 00 	st.d	r8[0],r10

	P11 = -K1 * P[axis][1][0] + P[axis][0][0];
80007e3a:	ee f8 ff a0 	ld.w	r8,r7[-96]
80007e3e:	10 99       	mov	r9,r8
80007e40:	ee 19 80 00 	eorh	r9,0x8000
80007e44:	ef 49 ff 28 	st.w	r7[-216],r9
80007e48:	ee f8 ff a4 	ld.w	r8,r7[-92]
80007e4c:	ef 48 ff 2c 	st.w	r7[-212],r8
80007e50:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80007e54:	ec fa 00 18 	ld.w	r10,r6[24]
80007e58:	12 98       	mov	r8,r9
80007e5a:	a3 78       	lsl	r8,0x3
80007e5c:	12 08       	add	r8,r9
80007e5e:	a3 78       	lsl	r8,0x3
80007e60:	f4 08 00 08 	add	r8,r10,r8
80007e64:	2e 88       	sub	r8,-24
80007e66:	f0 e8 00 00 	ld.d	r8,r8[0]
80007e6a:	ee ea ff 28 	ld.d	r10,r7[-216]
80007e6e:	f0 16 00 03 	mcall	r6[12]
80007e72:	14 98       	mov	r8,r10
80007e74:	16 99       	mov	r9,r11
80007e76:	10 9a       	mov	r10,r8
80007e78:	12 9b       	mov	r11,r9
80007e7a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80007e7e:	ec fc 00 18 	ld.w	r12,r6[24]
80007e82:	12 98       	mov	r8,r9
80007e84:	a3 78       	lsl	r8,0x3
80007e86:	12 08       	add	r8,r9
80007e88:	a3 78       	lsl	r8,0x3
80007e8a:	f8 08 00 08 	add	r8,r12,r8
80007e8e:	f0 e8 00 00 	ld.d	r8,r8[0]
80007e92:	f0 16 00 05 	mcall	r6[20]
80007e96:	14 98       	mov	r8,r10
80007e98:	16 99       	mov	r9,r11
80007e9a:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = -K1 * P[axis][1][1] + P[axis][0][1];
80007e9e:	ee f8 ff a0 	ld.w	r8,r7[-96]
80007ea2:	10 99       	mov	r9,r8
80007ea4:	ee 19 80 00 	eorh	r9,0x8000
80007ea8:	ef 49 ff 30 	st.w	r7[-208],r9
80007eac:	ee f8 ff a4 	ld.w	r8,r7[-92]
80007eb0:	ef 48 ff 34 	st.w	r7[-204],r8
80007eb4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80007eb8:	ec fa 00 18 	ld.w	r10,r6[24]
80007ebc:	12 98       	mov	r8,r9
80007ebe:	a3 78       	lsl	r8,0x3
80007ec0:	12 08       	add	r8,r9
80007ec2:	a3 78       	lsl	r8,0x3
80007ec4:	f4 08 00 08 	add	r8,r10,r8
80007ec8:	2e 08       	sub	r8,-32
80007eca:	f0 e8 00 00 	ld.d	r8,r8[0]
80007ece:	ee ea ff 30 	ld.d	r10,r7[-208]
80007ed2:	f0 16 00 03 	mcall	r6[12]
80007ed6:	14 98       	mov	r8,r10
80007ed8:	16 99       	mov	r9,r11
80007eda:	10 9a       	mov	r10,r8
80007edc:	12 9b       	mov	r11,r9
80007ede:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80007ee2:	ec fc 00 18 	ld.w	r12,r6[24]
80007ee6:	12 98       	mov	r8,r9
80007ee8:	a3 78       	lsl	r8,0x3
80007eea:	12 08       	add	r8,r9
80007eec:	2f f8       	sub	r8,-1
80007eee:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80007ef2:	f0 16 00 05 	mcall	r6[20]
80007ef6:	14 98       	mov	r8,r10
80007ef8:	16 99       	mov	r9,r11
80007efa:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = -K1 * P[axis][1][2] + P[axis][0][2];
80007efe:	ee f8 ff a0 	ld.w	r8,r7[-96]
80007f02:	10 99       	mov	r9,r8
80007f04:	ee 19 80 00 	eorh	r9,0x8000
80007f08:	ef 49 ff 38 	st.w	r7[-200],r9
80007f0c:	ee f8 ff a4 	ld.w	r8,r7[-92]
80007f10:	ef 48 ff 3c 	st.w	r7[-196],r8
80007f14:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80007f18:	ec fa 00 18 	ld.w	r10,r6[24]
80007f1c:	12 98       	mov	r8,r9
80007f1e:	a3 78       	lsl	r8,0x3
80007f20:	12 08       	add	r8,r9
80007f22:	a3 78       	lsl	r8,0x3
80007f24:	f4 08 00 08 	add	r8,r10,r8
80007f28:	2d 88       	sub	r8,-40
80007f2a:	f0 e8 00 00 	ld.d	r8,r8[0]
80007f2e:	ee ea ff 38 	ld.d	r10,r7[-200]
80007f32:	f0 16 00 03 	mcall	r6[12]
80007f36:	14 98       	mov	r8,r10
80007f38:	16 99       	mov	r9,r11
80007f3a:	10 9a       	mov	r10,r8
80007f3c:	12 9b       	mov	r11,r9
80007f3e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80007f42:	ec fc 00 18 	ld.w	r12,r6[24]
80007f46:	12 98       	mov	r8,r9
80007f48:	a3 78       	lsl	r8,0x3
80007f4a:	12 08       	add	r8,r9
80007f4c:	a3 78       	lsl	r8,0x3
80007f4e:	f8 08 00 08 	add	r8,r12,r8
80007f52:	2f 08       	sub	r8,-16
80007f54:	f0 e8 00 00 	ld.d	r8,r8[0]
80007f58:	f0 16 00 05 	mcall	r6[20]
80007f5c:	14 98       	mov	r8,r10
80007f5e:	16 99       	mov	r9,r11
80007f60:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = (1. - K2) * P[axis][1][0];
80007f64:	ee e8 ff a8 	ld.d	r8,r7[-88]
80007f68:	30 0a       	mov	r10,0
80007f6a:	fc 1b 3f f0 	movh	r11,0x3ff0
80007f6e:	f0 16 00 11 	mcall	r6[68]
80007f72:	14 98       	mov	r8,r10
80007f74:	16 99       	mov	r9,r11
80007f76:	10 9a       	mov	r10,r8
80007f78:	12 9b       	mov	r11,r9
80007f7a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80007f7e:	ec fc 00 18 	ld.w	r12,r6[24]
80007f82:	12 98       	mov	r8,r9
80007f84:	a3 78       	lsl	r8,0x3
80007f86:	12 08       	add	r8,r9
80007f88:	a3 78       	lsl	r8,0x3
80007f8a:	f8 08 00 08 	add	r8,r12,r8
80007f8e:	2e 88       	sub	r8,-24
80007f90:	f0 e8 00 00 	ld.d	r8,r8[0]
80007f94:	f0 16 00 03 	mcall	r6[12]
80007f98:	14 98       	mov	r8,r10
80007f9a:	16 99       	mov	r9,r11
80007f9c:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = (1. - K2) * P[axis][1][1];
80007fa0:	ee e8 ff a8 	ld.d	r8,r7[-88]
80007fa4:	30 0a       	mov	r10,0
80007fa6:	fc 1b 3f f0 	movh	r11,0x3ff0
80007faa:	f0 16 00 11 	mcall	r6[68]
80007fae:	14 98       	mov	r8,r10
80007fb0:	16 99       	mov	r9,r11
80007fb2:	10 9a       	mov	r10,r8
80007fb4:	12 9b       	mov	r11,r9
80007fb6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80007fba:	ec fc 00 18 	ld.w	r12,r6[24]
80007fbe:	12 98       	mov	r8,r9
80007fc0:	a3 78       	lsl	r8,0x3
80007fc2:	12 08       	add	r8,r9
80007fc4:	a3 78       	lsl	r8,0x3
80007fc6:	f8 08 00 08 	add	r8,r12,r8
80007fca:	2e 08       	sub	r8,-32
80007fcc:	f0 e8 00 00 	ld.d	r8,r8[0]
80007fd0:	f0 16 00 03 	mcall	r6[12]
80007fd4:	14 98       	mov	r8,r10
80007fd6:	16 99       	mov	r9,r11
80007fd8:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = (1. - K2) * P[axis][1][2];
80007fdc:	ee e8 ff a8 	ld.d	r8,r7[-88]
80007fe0:	30 0a       	mov	r10,0
80007fe2:	fc 1b 3f f0 	movh	r11,0x3ff0
80007fe6:	f0 16 00 11 	mcall	r6[68]
80007fea:	14 98       	mov	r8,r10
80007fec:	16 99       	mov	r9,r11
80007fee:	10 9a       	mov	r10,r8
80007ff0:	12 9b       	mov	r11,r9
80007ff2:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80007ff6:	ec fc 00 18 	ld.w	r12,r6[24]
80007ffa:	12 98       	mov	r8,r9
80007ffc:	a3 78       	lsl	r8,0x3
80007ffe:	12 08       	add	r8,r9
80008000:	a3 78       	lsl	r8,0x3
80008002:	f8 08 00 08 	add	r8,r12,r8
80008006:	2d 88       	sub	r8,-40
80008008:	f0 e8 00 00 	ld.d	r8,r8[0]
8000800c:	f0 16 00 03 	mcall	r6[12]
80008010:	14 98       	mov	r8,r10
80008012:	16 99       	mov	r9,r11
80008014:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P[axis][1][0] + P[axis][2][0];
80008018:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000801c:	10 99       	mov	r9,r8
8000801e:	ee 19 80 00 	eorh	r9,0x8000
80008022:	ef 49 ff 40 	st.w	r7[-192],r9
80008026:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000802a:	ef 48 ff 44 	st.w	r7[-188],r8
8000802e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008032:	ec fa 00 18 	ld.w	r10,r6[24]
80008036:	12 98       	mov	r8,r9
80008038:	a3 78       	lsl	r8,0x3
8000803a:	12 08       	add	r8,r9
8000803c:	a3 78       	lsl	r8,0x3
8000803e:	f4 08 00 08 	add	r8,r10,r8
80008042:	2e 88       	sub	r8,-24
80008044:	f0 e8 00 00 	ld.d	r8,r8[0]
80008048:	ee ea ff 40 	ld.d	r10,r7[-192]
8000804c:	f0 16 00 03 	mcall	r6[12]
80008050:	14 98       	mov	r8,r10
80008052:	16 99       	mov	r9,r11
80008054:	10 9a       	mov	r10,r8
80008056:	12 9b       	mov	r11,r9
80008058:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000805c:	ec fc 00 18 	ld.w	r12,r6[24]
80008060:	12 98       	mov	r8,r9
80008062:	a3 78       	lsl	r8,0x3
80008064:	12 08       	add	r8,r9
80008066:	a3 78       	lsl	r8,0x3
80008068:	f8 08 00 08 	add	r8,r12,r8
8000806c:	2d 08       	sub	r8,-48
8000806e:	f0 e8 00 00 	ld.d	r8,r8[0]
80008072:	f0 16 00 05 	mcall	r6[20]
80008076:	14 98       	mov	r8,r10
80008078:	16 99       	mov	r9,r11
8000807a:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P[axis][1][1] + P[axis][2][1];
8000807e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008082:	10 99       	mov	r9,r8
80008084:	ee 19 80 00 	eorh	r9,0x8000
80008088:	ef 49 ff 48 	st.w	r7[-184],r9
8000808c:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008090:	ef 48 ff 4c 	st.w	r7[-180],r8
80008094:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008098:	ec fa 00 18 	ld.w	r10,r6[24]
8000809c:	12 98       	mov	r8,r9
8000809e:	a3 78       	lsl	r8,0x3
800080a0:	12 08       	add	r8,r9
800080a2:	a3 78       	lsl	r8,0x3
800080a4:	f4 08 00 08 	add	r8,r10,r8
800080a8:	2e 08       	sub	r8,-32
800080aa:	f0 e8 00 00 	ld.d	r8,r8[0]
800080ae:	ee ea ff 48 	ld.d	r10,r7[-184]
800080b2:	f0 16 00 03 	mcall	r6[12]
800080b6:	14 98       	mov	r8,r10
800080b8:	16 99       	mov	r9,r11
800080ba:	10 9a       	mov	r10,r8
800080bc:	12 9b       	mov	r11,r9
800080be:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800080c2:	ec fc 00 18 	ld.w	r12,r6[24]
800080c6:	12 98       	mov	r8,r9
800080c8:	a3 78       	lsl	r8,0x3
800080ca:	12 08       	add	r8,r9
800080cc:	a3 78       	lsl	r8,0x3
800080ce:	f8 08 00 08 	add	r8,r12,r8
800080d2:	2c 88       	sub	r8,-56
800080d4:	f0 e8 00 00 	ld.d	r8,r8[0]
800080d8:	f0 16 00 05 	mcall	r6[20]
800080dc:	14 98       	mov	r8,r10
800080de:	16 99       	mov	r9,r11
800080e0:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P[axis][1][2] + P[axis][2][2];
800080e4:	ee f8 ff b0 	ld.w	r8,r7[-80]
800080e8:	10 99       	mov	r9,r8
800080ea:	ee 19 80 00 	eorh	r9,0x8000
800080ee:	ef 49 ff 50 	st.w	r7[-176],r9
800080f2:	ee f8 ff b4 	ld.w	r8,r7[-76]
800080f6:	ef 48 ff 54 	st.w	r7[-172],r8
800080fa:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800080fe:	ec fa 00 18 	ld.w	r10,r6[24]
80008102:	12 98       	mov	r8,r9
80008104:	a3 78       	lsl	r8,0x3
80008106:	12 08       	add	r8,r9
80008108:	a3 78       	lsl	r8,0x3
8000810a:	f4 08 00 08 	add	r8,r10,r8
8000810e:	2d 88       	sub	r8,-40
80008110:	f0 e8 00 00 	ld.d	r8,r8[0]
80008114:	ee ea ff 50 	ld.d	r10,r7[-176]
80008118:	f0 16 00 03 	mcall	r6[12]
8000811c:	14 98       	mov	r8,r10
8000811e:	16 99       	mov	r9,r11
80008120:	10 9a       	mov	r10,r8
80008122:	12 9b       	mov	r11,r9
80008124:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008128:	ec fc 00 18 	ld.w	r12,r6[24]
8000812c:	12 98       	mov	r8,r9
8000812e:	a3 78       	lsl	r8,0x3
80008130:	12 08       	add	r8,r9
80008132:	a3 78       	lsl	r8,0x3
80008134:	f8 08 00 08 	add	r8,r12,r8
80008138:	2c 08       	sub	r8,-64
8000813a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000813e:	f0 16 00 05 	mcall	r6[20]
80008142:	14 98       	mov	r8,r10
80008144:	16 99       	mov	r9,r11
80008146:	ee e9 ff f8 	st.d	r7[-8],r8

	P[axis][0][0] = P11;
8000814a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000814e:	ec fa 00 18 	ld.w	r10,r6[24]
80008152:	12 98       	mov	r8,r9
80008154:	a3 78       	lsl	r8,0x3
80008156:	12 08       	add	r8,r9
80008158:	a3 78       	lsl	r8,0x3
8000815a:	10 0a       	add	r10,r8
8000815c:	ee e8 ff b8 	ld.d	r8,r7[-72]
80008160:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][0][1] = P12;
80008164:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008168:	ec fb 00 18 	ld.w	r11,r6[24]
8000816c:	12 98       	mov	r8,r9
8000816e:	a3 78       	lsl	r8,0x3
80008170:	12 08       	add	r8,r9
80008172:	f0 ca ff ff 	sub	r10,r8,-1
80008176:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000817a:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
	P[axis][0][2] = P13;
8000817e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008182:	ec fa 00 18 	ld.w	r10,r6[24]
80008186:	12 98       	mov	r8,r9
80008188:	a3 78       	lsl	r8,0x3
8000818a:	12 08       	add	r8,r9
8000818c:	a3 78       	lsl	r8,0x3
8000818e:	f4 08 00 08 	add	r8,r10,r8
80008192:	f0 ca ff f0 	sub	r10,r8,-16
80008196:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000819a:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][0] = P21;
8000819e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800081a2:	ec fa 00 18 	ld.w	r10,r6[24]
800081a6:	12 98       	mov	r8,r9
800081a8:	a3 78       	lsl	r8,0x3
800081aa:	12 08       	add	r8,r9
800081ac:	a3 78       	lsl	r8,0x3
800081ae:	f4 08 00 08 	add	r8,r10,r8
800081b2:	f0 ca ff e8 	sub	r10,r8,-24
800081b6:	ee e8 ff d0 	ld.d	r8,r7[-48]
800081ba:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = P22;
800081be:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800081c2:	ec fa 00 18 	ld.w	r10,r6[24]
800081c6:	12 98       	mov	r8,r9
800081c8:	a3 78       	lsl	r8,0x3
800081ca:	12 08       	add	r8,r9
800081cc:	a3 78       	lsl	r8,0x3
800081ce:	f4 08 00 08 	add	r8,r10,r8
800081d2:	f0 ca ff e0 	sub	r10,r8,-32
800081d6:	ee e8 ff d8 	ld.d	r8,r7[-40]
800081da:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][2] = P23;
800081de:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800081e2:	ec fa 00 18 	ld.w	r10,r6[24]
800081e6:	12 98       	mov	r8,r9
800081e8:	a3 78       	lsl	r8,0x3
800081ea:	12 08       	add	r8,r9
800081ec:	a3 78       	lsl	r8,0x3
800081ee:	f4 08 00 08 	add	r8,r10,r8
800081f2:	f0 ca ff d8 	sub	r10,r8,-40
800081f6:	ee e8 ff e0 	ld.d	r8,r7[-32]
800081fa:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][0] = P31;
800081fe:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008202:	ec fa 00 18 	ld.w	r10,r6[24]
80008206:	12 98       	mov	r8,r9
80008208:	a3 78       	lsl	r8,0x3
8000820a:	12 08       	add	r8,r9
8000820c:	a3 78       	lsl	r8,0x3
8000820e:	f4 08 00 08 	add	r8,r10,r8
80008212:	f0 ca ff d0 	sub	r10,r8,-48
80008216:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000821a:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][1] = P32;
8000821e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008222:	ec fa 00 18 	ld.w	r10,r6[24]
80008226:	12 98       	mov	r8,r9
80008228:	a3 78       	lsl	r8,0x3
8000822a:	12 08       	add	r8,r9
8000822c:	a3 78       	lsl	r8,0x3
8000822e:	f4 08 00 08 	add	r8,r10,r8
80008232:	f0 ca ff c8 	sub	r10,r8,-56
80008236:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000823a:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][2] = P33;
8000823e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008242:	ec fa 00 18 	ld.w	r10,r6[24]
80008246:	12 98       	mov	r8,r9
80008248:	a3 78       	lsl	r8,0x3
8000824a:	12 08       	add	r8,r9
8000824c:	a3 78       	lsl	r8,0x3
8000824e:	f4 08 00 08 	add	r8,r10,r8
80008252:	f0 ca ff c0 	sub	r10,r8,-64
80008256:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000825a:	f4 e9 00 00 	st.d	r10[0],r8
	
	/*************************************************************************************/
	yd = speed_meas - centralData->position_estimator.vel[axis];
8000825e:	ec f8 00 00 	ld.w	r8,r6[0]
80008262:	70 09       	ld.w	r9,r8[0x0]
80008264:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80008268:	f0 c8 fd 91 	sub	r8,r8,-623
8000826c:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
80008270:	ee f8 ff 88 	ld.w	r8,r7[-120]
80008274:	e5 a1 08 89 	cop	cp0,cr8,cr8,cr9,0x42
80008278:	10 9c       	mov	r12,r8
8000827a:	f0 16 00 02 	mcall	r6[8]
8000827e:	14 98       	mov	r8,r10
80008280:	16 99       	mov	r9,r11
80008282:	ee e9 ff 90 	st.d	r7[-112],r8
	
	S = P2[axis][1][1] + R2[axis];
80008286:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000828a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000828e:	12 98       	mov	r8,r9
80008290:	a3 78       	lsl	r8,0x3
80008292:	12 08       	add	r8,r9
80008294:	a3 78       	lsl	r8,0x3
80008296:	f4 08 00 08 	add	r8,r10,r8
8000829a:	2e 08       	sub	r8,-32
8000829c:	f0 ea 00 00 	ld.d	r10,r8[0]
800082a0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800082a4:	ec f8 01 70 	ld.w	r8,r6[368]
800082a8:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
800082ac:	f0 16 00 05 	mcall	r6[20]
800082b0:	14 98       	mov	r8,r10
800082b2:	16 99       	mov	r9,r11
800082b4:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P2[axis][0][1] * 1/S;
800082b8:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800082bc:	ec fa 00 1c 	ld.w	r10,r6[28]
800082c0:	12 98       	mov	r8,r9
800082c2:	a3 78       	lsl	r8,0x3
800082c4:	12 08       	add	r8,r9
800082c6:	2f f8       	sub	r8,-1
800082c8:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
800082cc:	ee e8 ff 98 	ld.d	r8,r7[-104]
800082d0:	f0 16 00 0c 	mcall	r6[48]
800082d4:	14 98       	mov	r8,r10
800082d6:	16 99       	mov	r9,r11
800082d8:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P2[axis][1][1] * 1/S;
800082dc:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800082e0:	ec fa 00 1c 	ld.w	r10,r6[28]
800082e4:	12 98       	mov	r8,r9
800082e6:	a3 78       	lsl	r8,0x3
800082e8:	12 08       	add	r8,r9
800082ea:	a3 78       	lsl	r8,0x3
800082ec:	f4 08 00 08 	add	r8,r10,r8
800082f0:	2e 08       	sub	r8,-32
800082f2:	f0 ea 00 00 	ld.d	r10,r8[0]
800082f6:	ee e8 ff 98 	ld.d	r8,r7[-104]
800082fa:	f0 16 00 0c 	mcall	r6[48]
800082fe:	14 98       	mov	r8,r10
80008300:	16 99       	mov	r9,r11
80008302:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P2[axis][2][1] * 1/S;
80008306:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000830a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000830e:	12 98       	mov	r8,r9
80008310:	a3 78       	lsl	r8,0x3
80008312:	12 08       	add	r8,r9
80008314:	a3 78       	lsl	r8,0x3
80008316:	f4 08 00 08 	add	r8,r10,r8
8000831a:	2c 88       	sub	r8,-56
8000831c:	f0 ea 00 00 	ld.d	r10,r8[0]
80008320:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008324:	f0 16 00 0c 	mcall	r6[48]
80008328:	14 98       	mov	r8,r10
8000832a:	16 99       	mov	r9,r11
8000832c:	ee e9 ff b0 	st.d	r7[-80],r8
	
	centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * yd;
80008330:	ec f8 00 00 	ld.w	r8,r6[0]
80008334:	70 01       	ld.w	r1,r8[0x0]
80008336:	ee f5 ff 8c 	ld.w	r5,r7[-116]
8000833a:	ec f8 00 00 	ld.w	r8,r6[0]
8000833e:	70 09       	ld.w	r9,r8[0x0]
80008340:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80008344:	f0 c8 fd 87 	sub	r8,r8,-633
80008348:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
8000834c:	10 9c       	mov	r12,r8
8000834e:	f0 16 00 02 	mcall	r6[8]
80008352:	14 92       	mov	r2,r10
80008354:	16 93       	mov	r3,r11
80008356:	ee e8 ff 90 	ld.d	r8,r7[-112]
8000835a:	ee ea ff a0 	ld.d	r10,r7[-96]
8000835e:	f0 16 00 03 	mcall	r6[12]
80008362:	14 98       	mov	r8,r10
80008364:	16 99       	mov	r9,r11
80008366:	04 9a       	mov	r10,r2
80008368:	06 9b       	mov	r11,r3
8000836a:	f0 16 00 05 	mcall	r6[20]
8000836e:	14 98       	mov	r8,r10
80008370:	16 99       	mov	r9,r11
80008372:	10 9a       	mov	r10,r8
80008374:	12 9b       	mov	r11,r9
80008376:	f0 16 00 09 	mcall	r6[36]
8000837a:	18 99       	mov	r9,r12
8000837c:	ea c8 fd 87 	sub	r8,r5,-633
80008380:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * yd;
80008384:	ec f8 00 00 	ld.w	r8,r6[0]
80008388:	70 01       	ld.w	r1,r8[0x0]
8000838a:	ee f5 ff 8c 	ld.w	r5,r7[-116]
8000838e:	ec f8 00 00 	ld.w	r8,r6[0]
80008392:	70 09       	ld.w	r9,r8[0x0]
80008394:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80008398:	f0 c8 fd 91 	sub	r8,r8,-623
8000839c:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
800083a0:	10 9c       	mov	r12,r8
800083a2:	f0 16 00 02 	mcall	r6[8]
800083a6:	14 92       	mov	r2,r10
800083a8:	16 93       	mov	r3,r11
800083aa:	ee e8 ff 90 	ld.d	r8,r7[-112]
800083ae:	ee ea ff a8 	ld.d	r10,r7[-88]
800083b2:	f0 16 00 03 	mcall	r6[12]
800083b6:	14 98       	mov	r8,r10
800083b8:	16 99       	mov	r9,r11
800083ba:	04 9a       	mov	r10,r2
800083bc:	06 9b       	mov	r11,r3
800083be:	f0 16 00 05 	mcall	r6[20]
800083c2:	14 98       	mov	r8,r10
800083c4:	16 99       	mov	r9,r11
800083c6:	10 9a       	mov	r10,r8
800083c8:	12 9b       	mov	r11,r9
800083ca:	f0 16 00 09 	mcall	r6[36]
800083ce:	18 99       	mov	r9,r12
800083d0:	ea c8 fd 91 	sub	r8,r5,-623
800083d4:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->imu1.attitude.be[axis+ACC_OFFSET] = centralData->imu1.attitude.be[axis+ACC_OFFSET] + K3 * yd;
800083d8:	ec f8 00 00 	ld.w	r8,r6[0]
800083dc:	70 01       	ld.w	r1,r8[0x0]
800083de:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800083e2:	f0 c5 ff fd 	sub	r5,r8,-3
800083e6:	ec f8 00 00 	ld.w	r8,r6[0]
800083ea:	70 09       	ld.w	r9,r8[0x0]
800083ec:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800083f0:	2f d8       	sub	r8,-3
800083f2:	2f 48       	sub	r8,-12
800083f4:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
800083f8:	10 9c       	mov	r12,r8
800083fa:	f0 16 00 02 	mcall	r6[8]
800083fe:	14 92       	mov	r2,r10
80008400:	16 93       	mov	r3,r11
80008402:	ee e8 ff 90 	ld.d	r8,r7[-112]
80008406:	ee ea ff b0 	ld.d	r10,r7[-80]
8000840a:	f0 16 00 03 	mcall	r6[12]
8000840e:	14 98       	mov	r8,r10
80008410:	16 99       	mov	r9,r11
80008412:	04 9a       	mov	r10,r2
80008414:	06 9b       	mov	r11,r3
80008416:	f0 16 00 05 	mcall	r6[20]
8000841a:	14 98       	mov	r8,r10
8000841c:	16 99       	mov	r9,r11
8000841e:	10 9a       	mov	r10,r8
80008420:	12 9b       	mov	r11,r9
80008422:	f0 16 00 09 	mcall	r6[36]
80008426:	18 99       	mov	r9,r12
80008428:	ea c8 ff f4 	sub	r8,r5,-12
8000842c:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	
	P11 = -K1 * P2[axis][1][0] + P2[axis][0][0];
80008430:	ee f8 ff a0 	ld.w	r8,r7[-96]
80008434:	10 99       	mov	r9,r8
80008436:	ee 19 80 00 	eorh	r9,0x8000
8000843a:	ef 49 ff 58 	st.w	r7[-168],r9
8000843e:	ee f8 ff a4 	ld.w	r8,r7[-92]
80008442:	ef 48 ff 5c 	st.w	r7[-164],r8
80008446:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000844a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000844e:	12 98       	mov	r8,r9
80008450:	a3 78       	lsl	r8,0x3
80008452:	12 08       	add	r8,r9
80008454:	a3 78       	lsl	r8,0x3
80008456:	f4 08 00 08 	add	r8,r10,r8
8000845a:	2e 88       	sub	r8,-24
8000845c:	f0 e8 00 00 	ld.d	r8,r8[0]
80008460:	ee ea ff 58 	ld.d	r10,r7[-168]
80008464:	f0 16 00 03 	mcall	r6[12]
80008468:	14 98       	mov	r8,r10
8000846a:	16 99       	mov	r9,r11
8000846c:	10 9a       	mov	r10,r8
8000846e:	12 9b       	mov	r11,r9
80008470:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008474:	ec fc 00 1c 	ld.w	r12,r6[28]
80008478:	12 98       	mov	r8,r9
8000847a:	a3 78       	lsl	r8,0x3
8000847c:	12 08       	add	r8,r9
8000847e:	a3 78       	lsl	r8,0x3
80008480:	f8 08 00 08 	add	r8,r12,r8
80008484:	f0 e8 00 00 	ld.d	r8,r8[0]
80008488:	f0 16 00 05 	mcall	r6[20]
8000848c:	14 98       	mov	r8,r10
8000848e:	16 99       	mov	r9,r11
80008490:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = -K1 * P2[axis][1][1] + P2[axis][0][1];
80008494:	ee f8 ff a0 	ld.w	r8,r7[-96]
80008498:	10 99       	mov	r9,r8
8000849a:	ee 19 80 00 	eorh	r9,0x8000
8000849e:	ef 49 ff 60 	st.w	r7[-160],r9
800084a2:	ee f8 ff a4 	ld.w	r8,r7[-92]
800084a6:	ef 48 ff 64 	st.w	r7[-156],r8
800084aa:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800084ae:	ec fa 00 1c 	ld.w	r10,r6[28]
800084b2:	12 98       	mov	r8,r9
800084b4:	a3 78       	lsl	r8,0x3
800084b6:	12 08       	add	r8,r9
800084b8:	a3 78       	lsl	r8,0x3
800084ba:	f4 08 00 08 	add	r8,r10,r8
800084be:	2e 08       	sub	r8,-32
800084c0:	f0 e8 00 00 	ld.d	r8,r8[0]
800084c4:	ee ea ff 60 	ld.d	r10,r7[-160]
800084c8:	f0 16 00 03 	mcall	r6[12]
800084cc:	14 98       	mov	r8,r10
800084ce:	16 99       	mov	r9,r11
800084d0:	10 9a       	mov	r10,r8
800084d2:	12 9b       	mov	r11,r9
800084d4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800084d8:	ec fc 00 1c 	ld.w	r12,r6[28]
800084dc:	12 98       	mov	r8,r9
800084de:	a3 78       	lsl	r8,0x3
800084e0:	12 08       	add	r8,r9
800084e2:	2f f8       	sub	r8,-1
800084e4:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
800084e8:	f0 16 00 05 	mcall	r6[20]
800084ec:	14 98       	mov	r8,r10
800084ee:	16 99       	mov	r9,r11
800084f0:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = -K1 * P2[axis][1][2] + P2[axis][0][2];
800084f4:	ee f8 ff a0 	ld.w	r8,r7[-96]
800084f8:	10 99       	mov	r9,r8
800084fa:	ee 19 80 00 	eorh	r9,0x8000
800084fe:	ef 49 ff 68 	st.w	r7[-152],r9
80008502:	ee f8 ff a4 	ld.w	r8,r7[-92]
80008506:	ef 48 ff 6c 	st.w	r7[-148],r8
8000850a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000850e:	ec fa 00 1c 	ld.w	r10,r6[28]
80008512:	12 98       	mov	r8,r9
80008514:	a3 78       	lsl	r8,0x3
80008516:	12 08       	add	r8,r9
80008518:	a3 78       	lsl	r8,0x3
8000851a:	f4 08 00 08 	add	r8,r10,r8
8000851e:	2d 88       	sub	r8,-40
80008520:	f0 e8 00 00 	ld.d	r8,r8[0]
80008524:	ee ea ff 68 	ld.d	r10,r7[-152]
80008528:	f0 16 00 03 	mcall	r6[12]
8000852c:	14 98       	mov	r8,r10
8000852e:	16 99       	mov	r9,r11
80008530:	10 9a       	mov	r10,r8
80008532:	12 9b       	mov	r11,r9
80008534:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008538:	ec fc 00 1c 	ld.w	r12,r6[28]
8000853c:	12 98       	mov	r8,r9
8000853e:	a3 78       	lsl	r8,0x3
80008540:	12 08       	add	r8,r9
80008542:	a3 78       	lsl	r8,0x3
80008544:	f8 08 00 08 	add	r8,r12,r8
80008548:	2f 08       	sub	r8,-16
8000854a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000854e:	f0 16 00 05 	mcall	r6[20]
80008552:	14 98       	mov	r8,r10
80008554:	16 99       	mov	r9,r11
80008556:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = (1. - K2) * P2[axis][1][0];
8000855a:	ee e8 ff a8 	ld.d	r8,r7[-88]
8000855e:	30 0a       	mov	r10,0
80008560:	fc 1b 3f f0 	movh	r11,0x3ff0
80008564:	f0 16 00 11 	mcall	r6[68]
80008568:	14 98       	mov	r8,r10
8000856a:	16 99       	mov	r9,r11
8000856c:	10 9a       	mov	r10,r8
8000856e:	12 9b       	mov	r11,r9
80008570:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008574:	ec fc 00 1c 	ld.w	r12,r6[28]
80008578:	12 98       	mov	r8,r9
8000857a:	a3 78       	lsl	r8,0x3
8000857c:	12 08       	add	r8,r9
8000857e:	a3 78       	lsl	r8,0x3
80008580:	f8 08 00 08 	add	r8,r12,r8
80008584:	2e 88       	sub	r8,-24
80008586:	f0 e8 00 00 	ld.d	r8,r8[0]
8000858a:	f0 16 00 03 	mcall	r6[12]
8000858e:	14 98       	mov	r8,r10
80008590:	16 99       	mov	r9,r11
80008592:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = (1. - K2) * P2[axis][1][1];
80008596:	ee e8 ff a8 	ld.d	r8,r7[-88]
8000859a:	30 0a       	mov	r10,0
8000859c:	fc 1b 3f f0 	movh	r11,0x3ff0
800085a0:	f0 16 00 11 	mcall	r6[68]
800085a4:	14 98       	mov	r8,r10
800085a6:	16 99       	mov	r9,r11
800085a8:	10 9a       	mov	r10,r8
800085aa:	12 9b       	mov	r11,r9
800085ac:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800085b0:	ec fc 00 1c 	ld.w	r12,r6[28]
800085b4:	12 98       	mov	r8,r9
800085b6:	a3 78       	lsl	r8,0x3
800085b8:	12 08       	add	r8,r9
800085ba:	a3 78       	lsl	r8,0x3
800085bc:	f8 08 00 08 	add	r8,r12,r8
800085c0:	2e 08       	sub	r8,-32
800085c2:	f0 e8 00 00 	ld.d	r8,r8[0]
800085c6:	f0 16 00 03 	mcall	r6[12]
800085ca:	14 98       	mov	r8,r10
800085cc:	16 99       	mov	r9,r11
800085ce:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = (1. - K2) * P2[axis][1][2];
800085d2:	ee e8 ff a8 	ld.d	r8,r7[-88]
800085d6:	30 0a       	mov	r10,0
800085d8:	fc 1b 3f f0 	movh	r11,0x3ff0
800085dc:	f0 16 00 11 	mcall	r6[68]
800085e0:	14 98       	mov	r8,r10
800085e2:	16 99       	mov	r9,r11
800085e4:	10 9a       	mov	r10,r8
800085e6:	12 9b       	mov	r11,r9
800085e8:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800085ec:	ec fc 00 1c 	ld.w	r12,r6[28]
800085f0:	12 98       	mov	r8,r9
800085f2:	a3 78       	lsl	r8,0x3
800085f4:	12 08       	add	r8,r9
800085f6:	a3 78       	lsl	r8,0x3
800085f8:	f8 08 00 08 	add	r8,r12,r8
800085fc:	2d 88       	sub	r8,-40
800085fe:	f0 e8 00 00 	ld.d	r8,r8[0]
80008602:	f0 16 00 03 	mcall	r6[12]
80008606:	14 98       	mov	r8,r10
80008608:	16 99       	mov	r9,r11
8000860a:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P2[axis][1][0] + P2[axis][2][0];
8000860e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008612:	10 99       	mov	r9,r8
80008614:	ee 19 80 00 	eorh	r9,0x8000
80008618:	ef 49 ff 70 	st.w	r7[-144],r9
8000861c:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008620:	ef 48 ff 74 	st.w	r7[-140],r8
80008624:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008628:	ec fa 00 1c 	ld.w	r10,r6[28]
8000862c:	12 98       	mov	r8,r9
8000862e:	a3 78       	lsl	r8,0x3
80008630:	12 08       	add	r8,r9
80008632:	a3 78       	lsl	r8,0x3
80008634:	f4 08 00 08 	add	r8,r10,r8
80008638:	2e 88       	sub	r8,-24
8000863a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000863e:	ee ea ff 70 	ld.d	r10,r7[-144]
80008642:	f0 16 00 03 	mcall	r6[12]
80008646:	14 98       	mov	r8,r10
80008648:	16 99       	mov	r9,r11
8000864a:	10 9a       	mov	r10,r8
8000864c:	12 9b       	mov	r11,r9
8000864e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008652:	ec fc 00 1c 	ld.w	r12,r6[28]
80008656:	12 98       	mov	r8,r9
80008658:	a3 78       	lsl	r8,0x3
8000865a:	12 08       	add	r8,r9
8000865c:	a3 78       	lsl	r8,0x3
8000865e:	f8 08 00 08 	add	r8,r12,r8
80008662:	2d 08       	sub	r8,-48
80008664:	f0 e8 00 00 	ld.d	r8,r8[0]
80008668:	f0 16 00 05 	mcall	r6[20]
8000866c:	14 98       	mov	r8,r10
8000866e:	16 99       	mov	r9,r11
80008670:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P2[axis][1][1] + P2[axis][2][1];
80008674:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008678:	10 99       	mov	r9,r8
8000867a:	ee 19 80 00 	eorh	r9,0x8000
8000867e:	ef 49 ff 78 	st.w	r7[-136],r9
80008682:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008686:	ef 48 ff 7c 	st.w	r7[-132],r8
8000868a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000868e:	ec fa 00 1c 	ld.w	r10,r6[28]
80008692:	12 98       	mov	r8,r9
80008694:	a3 78       	lsl	r8,0x3
80008696:	12 08       	add	r8,r9
80008698:	a3 78       	lsl	r8,0x3
8000869a:	f4 08 00 08 	add	r8,r10,r8
8000869e:	2e 08       	sub	r8,-32
800086a0:	f0 e8 00 00 	ld.d	r8,r8[0]
800086a4:	ee ea ff 78 	ld.d	r10,r7[-136]
800086a8:	f0 16 00 03 	mcall	r6[12]
800086ac:	14 98       	mov	r8,r10
800086ae:	16 99       	mov	r9,r11
800086b0:	10 9a       	mov	r10,r8
800086b2:	12 9b       	mov	r11,r9
800086b4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800086b8:	ec fc 00 1c 	ld.w	r12,r6[28]
800086bc:	12 98       	mov	r8,r9
800086be:	a3 78       	lsl	r8,0x3
800086c0:	12 08       	add	r8,r9
800086c2:	a3 78       	lsl	r8,0x3
800086c4:	f8 08 00 08 	add	r8,r12,r8
800086c8:	2c 88       	sub	r8,-56
800086ca:	f0 e8 00 00 	ld.d	r8,r8[0]
800086ce:	f0 16 00 05 	mcall	r6[20]
800086d2:	14 98       	mov	r8,r10
800086d4:	16 99       	mov	r9,r11
800086d6:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P2[axis][1][2] + P2[axis][2][2];
800086da:	ee f8 ff b0 	ld.w	r8,r7[-80]
800086de:	10 99       	mov	r9,r8
800086e0:	ee 19 80 00 	eorh	r9,0x8000
800086e4:	ef 49 ff 80 	st.w	r7[-128],r9
800086e8:	ee f8 ff b4 	ld.w	r8,r7[-76]
800086ec:	ef 48 ff 84 	st.w	r7[-124],r8
800086f0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800086f4:	ec fa 00 1c 	ld.w	r10,r6[28]
800086f8:	12 98       	mov	r8,r9
800086fa:	a3 78       	lsl	r8,0x3
800086fc:	12 08       	add	r8,r9
800086fe:	a3 78       	lsl	r8,0x3
80008700:	f4 08 00 08 	add	r8,r10,r8
80008704:	2d 88       	sub	r8,-40
80008706:	f0 e8 00 00 	ld.d	r8,r8[0]
8000870a:	ee ea ff 80 	ld.d	r10,r7[-128]
8000870e:	f0 16 00 03 	mcall	r6[12]
80008712:	14 98       	mov	r8,r10
80008714:	16 99       	mov	r9,r11
80008716:	10 9a       	mov	r10,r8
80008718:	12 9b       	mov	r11,r9
8000871a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000871e:	ec fc 00 1c 	ld.w	r12,r6[28]
80008722:	12 98       	mov	r8,r9
80008724:	a3 78       	lsl	r8,0x3
80008726:	12 08       	add	r8,r9
80008728:	a3 78       	lsl	r8,0x3
8000872a:	f8 08 00 08 	add	r8,r12,r8
8000872e:	2c 08       	sub	r8,-64
80008730:	f0 e8 00 00 	ld.d	r8,r8[0]
80008734:	f0 16 00 05 	mcall	r6[20]
80008738:	14 98       	mov	r8,r10
8000873a:	16 99       	mov	r9,r11
8000873c:	ee e9 ff f8 	st.d	r7[-8],r8

	P2[axis][0][0] = P11;
80008740:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008744:	ec fa 00 1c 	ld.w	r10,r6[28]
80008748:	12 98       	mov	r8,r9
8000874a:	a3 78       	lsl	r8,0x3
8000874c:	12 08       	add	r8,r9
8000874e:	a3 78       	lsl	r8,0x3
80008750:	10 0a       	add	r10,r8
80008752:	ee e8 ff b8 	ld.d	r8,r7[-72]
80008756:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][0][1] = P12;
8000875a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000875e:	ec fa 00 1c 	ld.w	r10,r6[28]
80008762:	12 98       	mov	r8,r9
80008764:	a3 78       	lsl	r8,0x3
80008766:	12 08       	add	r8,r9
80008768:	f0 cb ff ff 	sub	r11,r8,-1
8000876c:	ee e8 ff c0 	ld.d	r8,r7[-64]
80008770:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][0][2] = P13;
80008774:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008778:	ec fa 00 1c 	ld.w	r10,r6[28]
8000877c:	12 98       	mov	r8,r9
8000877e:	a3 78       	lsl	r8,0x3
80008780:	12 08       	add	r8,r9
80008782:	a3 78       	lsl	r8,0x3
80008784:	f4 08 00 08 	add	r8,r10,r8
80008788:	f0 ca ff f0 	sub	r10,r8,-16
8000878c:	ee e8 ff c8 	ld.d	r8,r7[-56]
80008790:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][0] = P21;
80008794:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008798:	ec fa 00 1c 	ld.w	r10,r6[28]
8000879c:	12 98       	mov	r8,r9
8000879e:	a3 78       	lsl	r8,0x3
800087a0:	12 08       	add	r8,r9
800087a2:	a3 78       	lsl	r8,0x3
800087a4:	f4 08 00 08 	add	r8,r10,r8
800087a8:	f0 ca ff e8 	sub	r10,r8,-24
800087ac:	ee e8 ff d0 	ld.d	r8,r7[-48]
800087b0:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = P22;
800087b4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800087b8:	ec fa 00 1c 	ld.w	r10,r6[28]
800087bc:	12 98       	mov	r8,r9
800087be:	a3 78       	lsl	r8,0x3
800087c0:	12 08       	add	r8,r9
800087c2:	a3 78       	lsl	r8,0x3
800087c4:	f4 08 00 08 	add	r8,r10,r8
800087c8:	f0 ca ff e0 	sub	r10,r8,-32
800087cc:	ee e8 ff d8 	ld.d	r8,r7[-40]
800087d0:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][2] = P23;
800087d4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800087d8:	ec fa 00 1c 	ld.w	r10,r6[28]
800087dc:	12 98       	mov	r8,r9
800087de:	a3 78       	lsl	r8,0x3
800087e0:	12 08       	add	r8,r9
800087e2:	a3 78       	lsl	r8,0x3
800087e4:	f4 08 00 08 	add	r8,r10,r8
800087e8:	f0 ca ff d8 	sub	r10,r8,-40
800087ec:	ee e8 ff e0 	ld.d	r8,r7[-32]
800087f0:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][0] = P31;
800087f4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800087f8:	ec fa 00 1c 	ld.w	r10,r6[28]
800087fc:	12 98       	mov	r8,r9
800087fe:	a3 78       	lsl	r8,0x3
80008800:	12 08       	add	r8,r9
80008802:	a3 78       	lsl	r8,0x3
80008804:	f4 08 00 08 	add	r8,r10,r8
80008808:	f0 ca ff d0 	sub	r10,r8,-48
8000880c:	ee e8 ff e8 	ld.d	r8,r7[-24]
80008810:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][1] = P32;
80008814:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008818:	ec fa 00 1c 	ld.w	r10,r6[28]
8000881c:	12 98       	mov	r8,r9
8000881e:	a3 78       	lsl	r8,0x3
80008820:	12 08       	add	r8,r9
80008822:	a3 78       	lsl	r8,0x3
80008824:	f4 08 00 08 	add	r8,r10,r8
80008828:	f0 ca ff c8 	sub	r10,r8,-56
8000882c:	ee e8 ff f0 	ld.d	r8,r7[-16]
80008830:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][2] = P33;
80008834:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008838:	ec fa 00 1c 	ld.w	r10,r6[28]
8000883c:	12 98       	mov	r8,r9
8000883e:	a3 78       	lsl	r8,0x3
80008840:	12 08       	add	r8,r9
80008842:	a3 78       	lsl	r8,0x3
80008844:	f4 08 00 08 	add	r8,r10,r8
80008848:	f0 ca ff c0 	sub	r10,r8,-64
8000884c:	ee e8 ff f8 	ld.d	r8,r7[-8]
80008850:	f4 e9 00 00 	st.d	r10[0],r8
}
80008854:	2c ad       	sub	sp,-216
80008856:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000885a:	00 00       	add	r0,r0
8000885c:	80 00       	ld.sh	r0,r0[0x0]
8000885e:	7a ca       	ld.w	r10,sp[0x30]

80008860 <e_kalman_update_position_hf>:
  Xp = Xm + K*y;
  // update covariance
  Pp = Pm - K*H*Pm;
*/
void e_kalman_update_position_hf(int axis, double position_meas)
{
80008860:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80008864:	1a 97       	mov	r7,sp
80008866:	21 bd       	sub	sp,108
80008868:	fe f6 05 80 	ld.w	r6,pc[1408]
8000886c:	1e 26       	rsub	r6,pc
8000886e:	ef 4c ff bc 	st.w	r7[-68],r12
80008872:	ee eb ff b4 	st.d	r7[-76],r10
	double posxy,S,K1,K2;
	double P11,P12,P21,P22;
	
	posxy = position_meas - centralData->estimation.state[axis][POSITION];
80008876:	ec f8 00 00 	ld.w	r8,r6[0]
8000887a:	70 0a       	ld.w	r10,r8[0x0]
8000887c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008880:	12 98       	mov	r8,r9
80008882:	a1 78       	lsl	r8,0x1
80008884:	12 08       	add	r8,r9
80008886:	a3 78       	lsl	r8,0x3
80008888:	f4 08 00 08 	add	r8,r10,r8
8000888c:	f0 c8 f8 5c 	sub	r8,r8,-1956
80008890:	f0 e8 00 00 	ld.d	r8,r8[0]
80008894:	ee ea ff b4 	ld.d	r10,r7[-76]
80008898:	f0 16 00 11 	mcall	r6[68]
8000889c:	14 98       	mov	r8,r10
8000889e:	16 99       	mov	r9,r11
800088a0:	ee e9 ff c0 	st.d	r7[-64],r8
	
	
	S = P[axis][0][0] + R[axis];
800088a4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800088a8:	ec fa 00 18 	ld.w	r10,r6[24]
800088ac:	12 98       	mov	r8,r9
800088ae:	a3 78       	lsl	r8,0x3
800088b0:	12 08       	add	r8,r9
800088b2:	a3 78       	lsl	r8,0x3
800088b4:	f4 08 00 08 	add	r8,r10,r8
800088b8:	f0 ea 00 00 	ld.d	r10,r8[0]
800088bc:	ee f9 ff bc 	ld.w	r9,r7[-68]
800088c0:	ec f8 01 74 	ld.w	r8,r6[372]
800088c4:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
800088c8:	f0 16 00 05 	mcall	r6[20]
800088cc:	14 98       	mov	r8,r10
800088ce:	16 99       	mov	r9,r11
800088d0:	ee e9 ff c8 	st.d	r7[-56],r8
	K1 = P[axis][0][0] * 1/S;
800088d4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800088d8:	ec fa 00 18 	ld.w	r10,r6[24]
800088dc:	12 98       	mov	r8,r9
800088de:	a3 78       	lsl	r8,0x3
800088e0:	12 08       	add	r8,r9
800088e2:	a3 78       	lsl	r8,0x3
800088e4:	f4 08 00 08 	add	r8,r10,r8
800088e8:	f0 ea 00 00 	ld.d	r10,r8[0]
800088ec:	ee e8 ff c8 	ld.d	r8,r7[-56]
800088f0:	f0 16 00 0c 	mcall	r6[48]
800088f4:	14 98       	mov	r8,r10
800088f6:	16 99       	mov	r9,r11
800088f8:	ee e9 ff d0 	st.d	r7[-48],r8
	K2 = P[axis][1][0] * 1/S;
800088fc:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008900:	ec fa 00 18 	ld.w	r10,r6[24]
80008904:	12 98       	mov	r8,r9
80008906:	a3 78       	lsl	r8,0x3
80008908:	12 08       	add	r8,r9
8000890a:	a3 78       	lsl	r8,0x3
8000890c:	f4 08 00 08 	add	r8,r10,r8
80008910:	2e 88       	sub	r8,-24
80008912:	f0 ea 00 00 	ld.d	r10,r8[0]
80008916:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000891a:	f0 16 00 0c 	mcall	r6[48]
8000891e:	14 98       	mov	r8,r10
80008920:	16 99       	mov	r9,r11
80008922:	ee e9 ff d8 	st.d	r7[-40],r8
	
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * posxy;
80008926:	ec f8 00 00 	ld.w	r8,r6[0]
8000892a:	70 08       	ld.w	r8,r8[0x0]
8000892c:	ef 48 ff 94 	st.w	r7[-108],r8
80008930:	ee f5 ff bc 	ld.w	r5,r7[-68]
80008934:	ec f8 00 00 	ld.w	r8,r6[0]
80008938:	70 0a       	ld.w	r10,r8[0x0]
8000893a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000893e:	12 98       	mov	r8,r9
80008940:	a1 78       	lsl	r8,0x1
80008942:	12 08       	add	r8,r9
80008944:	a3 78       	lsl	r8,0x3
80008946:	f4 08 00 08 	add	r8,r10,r8
8000894a:	f0 c8 f8 5c 	sub	r8,r8,-1956
8000894e:	f0 e2 00 00 	ld.d	r2,r8[0]
80008952:	ee e8 ff c0 	ld.d	r8,r7[-64]
80008956:	ee ea ff d0 	ld.d	r10,r7[-48]
8000895a:	f0 16 00 03 	mcall	r6[12]
8000895e:	14 98       	mov	r8,r10
80008960:	16 99       	mov	r9,r11
80008962:	04 9a       	mov	r10,r2
80008964:	06 9b       	mov	r11,r3
80008966:	f0 16 00 05 	mcall	r6[20]
8000896a:	14 98       	mov	r8,r10
8000896c:	16 99       	mov	r9,r11
8000896e:	10 9a       	mov	r10,r8
80008970:	12 9b       	mov	r11,r9
80008972:	0a 98       	mov	r8,r5
80008974:	a1 78       	lsl	r8,0x1
80008976:	0a 08       	add	r8,r5
80008978:	a3 78       	lsl	r8,0x3
8000897a:	ee f9 ff 94 	ld.w	r9,r7[-108]
8000897e:	f2 08 00 08 	add	r8,r9,r8
80008982:	f0 c8 f8 5c 	sub	r8,r8,-1956
80008986:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * posxy;
8000898a:	ec f8 00 00 	ld.w	r8,r6[0]
8000898e:	70 08       	ld.w	r8,r8[0x0]
80008990:	ef 48 ff 98 	st.w	r7[-104],r8
80008994:	ee f5 ff bc 	ld.w	r5,r7[-68]
80008998:	ec f8 00 00 	ld.w	r8,r6[0]
8000899c:	70 0a       	ld.w	r10,r8[0x0]
8000899e:	ee f9 ff bc 	ld.w	r9,r7[-68]
800089a2:	12 98       	mov	r8,r9
800089a4:	a1 78       	lsl	r8,0x1
800089a6:	12 08       	add	r8,r9
800089a8:	2f f8       	sub	r8,-1
800089aa:	a3 78       	lsl	r8,0x3
800089ac:	f4 08 00 08 	add	r8,r10,r8
800089b0:	f0 e2 07 a4 	ld.d	r2,r8[1956]
800089b4:	ee e8 ff c0 	ld.d	r8,r7[-64]
800089b8:	ee ea ff d8 	ld.d	r10,r7[-40]
800089bc:	f0 16 00 03 	mcall	r6[12]
800089c0:	14 98       	mov	r8,r10
800089c2:	16 99       	mov	r9,r11
800089c4:	04 9a       	mov	r10,r2
800089c6:	06 9b       	mov	r11,r3
800089c8:	f0 16 00 05 	mcall	r6[20]
800089cc:	14 98       	mov	r8,r10
800089ce:	16 99       	mov	r9,r11
800089d0:	10 9a       	mov	r10,r8
800089d2:	12 9b       	mov	r11,r9
800089d4:	0a 98       	mov	r8,r5
800089d6:	a1 78       	lsl	r8,0x1
800089d8:	0a 08       	add	r8,r5
800089da:	2f f8       	sub	r8,-1
800089dc:	a3 78       	lsl	r8,0x3
800089de:	ee f9 ff 98 	ld.w	r9,r7[-104]
800089e2:	f2 08 00 08 	add	r8,r9,r8
800089e6:	f0 eb 07 a4 	st.d	r8[1956],r10
	
	P11 = (1. - K1) * P[axis][0][0];
800089ea:	ee e8 ff d0 	ld.d	r8,r7[-48]
800089ee:	30 0a       	mov	r10,0
800089f0:	fc 1b 3f f0 	movh	r11,0x3ff0
800089f4:	f0 16 00 11 	mcall	r6[68]
800089f8:	14 98       	mov	r8,r10
800089fa:	16 99       	mov	r9,r11
800089fc:	10 9a       	mov	r10,r8
800089fe:	12 9b       	mov	r11,r9
80008a00:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008a04:	ec fc 00 18 	ld.w	r12,r6[24]
80008a08:	12 98       	mov	r8,r9
80008a0a:	a3 78       	lsl	r8,0x3
80008a0c:	12 08       	add	r8,r9
80008a0e:	a3 78       	lsl	r8,0x3
80008a10:	f8 08 00 08 	add	r8,r12,r8
80008a14:	f0 e8 00 00 	ld.d	r8,r8[0]
80008a18:	f0 16 00 03 	mcall	r6[12]
80008a1c:	14 98       	mov	r8,r10
80008a1e:	16 99       	mov	r9,r11
80008a20:	ee e9 ff e0 	st.d	r7[-32],r8
	P12 = (1. - K1) * P[axis][0][1];
80008a24:	ee e8 ff d0 	ld.d	r8,r7[-48]
80008a28:	30 0a       	mov	r10,0
80008a2a:	fc 1b 3f f0 	movh	r11,0x3ff0
80008a2e:	f0 16 00 11 	mcall	r6[68]
80008a32:	14 98       	mov	r8,r10
80008a34:	16 99       	mov	r9,r11
80008a36:	10 9a       	mov	r10,r8
80008a38:	12 9b       	mov	r11,r9
80008a3a:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008a3e:	ec fc 00 18 	ld.w	r12,r6[24]
80008a42:	12 98       	mov	r8,r9
80008a44:	a3 78       	lsl	r8,0x3
80008a46:	12 08       	add	r8,r9
80008a48:	2f f8       	sub	r8,-1
80008a4a:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80008a4e:	f0 16 00 03 	mcall	r6[12]
80008a52:	14 98       	mov	r8,r10
80008a54:	16 99       	mov	r9,r11
80008a56:	ee e9 ff e8 	st.d	r7[-24],r8
	P21 = -K2 * P[axis][0][0] + P[axis][1][0];
80008a5a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80008a5e:	10 99       	mov	r9,r8
80008a60:	ee 19 80 00 	eorh	r9,0x8000
80008a64:	ef 49 ff 9c 	st.w	r7[-100],r9
80008a68:	ee f8 ff dc 	ld.w	r8,r7[-36]
80008a6c:	ef 48 ff a0 	st.w	r7[-96],r8
80008a70:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008a74:	ec fa 00 18 	ld.w	r10,r6[24]
80008a78:	12 98       	mov	r8,r9
80008a7a:	a3 78       	lsl	r8,0x3
80008a7c:	12 08       	add	r8,r9
80008a7e:	a3 78       	lsl	r8,0x3
80008a80:	f4 08 00 08 	add	r8,r10,r8
80008a84:	f0 e8 00 00 	ld.d	r8,r8[0]
80008a88:	ee ea ff 9c 	ld.d	r10,r7[-100]
80008a8c:	f0 16 00 03 	mcall	r6[12]
80008a90:	14 98       	mov	r8,r10
80008a92:	16 99       	mov	r9,r11
80008a94:	10 9a       	mov	r10,r8
80008a96:	12 9b       	mov	r11,r9
80008a98:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008a9c:	ec fc 00 18 	ld.w	r12,r6[24]
80008aa0:	12 98       	mov	r8,r9
80008aa2:	a3 78       	lsl	r8,0x3
80008aa4:	12 08       	add	r8,r9
80008aa6:	a3 78       	lsl	r8,0x3
80008aa8:	f8 08 00 08 	add	r8,r12,r8
80008aac:	2e 88       	sub	r8,-24
80008aae:	f0 e8 00 00 	ld.d	r8,r8[0]
80008ab2:	f0 16 00 05 	mcall	r6[20]
80008ab6:	14 98       	mov	r8,r10
80008ab8:	16 99       	mov	r9,r11
80008aba:	ee e9 ff f0 	st.d	r7[-16],r8
	P22 = -K2 * P[axis][0][1] + P[axis][1][1];
80008abe:	ee f8 ff d8 	ld.w	r8,r7[-40]
80008ac2:	10 99       	mov	r9,r8
80008ac4:	ee 19 80 00 	eorh	r9,0x8000
80008ac8:	ef 49 ff a4 	st.w	r7[-92],r9
80008acc:	ee f8 ff dc 	ld.w	r8,r7[-36]
80008ad0:	ef 48 ff a8 	st.w	r7[-88],r8
80008ad4:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008ad8:	ec fa 00 18 	ld.w	r10,r6[24]
80008adc:	12 98       	mov	r8,r9
80008ade:	a3 78       	lsl	r8,0x3
80008ae0:	12 08       	add	r8,r9
80008ae2:	2f f8       	sub	r8,-1
80008ae4:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80008ae8:	ee ea ff a4 	ld.d	r10,r7[-92]
80008aec:	f0 16 00 03 	mcall	r6[12]
80008af0:	14 98       	mov	r8,r10
80008af2:	16 99       	mov	r9,r11
80008af4:	10 9a       	mov	r10,r8
80008af6:	12 9b       	mov	r11,r9
80008af8:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008afc:	ec fc 00 18 	ld.w	r12,r6[24]
80008b00:	12 98       	mov	r8,r9
80008b02:	a3 78       	lsl	r8,0x3
80008b04:	12 08       	add	r8,r9
80008b06:	a3 78       	lsl	r8,0x3
80008b08:	f8 08 00 08 	add	r8,r12,r8
80008b0c:	2e 08       	sub	r8,-32
80008b0e:	f0 e8 00 00 	ld.d	r8,r8[0]
80008b12:	f0 16 00 05 	mcall	r6[20]
80008b16:	14 98       	mov	r8,r10
80008b18:	16 99       	mov	r9,r11
80008b1a:	ee e9 ff f8 	st.d	r7[-8],r8

	P[axis][0][0] = P11;
80008b1e:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008b22:	ec fa 00 18 	ld.w	r10,r6[24]
80008b26:	12 98       	mov	r8,r9
80008b28:	a3 78       	lsl	r8,0x3
80008b2a:	12 08       	add	r8,r9
80008b2c:	a3 78       	lsl	r8,0x3
80008b2e:	10 0a       	add	r10,r8
80008b30:	ee e8 ff e0 	ld.d	r8,r7[-32]
80008b34:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][0][1] = P12;
80008b38:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008b3c:	ec fa 00 18 	ld.w	r10,r6[24]
80008b40:	12 98       	mov	r8,r9
80008b42:	a3 78       	lsl	r8,0x3
80008b44:	12 08       	add	r8,r9
80008b46:	f0 cb ff ff 	sub	r11,r8,-1
80008b4a:	ee e8 ff e8 	ld.d	r8,r7[-24]
80008b4e:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P[axis][1][0] = P21;
80008b52:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008b56:	ec fa 00 18 	ld.w	r10,r6[24]
80008b5a:	12 98       	mov	r8,r9
80008b5c:	a3 78       	lsl	r8,0x3
80008b5e:	12 08       	add	r8,r9
80008b60:	a3 78       	lsl	r8,0x3
80008b62:	f4 08 00 08 	add	r8,r10,r8
80008b66:	f0 ca ff e8 	sub	r10,r8,-24
80008b6a:	ee e8 ff f0 	ld.d	r8,r7[-16]
80008b6e:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = P22;
80008b72:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008b76:	ec fa 00 18 	ld.w	r10,r6[24]
80008b7a:	12 98       	mov	r8,r9
80008b7c:	a3 78       	lsl	r8,0x3
80008b7e:	12 08       	add	r8,r9
80008b80:	a3 78       	lsl	r8,0x3
80008b82:	f4 08 00 08 	add	r8,r10,r8
80008b86:	f0 ca ff e0 	sub	r10,r8,-32
80008b8a:	ee e8 ff f8 	ld.d	r8,r7[-8]
80008b8e:	f4 e9 00 00 	st.d	r10[0],r8
	
	/*************************************************************************************/
	posxy = position_meas - centralData->position_estimator.localPosition.pos[axis];
80008b92:	ec f8 00 00 	ld.w	r8,r6[0]
80008b96:	70 08       	ld.w	r8,r8[0x0]
80008b98:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008b9c:	f2 c9 fd 87 	sub	r9,r9,-633
80008ba0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80008ba4:	10 9c       	mov	r12,r8
80008ba6:	f0 16 00 02 	mcall	r6[8]
80008baa:	14 98       	mov	r8,r10
80008bac:	16 99       	mov	r9,r11
80008bae:	ee ea ff b4 	ld.d	r10,r7[-76]
80008bb2:	f0 16 00 11 	mcall	r6[68]
80008bb6:	14 98       	mov	r8,r10
80008bb8:	16 99       	mov	r9,r11
80008bba:	ee e9 ff c0 	st.d	r7[-64],r8
	
	S = P2[axis][0][0] + R2[axis];
80008bbe:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008bc2:	ec fa 00 1c 	ld.w	r10,r6[28]
80008bc6:	12 98       	mov	r8,r9
80008bc8:	a3 78       	lsl	r8,0x3
80008bca:	12 08       	add	r8,r9
80008bcc:	a3 78       	lsl	r8,0x3
80008bce:	f4 08 00 08 	add	r8,r10,r8
80008bd2:	f0 ea 00 00 	ld.d	r10,r8[0]
80008bd6:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008bda:	ec f8 01 70 	ld.w	r8,r6[368]
80008bde:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80008be2:	f0 16 00 05 	mcall	r6[20]
80008be6:	14 98       	mov	r8,r10
80008be8:	16 99       	mov	r9,r11
80008bea:	ee e9 ff c8 	st.d	r7[-56],r8
	K1 = P2[axis][0][0] * 1/S;
80008bee:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008bf2:	ec fa 00 1c 	ld.w	r10,r6[28]
80008bf6:	12 98       	mov	r8,r9
80008bf8:	a3 78       	lsl	r8,0x3
80008bfa:	12 08       	add	r8,r9
80008bfc:	a3 78       	lsl	r8,0x3
80008bfe:	f4 08 00 08 	add	r8,r10,r8
80008c02:	f0 ea 00 00 	ld.d	r10,r8[0]
80008c06:	ee e8 ff c8 	ld.d	r8,r7[-56]
80008c0a:	f0 16 00 0c 	mcall	r6[48]
80008c0e:	14 98       	mov	r8,r10
80008c10:	16 99       	mov	r9,r11
80008c12:	ee e9 ff d0 	st.d	r7[-48],r8
	K2 = P2[axis][1][0] * 1/S;
80008c16:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008c1a:	ec fa 00 1c 	ld.w	r10,r6[28]
80008c1e:	12 98       	mov	r8,r9
80008c20:	a3 78       	lsl	r8,0x3
80008c22:	12 08       	add	r8,r9
80008c24:	a3 78       	lsl	r8,0x3
80008c26:	f4 08 00 08 	add	r8,r10,r8
80008c2a:	2e 88       	sub	r8,-24
80008c2c:	f0 ea 00 00 	ld.d	r10,r8[0]
80008c30:	ee e8 ff c8 	ld.d	r8,r7[-56]
80008c34:	f0 16 00 0c 	mcall	r6[48]
80008c38:	14 98       	mov	r8,r10
80008c3a:	16 99       	mov	r9,r11
80008c3c:	ee e9 ff d8 	st.d	r7[-40],r8
	
	//centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * posxy;
	//centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * posxy;
	
	P11 = (1. - K1) * P2[axis][0][0];
80008c40:	ee e8 ff d0 	ld.d	r8,r7[-48]
80008c44:	30 0a       	mov	r10,0
80008c46:	fc 1b 3f f0 	movh	r11,0x3ff0
80008c4a:	f0 16 00 11 	mcall	r6[68]
80008c4e:	14 98       	mov	r8,r10
80008c50:	16 99       	mov	r9,r11
80008c52:	10 9a       	mov	r10,r8
80008c54:	12 9b       	mov	r11,r9
80008c56:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008c5a:	ec fc 00 1c 	ld.w	r12,r6[28]
80008c5e:	12 98       	mov	r8,r9
80008c60:	a3 78       	lsl	r8,0x3
80008c62:	12 08       	add	r8,r9
80008c64:	a3 78       	lsl	r8,0x3
80008c66:	f8 08 00 08 	add	r8,r12,r8
80008c6a:	f0 e8 00 00 	ld.d	r8,r8[0]
80008c6e:	f0 16 00 03 	mcall	r6[12]
80008c72:	14 98       	mov	r8,r10
80008c74:	16 99       	mov	r9,r11
80008c76:	ee e9 ff e0 	st.d	r7[-32],r8
	P12 = (1. - K1) * P2[axis][0][1];
80008c7a:	ee e8 ff d0 	ld.d	r8,r7[-48]
80008c7e:	30 0a       	mov	r10,0
80008c80:	fc 1b 3f f0 	movh	r11,0x3ff0
80008c84:	f0 16 00 11 	mcall	r6[68]
80008c88:	14 98       	mov	r8,r10
80008c8a:	16 99       	mov	r9,r11
80008c8c:	10 9a       	mov	r10,r8
80008c8e:	12 9b       	mov	r11,r9
80008c90:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008c94:	ec fc 00 1c 	ld.w	r12,r6[28]
80008c98:	12 98       	mov	r8,r9
80008c9a:	a3 78       	lsl	r8,0x3
80008c9c:	12 08       	add	r8,r9
80008c9e:	2f f8       	sub	r8,-1
80008ca0:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80008ca4:	f0 16 00 03 	mcall	r6[12]
80008ca8:	14 98       	mov	r8,r10
80008caa:	16 99       	mov	r9,r11
80008cac:	ee e9 ff e8 	st.d	r7[-24],r8
	P21 = -K2 * P2[axis][0][0] + P2[axis][1][0];
80008cb0:	ee f8 ff d8 	ld.w	r8,r7[-40]
80008cb4:	10 99       	mov	r9,r8
80008cb6:	ee 19 80 00 	eorh	r9,0x8000
80008cba:	ef 49 ff ac 	st.w	r7[-84],r9
80008cbe:	ee f8 ff dc 	ld.w	r8,r7[-36]
80008cc2:	ef 48 ff b0 	st.w	r7[-80],r8
80008cc6:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008cca:	ec fa 00 1c 	ld.w	r10,r6[28]
80008cce:	12 98       	mov	r8,r9
80008cd0:	a3 78       	lsl	r8,0x3
80008cd2:	12 08       	add	r8,r9
80008cd4:	a3 78       	lsl	r8,0x3
80008cd6:	f4 08 00 08 	add	r8,r10,r8
80008cda:	f0 e8 00 00 	ld.d	r8,r8[0]
80008cde:	ee ea ff ac 	ld.d	r10,r7[-84]
80008ce2:	f0 16 00 03 	mcall	r6[12]
80008ce6:	14 98       	mov	r8,r10
80008ce8:	16 99       	mov	r9,r11
80008cea:	10 9a       	mov	r10,r8
80008cec:	12 9b       	mov	r11,r9
80008cee:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008cf2:	ec fc 00 1c 	ld.w	r12,r6[28]
80008cf6:	12 98       	mov	r8,r9
80008cf8:	a3 78       	lsl	r8,0x3
80008cfa:	12 08       	add	r8,r9
80008cfc:	a3 78       	lsl	r8,0x3
80008cfe:	f8 08 00 08 	add	r8,r12,r8
80008d02:	2e 88       	sub	r8,-24
80008d04:	f0 e8 00 00 	ld.d	r8,r8[0]
80008d08:	f0 16 00 05 	mcall	r6[20]
80008d0c:	14 98       	mov	r8,r10
80008d0e:	16 99       	mov	r9,r11
80008d10:	ee e9 ff f0 	st.d	r7[-16],r8
	P22 = -K2 * P2[axis][0][1] + P2[axis][1][1];
80008d14:	ee f8 ff d8 	ld.w	r8,r7[-40]
80008d18:	10 91       	mov	r1,r8
80008d1a:	ee 11 80 00 	eorh	r1,0x8000
80008d1e:	ee f0 ff dc 	ld.w	r0,r7[-36]
80008d22:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008d26:	ec fa 00 1c 	ld.w	r10,r6[28]
80008d2a:	12 98       	mov	r8,r9
80008d2c:	a3 78       	lsl	r8,0x3
80008d2e:	12 08       	add	r8,r9
80008d30:	2f f8       	sub	r8,-1
80008d32:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80008d36:	00 9a       	mov	r10,r0
80008d38:	02 9b       	mov	r11,r1
80008d3a:	f0 16 00 03 	mcall	r6[12]
80008d3e:	14 98       	mov	r8,r10
80008d40:	16 99       	mov	r9,r11
80008d42:	10 9a       	mov	r10,r8
80008d44:	12 9b       	mov	r11,r9
80008d46:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008d4a:	ec fc 00 1c 	ld.w	r12,r6[28]
80008d4e:	12 98       	mov	r8,r9
80008d50:	a3 78       	lsl	r8,0x3
80008d52:	12 08       	add	r8,r9
80008d54:	a3 78       	lsl	r8,0x3
80008d56:	f8 08 00 08 	add	r8,r12,r8
80008d5a:	2e 08       	sub	r8,-32
80008d5c:	f0 e8 00 00 	ld.d	r8,r8[0]
80008d60:	f0 16 00 05 	mcall	r6[20]
80008d64:	14 98       	mov	r8,r10
80008d66:	16 99       	mov	r9,r11
80008d68:	ee e9 ff f8 	st.d	r7[-8],r8

	P2[axis][0][0] = P11;
80008d6c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008d70:	ec fa 00 1c 	ld.w	r10,r6[28]
80008d74:	12 98       	mov	r8,r9
80008d76:	a3 78       	lsl	r8,0x3
80008d78:	12 08       	add	r8,r9
80008d7a:	a3 78       	lsl	r8,0x3
80008d7c:	10 0a       	add	r10,r8
80008d7e:	ee e8 ff e0 	ld.d	r8,r7[-32]
80008d82:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][0][1] = P12;
80008d86:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008d8a:	ec fa 00 1c 	ld.w	r10,r6[28]
80008d8e:	12 98       	mov	r8,r9
80008d90:	a3 78       	lsl	r8,0x3
80008d92:	12 08       	add	r8,r9
80008d94:	f0 cb ff ff 	sub	r11,r8,-1
80008d98:	ee e8 ff e8 	ld.d	r8,r7[-24]
80008d9c:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][1][0] = P21;
80008da0:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008da4:	ec fa 00 1c 	ld.w	r10,r6[28]
80008da8:	12 98       	mov	r8,r9
80008daa:	a3 78       	lsl	r8,0x3
80008dac:	12 08       	add	r8,r9
80008dae:	a3 78       	lsl	r8,0x3
80008db0:	f4 08 00 08 	add	r8,r10,r8
80008db4:	f0 ca ff e8 	sub	r10,r8,-24
80008db8:	ee e8 ff f0 	ld.d	r8,r7[-16]
80008dbc:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = P22;
80008dc0:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008dc4:	ec fa 00 1c 	ld.w	r10,r6[28]
80008dc8:	12 98       	mov	r8,r9
80008dca:	a3 78       	lsl	r8,0x3
80008dcc:	12 08       	add	r8,r9
80008dce:	a3 78       	lsl	r8,0x3
80008dd0:	f4 08 00 08 	add	r8,r10,r8
80008dd4:	f0 ca ff e0 	sub	r10,r8,-32
80008dd8:	ee e8 ff f8 	ld.d	r8,r7[-8]
80008ddc:	f4 e9 00 00 	st.d	r10[0],r8
}
80008de0:	2e 5d       	sub	sp,-108
80008de2:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80008de6:	00 00       	add	r0,r0
80008de8:	80 00       	ld.sh	r0,r0[0x0]
80008dea:	86 f0       	ld.uh	r0,r3[0xe]

80008dec <e_kalman_update_speed_hf>:
  
  // update covariance
  Pp = Pm - K*H*Pm;
*/
void e_kalman_update_speed_hf(int axis, float speed_meas)
{
80008dec:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80008df0:	1a 97       	mov	r7,sp
80008df2:	21 ad       	sub	sp,104
80008df4:	fe f6 05 88 	ld.w	r6,pc[1416]
80008df8:	1e 26       	rsub	r6,pc
80008dfa:	ef 4c ff bc 	st.w	r7[-68],r12
80008dfe:	ef 4b ff b8 	st.w	r7[-72],r11
		double velxy,S,K1,K2;
		double P11,P12,P21,P22;
		
		velxy = speed_meas - centralData->estimation.state[axis][SPEED];
80008e02:	ee fc ff b8 	ld.w	r12,r7[-72]
80008e06:	f0 16 00 02 	mcall	r6[8]
80008e0a:	ec f8 00 00 	ld.w	r8,r6[0]
80008e0e:	70 0c       	ld.w	r12,r8[0x0]
80008e10:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008e14:	12 98       	mov	r8,r9
80008e16:	a1 78       	lsl	r8,0x1
80008e18:	12 08       	add	r8,r9
80008e1a:	2f f8       	sub	r8,-1
80008e1c:	a3 78       	lsl	r8,0x3
80008e1e:	f8 08 00 08 	add	r8,r12,r8
80008e22:	f0 e8 07 a4 	ld.d	r8,r8[1956]
80008e26:	f0 16 00 11 	mcall	r6[68]
80008e2a:	14 98       	mov	r8,r10
80008e2c:	16 99       	mov	r9,r11
80008e2e:	ee e9 ff c0 	st.d	r7[-64],r8
		
		S = P[axis][1][1] + R[axis];
80008e32:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008e36:	ec fa 00 18 	ld.w	r10,r6[24]
80008e3a:	12 98       	mov	r8,r9
80008e3c:	a3 78       	lsl	r8,0x3
80008e3e:	12 08       	add	r8,r9
80008e40:	a3 78       	lsl	r8,0x3
80008e42:	f4 08 00 08 	add	r8,r10,r8
80008e46:	2e 08       	sub	r8,-32
80008e48:	f0 ea 00 00 	ld.d	r10,r8[0]
80008e4c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008e50:	ec f8 01 74 	ld.w	r8,r6[372]
80008e54:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80008e58:	f0 16 00 05 	mcall	r6[20]
80008e5c:	14 98       	mov	r8,r10
80008e5e:	16 99       	mov	r9,r11
80008e60:	ee e9 ff c8 	st.d	r7[-56],r8
		K1 = P[axis][0][1] * 1/S;
80008e64:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008e68:	ec fa 00 18 	ld.w	r10,r6[24]
80008e6c:	12 98       	mov	r8,r9
80008e6e:	a3 78       	lsl	r8,0x3
80008e70:	12 08       	add	r8,r9
80008e72:	2f f8       	sub	r8,-1
80008e74:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
80008e78:	ee e8 ff c8 	ld.d	r8,r7[-56]
80008e7c:	f0 16 00 0c 	mcall	r6[48]
80008e80:	14 98       	mov	r8,r10
80008e82:	16 99       	mov	r9,r11
80008e84:	ee e9 ff d0 	st.d	r7[-48],r8
		K2 = P[axis][1][1] * 1/S;
80008e88:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008e8c:	ec fa 00 18 	ld.w	r10,r6[24]
80008e90:	12 98       	mov	r8,r9
80008e92:	a3 78       	lsl	r8,0x3
80008e94:	12 08       	add	r8,r9
80008e96:	a3 78       	lsl	r8,0x3
80008e98:	f4 08 00 08 	add	r8,r10,r8
80008e9c:	2e 08       	sub	r8,-32
80008e9e:	f0 ea 00 00 	ld.d	r10,r8[0]
80008ea2:	ee e8 ff c8 	ld.d	r8,r7[-56]
80008ea6:	f0 16 00 0c 	mcall	r6[48]
80008eaa:	14 98       	mov	r8,r10
80008eac:	16 99       	mov	r9,r11
80008eae:	ee e9 ff d8 	st.d	r7[-40],r8

		centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * velxy;
80008eb2:	ec f8 00 00 	ld.w	r8,r6[0]
80008eb6:	70 08       	ld.w	r8,r8[0x0]
80008eb8:	ef 48 ff 98 	st.w	r7[-104],r8
80008ebc:	ee f5 ff bc 	ld.w	r5,r7[-68]
80008ec0:	ec f8 00 00 	ld.w	r8,r6[0]
80008ec4:	70 0a       	ld.w	r10,r8[0x0]
80008ec6:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008eca:	12 98       	mov	r8,r9
80008ecc:	a1 78       	lsl	r8,0x1
80008ece:	12 08       	add	r8,r9
80008ed0:	a3 78       	lsl	r8,0x3
80008ed2:	f4 08 00 08 	add	r8,r10,r8
80008ed6:	f0 c8 f8 5c 	sub	r8,r8,-1956
80008eda:	f0 e2 00 00 	ld.d	r2,r8[0]
80008ede:	ee e8 ff c0 	ld.d	r8,r7[-64]
80008ee2:	ee ea ff d0 	ld.d	r10,r7[-48]
80008ee6:	f0 16 00 03 	mcall	r6[12]
80008eea:	14 98       	mov	r8,r10
80008eec:	16 99       	mov	r9,r11
80008eee:	04 9a       	mov	r10,r2
80008ef0:	06 9b       	mov	r11,r3
80008ef2:	f0 16 00 05 	mcall	r6[20]
80008ef6:	14 98       	mov	r8,r10
80008ef8:	16 99       	mov	r9,r11
80008efa:	10 9a       	mov	r10,r8
80008efc:	12 9b       	mov	r11,r9
80008efe:	0a 98       	mov	r8,r5
80008f00:	a1 78       	lsl	r8,0x1
80008f02:	0a 08       	add	r8,r5
80008f04:	a3 78       	lsl	r8,0x3
80008f06:	ee f9 ff 98 	ld.w	r9,r7[-104]
80008f0a:	f2 08 00 08 	add	r8,r9,r8
80008f0e:	f0 c8 f8 5c 	sub	r8,r8,-1956
80008f12:	f0 eb 00 00 	st.d	r8[0],r10
		centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * velxy;
80008f16:	ec f8 00 00 	ld.w	r8,r6[0]
80008f1a:	70 08       	ld.w	r8,r8[0x0]
80008f1c:	ef 48 ff 9c 	st.w	r7[-100],r8
80008f20:	ee f5 ff bc 	ld.w	r5,r7[-68]
80008f24:	ec f8 00 00 	ld.w	r8,r6[0]
80008f28:	70 0a       	ld.w	r10,r8[0x0]
80008f2a:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008f2e:	12 98       	mov	r8,r9
80008f30:	a1 78       	lsl	r8,0x1
80008f32:	12 08       	add	r8,r9
80008f34:	2f f8       	sub	r8,-1
80008f36:	a3 78       	lsl	r8,0x3
80008f38:	f4 08 00 08 	add	r8,r10,r8
80008f3c:	f0 e2 07 a4 	ld.d	r2,r8[1956]
80008f40:	ee e8 ff c0 	ld.d	r8,r7[-64]
80008f44:	ee ea ff d8 	ld.d	r10,r7[-40]
80008f48:	f0 16 00 03 	mcall	r6[12]
80008f4c:	14 98       	mov	r8,r10
80008f4e:	16 99       	mov	r9,r11
80008f50:	04 9a       	mov	r10,r2
80008f52:	06 9b       	mov	r11,r3
80008f54:	f0 16 00 05 	mcall	r6[20]
80008f58:	14 98       	mov	r8,r10
80008f5a:	16 99       	mov	r9,r11
80008f5c:	10 9a       	mov	r10,r8
80008f5e:	12 9b       	mov	r11,r9
80008f60:	0a 98       	mov	r8,r5
80008f62:	a1 78       	lsl	r8,0x1
80008f64:	0a 08       	add	r8,r5
80008f66:	2f f8       	sub	r8,-1
80008f68:	a3 78       	lsl	r8,0x3
80008f6a:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80008f6e:	f2 08 00 08 	add	r8,r9,r8
80008f72:	f0 eb 07 a4 	st.d	r8[1956],r10

		P11 = -K1 * P[axis][1][0] + P[axis][0][0];
80008f76:	ee f8 ff d0 	ld.w	r8,r7[-48]
80008f7a:	10 99       	mov	r9,r8
80008f7c:	ee 19 80 00 	eorh	r9,0x8000
80008f80:	ef 49 ff a0 	st.w	r7[-96],r9
80008f84:	ee f8 ff d4 	ld.w	r8,r7[-44]
80008f88:	ef 48 ff a4 	st.w	r7[-92],r8
80008f8c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008f90:	ec fa 00 18 	ld.w	r10,r6[24]
80008f94:	12 98       	mov	r8,r9
80008f96:	a3 78       	lsl	r8,0x3
80008f98:	12 08       	add	r8,r9
80008f9a:	a3 78       	lsl	r8,0x3
80008f9c:	f4 08 00 08 	add	r8,r10,r8
80008fa0:	2e 88       	sub	r8,-24
80008fa2:	f0 e8 00 00 	ld.d	r8,r8[0]
80008fa6:	ee ea ff a0 	ld.d	r10,r7[-96]
80008faa:	f0 16 00 03 	mcall	r6[12]
80008fae:	14 98       	mov	r8,r10
80008fb0:	16 99       	mov	r9,r11
80008fb2:	10 9a       	mov	r10,r8
80008fb4:	12 9b       	mov	r11,r9
80008fb6:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008fba:	ec fc 00 18 	ld.w	r12,r6[24]
80008fbe:	12 98       	mov	r8,r9
80008fc0:	a3 78       	lsl	r8,0x3
80008fc2:	12 08       	add	r8,r9
80008fc4:	a3 78       	lsl	r8,0x3
80008fc6:	f8 08 00 08 	add	r8,r12,r8
80008fca:	f0 e8 00 00 	ld.d	r8,r8[0]
80008fce:	f0 16 00 05 	mcall	r6[20]
80008fd2:	14 98       	mov	r8,r10
80008fd4:	16 99       	mov	r9,r11
80008fd6:	ee e9 ff e0 	st.d	r7[-32],r8
		P12 = -K1 * P[axis][1][1] + P[axis][0][1];
80008fda:	ee f8 ff d0 	ld.w	r8,r7[-48]
80008fde:	10 99       	mov	r9,r8
80008fe0:	ee 19 80 00 	eorh	r9,0x8000
80008fe4:	ef 49 ff a8 	st.w	r7[-88],r9
80008fe8:	ee f8 ff d4 	ld.w	r8,r7[-44]
80008fec:	ef 48 ff ac 	st.w	r7[-84],r8
80008ff0:	ee f9 ff bc 	ld.w	r9,r7[-68]
80008ff4:	ec fa 00 18 	ld.w	r10,r6[24]
80008ff8:	12 98       	mov	r8,r9
80008ffa:	a3 78       	lsl	r8,0x3
80008ffc:	12 08       	add	r8,r9
80008ffe:	a3 78       	lsl	r8,0x3
80009000:	f4 08 00 08 	add	r8,r10,r8
80009004:	2e 08       	sub	r8,-32
80009006:	f0 e8 00 00 	ld.d	r8,r8[0]
8000900a:	ee ea ff a8 	ld.d	r10,r7[-88]
8000900e:	f0 16 00 03 	mcall	r6[12]
80009012:	14 98       	mov	r8,r10
80009014:	16 99       	mov	r9,r11
80009016:	10 9a       	mov	r10,r8
80009018:	12 9b       	mov	r11,r9
8000901a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000901e:	ec fc 00 18 	ld.w	r12,r6[24]
80009022:	12 98       	mov	r8,r9
80009024:	a3 78       	lsl	r8,0x3
80009026:	12 08       	add	r8,r9
80009028:	2f f8       	sub	r8,-1
8000902a:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000902e:	f0 16 00 05 	mcall	r6[20]
80009032:	14 98       	mov	r8,r10
80009034:	16 99       	mov	r9,r11
80009036:	ee e9 ff e8 	st.d	r7[-24],r8
		P21 = (1.0 - K2) * P[axis][1][0];
8000903a:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000903e:	30 0a       	mov	r10,0
80009040:	fc 1b 3f f0 	movh	r11,0x3ff0
80009044:	f0 16 00 11 	mcall	r6[68]
80009048:	14 98       	mov	r8,r10
8000904a:	16 99       	mov	r9,r11
8000904c:	10 9a       	mov	r10,r8
8000904e:	12 9b       	mov	r11,r9
80009050:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009054:	ec fc 00 18 	ld.w	r12,r6[24]
80009058:	12 98       	mov	r8,r9
8000905a:	a3 78       	lsl	r8,0x3
8000905c:	12 08       	add	r8,r9
8000905e:	a3 78       	lsl	r8,0x3
80009060:	f8 08 00 08 	add	r8,r12,r8
80009064:	2e 88       	sub	r8,-24
80009066:	f0 e8 00 00 	ld.d	r8,r8[0]
8000906a:	f0 16 00 03 	mcall	r6[12]
8000906e:	14 98       	mov	r8,r10
80009070:	16 99       	mov	r9,r11
80009072:	ee e9 ff f0 	st.d	r7[-16],r8
		P22 = (1.0 - K2) * P[axis][1][1];
80009076:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000907a:	30 0a       	mov	r10,0
8000907c:	fc 1b 3f f0 	movh	r11,0x3ff0
80009080:	f0 16 00 11 	mcall	r6[68]
80009084:	14 98       	mov	r8,r10
80009086:	16 99       	mov	r9,r11
80009088:	10 9a       	mov	r10,r8
8000908a:	12 9b       	mov	r11,r9
8000908c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009090:	ec fc 00 18 	ld.w	r12,r6[24]
80009094:	12 98       	mov	r8,r9
80009096:	a3 78       	lsl	r8,0x3
80009098:	12 08       	add	r8,r9
8000909a:	a3 78       	lsl	r8,0x3
8000909c:	f8 08 00 08 	add	r8,r12,r8
800090a0:	2e 08       	sub	r8,-32
800090a2:	f0 e8 00 00 	ld.d	r8,r8[0]
800090a6:	f0 16 00 03 	mcall	r6[12]
800090aa:	14 98       	mov	r8,r10
800090ac:	16 99       	mov	r9,r11
800090ae:	ee e9 ff f8 	st.d	r7[-8],r8

		P[axis][0][0] = P11;
800090b2:	ee f9 ff bc 	ld.w	r9,r7[-68]
800090b6:	ec fa 00 18 	ld.w	r10,r6[24]
800090ba:	12 98       	mov	r8,r9
800090bc:	a3 78       	lsl	r8,0x3
800090be:	12 08       	add	r8,r9
800090c0:	a3 78       	lsl	r8,0x3
800090c2:	10 0a       	add	r10,r8
800090c4:	ee e8 ff e0 	ld.d	r8,r7[-32]
800090c8:	f4 e9 00 00 	st.d	r10[0],r8
		P[axis][0][1] = P12;
800090cc:	ee f9 ff bc 	ld.w	r9,r7[-68]
800090d0:	ec fa 00 18 	ld.w	r10,r6[24]
800090d4:	12 98       	mov	r8,r9
800090d6:	a3 78       	lsl	r8,0x3
800090d8:	12 08       	add	r8,r9
800090da:	f0 cb ff ff 	sub	r11,r8,-1
800090de:	ee e8 ff e8 	ld.d	r8,r7[-24]
800090e2:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
		P[axis][1][0] = P21;
800090e6:	ee f9 ff bc 	ld.w	r9,r7[-68]
800090ea:	ec fa 00 18 	ld.w	r10,r6[24]
800090ee:	12 98       	mov	r8,r9
800090f0:	a3 78       	lsl	r8,0x3
800090f2:	12 08       	add	r8,r9
800090f4:	a3 78       	lsl	r8,0x3
800090f6:	f4 08 00 08 	add	r8,r10,r8
800090fa:	f0 ca ff e8 	sub	r10,r8,-24
800090fe:	ee e8 ff f0 	ld.d	r8,r7[-16]
80009102:	f4 e9 00 00 	st.d	r10[0],r8
		P[axis][1][1] = P22;
80009106:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000910a:	ec fa 00 18 	ld.w	r10,r6[24]
8000910e:	12 98       	mov	r8,r9
80009110:	a3 78       	lsl	r8,0x3
80009112:	12 08       	add	r8,r9
80009114:	a3 78       	lsl	r8,0x3
80009116:	f4 08 00 08 	add	r8,r10,r8
8000911a:	f0 ca ff e0 	sub	r10,r8,-32
8000911e:	ee e8 ff f8 	ld.d	r8,r7[-8]
80009122:	f4 e9 00 00 	st.d	r10[0],r8
		
		/*************************************************************************************/
		velxy = speed_meas - centralData->position_estimator.vel[axis];
80009126:	ec f8 00 00 	ld.w	r8,r6[0]
8000912a:	70 08       	ld.w	r8,r8[0x0]
8000912c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009130:	f2 c9 fd 91 	sub	r9,r9,-623
80009134:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80009138:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000913c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80009140:	10 9c       	mov	r12,r8
80009142:	f0 16 00 02 	mcall	r6[8]
80009146:	14 98       	mov	r8,r10
80009148:	16 99       	mov	r9,r11
8000914a:	ee e9 ff c0 	st.d	r7[-64],r8
		
		S = P2[axis][1][1] + R2[axis];
8000914e:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009152:	ec fa 00 1c 	ld.w	r10,r6[28]
80009156:	12 98       	mov	r8,r9
80009158:	a3 78       	lsl	r8,0x3
8000915a:	12 08       	add	r8,r9
8000915c:	a3 78       	lsl	r8,0x3
8000915e:	f4 08 00 08 	add	r8,r10,r8
80009162:	2e 08       	sub	r8,-32
80009164:	f0 ea 00 00 	ld.d	r10,r8[0]
80009168:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000916c:	ec f8 01 70 	ld.w	r8,r6[368]
80009170:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80009174:	f0 16 00 05 	mcall	r6[20]
80009178:	14 98       	mov	r8,r10
8000917a:	16 99       	mov	r9,r11
8000917c:	ee e9 ff c8 	st.d	r7[-56],r8
		K1 = P2[axis][0][1] * 1/S;
80009180:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009184:	ec fa 00 1c 	ld.w	r10,r6[28]
80009188:	12 98       	mov	r8,r9
8000918a:	a3 78       	lsl	r8,0x3
8000918c:	12 08       	add	r8,r9
8000918e:	2f f8       	sub	r8,-1
80009190:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
80009194:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009198:	f0 16 00 0c 	mcall	r6[48]
8000919c:	14 98       	mov	r8,r10
8000919e:	16 99       	mov	r9,r11
800091a0:	ee e9 ff d0 	st.d	r7[-48],r8
		K2 = P2[axis][1][1] * 1/S;
800091a4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800091a8:	ec fa 00 1c 	ld.w	r10,r6[28]
800091ac:	12 98       	mov	r8,r9
800091ae:	a3 78       	lsl	r8,0x3
800091b0:	12 08       	add	r8,r9
800091b2:	a3 78       	lsl	r8,0x3
800091b4:	f4 08 00 08 	add	r8,r10,r8
800091b8:	2e 08       	sub	r8,-32
800091ba:	f0 ea 00 00 	ld.d	r10,r8[0]
800091be:	ee e8 ff c8 	ld.d	r8,r7[-56]
800091c2:	f0 16 00 0c 	mcall	r6[48]
800091c6:	14 98       	mov	r8,r10
800091c8:	16 99       	mov	r9,r11
800091ca:	ee e9 ff d8 	st.d	r7[-40],r8
		
		//centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * velxy;
		//centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * velxy;
		
		P11 = -K1 * P2[axis][1][0] + P2[axis][0][0];
800091ce:	ee f8 ff d0 	ld.w	r8,r7[-48]
800091d2:	10 99       	mov	r9,r8
800091d4:	ee 19 80 00 	eorh	r9,0x8000
800091d8:	ef 49 ff b0 	st.w	r7[-80],r9
800091dc:	ee f8 ff d4 	ld.w	r8,r7[-44]
800091e0:	ef 48 ff b4 	st.w	r7[-76],r8
800091e4:	ee f9 ff bc 	ld.w	r9,r7[-68]
800091e8:	ec fa 00 1c 	ld.w	r10,r6[28]
800091ec:	12 98       	mov	r8,r9
800091ee:	a3 78       	lsl	r8,0x3
800091f0:	12 08       	add	r8,r9
800091f2:	a3 78       	lsl	r8,0x3
800091f4:	f4 08 00 08 	add	r8,r10,r8
800091f8:	2e 88       	sub	r8,-24
800091fa:	f0 e8 00 00 	ld.d	r8,r8[0]
800091fe:	ee ea ff b0 	ld.d	r10,r7[-80]
80009202:	f0 16 00 03 	mcall	r6[12]
80009206:	14 98       	mov	r8,r10
80009208:	16 99       	mov	r9,r11
8000920a:	10 9a       	mov	r10,r8
8000920c:	12 9b       	mov	r11,r9
8000920e:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009212:	ec fc 00 1c 	ld.w	r12,r6[28]
80009216:	12 98       	mov	r8,r9
80009218:	a3 78       	lsl	r8,0x3
8000921a:	12 08       	add	r8,r9
8000921c:	a3 78       	lsl	r8,0x3
8000921e:	f8 08 00 08 	add	r8,r12,r8
80009222:	f0 e8 00 00 	ld.d	r8,r8[0]
80009226:	f0 16 00 05 	mcall	r6[20]
8000922a:	14 98       	mov	r8,r10
8000922c:	16 99       	mov	r9,r11
8000922e:	ee e9 ff e0 	st.d	r7[-32],r8
		P12 = -K1 * P2[axis][1][1] + P2[axis][0][1];
80009232:	ee f8 ff d0 	ld.w	r8,r7[-48]
80009236:	10 91       	mov	r1,r8
80009238:	ee 11 80 00 	eorh	r1,0x8000
8000923c:	ee f0 ff d4 	ld.w	r0,r7[-44]
80009240:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009244:	ec fa 00 1c 	ld.w	r10,r6[28]
80009248:	12 98       	mov	r8,r9
8000924a:	a3 78       	lsl	r8,0x3
8000924c:	12 08       	add	r8,r9
8000924e:	a3 78       	lsl	r8,0x3
80009250:	f4 08 00 08 	add	r8,r10,r8
80009254:	2e 08       	sub	r8,-32
80009256:	f0 e8 00 00 	ld.d	r8,r8[0]
8000925a:	00 9a       	mov	r10,r0
8000925c:	02 9b       	mov	r11,r1
8000925e:	f0 16 00 03 	mcall	r6[12]
80009262:	14 98       	mov	r8,r10
80009264:	16 99       	mov	r9,r11
80009266:	10 9a       	mov	r10,r8
80009268:	12 9b       	mov	r11,r9
8000926a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000926e:	ec fc 00 1c 	ld.w	r12,r6[28]
80009272:	12 98       	mov	r8,r9
80009274:	a3 78       	lsl	r8,0x3
80009276:	12 08       	add	r8,r9
80009278:	2f f8       	sub	r8,-1
8000927a:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000927e:	f0 16 00 05 	mcall	r6[20]
80009282:	14 98       	mov	r8,r10
80009284:	16 99       	mov	r9,r11
80009286:	ee e9 ff e8 	st.d	r7[-24],r8
		P21 = (1.0 - K2) * P2[axis][1][0];
8000928a:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000928e:	30 0a       	mov	r10,0
80009290:	fc 1b 3f f0 	movh	r11,0x3ff0
80009294:	f0 16 00 11 	mcall	r6[68]
80009298:	14 98       	mov	r8,r10
8000929a:	16 99       	mov	r9,r11
8000929c:	10 9a       	mov	r10,r8
8000929e:	12 9b       	mov	r11,r9
800092a0:	ee f9 ff bc 	ld.w	r9,r7[-68]
800092a4:	ec fc 00 1c 	ld.w	r12,r6[28]
800092a8:	12 98       	mov	r8,r9
800092aa:	a3 78       	lsl	r8,0x3
800092ac:	12 08       	add	r8,r9
800092ae:	a3 78       	lsl	r8,0x3
800092b0:	f8 08 00 08 	add	r8,r12,r8
800092b4:	2e 88       	sub	r8,-24
800092b6:	f0 e8 00 00 	ld.d	r8,r8[0]
800092ba:	f0 16 00 03 	mcall	r6[12]
800092be:	14 98       	mov	r8,r10
800092c0:	16 99       	mov	r9,r11
800092c2:	ee e9 ff f0 	st.d	r7[-16],r8
		P22 = (1.0 - K2) * P2[axis][1][1];
800092c6:	ee e8 ff d8 	ld.d	r8,r7[-40]
800092ca:	30 0a       	mov	r10,0
800092cc:	fc 1b 3f f0 	movh	r11,0x3ff0
800092d0:	f0 16 00 11 	mcall	r6[68]
800092d4:	14 98       	mov	r8,r10
800092d6:	16 99       	mov	r9,r11
800092d8:	10 9a       	mov	r10,r8
800092da:	12 9b       	mov	r11,r9
800092dc:	ee f9 ff bc 	ld.w	r9,r7[-68]
800092e0:	ec fc 00 1c 	ld.w	r12,r6[28]
800092e4:	12 98       	mov	r8,r9
800092e6:	a3 78       	lsl	r8,0x3
800092e8:	12 08       	add	r8,r9
800092ea:	a3 78       	lsl	r8,0x3
800092ec:	f8 08 00 08 	add	r8,r12,r8
800092f0:	2e 08       	sub	r8,-32
800092f2:	f0 e8 00 00 	ld.d	r8,r8[0]
800092f6:	f0 16 00 03 	mcall	r6[12]
800092fa:	14 98       	mov	r8,r10
800092fc:	16 99       	mov	r9,r11
800092fe:	ee e9 ff f8 	st.d	r7[-8],r8

		P2[axis][0][0] = P11;
80009302:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009306:	ec fa 00 1c 	ld.w	r10,r6[28]
8000930a:	12 98       	mov	r8,r9
8000930c:	a3 78       	lsl	r8,0x3
8000930e:	12 08       	add	r8,r9
80009310:	a3 78       	lsl	r8,0x3
80009312:	10 0a       	add	r10,r8
80009314:	ee e8 ff e0 	ld.d	r8,r7[-32]
80009318:	f4 e9 00 00 	st.d	r10[0],r8
		P2[axis][0][1] = P12;
8000931c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009320:	ec fa 00 1c 	ld.w	r10,r6[28]
80009324:	12 98       	mov	r8,r9
80009326:	a3 78       	lsl	r8,0x3
80009328:	12 08       	add	r8,r9
8000932a:	f0 cb ff ff 	sub	r11,r8,-1
8000932e:	ee e8 ff e8 	ld.d	r8,r7[-24]
80009332:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
		P2[axis][1][0] = P21;
80009336:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000933a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000933e:	12 98       	mov	r8,r9
80009340:	a3 78       	lsl	r8,0x3
80009342:	12 08       	add	r8,r9
80009344:	a3 78       	lsl	r8,0x3
80009346:	f4 08 00 08 	add	r8,r10,r8
8000934a:	f0 ca ff e8 	sub	r10,r8,-24
8000934e:	ee e8 ff f0 	ld.d	r8,r7[-16]
80009352:	f4 e9 00 00 	st.d	r10[0],r8
		P2[axis][1][1] = P22;
80009356:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000935a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000935e:	12 98       	mov	r8,r9
80009360:	a3 78       	lsl	r8,0x3
80009362:	12 08       	add	r8,r9
80009364:	a3 78       	lsl	r8,0x3
80009366:	f4 08 00 08 	add	r8,r10,r8
8000936a:	f0 ca ff e0 	sub	r10,r8,-32
8000936e:	ee e8 ff f8 	ld.d	r8,r7[-8]
80009372:	f4 e9 00 00 	st.d	r10[0],r8
}
80009376:	2e 6d       	sub	sp,-104
80009378:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000937c:	80 00       	ld.sh	r0,r0[0x0]
8000937e:	8c 7c       	ld.sh	r12,r6[0xe]

80009380 <estimator_loop>:

//--------------------------------GLOBAL--------------------------
void estimator_loop()
{
80009380:	eb cd 40 e0 	pushm	r5-r7,lr
80009384:	1a 97       	mov	r7,sp
80009386:	21 dd       	sub	sp,116
80009388:	fe f6 02 00 	ld.w	r6,pc[512]
8000938c:	1e 26       	rsub	r6,pc
	
	global_position_t global_gps_position;
	local_coordinates_t local_coordinates;
	//static uint32_t dt_baro,time_before_baro;
	
	if (!centralData->position_estimator.init_gps_position)
8000938e:	ec f8 00 00 	ld.w	r8,r6[0]
80009392:	70 08       	ld.w	r8,r8[0x0]
80009394:	f1 38 09 ac 	ld.ub	r8,r8[2476]
80009398:	ec 18 00 01 	eorl	r8,0x1
8000939c:	5c 58       	castu.b	r8
8000939e:	c0 30       	breq	800093a4 <estimator_loop+0x24>
	{
		init_pos_gps_estimator();
800093a0:	f0 16 01 1c 	mcall	r6[1136]
	}

	if(!filter_init_delta_t)
800093a4:	ec f8 02 f4 	ld.w	r8,r6[756]
800093a8:	11 88       	ld.ub	r8,r8[0x0]
800093aa:	ec 18 00 01 	eorl	r8,0x1
800093ae:	5c 58       	castu.b	r8
800093b0:	c0 c0       	breq	800093c8 <estimator_loop+0x48>
	{
		filter_init_delta_t = true;
800093b2:	ec f9 02 f4 	ld.w	r9,r6[756]
800093b6:	30 18       	mov	r8,1
800093b8:	b2 88       	st.b	r9[0x0],r8
		prev_time = get_micros();
800093ba:	f0 16 00 29 	mcall	r6[164]
800093be:	18 99       	mov	r9,r12
800093c0:	ec f8 02 f0 	ld.w	r8,r6[752]
800093c4:	91 09       	st.w	r8[0x0],r9
800093c6:	cd e8       	rjmp	80009582 <estimator_loop+0x202>
	}else{
		actual_time = get_micros();
800093c8:	f0 16 00 29 	mcall	r6[164]
800093cc:	18 98       	mov	r8,r12
800093ce:	ef 48 ff fc 	st.w	r7[-4],r8
		centralData->estimation.delta_t_filter = (float)(actual_time-prev_time);
800093d2:	ec f8 00 00 	ld.w	r8,r6[0]
800093d6:	70 08       	ld.w	r8,r8[0x0]
800093d8:	ec f9 02 f0 	ld.w	r9,r6[752]
800093dc:	72 09       	ld.w	r9,r9[0x0]
800093de:	ee fa ff fc 	ld.w	r10,r7[-4]
800093e2:	f4 09 01 09 	sub	r9,r10,r9
800093e6:	e5 a4 09 09 	cop	cp0,cr9,cr0,cr9,0x48
800093ea:	f1 49 07 ec 	st.w	r8[2028],r9
		prev_time = actual_time;
800093ee:	ec f8 02 f0 	ld.w	r8,r6[752]
800093f2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800093f6:	91 09       	st.w	r8[0x0],r9
		centralData->estimation.delta_t_filter /= 1000000.0;
800093f8:	ec f8 00 00 	ld.w	r8,r6[0]
800093fc:	70 05       	ld.w	r5,r8[0x0]
800093fe:	ec f8 00 00 	ld.w	r8,r6[0]
80009402:	70 08       	ld.w	r8,r8[0x0]
80009404:	f0 f8 07 ec 	ld.w	r8,r8[2028]
80009408:	e0 6b 24 00 	mov	r11,9216
8000940c:	ea 1b 49 74 	orh	r11,0x4974
80009410:	10 9c       	mov	r12,r8
80009412:	f0 16 00 08 	mcall	r6[32]
80009416:	18 98       	mov	r8,r12
80009418:	eb 48 07 ec 	st.w	r5[2028],r8
		
		e_predict(&(centralData->imu1.attitude.qe),centralData->imu1.attitude.acc_bf,centralData->estimation.delta_t_filter);
8000941c:	ec f8 00 00 	ld.w	r8,r6[0]
80009420:	70 08       	ld.w	r8,r8[0x0]
80009422:	f0 fa 07 ec 	ld.w	r10,r8[2028]
80009426:	ec f8 00 00 	ld.w	r8,r6[0]
8000942a:	70 08       	ld.w	r8,r8[0x0]
8000942c:	f0 c9 ff 40 	sub	r9,r8,-192
80009430:	ec f8 00 00 	ld.w	r8,r6[0]
80009434:	70 08       	ld.w	r8,r8[0x0]
80009436:	12 9b       	mov	r11,r9
80009438:	10 9c       	mov	r12,r8
8000943a:	f0 16 01 e6 	mcall	r6[1944]
		
		//Check new values from GPS/Baro, if yes, update
		if (newValidGpsMsg(&timeLastGpsMsgEstimator) && centralData->position_estimator.init_gps_position && (centralData->simulation_mode == 0))
8000943e:	ec fc 02 ac 	ld.w	r12,r6[684]
80009442:	f0 16 00 9a 	mcall	r6[616]
80009446:	18 98       	mov	r8,r12
80009448:	58 08       	cp.w	r8,0
8000944a:	e0 80 00 9c 	breq	80009582 <estimator_loop+0x202>
8000944e:	ec f8 00 00 	ld.w	r8,r6[0]
80009452:	70 08       	ld.w	r8,r8[0x0]
80009454:	f1 38 09 ac 	ld.ub	r8,r8[2476]
80009458:	58 08       	cp.w	r8,0
8000945a:	e0 80 00 94 	breq	80009582 <estimator_loop+0x202>
8000945e:	ec f8 00 00 	ld.w	r8,r6[0]
80009462:	70 08       	ld.w	r8,r8[0x0]
80009464:	f0 f8 0d 08 	ld.w	r8,r8[3336]
80009468:	58 08       	cp.w	r8,0
8000946a:	e0 81 00 8c 	brne	80009582 <estimator_loop+0x202>
			//latitude_rad= ((double) (centralData->GPS_data.latitude-init_lat))*DEGREE_TO_RADIAN; //in rad E+7
			//pos_y= (float) (((double) (centralData->GPS_data.longitude-init_long)*EARTH_RADIUS)*DEGREE_TO_RADIAN*(COS_PI_4-COS_PI_4*(centralData->GPS_data.latitude*DEGREE_TO_RADIAN*0.0000001-PI_4)-COS_PI_4*0.5*(centralData->GPS_data.latitude*DEGREE_TO_RADIAN*0.0000001-PI_4)*(centralData->GPS_data.latitude*DEGREE_TO_RADIAN*0.0000001-PI_4)));//Taylor 2nd order cos() approx
			//pos_x= (float) (latitude_rad*EARTH_RADIUS);
			//pos_z= -centralData->GPS_data.altitude+init_alt;
			
			global_gps_position.longitude = centralData->GPS_data.longitude;
8000946e:	ec f8 00 00 	ld.w	r8,r6[0]
80009472:	70 08       	ld.w	r8,r8[0x0]
80009474:	f0 e8 07 58 	ld.d	r8,r8[1880]
80009478:	ee e9 ff bc 	st.d	r7[-68],r8
			global_gps_position.latitude = centralData->GPS_data.latitude;
8000947c:	ec f8 00 00 	ld.w	r8,r6[0]
80009480:	70 08       	ld.w	r8,r8[0x0]
80009482:	f0 e8 07 50 	ld.d	r8,r8[1872]
80009486:	ee e9 ff c4 	st.d	r7[-60],r8
			global_gps_position.altitude = centralData->GPS_data.altitude;
8000948a:	ec f8 00 00 	ld.w	r8,r6[0]
8000948e:	70 08       	ld.w	r8,r8[0x0]
80009490:	f0 f8 07 60 	ld.w	r8,r8[1888]
80009494:	ef 48 ff cc 	st.w	r7[-52],r8
			
			local_coordinates = global_to_local_position(global_gps_position,centralData->position_estimator.localPosition.origin);
80009498:	ec f8 00 00 	ld.w	r8,r6[0]
8000949c:	70 08       	ld.w	r8,r8[0x0]
8000949e:	ee cc 00 74 	sub	r12,r7,116
800094a2:	20 7d       	sub	sp,28
800094a4:	1a 99       	mov	r9,sp
800094a6:	12 9a       	mov	r10,r9
800094a8:	f0 cb f6 0c 	sub	r11,r8,-2548
800094ac:	f4 c8 00 00 	sub	r8,r10,0
800094b0:	f6 c9 00 00 	sub	r9,r11,0
800094b4:	72 0e       	ld.w	lr,r9[0x0]
800094b6:	91 0e       	st.w	r8[0x0],lr
800094b8:	72 1e       	ld.w	lr,r9[0x4]
800094ba:	91 1e       	st.w	r8[0x4],lr
800094bc:	72 2e       	ld.w	lr,r9[0x8]
800094be:	91 2e       	st.w	r8[0x8],lr
800094c0:	72 39       	ld.w	r9,r9[0xc]
800094c2:	91 39       	st.w	r8[0xc],r9
800094c4:	f6 e8 00 10 	ld.d	r8,r11[16]
800094c8:	f4 e9 00 10 	st.d	r10[16],r8
800094cc:	76 68       	ld.w	r8,r11[0x18]
800094ce:	95 68       	st.w	r10[0x18],r8
800094d0:	20 7d       	sub	sp,28
800094d2:	1a 98       	mov	r8,sp
800094d4:	10 9a       	mov	r10,r8
800094d6:	ee cb 00 44 	sub	r11,r7,68
800094da:	f4 c8 00 00 	sub	r8,r10,0
800094de:	f6 c9 00 00 	sub	r9,r11,0
800094e2:	72 0e       	ld.w	lr,r9[0x0]
800094e4:	91 0e       	st.w	r8[0x0],lr
800094e6:	72 1e       	ld.w	lr,r9[0x4]
800094e8:	91 1e       	st.w	r8[0x4],lr
800094ea:	72 2e       	ld.w	lr,r9[0x8]
800094ec:	91 2e       	st.w	r8[0x8],lr
800094ee:	72 39       	ld.w	r9,r9[0xc]
800094f0:	91 39       	st.w	r8[0xc],r9
800094f2:	f6 e8 00 10 	ld.d	r8,r11[16]
800094f6:	f4 e9 00 10 	st.d	r10[16],r8
800094fa:	76 68       	ld.w	r8,r11[0x18]
800094fc:	95 68       	st.w	r10[0x18],r8
800094fe:	f0 16 00 7f 	mcall	r6[508]
80009502:	2f 2d       	sub	sp,-56
			
			//get delay of GPS measure
			//do prediction up to the corresponding delay
			
			e_kalman_update_position(X,local_coordinates.pos[X]);
80009504:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80009508:	10 9c       	mov	r12,r8
8000950a:	f0 16 00 02 	mcall	r6[8]
8000950e:	14 98       	mov	r8,r10
80009510:	16 99       	mov	r9,r11
80009512:	10 9a       	mov	r10,r8
80009514:	12 9b       	mov	r11,r9
80009516:	30 0c       	mov	r12,0
80009518:	f0 16 00 d3 	mcall	r6[844]
			e_kalman_update_position(Y,local_coordinates.pos[Y]);
8000951c:	ee f8 ff 90 	ld.w	r8,r7[-112]
80009520:	10 9c       	mov	r12,r8
80009522:	f0 16 00 02 	mcall	r6[8]
80009526:	14 98       	mov	r8,r10
80009528:	16 99       	mov	r9,r11
8000952a:	10 9a       	mov	r10,r8
8000952c:	12 9b       	mov	r11,r9
8000952e:	30 1c       	mov	r12,1
80009530:	f0 16 00 d3 	mcall	r6[844]
			//e_kalman_update_position_hf(X,local_coordinates.pos[X]);
			//e_kalman_update_position_hf(Y,local_coordinates.pos[Y]);
			e_kalman_update_position(Z,local_coordinates.pos[Z]);
80009534:	ee f8 ff 94 	ld.w	r8,r7[-108]
80009538:	10 9c       	mov	r12,r8
8000953a:	f0 16 00 02 	mcall	r6[8]
8000953e:	14 98       	mov	r8,r10
80009540:	16 99       	mov	r9,r11
80009542:	10 9a       	mov	r10,r8
80009544:	12 9b       	mov	r11,r9
80009546:	30 2c       	mov	r12,2
80009548:	f0 16 00 d3 	mcall	r6[844]
			
			e_kalman_update_speed(X,centralData->GPS_data.northSpeed);
8000954c:	ec f8 00 00 	ld.w	r8,r6[0]
80009550:	70 08       	ld.w	r8,r8[0x0]
80009552:	f0 f8 07 70 	ld.w	r8,r8[1904]
80009556:	10 9b       	mov	r11,r8
80009558:	30 0c       	mov	r12,0
8000955a:	f0 16 00 af 	mcall	r6[700]
			e_kalman_update_speed(Y,centralData->GPS_data.eastSpeed);
8000955e:	ec f8 00 00 	ld.w	r8,r6[0]
80009562:	70 08       	ld.w	r8,r8[0x0]
80009564:	f0 f8 07 74 	ld.w	r8,r8[1908]
80009568:	10 9b       	mov	r11,r8
8000956a:	30 1c       	mov	r12,1
8000956c:	f0 16 00 af 	mcall	r6[700]
			//e_kalman_update_speed_hf(X,centralData->GPS_data.northSpeed);
			//e_kalman_update_speed_hf(Y,centralData->GPS_data.eastSpeed);
			e_kalman_update_speed(Z,centralData->GPS_data.verticalSpeed);
80009570:	ec f8 00 00 	ld.w	r8,r6[0]
80009574:	70 08       	ld.w	r8,r8[0x0]
80009576:	f0 f8 07 78 	ld.w	r8,r8[1912]
8000957a:	10 9b       	mov	r11,r8
8000957c:	30 2c       	mov	r12,2
8000957e:	f0 16 00 af 	mcall	r6[700]
		e_kalman_update_position(Z,baro->altitude,dt_baro);
		time_before_baro=get_millis();
		}	*/
		//}
	}
80009582:	2e 3d       	sub	sp,-116
80009584:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80009588:	80 00       	ld.sh	r0,r0[0x0]
8000958a:	92 10       	ld.sh	r0,r9[0x2]

8000958c <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8000958c:	eb cd 40 80 	pushm	r7,lr
80009590:	1a 97       	mov	r7,sp
80009592:	20 3d       	sub	sp,12
80009594:	ef 4c ff f8 	st.w	r7[-8],r12
80009598:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8000959c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800095a0:	70 09       	ld.w	r9,r8[0x0]
800095a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800095a6:	70 08       	ld.w	r8,r8[0x0]
800095a8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800095ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800095b0:	2f c8       	sub	r8,-4
800095b2:	70 0a       	ld.w	r10,r8[0x0]
800095b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800095b8:	2f c8       	sub	r8,-4
800095ba:	70 08       	ld.w	r8,r8[0x0]
800095bc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800095c0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800095c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800095c8:	2f 88       	sub	r8,-8
800095ca:	70 0a       	ld.w	r10,r8[0x0]
800095cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800095d0:	2f 88       	sub	r8,-8
800095d2:	70 08       	ld.w	r8,r8[0x0]
800095d4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800095d8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800095dc:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
800095e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800095e4:	10 9c       	mov	r12,r8
800095e6:	2f dd       	sub	sp,-12
800095e8:	e3 cd 80 80 	ldm	sp++,r7,pc

800095ec <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
800095ec:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800095f0:	1a 97       	mov	r7,sp
800095f2:	20 7d       	sub	sp,28
800095f4:	4b d6       	lddpc	r6,800096e8 <quat_multi+0xfc>
800095f6:	1e 26       	rsub	r6,pc
800095f8:	ee c8 ff ec 	sub	r8,r7,-20
800095fc:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
800095fe:	70 2a       	ld.w	r10,r8[0x8]
80009600:	70 79       	ld.w	r9,r8[0x1c]
80009602:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80009606:	70 3b       	ld.w	r11,r8[0xc]
80009608:	70 69       	ld.w	r9,r8[0x18]
8000960a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000960e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80009612:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
80009616:	70 3a       	ld.w	r10,r8[0xc]
80009618:	70 59       	ld.w	r9,r8[0x14]
8000961a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000961e:	70 1b       	ld.w	r11,r8[0x4]
80009620:	70 79       	ld.w	r9,r8[0x1c]
80009622:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80009626:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000962a:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8000962e:	70 1a       	ld.w	r10,r8[0x4]
80009630:	70 69       	ld.w	r9,r8[0x18]
80009632:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80009636:	70 2b       	ld.w	r11,r8[0x8]
80009638:	70 59       	ld.w	r9,r8[0x14]
8000963a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000963e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80009642:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
80009646:	70 4a       	ld.w	r10,r8[0x10]
80009648:	70 19       	ld.w	r9,r8[0x4]
8000964a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000964e:	70 0b       	ld.w	r11,r8[0x0]
80009650:	70 59       	ld.w	r9,r8[0x14]
80009652:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80009656:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000965a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000965e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80009662:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
80009666:	70 4a       	ld.w	r10,r8[0x10]
80009668:	70 29       	ld.w	r9,r8[0x8]
8000966a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000966e:	70 0b       	ld.w	r11,r8[0x0]
80009670:	70 69       	ld.w	r9,r8[0x18]
80009672:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80009676:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000967a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000967e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80009682:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
80009686:	70 4a       	ld.w	r10,r8[0x10]
80009688:	70 39       	ld.w	r9,r8[0xc]
8000968a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000968e:	70 0b       	ld.w	r11,r8[0x0]
80009690:	70 79       	ld.w	r9,r8[0x1c]
80009692:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80009696:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000969a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000969e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800096a2:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
800096a6:	70 0a       	ld.w	r10,r8[0x0]
800096a8:	70 49       	ld.w	r9,r8[0x10]
800096aa:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
800096ae:	f0 c9 ff f0 	sub	r9,r8,-16
800096b2:	2f c9       	sub	r9,-4
800096b4:	2f c8       	sub	r8,-4
800096b6:	12 9b       	mov	r11,r9
800096b8:	10 9c       	mov	r12,r8
800096ba:	c6 9f       	rcall	8000958c <scalar_product>
800096bc:	18 98       	mov	r8,r12
800096be:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
800096c2:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
800096c6:	0a 98       	mov	r8,r5
800096c8:	ee c9 00 1c 	sub	r9,r7,28
800096cc:	20 08       	sub	r8,0
800096ce:	20 09       	sub	r9,0
800096d0:	72 0a       	ld.w	r10,r9[0x0]
800096d2:	91 0a       	st.w	r8[0x0],r10
800096d4:	72 1a       	ld.w	r10,r9[0x4]
800096d6:	91 1a       	st.w	r8[0x4],r10
800096d8:	72 2a       	ld.w	r10,r9[0x8]
800096da:	91 2a       	st.w	r8[0x8],r10
800096dc:	72 39       	ld.w	r9,r9[0xc]
800096de:	91 39       	st.w	r8[0xc],r9
}
800096e0:	0a 9c       	mov	r12,r5
800096e2:	2f 9d       	sub	sp,-28
800096e4:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800096e8:	80 00       	ld.sh	r0,r0[0x0]
800096ea:	94 7a       	ld.sh	r10,r10[0xe]

800096ec <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
800096ec:	eb cd 40 80 	pushm	r7,lr
800096f0:	1a 97       	mov	r7,sp
800096f2:	20 5d       	sub	sp,20
800096f4:	ee c9 ff f8 	sub	r9,r7,-8
800096f8:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
800096fa:	72 08       	ld.w	r8,r9[0x0]
800096fc:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
80009700:	30 08       	mov	r8,0
80009702:	ef 48 ff fc 	st.w	r7[-4],r8
80009706:	c1 58       	rjmp	80009730 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
80009708:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000970c:	ee fb ff fc 	ld.w	r11,r7[-4]
80009710:	2f fb       	sub	r11,-1
80009712:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
80009716:	ee 1b 80 00 	eorh	r11,0x8000
8000971a:	2f f8       	sub	r8,-1
8000971c:	a3 68       	lsl	r8,0x2
8000971e:	ee 08 00 08 	add	r8,r7,r8
80009722:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
80009726:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000972a:	2f f8       	sub	r8,-1
8000972c:	ef 48 ff fc 	st.w	r7[-4],r8
80009730:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009734:	58 28       	cp.w	r8,2
80009736:	fe 9a ff e9 	brle	80009708 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8000973a:	14 98       	mov	r8,r10
8000973c:	ee c9 00 14 	sub	r9,r7,20
80009740:	20 08       	sub	r8,0
80009742:	20 09       	sub	r9,0
80009744:	72 0b       	ld.w	r11,r9[0x0]
80009746:	91 0b       	st.w	r8[0x0],r11
80009748:	72 1b       	ld.w	r11,r9[0x4]
8000974a:	91 1b       	st.w	r8[0x4],r11
8000974c:	72 2b       	ld.w	r11,r9[0x8]
8000974e:	91 2b       	st.w	r8[0x8],r11
80009750:	72 39       	ld.w	r9,r9[0xc]
80009752:	91 39       	st.w	r8[0xc],r9
}
80009754:	14 9c       	mov	r12,r10
80009756:	2f bd       	sub	sp,-20
80009758:	e3 cd 80 80 	ldm	sp++,r7,pc

8000975c <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
8000975c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80009760:	1a 97       	mov	r7,sp
80009762:	20 cd       	sub	sp,48
80009764:	4b c6       	lddpc	r6,80009854 <quat_global_to_local+0xf8>
80009766:	1e 26       	rsub	r6,pc
80009768:	ee c5 ff ec 	sub	r5,r7,-20
8000976c:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000976e:	ee ca 00 10 	sub	r10,r7,16
80009772:	20 4d       	sub	sp,16
80009774:	1a 98       	mov	r8,sp
80009776:	0a 99       	mov	r9,r5
80009778:	20 08       	sub	r8,0
8000977a:	20 09       	sub	r9,0
8000977c:	72 0b       	ld.w	r11,r9[0x0]
8000977e:	91 0b       	st.w	r8[0x0],r11
80009780:	72 1b       	ld.w	r11,r9[0x4]
80009782:	91 1b       	st.w	r8[0x4],r11
80009784:	72 2b       	ld.w	r11,r9[0x8]
80009786:	91 2b       	st.w	r8[0x8],r11
80009788:	72 39       	ld.w	r9,r9[0xc]
8000978a:	91 39       	st.w	r8[0xc],r9
8000978c:	14 9c       	mov	r12,r10
8000978e:	ca ff       	rcall	800096ec <quat_inv>
80009790:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
80009792:	ee ca 00 20 	sub	r10,r7,32
80009796:	20 4d       	sub	sp,16
80009798:	1a 98       	mov	r8,sp
8000979a:	ea c9 ff f0 	sub	r9,r5,-16
8000979e:	20 08       	sub	r8,0
800097a0:	20 09       	sub	r9,0
800097a2:	72 0b       	ld.w	r11,r9[0x0]
800097a4:	91 0b       	st.w	r8[0x0],r11
800097a6:	72 1b       	ld.w	r11,r9[0x4]
800097a8:	91 1b       	st.w	r8[0x4],r11
800097aa:	72 2b       	ld.w	r11,r9[0x8]
800097ac:	91 2b       	st.w	r8[0x8],r11
800097ae:	72 39       	ld.w	r9,r9[0xc]
800097b0:	91 39       	st.w	r8[0xc],r9
800097b2:	20 4d       	sub	sp,16
800097b4:	1a 98       	mov	r8,sp
800097b6:	ee c9 00 10 	sub	r9,r7,16
800097ba:	20 08       	sub	r8,0
800097bc:	20 09       	sub	r9,0
800097be:	72 0b       	ld.w	r11,r9[0x0]
800097c0:	91 0b       	st.w	r8[0x0],r11
800097c2:	72 1b       	ld.w	r11,r9[0x4]
800097c4:	91 1b       	st.w	r8[0x4],r11
800097c6:	72 2b       	ld.w	r11,r9[0x8]
800097c8:	91 2b       	st.w	r8[0x8],r11
800097ca:	72 39       	ld.w	r9,r9[0xc]
800097cc:	91 39       	st.w	r8[0xc],r9
800097ce:	14 9c       	mov	r12,r10
800097d0:	c0 ef       	rcall	800095ec <quat_multi>
800097d2:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
800097d4:	ee ca 00 30 	sub	r10,r7,48
800097d8:	20 4d       	sub	sp,16
800097da:	1a 98       	mov	r8,sp
800097dc:	0a 99       	mov	r9,r5
800097de:	20 08       	sub	r8,0
800097e0:	20 09       	sub	r9,0
800097e2:	72 0b       	ld.w	r11,r9[0x0]
800097e4:	91 0b       	st.w	r8[0x0],r11
800097e6:	72 1b       	ld.w	r11,r9[0x4]
800097e8:	91 1b       	st.w	r8[0x4],r11
800097ea:	72 2b       	ld.w	r11,r9[0x8]
800097ec:	91 2b       	st.w	r8[0x8],r11
800097ee:	72 39       	ld.w	r9,r9[0xc]
800097f0:	91 39       	st.w	r8[0xc],r9
800097f2:	20 4d       	sub	sp,16
800097f4:	1a 98       	mov	r8,sp
800097f6:	ee c9 00 20 	sub	r9,r7,32
800097fa:	20 08       	sub	r8,0
800097fc:	20 09       	sub	r9,0
800097fe:	72 0b       	ld.w	r11,r9[0x0]
80009800:	91 0b       	st.w	r8[0x0],r11
80009802:	72 1b       	ld.w	r11,r9[0x4]
80009804:	91 1b       	st.w	r8[0x4],r11
80009806:	72 2b       	ld.w	r11,r9[0x8]
80009808:	91 2b       	st.w	r8[0x8],r11
8000980a:	72 39       	ld.w	r9,r9[0xc]
8000980c:	91 39       	st.w	r8[0xc],r9
8000980e:	14 9c       	mov	r12,r10
80009810:	ce ee       	rcall	800095ec <quat_multi>
80009812:	2f 8d       	sub	sp,-32
80009814:	ee c8 00 20 	sub	r8,r7,32
80009818:	ee c9 00 30 	sub	r9,r7,48
8000981c:	20 08       	sub	r8,0
8000981e:	20 09       	sub	r9,0
80009820:	72 0a       	ld.w	r10,r9[0x0]
80009822:	91 0a       	st.w	r8[0x0],r10
80009824:	72 1a       	ld.w	r10,r9[0x4]
80009826:	91 1a       	st.w	r8[0x4],r10
80009828:	72 2a       	ld.w	r10,r9[0x8]
8000982a:	91 2a       	st.w	r8[0x8],r10
8000982c:	72 39       	ld.w	r9,r9[0xc]
8000982e:	91 39       	st.w	r8[0xc],r9

	return qtmp;
80009830:	06 98       	mov	r8,r3
80009832:	ee c9 00 20 	sub	r9,r7,32
80009836:	20 08       	sub	r8,0
80009838:	20 09       	sub	r9,0
8000983a:	72 0a       	ld.w	r10,r9[0x0]
8000983c:	91 0a       	st.w	r8[0x0],r10
8000983e:	72 1a       	ld.w	r10,r9[0x4]
80009840:	91 1a       	st.w	r8[0x4],r10
80009842:	72 2a       	ld.w	r10,r9[0x8]
80009844:	91 2a       	st.w	r8[0x8],r10
80009846:	72 39       	ld.w	r9,r9[0xc]
80009848:	91 39       	st.w	r8[0xc],r9
}
8000984a:	06 9c       	mov	r12,r3
8000984c:	2f 4d       	sub	sp,-48
8000984e:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80009852:	00 00       	add	r0,r0
80009854:	80 00       	ld.sh	r0,r0[0x0]
80009856:	95 ea       	st.w	r10[0x38],r10

80009858 <quat_local_to_global>:

UQuat_t static inline quat_local_to_global(const UQuat_t qe, const UQuat_t qvect)
{
80009858:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000985c:	1a 97       	mov	r7,sp
8000985e:	20 cd       	sub	sp,48
80009860:	4b c6       	lddpc	r6,80009950 <quat_local_to_global+0xf8>
80009862:	1e 26       	rsub	r6,pc
80009864:	ee c5 ff ec 	sub	r5,r7,-20
80009868:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000986a:	ee ca 00 10 	sub	r10,r7,16
8000986e:	20 4d       	sub	sp,16
80009870:	1a 98       	mov	r8,sp
80009872:	0a 99       	mov	r9,r5
80009874:	20 08       	sub	r8,0
80009876:	20 09       	sub	r9,0
80009878:	72 0b       	ld.w	r11,r9[0x0]
8000987a:	91 0b       	st.w	r8[0x0],r11
8000987c:	72 1b       	ld.w	r11,r9[0x4]
8000987e:	91 1b       	st.w	r8[0x4],r11
80009880:	72 2b       	ld.w	r11,r9[0x8]
80009882:	91 2b       	st.w	r8[0x8],r11
80009884:	72 39       	ld.w	r9,r9[0xc]
80009886:	91 39       	st.w	r8[0xc],r9
80009888:	14 9c       	mov	r12,r10
8000988a:	c3 1f       	rcall	800096ec <quat_inv>
8000988c:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qe, qvect);
8000988e:	ee ca 00 20 	sub	r10,r7,32
80009892:	20 4d       	sub	sp,16
80009894:	1a 98       	mov	r8,sp
80009896:	ea c9 ff f0 	sub	r9,r5,-16
8000989a:	20 08       	sub	r8,0
8000989c:	20 09       	sub	r9,0
8000989e:	72 0b       	ld.w	r11,r9[0x0]
800098a0:	91 0b       	st.w	r8[0x0],r11
800098a2:	72 1b       	ld.w	r11,r9[0x4]
800098a4:	91 1b       	st.w	r8[0x4],r11
800098a6:	72 2b       	ld.w	r11,r9[0x8]
800098a8:	91 2b       	st.w	r8[0x8],r11
800098aa:	72 39       	ld.w	r9,r9[0xc]
800098ac:	91 39       	st.w	r8[0xc],r9
800098ae:	20 4d       	sub	sp,16
800098b0:	1a 98       	mov	r8,sp
800098b2:	0a 99       	mov	r9,r5
800098b4:	20 08       	sub	r8,0
800098b6:	20 09       	sub	r9,0
800098b8:	72 0b       	ld.w	r11,r9[0x0]
800098ba:	91 0b       	st.w	r8[0x0],r11
800098bc:	72 1b       	ld.w	r11,r9[0x4]
800098be:	91 1b       	st.w	r8[0x4],r11
800098c0:	72 2b       	ld.w	r11,r9[0x8]
800098c2:	91 2b       	st.w	r8[0x8],r11
800098c4:	72 39       	ld.w	r9,r9[0xc]
800098c6:	91 39       	st.w	r8[0xc],r9
800098c8:	14 9c       	mov	r12,r10
800098ca:	c9 1e       	rcall	800095ec <quat_multi>
800098cc:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp, qinv);
800098ce:	ee ca 00 30 	sub	r10,r7,48
800098d2:	20 4d       	sub	sp,16
800098d4:	1a 98       	mov	r8,sp
800098d6:	ee c9 00 10 	sub	r9,r7,16
800098da:	20 08       	sub	r8,0
800098dc:	20 09       	sub	r9,0
800098de:	72 0b       	ld.w	r11,r9[0x0]
800098e0:	91 0b       	st.w	r8[0x0],r11
800098e2:	72 1b       	ld.w	r11,r9[0x4]
800098e4:	91 1b       	st.w	r8[0x4],r11
800098e6:	72 2b       	ld.w	r11,r9[0x8]
800098e8:	91 2b       	st.w	r8[0x8],r11
800098ea:	72 39       	ld.w	r9,r9[0xc]
800098ec:	91 39       	st.w	r8[0xc],r9
800098ee:	20 4d       	sub	sp,16
800098f0:	1a 98       	mov	r8,sp
800098f2:	ee c9 00 20 	sub	r9,r7,32
800098f6:	20 08       	sub	r8,0
800098f8:	20 09       	sub	r9,0
800098fa:	72 0b       	ld.w	r11,r9[0x0]
800098fc:	91 0b       	st.w	r8[0x0],r11
800098fe:	72 1b       	ld.w	r11,r9[0x4]
80009900:	91 1b       	st.w	r8[0x4],r11
80009902:	72 2b       	ld.w	r11,r9[0x8]
80009904:	91 2b       	st.w	r8[0x8],r11
80009906:	72 39       	ld.w	r9,r9[0xc]
80009908:	91 39       	st.w	r8[0xc],r9
8000990a:	14 9c       	mov	r12,r10
8000990c:	c7 0e       	rcall	800095ec <quat_multi>
8000990e:	2f 8d       	sub	sp,-32
80009910:	ee c8 00 20 	sub	r8,r7,32
80009914:	ee c9 00 30 	sub	r9,r7,48
80009918:	20 08       	sub	r8,0
8000991a:	20 09       	sub	r9,0
8000991c:	72 0a       	ld.w	r10,r9[0x0]
8000991e:	91 0a       	st.w	r8[0x0],r10
80009920:	72 1a       	ld.w	r10,r9[0x4]
80009922:	91 1a       	st.w	r8[0x4],r10
80009924:	72 2a       	ld.w	r10,r9[0x8]
80009926:	91 2a       	st.w	r8[0x8],r10
80009928:	72 39       	ld.w	r9,r9[0xc]
8000992a:	91 39       	st.w	r8[0xc],r9
	
	return qtmp;
8000992c:	06 98       	mov	r8,r3
8000992e:	ee c9 00 20 	sub	r9,r7,32
80009932:	20 08       	sub	r8,0
80009934:	20 09       	sub	r9,0
80009936:	72 0a       	ld.w	r10,r9[0x0]
80009938:	91 0a       	st.w	r8[0x0],r10
8000993a:	72 1a       	ld.w	r10,r9[0x4]
8000993c:	91 1a       	st.w	r8[0x4],r10
8000993e:	72 2a       	ld.w	r10,r9[0x8]
80009940:	91 2a       	st.w	r8[0x8],r10
80009942:	72 39       	ld.w	r9,r9[0xc]
80009944:	91 39       	st.w	r8[0xc],r9
}
80009946:	06 9c       	mov	r12,r3
80009948:	2f 4d       	sub	sp,-48
8000994a:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000994e:	00 00       	add	r0,r0
80009950:	80 00       	ld.sh	r0,r0[0x0]
80009952:	96 e6       	ld.uh	r6,r11[0xc]

80009954 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80009954:	eb cd 40 c0 	pushm	r6-r7,lr
80009958:	1a 97       	mov	r7,sp
8000995a:	20 6d       	sub	sp,24
8000995c:	49 e6       	lddpc	r6,800099d4 <interpolate+0x80>
8000995e:	1e 26       	rsub	r6,pc
80009960:	ef 4c ff f8 	st.w	r7[-8],r12
80009964:	ef 4b ff f4 	st.w	r7[-12],r11
80009968:	ef 4a ff f0 	st.w	r7[-16],r10
8000996c:	ef 49 ff ec 	st.w	r7[-20],r9
80009970:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80009974:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009978:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000997c:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80009980:	c0 41       	brne	80009988 <interpolate+0x34>
	{
		return y1;
80009982:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009986:	c2 38       	rjmp	800099cc <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80009988:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000998c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80009990:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80009994:	ee fa ff f8 	ld.w	r10,r7[-8]
80009998:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000999c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800099a0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800099a4:	ee fa ff f0 	ld.w	r10,r7[-16]
800099a8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800099ac:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800099b0:	12 9b       	mov	r11,r9
800099b2:	10 9c       	mov	r12,r8
800099b4:	f0 16 00 08 	mcall	r6[32]
800099b8:	18 98       	mov	r8,r12
800099ba:	10 99       	mov	r9,r8
800099bc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800099c0:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800099c4:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
800099c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
800099cc:	10 9c       	mov	r12,r8
800099ce:	2f ad       	sub	sp,-24
800099d0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800099d4:	80 00       	ld.sh	r0,r0[0x0]
800099d6:	97 e2       	st.w	r11[0x38],r2

800099d8 <init_pos_integration>:
void init_pos_gps(position_estimator_t *pos_est, gps_Data_type *gps);
void init_barometer_offset(position_estimator_t *pos_est, pressure_data *barometer);


void init_pos_integration(position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps)
{
800099d8:	eb cd 40 c0 	pushm	r6-r7,lr
800099dc:	1a 97       	mov	r7,sp
800099de:	20 3d       	sub	sp,12
800099e0:	4a 66       	lddpc	r6,80009a78 <init_pos_integration+0xa0>
800099e2:	1e 26       	rsub	r6,pc
800099e4:	ef 4c ff fc 	st.w	r7[-4],r12
800099e8:	ef 4b ff f8 	st.w	r7[-8],r11
800099ec:	ef 4a ff f4 	st.w	r7[-12],r10
	//centralData = get_central_data();
	pos_est->init_gps_position = false;
800099f0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800099f4:	30 08       	mov	r8,0
800099f6:	f3 68 00 28 	st.b	r9[40],r8
	pos_est->init_barometer=false;
800099fa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800099fe:	30 08       	mov	r8,0
80009a00:	f3 68 00 29 	st.b	r9[41],r8
	pos_est->timeLastGpsMsg = 0;
80009a04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009a08:	30 09       	mov	r9,0
80009a0a:	91 89       	st.w	r8[0x20],r9
	pos_est->timeLastBarometerMsg=0;
80009a0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009a10:	30 09       	mov	r9,0
80009a12:	91 99       	st.w	r8[0x24],r9
	
	pos_est->kp_pos[0] = 2.0;
80009a14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009a18:	fc 19 40 00 	movh	r9,0x4000
80009a1c:	91 39       	st.w	r8[0xc],r9
	pos_est->kp_pos[1] = 2.0;
80009a1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009a22:	fc 19 40 00 	movh	r9,0x4000
80009a26:	91 49       	st.w	r8[0x10],r9
	pos_est->kp_pos[2] = 1.0;
80009a28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009a2c:	fc 19 3f 80 	movh	r9,0x3f80
80009a30:	91 59       	st.w	r8[0x14],r9
	
	pos_est->kp_vel[0] = 1.0;
80009a32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009a36:	fc 19 3f 80 	movh	r9,0x3f80
80009a3a:	91 09       	st.w	r8[0x0],r9
	pos_est->kp_vel[1] = 1.0;
80009a3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009a40:	fc 19 3f 80 	movh	r9,0x3f80
80009a44:	91 19       	st.w	r8[0x4],r9
	pos_est->kp_vel[2] = 0.5;
80009a46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009a4a:	fc 19 3f 00 	movh	r9,0x3f00
80009a4e:	91 29       	st.w	r8[0x8],r9
	
	pos_est->kp_alt=2.0;
80009a50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009a54:	fc 19 40 00 	movh	r9,0x4000
80009a58:	91 69       	st.w	r8[0x18],r9
	pos_est->kp_vel_baro=1.0;
80009a5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009a5e:	fc 19 3f 80 	movh	r9,0x3f80
80009a62:	91 79       	st.w	r8[0x1c],r9
	
	init_pos_gps(pos_est, gps);
80009a64:	ee fb ff f4 	ld.w	r11,r7[-12]
80009a68:	ee fc ff fc 	ld.w	r12,r7[-4]
80009a6c:	f0 16 00 eb 	mcall	r6[940]
}
80009a70:	2f dd       	sub	sp,-12
80009a72:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80009a76:	00 00       	add	r0,r0
80009a78:	80 00       	ld.sh	r0,r0[0x0]
80009a7a:	98 66       	ld.sh	r6,r12[0xc]
80009a7c:	47 50       	lddsp	r0,sp[0x1d4]
80009a7e:	53 20       	stdsp	sp[0xc8],r0
80009a80:	70 6f       	ld.w	pc,r8[0x18]
80009a82:	73 69       	ld.w	r9,r9[0x58]
80009a84:	74 69       	ld.w	r9,r10[0x18]
80009a86:	6f 6e       	ld.w	lr,r7[0x58]
80009a88:	20 69       	sub	r9,6
80009a8a:	6e 69       	ld.w	r9,r7[0x18]
80009a8c:	74 69       	ld.w	r9,r10[0x18]
80009a8e:	61 6c       	ld.w	r12,r0[0x58]
80009a90:	69 7a       	ld.w	r10,r4[0x5c]
80009a92:	65 64       	ld.w	r4,r2[0x58]
80009a94:	21 0a       	sub	r10,16
	...

80009a98 <init_pos_gps>:

void init_pos_gps(position_estimator_t *pos_est, gps_Data_type *gps)
{
80009a98:	eb cd 40 c0 	pushm	r6-r7,lr
80009a9c:	1a 97       	mov	r7,sp
80009a9e:	20 3d       	sub	sp,12
80009aa0:	4d 16       	lddpc	r6,80009be4 <init_pos_gps+0x14c>
80009aa2:	1e 26       	rsub	r6,pc
80009aa4:	ef 4c ff f8 	st.w	r7[-8],r12
80009aa8:	ef 4b ff f4 	st.w	r7[-12],r11
	int i;
	
	if (newValidGpsMsg(&pos_est->timeLastGpsMsg) && (!(pos_est->init_gps_position)))
80009aac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009ab0:	2e 08       	sub	r8,-32
80009ab2:	10 9c       	mov	r12,r8
80009ab4:	f0 16 00 9a 	mcall	r6[616]
80009ab8:	18 98       	mov	r8,r12
80009aba:	58 08       	cp.w	r8,0
80009abc:	e0 80 00 91 	breq	80009bde <init_pos_gps+0x146>
80009ac0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009ac4:	f1 38 00 28 	ld.ub	r8,r8[40]
80009ac8:	ec 18 00 01 	eorl	r8,0x1
80009acc:	5c 58       	castu.b	r8
80009ace:	e0 80 00 88 	breq	80009bde <init_pos_gps+0x146>
	{
		pos_est->init_gps_position = true;
80009ad2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009ad6:	30 18       	mov	r8,1
80009ad8:	f3 68 00 28 	st.b	r9[40],r8
		
		pos_est->localPosition.origin.longitude = gps->longitude;
80009adc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009ae0:	f0 e8 00 08 	ld.d	r8,r8[8]
80009ae4:	ee fa ff f8 	ld.w	r10,r7[-8]
80009ae8:	f4 e9 00 70 	st.d	r10[112],r8
		pos_est->localPosition.origin.latitude = gps->latitude;
80009aec:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009af0:	f0 e8 00 00 	ld.d	r8,r8[0]
80009af4:	ee fa ff f8 	ld.w	r10,r7[-8]
80009af8:	f4 e9 00 78 	st.d	r10[120],r8
		pos_est->localPosition.origin.altitude = gps->altitude;
80009afc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009b00:	70 49       	ld.w	r9,r8[0x10]
80009b02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b06:	f1 49 00 80 	st.w	r8[128],r9
		pos_est->localPosition.timestamp_ms=gps->timeLastMsg;
80009b0a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009b0e:	71 19       	ld.w	r9,r8[0x44]
80009b10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b14:	f1 49 00 8c 	st.w	r8[140],r9

		pos_est->lastGpsPos=pos_est->localPosition;
80009b18:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009b1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b20:	f2 cb ff 70 	sub	r11,r9,-144
80009b24:	f0 ca ff a0 	sub	r10,r8,-96
80009b28:	f6 c8 00 00 	sub	r8,r11,0
80009b2c:	f4 c9 00 00 	sub	r9,r10,0
80009b30:	72 0c       	ld.w	r12,r9[0x0]
80009b32:	91 0c       	st.w	r8[0x0],r12
80009b34:	72 1c       	ld.w	r12,r9[0x4]
80009b36:	91 1c       	st.w	r8[0x4],r12
80009b38:	72 2c       	ld.w	r12,r9[0x8]
80009b3a:	91 2c       	st.w	r8[0x8],r12
80009b3c:	72 39       	ld.w	r9,r9[0xc]
80009b3e:	91 39       	st.w	r8[0xc],r9
80009b40:	f6 c8 ff f0 	sub	r8,r11,-16
80009b44:	f4 c9 ff f0 	sub	r9,r10,-16
80009b48:	72 0c       	ld.w	r12,r9[0x0]
80009b4a:	91 0c       	st.w	r8[0x0],r12
80009b4c:	72 1c       	ld.w	r12,r9[0x4]
80009b4e:	91 1c       	st.w	r8[0x4],r12
80009b50:	72 2c       	ld.w	r12,r9[0x8]
80009b52:	91 2c       	st.w	r8[0x8],r12
80009b54:	72 39       	ld.w	r9,r9[0xc]
80009b56:	91 39       	st.w	r8[0xc],r9
80009b58:	f6 c8 ff e0 	sub	r8,r11,-32
80009b5c:	f4 c9 ff e0 	sub	r9,r10,-32
80009b60:	72 0a       	ld.w	r10,r9[0x0]
80009b62:	91 0a       	st.w	r8[0x0],r10
80009b64:	72 1a       	ld.w	r10,r9[0x4]
80009b66:	91 1a       	st.w	r8[0x4],r10
80009b68:	72 2a       	ld.w	r10,r9[0x8]
80009b6a:	91 2a       	st.w	r8[0x8],r10
80009b6c:	72 39       	ld.w	r9,r9[0xc]
80009b6e:	91 39       	st.w	r8[0xc],r9
		
		
		pos_est->last_alt=0;
80009b70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b74:	30 09       	mov	r9,0
80009b76:	f1 49 00 50 	st.w	r8[80],r9
		for(i=0;i<3;i++)
80009b7a:	30 08       	mov	r8,0
80009b7c:	ef 48 ff fc 	st.w	r7[-4],r8
80009b80:	c2 68       	rjmp	80009bcc <init_pos_gps+0x134>
		{
			pos_est->pos_correction[i]=0.0;
80009b82:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009b86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b8a:	2e f9       	sub	r9,-17
80009b8c:	30 0a       	mov	r10,0
80009b8e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->last_vel[i]=0.0;
80009b92:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009b96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009b9a:	2e b9       	sub	r9,-21
80009b9c:	30 0a       	mov	r10,0
80009b9e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->localPosition.pos[i] = 0.0;
80009ba2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009ba6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009baa:	2e 89       	sub	r9,-24
80009bac:	30 0a       	mov	r10,0
80009bae:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->vel[i]=0.0;
80009bb2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009bb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009bba:	2f 29       	sub	r9,-14
80009bbc:	30 0a       	mov	r10,0
80009bbe:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

		pos_est->lastGpsPos=pos_est->localPosition;
		
		
		pos_est->last_alt=0;
		for(i=0;i<3;i++)
80009bc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009bc6:	2f f8       	sub	r8,-1
80009bc8:	ef 48 ff fc 	st.w	r7[-4],r8
80009bcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009bd0:	58 28       	cp.w	r8,2
80009bd2:	fe 9a ff d8 	brle	80009b82 <init_pos_gps+0xea>
			pos_est->last_vel[i]=0.0;
			pos_est->localPosition.pos[i] = 0.0;
			pos_est->vel[i]=0.0;
		}
		
		dbg_print("GPS position initialized!\n");
80009bd6:	fe cc 01 5a 	sub	r12,pc,346
80009bda:	f0 16 00 01 	mcall	r6[4]
	}
}
80009bde:	2f dd       	sub	sp,-12
80009be0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80009be4:	80 00       	ld.sh	r0,r0[0x0]
80009be6:	99 26       	st.w	r12[0x8],r6
80009be8:	4f 66       	lddpc	r6,80009dc0 <position_reset_home_altitude+0xac>
80009bea:	66 73       	ld.w	r3,r3[0x1c]
80009bec:	65 74       	ld.w	r4,r2[0x5c]
80009bee:	20 6f       	sub	pc,6
80009bf0:	66 20       	ld.w	r0,r3[0x8]
80009bf2:	74 68       	ld.w	r8,r10[0x18]
80009bf4:	65 20       	ld.w	r0,r2[0x48]
80009bf6:	62 61       	ld.w	r1,r1[0x18]
80009bf8:	72 6f       	ld.w	pc,r9[0x18]
80009bfa:	6d 65       	ld.w	r5,r6[0x58]
80009bfc:	74 65       	ld.w	r5,r10[0x18]
80009bfe:	72 20       	ld.w	r0,r9[0x8]
80009c00:	73 65       	ld.w	r5,r9[0x58]
80009c02:	74 20       	ld.w	r0,r10[0x8]
80009c04:	74 6f       	ld.w	pc,r10[0x18]
80009c06:	20 74       	sub	r4,7
80009c08:	68 65       	ld.w	r5,r4[0x18]
80009c0a:	20 47       	sub	r7,4
80009c0c:	50 53       	stdsp	sp[0x14],r3
80009c0e:	20 61       	sub	r1,6
80009c10:	6c 74       	ld.w	r4,r6[0x1c]
80009c12:	69 74       	ld.w	r4,r4[0x5c]
80009c14:	75 64       	ld.w	r4,r10[0x58]
80009c16:	65 2c       	ld.w	r12,r2[0x48]
80009c18:	20 6f       	sub	pc,6
80009c1a:	66 66       	ld.w	r6,r3[0x18]
80009c1c:	73 65       	ld.w	r5,r9[0x58]
80009c1e:	74 20       	ld.w	r0,r10[0x8]
80009c20:	76 61       	ld.w	r1,r11[0x18]
80009c22:	6c 75       	ld.w	r5,r6[0x1c]
80009c24:	65 20       	ld.w	r0,r2[0x48]
80009c26:	6f 66       	ld.w	r6,r7[0x58]
80009c28:	3a 00       	mov	r0,-96
80009c2a:	00 00       	add	r0,r0
80009c2c:	20 3d       	sub	sp,12
80009c2e:	20 2d       	sub	sp,8
80009c30:	00 00       	add	r0,r0
80009c32:	00 00       	add	r0,r0
80009c34:	20 2d       	sub	sp,8
80009c36:	20 00       	sub	r0,0
80009c38:	20 2b       	sub	r11,2
80009c3a:	20 00       	sub	r0,0
80009c3c:	0a 00       	add	r0,r5

80009c3e <init_barometer_offset>:

void init_barometer_offset(position_estimator_t *pos_est, pressure_data *barometer)
{
80009c3e:	eb cd 40 c0 	pushm	r6-r7,lr
80009c42:	1a 97       	mov	r7,sp
80009c44:	20 3d       	sub	sp,12
80009c46:	4b 36       	lddpc	r6,80009d10 <init_barometer_offset+0xd2>
80009c48:	1e 26       	rsub	r6,pc
80009c4a:	ef 4c ff f8 	st.w	r7[-8],r12
80009c4e:	ef 4b ff f4 	st.w	r7[-12],r11
	bool boolNewBaro = newValidBarometer(&pos_est->timeLastBarometerMsg);
80009c52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009c56:	2d c8       	sub	r8,-36
80009c58:	10 9c       	mov	r12,r8
80009c5a:	f0 16 00 ec 	mcall	r6[944]
80009c5e:	18 98       	mov	r8,r12
80009c60:	ef 68 ff ff 	st.b	r7[-1],r8

		
	//if ((centralData->init_gps_position)&&(boolNewBaro))
	if ((boolNewBaro))
80009c64:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009c68:	30 08       	mov	r8,0
80009c6a:	f0 09 18 00 	cp.b	r9,r8
80009c6e:	c4 e0       	breq	80009d0a <init_barometer_offset+0xcc>
	{
		
		barometer->altitude_offset = -(barometer->altitude - pos_est->localPosition.origin.altitude);
80009c70:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009c74:	70 79       	ld.w	r9,r8[0x1c]
80009c76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009c7a:	f0 f8 00 80 	ld.w	r8,r8[128]
80009c7e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80009c82:	10 99       	mov	r9,r8
80009c84:	ee 19 80 00 	eorh	r9,0x8000
80009c88:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009c8c:	91 89       	st.w	r8[0x20],r9
		//barometer->altitude_offset = -barometer->altitude - pos_est->localPosition.pos[2] + pos_est->localPosition.origin.altitude;
		pos_est->init_barometer = true;
80009c8e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009c92:	30 18       	mov	r8,1
80009c94:	f3 68 00 29 	st.b	r9[41],r8
		
		dbg_print("Offset of the barometer set to the GPS altitude, offset value of:");
80009c98:	fe cc 00 b0 	sub	r12,pc,176
80009c9c:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude_offset,10);
80009ca0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009ca4:	70 88       	ld.w	r8,r8[0x20]
80009ca6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80009caa:	30 ab       	mov	r11,10
80009cac:	10 9c       	mov	r12,r8
80009cae:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" = -");
80009cb2:	fe cc 00 86 	sub	r12,pc,134
80009cb6:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude,10);
80009cba:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009cbe:	70 78       	ld.w	r8,r8[0x1c]
80009cc0:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80009cc4:	30 ab       	mov	r11,10
80009cc6:	10 9c       	mov	r12,r8
80009cc8:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" - ");
80009ccc:	fe cc 00 98 	sub	r12,pc,152
80009cd0:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.pos[2],10);
80009cd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009cd8:	71 a8       	ld.w	r8,r8[0x68]
80009cda:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80009cde:	30 ab       	mov	r11,10
80009ce0:	10 9c       	mov	r12,r8
80009ce2:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" + ");
80009ce6:	fe cc 00 ae 	sub	r12,pc,174
80009cea:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.origin.altitude,10);
80009cee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009cf2:	f0 f8 00 80 	ld.w	r8,r8[128]
80009cf6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80009cfa:	30 ab       	mov	r11,10
80009cfc:	10 9c       	mov	r12,r8
80009cfe:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
80009d02:	fe cc 00 c6 	sub	r12,pc,198
80009d06:	f0 16 00 01 	mcall	r6[4]
	}
}
80009d0a:	2f dd       	sub	sp,-12
80009d0c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80009d10:	80 00       	ld.sh	r0,r0[0x0]
80009d12:	9a cc       	ld.uh	r12,sp[0x8]

80009d14 <position_reset_home_altitude>:

void position_reset_home_altitude(position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps) {
80009d14:	eb cd 40 c0 	pushm	r6-r7,lr
80009d18:	1a 97       	mov	r7,sp
80009d1a:	20 4d       	sub	sp,16
80009d1c:	4f 06       	lddpc	r6,80009edc <position_reset_home_altitude+0x1c8>
80009d1e:	1e 26       	rsub	r6,pc
80009d20:	ef 4c ff f8 	st.w	r7[-8],r12
80009d24:	ef 4b ff f4 	st.w	r7[-12],r11
80009d28:	ef 4a ff f0 	st.w	r7[-16],r10
		int i;
		// reset origin to position where quad is armed if we have GPS
		if (pos_est->init_gps_position) {
80009d2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009d30:	f1 38 00 28 	ld.ub	r8,r8[40]
80009d34:	58 08       	cp.w	r8,0
80009d36:	c4 b0       	breq	80009dcc <position_reset_home_altitude+0xb8>
			pos_est->localPosition.origin.longitude = gps->longitude;
80009d38:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009d3c:	f0 e8 00 08 	ld.d	r8,r8[8]
80009d40:	ee fa ff f8 	ld.w	r10,r7[-8]
80009d44:	f4 e9 00 70 	st.d	r10[112],r8
			pos_est->localPosition.origin.latitude = gps->latitude;
80009d48:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009d4c:	f0 e8 00 00 	ld.d	r8,r8[0]
80009d50:	ee fa ff f8 	ld.w	r10,r7[-8]
80009d54:	f4 e9 00 78 	st.d	r10[120],r8
			pos_est->localPosition.origin.altitude = gps->altitude;
80009d58:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009d5c:	70 49       	ld.w	r9,r8[0x10]
80009d5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009d62:	f1 49 00 80 	st.w	r8[128],r9
			pos_est->localPosition.timestamp_ms=gps->timeLastMsg;
80009d66:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009d6a:	71 19       	ld.w	r9,r8[0x44]
80009d6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009d70:	f1 49 00 8c 	st.w	r8[140],r9

			pos_est->lastGpsPos=pos_est->localPosition;
80009d74:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009d78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009d7c:	f2 cb ff 70 	sub	r11,r9,-144
80009d80:	f0 ca ff a0 	sub	r10,r8,-96
80009d84:	f6 c8 00 00 	sub	r8,r11,0
80009d88:	f4 c9 00 00 	sub	r9,r10,0
80009d8c:	72 0c       	ld.w	r12,r9[0x0]
80009d8e:	91 0c       	st.w	r8[0x0],r12
80009d90:	72 1c       	ld.w	r12,r9[0x4]
80009d92:	91 1c       	st.w	r8[0x4],r12
80009d94:	72 2c       	ld.w	r12,r9[0x8]
80009d96:	91 2c       	st.w	r8[0x8],r12
80009d98:	72 39       	ld.w	r9,r9[0xc]
80009d9a:	91 39       	st.w	r8[0xc],r9
80009d9c:	f6 c8 ff f0 	sub	r8,r11,-16
80009da0:	f4 c9 ff f0 	sub	r9,r10,-16
80009da4:	72 0c       	ld.w	r12,r9[0x0]
80009da6:	91 0c       	st.w	r8[0x0],r12
80009da8:	72 1c       	ld.w	r12,r9[0x4]
80009daa:	91 1c       	st.w	r8[0x4],r12
80009dac:	72 2c       	ld.w	r12,r9[0x8]
80009dae:	91 2c       	st.w	r8[0x8],r12
80009db0:	72 39       	ld.w	r9,r9[0xc]
80009db2:	91 39       	st.w	r8[0xc],r9
80009db4:	f6 c8 ff e0 	sub	r8,r11,-32
80009db8:	f4 c9 ff e0 	sub	r9,r10,-32
80009dbc:	72 0a       	ld.w	r10,r9[0x0]
80009dbe:	91 0a       	st.w	r8[0x0],r10
80009dc0:	72 1a       	ld.w	r10,r9[0x4]
80009dc2:	91 1a       	st.w	r8[0x4],r10
80009dc4:	72 2a       	ld.w	r10,r9[0x8]
80009dc6:	91 2a       	st.w	r8[0x8],r10
80009dc8:	72 39       	ld.w	r9,r9[0xc]
80009dca:	91 39       	st.w	r8[0xc],r9
		}
		// reset barometer offset
		barometer->altitude_offset = -(barometer->altitude - barometer->altitude_offset - pos_est->localPosition.origin.altitude);
80009dcc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009dd0:	70 79       	ld.w	r9,r8[0x1c]
80009dd2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009dd6:	70 88       	ld.w	r8,r8[0x20]
80009dd8:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80009ddc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009de0:	f0 f8 00 80 	ld.w	r8,r8[128]
80009de4:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80009de8:	10 99       	mov	r9,r8
80009dea:	ee 19 80 00 	eorh	r9,0x8000
80009dee:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009df2:	91 89       	st.w	r8[0x20],r9
		//barometer->altitude_offset = -barometer->altitude - pos_est->localPosition.pos[2] + pos_est->localPosition.origin.altitude;
		pos_est->init_barometer = true;
80009df4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009df8:	30 18       	mov	r8,1
80009dfa:	f3 68 00 29 	st.b	r9[41],r8
		
		dbg_print("Offset of the barometer set to the GPS altitude, offset value of:");
80009dfe:	fe cc 02 16 	sub	r12,pc,534
80009e02:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude_offset,10);
80009e06:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009e0a:	70 88       	ld.w	r8,r8[0x20]
80009e0c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80009e10:	30 ab       	mov	r11,10
80009e12:	10 9c       	mov	r12,r8
80009e14:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" = -");
80009e18:	fe cc 01 ec 	sub	r12,pc,492
80009e1c:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude,10);
80009e20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009e24:	70 78       	ld.w	r8,r8[0x1c]
80009e26:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80009e2a:	30 ab       	mov	r11,10
80009e2c:	10 9c       	mov	r12,r8
80009e2e:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" - ");
80009e32:	fe cc 01 fe 	sub	r12,pc,510
80009e36:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.pos[2],10);
80009e3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009e3e:	71 a8       	ld.w	r8,r8[0x68]
80009e40:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80009e44:	30 ab       	mov	r11,10
80009e46:	10 9c       	mov	r12,r8
80009e48:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" + ");
80009e4c:	fe cc 02 14 	sub	r12,pc,532
80009e50:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.origin.altitude,10);
80009e54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009e58:	f0 f8 00 80 	ld.w	r8,r8[128]
80009e5c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80009e60:	30 ab       	mov	r11,10
80009e62:	10 9c       	mov	r12,r8
80009e64:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
80009e68:	fe cc 02 2c 	sub	r12,pc,556
80009e6c:	f0 16 00 01 	mcall	r6[4]

		// reset position estimator
		pos_est->last_alt=0;
80009e70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009e74:	30 09       	mov	r9,0
80009e76:	f1 49 00 50 	st.w	r8[80],r9
		for(i=0;i<3;i++)
80009e7a:	30 08       	mov	r8,0
80009e7c:	ef 48 ff fc 	st.w	r7[-4],r8
80009e80:	c2 68       	rjmp	80009ecc <position_reset_home_altitude+0x1b8>
		{
			pos_est->pos_correction[i]=0.0;
80009e82:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009e86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009e8a:	2e f9       	sub	r9,-17
80009e8c:	30 0a       	mov	r10,0
80009e8e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->last_vel[i]=0.0;
80009e92:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009e96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009e9a:	2e b9       	sub	r9,-21
80009e9c:	30 0a       	mov	r10,0
80009e9e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->localPosition.pos[i] = 0.0;
80009ea2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009ea6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009eaa:	2e 89       	sub	r9,-24
80009eac:	30 0a       	mov	r10,0
80009eae:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->vel[i]=0.0;
80009eb2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009eb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009eba:	2f 29       	sub	r9,-14
80009ebc:	30 0a       	mov	r10,0
80009ebe:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		dbg_print_num(pos_est->localPosition.origin.altitude,10);
		dbg_print("\n");

		// reset position estimator
		pos_est->last_alt=0;
		for(i=0;i<3;i++)
80009ec2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009ec6:	2f f8       	sub	r8,-1
80009ec8:	ef 48 ff fc 	st.w	r7[-4],r8
80009ecc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009ed0:	58 28       	cp.w	r8,2
80009ed2:	fe 9a ff d8 	brle	80009e82 <position_reset_home_altitude+0x16e>
			pos_est->localPosition.pos[i] = 0.0;
			pos_est->vel[i]=0.0;
		}

	
}
80009ed6:	2f cd       	sub	sp,-16
80009ed8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80009edc:	80 00       	ld.sh	r0,r0[0x0]
80009ede:	9b a2       	st.w	sp[0x28],r2

80009ee0 <position_integration>:

void position_integration(position_estimator_t *pos_est, Quat_Attitude_t *attitude, float dt)
{
80009ee0:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80009ee4:	1a 97       	mov	r7,sp
80009ee6:	21 fd       	sub	sp,124
80009ee8:	fe f6 03 64 	ld.w	r6,pc[868]
80009eec:	1e 26       	rsub	r6,pc
80009eee:	ef 4c ff 9c 	st.w	r7[-100],r12
80009ef2:	ef 4b ff 98 	st.w	r7[-104],r11
80009ef6:	ef 4a ff 94 	st.w	r7[-108],r10
	int i;
	
	UQuat_t qvel_bf,qvel, qtmp1, qtmp2, qtmp3;
	float tmp[3];
	qvel.s=0;
80009efa:	30 08       	mov	r8,0
80009efc:	ef 48 ff dc 	st.w	r7[-36],r8
	for (i=0; i<3; i++) qvel.v[i]=pos_est->vel[i];
80009f00:	30 08       	mov	r8,0
80009f02:	ef 48 ff fc 	st.w	r7[-4],r8
80009f06:	c1 58       	rjmp	80009f30 <position_integration+0x50>
80009f08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009f0c:	ee fa ff fc 	ld.w	r10,r7[-4]
80009f10:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80009f14:	2f 2a       	sub	r10,-14
80009f16:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80009f1a:	2f f8       	sub	r8,-1
80009f1c:	a3 68       	lsl	r8,0x2
80009f1e:	ee 08 00 08 	add	r8,r7,r8
80009f22:	f1 49 ff dc 	st.w	r8[-36],r9
80009f26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009f2a:	2f f8       	sub	r8,-1
80009f2c:	ef 48 ff fc 	st.w	r7[-4],r8
80009f30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009f34:	58 28       	cp.w	r8,2
80009f36:	fe 9a ff e9 	brle	80009f08 <position_integration+0x28>
	qvel_bf=quat_global_to_local(attitude->qe, qvel);
80009f3a:	ee ca 00 7c 	sub	r10,r7,124
80009f3e:	20 4d       	sub	sp,16
80009f40:	1a 98       	mov	r8,sp
80009f42:	ee c9 00 24 	sub	r9,r7,36
80009f46:	20 08       	sub	r8,0
80009f48:	20 09       	sub	r9,0
80009f4a:	72 0b       	ld.w	r11,r9[0x0]
80009f4c:	91 0b       	st.w	r8[0x0],r11
80009f4e:	72 1b       	ld.w	r11,r9[0x4]
80009f50:	91 1b       	st.w	r8[0x4],r11
80009f52:	72 2b       	ld.w	r11,r9[0x8]
80009f54:	91 2b       	st.w	r8[0x8],r11
80009f56:	72 39       	ld.w	r9,r9[0xc]
80009f58:	91 39       	st.w	r8[0xc],r9
80009f5a:	ee f9 ff 98 	ld.w	r9,r7[-104]
80009f5e:	20 4d       	sub	sp,16
80009f60:	1a 98       	mov	r8,sp
80009f62:	20 08       	sub	r8,0
80009f64:	20 09       	sub	r9,0
80009f66:	72 0b       	ld.w	r11,r9[0x0]
80009f68:	91 0b       	st.w	r8[0x0],r11
80009f6a:	72 1b       	ld.w	r11,r9[0x4]
80009f6c:	91 1b       	st.w	r8[0x4],r11
80009f6e:	72 2b       	ld.w	r11,r9[0x8]
80009f70:	91 2b       	st.w	r8[0x8],r11
80009f72:	72 39       	ld.w	r9,r9[0xc]
80009f74:	91 39       	st.w	r8[0xc],r9
80009f76:	14 9c       	mov	r12,r10
80009f78:	fe b0 fb f2 	rcall	8000975c <quat_global_to_local>
80009f7c:	2f 8d       	sub	sp,-32
80009f7e:	ee c8 00 14 	sub	r8,r7,20
80009f82:	ee c9 00 7c 	sub	r9,r7,124
80009f86:	20 08       	sub	r8,0
80009f88:	20 09       	sub	r9,0
80009f8a:	72 0a       	ld.w	r10,r9[0x0]
80009f8c:	91 0a       	st.w	r8[0x0],r10
80009f8e:	72 1a       	ld.w	r10,r9[0x4]
80009f90:	91 1a       	st.w	r8[0x4],r10
80009f92:	72 2a       	ld.w	r10,r9[0x8]
80009f94:	91 2a       	st.w	r8[0x8],r10
80009f96:	72 39       	ld.w	r9,r9[0xc]
80009f98:	91 39       	st.w	r8[0xc],r9
	for (i=0; i<3; i++) {
80009f9a:	30 08       	mov	r8,0
80009f9c:	ef 48 ff fc 	st.w	r7[-4],r8
80009fa0:	c8 c8       	rjmp	8000a0b8 <position_integration+0x1d8>
		pos_est->vel_bf[i]=qvel_bf.v[i];
80009fa2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009fa6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009faa:	2f f8       	sub	r8,-1
80009fac:	a3 68       	lsl	r8,0x2
80009fae:	ee 08 00 08 	add	r8,r7,r8
80009fb2:	f0 fa ff ec 	ld.w	r10,r8[-20]
80009fb6:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80009fba:	2f 59       	sub	r9,-11
80009fbc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		// clean acceleration estimate without gravity:
		attitude->acc_bf[i]=GRAVITY * (attitude->a[i] - attitude->up_vec.v[i]) ;
80009fc0:	ee f5 ff fc 	ld.w	r5,r7[-4]
80009fc4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009fc8:	ee f8 ff 98 	ld.w	r8,r7[-104]
80009fcc:	2d f9       	sub	r9,-33
80009fce:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80009fd2:	ee fa ff fc 	ld.w	r10,r7[-4]
80009fd6:	ee f8 ff 98 	ld.w	r8,r7[-104]
80009fda:	2f ba       	sub	r10,-5
80009fdc:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80009fe0:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80009fe4:	10 9c       	mov	r12,r8
80009fe6:	f0 16 00 02 	mcall	r6[8]
80009fea:	e0 68 85 1f 	mov	r8,34079
80009fee:	ea 18 51 eb 	orh	r8,0x51eb
80009ff2:	e0 69 9e b8 	mov	r9,40632
80009ff6:	ea 19 40 23 	orh	r9,0x4023
80009ffa:	f0 16 00 03 	mcall	r6[12]
80009ffe:	14 98       	mov	r8,r10
8000a000:	16 99       	mov	r9,r11
8000a002:	10 9a       	mov	r10,r8
8000a004:	12 9b       	mov	r11,r9
8000a006:	f0 16 00 09 	mcall	r6[36]
8000a00a:	18 9a       	mov	r10,r12
8000a00c:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000a010:	ea c9 ff d0 	sub	r9,r5,-48
8000a014:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		pos_est->vel_bf[i]=pos_est->vel_bf[i]*(1.0-(VEL_DECAY*dt)) + attitude->acc_bf[i]  * dt;
8000a018:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000a01c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a020:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000a024:	2f 59       	sub	r9,-11
8000a026:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000a02a:	10 9c       	mov	r12,r8
8000a02c:	f0 16 00 02 	mcall	r6[8]
8000a030:	14 92       	mov	r2,r10
8000a032:	16 93       	mov	r3,r11
8000a034:	ee fc ff 94 	ld.w	r12,r7[-108]
8000a038:	f0 16 00 02 	mcall	r6[8]
8000a03c:	30 08       	mov	r8,0
8000a03e:	fc 19 80 00 	movh	r9,0x8000
8000a042:	f0 16 00 03 	mcall	r6[12]
8000a046:	14 98       	mov	r8,r10
8000a048:	16 99       	mov	r9,r11
8000a04a:	10 9a       	mov	r10,r8
8000a04c:	12 9b       	mov	r11,r9
8000a04e:	30 08       	mov	r8,0
8000a050:	fc 19 3f f0 	movh	r9,0x3ff0
8000a054:	f0 16 00 05 	mcall	r6[20]
8000a058:	14 98       	mov	r8,r10
8000a05a:	16 99       	mov	r9,r11
8000a05c:	04 9a       	mov	r10,r2
8000a05e:	06 9b       	mov	r11,r3
8000a060:	f0 16 00 03 	mcall	r6[12]
8000a064:	14 98       	mov	r8,r10
8000a066:	16 99       	mov	r9,r11
8000a068:	10 92       	mov	r2,r8
8000a06a:	12 93       	mov	r3,r9
8000a06c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a070:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000a074:	2d 09       	sub	r9,-48
8000a076:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000a07a:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000a07e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000a082:	10 9c       	mov	r12,r8
8000a084:	f0 16 00 02 	mcall	r6[8]
8000a088:	14 98       	mov	r8,r10
8000a08a:	16 99       	mov	r9,r11
8000a08c:	04 9a       	mov	r10,r2
8000a08e:	06 9b       	mov	r11,r3
8000a090:	f0 16 00 05 	mcall	r6[20]
8000a094:	14 98       	mov	r8,r10
8000a096:	16 99       	mov	r9,r11
8000a098:	10 9a       	mov	r10,r8
8000a09a:	12 9b       	mov	r11,r9
8000a09c:	f0 16 00 09 	mcall	r6[36]
8000a0a0:	18 9a       	mov	r10,r12
8000a0a2:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000a0a6:	ea c9 ff f5 	sub	r9,r5,-11
8000a0aa:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	UQuat_t qvel_bf,qvel, qtmp1, qtmp2, qtmp3;
	float tmp[3];
	qvel.s=0;
	for (i=0; i<3; i++) qvel.v[i]=pos_est->vel[i];
	qvel_bf=quat_global_to_local(attitude->qe, qvel);
	for (i=0; i<3; i++) {
8000a0ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a0b2:	2f f8       	sub	r8,-1
8000a0b4:	ef 48 ff fc 	st.w	r7[-4],r8
8000a0b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a0bc:	58 28       	cp.w	r8,2
8000a0be:	fe 9a ff 72 	brle	80009fa2 <position_integration+0xc2>
		pos_est->vel_bf[i]=pos_est->vel_bf[i]*(1.0-(VEL_DECAY*dt)) + attitude->acc_bf[i]  * dt;
	}
	
	// calculate velocity in global frame
	// vel = qe *vel_bf * qe-1
	qvel_bf.s= 0.0; qvel_bf.v[0]=pos_est->vel_bf[0]; qvel_bf.v[1]=pos_est->vel_bf[1]; qvel_bf.v[2]=pos_est->vel_bf[2];
8000a0c2:	30 08       	mov	r8,0
8000a0c4:	ef 48 ff ec 	st.w	r7[-20],r8
8000a0c8:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000a0cc:	70 b8       	ld.w	r8,r8[0x2c]
8000a0ce:	ef 48 ff f0 	st.w	r7[-16],r8
8000a0d2:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000a0d6:	70 c8       	ld.w	r8,r8[0x30]
8000a0d8:	ef 48 ff f4 	st.w	r7[-12],r8
8000a0dc:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000a0e0:	70 d8       	ld.w	r8,r8[0x34]
8000a0e2:	ef 48 ff f8 	st.w	r7[-8],r8
	qvel = quat_local_to_global(attitude->qe, qvel_bf);
8000a0e6:	ee ca 00 7c 	sub	r10,r7,124
8000a0ea:	20 4d       	sub	sp,16
8000a0ec:	1a 98       	mov	r8,sp
8000a0ee:	ee c9 00 14 	sub	r9,r7,20
8000a0f2:	20 08       	sub	r8,0
8000a0f4:	20 09       	sub	r9,0
8000a0f6:	72 0b       	ld.w	r11,r9[0x0]
8000a0f8:	91 0b       	st.w	r8[0x0],r11
8000a0fa:	72 1b       	ld.w	r11,r9[0x4]
8000a0fc:	91 1b       	st.w	r8[0x4],r11
8000a0fe:	72 2b       	ld.w	r11,r9[0x8]
8000a100:	91 2b       	st.w	r8[0x8],r11
8000a102:	72 39       	ld.w	r9,r9[0xc]
8000a104:	91 39       	st.w	r8[0xc],r9
8000a106:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000a10a:	20 4d       	sub	sp,16
8000a10c:	1a 98       	mov	r8,sp
8000a10e:	20 08       	sub	r8,0
8000a110:	20 09       	sub	r9,0
8000a112:	72 0b       	ld.w	r11,r9[0x0]
8000a114:	91 0b       	st.w	r8[0x0],r11
8000a116:	72 1b       	ld.w	r11,r9[0x4]
8000a118:	91 1b       	st.w	r8[0x4],r11
8000a11a:	72 2b       	ld.w	r11,r9[0x8]
8000a11c:	91 2b       	st.w	r8[0x8],r11
8000a11e:	72 39       	ld.w	r9,r9[0xc]
8000a120:	91 39       	st.w	r8[0xc],r9
8000a122:	14 9c       	mov	r12,r10
8000a124:	fe b0 fb 9a 	rcall	80009858 <quat_local_to_global>
8000a128:	2f 8d       	sub	sp,-32
8000a12a:	ee c8 00 24 	sub	r8,r7,36
8000a12e:	ee c9 00 7c 	sub	r9,r7,124
8000a132:	20 08       	sub	r8,0
8000a134:	20 09       	sub	r9,0
8000a136:	72 0a       	ld.w	r10,r9[0x0]
8000a138:	91 0a       	st.w	r8[0x0],r10
8000a13a:	72 1a       	ld.w	r10,r9[0x4]
8000a13c:	91 1a       	st.w	r8[0x4],r10
8000a13e:	72 2a       	ld.w	r10,r9[0x8]
8000a140:	91 2a       	st.w	r8[0x8],r10
8000a142:	72 39       	ld.w	r9,r9[0xc]
8000a144:	91 39       	st.w	r8[0xc],r9
	pos_est->vel[0]=qvel.v[0]; pos_est->vel[1]=qvel.v[1]; pos_est->vel[2]=qvel.v[2];
8000a146:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000a14a:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000a14e:	91 e9       	st.w	r8[0x38],r9
8000a150:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000a154:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000a158:	91 f9       	st.w	r8[0x3c],r9
8000a15a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000a15e:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000a162:	f1 49 00 40 	st.w	r8[64],r9
	//QMUL(attitude->qe, qtmp1, qtmp2);
	//QI(attitude->qe, qtmp1);
	//QMUL(qtmp2, qtmp1, qtmp3);
	//attitude->vel[0]=qtmp3.v[0]; attitude->vel[1]=qtmp3.v[1]; attitude->vel[2]=qtmp3.v[2];
	
	for (i=0; i<3; i++) {
8000a166:	30 08       	mov	r8,0
8000a168:	ef 48 ff fc 	st.w	r7[-4],r8
8000a16c:	c6 78       	rjmp	8000a23a <position_integration+0x35a>
		// clean position estimate without gravity:
		//prev_pos[i]=attitude->localPosition.pos[i];
		pos_est->localPosition.pos[i] =pos_est->localPosition.pos[i]*(1.0-(POS_DECAY*dt)) + pos_est->vel[i] *dt;
8000a16e:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000a172:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a176:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000a17a:	2e 89       	sub	r9,-24
8000a17c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000a180:	10 9c       	mov	r12,r8
8000a182:	f0 16 00 02 	mcall	r6[8]
8000a186:	14 92       	mov	r2,r10
8000a188:	16 93       	mov	r3,r11
8000a18a:	ee fc ff 94 	ld.w	r12,r7[-108]
8000a18e:	f0 16 00 02 	mcall	r6[8]
8000a192:	30 08       	mov	r8,0
8000a194:	fc 19 80 00 	movh	r9,0x8000
8000a198:	f0 16 00 03 	mcall	r6[12]
8000a19c:	14 98       	mov	r8,r10
8000a19e:	16 99       	mov	r9,r11
8000a1a0:	10 9a       	mov	r10,r8
8000a1a2:	12 9b       	mov	r11,r9
8000a1a4:	30 08       	mov	r8,0
8000a1a6:	fc 19 3f f0 	movh	r9,0x3ff0
8000a1aa:	f0 16 00 05 	mcall	r6[20]
8000a1ae:	14 98       	mov	r8,r10
8000a1b0:	16 99       	mov	r9,r11
8000a1b2:	04 9a       	mov	r10,r2
8000a1b4:	06 9b       	mov	r11,r3
8000a1b6:	f0 16 00 03 	mcall	r6[12]
8000a1ba:	14 98       	mov	r8,r10
8000a1bc:	16 99       	mov	r9,r11
8000a1be:	10 92       	mov	r2,r8
8000a1c0:	12 93       	mov	r3,r9
8000a1c2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a1c6:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000a1ca:	2f 29       	sub	r9,-14
8000a1cc:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000a1d0:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000a1d4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000a1d8:	10 9c       	mov	r12,r8
8000a1da:	f0 16 00 02 	mcall	r6[8]
8000a1de:	14 98       	mov	r8,r10
8000a1e0:	16 99       	mov	r9,r11
8000a1e2:	04 9a       	mov	r10,r2
8000a1e4:	06 9b       	mov	r11,r3
8000a1e6:	f0 16 00 05 	mcall	r6[20]
8000a1ea:	14 98       	mov	r8,r10
8000a1ec:	16 99       	mov	r9,r11
8000a1ee:	10 9a       	mov	r10,r8
8000a1f0:	12 9b       	mov	r11,r9
8000a1f2:	f0 16 00 09 	mcall	r6[36]
8000a1f6:	18 9a       	mov	r10,r12
8000a1f8:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000a1fc:	ea c9 ff e8 	sub	r9,r5,-24
8000a200:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		pos_est->localPosition.heading=get_yaw(attitude->qe);
8000a204:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000a208:	20 4d       	sub	sp,16
8000a20a:	1a 98       	mov	r8,sp
8000a20c:	20 08       	sub	r8,0
8000a20e:	20 09       	sub	r9,0
8000a210:	72 0a       	ld.w	r10,r9[0x0]
8000a212:	91 0a       	st.w	r8[0x0],r10
8000a214:	72 1a       	ld.w	r10,r9[0x4]
8000a216:	91 1a       	st.w	r8[0x4],r10
8000a218:	72 2a       	ld.w	r10,r9[0x8]
8000a21a:	91 2a       	st.w	r8[0x8],r10
8000a21c:	72 39       	ld.w	r9,r9[0xc]
8000a21e:	91 39       	st.w	r8[0xc],r9
8000a220:	f0 16 01 1a 	mcall	r6[1128]
8000a224:	2f cd       	sub	sp,-16
8000a226:	18 99       	mov	r9,r12
8000a228:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000a22c:	f1 49 00 6c 	st.w	r8[108],r9
	//QMUL(attitude->qe, qtmp1, qtmp2);
	//QI(attitude->qe, qtmp1);
	//QMUL(qtmp2, qtmp1, qtmp3);
	//attitude->vel[0]=qtmp3.v[0]; attitude->vel[1]=qtmp3.v[1]; attitude->vel[2]=qtmp3.v[2];
	
	for (i=0; i<3; i++) {
8000a230:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a234:	2f f8       	sub	r8,-1
8000a236:	ef 48 ff fc 	st.w	r7[-4],r8
8000a23a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a23e:	58 28       	cp.w	r8,2
8000a240:	fe 9a ff 97 	brle	8000a16e <position_integration+0x28e>
		//prev_pos[i]=attitude->localPosition.pos[i];
		pos_est->localPosition.pos[i] =pos_est->localPosition.pos[i]*(1.0-(POS_DECAY*dt)) + pos_est->vel[i] *dt;
		pos_est->localPosition.heading=get_yaw(attitude->qe);
	}

}
8000a244:	2e 1d       	sub	sp,-124
8000a246:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000a24a:	00 00       	add	r0,r0
8000a24c:	80 00       	ld.sh	r0,r0[0x0]
8000a24e:	9d 70       	st.w	lr[0x1c],r0
8000a250:	47 50       	lddsp	r0,sp[0x1d4]
8000a252:	53 20       	stdsp	sp[0xc8],r0
8000a254:	64 74       	ld.w	r4,r2[0x1c]
8000a256:	20 69       	sub	r9,6
8000a258:	73 20       	ld.w	r0,r9[0x48]
8000a25a:	74 6f       	ld.w	pc,r10[0x18]
8000a25c:	6f 20       	ld.w	r0,r7[0x48]
8000a25e:	73 6d       	ld.w	sp,r9[0x58]
8000a260:	61 6c       	ld.w	r12,r0[0x58]
8000a262:	6c 21       	ld.w	r1,r6[0x8]
	...

8000a266 <position_correction>:
	
void position_correction(position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps, float dt)
{
8000a266:	eb cd 40 e0 	pushm	r5-r7,lr
8000a26a:	1a 97       	mov	r7,sp
8000a26c:	fa cd 00 e4 	sub	sp,sp,228
8000a270:	fe f6 06 7c 	ld.w	r6,pc[1660]
8000a274:	1e 26       	rsub	r6,pc
8000a276:	ef 4c ff 58 	st.w	r7[-168],r12
8000a27a:	ef 4b ff 54 	st.w	r7[-172],r11
8000a27e:	ef 4a ff 50 	st.w	r7[-176],r10
8000a282:	ef 49 ff 4c 	st.w	r7[-180],r9
	global_position_t global_gps_position;
	local_coordinates_t local_coordinates;
	
	UQuat_t bias_correction ={.s=0, .v={0.0, 0.0, 1.0}};
8000a286:	30 08       	mov	r8,0
8000a288:	ef 48 ff 84 	st.w	r7[-124],r8
8000a28c:	30 08       	mov	r8,0
8000a28e:	ef 48 ff 88 	st.w	r7[-120],r8
8000a292:	30 08       	mov	r8,0
8000a294:	ef 48 ff 8c 	st.w	r7[-116],r8
8000a298:	fc 18 3f 80 	movh	r8,0x3f80
8000a29c:	ef 48 ff 90 	st.w	r7[-112],r8
	UQuat_t vel_correction ={.s=0, .v={0.0, 0.0, 1.0}};
8000a2a0:	30 08       	mov	r8,0
8000a2a2:	ef 48 ff 74 	st.w	r7[-140],r8
8000a2a6:	30 08       	mov	r8,0
8000a2a8:	ef 48 ff 78 	st.w	r7[-136],r8
8000a2ac:	30 08       	mov	r8,0
8000a2ae:	ef 48 ff 7c 	st.w	r7[-132],r8
8000a2b2:	fc 18 3f 80 	movh	r8,0x3f80
8000a2b6:	ef 48 ff 80 	st.w	r7[-128],r8
	float pos_error[3]= {0.0,0.0,0.0};
8000a2ba:	30 08       	mov	r8,0
8000a2bc:	ef 48 ff 68 	st.w	r7[-152],r8
8000a2c0:	30 08       	mov	r8,0
8000a2c2:	ef 48 ff 6c 	st.w	r7[-148],r8
8000a2c6:	30 08       	mov	r8,0
8000a2c8:	ef 48 ff 70 	st.w	r7[-144],r8
	float baro_alt_error=0.0;
8000a2cc:	30 08       	mov	r8,0
8000a2ce:	ef 48 ff e0 	st.w	r7[-32],r8
	float baro_vel_error=0.0;
8000a2d2:	30 08       	mov	r8,0
8000a2d4:	ef 48 ff e4 	st.w	r7[-28],r8
	float baro_gain=0.0;
8000a2d8:	30 08       	mov	r8,0
8000a2da:	ef 48 ff e8 	st.w	r7[-24],r8
	float gps_gain=0.0;
8000a2de:	30 08       	mov	r8,0
8000a2e0:	ef 48 ff ec 	st.w	r7[-20],r8
	float gps_dt=0.0;
8000a2e4:	30 08       	mov	r8,0
8000a2e6:	ef 48 ff f0 	st.w	r7[-16],r8
	float vel_error[3]={0.0,0.0,0.0};
8000a2ea:	30 08       	mov	r8,0
8000a2ec:	ef 48 ff 5c 	st.w	r7[-164],r8
8000a2f0:	30 08       	mov	r8,0
8000a2f2:	ef 48 ff 60 	st.w	r7[-160],r8
8000a2f6:	30 08       	mov	r8,0
8000a2f8:	ef 48 ff 64 	st.w	r7[-156],r8
	uint32_t tinterGps, tinterBaro;
	int i;
	//if ((centralData->simulation_mode == 0))
	{
		if (pos_est->init_barometer)
8000a2fc:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a300:	f1 38 00 29 	ld.ub	r8,r8[41]
8000a304:	58 08       	cp.w	r8,0
8000a306:	c6 40       	breq	8000a3ce <position_correction+0x168>
		{
			// altimeter correction
			if (newValidBarometer(&pos_est->timeLastBarometerMsg))
8000a308:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a30c:	2d c8       	sub	r8,-36
8000a30e:	10 9c       	mov	r12,r8
8000a310:	f0 16 00 ec 	mcall	r6[944]
8000a314:	18 98       	mov	r8,r12
8000a316:	58 08       	cp.w	r8,0
8000a318:	c2 70       	breq	8000a366 <position_correction+0x100>
			{
				//alt_error = -(barometer->altitude + barometer->altitude_offset) - pos_est->localPosition.pos[2]+pos_est->localPosition.origin.altitude;
				pos_est->last_alt= -(barometer->altitude ) + pos_est->localPosition.origin.altitude;
8000a31a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a31e:	f0 f9 00 80 	ld.w	r9,r8[128]
8000a322:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000a326:	70 78       	ld.w	r8,r8[0x1c]
8000a328:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000a32c:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a330:	f1 49 00 50 	st.w	r8[80],r9
				baro_alt_error = -(barometer->altitude ) - pos_est->localPosition.pos[2]+pos_est->localPosition.origin.altitude;
8000a334:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000a338:	70 78       	ld.w	r8,r8[0x1c]
8000a33a:	10 99       	mov	r9,r8
8000a33c:	ee 19 80 00 	eorh	r9,0x8000
8000a340:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a344:	71 a8       	ld.w	r8,r8[0x68]
8000a346:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000a34a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a34e:	f0 f8 00 80 	ld.w	r8,r8[128]
8000a352:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000a356:	ef 48 ff e0 	st.w	r7[-32],r8
				dbg_print(") - ");
				dbg_print_num(pos_est->localPosition.pos[2],10);
				dbg_print(" + ");
				dbg_print_num(pos_est->localPosition.origin.altitude,10);
				dbg_print("\n");*/
				pos_est->timeLastBarometerMsg=barometer->last_update;
8000a35a:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000a35e:	70 a9       	ld.w	r9,r8[0x28]
8000a360:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a364:	91 99       	st.w	r8[0x24],r9
			}
			tinterBaro = (get_micros()-barometer->last_update)/1000.0;
8000a366:	f0 16 00 29 	mcall	r6[164]
8000a36a:	18 99       	mov	r9,r12
8000a36c:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000a370:	70 a8       	ld.w	r8,r8[0x28]
8000a372:	f2 08 01 08 	sub	r8,r9,r8
8000a376:	10 9c       	mov	r12,r8
8000a378:	f0 16 00 52 	mcall	r6[328]
8000a37c:	30 08       	mov	r8,0
8000a37e:	e0 69 40 00 	mov	r9,16384
8000a382:	ea 19 40 8f 	orh	r9,0x408f
8000a386:	f0 16 00 0c 	mcall	r6[48]
8000a38a:	14 98       	mov	r8,r10
8000a38c:	16 99       	mov	r9,r11
8000a38e:	10 9a       	mov	r10,r8
8000a390:	12 9b       	mov	r11,r9
8000a392:	f0 16 00 80 	mcall	r6[512]
8000a396:	18 98       	mov	r8,r12
8000a398:	ef 48 ff f8 	st.w	r7[-8],r8
			baro_gain=1.0;//fmax(1.0-tinterBaro/1000.0, 0.0);
8000a39c:	fc 18 3f 80 	movh	r8,0x3f80
8000a3a0:	ef 48 ff e8 	st.w	r7[-24],r8
			
			//pos_est->localPosition.pos[2] += kp_alt/((float)(tinterBaro/2.5 + 1.0)) * alt_error;
			baro_alt_error=pos_est->last_alt  - pos_est->localPosition.pos[2];
8000a3a4:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a3a8:	71 49       	ld.w	r9,r8[0x50]
8000a3aa:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a3ae:	71 a8       	ld.w	r8,r8[0x68]
8000a3b0:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000a3b4:	ef 48 ff e0 	st.w	r7[-32],r8
			baro_vel_error=barometer->vario_vz - pos_est->vel[2];
8000a3b8:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000a3bc:	70 99       	ld.w	r9,r8[0x24]
8000a3be:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a3c2:	71 08       	ld.w	r8,r8[0x40]
8000a3c4:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000a3c8:	ef 48 ff e4 	st.w	r7[-28],r8
8000a3cc:	c0 78       	rjmp	8000a3da <position_correction+0x174>
			//vel_error[2]=0.1*pos_error[2];
			//pos_est->vel[2] += kp_alt_v * vel_error[2];
				
		}else{
			init_barometer_offset(pos_est, barometer);
8000a3ce:	ee fb ff 54 	ld.w	r11,r7[-172]
8000a3d2:	ee fc ff 58 	ld.w	r12,r7[-168]
8000a3d6:	f0 16 02 15 	mcall	r6[2132]
		}
	
		if (pos_est->init_gps_position)
8000a3da:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a3de:	f1 38 00 28 	ld.ub	r8,r8[40]
8000a3e2:	58 08       	cp.w	r8,0
8000a3e4:	e0 80 01 9c 	breq	8000a71c <position_correction+0x4b6>
		{
			if (newValidGpsMsg(&pos_est->timeLastGpsMsg))
8000a3e8:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a3ec:	2e 08       	sub	r8,-32
8000a3ee:	10 9c       	mov	r12,r8
8000a3f0:	f0 16 00 9a 	mcall	r6[616]
8000a3f4:	18 98       	mov	r8,r12
8000a3f6:	58 08       	cp.w	r8,0
8000a3f8:	e0 80 01 07 	breq	8000a606 <position_correction+0x3a0>
			{
				//dbg_print("New valid message\n");
				global_gps_position.longitude = gps->longitude;
8000a3fc:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000a400:	f0 e8 00 08 	ld.d	r8,r8[8]
8000a404:	ee e9 ff c4 	st.d	r7[-60],r8
				global_gps_position.latitude = gps->latitude;
8000a408:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000a40c:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a410:	ee e9 ff cc 	st.d	r7[-52],r8
				global_gps_position.altitude = gps->altitude;
8000a414:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000a418:	70 48       	ld.w	r8,r8[0x10]
8000a41a:	ef 48 ff d4 	st.w	r7[-44],r8
				global_gps_position.heading=0.0;
8000a41e:	30 08       	mov	r8,0
8000a420:	ef 48 ff d8 	st.w	r7[-40],r8
				local_coordinates = global_to_local_position(global_gps_position,pos_est->localPosition.origin);
8000a424:	ee cc 00 e4 	sub	r12,r7,228
8000a428:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a42c:	20 7d       	sub	sp,28
8000a42e:	1a 99       	mov	r9,sp
8000a430:	12 9a       	mov	r10,r9
8000a432:	f0 cb ff 90 	sub	r11,r8,-112
8000a436:	f4 c8 00 00 	sub	r8,r10,0
8000a43a:	f6 c9 00 00 	sub	r9,r11,0
8000a43e:	72 0e       	ld.w	lr,r9[0x0]
8000a440:	91 0e       	st.w	r8[0x0],lr
8000a442:	72 1e       	ld.w	lr,r9[0x4]
8000a444:	91 1e       	st.w	r8[0x4],lr
8000a446:	72 2e       	ld.w	lr,r9[0x8]
8000a448:	91 2e       	st.w	r8[0x8],lr
8000a44a:	72 39       	ld.w	r9,r9[0xc]
8000a44c:	91 39       	st.w	r8[0xc],r9
8000a44e:	f6 e8 00 10 	ld.d	r8,r11[16]
8000a452:	f4 e9 00 10 	st.d	r10[16],r8
8000a456:	76 68       	ld.w	r8,r11[0x18]
8000a458:	95 68       	st.w	r10[0x18],r8
8000a45a:	20 7d       	sub	sp,28
8000a45c:	1a 98       	mov	r8,sp
8000a45e:	10 9a       	mov	r10,r8
8000a460:	ee cb 00 3c 	sub	r11,r7,60
8000a464:	f4 c8 00 00 	sub	r8,r10,0
8000a468:	f6 c9 00 00 	sub	r9,r11,0
8000a46c:	72 0e       	ld.w	lr,r9[0x0]
8000a46e:	91 0e       	st.w	r8[0x0],lr
8000a470:	72 1e       	ld.w	lr,r9[0x4]
8000a472:	91 1e       	st.w	r8[0x4],lr
8000a474:	72 2e       	ld.w	lr,r9[0x8]
8000a476:	91 2e       	st.w	r8[0x8],lr
8000a478:	72 39       	ld.w	r9,r9[0xc]
8000a47a:	91 39       	st.w	r8[0xc],r9
8000a47c:	f6 e8 00 10 	ld.d	r8,r11[16]
8000a480:	f4 e9 00 10 	st.d	r10[16],r8
8000a484:	76 68       	ld.w	r8,r11[0x18]
8000a486:	95 68       	st.w	r10[0x18],r8
8000a488:	f0 16 00 7f 	mcall	r6[508]
8000a48c:	2f 2d       	sub	sp,-56
8000a48e:	ee cb 00 6c 	sub	r11,r7,108
8000a492:	ee ca 00 e4 	sub	r10,r7,228
8000a496:	f6 c8 00 00 	sub	r8,r11,0
8000a49a:	f4 c9 00 00 	sub	r9,r10,0
8000a49e:	72 0c       	ld.w	r12,r9[0x0]
8000a4a0:	91 0c       	st.w	r8[0x0],r12
8000a4a2:	72 1c       	ld.w	r12,r9[0x4]
8000a4a4:	91 1c       	st.w	r8[0x4],r12
8000a4a6:	72 2c       	ld.w	r12,r9[0x8]
8000a4a8:	91 2c       	st.w	r8[0x8],r12
8000a4aa:	72 39       	ld.w	r9,r9[0xc]
8000a4ac:	91 39       	st.w	r8[0xc],r9
8000a4ae:	f6 c8 ff f0 	sub	r8,r11,-16
8000a4b2:	f4 c9 ff f0 	sub	r9,r10,-16
8000a4b6:	72 0c       	ld.w	r12,r9[0x0]
8000a4b8:	91 0c       	st.w	r8[0x0],r12
8000a4ba:	72 1c       	ld.w	r12,r9[0x4]
8000a4bc:	91 1c       	st.w	r8[0x4],r12
8000a4be:	72 2c       	ld.w	r12,r9[0x8]
8000a4c0:	91 2c       	st.w	r8[0x8],r12
8000a4c2:	72 39       	ld.w	r9,r9[0xc]
8000a4c4:	91 39       	st.w	r8[0xc],r9
8000a4c6:	f6 c8 ff e0 	sub	r8,r11,-32
8000a4ca:	f4 c9 ff e0 	sub	r9,r10,-32
8000a4ce:	72 0a       	ld.w	r10,r9[0x0]
8000a4d0:	91 0a       	st.w	r8[0x0],r10
8000a4d2:	72 1a       	ld.w	r10,r9[0x4]
8000a4d4:	91 1a       	st.w	r8[0x4],r10
8000a4d6:	72 2a       	ld.w	r10,r9[0x8]
8000a4d8:	91 2a       	st.w	r8[0x8],r10
8000a4da:	72 39       	ld.w	r9,r9[0xc]
8000a4dc:	91 39       	st.w	r8[0xc],r9
				local_coordinates.timestamp_ms=gps->timeLastMsg;
8000a4de:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000a4e2:	71 18       	ld.w	r8,r8[0x44]
8000a4e4:	ef 48 ff c0 	st.w	r7[-64],r8
				// compute GPS velocity estimate
				gps_dt=(local_coordinates.timestamp_ms - pos_est->lastGpsPos.timestamp_ms)/1000.0;
8000a4e8:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000a4ec:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a4f0:	f0 f8 00 bc 	ld.w	r8,r8[188]
8000a4f4:	f2 08 01 08 	sub	r8,r9,r8
8000a4f8:	10 9c       	mov	r12,r8
8000a4fa:	f0 16 00 52 	mcall	r6[328]
8000a4fe:	30 08       	mov	r8,0
8000a500:	e0 69 40 00 	mov	r9,16384
8000a504:	ea 19 40 8f 	orh	r9,0x408f
8000a508:	f0 16 00 0c 	mcall	r6[48]
8000a50c:	14 98       	mov	r8,r10
8000a50e:	16 99       	mov	r9,r11
8000a510:	10 9a       	mov	r10,r8
8000a512:	12 9b       	mov	r11,r9
8000a514:	f0 16 00 09 	mcall	r6[36]
8000a518:	18 98       	mov	r8,r12
8000a51a:	ef 48 ff f0 	st.w	r7[-16],r8
				if (gps_dt>0.001) {
8000a51e:	ee fc ff f0 	ld.w	r12,r7[-16]
8000a522:	f0 16 00 02 	mcall	r6[8]
8000a526:	14 98       	mov	r8,r10
8000a528:	16 99       	mov	r9,r11
8000a52a:	30 05       	mov	r5,0
8000a52c:	e0 6a a9 fc 	mov	r10,43516
8000a530:	ea 1a d2 f1 	orh	r10,0xd2f1
8000a534:	e0 6b 62 4d 	mov	r11,25165
8000a538:	ea 1b 3f 50 	orh	r11,0x3f50
8000a53c:	f0 16 00 1c 	mcall	r6[112]
8000a540:	18 98       	mov	r8,r12
8000a542:	58 08       	cp.w	r8,0
8000a544:	c0 20       	breq	8000a548 <position_correction+0x2e2>
8000a546:	30 15       	mov	r5,1
8000a548:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000a54c:	c5 90       	breq	8000a5fe <position_correction+0x398>
					for (i=0; i<3; i++) pos_est->last_vel[i] = (local_coordinates.pos[i]-pos_est->lastGpsPos.pos[i])/gps_dt;
8000a54e:	30 08       	mov	r8,0
8000a550:	ef 48 ff fc 	st.w	r7[-4],r8
8000a554:	c2 58       	rjmp	8000a59e <position_correction+0x338>
8000a556:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000a55a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a55e:	a3 68       	lsl	r8,0x2
8000a560:	ee 08 00 08 	add	r8,r7,r8
8000a564:	f0 f9 ff 94 	ld.w	r9,r8[-108]
8000a568:	ee fa ff fc 	ld.w	r10,r7[-4]
8000a56c:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a570:	2d ca       	sub	r10,-36
8000a572:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000a576:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000a57a:	ee fb ff f0 	ld.w	r11,r7[-16]
8000a57e:	10 9c       	mov	r12,r8
8000a580:	f0 16 00 08 	mcall	r6[32]
8000a584:	18 98       	mov	r8,r12
8000a586:	10 9a       	mov	r10,r8
8000a588:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a58c:	ea c9 ff eb 	sub	r9,r5,-21
8000a590:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000a594:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a598:	2f f8       	sub	r8,-1
8000a59a:	ef 48 ff fc 	st.w	r7[-4],r8
8000a59e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a5a2:	58 28       	cp.w	r8,2
8000a5a4:	fe 9a ff d9 	brle	8000a556 <position_correction+0x2f0>
					pos_est->lastGpsPos=local_coordinates;
8000a5a8:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a5ac:	f0 cb ff 70 	sub	r11,r8,-144
8000a5b0:	ee ca 00 6c 	sub	r10,r7,108
8000a5b4:	f6 c8 00 00 	sub	r8,r11,0
8000a5b8:	f4 c9 00 00 	sub	r9,r10,0
8000a5bc:	72 0c       	ld.w	r12,r9[0x0]
8000a5be:	91 0c       	st.w	r8[0x0],r12
8000a5c0:	72 1c       	ld.w	r12,r9[0x4]
8000a5c2:	91 1c       	st.w	r8[0x4],r12
8000a5c4:	72 2c       	ld.w	r12,r9[0x8]
8000a5c6:	91 2c       	st.w	r8[0x8],r12
8000a5c8:	72 39       	ld.w	r9,r9[0xc]
8000a5ca:	91 39       	st.w	r8[0xc],r9
8000a5cc:	f6 c8 ff f0 	sub	r8,r11,-16
8000a5d0:	f4 c9 ff f0 	sub	r9,r10,-16
8000a5d4:	72 0c       	ld.w	r12,r9[0x0]
8000a5d6:	91 0c       	st.w	r8[0x0],r12
8000a5d8:	72 1c       	ld.w	r12,r9[0x4]
8000a5da:	91 1c       	st.w	r8[0x4],r12
8000a5dc:	72 2c       	ld.w	r12,r9[0x8]
8000a5de:	91 2c       	st.w	r8[0x8],r12
8000a5e0:	72 39       	ld.w	r9,r9[0xc]
8000a5e2:	91 39       	st.w	r8[0xc],r9
8000a5e4:	f6 c8 ff e0 	sub	r8,r11,-32
8000a5e8:	f4 c9 ff e0 	sub	r9,r10,-32
8000a5ec:	72 0a       	ld.w	r10,r9[0x0]
8000a5ee:	91 0a       	st.w	r8[0x0],r10
8000a5f0:	72 1a       	ld.w	r10,r9[0x4]
8000a5f2:	91 1a       	st.w	r8[0x4],r10
8000a5f4:	72 2a       	ld.w	r10,r9[0x8]
8000a5f6:	91 2a       	st.w	r8[0x8],r10
8000a5f8:	72 39       	ld.w	r9,r9[0xc]
8000a5fa:	91 39       	st.w	r8[0xc],r9
8000a5fc:	c0 58       	rjmp	8000a606 <position_correction+0x3a0>
				} else dbg_print("GPS dt is too small!");
8000a5fe:	fe cc 03 ae 	sub	r12,pc,942
8000a602:	f0 16 00 01 	mcall	r6[4]
			}
			tinterGps = get_millis() - gps->timeLastMsg;
8000a606:	f0 16 00 0f 	mcall	r6[60]
8000a60a:	18 99       	mov	r9,r12
8000a60c:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000a610:	71 18       	ld.w	r8,r8[0x44]
8000a612:	10 19       	sub	r9,r8
8000a614:	ef 49 ff f4 	st.w	r7[-12],r9
			
			gps_gain=fmax(1.0-tinterGps/1000.0, 0.0);
8000a618:	ee fc ff f4 	ld.w	r12,r7[-12]
8000a61c:	f0 16 00 52 	mcall	r6[328]
8000a620:	30 08       	mov	r8,0
8000a622:	e0 69 40 00 	mov	r9,16384
8000a626:	ea 19 c0 8f 	orh	r9,0xc08f
8000a62a:	f0 16 00 0c 	mcall	r6[48]
8000a62e:	14 98       	mov	r8,r10
8000a630:	16 99       	mov	r9,r11
8000a632:	10 9a       	mov	r10,r8
8000a634:	12 9b       	mov	r11,r9
8000a636:	30 08       	mov	r8,0
8000a638:	fc 19 3f f0 	movh	r9,0x3ff0
8000a63c:	f0 16 00 05 	mcall	r6[20]
8000a640:	14 98       	mov	r8,r10
8000a642:	16 99       	mov	r9,r11
8000a644:	30 05       	mov	r5,0
8000a646:	30 0a       	mov	r10,0
8000a648:	30 0b       	mov	r11,0
8000a64a:	f0 16 00 1c 	mcall	r6[112]
8000a64e:	18 98       	mov	r8,r12
8000a650:	58 08       	cp.w	r8,0
8000a652:	c0 20       	breq	8000a656 <position_correction+0x3f0>
8000a654:	30 15       	mov	r5,1
8000a656:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000a65a:	c1 d0       	breq	8000a694 <position_correction+0x42e>
8000a65c:	ee fc ff f4 	ld.w	r12,r7[-12]
8000a660:	f0 16 00 52 	mcall	r6[328]
8000a664:	30 08       	mov	r8,0
8000a666:	e0 69 40 00 	mov	r9,16384
8000a66a:	ea 19 c0 8f 	orh	r9,0xc08f
8000a66e:	f0 16 00 0c 	mcall	r6[48]
8000a672:	14 98       	mov	r8,r10
8000a674:	16 99       	mov	r9,r11
8000a676:	10 9a       	mov	r10,r8
8000a678:	12 9b       	mov	r11,r9
8000a67a:	30 08       	mov	r8,0
8000a67c:	fc 19 3f f0 	movh	r9,0x3ff0
8000a680:	f0 16 00 05 	mcall	r6[20]
8000a684:	14 98       	mov	r8,r10
8000a686:	16 99       	mov	r9,r11
8000a688:	10 9a       	mov	r10,r8
8000a68a:	12 9b       	mov	r11,r9
8000a68c:	f0 16 00 09 	mcall	r6[36]
8000a690:	18 98       	mov	r8,r12
8000a692:	c0 28       	rjmp	8000a696 <position_correction+0x430>
8000a694:	30 08       	mov	r8,0
8000a696:	ef 48 ff ec 	st.w	r7[-20],r8
			gps_gain=1.0;
8000a69a:	fc 18 3f 80 	movh	r8,0x3f80
8000a69e:	ef 48 ff ec 	st.w	r7[-20],r8
			
			for (i=0;i<3;i++){
8000a6a2:	30 08       	mov	r8,0
8000a6a4:	ef 48 ff fc 	st.w	r7[-4],r8
8000a6a8:	c3 48       	rjmp	8000a710 <position_correction+0x4aa>
				pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
8000a6aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a6ae:	ee fa ff fc 	ld.w	r10,r7[-4]
8000a6b2:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000a6b6:	2d ca       	sub	r10,-36
8000a6b8:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8000a6bc:	ee fb ff fc 	ld.w	r11,r7[-4]
8000a6c0:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000a6c4:	2e 8b       	sub	r11,-24
8000a6c6:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8000a6ca:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000a6ce:	a3 68       	lsl	r8,0x2
8000a6d0:	ee 08 00 08 	add	r8,r7,r8
8000a6d4:	f1 49 ff 68 	st.w	r8[-152],r9
				vel_error[i] = pos_est->last_vel[i]       - pos_est->vel[i]; 
8000a6d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a6dc:	ee fa ff fc 	ld.w	r10,r7[-4]
8000a6e0:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000a6e4:	2e ba       	sub	r10,-21
8000a6e6:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8000a6ea:	ee fb ff fc 	ld.w	r11,r7[-4]
8000a6ee:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000a6f2:	2f 2b       	sub	r11,-14
8000a6f4:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8000a6f8:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000a6fc:	a3 68       	lsl	r8,0x2
8000a6fe:	ee 08 00 08 	add	r8,r7,r8
8000a702:	f1 49 ff 5c 	st.w	r8[-164],r9
			tinterGps = get_millis() - gps->timeLastMsg;
			
			gps_gain=fmax(1.0-tinterGps/1000.0, 0.0);
			gps_gain=1.0;
			
			for (i=0;i<3;i++){
8000a706:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a70a:	2f f8       	sub	r8,-1
8000a70c:	ef 48 ff fc 	st.w	r7[-4],r8
8000a710:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a714:	58 28       	cp.w	r8,2
8000a716:	fe 9a ff ca 	brle	8000a6aa <position_correction+0x444>
8000a71a:	c2 b8       	rjmp	8000a770 <position_correction+0x50a>
				pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				vel_error[i] = pos_est->last_vel[i]       - pos_est->vel[i]; 
			}
		}else{
			init_pos_gps(pos_est, gps);
8000a71c:	ee fb ff 50 	ld.w	r11,r7[-176]
8000a720:	ee fc ff 58 	ld.w	r12,r7[-168]
8000a724:	f0 16 00 eb 	mcall	r6[940]
			for (i=0;i<2;i++){
8000a728:	30 08       	mov	r8,0
8000a72a:	ef 48 ff fc 	st.w	r7[-4],r8
8000a72e:	c1 68       	rjmp	8000a75a <position_correction+0x4f4>
				//pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				pos_error[i] = 0.0;
8000a730:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a734:	a3 68       	lsl	r8,0x2
8000a736:	ee 08 00 08 	add	r8,r7,r8
8000a73a:	30 09       	mov	r9,0
8000a73c:	f1 49 ff 68 	st.w	r8[-152],r9
				vel_error[i] = 0.0;
8000a740:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a744:	a3 68       	lsl	r8,0x2
8000a746:	ee 08 00 08 	add	r8,r7,r8
8000a74a:	30 09       	mov	r9,0
8000a74c:	f1 49 ff 5c 	st.w	r8[-164],r9
				pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				vel_error[i] = pos_est->last_vel[i]       - pos_est->vel[i]; 
			}
		}else{
			init_pos_gps(pos_est, gps);
			for (i=0;i<2;i++){
8000a750:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a754:	2f f8       	sub	r8,-1
8000a756:	ef 48 ff fc 	st.w	r7[-4],r8
8000a75a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a75e:	58 18       	cp.w	r8,1
8000a760:	fe 9a ff e8 	brle	8000a730 <position_correction+0x4ca>
				//pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				pos_error[i] = 0.0;
				vel_error[i] = 0.0;
			}
			gps_gain=0.1;
8000a764:	e0 68 cc cd 	mov	r8,52429
8000a768:	ea 18 3d cc 	orh	r8,0x3dcc
8000a76c:	ef 48 ff ec 	st.w	r7[-20],r8
		}
		
		// Apply error correction to velocity and position estimates
		for (i=0;i<3;i++) {
8000a770:	30 08       	mov	r8,0
8000a772:	ef 48 ff fc 	st.w	r7[-4],r8
8000a776:	c2 e8       	rjmp	8000a7d2 <position_correction+0x56c>
			pos_est->localPosition.pos[i] += pos_est->kp_pos[i] * gps_gain * pos_error[i]* dt;
8000a778:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a77c:	ee fa ff fc 	ld.w	r10,r7[-4]
8000a780:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a784:	2e 8a       	sub	r10,-24
8000a786:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000a78a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000a78e:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a792:	2f db       	sub	r11,-3
8000a794:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8000a798:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a79c:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000a7a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a7a4:	a3 68       	lsl	r8,0x2
8000a7a6:	ee 08 00 08 	add	r8,r7,r8
8000a7aa:	f0 f8 ff 68 	ld.w	r8,r8[-152]
8000a7ae:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000a7b2:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000a7b6:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000a7ba:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8000a7be:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a7c2:	2e 89       	sub	r9,-24
8000a7c4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			}
			gps_gain=0.1;
		}
		
		// Apply error correction to velocity and position estimates
		for (i=0;i<3;i++) {
8000a7c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a7cc:	2f f8       	sub	r8,-1
8000a7ce:	ef 48 ff fc 	st.w	r7[-4],r8
8000a7d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a7d6:	58 28       	cp.w	r8,2
8000a7d8:	fe 9a ff d0 	brle	8000a778 <position_correction+0x512>
			pos_est->localPosition.pos[i] += pos_est->kp_pos[i] * gps_gain * pos_error[i]* dt;
		}
		pos_est->localPosition.pos[2] += pos_est->kp_alt * baro_gain * baro_alt_error* dt;
8000a7dc:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a7e0:	71 a9       	ld.w	r9,r8[0x68]
8000a7e2:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a7e6:	70 6a       	ld.w	r10,r8[0x18]
8000a7e8:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000a7ec:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000a7f0:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000a7f4:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000a7f8:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000a7fc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000a800:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000a804:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a808:	f1 49 00 68 	st.w	r8[104],r9


		for (i=0; i<3; i++) vel_correction.v[i] = vel_error[i];
8000a80c:	30 08       	mov	r8,0
8000a80e:	ef 48 ff fc 	st.w	r7[-4],r8
8000a812:	c1 68       	rjmp	8000a83e <position_correction+0x5d8>
8000a814:	ee fa ff fc 	ld.w	r10,r7[-4]
8000a818:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a81c:	a3 68       	lsl	r8,0x2
8000a81e:	ee 08 00 08 	add	r8,r7,r8
8000a822:	f0 f9 ff 5c 	ld.w	r9,r8[-164]
8000a826:	f4 c8 ff ff 	sub	r8,r10,-1
8000a82a:	a3 68       	lsl	r8,0x2
8000a82c:	ee 08 00 08 	add	r8,r7,r8
8000a830:	f1 49 ff 74 	st.w	r8[-140],r9
8000a834:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a838:	2f f8       	sub	r8,-1
8000a83a:	ef 48 ff fc 	st.w	r7[-4],r8
8000a83e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a842:	58 28       	cp.w	r8,2
8000a844:	fe 9a ff e8 	brle	8000a814 <position_correction+0x5ae>
		//for (i=0; i<3; i++) vel_correction.v[i] = pos_error[i];
		//vel_correction = quat_global_to_local(pos_est->qe, vel_correction);
				
		for (i=0;i<3;i++) {			
8000a848:	30 08       	mov	r8,0
8000a84a:	ef 48 ff fc 	st.w	r7[-4],r8
8000a84e:	c2 e8       	rjmp	8000a8aa <position_correction+0x644>
			pos_est->vel[i] += pos_est->kp_vel[i]*gps_gain * vel_correction.v[i]* dt;
8000a850:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a854:	ee fa ff fc 	ld.w	r10,r7[-4]
8000a858:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a85c:	2f 2a       	sub	r10,-14
8000a85e:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000a862:	ee fb ff fc 	ld.w	r11,r7[-4]
8000a866:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a86a:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8000a86e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a872:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000a876:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a87a:	2f f8       	sub	r8,-1
8000a87c:	a3 68       	lsl	r8,0x2
8000a87e:	ee 08 00 08 	add	r8,r7,r8
8000a882:	f0 f8 ff 74 	ld.w	r8,r8[-140]
8000a886:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000a88a:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000a88e:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000a892:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8000a896:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a89a:	2f 29       	sub	r9,-14
8000a89c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

		for (i=0; i<3; i++) vel_correction.v[i] = vel_error[i];
		//for (i=0; i<3; i++) vel_correction.v[i] = pos_error[i];
		//vel_correction = quat_global_to_local(pos_est->qe, vel_correction);
				
		for (i=0;i<3;i++) {			
8000a8a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a8a4:	2f f8       	sub	r8,-1
8000a8a6:	ef 48 ff fc 	st.w	r7[-4],r8
8000a8aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a8ae:	58 28       	cp.w	r8,2
8000a8b0:	fe 9a ff d0 	brle	8000a850 <position_correction+0x5ea>
			pos_est->vel[i] += pos_est->kp_vel[i]*gps_gain * vel_correction.v[i]* dt;
		}
		pos_est->vel[2] += pos_est->kp_vel_baro * baro_gain * baro_vel_error* dt;
8000a8b4:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a8b8:	71 09       	ld.w	r9,r8[0x40]
8000a8ba:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a8be:	70 7a       	ld.w	r10,r8[0x1c]
8000a8c0:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000a8c4:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000a8c8:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000a8cc:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000a8d0:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000a8d4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000a8d8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000a8dc:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000a8e0:	f1 49 00 40 	st.w	r8[64],r9

	}
8000a8e4:	2c 7d       	sub	sp,-228
8000a8e6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000a8ea:	00 00       	add	r0,r0
8000a8ec:	80 00       	ld.sh	r0,r0[0x0]
8000a8ee:	a0 f8       	st.b	r0[0x7],r8

8000a8f0 <quat_from_vector>:
	out.v[2] = -q.v[2];

#define QUAT(q, s, v0, v1, v2) \
	q.s=s; q.v[0]=v0; q.v[1]=v1; q.v[2]=v2;

UQuat_t static inline quat_from_vector(float *v) {
8000a8f0:	eb cd 40 80 	pushm	r7,lr
8000a8f4:	1a 97       	mov	r7,sp
8000a8f6:	20 5d       	sub	sp,20
8000a8f8:	18 9a       	mov	r10,r12
8000a8fa:	ef 4b ff ec 	st.w	r7[-20],r11
	UQuat_t q;	
	q.s=0; 
8000a8fe:	30 08       	mov	r8,0
8000a900:	ef 48 ff f0 	st.w	r7[-16],r8
	q.v[0]=v[0]; 
8000a904:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a908:	70 08       	ld.w	r8,r8[0x0]
8000a90a:	ef 48 ff f4 	st.w	r7[-12],r8
	q.v[1]=v[1]; 
8000a90e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a912:	2f c8       	sub	r8,-4
8000a914:	70 08       	ld.w	r8,r8[0x0]
8000a916:	ef 48 ff f8 	st.w	r7[-8],r8
	q.v[2]=v[2];
8000a91a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a91e:	2f 88       	sub	r8,-8
8000a920:	70 08       	ld.w	r8,r8[0x0]
8000a922:	ef 48 ff fc 	st.w	r7[-4],r8
	return q;
8000a926:	14 98       	mov	r8,r10
8000a928:	ee c9 00 10 	sub	r9,r7,16
8000a92c:	20 08       	sub	r8,0
8000a92e:	20 09       	sub	r9,0
8000a930:	72 0b       	ld.w	r11,r9[0x0]
8000a932:	91 0b       	st.w	r8[0x0],r11
8000a934:	72 1b       	ld.w	r11,r9[0x4]
8000a936:	91 1b       	st.w	r8[0x4],r11
8000a938:	72 2b       	ld.w	r11,r9[0x8]
8000a93a:	91 2b       	st.w	r8[0x8],r11
8000a93c:	72 39       	ld.w	r9,r9[0xc]
8000a93e:	91 39       	st.w	r8[0xc],r9
}
8000a940:	14 9c       	mov	r12,r10
8000a942:	2f bd       	sub	sp,-20
8000a944:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a948 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8000a948:	eb cd 40 80 	pushm	r7,lr
8000a94c:	1a 97       	mov	r7,sp
8000a94e:	20 3d       	sub	sp,12
8000a950:	ef 4c ff f8 	st.w	r7[-8],r12
8000a954:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8000a958:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a95c:	70 09       	ld.w	r9,r8[0x0]
8000a95e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a962:	70 08       	ld.w	r8,r8[0x0]
8000a964:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000a968:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a96c:	2f c8       	sub	r8,-4
8000a96e:	70 0a       	ld.w	r10,r8[0x0]
8000a970:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a974:	2f c8       	sub	r8,-4
8000a976:	70 08       	ld.w	r8,r8[0x0]
8000a978:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000a97c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000a980:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a984:	2f 88       	sub	r8,-8
8000a986:	70 0a       	ld.w	r10,r8[0x0]
8000a988:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a98c:	2f 88       	sub	r8,-8
8000a98e:	70 08       	ld.w	r8,r8[0x0]
8000a990:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000a994:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000a998:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8000a99c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000a9a0:	10 9c       	mov	r12,r8
8000a9a2:	2f dd       	sub	sp,-12
8000a9a4:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a9a8 <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
8000a9a8:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000a9ac:	1a 97       	mov	r7,sp
8000a9ae:	20 7d       	sub	sp,28
8000a9b0:	4b d6       	lddpc	r6,8000aaa4 <quat_multi+0xfc>
8000a9b2:	1e 26       	rsub	r6,pc
8000a9b4:	ee c8 ff ec 	sub	r8,r7,-20
8000a9b8:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8000a9ba:	70 2a       	ld.w	r10,r8[0x8]
8000a9bc:	70 79       	ld.w	r9,r8[0x1c]
8000a9be:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000a9c2:	70 3b       	ld.w	r11,r8[0xc]
8000a9c4:	70 69       	ld.w	r9,r8[0x18]
8000a9c6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000a9ca:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000a9ce:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
8000a9d2:	70 3a       	ld.w	r10,r8[0xc]
8000a9d4:	70 59       	ld.w	r9,r8[0x14]
8000a9d6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000a9da:	70 1b       	ld.w	r11,r8[0x4]
8000a9dc:	70 79       	ld.w	r9,r8[0x1c]
8000a9de:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000a9e2:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000a9e6:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8000a9ea:	70 1a       	ld.w	r10,r8[0x4]
8000a9ec:	70 69       	ld.w	r9,r8[0x18]
8000a9ee:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000a9f2:	70 2b       	ld.w	r11,r8[0x8]
8000a9f4:	70 59       	ld.w	r9,r8[0x14]
8000a9f6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000a9fa:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000a9fe:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
8000aa02:	70 4a       	ld.w	r10,r8[0x10]
8000aa04:	70 19       	ld.w	r9,r8[0x4]
8000aa06:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000aa0a:	70 0b       	ld.w	r11,r8[0x0]
8000aa0c:	70 59       	ld.w	r9,r8[0x14]
8000aa0e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000aa12:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000aa16:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000aa1a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000aa1e:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
8000aa22:	70 4a       	ld.w	r10,r8[0x10]
8000aa24:	70 29       	ld.w	r9,r8[0x8]
8000aa26:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000aa2a:	70 0b       	ld.w	r11,r8[0x0]
8000aa2c:	70 69       	ld.w	r9,r8[0x18]
8000aa2e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000aa32:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000aa36:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000aa3a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000aa3e:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8000aa42:	70 4a       	ld.w	r10,r8[0x10]
8000aa44:	70 39       	ld.w	r9,r8[0xc]
8000aa46:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000aa4a:	70 0b       	ld.w	r11,r8[0x0]
8000aa4c:	70 79       	ld.w	r9,r8[0x1c]
8000aa4e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000aa52:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000aa56:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000aa5a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000aa5e:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8000aa62:	70 0a       	ld.w	r10,r8[0x0]
8000aa64:	70 49       	ld.w	r9,r8[0x10]
8000aa66:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8000aa6a:	f0 c9 ff f0 	sub	r9,r8,-16
8000aa6e:	2f c9       	sub	r9,-4
8000aa70:	2f c8       	sub	r8,-4
8000aa72:	12 9b       	mov	r11,r9
8000aa74:	10 9c       	mov	r12,r8
8000aa76:	c6 9f       	rcall	8000a948 <scalar_product>
8000aa78:	18 98       	mov	r8,r12
8000aa7a:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8000aa7e:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
8000aa82:	0a 98       	mov	r8,r5
8000aa84:	ee c9 00 1c 	sub	r9,r7,28
8000aa88:	20 08       	sub	r8,0
8000aa8a:	20 09       	sub	r9,0
8000aa8c:	72 0a       	ld.w	r10,r9[0x0]
8000aa8e:	91 0a       	st.w	r8[0x0],r10
8000aa90:	72 1a       	ld.w	r10,r9[0x4]
8000aa92:	91 1a       	st.w	r8[0x4],r10
8000aa94:	72 2a       	ld.w	r10,r9[0x8]
8000aa96:	91 2a       	st.w	r8[0x8],r10
8000aa98:	72 39       	ld.w	r9,r9[0xc]
8000aa9a:	91 39       	st.w	r8[0xc],r9
}
8000aa9c:	0a 9c       	mov	r12,r5
8000aa9e:	2f 9d       	sub	sp,-28
8000aaa0:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000aaa4:	80 00       	ld.sh	r0,r0[0x0]
8000aaa6:	a8 36       	st.h	r4[0x6],r6

8000aaa8 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
8000aaa8:	eb cd 40 80 	pushm	r7,lr
8000aaac:	1a 97       	mov	r7,sp
8000aaae:	20 5d       	sub	sp,20
8000aab0:	ee c9 ff f8 	sub	r9,r7,-8
8000aab4:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
8000aab6:	72 08       	ld.w	r8,r9[0x0]
8000aab8:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8000aabc:	30 08       	mov	r8,0
8000aabe:	ef 48 ff fc 	st.w	r7[-4],r8
8000aac2:	c1 58       	rjmp	8000aaec <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
8000aac4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aac8:	ee fb ff fc 	ld.w	r11,r7[-4]
8000aacc:	2f fb       	sub	r11,-1
8000aace:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
8000aad2:	ee 1b 80 00 	eorh	r11,0x8000
8000aad6:	2f f8       	sub	r8,-1
8000aad8:	a3 68       	lsl	r8,0x2
8000aada:	ee 08 00 08 	add	r8,r7,r8
8000aade:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
8000aae2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aae6:	2f f8       	sub	r8,-1
8000aae8:	ef 48 ff fc 	st.w	r7[-4],r8
8000aaec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aaf0:	58 28       	cp.w	r8,2
8000aaf2:	fe 9a ff e9 	brle	8000aac4 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8000aaf6:	14 98       	mov	r8,r10
8000aaf8:	ee c9 00 14 	sub	r9,r7,20
8000aafc:	20 08       	sub	r8,0
8000aafe:	20 09       	sub	r9,0
8000ab00:	72 0b       	ld.w	r11,r9[0x0]
8000ab02:	91 0b       	st.w	r8[0x0],r11
8000ab04:	72 1b       	ld.w	r11,r9[0x4]
8000ab06:	91 1b       	st.w	r8[0x4],r11
8000ab08:	72 2b       	ld.w	r11,r9[0x8]
8000ab0a:	91 2b       	st.w	r8[0x8],r11
8000ab0c:	72 39       	ld.w	r9,r9[0xc]
8000ab0e:	91 39       	st.w	r8[0xc],r9
}
8000ab10:	14 9c       	mov	r12,r10
8000ab12:	2f bd       	sub	sp,-20
8000ab14:	e3 cd 80 80 	ldm	sp++,r7,pc

8000ab18 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
8000ab18:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000ab1c:	1a 97       	mov	r7,sp
8000ab1e:	20 cd       	sub	sp,48
8000ab20:	4b c6       	lddpc	r6,8000ac10 <quat_global_to_local+0xf8>
8000ab22:	1e 26       	rsub	r6,pc
8000ab24:	ee c5 ff ec 	sub	r5,r7,-20
8000ab28:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000ab2a:	ee ca 00 10 	sub	r10,r7,16
8000ab2e:	20 4d       	sub	sp,16
8000ab30:	1a 98       	mov	r8,sp
8000ab32:	0a 99       	mov	r9,r5
8000ab34:	20 08       	sub	r8,0
8000ab36:	20 09       	sub	r9,0
8000ab38:	72 0b       	ld.w	r11,r9[0x0]
8000ab3a:	91 0b       	st.w	r8[0x0],r11
8000ab3c:	72 1b       	ld.w	r11,r9[0x4]
8000ab3e:	91 1b       	st.w	r8[0x4],r11
8000ab40:	72 2b       	ld.w	r11,r9[0x8]
8000ab42:	91 2b       	st.w	r8[0x8],r11
8000ab44:	72 39       	ld.w	r9,r9[0xc]
8000ab46:	91 39       	st.w	r8[0xc],r9
8000ab48:	14 9c       	mov	r12,r10
8000ab4a:	ca ff       	rcall	8000aaa8 <quat_inv>
8000ab4c:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8000ab4e:	ee ca 00 20 	sub	r10,r7,32
8000ab52:	20 4d       	sub	sp,16
8000ab54:	1a 98       	mov	r8,sp
8000ab56:	ea c9 ff f0 	sub	r9,r5,-16
8000ab5a:	20 08       	sub	r8,0
8000ab5c:	20 09       	sub	r9,0
8000ab5e:	72 0b       	ld.w	r11,r9[0x0]
8000ab60:	91 0b       	st.w	r8[0x0],r11
8000ab62:	72 1b       	ld.w	r11,r9[0x4]
8000ab64:	91 1b       	st.w	r8[0x4],r11
8000ab66:	72 2b       	ld.w	r11,r9[0x8]
8000ab68:	91 2b       	st.w	r8[0x8],r11
8000ab6a:	72 39       	ld.w	r9,r9[0xc]
8000ab6c:	91 39       	st.w	r8[0xc],r9
8000ab6e:	20 4d       	sub	sp,16
8000ab70:	1a 98       	mov	r8,sp
8000ab72:	ee c9 00 10 	sub	r9,r7,16
8000ab76:	20 08       	sub	r8,0
8000ab78:	20 09       	sub	r9,0
8000ab7a:	72 0b       	ld.w	r11,r9[0x0]
8000ab7c:	91 0b       	st.w	r8[0x0],r11
8000ab7e:	72 1b       	ld.w	r11,r9[0x4]
8000ab80:	91 1b       	st.w	r8[0x4],r11
8000ab82:	72 2b       	ld.w	r11,r9[0x8]
8000ab84:	91 2b       	st.w	r8[0x8],r11
8000ab86:	72 39       	ld.w	r9,r9[0xc]
8000ab88:	91 39       	st.w	r8[0xc],r9
8000ab8a:	14 9c       	mov	r12,r10
8000ab8c:	c0 ef       	rcall	8000a9a8 <quat_multi>
8000ab8e:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
8000ab90:	ee ca 00 30 	sub	r10,r7,48
8000ab94:	20 4d       	sub	sp,16
8000ab96:	1a 98       	mov	r8,sp
8000ab98:	0a 99       	mov	r9,r5
8000ab9a:	20 08       	sub	r8,0
8000ab9c:	20 09       	sub	r9,0
8000ab9e:	72 0b       	ld.w	r11,r9[0x0]
8000aba0:	91 0b       	st.w	r8[0x0],r11
8000aba2:	72 1b       	ld.w	r11,r9[0x4]
8000aba4:	91 1b       	st.w	r8[0x4],r11
8000aba6:	72 2b       	ld.w	r11,r9[0x8]
8000aba8:	91 2b       	st.w	r8[0x8],r11
8000abaa:	72 39       	ld.w	r9,r9[0xc]
8000abac:	91 39       	st.w	r8[0xc],r9
8000abae:	20 4d       	sub	sp,16
8000abb0:	1a 98       	mov	r8,sp
8000abb2:	ee c9 00 20 	sub	r9,r7,32
8000abb6:	20 08       	sub	r8,0
8000abb8:	20 09       	sub	r9,0
8000abba:	72 0b       	ld.w	r11,r9[0x0]
8000abbc:	91 0b       	st.w	r8[0x0],r11
8000abbe:	72 1b       	ld.w	r11,r9[0x4]
8000abc0:	91 1b       	st.w	r8[0x4],r11
8000abc2:	72 2b       	ld.w	r11,r9[0x8]
8000abc4:	91 2b       	st.w	r8[0x8],r11
8000abc6:	72 39       	ld.w	r9,r9[0xc]
8000abc8:	91 39       	st.w	r8[0xc],r9
8000abca:	14 9c       	mov	r12,r10
8000abcc:	ce ee       	rcall	8000a9a8 <quat_multi>
8000abce:	2f 8d       	sub	sp,-32
8000abd0:	ee c8 00 20 	sub	r8,r7,32
8000abd4:	ee c9 00 30 	sub	r9,r7,48
8000abd8:	20 08       	sub	r8,0
8000abda:	20 09       	sub	r9,0
8000abdc:	72 0a       	ld.w	r10,r9[0x0]
8000abde:	91 0a       	st.w	r8[0x0],r10
8000abe0:	72 1a       	ld.w	r10,r9[0x4]
8000abe2:	91 1a       	st.w	r8[0x4],r10
8000abe4:	72 2a       	ld.w	r10,r9[0x8]
8000abe6:	91 2a       	st.w	r8[0x8],r10
8000abe8:	72 39       	ld.w	r9,r9[0xc]
8000abea:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8000abec:	06 98       	mov	r8,r3
8000abee:	ee c9 00 20 	sub	r9,r7,32
8000abf2:	20 08       	sub	r8,0
8000abf4:	20 09       	sub	r9,0
8000abf6:	72 0a       	ld.w	r10,r9[0x0]
8000abf8:	91 0a       	st.w	r8[0x0],r10
8000abfa:	72 1a       	ld.w	r10,r9[0x4]
8000abfc:	91 1a       	st.w	r8[0x4],r10
8000abfe:	72 2a       	ld.w	r10,r9[0x8]
8000ac00:	91 2a       	st.w	r8[0x8],r10
8000ac02:	72 39       	ld.w	r9,r9[0xc]
8000ac04:	91 39       	st.w	r8[0xc],r9
}
8000ac06:	06 9c       	mov	r12,r3
8000ac08:	2f 4d       	sub	sp,-48
8000ac0a:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000ac0e:	00 00       	add	r0,r0
8000ac10:	80 00       	ld.sh	r0,r0[0x0]
8000ac12:	a9 a6       	sbr	r6,0x8

8000ac14 <quat_local_to_global>:

UQuat_t static inline quat_local_to_global(const UQuat_t qe, const UQuat_t qvect)
{
8000ac14:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000ac18:	1a 97       	mov	r7,sp
8000ac1a:	20 cd       	sub	sp,48
8000ac1c:	4b c6       	lddpc	r6,8000ad0c <quat_local_to_global+0xf8>
8000ac1e:	1e 26       	rsub	r6,pc
8000ac20:	ee c5 ff ec 	sub	r5,r7,-20
8000ac24:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000ac26:	ee ca 00 10 	sub	r10,r7,16
8000ac2a:	20 4d       	sub	sp,16
8000ac2c:	1a 98       	mov	r8,sp
8000ac2e:	0a 99       	mov	r9,r5
8000ac30:	20 08       	sub	r8,0
8000ac32:	20 09       	sub	r9,0
8000ac34:	72 0b       	ld.w	r11,r9[0x0]
8000ac36:	91 0b       	st.w	r8[0x0],r11
8000ac38:	72 1b       	ld.w	r11,r9[0x4]
8000ac3a:	91 1b       	st.w	r8[0x4],r11
8000ac3c:	72 2b       	ld.w	r11,r9[0x8]
8000ac3e:	91 2b       	st.w	r8[0x8],r11
8000ac40:	72 39       	ld.w	r9,r9[0xc]
8000ac42:	91 39       	st.w	r8[0xc],r9
8000ac44:	14 9c       	mov	r12,r10
8000ac46:	c3 1f       	rcall	8000aaa8 <quat_inv>
8000ac48:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qe, qvect);
8000ac4a:	ee ca 00 20 	sub	r10,r7,32
8000ac4e:	20 4d       	sub	sp,16
8000ac50:	1a 98       	mov	r8,sp
8000ac52:	ea c9 ff f0 	sub	r9,r5,-16
8000ac56:	20 08       	sub	r8,0
8000ac58:	20 09       	sub	r9,0
8000ac5a:	72 0b       	ld.w	r11,r9[0x0]
8000ac5c:	91 0b       	st.w	r8[0x0],r11
8000ac5e:	72 1b       	ld.w	r11,r9[0x4]
8000ac60:	91 1b       	st.w	r8[0x4],r11
8000ac62:	72 2b       	ld.w	r11,r9[0x8]
8000ac64:	91 2b       	st.w	r8[0x8],r11
8000ac66:	72 39       	ld.w	r9,r9[0xc]
8000ac68:	91 39       	st.w	r8[0xc],r9
8000ac6a:	20 4d       	sub	sp,16
8000ac6c:	1a 98       	mov	r8,sp
8000ac6e:	0a 99       	mov	r9,r5
8000ac70:	20 08       	sub	r8,0
8000ac72:	20 09       	sub	r9,0
8000ac74:	72 0b       	ld.w	r11,r9[0x0]
8000ac76:	91 0b       	st.w	r8[0x0],r11
8000ac78:	72 1b       	ld.w	r11,r9[0x4]
8000ac7a:	91 1b       	st.w	r8[0x4],r11
8000ac7c:	72 2b       	ld.w	r11,r9[0x8]
8000ac7e:	91 2b       	st.w	r8[0x8],r11
8000ac80:	72 39       	ld.w	r9,r9[0xc]
8000ac82:	91 39       	st.w	r8[0xc],r9
8000ac84:	14 9c       	mov	r12,r10
8000ac86:	c9 1e       	rcall	8000a9a8 <quat_multi>
8000ac88:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp, qinv);
8000ac8a:	ee ca 00 30 	sub	r10,r7,48
8000ac8e:	20 4d       	sub	sp,16
8000ac90:	1a 98       	mov	r8,sp
8000ac92:	ee c9 00 10 	sub	r9,r7,16
8000ac96:	20 08       	sub	r8,0
8000ac98:	20 09       	sub	r9,0
8000ac9a:	72 0b       	ld.w	r11,r9[0x0]
8000ac9c:	91 0b       	st.w	r8[0x0],r11
8000ac9e:	72 1b       	ld.w	r11,r9[0x4]
8000aca0:	91 1b       	st.w	r8[0x4],r11
8000aca2:	72 2b       	ld.w	r11,r9[0x8]
8000aca4:	91 2b       	st.w	r8[0x8],r11
8000aca6:	72 39       	ld.w	r9,r9[0xc]
8000aca8:	91 39       	st.w	r8[0xc],r9
8000acaa:	20 4d       	sub	sp,16
8000acac:	1a 98       	mov	r8,sp
8000acae:	ee c9 00 20 	sub	r9,r7,32
8000acb2:	20 08       	sub	r8,0
8000acb4:	20 09       	sub	r9,0
8000acb6:	72 0b       	ld.w	r11,r9[0x0]
8000acb8:	91 0b       	st.w	r8[0x0],r11
8000acba:	72 1b       	ld.w	r11,r9[0x4]
8000acbc:	91 1b       	st.w	r8[0x4],r11
8000acbe:	72 2b       	ld.w	r11,r9[0x8]
8000acc0:	91 2b       	st.w	r8[0x8],r11
8000acc2:	72 39       	ld.w	r9,r9[0xc]
8000acc4:	91 39       	st.w	r8[0xc],r9
8000acc6:	14 9c       	mov	r12,r10
8000acc8:	c7 0e       	rcall	8000a9a8 <quat_multi>
8000acca:	2f 8d       	sub	sp,-32
8000accc:	ee c8 00 20 	sub	r8,r7,32
8000acd0:	ee c9 00 30 	sub	r9,r7,48
8000acd4:	20 08       	sub	r8,0
8000acd6:	20 09       	sub	r9,0
8000acd8:	72 0a       	ld.w	r10,r9[0x0]
8000acda:	91 0a       	st.w	r8[0x0],r10
8000acdc:	72 1a       	ld.w	r10,r9[0x4]
8000acde:	91 1a       	st.w	r8[0x4],r10
8000ace0:	72 2a       	ld.w	r10,r9[0x8]
8000ace2:	91 2a       	st.w	r8[0x8],r10
8000ace4:	72 39       	ld.w	r9,r9[0xc]
8000ace6:	91 39       	st.w	r8[0xc],r9
	
	return qtmp;
8000ace8:	06 98       	mov	r8,r3
8000acea:	ee c9 00 20 	sub	r9,r7,32
8000acee:	20 08       	sub	r8,0
8000acf0:	20 09       	sub	r9,0
8000acf2:	72 0a       	ld.w	r10,r9[0x0]
8000acf4:	91 0a       	st.w	r8[0x0],r10
8000acf6:	72 1a       	ld.w	r10,r9[0x4]
8000acf8:	91 1a       	st.w	r8[0x4],r10
8000acfa:	72 2a       	ld.w	r10,r9[0x8]
8000acfc:	91 2a       	st.w	r8[0x8],r10
8000acfe:	72 39       	ld.w	r9,r9[0xc]
8000ad00:	91 39       	st.w	r8[0xc],r9
}
8000ad02:	06 9c       	mov	r12,r3
8000ad04:	2f 4d       	sub	sp,-48
8000ad06:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000ad0a:	00 00       	add	r0,r0
8000ad0c:	80 00       	ld.sh	r0,r0[0x0]
8000ad0e:	aa a2       	st.b	r5[0x2],r2

8000ad10 <fast_sqrt>:

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
8000ad10:	eb cd 40 c0 	pushm	r6-r7,lr
8000ad14:	1a 97       	mov	r7,sp
8000ad16:	20 2d       	sub	sp,8
8000ad18:	4b 26       	lddpc	r6,8000ade0 <fast_sqrt+0xd0>
8000ad1a:	1e 26       	rsub	r6,pc
8000ad1c:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
8000ad20:	30 18       	mov	r8,1
8000ad22:	ee fa ff f8 	ld.w	r10,r7[-8]
8000ad26:	30 09       	mov	r9,0
8000ad28:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000ad2c:	e0 8c 00 03 	brvs	8000ad32 <fast_sqrt+0x22>
8000ad30:	c0 25       	brlt	8000ad34 <fast_sqrt+0x24>
8000ad32:	30 08       	mov	r8,0
8000ad34:	5c 58       	castu.b	r8
8000ad36:	c0 30       	breq	8000ad3c <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
8000ad38:	30 08       	mov	r8,0
8000ad3a:	c4 f8       	rjmp	8000add8 <fast_sqrt+0xc8>
	}
	float result=1.0;
8000ad3c:	fc 18 3f 80 	movh	r8,0x3f80
8000ad40:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000ad44:	ee fb ff fc 	ld.w	r11,r7[-4]
8000ad48:	ee fc ff f8 	ld.w	r12,r7[-8]
8000ad4c:	f0 16 00 08 	mcall	r6[32]
8000ad50:	18 98       	mov	r8,r12
8000ad52:	10 99       	mov	r9,r8
8000ad54:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ad58:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000ad5c:	fc 18 3f 00 	movh	r8,0x3f00
8000ad60:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000ad64:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000ad68:	ee fb ff fc 	ld.w	r11,r7[-4]
8000ad6c:	ee fc ff f8 	ld.w	r12,r7[-8]
8000ad70:	f0 16 00 08 	mcall	r6[32]
8000ad74:	18 98       	mov	r8,r12
8000ad76:	10 99       	mov	r9,r8
8000ad78:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ad7c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000ad80:	fc 18 3f 00 	movh	r8,0x3f00
8000ad84:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000ad88:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000ad8c:	ee fb ff fc 	ld.w	r11,r7[-4]
8000ad90:	ee fc ff f8 	ld.w	r12,r7[-8]
8000ad94:	f0 16 00 08 	mcall	r6[32]
8000ad98:	18 98       	mov	r8,r12
8000ad9a:	10 99       	mov	r9,r8
8000ad9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ada0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000ada4:	fc 18 3f 00 	movh	r8,0x3f00
8000ada8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000adac:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000adb0:	ee fb ff fc 	ld.w	r11,r7[-4]
8000adb4:	ee fc ff f8 	ld.w	r12,r7[-8]
8000adb8:	f0 16 00 08 	mcall	r6[32]
8000adbc:	18 98       	mov	r8,r12
8000adbe:	10 99       	mov	r9,r8
8000adc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000adc4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000adc8:	fc 18 3f 00 	movh	r8,0x3f00
8000adcc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000add0:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
8000add4:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000add8:	10 9c       	mov	r12,r8
8000adda:	2f ed       	sub	sp,-8
8000addc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ade0:	80 00       	ld.sh	r0,r0[0x0]
8000ade2:	ab 9e       	lsr	lr,0xb

8000ade4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8000ade4:	eb cd 40 c0 	pushm	r6-r7,lr
8000ade8:	1a 97       	mov	r7,sp
8000adea:	20 6d       	sub	sp,24
8000adec:	49 e6       	lddpc	r6,8000ae64 <interpolate+0x80>
8000adee:	1e 26       	rsub	r6,pc
8000adf0:	ef 4c ff f8 	st.w	r7[-8],r12
8000adf4:	ef 4b ff f4 	st.w	r7[-12],r11
8000adf8:	ef 4a ff f0 	st.w	r7[-16],r10
8000adfc:	ef 49 ff ec 	st.w	r7[-20],r9
8000ae00:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8000ae04:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000ae08:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ae0c:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8000ae10:	c0 41       	brne	8000ae18 <interpolate+0x34>
	{
		return y1;
8000ae12:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000ae16:	c2 38       	rjmp	8000ae5c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8000ae18:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000ae1c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000ae20:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000ae24:	ee fa ff f8 	ld.w	r10,r7[-8]
8000ae28:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ae2c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000ae30:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000ae34:	ee fa ff f0 	ld.w	r10,r7[-16]
8000ae38:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000ae3c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000ae40:	12 9b       	mov	r11,r9
8000ae42:	10 9c       	mov	r12,r8
8000ae44:	f0 16 00 08 	mcall	r6[32]
8000ae48:	18 98       	mov	r8,r12
8000ae4a:	10 99       	mov	r9,r8
8000ae4c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000ae50:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000ae54:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8000ae58:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000ae5c:	10 9c       	mov	r12,r8
8000ae5e:	2f ad       	sub	sp,-24
8000ae60:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ae64:	80 00       	ld.sh	r0,r0[0x0]
8000ae66:	ac 72       	st.h	r6[0xe],r2
8000ae68:	49 6e       	lddpc	lr,8000aec0 <qfInit+0x12>
8000ae6a:	69 74       	ld.w	r4,r4[0x5c]
8000ae6c:	69 61       	ld.w	r1,r4[0x58]
8000ae6e:	6c 20       	ld.w	r0,r6[0x8]
8000ae70:	79 61       	ld.w	r1,r12[0x58]
8000ae72:	77 3a       	ld.w	r10,r11[0x4c]
8000ae74:	00 00       	add	r0,r0
8000ae76:	00 00       	add	r0,r0
8000ae78:	20 3d       	sub	sp,12
8000ae7a:	20 61       	sub	r1,6
8000ae7c:	74 61       	ld.w	r1,r10[0x18]
8000ae7e:	6e 32       	ld.w	r2,r7[0xc]
8000ae80:	28 6d       	sub	sp,-488
8000ae82:	61 67       	ld.w	r7,r0[0x58]
8000ae84:	5f 79       	srpl	r9
8000ae86:	2c 6d       	sub	sp,-232
8000ae88:	61 67       	ld.w	r7,r0[0x58]
8000ae8a:	5f 78       	srpl	r8
8000ae8c:	29 20       	sub	r0,-110
8000ae8e:	3d 00       	mov	r0,-48
8000ae90:	20 2c       	sub	r12,2
8000ae92:	00 00       	add	r0,r0
8000ae94:	0a 00       	add	r0,r5
8000ae96:	00 00       	add	r0,r0
8000ae98:	46 72       	lddsp	r2,sp[0x19c]
8000ae9a:	6f 6e       	ld.w	lr,r7[0x58]
8000ae9c:	74 20       	ld.w	r0,r10[0x8]
8000ae9e:	6d 61       	ld.w	r1,r6[0x58]
8000aea0:	67 28       	ld.w	r8,r3[0x48]
8000aea2:	7a 29       	ld.w	r9,sp[0x8]
8000aea4:	20 28       	sub	r8,2
8000aea6:	2a 31       	sub	r1,-93
8000aea8:	30 30       	mov	r0,3
8000aeaa:	29 3a       	sub	r10,-109
	...

8000aeae <qfInit>:

float front_mag_vect_z;



void qfInit(Quat_Attitude_t *attitude,  float *scalefactor, float *bias) {
8000aeae:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000aeb2:	1a 97       	mov	r7,sp
8000aeb4:	20 5d       	sub	sp,20
8000aeb6:	fe f6 03 46 	ld.w	r6,pc[838]
8000aeba:	1e 26       	rsub	r6,pc
8000aebc:	ef 4c ff f4 	st.w	r7[-12],r12
8000aec0:	ef 4b ff f0 	st.w	r7[-16],r11
8000aec4:	ef 4a ff ec 	st.w	r7[-20],r10
	uint8_t i;
	float init_angle;

	for (i=0; i<9; i++){
8000aec8:	30 08       	mov	r8,0
8000aeca:	ef 68 ff fb 	st.b	r7[-5],r8
8000aece:	c2 c8       	rjmp	8000af26 <qfInit+0x78>
		attitude->sf[i]=1.0/(float)scalefactor[i];
8000aed0:	ef 35 ff fb 	ld.ub	r5,r7[-5]
8000aed4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000aed8:	a3 68       	lsl	r8,0x2
8000aeda:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000aede:	f2 08 00 08 	add	r8,r9,r8
8000aee2:	70 08       	ld.w	r8,r8[0x0]
8000aee4:	10 9b       	mov	r11,r8
8000aee6:	fc 1c 3f 80 	movh	r12,0x3f80
8000aeea:	f0 16 00 08 	mcall	r6[32]
8000aeee:	18 98       	mov	r8,r12
8000aef0:	10 9a       	mov	r10,r8
8000aef2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aef6:	ea c9 ff eb 	sub	r9,r5,-21
8000aefa:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		attitude->be[i]=bias[i];
8000aefe:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000af02:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000af06:	a3 68       	lsl	r8,0x2
8000af08:	ee fa ff ec 	ld.w	r10,r7[-20]
8000af0c:	f4 08 00 08 	add	r8,r10,r8
8000af10:	70 0a       	ld.w	r10,r8[0x0]
8000af12:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000af16:	2f 49       	sub	r9,-12
8000af18:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

void qfInit(Quat_Attitude_t *attitude,  float *scalefactor, float *bias) {
	uint8_t i;
	float init_angle;

	for (i=0; i<9; i++){
8000af1c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000af20:	2f f8       	sub	r8,-1
8000af22:	ef 68 ff fb 	st.b	r7[-5],r8
8000af26:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000af2a:	30 88       	mov	r8,8
8000af2c:	f0 09 18 00 	cp.b	r9,r8
8000af30:	fe 98 ff d0 	brls	8000aed0 <qfInit+0x22>
		attitude->sf[i]=1.0/(float)scalefactor[i];
		attitude->be[i]=bias[i];
		
	}
	for (i=0; i<3; i++){
8000af34:	30 08       	mov	r8,0
8000af36:	ef 68 ff fb 	st.b	r7[-5],r8
8000af3a:	c0 e8       	rjmp	8000af56 <qfInit+0xa8>
		attitude->acc_bf[i]=0.0;
8000af3c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000af40:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000af44:	2d 09       	sub	r9,-48
8000af46:	30 0a       	mov	r10,0
8000af48:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	for (i=0; i<9; i++){
		attitude->sf[i]=1.0/(float)scalefactor[i];
		attitude->be[i]=bias[i];
		
	}
	for (i=0; i<3; i++){
8000af4c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000af50:	2f f8       	sub	r8,-1
8000af52:	ef 68 ff fb 	st.b	r7[-5],r8
8000af56:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000af5a:	30 28       	mov	r8,2
8000af5c:	f0 09 18 00 	cp.b	r9,r8
8000af60:	fe 98 ff ee 	brls	8000af3c <qfInit+0x8e>

//	attitude->be[3]=-0.03;
//	attitude->be[4]=0.08;
//	attitude->be[5]=0.15;

	attitude->qe.s=1.0;
8000af64:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000af68:	fc 19 3f 80 	movh	r9,0x3f80
8000af6c:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0]=0.0;
8000af6e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000af72:	30 09       	mov	r9,0
8000af74:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1]=0.0;
8000af76:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000af7a:	30 09       	mov	r9,0
8000af7c:	91 29       	st.w	r8[0x8],r9
	attitude->qe.v[2]=0.0;
8000af7e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000af82:	30 09       	mov	r9,0
8000af84:	91 39       	st.w	r8[0xc],r9

	for(i=0; i<3; i++)
8000af86:	30 08       	mov	r8,0
8000af88:	ef 68 ff fb 	st.b	r7[-5],r8
8000af8c:	c2 a8       	rjmp	8000afe0 <qfInit+0x132>
	{
		attitude->mag[i]=((float)attitude->raw_mag_mean[i])*attitude->sf[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET];
8000af8e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000af92:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8000af96:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000af9a:	2d 5a       	sub	r10,-43
8000af9c:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000afa0:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000afa4:	f0 cb ff fa 	sub	r11,r8,-6
8000afa8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000afac:	2e bb       	sub	r11,-21
8000afae:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
8000afb2:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000afb6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000afba:	f0 cb ff fa 	sub	r11,r8,-6
8000afbe:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000afc2:	2f 4b       	sub	r11,-12
8000afc4:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
8000afc8:	e5 a1 0a a8 	cop	cp0,cr10,cr10,cr8,0x42
8000afcc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000afd0:	2d c9       	sub	r9,-36
8000afd2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	attitude->qe.s=1.0;
	attitude->qe.v[0]=0.0;
	attitude->qe.v[1]=0.0;
	attitude->qe.v[2]=0.0;

	for(i=0; i<3; i++)
8000afd6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000afda:	2f f8       	sub	r8,-1
8000afdc:	ef 68 ff fb 	st.b	r7[-5],r8
8000afe0:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000afe4:	30 28       	mov	r8,2
8000afe6:	f0 09 18 00 	cp.b	r9,r8
8000afea:	fe 98 ff d2 	brls	8000af8e <qfInit+0xe0>
	{
		attitude->mag[i]=((float)attitude->raw_mag_mean[i])*attitude->sf[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET];
	}
	
	init_angle = atan2(-attitude->mag[1],attitude->mag[0]);
8000afee:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aff2:	f0 f8 00 90 	ld.w	r8,r8[144]
8000aff6:	10 9c       	mov	r12,r8
8000aff8:	f0 16 00 02 	mcall	r6[8]
8000affc:	14 92       	mov	r2,r10
8000affe:	16 93       	mov	r3,r11
8000b000:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b004:	f0 f8 00 94 	ld.w	r8,r8[148]
8000b008:	ee 18 80 00 	eorh	r8,0x8000
8000b00c:	10 9c       	mov	r12,r8
8000b00e:	f0 16 00 02 	mcall	r6[8]
8000b012:	04 98       	mov	r8,r2
8000b014:	06 99       	mov	r9,r3
8000b016:	f0 16 00 54 	mcall	r6[336]
8000b01a:	14 98       	mov	r8,r10
8000b01c:	16 99       	mov	r9,r11
8000b01e:	10 9a       	mov	r10,r8
8000b020:	12 9b       	mov	r11,r9
8000b022:	f0 16 00 09 	mcall	r6[36]
8000b026:	18 98       	mov	r8,r12
8000b028:	ef 48 ff fc 	st.w	r7[-4],r8

	dbg_print("Initial yaw:");
8000b02c:	fe cc 01 c4 	sub	r12,pc,452
8000b030:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(init_angle*100.0,10);
8000b034:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b038:	f0 16 00 02 	mcall	r6[8]
8000b03c:	30 08       	mov	r8,0
8000b03e:	fc 19 40 59 	movh	r9,0x4059
8000b042:	f0 16 00 03 	mcall	r6[12]
8000b046:	14 98       	mov	r8,r10
8000b048:	16 99       	mov	r9,r11
8000b04a:	10 9a       	mov	r10,r8
8000b04c:	12 9b       	mov	r11,r9
8000b04e:	f0 16 00 14 	mcall	r6[80]
8000b052:	18 98       	mov	r8,r12
8000b054:	30 ab       	mov	r11,10
8000b056:	10 9c       	mov	r12,r8
8000b058:	f0 16 00 04 	mcall	r6[16]
	dbg_print(" = atan2(mag_y,mag_x) =");
8000b05c:	fe cc 01 e4 	sub	r12,pc,484
8000b060:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(attitude->mag[1]*100.0,10);
8000b064:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b068:	f0 f8 00 94 	ld.w	r8,r8[148]
8000b06c:	10 9c       	mov	r12,r8
8000b06e:	f0 16 00 02 	mcall	r6[8]
8000b072:	30 08       	mov	r8,0
8000b074:	fc 19 40 59 	movh	r9,0x4059
8000b078:	f0 16 00 03 	mcall	r6[12]
8000b07c:	14 98       	mov	r8,r10
8000b07e:	16 99       	mov	r9,r11
8000b080:	10 9a       	mov	r10,r8
8000b082:	12 9b       	mov	r11,r9
8000b084:	f0 16 00 14 	mcall	r6[80]
8000b088:	18 98       	mov	r8,r12
8000b08a:	30 ab       	mov	r11,10
8000b08c:	10 9c       	mov	r12,r8
8000b08e:	f0 16 00 04 	mcall	r6[16]
	dbg_print(" ,");
8000b092:	fe cc 02 02 	sub	r12,pc,514
8000b096:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(attitude->mag[0]*100.0,10);
8000b09a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b09e:	f0 f8 00 90 	ld.w	r8,r8[144]
8000b0a2:	10 9c       	mov	r12,r8
8000b0a4:	f0 16 00 02 	mcall	r6[8]
8000b0a8:	30 08       	mov	r8,0
8000b0aa:	fc 19 40 59 	movh	r9,0x4059
8000b0ae:	f0 16 00 03 	mcall	r6[12]
8000b0b2:	14 98       	mov	r8,r10
8000b0b4:	16 99       	mov	r9,r11
8000b0b6:	10 9a       	mov	r10,r8
8000b0b8:	12 9b       	mov	r11,r9
8000b0ba:	f0 16 00 14 	mcall	r6[80]
8000b0be:	18 98       	mov	r8,r12
8000b0c0:	30 ab       	mov	r11,10
8000b0c2:	10 9c       	mov	r12,r8
8000b0c4:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
8000b0c8:	fe cc 02 34 	sub	r12,pc,564
8000b0cc:	f0 16 00 01 	mcall	r6[4]

	front_mag_vect_z = attitude->mag[2];
8000b0d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b0d4:	f0 f9 00 98 	ld.w	r9,r8[152]
8000b0d8:	ec f8 03 bc 	ld.w	r8,r6[956]
8000b0dc:	91 09       	st.w	r8[0x0],r9
	dbg_print("Front mag(z) (*100):");
8000b0de:	fe cc 02 46 	sub	r12,pc,582
8000b0e2:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(front_mag_vect_z*100.0,10);
8000b0e6:	ec f8 03 bc 	ld.w	r8,r6[956]
8000b0ea:	70 08       	ld.w	r8,r8[0x0]
8000b0ec:	10 9c       	mov	r12,r8
8000b0ee:	f0 16 00 02 	mcall	r6[8]
8000b0f2:	30 08       	mov	r8,0
8000b0f4:	fc 19 40 59 	movh	r9,0x4059
8000b0f8:	f0 16 00 03 	mcall	r6[12]
8000b0fc:	14 98       	mov	r8,r10
8000b0fe:	16 99       	mov	r9,r11
8000b100:	10 9a       	mov	r10,r8
8000b102:	12 9b       	mov	r11,r9
8000b104:	f0 16 00 14 	mcall	r6[80]
8000b108:	18 98       	mov	r8,r12
8000b10a:	30 ab       	mov	r11,10
8000b10c:	10 9c       	mov	r12,r8
8000b10e:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
8000b112:	fe cc 02 7e 	sub	r12,pc,638
8000b116:	f0 16 00 01 	mcall	r6[4]

	attitude->qe.s = cos(init_angle/2.0);
8000b11a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b11e:	f0 16 00 02 	mcall	r6[8]
8000b122:	30 08       	mov	r8,0
8000b124:	fc 19 40 00 	movh	r9,0x4000
8000b128:	f0 16 00 0c 	mcall	r6[48]
8000b12c:	14 98       	mov	r8,r10
8000b12e:	16 99       	mov	r9,r11
8000b130:	10 9a       	mov	r10,r8
8000b132:	12 9b       	mov	r11,r9
8000b134:	f0 16 00 c2 	mcall	r6[776]
8000b138:	14 98       	mov	r8,r10
8000b13a:	16 99       	mov	r9,r11
8000b13c:	10 9a       	mov	r10,r8
8000b13e:	12 9b       	mov	r11,r9
8000b140:	f0 16 00 09 	mcall	r6[36]
8000b144:	18 99       	mov	r9,r12
8000b146:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b14a:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0]=0.0;
8000b14c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b150:	30 09       	mov	r9,0
8000b152:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1]=0.0;
8000b154:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b158:	30 09       	mov	r9,0
8000b15a:	91 29       	st.w	r8[0x8],r9
	//attitude->qe.v[2]=sin((PI + init_angle)/2.0);
	attitude->qe.v[2]=sin(init_angle/2.0);
8000b15c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000b160:	f0 16 00 02 	mcall	r6[8]
8000b164:	30 08       	mov	r8,0
8000b166:	fc 19 40 00 	movh	r9,0x4000
8000b16a:	f0 16 00 0c 	mcall	r6[48]
8000b16e:	14 98       	mov	r8,r10
8000b170:	16 99       	mov	r9,r11
8000b172:	10 9a       	mov	r10,r8
8000b174:	12 9b       	mov	r11,r9
8000b176:	f0 16 00 c0 	mcall	r6[768]
8000b17a:	14 98       	mov	r8,r10
8000b17c:	16 99       	mov	r9,r11
8000b17e:	10 9a       	mov	r10,r8
8000b180:	12 9b       	mov	r11,r9
8000b182:	f0 16 00 09 	mcall	r6[36]
8000b186:	18 99       	mov	r9,r12
8000b188:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b18c:	91 39       	st.w	r8[0xc],r9
	
	attitude->kp=0.09;
8000b18e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b192:	e0 69 51 ec 	mov	r9,20972
8000b196:	ea 19 3d b8 	orh	r9,0x3db8
8000b19a:	f1 49 00 9c 	st.w	r8[156],r9
	attitude->ki=attitude->kp/15.0;
8000b19e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b1a2:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000b1a6:	fc 1b 41 70 	movh	r11,0x4170
8000b1aa:	10 9c       	mov	r12,r8
8000b1ac:	f0 16 00 08 	mcall	r6[32]
8000b1b0:	18 98       	mov	r8,r12
8000b1b2:	10 99       	mov	r9,r8
8000b1b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b1b8:	f1 49 00 a0 	st.w	r8[160],r9
	
	attitude->kp_mag = 0.1;
8000b1bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b1c0:	e0 69 cc cd 	mov	r9,52429
8000b1c4:	ea 19 3d cc 	orh	r9,0x3dcc
8000b1c8:	f1 49 00 a4 	st.w	r8[164],r9
	attitude->ki_mag = attitude->kp_mag/15.0;
8000b1cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b1d0:	f0 f8 00 a4 	ld.w	r8,r8[164]
8000b1d4:	fc 1b 41 70 	movh	r11,0x4170
8000b1d8:	10 9c       	mov	r12,r8
8000b1da:	f0 16 00 08 	mcall	r6[32]
8000b1de:	18 98       	mov	r8,r12
8000b1e0:	10 99       	mov	r9,r8
8000b1e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b1e6:	f1 49 00 a8 	st.w	r8[168],r9
	
	attitude->calibration_level=LEVELING;
8000b1ea:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b1ee:	30 18       	mov	r8,1
8000b1f0:	f3 68 00 b8 	st.b	r9[184],r8
	//dt=1.0/samplingrate;
}
8000b1f4:	2f bd       	sub	sp,-20
8000b1f6:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000b1fa:	00 00       	add	r0,r0
8000b1fc:	80 00       	ld.sh	r0,r0[0x0]
8000b1fe:	ad 3e       	mul	lr,r6

8000b200 <qfilter>:


void qfilter(Quat_Attitude_t *attitude, float *rates, float dt, bool simu_mode){
8000b200:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000b204:	1a 97       	mov	r7,sp
8000b206:	fa cd 01 04 	sub	sp,sp,260
8000b20a:	fe f6 0b 0a 	ld.w	r6,pc[2826]
8000b20e:	1e 26       	rsub	r6,pc
8000b210:	ef 4c ff 18 	st.w	r7[-232],r12
8000b214:	ef 4b ff 14 	st.w	r7[-236],r11
8000b218:	ef 4a ff 10 	st.w	r7[-240],r10
8000b21c:	12 98       	mov	r8,r9
8000b21e:	ef 68 ff 0c 	st.b	r7[-244],r8
	uint8_t i;
	float  omc[3], omc_mag[3], rvc[3], tmp[3], snorm, norm, s_acc_norm, acc_norm, s_mag_norm, mag_norm;
	UQuat_t qed, qtmp1, up, up_bf, qtmp2, qtmp3;
	UQuat_t mag_global, mag_corrected_local;
	UQuat_t front_vec_global = {.s=0.0, .v={1.0, 0.0, 0.0}};
8000b222:	30 08       	mov	r8,0
8000b224:	ef 48 ff 1c 	st.w	r7[-228],r8
8000b228:	fc 18 3f 80 	movh	r8,0x3f80
8000b22c:	ef 48 ff 20 	st.w	r7[-224],r8
8000b230:	30 08       	mov	r8,0
8000b232:	ef 48 ff 24 	st.w	r7[-220],r8
8000b236:	30 08       	mov	r8,0
8000b238:	ef 48 ff 28 	st.w	r7[-216],r8
	float kp, kp_mag;
	
	
	for (i=0; i<3; i++){
8000b23c:	30 08       	mov	r8,0
8000b23e:	ef 68 ff df 	st.b	r7[-33],r8
8000b242:	c0 c9       	rjmp	8000b45a <qfilter+0x25a>
		attitude->om[i]  = (1.0-GYRO_LPF)*attitude->om[i]+GYRO_LPF*(((float)rates[GYRO_OFFSET+i]-attitude->be[GYRO_OFFSET+i])*attitude->sf[i]);
8000b244:	ef 35 ff df 	ld.ub	r5,r7[-33]
8000b248:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000b24c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b250:	2e 29       	sub	r9,-30
8000b252:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000b256:	10 9c       	mov	r12,r8
8000b258:	f0 16 00 02 	mcall	r6[8]
8000b25c:	e0 68 cc cd 	mov	r8,52429
8000b260:	ea 18 cc cc 	orh	r8,0xcccc
8000b264:	e0 69 cc cc 	mov	r9,52428
8000b268:	ea 19 3f ec 	orh	r9,0x3fec
8000b26c:	f0 16 00 03 	mcall	r6[12]
8000b270:	14 98       	mov	r8,r10
8000b272:	16 99       	mov	r9,r11
8000b274:	10 92       	mov	r2,r8
8000b276:	12 93       	mov	r3,r9
8000b278:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000b27c:	a3 68       	lsl	r8,0x2
8000b27e:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000b282:	f2 08 00 08 	add	r8,r9,r8
8000b286:	70 09       	ld.w	r9,r8[0x0]
8000b288:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000b28c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b290:	2f 4a       	sub	r10,-12
8000b292:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000b296:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000b29a:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000b29e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b2a2:	2e ba       	sub	r10,-21
8000b2a4:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000b2a8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000b2ac:	10 9c       	mov	r12,r8
8000b2ae:	f0 16 00 02 	mcall	r6[8]
8000b2b2:	e0 68 99 9a 	mov	r8,39322
8000b2b6:	ea 18 99 99 	orh	r8,0x9999
8000b2ba:	e0 69 99 99 	mov	r9,39321
8000b2be:	ea 19 3f b9 	orh	r9,0x3fb9
8000b2c2:	f0 16 00 03 	mcall	r6[12]
8000b2c6:	14 98       	mov	r8,r10
8000b2c8:	16 99       	mov	r9,r11
8000b2ca:	04 9a       	mov	r10,r2
8000b2cc:	06 9b       	mov	r11,r3
8000b2ce:	f0 16 00 05 	mcall	r6[20]
8000b2d2:	14 98       	mov	r8,r10
8000b2d4:	16 99       	mov	r9,r11
8000b2d6:	10 9a       	mov	r10,r8
8000b2d8:	12 9b       	mov	r11,r9
8000b2da:	f0 16 00 09 	mcall	r6[36]
8000b2de:	18 9a       	mov	r10,r12
8000b2e0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b2e4:	ea c9 ff e2 	sub	r9,r5,-30
8000b2e8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		attitude->a[i]   = (1.0-ACC_LPF)*attitude->a[i]+ACC_LPF*(((float)rates[i+ACC_OFFSET]-attitude->be[i+ACC_OFFSET])*attitude->sf[i+ACC_OFFSET]);
8000b2ec:	ef 35 ff df 	ld.ub	r5,r7[-33]
8000b2f0:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000b2f4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b2f8:	2d f9       	sub	r9,-33
8000b2fa:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000b2fe:	10 9c       	mov	r12,r8
8000b300:	f0 16 00 02 	mcall	r6[8]
8000b304:	e0 68 8f 5c 	mov	r8,36700
8000b308:	ea 18 f5 c2 	orh	r8,0xf5c2
8000b30c:	e0 69 5c 28 	mov	r9,23592
8000b310:	ea 19 3f ef 	orh	r9,0x3fef
8000b314:	f0 16 00 03 	mcall	r6[12]
8000b318:	14 98       	mov	r8,r10
8000b31a:	16 99       	mov	r9,r11
8000b31c:	10 92       	mov	r2,r8
8000b31e:	12 93       	mov	r3,r9
8000b320:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000b324:	2f d8       	sub	r8,-3
8000b326:	a3 68       	lsl	r8,0x2
8000b328:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000b32c:	f2 08 00 08 	add	r8,r9,r8
8000b330:	70 09       	ld.w	r9,r8[0x0]
8000b332:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000b336:	f0 ca ff fd 	sub	r10,r8,-3
8000b33a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b33e:	2f 4a       	sub	r10,-12
8000b340:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000b344:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000b348:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000b34c:	f0 ca ff fd 	sub	r10,r8,-3
8000b350:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b354:	2e ba       	sub	r10,-21
8000b356:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000b35a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000b35e:	10 9c       	mov	r12,r8
8000b360:	f0 16 00 02 	mcall	r6[8]
8000b364:	e0 68 14 7b 	mov	r8,5243
8000b368:	ea 18 47 ae 	orh	r8,0x47ae
8000b36c:	e0 69 7a e1 	mov	r9,31457
8000b370:	ea 19 3f 94 	orh	r9,0x3f94
8000b374:	f0 16 00 03 	mcall	r6[12]
8000b378:	14 98       	mov	r8,r10
8000b37a:	16 99       	mov	r9,r11
8000b37c:	04 9a       	mov	r10,r2
8000b37e:	06 9b       	mov	r11,r3
8000b380:	f0 16 00 05 	mcall	r6[20]
8000b384:	14 98       	mov	r8,r10
8000b386:	16 99       	mov	r9,r11
8000b388:	10 9a       	mov	r10,r8
8000b38a:	12 9b       	mov	r11,r9
8000b38c:	f0 16 00 09 	mcall	r6[36]
8000b390:	18 9a       	mov	r10,r12
8000b392:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b396:	ea c9 ff df 	sub	r9,r5,-33
8000b39a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		attitude->mag[i] = (1.0-MAG_LPF)*attitude->mag[i]+MAG_LPF*(((float)rates[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET])*attitude->sf[i+COMPASS_OFFSET]);
8000b39e:	ef 35 ff df 	ld.ub	r5,r7[-33]
8000b3a2:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000b3a6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b3aa:	2d c9       	sub	r9,-36
8000b3ac:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000b3b0:	10 9c       	mov	r12,r8
8000b3b2:	f0 16 00 02 	mcall	r6[8]
8000b3b6:	e0 68 cc cd 	mov	r8,52429
8000b3ba:	ea 18 cc cc 	orh	r8,0xcccc
8000b3be:	e0 69 cc cc 	mov	r9,52428
8000b3c2:	ea 19 3f ec 	orh	r9,0x3fec
8000b3c6:	f0 16 00 03 	mcall	r6[12]
8000b3ca:	14 98       	mov	r8,r10
8000b3cc:	16 99       	mov	r9,r11
8000b3ce:	10 92       	mov	r2,r8
8000b3d0:	12 93       	mov	r3,r9
8000b3d2:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000b3d6:	2f a8       	sub	r8,-6
8000b3d8:	a3 68       	lsl	r8,0x2
8000b3da:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000b3de:	f2 08 00 08 	add	r8,r9,r8
8000b3e2:	70 09       	ld.w	r9,r8[0x0]
8000b3e4:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000b3e8:	f0 ca ff fa 	sub	r10,r8,-6
8000b3ec:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b3f0:	2f 4a       	sub	r10,-12
8000b3f2:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000b3f6:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000b3fa:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000b3fe:	f0 ca ff fa 	sub	r10,r8,-6
8000b402:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b406:	2e ba       	sub	r10,-21
8000b408:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000b40c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000b410:	10 9c       	mov	r12,r8
8000b412:	f0 16 00 02 	mcall	r6[8]
8000b416:	e0 68 99 9a 	mov	r8,39322
8000b41a:	ea 18 99 99 	orh	r8,0x9999
8000b41e:	e0 69 99 99 	mov	r9,39321
8000b422:	ea 19 3f b9 	orh	r9,0x3fb9
8000b426:	f0 16 00 03 	mcall	r6[12]
8000b42a:	14 98       	mov	r8,r10
8000b42c:	16 99       	mov	r9,r11
8000b42e:	04 9a       	mov	r10,r2
8000b430:	06 9b       	mov	r11,r3
8000b432:	f0 16 00 05 	mcall	r6[20]
8000b436:	14 98       	mov	r8,r10
8000b438:	16 99       	mov	r9,r11
8000b43a:	10 9a       	mov	r10,r8
8000b43c:	12 9b       	mov	r11,r9
8000b43e:	f0 16 00 09 	mcall	r6[36]
8000b442:	18 9a       	mov	r10,r12
8000b444:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b448:	ea c9 ff dc 	sub	r9,r5,-36
8000b44c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	UQuat_t mag_global, mag_corrected_local;
	UQuat_t front_vec_global = {.s=0.0, .v={1.0, 0.0, 0.0}};
	float kp, kp_mag;
	
	
	for (i=0; i<3; i++){
8000b450:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000b454:	2f f8       	sub	r8,-1
8000b456:	ef 68 ff df 	st.b	r7[-33],r8
8000b45a:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000b45e:	30 28       	mov	r8,2
8000b460:	f0 09 18 00 	cp.b	r9,r8
8000b464:	fe 98 fe f0 	brls	8000b244 <qfilter+0x44>
		attitude->a[i]   = (1.0-ACC_LPF)*attitude->a[i]+ACC_LPF*(((float)rates[i+ACC_OFFSET]-attitude->be[i+ACC_OFFSET])*attitude->sf[i+ACC_OFFSET]);
		attitude->mag[i] = (1.0-MAG_LPF)*attitude->mag[i]+MAG_LPF*(((float)rates[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET])*attitude->sf[i+COMPASS_OFFSET]);
	}

	// up_bf = qe^-1 *(0,0,0,-1) * qe
	up.s=0; up.v[0]=UPVECTOR_X; up.v[1]=UPVECTOR_Y; up.v[2]=UPVECTOR_Z;
8000b468:	30 08       	mov	r8,0
8000b46a:	ef 48 ff 7c 	st.w	r7[-132],r8
8000b46e:	30 08       	mov	r8,0
8000b470:	ef 48 ff 80 	st.w	r7[-128],r8
8000b474:	30 08       	mov	r8,0
8000b476:	ef 48 ff 84 	st.w	r7[-124],r8
8000b47a:	fc 18 bf 80 	movh	r8,0xbf80
8000b47e:	ef 48 ff 88 	st.w	r7[-120],r8
	up_bf = quat_global_to_local(attitude->qe, up);
8000b482:	ee ca 00 94 	sub	r10,r7,148
8000b486:	20 4d       	sub	sp,16
8000b488:	1a 98       	mov	r8,sp
8000b48a:	ee c9 00 84 	sub	r9,r7,132
8000b48e:	20 08       	sub	r8,0
8000b490:	20 09       	sub	r9,0
8000b492:	72 0b       	ld.w	r11,r9[0x0]
8000b494:	91 0b       	st.w	r8[0x0],r11
8000b496:	72 1b       	ld.w	r11,r9[0x4]
8000b498:	91 1b       	st.w	r8[0x4],r11
8000b49a:	72 2b       	ld.w	r11,r9[0x8]
8000b49c:	91 2b       	st.w	r8[0x8],r11
8000b49e:	72 39       	ld.w	r9,r9[0xc]
8000b4a0:	91 39       	st.w	r8[0xc],r9
8000b4a2:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000b4a6:	20 4d       	sub	sp,16
8000b4a8:	1a 98       	mov	r8,sp
8000b4aa:	20 08       	sub	r8,0
8000b4ac:	20 09       	sub	r9,0
8000b4ae:	72 0b       	ld.w	r11,r9[0x0]
8000b4b0:	91 0b       	st.w	r8[0x0],r11
8000b4b2:	72 1b       	ld.w	r11,r9[0x4]
8000b4b4:	91 1b       	st.w	r8[0x4],r11
8000b4b6:	72 2b       	ld.w	r11,r9[0x8]
8000b4b8:	91 2b       	st.w	r8[0x8],r11
8000b4ba:	72 39       	ld.w	r9,r9[0xc]
8000b4bc:	91 39       	st.w	r8[0xc],r9
8000b4be:	14 9c       	mov	r12,r10
8000b4c0:	fe b0 fb 2c 	rcall	8000ab18 <quat_global_to_local>
8000b4c4:	2f 8d       	sub	sp,-32
	
	// calculate norm of acceleration vector
	s_acc_norm=attitude->a[0]*attitude->a[0]+attitude->a[1]*attitude->a[1]+attitude->a[2]*attitude->a[2];
8000b4c6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b4ca:	f0 f9 00 84 	ld.w	r9,r8[132]
8000b4ce:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b4d2:	f0 f8 00 84 	ld.w	r8,r8[132]
8000b4d6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000b4da:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b4de:	f0 fa 00 88 	ld.w	r10,r8[136]
8000b4e2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b4e6:	f0 f8 00 88 	ld.w	r8,r8[136]
8000b4ea:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b4ee:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000b4f2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b4f6:	f0 fa 00 8c 	ld.w	r10,r8[140]
8000b4fa:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b4fe:	f0 f8 00 8c 	ld.w	r8,r8[140]
8000b502:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b506:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000b50a:	ef 48 ff e8 	st.w	r7[-24],r8
	if ((s_acc_norm>0.7*0.7)&&(s_acc_norm<1.3*1.3)) {
8000b50e:	ee fc ff e8 	ld.w	r12,r7[-24]
8000b512:	f0 16 00 02 	mcall	r6[8]
8000b516:	14 98       	mov	r8,r10
8000b518:	16 99       	mov	r9,r11
8000b51a:	30 05       	mov	r5,0
8000b51c:	e0 6a 8f 5b 	mov	r10,36699
8000b520:	ea 1a f5 c2 	orh	r10,0xf5c2
8000b524:	e0 6b 5c 28 	mov	r11,23592
8000b528:	ea 1b 3f df 	orh	r11,0x3fdf
8000b52c:	f0 16 00 1c 	mcall	r6[112]
8000b530:	18 98       	mov	r8,r12
8000b532:	58 08       	cp.w	r8,0
8000b534:	c0 20       	breq	8000b538 <qfilter+0x338>
8000b536:	30 15       	mov	r5,1
8000b538:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000b53c:	c7 30       	breq	8000b622 <qfilter+0x422>
8000b53e:	ee fc ff e8 	ld.w	r12,r7[-24]
8000b542:	f0 16 00 02 	mcall	r6[8]
8000b546:	30 05       	mov	r5,0
8000b548:	e0 68 d7 0b 	mov	r8,55051
8000b54c:	ea 18 70 a3 	orh	r8,0x70a3
8000b550:	e0 69 0a 3d 	mov	r9,2621
8000b554:	ea 19 3f fb 	orh	r9,0x3ffb
8000b558:	f0 16 00 1c 	mcall	r6[112]
8000b55c:	18 98       	mov	r8,r12
8000b55e:	58 08       	cp.w	r8,0
8000b560:	c0 20       	breq	8000b564 <qfilter+0x364>
8000b562:	30 15       	mov	r5,1
8000b564:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000b568:	c5 d0       	breq	8000b622 <qfilter+0x422>
		// approximate square root by running 2 iterations of newton method
		acc_norm=fast_sqrt(s_acc_norm);
8000b56a:	ee fc ff e8 	ld.w	r12,r7[-24]
8000b56e:	fe b0 fb d1 	rcall	8000ad10 <fast_sqrt>
8000b572:	18 98       	mov	r8,r12
8000b574:	ef 48 ff ec 	st.w	r7[-20],r8

		tmp[0]=attitude->a[0]/acc_norm;
8000b578:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b57c:	f0 f8 00 84 	ld.w	r8,r8[132]
8000b580:	ee fb ff ec 	ld.w	r11,r7[-20]
8000b584:	10 9c       	mov	r12,r8
8000b586:	f0 16 00 08 	mcall	r6[32]
8000b58a:	18 98       	mov	r8,r12
8000b58c:	ef 48 ff ac 	st.w	r7[-84],r8
		tmp[1]=attitude->a[1]/acc_norm;
8000b590:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b594:	f0 f8 00 88 	ld.w	r8,r8[136]
8000b598:	ee fb ff ec 	ld.w	r11,r7[-20]
8000b59c:	10 9c       	mov	r12,r8
8000b59e:	f0 16 00 08 	mcall	r6[32]
8000b5a2:	18 98       	mov	r8,r12
8000b5a4:	ef 48 ff b0 	st.w	r7[-80],r8
		tmp[2]=attitude->a[2]/acc_norm;
8000b5a8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b5ac:	f0 f8 00 8c 	ld.w	r8,r8[140]
8000b5b0:	ee fb ff ec 	ld.w	r11,r7[-20]
8000b5b4:	10 9c       	mov	r12,r8
8000b5b6:	f0 16 00 08 	mcall	r6[32]
8000b5ba:	18 98       	mov	r8,r12
8000b5bc:	ef 48 ff b4 	st.w	r7[-76],r8
		// omc = a x up_bf.v
		CROSS(tmp, up_bf.v, omc);
8000b5c0:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000b5c4:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000b5c8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000b5cc:	ee fa ff b4 	ld.w	r10,r7[-76]
8000b5d0:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000b5d4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b5d8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b5dc:	ef 48 ff d0 	st.w	r7[-48],r8
8000b5e0:	ee f9 ff b4 	ld.w	r9,r7[-76]
8000b5e4:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000b5e8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000b5ec:	ee fa ff ac 	ld.w	r10,r7[-84]
8000b5f0:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000b5f4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b5f8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b5fc:	ef 48 ff d4 	st.w	r7[-44],r8
8000b600:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000b604:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000b608:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000b60c:	ee fa ff b0 	ld.w	r10,r7[-80]
8000b610:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000b614:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b618:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b61c:	ef 48 ff d8 	st.w	r7[-40],r8
	up.s=0; up.v[0]=UPVECTOR_X; up.v[1]=UPVECTOR_Y; up.v[2]=UPVECTOR_Z;
	up_bf = quat_global_to_local(attitude->qe, up);
	
	// calculate norm of acceleration vector
	s_acc_norm=attitude->a[0]*attitude->a[0]+attitude->a[1]*attitude->a[1]+attitude->a[2]*attitude->a[2];
	if ((s_acc_norm>0.7*0.7)&&(s_acc_norm<1.3*1.3)) {
8000b620:	c0 a8       	rjmp	8000b634 <qfilter+0x434>
		tmp[1]=attitude->a[1]/acc_norm;
		tmp[2]=attitude->a[2]/acc_norm;
		// omc = a x up_bf.v
		CROSS(tmp, up_bf.v, omc);
	} else {
		omc[0]=0;		omc[1]=0; 		omc[2]=0;
8000b622:	30 08       	mov	r8,0
8000b624:	ef 48 ff d0 	st.w	r7[-48],r8
8000b628:	30 08       	mov	r8,0
8000b62a:	ef 48 ff d4 	st.w	r7[-44],r8
8000b62e:	30 08       	mov	r8,0
8000b630:	ef 48 ff d8 	st.w	r7[-40],r8
	}

	// Heading computation
	// transfer 
	qtmp1=quat_from_vector(attitude->mag); 
8000b634:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b638:	f0 c9 ff 70 	sub	r9,r8,-144
8000b63c:	ee c8 01 04 	sub	r8,r7,260
8000b640:	12 9b       	mov	r11,r9
8000b642:	10 9c       	mov	r12,r8
8000b644:	fe b0 f9 56 	rcall	8000a8f0 <quat_from_vector>
8000b648:	ee c8 00 74 	sub	r8,r7,116
8000b64c:	ee c9 01 04 	sub	r9,r7,260
8000b650:	20 08       	sub	r8,0
8000b652:	20 09       	sub	r9,0
8000b654:	72 0a       	ld.w	r10,r9[0x0]
8000b656:	91 0a       	st.w	r8[0x0],r10
8000b658:	72 1a       	ld.w	r10,r9[0x4]
8000b65a:	91 1a       	st.w	r8[0x4],r10
8000b65c:	72 2a       	ld.w	r10,r9[0x8]
8000b65e:	91 2a       	st.w	r8[0x8],r10
8000b660:	72 39       	ld.w	r9,r9[0xc]
8000b662:	91 39       	st.w	r8[0xc],r9
	mag_global = quat_local_to_global(attitude->qe, qtmp1);
8000b664:	ee ca 00 c4 	sub	r10,r7,196
8000b668:	20 4d       	sub	sp,16
8000b66a:	1a 98       	mov	r8,sp
8000b66c:	ee c9 00 74 	sub	r9,r7,116
8000b670:	20 08       	sub	r8,0
8000b672:	20 09       	sub	r9,0
8000b674:	72 0b       	ld.w	r11,r9[0x0]
8000b676:	91 0b       	st.w	r8[0x0],r11
8000b678:	72 1b       	ld.w	r11,r9[0x4]
8000b67a:	91 1b       	st.w	r8[0x4],r11
8000b67c:	72 2b       	ld.w	r11,r9[0x8]
8000b67e:	91 2b       	st.w	r8[0x8],r11
8000b680:	72 39       	ld.w	r9,r9[0xc]
8000b682:	91 39       	st.w	r8[0xc],r9
8000b684:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000b688:	20 4d       	sub	sp,16
8000b68a:	1a 98       	mov	r8,sp
8000b68c:	20 08       	sub	r8,0
8000b68e:	20 09       	sub	r9,0
8000b690:	72 0b       	ld.w	r11,r9[0x0]
8000b692:	91 0b       	st.w	r8[0x0],r11
8000b694:	72 1b       	ld.w	r11,r9[0x4]
8000b696:	91 1b       	st.w	r8[0x4],r11
8000b698:	72 2b       	ld.w	r11,r9[0x8]
8000b69a:	91 2b       	st.w	r8[0x8],r11
8000b69c:	72 39       	ld.w	r9,r9[0xc]
8000b69e:	91 39       	st.w	r8[0xc],r9
8000b6a0:	14 9c       	mov	r12,r10
8000b6a2:	fe b0 fa b9 	rcall	8000ac14 <quat_local_to_global>
8000b6a6:	2f 8d       	sub	sp,-32
	//QI(attitude->qe,qtmp4);
	//QMUL(qtmp4, front_bf, qtmp5);
	//QMUL(qtmp5, attitude->qe, front_bf);
	
	// calculate norm of compass vector
	s_mag_norm=SQR(mag_global.v[0])+SQR(mag_global.v[1])+SQR(mag_global.v[2]);
8000b6a8:	ee f9 ff 40 	ld.w	r9,r7[-192]
8000b6ac:	ee f8 ff 40 	ld.w	r8,r7[-192]
8000b6b0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000b6b4:	ee fa ff 44 	ld.w	r10,r7[-188]
8000b6b8:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000b6bc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b6c0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000b6c4:	ee fa ff 48 	ld.w	r10,r7[-184]
8000b6c8:	ee f8 ff 48 	ld.w	r8,r7[-184]
8000b6cc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b6d0:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000b6d4:	ef 48 ff f0 	st.w	r7[-16],r8
	if ((s_mag_norm>0.4*0.4)&&(s_mag_norm<1.8*1.8)) 
8000b6d8:	ee fc ff f0 	ld.w	r12,r7[-16]
8000b6dc:	f0 16 00 02 	mcall	r6[8]
8000b6e0:	14 98       	mov	r8,r10
8000b6e2:	16 99       	mov	r9,r11
8000b6e4:	30 05       	mov	r5,0
8000b6e6:	e0 6a 14 7c 	mov	r10,5244
8000b6ea:	ea 1a 47 ae 	orh	r10,0x47ae
8000b6ee:	e0 6b 7a e1 	mov	r11,31457
8000b6f2:	ea 1b 3f c4 	orh	r11,0x3fc4
8000b6f6:	f0 16 00 1c 	mcall	r6[112]
8000b6fa:	18 98       	mov	r8,r12
8000b6fc:	58 08       	cp.w	r8,0
8000b6fe:	c0 20       	breq	8000b702 <qfilter+0x502>
8000b700:	30 15       	mov	r5,1
8000b702:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000b706:	e0 80 00 c2 	breq	8000b88a <qfilter+0x68a>
8000b70a:	ee fc ff f0 	ld.w	r12,r7[-16]
8000b70e:	f0 16 00 02 	mcall	r6[8]
8000b712:	30 05       	mov	r5,0
8000b714:	e0 68 51 ec 	mov	r8,20972
8000b718:	ea 18 1e b8 	orh	r8,0x1eb8
8000b71c:	e0 69 eb 85 	mov	r9,60293
8000b720:	ea 19 40 09 	orh	r9,0x4009
8000b724:	f0 16 00 1c 	mcall	r6[112]
8000b728:	18 98       	mov	r8,r12
8000b72a:	58 08       	cp.w	r8,0
8000b72c:	c0 20       	breq	8000b730 <qfilter+0x530>
8000b72e:	30 15       	mov	r5,1
8000b730:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000b734:	e0 80 00 ab 	breq	8000b88a <qfilter+0x68a>
	{
		mag_norm=fast_sqrt(s_mag_norm);
8000b738:	ee fc ff f0 	ld.w	r12,r7[-16]
8000b73c:	fe b0 fa ea 	rcall	8000ad10 <fast_sqrt>
8000b740:	18 98       	mov	r8,r12
8000b742:	ef 48 ff f4 	st.w	r7[-12],r8

		mag_global.v[0]/=mag_norm;
8000b746:	ee f8 ff 40 	ld.w	r8,r7[-192]
8000b74a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000b74e:	10 9c       	mov	r12,r8
8000b750:	f0 16 00 08 	mcall	r6[32]
8000b754:	18 98       	mov	r8,r12
8000b756:	ef 48 ff 40 	st.w	r7[-192],r8
		mag_global.v[1]/=mag_norm;
8000b75a:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000b75e:	ee fb ff f4 	ld.w	r11,r7[-12]
8000b762:	10 9c       	mov	r12,r8
8000b764:	f0 16 00 08 	mcall	r6[32]
8000b768:	18 98       	mov	r8,r12
8000b76a:	ef 48 ff 44 	st.w	r7[-188],r8
		mag_global.v[2]=0.0;   // set z component in global frame to 0
8000b76e:	30 08       	mov	r8,0
8000b770:	ef 48 ff 48 	st.w	r7[-184],r8

		// transfer magneto vector back to body frame 
		attitude->north_vec=quat_global_to_local(attitude->qe, front_vec_global);		
8000b774:	ee f5 ff 18 	ld.w	r5,r7[-232]
8000b778:	ee ca 01 04 	sub	r10,r7,260
8000b77c:	20 4d       	sub	sp,16
8000b77e:	1a 98       	mov	r8,sp
8000b780:	ee c9 00 e4 	sub	r9,r7,228
8000b784:	20 08       	sub	r8,0
8000b786:	20 09       	sub	r9,0
8000b788:	72 0b       	ld.w	r11,r9[0x0]
8000b78a:	91 0b       	st.w	r8[0x0],r11
8000b78c:	72 1b       	ld.w	r11,r9[0x4]
8000b78e:	91 1b       	st.w	r8[0x4],r11
8000b790:	72 2b       	ld.w	r11,r9[0x8]
8000b792:	91 2b       	st.w	r8[0x8],r11
8000b794:	72 39       	ld.w	r9,r9[0xc]
8000b796:	91 39       	st.w	r8[0xc],r9
8000b798:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000b79c:	20 4d       	sub	sp,16
8000b79e:	1a 98       	mov	r8,sp
8000b7a0:	20 08       	sub	r8,0
8000b7a2:	20 09       	sub	r9,0
8000b7a4:	72 0b       	ld.w	r11,r9[0x0]
8000b7a6:	91 0b       	st.w	r8[0x0],r11
8000b7a8:	72 1b       	ld.w	r11,r9[0x4]
8000b7aa:	91 1b       	st.w	r8[0x4],r11
8000b7ac:	72 2b       	ld.w	r11,r9[0x8]
8000b7ae:	91 2b       	st.w	r8[0x8],r11
8000b7b0:	72 39       	ld.w	r9,r9[0xc]
8000b7b2:	91 39       	st.w	r8[0xc],r9
8000b7b4:	14 9c       	mov	r12,r10
8000b7b6:	fe b0 f9 b1 	rcall	8000ab18 <quat_global_to_local>
8000b7ba:	2f 8d       	sub	sp,-32
8000b7bc:	ea c8 ff e0 	sub	r8,r5,-32
8000b7c0:	ee c9 01 04 	sub	r9,r7,260
8000b7c4:	20 08       	sub	r8,0
8000b7c6:	20 09       	sub	r9,0
8000b7c8:	72 0a       	ld.w	r10,r9[0x0]
8000b7ca:	91 0a       	st.w	r8[0x0],r10
8000b7cc:	72 1a       	ld.w	r10,r9[0x4]
8000b7ce:	91 1a       	st.w	r8[0x4],r10
8000b7d0:	72 2a       	ld.w	r10,r9[0x8]
8000b7d2:	91 2a       	st.w	r8[0x8],r10
8000b7d4:	72 39       	ld.w	r9,r9[0xc]
8000b7d6:	91 39       	st.w	r8[0xc],r9
		mag_corrected_local=quat_global_to_local(attitude->qe, mag_global);		
8000b7d8:	ee ca 00 d4 	sub	r10,r7,212
8000b7dc:	20 4d       	sub	sp,16
8000b7de:	1a 98       	mov	r8,sp
8000b7e0:	ee c9 00 c4 	sub	r9,r7,196
8000b7e4:	20 08       	sub	r8,0
8000b7e6:	20 09       	sub	r9,0
8000b7e8:	72 0b       	ld.w	r11,r9[0x0]
8000b7ea:	91 0b       	st.w	r8[0x0],r11
8000b7ec:	72 1b       	ld.w	r11,r9[0x4]
8000b7ee:	91 1b       	st.w	r8[0x4],r11
8000b7f0:	72 2b       	ld.w	r11,r9[0x8]
8000b7f2:	91 2b       	st.w	r8[0x8],r11
8000b7f4:	72 39       	ld.w	r9,r9[0xc]
8000b7f6:	91 39       	st.w	r8[0xc],r9
8000b7f8:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000b7fc:	20 4d       	sub	sp,16
8000b7fe:	1a 98       	mov	r8,sp
8000b800:	20 08       	sub	r8,0
8000b802:	20 09       	sub	r9,0
8000b804:	72 0b       	ld.w	r11,r9[0x0]
8000b806:	91 0b       	st.w	r8[0x0],r11
8000b808:	72 1b       	ld.w	r11,r9[0x4]
8000b80a:	91 1b       	st.w	r8[0x4],r11
8000b80c:	72 2b       	ld.w	r11,r9[0x8]
8000b80e:	91 2b       	st.w	r8[0x8],r11
8000b810:	72 39       	ld.w	r9,r9[0xc]
8000b812:	91 39       	st.w	r8[0xc],r9
8000b814:	14 9c       	mov	r12,r10
8000b816:	fe b0 f9 81 	rcall	8000ab18 <quat_global_to_local>
8000b81a:	2f 8d       	sub	sp,-32
		// omc = a x up_bf.v
		CROSS(mag_corrected_local.v, attitude->north_vec.v,  omc_mag);
8000b81c:	ee f9 ff 34 	ld.w	r9,r7[-204]
8000b820:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b824:	70 b8       	ld.w	r8,r8[0x2c]
8000b826:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000b82a:	ee fa ff 38 	ld.w	r10,r7[-200]
8000b82e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b832:	70 a8       	ld.w	r8,r8[0x28]
8000b834:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b838:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b83c:	ef 48 ff c4 	st.w	r7[-60],r8
8000b840:	ee f9 ff 38 	ld.w	r9,r7[-200]
8000b844:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b848:	70 98       	ld.w	r8,r8[0x24]
8000b84a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000b84e:	ee fa ff 30 	ld.w	r10,r7[-208]
8000b852:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b856:	70 b8       	ld.w	r8,r8[0x2c]
8000b858:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b85c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b860:	ef 48 ff c8 	st.w	r7[-56],r8
8000b864:	ee f9 ff 30 	ld.w	r9,r7[-208]
8000b868:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b86c:	70 a8       	ld.w	r8,r8[0x28]
8000b86e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000b872:	ee fa ff 34 	ld.w	r10,r7[-204]
8000b876:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b87a:	70 98       	ld.w	r8,r8[0x24]
8000b87c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b880:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b884:	ef 48 ff cc 	st.w	r7[-52],r8
	//QMUL(qtmp4, front_bf, qtmp5);
	//QMUL(qtmp5, attitude->qe, front_bf);
	
	// calculate norm of compass vector
	s_mag_norm=SQR(mag_global.v[0])+SQR(mag_global.v[1])+SQR(mag_global.v[2]);
	if ((s_mag_norm>0.4*0.4)&&(s_mag_norm<1.8*1.8)) 
8000b888:	c0 a8       	rjmp	8000b89c <qfilter+0x69c>
		mag_corrected_local=quat_global_to_local(attitude->qe, mag_global);		
		// omc = a x up_bf.v
		CROSS(mag_corrected_local.v, attitude->north_vec.v,  omc_mag);
		
	} else {
		omc_mag[0]=0;		omc_mag[1]=0; 		omc_mag[2]=0;
8000b88a:	30 08       	mov	r8,0
8000b88c:	ef 48 ff c4 	st.w	r7[-60],r8
8000b890:	30 08       	mov	r8,0
8000b892:	ef 48 ff c8 	st.w	r7[-56],r8
8000b896:	30 08       	mov	r8,0
8000b898:	ef 48 ff cc 	st.w	r7[-52],r8
	}

	for (i=0; i<3; i++){
8000b89c:	30 08       	mov	r8,0
8000b89e:	ef 68 ff df 	st.b	r7[-33],r8
8000b8a2:	c3 48       	rjmp	8000b90a <qfilter+0x70a>
		qtmp1.v[i] = attitude->om[i] +attitude->kp*omc[i] +attitude->kp_mag*omc_mag[i];
8000b8a4:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000b8a8:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000b8ac:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b8b0:	2e 29       	sub	r9,-30
8000b8b2:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000b8b6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b8ba:	f0 fb 00 9c 	ld.w	r11,r8[156]
8000b8be:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000b8c2:	a3 68       	lsl	r8,0x2
8000b8c4:	ee 08 00 08 	add	r8,r7,r8
8000b8c8:	f0 f8 ff d0 	ld.w	r8,r8[-48]
8000b8cc:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000b8d0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000b8d4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b8d8:	f0 fb 00 a4 	ld.w	r11,r8[164]
8000b8dc:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000b8e0:	a3 68       	lsl	r8,0x2
8000b8e2:	ee 08 00 08 	add	r8,r7,r8
8000b8e6:	f0 f8 ff c4 	ld.w	r8,r8[-60]
8000b8ea:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000b8ee:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000b8f2:	f4 c8 ff ff 	sub	r8,r10,-1
8000b8f6:	a3 68       	lsl	r8,0x2
8000b8f8:	ee 08 00 08 	add	r8,r7,r8
8000b8fc:	f1 49 ff 8c 	st.w	r8[-116],r9
		
	} else {
		omc_mag[0]=0;		omc_mag[1]=0; 		omc_mag[2]=0;
	}

	for (i=0; i<3; i++){
8000b900:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000b904:	2f f8       	sub	r8,-1
8000b906:	ef 68 ff df 	st.b	r7[-33],r8
8000b90a:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000b90e:	30 28       	mov	r8,2
8000b910:	f0 09 18 00 	cp.b	r9,r8
8000b914:	fe 98 ff c8 	brls	8000b8a4 <qfilter+0x6a4>
		qtmp1.v[i] = attitude->om[i] +attitude->kp*omc[i] +attitude->kp_mag*omc_mag[i];
	}
	qtmp1.s=0;
8000b918:	30 08       	mov	r8,0
8000b91a:	ef 48 ff 8c 	st.w	r7[-116],r8

	// apply step rotation with corrections
	qed = quat_multi(attitude->qe,qtmp1);
8000b91e:	ee ca 00 64 	sub	r10,r7,100
8000b922:	20 4d       	sub	sp,16
8000b924:	1a 98       	mov	r8,sp
8000b926:	ee c9 00 74 	sub	r9,r7,116
8000b92a:	20 08       	sub	r8,0
8000b92c:	20 09       	sub	r9,0
8000b92e:	72 0b       	ld.w	r11,r9[0x0]
8000b930:	91 0b       	st.w	r8[0x0],r11
8000b932:	72 1b       	ld.w	r11,r9[0x4]
8000b934:	91 1b       	st.w	r8[0x4],r11
8000b936:	72 2b       	ld.w	r11,r9[0x8]
8000b938:	91 2b       	st.w	r8[0x8],r11
8000b93a:	72 39       	ld.w	r9,r9[0xc]
8000b93c:	91 39       	st.w	r8[0xc],r9
8000b93e:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000b942:	20 4d       	sub	sp,16
8000b944:	1a 98       	mov	r8,sp
8000b946:	20 08       	sub	r8,0
8000b948:	20 09       	sub	r9,0
8000b94a:	72 0b       	ld.w	r11,r9[0x0]
8000b94c:	91 0b       	st.w	r8[0x0],r11
8000b94e:	72 1b       	ld.w	r11,r9[0x4]
8000b950:	91 1b       	st.w	r8[0x4],r11
8000b952:	72 2b       	ld.w	r11,r9[0x8]
8000b954:	91 2b       	st.w	r8[0x8],r11
8000b956:	72 39       	ld.w	r9,r9[0xc]
8000b958:	91 39       	st.w	r8[0xc],r9
8000b95a:	14 9c       	mov	r12,r10
8000b95c:	fe b0 f8 26 	rcall	8000a9a8 <quat_multi>
8000b960:	2f 8d       	sub	sp,-32

	attitude->qe.s=attitude->qe.s+qed.s*dt;
8000b962:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b966:	70 09       	ld.w	r9,r8[0x0]
8000b968:	ee fa ff 9c 	ld.w	r10,r7[-100]
8000b96c:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000b970:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b974:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000b978:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b97c:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0]+=qed.v[0]*dt;
8000b97e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b982:	70 19       	ld.w	r9,r8[0x4]
8000b984:	ee fa ff a0 	ld.w	r10,r7[-96]
8000b988:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000b98c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b990:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000b994:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b998:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1]+=qed.v[1]*dt;
8000b99a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b99e:	70 29       	ld.w	r9,r8[0x8]
8000b9a0:	ee fa ff a4 	ld.w	r10,r7[-92]
8000b9a4:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000b9a8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b9ac:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000b9b0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b9b4:	91 29       	st.w	r8[0x8],r9
	attitude->qe.v[2]+=qed.v[2]*dt;
8000b9b6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b9ba:	70 39       	ld.w	r9,r8[0xc]
8000b9bc:	ee fa ff a8 	ld.w	r10,r7[-88]
8000b9c0:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000b9c4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b9c8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000b9cc:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b9d0:	91 39       	st.w	r8[0xc],r9

	snorm=attitude->qe.s*attitude->qe.s+attitude->qe.v[0]*attitude->qe.v[0] + attitude->qe.v[1] * attitude->qe.v[1] + attitude->qe.v[2] * attitude->qe.v[2];
8000b9d2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b9d6:	70 09       	ld.w	r9,r8[0x0]
8000b9d8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b9dc:	70 08       	ld.w	r8,r8[0x0]
8000b9de:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000b9e2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b9e6:	70 1a       	ld.w	r10,r8[0x4]
8000b9e8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b9ec:	70 18       	ld.w	r8,r8[0x4]
8000b9ee:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b9f2:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000b9f6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000b9fa:	70 2a       	ld.w	r10,r8[0x8]
8000b9fc:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ba00:	70 28       	ld.w	r8,r8[0x8]
8000ba02:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000ba06:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000ba0a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ba0e:	70 3a       	ld.w	r10,r8[0xc]
8000ba10:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ba14:	70 38       	ld.w	r8,r8[0xc]
8000ba16:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000ba1a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000ba1e:	ef 48 ff e0 	st.w	r7[-32],r8
	if (snorm<0.0001) norm=0.01; else {
8000ba22:	ee fc ff e0 	ld.w	r12,r7[-32]
8000ba26:	f0 16 00 02 	mcall	r6[8]
8000ba2a:	30 05       	mov	r5,0
8000ba2c:	e0 68 43 2d 	mov	r8,17197
8000ba30:	ea 18 eb 1c 	orh	r8,0xeb1c
8000ba34:	e0 69 36 e2 	mov	r9,14050
8000ba38:	ea 19 3f 1a 	orh	r9,0x3f1a
8000ba3c:	f0 16 00 1c 	mcall	r6[112]
8000ba40:	18 98       	mov	r8,r12
8000ba42:	58 08       	cp.w	r8,0
8000ba44:	c0 20       	breq	8000ba48 <qfilter+0x848>
8000ba46:	30 15       	mov	r5,1
8000ba48:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000ba4c:	c0 80       	breq	8000ba5c <qfilter+0x85c>
8000ba4e:	e0 68 d7 0a 	mov	r8,55050
8000ba52:	ea 18 3c 23 	orh	r8,0x3c23
8000ba56:	ef 48 ff e4 	st.w	r7[-28],r8
8000ba5a:	c0 88       	rjmp	8000ba6a <qfilter+0x86a>
		// approximate square root by running 2 iterations of newton method
		norm=fast_sqrt(snorm);
8000ba5c:	ee fc ff e0 	ld.w	r12,r7[-32]
8000ba60:	fe b0 f9 58 	rcall	8000ad10 <fast_sqrt>
8000ba64:	18 98       	mov	r8,r12
8000ba66:	ef 48 ff e4 	st.w	r7[-28],r8
		//norm=0.5*(norm+(snorm/norm));
	}	
	attitude->qe.s/= norm;
8000ba6a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ba6e:	70 08       	ld.w	r8,r8[0x0]
8000ba70:	ee fb ff e4 	ld.w	r11,r7[-28]
8000ba74:	10 9c       	mov	r12,r8
8000ba76:	f0 16 00 08 	mcall	r6[32]
8000ba7a:	18 98       	mov	r8,r12
8000ba7c:	10 99       	mov	r9,r8
8000ba7e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ba82:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0] /= norm;
8000ba84:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ba88:	70 18       	ld.w	r8,r8[0x4]
8000ba8a:	ee fb ff e4 	ld.w	r11,r7[-28]
8000ba8e:	10 9c       	mov	r12,r8
8000ba90:	f0 16 00 08 	mcall	r6[32]
8000ba94:	18 98       	mov	r8,r12
8000ba96:	10 99       	mov	r9,r8
8000ba98:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ba9c:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1] /= norm;
8000ba9e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000baa2:	70 28       	ld.w	r8,r8[0x8]
8000baa4:	ee fb ff e4 	ld.w	r11,r7[-28]
8000baa8:	10 9c       	mov	r12,r8
8000baaa:	f0 16 00 08 	mcall	r6[32]
8000baae:	18 98       	mov	r8,r12
8000bab0:	10 99       	mov	r9,r8
8000bab2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bab6:	91 29       	st.w	r8[0x8],r9
	attitude->qe.v[2] /= norm;
8000bab8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000babc:	70 38       	ld.w	r8,r8[0xc]
8000babe:	ee fb ff e4 	ld.w	r11,r7[-28]
8000bac2:	10 9c       	mov	r12,r8
8000bac4:	f0 16 00 08 	mcall	r6[32]
8000bac8:	18 98       	mov	r8,r12
8000baca:	10 99       	mov	r9,r8
8000bacc:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bad0:	91 39       	st.w	r8[0xc],r9

	// bias estimate update
	attitude->be[0]+= - dt * attitude->ki * omc[0] / attitude->sf[0];
8000bad2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bad6:	70 c5       	ld.w	r5,r8[0x30]
8000bad8:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000badc:	10 99       	mov	r9,r8
8000bade:	ee 19 80 00 	eorh	r9,0x8000
8000bae2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bae6:	f0 f8 00 a0 	ld.w	r8,r8[160]
8000baea:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000baee:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000baf2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000baf6:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000bafa:	73 59       	ld.w	r9,r9[0x54]
8000bafc:	12 9b       	mov	r11,r9
8000bafe:	10 9c       	mov	r12,r8
8000bb00:	f0 16 00 08 	mcall	r6[32]
8000bb04:	18 98       	mov	r8,r12
8000bb06:	e5 a0 09 58 	cop	cp0,cr9,cr5,cr8,0x40
8000bb0a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bb0e:	91 c9       	st.w	r8[0x30],r9
	attitude->be[1]+= - dt * attitude->ki * omc[1] / attitude->sf[1];
8000bb10:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bb14:	70 d5       	ld.w	r5,r8[0x34]
8000bb16:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000bb1a:	10 99       	mov	r9,r8
8000bb1c:	ee 19 80 00 	eorh	r9,0x8000
8000bb20:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bb24:	f0 f8 00 a0 	ld.w	r8,r8[160]
8000bb28:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000bb2c:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000bb30:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000bb34:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000bb38:	73 69       	ld.w	r9,r9[0x58]
8000bb3a:	12 9b       	mov	r11,r9
8000bb3c:	10 9c       	mov	r12,r8
8000bb3e:	f0 16 00 08 	mcall	r6[32]
8000bb42:	18 98       	mov	r8,r12
8000bb44:	e5 a0 09 58 	cop	cp0,cr9,cr5,cr8,0x40
8000bb48:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bb4c:	91 d9       	st.w	r8[0x34],r9
	attitude->be[2]+= - dt * attitude->ki * omc[2] / attitude->sf[2];
8000bb4e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bb52:	70 e5       	ld.w	r5,r8[0x38]
8000bb54:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000bb58:	10 99       	mov	r9,r8
8000bb5a:	ee 19 80 00 	eorh	r9,0x8000
8000bb5e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bb62:	f0 f8 00 a0 	ld.w	r8,r8[160]
8000bb66:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000bb6a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000bb6e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000bb72:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000bb76:	73 79       	ld.w	r9,r9[0x5c]
8000bb78:	12 9b       	mov	r11,r9
8000bb7a:	10 9c       	mov	r12,r8
8000bb7c:	f0 16 00 08 	mcall	r6[32]
8000bb80:	18 98       	mov	r8,r12
8000bb82:	e5 a0 09 58 	cop	cp0,cr9,cr5,cr8,0x40
8000bb86:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bb8a:	91 e9       	st.w	r8[0x38],r9
	// bias estimate update
	//attitude->be[6]+= - dt * attitude->ki_mag * omc[0];
	//attitude->be[7]+= - dt * attitude->ki_mag * omc[1];
	//attitude->be[8]+= - dt * attitude->ki_mag * omc[2];

	switch (attitude->calibration_level) {
8000bb8c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bb90:	f1 38 00 b8 	ld.ub	r8,r8[184]
8000bb94:	58 18       	cp.w	r8,1
8000bb96:	c1 c0       	breq	8000bbce <qfilter+0x9ce>
8000bb98:	58 28       	cp.w	r8,2
8000bb9a:	c3 00       	breq	8000bbfa <qfilter+0x9fa>
8000bb9c:	58 08       	cp.w	r8,0
8000bb9e:	e0 81 00 94 	brne	8000bcc6 <qfilter+0xac6>
		case OFF:
			kp=attitude->kp;//*(0.1/(0.1+s_acc_norm-1.0));
8000bba2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bba6:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000bbaa:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/15.0;
8000bbae:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bbb2:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000bbb6:	fc 1b 41 70 	movh	r11,0x4170
8000bbba:	10 9c       	mov	r12,r8
8000bbbc:	f0 16 00 08 	mcall	r6[32]
8000bbc0:	18 98       	mov	r8,r12
8000bbc2:	10 99       	mov	r9,r8
8000bbc4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bbc8:	f1 49 00 a0 	st.w	r8[160],r9
			break;
8000bbcc:	c9 28       	rjmp	8000bcf0 <qfilter+0xaf0>
		case LEVELING:
			kp=0.3;
8000bbce:	e0 68 99 9a 	mov	r8,39322
8000bbd2:	ea 18 3e 99 	orh	r8,0x3e99
8000bbd6:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/10.0;
8000bbda:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bbde:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000bbe2:	fc 1b 41 20 	movh	r11,0x4120
8000bbe6:	10 9c       	mov	r12,r8
8000bbe8:	f0 16 00 08 	mcall	r6[32]
8000bbec:	18 98       	mov	r8,r12
8000bbee:	10 99       	mov	r9,r8
8000bbf0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bbf4:	f1 49 00 a0 	st.w	r8[160],r9
			break;
8000bbf8:	c7 c8       	rjmp	8000bcf0 <qfilter+0xaf0>
		case LEVEL_PLUS_ACCEL:
			kp=0.3;
8000bbfa:	e0 68 99 9a 	mov	r8,39322
8000bbfe:	ea 18 3e 99 	orh	r8,0x3e99
8000bc02:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/10.0;
8000bc06:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bc0a:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000bc0e:	fc 1b 41 20 	movh	r11,0x4120
8000bc12:	10 9c       	mov	r12,r8
8000bc14:	f0 16 00 08 	mcall	r6[32]
8000bc18:	18 98       	mov	r8,r12
8000bc1a:	10 99       	mov	r9,r8
8000bc1c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bc20:	f1 49 00 a0 	st.w	r8[160],r9
			attitude->be[3]+=   dt * attitude->kp * (attitude->a[0]-up_bf.v[0]);
8000bc24:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bc28:	70 f9       	ld.w	r9,r8[0x3c]
8000bc2a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bc2e:	f0 fa 00 9c 	ld.w	r10,r8[156]
8000bc32:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000bc36:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000bc3a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bc3e:	f0 fb 00 84 	ld.w	r11,r8[132]
8000bc42:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000bc46:	e5 a1 08 b8 	cop	cp0,cr8,cr11,cr8,0x42
8000bc4a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000bc4e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000bc52:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bc56:	91 f9       	st.w	r8[0x3c],r9
			attitude->be[4]+=   dt * attitude->kp * (attitude->a[1]-up_bf.v[1]);
8000bc58:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bc5c:	71 09       	ld.w	r9,r8[0x40]
8000bc5e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bc62:	f0 fa 00 9c 	ld.w	r10,r8[156]
8000bc66:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000bc6a:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000bc6e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bc72:	f0 fb 00 88 	ld.w	r11,r8[136]
8000bc76:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000bc7a:	e5 a1 08 b8 	cop	cp0,cr8,cr11,cr8,0x42
8000bc7e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000bc82:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000bc86:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bc8a:	f1 49 00 40 	st.w	r8[64],r9
			attitude->be[5]+=   dt * attitude->kp * (attitude->a[2]-up_bf.v[2]);
8000bc8e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bc92:	71 19       	ld.w	r9,r8[0x44]
8000bc94:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bc98:	f0 fa 00 9c 	ld.w	r10,r8[156]
8000bc9c:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000bca0:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000bca4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bca8:	f0 fb 00 8c 	ld.w	r11,r8[140]
8000bcac:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000bcb0:	e5 a1 08 b8 	cop	cp0,cr8,cr11,cr8,0x42
8000bcb4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000bcb8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000bcbc:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bcc0:	f1 49 00 44 	st.w	r8[68],r9
			break;
8000bcc4:	c1 68       	rjmp	8000bcf0 <qfilter+0xaf0>
		default:
			kp=attitude->kp;
8000bcc6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bcca:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000bcce:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/15.0;
8000bcd2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bcd6:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000bcda:	fc 1b 41 70 	movh	r11,0x4170
8000bcde:	10 9c       	mov	r12,r8
8000bce0:	f0 16 00 08 	mcall	r6[32]
8000bce4:	18 98       	mov	r8,r12
8000bce6:	10 99       	mov	r9,r8
8000bce8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bcec:	f1 49 00 a0 	st.w	r8[160],r9
			break;
	}

	// set up-vector (bodyframe) in attitude
	attitude->up_vec.v[0]=up_bf.v[0];
8000bcf0:	ee f9 ff 70 	ld.w	r9,r7[-144]
8000bcf4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bcf8:	91 59       	st.w	r8[0x14],r9
	attitude->up_vec.v[1]=up_bf.v[1];
8000bcfa:	ee f9 ff 74 	ld.w	r9,r7[-140]
8000bcfe:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bd02:	91 69       	st.w	r8[0x18],r9
	attitude->up_vec.v[2]=up_bf.v[2];
8000bd04:	ee f9 ff 78 	ld.w	r9,r7[-136]
8000bd08:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000bd0c:	91 79       	st.w	r8[0x1c],r9
	
}
8000bd0e:	2b fd       	sub	sp,-260
8000bd10:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000bd14:	80 00       	ld.sh	r0,r0[0x0]
8000bd16:	b0 92       	st.b	r8[0x1],r2

8000bd18 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8000bd18:	eb cd 40 c0 	pushm	r6-r7,lr
8000bd1c:	1a 97       	mov	r7,sp
8000bd1e:	20 6d       	sub	sp,24
8000bd20:	49 e6       	lddpc	r6,8000bd98 <interpolate+0x80>
8000bd22:	1e 26       	rsub	r6,pc
8000bd24:	ef 4c ff f8 	st.w	r7[-8],r12
8000bd28:	ef 4b ff f4 	st.w	r7[-12],r11
8000bd2c:	ef 4a ff f0 	st.w	r7[-16],r10
8000bd30:	ef 49 ff ec 	st.w	r7[-20],r9
8000bd34:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8000bd38:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000bd3c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000bd40:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8000bd44:	c0 41       	brne	8000bd4c <interpolate+0x34>
	{
		return y1;
8000bd46:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bd4a:	c2 38       	rjmp	8000bd90 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8000bd4c:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000bd50:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bd54:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000bd58:	ee fa ff f8 	ld.w	r10,r7[-8]
8000bd5c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bd60:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000bd64:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000bd68:	ee fa ff f0 	ld.w	r10,r7[-16]
8000bd6c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000bd70:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000bd74:	12 9b       	mov	r11,r9
8000bd76:	10 9c       	mov	r12,r8
8000bd78:	f0 16 00 08 	mcall	r6[32]
8000bd7c:	18 98       	mov	r8,r12
8000bd7e:	10 99       	mov	r9,r8
8000bd80:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bd84:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000bd88:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8000bd8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000bd90:	10 9c       	mov	r12,r8
8000bd92:	2f ad       	sub	sp,-24
8000bd94:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000bd98:	80 00       	ld.sh	r0,r0[0x0]
8000bd9a:	bb a6       	sbr	r6,0x1a

8000bd9c <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8000bd9c:	eb cd 40 c0 	pushm	r6-r7,lr
8000bda0:	1a 97       	mov	r7,sp
8000bda2:	20 3d       	sub	sp,12
8000bda4:	49 06       	lddpc	r6,8000bde4 <mav_array_memcpy+0x48>
8000bda6:	1e 26       	rsub	r6,pc
8000bda8:	ef 4c ff fc 	st.w	r7[-4],r12
8000bdac:	ef 4b ff f8 	st.w	r7[-8],r11
8000bdb0:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8000bdb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bdb8:	58 08       	cp.w	r8,0
8000bdba:	c0 91       	brne	8000bdcc <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000bdbc:	ee fa ff f4 	ld.w	r10,r7[-12]
8000bdc0:	30 0b       	mov	r11,0
8000bdc2:	ee fc ff fc 	ld.w	r12,r7[-4]
8000bdc6:	f0 16 00 31 	mcall	r6[196]
8000bdca:	c0 98       	rjmp	8000bddc <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000bdcc:	ee fa ff f4 	ld.w	r10,r7[-12]
8000bdd0:	ee fb ff f8 	ld.w	r11,r7[-8]
8000bdd4:	ee fc ff fc 	ld.w	r12,r7[-4]
8000bdd8:	f0 16 00 1b 	mcall	r6[108]
	}
}
8000bddc:	2f dd       	sub	sp,-12
8000bdde:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000bde2:	00 00       	add	r0,r0
8000bde4:	80 00       	ld.sh	r0,r0[0x0]
8000bde6:	bc 2a       	st.h	lr[0x4],r10

8000bde8 <initialise_central_data>:
#include "conf_sim_model.h"


static volatile central_data_t centralData;

void initialise_central_data(){
8000bde8:	eb cd 40 c0 	pushm	r6-r7,lr
8000bdec:	1a 97       	mov	r7,sp
8000bdee:	4d 76       	lddpc	r6,8000bf48 <initialise_central_data+0x160>
8000bdf0:	1e 26       	rsub	r6,pc
		
		centralData.controls.rpy[ROLL]=0;
8000bdf2:	ec f8 00 64 	ld.w	r8,r6[100]
8000bdf6:	30 09       	mov	r9,0
8000bdf8:	f1 49 01 48 	st.w	r8[328],r9
		centralData.controls.rpy[PITCH]=0;
8000bdfc:	ec f8 00 64 	ld.w	r8,r6[100]
8000be00:	30 09       	mov	r9,0
8000be02:	f1 49 01 4c 	st.w	r8[332],r9
		centralData.controls.rpy[YAW]=0;
8000be06:	ec f8 00 64 	ld.w	r8,r6[100]
8000be0a:	30 09       	mov	r9,0
8000be0c:	f1 49 01 50 	st.w	r8[336],r9
		centralData.controls.thrust=-1.0;
8000be10:	ec f8 00 64 	ld.w	r8,r6[100]
8000be14:	fc 19 bf 80 	movh	r9,0xbf80
8000be18:	f1 49 01 54 	st.w	r8[340],r9
		
		centralData.number_of_waypoints = 0;
8000be1c:	ec f9 00 64 	ld.w	r9,r6[100]
8000be20:	30 08       	mov	r8,0
8000be22:	f3 58 0c 64 	st.h	r9[3172],r8

		centralData.simulation_mode=0;
8000be26:	ec f8 00 64 	ld.w	r8,r6[100]
8000be2a:	30 09       	mov	r9,0
8000be2c:	f1 49 0d 08 	st.w	r8[3336],r9
		
		centralData.waypoint_set = false;
8000be30:	ec f9 00 64 	ld.w	r9,r6[100]
8000be34:	30 08       	mov	r8,0
8000be36:	f3 68 0c fc 	st.b	r9[3324],r8
		centralData.waypoint_sending = false;
8000be3a:	ec f9 00 64 	ld.w	r9,r6[100]
8000be3e:	30 08       	mov	r8,0
8000be40:	f3 68 0c fd 	st.b	r9[3325],r8
		centralData.waypoint_receiving = false;
8000be44:	ec f9 00 64 	ld.w	r9,r6[100]
8000be48:	30 08       	mov	r8,0
8000be4a:	f3 68 0c fe 	st.b	r9[3326],r8
		centralData.waypoint_hold_init = false;
8000be4e:	ec f9 00 64 	ld.w	r9,r6[100]
8000be52:	30 08       	mov	r8,0
8000be54:	f3 68 0c ff 	st.b	r9[3327],r8
		centralData.critical_landing = false;
8000be58:	ec f9 00 64 	ld.w	r9,r6[100]
8000be5c:	30 08       	mov	r8,0
8000be5e:	f3 68 0d 00 	st.b	r9[3328],r8
		centralData.critical_init = false;
8000be62:	ec f9 00 64 	ld.w	r9,r6[100]
8000be66:	30 08       	mov	r8,0
8000be68:	f3 68 0d 01 	st.b	r9[3329],r8
		centralData.mission_started = false;
8000be6c:	ec f9 00 64 	ld.w	r9,r6[100]
8000be70:	30 08       	mov	r8,0
8000be72:	f3 68 0d 03 	st.b	r9[3331],r8
		
		centralData.collision_avoidance = false;
8000be76:	ec f9 00 64 	ld.w	r9,r6[100]
8000be7a:	30 08       	mov	r8,0
8000be7c:	f3 68 0d 04 	st.b	r9[3332],r8
		
		// default GPS home position
		centralData.position_estimator.localPosition.origin.longitude=   HOME_LONGITUDE;
8000be80:	ec fa 00 64 	ld.w	r10,r6[100]
8000be84:	e0 68 33 27 	mov	r8,13095
8000be88:	ea 18 3f a0 	orh	r8,0x3fa0
8000be8c:	e0 69 43 a1 	mov	r9,17313
8000be90:	ea 19 40 1a 	orh	r9,0x401a
8000be94:	f4 e9 09 f4 	st.d	r10[2548],r8
		centralData.position_estimator.localPosition.origin.latitude =   HOME_LATITUDE;
8000be98:	ec fa 00 64 	ld.w	r10,r6[100]
8000be9c:	e0 68 f8 9c 	mov	r8,63644
8000bea0:	ea 18 f0 d4 	orh	r8,0xf0d4
8000bea4:	e0 69 42 5e 	mov	r9,16990
8000bea8:	ea 19 40 47 	orh	r9,0x4047
8000beac:	f4 e9 09 fc 	st.d	r10[2556],r8
		centralData.position_estimator.localPosition.origin.altitude =   HOME_ALTITUDE;
8000beb0:	ec f8 00 64 	ld.w	r8,r6[100]
8000beb4:	fc 19 43 c8 	movh	r9,0x43c8
8000beb8:	f1 49 0a 04 	st.w	r8[2564],r9
		centralData.position_estimator.localPosition.pos[0]=0;
8000bebc:	ec f8 00 64 	ld.w	r8,r6[100]
8000bec0:	30 09       	mov	r9,0
8000bec2:	f1 49 09 e4 	st.w	r8[2532],r9
		centralData.position_estimator.localPosition.pos[1]=0;
8000bec6:	ec f8 00 64 	ld.w	r8,r6[100]
8000beca:	30 09       	mov	r9,0
8000becc:	f1 49 09 e8 	st.w	r8[2536],r9
		centralData.position_estimator.localPosition.pos[2]=0;
8000bed0:	ec f8 00 64 	ld.w	r8,r6[100]
8000bed4:	30 09       	mov	r9,0
8000bed6:	f1 49 09 ec 	st.w	r8[2540],r9

		init_simulation(&(centralData.sim_model),&(centralData.imu1.attitude));
8000beda:	ec f8 00 64 	ld.w	r8,r6[100]
8000bede:	f0 c8 f8 10 	sub	r8,r8,-2032
8000bee2:	ec fb 00 64 	ld.w	r11,r6[100]
8000bee6:	10 9c       	mov	r12,r8
8000bee8:	f0 16 01 ed 	mcall	r6[1972]
		centralData.sim_model.localPosition = centralData.position_estimator.localPosition;
8000beec:	ec f9 00 64 	ld.w	r9,r6[100]
8000bef0:	ec f8 00 64 	ld.w	r8,r6[100]
8000bef4:	f2 cb f6 fc 	sub	r11,r9,-2308
8000bef8:	f0 ca f6 1c 	sub	r10,r8,-2532
8000befc:	f6 c8 00 00 	sub	r8,r11,0
8000bf00:	f4 c9 00 00 	sub	r9,r10,0
8000bf04:	72 0c       	ld.w	r12,r9[0x0]
8000bf06:	91 0c       	st.w	r8[0x0],r12
8000bf08:	72 1c       	ld.w	r12,r9[0x4]
8000bf0a:	91 1c       	st.w	r8[0x4],r12
8000bf0c:	72 2c       	ld.w	r12,r9[0x8]
8000bf0e:	91 2c       	st.w	r8[0x8],r12
8000bf10:	72 39       	ld.w	r9,r9[0xc]
8000bf12:	91 39       	st.w	r8[0xc],r9
8000bf14:	f6 c8 ff f0 	sub	r8,r11,-16
8000bf18:	f4 c9 ff f0 	sub	r9,r10,-16
8000bf1c:	72 0c       	ld.w	r12,r9[0x0]
8000bf1e:	91 0c       	st.w	r8[0x0],r12
8000bf20:	72 1c       	ld.w	r12,r9[0x4]
8000bf22:	91 1c       	st.w	r8[0x4],r12
8000bf24:	72 2c       	ld.w	r12,r9[0x8]
8000bf26:	91 2c       	st.w	r8[0x8],r12
8000bf28:	72 39       	ld.w	r9,r9[0xc]
8000bf2a:	91 39       	st.w	r8[0xc],r9
8000bf2c:	f6 c8 ff e0 	sub	r8,r11,-32
8000bf30:	f4 c9 ff e0 	sub	r9,r10,-32
8000bf34:	72 0a       	ld.w	r10,r9[0x0]
8000bf36:	91 0a       	st.w	r8[0x0],r10
8000bf38:	72 1a       	ld.w	r10,r9[0x4]
8000bf3a:	91 1a       	st.w	r8[0x4],r10
8000bf3c:	72 2a       	ld.w	r10,r9[0x8]
8000bf3e:	91 2a       	st.w	r8[0x8],r10
8000bf40:	72 39       	ld.w	r9,r9[0xc]
8000bf42:	91 39       	st.w	r8[0xc],r9
		
		//init_waypoint_list(centralData.waypoint_list,&(centralData.number_of_waypoints));

}
8000bf44:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000bf48:	80 00       	ld.sh	r0,r0[0x0]
8000bf4a:	bc 74       	st.h	lr[0xe],r4

8000bf4c <get_central_data>:

central_data_t* get_central_data(void)
{
8000bf4c:	eb cd 40 c0 	pushm	r6-r7,lr
8000bf50:	1a 97       	mov	r7,sp
8000bf52:	48 46       	lddpc	r6,8000bf60 <get_central_data+0x14>
8000bf54:	1e 26       	rsub	r6,pc
	return &centralData;
8000bf56:	ec f8 00 64 	ld.w	r8,r6[100]
}
8000bf5a:	10 9c       	mov	r12,r8
8000bf5c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000bf60:	80 00       	ld.sh	r0,r0[0x0]
8000bf62:	bd d8       	cbr	r8,0x1d

8000bf64 <get_telemetry_upstream>:

byte_stream_t* get_telemetry_upstream() {
8000bf64:	eb cd 40 c0 	pushm	r6-r7,lr
8000bf68:	1a 97       	mov	r7,sp
8000bf6a:	48 56       	lddpc	r6,8000bf7c <get_telemetry_upstream+0x18>
8000bf6c:	1e 26       	rsub	r6,pc
	return centralData.telemetry_up_stream;
8000bf6e:	ec f8 00 64 	ld.w	r8,r6[100]
8000bf72:	f0 f8 0a 48 	ld.w	r8,r8[2632]
}
8000bf76:	10 9c       	mov	r12,r8
8000bf78:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000bf7c:	80 00       	ld.sh	r0,r0[0x0]
8000bf7e:	bd f0       	*unknown*

8000bf80 <get_telemetry_downstream>:
byte_stream_t* get_telemetry_downstream() {
8000bf80:	eb cd 40 c0 	pushm	r6-r7,lr
8000bf84:	1a 97       	mov	r7,sp
8000bf86:	48 56       	lddpc	r6,8000bf98 <get_telemetry_downstream+0x18>
8000bf88:	1e 26       	rsub	r6,pc
	return centralData.telemetry_down_stream;
8000bf8a:	ec f8 00 64 	ld.w	r8,r6[100]
8000bf8e:	f0 f8 0a 44 	ld.w	r8,r8[2628]
}
8000bf92:	10 9c       	mov	r12,r8
8000bf94:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000bf98:	80 00       	ld.sh	r0,r0[0x0]
8000bf9a:	be 0c       	st.h	pc[0x0],r12

8000bf9c <get_debug_stream>:
byte_stream_t* get_debug_stream() {
8000bf9c:	eb cd 40 c0 	pushm	r6-r7,lr
8000bfa0:	1a 97       	mov	r7,sp
8000bfa2:	48 56       	lddpc	r6,8000bfb4 <get_debug_stream+0x18>
8000bfa4:	1e 26       	rsub	r6,pc
	return centralData.debug_out_stream;
8000bfa6:	ec f8 00 64 	ld.w	r8,r6[100]
8000bfaa:	f0 f8 0a 4c 	ld.w	r8,r8[2636]
}
8000bfae:	10 9c       	mov	r12,r8
8000bfb0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000bfb4:	80 00       	ld.sh	r0,r0[0x0]
8000bfb6:	be 28       	st.h	pc[0x4],r8

8000bfb8 <get_imu_data>:

Imu_Data_t* get_imu_data() {
8000bfb8:	eb cd 40 c0 	pushm	r6-r7,lr
8000bfbc:	1a 97       	mov	r7,sp
8000bfbe:	48 46       	lddpc	r6,8000bfcc <get_imu_data+0x14>
8000bfc0:	1e 26       	rsub	r6,pc
	return &centralData.imu1;
8000bfc2:	ec f8 00 64 	ld.w	r8,r6[100]
}
8000bfc6:	10 9c       	mov	r12,r8
8000bfc8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000bfcc:	80 00       	ld.sh	r0,r0[0x0]
8000bfce:	be 44       	st.h	pc[0x8],r4

8000bfd0 <get_control_inputs_data>:
Control_Command_t* get_control_inputs_data() {
8000bfd0:	eb cd 40 c0 	pushm	r6-r7,lr
8000bfd4:	1a 97       	mov	r7,sp
8000bfd6:	48 56       	lddpc	r6,8000bfe8 <get_control_inputs_data+0x18>
8000bfd8:	1e 26       	rsub	r6,pc
	return &centralData.controls;
8000bfda:	ec f8 00 64 	ld.w	r8,r6[100]
8000bfde:	f0 c8 fe b8 	sub	r8,r8,-328
8000bfe2:	10 9c       	mov	r12,r8
8000bfe4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000bfe8:	80 00       	ld.sh	r0,r0[0x0]
8000bfea:	be 5c       	st.h	pc[0xa],r12

8000bfec <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8000bfec:	eb cd 40 c0 	pushm	r6-r7,lr
8000bff0:	1a 97       	mov	r7,sp
8000bff2:	20 6d       	sub	sp,24
8000bff4:	49 e6       	lddpc	r6,8000c06c <interpolate+0x80>
8000bff6:	1e 26       	rsub	r6,pc
8000bff8:	ef 4c ff f8 	st.w	r7[-8],r12
8000bffc:	ef 4b ff f4 	st.w	r7[-12],r11
8000c000:	ef 4a ff f0 	st.w	r7[-16],r10
8000c004:	ef 49 ff ec 	st.w	r7[-20],r9
8000c008:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8000c00c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000c010:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000c014:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8000c018:	c0 41       	brne	8000c020 <interpolate+0x34>
	{
		return y1;
8000c01a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000c01e:	c2 38       	rjmp	8000c064 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8000c020:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000c024:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000c028:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000c02c:	ee fa ff f8 	ld.w	r10,r7[-8]
8000c030:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c034:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000c038:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c03c:	ee fa ff f0 	ld.w	r10,r7[-16]
8000c040:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000c044:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000c048:	12 9b       	mov	r11,r9
8000c04a:	10 9c       	mov	r12,r8
8000c04c:	f0 16 00 08 	mcall	r6[32]
8000c050:	18 98       	mov	r8,r12
8000c052:	10 99       	mov	r9,r8
8000c054:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000c058:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000c05c:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8000c060:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000c064:	10 9c       	mov	r12,r8
8000c066:	2f ad       	sub	sp,-24
8000c068:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000c06c:	80 00       	ld.sh	r0,r0[0x0]
8000c06e:	be 7a       	st.h	pc[0xe],r10

8000c070 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
8000c070:	eb cd 40 80 	pushm	r7,lr
8000c074:	1a 97       	mov	r7,sp
8000c076:	20 3d       	sub	sp,12
8000c078:	18 98       	mov	r8,r12
8000c07a:	ef 4b ff f4 	st.w	r7[-12],r11
8000c07e:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
8000c082:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c086:	90 08       	ld.sh	r8,r8[0x0]
8000c088:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000c08c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000c090:	f3 e8 20 08 	eor	r8,r9,r8
8000c094:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
8000c098:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c09c:	a5 68       	lsl	r8,0x4
8000c09e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000c0a2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c0a6:	f3 e8 20 08 	eor	r8,r9,r8
8000c0aa:	5c 58       	castu.b	r8
8000c0ac:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
8000c0b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c0b4:	90 08       	ld.sh	r8,r8[0x0]
8000c0b6:	5c 78       	castu.h	r8
8000c0b8:	a9 88       	lsr	r8,0x8
8000c0ba:	5c 88       	casts.h	r8
8000c0bc:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000c0c0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c0c4:	a9 68       	lsl	r8,0x8
8000c0c6:	5c 88       	casts.h	r8
8000c0c8:	f3 e8 20 08 	eor	r8,r9,r8
8000c0cc:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000c0d0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c0d4:	a3 78       	lsl	r8,0x3
8000c0d6:	5c 88       	casts.h	r8
8000c0d8:	f3 e8 20 08 	eor	r8,r9,r8
8000c0dc:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000c0e0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c0e4:	a5 88       	lsr	r8,0x4
8000c0e6:	5c 58       	castu.b	r8
8000c0e8:	f3 e8 20 08 	eor	r8,r9,r8
8000c0ec:	5c 88       	casts.h	r8
8000c0ee:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000c0f2:	b2 08       	st.h	r9[0x0],r8
}
8000c0f4:	2f dd       	sub	sp,-12
8000c0f6:	e3 cd 80 80 	ldm	sp++,r7,pc

8000c0fa <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
8000c0fa:	eb cd 40 80 	pushm	r7,lr
8000c0fe:	1a 97       	mov	r7,sp
8000c100:	20 1d       	sub	sp,4
8000c102:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
8000c106:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000c10a:	3f f8       	mov	r8,-1
8000c10c:	b2 08       	st.h	r9[0x0],r8
}
8000c10e:	2f fd       	sub	sp,-4
8000c110:	e3 cd 80 80 	ldm	sp++,r7,pc

8000c114 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
8000c114:	eb cd 40 c0 	pushm	r6-r7,lr
8000c118:	1a 97       	mov	r7,sp
8000c11a:	20 3d       	sub	sp,12
8000c11c:	49 76       	lddpc	r6,8000c178 <crc_calculate+0x64>
8000c11e:	1e 26       	rsub	r6,pc
8000c120:	ef 4c ff f8 	st.w	r7[-8],r12
8000c124:	16 98       	mov	r8,r11
8000c126:	ef 58 ff f4 	st.h	r7[-12],r8
        uint16_t crcTmp;
        crc_init(&crcTmp);
8000c12a:	ee c8 00 02 	sub	r8,r7,2
8000c12e:	10 9c       	mov	r12,r8
8000c130:	ce 5f       	rcall	8000c0fa <crc_init>
	while (length--) {
8000c132:	c0 e8       	rjmp	8000c14e <crc_calculate+0x3a>
                crc_accumulate(*pBuffer++, &crcTmp);
8000c134:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c138:	11 88       	ld.ub	r8,r8[0x0]
8000c13a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000c13e:	2f f9       	sub	r9,-1
8000c140:	ef 49 ff f8 	st.w	r7[-8],r9
8000c144:	ee c9 00 02 	sub	r9,r7,2
8000c148:	12 9b       	mov	r11,r9
8000c14a:	10 9c       	mov	r12,r8
8000c14c:	c9 2f       	rcall	8000c070 <crc_accumulate>
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
8000c14e:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8000c152:	30 08       	mov	r8,0
8000c154:	f0 09 19 00 	cp.h	r9,r8
8000c158:	5f 18       	srne	r8
8000c15a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000c15e:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000c162:	20 18       	sub	r8,1
8000c164:	ef 58 ff f4 	st.h	r7[-12],r8
8000c168:	58 09       	cp.w	r9,0
8000c16a:	ce 51       	brne	8000c134 <crc_calculate+0x20>
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
8000c16c:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8000c170:	10 9c       	mov	r12,r8
8000c172:	2f dd       	sub	sp,-12
8000c174:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000c178:	80 00       	ld.sh	r0,r0[0x0]
8000c17a:	bf a2       	sbr	r2,0x1e

8000c17c <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
8000c17c:	eb cd 40 c0 	pushm	r6-r7,lr
8000c180:	1a 97       	mov	r7,sp
8000c182:	20 4d       	sub	sp,16
8000c184:	49 66       	lddpc	r6,8000c1dc <crc_accumulate_buffer+0x60>
8000c186:	1e 26       	rsub	r6,pc
8000c188:	ef 4c ff f8 	st.w	r7[-8],r12
8000c18c:	ef 4b ff f4 	st.w	r7[-12],r11
8000c190:	14 98       	mov	r8,r10
8000c192:	ef 68 ff f0 	st.b	r7[-16],r8
	const uint8_t *p = (const uint8_t *)pBuffer;
8000c196:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c19a:	ef 48 ff fc 	st.w	r7[-4],r8
	while (length--) {
8000c19e:	c0 d8       	rjmp	8000c1b8 <crc_accumulate_buffer+0x3c>
                crc_accumulate(*p++, crcAccum);
8000c1a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c1a4:	11 88       	ld.ub	r8,r8[0x0]
8000c1a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000c1aa:	2f f9       	sub	r9,-1
8000c1ac:	ef 49 ff fc 	st.w	r7[-4],r9
8000c1b0:	ee fb ff f8 	ld.w	r11,r7[-8]
8000c1b4:	10 9c       	mov	r12,r8
8000c1b6:	c5 df       	rcall	8000c070 <crc_accumulate>
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
8000c1b8:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000c1bc:	30 08       	mov	r8,0
8000c1be:	f0 09 18 00 	cp.b	r9,r8
8000c1c2:	5f 18       	srne	r8
8000c1c4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000c1c8:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000c1cc:	20 18       	sub	r8,1
8000c1ce:	ef 68 ff f0 	st.b	r7[-16],r8
8000c1d2:	58 09       	cp.w	r9,0
8000c1d4:	ce 61       	brne	8000c1a0 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
        }
}
8000c1d6:	2f cd       	sub	sp,-16
8000c1d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000c1dc:	80 00       	ld.sh	r0,r0[0x0]
8000c1de:	c0 0a       	rjmp	8000bdde <mav_array_memcpy+0x42>

8000c1e0 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
8000c1e0:	eb cd 40 c0 	pushm	r6-r7,lr
8000c1e4:	1a 97       	mov	r7,sp
8000c1e6:	20 1d       	sub	sp,4
8000c1e8:	48 96       	lddpc	r6,8000c20c <mavlink_get_channel_status+0x2c>
8000c1ea:	1e 26       	rsub	r6,pc
8000c1ec:	18 98       	mov	r8,r12
8000c1ee:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
8000c1f2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000c1f6:	f0 09 15 04 	lsl	r9,r8,0x4
8000c1fa:	ec f8 09 2c 	ld.w	r8,r6[2348]
8000c1fe:	f2 08 00 08 	add	r8,r9,r8
}
8000c202:	10 9c       	mov	r12,r8
8000c204:	2f fd       	sub	sp,-4
8000c206:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000c20a:	00 00       	add	r0,r0
8000c20c:	80 00       	ld.sh	r0,r0[0x0]
8000c20e:	c0 6e       	rcall	8000be1a <initialise_central_data+0x32>

8000c210 <_mav_finalize_message_chan_send>:
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, 
						    uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, uint8_t length)
#endif
{
8000c210:	eb cd 40 c0 	pushm	r6-r7,lr
8000c214:	1a 97       	mov	r7,sp
8000c216:	20 9d       	sub	sp,36
8000c218:	4b d6       	lddpc	r6,8000c30c <_mav_finalize_message_chan_send+0xfc>
8000c21a:	1e 26       	rsub	r6,pc
8000c21c:	ef 4c ff ec 	st.w	r7[-20],r12
8000c220:	ef 4a ff e4 	st.w	r7[-28],r10
8000c224:	16 9a       	mov	r10,r11
8000c226:	ef 6a ff e8 	st.b	r7[-24],r10
8000c22a:	ef 69 ff e0 	st.b	r7[-32],r9
8000c22e:	ef 68 ff dc 	st.b	r7[-36],r8
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
8000c232:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000c236:	5c 58       	castu.b	r8
8000c238:	10 9c       	mov	r12,r8
8000c23a:	cd 3f       	rcall	8000c1e0 <mavlink_get_channel_status>
8000c23c:	18 98       	mov	r8,r12
8000c23e:	ef 48 ff fc 	st.w	r7[-4],r8
	buf[0] = MAVLINK_STX;
8000c242:	3f e8       	mov	r8,-2
8000c244:	ef 68 ff f4 	st.b	r7[-12],r8
	buf[1] = length;
8000c248:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8000c24c:	ef 68 ff f5 	st.b	r7[-11],r8
	buf[2] = status->current_tx_seq;
8000c250:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c254:	f1 38 00 0a 	ld.ub	r8,r8[10]
8000c258:	ef 68 ff f6 	st.b	r7[-10],r8
	buf[3] = mavlink_system.sysid;
8000c25c:	ec f8 00 74 	ld.w	r8,r6[116]
8000c260:	11 88       	ld.ub	r8,r8[0x0]
8000c262:	ef 68 ff f7 	st.b	r7[-9],r8
	buf[4] = mavlink_system.compid;
8000c266:	ec f8 00 74 	ld.w	r8,r6[116]
8000c26a:	11 98       	ld.ub	r8,r8[0x1]
8000c26c:	ef 68 ff f8 	st.b	r7[-8],r8
	buf[5] = msgid;
8000c270:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000c274:	ef 68 ff f9 	st.b	r7[-7],r8
	status->current_tx_seq++;
8000c278:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c27c:	f1 38 00 0a 	ld.ub	r8,r8[10]
8000c280:	2f f8       	sub	r8,-1
8000c282:	5c 58       	castu.b	r8
8000c284:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000c288:	f3 68 00 0a 	st.b	r9[10],r8
	checksum = crc_calculate((uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
8000c28c:	ee c8 00 0c 	sub	r8,r7,12
8000c290:	2f f8       	sub	r8,-1
8000c292:	30 5b       	mov	r11,5
8000c294:	10 9c       	mov	r12,r8
8000c296:	c3 ff       	rcall	8000c114 <crc_calculate>
8000c298:	18 98       	mov	r8,r12
8000c29a:	5c 88       	casts.h	r8
8000c29c:	ef 58 ff fa 	st.h	r7[-6],r8
	crc_accumulate_buffer(&checksum, packet, length);
8000c2a0:	ef 39 ff e0 	ld.ub	r9,r7[-32]
8000c2a4:	ee c8 00 06 	sub	r8,r7,6
8000c2a8:	12 9a       	mov	r10,r9
8000c2aa:	ee fb ff e4 	ld.w	r11,r7[-28]
8000c2ae:	10 9c       	mov	r12,r8
8000c2b0:	c6 6f       	rcall	8000c17c <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
8000c2b2:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000c2b6:	ee c9 00 06 	sub	r9,r7,6
8000c2ba:	12 9b       	mov	r11,r9
8000c2bc:	10 9c       	mov	r12,r8
8000c2be:	cd 9e       	rcall	8000c070 <crc_accumulate>
#endif
	ck[0] = (uint8_t)(checksum & 0xFF);
8000c2c0:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8000c2c4:	5c 58       	castu.b	r8
8000c2c6:	ef 68 ff f0 	st.b	r7[-16],r8
	ck[1] = (uint8_t)(checksum >> 8);
8000c2ca:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8000c2ce:	5c 78       	castu.h	r8
8000c2d0:	a9 88       	lsr	r8,0x8
8000c2d2:	5c 88       	casts.h	r8
8000c2d4:	5c 58       	castu.b	r8
8000c2d6:	ef 68 ff f1 	st.b	r7[-15],r8

	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
8000c2da:	ee c8 00 0c 	sub	r8,r7,12
8000c2de:	30 6a       	mov	r10,6
8000c2e0:	10 9b       	mov	r11,r8
8000c2e2:	ee fc ff ec 	ld.w	r12,r7[-20]
8000c2e6:	c1 5c       	rcall	8000c310 <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
8000c2e8:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8000c2ec:	10 9a       	mov	r10,r8
8000c2ee:	ee fb ff e4 	ld.w	r11,r7[-28]
8000c2f2:	ee fc ff ec 	ld.w	r12,r7[-20]
8000c2f6:	c0 dc       	rcall	8000c310 <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
8000c2f8:	ee c8 00 10 	sub	r8,r7,16
8000c2fc:	30 2a       	mov	r10,2
8000c2fe:	10 9b       	mov	r11,r8
8000c300:	ee fc ff ec 	ld.w	r12,r7[-20]
8000c304:	c0 6c       	rcall	8000c310 <_mavlink_send_uart>
	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
}
8000c306:	2f 7d       	sub	sp,-36
8000c308:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000c30c:	80 00       	ld.sh	r0,r0[0x0]
8000c30e:	c0 9e       	rcall	8000bf20 <initialise_central_data+0x138>

8000c310 <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
8000c310:	eb cd 40 c0 	pushm	r6-r7,lr
8000c314:	1a 97       	mov	r7,sp
8000c316:	20 4d       	sub	sp,16
8000c318:	49 46       	lddpc	r6,8000c368 <_mavlink_send_uart+0x58>
8000c31a:	1e 26       	rsub	r6,pc
8000c31c:	ef 4c ff f8 	st.w	r7[-8],r12
8000c320:	ef 4b ff f4 	st.w	r7[-12],r11
8000c324:	14 98       	mov	r8,r10
8000c326:	ef 58 ff f0 	st.h	r7[-16],r8
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8000c32a:	30 08       	mov	r8,0
8000c32c:	ef 58 ff fe 	st.h	r7[-2],r8
8000c330:	c1 28       	rjmp	8000c354 <_mavlink_send_uart+0x44>
		comm_send_ch(chan, (uint8_t)buf[i]);
8000c332:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8000c336:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000c33a:	f2 08 00 08 	add	r8,r9,r8
8000c33e:	11 88       	ld.ub	r8,r8[0x0]
8000c340:	10 9b       	mov	r11,r8
8000c342:	ee fc ff f8 	ld.w	r12,r7[-8]
8000c346:	f0 16 00 dd 	mcall	r6[884]
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8000c34a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000c34e:	2f f8       	sub	r8,-1
8000c350:	ef 58 ff fe 	st.h	r7[-2],r8
8000c354:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000c358:	ef 08 ff f0 	ld.sh	r8,r7[-16]
8000c35c:	f0 09 19 00 	cp.h	r9,r8
8000c360:	ce 93       	brcs	8000c332 <_mavlink_send_uart+0x22>
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
8000c362:	2f cd       	sub	sp,-16
8000c364:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000c368:	80 00       	ld.sh	r0,r0[0x0]
8000c36a:	c1 9e       	rcall	8000bf9c <get_debug_stream>

8000c36c <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
8000c36c:	eb cd 40 80 	pushm	r7,lr
8000c370:	1a 97       	mov	r7,sp
8000c372:	20 2d       	sub	sp,8
8000c374:	ef 4c ff fc 	st.w	r7[-4],r12
8000c378:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
8000c37c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c380:	2f f8       	sub	r8,-1
8000c382:	11 88       	ld.ub	r8,r8[0x0]
8000c384:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000c388:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
8000c38a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c38e:	f0 c9 ff ff 	sub	r9,r8,-1
8000c392:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c396:	11 88       	ld.ub	r8,r8[0x0]
8000c398:	b2 88       	st.b	r9[0x0],r8
}
8000c39a:	2f ed       	sub	sp,-8
8000c39c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000c3a0 <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
8000c3a0:	eb cd 40 80 	pushm	r7,lr
8000c3a4:	1a 97       	mov	r7,sp
8000c3a6:	20 2d       	sub	sp,8
8000c3a8:	ef 4c ff fc 	st.w	r7[-4],r12
8000c3ac:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
8000c3b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c3b4:	2f d8       	sub	r8,-3
8000c3b6:	11 88       	ld.ub	r8,r8[0x0]
8000c3b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000c3bc:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
8000c3be:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c3c2:	f0 c9 ff ff 	sub	r9,r8,-1
8000c3c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c3ca:	2f e8       	sub	r8,-2
8000c3cc:	11 88       	ld.ub	r8,r8[0x0]
8000c3ce:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
8000c3d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c3d4:	f0 c9 ff fe 	sub	r9,r8,-2
8000c3d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c3dc:	2f f8       	sub	r8,-1
8000c3de:	11 88       	ld.ub	r8,r8[0x0]
8000c3e0:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
8000c3e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c3e6:	f0 c9 ff fd 	sub	r9,r8,-3
8000c3ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c3ee:	11 88       	ld.ub	r8,r8[0x0]
8000c3f0:	b2 88       	st.b	r9[0x0],r8
}
8000c3f2:	2f ed       	sub	sp,-8
8000c3f4:	e3 cd 80 80 	ldm	sp++,r7,pc

8000c3f8 <byte_swap_8>:
static inline void byte_swap_8(char *dst, const char *src)
{
8000c3f8:	eb cd 40 80 	pushm	r7,lr
8000c3fc:	1a 97       	mov	r7,sp
8000c3fe:	20 2d       	sub	sp,8
8000c400:	ef 4c ff fc 	st.w	r7[-4],r12
8000c404:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[7];
8000c408:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c40c:	2f 98       	sub	r8,-7
8000c40e:	11 88       	ld.ub	r8,r8[0x0]
8000c410:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000c414:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[6];
8000c416:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c41a:	f0 c9 ff ff 	sub	r9,r8,-1
8000c41e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c422:	2f a8       	sub	r8,-6
8000c424:	11 88       	ld.ub	r8,r8[0x0]
8000c426:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[5];
8000c428:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c42c:	f0 c9 ff fe 	sub	r9,r8,-2
8000c430:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c434:	2f b8       	sub	r8,-5
8000c436:	11 88       	ld.ub	r8,r8[0x0]
8000c438:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[4];
8000c43a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c43e:	f0 c9 ff fd 	sub	r9,r8,-3
8000c442:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c446:	2f c8       	sub	r8,-4
8000c448:	11 88       	ld.ub	r8,r8[0x0]
8000c44a:	b2 88       	st.b	r9[0x0],r8
	dst[4] = src[3];
8000c44c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c450:	f0 c9 ff fc 	sub	r9,r8,-4
8000c454:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c458:	2f d8       	sub	r8,-3
8000c45a:	11 88       	ld.ub	r8,r8[0x0]
8000c45c:	b2 88       	st.b	r9[0x0],r8
	dst[5] = src[2];
8000c45e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c462:	f0 c9 ff fb 	sub	r9,r8,-5
8000c466:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c46a:	2f e8       	sub	r8,-2
8000c46c:	11 88       	ld.ub	r8,r8[0x0]
8000c46e:	b2 88       	st.b	r9[0x0],r8
	dst[6] = src[1];
8000c470:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c474:	f0 c9 ff fa 	sub	r9,r8,-6
8000c478:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c47c:	2f f8       	sub	r8,-1
8000c47e:	11 88       	ld.ub	r8,r8[0x0]
8000c480:	b2 88       	st.b	r9[0x0],r8
	dst[7] = src[0];
8000c482:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c486:	f0 c9 ff f9 	sub	r9,r8,-7
8000c48a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c48e:	11 88       	ld.ub	r8,r8[0x0]
8000c490:	b2 88       	st.b	r9[0x0],r8
}
8000c492:	2f ed       	sub	sp,-8
8000c494:	e3 cd 80 80 	ldm	sp++,r7,pc

8000c498 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8000c498:	eb cd 40 c0 	pushm	r6-r7,lr
8000c49c:	1a 97       	mov	r7,sp
8000c49e:	20 3d       	sub	sp,12
8000c4a0:	49 06       	lddpc	r6,8000c4e0 <mav_array_memcpy+0x48>
8000c4a2:	1e 26       	rsub	r6,pc
8000c4a4:	ef 4c ff fc 	st.w	r7[-4],r12
8000c4a8:	ef 4b ff f8 	st.w	r7[-8],r11
8000c4ac:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8000c4b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c4b4:	58 08       	cp.w	r8,0
8000c4b6:	c0 91       	brne	8000c4c8 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000c4b8:	ee fa ff f4 	ld.w	r10,r7[-12]
8000c4bc:	30 0b       	mov	r11,0
8000c4be:	ee fc ff fc 	ld.w	r12,r7[-4]
8000c4c2:	f0 16 00 31 	mcall	r6[196]
8000c4c6:	c0 98       	rjmp	8000c4d8 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000c4c8:	ee fa ff f4 	ld.w	r10,r7[-12]
8000c4cc:	ee fb ff f8 	ld.w	r11,r7[-8]
8000c4d0:	ee fc ff fc 	ld.w	r12,r7[-4]
8000c4d4:	f0 16 00 1b 	mcall	r6[108]
	}
}
8000c4d8:	2f dd       	sub	sp,-12
8000c4da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000c4de:	00 00       	add	r0,r0
8000c4e0:	80 00       	ld.sh	r0,r0[0x0]
8000c4e2:	c3 26       	brmi	8000c546 <mavlink_msg_heartbeat_send+0x1e>

8000c4e4 <_mav_put_char_array>:

/*
 * Place a char array into a buffer
 */
static inline void _mav_put_char_array(char *buf, uint8_t wire_offset, const char *b, uint8_t array_length)
{
8000c4e4:	eb cd 40 c0 	pushm	r6-r7,lr
8000c4e8:	1a 97       	mov	r7,sp
8000c4ea:	20 4d       	sub	sp,16
8000c4ec:	48 e6       	lddpc	r6,8000c524 <_mav_put_char_array+0x40>
8000c4ee:	1e 26       	rsub	r6,pc
8000c4f0:	ef 4c ff fc 	st.w	r7[-4],r12
8000c4f4:	ef 4a ff f4 	st.w	r7[-12],r10
8000c4f8:	12 98       	mov	r8,r9
8000c4fa:	16 99       	mov	r9,r11
8000c4fc:	ef 69 ff f8 	st.b	r7[-8],r9
8000c500:	ef 68 ff f0 	st.b	r7[-16],r8
	mav_array_memcpy(&buf[wire_offset], b, array_length);
8000c504:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000c508:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000c50c:	ee fa ff fc 	ld.w	r10,r7[-4]
8000c510:	f4 08 00 08 	add	r8,r10,r8
8000c514:	12 9a       	mov	r10,r9
8000c516:	ee fb ff f4 	ld.w	r11,r7[-12]
8000c51a:	10 9c       	mov	r12,r8
8000c51c:	cb ef       	rcall	8000c498 <mav_array_memcpy>

}
8000c51e:	2f cd       	sub	sp,-16
8000c520:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000c524:	80 00       	ld.sh	r0,r0[0x0]
8000c526:	c3 72       	brcc	8000c594 <mavlink_msg_heartbeat_send+0x6c>

8000c528 <mavlink_msg_heartbeat_send>:
 * @param system_status System status flag, see MAV_STATE ENUM
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_heartbeat_send(mavlink_channel_t chan, uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
8000c528:	eb cd 40 c0 	pushm	r6-r7,lr
8000c52c:	1a 97       	mov	r7,sp
8000c52e:	20 9d       	sub	sp,36
8000c530:	49 b6       	lddpc	r6,8000c59c <mavlink_msg_heartbeat_send+0x74>
8000c532:	1e 26       	rsub	r6,pc
8000c534:	ee ce ff f4 	sub	lr,r7,-12
8000c538:	ef 4c ff f0 	st.w	r7[-16],r12
8000c53c:	ef 48 ff e0 	st.w	r7[-32],r8
8000c540:	7c 08       	ld.w	r8,lr[0x0]
8000c542:	ef 6b ff ec 	st.b	r7[-20],r11
8000c546:	ef 6a ff e8 	st.b	r7[-24],r10
8000c54a:	ef 69 ff e4 	st.b	r7[-28],r9
8000c54e:	ef 68 ff dc 	st.b	r7[-36],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_HEARTBEAT_LEN];
	_mav_put_uint32_t(buf, 0, custom_mode);
8000c552:	ee c9 00 20 	sub	r9,r7,32
8000c556:	ee c8 00 0c 	sub	r8,r7,12
8000c55a:	12 9b       	mov	r11,r9
8000c55c:	10 9c       	mov	r12,r8
8000c55e:	c2 1f       	rcall	8000c3a0 <byte_swap_4>
	_mav_put_uint8_t(buf, 4, type);
8000c560:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000c564:	ef 68 ff f8 	st.b	r7[-8],r8
	_mav_put_uint8_t(buf, 5, autopilot);
8000c568:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000c56c:	ef 68 ff f9 	st.b	r7[-7],r8
	_mav_put_uint8_t(buf, 6, base_mode);
8000c570:	ef 38 ff e4 	ld.ub	r8,r7[-28]
8000c574:	ef 68 ff fa 	st.b	r7[-6],r8
	_mav_put_uint8_t(buf, 7, system_status);
8000c578:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000c57c:	ef 68 ff fb 	st.b	r7[-5],r8
	_mav_put_uint8_t(buf, 8, 3);
8000c580:	30 38       	mov	r8,3
8000c582:	ef 68 ff fc 	st.b	r7[-4],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, buf, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
8000c586:	ee ca 00 0c 	sub	r10,r7,12
8000c58a:	33 28       	mov	r8,50
8000c58c:	30 99       	mov	r9,9
8000c58e:	30 0b       	mov	r11,0
8000c590:	ee fc ff f0 	ld.w	r12,r7[-16]
8000c594:	c3 ee       	rcall	8000c210 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, (const char *)&packet, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, (const char *)&packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#endif
#endif
}
8000c596:	2f 7d       	sub	sp,-36
8000c598:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000c59c:	80 00       	ld.sh	r0,r0[0x0]
8000c59e:	c3 b6       	brmi	8000c614 <mavlink_msg_gps_raw_int_send+0x74>

8000c5a0 <mavlink_msg_gps_raw_int_send>:
 * @param satellites_visible Number of satellites visible. If unknown, set to 255
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_gps_raw_int_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible)
{
8000c5a0:	eb cd 40 e0 	pushm	r5-r7,lr
8000c5a4:	1a 97       	mov	r7,sp
8000c5a6:	21 2d       	sub	sp,72
8000c5a8:	4b 76       	lddpc	r6,8000c684 <mavlink_msg_gps_raw_int_send+0xe4>
8000c5aa:	1e 26       	rsub	r6,pc
8000c5ac:	ee c5 ff f0 	sub	r5,r7,-16
8000c5b0:	ef 4c ff dc 	st.w	r7[-36],r12
8000c5b4:	ee eb ff d4 	st.d	r7[-44],r10
8000c5b8:	12 9e       	mov	lr,r9
8000c5ba:	ef 48 ff cc 	st.w	r7[-52],r8
8000c5be:	6a 2c       	ld.w	r12,r5[0x8]
8000c5c0:	6a 3b       	ld.w	r11,r5[0xc]
8000c5c2:	6a 4a       	ld.w	r10,r5[0x10]
8000c5c4:	6a 59       	ld.w	r9,r5[0x14]
8000c5c6:	6a 68       	ld.w	r8,r5[0x18]
8000c5c8:	ef 6e ff d0 	st.b	r7[-48],lr
8000c5cc:	ef 5c ff c8 	st.h	r7[-56],r12
8000c5d0:	ef 5b ff c4 	st.h	r7[-60],r11
8000c5d4:	ef 5a ff c0 	st.h	r7[-64],r10
8000c5d8:	ef 59 ff bc 	st.h	r7[-68],r9
8000c5dc:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_GPS_RAW_INT_LEN];
	_mav_put_uint64_t(buf, 0, time_usec);
8000c5e0:	ee c9 00 2c 	sub	r9,r7,44
8000c5e4:	ee c8 00 20 	sub	r8,r7,32
8000c5e8:	12 9b       	mov	r11,r9
8000c5ea:	10 9c       	mov	r12,r8
8000c5ec:	c0 6f       	rcall	8000c3f8 <byte_swap_8>
	_mav_put_int32_t(buf, 8, lat);
8000c5ee:	ee c9 00 34 	sub	r9,r7,52
8000c5f2:	ee c8 00 20 	sub	r8,r7,32
8000c5f6:	2f 88       	sub	r8,-8
8000c5f8:	12 9b       	mov	r11,r9
8000c5fa:	10 9c       	mov	r12,r8
8000c5fc:	cd 2e       	rcall	8000c3a0 <byte_swap_4>
	_mav_put_int32_t(buf, 12, lon);
8000c5fe:	0a 99       	mov	r9,r5
8000c600:	ee c8 00 20 	sub	r8,r7,32
8000c604:	2f 48       	sub	r8,-12
8000c606:	12 9b       	mov	r11,r9
8000c608:	10 9c       	mov	r12,r8
8000c60a:	cc be       	rcall	8000c3a0 <byte_swap_4>
	_mav_put_int32_t(buf, 16, alt);
8000c60c:	ea c9 ff fc 	sub	r9,r5,-4
8000c610:	ee c8 00 20 	sub	r8,r7,32
8000c614:	2f 08       	sub	r8,-16
8000c616:	12 9b       	mov	r11,r9
8000c618:	10 9c       	mov	r12,r8
8000c61a:	cc 3e       	rcall	8000c3a0 <byte_swap_4>
	_mav_put_uint16_t(buf, 20, eph);
8000c61c:	ee c9 00 38 	sub	r9,r7,56
8000c620:	ee c8 00 20 	sub	r8,r7,32
8000c624:	2e c8       	sub	r8,-20
8000c626:	12 9b       	mov	r11,r9
8000c628:	10 9c       	mov	r12,r8
8000c62a:	ca 1e       	rcall	8000c36c <byte_swap_2>
	_mav_put_uint16_t(buf, 22, epv);
8000c62c:	ee c9 00 3c 	sub	r9,r7,60
8000c630:	ee c8 00 20 	sub	r8,r7,32
8000c634:	2e a8       	sub	r8,-22
8000c636:	12 9b       	mov	r11,r9
8000c638:	10 9c       	mov	r12,r8
8000c63a:	c9 9e       	rcall	8000c36c <byte_swap_2>
	_mav_put_uint16_t(buf, 24, vel);
8000c63c:	ee c9 00 40 	sub	r9,r7,64
8000c640:	ee c8 00 20 	sub	r8,r7,32
8000c644:	2e 88       	sub	r8,-24
8000c646:	12 9b       	mov	r11,r9
8000c648:	10 9c       	mov	r12,r8
8000c64a:	c9 1e       	rcall	8000c36c <byte_swap_2>
	_mav_put_uint16_t(buf, 26, cog);
8000c64c:	ee c9 00 44 	sub	r9,r7,68
8000c650:	ee c8 00 20 	sub	r8,r7,32
8000c654:	2e 68       	sub	r8,-26
8000c656:	12 9b       	mov	r11,r9
8000c658:	10 9c       	mov	r12,r8
8000c65a:	c8 9e       	rcall	8000c36c <byte_swap_2>
	_mav_put_uint8_t(buf, 28, fix_type);
8000c65c:	ef 38 ff d0 	ld.ub	r8,r7[-48]
8000c660:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 29, satellites_visible);
8000c664:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8000c668:	ef 68 ff fd 	st.b	r7[-3],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GPS_RAW_INT, buf, MAVLINK_MSG_ID_GPS_RAW_INT_LEN, MAVLINK_MSG_ID_GPS_RAW_INT_CRC);
8000c66c:	ee ca 00 20 	sub	r10,r7,32
8000c670:	31 88       	mov	r8,24
8000c672:	31 e9       	mov	r9,30
8000c674:	31 8b       	mov	r11,24
8000c676:	ee fc ff dc 	ld.w	r12,r7[-36]
8000c67a:	fe b0 fd cb 	rcall	8000c210 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GPS_RAW_INT, (const char *)&packet, MAVLINK_MSG_ID_GPS_RAW_INT_LEN, MAVLINK_MSG_ID_GPS_RAW_INT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GPS_RAW_INT, (const char *)&packet, MAVLINK_MSG_ID_GPS_RAW_INT_LEN);
#endif
#endif
}
8000c67e:	2e ed       	sub	sp,-72
8000c680:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000c684:	80 00       	ld.sh	r0,r0[0x0]
8000c686:	c4 2e       	rcall	8000c30a <_mav_finalize_message_chan_send+0xfa>

8000c688 <mavlink_msg_scaled_imu_send>:
 * @param zmag Z Magnetic field (milli tesla)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_scaled_imu_send(mavlink_channel_t chan, uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
8000c688:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000c68c:	1a 97       	mov	r7,sp
8000c68e:	21 1d       	sub	sp,68
8000c690:	4c 26       	lddpc	r6,8000c798 <mavlink_msg_scaled_imu_send+0x110>
8000c692:	1e 26       	rsub	r6,pc
8000c694:	ee ce ff e4 	sub	lr,r7,-28
8000c698:	ef 4c ff e4 	st.w	r7[-28],r12
8000c69c:	ef 4b ff e0 	st.w	r7[-32],r11
8000c6a0:	14 91       	mov	r1,r10
8000c6a2:	12 92       	mov	r2,r9
8000c6a4:	10 93       	mov	r3,r8
8000c6a6:	7c 05       	ld.w	r5,lr[0x0]
8000c6a8:	7c 1c       	ld.w	r12,lr[0x4]
8000c6aa:	7c 2b       	ld.w	r11,lr[0x8]
8000c6ac:	7c 3a       	ld.w	r10,lr[0xc]
8000c6ae:	7c 49       	ld.w	r9,lr[0x10]
8000c6b0:	7c 58       	ld.w	r8,lr[0x14]
8000c6b2:	02 9e       	mov	lr,r1
8000c6b4:	ef 5e ff dc 	st.h	r7[-36],lr
8000c6b8:	04 9e       	mov	lr,r2
8000c6ba:	ef 5e ff d8 	st.h	r7[-40],lr
8000c6be:	06 9e       	mov	lr,r3
8000c6c0:	ef 5e ff d4 	st.h	r7[-44],lr
8000c6c4:	0a 9e       	mov	lr,r5
8000c6c6:	ef 5e ff d0 	st.h	r7[-48],lr
8000c6ca:	ef 5c ff cc 	st.h	r7[-52],r12
8000c6ce:	ef 5b ff c8 	st.h	r7[-56],r11
8000c6d2:	ef 5a ff c4 	st.h	r7[-60],r10
8000c6d6:	ef 59 ff c0 	st.h	r7[-64],r9
8000c6da:	ef 58 ff bc 	st.h	r7[-68],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_SCALED_IMU_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000c6de:	ee c9 00 20 	sub	r9,r7,32
8000c6e2:	ee c8 00 18 	sub	r8,r7,24
8000c6e6:	12 9b       	mov	r11,r9
8000c6e8:	10 9c       	mov	r12,r8
8000c6ea:	c5 be       	rcall	8000c3a0 <byte_swap_4>
	_mav_put_int16_t(buf, 4, xacc);
8000c6ec:	ee c9 00 24 	sub	r9,r7,36
8000c6f0:	ee c8 00 18 	sub	r8,r7,24
8000c6f4:	2f c8       	sub	r8,-4
8000c6f6:	12 9b       	mov	r11,r9
8000c6f8:	10 9c       	mov	r12,r8
8000c6fa:	c3 9e       	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 6, yacc);
8000c6fc:	ee c9 00 28 	sub	r9,r7,40
8000c700:	ee c8 00 18 	sub	r8,r7,24
8000c704:	2f a8       	sub	r8,-6
8000c706:	12 9b       	mov	r11,r9
8000c708:	10 9c       	mov	r12,r8
8000c70a:	c3 1e       	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 8, zacc);
8000c70c:	ee c9 00 2c 	sub	r9,r7,44
8000c710:	ee c8 00 18 	sub	r8,r7,24
8000c714:	2f 88       	sub	r8,-8
8000c716:	12 9b       	mov	r11,r9
8000c718:	10 9c       	mov	r12,r8
8000c71a:	c2 9e       	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 10, xgyro);
8000c71c:	ee c9 00 30 	sub	r9,r7,48
8000c720:	ee c8 00 18 	sub	r8,r7,24
8000c724:	2f 68       	sub	r8,-10
8000c726:	12 9b       	mov	r11,r9
8000c728:	10 9c       	mov	r12,r8
8000c72a:	c2 1e       	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 12, ygyro);
8000c72c:	ee c9 00 34 	sub	r9,r7,52
8000c730:	ee c8 00 18 	sub	r8,r7,24
8000c734:	2f 48       	sub	r8,-12
8000c736:	12 9b       	mov	r11,r9
8000c738:	10 9c       	mov	r12,r8
8000c73a:	c1 9e       	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 14, zgyro);
8000c73c:	ee c9 00 38 	sub	r9,r7,56
8000c740:	ee c8 00 18 	sub	r8,r7,24
8000c744:	2f 28       	sub	r8,-14
8000c746:	12 9b       	mov	r11,r9
8000c748:	10 9c       	mov	r12,r8
8000c74a:	c1 1e       	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 16, xmag);
8000c74c:	ee c9 00 3c 	sub	r9,r7,60
8000c750:	ee c8 00 18 	sub	r8,r7,24
8000c754:	2f 08       	sub	r8,-16
8000c756:	12 9b       	mov	r11,r9
8000c758:	10 9c       	mov	r12,r8
8000c75a:	c0 9e       	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 18, ymag);
8000c75c:	ee c9 00 40 	sub	r9,r7,64
8000c760:	ee c8 00 18 	sub	r8,r7,24
8000c764:	2e e8       	sub	r8,-18
8000c766:	12 9b       	mov	r11,r9
8000c768:	10 9c       	mov	r12,r8
8000c76a:	c0 1e       	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 20, zmag);
8000c76c:	ee c9 00 44 	sub	r9,r7,68
8000c770:	ee c8 00 18 	sub	r8,r7,24
8000c774:	2e c8       	sub	r8,-20
8000c776:	12 9b       	mov	r11,r9
8000c778:	10 9c       	mov	r12,r8
8000c77a:	fe b0 fd f9 	rcall	8000c36c <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_IMU, buf, MAVLINK_MSG_ID_SCALED_IMU_LEN, MAVLINK_MSG_ID_SCALED_IMU_CRC);
8000c77e:	ee ca 00 18 	sub	r10,r7,24
8000c782:	e0 68 00 aa 	mov	r8,170
8000c786:	31 69       	mov	r9,22
8000c788:	31 ab       	mov	r11,26
8000c78a:	ee fc ff e4 	ld.w	r12,r7[-28]
8000c78e:	fe b0 fd 41 	rcall	8000c210 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_IMU, (const char *)&packet, MAVLINK_MSG_ID_SCALED_IMU_LEN, MAVLINK_MSG_ID_SCALED_IMU_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_IMU, (const char *)&packet, MAVLINK_MSG_ID_SCALED_IMU_LEN);
#endif
#endif
}
8000c792:	2e fd       	sub	sp,-68
8000c794:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000c798:	80 00       	ld.sh	r0,r0[0x0]
8000c79a:	c5 16       	brmi	8000c83c <mavlink_msg_raw_imu_send+0xa0>

8000c79c <mavlink_msg_raw_imu_send>:
 * @param zmag Z Magnetic field (raw)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_raw_imu_send(mavlink_channel_t chan, uint64_t time_usec, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
8000c79c:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000c7a0:	1a 97       	mov	r7,sp
8000c7a2:	21 3d       	sub	sp,76
8000c7a4:	4c 76       	lddpc	r6,8000c8c0 <mavlink_msg_raw_imu_send+0x124>
8000c7a6:	1e 26       	rsub	r6,pc
8000c7a8:	ee ce ff e4 	sub	lr,r7,-28
8000c7ac:	ef 4c ff e0 	st.w	r7[-32],r12
8000c7b0:	ee eb ff d8 	st.d	r7[-40],r10
8000c7b4:	12 91       	mov	r1,r9
8000c7b6:	10 92       	mov	r2,r8
8000c7b8:	7c 03       	ld.w	r3,lr[0x0]
8000c7ba:	7c 15       	ld.w	r5,lr[0x4]
8000c7bc:	7c 2c       	ld.w	r12,lr[0x8]
8000c7be:	7c 3b       	ld.w	r11,lr[0xc]
8000c7c0:	7c 4a       	ld.w	r10,lr[0x10]
8000c7c2:	7c 59       	ld.w	r9,lr[0x14]
8000c7c4:	7c 68       	ld.w	r8,lr[0x18]
8000c7c6:	02 9e       	mov	lr,r1
8000c7c8:	ef 5e ff d4 	st.h	r7[-44],lr
8000c7cc:	04 9e       	mov	lr,r2
8000c7ce:	ef 5e ff d0 	st.h	r7[-48],lr
8000c7d2:	06 9e       	mov	lr,r3
8000c7d4:	ef 5e ff cc 	st.h	r7[-52],lr
8000c7d8:	0a 9e       	mov	lr,r5
8000c7da:	ef 5e ff c8 	st.h	r7[-56],lr
8000c7de:	ef 5c ff c4 	st.h	r7[-60],r12
8000c7e2:	ef 5b ff c0 	st.h	r7[-64],r11
8000c7e6:	ef 5a ff bc 	st.h	r7[-68],r10
8000c7ea:	ef 59 ff b8 	st.h	r7[-72],r9
8000c7ee:	ef 58 ff b4 	st.h	r7[-76],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_RAW_IMU_LEN];
	_mav_put_uint64_t(buf, 0, time_usec);
8000c7f2:	ee c9 00 28 	sub	r9,r7,40
8000c7f6:	ee c8 00 1c 	sub	r8,r7,28
8000c7fa:	12 9b       	mov	r11,r9
8000c7fc:	10 9c       	mov	r12,r8
8000c7fe:	fe b0 fd fd 	rcall	8000c3f8 <byte_swap_8>
	_mav_put_int16_t(buf, 8, xacc);
8000c802:	ee c9 00 2c 	sub	r9,r7,44
8000c806:	ee c8 00 1c 	sub	r8,r7,28
8000c80a:	2f 88       	sub	r8,-8
8000c80c:	12 9b       	mov	r11,r9
8000c80e:	10 9c       	mov	r12,r8
8000c810:	fe b0 fd ae 	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 10, yacc);
8000c814:	ee c9 00 30 	sub	r9,r7,48
8000c818:	ee c8 00 1c 	sub	r8,r7,28
8000c81c:	2f 68       	sub	r8,-10
8000c81e:	12 9b       	mov	r11,r9
8000c820:	10 9c       	mov	r12,r8
8000c822:	fe b0 fd a5 	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 12, zacc);
8000c826:	ee c9 00 34 	sub	r9,r7,52
8000c82a:	ee c8 00 1c 	sub	r8,r7,28
8000c82e:	2f 48       	sub	r8,-12
8000c830:	12 9b       	mov	r11,r9
8000c832:	10 9c       	mov	r12,r8
8000c834:	fe b0 fd 9c 	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 14, xgyro);
8000c838:	ee c9 00 38 	sub	r9,r7,56
8000c83c:	ee c8 00 1c 	sub	r8,r7,28
8000c840:	2f 28       	sub	r8,-14
8000c842:	12 9b       	mov	r11,r9
8000c844:	10 9c       	mov	r12,r8
8000c846:	fe b0 fd 93 	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 16, ygyro);
8000c84a:	ee c9 00 3c 	sub	r9,r7,60
8000c84e:	ee c8 00 1c 	sub	r8,r7,28
8000c852:	2f 08       	sub	r8,-16
8000c854:	12 9b       	mov	r11,r9
8000c856:	10 9c       	mov	r12,r8
8000c858:	fe b0 fd 8a 	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 18, zgyro);
8000c85c:	ee c9 00 40 	sub	r9,r7,64
8000c860:	ee c8 00 1c 	sub	r8,r7,28
8000c864:	2e e8       	sub	r8,-18
8000c866:	12 9b       	mov	r11,r9
8000c868:	10 9c       	mov	r12,r8
8000c86a:	fe b0 fd 81 	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 20, xmag);
8000c86e:	ee c9 00 44 	sub	r9,r7,68
8000c872:	ee c8 00 1c 	sub	r8,r7,28
8000c876:	2e c8       	sub	r8,-20
8000c878:	12 9b       	mov	r11,r9
8000c87a:	10 9c       	mov	r12,r8
8000c87c:	fe b0 fd 78 	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 22, ymag);
8000c880:	ee c9 00 48 	sub	r9,r7,72
8000c884:	ee c8 00 1c 	sub	r8,r7,28
8000c888:	2e a8       	sub	r8,-22
8000c88a:	12 9b       	mov	r11,r9
8000c88c:	10 9c       	mov	r12,r8
8000c88e:	fe b0 fd 6f 	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 24, zmag);
8000c892:	ee c9 00 4c 	sub	r9,r7,76
8000c896:	ee c8 00 1c 	sub	r8,r7,28
8000c89a:	2e 88       	sub	r8,-24
8000c89c:	12 9b       	mov	r11,r9
8000c89e:	10 9c       	mov	r12,r8
8000c8a0:	fe b0 fd 66 	rcall	8000c36c <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RAW_IMU, buf, MAVLINK_MSG_ID_RAW_IMU_LEN, MAVLINK_MSG_ID_RAW_IMU_CRC);
8000c8a4:	ee ca 00 1c 	sub	r10,r7,28
8000c8a8:	e0 68 00 90 	mov	r8,144
8000c8ac:	31 a9       	mov	r9,26
8000c8ae:	31 bb       	mov	r11,27
8000c8b0:	ee fc ff e0 	ld.w	r12,r7[-32]
8000c8b4:	fe b0 fc ae 	rcall	8000c210 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RAW_IMU, (const char *)&packet, MAVLINK_MSG_ID_RAW_IMU_LEN, MAVLINK_MSG_ID_RAW_IMU_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RAW_IMU, (const char *)&packet, MAVLINK_MSG_ID_RAW_IMU_LEN);
#endif
#endif
}
8000c8b8:	2e dd       	sub	sp,-76
8000c8ba:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000c8be:	00 00       	add	r0,r0
8000c8c0:	80 00       	ld.sh	r0,r0[0x0]
8000c8c2:	c6 2a       	rjmp	8000c586 <mavlink_msg_heartbeat_send+0x5e>

8000c8c4 <mavlink_msg_scaled_pressure_send>:
 * @param temperature Temperature measurement (0.01 degrees celsius)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_scaled_pressure_send(mavlink_channel_t chan, uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
{
8000c8c4:	eb cd 40 c0 	pushm	r6-r7,lr
8000c8c8:	1a 97       	mov	r7,sp
8000c8ca:	20 9d       	sub	sp,36
8000c8cc:	49 e6       	lddpc	r6,8000c944 <mavlink_msg_scaled_pressure_send+0x80>
8000c8ce:	1e 26       	rsub	r6,pc
8000c8d0:	ef 4c ff ec 	st.w	r7[-20],r12
8000c8d4:	ef 4b ff e8 	st.w	r7[-24],r11
8000c8d8:	ef 4a ff e4 	st.w	r7[-28],r10
8000c8dc:	ef 49 ff e0 	st.w	r7[-32],r9
8000c8e0:	ef 58 ff dc 	st.h	r7[-36],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_SCALED_PRESSURE_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000c8e4:	ee c9 00 18 	sub	r9,r7,24
8000c8e8:	ee c8 00 10 	sub	r8,r7,16
8000c8ec:	12 9b       	mov	r11,r9
8000c8ee:	10 9c       	mov	r12,r8
8000c8f0:	fe b0 fd 58 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 4, press_abs);
8000c8f4:	ee c9 00 1c 	sub	r9,r7,28
8000c8f8:	ee c8 00 10 	sub	r8,r7,16
8000c8fc:	2f c8       	sub	r8,-4
8000c8fe:	12 9b       	mov	r11,r9
8000c900:	10 9c       	mov	r12,r8
8000c902:	fe b0 fd 4f 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 8, press_diff);
8000c906:	ee c9 00 20 	sub	r9,r7,32
8000c90a:	ee c8 00 10 	sub	r8,r7,16
8000c90e:	2f 88       	sub	r8,-8
8000c910:	12 9b       	mov	r11,r9
8000c912:	10 9c       	mov	r12,r8
8000c914:	fe b0 fd 46 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_int16_t(buf, 12, temperature);
8000c918:	ee c9 00 24 	sub	r9,r7,36
8000c91c:	ee c8 00 10 	sub	r8,r7,16
8000c920:	2f 48       	sub	r8,-12
8000c922:	12 9b       	mov	r11,r9
8000c924:	10 9c       	mov	r12,r8
8000c926:	fe b0 fd 23 	rcall	8000c36c <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_PRESSURE, buf, MAVLINK_MSG_ID_SCALED_PRESSURE_LEN, MAVLINK_MSG_ID_SCALED_PRESSURE_CRC);
8000c92a:	ee ca 00 10 	sub	r10,r7,16
8000c92e:	37 38       	mov	r8,115
8000c930:	30 e9       	mov	r9,14
8000c932:	31 db       	mov	r11,29
8000c934:	ee fc ff ec 	ld.w	r12,r7[-20]
8000c938:	fe b0 fc 6c 	rcall	8000c210 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_PRESSURE, (const char *)&packet, MAVLINK_MSG_ID_SCALED_PRESSURE_LEN, MAVLINK_MSG_ID_SCALED_PRESSURE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_PRESSURE, (const char *)&packet, MAVLINK_MSG_ID_SCALED_PRESSURE_LEN);
#endif
#endif
}
8000c93c:	2f 7d       	sub	sp,-36
8000c93e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000c942:	00 00       	add	r0,r0
8000c944:	80 00       	ld.sh	r0,r0[0x0]
8000c946:	c7 52       	brcc	8000ca30 <mavlink_msg_attitude_quaternion_send+0x2c>

8000c948 <mavlink_msg_attitude_send>:
 * @param yawspeed Yaw angular speed (rad/s)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_attitude_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed)
{
8000c948:	eb cd 40 e0 	pushm	r5-r7,lr
8000c94c:	1a 97       	mov	r7,sp
8000c94e:	20 cd       	sub	sp,48
8000c950:	4a c6       	lddpc	r6,8000ca00 <mavlink_msg_attitude_send+0xb8>
8000c952:	1e 26       	rsub	r6,pc
8000c954:	ee c5 ff f0 	sub	r5,r7,-16
8000c958:	ef 4c ff e0 	st.w	r7[-32],r12
8000c95c:	ef 4b ff dc 	st.w	r7[-36],r11
8000c960:	ef 4a ff d8 	st.w	r7[-40],r10
8000c964:	ef 49 ff d4 	st.w	r7[-44],r9
8000c968:	ef 48 ff d0 	st.w	r7[-48],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ATTITUDE_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000c96c:	ee c9 00 24 	sub	r9,r7,36
8000c970:	ee c8 00 1c 	sub	r8,r7,28
8000c974:	12 9b       	mov	r11,r9
8000c976:	10 9c       	mov	r12,r8
8000c978:	fe b0 fd 14 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 4, roll);
8000c97c:	ee c9 00 28 	sub	r9,r7,40
8000c980:	ee c8 00 1c 	sub	r8,r7,28
8000c984:	2f c8       	sub	r8,-4
8000c986:	12 9b       	mov	r11,r9
8000c988:	10 9c       	mov	r12,r8
8000c98a:	fe b0 fd 0b 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 8, pitch);
8000c98e:	ee c9 00 2c 	sub	r9,r7,44
8000c992:	ee c8 00 1c 	sub	r8,r7,28
8000c996:	2f 88       	sub	r8,-8
8000c998:	12 9b       	mov	r11,r9
8000c99a:	10 9c       	mov	r12,r8
8000c99c:	fe b0 fd 02 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 12, yaw);
8000c9a0:	ee c9 00 30 	sub	r9,r7,48
8000c9a4:	ee c8 00 1c 	sub	r8,r7,28
8000c9a8:	2f 48       	sub	r8,-12
8000c9aa:	12 9b       	mov	r11,r9
8000c9ac:	10 9c       	mov	r12,r8
8000c9ae:	fe b0 fc f9 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 16, rollspeed);
8000c9b2:	0a 99       	mov	r9,r5
8000c9b4:	ee c8 00 1c 	sub	r8,r7,28
8000c9b8:	2f 08       	sub	r8,-16
8000c9ba:	12 9b       	mov	r11,r9
8000c9bc:	10 9c       	mov	r12,r8
8000c9be:	fe b0 fc f1 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 20, pitchspeed);
8000c9c2:	ea c9 ff fc 	sub	r9,r5,-4
8000c9c6:	ee c8 00 1c 	sub	r8,r7,28
8000c9ca:	2e c8       	sub	r8,-20
8000c9cc:	12 9b       	mov	r11,r9
8000c9ce:	10 9c       	mov	r12,r8
8000c9d0:	fe b0 fc e8 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 24, yawspeed);
8000c9d4:	ea c9 ff f8 	sub	r9,r5,-8
8000c9d8:	ee c8 00 1c 	sub	r8,r7,28
8000c9dc:	2e 88       	sub	r8,-24
8000c9de:	12 9b       	mov	r11,r9
8000c9e0:	10 9c       	mov	r12,r8
8000c9e2:	fe b0 fc df 	rcall	8000c3a0 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE, buf, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
8000c9e6:	ee ca 00 1c 	sub	r10,r7,28
8000c9ea:	32 78       	mov	r8,39
8000c9ec:	31 c9       	mov	r9,28
8000c9ee:	31 eb       	mov	r11,30
8000c9f0:	ee fc ff e0 	ld.w	r12,r7[-32]
8000c9f4:	fe b0 fc 0e 	rcall	8000c210 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_LEN);
#endif
#endif
}
8000c9f8:	2f 4d       	sub	sp,-48
8000c9fa:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000c9fe:	00 00       	add	r0,r0
8000ca00:	80 00       	ld.sh	r0,r0[0x0]
8000ca02:	c7 d6       	brmi	8000cafc <mavlink_msg_local_position_ned_send+0x28>

8000ca04 <mavlink_msg_attitude_quaternion_send>:
 * @param yawspeed Yaw angular speed (rad/s)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_attitude_quaternion_send(mavlink_channel_t chan, uint32_t time_boot_ms, float q1, float q2, float q3, float q4, float rollspeed, float pitchspeed, float yawspeed)
{
8000ca04:	eb cd 40 e0 	pushm	r5-r7,lr
8000ca08:	1a 97       	mov	r7,sp
8000ca0a:	20 dd       	sub	sp,52
8000ca0c:	4b 16       	lddpc	r6,8000cad0 <mavlink_msg_attitude_quaternion_send+0xcc>
8000ca0e:	1e 26       	rsub	r6,pc
8000ca10:	ee c5 ff f0 	sub	r5,r7,-16
8000ca14:	ef 4c ff dc 	st.w	r7[-36],r12
8000ca18:	ef 4b ff d8 	st.w	r7[-40],r11
8000ca1c:	ef 4a ff d4 	st.w	r7[-44],r10
8000ca20:	ef 49 ff d0 	st.w	r7[-48],r9
8000ca24:	ef 48 ff cc 	st.w	r7[-52],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000ca28:	ee c9 00 28 	sub	r9,r7,40
8000ca2c:	ee c8 00 20 	sub	r8,r7,32
8000ca30:	12 9b       	mov	r11,r9
8000ca32:	10 9c       	mov	r12,r8
8000ca34:	fe b0 fc b6 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 4, q1);
8000ca38:	ee c9 00 2c 	sub	r9,r7,44
8000ca3c:	ee c8 00 20 	sub	r8,r7,32
8000ca40:	2f c8       	sub	r8,-4
8000ca42:	12 9b       	mov	r11,r9
8000ca44:	10 9c       	mov	r12,r8
8000ca46:	fe b0 fc ad 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 8, q2);
8000ca4a:	ee c9 00 30 	sub	r9,r7,48
8000ca4e:	ee c8 00 20 	sub	r8,r7,32
8000ca52:	2f 88       	sub	r8,-8
8000ca54:	12 9b       	mov	r11,r9
8000ca56:	10 9c       	mov	r12,r8
8000ca58:	fe b0 fc a4 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 12, q3);
8000ca5c:	ee c9 00 34 	sub	r9,r7,52
8000ca60:	ee c8 00 20 	sub	r8,r7,32
8000ca64:	2f 48       	sub	r8,-12
8000ca66:	12 9b       	mov	r11,r9
8000ca68:	10 9c       	mov	r12,r8
8000ca6a:	fe b0 fc 9b 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 16, q4);
8000ca6e:	0a 99       	mov	r9,r5
8000ca70:	ee c8 00 20 	sub	r8,r7,32
8000ca74:	2f 08       	sub	r8,-16
8000ca76:	12 9b       	mov	r11,r9
8000ca78:	10 9c       	mov	r12,r8
8000ca7a:	fe b0 fc 93 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 20, rollspeed);
8000ca7e:	ea c9 ff fc 	sub	r9,r5,-4
8000ca82:	ee c8 00 20 	sub	r8,r7,32
8000ca86:	2e c8       	sub	r8,-20
8000ca88:	12 9b       	mov	r11,r9
8000ca8a:	10 9c       	mov	r12,r8
8000ca8c:	fe b0 fc 8a 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 24, pitchspeed);
8000ca90:	ea c9 ff f8 	sub	r9,r5,-8
8000ca94:	ee c8 00 20 	sub	r8,r7,32
8000ca98:	2e 88       	sub	r8,-24
8000ca9a:	12 9b       	mov	r11,r9
8000ca9c:	10 9c       	mov	r12,r8
8000ca9e:	fe b0 fc 81 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 28, yawspeed);
8000caa2:	ea c9 ff f4 	sub	r9,r5,-12
8000caa6:	ee c8 00 20 	sub	r8,r7,32
8000caaa:	2e 48       	sub	r8,-28
8000caac:	12 9b       	mov	r11,r9
8000caae:	10 9c       	mov	r12,r8
8000cab0:	fe b0 fc 78 	rcall	8000c3a0 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE_QUATERNION, buf, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_CRC);
8000cab4:	ee ca 00 20 	sub	r10,r7,32
8000cab8:	e0 68 00 f6 	mov	r8,246
8000cabc:	32 09       	mov	r9,32
8000cabe:	31 fb       	mov	r11,31
8000cac0:	ee fc ff dc 	ld.w	r12,r7[-36]
8000cac4:	fe b0 fb a6 	rcall	8000c210 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE_QUATERNION, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE_QUATERNION, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN);
#endif
#endif
}
8000cac8:	2f 3d       	sub	sp,-52
8000caca:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000cace:	00 00       	add	r0,r0
8000cad0:	80 00       	ld.sh	r0,r0[0x0]
8000cad2:	c8 92       	brcc	8000c9e4 <mavlink_msg_attitude_send+0x9c>

8000cad4 <mavlink_msg_local_position_ned_send>:
 * @param vz Z Speed
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_local_position_ned_send(mavlink_channel_t chan, uint32_t time_boot_ms, float x, float y, float z, float vx, float vy, float vz)
{
8000cad4:	eb cd 40 e0 	pushm	r5-r7,lr
8000cad8:	1a 97       	mov	r7,sp
8000cada:	20 cd       	sub	sp,48
8000cadc:	4a c6       	lddpc	r6,8000cb8c <mavlink_msg_local_position_ned_send+0xb8>
8000cade:	1e 26       	rsub	r6,pc
8000cae0:	ee c5 ff f0 	sub	r5,r7,-16
8000cae4:	ef 4c ff e0 	st.w	r7[-32],r12
8000cae8:	ef 4b ff dc 	st.w	r7[-36],r11
8000caec:	ef 4a ff d8 	st.w	r7[-40],r10
8000caf0:	ef 49 ff d4 	st.w	r7[-44],r9
8000caf4:	ef 48 ff d0 	st.w	r7[-48],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000caf8:	ee c9 00 24 	sub	r9,r7,36
8000cafc:	ee c8 00 1c 	sub	r8,r7,28
8000cb00:	12 9b       	mov	r11,r9
8000cb02:	10 9c       	mov	r12,r8
8000cb04:	fe b0 fc 4e 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 4, x);
8000cb08:	ee c9 00 28 	sub	r9,r7,40
8000cb0c:	ee c8 00 1c 	sub	r8,r7,28
8000cb10:	2f c8       	sub	r8,-4
8000cb12:	12 9b       	mov	r11,r9
8000cb14:	10 9c       	mov	r12,r8
8000cb16:	fe b0 fc 45 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 8, y);
8000cb1a:	ee c9 00 2c 	sub	r9,r7,44
8000cb1e:	ee c8 00 1c 	sub	r8,r7,28
8000cb22:	2f 88       	sub	r8,-8
8000cb24:	12 9b       	mov	r11,r9
8000cb26:	10 9c       	mov	r12,r8
8000cb28:	fe b0 fc 3c 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 12, z);
8000cb2c:	ee c9 00 30 	sub	r9,r7,48
8000cb30:	ee c8 00 1c 	sub	r8,r7,28
8000cb34:	2f 48       	sub	r8,-12
8000cb36:	12 9b       	mov	r11,r9
8000cb38:	10 9c       	mov	r12,r8
8000cb3a:	fe b0 fc 33 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 16, vx);
8000cb3e:	0a 99       	mov	r9,r5
8000cb40:	ee c8 00 1c 	sub	r8,r7,28
8000cb44:	2f 08       	sub	r8,-16
8000cb46:	12 9b       	mov	r11,r9
8000cb48:	10 9c       	mov	r12,r8
8000cb4a:	fe b0 fc 2b 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 20, vy);
8000cb4e:	ea c9 ff fc 	sub	r9,r5,-4
8000cb52:	ee c8 00 1c 	sub	r8,r7,28
8000cb56:	2e c8       	sub	r8,-20
8000cb58:	12 9b       	mov	r11,r9
8000cb5a:	10 9c       	mov	r12,r8
8000cb5c:	fe b0 fc 22 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 24, vz);
8000cb60:	ea c9 ff f8 	sub	r9,r5,-8
8000cb64:	ee c8 00 1c 	sub	r8,r7,28
8000cb68:	2e 88       	sub	r8,-24
8000cb6a:	12 9b       	mov	r11,r9
8000cb6c:	10 9c       	mov	r12,r8
8000cb6e:	fe b0 fc 19 	rcall	8000c3a0 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_LOCAL_POSITION_NED, buf, MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN, MAVLINK_MSG_ID_LOCAL_POSITION_NED_CRC);
8000cb72:	ee ca 00 1c 	sub	r10,r7,28
8000cb76:	e0 68 00 b9 	mov	r8,185
8000cb7a:	31 c9       	mov	r9,28
8000cb7c:	32 0b       	mov	r11,32
8000cb7e:	ee fc ff e0 	ld.w	r12,r7[-32]
8000cb82:	fe b0 fb 47 	rcall	8000c210 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_LOCAL_POSITION_NED, (const char *)&packet, MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN, MAVLINK_MSG_ID_LOCAL_POSITION_NED_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_LOCAL_POSITION_NED, (const char *)&packet, MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN);
#endif
#endif
}
8000cb86:	2f 4d       	sub	sp,-48
8000cb88:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000cb8c:	80 00       	ld.sh	r0,r0[0x0]
8000cb8e:	c9 62       	brcc	8000caba <mavlink_msg_attitude_quaternion_send+0xb6>

8000cb90 <mavlink_msg_global_position_int_send>:
 * @param hdg Compass heading in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_global_position_int_send(mavlink_channel_t chan, uint32_t time_boot_ms, int32_t lat, int32_t lon, int32_t alt, int32_t relative_alt, int16_t vx, int16_t vy, int16_t vz, uint16_t hdg)
{
8000cb90:	eb cd 40 e0 	pushm	r5-r7,lr
8000cb94:	1a 97       	mov	r7,sp
8000cb96:	21 0d       	sub	sp,64
8000cb98:	4b b6       	lddpc	r6,8000cc84 <mavlink_msg_global_position_int_send+0xf4>
8000cb9a:	1e 26       	rsub	r6,pc
8000cb9c:	ee c5 ff f0 	sub	r5,r7,-16
8000cba0:	ef 4c ff e0 	st.w	r7[-32],r12
8000cba4:	ef 4b ff dc 	st.w	r7[-36],r11
8000cba8:	ef 4a ff d8 	st.w	r7[-40],r10
8000cbac:	ef 49 ff d4 	st.w	r7[-44],r9
8000cbb0:	ef 48 ff d0 	st.w	r7[-48],r8
8000cbb4:	6a 1b       	ld.w	r11,r5[0x4]
8000cbb6:	6a 2a       	ld.w	r10,r5[0x8]
8000cbb8:	6a 39       	ld.w	r9,r5[0xc]
8000cbba:	6a 48       	ld.w	r8,r5[0x10]
8000cbbc:	ef 5b ff cc 	st.h	r7[-52],r11
8000cbc0:	ef 5a ff c8 	st.h	r7[-56],r10
8000cbc4:	ef 59 ff c4 	st.h	r7[-60],r9
8000cbc8:	ef 58 ff c0 	st.h	r7[-64],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000cbcc:	ee c9 00 24 	sub	r9,r7,36
8000cbd0:	ee c8 00 1c 	sub	r8,r7,28
8000cbd4:	12 9b       	mov	r11,r9
8000cbd6:	10 9c       	mov	r12,r8
8000cbd8:	fe b0 fb e4 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_int32_t(buf, 4, lat);
8000cbdc:	ee c9 00 28 	sub	r9,r7,40
8000cbe0:	ee c8 00 1c 	sub	r8,r7,28
8000cbe4:	2f c8       	sub	r8,-4
8000cbe6:	12 9b       	mov	r11,r9
8000cbe8:	10 9c       	mov	r12,r8
8000cbea:	fe b0 fb db 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_int32_t(buf, 8, lon);
8000cbee:	ee c9 00 2c 	sub	r9,r7,44
8000cbf2:	ee c8 00 1c 	sub	r8,r7,28
8000cbf6:	2f 88       	sub	r8,-8
8000cbf8:	12 9b       	mov	r11,r9
8000cbfa:	10 9c       	mov	r12,r8
8000cbfc:	fe b0 fb d2 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_int32_t(buf, 12, alt);
8000cc00:	ee c9 00 30 	sub	r9,r7,48
8000cc04:	ee c8 00 1c 	sub	r8,r7,28
8000cc08:	2f 48       	sub	r8,-12
8000cc0a:	12 9b       	mov	r11,r9
8000cc0c:	10 9c       	mov	r12,r8
8000cc0e:	fe b0 fb c9 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_int32_t(buf, 16, relative_alt);
8000cc12:	0a 99       	mov	r9,r5
8000cc14:	ee c8 00 1c 	sub	r8,r7,28
8000cc18:	2f 08       	sub	r8,-16
8000cc1a:	12 9b       	mov	r11,r9
8000cc1c:	10 9c       	mov	r12,r8
8000cc1e:	fe b0 fb c1 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_int16_t(buf, 20, vx);
8000cc22:	ee c9 00 34 	sub	r9,r7,52
8000cc26:	ee c8 00 1c 	sub	r8,r7,28
8000cc2a:	2e c8       	sub	r8,-20
8000cc2c:	12 9b       	mov	r11,r9
8000cc2e:	10 9c       	mov	r12,r8
8000cc30:	fe b0 fb 9e 	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 22, vy);
8000cc34:	ee c9 00 38 	sub	r9,r7,56
8000cc38:	ee c8 00 1c 	sub	r8,r7,28
8000cc3c:	2e a8       	sub	r8,-22
8000cc3e:	12 9b       	mov	r11,r9
8000cc40:	10 9c       	mov	r12,r8
8000cc42:	fe b0 fb 95 	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 24, vz);
8000cc46:	ee c9 00 3c 	sub	r9,r7,60
8000cc4a:	ee c8 00 1c 	sub	r8,r7,28
8000cc4e:	2e 88       	sub	r8,-24
8000cc50:	12 9b       	mov	r11,r9
8000cc52:	10 9c       	mov	r12,r8
8000cc54:	fe b0 fb 8c 	rcall	8000c36c <byte_swap_2>
	_mav_put_uint16_t(buf, 26, hdg);
8000cc58:	ee c9 00 40 	sub	r9,r7,64
8000cc5c:	ee c8 00 1c 	sub	r8,r7,28
8000cc60:	2e 68       	sub	r8,-26
8000cc62:	12 9b       	mov	r11,r9
8000cc64:	10 9c       	mov	r12,r8
8000cc66:	fe b0 fb 83 	rcall	8000c36c <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GLOBAL_POSITION_INT, buf, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_CRC);
8000cc6a:	ee ca 00 1c 	sub	r10,r7,28
8000cc6e:	36 88       	mov	r8,104
8000cc70:	31 c9       	mov	r9,28
8000cc72:	32 1b       	mov	r11,33
8000cc74:	ee fc ff e0 	ld.w	r12,r7[-32]
8000cc78:	fe b0 fa cc 	rcall	8000c210 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GLOBAL_POSITION_INT, (const char *)&packet, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GLOBAL_POSITION_INT, (const char *)&packet, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN);
#endif
#endif
}
8000cc7c:	2f 0d       	sub	sp,-64
8000cc7e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000cc82:	00 00       	add	r0,r0
8000cc84:	80 00       	ld.sh	r0,r0[0x0]
8000cc86:	ca 1e       	rcall	8000c9c8 <mavlink_msg_attitude_send+0x80>

8000cc88 <mavlink_msg_rc_channels_scaled_send>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_rc_channels_scaled_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t port, int16_t chan1_scaled, int16_t chan2_scaled, int16_t chan3_scaled, int16_t chan4_scaled, int16_t chan5_scaled, int16_t chan6_scaled, int16_t chan7_scaled, int16_t chan8_scaled, uint8_t rssi)
{
8000cc88:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000cc8c:	1a 97       	mov	r7,sp
8000cc8e:	21 2d       	sub	sp,72
8000cc90:	4c 86       	lddpc	r6,8000cdb0 <mavlink_msg_rc_channels_scaled_send+0x128>
8000cc92:	1e 26       	rsub	r6,pc
8000cc94:	ee ce ff e0 	sub	lr,r7,-32
8000cc98:	ef 4c ff e4 	st.w	r7[-28],r12
8000cc9c:	ef 4b ff e0 	st.w	r7[-32],r11
8000cca0:	14 90       	mov	r0,r10
8000cca2:	12 91       	mov	r1,r9
8000cca4:	10 92       	mov	r2,r8
8000cca6:	7c 03       	ld.w	r3,lr[0x0]
8000cca8:	7c 15       	ld.w	r5,lr[0x4]
8000ccaa:	7c 2c       	ld.w	r12,lr[0x8]
8000ccac:	7c 3b       	ld.w	r11,lr[0xc]
8000ccae:	7c 4a       	ld.w	r10,lr[0x10]
8000ccb0:	7c 59       	ld.w	r9,lr[0x14]
8000ccb2:	7c 68       	ld.w	r8,lr[0x18]
8000ccb4:	00 9e       	mov	lr,r0
8000ccb6:	ef 6e ff dc 	st.b	r7[-36],lr
8000ccba:	02 9e       	mov	lr,r1
8000ccbc:	ef 5e ff d8 	st.h	r7[-40],lr
8000ccc0:	04 9e       	mov	lr,r2
8000ccc2:	ef 5e ff d4 	st.h	r7[-44],lr
8000ccc6:	06 9e       	mov	lr,r3
8000ccc8:	ef 5e ff d0 	st.h	r7[-48],lr
8000cccc:	0a 9e       	mov	lr,r5
8000ccce:	ef 5e ff cc 	st.h	r7[-52],lr
8000ccd2:	ef 5c ff c8 	st.h	r7[-56],r12
8000ccd6:	ef 5b ff c4 	st.h	r7[-60],r11
8000ccda:	ef 5a ff c0 	st.h	r7[-64],r10
8000ccde:	ef 59 ff bc 	st.h	r7[-68],r9
8000cce2:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000cce6:	ee c9 00 20 	sub	r9,r7,32
8000ccea:	ee c8 00 18 	sub	r8,r7,24
8000ccee:	12 9b       	mov	r11,r9
8000ccf0:	10 9c       	mov	r12,r8
8000ccf2:	fe b0 fb 57 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_int16_t(buf, 4, chan1_scaled);
8000ccf6:	ee c9 00 28 	sub	r9,r7,40
8000ccfa:	ee c8 00 18 	sub	r8,r7,24
8000ccfe:	2f c8       	sub	r8,-4
8000cd00:	12 9b       	mov	r11,r9
8000cd02:	10 9c       	mov	r12,r8
8000cd04:	fe b0 fb 34 	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 6, chan2_scaled);
8000cd08:	ee c9 00 2c 	sub	r9,r7,44
8000cd0c:	ee c8 00 18 	sub	r8,r7,24
8000cd10:	2f a8       	sub	r8,-6
8000cd12:	12 9b       	mov	r11,r9
8000cd14:	10 9c       	mov	r12,r8
8000cd16:	fe b0 fb 2b 	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 8, chan3_scaled);
8000cd1a:	ee c9 00 30 	sub	r9,r7,48
8000cd1e:	ee c8 00 18 	sub	r8,r7,24
8000cd22:	2f 88       	sub	r8,-8
8000cd24:	12 9b       	mov	r11,r9
8000cd26:	10 9c       	mov	r12,r8
8000cd28:	fe b0 fb 22 	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 10, chan4_scaled);
8000cd2c:	ee c9 00 34 	sub	r9,r7,52
8000cd30:	ee c8 00 18 	sub	r8,r7,24
8000cd34:	2f 68       	sub	r8,-10
8000cd36:	12 9b       	mov	r11,r9
8000cd38:	10 9c       	mov	r12,r8
8000cd3a:	fe b0 fb 19 	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 12, chan5_scaled);
8000cd3e:	ee c9 00 38 	sub	r9,r7,56
8000cd42:	ee c8 00 18 	sub	r8,r7,24
8000cd46:	2f 48       	sub	r8,-12
8000cd48:	12 9b       	mov	r11,r9
8000cd4a:	10 9c       	mov	r12,r8
8000cd4c:	fe b0 fb 10 	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 14, chan6_scaled);
8000cd50:	ee c9 00 3c 	sub	r9,r7,60
8000cd54:	ee c8 00 18 	sub	r8,r7,24
8000cd58:	2f 28       	sub	r8,-14
8000cd5a:	12 9b       	mov	r11,r9
8000cd5c:	10 9c       	mov	r12,r8
8000cd5e:	fe b0 fb 07 	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 16, chan7_scaled);
8000cd62:	ee c9 00 40 	sub	r9,r7,64
8000cd66:	ee c8 00 18 	sub	r8,r7,24
8000cd6a:	2f 08       	sub	r8,-16
8000cd6c:	12 9b       	mov	r11,r9
8000cd6e:	10 9c       	mov	r12,r8
8000cd70:	fe b0 fa fe 	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 18, chan8_scaled);
8000cd74:	ee c9 00 44 	sub	r9,r7,68
8000cd78:	ee c8 00 18 	sub	r8,r7,24
8000cd7c:	2e e8       	sub	r8,-18
8000cd7e:	12 9b       	mov	r11,r9
8000cd80:	10 9c       	mov	r12,r8
8000cd82:	fe b0 fa f5 	rcall	8000c36c <byte_swap_2>
	_mav_put_uint8_t(buf, 20, port);
8000cd86:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000cd8a:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 21, rssi);
8000cd8e:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8000cd92:	ef 68 ff fd 	st.b	r7[-3],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_SCALED, buf, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_CRC);
8000cd96:	ee ca 00 18 	sub	r10,r7,24
8000cd9a:	e0 68 00 ed 	mov	r8,237
8000cd9e:	31 69       	mov	r9,22
8000cda0:	32 2b       	mov	r11,34
8000cda2:	ee fc ff e4 	ld.w	r12,r7[-28]
8000cda6:	fe b0 fa 35 	rcall	8000c210 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_SCALED, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_SCALED, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN);
#endif
#endif
}
8000cdaa:	2e ed       	sub	sp,-72
8000cdac:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000cdb0:	80 00       	ld.sh	r0,r0[0x0]
8000cdb2:	cb 16       	brmi	8000cd14 <mavlink_msg_rc_channels_scaled_send+0x8c>

8000cdb4 <mavlink_msg_rc_channels_raw_send>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_rc_channels_raw_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t port, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint8_t rssi)
{
8000cdb4:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000cdb8:	1a 97       	mov	r7,sp
8000cdba:	21 2d       	sub	sp,72
8000cdbc:	4c 86       	lddpc	r6,8000cedc <mavlink_msg_rc_channels_raw_send+0x128>
8000cdbe:	1e 26       	rsub	r6,pc
8000cdc0:	ee ce ff e0 	sub	lr,r7,-32
8000cdc4:	ef 4c ff e4 	st.w	r7[-28],r12
8000cdc8:	ef 4b ff e0 	st.w	r7[-32],r11
8000cdcc:	14 90       	mov	r0,r10
8000cdce:	12 91       	mov	r1,r9
8000cdd0:	10 92       	mov	r2,r8
8000cdd2:	7c 03       	ld.w	r3,lr[0x0]
8000cdd4:	7c 15       	ld.w	r5,lr[0x4]
8000cdd6:	7c 2c       	ld.w	r12,lr[0x8]
8000cdd8:	7c 3b       	ld.w	r11,lr[0xc]
8000cdda:	7c 4a       	ld.w	r10,lr[0x10]
8000cddc:	7c 59       	ld.w	r9,lr[0x14]
8000cdde:	7c 68       	ld.w	r8,lr[0x18]
8000cde0:	00 9e       	mov	lr,r0
8000cde2:	ef 6e ff dc 	st.b	r7[-36],lr
8000cde6:	02 9e       	mov	lr,r1
8000cde8:	ef 5e ff d8 	st.h	r7[-40],lr
8000cdec:	04 9e       	mov	lr,r2
8000cdee:	ef 5e ff d4 	st.h	r7[-44],lr
8000cdf2:	06 9e       	mov	lr,r3
8000cdf4:	ef 5e ff d0 	st.h	r7[-48],lr
8000cdf8:	0a 9e       	mov	lr,r5
8000cdfa:	ef 5e ff cc 	st.h	r7[-52],lr
8000cdfe:	ef 5c ff c8 	st.h	r7[-56],r12
8000ce02:	ef 5b ff c4 	st.h	r7[-60],r11
8000ce06:	ef 5a ff c0 	st.h	r7[-64],r10
8000ce0a:	ef 59 ff bc 	st.h	r7[-68],r9
8000ce0e:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000ce12:	ee c9 00 20 	sub	r9,r7,32
8000ce16:	ee c8 00 18 	sub	r8,r7,24
8000ce1a:	12 9b       	mov	r11,r9
8000ce1c:	10 9c       	mov	r12,r8
8000ce1e:	fe b0 fa c1 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_uint16_t(buf, 4, chan1_raw);
8000ce22:	ee c9 00 28 	sub	r9,r7,40
8000ce26:	ee c8 00 18 	sub	r8,r7,24
8000ce2a:	2f c8       	sub	r8,-4
8000ce2c:	12 9b       	mov	r11,r9
8000ce2e:	10 9c       	mov	r12,r8
8000ce30:	fe b0 fa 9e 	rcall	8000c36c <byte_swap_2>
	_mav_put_uint16_t(buf, 6, chan2_raw);
8000ce34:	ee c9 00 2c 	sub	r9,r7,44
8000ce38:	ee c8 00 18 	sub	r8,r7,24
8000ce3c:	2f a8       	sub	r8,-6
8000ce3e:	12 9b       	mov	r11,r9
8000ce40:	10 9c       	mov	r12,r8
8000ce42:	fe b0 fa 95 	rcall	8000c36c <byte_swap_2>
	_mav_put_uint16_t(buf, 8, chan3_raw);
8000ce46:	ee c9 00 30 	sub	r9,r7,48
8000ce4a:	ee c8 00 18 	sub	r8,r7,24
8000ce4e:	2f 88       	sub	r8,-8
8000ce50:	12 9b       	mov	r11,r9
8000ce52:	10 9c       	mov	r12,r8
8000ce54:	fe b0 fa 8c 	rcall	8000c36c <byte_swap_2>
	_mav_put_uint16_t(buf, 10, chan4_raw);
8000ce58:	ee c9 00 34 	sub	r9,r7,52
8000ce5c:	ee c8 00 18 	sub	r8,r7,24
8000ce60:	2f 68       	sub	r8,-10
8000ce62:	12 9b       	mov	r11,r9
8000ce64:	10 9c       	mov	r12,r8
8000ce66:	fe b0 fa 83 	rcall	8000c36c <byte_swap_2>
	_mav_put_uint16_t(buf, 12, chan5_raw);
8000ce6a:	ee c9 00 38 	sub	r9,r7,56
8000ce6e:	ee c8 00 18 	sub	r8,r7,24
8000ce72:	2f 48       	sub	r8,-12
8000ce74:	12 9b       	mov	r11,r9
8000ce76:	10 9c       	mov	r12,r8
8000ce78:	fe b0 fa 7a 	rcall	8000c36c <byte_swap_2>
	_mav_put_uint16_t(buf, 14, chan6_raw);
8000ce7c:	ee c9 00 3c 	sub	r9,r7,60
8000ce80:	ee c8 00 18 	sub	r8,r7,24
8000ce84:	2f 28       	sub	r8,-14
8000ce86:	12 9b       	mov	r11,r9
8000ce88:	10 9c       	mov	r12,r8
8000ce8a:	fe b0 fa 71 	rcall	8000c36c <byte_swap_2>
	_mav_put_uint16_t(buf, 16, chan7_raw);
8000ce8e:	ee c9 00 40 	sub	r9,r7,64
8000ce92:	ee c8 00 18 	sub	r8,r7,24
8000ce96:	2f 08       	sub	r8,-16
8000ce98:	12 9b       	mov	r11,r9
8000ce9a:	10 9c       	mov	r12,r8
8000ce9c:	fe b0 fa 68 	rcall	8000c36c <byte_swap_2>
	_mav_put_uint16_t(buf, 18, chan8_raw);
8000cea0:	ee c9 00 44 	sub	r9,r7,68
8000cea4:	ee c8 00 18 	sub	r8,r7,24
8000cea8:	2e e8       	sub	r8,-18
8000ceaa:	12 9b       	mov	r11,r9
8000ceac:	10 9c       	mov	r12,r8
8000ceae:	fe b0 fa 5f 	rcall	8000c36c <byte_swap_2>
	_mav_put_uint8_t(buf, 20, port);
8000ceb2:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000ceb6:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 21, rssi);
8000ceba:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8000cebe:	ef 68 ff fd 	st.b	r7[-3],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_RAW, buf, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
8000cec2:	ee ca 00 18 	sub	r10,r7,24
8000cec6:	e0 68 00 f4 	mov	r8,244
8000ceca:	31 69       	mov	r9,22
8000cecc:	32 3b       	mov	r11,35
8000cece:	ee fc ff e4 	ld.w	r12,r7[-28]
8000ced2:	fe b0 f9 9f 	rcall	8000c210 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_RAW, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_RAW, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#endif
#endif
}
8000ced6:	2e ed       	sub	sp,-72
8000ced8:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000cedc:	80 00       	ld.sh	r0,r0[0x0]
8000cede:	cc 42       	brcc	8000ce66 <mavlink_msg_rc_channels_raw_send+0xb2>

8000cee0 <mavlink_msg_servo_output_raw_send>:
 * @param servo8_raw Servo output 8 value, in microseconds
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_servo_output_raw_send(mavlink_channel_t chan, uint32_t time_usec, uint8_t port, uint16_t servo1_raw, uint16_t servo2_raw, uint16_t servo3_raw, uint16_t servo4_raw, uint16_t servo5_raw, uint16_t servo6_raw, uint16_t servo7_raw, uint16_t servo8_raw)
{
8000cee0:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000cee4:	1a 97       	mov	r7,sp
8000cee6:	21 1d       	sub	sp,68
8000cee8:	4c 46       	lddpc	r6,8000cff8 <mavlink_msg_servo_output_raw_send+0x118>
8000ceea:	1e 26       	rsub	r6,pc
8000ceec:	ee ce ff e4 	sub	lr,r7,-28
8000cef0:	ef 4c ff e4 	st.w	r7[-28],r12
8000cef4:	ef 4b ff e0 	st.w	r7[-32],r11
8000cef8:	14 91       	mov	r1,r10
8000cefa:	12 92       	mov	r2,r9
8000cefc:	10 93       	mov	r3,r8
8000cefe:	7c 05       	ld.w	r5,lr[0x0]
8000cf00:	7c 1c       	ld.w	r12,lr[0x4]
8000cf02:	7c 2b       	ld.w	r11,lr[0x8]
8000cf04:	7c 3a       	ld.w	r10,lr[0xc]
8000cf06:	7c 49       	ld.w	r9,lr[0x10]
8000cf08:	7c 58       	ld.w	r8,lr[0x14]
8000cf0a:	02 9e       	mov	lr,r1
8000cf0c:	ef 6e ff dc 	st.b	r7[-36],lr
8000cf10:	04 9e       	mov	lr,r2
8000cf12:	ef 5e ff d8 	st.h	r7[-40],lr
8000cf16:	06 9e       	mov	lr,r3
8000cf18:	ef 5e ff d4 	st.h	r7[-44],lr
8000cf1c:	0a 9e       	mov	lr,r5
8000cf1e:	ef 5e ff d0 	st.h	r7[-48],lr
8000cf22:	ef 5c ff cc 	st.h	r7[-52],r12
8000cf26:	ef 5b ff c8 	st.h	r7[-56],r11
8000cf2a:	ef 5a ff c4 	st.h	r7[-60],r10
8000cf2e:	ef 59 ff c0 	st.h	r7[-64],r9
8000cf32:	ef 58 ff bc 	st.h	r7[-68],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN];
	_mav_put_uint32_t(buf, 0, time_usec);
8000cf36:	ee c9 00 20 	sub	r9,r7,32
8000cf3a:	ee c8 00 18 	sub	r8,r7,24
8000cf3e:	12 9b       	mov	r11,r9
8000cf40:	10 9c       	mov	r12,r8
8000cf42:	fe b0 fa 2f 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_uint16_t(buf, 4, servo1_raw);
8000cf46:	ee c9 00 28 	sub	r9,r7,40
8000cf4a:	ee c8 00 18 	sub	r8,r7,24
8000cf4e:	2f c8       	sub	r8,-4
8000cf50:	12 9b       	mov	r11,r9
8000cf52:	10 9c       	mov	r12,r8
8000cf54:	fe b0 fa 0c 	rcall	8000c36c <byte_swap_2>
	_mav_put_uint16_t(buf, 6, servo2_raw);
8000cf58:	ee c9 00 2c 	sub	r9,r7,44
8000cf5c:	ee c8 00 18 	sub	r8,r7,24
8000cf60:	2f a8       	sub	r8,-6
8000cf62:	12 9b       	mov	r11,r9
8000cf64:	10 9c       	mov	r12,r8
8000cf66:	fe b0 fa 03 	rcall	8000c36c <byte_swap_2>
	_mav_put_uint16_t(buf, 8, servo3_raw);
8000cf6a:	ee c9 00 30 	sub	r9,r7,48
8000cf6e:	ee c8 00 18 	sub	r8,r7,24
8000cf72:	2f 88       	sub	r8,-8
8000cf74:	12 9b       	mov	r11,r9
8000cf76:	10 9c       	mov	r12,r8
8000cf78:	fe b0 f9 fa 	rcall	8000c36c <byte_swap_2>
	_mav_put_uint16_t(buf, 10, servo4_raw);
8000cf7c:	ee c9 00 34 	sub	r9,r7,52
8000cf80:	ee c8 00 18 	sub	r8,r7,24
8000cf84:	2f 68       	sub	r8,-10
8000cf86:	12 9b       	mov	r11,r9
8000cf88:	10 9c       	mov	r12,r8
8000cf8a:	fe b0 f9 f1 	rcall	8000c36c <byte_swap_2>
	_mav_put_uint16_t(buf, 12, servo5_raw);
8000cf8e:	ee c9 00 38 	sub	r9,r7,56
8000cf92:	ee c8 00 18 	sub	r8,r7,24
8000cf96:	2f 48       	sub	r8,-12
8000cf98:	12 9b       	mov	r11,r9
8000cf9a:	10 9c       	mov	r12,r8
8000cf9c:	fe b0 f9 e8 	rcall	8000c36c <byte_swap_2>
	_mav_put_uint16_t(buf, 14, servo6_raw);
8000cfa0:	ee c9 00 3c 	sub	r9,r7,60
8000cfa4:	ee c8 00 18 	sub	r8,r7,24
8000cfa8:	2f 28       	sub	r8,-14
8000cfaa:	12 9b       	mov	r11,r9
8000cfac:	10 9c       	mov	r12,r8
8000cfae:	fe b0 f9 df 	rcall	8000c36c <byte_swap_2>
	_mav_put_uint16_t(buf, 16, servo7_raw);
8000cfb2:	ee c9 00 40 	sub	r9,r7,64
8000cfb6:	ee c8 00 18 	sub	r8,r7,24
8000cfba:	2f 08       	sub	r8,-16
8000cfbc:	12 9b       	mov	r11,r9
8000cfbe:	10 9c       	mov	r12,r8
8000cfc0:	fe b0 f9 d6 	rcall	8000c36c <byte_swap_2>
	_mav_put_uint16_t(buf, 18, servo8_raw);
8000cfc4:	ee c9 00 44 	sub	r9,r7,68
8000cfc8:	ee c8 00 18 	sub	r8,r7,24
8000cfcc:	2e e8       	sub	r8,-18
8000cfce:	12 9b       	mov	r11,r9
8000cfd0:	10 9c       	mov	r12,r8
8000cfd2:	fe b0 f9 cd 	rcall	8000c36c <byte_swap_2>
	_mav_put_uint8_t(buf, 20, port);
8000cfd6:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000cfda:	ef 68 ff fc 	st.b	r7[-4],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW, buf, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_CRC);
8000cfde:	ee ca 00 18 	sub	r10,r7,24
8000cfe2:	e0 68 00 de 	mov	r8,222
8000cfe6:	31 59       	mov	r9,21
8000cfe8:	32 4b       	mov	r11,36
8000cfea:	ee fc ff e4 	ld.w	r12,r7[-28]
8000cfee:	fe b0 f9 11 	rcall	8000c210 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW, (const char *)&packet, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW, (const char *)&packet, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN);
#endif
#endif
}
8000cff2:	2e fd       	sub	sp,-68
8000cff4:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000cff8:	80 00       	ld.sh	r0,r0[0x0]
8000cffa:	cd 6e       	rcall	8000cda6 <mavlink_msg_rc_channels_scaled_send+0x11e>

8000cffc <mavlink_msg_roll_pitch_yaw_thrust_setpoint_send>:
 * @param thrust Collective thrust, normalized to 0 .. 1
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float thrust)
{
8000cffc:	eb cd 40 e0 	pushm	r5-r7,lr
8000d000:	1a 97       	mov	r7,sp
8000d002:	20 ad       	sub	sp,40
8000d004:	4a 36       	lddpc	r6,8000d090 <mavlink_msg_roll_pitch_yaw_thrust_setpoint_send+0x94>
8000d006:	1e 26       	rsub	r6,pc
8000d008:	ee c5 ff f0 	sub	r5,r7,-16
8000d00c:	ef 4c ff e8 	st.w	r7[-24],r12
8000d010:	ef 4b ff e4 	st.w	r7[-28],r11
8000d014:	ef 4a ff e0 	st.w	r7[-32],r10
8000d018:	ef 49 ff dc 	st.w	r7[-36],r9
8000d01c:	ef 48 ff d8 	st.w	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000d020:	ee c9 00 1c 	sub	r9,r7,28
8000d024:	ee c8 00 14 	sub	r8,r7,20
8000d028:	12 9b       	mov	r11,r9
8000d02a:	10 9c       	mov	r12,r8
8000d02c:	fe b0 f9 ba 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 4, roll);
8000d030:	ee c9 00 20 	sub	r9,r7,32
8000d034:	ee c8 00 14 	sub	r8,r7,20
8000d038:	2f c8       	sub	r8,-4
8000d03a:	12 9b       	mov	r11,r9
8000d03c:	10 9c       	mov	r12,r8
8000d03e:	fe b0 f9 b1 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 8, pitch);
8000d042:	ee c9 00 24 	sub	r9,r7,36
8000d046:	ee c8 00 14 	sub	r8,r7,20
8000d04a:	2f 88       	sub	r8,-8
8000d04c:	12 9b       	mov	r11,r9
8000d04e:	10 9c       	mov	r12,r8
8000d050:	fe b0 f9 a8 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 12, yaw);
8000d054:	ee c9 00 28 	sub	r9,r7,40
8000d058:	ee c8 00 14 	sub	r8,r7,20
8000d05c:	2f 48       	sub	r8,-12
8000d05e:	12 9b       	mov	r11,r9
8000d060:	10 9c       	mov	r12,r8
8000d062:	fe b0 f9 9f 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 16, thrust);
8000d066:	0a 99       	mov	r9,r5
8000d068:	ee c8 00 14 	sub	r8,r7,20
8000d06c:	2f 08       	sub	r8,-16
8000d06e:	12 9b       	mov	r11,r9
8000d070:	10 9c       	mov	r12,r8
8000d072:	fe b0 f9 97 	rcall	8000c3a0 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT, buf, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_CRC);
8000d076:	ee ca 00 14 	sub	r10,r7,20
8000d07a:	e0 68 00 ef 	mov	r8,239
8000d07e:	31 49       	mov	r9,20
8000d080:	33 ab       	mov	r11,58
8000d082:	ee fc ff e8 	ld.w	r12,r7[-24]
8000d086:	fe b0 f8 c5 	rcall	8000c210 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN);
#endif
#endif
}
8000d08a:	2f 6d       	sub	sp,-40
8000d08c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000d090:	80 00       	ld.sh	r0,r0[0x0]
8000d092:	ce 8a       	rjmp	8000ce62 <mavlink_msg_rc_channels_raw_send+0xae>

8000d094 <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send>:
 * @param thrust Collective thrust, normalized to 0 .. 1
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll_speed, float pitch_speed, float yaw_speed, float thrust)
{
8000d094:	eb cd 40 e0 	pushm	r5-r7,lr
8000d098:	1a 97       	mov	r7,sp
8000d09a:	20 ad       	sub	sp,40
8000d09c:	4a 36       	lddpc	r6,8000d128 <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send+0x94>
8000d09e:	1e 26       	rsub	r6,pc
8000d0a0:	ee c5 ff f0 	sub	r5,r7,-16
8000d0a4:	ef 4c ff e8 	st.w	r7[-24],r12
8000d0a8:	ef 4b ff e4 	st.w	r7[-28],r11
8000d0ac:	ef 4a ff e0 	st.w	r7[-32],r10
8000d0b0:	ef 49 ff dc 	st.w	r7[-36],r9
8000d0b4:	ef 48 ff d8 	st.w	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000d0b8:	ee c9 00 1c 	sub	r9,r7,28
8000d0bc:	ee c8 00 14 	sub	r8,r7,20
8000d0c0:	12 9b       	mov	r11,r9
8000d0c2:	10 9c       	mov	r12,r8
8000d0c4:	fe b0 f9 6e 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 4, roll_speed);
8000d0c8:	ee c9 00 20 	sub	r9,r7,32
8000d0cc:	ee c8 00 14 	sub	r8,r7,20
8000d0d0:	2f c8       	sub	r8,-4
8000d0d2:	12 9b       	mov	r11,r9
8000d0d4:	10 9c       	mov	r12,r8
8000d0d6:	fe b0 f9 65 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 8, pitch_speed);
8000d0da:	ee c9 00 24 	sub	r9,r7,36
8000d0de:	ee c8 00 14 	sub	r8,r7,20
8000d0e2:	2f 88       	sub	r8,-8
8000d0e4:	12 9b       	mov	r11,r9
8000d0e6:	10 9c       	mov	r12,r8
8000d0e8:	fe b0 f9 5c 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 12, yaw_speed);
8000d0ec:	ee c9 00 28 	sub	r9,r7,40
8000d0f0:	ee c8 00 14 	sub	r8,r7,20
8000d0f4:	2f 48       	sub	r8,-12
8000d0f6:	12 9b       	mov	r11,r9
8000d0f8:	10 9c       	mov	r12,r8
8000d0fa:	fe b0 f9 53 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 16, thrust);
8000d0fe:	0a 99       	mov	r9,r5
8000d100:	ee c8 00 14 	sub	r8,r7,20
8000d104:	2f 08       	sub	r8,-16
8000d106:	12 9b       	mov	r11,r9
8000d108:	10 9c       	mov	r12,r8
8000d10a:	fe b0 f9 4b 	rcall	8000c3a0 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, buf, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_CRC);
8000d10e:	ee ca 00 14 	sub	r10,r7,20
8000d112:	e0 68 00 ee 	mov	r8,238
8000d116:	31 49       	mov	r9,20
8000d118:	33 bb       	mov	r11,59
8000d11a:	ee fc ff e8 	ld.w	r12,r7[-24]
8000d11e:	fe b0 f8 79 	rcall	8000c210 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN);
#endif
#endif
}
8000d122:	2f 6d       	sub	sp,-40
8000d124:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000d128:	80 00       	ld.sh	r0,r0[0x0]
8000d12a:	cf 22       	brcc	8000d10e <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send+0x7a>

8000d12c <mavlink_msg_vfr_hud_send>:
 * @param climb Current climb rate in meters/second
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_vfr_hud_send(mavlink_channel_t chan, float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
8000d12c:	eb cd 40 e0 	pushm	r5-r7,lr
8000d130:	1a 97       	mov	r7,sp
8000d132:	20 ad       	sub	sp,40
8000d134:	4a 76       	lddpc	r6,8000d1d0 <mavlink_msg_vfr_hud_send+0xa4>
8000d136:	1e 26       	rsub	r6,pc
8000d138:	ee c5 ff f0 	sub	r5,r7,-16
8000d13c:	ef 4c ff e8 	st.w	r7[-24],r12
8000d140:	ef 4b ff e4 	st.w	r7[-28],r11
8000d144:	ef 4a ff e0 	st.w	r7[-32],r10
8000d148:	ef 59 ff dc 	st.h	r7[-36],r9
8000d14c:	ef 58 ff d8 	st.h	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_VFR_HUD_LEN];
	_mav_put_float(buf, 0, airspeed);
8000d150:	ee c9 00 1c 	sub	r9,r7,28
8000d154:	ee c8 00 14 	sub	r8,r7,20
8000d158:	12 9b       	mov	r11,r9
8000d15a:	10 9c       	mov	r12,r8
8000d15c:	fe b0 f9 22 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 4, groundspeed);
8000d160:	ee c9 00 20 	sub	r9,r7,32
8000d164:	ee c8 00 14 	sub	r8,r7,20
8000d168:	2f c8       	sub	r8,-4
8000d16a:	12 9b       	mov	r11,r9
8000d16c:	10 9c       	mov	r12,r8
8000d16e:	fe b0 f9 19 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 8, alt);
8000d172:	0a 99       	mov	r9,r5
8000d174:	ee c8 00 14 	sub	r8,r7,20
8000d178:	2f 88       	sub	r8,-8
8000d17a:	12 9b       	mov	r11,r9
8000d17c:	10 9c       	mov	r12,r8
8000d17e:	fe b0 f9 11 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 12, climb);
8000d182:	ea c9 ff fc 	sub	r9,r5,-4
8000d186:	ee c8 00 14 	sub	r8,r7,20
8000d18a:	2f 48       	sub	r8,-12
8000d18c:	12 9b       	mov	r11,r9
8000d18e:	10 9c       	mov	r12,r8
8000d190:	fe b0 f9 08 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_int16_t(buf, 16, heading);
8000d194:	ee c9 00 24 	sub	r9,r7,36
8000d198:	ee c8 00 14 	sub	r8,r7,20
8000d19c:	2f 08       	sub	r8,-16
8000d19e:	12 9b       	mov	r11,r9
8000d1a0:	10 9c       	mov	r12,r8
8000d1a2:	fe b0 f8 e5 	rcall	8000c36c <byte_swap_2>
	_mav_put_uint16_t(buf, 18, throttle);
8000d1a6:	ee c9 00 28 	sub	r9,r7,40
8000d1aa:	ee c8 00 14 	sub	r8,r7,20
8000d1ae:	2e e8       	sub	r8,-18
8000d1b0:	12 9b       	mov	r11,r9
8000d1b2:	10 9c       	mov	r12,r8
8000d1b4:	fe b0 f8 dc 	rcall	8000c36c <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_VFR_HUD, buf, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
8000d1b8:	ee ca 00 14 	sub	r10,r7,20
8000d1bc:	31 48       	mov	r8,20
8000d1be:	31 49       	mov	r9,20
8000d1c0:	34 ab       	mov	r11,74
8000d1c2:	ee fc ff e8 	ld.w	r12,r7[-24]
8000d1c6:	fe b0 f8 25 	rcall	8000c210 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_VFR_HUD, (const char *)&packet, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_VFR_HUD, (const char *)&packet, MAVLINK_MSG_ID_VFR_HUD_LEN);
#endif
#endif
}
8000d1ca:	2f 6d       	sub	sp,-40
8000d1cc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000d1d0:	80 00       	ld.sh	r0,r0[0x0]
8000d1d2:	cf ba       	rjmp	8000cfc8 <mavlink_msg_servo_output_raw_send+0xe8>

8000d1d4 <mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send>:
 * @param thrust Collective thrust, normalized to 0 .. 1
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll_rate, float pitch_rate, float yaw_rate, float thrust)
{
8000d1d4:	eb cd 40 e0 	pushm	r5-r7,lr
8000d1d8:	1a 97       	mov	r7,sp
8000d1da:	20 ad       	sub	sp,40
8000d1dc:	4a 36       	lddpc	r6,8000d268 <mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send+0x94>
8000d1de:	1e 26       	rsub	r6,pc
8000d1e0:	ee c5 ff f0 	sub	r5,r7,-16
8000d1e4:	ef 4c ff e8 	st.w	r7[-24],r12
8000d1e8:	ef 4b ff e4 	st.w	r7[-28],r11
8000d1ec:	ef 4a ff e0 	st.w	r7[-32],r10
8000d1f0:	ef 49 ff dc 	st.w	r7[-36],r9
8000d1f4:	ef 48 ff d8 	st.w	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000d1f8:	ee c9 00 1c 	sub	r9,r7,28
8000d1fc:	ee c8 00 14 	sub	r8,r7,20
8000d200:	12 9b       	mov	r11,r9
8000d202:	10 9c       	mov	r12,r8
8000d204:	fe b0 f8 ce 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 4, roll_rate);
8000d208:	ee c9 00 20 	sub	r9,r7,32
8000d20c:	ee c8 00 14 	sub	r8,r7,20
8000d210:	2f c8       	sub	r8,-4
8000d212:	12 9b       	mov	r11,r9
8000d214:	10 9c       	mov	r12,r8
8000d216:	fe b0 f8 c5 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 8, pitch_rate);
8000d21a:	ee c9 00 24 	sub	r9,r7,36
8000d21e:	ee c8 00 14 	sub	r8,r7,20
8000d222:	2f 88       	sub	r8,-8
8000d224:	12 9b       	mov	r11,r9
8000d226:	10 9c       	mov	r12,r8
8000d228:	fe b0 f8 bc 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 12, yaw_rate);
8000d22c:	ee c9 00 28 	sub	r9,r7,40
8000d230:	ee c8 00 14 	sub	r8,r7,20
8000d234:	2f 48       	sub	r8,-12
8000d236:	12 9b       	mov	r11,r9
8000d238:	10 9c       	mov	r12,r8
8000d23a:	fe b0 f8 b3 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 16, thrust);
8000d23e:	0a 99       	mov	r9,r5
8000d240:	ee c8 00 14 	sub	r8,r7,20
8000d244:	2f 08       	sub	r8,-16
8000d246:	12 9b       	mov	r11,r9
8000d248:	10 9c       	mov	r12,r8
8000d24a:	fe b0 f8 ab 	rcall	8000c3a0 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, buf, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_CRC);
8000d24e:	ee ca 00 14 	sub	r10,r7,20
8000d252:	37 f8       	mov	r8,127
8000d254:	31 49       	mov	r9,20
8000d256:	35 0b       	mov	r11,80
8000d258:	ee fc ff e8 	ld.w	r12,r7[-24]
8000d25c:	fe b0 f7 da 	rcall	8000c210 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN);
#endif
#endif
}
8000d260:	2f 6d       	sub	sp,-40
8000d262:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000d266:	00 00       	add	r0,r0
8000d268:	80 00       	ld.sh	r0,r0[0x0]
8000d26a:	d0 62       	popm	r4-r9

8000d26c <mavlink_msg_hil_state_send>:
 * @param zacc Z acceleration (mg)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_hil_state_send(mavlink_channel_t chan, uint64_t time_usec, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed, int32_t lat, int32_t lon, int32_t alt, int16_t vx, int16_t vy, int16_t vz, int16_t xacc, int16_t yacc, int16_t zacc)
{
8000d26c:	eb cd 40 e0 	pushm	r5-r7,lr
8000d270:	1a 97       	mov	r7,sp
8000d272:	21 9d       	sub	sp,100
8000d274:	4d d6       	lddpc	r6,8000d3e8 <mavlink_msg_hil_state_send+0x17c>
8000d276:	1e 26       	rsub	r6,pc
8000d278:	ee c5 ff f0 	sub	r5,r7,-16
8000d27c:	ef 4c ff c4 	st.w	r7[-60],r12
8000d280:	ee eb ff bc 	st.d	r7[-68],r10
8000d284:	ef 49 ff b8 	st.w	r7[-72],r9
8000d288:	ef 48 ff b4 	st.w	r7[-76],r8
8000d28c:	6a 7e       	ld.w	lr,r5[0x1c]
8000d28e:	6a 8c       	ld.w	r12,r5[0x20]
8000d290:	6a 9b       	ld.w	r11,r5[0x24]
8000d292:	6a aa       	ld.w	r10,r5[0x28]
8000d294:	6a b9       	ld.w	r9,r5[0x2c]
8000d296:	6a c8       	ld.w	r8,r5[0x30]
8000d298:	ef 5e ff b0 	st.h	r7[-80],lr
8000d29c:	ef 5c ff ac 	st.h	r7[-84],r12
8000d2a0:	ef 5b ff a8 	st.h	r7[-88],r11
8000d2a4:	ef 5a ff a4 	st.h	r7[-92],r10
8000d2a8:	ef 59 ff a0 	st.h	r7[-96],r9
8000d2ac:	ef 58 ff 9c 	st.h	r7[-100],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_HIL_STATE_LEN];
	_mav_put_uint64_t(buf, 0, time_usec);
8000d2b0:	ee c9 00 44 	sub	r9,r7,68
8000d2b4:	ee c8 00 38 	sub	r8,r7,56
8000d2b8:	12 9b       	mov	r11,r9
8000d2ba:	10 9c       	mov	r12,r8
8000d2bc:	fe b0 f8 9e 	rcall	8000c3f8 <byte_swap_8>
	_mav_put_float(buf, 8, roll);
8000d2c0:	ee c9 00 48 	sub	r9,r7,72
8000d2c4:	ee c8 00 38 	sub	r8,r7,56
8000d2c8:	2f 88       	sub	r8,-8
8000d2ca:	12 9b       	mov	r11,r9
8000d2cc:	10 9c       	mov	r12,r8
8000d2ce:	fe b0 f8 69 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 12, pitch);
8000d2d2:	ee c9 00 4c 	sub	r9,r7,76
8000d2d6:	ee c8 00 38 	sub	r8,r7,56
8000d2da:	2f 48       	sub	r8,-12
8000d2dc:	12 9b       	mov	r11,r9
8000d2de:	10 9c       	mov	r12,r8
8000d2e0:	fe b0 f8 60 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 16, yaw);
8000d2e4:	0a 99       	mov	r9,r5
8000d2e6:	ee c8 00 38 	sub	r8,r7,56
8000d2ea:	2f 08       	sub	r8,-16
8000d2ec:	12 9b       	mov	r11,r9
8000d2ee:	10 9c       	mov	r12,r8
8000d2f0:	fe b0 f8 58 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 20, rollspeed);
8000d2f4:	ea c9 ff fc 	sub	r9,r5,-4
8000d2f8:	ee c8 00 38 	sub	r8,r7,56
8000d2fc:	2e c8       	sub	r8,-20
8000d2fe:	12 9b       	mov	r11,r9
8000d300:	10 9c       	mov	r12,r8
8000d302:	fe b0 f8 4f 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 24, pitchspeed);
8000d306:	ea c9 ff f8 	sub	r9,r5,-8
8000d30a:	ee c8 00 38 	sub	r8,r7,56
8000d30e:	2e 88       	sub	r8,-24
8000d310:	12 9b       	mov	r11,r9
8000d312:	10 9c       	mov	r12,r8
8000d314:	fe b0 f8 46 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 28, yawspeed);
8000d318:	ea c9 ff f4 	sub	r9,r5,-12
8000d31c:	ee c8 00 38 	sub	r8,r7,56
8000d320:	2e 48       	sub	r8,-28
8000d322:	12 9b       	mov	r11,r9
8000d324:	10 9c       	mov	r12,r8
8000d326:	fe b0 f8 3d 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_int32_t(buf, 32, lat);
8000d32a:	ea c9 ff f0 	sub	r9,r5,-16
8000d32e:	ee c8 00 38 	sub	r8,r7,56
8000d332:	2e 08       	sub	r8,-32
8000d334:	12 9b       	mov	r11,r9
8000d336:	10 9c       	mov	r12,r8
8000d338:	fe b0 f8 34 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_int32_t(buf, 36, lon);
8000d33c:	ea c9 ff ec 	sub	r9,r5,-20
8000d340:	ee c8 00 38 	sub	r8,r7,56
8000d344:	2d c8       	sub	r8,-36
8000d346:	12 9b       	mov	r11,r9
8000d348:	10 9c       	mov	r12,r8
8000d34a:	fe b0 f8 2b 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_int32_t(buf, 40, alt);
8000d34e:	ea c9 ff e8 	sub	r9,r5,-24
8000d352:	ee c8 00 38 	sub	r8,r7,56
8000d356:	2d 88       	sub	r8,-40
8000d358:	12 9b       	mov	r11,r9
8000d35a:	10 9c       	mov	r12,r8
8000d35c:	fe b0 f8 22 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_int16_t(buf, 44, vx);
8000d360:	ee c9 00 50 	sub	r9,r7,80
8000d364:	ee c8 00 38 	sub	r8,r7,56
8000d368:	2d 48       	sub	r8,-44
8000d36a:	12 9b       	mov	r11,r9
8000d36c:	10 9c       	mov	r12,r8
8000d36e:	fe b0 f7 ff 	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 46, vy);
8000d372:	ee c9 00 54 	sub	r9,r7,84
8000d376:	ee c8 00 38 	sub	r8,r7,56
8000d37a:	2d 28       	sub	r8,-46
8000d37c:	12 9b       	mov	r11,r9
8000d37e:	10 9c       	mov	r12,r8
8000d380:	fe b0 f7 f6 	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 48, vz);
8000d384:	ee c9 00 58 	sub	r9,r7,88
8000d388:	ee c8 00 38 	sub	r8,r7,56
8000d38c:	2d 08       	sub	r8,-48
8000d38e:	12 9b       	mov	r11,r9
8000d390:	10 9c       	mov	r12,r8
8000d392:	fe b0 f7 ed 	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 50, xacc);
8000d396:	ee c9 00 5c 	sub	r9,r7,92
8000d39a:	ee c8 00 38 	sub	r8,r7,56
8000d39e:	2c e8       	sub	r8,-50
8000d3a0:	12 9b       	mov	r11,r9
8000d3a2:	10 9c       	mov	r12,r8
8000d3a4:	fe b0 f7 e4 	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 52, yacc);
8000d3a8:	ee c9 00 60 	sub	r9,r7,96
8000d3ac:	ee c8 00 38 	sub	r8,r7,56
8000d3b0:	2c c8       	sub	r8,-52
8000d3b2:	12 9b       	mov	r11,r9
8000d3b4:	10 9c       	mov	r12,r8
8000d3b6:	fe b0 f7 db 	rcall	8000c36c <byte_swap_2>
	_mav_put_int16_t(buf, 54, zacc);
8000d3ba:	ee c9 00 64 	sub	r9,r7,100
8000d3be:	ee c8 00 38 	sub	r8,r7,56
8000d3c2:	2c a8       	sub	r8,-54
8000d3c4:	12 9b       	mov	r11,r9
8000d3c6:	10 9c       	mov	r12,r8
8000d3c8:	fe b0 f7 d2 	rcall	8000c36c <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HIL_STATE, buf, MAVLINK_MSG_ID_HIL_STATE_LEN, MAVLINK_MSG_ID_HIL_STATE_CRC);
8000d3cc:	ee ca 00 38 	sub	r10,r7,56
8000d3d0:	e0 68 00 b7 	mov	r8,183
8000d3d4:	33 89       	mov	r9,56
8000d3d6:	35 ab       	mov	r11,90
8000d3d8:	ee fc ff c4 	ld.w	r12,r7[-60]
8000d3dc:	fe b0 f7 1a 	rcall	8000c210 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HIL_STATE, (const char *)&packet, MAVLINK_MSG_ID_HIL_STATE_LEN, MAVLINK_MSG_ID_HIL_STATE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HIL_STATE, (const char *)&packet, MAVLINK_MSG_ID_HIL_STATE_LEN);
#endif
#endif
}
8000d3e0:	2e 7d       	sub	sp,-100
8000d3e2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000d3e6:	00 00       	add	r0,r0
8000d3e8:	80 00       	ld.sh	r0,r0[0x0]
8000d3ea:	d0 fa       	popm	r0-r10

8000d3ec <mavlink_msg_named_value_float_send>:
 * @param value Floating point value
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_named_value_float_send(mavlink_channel_t chan, uint32_t time_boot_ms, const char *name, float value)
{
8000d3ec:	eb cd 40 c0 	pushm	r6-r7,lr
8000d3f0:	1a 97       	mov	r7,sp
8000d3f2:	20 9d       	sub	sp,36
8000d3f4:	49 96       	lddpc	r6,8000d458 <mavlink_msg_named_value_float_send+0x6c>
8000d3f6:	1e 26       	rsub	r6,pc
8000d3f8:	ef 4c ff e8 	st.w	r7[-24],r12
8000d3fc:	ef 4b ff e4 	st.w	r7[-28],r11
8000d400:	ef 4a ff e0 	st.w	r7[-32],r10
8000d404:	ef 49 ff dc 	st.w	r7[-36],r9
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000d408:	ee c9 00 1c 	sub	r9,r7,28
8000d40c:	ee c8 00 14 	sub	r8,r7,20
8000d410:	12 9b       	mov	r11,r9
8000d412:	10 9c       	mov	r12,r8
8000d414:	fe b0 f7 c6 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_float(buf, 4, value);
8000d418:	ee c9 00 24 	sub	r9,r7,36
8000d41c:	ee c8 00 14 	sub	r8,r7,20
8000d420:	2f c8       	sub	r8,-4
8000d422:	12 9b       	mov	r11,r9
8000d424:	10 9c       	mov	r12,r8
8000d426:	fe b0 f7 bd 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_char_array(buf, 8, name, 10);
8000d42a:	ee c8 00 14 	sub	r8,r7,20
8000d42e:	30 a9       	mov	r9,10
8000d430:	ee fa ff e0 	ld.w	r10,r7[-32]
8000d434:	30 8b       	mov	r11,8
8000d436:	10 9c       	mov	r12,r8
8000d438:	fe b0 f8 56 	rcall	8000c4e4 <_mav_put_char_array>
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT, buf, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_CRC);
8000d43c:	ee ca 00 14 	sub	r10,r7,20
8000d440:	e0 68 00 aa 	mov	r8,170
8000d444:	31 29       	mov	r9,18
8000d446:	e0 6b 00 fb 	mov	r11,251
8000d44a:	ee fc ff e8 	ld.w	r12,r7[-24]
8000d44e:	fe b0 f6 e1 	rcall	8000c210 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN);
#endif
#endif
}
8000d452:	2f 7d       	sub	sp,-36
8000d454:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d458:	80 00       	ld.sh	r0,r0[0x0]
8000d45a:	d2 7a       	popm	r0-r9,r12

8000d45c <mavlink_msg_named_value_int_send>:
 * @param value Signed integer value
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_named_value_int_send(mavlink_channel_t chan, uint32_t time_boot_ms, const char *name, int32_t value)
{
8000d45c:	eb cd 40 c0 	pushm	r6-r7,lr
8000d460:	1a 97       	mov	r7,sp
8000d462:	20 9d       	sub	sp,36
8000d464:	49 96       	lddpc	r6,8000d4c8 <mavlink_msg_named_value_int_send+0x6c>
8000d466:	1e 26       	rsub	r6,pc
8000d468:	ef 4c ff e8 	st.w	r7[-24],r12
8000d46c:	ef 4b ff e4 	st.w	r7[-28],r11
8000d470:	ef 4a ff e0 	st.w	r7[-32],r10
8000d474:	ef 49 ff dc 	st.w	r7[-36],r9
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000d478:	ee c9 00 1c 	sub	r9,r7,28
8000d47c:	ee c8 00 14 	sub	r8,r7,20
8000d480:	12 9b       	mov	r11,r9
8000d482:	10 9c       	mov	r12,r8
8000d484:	fe b0 f7 8e 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_int32_t(buf, 4, value);
8000d488:	ee c9 00 24 	sub	r9,r7,36
8000d48c:	ee c8 00 14 	sub	r8,r7,20
8000d490:	2f c8       	sub	r8,-4
8000d492:	12 9b       	mov	r11,r9
8000d494:	10 9c       	mov	r12,r8
8000d496:	fe b0 f7 85 	rcall	8000c3a0 <byte_swap_4>
	_mav_put_char_array(buf, 8, name, 10);
8000d49a:	ee c8 00 14 	sub	r8,r7,20
8000d49e:	30 a9       	mov	r9,10
8000d4a0:	ee fa ff e0 	ld.w	r10,r7[-32]
8000d4a4:	30 8b       	mov	r11,8
8000d4a6:	10 9c       	mov	r12,r8
8000d4a8:	fe b0 f8 1e 	rcall	8000c4e4 <_mav_put_char_array>
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_INT, buf, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_INT_CRC);
8000d4ac:	ee ca 00 14 	sub	r10,r7,20
8000d4b0:	32 c8       	mov	r8,44
8000d4b2:	31 29       	mov	r9,18
8000d4b4:	e0 6b 00 fc 	mov	r11,252
8000d4b8:	ee fc ff e8 	ld.w	r12,r7[-24]
8000d4bc:	fe b0 f6 aa 	rcall	8000c210 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_INT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_INT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_INT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN);
#endif
#endif
}
8000d4c0:	2f 7d       	sub	sp,-36
8000d4c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d4c6:	00 00       	add	r0,r0
8000d4c8:	80 00       	ld.sh	r0,r0[0x0]
8000d4ca:	d2 ea       	popm	r4-r10,r12

8000d4cc <mavlink_send_heartbeat>:
#include "analog_monitor.h"
#include "tasks.h"

central_data_t *centralData;

void mavlink_send_heartbeat(void) {
8000d4cc:	eb cd 40 c0 	pushm	r6-r7,lr
8000d4d0:	1a 97       	mov	r7,sp
8000d4d2:	20 1d       	sub	sp,4
8000d4d4:	48 e6       	lddpc	r6,8000d50c <mavlink_send_heartbeat+0x40>
8000d4d6:	1e 26       	rsub	r6,pc

	central_data_t *centralData=get_central_data();
8000d4d8:	f0 16 00 33 	mcall	r6[204]
8000d4dc:	18 98       	mov	r8,r12
8000d4de:	ef 48 ff fc 	st.w	r7[-4],r8

	mavlink_msg_heartbeat_send(MAVLINK_COMM_0, MAV_TYPE_QUADROTOR, MAV_AUTOPILOT_GENERIC, centralData->mav_mode, 0, centralData->mav_state);
8000d4e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d4e6:	f1 38 0d 06 	ld.ub	r8,r8[3334]
8000d4ea:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d4ee:	f3 39 0d 05 	ld.ub	r9,r9[3333]
8000d4f2:	1a d8       	st.w	--sp,r8
8000d4f4:	30 08       	mov	r8,0
8000d4f6:	30 0a       	mov	r10,0
8000d4f8:	30 2b       	mov	r11,2
8000d4fa:	30 0c       	mov	r12,0
8000d4fc:	fe b0 f8 16 	rcall	8000c528 <mavlink_msg_heartbeat_send>
8000d500:	2f fd       	sub	sp,-4
														//(int)(1000.0*get_internal_rail()), 
														//(int)(1000.0*get_6V_analog_rail()), 
														//(int)(1000.0*get_5V_analog_rail()),
														//0.0, 0.0, 0.0, 0.0);
														
	trigger_analog_monitor();
8000d502:	f0 16 01 fd 	mcall	r6[2036]
	
	//dbg_print("Send hearbeat.\n");
}
8000d506:	2f fd       	sub	sp,-4
8000d508:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d50c:	80 00       	ld.sh	r0,r0[0x0]
8000d50e:	d3 5a       	popm	r0-r3,r8-r9,r11-r12

8000d510 <mavlink_send_raw_imu>:

void mavlink_send_raw_imu(void) {
8000d510:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000d514:	1a 97       	mov	r7,sp
8000d516:	20 6d       	sub	sp,24
8000d518:	4b e6       	lddpc	r6,8000d610 <mavlink_send_raw_imu+0x100>
8000d51a:	1e 26       	rsub	r6,pc
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
8000d51c:	ec f8 00 00 	ld.w	r8,r6[0]
8000d520:	70 08       	ld.w	r8,r8[0x0]
8000d522:	f0 f8 00 ec 	ld.w	r8,r8[236]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000d526:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000d52a:	5c 88       	casts.h	r8
8000d52c:	ef 48 ff e8 	st.w	r7[-24],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Y], 
8000d530:	ec f8 00 00 	ld.w	r8,r6[0]
8000d534:	70 08       	ld.w	r8,r8[0x0]
8000d536:	f0 f8 00 e8 	ld.w	r8,r8[232]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000d53a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000d53e:	5c 88       	casts.h	r8
8000d540:	ef 48 ff ec 	st.w	r7[-20],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
8000d544:	ec f8 00 00 	ld.w	r8,r6[0]
8000d548:	70 08       	ld.w	r8,r8[0x0]
8000d54a:	f0 f8 00 e4 	ld.w	r8,r8[228]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000d54e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000d552:	5c 88       	casts.h	r8
8000d554:	ef 48 ff f0 	st.w	r7[-16],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
8000d558:	ec f8 00 00 	ld.w	r8,r6[0]
8000d55c:	70 08       	ld.w	r8,r8[0x0]
8000d55e:	f0 f8 00 d4 	ld.w	r8,r8[212]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000d562:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000d566:	5c 88       	casts.h	r8
8000d568:	ef 48 ff f4 	st.w	r7[-12],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
8000d56c:	ec f8 00 00 	ld.w	r8,r6[0]
8000d570:	70 08       	ld.w	r8,r8[0x0]
8000d572:	f0 f8 00 d0 	ld.w	r8,r8[208]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000d576:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000d57a:	5c 88       	casts.h	r8
8000d57c:	ef 48 ff f8 	st.w	r7[-8],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
8000d580:	ec f8 00 00 	ld.w	r8,r6[0]
8000d584:	70 08       	ld.w	r8,r8[0x0]
8000d586:	f0 f8 00 cc 	ld.w	r8,r8[204]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000d58a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000d58e:	5c 88       	casts.h	r8
8000d590:	ef 48 ff fc 	st.w	r7[-4],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
8000d594:	ec f8 00 00 	ld.w	r8,r6[0]
8000d598:	70 08       	ld.w	r8,r8[0x0]
8000d59a:	f0 f8 00 e0 	ld.w	r8,r8[224]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000d59e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000d5a2:	5c 88       	casts.h	r8
8000d5a4:	10 90       	mov	r0,r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
8000d5a6:	ec f8 00 00 	ld.w	r8,r6[0]
8000d5aa:	70 08       	ld.w	r8,r8[0x0]
8000d5ac:	f0 f8 00 dc 	ld.w	r8,r8[220]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000d5b0:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000d5b4:	5c 88       	casts.h	r8
8000d5b6:	10 91       	mov	r1,r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
8000d5b8:	ec f8 00 00 	ld.w	r8,r6[0]
8000d5bc:	70 08       	ld.w	r8,r8[0x0]
8000d5be:	f0 f8 00 d8 	ld.w	r8,r8[216]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000d5c2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000d5c6:	5c 88       	casts.h	r8
8000d5c8:	10 95       	mov	r5,r8
8000d5ca:	f0 16 00 29 	mcall	r6[164]
8000d5ce:	18 98       	mov	r8,r12
8000d5d0:	10 92       	mov	r2,r8
8000d5d2:	30 03       	mov	r3,0
8000d5d4:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000d5d8:	1a d8       	st.w	--sp,r8
8000d5da:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000d5de:	1a d8       	st.w	--sp,r8
8000d5e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d5e4:	1a d8       	st.w	--sp,r8
8000d5e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d5ea:	1a d8       	st.w	--sp,r8
8000d5ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d5f0:	1a d8       	st.w	--sp,r8
8000d5f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d5f6:	1a d8       	st.w	--sp,r8
8000d5f8:	1a d0       	st.w	--sp,r0
8000d5fa:	02 98       	mov	r8,r1
8000d5fc:	0a 99       	mov	r9,r5
8000d5fe:	04 9a       	mov	r10,r2
8000d600:	06 9b       	mov	r11,r3
8000d602:	30 0c       	mov	r12,0
8000d604:	fe b0 f8 cc 	rcall	8000c79c <mavlink_msg_raw_imu_send>
8000d608:	2f 9d       	sub	sp,-28
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}
8000d60a:	2f ad       	sub	sp,-24
8000d60c:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000d610:	80 00       	ld.sh	r0,r0[0x0]
8000d612:	d3 9e       	*unknown*

8000d614 <mavlink_send_scaled_imu>:

void mavlink_send_scaled_imu(void) {
8000d614:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000d618:	1a 97       	mov	r7,sp
8000d61a:	20 4d       	sub	sp,16
8000d61c:	4c 96       	lddpc	r6,8000d740 <mavlink_send_scaled_imu+0x12c>
8000d61e:	1e 26       	rsub	r6,pc
	//1000*centralData->imu1.attitude.mag[IMU_X],
	//1000*centralData->imu1.attitude.mag[IMU_Y],
	//1000*centralData->imu1.attitude.mag[IMU_Z]
	1000*centralData->imu1.attitude.north_vec.v[0],
	1000*centralData->imu1.attitude.north_vec.v[1],
	1000*centralData->imu1.attitude.north_vec.v[2]
8000d620:	ec f8 00 00 	ld.w	r8,r6[0]
8000d624:	70 08       	ld.w	r8,r8[0x0]
8000d626:	70 b9       	ld.w	r9,r8[0x2c]
8000d628:	fc 18 44 7a 	movh	r8,0x447a
8000d62c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000d630:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000d634:	5c 88       	casts.h	r8
8000d636:	ef 48 ff f0 	st.w	r7[-16],r8
	1000*centralData->imu1.attitude.om[IMU_Z], 
	//1000*centralData->imu1.attitude.mag[IMU_X],
	//1000*centralData->imu1.attitude.mag[IMU_Y],
	//1000*centralData->imu1.attitude.mag[IMU_Z]
	1000*centralData->imu1.attitude.north_vec.v[0],
	1000*centralData->imu1.attitude.north_vec.v[1],
8000d63a:	ec f8 00 00 	ld.w	r8,r6[0]
8000d63e:	70 08       	ld.w	r8,r8[0x0]
8000d640:	70 a9       	ld.w	r9,r8[0x28]
8000d642:	fc 18 44 7a 	movh	r8,0x447a
8000d646:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000d64a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000d64e:	5c 88       	casts.h	r8
8000d650:	ef 48 ff f4 	st.w	r7[-12],r8
	1000*centralData->imu1.attitude.om[IMU_Y], 
	1000*centralData->imu1.attitude.om[IMU_Z], 
	//1000*centralData->imu1.attitude.mag[IMU_X],
	//1000*centralData->imu1.attitude.mag[IMU_Y],
	//1000*centralData->imu1.attitude.mag[IMU_Z]
	1000*centralData->imu1.attitude.north_vec.v[0],
8000d654:	ec f8 00 00 	ld.w	r8,r6[0]
8000d658:	70 08       	ld.w	r8,r8[0x0]
8000d65a:	70 99       	ld.w	r9,r8[0x24]
8000d65c:	fc 18 44 7a 	movh	r8,0x447a
8000d660:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000d664:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000d668:	5c 88       	casts.h	r8
8000d66a:	ef 48 ff f8 	st.w	r7[-8],r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
	1000*centralData->imu1.attitude.om[IMU_X], 
	1000*centralData->imu1.attitude.om[IMU_Y], 
	1000*centralData->imu1.attitude.om[IMU_Z], 
8000d66e:	ec f8 00 00 	ld.w	r8,r6[0]
8000d672:	70 08       	ld.w	r8,r8[0x0]
8000d674:	f0 f9 00 80 	ld.w	r9,r8[128]
8000d678:	fc 18 44 7a 	movh	r8,0x447a
8000d67c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000d680:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000d684:	5c 88       	casts.h	r8
8000d686:	ef 48 ff fc 	st.w	r7[-4],r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
	1000*centralData->imu1.attitude.om[IMU_X], 
	1000*centralData->imu1.attitude.om[IMU_Y], 
8000d68a:	ec f8 00 00 	ld.w	r8,r6[0]
8000d68e:	70 08       	ld.w	r8,r8[0x0]
8000d690:	71 f9       	ld.w	r9,r8[0x7c]
8000d692:	fc 18 44 7a 	movh	r8,0x447a
8000d696:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000d69a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000d69e:	5c 88       	casts.h	r8
8000d6a0:	10 90       	mov	r0,r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
	1000*centralData->imu1.attitude.om[IMU_X], 
8000d6a2:	ec f8 00 00 	ld.w	r8,r6[0]
8000d6a6:	70 08       	ld.w	r8,r8[0x0]
8000d6a8:	71 e9       	ld.w	r9,r8[0x78]
8000d6aa:	fc 18 44 7a 	movh	r8,0x447a
8000d6ae:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000d6b2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000d6b6:	5c 88       	casts.h	r8
8000d6b8:	10 91       	mov	r1,r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
8000d6ba:	ec f8 00 00 	ld.w	r8,r6[0]
8000d6be:	70 08       	ld.w	r8,r8[0x0]
8000d6c0:	f0 f9 00 8c 	ld.w	r9,r8[140]
8000d6c4:	fc 18 44 7a 	movh	r8,0x447a
8000d6c8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000d6cc:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000d6d0:	5c 88       	casts.h	r8
8000d6d2:	10 92       	mov	r2,r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
8000d6d4:	ec f8 00 00 	ld.w	r8,r6[0]
8000d6d8:	70 08       	ld.w	r8,r8[0x0]
8000d6da:	f0 f9 00 88 	ld.w	r9,r8[136]
8000d6de:	fc 18 44 7a 	movh	r8,0x447a
8000d6e2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000d6e6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000d6ea:	5c 88       	casts.h	r8
8000d6ec:	10 93       	mov	r3,r8
	1000*centralData->imu1.attitude.a [IMU_X],
8000d6ee:	ec f8 00 00 	ld.w	r8,r6[0]
8000d6f2:	70 08       	ld.w	r8,r8[0x0]
8000d6f4:	f0 f9 00 84 	ld.w	r9,r8[132]
8000d6f8:	fc 18 44 7a 	movh	r8,0x447a
8000d6fc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000d700:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000d704:	5c 88       	casts.h	r8
8000d706:	10 95       	mov	r5,r8
8000d708:	f0 16 00 0f 	mcall	r6[60]
8000d70c:	18 9b       	mov	r11,r12
8000d70e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d712:	1a d8       	st.w	--sp,r8
8000d714:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d718:	1a d8       	st.w	--sp,r8
8000d71a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d71e:	1a d8       	st.w	--sp,r8
8000d720:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d724:	1a d8       	st.w	--sp,r8
8000d726:	1a d0       	st.w	--sp,r0
8000d728:	1a d1       	st.w	--sp,r1
8000d72a:	04 98       	mov	r8,r2
8000d72c:	06 99       	mov	r9,r3
8000d72e:	0a 9a       	mov	r10,r5
8000d730:	30 0c       	mov	r12,0
8000d732:	fe b0 f7 ab 	rcall	8000c688 <mavlink_msg_scaled_imu_send>
8000d736:	2f ad       	sub	sp,-24
	1000*centralData->imu1.attitude.north_vec.v[2]
	//1000*centralData->imu1.attitude.up_vec.v[0],
	//1000*centralData->imu1.attitude.up_vec.v[1],
	//1000*centralData->imu1.attitude.up_vec.v[2]
	);
}
8000d738:	2f cd       	sub	sp,-16
8000d73a:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000d73e:	00 00       	add	r0,r0
8000d740:	80 00       	ld.sh	r0,r0[0x0]
8000d742:	d4 a2       	popm	r4-r7,r10,lr

8000d744 <mavlink_send_rpy_rates_error>:
void  mavlink_send_rpy_rates_error(void) {
8000d744:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000d748:	1a 97       	mov	r7,sp
8000d74a:	20 1d       	sub	sp,4
8000d74c:	49 06       	lddpc	r6,8000d78c <mavlink_send_rpy_rates_error+0x48>
8000d74e:	1e 26       	rsub	r6,pc
	Stabiliser_t *rate_stab=get_rate_stabiliser();
8000d750:	f0 16 00 9b 	mcall	r6[620]
8000d754:	18 98       	mov	r8,r12
8000d756:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), rate_stab->rpy_controller[0].error, rate_stab->rpy_controller[1].error,rate_stab->rpy_controller[2].error,0 );
8000d75a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d75e:	f0 f2 00 bc 	ld.w	r2,r8[188]
8000d762:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d766:	71 e3       	ld.w	r3,r8[0x78]
8000d768:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d76c:	70 d5       	ld.w	r5,r8[0x34]
8000d76e:	f0 16 00 0f 	mcall	r6[60]
8000d772:	18 9b       	mov	r11,r12
8000d774:	30 08       	mov	r8,0
8000d776:	1a d8       	st.w	--sp,r8
8000d778:	04 98       	mov	r8,r2
8000d77a:	06 99       	mov	r9,r3
8000d77c:	0a 9a       	mov	r10,r5
8000d77e:	30 0c       	mov	r12,0
8000d780:	fe b0 fd 2a 	rcall	8000d1d4 <mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send>
8000d784:	2f fd       	sub	sp,-4
}
8000d786:	2f fd       	sub	sp,-4
8000d788:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000d78c:	80 00       	ld.sh	r0,r0[0x0]
8000d78e:	d5 d2       	popm	r0-r3,r8-r11,lr

8000d790 <mavlink_send_rpy_speed_thrust_setpoint>:
void  mavlink_send_rpy_speed_thrust_setpoint(void) {
8000d790:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000d794:	1a 97       	mov	r7,sp
8000d796:	20 1d       	sub	sp,4
8000d798:	49 06       	lddpc	r6,8000d7d8 <mavlink_send_rpy_speed_thrust_setpoint+0x48>
8000d79a:	1e 26       	rsub	r6,pc
	Stabiliser_t *rate_stab=get_rate_stabiliser();
8000d79c:	f0 16 00 9b 	mcall	r6[620]
8000d7a0:	18 98       	mov	r8,r12
8000d7a2:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), rate_stab->rpy_controller[0].output, rate_stab->rpy_controller[1].output,rate_stab->rpy_controller[2].output,0 );
8000d7a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d7aa:	f0 f2 00 b8 	ld.w	r2,r8[184]
8000d7ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d7b2:	71 d3       	ld.w	r3,r8[0x74]
8000d7b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d7b8:	70 c5       	ld.w	r5,r8[0x30]
8000d7ba:	f0 16 00 0f 	mcall	r6[60]
8000d7be:	18 9b       	mov	r11,r12
8000d7c0:	30 08       	mov	r8,0
8000d7c2:	1a d8       	st.w	--sp,r8
8000d7c4:	04 98       	mov	r8,r2
8000d7c6:	06 99       	mov	r9,r3
8000d7c8:	0a 9a       	mov	r10,r5
8000d7ca:	30 0c       	mov	r12,0
8000d7cc:	fe b0 fc 64 	rcall	8000d094 <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send>
8000d7d0:	2f fd       	sub	sp,-4
}
8000d7d2:	2f fd       	sub	sp,-4
8000d7d4:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000d7d8:	80 00       	ld.sh	r0,r0[0x0]
8000d7da:	d6 1e       	*unknown*

8000d7dc <mavlink_send_rpy_thrust_setpoint>:
void mavlink_send_rpy_thrust_setpoint(void) {
8000d7dc:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000d7e0:	1a 97       	mov	r7,sp
8000d7e2:	49 26       	lddpc	r6,8000d828 <mavlink_send_rpy_thrust_setpoint+0x4c>
8000d7e4:	1e 26       	rsub	r6,pc
	
	// Controls output
	//mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float thrust)
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
8000d7e6:	ec f8 00 00 	ld.w	r8,r6[0]
8000d7ea:	70 08       	ld.w	r8,r8[0x0]
8000d7ec:	f0 f1 01 54 	ld.w	r1,r8[340]
8000d7f0:	ec f8 00 00 	ld.w	r8,r6[0]
8000d7f4:	70 08       	ld.w	r8,r8[0x0]
8000d7f6:	f0 f2 01 50 	ld.w	r2,r8[336]
8000d7fa:	ec f8 00 00 	ld.w	r8,r6[0]
8000d7fe:	70 08       	ld.w	r8,r8[0x0]
8000d800:	f0 f3 01 4c 	ld.w	r3,r8[332]
8000d804:	ec f8 00 00 	ld.w	r8,r6[0]
8000d808:	70 08       	ld.w	r8,r8[0x0]
8000d80a:	f0 f5 01 48 	ld.w	r5,r8[328]
8000d80e:	f0 16 00 0f 	mcall	r6[60]
8000d812:	18 9b       	mov	r11,r12
8000d814:	1a d1       	st.w	--sp,r1
8000d816:	04 98       	mov	r8,r2
8000d818:	06 99       	mov	r9,r3
8000d81a:	0a 9a       	mov	r10,r5
8000d81c:	30 0c       	mov	r12,0
8000d81e:	fe b0 fb ef 	rcall	8000cffc <mavlink_msg_roll_pitch_yaw_thrust_setpoint_send>
8000d822:	2f fd       	sub	sp,-4
}
8000d824:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000d828:	80 00       	ld.sh	r0,r0[0x0]
8000d82a:	d6 68       	*unknown*

8000d82c <mavlink_send_servo_output>:

void mavlink_send_servo_output(void) {
8000d82c:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000d830:	1a 97       	mov	r7,sp
8000d832:	20 4d       	sub	sp,16
8000d834:	4c a6       	lddpc	r6,8000d95c <mavlink_send_servo_output+0x130>
8000d836:	1e 26       	rsub	r6,pc
	Stabiliser_t *rate_stab=get_rate_stabiliser();
8000d838:	f0 16 00 9b 	mcall	r6[620]
8000d83c:	18 98       	mov	r8,r12
8000d83e:	ef 48 ff fc 	st.w	r7[-4],r8
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
	1000*rate_stab->output.rpy[2]+1000,
	1000*rate_stab->output.thrust+1000
8000d842:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d846:	f0 f9 01 1c 	ld.w	r9,r8[284]
8000d84a:	fc 18 44 7a 	movh	r8,0x447a
8000d84e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000d852:	fc 18 44 7a 	movh	r8,0x447a
8000d856:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab=get_rate_stabiliser();
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000d85a:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000d85e:	5c 88       	casts.h	r8
8000d860:	5c 78       	castu.h	r8
8000d862:	ef 48 ff f0 	st.w	r7[-16],r8
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
	1000*rate_stab->output.rpy[2]+1000,
8000d866:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d86a:	f0 f9 01 18 	ld.w	r9,r8[280]
8000d86e:	fc 18 44 7a 	movh	r8,0x447a
8000d872:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000d876:	fc 18 44 7a 	movh	r8,0x447a
8000d87a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab=get_rate_stabiliser();
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000d87e:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000d882:	5c 88       	casts.h	r8
8000d884:	5c 78       	castu.h	r8
8000d886:	ef 48 ff f4 	st.w	r7[-12],r8
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
8000d88a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d88e:	f0 f9 01 14 	ld.w	r9,r8[276]
8000d892:	fc 18 44 7a 	movh	r8,0x447a
8000d896:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000d89a:	fc 18 44 7a 	movh	r8,0x447a
8000d89e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab=get_rate_stabiliser();
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000d8a2:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000d8a6:	5c 88       	casts.h	r8
8000d8a8:	5c 78       	castu.h	r8
8000d8aa:	ef 48 ff f8 	st.w	r7[-8],r8
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
8000d8ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d8b2:	f0 f9 01 10 	ld.w	r9,r8[272]
8000d8b6:	fc 18 44 7a 	movh	r8,0x447a
8000d8ba:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000d8be:	fc 18 44 7a 	movh	r8,0x447a
8000d8c2:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab=get_rate_stabiliser();
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000d8c6:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000d8ca:	5c 88       	casts.h	r8
8000d8cc:	e1 d8 c0 10 	bfextu	r0,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
8000d8d0:	ec f8 00 00 	ld.w	r8,r6[0]
8000d8d4:	70 08       	ld.w	r8,r8[0x0]
8000d8d6:	f0 f8 03 64 	ld.w	r8,r8[868]
8000d8da:	5c 88       	casts.h	r8
8000d8dc:	f0 c8 fa 24 	sub	r8,r8,-1500
8000d8e0:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab=get_rate_stabiliser();
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000d8e2:	e3 d8 c0 10 	bfextu	r1,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
8000d8e6:	ec f8 00 00 	ld.w	r8,r6[0]
8000d8ea:	70 08       	ld.w	r8,r8[0x0]
8000d8ec:	f0 f8 03 54 	ld.w	r8,r8[852]
8000d8f0:	5c 88       	casts.h	r8
8000d8f2:	f0 c8 fa 24 	sub	r8,r8,-1500
8000d8f6:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab=get_rate_stabiliser();
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000d8f8:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
8000d8fc:	ec f8 00 00 	ld.w	r8,r6[0]
8000d900:	70 08       	ld.w	r8,r8[0x0]
8000d902:	f0 f8 03 44 	ld.w	r8,r8[836]
8000d906:	5c 88       	casts.h	r8
8000d908:	f0 c8 fa 24 	sub	r8,r8,-1500
8000d90c:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab=get_rate_stabiliser();
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000d90e:	e7 d8 c0 10 	bfextu	r3,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
8000d912:	ec f8 00 00 	ld.w	r8,r6[0]
8000d916:	70 08       	ld.w	r8,r8[0x0]
8000d918:	f0 f8 03 34 	ld.w	r8,r8[820]
8000d91c:	5c 88       	casts.h	r8
8000d91e:	f0 c8 fa 24 	sub	r8,r8,-1500
8000d922:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab=get_rate_stabiliser();
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000d924:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000d928:	f0 16 00 29 	mcall	r6[164]
8000d92c:	18 9b       	mov	r11,r12
8000d92e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d932:	1a d8       	st.w	--sp,r8
8000d934:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d938:	1a d8       	st.w	--sp,r8
8000d93a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d93e:	1a d8       	st.w	--sp,r8
8000d940:	1a d0       	st.w	--sp,r0
8000d942:	1a d1       	st.w	--sp,r1
8000d944:	1a d2       	st.w	--sp,r2
8000d946:	06 98       	mov	r8,r3
8000d948:	0a 99       	mov	r9,r5
8000d94a:	30 0a       	mov	r10,0
8000d94c:	30 0c       	mov	r12,0
8000d94e:	fe b0 fa c9 	rcall	8000cee0 <mavlink_msg_servo_output_raw_send>
8000d952:	2f ad       	sub	sp,-24
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
	1000*rate_stab->output.rpy[2]+1000,
	1000*rate_stab->output.thrust+1000
	);
}
8000d954:	2f cd       	sub	sp,-16
8000d956:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000d95a:	00 00       	add	r0,r0
8000d95c:	80 00       	ld.sh	r0,r0[0x0]
8000d95e:	d6 ba       	popm	r0-r7,r10,r12,lr

8000d960 <mavlink_send_attitude_quaternion>:

void mavlink_send_attitude_quaternion(void) {
8000d960:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000d964:	1a 97       	mov	r7,sp
8000d966:	20 2d       	sub	sp,8
8000d968:	49 c6       	lddpc	r6,8000d9d8 <mavlink_send_attitude_quaternion+0x78>
8000d96a:	1e 26       	rsub	r6,pc
	// ATTITUDE QUATERNION
	mavlink_msg_attitude_quaternion_send(MAVLINK_COMM_0, get_millis(), centralData->imu1.attitude.qe.s, centralData->imu1.attitude.qe.v[0], centralData->imu1.attitude.qe.v[1], centralData->imu1.attitude.qe.v[2], centralData->imu1.attitude.om[0], centralData->imu1.attitude.om[1], centralData->imu1.attitude.om[2]);
8000d96c:	ec f8 00 00 	ld.w	r8,r6[0]
8000d970:	70 08       	ld.w	r8,r8[0x0]
8000d972:	f0 f8 00 80 	ld.w	r8,r8[128]
8000d976:	ef 48 ff f8 	st.w	r7[-8],r8
8000d97a:	ec f8 00 00 	ld.w	r8,r6[0]
8000d97e:	70 08       	ld.w	r8,r8[0x0]
8000d980:	71 f8       	ld.w	r8,r8[0x7c]
8000d982:	ef 48 ff fc 	st.w	r7[-4],r8
8000d986:	ec f8 00 00 	ld.w	r8,r6[0]
8000d98a:	70 08       	ld.w	r8,r8[0x0]
8000d98c:	71 e0       	ld.w	r0,r8[0x78]
8000d98e:	ec f8 00 00 	ld.w	r8,r6[0]
8000d992:	70 08       	ld.w	r8,r8[0x0]
8000d994:	70 31       	ld.w	r1,r8[0xc]
8000d996:	ec f8 00 00 	ld.w	r8,r6[0]
8000d99a:	70 08       	ld.w	r8,r8[0x0]
8000d99c:	70 22       	ld.w	r2,r8[0x8]
8000d99e:	ec f8 00 00 	ld.w	r8,r6[0]
8000d9a2:	70 08       	ld.w	r8,r8[0x0]
8000d9a4:	70 13       	ld.w	r3,r8[0x4]
8000d9a6:	ec f8 00 00 	ld.w	r8,r6[0]
8000d9aa:	70 08       	ld.w	r8,r8[0x0]
8000d9ac:	70 05       	ld.w	r5,r8[0x0]
8000d9ae:	f0 16 00 0f 	mcall	r6[60]
8000d9b2:	18 9b       	mov	r11,r12
8000d9b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d9b8:	1a d8       	st.w	--sp,r8
8000d9ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d9be:	1a d8       	st.w	--sp,r8
8000d9c0:	1a d0       	st.w	--sp,r0
8000d9c2:	1a d1       	st.w	--sp,r1
8000d9c4:	04 98       	mov	r8,r2
8000d9c6:	06 99       	mov	r9,r3
8000d9c8:	0a 9a       	mov	r10,r5
8000d9ca:	30 0c       	mov	r12,0
8000d9cc:	fe b0 f8 1c 	rcall	8000ca04 <mavlink_msg_attitude_quaternion_send>
8000d9d0:	2f cd       	sub	sp,-16
}
8000d9d2:	2f ed       	sub	sp,-8
8000d9d4:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000d9d8:	80 00       	ld.sh	r0,r0[0x0]
8000d9da:	d7 ee       	*unknown*

8000d9dc <mavlink_send_attitude>:
void mavlink_send_attitude(void) {
8000d9dc:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000d9e0:	1a 97       	mov	r7,sp
8000d9e2:	20 4d       	sub	sp,16
8000d9e4:	49 f6       	lddpc	r6,8000da60 <mavlink_send_attitude+0x84>
8000d9e6:	1e 26       	rsub	r6,pc
	// ATTITUDE
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
8000d9e8:	ec f8 00 00 	ld.w	r8,r6[0]
8000d9ec:	70 09       	ld.w	r9,r8[0x0]
8000d9ee:	ee ca 00 0c 	sub	r10,r7,12
8000d9f2:	20 4d       	sub	sp,16
8000d9f4:	1a 98       	mov	r8,sp
8000d9f6:	20 08       	sub	r8,0
8000d9f8:	20 09       	sub	r9,0
8000d9fa:	72 0b       	ld.w	r11,r9[0x0]
8000d9fc:	91 0b       	st.w	r8[0x0],r11
8000d9fe:	72 1b       	ld.w	r11,r9[0x4]
8000da00:	91 1b       	st.w	r8[0x4],r11
8000da02:	72 2b       	ld.w	r11,r9[0x8]
8000da04:	91 2b       	st.w	r8[0x8],r11
8000da06:	72 39       	ld.w	r9,r9[0xc]
8000da08:	91 39       	st.w	r8[0xc],r9
8000da0a:	14 9c       	mov	r12,r10
8000da0c:	f0 16 00 72 	mcall	r6[456]
8000da10:	2f cd       	sub	sp,-16
	mavlink_msg_attitude_send(MAVLINK_COMM_0, get_millis(), aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2], centralData->imu1.attitude.om[0], centralData->imu1.attitude.om[1], centralData->imu1.attitude.om[2]);
8000da12:	ec f8 00 00 	ld.w	r8,r6[0]
8000da16:	70 08       	ld.w	r8,r8[0x0]
8000da18:	f0 f8 00 80 	ld.w	r8,r8[128]
8000da1c:	ef 48 ff f0 	st.w	r7[-16],r8
8000da20:	ec f8 00 00 	ld.w	r8,r6[0]
8000da24:	70 08       	ld.w	r8,r8[0x0]
8000da26:	71 f0       	ld.w	r0,r8[0x7c]
8000da28:	ec f8 00 00 	ld.w	r8,r6[0]
8000da2c:	70 08       	ld.w	r8,r8[0x0]
8000da2e:	71 e1       	ld.w	r1,r8[0x78]
8000da30:	ee f2 ff fc 	ld.w	r2,r7[-4]
8000da34:	ee f3 ff f8 	ld.w	r3,r7[-8]
8000da38:	ee f5 ff f4 	ld.w	r5,r7[-12]
8000da3c:	f0 16 00 0f 	mcall	r6[60]
8000da40:	18 9b       	mov	r11,r12
8000da42:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000da46:	1a d8       	st.w	--sp,r8
8000da48:	1a d0       	st.w	--sp,r0
8000da4a:	1a d1       	st.w	--sp,r1
8000da4c:	04 98       	mov	r8,r2
8000da4e:	06 99       	mov	r9,r3
8000da50:	0a 9a       	mov	r10,r5
8000da52:	30 0c       	mov	r12,0
8000da54:	fe b0 f7 7a 	rcall	8000c948 <mavlink_msg_attitude_send>
8000da58:	2f dd       	sub	sp,-12
}
8000da5a:	2f cd       	sub	sp,-16
8000da5c:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000da60:	80 00       	ld.sh	r0,r0[0x0]
8000da62:	d8 6a       	popm	r4-r9,pc,r12=0

8000da64 <mavlink_send_global_position>:

void mavlink_send_global_position(void) {				
8000da64:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000da68:	1a 97       	mov	r7,sp
8000da6a:	20 9d       	sub	sp,36
8000da6c:	4e 66       	lddpc	r6,8000dc04 <mavlink_send_global_position+0x1a0>
8000da6e:	1e 26       	rsub	r6,pc
   //{
	   //mavlink_msg_global_position_int_send(MAVLINK_COMM_0, get_millis() , centralData->GPS_data.latitude*10000000.0, centralData->GPS_data.longitude*10000000.0, centralData->GPS_data.altitude*1000.0, 1, centralData->GPS_data.northSpeed*100.0, centralData->GPS_data.eastSpeed*100.0, centralData->GPS_data.verticalSpeed*100.0, centralData->GPS_data.course);
   //}else{
	   //mavlink_msg_global_position_int_send(MAVLINK_COMM_0, get_millis(), 46.5193*10000000, 6.56507*10000000, 400*1000, 1, 0, 0, 0, centralData->imu1.attitude.om[2]);
	   	// send integrated position (for now there is no GPS error correction...!!!)
		global_position_t gpos=local_to_global_position(centralData->position_estimator.localPosition);
8000da70:	ec f8 00 00 	ld.w	r8,r6[0]
8000da74:	70 08       	ld.w	r8,r8[0x0]
8000da76:	ee cc 00 1c 	sub	r12,r7,28
8000da7a:	20 cd       	sub	sp,48
8000da7c:	1a 99       	mov	r9,sp
8000da7e:	12 9b       	mov	r11,r9
8000da80:	f0 ca f6 1c 	sub	r10,r8,-2532
8000da84:	f6 c8 00 00 	sub	r8,r11,0
8000da88:	f4 c9 00 00 	sub	r9,r10,0
8000da8c:	72 0e       	ld.w	lr,r9[0x0]
8000da8e:	91 0e       	st.w	r8[0x0],lr
8000da90:	72 1e       	ld.w	lr,r9[0x4]
8000da92:	91 1e       	st.w	r8[0x4],lr
8000da94:	72 2e       	ld.w	lr,r9[0x8]
8000da96:	91 2e       	st.w	r8[0x8],lr
8000da98:	72 39       	ld.w	r9,r9[0xc]
8000da9a:	91 39       	st.w	r8[0xc],r9
8000da9c:	f6 c8 ff f0 	sub	r8,r11,-16
8000daa0:	f4 c9 ff f0 	sub	r9,r10,-16
8000daa4:	72 0e       	ld.w	lr,r9[0x0]
8000daa6:	91 0e       	st.w	r8[0x0],lr
8000daa8:	72 1e       	ld.w	lr,r9[0x4]
8000daaa:	91 1e       	st.w	r8[0x4],lr
8000daac:	72 2e       	ld.w	lr,r9[0x8]
8000daae:	91 2e       	st.w	r8[0x8],lr
8000dab0:	72 39       	ld.w	r9,r9[0xc]
8000dab2:	91 39       	st.w	r8[0xc],r9
8000dab4:	f6 c8 ff e0 	sub	r8,r11,-32
8000dab8:	f4 c9 ff e0 	sub	r9,r10,-32
8000dabc:	72 0a       	ld.w	r10,r9[0x0]
8000dabe:	91 0a       	st.w	r8[0x0],r10
8000dac0:	72 1a       	ld.w	r10,r9[0x4]
8000dac2:	91 1a       	st.w	r8[0x4],r10
8000dac4:	72 2a       	ld.w	r10,r9[0x8]
8000dac6:	91 2a       	st.w	r8[0x8],r10
8000dac8:	72 39       	ld.w	r9,r9[0xc]
8000daca:	91 39       	st.w	r8[0xc],r9
8000dacc:	f0 16 00 8e 	mcall	r6[568]
8000dad0:	2f 4d       	sub	sp,-48
		mavlink_msg_global_position_int_send(MAVLINK_COMM_0, get_millis(), gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0, 1, centralData->position_estimator.vel[0]*100.0, centralData->position_estimator.vel[1]*100.0, centralData->position_estimator.vel[2]*100.0, centralData->imu1.attitude.om[2]);
8000dad2:	ec f8 00 00 	ld.w	r8,r6[0]
8000dad6:	70 08       	ld.w	r8,r8[0x0]
8000dad8:	f0 f8 00 80 	ld.w	r8,r8[128]
8000dadc:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000dae0:	5c 88       	casts.h	r8
8000dae2:	5c 78       	castu.h	r8
8000dae4:	ef 48 ff dc 	st.w	r7[-36],r8
8000dae8:	ec f8 00 00 	ld.w	r8,r6[0]
8000daec:	70 08       	ld.w	r8,r8[0x0]
8000daee:	f0 f8 09 c4 	ld.w	r8,r8[2500]
8000daf2:	10 9c       	mov	r12,r8
8000daf4:	f0 16 00 02 	mcall	r6[8]
8000daf8:	30 08       	mov	r8,0
8000dafa:	fc 19 40 59 	movh	r9,0x4059
8000dafe:	f0 16 00 03 	mcall	r6[12]
8000db02:	14 98       	mov	r8,r10
8000db04:	16 99       	mov	r9,r11
8000db06:	10 9a       	mov	r10,r8
8000db08:	12 9b       	mov	r11,r9
8000db0a:	f0 16 00 14 	mcall	r6[80]
8000db0e:	18 98       	mov	r8,r12
8000db10:	5c 88       	casts.h	r8
8000db12:	ef 48 ff e0 	st.w	r7[-32],r8
8000db16:	ec f8 00 00 	ld.w	r8,r6[0]
8000db1a:	70 08       	ld.w	r8,r8[0x0]
8000db1c:	f0 f8 09 c0 	ld.w	r8,r8[2496]
8000db20:	10 9c       	mov	r12,r8
8000db22:	f0 16 00 02 	mcall	r6[8]
8000db26:	30 08       	mov	r8,0
8000db28:	fc 19 40 59 	movh	r9,0x4059
8000db2c:	f0 16 00 03 	mcall	r6[12]
8000db30:	14 98       	mov	r8,r10
8000db32:	16 99       	mov	r9,r11
8000db34:	10 9a       	mov	r10,r8
8000db36:	12 9b       	mov	r11,r9
8000db38:	f0 16 00 14 	mcall	r6[80]
8000db3c:	18 98       	mov	r8,r12
8000db3e:	5c 88       	casts.h	r8
8000db40:	10 90       	mov	r0,r8
8000db42:	ec f8 00 00 	ld.w	r8,r6[0]
8000db46:	70 08       	ld.w	r8,r8[0x0]
8000db48:	f0 f8 09 bc 	ld.w	r8,r8[2492]
8000db4c:	10 9c       	mov	r12,r8
8000db4e:	f0 16 00 02 	mcall	r6[8]
8000db52:	30 08       	mov	r8,0
8000db54:	fc 19 40 59 	movh	r9,0x4059
8000db58:	f0 16 00 03 	mcall	r6[12]
8000db5c:	14 98       	mov	r8,r10
8000db5e:	16 99       	mov	r9,r11
8000db60:	10 9a       	mov	r10,r8
8000db62:	12 9b       	mov	r11,r9
8000db64:	f0 16 00 14 	mcall	r6[80]
8000db68:	18 98       	mov	r8,r12
8000db6a:	5c 88       	casts.h	r8
8000db6c:	10 91       	mov	r1,r8
8000db6e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000db72:	10 9c       	mov	r12,r8
8000db74:	f0 16 00 02 	mcall	r6[8]
8000db78:	30 08       	mov	r8,0
8000db7a:	e0 69 40 00 	mov	r9,16384
8000db7e:	ea 19 40 8f 	orh	r9,0x408f
8000db82:	f0 16 00 03 	mcall	r6[12]
8000db86:	14 98       	mov	r8,r10
8000db88:	16 99       	mov	r9,r11
8000db8a:	10 9a       	mov	r10,r8
8000db8c:	12 9b       	mov	r11,r9
8000db8e:	f0 16 00 14 	mcall	r6[80]
8000db92:	18 92       	mov	r2,r12
8000db94:	ee ea ff e4 	ld.d	r10,r7[-28]
8000db98:	30 08       	mov	r8,0
8000db9a:	e0 69 12 d0 	mov	r9,4816
8000db9e:	ea 19 41 63 	orh	r9,0x4163
8000dba2:	f0 16 00 03 	mcall	r6[12]
8000dba6:	14 98       	mov	r8,r10
8000dba8:	16 99       	mov	r9,r11
8000dbaa:	10 9a       	mov	r10,r8
8000dbac:	12 9b       	mov	r11,r9
8000dbae:	f0 16 00 14 	mcall	r6[80]
8000dbb2:	18 93       	mov	r3,r12
8000dbb4:	ee ea ff ec 	ld.d	r10,r7[-20]
8000dbb8:	30 08       	mov	r8,0
8000dbba:	e0 69 12 d0 	mov	r9,4816
8000dbbe:	ea 19 41 63 	orh	r9,0x4163
8000dbc2:	f0 16 00 03 	mcall	r6[12]
8000dbc6:	14 98       	mov	r8,r10
8000dbc8:	16 99       	mov	r9,r11
8000dbca:	10 9a       	mov	r10,r8
8000dbcc:	12 9b       	mov	r11,r9
8000dbce:	f0 16 00 14 	mcall	r6[80]
8000dbd2:	18 95       	mov	r5,r12
8000dbd4:	f0 16 00 0f 	mcall	r6[60]
8000dbd8:	18 9b       	mov	r11,r12
8000dbda:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000dbde:	1a d8       	st.w	--sp,r8
8000dbe0:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000dbe4:	1a d8       	st.w	--sp,r8
8000dbe6:	1a d0       	st.w	--sp,r0
8000dbe8:	1a d1       	st.w	--sp,r1
8000dbea:	30 18       	mov	r8,1
8000dbec:	1a d8       	st.w	--sp,r8
8000dbee:	04 98       	mov	r8,r2
8000dbf0:	06 99       	mov	r9,r3
8000dbf2:	0a 9a       	mov	r10,r5
8000dbf4:	30 0c       	mov	r12,0
8000dbf6:	fe b0 f7 cd 	rcall	8000cb90 <mavlink_msg_global_position_int_send>
8000dbfa:	2f bd       	sub	sp,-20
   //} 
}
8000dbfc:	2f 7d       	sub	sp,-36
8000dbfe:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000dc02:	00 00       	add	r0,r0
8000dc04:	80 00       	ld.sh	r0,r0[0x0]
8000dc06:	d8 f2       	popm	r0-r10,pc

8000dc08 <mavlink_send_hud>:

void mavlink_send_hud(void) {
8000dc08:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000dc0c:	1a 97       	mov	r7,sp
8000dc0e:	20 5d       	sub	sp,20
8000dc10:	4d 46       	lddpc	r6,8000dd60 <mavlink_send_hud+0x158>
8000dc12:	1e 26       	rsub	r6,pc
	float groundspeed=sqrt(centralData->position_estimator.vel[0]*centralData->position_estimator.vel[0] +centralData->position_estimator.vel[1]*centralData->position_estimator.vel[1]);
8000dc14:	ec f8 00 00 	ld.w	r8,r6[0]
8000dc18:	70 08       	ld.w	r8,r8[0x0]
8000dc1a:	f0 f9 09 bc 	ld.w	r9,r8[2492]
8000dc1e:	ec f8 00 00 	ld.w	r8,r6[0]
8000dc22:	70 08       	ld.w	r8,r8[0x0]
8000dc24:	f0 f8 09 bc 	ld.w	r8,r8[2492]
8000dc28:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000dc2c:	ec f8 00 00 	ld.w	r8,r6[0]
8000dc30:	70 08       	ld.w	r8,r8[0x0]
8000dc32:	f0 fa 09 c0 	ld.w	r10,r8[2496]
8000dc36:	ec f8 00 00 	ld.w	r8,r6[0]
8000dc3a:	70 08       	ld.w	r8,r8[0x0]
8000dc3c:	f0 f8 09 c0 	ld.w	r8,r8[2496]
8000dc40:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000dc44:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000dc48:	10 9c       	mov	r12,r8
8000dc4a:	f0 16 00 02 	mcall	r6[8]
8000dc4e:	14 98       	mov	r8,r10
8000dc50:	16 99       	mov	r9,r11
8000dc52:	10 9a       	mov	r10,r8
8000dc54:	12 9b       	mov	r11,r9
8000dc56:	f0 16 00 70 	mcall	r6[448]
8000dc5a:	14 98       	mov	r8,r10
8000dc5c:	16 99       	mov	r9,r11
8000dc5e:	10 9a       	mov	r10,r8
8000dc60:	12 9b       	mov	r11,r9
8000dc62:	f0 16 00 09 	mcall	r6[36]
8000dc66:	18 98       	mov	r8,r12
8000dc68:	ef 48 ff f8 	st.w	r7[-8],r8
	float airspeed=groundspeed;
8000dc6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dc70:	ef 48 ff fc 	st.w	r7[-4],r8
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
8000dc74:	ec f8 00 00 	ld.w	r8,r6[0]
8000dc78:	70 09       	ld.w	r9,r8[0x0]
8000dc7a:	ee ca 00 14 	sub	r10,r7,20
8000dc7e:	20 4d       	sub	sp,16
8000dc80:	1a 98       	mov	r8,sp
8000dc82:	20 08       	sub	r8,0
8000dc84:	20 09       	sub	r9,0
8000dc86:	72 0b       	ld.w	r11,r9[0x0]
8000dc88:	91 0b       	st.w	r8[0x0],r11
8000dc8a:	72 1b       	ld.w	r11,r9[0x4]
8000dc8c:	91 1b       	st.w	r8[0x4],r11
8000dc8e:	72 2b       	ld.w	r11,r9[0x8]
8000dc90:	91 2b       	st.w	r8[0x8],r11
8000dc92:	72 39       	ld.w	r9,r9[0xc]
8000dc94:	91 39       	st.w	r8[0xc],r9
8000dc96:	14 9c       	mov	r12,r10
8000dc98:	f0 16 00 72 	mcall	r6[456]
8000dc9c:	2f cd       	sub	sp,-16
	// mavlink_msg_vfr_hud_send(mavlink_channel_t chan, float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
	mavlink_msg_vfr_hud_send(MAVLINK_COMM_0, airspeed, groundspeed, 180.0*aero_attitude.rpy[2]/PI, (int)((centralData->controls.thrust+1.0)*50), -centralData->position_estimator.localPosition.pos[2], -centralData->position_estimator.vel[2]);
8000dc9e:	ec f8 00 00 	ld.w	r8,r6[0]
8000dca2:	70 08       	ld.w	r8,r8[0x0]
8000dca4:	f0 f8 09 c4 	ld.w	r8,r8[2500]
8000dca8:	10 92       	mov	r2,r8
8000dcaa:	ee 12 80 00 	eorh	r2,0x8000
8000dcae:	ec f8 00 00 	ld.w	r8,r6[0]
8000dcb2:	70 08       	ld.w	r8,r8[0x0]
8000dcb4:	f0 f8 09 ec 	ld.w	r8,r8[2540]
8000dcb8:	10 93       	mov	r3,r8
8000dcba:	ee 13 80 00 	eorh	r3,0x8000
8000dcbe:	ec f8 00 00 	ld.w	r8,r6[0]
8000dcc2:	70 08       	ld.w	r8,r8[0x0]
8000dcc4:	f0 f8 01 54 	ld.w	r8,r8[340]
8000dcc8:	10 9c       	mov	r12,r8
8000dcca:	f0 16 00 02 	mcall	r6[8]
8000dcce:	30 08       	mov	r8,0
8000dcd0:	fc 19 3f f0 	movh	r9,0x3ff0
8000dcd4:	f0 16 00 05 	mcall	r6[20]
8000dcd8:	14 98       	mov	r8,r10
8000dcda:	16 99       	mov	r9,r11
8000dcdc:	10 9a       	mov	r10,r8
8000dcde:	12 9b       	mov	r11,r9
8000dce0:	30 08       	mov	r8,0
8000dce2:	fc 19 40 49 	movh	r9,0x4049
8000dce6:	f0 16 00 03 	mcall	r6[12]
8000dcea:	14 98       	mov	r8,r10
8000dcec:	16 99       	mov	r9,r11
8000dcee:	10 9a       	mov	r10,r8
8000dcf0:	12 9b       	mov	r11,r9
8000dcf2:	f0 16 00 14 	mcall	r6[80]
8000dcf6:	18 98       	mov	r8,r12
8000dcf8:	5c 88       	casts.h	r8
8000dcfa:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000dcfe:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000dd02:	10 9c       	mov	r12,r8
8000dd04:	f0 16 00 02 	mcall	r6[8]
8000dd08:	30 08       	mov	r8,0
8000dd0a:	e0 69 80 00 	mov	r9,32768
8000dd0e:	ea 19 40 66 	orh	r9,0x4066
8000dd12:	f0 16 00 03 	mcall	r6[12]
8000dd16:	14 98       	mov	r8,r10
8000dd18:	16 99       	mov	r9,r11
8000dd1a:	10 9a       	mov	r10,r8
8000dd1c:	12 9b       	mov	r11,r9
8000dd1e:	e0 68 2d 18 	mov	r8,11544
8000dd22:	ea 18 54 44 	orh	r8,0x5444
8000dd26:	e0 69 21 fb 	mov	r9,8699
8000dd2a:	ea 19 40 09 	orh	r9,0x4009
8000dd2e:	f0 16 00 0c 	mcall	r6[48]
8000dd32:	14 98       	mov	r8,r10
8000dd34:	16 99       	mov	r9,r11
8000dd36:	10 9a       	mov	r10,r8
8000dd38:	12 9b       	mov	r11,r9
8000dd3a:	f0 16 00 14 	mcall	r6[80]
8000dd3e:	18 98       	mov	r8,r12
8000dd40:	5c 88       	casts.h	r8
8000dd42:	10 99       	mov	r9,r8
8000dd44:	1a d2       	st.w	--sp,r2
8000dd46:	1a d3       	st.w	--sp,r3
8000dd48:	0a 98       	mov	r8,r5
8000dd4a:	ee fa ff f8 	ld.w	r10,r7[-8]
8000dd4e:	ee fb ff fc 	ld.w	r11,r7[-4]
8000dd52:	30 0c       	mov	r12,0
8000dd54:	fe b0 f9 ec 	rcall	8000d12c <mavlink_msg_vfr_hud_send>
8000dd58:	2f ed       	sub	sp,-8

	
}
8000dd5a:	2f bd       	sub	sp,-20
8000dd5c:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000dd60:	80 00       	ld.sh	r0,r0[0x0]
8000dd62:	da 96       	*unknown*

8000dd64 <mavlink_send_gps_raw>:

void mavlink_send_gps_raw(void) {	
8000dd64:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000dd68:	1a 97       	mov	r7,sp
8000dd6a:	20 4d       	sub	sp,16
8000dd6c:	4f d6       	lddpc	r6,8000df60 <mavlink_send_gps_raw+0x1fc>
8000dd6e:	1e 26       	rsub	r6,pc
	// mavlink_msg_gps_raw_int_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible)
	if (centralData->GPS_data.status == GPS_OK)
8000dd70:	ec f8 00 00 	ld.w	r8,r6[0]
8000dd74:	70 08       	ld.w	r8,r8[0x0]
8000dd76:	f1 39 07 9c 	ld.ub	r9,r8[1948]
8000dd7a:	30 28       	mov	r8,2
8000dd7c:	f0 09 18 00 	cp.b	r9,r8
8000dd80:	e0 81 00 c0 	brne	8000df00 <mavlink_send_gps_raw+0x19c>
	{
		mavlink_msg_gps_raw_int_send(MAVLINK_COMM_0,1000*centralData->GPS_data.timeLastMsg, centralData->GPS_data.status, centralData->GPS_data.latitude*10000000.0, centralData->GPS_data.longitude*10000000.0, centralData->GPS_data.altitude*1000.0, centralData->GPS_data.hdop*100.0, centralData->GPS_data.speedAccuracy*100.0 ,centralData->GPS_data.groundSpeed*100.0, centralData->GPS_data.course, centralData->GPS_data.num_sats);	
8000dd84:	ec f8 00 00 	ld.w	r8,r6[0]
8000dd88:	70 08       	ld.w	r8,r8[0x0]
8000dd8a:	f1 38 07 90 	ld.ub	r8,r8[1936]
8000dd8e:	ef 48 ff f0 	st.w	r7[-16],r8
8000dd92:	ec f8 00 00 	ld.w	r8,r6[0]
8000dd96:	70 08       	ld.w	r8,r8[0x0]
8000dd98:	f0 f8 07 7c 	ld.w	r8,r8[1916]
8000dd9c:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000dda0:	5c 88       	casts.h	r8
8000dda2:	5c 78       	castu.h	r8
8000dda4:	ef 48 ff f4 	st.w	r7[-12],r8
8000dda8:	ec f8 00 00 	ld.w	r8,r6[0]
8000ddac:	70 08       	ld.w	r8,r8[0x0]
8000ddae:	f0 f8 07 6c 	ld.w	r8,r8[1900]
8000ddb2:	10 9c       	mov	r12,r8
8000ddb4:	f0 16 00 02 	mcall	r6[8]
8000ddb8:	30 08       	mov	r8,0
8000ddba:	fc 19 40 59 	movh	r9,0x4059
8000ddbe:	f0 16 00 03 	mcall	r6[12]
8000ddc2:	14 98       	mov	r8,r10
8000ddc4:	16 99       	mov	r9,r11
8000ddc6:	10 9a       	mov	r10,r8
8000ddc8:	12 9b       	mov	r11,r9
8000ddca:	f0 16 00 80 	mcall	r6[512]
8000ddce:	18 98       	mov	r8,r12
8000ddd0:	5c 88       	casts.h	r8
8000ddd2:	5c 78       	castu.h	r8
8000ddd4:	ef 48 ff f8 	st.w	r7[-8],r8
8000ddd8:	ec f8 00 00 	ld.w	r8,r6[0]
8000dddc:	70 08       	ld.w	r8,r8[0x0]
8000ddde:	f0 f8 07 88 	ld.w	r8,r8[1928]
8000dde2:	10 9c       	mov	r12,r8
8000dde4:	f0 16 00 02 	mcall	r6[8]
8000dde8:	30 08       	mov	r8,0
8000ddea:	fc 19 40 59 	movh	r9,0x4059
8000ddee:	f0 16 00 03 	mcall	r6[12]
8000ddf2:	14 98       	mov	r8,r10
8000ddf4:	16 99       	mov	r9,r11
8000ddf6:	10 9a       	mov	r10,r8
8000ddf8:	12 9b       	mov	r11,r9
8000ddfa:	f0 16 00 80 	mcall	r6[512]
8000ddfe:	18 98       	mov	r8,r12
8000de00:	5c 88       	casts.h	r8
8000de02:	5c 78       	castu.h	r8
8000de04:	ef 48 ff fc 	st.w	r7[-4],r8
8000de08:	ec f8 00 00 	ld.w	r8,r6[0]
8000de0c:	70 08       	ld.w	r8,r8[0x0]
8000de0e:	f1 08 07 92 	ld.sh	r8,r8[1938]
8000de12:	5c 78       	castu.h	r8
8000de14:	10 9c       	mov	r12,r8
8000de16:	f0 16 00 1a 	mcall	r6[104]
8000de1a:	30 08       	mov	r8,0
8000de1c:	fc 19 40 59 	movh	r9,0x4059
8000de20:	f0 16 00 03 	mcall	r6[12]
8000de24:	14 98       	mov	r8,r10
8000de26:	16 99       	mov	r9,r11
8000de28:	10 9a       	mov	r10,r8
8000de2a:	12 9b       	mov	r11,r9
8000de2c:	f0 16 00 80 	mcall	r6[512]
8000de30:	18 98       	mov	r8,r12
8000de32:	5c 88       	casts.h	r8
8000de34:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
8000de38:	ec f8 00 00 	ld.w	r8,r6[0]
8000de3c:	70 08       	ld.w	r8,r8[0x0]
8000de3e:	f0 f8 07 60 	ld.w	r8,r8[1888]
8000de42:	10 9c       	mov	r12,r8
8000de44:	f0 16 00 02 	mcall	r6[8]
8000de48:	30 08       	mov	r8,0
8000de4a:	e0 69 40 00 	mov	r9,16384
8000de4e:	ea 19 40 8f 	orh	r9,0x408f
8000de52:	f0 16 00 03 	mcall	r6[12]
8000de56:	14 98       	mov	r8,r10
8000de58:	16 99       	mov	r9,r11
8000de5a:	10 9a       	mov	r10,r8
8000de5c:	12 9b       	mov	r11,r9
8000de5e:	f0 16 00 14 	mcall	r6[80]
8000de62:	18 93       	mov	r3,r12
8000de64:	ec f8 00 00 	ld.w	r8,r6[0]
8000de68:	70 08       	ld.w	r8,r8[0x0]
8000de6a:	f0 ea 07 58 	ld.d	r10,r8[1880]
8000de6e:	30 08       	mov	r8,0
8000de70:	e0 69 12 d0 	mov	r9,4816
8000de74:	ea 19 41 63 	orh	r9,0x4163
8000de78:	f0 16 00 03 	mcall	r6[12]
8000de7c:	14 98       	mov	r8,r10
8000de7e:	16 99       	mov	r9,r11
8000de80:	10 9a       	mov	r10,r8
8000de82:	12 9b       	mov	r11,r9
8000de84:	f0 16 00 14 	mcall	r6[80]
8000de88:	18 95       	mov	r5,r12
8000de8a:	ec f8 00 00 	ld.w	r8,r6[0]
8000de8e:	70 08       	ld.w	r8,r8[0x0]
8000de90:	f0 ea 07 50 	ld.d	r10,r8[1872]
8000de94:	30 08       	mov	r8,0
8000de96:	e0 69 12 d0 	mov	r9,4816
8000de9a:	ea 19 41 63 	orh	r9,0x4163
8000de9e:	f0 16 00 03 	mcall	r6[12]
8000dea2:	14 98       	mov	r8,r10
8000dea4:	16 99       	mov	r9,r11
8000dea6:	10 9a       	mov	r10,r8
8000dea8:	12 9b       	mov	r11,r9
8000deaa:	f0 16 00 14 	mcall	r6[80]
8000deae:	18 9a       	mov	r10,r12
8000deb0:	ec f8 00 00 	ld.w	r8,r6[0]
8000deb4:	70 08       	ld.w	r8,r8[0x0]
8000deb6:	f1 38 07 9c 	ld.ub	r8,r8[1948]
8000deba:	10 99       	mov	r9,r8
8000debc:	ec f8 00 00 	ld.w	r8,r6[0]
8000dec0:	70 08       	ld.w	r8,r8[0x0]
8000dec2:	f0 fb 07 94 	ld.w	r11,r8[1940]
8000dec6:	e0 68 03 e8 	mov	r8,1000
8000deca:	f6 08 02 48 	mul	r8,r11,r8
8000dece:	10 90       	mov	r0,r8
8000ded0:	30 01       	mov	r1,0
8000ded2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ded6:	1a d8       	st.w	--sp,r8
8000ded8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000dedc:	1a d8       	st.w	--sp,r8
8000dede:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000dee2:	1a d8       	st.w	--sp,r8
8000dee4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000dee8:	1a d8       	st.w	--sp,r8
8000deea:	1a d2       	st.w	--sp,r2
8000deec:	1a d3       	st.w	--sp,r3
8000deee:	1a d5       	st.w	--sp,r5
8000def0:	14 98       	mov	r8,r10
8000def2:	00 9a       	mov	r10,r0
8000def4:	02 9b       	mov	r11,r1
8000def6:	30 0c       	mov	r12,0
8000def8:	fe b0 f3 54 	rcall	8000c5a0 <mavlink_msg_gps_raw_int_send>
8000defc:	2f 9d       	sub	sp,-28
8000defe:	c2 e8       	rjmp	8000df5a <mavlink_send_gps_raw+0x1f6>
	}else{
		mavlink_msg_gps_raw_int_send(MAVLINK_COMM_0,get_micros(), centralData->GPS_data.status, 46.5193*10000000, 6.56507*10000000, 400 * 1000, 0, 0 , 0, 0, centralData->GPS_data.num_sats);
8000df00:	ec f8 00 00 	ld.w	r8,r6[0]
8000df04:	70 08       	ld.w	r8,r8[0x0]
8000df06:	f1 38 07 90 	ld.ub	r8,r8[1936]
8000df0a:	10 91       	mov	r1,r8
8000df0c:	ec f8 00 00 	ld.w	r8,r6[0]
8000df10:	70 08       	ld.w	r8,r8[0x0]
8000df12:	f1 38 07 9c 	ld.ub	r8,r8[1948]
8000df16:	10 95       	mov	r5,r8
8000df18:	f0 16 00 29 	mcall	r6[164]
8000df1c:	18 98       	mov	r8,r12
8000df1e:	10 92       	mov	r2,r8
8000df20:	30 03       	mov	r3,0
8000df22:	1a d1       	st.w	--sp,r1
8000df24:	30 08       	mov	r8,0
8000df26:	1a d8       	st.w	--sp,r8
8000df28:	30 08       	mov	r8,0
8000df2a:	1a d8       	st.w	--sp,r8
8000df2c:	30 08       	mov	r8,0
8000df2e:	1a d8       	st.w	--sp,r8
8000df30:	30 08       	mov	r8,0
8000df32:	1a d8       	st.w	--sp,r8
8000df34:	e6 68 1a 80 	mov	r8,400000
8000df38:	1a d8       	st.w	--sp,r8
8000df3a:	e0 68 c0 0c 	mov	r8,49164
8000df3e:	ea 18 03 e9 	orh	r8,0x3e9
8000df42:	1a d8       	st.w	--sp,r8
8000df44:	e0 68 48 28 	mov	r8,18472
8000df48:	ea 18 1b ba 	orh	r8,0x1bba
8000df4c:	0a 99       	mov	r9,r5
8000df4e:	04 9a       	mov	r10,r2
8000df50:	06 9b       	mov	r11,r3
8000df52:	30 0c       	mov	r12,0
8000df54:	fe b0 f3 26 	rcall	8000c5a0 <mavlink_msg_gps_raw_int_send>
8000df58:	2f 9d       	sub	sp,-28
	}
}
8000df5a:	2f cd       	sub	sp,-16
8000df5c:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000df60:	80 00       	ld.sh	r0,r0[0x0]
8000df62:	db f2       	popm	r0-r12,pc
8000df64:	70 72       	ld.w	r2,r8[0x1c]
8000df66:	65 73       	ld.w	r3,r2[0x5c]
8000df68:	73 41       	ld.w	r1,r9[0x50]
8000df6a:	6c 74       	ld.w	r4,r6[0x1c]
8000df6c:	00 00       	add	r0,r0
8000df6e:	00 00       	add	r0,r0
8000df70:	6c 61       	ld.w	r1,r6[0x18]
8000df72:	73 74       	ld.w	r4,r9[0x5c]
8000df74:	41 6c       	lddsp	r12,sp[0x58]
8000df76:	74 00       	ld.w	r0,r10[0x0]
8000df78:	62 61       	ld.w	r1,r1[0x18]
8000df7a:	72 6f       	ld.w	pc,r9[0x18]
8000df7c:	5f 64       	srmi	r4
8000df7e:	74 00       	ld.w	r0,r10[0x0]

8000df80 <mavlink_send_pressure>:


void mavlink_send_pressure(void) {			
8000df80:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000df84:	1a 97       	mov	r7,sp
8000df86:	4b 56       	lddpc	r6,8000e058 <mavlink_send_pressure+0xd8>
8000df88:	1e 26       	rsub	r6,pc
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "Altitude", centralData->pressure.altitude);
	
	
	//mavlink_msg_scaled_pressure_send(mavlink_channel_t chan, uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
	
	mavlink_msg_scaled_pressure_send(MAVLINK_COMM_0, get_millis(), centralData->pressure.pressure/100.0, centralData->pressure.vario_vz, centralData->pressure.temperature*100.0);
8000df8a:	ec f8 00 00 	ld.w	r8,r6[0]
8000df8e:	70 08       	ld.w	r8,r8[0x0]
8000df90:	f0 f8 0d 18 	ld.w	r8,r8[3352]
8000df94:	10 9c       	mov	r12,r8
8000df96:	f0 16 00 02 	mcall	r6[8]
8000df9a:	30 08       	mov	r8,0
8000df9c:	fc 19 40 59 	movh	r9,0x4059
8000dfa0:	f0 16 00 03 	mcall	r6[12]
8000dfa4:	14 98       	mov	r8,r10
8000dfa6:	16 99       	mov	r9,r11
8000dfa8:	10 9a       	mov	r10,r8
8000dfaa:	12 9b       	mov	r11,r9
8000dfac:	f0 16 00 14 	mcall	r6[80]
8000dfb0:	18 98       	mov	r8,r12
8000dfb2:	5c 88       	casts.h	r8
8000dfb4:	10 92       	mov	r2,r8
8000dfb6:	ec f8 00 00 	ld.w	r8,r6[0]
8000dfba:	70 08       	ld.w	r8,r8[0x0]
8000dfbc:	f0 f3 0d 30 	ld.w	r3,r8[3376]
8000dfc0:	ec f8 00 00 	ld.w	r8,r6[0]
8000dfc4:	70 08       	ld.w	r8,r8[0x0]
8000dfc6:	f0 f8 0d 14 	ld.w	r8,r8[3348]
8000dfca:	fc 1b 42 c8 	movh	r11,0x42c8
8000dfce:	10 9c       	mov	r12,r8
8000dfd0:	f0 16 00 08 	mcall	r6[32]
8000dfd4:	18 98       	mov	r8,r12
8000dfd6:	10 95       	mov	r5,r8
8000dfd8:	f0 16 00 0f 	mcall	r6[60]
8000dfdc:	18 9b       	mov	r11,r12
8000dfde:	04 98       	mov	r8,r2
8000dfe0:	06 99       	mov	r9,r3
8000dfe2:	0a 9a       	mov	r10,r5
8000dfe4:	30 0c       	mov	r12,0
8000dfe6:	fe b0 f4 6f 	rcall	8000c8c4 <mavlink_msg_scaled_pressure_send>
	flush_mavlink();
8000dfea:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"pressAlt", centralData->pressure.altitude);
8000dfee:	ec f8 00 00 	ld.w	r8,r6[0]
8000dff2:	70 08       	ld.w	r8,r8[0x0]
8000dff4:	f0 f5 0d 28 	ld.w	r5,r8[3368]
8000dff8:	f0 16 00 0f 	mcall	r6[60]
8000dffc:	18 98       	mov	r8,r12
8000dffe:	0a 99       	mov	r9,r5
8000e000:	fe ca 00 9c 	sub	r10,pc,156
8000e004:	10 9b       	mov	r11,r8
8000e006:	30 0c       	mov	r12,0
8000e008:	fe b0 f9 f2 	rcall	8000d3ec <mavlink_msg_named_value_float_send>
	flush_mavlink();
8000e00c:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"lastAlt", centralData->position_estimator.last_alt);
8000e010:	ec f8 00 00 	ld.w	r8,r6[0]
8000e014:	70 08       	ld.w	r8,r8[0x0]
8000e016:	f0 f5 09 d4 	ld.w	r5,r8[2516]
8000e01a:	f0 16 00 0f 	mcall	r6[60]
8000e01e:	18 98       	mov	r8,r12
8000e020:	0a 99       	mov	r9,r5
8000e022:	fe ca 00 b2 	sub	r10,pc,178
8000e026:	10 9b       	mov	r11,r8
8000e028:	30 0c       	mov	r12,0
8000e02a:	fe b0 f9 e1 	rcall	8000d3ec <mavlink_msg_named_value_float_send>
	flush_mavlink();
8000e02e:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"baro_dt", centralData->pressure.dt);
8000e032:	ec f8 00 00 	ld.w	r8,r6[0]
8000e036:	70 08       	ld.w	r8,r8[0x0]
8000e038:	f0 f5 0d 40 	ld.w	r5,r8[3392]
8000e03c:	f0 16 00 0f 	mcall	r6[60]
8000e040:	18 98       	mov	r8,r12
8000e042:	0a 99       	mov	r9,r5
8000e044:	fe ca 00 cc 	sub	r10,pc,204
8000e048:	10 9b       	mov	r11,r8
8000e04a:	30 0c       	mov	r12,0
8000e04c:	fe b0 f9 d0 	rcall	8000d3ec <mavlink_msg_named_value_float_send>
	flush_mavlink();
8000e050:	f0 16 00 3c 	mcall	r6[240]
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"pressFilt", centralData->altitude_filtered);
}
8000e054:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000e058:	80 00       	ld.sh	r0,r0[0x0]
8000e05a:	de 0c       	*unknown*
8000e05c:	52 61       	stdsp	sp[0x98],r1
8000e05e:	64 61       	ld.w	r1,r2[0x18]
8000e060:	72 5f       	ld.w	pc,r9[0x14]
8000e062:	76 65       	ld.w	r5,r11[0x18]
8000e064:	6c 6f       	ld.w	pc,r6[0x18]
8000e066:	63 69       	ld.w	r9,r1[0x58]
8000e068:	74 79       	ld.w	r9,r10[0x1c]
8000e06a:	00 00       	add	r0,r0
8000e06c:	52 61       	stdsp	sp[0x98],r1
8000e06e:	64 61       	ld.w	r1,r2[0x18]
8000e070:	72 5f       	ld.w	pc,r9[0x14]
8000e072:	61 6d       	ld.w	sp,r0[0x58]
8000e074:	70 6c       	ld.w	r12,r8[0x18]
8000e076:	69 74       	ld.w	r4,r4[0x5c]
8000e078:	75 64       	ld.w	r4,r10[0x58]
8000e07a:	65 00       	ld.w	r0,r2[0x40]

8000e07c <mavlink_send_radar>:

void mavlink_send_radar(void) {
8000e07c:	eb cd 40 e0 	pushm	r5-r7,lr
8000e080:	1a 97       	mov	r7,sp
8000e082:	20 1d       	sub	sp,4
8000e084:	49 76       	lddpc	r6,8000e0e0 <mavlink_send_radar+0x64>
8000e086:	1e 26       	rsub	r6,pc
	read_radar();
8000e088:	f0 16 01 a9 	mcall	r6[1700]
	radar_target *target=get_radar_main_target();
8000e08c:	f0 16 01 b3 	mcall	r6[1740]
8000e090:	18 98       	mov	r8,r12
8000e092:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "Radar_velocity", target->velocity);
8000e096:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e09a:	70 05       	ld.w	r5,r8[0x0]
8000e09c:	f0 16 00 0f 	mcall	r6[60]
8000e0a0:	18 98       	mov	r8,r12
8000e0a2:	0a 99       	mov	r9,r5
8000e0a4:	fe ca 00 48 	sub	r10,pc,72
8000e0a8:	10 9b       	mov	r11,r8
8000e0aa:	30 0c       	mov	r12,0
8000e0ac:	fe b0 f9 a0 	rcall	8000d3ec <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "Radar_amplitude", target->amplitude/1000.0);
8000e0b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e0b4:	70 18       	ld.w	r8,r8[0x4]
8000e0b6:	fc 1b 44 7a 	movh	r11,0x447a
8000e0ba:	10 9c       	mov	r12,r8
8000e0bc:	f0 16 00 08 	mcall	r6[32]
8000e0c0:	18 98       	mov	r8,r12
8000e0c2:	10 95       	mov	r5,r8
8000e0c4:	f0 16 00 0f 	mcall	r6[60]
8000e0c8:	18 98       	mov	r8,r12
8000e0ca:	0a 99       	mov	r9,r5
8000e0cc:	fe ca 00 60 	sub	r10,pc,96
8000e0d0:	10 9b       	mov	r11,r8
8000e0d2:	30 0c       	mov	r12,0
8000e0d4:	fe b0 f9 8c 	rcall	8000d3ec <mavlink_msg_named_value_float_send>
}
8000e0d8:	2f fd       	sub	sp,-4
8000e0da:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e0de:	00 00       	add	r0,r0
8000e0e0:	80 00       	ld.sh	r0,r0[0x0]
8000e0e2:	df 0a       	popm	r11,pc,r12=-1

8000e0e4 <mavlink_send_estimator>:

void mavlink_send_estimator(void)
{
8000e0e4:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000e0e8:	1a 97       	mov	r7,sp
8000e0ea:	20 1d       	sub	sp,4
8000e0ec:	49 a6       	lddpc	r6,8000e154 <mavlink_send_estimator+0x70>
8000e0ee:	1e 26       	rsub	r6,pc
	//mavlink_msg_local_position_ned_send(mavlink_channel_t chan, uint32_t time_boot_ms, float x, float y, float z, float vx, float vy, float vz)
	//mavlink_msg_local_position_ned_send(MAVLINK_COMM_0, get_millis(), centralData->estimation.state[0][0], centralData->estimation.state[1][0], centralData->estimation.state[2][0], centralData->estimation.state[0][1], centralData->estimation.state[1][1], centralData->estimation.state[2][1]);
	mavlink_msg_local_position_ned_send(MAVLINK_COMM_0, get_millis(), centralData->position_estimator.localPosition.pos[0], centralData->position_estimator.localPosition.pos[1], centralData->position_estimator.localPosition.pos[2], centralData->position_estimator.vel[0], centralData->position_estimator.vel[1], centralData->position_estimator.vel[2]);
8000e0f0:	ec f8 00 00 	ld.w	r8,r6[0]
8000e0f4:	70 08       	ld.w	r8,r8[0x0]
8000e0f6:	f0 f8 09 c4 	ld.w	r8,r8[2500]
8000e0fa:	ef 48 ff fc 	st.w	r7[-4],r8
8000e0fe:	ec f8 00 00 	ld.w	r8,r6[0]
8000e102:	70 08       	ld.w	r8,r8[0x0]
8000e104:	f0 f0 09 c0 	ld.w	r0,r8[2496]
8000e108:	ec f8 00 00 	ld.w	r8,r6[0]
8000e10c:	70 08       	ld.w	r8,r8[0x0]
8000e10e:	f0 f1 09 bc 	ld.w	r1,r8[2492]
8000e112:	ec f8 00 00 	ld.w	r8,r6[0]
8000e116:	70 08       	ld.w	r8,r8[0x0]
8000e118:	f0 f2 09 ec 	ld.w	r2,r8[2540]
8000e11c:	ec f8 00 00 	ld.w	r8,r6[0]
8000e120:	70 08       	ld.w	r8,r8[0x0]
8000e122:	f0 f3 09 e8 	ld.w	r3,r8[2536]
8000e126:	ec f8 00 00 	ld.w	r8,r6[0]
8000e12a:	70 08       	ld.w	r8,r8[0x0]
8000e12c:	f0 f5 09 e4 	ld.w	r5,r8[2532]
8000e130:	f0 16 00 0f 	mcall	r6[60]
8000e134:	18 9b       	mov	r11,r12
8000e136:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e13a:	1a d8       	st.w	--sp,r8
8000e13c:	1a d0       	st.w	--sp,r0
8000e13e:	1a d1       	st.w	--sp,r1
8000e140:	04 98       	mov	r8,r2
8000e142:	06 99       	mov	r9,r3
8000e144:	0a 9a       	mov	r10,r5
8000e146:	30 0c       	mov	r12,0
8000e148:	fe b0 f4 c6 	rcall	8000cad4 <mavlink_msg_local_position_ned_send>
8000e14c:	2f dd       	sub	sp,-12
	//dbg_print(", ");
	//dbg_print_num(centralData->position_estimator.localPosition.pos[Y],10);
	//dbg_print(", ");
	//dbg_print_num(centralData->position_estimator.localPosition.pos[Z],10);
	//dbg_print(")\n");
}
8000e14e:	2f fd       	sub	sp,-4
8000e150:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000e154:	80 00       	ld.sh	r0,r0[0x0]
8000e156:	df 72       	popm	r0-r9,r11-r12,lr-pc
8000e158:	65 73       	ld.w	r3,r2[0x5c]
8000e15a:	74 69       	ld.w	r9,r10[0x18]
8000e15c:	58 00       	cp.w	r0,0
8000e15e:	00 00       	add	r0,r0
8000e160:	65 73       	ld.w	r3,r2[0x5c]
8000e162:	74 69       	ld.w	r9,r10[0x18]
8000e164:	59 00       	cp.w	r0,16
8000e166:	00 00       	add	r0,r0
8000e168:	65 73       	ld.w	r3,r2[0x5c]
8000e16a:	74 69       	ld.w	r9,r10[0x18]
8000e16c:	5a 00       	cp.w	r0,-32
8000e16e:	00 00       	add	r0,r0
8000e170:	65 73       	ld.w	r3,r2[0x5c]
8000e172:	74 69       	ld.w	r9,r10[0x18]
8000e174:	56 78       	stdsp	sp[0x19c],r8
8000e176:	00 00       	add	r0,r0
8000e178:	65 73       	ld.w	r3,r2[0x5c]
8000e17a:	74 69       	ld.w	r9,r10[0x18]
8000e17c:	56 79       	stdsp	sp[0x19c],r9
8000e17e:	00 00       	add	r0,r0
8000e180:	65 73       	ld.w	r3,r2[0x5c]
8000e182:	74 69       	ld.w	r9,r10[0x18]
8000e184:	56 7a       	stdsp	sp[0x19c],r10
8000e186:	00 00       	add	r0,r0
8000e188:	65 73       	ld.w	r3,r2[0x5c]
8000e18a:	74 69       	ld.w	r9,r10[0x18]
8000e18c:	62 69       	ld.w	r9,r1[0x18]
8000e18e:	61 69       	ld.w	r9,r0[0x58]
8000e190:	73 58       	ld.w	r8,r9[0x54]
8000e192:	00 00       	add	r0,r0
8000e194:	65 73       	ld.w	r3,r2[0x5c]
8000e196:	74 69       	ld.w	r9,r10[0x18]
8000e198:	62 69       	ld.w	r9,r1[0x18]
8000e19a:	61 69       	ld.w	r9,r0[0x58]
8000e19c:	73 59       	ld.w	r9,r9[0x54]
8000e19e:	00 00       	add	r0,r0
8000e1a0:	65 73       	ld.w	r3,r2[0x5c]
8000e1a2:	74 69       	ld.w	r9,r10[0x18]
8000e1a4:	62 69       	ld.w	r9,r1[0x18]
8000e1a6:	61 69       	ld.w	r9,r0[0x58]
8000e1a8:	73 5a       	ld.w	r10,r9[0x54]
	...

8000e1ac <mavlink_send_kalman_estimator>:

void mavlink_send_kalman_estimator(void)
{
8000e1ac:	eb cd 40 e0 	pushm	r5-r7,lr
8000e1b0:	1a 97       	mov	r7,sp
8000e1b2:	4d d6       	lddpc	r6,8000e324 <mavlink_send_kalman_estimator+0x178>
8000e1b4:	1e 26       	rsub	r6,pc
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiX", centralData->estimation.state[X][POSITION]);
8000e1b6:	ec f8 00 00 	ld.w	r8,r6[0]
8000e1ba:	70 08       	ld.w	r8,r8[0x0]
8000e1bc:	f0 e8 07 a4 	ld.d	r8,r8[1956]
8000e1c0:	10 9a       	mov	r10,r8
8000e1c2:	12 9b       	mov	r11,r9
8000e1c4:	f0 16 00 09 	mcall	r6[36]
8000e1c8:	18 95       	mov	r5,r12
8000e1ca:	f0 16 00 0f 	mcall	r6[60]
8000e1ce:	18 98       	mov	r8,r12
8000e1d0:	0a 99       	mov	r9,r5
8000e1d2:	fe ca 00 7a 	sub	r10,pc,122
8000e1d6:	10 9b       	mov	r11,r8
8000e1d8:	30 0c       	mov	r12,0
8000e1da:	fe b0 f9 09 	rcall	8000d3ec <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiY", centralData->estimation.state[Y][POSITION]);
8000e1de:	ec f8 00 00 	ld.w	r8,r6[0]
8000e1e2:	70 08       	ld.w	r8,r8[0x0]
8000e1e4:	f0 e8 07 bc 	ld.d	r8,r8[1980]
8000e1e8:	10 9a       	mov	r10,r8
8000e1ea:	12 9b       	mov	r11,r9
8000e1ec:	f0 16 00 09 	mcall	r6[36]
8000e1f0:	18 95       	mov	r5,r12
8000e1f2:	f0 16 00 0f 	mcall	r6[60]
8000e1f6:	18 98       	mov	r8,r12
8000e1f8:	0a 99       	mov	r9,r5
8000e1fa:	fe ca 00 9a 	sub	r10,pc,154
8000e1fe:	10 9b       	mov	r11,r8
8000e200:	30 0c       	mov	r12,0
8000e202:	fe b0 f8 f5 	rcall	8000d3ec <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiZ", centralData->estimation.state[Z][POSITION]);
8000e206:	ec f8 00 00 	ld.w	r8,r6[0]
8000e20a:	70 08       	ld.w	r8,r8[0x0]
8000e20c:	f0 e8 07 d4 	ld.d	r8,r8[2004]
8000e210:	10 9a       	mov	r10,r8
8000e212:	12 9b       	mov	r11,r9
8000e214:	f0 16 00 09 	mcall	r6[36]
8000e218:	18 95       	mov	r5,r12
8000e21a:	f0 16 00 0f 	mcall	r6[60]
8000e21e:	18 98       	mov	r8,r12
8000e220:	0a 99       	mov	r9,r5
8000e222:	fe ca 00 ba 	sub	r10,pc,186
8000e226:	10 9b       	mov	r11,r8
8000e228:	30 0c       	mov	r12,0
8000e22a:	fe b0 f8 e1 	rcall	8000d3ec <mavlink_msg_named_value_float_send>
	
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiVx", centralData->estimation.state[X][SPEED]);
8000e22e:	ec f8 00 00 	ld.w	r8,r6[0]
8000e232:	70 08       	ld.w	r8,r8[0x0]
8000e234:	f0 e8 07 ac 	ld.d	r8,r8[1964]
8000e238:	10 9a       	mov	r10,r8
8000e23a:	12 9b       	mov	r11,r9
8000e23c:	f0 16 00 09 	mcall	r6[36]
8000e240:	18 95       	mov	r5,r12
8000e242:	f0 16 00 0f 	mcall	r6[60]
8000e246:	18 98       	mov	r8,r12
8000e248:	0a 99       	mov	r9,r5
8000e24a:	fe ca 00 da 	sub	r10,pc,218
8000e24e:	10 9b       	mov	r11,r8
8000e250:	30 0c       	mov	r12,0
8000e252:	fe b0 f8 cd 	rcall	8000d3ec <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiVy", centralData->estimation.state[Y][SPEED]);
8000e256:	ec f8 00 00 	ld.w	r8,r6[0]
8000e25a:	70 08       	ld.w	r8,r8[0x0]
8000e25c:	f0 e8 07 c4 	ld.d	r8,r8[1988]
8000e260:	10 9a       	mov	r10,r8
8000e262:	12 9b       	mov	r11,r9
8000e264:	f0 16 00 09 	mcall	r6[36]
8000e268:	18 95       	mov	r5,r12
8000e26a:	f0 16 00 0f 	mcall	r6[60]
8000e26e:	18 98       	mov	r8,r12
8000e270:	0a 99       	mov	r9,r5
8000e272:	fe ca 00 fa 	sub	r10,pc,250
8000e276:	10 9b       	mov	r11,r8
8000e278:	30 0c       	mov	r12,0
8000e27a:	fe b0 f8 b9 	rcall	8000d3ec <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiVz", centralData->estimation.state[Z][SPEED]);
8000e27e:	ec f8 00 00 	ld.w	r8,r6[0]
8000e282:	70 08       	ld.w	r8,r8[0x0]
8000e284:	f0 e8 07 dc 	ld.d	r8,r8[2012]
8000e288:	10 9a       	mov	r10,r8
8000e28a:	12 9b       	mov	r11,r9
8000e28c:	f0 16 00 09 	mcall	r6[36]
8000e290:	18 95       	mov	r5,r12
8000e292:	f0 16 00 0f 	mcall	r6[60]
8000e296:	18 98       	mov	r8,r12
8000e298:	0a 99       	mov	r9,r5
8000e29a:	fe ca 01 1a 	sub	r10,pc,282
8000e29e:	10 9b       	mov	r11,r8
8000e2a0:	30 0c       	mov	r12,0
8000e2a2:	fe b0 f8 a5 	rcall	8000d3ec <mavlink_msg_named_value_float_send>
	
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estibiaisX", centralData->estimation.state[X][BIAIS]);
8000e2a6:	ec f8 00 00 	ld.w	r8,r6[0]
8000e2aa:	70 08       	ld.w	r8,r8[0x0]
8000e2ac:	f0 e8 07 b4 	ld.d	r8,r8[1972]
8000e2b0:	10 9a       	mov	r10,r8
8000e2b2:	12 9b       	mov	r11,r9
8000e2b4:	f0 16 00 09 	mcall	r6[36]
8000e2b8:	18 95       	mov	r5,r12
8000e2ba:	f0 16 00 0f 	mcall	r6[60]
8000e2be:	18 98       	mov	r8,r12
8000e2c0:	0a 99       	mov	r9,r5
8000e2c2:	fe ca 01 3a 	sub	r10,pc,314
8000e2c6:	10 9b       	mov	r11,r8
8000e2c8:	30 0c       	mov	r12,0
8000e2ca:	fe b0 f8 91 	rcall	8000d3ec <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estibiaisY", centralData->estimation.state[Y][BIAIS]);
8000e2ce:	ec f8 00 00 	ld.w	r8,r6[0]
8000e2d2:	70 08       	ld.w	r8,r8[0x0]
8000e2d4:	f0 e8 07 cc 	ld.d	r8,r8[1996]
8000e2d8:	10 9a       	mov	r10,r8
8000e2da:	12 9b       	mov	r11,r9
8000e2dc:	f0 16 00 09 	mcall	r6[36]
8000e2e0:	18 95       	mov	r5,r12
8000e2e2:	f0 16 00 0f 	mcall	r6[60]
8000e2e6:	18 98       	mov	r8,r12
8000e2e8:	0a 99       	mov	r9,r5
8000e2ea:	fe ca 01 56 	sub	r10,pc,342
8000e2ee:	10 9b       	mov	r11,r8
8000e2f0:	30 0c       	mov	r12,0
8000e2f2:	fe b0 f8 7d 	rcall	8000d3ec <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estibiaisZ", centralData->estimation.state[Z][BIAIS]);
8000e2f6:	ec f8 00 00 	ld.w	r8,r6[0]
8000e2fa:	70 08       	ld.w	r8,r8[0x0]
8000e2fc:	f0 e8 07 e4 	ld.d	r8,r8[2020]
8000e300:	10 9a       	mov	r10,r8
8000e302:	12 9b       	mov	r11,r9
8000e304:	f0 16 00 09 	mcall	r6[36]
8000e308:	18 95       	mov	r5,r12
8000e30a:	f0 16 00 0f 	mcall	r6[60]
8000e30e:	18 98       	mov	r8,r12
8000e310:	0a 99       	mov	r9,r5
8000e312:	fe ca 01 72 	sub	r10,pc,370
8000e316:	10 9b       	mov	r11,r8
8000e318:	30 0c       	mov	r12,0
8000e31a:	fe b0 f8 69 	rcall	8000d3ec <mavlink_msg_named_value_float_send>
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "acc_bfZ", centralData->position_estimator.vel_bf[Y]);
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "acc_bfZ", centralData->position_estimator.vel_bf[Z]);
	
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiDeltaT", centralData->estimation.delta_t_filter);
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imuDeltaT", centralData->imu1.dt);
}
8000e31e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e322:	00 00       	add	r0,r0
8000e324:	80 00       	ld.sh	r0,r0[0x0]
8000e326:	e0 38 eb cd 	sub	r8,125901

8000e328 <mavlink_send_raw_rc_channels>:
void mavlink_send_raw_rc_channels(void)
{
8000e328:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000e32c:	1a 97       	mov	r7,sp
8000e32e:	20 4d       	sub	sp,16
8000e330:	4b 86       	lddpc	r6,8000e410 <mavlink_send_raw_rc_channels+0xe8>
8000e332:	1e 26       	rsub	r6,pc
	rc_get_channel(3)+1000,
	rc_get_channel(4)+1000,
	rc_get_channel(5)+1000,
	rc_get_channel(6)+1000,
	rc_get_channel(7)+1000,
	rc_check_receivers());
8000e334:	f0 16 00 ae 	mcall	r6[696]
8000e338:	18 98       	mov	r8,r12
8000e33a:	5c 58       	castu.b	r8
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiDeltaT", centralData->estimation.delta_t_filter);
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imuDeltaT", centralData->imu1.dt);
}
void mavlink_send_raw_rc_channels(void)
{
	mavlink_msg_rc_channels_raw_send(MAVLINK_COMM_0,get_millis(),1,
8000e33c:	5c 58       	castu.b	r8
8000e33e:	ef 48 ff f0 	st.w	r7[-16],r8
8000e342:	30 7c       	mov	r12,7
8000e344:	f0 16 00 22 	mcall	r6[136]
8000e348:	18 98       	mov	r8,r12
8000e34a:	f0 c8 fc 18 	sub	r8,r8,-1000
8000e34e:	5c 88       	casts.h	r8
8000e350:	5c 78       	castu.h	r8
8000e352:	ef 48 ff f4 	st.w	r7[-12],r8
8000e356:	30 6c       	mov	r12,6
8000e358:	f0 16 00 22 	mcall	r6[136]
8000e35c:	18 98       	mov	r8,r12
8000e35e:	f0 c8 fc 18 	sub	r8,r8,-1000
8000e362:	5c 88       	casts.h	r8
8000e364:	5c 78       	castu.h	r8
8000e366:	ef 48 ff f8 	st.w	r7[-8],r8
8000e36a:	30 5c       	mov	r12,5
8000e36c:	f0 16 00 22 	mcall	r6[136]
8000e370:	18 98       	mov	r8,r12
8000e372:	f0 c8 fc 18 	sub	r8,r8,-1000
8000e376:	5c 88       	casts.h	r8
8000e378:	5c 78       	castu.h	r8
8000e37a:	ef 48 ff fc 	st.w	r7[-4],r8
8000e37e:	30 4c       	mov	r12,4
8000e380:	f0 16 00 22 	mcall	r6[136]
8000e384:	18 98       	mov	r8,r12
8000e386:	f0 c8 fc 18 	sub	r8,r8,-1000
8000e38a:	5c 88       	casts.h	r8
8000e38c:	e1 d8 c0 10 	bfextu	r0,r8,0x0,0x10
8000e390:	30 3c       	mov	r12,3
8000e392:	f0 16 00 22 	mcall	r6[136]
8000e396:	18 98       	mov	r8,r12
8000e398:	f0 c8 fc 18 	sub	r8,r8,-1000
8000e39c:	5c 88       	casts.h	r8
8000e39e:	e3 d8 c0 10 	bfextu	r1,r8,0x0,0x10
8000e3a2:	30 2c       	mov	r12,2
8000e3a4:	f0 16 00 22 	mcall	r6[136]
8000e3a8:	18 98       	mov	r8,r12
8000e3aa:	f0 c8 fc 18 	sub	r8,r8,-1000
8000e3ae:	5c 88       	casts.h	r8
8000e3b0:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
8000e3b4:	30 1c       	mov	r12,1
8000e3b6:	f0 16 00 22 	mcall	r6[136]
8000e3ba:	18 98       	mov	r8,r12
8000e3bc:	f0 c8 fc 18 	sub	r8,r8,-1000
8000e3c0:	5c 88       	casts.h	r8
8000e3c2:	e7 d8 c0 10 	bfextu	r3,r8,0x0,0x10
8000e3c6:	30 0c       	mov	r12,0
8000e3c8:	f0 16 00 22 	mcall	r6[136]
8000e3cc:	18 98       	mov	r8,r12
8000e3ce:	f0 c8 fc 18 	sub	r8,r8,-1000
8000e3d2:	5c 88       	casts.h	r8
8000e3d4:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000e3d8:	f0 16 00 0f 	mcall	r6[60]
8000e3dc:	18 9b       	mov	r11,r12
8000e3de:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e3e2:	1a d8       	st.w	--sp,r8
8000e3e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e3e8:	1a d8       	st.w	--sp,r8
8000e3ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e3ee:	1a d8       	st.w	--sp,r8
8000e3f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e3f4:	1a d8       	st.w	--sp,r8
8000e3f6:	1a d0       	st.w	--sp,r0
8000e3f8:	1a d1       	st.w	--sp,r1
8000e3fa:	1a d2       	st.w	--sp,r2
8000e3fc:	06 98       	mov	r8,r3
8000e3fe:	0a 99       	mov	r9,r5
8000e400:	30 1a       	mov	r10,1
8000e402:	30 0c       	mov	r12,0
8000e404:	fe b0 f4 d8 	rcall	8000cdb4 <mavlink_msg_rc_channels_raw_send>
8000e408:	2f 9d       	sub	sp,-28
	rc_get_channel(4)+1000,
	rc_get_channel(5)+1000,
	rc_get_channel(6)+1000,
	rc_get_channel(7)+1000,
	rc_check_receivers());
}
8000e40a:	2f cd       	sub	sp,-16
8000e40c:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000e410:	80 00       	ld.sh	r0,r0[0x0]
8000e412:	e1 b6       	*unknown*
8000e414:	43 6f       	lddsp	pc,sp[0xd8]
8000e416:	6c 6c       	ld.w	r12,r6[0x18]
8000e418:	5f 41       	srge	r1
8000e41a:	76 6f       	ld.w	pc,r11[0x18]
8000e41c:	69 64       	ld.w	r4,r4[0x58]
8000e41e:	61 6e       	ld.w	lr,r0[0x58]
8000e420:	63 65       	ld.w	r5,r1[0x58]
	...

8000e424 <mavlink_send_scaled_rc_channels>:

void mavlink_send_scaled_rc_channels(void)
{
8000e424:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000e428:	1a 97       	mov	r7,sp
8000e42a:	20 4d       	sub	sp,16
8000e42c:	fe f6 02 94 	ld.w	r6,pc[660]
8000e430:	1e 26       	rsub	r6,pc
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(7) * 1000.0 * RC_SCALEFACTOR,
	rc_check_receivers());
8000e432:	f0 16 00 ae 	mcall	r6[696]
8000e436:	18 98       	mov	r8,r12
8000e438:	5c 58       	castu.b	r8
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000e43a:	5c 58       	castu.b	r8
8000e43c:	ef 48 ff f0 	st.w	r7[-16],r8
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(7) * 1000.0 * RC_SCALEFACTOR,
8000e440:	30 7c       	mov	r12,7
8000e442:	f0 16 00 22 	mcall	r6[136]
8000e446:	18 98       	mov	r8,r12
8000e448:	10 9c       	mov	r12,r8
8000e44a:	f0 16 00 1a 	mcall	r6[104]
8000e44e:	30 08       	mov	r8,0
8000e450:	e0 69 40 00 	mov	r9,16384
8000e454:	ea 19 40 8f 	orh	r9,0x408f
8000e458:	f0 16 00 03 	mcall	r6[12]
8000e45c:	14 98       	mov	r8,r10
8000e45e:	16 99       	mov	r9,r11
8000e460:	10 9a       	mov	r10,r8
8000e462:	12 9b       	mov	r11,r9
8000e464:	30 08       	mov	r8,0
8000e466:	e0 69 e0 00 	mov	r9,57344
8000e46a:	ea 19 40 75 	orh	r9,0x4075
8000e46e:	f0 16 00 0c 	mcall	r6[48]
8000e472:	14 98       	mov	r8,r10
8000e474:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000e476:	10 9a       	mov	r10,r8
8000e478:	12 9b       	mov	r11,r9
8000e47a:	f0 16 00 14 	mcall	r6[80]
8000e47e:	18 98       	mov	r8,r12
8000e480:	5c 88       	casts.h	r8
8000e482:	ef 48 ff f4 	st.w	r7[-12],r8
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
8000e486:	30 6c       	mov	r12,6
8000e488:	f0 16 00 22 	mcall	r6[136]
8000e48c:	18 98       	mov	r8,r12
8000e48e:	10 9c       	mov	r12,r8
8000e490:	f0 16 00 1a 	mcall	r6[104]
8000e494:	30 08       	mov	r8,0
8000e496:	e0 69 40 00 	mov	r9,16384
8000e49a:	ea 19 40 8f 	orh	r9,0x408f
8000e49e:	f0 16 00 03 	mcall	r6[12]
8000e4a2:	14 98       	mov	r8,r10
8000e4a4:	16 99       	mov	r9,r11
8000e4a6:	10 9a       	mov	r10,r8
8000e4a8:	12 9b       	mov	r11,r9
8000e4aa:	30 08       	mov	r8,0
8000e4ac:	e0 69 e0 00 	mov	r9,57344
8000e4b0:	ea 19 40 75 	orh	r9,0x4075
8000e4b4:	f0 16 00 0c 	mcall	r6[48]
8000e4b8:	14 98       	mov	r8,r10
8000e4ba:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000e4bc:	10 9a       	mov	r10,r8
8000e4be:	12 9b       	mov	r11,r9
8000e4c0:	f0 16 00 14 	mcall	r6[80]
8000e4c4:	18 98       	mov	r8,r12
8000e4c6:	5c 88       	casts.h	r8
8000e4c8:	ef 48 ff f8 	st.w	r7[-8],r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
8000e4cc:	30 5c       	mov	r12,5
8000e4ce:	f0 16 00 22 	mcall	r6[136]
8000e4d2:	18 98       	mov	r8,r12
8000e4d4:	10 9c       	mov	r12,r8
8000e4d6:	f0 16 00 1a 	mcall	r6[104]
8000e4da:	30 08       	mov	r8,0
8000e4dc:	e0 69 40 00 	mov	r9,16384
8000e4e0:	ea 19 40 8f 	orh	r9,0x408f
8000e4e4:	f0 16 00 03 	mcall	r6[12]
8000e4e8:	14 98       	mov	r8,r10
8000e4ea:	16 99       	mov	r9,r11
8000e4ec:	10 9a       	mov	r10,r8
8000e4ee:	12 9b       	mov	r11,r9
8000e4f0:	30 08       	mov	r8,0
8000e4f2:	e0 69 e0 00 	mov	r9,57344
8000e4f6:	ea 19 40 75 	orh	r9,0x4075
8000e4fa:	f0 16 00 0c 	mcall	r6[48]
8000e4fe:	14 98       	mov	r8,r10
8000e500:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000e502:	10 9a       	mov	r10,r8
8000e504:	12 9b       	mov	r11,r9
8000e506:	f0 16 00 14 	mcall	r6[80]
8000e50a:	18 98       	mov	r8,r12
8000e50c:	5c 88       	casts.h	r8
8000e50e:	ef 48 ff fc 	st.w	r7[-4],r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
8000e512:	30 4c       	mov	r12,4
8000e514:	f0 16 00 22 	mcall	r6[136]
8000e518:	18 98       	mov	r8,r12
8000e51a:	10 9c       	mov	r12,r8
8000e51c:	f0 16 00 1a 	mcall	r6[104]
8000e520:	30 08       	mov	r8,0
8000e522:	e0 69 40 00 	mov	r9,16384
8000e526:	ea 19 40 8f 	orh	r9,0x408f
8000e52a:	f0 16 00 03 	mcall	r6[12]
8000e52e:	14 98       	mov	r8,r10
8000e530:	16 99       	mov	r9,r11
8000e532:	10 9a       	mov	r10,r8
8000e534:	12 9b       	mov	r11,r9
8000e536:	30 08       	mov	r8,0
8000e538:	e0 69 e0 00 	mov	r9,57344
8000e53c:	ea 19 40 75 	orh	r9,0x4075
8000e540:	f0 16 00 0c 	mcall	r6[48]
8000e544:	14 98       	mov	r8,r10
8000e546:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000e548:	10 9a       	mov	r10,r8
8000e54a:	12 9b       	mov	r11,r9
8000e54c:	f0 16 00 14 	mcall	r6[80]
8000e550:	18 98       	mov	r8,r12
8000e552:	5c 88       	casts.h	r8
8000e554:	10 90       	mov	r0,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
8000e556:	30 3c       	mov	r12,3
8000e558:	f0 16 00 22 	mcall	r6[136]
8000e55c:	18 98       	mov	r8,r12
8000e55e:	10 9c       	mov	r12,r8
8000e560:	f0 16 00 1a 	mcall	r6[104]
8000e564:	30 08       	mov	r8,0
8000e566:	e0 69 40 00 	mov	r9,16384
8000e56a:	ea 19 40 8f 	orh	r9,0x408f
8000e56e:	f0 16 00 03 	mcall	r6[12]
8000e572:	14 98       	mov	r8,r10
8000e574:	16 99       	mov	r9,r11
8000e576:	10 9a       	mov	r10,r8
8000e578:	12 9b       	mov	r11,r9
8000e57a:	30 08       	mov	r8,0
8000e57c:	e0 69 e0 00 	mov	r9,57344
8000e580:	ea 19 40 75 	orh	r9,0x4075
8000e584:	f0 16 00 0c 	mcall	r6[48]
8000e588:	14 98       	mov	r8,r10
8000e58a:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000e58c:	10 9a       	mov	r10,r8
8000e58e:	12 9b       	mov	r11,r9
8000e590:	f0 16 00 14 	mcall	r6[80]
8000e594:	18 98       	mov	r8,r12
8000e596:	5c 88       	casts.h	r8
8000e598:	10 91       	mov	r1,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
8000e59a:	30 2c       	mov	r12,2
8000e59c:	f0 16 00 22 	mcall	r6[136]
8000e5a0:	18 98       	mov	r8,r12
8000e5a2:	10 9c       	mov	r12,r8
8000e5a4:	f0 16 00 1a 	mcall	r6[104]
8000e5a8:	30 08       	mov	r8,0
8000e5aa:	e0 69 40 00 	mov	r9,16384
8000e5ae:	ea 19 40 8f 	orh	r9,0x408f
8000e5b2:	f0 16 00 03 	mcall	r6[12]
8000e5b6:	14 98       	mov	r8,r10
8000e5b8:	16 99       	mov	r9,r11
8000e5ba:	10 9a       	mov	r10,r8
8000e5bc:	12 9b       	mov	r11,r9
8000e5be:	30 08       	mov	r8,0
8000e5c0:	e0 69 e0 00 	mov	r9,57344
8000e5c4:	ea 19 40 75 	orh	r9,0x4075
8000e5c8:	f0 16 00 0c 	mcall	r6[48]
8000e5cc:	14 98       	mov	r8,r10
8000e5ce:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000e5d0:	10 9a       	mov	r10,r8
8000e5d2:	12 9b       	mov	r11,r9
8000e5d4:	f0 16 00 14 	mcall	r6[80]
8000e5d8:	18 98       	mov	r8,r12
8000e5da:	5c 88       	casts.h	r8
8000e5dc:	10 92       	mov	r2,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
8000e5de:	30 1c       	mov	r12,1
8000e5e0:	f0 16 00 22 	mcall	r6[136]
8000e5e4:	18 98       	mov	r8,r12
8000e5e6:	10 9c       	mov	r12,r8
8000e5e8:	f0 16 00 1a 	mcall	r6[104]
8000e5ec:	30 08       	mov	r8,0
8000e5ee:	e0 69 40 00 	mov	r9,16384
8000e5f2:	ea 19 40 8f 	orh	r9,0x408f
8000e5f6:	f0 16 00 03 	mcall	r6[12]
8000e5fa:	14 98       	mov	r8,r10
8000e5fc:	16 99       	mov	r9,r11
8000e5fe:	10 9a       	mov	r10,r8
8000e600:	12 9b       	mov	r11,r9
8000e602:	30 08       	mov	r8,0
8000e604:	e0 69 e0 00 	mov	r9,57344
8000e608:	ea 19 40 75 	orh	r9,0x4075
8000e60c:	f0 16 00 0c 	mcall	r6[48]
8000e610:	14 98       	mov	r8,r10
8000e612:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000e614:	10 9a       	mov	r10,r8
8000e616:	12 9b       	mov	r11,r9
8000e618:	f0 16 00 14 	mcall	r6[80]
8000e61c:	18 98       	mov	r8,r12
8000e61e:	5c 88       	casts.h	r8
8000e620:	10 93       	mov	r3,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
8000e622:	30 0c       	mov	r12,0
8000e624:	f0 16 00 22 	mcall	r6[136]
8000e628:	18 98       	mov	r8,r12
8000e62a:	10 9c       	mov	r12,r8
8000e62c:	f0 16 00 1a 	mcall	r6[104]
8000e630:	30 08       	mov	r8,0
8000e632:	e0 69 40 00 	mov	r9,16384
8000e636:	ea 19 40 8f 	orh	r9,0x408f
8000e63a:	f0 16 00 03 	mcall	r6[12]
8000e63e:	14 98       	mov	r8,r10
8000e640:	16 99       	mov	r9,r11
8000e642:	10 9a       	mov	r10,r8
8000e644:	12 9b       	mov	r11,r9
8000e646:	30 08       	mov	r8,0
8000e648:	e0 69 e0 00 	mov	r9,57344
8000e64c:	ea 19 40 75 	orh	r9,0x4075
8000e650:	f0 16 00 0c 	mcall	r6[48]
8000e654:	14 98       	mov	r8,r10
8000e656:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000e658:	10 9a       	mov	r10,r8
8000e65a:	12 9b       	mov	r11,r9
8000e65c:	f0 16 00 14 	mcall	r6[80]
8000e660:	18 98       	mov	r8,r12
8000e662:	5c 88       	casts.h	r8
8000e664:	10 95       	mov	r5,r8
8000e666:	f0 16 00 0f 	mcall	r6[60]
8000e66a:	18 9b       	mov	r11,r12
8000e66c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e670:	1a d8       	st.w	--sp,r8
8000e672:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e676:	1a d8       	st.w	--sp,r8
8000e678:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e67c:	1a d8       	st.w	--sp,r8
8000e67e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e682:	1a d8       	st.w	--sp,r8
8000e684:	1a d0       	st.w	--sp,r0
8000e686:	1a d1       	st.w	--sp,r1
8000e688:	1a d2       	st.w	--sp,r2
8000e68a:	06 98       	mov	r8,r3
8000e68c:	0a 99       	mov	r9,r5
8000e68e:	30 1a       	mov	r10,1
8000e690:	30 0c       	mov	r12,0
8000e692:	fe b0 f2 fb 	rcall	8000cc88 <mavlink_msg_rc_channels_scaled_send>
8000e696:	2f 9d       	sub	sp,-28
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(7) * 1000.0 * RC_SCALEFACTOR,
	rc_check_receivers());
	
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0,get_millis(),"Coll_Avoidance",centralData->collision_avoidance);
8000e698:	ec f8 00 00 	ld.w	r8,r6[0]
8000e69c:	70 08       	ld.w	r8,r8[0x0]
8000e69e:	f1 38 0d 04 	ld.ub	r8,r8[3332]
8000e6a2:	10 95       	mov	r5,r8
8000e6a4:	f0 16 00 0f 	mcall	r6[60]
8000e6a8:	18 98       	mov	r8,r12
8000e6aa:	0a 99       	mov	r9,r5
8000e6ac:	fe ca 02 98 	sub	r10,pc,664
8000e6b0:	10 9b       	mov	r11,r8
8000e6b2:	30 0c       	mov	r12,0
8000e6b4:	fe b0 f6 d4 	rcall	8000d45c <mavlink_msg_named_value_int_send>
}
8000e6b8:	2f cd       	sub	sp,-16
8000e6ba:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000e6be:	00 00       	add	r0,r0
8000e6c0:	80 00       	ld.sh	r0,r0[0x0]
8000e6c2:	e2 b4       	*unknown*
8000e6c4:	72 6f       	ld.w	pc,r9[0x18]
8000e6c6:	6c 6c       	ld.w	r12,r6[0x18]
8000e6c8:	74 6f       	ld.w	pc,r10[0x18]
8000e6ca:	72 71       	ld.w	r1,r9[0x1c]
8000e6cc:	75 65       	ld.w	r5,r10[0x58]
8000e6ce:	00 00       	add	r0,r0
8000e6d0:	70 69       	ld.w	r9,r8[0x18]
8000e6d2:	74 63       	ld.w	r3,r10[0x18]
8000e6d4:	68 74       	ld.w	r4,r4[0x1c]
8000e6d6:	6f 72       	ld.w	r2,r7[0x5c]
8000e6d8:	71 75       	ld.w	r5,r8[0x5c]
8000e6da:	65 00       	ld.w	r0,r2[0x40]
8000e6dc:	79 61       	ld.w	r1,r12[0x58]
8000e6de:	77 74       	ld.w	r4,r11[0x5c]
8000e6e0:	6f 72       	ld.w	r2,r7[0x5c]
8000e6e2:	71 75       	ld.w	r5,r8[0x5c]
8000e6e4:	65 00       	ld.w	r0,r2[0x40]
8000e6e6:	00 00       	add	r0,r0
8000e6e8:	74 68       	ld.w	r8,r10[0x18]
8000e6ea:	72 75       	ld.w	r5,r9[0x1c]
8000e6ec:	73 74       	ld.w	r4,r9[0x5c]
8000e6ee:	00 00       	add	r0,r0
8000e6f0:	72 70       	ld.w	r0,r9[0x1c]
8000e6f2:	6d 31       	ld.w	r1,r6[0x4c]
8000e6f4:	00 00       	add	r0,r0
8000e6f6:	00 00       	add	r0,r0
8000e6f8:	72 70       	ld.w	r0,r9[0x1c]
8000e6fa:	6d 32       	ld.w	r2,r6[0x4c]
8000e6fc:	00 00       	add	r0,r0
8000e6fe:	00 00       	add	r0,r0
8000e700:	72 70       	ld.w	r0,r9[0x1c]
8000e702:	6d 33       	ld.w	r3,r6[0x4c]
8000e704:	00 00       	add	r0,r0
8000e706:	00 00       	add	r0,r0
8000e708:	72 70       	ld.w	r0,r9[0x1c]
8000e70a:	6d 34       	ld.w	r4,r6[0x4c]
	...

8000e70e <mavlink_send_simulation>:

void mavlink_send_simulation(void) {
8000e70e:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000e712:	1a 97       	mov	r7,sp
8000e714:	21 6d       	sub	sp,88
8000e716:	fe f6 03 66 	ld.w	r6,pc[870]
8000e71a:	1e 26       	rsub	r6,pc
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
8000e71c:	ec f8 00 00 	ld.w	r8,r6[0]
8000e720:	70 09       	ld.w	r9,r8[0x0]
8000e722:	ee ca 00 0c 	sub	r10,r7,12
8000e726:	20 4d       	sub	sp,16
8000e728:	1a 98       	mov	r8,sp
8000e72a:	f2 c9 f7 c8 	sub	r9,r9,-2104
8000e72e:	20 08       	sub	r8,0
8000e730:	20 09       	sub	r9,0
8000e732:	72 0b       	ld.w	r11,r9[0x0]
8000e734:	91 0b       	st.w	r8[0x0],r11
8000e736:	72 1b       	ld.w	r11,r9[0x4]
8000e738:	91 1b       	st.w	r8[0x4],r11
8000e73a:	72 2b       	ld.w	r11,r9[0x8]
8000e73c:	91 2b       	st.w	r8[0x8],r11
8000e73e:	72 39       	ld.w	r9,r9[0xc]
8000e740:	91 39       	st.w	r8[0xc],r9
8000e742:	14 9c       	mov	r12,r10
8000e744:	f0 16 00 72 	mcall	r6[456]
8000e748:	2f cd       	sub	sp,-16
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
8000e74a:	ec f8 00 00 	ld.w	r8,r6[0]
8000e74e:	70 08       	ld.w	r8,r8[0x0]
8000e750:	ee cc 00 28 	sub	r12,r7,40
8000e754:	20 cd       	sub	sp,48
8000e756:	1a 99       	mov	r9,sp
8000e758:	12 9b       	mov	r11,r9
8000e75a:	f0 ca f6 fc 	sub	r10,r8,-2308
8000e75e:	f6 c8 00 00 	sub	r8,r11,0
8000e762:	f4 c9 00 00 	sub	r9,r10,0
8000e766:	72 0e       	ld.w	lr,r9[0x0]
8000e768:	91 0e       	st.w	r8[0x0],lr
8000e76a:	72 1e       	ld.w	lr,r9[0x4]
8000e76c:	91 1e       	st.w	r8[0x4],lr
8000e76e:	72 2e       	ld.w	lr,r9[0x8]
8000e770:	91 2e       	st.w	r8[0x8],lr
8000e772:	72 39       	ld.w	r9,r9[0xc]
8000e774:	91 39       	st.w	r8[0xc],r9
8000e776:	f6 c8 ff f0 	sub	r8,r11,-16
8000e77a:	f4 c9 ff f0 	sub	r9,r10,-16
8000e77e:	72 0e       	ld.w	lr,r9[0x0]
8000e780:	91 0e       	st.w	r8[0x0],lr
8000e782:	72 1e       	ld.w	lr,r9[0x4]
8000e784:	91 1e       	st.w	r8[0x4],lr
8000e786:	72 2e       	ld.w	lr,r9[0x8]
8000e788:	91 2e       	st.w	r8[0x8],lr
8000e78a:	72 39       	ld.w	r9,r9[0xc]
8000e78c:	91 39       	st.w	r8[0xc],r9
8000e78e:	f6 c8 ff e0 	sub	r8,r11,-32
8000e792:	f4 c9 ff e0 	sub	r9,r10,-32
8000e796:	72 0a       	ld.w	r10,r9[0x0]
8000e798:	91 0a       	st.w	r8[0x0],r10
8000e79a:	72 1a       	ld.w	r10,r9[0x4]
8000e79c:	91 1a       	st.w	r8[0x4],r10
8000e79e:	72 2a       	ld.w	r10,r9[0x8]
8000e7a0:	91 2a       	st.w	r8[0x8],r10
8000e7a2:	72 39       	ld.w	r9,r9[0xc]
8000e7a4:	91 39       	st.w	r8[0xc],r9
8000e7a6:	f0 16 00 8e 	mcall	r6[568]
8000e7aa:	2f 4d       	sub	sp,-48
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
8000e7ac:	ec f8 00 00 	ld.w	r8,r6[0]
8000e7b0:	70 08       	ld.w	r8,r8[0x0]
8000e7b2:	f0 f9 08 10 	ld.w	r9,r8[2064]
8000e7b6:	fc 18 44 7a 	movh	r8,0x447a
8000e7ba:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000e7be:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e7c2:	5c 88       	casts.h	r8
8000e7c4:	ef 48 ff a8 	st.w	r7[-88],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
8000e7c8:	ec f8 00 00 	ld.w	r8,r6[0]
8000e7cc:	70 08       	ld.w	r8,r8[0x0]
8000e7ce:	f0 f9 08 0c 	ld.w	r9,r8[2060]
8000e7d2:	fc 18 44 7a 	movh	r8,0x447a
8000e7d6:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000e7da:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e7de:	5c 88       	casts.h	r8
8000e7e0:	ef 48 ff ac 	st.w	r7[-84],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
8000e7e4:	ec f8 00 00 	ld.w	r8,r6[0]
8000e7e8:	70 08       	ld.w	r8,r8[0x0]
8000e7ea:	f0 f9 08 08 	ld.w	r9,r8[2056]
8000e7ee:	fc 18 44 7a 	movh	r8,0x447a
8000e7f2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000e7f6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e7fa:	5c 88       	casts.h	r8
8000e7fc:	ef 48 ff b0 	st.w	r7[-80],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
8000e800:	ec f8 00 00 	ld.w	r8,r6[0]
8000e804:	70 08       	ld.w	r8,r8[0x0]
8000e806:	f0 f9 08 28 	ld.w	r9,r8[2088]
8000e80a:	fc 18 42 c8 	movh	r8,0x42c8
8000e80e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000e812:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e816:	5c 88       	casts.h	r8
8000e818:	ef 48 ff b4 	st.w	r7[-76],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
8000e81c:	ec f8 00 00 	ld.w	r8,r6[0]
8000e820:	70 08       	ld.w	r8,r8[0x0]
8000e822:	f0 f9 08 24 	ld.w	r9,r8[2084]
8000e826:	fc 18 42 c8 	movh	r8,0x42c8
8000e82a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000e82e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e832:	5c 88       	casts.h	r8
8000e834:	ef 48 ff b8 	st.w	r7[-72],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
8000e838:	ec f8 00 00 	ld.w	r8,r6[0]
8000e83c:	70 08       	ld.w	r8,r8[0x0]
8000e83e:	f0 f9 08 20 	ld.w	r9,r8[2080]
8000e842:	fc 18 42 c8 	movh	r8,0x42c8
8000e846:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000e84a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e84e:	5c 88       	casts.h	r8
8000e850:	ef 48 ff bc 	st.w	r7[-68],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
8000e854:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000e858:	10 9c       	mov	r12,r8
8000e85a:	f0 16 00 02 	mcall	r6[8]
8000e85e:	30 08       	mov	r8,0
8000e860:	e0 69 40 00 	mov	r9,16384
8000e864:	ea 19 40 8f 	orh	r9,0x408f
8000e868:	f0 16 00 03 	mcall	r6[12]
8000e86c:	14 98       	mov	r8,r10
8000e86e:	16 99       	mov	r9,r11
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000e870:	10 9a       	mov	r10,r8
8000e872:	12 9b       	mov	r11,r9
8000e874:	f0 16 00 14 	mcall	r6[80]
8000e878:	ef 4c ff c0 	st.w	r7[-64],r12
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
8000e87c:	ee ea ff d8 	ld.d	r10,r7[-40]
8000e880:	30 08       	mov	r8,0
8000e882:	e0 69 12 d0 	mov	r9,4816
8000e886:	ea 19 41 63 	orh	r9,0x4163
8000e88a:	f0 16 00 03 	mcall	r6[12]
8000e88e:	14 98       	mov	r8,r10
8000e890:	16 99       	mov	r9,r11
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000e892:	10 9a       	mov	r10,r8
8000e894:	12 9b       	mov	r11,r9
8000e896:	f0 16 00 14 	mcall	r6[80]
8000e89a:	ef 4c ff c4 	st.w	r7[-60],r12
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
8000e89e:	ee ea ff e0 	ld.d	r10,r7[-32]
8000e8a2:	30 08       	mov	r8,0
8000e8a4:	e0 69 12 d0 	mov	r9,4816
8000e8a8:	ea 19 41 63 	orh	r9,0x4163
8000e8ac:	f0 16 00 03 	mcall	r6[12]
8000e8b0:	14 98       	mov	r8,r10
8000e8b2:	16 99       	mov	r9,r11
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000e8b4:	10 9a       	mov	r10,r8
8000e8b6:	12 9b       	mov	r11,r9
8000e8b8:	f0 16 00 14 	mcall	r6[80]
8000e8bc:	ef 4c ff c8 	st.w	r7[-56],r12
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
8000e8c0:	ec f8 00 00 	ld.w	r8,r6[0]
8000e8c4:	70 08       	ld.w	r8,r8[0x0]
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000e8c6:	f0 f8 08 04 	ld.w	r8,r8[2052]
8000e8ca:	ef 48 ff cc 	st.w	r7[-52],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
8000e8ce:	ec f8 00 00 	ld.w	r8,r6[0]
8000e8d2:	70 08       	ld.w	r8,r8[0x0]
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000e8d4:	f0 f8 08 00 	ld.w	r8,r8[2048]
8000e8d8:	ef 48 ff d0 	st.w	r7[-48],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
8000e8dc:	ec f8 00 00 	ld.w	r8,r6[0]
8000e8e0:	70 08       	ld.w	r8,r8[0x0]
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000e8e2:	f0 f8 07 fc 	ld.w	r8,r8[2044]
8000e8e6:	ef 48 ff d4 	st.w	r7[-44],r8
8000e8ea:	ee f0 ff fc 	ld.w	r0,r7[-4]
8000e8ee:	ee f1 ff f8 	ld.w	r1,r7[-8]
8000e8f2:	ee f5 ff f4 	ld.w	r5,r7[-12]
8000e8f6:	f0 16 00 29 	mcall	r6[164]
8000e8fa:	18 98       	mov	r8,r12
8000e8fc:	10 92       	mov	r2,r8
8000e8fe:	30 03       	mov	r3,0
8000e900:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000e904:	1a d8       	st.w	--sp,r8
8000e906:	ee f8 ff ac 	ld.w	r8,r7[-84]
8000e90a:	1a d8       	st.w	--sp,r8
8000e90c:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000e910:	1a d8       	st.w	--sp,r8
8000e912:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000e916:	1a d8       	st.w	--sp,r8
8000e918:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000e91c:	1a d8       	st.w	--sp,r8
8000e91e:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000e922:	1a d8       	st.w	--sp,r8
8000e924:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000e928:	1a d8       	st.w	--sp,r8
8000e92a:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000e92e:	1a d8       	st.w	--sp,r8
8000e930:	ee f8 ff c8 	ld.w	r8,r7[-56]
8000e934:	1a d8       	st.w	--sp,r8
8000e936:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000e93a:	1a d8       	st.w	--sp,r8
8000e93c:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000e940:	1a d8       	st.w	--sp,r8
8000e942:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000e946:	1a d8       	st.w	--sp,r8
8000e948:	1a d0       	st.w	--sp,r0
8000e94a:	02 98       	mov	r8,r1
8000e94c:	0a 99       	mov	r9,r5
8000e94e:	04 9a       	mov	r10,r2
8000e950:	06 9b       	mov	r11,r3
8000e952:	30 0c       	mov	r12,0
8000e954:	fe b0 f4 8c 	rcall	8000d26c <mavlink_msg_hil_state_send>
8000e958:	2f 3d       	sub	sp,-52
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
	);
	flush_mavlink();
8000e95a:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0, get_millis(), "rolltorque", centralData->sim_model.torques_bf[0]);flush_mavlink();
8000e95e:	ec f8 00 00 	ld.w	r8,r6[0]
8000e962:	70 08       	ld.w	r8,r8[0x0]
8000e964:	f0 f8 07 f0 	ld.w	r8,r8[2032]
8000e968:	e5 ab 05 08 	cop	cp0,cr5,cr0,cr8,0x56
8000e96c:	f0 16 00 0f 	mcall	r6[60]
8000e970:	18 98       	mov	r8,r12
8000e972:	0a 99       	mov	r9,r5
8000e974:	fe ca 02 b0 	sub	r10,pc,688
8000e978:	10 9b       	mov	r11,r8
8000e97a:	30 0c       	mov	r12,0
8000e97c:	fe b0 f5 70 	rcall	8000d45c <mavlink_msg_named_value_int_send>
8000e980:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0, get_millis(), "pitchtorque", centralData->sim_model.torques_bf[1]);flush_mavlink();
8000e984:	ec f8 00 00 	ld.w	r8,r6[0]
8000e988:	70 08       	ld.w	r8,r8[0x0]
8000e98a:	f0 f8 07 f4 	ld.w	r8,r8[2036]
8000e98e:	e5 ab 05 08 	cop	cp0,cr5,cr0,cr8,0x56
8000e992:	f0 16 00 0f 	mcall	r6[60]
8000e996:	18 98       	mov	r8,r12
8000e998:	0a 99       	mov	r9,r5
8000e99a:	fe ca 02 ca 	sub	r10,pc,714
8000e99e:	10 9b       	mov	r11,r8
8000e9a0:	30 0c       	mov	r12,0
8000e9a2:	fe b0 f5 5d 	rcall	8000d45c <mavlink_msg_named_value_int_send>
8000e9a6:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0, get_millis(), "yawtorque", centralData->sim_model.torques_bf[2]);flush_mavlink();
8000e9aa:	ec f8 00 00 	ld.w	r8,r6[0]
8000e9ae:	70 08       	ld.w	r8,r8[0x0]
8000e9b0:	f0 f8 07 f8 	ld.w	r8,r8[2040]
8000e9b4:	e5 ab 05 08 	cop	cp0,cr5,cr0,cr8,0x56
8000e9b8:	f0 16 00 0f 	mcall	r6[60]
8000e9bc:	18 98       	mov	r8,r12
8000e9be:	0a 99       	mov	r9,r5
8000e9c0:	fe ca 02 e4 	sub	r10,pc,740
8000e9c4:	10 9b       	mov	r11,r8
8000e9c6:	30 0c       	mov	r12,0
8000e9c8:	fe b0 f5 4a 	rcall	8000d45c <mavlink_msg_named_value_int_send>
8000e9cc:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "thrust", centralData->sim_model.lin_forces_bf[2]);flush_mavlink();
8000e9d0:	ec f8 00 00 	ld.w	r8,r6[0]
8000e9d4:	70 08       	ld.w	r8,r8[0x0]
8000e9d6:	f0 f5 08 10 	ld.w	r5,r8[2064]
8000e9da:	f0 16 00 0f 	mcall	r6[60]
8000e9de:	18 98       	mov	r8,r12
8000e9e0:	0a 99       	mov	r9,r5
8000e9e2:	fe ca 02 fa 	sub	r10,pc,762
8000e9e6:	10 9b       	mov	r11,r8
8000e9e8:	30 0c       	mov	r12,0
8000e9ea:	fe b0 f5 01 	rcall	8000d3ec <mavlink_msg_named_value_float_send>
8000e9ee:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm1", centralData->sim_model.rotorspeeds[0]);flush_mavlink();
8000e9f2:	ec f8 00 00 	ld.w	r8,r6[0]
8000e9f6:	70 08       	ld.w	r8,r8[0x0]
8000e9f8:	f0 f5 09 34 	ld.w	r5,r8[2356]
8000e9fc:	f0 16 00 0f 	mcall	r6[60]
8000ea00:	18 98       	mov	r8,r12
8000ea02:	0a 99       	mov	r9,r5
8000ea04:	fe ca 03 14 	sub	r10,pc,788
8000ea08:	10 9b       	mov	r11,r8
8000ea0a:	30 0c       	mov	r12,0
8000ea0c:	fe b0 f4 f0 	rcall	8000d3ec <mavlink_msg_named_value_float_send>
8000ea10:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm2", centralData->sim_model.rotorspeeds[1]);flush_mavlink();
8000ea14:	ec f8 00 00 	ld.w	r8,r6[0]
8000ea18:	70 08       	ld.w	r8,r8[0x0]
8000ea1a:	f0 f5 09 38 	ld.w	r5,r8[2360]
8000ea1e:	f0 16 00 0f 	mcall	r6[60]
8000ea22:	18 98       	mov	r8,r12
8000ea24:	0a 99       	mov	r9,r5
8000ea26:	fe ca 03 2e 	sub	r10,pc,814
8000ea2a:	10 9b       	mov	r11,r8
8000ea2c:	30 0c       	mov	r12,0
8000ea2e:	fe b0 f4 df 	rcall	8000d3ec <mavlink_msg_named_value_float_send>
8000ea32:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm3", centralData->sim_model.rotorspeeds[2]);flush_mavlink();
8000ea36:	ec f8 00 00 	ld.w	r8,r6[0]
8000ea3a:	70 08       	ld.w	r8,r8[0x0]
8000ea3c:	f0 f5 09 3c 	ld.w	r5,r8[2364]
8000ea40:	f0 16 00 0f 	mcall	r6[60]
8000ea44:	18 98       	mov	r8,r12
8000ea46:	0a 99       	mov	r9,r5
8000ea48:	fe ca 03 48 	sub	r10,pc,840
8000ea4c:	10 9b       	mov	r11,r8
8000ea4e:	30 0c       	mov	r12,0
8000ea50:	fe b0 f4 ce 	rcall	8000d3ec <mavlink_msg_named_value_float_send>
8000ea54:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm4", centralData->sim_model.rotorspeeds[3]);
8000ea58:	ec f8 00 00 	ld.w	r8,r6[0]
8000ea5c:	70 08       	ld.w	r8,r8[0x0]
8000ea5e:	f0 f5 09 40 	ld.w	r5,r8[2368]
8000ea62:	f0 16 00 0f 	mcall	r6[60]
8000ea66:	18 98       	mov	r8,r12
8000ea68:	0a 99       	mov	r9,r5
8000ea6a:	fe ca 03 62 	sub	r10,pc,866
8000ea6e:	10 9b       	mov	r11,r8
8000ea70:	30 0c       	mov	r12,0
8000ea72:	fe b0 f4 bd 	rcall	8000d3ec <mavlink_msg_named_value_float_send>

	
}
8000ea76:	2e ad       	sub	sp,-88
8000ea78:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000ea7c:	80 00       	ld.sh	r0,r0[0x0]
8000ea7e:	e5 9e       	*unknown*
8000ea80:	73 74       	ld.w	r4,r9[0x5c]
8000ea82:	61 62       	ld.w	r2,r0[0x58]
8000ea84:	41 76       	lddsp	r6,sp[0x5c]
8000ea86:	67 44       	ld.w	r4,r3[0x50]
8000ea88:	65 6c       	ld.w	r12,r2[0x58]
8000ea8a:	61 79       	ld.w	r9,r0[0x5c]
8000ea8c:	00 00       	add	r0,r0
8000ea8e:	00 00       	add	r0,r0
8000ea90:	73 74       	ld.w	r4,r9[0x5c]
8000ea92:	61 62       	ld.w	r2,r0[0x58]
8000ea94:	44 65       	lddsp	r5,sp[0x118]
8000ea96:	6c 61       	ld.w	r1,r6[0x18]
8000ea98:	79 56       	ld.w	r6,r12[0x54]
8000ea9a:	61 72       	ld.w	r2,r0[0x5c]
8000ea9c:	00 00       	add	r0,r0
8000ea9e:	00 00       	add	r0,r0
8000eaa0:	73 74       	ld.w	r4,r9[0x5c]
8000eaa2:	61 62       	ld.w	r2,r0[0x58]
8000eaa4:	4d 61       	lddpc	r1,8000ebfc <send_rt_stats+0x110>
8000eaa6:	78 44       	ld.w	r4,r12[0x10]
8000eaa8:	65 6c       	ld.w	r12,r2[0x58]
8000eaaa:	61 79       	ld.w	r9,r0[0x5c]
8000eaac:	00 00       	add	r0,r0
8000eaae:	00 00       	add	r0,r0
8000eab0:	73 74       	ld.w	r4,r9[0x5c]
8000eab2:	61 62       	ld.w	r2,r0[0x58]
8000eab4:	52 54       	stdsp	sp[0x94],r4
8000eab6:	76 69       	ld.w	r9,r11[0x18]
8000eab8:	6f 00       	ld.w	r0,r7[0x40]
8000eaba:	00 00       	add	r0,r0
8000eabc:	62 61       	ld.w	r1,r1[0x18]
8000eabe:	72 6f       	ld.w	pc,r9[0x18]
8000eac0:	41 76       	lddsp	r6,sp[0x5c]
8000eac2:	67 44       	ld.w	r4,r3[0x50]
8000eac4:	65 6c       	ld.w	r12,r2[0x58]
8000eac6:	61 79       	ld.w	r9,r0[0x5c]
8000eac8:	00 00       	add	r0,r0
8000eaca:	00 00       	add	r0,r0
8000eacc:	69 6d       	ld.w	sp,r4[0x58]
8000eace:	75 45       	ld.w	r5,r10[0x50]
8000ead0:	78 54       	ld.w	r4,r12[0x14]
8000ead2:	69 6d       	ld.w	sp,r4[0x58]
8000ead4:	65 00       	ld.w	r0,r2[0x40]
8000ead6:	00 00       	add	r0,r0
8000ead8:	6e 61       	ld.w	r1,r7[0x18]
8000eada:	76 45       	ld.w	r5,r11[0x10]
8000eadc:	78 54       	ld.w	r4,r12[0x14]
8000eade:	69 6d       	ld.w	sp,r4[0x58]
8000eae0:	65 00       	ld.w	r0,r2[0x40]
8000eae2:	00 00       	add	r0,r0
8000eae4:	69 6d       	ld.w	sp,r4[0x58]
8000eae6:	75 5f       	ld.w	pc,r10[0x54]
8000eae8:	64 74       	ld.w	r4,r2[0x1c]
	...

8000eaec <send_rt_stats>:

task_return_t send_rt_stats() {
8000eaec:	eb cd 40 e0 	pushm	r5-r7,lr
8000eaf0:	1a 97       	mov	r7,sp
8000eaf2:	20 1d       	sub	sp,4
8000eaf4:	4c e6       	lddpc	r6,8000ec2c <send_rt_stats+0x140>
8000eaf6:	1e 26       	rsub	r6,pc
	task_set *main_tasks=get_main_taskset();
8000eaf8:	f0 16 01 0b 	mcall	r6[1068]
8000eafc:	18 98       	mov	r8,r12
8000eafe:	ef 48 ff fc 	st.w	r7[-4],r8
	
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabAvgDelay", main_tasks->tasks[0].delay_avg);
8000eb02:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eb06:	70 c8       	ld.w	r8,r8[0x30]
8000eb08:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000eb0c:	f0 16 00 0f 	mcall	r6[60]
8000eb10:	18 98       	mov	r8,r12
8000eb12:	0a 99       	mov	r9,r5
8000eb14:	fe ca 00 94 	sub	r10,pc,148
8000eb18:	10 9b       	mov	r11,r8
8000eb1a:	30 0c       	mov	r12,0
8000eb1c:	fe b0 f4 68 	rcall	8000d3ec <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabDelayVar", sqrt(main_tasks->tasks[0].delay_var_squared));
8000eb20:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eb24:	70 d8       	ld.w	r8,r8[0x34]
8000eb26:	10 9c       	mov	r12,r8
8000eb28:	f0 16 00 52 	mcall	r6[328]
8000eb2c:	14 98       	mov	r8,r10
8000eb2e:	16 99       	mov	r9,r11
8000eb30:	10 9a       	mov	r10,r8
8000eb32:	12 9b       	mov	r11,r9
8000eb34:	f0 16 00 70 	mcall	r6[448]
8000eb38:	14 98       	mov	r8,r10
8000eb3a:	16 99       	mov	r9,r11
8000eb3c:	10 9a       	mov	r10,r8
8000eb3e:	12 9b       	mov	r11,r9
8000eb40:	f0 16 00 09 	mcall	r6[36]
8000eb44:	18 95       	mov	r5,r12
8000eb46:	f0 16 00 0f 	mcall	r6[60]
8000eb4a:	18 98       	mov	r8,r12
8000eb4c:	0a 99       	mov	r9,r5
8000eb4e:	fe ca 00 be 	sub	r10,pc,190
8000eb52:	10 9b       	mov	r11,r8
8000eb54:	30 0c       	mov	r12,0
8000eb56:	fe b0 f4 4b 	rcall	8000d3ec <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabMaxDelay", main_tasks->tasks[0].delay_max);
8000eb5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eb5e:	70 b8       	ld.w	r8,r8[0x2c]
8000eb60:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000eb64:	f0 16 00 0f 	mcall	r6[60]
8000eb68:	18 98       	mov	r8,r12
8000eb6a:	0a 99       	mov	r9,r5
8000eb6c:	fe ca 00 cc 	sub	r10,pc,204
8000eb70:	10 9b       	mov	r11,r8
8000eb72:	30 0c       	mov	r12,0
8000eb74:	fe b0 f4 3c 	rcall	8000d3ec <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabRTvio", main_tasks->tasks[0].rt_violations);
8000eb78:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eb7c:	70 e8       	ld.w	r8,r8[0x38]
8000eb7e:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000eb82:	f0 16 00 0f 	mcall	r6[60]
8000eb86:	18 98       	mov	r8,r12
8000eb88:	0a 99       	mov	r9,r5
8000eb8a:	fe ca 00 da 	sub	r10,pc,218
8000eb8e:	10 9b       	mov	r11,r8
8000eb90:	30 0c       	mov	r12,0
8000eb92:	fe b0 f4 2d 	rcall	8000d3ec <mavlink_msg_named_value_float_send>

	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "baroAvgDelay", main_tasks->tasks[1].delay_avg);
8000eb96:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eb9a:	71 88       	ld.w	r8,r8[0x60]
8000eb9c:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000eba0:	f0 16 00 0f 	mcall	r6[60]
8000eba4:	18 98       	mov	r8,r12
8000eba6:	0a 99       	mov	r9,r5
8000eba8:	fe ca 00 ec 	sub	r10,pc,236
8000ebac:	10 9b       	mov	r11,r8
8000ebae:	30 0c       	mov	r12,0
8000ebb0:	fe b0 f4 1e 	rcall	8000d3ec <mavlink_msg_named_value_float_send>


	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imuExTime", main_tasks->tasks[0].execution_time);
8000ebb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ebb8:	70 a8       	ld.w	r8,r8[0x28]
8000ebba:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000ebbe:	f0 16 00 0f 	mcall	r6[60]
8000ebc2:	18 98       	mov	r8,r12
8000ebc4:	0a 99       	mov	r9,r5
8000ebc6:	fe ca 00 fa 	sub	r10,pc,250
8000ebca:	10 9b       	mov	r11,r8
8000ebcc:	30 0c       	mov	r12,0
8000ebce:	fe b0 f4 0f 	rcall	8000d3ec <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "navExTime", main_tasks->tasks[3].execution_time);
8000ebd2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ebd6:	f0 f8 00 b8 	ld.w	r8,r8[184]
8000ebda:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000ebde:	f0 16 00 0f 	mcall	r6[60]
8000ebe2:	18 98       	mov	r8,r12
8000ebe4:	0a 99       	mov	r9,r5
8000ebe6:	fe ca 01 0e 	sub	r10,pc,270
8000ebea:	10 9b       	mov	r11,r8
8000ebec:	30 0c       	mov	r12,0
8000ebee:	fe b0 f3 ff 	rcall	8000d3ec <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imu_dt", get_central_data()->imu1.dt);
8000ebf2:	f0 16 00 33 	mcall	r6[204]
8000ebf6:	18 98       	mov	r8,r12
8000ebf8:	f0 f5 01 40 	ld.w	r5,r8[320]
8000ebfc:	f0 16 00 0f 	mcall	r6[60]
8000ec00:	18 98       	mov	r8,r12
8000ec02:	0a 99       	mov	r9,r5
8000ec04:	fe ca 01 20 	sub	r10,pc,288
8000ec08:	10 9b       	mov	r11,r8
8000ec0a:	30 0c       	mov	r12,0
8000ec0c:	fe b0 f3 f0 	rcall	8000d3ec <mavlink_msg_named_value_float_send>

	
	main_tasks->tasks[1].rt_violations=0;
8000ec10:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ec14:	30 09       	mov	r9,0
8000ec16:	f1 49 00 68 	st.w	r8[104],r9
	main_tasks->tasks[1].delay_max=0;
8000ec1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ec1e:	30 09       	mov	r9,0
8000ec20:	f1 49 00 5c 	st.w	r8[92],r9

}
8000ec24:	2f fd       	sub	sp,-4
8000ec26:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000ec2a:	00 00       	add	r0,r0
8000ec2c:	80 00       	ld.sh	r0,r0[0x0]
8000ec2e:	e9 7a 53 69 	stcond	r4[21353],r10
8000ec32:	6d 5f       	ld.w	pc,r6[0x54]
8000ec34:	6d 6f       	ld.w	pc,r6[0x58]
8000ec36:	64 65       	ld.w	r5,r2[0x18]
8000ec38:	00 00       	add	r0,r0
8000ec3a:	00 00       	add	r0,r0
8000ec3c:	52 6f       	stdsp	sp[0x98],pc
8000ec3e:	6c 6c       	ld.w	r12,r6[0x18]
8000ec40:	52 50       	stdsp	sp[0x94],r0
8000ec42:	69 64       	ld.w	r4,r4[0x58]
8000ec44:	5f 50       	srlt	r0
8000ec46:	5f 47       	srge	r7
8000ec48:	00 00       	add	r0,r0
8000ec4a:	00 00       	add	r0,r0
8000ec4c:	52 6f       	stdsp	sp[0x98],pc
8000ec4e:	6c 6c       	ld.w	r12,r6[0x18]
8000ec50:	52 50       	stdsp	sp[0x94],r0
8000ec52:	69 64       	ld.w	r4,r4[0x58]
8000ec54:	5f 49       	srge	r9
8000ec56:	5f 50       	srlt	r0
8000ec58:	73 74       	ld.w	r4,r9[0x5c]
8000ec5a:	47 00       	lddsp	r0,sp[0x1c0]
8000ec5c:	52 6f       	stdsp	sp[0x98],pc
8000ec5e:	6c 6c       	ld.w	r12,r6[0x18]
8000ec60:	52 50       	stdsp	sp[0x94],r0
8000ec62:	69 64       	ld.w	r4,r4[0x58]
8000ec64:	5f 49       	srge	r9
8000ec66:	5f 50       	srlt	r0
8000ec68:	72 65       	ld.w	r5,r9[0x18]
8000ec6a:	47 00       	lddsp	r0,sp[0x1c0]
8000ec6c:	52 6f       	stdsp	sp[0x98],pc
8000ec6e:	6c 6c       	ld.w	r12,r6[0x18]
8000ec70:	52 50       	stdsp	sp[0x94],r0
8000ec72:	69 64       	ld.w	r4,r4[0x58]
8000ec74:	5f 44       	srge	r4
8000ec76:	5f 47       	srge	r7
8000ec78:	61 69       	ld.w	r9,r0[0x58]
8000ec7a:	6e 00       	ld.w	r0,r7[0x0]
8000ec7c:	52 6f       	stdsp	sp[0x98],pc
8000ec7e:	6c 6c       	ld.w	r12,r6[0x18]
8000ec80:	41 50       	lddsp	r0,sp[0x54]
8000ec82:	69 64       	ld.w	r4,r4[0x58]
8000ec84:	5f 50       	srlt	r0
8000ec86:	5f 47       	srge	r7
8000ec88:	00 00       	add	r0,r0
8000ec8a:	00 00       	add	r0,r0
8000ec8c:	52 6f       	stdsp	sp[0x98],pc
8000ec8e:	6c 6c       	ld.w	r12,r6[0x18]
8000ec90:	41 50       	lddsp	r0,sp[0x54]
8000ec92:	69 64       	ld.w	r4,r4[0x58]
8000ec94:	5f 49       	srge	r9
8000ec96:	5f 50       	srlt	r0
8000ec98:	73 74       	ld.w	r4,r9[0x5c]
8000ec9a:	47 00       	lddsp	r0,sp[0x1c0]
8000ec9c:	52 6f       	stdsp	sp[0x98],pc
8000ec9e:	6c 6c       	ld.w	r12,r6[0x18]
8000eca0:	41 50       	lddsp	r0,sp[0x54]
8000eca2:	69 64       	ld.w	r4,r4[0x58]
8000eca4:	5f 49       	srge	r9
8000eca6:	5f 50       	srlt	r0
8000eca8:	72 65       	ld.w	r5,r9[0x18]
8000ecaa:	47 00       	lddsp	r0,sp[0x1c0]
8000ecac:	52 6f       	stdsp	sp[0x98],pc
8000ecae:	6c 6c       	ld.w	r12,r6[0x18]
8000ecb0:	41 50       	lddsp	r0,sp[0x54]
8000ecb2:	69 64       	ld.w	r4,r4[0x58]
8000ecb4:	5f 44       	srge	r4
8000ecb6:	5f 47       	srge	r7
8000ecb8:	61 69       	ld.w	r9,r0[0x58]
8000ecba:	6e 00       	ld.w	r0,r7[0x0]
8000ecbc:	50 69       	stdsp	sp[0x18],r9
8000ecbe:	74 63       	ld.w	r3,r10[0x18]
8000ecc0:	68 52       	ld.w	r2,r4[0x14]
8000ecc2:	50 69       	stdsp	sp[0x18],r9
8000ecc4:	64 5f       	ld.w	pc,r2[0x14]
8000ecc6:	50 5f       	stdsp	sp[0x14],pc
8000ecc8:	47 00       	lddsp	r0,sp[0x1c0]
8000ecca:	00 00       	add	r0,r0
8000eccc:	50 69       	stdsp	sp[0x18],r9
8000ecce:	74 63       	ld.w	r3,r10[0x18]
8000ecd0:	68 52       	ld.w	r2,r4[0x14]
8000ecd2:	50 69       	stdsp	sp[0x18],r9
8000ecd4:	64 5f       	ld.w	pc,r2[0x14]
8000ecd6:	49 5f       	lddpc	pc,8000ed28 <send_rt_stats+0x23c>
8000ecd8:	50 73       	stdsp	sp[0x1c],r3
8000ecda:	74 47       	ld.w	r7,r10[0x10]
8000ecdc:	00 00       	add	r0,r0
8000ecde:	00 00       	add	r0,r0
8000ece0:	50 69       	stdsp	sp[0x18],r9
8000ece2:	74 63       	ld.w	r3,r10[0x18]
8000ece4:	68 52       	ld.w	r2,r4[0x14]
8000ece6:	50 69       	stdsp	sp[0x18],r9
8000ece8:	64 5f       	ld.w	pc,r2[0x14]
8000ecea:	49 5f       	lddpc	pc,8000ed3c <send_rt_stats+0x250>
8000ecec:	50 72       	stdsp	sp[0x1c],r2
8000ecee:	65 47       	ld.w	r7,r2[0x50]
8000ecf0:	00 00       	add	r0,r0
8000ecf2:	00 00       	add	r0,r0
8000ecf4:	50 69       	stdsp	sp[0x18],r9
8000ecf6:	74 63       	ld.w	r3,r10[0x18]
8000ecf8:	68 52       	ld.w	r2,r4[0x14]
8000ecfa:	50 69       	stdsp	sp[0x18],r9
8000ecfc:	64 5f       	ld.w	pc,r2[0x14]
8000ecfe:	44 5f       	lddsp	pc,sp[0x114]
8000ed00:	47 61       	lddsp	r1,sp[0x1d8]
8000ed02:	69 6e       	ld.w	lr,r4[0x58]
8000ed04:	00 00       	add	r0,r0
8000ed06:	00 00       	add	r0,r0
8000ed08:	50 69       	stdsp	sp[0x18],r9
8000ed0a:	74 63       	ld.w	r3,r10[0x18]
8000ed0c:	68 41       	ld.w	r1,r4[0x10]
8000ed0e:	50 69       	stdsp	sp[0x18],r9
8000ed10:	64 5f       	ld.w	pc,r2[0x14]
8000ed12:	50 5f       	stdsp	sp[0x14],pc
8000ed14:	47 00       	lddsp	r0,sp[0x1c0]
8000ed16:	00 00       	add	r0,r0
8000ed18:	50 69       	stdsp	sp[0x18],r9
8000ed1a:	74 63       	ld.w	r3,r10[0x18]
8000ed1c:	68 41       	ld.w	r1,r4[0x10]
8000ed1e:	50 69       	stdsp	sp[0x18],r9
8000ed20:	64 5f       	ld.w	pc,r2[0x14]
8000ed22:	49 5f       	lddpc	pc,8000ed74 <send_rt_stats+0x288>
8000ed24:	50 73       	stdsp	sp[0x1c],r3
8000ed26:	74 47       	ld.w	r7,r10[0x10]
8000ed28:	00 00       	add	r0,r0
8000ed2a:	00 00       	add	r0,r0
8000ed2c:	50 69       	stdsp	sp[0x18],r9
8000ed2e:	74 63       	ld.w	r3,r10[0x18]
8000ed30:	68 41       	ld.w	r1,r4[0x10]
8000ed32:	50 69       	stdsp	sp[0x18],r9
8000ed34:	64 5f       	ld.w	pc,r2[0x14]
8000ed36:	49 5f       	lddpc	pc,8000ed88 <send_rt_stats+0x29c>
8000ed38:	50 72       	stdsp	sp[0x1c],r2
8000ed3a:	65 47       	ld.w	r7,r2[0x50]
8000ed3c:	00 00       	add	r0,r0
8000ed3e:	00 00       	add	r0,r0
8000ed40:	50 69       	stdsp	sp[0x18],r9
8000ed42:	74 63       	ld.w	r3,r10[0x18]
8000ed44:	68 41       	ld.w	r1,r4[0x10]
8000ed46:	50 69       	stdsp	sp[0x18],r9
8000ed48:	64 5f       	ld.w	pc,r2[0x14]
8000ed4a:	44 5f       	lddsp	pc,sp[0x114]
8000ed4c:	47 61       	lddsp	r1,sp[0x1d8]
8000ed4e:	69 6e       	ld.w	lr,r4[0x58]
8000ed50:	00 00       	add	r0,r0
8000ed52:	00 00       	add	r0,r0
8000ed54:	59 61       	cp.w	r1,22
8000ed56:	77 52       	ld.w	r2,r11[0x54]
8000ed58:	50 69       	stdsp	sp[0x18],r9
8000ed5a:	64 5f       	ld.w	pc,r2[0x14]
8000ed5c:	50 5f       	stdsp	sp[0x14],pc
8000ed5e:	47 00       	lddsp	r0,sp[0x1c0]
8000ed60:	59 61       	cp.w	r1,22
8000ed62:	77 52       	ld.w	r2,r11[0x54]
8000ed64:	50 69       	stdsp	sp[0x18],r9
8000ed66:	64 5f       	ld.w	pc,r2[0x14]
8000ed68:	49 5f       	lddpc	pc,8000edbc <send_rt_stats+0x2d0>
8000ed6a:	50 73       	stdsp	sp[0x1c],r3
8000ed6c:	74 47       	ld.w	r7,r10[0x10]
8000ed6e:	00 00       	add	r0,r0
8000ed70:	59 61       	cp.w	r1,22
8000ed72:	77 52       	ld.w	r2,r11[0x54]
8000ed74:	50 69       	stdsp	sp[0x18],r9
8000ed76:	64 5f       	ld.w	pc,r2[0x14]
8000ed78:	49 5f       	lddpc	pc,8000edcc <send_rt_stats+0x2e0>
8000ed7a:	50 72       	stdsp	sp[0x1c],r2
8000ed7c:	65 47       	ld.w	r7,r2[0x50]
8000ed7e:	00 00       	add	r0,r0
8000ed80:	59 61       	cp.w	r1,22
8000ed82:	77 52       	ld.w	r2,r11[0x54]
8000ed84:	50 69       	stdsp	sp[0x18],r9
8000ed86:	64 5f       	ld.w	pc,r2[0x14]
8000ed88:	44 5f       	lddsp	pc,sp[0x114]
8000ed8a:	47 61       	lddsp	r1,sp[0x1d8]
8000ed8c:	69 6e       	ld.w	lr,r4[0x58]
8000ed8e:	00 00       	add	r0,r0
8000ed90:	59 61       	cp.w	r1,22
8000ed92:	77 41       	ld.w	r1,r11[0x50]
8000ed94:	50 69       	stdsp	sp[0x18],r9
8000ed96:	64 5f       	ld.w	pc,r2[0x14]
8000ed98:	50 5f       	stdsp	sp[0x14],pc
8000ed9a:	47 00       	lddsp	r0,sp[0x1c0]
8000ed9c:	59 61       	cp.w	r1,22
8000ed9e:	77 41       	ld.w	r1,r11[0x50]
8000eda0:	50 69       	stdsp	sp[0x18],r9
8000eda2:	64 5f       	ld.w	pc,r2[0x14]
8000eda4:	49 5f       	lddpc	pc,8000edf8 <send_rt_stats+0x30c>
8000eda6:	50 73       	stdsp	sp[0x1c],r3
8000eda8:	74 47       	ld.w	r7,r10[0x10]
8000edaa:	00 00       	add	r0,r0
8000edac:	59 61       	cp.w	r1,22
8000edae:	77 41       	ld.w	r1,r11[0x50]
8000edb0:	50 69       	stdsp	sp[0x18],r9
8000edb2:	64 5f       	ld.w	pc,r2[0x14]
8000edb4:	49 5f       	lddpc	pc,8000ee08 <send_rt_stats+0x31c>
8000edb6:	50 72       	stdsp	sp[0x1c],r2
8000edb8:	65 47       	ld.w	r7,r2[0x50]
8000edba:	00 00       	add	r0,r0
8000edbc:	59 61       	cp.w	r1,22
8000edbe:	77 41       	ld.w	r1,r11[0x50]
8000edc0:	50 69       	stdsp	sp[0x18],r9
8000edc2:	64 5f       	ld.w	pc,r2[0x14]
8000edc4:	44 5f       	lddsp	pc,sp[0x114]
8000edc6:	47 61       	lddsp	r1,sp[0x1d8]
8000edc8:	69 6e       	ld.w	lr,r4[0x58]
8000edca:	00 00       	add	r0,r0
8000edcc:	52 6f       	stdsp	sp[0x98],pc
8000edce:	6c 6c       	ld.w	r12,r6[0x18]
8000edd0:	56 50       	stdsp	sp[0x194],r0
8000edd2:	69 64       	ld.w	r4,r4[0x58]
8000edd4:	5f 50       	srlt	r0
8000edd6:	5f 47       	srge	r7
8000edd8:	00 00       	add	r0,r0
8000edda:	00 00       	add	r0,r0
8000eddc:	52 6f       	stdsp	sp[0x98],pc
8000edde:	6c 6c       	ld.w	r12,r6[0x18]
8000ede0:	56 50       	stdsp	sp[0x194],r0
8000ede2:	69 64       	ld.w	r4,r4[0x58]
8000ede4:	5f 49       	srge	r9
8000ede6:	5f 50       	srlt	r0
8000ede8:	73 74       	ld.w	r4,r9[0x5c]
8000edea:	47 00       	lddsp	r0,sp[0x1c0]
8000edec:	52 6f       	stdsp	sp[0x98],pc
8000edee:	6c 6c       	ld.w	r12,r6[0x18]
8000edf0:	56 50       	stdsp	sp[0x194],r0
8000edf2:	69 64       	ld.w	r4,r4[0x58]
8000edf4:	5f 49       	srge	r9
8000edf6:	5f 50       	srlt	r0
8000edf8:	72 65       	ld.w	r5,r9[0x18]
8000edfa:	47 00       	lddsp	r0,sp[0x1c0]
8000edfc:	52 6f       	stdsp	sp[0x98],pc
8000edfe:	6c 6c       	ld.w	r12,r6[0x18]
8000ee00:	56 50       	stdsp	sp[0x194],r0
8000ee02:	69 64       	ld.w	r4,r4[0x58]
8000ee04:	5f 44       	srge	r4
8000ee06:	5f 47       	srge	r7
8000ee08:	61 69       	ld.w	r9,r0[0x58]
8000ee0a:	6e 00       	ld.w	r0,r7[0x0]
8000ee0c:	50 69       	stdsp	sp[0x18],r9
8000ee0e:	74 63       	ld.w	r3,r10[0x18]
8000ee10:	68 56       	ld.w	r6,r4[0x14]
8000ee12:	50 69       	stdsp	sp[0x18],r9
8000ee14:	64 5f       	ld.w	pc,r2[0x14]
8000ee16:	50 5f       	stdsp	sp[0x14],pc
8000ee18:	47 00       	lddsp	r0,sp[0x1c0]
8000ee1a:	00 00       	add	r0,r0
8000ee1c:	50 69       	stdsp	sp[0x18],r9
8000ee1e:	74 63       	ld.w	r3,r10[0x18]
8000ee20:	68 56       	ld.w	r6,r4[0x14]
8000ee22:	50 69       	stdsp	sp[0x18],r9
8000ee24:	64 5f       	ld.w	pc,r2[0x14]
8000ee26:	49 5f       	lddpc	pc,8000ee78 <send_rt_stats+0x38c>
8000ee28:	50 73       	stdsp	sp[0x1c],r3
8000ee2a:	74 47       	ld.w	r7,r10[0x10]
8000ee2c:	00 00       	add	r0,r0
8000ee2e:	00 00       	add	r0,r0
8000ee30:	50 69       	stdsp	sp[0x18],r9
8000ee32:	74 63       	ld.w	r3,r10[0x18]
8000ee34:	68 56       	ld.w	r6,r4[0x14]
8000ee36:	50 69       	stdsp	sp[0x18],r9
8000ee38:	64 5f       	ld.w	pc,r2[0x14]
8000ee3a:	49 5f       	lddpc	pc,8000ee8c <send_rt_stats+0x3a0>
8000ee3c:	50 72       	stdsp	sp[0x1c],r2
8000ee3e:	65 47       	ld.w	r7,r2[0x50]
8000ee40:	00 00       	add	r0,r0
8000ee42:	00 00       	add	r0,r0
8000ee44:	50 69       	stdsp	sp[0x18],r9
8000ee46:	74 63       	ld.w	r3,r10[0x18]
8000ee48:	68 56       	ld.w	r6,r4[0x14]
8000ee4a:	50 69       	stdsp	sp[0x18],r9
8000ee4c:	64 5f       	ld.w	pc,r2[0x14]
8000ee4e:	44 5f       	lddsp	pc,sp[0x114]
8000ee50:	47 61       	lddsp	r1,sp[0x1d8]
8000ee52:	69 6e       	ld.w	lr,r4[0x58]
8000ee54:	00 00       	add	r0,r0
8000ee56:	00 00       	add	r0,r0
8000ee58:	54 68       	stdsp	sp[0x118],r8
8000ee5a:	72 56       	ld.w	r6,r9[0x14]
8000ee5c:	50 69       	stdsp	sp[0x18],r9
8000ee5e:	64 5f       	ld.w	pc,r2[0x14]
8000ee60:	50 5f       	stdsp	sp[0x14],pc
8000ee62:	47 00       	lddsp	r0,sp[0x1c0]
8000ee64:	54 68       	stdsp	sp[0x118],r8
8000ee66:	72 56       	ld.w	r6,r9[0x14]
8000ee68:	50 69       	stdsp	sp[0x18],r9
8000ee6a:	64 5f       	ld.w	pc,r2[0x14]
8000ee6c:	49 5f       	lddpc	pc,8000eec0 <send_rt_stats+0x3d4>
8000ee6e:	50 73       	stdsp	sp[0x1c],r3
8000ee70:	74 47       	ld.w	r7,r10[0x10]
8000ee72:	00 00       	add	r0,r0
8000ee74:	54 68       	stdsp	sp[0x118],r8
8000ee76:	72 56       	ld.w	r6,r9[0x14]
8000ee78:	50 69       	stdsp	sp[0x18],r9
8000ee7a:	64 5f       	ld.w	pc,r2[0x14]
8000ee7c:	49 5f       	lddpc	pc,8000eed0 <send_rt_stats+0x3e4>
8000ee7e:	50 72       	stdsp	sp[0x1c],r2
8000ee80:	65 47       	ld.w	r7,r2[0x50]
8000ee82:	00 00       	add	r0,r0
8000ee84:	54 68       	stdsp	sp[0x118],r8
8000ee86:	72 56       	ld.w	r6,r9[0x14]
8000ee88:	50 69       	stdsp	sp[0x18],r9
8000ee8a:	64 5f       	ld.w	pc,r2[0x14]
8000ee8c:	44 5f       	lddsp	pc,sp[0x114]
8000ee8e:	47 61       	lddsp	r1,sp[0x1d8]
8000ee90:	69 6e       	ld.w	lr,r4[0x58]
8000ee92:	00 00       	add	r0,r0
8000ee94:	54 68       	stdsp	sp[0x118],r8
8000ee96:	72 56       	ld.w	r6,r9[0x14]
8000ee98:	50 69       	stdsp	sp[0x18],r9
8000ee9a:	64 5f       	ld.w	pc,r2[0x14]
8000ee9c:	44 5f       	lddsp	pc,sp[0x114]
8000ee9e:	4c 50       	lddpc	r0,8000efb0 <send_rt_stats+0x4c4>
8000eea0:	46 00       	lddsp	r0,sp[0x180]
8000eea2:	00 00       	add	r0,r0
8000eea4:	54 68       	stdsp	sp[0x118],r8
8000eea6:	72 56       	ld.w	r6,r9[0x14]
8000eea8:	50 69       	stdsp	sp[0x18],r9
8000eeaa:	64 5f       	ld.w	pc,r2[0x14]
8000eeac:	73 6f       	ld.w	pc,r9[0x58]
8000eeae:	66 74       	ld.w	r4,r3[0x1c]
8000eeb0:	00 00       	add	r0,r0
8000eeb2:	00 00       	add	r0,r0
8000eeb4:	51 46       	stdsp	sp[0x50],r6
8000eeb6:	5f 6b       	srmi	r11
8000eeb8:	70 5f       	ld.w	pc,r8[0x14]
8000eeba:	61 63       	ld.w	r3,r0[0x58]
8000eebc:	63 00       	ld.w	r0,r1[0x40]
8000eebe:	00 00       	add	r0,r0
8000eec0:	51 46       	stdsp	sp[0x50],r6
8000eec2:	5f 6b       	srmi	r11
8000eec4:	70 5f       	ld.w	pc,r8[0x14]
8000eec6:	6d 61       	ld.w	r1,r6[0x58]
8000eec8:	67 00       	ld.w	r0,r3[0x40]
8000eeca:	00 00       	add	r0,r0
8000eecc:	42 69       	lddsp	r9,sp[0x98]
8000eece:	61 73       	ld.w	r3,r0[0x5c]
8000eed0:	5f 47       	srge	r7
8000eed2:	79 72       	ld.w	r2,r12[0x5c]
8000eed4:	6f 5f       	ld.w	pc,r7[0x54]
8000eed6:	58 00       	cp.w	r0,0
8000eed8:	42 69       	lddsp	r9,sp[0x98]
8000eeda:	61 73       	ld.w	r3,r0[0x5c]
8000eedc:	5f 47       	srge	r7
8000eede:	79 72       	ld.w	r2,r12[0x5c]
8000eee0:	6f 5f       	ld.w	pc,r7[0x54]
8000eee2:	59 00       	cp.w	r0,16
8000eee4:	42 69       	lddsp	r9,sp[0x98]
8000eee6:	61 73       	ld.w	r3,r0[0x5c]
8000eee8:	5f 47       	srge	r7
8000eeea:	79 72       	ld.w	r2,r12[0x5c]
8000eeec:	6f 5f       	ld.w	pc,r7[0x54]
8000eeee:	5a 00       	cp.w	r0,-32
8000eef0:	42 69       	lddsp	r9,sp[0x98]
8000eef2:	61 73       	ld.w	r3,r0[0x5c]
8000eef4:	5f 41       	srge	r1
8000eef6:	63 63       	ld.w	r3,r1[0x58]
8000eef8:	5f 58       	srlt	r8
8000eefa:	00 00       	add	r0,r0
8000eefc:	42 69       	lddsp	r9,sp[0x98]
8000eefe:	61 73       	ld.w	r3,r0[0x5c]
8000ef00:	5f 41       	srge	r1
8000ef02:	63 63       	ld.w	r3,r1[0x58]
8000ef04:	5f 59       	srlt	r9
8000ef06:	00 00       	add	r0,r0
8000ef08:	42 69       	lddsp	r9,sp[0x98]
8000ef0a:	61 73       	ld.w	r3,r0[0x5c]
8000ef0c:	5f 41       	srge	r1
8000ef0e:	63 63       	ld.w	r3,r1[0x58]
8000ef10:	5f 5a       	srlt	r10
8000ef12:	00 00       	add	r0,r0
8000ef14:	42 69       	lddsp	r9,sp[0x98]
8000ef16:	61 73       	ld.w	r3,r0[0x5c]
8000ef18:	5f 4d       	srge	sp
8000ef1a:	61 67       	ld.w	r7,r0[0x58]
8000ef1c:	5f 58       	srlt	r8
8000ef1e:	00 00       	add	r0,r0
8000ef20:	42 69       	lddsp	r9,sp[0x98]
8000ef22:	61 73       	ld.w	r3,r0[0x5c]
8000ef24:	5f 4d       	srge	sp
8000ef26:	61 67       	ld.w	r7,r0[0x58]
8000ef28:	5f 59       	srlt	r9
8000ef2a:	00 00       	add	r0,r0
8000ef2c:	42 69       	lddsp	r9,sp[0x98]
8000ef2e:	61 73       	ld.w	r3,r0[0x5c]
8000ef30:	5f 4d       	srge	sp
8000ef32:	61 67       	ld.w	r7,r0[0x58]
8000ef34:	5f 5a       	srlt	r10
8000ef36:	00 00       	add	r0,r0
8000ef38:	53 63       	stdsp	sp[0xd8],r3
8000ef3a:	61 6c       	ld.w	r12,r0[0x58]
8000ef3c:	65 5f       	ld.w	pc,r2[0x54]
8000ef3e:	47 79       	lddsp	r9,sp[0x1dc]
8000ef40:	72 6f       	ld.w	pc,r9[0x18]
8000ef42:	5f 58       	srlt	r8
8000ef44:	00 00       	add	r0,r0
8000ef46:	00 00       	add	r0,r0
8000ef48:	53 63       	stdsp	sp[0xd8],r3
8000ef4a:	61 6c       	ld.w	r12,r0[0x58]
8000ef4c:	65 5f       	ld.w	pc,r2[0x54]
8000ef4e:	47 79       	lddsp	r9,sp[0x1dc]
8000ef50:	72 6f       	ld.w	pc,r9[0x18]
8000ef52:	5f 59       	srlt	r9
8000ef54:	00 00       	add	r0,r0
8000ef56:	00 00       	add	r0,r0
8000ef58:	53 63       	stdsp	sp[0xd8],r3
8000ef5a:	61 6c       	ld.w	r12,r0[0x58]
8000ef5c:	65 5f       	ld.w	pc,r2[0x54]
8000ef5e:	47 79       	lddsp	r9,sp[0x1dc]
8000ef60:	72 6f       	ld.w	pc,r9[0x18]
8000ef62:	5f 5a       	srlt	r10
8000ef64:	00 00       	add	r0,r0
8000ef66:	00 00       	add	r0,r0
8000ef68:	53 63       	stdsp	sp[0xd8],r3
8000ef6a:	61 6c       	ld.w	r12,r0[0x58]
8000ef6c:	65 5f       	ld.w	pc,r2[0x54]
8000ef6e:	41 63       	lddsp	r3,sp[0x58]
8000ef70:	63 5f       	ld.w	pc,r1[0x54]
8000ef72:	58 00       	cp.w	r0,0
8000ef74:	53 63       	stdsp	sp[0xd8],r3
8000ef76:	61 6c       	ld.w	r12,r0[0x58]
8000ef78:	65 5f       	ld.w	pc,r2[0x54]
8000ef7a:	41 63       	lddsp	r3,sp[0x58]
8000ef7c:	63 5f       	ld.w	pc,r1[0x54]
8000ef7e:	59 00       	cp.w	r0,16
8000ef80:	53 63       	stdsp	sp[0xd8],r3
8000ef82:	61 6c       	ld.w	r12,r0[0x58]
8000ef84:	65 5f       	ld.w	pc,r2[0x54]
8000ef86:	41 63       	lddsp	r3,sp[0x58]
8000ef88:	63 5f       	ld.w	pc,r1[0x54]
8000ef8a:	5a 00       	cp.w	r0,-32
8000ef8c:	53 63       	stdsp	sp[0xd8],r3
8000ef8e:	61 6c       	ld.w	r12,r0[0x58]
8000ef90:	65 5f       	ld.w	pc,r2[0x54]
8000ef92:	4d 61       	lddpc	r1,8000f0e8 <add_PID_parameters+0xe4>
8000ef94:	67 5f       	ld.w	pc,r3[0x54]
8000ef96:	58 00       	cp.w	r0,0
8000ef98:	53 63       	stdsp	sp[0xd8],r3
8000ef9a:	61 6c       	ld.w	r12,r0[0x58]
8000ef9c:	65 5f       	ld.w	pc,r2[0x54]
8000ef9e:	4d 61       	lddpc	r1,8000f0f4 <add_PID_parameters+0xf0>
8000efa0:	67 5f       	ld.w	pc,r3[0x54]
8000efa2:	59 00       	cp.w	r0,16
8000efa4:	53 63       	stdsp	sp[0xd8],r3
8000efa6:	61 6c       	ld.w	r12,r0[0x58]
8000efa8:	65 5f       	ld.w	pc,r2[0x54]
8000efaa:	4d 61       	lddpc	r1,8000f100 <add_PID_parameters+0xfc>
8000efac:	67 5f       	ld.w	pc,r3[0x54]
8000efae:	5a 00       	cp.w	r0,-32
8000efb0:	49 44       	lddpc	r4,8000f000 <send_rt_stats+0x514>
8000efb2:	5f 53       	srlt	r3
8000efb4:	79 73       	ld.w	r3,r12[0x5c]
8000efb6:	74 65       	ld.w	r5,r10[0x18]
8000efb8:	6d 00       	ld.w	r0,r6[0x40]
8000efba:	00 00       	add	r0,r0
8000efbc:	49 44       	lddpc	r4,8000f00c <add_PID_parameters+0x8>
8000efbe:	5f 50       	srlt	r0
8000efc0:	6c 61       	ld.w	r1,r6[0x18]
8000efc2:	6e 6e       	ld.w	lr,r7[0x18]
8000efc4:	65 72       	ld.w	r2,r2[0x5c]
8000efc6:	00 00       	add	r0,r0
8000efc8:	50 6f       	stdsp	sp[0x18],pc
8000efca:	73 5f       	ld.w	pc,r9[0x54]
8000efcc:	6b 70       	ld.w	r0,r5[0x5c]
8000efce:	5f 61       	srmi	r1
8000efd0:	6c 74       	ld.w	r4,r6[0x1c]
8000efd2:	00 00       	add	r0,r0
8000efd4:	50 6f       	stdsp	sp[0x18],pc
8000efd6:	73 5f       	ld.w	pc,r9[0x54]
8000efd8:	6b 70       	ld.w	r0,r5[0x5c]
8000efda:	5f 76       	srpl	r6
8000efdc:	65 6c       	ld.w	r12,r2[0x58]
8000efde:	62 00       	ld.w	r0,r1[0x0]
8000efe0:	50 6f       	stdsp	sp[0x18],pc
8000efe2:	73 5f       	ld.w	pc,r9[0x54]
8000efe4:	6b 70       	ld.w	r0,r5[0x5c]
8000efe6:	5f 70       	srpl	r0
8000efe8:	6f 73       	ld.w	r3,r7[0x5c]
8000efea:	30 00       	mov	r0,0
8000efec:	50 6f       	stdsp	sp[0x18],pc
8000efee:	73 5f       	ld.w	pc,r9[0x54]
8000eff0:	6b 70       	ld.w	r0,r5[0x5c]
8000eff2:	5f 70       	srpl	r0
8000eff4:	6f 73       	ld.w	r3,r7[0x5c]
8000eff6:	31 00       	mov	r0,16
8000eff8:	50 6f       	stdsp	sp[0x18],pc
8000effa:	73 5f       	ld.w	pc,r9[0x54]
8000effc:	6b 70       	ld.w	r0,r5[0x5c]
8000effe:	5f 70       	srpl	r0
8000f000:	6f 73       	ld.w	r3,r7[0x5c]
8000f002:	32 00       	mov	r0,32

8000f004 <add_PID_parameters>:


void add_PID_parameters(void) {
8000f004:	eb cd 40 c0 	pushm	r6-r7,lr
8000f008:	1a 97       	mov	r7,sp
8000f00a:	20 3d       	sub	sp,12
8000f00c:	fe f6 04 c0 	ld.w	r6,pc[1216]
8000f010:	1e 26       	rsub	r6,pc
	Stabiliser_t* rate_stabiliser = get_rate_stabiliser();
8000f012:	f0 16 00 9b 	mcall	r6[620]
8000f016:	18 98       	mov	r8,r12
8000f018:	ef 48 ff f4 	st.w	r7[-12],r8
	Stabiliser_t* attitude_stabiliser = get_attitude_stabiliser();
8000f01c:	f0 16 02 03 	mcall	r6[2060]
8000f020:	18 98       	mov	r8,r12
8000f022:	ef 48 ff f8 	st.w	r7[-8],r8
	Stabiliser_t* velocity_stabiliser= get_velocity_stabiliser();
8000f026:	f0 16 01 a8 	mcall	r6[1696]
8000f02a:	18 98       	mov	r8,r12
8000f02c:	ef 48 ff fc 	st.w	r7[-4],r8

	
	add_parameter_int32(&centralData->simulation_mode, "Sim_mode");
8000f030:	ec f8 00 00 	ld.w	r8,r6[0]
8000f034:	70 08       	ld.w	r8,r8[0x0]
8000f036:	f0 c8 f2 f8 	sub	r8,r8,-3336
8000f03a:	fe cb 04 0a 	sub	r11,pc,1034
8000f03e:	10 9c       	mov	r12,r8
8000f040:	f0 16 02 0f 	mcall	r6[2108]
	// Roll rate PID
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].p_gain, "RollRPid_P_G");
8000f044:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f048:	fe cb 04 0c 	sub	r11,pc,1036
8000f04c:	10 9c       	mov	r12,r8
8000f04e:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].clip_max, "RollRPid_P_CLmx");
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].clip_min, "RollRPid_P_CLmn");
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].integrator.clip, "RollRPid_I_CLip");
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].integrator.postgain, "RollRPid_I_PstG");
8000f052:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f056:	2f 08       	sub	r8,-16
8000f058:	fe cb 04 0c 	sub	r11,pc,1036
8000f05c:	10 9c       	mov	r12,r8
8000f05e:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].integrator.pregain, "RollRPid_I_PreG");
8000f062:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f066:	2f 48       	sub	r8,-12
8000f068:	fe cb 04 0c 	sub	r11,pc,1036
8000f06c:	10 9c       	mov	r12,r8
8000f06e:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].differentiator.clip, "RollRPid_D_Clip");
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].differentiator.gain, "RollRPid_D_Gain");
8000f072:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f076:	2e 08       	sub	r8,-32
8000f078:	fe cb 04 0c 	sub	r11,pc,1036
8000f07c:	10 9c       	mov	r12,r8
8000f07e:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].differentiator.LPF, "RollRPid_D_LPF");
	
	// Roll attitude PID
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].p_gain, "RollAPid_P_G");
8000f082:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f086:	fe cb 04 0a 	sub	r11,pc,1034
8000f08a:	10 9c       	mov	r12,r8
8000f08c:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].clip_max, "RollAPid_P_CLmx");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].clip_min, "RollAPid_P_CLmn");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].integrator.clip, "RollAPid_I_CLip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].integrator.postgain, "RollAPid_I_PstG");
8000f090:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f094:	2f 08       	sub	r8,-16
8000f096:	fe cb 04 0a 	sub	r11,pc,1034
8000f09a:	10 9c       	mov	r12,r8
8000f09c:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].integrator.pregain, "RollAPid_I_PreG");
8000f0a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f0a4:	2f 48       	sub	r8,-12
8000f0a6:	fe cb 04 0a 	sub	r11,pc,1034
8000f0aa:	10 9c       	mov	r12,r8
8000f0ac:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].differentiator.clip, "RollAPid_D_Clip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].differentiator.gain, "RollAPid_D_Gain");
8000f0b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f0b4:	2e 08       	sub	r8,-32
8000f0b6:	fe cb 04 0a 	sub	r11,pc,1034
8000f0ba:	10 9c       	mov	r12,r8
8000f0bc:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].differentiator.LPF, "RollAPid_D_LPF");

	// Pitch rate PID
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].p_gain, "PitchRPid_P_G");
8000f0c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f0c4:	2b c8       	sub	r8,-68
8000f0c6:	fe cb 04 0a 	sub	r11,pc,1034
8000f0ca:	10 9c       	mov	r12,r8
8000f0cc:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].clip_max, "PitchRPid_P_CLmx");
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].clip_min, "PitchRPid_P_CLmn");
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].integrator.clip, "PitchRPid_I_CLip");
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].integrator.postgain, "PitchRPid_I_PstG");
8000f0d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f0d4:	2a c8       	sub	r8,-84
8000f0d6:	fe cb 04 0a 	sub	r11,pc,1034
8000f0da:	10 9c       	mov	r12,r8
8000f0dc:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].integrator.pregain, "PitchRPid_I_PreG");
8000f0e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f0e4:	2b 08       	sub	r8,-80
8000f0e6:	fe cb 04 06 	sub	r11,pc,1030
8000f0ea:	10 9c       	mov	r12,r8
8000f0ec:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].differentiator.clip, "PitchRPid_D_Clip");
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].differentiator.gain, "PitchRPid_D_Gain");
8000f0f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f0f4:	29 c8       	sub	r8,-100
8000f0f6:	fe cb 04 02 	sub	r11,pc,1026
8000f0fa:	10 9c       	mov	r12,r8
8000f0fc:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].differentiator.LPF, "PitchRPid_D_LPF");
	
	// Pitch attitude PID
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].p_gain, "PitchAPid_P_G");
8000f100:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f104:	2b c8       	sub	r8,-68
8000f106:	fe cb 03 fe 	sub	r11,pc,1022
8000f10a:	10 9c       	mov	r12,r8
8000f10c:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].clip_max, "PitchAPid_P_CLmx");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].clip_min, "PitchAPid_P_CLmn");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].integrator.clip, "PitchAPid_I_CLip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].integrator.postgain, "PitchAPid_I_PstG");
8000f110:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f114:	2a c8       	sub	r8,-84
8000f116:	fe cb 03 fe 	sub	r11,pc,1022
8000f11a:	10 9c       	mov	r12,r8
8000f11c:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].integrator.pregain, "PitchAPid_I_PreG");
8000f120:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f124:	2b 08       	sub	r8,-80
8000f126:	fe cb 03 fa 	sub	r11,pc,1018
8000f12a:	10 9c       	mov	r12,r8
8000f12c:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].differentiator.clip, "PitchAPid_D_Clip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].differentiator.gain, "PitchAPid_D_Gain");
8000f130:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f134:	29 c8       	sub	r8,-100
8000f136:	fe cb 03 f6 	sub	r11,pc,1014
8000f13a:	10 9c       	mov	r12,r8
8000f13c:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].differentiator.LPF, "PitchAPid_D_LPF");

	// Yaw rate PID
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].p_gain, "YawRPid_P_G");
8000f140:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f144:	f0 c8 ff 78 	sub	r8,r8,-136
8000f148:	fe cb 03 f4 	sub	r11,pc,1012
8000f14c:	10 9c       	mov	r12,r8
8000f14e:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].clip_max, "YawRPid_P_CLmx");
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].clip_min, "YawRPid_P_CLmn");
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].integrator.clip, "YawRPid_I_CLip");
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].integrator.postgain, "YawRPid_I_PstG");
8000f152:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f156:	f0 c8 ff 68 	sub	r8,r8,-152
8000f15a:	fe cb 03 fa 	sub	r11,pc,1018
8000f15e:	10 9c       	mov	r12,r8
8000f160:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].integrator.pregain, "YawRPid_I_PreG");
8000f164:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f168:	f0 c8 ff 6c 	sub	r8,r8,-148
8000f16c:	fe cb 03 fc 	sub	r11,pc,1020
8000f170:	10 9c       	mov	r12,r8
8000f172:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].differentiator.clip, "YawRPid_D_Clip");
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].differentiator.gain, "YawRPid_D_Gain");
8000f176:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f17a:	f0 c8 ff 58 	sub	r8,r8,-168
8000f17e:	fe cb 03 fe 	sub	r11,pc,1022
8000f182:	10 9c       	mov	r12,r8
8000f184:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].differentiator.LPF, "YawRPid_D_LPF");
	
	// Yaw attitude PID
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].p_gain, "YawAPid_P_G");
8000f188:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f18c:	f0 c8 ff 78 	sub	r8,r8,-136
8000f190:	fe cb 04 00 	sub	r11,pc,1024
8000f194:	10 9c       	mov	r12,r8
8000f196:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].clip_max, "YawAPid_P_CLmx");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].clip_min, "YawAPid_P_CLmn");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].integrator.clip, "YawAPid_I_CLip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].integrator.postgain, "YawAPid_I_PstG");
8000f19a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f19e:	f0 c8 ff 68 	sub	r8,r8,-152
8000f1a2:	fe cb 04 06 	sub	r11,pc,1030
8000f1a6:	10 9c       	mov	r12,r8
8000f1a8:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].integrator.pregain, "YawAPid_I_PreG");
8000f1ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f1b0:	f0 c8 ff 6c 	sub	r8,r8,-148
8000f1b4:	fe cb 04 08 	sub	r11,pc,1032
8000f1b8:	10 9c       	mov	r12,r8
8000f1ba:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.clip, "YawAPid_D_Clip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.gain, "YawAPid_D_Gain");
8000f1be:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f1c2:	f0 c8 ff 58 	sub	r8,r8,-168
8000f1c6:	fe cb 04 0a 	sub	r11,pc,1034
8000f1ca:	10 9c       	mov	r12,r8
8000f1cc:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.LPF, "YawAPid_D_LPF");


	// Roll velocity PID
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].p_gain, "RollVPid_P_G");
8000f1d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f1d4:	fe cb 04 08 	sub	r11,pc,1032
8000f1d8:	10 9c       	mov	r12,r8
8000f1da:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].integrator.postgain, "RollVPid_I_PstG");
8000f1de:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f1e2:	2f 08       	sub	r8,-16
8000f1e4:	fe cb 04 08 	sub	r11,pc,1032
8000f1e8:	10 9c       	mov	r12,r8
8000f1ea:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].integrator.pregain, "RollVPid_I_PreG");
8000f1ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f1f2:	2f 48       	sub	r8,-12
8000f1f4:	fe cb 04 08 	sub	r11,pc,1032
8000f1f8:	10 9c       	mov	r12,r8
8000f1fa:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].differentiator.gain, "RollVPid_D_Gain");
8000f1fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f202:	2e 08       	sub	r8,-32
8000f204:	fe cb 04 08 	sub	r11,pc,1032
8000f208:	10 9c       	mov	r12,r8
8000f20a:	f0 16 00 0e 	mcall	r6[56]

	// Pitch velocity PID
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].p_gain, "PitchVPid_P_G");
8000f20e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f212:	2b c8       	sub	r8,-68
8000f214:	fe cb 04 08 	sub	r11,pc,1032
8000f218:	10 9c       	mov	r12,r8
8000f21a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].integrator.postgain, "PitchVPid_I_PstG");
8000f21e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f222:	2a c8       	sub	r8,-84
8000f224:	fe cb 04 08 	sub	r11,pc,1032
8000f228:	10 9c       	mov	r12,r8
8000f22a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].integrator.pregain, "PitchVPid_I_PreG");
8000f22e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f232:	2b 08       	sub	r8,-80
8000f234:	fe cb 04 04 	sub	r11,pc,1028
8000f238:	10 9c       	mov	r12,r8
8000f23a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].differentiator.gain, "PitchVPid_D_Gain");
8000f23e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f242:	29 c8       	sub	r8,-100
8000f244:	fe cb 04 00 	sub	r11,pc,1024
8000f248:	10 9c       	mov	r12,r8
8000f24a:	f0 16 00 0e 	mcall	r6[56]

	// Thrust velocity PID
	add_parameter_float(&velocity_stabiliser->thrust_controller.p_gain, "ThrVPid_P_G");
8000f24e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f252:	f0 c8 ff 34 	sub	r8,r8,-204
8000f256:	fe cb 03 fe 	sub	r11,pc,1022
8000f25a:	10 9c       	mov	r12,r8
8000f25c:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.integrator.postgain, "ThrVPid_I_PstG");
8000f260:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f264:	f0 c8 ff 24 	sub	r8,r8,-220
8000f268:	fe cb 04 04 	sub	r11,pc,1028
8000f26c:	10 9c       	mov	r12,r8
8000f26e:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.integrator.pregain, "ThrVPid_I_PreG");
8000f272:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f276:	f0 c8 ff 28 	sub	r8,r8,-216
8000f27a:	fe cb 04 06 	sub	r11,pc,1030
8000f27e:	10 9c       	mov	r12,r8
8000f280:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.differentiator.gain, "ThrVPid_D_Gain");
8000f284:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f288:	f0 c8 ff 14 	sub	r8,r8,-236
8000f28c:	fe cb 04 08 	sub	r11,pc,1032
8000f290:	10 9c       	mov	r12,r8
8000f292:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.differentiator.LPF, "ThrVPid_D_LPF");
8000f296:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f29a:	f0 c8 ff 0c 	sub	r8,r8,-244
8000f29e:	fe cb 04 0a 	sub	r11,pc,1034
8000f2a2:	10 9c       	mov	r12,r8
8000f2a4:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.soft_zone_width, "ThrVPid_soft");
8000f2a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f2ac:	f0 c8 fe f4 	sub	r8,r8,-268
8000f2b0:	fe cb 04 0c 	sub	r11,pc,1036
8000f2b4:	10 9c       	mov	r12,r8
8000f2b6:	f0 16 00 0e 	mcall	r6[56]

	// qfilter
	add_parameter_float(&centralData->imu1.attitude.kp, "QF_kp_acc");
8000f2ba:	ec f8 00 00 	ld.w	r8,r6[0]
8000f2be:	70 08       	ld.w	r8,r8[0x0]
8000f2c0:	f0 c8 ff 64 	sub	r8,r8,-156
8000f2c4:	fe cb 04 10 	sub	r11,pc,1040
8000f2c8:	10 9c       	mov	r12,r8
8000f2ca:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.kp_mag, "QF_kp_mag");
8000f2ce:	ec f8 00 00 	ld.w	r8,r6[0]
8000f2d2:	70 08       	ld.w	r8,r8[0x0]
8000f2d4:	f0 c8 ff 5c 	sub	r8,r8,-164
8000f2d8:	fe cb 04 18 	sub	r11,pc,1048
8000f2dc:	10 9c       	mov	r12,r8
8000f2de:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.gain, "YawAPid_D_Gain");
8000f2e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f2e6:	f0 c8 ff 58 	sub	r8,r8,-168
8000f2ea:	fe cb 05 2e 	sub	r11,pc,1326
8000f2ee:	10 9c       	mov	r12,r8
8000f2f0:	f0 16 00 0e 	mcall	r6[56]
	
	// Biaises
	add_parameter_float(&centralData->imu1.attitude.be[GYRO_OFFSET+X],"Bias_Gyro_X");
8000f2f4:	ec f8 00 00 	ld.w	r8,r6[0]
8000f2f8:	70 08       	ld.w	r8,r8[0x0]
8000f2fa:	2d 08       	sub	r8,-48
8000f2fc:	fe cb 04 30 	sub	r11,pc,1072
8000f300:	10 9c       	mov	r12,r8
8000f302:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[GYRO_OFFSET+Y],"Bias_Gyro_Y");
8000f306:	ec f8 00 00 	ld.w	r8,r6[0]
8000f30a:	70 08       	ld.w	r8,r8[0x0]
8000f30c:	2c c8       	sub	r8,-52
8000f30e:	fe cb 04 36 	sub	r11,pc,1078
8000f312:	10 9c       	mov	r12,r8
8000f314:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[GYRO_OFFSET+Z],"Bias_Gyro_Z");
8000f318:	ec f8 00 00 	ld.w	r8,r6[0]
8000f31c:	70 08       	ld.w	r8,r8[0x0]
8000f31e:	2c 88       	sub	r8,-56
8000f320:	fe cb 04 3c 	sub	r11,pc,1084
8000f324:	10 9c       	mov	r12,r8
8000f326:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.attitude.be[ACC_OFFSET+X],"Bias_Acc_X");
8000f32a:	ec f8 00 00 	ld.w	r8,r6[0]
8000f32e:	70 08       	ld.w	r8,r8[0x0]
8000f330:	2c 48       	sub	r8,-60
8000f332:	fe cb 04 42 	sub	r11,pc,1090
8000f336:	10 9c       	mov	r12,r8
8000f338:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[ACC_OFFSET+Y],"Bias_Acc_Y");
8000f33c:	ec f8 00 00 	ld.w	r8,r6[0]
8000f340:	70 08       	ld.w	r8,r8[0x0]
8000f342:	2c 08       	sub	r8,-64
8000f344:	fe cb 04 48 	sub	r11,pc,1096
8000f348:	10 9c       	mov	r12,r8
8000f34a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[ACC_OFFSET+Z],"Bias_Acc_Z");
8000f34e:	ec f8 00 00 	ld.w	r8,r6[0]
8000f352:	70 08       	ld.w	r8,r8[0x0]
8000f354:	2b c8       	sub	r8,-68
8000f356:	fe cb 04 4e 	sub	r11,pc,1102
8000f35a:	10 9c       	mov	r12,r8
8000f35c:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.attitude.be[COMPASS_OFFSET+X],"Bias_Mag_X");
8000f360:	ec f8 00 00 	ld.w	r8,r6[0]
8000f364:	70 08       	ld.w	r8,r8[0x0]
8000f366:	2b 88       	sub	r8,-72
8000f368:	fe cb 04 54 	sub	r11,pc,1108
8000f36c:	10 9c       	mov	r12,r8
8000f36e:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[COMPASS_OFFSET+Y],"Bias_Mag_Y");
8000f372:	ec f8 00 00 	ld.w	r8,r6[0]
8000f376:	70 08       	ld.w	r8,r8[0x0]
8000f378:	2b 48       	sub	r8,-76
8000f37a:	fe cb 04 5a 	sub	r11,pc,1114
8000f37e:	10 9c       	mov	r12,r8
8000f380:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[COMPASS_OFFSET+Z],"Bias_Mag_Z");
8000f384:	ec f8 00 00 	ld.w	r8,r6[0]
8000f388:	70 08       	ld.w	r8,r8[0x0]
8000f38a:	2b 08       	sub	r8,-80
8000f38c:	fe cb 04 60 	sub	r11,pc,1120
8000f390:	10 9c       	mov	r12,r8
8000f392:	f0 16 00 0e 	mcall	r6[56]
	
	// Scale factor
	add_parameter_float(&centralData->imu1.raw_scale[GYRO_OFFSET+X],"Scale_Gyro_X");
8000f396:	ec f8 00 00 	ld.w	r8,r6[0]
8000f39a:	70 08       	ld.w	r8,r8[0x0]
8000f39c:	f0 c8 fe ec 	sub	r8,r8,-276
8000f3a0:	fe cb 04 68 	sub	r11,pc,1128
8000f3a4:	10 9c       	mov	r12,r8
8000f3a6:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[GYRO_OFFSET+Y],"Scale_Gyro_Y");
8000f3aa:	ec f8 00 00 	ld.w	r8,r6[0]
8000f3ae:	70 08       	ld.w	r8,r8[0x0]
8000f3b0:	f0 c8 fe e8 	sub	r8,r8,-280
8000f3b4:	fe cb 04 6c 	sub	r11,pc,1132
8000f3b8:	10 9c       	mov	r12,r8
8000f3ba:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[GYRO_OFFSET+Z],"Scale_Gyro_Z");
8000f3be:	ec f8 00 00 	ld.w	r8,r6[0]
8000f3c2:	70 08       	ld.w	r8,r8[0x0]
8000f3c4:	f0 c8 fe e4 	sub	r8,r8,-284
8000f3c8:	fe cb 04 70 	sub	r11,pc,1136
8000f3cc:	10 9c       	mov	r12,r8
8000f3ce:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.raw_scale[ACC_OFFSET+X],"Scale_Acc_X");
8000f3d2:	ec f8 00 00 	ld.w	r8,r6[0]
8000f3d6:	70 08       	ld.w	r8,r8[0x0]
8000f3d8:	f0 c8 fe e0 	sub	r8,r8,-288
8000f3dc:	fe cb 04 74 	sub	r11,pc,1140
8000f3e0:	10 9c       	mov	r12,r8
8000f3e2:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[ACC_OFFSET+Y],"Scale_Acc_Y");
8000f3e6:	ec f8 00 00 	ld.w	r8,r6[0]
8000f3ea:	70 08       	ld.w	r8,r8[0x0]
8000f3ec:	f0 c8 fe dc 	sub	r8,r8,-292
8000f3f0:	fe cb 04 7c 	sub	r11,pc,1148
8000f3f4:	10 9c       	mov	r12,r8
8000f3f6:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[ACC_OFFSET+Z],"Scale_Acc_Z");
8000f3fa:	ec f8 00 00 	ld.w	r8,r6[0]
8000f3fe:	70 08       	ld.w	r8,r8[0x0]
8000f400:	f0 c8 fe d8 	sub	r8,r8,-296
8000f404:	fe cb 04 84 	sub	r11,pc,1156
8000f408:	10 9c       	mov	r12,r8
8000f40a:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.raw_scale[COMPASS_OFFSET+X],"Scale_Mag_X");
8000f40e:	ec f8 00 00 	ld.w	r8,r6[0]
8000f412:	70 08       	ld.w	r8,r8[0x0]
8000f414:	f0 c8 fe d4 	sub	r8,r8,-300
8000f418:	fe cb 04 8c 	sub	r11,pc,1164
8000f41c:	10 9c       	mov	r12,r8
8000f41e:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[COMPASS_OFFSET+Y],"Scale_Mag_Y");
8000f422:	ec f8 00 00 	ld.w	r8,r6[0]
8000f426:	70 08       	ld.w	r8,r8[0x0]
8000f428:	f0 c8 fe d0 	sub	r8,r8,-304
8000f42c:	fe cb 04 94 	sub	r11,pc,1172
8000f430:	10 9c       	mov	r12,r8
8000f432:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[COMPASS_OFFSET+Z],"Scale_Mag_Z");
8000f436:	ec f8 00 00 	ld.w	r8,r6[0]
8000f43a:	70 08       	ld.w	r8,r8[0x0]
8000f43c:	f0 c8 fe cc 	sub	r8,r8,-308
8000f440:	fe cb 04 9c 	sub	r11,pc,1180
8000f444:	10 9c       	mov	r12,r8
8000f446:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_uint8(&(mavlink_system.sysid),"ID_System");
8000f44a:	fe cb 04 9a 	sub	r11,pc,1178
8000f44e:	ec fc 00 74 	ld.w	r12,r6[116]
8000f452:	f0 16 00 e7 	mcall	r6[924]
	add_parameter_uint8(&(mavlink_mission_planner.sysid),"ID_Planner");
8000f456:	fe cb 04 9a 	sub	r11,pc,1178
8000f45a:	ec fc 00 c8 	ld.w	r12,r6[200]
8000f45e:	f0 16 00 e7 	mcall	r6[924]

	add_parameter_float(&centralData->position_estimator.kp_alt,"Pos_kp_alt");
8000f462:	ec f8 00 00 	ld.w	r8,r6[0]
8000f466:	70 08       	ld.w	r8,r8[0x0]
8000f468:	f0 c8 f6 64 	sub	r8,r8,-2460
8000f46c:	fe cb 04 a4 	sub	r11,pc,1188
8000f470:	10 9c       	mov	r12,r8
8000f472:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_vel_baro,"Pos_kp_velb");
8000f476:	ec f8 00 00 	ld.w	r8,r6[0]
8000f47a:	70 08       	ld.w	r8,r8[0x0]
8000f47c:	f0 c8 f6 60 	sub	r8,r8,-2464
8000f480:	fe cb 04 ac 	sub	r11,pc,1196
8000f484:	10 9c       	mov	r12,r8
8000f486:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_pos[0],"Pos_kp_pos0");
8000f48a:	ec f8 00 00 	ld.w	r8,r6[0]
8000f48e:	70 08       	ld.w	r8,r8[0x0]
8000f490:	f0 c8 f6 70 	sub	r8,r8,-2448
8000f494:	fe cb 04 b4 	sub	r11,pc,1204
8000f498:	10 9c       	mov	r12,r8
8000f49a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_pos[1],"Pos_kp_pos1");
8000f49e:	ec f8 00 00 	ld.w	r8,r6[0]
8000f4a2:	70 08       	ld.w	r8,r8[0x0]
8000f4a4:	f0 c8 f6 6c 	sub	r8,r8,-2452
8000f4a8:	fe cb 04 bc 	sub	r11,pc,1212
8000f4ac:	10 9c       	mov	r12,r8
8000f4ae:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_pos[2],"Pos_kp_pos2");
8000f4b2:	ec f8 00 00 	ld.w	r8,r6[0]
8000f4b6:	70 08       	ld.w	r8,r8[0x0]
8000f4b8:	f0 c8 f6 68 	sub	r8,r8,-2456
8000f4bc:	fe cb 04 c4 	sub	r11,pc,1220
8000f4c0:	10 9c       	mov	r12,r8
8000f4c2:	f0 16 00 0e 	mcall	r6[56]
}
8000f4c6:	2f dd       	sub	sp,-12
8000f4c8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000f4cc:	80 00       	ld.sh	r0,r0[0x0]
8000f4ce:	ee 94 eb cd 	brge	8020cc68 <_data_lma+0x1d9418>

8000f4d0 <init_mavlink_actions>:

void init_mavlink_actions(void) {
8000f4d0:	eb cd 40 e0 	pushm	r5-r7,lr
8000f4d4:	1a 97       	mov	r7,sp
8000f4d6:	4e e6       	lddpc	r6,8000f68c <init_mavlink_actions+0x1bc>
8000f4d8:	1e 26       	rsub	r6,pc
	//board=get_board_hardware();
	centralData=get_central_data();
8000f4da:	f0 16 00 33 	mcall	r6[204]
8000f4de:	18 99       	mov	r9,r12
8000f4e0:	ec f8 00 00 	ld.w	r8,r6[0]
8000f4e4:	91 09       	st.w	r8[0x0],r9
	add_PID_parameters();
8000f4e6:	f0 16 01 a3 	mcall	r6[1676]
	
	//write_parameters_to_flashc();
	
	read_parameters_from_flashc();
8000f4ea:	f0 16 01 20 	mcall	r6[1152]
	
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_heartbeat, MAVLINK_MSG_ID_HEARTBEAT);
8000f4ee:	ec f5 06 e8 	ld.w	r5,r6[1768]
8000f4f2:	f0 16 00 26 	mcall	r6[152]
8000f4f6:	30 08       	mov	r8,0
8000f4f8:	0a 99       	mov	r9,r5
8000f4fa:	30 2a       	mov	r10,2
8000f4fc:	e6 7b a1 20 	mov	r11,500000
8000f500:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(), 1000000, RUN_NEVER, &mavlink_send_attitude_quaternion, MAVLINK_MSG_ID_ATTITUDE_QUATERNION);
8000f504:	ec f5 07 7c 	ld.w	r5,r6[1916]
8000f508:	f0 16 00 26 	mcall	r6[152]
8000f50c:	31 f8       	mov	r8,31
8000f50e:	0a 99       	mov	r9,r5
8000f510:	30 0a       	mov	r10,0
8000f512:	ee 7b 42 40 	mov	r11,1000000
8000f516:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_attitude, MAVLINK_MSG_ID_ATTITUDE);
8000f51a:	ec f5 07 e4 	ld.w	r5,r6[2020]
8000f51e:	f0 16 00 26 	mcall	r6[152]
8000f522:	31 e8       	mov	r8,30
8000f524:	0a 99       	mov	r9,r5
8000f526:	30 2a       	mov	r10,2
8000f528:	e2 7b 0d 40 	mov	r11,200000
8000f52c:	f0 16 00 25 	mcall	r6[148]
	
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_hud, MAVLINK_MSG_ID_VFR_HUD);
8000f530:	ec f5 06 60 	ld.w	r5,r6[1632]
8000f534:	f0 16 00 26 	mcall	r6[152]
8000f538:	34 a8       	mov	r8,74
8000f53a:	0a 99       	mov	r9,r5
8000f53c:	30 2a       	mov	r10,2
8000f53e:	e6 7b a1 20 	mov	r11,500000
8000f542:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_pressure, MAVLINK_MSG_ID_SCALED_PRESSURE);
8000f546:	ec f5 05 10 	ld.w	r5,r6[1296]
8000f54a:	f0 16 00 26 	mcall	r6[152]
8000f54e:	31 d8       	mov	r8,29
8000f550:	0a 99       	mov	r9,r5
8000f552:	30 2a       	mov	r10,2
8000f554:	e6 7b a1 20 	mov	r11,500000
8000f558:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_scaled_imu, MAVLINK_MSG_ID_SCALED_IMU);
8000f55c:	ec f5 05 0c 	ld.w	r5,r6[1292]
8000f560:	f0 16 00 26 	mcall	r6[152]
8000f564:	31 a8       	mov	r8,26
8000f566:	0a 99       	mov	r9,r5
8000f568:	30 2a       	mov	r10,2
8000f56a:	e2 7b 0d 40 	mov	r11,200000
8000f56e:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_raw_imu, MAVLINK_MSG_ID_RAW_IMU);
8000f572:	ec f5 05 14 	ld.w	r5,r6[1300]
8000f576:	f0 16 00 26 	mcall	r6[152]
8000f57a:	31 b8       	mov	r8,27
8000f57c:	0a 99       	mov	r9,r5
8000f57e:	30 2a       	mov	r10,2
8000f580:	e6 7b a1 20 	mov	r11,500000
8000f584:	f0 16 00 25 	mcall	r6[148]

	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_rpy_rates_error, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT);
8000f588:	ec f5 05 a8 	ld.w	r5,r6[1448]
8000f58c:	f0 16 00 26 	mcall	r6[152]
8000f590:	35 08       	mov	r8,80
8000f592:	0a 99       	mov	r9,r5
8000f594:	30 0a       	mov	r10,0
8000f596:	e2 7b 0d 40 	mov	r11,200000
8000f59a:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_rpy_speed_thrust_setpoint, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT);
8000f59e:	ec f5 05 98 	ld.w	r5,r6[1432]
8000f5a2:	f0 16 00 26 	mcall	r6[152]
8000f5a6:	33 b8       	mov	r8,59
8000f5a8:	0a 99       	mov	r9,r5
8000f5aa:	30 0a       	mov	r10,0
8000f5ac:	e2 7b 0d 40 	mov	r11,200000
8000f5b0:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_rpy_thrust_setpoint, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT);
8000f5b4:	ec f5 05 3c 	ld.w	r5,r6[1340]
8000f5b8:	f0 16 00 26 	mcall	r6[152]
8000f5bc:	33 a8       	mov	r8,58
8000f5be:	0a 99       	mov	r9,r5
8000f5c0:	30 0a       	mov	r10,0
8000f5c2:	e2 7b 0d 40 	mov	r11,200000
8000f5c6:	f0 16 00 25 	mcall	r6[148]


	add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_servo_output, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW);
8000f5ca:	ec f5 07 70 	ld.w	r5,r6[1904]
8000f5ce:	f0 16 00 26 	mcall	r6[152]
8000f5d2:	32 48       	mov	r8,36
8000f5d4:	0a 99       	mov	r9,r5
8000f5d6:	30 2a       	mov	r10,2
8000f5d8:	e2 7b d0 90 	mov	r11,250000
8000f5dc:	f0 16 00 25 	mcall	r6[148]
//	add_task(get_mavlink_taskset(),  50000, &mavlink_send_radar);
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_estimator, MAVLINK_MSG_ID_LOCAL_POSITION_NED);
8000f5e0:	ec f5 07 04 	ld.w	r5,r6[1796]
8000f5e4:	f0 16 00 26 	mcall	r6[152]
8000f5e8:	32 08       	mov	r8,32
8000f5ea:	0a 99       	mov	r9,r5
8000f5ec:	30 2a       	mov	r10,2
8000f5ee:	e2 7b 0d 40 	mov	r11,200000
8000f5f2:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_global_position, MAVLINK_MSG_ID_GLOBAL_POSITION_INT);
8000f5f6:	ec f5 07 64 	ld.w	r5,r6[1892]
8000f5fa:	f0 16 00 26 	mcall	r6[152]
8000f5fe:	32 18       	mov	r8,33
8000f600:	0a 99       	mov	r9,r5
8000f602:	30 2a       	mov	r10,2
8000f604:	e2 7b 0d 40 	mov	r11,200000
8000f608:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_gps_raw, MAVLINK_MSG_ID_GPS_RAW_INT);
8000f60c:	ec f5 07 94 	ld.w	r5,r6[1940]
8000f610:	f0 16 00 26 	mcall	r6[152]
8000f614:	31 88       	mov	r8,24
8000f616:	0a 99       	mov	r9,r5
8000f618:	30 2a       	mov	r10,2
8000f61a:	e2 7b d0 90 	mov	r11,250000
8000f61e:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_raw_rc_channels, MAVLINK_MSG_ID_RC_CHANNELS_RAW);
8000f622:	ec f5 06 3c 	ld.w	r5,r6[1596]
8000f626:	f0 16 00 26 	mcall	r6[152]
8000f62a:	32 38       	mov	r8,35
8000f62c:	0a 99       	mov	r9,r5
8000f62e:	30 2a       	mov	r10,2
8000f630:	e2 7b 0d 40 	mov	r11,200000
8000f634:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_scaled_rc_channels, MAVLINK_MSG_ID_RC_CHANNELS_SCALED);
8000f638:	ec f5 07 68 	ld.w	r5,r6[1896]
8000f63c:	f0 16 00 26 	mcall	r6[152]
8000f640:	32 28       	mov	r8,34
8000f642:	0a 99       	mov	r9,r5
8000f644:	30 2a       	mov	r10,2
8000f646:	e2 7b d0 90 	mov	r11,250000
8000f64a:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_simulation, MAVLINK_MSG_ID_HIL_STATE);
8000f64e:	ec f5 07 f8 	ld.w	r5,r6[2040]
8000f652:	f0 16 00 26 	mcall	r6[152]
8000f656:	35 a8       	mov	r8,90
8000f658:	0a 99       	mov	r9,r5
8000f65a:	30 2a       	mov	r10,2
8000f65c:	e6 7b a1 20 	mov	r11,500000
8000f660:	f0 16 00 25 	mcall	r6[148]
	//add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_kalman_estimator, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT);
	add_task(get_mavlink_taskset(),  250000, RUN_NEVER, &send_rt_stats, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT);
8000f664:	ec f5 06 a8 	ld.w	r5,r6[1704]
8000f668:	f0 16 00 26 	mcall	r6[152]
8000f66c:	e0 68 00 fb 	mov	r8,251
8000f670:	0a 99       	mov	r9,r5
8000f672:	30 0a       	mov	r10,0
8000f674:	e2 7b d0 90 	mov	r11,250000
8000f678:	f0 16 00 25 	mcall	r6[148]
	
	sort_taskset_by_period(get_mavlink_taskset());
8000f67c:	f0 16 00 26 	mcall	r6[152]
8000f680:	18 98       	mov	r8,r12
8000f682:	10 9c       	mov	r12,r8
8000f684:	f0 16 01 ae 	mcall	r6[1720]
}
8000f688:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000f68c:	80 00       	ld.sh	r0,r0[0x0]
8000f68e:	f3 5c eb cd 	st.h	r9[-5171],r12

8000f690 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8000f690:	eb cd 40 c0 	pushm	r6-r7,lr
8000f694:	1a 97       	mov	r7,sp
8000f696:	20 6d       	sub	sp,24
8000f698:	49 e6       	lddpc	r6,8000f710 <interpolate+0x80>
8000f69a:	1e 26       	rsub	r6,pc
8000f69c:	ef 4c ff f8 	st.w	r7[-8],r12
8000f6a0:	ef 4b ff f4 	st.w	r7[-12],r11
8000f6a4:	ef 4a ff f0 	st.w	r7[-16],r10
8000f6a8:	ef 49 ff ec 	st.w	r7[-20],r9
8000f6ac:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8000f6b0:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000f6b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000f6b8:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8000f6bc:	c0 41       	brne	8000f6c4 <interpolate+0x34>
	{
		return y1;
8000f6be:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000f6c2:	c2 38       	rjmp	8000f708 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8000f6c4:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000f6c8:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000f6cc:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000f6d0:	ee fa ff f8 	ld.w	r10,r7[-8]
8000f6d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f6d8:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000f6dc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000f6e0:	ee fa ff f0 	ld.w	r10,r7[-16]
8000f6e4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000f6e8:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000f6ec:	12 9b       	mov	r11,r9
8000f6ee:	10 9c       	mov	r12,r8
8000f6f0:	f0 16 00 08 	mcall	r6[32]
8000f6f4:	18 98       	mov	r8,r12
8000f6f6:	10 99       	mov	r9,r8
8000f6f8:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000f6fc:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000f700:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8000f704:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000f708:	10 9c       	mov	r12,r8
8000f70a:	2f ad       	sub	sp,-24
8000f70c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000f710:	80 00       	ld.sh	r0,r0[0x0]
8000f712:	f5 1e eb cd 	ld.uh	lr,r10[-5171]

8000f714 <get_roll_from_remote>:
	#include "joystick_rc.h"
#endif



static float inline get_roll_from_remote()	{return rc_get_channel_neutral(RC_ROLL)*RC_ROLL_DIR * RC_SCALEFACTOR; };
8000f714:	eb cd 40 c0 	pushm	r6-r7,lr
8000f718:	1a 97       	mov	r7,sp
8000f71a:	48 e6       	lddpc	r6,8000f750 <get_roll_from_remote+0x3c>
8000f71c:	1e 26       	rsub	r6,pc
8000f71e:	30 1c       	mov	r12,1
8000f720:	f0 16 00 c7 	mcall	r6[796]
8000f724:	18 98       	mov	r8,r12
8000f726:	5c 38       	neg	r8
8000f728:	10 9c       	mov	r12,r8
8000f72a:	f0 16 00 1a 	mcall	r6[104]
8000f72e:	30 08       	mov	r8,0
8000f730:	e0 69 e0 00 	mov	r9,57344
8000f734:	ea 19 40 75 	orh	r9,0x4075
8000f738:	f0 16 00 0c 	mcall	r6[48]
8000f73c:	14 98       	mov	r8,r10
8000f73e:	16 99       	mov	r9,r11
8000f740:	10 9a       	mov	r10,r8
8000f742:	12 9b       	mov	r11,r9
8000f744:	f0 16 00 09 	mcall	r6[36]
8000f748:	18 98       	mov	r8,r12
8000f74a:	10 9c       	mov	r12,r8
8000f74c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000f750:	80 00       	ld.sh	r0,r0[0x0]
8000f752:	f5 a0 eb cd 	stc0.w	r0[0x3b34],cr11

8000f754 <get_pitch_from_remote>:
static float inline get_pitch_from_remote()	{return rc_get_channel_neutral(RC_PITCH)*RC_PITCH_DIR * RC_SCALEFACTOR; };
8000f754:	eb cd 40 c0 	pushm	r6-r7,lr
8000f758:	1a 97       	mov	r7,sp
8000f75a:	48 e6       	lddpc	r6,8000f790 <get_pitch_from_remote+0x3c>
8000f75c:	1e 26       	rsub	r6,pc
8000f75e:	30 2c       	mov	r12,2
8000f760:	f0 16 00 c7 	mcall	r6[796]
8000f764:	18 98       	mov	r8,r12
8000f766:	10 9c       	mov	r12,r8
8000f768:	f0 16 00 1a 	mcall	r6[104]
8000f76c:	30 08       	mov	r8,0
8000f76e:	e0 69 e0 00 	mov	r9,57344
8000f772:	ea 19 40 75 	orh	r9,0x4075
8000f776:	f0 16 00 0c 	mcall	r6[48]
8000f77a:	14 98       	mov	r8,r10
8000f77c:	16 99       	mov	r9,r11
8000f77e:	10 9a       	mov	r10,r8
8000f780:	12 9b       	mov	r11,r9
8000f782:	f0 16 00 09 	mcall	r6[36]
8000f786:	18 98       	mov	r8,r12
8000f788:	10 9c       	mov	r12,r8
8000f78a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000f78e:	00 00       	add	r0,r0
8000f790:	80 00       	ld.sh	r0,r0[0x0]
8000f792:	f5 e0 eb cd 	sthh.w	sp[0x2f0],r10:t,r0:b

8000f794 <get_yaw_from_remote>:
static float inline get_yaw_from_remote()	{return rc_get_channel_neutral(RC_YAW)*RC_YAW_DIR * RC_SCALEFACTOR; };
8000f794:	eb cd 40 c0 	pushm	r6-r7,lr
8000f798:	1a 97       	mov	r7,sp
8000f79a:	48 e6       	lddpc	r6,8000f7d0 <get_yaw_from_remote+0x3c>
8000f79c:	1e 26       	rsub	r6,pc
8000f79e:	30 3c       	mov	r12,3
8000f7a0:	f0 16 00 c7 	mcall	r6[796]
8000f7a4:	18 98       	mov	r8,r12
8000f7a6:	10 9c       	mov	r12,r8
8000f7a8:	f0 16 00 1a 	mcall	r6[104]
8000f7ac:	30 08       	mov	r8,0
8000f7ae:	e0 69 e0 00 	mov	r9,57344
8000f7b2:	ea 19 40 75 	orh	r9,0x4075
8000f7b6:	f0 16 00 0c 	mcall	r6[48]
8000f7ba:	14 98       	mov	r8,r10
8000f7bc:	16 99       	mov	r9,r11
8000f7be:	10 9a       	mov	r10,r8
8000f7c0:	12 9b       	mov	r11,r9
8000f7c2:	f0 16 00 09 	mcall	r6[36]
8000f7c6:	18 98       	mov	r8,r12
8000f7c8:	10 9c       	mov	r12,r8
8000f7ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000f7ce:	00 00       	add	r0,r0
8000f7d0:	80 00       	ld.sh	r0,r0[0x0]
8000f7d2:	f6 20 eb cd 	sub	r0,-594995

8000f7d4 <get_thrust_from_remote>:
static float inline get_thrust_from_remote()	{return rc_get_channel(RC_THROTTLE)*RC_THROTTLE_DIR*RC_SCALEFACTOR; };
8000f7d4:	eb cd 40 c0 	pushm	r6-r7,lr
8000f7d8:	1a 97       	mov	r7,sp
8000f7da:	48 e6       	lddpc	r6,8000f810 <get_thrust_from_remote+0x3c>
8000f7dc:	1e 26       	rsub	r6,pc
8000f7de:	30 0c       	mov	r12,0
8000f7e0:	f0 16 00 22 	mcall	r6[136]
8000f7e4:	18 98       	mov	r8,r12
8000f7e6:	10 9c       	mov	r12,r8
8000f7e8:	f0 16 00 1a 	mcall	r6[104]
8000f7ec:	30 08       	mov	r8,0
8000f7ee:	e0 69 e0 00 	mov	r9,57344
8000f7f2:	ea 19 40 75 	orh	r9,0x4075
8000f7f6:	f0 16 00 0c 	mcall	r6[48]
8000f7fa:	14 98       	mov	r8,r10
8000f7fc:	16 99       	mov	r9,r11
8000f7fe:	10 9a       	mov	r10,r8
8000f800:	12 9b       	mov	r11,r9
8000f802:	f0 16 00 09 	mcall	r6[36]
8000f806:	18 98       	mov	r8,r12
8000f808:	10 9c       	mov	r12,r8
8000f80a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000f80e:	00 00       	add	r0,r0
8000f810:	80 00       	ld.sh	r0,r0[0x0]
8000f812:	f6 60 eb cd 	mov	r0,-594995

8000f814 <get_command_from_remote>:


static inline Control_Command_t get_command_from_remote()
{
8000f814:	eb cd 40 e0 	pushm	r5-r7,lr
8000f818:	1a 97       	mov	r7,sp
8000f81a:	20 bd       	sub	sp,44
8000f81c:	49 c6       	lddpc	r6,8000f88c <get_command_from_remote+0x78>
8000f81e:	1e 26       	rsub	r6,pc
8000f820:	18 95       	mov	r5,r12
	Control_Command_t controls;
	controls.rpy[ROLL]= get_roll_from_remote()*RC_INPUT_SCALE;
8000f822:	c7 9f       	rcall	8000f714 <get_roll_from_remote>
8000f824:	18 98       	mov	r8,r12
8000f826:	ef 48 ff d4 	st.w	r7[-44],r8
	controls.rpy[PITCH]= get_pitch_from_remote()*RC_INPUT_SCALE;
8000f82a:	c9 5f       	rcall	8000f754 <get_pitch_from_remote>
8000f82c:	18 98       	mov	r8,r12
8000f82e:	ef 48 ff d8 	st.w	r7[-40],r8
	controls.rpy[YAW]= get_yaw_from_remote()*RC_INPUT_SCALE;
8000f832:	cb 1f       	rcall	8000f794 <get_yaw_from_remote>
8000f834:	18 98       	mov	r8,r12
8000f836:	ef 48 ff dc 	st.w	r7[-36],r8
	controls.thrust = get_thrust_from_remote();
8000f83a:	cc df       	rcall	8000f7d4 <get_thrust_from_remote>
8000f83c:	18 98       	mov	r8,r12
8000f83e:	ef 48 ff e0 	st.w	r7[-32],r8
	
	return controls;
8000f842:	0a 98       	mov	r8,r5
8000f844:	ee c9 00 2c 	sub	r9,r7,44
8000f848:	f0 ca 00 00 	sub	r10,r8,0
8000f84c:	f2 cb 00 00 	sub	r11,r9,0
8000f850:	76 0c       	ld.w	r12,r11[0x0]
8000f852:	95 0c       	st.w	r10[0x0],r12
8000f854:	76 1c       	ld.w	r12,r11[0x4]
8000f856:	95 1c       	st.w	r10[0x4],r12
8000f858:	76 2c       	ld.w	r12,r11[0x8]
8000f85a:	95 2c       	st.w	r10[0x8],r12
8000f85c:	76 3b       	ld.w	r11,r11[0xc]
8000f85e:	95 3b       	st.w	r10[0xc],r11
8000f860:	f0 ca ff f0 	sub	r10,r8,-16
8000f864:	f2 cb ff f0 	sub	r11,r9,-16
8000f868:	76 0c       	ld.w	r12,r11[0x0]
8000f86a:	95 0c       	st.w	r10[0x0],r12
8000f86c:	76 1c       	ld.w	r12,r11[0x4]
8000f86e:	95 1c       	st.w	r10[0x4],r12
8000f870:	76 2c       	ld.w	r12,r11[0x8]
8000f872:	95 2c       	st.w	r10[0x8],r12
8000f874:	76 3b       	ld.w	r11,r11[0xc]
8000f876:	95 3b       	st.w	r10[0xc],r11
8000f878:	f2 ea 00 20 	ld.d	r10,r9[32]
8000f87c:	f0 eb 00 20 	st.d	r8[32],r10
8000f880:	72 a9       	ld.w	r9,r9[0x28]
8000f882:	91 a9       	st.w	r8[0x28],r9
}
8000f884:	0a 9c       	mov	r12,r5
8000f886:	2f 5d       	sub	sp,-44
8000f888:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000f88c:	80 00       	ld.sh	r0,r0[0x0]
8000f88e:	f6 a2       	*unknown*

8000f890 <get_channel_mode>:

#ifdef SPEKTRUM_REMOTE
	static inline void get_channel_mode(uint8_t* chanSwitch)
	{
8000f890:	eb cd 40 c0 	pushm	r6-r7,lr
8000f894:	1a 97       	mov	r7,sp
8000f896:	20 1d       	sub	sp,4
8000f898:	49 36       	lddpc	r6,8000f8e4 <get_channel_mode+0x54>
8000f89a:	1e 26       	rsub	r6,pc
8000f89c:	ef 4c ff fc 	st.w	r7[-4],r12
		//TODO: remap with remote!
		*chanSwitch |= 0x00;
8000f8a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f8a4:	11 88       	ld.ub	r8,r8[0x0]
8000f8a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000f8aa:	b2 88       	st.b	r9[0x0],r8
	
		if (rc_get_channel(RC_SAFETY)<0) 
8000f8ac:	30 4c       	mov	r12,4
8000f8ae:	f0 16 00 22 	mcall	r6[136]
8000f8b2:	18 98       	mov	r8,r12
8000f8b4:	10 99       	mov	r9,r8
8000f8b6:	30 08       	mov	r8,0
8000f8b8:	f0 09 19 00 	cp.h	r9,r8
8000f8bc:	c0 84       	brge	8000f8cc <get_channel_mode+0x3c>
		{	*chanSwitch |= 0x00; }
8000f8be:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f8c2:	11 88       	ld.ub	r8,r8[0x0]
8000f8c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000f8c8:	b2 88       	st.b	r9[0x0],r8
8000f8ca:	c0 98       	rjmp	8000f8dc <get_channel_mode+0x4c>
		// else if(rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)<0)
		// {	*chanSwitch |= 0x01; }
		// else if (rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)>20)
		// {	*chanSwitch |= 0x03; }
		else 
		{	*chanSwitch |= 0x02; }
8000f8cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f8d0:	11 88       	ld.ub	r8,r8[0x0]
8000f8d2:	a1 b8       	sbr	r8,0x1
8000f8d4:	5c 58       	castu.b	r8
8000f8d6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000f8da:	b2 88       	st.b	r9[0x0],r8
	}
8000f8dc:	2f fd       	sub	sp,-4
8000f8de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000f8e2:	00 00       	add	r0,r0
8000f8e4:	80 00       	ld.sh	r0,r0[0x0]
8000f8e6:	f7 1e eb cd 	ld.uh	lr,r11[-5171]

8000f8e8 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8000f8e8:	eb cd 40 c0 	pushm	r6-r7,lr
8000f8ec:	1a 97       	mov	r7,sp
8000f8ee:	20 3d       	sub	sp,12
8000f8f0:	49 06       	lddpc	r6,8000f930 <mav_array_memcpy+0x48>
8000f8f2:	1e 26       	rsub	r6,pc
8000f8f4:	ef 4c ff fc 	st.w	r7[-4],r12
8000f8f8:	ef 4b ff f8 	st.w	r7[-8],r11
8000f8fc:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8000f900:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f904:	58 08       	cp.w	r8,0
8000f906:	c0 91       	brne	8000f918 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000f908:	ee fa ff f4 	ld.w	r10,r7[-12]
8000f90c:	30 0b       	mov	r11,0
8000f90e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000f912:	f0 16 00 31 	mcall	r6[196]
8000f916:	c0 98       	rjmp	8000f928 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000f918:	ee fa ff f4 	ld.w	r10,r7[-12]
8000f91c:	ee fb ff f8 	ld.w	r11,r7[-8]
8000f920:	ee fc ff fc 	ld.w	r12,r7[-4]
8000f924:	f0 16 00 1b 	mcall	r6[108]
	}
}
8000f928:	2f dd       	sub	sp,-12
8000f92a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000f92e:	00 00       	add	r0,r0
8000f930:	80 00       	ld.sh	r0,r0[0x0]
8000f932:	f7 76 eb cd 	stcond	r11[-5171],r6

8000f934 <get_main_taskset>:

#define PRESSURE_LPF 0.1

central_data_t *centralData;

task_set* get_main_taskset() {
8000f934:	eb cd 40 c0 	pushm	r6-r7,lr
8000f938:	1a 97       	mov	r7,sp
8000f93a:	48 46       	lddpc	r6,8000f948 <get_main_taskset+0x14>
8000f93c:	1e 26       	rsub	r6,pc
	return &main_tasks;
8000f93e:	ec f8 01 30 	ld.w	r8,r6[304]
}
8000f942:	10 9c       	mov	r12,r8
8000f944:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000f948:	80 00       	ld.sh	r0,r0[0x0]
8000f94a:	f7 c0       	*unknown*

8000f94c <run_imu_update>:

task_return_t run_imu_update() {
8000f94c:	eb cd 40 c0 	pushm	r6-r7,lr
8000f950:	1a 97       	mov	r7,sp
8000f952:	48 d6       	lddpc	r6,8000f984 <run_imu_update+0x38>
8000f954:	1e 26       	rsub	r6,pc
	imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);	
8000f956:	ec f8 00 00 	ld.w	r8,r6[0]
8000f95a:	70 08       	ld.w	r8,r8[0x0]
8000f95c:	f0 c9 f8 b0 	sub	r9,r8,-1872
8000f960:	ec f8 00 00 	ld.w	r8,r6[0]
8000f964:	70 08       	ld.w	r8,r8[0x0]
8000f966:	f0 ca f2 f4 	sub	r10,r8,-3340
8000f96a:	ec f8 00 00 	ld.w	r8,r6[0]
8000f96e:	70 08       	ld.w	r8,r8[0x0]
8000f970:	f0 cb f6 7c 	sub	r11,r8,-2436
8000f974:	ec f8 00 00 	ld.w	r8,r6[0]
8000f978:	70 08       	ld.w	r8,r8[0x0]
8000f97a:	10 9c       	mov	r12,r8
8000f97c:	f0 16 00 9e 	mcall	r6[632]
}	
8000f980:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000f984:	80 00       	ld.sh	r0,r0[0x0]
8000f986:	f7 d8 6d 6f 	ldins.b	r8:u,r11[-657]
8000f98a:	74 6f       	ld.w	pc,r10[0x18]
8000f98c:	72 20       	ld.w	r0,r9[0x8]
8000f98e:	6f 6e       	ld.w	lr,r7[0x58]
8000f990:	3a 20       	mov	r0,-94
8000f992:	79 61       	ld.w	r1,r12[0x58]
8000f994:	77 3d       	ld.w	sp,r11[0x4c]
8000f996:	0a 00       	add	r0,r5

8000f998 <rc_user_channels>:

void rc_user_channels(uint8_t *chanSwitch, int8_t *rc_check, int8_t *motorbool)
{
8000f998:	eb cd 40 e0 	pushm	r5-r7,lr
8000f99c:	1a 97       	mov	r7,sp
8000f99e:	20 3d       	sub	sp,12
8000f9a0:	4c f6       	lddpc	r6,8000fadc <rc_user_channels+0x144>
8000f9a2:	1e 26       	rsub	r6,pc
8000f9a4:	ef 4c ff fc 	st.w	r7[-4],r12
8000f9a8:	ef 4b ff f8 	st.w	r7[-8],r11
8000f9ac:	ef 4a ff f4 	st.w	r7[-12],r10
	
	get_channel_mode(chanSwitch);
8000f9b0:	ee fc ff fc 	ld.w	r12,r7[-4]
8000f9b4:	c6 ef       	rcall	8000f890 <get_channel_mode>
	//dbg_print_num(*chanSwitch,10);
	//dbg_print_num(getChannel(4),10);
	//dbg_print_num(getChannel(5),10);
	//dbg_print("\n");
	
	if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() > 0.9))
8000f9b6:	c0 ff       	rcall	8000f7d4 <get_thrust_from_remote>
8000f9b8:	18 98       	mov	r8,r12
8000f9ba:	10 9c       	mov	r12,r8
8000f9bc:	f0 16 00 02 	mcall	r6[8]
8000f9c0:	30 05       	mov	r5,0
8000f9c2:	e0 68 66 66 	mov	r8,26214
8000f9c6:	ea 18 66 66 	orh	r8,0x6666
8000f9ca:	e0 69 66 66 	mov	r9,26214
8000f9ce:	ea 19 bf ee 	orh	r9,0xbfee
8000f9d2:	f0 16 00 1c 	mcall	r6[112]
8000f9d6:	18 98       	mov	r8,r12
8000f9d8:	58 08       	cp.w	r8,0
8000f9da:	c0 20       	breq	8000f9de <rc_user_channels+0x46>
8000f9dc:	30 15       	mov	r5,1
8000f9de:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000f9e2:	c2 90       	breq	8000fa34 <rc_user_channels+0x9c>
8000f9e4:	cd 8e       	rcall	8000f794 <get_yaw_from_remote>
8000f9e6:	18 98       	mov	r8,r12
8000f9e8:	10 9c       	mov	r12,r8
8000f9ea:	f0 16 00 02 	mcall	r6[8]
8000f9ee:	14 98       	mov	r8,r10
8000f9f0:	16 99       	mov	r9,r11
8000f9f2:	30 05       	mov	r5,0
8000f9f4:	e0 6a cc cd 	mov	r10,52429
8000f9f8:	ea 1a cc cc 	orh	r10,0xcccc
8000f9fc:	e0 6b cc cc 	mov	r11,52428
8000fa00:	ea 1b 3f ec 	orh	r11,0x3fec
8000fa04:	f0 16 00 1c 	mcall	r6[112]
8000fa08:	18 98       	mov	r8,r12
8000fa0a:	58 08       	cp.w	r8,0
8000fa0c:	c0 20       	breq	8000fa10 <rc_user_channels+0x78>
8000fa0e:	30 15       	mov	r5,1
8000fa10:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000fa14:	c1 00       	breq	8000fa34 <rc_user_channels+0x9c>
	{
		//dbg_print("motor on\n");
		dbg_print("motor on: yaw=\n"); dbg_putfloat(get_yaw_from_remote(),2);
8000fa16:	fe cc 00 8e 	sub	r12,pc,142
8000fa1a:	f0 16 00 01 	mcall	r6[4]
8000fa1e:	cb be       	rcall	8000f794 <get_yaw_from_remote>
8000fa20:	18 98       	mov	r8,r12
8000fa22:	30 2b       	mov	r11,2
8000fa24:	10 9c       	mov	r12,r8
8000fa26:	f0 16 02 17 	mcall	r6[2140]
		*motorbool = 1;
8000fa2a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000fa2e:	30 18       	mov	r8,1
8000fa30:	b2 88       	st.b	r9[0x0],r8
	//dbg_print_num(*chanSwitch,10);
	//dbg_print_num(getChannel(4),10);
	//dbg_print_num(getChannel(5),10);
	//dbg_print("\n");
	
	if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() > 0.9))
8000fa32:	c3 88       	rjmp	8000faa2 <rc_user_channels+0x10a>
	{
		//dbg_print("motor on\n");
		dbg_print("motor on: yaw=\n"); dbg_putfloat(get_yaw_from_remote(),2);
		*motorbool = 1;
	}else if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() <-0.9))
8000fa34:	cd 0e       	rcall	8000f7d4 <get_thrust_from_remote>
8000fa36:	18 98       	mov	r8,r12
8000fa38:	10 9c       	mov	r12,r8
8000fa3a:	f0 16 00 02 	mcall	r6[8]
8000fa3e:	30 05       	mov	r5,0
8000fa40:	e0 68 66 66 	mov	r8,26214
8000fa44:	ea 18 66 66 	orh	r8,0x6666
8000fa48:	e0 69 66 66 	mov	r9,26214
8000fa4c:	ea 19 bf ee 	orh	r9,0xbfee
8000fa50:	f0 16 00 1c 	mcall	r6[112]
8000fa54:	18 98       	mov	r8,r12
8000fa56:	58 08       	cp.w	r8,0
8000fa58:	c0 20       	breq	8000fa5c <rc_user_channels+0xc4>
8000fa5a:	30 15       	mov	r5,1
8000fa5c:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000fa60:	c1 d0       	breq	8000fa9a <rc_user_channels+0x102>
8000fa62:	c9 9e       	rcall	8000f794 <get_yaw_from_remote>
8000fa64:	18 98       	mov	r8,r12
8000fa66:	10 9c       	mov	r12,r8
8000fa68:	f0 16 00 02 	mcall	r6[8]
8000fa6c:	30 05       	mov	r5,0
8000fa6e:	e0 68 cc cd 	mov	r8,52429
8000fa72:	ea 18 cc cc 	orh	r8,0xcccc
8000fa76:	e0 69 cc cc 	mov	r9,52428
8000fa7a:	ea 19 bf ec 	orh	r9,0xbfec
8000fa7e:	f0 16 00 1c 	mcall	r6[112]
8000fa82:	18 98       	mov	r8,r12
8000fa84:	58 08       	cp.w	r8,0
8000fa86:	c0 20       	breq	8000fa8a <rc_user_channels+0xf2>
8000fa88:	30 15       	mov	r5,1
8000fa8a:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000fa8e:	c0 60       	breq	8000fa9a <rc_user_channels+0x102>
	{
		//dbg_print("motor off\n");
		*motorbool = -1;
8000fa90:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000fa94:	3f f8       	mov	r8,-1
8000fa96:	b2 88       	st.b	r9[0x0],r8
	if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() > 0.9))
	{
		//dbg_print("motor on\n");
		dbg_print("motor on: yaw=\n"); dbg_putfloat(get_yaw_from_remote(),2);
		*motorbool = 1;
	}else if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() <-0.9))
8000fa98:	c0 58       	rjmp	8000faa2 <rc_user_channels+0x10a>
	{
		//dbg_print("motor off\n");
		*motorbool = -1;
	}else{
		//dbg_print("motor nothing\n");
		*motorbool = 0;
8000fa9a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000fa9e:	30 08       	mov	r8,0
8000faa0:	b2 88       	st.b	r9[0x0],r8
	}
	
	switch (rc_check_receivers())
8000faa2:	f0 16 00 ae 	mcall	r6[696]
8000faa6:	18 98       	mov	r8,r12
8000faa8:	5c 58       	castu.b	r8
8000faaa:	5c 68       	casts.b	r8
8000faac:	5b f8       	cp.w	r8,-1
8000faae:	c0 b0       	breq	8000fac4 <rc_user_channels+0x12c>
8000fab0:	58 18       	cp.w	r8,1
8000fab2:	c0 40       	breq	8000faba <rc_user_channels+0x122>
8000fab4:	5b e8       	cp.w	r8,-2
8000fab6:	c0 c0       	breq	8000face <rc_user_channels+0x136>
8000fab8:	c0 f8       	rjmp	8000fad6 <rc_user_channels+0x13e>
	{
		case 1:
		*rc_check = 1;
8000faba:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000fabe:	30 18       	mov	r8,1
8000fac0:	b2 88       	st.b	r9[0x0],r8
		break;
8000fac2:	c0 a8       	rjmp	8000fad6 <rc_user_channels+0x13e>
		case -1:
		*rc_check = -1;
8000fac4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000fac8:	3f f8       	mov	r8,-1
8000faca:	b2 88       	st.b	r9[0x0],r8
		break;
8000facc:	c0 58       	rjmp	8000fad6 <rc_user_channels+0x13e>
		case -2:
		*rc_check = -2;
8000face:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000fad2:	3f e8       	mov	r8,-2
8000fad4:	b2 88       	st.b	r9[0x0],r8
	//dbg_print("rc_check: ");
	//dbg_print_num(rc_check,10);
	//dbg_print("; motorbool : ");
	//dbg_print_num(*motorbool,10);
	//dbg_print("\n");
}
8000fad6:	2f dd       	sub	sp,-12
8000fad8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000fadc:	80 00       	ld.sh	r0,r0[0x0]
8000fade:	f8 26 53 77 	sub	r6,-502921
8000fae2:	69 74       	ld.w	r4,r4[0x5c]
8000fae4:	63 68       	ld.w	r8,r1[0x58]
8000fae6:	69 6e       	ld.w	lr,r4[0x58]
8000fae8:	67 20       	ld.w	r0,r3[0x48]
8000faea:	6f 6e       	ld.w	lr,r7[0x58]
8000faec:	20 74       	sub	r4,7
8000faee:	68 65       	ld.w	r5,r4[0x18]
8000faf0:	20 6d       	sub	sp,24
8000faf2:	6f 74       	ld.w	r4,r7[0x5c]
8000faf4:	6f 72       	ld.w	r2,r7[0x5c]
8000faf6:	73 21       	ld.w	r1,r9[0x48]
8000faf8:	0a 00       	add	r0,r5
8000fafa:	00 00       	add	r0,r0
8000fafc:	53 77       	stdsp	sp[0xdc],r7
8000fafe:	69 74       	ld.w	r4,r4[0x5c]
8000fb00:	63 68       	ld.w	r8,r1[0x58]
8000fb02:	65 73       	ld.w	r3,r2[0x5c]
8000fb04:	20 6e       	sub	lr,6
8000fb06:	6f 74       	ld.w	r4,r7[0x5c]
8000fb08:	20 72       	sub	r2,7
8000fb0a:	65 61       	ld.w	r1,r2[0x58]
8000fb0c:	64 79       	ld.w	r9,r2[0x1c]
8000fb0e:	2c 20       	sub	r0,-62
8000fb10:	62 6f       	ld.w	pc,r1[0x18]
8000fb12:	74 68       	ld.w	r8,r10[0x18]
8000fb14:	20 73       	sub	r3,7
8000fb16:	68 6f       	ld.w	pc,r4[0x18]
8000fb18:	75 6c       	ld.w	r12,r10[0x58]
8000fb1a:	64 20       	ld.w	r0,r2[0x8]
8000fb1c:	62 65       	ld.w	r5,r1[0x18]
8000fb1e:	20 70       	sub	r0,7
8000fb20:	75 73       	ld.w	r3,r10[0x5c]
8000fb22:	68 65       	ld.w	r5,r4[0x18]
8000fb24:	64 21       	ld.w	r1,r2[0x8]
8000fb26:	0a 00       	add	r0,r5
8000fb28:	53 77       	stdsp	sp[0xdc],r7
8000fb2a:	69 74       	ld.w	r4,r4[0x5c]
8000fb2c:	63 68       	ld.w	r8,r1[0x58]
8000fb2e:	69 6e       	ld.w	lr,r4[0x58]
8000fb30:	67 20       	ld.w	r0,r3[0x48]
8000fb32:	6f 66       	ld.w	r6,r7[0x58]
8000fb34:	66 20       	ld.w	r0,r3[0x8]
8000fb36:	6d 6f       	ld.w	pc,r6[0x58]
8000fb38:	74 6f       	ld.w	pc,r10[0x18]
8000fb3a:	72 73       	ld.w	r3,r9[0x1c]
8000fb3c:	21 0a       	sub	r10,16
	...

8000fb40 <set_mav_mode_n_state>:

task_return_t set_mav_mode_n_state()
{
8000fb40:	eb cd 40 c0 	pushm	r6-r7,lr
8000fb44:	1a 97       	mov	r7,sp
8000fb46:	20 1d       	sub	sp,4
8000fb48:	fe f6 03 9c 	ld.w	r6,pc[924]
8000fb4c:	1e 26       	rsub	r6,pc
	uint8_t channelSwitches = 0;
8000fb4e:	30 08       	mov	r8,0
8000fb50:	ef 68 ff ff 	st.b	r7[-1],r8
	int8_t RC_check = 0;
8000fb54:	30 08       	mov	r8,0
8000fb56:	ef 68 ff fe 	st.b	r7[-2],r8
	int8_t motor_switch = 0;
8000fb5a:	30 08       	mov	r8,0
8000fb5c:	ef 68 ff fd 	st.b	r7[-3],r8
	
	LED_Toggle(LED1);
8000fb60:	30 2c       	mov	r12,2
8000fb62:	f0 16 01 d2 	mcall	r6[1864]
	
	rc_user_channels(&channelSwitches,&RC_check, &motor_switch);
8000fb66:	ee ca 00 03 	sub	r10,r7,3
8000fb6a:	ee c9 00 02 	sub	r9,r7,2
8000fb6e:	ee c8 00 01 	sub	r8,r7,1
8000fb72:	12 9b       	mov	r11,r9
8000fb74:	10 9c       	mov	r12,r8
8000fb76:	f0 16 01 5c 	mcall	r6[1392]
	
	switch(centralData->mav_state)
8000fb7a:	ec f8 00 00 	ld.w	r8,r6[0]
8000fb7e:	70 08       	ld.w	r8,r8[0x0]
8000fb80:	f1 38 0d 06 	ld.ub	r8,r8[3334]
8000fb84:	58 48       	cp.w	r8,4
8000fb86:	c6 50       	breq	8000fc50 <set_mav_mode_n_state+0x110>
8000fb88:	e0 89 00 09 	brgt	8000fb9a <set_mav_mode_n_state+0x5a>
8000fb8c:	58 28       	cp.w	r8,2
8000fb8e:	e0 80 01 a2 	breq	8000fed2 <set_mav_mode_n_state+0x392>
8000fb92:	58 38       	cp.w	r8,3
8000fb94:	c0 b0       	breq	8000fbaa <set_mav_mode_n_state+0x6a>
8000fb96:	e0 8f 01 a3 	bral	8000fedc <set_mav_mode_n_state+0x39c>
8000fb9a:	58 58       	cp.w	r8,5
8000fb9c:	e0 80 00 fa 	breq	8000fd90 <set_mav_mode_n_state+0x250>
8000fba0:	58 68       	cp.w	r8,6
8000fba2:	e0 80 01 70 	breq	8000fe82 <set_mav_mode_n_state+0x342>
8000fba6:	e0 8f 01 9b 	bral	8000fedc <set_mav_mode_n_state+0x39c>
	{
		case MAV_STATE_CALIBRATING:
			break;
		case MAV_STATE_STANDBY:
			if (motor_switch == 1)
8000fbaa:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000fbae:	30 18       	mov	r8,1
8000fbb0:	f0 09 18 00 	cp.b	r9,r8
8000fbb4:	e0 81 01 91 	brne	8000fed6 <set_mav_mode_n_state+0x396>
			{
				switch(channelSwitches)
8000fbb8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000fbbc:	58 18       	cp.w	r8,1
8000fbbe:	c3 70       	breq	8000fc2c <set_mav_mode_n_state+0xec>
8000fbc0:	e0 89 00 06 	brgt	8000fbcc <set_mav_mode_n_state+0x8c>
8000fbc4:	58 08       	cp.w	r8,0
8000fbc6:	c0 90       	breq	8000fbd8 <set_mav_mode_n_state+0x98>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
						break;
				}
			}
			break;
8000fbc8:	e0 8f 01 8a 	bral	8000fedc <set_mav_mode_n_state+0x39c>
		case MAV_STATE_CALIBRATING:
			break;
		case MAV_STATE_STANDBY:
			if (motor_switch == 1)
			{
				switch(channelSwitches)
8000fbcc:	58 28       	cp.w	r8,2
8000fbce:	c3 40       	breq	8000fc36 <set_mav_mode_n_state+0xf6>
8000fbd0:	58 38       	cp.w	r8,3
8000fbd2:	c3 70       	breq	8000fc40 <set_mav_mode_n_state+0x100>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
						break;
				}
			}
			break;
8000fbd4:	e0 8f 01 84 	bral	8000fedc <set_mav_mode_n_state+0x39c>
			if (motor_switch == 1)
			{
				switch(channelSwitches)
				{
					case 0:
						dbg_print("Switching on the motors!\n");
8000fbd8:	fe cc 00 f8 	sub	r12,pc,248
8000fbdc:	f0 16 00 01 	mcall	r6[4]
						position_reset_home_altitude(&centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);
8000fbe0:	ec f8 00 00 	ld.w	r8,r6[0]
8000fbe4:	70 08       	ld.w	r8,r8[0x0]
8000fbe6:	f0 ca f8 b0 	sub	r10,r8,-1872
8000fbea:	ec f8 00 00 	ld.w	r8,r6[0]
8000fbee:	70 08       	ld.w	r8,r8[0x0]
8000fbf0:	f0 c9 f2 f4 	sub	r9,r8,-3340
8000fbf4:	ec f8 00 00 	ld.w	r8,r6[0]
8000fbf8:	70 08       	ld.w	r8,r8[0x0]
8000fbfa:	f0 c8 f6 7c 	sub	r8,r8,-2436
8000fbfe:	12 9b       	mov	r11,r9
8000fc00:	10 9c       	mov	r12,r8
8000fc02:	f0 16 02 13 	mcall	r6[2124]
						centralData->controls.run_mode = MOTORS_ON;
8000fc06:	ec f8 00 00 	ld.w	r8,r6[0]
8000fc0a:	70 08       	ld.w	r8,r8[0x0]
8000fc0c:	30 19       	mov	r9,1
8000fc0e:	f1 49 01 70 	st.w	r8[368],r9
						centralData->mav_state = MAV_STATE_ACTIVE;
8000fc12:	ec f8 00 00 	ld.w	r8,r6[0]
8000fc16:	70 09       	ld.w	r9,r8[0x0]
8000fc18:	30 48       	mov	r8,4
8000fc1a:	f3 68 0d 06 	st.b	r9[3334],r8
						centralData->mav_mode = MAV_MODE_MANUAL_ARMED;
8000fc1e:	ec f8 00 00 	ld.w	r8,r6[0]
8000fc22:	70 09       	ld.w	r9,r8[0x0]
8000fc24:	3c 08       	mov	r8,-64
8000fc26:	f3 68 0d 05 	st.b	r9[3333],r8
						break;
8000fc2a:	c1 18       	rjmp	8000fc4c <set_mav_mode_n_state+0x10c>
					case 1:
						dbg_print("Switches not ready, both should be pushed!\n");
8000fc2c:	fe cc 01 30 	sub	r12,pc,304
8000fc30:	f0 16 00 01 	mcall	r6[4]
						//centralData->controls.run_mode = MOTORS_ON;
						//centralData->mav_state = MAV_STATE_ACTIVE;
						//centralData->mav_mode = MAV_MODE_STABILIZE_ARMED;
						break;
8000fc34:	c0 c8       	rjmp	8000fc4c <set_mav_mode_n_state+0x10c>
					case 2:
						dbg_print("Switches not ready, both should be pushed!\n");
8000fc36:	fe cc 01 3a 	sub	r12,pc,314
8000fc3a:	f0 16 00 01 	mcall	r6[4]
						break;
8000fc3e:	c0 78       	rjmp	8000fc4c <set_mav_mode_n_state+0x10c>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
8000fc40:	fe cc 01 44 	sub	r12,pc,324
8000fc44:	f0 16 00 01 	mcall	r6[4]
						break;
				}
			}
			break;
8000fc48:	e0 8f 01 4a 	bral	8000fedc <set_mav_mode_n_state+0x39c>
8000fc4c:	e0 8f 01 48 	bral	8000fedc <set_mav_mode_n_state+0x39c>
		case MAV_STATE_ACTIVE:
			switch(channelSwitches)
8000fc50:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000fc54:	58 18       	cp.w	r8,1
8000fc56:	c1 80       	breq	8000fc86 <set_mav_mode_n_state+0x146>
8000fc58:	e0 89 00 05 	brgt	8000fc62 <set_mav_mode_n_state+0x122>
8000fc5c:	58 08       	cp.w	r8,0
8000fc5e:	c0 70       	breq	8000fc6c <set_mav_mode_n_state+0x12c>
8000fc60:	c2 d8       	rjmp	8000fcba <set_mav_mode_n_state+0x17a>
8000fc62:	58 28       	cp.w	r8,2
8000fc64:	c1 e0       	breq	8000fca0 <set_mav_mode_n_state+0x160>
8000fc66:	58 38       	cp.w	r8,3
8000fc68:	c2 30       	breq	8000fcae <set_mav_mode_n_state+0x16e>
8000fc6a:	c2 88       	rjmp	8000fcba <set_mav_mode_n_state+0x17a>
			{
				case 0:
					centralData->waypoint_hold_init = false;
8000fc6c:	ec f8 00 00 	ld.w	r8,r6[0]
8000fc70:	70 09       	ld.w	r9,r8[0x0]
8000fc72:	30 08       	mov	r8,0
8000fc74:	f3 68 0c ff 	st.b	r9[3327],r8
					centralData->mav_mode= MAV_MODE_MANUAL_ARMED;
8000fc78:	ec f8 00 00 	ld.w	r8,r6[0]
8000fc7c:	70 09       	ld.w	r9,r8[0x0]
8000fc7e:	3c 08       	mov	r8,-64
8000fc80:	f3 68 0d 05 	st.b	r9[3333],r8
					break;
8000fc84:	c1 b8       	rjmp	8000fcba <set_mav_mode_n_state+0x17a>
				case 1:
					centralData->waypoint_hold_init = false;
8000fc86:	ec f8 00 00 	ld.w	r8,r6[0]
8000fc8a:	70 09       	ld.w	r9,r8[0x0]
8000fc8c:	30 08       	mov	r8,0
8000fc8e:	f3 68 0c ff 	st.b	r9[3327],r8
					centralData->mav_mode= MAV_MODE_STABILIZE_ARMED;
8000fc92:	ec f8 00 00 	ld.w	r8,r6[0]
8000fc96:	70 09       	ld.w	r9,r8[0x0]
8000fc98:	3d 08       	mov	r8,-48
8000fc9a:	f3 68 0d 05 	st.b	r9[3333],r8
					break;
8000fc9e:	c0 e8       	rjmp	8000fcba <set_mav_mode_n_state+0x17a>
				case 2:
					centralData->mav_mode = MAV_MODE_GUIDED_ARMED;
8000fca0:	ec f8 00 00 	ld.w	r8,r6[0]
8000fca4:	70 09       	ld.w	r9,r8[0x0]
8000fca6:	3d 88       	mov	r8,-40
8000fca8:	f3 68 0d 05 	st.b	r9[3333],r8
					break;
8000fcac:	c0 78       	rjmp	8000fcba <set_mav_mode_n_state+0x17a>
				case 3:
					
					centralData->mav_mode = MAV_MODE_AUTO_ARMED;
8000fcae:	ec f8 00 00 	ld.w	r8,r6[0]
8000fcb2:	70 09       	ld.w	r9,r8[0x0]
8000fcb4:	3d c8       	mov	r8,-36
8000fcb6:	f3 68 0d 05 	st.b	r9[3333],r8
					break;
			}
			
			switch (centralData->mav_mode)
8000fcba:	ec f8 00 00 	ld.w	r8,r6[0]
8000fcbe:	70 08       	ld.w	r8,r8[0x0]
8000fcc0:	f1 38 0d 05 	ld.ub	r8,r8[3333]
8000fcc4:	e0 48 00 d0 	cp.w	r8,208
8000fcc8:	c1 50       	breq	8000fcf2 <set_mav_mode_n_state+0x1b2>
8000fcca:	e0 89 00 06 	brgt	8000fcd6 <set_mav_mode_n_state+0x196>
8000fcce:	e0 48 00 c0 	cp.w	r8,192
8000fcd2:	c0 90       	breq	8000fce4 <set_mav_mode_n_state+0x1a4>
8000fcd4:	c2 88       	rjmp	8000fd24 <set_mav_mode_n_state+0x1e4>
8000fcd6:	e0 48 00 d8 	cp.w	r8,216
8000fcda:	c1 30       	breq	8000fd00 <set_mav_mode_n_state+0x1c0>
8000fcdc:	e0 48 00 dc 	cp.w	r8,220
8000fce0:	c1 30       	breq	8000fd06 <set_mav_mode_n_state+0x1c6>
8000fce2:	c2 18       	rjmp	8000fd24 <set_mav_mode_n_state+0x1e4>
			{
				case MAV_MODE_MANUAL_ARMED:
					centralData->waypoint_hold_init = false;
8000fce4:	ec f8 00 00 	ld.w	r8,r6[0]
8000fce8:	70 09       	ld.w	r9,r8[0x0]
8000fcea:	30 08       	mov	r8,0
8000fcec:	f3 68 0c ff 	st.b	r9[3327],r8
					break;
8000fcf0:	c1 a8       	rjmp	8000fd24 <set_mav_mode_n_state+0x1e4>
				case MAV_MODE_STABILIZE_ARMED:
					centralData->waypoint_hold_init = false;
8000fcf2:	ec f8 00 00 	ld.w	r8,r6[0]
8000fcf6:	70 09       	ld.w	r9,r8[0x0]
8000fcf8:	30 08       	mov	r8,0
8000fcfa:	f3 68 0c ff 	st.b	r9[3327],r8
					break;
8000fcfe:	c1 38       	rjmp	8000fd24 <set_mav_mode_n_state+0x1e4>
				case MAV_MODE_GUIDED_ARMED:
					waypoint_hold_position_handler();
8000fd00:	f0 16 01 c7 	mcall	r6[1820]
					break;
8000fd04:	c1 08       	rjmp	8000fd24 <set_mav_mode_n_state+0x1e4>
				case MAV_MODE_AUTO_ARMED:
					if (centralData->waypoint_set)
8000fd06:	ec f8 00 00 	ld.w	r8,r6[0]
8000fd0a:	70 08       	ld.w	r8,r8[0x0]
8000fd0c:	f1 38 0c fc 	ld.ub	r8,r8[3324]
8000fd10:	58 08       	cp.w	r8,0
8000fd12:	c0 70       	breq	8000fd20 <set_mav_mode_n_state+0x1e0>
					{
						centralData->waypoint_hold_init = false;
8000fd14:	ec f8 00 00 	ld.w	r8,r6[0]
8000fd18:	70 09       	ld.w	r9,r8[0x0]
8000fd1a:	30 08       	mov	r8,0
8000fd1c:	f3 68 0c ff 	st.b	r9[3327],r8
					}
					waypoint_navigation_handler();
8000fd20:	f0 16 02 18 	mcall	r6[2144]
					break;
			}
			
			//dbg_print("motor_switch: ");
			//dbg_print_num(motor_switch,10);
			if (motor_switch == -1)
8000fd24:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000fd28:	3f f8       	mov	r8,-1
8000fd2a:	f0 09 18 00 	cp.b	r9,r8
8000fd2e:	c1 71       	brne	8000fd5c <set_mav_mode_n_state+0x21c>
			{
				dbg_print("Switching off motors!\n");
8000fd30:	fe cc 02 08 	sub	r12,pc,520
8000fd34:	f0 16 00 01 	mcall	r6[4]
				centralData->controls.run_mode = MOTORS_OFF;
8000fd38:	ec f8 00 00 	ld.w	r8,r6[0]
8000fd3c:	70 08       	ld.w	r8,r8[0x0]
8000fd3e:	30 09       	mov	r9,0
8000fd40:	f1 49 01 70 	st.w	r8[368],r9
				centralData->mav_state = MAV_STATE_STANDBY;
8000fd44:	ec f8 00 00 	ld.w	r8,r6[0]
8000fd48:	70 09       	ld.w	r9,r8[0x0]
8000fd4a:	30 38       	mov	r8,3
8000fd4c:	f3 68 0d 06 	st.b	r9[3334],r8
				centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
8000fd50:	ec f8 00 00 	ld.w	r8,r6[0]
8000fd54:	70 09       	ld.w	r9,r8[0x0]
8000fd56:	34 08       	mov	r8,64
8000fd58:	f3 68 0d 05 	st.b	r9[3333],r8
			}
		
			switch (RC_check)
8000fd5c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000fd60:	5c 68       	casts.b	r8
8000fd62:	5b f8       	cp.w	r8,-1
8000fd64:	c0 70       	breq	8000fd72 <set_mav_mode_n_state+0x232>
8000fd66:	58 18       	cp.w	r8,1
8000fd68:	c0 40       	breq	8000fd70 <set_mav_mode_n_state+0x230>
8000fd6a:	5b e8       	cp.w	r8,-2
8000fd6c:	c0 a0       	breq	8000fd80 <set_mav_mode_n_state+0x240>
					break;
				case -2:
					centralData->mav_state = MAV_STATE_CRITICAL;
					break;
			}
			break;
8000fd6e:	cb 78       	rjmp	8000fedc <set_mav_mode_n_state+0x39c>
			}
		
			switch (RC_check)
			{
				case 1:
					break;
8000fd70:	c0 f8       	rjmp	8000fd8e <set_mav_mode_n_state+0x24e>
				case -1:
					centralData->mav_state = MAV_STATE_CRITICAL;
8000fd72:	ec f8 00 00 	ld.w	r8,r6[0]
8000fd76:	70 09       	ld.w	r9,r8[0x0]
8000fd78:	30 58       	mov	r8,5
8000fd7a:	f3 68 0d 06 	st.b	r9[3334],r8
					break;
8000fd7e:	c0 88       	rjmp	8000fd8e <set_mav_mode_n_state+0x24e>
				case -2:
					centralData->mav_state = MAV_STATE_CRITICAL;
8000fd80:	ec f8 00 00 	ld.w	r8,r6[0]
8000fd84:	70 09       	ld.w	r9,r8[0x0]
8000fd86:	30 58       	mov	r8,5
8000fd88:	f3 68 0d 06 	st.b	r9[3334],r8
					break;
			}
			break;
8000fd8c:	ca 88       	rjmp	8000fedc <set_mav_mode_n_state+0x39c>
8000fd8e:	ca 78       	rjmp	8000fedc <set_mav_mode_n_state+0x39c>
		case MAV_STATE_CRITICAL:
			switch(channelSwitches)
8000fd90:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000fd94:	58 18       	cp.w	r8,1
8000fd96:	c1 20       	breq	8000fdba <set_mav_mode_n_state+0x27a>
8000fd98:	e0 89 00 05 	brgt	8000fda2 <set_mav_mode_n_state+0x262>
8000fd9c:	58 08       	cp.w	r8,0
8000fd9e:	c0 70       	breq	8000fdac <set_mav_mode_n_state+0x26c>
8000fda0:	c2 18       	rjmp	8000fde2 <set_mav_mode_n_state+0x2a2>
8000fda2:	58 28       	cp.w	r8,2
8000fda4:	c1 20       	breq	8000fdc8 <set_mav_mode_n_state+0x288>
8000fda6:	58 38       	cp.w	r8,3
8000fda8:	c1 70       	breq	8000fdd6 <set_mav_mode_n_state+0x296>
8000fdaa:	c1 c8       	rjmp	8000fde2 <set_mav_mode_n_state+0x2a2>
			{
				case 0:
					centralData->mav_mode= MAV_MODE_MANUAL_ARMED;
8000fdac:	ec f8 00 00 	ld.w	r8,r6[0]
8000fdb0:	70 09       	ld.w	r9,r8[0x0]
8000fdb2:	3c 08       	mov	r8,-64
8000fdb4:	f3 68 0d 05 	st.b	r9[3333],r8
					break;
8000fdb8:	c1 58       	rjmp	8000fde2 <set_mav_mode_n_state+0x2a2>
				case 1:
					centralData->mav_mode= MAV_MODE_STABILIZE_ARMED;
8000fdba:	ec f8 00 00 	ld.w	r8,r6[0]
8000fdbe:	70 09       	ld.w	r9,r8[0x0]
8000fdc0:	3d 08       	mov	r8,-48
8000fdc2:	f3 68 0d 05 	st.b	r9[3333],r8
					break;
8000fdc6:	c0 e8       	rjmp	8000fde2 <set_mav_mode_n_state+0x2a2>
				case 2:
					centralData->mav_mode = MAV_MODE_GUIDED_ARMED;
8000fdc8:	ec f8 00 00 	ld.w	r8,r6[0]
8000fdcc:	70 09       	ld.w	r9,r8[0x0]
8000fdce:	3d 88       	mov	r8,-40
8000fdd0:	f3 68 0d 05 	st.b	r9[3333],r8
					break;
8000fdd4:	c0 78       	rjmp	8000fde2 <set_mav_mode_n_state+0x2a2>
				case 3:
					centralData->mav_mode = MAV_MODE_AUTO_ARMED;
8000fdd6:	ec f8 00 00 	ld.w	r8,r6[0]
8000fdda:	70 09       	ld.w	r9,r8[0x0]
8000fddc:	3d c8       	mov	r8,-36
8000fdde:	f3 68 0d 05 	st.b	r9[3333],r8
					break;
			}
			if (motor_switch == -1)
8000fde2:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000fde6:	3f f8       	mov	r8,-1
8000fde8:	f0 09 18 00 	cp.b	r9,r8
8000fdec:	c1 71       	brne	8000fe1a <set_mav_mode_n_state+0x2da>
			{
				dbg_print("Switching off motors!\n");
8000fdee:	fe cc 02 c6 	sub	r12,pc,710
8000fdf2:	f0 16 00 01 	mcall	r6[4]
				centralData->controls.run_mode = MOTORS_OFF;
8000fdf6:	ec f8 00 00 	ld.w	r8,r6[0]
8000fdfa:	70 08       	ld.w	r8,r8[0x0]
8000fdfc:	30 09       	mov	r9,0
8000fdfe:	f1 49 01 70 	st.w	r8[368],r9
				centralData->mav_state = MAV_STATE_STANDBY;
8000fe02:	ec f8 00 00 	ld.w	r8,r6[0]
8000fe06:	70 09       	ld.w	r9,r8[0x0]
8000fe08:	30 38       	mov	r8,3
8000fe0a:	f3 68 0d 06 	st.b	r9[3334],r8
				centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
8000fe0e:	ec f8 00 00 	ld.w	r8,r6[0]
8000fe12:	70 09       	ld.w	r9,r8[0x0]
8000fe14:	34 08       	mov	r8,64
8000fe16:	f3 68 0d 05 	st.b	r9[3333],r8
			}
			
			switch (centralData->mav_mode)
8000fe1a:	ec f8 00 00 	ld.w	r8,r6[0]
8000fe1e:	70 08       	ld.w	r8,r8[0x0]
8000fe20:	f1 38 0d 05 	ld.ub	r8,r8[3333]
8000fe24:	e0 48 00 d8 	cp.w	r8,216
8000fe28:	c0 40       	breq	8000fe30 <set_mav_mode_n_state+0x2f0>
8000fe2a:	e0 48 00 dc 	cp.w	r8,220
8000fe2e:	c0 31       	brne	8000fe34 <set_mav_mode_n_state+0x2f4>
			{
				case MAV_MODE_GUIDED_ARMED:
				case MAV_MODE_AUTO_ARMED:
					waypoint_critical_handler();
8000fe30:	f0 16 01 e3 	mcall	r6[1932]
					break;
			}
			
			switch (RC_check)
8000fe34:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000fe38:	5c 68       	casts.b	r8
8000fe3a:	5b f8       	cp.w	r8,-1
8000fe3c:	c1 30       	breq	8000fe62 <set_mav_mode_n_state+0x322>
8000fe3e:	58 18       	cp.w	r8,1
8000fe40:	c0 40       	breq	8000fe48 <set_mav_mode_n_state+0x308>
8000fe42:	5b e8       	cp.w	r8,-2
8000fe44:	c1 00       	breq	8000fe64 <set_mav_mode_n_state+0x324>
						centralData->mav_state = MAV_STATE_EMERGENCY;
					}
					//centralData->mav_state = MAV_STATE_EMERGENCY;
					break;
			}
			break;
8000fe46:	c4 b8       	rjmp	8000fedc <set_mav_mode_n_state+0x39c>
			}
			
			switch (RC_check)
			{
				case 1:
					centralData->mav_state = MAV_STATE_ACTIVE;
8000fe48:	ec f8 00 00 	ld.w	r8,r6[0]
8000fe4c:	70 09       	ld.w	r9,r8[0x0]
8000fe4e:	30 48       	mov	r8,4
8000fe50:	f3 68 0d 06 	st.b	r9[3334],r8
					centralData->critical_init = false;
8000fe54:	ec f8 00 00 	ld.w	r8,r6[0]
8000fe58:	70 09       	ld.w	r9,r8[0x0]
8000fe5a:	30 08       	mov	r8,0
8000fe5c:	f3 68 0d 01 	st.b	r9[3329],r8
					break;
8000fe60:	c1 08       	rjmp	8000fe80 <set_mav_mode_n_state+0x340>
				case -1:
					break;
8000fe62:	c0 f8       	rjmp	8000fe80 <set_mav_mode_n_state+0x340>
				case -2:
					if (centralData->critical_landing)
8000fe64:	ec f8 00 00 	ld.w	r8,r6[0]
8000fe68:	70 08       	ld.w	r8,r8[0x0]
8000fe6a:	f1 38 0d 00 	ld.ub	r8,r8[3328]
8000fe6e:	58 08       	cp.w	r8,0
8000fe70:	c3 50       	breq	8000feda <set_mav_mode_n_state+0x39a>
					{
						centralData->mav_state = MAV_STATE_EMERGENCY;
8000fe72:	ec f8 00 00 	ld.w	r8,r6[0]
8000fe76:	70 09       	ld.w	r9,r8[0x0]
8000fe78:	30 68       	mov	r8,6
8000fe7a:	f3 68 0d 06 	st.b	r9[3334],r8
					}
					//centralData->mav_state = MAV_STATE_EMERGENCY;
					break;
			}
			break;
8000fe7e:	c2 f8       	rjmp	8000fedc <set_mav_mode_n_state+0x39c>
8000fe80:	c2 e8       	rjmp	8000fedc <set_mav_mode_n_state+0x39c>
		case MAV_STATE_EMERGENCY:
			if (centralData->position_estimator.localPosition.pos[Z] < 1.0)
8000fe82:	ec f8 00 00 	ld.w	r8,r6[0]
8000fe86:	70 08       	ld.w	r8,r8[0x0]
8000fe88:	f0 fa 09 ec 	ld.w	r10,r8[2540]
8000fe8c:	30 18       	mov	r8,1
8000fe8e:	fc 19 3f 80 	movh	r9,0x3f80
8000fe92:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000fe96:	e0 8c 00 03 	brvs	8000fe9c <set_mav_mode_n_state+0x35c>
8000fe9a:	c0 25       	brlt	8000fe9e <set_mav_mode_n_state+0x35e>
8000fe9c:	30 08       	mov	r8,0
8000fe9e:	5c 58       	castu.b	r8
8000fea0:	c1 e0       	breq	8000fedc <set_mav_mode_n_state+0x39c>
			{
				centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
8000fea2:	ec f8 00 00 	ld.w	r8,r6[0]
8000fea6:	70 09       	ld.w	r9,r8[0x0]
8000fea8:	34 08       	mov	r8,64
8000feaa:	f3 68 0d 05 	st.b	r9[3333],r8
				centralData->controls.control_mode = ATTITUDE_COMMAND_MODE;
8000feae:	ec f8 00 00 	ld.w	r8,r6[0]
8000feb2:	70 08       	ld.w	r8,r8[0x0]
8000feb4:	30 19       	mov	r9,1
8000feb6:	f1 49 01 68 	st.w	r8[360],r9
				switch (RC_check)
8000feba:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000febe:	5c 68       	casts.b	r8
8000fec0:	58 18       	cp.w	r8,1
8000fec2:	c0 d1       	brne	8000fedc <set_mav_mode_n_state+0x39c>
				{
					case 1:
						centralData->mav_state = MAV_STATE_STANDBY;
8000fec4:	ec f8 00 00 	ld.w	r8,r6[0]
8000fec8:	70 09       	ld.w	r9,r8[0x0]
8000feca:	30 38       	mov	r8,3
8000fecc:	f3 68 0d 06 	st.b	r9[3334],r8
8000fed0:	c0 68       	rjmp	8000fedc <set_mav_mode_n_state+0x39c>
	rc_user_channels(&channelSwitches,&RC_check, &motor_switch);
	
	switch(centralData->mav_state)
	{
		case MAV_STATE_CALIBRATING:
			break;
8000fed2:	d7 03       	nop
8000fed4:	c0 48       	rjmp	8000fedc <set_mav_mode_n_state+0x39c>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
						break;
				}
			}
			break;
8000fed6:	d7 03       	nop
8000fed8:	c0 28       	rjmp	8000fedc <set_mav_mode_n_state+0x39c>
						centralData->mav_state = MAV_STATE_EMERGENCY;
					}
					//centralData->mav_state = MAV_STATE_EMERGENCY;
					break;
			}
			break;
8000feda:	d7 03       	nop
	//dbg_print_num(centralData->mav_state,10);
	//dbg_print(", MAV mode :");
	//dbg_print_num(centralData->mav_mode,10);
	//dbg_print("\n");
	
}
8000fedc:	2f fd       	sub	sp,-4
8000fede:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000fee2:	00 00       	add	r0,r0
8000fee4:	80 00       	ld.sh	r0,r0[0x0]
8000fee6:	f9 d0       	*unknown*

8000fee8 <run_stabilisation>:

task_return_t run_stabilisation() {
8000fee8:	eb cd 40 e0 	pushm	r5-r7,lr
8000feec:	1a 97       	mov	r7,sp
8000feee:	20 cd       	sub	sp,48
8000fef0:	fe f6 04 80 	ld.w	r6,pc[1152]
8000fef4:	1e 26       	rsub	r6,pc
	int i;
	
	if (centralData->simulation_mode==1) {
8000fef6:	ec f8 00 00 	ld.w	r8,r6[0]
8000fefa:	70 08       	ld.w	r8,r8[0x0]
8000fefc:	f0 f8 0d 08 	ld.w	r8,r8[3336]
8000ff00:	58 18       	cp.w	r8,1
8000ff02:	c2 d1       	brne	8000ff5c <run_stabilisation+0x74>
		simu_update(&centralData->sim_model, &centralData->servos, &(centralData->imu1), &centralData->position_estimator);
8000ff04:	ec f8 00 00 	ld.w	r8,r6[0]
8000ff08:	70 08       	ld.w	r8,r8[0x0]
8000ff0a:	f0 c9 f6 7c 	sub	r9,r8,-2436
8000ff0e:	ec f8 00 00 	ld.w	r8,r6[0]
8000ff12:	70 08       	ld.w	r8,r8[0x0]
8000ff14:	10 9a       	mov	r10,r8
8000ff16:	ec f8 00 00 	ld.w	r8,r6[0]
8000ff1a:	70 08       	ld.w	r8,r8[0x0]
8000ff1c:	f0 cb fc cc 	sub	r11,r8,-820
8000ff20:	ec f8 00 00 	ld.w	r8,r6[0]
8000ff24:	70 08       	ld.w	r8,r8[0x0]
8000ff26:	f0 c8 f8 10 	sub	r8,r8,-2032
8000ff2a:	10 9c       	mov	r12,r8
8000ff2c:	f0 16 01 a5 	mcall	r6[1684]
		
		
		imu_update(&(centralData->imu1), &(centralData->position_estimator), &centralData->pressure, &centralData->GPS_data);
8000ff30:	ec f8 00 00 	ld.w	r8,r6[0]
8000ff34:	70 08       	ld.w	r8,r8[0x0]
8000ff36:	f0 c9 f8 b0 	sub	r9,r8,-1872
8000ff3a:	ec f8 00 00 	ld.w	r8,r6[0]
8000ff3e:	70 08       	ld.w	r8,r8[0x0]
8000ff40:	f0 ca f2 f4 	sub	r10,r8,-3340
8000ff44:	ec f8 00 00 	ld.w	r8,r6[0]
8000ff48:	70 08       	ld.w	r8,r8[0x0]
8000ff4a:	f0 cb f6 7c 	sub	r11,r8,-2436
8000ff4e:	ec f8 00 00 	ld.w	r8,r6[0]
8000ff52:	70 08       	ld.w	r8,r8[0x0]
8000ff54:	10 9c       	mov	r12,r8
8000ff56:	f0 16 00 9e 	mcall	r6[632]
8000ff5a:	c1 c8       	rjmp	8000ff92 <run_stabilisation+0xaa>
		
		//for (i=0; i<3; i++) centralData->position_estimator.vel[i]=centralData->sim_model.vel[i];
		//centralData->position_estimator.localPosition=centralData->sim_model.localPosition;
	} else {
		imu_get_raw_data(&(centralData->imu1));
8000ff5c:	ec f8 00 00 	ld.w	r8,r6[0]
8000ff60:	70 08       	ld.w	r8,r8[0x0]
8000ff62:	10 9c       	mov	r12,r8
8000ff64:	f0 16 00 9d 	mcall	r6[628]
		imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);
8000ff68:	ec f8 00 00 	ld.w	r8,r6[0]
8000ff6c:	70 08       	ld.w	r8,r8[0x0]
8000ff6e:	f0 c9 f8 b0 	sub	r9,r8,-1872
8000ff72:	ec f8 00 00 	ld.w	r8,r6[0]
8000ff76:	70 08       	ld.w	r8,r8[0x0]
8000ff78:	f0 ca f2 f4 	sub	r10,r8,-3340
8000ff7c:	ec f8 00 00 	ld.w	r8,r6[0]
8000ff80:	70 08       	ld.w	r8,r8[0x0]
8000ff82:	f0 cb f6 7c 	sub	r11,r8,-2436
8000ff86:	ec f8 00 00 	ld.w	r8,r6[0]
8000ff8a:	70 08       	ld.w	r8,r8[0x0]
8000ff8c:	10 9c       	mov	r12,r8
8000ff8e:	f0 16 00 9e 	mcall	r6[632]
	}

	switch(centralData->mav_mode)
8000ff92:	ec f8 00 00 	ld.w	r8,r6[0]
8000ff96:	70 08       	ld.w	r8,r8[0x0]
8000ff98:	f1 38 0d 05 	ld.ub	r8,r8[3333]
8000ff9c:	e0 48 00 5c 	cp.w	r8,92
8000ffa0:	e0 80 01 a6 	breq	800102ec <run_stabilisation+0x404>
8000ffa4:	e0 89 00 17 	brgt	8000ffd2 <run_stabilisation+0xea>
8000ffa8:	e0 48 00 40 	cp.w	r8,64
8000ffac:	e0 80 01 a0 	breq	800102ec <run_stabilisation+0x404>
8000ffb0:	e0 89 00 07 	brgt	8000ffbe <run_stabilisation+0xd6>
8000ffb4:	58 08       	cp.w	r8,0
8000ffb6:	e0 80 01 9b 	breq	800102ec <run_stabilisation+0x404>
8000ffba:	e0 8f 01 c8 	bral	8001034a <run_stabilisation+0x462>
8000ffbe:	e0 48 00 50 	cp.w	r8,80
8000ffc2:	e0 80 01 95 	breq	800102ec <run_stabilisation+0x404>
8000ffc6:	e0 48 00 58 	cp.w	r8,88
8000ffca:	e0 80 01 91 	breq	800102ec <run_stabilisation+0x404>
8000ffce:	e0 8f 01 be 	bral	8001034a <run_stabilisation+0x462>
8000ffd2:	e0 48 00 d0 	cp.w	r8,208
8000ffd6:	c6 70       	breq	800100a4 <run_stabilisation+0x1bc>
8000ffd8:	e0 89 00 07 	brgt	8000ffe6 <run_stabilisation+0xfe>
8000ffdc:	e0 48 00 c0 	cp.w	r8,192
8000ffe0:	c0 d0       	breq	8000fffa <run_stabilisation+0x112>
8000ffe2:	e0 8f 01 b4 	bral	8001034a <run_stabilisation+0x462>
8000ffe6:	e0 48 00 d8 	cp.w	r8,216
8000ffea:	e0 80 00 b1 	breq	8001014c <run_stabilisation+0x264>
8000ffee:	e0 48 00 dc 	cp.w	r8,220
8000fff2:	e0 80 01 2b 	breq	80010248 <run_stabilisation+0x360>
8000fff6:	e0 8f 01 aa 	bral	8001034a <run_stabilisation+0x462>
	{
		
		case MAV_MODE_MANUAL_ARMED:
			centralData->waypoint_hold_init = false;
8000fffa:	ec f8 00 00 	ld.w	r8,r6[0]
8000fffe:	70 09       	ld.w	r9,r8[0x0]
80010000:	30 08       	mov	r8,0
80010002:	f3 68 0c ff 	st.b	r9[3327],r8
			centralData->mission_started = false;
80010006:	ec f8 00 00 	ld.w	r8,r6[0]
8001000a:	70 09       	ld.w	r9,r8[0x0]
8001000c:	30 08       	mov	r8,0
8001000e:	f3 68 0d 03 	st.b	r9[3331],r8
			centralData->controls = get_command_from_remote();
80010012:	ec f8 00 00 	ld.w	r8,r6[0]
80010016:	70 05       	ld.w	r5,r8[0x0]
80010018:	ee c8 00 30 	sub	r8,r7,48
8001001c:	10 9c       	mov	r12,r8
8001001e:	fe b0 fb fb 	rcall	8000f814 <get_command_from_remote>
80010022:	ea c8 fe b8 	sub	r8,r5,-328
80010026:	ee c9 00 30 	sub	r9,r7,48
8001002a:	f0 ca 00 00 	sub	r10,r8,0
8001002e:	f2 cb 00 00 	sub	r11,r9,0
80010032:	76 0c       	ld.w	r12,r11[0x0]
80010034:	95 0c       	st.w	r10[0x0],r12
80010036:	76 1c       	ld.w	r12,r11[0x4]
80010038:	95 1c       	st.w	r10[0x4],r12
8001003a:	76 2c       	ld.w	r12,r11[0x8]
8001003c:	95 2c       	st.w	r10[0x8],r12
8001003e:	76 3b       	ld.w	r11,r11[0xc]
80010040:	95 3b       	st.w	r10[0xc],r11
80010042:	f0 ca ff f0 	sub	r10,r8,-16
80010046:	f2 cb ff f0 	sub	r11,r9,-16
8001004a:	76 0c       	ld.w	r12,r11[0x0]
8001004c:	95 0c       	st.w	r10[0x0],r12
8001004e:	76 1c       	ld.w	r12,r11[0x4]
80010050:	95 1c       	st.w	r10[0x4],r12
80010052:	76 2c       	ld.w	r12,r11[0x8]
80010054:	95 2c       	st.w	r10[0x8],r12
80010056:	76 3b       	ld.w	r11,r11[0xc]
80010058:	95 3b       	st.w	r10[0xc],r11
8001005a:	f2 ea 00 20 	ld.d	r10,r9[32]
8001005e:	f0 eb 00 20 	st.d	r8[32],r10
80010062:	72 a9       	ld.w	r9,r9[0x28]
80010064:	91 a9       	st.w	r8[0x28],r9
			
			centralData->controls.yaw_mode=YAW_RELATIVE;
80010066:	ec f8 00 00 	ld.w	r8,r6[0]
8001006a:	70 08       	ld.w	r8,r8[0x0]
8001006c:	30 09       	mov	r9,0
8001006e:	f1 49 01 6c 	st.w	r8[364],r9
			centralData->controls.control_mode = RATE_COMMAND_MODE;
80010072:	ec f8 00 00 	ld.w	r8,r6[0]
80010076:	70 08       	ld.w	r8,r8[0x0]
80010078:	30 29       	mov	r9,2
8001007a:	f1 49 01 68 	st.w	r8[360],r9
			
			cascade_stabilise(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
8001007e:	ec f8 00 00 	ld.w	r8,r6[0]
80010082:	70 08       	ld.w	r8,r8[0x0]
80010084:	f0 ca fe b8 	sub	r10,r8,-328
80010088:	ec f8 00 00 	ld.w	r8,r6[0]
8001008c:	70 08       	ld.w	r8,r8[0x0]
8001008e:	f0 c9 f6 7c 	sub	r9,r8,-2436
80010092:	ec f8 00 00 	ld.w	r8,r6[0]
80010096:	70 08       	ld.w	r8,r8[0x0]
80010098:	12 9b       	mov	r11,r9
8001009a:	10 9c       	mov	r12,r8
8001009c:	f0 16 00 9c 	mcall	r6[624]
			break;
800100a0:	e0 8f 01 55 	bral	8001034a <run_stabilisation+0x462>

		case MAV_MODE_STABILIZE_ARMED:
			centralData->waypoint_hold_init = false;
800100a4:	ec f8 00 00 	ld.w	r8,r6[0]
800100a8:	70 09       	ld.w	r9,r8[0x0]
800100aa:	30 08       	mov	r8,0
800100ac:	f3 68 0c ff 	st.b	r9[3327],r8
			centralData->mission_started = false;
800100b0:	ec f8 00 00 	ld.w	r8,r6[0]
800100b4:	70 09       	ld.w	r9,r8[0x0]
800100b6:	30 08       	mov	r8,0
800100b8:	f3 68 0d 03 	st.b	r9[3331],r8
			centralData->controls = get_command_from_remote();
800100bc:	ec f8 00 00 	ld.w	r8,r6[0]
800100c0:	70 05       	ld.w	r5,r8[0x0]
800100c2:	ee c8 00 30 	sub	r8,r7,48
800100c6:	10 9c       	mov	r12,r8
800100c8:	fe b0 fb a6 	rcall	8000f814 <get_command_from_remote>
800100cc:	ea c8 fe b8 	sub	r8,r5,-328
800100d0:	ee c9 00 30 	sub	r9,r7,48
800100d4:	f0 ca 00 00 	sub	r10,r8,0
800100d8:	f2 cb 00 00 	sub	r11,r9,0
800100dc:	76 0c       	ld.w	r12,r11[0x0]
800100de:	95 0c       	st.w	r10[0x0],r12
800100e0:	76 1c       	ld.w	r12,r11[0x4]
800100e2:	95 1c       	st.w	r10[0x4],r12
800100e4:	76 2c       	ld.w	r12,r11[0x8]
800100e6:	95 2c       	st.w	r10[0x8],r12
800100e8:	76 3b       	ld.w	r11,r11[0xc]
800100ea:	95 3b       	st.w	r10[0xc],r11
800100ec:	f0 ca ff f0 	sub	r10,r8,-16
800100f0:	f2 cb ff f0 	sub	r11,r9,-16
800100f4:	76 0c       	ld.w	r12,r11[0x0]
800100f6:	95 0c       	st.w	r10[0x0],r12
800100f8:	76 1c       	ld.w	r12,r11[0x4]
800100fa:	95 1c       	st.w	r10[0x4],r12
800100fc:	76 2c       	ld.w	r12,r11[0x8]
800100fe:	95 2c       	st.w	r10[0x8],r12
80010100:	76 3b       	ld.w	r11,r11[0xc]
80010102:	95 3b       	st.w	r10[0xc],r11
80010104:	f2 ea 00 20 	ld.d	r10,r9[32]
80010108:	f0 eb 00 20 	st.d	r8[32],r10
8001010c:	72 a9       	ld.w	r9,r9[0x28]
8001010e:	91 a9       	st.w	r8[0x28],r9
			
			centralData->controls.yaw_mode=YAW_RELATIVE;
80010110:	ec f8 00 00 	ld.w	r8,r6[0]
80010114:	70 08       	ld.w	r8,r8[0x0]
80010116:	30 09       	mov	r9,0
80010118:	f1 49 01 6c 	st.w	r8[364],r9
			centralData->controls.control_mode = ATTITUDE_COMMAND_MODE;
8001011c:	ec f8 00 00 	ld.w	r8,r6[0]
80010120:	70 08       	ld.w	r8,r8[0x0]
80010122:	30 19       	mov	r9,1
80010124:	f1 49 01 68 	st.w	r8[360],r9
			
			cascade_stabilise(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
80010128:	ec f8 00 00 	ld.w	r8,r6[0]
8001012c:	70 08       	ld.w	r8,r8[0x0]
8001012e:	f0 ca fe b8 	sub	r10,r8,-328
80010132:	ec f8 00 00 	ld.w	r8,r6[0]
80010136:	70 08       	ld.w	r8,r8[0x0]
80010138:	f0 c9 f6 7c 	sub	r9,r8,-2436
8001013c:	ec f8 00 00 	ld.w	r8,r6[0]
80010140:	70 08       	ld.w	r8,r8[0x0]
80010142:	12 9b       	mov	r11,r9
80010144:	10 9c       	mov	r12,r8
80010146:	f0 16 00 9c 	mcall	r6[624]
			break;
8001014a:	c0 09       	rjmp	8001034a <run_stabilisation+0x462>

		case MAV_MODE_GUIDED_ARMED:
			centralData->waypoint_hold_init = false;
8001014c:	ec f8 00 00 	ld.w	r8,r6[0]
80010150:	70 09       	ld.w	r9,r8[0x0]
80010152:	30 08       	mov	r8,0
80010154:	f3 68 0c ff 	st.b	r9[3327],r8
			centralData->mission_started = false;
80010158:	ec f8 00 00 	ld.w	r8,r6[0]
8001015c:	70 09       	ld.w	r9,r8[0x0]
8001015e:	30 08       	mov	r8,0
80010160:	f3 68 0d 03 	st.b	r9[3331],r8
			centralData->controls = get_command_from_remote();
80010164:	ec f8 00 00 	ld.w	r8,r6[0]
80010168:	70 05       	ld.w	r5,r8[0x0]
8001016a:	ee c8 00 30 	sub	r8,r7,48
8001016e:	10 9c       	mov	r12,r8
80010170:	fe b0 fb 52 	rcall	8000f814 <get_command_from_remote>
80010174:	ea c8 fe b8 	sub	r8,r5,-328
80010178:	ee c9 00 30 	sub	r9,r7,48
8001017c:	f0 ca 00 00 	sub	r10,r8,0
80010180:	f2 cb 00 00 	sub	r11,r9,0
80010184:	76 0c       	ld.w	r12,r11[0x0]
80010186:	95 0c       	st.w	r10[0x0],r12
80010188:	76 1c       	ld.w	r12,r11[0x4]
8001018a:	95 1c       	st.w	r10[0x4],r12
8001018c:	76 2c       	ld.w	r12,r11[0x8]
8001018e:	95 2c       	st.w	r10[0x8],r12
80010190:	76 3b       	ld.w	r11,r11[0xc]
80010192:	95 3b       	st.w	r10[0xc],r11
80010194:	f0 ca ff f0 	sub	r10,r8,-16
80010198:	f2 cb ff f0 	sub	r11,r9,-16
8001019c:	76 0c       	ld.w	r12,r11[0x0]
8001019e:	95 0c       	st.w	r10[0x0],r12
800101a0:	76 1c       	ld.w	r12,r11[0x4]
800101a2:	95 1c       	st.w	r10[0x4],r12
800101a4:	76 2c       	ld.w	r12,r11[0x8]
800101a6:	95 2c       	st.w	r10[0x8],r12
800101a8:	76 3b       	ld.w	r11,r11[0xc]
800101aa:	95 3b       	st.w	r10[0xc],r11
800101ac:	f2 ea 00 20 	ld.d	r10,r9[32]
800101b0:	f0 eb 00 20 	st.d	r8[32],r10
800101b4:	72 a9       	ld.w	r9,r9[0x28]
800101b6:	91 a9       	st.w	r8[0x28],r9
			//dbg_print("Thrust:");
			//dbg_print_num(centralData->controls.thrust*10000,10);
			//dbg_print("\n");
			centralData->controls.control_mode = VELOCITY_COMMAND_MODE;
800101b8:	ec f8 00 00 	ld.w	r8,r6[0]
800101bc:	70 08       	ld.w	r8,r8[0x0]
800101be:	30 09       	mov	r9,0
800101c0:	f1 49 01 68 	st.w	r8[360],r9
			centralData->controls.yaw_mode=YAW_RELATIVE;
800101c4:	ec f8 00 00 	ld.w	r8,r6[0]
800101c8:	70 08       	ld.w	r8,r8[0x0]
800101ca:	30 09       	mov	r9,0
800101cc:	f1 49 01 6c 	st.w	r8[364],r9
			
			centralData->controls.tvel[X]=-10.0*centralData->controls.rpy[PITCH];
800101d0:	ec f8 00 00 	ld.w	r8,r6[0]
800101d4:	70 08       	ld.w	r8,r8[0x0]
800101d6:	ec f9 00 00 	ld.w	r9,r6[0]
800101da:	72 09       	ld.w	r9,r9[0x0]
800101dc:	f2 fa 01 4c 	ld.w	r10,r9[332]
800101e0:	fc 19 c1 20 	movh	r9,0xc120
800101e4:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
800101e8:	f1 49 01 58 	st.w	r8[344],r9
			centralData->controls.tvel[Y]= 10.0*centralData->controls.rpy[ROLL];
800101ec:	ec f8 00 00 	ld.w	r8,r6[0]
800101f0:	70 08       	ld.w	r8,r8[0x0]
800101f2:	ec f9 00 00 	ld.w	r9,r6[0]
800101f6:	72 09       	ld.w	r9,r9[0x0]
800101f8:	f2 fa 01 48 	ld.w	r10,r9[328]
800101fc:	fc 19 41 20 	movh	r9,0x4120
80010200:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
80010204:	f1 49 01 5c 	st.w	r8[348],r9
			centralData->controls.tvel[Z]=- 1.5*centralData->controls.thrust;
80010208:	ec f8 00 00 	ld.w	r8,r6[0]
8001020c:	70 08       	ld.w	r8,r8[0x0]
8001020e:	ec f9 00 00 	ld.w	r9,r6[0]
80010212:	72 09       	ld.w	r9,r9[0x0]
80010214:	f2 fa 01 54 	ld.w	r10,r9[340]
80010218:	fc 19 bf c0 	movh	r9,0xbfc0
8001021c:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
80010220:	f1 49 01 60 	st.w	r8[352],r9
			
			cascade_stabilise(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
80010224:	ec f8 00 00 	ld.w	r8,r6[0]
80010228:	70 08       	ld.w	r8,r8[0x0]
8001022a:	f0 ca fe b8 	sub	r10,r8,-328
8001022e:	ec f8 00 00 	ld.w	r8,r6[0]
80010232:	70 08       	ld.w	r8,r8[0x0]
80010234:	f0 c9 f6 7c 	sub	r9,r8,-2436
80010238:	ec f8 00 00 	ld.w	r8,r6[0]
8001023c:	70 08       	ld.w	r8,r8[0x0]
8001023e:	12 9b       	mov	r11,r9
80010240:	10 9c       	mov	r12,r8
80010242:	f0 16 00 9c 	mcall	r6[624]
			break;
80010246:	c8 28       	rjmp	8001034a <run_stabilisation+0x462>
				
		case MAV_MODE_AUTO_ARMED:
			centralData->mission_started = true;
80010248:	ec f8 00 00 	ld.w	r8,r6[0]
8001024c:	70 09       	ld.w	r9,r8[0x0]
8001024e:	30 18       	mov	r8,1
80010250:	f3 68 0d 03 	st.b	r9[3331],r8
			centralData->waypoint_hold_init = false;
80010254:	ec f8 00 00 	ld.w	r8,r6[0]
80010258:	70 09       	ld.w	r9,r8[0x0]
8001025a:	30 08       	mov	r8,0
8001025c:	f3 68 0c ff 	st.b	r9[3327],r8
			
			centralData->controls = centralData->controls_nav;
80010260:	ec f8 00 00 	ld.w	r8,r6[0]
80010264:	70 08       	ld.w	r8,r8[0x0]
80010266:	ec f9 00 00 	ld.w	r9,r6[0]
8001026a:	72 09       	ld.w	r9,r9[0x0]
8001026c:	f0 c8 fe b8 	sub	r8,r8,-328
80010270:	f2 c9 fe 8c 	sub	r9,r9,-372
80010274:	f0 ca 00 00 	sub	r10,r8,0
80010278:	f2 cb 00 00 	sub	r11,r9,0
8001027c:	76 0c       	ld.w	r12,r11[0x0]
8001027e:	95 0c       	st.w	r10[0x0],r12
80010280:	76 1c       	ld.w	r12,r11[0x4]
80010282:	95 1c       	st.w	r10[0x4],r12
80010284:	76 2c       	ld.w	r12,r11[0x8]
80010286:	95 2c       	st.w	r10[0x8],r12
80010288:	76 3b       	ld.w	r11,r11[0xc]
8001028a:	95 3b       	st.w	r10[0xc],r11
8001028c:	f0 ca ff f0 	sub	r10,r8,-16
80010290:	f2 cb ff f0 	sub	r11,r9,-16
80010294:	76 0c       	ld.w	r12,r11[0x0]
80010296:	95 0c       	st.w	r10[0x0],r12
80010298:	76 1c       	ld.w	r12,r11[0x4]
8001029a:	95 1c       	st.w	r10[0x4],r12
8001029c:	76 2c       	ld.w	r12,r11[0x8]
8001029e:	95 2c       	st.w	r10[0x8],r12
800102a0:	76 3b       	ld.w	r11,r11[0xc]
800102a2:	95 3b       	st.w	r10[0xc],r11
800102a4:	f2 ea 00 20 	ld.d	r10,r9[32]
800102a8:	f0 eb 00 20 	st.d	r8[32],r10
800102ac:	72 a9       	ld.w	r9,r9[0x28]
800102ae:	91 a9       	st.w	r8[0x28],r9
			
			//dbg_print("Thrust main:");
			//dbg_print_num(centralData->controls.thrust*10000,10);
			//dbg_print("\n");
			
			centralData->controls.control_mode = VELOCITY_COMMAND_MODE;	
800102b0:	ec f8 00 00 	ld.w	r8,r6[0]
800102b4:	70 08       	ld.w	r8,r8[0x0]
800102b6:	30 09       	mov	r9,0
800102b8:	f1 49 01 68 	st.w	r8[360],r9
			centralData->controls.yaw_mode = YAW_COORDINATED;
800102bc:	ec f8 00 00 	ld.w	r8,r6[0]
800102c0:	70 08       	ld.w	r8,r8[0x0]
800102c2:	30 29       	mov	r9,2
800102c4:	f1 49 01 6c 	st.w	r8[364],r9
			cascade_stabilise(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
800102c8:	ec f8 00 00 	ld.w	r8,r6[0]
800102cc:	70 08       	ld.w	r8,r8[0x0]
800102ce:	f0 ca fe b8 	sub	r10,r8,-328
800102d2:	ec f8 00 00 	ld.w	r8,r6[0]
800102d6:	70 08       	ld.w	r8,r8[0x0]
800102d8:	f0 c9 f6 7c 	sub	r9,r8,-2436
800102dc:	ec f8 00 00 	ld.w	r8,r6[0]
800102e0:	70 08       	ld.w	r8,r8[0x0]
800102e2:	12 9b       	mov	r11,r9
800102e4:	10 9c       	mov	r12,r8
800102e6:	f0 16 00 9c 	mcall	r6[624]
			break;
800102ea:	c3 08       	rjmp	8001034a <run_stabilisation+0x462>
		case MAV_MODE_MANUAL_DISARMED:
		case MAV_MODE_STABILIZE_DISARMED:
		case MAV_MODE_GUIDED_DISARMED:
		case MAV_MODE_AUTO_DISARMED:
			//set_servos(&(servo_failsafe));
			centralData->controls.run_mode = MOTORS_OFF;
800102ec:	ec f8 00 00 	ld.w	r8,r6[0]
800102f0:	70 08       	ld.w	r8,r8[0x0]
800102f2:	30 09       	mov	r9,0
800102f4:	f1 49 01 70 	st.w	r8[368],r9
			for (i=0; i<NUMBER_OF_SERVO_OUTPUTS; i++) {
800102f8:	30 08       	mov	r8,0
800102fa:	ef 48 ff fc 	st.w	r7[-4],r8
800102fe:	c2 18       	rjmp	80010340 <run_stabilisation+0x458>
				centralData->servos[i]=servo_failsafe[i];
80010300:	ec f8 00 00 	ld.w	r8,r6[0]
80010304:	70 0a       	ld.w	r10,r8[0x0]
80010306:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001030a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001030e:	a5 68       	lsl	r8,0x4
80010310:	f4 08 00 08 	add	r8,r10,r8
80010314:	f0 c8 fc cc 	sub	r8,r8,-820
80010318:	ec fa 09 28 	ld.w	r10,r6[2344]
8001031c:	a5 69       	lsl	r9,0x4
8001031e:	f4 09 00 09 	add	r9,r10,r9
80010322:	20 08       	sub	r8,0
80010324:	20 09       	sub	r9,0
80010326:	72 0a       	ld.w	r10,r9[0x0]
80010328:	91 0a       	st.w	r8[0x0],r10
8001032a:	72 1a       	ld.w	r10,r9[0x4]
8001032c:	91 1a       	st.w	r8[0x4],r10
8001032e:	72 2a       	ld.w	r10,r9[0x8]
80010330:	91 2a       	st.w	r8[0x8],r10
80010332:	72 39       	ld.w	r9,r9[0xc]
80010334:	91 39       	st.w	r8[0xc],r9
		case MAV_MODE_STABILIZE_DISARMED:
		case MAV_MODE_GUIDED_DISARMED:
		case MAV_MODE_AUTO_DISARMED:
			//set_servos(&(servo_failsafe));
			centralData->controls.run_mode = MOTORS_OFF;
			for (i=0; i<NUMBER_OF_SERVO_OUTPUTS; i++) {
80010336:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001033a:	2f f8       	sub	r8,-1
8001033c:	ef 48 ff fc 	st.w	r7[-4],r8
80010340:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010344:	58 78       	cp.w	r8,7
80010346:	fe 9a ff dd 	brle	80010300 <run_stabilisation+0x418>
			break;
		
	}
	
	// !!! -- for safety, this should remain the only place where values are written to the servo outputs! --- !!!
	if (centralData->simulation_mode!=1) {
8001034a:	ec f8 00 00 	ld.w	r8,r6[0]
8001034e:	70 08       	ld.w	r8,r8[0x0]
80010350:	f0 f8 0d 08 	ld.w	r8,r8[3336]
80010354:	58 18       	cp.w	r8,1
80010356:	c0 90       	breq	80010368 <run_stabilisation+0x480>
		set_servos(&(centralData->servos));
80010358:	ec f8 00 00 	ld.w	r8,r6[0]
8001035c:	70 08       	ld.w	r8,r8[0x0]
8001035e:	f0 c8 fc cc 	sub	r8,r8,-820
80010362:	10 9c       	mov	r12,r8
80010364:	f0 16 00 b0 	mcall	r6[704]
	}
		

}
80010368:	2f 4d       	sub	sp,-48
8001036a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001036e:	00 00       	add	r0,r0
80010370:	80 00       	ld.sh	r0,r0[0x0]
80010372:	fd 78 eb cd 	stcond	lr[-5171],r8

80010374 <gps_task>:

task_return_t gps_task() {
80010374:	eb cd 40 c0 	pushm	r6-r7,lr
80010378:	1a 97       	mov	r7,sp
8001037a:	20 1d       	sub	sp,4
8001037c:	49 16       	lddpc	r6,800103c0 <gps_task+0x4c>
8001037e:	1e 26       	rsub	r6,pc
	uint32_t tnow = get_millis();	
80010380:	f0 16 00 0f 	mcall	r6[60]
80010384:	18 98       	mov	r8,r12
80010386:	ef 48 ff fc 	st.w	r7[-4],r8
	if (centralData->simulation_mode==1) {
8001038a:	ec f8 00 00 	ld.w	r8,r6[0]
8001038e:	70 08       	ld.w	r8,r8[0x0]
80010390:	f0 f8 0d 08 	ld.w	r8,r8[3336]
80010394:	58 18       	cp.w	r8,1
80010396:	c1 01       	brne	800103b6 <gps_task+0x42>
		simulate_gps(&centralData->sim_model, &centralData->GPS_data);
80010398:	ec f8 00 00 	ld.w	r8,r6[0]
8001039c:	70 08       	ld.w	r8,r8[0x0]
8001039e:	f0 c9 f8 b0 	sub	r9,r8,-1872
800103a2:	ec f8 00 00 	ld.w	r8,r6[0]
800103a6:	70 08       	ld.w	r8,r8[0x0]
800103a8:	f0 c8 f8 10 	sub	r8,r8,-2032
800103ac:	12 9b       	mov	r11,r9
800103ae:	10 9c       	mov	r12,r8
800103b0:	f0 16 01 51 	mcall	r6[1348]
800103b4:	c0 38       	rjmp	800103ba <gps_task+0x46>
	} else {
		gps_update();
800103b6:	f0 16 02 08 	mcall	r6[2080]
		dbg_print_num(centralData->GPS_data.longitude,10);
		dbg_print(" altitude");
		dbg_print_num(centralData->GPS_data.altitude,10);
		dbg_print("\n");
	}*/
}
800103ba:	2f fd       	sub	sp,-4
800103bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800103c0:	80 01       	ld.sh	r1,r0[0x0]
800103c2:	02 02       	add	r2,r1

800103c4 <run_estimator>:

task_return_t run_estimator()
{
800103c4:	eb cd 40 c0 	pushm	r6-r7,lr
800103c8:	1a 97       	mov	r7,sp
800103ca:	48 46       	lddpc	r6,800103d8 <run_estimator+0x14>
800103cc:	1e 26       	rsub	r6,pc
	estimator_loop();
800103ce:	f0 16 01 6e 	mcall	r6[1464]
}
800103d2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800103d6:	00 00       	add	r0,r0
800103d8:	80 01       	ld.sh	r1,r0[0x0]
800103da:	02 50       	eor	r0,r1

800103dc <run_navigation_task>:

task_return_t run_navigation_task()
{
800103dc:	eb cd 40 c0 	pushm	r6-r7,lr
800103e0:	1a 97       	mov	r7,sp
800103e2:	20 1d       	sub	sp,4
800103e4:	fe f6 02 20 	ld.w	r6,pc[544]
800103e8:	1e 26       	rsub	r6,pc
	int8_t i;
	
		switch (centralData->mav_state)
800103ea:	ec f8 00 00 	ld.w	r8,r6[0]
800103ee:	70 08       	ld.w	r8,r8[0x0]
800103f0:	f1 38 0d 06 	ld.ub	r8,r8[3334]
800103f4:	58 48       	cp.w	r8,4
800103f6:	c0 50       	breq	80010400 <run_navigation_task+0x24>
800103f8:	58 58       	cp.w	r8,5
800103fa:	e0 80 00 b5 	breq	80010564 <run_navigation_task+0x188>
800103fe:	cf f8       	rjmp	800105fc <run_navigation_task+0x220>
		{
			case MAV_STATE_ACTIVE:
				switch (centralData->mav_mode)
80010400:	ec f8 00 00 	ld.w	r8,r6[0]
80010404:	70 08       	ld.w	r8,r8[0x0]
80010406:	f1 38 0d 05 	ld.ub	r8,r8[3333]
8001040a:	e0 48 00 d8 	cp.w	r8,216
8001040e:	c7 40       	breq	800104f6 <run_navigation_task+0x11a>
80010410:	e0 48 00 dc 	cp.w	r8,220
80010414:	e0 81 00 f1 	brne	800105f6 <run_navigation_task+0x21a>
				{
					case MAV_MODE_AUTO_ARMED:
						if (centralData->waypoint_set)
80010418:	ec f8 00 00 	ld.w	r8,r6[0]
8001041c:	70 08       	ld.w	r8,r8[0x0]
8001041e:	f1 38 0c fc 	ld.ub	r8,r8[3324]
80010422:	58 08       	cp.w	r8,0
80010424:	c3 10       	breq	80010486 <run_navigation_task+0xaa>
						{
							run_navigation(centralData->waypoint_coordinates);
80010426:	ec f8 00 00 	ld.w	r8,r6[0]
8001042a:	70 08       	ld.w	r8,r8[0x0]
8001042c:	20 cd       	sub	sp,48
8001042e:	1a 99       	mov	r9,sp
80010430:	12 9b       	mov	r11,r9
80010432:	f0 ca f3 98 	sub	r10,r8,-3176
80010436:	f6 c8 00 00 	sub	r8,r11,0
8001043a:	f4 c9 00 00 	sub	r9,r10,0
8001043e:	72 0c       	ld.w	r12,r9[0x0]
80010440:	91 0c       	st.w	r8[0x0],r12
80010442:	72 1c       	ld.w	r12,r9[0x4]
80010444:	91 1c       	st.w	r8[0x4],r12
80010446:	72 2c       	ld.w	r12,r9[0x8]
80010448:	91 2c       	st.w	r8[0x8],r12
8001044a:	72 39       	ld.w	r9,r9[0xc]
8001044c:	91 39       	st.w	r8[0xc],r9
8001044e:	f6 c8 ff f0 	sub	r8,r11,-16
80010452:	f4 c9 ff f0 	sub	r9,r10,-16
80010456:	72 0c       	ld.w	r12,r9[0x0]
80010458:	91 0c       	st.w	r8[0x0],r12
8001045a:	72 1c       	ld.w	r12,r9[0x4]
8001045c:	91 1c       	st.w	r8[0x4],r12
8001045e:	72 2c       	ld.w	r12,r9[0x8]
80010460:	91 2c       	st.w	r8[0x8],r12
80010462:	72 39       	ld.w	r9,r9[0xc]
80010464:	91 39       	st.w	r8[0xc],r9
80010466:	f6 c8 ff e0 	sub	r8,r11,-32
8001046a:	f4 c9 ff e0 	sub	r9,r10,-32
8001046e:	72 0a       	ld.w	r10,r9[0x0]
80010470:	91 0a       	st.w	r8[0x0],r10
80010472:	72 1a       	ld.w	r10,r9[0x4]
80010474:	91 1a       	st.w	r8[0x4],r10
80010476:	72 2a       	ld.w	r10,r9[0x8]
80010478:	91 2a       	st.w	r8[0x8],r10
8001047a:	72 39       	ld.w	r9,r9[0xc]
8001047c:	91 39       	st.w	r8[0xc],r9
8001047e:	f0 16 00 90 	mcall	r6[576]
80010482:	2f 4d       	sub	sp,-48
80010484:	c3 78       	rjmp	800104f2 <run_navigation_task+0x116>
					
							//computeNewVelocity(centralData->controls_nav.tvel,newVelocity);
						}else if(centralData->waypoint_hold_init)
80010486:	ec f8 00 00 	ld.w	r8,r6[0]
8001048a:	70 08       	ld.w	r8,r8[0x0]
8001048c:	f1 38 0c ff 	ld.ub	r8,r8[3327]
80010490:	58 08       	cp.w	r8,0
80010492:	c3 00       	breq	800104f2 <run_navigation_task+0x116>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
80010494:	ec f8 00 00 	ld.w	r8,r6[0]
80010498:	70 08       	ld.w	r8,r8[0x0]
8001049a:	20 cd       	sub	sp,48
8001049c:	1a 99       	mov	r9,sp
8001049e:	12 9b       	mov	r11,r9
800104a0:	f0 ca f3 68 	sub	r10,r8,-3224
800104a4:	f6 c8 00 00 	sub	r8,r11,0
800104a8:	f4 c9 00 00 	sub	r9,r10,0
800104ac:	72 0c       	ld.w	r12,r9[0x0]
800104ae:	91 0c       	st.w	r8[0x0],r12
800104b0:	72 1c       	ld.w	r12,r9[0x4]
800104b2:	91 1c       	st.w	r8[0x4],r12
800104b4:	72 2c       	ld.w	r12,r9[0x8]
800104b6:	91 2c       	st.w	r8[0x8],r12
800104b8:	72 39       	ld.w	r9,r9[0xc]
800104ba:	91 39       	st.w	r8[0xc],r9
800104bc:	f6 c8 ff f0 	sub	r8,r11,-16
800104c0:	f4 c9 ff f0 	sub	r9,r10,-16
800104c4:	72 0c       	ld.w	r12,r9[0x0]
800104c6:	91 0c       	st.w	r8[0x0],r12
800104c8:	72 1c       	ld.w	r12,r9[0x4]
800104ca:	91 1c       	st.w	r8[0x4],r12
800104cc:	72 2c       	ld.w	r12,r9[0x8]
800104ce:	91 2c       	st.w	r8[0x8],r12
800104d0:	72 39       	ld.w	r9,r9[0xc]
800104d2:	91 39       	st.w	r8[0xc],r9
800104d4:	f6 c8 ff e0 	sub	r8,r11,-32
800104d8:	f4 c9 ff e0 	sub	r9,r10,-32
800104dc:	72 0a       	ld.w	r10,r9[0x0]
800104de:	91 0a       	st.w	r8[0x0],r10
800104e0:	72 1a       	ld.w	r10,r9[0x4]
800104e2:	91 1a       	st.w	r8[0x4],r10
800104e4:	72 2a       	ld.w	r10,r9[0x8]
800104e6:	91 2a       	st.w	r8[0x8],r10
800104e8:	72 39       	ld.w	r9,r9[0xc]
800104ea:	91 39       	st.w	r8[0xc],r9
800104ec:	f0 16 00 90 	mcall	r6[576]
800104f0:	2f 4d       	sub	sp,-48
						}
						break;
800104f2:	d7 03       	nop
						{
							run_navigation(centralData->waypoint_hold_coordinates);
						}
						break;
				}
				break;
800104f4:	c8 48       	rjmp	800105fc <run_navigation_task+0x220>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
						}
						break;
					case MAV_MODE_GUIDED_ARMED:
						if(centralData->waypoint_hold_init)
800104f6:	ec f8 00 00 	ld.w	r8,r6[0]
800104fa:	70 08       	ld.w	r8,r8[0x0]
800104fc:	f1 38 0c ff 	ld.ub	r8,r8[3327]
80010500:	58 08       	cp.w	r8,0
80010502:	c7 c0       	breq	800105fa <run_navigation_task+0x21e>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
80010504:	ec f8 00 00 	ld.w	r8,r6[0]
80010508:	70 08       	ld.w	r8,r8[0x0]
8001050a:	20 cd       	sub	sp,48
8001050c:	1a 99       	mov	r9,sp
8001050e:	12 9b       	mov	r11,r9
80010510:	f0 ca f3 68 	sub	r10,r8,-3224
80010514:	f6 c8 00 00 	sub	r8,r11,0
80010518:	f4 c9 00 00 	sub	r9,r10,0
8001051c:	72 0c       	ld.w	r12,r9[0x0]
8001051e:	91 0c       	st.w	r8[0x0],r12
80010520:	72 1c       	ld.w	r12,r9[0x4]
80010522:	91 1c       	st.w	r8[0x4],r12
80010524:	72 2c       	ld.w	r12,r9[0x8]
80010526:	91 2c       	st.w	r8[0x8],r12
80010528:	72 39       	ld.w	r9,r9[0xc]
8001052a:	91 39       	st.w	r8[0xc],r9
8001052c:	f6 c8 ff f0 	sub	r8,r11,-16
80010530:	f4 c9 ff f0 	sub	r9,r10,-16
80010534:	72 0c       	ld.w	r12,r9[0x0]
80010536:	91 0c       	st.w	r8[0x0],r12
80010538:	72 1c       	ld.w	r12,r9[0x4]
8001053a:	91 1c       	st.w	r8[0x4],r12
8001053c:	72 2c       	ld.w	r12,r9[0x8]
8001053e:	91 2c       	st.w	r8[0x8],r12
80010540:	72 39       	ld.w	r9,r9[0xc]
80010542:	91 39       	st.w	r8[0xc],r9
80010544:	f6 c8 ff e0 	sub	r8,r11,-32
80010548:	f4 c9 ff e0 	sub	r9,r10,-32
8001054c:	72 0a       	ld.w	r10,r9[0x0]
8001054e:	91 0a       	st.w	r8[0x0],r10
80010550:	72 1a       	ld.w	r10,r9[0x4]
80010552:	91 1a       	st.w	r8[0x4],r10
80010554:	72 2a       	ld.w	r10,r9[0x8]
80010556:	91 2a       	st.w	r8[0x8],r10
80010558:	72 39       	ld.w	r9,r9[0xc]
8001055a:	91 39       	st.w	r8[0xc],r9
8001055c:	f0 16 00 90 	mcall	r6[576]
80010560:	2f 4d       	sub	sp,-48
						}
						break;
				}
				break;
80010562:	c4 d8       	rjmp	800105fc <run_navigation_task+0x220>
			case MAV_STATE_CRITICAL:
				if ((centralData->mav_mode == MAV_MODE_GUIDED_ARMED)||(centralData->mav_mode == MAV_MODE_AUTO_ARMED))
80010564:	ec f8 00 00 	ld.w	r8,r6[0]
80010568:	70 08       	ld.w	r8,r8[0x0]
8001056a:	f1 39 0d 05 	ld.ub	r9,r8[3333]
8001056e:	3d 88       	mov	r8,-40
80010570:	f0 09 18 00 	cp.b	r9,r8
80010574:	c0 a0       	breq	80010588 <run_navigation_task+0x1ac>
80010576:	ec f8 00 00 	ld.w	r8,r6[0]
8001057a:	70 08       	ld.w	r8,r8[0x0]
8001057c:	f1 39 0d 05 	ld.ub	r9,r8[3333]
80010580:	3d c8       	mov	r8,-36
80010582:	f0 09 18 00 	cp.b	r9,r8
80010586:	c3 b1       	brne	800105fc <run_navigation_task+0x220>
				{
					if(centralData->critical_init)
80010588:	ec f8 00 00 	ld.w	r8,r6[0]
8001058c:	70 08       	ld.w	r8,r8[0x0]
8001058e:	f1 38 0d 01 	ld.ub	r8,r8[3329]
80010592:	58 08       	cp.w	r8,0
80010594:	c3 40       	breq	800105fc <run_navigation_task+0x220>
					{
						run_navigation(centralData->waypoint_critical_coordinates);
80010596:	ec f8 00 00 	ld.w	r8,r6[0]
8001059a:	70 08       	ld.w	r8,r8[0x0]
8001059c:	20 cd       	sub	sp,48
8001059e:	1a 99       	mov	r9,sp
800105a0:	12 9b       	mov	r11,r9
800105a2:	f0 ca f3 38 	sub	r10,r8,-3272
800105a6:	f6 c8 00 00 	sub	r8,r11,0
800105aa:	f4 c9 00 00 	sub	r9,r10,0
800105ae:	72 0c       	ld.w	r12,r9[0x0]
800105b0:	91 0c       	st.w	r8[0x0],r12
800105b2:	72 1c       	ld.w	r12,r9[0x4]
800105b4:	91 1c       	st.w	r8[0x4],r12
800105b6:	72 2c       	ld.w	r12,r9[0x8]
800105b8:	91 2c       	st.w	r8[0x8],r12
800105ba:	72 39       	ld.w	r9,r9[0xc]
800105bc:	91 39       	st.w	r8[0xc],r9
800105be:	f6 c8 ff f0 	sub	r8,r11,-16
800105c2:	f4 c9 ff f0 	sub	r9,r10,-16
800105c6:	72 0c       	ld.w	r12,r9[0x0]
800105c8:	91 0c       	st.w	r8[0x0],r12
800105ca:	72 1c       	ld.w	r12,r9[0x4]
800105cc:	91 1c       	st.w	r8[0x4],r12
800105ce:	72 2c       	ld.w	r12,r9[0x8]
800105d0:	91 2c       	st.w	r8[0x8],r12
800105d2:	72 39       	ld.w	r9,r9[0xc]
800105d4:	91 39       	st.w	r8[0xc],r9
800105d6:	f6 c8 ff e0 	sub	r8,r11,-32
800105da:	f4 c9 ff e0 	sub	r9,r10,-32
800105de:	72 0a       	ld.w	r10,r9[0x0]
800105e0:	91 0a       	st.w	r8[0x0],r10
800105e2:	72 1a       	ld.w	r10,r9[0x4]
800105e4:	91 1a       	st.w	r8[0x4],r10
800105e6:	72 2a       	ld.w	r10,r9[0x8]
800105e8:	91 2a       	st.w	r8[0x8],r10
800105ea:	72 39       	ld.w	r9,r9[0xc]
800105ec:	91 39       	st.w	r8[0xc],r9
800105ee:	f0 16 00 90 	mcall	r6[576]
800105f2:	2f 4d       	sub	sp,-48
800105f4:	c0 48       	rjmp	800105fc <run_navigation_task+0x220>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
						}
						break;
				}
				break;
800105f6:	d7 03       	nop
800105f8:	c0 28       	rjmp	800105fc <run_navigation_task+0x220>
800105fa:	d7 03       	nop
					}
				}
				break;
		}
	
}
800105fc:	2f fd       	sub	sp,-4
800105fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010602:	00 00       	add	r0,r0
80010604:	80 01       	ld.sh	r1,r0[0x0]
80010606:	02 6c       	and	r12,r1

80010608 <run_barometer>:
uint32_t last_baro_update;
task_return_t run_barometer()
{
80010608:	eb cd 40 c0 	pushm	r6-r7,lr
8001060c:	1a 97       	mov	r7,sp
8001060e:	20 3d       	sub	sp,12
80010610:	4a d6       	lddpc	r6,800106c4 <run_barometer+0xbc>
80010612:	1e 26       	rsub	r6,pc
	uint32_t tnow = get_micros();
80010614:	f0 16 00 29 	mcall	r6[164]
80010618:	18 98       	mov	r8,r12
8001061a:	ef 48 ff f4 	st.w	r7[-12],r8
	central_data_t *central_data=get_central_data();
8001061e:	f0 16 00 33 	mcall	r6[204]
80010622:	18 98       	mov	r8,r12
80010624:	ef 48 ff f8 	st.w	r7[-8],r8
	
	pressure_data *pressure= get_pressure_data_slow(centralData->pressure.altitude_offset);
80010628:	ec f8 00 00 	ld.w	r8,r6[0]
8001062c:	70 08       	ld.w	r8,r8[0x0]
8001062e:	f0 f8 0d 2c 	ld.w	r8,r8[3372]
80010632:	10 9c       	mov	r12,r8
80010634:	f0 16 01 c5 	mcall	r6[1812]
80010638:	18 98       	mov	r8,r12
8001063a:	ef 48 ff fc 	st.w	r7[-4],r8
	if (central_data->simulation_mode==1) {
8001063e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010642:	f0 f8 0d 08 	ld.w	r8,r8[3336]
80010646:	58 18       	cp.w	r8,1
80010648:	c0 b1       	brne	8001065e <run_barometer+0x56>
		simulate_barometer(&centralData->sim_model, pressure);
8001064a:	ec f8 00 00 	ld.w	r8,r6[0]
8001064e:	70 08       	ld.w	r8,r8[0x0]
80010650:	f0 c8 f8 10 	sub	r8,r8,-2032
80010654:	ee fb ff fc 	ld.w	r11,r7[-4]
80010658:	10 9c       	mov	r12,r8
8001065a:	f0 16 01 9e 	mcall	r6[1656]
	} 
	centralData->pressure=*pressure;
8001065e:	ec f8 00 00 	ld.w	r8,r6[0]
80010662:	70 08       	ld.w	r8,r8[0x0]
80010664:	ee f9 ff fc 	ld.w	r9,r7[-4]
80010668:	f0 c8 f2 f4 	sub	r8,r8,-3340
8001066c:	f0 ca 00 00 	sub	r10,r8,0
80010670:	f2 cb 00 00 	sub	r11,r9,0
80010674:	76 0c       	ld.w	r12,r11[0x0]
80010676:	95 0c       	st.w	r10[0x0],r12
80010678:	76 1c       	ld.w	r12,r11[0x4]
8001067a:	95 1c       	st.w	r10[0x4],r12
8001067c:	76 2c       	ld.w	r12,r11[0x8]
8001067e:	95 2c       	st.w	r10[0x8],r12
80010680:	76 3b       	ld.w	r11,r11[0xc]
80010682:	95 3b       	st.w	r10[0xc],r11
80010684:	f0 ca ff f0 	sub	r10,r8,-16
80010688:	f2 cb ff f0 	sub	r11,r9,-16
8001068c:	76 0c       	ld.w	r12,r11[0x0]
8001068e:	95 0c       	st.w	r10[0x0],r12
80010690:	76 1c       	ld.w	r12,r11[0x4]
80010692:	95 1c       	st.w	r10[0x4],r12
80010694:	76 2c       	ld.w	r12,r11[0x8]
80010696:	95 2c       	st.w	r10[0x8],r12
80010698:	76 3b       	ld.w	r11,r11[0xc]
8001069a:	95 3b       	st.w	r10[0xc],r11
8001069c:	f0 ca ff e0 	sub	r10,r8,-32
800106a0:	f2 cb ff e0 	sub	r11,r9,-32
800106a4:	76 0c       	ld.w	r12,r11[0x0]
800106a6:	95 0c       	st.w	r10[0x0],r12
800106a8:	76 1c       	ld.w	r12,r11[0x4]
800106aa:	95 1c       	st.w	r10[0x4],r12
800106ac:	76 2c       	ld.w	r12,r11[0x8]
800106ae:	95 2c       	st.w	r10[0x8],r12
800106b0:	76 3b       	ld.w	r11,r11[0xc]
800106b2:	95 3b       	st.w	r10[0xc],r11
800106b4:	f2 ea 00 30 	ld.d	r10,r9[48]
800106b8:	f0 eb 00 30 	st.d	r8[48],r10
	
}
800106bc:	2f dd       	sub	sp,-12
800106be:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800106c2:	00 00       	add	r0,r0
800106c4:	80 01       	ld.sh	r1,r0[0x0]
800106c6:	04 96       	mov	r6,r2

800106c8 <create_tasks>:


void create_tasks() {
800106c8:	eb cd 40 c0 	pushm	r6-r7,lr
800106cc:	1a 97       	mov	r7,sp
800106ce:	4a 96       	lddpc	r6,80010770 <create_tasks+0xa8>
800106d0:	1e 26       	rsub	r6,pc
	
	init_scheduler(&main_tasks);
800106d2:	ec f8 01 30 	ld.w	r8,r6[304]
800106d6:	10 9c       	mov	r12,r8
800106d8:	f0 16 01 11 	mcall	r6[1092]
	
	centralData = get_central_data();
800106dc:	f0 16 00 33 	mcall	r6[204]
800106e0:	18 99       	mov	r9,r12
800106e2:	ec f8 00 00 	ld.w	r8,r6[0]
800106e6:	91 09       	st.w	r8[0x0],r9
	
	register_task(&main_tasks, 0, 4000, RUN_REGULAR, &run_stabilisation );
800106e8:	ec f8 08 98 	ld.w	r8,r6[2200]
800106ec:	ec fc 01 30 	ld.w	r12,r6[304]
800106f0:	30 29       	mov	r9,2
800106f2:	e0 6a 0f a0 	mov	r10,4000
800106f6:	30 0b       	mov	r11,0
800106f8:	f0 16 00 64 	mcall	r6[400]
	
	register_task(&main_tasks, 1, 15000, RUN_REGULAR, &run_barometer);
800106fc:	ec f8 07 58 	ld.w	r8,r6[1880]
80010700:	ec fc 01 30 	ld.w	r12,r6[304]
80010704:	30 29       	mov	r9,2
80010706:	e0 6a 3a 98 	mov	r10,15000
8001070a:	30 1b       	mov	r11,1
8001070c:	f0 16 00 64 	mcall	r6[400]
	main_tasks.tasks[1].timing_mode=PERIODIC_RELATIVE;
80010710:	ec f8 01 30 	ld.w	r8,r6[304]
80010714:	30 19       	mov	r9,1
80010716:	f1 49 00 44 	st.w	r8[68],r9

	register_task(&main_tasks, 2, 100000, RUN_REGULAR, &gps_task);
8001071a:	ec f8 07 dc 	ld.w	r8,r6[2012]
8001071e:	ec fc 01 30 	ld.w	r12,r6[304]
80010722:	30 29       	mov	r9,2
80010724:	e0 7a 86 a0 	mov	r10,100000
80010728:	30 2b       	mov	r11,2
8001072a:	f0 16 00 64 	mcall	r6[400]
	//register_task(&main_tasks, 4, 4000, RUN_REGULAR, &run_estimator);
	//register_task(&main_tasks, , 100000, RUN_REGULAR, &read_radar);

	register_task(&main_tasks, 3, ORCA_TIME_STEP_MILLIS * 1000.0, RUN_REGULAR, &run_navigation_task);
8001072e:	ec f8 06 e4 	ld.w	r8,r6[1764]
80010732:	ec fc 01 30 	ld.w	r12,r6[304]
80010736:	30 29       	mov	r9,2
80010738:	e0 6a 27 10 	mov	r10,10000
8001073c:	30 3b       	mov	r11,3
8001073e:	f0 16 00 64 	mcall	r6[400]

	register_task(&main_tasks, 4, 200000, RUN_REGULAR, &set_mav_mode_n_state);
80010742:	ec f8 07 34 	ld.w	r8,r6[1844]
80010746:	ec fc 01 30 	ld.w	r12,r6[304]
8001074a:	30 29       	mov	r9,2
8001074c:	e2 7a 0d 40 	mov	r10,200000
80010750:	30 4b       	mov	r11,4
80010752:	f0 16 00 64 	mcall	r6[400]
	

	register_task(&main_tasks, 5, 4000, RUN_REGULAR, &mavlink_protocol_update);
80010756:	ec f8 03 a4 	ld.w	r8,r6[932]
8001075a:	ec fc 01 30 	ld.w	r12,r6[304]
8001075e:	30 29       	mov	r9,2
80010760:	e0 6a 0f a0 	mov	r10,4000
80010764:	30 5b       	mov	r11,5
80010766:	f0 16 00 64 	mcall	r6[400]

8001076a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001076e:	00 00       	add	r0,r0
80010770:	80 01       	ld.sh	r1,r0[0x0]
80010772:	05 54       	ld.sh	r4,--r2

80010774 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
80010774:	eb cd 40 80 	pushm	r7,lr
80010778:	1a 97       	mov	r7,sp
8001077a:	20 3d       	sub	sp,12
8001077c:	18 98       	mov	r8,r12
8001077e:	ef 4b ff f4 	st.w	r7[-12],r11
80010782:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
80010786:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001078a:	90 08       	ld.sh	r8,r8[0x0]
8001078c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80010790:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80010794:	f3 e8 20 08 	eor	r8,r9,r8
80010798:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
8001079c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800107a0:	a5 68       	lsl	r8,0x4
800107a2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800107a6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800107aa:	f3 e8 20 08 	eor	r8,r9,r8
800107ae:	5c 58       	castu.b	r8
800107b0:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
800107b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800107b8:	90 08       	ld.sh	r8,r8[0x0]
800107ba:	5c 78       	castu.h	r8
800107bc:	a9 88       	lsr	r8,0x8
800107be:	5c 88       	casts.h	r8
800107c0:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800107c4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800107c8:	a9 68       	lsl	r8,0x8
800107ca:	5c 88       	casts.h	r8
800107cc:	f3 e8 20 08 	eor	r8,r9,r8
800107d0:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800107d4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800107d8:	a3 78       	lsl	r8,0x3
800107da:	5c 88       	casts.h	r8
800107dc:	f3 e8 20 08 	eor	r8,r9,r8
800107e0:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800107e4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800107e8:	a5 88       	lsr	r8,0x4
800107ea:	5c 58       	castu.b	r8
800107ec:	f3 e8 20 08 	eor	r8,r9,r8
800107f0:	5c 88       	casts.h	r8
800107f2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800107f6:	b2 08       	st.h	r9[0x0],r8
}
800107f8:	2f dd       	sub	sp,-12
800107fa:	e3 cd 80 80 	ldm	sp++,r7,pc

800107fe <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
800107fe:	eb cd 40 80 	pushm	r7,lr
80010802:	1a 97       	mov	r7,sp
80010804:	20 1d       	sub	sp,4
80010806:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
8001080a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001080e:	3f f8       	mov	r8,-1
80010810:	b2 08       	st.h	r9[0x0],r8
}
80010812:	2f fd       	sub	sp,-4
80010814:	e3 cd 80 80 	ldm	sp++,r7,pc

80010818 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
80010818:	eb cd 40 c0 	pushm	r6-r7,lr
8001081c:	1a 97       	mov	r7,sp
8001081e:	20 1d       	sub	sp,4
80010820:	48 96       	lddpc	r6,80010844 <mavlink_get_channel_status+0x2c>
80010822:	1e 26       	rsub	r6,pc
80010824:	18 98       	mov	r8,r12
80010826:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
8001082a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001082e:	f0 09 15 04 	lsl	r9,r8,0x4
80010832:	ec f8 09 24 	ld.w	r8,r6[2340]
80010836:	f2 08 00 08 	add	r8,r9,r8
}
8001083a:	10 9c       	mov	r12,r8
8001083c:	2f fd       	sub	sp,-4
8001083e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010842:	00 00       	add	r0,r0
80010844:	80 01       	ld.sh	r1,r0[0x0]
80010846:	06 a6       	st.w	r3++,r6

80010848 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
80010848:	eb cd 40 c0 	pushm	r6-r7,lr
8001084c:	1a 97       	mov	r7,sp
8001084e:	20 1d       	sub	sp,4
80010850:	48 a6       	lddpc	r6,80010878 <mavlink_get_channel_buffer+0x30>
80010852:	1e 26       	rsub	r6,pc
80010854:	18 98       	mov	r8,r12
80010856:	ef 68 ff fc 	st.b	r7[-4],r8
#error ERROR: IF #define MAVLINK_EXTERNAL_RX_BUFFER IS SET, THE BUFFER HAS TO BE ALLOCATED OUTSIDE OF THIS FUNCTION (mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];)
#endif
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
8001085a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8001085e:	12 98       	mov	r8,r9
80010860:	a5 68       	lsl	r8,0x4
80010862:	12 08       	add	r8,r9
80010864:	a5 68       	lsl	r8,0x4
80010866:	10 99       	mov	r9,r8
80010868:	ec f8 09 20 	ld.w	r8,r6[2336]
8001086c:	f2 08 00 08 	add	r8,r9,r8
}
80010870:	10 9c       	mov	r12,r8
80010872:	2f fd       	sub	sp,-4
80010874:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010878:	80 01       	ld.sh	r1,r0[0x0]
8001087a:	06 d6       	st.w	--r3,r6

8001087c <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
8001087c:	eb cd 40 c0 	pushm	r6-r7,lr
80010880:	1a 97       	mov	r7,sp
80010882:	20 1d       	sub	sp,4
80010884:	48 66       	lddpc	r6,8001089c <mavlink_start_checksum+0x20>
80010886:	1e 26       	rsub	r6,pc
80010888:	ef 4c ff fc 	st.w	r7[-4],r12
	crc_init(&msg->checksum);
8001088c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010890:	10 9c       	mov	r12,r8
80010892:	cb 6f       	rcall	800107fe <crc_init>
}
80010894:	2f fd       	sub	sp,-4
80010896:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001089a:	00 00       	add	r0,r0
8001089c:	80 01       	ld.sh	r1,r0[0x0]
8001089e:	07 0a       	ld.w	r10,r3++

800108a0 <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
800108a0:	eb cd 40 c0 	pushm	r6-r7,lr
800108a4:	1a 97       	mov	r7,sp
800108a6:	20 2d       	sub	sp,8
800108a8:	48 96       	lddpc	r6,800108cc <mavlink_update_checksum+0x2c>
800108aa:	1e 26       	rsub	r6,pc
800108ac:	ef 4c ff fc 	st.w	r7[-4],r12
800108b0:	16 98       	mov	r8,r11
800108b2:	ef 68 ff f8 	st.b	r7[-8],r8
	crc_accumulate(c, &msg->checksum);
800108b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800108ba:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800108be:	12 9b       	mov	r11,r9
800108c0:	10 9c       	mov	r12,r8
800108c2:	c5 9f       	rcall	80010774 <crc_accumulate>
}
800108c4:	2f ed       	sub	sp,-8
800108c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800108ca:	00 00       	add	r0,r0
800108cc:	80 01       	ld.sh	r1,r0[0x0]
800108ce:	07 2e       	ld.uh	lr,r3++

800108d0 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
800108d0:	eb cd 40 c0 	pushm	r6-r7,lr
800108d4:	1a 97       	mov	r7,sp
800108d6:	20 7d       	sub	sp,28
800108d8:	fe f6 03 b8 	ld.w	r6,pc[952]
800108dc:	1e 26       	rsub	r6,pc
800108de:	16 98       	mov	r8,r11
800108e0:	ef 4a ff e8 	st.w	r7[-24],r10
800108e4:	ef 49 ff e4 	st.w	r7[-28],r9
800108e8:	18 99       	mov	r9,r12
800108ea:	ef 69 ff f0 	st.b	r7[-16],r9
800108ee:	ef 68 ff ec 	st.b	r7[-20],r8
	static const uint8_t mavlink_message_lengths[256] = MAVLINK_MESSAGE_LENGTHS;
#define MAVLINK_MESSAGE_LENGTH(msgid) mavlink_message_lengths[msgid]
#endif
#endif

	mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan); ///< The currently decoded message
800108f2:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800108f6:	10 9c       	mov	r12,r8
800108f8:	ca 8f       	rcall	80010848 <mavlink_get_channel_buffer>
800108fa:	18 98       	mov	r8,r12
800108fc:	ef 48 ff f4 	st.w	r7[-12],r8
	mavlink_status_t* status = mavlink_get_channel_status(chan); ///< The current decode status
80010900:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80010904:	10 9c       	mov	r12,r8
80010906:	c8 9f       	rcall	80010818 <mavlink_get_channel_status>
80010908:	18 98       	mov	r8,r12
8001090a:	ef 48 ff f8 	st.w	r7[-8],r8
	int bufferIndex = 0;
8001090e:	30 08       	mov	r8,0
80010910:	ef 48 ff fc 	st.w	r7[-4],r8

	status->msg_received = 0;
80010914:	ee f9 ff f8 	ld.w	r9,r7[-8]
80010918:	30 08       	mov	r8,0
8001091a:	b2 88       	st.b	r9[0x0],r8

	switch (status->parse_state)
8001091c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010920:	70 18       	ld.w	r8,r8[0x4]
80010922:	58 98       	cp.w	r8,9
80010924:	e0 8b 01 70 	brhi	80010c04 <mavlink_parse_char+0x334>
80010928:	fe c9 ff f8 	sub	r9,pc,-8
8001092c:	f2 08 00 2f 	add	pc,r9,r8<<0x2
80010930:	e0 8f 00 14 	bral	80010958 <mavlink_parse_char+0x88>
80010934:	e0 8f 00 12 	bral	80010958 <mavlink_parse_char+0x88>
80010938:	e0 8f 00 28 	bral	80010988 <mavlink_parse_char+0xb8>
8001093c:	e0 8f 00 69 	bral	80010a0e <mavlink_parse_char+0x13e>
80010940:	e0 8f 00 57 	bral	800109ee <mavlink_parse_char+0x11e>
80010944:	e0 8f 00 75 	bral	80010a2e <mavlink_parse_char+0x15e>
80010948:	e0 8f 00 83 	bral	80010a4e <mavlink_parse_char+0x17e>
8001094c:	e0 8f 00 9b 	bral	80010a82 <mavlink_parse_char+0x1b2>
80010950:	e0 8f 00 c2 	bral	80010ad4 <mavlink_parse_char+0x204>
80010954:	e0 8f 01 08 	bral	80010b64 <mavlink_parse_char+0x294>
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
80010958:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8001095c:	3f e8       	mov	r8,-2
8001095e:	f0 09 18 00 	cp.b	r9,r8
80010962:	e0 81 01 4c 	brne	80010bfa <mavlink_parse_char+0x32a>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
80010966:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001096a:	30 29       	mov	r9,2
8001096c:	91 19       	st.w	r8[0x4],r9
			rxmsg->len = 0;
8001096e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80010972:	30 08       	mov	r8,0
80010974:	b2 b8       	st.b	r9[0x3],r8
			rxmsg->magic = c;
80010976:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001097a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001097e:	b2 a8       	st.b	r9[0x2],r8
			mavlink_start_checksum(rxmsg);
80010980:	ee fc ff f4 	ld.w	r12,r7[-12]
80010984:	c7 cf       	rcall	8001087c <mavlink_start_checksum>
		}
		break;
80010986:	c3 f9       	rjmp	80010c04 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
80010988:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001098c:	11 88       	ld.ub	r8,r8[0x0]
8001098e:	58 08       	cp.w	r8,0
80010990:	c1 a0       	breq	800109c4 <mavlink_parse_char+0xf4>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
80010992:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010996:	11 98       	ld.ub	r8,r8[0x1]
80010998:	2f f8       	sub	r8,-1
8001099a:	5c 58       	castu.b	r8
8001099c:	ee f9 ff f8 	ld.w	r9,r7[-8]
800109a0:	b2 98       	st.b	r9[0x1],r8
			status->parse_error++;
800109a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800109a6:	11 a8       	ld.ub	r8,r8[0x2]
800109a8:	2f f8       	sub	r8,-1
800109aa:	5c 58       	castu.b	r8
800109ac:	ee f9 ff f8 	ld.w	r9,r7[-8]
800109b0:	b2 a8       	st.b	r9[0x2],r8
			status->msg_received = 0;
800109b2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800109b6:	30 08       	mov	r8,0
800109b8:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
800109ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800109be:	30 19       	mov	r9,1
800109c0:	91 19       	st.w	r8[0x4],r9
			rxmsg->len = c;
			status->packet_idx = 0;
			mavlink_update_checksum(rxmsg, c);
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
		}
		break;
800109c2:	c2 19       	rjmp	80010c04 <mavlink_parse_char+0x334>
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
		}
		else
		{
			// NOT counting STX, LENGTH, SEQ, SYSID, COMPID, MSGID, CRC1 and CRC2
			rxmsg->len = c;
800109c4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800109c8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800109cc:	b2 b8       	st.b	r9[0x3],r8
			status->packet_idx = 0;
800109ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800109d2:	30 08       	mov	r8,0
800109d4:	f3 68 00 08 	st.b	r9[8],r8
			mavlink_update_checksum(rxmsg, c);
800109d8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800109dc:	10 9b       	mov	r11,r8
800109de:	ee fc ff f4 	ld.w	r12,r7[-12]
800109e2:	c5 ff       	rcall	800108a0 <mavlink_update_checksum>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
800109e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800109e8:	30 49       	mov	r9,4
800109ea:	91 19       	st.w	r8[0x4],r9
		}
		break;
800109ec:	c0 c9       	rjmp	80010c04 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->seq = c;
800109ee:	ee f9 ff f4 	ld.w	r9,r7[-12]
800109f2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800109f6:	b2 c8       	st.b	r9[0x4],r8
		mavlink_update_checksum(rxmsg, c);
800109f8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800109fc:	10 9b       	mov	r11,r8
800109fe:	ee fc ff f4 	ld.w	r12,r7[-12]
80010a02:	c4 ff       	rcall	800108a0 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
80010a04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010a08:	30 39       	mov	r9,3
80010a0a:	91 19       	st.w	r8[0x4],r9
		break;
80010a0c:	cf c8       	rjmp	80010c04 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
80010a0e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80010a12:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80010a16:	b2 d8       	st.b	r9[0x5],r8
		mavlink_update_checksum(rxmsg, c);
80010a18:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80010a1c:	10 9b       	mov	r11,r8
80010a1e:	ee fc ff f4 	ld.w	r12,r7[-12]
80010a22:	c3 ff       	rcall	800108a0 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
80010a24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010a28:	30 59       	mov	r9,5
80010a2a:	91 19       	st.w	r8[0x4],r9
		break;
80010a2c:	ce c8       	rjmp	80010c04 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
80010a2e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80010a32:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80010a36:	b2 e8       	st.b	r9[0x6],r8
		mavlink_update_checksum(rxmsg, c);
80010a38:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80010a3c:	10 9b       	mov	r11,r8
80010a3e:	ee fc ff f4 	ld.w	r12,r7[-12]
80010a42:	c2 ff       	rcall	800108a0 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
80010a44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010a48:	30 69       	mov	r9,6
80010a4a:	91 19       	st.w	r8[0x4],r9
		break;
80010a4c:	cd c8       	rjmp	80010c04 <mavlink_parse_char+0x334>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
				mavlink_start_checksum(rxmsg);
			}
	        }
#endif
		rxmsg->msgid = c;
80010a4e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80010a52:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80010a56:	b2 f8       	st.b	r9[0x7],r8
		mavlink_update_checksum(rxmsg, c);
80010a58:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80010a5c:	10 9b       	mov	r11,r8
80010a5e:	ee fc ff f4 	ld.w	r12,r7[-12]
80010a62:	c1 ff       	rcall	800108a0 <mavlink_update_checksum>
		if (rxmsg->len == 0)
80010a64:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010a68:	11 b8       	ld.ub	r8,r8[0x3]
80010a6a:	58 08       	cp.w	r8,0
80010a6c:	c0 61       	brne	80010a78 <mavlink_parse_char+0x1a8>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
80010a6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010a72:	30 89       	mov	r9,8
80010a74:	91 19       	st.w	r8[0x4],r9
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
		}
		break;
80010a76:	cc 78       	rjmp	80010c04 <mavlink_parse_char+0x334>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
80010a78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010a7c:	30 79       	mov	r9,7
80010a7e:	91 19       	st.w	r8[0x4],r9
		}
		break;
80010a80:	cc 28       	rjmp	80010c04 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_MSGID:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
80010a82:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010a86:	2f 88       	sub	r8,-8
80010a88:	10 9a       	mov	r10,r8
80010a8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010a8e:	f1 38 00 08 	ld.ub	r8,r8[8]
80010a92:	10 99       	mov	r9,r8
80010a94:	12 0a       	add	r10,r9
80010a96:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80010a9a:	b4 89       	st.b	r10[0x0],r9
80010a9c:	2f f8       	sub	r8,-1
80010a9e:	5c 58       	castu.b	r8
80010aa0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80010aa4:	f3 68 00 08 	st.b	r9[8],r8
		mavlink_update_checksum(rxmsg, c);
80010aa8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80010aac:	10 9b       	mov	r11,r8
80010aae:	ee fc ff f4 	ld.w	r12,r7[-12]
80010ab2:	cf 7e       	rcall	800108a0 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
80010ab4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010ab8:	f1 39 00 08 	ld.ub	r9,r8[8]
80010abc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010ac0:	11 b8       	ld.ub	r8,r8[0x3]
80010ac2:	f0 09 18 00 	cp.b	r9,r8
80010ac6:	e0 81 00 9c 	brne	80010bfe <mavlink_parse_char+0x32e>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
80010aca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010ace:	30 89       	mov	r9,8
80010ad0:	91 19       	st.w	r8[0x4],r9
		}
		break;
80010ad2:	c9 98       	rjmp	80010c04 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD:
#if MAVLINK_CRC_EXTRA
		mavlink_update_checksum(rxmsg, MAVLINK_MESSAGE_CRC(rxmsg->msgid));
80010ad4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010ad8:	11 f8       	ld.ub	r8,r8[0x7]
80010ada:	ec f9 09 1c 	ld.w	r9,r6[2332]
80010ade:	f2 08 07 08 	ld.ub	r8,r9[r8]
80010ae2:	10 9b       	mov	r11,r8
80010ae4:	ee fc ff f4 	ld.w	r12,r7[-12]
80010ae8:	cd ce       	rcall	800108a0 <mavlink_update_checksum>
#endif
		if (c != (rxmsg->checksum & 0xFF)) {
80010aea:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80010aee:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010af2:	90 08       	ld.sh	r8,r8[0x0]
80010af4:	5c 78       	castu.h	r8
80010af6:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80010afa:	10 39       	cp.w	r9,r8
80010afc:	c2 30       	breq	80010b42 <mavlink_parse_char+0x272>
			// Check first checksum byte
			status->parse_error++;
80010afe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010b02:	11 a8       	ld.ub	r8,r8[0x2]
80010b04:	2f f8       	sub	r8,-1
80010b06:	5c 58       	castu.b	r8
80010b08:	ee f9 ff f8 	ld.w	r9,r7[-8]
80010b0c:	b2 a8       	st.b	r9[0x2],r8
			status->msg_received = 0;
80010b0e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80010b12:	30 08       	mov	r8,0
80010b14:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
80010b16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010b1a:	30 19       	mov	r9,1
80010b1c:	91 19       	st.w	r8[0x4],r9
			if (c == MAVLINK_STX)
80010b1e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80010b22:	3f e8       	mov	r8,-2
80010b24:	f0 09 18 00 	cp.b	r9,r8
80010b28:	c6 d1       	brne	80010c02 <mavlink_parse_char+0x332>
			{
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
80010b2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010b2e:	30 29       	mov	r9,2
80010b30:	91 19       	st.w	r8[0x4],r9
				rxmsg->len = 0;
80010b32:	ee f9 ff f4 	ld.w	r9,r7[-12]
80010b36:	30 08       	mov	r8,0
80010b38:	b2 b8       	st.b	r9[0x3],r8
				mavlink_start_checksum(rxmsg);
80010b3a:	ee fc ff f4 	ld.w	r12,r7[-12]
80010b3e:	c9 fe       	rcall	8001087c <mavlink_start_checksum>
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
		}
		break;
80010b40:	c6 28       	rjmp	80010c04 <mavlink_parse_char+0x334>
				mavlink_start_checksum(rxmsg);
			}
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
80010b42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010b46:	30 99       	mov	r9,9
80010b48:	91 19       	st.w	r8[0x4],r9
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
80010b4a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010b4e:	2f 88       	sub	r8,-8
80010b50:	10 99       	mov	r9,r8
80010b52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010b56:	f1 38 00 08 	ld.ub	r8,r8[8]
80010b5a:	10 09       	add	r9,r8
80010b5c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80010b60:	b2 88       	st.b	r9[0x0],r8
		}
		break;
80010b62:	c5 18       	rjmp	80010c04 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_CRC1:
		if (c != (rxmsg->checksum >> 8)) {
80010b64:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80010b68:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010b6c:	90 08       	ld.sh	r8,r8[0x0]
80010b6e:	5c 78       	castu.h	r8
80010b70:	a9 88       	lsr	r8,0x8
80010b72:	5c 88       	casts.h	r8
80010b74:	f0 09 19 00 	cp.h	r9,r8
80010b78:	c2 30       	breq	80010bbe <mavlink_parse_char+0x2ee>
			// Check second checksum byte
			status->parse_error++;
80010b7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010b7e:	11 a8       	ld.ub	r8,r8[0x2]
80010b80:	2f f8       	sub	r8,-1
80010b82:	5c 58       	castu.b	r8
80010b84:	ee f9 ff f8 	ld.w	r9,r7[-8]
80010b88:	b2 a8       	st.b	r9[0x2],r8
			status->msg_received = 0;
80010b8a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80010b8e:	30 08       	mov	r8,0
80010b90:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
80010b92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010b96:	30 19       	mov	r9,1
80010b98:	91 19       	st.w	r8[0x4],r9
			if (c == MAVLINK_STX)
80010b9a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80010b9e:	3f e8       	mov	r8,-2
80010ba0:	f0 09 18 00 	cp.b	r9,r8
80010ba4:	c3 01       	brne	80010c04 <mavlink_parse_char+0x334>
			{
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
80010ba6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010baa:	30 29       	mov	r9,2
80010bac:	91 19       	st.w	r8[0x4],r9
				rxmsg->len = 0;
80010bae:	ee f9 ff f4 	ld.w	r9,r7[-12]
80010bb2:	30 08       	mov	r8,0
80010bb4:	b2 b8       	st.b	r9[0x3],r8
				mavlink_start_checksum(rxmsg);
80010bb6:	ee fc ff f4 	ld.w	r12,r7[-12]
80010bba:	c6 1e       	rcall	8001087c <mavlink_start_checksum>
80010bbc:	c2 48       	rjmp	80010c04 <mavlink_parse_char+0x334>
			}
		}
		else
		{
			// Successfully got message
			status->msg_received = 1;
80010bbe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80010bc2:	30 18       	mov	r8,1
80010bc4:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
80010bc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010bca:	30 19       	mov	r9,1
80010bcc:	91 19       	st.w	r8[0x4],r9
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
80010bce:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010bd2:	2f 88       	sub	r8,-8
80010bd4:	10 99       	mov	r9,r8
80010bd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010bda:	f1 38 00 08 	ld.ub	r8,r8[8]
80010bde:	2f f8       	sub	r8,-1
80010be0:	10 09       	add	r9,r8
80010be2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80010be6:	b2 88       	st.b	r9[0x0],r8
			memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
80010be8:	e0 6a 01 10 	mov	r10,272
80010bec:	ee fb ff f4 	ld.w	r11,r7[-12]
80010bf0:	ee fc ff e8 	ld.w	r12,r7[-24]
80010bf4:	f0 16 00 1b 	mcall	r6[108]
80010bf8:	c0 68       	rjmp	80010c04 <mavlink_parse_char+0x334>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
			rxmsg->len = 0;
			rxmsg->magic = c;
			mavlink_start_checksum(rxmsg);
		}
		break;
80010bfa:	d7 03       	nop
80010bfc:	c0 48       	rjmp	80010c04 <mavlink_parse_char+0x334>
		mavlink_update_checksum(rxmsg, c);
		if (status->packet_idx == rxmsg->len)
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
		}
		break;
80010bfe:	d7 03       	nop
80010c00:	c0 28       	rjmp	80010c04 <mavlink_parse_char+0x334>
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
		}
		break;
80010c02:	d7 03       	nop
			memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
		}
		break;
	}

	bufferIndex++;
80010c04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010c08:	2f f8       	sub	r8,-1
80010c0a:	ef 48 ff fc 	st.w	r7[-4],r8
	// If a message has been sucessfully decoded, check index
	if (status->msg_received == 1)
80010c0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010c12:	11 89       	ld.ub	r9,r8[0x0]
80010c14:	30 18       	mov	r8,1
80010c16:	f0 09 18 00 	cp.b	r9,r8
80010c1a:	c1 91       	brne	80010c4c <mavlink_parse_char+0x37c>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
80010c1c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010c20:	11 c8       	ld.ub	r8,r8[0x4]
80010c22:	ee f9 ff f8 	ld.w	r9,r7[-8]
80010c26:	f3 68 00 09 	st.b	r9[9],r8
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
80010c2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010c2e:	90 68       	ld.sh	r8,r8[0xc]
80010c30:	58 08       	cp.w	r8,0
80010c32:	c0 51       	brne	80010c3c <mavlink_parse_char+0x36c>
80010c34:	ee f9 ff f8 	ld.w	r9,r7[-8]
80010c38:	30 08       	mov	r8,0
80010c3a:	b2 78       	st.h	r9[0xe],r8
		// Count this packet as received
		status->packet_rx_success_count++;
80010c3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010c40:	90 68       	ld.sh	r8,r8[0xc]
80010c42:	2f f8       	sub	r8,-1
80010c44:	5c 88       	casts.h	r8
80010c46:	ee f9 ff f8 	ld.w	r9,r7[-8]
80010c4a:	b2 68       	st.h	r9[0xc],r8
	}

	r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
80010c4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010c50:	f1 38 00 09 	ld.ub	r8,r8[9]
80010c54:	2f f8       	sub	r8,-1
80010c56:	5c 58       	castu.b	r8
80010c58:	ee f9 ff e4 	ld.w	r9,r7[-28]
80010c5c:	f3 68 00 09 	st.b	r9[9],r8
	r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
80010c60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010c64:	90 68       	ld.sh	r8,r8[0xc]
80010c66:	ee f9 ff e4 	ld.w	r9,r7[-28]
80010c6a:	b2 68       	st.h	r9[0xc],r8
	r_mavlink_status->packet_rx_drop_count = status->parse_error;
80010c6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010c70:	11 a8       	ld.ub	r8,r8[0x2]
80010c72:	ee f9 ff e4 	ld.w	r9,r7[-28]
80010c76:	b2 78       	st.h	r9[0xe],r8
	status->parse_error = 0;
80010c78:	ee f9 ff f8 	ld.w	r9,r7[-8]
80010c7c:	30 08       	mov	r8,0
80010c7e:	b2 a8       	st.b	r9[0x2],r8
	return status->msg_received;
80010c80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010c84:	11 88       	ld.ub	r8,r8[0x0]
}
80010c86:	10 9c       	mov	r12,r8
80010c88:	2f 9d       	sub	sp,-28
80010c8a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010c8e:	00 00       	add	r0,r0
80010c90:	80 01       	ld.sh	r1,r0[0x0]
80010c92:	07 60       	ld.uh	r0,--r3

80010c94 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
80010c94:	eb cd 40 80 	pushm	r7,lr
80010c98:	1a 97       	mov	r7,sp
80010c9a:	20 2d       	sub	sp,8
80010c9c:	ef 4c ff fc 	st.w	r7[-4],r12
80010ca0:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
80010ca4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010ca8:	2f f8       	sub	r8,-1
80010caa:	11 88       	ld.ub	r8,r8[0x0]
80010cac:	ee f9 ff fc 	ld.w	r9,r7[-4]
80010cb0:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
80010cb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010cb6:	f0 c9 ff ff 	sub	r9,r8,-1
80010cba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010cbe:	11 88       	ld.ub	r8,r8[0x0]
80010cc0:	b2 88       	st.b	r9[0x0],r8
}
80010cc2:	2f ed       	sub	sp,-8
80010cc4:	e3 cd 80 80 	ldm	sp++,r7,pc

80010cc8 <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
80010cc8:	eb cd 40 80 	pushm	r7,lr
80010ccc:	1a 97       	mov	r7,sp
80010cce:	20 2d       	sub	sp,8
80010cd0:	ef 4c ff fc 	st.w	r7[-4],r12
80010cd4:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
80010cd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010cdc:	2f d8       	sub	r8,-3
80010cde:	11 88       	ld.ub	r8,r8[0x0]
80010ce0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80010ce4:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
80010ce6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010cea:	f0 c9 ff ff 	sub	r9,r8,-1
80010cee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010cf2:	2f e8       	sub	r8,-2
80010cf4:	11 88       	ld.ub	r8,r8[0x0]
80010cf6:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
80010cf8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010cfc:	f0 c9 ff fe 	sub	r9,r8,-2
80010d00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010d04:	2f f8       	sub	r8,-1
80010d06:	11 88       	ld.ub	r8,r8[0x0]
80010d08:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
80010d0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010d0e:	f0 c9 ff fd 	sub	r9,r8,-3
80010d12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010d16:	11 88       	ld.ub	r8,r8[0x0]
80010d18:	b2 88       	st.b	r9[0x0],r8
}
80010d1a:	2f ed       	sub	sp,-8
80010d1c:	e3 cd 80 80 	ldm	sp++,r7,pc

80010d20 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80010d20:	eb cd 40 c0 	pushm	r6-r7,lr
80010d24:	1a 97       	mov	r7,sp
80010d26:	20 3d       	sub	sp,12
80010d28:	49 06       	lddpc	r6,80010d68 <mav_array_memcpy+0x48>
80010d2a:	1e 26       	rsub	r6,pc
80010d2c:	ef 4c ff fc 	st.w	r7[-4],r12
80010d30:	ef 4b ff f8 	st.w	r7[-8],r11
80010d34:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80010d38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010d3c:	58 08       	cp.w	r8,0
80010d3e:	c0 91       	brne	80010d50 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80010d40:	ee fa ff f4 	ld.w	r10,r7[-12]
80010d44:	30 0b       	mov	r11,0
80010d46:	ee fc ff fc 	ld.w	r12,r7[-4]
80010d4a:	f0 16 00 31 	mcall	r6[196]
80010d4e:	c0 98       	rjmp	80010d60 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80010d50:	ee fa ff f4 	ld.w	r10,r7[-12]
80010d54:	ee fb ff f8 	ld.w	r11,r7[-8]
80010d58:	ee fc ff fc 	ld.w	r12,r7[-4]
80010d5c:	f0 16 00 1b 	mcall	r6[108]
	}
}
80010d60:	2f dd       	sub	sp,-12
80010d62:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010d66:	00 00       	add	r0,r0
80010d68:	80 01       	ld.sh	r1,r0[0x0]
80010d6a:	0b ae       	ld.ub	lr,r5[0x2]

80010d6c <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
80010d6c:	eb cd 40 c0 	pushm	r6-r7,lr
80010d70:	1a 97       	mov	r7,sp
80010d72:	20 3d       	sub	sp,12
80010d74:	48 d6       	lddpc	r6,80010da8 <_MAV_RETURN_uint16_t+0x3c>
80010d76:	1e 26       	rsub	r6,pc
80010d78:	ef 4c ff f8 	st.w	r7[-8],r12
80010d7c:	16 98       	mov	r8,r11
80010d7e:	ef 68 ff f4 	st.b	r7[-12],r8
80010d82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010d86:	2f 88       	sub	r8,-8
80010d88:	10 99       	mov	r9,r8
80010d8a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80010d8e:	10 09       	add	r9,r8
80010d90:	ee c8 00 02 	sub	r8,r7,2
80010d94:	12 9b       	mov	r11,r9
80010d96:	10 9c       	mov	r12,r8
80010d98:	c7 ef       	rcall	80010c94 <byte_swap_2>
80010d9a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80010d9e:	10 9c       	mov	r12,r8
80010da0:	2f dd       	sub	sp,-12
80010da2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010da6:	00 00       	add	r0,r0
80010da8:	80 01       	ld.sh	r1,r0[0x0]
80010daa:	0b fa       	ld.ub	r10,r5[0x7]

80010dac <_MAV_RETURN_int16_t>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
80010dac:	eb cd 40 c0 	pushm	r6-r7,lr
80010db0:	1a 97       	mov	r7,sp
80010db2:	20 3d       	sub	sp,12
80010db4:	48 d6       	lddpc	r6,80010de8 <_MAV_RETURN_int16_t+0x3c>
80010db6:	1e 26       	rsub	r6,pc
80010db8:	ef 4c ff f8 	st.w	r7[-8],r12
80010dbc:	16 98       	mov	r8,r11
80010dbe:	ef 68 ff f4 	st.b	r7[-12],r8
80010dc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010dc6:	2f 88       	sub	r8,-8
80010dc8:	10 99       	mov	r9,r8
80010dca:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80010dce:	10 09       	add	r9,r8
80010dd0:	ee c8 00 02 	sub	r8,r7,2
80010dd4:	12 9b       	mov	r11,r9
80010dd6:	10 9c       	mov	r12,r8
80010dd8:	c5 ef       	rcall	80010c94 <byte_swap_2>
80010dda:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80010dde:	10 9c       	mov	r12,r8
80010de0:	2f dd       	sub	sp,-12
80010de2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010de6:	00 00       	add	r0,r0
80010de8:	80 01       	ld.sh	r1,r0[0x0]
80010dea:	0c 3a       	cp.w	r10,r6

80010dec <_MAV_RETURN_float>:
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
_MAV_MSG_RETURN_TYPE(int32_t,  4)
_MAV_MSG_RETURN_TYPE(uint64_t, 8)
_MAV_MSG_RETURN_TYPE(int64_t,  8)
_MAV_MSG_RETURN_TYPE(float,    4)
80010dec:	eb cd 40 c0 	pushm	r6-r7,lr
80010df0:	1a 97       	mov	r7,sp
80010df2:	20 3d       	sub	sp,12
80010df4:	48 d6       	lddpc	r6,80010e28 <_MAV_RETURN_float+0x3c>
80010df6:	1e 26       	rsub	r6,pc
80010df8:	ef 4c ff f8 	st.w	r7[-8],r12
80010dfc:	16 98       	mov	r8,r11
80010dfe:	ef 68 ff f4 	st.b	r7[-12],r8
80010e02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010e06:	2f 88       	sub	r8,-8
80010e08:	10 99       	mov	r9,r8
80010e0a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80010e0e:	10 09       	add	r9,r8
80010e10:	ee c8 00 04 	sub	r8,r7,4
80010e14:	12 9b       	mov	r11,r9
80010e16:	10 9c       	mov	r12,r8
80010e18:	c5 8f       	rcall	80010cc8 <byte_swap_4>
80010e1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010e1e:	10 9c       	mov	r12,r8
80010e20:	2f dd       	sub	sp,-12
80010e22:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010e26:	00 00       	add	r0,r0
80010e28:	80 01       	ld.sh	r1,r0[0x0]
80010e2a:	0c 7a       	tst	r10,r6

80010e2c <_MAV_RETURN_char_array>:
_MAV_MSG_RETURN_TYPE(double)
#endif // MAVLINK_NEED_BYTE_SWAP

static inline uint16_t _MAV_RETURN_char_array(const mavlink_message_t *msg, char *value, 
						     uint8_t array_length, uint8_t wire_offset)
{
80010e2c:	eb cd 40 c0 	pushm	r6-r7,lr
80010e30:	1a 97       	mov	r7,sp
80010e32:	20 4d       	sub	sp,16
80010e34:	49 16       	lddpc	r6,80010e78 <_MAV_RETURN_char_array+0x4c>
80010e36:	1e 26       	rsub	r6,pc
80010e38:	ef 4c ff fc 	st.w	r7[-4],r12
80010e3c:	ef 4b ff f8 	st.w	r7[-8],r11
80010e40:	12 98       	mov	r8,r9
80010e42:	14 99       	mov	r9,r10
80010e44:	ef 69 ff f4 	st.b	r7[-12],r9
80010e48:	ef 68 ff f0 	st.b	r7[-16],r8
	memcpy(value, &_MAV_PAYLOAD(msg)[wire_offset], array_length);
80010e4c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80010e50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010e54:	f0 ca ff f8 	sub	r10,r8,-8
80010e58:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80010e5c:	f4 08 00 08 	add	r8,r10,r8
80010e60:	12 9a       	mov	r10,r9
80010e62:	10 9b       	mov	r11,r8
80010e64:	ee fc ff f8 	ld.w	r12,r7[-8]
80010e68:	f0 16 00 1b 	mcall	r6[108]
	return array_length;
80010e6c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
}
80010e70:	10 9c       	mov	r12,r8
80010e72:	2f cd       	sub	sp,-16
80010e74:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010e78:	80 01       	ld.sh	r1,r0[0x0]
80010e7a:	0c ba       	st.h	r6++,r10

80010e7c <mavlink_msg_param_request_read_get_target_system>:
 * @brief Get field target_system from param_request_read message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_param_request_read_get_target_system(const mavlink_message_t* msg)
{
80010e7c:	eb cd 40 80 	pushm	r7,lr
80010e80:	1a 97       	mov	r7,sp
80010e82:	20 1d       	sub	sp,4
80010e84:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
80010e88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010e8c:	2f 88       	sub	r8,-8
80010e8e:	2f e8       	sub	r8,-2
80010e90:	11 88       	ld.ub	r8,r8[0x0]
}
80010e92:	10 9c       	mov	r12,r8
80010e94:	2f fd       	sub	sp,-4
80010e96:	e3 cd 80 80 	ldm	sp++,r7,pc

80010e9a <mavlink_msg_param_request_read_get_target_component>:
 * @brief Get field target_component from param_request_read message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_param_request_read_get_target_component(const mavlink_message_t* msg)
{
80010e9a:	eb cd 40 80 	pushm	r7,lr
80010e9e:	1a 97       	mov	r7,sp
80010ea0:	20 1d       	sub	sp,4
80010ea2:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
80010ea6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010eaa:	2f 88       	sub	r8,-8
80010eac:	2f d8       	sub	r8,-3
80010eae:	11 88       	ld.ub	r8,r8[0x0]
}
80010eb0:	10 9c       	mov	r12,r8
80010eb2:	2f fd       	sub	sp,-4
80010eb4:	e3 cd 80 80 	ldm	sp++,r7,pc

80010eb8 <mavlink_msg_param_request_read_get_param_id>:
 * @brief Get field param_id from param_request_read message
 *
 * @return Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
 */
static inline uint16_t mavlink_msg_param_request_read_get_param_id(const mavlink_message_t* msg, char *param_id)
{
80010eb8:	eb cd 40 c0 	pushm	r6-r7,lr
80010ebc:	1a 97       	mov	r7,sp
80010ebe:	20 2d       	sub	sp,8
80010ec0:	48 a6       	lddpc	r6,80010ee8 <mavlink_msg_param_request_read_get_param_id+0x30>
80010ec2:	1e 26       	rsub	r6,pc
80010ec4:	ef 4c ff fc 	st.w	r7[-4],r12
80010ec8:	ef 4b ff f8 	st.w	r7[-8],r11
	return _MAV_RETURN_char_array(msg, param_id, 16,  4);
80010ecc:	30 49       	mov	r9,4
80010ece:	31 0a       	mov	r10,16
80010ed0:	ee fb ff f8 	ld.w	r11,r7[-8]
80010ed4:	ee fc ff fc 	ld.w	r12,r7[-4]
80010ed8:	ca af       	rcall	80010e2c <_MAV_RETURN_char_array>
80010eda:	18 98       	mov	r8,r12
80010edc:	5c 88       	casts.h	r8
80010ede:	5c 88       	casts.h	r8
}
80010ee0:	10 9c       	mov	r12,r8
80010ee2:	2f ed       	sub	sp,-8
80010ee4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010ee8:	80 01       	ld.sh	r1,r0[0x0]
80010eea:	0d 46       	ld.w	r6,--r6

80010eec <mavlink_msg_param_request_read_get_param_index>:
 * @brief Get field param_index from param_request_read message
 *
 * @return Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored)
 */
static inline int16_t mavlink_msg_param_request_read_get_param_index(const mavlink_message_t* msg)
{
80010eec:	eb cd 40 c0 	pushm	r6-r7,lr
80010ef0:	1a 97       	mov	r7,sp
80010ef2:	20 1d       	sub	sp,4
80010ef4:	48 76       	lddpc	r6,80010f10 <mavlink_msg_param_request_read_get_param_index+0x24>
80010ef6:	1e 26       	rsub	r6,pc
80010ef8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  0);
80010efc:	30 0b       	mov	r11,0
80010efe:	ee fc ff fc 	ld.w	r12,r7[-4]
80010f02:	c5 5f       	rcall	80010dac <_MAV_RETURN_int16_t>
80010f04:	18 98       	mov	r8,r12
}
80010f06:	10 9c       	mov	r12,r8
80010f08:	2f fd       	sub	sp,-4
80010f0a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010f0e:	00 00       	add	r0,r0
80010f10:	80 01       	ld.sh	r1,r0[0x0]
80010f12:	0d 7a       	ld.ub	r10,--r6

80010f14 <mavlink_msg_param_request_read_decode>:
 *
 * @param msg The message to decode
 * @param param_request_read C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_request_read_decode(const mavlink_message_t* msg, mavlink_param_request_read_t* param_request_read)
{
80010f14:	eb cd 40 c0 	pushm	r6-r7,lr
80010f18:	1a 97       	mov	r7,sp
80010f1a:	20 2d       	sub	sp,8
80010f1c:	49 36       	lddpc	r6,80010f68 <mavlink_msg_param_request_read_decode+0x54>
80010f1e:	1e 26       	rsub	r6,pc
80010f20:	ef 4c ff fc 	st.w	r7[-4],r12
80010f24:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	param_request_read->param_index = mavlink_msg_param_request_read_get_param_index(msg);
80010f28:	ee fc ff fc 	ld.w	r12,r7[-4]
80010f2c:	ce 0f       	rcall	80010eec <mavlink_msg_param_request_read_get_param_index>
80010f2e:	18 98       	mov	r8,r12
80010f30:	ee f9 ff f8 	ld.w	r9,r7[-8]
80010f34:	b2 08       	st.h	r9[0x0],r8
	param_request_read->target_system = mavlink_msg_param_request_read_get_target_system(msg);
80010f36:	ee fc ff fc 	ld.w	r12,r7[-4]
80010f3a:	ca 1f       	rcall	80010e7c <mavlink_msg_param_request_read_get_target_system>
80010f3c:	18 98       	mov	r8,r12
80010f3e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80010f42:	b2 a8       	st.b	r9[0x2],r8
	param_request_read->target_component = mavlink_msg_param_request_read_get_target_component(msg);
80010f44:	ee fc ff fc 	ld.w	r12,r7[-4]
80010f48:	ca 9f       	rcall	80010e9a <mavlink_msg_param_request_read_get_target_component>
80010f4a:	18 98       	mov	r8,r12
80010f4c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80010f50:	b2 b8       	st.b	r9[0x3],r8
	mavlink_msg_param_request_read_get_param_id(msg, param_request_read->param_id);
80010f52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010f56:	2f c8       	sub	r8,-4
80010f58:	10 9b       	mov	r11,r8
80010f5a:	ee fc ff fc 	ld.w	r12,r7[-4]
80010f5e:	ca df       	rcall	80010eb8 <mavlink_msg_param_request_read_get_param_id>
#else
	memcpy(param_request_read, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PARAM_REQUEST_READ_LEN);
#endif
}
80010f60:	2f ed       	sub	sp,-8
80010f62:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010f66:	00 00       	add	r0,r0
80010f68:	80 01       	ld.sh	r1,r0[0x0]
80010f6a:	0d a2       	ld.ub	r2,r6[0x2]

80010f6c <mavlink_msg_param_request_list_get_target_system>:
 * @brief Get field target_system from param_request_list message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_param_request_list_get_target_system(const mavlink_message_t* msg)
{
80010f6c:	eb cd 40 80 	pushm	r7,lr
80010f70:	1a 97       	mov	r7,sp
80010f72:	20 1d       	sub	sp,4
80010f74:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
80010f78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010f7c:	2f 88       	sub	r8,-8
80010f7e:	11 88       	ld.ub	r8,r8[0x0]
}
80010f80:	10 9c       	mov	r12,r8
80010f82:	2f fd       	sub	sp,-4
80010f84:	e3 cd 80 80 	ldm	sp++,r7,pc

80010f88 <mavlink_msg_param_request_list_get_target_component>:
 * @brief Get field target_component from param_request_list message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_param_request_list_get_target_component(const mavlink_message_t* msg)
{
80010f88:	eb cd 40 80 	pushm	r7,lr
80010f8c:	1a 97       	mov	r7,sp
80010f8e:	20 1d       	sub	sp,4
80010f90:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
80010f94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010f98:	2f 88       	sub	r8,-8
80010f9a:	2f f8       	sub	r8,-1
80010f9c:	11 88       	ld.ub	r8,r8[0x0]
}
80010f9e:	10 9c       	mov	r12,r8
80010fa0:	2f fd       	sub	sp,-4
80010fa2:	e3 cd 80 80 	ldm	sp++,r7,pc

80010fa6 <mavlink_msg_param_request_list_decode>:
 *
 * @param msg The message to decode
 * @param param_request_list C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_request_list_decode(const mavlink_message_t* msg, mavlink_param_request_list_t* param_request_list)
{
80010fa6:	eb cd 40 c0 	pushm	r6-r7,lr
80010faa:	1a 97       	mov	r7,sp
80010fac:	20 2d       	sub	sp,8
80010fae:	48 c6       	lddpc	r6,80010fdc <mavlink_msg_param_request_list_decode+0x36>
80010fb0:	1e 26       	rsub	r6,pc
80010fb2:	ef 4c ff fc 	st.w	r7[-4],r12
80010fb6:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	param_request_list->target_system = mavlink_msg_param_request_list_get_target_system(msg);
80010fba:	ee fc ff fc 	ld.w	r12,r7[-4]
80010fbe:	cd 7f       	rcall	80010f6c <mavlink_msg_param_request_list_get_target_system>
80010fc0:	18 98       	mov	r8,r12
80010fc2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80010fc6:	b2 88       	st.b	r9[0x0],r8
	param_request_list->target_component = mavlink_msg_param_request_list_get_target_component(msg);
80010fc8:	ee fc ff fc 	ld.w	r12,r7[-4]
80010fcc:	cd ef       	rcall	80010f88 <mavlink_msg_param_request_list_get_target_component>
80010fce:	18 98       	mov	r8,r12
80010fd0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80010fd4:	b2 98       	st.b	r9[0x1],r8
#else
	memcpy(param_request_list, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PARAM_REQUEST_LIST_LEN);
#endif
}
80010fd6:	2f ed       	sub	sp,-8
80010fd8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010fdc:	80 01       	ld.sh	r1,r0[0x0]
80010fde:	0e 34       	cp.w	r4,r7

80010fe0 <mavlink_msg_request_data_stream_get_target_system>:
 * @brief Get field target_system from request_data_stream message
 *
 * @return The target requested to send the message stream.
 */
static inline uint8_t mavlink_msg_request_data_stream_get_target_system(const mavlink_message_t* msg)
{
80010fe0:	eb cd 40 80 	pushm	r7,lr
80010fe4:	1a 97       	mov	r7,sp
80010fe6:	20 1d       	sub	sp,4
80010fe8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
80010fec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010ff0:	2f 88       	sub	r8,-8
80010ff2:	2f e8       	sub	r8,-2
80010ff4:	11 88       	ld.ub	r8,r8[0x0]
}
80010ff6:	10 9c       	mov	r12,r8
80010ff8:	2f fd       	sub	sp,-4
80010ffa:	e3 cd 80 80 	ldm	sp++,r7,pc

80010ffe <mavlink_msg_request_data_stream_get_target_component>:
 * @brief Get field target_component from request_data_stream message
 *
 * @return The target requested to send the message stream.
 */
static inline uint8_t mavlink_msg_request_data_stream_get_target_component(const mavlink_message_t* msg)
{
80010ffe:	eb cd 40 80 	pushm	r7,lr
80011002:	1a 97       	mov	r7,sp
80011004:	20 1d       	sub	sp,4
80011006:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8001100a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001100e:	2f 88       	sub	r8,-8
80011010:	2f d8       	sub	r8,-3
80011012:	11 88       	ld.ub	r8,r8[0x0]
}
80011014:	10 9c       	mov	r12,r8
80011016:	2f fd       	sub	sp,-4
80011018:	e3 cd 80 80 	ldm	sp++,r7,pc

8001101c <mavlink_msg_request_data_stream_get_req_stream_id>:
 * @brief Get field req_stream_id from request_data_stream message
 *
 * @return The ID of the requested data stream
 */
static inline uint8_t mavlink_msg_request_data_stream_get_req_stream_id(const mavlink_message_t* msg)
{
8001101c:	eb cd 40 80 	pushm	r7,lr
80011020:	1a 97       	mov	r7,sp
80011022:	20 1d       	sub	sp,4
80011024:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  4);
80011028:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001102c:	2f 88       	sub	r8,-8
8001102e:	2f c8       	sub	r8,-4
80011030:	11 88       	ld.ub	r8,r8[0x0]
}
80011032:	10 9c       	mov	r12,r8
80011034:	2f fd       	sub	sp,-4
80011036:	e3 cd 80 80 	ldm	sp++,r7,pc

8001103a <mavlink_msg_request_data_stream_get_req_message_rate>:
 * @brief Get field req_message_rate from request_data_stream message
 *
 * @return The requested interval between two messages of this type
 */
static inline uint16_t mavlink_msg_request_data_stream_get_req_message_rate(const mavlink_message_t* msg)
{
8001103a:	eb cd 40 c0 	pushm	r6-r7,lr
8001103e:	1a 97       	mov	r7,sp
80011040:	20 1d       	sub	sp,4
80011042:	48 86       	lddpc	r6,80011060 <mavlink_msg_request_data_stream_get_req_message_rate+0x26>
80011044:	1e 26       	rsub	r6,pc
80011046:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
8001104a:	30 0b       	mov	r11,0
8001104c:	ee fc ff fc 	ld.w	r12,r7[-4]
80011050:	c8 ee       	rcall	80010d6c <_MAV_RETURN_uint16_t>
80011052:	18 98       	mov	r8,r12
80011054:	5c 88       	casts.h	r8
80011056:	5c 88       	casts.h	r8
}
80011058:	10 9c       	mov	r12,r8
8001105a:	2f fd       	sub	sp,-4
8001105c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011060:	80 01       	ld.sh	r1,r0[0x0]
80011062:	0e c8       	st.b	r7++,r8

80011064 <mavlink_msg_request_data_stream_get_start_stop>:
 * @brief Get field start_stop from request_data_stream message
 *
 * @return 1 to start sending, 0 to stop sending.
 */
static inline uint8_t mavlink_msg_request_data_stream_get_start_stop(const mavlink_message_t* msg)
{
80011064:	eb cd 40 80 	pushm	r7,lr
80011068:	1a 97       	mov	r7,sp
8001106a:	20 1d       	sub	sp,4
8001106c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  5);
80011070:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011074:	2f 88       	sub	r8,-8
80011076:	2f b8       	sub	r8,-5
80011078:	11 88       	ld.ub	r8,r8[0x0]
}
8001107a:	10 9c       	mov	r12,r8
8001107c:	2f fd       	sub	sp,-4
8001107e:	e3 cd 80 80 	ldm	sp++,r7,pc

80011082 <mavlink_msg_request_data_stream_decode>:
 *
 * @param msg The message to decode
 * @param request_data_stream C-struct to decode the message contents into
 */
static inline void mavlink_msg_request_data_stream_decode(const mavlink_message_t* msg, mavlink_request_data_stream_t* request_data_stream)
{
80011082:	eb cd 40 c0 	pushm	r6-r7,lr
80011086:	1a 97       	mov	r7,sp
80011088:	20 2d       	sub	sp,8
8001108a:	49 76       	lddpc	r6,800110e4 <mavlink_msg_request_data_stream_decode+0x62>
8001108c:	1e 26       	rsub	r6,pc
8001108e:	ef 4c ff fc 	st.w	r7[-4],r12
80011092:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	request_data_stream->req_message_rate = mavlink_msg_request_data_stream_get_req_message_rate(msg);
80011096:	ee fc ff fc 	ld.w	r12,r7[-4]
8001109a:	cd 0f       	rcall	8001103a <mavlink_msg_request_data_stream_get_req_message_rate>
8001109c:	18 98       	mov	r8,r12
8001109e:	5c 88       	casts.h	r8
800110a0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800110a4:	b2 08       	st.h	r9[0x0],r8
	request_data_stream->target_system = mavlink_msg_request_data_stream_get_target_system(msg);
800110a6:	ee fc ff fc 	ld.w	r12,r7[-4]
800110aa:	c9 bf       	rcall	80010fe0 <mavlink_msg_request_data_stream_get_target_system>
800110ac:	18 98       	mov	r8,r12
800110ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800110b2:	b2 a8       	st.b	r9[0x2],r8
	request_data_stream->target_component = mavlink_msg_request_data_stream_get_target_component(msg);
800110b4:	ee fc ff fc 	ld.w	r12,r7[-4]
800110b8:	ca 3f       	rcall	80010ffe <mavlink_msg_request_data_stream_get_target_component>
800110ba:	18 98       	mov	r8,r12
800110bc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800110c0:	b2 b8       	st.b	r9[0x3],r8
	request_data_stream->req_stream_id = mavlink_msg_request_data_stream_get_req_stream_id(msg);
800110c2:	ee fc ff fc 	ld.w	r12,r7[-4]
800110c6:	ca bf       	rcall	8001101c <mavlink_msg_request_data_stream_get_req_stream_id>
800110c8:	18 98       	mov	r8,r12
800110ca:	ee f9 ff f8 	ld.w	r9,r7[-8]
800110ce:	b2 c8       	st.b	r9[0x4],r8
	request_data_stream->start_stop = mavlink_msg_request_data_stream_get_start_stop(msg);
800110d0:	ee fc ff fc 	ld.w	r12,r7[-4]
800110d4:	cc 8f       	rcall	80011064 <mavlink_msg_request_data_stream_get_start_stop>
800110d6:	18 98       	mov	r8,r12
800110d8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800110dc:	b2 d8       	st.b	r9[0x5],r8
#else
	memcpy(request_data_stream, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_REQUEST_DATA_STREAM_LEN);
#endif
}
800110de:	2f ed       	sub	sp,-8
800110e0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800110e4:	80 01       	ld.sh	r1,r0[0x0]
800110e6:	0f 10       	ld.sh	r0,r7++

800110e8 <mavlink_msg_command_long_get_target_system>:
 * @brief Get field target_system from command_long message
 *
 * @return System which should execute the command
 */
static inline uint8_t mavlink_msg_command_long_get_target_system(const mavlink_message_t* msg)
{
800110e8:	eb cd 40 80 	pushm	r7,lr
800110ec:	1a 97       	mov	r7,sp
800110ee:	20 1d       	sub	sp,4
800110f0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  30);
800110f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800110f8:	2f 88       	sub	r8,-8
800110fa:	2e 28       	sub	r8,-30
800110fc:	11 88       	ld.ub	r8,r8[0x0]
}
800110fe:	10 9c       	mov	r12,r8
80011100:	2f fd       	sub	sp,-4
80011102:	e3 cd 80 80 	ldm	sp++,r7,pc

80011106 <mavlink_msg_command_long_get_target_component>:
 * @brief Get field target_component from command_long message
 *
 * @return Component which should execute the command, 0 for all components
 */
static inline uint8_t mavlink_msg_command_long_get_target_component(const mavlink_message_t* msg)
{
80011106:	eb cd 40 80 	pushm	r7,lr
8001110a:	1a 97       	mov	r7,sp
8001110c:	20 1d       	sub	sp,4
8001110e:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  31);
80011112:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011116:	2f 88       	sub	r8,-8
80011118:	2e 18       	sub	r8,-31
8001111a:	11 88       	ld.ub	r8,r8[0x0]
}
8001111c:	10 9c       	mov	r12,r8
8001111e:	2f fd       	sub	sp,-4
80011120:	e3 cd 80 80 	ldm	sp++,r7,pc

80011124 <mavlink_msg_command_long_get_command>:
 * @brief Get field command from command_long message
 *
 * @return Command ID, as defined by MAV_CMD enum.
 */
static inline uint16_t mavlink_msg_command_long_get_command(const mavlink_message_t* msg)
{
80011124:	eb cd 40 c0 	pushm	r6-r7,lr
80011128:	1a 97       	mov	r7,sp
8001112a:	20 1d       	sub	sp,4
8001112c:	48 86       	lddpc	r6,8001114c <mavlink_msg_command_long_get_command+0x28>
8001112e:	1e 26       	rsub	r6,pc
80011130:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  28);
80011134:	31 cb       	mov	r11,28
80011136:	ee fc ff fc 	ld.w	r12,r7[-4]
8001113a:	c1 9e       	rcall	80010d6c <_MAV_RETURN_uint16_t>
8001113c:	18 98       	mov	r8,r12
8001113e:	5c 88       	casts.h	r8
80011140:	5c 88       	casts.h	r8
}
80011142:	10 9c       	mov	r12,r8
80011144:	2f fd       	sub	sp,-4
80011146:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001114a:	00 00       	add	r0,r0
8001114c:	80 01       	ld.sh	r1,r0[0x0]
8001114e:	0f b2       	ld.ub	r2,r7[0x3]

80011150 <mavlink_msg_command_long_get_confirmation>:
 * @brief Get field confirmation from command_long message
 *
 * @return 0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command)
 */
static inline uint8_t mavlink_msg_command_long_get_confirmation(const mavlink_message_t* msg)
{
80011150:	eb cd 40 80 	pushm	r7,lr
80011154:	1a 97       	mov	r7,sp
80011156:	20 1d       	sub	sp,4
80011158:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  32);
8001115c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011160:	2f 88       	sub	r8,-8
80011162:	2e 08       	sub	r8,-32
80011164:	11 88       	ld.ub	r8,r8[0x0]
}
80011166:	10 9c       	mov	r12,r8
80011168:	2f fd       	sub	sp,-4
8001116a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001116e <mavlink_msg_command_long_get_param1>:
 * @brief Get field param1 from command_long message
 *
 * @return Parameter 1, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param1(const mavlink_message_t* msg)
{
8001116e:	eb cd 40 c0 	pushm	r6-r7,lr
80011172:	1a 97       	mov	r7,sp
80011174:	20 1d       	sub	sp,4
80011176:	48 76       	lddpc	r6,80011190 <mavlink_msg_command_long_get_param1+0x22>
80011178:	1e 26       	rsub	r6,pc
8001117a:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  0);
8001117e:	30 0b       	mov	r11,0
80011180:	ee fc ff fc 	ld.w	r12,r7[-4]
80011184:	c3 4e       	rcall	80010dec <_MAV_RETURN_float>
80011186:	18 98       	mov	r8,r12
}
80011188:	10 9c       	mov	r12,r8
8001118a:	2f fd       	sub	sp,-4
8001118c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011190:	80 01       	ld.sh	r1,r0[0x0]
80011192:	0f fc       	ld.ub	r12,r7[0x7]

80011194 <mavlink_msg_command_long_get_param2>:
 * @brief Get field param2 from command_long message
 *
 * @return Parameter 2, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param2(const mavlink_message_t* msg)
{
80011194:	eb cd 40 c0 	pushm	r6-r7,lr
80011198:	1a 97       	mov	r7,sp
8001119a:	20 1d       	sub	sp,4
8001119c:	48 76       	lddpc	r6,800111b8 <mavlink_msg_command_long_get_param2+0x24>
8001119e:	1e 26       	rsub	r6,pc
800111a0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  4);
800111a4:	30 4b       	mov	r11,4
800111a6:	ee fc ff fc 	ld.w	r12,r7[-4]
800111aa:	c2 1e       	rcall	80010dec <_MAV_RETURN_float>
800111ac:	18 98       	mov	r8,r12
}
800111ae:	10 9c       	mov	r12,r8
800111b0:	2f fd       	sub	sp,-4
800111b2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800111b6:	00 00       	add	r0,r0
800111b8:	80 01       	ld.sh	r1,r0[0x0]
800111ba:	10 22       	rsub	r2,r8

800111bc <mavlink_msg_command_long_get_param3>:
 * @brief Get field param3 from command_long message
 *
 * @return Parameter 3, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param3(const mavlink_message_t* msg)
{
800111bc:	eb cd 40 c0 	pushm	r6-r7,lr
800111c0:	1a 97       	mov	r7,sp
800111c2:	20 1d       	sub	sp,4
800111c4:	48 76       	lddpc	r6,800111e0 <mavlink_msg_command_long_get_param3+0x24>
800111c6:	1e 26       	rsub	r6,pc
800111c8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  8);
800111cc:	30 8b       	mov	r11,8
800111ce:	ee fc ff fc 	ld.w	r12,r7[-4]
800111d2:	c0 de       	rcall	80010dec <_MAV_RETURN_float>
800111d4:	18 98       	mov	r8,r12
}
800111d6:	10 9c       	mov	r12,r8
800111d8:	2f fd       	sub	sp,-4
800111da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800111de:	00 00       	add	r0,r0
800111e0:	80 01       	ld.sh	r1,r0[0x0]
800111e2:	10 4a       	or	r10,r8

800111e4 <mavlink_msg_command_long_get_param4>:
 * @brief Get field param4 from command_long message
 *
 * @return Parameter 4, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param4(const mavlink_message_t* msg)
{
800111e4:	eb cd 40 c0 	pushm	r6-r7,lr
800111e8:	1a 97       	mov	r7,sp
800111ea:	20 1d       	sub	sp,4
800111ec:	48 76       	lddpc	r6,80011208 <mavlink_msg_command_long_get_param4+0x24>
800111ee:	1e 26       	rsub	r6,pc
800111f0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  12);
800111f4:	30 cb       	mov	r11,12
800111f6:	ee fc ff fc 	ld.w	r12,r7[-4]
800111fa:	fe b0 fd f9 	rcall	80010dec <_MAV_RETURN_float>
800111fe:	18 98       	mov	r8,r12
}
80011200:	10 9c       	mov	r12,r8
80011202:	2f fd       	sub	sp,-4
80011204:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011208:	80 01       	ld.sh	r1,r0[0x0]
8001120a:	10 72       	tst	r2,r8

8001120c <mavlink_msg_command_long_get_param5>:
 * @brief Get field param5 from command_long message
 *
 * @return Parameter 5, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param5(const mavlink_message_t* msg)
{
8001120c:	eb cd 40 c0 	pushm	r6-r7,lr
80011210:	1a 97       	mov	r7,sp
80011212:	20 1d       	sub	sp,4
80011214:	48 76       	lddpc	r6,80011230 <mavlink_msg_command_long_get_param5+0x24>
80011216:	1e 26       	rsub	r6,pc
80011218:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  16);
8001121c:	31 0b       	mov	r11,16
8001121e:	ee fc ff fc 	ld.w	r12,r7[-4]
80011222:	fe b0 fd e5 	rcall	80010dec <_MAV_RETURN_float>
80011226:	18 98       	mov	r8,r12
}
80011228:	10 9c       	mov	r12,r8
8001122a:	2f fd       	sub	sp,-4
8001122c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011230:	80 01       	ld.sh	r1,r0[0x0]
80011232:	10 9a       	mov	r10,r8

80011234 <mavlink_msg_command_long_get_param6>:
 * @brief Get field param6 from command_long message
 *
 * @return Parameter 6, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param6(const mavlink_message_t* msg)
{
80011234:	eb cd 40 c0 	pushm	r6-r7,lr
80011238:	1a 97       	mov	r7,sp
8001123a:	20 1d       	sub	sp,4
8001123c:	48 76       	lddpc	r6,80011258 <mavlink_msg_command_long_get_param6+0x24>
8001123e:	1e 26       	rsub	r6,pc
80011240:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  20);
80011244:	31 4b       	mov	r11,20
80011246:	ee fc ff fc 	ld.w	r12,r7[-4]
8001124a:	fe b0 fd d1 	rcall	80010dec <_MAV_RETURN_float>
8001124e:	18 98       	mov	r8,r12
}
80011250:	10 9c       	mov	r12,r8
80011252:	2f fd       	sub	sp,-4
80011254:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011258:	80 01       	ld.sh	r1,r0[0x0]
8001125a:	10 c2       	st.b	r8++,r2

8001125c <mavlink_msg_command_long_get_param7>:
 * @brief Get field param7 from command_long message
 *
 * @return Parameter 7, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param7(const mavlink_message_t* msg)
{
8001125c:	eb cd 40 c0 	pushm	r6-r7,lr
80011260:	1a 97       	mov	r7,sp
80011262:	20 1d       	sub	sp,4
80011264:	48 76       	lddpc	r6,80011280 <mavlink_msg_command_long_get_param7+0x24>
80011266:	1e 26       	rsub	r6,pc
80011268:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  24);
8001126c:	31 8b       	mov	r11,24
8001126e:	ee fc ff fc 	ld.w	r12,r7[-4]
80011272:	fe b0 fd bd 	rcall	80010dec <_MAV_RETURN_float>
80011276:	18 98       	mov	r8,r12
}
80011278:	10 9c       	mov	r12,r8
8001127a:	2f fd       	sub	sp,-4
8001127c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011280:	80 01       	ld.sh	r1,r0[0x0]
80011282:	10 ea       	st.h	--r8,r10

80011284 <mavlink_msg_command_long_decode>:
 *
 * @param msg The message to decode
 * @param command_long C-struct to decode the message contents into
 */
static inline void mavlink_msg_command_long_decode(const mavlink_message_t* msg, mavlink_command_long_t* command_long)
{
80011284:	eb cd 40 c0 	pushm	r6-r7,lr
80011288:	1a 97       	mov	r7,sp
8001128a:	20 2d       	sub	sp,8
8001128c:	4a e6       	lddpc	r6,80011344 <mavlink_msg_command_long_decode+0xc0>
8001128e:	1e 26       	rsub	r6,pc
80011290:	ef 4c ff fc 	st.w	r7[-4],r12
80011294:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	command_long->param1 = mavlink_msg_command_long_get_param1(msg);
80011298:	ee fc ff fc 	ld.w	r12,r7[-4]
8001129c:	c6 9f       	rcall	8001116e <mavlink_msg_command_long_get_param1>
8001129e:	18 99       	mov	r9,r12
800112a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800112a4:	91 09       	st.w	r8[0x0],r9
	command_long->param2 = mavlink_msg_command_long_get_param2(msg);
800112a6:	ee fc ff fc 	ld.w	r12,r7[-4]
800112aa:	c7 5f       	rcall	80011194 <mavlink_msg_command_long_get_param2>
800112ac:	18 99       	mov	r9,r12
800112ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800112b2:	91 19       	st.w	r8[0x4],r9
	command_long->param3 = mavlink_msg_command_long_get_param3(msg);
800112b4:	ee fc ff fc 	ld.w	r12,r7[-4]
800112b8:	c8 2f       	rcall	800111bc <mavlink_msg_command_long_get_param3>
800112ba:	18 99       	mov	r9,r12
800112bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800112c0:	91 29       	st.w	r8[0x8],r9
	command_long->param4 = mavlink_msg_command_long_get_param4(msg);
800112c2:	ee fc ff fc 	ld.w	r12,r7[-4]
800112c6:	c8 ff       	rcall	800111e4 <mavlink_msg_command_long_get_param4>
800112c8:	18 99       	mov	r9,r12
800112ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800112ce:	91 39       	st.w	r8[0xc],r9
	command_long->param5 = mavlink_msg_command_long_get_param5(msg);
800112d0:	ee fc ff fc 	ld.w	r12,r7[-4]
800112d4:	c9 cf       	rcall	8001120c <mavlink_msg_command_long_get_param5>
800112d6:	18 99       	mov	r9,r12
800112d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800112dc:	91 49       	st.w	r8[0x10],r9
	command_long->param6 = mavlink_msg_command_long_get_param6(msg);
800112de:	ee fc ff fc 	ld.w	r12,r7[-4]
800112e2:	ca 9f       	rcall	80011234 <mavlink_msg_command_long_get_param6>
800112e4:	18 99       	mov	r9,r12
800112e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800112ea:	91 59       	st.w	r8[0x14],r9
	command_long->param7 = mavlink_msg_command_long_get_param7(msg);
800112ec:	ee fc ff fc 	ld.w	r12,r7[-4]
800112f0:	cb 6f       	rcall	8001125c <mavlink_msg_command_long_get_param7>
800112f2:	18 99       	mov	r9,r12
800112f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800112f8:	91 69       	st.w	r8[0x18],r9
	command_long->command = mavlink_msg_command_long_get_command(msg);
800112fa:	ee fc ff fc 	ld.w	r12,r7[-4]
800112fe:	c1 3f       	rcall	80011124 <mavlink_msg_command_long_get_command>
80011300:	18 98       	mov	r8,r12
80011302:	5c 88       	casts.h	r8
80011304:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011308:	f3 58 00 1c 	st.h	r9[28],r8
	command_long->target_system = mavlink_msg_command_long_get_target_system(msg);
8001130c:	ee fc ff fc 	ld.w	r12,r7[-4]
80011310:	ce ce       	rcall	800110e8 <mavlink_msg_command_long_get_target_system>
80011312:	18 98       	mov	r8,r12
80011314:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011318:	f3 68 00 1e 	st.b	r9[30],r8
	command_long->target_component = mavlink_msg_command_long_get_target_component(msg);
8001131c:	ee fc ff fc 	ld.w	r12,r7[-4]
80011320:	cf 3e       	rcall	80011106 <mavlink_msg_command_long_get_target_component>
80011322:	18 98       	mov	r8,r12
80011324:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011328:	f3 68 00 1f 	st.b	r9[31],r8
	command_long->confirmation = mavlink_msg_command_long_get_confirmation(msg);
8001132c:	ee fc ff fc 	ld.w	r12,r7[-4]
80011330:	c1 0f       	rcall	80011150 <mavlink_msg_command_long_get_confirmation>
80011332:	18 98       	mov	r8,r12
80011334:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011338:	f3 68 00 20 	st.b	r9[32],r8
#else
	memcpy(command_long, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_COMMAND_LONG_LEN);
#endif
}
8001133c:	2f ed       	sub	sp,-8
8001133e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011342:	00 00       	add	r0,r0
80011344:	80 01       	ld.sh	r1,r0[0x0]
80011346:	11 12       	ld.sh	r2,r8++

80011348 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80011348:	eb cd 40 c0 	pushm	r6-r7,lr
8001134c:	1a 97       	mov	r7,sp
8001134e:	20 6d       	sub	sp,24
80011350:	49 e6       	lddpc	r6,800113c8 <interpolate+0x80>
80011352:	1e 26       	rsub	r6,pc
80011354:	ef 4c ff f8 	st.w	r7[-8],r12
80011358:	ef 4b ff f4 	st.w	r7[-12],r11
8001135c:	ef 4a ff f0 	st.w	r7[-16],r10
80011360:	ef 49 ff ec 	st.w	r7[-20],r9
80011364:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80011368:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001136c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80011370:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80011374:	c0 41       	brne	8001137c <interpolate+0x34>
	{
		return y1;
80011376:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001137a:	c2 38       	rjmp	800113c0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8001137c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80011380:	ee f8 ff ec 	ld.w	r8,r7[-20]
80011384:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80011388:	ee fa ff f8 	ld.w	r10,r7[-8]
8001138c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011390:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80011394:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80011398:	ee fa ff f0 	ld.w	r10,r7[-16]
8001139c:	ee f9 ff f4 	ld.w	r9,r7[-12]
800113a0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800113a4:	12 9b       	mov	r11,r9
800113a6:	10 9c       	mov	r12,r8
800113a8:	f0 16 00 08 	mcall	r6[32]
800113ac:	18 98       	mov	r8,r12
800113ae:	10 99       	mov	r9,r8
800113b0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800113b4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800113b8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
800113bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
800113c0:	10 9c       	mov	r12,r8
800113c2:	2f ad       	sub	sp,-24
800113c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800113c8:	80 01       	ld.sh	r1,r0[0x0]
800113ca:	11 d6       	ld.ub	r6,r8[0x5]

800113cc <comm_send_ch>:
central_data_t *centralData;

NEW_TASK_SET (mavlink_tasks, 30)

void comm_send_ch(mavlink_channel_t chan, uint8_t ch)
{
800113cc:	eb cd 40 c0 	pushm	r6-r7,lr
800113d0:	1a 97       	mov	r7,sp
800113d2:	20 2d       	sub	sp,8
800113d4:	48 e6       	lddpc	r6,8001140c <comm_send_ch+0x40>
800113d6:	1e 26       	rsub	r6,pc
800113d8:	ef 4c ff fc 	st.w	r7[-4],r12
800113dc:	16 98       	mov	r8,r11
800113de:	ef 68 ff f8 	st.b	r7[-8],r8
	if (chan == MAVLINK_COMM_0)
800113e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800113e6:	58 08       	cp.w	r8,0
800113e8:	c0 e1       	brne	80011404 <comm_send_ch+0x38>
	{
		//uart0_transmit(ch);
		mavlink_out_stream->put(mavlink_out_stream->data, ch);
800113ea:	ec f8 01 68 	ld.w	r8,r6[360]
800113ee:	70 08       	ld.w	r8,r8[0x0]
800113f0:	70 18       	ld.w	r8,r8[0x4]
800113f2:	ef 3a ff f8 	ld.ub	r10,r7[-8]
800113f6:	ec f9 01 68 	ld.w	r9,r6[360]
800113fa:	72 09       	ld.w	r9,r9[0x0]
800113fc:	72 59       	ld.w	r9,r9[0x14]
800113fe:	14 9b       	mov	r11,r10
80011400:	12 9c       	mov	r12,r9
80011402:	5d 18       	icall	r8
	}
	if (chan == MAVLINK_COMM_1)
	{
		//uart1_transmit(ch);
	}
}
80011404:	2f ed       	sub	sp,-8
80011406:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001140a:	00 00       	add	r0,r0
8001140c:	80 01       	ld.sh	r1,r0[0x0]
8001140e:	12 5a       	eor	r10,r9
80011410:	0a 20       	rsub	r0,r5
80011412:	52 65       	stdsp	sp[0x98],r5
80011414:	63 65       	ld.w	r5,r1[0x58]
80011416:	69 76       	ld.w	r6,r4[0x5c]
80011418:	65 64       	ld.w	r4,r2[0x58]
8001141a:	20 6d       	sub	sp,24
8001141c:	65 73       	ld.w	r3,r2[0x5c]
8001141e:	73 61       	ld.w	r1,r9[0x58]
80011420:	67 65       	ld.w	r5,r3[0x58]
80011422:	20 77       	sub	r7,7
80011424:	69 74       	ld.w	r4,r4[0x5c]
80011426:	68 20       	ld.w	r0,r4[0x8]
80011428:	49 44       	lddpc	r4,80011478 <mavlink_receive_handler+0x2a>
8001142a:	00 00       	add	r0,r0
8001142c:	20 66       	sub	r6,6
8001142e:	72 6f       	ld.w	pc,r9[0x18]
80011430:	6d 20       	ld.w	r0,r6[0x48]
80011432:	73 79       	ld.w	r9,r9[0x5c]
80011434:	73 74       	ld.w	r4,r9[0x5c]
80011436:	65 6d       	ld.w	sp,r2[0x58]
80011438:	00 00       	add	r0,r0
8001143a:	00 00       	add	r0,r0
8001143c:	20 66       	sub	r6,6
8001143e:	6f 72       	ld.w	r2,r7[0x5c]
80011440:	20 63       	sub	r3,6
80011442:	6f 6d       	ld.w	sp,r7[0x58]
80011444:	70 6f       	ld.w	pc,r8[0x18]
80011446:	6e 65       	ld.w	r5,r7[0x18]
80011448:	6e 74       	ld.w	r4,r7[0x1c]
8001144a:	00 00       	add	r0,r0
8001144c:	0a 00       	add	r0,r5

8001144e <mavlink_receive_handler>:

void mavlink_receive_handler() {
8001144e:	eb cd 40 c0 	pushm	r6-r7,lr
80011452:	1a 97       	mov	r7,sp
80011454:	fa cd 01 20 	sub	sp,sp,288
80011458:	4a 56       	lddpc	r6,800114ec <mavlink_receive_handler+0x9e>
8001145a:	1e 26       	rsub	r6,pc
	Mavlink_Received_t rec;
	
	if(mavlink_receive(mavlink_in_stream, &rec)) {
8001145c:	ec f8 04 f8 	ld.w	r8,r6[1272]
80011460:	70 08       	ld.w	r8,r8[0x0]
80011462:	ee c9 01 20 	sub	r9,r7,288
80011466:	12 9b       	mov	r11,r9
80011468:	10 9c       	mov	r12,r8
8001146a:	f0 16 01 4d 	mcall	r6[1332]
8001146e:	18 98       	mov	r8,r12
80011470:	58 08       	cp.w	r8,0
80011472:	c3 a0       	breq	800114e6 <mavlink_receive_handler+0x98>
		dbg_print("\n Received message with ID");
80011474:	fe cc 00 64 	sub	r12,pc,100
80011478:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(rec.msg.msgid, 10);
8001147c:	ef 38 fe e7 	ld.ub	r8,r7[-281]
80011480:	30 ab       	mov	r11,10
80011482:	10 9c       	mov	r12,r8
80011484:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" from system");
80011488:	fe cc 00 5c 	sub	r12,pc,92
8001148c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(rec.msg.sysid, 10);
80011490:	ef 38 fe e5 	ld.ub	r8,r7[-283]
80011494:	30 ab       	mov	r11,10
80011496:	10 9c       	mov	r12,r8
80011498:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" for component");
8001149c:	fe cc 00 60 	sub	r12,pc,96
800114a0:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(rec.msg.compid,10);
800114a4:	ef 38 fe e6 	ld.ub	r8,r7[-282]
800114a8:	30 ab       	mov	r11,10
800114aa:	10 9c       	mov	r12,r8
800114ac:	f0 16 00 04 	mcall	r6[16]
			dbg_print( "\n");
800114b0:	fe cc 00 64 	sub	r12,pc,100
800114b4:	f0 16 00 01 	mcall	r6[4]
		if (rec.msg.sysid == MAVLINK_BASE_STATION_ID)
800114b8:	ef 39 fe e5 	ld.ub	r9,r7[-283]
800114bc:	3f f8       	mov	r8,-1
800114be:	f0 09 18 00 	cp.b	r9,r8
800114c2:	c0 71       	brne	800114d0 <mavlink_receive_handler+0x82>
		{
			handle_mavlink_message(&rec);
800114c4:	ee c8 01 20 	sub	r8,r7,288
800114c8:	10 9c       	mov	r12,r8
800114ca:	f0 16 01 82 	mcall	r6[1544]
800114ce:	c0 c8       	rjmp	800114e6 <mavlink_receive_handler+0x98>
		}else if (rec.msg.msgid == MAVLINK_MSG_ID_GLOBAL_POSITION_INT)
800114d0:	ef 39 fe e7 	ld.ub	r9,r7[-281]
800114d4:	32 18       	mov	r8,33
800114d6:	f0 09 18 00 	cp.b	r9,r8
800114da:	c0 61       	brne	800114e6 <mavlink_receive_handler+0x98>
			//dbg_print_num(rec.msg.sysid, 10);
			//dbg_print(" for component");
			//dbg_print_num(rec.msg.compid,10);
			//dbg_print( "\n");
			
			read_msg_from_neighbors(&rec);
800114dc:	ee c8 01 20 	sub	r8,r7,288
800114e0:	10 9c       	mov	r12,r8
800114e2:	f0 16 01 46 	mcall	r6[1304]
		}
		
	}
}
800114e6:	2b 8d       	sub	sp,-288
800114e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800114ec:	80 01       	ld.sh	r1,r0[0x0]
800114ee:	12 de       	st.w	--r9,lr

800114f0 <init_mavlink>:

void init_mavlink(byte_stream_t *transmit_stream, byte_stream_t *receive_stream, int sysid) {
800114f0:	eb cd 40 c0 	pushm	r6-r7,lr
800114f4:	1a 97       	mov	r7,sp
800114f6:	20 3d       	sub	sp,12
800114f8:	4a 36       	lddpc	r6,80011584 <init_mavlink+0x94>
800114fa:	1e 26       	rsub	r6,pc
800114fc:	ef 4c ff fc 	st.w	r7[-4],r12
80011500:	ef 4b ff f8 	st.w	r7[-8],r11
80011504:	ef 4a ff f4 	st.w	r7[-12],r10
	mavlink_system.sysid = sysid; // System ID, 1-255
80011508:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001150c:	5c 58       	castu.b	r8
8001150e:	ec f9 00 74 	ld.w	r9,r6[116]
80011512:	b2 88       	st.b	r9[0x0],r8
	mavlink_system.compid = 50; // Component/Subsystem ID, 1-255
80011514:	ec f9 00 74 	ld.w	r9,r6[116]
80011518:	33 28       	mov	r8,50
8001151a:	b2 98       	st.b	r9[0x1],r8
	mavlink_system.type = MAV_TYPE_QUADROTOR;
8001151c:	ec f9 00 74 	ld.w	r9,r6[116]
80011520:	30 28       	mov	r8,2
80011522:	b2 a8       	st.b	r9[0x2],r8
	
	mavlink_mission_planner.sysid = mavlink_system.sysid;
80011524:	ec f8 00 74 	ld.w	r8,r6[116]
80011528:	11 88       	ld.ub	r8,r8[0x0]
8001152a:	ec f9 00 c8 	ld.w	r9,r6[200]
8001152e:	b2 88       	st.b	r9[0x0],r8
	mavlink_mission_planner.compid = MAV_COMP_ID_MISSIONPLANNER;
80011530:	ec f9 00 c8 	ld.w	r9,r6[200]
80011534:	3b e8       	mov	r8,-66
80011536:	b2 98       	st.b	r9[0x1],r8
	mavlink_mission_planner.type = MAV_TYPE_QUADROTOR;
80011538:	ec f9 00 c8 	ld.w	r9,r6[200]
8001153c:	30 28       	mov	r8,2
8001153e:	b2 a8       	st.b	r9[0x2],r8
	
	mavlink_out_stream = transmit_stream;
80011540:	ee f9 ff fc 	ld.w	r9,r7[-4]
80011544:	ec f8 01 68 	ld.w	r8,r6[360]
80011548:	91 09       	st.w	r8[0x0],r9
	mavlink_in_stream = receive_stream;
8001154a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001154e:	ec f8 04 f8 	ld.w	r8,r6[1272]
80011552:	91 09       	st.w	r8[0x0],r9
	
	init_scheduler(&mavlink_tasks);
80011554:	ec f8 01 2c 	ld.w	r8,r6[300]
80011558:	10 9c       	mov	r12,r8
8001155a:	f0 16 01 11 	mcall	r6[1092]
	
	add_task(&mavlink_tasks, 100000, RUN_REGULAR, &send_scheduled_parameters, MAVLINK_MSG_ID_PARAM_VALUE);
8001155e:	ec f9 05 54 	ld.w	r9,r6[1364]
80011562:	ec fc 01 2c 	ld.w	r12,r6[300]
80011566:	31 68       	mov	r8,22
80011568:	30 2a       	mov	r10,2
8001156a:	e0 7b 86 a0 	mov	r11,100000
8001156e:	f0 16 00 25 	mcall	r6[148]

	centralData = get_central_data();
80011572:	f0 16 00 33 	mcall	r6[204]
80011576:	18 99       	mov	r9,r12
80011578:	ec f8 00 00 	ld.w	r8,r6[0]
8001157c:	91 09       	st.w	r8[0x0],r9
}
8001157e:	2f dd       	sub	sp,-12
80011580:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011584:	80 01       	ld.sh	r1,r0[0x0]
80011586:	13 7e       	ld.ub	lr,--r9

80011588 <flush_mavlink>:

void flush_mavlink() {
80011588:	eb cd 40 c0 	pushm	r6-r7,lr
8001158c:	1a 97       	mov	r7,sp
8001158e:	48 b6       	lddpc	r6,800115b8 <flush_mavlink+0x30>
80011590:	1e 26       	rsub	r6,pc
	if (mavlink_out_stream->flush!=NULL) {
80011592:	ec f8 01 68 	ld.w	r8,r6[360]
80011596:	70 08       	ld.w	r8,r8[0x0]
80011598:	70 28       	ld.w	r8,r8[0x8]
8001159a:	58 08       	cp.w	r8,0
8001159c:	c0 b0       	breq	800115b2 <flush_mavlink+0x2a>
		//mavlink_out_stream->buffer_empty(mavlink_out_stream->data);
		mavlink_out_stream->flush(mavlink_out_stream->data);	
8001159e:	ec f8 01 68 	ld.w	r8,r6[360]
800115a2:	70 08       	ld.w	r8,r8[0x0]
800115a4:	70 28       	ld.w	r8,r8[0x8]
800115a6:	ec f9 01 68 	ld.w	r9,r6[360]
800115aa:	72 09       	ld.w	r9,r9[0x0]
800115ac:	72 59       	ld.w	r9,r9[0x14]
800115ae:	12 9c       	mov	r12,r9
800115b0:	5d 18       	icall	r8
	
	}
}
800115b2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800115b6:	00 00       	add	r0,r0
800115b8:	80 01       	ld.sh	r1,r0[0x0]
800115ba:	14 14       	sub	r4,r10

800115bc <mavlink_protocol_update>:

task_return_t mavlink_protocol_update() {
800115bc:	eb cd 40 c0 	pushm	r6-r7,lr
800115c0:	1a 97       	mov	r7,sp
800115c2:	20 1d       	sub	sp,4
800115c4:	49 c6       	lddpc	r6,80011634 <mavlink_protocol_update+0x78>
800115c6:	1e 26       	rsub	r6,pc
	task_return_t result=0;
800115c8:	30 08       	mov	r8,0
800115ca:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_receive_handler();
800115ce:	f0 16 02 2f 	mcall	r6[2236]
	if ((mavlink_out_stream->buffer_empty(mavlink_out_stream->data))==true) {
800115d2:	ec f8 01 68 	ld.w	r8,r6[360]
800115d6:	70 08       	ld.w	r8,r8[0x0]
800115d8:	70 38       	ld.w	r8,r8[0xc]
800115da:	ec f9 01 68 	ld.w	r9,r6[360]
800115de:	72 09       	ld.w	r9,r9[0x0]
800115e0:	72 59       	ld.w	r9,r9[0x14]
800115e2:	12 9c       	mov	r12,r9
800115e4:	5d 18       	icall	r8
800115e6:	18 98       	mov	r8,r12
800115e8:	58 18       	cp.w	r8,1
800115ea:	c0 c1       	brne	80011602 <mavlink_protocol_update+0x46>
		result = run_scheduler_update(&mavlink_tasks, ROUND_ROBIN);
800115ec:	ec f8 01 2c 	ld.w	r8,r6[300]
800115f0:	30 0b       	mov	r11,0
800115f2:	10 9c       	mov	r12,r8
800115f4:	f0 16 00 f4 	mcall	r6[976]
800115f8:	18 98       	mov	r8,r12
800115fa:	ef 48 ff fc 	st.w	r7[-4],r8
		flush_mavlink();
800115fe:	f0 16 00 3c 	mcall	r6[240]
	}
	
	control_time_out_waypoint_msg(&(centralData->number_of_waypoints),&centralData->waypoint_receiving,&centralData->waypoint_sending);
80011602:	ec f8 00 00 	ld.w	r8,r6[0]
80011606:	70 08       	ld.w	r8,r8[0x0]
80011608:	f0 ca f3 03 	sub	r10,r8,-3325
8001160c:	ec f8 00 00 	ld.w	r8,r6[0]
80011610:	70 08       	ld.w	r8,r8[0x0]
80011612:	f0 c9 f3 02 	sub	r9,r8,-3326
80011616:	ec f8 00 00 	ld.w	r8,r6[0]
8001161a:	70 08       	ld.w	r8,r8[0x0]
8001161c:	f0 c8 f3 9c 	sub	r8,r8,-3172
80011620:	12 9b       	mov	r11,r9
80011622:	10 9c       	mov	r12,r8
80011624:	f0 16 02 19 	mcall	r6[2148]
	
	
	return result;
80011628:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001162c:	10 9c       	mov	r12,r8
8001162e:	2f fd       	sub	sp,-4
80011630:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011634:	80 01       	ld.sh	r1,r0[0x0]
80011636:	14 4a       	or	r10,r10

80011638 <get_mavlink_taskset>:

task_set* get_mavlink_taskset() {
80011638:	eb cd 40 c0 	pushm	r6-r7,lr
8001163c:	1a 97       	mov	r7,sp
8001163e:	48 46       	lddpc	r6,8001164c <get_mavlink_taskset+0x14>
80011640:	1e 26       	rsub	r6,pc
	return &mavlink_tasks;
80011642:	ec f8 01 2c 	ld.w	r8,r6[300]
}
80011646:	10 9c       	mov	r12,r8
80011648:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001164c:	80 01       	ld.sh	r1,r0[0x0]
8001164e:	14 c4       	st.b	r10++,r4

80011650 <suspend_downstream>:

void suspend_downstream(uint32_t delay) {
80011650:	eb cd 40 c0 	pushm	r6-r7,lr
80011654:	1a 97       	mov	r7,sp
80011656:	20 2d       	sub	sp,8
80011658:	49 56       	lddpc	r6,800116ac <suspend_downstream+0x5c>
8001165a:	1e 26       	rsub	r6,pc
8001165c:	ef 4c ff f8 	st.w	r7[-8],r12
	int i;
	for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
80011660:	30 08       	mov	r8,0
80011662:	ef 48 ff fc 	st.w	r7[-4],r8
80011666:	c1 78       	rjmp	80011694 <suspend_downstream+0x44>
		suspend_task(&mavlink_tasks.tasks[i], delay);
80011668:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001166c:	12 98       	mov	r8,r9
8001166e:	a1 78       	lsl	r8,0x1
80011670:	12 08       	add	r8,r9
80011672:	a5 68       	lsl	r8,0x4
80011674:	10 99       	mov	r9,r8
80011676:	ec f8 01 2c 	ld.w	r8,r6[300]
8001167a:	2f c8       	sub	r8,-4
8001167c:	f2 08 00 08 	add	r8,r9,r8
80011680:	ee fb ff f8 	ld.w	r11,r7[-8]
80011684:	10 9c       	mov	r12,r8
80011686:	f0 16 01 c8 	mcall	r6[1824]
	return &mavlink_tasks;
}

void suspend_downstream(uint32_t delay) {
	int i;
	for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
8001168a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001168e:	2f f8       	sub	r8,-1
80011690:	ef 48 ff fc 	st.w	r7[-4],r8
80011694:	ec f8 01 2c 	ld.w	r8,r6[300]
80011698:	11 88       	ld.ub	r8,r8[0x0]
8001169a:	10 99       	mov	r9,r8
8001169c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800116a0:	10 39       	cp.w	r9,r8
800116a2:	fe 99 ff e3 	brgt	80011668 <suspend_downstream+0x18>
		suspend_task(&mavlink_tasks.tasks[i], delay);
	}	
}
800116a6:	2f ed       	sub	sp,-8
800116a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800116ac:	80 01       	ld.sh	r1,r0[0x0]
800116ae:	14 de       	st.w	--r10,lr
800116b0:	20 00       	sub	r0,0

800116b2 <mavlink_receive>:

uint8_t mavlink_receive(byte_stream_t* stream, Mavlink_Received_t* rec) {
800116b2:	eb cd 40 c0 	pushm	r6-r7,lr
800116b6:	1a 97       	mov	r7,sp
800116b8:	20 3d       	sub	sp,12
800116ba:	4a 86       	lddpc	r6,80011758 <mavlink_receive+0xa6>
800116bc:	1e 26       	rsub	r6,pc
800116be:	ef 4c ff f8 	st.w	r7[-8],r12
800116c2:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t byte;
	//dbg_print(" ");
	while(stream->bytes_available(stream->data) > 0) {
800116c6:	c3 78       	rjmp	80011734 <mavlink_receive+0x82>
		byte = stream->get(stream->data);
800116c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800116cc:	70 08       	ld.w	r8,r8[0x0]
800116ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800116d2:	72 59       	ld.w	r9,r9[0x14]
800116d4:	12 9c       	mov	r12,r9
800116d6:	5d 18       	icall	r8
800116d8:	18 98       	mov	r8,r12
800116da:	ef 68 ff ff 	st.b	r7[-1],r8
		//dbg_print(".");
		dbg_print_num(byte, 16);
800116de:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800116e2:	31 0b       	mov	r11,16
800116e4:	10 9c       	mov	r12,r8
800116e6:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" ");
800116ea:	fe cc 00 3a 	sub	r12,pc,58
800116ee:	f0 16 00 01 	mcall	r6[4]
		if(mavlink_parse_char(MAVLINK_COMM_0, byte, &rec->msg, &rec->status)) {
800116f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800116f6:	f0 c9 fe f0 	sub	r9,r8,-272
800116fa:	ee fa ff f4 	ld.w	r10,r7[-12]
800116fe:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80011702:	10 9b       	mov	r11,r8
80011704:	30 0c       	mov	r12,0
80011706:	fe b0 f8 e5 	rcall	800108d0 <mavlink_parse_char>
8001170a:	18 98       	mov	r8,r12
8001170c:	58 08       	cp.w	r8,0
8001170e:	c0 70       	breq	8001171c <mavlink_receive+0x6a>
			dbg_print("\n");
80011710:	fe cc 02 c4 	sub	r12,pc,708
80011714:	f0 16 00 01 	mcall	r6[4]
			return 1;
80011718:	30 18       	mov	r8,1
8001171a:	c1 a8       	rjmp	8001174e <mavlink_receive+0x9c>
		}
		dbg_print_num(rec->status.parse_state, 16);
8001171c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011720:	f0 f8 01 14 	ld.w	r8,r8[276]
80011724:	31 0b       	mov	r11,16
80011726:	10 9c       	mov	r12,r8
80011728:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8001172c:	fe cc 02 e0 	sub	r12,pc,736
80011730:	f0 16 00 01 	mcall	r6[4]
}

uint8_t mavlink_receive(byte_stream_t* stream, Mavlink_Received_t* rec) {
	uint8_t byte;
	//dbg_print(" ");
	while(stream->bytes_available(stream->data) > 0) {
80011734:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011738:	70 48       	ld.w	r8,r8[0x10]
8001173a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001173e:	72 59       	ld.w	r9,r9[0x14]
80011740:	12 9c       	mov	r12,r9
80011742:	5d 18       	icall	r8
80011744:	18 98       	mov	r8,r12
80011746:	58 08       	cp.w	r8,0
80011748:	fe 99 ff c0 	brgt	800116c8 <mavlink_receive+0x16>
			return 1;
		}
		dbg_print_num(rec->status.parse_state, 16);
		dbg_print("\n");
	}
	return 0;
8001174c:	30 08       	mov	r8,0
}
8001174e:	10 9c       	mov	r12,r8
80011750:	2f dd       	sub	sp,-12
80011752:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011756:	00 00       	add	r0,r0
80011758:	80 01       	ld.sh	r1,r0[0x0]
8001175a:	15 40       	ld.w	r0,--r10
8001175c:	6d 73       	ld.w	r3,r6[0x5c]
8001175e:	67 20       	ld.w	r0,r3[0x48]
80011760:	63 6f       	ld.w	pc,r1[0x58]
80011762:	6d 70       	ld.w	r0,r6[0x5c]
80011764:	20 69       	sub	r9,6
80011766:	64 3a       	ld.w	r10,r2[0xc]
80011768:	00 00       	add	r0,r0
8001176a:	00 00       	add	r0,r0
8001176c:	73 74       	ld.w	r4,r9[0x5c]
8001176e:	72 65       	ld.w	r5,r9[0x18]
80011770:	61 6d       	ld.w	sp,r0[0x58]
80011772:	20 72       	sub	r2,7
80011774:	65 71       	ld.w	r1,r2[0x5c]
80011776:	75 65       	ld.w	r5,r10[0x58]
80011778:	73 74       	ld.w	r4,r9[0x5c]
8001177a:	3a 00       	mov	r0,-96
8001177c:	73 65       	ld.w	r5,r9[0x58]
8001177e:	6e 64       	ld.w	r4,r7[0x18]
80011780:	20 61       	sub	r1,6
80011782:	6c 6c       	ld.w	r12,r6[0x18]
80011784:	0a 00       	add	r0,r5
80011786:	00 00       	add	r0,r0
80011788:	20 73       	sub	r3,7
8001178a:	74 72       	ld.w	r2,r10[0x1c]
8001178c:	65 61       	ld.w	r1,r2[0x58]
8001178e:	6d 3d       	ld.w	sp,r6[0x4c]
80011790:	00 00       	add	r0,r0
80011792:	00 00       	add	r0,r0
80011794:	20 73       	sub	r3,7
80011796:	74 61       	ld.w	r1,r10[0x18]
80011798:	72 74       	ld.w	r4,r9[0x1c]
8001179a:	5f 73       	srpl	r3
8001179c:	74 6f       	ld.w	pc,r10[0x18]
8001179e:	70 3d       	ld.w	sp,r8[0xc]
800117a0:	00 00       	add	r0,r0
800117a2:	00 00       	add	r0,r0
800117a4:	20 72       	sub	r2,7
800117a6:	61 74       	ld.w	r4,r0[0x5c]
800117a8:	65 3d       	ld.w	sp,r2[0x4c]
	...

800117ac <handle_mavlink_message>:

void handle_mavlink_message(Mavlink_Received_t* rec) {
800117ac:	eb cd 40 c0 	pushm	r6-r7,lr
800117b0:	1a 97       	mov	r7,sp
800117b2:	20 cd       	sub	sp,48
800117b4:	fe f6 04 90 	ld.w	r6,pc[1168]
800117b8:	1e 26       	rsub	r6,pc
800117ba:	ef 4c ff d0 	st.w	r7[-48],r12
	
	switch(rec->msg.msgid) {
800117be:	ee f8 ff d0 	ld.w	r8,r7[-48]
800117c2:	11 f8       	ld.ub	r8,r8[0x7]
800117c4:	20 b8       	sub	r8,11
800117c6:	e0 48 00 41 	cp.w	r8,65
800117ca:	e0 8b 02 3a 	brhi	80011c3e <handle_mavlink_message+0x492>
800117ce:	fe c9 ff f6 	sub	r9,pc,-10
800117d2:	f2 08 00 2f 	add	pc,r9,r8<<0x2
800117d6:	00 00       	add	r0,r0
800117d8:	e0 8f 01 6b 	bral	80011aae <handle_mavlink_message+0x302>
800117dc:	e0 8f 02 31 	bral	80011c3e <handle_mavlink_message+0x492>
800117e0:	e0 8f 02 2f 	bral	80011c3e <handle_mavlink_message+0x492>
800117e4:	e0 8f 02 2d 	bral	80011c3e <handle_mavlink_message+0x492>
800117e8:	e0 8f 02 2b 	bral	80011c3e <handle_mavlink_message+0x492>
800117ec:	e0 8f 02 29 	bral	80011c3e <handle_mavlink_message+0x492>
800117f0:	e0 8f 02 27 	bral	80011c3e <handle_mavlink_message+0x492>
800117f4:	e0 8f 02 25 	bral	80011c3e <handle_mavlink_message+0x492>
800117f8:	e0 8f 02 23 	bral	80011c3e <handle_mavlink_message+0x492>
800117fc:	e0 8f 00 95 	bral	80011926 <handle_mavlink_message+0x17a>
80011800:	e0 8f 00 70 	bral	800118e0 <handle_mavlink_message+0x134>
80011804:	e0 8f 02 1d 	bral	80011c3e <handle_mavlink_message+0x492>
80011808:	e0 8f 00 b0 	bral	80011968 <handle_mavlink_message+0x1bc>
8001180c:	e0 8f 02 19 	bral	80011c3e <handle_mavlink_message+0x492>
80011810:	e0 8f 02 17 	bral	80011c3e <handle_mavlink_message+0x492>
80011814:	e0 8f 02 15 	bral	80011c3e <handle_mavlink_message+0x492>
80011818:	e0 8f 02 13 	bral	80011c3e <handle_mavlink_message+0x492>
8001181c:	e0 8f 02 11 	bral	80011c3e <handle_mavlink_message+0x492>
80011820:	e0 8f 02 0f 	bral	80011c3e <handle_mavlink_message+0x492>
80011824:	e0 8f 02 0d 	bral	80011c3e <handle_mavlink_message+0x492>
80011828:	e0 8f 02 0b 	bral	80011c3e <handle_mavlink_message+0x492>
8001182c:	e0 8f 02 09 	bral	80011c3e <handle_mavlink_message+0x492>
80011830:	e0 8f 02 07 	bral	80011c3e <handle_mavlink_message+0x492>
80011834:	e0 8f 02 05 	bral	80011c3e <handle_mavlink_message+0x492>
80011838:	e0 8f 02 03 	bral	80011c3e <handle_mavlink_message+0x492>
8001183c:	e0 8f 02 01 	bral	80011c3e <handle_mavlink_message+0x492>
80011840:	e0 8f 01 ff 	bral	80011c3e <handle_mavlink_message+0x492>
80011844:	e0 8f 01 fd 	bral	80011c3e <handle_mavlink_message+0x492>
80011848:	e0 8f 00 9a 	bral	8001197c <handle_mavlink_message+0x1d0>
8001184c:	e0 8f 00 b4 	bral	800119b4 <handle_mavlink_message+0x208>
80011850:	e0 8f 00 cd 	bral	800119ea <handle_mavlink_message+0x23e>
80011854:	e0 8f 01 f5 	bral	80011c3e <handle_mavlink_message+0x492>
80011858:	e0 8f 00 dc 	bral	80011a10 <handle_mavlink_message+0x264>
8001185c:	e0 8f 00 f4 	bral	80011a44 <handle_mavlink_message+0x298>
80011860:	e0 8f 01 0b 	bral	80011a76 <handle_mavlink_message+0x2ca>
80011864:	e0 8f 01 ed 	bral	80011c3e <handle_mavlink_message+0x492>
80011868:	e0 8f 01 18 	bral	80011a98 <handle_mavlink_message+0x2ec>
8001186c:	e0 8f 01 e9 	bral	80011c3e <handle_mavlink_message+0x492>
80011870:	e0 8f 01 e7 	bral	80011c3e <handle_mavlink_message+0x492>
80011874:	e0 8f 01 e5 	bral	80011c3e <handle_mavlink_message+0x492>
80011878:	e0 8f 01 e3 	bral	80011c3e <handle_mavlink_message+0x492>
8001187c:	e0 8f 01 e1 	bral	80011c3e <handle_mavlink_message+0x492>
80011880:	e0 8f 01 df 	bral	80011c3e <handle_mavlink_message+0x492>
80011884:	e0 8f 01 dd 	bral	80011c3e <handle_mavlink_message+0x492>
80011888:	e0 8f 01 db 	bral	80011c3e <handle_mavlink_message+0x492>
8001188c:	e0 8f 01 d9 	bral	80011c3e <handle_mavlink_message+0x492>
80011890:	e0 8f 01 d7 	bral	80011c3e <handle_mavlink_message+0x492>
80011894:	e0 8f 01 d5 	bral	80011c3e <handle_mavlink_message+0x492>
80011898:	e0 8f 01 d3 	bral	80011c3e <handle_mavlink_message+0x492>
8001189c:	e0 8f 01 d1 	bral	80011c3e <handle_mavlink_message+0x492>
800118a0:	e0 8f 01 cf 	bral	80011c3e <handle_mavlink_message+0x492>
800118a4:	e0 8f 01 cd 	bral	80011c3e <handle_mavlink_message+0x492>
800118a8:	e0 8f 01 cb 	bral	80011c3e <handle_mavlink_message+0x492>
800118ac:	e0 8f 01 c9 	bral	80011c3e <handle_mavlink_message+0x492>
800118b0:	e0 8f 01 c7 	bral	80011c3e <handle_mavlink_message+0x492>
800118b4:	e0 8f 01 19 	bral	80011ae6 <handle_mavlink_message+0x33a>
800118b8:	e0 8f 01 c3 	bral	80011c3e <handle_mavlink_message+0x492>
800118bc:	e0 8f 01 c1 	bral	80011c3e <handle_mavlink_message+0x492>
800118c0:	e0 8f 01 bf 	bral	80011c3e <handle_mavlink_message+0x492>
800118c4:	e0 8f 01 bd 	bral	80011c3e <handle_mavlink_message+0x492>
800118c8:	e0 8f 01 bb 	bral	80011c3e <handle_mavlink_message+0x492>
800118cc:	e0 8f 01 b9 	bral	80011c3e <handle_mavlink_message+0x492>
800118d0:	e0 8f 01 b7 	bral	80011c3e <handle_mavlink_message+0x492>
800118d4:	e0 8f 01 b5 	bral	80011c3e <handle_mavlink_message+0x492>
800118d8:	e0 8f 01 b3 	bral	80011c3e <handle_mavlink_message+0x492>
800118dc:	e0 8f 01 00 	bral	80011adc <handle_mavlink_message+0x330>
		case MAVLINK_MSG_ID_PARAM_REQUEST_LIST: { // 21
			mavlink_param_request_list_t request;
			mavlink_msg_param_request_list_decode(&rec->msg, &request);
800118e0:	ee f8 ff d0 	ld.w	r8,r7[-48]
800118e4:	ee c9 00 12 	sub	r9,r7,18
800118e8:	12 9b       	mov	r11,r9
800118ea:	10 9c       	mov	r12,r8
800118ec:	fe b0 fb 5d 	rcall	80010fa6 <mavlink_msg_param_request_list_decode>
			
			dbg_print("msg comp id:");
800118f0:	fe cc 01 94 	sub	r12,pc,404
800118f4:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(request.target_component,10);
800118f8:	ef 38 ff ef 	ld.ub	r8,r7[-17]
800118fc:	30 ab       	mov	r11,10
800118fe:	10 9c       	mov	r12,r8
80011900:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80011904:	fe cc 04 b8 	sub	r12,pc,1208
80011908:	f0 16 00 01 	mcall	r6[4]
			
			// Check if this message is for this system
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid) {
8001190c:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80011910:	ec f8 00 74 	ld.w	r8,r6[116]
80011914:	11 88       	ld.ub	r8,r8[0x0]
80011916:	f0 09 18 00 	cp.b	r9,r8
8001191a:	e0 81 01 8d 	brne	80011c34 <handle_mavlink_message+0x488>
				send_all_parameters();
8001191e:	f0 16 01 5e 	mcall	r6[1400]
			}				
		}
		break;
80011922:	e0 8f 01 8e 	bral	80011c3e <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_PARAM_REQUEST_READ: { //20
			mavlink_param_request_read_t request;
			mavlink_msg_param_request_read_decode(&rec->msg, &request);
80011926:	ee f8 ff d0 	ld.w	r8,r7[-48]
8001192a:	ee c9 00 26 	sub	r9,r7,38
8001192e:	12 9b       	mov	r11,r9
80011930:	10 9c       	mov	r12,r8
80011932:	fe b0 fa f1 	rcall	80010f14 <mavlink_msg_param_request_read_decode>
			// Check if this message is for this system and subsystem
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {
80011936:	ef 39 ff dc 	ld.ub	r9,r7[-36]
8001193a:	ec f8 00 74 	ld.w	r8,r6[116]
8001193e:	11 88       	ld.ub	r8,r8[0x0]
		break;
		case MAVLINK_MSG_ID_PARAM_REQUEST_READ: { //20
			mavlink_param_request_read_t request;
			mavlink_msg_param_request_read_decode(&rec->msg, &request);
			// Check if this message is for this system and subsystem
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
80011940:	f0 09 18 00 	cp.b	r9,r8
80011944:	e0 81 01 7a 	brne	80011c38 <handle_mavlink_message+0x48c>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {
80011948:	ef 39 ff dd 	ld.ub	r9,r7[-35]
8001194c:	ec f8 00 74 	ld.w	r8,r6[116]
80011950:	11 98       	ld.ub	r8,r8[0x1]
		break;
		case MAVLINK_MSG_ID_PARAM_REQUEST_READ: { //20
			mavlink_param_request_read_t request;
			mavlink_msg_param_request_read_decode(&rec->msg, &request);
			// Check if this message is for this system and subsystem
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
80011952:	f0 09 18 00 	cp.b	r9,r8
80011956:	e0 81 01 73 	brne	80011c3c <handle_mavlink_message+0x490>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {

				send_parameter(&request);
8001195a:	ee c8 00 26 	sub	r8,r7,38
8001195e:	10 9c       	mov	r12,r8
80011960:	f0 16 01 58 	mcall	r6[1376]
			}				
		}
		break;
80011964:	e0 8f 01 6d 	bral	80011c3e <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_PARAM_SET: { //23
			suspend_downstream(100000);
80011968:	e0 7c 86 a0 	mov	r12,100000
8001196c:	f0 16 00 7d 	mcall	r6[500]
			receive_parameter(rec);
80011970:	ee fc ff d0 	ld.w	r12,r7[-48]
80011974:	f0 16 01 81 	mcall	r6[1540]
		}
		break;
80011978:	e0 8f 01 63 	bral	80011c3e <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_ITEM: { // 39
			suspend_downstream(500000);
8001197c:	e6 7c a1 20 	mov	r12,500000
80011980:	f0 16 00 7d 	mcall	r6[500]
			receive_waypoint(rec, centralData->waypoint_list, centralData->number_of_waypoints,&centralData->waypoint_receiving);
80011984:	ec f8 00 00 	ld.w	r8,r6[0]
80011988:	70 08       	ld.w	r8,r8[0x0]
8001198a:	f0 c9 f3 02 	sub	r9,r8,-3326
8001198e:	ec f8 00 00 	ld.w	r8,r6[0]
80011992:	70 08       	ld.w	r8,r8[0x0]
80011994:	f1 08 0c 64 	ld.sh	r8,r8[3172]
80011998:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8001199c:	ec f8 00 00 	ld.w	r8,r6[0]
800119a0:	70 08       	ld.w	r8,r8[0x0]
800119a2:	f0 c8 f5 ac 	sub	r8,r8,-2644
800119a6:	10 9b       	mov	r11,r8
800119a8:	ee fc ff d0 	ld.w	r12,r7[-48]
800119ac:	f0 16 01 71 	mcall	r6[1476]
		}
		break;
800119b0:	e0 8f 01 47 	bral	80011c3e <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_REQUEST : { // 40
			suspend_downstream(500000);
800119b4:	e6 7c a1 20 	mov	r12,500000
800119b8:	f0 16 00 7d 	mcall	r6[500]
			send_waypoint(rec, centralData->waypoint_list, centralData->number_of_waypoints,&centralData->waypoint_sending);
800119bc:	ec f8 00 00 	ld.w	r8,r6[0]
800119c0:	70 08       	ld.w	r8,r8[0x0]
800119c2:	f0 c9 f3 03 	sub	r9,r8,-3325
800119c6:	ec f8 00 00 	ld.w	r8,r6[0]
800119ca:	70 08       	ld.w	r8,r8[0x0]
800119cc:	f1 08 0c 64 	ld.sh	r8,r8[3172]
800119d0:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800119d4:	ec f8 00 00 	ld.w	r8,r6[0]
800119d8:	70 08       	ld.w	r8,r8[0x0]
800119da:	f0 c8 f5 ac 	sub	r8,r8,-2644
800119de:	10 9b       	mov	r11,r8
800119e0:	ee fc ff d0 	ld.w	r12,r7[-48]
800119e4:	f0 16 01 93 	mcall	r6[1612]
		}
		break;
800119e8:	c2 b9       	rjmp	80011c3e <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_SET_CURRENT : { // 41
			set_current_wp(rec, &(centralData->waypoint_list), centralData->number_of_waypoints);
800119ea:	ec f8 00 00 	ld.w	r8,r6[0]
800119ee:	70 08       	ld.w	r8,r8[0x0]
800119f0:	f1 08 0c 64 	ld.sh	r8,r8[3172]
800119f4:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800119f8:	ec f8 00 00 	ld.w	r8,r6[0]
800119fc:	70 08       	ld.w	r8,r8[0x0]
800119fe:	f0 c8 f5 ac 	sub	r8,r8,-2644
80011a02:	12 9a       	mov	r10,r9
80011a04:	10 9b       	mov	r11,r8
80011a06:	ee fc ff d0 	ld.w	r12,r7[-48]
80011a0a:	f0 16 01 7e 	mcall	r6[1528]
		}
		break;
80011a0e:	c1 89       	rjmp	80011c3e <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_REQUEST_LIST: { // 43
			// this initiates all waypoints being sent to the base-station - therefore, we pause the downstream telemetry to free the channel
			// (at least until we have a radio system with guaranteed bandwidth)
			suspend_downstream(500000);
80011a10:	e6 7c a1 20 	mov	r12,500000
80011a14:	f0 16 00 7d 	mcall	r6[500]
			send_count(rec, centralData->number_of_waypoints,&centralData->waypoint_receiving,&centralData->waypoint_sending);
80011a18:	ec f8 00 00 	ld.w	r8,r6[0]
80011a1c:	70 08       	ld.w	r8,r8[0x0]
80011a1e:	f0 c9 f3 03 	sub	r9,r8,-3325
80011a22:	ec f8 00 00 	ld.w	r8,r6[0]
80011a26:	70 08       	ld.w	r8,r8[0x0]
80011a28:	f0 ca f3 02 	sub	r10,r8,-3326
80011a2c:	ec f8 00 00 	ld.w	r8,r6[0]
80011a30:	70 08       	ld.w	r8,r8[0x0]
80011a32:	f1 08 0c 64 	ld.sh	r8,r8[3172]
80011a36:	5c 78       	castu.h	r8
80011a38:	10 9b       	mov	r11,r8
80011a3a:	ee fc ff d0 	ld.w	r12,r7[-48]
80011a3e:	f0 16 01 b2 	mcall	r6[1736]
		}
		break;
80011a42:	cf e8       	rjmp	80011c3e <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_COUNT : { // 44
			// this initiates all waypoints being sent from base-station - therefore, we pause the downstream telemetry to free the channel
			// (at least until we have a radio system with guaranteed bandwidth)
			suspend_downstream(500000);
80011a44:	e6 7c a1 20 	mov	r12,500000
80011a48:	f0 16 00 7d 	mcall	r6[500]
			receive_count(rec, &(centralData->number_of_waypoints),&centralData->waypoint_receiving,&centralData->waypoint_sending);
80011a4c:	ec f8 00 00 	ld.w	r8,r6[0]
80011a50:	70 08       	ld.w	r8,r8[0x0]
80011a52:	f0 c9 f3 03 	sub	r9,r8,-3325
80011a56:	ec f8 00 00 	ld.w	r8,r6[0]
80011a5a:	70 08       	ld.w	r8,r8[0x0]
80011a5c:	f0 ca f3 02 	sub	r10,r8,-3326
80011a60:	ec f8 00 00 	ld.w	r8,r6[0]
80011a64:	70 08       	ld.w	r8,r8[0x0]
80011a66:	f0 c8 f3 9c 	sub	r8,r8,-3172
80011a6a:	10 9b       	mov	r11,r8
80011a6c:	ee fc ff d0 	ld.w	r12,r7[-48]
80011a70:	f0 16 02 2c 	mcall	r6[2224]
		}
		break;
80011a74:	ce 58       	rjmp	80011c3e <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_CLEAR_ALL : { // 45
			clear_waypoint_list(rec, &(centralData->number_of_waypoints),&centralData->waypoint_set);
80011a76:	ec f8 00 00 	ld.w	r8,r6[0]
80011a7a:	70 08       	ld.w	r8,r8[0x0]
80011a7c:	f0 c9 f3 04 	sub	r9,r8,-3324
80011a80:	ec f8 00 00 	ld.w	r8,r6[0]
80011a84:	70 08       	ld.w	r8,r8[0x0]
80011a86:	f0 c8 f3 9c 	sub	r8,r8,-3172
80011a8a:	12 9a       	mov	r10,r9
80011a8c:	10 9b       	mov	r11,r8
80011a8e:	ee fc ff d0 	ld.w	r12,r7[-48]
80011a92:	f0 16 01 87 	mcall	r6[1564]
		}
		break;
80011a96:	cd 48       	rjmp	80011c3e <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_ACK : { // 47
			receive_ack_msg(rec,&centralData->waypoint_sending);
80011a98:	ec f8 00 00 	ld.w	r8,r6[0]
80011a9c:	70 08       	ld.w	r8,r8[0x0]
80011a9e:	f0 c8 f3 03 	sub	r8,r8,-3325
80011aa2:	10 9b       	mov	r11,r8
80011aa4:	ee fc ff d0 	ld.w	r12,r7[-48]
80011aa8:	f0 16 01 fb 	mcall	r6[2028]
		}
		break;
80011aac:	cc 98       	rjmp	80011c3e <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_SET_MODE : { // 11
			set_mav_mode(rec, &centralData->mav_mode, &(centralData->mav_state),centralData->simulation_mode);
80011aae:	ec f8 00 00 	ld.w	r8,r6[0]
80011ab2:	70 08       	ld.w	r8,r8[0x0]
80011ab4:	f0 f8 0d 08 	ld.w	r8,r8[3336]
80011ab8:	5c 58       	castu.b	r8
80011aba:	10 99       	mov	r9,r8
80011abc:	ec f8 00 00 	ld.w	r8,r6[0]
80011ac0:	70 08       	ld.w	r8,r8[0x0]
80011ac2:	f0 ca f2 fa 	sub	r10,r8,-3334
80011ac6:	ec f8 00 00 	ld.w	r8,r6[0]
80011aca:	70 08       	ld.w	r8,r8[0x0]
80011acc:	f0 c8 f2 fb 	sub	r8,r8,-3333
80011ad0:	10 9b       	mov	r11,r8
80011ad2:	ee fc ff d0 	ld.w	r12,r7[-48]
80011ad6:	f0 16 01 d7 	mcall	r6[1884]
		}
		break;
80011ada:	cb 28       	rjmp	80011c3e <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_COMMAND_LONG : { // 76
			receive_message_long(rec);
80011adc:	ee fc ff d0 	ld.w	r12,r7[-48]
80011ae0:	f0 16 01 8d 	mcall	r6[1588]
		}
		break;		
80011ae4:	ca d8       	rjmp	80011c3e <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_REQUEST_DATA_STREAM: { // 66
			mavlink_request_data_stream_t request;
			mavlink_msg_request_data_stream_decode(&rec->msg, &request);
80011ae6:	ee f8 ff d0 	ld.w	r8,r7[-48]
80011aea:	ee c9 00 2c 	sub	r9,r7,44
80011aee:	12 9b       	mov	r11,r9
80011af0:	10 9c       	mov	r12,r8
80011af2:	fe b0 fa c8 	rcall	80011082 <mavlink_msg_request_data_stream_decode>
			// TODO: control target_component == compid!
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid)
80011af6:	ef 39 ff d6 	ld.ub	r9,r7[-42]
80011afa:	ec f8 00 74 	ld.w	r8,r6[116]
80011afe:	11 88       	ld.ub	r8,r8[0x0]
		break;		
		case MAVLINK_MSG_ID_REQUEST_DATA_STREAM: { // 66
			mavlink_request_data_stream_t request;
			mavlink_msg_request_data_stream_decode(&rec->msg, &request);
			// TODO: control target_component == compid!
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
80011b00:	f0 09 18 00 	cp.b	r9,r8
80011b04:	e0 81 00 9d 	brne	80011c3e <handle_mavlink_message+0x492>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid)
80011b08:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80011b0c:	ec f8 00 74 	ld.w	r8,r6[116]
80011b10:	11 98       	ld.ub	r8,r8[0x1]
		break;		
		case MAVLINK_MSG_ID_REQUEST_DATA_STREAM: { // 66
			mavlink_request_data_stream_t request;
			mavlink_msg_request_data_stream_decode(&rec->msg, &request);
			// TODO: control target_component == compid!
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
80011b12:	f0 09 18 00 	cp.b	r9,r8
80011b16:	e0 81 00 94 	brne	80011c3e <handle_mavlink_message+0x492>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid)
			{
				dbg_print("stream request:");
80011b1a:	fe cc 03 ae 	sub	r12,pc,942
80011b1e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(request.target_component,10);
80011b22:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80011b26:	30 ab       	mov	r11,10
80011b28:	10 9c       	mov	r12,r8
80011b2a:	f0 16 00 04 	mcall	r6[16]
				if (request.req_stream_id==255) {
80011b2e:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80011b32:	3f f8       	mov	r8,-1
80011b34:	f0 09 18 00 	cp.b	r9,r8
80011b38:	c2 a1       	brne	80011b8c <handle_mavlink_message+0x3e0>
					int i;
					dbg_print("send all\n");
80011b3a:	fe cc 03 be 	sub	r12,pc,958
80011b3e:	f0 16 00 01 	mcall	r6[4]
					// send full list of streams
					for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
80011b42:	30 08       	mov	r8,0
80011b44:	ef 48 ff f0 	st.w	r7[-16],r8
80011b48:	c1 88       	rjmp	80011b78 <handle_mavlink_message+0x3cc>
						task_entry *task=get_task_by_index(&mavlink_tasks, i);
80011b4a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80011b4e:	5c 88       	casts.h	r8
80011b50:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80011b54:	ec f8 01 2c 	ld.w	r8,r6[300]
80011b58:	12 9b       	mov	r11,r9
80011b5a:	10 9c       	mov	r12,r8
80011b5c:	f0 16 01 bd 	mcall	r6[1780]
80011b60:	18 98       	mov	r8,r12
80011b62:	ef 48 ff f4 	st.w	r7[-12],r8
						run_task_now(task);
80011b66:	ee fc ff f4 	ld.w	r12,r7[-12]
80011b6a:	f0 16 01 07 	mcall	r6[1052]
				dbg_print_num(request.target_component,10);
				if (request.req_stream_id==255) {
					int i;
					dbg_print("send all\n");
					// send full list of streams
					for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
80011b6e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80011b72:	2f f8       	sub	r8,-1
80011b74:	ef 48 ff f0 	st.w	r7[-16],r8
80011b78:	ec f8 01 2c 	ld.w	r8,r6[300]
80011b7c:	11 88       	ld.ub	r8,r8[0x0]
80011b7e:	10 99       	mov	r9,r8
80011b80:	ee f8 ff f0 	ld.w	r8,r7[-16]
80011b84:	10 39       	cp.w	r9,r8
80011b86:	fe 99 ff e2 	brgt	80011b4a <handle_mavlink_message+0x39e>
80011b8a:	c5 a8       	rjmp	80011c3e <handle_mavlink_message+0x492>
						task_entry *task=get_task_by_index(&mavlink_tasks, i);
						run_task_now(task);
					}					
				} else {
					int i;
					task_entry *task=get_task_by_id(&mavlink_tasks, request.req_stream_id);
80011b8c:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80011b90:	10 99       	mov	r9,r8
80011b92:	ec f8 01 2c 	ld.w	r8,r6[300]
80011b96:	12 9b       	mov	r11,r9
80011b98:	10 9c       	mov	r12,r8
80011b9a:	f0 16 01 bf 	mcall	r6[1788]
80011b9e:	18 98       	mov	r8,r12
80011ba0:	ef 48 ff fc 	st.w	r7[-4],r8
					dbg_print(" stream="); dbg_print_num(request.req_stream_id, 10);
80011ba4:	fe cc 04 1c 	sub	r12,pc,1052
80011ba8:	f0 16 00 01 	mcall	r6[4]
80011bac:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80011bb0:	30 ab       	mov	r11,10
80011bb2:	10 9c       	mov	r12,r8
80011bb4:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" start_stop=");dbg_print_num(request.start_stop, 10);
80011bb8:	fe cc 04 24 	sub	r12,pc,1060
80011bbc:	f0 16 00 01 	mcall	r6[4]
80011bc0:	ef 38 ff d9 	ld.ub	r8,r7[-39]
80011bc4:	30 ab       	mov	r11,10
80011bc6:	10 9c       	mov	r12,r8
80011bc8:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" rate=");dbg_print_num(request.req_message_rate,10);
80011bcc:	fe cc 04 28 	sub	r12,pc,1064
80011bd0:	f0 16 00 01 	mcall	r6[4]
80011bd4:	ef 08 ff d4 	ld.sh	r8,r7[-44]
80011bd8:	5c 78       	castu.h	r8
80011bda:	30 ab       	mov	r11,10
80011bdc:	10 9c       	mov	r12,r8
80011bde:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
80011be2:	fe cc 07 96 	sub	r12,pc,1942
80011be6:	f0 16 00 01 	mcall	r6[4]
					dbg_print("\n");
80011bea:	fe cc 07 9e 	sub	r12,pc,1950
80011bee:	f0 16 00 01 	mcall	r6[4]
					if (request.start_stop) {
80011bf2:	ef 38 ff d9 	ld.ub	r8,r7[-39]
80011bf6:	58 08       	cp.w	r8,0
80011bf8:	c0 70       	breq	80011c06 <handle_mavlink_message+0x45a>
						change_run_mode(task, RUN_REGULAR);
80011bfa:	30 2b       	mov	r11,2
80011bfc:	ee fc ff fc 	ld.w	r12,r7[-4]
80011c00:	f0 16 00 b2 	mcall	r6[712]
80011c04:	c0 68       	rjmp	80011c10 <handle_mavlink_message+0x464>
					}else {
						change_run_mode(task, RUN_NEVER);
80011c06:	30 0b       	mov	r11,0
80011c08:	ee fc ff fc 	ld.w	r12,r7[-4]
80011c0c:	f0 16 00 b2 	mcall	r6[712]
					}
					if (request.req_message_rate>0) {
80011c10:	ef 08 ff d4 	ld.sh	r8,r7[-44]
80011c14:	58 08       	cp.w	r8,0
80011c16:	c1 40       	breq	80011c3e <handle_mavlink_message+0x492>
						change_task_period(task, SCHEDULER_TIMEBASE/(uint32_t)request.req_message_rate);
80011c18:	ef 08 ff d4 	ld.sh	r8,r7[-44]
80011c1c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80011c20:	ee 78 42 40 	mov	r8,1000000
80011c24:	f0 09 0d 08 	divu	r8,r8,r9
80011c28:	10 9b       	mov	r11,r8
80011c2a:	ee fc ff fc 	ld.w	r12,r7[-4]
80011c2e:	f0 16 01 a6 	mcall	r6[1688]
80011c32:	c0 68       	rjmp	80011c3e <handle_mavlink_message+0x492>
			// Check if this message is for this system
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid) {
				send_all_parameters();
			}				
		}
		break;
80011c34:	d7 03       	nop
80011c36:	c0 48       	rjmp	80011c3e <handle_mavlink_message+0x492>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {

				send_parameter(&request);
			}				
		}
		break;
80011c38:	d7 03       	nop
80011c3a:	c0 28       	rjmp	80011c3e <handle_mavlink_message+0x492>
80011c3c:	d7 03       	nop
		}		
		/* 
		TODO : add other cases
		*/
	}
}			
80011c3e:	2f 4d       	sub	sp,-48
80011c40:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011c44:	80 01       	ld.sh	r1,r0[0x0]
80011c46:	16 3c       	cp.w	r12,r11
80011c48:	70 61       	ld.w	r1,r8[0x18]
80011c4a:	72 61       	ld.w	r1,r9[0x18]
80011c4c:	6d 65       	ld.w	r5,r6[0x58]
80011c4e:	74 65       	ld.w	r5,r10[0x18]
80011c50:	72 73       	ld.w	r3,r9[0x1c]
80011c52:	3a 00       	mov	r0,-96
80011c54:	2c 20       	sub	r0,-62
80011c56:	63 6f       	ld.w	pc,r1[0x58]
80011c58:	6d 6d       	ld.w	sp,r6[0x58]
80011c5a:	61 6e       	ld.w	lr,r0[0x58]
80011c5c:	64 20       	ld.w	r0,r2[0x8]
80011c5e:	69 64       	ld.w	r4,r4[0x58]
80011c60:	3a 00       	mov	r0,-96
80011c62:	00 00       	add	r0,r0
80011c64:	2c 20       	sub	r0,-62
80011c66:	63 6f       	ld.w	pc,r1[0x58]
80011c68:	6e 66       	ld.w	r6,r7[0x18]
80011c6a:	69 72       	ld.w	r2,r4[0x5c]
80011c6c:	6d 61       	ld.w	r1,r6[0x58]
80011c6e:	74 69       	ld.w	r9,r10[0x18]
80011c70:	6f 6e       	ld.w	lr,r7[0x58]
80011c72:	3a 00       	mov	r0,-96
80011c74:	52 65       	stdsp	sp[0x98],r5
80011c76:	61 64       	ld.w	r4,r0[0x58]
80011c78:	69 6e       	ld.w	lr,r4[0x58]
80011c7a:	67 20       	ld.w	r0,r3[0x48]
80011c7c:	66 72       	ld.w	r2,r3[0x1c]
80011c7e:	6f 6d       	ld.w	sp,r7[0x58]
80011c80:	20 66       	sub	r6,6
80011c82:	6c 61       	ld.w	r1,r6[0x18]
80011c84:	73 68       	ld.w	r8,r9[0x58]
80011c86:	63 2e       	ld.w	lr,r1[0x48]
80011c88:	2e 2e       	sub	lr,-30
80011c8a:	0a 00       	add	r0,r5
80011c8c:	57 72       	stdsp	sp[0x1dc],r2
80011c8e:	69 74       	ld.w	r4,r4[0x5c]
80011c90:	74 69       	ld.w	r9,r10[0x18]
80011c92:	6e 67       	ld.w	r7,r7[0x18]
80011c94:	20 74       	sub	r4,7
80011c96:	6f 20       	ld.w	r0,r7[0x48]
80011c98:	66 6c       	ld.w	r12,r3[0x18]
80011c9a:	61 73       	ld.w	r3,r0[0x5c]
80011c9c:	68 63       	ld.w	r3,r4[0x18]
80011c9e:	0a 00       	add	r0,r5

80011ca0 <receive_message_long>:


void receive_message_long(Mavlink_Received_t* rec)
{
80011ca0:	eb cd 40 c0 	pushm	r6-r7,lr
80011ca4:	1a 97       	mov	r7,sp
80011ca6:	20 ad       	sub	sp,40
80011ca8:	fe f6 04 cc 	ld.w	r6,pc[1228]
80011cac:	1e 26       	rsub	r6,pc
80011cae:	ef 4c ff d8 	st.w	r7[-40],r12
	mavlink_command_long_t packet;
	mavlink_msg_command_long_decode(&rec->msg,&packet);
80011cb2:	ee f8 ff d8 	ld.w	r8,r7[-40]
80011cb6:	ee c9 00 24 	sub	r9,r7,36
80011cba:	12 9b       	mov	r11,r9
80011cbc:	10 9c       	mov	r12,r8
80011cbe:	fe b0 fa e3 	rcall	80011284 <mavlink_msg_command_long_decode>
	// Check if this message is for this system and subsystem
	// dbg_print("target_comp:");
	// dbg_print_num(packet.target_component,10);
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&&(uint8_t)packet.target_component == (uint8_t)0)
80011cc2:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80011cc6:	ec f8 00 74 	ld.w	r8,r6[116]
80011cca:	11 88       	ld.ub	r8,r8[0x0]
	mavlink_command_long_t packet;
	mavlink_msg_command_long_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	// dbg_print("target_comp:");
	// dbg_print_num(packet.target_component,10);
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80011ccc:	f0 09 18 00 	cp.b	r9,r8
80011cd0:	e0 81 02 4e 	brne	8001216c <receive_message_long+0x4cc>
	&&(uint8_t)packet.target_component == (uint8_t)0)
80011cd4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
	mavlink_command_long_t packet;
	mavlink_msg_command_long_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	// dbg_print("target_comp:");
	// dbg_print_num(packet.target_component,10);
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80011cd8:	58 08       	cp.w	r8,0
80011cda:	e0 81 02 49 	brne	8001216c <receive_message_long+0x4cc>
	&&(uint8_t)packet.target_component == (uint8_t)0)
	{
		// print packet command and parameters for debug
		dbg_print("parameters:");
80011cde:	fe cc 00 96 	sub	r12,pc,150
80011ce2:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.param1,10);
80011ce6:	ee f8 ff dc 	ld.w	r8,r7[-36]
80011cea:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80011cee:	30 ab       	mov	r11,10
80011cf0:	10 9c       	mov	r12,r8
80011cf2:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param2,10);
80011cf6:	ee f8 ff e0 	ld.w	r8,r7[-32]
80011cfa:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80011cfe:	30 ab       	mov	r11,10
80011d00:	10 9c       	mov	r12,r8
80011d02:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param3,10);
80011d06:	ee f8 ff e4 	ld.w	r8,r7[-28]
80011d0a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80011d0e:	30 ab       	mov	r11,10
80011d10:	10 9c       	mov	r12,r8
80011d12:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param4,10);
80011d16:	ee f8 ff e8 	ld.w	r8,r7[-24]
80011d1a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80011d1e:	30 ab       	mov	r11,10
80011d20:	10 9c       	mov	r12,r8
80011d22:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param5,10);
80011d26:	ee f8 ff ec 	ld.w	r8,r7[-20]
80011d2a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80011d2e:	30 ab       	mov	r11,10
80011d30:	10 9c       	mov	r12,r8
80011d32:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param6,10);
80011d36:	ee f8 ff f0 	ld.w	r8,r7[-16]
80011d3a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80011d3e:	30 ab       	mov	r11,10
80011d40:	10 9c       	mov	r12,r8
80011d42:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param7,10);
80011d46:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011d4a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80011d4e:	30 ab       	mov	r11,10
80011d50:	10 9c       	mov	r12,r8
80011d52:	f0 16 00 04 	mcall	r6[16]
		dbg_print(", command id:");
80011d56:	fe cc 01 02 	sub	r12,pc,258
80011d5a:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.command,10);
80011d5e:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80011d62:	5c 78       	castu.h	r8
80011d64:	30 ab       	mov	r11,10
80011d66:	10 9c       	mov	r12,r8
80011d68:	f0 16 00 04 	mcall	r6[16]
		dbg_print(", confirmation:");
80011d6c:	fe cc 01 08 	sub	r12,pc,264
80011d70:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.confirmation,10);
80011d74:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80011d78:	30 ab       	mov	r11,10
80011d7a:	10 9c       	mov	r12,r8
80011d7c:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
80011d80:	fe cc 09 34 	sub	r12,pc,2356
80011d84:	f0 16 00 01 	mcall	r6[4]
		
		switch(packet.command) {
80011d88:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80011d8c:	5c 78       	castu.h	r8
80011d8e:	21 08       	sub	r8,16
80011d90:	e0 48 00 e5 	cp.w	r8,229
80011d94:	e0 8b 01 ec 	brhi	8001216c <receive_message_long+0x4cc>
80011d98:	fe c9 ff f8 	sub	r9,pc,-8
80011d9c:	f2 08 00 2f 	add	pc,r9,r8<<0x2
80011da0:	e0 8f 01 e6 	bral	8001216c <receive_message_long+0x4cc>
80011da4:	e0 8f 01 e4 	bral	8001216c <receive_message_long+0x4cc>
80011da8:	e0 8f 01 e2 	bral	8001216c <receive_message_long+0x4cc>
80011dac:	e0 8f 01 e0 	bral	8001216c <receive_message_long+0x4cc>
80011db0:	e0 8f 01 de 	bral	8001216c <receive_message_long+0x4cc>
80011db4:	e0 8f 01 dc 	bral	8001216c <receive_message_long+0x4cc>
80011db8:	e0 8f 01 da 	bral	8001216c <receive_message_long+0x4cc>
80011dbc:	e0 8f 01 d8 	bral	8001216c <receive_message_long+0x4cc>
80011dc0:	e0 8f 01 d6 	bral	8001216c <receive_message_long+0x4cc>
80011dc4:	e0 8f 01 d4 	bral	8001216c <receive_message_long+0x4cc>
80011dc8:	e0 8f 01 d2 	bral	8001216c <receive_message_long+0x4cc>
80011dcc:	e0 8f 01 d0 	bral	8001216c <receive_message_long+0x4cc>
80011dd0:	e0 8f 01 ce 	bral	8001216c <receive_message_long+0x4cc>
80011dd4:	e0 8f 01 cc 	bral	8001216c <receive_message_long+0x4cc>
80011dd8:	e0 8f 01 ca 	bral	8001216c <receive_message_long+0x4cc>
80011ddc:	e0 8f 01 c8 	bral	8001216c <receive_message_long+0x4cc>
80011de0:	e0 8f 01 c6 	bral	8001216c <receive_message_long+0x4cc>
80011de4:	e0 8f 01 c4 	bral	8001216c <receive_message_long+0x4cc>
80011de8:	e0 8f 01 c2 	bral	8001216c <receive_message_long+0x4cc>
80011dec:	e0 8f 01 c0 	bral	8001216c <receive_message_long+0x4cc>
80011df0:	e0 8f 01 be 	bral	8001216c <receive_message_long+0x4cc>
80011df4:	e0 8f 01 bc 	bral	8001216c <receive_message_long+0x4cc>
80011df8:	e0 8f 01 ba 	bral	8001216c <receive_message_long+0x4cc>
80011dfc:	e0 8f 01 b8 	bral	8001216c <receive_message_long+0x4cc>
80011e00:	e0 8f 01 b6 	bral	8001216c <receive_message_long+0x4cc>
80011e04:	e0 8f 01 b4 	bral	8001216c <receive_message_long+0x4cc>
80011e08:	e0 8f 01 b2 	bral	8001216c <receive_message_long+0x4cc>
80011e0c:	e0 8f 01 b0 	bral	8001216c <receive_message_long+0x4cc>
80011e10:	e0 8f 01 ae 	bral	8001216c <receive_message_long+0x4cc>
80011e14:	e0 8f 01 ac 	bral	8001216c <receive_message_long+0x4cc>
80011e18:	e0 8f 01 aa 	bral	8001216c <receive_message_long+0x4cc>
80011e1c:	e0 8f 01 a8 	bral	8001216c <receive_message_long+0x4cc>
80011e20:	e0 8f 01 a6 	bral	8001216c <receive_message_long+0x4cc>
80011e24:	e0 8f 01 a4 	bral	8001216c <receive_message_long+0x4cc>
80011e28:	e0 8f 01 a2 	bral	8001216c <receive_message_long+0x4cc>
80011e2c:	e0 8f 01 a0 	bral	8001216c <receive_message_long+0x4cc>
80011e30:	e0 8f 01 9e 	bral	8001216c <receive_message_long+0x4cc>
80011e34:	e0 8f 01 9c 	bral	8001216c <receive_message_long+0x4cc>
80011e38:	e0 8f 01 9a 	bral	8001216c <receive_message_long+0x4cc>
80011e3c:	e0 8f 01 98 	bral	8001216c <receive_message_long+0x4cc>
80011e40:	e0 8f 01 96 	bral	8001216c <receive_message_long+0x4cc>
80011e44:	e0 8f 01 94 	bral	8001216c <receive_message_long+0x4cc>
80011e48:	e0 8f 01 92 	bral	8001216c <receive_message_long+0x4cc>
80011e4c:	e0 8f 01 90 	bral	8001216c <receive_message_long+0x4cc>
80011e50:	e0 8f 01 8e 	bral	8001216c <receive_message_long+0x4cc>
80011e54:	e0 8f 01 8c 	bral	8001216c <receive_message_long+0x4cc>
80011e58:	e0 8f 01 8a 	bral	8001216c <receive_message_long+0x4cc>
80011e5c:	e0 8f 01 88 	bral	8001216c <receive_message_long+0x4cc>
80011e60:	e0 8f 01 86 	bral	8001216c <receive_message_long+0x4cc>
80011e64:	e0 8f 01 84 	bral	8001216c <receive_message_long+0x4cc>
80011e68:	e0 8f 01 82 	bral	8001216c <receive_message_long+0x4cc>
80011e6c:	e0 8f 01 80 	bral	8001216c <receive_message_long+0x4cc>
80011e70:	e0 8f 01 7e 	bral	8001216c <receive_message_long+0x4cc>
80011e74:	e0 8f 01 7c 	bral	8001216c <receive_message_long+0x4cc>
80011e78:	e0 8f 01 7a 	bral	8001216c <receive_message_long+0x4cc>
80011e7c:	e0 8f 01 78 	bral	8001216c <receive_message_long+0x4cc>
80011e80:	e0 8f 01 76 	bral	8001216c <receive_message_long+0x4cc>
80011e84:	e0 8f 01 74 	bral	8001216c <receive_message_long+0x4cc>
80011e88:	e0 8f 01 72 	bral	8001216c <receive_message_long+0x4cc>
80011e8c:	e0 8f 01 70 	bral	8001216c <receive_message_long+0x4cc>
80011e90:	e0 8f 01 6e 	bral	8001216c <receive_message_long+0x4cc>
80011e94:	e0 8f 01 6c 	bral	8001216c <receive_message_long+0x4cc>
80011e98:	e0 8f 01 6a 	bral	8001216c <receive_message_long+0x4cc>
80011e9c:	e0 8f 01 68 	bral	8001216c <receive_message_long+0x4cc>
80011ea0:	e0 8f 01 66 	bral	8001216c <receive_message_long+0x4cc>
80011ea4:	e0 8f 01 64 	bral	8001216c <receive_message_long+0x4cc>
80011ea8:	e0 8f 01 62 	bral	8001216c <receive_message_long+0x4cc>
80011eac:	e0 8f 01 60 	bral	8001216c <receive_message_long+0x4cc>
80011eb0:	e0 8f 01 5e 	bral	8001216c <receive_message_long+0x4cc>
80011eb4:	e0 8f 01 5c 	bral	8001216c <receive_message_long+0x4cc>
80011eb8:	e0 8f 01 5a 	bral	8001216c <receive_message_long+0x4cc>
80011ebc:	e0 8f 01 58 	bral	8001216c <receive_message_long+0x4cc>
80011ec0:	e0 8f 01 56 	bral	8001216c <receive_message_long+0x4cc>
80011ec4:	e0 8f 01 54 	bral	8001216c <receive_message_long+0x4cc>
80011ec8:	e0 8f 01 52 	bral	8001216c <receive_message_long+0x4cc>
80011ecc:	e0 8f 01 50 	bral	8001216c <receive_message_long+0x4cc>
80011ed0:	e0 8f 01 4e 	bral	8001216c <receive_message_long+0x4cc>
80011ed4:	e0 8f 01 4c 	bral	8001216c <receive_message_long+0x4cc>
80011ed8:	e0 8f 01 4a 	bral	8001216c <receive_message_long+0x4cc>
80011edc:	e0 8f 01 48 	bral	8001216c <receive_message_long+0x4cc>
80011ee0:	e0 8f 01 46 	bral	8001216c <receive_message_long+0x4cc>
80011ee4:	e0 8f 01 44 	bral	8001216c <receive_message_long+0x4cc>
80011ee8:	e0 8f 01 42 	bral	8001216c <receive_message_long+0x4cc>
80011eec:	e0 8f 01 40 	bral	8001216c <receive_message_long+0x4cc>
80011ef0:	e0 8f 01 3e 	bral	8001216c <receive_message_long+0x4cc>
80011ef4:	e0 8f 01 3c 	bral	8001216c <receive_message_long+0x4cc>
80011ef8:	e0 8f 01 3a 	bral	8001216c <receive_message_long+0x4cc>
80011efc:	e0 8f 01 38 	bral	8001216c <receive_message_long+0x4cc>
80011f00:	e0 8f 01 36 	bral	8001216c <receive_message_long+0x4cc>
80011f04:	e0 8f 01 34 	bral	8001216c <receive_message_long+0x4cc>
80011f08:	e0 8f 01 32 	bral	8001216c <receive_message_long+0x4cc>
80011f0c:	e0 8f 01 30 	bral	8001216c <receive_message_long+0x4cc>
80011f10:	e0 8f 01 2e 	bral	8001216c <receive_message_long+0x4cc>
80011f14:	e0 8f 01 2c 	bral	8001216c <receive_message_long+0x4cc>
80011f18:	e0 8f 01 2a 	bral	8001216c <receive_message_long+0x4cc>
80011f1c:	e0 8f 01 28 	bral	8001216c <receive_message_long+0x4cc>
80011f20:	e0 8f 01 26 	bral	8001216c <receive_message_long+0x4cc>
80011f24:	e0 8f 01 24 	bral	8001216c <receive_message_long+0x4cc>
80011f28:	e0 8f 01 22 	bral	8001216c <receive_message_long+0x4cc>
80011f2c:	e0 8f 01 20 	bral	8001216c <receive_message_long+0x4cc>
80011f30:	e0 8f 01 1e 	bral	8001216c <receive_message_long+0x4cc>
80011f34:	e0 8f 01 1c 	bral	8001216c <receive_message_long+0x4cc>
80011f38:	e0 8f 01 1a 	bral	8001216c <receive_message_long+0x4cc>
80011f3c:	e0 8f 01 18 	bral	8001216c <receive_message_long+0x4cc>
80011f40:	e0 8f 01 16 	bral	8001216c <receive_message_long+0x4cc>
80011f44:	e0 8f 01 14 	bral	8001216c <receive_message_long+0x4cc>
80011f48:	e0 8f 01 12 	bral	8001216c <receive_message_long+0x4cc>
80011f4c:	e0 8f 01 10 	bral	8001216c <receive_message_long+0x4cc>
80011f50:	e0 8f 01 0e 	bral	8001216c <receive_message_long+0x4cc>
80011f54:	e0 8f 01 0c 	bral	8001216c <receive_message_long+0x4cc>
80011f58:	e0 8f 01 0a 	bral	8001216c <receive_message_long+0x4cc>
80011f5c:	e0 8f 01 08 	bral	8001216c <receive_message_long+0x4cc>
80011f60:	e0 8f 01 06 	bral	8001216c <receive_message_long+0x4cc>
80011f64:	e0 8f 01 04 	bral	8001216c <receive_message_long+0x4cc>
80011f68:	e0 8f 01 02 	bral	8001216c <receive_message_long+0x4cc>
80011f6c:	e0 8f 01 00 	bral	8001216c <receive_message_long+0x4cc>
80011f70:	e0 8f 00 fe 	bral	8001216c <receive_message_long+0x4cc>
80011f74:	e0 8f 00 fc 	bral	8001216c <receive_message_long+0x4cc>
80011f78:	e0 8f 00 fa 	bral	8001216c <receive_message_long+0x4cc>
80011f7c:	e0 8f 00 f8 	bral	8001216c <receive_message_long+0x4cc>
80011f80:	e0 8f 00 f6 	bral	8001216c <receive_message_long+0x4cc>
80011f84:	e0 8f 00 f4 	bral	8001216c <receive_message_long+0x4cc>
80011f88:	e0 8f 00 f2 	bral	8001216c <receive_message_long+0x4cc>
80011f8c:	e0 8f 00 f0 	bral	8001216c <receive_message_long+0x4cc>
80011f90:	e0 8f 00 ee 	bral	8001216c <receive_message_long+0x4cc>
80011f94:	e0 8f 00 ec 	bral	8001216c <receive_message_long+0x4cc>
80011f98:	e0 8f 00 ea 	bral	8001216c <receive_message_long+0x4cc>
80011f9c:	e0 8f 00 e8 	bral	8001216c <receive_message_long+0x4cc>
80011fa0:	e0 8f 00 e6 	bral	8001216c <receive_message_long+0x4cc>
80011fa4:	e0 8f 00 e4 	bral	8001216c <receive_message_long+0x4cc>
80011fa8:	e0 8f 00 e2 	bral	8001216c <receive_message_long+0x4cc>
80011fac:	e0 8f 00 e0 	bral	8001216c <receive_message_long+0x4cc>
80011fb0:	e0 8f 00 de 	bral	8001216c <receive_message_long+0x4cc>
80011fb4:	e0 8f 00 dc 	bral	8001216c <receive_message_long+0x4cc>
80011fb8:	e0 8f 00 da 	bral	8001216c <receive_message_long+0x4cc>
80011fbc:	e0 8f 00 d8 	bral	8001216c <receive_message_long+0x4cc>
80011fc0:	e0 8f 00 d6 	bral	8001216c <receive_message_long+0x4cc>
80011fc4:	e0 8f 00 d4 	bral	8001216c <receive_message_long+0x4cc>
80011fc8:	e0 8f 00 d2 	bral	8001216c <receive_message_long+0x4cc>
80011fcc:	e0 8f 00 d0 	bral	8001216c <receive_message_long+0x4cc>
80011fd0:	e0 8f 00 ce 	bral	8001216c <receive_message_long+0x4cc>
80011fd4:	e0 8f 00 cc 	bral	8001216c <receive_message_long+0x4cc>
80011fd8:	e0 8f 00 ca 	bral	8001216c <receive_message_long+0x4cc>
80011fdc:	e0 8f 00 c8 	bral	8001216c <receive_message_long+0x4cc>
80011fe0:	e0 8f 00 c6 	bral	8001216c <receive_message_long+0x4cc>
80011fe4:	e0 8f 00 c4 	bral	8001216c <receive_message_long+0x4cc>
80011fe8:	e0 8f 00 c2 	bral	8001216c <receive_message_long+0x4cc>
80011fec:	e0 8f 00 c0 	bral	8001216c <receive_message_long+0x4cc>
80011ff0:	e0 8f 00 be 	bral	8001216c <receive_message_long+0x4cc>
80011ff4:	e0 8f 00 bc 	bral	8001216c <receive_message_long+0x4cc>
80011ff8:	e0 8f 00 ba 	bral	8001216c <receive_message_long+0x4cc>
80011ffc:	e0 8f 00 b8 	bral	8001216c <receive_message_long+0x4cc>
80012000:	e0 8f 00 b6 	bral	8001216c <receive_message_long+0x4cc>
80012004:	e0 8f 00 b4 	bral	8001216c <receive_message_long+0x4cc>
80012008:	e0 8f 00 b2 	bral	8001216c <receive_message_long+0x4cc>
8001200c:	e0 8f 00 b0 	bral	8001216c <receive_message_long+0x4cc>
80012010:	e0 8f 00 ae 	bral	8001216c <receive_message_long+0x4cc>
80012014:	e0 8f 00 ac 	bral	8001216c <receive_message_long+0x4cc>
80012018:	e0 8f 00 aa 	bral	8001216c <receive_message_long+0x4cc>
8001201c:	e0 8f 00 a8 	bral	8001216c <receive_message_long+0x4cc>
80012020:	e0 8f 00 a6 	bral	8001216c <receive_message_long+0x4cc>
80012024:	e0 8f 00 a4 	bral	8001216c <receive_message_long+0x4cc>
80012028:	e0 8f 00 a2 	bral	8001216c <receive_message_long+0x4cc>
8001202c:	e0 8f 00 a0 	bral	8001216c <receive_message_long+0x4cc>
80012030:	e0 8f 00 9e 	bral	8001216c <receive_message_long+0x4cc>
80012034:	e0 8f 00 9c 	bral	8001216c <receive_message_long+0x4cc>
80012038:	e0 8f 00 9a 	bral	8001216c <receive_message_long+0x4cc>
8001203c:	e0 8f 00 98 	bral	8001216c <receive_message_long+0x4cc>
80012040:	e0 8f 00 96 	bral	8001216c <receive_message_long+0x4cc>
80012044:	e0 8f 00 94 	bral	8001216c <receive_message_long+0x4cc>
80012048:	e0 8f 00 92 	bral	8001216c <receive_message_long+0x4cc>
8001204c:	e0 8f 00 90 	bral	8001216c <receive_message_long+0x4cc>
80012050:	e0 8f 00 8e 	bral	8001216c <receive_message_long+0x4cc>
80012054:	e0 8f 00 8c 	bral	8001216c <receive_message_long+0x4cc>
80012058:	e0 8f 00 8a 	bral	8001216c <receive_message_long+0x4cc>
8001205c:	e0 8f 00 88 	bral	8001216c <receive_message_long+0x4cc>
80012060:	e0 8f 00 86 	bral	8001216c <receive_message_long+0x4cc>
80012064:	e0 8f 00 84 	bral	8001216c <receive_message_long+0x4cc>
80012068:	e0 8f 00 82 	bral	8001216c <receive_message_long+0x4cc>
8001206c:	e0 8f 00 80 	bral	8001216c <receive_message_long+0x4cc>
80012070:	e0 8f 00 7e 	bral	8001216c <receive_message_long+0x4cc>
80012074:	e0 8f 00 7c 	bral	8001216c <receive_message_long+0x4cc>
80012078:	e0 8f 00 7a 	bral	8001216c <receive_message_long+0x4cc>
8001207c:	e0 8f 00 78 	bral	8001216c <receive_message_long+0x4cc>
80012080:	e0 8f 00 76 	bral	8001216c <receive_message_long+0x4cc>
80012084:	e0 8f 00 74 	bral	8001216c <receive_message_long+0x4cc>
80012088:	e0 8f 00 72 	bral	8001216c <receive_message_long+0x4cc>
8001208c:	e0 8f 00 70 	bral	8001216c <receive_message_long+0x4cc>
80012090:	e0 8f 00 6e 	bral	8001216c <receive_message_long+0x4cc>
80012094:	e0 8f 00 6c 	bral	8001216c <receive_message_long+0x4cc>
80012098:	e0 8f 00 6a 	bral	8001216c <receive_message_long+0x4cc>
8001209c:	e0 8f 00 68 	bral	8001216c <receive_message_long+0x4cc>
800120a0:	e0 8f 00 66 	bral	8001216c <receive_message_long+0x4cc>
800120a4:	e0 8f 00 64 	bral	8001216c <receive_message_long+0x4cc>
800120a8:	e0 8f 00 62 	bral	8001216c <receive_message_long+0x4cc>
800120ac:	e0 8f 00 60 	bral	8001216c <receive_message_long+0x4cc>
800120b0:	e0 8f 00 5e 	bral	8001216c <receive_message_long+0x4cc>
800120b4:	e0 8f 00 5c 	bral	8001216c <receive_message_long+0x4cc>
800120b8:	e0 8f 00 5a 	bral	8001216c <receive_message_long+0x4cc>
800120bc:	e0 8f 00 58 	bral	8001216c <receive_message_long+0x4cc>
800120c0:	e0 8f 00 56 	bral	8001216c <receive_message_long+0x4cc>
800120c4:	e0 8f 00 54 	bral	8001216c <receive_message_long+0x4cc>
800120c8:	e0 8f 00 52 	bral	8001216c <receive_message_long+0x4cc>
800120cc:	e0 8f 00 50 	bral	8001216c <receive_message_long+0x4cc>
800120d0:	e0 8f 00 4e 	bral	8001216c <receive_message_long+0x4cc>
800120d4:	e0 8f 00 4c 	bral	8001216c <receive_message_long+0x4cc>
800120d8:	e0 8f 00 4a 	bral	8001216c <receive_message_long+0x4cc>
800120dc:	e0 8f 00 48 	bral	8001216c <receive_message_long+0x4cc>
800120e0:	e0 8f 00 46 	bral	8001216c <receive_message_long+0x4cc>
800120e4:	e0 8f 00 44 	bral	8001216c <receive_message_long+0x4cc>
800120e8:	e0 8f 00 42 	bral	8001216c <receive_message_long+0x4cc>
800120ec:	e0 8f 00 40 	bral	8001216c <receive_message_long+0x4cc>
800120f0:	e0 8f 00 3e 	bral	8001216c <receive_message_long+0x4cc>
800120f4:	e0 8f 00 3c 	bral	8001216c <receive_message_long+0x4cc>
800120f8:	e0 8f 00 3a 	bral	8001216c <receive_message_long+0x4cc>
800120fc:	e0 8f 00 38 	bral	8001216c <receive_message_long+0x4cc>
80012100:	e0 8f 00 36 	bral	8001216c <receive_message_long+0x4cc>
80012104:	e0 8f 00 34 	bral	8001216c <receive_message_long+0x4cc>
80012108:	e0 8f 00 32 	bral	8001216c <receive_message_long+0x4cc>
8001210c:	e0 8f 00 30 	bral	8001216c <receive_message_long+0x4cc>
80012110:	e0 8f 00 2e 	bral	8001216c <receive_message_long+0x4cc>
80012114:	e0 8f 00 2c 	bral	8001216c <receive_message_long+0x4cc>
80012118:	e0 8f 00 2a 	bral	8001216c <receive_message_long+0x4cc>
8001211c:	e0 8f 00 28 	bral	8001216c <receive_message_long+0x4cc>
80012120:	e0 8f 00 26 	bral	8001216c <receive_message_long+0x4cc>
80012124:	e0 8f 00 24 	bral	8001216c <receive_message_long+0x4cc>
80012128:	e0 8f 00 22 	bral	8001216c <receive_message_long+0x4cc>
8001212c:	e0 8f 00 20 	bral	8001216c <receive_message_long+0x4cc>
80012130:	e0 8f 00 1e 	bral	8001216c <receive_message_long+0x4cc>
80012134:	e0 8f 00 02 	bral	80012138 <receive_message_long+0x498>
			break;
			case MAV_CMD_PREFLIGHT_STORAGE: {
				/* Request storage of different parameter values and logs. This command will be only accepted if in pre-flight mode. |Parameter storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM| Mission storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM| Reserved| Reserved| Empty| Empty| Empty|  */
				
				// Onboard parameters storage
				if (packet.param1 == 0) {
80012138:	ee f9 ff dc 	ld.w	r9,r7[-36]
8001213c:	30 08       	mov	r8,0
8001213e:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80012142:	c0 81       	brne	80012152 <receive_message_long+0x4b2>
					// read parameters from flash
					dbg_print("Reading from flashc...\n");
80012144:	fe cc 04 d0 	sub	r12,pc,1232
80012148:	f0 16 00 01 	mcall	r6[4]
					read_parameters_from_flashc();
8001214c:	f0 16 01 20 	mcall	r6[1152]
80012150:	c0 e8       	rjmp	8001216c <receive_message_long+0x4cc>
				}
				else if (packet.param1 == 1) {
80012152:	ee f9 ff dc 	ld.w	r9,r7[-36]
80012156:	fc 18 3f 80 	movh	r8,0x3f80
8001215a:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001215e:	c0 71       	brne	8001216c <receive_message_long+0x4cc>
					// write parameters to flash
					dbg_print("Writting to flashc\n");
80012160:	fe cc 04 d4 	sub	r12,pc,1236
80012164:	f0 16 00 01 	mcall	r6[4]
					write_parameters_to_flashc();
80012168:	f0 16 01 d1 	mcall	r6[1860]
				/*  | */
			}
			break;
		}
	}
}
8001216c:	2f 6d       	sub	sp,-40
8001216e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012172:	00 00       	add	r0,r0
80012174:	80 01       	ld.sh	r1,r0[0x0]
80012176:	1b 30       	ld.ub	r0,sp++

80012178 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
80012178:	eb cd 40 80 	pushm	r7,lr
8001217c:	1a 97       	mov	r7,sp
8001217e:	20 3d       	sub	sp,12
80012180:	18 98       	mov	r8,r12
80012182:	ef 4b ff f4 	st.w	r7[-12],r11
80012186:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
8001218a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001218e:	90 08       	ld.sh	r8,r8[0x0]
80012190:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80012194:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80012198:	f3 e8 20 08 	eor	r8,r9,r8
8001219c:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
800121a0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800121a4:	a5 68       	lsl	r8,0x4
800121a6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800121aa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800121ae:	f3 e8 20 08 	eor	r8,r9,r8
800121b2:	5c 58       	castu.b	r8
800121b4:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
800121b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800121bc:	90 08       	ld.sh	r8,r8[0x0]
800121be:	5c 78       	castu.h	r8
800121c0:	a9 88       	lsr	r8,0x8
800121c2:	5c 88       	casts.h	r8
800121c4:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800121c8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800121cc:	a9 68       	lsl	r8,0x8
800121ce:	5c 88       	casts.h	r8
800121d0:	f3 e8 20 08 	eor	r8,r9,r8
800121d4:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800121d8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800121dc:	a3 78       	lsl	r8,0x3
800121de:	5c 88       	casts.h	r8
800121e0:	f3 e8 20 08 	eor	r8,r9,r8
800121e4:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800121e8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800121ec:	a5 88       	lsr	r8,0x4
800121ee:	5c 58       	castu.b	r8
800121f0:	f3 e8 20 08 	eor	r8,r9,r8
800121f4:	5c 88       	casts.h	r8
800121f6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800121fa:	b2 08       	st.h	r9[0x0],r8
}
800121fc:	2f dd       	sub	sp,-12
800121fe:	e3 cd 80 80 	ldm	sp++,r7,pc

80012202 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
80012202:	eb cd 40 80 	pushm	r7,lr
80012206:	1a 97       	mov	r7,sp
80012208:	20 1d       	sub	sp,4
8001220a:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
8001220e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80012212:	3f f8       	mov	r8,-1
80012214:	b2 08       	st.h	r9[0x0],r8
}
80012216:	2f fd       	sub	sp,-4
80012218:	e3 cd 80 80 	ldm	sp++,r7,pc

8001221c <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
8001221c:	eb cd 40 c0 	pushm	r6-r7,lr
80012220:	1a 97       	mov	r7,sp
80012222:	20 3d       	sub	sp,12
80012224:	49 76       	lddpc	r6,80012280 <crc_calculate+0x64>
80012226:	1e 26       	rsub	r6,pc
80012228:	ef 4c ff f8 	st.w	r7[-8],r12
8001222c:	16 98       	mov	r8,r11
8001222e:	ef 58 ff f4 	st.h	r7[-12],r8
        uint16_t crcTmp;
        crc_init(&crcTmp);
80012232:	ee c8 00 02 	sub	r8,r7,2
80012236:	10 9c       	mov	r12,r8
80012238:	ce 5f       	rcall	80012202 <crc_init>
	while (length--) {
8001223a:	c0 e8       	rjmp	80012256 <crc_calculate+0x3a>
                crc_accumulate(*pBuffer++, &crcTmp);
8001223c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012240:	11 88       	ld.ub	r8,r8[0x0]
80012242:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012246:	2f f9       	sub	r9,-1
80012248:	ef 49 ff f8 	st.w	r7[-8],r9
8001224c:	ee c9 00 02 	sub	r9,r7,2
80012250:	12 9b       	mov	r11,r9
80012252:	10 9c       	mov	r12,r8
80012254:	c9 2f       	rcall	80012178 <crc_accumulate>
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
80012256:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8001225a:	30 08       	mov	r8,0
8001225c:	f0 09 19 00 	cp.h	r9,r8
80012260:	5f 18       	srne	r8
80012262:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80012266:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8001226a:	20 18       	sub	r8,1
8001226c:	ef 58 ff f4 	st.h	r7[-12],r8
80012270:	58 09       	cp.w	r9,0
80012272:	ce 51       	brne	8001223c <crc_calculate+0x20>
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
80012274:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80012278:	10 9c       	mov	r12,r8
8001227a:	2f dd       	sub	sp,-12
8001227c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012280:	80 01       	ld.sh	r1,r0[0x0]
80012282:	20 aa       	sub	r10,10

80012284 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
80012284:	eb cd 40 c0 	pushm	r6-r7,lr
80012288:	1a 97       	mov	r7,sp
8001228a:	20 4d       	sub	sp,16
8001228c:	49 66       	lddpc	r6,800122e4 <crc_accumulate_buffer+0x60>
8001228e:	1e 26       	rsub	r6,pc
80012290:	ef 4c ff f8 	st.w	r7[-8],r12
80012294:	ef 4b ff f4 	st.w	r7[-12],r11
80012298:	14 98       	mov	r8,r10
8001229a:	ef 68 ff f0 	st.b	r7[-16],r8
	const uint8_t *p = (const uint8_t *)pBuffer;
8001229e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800122a2:	ef 48 ff fc 	st.w	r7[-4],r8
	while (length--) {
800122a6:	c0 d8       	rjmp	800122c0 <crc_accumulate_buffer+0x3c>
                crc_accumulate(*p++, crcAccum);
800122a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800122ac:	11 88       	ld.ub	r8,r8[0x0]
800122ae:	ee f9 ff fc 	ld.w	r9,r7[-4]
800122b2:	2f f9       	sub	r9,-1
800122b4:	ef 49 ff fc 	st.w	r7[-4],r9
800122b8:	ee fb ff f8 	ld.w	r11,r7[-8]
800122bc:	10 9c       	mov	r12,r8
800122be:	c5 df       	rcall	80012178 <crc_accumulate>
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
800122c0:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800122c4:	30 08       	mov	r8,0
800122c6:	f0 09 18 00 	cp.b	r9,r8
800122ca:	5f 18       	srne	r8
800122cc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800122d0:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800122d4:	20 18       	sub	r8,1
800122d6:	ef 68 ff f0 	st.b	r7[-16],r8
800122da:	58 09       	cp.w	r9,0
800122dc:	ce 61       	brne	800122a8 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
        }
}
800122de:	2f cd       	sub	sp,-16
800122e0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800122e4:	80 01       	ld.sh	r1,r0[0x0]
800122e6:	21 12       	sub	r2,17

800122e8 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
800122e8:	eb cd 40 c0 	pushm	r6-r7,lr
800122ec:	1a 97       	mov	r7,sp
800122ee:	20 1d       	sub	sp,4
800122f0:	48 96       	lddpc	r6,80012314 <mavlink_get_channel_status+0x2c>
800122f2:	1e 26       	rsub	r6,pc
800122f4:	18 98       	mov	r8,r12
800122f6:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
800122fa:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800122fe:	f0 09 15 04 	lsl	r9,r8,0x4
80012302:	ec f8 09 18 	ld.w	r8,r6[2328]
80012306:	f2 08 00 08 	add	r8,r9,r8
}
8001230a:	10 9c       	mov	r12,r8
8001230c:	2f fd       	sub	sp,-4
8001230e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012312:	00 00       	add	r0,r0
80012314:	80 01       	ld.sh	r1,r0[0x0]
80012316:	21 76       	sub	r6,23

80012318 <_mav_finalize_message_chan_send>:
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, 
						    uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, uint8_t length)
#endif
{
80012318:	eb cd 40 c0 	pushm	r6-r7,lr
8001231c:	1a 97       	mov	r7,sp
8001231e:	20 9d       	sub	sp,36
80012320:	4b d6       	lddpc	r6,80012414 <_mav_finalize_message_chan_send+0xfc>
80012322:	1e 26       	rsub	r6,pc
80012324:	ef 4c ff ec 	st.w	r7[-20],r12
80012328:	ef 4a ff e4 	st.w	r7[-28],r10
8001232c:	16 9a       	mov	r10,r11
8001232e:	ef 6a ff e8 	st.b	r7[-24],r10
80012332:	ef 69 ff e0 	st.b	r7[-32],r9
80012336:	ef 68 ff dc 	st.b	r7[-36],r8
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
8001233a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001233e:	5c 58       	castu.b	r8
80012340:	10 9c       	mov	r12,r8
80012342:	cd 3f       	rcall	800122e8 <mavlink_get_channel_status>
80012344:	18 98       	mov	r8,r12
80012346:	ef 48 ff fc 	st.w	r7[-4],r8
	buf[0] = MAVLINK_STX;
8001234a:	3f e8       	mov	r8,-2
8001234c:	ef 68 ff f4 	st.b	r7[-12],r8
	buf[1] = length;
80012350:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80012354:	ef 68 ff f5 	st.b	r7[-11],r8
	buf[2] = status->current_tx_seq;
80012358:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001235c:	f1 38 00 0a 	ld.ub	r8,r8[10]
80012360:	ef 68 ff f6 	st.b	r7[-10],r8
	buf[3] = mavlink_system.sysid;
80012364:	ec f8 00 74 	ld.w	r8,r6[116]
80012368:	11 88       	ld.ub	r8,r8[0x0]
8001236a:	ef 68 ff f7 	st.b	r7[-9],r8
	buf[4] = mavlink_system.compid;
8001236e:	ec f8 00 74 	ld.w	r8,r6[116]
80012372:	11 98       	ld.ub	r8,r8[0x1]
80012374:	ef 68 ff f8 	st.b	r7[-8],r8
	buf[5] = msgid;
80012378:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8001237c:	ef 68 ff f9 	st.b	r7[-7],r8
	status->current_tx_seq++;
80012380:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012384:	f1 38 00 0a 	ld.ub	r8,r8[10]
80012388:	2f f8       	sub	r8,-1
8001238a:	5c 58       	castu.b	r8
8001238c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80012390:	f3 68 00 0a 	st.b	r9[10],r8
	checksum = crc_calculate((uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
80012394:	ee c8 00 0c 	sub	r8,r7,12
80012398:	2f f8       	sub	r8,-1
8001239a:	30 5b       	mov	r11,5
8001239c:	10 9c       	mov	r12,r8
8001239e:	c3 ff       	rcall	8001221c <crc_calculate>
800123a0:	18 98       	mov	r8,r12
800123a2:	5c 88       	casts.h	r8
800123a4:	ef 58 ff fa 	st.h	r7[-6],r8
	crc_accumulate_buffer(&checksum, packet, length);
800123a8:	ef 39 ff e0 	ld.ub	r9,r7[-32]
800123ac:	ee c8 00 06 	sub	r8,r7,6
800123b0:	12 9a       	mov	r10,r9
800123b2:	ee fb ff e4 	ld.w	r11,r7[-28]
800123b6:	10 9c       	mov	r12,r8
800123b8:	c6 6f       	rcall	80012284 <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
800123ba:	ef 38 ff dc 	ld.ub	r8,r7[-36]
800123be:	ee c9 00 06 	sub	r9,r7,6
800123c2:	12 9b       	mov	r11,r9
800123c4:	10 9c       	mov	r12,r8
800123c6:	cd 9e       	rcall	80012178 <crc_accumulate>
#endif
	ck[0] = (uint8_t)(checksum & 0xFF);
800123c8:	ef 08 ff fa 	ld.sh	r8,r7[-6]
800123cc:	5c 58       	castu.b	r8
800123ce:	ef 68 ff f0 	st.b	r7[-16],r8
	ck[1] = (uint8_t)(checksum >> 8);
800123d2:	ef 08 ff fa 	ld.sh	r8,r7[-6]
800123d6:	5c 78       	castu.h	r8
800123d8:	a9 88       	lsr	r8,0x8
800123da:	5c 88       	casts.h	r8
800123dc:	5c 58       	castu.b	r8
800123de:	ef 68 ff f1 	st.b	r7[-15],r8

	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
800123e2:	ee c8 00 0c 	sub	r8,r7,12
800123e6:	30 6a       	mov	r10,6
800123e8:	10 9b       	mov	r11,r8
800123ea:	ee fc ff ec 	ld.w	r12,r7[-20]
800123ee:	c1 5c       	rcall	80012418 <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
800123f0:	ef 38 ff e0 	ld.ub	r8,r7[-32]
800123f4:	10 9a       	mov	r10,r8
800123f6:	ee fb ff e4 	ld.w	r11,r7[-28]
800123fa:	ee fc ff ec 	ld.w	r12,r7[-20]
800123fe:	c0 dc       	rcall	80012418 <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
80012400:	ee c8 00 10 	sub	r8,r7,16
80012404:	30 2a       	mov	r10,2
80012406:	10 9b       	mov	r11,r8
80012408:	ee fc ff ec 	ld.w	r12,r7[-20]
8001240c:	c0 6c       	rcall	80012418 <_mavlink_send_uart>
	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
}
8001240e:	2f 7d       	sub	sp,-36
80012410:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012414:	80 01       	ld.sh	r1,r0[0x0]
80012416:	21 a6       	sub	r6,26

80012418 <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
80012418:	eb cd 40 c0 	pushm	r6-r7,lr
8001241c:	1a 97       	mov	r7,sp
8001241e:	20 4d       	sub	sp,16
80012420:	49 46       	lddpc	r6,80012470 <_mavlink_send_uart+0x58>
80012422:	1e 26       	rsub	r6,pc
80012424:	ef 4c ff f8 	st.w	r7[-8],r12
80012428:	ef 4b ff f4 	st.w	r7[-12],r11
8001242c:	14 98       	mov	r8,r10
8001242e:	ef 58 ff f0 	st.h	r7[-16],r8
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
80012432:	30 08       	mov	r8,0
80012434:	ef 58 ff fe 	st.h	r7[-2],r8
80012438:	c1 28       	rjmp	8001245c <_mavlink_send_uart+0x44>
		comm_send_ch(chan, (uint8_t)buf[i]);
8001243a:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8001243e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80012442:	f2 08 00 08 	add	r8,r9,r8
80012446:	11 88       	ld.ub	r8,r8[0x0]
80012448:	10 9b       	mov	r11,r8
8001244a:	ee fc ff f8 	ld.w	r12,r7[-8]
8001244e:	f0 16 00 dd 	mcall	r6[884]
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
80012452:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80012456:	2f f8       	sub	r8,-1
80012458:	ef 58 ff fe 	st.h	r7[-2],r8
8001245c:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80012460:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80012464:	f0 09 19 00 	cp.h	r9,r8
80012468:	ce 93       	brcs	8001243a <_mavlink_send_uart+0x22>
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
8001246a:	2f cd       	sub	sp,-16
8001246c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012470:	80 01       	ld.sh	r1,r0[0x0]
80012472:	22 a6       	sub	r6,42

80012474 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
80012474:	eb cd 40 80 	pushm	r7,lr
80012478:	1a 97       	mov	r7,sp
8001247a:	20 2d       	sub	sp,8
8001247c:	ef 4c ff fc 	st.w	r7[-4],r12
80012480:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
80012484:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012488:	2f f8       	sub	r8,-1
8001248a:	11 88       	ld.ub	r8,r8[0x0]
8001248c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80012490:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
80012492:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012496:	f0 c9 ff ff 	sub	r9,r8,-1
8001249a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001249e:	11 88       	ld.ub	r8,r8[0x0]
800124a0:	b2 88       	st.b	r9[0x0],r8
}
800124a2:	2f ed       	sub	sp,-8
800124a4:	e3 cd 80 80 	ldm	sp++,r7,pc

800124a8 <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
800124a8:	eb cd 40 80 	pushm	r7,lr
800124ac:	1a 97       	mov	r7,sp
800124ae:	20 2d       	sub	sp,8
800124b0:	ef 4c ff fc 	st.w	r7[-4],r12
800124b4:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
800124b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800124bc:	2f d8       	sub	r8,-3
800124be:	11 88       	ld.ub	r8,r8[0x0]
800124c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800124c4:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
800124c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800124ca:	f0 c9 ff ff 	sub	r9,r8,-1
800124ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800124d2:	2f e8       	sub	r8,-2
800124d4:	11 88       	ld.ub	r8,r8[0x0]
800124d6:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
800124d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800124dc:	f0 c9 ff fe 	sub	r9,r8,-2
800124e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800124e4:	2f f8       	sub	r8,-1
800124e6:	11 88       	ld.ub	r8,r8[0x0]
800124e8:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
800124ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800124ee:	f0 c9 ff fd 	sub	r9,r8,-3
800124f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800124f6:	11 88       	ld.ub	r8,r8[0x0]
800124f8:	b2 88       	st.b	r9[0x0],r8
}
800124fa:	2f ed       	sub	sp,-8
800124fc:	e3 cd 80 80 	ldm	sp++,r7,pc

80012500 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80012500:	eb cd 40 c0 	pushm	r6-r7,lr
80012504:	1a 97       	mov	r7,sp
80012506:	20 3d       	sub	sp,12
80012508:	49 06       	lddpc	r6,80012548 <mav_array_memcpy+0x48>
8001250a:	1e 26       	rsub	r6,pc
8001250c:	ef 4c ff fc 	st.w	r7[-4],r12
80012510:	ef 4b ff f8 	st.w	r7[-8],r11
80012514:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80012518:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001251c:	58 08       	cp.w	r8,0
8001251e:	c0 91       	brne	80012530 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80012520:	ee fa ff f4 	ld.w	r10,r7[-12]
80012524:	30 0b       	mov	r11,0
80012526:	ee fc ff fc 	ld.w	r12,r7[-4]
8001252a:	f0 16 00 31 	mcall	r6[196]
8001252e:	c0 98       	rjmp	80012540 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80012530:	ee fa ff f4 	ld.w	r10,r7[-12]
80012534:	ee fb ff f8 	ld.w	r11,r7[-8]
80012538:	ee fc ff fc 	ld.w	r12,r7[-4]
8001253c:	f0 16 00 1b 	mcall	r6[108]
	}
}
80012540:	2f dd       	sub	sp,-12
80012542:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012546:	00 00       	add	r0,r0
80012548:	80 01       	ld.sh	r1,r0[0x0]
8001254a:	23 8e       	sub	lr,56

8001254c <_mav_put_char_array>:

/*
 * Place a char array into a buffer
 */
static inline void _mav_put_char_array(char *buf, uint8_t wire_offset, const char *b, uint8_t array_length)
{
8001254c:	eb cd 40 c0 	pushm	r6-r7,lr
80012550:	1a 97       	mov	r7,sp
80012552:	20 4d       	sub	sp,16
80012554:	48 e6       	lddpc	r6,8001258c <_mav_put_char_array+0x40>
80012556:	1e 26       	rsub	r6,pc
80012558:	ef 4c ff fc 	st.w	r7[-4],r12
8001255c:	ef 4a ff f4 	st.w	r7[-12],r10
80012560:	12 98       	mov	r8,r9
80012562:	16 99       	mov	r9,r11
80012564:	ef 69 ff f8 	st.b	r7[-8],r9
80012568:	ef 68 ff f0 	st.b	r7[-16],r8
	mav_array_memcpy(&buf[wire_offset], b, array_length);
8001256c:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80012570:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80012574:	ee fa ff fc 	ld.w	r10,r7[-4]
80012578:	f4 08 00 08 	add	r8,r10,r8
8001257c:	12 9a       	mov	r10,r9
8001257e:	ee fb ff f4 	ld.w	r11,r7[-12]
80012582:	10 9c       	mov	r12,r8
80012584:	cb ef       	rcall	80012500 <mav_array_memcpy>

}
80012586:	2f cd       	sub	sp,-16
80012588:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001258c:	80 01       	ld.sh	r1,r0[0x0]
8001258e:	23 da       	sub	r10,61

80012590 <_MAV_RETURN_float>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
_MAV_MSG_RETURN_TYPE(int32_t,  4)
_MAV_MSG_RETURN_TYPE(uint64_t, 8)
_MAV_MSG_RETURN_TYPE(int64_t,  8)
_MAV_MSG_RETURN_TYPE(float,    4)
80012590:	eb cd 40 c0 	pushm	r6-r7,lr
80012594:	1a 97       	mov	r7,sp
80012596:	20 3d       	sub	sp,12
80012598:	48 d6       	lddpc	r6,800125cc <_MAV_RETURN_float+0x3c>
8001259a:	1e 26       	rsub	r6,pc
8001259c:	ef 4c ff f8 	st.w	r7[-8],r12
800125a0:	16 98       	mov	r8,r11
800125a2:	ef 68 ff f4 	st.b	r7[-12],r8
800125a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800125aa:	2f 88       	sub	r8,-8
800125ac:	10 99       	mov	r9,r8
800125ae:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800125b2:	10 09       	add	r9,r8
800125b4:	ee c8 00 04 	sub	r8,r7,4
800125b8:	12 9b       	mov	r11,r9
800125ba:	10 9c       	mov	r12,r8
800125bc:	c7 6f       	rcall	800124a8 <byte_swap_4>
800125be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800125c2:	10 9c       	mov	r12,r8
800125c4:	2f dd       	sub	sp,-12
800125c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800125ca:	00 00       	add	r0,r0
800125cc:	80 01       	ld.sh	r1,r0[0x0]
800125ce:	24 1e       	sub	lr,65

800125d0 <_MAV_RETURN_char_array>:
_MAV_MSG_RETURN_TYPE(double)
#endif // MAVLINK_NEED_BYTE_SWAP

static inline uint16_t _MAV_RETURN_char_array(const mavlink_message_t *msg, char *value, 
						     uint8_t array_length, uint8_t wire_offset)
{
800125d0:	eb cd 40 c0 	pushm	r6-r7,lr
800125d4:	1a 97       	mov	r7,sp
800125d6:	20 4d       	sub	sp,16
800125d8:	49 16       	lddpc	r6,8001261c <_MAV_RETURN_char_array+0x4c>
800125da:	1e 26       	rsub	r6,pc
800125dc:	ef 4c ff fc 	st.w	r7[-4],r12
800125e0:	ef 4b ff f8 	st.w	r7[-8],r11
800125e4:	12 98       	mov	r8,r9
800125e6:	14 99       	mov	r9,r10
800125e8:	ef 69 ff f4 	st.b	r7[-12],r9
800125ec:	ef 68 ff f0 	st.b	r7[-16],r8
	memcpy(value, &_MAV_PAYLOAD(msg)[wire_offset], array_length);
800125f0:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800125f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800125f8:	f0 ca ff f8 	sub	r10,r8,-8
800125fc:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80012600:	f4 08 00 08 	add	r8,r10,r8
80012604:	12 9a       	mov	r10,r9
80012606:	10 9b       	mov	r11,r8
80012608:	ee fc ff f8 	ld.w	r12,r7[-8]
8001260c:	f0 16 00 1b 	mcall	r6[108]
	return array_length;
80012610:	ef 38 ff f4 	ld.ub	r8,r7[-12]
}
80012614:	10 9c       	mov	r12,r8
80012616:	2f cd       	sub	sp,-16
80012618:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001261c:	80 01       	ld.sh	r1,r0[0x0]
8001261e:	24 5e       	sub	lr,69

80012620 <mavlink_msg_param_value_send>:
 * @param param_index Index of this onboard parameter
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_param_value_send(mavlink_channel_t chan, const char *param_id, float param_value, uint8_t param_type, uint16_t param_count, uint16_t param_index)
{
80012620:	eb cd 40 c0 	pushm	r6-r7,lr
80012624:	1a 97       	mov	r7,sp
80012626:	20 dd       	sub	sp,52
80012628:	4a 16       	lddpc	r6,800126ac <mavlink_msg_param_value_send+0x8c>
8001262a:	1e 26       	rsub	r6,pc
8001262c:	ee ce ff f4 	sub	lr,r7,-12
80012630:	ef 4c ff e0 	st.w	r7[-32],r12
80012634:	ef 4b ff dc 	st.w	r7[-36],r11
80012638:	ef 4a ff d8 	st.w	r7[-40],r10
8001263c:	12 9a       	mov	r10,r9
8001263e:	10 99       	mov	r9,r8
80012640:	7c 08       	ld.w	r8,lr[0x0]
80012642:	ef 6a ff d4 	st.b	r7[-44],r10
80012646:	ef 59 ff d0 	st.h	r7[-48],r9
8001264a:	ef 58 ff cc 	st.h	r7[-52],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_PARAM_VALUE_LEN];
	_mav_put_float(buf, 0, param_value);
8001264e:	ee c9 00 28 	sub	r9,r7,40
80012652:	ee c8 00 1c 	sub	r8,r7,28
80012656:	12 9b       	mov	r11,r9
80012658:	10 9c       	mov	r12,r8
8001265a:	c2 7f       	rcall	800124a8 <byte_swap_4>
	_mav_put_uint16_t(buf, 4, param_count);
8001265c:	ee c9 00 30 	sub	r9,r7,48
80012660:	ee c8 00 1c 	sub	r8,r7,28
80012664:	2f c8       	sub	r8,-4
80012666:	12 9b       	mov	r11,r9
80012668:	10 9c       	mov	r12,r8
8001266a:	c0 5f       	rcall	80012474 <byte_swap_2>
	_mav_put_uint16_t(buf, 6, param_index);
8001266c:	ee c9 00 34 	sub	r9,r7,52
80012670:	ee c8 00 1c 	sub	r8,r7,28
80012674:	2f a8       	sub	r8,-6
80012676:	12 9b       	mov	r11,r9
80012678:	10 9c       	mov	r12,r8
8001267a:	cf de       	rcall	80012474 <byte_swap_2>
	_mav_put_uint8_t(buf, 24, param_type);
8001267c:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80012680:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_char_array(buf, 8, param_id, 16);
80012684:	ee c8 00 1c 	sub	r8,r7,28
80012688:	31 09       	mov	r9,16
8001268a:	ee fa ff dc 	ld.w	r10,r7[-36]
8001268e:	30 8b       	mov	r11,8
80012690:	10 9c       	mov	r12,r8
80012692:	c5 df       	rcall	8001254c <_mav_put_char_array>
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PARAM_VALUE, buf, MAVLINK_MSG_ID_PARAM_VALUE_LEN, MAVLINK_MSG_ID_PARAM_VALUE_CRC);
80012694:	ee ca 00 1c 	sub	r10,r7,28
80012698:	e0 68 00 dc 	mov	r8,220
8001269c:	31 99       	mov	r9,25
8001269e:	31 6b       	mov	r11,22
800126a0:	ee fc ff e0 	ld.w	r12,r7[-32]
800126a4:	c3 ae       	rcall	80012318 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PARAM_VALUE, (const char *)&packet, MAVLINK_MSG_ID_PARAM_VALUE_LEN, MAVLINK_MSG_ID_PARAM_VALUE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PARAM_VALUE, (const char *)&packet, MAVLINK_MSG_ID_PARAM_VALUE_LEN);
#endif
#endif
}
800126a6:	2f 3d       	sub	sp,-52
800126a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800126ac:	80 01       	ld.sh	r1,r0[0x0]
800126ae:	24 ae       	sub	lr,74

800126b0 <mavlink_msg_param_set_get_target_system>:
 * @brief Get field target_system from param_set message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_param_set_get_target_system(const mavlink_message_t* msg)
{
800126b0:	eb cd 40 80 	pushm	r7,lr
800126b4:	1a 97       	mov	r7,sp
800126b6:	20 1d       	sub	sp,4
800126b8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  4);
800126bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800126c0:	2f 88       	sub	r8,-8
800126c2:	2f c8       	sub	r8,-4
800126c4:	11 88       	ld.ub	r8,r8[0x0]
}
800126c6:	10 9c       	mov	r12,r8
800126c8:	2f fd       	sub	sp,-4
800126ca:	e3 cd 80 80 	ldm	sp++,r7,pc

800126ce <mavlink_msg_param_set_get_target_component>:
 * @brief Get field target_component from param_set message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_param_set_get_target_component(const mavlink_message_t* msg)
{
800126ce:	eb cd 40 80 	pushm	r7,lr
800126d2:	1a 97       	mov	r7,sp
800126d4:	20 1d       	sub	sp,4
800126d6:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  5);
800126da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800126de:	2f 88       	sub	r8,-8
800126e0:	2f b8       	sub	r8,-5
800126e2:	11 88       	ld.ub	r8,r8[0x0]
}
800126e4:	10 9c       	mov	r12,r8
800126e6:	2f fd       	sub	sp,-4
800126e8:	e3 cd 80 80 	ldm	sp++,r7,pc

800126ec <mavlink_msg_param_set_get_param_id>:
 * @brief Get field param_id from param_set message
 *
 * @return Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
 */
static inline uint16_t mavlink_msg_param_set_get_param_id(const mavlink_message_t* msg, char *param_id)
{
800126ec:	eb cd 40 c0 	pushm	r6-r7,lr
800126f0:	1a 97       	mov	r7,sp
800126f2:	20 2d       	sub	sp,8
800126f4:	48 a6       	lddpc	r6,8001271c <mavlink_msg_param_set_get_param_id+0x30>
800126f6:	1e 26       	rsub	r6,pc
800126f8:	ef 4c ff fc 	st.w	r7[-4],r12
800126fc:	ef 4b ff f8 	st.w	r7[-8],r11
	return _MAV_RETURN_char_array(msg, param_id, 16,  6);
80012700:	30 69       	mov	r9,6
80012702:	31 0a       	mov	r10,16
80012704:	ee fb ff f8 	ld.w	r11,r7[-8]
80012708:	ee fc ff fc 	ld.w	r12,r7[-4]
8001270c:	c6 2f       	rcall	800125d0 <_MAV_RETURN_char_array>
8001270e:	18 98       	mov	r8,r12
80012710:	5c 88       	casts.h	r8
80012712:	5c 88       	casts.h	r8
}
80012714:	10 9c       	mov	r12,r8
80012716:	2f ed       	sub	sp,-8
80012718:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001271c:	80 01       	ld.sh	r1,r0[0x0]
8001271e:	25 7a       	sub	r10,87

80012720 <mavlink_msg_param_set_get_param_value>:
 * @brief Get field param_value from param_set message
 *
 * @return Onboard parameter value
 */
static inline float mavlink_msg_param_set_get_param_value(const mavlink_message_t* msg)
{
80012720:	eb cd 40 c0 	pushm	r6-r7,lr
80012724:	1a 97       	mov	r7,sp
80012726:	20 1d       	sub	sp,4
80012728:	48 76       	lddpc	r6,80012744 <mavlink_msg_param_set_get_param_value+0x24>
8001272a:	1e 26       	rsub	r6,pc
8001272c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  0);
80012730:	30 0b       	mov	r11,0
80012732:	ee fc ff fc 	ld.w	r12,r7[-4]
80012736:	c2 df       	rcall	80012590 <_MAV_RETURN_float>
80012738:	18 98       	mov	r8,r12
}
8001273a:	10 9c       	mov	r12,r8
8001273c:	2f fd       	sub	sp,-4
8001273e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012742:	00 00       	add	r0,r0
80012744:	80 01       	ld.sh	r1,r0[0x0]
80012746:	25 ae       	sub	lr,90

80012748 <mavlink_msg_param_set_get_param_type>:
 * @brief Get field param_type from param_set message
 *
 * @return Onboard parameter type: see the MAV_PARAM_TYPE enum for supported data types.
 */
static inline uint8_t mavlink_msg_param_set_get_param_type(const mavlink_message_t* msg)
{
80012748:	eb cd 40 80 	pushm	r7,lr
8001274c:	1a 97       	mov	r7,sp
8001274e:	20 1d       	sub	sp,4
80012750:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  22);
80012754:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012758:	2f 88       	sub	r8,-8
8001275a:	2e a8       	sub	r8,-22
8001275c:	11 88       	ld.ub	r8,r8[0x0]
}
8001275e:	10 9c       	mov	r12,r8
80012760:	2f fd       	sub	sp,-4
80012762:	e3 cd 80 80 	ldm	sp++,r7,pc

80012766 <mavlink_msg_param_set_decode>:
 *
 * @param msg The message to decode
 * @param param_set C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_set_decode(const mavlink_message_t* msg, mavlink_param_set_t* param_set)
{
80012766:	eb cd 40 c0 	pushm	r6-r7,lr
8001276a:	1a 97       	mov	r7,sp
8001276c:	20 2d       	sub	sp,8
8001276e:	49 76       	lddpc	r6,800127c8 <mavlink_msg_param_set_decode+0x62>
80012770:	1e 26       	rsub	r6,pc
80012772:	ef 4c ff fc 	st.w	r7[-4],r12
80012776:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	param_set->param_value = mavlink_msg_param_set_get_param_value(msg);
8001277a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001277e:	cd 1f       	rcall	80012720 <mavlink_msg_param_set_get_param_value>
80012780:	18 99       	mov	r9,r12
80012782:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012786:	91 09       	st.w	r8[0x0],r9
	param_set->target_system = mavlink_msg_param_set_get_target_system(msg);
80012788:	ee fc ff fc 	ld.w	r12,r7[-4]
8001278c:	c9 2f       	rcall	800126b0 <mavlink_msg_param_set_get_target_system>
8001278e:	18 98       	mov	r8,r12
80012790:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012794:	b2 c8       	st.b	r9[0x4],r8
	param_set->target_component = mavlink_msg_param_set_get_target_component(msg);
80012796:	ee fc ff fc 	ld.w	r12,r7[-4]
8001279a:	c9 af       	rcall	800126ce <mavlink_msg_param_set_get_target_component>
8001279c:	18 98       	mov	r8,r12
8001279e:	ee f9 ff f8 	ld.w	r9,r7[-8]
800127a2:	b2 d8       	st.b	r9[0x5],r8
	mavlink_msg_param_set_get_param_id(msg, param_set->param_id);
800127a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800127a8:	2f a8       	sub	r8,-6
800127aa:	10 9b       	mov	r11,r8
800127ac:	ee fc ff fc 	ld.w	r12,r7[-4]
800127b0:	c9 ef       	rcall	800126ec <mavlink_msg_param_set_get_param_id>
	param_set->param_type = mavlink_msg_param_set_get_param_type(msg);
800127b2:	ee fc ff fc 	ld.w	r12,r7[-4]
800127b6:	cc 9f       	rcall	80012748 <mavlink_msg_param_set_get_param_type>
800127b8:	18 98       	mov	r8,r12
800127ba:	ee f9 ff f8 	ld.w	r9,r7[-8]
800127be:	f3 68 00 16 	st.b	r9[22],r8
#else
	memcpy(param_set, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PARAM_SET_LEN);
#endif
}
800127c2:	2f ed       	sub	sp,-8
800127c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800127c8:	80 01       	ld.sh	r1,r0[0x0]
800127ca:	25 f4       	sub	r4,95

800127cc <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800127cc:	eb cd 40 c0 	pushm	r6-r7,lr
800127d0:	1a 97       	mov	r7,sp
800127d2:	20 6d       	sub	sp,24
800127d4:	49 e6       	lddpc	r6,8001284c <interpolate+0x80>
800127d6:	1e 26       	rsub	r6,pc
800127d8:	ef 4c ff f8 	st.w	r7[-8],r12
800127dc:	ef 4b ff f4 	st.w	r7[-12],r11
800127e0:	ef 4a ff f0 	st.w	r7[-16],r10
800127e4:	ef 49 ff ec 	st.w	r7[-20],r9
800127e8:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
800127ec:	ee f9 ff f4 	ld.w	r9,r7[-12]
800127f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800127f4:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800127f8:	c0 41       	brne	80012800 <interpolate+0x34>
	{
		return y1;
800127fa:	ee f8 ff ec 	ld.w	r8,r7[-20]
800127fe:	c2 38       	rjmp	80012844 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80012800:	ee f9 ff e8 	ld.w	r9,r7[-24]
80012804:	ee f8 ff ec 	ld.w	r8,r7[-20]
80012808:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001280c:	ee fa ff f8 	ld.w	r10,r7[-8]
80012810:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012814:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80012818:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001281c:	ee fa ff f0 	ld.w	r10,r7[-16]
80012820:	ee f9 ff f4 	ld.w	r9,r7[-12]
80012824:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80012828:	12 9b       	mov	r11,r9
8001282a:	10 9c       	mov	r12,r8
8001282c:	f0 16 00 08 	mcall	r6[32]
80012830:	18 98       	mov	r8,r12
80012832:	10 99       	mov	r9,r8
80012834:	ee f8 ff ec 	ld.w	r8,r7[-20]
80012838:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001283c:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80012840:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80012844:	10 9c       	mov	r12,r8
80012846:	2f ad       	sub	sp,-24
80012848:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001284c:	80 01       	ld.sh	r1,r0[0x0]
8001284e:	26 5a       	sub	r10,101

80012850 <init_onboard_parameters>:
#include "flashc.h"
#include "print_util.h"

Parameter_Set_t param_set;

void init_onboard_parameters(void) {
80012850:	eb cd 40 c0 	pushm	r6-r7,lr
80012854:	1a 97       	mov	r7,sp
80012856:	48 a6       	lddpc	r6,8001287c <init_onboard_parameters+0x2c>
80012858:	1e 26       	rsub	r6,pc
	param_set.param_count = 0;
8001285a:	ec f8 00 28 	ld.w	r8,r6[40]
8001285e:	30 09       	mov	r9,0
80012860:	f1 49 0d 20 	st.w	r8[3360],r9
	param_set.enumerate=false;
80012864:	ec f9 00 28 	ld.w	r9,r6[40]
80012868:	30 08       	mov	r8,0
8001286a:	f3 68 0d 24 	st.b	r9[3364],r8
	param_set.transmit_parameter_index=0;
8001286e:	ec f8 00 28 	ld.w	r8,r6[40]
80012872:	30 09       	mov	r9,0
80012874:	f1 49 0d 28 	st.w	r8[3368],r9
	
}
80012878:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001287c:	80 01       	ld.sh	r1,r0[0x0]
8001287e:	26 dc       	sub	r12,109

80012880 <add_parameter_uint8>:

void add_parameter_uint8(uint8_t* val, const char* param_name) {
80012880:	eb cd 40 e0 	pushm	r5-r7,lr
80012884:	1a 97       	mov	r7,sp
80012886:	20 2d       	sub	sp,8
80012888:	4b 66       	lddpc	r6,80012960 <add_parameter_uint8+0xe0>
8001288a:	1e 26       	rsub	r6,pc
8001288c:	ef 4c ff fc 	st.w	r7[-4],r12
80012890:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80012894:	ec f8 00 28 	ld.w	r8,r6[40]
80012898:	f0 f9 0d 20 	ld.w	r9,r8[3360]
8001289c:	ee fa ff fc 	ld.w	r10,r7[-4]
800128a0:	ec fb 00 28 	ld.w	r11,r6[40]
800128a4:	12 98       	mov	r8,r9
800128a6:	a3 78       	lsl	r8,0x3
800128a8:	12 18       	sub	r8,r9
800128aa:	a3 68       	lsl	r8,0x2
800128ac:	f6 08 00 08 	add	r8,r11,r8
800128b0:	91 0a       	st.w	r8[0x0],r10
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
800128b2:	ec f8 00 28 	ld.w	r8,r6[40]
800128b6:	f0 f9 0d 20 	ld.w	r9,r8[3360]
800128ba:	12 98       	mov	r8,r9
800128bc:	a3 78       	lsl	r8,0x3
800128be:	12 18       	sub	r8,r9
800128c0:	2f f8       	sub	r8,-1
800128c2:	f0 09 15 02 	lsl	r9,r8,0x2
800128c6:	ec f8 00 28 	ld.w	r8,r6[40]
800128ca:	f2 08 00 08 	add	r8,r9,r8
800128ce:	ee fb ff f8 	ld.w	r11,r7[-8]
800128d2:	10 9c       	mov	r12,r8
800128d4:	f0 16 00 a3 	mcall	r6[652]
	param_set.parameters[param_set.param_count].data_type= MAVLINK_TYPE_UINT8_T;
800128d8:	ec f8 00 28 	ld.w	r8,r6[40]
800128dc:	f0 f9 0d 20 	ld.w	r9,r8[3360]
800128e0:	ec fa 00 28 	ld.w	r10,r6[40]
800128e4:	12 98       	mov	r8,r9
800128e6:	a3 78       	lsl	r8,0x3
800128e8:	12 18       	sub	r8,r9
800128ea:	a3 68       	lsl	r8,0x2
800128ec:	f4 08 00 08 	add	r8,r10,r8
800128f0:	2e c8       	sub	r8,-20
800128f2:	30 19       	mov	r9,1
800128f4:	91 09       	st.w	r8[0x0],r9
	param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
800128f6:	ec f8 00 28 	ld.w	r8,r6[40]
800128fa:	f0 f5 0d 20 	ld.w	r5,r8[3360]
800128fe:	ee fc ff f8 	ld.w	r12,r7[-8]
80012902:	f0 16 00 8b 	mcall	r6[556]
80012906:	18 98       	mov	r8,r12
80012908:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001290c:	ec fa 00 28 	ld.w	r10,r6[40]
80012910:	0a 98       	mov	r8,r5
80012912:	a3 78       	lsl	r8,0x3
80012914:	0a 18       	sub	r8,r5
80012916:	a3 68       	lsl	r8,0x2
80012918:	f4 08 00 08 	add	r8,r10,r8
8001291c:	f0 ca ff e8 	sub	r10,r8,-24
80012920:	12 98       	mov	r8,r9
80012922:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
80012924:	ec f8 00 28 	ld.w	r8,r6[40]
80012928:	f0 f9 0d 20 	ld.w	r9,r8[3360]
8001292c:	ec fa 00 28 	ld.w	r10,r6[40]
80012930:	12 98       	mov	r8,r9
80012932:	a3 78       	lsl	r8,0x3
80012934:	12 18       	sub	r8,r9
80012936:	a3 68       	lsl	r8,0x2
80012938:	f4 08 00 08 	add	r8,r10,r8
8001293c:	f0 c9 ff e8 	sub	r9,r8,-24
80012940:	30 18       	mov	r8,1
80012942:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
80012944:	ec f8 00 28 	ld.w	r8,r6[40]
80012948:	f0 f8 0d 20 	ld.w	r8,r8[3360]
8001294c:	f0 c9 ff ff 	sub	r9,r8,-1
80012950:	ec f8 00 28 	ld.w	r8,r6[40]
80012954:	f1 49 0d 20 	st.w	r8[3360],r9
}
80012958:	2f ed       	sub	sp,-8
8001295a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001295e:	00 00       	add	r0,r0
80012960:	80 01       	ld.sh	r1,r0[0x0]
80012962:	27 0e       	sub	lr,112

80012964 <add_parameter_uint32>:

void add_parameter_uint32(uint32_t* val, const char* param_name) {
80012964:	eb cd 40 e0 	pushm	r5-r7,lr
80012968:	1a 97       	mov	r7,sp
8001296a:	20 2d       	sub	sp,8
8001296c:	4b 66       	lddpc	r6,80012a44 <add_parameter_uint32+0xe0>
8001296e:	1e 26       	rsub	r6,pc
80012970:	ef 4c ff fc 	st.w	r7[-4],r12
80012974:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80012978:	ec f8 00 28 	ld.w	r8,r6[40]
8001297c:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80012980:	ee fa ff fc 	ld.w	r10,r7[-4]
80012984:	ec fb 00 28 	ld.w	r11,r6[40]
80012988:	12 98       	mov	r8,r9
8001298a:	a3 78       	lsl	r8,0x3
8001298c:	12 18       	sub	r8,r9
8001298e:	a3 68       	lsl	r8,0x2
80012990:	f6 08 00 08 	add	r8,r11,r8
80012994:	91 0a       	st.w	r8[0x0],r10
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
80012996:	ec f8 00 28 	ld.w	r8,r6[40]
8001299a:	f0 f9 0d 20 	ld.w	r9,r8[3360]
8001299e:	12 98       	mov	r8,r9
800129a0:	a3 78       	lsl	r8,0x3
800129a2:	12 18       	sub	r8,r9
800129a4:	2f f8       	sub	r8,-1
800129a6:	f0 09 15 02 	lsl	r9,r8,0x2
800129aa:	ec f8 00 28 	ld.w	r8,r6[40]
800129ae:	f2 08 00 08 	add	r8,r9,r8
800129b2:	ee fb ff f8 	ld.w	r11,r7[-8]
800129b6:	10 9c       	mov	r12,r8
800129b8:	f0 16 00 a3 	mcall	r6[652]
	param_set.parameters[param_set.param_count].data_type= MAVLINK_TYPE_UINT32_T;
800129bc:	ec f8 00 28 	ld.w	r8,r6[40]
800129c0:	f0 f9 0d 20 	ld.w	r9,r8[3360]
800129c4:	ec fa 00 28 	ld.w	r10,r6[40]
800129c8:	12 98       	mov	r8,r9
800129ca:	a3 78       	lsl	r8,0x3
800129cc:	12 18       	sub	r8,r9
800129ce:	a3 68       	lsl	r8,0x2
800129d0:	f4 08 00 08 	add	r8,r10,r8
800129d4:	2e c8       	sub	r8,-20
800129d6:	30 59       	mov	r9,5
800129d8:	91 09       	st.w	r8[0x0],r9
    param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
800129da:	ec f8 00 28 	ld.w	r8,r6[40]
800129de:	f0 f5 0d 20 	ld.w	r5,r8[3360]
800129e2:	ee fc ff f8 	ld.w	r12,r7[-8]
800129e6:	f0 16 00 8b 	mcall	r6[556]
800129ea:	18 98       	mov	r8,r12
800129ec:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800129f0:	ec fa 00 28 	ld.w	r10,r6[40]
800129f4:	0a 98       	mov	r8,r5
800129f6:	a3 78       	lsl	r8,0x3
800129f8:	0a 18       	sub	r8,r5
800129fa:	a3 68       	lsl	r8,0x2
800129fc:	f4 08 00 08 	add	r8,r10,r8
80012a00:	f0 ca ff e8 	sub	r10,r8,-24
80012a04:	12 98       	mov	r8,r9
80012a06:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
80012a08:	ec f8 00 28 	ld.w	r8,r6[40]
80012a0c:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80012a10:	ec fa 00 28 	ld.w	r10,r6[40]
80012a14:	12 98       	mov	r8,r9
80012a16:	a3 78       	lsl	r8,0x3
80012a18:	12 18       	sub	r8,r9
80012a1a:	a3 68       	lsl	r8,0x2
80012a1c:	f4 08 00 08 	add	r8,r10,r8
80012a20:	f0 c9 ff e8 	sub	r9,r8,-24
80012a24:	30 18       	mov	r8,1
80012a26:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
80012a28:	ec f8 00 28 	ld.w	r8,r6[40]
80012a2c:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80012a30:	f0 c9 ff ff 	sub	r9,r8,-1
80012a34:	ec f8 00 28 	ld.w	r8,r6[40]
80012a38:	f1 49 0d 20 	st.w	r8[3360],r9
}
80012a3c:	2f ed       	sub	sp,-8
80012a3e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80012a42:	00 00       	add	r0,r0
80012a44:	80 01       	ld.sh	r1,r0[0x0]
80012a46:	27 f2       	sub	r2,127

80012a48 <add_parameter_int32>:

void add_parameter_int32(int32_t* val, const char* param_name) {
80012a48:	eb cd 40 e0 	pushm	r5-r7,lr
80012a4c:	1a 97       	mov	r7,sp
80012a4e:	20 2d       	sub	sp,8
80012a50:	4b 66       	lddpc	r6,80012b28 <add_parameter_int32+0xe0>
80012a52:	1e 26       	rsub	r6,pc
80012a54:	ef 4c ff fc 	st.w	r7[-4],r12
80012a58:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80012a5c:	ec f8 00 28 	ld.w	r8,r6[40]
80012a60:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80012a64:	ee fa ff fc 	ld.w	r10,r7[-4]
80012a68:	ec fb 00 28 	ld.w	r11,r6[40]
80012a6c:	12 98       	mov	r8,r9
80012a6e:	a3 78       	lsl	r8,0x3
80012a70:	12 18       	sub	r8,r9
80012a72:	a3 68       	lsl	r8,0x2
80012a74:	f6 08 00 08 	add	r8,r11,r8
80012a78:	91 0a       	st.w	r8[0x0],r10
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
80012a7a:	ec f8 00 28 	ld.w	r8,r6[40]
80012a7e:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80012a82:	12 98       	mov	r8,r9
80012a84:	a3 78       	lsl	r8,0x3
80012a86:	12 18       	sub	r8,r9
80012a88:	2f f8       	sub	r8,-1
80012a8a:	f0 09 15 02 	lsl	r9,r8,0x2
80012a8e:	ec f8 00 28 	ld.w	r8,r6[40]
80012a92:	f2 08 00 08 	add	r8,r9,r8
80012a96:	ee fb ff f8 	ld.w	r11,r7[-8]
80012a9a:	10 9c       	mov	r12,r8
80012a9c:	f0 16 00 a3 	mcall	r6[652]
	param_set.parameters[param_set.param_count].data_type = MAVLINK_TYPE_INT32_T;
80012aa0:	ec f8 00 28 	ld.w	r8,r6[40]
80012aa4:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80012aa8:	ec fa 00 28 	ld.w	r10,r6[40]
80012aac:	12 98       	mov	r8,r9
80012aae:	a3 78       	lsl	r8,0x3
80012ab0:	12 18       	sub	r8,r9
80012ab2:	a3 68       	lsl	r8,0x2
80012ab4:	f4 08 00 08 	add	r8,r10,r8
80012ab8:	2e c8       	sub	r8,-20
80012aba:	30 69       	mov	r9,6
80012abc:	91 09       	st.w	r8[0x0],r9
	param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
80012abe:	ec f8 00 28 	ld.w	r8,r6[40]
80012ac2:	f0 f5 0d 20 	ld.w	r5,r8[3360]
80012ac6:	ee fc ff f8 	ld.w	r12,r7[-8]
80012aca:	f0 16 00 8b 	mcall	r6[556]
80012ace:	18 98       	mov	r8,r12
80012ad0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80012ad4:	ec fa 00 28 	ld.w	r10,r6[40]
80012ad8:	0a 98       	mov	r8,r5
80012ada:	a3 78       	lsl	r8,0x3
80012adc:	0a 18       	sub	r8,r5
80012ade:	a3 68       	lsl	r8,0x2
80012ae0:	f4 08 00 08 	add	r8,r10,r8
80012ae4:	f0 ca ff e8 	sub	r10,r8,-24
80012ae8:	12 98       	mov	r8,r9
80012aea:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
80012aec:	ec f8 00 28 	ld.w	r8,r6[40]
80012af0:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80012af4:	ec fa 00 28 	ld.w	r10,r6[40]
80012af8:	12 98       	mov	r8,r9
80012afa:	a3 78       	lsl	r8,0x3
80012afc:	12 18       	sub	r8,r9
80012afe:	a3 68       	lsl	r8,0x2
80012b00:	f4 08 00 08 	add	r8,r10,r8
80012b04:	f0 c9 ff e8 	sub	r9,r8,-24
80012b08:	30 18       	mov	r8,1
80012b0a:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
80012b0c:	ec f8 00 28 	ld.w	r8,r6[40]
80012b10:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80012b14:	f0 c9 ff ff 	sub	r9,r8,-1
80012b18:	ec f8 00 28 	ld.w	r8,r6[40]
80012b1c:	f1 49 0d 20 	st.w	r8[3360],r9
}
80012b20:	2f ed       	sub	sp,-8
80012b22:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80012b26:	00 00       	add	r0,r0
80012b28:	80 01       	ld.sh	r1,r0[0x0]
80012b2a:	28 d6       	sub	r6,-115

80012b2c <add_parameter_float>:

void add_parameter_float(float* val, const char* param_name) {
80012b2c:	eb cd 40 e0 	pushm	r5-r7,lr
80012b30:	1a 97       	mov	r7,sp
80012b32:	20 2d       	sub	sp,8
80012b34:	4b 66       	lddpc	r6,80012c0c <add_parameter_float+0xe0>
80012b36:	1e 26       	rsub	r6,pc
80012b38:	ef 4c ff fc 	st.w	r7[-4],r12
80012b3c:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80012b40:	ec f8 00 28 	ld.w	r8,r6[40]
80012b44:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80012b48:	ec fa 00 28 	ld.w	r10,r6[40]
80012b4c:	12 98       	mov	r8,r9
80012b4e:	a3 78       	lsl	r8,0x3
80012b50:	12 18       	sub	r8,r9
80012b52:	a3 68       	lsl	r8,0x2
80012b54:	f4 08 00 08 	add	r8,r10,r8
80012b58:	ee f9 ff fc 	ld.w	r9,r7[-4]
80012b5c:	91 09       	st.w	r8[0x0],r9
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
80012b5e:	ec f8 00 28 	ld.w	r8,r6[40]
80012b62:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80012b66:	12 98       	mov	r8,r9
80012b68:	a3 78       	lsl	r8,0x3
80012b6a:	12 18       	sub	r8,r9
80012b6c:	2f f8       	sub	r8,-1
80012b6e:	f0 09 15 02 	lsl	r9,r8,0x2
80012b72:	ec f8 00 28 	ld.w	r8,r6[40]
80012b76:	f2 08 00 08 	add	r8,r9,r8
80012b7a:	ee fb ff f8 	ld.w	r11,r7[-8]
80012b7e:	10 9c       	mov	r12,r8
80012b80:	f0 16 00 a3 	mcall	r6[652]
	param_set.parameters[param_set.param_count].data_type = MAVLINK_TYPE_FLOAT;
80012b84:	ec f8 00 28 	ld.w	r8,r6[40]
80012b88:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80012b8c:	ec fa 00 28 	ld.w	r10,r6[40]
80012b90:	12 98       	mov	r8,r9
80012b92:	a3 78       	lsl	r8,0x3
80012b94:	12 18       	sub	r8,r9
80012b96:	a3 68       	lsl	r8,0x2
80012b98:	f4 08 00 08 	add	r8,r10,r8
80012b9c:	2e c8       	sub	r8,-20
80012b9e:	30 99       	mov	r9,9
80012ba0:	91 09       	st.w	r8[0x0],r9
	param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
80012ba2:	ec f8 00 28 	ld.w	r8,r6[40]
80012ba6:	f0 f5 0d 20 	ld.w	r5,r8[3360]
80012baa:	ee fc ff f8 	ld.w	r12,r7[-8]
80012bae:	f0 16 00 8b 	mcall	r6[556]
80012bb2:	18 98       	mov	r8,r12
80012bb4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80012bb8:	ec fa 00 28 	ld.w	r10,r6[40]
80012bbc:	0a 98       	mov	r8,r5
80012bbe:	a3 78       	lsl	r8,0x3
80012bc0:	0a 18       	sub	r8,r5
80012bc2:	a3 68       	lsl	r8,0x2
80012bc4:	f4 08 00 08 	add	r8,r10,r8
80012bc8:	f0 ca ff e8 	sub	r10,r8,-24
80012bcc:	12 98       	mov	r8,r9
80012bce:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
80012bd0:	ec f8 00 28 	ld.w	r8,r6[40]
80012bd4:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80012bd8:	ec fa 00 28 	ld.w	r10,r6[40]
80012bdc:	12 98       	mov	r8,r9
80012bde:	a3 78       	lsl	r8,0x3
80012be0:	12 18       	sub	r8,r9
80012be2:	a3 68       	lsl	r8,0x2
80012be4:	f4 08 00 08 	add	r8,r10,r8
80012be8:	f0 c9 ff e8 	sub	r9,r8,-24
80012bec:	30 18       	mov	r8,1
80012bee:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
80012bf0:	ec f8 00 28 	ld.w	r8,r6[40]
80012bf4:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80012bf8:	f0 c9 ff ff 	sub	r9,r8,-1
80012bfc:	ec f8 00 28 	ld.w	r8,r6[40]
80012c00:	f1 49 0d 20 	st.w	r8[3360],r9
}
80012c04:	2f ed       	sub	sp,-8
80012c06:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80012c0a:	00 00       	add	r0,r0
80012c0c:	80 01       	ld.sh	r1,r0[0x0]
80012c0e:	29 ba       	sub	r10,-101

80012c10 <send_all_parameters>:

void send_all_parameters() {
80012c10:	eb cd 40 c0 	pushm	r6-r7,lr
80012c14:	1a 97       	mov	r7,sp
80012c16:	20 1d       	sub	sp,4
80012c18:	49 26       	lddpc	r6,80012c60 <send_all_parameters+0x50>
80012c1a:	1e 26       	rsub	r6,pc
	// schedule all parameters for transmission
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80012c1c:	30 08       	mov	r8,0
80012c1e:	ef 68 ff ff 	st.b	r7[-1],r8
80012c22:	c1 48       	rjmp	80012c4a <send_all_parameters+0x3a>
		param_set.parameters[i].schedule_for_transmission=true;
80012c24:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80012c28:	ec fa 00 28 	ld.w	r10,r6[40]
80012c2c:	12 98       	mov	r8,r9
80012c2e:	a3 78       	lsl	r8,0x3
80012c30:	12 18       	sub	r8,r9
80012c32:	a3 68       	lsl	r8,0x2
80012c34:	f4 08 00 08 	add	r8,r10,r8
80012c38:	f0 c9 ff e8 	sub	r9,r8,-24
80012c3c:	30 18       	mov	r8,1
80012c3e:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
}

void send_all_parameters() {
	// schedule all parameters for transmission
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80012c40:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80012c44:	2f f8       	sub	r8,-1
80012c46:	ef 68 ff ff 	st.b	r7[-1],r8
80012c4a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80012c4e:	ec f8 00 28 	ld.w	r8,r6[40]
80012c52:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80012c56:	10 39       	cp.w	r9,r8
80012c58:	ce 65       	brlt	80012c24 <send_all_parameters+0x14>
		param_set.parameters[i].schedule_for_transmission=true;
	}		
}
80012c5a:	2f fd       	sub	sp,-4
80012c5c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012c60:	80 01       	ld.sh	r1,r0[0x0]
80012c62:	2a 9e       	sub	lr,-87

80012c64 <send_all_parameters_now>:

void send_all_parameters_now() {
80012c64:	eb cd 40 e0 	pushm	r5-r7,lr
80012c68:	1a 97       	mov	r7,sp
80012c6a:	20 1d       	sub	sp,4
80012c6c:	4a d6       	lddpc	r6,80012d20 <send_all_parameters_now+0xbc>
80012c6e:	1e 26       	rsub	r6,pc
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80012c70:	30 08       	mov	r8,0
80012c72:	ef 68 ff ff 	st.b	r7[-1],r8
80012c76:	c4 a8       	rjmp	80012d0a <send_all_parameters_now+0xa6>
		mavlink_msg_param_value_send(MAVLINK_COMM_0,
80012c78:	ef 35 ff ff 	ld.ub	r5,r7[-1]
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
80012c7c:	ec f8 00 28 	ld.w	r8,r6[40]
80012c80:	f0 f8 0d 20 	ld.w	r8,r8[3360]
	}		
}

void send_all_parameters_now() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		mavlink_msg_param_value_send(MAVLINK_COMM_0,
80012c84:	5c 88       	casts.h	r8
80012c86:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
80012c8a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80012c8e:	ec fa 00 28 	ld.w	r10,r6[40]
80012c92:	12 98       	mov	r8,r9
80012c94:	a3 78       	lsl	r8,0x3
80012c96:	12 18       	sub	r8,r9
80012c98:	a3 68       	lsl	r8,0x2
80012c9a:	f4 08 00 08 	add	r8,r10,r8
80012c9e:	2e c8       	sub	r8,-20
80012ca0:	70 08       	ld.w	r8,r8[0x0]
	}		
}

void send_all_parameters_now() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		mavlink_msg_param_value_send(MAVLINK_COMM_0,
80012ca2:	5c 58       	castu.b	r8
80012ca4:	10 9c       	mov	r12,r8
80012ca6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80012caa:	ec fa 00 28 	ld.w	r10,r6[40]
80012cae:	12 98       	mov	r8,r9
80012cb0:	a3 78       	lsl	r8,0x3
80012cb2:	12 18       	sub	r8,r9
80012cb4:	a3 68       	lsl	r8,0x2
80012cb6:	f4 08 00 08 	add	r8,r10,r8
80012cba:	70 08       	ld.w	r8,r8[0x0]
80012cbc:	70 0a       	ld.w	r10,r8[0x0]
80012cbe:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80012cc2:	12 98       	mov	r8,r9
80012cc4:	a3 78       	lsl	r8,0x3
80012cc6:	12 18       	sub	r8,r9
80012cc8:	2f f8       	sub	r8,-1
80012cca:	f0 09 15 02 	lsl	r9,r8,0x2
80012cce:	ec f8 00 28 	ld.w	r8,r6[40]
80012cd2:	f2 08 00 0b 	add	r11,r9,r8
80012cd6:	1a d5       	st.w	--sp,r5
80012cd8:	1c 98       	mov	r8,lr
80012cda:	18 99       	mov	r9,r12
80012cdc:	30 0c       	mov	r12,0
80012cde:	fe b0 fc a1 	rcall	80012620 <mavlink_msg_param_value_send>
80012ce2:	2f fd       	sub	sp,-4
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
										i);
		param_set.parameters[i].schedule_for_transmission=false;
80012ce4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80012ce8:	ec fa 00 28 	ld.w	r10,r6[40]
80012cec:	12 98       	mov	r8,r9
80012cee:	a3 78       	lsl	r8,0x3
80012cf0:	12 18       	sub	r8,r9
80012cf2:	a3 68       	lsl	r8,0x2
80012cf4:	f4 08 00 08 	add	r8,r10,r8
80012cf8:	f0 c9 ff e8 	sub	r9,r8,-24
80012cfc:	30 08       	mov	r8,0
80012cfe:	b2 a8       	st.b	r9[0x2],r8
		param_set.parameters[i].schedule_for_transmission=true;
	}		
}

void send_all_parameters_now() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80012d00:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80012d04:	2f f8       	sub	r8,-1
80012d06:	ef 68 ff ff 	st.b	r7[-1],r8
80012d0a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80012d0e:	ec f8 00 28 	ld.w	r8,r6[40]
80012d12:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80012d16:	10 39       	cp.w	r9,r8
80012d18:	cb 05       	brlt	80012c78 <send_all_parameters_now+0x14>
										i);
		param_set.parameters[i].schedule_for_transmission=false;

	}

}
80012d1a:	2f fd       	sub	sp,-4
80012d1c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80012d20:	80 01       	ld.sh	r1,r0[0x0]
80012d22:	2a f2       	sub	r2,-81

80012d24 <send_scheduled_parameters>:


void send_scheduled_parameters() {
80012d24:	eb cd 40 e0 	pushm	r5-r7,lr
80012d28:	1a 97       	mov	r7,sp
80012d2a:	20 1d       	sub	sp,4
80012d2c:	4b 56       	lddpc	r6,80012e00 <send_scheduled_parameters+0xdc>
80012d2e:	1e 26       	rsub	r6,pc
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80012d30:	30 08       	mov	r8,0
80012d32:	ef 68 ff ff 	st.b	r7[-1],r8
80012d36:	c5 98       	rjmp	80012de8 <send_scheduled_parameters+0xc4>
		if (param_set.parameters[i].schedule_for_transmission) {
80012d38:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80012d3c:	ec fa 00 28 	ld.w	r10,r6[40]
80012d40:	12 98       	mov	r8,r9
80012d42:	a3 78       	lsl	r8,0x3
80012d44:	12 18       	sub	r8,r9
80012d46:	a3 68       	lsl	r8,0x2
80012d48:	f4 08 00 08 	add	r8,r10,r8
80012d4c:	2e 88       	sub	r8,-24
80012d4e:	11 a8       	ld.ub	r8,r8[0x2]
80012d50:	58 08       	cp.w	r8,0
80012d52:	c4 60       	breq	80012dde <send_scheduled_parameters+0xba>
			mavlink_msg_param_value_send(MAVLINK_COMM_0,
80012d54:	ef 35 ff ff 	ld.ub	r5,r7[-1]
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
80012d58:	ec f8 00 28 	ld.w	r8,r6[40]
80012d5c:	f0 f8 0d 20 	ld.w	r8,r8[3360]


void send_scheduled_parameters() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		if (param_set.parameters[i].schedule_for_transmission) {
			mavlink_msg_param_value_send(MAVLINK_COMM_0,
80012d60:	5c 88       	casts.h	r8
80012d62:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
80012d66:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80012d6a:	ec fa 00 28 	ld.w	r10,r6[40]
80012d6e:	12 98       	mov	r8,r9
80012d70:	a3 78       	lsl	r8,0x3
80012d72:	12 18       	sub	r8,r9
80012d74:	a3 68       	lsl	r8,0x2
80012d76:	f4 08 00 08 	add	r8,r10,r8
80012d7a:	2e c8       	sub	r8,-20
80012d7c:	70 08       	ld.w	r8,r8[0x0]


void send_scheduled_parameters() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		if (param_set.parameters[i].schedule_for_transmission) {
			mavlink_msg_param_value_send(MAVLINK_COMM_0,
80012d7e:	5c 58       	castu.b	r8
80012d80:	10 9c       	mov	r12,r8
80012d82:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80012d86:	ec fa 00 28 	ld.w	r10,r6[40]
80012d8a:	12 98       	mov	r8,r9
80012d8c:	a3 78       	lsl	r8,0x3
80012d8e:	12 18       	sub	r8,r9
80012d90:	a3 68       	lsl	r8,0x2
80012d92:	f4 08 00 08 	add	r8,r10,r8
80012d96:	70 08       	ld.w	r8,r8[0x0]
80012d98:	70 0a       	ld.w	r10,r8[0x0]
80012d9a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80012d9e:	12 98       	mov	r8,r9
80012da0:	a3 78       	lsl	r8,0x3
80012da2:	12 18       	sub	r8,r9
80012da4:	2f f8       	sub	r8,-1
80012da6:	f0 09 15 02 	lsl	r9,r8,0x2
80012daa:	ec f8 00 28 	ld.w	r8,r6[40]
80012dae:	f2 08 00 0b 	add	r11,r9,r8
80012db2:	1a d5       	st.w	--sp,r5
80012db4:	1c 98       	mov	r8,lr
80012db6:	18 99       	mov	r9,r12
80012db8:	30 0c       	mov	r12,0
80012dba:	fe b0 fc 33 	rcall	80012620 <mavlink_msg_param_value_send>
80012dbe:	2f fd       	sub	sp,-4
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
										i);
			param_set.parameters[i].schedule_for_transmission=false;
80012dc0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80012dc4:	ec fa 00 28 	ld.w	r10,r6[40]
80012dc8:	12 98       	mov	r8,r9
80012dca:	a3 78       	lsl	r8,0x3
80012dcc:	12 18       	sub	r8,r9
80012dce:	a3 68       	lsl	r8,0x2
80012dd0:	f4 08 00 08 	add	r8,r10,r8
80012dd4:	f0 c9 ff e8 	sub	r9,r8,-24
80012dd8:	30 08       	mov	r8,0
80012dda:	b2 a8       	st.b	r9[0x2],r8
			return;
80012ddc:	c0 e8       	rjmp	80012df8 <send_scheduled_parameters+0xd4>

}


void send_scheduled_parameters() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80012dde:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80012de2:	2f f8       	sub	r8,-1
80012de4:	ef 68 ff ff 	st.b	r7[-1],r8
80012de8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80012dec:	ec f8 00 28 	ld.w	r8,r6[40]
80012df0:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80012df4:	10 39       	cp.w	r9,r8
80012df6:	ca 15       	brlt	80012d38 <send_scheduled_parameters+0x14>
			param_set.parameters[i].schedule_for_transmission=false;
			return;
		}			

	}
}
80012df8:	2f fd       	sub	sp,-4
80012dfa:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80012dfe:	00 00       	add	r0,r0
80012e00:	80 01       	ld.sh	r1,r0[0x0]
80012e02:	2b b2       	sub	r2,-69

80012e04 <send_parameter>:


void send_parameter(mavlink_param_request_read_t* request) {
80012e04:	eb cd 40 c0 	pushm	r6-r7,lr
80012e08:	1a 97       	mov	r7,sp
80012e0a:	20 4d       	sub	sp,16
80012e0c:	4d 26       	lddpc	r6,80012f54 <send_parameter+0x150>
80012e0e:	1e 26       	rsub	r6,pc
80012e10:	ef 4c ff f0 	st.w	r7[-16],r12
	if(request->param_index!=-1) {
80012e14:	ee f8 ff f0 	ld.w	r8,r7[-16]
80012e18:	90 09       	ld.sh	r9,r8[0x0]
80012e1a:	3f f8       	mov	r8,-1
80012e1c:	f0 09 19 00 	cp.h	r9,r8
80012e20:	c1 d0       	breq	80012e5a <send_parameter+0x56>
									(int8_t*)param_set.parameters[request->param_index].param_name,
									*param_set.parameters[request->param_index].param,
									param_set.parameters[request->param_index].data_type,
									param_set.param_count,
									request->param_index);*/
		if (request->param_index>param_set.param_count) return;
80012e22:	ee f8 ff f0 	ld.w	r8,r7[-16]
80012e26:	90 08       	ld.sh	r8,r8[0x0]
80012e28:	10 99       	mov	r9,r8
80012e2a:	ec f8 00 28 	ld.w	r8,r6[40]
80012e2e:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80012e32:	10 39       	cp.w	r9,r8
80012e34:	e0 89 00 8b 	brgt	80012f4a <send_parameter+0x146>
		param_set.parameters[request->param_index].schedule_for_transmission=true;
80012e38:	ee f8 ff f0 	ld.w	r8,r7[-16]
80012e3c:	90 08       	ld.sh	r8,r8[0x0]
80012e3e:	10 99       	mov	r9,r8
80012e40:	ec fa 00 28 	ld.w	r10,r6[40]
80012e44:	12 98       	mov	r8,r9
80012e46:	a3 78       	lsl	r8,0x3
80012e48:	12 18       	sub	r8,r9
80012e4a:	a3 68       	lsl	r8,0x2
80012e4c:	f4 08 00 08 	add	r8,r10,r8
80012e50:	f0 c9 ff e8 	sub	r9,r8,-24
80012e54:	30 18       	mov	r8,1
80012e56:	b2 a8       	st.b	r9[0x2],r8
80012e58:	c7 a8       	rjmp	80012f4c <send_parameter+0x148>

	}
	else {
		char* key = (char*) request->param_id;		
80012e5a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80012e5e:	2f c8       	sub	r8,-4
80012e60:	ef 48 ff f4 	st.w	r7[-12],r8
		for (uint16_t i = 0; i < param_set.param_count; i++) {
80012e64:	30 08       	mov	r8,0
80012e66:	ef 58 ff fa 	st.h	r7[-6],r8
80012e6a:	c6 78       	rjmp	80012f38 <send_parameter+0x134>
			bool match = true;
80012e6c:	30 18       	mov	r8,1
80012e6e:	ef 68 ff fd 	st.b	r7[-3],r8
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
80012e72:	30 08       	mov	r8,0
80012e74:	ef 58 ff fe 	st.h	r7[-2],r8
80012e78:	c3 38       	rjmp	80012ede <send_parameter+0xda>
				// Compare
				if ((char)param_set.parameters[i].param_name[j] != (char)key[j]) {
80012e7a:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80012e7e:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80012e82:	ec fb 00 28 	ld.w	r11,r6[40]
80012e86:	12 98       	mov	r8,r9
80012e88:	a3 78       	lsl	r8,0x3
80012e8a:	12 18       	sub	r8,r9
80012e8c:	a3 68       	lsl	r8,0x2
80012e8e:	f6 08 00 08 	add	r8,r11,r8
80012e92:	14 08       	add	r8,r10
80012e94:	2f c8       	sub	r8,-4
80012e96:	11 89       	ld.ub	r9,r8[0x0]
80012e98:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80012e9c:	ee fa ff f4 	ld.w	r10,r7[-12]
80012ea0:	f4 08 00 08 	add	r8,r10,r8
80012ea4:	11 88       	ld.ub	r8,r8[0x0]
80012ea6:	f0 09 18 00 	cp.b	r9,r8
80012eaa:	c0 40       	breq	80012eb2 <send_parameter+0xae>
					match = false;
80012eac:	30 08       	mov	r8,0
80012eae:	ef 68 ff fd 	st.b	r7[-3],r8
				}
 
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
80012eb2:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80012eb6:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80012eba:	ec fb 00 28 	ld.w	r11,r6[40]
80012ebe:	12 98       	mov	r8,r9
80012ec0:	a3 78       	lsl	r8,0x3
80012ec2:	12 18       	sub	r8,r9
80012ec4:	a3 68       	lsl	r8,0x2
80012ec6:	f6 08 00 08 	add	r8,r11,r8
80012eca:	14 08       	add	r8,r10
80012ecc:	2f c8       	sub	r8,-4
80012ece:	11 88       	ld.ub	r8,r8[0x0]
80012ed0:	58 08       	cp.w	r8,0
80012ed2:	c1 80       	breq	80012f02 <send_parameter+0xfe>
	}
	else {
		char* key = (char*) request->param_id;		
		for (uint16_t i = 0; i < param_set.param_count; i++) {
			bool match = true;
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
80012ed4:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80012ed8:	2f f8       	sub	r8,-1
80012eda:	ef 58 ff fe 	st.h	r7[-2],r8
80012ede:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80012ee2:	ec fa 00 28 	ld.w	r10,r6[40]
80012ee6:	12 98       	mov	r8,r9
80012ee8:	a3 78       	lsl	r8,0x3
80012eea:	12 18       	sub	r8,r9
80012eec:	a3 68       	lsl	r8,0x2
80012eee:	f4 08 00 08 	add	r8,r10,r8
80012ef2:	2e 88       	sub	r8,-24
80012ef4:	11 88       	ld.ub	r8,r8[0x0]
80012ef6:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80012efa:	f0 09 19 00 	cp.h	r9,r8
80012efe:	cb e3       	brcs	80012e7a <send_parameter+0x76>
80012f00:	c0 28       	rjmp	80012f04 <send_parameter+0x100>
					match = false;
				}
 
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
					break;
80012f02:	d7 03       	nop
				}
			}
 
			// Check if matched
			if (match) {
80012f04:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80012f08:	30 08       	mov	r8,0
80012f0a:	f0 09 18 00 	cp.b	r9,r8
80012f0e:	c1 00       	breq	80012f2e <send_parameter+0x12a>
				/*
				mavlink_msg_param_value_send(MAVLINK_COMM_0,
											(int8_t*)param_set.parameters[i].param_name,
											*param_set.parameters[i].param, param_set.parameters[i].data_type, 
											param_set.param_count, i);*/
				param_set.parameters[i].schedule_for_transmission=true;
80012f10:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80012f14:	ec fa 00 28 	ld.w	r10,r6[40]
80012f18:	12 98       	mov	r8,r9
80012f1a:	a3 78       	lsl	r8,0x3
80012f1c:	12 18       	sub	r8,r9
80012f1e:	a3 68       	lsl	r8,0x2
80012f20:	f4 08 00 08 	add	r8,r10,r8
80012f24:	f0 c9 ff e8 	sub	r9,r8,-24
80012f28:	30 18       	mov	r8,1
80012f2a:	b2 a8       	st.b	r9[0x2],r8

				break;
80012f2c:	c1 08       	rjmp	80012f4c <send_parameter+0x148>
		param_set.parameters[request->param_index].schedule_for_transmission=true;

	}
	else {
		char* key = (char*) request->param_id;		
		for (uint16_t i = 0; i < param_set.param_count; i++) {
80012f2e:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80012f32:	2f f8       	sub	r8,-1
80012f34:	ef 58 ff fa 	st.h	r7[-6],r8
80012f38:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80012f3c:	ec f8 00 28 	ld.w	r8,r6[40]
80012f40:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80012f44:	10 39       	cp.w	r9,r8
80012f46:	c9 35       	brlt	80012e6c <send_parameter+0x68>
80012f48:	c0 28       	rjmp	80012f4c <send_parameter+0x148>
									(int8_t*)param_set.parameters[request->param_index].param_name,
									*param_set.parameters[request->param_index].param,
									param_set.parameters[request->param_index].data_type,
									param_set.param_count,
									request->param_index);*/
		if (request->param_index>param_set.param_count) return;
80012f4a:	d7 03       	nop

				break;
			}					
		}
	}
}
80012f4c:	2f cd       	sub	sp,-16
80012f4e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012f52:	00 00       	add	r0,r0
80012f54:	80 01       	ld.sh	r1,r0[0x0]
80012f56:	2c 92       	sub	r2,-55

80012f58 <receive_parameter>:

void receive_parameter(Mavlink_Received_t* rec) {
80012f58:	eb cd 40 c0 	pushm	r6-r7,lr
80012f5c:	1a 97       	mov	r7,sp
80012f5e:	20 ad       	sub	sp,40
80012f60:	4e 76       	lddpc	r6,800130fc <receive_parameter+0x1a4>
80012f62:	1e 26       	rsub	r6,pc
80012f64:	ef 4c ff d8 	st.w	r7[-40],r12
	mavlink_param_set_t set;
	mavlink_msg_param_set_decode(&rec->msg, &set);
80012f68:	ee f8 ff d8 	ld.w	r8,r7[-40]
80012f6c:	ee c9 00 24 	sub	r9,r7,36
80012f70:	12 9b       	mov	r11,r9
80012f72:	10 9c       	mov	r12,r8
80012f74:	fe b0 fb f9 	rcall	80012766 <mavlink_msg_param_set_decode>
 
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
80012f78:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80012f7c:	ec f8 00 74 	ld.w	r8,r6[116]
80012f80:	11 88       	ld.ub	r8,r8[0x0]
void receive_parameter(Mavlink_Received_t* rec) {
	mavlink_param_set_t set;
	mavlink_msg_param_set_decode(&rec->msg, &set);
 
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
80012f82:	f0 09 18 00 	cp.b	r9,r8
80012f86:	e0 81 00 b7 	brne	800130f4 <receive_parameter+0x19c>
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
80012f8a:	ef 39 ff e1 	ld.ub	r9,r7[-31]
80012f8e:	ec f8 00 74 	ld.w	r8,r6[116]
80012f92:	11 98       	ld.ub	r8,r8[0x1]
void receive_parameter(Mavlink_Received_t* rec) {
	mavlink_param_set_t set;
	mavlink_msg_param_set_decode(&rec->msg, &set);
 
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
80012f94:	f0 09 18 00 	cp.b	r9,r8
80012f98:	e0 81 00 ae 	brne	800130f4 <receive_parameter+0x19c>
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
		char* key = (char*) set.param_id;
80012f9c:	ee c8 00 24 	sub	r8,r7,36
80012fa0:	2f a8       	sub	r8,-6
80012fa2:	ef 48 ff f4 	st.w	r7[-12],r8
				
		for (uint16_t i = 0; i < param_set.param_count; i++) {
80012fa6:	30 08       	mov	r8,0
80012fa8:	ef 58 ff fa 	st.h	r7[-6],r8
80012fac:	c9 78       	rjmp	800130da <receive_parameter+0x182>
			bool match = true;
80012fae:	30 18       	mov	r8,1
80012fb0:	ef 68 ff fd 	st.b	r7[-3],r8
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
80012fb4:	30 08       	mov	r8,0
80012fb6:	ef 58 ff fe 	st.h	r7[-2],r8
80012fba:	c3 38       	rjmp	80013020 <receive_parameter+0xc8>
				// Compare
				if ((char)param_set.parameters[i].param_name[j] != (char)key[j]) {
80012fbc:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80012fc0:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80012fc4:	ec fb 00 28 	ld.w	r11,r6[40]
80012fc8:	12 98       	mov	r8,r9
80012fca:	a3 78       	lsl	r8,0x3
80012fcc:	12 18       	sub	r8,r9
80012fce:	a3 68       	lsl	r8,0x2
80012fd0:	f6 08 00 08 	add	r8,r11,r8
80012fd4:	14 08       	add	r8,r10
80012fd6:	2f c8       	sub	r8,-4
80012fd8:	11 89       	ld.ub	r9,r8[0x0]
80012fda:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80012fde:	ee fa ff f4 	ld.w	r10,r7[-12]
80012fe2:	f4 08 00 08 	add	r8,r10,r8
80012fe6:	11 88       	ld.ub	r8,r8[0x0]
80012fe8:	f0 09 18 00 	cp.b	r9,r8
80012fec:	c0 40       	breq	80012ff4 <receive_parameter+0x9c>
					match = false;
80012fee:	30 08       	mov	r8,0
80012ff0:	ef 68 ff fd 	st.b	r7[-3],r8
				}
		
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
80012ff4:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80012ff8:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80012ffc:	ec fb 00 28 	ld.w	r11,r6[40]
80013000:	12 98       	mov	r8,r9
80013002:	a3 78       	lsl	r8,0x3
80013004:	12 18       	sub	r8,r9
80013006:	a3 68       	lsl	r8,0x2
80013008:	f6 08 00 08 	add	r8,r11,r8
8001300c:	14 08       	add	r8,r10
8001300e:	2f c8       	sub	r8,-4
80013010:	11 88       	ld.ub	r8,r8[0x0]
80013012:	58 08       	cp.w	r8,0
80013014:	c1 80       	breq	80013044 <receive_parameter+0xec>
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
		char* key = (char*) set.param_id;
				
		for (uint16_t i = 0; i < param_set.param_count; i++) {
			bool match = true;
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
80013016:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001301a:	2f f8       	sub	r8,-1
8001301c:	ef 58 ff fe 	st.h	r7[-2],r8
80013020:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013024:	ec fa 00 28 	ld.w	r10,r6[40]
80013028:	12 98       	mov	r8,r9
8001302a:	a3 78       	lsl	r8,0x3
8001302c:	12 18       	sub	r8,r9
8001302e:	a3 68       	lsl	r8,0x2
80013030:	f4 08 00 08 	add	r8,r10,r8
80013034:	2e 88       	sub	r8,-24
80013036:	11 88       	ld.ub	r8,r8[0x0]
80013038:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8001303c:	f0 09 19 00 	cp.h	r9,r8
80013040:	cb e3       	brcs	80012fbc <receive_parameter+0x64>
80013042:	c0 28       	rjmp	80013046 <receive_parameter+0xee>
					match = false;
				}
		
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
					break;
80013044:	d7 03       	nop
				}
			}
 
			// Check if matched
			if (match) {
80013046:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8001304a:	30 08       	mov	r8,0
8001304c:	f0 09 18 00 	cp.b	r9,r8
80013050:	c4 00       	breq	800130d0 <receive_parameter+0x178>
				// Only write and emit changes if there is actually a difference
				if (*param_set.parameters[i].param != set.param_value && set.param_type == param_set.parameters[i].data_type) {
80013052:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013056:	ec fa 00 28 	ld.w	r10,r6[40]
8001305a:	12 98       	mov	r8,r9
8001305c:	a3 78       	lsl	r8,0x3
8001305e:	12 18       	sub	r8,r9
80013060:	a3 68       	lsl	r8,0x2
80013062:	f4 08 00 08 	add	r8,r10,r8
80013066:	70 08       	ld.w	r8,r8[0x0]
80013068:	70 09       	ld.w	r9,r8[0x0]
8001306a:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001306e:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80013072:	c3 e0       	breq	800130ee <receive_parameter+0x196>
80013074:	ef 38 ff f2 	ld.ub	r8,r7[-14]
80013078:	10 9a       	mov	r10,r8
8001307a:	ef 19 ff fa 	ld.uh	r9,r7[-6]
8001307e:	ec fb 00 28 	ld.w	r11,r6[40]
80013082:	12 98       	mov	r8,r9
80013084:	a3 78       	lsl	r8,0x3
80013086:	12 18       	sub	r8,r9
80013088:	a3 68       	lsl	r8,0x2
8001308a:	f6 08 00 08 	add	r8,r11,r8
8001308e:	2e c8       	sub	r8,-20
80013090:	70 08       	ld.w	r8,r8[0x0]
80013092:	10 3a       	cp.w	r10,r8
80013094:	c2 f1       	brne	800130f2 <receive_parameter+0x19a>
					*param_set.parameters[i].param = set.param_value;
80013096:	ef 19 ff fa 	ld.uh	r9,r7[-6]
8001309a:	ec fa 00 28 	ld.w	r10,r6[40]
8001309e:	12 98       	mov	r8,r9
800130a0:	a3 78       	lsl	r8,0x3
800130a2:	12 18       	sub	r8,r9
800130a4:	a3 68       	lsl	r8,0x2
800130a6:	f4 08 00 08 	add	r8,r10,r8
800130aa:	70 08       	ld.w	r8,r8[0x0]
800130ac:	ee f9 ff dc 	ld.w	r9,r7[-36]
800130b0:	91 09       	st.w	r8[0x0],r9
//					mavlink_msg_param_value_send(MAVLINK_COMM_0,
//												(int8_t*)param_set.parameters[i].param_name,
//												*param_set.parameters[i].param, param_set.parameters[i].data_type, 
//												param_set.param_count, i);
					// schedule parameter for transmission downstream
					param_set.parameters[i].schedule_for_transmission=true;
800130b2:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800130b6:	ec fa 00 28 	ld.w	r10,r6[40]
800130ba:	12 98       	mov	r8,r9
800130bc:	a3 78       	lsl	r8,0x3
800130be:	12 18       	sub	r8,r9
800130c0:	a3 68       	lsl	r8,0x2
800130c2:	f4 08 00 08 	add	r8,r10,r8
800130c6:	f0 c9 ff e8 	sub	r9,r8,-24
800130ca:	30 18       	mov	r8,1
800130cc:	b2 a8       	st.b	r9[0x2],r8
				}
				break;
800130ce:	c1 38       	rjmp	800130f4 <receive_parameter+0x19c>
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
		char* key = (char*) set.param_id;
				
		for (uint16_t i = 0; i < param_set.param_count; i++) {
800130d0:	ef 08 ff fa 	ld.sh	r8,r7[-6]
800130d4:	2f f8       	sub	r8,-1
800130d6:	ef 58 ff fa 	st.h	r7[-6],r8
800130da:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800130de:	ec f8 00 28 	ld.w	r8,r6[40]
800130e2:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800130e6:	10 39       	cp.w	r9,r8
800130e8:	fe 95 ff 63 	brlt	80012fae <receive_parameter+0x56>
800130ec:	c0 48       	rjmp	800130f4 <receive_parameter+0x19c>
//												*param_set.parameters[i].param, param_set.parameters[i].data_type, 
//												param_set.param_count, i);
					// schedule parameter for transmission downstream
					param_set.parameters[i].schedule_for_transmission=true;
				}
				break;
800130ee:	d7 03       	nop
800130f0:	c0 28       	rjmp	800130f4 <receive_parameter+0x19c>
800130f2:	d7 03       	nop
			}
		}
	}
}
800130f4:	2f 6d       	sub	sp,-40
800130f6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800130fa:	00 00       	add	r0,r0
800130fc:	80 01       	ld.sh	r1,r0[0x0]
800130fe:	2d e6       	sub	r6,-34
80013100:	46 6c       	lddsp	r12,sp[0x198]
80013102:	61 73       	ld.w	r3,r0[0x5c]
80013104:	68 20       	ld.w	r0,r4[0x8]
80013106:	72 65       	ld.w	r5,r9[0x18]
80013108:	61 64       	ld.w	r4,r0[0x58]
8001310a:	20 73       	sub	r3,7
8001310c:	75 63       	ld.w	r3,r10[0x58]
8001310e:	63 65       	ld.w	r5,r1[0x58]
80013110:	73 73       	ld.w	r3,r9[0x5c]
80013112:	66 75       	ld.w	r5,r3[0x1c]
80013114:	6c 21       	ld.w	r1,r6[0x8]
80013116:	20 4e       	sub	lr,4
80013118:	65 77       	ld.w	r7,r2[0x5c]
8001311a:	20 50       	sub	r0,5
8001311c:	61 72       	ld.w	r2,r0[0x5c]
8001311e:	61 6d       	ld.w	sp,r0[0x58]
80013120:	65 74       	ld.w	r4,r2[0x5c]
80013122:	65 72       	ld.w	r2,r2[0x5c]
80013124:	73 20       	ld.w	r0,r9[0x48]
80013126:	69 6e       	ld.w	lr,r4[0x58]
80013128:	73 65       	ld.w	r5,r9[0x58]
8001312a:	72 74       	ld.w	r4,r9[0x1c]
8001312c:	65 64       	ld.w	r4,r2[0x58]
8001312e:	2e 20       	sub	r0,-30
80013130:	0a 00       	add	r0,r5
80013132:	00 00       	add	r0,r0
80013134:	46 6c       	lddsp	r12,sp[0x198]
80013136:	61 73       	ld.w	r3,r0[0x5c]
80013138:	68 20       	ld.w	r0,r4[0x8]
8001313a:	6d 65       	ld.w	r5,r6[0x58]
8001313c:	6d 6f       	ld.w	pc,r6[0x58]
8001313e:	72 79       	ld.w	r9,r9[0x1c]
80013140:	20 63       	sub	r3,6
80013142:	6f 72       	ld.w	r2,r7[0x5c]
80013144:	72 75       	ld.w	r5,r9[0x1c]
80013146:	70 74       	ld.w	r4,r8[0x1c]
80013148:	65 64       	ld.w	r4,r2[0x58]
8001314a:	21 20       	sub	r0,18
8001314c:	48 61       	lddpc	r1,80013164 <receive_parameter+0x20c>
8001314e:	72 64       	ld.w	r4,r9[0x18]
80013150:	63 6f       	ld.w	pc,r1[0x58]
80013152:	64 65       	ld.w	r5,r2[0x18]
80013154:	64 20       	ld.w	r0,r2[0x8]
80013156:	76 61       	ld.w	r1,r11[0x18]
80013158:	6c 75       	ld.w	r5,r6[0x1c]
8001315a:	65 73       	ld.w	r3,r2[0x5c]
8001315c:	20 74       	sub	r4,7
8001315e:	61 6b       	ld.w	r11,r0[0x58]
80013160:	65 6e       	ld.w	lr,r2[0x58]
80013162:	2e 0a       	sub	r10,-32
	...

80013166 <read_parameters_from_flashc>:

void read_parameters_from_flashc()
{
80013166:	eb cd 40 c0 	pushm	r6-r7,lr
8001316a:	1a 97       	mov	r7,sp
8001316c:	fa cd 01 f8 	sub	sp,sp,504
80013170:	4d 06       	lddpc	r6,800132b0 <read_parameters_from_flashc+0x14a>
80013172:	1e 26       	rsub	r6,pc
	uint8_t i;
	nvram_array = AVR32_FLASHC_USER_PAGE_ADDRESS + 0x04;
80013174:	ec f8 01 a0 	ld.w	r8,r6[416]
80013178:	30 49       	mov	r9,4
8001317a:	ea 19 80 80 	orh	r9,0x8080
8001317e:	91 09       	st.w	r8[0x0],r9
	
	nvram_data_ttt local_array;
	
	float cksum1, cksum2;
	cksum1 = 0;
80013180:	30 08       	mov	r8,0
80013182:	ef 48 ff f8 	st.w	r7[-8],r8
	cksum2 = 0;
80013186:	30 08       	mov	r8,0
80013188:	ef 48 ff fc 	st.w	r7[-4],r8
	
	for (i=0;i<(param_set.param_count+1);i++)
8001318c:	30 08       	mov	r8,0
8001318e:	ef 68 ff f7 	st.b	r7[-9],r8
80013192:	c2 98       	rjmp	800131e4 <read_parameters_from_flashc+0x7e>
	{
		local_array.values[i] = nvram_array->values[i];
80013194:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80013198:	ec f9 01 a0 	ld.w	r9,r6[416]
8001319c:	72 09       	ld.w	r9,r9[0x0]
8001319e:	ef 3a ff f7 	ld.ub	r10,r7[-9]
800131a2:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
800131a6:	a3 68       	lsl	r8,0x2
800131a8:	ee 08 00 08 	add	r8,r7,r8
800131ac:	f1 49 fe 08 	st.w	r8[-504],r9
		cksum1 += local_array.values[i];
800131b0:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800131b4:	a3 68       	lsl	r8,0x2
800131b6:	ee 08 00 08 	add	r8,r7,r8
800131ba:	f0 f8 fe 08 	ld.w	r8,r8[-504]
800131be:	ee f9 ff f8 	ld.w	r9,r7[-8]
800131c2:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800131c6:	ef 48 ff f8 	st.w	r7[-8],r8
		cksum2 += cksum1;
800131ca:	ee f9 ff fc 	ld.w	r9,r7[-4]
800131ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800131d2:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800131d6:	ef 48 ff fc 	st.w	r7[-4],r8
	
	float cksum1, cksum2;
	cksum1 = 0;
	cksum2 = 0;
	
	for (i=0;i<(param_set.param_count+1);i++)
800131da:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800131de:	2f f8       	sub	r8,-1
800131e0:	ef 68 ff f7 	st.b	r7[-9],r8
800131e4:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800131e8:	ec f8 00 28 	ld.w	r8,r6[40]
800131ec:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800131f0:	2f f8       	sub	r8,-1
800131f2:	10 39       	cp.w	r9,r8
800131f4:	cd 05       	brlt	80013194 <read_parameters_from_flashc+0x2e>
		local_array.values[i] = nvram_array->values[i];
		cksum1 += local_array.values[i];
		cksum2 += cksum1;
	}
	
	if ((param_set.param_count==local_array.values[0])&&(cksum1 == nvram_array->values[param_set.param_count+1])&&(cksum2 == nvram_array->values[param_set.param_count+2]))
800131f6:	ec f8 00 28 	ld.w	r8,r6[40]
800131fa:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800131fe:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
80013202:	ee f8 fe 08 	ld.w	r8,r7[-504]
80013206:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001320a:	c4 b1       	brne	800132a0 <read_parameters_from_flashc+0x13a>
8001320c:	ec f8 01 a0 	ld.w	r8,r6[416]
80013210:	70 08       	ld.w	r8,r8[0x0]
80013212:	ec f9 00 28 	ld.w	r9,r6[40]
80013216:	f2 f9 0d 20 	ld.w	r9,r9[3360]
8001321a:	2f f9       	sub	r9,-1
8001321c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80013220:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013224:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80013228:	c3 c1       	brne	800132a0 <read_parameters_from_flashc+0x13a>
8001322a:	ec f8 01 a0 	ld.w	r8,r6[416]
8001322e:	70 08       	ld.w	r8,r8[0x0]
80013230:	ec f9 00 28 	ld.w	r9,r6[40]
80013234:	f2 f9 0d 20 	ld.w	r9,r9[3360]
80013238:	2f e9       	sub	r9,-2
8001323a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8001323e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013242:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80013246:	c2 d1       	brne	800132a0 <read_parameters_from_flashc+0x13a>
	{
		dbg_print("Flash read successful! New Parameters inserted. \n");
80013248:	fe cc 01 48 	sub	r12,pc,328
8001324c:	f0 16 00 01 	mcall	r6[4]
		for (i=1;i<(param_set.param_count+1);i++)
80013250:	30 18       	mov	r8,1
80013252:	ef 68 ff f7 	st.b	r7[-9],r8
80013256:	c1 b8       	rjmp	8001328c <read_parameters_from_flashc+0x126>
		{
			*param_set.parameters[i-1].param = local_array.values[i];
80013258:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8001325c:	f0 c9 00 01 	sub	r9,r8,1
80013260:	ec fa 00 28 	ld.w	r10,r6[40]
80013264:	12 98       	mov	r8,r9
80013266:	a3 78       	lsl	r8,0x3
80013268:	12 18       	sub	r8,r9
8001326a:	a3 68       	lsl	r8,0x2
8001326c:	f4 08 00 08 	add	r8,r10,r8
80013270:	70 09       	ld.w	r9,r8[0x0]
80013272:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80013276:	a3 68       	lsl	r8,0x2
80013278:	ee 08 00 08 	add	r8,r7,r8
8001327c:	f0 f8 fe 08 	ld.w	r8,r8[-504]
80013280:	93 08       	st.w	r9[0x0],r8
	}
	
	if ((param_set.param_count==local_array.values[0])&&(cksum1 == nvram_array->values[param_set.param_count+1])&&(cksum2 == nvram_array->values[param_set.param_count+2]))
	{
		dbg_print("Flash read successful! New Parameters inserted. \n");
		for (i=1;i<(param_set.param_count+1);i++)
80013282:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80013286:	2f f8       	sub	r8,-1
80013288:	ef 68 ff f7 	st.b	r7[-9],r8
8001328c:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80013290:	ec f8 00 28 	ld.w	r8,r6[40]
80013294:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013298:	2f f8       	sub	r8,-1
8001329a:	10 39       	cp.w	r9,r8
8001329c:	cd e5       	brlt	80013258 <read_parameters_from_flashc+0xf2>
		local_array.values[i] = nvram_array->values[i];
		cksum1 += local_array.values[i];
		cksum2 += cksum1;
	}
	
	if ((param_set.param_count==local_array.values[0])&&(cksum1 == nvram_array->values[param_set.param_count+1])&&(cksum2 == nvram_array->values[param_set.param_count+2]))
8001329e:	c0 58       	rjmp	800132a8 <read_parameters_from_flashc+0x142>
		for (i=1;i<(param_set.param_count+1);i++)
		{
			*param_set.parameters[i-1].param = local_array.values[i];
		}
	}else{
		dbg_print("Flash memory corrupted! Hardcoded values taken.\n");
800132a0:	fe cc 01 6c 	sub	r12,pc,364
800132a4:	f0 16 00 01 	mcall	r6[4]
	}
}
800132a8:	28 2d       	sub	sp,-504
800132aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800132ae:	00 00       	add	r0,r0
800132b0:	80 01       	ld.sh	r1,r0[0x0]
800132b2:	2f f6       	sub	r6,-1
800132b4:	42 65       	lddsp	r5,sp[0x98]
800132b6:	67 69       	ld.w	r9,r3[0x58]
800132b8:	6e 20       	ld.w	r0,r7[0x8]
800132ba:	77 72       	ld.w	r2,r11[0x5c]
800132bc:	69 74       	ld.w	r4,r4[0x5c]
800132be:	65 20       	ld.w	r0,r2[0x48]
800132c0:	74 6f       	ld.w	pc,r10[0x18]
800132c2:	20 66       	sub	r6,6
800132c4:	6c 61       	ld.w	r1,r6[0x18]
800132c6:	73 68       	ld.w	r8,r9[0x58]
800132c8:	63 2e       	ld.w	lr,r1[0x48]
800132ca:	2e 2e       	sub	lr,-30
800132cc:	0a 00       	add	r0,r5
800132ce:	00 00       	add	r0,r0
800132d0:	57 72       	stdsp	sp[0x1dc],r2
800132d2:	69 74       	ld.w	r4,r4[0x5c]
800132d4:	65 20       	ld.w	r0,r2[0x48]
800132d6:	74 6f       	ld.w	pc,r10[0x18]
800132d8:	20 66       	sub	r6,6
800132da:	61 6c       	ld.w	r12,r0[0x58]
800132dc:	73 68       	ld.w	r8,r9[0x58]
800132de:	63 20       	ld.w	r0,r1[0x48]
800132e0:	63 6f       	ld.w	pc,r1[0x58]
800132e2:	6d 70       	ld.w	r0,r6[0x5c]
800132e4:	6c 65       	ld.w	r5,r6[0x18]
800132e6:	74 65       	ld.w	r5,r10[0x18]
800132e8:	64 2e       	ld.w	lr,r2[0x8]
800132ea:	0a 00       	add	r0,r5

800132ec <write_parameters_to_flashc>:

void write_parameters_to_flashc()
{
800132ec:	eb cd 40 c0 	pushm	r6-r7,lr
800132f0:	1a 97       	mov	r7,sp
800132f2:	fa cd 01 f8 	sub	sp,sp,504
800132f6:	4c 96       	lddpc	r6,80013418 <write_parameters_to_flashc+0x12c>
800132f8:	1e 26       	rsub	r6,pc
	float cksum1, cksum2;
	cksum1 = 0;
800132fa:	30 08       	mov	r8,0
800132fc:	ef 48 ff f4 	st.w	r7[-12],r8
	cksum2 = 0;
80013300:	30 08       	mov	r8,0
80013302:	ef 48 ff f8 	st.w	r7[-8],r8

	uint8_t i;
	nvram_array = AVR32_FLASHC_USER_PAGE_ADDRESS + 0x04;
80013306:	ec f8 01 a0 	ld.w	r8,r6[416]
8001330a:	30 49       	mov	r9,4
8001330c:	ea 19 80 80 	orh	r9,0x8080
80013310:	91 09       	st.w	r8[0x0],r9
	
	nvram_data_ttt local_array;
	
	local_array.values[0] = param_set.param_count;
80013312:	ec f8 00 28 	ld.w	r8,r6[40]
80013316:	f0 f8 0d 20 	ld.w	r8,r8[3360]
8001331a:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001331e:	ef 48 fe 08 	st.w	r7[-504],r8
	cksum1 += local_array.values[0];
80013322:	ee f8 fe 08 	ld.w	r8,r7[-504]
80013326:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001332a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001332e:	ef 48 ff f4 	st.w	r7[-12],r8
	cksum2 += cksum1;
80013332:	ee f9 ff f8 	ld.w	r9,r7[-8]
80013336:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001333a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001333e:	ef 48 ff f8 	st.w	r7[-8],r8
	
	dbg_print("Begin write to flashc...\n");
80013342:	fe cc 00 8e 	sub	r12,pc,142
80013346:	f0 16 00 01 	mcall	r6[4]
	
	for (i=1;i<(param_set.param_count+1);i++)
8001334a:	30 18       	mov	r8,1
8001334c:	ef 68 ff ff 	st.b	r7[-1],r8
80013350:	c3 18       	rjmp	800133b2 <write_parameters_to_flashc+0xc6>
	{
		//flashc_memcpy((void *)&(nvram_array->values[i]),   param_set.parameters[i].param, sizeof((nvram_array->values[i])),   true);
		local_array.values[i] = *param_set.parameters[i-1].param;
80013352:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80013356:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001335a:	f0 c9 00 01 	sub	r9,r8,1
8001335e:	ec fb 00 28 	ld.w	r11,r6[40]
80013362:	12 98       	mov	r8,r9
80013364:	a3 78       	lsl	r8,0x3
80013366:	12 18       	sub	r8,r9
80013368:	a3 68       	lsl	r8,0x2
8001336a:	f6 08 00 08 	add	r8,r11,r8
8001336e:	70 08       	ld.w	r8,r8[0x0]
80013370:	70 09       	ld.w	r9,r8[0x0]
80013372:	f4 08 15 02 	lsl	r8,r10,0x2
80013376:	ee 08 00 08 	add	r8,r7,r8
8001337a:	f1 49 fe 08 	st.w	r8[-504],r9
		cksum1 += local_array.values[i];
8001337e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013382:	a3 68       	lsl	r8,0x2
80013384:	ee 08 00 08 	add	r8,r7,r8
80013388:	f0 f8 fe 08 	ld.w	r8,r8[-504]
8001338c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80013390:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80013394:	ef 48 ff f4 	st.w	r7[-12],r8
		cksum2 += cksum1;
80013398:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001339c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800133a0:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800133a4:	ef 48 ff f8 	st.w	r7[-8],r8
	cksum1 += local_array.values[0];
	cksum2 += cksum1;
	
	dbg_print("Begin write to flashc...\n");
	
	for (i=1;i<(param_set.param_count+1);i++)
800133a8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800133ac:	2f f8       	sub	r8,-1
800133ae:	ef 68 ff ff 	st.b	r7[-1],r8
800133b2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800133b6:	ec f8 00 28 	ld.w	r8,r6[40]
800133ba:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800133be:	2f f8       	sub	r8,-1
800133c0:	10 39       	cp.w	r9,r8
800133c2:	cc 85       	brlt	80013352 <write_parameters_to_flashc+0x66>
		//flashc_memcpy((void *)&(nvram_array->values[i]),   param_set.parameters[i].param, sizeof((nvram_array->values[i])),   true);
		local_array.values[i] = *param_set.parameters[i-1].param;
		cksum1 += local_array.values[i];
		cksum2 += cksum1;
	}
	local_array.values[param_set.param_count+1] = cksum1;
800133c4:	ec f8 00 28 	ld.w	r8,r6[40]
800133c8:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800133cc:	2f f8       	sub	r8,-1
800133ce:	a3 68       	lsl	r8,0x2
800133d0:	ee 08 00 08 	add	r8,r7,r8
800133d4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800133d8:	f1 49 fe 08 	st.w	r8[-504],r9
	local_array.values[param_set.param_count+2] = cksum2;
800133dc:	ec f8 00 28 	ld.w	r8,r6[40]
800133e0:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800133e4:	2f e8       	sub	r8,-2
800133e6:	a3 68       	lsl	r8,0x2
800133e8:	ee 08 00 08 	add	r8,r7,r8
800133ec:	ee f9 ff f8 	ld.w	r9,r7[-8]
800133f0:	f1 49 fe 08 	st.w	r8[-504],r9
	
	flashc_memcpy((void *)nvram_array, &local_array, sizeof(*nvram_array) ,   true);
800133f4:	ec f8 01 a0 	ld.w	r8,r6[416]
800133f8:	70 08       	ld.w	r8,r8[0x0]
800133fa:	ee cb 01 f8 	sub	r11,r7,504
800133fe:	30 19       	mov	r9,1
80013400:	e0 6a 01 ec 	mov	r10,492
80013404:	10 9c       	mov	r12,r8
80013406:	f0 16 01 63 	mcall	r6[1420]
	dbg_print("Write to falshc completed.\n");
8001340a:	fe cc 01 3a 	sub	r12,pc,314
8001340e:	f0 16 00 01 	mcall	r6[4]
80013412:	28 2d       	sub	sp,-504
80013414:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013418:	80 01       	ld.sh	r1,r0[0x0]
8001341a:	31 7c       	mov	r12,23

8001341c <clip>:
		return b;
	}
}


static float inline clip(float input_value, float clip_value) {
8001341c:	eb cd 40 80 	pushm	r7,lr
80013420:	1a 97       	mov	r7,sp
80013422:	20 2d       	sub	sp,8
80013424:	ef 4c ff fc 	st.w	r7[-4],r12
80013428:	ef 4b ff f8 	st.w	r7[-8],r11
	
	if (input_value>clip_value)  return clip_value;     
8001342c:	30 18       	mov	r8,1
8001342e:	ee fa ff fc 	ld.w	r10,r7[-4]
80013432:	ee f9 ff f8 	ld.w	r9,r7[-8]
80013436:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001343a:	e0 8c 00 04 	brvs	80013442 <clip+0x26>
8001343e:	e0 89 00 03 	brgt	80013444 <clip+0x28>
80013442:	30 08       	mov	r8,0
80013444:	5c 58       	castu.b	r8
80013446:	c0 40       	breq	8001344e <clip+0x32>
80013448:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001344c:	c1 98       	rjmp	8001347e <clip+0x62>
	if (input_value<-clip_value) return -clip_value; 
8001344e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013452:	10 9a       	mov	r10,r8
80013454:	ee 1a 80 00 	eorh	r10,0x8000
80013458:	30 18       	mov	r8,1
8001345a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001345e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80013462:	e0 8c 00 04 	brvs	8001346a <clip+0x4e>
80013466:	e0 89 00 03 	brgt	8001346c <clip+0x50>
8001346a:	30 08       	mov	r8,0
8001346c:	5c 58       	castu.b	r8
8001346e:	c0 60       	breq	8001347a <clip+0x5e>
80013470:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013474:	ee 18 80 00 	eorh	r8,0x8000
80013478:	c0 38       	rjmp	8001347e <clip+0x62>
	return input_value;
8001347a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001347e:	10 9c       	mov	r12,r8
80013480:	2f ed       	sub	sp,-8
80013482:	e3 cd 80 80 	ldm	sp++,r7,pc

80013486 <soft_zone>:


static float inline soft_zone(float x, float soft_zone_width) {
80013486:	eb cd 40 e0 	pushm	r5-r7,lr
8001348a:	1a 97       	mov	r7,sp
8001348c:	20 2d       	sub	sp,8
8001348e:	4a 16       	lddpc	r6,80013510 <soft_zone+0x8a>
80013490:	1e 26       	rsub	r6,pc
80013492:	ef 4c ff fc 	st.w	r7[-4],r12
80013496:	ef 4b ff f8 	st.w	r7[-8],r11
	if (soft_zone_width<0.0000001) return x; 
8001349a:	ee fc ff f8 	ld.w	r12,r7[-8]
8001349e:	f0 16 00 02 	mcall	r6[8]
800134a2:	30 05       	mov	r5,0
800134a4:	e0 68 af 48 	mov	r8,44872
800134a8:	ea 18 9a bc 	orh	r8,0x9abc
800134ac:	e0 69 d7 f2 	mov	r9,55282
800134b0:	ea 19 3e 7a 	orh	r9,0x3e7a
800134b4:	f0 16 00 1c 	mcall	r6[112]
800134b8:	18 98       	mov	r8,r12
800134ba:	58 08       	cp.w	r8,0
800134bc:	c0 20       	breq	800134c0 <soft_zone+0x3a>
800134be:	30 15       	mov	r5,1
800134c0:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
800134c4:	c0 40       	breq	800134cc <soft_zone+0x46>
800134c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800134ca:	c1 e8       	rjmp	80013506 <soft_zone+0x80>
	else {
		return (x*x*x/(SQR(soft_zone_width) + SQR(x)));
800134cc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800134d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800134d4:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800134d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800134dc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800134e0:	ee fa ff f8 	ld.w	r10,r7[-8]
800134e4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800134e8:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800134ec:	ee fb ff fc 	ld.w	r11,r7[-4]
800134f0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800134f4:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800134f8:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800134fc:	12 9b       	mov	r11,r9
800134fe:	10 9c       	mov	r12,r8
80013500:	f0 16 00 08 	mcall	r6[32]
80013504:	18 98       	mov	r8,r12
	}
};
80013506:	10 9c       	mov	r12,r8
80013508:	2f ed       	sub	sp,-8
8001350a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001350e:	00 00       	add	r0,r0
80013510:	80 01       	ld.sh	r1,r0[0x0]
80013512:	33 14       	mov	r4,49

80013514 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80013514:	eb cd 40 c0 	pushm	r6-r7,lr
80013518:	1a 97       	mov	r7,sp
8001351a:	20 6d       	sub	sp,24
8001351c:	49 e6       	lddpc	r6,80013594 <interpolate+0x80>
8001351e:	1e 26       	rsub	r6,pc
80013520:	ef 4c ff f8 	st.w	r7[-8],r12
80013524:	ef 4b ff f4 	st.w	r7[-12],r11
80013528:	ef 4a ff f0 	st.w	r7[-16],r10
8001352c:	ef 49 ff ec 	st.w	r7[-20],r9
80013530:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80013534:	ee f9 ff f4 	ld.w	r9,r7[-12]
80013538:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001353c:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80013540:	c0 41       	brne	80013548 <interpolate+0x34>
	{
		return y1;
80013542:	ee f8 ff ec 	ld.w	r8,r7[-20]
80013546:	c2 38       	rjmp	8001358c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80013548:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001354c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80013550:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80013554:	ee fa ff f8 	ld.w	r10,r7[-8]
80013558:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001355c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80013560:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80013564:	ee fa ff f0 	ld.w	r10,r7[-16]
80013568:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001356c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80013570:	12 9b       	mov	r11,r9
80013572:	10 9c       	mov	r12,r8
80013574:	f0 16 00 08 	mcall	r6[32]
80013578:	18 98       	mov	r8,r12
8001357a:	10 99       	mov	r9,r8
8001357c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80013580:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80013584:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80013588:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8001358c:	10 9c       	mov	r12,r8
8001358e:	2f ad       	sub	sp,-24
80013590:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013594:	80 01       	ld.sh	r1,r0[0x0]
80013596:	33 a2       	mov	r2,58

80013598 <passthroughController>:
#include "time_keeper.h"

#include "control.h"
#include "maths.h"

PID_Controller_t passthroughController() {
80013598:	eb cd 40 e0 	pushm	r5-r7,lr
8001359c:	1a 97       	mov	r7,sp
8001359e:	21 1d       	sub	sp,68
800135a0:	49 e6       	lddpc	r6,80013618 <passthroughController+0x80>
800135a2:	1e 26       	rsub	r6,pc
800135a4:	18 95       	mov	r5,r12
	PID_Controller_t out;
	out.p_gain=1.0;
800135a6:	fc 18 3f 80 	movh	r8,0x3f80
800135aa:	ef 48 ff bc 	st.w	r7[-68],r8
	out.last_update=get_time_ticks();	
800135ae:	f0 16 00 2d 	mcall	r6[180]
800135b2:	18 98       	mov	r8,r12
800135b4:	ef 48 ff f4 	st.w	r7[-12],r8
	out.clip_min=-10000.0;
800135b8:	e0 68 40 00 	mov	r8,16384
800135bc:	ea 18 c6 1c 	orh	r8,0xc61c
800135c0:	ef 48 ff c0 	st.w	r7[-64],r8
	out.clip_max= 10000.0;
800135c4:	e0 68 40 00 	mov	r8,16384
800135c8:	ea 18 46 1c 	orh	r8,0x461c
800135cc:	ef 48 ff c4 	st.w	r7[-60],r8
	out.output=0.0;
800135d0:	30 08       	mov	r8,0
800135d2:	ef 48 ff ec 	st.w	r7[-20],r8
	out.soft_zone_width=0.0;
800135d6:	30 08       	mov	r8,0
800135d8:	ef 48 ff fc 	st.w	r7[-4],r8
	initDiff(&(out.differentiator), 0.0, 0.0, 0.0);
800135dc:	ee c8 00 44 	sub	r8,r7,68
800135e0:	2e 08       	sub	r8,-32
800135e2:	30 09       	mov	r9,0
800135e4:	30 0a       	mov	r10,0
800135e6:	30 0b       	mov	r11,0
800135e8:	10 9c       	mov	r12,r8
800135ea:	f0 16 00 51 	mcall	r6[324]
	initInt(&(out.integrator), 0.0, 0.0, 0.0);
800135ee:	ee c8 00 44 	sub	r8,r7,68
800135f2:	2f 48       	sub	r8,-12
800135f4:	30 09       	mov	r9,0
800135f6:	30 0a       	mov	r10,0
800135f8:	30 0b       	mov	r11,0
800135fa:	10 9c       	mov	r12,r8
800135fc:	f0 16 00 53 	mcall	r6[332]
	return out;
80013600:	0a 98       	mov	r8,r5
80013602:	ee c9 00 44 	sub	r9,r7,68
80013606:	34 4a       	mov	r10,68
80013608:	12 9b       	mov	r11,r9
8001360a:	10 9c       	mov	r12,r8
8001360c:	f0 16 00 1b 	mcall	r6[108]
}
80013610:	0a 9c       	mov	r12,r5
80013612:	2e fd       	sub	sp,-68
80013614:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013618:	80 01       	ld.sh	r1,r0[0x0]
8001361a:	34 26       	mov	r6,66

8001361c <integrate>:




float integrate(Integrator_t *integrator, float input, float dt) {
8001361c:	eb cd 40 c0 	pushm	r6-r7,lr
80013620:	1a 97       	mov	r7,sp
80013622:	20 3d       	sub	sp,12
80013624:	49 76       	lddpc	r6,80013680 <integrate+0x64>
80013626:	1e 26       	rsub	r6,pc
80013628:	ef 4c ff fc 	st.w	r7[-4],r12
8001362c:	ef 4b ff f8 	st.w	r7[-8],r11
80013630:	ef 4a ff f4 	st.w	r7[-12],r10

	integrator->accumulator=clip(integrator->accumulator+dt* integrator->pregain * input, integrator->clip);
80013634:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013638:	70 39       	ld.w	r9,r8[0xc]
8001363a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001363e:	70 2a       	ld.w	r10,r8[0x8]
80013640:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013644:	70 0b       	ld.w	r11,r8[0x0]
80013646:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001364a:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8001364e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013652:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80013656:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
8001365a:	12 9b       	mov	r11,r9
8001365c:	10 9c       	mov	r12,r8
8001365e:	cd fe       	rcall	8001341c <clip>
80013660:	18 99       	mov	r9,r12
80013662:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013666:	91 29       	st.w	r8[0x8],r9
	return integrator->postgain* integrator->accumulator;
80013668:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001366c:	70 19       	ld.w	r9,r8[0x4]
8001366e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013672:	70 28       	ld.w	r8,r8[0x8]
80013674:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44

}
80013678:	10 9c       	mov	r12,r8
8001367a:	2f dd       	sub	sp,-12
8001367c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013680:	80 01       	ld.sh	r1,r0[0x0]
80013682:	34 aa       	mov	r10,74

80013684 <initInt>:




void initInt(Integrator_t *integrator, float pregain, float postgain, float clip_val) {
80013684:	eb cd 40 80 	pushm	r7,lr
80013688:	1a 97       	mov	r7,sp
8001368a:	20 4d       	sub	sp,16
8001368c:	ef 4c ff fc 	st.w	r7[-4],r12
80013690:	ef 4b ff f8 	st.w	r7[-8],r11
80013694:	ef 4a ff f4 	st.w	r7[-12],r10
80013698:	ef 49 ff f0 	st.w	r7[-16],r9
	integrator->pregain=pregain;
8001369c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800136a0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800136a4:	91 09       	st.w	r8[0x0],r9
	integrator->postgain=postgain;
800136a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800136aa:	ee f9 ff f4 	ld.w	r9,r7[-12]
800136ae:	91 19       	st.w	r8[0x4],r9
	integrator->clip=clip_val;
800136b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800136b4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800136b8:	91 39       	st.w	r8[0xc],r9
	integrator->accumulator=0.0;
800136ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800136be:	30 09       	mov	r9,0
800136c0:	91 29       	st.w	r8[0x8],r9

}
800136c2:	2f cd       	sub	sp,-16
800136c4:	e3 cd 80 80 	ldm	sp++,r7,pc

800136c8 <resetInt>:
void resetInt(Integrator_t *integrator) {
800136c8:	eb cd 40 80 	pushm	r7,lr
800136cc:	1a 97       	mov	r7,sp
800136ce:	20 1d       	sub	sp,4
800136d0:	ef 4c ff fc 	st.w	r7[-4],r12
	integrator->accumulator=0.0;
800136d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800136d8:	30 09       	mov	r9,0
800136da:	91 29       	st.w	r8[0x8],r9
}
800136dc:	2f fd       	sub	sp,-4
800136de:	e3 cd 80 80 	ldm	sp++,r7,pc

800136e2 <initDiff>:

void initDiff(Differentiator_t *diff, float gain, float LPF, float clip_val) {
800136e2:	eb cd 40 80 	pushm	r7,lr
800136e6:	1a 97       	mov	r7,sp
800136e8:	20 4d       	sub	sp,16
800136ea:	ef 4c ff fc 	st.w	r7[-4],r12
800136ee:	ef 4b ff f8 	st.w	r7[-8],r11
800136f2:	ef 4a ff f4 	st.w	r7[-12],r10
800136f6:	ef 49 ff f0 	st.w	r7[-16],r9
	diff->gain=gain;
800136fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800136fe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80013702:	91 09       	st.w	r8[0x0],r9
	diff->LPF=LPF;
80013704:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013708:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001370c:	91 29       	st.w	r8[0x8],r9
	diff->clip=clip_val;
8001370e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013712:	ee f9 ff f0 	ld.w	r9,r7[-16]
80013716:	91 39       	st.w	r8[0xc],r9
}
80013718:	2f cd       	sub	sp,-16
8001371a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001371e <differentiate>:

float differentiate(Differentiator_t *diff, float input, float dt) {
8001371e:	eb cd 40 e0 	pushm	r5-r7,lr
80013722:	1a 97       	mov	r7,sp
80013724:	20 4d       	sub	sp,16
80013726:	4a 66       	lddpc	r6,800137bc <differentiate+0x9e>
80013728:	1e 26       	rsub	r6,pc
8001372a:	ef 4c ff f8 	st.w	r7[-8],r12
8001372e:	ef 4b ff f4 	st.w	r7[-12],r11
80013732:	ef 4a ff f0 	st.w	r7[-16],r10
	float output=0.0;
80013736:	30 08       	mov	r8,0
80013738:	ef 48 ff fc 	st.w	r7[-4],r8
	if (dt<0.000001) {
8001373c:	ee fc ff f0 	ld.w	r12,r7[-16]
80013740:	f0 16 00 02 	mcall	r6[8]
80013744:	30 05       	mov	r5,0
80013746:	e0 68 ed 8d 	mov	r8,60813
8001374a:	ea 18 a0 b5 	orh	r8,0xa0b5
8001374e:	e0 69 c6 f7 	mov	r9,50935
80013752:	ea 19 3e b0 	orh	r9,0x3eb0
80013756:	f0 16 00 1c 	mcall	r6[112]
8001375a:	18 98       	mov	r8,r12
8001375c:	58 08       	cp.w	r8,0
8001375e:	c0 20       	breq	80013762 <differentiate+0x44>
80013760:	30 15       	mov	r5,1
80013762:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80013766:	c0 50       	breq	80013770 <differentiate+0x52>
		output=0.0; 
80013768:	30 08       	mov	r8,0
8001376a:	ef 48 ff fc 	st.w	r7[-4],r8
8001376e:	c1 c8       	rjmp	800137a6 <differentiate+0x88>
	} else {
		output=clip(diff->gain*(input - diff->previous)/dt, diff->clip);
80013770:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013774:	70 35       	ld.w	r5,r8[0xc]
80013776:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001377a:	70 09       	ld.w	r9,r8[0x0]
8001377c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013780:	70 18       	ld.w	r8,r8[0x4]
80013782:	ee fa ff f4 	ld.w	r10,r7[-12]
80013786:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001378a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001378e:	ee fb ff f0 	ld.w	r11,r7[-16]
80013792:	10 9c       	mov	r12,r8
80013794:	f0 16 00 08 	mcall	r6[32]
80013798:	18 98       	mov	r8,r12
8001379a:	0a 9b       	mov	r11,r5
8001379c:	10 9c       	mov	r12,r8
8001379e:	c3 fe       	rcall	8001341c <clip>
800137a0:	18 98       	mov	r8,r12
800137a2:	ef 48 ff fc 	st.w	r7[-4],r8
	}	
	//diff->previous=(1.0-(diff->LPF))*input + (diff->LPF) * (diff->previous);
	diff->previous=input;
800137a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800137aa:	ee f9 ff f4 	ld.w	r9,r7[-12]
800137ae:	91 19       	st.w	r8[0x4],r9
	return output;
800137b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800137b4:	10 9c       	mov	r12,r8
800137b6:	2f cd       	sub	sp,-16
800137b8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800137bc:	80 01       	ld.sh	r1,r0[0x0]
800137be:	35 ac       	mov	r12,90

800137c0 <pid_update>:

float pid_update(PID_Controller_t* controller, float error) {
800137c0:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800137c4:	1a 97       	mov	r7,sp
800137c6:	20 3d       	sub	sp,12
800137c8:	4c 36       	lddpc	r6,800138d4 <pid_update+0x114>
800137ca:	1e 26       	rsub	r6,pc
800137cc:	ef 4c ff f8 	st.w	r7[-8],r12
800137d0:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t t= get_time_ticks();
800137d4:	f0 16 00 2d 	mcall	r6[180]
800137d8:	18 98       	mov	r8,r12
800137da:	ef 48 ff fc 	st.w	r7[-4],r8
	controller->error=soft_zone(error, controller->soft_zone_width);
800137de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800137e2:	71 08       	ld.w	r8,r8[0x40]
800137e4:	10 9b       	mov	r11,r8
800137e6:	ee fc ff f4 	ld.w	r12,r7[-12]
800137ea:	c4 ee       	rcall	80013486 <soft_zone>
800137ec:	18 99       	mov	r9,r12
800137ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800137f2:	91 d9       	st.w	r8[0x34],r9
	controller->dt=ticks_to_seconds(t - controller->last_update);
800137f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800137f8:	70 e8       	ld.w	r8,r8[0x38]
800137fa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800137fe:	f2 08 01 08 	sub	r8,r9,r8
80013802:	10 9c       	mov	r12,r8
80013804:	f0 16 00 c1 	mcall	r6[772]
80013808:	18 99       	mov	r9,r12
8001380a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001380e:	91 f9       	st.w	r8[0x3c],r9
	controller->last_update=t;
80013810:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013814:	ee f9 ff fc 	ld.w	r9,r7[-4]
80013818:	91 e9       	st.w	r8[0x38],r9
	
	controller->output = controller->p_gain* (controller->error +integrate(&controller->integrator, controller->error, controller->dt) + differentiate(&controller->differentiator, controller->error, controller->dt));
8001381a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001381e:	70 05       	ld.w	r5,r8[0x0]
80013820:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013824:	70 d3       	ld.w	r3,r8[0x34]
80013826:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001382a:	70 fa       	ld.w	r10,r8[0x3c]
8001382c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013830:	70 d9       	ld.w	r9,r8[0x34]
80013832:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013836:	2f 48       	sub	r8,-12
80013838:	12 9b       	mov	r11,r9
8001383a:	10 9c       	mov	r12,r8
8001383c:	f0 16 00 e4 	mcall	r6[912]
80013840:	18 98       	mov	r8,r12
80013842:	e5 a0 03 38 	cop	cp0,cr3,cr3,cr8,0x40
80013846:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001384a:	70 fa       	ld.w	r10,r8[0x3c]
8001384c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013850:	70 d9       	ld.w	r9,r8[0x34]
80013852:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013856:	2e 08       	sub	r8,-32
80013858:	12 9b       	mov	r11,r9
8001385a:	10 9c       	mov	r12,r8
8001385c:	f0 16 01 12 	mcall	r6[1096]
80013860:	18 98       	mov	r8,r12
80013862:	e5 a0 08 38 	cop	cp0,cr8,cr3,cr8,0x40
80013866:	e5 a2 09 58 	cop	cp0,cr9,cr5,cr8,0x44
8001386a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001386e:	91 c9       	st.w	r8[0x30],r9
	if (controller->output < controller->clip_min) controller->output=controller->clip_min;
80013870:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013874:	70 ca       	ld.w	r10,r8[0x30]
80013876:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001387a:	70 19       	ld.w	r9,r8[0x4]
8001387c:	30 18       	mov	r8,1
8001387e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80013882:	e0 8c 00 03 	brvs	80013888 <pid_update+0xc8>
80013886:	c0 25       	brlt	8001388a <pid_update+0xca>
80013888:	30 08       	mov	r8,0
8001388a:	5c 58       	castu.b	r8
8001388c:	c0 70       	breq	8001389a <pid_update+0xda>
8001388e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013892:	70 19       	ld.w	r9,r8[0x4]
80013894:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013898:	91 c9       	st.w	r8[0x30],r9
	if (controller->output > controller->clip_max) controller->output=controller->clip_max;
8001389a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001389e:	70 ca       	ld.w	r10,r8[0x30]
800138a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800138a4:	70 29       	ld.w	r9,r8[0x8]
800138a6:	30 18       	mov	r8,1
800138a8:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800138ac:	e0 8c 00 04 	brvs	800138b4 <pid_update+0xf4>
800138b0:	e0 89 00 03 	brgt	800138b6 <pid_update+0xf6>
800138b4:	30 08       	mov	r8,0
800138b6:	5c 58       	castu.b	r8
800138b8:	c0 70       	breq	800138c6 <pid_update+0x106>
800138ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800138be:	70 29       	ld.w	r9,r8[0x8]
800138c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800138c4:	91 c9       	st.w	r8[0x30],r9
	return controller->output;	
800138c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800138ca:	70 c8       	ld.w	r8,r8[0x30]
}
800138cc:	10 9c       	mov	r12,r8
800138ce:	2f dd       	sub	sp,-12
800138d0:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800138d4:	80 01       	ld.sh	r1,r0[0x0]
800138d6:	36 4e       	mov	lr,100

800138d8 <pid_update_dt>:

float pid_update_dt(PID_Controller_t* controller, float error, float dt) {
800138d8:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800138dc:	1a 97       	mov	r7,sp
800138de:	20 3d       	sub	sp,12
800138e0:	4b b6       	lddpc	r6,800139cc <pid_update_dt+0xf4>
800138e2:	1e 26       	rsub	r6,pc
800138e4:	ef 4c ff fc 	st.w	r7[-4],r12
800138e8:	ef 4b ff f8 	st.w	r7[-8],r11
800138ec:	ef 4a ff f4 	st.w	r7[-12],r10
	controller->error=error;
800138f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800138f4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800138f8:	91 d9       	st.w	r8[0x34],r9
	controller->dt=dt;
800138fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800138fe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80013902:	91 f9       	st.w	r8[0x3c],r9
	controller->last_update=get_time_ticks();
80013904:	f0 16 00 2d 	mcall	r6[180]
80013908:	18 99       	mov	r9,r12
8001390a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001390e:	91 e9       	st.w	r8[0x38],r9
	
	controller->output = controller->p_gain* (controller->error +integrate(&controller->integrator, controller->error, controller->dt) + differentiate(&controller->differentiator, controller->error, controller->dt));
80013910:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013914:	70 05       	ld.w	r5,r8[0x0]
80013916:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001391a:	70 d3       	ld.w	r3,r8[0x34]
8001391c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013920:	70 fa       	ld.w	r10,r8[0x3c]
80013922:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013926:	70 d9       	ld.w	r9,r8[0x34]
80013928:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001392c:	2f 48       	sub	r8,-12
8001392e:	12 9b       	mov	r11,r9
80013930:	10 9c       	mov	r12,r8
80013932:	f0 16 00 e4 	mcall	r6[912]
80013936:	18 98       	mov	r8,r12
80013938:	e5 a0 03 38 	cop	cp0,cr3,cr3,cr8,0x40
8001393c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013940:	70 fa       	ld.w	r10,r8[0x3c]
80013942:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013946:	70 d9       	ld.w	r9,r8[0x34]
80013948:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001394c:	2e 08       	sub	r8,-32
8001394e:	12 9b       	mov	r11,r9
80013950:	10 9c       	mov	r12,r8
80013952:	f0 16 01 12 	mcall	r6[1096]
80013956:	18 98       	mov	r8,r12
80013958:	e5 a0 08 38 	cop	cp0,cr8,cr3,cr8,0x40
8001395c:	e5 a2 09 58 	cop	cp0,cr9,cr5,cr8,0x44
80013960:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013964:	91 c9       	st.w	r8[0x30],r9
	if (controller->output < controller->clip_min) controller->output=controller->clip_min;
80013966:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001396a:	70 ca       	ld.w	r10,r8[0x30]
8001396c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013970:	70 19       	ld.w	r9,r8[0x4]
80013972:	30 18       	mov	r8,1
80013974:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80013978:	e0 8c 00 03 	brvs	8001397e <pid_update_dt+0xa6>
8001397c:	c0 25       	brlt	80013980 <pid_update_dt+0xa8>
8001397e:	30 08       	mov	r8,0
80013980:	5c 58       	castu.b	r8
80013982:	c0 70       	breq	80013990 <pid_update_dt+0xb8>
80013984:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013988:	70 19       	ld.w	r9,r8[0x4]
8001398a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001398e:	91 c9       	st.w	r8[0x30],r9
	if (controller->output > controller->clip_max) controller->output=controller->clip_max;
80013990:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013994:	70 ca       	ld.w	r10,r8[0x30]
80013996:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001399a:	70 29       	ld.w	r9,r8[0x8]
8001399c:	30 18       	mov	r8,1
8001399e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800139a2:	e0 8c 00 04 	brvs	800139aa <pid_update_dt+0xd2>
800139a6:	e0 89 00 03 	brgt	800139ac <pid_update_dt+0xd4>
800139aa:	30 08       	mov	r8,0
800139ac:	5c 58       	castu.b	r8
800139ae:	c0 70       	breq	800139bc <pid_update_dt+0xe4>
800139b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800139b4:	70 29       	ld.w	r9,r8[0x8]
800139b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800139ba:	91 c9       	st.w	r8[0x30],r9
	return controller->output;	
800139bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800139c0:	70 c8       	ld.w	r8,r8[0x30]
}
800139c2:	10 9c       	mov	r12,r8
800139c4:	2f dd       	sub	sp,-12
800139c6:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800139ca:	00 00       	add	r0,r0
800139cc:	80 01       	ld.sh	r1,r0[0x0]
800139ce:	37 66       	mov	r6,118

800139d0 <quat_from_vector>:
	out.v[2] = -q.v[2];

#define QUAT(q, s, v0, v1, v2) \
	q.s=s; q.v[0]=v0; q.v[1]=v1; q.v[2]=v2;

UQuat_t static inline quat_from_vector(float *v) {
800139d0:	eb cd 40 80 	pushm	r7,lr
800139d4:	1a 97       	mov	r7,sp
800139d6:	20 5d       	sub	sp,20
800139d8:	18 9a       	mov	r10,r12
800139da:	ef 4b ff ec 	st.w	r7[-20],r11
	UQuat_t q;	
	q.s=0; 
800139de:	30 08       	mov	r8,0
800139e0:	ef 48 ff f0 	st.w	r7[-16],r8
	q.v[0]=v[0]; 
800139e4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800139e8:	70 08       	ld.w	r8,r8[0x0]
800139ea:	ef 48 ff f4 	st.w	r7[-12],r8
	q.v[1]=v[1]; 
800139ee:	ee f8 ff ec 	ld.w	r8,r7[-20]
800139f2:	2f c8       	sub	r8,-4
800139f4:	70 08       	ld.w	r8,r8[0x0]
800139f6:	ef 48 ff f8 	st.w	r7[-8],r8
	q.v[2]=v[2];
800139fa:	ee f8 ff ec 	ld.w	r8,r7[-20]
800139fe:	2f 88       	sub	r8,-8
80013a00:	70 08       	ld.w	r8,r8[0x0]
80013a02:	ef 48 ff fc 	st.w	r7[-4],r8
	return q;
80013a06:	14 98       	mov	r8,r10
80013a08:	ee c9 00 10 	sub	r9,r7,16
80013a0c:	20 08       	sub	r8,0
80013a0e:	20 09       	sub	r9,0
80013a10:	72 0b       	ld.w	r11,r9[0x0]
80013a12:	91 0b       	st.w	r8[0x0],r11
80013a14:	72 1b       	ld.w	r11,r9[0x4]
80013a16:	91 1b       	st.w	r8[0x4],r11
80013a18:	72 2b       	ld.w	r11,r9[0x8]
80013a1a:	91 2b       	st.w	r8[0x8],r11
80013a1c:	72 39       	ld.w	r9,r9[0xc]
80013a1e:	91 39       	st.w	r8[0xc],r9
}
80013a20:	14 9c       	mov	r12,r10
80013a22:	2f bd       	sub	sp,-20
80013a24:	e3 cd 80 80 	ldm	sp++,r7,pc

80013a28 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
80013a28:	eb cd 40 80 	pushm	r7,lr
80013a2c:	1a 97       	mov	r7,sp
80013a2e:	20 3d       	sub	sp,12
80013a30:	ef 4c ff f8 	st.w	r7[-8],r12
80013a34:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
80013a38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013a3c:	70 09       	ld.w	r9,r8[0x0]
80013a3e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013a42:	70 08       	ld.w	r8,r8[0x0]
80013a44:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80013a48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013a4c:	2f c8       	sub	r8,-4
80013a4e:	70 0a       	ld.w	r10,r8[0x0]
80013a50:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013a54:	2f c8       	sub	r8,-4
80013a56:	70 08       	ld.w	r8,r8[0x0]
80013a58:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80013a5c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80013a60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013a64:	2f 88       	sub	r8,-8
80013a66:	70 0a       	ld.w	r10,r8[0x0]
80013a68:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013a6c:	2f 88       	sub	r8,-8
80013a6e:	70 08       	ld.w	r8,r8[0x0]
80013a70:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80013a74:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80013a78:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
80013a7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80013a80:	10 9c       	mov	r12,r8
80013a82:	2f dd       	sub	sp,-12
80013a84:	e3 cd 80 80 	ldm	sp++,r7,pc

80013a88 <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
80013a88:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80013a8c:	1a 97       	mov	r7,sp
80013a8e:	20 7d       	sub	sp,28
80013a90:	4b d6       	lddpc	r6,80013b84 <quat_multi+0xfc>
80013a92:	1e 26       	rsub	r6,pc
80013a94:	ee c8 ff ec 	sub	r8,r7,-20
80013a98:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
80013a9a:	70 2a       	ld.w	r10,r8[0x8]
80013a9c:	70 79       	ld.w	r9,r8[0x1c]
80013a9e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80013aa2:	70 3b       	ld.w	r11,r8[0xc]
80013aa4:	70 69       	ld.w	r9,r8[0x18]
80013aa6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80013aaa:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80013aae:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
80013ab2:	70 3a       	ld.w	r10,r8[0xc]
80013ab4:	70 59       	ld.w	r9,r8[0x14]
80013ab6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80013aba:	70 1b       	ld.w	r11,r8[0x4]
80013abc:	70 79       	ld.w	r9,r8[0x1c]
80013abe:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80013ac2:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80013ac6:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
80013aca:	70 1a       	ld.w	r10,r8[0x4]
80013acc:	70 69       	ld.w	r9,r8[0x18]
80013ace:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80013ad2:	70 2b       	ld.w	r11,r8[0x8]
80013ad4:	70 59       	ld.w	r9,r8[0x14]
80013ad6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80013ada:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80013ade:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
80013ae2:	70 4a       	ld.w	r10,r8[0x10]
80013ae4:	70 19       	ld.w	r9,r8[0x4]
80013ae6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80013aea:	70 0b       	ld.w	r11,r8[0x0]
80013aec:	70 59       	ld.w	r9,r8[0x14]
80013aee:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80013af2:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80013af6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80013afa:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80013afe:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
80013b02:	70 4a       	ld.w	r10,r8[0x10]
80013b04:	70 29       	ld.w	r9,r8[0x8]
80013b06:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80013b0a:	70 0b       	ld.w	r11,r8[0x0]
80013b0c:	70 69       	ld.w	r9,r8[0x18]
80013b0e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80013b12:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80013b16:	ee f9 ff f8 	ld.w	r9,r7[-8]
80013b1a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80013b1e:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
80013b22:	70 4a       	ld.w	r10,r8[0x10]
80013b24:	70 39       	ld.w	r9,r8[0xc]
80013b26:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80013b2a:	70 0b       	ld.w	r11,r8[0x0]
80013b2c:	70 79       	ld.w	r9,r8[0x1c]
80013b2e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80013b32:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80013b36:	ee f9 ff fc 	ld.w	r9,r7[-4]
80013b3a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80013b3e:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
80013b42:	70 0a       	ld.w	r10,r8[0x0]
80013b44:	70 49       	ld.w	r9,r8[0x10]
80013b46:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
80013b4a:	f0 c9 ff f0 	sub	r9,r8,-16
80013b4e:	2f c9       	sub	r9,-4
80013b50:	2f c8       	sub	r8,-4
80013b52:	12 9b       	mov	r11,r9
80013b54:	10 9c       	mov	r12,r8
80013b56:	c6 9f       	rcall	80013a28 <scalar_product>
80013b58:	18 98       	mov	r8,r12
80013b5a:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
80013b5e:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
80013b62:	0a 98       	mov	r8,r5
80013b64:	ee c9 00 1c 	sub	r9,r7,28
80013b68:	20 08       	sub	r8,0
80013b6a:	20 09       	sub	r9,0
80013b6c:	72 0a       	ld.w	r10,r9[0x0]
80013b6e:	91 0a       	st.w	r8[0x0],r10
80013b70:	72 1a       	ld.w	r10,r9[0x4]
80013b72:	91 1a       	st.w	r8[0x4],r10
80013b74:	72 2a       	ld.w	r10,r9[0x8]
80013b76:	91 2a       	st.w	r8[0x8],r10
80013b78:	72 39       	ld.w	r9,r9[0xc]
80013b7a:	91 39       	st.w	r8[0xc],r9
}
80013b7c:	0a 9c       	mov	r12,r5
80013b7e:	2f 9d       	sub	sp,-28
80013b80:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80013b84:	80 01       	ld.sh	r1,r0[0x0]
80013b86:	39 16       	mov	r6,-111

80013b88 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
80013b88:	eb cd 40 80 	pushm	r7,lr
80013b8c:	1a 97       	mov	r7,sp
80013b8e:	20 5d       	sub	sp,20
80013b90:	ee c9 ff f8 	sub	r9,r7,-8
80013b94:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
80013b96:	72 08       	ld.w	r8,r9[0x0]
80013b98:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
80013b9c:	30 08       	mov	r8,0
80013b9e:	ef 48 ff fc 	st.w	r7[-4],r8
80013ba2:	c1 58       	rjmp	80013bcc <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
80013ba4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013ba8:	ee fb ff fc 	ld.w	r11,r7[-4]
80013bac:	2f fb       	sub	r11,-1
80013bae:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
80013bb2:	ee 1b 80 00 	eorh	r11,0x8000
80013bb6:	2f f8       	sub	r8,-1
80013bb8:	a3 68       	lsl	r8,0x2
80013bba:	ee 08 00 08 	add	r8,r7,r8
80013bbe:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
80013bc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013bc6:	2f f8       	sub	r8,-1
80013bc8:	ef 48 ff fc 	st.w	r7[-4],r8
80013bcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013bd0:	58 28       	cp.w	r8,2
80013bd2:	fe 9a ff e9 	brle	80013ba4 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
80013bd6:	14 98       	mov	r8,r10
80013bd8:	ee c9 00 14 	sub	r9,r7,20
80013bdc:	20 08       	sub	r8,0
80013bde:	20 09       	sub	r9,0
80013be0:	72 0b       	ld.w	r11,r9[0x0]
80013be2:	91 0b       	st.w	r8[0x0],r11
80013be4:	72 1b       	ld.w	r11,r9[0x4]
80013be6:	91 1b       	st.w	r8[0x4],r11
80013be8:	72 2b       	ld.w	r11,r9[0x8]
80013bea:	91 2b       	st.w	r8[0x8],r11
80013bec:	72 39       	ld.w	r9,r9[0xc]
80013bee:	91 39       	st.w	r8[0xc],r9
}
80013bf0:	14 9c       	mov	r12,r10
80013bf2:	2f bd       	sub	sp,-20
80013bf4:	e3 cd 80 80 	ldm	sp++,r7,pc

80013bf8 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
80013bf8:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80013bfc:	1a 97       	mov	r7,sp
80013bfe:	20 cd       	sub	sp,48
80013c00:	4b c6       	lddpc	r6,80013cf0 <quat_global_to_local+0xf8>
80013c02:	1e 26       	rsub	r6,pc
80013c04:	ee c5 ff ec 	sub	r5,r7,-20
80013c08:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
80013c0a:	ee ca 00 10 	sub	r10,r7,16
80013c0e:	20 4d       	sub	sp,16
80013c10:	1a 98       	mov	r8,sp
80013c12:	0a 99       	mov	r9,r5
80013c14:	20 08       	sub	r8,0
80013c16:	20 09       	sub	r9,0
80013c18:	72 0b       	ld.w	r11,r9[0x0]
80013c1a:	91 0b       	st.w	r8[0x0],r11
80013c1c:	72 1b       	ld.w	r11,r9[0x4]
80013c1e:	91 1b       	st.w	r8[0x4],r11
80013c20:	72 2b       	ld.w	r11,r9[0x8]
80013c22:	91 2b       	st.w	r8[0x8],r11
80013c24:	72 39       	ld.w	r9,r9[0xc]
80013c26:	91 39       	st.w	r8[0xc],r9
80013c28:	14 9c       	mov	r12,r10
80013c2a:	ca ff       	rcall	80013b88 <quat_inv>
80013c2c:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
80013c2e:	ee ca 00 20 	sub	r10,r7,32
80013c32:	20 4d       	sub	sp,16
80013c34:	1a 98       	mov	r8,sp
80013c36:	ea c9 ff f0 	sub	r9,r5,-16
80013c3a:	20 08       	sub	r8,0
80013c3c:	20 09       	sub	r9,0
80013c3e:	72 0b       	ld.w	r11,r9[0x0]
80013c40:	91 0b       	st.w	r8[0x0],r11
80013c42:	72 1b       	ld.w	r11,r9[0x4]
80013c44:	91 1b       	st.w	r8[0x4],r11
80013c46:	72 2b       	ld.w	r11,r9[0x8]
80013c48:	91 2b       	st.w	r8[0x8],r11
80013c4a:	72 39       	ld.w	r9,r9[0xc]
80013c4c:	91 39       	st.w	r8[0xc],r9
80013c4e:	20 4d       	sub	sp,16
80013c50:	1a 98       	mov	r8,sp
80013c52:	ee c9 00 10 	sub	r9,r7,16
80013c56:	20 08       	sub	r8,0
80013c58:	20 09       	sub	r9,0
80013c5a:	72 0b       	ld.w	r11,r9[0x0]
80013c5c:	91 0b       	st.w	r8[0x0],r11
80013c5e:	72 1b       	ld.w	r11,r9[0x4]
80013c60:	91 1b       	st.w	r8[0x4],r11
80013c62:	72 2b       	ld.w	r11,r9[0x8]
80013c64:	91 2b       	st.w	r8[0x8],r11
80013c66:	72 39       	ld.w	r9,r9[0xc]
80013c68:	91 39       	st.w	r8[0xc],r9
80013c6a:	14 9c       	mov	r12,r10
80013c6c:	c0 ef       	rcall	80013a88 <quat_multi>
80013c6e:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
80013c70:	ee ca 00 30 	sub	r10,r7,48
80013c74:	20 4d       	sub	sp,16
80013c76:	1a 98       	mov	r8,sp
80013c78:	0a 99       	mov	r9,r5
80013c7a:	20 08       	sub	r8,0
80013c7c:	20 09       	sub	r9,0
80013c7e:	72 0b       	ld.w	r11,r9[0x0]
80013c80:	91 0b       	st.w	r8[0x0],r11
80013c82:	72 1b       	ld.w	r11,r9[0x4]
80013c84:	91 1b       	st.w	r8[0x4],r11
80013c86:	72 2b       	ld.w	r11,r9[0x8]
80013c88:	91 2b       	st.w	r8[0x8],r11
80013c8a:	72 39       	ld.w	r9,r9[0xc]
80013c8c:	91 39       	st.w	r8[0xc],r9
80013c8e:	20 4d       	sub	sp,16
80013c90:	1a 98       	mov	r8,sp
80013c92:	ee c9 00 20 	sub	r9,r7,32
80013c96:	20 08       	sub	r8,0
80013c98:	20 09       	sub	r9,0
80013c9a:	72 0b       	ld.w	r11,r9[0x0]
80013c9c:	91 0b       	st.w	r8[0x0],r11
80013c9e:	72 1b       	ld.w	r11,r9[0x4]
80013ca0:	91 1b       	st.w	r8[0x4],r11
80013ca2:	72 2b       	ld.w	r11,r9[0x8]
80013ca4:	91 2b       	st.w	r8[0x8],r11
80013ca6:	72 39       	ld.w	r9,r9[0xc]
80013ca8:	91 39       	st.w	r8[0xc],r9
80013caa:	14 9c       	mov	r12,r10
80013cac:	ce ee       	rcall	80013a88 <quat_multi>
80013cae:	2f 8d       	sub	sp,-32
80013cb0:	ee c8 00 20 	sub	r8,r7,32
80013cb4:	ee c9 00 30 	sub	r9,r7,48
80013cb8:	20 08       	sub	r8,0
80013cba:	20 09       	sub	r9,0
80013cbc:	72 0a       	ld.w	r10,r9[0x0]
80013cbe:	91 0a       	st.w	r8[0x0],r10
80013cc0:	72 1a       	ld.w	r10,r9[0x4]
80013cc2:	91 1a       	st.w	r8[0x4],r10
80013cc4:	72 2a       	ld.w	r10,r9[0x8]
80013cc6:	91 2a       	st.w	r8[0x8],r10
80013cc8:	72 39       	ld.w	r9,r9[0xc]
80013cca:	91 39       	st.w	r8[0xc],r9

	return qtmp;
80013ccc:	06 98       	mov	r8,r3
80013cce:	ee c9 00 20 	sub	r9,r7,32
80013cd2:	20 08       	sub	r8,0
80013cd4:	20 09       	sub	r9,0
80013cd6:	72 0a       	ld.w	r10,r9[0x0]
80013cd8:	91 0a       	st.w	r8[0x0],r10
80013cda:	72 1a       	ld.w	r10,r9[0x4]
80013cdc:	91 1a       	st.w	r8[0x4],r10
80013cde:	72 2a       	ld.w	r10,r9[0x8]
80013ce0:	91 2a       	st.w	r8[0x8],r10
80013ce2:	72 39       	ld.w	r9,r9[0xc]
80013ce4:	91 39       	st.w	r8[0xc],r9
}
80013ce6:	06 9c       	mov	r12,r3
80013ce8:	2f 4d       	sub	sp,-48
80013cea:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80013cee:	00 00       	add	r0,r0
80013cf0:	80 01       	ld.sh	r1,r0[0x0]
80013cf2:	3a 86       	mov	r6,-88

80013cf4 <vector_norm_sqr>:
	result=0.5*(result+(input/result));
	return result;
}

float static inline vector_norm_sqr(float u[])
{
80013cf4:	eb cd 40 c0 	pushm	r6-r7,lr
80013cf8:	1a 97       	mov	r7,sp
80013cfa:	20 2d       	sub	sp,8
80013cfc:	48 96       	lddpc	r6,80013d20 <vector_norm_sqr+0x2c>
80013cfe:	1e 26       	rsub	r6,pc
80013d00:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
80013d04:	ee fb ff f8 	ld.w	r11,r7[-8]
80013d08:	ee fc ff f8 	ld.w	r12,r7[-8]
80013d0c:	c8 ee       	rcall	80013a28 <scalar_product>
80013d0e:	18 98       	mov	r8,r12
80013d10:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
80013d14:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80013d18:	10 9c       	mov	r12,r8
80013d1a:	2f ed       	sub	sp,-8
80013d1c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013d20:	80 01       	ld.sh	r1,r0[0x0]
80013d22:	3b 82       	mov	r2,-72

80013d24 <f_abs>:

	}
	return result;
}

static inline float f_abs(const float a){
80013d24:	eb cd 40 80 	pushm	r7,lr
80013d28:	1a 97       	mov	r7,sp
80013d2a:	20 1d       	sub	sp,4
80013d2c:	ef 4c ff fc 	st.w	r7[-4],r12
	if (a >= 0.0)
80013d30:	30 18       	mov	r8,1
80013d32:	ee fa ff fc 	ld.w	r10,r7[-4]
80013d36:	30 09       	mov	r9,0
80013d38:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80013d3c:	e0 8c 00 03 	brvs	80013d42 <f_abs+0x1e>
80013d40:	c0 24       	brge	80013d44 <f_abs+0x20>
80013d42:	30 08       	mov	r8,0
80013d44:	5c 58       	castu.b	r8
80013d46:	c0 40       	breq	80013d4e <f_abs+0x2a>
	{
		return a;
80013d48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013d4c:	c0 58       	rjmp	80013d56 <f_abs+0x32>
	}else{
		return -a;
80013d4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013d52:	ee 18 80 00 	eorh	r8,0x8000
	}
}
80013d56:	10 9c       	mov	r12,r8
80013d58:	2f fd       	sub	sp,-4
80013d5a:	e3 cd 80 80 	ldm	sp++,r7,pc

80013d5e <f_min>:

static inline float f_min(const float a, const float b){
80013d5e:	eb cd 40 80 	pushm	r7,lr
80013d62:	1a 97       	mov	r7,sp
80013d64:	20 2d       	sub	sp,8
80013d66:	ef 4c ff fc 	st.w	r7[-4],r12
80013d6a:	ef 4b ff f8 	st.w	r7[-8],r11
	if (a <= b)
80013d6e:	30 18       	mov	r8,1
80013d70:	ee fa ff fc 	ld.w	r10,r7[-4]
80013d74:	ee f9 ff f8 	ld.w	r9,r7[-8]
80013d78:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80013d7c:	e0 8c 00 04 	brvs	80013d84 <f_min+0x26>
80013d80:	e0 8a 00 03 	brle	80013d86 <f_min+0x28>
80013d84:	30 08       	mov	r8,0
80013d86:	5c 58       	castu.b	r8
80013d88:	c0 40       	breq	80013d90 <f_min+0x32>
	{
		return a;
80013d8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013d8e:	c0 38       	rjmp	80013d94 <f_min+0x36>
	}else{
		return b;
80013d90:	ee f8 ff f8 	ld.w	r8,r7[-8]
	}
}
80013d94:	10 9c       	mov	r12,r8
80013d96:	2f ed       	sub	sp,-8
80013d98:	e3 cd 80 80 	ldm	sp++,r7,pc

80013d9c <center_window_2>:

static float inline sigmoid(float x) {
	return (x/fast_sqrt(1+SQR(x)));
};

static float inline center_window_2(float x) {
80013d9c:	eb cd 40 c0 	pushm	r6-r7,lr
80013da0:	1a 97       	mov	r7,sp
80013da2:	20 1d       	sub	sp,4
80013da4:	48 c6       	lddpc	r6,80013dd4 <center_window_2+0x38>
80013da6:	1e 26       	rsub	r6,pc
80013da8:	ef 4c ff fc 	st.w	r7[-4],r12
	return 1.0/(1+SQR(x));
80013dac:	ee f9 ff fc 	ld.w	r9,r7[-4]
80013db0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013db4:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80013db8:	fc 18 3f 80 	movh	r8,0x3f80
80013dbc:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80013dc0:	10 9b       	mov	r11,r8
80013dc2:	fc 1c 3f 80 	movh	r12,0x3f80
80013dc6:	f0 16 00 08 	mcall	r6[32]
80013dca:	18 98       	mov	r8,r12
}
80013dcc:	10 9c       	mov	r12,r8
80013dce:	2f fd       	sub	sp,-4
80013dd0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013dd4:	80 01       	ld.sh	r1,r0[0x0]
80013dd6:	3c 2a       	mov	r10,-62

80013dd8 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80013dd8:	eb cd 40 c0 	pushm	r6-r7,lr
80013ddc:	1a 97       	mov	r7,sp
80013dde:	20 6d       	sub	sp,24
80013de0:	49 e6       	lddpc	r6,80013e58 <interpolate+0x80>
80013de2:	1e 26       	rsub	r6,pc
80013de4:	ef 4c ff f8 	st.w	r7[-8],r12
80013de8:	ef 4b ff f4 	st.w	r7[-12],r11
80013dec:	ef 4a ff f0 	st.w	r7[-16],r10
80013df0:	ef 49 ff ec 	st.w	r7[-20],r9
80013df4:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80013df8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80013dfc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013e00:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80013e04:	c0 41       	brne	80013e0c <interpolate+0x34>
	{
		return y1;
80013e06:	ee f8 ff ec 	ld.w	r8,r7[-20]
80013e0a:	c2 38       	rjmp	80013e50 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80013e0c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80013e10:	ee f8 ff ec 	ld.w	r8,r7[-20]
80013e14:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80013e18:	ee fa ff f8 	ld.w	r10,r7[-8]
80013e1c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013e20:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80013e24:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80013e28:	ee fa ff f0 	ld.w	r10,r7[-16]
80013e2c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80013e30:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80013e34:	12 9b       	mov	r11,r9
80013e36:	10 9c       	mov	r12,r8
80013e38:	f0 16 00 08 	mcall	r6[32]
80013e3c:	18 98       	mov	r8,r12
80013e3e:	10 99       	mov	r9,r8
80013e40:	ee f8 ff ec 	ld.w	r8,r7[-20]
80013e44:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80013e48:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80013e4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80013e50:	10 9c       	mov	r12,r8
80013e52:	2f ad       	sub	sp,-24
80013e54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013e58:	80 01       	ld.sh	r1,r0[0x0]
80013e5a:	3c 66       	mov	r6,-58

80013e5c <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80013e5c:	eb cd 40 c0 	pushm	r6-r7,lr
80013e60:	1a 97       	mov	r7,sp
80013e62:	20 3d       	sub	sp,12
80013e64:	49 06       	lddpc	r6,80013ea4 <mav_array_memcpy+0x48>
80013e66:	1e 26       	rsub	r6,pc
80013e68:	ef 4c ff fc 	st.w	r7[-4],r12
80013e6c:	ef 4b ff f8 	st.w	r7[-8],r11
80013e70:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80013e74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013e78:	58 08       	cp.w	r8,0
80013e7a:	c0 91       	brne	80013e8c <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80013e7c:	ee fa ff f4 	ld.w	r10,r7[-12]
80013e80:	30 0b       	mov	r11,0
80013e82:	ee fc ff fc 	ld.w	r12,r7[-4]
80013e86:	f0 16 00 31 	mcall	r6[196]
80013e8a:	c0 98       	rjmp	80013e9c <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80013e8c:	ee fa ff f4 	ld.w	r10,r7[-12]
80013e90:	ee fb ff f8 	ld.w	r11,r7[-8]
80013e94:	ee fc ff fc 	ld.w	r12,r7[-4]
80013e98:	f0 16 00 1b 	mcall	r6[108]
	}
}
80013e9c:	2f dd       	sub	sp,-12
80013e9e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013ea2:	00 00       	add	r0,r0
80013ea4:	80 01       	ld.sh	r1,r0[0x0]
80013ea6:	3c ea       	mov	r10,-50

80013ea8 <init_nav>:

central_data_t *centralData;
float alt_integrator;

void init_nav()
{
80013ea8:	eb cd 40 c0 	pushm	r6-r7,lr
80013eac:	1a 97       	mov	r7,sp
80013eae:	20 1d       	sub	sp,4
80013eb0:	49 46       	lddpc	r6,80013f00 <init_nav+0x58>
80013eb2:	1e 26       	rsub	r6,pc
	int8_t i;
	
	centralData = get_central_data();
80013eb4:	f0 16 00 33 	mcall	r6[204]
80013eb8:	18 99       	mov	r9,r12
80013eba:	ec f8 00 00 	ld.w	r8,r6[0]
80013ebe:	91 09       	st.w	r8[0x0],r9
	
	centralData->controls_nav.tvel[X] = 0.0;
80013ec0:	ec f8 00 00 	ld.w	r8,r6[0]
80013ec4:	70 08       	ld.w	r8,r8[0x0]
80013ec6:	30 09       	mov	r9,0
80013ec8:	f1 49 01 84 	st.w	r8[388],r9
	centralData->controls_nav.tvel[Y] = 0.0;
80013ecc:	ec f8 00 00 	ld.w	r8,r6[0]
80013ed0:	70 08       	ld.w	r8,r8[0x0]
80013ed2:	30 09       	mov	r9,0
80013ed4:	f1 49 01 88 	st.w	r8[392],r9
	centralData->controls_nav.rpy[YAW] = 0.0;
80013ed8:	ec f8 00 00 	ld.w	r8,r6[0]
80013edc:	70 08       	ld.w	r8,r8[0x0]
80013ede:	30 09       	mov	r9,0
80013ee0:	f1 49 01 7c 	st.w	r8[380],r9
	centralData->controls_nav.tvel[Z] = 0.0; //centralData->controls.thrust;
80013ee4:	ec f8 00 00 	ld.w	r8,r6[0]
80013ee8:	70 08       	ld.w	r8,r8[0x0]
80013eea:	30 09       	mov	r9,0
80013eec:	f1 49 01 8c 	st.w	r8[396],r9
	
	alt_integrator = 0.0;
80013ef0:	ec f8 07 a8 	ld.w	r8,r6[1960]
80013ef4:	30 09       	mov	r9,0
80013ef6:	91 09       	st.w	r8[0x0],r9
}
80013ef8:	2f fd       	sub	sp,-4
80013efa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013efe:	00 00       	add	r0,r0
80013f00:	80 01       	ld.sh	r1,r0[0x0]
80013f02:	3d 36       	mov	r6,-45

80013f04 <run_navigation>:


void run_navigation(local_coordinates_t waypoint_input)
{
80013f04:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80013f08:	1a 97       	mov	r7,sp
80013f0a:	20 8d       	sub	sp,32
80013f0c:	49 26       	lddpc	r6,80013f54 <run_navigation+0x50>
80013f0e:	1e 26       	rsub	r6,pc
80013f10:	ee c5 ff ec 	sub	r5,r7,-20
	float newVelocity[3];
	
	float rel_pos[3], dist2wp_sqr;
	
	// Control in translational speed of the platform
	centralData->dist2wp_sqr = set_rel_pos_n_dist2wp(waypoint_input.pos, rel_pos);
80013f14:	ec f8 00 00 	ld.w	r8,r6[0]
80013f18:	70 03       	ld.w	r3,r8[0x0]
80013f1a:	ee c8 00 20 	sub	r8,r7,32
80013f1e:	10 9b       	mov	r11,r8
80013f20:	0a 9c       	mov	r12,r5
80013f22:	f0 16 01 ac 	mcall	r6[1712]
80013f26:	18 98       	mov	r8,r12
80013f28:	e7 48 0c f8 	st.w	r3[3320],r8
	set_speed_command(rel_pos,centralData->dist2wp_sqr);
80013f2c:	ec f8 00 00 	ld.w	r8,r6[0]
80013f30:	70 08       	ld.w	r8,r8[0x0]
80013f32:	f0 f9 0c f8 	ld.w	r9,r8[3320]
80013f36:	ee c8 00 20 	sub	r8,r7,32
80013f3a:	12 9b       	mov	r11,r9
80013f3c:	10 9c       	mov	r12,r8
80013f3e:	f0 16 01 5a 	mcall	r6[1384]
	
	centralData->controls_nav.theading=waypoint_input.heading;
80013f42:	ec f8 00 00 	ld.w	r8,r6[0]
80013f46:	70 08       	ld.w	r8,r8[0x0]
80013f48:	6a 39       	ld.w	r9,r5[0xc]
80013f4a:	f1 49 01 90 	st.w	r8[400],r9
}
80013f4e:	2f 8d       	sub	sp,-32
80013f50:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80013f54:	80 01       	ld.sh	r1,r0[0x0]
80013f56:	3d 92       	mov	r2,-39

80013f58 <set_rel_pos_n_dist2wp>:

float set_rel_pos_n_dist2wp(float waypointPos[], float rel_pos[])
{
80013f58:	eb cd 40 c0 	pushm	r6-r7,lr
80013f5c:	1a 97       	mov	r7,sp
80013f5e:	20 3d       	sub	sp,12
80013f60:	49 f6       	lddpc	r6,80013fdc <set_rel_pos_n_dist2wp+0x84>
80013f62:	1e 26       	rsub	r6,pc
80013f64:	ef 4c ff f8 	st.w	r7[-8],r12
80013f68:	ef 4b ff f4 	st.w	r7[-12],r11
	float dist2wp_sqr;
	
	rel_pos[X] = (float)(waypointPos[X] - centralData->position_estimator.localPosition.pos[X]);
80013f6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013f70:	70 09       	ld.w	r9,r8[0x0]
80013f72:	ec f8 00 00 	ld.w	r8,r6[0]
80013f76:	70 08       	ld.w	r8,r8[0x0]
80013f78:	f0 f8 09 e4 	ld.w	r8,r8[2532]
80013f7c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80013f80:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013f84:	91 09       	st.w	r8[0x0],r9
	rel_pos[Y] = (float)(waypointPos[Y] - centralData->position_estimator.localPosition.pos[Y]);
80013f86:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013f8a:	2f c8       	sub	r8,-4
80013f8c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80013f90:	2f c9       	sub	r9,-4
80013f92:	72 0a       	ld.w	r10,r9[0x0]
80013f94:	ec f9 00 00 	ld.w	r9,r6[0]
80013f98:	72 09       	ld.w	r9,r9[0x0]
80013f9a:	f2 f9 09 e8 	ld.w	r9,r9[2536]
80013f9e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80013fa2:	91 09       	st.w	r8[0x0],r9
	rel_pos[Z] = (float)(waypointPos[Z] - centralData->position_estimator.localPosition.pos[Z]);
80013fa4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013fa8:	2f 88       	sub	r8,-8
80013faa:	ee f9 ff f8 	ld.w	r9,r7[-8]
80013fae:	2f 89       	sub	r9,-8
80013fb0:	72 0a       	ld.w	r10,r9[0x0]
80013fb2:	ec f9 00 00 	ld.w	r9,r6[0]
80013fb6:	72 09       	ld.w	r9,r9[0x0]
80013fb8:	f2 f9 09 ec 	ld.w	r9,r9[2540]
80013fbc:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80013fc0:	91 09       	st.w	r8[0x0],r9
	
	dist2wp_sqr = vector_norm_sqr(rel_pos);
80013fc2:	ee fc ff f4 	ld.w	r12,r7[-12]
80013fc6:	c9 7e       	rcall	80013cf4 <vector_norm_sqr>
80013fc8:	18 98       	mov	r8,r12
80013fca:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return dist2wp_sqr;
80013fce:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80013fd2:	10 9c       	mov	r12,r8
80013fd4:	2f dd       	sub	sp,-12
80013fd6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013fda:	00 00       	add	r0,r0
80013fdc:	80 01       	ld.sh	r1,r0[0x0]
80013fde:	3d e6       	mov	r6,-34

80013fe0 <set_speed_command>:

void set_speed_command(float rel_pos[], float dist2wpSqr)
{
80013fe0:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80013fe4:	1a 97       	mov	r7,sp
80013fe6:	21 7d       	sub	sp,92
80013fe8:	fe f6 02 f0 	ld.w	r6,pc[752]
80013fec:	1e 26       	rsub	r6,pc
80013fee:	ef 4c ff a8 	st.w	r7[-88],r12
80013ff2:	ef 4b ff a4 	st.w	r7[-92],r11
	
	float dir_desired_bf[3], dir_desired[3], new_velocity[3];
	
	float rel_heading;
	
	norm_rel_dist = sqrt(dist2wpSqr);
80013ff6:	ee fc ff a4 	ld.w	r12,r7[-92]
80013ffa:	f0 16 00 02 	mcall	r6[8]
80013ffe:	14 98       	mov	r8,r10
80014000:	16 99       	mov	r9,r11
80014002:	10 9a       	mov	r10,r8
80014004:	12 9b       	mov	r11,r9
80014006:	f0 16 00 70 	mcall	r6[448]
8001400a:	14 98       	mov	r8,r10
8001400c:	16 99       	mov	r9,r11
8001400e:	10 9a       	mov	r10,r8
80014010:	12 9b       	mov	r11,r9
80014012:	f0 16 00 09 	mcall	r6[36]
80014016:	18 98       	mov	r8,r12
80014018:	ef 48 ff f4 	st.w	r7[-12],r8
	
	if (norm_rel_dist < 0.0005)
8001401c:	ee fc ff f4 	ld.w	r12,r7[-12]
80014020:	f0 16 00 02 	mcall	r6[8]
80014024:	30 05       	mov	r5,0
80014026:	e0 68 a9 fc 	mov	r8,43516
8001402a:	ea 18 d2 f1 	orh	r8,0xd2f1
8001402e:	e0 69 62 4d 	mov	r9,25165
80014032:	ea 19 3f 40 	orh	r9,0x3f40
80014036:	f0 16 00 1c 	mcall	r6[112]
8001403a:	18 98       	mov	r8,r12
8001403c:	58 08       	cp.w	r8,0
8001403e:	c0 20       	breq	80014042 <set_speed_command+0x62>
80014040:	30 15       	mov	r5,1
80014042:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80014046:	c1 80       	breq	80014076 <set_speed_command+0x96>
	{
		norm_rel_dist += 0.0005;
80014048:	ee fc ff f4 	ld.w	r12,r7[-12]
8001404c:	f0 16 00 02 	mcall	r6[8]
80014050:	e0 68 a9 fc 	mov	r8,43516
80014054:	ea 18 d2 f1 	orh	r8,0xd2f1
80014058:	e0 69 62 4d 	mov	r9,25165
8001405c:	ea 19 3f 40 	orh	r9,0x3f40
80014060:	f0 16 00 05 	mcall	r6[20]
80014064:	14 98       	mov	r8,r10
80014066:	16 99       	mov	r9,r11
80014068:	10 9a       	mov	r10,r8
8001406a:	12 9b       	mov	r11,r9
8001406c:	f0 16 00 09 	mcall	r6[36]
80014070:	18 98       	mov	r8,r12
80014072:	ef 48 ff f4 	st.w	r7[-12],r8
	

	
	// calculate dir_desired in local frame
	// vel = qe-1 * rel_pos * qe
	qtmp1 = quat_from_vector(rel_pos);
80014076:	ee c8 00 20 	sub	r8,r7,32
8001407a:	ee fb ff a8 	ld.w	r11,r7[-88]
8001407e:	10 9c       	mov	r12,r8
80014080:	fe b0 fc a8 	rcall	800139d0 <quat_from_vector>
	//qtmp1.s= 0.0; qtmp1.v[0]=dir_desired[0]; qtmp1.v[1]=dir_desired[1]; qtmp1.v[2]=dir_desired[2];
	qtmp2 = quat_global_to_local(centralData->imu1.attitude.qe,qtmp1);
80014084:	ec f8 00 00 	ld.w	r8,r6[0]
80014088:	70 0b       	ld.w	r11,r8[0x0]
8001408a:	ee ca 00 30 	sub	r10,r7,48
8001408e:	20 4d       	sub	sp,16
80014090:	1a 98       	mov	r8,sp
80014092:	ee c9 00 20 	sub	r9,r7,32
80014096:	20 08       	sub	r8,0
80014098:	20 09       	sub	r9,0
8001409a:	72 0c       	ld.w	r12,r9[0x0]
8001409c:	91 0c       	st.w	r8[0x0],r12
8001409e:	72 1c       	ld.w	r12,r9[0x4]
800140a0:	91 1c       	st.w	r8[0x4],r12
800140a2:	72 2c       	ld.w	r12,r9[0x8]
800140a4:	91 2c       	st.w	r8[0x8],r12
800140a6:	72 39       	ld.w	r9,r9[0xc]
800140a8:	91 39       	st.w	r8[0xc],r9
800140aa:	20 4d       	sub	sp,16
800140ac:	1a 98       	mov	r8,sp
800140ae:	16 99       	mov	r9,r11
800140b0:	20 08       	sub	r8,0
800140b2:	20 09       	sub	r9,0
800140b4:	72 0b       	ld.w	r11,r9[0x0]
800140b6:	91 0b       	st.w	r8[0x0],r11
800140b8:	72 1b       	ld.w	r11,r9[0x4]
800140ba:	91 1b       	st.w	r8[0x4],r11
800140bc:	72 2b       	ld.w	r11,r9[0x8]
800140be:	91 2b       	st.w	r8[0x8],r11
800140c0:	72 39       	ld.w	r9,r9[0xc]
800140c2:	91 39       	st.w	r8[0xc],r9
800140c4:	14 9c       	mov	r12,r10
800140c6:	fe b0 fd 99 	rcall	80013bf8 <quat_global_to_local>
800140ca:	2f 8d       	sub	sp,-32
	dir_desired_bf[0] = qtmp2.v[0]; dir_desired_bf[1] = qtmp2.v[1]; dir_desired_bf[2] = qtmp2.v[2];
800140cc:	ee f8 ff d4 	ld.w	r8,r7[-44]
800140d0:	ef 48 ff c4 	st.w	r7[-60],r8
800140d4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800140d8:	ef 48 ff c8 	st.w	r7[-56],r8
800140dc:	ee f8 ff dc 	ld.w	r8,r7[-36]
800140e0:	ef 48 ff cc 	st.w	r7[-52],r8
	
	// experimental: Z-axis in velocity mode is in global frame...
	dir_desired_bf[2] = rel_pos[2];
800140e4:	ee f8 ff a8 	ld.w	r8,r7[-88]
800140e8:	2f 88       	sub	r8,-8
800140ea:	70 08       	ld.w	r8,r8[0x0]
800140ec:	ef 48 ff cc 	st.w	r7[-52],r8
	
	v_desired = f_min(V_CRUISE,(center_window_2(rel_heading) * DIST_2_VEL_GAIN * norm_rel_dist));
800140f0:	ee fc ff fc 	ld.w	r12,r7[-4]
800140f4:	c5 4e       	rcall	80013d9c <center_window_2>
800140f6:	18 98       	mov	r8,r12
800140f8:	10 9c       	mov	r12,r8
800140fa:	f0 16 00 02 	mcall	r6[8]
800140fe:	e0 68 33 33 	mov	r8,13107
80014102:	ea 18 33 33 	orh	r8,0x3333
80014106:	e0 69 33 33 	mov	r9,13107
8001410a:	ea 19 3f d3 	orh	r9,0x3fd3
8001410e:	f0 16 00 03 	mcall	r6[12]
80014112:	14 98       	mov	r8,r10
80014114:	16 99       	mov	r9,r11
80014116:	10 92       	mov	r2,r8
80014118:	12 93       	mov	r3,r9
8001411a:	ee fc ff f4 	ld.w	r12,r7[-12]
8001411e:	f0 16 00 02 	mcall	r6[8]
80014122:	14 98       	mov	r8,r10
80014124:	16 99       	mov	r9,r11
80014126:	04 9a       	mov	r10,r2
80014128:	06 9b       	mov	r11,r3
8001412a:	f0 16 00 03 	mcall	r6[12]
8001412e:	14 98       	mov	r8,r10
80014130:	16 99       	mov	r9,r11
80014132:	10 9a       	mov	r10,r8
80014134:	12 9b       	mov	r11,r9
80014136:	f0 16 00 09 	mcall	r6[36]
8001413a:	18 98       	mov	r8,r12
8001413c:	10 9b       	mov	r11,r8
8001413e:	fc 1c 40 40 	movh	r12,0x4040
80014142:	c0 ee       	rcall	80013d5e <f_min>
80014144:	18 98       	mov	r8,r12
80014146:	ef 48 ff f8 	st.w	r7[-8],r8
	
	if (v_desired *  f_abs(dir_desired_bf[Z]) > MAX_CLIMB_RATE * norm_rel_dist ) {
8001414a:	ee f8 ff cc 	ld.w	r8,r7[-52]
8001414e:	10 9c       	mov	r12,r8
80014150:	fe b0 fd ea 	rcall	80013d24 <f_abs>
80014154:	18 99       	mov	r9,r12
80014156:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001415a:	e5 a2 0a 98 	cop	cp0,cr10,cr9,cr8,0x44
8001415e:	30 18       	mov	r8,1
80014160:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014164:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80014168:	e0 8c 00 04 	brvs	80014170 <set_speed_command+0x190>
8001416c:	e0 89 00 03 	brgt	80014172 <set_speed_command+0x192>
80014170:	30 08       	mov	r8,0
80014172:	5c 58       	castu.b	r8
80014174:	c0 f0       	breq	80014192 <set_speed_command+0x1b2>
		v_desired = MAX_CLIMB_RATE * norm_rel_dist /f_abs(dir_desired_bf[Z]);
80014176:	ee f8 ff cc 	ld.w	r8,r7[-52]
8001417a:	10 9c       	mov	r12,r8
8001417c:	fe b0 fd d4 	rcall	80013d24 <f_abs>
80014180:	18 98       	mov	r8,r12
80014182:	10 9b       	mov	r11,r8
80014184:	ee fc ff f4 	ld.w	r12,r7[-12]
80014188:	f0 16 00 08 	mcall	r6[32]
8001418c:	18 98       	mov	r8,r12
8001418e:	ef 48 ff f8 	st.w	r7[-8],r8
	}
	
	dir_desired_bf[X] = v_desired * dir_desired_bf[X] / norm_rel_dist;
80014192:	ee f9 ff c4 	ld.w	r9,r7[-60]
80014196:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001419a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001419e:	ee fb ff f4 	ld.w	r11,r7[-12]
800141a2:	10 9c       	mov	r12,r8
800141a4:	f0 16 00 08 	mcall	r6[32]
800141a8:	18 98       	mov	r8,r12
800141aa:	ef 48 ff c4 	st.w	r7[-60],r8
	dir_desired_bf[Y] = v_desired * dir_desired_bf[Y] / norm_rel_dist;
800141ae:	ee f9 ff c8 	ld.w	r9,r7[-56]
800141b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800141b6:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800141ba:	ee fb ff f4 	ld.w	r11,r7[-12]
800141be:	10 9c       	mov	r12,r8
800141c0:	f0 16 00 08 	mcall	r6[32]
800141c4:	18 98       	mov	r8,r12
800141c6:	ef 48 ff c8 	st.w	r7[-56],r8
	dir_desired_bf[Z] = v_desired * dir_desired_bf[Z] / norm_rel_dist;
800141ca:	ee f9 ff cc 	ld.w	r9,r7[-52]
800141ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800141d2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800141d6:	ee fb ff f4 	ld.w	r11,r7[-12]
800141da:	10 9c       	mov	r12,r8
800141dc:	f0 16 00 08 	mcall	r6[32]
800141e0:	18 98       	mov	r8,r12
800141e2:	ef 48 ff cc 	st.w	r7[-52],r8
	//}else{
		//high_speed_nav(dir_desired_bf,centralData->imu1.attitude);
	//}
	
	
	for (i=0;i<3;i++)
800141e6:	30 08       	mov	r8,0
800141e8:	ef 68 ff f3 	st.b	r7[-13],r8
800141ec:	c1 58       	rjmp	80014216 <set_speed_command+0x236>
	{
		new_velocity[i] = dir_desired_bf[i];
800141ee:	ef 3a ff f3 	ld.ub	r10,r7[-13]
800141f2:	ef 38 ff f3 	ld.ub	r8,r7[-13]
800141f6:	a3 68       	lsl	r8,0x2
800141f8:	ee 08 00 08 	add	r8,r7,r8
800141fc:	f0 f9 ff c4 	ld.w	r9,r8[-60]
80014200:	f4 08 15 02 	lsl	r8,r10,0x2
80014204:	ee 08 00 08 	add	r8,r7,r8
80014208:	f1 49 ff ac 	st.w	r8[-84],r9
	//}else{
		//high_speed_nav(dir_desired_bf,centralData->imu1.attitude);
	//}
	
	
	for (i=0;i<3;i++)
8001420c:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80014210:	2f f8       	sub	r8,-1
80014212:	ef 68 ff f3 	st.b	r7[-13],r8
80014216:	ef 39 ff f3 	ld.ub	r9,r7[-13]
8001421a:	30 28       	mov	r8,2
8001421c:	f0 09 18 00 	cp.b	r9,r8
80014220:	fe 98 ff e7 	brls	800141ee <set_speed_command+0x20e>
	{
		new_velocity[i] = dir_desired_bf[i];
	}
	if (centralData->collision_avoidance)
80014224:	ec f8 00 00 	ld.w	r8,r6[0]
80014228:	70 08       	ld.w	r8,r8[0x0]
8001422a:	f1 38 0d 04 	ld.ub	r8,r8[3332]
8001422e:	58 08       	cp.w	r8,0
80014230:	c0 90       	breq	80014242 <set_speed_command+0x262>
	{
		computeNewVelocity(dir_desired_bf,new_velocity);
80014232:	ee c9 00 54 	sub	r9,r7,84
80014236:	ee c8 00 3c 	sub	r8,r7,60
8001423a:	12 9b       	mov	r11,r9
8001423c:	10 9c       	mov	r12,r8
8001423e:	f0 16 01 a4 	mcall	r6[1680]
	}

	rel_heading= atan2(new_velocity[Y],new_velocity[X]);
80014242:	ee f8 ff ac 	ld.w	r8,r7[-84]
80014246:	10 9c       	mov	r12,r8
80014248:	f0 16 00 02 	mcall	r6[8]
8001424c:	14 92       	mov	r2,r10
8001424e:	16 93       	mov	r3,r11
80014250:	ee f8 ff b0 	ld.w	r8,r7[-80]
80014254:	10 9c       	mov	r12,r8
80014256:	f0 16 00 02 	mcall	r6[8]
8001425a:	04 98       	mov	r8,r2
8001425c:	06 99       	mov	r9,r3
8001425e:	f0 16 00 54 	mcall	r6[336]
80014262:	14 98       	mov	r8,r10
80014264:	16 99       	mov	r9,r11
80014266:	10 9a       	mov	r10,r8
80014268:	12 9b       	mov	r11,r9
8001426a:	f0 16 00 09 	mcall	r6[36]
8001426e:	18 98       	mov	r8,r12
80014270:	ef 48 ff fc 	st.w	r7[-4],r8

	centralData->controls_nav.tvel[X] = new_velocity[X];
80014274:	ec f8 00 00 	ld.w	r8,r6[0]
80014278:	70 08       	ld.w	r8,r8[0x0]
8001427a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8001427e:	f1 49 01 84 	st.w	r8[388],r9
	centralData->controls_nav.tvel[Y] = new_velocity[Y];
80014282:	ec f8 00 00 	ld.w	r8,r6[0]
80014286:	70 08       	ld.w	r8,r8[0x0]
80014288:	ee f9 ff b0 	ld.w	r9,r7[-80]
8001428c:	f1 49 01 88 	st.w	r8[392],r9
	centralData->controls_nav.tvel[Z] = new_velocity[Z];		
80014290:	ec f8 00 00 	ld.w	r8,r6[0]
80014294:	70 08       	ld.w	r8,r8[0x0]
80014296:	ee f9 ff b4 	ld.w	r9,r7[-76]
8001429a:	f1 49 01 8c 	st.w	r8[396],r9
	centralData->controls_nav.rpy[YAW] = KP_YAW * rel_heading;
8001429e:	ec f8 00 00 	ld.w	r8,r6[0]
800142a2:	70 05       	ld.w	r5,r8[0x0]
800142a4:	ee fc ff fc 	ld.w	r12,r7[-4]
800142a8:	f0 16 00 02 	mcall	r6[8]
800142ac:	e0 68 99 9a 	mov	r8,39322
800142b0:	ea 18 99 99 	orh	r8,0x9999
800142b4:	e0 69 99 99 	mov	r9,39321
800142b8:	ea 19 3f c9 	orh	r9,0x3fc9
800142bc:	f0 16 00 03 	mcall	r6[12]
800142c0:	14 98       	mov	r8,r10
800142c2:	16 99       	mov	r9,r11
800142c4:	10 9a       	mov	r10,r8
800142c6:	12 9b       	mov	r11,r9
800142c8:	f0 16 00 09 	mcall	r6[36]
800142cc:	18 98       	mov	r8,r12
800142ce:	eb 48 01 7c 	st.w	r5[380],r8

	//low_speed_nav(dir_desired_bf,centralData->imu1.attitude,norm_rel_dist);

}
800142d2:	2e 9d       	sub	sp,-92
800142d4:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
800142d8:	80 01       	ld.sh	r1,r0[0x0]
800142da:	3e 70       	mov	r0,-25

800142dc <low_speed_nav>:

void low_speed_nav(float dir_desired_bf[], Quat_Attitude_t attitude, float rel_distance)
{
800142dc:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
800142e0:	1a 97       	mov	r7,sp
800142e2:	20 4d       	sub	sp,16
800142e4:	4f 06       	lddpc	r6,800144a4 <low_speed_nav+0x1c8>
800142e6:	1e 26       	rsub	r6,pc
800142e8:	ef 4c ff f4 	st.w	r7[-12],r12
800142ec:	ef 4b ff f0 	st.w	r7[-16],r11
	// dbg_print("Low speed nav\n");
	
	float yaw_angle_tolerance = PI/10.0;
800142f0:	e0 68 d9 7c 	mov	r8,55676
800142f4:	ea 18 3e a0 	orh	r8,0x3ea0
800142f8:	ef 48 ff f8 	st.w	r7[-8],r8
	
	if ((f_abs(dir_desired_bf[X]) < 0.001 && f_abs(dir_desired_bf[Y]) < 0.001) || centralData->waypoint_hold_init || (rel_distance<=5.0))
800142fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014300:	70 08       	ld.w	r8,r8[0x0]
80014302:	10 9c       	mov	r12,r8
80014304:	fe b0 fd 10 	rcall	80013d24 <f_abs>
80014308:	18 98       	mov	r8,r12
8001430a:	10 9c       	mov	r12,r8
8001430c:	f0 16 00 02 	mcall	r6[8]
80014310:	30 05       	mov	r5,0
80014312:	e0 68 a9 fc 	mov	r8,43516
80014316:	ea 18 d2 f1 	orh	r8,0xd2f1
8001431a:	e0 69 62 4d 	mov	r9,25165
8001431e:	ea 19 3f 50 	orh	r9,0x3f50
80014322:	f0 16 00 1c 	mcall	r6[112]
80014326:	18 98       	mov	r8,r12
80014328:	58 08       	cp.w	r8,0
8001432a:	c0 20       	breq	8001432e <low_speed_nav+0x52>
8001432c:	30 15       	mov	r5,1
8001432e:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80014332:	c1 e0       	breq	8001436e <low_speed_nav+0x92>
80014334:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014338:	2f c8       	sub	r8,-4
8001433a:	70 08       	ld.w	r8,r8[0x0]
8001433c:	10 9c       	mov	r12,r8
8001433e:	fe b0 fc f3 	rcall	80013d24 <f_abs>
80014342:	18 98       	mov	r8,r12
80014344:	10 9c       	mov	r12,r8
80014346:	f0 16 00 02 	mcall	r6[8]
8001434a:	30 05       	mov	r5,0
8001434c:	e0 68 a9 fc 	mov	r8,43516
80014350:	ea 18 d2 f1 	orh	r8,0xd2f1
80014354:	e0 69 62 4d 	mov	r9,25165
80014358:	ea 19 3f 50 	orh	r9,0x3f50
8001435c:	f0 16 00 1c 	mcall	r6[112]
80014360:	18 98       	mov	r8,r12
80014362:	58 08       	cp.w	r8,0
80014364:	c0 20       	breq	80014368 <low_speed_nav+0x8c>
80014366:	30 15       	mov	r5,1
80014368:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8001436c:	c1 61       	brne	80014398 <low_speed_nav+0xbc>
8001436e:	ec f8 00 00 	ld.w	r8,r6[0]
80014372:	70 08       	ld.w	r8,r8[0x0]
80014374:	f1 38 0c ff 	ld.ub	r8,r8[3327]
80014378:	58 08       	cp.w	r8,0
8001437a:	c0 f1       	brne	80014398 <low_speed_nav+0xbc>
8001437c:	30 18       	mov	r8,1
8001437e:	ee fa ff f0 	ld.w	r10,r7[-16]
80014382:	fc 19 40 a0 	movh	r9,0x40a0
80014386:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001438a:	e0 8c 00 04 	brvs	80014392 <low_speed_nav+0xb6>
8001438e:	e0 8a 00 03 	brle	80014394 <low_speed_nav+0xb8>
80014392:	30 08       	mov	r8,0
80014394:	5c 58       	castu.b	r8
80014396:	c1 90       	breq	800143c8 <low_speed_nav+0xec>
	{
		centralData->controls_nav.rpy[YAW] = 0.0;
80014398:	ec f8 00 00 	ld.w	r8,r6[0]
8001439c:	70 08       	ld.w	r8,r8[0x0]
8001439e:	30 09       	mov	r9,0
800143a0:	f1 49 01 7c 	st.w	r8[380],r9
		centralData->controls_nav.tvel[X] = dir_desired_bf[X];
800143a4:	ec f8 00 00 	ld.w	r8,r6[0]
800143a8:	70 08       	ld.w	r8,r8[0x0]
800143aa:	ee f9 ff f4 	ld.w	r9,r7[-12]
800143ae:	72 09       	ld.w	r9,r9[0x0]
800143b0:	f1 49 01 84 	st.w	r8[388],r9
		centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
800143b4:	ec f8 00 00 	ld.w	r8,r6[0]
800143b8:	70 08       	ld.w	r8,r8[0x0]
800143ba:	ee f9 ff f4 	ld.w	r9,r7[-12]
800143be:	2f c9       	sub	r9,-4
800143c0:	72 09       	ld.w	r9,r9[0x0]
800143c2:	f1 49 01 88 	st.w	r8[392],r9
{
	// dbg_print("Low speed nav\n");
	
	float yaw_angle_tolerance = PI/10.0;
	
	if ((f_abs(dir_desired_bf[X]) < 0.001 && f_abs(dir_desired_bf[Y]) < 0.001) || centralData->waypoint_hold_init || (rel_distance<=5.0))
800143c6:	c6 28       	rjmp	8001448a <low_speed_nav+0x1ae>
	{
		centralData->controls_nav.rpy[YAW] = 0.0;
		centralData->controls_nav.tvel[X] = dir_desired_bf[X];
		centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
	}else{
		float rel_heading = atan2(dir_desired_bf[Y],dir_desired_bf[X]);
800143c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800143cc:	70 08       	ld.w	r8,r8[0x0]
800143ce:	10 9c       	mov	r12,r8
800143d0:	f0 16 00 02 	mcall	r6[8]
800143d4:	14 92       	mov	r2,r10
800143d6:	16 93       	mov	r3,r11
800143d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800143dc:	2f c8       	sub	r8,-4
800143de:	70 08       	ld.w	r8,r8[0x0]
800143e0:	10 9c       	mov	r12,r8
800143e2:	f0 16 00 02 	mcall	r6[8]
800143e6:	04 98       	mov	r8,r2
800143e8:	06 99       	mov	r9,r3
800143ea:	f0 16 00 54 	mcall	r6[336]
800143ee:	14 98       	mov	r8,r10
800143f0:	16 99       	mov	r9,r11
800143f2:	10 9a       	mov	r10,r8
800143f4:	12 9b       	mov	r11,r9
800143f6:	f0 16 00 09 	mcall	r6[36]
800143fa:	18 98       	mov	r8,r12
800143fc:	ef 48 ff fc 	st.w	r7[-4],r8
		
		if (rel_heading >= yaw_angle_tolerance)
80014400:	30 18       	mov	r8,1
80014402:	ee fa ff fc 	ld.w	r10,r7[-4]
80014406:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001440a:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001440e:	e0 8c 00 03 	brvs	80014414 <low_speed_nav+0x138>
80014412:	c0 24       	brge	80014416 <low_speed_nav+0x13a>
80014414:	30 08       	mov	r8,0
80014416:	5c 58       	castu.b	r8
80014418:	c0 e0       	breq	80014434 <low_speed_nav+0x158>
		{
			centralData->controls_nav.tvel[X] = 0.0;
8001441a:	ec f8 00 00 	ld.w	r8,r6[0]
8001441e:	70 08       	ld.w	r8,r8[0x0]
80014420:	30 09       	mov	r9,0
80014422:	f1 49 01 84 	st.w	r8[388],r9
			centralData->controls_nav.tvel[Y] = 0.0;
80014426:	ec f8 00 00 	ld.w	r8,r6[0]
8001442a:	70 08       	ld.w	r8,r8[0x0]
8001442c:	30 09       	mov	r9,0
8001442e:	f1 49 01 88 	st.w	r8[392],r9
80014432:	c1 28       	rjmp	80014456 <low_speed_nav+0x17a>
		}else{
			centralData->controls_nav.tvel[X] = dir_desired_bf[X];
80014434:	ec f8 00 00 	ld.w	r8,r6[0]
80014438:	70 08       	ld.w	r8,r8[0x0]
8001443a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001443e:	72 09       	ld.w	r9,r9[0x0]
80014440:	f1 49 01 84 	st.w	r8[388],r9
			centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
80014444:	ec f8 00 00 	ld.w	r8,r6[0]
80014448:	70 08       	ld.w	r8,r8[0x0]
8001444a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001444e:	2f c9       	sub	r9,-4
80014450:	72 09       	ld.w	r9,r9[0x0]
80014452:	f1 49 01 88 	st.w	r8[392],r9
		}
		
		centralData->controls_nav.rpy[YAW] = KP_YAW * rel_heading;
80014456:	ec f8 00 00 	ld.w	r8,r6[0]
8001445a:	70 05       	ld.w	r5,r8[0x0]
8001445c:	ee fc ff fc 	ld.w	r12,r7[-4]
80014460:	f0 16 00 02 	mcall	r6[8]
80014464:	e0 68 99 9a 	mov	r8,39322
80014468:	ea 18 99 99 	orh	r8,0x9999
8001446c:	e0 69 99 99 	mov	r9,39321
80014470:	ea 19 3f c9 	orh	r9,0x3fc9
80014474:	f0 16 00 03 	mcall	r6[12]
80014478:	14 98       	mov	r8,r10
8001447a:	16 99       	mov	r9,r11
8001447c:	10 9a       	mov	r10,r8
8001447e:	12 9b       	mov	r11,r9
80014480:	f0 16 00 09 	mcall	r6[36]
80014484:	18 98       	mov	r8,r12
80014486:	eb 48 01 7c 	st.w	r5[380],r8
	}

	centralData->controls_nav.tvel[Z] = dir_desired_bf[Z];
8001448a:	ec f8 00 00 	ld.w	r8,r6[0]
8001448e:	70 08       	ld.w	r8,r8[0x0]
80014490:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014494:	2f 89       	sub	r9,-8
80014496:	72 09       	ld.w	r9,r9[0x0]
80014498:	f1 49 01 8c 	st.w	r8[396],r9
}
8001449c:	2f cd       	sub	sp,-16
8001449e:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
800144a2:	00 00       	add	r0,r0
800144a4:	80 01       	ld.sh	r1,r0[0x0]
800144a6:	41 6a       	lddsp	r10,sp[0x58]

800144a8 <high_speed_nav>:

void high_speed_nav(float dir_desired_bf[], Quat_Attitude_t attitude)
{
800144a8:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
800144ac:	1a 97       	mov	r7,sp
800144ae:	20 1d       	sub	sp,4
800144b0:	4a 76       	lddpc	r6,8001454c <high_speed_nav+0xa4>
800144b2:	1e 26       	rsub	r6,pc
800144b4:	ef 4c ff fc 	st.w	r7[-4],r12
	//dbg_print("High speed nav\n");
	
	centralData->controls_nav.tvel[X] = dir_desired_bf[X];
800144b8:	ec f8 00 00 	ld.w	r8,r6[0]
800144bc:	70 08       	ld.w	r8,r8[0x0]
800144be:	ee f9 ff fc 	ld.w	r9,r7[-4]
800144c2:	72 09       	ld.w	r9,r9[0x0]
800144c4:	f1 49 01 84 	st.w	r8[388],r9
	centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
800144c8:	ec f8 00 00 	ld.w	r8,r6[0]
800144cc:	70 08       	ld.w	r8,r8[0x0]
800144ce:	ee f9 ff fc 	ld.w	r9,r7[-4]
800144d2:	2f c9       	sub	r9,-4
800144d4:	72 09       	ld.w	r9,r9[0x0]
800144d6:	f1 49 01 88 	st.w	r8[392],r9
	centralData->controls_nav.tvel[Z] = dir_desired_bf[Z];
800144da:	ec f8 00 00 	ld.w	r8,r6[0]
800144de:	70 08       	ld.w	r8,r8[0x0]
800144e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800144e4:	2f 89       	sub	r9,-8
800144e6:	72 09       	ld.w	r9,r9[0x0]
800144e8:	f1 49 01 8c 	st.w	r8[396],r9
	centralData->controls_nav.rpy[YAW] = KP_YAW * atan2(centralData->position_estimator.vel_bf[Y], centralData->position_estimator.vel_bf[X]);
800144ec:	ec f8 00 00 	ld.w	r8,r6[0]
800144f0:	70 05       	ld.w	r5,r8[0x0]
800144f2:	ec f8 00 00 	ld.w	r8,r6[0]
800144f6:	70 08       	ld.w	r8,r8[0x0]
800144f8:	f0 f8 09 b0 	ld.w	r8,r8[2480]
800144fc:	10 9c       	mov	r12,r8
800144fe:	f0 16 00 02 	mcall	r6[8]
80014502:	14 92       	mov	r2,r10
80014504:	16 93       	mov	r3,r11
80014506:	ec f8 00 00 	ld.w	r8,r6[0]
8001450a:	70 08       	ld.w	r8,r8[0x0]
8001450c:	f0 f8 09 b4 	ld.w	r8,r8[2484]
80014510:	10 9c       	mov	r12,r8
80014512:	f0 16 00 02 	mcall	r6[8]
80014516:	04 98       	mov	r8,r2
80014518:	06 99       	mov	r9,r3
8001451a:	f0 16 00 54 	mcall	r6[336]
8001451e:	e0 68 99 9a 	mov	r8,39322
80014522:	ea 18 99 99 	orh	r8,0x9999
80014526:	e0 69 99 99 	mov	r9,39321
8001452a:	ea 19 3f c9 	orh	r9,0x3fc9
8001452e:	f0 16 00 03 	mcall	r6[12]
80014532:	14 98       	mov	r8,r10
80014534:	16 99       	mov	r9,r11
80014536:	10 9a       	mov	r10,r8
80014538:	12 9b       	mov	r11,r9
8001453a:	f0 16 00 09 	mcall	r6[36]
8001453e:	18 98       	mov	r8,r12
80014540:	eb 48 01 7c 	st.w	r5[380],r8
80014544:	2f fd       	sub	sp,-4
80014546:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001454a:	00 00       	add	r0,r0
8001454c:	80 01       	ld.sh	r1,r0[0x0]
8001454e:	43 36       	lddsp	r6,sp[0xcc]

80014550 <quat_from_vector>:
	out.v[2] = -q.v[2];

#define QUAT(q, s, v0, v1, v2) \
	q.s=s; q.v[0]=v0; q.v[1]=v1; q.v[2]=v2;

UQuat_t static inline quat_from_vector(float *v) {
80014550:	eb cd 40 80 	pushm	r7,lr
80014554:	1a 97       	mov	r7,sp
80014556:	20 5d       	sub	sp,20
80014558:	18 9a       	mov	r10,r12
8001455a:	ef 4b ff ec 	st.w	r7[-20],r11
	UQuat_t q;	
	q.s=0; 
8001455e:	30 08       	mov	r8,0
80014560:	ef 48 ff f0 	st.w	r7[-16],r8
	q.v[0]=v[0]; 
80014564:	ee f8 ff ec 	ld.w	r8,r7[-20]
80014568:	70 08       	ld.w	r8,r8[0x0]
8001456a:	ef 48 ff f4 	st.w	r7[-12],r8
	q.v[1]=v[1]; 
8001456e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80014572:	2f c8       	sub	r8,-4
80014574:	70 08       	ld.w	r8,r8[0x0]
80014576:	ef 48 ff f8 	st.w	r7[-8],r8
	q.v[2]=v[2];
8001457a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001457e:	2f 88       	sub	r8,-8
80014580:	70 08       	ld.w	r8,r8[0x0]
80014582:	ef 48 ff fc 	st.w	r7[-4],r8
	return q;
80014586:	14 98       	mov	r8,r10
80014588:	ee c9 00 10 	sub	r9,r7,16
8001458c:	20 08       	sub	r8,0
8001458e:	20 09       	sub	r9,0
80014590:	72 0b       	ld.w	r11,r9[0x0]
80014592:	91 0b       	st.w	r8[0x0],r11
80014594:	72 1b       	ld.w	r11,r9[0x4]
80014596:	91 1b       	st.w	r8[0x4],r11
80014598:	72 2b       	ld.w	r11,r9[0x8]
8001459a:	91 2b       	st.w	r8[0x8],r11
8001459c:	72 39       	ld.w	r9,r9[0xc]
8001459e:	91 39       	st.w	r8[0xc],r9
}
800145a0:	14 9c       	mov	r12,r10
800145a2:	2f bd       	sub	sp,-20
800145a4:	e3 cd 80 80 	ldm	sp++,r7,pc

800145a8 <calc_smaller_angle>:
#define SQR(in) \
		((in)*(in))



float static inline calc_smaller_angle(float angle) {
800145a8:	eb cd 40 e0 	pushm	r5-r7,lr
800145ac:	1a 97       	mov	r7,sp
800145ae:	20 2d       	sub	sp,8
800145b0:	4b 56       	lddpc	r6,80014684 <calc_smaller_angle+0xdc>
800145b2:	1e 26       	rsub	r6,pc
800145b4:	ef 4c ff f8 	st.w	r7[-8],r12
	float out=angle;
800145b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800145bc:	ef 48 ff fc 	st.w	r7[-4],r8
	while (out<-PI) out+=2.0*PI;
800145c0:	c1 88       	rjmp	800145f0 <calc_smaller_angle+0x48>
800145c2:	ee fc ff fc 	ld.w	r12,r7[-4]
800145c6:	f0 16 00 02 	mcall	r6[8]
800145ca:	e0 68 2d 18 	mov	r8,11544
800145ce:	ea 18 54 44 	orh	r8,0x5444
800145d2:	e0 69 21 fb 	mov	r9,8699
800145d6:	ea 19 40 19 	orh	r9,0x4019
800145da:	f0 16 00 05 	mcall	r6[20]
800145de:	14 98       	mov	r8,r10
800145e0:	16 99       	mov	r9,r11
800145e2:	10 9a       	mov	r10,r8
800145e4:	12 9b       	mov	r11,r9
800145e6:	f0 16 00 09 	mcall	r6[36]
800145ea:	18 98       	mov	r8,r12
800145ec:	ef 48 ff fc 	st.w	r7[-4],r8
800145f0:	ee fc ff fc 	ld.w	r12,r7[-4]
800145f4:	f0 16 00 02 	mcall	r6[8]
800145f8:	30 05       	mov	r5,0
800145fa:	e0 68 2d 18 	mov	r8,11544
800145fe:	ea 18 54 44 	orh	r8,0x5444
80014602:	e0 69 21 fb 	mov	r9,8699
80014606:	ea 19 c0 09 	orh	r9,0xc009
8001460a:	f0 16 00 1c 	mcall	r6[112]
8001460e:	18 98       	mov	r8,r12
80014610:	58 08       	cp.w	r8,0
80014612:	c0 20       	breq	80014616 <calc_smaller_angle+0x6e>
80014614:	30 15       	mov	r5,1
80014616:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8001461a:	cd 41       	brne	800145c2 <calc_smaller_angle+0x1a>
	while (out>=PI) out-=2.0*PI;
8001461c:	c1 88       	rjmp	8001464c <calc_smaller_angle+0xa4>
8001461e:	ee fc ff fc 	ld.w	r12,r7[-4]
80014622:	f0 16 00 02 	mcall	r6[8]
80014626:	e0 68 2d 18 	mov	r8,11544
8001462a:	ea 18 54 44 	orh	r8,0x5444
8001462e:	e0 69 21 fb 	mov	r9,8699
80014632:	ea 19 40 19 	orh	r9,0x4019
80014636:	f0 16 00 11 	mcall	r6[68]
8001463a:	14 98       	mov	r8,r10
8001463c:	16 99       	mov	r9,r11
8001463e:	10 9a       	mov	r10,r8
80014640:	12 9b       	mov	r11,r9
80014642:	f0 16 00 09 	mcall	r6[36]
80014646:	18 98       	mov	r8,r12
80014648:	ef 48 ff fc 	st.w	r7[-4],r8
8001464c:	ee fc ff fc 	ld.w	r12,r7[-4]
80014650:	f0 16 00 02 	mcall	r6[8]
80014654:	30 05       	mov	r5,0
80014656:	e0 68 2d 18 	mov	r8,11544
8001465a:	ea 18 54 44 	orh	r8,0x5444
8001465e:	e0 69 21 fb 	mov	r9,8699
80014662:	ea 19 40 09 	orh	r9,0x4009
80014666:	f0 16 00 82 	mcall	r6[520]
8001466a:	18 98       	mov	r8,r12
8001466c:	58 08       	cp.w	r8,0
8001466e:	c0 20       	breq	80014672 <calc_smaller_angle+0xca>
80014670:	30 15       	mov	r5,1
80014672:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80014676:	cd 41       	brne	8001461e <calc_smaller_angle+0x76>
	return out;
80014678:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001467c:	10 9c       	mov	r12,r8
8001467e:	2f ed       	sub	sp,-8
80014680:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80014684:	80 01       	ld.sh	r1,r0[0x0]
80014686:	44 36       	lddsp	r6,sp[0x10c]

80014688 <scalar_product>:


float static inline scalar_product(const float u[], const float v[])
{
80014688:	eb cd 40 80 	pushm	r7,lr
8001468c:	1a 97       	mov	r7,sp
8001468e:	20 3d       	sub	sp,12
80014690:	ef 4c ff f8 	st.w	r7[-8],r12
80014694:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
80014698:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001469c:	70 09       	ld.w	r9,r8[0x0]
8001469e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800146a2:	70 08       	ld.w	r8,r8[0x0]
800146a4:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800146a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800146ac:	2f c8       	sub	r8,-4
800146ae:	70 0a       	ld.w	r10,r8[0x0]
800146b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800146b4:	2f c8       	sub	r8,-4
800146b6:	70 08       	ld.w	r8,r8[0x0]
800146b8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800146bc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800146c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800146c4:	2f 88       	sub	r8,-8
800146c6:	70 0a       	ld.w	r10,r8[0x0]
800146c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800146cc:	2f 88       	sub	r8,-8
800146ce:	70 08       	ld.w	r8,r8[0x0]
800146d0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800146d4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800146d8:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
800146dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800146e0:	10 9c       	mov	r12,r8
800146e2:	2f dd       	sub	sp,-12
800146e4:	e3 cd 80 80 	ldm	sp++,r7,pc

800146e8 <cross_product>:


void static inline cross_product(const float u[], const float v[], float out[])
{
800146e8:	eb cd 40 80 	pushm	r7,lr
800146ec:	1a 97       	mov	r7,sp
800146ee:	20 3d       	sub	sp,12
800146f0:	ef 4c ff fc 	st.w	r7[-4],r12
800146f4:	ef 4b ff f8 	st.w	r7[-8],r11
800146f8:	ef 4a ff f4 	st.w	r7[-12],r10
	out[0] = u[1] * v[2] - u[2] * v[1];
800146fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014700:	2f c8       	sub	r8,-4
80014702:	70 09       	ld.w	r9,r8[0x0]
80014704:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014708:	2f 88       	sub	r8,-8
8001470a:	70 08       	ld.w	r8,r8[0x0]
8001470c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80014710:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014714:	2f 88       	sub	r8,-8
80014716:	70 0a       	ld.w	r10,r8[0x0]
80014718:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001471c:	2f c8       	sub	r8,-4
8001471e:	70 08       	ld.w	r8,r8[0x0]
80014720:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80014724:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80014728:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001472c:	91 09       	st.w	r8[0x0],r9
	out[1] = u[2] * v[0] - u[0] * v[2];
8001472e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014732:	2f c8       	sub	r8,-4
80014734:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014738:	2f 89       	sub	r9,-8
8001473a:	72 0a       	ld.w	r10,r9[0x0]
8001473c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014740:	72 09       	ld.w	r9,r9[0x0]
80014742:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80014746:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001474a:	72 0b       	ld.w	r11,r9[0x0]
8001474c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014750:	2f 89       	sub	r9,-8
80014752:	72 09       	ld.w	r9,r9[0x0]
80014754:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80014758:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001475c:	91 09       	st.w	r8[0x0],r9
	out[2] = u[0] * v[1] - u[1] * v[0];
8001475e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014762:	2f 88       	sub	r8,-8
80014764:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014768:	72 0a       	ld.w	r10,r9[0x0]
8001476a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001476e:	2f c9       	sub	r9,-4
80014770:	72 09       	ld.w	r9,r9[0x0]
80014772:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80014776:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001477a:	2f c9       	sub	r9,-4
8001477c:	72 0b       	ld.w	r11,r9[0x0]
8001477e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014782:	72 09       	ld.w	r9,r9[0x0]
80014784:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80014788:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001478c:	91 09       	st.w	r8[0x0],r9
}
8001478e:	2f dd       	sub	sp,-12
80014790:	e3 cd 80 80 	ldm	sp++,r7,pc

80014794 <quat_multi>:


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
80014794:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80014798:	1a 97       	mov	r7,sp
8001479a:	20 7d       	sub	sp,28
8001479c:	4b d6       	lddpc	r6,80014890 <quat_multi+0xfc>
8001479e:	1e 26       	rsub	r6,pc
800147a0:	ee c8 ff ec 	sub	r8,r7,-20
800147a4:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
800147a6:	70 2a       	ld.w	r10,r8[0x8]
800147a8:	70 79       	ld.w	r9,r8[0x1c]
800147aa:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800147ae:	70 3b       	ld.w	r11,r8[0xc]
800147b0:	70 69       	ld.w	r9,r8[0x18]
800147b2:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800147b6:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800147ba:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
800147be:	70 3a       	ld.w	r10,r8[0xc]
800147c0:	70 59       	ld.w	r9,r8[0x14]
800147c2:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800147c6:	70 1b       	ld.w	r11,r8[0x4]
800147c8:	70 79       	ld.w	r9,r8[0x1c]
800147ca:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800147ce:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800147d2:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
800147d6:	70 1a       	ld.w	r10,r8[0x4]
800147d8:	70 69       	ld.w	r9,r8[0x18]
800147da:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800147de:	70 2b       	ld.w	r11,r8[0x8]
800147e0:	70 59       	ld.w	r9,r8[0x14]
800147e2:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800147e6:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800147ea:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
800147ee:	70 4a       	ld.w	r10,r8[0x10]
800147f0:	70 19       	ld.w	r9,r8[0x4]
800147f2:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800147f6:	70 0b       	ld.w	r11,r8[0x0]
800147f8:	70 59       	ld.w	r9,r8[0x14]
800147fa:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800147fe:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80014802:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014806:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001480a:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
8001480e:	70 4a       	ld.w	r10,r8[0x10]
80014810:	70 29       	ld.w	r9,r8[0x8]
80014812:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80014816:	70 0b       	ld.w	r11,r8[0x0]
80014818:	70 69       	ld.w	r9,r8[0x18]
8001481a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001481e:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80014822:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014826:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001482a:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8001482e:	70 4a       	ld.w	r10,r8[0x10]
80014830:	70 39       	ld.w	r9,r8[0xc]
80014832:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80014836:	70 0b       	ld.w	r11,r8[0x0]
80014838:	70 79       	ld.w	r9,r8[0x1c]
8001483a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001483e:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80014842:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014846:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001484a:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8001484e:	70 0a       	ld.w	r10,r8[0x0]
80014850:	70 49       	ld.w	r9,r8[0x10]
80014852:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
80014856:	f0 c9 ff f0 	sub	r9,r8,-16
8001485a:	2f c9       	sub	r9,-4
8001485c:	2f c8       	sub	r8,-4
8001485e:	12 9b       	mov	r11,r9
80014860:	10 9c       	mov	r12,r8
80014862:	c1 3f       	rcall	80014688 <scalar_product>
80014864:	18 98       	mov	r8,r12
80014866:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8001486a:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
8001486e:	0a 98       	mov	r8,r5
80014870:	ee c9 00 1c 	sub	r9,r7,28
80014874:	20 08       	sub	r8,0
80014876:	20 09       	sub	r9,0
80014878:	72 0a       	ld.w	r10,r9[0x0]
8001487a:	91 0a       	st.w	r8[0x0],r10
8001487c:	72 1a       	ld.w	r10,r9[0x4]
8001487e:	91 1a       	st.w	r8[0x4],r10
80014880:	72 2a       	ld.w	r10,r9[0x8]
80014882:	91 2a       	st.w	r8[0x8],r10
80014884:	72 39       	ld.w	r9,r9[0xc]
80014886:	91 39       	st.w	r8[0xc],r9
}
80014888:	0a 9c       	mov	r12,r5
8001488a:	2f 9d       	sub	sp,-28
8001488c:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80014890:	80 01       	ld.sh	r1,r0[0x0]
80014892:	46 22       	lddsp	r2,sp[0x188]

80014894 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
80014894:	eb cd 40 80 	pushm	r7,lr
80014898:	1a 97       	mov	r7,sp
8001489a:	20 5d       	sub	sp,20
8001489c:	ee c9 ff f8 	sub	r9,r7,-8
800148a0:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
800148a2:	72 08       	ld.w	r8,r9[0x0]
800148a4:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
800148a8:	30 08       	mov	r8,0
800148aa:	ef 48 ff fc 	st.w	r7[-4],r8
800148ae:	c1 58       	rjmp	800148d8 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
800148b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800148b4:	ee fb ff fc 	ld.w	r11,r7[-4]
800148b8:	2f fb       	sub	r11,-1
800148ba:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
800148be:	ee 1b 80 00 	eorh	r11,0x8000
800148c2:	2f f8       	sub	r8,-1
800148c4:	a3 68       	lsl	r8,0x2
800148c6:	ee 08 00 08 	add	r8,r7,r8
800148ca:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
800148ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800148d2:	2f f8       	sub	r8,-1
800148d4:	ef 48 ff fc 	st.w	r7[-4],r8
800148d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800148dc:	58 28       	cp.w	r8,2
800148de:	fe 9a ff e9 	brle	800148b0 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
800148e2:	14 98       	mov	r8,r10
800148e4:	ee c9 00 14 	sub	r9,r7,20
800148e8:	20 08       	sub	r8,0
800148ea:	20 09       	sub	r9,0
800148ec:	72 0b       	ld.w	r11,r9[0x0]
800148ee:	91 0b       	st.w	r8[0x0],r11
800148f0:	72 1b       	ld.w	r11,r9[0x4]
800148f2:	91 1b       	st.w	r8[0x4],r11
800148f4:	72 2b       	ld.w	r11,r9[0x8]
800148f6:	91 2b       	st.w	r8[0x8],r11
800148f8:	72 39       	ld.w	r9,r9[0xc]
800148fa:	91 39       	st.w	r8[0xc],r9
}
800148fc:	14 9c       	mov	r12,r10
800148fe:	2f bd       	sub	sp,-20
80014900:	e3 cd 80 80 	ldm	sp++,r7,pc

80014904 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
80014904:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80014908:	1a 97       	mov	r7,sp
8001490a:	20 cd       	sub	sp,48
8001490c:	4b c6       	lddpc	r6,800149fc <quat_global_to_local+0xf8>
8001490e:	1e 26       	rsub	r6,pc
80014910:	ee c5 ff ec 	sub	r5,r7,-20
80014914:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
80014916:	ee ca 00 10 	sub	r10,r7,16
8001491a:	20 4d       	sub	sp,16
8001491c:	1a 98       	mov	r8,sp
8001491e:	0a 99       	mov	r9,r5
80014920:	20 08       	sub	r8,0
80014922:	20 09       	sub	r9,0
80014924:	72 0b       	ld.w	r11,r9[0x0]
80014926:	91 0b       	st.w	r8[0x0],r11
80014928:	72 1b       	ld.w	r11,r9[0x4]
8001492a:	91 1b       	st.w	r8[0x4],r11
8001492c:	72 2b       	ld.w	r11,r9[0x8]
8001492e:	91 2b       	st.w	r8[0x8],r11
80014930:	72 39       	ld.w	r9,r9[0xc]
80014932:	91 39       	st.w	r8[0xc],r9
80014934:	14 9c       	mov	r12,r10
80014936:	ca ff       	rcall	80014894 <quat_inv>
80014938:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8001493a:	ee ca 00 20 	sub	r10,r7,32
8001493e:	20 4d       	sub	sp,16
80014940:	1a 98       	mov	r8,sp
80014942:	ea c9 ff f0 	sub	r9,r5,-16
80014946:	20 08       	sub	r8,0
80014948:	20 09       	sub	r9,0
8001494a:	72 0b       	ld.w	r11,r9[0x0]
8001494c:	91 0b       	st.w	r8[0x0],r11
8001494e:	72 1b       	ld.w	r11,r9[0x4]
80014950:	91 1b       	st.w	r8[0x4],r11
80014952:	72 2b       	ld.w	r11,r9[0x8]
80014954:	91 2b       	st.w	r8[0x8],r11
80014956:	72 39       	ld.w	r9,r9[0xc]
80014958:	91 39       	st.w	r8[0xc],r9
8001495a:	20 4d       	sub	sp,16
8001495c:	1a 98       	mov	r8,sp
8001495e:	ee c9 00 10 	sub	r9,r7,16
80014962:	20 08       	sub	r8,0
80014964:	20 09       	sub	r9,0
80014966:	72 0b       	ld.w	r11,r9[0x0]
80014968:	91 0b       	st.w	r8[0x0],r11
8001496a:	72 1b       	ld.w	r11,r9[0x4]
8001496c:	91 1b       	st.w	r8[0x4],r11
8001496e:	72 2b       	ld.w	r11,r9[0x8]
80014970:	91 2b       	st.w	r8[0x8],r11
80014972:	72 39       	ld.w	r9,r9[0xc]
80014974:	91 39       	st.w	r8[0xc],r9
80014976:	14 9c       	mov	r12,r10
80014978:	c0 ef       	rcall	80014794 <quat_multi>
8001497a:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
8001497c:	ee ca 00 30 	sub	r10,r7,48
80014980:	20 4d       	sub	sp,16
80014982:	1a 98       	mov	r8,sp
80014984:	0a 99       	mov	r9,r5
80014986:	20 08       	sub	r8,0
80014988:	20 09       	sub	r9,0
8001498a:	72 0b       	ld.w	r11,r9[0x0]
8001498c:	91 0b       	st.w	r8[0x0],r11
8001498e:	72 1b       	ld.w	r11,r9[0x4]
80014990:	91 1b       	st.w	r8[0x4],r11
80014992:	72 2b       	ld.w	r11,r9[0x8]
80014994:	91 2b       	st.w	r8[0x8],r11
80014996:	72 39       	ld.w	r9,r9[0xc]
80014998:	91 39       	st.w	r8[0xc],r9
8001499a:	20 4d       	sub	sp,16
8001499c:	1a 98       	mov	r8,sp
8001499e:	ee c9 00 20 	sub	r9,r7,32
800149a2:	20 08       	sub	r8,0
800149a4:	20 09       	sub	r9,0
800149a6:	72 0b       	ld.w	r11,r9[0x0]
800149a8:	91 0b       	st.w	r8[0x0],r11
800149aa:	72 1b       	ld.w	r11,r9[0x4]
800149ac:	91 1b       	st.w	r8[0x4],r11
800149ae:	72 2b       	ld.w	r11,r9[0x8]
800149b0:	91 2b       	st.w	r8[0x8],r11
800149b2:	72 39       	ld.w	r9,r9[0xc]
800149b4:	91 39       	st.w	r8[0xc],r9
800149b6:	14 9c       	mov	r12,r10
800149b8:	ce ee       	rcall	80014794 <quat_multi>
800149ba:	2f 8d       	sub	sp,-32
800149bc:	ee c8 00 20 	sub	r8,r7,32
800149c0:	ee c9 00 30 	sub	r9,r7,48
800149c4:	20 08       	sub	r8,0
800149c6:	20 09       	sub	r9,0
800149c8:	72 0a       	ld.w	r10,r9[0x0]
800149ca:	91 0a       	st.w	r8[0x0],r10
800149cc:	72 1a       	ld.w	r10,r9[0x4]
800149ce:	91 1a       	st.w	r8[0x4],r10
800149d0:	72 2a       	ld.w	r10,r9[0x8]
800149d2:	91 2a       	st.w	r8[0x8],r10
800149d4:	72 39       	ld.w	r9,r9[0xc]
800149d6:	91 39       	st.w	r8[0xc],r9

	return qtmp;
800149d8:	06 98       	mov	r8,r3
800149da:	ee c9 00 20 	sub	r9,r7,32
800149de:	20 08       	sub	r8,0
800149e0:	20 09       	sub	r9,0
800149e2:	72 0a       	ld.w	r10,r9[0x0]
800149e4:	91 0a       	st.w	r8[0x0],r10
800149e6:	72 1a       	ld.w	r10,r9[0x4]
800149e8:	91 1a       	st.w	r8[0x4],r10
800149ea:	72 2a       	ld.w	r10,r9[0x8]
800149ec:	91 2a       	st.w	r8[0x8],r10
800149ee:	72 39       	ld.w	r9,r9[0xc]
800149f0:	91 39       	st.w	r8[0xc],r9
}
800149f2:	06 9c       	mov	r12,r3
800149f4:	2f 4d       	sub	sp,-48
800149f6:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800149fa:	00 00       	add	r0,r0
800149fc:	80 01       	ld.sh	r1,r0[0x0]
800149fe:	47 92       	lddsp	r2,sp[0x1e4]

80014a00 <fast_sqrt>:
	
	return qtmp;
}

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
80014a00:	eb cd 40 c0 	pushm	r6-r7,lr
80014a04:	1a 97       	mov	r7,sp
80014a06:	20 2d       	sub	sp,8
80014a08:	4b 26       	lddpc	r6,80014ad0 <fast_sqrt+0xd0>
80014a0a:	1e 26       	rsub	r6,pc
80014a0c:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
80014a10:	30 18       	mov	r8,1
80014a12:	ee fa ff f8 	ld.w	r10,r7[-8]
80014a16:	30 09       	mov	r9,0
80014a18:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80014a1c:	e0 8c 00 03 	brvs	80014a22 <fast_sqrt+0x22>
80014a20:	c0 25       	brlt	80014a24 <fast_sqrt+0x24>
80014a22:	30 08       	mov	r8,0
80014a24:	5c 58       	castu.b	r8
80014a26:	c0 30       	breq	80014a2c <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
80014a28:	30 08       	mov	r8,0
80014a2a:	c4 f8       	rjmp	80014ac8 <fast_sqrt+0xc8>
	}
	float result=1.0;
80014a2c:	fc 18 3f 80 	movh	r8,0x3f80
80014a30:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80014a34:	ee fb ff fc 	ld.w	r11,r7[-4]
80014a38:	ee fc ff f8 	ld.w	r12,r7[-8]
80014a3c:	f0 16 00 08 	mcall	r6[32]
80014a40:	18 98       	mov	r8,r12
80014a42:	10 99       	mov	r9,r8
80014a44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014a48:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80014a4c:	fc 18 3f 00 	movh	r8,0x3f00
80014a50:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80014a54:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80014a58:	ee fb ff fc 	ld.w	r11,r7[-4]
80014a5c:	ee fc ff f8 	ld.w	r12,r7[-8]
80014a60:	f0 16 00 08 	mcall	r6[32]
80014a64:	18 98       	mov	r8,r12
80014a66:	10 99       	mov	r9,r8
80014a68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014a6c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80014a70:	fc 18 3f 00 	movh	r8,0x3f00
80014a74:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80014a78:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80014a7c:	ee fb ff fc 	ld.w	r11,r7[-4]
80014a80:	ee fc ff f8 	ld.w	r12,r7[-8]
80014a84:	f0 16 00 08 	mcall	r6[32]
80014a88:	18 98       	mov	r8,r12
80014a8a:	10 99       	mov	r9,r8
80014a8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014a90:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80014a94:	fc 18 3f 00 	movh	r8,0x3f00
80014a98:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80014a9c:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80014aa0:	ee fb ff fc 	ld.w	r11,r7[-4]
80014aa4:	ee fc ff f8 	ld.w	r12,r7[-8]
80014aa8:	f0 16 00 08 	mcall	r6[32]
80014aac:	18 98       	mov	r8,r12
80014aae:	10 99       	mov	r9,r8
80014ab0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014ab4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80014ab8:	fc 18 3f 00 	movh	r8,0x3f00
80014abc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80014ac0:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
80014ac4:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80014ac8:	10 9c       	mov	r12,r8
80014aca:	2f ed       	sub	sp,-8
80014acc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014ad0:	80 01       	ld.sh	r1,r0[0x0]
80014ad2:	48 8e       	lddpc	lr,80014af0 <vector_norm_sqr+0x1c>

80014ad4 <vector_norm_sqr>:

float static inline vector_norm_sqr(float u[])
{
80014ad4:	eb cd 40 c0 	pushm	r6-r7,lr
80014ad8:	1a 97       	mov	r7,sp
80014ada:	20 2d       	sub	sp,8
80014adc:	48 a6       	lddpc	r6,80014b04 <vector_norm_sqr+0x30>
80014ade:	1e 26       	rsub	r6,pc
80014ae0:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
80014ae4:	ee fb ff f8 	ld.w	r11,r7[-8]
80014ae8:	ee fc ff f8 	ld.w	r12,r7[-8]
80014aec:	fe b0 fd ce 	rcall	80014688 <scalar_product>
80014af0:	18 98       	mov	r8,r12
80014af2:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
80014af6:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80014afa:	10 9c       	mov	r12,r8
80014afc:	2f ed       	sub	sp,-8
80014afe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014b02:	00 00       	add	r0,r0
80014b04:	80 01       	ld.sh	r1,r0[0x0]
80014b06:	49 62       	lddpc	r2,80014b5c <vector_normalize+0x28>

80014b08 <vector_norm>:

float static inline vector_norm(float u[])
{
80014b08:	eb cd 40 c0 	pushm	r6-r7,lr
80014b0c:	1a 97       	mov	r7,sp
80014b0e:	20 1d       	sub	sp,4
80014b10:	48 86       	lddpc	r6,80014b30 <vector_norm+0x28>
80014b12:	1e 26       	rsub	r6,pc
80014b14:	ef 4c ff fc 	st.w	r7[-4],r12
	return fast_sqrt(vector_norm_sqr(u));
80014b18:	ee fc ff fc 	ld.w	r12,r7[-4]
80014b1c:	cd cf       	rcall	80014ad4 <vector_norm_sqr>
80014b1e:	18 98       	mov	r8,r12
80014b20:	10 9c       	mov	r12,r8
80014b22:	c6 ff       	rcall	80014a00 <fast_sqrt>
80014b24:	18 98       	mov	r8,r12
}
80014b26:	10 9c       	mov	r12,r8
80014b28:	2f fd       	sub	sp,-4
80014b2a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014b2e:	00 00       	add	r0,r0
80014b30:	80 01       	ld.sh	r1,r0[0x0]
80014b32:	49 96       	lddpc	r6,80014b94 <vector_normalize+0x60>

80014b34 <vector_normalize>:

void static inline vector_normalize(float v[], float u[])
{
80014b34:	eb cd 40 e0 	pushm	r5-r7,lr
80014b38:	1a 97       	mov	r7,sp
80014b3a:	20 4d       	sub	sp,16
80014b3c:	49 a6       	lddpc	r6,80014ba4 <vector_normalize+0x70>
80014b3e:	1e 26       	rsub	r6,pc
80014b40:	ef 4c ff f4 	st.w	r7[-12],r12
80014b44:	ef 4b ff f0 	st.w	r7[-16],r11
	int i;
	float norm = vector_norm(v);
80014b48:	ee fc ff f4 	ld.w	r12,r7[-12]
80014b4c:	cd ef       	rcall	80014b08 <vector_norm>
80014b4e:	18 98       	mov	r8,r12
80014b50:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i = 0; i < 3; ++i)
80014b54:	30 08       	mov	r8,0
80014b56:	ef 48 ff f8 	st.w	r7[-8],r8
80014b5a:	c1 c8       	rjmp	80014b92 <vector_normalize+0x5e>
	{
		u[i] = v[i] / norm;
80014b5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014b60:	a3 68       	lsl	r8,0x2
80014b62:	ee f9 ff f0 	ld.w	r9,r7[-16]
80014b66:	f2 08 00 05 	add	r5,r9,r8
80014b6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014b6e:	a3 68       	lsl	r8,0x2
80014b70:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014b74:	f2 08 00 08 	add	r8,r9,r8
80014b78:	70 08       	ld.w	r8,r8[0x0]
80014b7a:	ee fb ff fc 	ld.w	r11,r7[-4]
80014b7e:	10 9c       	mov	r12,r8
80014b80:	f0 16 00 08 	mcall	r6[32]
80014b84:	18 98       	mov	r8,r12
80014b86:	8b 08       	st.w	r5[0x0],r8

void static inline vector_normalize(float v[], float u[])
{
	int i;
	float norm = vector_norm(v);
	for (i = 0; i < 3; ++i)
80014b88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014b8c:	2f f8       	sub	r8,-1
80014b8e:	ef 48 ff f8 	st.w	r7[-8],r8
80014b92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014b96:	58 28       	cp.w	r8,2
80014b98:	fe 9a ff e2 	brle	80014b5c <vector_normalize+0x28>
	{
		u[i] = v[i] / norm;
	}
}
80014b9c:	2f cd       	sub	sp,-16
80014b9e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80014ba2:	00 00       	add	r0,r0
80014ba4:	80 01       	ld.sh	r1,r0[0x0]
80014ba6:	49 c2       	lddpc	r2,80014c14 <interpolate+0x28>

80014ba8 <sigmoid>:
	else {
		return (x*x*x/(SQR(soft_zone_width) + SQR(x)));
	}
};

static float inline sigmoid(float x) {
80014ba8:	eb cd 40 c0 	pushm	r6-r7,lr
80014bac:	1a 97       	mov	r7,sp
80014bae:	20 1d       	sub	sp,4
80014bb0:	48 e6       	lddpc	r6,80014be8 <sigmoid+0x40>
80014bb2:	1e 26       	rsub	r6,pc
80014bb4:	ef 4c ff fc 	st.w	r7[-4],r12
	return (x/fast_sqrt(1+SQR(x)));
80014bb8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014bbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014bc0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80014bc4:	fc 18 3f 80 	movh	r8,0x3f80
80014bc8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014bcc:	10 9c       	mov	r12,r8
80014bce:	c1 9f       	rcall	80014a00 <fast_sqrt>
80014bd0:	18 98       	mov	r8,r12
80014bd2:	10 9b       	mov	r11,r8
80014bd4:	ee fc ff fc 	ld.w	r12,r7[-4]
80014bd8:	f0 16 00 08 	mcall	r6[32]
80014bdc:	18 98       	mov	r8,r12
};
80014bde:	10 9c       	mov	r12,r8
80014be0:	2f fd       	sub	sp,-4
80014be2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014be6:	00 00       	add	r0,r0
80014be8:	80 01       	ld.sh	r1,r0[0x0]
80014bea:	4a 36       	lddpc	r6,80014c74 <mav_array_memcpy+0x4>

80014bec <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80014bec:	eb cd 40 c0 	pushm	r6-r7,lr
80014bf0:	1a 97       	mov	r7,sp
80014bf2:	20 6d       	sub	sp,24
80014bf4:	49 e6       	lddpc	r6,80014c6c <interpolate+0x80>
80014bf6:	1e 26       	rsub	r6,pc
80014bf8:	ef 4c ff f8 	st.w	r7[-8],r12
80014bfc:	ef 4b ff f4 	st.w	r7[-12],r11
80014c00:	ef 4a ff f0 	st.w	r7[-16],r10
80014c04:	ef 49 ff ec 	st.w	r7[-20],r9
80014c08:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80014c0c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014c10:	ee f8 ff f0 	ld.w	r8,r7[-16]
80014c14:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80014c18:	c0 41       	brne	80014c20 <interpolate+0x34>
	{
		return y1;
80014c1a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80014c1e:	c2 38       	rjmp	80014c64 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80014c20:	ee f9 ff e8 	ld.w	r9,r7[-24]
80014c24:	ee f8 ff ec 	ld.w	r8,r7[-20]
80014c28:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80014c2c:	ee fa ff f8 	ld.w	r10,r7[-8]
80014c30:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014c34:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80014c38:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80014c3c:	ee fa ff f0 	ld.w	r10,r7[-16]
80014c40:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014c44:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80014c48:	12 9b       	mov	r11,r9
80014c4a:	10 9c       	mov	r12,r8
80014c4c:	f0 16 00 08 	mcall	r6[32]
80014c50:	18 98       	mov	r8,r12
80014c52:	10 99       	mov	r9,r8
80014c54:	ee f8 ff ec 	ld.w	r8,r7[-20]
80014c58:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014c5c:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80014c60:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80014c64:	10 9c       	mov	r12,r8
80014c66:	2f ad       	sub	sp,-24
80014c68:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014c6c:	80 01       	ld.sh	r1,r0[0x0]
80014c6e:	4a 7a       	lddpc	r10,80014d08 <init_rate_stabilisation+0x4>

80014c70 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80014c70:	eb cd 40 c0 	pushm	r6-r7,lr
80014c74:	1a 97       	mov	r7,sp
80014c76:	20 3d       	sub	sp,12
80014c78:	49 06       	lddpc	r6,80014cb8 <mav_array_memcpy+0x48>
80014c7a:	1e 26       	rsub	r6,pc
80014c7c:	ef 4c ff fc 	st.w	r7[-4],r12
80014c80:	ef 4b ff f8 	st.w	r7[-8],r11
80014c84:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80014c88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014c8c:	58 08       	cp.w	r8,0
80014c8e:	c0 91       	brne	80014ca0 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80014c90:	ee fa ff f4 	ld.w	r10,r7[-12]
80014c94:	30 0b       	mov	r11,0
80014c96:	ee fc ff fc 	ld.w	r12,r7[-4]
80014c9a:	f0 16 00 31 	mcall	r6[196]
80014c9e:	c0 98       	rjmp	80014cb0 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80014ca0:	ee fa ff f4 	ld.w	r10,r7[-12]
80014ca4:	ee fb ff f8 	ld.w	r11,r7[-8]
80014ca8:	ee fc ff fc 	ld.w	r12,r7[-4]
80014cac:	f0 16 00 1b 	mcall	r6[108]
	}
}
80014cb0:	2f dd       	sub	sp,-12
80014cb2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014cb6:	00 00       	add	r0,r0
80014cb8:	80 01       	ld.sh	r1,r0[0x0]
80014cba:	4a fe       	lddpc	lr,80014d74 <init_rate_stabilisation+0x70>

80014cbc <get_rate_stabiliser>:
Stabiliser_t rate_stabiliser, attitude_stabiliser, velocity_stabiliser;
float yaw_coordination_velocity;

central_data_t *centralData;

Stabiliser_t* get_rate_stabiliser() { return &rate_stabiliser;}
80014cbc:	eb cd 40 c0 	pushm	r6-r7,lr
80014cc0:	1a 97       	mov	r7,sp
80014cc2:	48 46       	lddpc	r6,80014cd0 <get_rate_stabiliser+0x14>
80014cc4:	1e 26       	rsub	r6,pc
80014cc6:	ec f8 01 b8 	ld.w	r8,r6[440]
80014cca:	10 9c       	mov	r12,r8
80014ccc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014cd0:	80 01       	ld.sh	r1,r0[0x0]
80014cd2:	4b 48       	lddpc	r8,80014da0 <init_rate_stabilisation+0x9c>

80014cd4 <get_attitude_stabiliser>:
Stabiliser_t* get_attitude_stabiliser() { return &attitude_stabiliser;}
80014cd4:	eb cd 40 c0 	pushm	r6-r7,lr
80014cd8:	1a 97       	mov	r7,sp
80014cda:	48 46       	lddpc	r6,80014ce8 <get_attitude_stabiliser+0x14>
80014cdc:	1e 26       	rsub	r6,pc
80014cde:	ec f8 01 b0 	ld.w	r8,r6[432]
80014ce2:	10 9c       	mov	r12,r8
80014ce4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014ce8:	80 01       	ld.sh	r1,r0[0x0]
80014cea:	4b 60       	lddpc	r0,80014dc0 <init_rate_stabilisation+0xbc>

80014cec <get_velocity_stabiliser>:
Stabiliser_t* get_velocity_stabiliser() { return &velocity_stabiliser;}
80014cec:	eb cd 40 c0 	pushm	r6-r7,lr
80014cf0:	1a 97       	mov	r7,sp
80014cf2:	48 46       	lddpc	r6,80014d00 <get_velocity_stabiliser+0x14>
80014cf4:	1e 26       	rsub	r6,pc
80014cf6:	ec f8 01 6c 	ld.w	r8,r6[364]
80014cfa:	10 9c       	mov	r12,r8
80014cfc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014d00:	80 01       	ld.sh	r1,r0[0x0]
80014d02:	4b 78       	lddpc	r8,80014ddc <init_rate_stabilisation+0xd8>

80014d04 <init_rate_stabilisation>:

void init_rate_stabilisation(Stabiliser_t *stabiliser) {
80014d04:	eb cd 40 e0 	pushm	r5-r7,lr
80014d08:	1a 97       	mov	r7,sp
80014d0a:	21 3d       	sub	sp,76
80014d0c:	fe f6 02 34 	ld.w	r6,pc[564]
80014d10:	1e 26       	rsub	r6,pc
80014d12:	ef 4c ff f8 	st.w	r7[-8],r12
	int i=0;
80014d16:	30 08       	mov	r8,0
80014d18:	ef 48 ff fc 	st.w	r7[-4],r8
	// initialise roll and pitch controllers
	for (i=0; i<2; i++) {
80014d1c:	30 08       	mov	r8,0
80014d1e:	ef 48 ff fc 	st.w	r7[-4],r8
80014d22:	c7 d8       	rjmp	80014e1c <init_rate_stabilisation+0x118>
		(stabiliser->rpy_controller[i]).p_gain=0.15;
80014d24:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014d28:	ee fa ff f8 	ld.w	r10,r7[-8]
80014d2c:	12 98       	mov	r8,r9
80014d2e:	a5 68       	lsl	r8,0x4
80014d30:	12 08       	add	r8,r9
80014d32:	a3 68       	lsl	r8,0x2
80014d34:	f4 08 00 08 	add	r8,r10,r8
80014d38:	e0 69 99 9a 	mov	r9,39322
80014d3c:	ea 19 3e 19 	orh	r9,0x3e19
80014d40:	91 09       	st.w	r8[0x0],r9
		(stabiliser->rpy_controller[i]).last_update=get_time_ticks();	
80014d42:	ee f5 ff fc 	ld.w	r5,r7[-4]
80014d46:	f0 16 00 2d 	mcall	r6[180]
80014d4a:	18 99       	mov	r9,r12
80014d4c:	ee fa ff f8 	ld.w	r10,r7[-8]
80014d50:	0a 98       	mov	r8,r5
80014d52:	a5 68       	lsl	r8,0x4
80014d54:	0a 08       	add	r8,r5
80014d56:	a3 68       	lsl	r8,0x2
80014d58:	f4 08 00 08 	add	r8,r10,r8
80014d5c:	2c 88       	sub	r8,-56
80014d5e:	91 09       	st.w	r8[0x0],r9
		(stabiliser->rpy_controller[i]).clip_min=-0.9;
80014d60:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014d64:	ee fa ff f8 	ld.w	r10,r7[-8]
80014d68:	12 98       	mov	r8,r9
80014d6a:	a5 68       	lsl	r8,0x4
80014d6c:	12 08       	add	r8,r9
80014d6e:	2f f8       	sub	r8,-1
80014d70:	e0 69 66 66 	mov	r9,26214
80014d74:	ea 19 bf 66 	orh	r9,0xbf66
80014d78:	f4 08 09 29 	st.w	r10[r8<<0x2],r9
		(stabiliser->rpy_controller[i]).clip_max= 0.9;
80014d7c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014d80:	ee fa ff f8 	ld.w	r10,r7[-8]
80014d84:	12 98       	mov	r8,r9
80014d86:	a5 68       	lsl	r8,0x4
80014d88:	12 08       	add	r8,r9
80014d8a:	a3 68       	lsl	r8,0x2
80014d8c:	f4 08 00 08 	add	r8,r10,r8
80014d90:	2f 88       	sub	r8,-8
80014d92:	e0 69 66 66 	mov	r9,26214
80014d96:	ea 19 3f 66 	orh	r9,0x3f66
80014d9a:	91 09       	st.w	r8[0x0],r9
		(stabiliser->rpy_controller[i]).soft_zone_width=0.0;
80014d9c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014da0:	ee fa ff f8 	ld.w	r10,r7[-8]
80014da4:	12 98       	mov	r8,r9
80014da6:	a5 68       	lsl	r8,0x4
80014da8:	12 08       	add	r8,r9
80014daa:	a3 68       	lsl	r8,0x2
80014dac:	f4 08 00 08 	add	r8,r10,r8
80014db0:	2c 08       	sub	r8,-64
80014db2:	30 09       	mov	r9,0
80014db4:	91 09       	st.w	r8[0x0],r9
		initDiff(&((stabiliser->rpy_controller)[i].differentiator), 0.2, 0.4, 0.5);
80014db6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014dba:	12 98       	mov	r8,r9
80014dbc:	a5 68       	lsl	r8,0x4
80014dbe:	12 08       	add	r8,r9
80014dc0:	a3 68       	lsl	r8,0x2
80014dc2:	2e 08       	sub	r8,-32
80014dc4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014dc8:	f2 08 00 08 	add	r8,r9,r8
80014dcc:	fc 19 3f 00 	movh	r9,0x3f00
80014dd0:	e0 6a cc cd 	mov	r10,52429
80014dd4:	ea 1a 3e cc 	orh	r10,0x3ecc
80014dd8:	e0 6b cc cd 	mov	r11,52429
80014ddc:	ea 1b 3e 4c 	orh	r11,0x3e4c
80014de0:	10 9c       	mov	r12,r8
80014de2:	f0 16 00 51 	mcall	r6[324]
		initInt(&((stabiliser->rpy_controller)[i].integrator),0.5, 1.0, 0.65);
80014de6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014dea:	12 98       	mov	r8,r9
80014dec:	a5 68       	lsl	r8,0x4
80014dee:	12 08       	add	r8,r9
80014df0:	a3 68       	lsl	r8,0x2
80014df2:	2f 48       	sub	r8,-12
80014df4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014df8:	f2 08 00 08 	add	r8,r9,r8
80014dfc:	e0 69 66 66 	mov	r9,26214
80014e00:	ea 19 3f 26 	orh	r9,0x3f26
80014e04:	fc 1a 3f 80 	movh	r10,0x3f80
80014e08:	fc 1b 3f 00 	movh	r11,0x3f00
80014e0c:	10 9c       	mov	r12,r8
80014e0e:	f0 16 00 53 	mcall	r6[332]
Stabiliser_t* get_velocity_stabiliser() { return &velocity_stabiliser;}

void init_rate_stabilisation(Stabiliser_t *stabiliser) {
	int i=0;
	// initialise roll and pitch controllers
	for (i=0; i<2; i++) {
80014e12:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014e16:	2f f8       	sub	r8,-1
80014e18:	ef 48 ff fc 	st.w	r7[-4],r8
80014e1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014e20:	58 18       	cp.w	r8,1
80014e22:	fe 9a ff 81 	brle	80014d24 <init_rate_stabilisation+0x20>
		(stabiliser->rpy_controller[i]).soft_zone_width=0.0;
		initDiff(&((stabiliser->rpy_controller)[i].differentiator), 0.2, 0.4, 0.5);
		initInt(&((stabiliser->rpy_controller)[i].integrator),0.5, 1.0, 0.65);
	}	
	// initialise yaw controller
	i=2;
80014e26:	30 28       	mov	r8,2
80014e28:	ef 48 ff fc 	st.w	r7[-4],r8
	(stabiliser->rpy_controller)[i].p_gain=0.4;
80014e2c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014e30:	ee fa ff f8 	ld.w	r10,r7[-8]
80014e34:	12 98       	mov	r8,r9
80014e36:	a5 68       	lsl	r8,0x4
80014e38:	12 08       	add	r8,r9
80014e3a:	a3 68       	lsl	r8,0x2
80014e3c:	f4 08 00 08 	add	r8,r10,r8
80014e40:	e0 69 cc cd 	mov	r9,52429
80014e44:	ea 19 3e cc 	orh	r9,0x3ecc
80014e48:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller)[i].last_update=get_time_ticks();	
80014e4a:	ee f5 ff fc 	ld.w	r5,r7[-4]
80014e4e:	f0 16 00 2d 	mcall	r6[180]
80014e52:	18 99       	mov	r9,r12
80014e54:	ee fa ff f8 	ld.w	r10,r7[-8]
80014e58:	0a 98       	mov	r8,r5
80014e5a:	a5 68       	lsl	r8,0x4
80014e5c:	0a 08       	add	r8,r5
80014e5e:	a3 68       	lsl	r8,0x2
80014e60:	f4 08 00 08 	add	r8,r10,r8
80014e64:	2c 88       	sub	r8,-56
80014e66:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller)[i].clip_min=-0.9;
80014e68:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014e6c:	ee fa ff f8 	ld.w	r10,r7[-8]
80014e70:	12 98       	mov	r8,r9
80014e72:	a5 68       	lsl	r8,0x4
80014e74:	12 08       	add	r8,r9
80014e76:	2f f8       	sub	r8,-1
80014e78:	e0 69 66 66 	mov	r9,26214
80014e7c:	ea 19 bf 66 	orh	r9,0xbf66
80014e80:	f4 08 09 29 	st.w	r10[r8<<0x2],r9
	(stabiliser->rpy_controller)[i].clip_max= 0.9;
80014e84:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014e88:	ee fa ff f8 	ld.w	r10,r7[-8]
80014e8c:	12 98       	mov	r8,r9
80014e8e:	a5 68       	lsl	r8,0x4
80014e90:	12 08       	add	r8,r9
80014e92:	a3 68       	lsl	r8,0x2
80014e94:	f4 08 00 08 	add	r8,r10,r8
80014e98:	2f 88       	sub	r8,-8
80014e9a:	e0 69 66 66 	mov	r9,26214
80014e9e:	ea 19 3f 66 	orh	r9,0x3f66
80014ea2:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller[i]).soft_zone_width=0.0;
80014ea4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014ea8:	ee fa ff f8 	ld.w	r10,r7[-8]
80014eac:	12 98       	mov	r8,r9
80014eae:	a5 68       	lsl	r8,0x4
80014eb0:	12 08       	add	r8,r9
80014eb2:	a3 68       	lsl	r8,0x2
80014eb4:	f4 08 00 08 	add	r8,r10,r8
80014eb8:	2c 08       	sub	r8,-64
80014eba:	30 09       	mov	r9,0
80014ebc:	91 09       	st.w	r8[0x0],r9
	initDiff(&((stabiliser->rpy_controller)[i].differentiator), 0.0, 0.4, 0.5);
80014ebe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014ec2:	12 98       	mov	r8,r9
80014ec4:	a5 68       	lsl	r8,0x4
80014ec6:	12 08       	add	r8,r9
80014ec8:	a3 68       	lsl	r8,0x2
80014eca:	2e 08       	sub	r8,-32
80014ecc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014ed0:	f2 08 00 08 	add	r8,r9,r8
80014ed4:	fc 19 3f 00 	movh	r9,0x3f00
80014ed8:	e0 6a cc cd 	mov	r10,52429
80014edc:	ea 1a 3e cc 	orh	r10,0x3ecc
80014ee0:	30 0b       	mov	r11,0
80014ee2:	10 9c       	mov	r12,r8
80014ee4:	f0 16 00 51 	mcall	r6[324]
	initInt(&((stabiliser->rpy_controller)[i].integrator),0.5, 0.2, 0.1);
80014ee8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014eec:	12 98       	mov	r8,r9
80014eee:	a5 68       	lsl	r8,0x4
80014ef0:	12 08       	add	r8,r9
80014ef2:	a3 68       	lsl	r8,0x2
80014ef4:	2f 48       	sub	r8,-12
80014ef6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014efa:	f2 08 00 08 	add	r8,r9,r8
80014efe:	e0 69 cc cd 	mov	r9,52429
80014f02:	ea 19 3d cc 	orh	r9,0x3dcc
80014f06:	e0 6a cc cd 	mov	r10,52429
80014f0a:	ea 1a 3e 4c 	orh	r10,0x3e4c
80014f0e:	fc 1b 3f 00 	movh	r11,0x3f00
80014f12:	10 9c       	mov	r12,r8
80014f14:	f0 16 00 53 	mcall	r6[332]
	
	// initialise thrust controller
	stabiliser->thrust_controller=passthroughController();
80014f18:	ee f5 ff f8 	ld.w	r5,r7[-8]
80014f1c:	ee c8 00 4c 	sub	r8,r7,76
80014f20:	10 9c       	mov	r12,r8
80014f22:	f0 16 00 d8 	mcall	r6[864]
80014f26:	ea c8 ff 34 	sub	r8,r5,-204
80014f2a:	ee c9 00 4c 	sub	r9,r7,76
80014f2e:	34 4a       	mov	r10,68
80014f30:	12 9b       	mov	r11,r9
80014f32:	10 9c       	mov	r12,r8
80014f34:	f0 16 00 1b 	mcall	r6[108]
}
80014f38:	2e dd       	sub	sp,-76
80014f3a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80014f3e:	00 00       	add	r0,r0
80014f40:	80 01       	ld.sh	r1,r0[0x0]
80014f42:	4b 94       	lddpc	r4,80015024 <init_angle_stabilisation+0xe0>

80014f44 <init_angle_stabilisation>:

void init_angle_stabilisation(Stabiliser_t *stabiliser) {
80014f44:	eb cd 40 e0 	pushm	r5-r7,lr
80014f48:	1a 97       	mov	r7,sp
80014f4a:	21 3d       	sub	sp,76
80014f4c:	fe f6 02 00 	ld.w	r6,pc[512]
80014f50:	1e 26       	rsub	r6,pc
80014f52:	ef 4c ff f8 	st.w	r7[-8],r12
	int i=0;
80014f56:	30 08       	mov	r8,0
80014f58:	ef 48 ff fc 	st.w	r7[-4],r8
	// initialise roll and pitch controllers
	for (i=0; i<2; i++) {
80014f5c:	30 08       	mov	r8,0
80014f5e:	ef 48 ff fc 	st.w	r7[-4],r8
80014f62:	c7 38       	rjmp	80015048 <init_angle_stabilisation+0x104>
		(stabiliser->rpy_controller[i]).p_gain=1.5;
80014f64:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014f68:	ee fa ff f8 	ld.w	r10,r7[-8]
80014f6c:	12 98       	mov	r8,r9
80014f6e:	a5 68       	lsl	r8,0x4
80014f70:	12 08       	add	r8,r9
80014f72:	a3 68       	lsl	r8,0x2
80014f74:	f4 08 00 08 	add	r8,r10,r8
80014f78:	fc 19 3f c0 	movh	r9,0x3fc0
80014f7c:	91 09       	st.w	r8[0x0],r9
		(stabiliser->rpy_controller[i]).last_update=get_time_ticks();	
80014f7e:	ee f5 ff fc 	ld.w	r5,r7[-4]
80014f82:	f0 16 00 2d 	mcall	r6[180]
80014f86:	18 99       	mov	r9,r12
80014f88:	ee fa ff f8 	ld.w	r10,r7[-8]
80014f8c:	0a 98       	mov	r8,r5
80014f8e:	a5 68       	lsl	r8,0x4
80014f90:	0a 08       	add	r8,r5
80014f92:	a3 68       	lsl	r8,0x2
80014f94:	f4 08 00 08 	add	r8,r10,r8
80014f98:	2c 88       	sub	r8,-56
80014f9a:	91 09       	st.w	r8[0x0],r9
		(stabiliser->rpy_controller[i]).clip_min=-1.2;
80014f9c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014fa0:	ee fa ff f8 	ld.w	r10,r7[-8]
80014fa4:	12 98       	mov	r8,r9
80014fa6:	a5 68       	lsl	r8,0x4
80014fa8:	12 08       	add	r8,r9
80014faa:	2f f8       	sub	r8,-1
80014fac:	e0 69 99 9a 	mov	r9,39322
80014fb0:	ea 19 bf 99 	orh	r9,0xbf99
80014fb4:	f4 08 09 29 	st.w	r10[r8<<0x2],r9
		(stabiliser->rpy_controller[i]).clip_max= 1.2;
80014fb8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014fbc:	ee fa ff f8 	ld.w	r10,r7[-8]
80014fc0:	12 98       	mov	r8,r9
80014fc2:	a5 68       	lsl	r8,0x4
80014fc4:	12 08       	add	r8,r9
80014fc6:	a3 68       	lsl	r8,0x2
80014fc8:	f4 08 00 08 	add	r8,r10,r8
80014fcc:	2f 88       	sub	r8,-8
80014fce:	e0 69 99 9a 	mov	r9,39322
80014fd2:	ea 19 3f 99 	orh	r9,0x3f99
80014fd6:	91 09       	st.w	r8[0x0],r9
		(stabiliser->rpy_controller[i]).soft_zone_width=0.0;
80014fd8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014fdc:	ee fa ff f8 	ld.w	r10,r7[-8]
80014fe0:	12 98       	mov	r8,r9
80014fe2:	a5 68       	lsl	r8,0x4
80014fe4:	12 08       	add	r8,r9
80014fe6:	a3 68       	lsl	r8,0x2
80014fe8:	f4 08 00 08 	add	r8,r10,r8
80014fec:	2c 08       	sub	r8,-64
80014fee:	30 09       	mov	r9,0
80014ff0:	91 09       	st.w	r8[0x0],r9
		initDiff(&((stabiliser->rpy_controller)[i].differentiator), 0.00, 0.5, 0.1); // 0.05, 0.5, 0.05
80014ff2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014ff6:	12 98       	mov	r8,r9
80014ff8:	a5 68       	lsl	r8,0x4
80014ffa:	12 08       	add	r8,r9
80014ffc:	a3 68       	lsl	r8,0x2
80014ffe:	2e 08       	sub	r8,-32
80015000:	ee f9 ff f8 	ld.w	r9,r7[-8]
80015004:	f2 08 00 08 	add	r8,r9,r8
80015008:	e0 69 cc cd 	mov	r9,52429
8001500c:	ea 19 3d cc 	orh	r9,0x3dcc
80015010:	fc 1a 3f 00 	movh	r10,0x3f00
80015014:	30 0b       	mov	r11,0
80015016:	10 9c       	mov	r12,r8
80015018:	f0 16 00 51 	mcall	r6[324]
		initInt(&((stabiliser->rpy_controller)[i].integrator),0.0, 0.0, 0.0);
8001501c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015020:	12 98       	mov	r8,r9
80015022:	a5 68       	lsl	r8,0x4
80015024:	12 08       	add	r8,r9
80015026:	a3 68       	lsl	r8,0x2
80015028:	2f 48       	sub	r8,-12
8001502a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001502e:	f2 08 00 08 	add	r8,r9,r8
80015032:	30 09       	mov	r9,0
80015034:	30 0a       	mov	r10,0
80015036:	30 0b       	mov	r11,0
80015038:	10 9c       	mov	r12,r8
8001503a:	f0 16 00 53 	mcall	r6[332]
}

void init_angle_stabilisation(Stabiliser_t *stabiliser) {
	int i=0;
	// initialise roll and pitch controllers
	for (i=0; i<2; i++) {
8001503e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015042:	2f f8       	sub	r8,-1
80015044:	ef 48 ff fc 	st.w	r7[-4],r8
80015048:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001504c:	58 18       	cp.w	r8,1
8001504e:	fe 9a ff 8b 	brle	80014f64 <init_angle_stabilisation+0x20>
		(stabiliser->rpy_controller[i]).soft_zone_width=0.0;
		initDiff(&((stabiliser->rpy_controller)[i].differentiator), 0.00, 0.5, 0.1); // 0.05, 0.5, 0.05
		initInt(&((stabiliser->rpy_controller)[i].integrator),0.0, 0.0, 0.0);
	}	
	// initialise yaw controller
	i=2;
80015052:	30 28       	mov	r8,2
80015054:	ef 48 ff fc 	st.w	r7[-4],r8
	(stabiliser->rpy_controller)[i].p_gain=1.5;
80015058:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001505c:	ee fa ff f8 	ld.w	r10,r7[-8]
80015060:	12 98       	mov	r8,r9
80015062:	a5 68       	lsl	r8,0x4
80015064:	12 08       	add	r8,r9
80015066:	a3 68       	lsl	r8,0x2
80015068:	f4 08 00 08 	add	r8,r10,r8
8001506c:	fc 19 3f c0 	movh	r9,0x3fc0
80015070:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller)[i].last_update=get_time_ticks();	
80015072:	ee f5 ff fc 	ld.w	r5,r7[-4]
80015076:	f0 16 00 2d 	mcall	r6[180]
8001507a:	18 99       	mov	r9,r12
8001507c:	ee fa ff f8 	ld.w	r10,r7[-8]
80015080:	0a 98       	mov	r8,r5
80015082:	a5 68       	lsl	r8,0x4
80015084:	0a 08       	add	r8,r5
80015086:	a3 68       	lsl	r8,0x2
80015088:	f4 08 00 08 	add	r8,r10,r8
8001508c:	2c 88       	sub	r8,-56
8001508e:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller)[i].clip_min=-1.0;
80015090:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015094:	ee fa ff f8 	ld.w	r10,r7[-8]
80015098:	12 98       	mov	r8,r9
8001509a:	a5 68       	lsl	r8,0x4
8001509c:	12 08       	add	r8,r9
8001509e:	2f f8       	sub	r8,-1
800150a0:	fc 19 bf 80 	movh	r9,0xbf80
800150a4:	f4 08 09 29 	st.w	r10[r8<<0x2],r9
	(stabiliser->rpy_controller)[i].clip_max= 1.0;
800150a8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800150ac:	ee fa ff f8 	ld.w	r10,r7[-8]
800150b0:	12 98       	mov	r8,r9
800150b2:	a5 68       	lsl	r8,0x4
800150b4:	12 08       	add	r8,r9
800150b6:	a3 68       	lsl	r8,0x2
800150b8:	f4 08 00 08 	add	r8,r10,r8
800150bc:	2f 88       	sub	r8,-8
800150be:	fc 19 3f 80 	movh	r9,0x3f80
800150c2:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller[i]).soft_zone_width=0.0;
800150c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800150c8:	ee fa ff f8 	ld.w	r10,r7[-8]
800150cc:	12 98       	mov	r8,r9
800150ce:	a5 68       	lsl	r8,0x4
800150d0:	12 08       	add	r8,r9
800150d2:	a3 68       	lsl	r8,0x2
800150d4:	f4 08 00 08 	add	r8,r10,r8
800150d8:	2c 08       	sub	r8,-64
800150da:	30 09       	mov	r9,0
800150dc:	91 09       	st.w	r8[0x0],r9

	initDiff(&((stabiliser->rpy_controller)[i].differentiator), 0.0, 0.5, 0.5);
800150de:	ee f9 ff fc 	ld.w	r9,r7[-4]
800150e2:	12 98       	mov	r8,r9
800150e4:	a5 68       	lsl	r8,0x4
800150e6:	12 08       	add	r8,r9
800150e8:	a3 68       	lsl	r8,0x2
800150ea:	2e 08       	sub	r8,-32
800150ec:	ee f9 ff f8 	ld.w	r9,r7[-8]
800150f0:	f2 08 00 08 	add	r8,r9,r8
800150f4:	fc 19 3f 00 	movh	r9,0x3f00
800150f8:	fc 1a 3f 00 	movh	r10,0x3f00
800150fc:	30 0b       	mov	r11,0
800150fe:	10 9c       	mov	r12,r8
80015100:	f0 16 00 51 	mcall	r6[324]
	initInt(&((stabiliser->rpy_controller)[i].integrator),0.0, 0.0, 0.0);
80015104:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015108:	12 98       	mov	r8,r9
8001510a:	a5 68       	lsl	r8,0x4
8001510c:	12 08       	add	r8,r9
8001510e:	a3 68       	lsl	r8,0x2
80015110:	2f 48       	sub	r8,-12
80015112:	ee f9 ff f8 	ld.w	r9,r7[-8]
80015116:	f2 08 00 08 	add	r8,r9,r8
8001511a:	30 09       	mov	r9,0
8001511c:	30 0a       	mov	r10,0
8001511e:	30 0b       	mov	r11,0
80015120:	10 9c       	mov	r12,r8
80015122:	f0 16 00 53 	mcall	r6[332]

	//initialise thrust controller
	stabiliser->thrust_controller=passthroughController();
80015126:	ee f5 ff f8 	ld.w	r5,r7[-8]
8001512a:	ee c8 00 4c 	sub	r8,r7,76
8001512e:	10 9c       	mov	r12,r8
80015130:	f0 16 00 d8 	mcall	r6[864]
80015134:	ea c8 ff 34 	sub	r8,r5,-204
80015138:	ee c9 00 4c 	sub	r9,r7,76
8001513c:	34 4a       	mov	r10,68
8001513e:	12 9b       	mov	r11,r9
80015140:	10 9c       	mov	r12,r8
80015142:	f0 16 00 1b 	mcall	r6[108]
	
}
80015146:	2e dd       	sub	sp,-76
80015148:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001514c:	80 01       	ld.sh	r1,r0[0x0]
8001514e:	4d d4       	lddpc	r4,800152c0 <init_velocity_stabilisation+0x170>

80015150 <init_velocity_stabilisation>:

void init_velocity_stabilisation(Stabiliser_t * stabiliser) {
80015150:	eb cd 40 e0 	pushm	r5-r7,lr
80015154:	1a 97       	mov	r7,sp
80015156:	21 3d       	sub	sp,76
80015158:	fe f6 02 80 	ld.w	r6,pc[640]
8001515c:	1e 26       	rsub	r6,pc
8001515e:	ef 4c ff f8 	st.w	r7[-8],r12
	int i = 0;
80015162:	30 08       	mov	r8,0
80015164:	ef 48 ff fc 	st.w	r7[-4],r8
	// initialise roll velocity
	(stabiliser->rpy_controller[i]).p_gain=0.2; //0.1
80015168:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001516c:	ee fa ff f8 	ld.w	r10,r7[-8]
80015170:	12 98       	mov	r8,r9
80015172:	a5 68       	lsl	r8,0x4
80015174:	12 08       	add	r8,r9
80015176:	a3 68       	lsl	r8,0x2
80015178:	f4 08 00 08 	add	r8,r10,r8
8001517c:	e0 69 cc cd 	mov	r9,52429
80015180:	ea 19 3e 4c 	orh	r9,0x3e4c
80015184:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller[i]).last_update=get_time_ticks();
80015186:	ee f5 ff fc 	ld.w	r5,r7[-4]
8001518a:	f0 16 00 2d 	mcall	r6[180]
8001518e:	18 99       	mov	r9,r12
80015190:	ee fa ff f8 	ld.w	r10,r7[-8]
80015194:	0a 98       	mov	r8,r5
80015196:	a5 68       	lsl	r8,0x4
80015198:	0a 08       	add	r8,r5
8001519a:	a3 68       	lsl	r8,0x2
8001519c:	f4 08 00 08 	add	r8,r10,r8
800151a0:	2c 88       	sub	r8,-56
800151a2:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller[i]).clip_min=-0.5; //-0.6
800151a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800151a8:	ee fa ff f8 	ld.w	r10,r7[-8]
800151ac:	12 98       	mov	r8,r9
800151ae:	a5 68       	lsl	r8,0x4
800151b0:	12 08       	add	r8,r9
800151b2:	2f f8       	sub	r8,-1
800151b4:	fc 19 bf 00 	movh	r9,0xbf00
800151b8:	f4 08 09 29 	st.w	r10[r8<<0x2],r9
	(stabiliser->rpy_controller[i]).clip_max= 0.5; //0.6
800151bc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800151c0:	ee fa ff f8 	ld.w	r10,r7[-8]
800151c4:	12 98       	mov	r8,r9
800151c6:	a5 68       	lsl	r8,0x4
800151c8:	12 08       	add	r8,r9
800151ca:	a3 68       	lsl	r8,0x2
800151cc:	f4 08 00 08 	add	r8,r10,r8
800151d0:	2f 88       	sub	r8,-8
800151d2:	fc 19 3f 00 	movh	r9,0x3f00
800151d6:	91 09       	st.w	r8[0x0],r9
	
	(stabiliser->rpy_controller[i]).soft_zone_width=0.3; //region of lowered error input gain to ignore noise close to target point
800151d8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800151dc:	ee fa ff f8 	ld.w	r10,r7[-8]
800151e0:	12 98       	mov	r8,r9
800151e2:	a5 68       	lsl	r8,0x4
800151e4:	12 08       	add	r8,r9
800151e6:	a3 68       	lsl	r8,0x2
800151e8:	f4 08 00 08 	add	r8,r10,r8
800151ec:	2c 08       	sub	r8,-64
800151ee:	e0 69 99 9a 	mov	r9,39322
800151f2:	ea 19 3e 99 	orh	r9,0x3e99
800151f6:	91 09       	st.w	r8[0x0],r9

	initDiff(&((stabiliser->rpy_controller)[i].differentiator), 0.0, 0.5, 0.5); // 0.1 0.5 0.5
800151f8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800151fc:	12 98       	mov	r8,r9
800151fe:	a5 68       	lsl	r8,0x4
80015200:	12 08       	add	r8,r9
80015202:	a3 68       	lsl	r8,0x2
80015204:	2e 08       	sub	r8,-32
80015206:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001520a:	f2 08 00 08 	add	r8,r9,r8
8001520e:	fc 19 3f 00 	movh	r9,0x3f00
80015212:	fc 1a 3f 00 	movh	r10,0x3f00
80015216:	30 0b       	mov	r11,0
80015218:	10 9c       	mov	r12,r8
8001521a:	f0 16 00 51 	mcall	r6[324]
	initInt(&((stabiliser->rpy_controller)[i].integrator),0.0, 0.0, 0.3); // 1.0 0.3 0.3
8001521e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015222:	12 98       	mov	r8,r9
80015224:	a5 68       	lsl	r8,0x4
80015226:	12 08       	add	r8,r9
80015228:	a3 68       	lsl	r8,0x2
8001522a:	2f 48       	sub	r8,-12
8001522c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80015230:	f2 08 00 08 	add	r8,r9,r8
80015234:	e0 69 99 9a 	mov	r9,39322
80015238:	ea 19 3e 99 	orh	r9,0x3e99
8001523c:	30 0a       	mov	r10,0
8001523e:	30 0b       	mov	r11,0
80015240:	10 9c       	mov	r12,r8
80015242:	f0 16 00 53 	mcall	r6[332]
	
	// initialise pitch velocity
	i = 1;
80015246:	30 18       	mov	r8,1
80015248:	ef 48 ff fc 	st.w	r7[-4],r8
	(stabiliser->rpy_controller[i]).p_gain=0.2; //0.1
8001524c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015250:	ee fa ff f8 	ld.w	r10,r7[-8]
80015254:	12 98       	mov	r8,r9
80015256:	a5 68       	lsl	r8,0x4
80015258:	12 08       	add	r8,r9
8001525a:	a3 68       	lsl	r8,0x2
8001525c:	f4 08 00 08 	add	r8,r10,r8
80015260:	e0 69 cc cd 	mov	r9,52429
80015264:	ea 19 3e 4c 	orh	r9,0x3e4c
80015268:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller[i]).last_update=get_time_ticks();
8001526a:	ee f5 ff fc 	ld.w	r5,r7[-4]
8001526e:	f0 16 00 2d 	mcall	r6[180]
80015272:	18 99       	mov	r9,r12
80015274:	ee fa ff f8 	ld.w	r10,r7[-8]
80015278:	0a 98       	mov	r8,r5
8001527a:	a5 68       	lsl	r8,0x4
8001527c:	0a 08       	add	r8,r5
8001527e:	a3 68       	lsl	r8,0x2
80015280:	f4 08 00 08 	add	r8,r10,r8
80015284:	2c 88       	sub	r8,-56
80015286:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller[i]).clip_min=-0.5; //-0.6
80015288:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001528c:	ee fa ff f8 	ld.w	r10,r7[-8]
80015290:	12 98       	mov	r8,r9
80015292:	a5 68       	lsl	r8,0x4
80015294:	12 08       	add	r8,r9
80015296:	2f f8       	sub	r8,-1
80015298:	fc 19 bf 00 	movh	r9,0xbf00
8001529c:	f4 08 09 29 	st.w	r10[r8<<0x2],r9
	(stabiliser->rpy_controller[i]).clip_max= 0.5; //0.6
800152a0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800152a4:	ee fa ff f8 	ld.w	r10,r7[-8]
800152a8:	12 98       	mov	r8,r9
800152aa:	a5 68       	lsl	r8,0x4
800152ac:	12 08       	add	r8,r9
800152ae:	a3 68       	lsl	r8,0x2
800152b0:	f4 08 00 08 	add	r8,r10,r8
800152b4:	2f 88       	sub	r8,-8
800152b6:	fc 19 3f 00 	movh	r9,0x3f00
800152ba:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller[i]).soft_zone_width=0.3; //region of lowered error input gain to ignore noise close to target point
800152bc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800152c0:	ee fa ff f8 	ld.w	r10,r7[-8]
800152c4:	12 98       	mov	r8,r9
800152c6:	a5 68       	lsl	r8,0x4
800152c8:	12 08       	add	r8,r9
800152ca:	a3 68       	lsl	r8,0x2
800152cc:	f4 08 00 08 	add	r8,r10,r8
800152d0:	2c 08       	sub	r8,-64
800152d2:	e0 69 99 9a 	mov	r9,39322
800152d6:	ea 19 3e 99 	orh	r9,0x3e99
800152da:	91 09       	st.w	r8[0x0],r9

	initDiff(&((stabiliser->rpy_controller)[i].differentiator), 0.0, 0.5, 0.5); // 0.1 0.5 0.5
800152dc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800152e0:	12 98       	mov	r8,r9
800152e2:	a5 68       	lsl	r8,0x4
800152e4:	12 08       	add	r8,r9
800152e6:	a3 68       	lsl	r8,0x2
800152e8:	2e 08       	sub	r8,-32
800152ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
800152ee:	f2 08 00 08 	add	r8,r9,r8
800152f2:	fc 19 3f 00 	movh	r9,0x3f00
800152f6:	fc 1a 3f 00 	movh	r10,0x3f00
800152fa:	30 0b       	mov	r11,0
800152fc:	10 9c       	mov	r12,r8
800152fe:	f0 16 00 51 	mcall	r6[324]
	initInt(&((stabiliser->rpy_controller)[i].integrator),0.0, 0.0, 0.3); // 1.0 0.3 0.3
80015302:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015306:	12 98       	mov	r8,r9
80015308:	a5 68       	lsl	r8,0x4
8001530a:	12 08       	add	r8,r9
8001530c:	a3 68       	lsl	r8,0x2
8001530e:	2f 48       	sub	r8,-12
80015310:	ee f9 ff f8 	ld.w	r9,r7[-8]
80015314:	f2 08 00 08 	add	r8,r9,r8
80015318:	e0 69 99 9a 	mov	r9,39322
8001531c:	ea 19 3e 99 	orh	r9,0x3e99
80015320:	30 0a       	mov	r10,0
80015322:	30 0b       	mov	r11,0
80015324:	10 9c       	mov	r12,r8
80015326:	f0 16 00 53 	mcall	r6[332]
	
	// initialise yaw controller
	stabiliser->rpy_controller[2]=passthroughController();
8001532a:	ee f5 ff f8 	ld.w	r5,r7[-8]
8001532e:	ee c8 00 4c 	sub	r8,r7,76
80015332:	10 9c       	mov	r12,r8
80015334:	f0 16 00 d8 	mcall	r6[864]
80015338:	ea c8 ff 78 	sub	r8,r5,-136
8001533c:	ee c9 00 4c 	sub	r9,r7,76
80015340:	34 4a       	mov	r10,68
80015342:	12 9b       	mov	r11,r9
80015344:	10 9c       	mov	r12,r8
80015346:	f0 16 00 1b 	mcall	r6[108]
	
	// initialise z velocity
	(stabiliser->thrust_controller).p_gain=0.4; //0.3
8001534a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001534e:	e0 69 cc cd 	mov	r9,52429
80015352:	ea 19 3e cc 	orh	r9,0x3ecc
80015356:	f1 49 00 cc 	st.w	r8[204],r9
	(stabiliser->thrust_controller).last_update=get_time_ticks();
8001535a:	f0 16 00 2d 	mcall	r6[180]
8001535e:	18 99       	mov	r9,r12
80015360:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015364:	f1 49 01 04 	st.w	r8[260],r9
	(stabiliser->thrust_controller).clip_min=-0.9; //-0.9
80015368:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001536c:	e0 69 66 66 	mov	r9,26214
80015370:	ea 19 bf 66 	orh	r9,0xbf66
80015374:	f1 49 00 d0 	st.w	r8[208],r9
	(stabiliser->thrust_controller).clip_max= 0.65; // 0.9
80015378:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001537c:	e0 69 66 66 	mov	r9,26214
80015380:	ea 19 3f 26 	orh	r9,0x3f26
80015384:	f1 49 00 d4 	st.w	r8[212],r9
	(stabiliser->thrust_controller).soft_zone_width= 0.2; // region of lowered error input gain to ignore noise close to target point
80015388:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001538c:	e0 69 cc cd 	mov	r9,52429
80015390:	ea 19 3e 4c 	orh	r9,0x3e4c
80015394:	f1 49 01 0c 	st.w	r8[268],r9
	initDiff(&((stabiliser->thrust_controller).differentiator), 0.5, 0.95, 1.0); // 0.1 0.5 0.2
80015398:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001539c:	f0 c8 ff 14 	sub	r8,r8,-236
800153a0:	fc 19 3f 80 	movh	r9,0x3f80
800153a4:	e0 6a 33 33 	mov	r10,13107
800153a8:	ea 1a 3f 73 	orh	r10,0x3f73
800153ac:	fc 1b 3f 00 	movh	r11,0x3f00
800153b0:	10 9c       	mov	r12,r8
800153b2:	f0 16 00 51 	mcall	r6[324]
	initInt(&((stabiliser->thrust_controller).integrator),1.5, 1.0, 1.0); // 1.0 1.0 0.5
800153b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800153ba:	f0 c8 ff 28 	sub	r8,r8,-216
800153be:	fc 19 3f 80 	movh	r9,0x3f80
800153c2:	fc 1a 3f 80 	movh	r10,0x3f80
800153c6:	fc 1b 3f c0 	movh	r11,0x3fc0
800153ca:	10 9c       	mov	r12,r8
800153cc:	f0 16 00 53 	mcall	r6[332]
	
	
}
800153d0:	2e dd       	sub	sp,-76
800153d2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800153d6:	00 00       	add	r0,r0
800153d8:	80 01       	ld.sh	r1,r0[0x0]
800153da:	4f e0       	lddpc	r0,800155d0 <quad_stabilise+0xe4>

800153dc <init_stabilisation>:

void init_stabilisation() {
800153dc:	eb cd 40 c0 	pushm	r6-r7,lr
800153e0:	1a 97       	mov	r7,sp
800153e2:	49 76       	lddpc	r6,8001543c <init_stabilisation+0x60>
800153e4:	1e 26       	rsub	r6,pc
	//board=get_board_hardware();
	centralData = get_central_data();
800153e6:	f0 16 00 33 	mcall	r6[204]
800153ea:	18 99       	mov	r9,r12
800153ec:	ec f8 00 00 	ld.w	r8,r6[0]
800153f0:	91 09       	st.w	r8[0x0],r9
	centralData->controls.run_mode=MOTORS_OFF;
800153f2:	ec f8 00 00 	ld.w	r8,r6[0]
800153f6:	70 08       	ld.w	r8,r8[0x0]
800153f8:	30 09       	mov	r9,0
800153fa:	f1 49 01 70 	st.w	r8[368],r9
	centralData->controls.control_mode=ATTITUDE_COMMAND_MODE;
800153fe:	ec f8 00 00 	ld.w	r8,r6[0]
80015402:	70 08       	ld.w	r8,r8[0x0]
80015404:	30 19       	mov	r9,1
80015406:	f1 49 01 68 	st.w	r8[360],r9
	centralData->controls.yaw_mode=YAW_RELATIVE;
8001540a:	ec f8 00 00 	ld.w	r8,r6[0]
8001540e:	70 08       	ld.w	r8,r8[0x0]
80015410:	30 09       	mov	r9,0
80015412:	f1 49 01 6c 	st.w	r8[364],r9

	yaw_coordination_velocity=1.5;
80015416:	ec f8 02 d4 	ld.w	r8,r6[724]
8001541a:	fc 19 3f c0 	movh	r9,0x3fc0
8001541e:	91 09       	st.w	r8[0x0],r9

	init_rate_stabilisation(&rate_stabiliser);
80015420:	ec fc 01 b8 	ld.w	r12,r6[440]
80015424:	f0 16 01 5d 	mcall	r6[1396]
	init_angle_stabilisation(&attitude_stabiliser);
80015428:	ec fc 01 b0 	ld.w	r12,r6[432]
8001542c:	f0 16 01 77 	mcall	r6[1500]
	init_velocity_stabilisation(&velocity_stabiliser);
80015430:	ec fc 01 6c 	ld.w	r12,r6[364]
80015434:	f0 16 02 0a 	mcall	r6[2088]
}
80015438:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001543c:	80 01       	ld.sh	r1,r0[0x0]
8001543e:	52 68       	stdsp	sp[0x98],r8

80015440 <stabilise>:

void stabilise(Stabiliser_t *stabiliser, float errors[]) {
80015440:	eb cd 40 e0 	pushm	r5-r7,lr
80015444:	1a 97       	mov	r7,sp
80015446:	20 3d       	sub	sp,12
80015448:	4a 86       	lddpc	r6,800154e8 <stabilise+0xa8>
8001544a:	1e 26       	rsub	r6,pc
8001544c:	ef 4c ff f8 	st.w	r7[-8],r12
80015450:	ef 4b ff f4 	st.w	r7[-12],r11
	int i;

	for (i=0; i<3; i++) {
80015454:	30 08       	mov	r8,0
80015456:	ef 48 ff fc 	st.w	r7[-4],r8
8001545a:	c2 98       	rjmp	800154ac <stabilise+0x6c>
		stabiliser->output.rpy[i]=	pid_update_dt(&(stabiliser->rpy_controller[i]),  errors[i], centralData->imu1.dt);
8001545c:	ee f5 ff fc 	ld.w	r5,r7[-4]
80015460:	ec f8 00 00 	ld.w	r8,r6[0]
80015464:	70 08       	ld.w	r8,r8[0x0]
80015466:	f0 fa 01 40 	ld.w	r10,r8[320]
8001546a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001546e:	a3 68       	lsl	r8,0x2
80015470:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015474:	f2 08 00 08 	add	r8,r9,r8
80015478:	70 0b       	ld.w	r11,r8[0x0]
8001547a:	ee fc ff f8 	ld.w	r12,r7[-8]
8001547e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015482:	12 98       	mov	r8,r9
80015484:	a5 68       	lsl	r8,0x4
80015486:	12 08       	add	r8,r9
80015488:	a3 68       	lsl	r8,0x2
8001548a:	f8 08 00 08 	add	r8,r12,r8
8001548e:	10 9c       	mov	r12,r8
80015490:	f0 16 01 28 	mcall	r6[1184]
80015494:	18 9a       	mov	r10,r12
80015496:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001549a:	ea c9 ff bc 	sub	r9,r5,-68
8001549e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}

void stabilise(Stabiliser_t *stabiliser, float errors[]) {
	int i;

	for (i=0; i<3; i++) {
800154a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800154a6:	2f f8       	sub	r8,-1
800154a8:	ef 48 ff fc 	st.w	r7[-4],r8
800154ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800154b0:	58 28       	cp.w	r8,2
800154b2:	fe 9a ff d5 	brle	8001545c <stabilise+0x1c>
		stabiliser->output.rpy[i]=	pid_update_dt(&(stabiliser->rpy_controller[i]),  errors[i], centralData->imu1.dt);
	}		
	stabiliser->output.thrust= pid_update_dt(&(stabiliser->thrust_controller),  errors[3], centralData->imu1.dt);
800154b6:	ec f8 00 00 	ld.w	r8,r6[0]
800154ba:	70 08       	ld.w	r8,r8[0x0]
800154bc:	f0 fa 01 40 	ld.w	r10,r8[320]
800154c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800154c4:	2f 48       	sub	r8,-12
800154c6:	70 09       	ld.w	r9,r8[0x0]
800154c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800154cc:	f0 c8 ff 34 	sub	r8,r8,-204
800154d0:	12 9b       	mov	r11,r9
800154d2:	10 9c       	mov	r12,r8
800154d4:	f0 16 01 28 	mcall	r6[1184]
800154d8:	18 99       	mov	r9,r12
800154da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800154de:	f1 49 01 1c 	st.w	r8[284],r9

	//dbg_putfloat(stabiliser->output.thrust, 3); dbg_print("\n");
}
800154e2:	2f dd       	sub	sp,-12
800154e4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800154e8:	80 01       	ld.sh	r1,r0[0x0]
800154ea:	52 ce       	stdsp	sp[0xb0],lr

800154ec <quad_stabilise>:




void quad_stabilise(Imu_Data_t *imu, position_estimator_t *pos_est, Control_Command_t *control_input) {
800154ec:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
800154f0:	1a 97       	mov	r7,sp
800154f2:	21 5d       	sub	sp,84
800154f4:	fe f6 03 28 	ld.w	r6,pc[808]
800154f8:	1e 26       	rsub	r6,pc
800154fa:	ef 4c ff b4 	st.w	r7[-76],r12
800154fe:	ef 4b ff b0 	st.w	r7[-80],r11
80015502:	ef 4a ff ac 	st.w	r7[-84],r10
	float rpyt_errors[4];
	Control_Command_t input;
	int i;
	
	// set the controller input
	input=*control_input;
80015506:	ee f9 ff ac 	ld.w	r9,r7[-84]
8001550a:	ee c8 00 48 	sub	r8,r7,72
8001550e:	f0 ca 00 00 	sub	r10,r8,0
80015512:	f2 cb 00 00 	sub	r11,r9,0
80015516:	76 0c       	ld.w	r12,r11[0x0]
80015518:	95 0c       	st.w	r10[0x0],r12
8001551a:	76 1c       	ld.w	r12,r11[0x4]
8001551c:	95 1c       	st.w	r10[0x4],r12
8001551e:	76 2c       	ld.w	r12,r11[0x8]
80015520:	95 2c       	st.w	r10[0x8],r12
80015522:	76 3b       	ld.w	r11,r11[0xc]
80015524:	95 3b       	st.w	r10[0xc],r11
80015526:	f0 ca ff f0 	sub	r10,r8,-16
8001552a:	f2 cb ff f0 	sub	r11,r9,-16
8001552e:	76 0c       	ld.w	r12,r11[0x0]
80015530:	95 0c       	st.w	r10[0x0],r12
80015532:	76 1c       	ld.w	r12,r11[0x4]
80015534:	95 1c       	st.w	r10[0x4],r12
80015536:	76 2c       	ld.w	r12,r11[0x8]
80015538:	95 2c       	st.w	r10[0x8],r12
8001553a:	76 3b       	ld.w	r11,r11[0xc]
8001553c:	95 3b       	st.w	r10[0xc],r11
8001553e:	f2 ea 00 20 	ld.d	r10,r9[32]
80015542:	f0 eb 00 20 	st.d	r8[32],r10
80015546:	72 a9       	ld.w	r9,r9[0x28]
80015548:	91 a9       	st.w	r8[0x28],r9

	switch (control_input->control_mode) {
8001554a:	ee f8 ff ac 	ld.w	r8,r7[-84]
8001554e:	70 88       	ld.w	r8,r8[0x20]
80015550:	58 18       	cp.w	r8,1
80015552:	e0 80 00 ce 	breq	800156ee <quad_stabilise+0x202>
80015556:	c0 53       	brcs	80015560 <quad_stabilise+0x74>
80015558:	58 28       	cp.w	r8,2
8001555a:	e0 80 01 25 	breq	800157a4 <quad_stabilise+0x2b8>
8001555e:	c5 49       	rjmp	80015806 <quad_stabilise+0x31a>
	case VELOCITY_COMMAND_MODE:
		rpyt_errors[ROLL] = input.tvel[Y] - pos_est->vel_bf[Y];     // map y-axis error to roll axis
80015560:	ee f9 ff cc 	ld.w	r9,r7[-52]
80015564:	ee f8 ff b0 	ld.w	r8,r7[-80]
80015568:	70 c8       	ld.w	r8,r8[0x30]
8001556a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8001556e:	ef 48 ff e4 	st.w	r7[-28],r8
		rpyt_errors[PITCH]=-(input.tvel[X] - pos_est->vel_bf[X]);   // map x axis error to pitch axis
80015572:	ee f9 ff c8 	ld.w	r9,r7[-56]
80015576:	ee f8 ff b0 	ld.w	r8,r7[-80]
8001557a:	70 b8       	ld.w	r8,r8[0x2c]
8001557c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80015580:	ee 18 80 00 	eorh	r8,0x8000
80015584:	ef 48 ff e8 	st.w	r7[-24],r8
		rpyt_errors[3]    =-(input.tvel[Z] - pos_est->vel[Z]);      // attention - input z-axis maps to thrust input!
80015588:	ee f9 ff d0 	ld.w	r9,r7[-48]
8001558c:	ee f8 ff b0 	ld.w	r8,r7[-80]
80015590:	71 08       	ld.w	r8,r8[0x40]
80015592:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80015596:	ee 18 80 00 	eorh	r8,0x8000
8001559a:	ef 48 ff f0 	st.w	r7[-16],r8
		

		if (control_input->yaw_mode == YAW_COORDINATED)  {
8001559e:	ee f8 ff ac 	ld.w	r8,r7[-84]
800155a2:	70 98       	ld.w	r8,r8[0x24]
800155a4:	58 28       	cp.w	r8,2
800155a6:	c5 31       	brne	8001564c <quad_stabilise+0x160>
			float rel_heading = atan2(pos_est->vel_bf[Y], pos_est->vel_bf[X]);
800155a8:	ee f8 ff b0 	ld.w	r8,r7[-80]
800155ac:	70 b8       	ld.w	r8,r8[0x2c]
800155ae:	10 9c       	mov	r12,r8
800155b0:	f0 16 00 02 	mcall	r6[8]
800155b4:	14 92       	mov	r2,r10
800155b6:	16 93       	mov	r3,r11
800155b8:	ee f8 ff b0 	ld.w	r8,r7[-80]
800155bc:	70 c8       	ld.w	r8,r8[0x30]
800155be:	10 9c       	mov	r12,r8
800155c0:	f0 16 00 02 	mcall	r6[8]
800155c4:	04 98       	mov	r8,r2
800155c6:	06 99       	mov	r9,r3
800155c8:	f0 16 00 54 	mcall	r6[336]
800155cc:	14 98       	mov	r8,r10
800155ce:	16 99       	mov	r9,r11
800155d0:	10 9a       	mov	r10,r8
800155d2:	12 9b       	mov	r11,r9
800155d4:	f0 16 00 09 	mcall	r6[36]
800155d8:	18 98       	mov	r8,r12
800155da:	ef 48 ff f8 	st.w	r7[-8],r8
			float current_velocity_sqr=SQR(pos_est->vel_bf[X])+SQR(pos_est->vel_bf[Y]);
800155de:	ee f8 ff b0 	ld.w	r8,r7[-80]
800155e2:	70 b9       	ld.w	r9,r8[0x2c]
800155e4:	ee f8 ff b0 	ld.w	r8,r7[-80]
800155e8:	70 b8       	ld.w	r8,r8[0x2c]
800155ea:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800155ee:	ee f8 ff b0 	ld.w	r8,r7[-80]
800155f2:	70 ca       	ld.w	r10,r8[0x30]
800155f4:	ee f8 ff b0 	ld.w	r8,r7[-80]
800155f8:	70 c8       	ld.w	r8,r8[0x30]
800155fa:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800155fe:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80015602:	ef 48 ff fc 	st.w	r7[-4],r8
			//float blend_func=0.5*(sigmoid(4.0*(current_velocity_sqr - yaw_coordination_velocity))+1.0);
			//blend_func=1.0;
			if (current_velocity_sqr > SQR(yaw_coordination_velocity)) {
80015606:	ec f8 02 d4 	ld.w	r8,r6[724]
8001560a:	70 09       	ld.w	r9,r8[0x0]
8001560c:	ec f8 02 d4 	ld.w	r8,r6[724]
80015610:	70 08       	ld.w	r8,r8[0x0]
80015612:	e5 a2 0a 98 	cop	cp0,cr10,cr9,cr8,0x44
80015616:	30 18       	mov	r8,1
80015618:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001561c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015620:	e0 8c 00 03 	brvs	80015626 <quad_stabilise+0x13a>
80015624:	c0 25       	brlt	80015628 <quad_stabilise+0x13c>
80015626:	30 08       	mov	r8,0
80015628:	5c 58       	castu.b	r8
8001562a:	c1 10       	breq	8001564c <quad_stabilise+0x160>
				input.rpy[YAW]+=sigmoid(3.0*rel_heading);
8001562c:	ee f5 ff c0 	ld.w	r5,r7[-64]
80015630:	ee f9 ff f8 	ld.w	r9,r7[-8]
80015634:	fc 18 40 40 	movh	r8,0x4040
80015638:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001563c:	10 9c       	mov	r12,r8
8001563e:	fe b0 fa b5 	rcall	80014ba8 <sigmoid>
80015642:	18 98       	mov	r8,r12
80015644:	e5 a0 08 58 	cop	cp0,cr8,cr5,cr8,0x40
80015648:	ef 48 ff c0 	st.w	r7[-64],r8
			} else {
				//input.rpy[YAW]=input.theading;
			}
		}

		rpyt_errors[YAW]= input.rpy[YAW];
8001564c:	ee f8 ff c0 	ld.w	r8,r7[-64]
80015650:	ef 48 ff ec 	st.w	r7[-20],r8
		
		// run PID update on all velocity controllers
		stabilise(&velocity_stabiliser, rpyt_errors);
80015654:	ee c8 00 1c 	sub	r8,r7,28
80015658:	10 9b       	mov	r11,r8
8001565a:	ec fc 01 6c 	ld.w	r12,r6[364]
8001565e:	f0 16 00 84 	mcall	r6[528]
		
		//velocity_stabiliser.output.thrust = f_min(velocity_stabiliser.output.thrust,control_input->thrust);
		
		velocity_stabiliser.output.thrust += THRUST_HOVER_POINT;
80015662:	ec f8 01 6c 	ld.w	r8,r6[364]
80015666:	f0 f8 01 1c 	ld.w	r8,r8[284]
8001566a:	10 9c       	mov	r12,r8
8001566c:	f0 16 00 02 	mcall	r6[8]
80015670:	e0 68 33 33 	mov	r8,13107
80015674:	ea 18 33 33 	orh	r8,0x3333
80015678:	e0 69 33 33 	mov	r9,13107
8001567c:	ea 19 3f d3 	orh	r9,0x3fd3
80015680:	f0 16 00 11 	mcall	r6[68]
80015684:	14 98       	mov	r8,r10
80015686:	16 99       	mov	r9,r11
80015688:	10 9a       	mov	r10,r8
8001568a:	12 9b       	mov	r11,r9
8001568c:	f0 16 00 09 	mcall	r6[36]
80015690:	18 99       	mov	r9,r12
80015692:	ec f8 01 6c 	ld.w	r8,r6[364]
80015696:	f1 49 01 1c 	st.w	r8[284],r9
		velocity_stabiliser.output.theading=input.theading;
8001569a:	ee f9 ff d4 	ld.w	r9,r7[-44]
8001569e:	ec f8 01 6c 	ld.w	r8,r6[364]
800156a2:	f1 49 01 2c 	st.w	r8[300],r9
		input=velocity_stabiliser.output;
800156a6:	ec f9 01 6c 	ld.w	r9,r6[364]
800156aa:	ee c8 00 48 	sub	r8,r7,72
800156ae:	f2 c9 fe f0 	sub	r9,r9,-272
800156b2:	f0 ca 00 00 	sub	r10,r8,0
800156b6:	f2 cb 00 00 	sub	r11,r9,0
800156ba:	76 0c       	ld.w	r12,r11[0x0]
800156bc:	95 0c       	st.w	r10[0x0],r12
800156be:	76 1c       	ld.w	r12,r11[0x4]
800156c0:	95 1c       	st.w	r10[0x4],r12
800156c2:	76 2c       	ld.w	r12,r11[0x8]
800156c4:	95 2c       	st.w	r10[0x8],r12
800156c6:	76 3b       	ld.w	r11,r11[0xc]
800156c8:	95 3b       	st.w	r10[0xc],r11
800156ca:	f0 ca ff f0 	sub	r10,r8,-16
800156ce:	f2 cb ff f0 	sub	r11,r9,-16
800156d2:	76 0c       	ld.w	r12,r11[0x0]
800156d4:	95 0c       	st.w	r10[0x0],r12
800156d6:	76 1c       	ld.w	r12,r11[0x4]
800156d8:	95 1c       	st.w	r10[0x4],r12
800156da:	76 2c       	ld.w	r12,r11[0x8]
800156dc:	95 2c       	st.w	r10[0x8],r12
800156de:	76 3b       	ld.w	r11,r11[0xc]
800156e0:	95 3b       	st.w	r10[0xc],r11
800156e2:	f2 ea 00 20 	ld.d	r10,r9[32]
800156e6:	f0 eb 00 20 	st.d	r8[32],r10
800156ea:	72 a9       	ld.w	r9,r9[0x28]
800156ec:	91 a9       	st.w	r8[0x28],r9
	
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case ATTITUDE_COMMAND_MODE:
		// run absolute attitude controller
		rpyt_errors[0]= input.rpy[0] - (-imu->attitude.up_vec.v[1] ); 
800156ee:	ee f9 ff b8 	ld.w	r9,r7[-72]
800156f2:	ee f8 ff b4 	ld.w	r8,r7[-76]
800156f6:	70 68       	ld.w	r8,r8[0x18]
800156f8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800156fc:	ef 48 ff e4 	st.w	r7[-28],r8
		rpyt_errors[1]= input.rpy[1] - imu->attitude.up_vec.v[0];
80015700:	ee f9 ff bc 	ld.w	r9,r7[-68]
80015704:	ee f8 ff b4 	ld.w	r8,r7[-76]
80015708:	70 58       	ld.w	r8,r8[0x14]
8001570a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8001570e:	ef 48 ff e8 	st.w	r7[-24],r8
		
		rpyt_errors[2]= input.rpy[2];
80015712:	ee f8 ff c0 	ld.w	r8,r7[-64]
80015716:	ef 48 ff ec 	st.w	r7[-20],r8
		
		if ((control_input->yaw_mode == YAW_ABSOLUTE) ) {
8001571a:	ee f8 ff ac 	ld.w	r8,r7[-84]
8001571e:	70 98       	ld.w	r8,r8[0x24]
80015720:	58 18       	cp.w	r8,1
80015722:	c1 21       	brne	80015746 <quad_stabilise+0x25a>
			rpyt_errors[2] +=calc_smaller_angle(input.theading- pos_est->localPosition.heading);
80015724:	ee f5 ff ec 	ld.w	r5,r7[-20]
80015728:	ee f9 ff d4 	ld.w	r9,r7[-44]
8001572c:	ee f8 ff b0 	ld.w	r8,r7[-80]
80015730:	71 b8       	ld.w	r8,r8[0x6c]
80015732:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80015736:	10 9c       	mov	r12,r8
80015738:	fe b0 f7 38 	rcall	800145a8 <calc_smaller_angle>
8001573c:	18 98       	mov	r8,r12
8001573e:	e5 a0 08 58 	cop	cp0,cr8,cr5,cr8,0x40
80015742:	ef 48 ff ec 	st.w	r7[-20],r8
		}
		rpyt_errors[3]= input.thrust;       // no feedback for thrust at this level
80015746:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001574a:	ef 48 ff f0 	st.w	r7[-16],r8
		
		// run PID update on all attitude controllers
		stabilise(&attitude_stabiliser, &rpyt_errors);
8001574e:	ee c8 00 1c 	sub	r8,r7,28
80015752:	10 9b       	mov	r11,r8
80015754:	ec fc 01 b0 	ld.w	r12,r6[432]
80015758:	f0 16 00 84 	mcall	r6[528]
		
		// use output of attitude controller to set rate setpoints for rate controller 
		input=attitude_stabiliser.output;
8001575c:	ec f9 01 b0 	ld.w	r9,r6[432]
80015760:	ee c8 00 48 	sub	r8,r7,72
80015764:	f2 c9 fe f0 	sub	r9,r9,-272
80015768:	f0 ca 00 00 	sub	r10,r8,0
8001576c:	f2 cb 00 00 	sub	r11,r9,0
80015770:	76 0c       	ld.w	r12,r11[0x0]
80015772:	95 0c       	st.w	r10[0x0],r12
80015774:	76 1c       	ld.w	r12,r11[0x4]
80015776:	95 1c       	st.w	r10[0x4],r12
80015778:	76 2c       	ld.w	r12,r11[0x8]
8001577a:	95 2c       	st.w	r10[0x8],r12
8001577c:	76 3b       	ld.w	r11,r11[0xc]
8001577e:	95 3b       	st.w	r10[0xc],r11
80015780:	f0 ca ff f0 	sub	r10,r8,-16
80015784:	f2 cb ff f0 	sub	r11,r9,-16
80015788:	76 0c       	ld.w	r12,r11[0x0]
8001578a:	95 0c       	st.w	r10[0x0],r12
8001578c:	76 1c       	ld.w	r12,r11[0x4]
8001578e:	95 1c       	st.w	r10[0x4],r12
80015790:	76 2c       	ld.w	r12,r11[0x8]
80015792:	95 2c       	st.w	r10[0x8],r12
80015794:	76 3b       	ld.w	r11,r11[0xc]
80015796:	95 3b       	st.w	r10[0xc],r11
80015798:	f2 ea 00 20 	ld.d	r10,r9[32]
8001579c:	f0 eb 00 20 	st.d	r8[32],r10
800157a0:	72 a9       	ld.w	r9,r9[0x28]
800157a2:	91 a9       	st.w	r8[0x28],r9
	
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case RATE_COMMAND_MODE: // this level is always run
		// get rate measurements from IMU (filtered angular rates)
		for (i=0; i<3; i++) {
800157a4:	30 08       	mov	r8,0
800157a6:	ef 48 ff f4 	st.w	r7[-12],r8
800157aa:	c1 e8       	rjmp	800157e6 <quad_stabilise+0x2fa>
			rpyt_errors[i]= input.rpy[i]- imu->attitude.om[i];
800157ac:	ee fa ff f4 	ld.w	r10,r7[-12]
800157b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800157b4:	a3 68       	lsl	r8,0x2
800157b6:	ee 08 00 08 	add	r8,r7,r8
800157ba:	f0 f9 ff b8 	ld.w	r9,r8[-72]
800157be:	ee fb ff f4 	ld.w	r11,r7[-12]
800157c2:	ee f8 ff b4 	ld.w	r8,r7[-76]
800157c6:	2e 2b       	sub	r11,-30
800157c8:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
800157cc:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800157d0:	f4 08 15 02 	lsl	r8,r10,0x2
800157d4:	ee 08 00 08 	add	r8,r7,r8
800157d8:	f1 49 ff e4 	st.w	r8[-28],r9
	
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case RATE_COMMAND_MODE: // this level is always run
		// get rate measurements from IMU (filtered angular rates)
		for (i=0; i<3; i++) {
800157dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800157e0:	2f f8       	sub	r8,-1
800157e2:	ef 48 ff f4 	st.w	r7[-12],r8
800157e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800157ea:	58 28       	cp.w	r8,2
800157ec:	fe 9a ff e0 	brle	800157ac <quad_stabilise+0x2c0>
			rpyt_errors[i]= input.rpy[i]- imu->attitude.om[i];
		}
		rpyt_errors[3] = input.thrust ;  // no feedback for thrust at this level
800157f0:	ee f8 ff c4 	ld.w	r8,r7[-60]
800157f4:	ef 48 ff f0 	st.w	r7[-16],r8
		
		// run PID update on all rate controllers
		stabilise(&rate_stabiliser, &rpyt_errors );
800157f8:	ee c8 00 1c 	sub	r8,r7,28
800157fc:	10 9b       	mov	r11,r8
800157fe:	ec fc 01 b8 	ld.w	r12,r6[440]
80015802:	f0 16 00 84 	mcall	r6[528]
	}
	
	// mix to servo outputs depending on configuration
	#ifdef CONF_DIAG
	mix_to_servos_diag_quad(&rate_stabiliser.output);
80015806:	ec f8 01 b8 	ld.w	r8,r6[440]
8001580a:	f0 c8 fe f0 	sub	r8,r8,-272
8001580e:	10 9c       	mov	r12,r8
80015810:	f0 16 01 f1 	mcall	r6[1988]
	#ifdef CONF_CROSS
	mix_to_servos_cross_quad(&rate_stabiliser.output);
	#endif
	#endif
	
}
80015814:	2e bd       	sub	sp,-84
80015816:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001581a:	00 00       	add	r0,r0
8001581c:	80 01       	ld.sh	r1,r0[0x0]
8001581e:	53 7c       	stdsp	sp[0xdc],r12

80015820 <cascade_stabilise>:


void cascade_stabilise(Imu_Data_t *imu, position_estimator_t *pos_est, Control_Command_t *control_input)
{
80015820:	eb cd 40 c0 	pushm	r6-r7,lr
80015824:	1a 97       	mov	r7,sp
80015826:	fa cd 00 a0 	sub	sp,sp,160
8001582a:	fe f6 02 6e 	ld.w	r6,pc[622]
8001582e:	1e 26       	rsub	r6,pc
80015830:	ef 4c ff 78 	st.w	r7[-136],r12
80015834:	ef 4b ff 74 	st.w	r7[-140],r11
80015838:	ef 4a ff 70 	st.w	r7[-144],r10
	float rpyt_errors[4];
	Control_Command_t input;
	int i;
	
	// set the controller input
	input = *control_input;
8001583c:	ee f9 ff 70 	ld.w	r9,r7[-144]
80015840:	ee c8 00 44 	sub	r8,r7,68
80015844:	f0 ca 00 00 	sub	r10,r8,0
80015848:	f2 cb 00 00 	sub	r11,r9,0
8001584c:	76 0c       	ld.w	r12,r11[0x0]
8001584e:	95 0c       	st.w	r10[0x0],r12
80015850:	76 1c       	ld.w	r12,r11[0x4]
80015852:	95 1c       	st.w	r10[0x4],r12
80015854:	76 2c       	ld.w	r12,r11[0x8]
80015856:	95 2c       	st.w	r10[0x8],r12
80015858:	76 3b       	ld.w	r11,r11[0xc]
8001585a:	95 3b       	st.w	r10[0xc],r11
8001585c:	f0 ca ff f0 	sub	r10,r8,-16
80015860:	f2 cb ff f0 	sub	r11,r9,-16
80015864:	76 0c       	ld.w	r12,r11[0x0]
80015866:	95 0c       	st.w	r10[0x0],r12
80015868:	76 1c       	ld.w	r12,r11[0x4]
8001586a:	95 1c       	st.w	r10[0x4],r12
8001586c:	76 2c       	ld.w	r12,r11[0x8]
8001586e:	95 2c       	st.w	r10[0x8],r12
80015870:	76 3b       	ld.w	r11,r11[0xc]
80015872:	95 3b       	st.w	r10[0xc],r11
80015874:	f2 ea 00 20 	ld.d	r10,r9[32]
80015878:	f0 eb 00 20 	st.d	r8[32],r10
8001587c:	72 a9       	ld.w	r9,r9[0x28]
8001587e:	91 a9       	st.w	r8[0x28],r9

	float target_global[3];
	float target_loc[3];
	float reference_loc[3];

	switch (control_input->control_mode) {
80015880:	ee f8 ff 70 	ld.w	r8,r7[-144]
80015884:	70 88       	ld.w	r8,r8[0x20]
80015886:	58 18       	cp.w	r8,1
80015888:	e0 88 00 06 	brls	80015894 <cascade_stabilise+0x74>
8001588c:	58 28       	cp.w	r8,2
8001588e:	e0 80 00 c9 	breq	80015a20 <cascade_stabilise+0x200>
80015892:	cf 88       	rjmp	80015a82 <cascade_stabilise+0x262>
		// rpyt_errors[0]= input.rpy[0] - (-imu->attitude.up_vec.v[1] ); 
		// rpyt_errors[1]= input.rpy[1] - imu->attitude.up_vec.v[0];
		// rpyt_errors[2]= input.rpy[2];

		// reference vector	in local frame
		reference_loc[0] = 1.0;	// front vector
80015894:	fc 18 3f 80 	movh	r8,0x3f80
80015898:	ef 48 ff 98 	st.w	r7[-104],r8
		reference_loc[1] = 0.0;
8001589c:	30 08       	mov	r8,0
8001589e:	ef 48 ff 9c 	st.w	r7[-100],r8
		reference_loc[2] = 0.0;	// norm = 1
800158a2:	30 08       	mov	r8,0
800158a4:	ef 48 ff a0 	st.w	r7[-96],r8

		// get target vector in global frame
		target_global[0] = input.rpy[1];
800158a8:	ee f8 ff c0 	ld.w	r8,r7[-64]
800158ac:	ef 48 ff b0 	st.w	r7[-80],r8
		target_global[1] = input.rpy[2];
800158b0:	ee f8 ff c4 	ld.w	r8,r7[-60]
800158b4:	ef 48 ff b4 	st.w	r7[-76],r8
		target_global[2] = -1;
800158b8:	fc 18 bf 80 	movh	r8,0xbf80
800158bc:	ef 48 ff b8 	st.w	r7[-72],r8

		// target vector in local frame
		UQuat_t qtarget = quat_from_vector(&target_global);
800158c0:	ee c8 00 78 	sub	r8,r7,120
800158c4:	ee c9 00 50 	sub	r9,r7,80
800158c8:	12 9b       	mov	r11,r9
800158ca:	10 9c       	mov	r12,r8
800158cc:	fe b0 f6 42 	rcall	80014550 <quat_from_vector>
		qtarget = quat_global_to_local(imu->attitude.qe, qtarget);
800158d0:	ee ca 00 a0 	sub	r10,r7,160
800158d4:	20 4d       	sub	sp,16
800158d6:	1a 98       	mov	r8,sp
800158d8:	ee c9 00 78 	sub	r9,r7,120
800158dc:	20 08       	sub	r8,0
800158de:	20 09       	sub	r9,0
800158e0:	72 0b       	ld.w	r11,r9[0x0]
800158e2:	91 0b       	st.w	r8[0x0],r11
800158e4:	72 1b       	ld.w	r11,r9[0x4]
800158e6:	91 1b       	st.w	r8[0x4],r11
800158e8:	72 2b       	ld.w	r11,r9[0x8]
800158ea:	91 2b       	st.w	r8[0x8],r11
800158ec:	72 39       	ld.w	r9,r9[0xc]
800158ee:	91 39       	st.w	r8[0xc],r9
800158f0:	ee f9 ff 78 	ld.w	r9,r7[-136]
800158f4:	20 4d       	sub	sp,16
800158f6:	1a 98       	mov	r8,sp
800158f8:	20 08       	sub	r8,0
800158fa:	20 09       	sub	r9,0
800158fc:	72 0b       	ld.w	r11,r9[0x0]
800158fe:	91 0b       	st.w	r8[0x0],r11
80015900:	72 1b       	ld.w	r11,r9[0x4]
80015902:	91 1b       	st.w	r8[0x4],r11
80015904:	72 2b       	ld.w	r11,r9[0x8]
80015906:	91 2b       	st.w	r8[0x8],r11
80015908:	72 39       	ld.w	r9,r9[0xc]
8001590a:	91 39       	st.w	r8[0xc],r9
8001590c:	14 9c       	mov	r12,r10
8001590e:	fe b0 f7 fb 	rcall	80014904 <quat_global_to_local>
80015912:	2f 8d       	sub	sp,-32
80015914:	ee c8 00 78 	sub	r8,r7,120
80015918:	ee c9 00 a0 	sub	r9,r7,160
8001591c:	20 08       	sub	r8,0
8001591e:	20 09       	sub	r9,0
80015920:	72 0a       	ld.w	r10,r9[0x0]
80015922:	91 0a       	st.w	r8[0x0],r10
80015924:	72 1a       	ld.w	r10,r9[0x4]
80015926:	91 1a       	st.w	r8[0x4],r10
80015928:	72 2a       	ld.w	r10,r9[0x8]
8001592a:	91 2a       	st.w	r8[0x8],r10
8001592c:	72 39       	ld.w	r9,r9[0xc]
8001592e:	91 39       	st.w	r8[0xc],r9
		target_loc[0] = qtarget.v[0];
80015930:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80015934:	ef 48 ff a4 	st.w	r7[-92],r8
		target_loc[1] = qtarget.v[1];
80015938:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001593c:	ef 48 ff a8 	st.w	r7[-88],r8
		target_loc[2] = qtarget.v[2];
80015940:	ee f8 ff 94 	ld.w	r8,r7[-108]
80015944:	ef 48 ff ac 	st.w	r7[-84],r8
		vector_normalize(target_loc, target_loc);
80015948:	ee c9 00 5c 	sub	r9,r7,92
8001594c:	ee c8 00 5c 	sub	r8,r7,92
80015950:	12 9b       	mov	r11,r9
80015952:	10 9c       	mov	r12,r8
80015954:	fe b0 f8 f0 	rcall	80014b34 <vector_normalize>

		// get rotation axis
		float axis[3];
		cross_product(reference_loc, target_loc, axis);
80015958:	ee ca 00 84 	sub	r10,r7,132
8001595c:	ee c9 00 5c 	sub	r9,r7,92
80015960:	ee c8 00 68 	sub	r8,r7,104
80015964:	12 9b       	mov	r11,r9
80015966:	10 9c       	mov	r12,r8
80015968:	fe b0 f6 c0 	rcall	800146e8 <cross_product>
		vector_normalize(axis, axis);
8001596c:	ee c9 00 84 	sub	r9,r7,132
80015970:	ee c8 00 84 	sub	r8,r7,132
80015974:	12 9b       	mov	r11,r9
80015976:	10 9c       	mov	r12,r8
80015978:	fe b0 f8 de 	rcall	80014b34 <vector_normalize>

		// get angle
		float angle = acosf(scalar_product(reference_loc, target_loc));
8001597c:	ee c9 00 5c 	sub	r9,r7,92
80015980:	ee c8 00 68 	sub	r8,r7,104
80015984:	12 9b       	mov	r11,r9
80015986:	10 9c       	mov	r12,r8
80015988:	fe b0 f6 80 	rcall	80014688 <scalar_product>
8001598c:	18 98       	mov	r8,r12
8001598e:	10 9c       	mov	r12,r8
80015990:	f0 16 01 90 	mcall	r6[1600]
80015994:	18 98       	mov	r8,r12
80015996:	ef 48 ff fc 	st.w	r7[-4],r8
		// float angle = quick_acos(scalar_product(reference_loc, target_loc));
		
		// get errors
		rpyt_errors[0]= input.rpy[0];
8001599a:	ee f8 ff bc 	ld.w	r8,r7[-68]
8001599e:	ef 48 ff e8 	st.w	r7[-24],r8
		rpyt_errors[1]= axis[1] * angle;
800159a2:	ee f9 ff 80 	ld.w	r9,r7[-128]
800159a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800159aa:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800159ae:	ef 48 ff ec 	st.w	r7[-20],r8
		rpyt_errors[2]= axis[2] * angle;
800159b2:	ee f9 ff 84 	ld.w	r9,r7[-124]
800159b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800159ba:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800159be:	ef 48 ff f0 	st.w	r7[-16],r8

		// if ((control_input->yaw_mode == YAW_ABSOLUTE) ) {
			// rpyt_errors[2] +=calc_smaller_angle(input.theading- pos_est->localPosition.heading);
		// }
		
		rpyt_errors[3]= input.thrust;       // no feedback for thrust at this level
800159c2:	ee f8 ff c8 	ld.w	r8,r7[-56]
800159c6:	ef 48 ff f4 	st.w	r7[-12],r8
		
		// run PID update on all attitude controllers
		stabilise(&attitude_stabiliser, &rpyt_errors);
800159ca:	ee c8 00 18 	sub	r8,r7,24
800159ce:	10 9b       	mov	r11,r8
800159d0:	ec fc 01 b0 	ld.w	r12,r6[432]
800159d4:	f0 16 00 84 	mcall	r6[528]
		
		// use output of attitude controller to set rate setpoints for rate controller 
		input=attitude_stabiliser.output;
800159d8:	ec f9 01 b0 	ld.w	r9,r6[432]
800159dc:	ee c8 00 44 	sub	r8,r7,68
800159e0:	f2 c9 fe f0 	sub	r9,r9,-272
800159e4:	f0 ca 00 00 	sub	r10,r8,0
800159e8:	f2 cb 00 00 	sub	r11,r9,0
800159ec:	76 0c       	ld.w	r12,r11[0x0]
800159ee:	95 0c       	st.w	r10[0x0],r12
800159f0:	76 1c       	ld.w	r12,r11[0x4]
800159f2:	95 1c       	st.w	r10[0x4],r12
800159f4:	76 2c       	ld.w	r12,r11[0x8]
800159f6:	95 2c       	st.w	r10[0x8],r12
800159f8:	76 3b       	ld.w	r11,r11[0xc]
800159fa:	95 3b       	st.w	r10[0xc],r11
800159fc:	f0 ca ff f0 	sub	r10,r8,-16
80015a00:	f2 cb ff f0 	sub	r11,r9,-16
80015a04:	76 0c       	ld.w	r12,r11[0x0]
80015a06:	95 0c       	st.w	r10[0x0],r12
80015a08:	76 1c       	ld.w	r12,r11[0x4]
80015a0a:	95 1c       	st.w	r10[0x4],r12
80015a0c:	76 2c       	ld.w	r12,r11[0x8]
80015a0e:	95 2c       	st.w	r10[0x8],r12
80015a10:	76 3b       	ld.w	r11,r11[0xc]
80015a12:	95 3b       	st.w	r10[0xc],r11
80015a14:	f2 ea 00 20 	ld.d	r10,r9[32]
80015a18:	f0 eb 00 20 	st.d	r8[32],r10
80015a1c:	72 a9       	ld.w	r9,r9[0x28]
80015a1e:	91 a9       	st.w	r8[0x28],r9
		
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case RATE_COMMAND_MODE: // this level is always run
		// get rate measurements from IMU (filtered angular rates)
		for (i=0; i<3; i++) {
80015a20:	30 08       	mov	r8,0
80015a22:	ef 48 ff f8 	st.w	r7[-8],r8
80015a26:	c1 e8       	rjmp	80015a62 <cascade_stabilise+0x242>
			rpyt_errors[i]= input.rpy[i]- imu->attitude.om[i];
80015a28:	ee fa ff f8 	ld.w	r10,r7[-8]
80015a2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015a30:	a3 68       	lsl	r8,0x2
80015a32:	ee 08 00 08 	add	r8,r7,r8
80015a36:	f0 f9 ff bc 	ld.w	r9,r8[-68]
80015a3a:	ee fb ff f8 	ld.w	r11,r7[-8]
80015a3e:	ee f8 ff 78 	ld.w	r8,r7[-136]
80015a42:	2e 2b       	sub	r11,-30
80015a44:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
80015a48:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80015a4c:	f4 08 15 02 	lsl	r8,r10,0x2
80015a50:	ee 08 00 08 	add	r8,r7,r8
80015a54:	f1 49 ff e8 	st.w	r8[-24],r9
		
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case RATE_COMMAND_MODE: // this level is always run
		// get rate measurements from IMU (filtered angular rates)
		for (i=0; i<3; i++) {
80015a58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015a5c:	2f f8       	sub	r8,-1
80015a5e:	ef 48 ff f8 	st.w	r7[-8],r8
80015a62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015a66:	58 28       	cp.w	r8,2
80015a68:	fe 9a ff e0 	brle	80015a28 <cascade_stabilise+0x208>
			rpyt_errors[i]= input.rpy[i]- imu->attitude.om[i];
		}
		rpyt_errors[3] = input.thrust ;  // no feedback for thrust at this level
80015a6c:	ee f8 ff c8 	ld.w	r8,r7[-56]
80015a70:	ef 48 ff f4 	st.w	r7[-12],r8
		
		// run PID update on all rate controllers
		stabilise(&rate_stabiliser, &rpyt_errors );
80015a74:	ee c8 00 18 	sub	r8,r7,24
80015a78:	10 9b       	mov	r11,r8
80015a7a:	ec fc 01 b8 	ld.w	r12,r6[440]
80015a7e:	f0 16 00 84 	mcall	r6[528]
	}

	// mix to servos 
	mix_to_servos_delta(&rate_stabiliser.output);
80015a82:	ec f8 01 b8 	ld.w	r8,r6[440]
80015a86:	f0 c8 fe f0 	sub	r8,r8,-272
80015a8a:	10 9c       	mov	r12,r8
80015a8c:	f0 16 01 47 	mcall	r6[1308]
}
80015a90:	2d 8d       	sub	sp,-160
80015a92:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015a96:	00 00       	add	r0,r0
80015a98:	80 01       	ld.sh	r1,r0[0x0]
80015a9a:	56 b2       	stdsp	sp[0x1ac],r2

80015a9c <mix_to_servos_diag_quad>:


void mix_to_servos_diag_quad(Control_Command_t *control){
80015a9c:	eb cd 40 e0 	pushm	r5-r7,lr
80015aa0:	1a 97       	mov	r7,sp
80015aa2:	20 6d       	sub	sp,24
80015aa4:	4e 96       	lddpc	r6,80015c48 <mix_to_servos_diag_quad+0x1ac>
80015aa6:	1e 26       	rsub	r6,pc
80015aa8:	ef 4c ff e8 	st.w	r7[-24],r12
	int i;
	float motor_command[4];
	
	motor_command[M_FRONT_RIGHT]= control->thrust + (-control->rpy[ROLL] + control->rpy[PITCH]) + M_FR_DIR * control->rpy[YAW];
80015aac:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015ab0:	70 39       	ld.w	r9,r8[0xc]
80015ab2:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015ab6:	70 1a       	ld.w	r10,r8[0x4]
80015ab8:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015abc:	70 08       	ld.w	r8,r8[0x0]
80015abe:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80015ac2:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80015ac6:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015aca:	70 28       	ld.w	r8,r8[0x8]
80015acc:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80015ad0:	ef 48 ff f0 	st.w	r7[-16],r8
	motor_command[M_FRONT_LEFT] = control->thrust + ( control->rpy[ROLL] + control->rpy[PITCH]) + M_FL_DIR * control->rpy[YAW];
80015ad4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015ad8:	70 39       	ld.w	r9,r8[0xc]
80015ada:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015ade:	70 0a       	ld.w	r10,r8[0x0]
80015ae0:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015ae4:	70 18       	ld.w	r8,r8[0x4]
80015ae6:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80015aea:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80015aee:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015af2:	70 28       	ld.w	r8,r8[0x8]
80015af4:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80015af8:	ef 48 ff f4 	st.w	r7[-12],r8
	motor_command[M_REAR_RIGHT] = control->thrust + (-control->rpy[ROLL] - control->rpy[PITCH]) + M_RR_DIR * control->rpy[YAW];
80015afc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015b00:	70 39       	ld.w	r9,r8[0xc]
80015b02:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015b06:	70 08       	ld.w	r8,r8[0x0]
80015b08:	10 9a       	mov	r10,r8
80015b0a:	ee 1a 80 00 	eorh	r10,0x8000
80015b0e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015b12:	70 18       	ld.w	r8,r8[0x4]
80015b14:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80015b18:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80015b1c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015b20:	70 28       	ld.w	r8,r8[0x8]
80015b22:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80015b26:	ef 48 ff ec 	st.w	r7[-20],r8
	motor_command[M_REAR_LEFT]  = control->thrust + ( control->rpy[ROLL] - control->rpy[PITCH]) + M_RL_DIR * control->rpy[YAW];
80015b2a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015b2e:	70 39       	ld.w	r9,r8[0xc]
80015b30:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015b34:	70 0a       	ld.w	r10,r8[0x0]
80015b36:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015b3a:	70 18       	ld.w	r8,r8[0x4]
80015b3c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80015b40:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80015b44:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015b48:	70 28       	ld.w	r8,r8[0x8]
80015b4a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80015b4e:	ef 48 ff f8 	st.w	r7[-8],r8
	for (i=0; i<4; i++) {
80015b52:	30 08       	mov	r8,0
80015b54:	ef 48 ff fc 	st.w	r7[-4],r8
80015b58:	c4 98       	rjmp	80015bea <mix_to_servos_diag_quad+0x14e>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
80015b5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015b5e:	a3 68       	lsl	r8,0x2
80015b60:	ee 08 00 08 	add	r8,r7,r8
80015b64:	f0 f8 ff ec 	ld.w	r8,r8[-20]
80015b68:	10 9c       	mov	r12,r8
80015b6a:	f0 16 00 02 	mcall	r6[8]
80015b6e:	30 05       	mov	r5,0
80015b70:	e0 68 cc cd 	mov	r8,52429
80015b74:	ea 18 cc cc 	orh	r8,0xcccc
80015b78:	e0 69 cc cc 	mov	r9,52428
80015b7c:	ea 19 bf ec 	orh	r9,0xbfec
80015b80:	f0 16 00 1c 	mcall	r6[112]
80015b84:	18 98       	mov	r8,r12
80015b86:	58 08       	cp.w	r8,0
80015b88:	c0 20       	breq	80015b8c <mix_to_servos_diag_quad+0xf0>
80015b8a:	30 15       	mov	r5,1
80015b8c:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80015b90:	c0 c0       	breq	80015ba8 <mix_to_servos_diag_quad+0x10c>
80015b92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015b96:	a3 68       	lsl	r8,0x2
80015b98:	ee 08 00 08 	add	r8,r7,r8
80015b9c:	e0 69 66 66 	mov	r9,26214
80015ba0:	ea 19 bf 66 	orh	r9,0xbf66
80015ba4:	f1 49 ff ec 	st.w	r8[-20],r9
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
80015ba8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015bac:	a3 68       	lsl	r8,0x2
80015bae:	ee 08 00 08 	add	r8,r7,r8
80015bb2:	f0 fa ff ec 	ld.w	r10,r8[-20]
80015bb6:	30 18       	mov	r8,1
80015bb8:	fc 19 3f 80 	movh	r9,0x3f80
80015bbc:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015bc0:	e0 8c 00 04 	brvs	80015bc8 <mix_to_servos_diag_quad+0x12c>
80015bc4:	e0 89 00 03 	brgt	80015bca <mix_to_servos_diag_quad+0x12e>
80015bc8:	30 08       	mov	r8,0
80015bca:	5c 58       	castu.b	r8
80015bcc:	c0 a0       	breq	80015be0 <mix_to_servos_diag_quad+0x144>
80015bce:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015bd2:	a3 68       	lsl	r8,0x2
80015bd4:	ee 08 00 08 	add	r8,r7,r8
80015bd8:	fc 19 3f 80 	movh	r9,0x3f80
80015bdc:	f1 49 ff ec 	st.w	r8[-20],r9
	
	motor_command[M_FRONT_RIGHT]= control->thrust + (-control->rpy[ROLL] + control->rpy[PITCH]) + M_FR_DIR * control->rpy[YAW];
	motor_command[M_FRONT_LEFT] = control->thrust + ( control->rpy[ROLL] + control->rpy[PITCH]) + M_FL_DIR * control->rpy[YAW];
	motor_command[M_REAR_RIGHT] = control->thrust + (-control->rpy[ROLL] - control->rpy[PITCH]) + M_RR_DIR * control->rpy[YAW];
	motor_command[M_REAR_LEFT]  = control->thrust + ( control->rpy[ROLL] - control->rpy[PITCH]) + M_RL_DIR * control->rpy[YAW];
	for (i=0; i<4; i++) {
80015be0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015be4:	2f f8       	sub	r8,-1
80015be6:	ef 48 ff fc 	st.w	r7[-4],r8
80015bea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015bee:	58 38       	cp.w	r8,3
80015bf0:	fe 9a ff b5 	brle	80015b5a <mix_to_servos_diag_quad+0xbe>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
80015bf4:	30 08       	mov	r8,0
80015bf6:	ef 48 ff fc 	st.w	r7[-4],r8
80015bfa:	c1 f8       	rjmp	80015c38 <mix_to_servos_diag_quad+0x19c>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
80015bfc:	ec f8 00 00 	ld.w	r8,r6[0]
80015c00:	70 0a       	ld.w	r10,r8[0x0]
80015c02:	ee fb ff fc 	ld.w	r11,r7[-4]
80015c06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015c0a:	a3 68       	lsl	r8,0x2
80015c0c:	ee 08 00 08 	add	r8,r7,r8
80015c10:	f0 f9 ff ec 	ld.w	r9,r8[-20]
80015c14:	fc 18 43 fa 	movh	r8,0x43fa
80015c18:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80015c1c:	e5 ab 09 08 	cop	cp0,cr9,cr0,cr8,0x56
80015c20:	f6 08 15 04 	lsl	r8,r11,0x4
80015c24:	f4 08 00 08 	add	r8,r10,r8
80015c28:	f0 c8 fc cc 	sub	r8,r8,-820
80015c2c:	91 09       	st.w	r8[0x0],r9
	for (i=0; i<4; i++) {
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
80015c2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015c32:	2f f8       	sub	r8,-1
80015c34:	ef 48 ff fc 	st.w	r7[-4],r8
80015c38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015c3c:	58 38       	cp.w	r8,3
80015c3e:	fe 9a ff df 	brle	80015bfc <mix_to_servos_diag_quad+0x160>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
	}
}
80015c42:	2f ad       	sub	sp,-24
80015c44:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80015c48:	80 01       	ld.sh	r1,r0[0x0]
80015c4a:	59 2a       	cp.w	r10,18

80015c4c <mix_to_servos_cross_quad>:


void mix_to_servos_cross_quad(Control_Command_t *control){
80015c4c:	eb cd 40 e0 	pushm	r5-r7,lr
80015c50:	1a 97       	mov	r7,sp
80015c52:	20 6d       	sub	sp,24
80015c54:	4d e6       	lddpc	r6,80015dcc <mix_to_servos_cross_quad+0x180>
80015c56:	1e 26       	rsub	r6,pc
80015c58:	ef 4c ff e8 	st.w	r7[-24],r12
	int i;
	float motor_command[4];
	
	motor_command[M_FRONT]= control->thrust + control->rpy[PITCH] + M_FRONT_DIR * control->rpy[YAW];
80015c5c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015c60:	70 39       	ld.w	r9,r8[0xc]
80015c62:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015c66:	70 18       	ld.w	r8,r8[0x4]
80015c68:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80015c6c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015c70:	70 28       	ld.w	r8,r8[0x8]
80015c72:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80015c76:	ef 48 ff ec 	st.w	r7[-20],r8
	motor_command[M_RIGHT] = control->thrust - control->rpy[ROLL] + M_RIGHT_DIR * control->rpy[YAW];
80015c7a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015c7e:	70 39       	ld.w	r9,r8[0xc]
80015c80:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015c84:	70 08       	ld.w	r8,r8[0x0]
80015c86:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80015c8a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015c8e:	70 28       	ld.w	r8,r8[0x8]
80015c90:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80015c94:	ef 48 ff f0 	st.w	r7[-16],r8
	motor_command[M_REAR] = control->thrust - control->rpy[PITCH] + M_REAR_DIR * control->rpy[YAW];
80015c98:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015c9c:	70 39       	ld.w	r9,r8[0xc]
80015c9e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015ca2:	70 18       	ld.w	r8,r8[0x4]
80015ca4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80015ca8:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015cac:	70 28       	ld.w	r8,r8[0x8]
80015cae:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80015cb2:	ef 48 ff f4 	st.w	r7[-12],r8
	motor_command[M_LEFT]  = control->thrust + control->rpy[ROLL] + M_LEFT_DIR * control->rpy[YAW];
80015cb6:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015cba:	70 39       	ld.w	r9,r8[0xc]
80015cbc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015cc0:	70 08       	ld.w	r8,r8[0x0]
80015cc2:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80015cc6:	ee f8 ff e8 	ld.w	r8,r7[-24]
80015cca:	70 28       	ld.w	r8,r8[0x8]
80015ccc:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80015cd0:	ef 48 ff f8 	st.w	r7[-8],r8
	for (i=0; i<4; i++) {
80015cd4:	30 08       	mov	r8,0
80015cd6:	ef 48 ff fc 	st.w	r7[-4],r8
80015cda:	c4 98       	rjmp	80015d6c <mix_to_servos_cross_quad+0x120>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
80015cdc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015ce0:	a3 68       	lsl	r8,0x2
80015ce2:	ee 08 00 08 	add	r8,r7,r8
80015ce6:	f0 f8 ff ec 	ld.w	r8,r8[-20]
80015cea:	10 9c       	mov	r12,r8
80015cec:	f0 16 00 02 	mcall	r6[8]
80015cf0:	30 05       	mov	r5,0
80015cf2:	e0 68 cc cd 	mov	r8,52429
80015cf6:	ea 18 cc cc 	orh	r8,0xcccc
80015cfa:	e0 69 cc cc 	mov	r9,52428
80015cfe:	ea 19 bf ec 	orh	r9,0xbfec
80015d02:	f0 16 00 1c 	mcall	r6[112]
80015d06:	18 98       	mov	r8,r12
80015d08:	58 08       	cp.w	r8,0
80015d0a:	c0 20       	breq	80015d0e <mix_to_servos_cross_quad+0xc2>
80015d0c:	30 15       	mov	r5,1
80015d0e:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80015d12:	c0 c0       	breq	80015d2a <mix_to_servos_cross_quad+0xde>
80015d14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015d18:	a3 68       	lsl	r8,0x2
80015d1a:	ee 08 00 08 	add	r8,r7,r8
80015d1e:	e0 69 66 66 	mov	r9,26214
80015d22:	ea 19 bf 66 	orh	r9,0xbf66
80015d26:	f1 49 ff ec 	st.w	r8[-20],r9
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
80015d2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015d2e:	a3 68       	lsl	r8,0x2
80015d30:	ee 08 00 08 	add	r8,r7,r8
80015d34:	f0 fa ff ec 	ld.w	r10,r8[-20]
80015d38:	30 18       	mov	r8,1
80015d3a:	fc 19 3f 80 	movh	r9,0x3f80
80015d3e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015d42:	e0 8c 00 04 	brvs	80015d4a <mix_to_servos_cross_quad+0xfe>
80015d46:	e0 89 00 03 	brgt	80015d4c <mix_to_servos_cross_quad+0x100>
80015d4a:	30 08       	mov	r8,0
80015d4c:	5c 58       	castu.b	r8
80015d4e:	c0 a0       	breq	80015d62 <mix_to_servos_cross_quad+0x116>
80015d50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015d54:	a3 68       	lsl	r8,0x2
80015d56:	ee 08 00 08 	add	r8,r7,r8
80015d5a:	fc 19 3f 80 	movh	r9,0x3f80
80015d5e:	f1 49 ff ec 	st.w	r8[-20],r9
	
	motor_command[M_FRONT]= control->thrust + control->rpy[PITCH] + M_FRONT_DIR * control->rpy[YAW];
	motor_command[M_RIGHT] = control->thrust - control->rpy[ROLL] + M_RIGHT_DIR * control->rpy[YAW];
	motor_command[M_REAR] = control->thrust - control->rpy[PITCH] + M_REAR_DIR * control->rpy[YAW];
	motor_command[M_LEFT]  = control->thrust + control->rpy[ROLL] + M_LEFT_DIR * control->rpy[YAW];
	for (i=0; i<4; i++) {
80015d62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015d66:	2f f8       	sub	r8,-1
80015d68:	ef 48 ff fc 	st.w	r7[-4],r8
80015d6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015d70:	58 38       	cp.w	r8,3
80015d72:	fe 9a ff b5 	brle	80015cdc <mix_to_servos_cross_quad+0x90>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
80015d76:	30 08       	mov	r8,0
80015d78:	ef 48 ff fc 	st.w	r7[-4],r8
80015d7c:	c1 f8       	rjmp	80015dba <mix_to_servos_cross_quad+0x16e>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
80015d7e:	ec f8 00 00 	ld.w	r8,r6[0]
80015d82:	70 0a       	ld.w	r10,r8[0x0]
80015d84:	ee fb ff fc 	ld.w	r11,r7[-4]
80015d88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015d8c:	a3 68       	lsl	r8,0x2
80015d8e:	ee 08 00 08 	add	r8,r7,r8
80015d92:	f0 f9 ff ec 	ld.w	r9,r8[-20]
80015d96:	fc 18 43 fa 	movh	r8,0x43fa
80015d9a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80015d9e:	e5 ab 09 08 	cop	cp0,cr9,cr0,cr8,0x56
80015da2:	f6 08 15 04 	lsl	r8,r11,0x4
80015da6:	f4 08 00 08 	add	r8,r10,r8
80015daa:	f0 c8 fc cc 	sub	r8,r8,-820
80015dae:	91 09       	st.w	r8[0x0],r9
	for (i=0; i<4; i++) {
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
80015db0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015db4:	2f f8       	sub	r8,-1
80015db6:	ef 48 ff fc 	st.w	r7[-4],r8
80015dba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015dbe:	58 38       	cp.w	r8,3
80015dc0:	fe 9a ff df 	brle	80015d7e <mix_to_servos_cross_quad+0x132>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
	}
	
}
80015dc4:	2f ad       	sub	sp,-24
80015dc6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80015dca:	00 00       	add	r0,r0
80015dcc:	80 01       	ld.sh	r1,r0[0x0]
80015dce:	5a da       	cp.w	r10,-19

80015dd0 <mix_to_servos_delta>:

void mix_to_servos_delta(Control_Command_t *control)
{
80015dd0:	eb cd 40 e0 	pushm	r5-r7,lr
80015dd4:	1a 97       	mov	r7,sp
80015dd6:	20 7d       	sub	sp,28
80015dd8:	4f a6       	lddpc	r6,80015fc0 <mix_to_servos_delta+0x1f0>
80015dda:	1e 26       	rsub	r6,pc
80015ddc:	ef 4c ff e4 	st.w	r7[-28],r12
	int i;
	float motor_command;
	float servo_command[4];

	// mix
	motor_command = control->thrust;
80015de0:	ee f8 ff e4 	ld.w	r8,r7[-28]
80015de4:	70 38       	ld.w	r8,r8[0xc]
80015de6:	ef 48 ff fc 	st.w	r7[-4],r8
	servo_command[FLAP_FRONT] = FLAP_FRONT_DIR * ( + control->rpy[ROLL] 
80015dea:	ee f8 ff e4 	ld.w	r8,r7[-28]
80015dee:	70 09       	ld.w	r9,r8[0x0]
												   + control->rpy[YAW] );
80015df0:	ee f8 ff e4 	ld.w	r8,r7[-28]
80015df4:	70 28       	ld.w	r8,r8[0x8]
	float motor_command;
	float servo_command[4];

	// mix
	motor_command = control->thrust;
	servo_command[FLAP_FRONT] = FLAP_FRONT_DIR * ( + control->rpy[ROLL] 
80015df6:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80015dfa:	ef 48 ff ec 	st.w	r7[-20],r8
												   + control->rpy[YAW] );
	servo_command[FLAP_RIGHT] = FLAP_RIGHT_DIR * ( + control->rpy[ROLL] 
80015dfe:	ee f8 ff e4 	ld.w	r8,r7[-28]
80015e02:	70 09       	ld.w	r9,r8[0x0]
												   + control->rpy[PITCH] ); 
80015e04:	ee f8 ff e4 	ld.w	r8,r7[-28]
80015e08:	70 18       	ld.w	r8,r8[0x4]

	// mix
	motor_command = control->thrust;
	servo_command[FLAP_FRONT] = FLAP_FRONT_DIR * ( + control->rpy[ROLL] 
												   + control->rpy[YAW] );
	servo_command[FLAP_RIGHT] = FLAP_RIGHT_DIR * ( + control->rpy[ROLL] 
80015e0a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80015e0e:	ef 48 ff f0 	st.w	r7[-16],r8
												   + control->rpy[PITCH] ); 
	servo_command[FLAP_REAR] = FLAP_REAR_DIR * ( + control->rpy[ROLL] 
80015e12:	ee f8 ff e4 	ld.w	r8,r7[-28]
80015e16:	70 09       	ld.w	r9,r8[0x0]
												 - control->rpy[YAW] );
80015e18:	ee f8 ff e4 	ld.w	r8,r7[-28]
80015e1c:	70 28       	ld.w	r8,r8[0x8]
	motor_command = control->thrust;
	servo_command[FLAP_FRONT] = FLAP_FRONT_DIR * ( + control->rpy[ROLL] 
												   + control->rpy[YAW] );
	servo_command[FLAP_RIGHT] = FLAP_RIGHT_DIR * ( + control->rpy[ROLL] 
												   + control->rpy[PITCH] ); 
	servo_command[FLAP_REAR] = FLAP_REAR_DIR * ( + control->rpy[ROLL] 
80015e1e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80015e22:	ef 48 ff f4 	st.w	r7[-12],r8
												 - control->rpy[YAW] );
	servo_command[FLAP_LEFT] = FLAP_LEFT_DIR * ( + control->rpy[ROLL] 
80015e26:	ee f8 ff e4 	ld.w	r8,r7[-28]
80015e2a:	70 09       	ld.w	r9,r8[0x0]
												 - control->rpy[PITCH] ); 
80015e2c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80015e30:	70 18       	ld.w	r8,r8[0x4]
												   + control->rpy[YAW] );
	servo_command[FLAP_RIGHT] = FLAP_RIGHT_DIR * ( + control->rpy[ROLL] 
												   + control->rpy[PITCH] ); 
	servo_command[FLAP_REAR] = FLAP_REAR_DIR * ( + control->rpy[ROLL] 
												 - control->rpy[YAW] );
	servo_command[FLAP_LEFT] = FLAP_LEFT_DIR * ( + control->rpy[ROLL] 
80015e32:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80015e36:	ef 48 ff e8 	st.w	r7[-24],r8
												 - control->rpy[PITCH] ); 

	// clip
	if (motor_command < MIN_THRUST) motor_command = MIN_THRUST;
80015e3a:	ee fc ff fc 	ld.w	r12,r7[-4]
80015e3e:	f0 16 00 02 	mcall	r6[8]
80015e42:	30 05       	mov	r5,0
80015e44:	e0 68 cc cd 	mov	r8,52429
80015e48:	ea 18 cc cc 	orh	r8,0xcccc
80015e4c:	e0 69 cc cc 	mov	r9,52428
80015e50:	ea 19 bf ec 	orh	r9,0xbfec
80015e54:	f0 16 00 1c 	mcall	r6[112]
80015e58:	18 98       	mov	r8,r12
80015e5a:	58 08       	cp.w	r8,0
80015e5c:	c0 20       	breq	80015e60 <mix_to_servos_delta+0x90>
80015e5e:	30 15       	mov	r5,1
80015e60:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80015e64:	c0 70       	breq	80015e72 <mix_to_servos_delta+0xa2>
80015e66:	e0 68 66 66 	mov	r8,26214
80015e6a:	ea 18 bf 66 	orh	r8,0xbf66
80015e6e:	ef 48 ff fc 	st.w	r7[-4],r8
	if (motor_command > MAX_THRUST) motor_command = MAX_THRUST;
80015e72:	30 18       	mov	r8,1
80015e74:	ee fa ff fc 	ld.w	r10,r7[-4]
80015e78:	fc 19 3f 80 	movh	r9,0x3f80
80015e7c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015e80:	e0 8c 00 04 	brvs	80015e88 <mix_to_servos_delta+0xb8>
80015e84:	e0 89 00 03 	brgt	80015e8a <mix_to_servos_delta+0xba>
80015e88:	30 08       	mov	r8,0
80015e8a:	5c 58       	castu.b	r8
80015e8c:	c0 50       	breq	80015e96 <mix_to_servos_delta+0xc6>
80015e8e:	fc 18 3f 80 	movh	r8,0x3f80
80015e92:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i=0; i<4; i++) 
80015e96:	30 08       	mov	r8,0
80015e98:	ef 48 ff f8 	st.w	r7[-8],r8
80015e9c:	c3 d8       	rjmp	80015f16 <mix_to_servos_delta+0x146>
	{
		if (servo_command[i] < MIN_DEFLECTION) servo_command[i] = MIN_DEFLECTION;
80015e9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015ea2:	a3 68       	lsl	r8,0x2
80015ea4:	ee 08 00 08 	add	r8,r7,r8
80015ea8:	f0 fa ff e8 	ld.w	r10,r8[-24]
80015eac:	30 18       	mov	r8,1
80015eae:	fc 19 bf 80 	movh	r9,0xbf80
80015eb2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015eb6:	e0 8c 00 03 	brvs	80015ebc <mix_to_servos_delta+0xec>
80015eba:	c0 25       	brlt	80015ebe <mix_to_servos_delta+0xee>
80015ebc:	30 08       	mov	r8,0
80015ebe:	5c 58       	castu.b	r8
80015ec0:	c0 a0       	breq	80015ed4 <mix_to_servos_delta+0x104>
80015ec2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015ec6:	a3 68       	lsl	r8,0x2
80015ec8:	ee 08 00 08 	add	r8,r7,r8
80015ecc:	fc 19 bf 80 	movh	r9,0xbf80
80015ed0:	f1 49 ff e8 	st.w	r8[-24],r9
		if (servo_command[i] > MAX_DEFLECTION) servo_command[i] = MAX_DEFLECTION;
80015ed4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015ed8:	a3 68       	lsl	r8,0x2
80015eda:	ee 08 00 08 	add	r8,r7,r8
80015ede:	f0 fa ff e8 	ld.w	r10,r8[-24]
80015ee2:	30 18       	mov	r8,1
80015ee4:	fc 19 3f 80 	movh	r9,0x3f80
80015ee8:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015eec:	e0 8c 00 04 	brvs	80015ef4 <mix_to_servos_delta+0x124>
80015ef0:	e0 89 00 03 	brgt	80015ef6 <mix_to_servos_delta+0x126>
80015ef4:	30 08       	mov	r8,0
80015ef6:	5c 58       	castu.b	r8
80015ef8:	c0 a0       	breq	80015f0c <mix_to_servos_delta+0x13c>
80015efa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015efe:	a3 68       	lsl	r8,0x2
80015f00:	ee 08 00 08 	add	r8,r7,r8
80015f04:	fc 19 3f 80 	movh	r9,0x3f80
80015f08:	f1 49 ff e8 	st.w	r8[-24],r9
												 - control->rpy[PITCH] ); 

	// clip
	if (motor_command < MIN_THRUST) motor_command = MIN_THRUST;
	if (motor_command > MAX_THRUST) motor_command = MAX_THRUST;
	for (i=0; i<4; i++) 
80015f0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015f10:	2f f8       	sub	r8,-1
80015f12:	ef 48 ff f8 	st.w	r7[-8],r8
80015f16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015f1a:	58 38       	cp.w	r8,3
80015f1c:	fe 9a ff c1 	brle	80015e9e <mix_to_servos_delta+0xce>
		if (servo_command[i] < MIN_DEFLECTION) servo_command[i] = MIN_DEFLECTION;
		if (servo_command[i] > MAX_DEFLECTION) servo_command[i] = MAX_DEFLECTION;
	}

	// scale and write values
	centralData->servos[FLAP_FRONT].value = SERVO_NEUTRAL + SERVO_AMPLITUDE * servo_command[FLAP_FRONT];
80015f20:	ec f8 00 00 	ld.w	r8,r6[0]
80015f24:	70 08       	ld.w	r8,r8[0x0]
80015f26:	ee fa ff ec 	ld.w	r10,r7[-20]
80015f2a:	fc 19 43 fa 	movh	r9,0x43fa
80015f2e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80015f32:	30 09       	mov	r9,0
80015f34:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80015f38:	e5 ab 09 09 	cop	cp0,cr9,cr0,cr9,0x56
80015f3c:	f1 49 03 44 	st.w	r8[836],r9
	centralData->servos[FLAP_RIGHT].value = SERVO_NEUTRAL + SERVO_AMPLITUDE * servo_command[FLAP_RIGHT];
80015f40:	ec f8 00 00 	ld.w	r8,r6[0]
80015f44:	70 08       	ld.w	r8,r8[0x0]
80015f46:	ee fa ff f0 	ld.w	r10,r7[-16]
80015f4a:	fc 19 43 fa 	movh	r9,0x43fa
80015f4e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80015f52:	30 09       	mov	r9,0
80015f54:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80015f58:	e5 ab 09 09 	cop	cp0,cr9,cr0,cr9,0x56
80015f5c:	f1 49 03 54 	st.w	r8[852],r9
	centralData->servos[FLAP_REAR].value = SERVO_NEUTRAL + SERVO_AMPLITUDE * servo_command[FLAP_REAR];
80015f60:	ec f8 00 00 	ld.w	r8,r6[0]
80015f64:	70 08       	ld.w	r8,r8[0x0]
80015f66:	ee fa ff f4 	ld.w	r10,r7[-12]
80015f6a:	fc 19 43 fa 	movh	r9,0x43fa
80015f6e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80015f72:	30 09       	mov	r9,0
80015f74:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80015f78:	e5 ab 09 09 	cop	cp0,cr9,cr0,cr9,0x56
80015f7c:	f1 49 03 64 	st.w	r8[868],r9
	centralData->servos[FLAP_LEFT].value = SERVO_NEUTRAL + SERVO_AMPLITUDE * servo_command[FLAP_LEFT];
80015f80:	ec f8 00 00 	ld.w	r8,r6[0]
80015f84:	70 08       	ld.w	r8,r8[0x0]
80015f86:	ee fa ff e8 	ld.w	r10,r7[-24]
80015f8a:	fc 19 43 fa 	movh	r9,0x43fa
80015f8e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80015f92:	30 09       	mov	r9,0
80015f94:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80015f98:	e5 ab 09 09 	cop	cp0,cr9,cr0,cr9,0x56
80015f9c:	f1 49 03 34 	st.w	r8[820],r9
	centralData->servos[MAIN_ENGINE].value = SERVO_SCALE * motor_command;
80015fa0:	ec f8 00 00 	ld.w	r8,r6[0]
80015fa4:	70 08       	ld.w	r8,r8[0x0]
80015fa6:	ee fa ff fc 	ld.w	r10,r7[-4]
80015faa:	fc 19 43 fa 	movh	r9,0x43fa
80015fae:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
80015fb2:	e5 ab 09 09 	cop	cp0,cr9,cr0,cr9,0x56
80015fb6:	f1 49 03 74 	st.w	r8[884],r9
80015fba:	2f 9d       	sub	sp,-28
80015fbc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80015fc0:	80 01       	ld.sh	r1,r0[0x0]
80015fc2:	5c 5e       	castu.b	lr

80015fc4 <processData>:
adcifa_sequencer_conversion_opt_t adcifa_sequencer0_conversion_opt[SLOTS_PER_SEQUENCER];
			
			
			
__attribute__((__interrupt__))
static void processData() {
80015fc4:	eb cd 40 c0 	pushm	r6-r7,lr
80015fc8:	1a 97       	mov	r7,sp
80015fca:	20 2d       	sub	sp,8
80015fcc:	4f 96       	lddpc	r6,800161b0 <processData+0x1ec>
80015fce:	1e 26       	rsub	r6,pc
	int ch;
	int16_t value;

	if (sample_counter>=number_of_samples)  {
80015fd0:	ec f8 01 20 	ld.w	r8,r6[288]
80015fd4:	70 09       	ld.w	r9,r8[0x0]
80015fd6:	ec f8 03 84 	ld.w	r8,r6[900]
80015fda:	70 08       	ld.w	r8,r8[0x0]
80015fdc:	10 39       	cp.w	r9,r8
80015fde:	c2 15       	brlt	80016020 <processData+0x5c>
		if (continuous_mode) {
80015fe0:	ec f8 03 58 	ld.w	r8,r6[856]
80015fe4:	11 88       	ld.ub	r8,r8[0x0]
80015fe6:	58 08       	cp.w	r8,0
80015fe8:	c0 e0       	breq	80016004 <processData+0x40>
			sample_counter=0;
80015fea:	ec f8 01 20 	ld.w	r8,r6[288]
80015fee:	30 09       	mov	r9,0
80015ff0:	91 09       	st.w	r8[0x0],r9
			oversampling_counter=0;
80015ff2:	ec f8 01 9c 	ld.w	r8,r6[412]
80015ff6:	30 09       	mov	r9,0
80015ff8:	91 09       	st.w	r8[0x0],r9
			channel_index=0;
80015ffa:	ec f8 01 3c 	ld.w	r8,r6[316]
80015ffe:	30 09       	mov	r9,0
80016000:	91 09       	st.w	r8[0x0],r9
		} else {
			adcifa_disable_interrupt(adcifa, ADC_INT_SEOS0);
			//adcifa_disable_interrupt(adcifa, ADC_INT_SEOS1);
			adcifa_stop_itimer(adcifa);
		}
		return;
80016002:	cd 38       	rjmp	800161a8 <processData+0x1e4>
		if (continuous_mode) {
			sample_counter=0;
			oversampling_counter=0;
			channel_index=0;
		} else {
			adcifa_disable_interrupt(adcifa, ADC_INT_SEOS0);
80016004:	ec f8 01 1c 	ld.w	r8,r6[284]
80016008:	70 08       	ld.w	r8,r8[0x0]
8001600a:	30 1b       	mov	r11,1
8001600c:	10 9c       	mov	r12,r8
8001600e:	f0 16 01 24 	mcall	r6[1168]
			//adcifa_disable_interrupt(adcifa, ADC_INT_SEOS1);
			adcifa_stop_itimer(adcifa);
80016012:	ec f8 01 1c 	ld.w	r8,r6[284]
80016016:	70 08       	ld.w	r8,r8[0x0]
80016018:	10 9c       	mov	r12,r8
8001601a:	f0 16 01 01 	mcall	r6[1028]
		}
		return;
8001601e:	cc 58       	rjmp	800161a8 <processData+0x1e4>
	}
	

	if (((adcifa->sr&ADC_INT_SEOS0) ==0) 
80016020:	ec f8 01 1c 	ld.w	r8,r6[284]
80016024:	70 08       	ld.w	r8,r8[0x0]
80016026:	70 28       	ld.w	r8,r8[0x8]
80016028:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001602c:	e0 80 00 bd 	breq	800161a6 <processData+0x1e2>
	//|| ((adcifa->sr&ADC_INT_SEOS1) ==0) 
	) {return;}
		
	if (sample_counter>=0) {
80016030:	ec f8 01 20 	ld.w	r8,r6[288]
80016034:	70 08       	ld.w	r8,r8[0x0]
80016036:	58 08       	cp.w	r8,0
80016038:	c4 85       	brlt	800160c8 <processData+0x104>
		for (ch=0; ch<sequencer_item_count; ch++) {
8001603a:	30 08       	mov	r8,0
8001603c:	ef 48 ff f8 	st.w	r7[-8],r8
80016040:	c3 88       	rjmp	800160b0 <processData+0xec>
			value=adcifa->resx[ch];
80016042:	ec f8 01 1c 	ld.w	r8,r6[284]
80016046:	70 08       	ld.w	r8,r8[0x0]
80016048:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001604c:	2d f9       	sub	r9,-33
8001604e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80016052:	ef 58 ff fe 	st.h	r7[-2],r8
			if (oversampling_counter<=0) {
80016056:	ec f8 01 9c 	ld.w	r8,r6[412]
8001605a:	70 08       	ld.w	r8,r8[0x0]
8001605c:	58 08       	cp.w	r8,0
8001605e:	e0 89 00 0c 	brgt	80016076 <processData+0xb2>
				internal_buffer[channel_index]=  value ;
80016062:	ec f8 01 3c 	ld.w	r8,r6[316]
80016066:	70 09       	ld.w	r9,r8[0x0]
80016068:	ef 0a ff fe 	ld.sh	r10,r7[-2]
8001606c:	ec f8 02 44 	ld.w	r8,r6[580]
80016070:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80016074:	c1 18       	rjmp	80016096 <processData+0xd2>
			}else {			
				internal_buffer[channel_index]+= value ;
80016076:	ec f8 01 3c 	ld.w	r8,r6[316]
8001607a:	70 08       	ld.w	r8,r8[0x0]
8001607c:	10 99       	mov	r9,r8
8001607e:	10 9a       	mov	r10,r8
80016080:	ec f8 02 44 	ld.w	r8,r6[580]
80016084:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80016088:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001608c:	10 0a       	add	r10,r8
8001608e:	ec f8 02 44 	ld.w	r8,r6[580]
80016092:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
				//adci_buffer[ch][even_odd][sample_counter]+=value;
			}			
			channel_index++;
80016096:	ec f8 01 3c 	ld.w	r8,r6[316]
8001609a:	70 08       	ld.w	r8,r8[0x0]
8001609c:	f0 c9 ff ff 	sub	r9,r8,-1
800160a0:	ec f8 01 3c 	ld.w	r8,r6[316]
800160a4:	91 09       	st.w	r8[0x0],r9
	if (((adcifa->sr&ADC_INT_SEOS0) ==0) 
	//|| ((adcifa->sr&ADC_INT_SEOS1) ==0) 
	) {return;}
		
	if (sample_counter>=0) {
		for (ch=0; ch<sequencer_item_count; ch++) {
800160a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800160aa:	2f f8       	sub	r8,-1
800160ac:	ef 48 ff f8 	st.w	r7[-8],r8
800160b0:	ec f8 01 24 	ld.w	r8,r6[292]
800160b4:	11 88       	ld.ub	r8,r8[0x0]
800160b6:	5c 58       	castu.b	r8
800160b8:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
800160bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800160c0:	10 39       	cp.w	r9,r8
800160c2:	fe 99 ff c0 	brgt	80016042 <processData+0x7e>
800160c6:	c0 a8       	rjmp	800160da <processData+0x116>
				//adci_buffer[ch][even_odd][sample_counter]+=value;
			}			
			channel_index++;
		
		}
	}	else {sample_counter++; return;}
800160c8:	ec f8 01 20 	ld.w	r8,r6[288]
800160cc:	70 08       	ld.w	r8,r8[0x0]
800160ce:	f0 c9 ff ff 	sub	r9,r8,-1
800160d2:	ec f8 01 20 	ld.w	r8,r6[288]
800160d6:	91 09       	st.w	r8[0x0],r9
800160d8:	c6 88       	rjmp	800161a8 <processData+0x1e4>
	//if (function_generator!=NULL) {
	//	DAC_set_value((*function_generator)(sampleCounter));
	//}
	if (channel_index>=channel_count) {
800160da:	ec f8 02 28 	ld.w	r8,r6[552]
800160de:	11 88       	ld.ub	r8,r8[0x0]
800160e0:	5c 58       	castu.b	r8
800160e2:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
800160e6:	ec f8 01 3c 	ld.w	r8,r6[316]
800160ea:	70 08       	ld.w	r8,r8[0x0]
800160ec:	10 39       	cp.w	r9,r8
800160ee:	e0 89 00 0e 	brgt	8001610a <processData+0x146>
		oversampling_counter++;
800160f2:	ec f8 01 9c 	ld.w	r8,r6[412]
800160f6:	70 08       	ld.w	r8,r8[0x0]
800160f8:	f0 c9 ff ff 	sub	r9,r8,-1
800160fc:	ec f8 01 9c 	ld.w	r8,r6[412]
80016100:	91 09       	st.w	r8[0x0],r9
		channel_index=0;
80016102:	ec f8 01 3c 	ld.w	r8,r6[316]
80016106:	30 09       	mov	r9,0
80016108:	91 09       	st.w	r8[0x0],r9
	}
	if (oversampling_counter>= oversampling) {
8001610a:	ec f8 01 9c 	ld.w	r8,r6[412]
8001610e:	70 09       	ld.w	r9,r8[0x0]
80016110:	ec f8 03 80 	ld.w	r8,r6[896]
80016114:	70 08       	ld.w	r8,r8[0x0]
80016116:	10 39       	cp.w	r9,r8
80016118:	c4 85       	brlt	800161a8 <processData+0x1e4>
		oversampling_counter=0;
8001611a:	ec f8 01 9c 	ld.w	r8,r6[412]
8001611e:	30 09       	mov	r9,0
80016120:	91 09       	st.w	r8[0x0],r9
		channel_index=0;
80016122:	ec f8 01 3c 	ld.w	r8,r6[316]
80016126:	30 09       	mov	r9,0
80016128:	91 09       	st.w	r8[0x0],r9
		for (ch=0; ch<channel_count; ch++) {
8001612a:	30 08       	mov	r8,0
8001612c:	ef 48 ff f8 	st.w	r7[-8],r8
80016130:	c2 78       	rjmp	8001617e <processData+0x1ba>
			adci_buffer[ch + sample_counter*channel_count]=internal_buffer[ch] / oversampling_divider;
80016132:	ec f8 02 90 	ld.w	r8,r6[656]
80016136:	70 09       	ld.w	r9,r8[0x0]
80016138:	ec f8 02 28 	ld.w	r8,r6[552]
8001613c:	11 88       	ld.ub	r8,r8[0x0]
8001613e:	5c 58       	castu.b	r8
80016140:	f5 d8 b0 08 	bfexts	r10,r8,0x0,0x8
80016144:	ec f8 01 20 	ld.w	r8,r6[288]
80016148:	70 08       	ld.w	r8,r8[0x0]
8001614a:	b1 3a       	mul	r10,r8
8001614c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016150:	f4 08 00 08 	add	r8,r10,r8
80016154:	a1 78       	lsl	r8,0x1
80016156:	f2 08 00 0a 	add	r10,r9,r8
8001615a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001615e:	ec f8 02 44 	ld.w	r8,r6[580]
80016162:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80016166:	ec f9 04 f4 	ld.w	r9,r6[1268]
8001616a:	72 09       	ld.w	r9,r9[0x0]
8001616c:	f0 09 0c 08 	divs	r8,r8,r9
80016170:	5c 88       	casts.h	r8
80016172:	b4 08       	st.h	r10[0x0],r8
		channel_index=0;
	}
	if (oversampling_counter>= oversampling) {
		oversampling_counter=0;
		channel_index=0;
		for (ch=0; ch<channel_count; ch++) {
80016174:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016178:	2f f8       	sub	r8,-1
8001617a:	ef 48 ff f8 	st.w	r7[-8],r8
8001617e:	ec f8 02 28 	ld.w	r8,r6[552]
80016182:	11 88       	ld.ub	r8,r8[0x0]
80016184:	5c 58       	castu.b	r8
80016186:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
8001618a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001618e:	10 39       	cp.w	r9,r8
80016190:	fe 99 ff d1 	brgt	80016132 <processData+0x16e>
			adci_buffer[ch + sample_counter*channel_count]=internal_buffer[ch] / oversampling_divider;
		}
		sample_counter++;
80016194:	ec f8 01 20 	ld.w	r8,r6[288]
80016198:	70 08       	ld.w	r8,r8[0x0]
8001619a:	f0 c9 ff ff 	sub	r9,r8,-1
8001619e:	ec f8 01 20 	ld.w	r8,r6[288]
800161a2:	91 09       	st.w	r8[0x0],r9
800161a4:	c0 28       	rjmp	800161a8 <processData+0x1e4>
	}
	

	if (((adcifa->sr&ADC_INT_SEOS0) ==0) 
	//|| ((adcifa->sr&ADC_INT_SEOS1) ==0) 
	) {return;}
800161a6:	d7 03       	nop
	
	}		
	//DAC_set_value(even_odd*400);
	// acknowledge processing finished
	//adcifa->scr=ADC_INT_SEOS0 | ADC_INT_SEOS1;
}
800161a8:	2f ed       	sub	sp,-8
800161aa:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800161ae:	d6 03       	rete
800161b0:	80 01       	ld.sh	r1,r0[0x0]
800161b2:	5e 52       	retlt	r2

800161b4 <Init_ADCI>:


// Initializes ADC (configures Pins, starts Clock, sets defaults)
void Init_ADCI(uint32_t adc_frequency, uint8_t reference_source, int set_oversampling, int set_oversampling_divider){
800161b4:	eb cd 40 c0 	pushm	r6-r7,lr
800161b8:	1a 97       	mov	r7,sp
800161ba:	20 4d       	sub	sp,16
800161bc:	4b 96       	lddpc	r6,800162a0 <Init_ADCI+0xec>
800161be:	1e 26       	rsub	r6,pc
800161c0:	ef 4c ff fc 	st.w	r7[-4],r12
800161c4:	16 98       	mov	r8,r11
800161c6:	ef 4a ff f4 	st.w	r7[-12],r10
800161ca:	ef 49 ff f0 	st.w	r7[-16],r9
800161ce:	ef 68 ff f8 	st.b	r7[-8],r8

		// Assign and enable GPIO pins to the ADC function.
		gpio_enable_module(ADCIFA_GPIO_MAP, sizeof(ADCIFA_GPIO_MAP) / sizeof(ADCIFA_GPIO_MAP[0]));
800161d2:	31 3b       	mov	r11,19
800161d4:	ec fc 09 14 	ld.w	r12,r6[2324]
800161d8:	f0 16 00 98 	mcall	r6[608]

		adc_config_options.frequency=adc_frequency;
800161dc:	ec f8 01 0c 	ld.w	r8,r6[268]
800161e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800161e4:	91 09       	st.w	r8[0x0],r9
		adc_config_options.reference_source=reference_source;
800161e6:	ec f9 01 0c 	ld.w	r9,r6[268]
800161ea:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800161ee:	b2 c8       	st.b	r9[0x4],r8

		// Get ADCIFA Factory Configuration
		adcifa_get_calibration_data(adcifa, &adc_config_options);
800161f0:	ec f8 01 1c 	ld.w	r8,r6[284]
800161f4:	70 08       	ld.w	r8,r8[0x0]
800161f6:	ec fb 01 0c 	ld.w	r11,r6[268]
800161fa:	10 9c       	mov	r12,r8
800161fc:	f0 16 02 0e 	mcall	r6[2104]
		if ((uint16_t)adc_config_options.offset_calibration_value == 0xFFFF){
80016200:	ec f8 01 0c 	ld.w	r8,r6[268]
80016204:	90 68       	ld.sh	r8,r8[0xc]
80016206:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001620a:	3f f8       	mov	r8,-1
8001620c:	f0 09 19 00 	cp.h	r9,r8
80016210:	c1 51       	brne	8001623a <Init_ADCI+0x86>
			// Set default calibration if Engineering samples and part is not programmed
			adc_config_options.offset_calibration_value = 0x3B;
80016212:	ec f9 01 0c 	ld.w	r9,r6[268]
80016216:	33 b8       	mov	r8,59
80016218:	b2 68       	st.h	r9[0xc],r8
			adc_config_options.gain_calibration_value = 0x4210;
8001621a:	ec f9 01 0c 	ld.w	r9,r6[268]
8001621e:	e0 68 42 10 	mov	r8,16912
80016222:	b2 58       	st.h	r9[0xa],r8
			adc_config_options.sh0_calibration_value = 0x210;
80016224:	ec f9 01 0c 	ld.w	r9,r6[268]
80016228:	e0 68 02 10 	mov	r8,528
8001622c:	b2 78       	st.h	r9[0xe],r8
			adc_config_options.sh1_calibration_value = 0x210;
8001622e:	ec f9 01 0c 	ld.w	r9,r6[268]
80016232:	e0 68 02 10 	mov	r8,528
80016236:	f3 58 00 10 	st.h	r9[16],r8
		}
		adc_config_options.offset_calibration_value = 0x3B; // offset correction
8001623a:	ec f9 01 0c 	ld.w	r9,r6[268]
8001623e:	33 b8       	mov	r8,59
80016240:	b2 68       	st.h	r9[0xc],r8

		// Configure ADCIFA core
		adcifa_configure(adcifa, &adc_config_options, FOSC0);
80016242:	ec f8 01 1c 	ld.w	r8,r6[284]
80016246:	70 08       	ld.w	r8,r8[0x0]
80016248:	e0 6a 24 00 	mov	r10,9216
8001624c:	ea 1a 00 f4 	orh	r10,0xf4
80016250:	ec fb 01 0c 	ld.w	r11,r6[268]
80016254:	10 9c       	mov	r12,r8
80016256:	f0 16 02 29 	mcall	r6[2212]

		clear_adc_sequencer();
8001625a:	f0 16 02 06 	mcall	r6[2072]
		continuous_mode=false;
8001625e:	ec f9 03 58 	ld.w	r9,r6[856]
80016262:	30 08       	mov	r8,0
80016264:	b2 88       	st.b	r9[0x0],r8
		// Configure ADCIFA sequencer 1
		//adcifa_configure_sequencer(adcifa, 1, &adcifa_sequence_opt, adcifa_sequencer1_conversion_opt);
		
		adcifa_disable_interrupt(adcifa, 0xffffffff);
80016266:	ec f8 01 1c 	ld.w	r8,r6[284]
8001626a:	70 08       	ld.w	r8,r8[0x0]
8001626c:	3f fb       	mov	r11,-1
8001626e:	10 9c       	mov	r12,r8
80016270:	f0 16 01 24 	mcall	r6[1168]
		INTC_register_interrupt( (__int_handler) &processData, AVR32_ADCIFA_SEQUENCER0_IRQ, AVR32_INTC_INT1);
80016274:	fe c8 02 b0 	sub	r8,pc,688
80016278:	30 1a       	mov	r10,1
8001627a:	e0 6b 04 80 	mov	r11,1152
8001627e:	10 9c       	mov	r12,r8
80016280:	f0 16 00 3b 	mcall	r6[236]
		//INTC_register_interrupt( (__int_handler) &processData, AVR32_ADCIFA_SEQUENCER1_IRQ, AVR32_INTC_INT1);
		oversampling=set_oversampling;
80016284:	ec f8 03 80 	ld.w	r8,r6[896]
80016288:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001628c:	91 09       	st.w	r8[0x0],r9
		oversampling_divider=set_oversampling_divider;
8001628e:	ec f8 04 f4 	ld.w	r8,r6[1268]
80016292:	ee f9 ff f0 	ld.w	r9,r7[-16]
80016296:	91 09       	st.w	r8[0x0],r9
//	int period_us=1000000/samplingrate;
}
80016298:	2f cd       	sub	sp,-16
8001629a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001629e:	00 00       	add	r0,r0
800162a0:	80 01       	ld.sh	r1,r0[0x0]
800162a2:	60 42       	ld.w	r2,r0[0x10]

800162a4 <clear_adc_sequencer>:
void clear_adc_sequencer() {
800162a4:	eb cd 40 c0 	pushm	r6-r7,lr
800162a8:	1a 97       	mov	r7,sp
800162aa:	48 96       	lddpc	r6,800162cc <clear_adc_sequencer+0x28>
800162ac:	1e 26       	rsub	r6,pc
	sequencer_item_count=0;
800162ae:	ec f9 01 24 	ld.w	r9,r6[292]
800162b2:	30 08       	mov	r8,0
800162b4:	b2 88       	st.b	r9[0x0],r8
	adcifa_sequence_opt.convnb=sequencer_item_count;
800162b6:	ec f8 01 24 	ld.w	r8,r6[292]
800162ba:	11 88       	ld.ub	r8,r8[0x0]
800162bc:	5c 58       	castu.b	r8
800162be:	5c 58       	castu.b	r8
800162c0:	ec f9 02 d8 	ld.w	r9,r6[728]
800162c4:	b2 88       	st.b	r9[0x0],r8
}
800162c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800162ca:	00 00       	add	r0,r0
800162cc:	80 01       	ld.sh	r1,r0[0x0]
800162ce:	61 30       	ld.w	r0,r0[0x4c]

800162d0 <adc_sequencer_add>:

int8_t adc_sequencer_add(uint8_t input_p, uint8_t input_n, uint8_t gain) {
800162d0:	eb cd 40 c0 	pushm	r6-r7,lr
800162d4:	1a 97       	mov	r7,sp
800162d6:	20 3d       	sub	sp,12
800162d8:	4b 36       	lddpc	r6,800163a4 <adc_sequencer_add+0xd4>
800162da:	1e 26       	rsub	r6,pc
800162dc:	16 99       	mov	r9,r11
800162de:	14 98       	mov	r8,r10
800162e0:	18 9a       	mov	r10,r12
800162e2:	ef 6a ff fc 	st.b	r7[-4],r10
800162e6:	ef 69 ff f8 	st.b	r7[-8],r9
800162ea:	ef 68 ff f4 	st.b	r7[-12],r8
	
	if (sequencer_item_count<SLOTS_PER_SEQUENCER-1) {
800162ee:	ec f8 01 24 	ld.w	r8,r6[292]
800162f2:	11 88       	ld.ub	r8,r8[0x0]
800162f4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800162f8:	30 68       	mov	r8,6
800162fa:	f0 09 18 00 	cp.b	r9,r8
800162fe:	e0 89 00 4c 	brgt	80016396 <adc_sequencer_add+0xc6>
		adcifa_sequencer0_conversion_opt[sequencer_item_count].channel_p=input_p;
80016302:	ec f8 01 24 	ld.w	r8,r6[292]
80016306:	11 88       	ld.ub	r8,r8[0x0]
80016308:	5c 58       	castu.b	r8
8001630a:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
8001630e:	ec fa 02 54 	ld.w	r10,r6[596]
80016312:	12 98       	mov	r8,r9
80016314:	a1 78       	lsl	r8,0x1
80016316:	12 08       	add	r8,r9
80016318:	f4 08 00 09 	add	r9,r10,r8
8001631c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80016320:	b2 88       	st.b	r9[0x0],r8
		adcifa_sequencer0_conversion_opt[sequencer_item_count].channel_n=input_n;
80016322:	ec f8 01 24 	ld.w	r8,r6[292]
80016326:	11 88       	ld.ub	r8,r8[0x0]
80016328:	5c 58       	castu.b	r8
8001632a:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
8001632e:	ec fa 02 54 	ld.w	r10,r6[596]
80016332:	12 98       	mov	r8,r9
80016334:	a1 78       	lsl	r8,0x1
80016336:	12 08       	add	r8,r9
80016338:	f4 08 00 08 	add	r8,r10,r8
8001633c:	f0 c9 ff ff 	sub	r9,r8,-1
80016340:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80016344:	b2 88       	st.b	r9[0x0],r8
		adcifa_sequencer0_conversion_opt[sequencer_item_count].gain=gain;
80016346:	ec f8 01 24 	ld.w	r8,r6[292]
8001634a:	11 88       	ld.ub	r8,r8[0x0]
8001634c:	5c 58       	castu.b	r8
8001634e:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80016352:	ec fa 02 54 	ld.w	r10,r6[596]
80016356:	12 98       	mov	r8,r9
80016358:	a1 78       	lsl	r8,0x1
8001635a:	12 08       	add	r8,r9
8001635c:	f4 08 00 08 	add	r8,r10,r8
80016360:	f0 c9 ff fe 	sub	r9,r8,-2
80016364:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80016368:	b2 88       	st.b	r9[0x0],r8
		sequencer_item_count++;
8001636a:	ec f8 01 24 	ld.w	r8,r6[292]
8001636e:	11 88       	ld.ub	r8,r8[0x0]
80016370:	5c 58       	castu.b	r8
80016372:	2f f8       	sub	r8,-1
80016374:	5c 58       	castu.b	r8
80016376:	ec f9 01 24 	ld.w	r9,r6[292]
8001637a:	b2 88       	st.b	r9[0x0],r8
		adcifa_sequence_opt.convnb=sequencer_item_count;
8001637c:	ec f8 01 24 	ld.w	r8,r6[292]
80016380:	11 88       	ld.ub	r8,r8[0x0]
80016382:	5c 58       	castu.b	r8
80016384:	5c 58       	castu.b	r8
80016386:	ec f9 02 d8 	ld.w	r9,r6[728]
8001638a:	b2 88       	st.b	r9[0x0],r8
		return sequencer_item_count;
8001638c:	ec f8 01 24 	ld.w	r8,r6[292]
80016390:	11 88       	ld.ub	r8,r8[0x0]
80016392:	5c 58       	castu.b	r8
80016394:	c0 38       	rjmp	8001639a <adc_sequencer_add+0xca>
	} else {
		return -1;
80016396:	e0 68 00 ff 	mov	r8,255
	}
}
8001639a:	10 9c       	mov	r12,r8
8001639c:	2f dd       	sub	sp,-12
8001639e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800163a2:	00 00       	add	r0,r0
800163a4:	80 01       	ld.sh	r1,r0[0x0]
800163a6:	61 5e       	ld.w	lr,r0[0x54]

800163a8 <ADCI_Start_Sampling>:

// starts sampling, captures one buffer length and then stops
void ADCI_Start_Sampling(int16_t *buffer, int8_t channels, int length, int samplingrate, bool continuous){
800163a8:	eb cd 40 c0 	pushm	r6-r7,lr
800163ac:	1a 97       	mov	r7,sp
800163ae:	20 6d       	sub	sp,24
800163b0:	4a d6       	lddpc	r6,80016464 <ADCI_Start_Sampling+0xbc>
800163b2:	1e 26       	rsub	r6,pc
800163b4:	ef 4c ff f8 	st.w	r7[-8],r12
800163b8:	ef 4a ff f0 	st.w	r7[-16],r10
800163bc:	ef 49 ff ec 	st.w	r7[-20],r9
800163c0:	16 99       	mov	r9,r11
800163c2:	ef 69 ff f4 	st.b	r7[-12],r9
800163c6:	ef 68 ff e8 	st.b	r7[-24],r8

	// Configure ADCIFA sequencer 0
	adcifa_configure_sequencer(adcifa, 0, &adcifa_sequence_opt, adcifa_sequencer0_conversion_opt);
800163ca:	ec f8 01 1c 	ld.w	r8,r6[284]
800163ce:	70 08       	ld.w	r8,r8[0x0]
800163d0:	ec f9 02 54 	ld.w	r9,r6[596]
800163d4:	ec fa 02 d8 	ld.w	r10,r6[728]
800163d8:	30 0b       	mov	r11,0
800163da:	10 9c       	mov	r12,r8
800163dc:	f0 16 01 cc 	mcall	r6[1840]
	adci_buffer=buffer;
800163e0:	ec f8 02 90 	ld.w	r8,r6[656]
800163e4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800163e8:	91 09       	st.w	r8[0x0],r9
	
	int period_us=adc_config_options.frequency/(samplingrate*oversampling);	
800163ea:	ec f8 01 0c 	ld.w	r8,r6[268]
800163ee:	70 08       	ld.w	r8,r8[0x0]
800163f0:	ec f9 03 80 	ld.w	r9,r6[896]
800163f4:	72 0a       	ld.w	r10,r9[0x0]
800163f6:	ee f9 ff ec 	ld.w	r9,r7[-20]
800163fa:	f4 09 02 49 	mul	r9,r10,r9
800163fe:	f0 09 0d 08 	divu	r8,r8,r9
80016402:	ef 48 ff fc 	st.w	r7[-4],r8
	oversampling_counter=0;
80016406:	ec f8 01 9c 	ld.w	r8,r6[412]
8001640a:	30 09       	mov	r9,0
8001640c:	91 09       	st.w	r8[0x0],r9
	sample_counter=-10;
8001640e:	ec f8 01 20 	ld.w	r8,r6[288]
80016412:	3f 69       	mov	r9,-10
80016414:	91 09       	st.w	r8[0x0],r9
	number_of_samples=length;
80016416:	ec f8 03 84 	ld.w	r8,r6[900]
8001641a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001641e:	91 09       	st.w	r8[0x0],r9
	continuous_mode=continuous;
80016420:	ec f9 03 58 	ld.w	r9,r6[856]
80016424:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80016428:	b2 88       	st.b	r9[0x0],r8
	channel_count=channels;
8001642a:	ec f9 02 28 	ld.w	r9,r6[552]
8001642e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80016432:	b2 88       	st.b	r9[0x0],r8
	channel_index=0;
80016434:	ec f8 01 3c 	ld.w	r8,r6[316]
80016438:	30 09       	mov	r9,0
8001643a:	91 09       	st.w	r8[0x0],r9
	
	adcifa_enable_interrupt(adcifa, ADC_INT_SEOS0);
8001643c:	ec f8 01 1c 	ld.w	r8,r6[284]
80016440:	70 08       	ld.w	r8,r8[0x0]
80016442:	30 1b       	mov	r11,1
80016444:	10 9c       	mov	r12,r8
80016446:	f0 16 01 57 	mcall	r6[1372]
	//adcifa_enable_interrupt(adcifa, ADC_INT_SEOS1);
	adcifa_start_itimer(adcifa, period_us);
8001644a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001644e:	ec f8 01 1c 	ld.w	r8,r6[284]
80016452:	70 08       	ld.w	r8,r8[0x0]
80016454:	12 9b       	mov	r11,r9
80016456:	10 9c       	mov	r12,r8
80016458:	f0 16 01 e7 	mcall	r6[1948]
}
8001645c:	2f ad       	sub	sp,-24
8001645e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016462:	00 00       	add	r0,r0
80016464:	80 01       	ld.sh	r1,r0[0x0]
80016466:	62 36       	ld.w	r6,r1[0xc]

80016468 <ADCI_Stop_Sampling>:

// stops sampling immediately
void ADCI_Stop_Sampling(){
80016468:	eb cd 40 c0 	pushm	r6-r7,lr
8001646c:	1a 97       	mov	r7,sp
8001646e:	48 66       	lddpc	r6,80016484 <ADCI_Stop_Sampling+0x1c>
80016470:	1e 26       	rsub	r6,pc
	adcifa_stop_itimer(adcifa);
80016472:	ec f8 01 1c 	ld.w	r8,r6[284]
80016476:	70 08       	ld.w	r8,r8[0x0]
80016478:	10 9c       	mov	r12,r8
8001647a:	f0 16 01 01 	mcall	r6[1028]
	
}
8001647e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016482:	00 00       	add	r0,r0
80016484:	80 01       	ld.sh	r1,r0[0x0]
80016486:	62 f4       	ld.w	r4,r1[0x3c]

80016488 <ADCI_Sampling_Complete>:

// Returns true if one-shot sampling has finished
Bool ADCI_Sampling_Complete(){
80016488:	eb cd 40 c0 	pushm	r6-r7,lr
8001648c:	1a 97       	mov	r7,sp
8001648e:	48 86       	lddpc	r6,800164ac <ADCI_Sampling_Complete+0x24>
80016490:	1e 26       	rsub	r6,pc
	return (sample_counter>=number_of_samples);
80016492:	ec f8 01 20 	ld.w	r8,r6[288]
80016496:	70 0a       	ld.w	r10,r8[0x0]
80016498:	ec f8 03 84 	ld.w	r8,r6[900]
8001649c:	70 09       	ld.w	r9,r8[0x0]
8001649e:	30 18       	mov	r8,1
800164a0:	12 3a       	cp.w	r10,r9
800164a2:	c0 24       	brge	800164a6 <ADCI_Sampling_Complete+0x1e>
800164a4:	30 08       	mov	r8,0
}
800164a6:	10 9c       	mov	r12,r8
800164a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800164ac:	80 01       	ld.sh	r1,r0[0x0]
800164ae:	63 14       	ld.w	r4,r1[0x44]

800164b0 <ADCI_get_sample>:
//void set_DAC_generator_function(generatorfunction new_function_generator ) {
//	function_generator=new_function_generator;
	
//}

int16_t ADCI_get_sample(int channel, int sample) {
800164b0:	eb cd 40 c0 	pushm	r6-r7,lr
800164b4:	1a 97       	mov	r7,sp
800164b6:	20 2d       	sub	sp,8
800164b8:	48 f6       	lddpc	r6,800164f4 <ADCI_get_sample+0x44>
800164ba:	1e 26       	rsub	r6,pc
800164bc:	ef 4c ff fc 	st.w	r7[-4],r12
800164c0:	ef 4b ff f8 	st.w	r7[-8],r11
	return adci_buffer[channel + channel_count*sample];
800164c4:	ec f8 02 90 	ld.w	r8,r6[656]
800164c8:	70 09       	ld.w	r9,r8[0x0]
800164ca:	ec f8 02 28 	ld.w	r8,r6[552]
800164ce:	11 88       	ld.ub	r8,r8[0x0]
800164d0:	5c 58       	castu.b	r8
800164d2:	f5 d8 b0 08 	bfexts	r10,r8,0x0,0x8
800164d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800164da:	b1 3a       	mul	r10,r8
800164dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800164e0:	f4 08 00 08 	add	r8,r10,r8
800164e4:	a1 78       	lsl	r8,0x1
800164e6:	f2 08 00 08 	add	r8,r9,r8
800164ea:	90 08       	ld.sh	r8,r8[0x0]
}
800164ec:	10 9c       	mov	r12,r8
800164ee:	2f ed       	sub	sp,-8
800164f0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800164f4:	80 01       	ld.sh	r1,r0[0x0]
800164f6:	63 3e       	ld.w	lr,r1[0x4c]

800164f8 <ADCI_get_buffer>:

int16_t* ADCI_get_buffer() {
800164f8:	eb cd 40 c0 	pushm	r6-r7,lr
800164fc:	1a 97       	mov	r7,sp
800164fe:	48 56       	lddpc	r6,80016510 <ADCI_get_buffer+0x18>
80016500:	1e 26       	rsub	r6,pc
	return adci_buffer;
80016502:	ec f8 02 90 	ld.w	r8,r6[656]
80016506:	70 08       	ld.w	r8,r8[0x0]
}
80016508:	10 9c       	mov	r12,r8
8001650a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001650e:	00 00       	add	r0,r0
80016510:	80 01       	ld.sh	r1,r0[0x0]
80016512:	63 84       	ld.w	r4,r1[0x60]

80016514 <ADCI_get_sampling_status>:
	
int ADCI_get_sampling_status() {
80016514:	eb cd 40 c0 	pushm	r6-r7,lr
80016518:	1a 97       	mov	r7,sp
8001651a:	48 56       	lddpc	r6,8001652c <ADCI_get_sampling_status+0x18>
8001651c:	1e 26       	rsub	r6,pc
	return sample_counter;
8001651e:	ec f8 01 20 	ld.w	r8,r6[288]
80016522:	70 08       	ld.w	r8,r8[0x0]
}
80016524:	10 9c       	mov	r12,r8
80016526:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001652a:	00 00       	add	r0,r0
8001652c:	80 01       	ld.sh	r1,r0[0x0]
8001652e:	63 a0       	ld.w	r0,r1[0x68]

80016530 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
80016530:	eb cd 40 80 	pushm	r7,lr
80016534:	1a 97       	mov	r7,sp
80016536:	20 2d       	sub	sp,8
80016538:	ef 4c ff fc 	st.w	r7[-4],r12
8001653c:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
80016540:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016544:	30 09       	mov	r9,0
80016546:	91 09       	st.w	r8[0x0],r9
}
80016548:	2f ed       	sub	sp,-8
8001654a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001654e <genclk_config_set_source>:
	AVR32_SCIF.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
8001654e:	eb cd 40 80 	pushm	r7,lr
80016552:	1a 97       	mov	r7,sp
80016554:	20 2d       	sub	sp,8
80016556:	ef 4c ff fc 	st.w	r7[-4],r12
8001655a:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
8001655e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016562:	70 08       	ld.w	r8,r8[0x0]
80016564:	10 99       	mov	r9,r8
80016566:	e0 19 f0 ff 	andl	r9,0xf0ff
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
8001656a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001656e:	a9 68       	lsl	r8,0x8
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80016570:	10 49       	or	r9,r8
80016572:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016576:	91 09       	st.w	r8[0x0],r9
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
}
80016578:	2f ed       	sub	sp,-8
8001657a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001657e <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
8001657e:	eb cd 40 80 	pushm	r7,lr
80016582:	1a 97       	mov	r7,sp
80016584:	20 2d       	sub	sp,8
80016586:	ef 4c ff fc 	st.w	r7[-4],r12
8001658a:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_SCIF_GCCTRL_DIVEN_MASK
8001658e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016592:	70 08       	ld.w	r8,r8[0x0]
80016594:	10 99       	mov	r9,r8
80016596:	e4 19 ff 00 	andh	r9,0xff00
8001659a:	e0 19 ff fd 	andl	r9,0xfffd
8001659e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800165a2:	91 09       	st.w	r8[0x0],r9
			| AVR32_SCIF_GCCTRL_DIV_MASK);

	if (divider > 1) {
800165a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800165a8:	58 18       	cp.w	r8,1
800165aa:	e0 88 00 17 	brls	800165d8 <genclk_config_set_divider+0x5a>
		cfg->ctrl |= 1U << AVR32_SCIF_GCCTRL_DIVEN;
800165ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800165b2:	70 08       	ld.w	r8,r8[0x0]
800165b4:	10 99       	mov	r9,r8
800165b6:	a1 b9       	sbr	r9,0x1
800165b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800165bc:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_SCIF_GCCTRL_DIV;
800165be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800165c2:	70 09       	ld.w	r9,r8[0x0]
800165c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800165c8:	2f f8       	sub	r8,-1
800165ca:	a1 98       	lsr	r8,0x1
800165cc:	20 18       	sub	r8,1
800165ce:	b1 68       	lsl	r8,0x10
800165d0:	10 49       	or	r9,r8
800165d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800165d6:	91 09       	st.w	r8[0x0],r9
	}
}
800165d8:	2f ed       	sub	sp,-8
800165da:	e3 cd 80 80 	ldm	sp++,r7,pc

800165de <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
800165de:	eb cd 40 80 	pushm	r7,lr
800165e2:	1a 97       	mov	r7,sp
800165e4:	20 2d       	sub	sp,8
800165e6:	ef 4c ff fc 	st.w	r7[-4],r12
800165ea:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
800165ee:	fe 78 08 00 	mov	r8,-63488
800165f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800165f6:	ee fa ff fc 	ld.w	r10,r7[-4]
800165fa:	74 0a       	ld.w	r10,r10[0x0]
800165fc:	a1 aa       	sbr	r10,0x0
800165fe:	2e 79       	sub	r9,-25
80016600:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80016604:	2f ed       	sub	sp,-8
80016606:	e3 cd 80 80 	ldm	sp++,r7,pc

8001660a <genclk_disable>:

static inline void genclk_disable(unsigned int id)
{
8001660a:	eb cd 40 80 	pushm	r7,lr
8001660e:	1a 97       	mov	r7,sp
80016610:	20 1d       	sub	sp,4
80016612:	ef 4c ff fc 	st.w	r7[-4],r12
	AVR32_SCIF.gcctrl[id] = 0;
80016616:	fe 78 08 00 	mov	r8,-63488
8001661a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001661e:	2e 79       	sub	r9,-25
80016620:	30 0a       	mov	r10,0
80016622:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80016626:	2f fd       	sub	sp,-4
80016628:	e3 cd 80 80 	ldm	sp++,r7,pc

8001662c <get_interrupt_counter>:
#define EXT_INT_LINES 1
eic_options_t eic_options[EXT_INT_LINES];  
 
 

int get_interrupt_counter(void) {
8001662c:	eb cd 40 c0 	pushm	r6-r7,lr
80016630:	1a 97       	mov	r7,sp
80016632:	48 56       	lddpc	r6,80016644 <get_interrupt_counter+0x18>
80016634:	1e 26       	rsub	r6,pc
	return interrupt_counter;
80016636:	ec f8 09 10 	ld.w	r8,r6[2320]
8001663a:	70 08       	ld.w	r8,r8[0x0]
}
8001663c:	10 9c       	mov	r12,r8
8001663e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016642:	00 00       	add	r0,r0
80016644:	80 01       	ld.sh	r1,r0[0x0]
80016646:	64 b8       	ld.w	r8,r2[0x2c]

80016648 <processData>:


void processData(void) {
80016648:	eb cd 40 c0 	pushm	r6-r7,lr
8001664c:	1a 97       	mov	r7,sp
8001664e:	20 3d       	sub	sp,12
80016650:	4b e6       	lddpc	r6,80016748 <processData+0x100>
80016652:	1e 26       	rsub	r6,pc
	int ch;
	int32_t value;
	if (sampleCounter>=ADC_BUFFER_SIZE) {
80016654:	ec f8 01 64 	ld.w	r8,r6[356]
80016658:	70 08       	ld.w	r8,r8[0x0]
8001665a:	e0 48 03 ff 	cp.w	r8,1023
8001665e:	e0 89 00 70 	brgt	8001673e <processData+0xf6>
		return;
	}	
	uint8_t* buffer =get_spi_in_buffer(ADC_SPI_INDEX);
80016662:	30 0c       	mov	r12,0
80016664:	f0 16 01 d5 	mcall	r6[1876]
80016668:	18 98       	mov	r8,r12
8001666a:	ef 48 ff fc 	st.w	r7[-4],r8
	for (ch=0; ch<4; ch++) {
8001666e:	30 08       	mov	r8,0
80016670:	ef 48 ff f4 	st.w	r7[-12],r8
80016674:	c4 48       	rjmp	800166fc <processData+0xb4>
		value=(buffer[3*ch]<<24) + (buffer[3*ch+1]<<16)+(buffer[3*ch+2]<<8);
80016676:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001667a:	12 98       	mov	r8,r9
8001667c:	a1 78       	lsl	r8,0x1
8001667e:	12 08       	add	r8,r9
80016680:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016684:	f2 08 00 08 	add	r8,r9,r8
80016688:	11 88       	ld.ub	r8,r8[0x0]
8001668a:	f0 0a 15 18 	lsl	r10,r8,0x18
8001668e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016692:	12 98       	mov	r8,r9
80016694:	a1 78       	lsl	r8,0x1
80016696:	12 08       	add	r8,r9
80016698:	2f f8       	sub	r8,-1
8001669a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001669e:	f2 08 00 08 	add	r8,r9,r8
800166a2:	11 88       	ld.ub	r8,r8[0x0]
800166a4:	b1 68       	lsl	r8,0x10
800166a6:	10 0a       	add	r10,r8
800166a8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800166ac:	12 98       	mov	r8,r9
800166ae:	a1 78       	lsl	r8,0x1
800166b0:	12 08       	add	r8,r9
800166b2:	2f e8       	sub	r8,-2
800166b4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800166b8:	f2 08 00 08 	add	r8,r9,r8
800166bc:	11 88       	ld.ub	r8,r8[0x0]
800166be:	a9 68       	lsl	r8,0x8
800166c0:	f4 08 00 08 	add	r8,r10,r8
800166c4:	ef 48 ff f8 	st.w	r7[-8],r8
		adc_buffer[ch][sampleCounter]=(value/256);
800166c8:	ee fb ff f4 	ld.w	r11,r7[-12]
800166cc:	ec f8 01 64 	ld.w	r8,r6[356]
800166d0:	70 09       	ld.w	r9,r8[0x0]
800166d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800166d6:	f0 ca ff 01 	sub	r10,r8,-255
800166da:	58 08       	cp.w	r8,0
800166dc:	f4 08 17 50 	movlt	r8,r10
800166e0:	a9 48       	asr	r8,0x8
800166e2:	10 9a       	mov	r10,r8
800166e4:	ec f8 04 f0 	ld.w	r8,r6[1264]
800166e8:	ab 6b       	lsl	r11,0xa
800166ea:	f6 09 00 09 	add	r9,r11,r9
800166ee:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	int32_t value;
	if (sampleCounter>=ADC_BUFFER_SIZE) {
		return;
	}	
	uint8_t* buffer =get_spi_in_buffer(ADC_SPI_INDEX);
	for (ch=0; ch<4; ch++) {
800166f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800166f6:	2f f8       	sub	r8,-1
800166f8:	ef 48 ff f4 	st.w	r7[-12],r8
800166fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016700:	58 38       	cp.w	r8,3
80016702:	fe 9a ff ba 	brle	80016676 <processData+0x2e>
		value=(buffer[3*ch]<<24) + (buffer[3*ch+1]<<16)+(buffer[3*ch+2]<<8);
		adc_buffer[ch][sampleCounter]=(value/256);
		
	}
	
	if (function_generator!=NULL) {
80016706:	ec f8 02 a0 	ld.w	r8,r6[672]
8001670a:	70 08       	ld.w	r8,r8[0x0]
8001670c:	58 08       	cp.w	r8,0
8001670e:	c0 f0       	breq	8001672c <processData+0xe4>
		DAC_set_value((*function_generator)(sampleCounter));
80016710:	ec f8 02 a0 	ld.w	r8,r6[672]
80016714:	70 08       	ld.w	r8,r8[0x0]
80016716:	ec f9 01 64 	ld.w	r9,r6[356]
8001671a:	72 09       	ld.w	r9,r9[0x0]
8001671c:	12 9c       	mov	r12,r9
8001671e:	5d 18       	icall	r8
80016720:	18 98       	mov	r8,r12
80016722:	5c 88       	casts.h	r8
80016724:	5c 78       	castu.h	r8
80016726:	10 9c       	mov	r12,r8
80016728:	f0 16 01 c4 	mcall	r6[1808]
	}		
	
	sampleCounter++;	
8001672c:	ec f8 01 64 	ld.w	r8,r6[356]
80016730:	70 08       	ld.w	r8,r8[0x0]
80016732:	f0 c9 ff ff 	sub	r9,r8,-1
80016736:	ec f8 01 64 	ld.w	r8,r6[356]
8001673a:	91 09       	st.w	r8[0x0],r9
8001673c:	c0 28       	rjmp	80016740 <processData+0xf8>

void processData(void) {
	int ch;
	int32_t value;
	if (sampleCounter>=ADC_BUFFER_SIZE) {
		return;
8001673e:	d7 03       	nop
		DAC_set_value((*function_generator)(sampleCounter));
	}		
	
	sampleCounter++;	
	
}  
80016740:	2f dd       	sub	sp,-12
80016742:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016746:	00 00       	add	r0,r0
80016748:	80 01       	ld.sh	r1,r0[0x0]
8001674a:	64 d6       	ld.w	r6,r2[0x34]

8001674c <set_DAC_generator_function>:

void set_DAC_generator_function(generatorfunction new_function_generator ) {
8001674c:	eb cd 40 c0 	pushm	r6-r7,lr
80016750:	1a 97       	mov	r7,sp
80016752:	20 1d       	sub	sp,4
80016754:	48 66       	lddpc	r6,8001676c <set_DAC_generator_function+0x20>
80016756:	1e 26       	rsub	r6,pc
80016758:	ef 4c ff fc 	st.w	r7[-4],r12
	function_generator=new_function_generator;
8001675c:	ec f8 02 a0 	ld.w	r8,r6[672]
80016760:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016764:	91 09       	st.w	r8[0x0],r9
	
}
80016766:	2f fd       	sub	sp,-4
80016768:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001676c:	80 01       	ld.sh	r1,r0[0x0]
8001676e:	65 da       	ld.w	r10,r2[0x74]

80016770 <get_sample>:

float get_sample(int channel, int sample) {
80016770:	eb cd 40 c0 	pushm	r6-r7,lr
80016774:	1a 97       	mov	r7,sp
80016776:	20 2d       	sub	sp,8
80016778:	48 c6       	lddpc	r6,800167a8 <get_sample+0x38>
8001677a:	1e 26       	rsub	r6,pc
8001677c:	ef 4c ff fc 	st.w	r7[-4],r12
80016780:	ef 4b ff f8 	st.w	r7[-8],r11
	return adc_buffer[channel][sample];
80016784:	ee fa ff fc 	ld.w	r10,r7[-4]
80016788:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001678c:	ec f8 04 f0 	ld.w	r8,r6[1264]
80016790:	ab 6a       	lsl	r10,0xa
80016792:	f4 09 00 09 	add	r9,r10,r9
80016796:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001679a:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
}
8001679e:	10 9c       	mov	r12,r8
800167a0:	2f ed       	sub	sp,-8
800167a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800167a6:	00 00       	add	r0,r0
800167a8:	80 01       	ld.sh	r1,r0[0x0]
800167aa:	65 fe       	ld.w	lr,r2[0x7c]

800167ac <get_sampling_status>:

int get_sampling_status(void) {
800167ac:	eb cd 40 c0 	pushm	r6-r7,lr
800167b0:	1a 97       	mov	r7,sp
800167b2:	48 56       	lddpc	r6,800167c4 <get_sampling_status+0x18>
800167b4:	1e 26       	rsub	r6,pc
	return sampleCounter;
800167b6:	ec f8 01 64 	ld.w	r8,r6[356]
800167ba:	70 08       	ld.w	r8,r8[0x0]
}
800167bc:	10 9c       	mov	r12,r8
800167be:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800167c2:	00 00       	add	r0,r0
800167c4:	80 01       	ld.sh	r1,r0[0x0]
800167c6:	66 38       	ld.w	r8,r3[0xc]

800167c8 <Init_ADC>:

// Initializes ADC (configures Pins, starts Clock, sets defaults)
void Init_ADC(void) {
800167c8:	eb cd 40 c0 	pushm	r6-r7,lr
800167cc:	1a 97       	mov	r7,sp
800167ce:	4b 96       	lddpc	r6,800168b0 <Init_ADC+0xe8>
800167d0:	1e 26       	rsub	r6,pc
	function_generator=NULL;
800167d2:	ec f8 02 a0 	ld.w	r8,r6[672]
800167d6:	30 09       	mov	r9,0
800167d8:	91 09       	st.w	r8[0x0],r9
	// set mode to "high resolution"
	gpio_configure_pin(ADC_MODE0,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
800167da:	30 3b       	mov	r11,3
800167dc:	32 3c       	mov	r12,35
800167de:	f0 16 00 3d 	mcall	r6[244]
	gpio_configure_pin(ADC_MODE1,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);	
800167e2:	30 1b       	mov	r11,1
800167e4:	32 4c       	mov	r12,36
800167e6:	f0 16 00 3d 	mcall	r6[244]
	// set Format to Fixed-position TDM via SPI
	gpio_configure_pin(ADC_FORMAT0,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
800167ea:	30 3b       	mov	r11,3
800167ec:	32 2c       	mov	r12,34
800167ee:	f0 16 00 3d 	mcall	r6[244]
	gpio_configure_pin(ADC_FORMAT1,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);	
800167f2:	30 1b       	mov	r11,1
800167f4:	32 1c       	mov	r12,33
800167f6:	f0 16 00 3d 	mcall	r6[244]
	gpio_configure_pin(ADC_FORMAT2,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);	
800167fa:	30 1b       	mov	r11,1
800167fc:	32 0c       	mov	r12,32
800167fe:	f0 16 00 3d 	mcall	r6[244]
	
	// configure the four channels
	gpio_configure_pin(ADC_PWDN1,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
80016802:	30 3b       	mov	r11,3
80016804:	34 0c       	mov	r12,64
80016806:	f0 16 00 3d 	mcall	r6[244]
	gpio_configure_pin(ADC_PWDN2,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
8001680a:	30 3b       	mov	r11,3
8001680c:	34 1c       	mov	r12,65
8001680e:	f0 16 00 3d 	mcall	r6[244]
	gpio_configure_pin(ADC_PWDN3,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
80016812:	30 3b       	mov	r11,3
80016814:	34 2c       	mov	r12,66
80016816:	f0 16 00 3d 	mcall	r6[244]
	gpio_configure_pin(ADC_PWDN4,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
8001681a:	30 3b       	mov	r11,3
8001681c:	34 3c       	mov	r12,67
8001681e:	f0 16 00 3d 	mcall	r6[244]

	
	//gpio_configure_pin(AVR32_TC1_B0_0_0_PIN,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
	//gpio_configure_pin(AVR32_PIN_PC19, GPIO_DIR_OUTPUT| GPIO_INIT_HIGH);	

	ADC_Switch_Clock(true);	
80016822:	30 1c       	mov	r12,1
80016824:	f0 16 01 61 	mcall	r6[1412]
	//tc_write_rc(tc, EXAMPLE_TC_CHANNEL_ID, 0x2);     // Set RC value.
	// Start the timer/counter.
	//tc_start(tc, EXAMPLE_TC_CHANNEL_ID);
	
	// Enable edge-triggered interrupt.
	eic_options[0].eic_mode   = EIC_MODE_EDGE_TRIGGERED;
80016828:	ec f9 01 80 	ld.w	r9,r6[384]
8001682c:	30 08       	mov	r8,0
8001682e:	b2 98       	st.b	r9[0x1],r8
	// Interrupt will trigger on falling edge.
	eic_options[0].eic_edge  = EIC_EDGE_FALLING_EDGE;
80016830:	ec f9 01 80 	ld.w	r9,r6[384]
80016834:	30 08       	mov	r8,0
80016836:	b2 a8       	st.b	r9[0x2],r8
	// Initialize in synchronous mode : interrupt is synchronized to the clock
	eic_options[0].eic_async  = EIC_SYNCH_MODE;
80016838:	ec f9 01 80 	ld.w	r9,r6[384]
8001683c:	30 08       	mov	r8,0
8001683e:	b2 d8       	st.b	r9[0x5],r8
	// Set the interrupt line number.
	eic_options[0].eic_line   = EXT_NMI;
80016840:	ec f9 01 80 	ld.w	r9,r6[384]
80016844:	30 08       	mov	r8,0
80016846:	b2 88       	st.b	r9[0x0],r8
	
	gpio_enable_module_pin(AVR32_EIC_EXTINT_0_1_PIN, AVR32_EIC_EXTINT_0_1_FUNCTION);
80016848:	30 1b       	mov	r11,1
8001684a:	37 5c       	mov	r12,117
8001684c:	f0 16 00 3f 	mcall	r6[252]
	
	//Disable_global_interrupt();
// Initialize interrupt vectors.
	
	eic_init(&AVR32_EIC, eic_options, 1);
80016850:	30 1a       	mov	r10,1
80016852:	ec fb 01 80 	ld.w	r11,r6[384]
80016856:	fe 7c 14 00 	mov	r12,-60416
8001685a:	f0 16 01 bc 	mcall	r6[1776]

	//INTC_init_interrupts();
	// initialise SPI0 interface
	initSPI(&AVR32_SPI0, ADC_SPI_INDEX);
8001685e:	30 0b       	mov	r11,0
80016860:	fc 7c 18 00 	mov	r12,-190464
80016864:	f0 16 01 4a 	mcall	r6[1320]
	spiInitDMA(0, 12);
80016868:	30 cb       	mov	r11,12
8001686a:	30 0c       	mov	r12,0
8001686c:	f0 16 01 ad 	mcall	r6[1716]
	setSPIcallBack(ADC_SPI_INDEX, &processData);
80016870:	ec fb 06 d8 	ld.w	r11,r6[1752]
80016874:	30 0c       	mov	r12,0
80016876:	f0 16 01 8e 	mcall	r6[1592]
	// Register the EIC interrupt handlers to the interrupt controller.
	//INTC_register_interrupt(&eic_int_handler1, AVR32_EIC_IRQ_1, AVR32_INTC_INT1);
	// Enable the chosen lines and their corresponding interrupt feature.
	eic_enable_line(&AVR32_EIC, eic_options[0].eic_line);
8001687a:	ec f8 01 80 	ld.w	r8,r6[384]
8001687e:	11 88       	ld.ub	r8,r8[0x0]
80016880:	10 9b       	mov	r11,r8
80016882:	fe 7c 14 00 	mov	r12,-60416
80016886:	f0 16 01 dd 	mcall	r6[1908]
	eic_enable_interrupt_line(&AVR32_EIC, eic_options[0].eic_line);
8001688a:	ec f8 01 80 	ld.w	r8,r6[384]
8001688e:	11 88       	ld.ub	r8,r8[0x0]
80016890:	10 9b       	mov	r11,r8
80016892:	fe 7c 14 00 	mov	r12,-60416
80016896:	f0 16 01 88 	mcall	r6[1568]
	
	
	//Enable_global_interrupt();
	eic_clear_interrupt_line(&AVR32_EIC, EXT_NMI);
8001689a:	30 0b       	mov	r11,0
8001689c:	fe 7c 14 00 	mov	r12,-60416
800168a0:	f0 16 00 e3 	mcall	r6[908]
	
	// activate sync and clkdiv
	gpio_configure_pin(ADC_CLKDIV,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
800168a4:	30 3b       	mov	r11,3
800168a6:	32 5c       	mov	r12,37
800168a8:	f0 16 00 3d 	mcall	r6[244]

}
800168ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800168b0:	80 01       	ld.sh	r1,r0[0x0]
800168b2:	66 54       	ld.w	r4,r3[0x14]

800168b4 <ADC_Switch_Clock>:

// Enable/Disable the clock to the ADC
void ADC_Switch_Clock(Bool on_off) {
800168b4:	eb cd 40 c0 	pushm	r6-r7,lr
800168b8:	1a 97       	mov	r7,sp
800168ba:	20 1d       	sub	sp,4
800168bc:	49 56       	lddpc	r6,80016910 <ADC_Switch_Clock+0x5c>
800168be:	1e 26       	rsub	r6,pc
800168c0:	18 98       	mov	r8,r12
800168c2:	ef 68 ff fc 	st.b	r7[-4],r8
	if (on_off==true) {
800168c6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800168ca:	30 18       	mov	r8,1
800168cc:	f0 09 18 00 	cp.b	r9,r8
800168d0:	c1 a1       	brne	80016904 <ADC_Switch_Clock+0x50>
		gpio_enable_module_pin(AVR32_SCIF_GCLK_1_1_PIN, AVR32_SCIF_GCLK_1_1_FUNCTION);	
800168d2:	30 1b       	mov	r11,1
800168d4:	35 4c       	mov	r12,84
800168d6:	f0 16 00 3f 	mcall	r6[252]

		gpio_configure_pin(ADC_CLKDIV,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
800168da:	30 3b       	mov	r11,3
800168dc:	32 5c       	mov	r12,37
800168de:	f0 16 00 3d 	mcall	r6[244]
	
	
		//scif_gc_setup(AVR32_SCIF_GCLK_GCLK0PIN, SCIF_GCCTRL_CPUCLOCK, 1, 1);
		//scif_gc_enable(AVR32_SCIF_GCLK_GCLK0PIN);
		genclk_config_defaults(&gcfg, AVR32_SCIF_GCLK_GCLK1PIN);
800168e2:	30 ab       	mov	r11,10
800168e4:	ec fc 02 3c 	ld.w	r12,r6[572]
800168e8:	c2 4e       	rcall	80016530 <genclk_config_defaults>
		genclk_config_set_source(&gcfg, GENCLK_SRC_PLL1);
800168ea:	30 6b       	mov	r11,6
800168ec:	ec fc 02 3c 	ld.w	r12,r6[572]
800168f0:	c2 fe       	rcall	8001654e <genclk_config_set_source>
		genclk_config_set_divider(&gcfg, 2);
800168f2:	30 2b       	mov	r11,2
800168f4:	ec fc 02 3c 	ld.w	r12,r6[572]
800168f8:	c4 3e       	rcall	8001657e <genclk_config_set_divider>
		genclk_enable(&gcfg, AVR32_SCIF_GCLK_GCLK1PIN);
800168fa:	30 ab       	mov	r11,10
800168fc:	ec fc 02 3c 	ld.w	r12,r6[572]
80016900:	c6 fe       	rcall	800165de <genclk_enable>
80016902:	c0 38       	rjmp	80016908 <ADC_Switch_Clock+0x54>
	} else {
		genclk_disable(AVR32_SCIF_GCLK_GCLK1PIN);
80016904:	30 ac       	mov	r12,10
80016906:	c8 2e       	rcall	8001660a <genclk_disable>
		
	}
}
80016908:	2f fd       	sub	sp,-4
8001690a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001690e:	00 00       	add	r0,r0
80016910:	80 01       	ld.sh	r1,r0[0x0]
80016912:	67 42       	ld.w	r2,r3[0x50]

80016914 <ADC_Switch_Channel>:

// Switch the four input channels on or off
void ADC_Switch_Channel(int channel, Bool on_off){
80016914:	eb cd 40 80 	pushm	r7,lr
80016918:	1a 97       	mov	r7,sp
8001691a:	20 2d       	sub	sp,8
8001691c:	ef 4c ff fc 	st.w	r7[-4],r12
80016920:	16 98       	mov	r8,r11
80016922:	ef 68 ff f8 	st.b	r7[-8],r8
	
}
80016926:	2f ed       	sub	sp,-8
80016928:	e3 cd 80 80 	ldm	sp++,r7,pc

8001692c <ADC_Set_Mode>:

// configures the ADC mode (refer to datasheet for options)
void ADC_Set_Mode(int mode){};
8001692c:	eb cd 40 80 	pushm	r7,lr
80016930:	1a 97       	mov	r7,sp
80016932:	20 1d       	sub	sp,4
80016934:	ef 4c ff fc 	st.w	r7[-4],r12
80016938:	2f fd       	sub	sp,-4
8001693a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001693e <ADC_Start_Oneshot>:

// enables continuous sampling  -- not implemented yet
//void ADC_Start_Sampling(void){}

// starts sampling, captures one buffer length and then stops
void ADC_Start_Oneshot(void){
8001693e:	eb cd 40 c0 	pushm	r6-r7,lr
80016942:	1a 97       	mov	r7,sp
80016944:	48 46       	lddpc	r6,80016954 <ADC_Start_Oneshot+0x16>
80016946:	1e 26       	rsub	r6,pc
	//Disable_global_interrupt();
	//eic_enable_interrupt_line(&AVR32_EIC, eic_options[0].eic_line);
	sampleCounter=0;
80016948:	ec f8 01 64 	ld.w	r8,r6[356]
8001694c:	30 09       	mov	r9,0
8001694e:	91 09       	st.w	r8[0x0],r9
	//Enable_global_interrupt();
};
80016950:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016954:	80 01       	ld.sh	r1,r0[0x0]
80016956:	67 ca       	ld.w	r10,r3[0x70]

80016958 <ADC_Stop_Sampling>:

// stops sampling immediately
void ADC_Stop_Sampling(void){};
80016958:	eb cd 40 80 	pushm	r7,lr
8001695c:	1a 97       	mov	r7,sp
8001695e:	e3 cd 80 80 	ldm	sp++,r7,pc

80016962 <Sampling_Complete>:

// Returns true if one-shot sampling has finished
Bool Sampling_Complete(void){};
80016962:	eb cd 40 80 	pushm	r7,lr
80016966:	1a 97       	mov	r7,sp
80016968:	e3 cd 80 80 	ldm	sp++,r7,pc

8001696c <eic_nmi_handler>:
__attribute__((__naked__))

void eic_nmi_handler( void )
{
//	int i=0;
	__asm__ __volatile__ (
8001696c:	d7 f1       	pushm	r0-r12,lr
			/* Save registers not saved upon NMI exception. */
			"pushm   r0-r12, lr\n\t"
			);
	//interrupt_counter++;
	
	if (sampleCounter<ADC_BUFFER_SIZE) {
8001696e:	ec f8 01 64 	ld.w	r8,r6[356]
80016972:	70 08       	ld.w	r8,r8[0x0]
80016974:	e0 48 03 ff 	cp.w	r8,1023
80016978:	e0 89 00 06 	brgt	80016984 <eic_nmi_handler+0x18>
		spiTriggerDMA(0, 12);
8001697c:	30 cb       	mov	r11,12
8001697e:	30 0c       	mov	r12,0
80016980:	f0 16 01 91 	mcall	r6[1604]
	} else {
		//eic_disable_interrupt_line(&AVR32_EIC,eic_options[0].eic_line);

	}
	eic_clear_interrupt_line(&AVR32_EIC, EXT_NMI);
80016984:	30 0b       	mov	r11,0
80016986:	fe 7c 14 00 	mov	r12,-60416
8001698a:	f0 16 00 e3 	mcall	r6[908]
	__asm__ __volatile__ (
8001698e:	d7 f2       	popm	r0-r12,lr
80016990:	d6 03       	rete
	...

80016994 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80016994:	eb cd 40 c0 	pushm	r6-r7,lr
80016998:	1a 97       	mov	r7,sp
8001699a:	20 6d       	sub	sp,24
8001699c:	49 e6       	lddpc	r6,80016a14 <interpolate+0x80>
8001699e:	1e 26       	rsub	r6,pc
800169a0:	ef 4c ff f8 	st.w	r7[-8],r12
800169a4:	ef 4b ff f4 	st.w	r7[-12],r11
800169a8:	ef 4a ff f0 	st.w	r7[-16],r10
800169ac:	ef 49 ff ec 	st.w	r7[-20],r9
800169b0:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
800169b4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800169b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800169bc:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800169c0:	c0 41       	brne	800169c8 <interpolate+0x34>
	{
		return y1;
800169c2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800169c6:	c2 38       	rjmp	80016a0c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
800169c8:	ee f9 ff e8 	ld.w	r9,r7[-24]
800169cc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800169d0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800169d4:	ee fa ff f8 	ld.w	r10,r7[-8]
800169d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800169dc:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800169e0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800169e4:	ee fa ff f0 	ld.w	r10,r7[-16]
800169e8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800169ec:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800169f0:	12 9b       	mov	r11,r9
800169f2:	10 9c       	mov	r12,r8
800169f4:	f0 16 00 08 	mcall	r6[32]
800169f8:	18 98       	mov	r8,r12
800169fa:	10 99       	mov	r9,r8
800169fc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80016a00:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80016a04:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80016a08:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80016a0c:	10 9c       	mov	r12,r8
80016a0e:	2f ad       	sub	sp,-24
80016a10:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016a14:	80 01       	ld.sh	r1,r0[0x0]
80016a16:	68 22       	ld.w	r2,r4[0x8]

80016a18 <init_adxl345>:

uint8_t data_configuration[2] ={
DATA_SETTING_ADDRESS, FULL_RES | RANGE_16G};


void init_adxl345(void) {
80016a18:	eb cd 40 c0 	pushm	r6-r7,lr
80016a1c:	1a 97       	mov	r7,sp
80016a1e:	4b 06       	lddpc	r6,80016adc <init_adxl345+0xc4>
80016a20:	1e 26       	rsub	r6,pc
	

	gyro_event.callback=0;
80016a22:	ec f8 00 8c 	ld.w	r8,r6[140]
80016a26:	30 09       	mov	r9,0
80016a28:	91 c9       	st.w	r8[0x30],r9
	gyro_event.repetition_rate_ms=5;
80016a2a:	ec f8 00 8c 	ld.w	r8,r6[140]
80016a2e:	30 59       	mov	r9,5
80016a30:	91 a9       	st.w	r8[0x28],r9
	gyro_event.trigger_next_event=-1;
80016a32:	ec f9 00 8c 	ld.w	r9,r6[140]
80016a36:	3f f8       	mov	r8,-1
80016a38:	f3 68 00 2c 	st.b	r9[44],r8

	gyro_event.config.slave_address=ADXL_ALT_SLAVE_ADDRESS;
80016a3c:	ec f9 00 8c 	ld.w	r9,r6[140]
80016a40:	35 38       	mov	r8,83
80016a42:	b2 88       	st.b	r9[0x0],r8
	gyro_event.config.direction=I2C_WRITE;
80016a44:	ec f9 00 8c 	ld.w	r9,r6[140]
80016a48:	30 18       	mov	r8,1
80016a4a:	f3 68 00 08 	st.b	r9[8],r8
	gyro_event.config.read_data=&acc_outputs.raw_data;
80016a4e:	ec f9 01 60 	ld.w	r9,r6[352]
80016a52:	ec f8 00 8c 	ld.w	r8,r6[140]
80016a56:	91 59       	st.w	r8[0x14],r9
	gyro_event.config.read_count=6;
80016a58:	ec f8 00 8c 	ld.w	r8,r6[140]
80016a5c:	30 69       	mov	r9,6
80016a5e:	91 69       	st.w	r8[0x18],r9
	gyro_event.config.write_data=&default_configuration;
80016a60:	ec f8 00 8c 	ld.w	r8,r6[140]
80016a64:	ec f9 01 40 	ld.w	r9,r6[320]
80016a68:	91 39       	st.w	r8[0xc],r9
	gyro_event.config.write_count=2;
80016a6a:	ec f8 00 8c 	ld.w	r8,r6[140]
80016a6e:	30 29       	mov	r9,2
80016a70:	91 49       	st.w	r8[0x10],r9
	gyro_event.config.i2c_speed=400000;
80016a72:	ec f8 00 8c 	ld.w	r8,r6[140]
80016a76:	e6 69 1a 80 	mov	r9,400000
80016a7a:	91 19       	st.w	r8[0x4],r9
	
	i2c_add_request(0, &gyro_event);
80016a7c:	ec fb 00 8c 	ld.w	r11,r6[140]
80016a80:	30 0c       	mov	r12,0
80016a82:	f0 16 01 18 	mcall	r6[1120]
	i2c_trigger_request(0, gyro_event.schedule_slot);
80016a86:	ec f8 00 8c 	ld.w	r8,r6[140]
80016a8a:	f1 38 00 24 	ld.ub	r8,r8[36]
80016a8e:	10 9b       	mov	r11,r8
80016a90:	30 0c       	mov	r12,0
80016a92:	f0 16 00 63 	mcall	r6[396]
	
	
	gyro_event.config.direction=I2C_WRITE1_THEN_READ;
80016a96:	ec f9 00 8c 	ld.w	r9,r6[140]
80016a9a:	30 28       	mov	r8,2
80016a9c:	f3 68 00 08 	st.b	r9[8],r8
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
80016aa0:	ec f9 00 8c 	ld.w	r9,r6[140]
80016aa4:	33 28       	mov	r8,50
80016aa6:	f3 68 00 09 	st.b	r9[9],r8
	gyro_event.config.read_data=&acc_outputs;
80016aaa:	ec f8 00 8c 	ld.w	r8,r6[140]
80016aae:	ec f9 01 60 	ld.w	r9,r6[352]
80016ab2:	91 59       	st.w	r8[0x14],r9
	gyro_event.config.read_count=6;
80016ab4:	ec f8 00 8c 	ld.w	r8,r6[140]
80016ab8:	30 69       	mov	r9,6
80016aba:	91 69       	st.w	r8[0x18],r9
	i2c_change_request(0, &gyro_event);
80016abc:	ec fb 00 8c 	ld.w	r11,r6[140]
80016ac0:	30 0c       	mov	r12,0
80016ac2:	f0 16 01 19 	mcall	r6[1124]
	i2c_trigger_request(0, gyro_event.schedule_slot);
80016ac6:	ec f8 00 8c 	ld.w	r8,r6[140]
80016aca:	f1 38 00 24 	ld.ub	r8,r8[36]
80016ace:	10 9b       	mov	r11,r8
80016ad0:	30 0c       	mov	r12,0
80016ad2:	f0 16 00 63 	mcall	r6[396]
	/**/
}
80016ad6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016ada:	00 00       	add	r0,r0
80016adc:	80 01       	ld.sh	r1,r0[0x0]
80016ade:	68 a4       	ld.w	r4,r4[0x28]

80016ae0 <init_adxl345_slow>:

void init_adxl345_slow(void) {
80016ae0:	eb cd 40 c0 	pushm	r6-r7,lr
80016ae4:	1a 97       	mov	r7,sp
80016ae6:	48 f6       	lddpc	r6,80016b20 <init_adxl345_slow+0x40>
80016ae8:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = ADXL_ALT_SLAVE_ADDRESS, 
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM0, &twi_opt);
80016aea:	ec fb 09 0c 	ld.w	r11,r6[2316]
80016aee:	fe 7c 38 00 	mov	r12,-51200
80016af2:	f0 16 00 75 	mcall	r6[468]
	twim_write(&AVR32_TWIM0, (uint8_t*)&default_configuration, 2, ADXL_ALT_SLAVE_ADDRESS, false);
80016af6:	30 08       	mov	r8,0
80016af8:	35 39       	mov	r9,83
80016afa:	30 2a       	mov	r10,2
80016afc:	ec fb 01 40 	ld.w	r11,r6[320]
80016b00:	fe 7c 38 00 	mov	r12,-51200
80016b04:	f0 16 00 36 	mcall	r6[216]
	twim_write(&AVR32_TWIM0, (uint8_t*)&data_configuration, 2, ADXL_ALT_SLAVE_ADDRESS, false);
80016b08:	30 08       	mov	r8,0
80016b0a:	35 39       	mov	r9,83
80016b0c:	30 2a       	mov	r10,2
80016b0e:	ec fb 08 a0 	ld.w	r11,r6[2208]
80016b12:	fe 7c 38 00 	mov	r12,-51200
80016b16:	f0 16 00 36 	mcall	r6[216]
}
80016b1a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016b1e:	00 00       	add	r0,r0
80016b20:	80 01       	ld.sh	r1,r0[0x0]
80016b22:	69 6c       	ld.w	r12,r4[0x58]

80016b24 <get_acc_data>:

acc_data* get_acc_data(void) {
80016b24:	eb cd 40 c0 	pushm	r6-r7,lr
80016b28:	1a 97       	mov	r7,sp
80016b2a:	48 86       	lddpc	r6,80016b48 <get_acc_data+0x24>
80016b2c:	1e 26       	rsub	r6,pc
	i2c_trigger_request(0, gyro_event.schedule_slot);
80016b2e:	ec f8 00 8c 	ld.w	r8,r6[140]
80016b32:	f1 38 00 24 	ld.ub	r8,r8[36]
80016b36:	10 9b       	mov	r11,r8
80016b38:	30 0c       	mov	r12,0
80016b3a:	f0 16 00 63 	mcall	r6[396]
	return &acc_outputs;
80016b3e:	ec f8 01 60 	ld.w	r8,r6[352]
}
80016b42:	10 9c       	mov	r12,r8
80016b44:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016b48:	80 01       	ld.sh	r1,r0[0x0]
80016b4a:	69 b0       	ld.w	r0,r4[0x6c]

80016b4c <get_acc_data_slow>:

acc_data* get_acc_data_slow(void) {
80016b4c:	eb cd 40 c0 	pushm	r6-r7,lr
80016b50:	1a 97       	mov	r7,sp
80016b52:	20 1d       	sub	sp,4
80016b54:	4a 96       	lddpc	r6,80016bf8 <get_acc_data_slow+0xac>
80016b56:	1e 26       	rsub	r6,pc
	int i;
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
80016b58:	ec f9 00 8c 	ld.w	r9,r6[140]
80016b5c:	33 28       	mov	r8,50
80016b5e:	f3 68 00 09 	st.b	r9[9],r8
	twim_write(&AVR32_TWIM0, (uint8_t*) &gyro_event.config.write_then_read_preamble, 1, ADXL_ALT_SLAVE_ADDRESS, false);
80016b62:	ec f8 00 8c 	ld.w	r8,r6[140]
80016b66:	f0 cb ff f7 	sub	r11,r8,-9
80016b6a:	30 08       	mov	r8,0
80016b6c:	35 39       	mov	r9,83
80016b6e:	30 1a       	mov	r10,1
80016b70:	fe 7c 38 00 	mov	r12,-51200
80016b74:	f0 16 00 36 	mcall	r6[216]
	twim_read(&AVR32_TWIM0, (uint8_t*)&acc_outputs, 6, ADXL_ALT_SLAVE_ADDRESS, false);
80016b78:	30 08       	mov	r8,0
80016b7a:	35 39       	mov	r9,83
80016b7c:	30 6a       	mov	r10,6
80016b7e:	ec fb 01 60 	ld.w	r11,r6[352]
80016b82:	fe 7c 38 00 	mov	r12,-51200
80016b86:	f0 16 00 62 	mcall	r6[392]
	
	for (i=0; i<3; i++) {
80016b8a:	30 08       	mov	r8,0
80016b8c:	ef 48 ff fc 	st.w	r7[-4],r8
80016b90:	c2 98       	rjmp	80016be2 <get_acc_data_slow+0x96>
		acc_outputs.axes[i]=(int16_t)(acc_outputs.raw_data[2*i])+(int16_t)(acc_outputs.raw_data[2*i+1]<<8);
80016b92:	ee fb ff fc 	ld.w	r11,r7[-4]
80016b96:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016b9a:	a1 78       	lsl	r8,0x1
80016b9c:	ec f9 01 60 	ld.w	r9,r6[352]
80016ba0:	f2 08 07 08 	ld.ub	r8,r9[r8]
80016ba4:	5c 58       	castu.b	r8
80016ba6:	10 99       	mov	r9,r8
80016ba8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016bac:	a1 78       	lsl	r8,0x1
80016bae:	2f f8       	sub	r8,-1
80016bb0:	ec fa 01 60 	ld.w	r10,r6[352]
80016bb4:	f4 08 07 08 	ld.ub	r8,r10[r8]
80016bb8:	5c 58       	castu.b	r8
80016bba:	a9 68       	lsl	r8,0x8
80016bbc:	5c 88       	casts.h	r8
80016bbe:	f2 08 00 08 	add	r8,r9,r8
80016bc2:	5c 88       	casts.h	r8
80016bc4:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80016bc8:	ec fa 01 60 	ld.w	r10,r6[352]
80016bcc:	f6 c8 ff fe 	sub	r8,r11,-2
80016bd0:	a1 78       	lsl	r8,0x1
80016bd2:	f4 08 00 08 	add	r8,r10,r8
80016bd6:	b0 19       	st.h	r8[0x2],r9
	int i;
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
	twim_write(&AVR32_TWIM0, (uint8_t*) &gyro_event.config.write_then_read_preamble, 1, ADXL_ALT_SLAVE_ADDRESS, false);
	twim_read(&AVR32_TWIM0, (uint8_t*)&acc_outputs, 6, ADXL_ALT_SLAVE_ADDRESS, false);
	
	for (i=0; i<3; i++) {
80016bd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016bdc:	2f f8       	sub	r8,-1
80016bde:	ef 48 ff fc 	st.w	r7[-4],r8
80016be2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016be6:	58 28       	cp.w	r8,2
80016be8:	fe 9a ff d5 	brle	80016b92 <get_acc_data_slow+0x46>
		acc_outputs.axes[i]=(int16_t)(acc_outputs.raw_data[2*i])+(int16_t)(acc_outputs.raw_data[2*i+1]<<8);
	}			
	return &acc_outputs;
80016bec:	ec f8 01 60 	ld.w	r8,r6[352]
80016bf0:	10 9c       	mov	r12,r8
80016bf2:	2f fd       	sub	sp,-4
80016bf4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016bf8:	80 01       	ld.sh	r1,r0[0x0]
80016bfa:	69 da       	ld.w	r10,r4[0x74]

80016bfc <f_abs>:

	}
	return result;
}

static inline float f_abs(const float a){
80016bfc:	eb cd 40 80 	pushm	r7,lr
80016c00:	1a 97       	mov	r7,sp
80016c02:	20 1d       	sub	sp,4
80016c04:	ef 4c ff fc 	st.w	r7[-4],r12
	if (a >= 0.0)
80016c08:	30 18       	mov	r8,1
80016c0a:	ee fa ff fc 	ld.w	r10,r7[-4]
80016c0e:	30 09       	mov	r9,0
80016c10:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80016c14:	e0 8c 00 03 	brvs	80016c1a <f_abs+0x1e>
80016c18:	c0 24       	brge	80016c1c <f_abs+0x20>
80016c1a:	30 08       	mov	r8,0
80016c1c:	5c 58       	castu.b	r8
80016c1e:	c0 40       	breq	80016c26 <f_abs+0x2a>
	{
		return a;
80016c20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016c24:	c0 58       	rjmp	80016c2e <f_abs+0x32>
	}else{
		return -a;
80016c26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016c2a:	ee 18 80 00 	eorh	r8,0x8000
	}
}
80016c2e:	10 9c       	mov	r12,r8
80016c30:	2f fd       	sub	sp,-4
80016c32:	e3 cd 80 80 	ldm	sp++,r7,pc

80016c36 <median_filter_3x>:
static float inline center_window_4(float x) {
	return 1.0/(1+SQR(SQR(x)));
}


static float inline median_filter_3x(float a, float b, float c) {
80016c36:	eb cd 40 80 	pushm	r7,lr
80016c3a:	1a 97       	mov	r7,sp
80016c3c:	20 4d       	sub	sp,16
80016c3e:	ef 4c ff f8 	st.w	r7[-8],r12
80016c42:	ef 4b ff f4 	st.w	r7[-12],r11
80016c46:	ef 4a ff f0 	st.w	r7[-16],r10
	float middle;
	if ((a <= b) && (a <= c)) {
80016c4a:	30 18       	mov	r8,1
80016c4c:	ee fa ff f8 	ld.w	r10,r7[-8]
80016c50:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016c54:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80016c58:	e0 8c 00 04 	brvs	80016c60 <median_filter_3x+0x2a>
80016c5c:	e0 8a 00 03 	brle	80016c62 <median_filter_3x+0x2c>
80016c60:	30 08       	mov	r8,0
80016c62:	5c 58       	castu.b	r8
80016c64:	c2 50       	breq	80016cae <median_filter_3x+0x78>
80016c66:	30 18       	mov	r8,1
80016c68:	ee fa ff f8 	ld.w	r10,r7[-8]
80016c6c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80016c70:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80016c74:	e0 8c 00 04 	brvs	80016c7c <median_filter_3x+0x46>
80016c78:	e0 8a 00 03 	brle	80016c7e <median_filter_3x+0x48>
80016c7c:	30 08       	mov	r8,0
80016c7e:	5c 58       	castu.b	r8
80016c80:	c1 70       	breq	80016cae <median_filter_3x+0x78>
		middle = (b <= c) ? b : c;
80016c82:	30 18       	mov	r8,1
80016c84:	ee fa ff f4 	ld.w	r10,r7[-12]
80016c88:	ee f9 ff f0 	ld.w	r9,r7[-16]
80016c8c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80016c90:	e0 8c 00 04 	brvs	80016c98 <median_filter_3x+0x62>
80016c94:	e0 8a 00 03 	brle	80016c9a <median_filter_3x+0x64>
80016c98:	30 08       	mov	r8,0
80016c9a:	5c 58       	castu.b	r8
80016c9c:	c0 40       	breq	80016ca4 <median_filter_3x+0x6e>
80016c9e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016ca2:	c0 38       	rjmp	80016ca8 <median_filter_3x+0x72>
80016ca4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016ca8:	ef 48 ff fc 	st.w	r7[-4],r8
}


static float inline median_filter_3x(float a, float b, float c) {
	float middle;
	if ((a <= b) && (a <= c)) {
80016cac:	c4 88       	rjmp	80016d3c <median_filter_3x+0x106>
		middle = (b <= c) ? b : c;
	}
	else if ((b <= a) && (b <= c))
80016cae:	30 18       	mov	r8,1
80016cb0:	ee fa ff f4 	ld.w	r10,r7[-12]
80016cb4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80016cb8:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80016cbc:	e0 8c 00 04 	brvs	80016cc4 <median_filter_3x+0x8e>
80016cc0:	e0 8a 00 03 	brle	80016cc6 <median_filter_3x+0x90>
80016cc4:	30 08       	mov	r8,0
80016cc6:	5c 58       	castu.b	r8
80016cc8:	c2 50       	breq	80016d12 <median_filter_3x+0xdc>
80016cca:	30 18       	mov	r8,1
80016ccc:	ee fa ff f4 	ld.w	r10,r7[-12]
80016cd0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80016cd4:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80016cd8:	e0 8c 00 04 	brvs	80016ce0 <median_filter_3x+0xaa>
80016cdc:	e0 8a 00 03 	brle	80016ce2 <median_filter_3x+0xac>
80016ce0:	30 08       	mov	r8,0
80016ce2:	5c 58       	castu.b	r8
80016ce4:	c1 70       	breq	80016d12 <median_filter_3x+0xdc>
	{
		middle = (a <= c) ? a : c;
80016ce6:	30 18       	mov	r8,1
80016ce8:	ee fa ff f8 	ld.w	r10,r7[-8]
80016cec:	ee f9 ff f0 	ld.w	r9,r7[-16]
80016cf0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80016cf4:	e0 8c 00 04 	brvs	80016cfc <median_filter_3x+0xc6>
80016cf8:	e0 8a 00 03 	brle	80016cfe <median_filter_3x+0xc8>
80016cfc:	30 08       	mov	r8,0
80016cfe:	5c 58       	castu.b	r8
80016d00:	c0 40       	breq	80016d08 <median_filter_3x+0xd2>
80016d02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016d06:	c0 38       	rjmp	80016d0c <median_filter_3x+0xd6>
80016d08:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016d0c:	ef 48 ff fc 	st.w	r7[-4],r8
static float inline median_filter_3x(float a, float b, float c) {
	float middle;
	if ((a <= b) && (a <= c)) {
		middle = (b <= c) ? b : c;
	}
	else if ((b <= a) && (b <= c))
80016d10:	c1 68       	rjmp	80016d3c <median_filter_3x+0x106>
	{
		middle = (a <= c) ? a : c;
	} else {
	   middle = (a <= b) ? a : b;
80016d12:	30 18       	mov	r8,1
80016d14:	ee fa ff f8 	ld.w	r10,r7[-8]
80016d18:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016d1c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80016d20:	e0 8c 00 04 	brvs	80016d28 <median_filter_3x+0xf2>
80016d24:	e0 8a 00 03 	brle	80016d2a <median_filter_3x+0xf4>
80016d28:	30 08       	mov	r8,0
80016d2a:	5c 58       	castu.b	r8
80016d2c:	c0 40       	breq	80016d34 <median_filter_3x+0xfe>
80016d2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016d32:	c0 38       	rjmp	80016d38 <median_filter_3x+0x102>
80016d34:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016d38:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	return middle;
80016d3c:	ee f8 ff fc 	ld.w	r8,r7[-4]

}
80016d40:	10 9c       	mov	r12,r8
80016d42:	2f cd       	sub	sp,-16
80016d44:	e3 cd 80 80 	ldm	sp++,r7,pc

80016d48 <interpolate>:


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80016d48:	eb cd 40 c0 	pushm	r6-r7,lr
80016d4c:	1a 97       	mov	r7,sp
80016d4e:	20 6d       	sub	sp,24
80016d50:	49 e6       	lddpc	r6,80016dc8 <interpolate+0x80>
80016d52:	1e 26       	rsub	r6,pc
80016d54:	ef 4c ff f8 	st.w	r7[-8],r12
80016d58:	ef 4b ff f4 	st.w	r7[-12],r11
80016d5c:	ef 4a ff f0 	st.w	r7[-16],r10
80016d60:	ef 49 ff ec 	st.w	r7[-20],r9
80016d64:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80016d68:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016d6c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016d70:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80016d74:	c0 41       	brne	80016d7c <interpolate+0x34>
	{
		return y1;
80016d76:	ee f8 ff ec 	ld.w	r8,r7[-20]
80016d7a:	c2 38       	rjmp	80016dc0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80016d7c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80016d80:	ee f8 ff ec 	ld.w	r8,r7[-20]
80016d84:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80016d88:	ee fa ff f8 	ld.w	r10,r7[-8]
80016d8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016d90:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80016d94:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80016d98:	ee fa ff f0 	ld.w	r10,r7[-16]
80016d9c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016da0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80016da4:	12 9b       	mov	r11,r9
80016da6:	10 9c       	mov	r12,r8
80016da8:	f0 16 00 08 	mcall	r6[32]
80016dac:	18 98       	mov	r8,r12
80016dae:	10 99       	mov	r9,r8
80016db0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80016db4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80016db8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80016dbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80016dc0:	10 9c       	mov	r12,r8
80016dc2:	2f ad       	sub	sp,-24
80016dc4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016dc8:	80 01       	ld.sh	r1,r0[0x0]
80016dca:	6b d6       	ld.w	r6,r5[0x74]

80016dcc <bmp085_read_int>:
#include <stdbool.h>
#include "print_util.h"

pressure_data pressure_outputs;

int16_t bmp085_read_int(unsigned char address) {
80016dcc:	eb cd 40 c0 	pushm	r6-r7,lr
80016dd0:	1a 97       	mov	r7,sp
80016dd2:	20 2d       	sub	sp,8
80016dd4:	48 f6       	lddpc	r6,80016e10 <bmp085_read_int+0x44>
80016dd6:	1e 26       	rsub	r6,pc
80016dd8:	18 98       	mov	r8,r12
80016dda:	ef 68 ff f8 	st.b	r7[-8],r8
	int16_t result;
	twim_write(&AVR32_TWIM0, (uint8_t*) &address, 1, BMP085_SLAVE_ADDRESS, false);
80016dde:	ee cb 00 08 	sub	r11,r7,8
80016de2:	30 08       	mov	r8,0
80016de4:	37 79       	mov	r9,119
80016de6:	30 1a       	mov	r10,1
80016de8:	fe 7c 38 00 	mov	r12,-51200
80016dec:	f0 16 00 36 	mcall	r6[216]
	twim_read(&AVR32_TWIM0, (uint8_t*)&(result), 2, BMP085_SLAVE_ADDRESS, false);
80016df0:	ee cb 00 02 	sub	r11,r7,2
80016df4:	30 08       	mov	r8,0
80016df6:	37 79       	mov	r9,119
80016df8:	30 2a       	mov	r10,2
80016dfa:	fe 7c 38 00 	mov	r12,-51200
80016dfe:	f0 16 00 62 	mcall	r6[392]
	return result;
80016e02:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80016e06:	10 9c       	mov	r12,r8
80016e08:	2f ed       	sub	sp,-8
80016e0a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016e0e:	00 00       	add	r0,r0
80016e10:	80 01       	ld.sh	r1,r0[0x0]
80016e12:	6c 5a       	ld.w	r10,r6[0x14]

80016e14 <init_bmp085>:

void init_bmp085(){
80016e14:	eb cd 40 c0 	pushm	r6-r7,lr
80016e18:	1a 97       	mov	r7,sp
80016e1a:	20 1d       	sub	sp,4
80016e1c:	49 36       	lddpc	r6,80016e68 <init_bmp085+0x54>
80016e1e:	1e 26       	rsub	r6,pc
	int i;
	pressure_outputs.altitude_offset=0.0;
80016e20:	ec f8 00 48 	ld.w	r8,r6[72]
80016e24:	30 09       	mov	r9,0
80016e26:	91 89       	st.w	r8[0x20],r9
	for (i=0; i<3; i++) pressure_outputs.last_altitudes[i]=0.0;
80016e28:	30 08       	mov	r8,0
80016e2a:	ef 48 ff fc 	st.w	r7[-4],r8
80016e2e:	c0 e8       	rjmp	80016e4a <init_bmp085+0x36>
80016e30:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016e34:	ec f8 00 48 	ld.w	r8,r6[72]
80016e38:	2f c9       	sub	r9,-4
80016e3a:	30 0a       	mov	r10,0
80016e3c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80016e40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016e44:	2f f8       	sub	r8,-1
80016e46:	ef 48 ff fc 	st.w	r7[-4],r8
80016e4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016e4e:	58 28       	cp.w	r8,2
80016e50:	fe 9a ff f0 	brle	80016e30 <init_bmp085+0x1c>
	pressure_outputs.vario_vz=0.0;
80016e54:	ec f8 00 48 	ld.w	r8,r6[72]
80016e58:	30 09       	mov	r9,0
80016e5a:	91 99       	st.w	r8[0x24],r9
	init_bmp085_slow();
80016e5c:	f0 16 01 fc 	mcall	r6[2032]
}
80016e60:	2f fd       	sub	sp,-4
80016e62:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016e66:	00 00       	add	r0,r0
80016e68:	80 01       	ld.sh	r1,r0[0x0]
80016e6a:	6c a2       	ld.w	r2,r6[0x28]
80016e6c:	42 4d       	lddsp	sp,sp[0x90]
80016e6e:	50 38       	stdsp	sp[0xc],r8
80016e70:	35 2f       	mov	pc,82
80016e72:	31 38       	mov	r8,19
80016e74:	30 20       	mov	r0,2
80016e76:	70 72       	ld.w	r2,r8[0x1c]
80016e78:	65 73       	ld.w	r3,r2[0x5c]
80016e7a:	73 75       	ld.w	r5,r9[0x5c]
80016e7c:	72 65       	ld.w	r5,r9[0x18]
80016e7e:	20 73       	sub	r3,7
80016e80:	65 6e       	ld.w	lr,r2[0x58]
80016e82:	73 6f       	ld.w	pc,r9[0x58]
80016e84:	72 20       	ld.w	r0,r9[0x8]
80016e86:	66 6f       	ld.w	pc,r3[0x18]
80016e88:	75 6e       	ld.w	lr,r10[0x58]
80016e8a:	64 20       	ld.w	r0,r2[0x8]
80016e8c:	28 30       	sub	r0,-125
80016e8e:	78 37       	ld.w	r7,r12[0xc]
80016e90:	37 29       	mov	r9,114
80016e92:	0a 00       	add	r0,r5
80016e94:	42 4d       	lddsp	sp,sp[0x90]
80016e96:	50 38       	stdsp	sp[0xc],r8
80016e98:	35 2f       	mov	pc,82
80016e9a:	31 38       	mov	r8,19
80016e9c:	30 20       	mov	r0,2
80016e9e:	70 72       	ld.w	r2,r8[0x1c]
80016ea0:	65 73       	ld.w	r3,r2[0x5c]
80016ea2:	73 75       	ld.w	r5,r9[0x5c]
80016ea4:	72 65       	ld.w	r5,r9[0x18]
80016ea6:	20 73       	sub	r3,7
80016ea8:	65 6e       	ld.w	lr,r2[0x58]
80016eaa:	73 6f       	ld.w	pc,r9[0x58]
80016eac:	72 20       	ld.w	r0,r9[0x8]
80016eae:	6e 6f       	ld.w	pc,r7[0x18]
80016eb0:	74 20       	ld.w	r0,r10[0x8]
80016eb2:	72 65       	ld.w	r5,r9[0x18]
80016eb4:	73 70       	ld.w	r0,r9[0x5c]
80016eb6:	6f 6e       	ld.w	lr,r7[0x58]
80016eb8:	64 69       	ld.w	r9,r2[0x18]
80016eba:	6e 67       	ld.w	r7,r7[0x18]
80016ebc:	20 28       	sub	r8,2
80016ebe:	30 78       	mov	r8,7
80016ec0:	37 37       	mov	r7,115
80016ec2:	29 0a       	sub	r10,-112
	...

80016ec6 <init_bmp085_slow>:

  int16_t ac1, ac2, ac3, b1, b2, mb, mc, md;
  uint16_t ac4, ac5, ac6;


void init_bmp085_slow(){
80016ec6:	eb cd 40 c0 	pushm	r6-r7,lr
80016eca:	1a 97       	mov	r7,sp
80016ecc:	4d 36       	lddpc	r6,80017018 <init_bmp085_slow+0x152>
80016ece:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = BMP085_SLAVE_ADDRESS,
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM0, &twi_opt);
80016ed0:	ec fb 09 08 	ld.w	r11,r6[2312]
80016ed4:	fe 7c 38 00 	mov	r12,-51200
80016ed8:	f0 16 00 75 	mcall	r6[468]

	if (twim_probe(&AVR32_TWIM0, BMP085_SLAVE_ADDRESS)==STATUS_OK) {
80016edc:	37 7b       	mov	r11,119
80016ede:	fe 7c 38 00 	mov	r12,-51200
80016ee2:	f0 16 01 0f 	mcall	r6[1084]
80016ee6:	18 98       	mov	r8,r12
80016ee8:	58 08       	cp.w	r8,0
80016eea:	e0 81 00 8f 	brne	80017008 <init_bmp085_slow+0x142>
		dbg_print("BMP85/180 pressure sensor found (0x77)\n");
80016eee:	fe cc 00 82 	sub	r12,pc,130
80016ef2:	f0 16 00 01 	mcall	r6[4]
	} else {
		dbg_print("BMP85/180 pressure sensor not responding (0x77)\n");
		return;
	}
	ac1 = 408;
80016ef6:	ec f9 03 54 	ld.w	r9,r6[852]
80016efa:	e0 68 01 98 	mov	r8,408
80016efe:	b2 08       	st.h	r9[0x0],r8
	ac2 = -72;
80016f00:	ec f9 03 30 	ld.w	r9,r6[816]
80016f04:	3b 88       	mov	r8,-72
80016f06:	b2 08       	st.h	r9[0x0],r8
	ac3 = -14383;
80016f08:	ec f9 02 b4 	ld.w	r9,r6[692]
80016f0c:	fe 78 c7 d1 	mov	r8,-14383
80016f10:	b2 08       	st.h	r9[0x0],r8
	ac4 = 32741;
80016f12:	ec f9 03 14 	ld.w	r9,r6[788]
80016f16:	e0 68 7f e5 	mov	r8,32741
80016f1a:	b2 08       	st.h	r9[0x0],r8
	ac5 = 32757;
80016f1c:	ec f9 03 34 	ld.w	r9,r6[820]
80016f20:	e0 68 7f f5 	mov	r8,32757
80016f24:	b2 08       	st.h	r9[0x0],r8
	ac6 = 23153;
80016f26:	ec f9 03 44 	ld.w	r9,r6[836]
80016f2a:	e0 68 5a 71 	mov	r8,23153
80016f2e:	b2 08       	st.h	r9[0x0],r8
	mc = -8711;
80016f30:	ec f9 02 ec 	ld.w	r9,r6[748]
80016f34:	fe 78 dd f9 	mov	r8,-8711
80016f38:	b2 08       	st.h	r9[0x0],r8
	md = 2868;
80016f3a:	ec f9 03 20 	ld.w	r9,r6[800]
80016f3e:	e0 68 0b 34 	mov	r8,2868
80016f42:	b2 08       	st.h	r9[0x0],r8
	b1 = 6190;
80016f44:	ec f9 03 48 	ld.w	r9,r6[840]
80016f48:	e0 68 18 2e 	mov	r8,6190
80016f4c:	b2 08       	st.h	r9[0x0],r8
	b2 = 4;
80016f4e:	ec f9 03 68 	ld.w	r9,r6[872]
80016f52:	30 48       	mov	r8,4
80016f54:	b2 08       	st.h	r9[0x0],r8

	
	ac1=bmp085_read_int(0xAA);
80016f56:	e0 6c 00 aa 	mov	r12,170
80016f5a:	f0 16 00 46 	mcall	r6[280]
80016f5e:	18 98       	mov	r8,r12
80016f60:	ec f9 03 54 	ld.w	r9,r6[852]
80016f64:	b2 08       	st.h	r9[0x0],r8
	ac2=bmp085_read_int(0xAC);
80016f66:	e0 6c 00 ac 	mov	r12,172
80016f6a:	f0 16 00 46 	mcall	r6[280]
80016f6e:	18 98       	mov	r8,r12
80016f70:	ec f9 03 30 	ld.w	r9,r6[816]
80016f74:	b2 08       	st.h	r9[0x0],r8
	ac3=bmp085_read_int(0xAE);
80016f76:	e0 6c 00 ae 	mov	r12,174
80016f7a:	f0 16 00 46 	mcall	r6[280]
80016f7e:	18 98       	mov	r8,r12
80016f80:	ec f9 02 b4 	ld.w	r9,r6[692]
80016f84:	b2 08       	st.h	r9[0x0],r8
	ac4=bmp085_read_int(0xB0);
80016f86:	e0 6c 00 b0 	mov	r12,176
80016f8a:	f0 16 00 46 	mcall	r6[280]
80016f8e:	18 98       	mov	r8,r12
80016f90:	ec f9 03 14 	ld.w	r9,r6[788]
80016f94:	b2 08       	st.h	r9[0x0],r8
	ac5=bmp085_read_int(0xB2);
80016f96:	e0 6c 00 b2 	mov	r12,178
80016f9a:	f0 16 00 46 	mcall	r6[280]
80016f9e:	18 98       	mov	r8,r12
80016fa0:	ec f9 03 34 	ld.w	r9,r6[820]
80016fa4:	b2 08       	st.h	r9[0x0],r8
	ac6=bmp085_read_int(0xB4);
80016fa6:	e0 6c 00 b4 	mov	r12,180
80016faa:	f0 16 00 46 	mcall	r6[280]
80016fae:	18 98       	mov	r8,r12
80016fb0:	ec f9 03 44 	ld.w	r9,r6[836]
80016fb4:	b2 08       	st.h	r9[0x0],r8
	b1=bmp085_read_int(0xB6);
80016fb6:	e0 6c 00 b6 	mov	r12,182
80016fba:	f0 16 00 46 	mcall	r6[280]
80016fbe:	18 98       	mov	r8,r12
80016fc0:	ec f9 03 48 	ld.w	r9,r6[840]
80016fc4:	b2 08       	st.h	r9[0x0],r8
	b2=bmp085_read_int(0xB8);
80016fc6:	e0 6c 00 b8 	mov	r12,184
80016fca:	f0 16 00 46 	mcall	r6[280]
80016fce:	18 98       	mov	r8,r12
80016fd0:	ec f9 03 68 	ld.w	r9,r6[872]
80016fd4:	b2 08       	st.h	r9[0x0],r8
	mb=bmp085_read_int(0xBA);
80016fd6:	e0 6c 00 ba 	mov	r12,186
80016fda:	f0 16 00 46 	mcall	r6[280]
80016fde:	18 98       	mov	r8,r12
80016fe0:	ec f9 08 44 	ld.w	r9,r6[2116]
80016fe4:	b2 08       	st.h	r9[0x0],r8
	mc=bmp085_read_int(0xBC);
80016fe6:	e0 6c 00 bc 	mov	r12,188
80016fea:	f0 16 00 46 	mcall	r6[280]
80016fee:	18 98       	mov	r8,r12
80016ff0:	ec f9 02 ec 	ld.w	r9,r6[748]
80016ff4:	b2 08       	st.h	r9[0x0],r8
	md=bmp085_read_int(0xBE);
80016ff6:	e0 6c 00 be 	mov	r12,190
80016ffa:	f0 16 00 46 	mcall	r6[280]
80016ffe:	18 98       	mov	r8,r12
80017000:	ec f9 03 20 	ld.w	r9,r6[800]
80017004:	b2 08       	st.h	r9[0x0],r8
80017006:	c0 68       	rjmp	80017012 <init_bmp085_slow+0x14c>
	twim_master_init(&AVR32_TWIM0, &twi_opt);

	if (twim_probe(&AVR32_TWIM0, BMP085_SLAVE_ADDRESS)==STATUS_OK) {
		dbg_print("BMP85/180 pressure sensor found (0x77)\n");
	} else {
		dbg_print("BMP85/180 pressure sensor not responding (0x77)\n");
80017008:	fe cc 01 74 	sub	r12,pc,372
8001700c:	f0 16 00 01 	mcall	r6[4]
		return;
80017010:	d7 03       	nop
	mb=bmp085_read_int(0xBA);
	mc=bmp085_read_int(0xBC);
	md=bmp085_read_int(0xBE);
	
	
}
80017012:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017016:	00 00       	add	r0,r0
80017018:	80 01       	ld.sh	r1,r0[0x0]
8001701a:	6d 52       	ld.w	r2,r6[0x54]

8001701c <get_pressure_data_slow>:

 


pressure_data* get_pressure_data_slow(float offset) {
8001701c:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
80017020:	1a 97       	mov	r7,sp
80017022:	21 4d       	sub	sp,80
80017024:	fe f6 06 2c 	ld.w	r6,pc[1580]
80017028:	1e 26       	rsub	r6,pc
8001702a:	ef 4c ff b0 	st.w	r7[-80],r12
		int32_t UT, UP, B3, B5, B6, X1, X2, X3, p;
		uint32_t B4, B7;
			
		uint8_t start_address;
		
		uint8_t start_command_temp []={BMP085_CONTROL, BMP085_READTEMPCMD};
8001702e:	ec f8 09 04 	ld.w	r8,r6[2308]
80017032:	90 08       	ld.sh	r8,r8[0x0]
80017034:	ef 58 ff b8 	st.h	r7[-72],r8
		uint8_t start_command_pressure []={BMP085_CONTROL, BMP085_READPRESSURECMD+ (BMP085_OVERSAMPLING_MODE << 6)};
80017038:	ec f8 09 00 	ld.w	r8,r6[2304]
8001703c:	90 08       	ld.sh	r8,r8[0x0]
8001703e:	ef 58 ff b4 	st.h	r7[-76],r8
		int32_t sealevelPressure=101325;
80017042:	e0 78 8b cd 	mov	r8,101325
80017046:	ef 48 ff f4 	st.w	r7[-12],r8
		float dt;
		// calibration: use datasheet numbers!

		switch (pressure_outputs.state) {
8001704a:	ec f8 00 48 	ld.w	r8,r6[72]
8001704e:	70 c8       	ld.w	r8,r8[0x30]
80017050:	58 18       	cp.w	r8,1
80017052:	c1 50       	breq	8001707c <get_pressure_data_slow+0x60>
80017054:	c0 53       	brcs	8001705e <get_pressure_data_slow+0x42>
80017056:	58 28       	cp.w	r8,2
80017058:	c3 80       	breq	800170c8 <get_pressure_data_slow+0xac>
8001705a:	e0 8f 02 e9 	bral	8001762c <get_pressure_data_slow+0x610>
		case IDLE:
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_command_temp, 2, BMP085_SLAVE_ADDRESS, false);
8001705e:	ee cb 00 48 	sub	r11,r7,72
80017062:	30 08       	mov	r8,0
80017064:	37 79       	mov	r9,119
80017066:	30 2a       	mov	r10,2
80017068:	fe 7c 38 00 	mov	r12,-51200
8001706c:	f0 16 00 36 	mcall	r6[216]
		    //delay_ms(7);
			pressure_outputs.state=GET_TEMP;
80017070:	ec f8 00 48 	ld.w	r8,r6[72]
80017074:	30 19       	mov	r9,1
80017076:	91 c9       	st.w	r8[0x30],r9
			break;
80017078:	e0 8f 02 da 	bral	8001762c <get_pressure_data_slow+0x610>
		case GET_TEMP:
			start_address=BMP085_TEMPDATA;
8001707c:	3f 68       	mov	r8,-10
8001707e:	ef 68 ff bb 	st.b	r7[-69],r8
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, BMP085_SLAVE_ADDRESS, false);
80017082:	ee cb 00 45 	sub	r11,r7,69
80017086:	30 08       	mov	r8,0
80017088:	37 79       	mov	r9,119
8001708a:	30 1a       	mov	r10,1
8001708c:	fe 7c 38 00 	mov	r12,-51200
80017090:	f0 16 00 36 	mcall	r6[216]
			twim_read(&AVR32_TWIM0, (uint8_t*)&(pressure_outputs.raw_temperature), 2, BMP085_SLAVE_ADDRESS, false);
80017094:	ec f8 00 48 	ld.w	r8,r6[72]
80017098:	f0 cb ff fd 	sub	r11,r8,-3
8001709c:	30 08       	mov	r8,0
8001709e:	37 79       	mov	r9,119
800170a0:	30 2a       	mov	r10,2
800170a2:	fe 7c 38 00 	mov	r12,-51200
800170a6:	f0 16 00 62 	mcall	r6[392]
		
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_command_pressure, 2, BMP085_SLAVE_ADDRESS, false);
800170aa:	ee cb 00 4c 	sub	r11,r7,76
800170ae:	30 08       	mov	r8,0
800170b0:	37 79       	mov	r9,119
800170b2:	30 2a       	mov	r10,2
800170b4:	fe 7c 38 00 	mov	r12,-51200
800170b8:	f0 16 00 36 	mcall	r6[216]
			pressure_outputs.state=GET_PRESSURE;
800170bc:	ec f8 00 48 	ld.w	r8,r6[72]
800170c0:	30 29       	mov	r9,2
800170c2:	91 c9       	st.w	r8[0x30],r9
			//delay_ms(15);
			break;
800170c4:	e0 8f 02 b4 	bral	8001762c <get_pressure_data_slow+0x610>
		case GET_PRESSURE:
			start_address=BMP085_PRESSUREDATA;
800170c8:	3f 68       	mov	r8,-10
800170ca:	ef 68 ff bb 	st.b	r7[-69],r8
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, BMP085_SLAVE_ADDRESS, false);
800170ce:	ee cb 00 45 	sub	r11,r7,69
800170d2:	30 08       	mov	r8,0
800170d4:	37 79       	mov	r9,119
800170d6:	30 1a       	mov	r10,1
800170d8:	fe 7c 38 00 	mov	r12,-51200
800170dc:	f0 16 00 36 	mcall	r6[216]
			twim_read(&AVR32_TWIM0, (uint8_t*)&(pressure_outputs.raw_pressure), 3, BMP085_SLAVE_ADDRESS, false);
800170e0:	30 08       	mov	r8,0
800170e2:	37 79       	mov	r9,119
800170e4:	30 3a       	mov	r10,3
800170e6:	ec fb 00 48 	ld.w	r11,r6[72]
800170ea:	fe 7c 38 00 	mov	r12,-51200
800170ee:	f0 16 00 62 	mcall	r6[392]
		
			UP= ((uint32_t)pressure_outputs.raw_pressure[0]<<16 |(uint32_t)pressure_outputs.raw_pressure[1]<<8 | (uint32_t)pressure_outputs.raw_pressure[2]) >> (8-BMP085_OVERSAMPLING_MODE);
800170f2:	ec f8 00 48 	ld.w	r8,r6[72]
800170f6:	11 88       	ld.ub	r8,r8[0x0]
800170f8:	f0 09 15 10 	lsl	r9,r8,0x10
800170fc:	ec f8 00 48 	ld.w	r8,r6[72]
80017100:	11 98       	ld.ub	r8,r8[0x1]
80017102:	a9 68       	lsl	r8,0x8
80017104:	10 49       	or	r9,r8
80017106:	ec f8 00 48 	ld.w	r8,r6[72]
8001710a:	11 a8       	ld.ub	r8,r8[0x2]
8001710c:	f3 e8 10 08 	or	r8,r9,r8
80017110:	a7 88       	lsr	r8,0x6
80017112:	ef 48 ff cc 	st.w	r7[-52],r8
 
			UT=pressure_outputs.raw_temperature[0]<<8 |pressure_outputs.raw_temperature[1];
80017116:	ec f8 00 48 	ld.w	r8,r6[72]
8001711a:	11 b8       	ld.ub	r8,r8[0x3]
8001711c:	f0 09 15 08 	lsl	r9,r8,0x8
80017120:	ec f8 00 48 	ld.w	r8,r6[72]
80017124:	11 c8       	ld.ub	r8,r8[0x4]
80017126:	f3 e8 10 08 	or	r8,r9,r8
8001712a:	ef 48 ff c8 	st.w	r7[-56],r8
			// step 1
			X1 = (UT - (int32_t)ac6) * ((int32_t)ac5) / pow(2,15);
8001712e:	ec f8 03 44 	ld.w	r8,r6[836]
80017132:	90 08       	ld.sh	r8,r8[0x0]
80017134:	5c 78       	castu.h	r8
80017136:	ee f9 ff c8 	ld.w	r9,r7[-56]
8001713a:	10 19       	sub	r9,r8
8001713c:	ec f8 03 34 	ld.w	r8,r6[820]
80017140:	90 08       	ld.sh	r8,r8[0x0]
80017142:	5c 78       	castu.h	r8
80017144:	f2 08 02 48 	mul	r8,r9,r8
80017148:	10 9c       	mov	r12,r8
8001714a:	f0 16 00 1a 	mcall	r6[104]
8001714e:	30 08       	mov	r8,0
80017150:	fc 19 40 e0 	movh	r9,0x40e0
80017154:	f0 16 00 0c 	mcall	r6[48]
80017158:	14 98       	mov	r8,r10
8001715a:	16 99       	mov	r9,r11
8001715c:	10 9a       	mov	r10,r8
8001715e:	12 9b       	mov	r11,r9
80017160:	f0 16 00 14 	mcall	r6[80]
80017164:	18 98       	mov	r8,r12
80017166:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = ((int32_t)mc * pow(2,11)) / (X1+(int32_t)md);
8001716a:	ec f8 02 ec 	ld.w	r8,r6[748]
8001716e:	90 08       	ld.sh	r8,r8[0x0]
80017170:	10 9c       	mov	r12,r8
80017172:	f0 16 00 1a 	mcall	r6[104]
80017176:	30 08       	mov	r8,0
80017178:	fc 19 40 a0 	movh	r9,0x40a0
8001717c:	f0 16 00 03 	mcall	r6[12]
80017180:	14 98       	mov	r8,r10
80017182:	16 99       	mov	r9,r11
80017184:	10 92       	mov	r2,r8
80017186:	12 93       	mov	r3,r9
80017188:	ec f8 03 20 	ld.w	r8,r6[800]
8001718c:	90 08       	ld.sh	r8,r8[0x0]
8001718e:	10 99       	mov	r9,r8
80017190:	ee f8 ff dc 	ld.w	r8,r7[-36]
80017194:	f2 08 00 08 	add	r8,r9,r8
80017198:	10 9c       	mov	r12,r8
8001719a:	f0 16 00 1a 	mcall	r6[104]
8001719e:	14 98       	mov	r8,r10
800171a0:	16 99       	mov	r9,r11
800171a2:	04 9a       	mov	r10,r2
800171a4:	06 9b       	mov	r11,r3
800171a6:	f0 16 00 0c 	mcall	r6[48]
800171aa:	14 98       	mov	r8,r10
800171ac:	16 99       	mov	r9,r11
800171ae:	10 9a       	mov	r10,r8
800171b0:	12 9b       	mov	r11,r9
800171b2:	f0 16 00 14 	mcall	r6[80]
800171b6:	18 98       	mov	r8,r12
800171b8:	ef 48 ff e0 	st.w	r7[-32],r8
			B5 = X1 + X2;
800171bc:	ee f9 ff dc 	ld.w	r9,r7[-36]
800171c0:	ee f8 ff e0 	ld.w	r8,r7[-32]
800171c4:	f2 08 00 08 	add	r8,r9,r8
800171c8:	ef 48 ff d4 	st.w	r7[-44],r8
			pressure_outputs.temperature = (B5+8)/pow(2,4);
800171cc:	ee f8 ff d4 	ld.w	r8,r7[-44]
800171d0:	2f 88       	sub	r8,-8
800171d2:	10 9c       	mov	r12,r8
800171d4:	f0 16 00 1a 	mcall	r6[104]
800171d8:	30 08       	mov	r8,0
800171da:	fc 19 40 30 	movh	r9,0x4030
800171de:	f0 16 00 0c 	mcall	r6[48]
800171e2:	14 98       	mov	r8,r10
800171e4:	16 99       	mov	r9,r11
800171e6:	10 9a       	mov	r10,r8
800171e8:	12 9b       	mov	r11,r9
800171ea:	f0 16 00 09 	mcall	r6[36]
800171ee:	18 99       	mov	r9,r12
800171f0:	ec f8 00 48 	ld.w	r8,r6[72]
800171f4:	91 39       	st.w	r8[0xc],r9
			pressure_outputs.temperature /= 10;
800171f6:	ec f8 00 48 	ld.w	r8,r6[72]
800171fa:	70 38       	ld.w	r8,r8[0xc]
800171fc:	fc 1b 41 20 	movh	r11,0x4120
80017200:	10 9c       	mov	r12,r8
80017202:	f0 16 00 08 	mcall	r6[32]
80017206:	18 98       	mov	r8,r12
80017208:	10 99       	mov	r9,r8
8001720a:	ec f8 00 48 	ld.w	r8,r6[72]
8001720e:	91 39       	st.w	r8[0xc],r9
	
			// do pressure calcs
			B6 = B5 - 4000;
80017210:	ee f8 ff d4 	ld.w	r8,r7[-44]
80017214:	f0 c8 0f a0 	sub	r8,r8,4000
80017218:	ef 48 ff d8 	st.w	r7[-40],r8
			X1 = ((int32_t)b2 * ( (B6 * B6)>>12 )) >> 11;
8001721c:	ec f8 03 68 	ld.w	r8,r6[872]
80017220:	90 08       	ld.sh	r8,r8[0x0]
80017222:	10 99       	mov	r9,r8
80017224:	ee fa ff d8 	ld.w	r10,r7[-40]
80017228:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001722c:	f4 08 02 48 	mul	r8,r10,r8
80017230:	ad 48       	asr	r8,0xc
80017232:	f2 08 02 48 	mul	r8,r9,r8
80017236:	ab 58       	asr	r8,0xb
80017238:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = ((int32_t)ac2 * B6) >> 11;
8001723c:	ec f8 03 30 	ld.w	r8,r6[816]
80017240:	90 08       	ld.sh	r8,r8[0x0]
80017242:	10 99       	mov	r9,r8
80017244:	ee f8 ff d8 	ld.w	r8,r7[-40]
80017248:	f2 08 02 48 	mul	r8,r9,r8
8001724c:	ab 58       	asr	r8,0xb
8001724e:	ef 48 ff e0 	st.w	r7[-32],r8
			X3 = X1 + X2;
80017252:	ee f9 ff dc 	ld.w	r9,r7[-36]
80017256:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001725a:	f2 08 00 08 	add	r8,r9,r8
8001725e:	ef 48 ff e4 	st.w	r7[-28],r8
			B3 = ((((int32_t)ac1*4 + X3) << BMP085_OVERSAMPLING_MODE) + 2) / 4;
80017262:	ec f8 03 54 	ld.w	r8,r6[852]
80017266:	90 08       	ld.sh	r8,r8[0x0]
80017268:	f0 09 15 02 	lsl	r9,r8,0x2
8001726c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80017270:	f2 08 00 08 	add	r8,r9,r8
80017274:	a3 68       	lsl	r8,0x2
80017276:	2f e8       	sub	r8,-2
80017278:	f0 c9 ff fd 	sub	r9,r8,-3
8001727c:	58 08       	cp.w	r8,0
8001727e:	f2 08 17 50 	movlt	r8,r9
80017282:	a3 48       	asr	r8,0x2
80017284:	ef 48 ff d0 	st.w	r7[-48],r8


			X1 = ((int32_t)ac3 * B6) >> 13;
80017288:	ec f8 02 b4 	ld.w	r8,r6[692]
8001728c:	90 08       	ld.sh	r8,r8[0x0]
8001728e:	10 99       	mov	r9,r8
80017290:	ee f8 ff d8 	ld.w	r8,r7[-40]
80017294:	f2 08 02 48 	mul	r8,r9,r8
80017298:	ad 58       	asr	r8,0xd
8001729a:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = ((int32_t)b1 * ((B6 * B6) >> 12)) >> 16;
8001729e:	ec f8 03 48 	ld.w	r8,r6[840]
800172a2:	90 08       	ld.sh	r8,r8[0x0]
800172a4:	10 99       	mov	r9,r8
800172a6:	ee fa ff d8 	ld.w	r10,r7[-40]
800172aa:	ee f8 ff d8 	ld.w	r8,r7[-40]
800172ae:	f4 08 02 48 	mul	r8,r10,r8
800172b2:	ad 48       	asr	r8,0xc
800172b4:	f2 08 02 48 	mul	r8,r9,r8
800172b8:	b1 48       	asr	r8,0x10
800172ba:	ef 48 ff e0 	st.w	r7[-32],r8
			X3 = ((X1 + X2) + 2) >> 2;
800172be:	ee f9 ff dc 	ld.w	r9,r7[-36]
800172c2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800172c6:	f2 08 00 08 	add	r8,r9,r8
800172ca:	2f e8       	sub	r8,-2
800172cc:	a3 48       	asr	r8,0x2
800172ce:	ef 48 ff e4 	st.w	r7[-28],r8
			B4 = ((uint32_t)ac4 * (uint32_t)(X3 + 32768)) >> 15;
800172d2:	ec f8 03 14 	ld.w	r8,r6[788]
800172d6:	90 08       	ld.sh	r8,r8[0x0]
800172d8:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800172dc:	ee f8 ff e4 	ld.w	r8,r7[-28]
800172e0:	f0 c8 80 00 	sub	r8,r8,-32768
800172e4:	f2 08 02 48 	mul	r8,r9,r8
800172e8:	af 98       	lsr	r8,0xf
800172ea:	ef 48 ff ec 	st.w	r7[-20],r8
			B7 = ((uint32_t)UP - B3) * (uint32_t)( 50000UL >> BMP085_OVERSAMPLING_MODE );
800172ee:	ee f9 ff cc 	ld.w	r9,r7[-52]
800172f2:	ee f8 ff d0 	ld.w	r8,r7[-48]
800172f6:	10 19       	sub	r9,r8
800172f8:	e0 68 30 d4 	mov	r8,12500
800172fc:	f2 08 02 48 	mul	r8,r9,r8
80017300:	ef 48 ff f0 	st.w	r7[-16],r8


			if (B7 < 0x80000000) {
80017304:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017308:	58 08       	cp.w	r8,0
8001730a:	c0 b5       	brlt	80017320 <get_pressure_data_slow+0x304>
				p = (B7 * 2) / B4;
8001730c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017310:	a1 78       	lsl	r8,0x1
80017312:	ee f9 ff ec 	ld.w	r9,r7[-20]
80017316:	f0 09 0d 08 	divu	r8,r8,r9
8001731a:	ef 48 ff e8 	st.w	r7[-24],r8
8001731e:	c0 a8       	rjmp	80017332 <get_pressure_data_slow+0x316>
			} else {
				p = (B7 / B4) * 2;
80017320:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017324:	ee f9 ff ec 	ld.w	r9,r7[-20]
80017328:	f0 09 0d 08 	divu	r8,r8,r9
8001732c:	a1 78       	lsl	r8,0x1
8001732e:	ef 48 ff e8 	st.w	r7[-24],r8
			}
			X1 = (p >> 8) * (p >> 8);
80017332:	ee f8 ff e8 	ld.w	r8,r7[-24]
80017336:	f0 09 14 08 	asr	r9,r8,0x8
8001733a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001733e:	a9 48       	asr	r8,0x8
80017340:	f2 08 02 48 	mul	r8,r9,r8
80017344:	ef 48 ff dc 	st.w	r7[-36],r8
			X1 = (X1 * 3038) >> 16;
80017348:	ee f9 ff dc 	ld.w	r9,r7[-36]
8001734c:	e0 68 0b de 	mov	r8,3038
80017350:	f2 08 02 48 	mul	r8,r9,r8
80017354:	b1 48       	asr	r8,0x10
80017356:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = (-7357 * p) >> 16;
8001735a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001735e:	fe 78 e3 43 	mov	r8,-7357
80017362:	f2 08 02 48 	mul	r8,r9,r8
80017366:	b1 48       	asr	r8,0x10
80017368:	ef 48 ff e0 	st.w	r7[-32],r8

			p = p + ((X1 + X2 + (int32_t)3791)>>4);
8001736c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80017370:	ee f8 ff e0 	ld.w	r8,r7[-32]
80017374:	f2 08 00 08 	add	r8,r9,r8
80017378:	f0 c8 f1 31 	sub	r8,r8,-3791
8001737c:	a5 48       	asr	r8,0x4
8001737e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80017382:	f2 08 00 08 	add	r8,r9,r8
80017386:	ef 48 ff e8 	st.w	r7[-24],r8

			pressure_outputs.pressure=p;
8001738a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001738e:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
80017392:	ec f8 00 48 	ld.w	r8,r6[72]
80017396:	91 29       	st.w	r8[0x8],r9
		
			vertical_speed=pressure_outputs.altitude;
80017398:	ec f8 00 48 	ld.w	r8,r6[72]
8001739c:	70 78       	ld.w	r8,r8[0x1c]
8001739e:	ef 48 ff c4 	st.w	r7[-60],r8
			altitude=44330.0 * (1.0 - pow(pressure_outputs.pressure /sealevelPressure,0.190295)) + pressure_outputs.altitude_offset;
800173a2:	ec f8 00 48 	ld.w	r8,r6[72]
800173a6:	70 28       	ld.w	r8,r8[0x8]
800173a8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800173ac:	e5 a6 09 09 	cop	cp0,cr9,cr0,cr9,0x4c
800173b0:	12 9b       	mov	r11,r9
800173b2:	10 9c       	mov	r12,r8
800173b4:	f0 16 00 08 	mcall	r6[32]
800173b8:	18 98       	mov	r8,r12
800173ba:	10 9c       	mov	r12,r8
800173bc:	f0 16 00 02 	mcall	r6[8]
800173c0:	e0 68 d1 24 	mov	r8,53540
800173c4:	ea 18 28 cb 	orh	r8,0x28cb
800173c8:	e0 69 5b 96 	mov	r9,23446
800173cc:	ea 19 3f c8 	orh	r9,0x3fc8
800173d0:	f0 16 01 bb 	mcall	r6[1772]
800173d4:	14 98       	mov	r8,r10
800173d6:	16 99       	mov	r9,r11
800173d8:	30 0a       	mov	r10,0
800173da:	fc 1b 3f f0 	movh	r11,0x3ff0
800173de:	f0 16 00 11 	mcall	r6[68]
800173e2:	14 98       	mov	r8,r10
800173e4:	16 99       	mov	r9,r11
800173e6:	10 9a       	mov	r10,r8
800173e8:	12 9b       	mov	r11,r9
800173ea:	30 08       	mov	r8,0
800173ec:	e0 69 a5 40 	mov	r9,42304
800173f0:	ea 19 40 e5 	orh	r9,0x40e5
800173f4:	f0 16 00 03 	mcall	r6[12]
800173f8:	14 98       	mov	r8,r10
800173fa:	16 99       	mov	r9,r11
800173fc:	10 92       	mov	r2,r8
800173fe:	12 93       	mov	r3,r9
80017400:	ec f8 00 48 	ld.w	r8,r6[72]
80017404:	70 88       	ld.w	r8,r8[0x20]
80017406:	10 9c       	mov	r12,r8
80017408:	f0 16 00 02 	mcall	r6[8]
8001740c:	14 98       	mov	r8,r10
8001740e:	16 99       	mov	r9,r11
80017410:	04 9a       	mov	r10,r2
80017412:	06 9b       	mov	r11,r3
80017414:	f0 16 00 05 	mcall	r6[20]
80017418:	14 98       	mov	r8,r10
8001741a:	16 99       	mov	r9,r11
8001741c:	10 9a       	mov	r10,r8
8001741e:	12 9b       	mov	r11,r9
80017420:	f0 16 00 09 	mcall	r6[36]
80017424:	18 98       	mov	r8,r12
80017426:	ef 48 ff c0 	st.w	r7[-64],r8
			
			for (i=0; i<2; i++) {
8001742a:	30 08       	mov	r8,0
8001742c:	ef 48 ff bc 	st.w	r7[-68],r8
80017430:	c1 68       	rjmp	8001745c <get_pressure_data_slow+0x440>
				pressure_outputs.last_altitudes[i]=pressure_outputs.last_altitudes[i+1];
80017432:	ee f9 ff bc 	ld.w	r9,r7[-68]
80017436:	ee f8 ff bc 	ld.w	r8,r7[-68]
8001743a:	f0 ca ff ff 	sub	r10,r8,-1
8001743e:	ec f8 00 48 	ld.w	r8,r6[72]
80017442:	2f ca       	sub	r10,-4
80017444:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80017448:	ec f8 00 48 	ld.w	r8,r6[72]
8001744c:	2f c9       	sub	r9,-4
8001744e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pressure_outputs.pressure=p;
		
			vertical_speed=pressure_outputs.altitude;
			altitude=44330.0 * (1.0 - pow(pressure_outputs.pressure /sealevelPressure,0.190295)) + pressure_outputs.altitude_offset;
			
			for (i=0; i<2; i++) {
80017452:	ee f8 ff bc 	ld.w	r8,r7[-68]
80017456:	2f f8       	sub	r8,-1
80017458:	ef 48 ff bc 	st.w	r7[-68],r8
8001745c:	ee f8 ff bc 	ld.w	r8,r7[-68]
80017460:	58 18       	cp.w	r8,1
80017462:	fe 9a ff e8 	brle	80017432 <get_pressure_data_slow+0x416>
				pressure_outputs.last_altitudes[i]=pressure_outputs.last_altitudes[i+1];
			}
			pressure_outputs.last_altitudes[2]=altitude;
80017466:	ec f8 00 48 	ld.w	r8,r6[72]
8001746a:	ee f9 ff c0 	ld.w	r9,r7[-64]
8001746e:	91 69       	st.w	r8[0x18],r9
			altitude=median_filter_3x(pressure_outputs.last_altitudes[0], pressure_outputs.last_altitudes[1], pressure_outputs.last_altitudes[2]);
80017470:	ec f8 00 48 	ld.w	r8,r6[72]
80017474:	70 6a       	ld.w	r10,r8[0x18]
80017476:	ec f8 00 48 	ld.w	r8,r6[72]
8001747a:	70 59       	ld.w	r9,r8[0x14]
8001747c:	ec f8 00 48 	ld.w	r8,r6[72]
80017480:	70 48       	ld.w	r8,r8[0x10]
80017482:	12 9b       	mov	r11,r9
80017484:	10 9c       	mov	r12,r8
80017486:	fe b0 fb d8 	rcall	80016c36 <median_filter_3x>
8001748a:	18 98       	mov	r8,r12
8001748c:	ef 48 ff c0 	st.w	r7[-64],r8
			
			if (f_abs(altitude-pressure_outputs.altitude)<15.0) {
80017490:	ec f8 00 48 	ld.w	r8,r6[72]
80017494:	70 78       	ld.w	r8,r8[0x1c]
80017496:	ee f9 ff c0 	ld.w	r9,r7[-64]
8001749a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8001749e:	10 9c       	mov	r12,r8
800174a0:	fe b0 fb ae 	rcall	80016bfc <f_abs>
800174a4:	18 9a       	mov	r10,r12
800174a6:	30 18       	mov	r8,1
800174a8:	fc 19 41 70 	movh	r9,0x4170
800174ac:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800174b0:	e0 8c 00 03 	brvs	800174b6 <get_pressure_data_slow+0x49a>
800174b4:	c0 25       	brlt	800174b8 <get_pressure_data_slow+0x49c>
800174b6:	30 08       	mov	r8,0
800174b8:	5c 58       	castu.b	r8
800174ba:	c3 40       	breq	80017522 <get_pressure_data_slow+0x506>
				pressure_outputs.altitude = (BARO_ALT_LPF*pressure_outputs.altitude) + (1.0-BARO_ALT_LPF)*altitude;
800174bc:	ec f8 00 48 	ld.w	r8,r6[72]
800174c0:	70 78       	ld.w	r8,r8[0x1c]
800174c2:	10 9c       	mov	r12,r8
800174c4:	f0 16 00 02 	mcall	r6[8]
800174c8:	e0 68 66 66 	mov	r8,26214
800174cc:	ea 18 66 66 	orh	r8,0x6666
800174d0:	e0 69 66 66 	mov	r9,26214
800174d4:	ea 19 3f ee 	orh	r9,0x3fee
800174d8:	f0 16 00 03 	mcall	r6[12]
800174dc:	14 98       	mov	r8,r10
800174de:	16 99       	mov	r9,r11
800174e0:	10 92       	mov	r2,r8
800174e2:	12 93       	mov	r3,r9
800174e4:	ee fc ff c0 	ld.w	r12,r7[-64]
800174e8:	f0 16 00 02 	mcall	r6[8]
800174ec:	e0 68 99 a0 	mov	r8,39328
800174f0:	ea 18 99 99 	orh	r8,0x9999
800174f4:	e0 69 99 99 	mov	r9,39321
800174f8:	ea 19 3f a9 	orh	r9,0x3fa9
800174fc:	f0 16 00 03 	mcall	r6[12]
80017500:	14 98       	mov	r8,r10
80017502:	16 99       	mov	r9,r11
80017504:	04 9a       	mov	r10,r2
80017506:	06 9b       	mov	r11,r3
80017508:	f0 16 00 05 	mcall	r6[20]
8001750c:	14 98       	mov	r8,r10
8001750e:	16 99       	mov	r9,r11
80017510:	10 9a       	mov	r10,r8
80017512:	12 9b       	mov	r11,r9
80017514:	f0 16 00 09 	mcall	r6[36]
80017518:	18 99       	mov	r9,r12
8001751a:	ec f8 00 48 	ld.w	r8,r6[72]
8001751e:	91 79       	st.w	r8[0x1c],r9
80017520:	c0 68       	rjmp	8001752c <get_pressure_data_slow+0x510>
			}else {
				pressure_outputs.altitude = altitude;
80017522:	ec f8 00 48 	ld.w	r8,r6[72]
80017526:	ee f9 ff c0 	ld.w	r9,r7[-64]
8001752a:	91 79       	st.w	r8[0x1c],r9
			}
			
			dt = (get_micros()-pressure_outputs.last_update)/1000000.0;
8001752c:	f0 16 00 29 	mcall	r6[164]
80017530:	18 99       	mov	r9,r12
80017532:	ec f8 00 48 	ld.w	r8,r6[72]
80017536:	70 a8       	ld.w	r8,r8[0x28]
80017538:	f2 08 01 08 	sub	r8,r9,r8
8001753c:	10 9c       	mov	r12,r8
8001753e:	f0 16 00 52 	mcall	r6[328]
80017542:	30 08       	mov	r8,0
80017544:	e0 69 84 80 	mov	r9,33920
80017548:	ea 19 41 2e 	orh	r9,0x412e
8001754c:	f0 16 00 0c 	mcall	r6[48]
80017550:	14 98       	mov	r8,r10
80017552:	16 99       	mov	r9,r11
80017554:	10 9a       	mov	r10,r8
80017556:	12 9b       	mov	r11,r9
80017558:	f0 16 00 09 	mcall	r6[36]
8001755c:	18 98       	mov	r8,r12
8001755e:	ef 48 ff f8 	st.w	r7[-8],r8
			pressure_outputs.dt=dt;
80017562:	ec f8 00 48 	ld.w	r8,r6[72]
80017566:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001756a:	91 d9       	st.w	r8[0x34],r9
			vertical_speed=-(pressure_outputs.altitude-vertical_speed)/dt;
8001756c:	ec f8 00 48 	ld.w	r8,r6[72]
80017570:	70 79       	ld.w	r9,r8[0x1c]
80017572:	ee f8 ff c4 	ld.w	r8,r7[-60]
80017576:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8001757a:	ee 18 80 00 	eorh	r8,0x8000
8001757e:	ee fb ff f8 	ld.w	r11,r7[-8]
80017582:	10 9c       	mov	r12,r8
80017584:	f0 16 00 08 	mcall	r6[32]
80017588:	18 98       	mov	r8,r12
8001758a:	ef 48 ff c4 	st.w	r7[-60],r8
			
			if (abs(vertical_speed)>20) vertical_speed=0.0;
8001758e:	ee f8 ff c4 	ld.w	r8,r7[-60]
80017592:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80017596:	ef 48 ff fc 	st.w	r7[-4],r8
8001759a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001759e:	5c 48       	abs	r8
800175a0:	ef 48 ff fc 	st.w	r7[-4],r8
800175a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800175a8:	59 48       	cp.w	r8,20
800175aa:	e0 8a 00 05 	brle	800175b4 <get_pressure_data_slow+0x598>
800175ae:	30 08       	mov	r8,0
800175b0:	ef 48 ff c4 	st.w	r7[-60],r8
			pressure_outputs.vario_vz=(VARIO_LPF)*pressure_outputs.vario_vz + (1.0-VARIO_LPF) * (vertical_speed);
800175b4:	ec f8 00 48 	ld.w	r8,r6[72]
800175b8:	70 98       	ld.w	r8,r8[0x24]
800175ba:	10 9c       	mov	r12,r8
800175bc:	f0 16 00 02 	mcall	r6[8]
800175c0:	e0 68 66 66 	mov	r8,26214
800175c4:	ea 18 66 66 	orh	r8,0x6666
800175c8:	e0 69 66 66 	mov	r9,26214
800175cc:	ea 19 3f ee 	orh	r9,0x3fee
800175d0:	f0 16 00 03 	mcall	r6[12]
800175d4:	14 98       	mov	r8,r10
800175d6:	16 99       	mov	r9,r11
800175d8:	10 92       	mov	r2,r8
800175da:	12 93       	mov	r3,r9
800175dc:	ee fc ff c4 	ld.w	r12,r7[-60]
800175e0:	f0 16 00 02 	mcall	r6[8]
800175e4:	e0 68 99 a0 	mov	r8,39328
800175e8:	ea 18 99 99 	orh	r8,0x9999
800175ec:	e0 69 99 99 	mov	r9,39321
800175f0:	ea 19 3f a9 	orh	r9,0x3fa9
800175f4:	f0 16 00 03 	mcall	r6[12]
800175f8:	14 98       	mov	r8,r10
800175fa:	16 99       	mov	r9,r11
800175fc:	04 9a       	mov	r10,r2
800175fe:	06 9b       	mov	r11,r3
80017600:	f0 16 00 05 	mcall	r6[20]
80017604:	14 98       	mov	r8,r10
80017606:	16 99       	mov	r9,r11
80017608:	10 9a       	mov	r10,r8
8001760a:	12 9b       	mov	r11,r9
8001760c:	f0 16 00 09 	mcall	r6[36]
80017610:	18 99       	mov	r9,r12
80017612:	ec f8 00 48 	ld.w	r8,r6[72]
80017616:	91 99       	st.w	r8[0x24],r9
			
			pressure_outputs.last_update=get_micros();
80017618:	f0 16 00 29 	mcall	r6[164]
8001761c:	18 99       	mov	r9,r12
8001761e:	ec f8 00 48 	ld.w	r8,r6[72]
80017622:	91 a9       	st.w	r8[0x28],r9
			pressure_outputs.state=IDLE;
80017624:	ec f8 00 48 	ld.w	r8,r6[72]
80017628:	30 09       	mov	r9,0
8001762a:	91 c9       	st.w	r8[0x30],r9
			break;
			
		}
		pressure_outputs.last_state_update=get_micros();
8001762c:	f0 16 00 29 	mcall	r6[164]
80017630:	18 99       	mov	r9,r12
80017632:	ec f8 00 48 	ld.w	r8,r6[72]
80017636:	91 b9       	st.w	r8[0x2c],r9
		pressure_outputs.altitude_offset = offset;
80017638:	ec f8 00 48 	ld.w	r8,r6[72]
8001763c:	ee f9 ff b0 	ld.w	r9,r7[-80]
80017640:	91 89       	st.w	r8[0x20],r9
		
		return &pressure_outputs;
80017642:	ec f8 00 48 	ld.w	r8,r6[72]
}
80017646:	10 9c       	mov	r12,r8
80017648:	2e cd       	sub	sp,-80
8001764a:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
8001764e:	00 00       	add	r0,r0
80017650:	80 01       	ld.sh	r1,r0[0x0]
80017652:	6e ac       	ld.w	r12,r7[0x28]

80017654 <newValidBarometer>:

bool newValidBarometer(uint32_t *timePrevBarometer)
{
80017654:	eb cd 40 c0 	pushm	r6-r7,lr
80017658:	1a 97       	mov	r7,sp
8001765a:	20 1d       	sub	sp,4
8001765c:	48 d6       	lddpc	r6,80017690 <newValidBarometer+0x3c>
8001765e:	1e 26       	rsub	r6,pc
80017660:	ef 4c ff fc 	st.w	r7[-4],r12
	if (*timePrevBarometer < pressure_outputs.last_update) 
80017664:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017668:	70 09       	ld.w	r9,r8[0x0]
8001766a:	ec f8 00 48 	ld.w	r8,r6[72]
8001766e:	70 a8       	ld.w	r8,r8[0x28]
80017670:	10 39       	cp.w	r9,r8
80017672:	c0 92       	brcc	80017684 <newValidBarometer+0x30>
	{
		*timePrevBarometer = pressure_outputs.last_update;
80017674:	ec f8 00 48 	ld.w	r8,r6[72]
80017678:	70 a9       	ld.w	r9,r8[0x28]
8001767a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001767e:	91 09       	st.w	r8[0x0],r9
		return true;
80017680:	30 18       	mov	r8,1
80017682:	c0 28       	rjmp	80017686 <newValidBarometer+0x32>
	}else{
		return false;
80017684:	30 08       	mov	r8,0
	}
	
80017686:	10 9c       	mov	r12,r8
80017688:	2f fd       	sub	sp,-4
8001768a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001768e:	00 00       	add	r0,r0
80017690:	80 01       	ld.sh	r1,r0[0x0]
80017692:	74 e2       	ld.w	r2,r10[0x38]

80017694 <init_hmc5883_slow>:
static volatile compass_data compass_outputs;




void init_hmc5883_slow() {
80017694:	eb cd 40 c0 	pushm	r6-r7,lr
80017698:	1a 97       	mov	r7,sp
8001769a:	48 a6       	lddpc	r6,800176c0 <init_hmc5883_slow+0x2c>
8001769c:	1e 26       	rsub	r6,pc
	ConfRegA,
	(HMC_SAMPLE_AVG)<<5 | (HMC_RATE) <<2 | HMC_MODE,
	(HMC_RANGE) <<5,
	(HMC_MODE)
	};
	twim_master_init(&AVR32_TWIM0, &twi_opt);
8001769e:	ec fb 08 fc 	ld.w	r11,r6[2300]
800176a2:	fe 7c 38 00 	mov	r12,-51200
800176a6:	f0 16 00 75 	mcall	r6[468]
	twim_write(&AVR32_TWIM0, (uint8_t*)&compass_default_configuration, 4, HMC5883_SLAVE_ADDRESS, false);
800176aa:	30 08       	mov	r8,0
800176ac:	31 e9       	mov	r9,30
800176ae:	30 4a       	mov	r10,4
800176b0:	ec fb 08 f8 	ld.w	r11,r6[2296]
800176b4:	fe 7c 38 00 	mov	r12,-51200
800176b8:	f0 16 00 36 	mcall	r6[216]
}
800176bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800176c0:	80 01       	ld.sh	r1,r0[0x0]
800176c2:	75 20       	ld.w	r0,r10[0x48]

800176c4 <get_compass_data_slow>:


compass_data* get_compass_data_slow() {
800176c4:	eb cd 40 c0 	pushm	r6-r7,lr
800176c8:	1a 97       	mov	r7,sp
800176ca:	20 2d       	sub	sp,8
800176cc:	4a 76       	lddpc	r6,80017768 <get_compass_data_slow+0xa4>
800176ce:	1e 26       	rsub	r6,pc
	int i;
	uint8_t start_address=DataRegBegin;
800176d0:	30 38       	mov	r8,3
800176d2:	ef 68 ff fb 	st.b	r7[-5],r8
	twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, HMC5883_SLAVE_ADDRESS, false);
800176d6:	ee cb 00 05 	sub	r11,r7,5
800176da:	30 08       	mov	r8,0
800176dc:	31 e9       	mov	r9,30
800176de:	30 1a       	mov	r10,1
800176e0:	fe 7c 38 00 	mov	r12,-51200
800176e4:	f0 16 00 36 	mcall	r6[216]
	twim_read(&AVR32_TWIM0, (uint8_t*)&(compass_outputs.raw_data), 6, HMC5883_SLAVE_ADDRESS, false);
800176e8:	ec fb 02 24 	ld.w	r11,r6[548]
800176ec:	30 08       	mov	r8,0
800176ee:	31 e9       	mov	r9,30
800176f0:	30 6a       	mov	r10,6
800176f2:	fe 7c 38 00 	mov	r12,-51200
800176f6:	f0 16 00 62 	mcall	r6[392]
	
	for (i=0; i<3; i++) {
800176fa:	30 08       	mov	r8,0
800176fc:	ef 48 ff fc 	st.w	r7[-4],r8
80017700:	c2 98       	rjmp	80017752 <get_compass_data_slow+0x8e>
		compass_outputs.axes[i]=(int16_t)(compass_outputs.raw_data[2*i]<<8)+(int16_t)(compass_outputs.raw_data[2*i+1]);
80017702:	ee fb ff fc 	ld.w	r11,r7[-4]
80017706:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001770a:	a1 78       	lsl	r8,0x1
8001770c:	ec f9 02 24 	ld.w	r9,r6[548]
80017710:	f2 08 07 08 	ld.ub	r8,r9[r8]
80017714:	5c 58       	castu.b	r8
80017716:	a9 68       	lsl	r8,0x8
80017718:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001771c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017720:	a1 78       	lsl	r8,0x1
80017722:	2f f8       	sub	r8,-1
80017724:	ec fa 02 24 	ld.w	r10,r6[548]
80017728:	f4 08 07 08 	ld.ub	r8,r10[r8]
8001772c:	5c 58       	castu.b	r8
8001772e:	f2 08 00 08 	add	r8,r9,r8
80017732:	5c 88       	casts.h	r8
80017734:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80017738:	ec fa 02 24 	ld.w	r10,r6[548]
8001773c:	f6 c8 ff fe 	sub	r8,r11,-2
80017740:	a1 78       	lsl	r8,0x1
80017742:	f4 08 00 08 	add	r8,r10,r8
80017746:	b0 19       	st.h	r8[0x2],r9
	int i;
	uint8_t start_address=DataRegBegin;
	twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, HMC5883_SLAVE_ADDRESS, false);
	twim_read(&AVR32_TWIM0, (uint8_t*)&(compass_outputs.raw_data), 6, HMC5883_SLAVE_ADDRESS, false);
	
	for (i=0; i<3; i++) {
80017748:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001774c:	2f f8       	sub	r8,-1
8001774e:	ef 48 ff fc 	st.w	r7[-4],r8
80017752:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017756:	58 28       	cp.w	r8,2
80017758:	fe 9a ff d5 	brle	80017702 <get_compass_data_slow+0x3e>
		compass_outputs.axes[i]=(int16_t)(compass_outputs.raw_data[2*i]<<8)+(int16_t)(compass_outputs.raw_data[2*i+1]);
	}
	return &compass_outputs;
8001775c:	ec f8 02 24 	ld.w	r8,r6[548]
80017760:	10 9c       	mov	r12,r8
80017762:	2f ed       	sub	sp,-8
80017764:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017768:	80 01       	ld.sh	r1,r0[0x0]
8001776a:	75 52       	ld.w	r2,r10[0x54]

8001776c <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8001776c:	eb cd 40 c0 	pushm	r6-r7,lr
80017770:	1a 97       	mov	r7,sp
80017772:	20 6d       	sub	sp,24
80017774:	49 e6       	lddpc	r6,800177ec <interpolate+0x80>
80017776:	1e 26       	rsub	r6,pc
80017778:	ef 4c ff f8 	st.w	r7[-8],r12
8001777c:	ef 4b ff f4 	st.w	r7[-12],r11
80017780:	ef 4a ff f0 	st.w	r7[-16],r10
80017784:	ef 49 ff ec 	st.w	r7[-20],r9
80017788:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001778c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017790:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017794:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80017798:	c0 41       	brne	800177a0 <interpolate+0x34>
	{
		return y1;
8001779a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001779e:	c2 38       	rjmp	800177e4 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
800177a0:	ee f9 ff e8 	ld.w	r9,r7[-24]
800177a4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800177a8:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800177ac:	ee fa ff f8 	ld.w	r10,r7[-8]
800177b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800177b4:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800177b8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800177bc:	ee fa ff f0 	ld.w	r10,r7[-16]
800177c0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800177c4:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800177c8:	12 9b       	mov	r11,r9
800177ca:	10 9c       	mov	r12,r8
800177cc:	f0 16 00 08 	mcall	r6[32]
800177d0:	18 98       	mov	r8,r12
800177d2:	10 99       	mov	r9,r8
800177d4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800177d8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800177dc:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
800177e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
800177e4:	10 9c       	mov	r12,r8
800177e6:	2f ad       	sub	sp,-24
800177e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800177ec:	80 01       	ld.sh	r1,r0[0x0]
800177ee:	75 fa       	ld.w	r10,r10[0x7c]

800177f0 <pdca_int_handler_dac>:
 U8 dac_channel_audio = DAC_AUDIO_CHANNEL;


__attribute__((__interrupt__))
static void pdca_int_handler_dac(void)
{
800177f0:	eb cd 40 c0 	pushm	r6-r7,lr
800177f4:	1a 97       	mov	r7,sp
800177f6:	49 a6       	lddpc	r6,8001785c <pdca_int_handler_dac+0x6c>
800177f8:	1e 26       	rsub	r6,pc
	AVR32_PDCA.channel[PDCA_CHANNEL_DAC].isr;
800177fa:	fc 78 00 00 	mov	r8,-196608
800177fe:	f0 f8 01 2c 	ld.w	r8,r8[300]
	if (autoplay==0) {
80017802:	ec f8 04 ec 	ld.w	r8,r6[1260]
80017806:	70 08       	ld.w	r8,r8[0x0]
80017808:	58 08       	cp.w	r8,0
8001780a:	c0 81       	brne	8001781a <pdca_int_handler_dac+0x2a>
		pdca_disable(PDCA_CHANNEL_DAC);
8001780c:	30 4c       	mov	r12,4
8001780e:	f0 16 00 83 	mcall	r6[524]
	    pdca_disable_interrupt_transfer_complete(PDCA_CHANNEL_DAC);
80017812:	30 4c       	mov	r12,4
80017814:	f0 16 00 9f 	mcall	r6[636]
80017818:	c1 f8       	rjmp	80017856 <pdca_int_handler_dac+0x66>

	}	else {	
       // Set PDCA channel reload values with address where data to load are stored, and size of the data block to load.
       pdca_reload_channel(PDCA_CHANNEL_DAC, (char *)buffer+2*from, to-from);
8001781a:	ec f8 02 9c 	ld.w	r8,r6[668]
8001781e:	90 08       	ld.sh	r8,r8[0x0]
80017820:	5c 88       	casts.h	r8
80017822:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80017826:	ec f8 01 98 	ld.w	r8,r6[408]
8001782a:	90 08       	ld.sh	r8,r8[0x0]
8001782c:	5c 88       	casts.h	r8
8001782e:	5c 78       	castu.h	r8
80017830:	f2 08 01 08 	sub	r8,r9,r8
80017834:	10 99       	mov	r9,r8
80017836:	ec f8 03 7c 	ld.w	r8,r6[892]
8001783a:	70 0a       	ld.w	r10,r8[0x0]
8001783c:	ec f8 01 98 	ld.w	r8,r6[408]
80017840:	90 08       	ld.sh	r8,r8[0x0]
80017842:	5c 88       	casts.h	r8
80017844:	5c 78       	castu.h	r8
80017846:	a1 78       	lsl	r8,0x1
80017848:	f4 08 00 08 	add	r8,r10,r8
8001784c:	12 9a       	mov	r10,r9
8001784e:	10 9b       	mov	r11,r8
80017850:	30 4c       	mov	r12,4
80017852:	f0 16 01 09 	mcall	r6[1060]
	}	   
		
}
80017856:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8001785a:	d6 03       	rete
8001785c:	80 01       	ld.sh	r1,r0[0x0]
8001785e:	76 7c       	ld.w	r12,r11[0x1c]

80017860 <init_pevc>:


void init_pevc(void)
{
80017860:	eb cd 40 c0 	pushm	r6-r7,lr
80017864:	1a 97       	mov	r7,sp
80017866:	48 c6       	lddpc	r6,80017894 <init_pevc+0x34>
80017868:	1e 26       	rsub	r6,pc
  
  // PEVC Init.
  // Configuring the PEVC path: input is the generic clock, each clock cycle, the PEVC trigger a new DAC sample
  // The sinus samples are sent through the PDCA.  
  // a change on PEVC input pin0 event will trigger the PDCA channel 0/1 transfer
  pevc_channel_configure(ppevc,     AVR32_PEVC_ID_USER_DACIFB0_CHA, 
8001786a:	ec f8 03 b4 	ld.w	r8,r6[948]
8001786e:	70 08       	ld.w	r8,r8[0x0]
80017870:	ec f9 08 f4 	ld.w	r9,r6[2292]
80017874:	31 0a       	mov	r10,16
80017876:	30 2b       	mov	r11,2
80017878:	10 9c       	mov	r12,r8
8001787a:	f0 16 01 b1 	mcall	r6[1732]
                                    AVR32_PEVC_ID_GEN_GCLK_0, 
                                    &PEVC_EVS_OPTIONS);
									  
  // Enable the PEVC channel 0.
  pevc_channels_enable(ppevc, 1<<AVR32_PEVC_ID_USER_DACIFB0_CHA);
8001787e:	ec f8 03 b4 	ld.w	r8,r6[948]
80017882:	70 08       	ld.w	r8,r8[0x0]
80017884:	30 4a       	mov	r10,4
80017886:	30 0b       	mov	r11,0
80017888:	10 9c       	mov	r12,r8
8001788a:	f0 16 01 49 	mcall	r6[1316]
}
8001788e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017892:	00 00       	add	r0,r0
80017894:	80 01       	ld.sh	r1,r0[0x0]
80017896:	76 ec       	ld.w	r12,r11[0x38]

80017898 <init_gclk>:

void init_gclk(void)
{
80017898:	eb cd 40 c0 	pushm	r6-r7,lr
8001789c:	1a 97       	mov	r7,sp
8001789e:	48 76       	lddpc	r6,800178b8 <init_gclk+0x20>
800178a0:	1e 26       	rsub	r6,pc
  // Setup Sampling Rate
 
  // Setup the generic clock for EVENT
  scif_gc_setup(AVR32_SCIF_GCLK_GCLK2_EVENT, 
800178a2:	30 a9       	mov	r9,10
800178a4:	30 1a       	mov	r10,1
800178a6:	30 0b       	mov	r11,0
800178a8:	30 7c       	mov	r12,7
800178aa:	f0 16 02 0d 	mcall	r6[2100]
                SCIF_GCCTRL_SLOWCLOCK, 
                AVR32_SCIF_GC_DIV_CLOCK, 
                DAC_SAMPLE_CLOCK_DIVIDER);  
  // Now enable the generic clock
  scif_gc_enable(AVR32_SCIF_GCLK_GCLK2_EVENT);
800178ae:	30 7c       	mov	r12,7
800178b0:	f0 16 02 01 	mcall	r6[2052]
}
800178b4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800178b8:	80 01       	ld.sh	r1,r0[0x0]
800178ba:	77 24       	ld.w	r4,r11[0x48]
800178bc:	65 72       	ld.w	r2,r2[0x5c]
800178be:	72 6f       	ld.w	pc,r9[0x18]
800178c0:	72 20       	ld.w	r0,r9[0x8]
800178c2:	63 6f       	ld.w	pc,r1[0x58]
800178c4:	6e 66       	ld.w	r6,r7[0x18]
800178c6:	69 67       	ld.w	r7,r4[0x58]
800178c8:	75 72       	ld.w	r2,r10[0x5c]
800178ca:	69 6e       	ld.w	lr,r4[0x58]
800178cc:	67 20       	ld.w	r0,r3[0x48]
800178ce:	44 41       	lddsp	r1,sp[0x110]
800178d0:	43 00       	lddsp	r0,sp[0xc0]
800178d2:	00 00       	add	r0,r0
800178d4:	65 72       	ld.w	r2,r2[0x5c]
800178d6:	72 6f       	ld.w	pc,r9[0x18]
800178d8:	72 20       	ld.w	r0,r9[0x8]
800178da:	63 6f       	ld.w	pc,r1[0x58]
800178dc:	6e 66       	ld.w	r6,r7[0x18]
800178de:	69 67       	ld.w	r7,r4[0x58]
800178e0:	75 72       	ld.w	r2,r10[0x5c]
800178e2:	69 6e       	ld.w	lr,r4[0x58]
800178e4:	67 20       	ld.w	r0,r3[0x48]
800178e6:	44 41       	lddsp	r1,sp[0x110]
800178e8:	43 20       	lddsp	r0,sp[0xc8]
800178ea:	63 68       	ld.w	r8,r1[0x58]
800178ec:	61 6e       	ld.w	lr,r0[0x58]
800178ee:	6e 65       	ld.w	r5,r7[0x18]
800178f0:	6c 00       	ld.w	r0,r6[0x0]

800178f2 <Init_DAC>:



void Init_DAC(int trigger_mode) {
800178f2:	eb cd 40 c0 	pushm	r6-r7,lr
800178f6:	1a 97       	mov	r7,sp
800178f8:	20 6d       	sub	sp,24
800178fa:	4b 36       	lddpc	r6,800179c4 <Init_DAC+0xd2>
800178fc:	1e 26       	rsub	r6,pc
800178fe:	ef 4c ff e8 	st.w	r7[-24],r12
                            .low_power                  = false,                          // Low Power Mode     
                            .dual                       = false,                          // Dual Mode
                            .prescaler_clock_hz         = DAC_PRESCALER_CLOCK,             // Prescaler Clock (Should be 500Khz)             
							.offset_calibration_value   = 0,
							.gain_calibration_value     = 1                 
};
80017902:	ec f8 08 f0 	ld.w	r8,r6[2288]
80017906:	ee ca 00 0c 	sub	r10,r7,12
8001790a:	10 9b       	mov	r11,r8
8001790c:	f6 e8 00 00 	ld.d	r8,r11[0]
80017910:	f4 e9 00 00 	st.d	r10[0],r8
80017914:	76 28       	ld.w	r8,r11[0x8]
80017916:	95 28       	st.w	r10[0x8],r8
                                                .auto_refresh_mode    = true,                       // Auto Refresh Mode 
                                                .trigger_mode         = trigger_mode,               // Trigger selection
                                                .left_adjustment      = false,                      // Right Adjustment
                                                .data_shift           = 0,                          // Number of Data Shift 
                                                .data_round_enable    = false                       // Data Rouding Mode                                              };
};
80017918:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001791c:	5c 58       	castu.b	r8
8001791e:	30 19       	mov	r9,1
80017920:	ef 69 ff ef 	st.b	r7[-17],r9
80017924:	ef 68 ff f0 	st.b	r7[-16],r8
80017928:	30 08       	mov	r8,0
8001792a:	ef 68 ff f1 	st.b	r7[-15],r8
8001792e:	30 08       	mov	r8,0
80017930:	ef 68 ff f2 	st.b	r7[-14],r8
80017934:	30 08       	mov	r8,0
80017936:	ef 68 ff f3 	st.b	r7[-13],r8

    // Assign and enable GPIO pins to the DAC function.
  gpio_enable_module(DACIFB_GPIO_MAP, sizeof(DACIFB_GPIO_MAP) / sizeof(DACIFB_GPIO_MAP[0]));
8001793a:	30 4b       	mov	r11,4
8001793c:	ec fc 08 ec 	ld.w	r12,r6[2284]
80017940:	f0 16 00 98 	mcall	r6[608]

  // Get DACIFB Factory Configuration
  //dacifb_get_calibration_data(dacifb, &dacifb_opt, DAC_AUDIO_INSTANCE);
                              
  // configure DACIFB
  if (dacifb_configure(dacifb,
80017944:	ec f8 02 80 	ld.w	r8,r6[640]
80017948:	70 08       	ld.w	r8,r8[0x0]
8001794a:	ee c9 00 0c 	sub	r9,r7,12
8001794e:	e0 6a 24 00 	mov	r10,9216
80017952:	ea 1a 00 f4 	orh	r10,0xf4
80017956:	12 9b       	mov	r11,r9
80017958:	10 9c       	mov	r12,r8
8001795a:	f0 16 01 7d 	mcall	r6[1524]
8001795e:	18 98       	mov	r8,r12
80017960:	58 08       	cp.w	r8,0
80017962:	c0 61       	brne	8001796e <Init_DAC+0x7c>
                   &dacifb_opt,
                   FOSC0) ==0) {
				dbg_print("error configuring DAC");
80017964:	fe cc 00 a8 	sub	r12,pc,168
80017968:	f0 16 00 01 	mcall	r6[4]
				while (1);
8001796c:	c0 08       	rjmp	8001796c <Init_DAC+0x7a>
  }
  
  // Enable the DACIFB channels.

  // configure channel DACIFB
  if (dacifb_configure_channel(dacifb,
8001796e:	ec f8 03 c0 	ld.w	r8,r6[960]
80017972:	11 88       	ld.ub	r8,r8[0x0]
80017974:	10 9b       	mov	r11,r8
80017976:	ec f8 02 80 	ld.w	r8,r6[640]
8001797a:	70 08       	ld.w	r8,r8[0x0]
8001797c:	ee ca 00 11 	sub	r10,r7,17
80017980:	e0 69 4b 40 	mov	r9,19264
80017984:	ea 19 00 4c 	orh	r9,0x4c
80017988:	10 9c       	mov	r12,r8
8001798a:	f0 16 01 be 	mcall	r6[1784]
8001798e:	18 98       	mov	r8,r12
80017990:	58 08       	cp.w	r8,0
80017992:	c0 61       	brne	8001799e <Init_DAC+0xac>
                           dac_channel_audio,
                           &dacifb_channel_opt,
                           DAC_PRESCALER_CLOCK) ==0) {
				dbg_print("error configuring DAC channel");
80017994:	fe cc 00 c0 	sub	r12,pc,192
80017998:	f0 16 00 01 	mcall	r6[4]
				while (1);
8001799c:	c0 08       	rjmp	8001799c <Init_DAC+0xaa>
  }
  
  dacifb_start_channel(dacifb,
8001799e:	ec f8 03 c0 	ld.w	r8,r6[960]
800179a2:	11 88       	ld.ub	r8,r8[0x0]
800179a4:	10 99       	mov	r9,r8
800179a6:	ec f8 02 80 	ld.w	r8,r6[640]
800179aa:	70 08       	ld.w	r8,r8[0x0]
800179ac:	e0 6a 24 00 	mov	r10,9216
800179b0:	ea 1a 00 f4 	orh	r10,0xf4
800179b4:	12 9b       	mov	r11,r9
800179b6:	10 9c       	mov	r12,r8
800179b8:	f0 16 01 54 	mcall	r6[1360]
                       dac_channel_audio,
                       FOSC0);


}
800179bc:	2f ad       	sub	sp,-24
800179be:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800179c2:	00 00       	add	r0,r0
800179c4:	80 01       	ld.sh	r1,r0[0x0]
800179c6:	77 80       	ld.w	r0,r11[0x60]

800179c8 <DAC_load_buffer>:

void DAC_load_buffer(uint16_t* samples, int from_sample, int to_sample, int repeat) {
800179c8:	eb cd 40 c0 	pushm	r6-r7,lr
800179cc:	1a 97       	mov	r7,sp
800179ce:	20 4d       	sub	sp,16
800179d0:	4a a6       	lddpc	r6,80017a78 <DAC_load_buffer+0xb0>
800179d2:	1e 26       	rsub	r6,pc
800179d4:	ef 4c ff fc 	st.w	r7[-4],r12
800179d8:	ef 4b ff f8 	st.w	r7[-8],r11
800179dc:	ef 4a ff f4 	st.w	r7[-12],r10
800179e0:	ef 49 ff f0 	st.w	r7[-16],r9
  // PDCA channel options
  buffer=samples;
800179e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800179e8:	ec f8 03 7c 	ld.w	r8,r6[892]
800179ec:	91 09       	st.w	r8[0x0],r9
  from=from_sample;
800179ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800179f2:	5c 88       	casts.h	r8
800179f4:	ec f9 01 98 	ld.w	r9,r6[408]
800179f8:	b2 08       	st.h	r9[0x0],r8
  to=to_sample;
800179fa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800179fe:	5c 88       	casts.h	r8
80017a00:	ec f9 02 9c 	ld.w	r9,r6[668]
80017a04:	b2 08       	st.h	r9[0x0],r8
    .size = 0,                         // transfer counter
    .r_addr = NULL,                                // next memory address
    .r_size = 0,                                   // next transfer counter
    .transfer_size = PDCA_TRANSFER_SIZE_HALF_WORD  // select size of the transfer      
  };
  PDCA_OPTIONS.addr=(char *)samples + 2*from;
80017a06:	ec f8 01 98 	ld.w	r8,r6[408]
80017a0a:	90 08       	ld.sh	r8,r8[0x0]
80017a0c:	5c 88       	casts.h	r8
80017a0e:	5c 78       	castu.h	r8
80017a10:	a1 78       	lsl	r8,0x1
80017a12:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017a16:	10 09       	add	r9,r8
80017a18:	ec f8 03 78 	ld.w	r8,r6[888]
80017a1c:	91 09       	st.w	r8[0x0],r9
  PDCA_OPTIONS.size=to-from;
80017a1e:	ec f8 02 9c 	ld.w	r8,r6[668]
80017a22:	90 08       	ld.sh	r8,r8[0x0]
80017a24:	5c 88       	casts.h	r8
80017a26:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80017a2a:	ec f8 01 98 	ld.w	r8,r6[408]
80017a2e:	90 08       	ld.sh	r8,r8[0x0]
80017a30:	5c 88       	casts.h	r8
80017a32:	5c 78       	castu.h	r8
80017a34:	f2 08 01 08 	sub	r8,r9,r8
80017a38:	10 99       	mov	r9,r8
80017a3a:	ec f8 03 78 	ld.w	r8,r6[888]
80017a3e:	91 19       	st.w	r8[0x4],r9

  // Initialize Event Controller
  init_pevc();
80017a40:	f0 16 01 e1 	mcall	r6[1924]
  // Initialize Generic Clock
  init_gclk();
80017a44:	f0 16 01 d4 	mcall	r6[1872]

  // Init PDCA channel with the pdca_options.
  pdca_init_channel(PDCA_CHANNEL_DAC, &PDCA_OPTIONS); // init PDCA channel with options.
80017a48:	ec fb 03 78 	ld.w	r11,r6[888]
80017a4c:	30 4c       	mov	r12,4
80017a4e:	f0 16 00 7a 	mcall	r6[488]

  autoplay=repeat;
80017a52:	ec f8 04 ec 	ld.w	r8,r6[1260]
80017a56:	ee f9 ff f0 	ld.w	r9,r7[-16]
80017a5a:	91 09       	st.w	r8[0x0],r9
  //if (repeat==1) {
	  // TODO: for some reason having this interrupt tends to crash occasionally
      INTC_register_interrupt( (__int_handler) &pdca_int_handler_dac, AVR32_PDCA_IRQ_4, AVR32_INTC_INT0);
80017a5c:	30 0a       	mov	r10,0
80017a5e:	e0 6b 00 80 	mov	r11,128
80017a62:	fe cc 02 72 	sub	r12,pc,626
80017a66:	f0 16 00 3b 	mcall	r6[236]
	  pdca_enable_interrupt_transfer_complete(PDCA_CHANNEL_DAC);
80017a6a:	30 4c       	mov	r12,4
80017a6c:	f0 16 00 be 	mcall	r6[760]
  //}  
} 
80017a70:	2f cd       	sub	sp,-16
80017a72:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017a76:	00 00       	add	r0,r0
80017a78:	80 01       	ld.sh	r1,r0[0x0]
80017a7a:	78 56       	ld.w	r6,r12[0x14]

80017a7c <DAC_play>:

void DAC_play() {
80017a7c:	eb cd 40 c0 	pushm	r6-r7,lr
80017a80:	1a 97       	mov	r7,sp
80017a82:	49 56       	lddpc	r6,80017ad4 <DAC_play+0x58>
80017a84:	1e 26       	rsub	r6,pc
	//Disable_global_interrupt();
	pdca_disable(PDCA_CHANNEL_DAC);
80017a86:	30 4c       	mov	r12,4
80017a88:	f0 16 00 83 	mcall	r6[524]
	pdca_reload_channel(PDCA_CHANNEL_DAC, (void *)buffer+2*from, to-from);
80017a8c:	ec f8 02 9c 	ld.w	r8,r6[668]
80017a90:	90 08       	ld.sh	r8,r8[0x0]
80017a92:	5c 88       	casts.h	r8
80017a94:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80017a98:	ec f8 01 98 	ld.w	r8,r6[408]
80017a9c:	90 08       	ld.sh	r8,r8[0x0]
80017a9e:	5c 88       	casts.h	r8
80017aa0:	5c 78       	castu.h	r8
80017aa2:	f2 08 01 08 	sub	r8,r9,r8
80017aa6:	10 99       	mov	r9,r8
80017aa8:	ec f8 03 7c 	ld.w	r8,r6[892]
80017aac:	70 0a       	ld.w	r10,r8[0x0]
80017aae:	ec f8 01 98 	ld.w	r8,r6[408]
80017ab2:	90 08       	ld.sh	r8,r8[0x0]
80017ab4:	5c 88       	casts.h	r8
80017ab6:	5c 78       	castu.h	r8
80017ab8:	a1 78       	lsl	r8,0x1
80017aba:	f4 08 00 08 	add	r8,r10,r8
80017abe:	12 9a       	mov	r10,r9
80017ac0:	10 9b       	mov	r11,r8
80017ac2:	30 4c       	mov	r12,4
80017ac4:	f0 16 01 09 	mcall	r6[1060]
  // Enable now the transfer.
    //Enable_global_interrupt();
    pdca_enable(PDCA_CHANNEL_DAC);
80017ac8:	30 4c       	mov	r12,4
80017aca:	f0 16 00 96 	mcall	r6[600]

  
}
80017ace:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017ad2:	00 00       	add	r0,r0
80017ad4:	80 01       	ld.sh	r1,r0[0x0]
80017ad6:	79 08       	ld.w	r8,r12[0x40]

80017ad8 <DAC_pause>:

void DAC_pause(void) {
80017ad8:	eb cd 40 80 	pushm	r7,lr
80017adc:	1a 97       	mov	r7,sp

}
80017ade:	e3 cd 80 80 	ldm	sp++,r7,pc

80017ae2 <DAC_resume>:

void DAC_resume(void) {
80017ae2:	eb cd 40 80 	pushm	r7,lr
80017ae6:	1a 97       	mov	r7,sp

}
80017ae8:	e3 cd 80 80 	ldm	sp++,r7,pc

80017aec <DAC_is_finished>:

int  DAC_is_finished(void) {
80017aec:	eb cd 40 80 	pushm	r7,lr
80017af0:	1a 97       	mov	r7,sp
	return 0;
80017af2:	30 08       	mov	r8,0
}
80017af4:	10 9c       	mov	r12,r8
80017af6:	e3 cd 80 80 	ldm	sp++,r7,pc

80017afa <DAC_set_value>:

void DAC_set_value(int32_t output) {
80017afa:	eb cd 40 c0 	pushm	r6-r7,lr
80017afe:	1a 97       	mov	r7,sp
80017b00:	20 1d       	sub	sp,4
80017b02:	48 76       	lddpc	r6,80017b1c <DAC_set_value+0x22>
80017b04:	1e 26       	rsub	r6,pc
80017b06:	ef 4c ff fc 	st.w	r7[-4],r12
	dacifb->dr0 = (output); 
80017b0a:	ec f8 02 80 	ld.w	r8,r6[640]
80017b0e:	70 08       	ld.w	r8,r8[0x0]
80017b10:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017b14:	91 b9       	st.w	r8[0x2c],r9
}
80017b16:	2f fd       	sub	sp,-4
80017b18:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017b1c:	80 01       	ld.sh	r1,r0[0x0]
80017b1e:	79 88       	ld.w	r8,r12[0x60]

80017b20 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80017b20:	eb cd 40 80 	pushm	r7,lr
80017b24:	1a 97       	mov	r7,sp
80017b26:	20 1d       	sub	sp,4
80017b28:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80017b2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017b30:	e6 18 00 01 	andh	r8,0x1,COH
80017b34:	5f 08       	sreq	r8
80017b36:	5c 58       	castu.b	r8
}
80017b38:	10 9c       	mov	r12,r8
80017b3a:	2f fd       	sub	sp,-4
80017b3c:	e3 cd 80 80 	ldm	sp++,r7,pc

80017b40 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
80017b40:	eb cd 40 80 	pushm	r7,lr
80017b44:	1a 97       	mov	r7,sp
80017b46:	20 1d       	sub	sp,4
80017b48:	18 98       	mov	r8,r12
80017b4a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80017b4e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80017b52:	58 38       	cp.w	r8,3
80017b54:	c1 20       	breq	80017b78 <osc_get_rate+0x38>
80017b56:	e0 89 00 07 	brgt	80017b64 <osc_get_rate+0x24>
80017b5a:	58 08       	cp.w	r8,0
80017b5c:	c0 90       	breq	80017b6e <osc_get_rate+0x2e>
80017b5e:	58 28       	cp.w	r8,2
80017b60:	c0 f0       	breq	80017b7e <osc_get_rate+0x3e>
80017b62:	c1 b8       	rjmp	80017b98 <osc_get_rate+0x58>
80017b64:	58 48       	cp.w	r8,4
80017b66:	c1 10       	breq	80017b88 <osc_get_rate+0x48>
80017b68:	58 58       	cp.w	r8,5
80017b6a:	c1 40       	breq	80017b92 <osc_get_rate+0x52>
80017b6c:	c1 68       	rjmp	80017b98 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
80017b6e:	e0 68 24 00 	mov	r8,9216
80017b72:	ea 18 00 f4 	orh	r8,0xf4
80017b76:	c1 28       	rjmp	80017b9a <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
80017b78:	e0 68 80 00 	mov	r8,32768
80017b7c:	c0 f8       	rjmp	80017b9a <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
80017b7e:	e0 68 12 00 	mov	r8,4608
80017b82:	ea 18 00 7a 	orh	r8,0x7a
80017b86:	c0 a8       	rjmp	80017b9a <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
80017b88:	e0 68 0e 00 	mov	r8,3584
80017b8c:	ea 18 07 27 	orh	r8,0x727
80017b90:	c0 58       	rjmp	80017b9a <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
80017b92:	e0 78 c1 38 	mov	r8,115000
80017b96:	c0 28       	rjmp	80017b9a <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
80017b98:	30 08       	mov	r8,0
	}
}
80017b9a:	10 9c       	mov	r12,r8
80017b9c:	2f fd       	sub	sp,-4
80017b9e:	e3 cd 80 80 	ldm	sp++,r7,pc

80017ba2 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
80017ba2:	eb cd 40 c0 	pushm	r6-r7,lr
80017ba6:	1a 97       	mov	r7,sp
80017ba8:	48 56       	lddpc	r6,80017bbc <sysclk_get_main_hz+0x1a>
80017baa:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
80017bac:	30 0c       	mov	r12,0
80017bae:	cc 9f       	rcall	80017b40 <osc_get_rate>
80017bb0:	18 98       	mov	r8,r12
80017bb2:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80017bb4:	10 9c       	mov	r12,r8
80017bb6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017bba:	00 00       	add	r0,r0
80017bbc:	80 01       	ld.sh	r1,r0[0x0]
80017bbe:	7a 2e       	ld.w	lr,sp[0x8]

80017bc0 <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
80017bc0:	eb cd 40 c0 	pushm	r6-r7,lr
80017bc4:	1a 97       	mov	r7,sp
80017bc6:	48 46       	lddpc	r6,80017bd4 <sysclk_get_pba_hz+0x14>
80017bc8:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
80017bca:	ce cf       	rcall	80017ba2 <sysclk_get_main_hz>
80017bcc:	18 98       	mov	r8,r12
}
80017bce:	10 9c       	mov	r12,r8
80017bd0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017bd4:	80 01       	ld.sh	r1,r0[0x0]
80017bd6:	7a 4c       	ld.w	r12,sp[0x10]

80017bd8 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80017bd8:	eb cd 40 c0 	pushm	r6-r7,lr
80017bdc:	1a 97       	mov	r7,sp
80017bde:	20 6d       	sub	sp,24
80017be0:	49 e6       	lddpc	r6,80017c58 <interpolate+0x80>
80017be2:	1e 26       	rsub	r6,pc
80017be4:	ef 4c ff f8 	st.w	r7[-8],r12
80017be8:	ef 4b ff f4 	st.w	r7[-12],r11
80017bec:	ef 4a ff f0 	st.w	r7[-16],r10
80017bf0:	ef 49 ff ec 	st.w	r7[-20],r9
80017bf4:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80017bf8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017bfc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017c00:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80017c04:	c0 41       	brne	80017c0c <interpolate+0x34>
	{
		return y1;
80017c06:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017c0a:	c2 38       	rjmp	80017c50 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80017c0c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80017c10:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017c14:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80017c18:	ee fa ff f8 	ld.w	r10,r7[-8]
80017c1c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017c20:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80017c24:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80017c28:	ee fa ff f0 	ld.w	r10,r7[-16]
80017c2c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017c30:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80017c34:	12 9b       	mov	r11,r9
80017c36:	10 9c       	mov	r12,r8
80017c38:	f0 16 00 08 	mcall	r6[32]
80017c3c:	18 98       	mov	r8,r12
80017c3e:	10 99       	mov	r9,r8
80017c40:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017c44:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80017c48:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80017c4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80017c50:	10 9c       	mov	r12,r8
80017c52:	2f ad       	sub	sp,-24
80017c54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017c58:	80 01       	ld.sh	r1,r0[0x0]
80017c5a:	7a 66       	ld.w	r6,sp[0x18]
80017c5c:	21 00       	sub	r0,16

80017c5e <pdca_int_handler_i2c0>:

/*!  The PDCA interrupt handler.
 */
__attribute__((__interrupt__))
static void pdca_int_handler_i2c0(void)
{
80017c5e:	eb cd 40 c0 	pushm	r6-r7,lr
80017c62:	1a 97       	mov	r7,sp
80017c64:	4a 26       	lddpc	r6,80017cec <pdca_int_handler_i2c0+0x8e>
80017c66:	1e 26       	rsub	r6,pc
	AVR32_TWIM0.cr = AVR32_TWIM_CR_MDIS_MASK;
80017c68:	fe 78 38 00 	mov	r8,-51200
80017c6c:	30 29       	mov	r9,2
80017c6e:	91 09       	st.w	r8[0x0],r9
	pdca_disable(TWI0_DMA_CH);
80017c70:	30 2c       	mov	r12,2
80017c72:	f0 16 00 83 	mcall	r6[524]
	
	pdca_disable_interrupt_transfer_complete(TWI0_DMA_CH);
80017c76:	30 2c       	mov	r12,2
80017c78:	f0 16 00 9f 	mcall	r6[636]
	
   // call callback function to process data, at end of transfer
   // to process data, and maybe add some more data
   schedule[0][current_schedule_slot[0]].transfer_in_progress=0;
80017c7c:	ec f8 02 98 	ld.w	r8,r6[664]
80017c80:	11 88       	ld.ub	r8,r8[0x0]
80017c82:	5c 58       	castu.b	r8
80017c84:	10 99       	mov	r9,r8
80017c86:	ec fa 01 38 	ld.w	r10,r6[312]
80017c8a:	12 98       	mov	r8,r9
80017c8c:	a3 68       	lsl	r8,0x2
80017c8e:	12 08       	add	r8,r9
80017c90:	a3 78       	lsl	r8,0x3
80017c92:	f4 08 00 08 	add	r8,r10,r8
80017c96:	f0 c9 ff e0 	sub	r9,r8,-32
80017c9a:	30 08       	mov	r8,0
80017c9c:	b2 a8       	st.b	r9[0x2],r8
   
   if (schedule[0][current_schedule_slot[0]].callback) schedule[0][current_schedule_slot[0]].callback;
80017c9e:	ec f8 02 98 	ld.w	r8,r6[664]
80017ca2:	11 88       	ld.ub	r8,r8[0x0]
80017ca4:	5c 58       	castu.b	r8
80017ca6:	10 99       	mov	r9,r8
80017ca8:	ec fa 01 38 	ld.w	r10,r6[312]
80017cac:	12 98       	mov	r8,r9
80017cae:	a3 68       	lsl	r8,0x2
80017cb0:	12 08       	add	r8,r9
80017cb2:	a3 78       	lsl	r8,0x3
80017cb4:	f4 08 00 08 	add	r8,r10,r8
80017cb8:	2d c8       	sub	r8,-36
80017cba:	70 08       	ld.w	r8,r8[0x0]
80017cbc:	58 08       	cp.w	r8,0
80017cbe:	c1 00       	breq	80017cde <pdca_int_handler_i2c0+0x80>
80017cc0:	ec f8 02 98 	ld.w	r8,r6[664]
80017cc4:	11 88       	ld.ub	r8,r8[0x0]
80017cc6:	5c 58       	castu.b	r8
80017cc8:	10 99       	mov	r9,r8
80017cca:	ec fa 01 38 	ld.w	r10,r6[312]
80017cce:	12 98       	mov	r8,r9
80017cd0:	a3 68       	lsl	r8,0x2
80017cd2:	12 08       	add	r8,r9
80017cd4:	a3 78       	lsl	r8,0x3
80017cd6:	f4 08 00 08 	add	r8,r10,r8
80017cda:	2d c8       	sub	r8,-36
80017cdc:	70 08       	ld.w	r8,r8[0x0]
   dbg_print( "!");
80017cde:	fe cc 00 82 	sub	r12,pc,130
80017ce2:	f0 16 00 01 	mcall	r6[4]
}
80017ce6:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80017cea:	d6 03       	rete
80017cec:	80 01       	ld.sh	r1,r0[0x0]
80017cee:	7a ea       	ld.w	r10,sp[0x38]

80017cf0 <init_i2c>:




int init_i2c(unsigned char i2c_device) {
80017cf0:	eb cd 40 c0 	pushm	r6-r7,lr
80017cf4:	1a 97       	mov	r7,sp
80017cf6:	20 4d       	sub	sp,16
80017cf8:	4c b6       	lddpc	r6,80017e24 <init_i2c+0x134>
80017cfa:	1e 26       	rsub	r6,pc
80017cfc:	18 98       	mov	r8,r12
80017cfe:	ef 68 ff f0 	st.b	r7[-16],r8
	int i;
	volatile avr32_twim_t *twim;
	switch (i2c_device) {
80017d02:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80017d06:	58 08       	cp.w	r8,0
80017d08:	c0 40       	breq	80017d10 <init_i2c+0x20>
80017d0a:	58 18       	cp.w	r8,1
80017d0c:	c1 50       	breq	80017d36 <init_i2c+0x46>
80017d0e:	c2 d8       	rjmp	80017d68 <init_i2c+0x78>
	case 0: 
		twim=&AVR32_TWIM0;
80017d10:	fe 78 38 00 	mov	r8,-51200
80017d14:	ef 48 ff f8 	st.w	r7[-8],r8
		// Register PDCA IRQ interrupt.
		INTC_register_interrupt( (__int_handler) &pdca_int_handler_i2c0, TWI0_DMA_IRQ, AVR32_INTC_INT0);
80017d18:	30 0a       	mov	r10,0
80017d1a:	36 2b       	mov	r11,98
80017d1c:	fe cc 00 be 	sub	r12,pc,190
80017d20:	f0 16 00 3b 	mcall	r6[236]
		gpio_enable_module_pin(AVR32_TWIMS0_TWCK_0_0_PIN, AVR32_TWIMS0_TWCK_0_0_FUNCTION);
80017d24:	30 0b       	mov	r11,0
80017d26:	34 3c       	mov	r12,67
80017d28:	f0 16 00 3f 	mcall	r6[252]
		gpio_enable_module_pin(AVR32_TWIMS0_TWD_0_0_PIN, AVR32_TWIMS0_TWD_0_0_FUNCTION);
80017d2c:	30 0b       	mov	r11,0
80017d2e:	34 2c       	mov	r12,66
80017d30:	f0 16 00 3f 	mcall	r6[252]

	break;
80017d34:	c1 c8       	rjmp	80017d6c <init_i2c+0x7c>
	case 1:
		twim=&AVR32_TWIM1;// Register PDCA IRQ interrupt.
80017d36:	fe 78 3c 00 	mov	r8,-50176
80017d3a:	ef 48 ff f8 	st.w	r7[-8],r8
		INTC_register_interrupt( (__int_handler) &pdca_int_handler_i2c0, TWI1_DMA_IRQ, AVR32_INTC_INT0);
80017d3e:	30 0a       	mov	r10,0
80017d40:	36 3b       	mov	r11,99
80017d42:	fe cc 00 e4 	sub	r12,pc,228
80017d46:	f0 16 00 3b 	mcall	r6[236]
		gpio_enable_module_pin(AVR32_TWIMS1_TWCK_0_0_PIN, AVR32_TWIMS1_TWCK_0_0_FUNCTION);
80017d4a:	30 0b       	mov	r11,0
80017d4c:	34 5c       	mov	r12,69
80017d4e:	f0 16 00 3f 	mcall	r6[252]
		gpio_enable_module_pin(AVR32_TWIMS1_TWD_0_0_PIN, AVR32_TWIMS1_TWD_0_0_FUNCTION);
80017d52:	30 0b       	mov	r11,0
80017d54:	34 4c       	mov	r12,68
80017d56:	f0 16 00 3f 	mcall	r6[252]
		gpio_enable_pin_pull_up(AVR32_TWIMS1_TWCK_0_0_PIN);
80017d5a:	34 5c       	mov	r12,69
80017d5c:	f0 16 00 ff 	mcall	r6[1020]
		gpio_enable_pin_pull_up(AVR32_TWIMS1_TWD_0_0_PIN);
80017d60:	34 4c       	mov	r12,68
80017d62:	f0 16 00 ff 	mcall	r6[1020]
	break;
80017d66:	c0 38       	rjmp	80017d6c <init_i2c+0x7c>
	default: // invalid device ID
		return -1;
80017d68:	3f f8       	mov	r8,-1
80017d6a:	c5 98       	rjmp	80017e1c <init_i2c+0x12c>
	}		
	for (i=0; i<I2C_SCHEDULE_SLOTS; i++) {
80017d6c:	30 08       	mov	r8,0
80017d6e:	ef 48 ff f4 	st.w	r7[-12],r8
80017d72:	c1 b8       	rjmp	80017da8 <init_i2c+0xb8>
		schedule[i2c_device][i].active=-1;
80017d74:	ef 3b ff f0 	ld.ub	r11,r7[-16]
80017d78:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017d7c:	ec fa 01 38 	ld.w	r10,r6[312]
80017d80:	12 98       	mov	r8,r9
80017d82:	a3 68       	lsl	r8,0x2
80017d84:	12 08       	add	r8,r9
80017d86:	a3 78       	lsl	r8,0x3
80017d88:	e0 69 01 90 	mov	r9,400
80017d8c:	f6 09 02 49 	mul	r9,r11,r9
80017d90:	12 08       	add	r8,r9
80017d92:	f4 08 00 08 	add	r8,r10,r8
80017d96:	f0 c9 ff e0 	sub	r9,r8,-32
80017d9a:	3f f8       	mov	r8,-1
80017d9c:	b2 98       	st.b	r9[0x1],r8
		gpio_enable_pin_pull_up(AVR32_TWIMS1_TWD_0_0_PIN);
	break;
	default: // invalid device ID
		return -1;
	}		
	for (i=0; i<I2C_SCHEDULE_SLOTS; i++) {
80017d9e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017da2:	2f f8       	sub	r8,-1
80017da4:	ef 48 ff f4 	st.w	r7[-12],r8
80017da8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017dac:	58 98       	cp.w	r8,9
80017dae:	fe 9a ff e3 	brle	80017d74 <init_i2c+0x84>
		schedule[i2c_device][i].active=-1;
	}
				
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80017db2:	e1 b8 00 00 	mfsr	r8,0x0
80017db6:	10 9c       	mov	r12,r8
80017db8:	cb 4e       	rcall	80017b20 <cpu_irq_is_enabled_flags>
80017dba:	18 98       	mov	r8,r12
80017dbc:	ef 68 ff ff 	st.b	r7[-1],r8
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80017dc0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80017dc4:	30 08       	mov	r8,0
80017dc6:	f0 09 18 00 	cp.b	r9,r8
80017dca:	c0 20       	breq	80017dce <init_i2c+0xde>
		cpu_irq_disable ();
80017dcc:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80017dce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017dd2:	3f f9       	mov	r9,-1
80017dd4:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80017dd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017dda:	30 19       	mov	r9,1
80017ddc:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80017dde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017de2:	e0 69 00 80 	mov	r9,128
80017de6:	91 09       	st.w	r8[0x0],r9
	
	
	if (global_interrupt_enabled) {
80017de8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80017dec:	30 08       	mov	r8,0
80017dee:	f0 09 18 00 	cp.b	r9,r8
80017df2:	c0 20       	breq	80017df6 <init_i2c+0x106>
		cpu_irq_enable ();
80017df4:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
80017df6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017dfa:	3f f9       	mov	r9,-1
80017dfc:	91 b9       	st.w	r8[0x2c],r9
//	irq_register_handler(twim_master_interrupt_handler,
//			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
//	cpu_irq_restore(flags);
	
	// Select the speed
	if (twim_set_speed(twim, 100000, sysclk_get_pba_hz()) == 
80017dfe:	ce 1e       	rcall	80017bc0 <sysclk_get_pba_hz>
80017e00:	18 98       	mov	r8,r12
80017e02:	10 9a       	mov	r10,r8
80017e04:	e0 7b 86 a0 	mov	r11,100000
80017e08:	ee fc ff f8 	ld.w	r12,r7[-8]
80017e0c:	f0 16 01 37 	mcall	r6[1244]
80017e10:	18 98       	mov	r8,r12
80017e12:	5b 88       	cp.w	r8,-8
80017e14:	c0 31       	brne	80017e1a <init_i2c+0x12a>
			ERR_INVALID_ARG) {
		
		return ERR_INVALID_ARG;
80017e16:	3f 88       	mov	r8,-8
80017e18:	c0 28       	rjmp	80017e1c <init_i2c+0x12c>
	}
	return STATUS_OK;				
80017e1a:	30 08       	mov	r8,0

}
80017e1c:	10 9c       	mov	r12,r8
80017e1e:	2f cd       	sub	sp,-16
80017e20:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017e24:	80 01       	ld.sh	r1,r0[0x0]
80017e26:	7b 7e       	ld.w	lr,sp[0x5c]

80017e28 <i2c_reset>:



char i2c_reset(unsigned char i2c_device) {
80017e28:	eb cd 40 c0 	pushm	r6-r7,lr
80017e2c:	1a 97       	mov	r7,sp
80017e2e:	20 3d       	sub	sp,12
80017e30:	4a 26       	lddpc	r6,80017eb8 <i2c_reset+0x90>
80017e32:	1e 26       	rsub	r6,pc
80017e34:	18 98       	mov	r8,r12
80017e36:	ef 68 ff f4 	st.b	r7[-12],r8
	volatile avr32_twim_t *twim;
	switch (i2c_device) {
80017e3a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80017e3e:	58 08       	cp.w	r8,0
80017e40:	c0 40       	breq	80017e48 <i2c_reset+0x20>
80017e42:	58 18       	cp.w	r8,1
80017e44:	c0 70       	breq	80017e52 <i2c_reset+0x2a>
80017e46:	c0 b8       	rjmp	80017e5c <i2c_reset+0x34>
	case 0: 
		twim=&AVR32_TWIM0;
80017e48:	fe 78 38 00 	mov	r8,-51200
80017e4c:	ef 48 ff f8 	st.w	r7[-8],r8
	break;
80017e50:	c0 a8       	rjmp	80017e64 <i2c_reset+0x3c>
	case 1:
		twim=&AVR32_TWIM1;
80017e52:	fe 78 3c 00 	mov	r8,-50176
80017e56:	ef 48 ff f8 	st.w	r7[-8],r8
	break;
80017e5a:	c0 58       	rjmp	80017e64 <i2c_reset+0x3c>
	default: // invalid device ID
		return -1;
80017e5c:	e0 68 00 ff 	mov	r8,255
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
}
80017e60:	10 9c       	mov	r12,r8
80017e62:	c2 78       	rjmp	80017eb0 <i2c_reset+0x88>
		twim=&AVR32_TWIM1;
	break;
	default: // invalid device ID
		return -1;
	}		
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80017e64:	e1 b8 00 00 	mfsr	r8,0x0
80017e68:	10 9c       	mov	r12,r8
80017e6a:	c5 be       	rcall	80017b20 <cpu_irq_is_enabled_flags>
80017e6c:	18 98       	mov	r8,r12
80017e6e:	ef 68 ff ff 	st.b	r7[-1],r8
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80017e72:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80017e76:	30 08       	mov	r8,0
80017e78:	f0 09 18 00 	cp.b	r9,r8
80017e7c:	c0 20       	breq	80017e80 <i2c_reset+0x58>
		cpu_irq_disable ();
80017e7e:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80017e80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017e84:	3f f9       	mov	r9,-1
80017e86:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80017e88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017e8c:	30 19       	mov	r9,1
80017e8e:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80017e90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017e94:	e0 69 00 80 	mov	r9,128
80017e98:	91 09       	st.w	r8[0x0],r9
	if (global_interrupt_enabled) {
80017e9a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80017e9e:	30 08       	mov	r8,0
80017ea0:	f0 09 18 00 	cp.b	r9,r8
80017ea4:	c0 20       	breq	80017ea8 <i2c_reset+0x80>
		cpu_irq_enable ();
80017ea6:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
80017ea8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017eac:	3f f9       	mov	r9,-1
80017eae:	91 b9       	st.w	r8[0x2c],r9
}
80017eb0:	2f dd       	sub	sp,-12
80017eb2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017eb6:	00 00       	add	r0,r0
80017eb8:	80 01       	ld.sh	r1,r0[0x0]
80017eba:	7c b6       	ld.w	r6,lr[0x2c]

80017ebc <i2c_add_request>:
char i2c_add_request(unsigned char i2c_device, i2c_schedule_event* new_event){
80017ebc:	eb cd 40 c0 	pushm	r6-r7,lr
80017ec0:	1a 97       	mov	r7,sp
80017ec2:	20 3d       	sub	sp,12
80017ec4:	4b f6       	lddpc	r6,80017fc0 <i2c_add_request+0x104>
80017ec6:	1e 26       	rsub	r6,pc
80017ec8:	18 98       	mov	r8,r12
80017eca:	ef 4b ff f4 	st.w	r7[-12],r11
80017ece:	ef 68 ff f8 	st.b	r7[-8],r8
	// find free schedule slot
	int i=0;
80017ed2:	30 08       	mov	r8,0
80017ed4:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i=0; (i<I2C_SCHEDULE_SLOTS)&& (schedule[i2c_device][i].active>=0); i++) {
80017ed8:	30 08       	mov	r8,0
80017eda:	ef 48 ff fc 	st.w	r7[-4],r8
80017ede:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017ee2:	58 98       	cp.w	r8,9
80017ee4:	e0 89 00 1b 	brgt	80017f1a <i2c_add_request+0x5e>
80017ee8:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80017eec:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017ef0:	ec fa 01 38 	ld.w	r10,r6[312]
80017ef4:	12 98       	mov	r8,r9
80017ef6:	a3 68       	lsl	r8,0x2
80017ef8:	12 08       	add	r8,r9
80017efa:	a3 78       	lsl	r8,0x3
80017efc:	e0 69 01 90 	mov	r9,400
80017f00:	f6 09 02 49 	mul	r9,r11,r9
80017f04:	12 08       	add	r8,r9
80017f06:	f4 08 00 08 	add	r8,r10,r8
80017f0a:	2e 08       	sub	r8,-32
80017f0c:	11 98       	ld.ub	r8,r8[0x1]
80017f0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017f12:	2f f8       	sub	r8,-1
80017f14:	ef 48 ff fc 	st.w	r7[-4],r8
80017f18:	ce 3b       	rjmp	80017ede <i2c_add_request+0x22>
	}
	// add request to schedule
	if (i<I2C_SCHEDULE_SLOTS) {
80017f1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017f1e:	58 98       	cp.w	r8,9
80017f20:	e0 89 00 45 	brgt	80017faa <i2c_add_request+0xee>
		new_event->schedule_slot=i;
80017f24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017f28:	5c 58       	castu.b	r8
80017f2a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017f2e:	f3 68 00 18 	st.b	r9[24],r8
		new_event->transfer_in_progress=0;
80017f32:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017f36:	30 08       	mov	r8,0
80017f38:	f3 68 00 22 	st.b	r9[34],r8
		new_event->active=1;
80017f3c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017f40:	30 18       	mov	r8,1
80017f42:	f3 68 00 21 	st.b	r9[33],r8
		schedule[i2c_device][i]=*new_event;
80017f46:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80017f4a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017f4e:	ec fa 01 38 	ld.w	r10,r6[312]
80017f52:	12 98       	mov	r8,r9
80017f54:	a3 68       	lsl	r8,0x2
80017f56:	12 08       	add	r8,r9
80017f58:	a3 78       	lsl	r8,0x3
80017f5a:	e0 69 01 90 	mov	r9,400
80017f5e:	f6 09 02 49 	mul	r9,r11,r9
80017f62:	12 08       	add	r8,r9
80017f64:	f4 08 00 09 	add	r9,r10,r8
80017f68:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017f6c:	12 9a       	mov	r10,r9
80017f6e:	10 9b       	mov	r11,r8
80017f70:	f4 c8 00 00 	sub	r8,r10,0
80017f74:	f6 c9 00 00 	sub	r9,r11,0
80017f78:	72 0c       	ld.w	r12,r9[0x0]
80017f7a:	91 0c       	st.w	r8[0x0],r12
80017f7c:	72 1c       	ld.w	r12,r9[0x4]
80017f7e:	91 1c       	st.w	r8[0x4],r12
80017f80:	72 2c       	ld.w	r12,r9[0x8]
80017f82:	91 2c       	st.w	r8[0x8],r12
80017f84:	72 39       	ld.w	r9,r9[0xc]
80017f86:	91 39       	st.w	r8[0xc],r9
80017f88:	f4 c8 ff f0 	sub	r8,r10,-16
80017f8c:	f6 c9 ff f0 	sub	r9,r11,-16
80017f90:	72 0c       	ld.w	r12,r9[0x0]
80017f92:	91 0c       	st.w	r8[0x0],r12
80017f94:	72 1c       	ld.w	r12,r9[0x4]
80017f96:	91 1c       	st.w	r8[0x4],r12
80017f98:	72 2c       	ld.w	r12,r9[0x8]
80017f9a:	91 2c       	st.w	r8[0x8],r12
80017f9c:	72 39       	ld.w	r9,r9[0xc]
80017f9e:	91 39       	st.w	r8[0xc],r9
80017fa0:	f6 e8 00 20 	ld.d	r8,r11[32]
80017fa4:	f4 e9 00 20 	st.d	r10[32],r8
80017fa8:	c0 48       	rjmp	80017fb0 <i2c_add_request+0xf4>
	} else i=-1;
80017faa:	3f f8       	mov	r8,-1
80017fac:	ef 48 ff fc 	st.w	r7[-4],r8
	// return assigned schedule slot
	return i;
80017fb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017fb4:	5c 58       	castu.b	r8
}
80017fb6:	10 9c       	mov	r12,r8
80017fb8:	2f dd       	sub	sp,-12
80017fba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017fbe:	00 00       	add	r0,r0
80017fc0:	80 01       	ld.sh	r1,r0[0x0]
80017fc2:	7d 4a       	ld.w	r10,lr[0x50]

80017fc4 <i2c_change_request>:
char i2c_change_request(unsigned char i2c_device, i2c_schedule_event* new_event){
80017fc4:	eb cd 40 c0 	pushm	r6-r7,lr
80017fc8:	1a 97       	mov	r7,sp
80017fca:	20 3d       	sub	sp,12
80017fcc:	4a a6       	lddpc	r6,80018074 <i2c_change_request+0xb0>
80017fce:	1e 26       	rsub	r6,pc
80017fd0:	18 98       	mov	r8,r12
80017fd2:	ef 4b ff f4 	st.w	r7[-12],r11
80017fd6:	ef 68 ff f8 	st.b	r7[-8],r8
	int i=new_event->schedule_slot;
80017fda:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017fde:	f1 38 00 18 	ld.ub	r8,r8[24]
80017fe2:	ef 48 ff fc 	st.w	r7[-4],r8
	if ((i>=0) && (i<I2C_SCHEDULE_SLOTS)) {
80017fe6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017fea:	58 08       	cp.w	r8,0
80017fec:	c4 15       	brlt	8001806e <i2c_change_request+0xaa>
80017fee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017ff2:	58 98       	cp.w	r8,9
80017ff4:	e0 89 00 3d 	brgt	8001806e <i2c_change_request+0xaa>
		new_event->transfer_in_progress=0;
80017ff8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017ffc:	30 08       	mov	r8,0
80017ffe:	f3 68 00 22 	st.b	r9[34],r8
		new_event->active=1;
80018002:	ee f9 ff f4 	ld.w	r9,r7[-12]
80018006:	30 18       	mov	r8,1
80018008:	f3 68 00 21 	st.b	r9[33],r8
		schedule[i2c_device][i]=*new_event;
8001800c:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80018010:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018014:	ec fa 01 38 	ld.w	r10,r6[312]
80018018:	12 98       	mov	r8,r9
8001801a:	a3 68       	lsl	r8,0x2
8001801c:	12 08       	add	r8,r9
8001801e:	a3 78       	lsl	r8,0x3
80018020:	e0 69 01 90 	mov	r9,400
80018024:	f6 09 02 49 	mul	r9,r11,r9
80018028:	12 08       	add	r8,r9
8001802a:	f4 08 00 09 	add	r9,r10,r8
8001802e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80018032:	12 9a       	mov	r10,r9
80018034:	10 9b       	mov	r11,r8
80018036:	f4 c8 00 00 	sub	r8,r10,0
8001803a:	f6 c9 00 00 	sub	r9,r11,0
8001803e:	72 0c       	ld.w	r12,r9[0x0]
80018040:	91 0c       	st.w	r8[0x0],r12
80018042:	72 1c       	ld.w	r12,r9[0x4]
80018044:	91 1c       	st.w	r8[0x4],r12
80018046:	72 2c       	ld.w	r12,r9[0x8]
80018048:	91 2c       	st.w	r8[0x8],r12
8001804a:	72 39       	ld.w	r9,r9[0xc]
8001804c:	91 39       	st.w	r8[0xc],r9
8001804e:	f4 c8 ff f0 	sub	r8,r10,-16
80018052:	f6 c9 ff f0 	sub	r9,r11,-16
80018056:	72 0c       	ld.w	r12,r9[0x0]
80018058:	91 0c       	st.w	r8[0x0],r12
8001805a:	72 1c       	ld.w	r12,r9[0x4]
8001805c:	91 1c       	st.w	r8[0x4],r12
8001805e:	72 2c       	ld.w	r12,r9[0x8]
80018060:	91 2c       	st.w	r8[0x8],r12
80018062:	72 39       	ld.w	r9,r9[0xc]
80018064:	91 39       	st.w	r8[0xc],r9
80018066:	f6 e8 00 20 	ld.d	r8,r11[32]
8001806a:	f4 e9 00 20 	st.d	r10[32],r8
	};
}
8001806e:	2f dd       	sub	sp,-12
80018070:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018074:	80 01       	ld.sh	r1,r0[0x0]
80018076:	7e 52       	ld.w	r2,pc[0x14]
80018078:	77 72       	ld.w	r2,r11[0x5c]
8001807a:	00 00       	add	r0,r0
8001807c:	77 00       	ld.w	r0,r11[0x40]

8001807e <i2c_trigger_request>:


char i2c_trigger_request(unsigned char i2c_device, unsigned char schedule_slot) {
8001807e:	eb cd 40 c0 	pushm	r6-r7,lr
80018082:	1a 97       	mov	r7,sp
80018084:	20 4d       	sub	sp,16
80018086:	fe f6 02 32 	ld.w	r6,pc[562]
8001808a:	1e 26       	rsub	r6,pc
8001808c:	18 99       	mov	r9,r12
8001808e:	16 98       	mov	r8,r11
80018090:	ef 69 ff f4 	st.b	r7[-12],r9
80018094:	ef 68 ff f0 	st.b	r7[-16],r8
	// initiate transfer of given request
	// set up DMA channel
	volatile avr32_twim_t *twim;
	i2c_packet_conf* conf=&schedule[i2c_device][schedule_slot].config;
80018098:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8001809c:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800180a0:	12 98       	mov	r8,r9
800180a2:	a3 68       	lsl	r8,0x2
800180a4:	12 08       	add	r8,r9
800180a6:	a3 78       	lsl	r8,0x3
800180a8:	e0 69 01 90 	mov	r9,400
800180ac:	f4 09 02 49 	mul	r9,r10,r9
800180b0:	f0 09 00 09 	add	r9,r8,r9
800180b4:	ec f8 01 38 	ld.w	r8,r6[312]
800180b8:	f2 08 00 08 	add	r8,r9,r8
800180bc:	ef 48 ff fc 	st.w	r7[-4],r8
				.size = 4,	                              // transfer counter
				.r_addr = NULL,                           // next memory address
				.r_size = 0,                              // next transfer counter
				.transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer
			};
	switch (i2c_device) {
800180c0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800180c4:	58 08       	cp.w	r8,0
800180c6:	c0 40       	breq	800180ce <i2c_trigger_request+0x50>
800180c8:	58 18       	cp.w	r8,1
800180ca:	c5 90       	breq	8001817c <i2c_trigger_request+0xfe>
800180cc:	c5 d8       	rjmp	80018186 <i2c_trigger_request+0x108>
	case 0: 
		twim=&AVR32_TWIM0;
800180ce:	fe 78 38 00 	mov	r8,-51200
800180d2:	ef 48 ff f8 	st.w	r7[-8],r8
		twim->cr = AVR32_TWIM_CR_MEN_MASK;
800180d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800180da:	30 19       	mov	r9,1
800180dc:	91 09       	st.w	r8[0x0],r9
		twim->cr = AVR32_TWIM_CR_SWRST_MASK;
800180de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800180e2:	e0 69 00 80 	mov	r9,128
800180e6:	91 09       	st.w	r8[0x0],r9
		twim->cr = AVR32_TWIM_CR_MDIS_MASK;
800180e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800180ec:	30 29       	mov	r9,2
800180ee:	91 09       	st.w	r8[0x0],r9
		switch (conf->direction)  {
800180f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800180f4:	11 c8       	ld.ub	r8,r8[0x4]
800180f6:	58 18       	cp.w	r8,1
800180f8:	c1 b0       	breq	8001812e <i2c_trigger_request+0xb0>
800180fa:	58 28       	cp.w	r8,2
800180fc:	c0 30       	breq	80018102 <i2c_trigger_request+0x84>
800180fe:	58 08       	cp.w	r8,0
80018100:	c3 71       	brne	8001816e <i2c_trigger_request+0xf0>
		case I2C_WRITE1_THEN_READ:
		case I2C_READ:
			PDCA_OPTIONS.pid=AVR32_TWIM0_PDCA_ID_RX;
80018102:	ec f8 01 5c 	ld.w	r8,r6[348]
80018106:	30 69       	mov	r9,6
80018108:	91 49       	st.w	r8[0x10],r9
			PDCA_OPTIONS.addr=(void *)conf->read_data;
8001810a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001810e:	70 49       	ld.w	r9,r8[0x10]
80018110:	ec f8 01 5c 	ld.w	r8,r6[348]
80018114:	91 09       	st.w	r8[0x0],r9
			PDCA_OPTIONS.size=conf->read_count;
80018116:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001811a:	70 59       	ld.w	r9,r8[0x14]
8001811c:	ec f8 01 5c 	ld.w	r8,r6[348]
80018120:	91 19       	st.w	r8[0x4],r9
			// Init PDCA channel with the pdca_options.
			pdca_init_channel(TWI0_DMA_CH, &PDCA_OPTIONS); // init PDCA channel with options.
80018122:	ec fb 01 5c 	ld.w	r11,r6[348]
80018126:	30 2c       	mov	r12,2
80018128:	f0 16 00 7a 	mcall	r6[488]
			break;
8001812c:	c2 18       	rjmp	8001816e <i2c_trigger_request+0xf0>
		case I2C_WRITE:
			PDCA_OPTIONS.pid=AVR32_TWIM0_PDCA_ID_TX;
8001812e:	ec f8 01 5c 	ld.w	r8,r6[348]
80018132:	31 19       	mov	r9,17
80018134:	91 49       	st.w	r8[0x10],r9
			PDCA_OPTIONS.addr=(void *)conf->write_data;
80018136:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001813a:	70 29       	ld.w	r9,r8[0x8]
8001813c:	ec f8 01 5c 	ld.w	r8,r6[348]
80018140:	91 09       	st.w	r8[0x0],r9
			PDCA_OPTIONS.size=conf->write_count;
80018142:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018146:	70 39       	ld.w	r9,r8[0xc]
80018148:	ec f8 01 5c 	ld.w	r8,r6[348]
8001814c:	91 19       	st.w	r8[0x4],r9
			
			// Init PDCA channel with the pdca_options.
			pdca_init_channel(TWI0_DMA_CH, &PDCA_OPTIONS); // init PDCA channel with options.
8001814e:	ec fb 01 5c 	ld.w	r11,r6[348]
80018152:	30 2c       	mov	r12,2
80018154:	f0 16 00 7a 	mcall	r6[488]
			pdca_load_channel(TWI0_DMA_CH, (void *)conf->write_data, conf->write_count);
80018158:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001815c:	70 39       	ld.w	r9,r8[0xc]
8001815e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018162:	70 28       	ld.w	r8,r8[0x8]
80018164:	12 9a       	mov	r10,r9
80018166:	10 9b       	mov	r11,r8
80018168:	30 2c       	mov	r12,2
8001816a:	f0 16 00 bf 	mcall	r6[764]
		}
		
//		pdca_load_channel(TWI0_DMA_CH, (void *)schedule[i2c_device][schedule_slot].config.write_data, schedule[i2c_device][schedule_slot].config.write_count);
		// Enable pdca interrupt each time the reload counter reaches zero, i.e. each time
		// the whole block was received
		pdca_enable_interrupt_transfer_complete(TWI0_DMA_CH);
8001816e:	30 2c       	mov	r12,2
80018170:	f0 16 00 be 	mcall	r6[760]
		pdca_enable_interrupt_transfer_error(TWI0_DMA_CH);
80018174:	30 2c       	mov	r12,2
80018176:	f0 16 02 2a 	mcall	r6[2216]
		
		
		break;
8001817a:	c0 98       	rjmp	8001818c <i2c_trigger_request+0x10e>
	case 1:
		twim=&AVR32_TWIM1;
8001817c:	fe 78 3c 00 	mov	r8,-50176
80018180:	ef 48 ff f8 	st.w	r7[-8],r8
	break;
80018184:	c0 48       	rjmp	8001818c <i2c_trigger_request+0x10e>
	default: // invalid device ID
		return -1;
80018186:	e0 68 00 ff 	mov	r8,255
8001818a:	c9 38       	rjmp	800182b0 <i2c_trigger_request+0x232>
	}		

	// set up I2C speed and mode
//	twim_set_speed(twim, 100000, sysclk_get_pba_hz());
    
	switch (conf->direction)  {
8001818c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018190:	11 c8       	ld.ub	r8,r8[0x4]
80018192:	58 18       	cp.w	r8,1
80018194:	c4 40       	breq	8001821c <i2c_trigger_request+0x19e>
80018196:	58 28       	cp.w	r8,2
80018198:	c1 50       	breq	800181c2 <i2c_trigger_request+0x144>
8001819a:	58 08       	cp.w	r8,0
8001819c:	c6 51       	brne	80018266 <i2c_trigger_request+0x1e8>
		case I2C_READ:
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
8001819e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800181a2:	11 88       	ld.ub	r8,r8[0x0]
800181a4:	a1 78       	lsl	r8,0x1
						| (conf->read_count << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
800181a6:	10 99       	mov	r9,r8
//	twim_set_speed(twim, 100000, sysclk_get_pba_hz());
    
	switch (conf->direction)  {
		case I2C_READ:
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
						| (conf->read_count << AVR32_TWIM_CMDR_NBYTES_OFFSET)
800181a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800181ac:	70 58       	ld.w	r8,r8[0x14]
800181ae:	b1 68       	lsl	r8,0x10
						| (AVR32_TWIM_CMDR_VALID_MASK)
800181b0:	f3 e8 10 08 	or	r8,r9,r8
	// set up I2C speed and mode
//	twim_set_speed(twim, 100000, sysclk_get_pba_hz());
    
	switch (conf->direction)  {
		case I2C_READ:
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
800181b4:	10 99       	mov	r9,r8
800181b6:	e8 19 a0 00 	orl	r9,0xa000
800181ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800181be:	91 39       	st.w	r8[0xc],r9
						| (conf->read_count << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
			break;	
800181c0:	c5 38       	rjmp	80018266 <i2c_trigger_request+0x1e8>
		case I2C_WRITE1_THEN_READ:
			dbg_print( "wr");
800181c2:	fe cc 01 4a 	sub	r12,pc,330
800181c6:	f0 16 00 01 	mcall	r6[4]
			
			// set up next command register for the burst read transfer
			// set up command register to initiate the write transfer. The DMA will take care of the reading once this is done.
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
800181ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800181ce:	11 88       	ld.ub	r8,r8[0x0]
800181d0:	a1 78       	lsl	r8,0x1
800181d2:	ea 18 00 01 	orh	r8,0x1
800181d6:	e8 18 a0 00 	orl	r8,0xa000
800181da:	10 99       	mov	r9,r8
800181dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800181e0:	91 39       	st.w	r8[0xc],r9
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			

			twim->ncmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
800181e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800181e6:	11 88       	ld.ub	r8,r8[0x0]
800181e8:	a1 78       	lsl	r8,0x1
						| ((conf->read_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
800181ea:	10 99       	mov	r9,r8
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			

			twim->ncmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
						| ((conf->read_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
800181ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800181f0:	70 58       	ld.w	r8,r8[0x14]
800181f2:	b1 68       	lsl	r8,0x10
						| (AVR32_TWIM_CMDR_VALID_MASK)
800181f4:	f3 e8 10 08 	or	r8,r9,r8
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			

			twim->ncmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
800181f8:	10 99       	mov	r9,r8
800181fa:	e8 19 a0 00 	orl	r9,0xa000
800181fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018202:	91 49       	st.w	r8[0x10],r9
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
			// set up writing of one byte (usually a slave register index)
			//twim->cr = AVR32_TWIM_CR_MEN_MASK;
			twim->thr=conf->write_then_read_preamble;
80018204:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018208:	11 d8       	ld.ub	r8,r8[0x5]
8001820a:	10 99       	mov	r9,r8
8001820c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018210:	91 69       	st.w	r8[0x18],r9
			twim->cr = AVR32_TWIM_CR_MEN_MASK;
80018212:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018216:	30 19       	mov	r9,1
80018218:	91 09       	st.w	r8[0x0],r9
			
			break;	
8001821a:	c2 68       	rjmp	80018266 <i2c_trigger_request+0x1e8>
		case I2C_WRITE:
			dbg_print( "w");
8001821c:	fe cc 01 a0 	sub	r12,pc,416
80018220:	f0 16 00 01 	mcall	r6[4]
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
80018224:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018228:	11 88       	ld.ub	r8,r8[0x0]
8001822a:	a1 78       	lsl	r8,0x1
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
8001822c:	10 99       	mov	r9,r8
			
			break;	
		case I2C_WRITE:
			dbg_print( "w");
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8001822e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018232:	70 38       	ld.w	r8,r8[0xc]
80018234:	b1 68       	lsl	r8,0x10
						| (AVR32_TWIM_CMDR_VALID_MASK)
80018236:	f3 e8 10 08 	or	r8,r9,r8
			twim->cr = AVR32_TWIM_CR_MEN_MASK;
			
			break;	
		case I2C_WRITE:
			dbg_print( "w");
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
8001823a:	10 99       	mov	r9,r8
8001823c:	e8 19 a0 00 	orl	r9,0xa000
80018240:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018244:	91 39       	st.w	r8[0xc],r9
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			twim->ncmdr=(conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
80018246:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001824a:	11 88       	ld.ub	r8,r8[0x0]
8001824c:	a1 78       	lsl	r8,0x1
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						//| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
8001824e:	10 99       	mov	r9,r8
						| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			twim->ncmdr=(conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80018250:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018254:	70 38       	ld.w	r8,r8[0xc]
80018256:	b1 68       	lsl	r8,0x10
						//| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
80018258:	f3 e8 10 08 	or	r8,r9,r8
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			twim->ncmdr=(conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
8001825c:	10 99       	mov	r9,r8
8001825e:	ad b9       	sbr	r9,0xd
80018260:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018264:	91 49       	st.w	r8[0x10],r9
		break;	
	}		
	// start transfer
	

	current_schedule_slot[i2c_device]=schedule_slot;
80018266:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8001826a:	ec fa 02 98 	ld.w	r10,r6[664]
8001826e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80018272:	f4 09 0b 08 	st.b	r10[r9],r8
	schedule[i2c_device][schedule_slot].transfer_in_progress=1;
80018276:	ef 3b ff f4 	ld.ub	r11,r7[-12]
8001827a:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8001827e:	ec fa 01 38 	ld.w	r10,r6[312]
80018282:	12 98       	mov	r8,r9
80018284:	a3 68       	lsl	r8,0x2
80018286:	12 08       	add	r8,r9
80018288:	a3 78       	lsl	r8,0x3
8001828a:	e0 69 01 90 	mov	r9,400
8001828e:	f6 09 02 49 	mul	r9,r11,r9
80018292:	12 08       	add	r8,r9
80018294:	f4 08 00 08 	add	r8,r10,r8
80018298:	f0 c9 ff e0 	sub	r9,r8,-32
8001829c:	30 18       	mov	r8,1
8001829e:	b2 a8       	st.b	r9[0x2],r8
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
800182a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800182a4:	30 19       	mov	r9,1
800182a6:	91 09       	st.w	r8[0x0],r9
	pdca_enable(TWI0_DMA_CH);
800182a8:	30 2c       	mov	r12,2
800182aa:	f0 16 00 96 	mcall	r6[600]
	return 0;
800182ae:	30 08       	mov	r8,0
}
800182b0:	10 9c       	mov	r12,r8
800182b2:	2f cd       	sub	sp,-16
800182b4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800182b8:	80 01       	ld.sh	r1,r0[0x0]
800182ba:	7f 0e       	ld.w	lr,pc[0x40]

800182bc <i2c_pause_request>:

char i2c_pause_request(unsigned char i2c_device, unsigned char schedule_slot){
800182bc:	eb cd 40 80 	pushm	r7,lr
800182c0:	1a 97       	mov	r7,sp
800182c2:	20 2d       	sub	sp,8
800182c4:	18 99       	mov	r9,r12
800182c6:	16 98       	mov	r8,r11
800182c8:	ef 69 ff fc 	st.b	r7[-4],r9
800182cc:	ef 68 ff f8 	st.b	r7[-8],r8
	// pause scheduler
	// if this request currently active, wait for current transfer to finish
	// deactivate request
	// resume scheduler
}
800182d0:	2f ed       	sub	sp,-8
800182d2:	e3 cd 80 80 	ldm	sp++,r7,pc

800182d6 <i2c_enable_request>:

char i2c_enable_request(unsigned char i2c_device, unsigned char schedule_slot){
800182d6:	eb cd 40 80 	pushm	r7,lr
800182da:	1a 97       	mov	r7,sp
800182dc:	20 2d       	sub	sp,8
800182de:	18 99       	mov	r9,r12
800182e0:	16 98       	mov	r8,r11
800182e2:	ef 69 ff fc 	st.b	r7[-4],r9
800182e6:	ef 68 ff f8 	st.b	r7[-8],r8
	return 0;
800182ea:	30 08       	mov	r8,0
}
800182ec:	10 9c       	mov	r12,r8
800182ee:	2f ed       	sub	sp,-8
800182f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800182f4 <i2c_remove_request>:

char i2c_remove_request(unsigned char i2c_device, unsigned char schedule_slot){
800182f4:	eb cd 40 80 	pushm	r7,lr
800182f8:	1a 97       	mov	r7,sp
800182fa:	20 2d       	sub	sp,8
800182fc:	18 99       	mov	r9,r12
800182fe:	16 98       	mov	r8,r11
80018300:	ef 69 ff fc 	st.b	r7[-4],r9
80018304:	ef 68 ff f8 	st.b	r7[-8],r8
	return 0;
80018308:	30 08       	mov	r8,0
}
8001830a:	10 9c       	mov	r12,r8
8001830c:	2f ed       	sub	sp,-8
8001830e:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80018314 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80018314:	eb cd 40 c0 	pushm	r6-r7,lr
80018318:	1a 97       	mov	r7,sp
8001831a:	20 6d       	sub	sp,24
8001831c:	49 e6       	lddpc	r6,80018394 <interpolate+0x80>
8001831e:	1e 26       	rsub	r6,pc
80018320:	ef 4c ff f8 	st.w	r7[-8],r12
80018324:	ef 4b ff f4 	st.w	r7[-12],r11
80018328:	ef 4a ff f0 	st.w	r7[-16],r10
8001832c:	ef 49 ff ec 	st.w	r7[-20],r9
80018330:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80018334:	ee f9 ff f4 	ld.w	r9,r7[-12]
80018338:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001833c:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80018340:	c0 41       	brne	80018348 <interpolate+0x34>
	{
		return y1;
80018342:	ee f8 ff ec 	ld.w	r8,r7[-20]
80018346:	c2 38       	rjmp	8001838c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80018348:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001834c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80018350:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80018354:	ee fa ff f8 	ld.w	r10,r7[-8]
80018358:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001835c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80018360:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80018364:	ee fa ff f0 	ld.w	r10,r7[-16]
80018368:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001836c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80018370:	12 9b       	mov	r11,r9
80018372:	10 9c       	mov	r12,r8
80018374:	f0 16 00 08 	mcall	r6[32]
80018378:	18 98       	mov	r8,r12
8001837a:	10 99       	mov	r9,r8
8001837c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80018380:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80018384:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80018388:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8001838c:	10 9c       	mov	r12,r8
8001838e:	2f ad       	sub	sp,-24
80018390:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018394:	80 01       	ld.sh	r1,r0[0x0]
80018396:	81 a2       	st.w	r0[0x28],r2

80018398 <init_itg3200>:
} gyro_config;

gyro_config default_configuration;
uint8_t read_preamble=SENSOR_REG_ADDRESS;

void init_itg3200(void) {
80018398:	eb cd 40 c0 	pushm	r6-r7,lr
8001839c:	1a 97       	mov	r7,sp
8001839e:	4b c6       	lddpc	r6,8001848c <init_itg3200+0xf4>
800183a0:	1e 26       	rsub	r6,pc
	default_configuration.conf_start_reg_address=CONFIG_REG_ADDRESS;
800183a2:	ec f9 01 40 	ld.w	r9,r6[320]
800183a6:	31 58       	mov	r8,21
800183a8:	b2 88       	st.b	r9[0x0],r8

	default_configuration.sample_div=4; //output frequency after filtering: 1khz/8khz /(sample_div +1)
800183aa:	ec f9 01 40 	ld.w	r9,r6[320]
800183ae:	30 48       	mov	r8,4
800183b0:	b2 98       	st.b	r9[0x1],r8
	default_configuration.DLPF=DLPF_42HZ;
800183b2:	ec f9 01 40 	ld.w	r9,r6[320]
800183b6:	30 38       	mov	r8,3
800183b8:	b2 a8       	st.b	r9[0x2],r8
	default_configuration.interrupts=0;
800183ba:	ec f9 01 40 	ld.w	r9,r6[320]
800183be:	30 08       	mov	r8,0
800183c0:	b2 b8       	st.b	r9[0x3],r8

	gyro_event.callback=0;
800183c2:	ec f8 00 7c 	ld.w	r8,r6[124]
800183c6:	30 09       	mov	r9,0
800183c8:	91 c9       	st.w	r8[0x30],r9
	gyro_event.repetition_rate_ms=5;
800183ca:	ec f8 00 7c 	ld.w	r8,r6[124]
800183ce:	30 59       	mov	r9,5
800183d0:	91 a9       	st.w	r8[0x28],r9
	gyro_event.trigger_next_event=-1;
800183d2:	ec f9 00 7c 	ld.w	r9,r6[124]
800183d6:	3f f8       	mov	r8,-1
800183d8:	f3 68 00 2c 	st.b	r9[44],r8

	gyro_event.config.slave_address=ITG3200_SLAVE_ADDRESS;
800183dc:	ec f9 00 7c 	ld.w	r9,r6[124]
800183e0:	36 88       	mov	r8,104
800183e2:	b2 88       	st.b	r9[0x0],r8
	gyro_event.config.direction=I2C_WRITE;
800183e4:	ec f9 00 7c 	ld.w	r9,r6[124]
800183e8:	30 18       	mov	r8,1
800183ea:	f3 68 00 08 	st.b	r9[8],r8
	gyro_event.config.read_data=&gyro_outputs;
800183ee:	ec f9 02 20 	ld.w	r9,r6[544]
800183f2:	ec f8 00 7c 	ld.w	r8,r6[124]
800183f6:	91 59       	st.w	r8[0x14],r9
	gyro_event.config.read_count=8;
800183f8:	ec f8 00 7c 	ld.w	r8,r6[124]
800183fc:	30 89       	mov	r9,8
800183fe:	91 69       	st.w	r8[0x18],r9
	gyro_event.config.write_data=&default_configuration;
80018400:	ec f8 00 7c 	ld.w	r8,r6[124]
80018404:	ec f9 01 40 	ld.w	r9,r6[320]
80018408:	91 39       	st.w	r8[0xc],r9
	gyro_event.config.write_count=4;
8001840a:	ec f8 00 7c 	ld.w	r8,r6[124]
8001840e:	30 49       	mov	r9,4
80018410:	91 49       	st.w	r8[0x10],r9
	gyro_event.config.i2c_speed=100000;
80018412:	ec f8 00 7c 	ld.w	r8,r6[124]
80018416:	e0 79 86 a0 	mov	r9,100000
8001841a:	91 19       	st.w	r8[0x4],r9
	
	i2c_add_request(0, &gyro_event);
8001841c:	ec fb 00 7c 	ld.w	r11,r6[124]
80018420:	30 0c       	mov	r12,0
80018422:	f0 16 01 18 	mcall	r6[1120]
	i2c_trigger_request(0, gyro_event.schedule_slot);
80018426:	ec f8 00 7c 	ld.w	r8,r6[124]
8001842a:	f1 38 00 24 	ld.ub	r8,r8[36]
8001842e:	10 9b       	mov	r11,r8
80018430:	30 0c       	mov	r12,0
80018432:	f0 16 00 63 	mcall	r6[396]
	
	
	gyro_event.config.direction=I2C_WRITE1_THEN_READ;
80018436:	ec f9 00 7c 	ld.w	r9,r6[124]
8001843a:	30 28       	mov	r8,2
8001843c:	f3 68 00 08 	st.b	r9[8],r8
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
80018440:	ec f9 00 7c 	ld.w	r9,r6[124]
80018444:	31 b8       	mov	r8,27
80018446:	f3 68 00 09 	st.b	r9[9],r8
	gyro_event.config.write_data=&read_preamble;
8001844a:	ec f8 00 7c 	ld.w	r8,r6[124]
8001844e:	ec f9 07 d0 	ld.w	r9,r6[2000]
80018452:	91 39       	st.w	r8[0xc],r9
	gyro_event.config.write_count=1;
80018454:	ec f8 00 7c 	ld.w	r8,r6[124]
80018458:	30 19       	mov	r9,1
8001845a:	91 49       	st.w	r8[0x10],r9
	
	gyro_event.config.read_data=&gyro_outputs;
8001845c:	ec f9 02 20 	ld.w	r9,r6[544]
80018460:	ec f8 00 7c 	ld.w	r8,r6[124]
80018464:	91 59       	st.w	r8[0x14],r9
	gyro_event.config.read_count=8;
80018466:	ec f8 00 7c 	ld.w	r8,r6[124]
8001846a:	30 89       	mov	r9,8
8001846c:	91 69       	st.w	r8[0x18],r9
	i2c_change_request(0, &gyro_event);
8001846e:	ec fb 00 7c 	ld.w	r11,r6[124]
80018472:	30 0c       	mov	r12,0
80018474:	f0 16 01 19 	mcall	r6[1124]
	i2c_trigger_request(0, gyro_event.schedule_slot);
80018478:	ec f8 00 7c 	ld.w	r8,r6[124]
8001847c:	f1 38 00 24 	ld.ub	r8,r8[36]
80018480:	10 9b       	mov	r11,r8
80018482:	30 0c       	mov	r12,0
80018484:	f0 16 00 63 	mcall	r6[396]
	/**/
}
80018488:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001848c:	80 01       	ld.sh	r1,r0[0x0]
8001848e:	82 24       	ld.sh	r4,r1[0x4]

80018490 <reconfigure_gyro>:

void reconfigure_gyro(void) {
80018490:	eb cd 40 c0 	pushm	r6-r7,lr
80018494:	1a 97       	mov	r7,sp
80018496:	48 76       	lddpc	r6,800184b0 <reconfigure_gyro+0x20>
80018498:	1e 26       	rsub	r6,pc
	i2c_trigger_request(0, gyro_event.schedule_slot);
8001849a:	ec f8 00 7c 	ld.w	r8,r6[124]
8001849e:	f1 38 00 24 	ld.ub	r8,r8[36]
800184a2:	10 9b       	mov	r11,r8
800184a4:	30 0c       	mov	r12,0
800184a6:	f0 16 00 63 	mcall	r6[396]
}
800184aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800184ae:	00 00       	add	r0,r0
800184b0:	80 01       	ld.sh	r1,r0[0x0]
800184b2:	83 1c       	st.w	r1[0x4],r12

800184b4 <init_itg3200_slow>:

void init_itg3200_slow(void) {
800184b4:	eb cd 40 c0 	pushm	r6-r7,lr
800184b8:	1a 97       	mov	r7,sp
800184ba:	48 a6       	lddpc	r6,800184e0 <init_itg3200_slow+0x2c>
800184bc:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = ITG3200_SLAVE_ADDRESS, 
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM0, &twi_opt);
800184be:	ec fb 08 e8 	ld.w	r11,r6[2280]
800184c2:	fe 7c 38 00 	mov	r12,-51200
800184c6:	f0 16 00 75 	mcall	r6[468]
	twim_write(&AVR32_TWIM0, (uint8_t*)&default_configuration, 4, ITG3200_SLAVE_ADDRESS, false);
800184ca:	30 08       	mov	r8,0
800184cc:	36 89       	mov	r9,104
800184ce:	30 4a       	mov	r10,4
800184d0:	ec fb 01 40 	ld.w	r11,r6[320]
800184d4:	fe 7c 38 00 	mov	r12,-51200
800184d8:	f0 16 00 36 	mcall	r6[216]
}
800184dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800184e0:	80 01       	ld.sh	r1,r0[0x0]
800184e2:	83 40       	st.w	r1[0x10],r0

800184e4 <get_gyro_data>:

gyro_data* get_gyro_data(void) {
800184e4:	eb cd 40 c0 	pushm	r6-r7,lr
800184e8:	1a 97       	mov	r7,sp
800184ea:	48 86       	lddpc	r6,80018508 <get_gyro_data+0x24>
800184ec:	1e 26       	rsub	r6,pc
	i2c_trigger_request(0, gyro_event.schedule_slot);
800184ee:	ec f8 00 7c 	ld.w	r8,r6[124]
800184f2:	f1 38 00 24 	ld.ub	r8,r8[36]
800184f6:	10 9b       	mov	r11,r8
800184f8:	30 0c       	mov	r12,0
800184fa:	f0 16 00 63 	mcall	r6[396]
	return &gyro_outputs;
800184fe:	ec f8 02 20 	ld.w	r8,r6[544]
}
80018502:	10 9c       	mov	r12,r8
80018504:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018508:	80 01       	ld.sh	r1,r0[0x0]
8001850a:	83 70       	st.w	r1[0x1c],r0

8001850c <get_gyro_data_slow>:

gyro_data* get_gyro_data_slow(void) {
8001850c:	eb cd 40 c0 	pushm	r6-r7,lr
80018510:	1a 97       	mov	r7,sp
80018512:	49 16       	lddpc	r6,80018554 <get_gyro_data_slow+0x48>
80018514:	1e 26       	rsub	r6,pc
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
80018516:	ec f9 00 7c 	ld.w	r9,r6[124]
8001851a:	31 b8       	mov	r8,27
8001851c:	f3 68 00 09 	st.b	r9[9],r8
	twim_write(&AVR32_TWIM0, (uint8_t*) &gyro_event.config.write_then_read_preamble, 1, ITG3200_SLAVE_ADDRESS, false);
80018520:	ec f8 00 7c 	ld.w	r8,r6[124]
80018524:	f0 cb ff f7 	sub	r11,r8,-9
80018528:	30 08       	mov	r8,0
8001852a:	36 89       	mov	r9,104
8001852c:	30 1a       	mov	r10,1
8001852e:	fe 7c 38 00 	mov	r12,-51200
80018532:	f0 16 00 36 	mcall	r6[216]
	twim_read(&AVR32_TWIM0, (uint8_t*)&gyro_outputs, 8, ITG3200_SLAVE_ADDRESS, false);
80018536:	ec fb 02 20 	ld.w	r11,r6[544]
8001853a:	30 08       	mov	r8,0
8001853c:	36 89       	mov	r9,104
8001853e:	30 8a       	mov	r10,8
80018540:	fe 7c 38 00 	mov	r12,-51200
80018544:	f0 16 00 62 	mcall	r6[392]
	
	
	return &gyro_outputs;
80018548:	ec f8 02 20 	ld.w	r8,r6[544]
8001854c:	10 9c       	mov	r12,r8
8001854e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018552:	00 00       	add	r0,r0
80018554:	80 01       	ld.sh	r1,r0[0x0]
80018556:	83 98       	st.w	r1[0x24],r8

80018558 <LED_Read_Display>:
//! Saved state of all LEDs.
static volatile U32 LED_State = (1 << LED_COUNT) - 1;


U32 LED_Read_Display(void)
{
80018558:	eb cd 40 c0 	pushm	r6-r7,lr
8001855c:	1a 97       	mov	r7,sp
8001855e:	48 56       	lddpc	r6,80018570 <LED_Read_Display+0x18>
80018560:	1e 26       	rsub	r6,pc
  return LED_State;
80018562:	ec f8 00 f8 	ld.w	r8,r6[248]
80018566:	70 08       	ld.w	r8,r8[0x0]
}
80018568:	10 9c       	mov	r12,r8
8001856a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001856e:	00 00       	add	r0,r0
80018570:	80 01       	ld.sh	r1,r0[0x0]
80018572:	83 e4       	st.w	r1[0x38],r4

80018574 <LED_Display>:


void LED_Display(U32 leds)
{
80018574:	eb cd 40 c0 	pushm	r6-r7,lr
80018578:	1a 97       	mov	r7,sp
8001857a:	20 3d       	sub	sp,12
8001857c:	4a 96       	lddpc	r6,80018620 <LED_Display+0xac>
8001857e:	1e 26       	rsub	r6,pc
80018580:	ef 4c ff f4 	st.w	r7[-12],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor;
  volatile avr32_gpio_port_t *led_gpio_port;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80018584:	ee f8 ff f4 	ld.w	r8,r7[-12]
80018588:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8001858c:	ef 48 ff f4 	st.w	r7[-12],r8

  // Update the saved state of all LEDs with the requested changes.
  LED_State = leds;
80018590:	ec f8 00 f8 	ld.w	r8,r6[248]
80018594:	ee f9 ff f4 	ld.w	r9,r7[-12]
80018598:	91 09       	st.w	r8[0x0],r9

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
8001859a:	ec f8 01 c4 	ld.w	r8,r6[452]
8001859e:	ef 48 ff f8 	st.w	r7[-8],r8
800185a2:	c3 58       	rjmp	8001860c <LED_Display+0x98>
       led_descriptor < LED_DESCRIPTOR + LED_COUNT;
       led_descriptor++)
  {
    // Set the LED to the requested state.
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
800185a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800185a8:	70 08       	ld.w	r8,r8[0x0]
800185aa:	a9 78       	lsl	r8,0x9
800185ac:	e0 28 e0 00 	sub	r8,57344
800185b0:	ef 48 ff fc 	st.w	r7[-4],r8
    if (leds & 1)
800185b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800185b8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800185bc:	5c 58       	castu.b	r8
800185be:	c0 90       	breq	800185d0 <LED_Display+0x5c>
    {
      led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
800185c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800185c4:	70 19       	ld.w	r9,r8[0x4]
800185c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800185ca:	f1 49 00 58 	st.w	r8[88],r9
800185ce:	c0 88       	rjmp	800185de <LED_Display+0x6a>
    }
    else
    {
      led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
800185d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800185d4:	70 19       	ld.w	r9,r8[0x4]
800185d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800185da:	f1 49 00 54 	st.w	r8[84],r9
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
800185de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800185e2:	70 19       	ld.w	r9,r8[0x4]
800185e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800185e8:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
800185ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800185f0:	70 19       	ld.w	r9,r8[0x4]
800185f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800185f6:	91 19       	st.w	r8[0x4],r9
    leds >>= 1;
800185f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800185fc:	a1 98       	lsr	r8,0x1
800185fe:	ef 48 ff f4 	st.w	r7[-12],r8
  LED_State = leds;

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
       led_descriptor < LED_DESCRIPTOR + LED_COUNT;
       led_descriptor++)
80018602:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018606:	2f 08       	sub	r8,-16
80018608:	ef 48 ff f8 	st.w	r7[-8],r8

  // Update the saved state of all LEDs with the requested changes.
  LED_State = leds;

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
8001860c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018610:	ec f8 01 c4 	ld.w	r8,r6[452]
80018614:	2e 08       	sub	r8,-32
80018616:	10 39       	cp.w	r9,r8
80018618:	cc 63       	brcs	800185a4 <LED_Display+0x30>
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= 1;
  }
}
8001861a:	2f dd       	sub	sp,-12
8001861c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018620:	80 01       	ld.sh	r1,r0[0x0]
80018622:	84 02       	ld.sh	r2,r2[0x0]

80018624 <LED_Read_Display_Mask>:


U32 LED_Read_Display_Mask(U32 mask)
{
80018624:	eb cd 40 c0 	pushm	r6-r7,lr
80018628:	1a 97       	mov	r7,sp
8001862a:	20 1d       	sub	sp,4
8001862c:	48 86       	lddpc	r6,8001864c <LED_Read_Display_Mask+0x28>
8001862e:	1e 26       	rsub	r6,pc
80018630:	ef 4c ff fc 	st.w	r7[-4],r12
  return Rd_bits(LED_State, mask);
80018634:	ec f8 00 f8 	ld.w	r8,r6[248]
80018638:	70 09       	ld.w	r9,r8[0x0]
8001863a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001863e:	f3 e8 00 08 	and	r8,r9,r8
}
80018642:	10 9c       	mov	r12,r8
80018644:	2f fd       	sub	sp,-4
80018646:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001864a:	00 00       	add	r0,r0
8001864c:	80 01       	ld.sh	r1,r0[0x0]
8001864e:	84 b2       	ld.uh	r2,r2[0x6]

80018650 <LED_Display_Mask>:


void LED_Display_Mask(U32 mask, U32 leds)
{
80018650:	eb cd 40 c0 	pushm	r6-r7,lr
80018654:	1a 97       	mov	r7,sp
80018656:	20 5d       	sub	sp,20
80018658:	4b f6       	lddpc	r6,80018754 <LED_Display_Mask+0x104>
8001865a:	1e 26       	rsub	r6,pc
8001865c:	ef 4c ff f0 	st.w	r7[-16],r12
80018660:	ef 4b ff ec 	st.w	r7[-20],r11
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
80018664:	ec f8 01 c4 	ld.w	r8,r6[452]
80018668:	21 08       	sub	r8,16
8001866a:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  mask &= (1 << LED_COUNT) - 1;
8001866e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80018672:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80018676:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Wr_bits(LED_State, mask, leds);
8001867a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001867e:	f0 09 11 ff 	rsub	r9,r8,-1
80018682:	ec f8 00 f8 	ld.w	r8,r6[248]
80018686:	70 08       	ld.w	r8,r8[0x0]
80018688:	10 69       	and	r9,r8
8001868a:	ee fa ff ec 	ld.w	r10,r7[-20]
8001868e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80018692:	f5 e8 00 08 	and	r8,r10,r8
80018696:	10 49       	or	r9,r8
80018698:	ec f8 00 f8 	ld.w	r8,r6[248]
8001869c:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (mask)
8001869e:	c5 38       	rjmp	80018744 <LED_Display_Mask+0xf4>
  {
    // Select the next specified LED and set it to the requested state.
    led_shift = 1 + ctz(mask);
800186a0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800186a4:	5c 98       	brev	r8
800186a6:	f0 08 12 00 	clz	r8,r8
800186aa:	5c 58       	castu.b	r8
800186ac:	2f f8       	sub	r8,-1
800186ae:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
800186b2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800186b6:	a5 68       	lsl	r8,0x4
800186b8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800186bc:	f2 08 00 08 	add	r8,r9,r8
800186c0:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
800186c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800186c8:	70 08       	ld.w	r8,r8[0x0]
800186ca:	a9 78       	lsl	r8,0x9
800186cc:	e0 28 e0 00 	sub	r8,57344
800186d0:	ef 48 ff f8 	st.w	r7[-8],r8
    leds >>= led_shift - 1;
800186d4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800186d8:	20 18       	sub	r8,1
800186da:	ee f9 ff ec 	ld.w	r9,r7[-20]
800186de:	f2 08 0a 48 	lsr	r8,r9,r8
800186e2:	ef 48 ff ec 	st.w	r7[-20],r8
    if (leds & 1)
800186e6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800186ea:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800186ee:	5c 58       	castu.b	r8
800186f0:	c0 90       	breq	80018702 <LED_Display_Mask+0xb2>
    {
      led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
800186f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800186f6:	70 19       	ld.w	r9,r8[0x4]
800186f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800186fc:	f1 49 00 58 	st.w	r8[88],r9
80018700:	c0 88       	rjmp	80018710 <LED_Display_Mask+0xc0>
    }
    else
    {
      led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80018702:	ee f8 ff f4 	ld.w	r8,r7[-12]
80018706:	70 19       	ld.w	r9,r8[0x4]
80018708:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001870c:	f1 49 00 54 	st.w	r8[84],r9
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80018710:	ee f8 ff f4 	ld.w	r8,r7[-12]
80018714:	70 19       	ld.w	r9,r8[0x4]
80018716:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001871a:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8001871e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80018722:	70 19       	ld.w	r9,r8[0x4]
80018724:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018728:	91 19       	st.w	r8[0x4],r9
    leds >>= 1;
8001872a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001872e:	a1 98       	lsr	r8,0x1
80018730:	ef 48 ff ec 	st.w	r7[-20],r8
    mask >>= led_shift;
80018734:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80018738:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001873c:	f2 08 0a 48 	lsr	r8,r9,r8
80018740:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Wr_bits(LED_State, mask, leds);

  // While there are specified LEDs left to manage...
  while (mask)
80018744:	ee f8 ff f0 	ld.w	r8,r7[-16]
80018748:	58 08       	cp.w	r8,0
8001874a:	ca b1       	brne	800186a0 <LED_Display_Mask+0x50>
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= 1;
    mask >>= led_shift;
  }
}
8001874c:	2f bd       	sub	sp,-20
8001874e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018752:	00 00       	add	r0,r0
80018754:	80 01       	ld.sh	r1,r0[0x0]
80018756:	84 de       	ld.uh	lr,r2[0xa]

80018758 <LED_Test>:


bool LED_Test(U32 leds)
{
80018758:	eb cd 40 c0 	pushm	r6-r7,lr
8001875c:	1a 97       	mov	r7,sp
8001875e:	20 1d       	sub	sp,4
80018760:	48 96       	lddpc	r6,80018784 <LED_Test+0x2c>
80018762:	1e 26       	rsub	r6,pc
80018764:	ef 4c ff fc 	st.w	r7[-4],r12
  return Tst_bits(LED_State, leds);
80018768:	ec f8 00 f8 	ld.w	r8,r6[248]
8001876c:	70 09       	ld.w	r9,r8[0x0]
8001876e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018772:	f3 e8 00 08 	and	r8,r9,r8
80018776:	5f 18       	srne	r8
80018778:	5c 58       	castu.b	r8
}
8001877a:	10 9c       	mov	r12,r8
8001877c:	2f fd       	sub	sp,-4
8001877e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018782:	00 00       	add	r0,r0
80018784:	80 01       	ld.sh	r1,r0[0x0]
80018786:	85 e6       	st.w	r2[0x38],r6

80018788 <LED_Off>:


void LED_Off(U32 leds)
{
80018788:	eb cd 40 c0 	pushm	r6-r7,lr
8001878c:	1a 97       	mov	r7,sp
8001878e:	20 4d       	sub	sp,16
80018790:	4a b6       	lddpc	r6,8001883c <LED_Off+0xb4>
80018792:	1e 26       	rsub	r6,pc
80018794:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
80018798:	ec f8 01 c4 	ld.w	r8,r6[452]
8001879c:	21 08       	sub	r8,16
8001879e:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
800187a2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800187a6:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800187aa:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  //Clr_bits(LED_State, leds);
  Set_bits(LED_State, leds);
800187ae:	ec f8 00 f8 	ld.w	r8,r6[248]
800187b2:	70 09       	ld.w	r9,r8[0x0]
800187b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800187b8:	10 49       	or	r9,r8
800187ba:	ec f8 00 f8 	ld.w	r8,r6[248]
800187be:	91 09       	st.w	r8[0x0],r9
  // While there are specified LEDs left to manage...
  while (leds)
800187c0:	c3 78       	rjmp	8001882e <LED_Off+0xa6>
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
800187c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800187c6:	5c 98       	brev	r8
800187c8:	f0 08 12 00 	clz	r8,r8
800187cc:	5c 58       	castu.b	r8
800187ce:	2f f8       	sub	r8,-1
800187d0:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
800187d4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800187d8:	a5 68       	lsl	r8,0x4
800187da:	ee f9 ff f4 	ld.w	r9,r7[-12]
800187de:	f2 08 00 08 	add	r8,r9,r8
800187e2:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
800187e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800187ea:	70 08       	ld.w	r8,r8[0x0]
800187ec:	a9 78       	lsl	r8,0x9
800187ee:	e0 28 e0 00 	sub	r8,57344
800187f2:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
800187f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800187fa:	70 19       	ld.w	r9,r8[0x4]
800187fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018800:	f1 49 00 54 	st.w	r8[84],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80018804:	ee f8 ff f4 	ld.w	r8,r7[-12]
80018808:	70 19       	ld.w	r9,r8[0x4]
8001880a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001880e:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80018812:	ee f8 ff f4 	ld.w	r8,r7[-12]
80018816:	70 19       	ld.w	r9,r8[0x4]
80018818:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001881c:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
8001881e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80018822:	ee f9 ff f0 	ld.w	r9,r7[-16]
80018826:	f2 08 0a 48 	lsr	r8,r9,r8
8001882a:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  //Clr_bits(LED_State, leds);
  Set_bits(LED_State, leds);
  // While there are specified LEDs left to manage...
  while (leds)
8001882e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80018832:	58 08       	cp.w	r8,0
80018834:	cc 71       	brne	800187c2 <LED_Off+0x3a>
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
80018836:	2f cd       	sub	sp,-16
80018838:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001883c:	80 01       	ld.sh	r1,r0[0x0]
8001883e:	86 16       	ld.sh	r6,r3[0x2]

80018840 <LED_On>:


void LED_On(U32 leds)
{
80018840:	eb cd 40 c0 	pushm	r6-r7,lr
80018844:	1a 97       	mov	r7,sp
80018846:	20 4d       	sub	sp,16
80018848:	4a c6       	lddpc	r6,800188f8 <LED_On+0xb8>
8001884a:	1e 26       	rsub	r6,pc
8001884c:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
80018850:	ec f8 01 c4 	ld.w	r8,r6[452]
80018854:	21 08       	sub	r8,16
80018856:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
8001885a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001885e:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80018862:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  //Set_bits(LED_State, leds);
  Clr_bits(LED_State, leds);
80018866:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001886a:	f0 09 11 ff 	rsub	r9,r8,-1
8001886e:	ec f8 00 f8 	ld.w	r8,r6[248]
80018872:	70 08       	ld.w	r8,r8[0x0]
80018874:	10 69       	and	r9,r8
80018876:	ec f8 00 f8 	ld.w	r8,r6[248]
8001887a:	91 09       	st.w	r8[0x0],r9
  // While there are specified LEDs left to manage...
  while (leds)
8001887c:	c3 78       	rjmp	800188ea <LED_On+0xaa>
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
8001887e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80018882:	5c 98       	brev	r8
80018884:	f0 08 12 00 	clz	r8,r8
80018888:	5c 58       	castu.b	r8
8001888a:	2f f8       	sub	r8,-1
8001888c:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
80018890:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80018894:	a5 68       	lsl	r8,0x4
80018896:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001889a:	f2 08 00 08 	add	r8,r9,r8
8001889e:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
800188a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800188a6:	70 08       	ld.w	r8,r8[0x0]
800188a8:	a9 78       	lsl	r8,0x9
800188aa:	e0 28 e0 00 	sub	r8,57344
800188ae:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
800188b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800188b6:	70 19       	ld.w	r9,r8[0x4]
800188b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800188bc:	f1 49 00 58 	st.w	r8[88],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
800188c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800188c4:	70 19       	ld.w	r9,r8[0x4]
800188c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800188ca:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
800188ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
800188d2:	70 19       	ld.w	r9,r8[0x4]
800188d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800188d8:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
800188da:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800188de:	ee f9 ff f0 	ld.w	r9,r7[-16]
800188e2:	f2 08 0a 48 	lsr	r8,r9,r8
800188e6:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  //Set_bits(LED_State, leds);
  Clr_bits(LED_State, leds);
  // While there are specified LEDs left to manage...
  while (leds)
800188ea:	ee f8 ff f0 	ld.w	r8,r7[-16]
800188ee:	58 08       	cp.w	r8,0
800188f0:	cc 71       	brne	8001887e <LED_On+0x3e>
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
800188f2:	2f cd       	sub	sp,-16
800188f4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800188f8:	80 01       	ld.sh	r1,r0[0x0]
800188fa:	86 ce       	ld.uh	lr,r3[0x8]

800188fc <LED_Toggle>:


void LED_Toggle(U32 leds)
{
800188fc:	eb cd 40 c0 	pushm	r6-r7,lr
80018900:	1a 97       	mov	r7,sp
80018902:	20 4d       	sub	sp,16
80018904:	4a b6       	lddpc	r6,800189b0 <LED_Toggle+0xb4>
80018906:	1e 26       	rsub	r6,pc
80018908:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
8001890c:	ec f8 01 c4 	ld.w	r8,r6[452]
80018910:	21 08       	sub	r8,16
80018912:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80018916:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001891a:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8001891e:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);
80018922:	ec f8 00 f8 	ld.w	r8,r6[248]
80018926:	70 09       	ld.w	r9,r8[0x0]
80018928:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001892c:	10 59       	eor	r9,r8
8001892e:	ec f8 00 f8 	ld.w	r8,r6[248]
80018932:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80018934:	c3 78       	rjmp	800189a2 <LED_Toggle+0xa6>
  {
    // Select the next specified LED and toggle it.
    led_shift = 1 + ctz(leds);
80018936:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001893a:	5c 98       	brev	r8
8001893c:	f0 08 12 00 	clz	r8,r8
80018940:	5c 58       	castu.b	r8
80018942:	2f f8       	sub	r8,-1
80018944:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
80018948:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001894c:	a5 68       	lsl	r8,0x4
8001894e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80018952:	f2 08 00 08 	add	r8,r9,r8
80018956:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8001895a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001895e:	70 08       	ld.w	r8,r8[0x0]
80018960:	a9 78       	lsl	r8,0x9
80018962:	e0 28 e0 00 	sub	r8,57344
80018966:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrt  = led_descriptor->GPIO.PIN_MASK;
8001896a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001896e:	70 19       	ld.w	r9,r8[0x4]
80018970:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018974:	f1 49 00 5c 	st.w	r8[92],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80018978:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001897c:	70 19       	ld.w	r9,r8[0x4]
8001897e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018982:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80018986:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001898a:	70 19       	ld.w	r9,r8[0x4]
8001898c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018990:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
80018992:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80018996:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001899a:	f2 08 0a 48 	lsr	r8,r9,r8
8001899e:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
800189a2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800189a6:	58 08       	cp.w	r8,0
800189a8:	cc 71       	brne	80018936 <LED_Toggle+0x3a>
    led_gpio_port->ovrt  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
800189aa:	2f cd       	sub	sp,-16
800189ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800189b0:	80 01       	ld.sh	r1,r0[0x0]
800189b2:	87 8a       	st.w	r3[0x20],r10

800189b4 <LED_Read_Display_Field>:


U32 LED_Read_Display_Field(U32 field)
{
800189b4:	eb cd 40 c0 	pushm	r6-r7,lr
800189b8:	1a 97       	mov	r7,sp
800189ba:	20 1d       	sub	sp,4
800189bc:	48 b6       	lddpc	r6,800189e8 <LED_Read_Display_Field+0x34>
800189be:	1e 26       	rsub	r6,pc
800189c0:	ef 4c ff fc 	st.w	r7[-4],r12
  return Rd_bitfield(LED_State, field);
800189c4:	ec f8 00 f8 	ld.w	r8,r6[248]
800189c8:	70 09       	ld.w	r9,r8[0x0]
800189ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800189ce:	10 69       	and	r9,r8
800189d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800189d4:	5c 98       	brev	r8
800189d6:	f0 08 12 00 	clz	r8,r8
800189da:	f2 08 0a 48 	lsr	r8,r9,r8
}
800189de:	10 9c       	mov	r12,r8
800189e0:	2f fd       	sub	sp,-4
800189e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800189e6:	00 00       	add	r0,r0
800189e8:	80 01       	ld.sh	r1,r0[0x0]
800189ea:	88 42       	ld.sh	r2,r4[0x8]

800189ec <LED_Display_Field>:


void LED_Display_Field(U32 field, U32 leds)
{
800189ec:	eb cd 40 c0 	pushm	r6-r7,lr
800189f0:	1a 97       	mov	r7,sp
800189f2:	20 2d       	sub	sp,8
800189f4:	48 c6       	lddpc	r6,80018a24 <LED_Display_Field+0x38>
800189f6:	1e 26       	rsub	r6,pc
800189f8:	ef 4c ff fc 	st.w	r7[-4],r12
800189fc:	ef 4b ff f8 	st.w	r7[-8],r11
  // Move the bit-field to the appropriate position for the bit-mask.
  LED_Display_Mask(field, leds << ctz(field));
80018a00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018a04:	5c 98       	brev	r8
80018a06:	f0 08 12 00 	clz	r8,r8
80018a0a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018a0e:	f2 08 09 48 	lsl	r8,r9,r8
80018a12:	10 9b       	mov	r11,r8
80018a14:	ee fc ff fc 	ld.w	r12,r7[-4]
80018a18:	f0 16 01 8c 	mcall	r6[1584]
}
80018a1c:	2f ed       	sub	sp,-8
80018a1e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018a22:	00 00       	add	r0,r0
80018a24:	80 01       	ld.sh	r1,r0[0x0]
80018a26:	88 7a       	ld.sh	r10,r4[0xe]

80018a28 <LED_Get_Intensity>:


U8 LED_Get_Intensity(U32 led)
{
80018a28:	eb cd 40 80 	pushm	r7,lr
80018a2c:	1a 97       	mov	r7,sp
80018a2e:	20 1d       	sub	sp,4
80018a30:	ef 4c ff fc 	st.w	r7[-4],r12
 // always return 0, UC3C don't have PWM connected to LED
 return 0;
80018a34:	30 08       	mov	r8,0
}
80018a36:	10 9c       	mov	r12,r8
80018a38:	2f fd       	sub	sp,-4
80018a3a:	e3 cd 80 80 	ldm	sp++,r7,pc

80018a3e <LED_Set_Intensity>:


void LED_Set_Intensity(U32 leds, U8 intensity)
{
80018a3e:	eb cd 40 80 	pushm	r7,lr
80018a42:	1a 97       	mov	r7,sp
80018a44:	20 2d       	sub	sp,8
80018a46:	ef 4c ff fc 	st.w	r7[-4],r12
80018a4a:	16 98       	mov	r8,r11
80018a4c:	ef 68 ff f8 	st.b	r7[-8],r8
 // always return, UC3C don't have PWM to modulate led intensity.
 return;
}
80018a50:	2f ed       	sub	sp,-8
80018a52:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80018a58 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80018a58:	eb cd 40 c0 	pushm	r6-r7,lr
80018a5c:	1a 97       	mov	r7,sp
80018a5e:	20 6d       	sub	sp,24
80018a60:	49 e6       	lddpc	r6,80018ad8 <interpolate+0x80>
80018a62:	1e 26       	rsub	r6,pc
80018a64:	ef 4c ff f8 	st.w	r7[-8],r12
80018a68:	ef 4b ff f4 	st.w	r7[-12],r11
80018a6c:	ef 4a ff f0 	st.w	r7[-16],r10
80018a70:	ef 49 ff ec 	st.w	r7[-20],r9
80018a74:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80018a78:	ee f9 ff f4 	ld.w	r9,r7[-12]
80018a7c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80018a80:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80018a84:	c0 41       	brne	80018a8c <interpolate+0x34>
	{
		return y1;
80018a86:	ee f8 ff ec 	ld.w	r8,r7[-20]
80018a8a:	c2 38       	rjmp	80018ad0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80018a8c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80018a90:	ee f8 ff ec 	ld.w	r8,r7[-20]
80018a94:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80018a98:	ee fa ff f8 	ld.w	r10,r7[-8]
80018a9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80018aa0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80018aa4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80018aa8:	ee fa ff f0 	ld.w	r10,r7[-16]
80018aac:	ee f9 ff f4 	ld.w	r9,r7[-12]
80018ab0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80018ab4:	12 9b       	mov	r11,r9
80018ab6:	10 9c       	mov	r12,r8
80018ab8:	f0 16 00 08 	mcall	r6[32]
80018abc:	18 98       	mov	r8,r12
80018abe:	10 99       	mov	r9,r8
80018ac0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80018ac4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80018ac8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80018acc:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80018ad0:	10 9c       	mov	r12,r8
80018ad2:	2f ad       	sub	sp,-24
80018ad4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018ad8:	80 01       	ld.sh	r1,r0[0x0]
80018ada:	88 e6       	ld.uh	r6,r4[0xc]

80018adc <init_radar_modules>:
#include "i2c_driver_int.h"
#include "print_util.h"

radar_target main_target;

void init_radar_modules() {
80018adc:	eb cd 40 c0 	pushm	r6-r7,lr
80018ae0:	1a 97       	mov	r7,sp
80018ae2:	48 66       	lddpc	r6,80018af8 <init_radar_modules+0x1c>
80018ae4:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = 1,
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM1, &twi_opt);
80018ae6:	ec fb 08 e4 	ld.w	r11,r6[2276]
80018aea:	fe 7c 3c 00 	mov	r12,-50176
80018aee:	f0 16 00 75 	mcall	r6[468]
}
80018af2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018af6:	00 00       	add	r0,r0
80018af8:	80 01       	ld.sh	r1,r0[0x0]
80018afa:	89 68       	st.w	r4[0x18],r8
80018afc:	0a 00       	add	r0,r5

80018afe <read_radar>:


void read_radar() {
80018afe:	eb cd 40 c0 	pushm	r6-r7,lr
80018b02:	1a 97       	mov	r7,sp
80018b04:	20 1d       	sub	sp,4
80018b06:	49 f6       	lddpc	r6,80018b80 <read_radar+0x82>
80018b08:	1e 26       	rsub	r6,pc
	uint8_t output = 0;
80018b0a:	30 08       	mov	r8,0
80018b0c:	ef 68 ff ff 	st.b	r7[-1],r8
//	uint8_t input [8];
	twim_write(&AVR32_TWIM1, (uint8_t*) &output, 1, 1, false);
80018b10:	ee cb 00 01 	sub	r11,r7,1
80018b14:	30 08       	mov	r8,0
80018b16:	30 19       	mov	r9,1
80018b18:	30 1a       	mov	r10,1
80018b1a:	fe 7c 3c 00 	mov	r12,-50176
80018b1e:	f0 16 00 36 	mcall	r6[216]
	twim_read(&AVR32_TWIM1, (uint8_t*)&main_target, sizeof(main_target), 1, false);
80018b22:	ec fb 02 84 	ld.w	r11,r6[644]
80018b26:	30 08       	mov	r8,0
80018b28:	30 19       	mov	r9,1
80018b2a:	30 ca       	mov	r10,12
80018b2c:	fe 7c 3c 00 	mov	r12,-50176
80018b30:	f0 16 00 62 	mcall	r6[392]
	
	dbg_print_num(main_target.velocity*100.0,10);
80018b34:	ec f8 02 84 	ld.w	r8,r6[644]
80018b38:	70 08       	ld.w	r8,r8[0x0]
80018b3a:	10 9c       	mov	r12,r8
80018b3c:	f0 16 00 02 	mcall	r6[8]
80018b40:	30 08       	mov	r8,0
80018b42:	fc 19 40 59 	movh	r9,0x4059
80018b46:	f0 16 00 03 	mcall	r6[12]
80018b4a:	14 98       	mov	r8,r10
80018b4c:	16 99       	mov	r9,r11
80018b4e:	10 9a       	mov	r10,r8
80018b50:	12 9b       	mov	r11,r9
80018b52:	f0 16 00 14 	mcall	r6[80]
80018b56:	18 98       	mov	r8,r12
80018b58:	30 ab       	mov	r11,10
80018b5a:	10 9c       	mov	r12,r8
80018b5c:	f0 16 00 04 	mcall	r6[16]
	dbg_print_num(main_target.amplitude,10);
80018b60:	ec f8 02 84 	ld.w	r8,r6[644]
80018b64:	70 18       	ld.w	r8,r8[0x4]
80018b66:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80018b6a:	30 ab       	mov	r11,10
80018b6c:	10 9c       	mov	r12,r8
80018b6e:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
80018b72:	fe cc 00 76 	sub	r12,pc,118
80018b76:	f0 16 00 01 	mcall	r6[4]
	
}
80018b7a:	2f fd       	sub	sp,-4
80018b7c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018b80:	80 01       	ld.sh	r1,r0[0x0]
80018b82:	89 8c       	st.w	r4[0x20],r12

80018b84 <get_radar_main_target>:

radar_target* get_radar_main_target() {
80018b84:	eb cd 40 c0 	pushm	r6-r7,lr
80018b88:	1a 97       	mov	r7,sp
80018b8a:	48 46       	lddpc	r6,80018b98 <get_radar_main_target+0x14>
80018b8c:	1e 26       	rsub	r6,pc
	return &main_target;
80018b8e:	ec f8 02 84 	ld.w	r8,r6[644]
	
}
80018b92:	10 9c       	mov	r12,r8
80018b94:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018b98:	80 01       	ld.sh	r1,r0[0x0]
80018b9a:	8a 10       	ld.sh	r0,r5[0x2]

80018b9c <init_Servos>:
#define SERVO_PERIOD (SERVO_TIMER_FREQ/SERVO_REPEAT_FREQ)
#define SERVO_CENTER_DUTY_TICKS 1500//(SERVO_CENTER_DUTY_MICROSEC*SERVO_TIMER_FREQ/1000000)



void init_Servos(void){
80018b9c:	eb cd 40 c0 	pushm	r6-r7,lr
80018ba0:	1a 97       	mov	r7,sp
80018ba2:	20 1d       	sub	sp,4
80018ba4:	4c b6       	lddpc	r6,80018cd0 <init_Servos+0x134>
80018ba6:	1e 26       	rsub	r6,pc
      int i;
	  // unlock registers
	  AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80018ba8:	fe 78 4c 00 	mov	r8,-46080
80018bac:	e0 69 4d 04 	mov	r9,19716
80018bb0:	ea 19 50 57 	orh	r9,0x5057
80018bb4:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG0_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
      AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80018bb8:	fe 78 4c 00 	mov	r8,-46080
80018bbc:	e0 69 4d 08 	mov	r9,19720
80018bc0:	ea 19 50 57 	orh	r9,0x5057
80018bc4:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG1_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
      AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80018bc8:	fe 78 4c 00 	mov	r8,-46080
80018bcc:	e0 69 4d 10 	mov	r9,19728
80018bd0:	ea 19 50 57 	orh	r9,0x5057
80018bd4:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG2_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
      AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80018bd8:	fe 78 4c 00 	mov	r8,-46080
80018bdc:	e0 69 4d 20 	mov	r9,19744
80018be0:	ea 19 50 57 	orh	r9,0x5057
80018be4:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG3_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
    // clock setup  
	AVR32_PWM.clk =
80018be8:	fe 78 4c 00 	mov	r8,-46080
80018bec:	e0 69 06 01 	mov	r9,1537
80018bf0:	ea 19 06 01 	orh	r9,0x601
80018bf4:	91 09       	st.w	r8[0x0],r9
    ( 6 <<AVR32_PWM_PREA_OFFSET) |  // /64
    ( 6 <<AVR32_PWM_PREB_OFFSET) |  // /64
    ( 0 <<AVR32_PWM_CLKSEL_OFFSET);

	// output override for low and high side
	AVR32_PWM.oov  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
80018bf6:	fe 78 4c 00 	mov	r8,-46080
80018bfa:	30 fa       	mov	r10,15
80018bfc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018c00:	f4 09 09 4a 	lsl	r10,r10,r9
80018c04:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018c08:	2f 09       	sub	r9,-16
80018c0a:	30 fb       	mov	r11,15
80018c0c:	f6 09 09 49 	lsl	r9,r11,r9
80018c10:	f5 e9 10 09 	or	r9,r10,r9
80018c14:	f1 49 00 44 	st.w	r8[68],r9
	// output selection clear: dead time generator (0)
	AVR32_PWM.osc  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
80018c18:	fe 78 4c 00 	mov	r8,-46080
80018c1c:	30 fa       	mov	r10,15
80018c1e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018c22:	f4 09 09 4a 	lsl	r10,r10,r9
80018c26:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018c2a:	2f 09       	sub	r9,-16
80018c2c:	30 fb       	mov	r11,15
80018c2e:	f6 09 09 49 	lsl	r9,r11,r9
80018c32:	f5 e9 10 09 	or	r9,r10,r9
80018c36:	f1 49 00 50 	st.w	r8[80],r9
	
	// set up channels: enable dead time insertion
	for (i=0; i<4; i++) {
80018c3a:	30 08       	mov	r8,0
80018c3c:	ef 48 ff fc 	st.w	r7[-4],r8
80018c40:	c3 78       	rjmp	80018cae <init_Servos+0x112>
		// enable dead time, set channel clock to CLKA
		AVR32_PWM.channel[i].cmr=AVR32_PWM_CMR0_DTE_MASK | 11;
80018c42:	fe 79 4c 00 	mov	r9,-46080
80018c46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018c4a:	2f 08       	sub	r8,-16
80018c4c:	a5 78       	lsl	r8,0x5
80018c4e:	f2 08 00 08 	add	r8,r9,r8
80018c52:	e0 79 00 0b 	mov	r9,65547
80018c56:	91 09       	st.w	r8[0x0],r9
		AVR32_PWM.channel[i].cprd=10000;
80018c58:	fe 79 4c 00 	mov	r9,-46080
80018c5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018c60:	a5 78       	lsl	r8,0x5
80018c62:	f2 08 00 08 	add	r8,r9,r8
80018c66:	f0 c8 fd f4 	sub	r8,r8,-524
80018c6a:	e0 69 27 10 	mov	r9,10000
80018c6e:	91 09       	st.w	r8[0x0],r9
		AVR32_PWM.channel[i].cdty=4000;
80018c70:	fe 79 4c 00 	mov	r9,-46080
80018c74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018c78:	a5 78       	lsl	r8,0x5
80018c7a:	f2 08 00 08 	add	r8,r9,r8
80018c7e:	f0 c8 fd fc 	sub	r8,r8,-516
80018c82:	e0 69 0f a0 	mov	r9,4000
80018c86:	91 09       	st.w	r8[0x0],r9
		AVR32_PWM.channel[i].dt= 1000<<16 | 1000;
80018c88:	fe 79 4c 00 	mov	r9,-46080
80018c8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018c90:	a5 78       	lsl	r8,0x5
80018c92:	f2 08 00 08 	add	r8,r9,r8
80018c96:	f0 c8 fd e8 	sub	r8,r8,-536
80018c9a:	e0 69 03 e8 	mov	r9,1000
80018c9e:	ea 19 03 e8 	orh	r9,0x3e8
80018ca2:	91 09       	st.w	r8[0x0],r9
	AVR32_PWM.oov  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
	// output selection clear: dead time generator (0)
	AVR32_PWM.osc  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
	
	// set up channels: enable dead time insertion
	for (i=0; i<4; i++) {
80018ca4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018ca8:	2f f8       	sub	r8,-1
80018caa:	ef 48 ff fc 	st.w	r7[-4],r8
80018cae:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018cb2:	58 38       	cp.w	r8,3
80018cb4:	fe 9a ff c7 	brle	80018c42 <init_Servos+0xa6>
    {AVR32_PWM_PWML_3_0_PIN, AVR32_PWM_PWML_3_0_FUNCTION},
    {AVR32_PWM_PWMH_1_0_PIN, AVR32_PWM_PWMH_1_0_FUNCTION},
    {AVR32_PWM_PWMH_2_0_PIN, AVR32_PWM_PWMH_2_0_FUNCTION},
    {AVR32_PWM_PWMH_3_0_PIN, AVR32_PWM_PWMH_3_0_FUNCTION}
    };			
	gpio_enable_module(PWM_GPIO_MAP, sizeof(PWM_GPIO_MAP) / sizeof(PWM_GPIO_MAP[0]));
80018cb8:	30 6b       	mov	r11,6
80018cba:	ec fc 08 e0 	ld.w	r12,r6[2272]
80018cbe:	f0 16 00 98 	mcall	r6[608]
	// enable
	AVR32_PWM.ena=0b1111;
80018cc2:	fe 78 4c 00 	mov	r8,-46080
80018cc6:	30 f9       	mov	r9,15
80018cc8:	91 19       	st.w	r8[0x4],r9
	
	
}
80018cca:	2f fd       	sub	sp,-4
80018ccc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018cd0:	80 01       	ld.sh	r1,r0[0x0]
80018cd2:	8a 2a       	ld.sh	r10,r5[0x4]

80018cd4 <set_servo>:

void set_servo(int channel, int val_a, int val_b){
80018cd4:	eb cd 40 80 	pushm	r7,lr
80018cd8:	1a 97       	mov	r7,sp
80018cda:	20 6d       	sub	sp,24
80018cdc:	ef 4c ff f0 	st.w	r7[-16],r12
80018ce0:	ef 4b ff ec 	st.w	r7[-20],r11
80018ce4:	ef 4a ff e8 	st.w	r7[-24],r10
	int duty_a=val_a+SERVO_CENTER_DUTY_TICKS;
80018ce8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80018cec:	f0 c8 fa 24 	sub	r8,r8,-1500
80018cf0:	ef 48 ff f4 	st.w	r7[-12],r8
	int duty_b=val_b+SERVO_CENTER_DUTY_TICKS;
80018cf4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80018cf8:	f0 c8 fa 24 	sub	r8,r8,-1500
80018cfc:	ef 48 ff f8 	st.w	r7[-8],r8
	int deadtime=(SERVO_PERIOD-duty_a-duty_b)/2;
80018d00:	ee f8 ff f4 	ld.w	r8,r7[-12]
80018d04:	e0 69 4e 20 	mov	r9,20000
80018d08:	10 19       	sub	r9,r8
80018d0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018d0e:	f2 08 01 08 	sub	r8,r9,r8
80018d12:	f0 09 16 1f 	lsr	r9,r8,0x1f
80018d16:	f2 08 00 08 	add	r8,r9,r8
80018d1a:	a1 58       	asr	r8,0x1
80018d1c:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PWM.channel[channel &0b11].cprdupd=SERVO_PERIOD;
80018d20:	fe 79 4c 00 	mov	r9,-46080
80018d24:	ee f8 ff f0 	ld.w	r8,r7[-16]
80018d28:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80018d2c:	a5 78       	lsl	r8,0x5
80018d2e:	f2 08 00 08 	add	r8,r9,r8
80018d32:	f0 c8 fd f0 	sub	r8,r8,-528
80018d36:	e0 69 4e 20 	mov	r9,20000
80018d3a:	91 09       	st.w	r8[0x0],r9
	AVR32_PWM.channel[channel &0b11].cdtyupd=duty_a+deadtime;
80018d3c:	fe 7a 4c 00 	mov	r10,-46080
80018d40:	ee f8 ff f0 	ld.w	r8,r7[-16]
80018d44:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80018d48:	ee fb ff f4 	ld.w	r11,r7[-12]
80018d4c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018d50:	f6 09 00 09 	add	r9,r11,r9
80018d54:	a5 78       	lsl	r8,0x5
80018d56:	f4 08 00 08 	add	r8,r10,r8
80018d5a:	f0 c8 fd f8 	sub	r8,r8,-520
80018d5e:	91 09       	st.w	r8[0x0],r9
	AVR32_PWM.channel[channel &0b11].dtupd= deadtime<<16 | deadtime;	
80018d60:	fe 7a 4c 00 	mov	r10,-46080
80018d64:	ee f8 ff f0 	ld.w	r8,r7[-16]
80018d68:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80018d6c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018d70:	f2 0b 15 10 	lsl	r11,r9,0x10
80018d74:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018d78:	f7 e9 10 09 	or	r9,r11,r9
80018d7c:	a5 78       	lsl	r8,0x5
80018d7e:	f4 08 00 08 	add	r8,r10,r8
80018d82:	f0 c8 fd e4 	sub	r8,r8,-540
80018d86:	91 09       	st.w	r8[0x0],r9
}
80018d88:	2f ad       	sub	sp,-24
80018d8a:	e3 cd 80 80 	ldm	sp++,r7,pc

80018d8e <set_servos>:


void set_servos(servo_output *servo_outputs) {
80018d8e:	eb cd 40 c0 	pushm	r6-r7,lr
80018d92:	1a 97       	mov	r7,sp
80018d94:	20 1d       	sub	sp,4
80018d96:	49 76       	lddpc	r6,80018df0 <set_servos+0x62>
80018d98:	1e 26       	rsub	r6,pc
80018d9a:	ef 4c ff fc 	st.w	r7[-4],r12
		set_servo(0, servo_outputs[0].value, servo_outputs[1].value);
		set_servo(1, servo_outputs[2].value, servo_outputs[3].value);
		set_servo(2, servo_outputs[4].value, servo_outputs[5].value);
		set_servo(3, servo_outputs[6].value, servo_outputs[7].value);
	#else
		set_servo(1, servo_outputs[0].value, servo_outputs[1].value);
80018d9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018da2:	2f 08       	sub	r8,-16
80018da4:	70 09       	ld.w	r9,r8[0x0]
80018da6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018daa:	70 08       	ld.w	r8,r8[0x0]
80018dac:	12 9a       	mov	r10,r9
80018dae:	10 9b       	mov	r11,r8
80018db0:	30 1c       	mov	r12,1
80018db2:	f0 16 00 c9 	mcall	r6[804]
		set_servo(2, servo_outputs[2].value, servo_outputs[3].value);
80018db6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018dba:	2d 08       	sub	r8,-48
80018dbc:	70 09       	ld.w	r9,r8[0x0]
80018dbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018dc2:	2e 08       	sub	r8,-32
80018dc4:	70 08       	ld.w	r8,r8[0x0]
80018dc6:	12 9a       	mov	r10,r9
80018dc8:	10 9b       	mov	r11,r8
80018dca:	30 2c       	mov	r12,2
80018dcc:	f0 16 00 c9 	mcall	r6[804]
		set_servo(3, servo_outputs[4].value, servo_outputs[5].value);
80018dd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018dd4:	2b 08       	sub	r8,-80
80018dd6:	70 09       	ld.w	r9,r8[0x0]
80018dd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018ddc:	2c 08       	sub	r8,-64
80018dde:	70 08       	ld.w	r8,r8[0x0]
80018de0:	12 9a       	mov	r10,r9
80018de2:	10 9b       	mov	r11,r8
80018de4:	30 3c       	mov	r12,3
80018de6:	f0 16 00 c9 	mcall	r6[804]
	#endif
	
}
80018dea:	2f fd       	sub	sp,-4
80018dec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018df0:	80 01       	ld.sh	r1,r0[0x0]
80018df2:	8c 1c       	ld.sh	r12,r6[0x2]

80018df4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80018df4:	eb cd 40 c0 	pushm	r6-r7,lr
80018df8:	1a 97       	mov	r7,sp
80018dfa:	20 6d       	sub	sp,24
80018dfc:	49 e6       	lddpc	r6,80018e74 <interpolate+0x80>
80018dfe:	1e 26       	rsub	r6,pc
80018e00:	ef 4c ff f8 	st.w	r7[-8],r12
80018e04:	ef 4b ff f4 	st.w	r7[-12],r11
80018e08:	ef 4a ff f0 	st.w	r7[-16],r10
80018e0c:	ef 49 ff ec 	st.w	r7[-20],r9
80018e10:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80018e14:	ee f9 ff f4 	ld.w	r9,r7[-12]
80018e18:	ee f8 ff f0 	ld.w	r8,r7[-16]
80018e1c:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80018e20:	c0 41       	brne	80018e28 <interpolate+0x34>
	{
		return y1;
80018e22:	ee f8 ff ec 	ld.w	r8,r7[-20]
80018e26:	c2 38       	rjmp	80018e6c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80018e28:	ee f9 ff e8 	ld.w	r9,r7[-24]
80018e2c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80018e30:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80018e34:	ee fa ff f8 	ld.w	r10,r7[-8]
80018e38:	ee f8 ff f4 	ld.w	r8,r7[-12]
80018e3c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80018e40:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80018e44:	ee fa ff f0 	ld.w	r10,r7[-16]
80018e48:	ee f9 ff f4 	ld.w	r9,r7[-12]
80018e4c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80018e50:	12 9b       	mov	r11,r9
80018e52:	10 9c       	mov	r12,r8
80018e54:	f0 16 00 08 	mcall	r6[32]
80018e58:	18 98       	mov	r8,r12
80018e5a:	10 99       	mov	r9,r8
80018e5c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80018e60:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80018e64:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80018e68:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80018e6c:	10 9c       	mov	r12,r8
80018e6e:	2f ad       	sub	sp,-24
80018e70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018e74:	80 01       	ld.sh	r1,r0[0x0]
80018e76:	8c 82       	ld.uh	r2,r6[0x0]

80018e78 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
80018e78:	eb cd 40 80 	pushm	r7,lr
80018e7c:	1a 97       	mov	r7,sp
80018e7e:	20 1d       	sub	sp,4
80018e80:	18 98       	mov	r8,r12
80018e82:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80018e86:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80018e8a:	58 38       	cp.w	r8,3
80018e8c:	c1 20       	breq	80018eb0 <osc_get_rate+0x38>
80018e8e:	e0 89 00 07 	brgt	80018e9c <osc_get_rate+0x24>
80018e92:	58 08       	cp.w	r8,0
80018e94:	c0 90       	breq	80018ea6 <osc_get_rate+0x2e>
80018e96:	58 28       	cp.w	r8,2
80018e98:	c0 f0       	breq	80018eb6 <osc_get_rate+0x3e>
80018e9a:	c1 b8       	rjmp	80018ed0 <osc_get_rate+0x58>
80018e9c:	58 48       	cp.w	r8,4
80018e9e:	c1 10       	breq	80018ec0 <osc_get_rate+0x48>
80018ea0:	58 58       	cp.w	r8,5
80018ea2:	c1 40       	breq	80018eca <osc_get_rate+0x52>
80018ea4:	c1 68       	rjmp	80018ed0 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
80018ea6:	e0 68 24 00 	mov	r8,9216
80018eaa:	ea 18 00 f4 	orh	r8,0xf4
80018eae:	c1 28       	rjmp	80018ed2 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
80018eb0:	e0 68 80 00 	mov	r8,32768
80018eb4:	c0 f8       	rjmp	80018ed2 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
80018eb6:	e0 68 12 00 	mov	r8,4608
80018eba:	ea 18 00 7a 	orh	r8,0x7a
80018ebe:	c0 a8       	rjmp	80018ed2 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
80018ec0:	e0 68 0e 00 	mov	r8,3584
80018ec4:	ea 18 07 27 	orh	r8,0x727
80018ec8:	c0 58       	rjmp	80018ed2 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
80018eca:	e0 78 c1 38 	mov	r8,115000
80018ece:	c0 28       	rjmp	80018ed2 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
80018ed0:	30 08       	mov	r8,0
	}
}
80018ed2:	10 9c       	mov	r12,r8
80018ed4:	2f fd       	sub	sp,-4
80018ed6:	e3 cd 80 80 	ldm	sp++,r7,pc

80018eda <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
80018eda:	eb cd 40 c0 	pushm	r6-r7,lr
80018ede:	1a 97       	mov	r7,sp
80018ee0:	48 56       	lddpc	r6,80018ef4 <sysclk_get_main_hz+0x1a>
80018ee2:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
80018ee4:	30 0c       	mov	r12,0
80018ee6:	cc 9f       	rcall	80018e78 <osc_get_rate>
80018ee8:	18 98       	mov	r8,r12
80018eea:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80018eec:	10 9c       	mov	r12,r8
80018eee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018ef2:	00 00       	add	r0,r0
80018ef4:	80 01       	ld.sh	r1,r0[0x0]
80018ef6:	8d 66       	st.w	r6[0x18],r6

80018ef8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
80018ef8:	eb cd 40 c0 	pushm	r6-r7,lr
80018efc:	1a 97       	mov	r7,sp
80018efe:	48 46       	lddpc	r6,80018f0c <sysclk_get_cpu_hz+0x14>
80018f00:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
80018f02:	ce cf       	rcall	80018eda <sysclk_get_main_hz>
80018f04:	18 98       	mov	r8,r12
}
80018f06:	10 9c       	mov	r12,r8
80018f08:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018f0c:	80 01       	ld.sh	r1,r0[0x0]
80018f0e:	8d 84       	st.w	r6[0x20],r4

80018f10 <spectrum_handler>:
Spektrum_Receiver_t spRec2;

int16_t channelCenter[16];


ISR(spectrum_handler, AVR32_USART1_IRQ, AVR32_INTC_INTLEV_INT1) {
80018f10:	eb cd 40 c0 	pushm	r6-r7,lr
80018f14:	1a 97       	mov	r7,sp
80018f16:	20 3d       	sub	sp,12
80018f18:	4c 36       	lddpc	r6,80019024 <spectrum_handler+0x114>
80018f1a:	1e 26       	rsub	r6,pc
	uint8_t c1, c2, i;
	uint16_t sw;
	uint32_t now =get_time_ticks() ;
80018f1c:	f0 16 00 2d 	mcall	r6[180]
80018f20:	18 98       	mov	r8,r12
80018f22:	ef 48 ff fc 	st.w	r7[-4],r8
	if (REMOTE_UART.csr & AVR32_USART_CSR_RXRDY_MASK) {
80018f26:	fc 78 14 00 	mov	r8,-191488
80018f2a:	70 58       	ld.w	r8,r8[0x14]
80018f2c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80018f30:	5c 58       	castu.b	r8
80018f32:	c7 50       	breq	8001901c <spectrum_handler+0x10c>
		spRec1.duration=now-spRec1.last_time;
80018f34:	ec f8 00 80 	ld.w	r8,r6[128]
80018f38:	f0 f8 01 2c 	ld.w	r8,r8[300]
80018f3c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018f40:	10 19       	sub	r9,r8
80018f42:	ec f8 00 80 	ld.w	r8,r6[128]
80018f46:	f1 49 01 30 	st.w	r8[304],r9
		spRec1.last_time=now;
80018f4a:	ec f8 00 80 	ld.w	r8,r6[128]
80018f4e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018f52:	f1 49 01 2c 	st.w	r8[300],r9
//		putstring(STDOUT, "!");
		//receiveInterruptHandler(&spRec1.receiver);
		if ((spRec1.duration>2500)) {
80018f56:	ec f8 00 80 	ld.w	r8,r6[128]
80018f5a:	f0 f8 01 30 	ld.w	r8,r8[304]
80018f5e:	e0 48 09 c4 	cp.w	r8,2500
80018f62:	e0 88 00 06 	brls	80018f6e <spectrum_handler+0x5e>
			buffer_clear(&spRec1.receiver);
80018f66:	ec fc 00 80 	ld.w	r12,r6[128]
80018f6a:	f0 16 02 0c 	mcall	r6[2096]
		}
		c1=(uint8_t)REMOTE_UART.rhr;
80018f6e:	fc 78 14 00 	mov	r8,-191488
80018f72:	70 68       	ld.w	r8,r8[0x18]
80018f74:	ef 68 ff f7 	st.b	r7[-9],r8
		buffer_put(&spRec1.receiver, c1);
80018f78:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80018f7c:	10 9b       	mov	r11,r8
80018f7e:	ec fc 00 80 	ld.w	r12,r6[128]
80018f82:	f0 16 00 55 	mcall	r6[340]
		

		if (buffer_bytes_available(&spRec1.receiver)==16) {
80018f86:	ec fc 00 80 	ld.w	r12,r6[128]
80018f8a:	f0 16 00 2e 	mcall	r6[184]
80018f8e:	18 98       	mov	r8,r12
80018f90:	59 08       	cp.w	r8,16
80018f92:	c4 51       	brne	8001901c <spectrum_handler+0x10c>
			//PORTC.OUT = _BV(5);
			//putstring(STDOUT, "!");
			for (i=0; i<8; i++) {
80018f94:	30 08       	mov	r8,0
80018f96:	ef 68 ff f9 	st.b	r7[-7],r8
80018f9a:	c3 a8       	rjmp	8001900e <spectrum_handler+0xfe>
				c1=buffer_get(&spRec1.receiver);
80018f9c:	ec fc 00 80 	ld.w	r12,r6[128]
80018fa0:	f0 16 00 45 	mcall	r6[276]
80018fa4:	18 98       	mov	r8,r12
80018fa6:	ef 68 ff f7 	st.b	r7[-9],r8
				c2=buffer_get(&spRec1.receiver);
80018faa:	ec fc 00 80 	ld.w	r12,r6[128]
80018fae:	f0 16 00 45 	mcall	r6[276]
80018fb2:	18 98       	mov	r8,r12
80018fb4:	ef 68 ff f8 	st.b	r7[-8],r8
				sw=((uint16_t)c1)*256 +((uint16_t)c2);
80018fb8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80018fbc:	a9 68       	lsl	r8,0x8
80018fbe:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80018fc2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80018fc6:	f2 08 00 08 	add	r8,r9,r8
80018fca:	ef 58 ff fa 	st.h	r7[-6],r8
				//if (c1 & 0x80==0)
				spRec1.channels[(c1 & 0x3c)>>2]=sw&0x3ff;
80018fce:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80018fd2:	e2 18 00 3c 	andl	r8,0x3c,COH
80018fd6:	f0 0a 14 02 	asr	r10,r8,0x2
80018fda:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80018fde:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
80018fe2:	ec f9 00 80 	ld.w	r9,r6[128]
80018fe6:	f4 ca ff 7e 	sub	r10,r10,-130
80018fea:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
				//spRec1.channels[i]=sw&0x3ff;
				spRec1.valid=1;
80018fee:	ec f9 00 80 	ld.w	r9,r6[128]
80018ff2:	30 18       	mov	r8,1
80018ff4:	f3 68 01 28 	st.b	r9[296],r8
				spRec1.last_update=now;
80018ff8:	ec f8 00 80 	ld.w	r8,r6[128]
80018ffc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019000:	f1 49 01 24 	st.w	r8[292],r9
		

		if (buffer_bytes_available(&spRec1.receiver)==16) {
			//PORTC.OUT = _BV(5);
			//putstring(STDOUT, "!");
			for (i=0; i<8; i++) {
80019004:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80019008:	2f f8       	sub	r8,-1
8001900a:	ef 68 ff f9 	st.b	r7[-7],r8
8001900e:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80019012:	30 78       	mov	r8,7
80019014:	f0 09 18 00 	cp.b	r9,r8
80019018:	fe 98 ff c2 	brls	80018f9c <spectrum_handler+0x8c>
				spRec1.valid=1;
				spRec1.last_update=now;
			}
		}
	}		
}
8001901c:	2f dd       	sub	sp,-12
8001901e:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80019022:	d6 03       	rete
80019024:	80 01       	ld.sh	r1,r0[0x0]
80019026:	8d 9e       	st.w	r6[0x24],lr

80019028 <rc_init>:

void rc_init (void) {
80019028:	eb cd 40 c0 	pushm	r6-r7,lr
8001902c:	1a 97       	mov	r7,sp
8001902e:	20 1d       	sub	sp,4
80019030:	4a 96       	lddpc	r6,800190d4 <rc_init+0xac>
80019032:	1e 26       	rsub	r6,pc
   {
    {AVR32_USART1_RXD_0_1_PIN, AVR32_USART1_RXD_0_1_FUNCTION}
   ,{AVR32_USART1_TXD_0_1_PIN, AVR32_USART1_TXD_0_1_FUNCTION}
   };
	int i;
	for (i=0; i<16; i++) {
80019034:	30 08       	mov	r8,0
80019036:	ef 48 ff fc 	st.w	r7[-4],r8
8001903a:	c2 18       	rjmp	8001907c <rc_init+0x54>
		spRec1.channels[i]=500;
8001903c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019040:	ec f9 00 80 	ld.w	r9,r6[128]
80019044:	f0 ca ff 7e 	sub	r10,r8,-130
80019048:	e0 68 01 f4 	mov	r8,500
8001904c:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		spRec2.channels[i]=500;
80019050:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019054:	ec f9 01 78 	ld.w	r9,r6[376]
80019058:	f0 ca ff 7e 	sub	r10,r8,-130
8001905c:	e0 68 01 f4 	mov	r8,500
80019060:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		channelCenter[i]=0;
80019064:	ee fa ff fc 	ld.w	r10,r7[-4]
80019068:	ec f9 02 dc 	ld.w	r9,r6[732]
8001906c:	30 08       	mov	r8,0
8001906e:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
   {
    {AVR32_USART1_RXD_0_1_PIN, AVR32_USART1_RXD_0_1_FUNCTION}
   ,{AVR32_USART1_TXD_0_1_PIN, AVR32_USART1_TXD_0_1_FUNCTION}
   };
	int i;
	for (i=0; i<16; i++) {
80019072:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019076:	2f f8       	sub	r8,-1
80019078:	ef 48 ff fc 	st.w	r7[-4],r8
8001907c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019080:	58 f8       	cp.w	r8,15
80019082:	fe 9a ff dd 	brle	8001903c <rc_init+0x14>
		spRec1.channels[i]=500;
		spRec2.channels[i]=500;
		channelCenter[i]=0;
	}
	spRec1.channels[RC_THROTTLE]=0;
80019086:	ec f9 00 80 	ld.w	r9,r6[128]
8001908a:	30 08       	mov	r8,0
8001908c:	f3 58 01 04 	st.h	r9[260],r8
	spRec2.channels[RC_THROTTLE]=0;
80019090:	ec f9 01 78 	ld.w	r9,r6[376]
80019094:	30 08       	mov	r8,0
80019096:	f3 58 01 04 	st.h	r9[260],r8
	 // USART options.
	 
    // Assign GPIO pins to USART_0.
    gpio_enable_module(USART_GPIO_MAP,
8001909a:	30 2b       	mov	r11,2
8001909c:	ec fc 08 dc 	ld.w	r12,r6[2268]
800190a0:	f0 16 00 98 	mcall	r6[608]
                     sizeof(USART_GPIO_MAP) / sizeof(USART_GPIO_MAP[0]));
	
    // Initialize the USART in RS232 mode.
    usart_init_rs232( (&REMOTE_UART), &usart_opt, sysclk_get_cpu_hz());
800190a4:	c2 af       	rcall	80018ef8 <sysclk_get_cpu_hz>
800190a6:	18 98       	mov	r8,r12
800190a8:	10 9a       	mov	r10,r8
800190aa:	ec fb 08 d8 	ld.w	r11,r6[2264]
800190ae:	fc 7c 14 00 	mov	r12,-191488
800190b2:	f0 16 00 6b 	mcall	r6[428]
	INTC_register_interrupt( (__int_handler) &spectrum_handler, AVR32_USART1_IRQ, AVR32_INTC_INT1);
800190b6:	30 1a       	mov	r10,1
800190b8:	e0 6b 02 80 	mov	r11,640
800190bc:	fe cc 01 ac 	sub	r12,pc,428
800190c0:	f0 16 00 3b 	mcall	r6[236]
	REMOTE_UART.ier=AVR32_USART_IER_RXRDY_MASK;
800190c4:	fc 78 14 00 	mov	r8,-191488
800190c8:	30 19       	mov	r9,1
800190ca:	91 29       	st.w	r8[0x8],r9
	//initUART_RX(&spRec1.receiver,  &USARTC1, USART_RXCINTLVL_LO_gc, BSEL_SPEKTRUM);
	//initUART_RX(&spRec2.receiver,  &USARTD0, USART_RXCINTLVL_LO_gc, BSEL_SPEKTRUM);

}
800190cc:	2f fd       	sub	sp,-4
800190ce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800190d2:	00 00       	add	r0,r0
800190d4:	80 01       	ld.sh	r1,r0[0x0]
800190d6:	8e b6       	ld.uh	r6,r7[0x6]

800190d8 <rc_get_channel>:
/**/
int16_t rc_get_channel(uint8_t index) {
800190d8:	eb cd 40 c0 	pushm	r6-r7,lr
800190dc:	1a 97       	mov	r7,sp
800190de:	20 1d       	sub	sp,4
800190e0:	48 b6       	lddpc	r6,8001910c <rc_get_channel+0x34>
800190e2:	1e 26       	rsub	r6,pc
800190e4:	18 98       	mov	r8,r12
800190e6:	ef 68 ff fc 	st.b	r7[-4],r8
	//if (checkReceiver1()<checkReceiver2()) {
		return spRec1.channels[index]-500;
800190ea:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800190ee:	ec f8 00 80 	ld.w	r8,r6[128]
800190f2:	f2 c9 ff 7e 	sub	r9,r9,-130
800190f6:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
800190fa:	f0 c8 01 f4 	sub	r8,r8,500
800190fe:	5c 88       	casts.h	r8
80019100:	5c 88       	casts.h	r8
	//} else {
	//	return spRec2.channels[index]-500;
	//}
}
80019102:	10 9c       	mov	r12,r8
80019104:	2f fd       	sub	sp,-4
80019106:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001910a:	00 00       	add	r0,r0
8001910c:	80 01       	ld.sh	r1,r0[0x0]
8001910e:	8f 66       	st.w	r7[0x18],r6

80019110 <rc_get_channel_neutral>:

int16_t rc_get_channel_neutral(uint8_t index) {
80019110:	eb cd 40 e0 	pushm	r5-r7,lr
80019114:	1a 97       	mov	r7,sp
80019116:	20 2d       	sub	sp,8
80019118:	4a 36       	lddpc	r6,800191a4 <rc_get_channel_neutral+0x94>
8001911a:	1e 26       	rsub	r6,pc
8001911c:	18 98       	mov	r8,r12
8001911e:	ef 68 ff f8 	st.b	r7[-8],r8
	int16_t value=rc_get_channel(index)-channelCenter[index];
80019122:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80019126:	10 9c       	mov	r12,r8
80019128:	f0 16 00 22 	mcall	r6[136]
8001912c:	18 98       	mov	r8,r12
8001912e:	10 99       	mov	r9,r8
80019130:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80019134:	ec f8 02 dc 	ld.w	r8,r6[732]
80019138:	f0 0a 04 18 	ld.sh	r8,r8[r10<<0x1]
8001913c:	f2 08 01 08 	sub	r8,r9,r8
80019140:	5c 88       	casts.h	r8
80019142:	ef 58 ff fe 	st.h	r7[-2],r8
	// clamp to dead zone
	if ((value>-DEADZONE)&&(value<DEADZONE)) value=0;
80019146:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001914a:	10 9c       	mov	r12,r8
8001914c:	f0 16 00 1a 	mcall	r6[104]
80019150:	14 98       	mov	r8,r10
80019152:	16 99       	mov	r9,r11
80019154:	30 05       	mov	r5,0
80019156:	30 0a       	mov	r10,0
80019158:	fc 1b c0 3e 	movh	r11,0xc03e
8001915c:	f0 16 00 1c 	mcall	r6[112]
80019160:	18 98       	mov	r8,r12
80019162:	58 08       	cp.w	r8,0
80019164:	c0 20       	breq	80019168 <rc_get_channel_neutral+0x58>
80019166:	30 15       	mov	r5,1
80019168:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8001916c:	c1 60       	breq	80019198 <rc_get_channel_neutral+0x88>
8001916e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80019172:	10 9c       	mov	r12,r8
80019174:	f0 16 00 1a 	mcall	r6[104]
80019178:	30 05       	mov	r5,0
8001917a:	30 08       	mov	r8,0
8001917c:	fc 19 40 3e 	movh	r9,0x403e
80019180:	f0 16 00 1c 	mcall	r6[112]
80019184:	18 98       	mov	r8,r12
80019186:	58 08       	cp.w	r8,0
80019188:	c0 20       	breq	8001918c <rc_get_channel_neutral+0x7c>
8001918a:	30 15       	mov	r5,1
8001918c:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80019190:	c0 40       	breq	80019198 <rc_get_channel_neutral+0x88>
80019192:	30 08       	mov	r8,0
80019194:	ef 58 ff fe 	st.h	r7[-2],r8
	return value;
80019198:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8001919c:	10 9c       	mov	r12,r8
8001919e:	2f ed       	sub	sp,-8
800191a0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800191a4:	80 01       	ld.sh	r1,r0[0x0]
800191a6:	8f 9e       	st.w	r7[0x24],lr

800191a8 <rc_center_channel>:

void rc_center_channel(uint8_t index){
800191a8:	eb cd 40 e0 	pushm	r5-r7,lr
800191ac:	1a 97       	mov	r7,sp
800191ae:	20 1d       	sub	sp,4
800191b0:	48 a6       	lddpc	r6,800191d8 <rc_center_channel+0x30>
800191b2:	1e 26       	rsub	r6,pc
800191b4:	18 98       	mov	r8,r12
800191b6:	ef 68 ff fc 	st.b	r7[-4],r8
	channelCenter[index]=rc_get_channel(index);
800191ba:	ef 35 ff fc 	ld.ub	r5,r7[-4]
800191be:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800191c2:	10 9c       	mov	r12,r8
800191c4:	f0 16 00 22 	mcall	r6[136]
800191c8:	18 98       	mov	r8,r12
800191ca:	ec f9 02 dc 	ld.w	r9,r6[732]
800191ce:	f2 05 0a 18 	st.h	r9[r5<<0x1],r8
}
800191d2:	2f fd       	sub	sp,-4
800191d4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800191d8:	80 01       	ld.sh	r1,r0[0x0]
800191da:	90 36       	ld.sh	r6,r8[0x6]

800191dc <checkReceiver1>:

int8_t checkReceiver1() {
800191dc:	eb cd 40 c0 	pushm	r6-r7,lr
800191e0:	1a 97       	mov	r7,sp
800191e2:	20 3d       	sub	sp,12
800191e4:	4b 56       	lddpc	r6,800192b8 <checkReceiver1+0xdc>
800191e6:	1e 26       	rsub	r6,pc
	int8_t i;
	uint32_t now = get_time_ticks();
800191e8:	f0 16 00 2d 	mcall	r6[180]
800191ec:	18 98       	mov	r8,r12
800191ee:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t duration=now-spRec1.last_update;
800191f2:	ec f8 00 80 	ld.w	r8,r6[128]
800191f6:	f0 f8 01 24 	ld.w	r8,r8[292]
800191fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800191fe:	10 19       	sub	r9,r8
80019200:	ef 49 ff fc 	st.w	r7[-4],r9
	if (spRec1.valid==0) return -2;
80019204:	ec f8 00 80 	ld.w	r8,r6[128]
80019208:	f1 38 01 28 	ld.ub	r8,r8[296]
8001920c:	58 08       	cp.w	r8,0
8001920e:	c0 41       	brne	80019216 <checkReceiver1+0x3a>
80019210:	e0 68 00 fe 	mov	r8,254
80019214:	c4 d8       	rjmp	800192ae <checkReceiver1+0xd2>
	if (duration<100000) {
80019216:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001921a:	e0 58 86 9f 	cp.w	r8,99999
8001921e:	e0 8b 00 04 	brhi	80019226 <checkReceiver1+0x4a>
		return 1;
80019222:	30 18       	mov	r8,1
80019224:	c4 58       	rjmp	800192ae <checkReceiver1+0xd2>
	} else
	if (duration<1500000) {
80019226:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001922a:	e0 69 e3 5f 	mov	r9,58207
8001922e:	ea 19 00 16 	orh	r9,0x16
80019232:	12 38       	cp.w	r8,r9
80019234:	e0 8b 00 17 	brhi	80019262 <checkReceiver1+0x86>
		spRec1.channels[RC_ROLL]=500;	
80019238:	ec f9 00 80 	ld.w	r9,r6[128]
8001923c:	e0 68 01 f4 	mov	r8,500
80019240:	f3 58 01 06 	st.h	r9[262],r8
		spRec1.channels[RC_PITCH]=500;	
80019244:	ec f9 00 80 	ld.w	r9,r6[128]
80019248:	e0 68 01 f4 	mov	r8,500
8001924c:	f3 58 01 08 	st.h	r9[264],r8
		spRec1.channels[RC_YAW]=500;	
80019250:	ec f9 00 80 	ld.w	r9,r6[128]
80019254:	e0 68 01 f4 	mov	r8,500
80019258:	f3 58 01 0a 	st.h	r9[266],r8
		return -1; // brief drop out - hold pattern
8001925c:	e0 68 00 ff 	mov	r8,255
80019260:	c2 78       	rjmp	800192ae <checkReceiver1+0xd2>
		
	} else {
		spRec1.valid = 0;
80019262:	ec f9 00 80 	ld.w	r9,r6[128]
80019266:	30 08       	mov	r8,0
80019268:	f3 68 01 28 	st.b	r9[296],r8
		for (i=1; i<8; i++) {
8001926c:	30 18       	mov	r8,1
8001926e:	ef 68 ff f7 	st.b	r7[-9],r8
80019272:	c1 08       	rjmp	80019292 <checkReceiver1+0xb6>
			spRec1.channels[i]=500;			
80019274:	ef 28 ff f7 	ld.sb	r8,r7[-9]
80019278:	ec f9 00 80 	ld.w	r9,r6[128]
8001927c:	f0 ca ff 7e 	sub	r10,r8,-130
80019280:	e0 68 01 f4 	mov	r8,500
80019284:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		spRec1.channels[RC_YAW]=500;	
		return -1; // brief drop out - hold pattern
		
	} else {
		spRec1.valid = 0;
		for (i=1; i<8; i++) {
80019288:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8001928c:	2f f8       	sub	r8,-1
8001928e:	ef 68 ff f7 	st.b	r7[-9],r8
80019292:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80019296:	30 78       	mov	r8,7
80019298:	f0 09 18 00 	cp.b	r9,r8
8001929c:	fe 9a ff ec 	brle	80019274 <checkReceiver1+0x98>
			spRec1.channels[i]=500;			
		}
		spRec1.channels[RC_THROTTLE]=0;
800192a0:	ec f9 00 80 	ld.w	r9,r6[128]
800192a4:	30 08       	mov	r8,0
800192a6:	f3 58 01 04 	st.h	r9[260],r8
		return -2; // fade - fail safe
800192aa:	e0 68 00 fe 	mov	r8,254

	}

}
800192ae:	10 9c       	mov	r12,r8
800192b0:	2f dd       	sub	sp,-12
800192b2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800192b6:	00 00       	add	r0,r0
800192b8:	80 01       	ld.sh	r1,r0[0x0]
800192ba:	90 6a       	ld.sh	r10,r8[0xc]

800192bc <checkReceiver2>:

int8_t checkReceiver2(){
800192bc:	eb cd 40 c0 	pushm	r6-r7,lr
800192c0:	1a 97       	mov	r7,sp
800192c2:	20 3d       	sub	sp,12
800192c4:	4a 96       	lddpc	r6,80019368 <checkReceiver2+0xac>
800192c6:	1e 26       	rsub	r6,pc
	int8_t i;
	uint32_t now = 0; //TCC0.CNT;
800192c8:	30 08       	mov	r8,0
800192ca:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t duration = now - spRec2.last_update;
800192ce:	ec f8 01 78 	ld.w	r8,r6[376]
800192d2:	f0 f8 01 24 	ld.w	r8,r8[292]
800192d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800192da:	10 19       	sub	r9,r8
800192dc:	ef 49 ff fc 	st.w	r7[-4],r9
	if (spRec2.valid==0) return -2;
800192e0:	ec f8 01 78 	ld.w	r8,r6[376]
800192e4:	f1 38 01 28 	ld.ub	r8,r8[296]
800192e8:	58 08       	cp.w	r8,0
800192ea:	c0 41       	brne	800192f2 <checkReceiver2+0x36>
800192ec:	e0 68 00 fe 	mov	r8,254
800192f0:	c3 88       	rjmp	80019360 <checkReceiver2+0xa4>
	if (duration < 200000) {
800192f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800192f6:	e2 58 0d 3f 	cp.w	r8,199999
800192fa:	e0 8b 00 04 	brhi	80019302 <checkReceiver2+0x46>
		return 1;
800192fe:	30 18       	mov	r8,1
80019300:	c3 08       	rjmp	80019360 <checkReceiver2+0xa4>
	} else if (duration < 500000) {
80019302:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019306:	e6 58 a1 1f 	cp.w	r8,499999
8001930a:	e0 8b 00 05 	brhi	80019314 <checkReceiver2+0x58>
		return -1; // brief drop out - hold pattern
8001930e:	e0 68 00 ff 	mov	r8,255
80019312:	c2 78       	rjmp	80019360 <checkReceiver2+0xa4>
	} else {
		spRec2.valid = 0;
80019314:	ec f9 01 78 	ld.w	r9,r6[376]
80019318:	30 08       	mov	r8,0
8001931a:	f3 68 01 28 	st.b	r9[296],r8
		for (i=1; i<8; i++) {
8001931e:	30 18       	mov	r8,1
80019320:	ef 68 ff f7 	st.b	r7[-9],r8
80019324:	c1 08       	rjmp	80019344 <checkReceiver2+0x88>
			spRec2.channels[i]=500;
80019326:	ef 28 ff f7 	ld.sb	r8,r7[-9]
8001932a:	ec f9 01 78 	ld.w	r9,r6[376]
8001932e:	f0 ca ff 7e 	sub	r10,r8,-130
80019332:	e0 68 01 f4 	mov	r8,500
80019336:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		return 1;
	} else if (duration < 500000) {
		return -1; // brief drop out - hold pattern
	} else {
		spRec2.valid = 0;
		for (i=1; i<8; i++) {
8001933a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8001933e:	2f f8       	sub	r8,-1
80019340:	ef 68 ff f7 	st.b	r7[-9],r8
80019344:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80019348:	30 78       	mov	r8,7
8001934a:	f0 09 18 00 	cp.b	r9,r8
8001934e:	fe 9a ff ec 	brle	80019326 <checkReceiver2+0x6a>
			spRec2.channels[i]=500;
		}
		spRec2.channels[RC_THROTTLE]=0;
80019352:	ec f9 01 78 	ld.w	r9,r6[376]
80019356:	30 08       	mov	r8,0
80019358:	f3 58 01 04 	st.h	r9[260],r8
		return -2; // fade - fail safe
8001935c:	e0 68 00 fe 	mov	r8,254

	}

}
80019360:	10 9c       	mov	r12,r8
80019362:	2f dd       	sub	sp,-12
80019364:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019368:	80 01       	ld.sh	r1,r0[0x0]
8001936a:	91 4a       	st.w	r8[0x10],r10

8001936c <rc_check_receivers>:

int8_t rc_check_receivers() {
8001936c:	eb cd 40 c0 	pushm	r6-r7,lr
80019370:	1a 97       	mov	r7,sp
80019372:	48 66       	lddpc	r6,80019388 <rc_check_receivers+0x1c>
80019374:	1e 26       	rsub	r6,pc
	return checkReceiver1();// + checkReceiver2();
80019376:	f0 16 01 9f 	mcall	r6[1660]
8001937a:	18 98       	mov	r8,r12
8001937c:	5c 58       	castu.b	r8
8001937e:	5c 58       	castu.b	r8
}
80019380:	10 9c       	mov	r12,r8
80019382:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019386:	00 00       	add	r0,r0
80019388:	80 01       	ld.sh	r1,r0[0x0]
8001938a:	91 f8       	st.w	r8[0x3c],r8

8001938c <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
8001938c:	eb cd 40 c0 	pushm	r6-r7,lr
80019390:	1a 97       	mov	r7,sp
80019392:	20 1d       	sub	sp,4
80019394:	48 66       	lddpc	r6,800193ac <sysclk_enable_pba_module+0x20>
80019396:	1e 26       	rsub	r6,pc
80019398:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
8001939c:	ee fb ff fc 	ld.w	r11,r7[-4]
800193a0:	30 2c       	mov	r12,2
800193a2:	f0 16 01 fa 	mcall	r6[2024]
}
800193a6:	2f fd       	sub	sp,-4
800193a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800193ac:	80 01       	ld.sh	r1,r0[0x0]
800193ae:	92 1a       	ld.sh	r10,r9[0x2]

800193b0 <spi_reset>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
static inline void spi_reset(volatile avr32_spi_t *spi)
{
800193b0:	eb cd 40 80 	pushm	r7,lr
800193b4:	1a 97       	mov	r7,sp
800193b6:	20 1d       	sub	sp,4
800193b8:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800193bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800193c0:	e0 69 00 80 	mov	r9,128
800193c4:	91 09       	st.w	r8[0x0],r9
}
800193c6:	2f fd       	sub	sp,-4
800193c8:	e3 cd 80 80 	ldm	sp++,r7,pc

800193cc <spi_set_master_mode>:
/*! \brief Set Master Mode of the SPI.
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_set_master_mode(volatile avr32_spi_t *spi)
{
800193cc:	eb cd 40 80 	pushm	r7,lr
800193d0:	1a 97       	mov	r7,sp
800193d2:	20 1d       	sub	sp,4
800193d4:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.mstr = 1;
800193d8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800193dc:	72 18       	ld.w	r8,r9[0x4]
800193de:	30 1a       	mov	r10,1
800193e0:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
800193e4:	93 18       	st.w	r9[0x4],r8
}
800193e6:	2f fd       	sub	sp,-4
800193e8:	e3 cd 80 80 	ldm	sp++,r7,pc

800193ec <spi_disable_modfault>:
/*! \brief Disable Modfault of the SPI.
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_modfault(volatile avr32_spi_t *spi)
{
800193ec:	eb cd 40 80 	pushm	r7,lr
800193f0:	1a 97       	mov	r7,sp
800193f2:	20 1d       	sub	sp,4
800193f4:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.modfdis = 1;
800193f8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800193fc:	72 18       	ld.w	r8,r9[0x4]
800193fe:	30 1a       	mov	r10,1
80019400:	f1 da d0 81 	bfins	r8,r10,0x4,0x1
80019404:	93 18       	st.w	r9[0x4],r8
}
80019406:	2f fd       	sub	sp,-4
80019408:	e3 cd 80 80 	ldm	sp++,r7,pc

8001940c <spi_disable_loopback>:
/*! \brief Disable Loopback of the SPI.
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_loopback(volatile avr32_spi_t *spi)
{
8001940c:	eb cd 40 80 	pushm	r7,lr
80019410:	1a 97       	mov	r7,sp
80019412:	20 1d       	sub	sp,4
80019414:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.llb = 0;
80019418:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001941c:	72 18       	ld.w	r8,r9[0x4]
8001941e:	30 0a       	mov	r10,0
80019420:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
80019424:	93 18       	st.w	r9[0x4],r8
}
80019426:	2f fd       	sub	sp,-4
80019428:	e3 cd 80 80 	ldm	sp++,r7,pc

8001942c <spi_disable_chipselect_decoding>:
/*! \brief Disable Chip Select Decoding of the SPI.
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_chipselect_decoding(volatile avr32_spi_t *spi)
{
8001942c:	eb cd 40 80 	pushm	r7,lr
80019430:	1a 97       	mov	r7,sp
80019432:	20 1d       	sub	sp,4
80019434:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.pcsdec = 0;
80019438:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001943c:	72 18       	ld.w	r8,r9[0x4]
8001943e:	30 0a       	mov	r10,0
80019440:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
80019444:	93 18       	st.w	r9[0x4],r8
}
80019446:	2f fd       	sub	sp,-4
80019448:	e3 cd 80 80 	ldm	sp++,r7,pc

8001944c <spi_set_chipselect>:
 *
 * \param spi         Base address of the SPI instance.
 * \param chip_select Chip Select.
 */
static inline void spi_set_chipselect(volatile avr32_spi_t *spi,uint8_t chip_select)
{
8001944c:	eb cd 40 80 	pushm	r7,lr
80019450:	1a 97       	mov	r7,sp
80019452:	20 2d       	sub	sp,8
80019454:	ef 4c ff fc 	st.w	r7[-4],r12
80019458:	16 98       	mov	r8,r11
8001945a:	ef 68 ff f8 	st.b	r7[-8],r8
	spi->MR.pcs = chip_select;
8001945e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80019462:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80019466:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8001946a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001946e:	72 18       	ld.w	r8,r9[0x4]
80019470:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
80019474:	93 18       	st.w	r9[0x4],r8
}
80019476:	2f ed       	sub	sp,-8
80019478:	e3 cd 80 80 	ldm	sp++,r7,pc

8001947c <spi_disable_variable_chipselect>:
/*! \brief Disable Variable Chip Select of the SPI.
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_disable_variable_chipselect(volatile avr32_spi_t *spi)
{
8001947c:	eb cd 40 80 	pushm	r7,lr
80019480:	1a 97       	mov	r7,sp
80019482:	20 1d       	sub	sp,4
80019484:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.ps = 0;
80019488:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001948c:	72 18       	ld.w	r8,r9[0x4]
8001948e:	30 0a       	mov	r10,0
80019490:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
80019494:	93 18       	st.w	r9[0x4],r8
}
80019496:	2f fd       	sub	sp,-4
80019498:	e3 cd 80 80 	ldm	sp++,r7,pc

8001949c <spi_set_delay>:
 *
 * \param spi         Base address of the SPI instance.
 * \param delay       Delay.
 */
static inline void spi_set_delay(volatile avr32_spi_t *spi,uint8_t delay)
{
8001949c:	eb cd 40 80 	pushm	r7,lr
800194a0:	1a 97       	mov	r7,sp
800194a2:	20 2d       	sub	sp,8
800194a4:	ef 4c ff fc 	st.w	r7[-4],r12
800194a8:	16 98       	mov	r8,r11
800194aa:	ef 68 ff f8 	st.b	r7[-8],r8
	spi->MR.dlybcs = delay;
800194ae:	ee f9 ff fc 	ld.w	r9,r7[-4]
800194b2:	72 18       	ld.w	r8,r9[0x4]
800194b4:	ef 3a ff f8 	ld.ub	r10,r7[-8]
800194b8:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
800194bc:	93 18       	st.w	r9[0x4],r8
}
800194be:	2f ed       	sub	sp,-8
800194c0:	e3 cd 80 80 	ldm	sp++,r7,pc

800194c4 <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
static inline void spi_master_init(volatile avr32_spi_t *spi)
{
800194c4:	eb cd 40 c0 	pushm	r6-r7,lr
800194c8:	1a 97       	mov	r7,sp
800194ca:	20 1d       	sub	sp,4
800194cc:	49 86       	lddpc	r6,8001952c <spi_master_init+0x68>
800194ce:	1e 26       	rsub	r6,pc
800194d0:	ef 4c ff fc 	st.w	r7[-4],r12
#ifdef AVR32_SPI
	sysclk_enable_pba_module(SYSCLK_SPI);	
#else
	if ((uint32_t)spi == AVR32_SPI0_ADDRESS)
800194d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800194d8:	fc 58 18 00 	cp.w	r8,-190464
800194dc:	c0 41       	brne	800194e4 <spi_master_init+0x20>
	{
	sysclk_enable_pba_module(SYSCLK_SPI0);	
800194de:	30 3c       	mov	r12,3
800194e0:	c5 6f       	rcall	8001938c <sysclk_enable_pba_module>
800194e2:	c0 88       	rjmp	800194f2 <spi_master_init+0x2e>
	}
#ifdef AVR32_SPI1
	else if ((uint32_t)spi == AVR32_SPI1_ADDRESS)
800194e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800194e8:	fe 58 34 00 	cp.w	r8,-52224
800194ec:	c0 31       	brne	800194f2 <spi_master_init+0x2e>
	{
	sysclk_enable_pba_module(SYSCLK_SPI1);	
800194ee:	30 bc       	mov	r12,11
800194f0:	c4 ef       	rcall	8001938c <sysclk_enable_pba_module>
	}
#endif
#endif
  
  spi_reset(spi);
800194f2:	ee fc ff fc 	ld.w	r12,r7[-4]
800194f6:	c5 df       	rcall	800193b0 <spi_reset>
  spi_set_master_mode(spi);
800194f8:	ee fc ff fc 	ld.w	r12,r7[-4]
800194fc:	c6 8f       	rcall	800193cc <spi_set_master_mode>
  spi_disable_modfault(spi);
800194fe:	ee fc ff fc 	ld.w	r12,r7[-4]
80019502:	c7 5f       	rcall	800193ec <spi_disable_modfault>
  spi_disable_loopback(spi);
80019504:	ee fc ff fc 	ld.w	r12,r7[-4]
80019508:	c8 2f       	rcall	8001940c <spi_disable_loopback>
  spi_set_chipselect(spi,(1 << AVR32_SPI_MR_PCS_SIZE) - 1);
8001950a:	30 fb       	mov	r11,15
8001950c:	ee fc ff fc 	ld.w	r12,r7[-4]
80019510:	c9 ef       	rcall	8001944c <spi_set_chipselect>
  spi_disable_variable_chipselect(spi);
80019512:	ee fc ff fc 	ld.w	r12,r7[-4]
80019516:	cb 3f       	rcall	8001947c <spi_disable_variable_chipselect>
  spi_disable_chipselect_decoding(spi);
80019518:	ee fc ff fc 	ld.w	r12,r7[-4]
8001951c:	c8 8f       	rcall	8001942c <spi_disable_chipselect_decoding>
  spi_set_delay(spi,CONFIG_SPI_MASTER_DELAY_BCS);
8001951e:	30 0b       	mov	r11,0
80019520:	ee fc ff fc 	ld.w	r12,r7[-4]
80019524:	cb cf       	rcall	8001949c <spi_set_delay>
}
80019526:	2f fd       	sub	sp,-4
80019528:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001952c:	80 01       	ld.sh	r1,r0[0x0]
8001952e:	93 52       	st.w	r9[0x14],r2

80019530 <spi_select_device>:
 * \param spi Base address of the SPI instance.
 * \param device SPI device
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi, struct spi_device *device)
{
80019530:	eb cd 40 c0 	pushm	r6-r7,lr
80019534:	1a 97       	mov	r7,sp
80019536:	20 2d       	sub	sp,8
80019538:	48 96       	lddpc	r6,8001955c <spi_select_device+0x2c>
8001953a:	1e 26       	rsub	r6,pc
8001953c:	ef 4c ff fc 	st.w	r7[-4],r12
80019540:	ef 4b ff f8 	st.w	r7[-8],r11
	spi_selectChip(spi,device->id);
80019544:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019548:	11 88       	ld.ub	r8,r8[0x0]
8001954a:	10 9b       	mov	r11,r8
8001954c:	ee fc ff fc 	ld.w	r12,r7[-4]
80019550:	f0 16 02 05 	mcall	r6[2068]
}
80019554:	2f ed       	sub	sp,-8
80019556:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001955a:	00 00       	add	r0,r0
8001955c:	80 01       	ld.sh	r1,r0[0x0]
8001955e:	93 be       	st.w	r9[0x2c],lr

80019560 <spi_deselect_device>:
 * \param device SPI device
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi, struct spi_device *device)
{
80019560:	eb cd 40 c0 	pushm	r6-r7,lr
80019564:	1a 97       	mov	r7,sp
80019566:	20 2d       	sub	sp,8
80019568:	48 96       	lddpc	r6,8001958c <spi_deselect_device+0x2c>
8001956a:	1e 26       	rsub	r6,pc
8001956c:	ef 4c ff fc 	st.w	r7[-4],r12
80019570:	ef 4b ff f8 	st.w	r7[-8],r11
	spi_unselectChip(spi,device->id);
80019574:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019578:	11 88       	ld.ub	r8,r8[0x0]
8001957a:	10 9b       	mov	r11,r8
8001957c:	ee fc ff fc 	ld.w	r12,r7[-4]
80019580:	f0 16 01 50 	mcall	r6[1344]
}
80019584:	2f ed       	sub	sp,-8
80019586:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001958a:	00 00       	add	r0,r0
8001958c:	80 01       	ld.sh	r1,r0[0x0]
8001958e:	93 ee       	st.w	r9[0x38],lr

80019590 <get_spi_in_buffer>:
#include "led.h"


static volatile spi_buffer_t spi_buffers[SPI_NUMBER];

uint8_t* get_spi_in_buffer(int spi_index) {
80019590:	eb cd 40 c0 	pushm	r6-r7,lr
80019594:	1a 97       	mov	r7,sp
80019596:	20 1d       	sub	sp,4
80019598:	48 96       	lddpc	r6,800195bc <get_spi_in_buffer+0x2c>
8001959a:	1e 26       	rsub	r6,pc
8001959c:	ef 4c ff fc 	st.w	r7[-4],r12
	return spi_buffers[spi_index].SPIInBuffer;
800195a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800195a4:	f0 08 10 54 	mul	r8,r8,84
800195a8:	f0 c9 ff dc 	sub	r9,r8,-36
800195ac:	ec f8 00 2c 	ld.w	r8,r6[44]
800195b0:	f2 08 00 08 	add	r8,r9,r8
}
800195b4:	10 9c       	mov	r12,r8
800195b6:	2f fd       	sub	sp,-4
800195b8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800195bc:	80 01       	ld.sh	r1,r0[0x0]
800195be:	94 1e       	ld.sh	lr,r10[0x2]

800195c0 <spi0_int_handler>:

/** interrupt handler
  * manages sending and receiving data
*/
__attribute__((__interrupt__))
void spi0_int_handler() {
800195c0:	eb cd 40 c0 	pushm	r6-r7,lr
800195c4:	1a 97       	mov	r7,sp
800195c6:	48 56       	lddpc	r6,800195d8 <spi0_int_handler+0x18>
800195c8:	1e 26       	rsub	r6,pc
	//LED_On(LED1);
	spi_handler(0);
800195ca:	30 0c       	mov	r12,0
800195cc:	f0 16 01 2b 	mcall	r6[1196]
}
800195d0:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800195d4:	d6 03       	rete
800195d6:	00 00       	add	r0,r0
800195d8:	80 01       	ld.sh	r1,r0[0x0]
800195da:	94 4c       	ld.sh	r12,r10[0x8]

800195dc <spi1_int_handler>:

__attribute__((__interrupt__))
void spi1_int_handler() {
800195dc:	eb cd 40 c0 	pushm	r6-r7,lr
800195e0:	1a 97       	mov	r7,sp
800195e2:	48 56       	lddpc	r6,800195f4 <spi1_int_handler+0x18>
800195e4:	1e 26       	rsub	r6,pc
	spi_handler(1);
800195e6:	30 1c       	mov	r12,1
800195e8:	f0 16 01 2b 	mcall	r6[1196]
}
800195ec:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800195f0:	d6 03       	rete
800195f2:	00 00       	add	r0,r0
800195f4:	80 01       	ld.sh	r1,r0[0x0]
800195f6:	94 68       	ld.sh	r8,r10[0xc]

800195f8 <pdca_int_handler_spi0>:

/*! \brief The PDCA interrupt handler.
 */
__attribute__((__interrupt__))
static void pdca_int_handler_spi0(void)
{
800195f8:	eb cd 40 c0 	pushm	r6-r7,lr
800195fc:	1a 97       	mov	r7,sp
800195fe:	49 b6       	lddpc	r6,80019668 <pdca_int_handler_spi0+0x70>
80019600:	1e 26       	rsub	r6,pc
	AVR32_PDCA.channel[SPI0_DMA_CH_RECEIVE].isr;
80019602:	fc 78 00 00 	mov	r8,-196608
80019606:	71 b8       	ld.w	r8,r8[0x6c]
	AVR32_PDCA.channel[SPI0_DMA_CH_TRANSMIT].isr;
80019608:	fc 78 00 00 	mov	r8,-196608
8001960c:	70 b8       	ld.w	r8,r8[0x2c]
	pdca_disable(SPI0_DMA_CH_RECEIVE);
8001960e:	30 1c       	mov	r12,1
80019610:	f0 16 00 83 	mcall	r6[524]
	pdca_disable(SPI0_DMA_CH_TRANSMIT);
80019614:	30 0c       	mov	r12,0
80019616:	f0 16 00 83 	mcall	r6[524]
	pdca_disable_interrupt_transfer_complete(SPI0_DMA_CH_RECEIVE);
8001961a:	30 1c       	mov	r12,1
8001961c:	f0 16 00 9f 	mcall	r6[636]
	spi_deselect_device(spi_buffers[0].spi, &spi_buffers[0].adc_spi);
80019620:	ec f8 00 2c 	ld.w	r8,r6[44]
80019624:	70 08       	ld.w	r8,r8[0x0]
80019626:	ec f9 00 2c 	ld.w	r9,r6[44]
8001962a:	2b 09       	sub	r9,-80
8001962c:	12 9b       	mov	r11,r9
8001962e:	10 9c       	mov	r12,r8
80019630:	c9 8f       	rcall	80019560 <spi_deselect_device>
   // call callback function to process data, at end of transfer
   // to process data, and maybe add some more data
   spi_buffers[0].SPIinBufferTail=spi_buffers[0].transmission_in_progress;
80019632:	ec f8 00 2c 	ld.w	r8,r6[44]
80019636:	f1 38 00 4a 	ld.ub	r8,r8[74]
8001963a:	5c 58       	castu.b	r8
8001963c:	ec f9 00 2c 	ld.w	r9,r6[44]
80019640:	f3 68 00 45 	st.b	r9[69],r8
   spi_buffers[0].transmission_in_progress=0;
80019644:	ec f9 00 2c 	ld.w	r9,r6[44]
80019648:	30 08       	mov	r8,0
8001964a:	f3 68 00 4a 	st.b	r9[74],r8
   //spi_buffers[0].traffic++;
   
   if ((spi_buffers[0].callbackFunction)) spi_buffers[0].callbackFunction();
8001964e:	ec f8 00 2c 	ld.w	r8,r6[44]
80019652:	71 38       	ld.w	r8,r8[0x4c]
80019654:	58 08       	cp.w	r8,0
80019656:	c0 50       	breq	80019660 <pdca_int_handler_spi0+0x68>
80019658:	ec f8 00 2c 	ld.w	r8,r6[44]
8001965c:	71 38       	ld.w	r8,r8[0x4c]
8001965e:	5d 18       	icall	r8
   
}
80019660:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80019664:	d6 03       	rete
80019666:	00 00       	add	r0,r0
80019668:	80 01       	ld.sh	r1,r0[0x0]
8001966a:	94 84       	ld.uh	r4,r10[0x0]

8001966c <initSPI>:
/** initialises SPI interface
 *  this interface uses internal buffers and interrupts. 
 *  bytes in the outgoing buffer are sent automatically via interrupt
 */

void initSPI(volatile avr32_spi_t *spi, int spi_index){
8001966c:	eb cd 40 c0 	pushm	r6-r7,lr
80019670:	1a 97       	mov	r7,sp
80019672:	20 2d       	sub	sp,8
80019674:	4e 16       	lddpc	r6,800197f8 <initSPI+0x18c>
80019676:	1e 26       	rsub	r6,pc
80019678:	ef 4c ff fc 	st.w	r7[-4],r12
8001967c:	ef 4b ff f8 	st.w	r7[-8],r11
	// init SPI
	spi_buffers[spi_index].spi= spi;
80019680:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019684:	ec f9 00 2c 	ld.w	r9,r6[44]
80019688:	f0 08 10 54 	mul	r8,r8,84
8001968c:	f2 08 00 08 	add	r8,r9,r8
80019690:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019694:	91 09       	st.w	r8[0x0],r9
	
	spi_buffers[spi_index].adc_spi.id=0;
80019696:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001969a:	ec f9 00 2c 	ld.w	r9,r6[44]
8001969e:	f0 08 10 54 	mul	r8,r8,84
800196a2:	f2 08 00 08 	add	r8,r9,r8
800196a6:	f0 c9 ff b0 	sub	r9,r8,-80
800196aa:	30 08       	mov	r8,0
800196ac:	b2 88       	st.b	r9[0x0],r8
	
	spi_master_init(spi_buffers[spi_index].spi);
800196ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800196b2:	ec f9 00 2c 	ld.w	r9,r6[44]
800196b6:	f0 08 10 54 	mul	r8,r8,84
800196ba:	f2 08 00 08 	add	r8,r9,r8
800196be:	70 08       	ld.w	r8,r8[0x0]
800196c0:	10 9c       	mov	r12,r8
800196c2:	c0 1f       	rcall	800194c4 <spi_master_init>
	spi_master_setup_device(spi_buffers[spi_index].spi, &spi_buffers[spi_index].adc_spi, SPI_MODE_0, 20000000, 0);
800196c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800196c8:	f0 08 10 54 	mul	r8,r8,84
800196cc:	f0 c9 ff b0 	sub	r9,r8,-80
800196d0:	ec f8 00 2c 	ld.w	r8,r6[44]
800196d4:	f2 08 00 0b 	add	r11,r9,r8
800196d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800196dc:	ec f9 00 2c 	ld.w	r9,r6[44]
800196e0:	f0 08 10 54 	mul	r8,r8,84
800196e4:	f2 08 00 08 	add	r8,r9,r8
800196e8:	70 0c       	ld.w	r12,r8[0x0]
800196ea:	30 08       	mov	r8,0
800196ec:	e0 69 2d 00 	mov	r9,11520
800196f0:	ea 19 01 31 	orh	r9,0x131
800196f4:	30 0a       	mov	r10,0
800196f6:	f0 16 01 72 	mcall	r6[1480]
	//spi_buffers[spi_index].spi->cr=AVR32_SPI_SWRST_MASK;
	
	//spi_buffers[spi_index].spi->mr=AVR32_SPI_MSTR_MASK;

	
	gpio_enable_module_pin(AVR32_SPI0_MOSI_0_0_PIN, AVR32_SPI0_MOSI_0_0_FUNCTION);
800196fa:	30 0b       	mov	r11,0
800196fc:	36 0c       	mov	r12,96
800196fe:	f0 16 00 3f 	mcall	r6[252]
	//gpio_configure_pin(AVR32_SPI0_MOSI_0_0_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
	gpio_enable_module_pin(AVR32_SPI0_MISO_0_0_PIN, AVR32_SPI0_MISO_0_0_FUNCTION);
80019702:	30 0b       	mov	r11,0
80019704:	36 1c       	mov	r12,97
80019706:	f0 16 00 3f 	mcall	r6[252]
	gpio_enable_module_pin(AVR32_SPI0_SCK_0_0_PIN, AVR32_SPI0_SCK_0_0_FUNCTION);
8001970a:	30 0b       	mov	r11,0
8001970c:	36 2c       	mov	r12,98
8001970e:	f0 16 00 3f 	mcall	r6[252]

	spi_buffers[spi_index].SPIinBufferHead=0;
80019712:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019716:	ec f9 00 2c 	ld.w	r9,r6[44]
8001971a:	f0 08 10 54 	mul	r8,r8,84
8001971e:	f2 08 00 08 	add	r8,r9,r8
80019722:	f0 c9 ff bc 	sub	r9,r8,-68
80019726:	30 08       	mov	r8,0
80019728:	b2 88       	st.b	r9[0x0],r8
	spi_buffers[spi_index].SPIinBufferTail=0;
8001972a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001972e:	ec f9 00 2c 	ld.w	r9,r6[44]
80019732:	f0 08 10 54 	mul	r8,r8,84
80019736:	f2 08 00 08 	add	r8,r9,r8
8001973a:	f0 c9 ff bc 	sub	r9,r8,-68
8001973e:	30 08       	mov	r8,0
80019740:	b2 98       	st.b	r9[0x1],r8
	spi_buffers[spi_index].SPIoutBufferHead=0;
80019742:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019746:	ec f9 00 2c 	ld.w	r9,r6[44]
8001974a:	f0 08 10 54 	mul	r8,r8,84
8001974e:	f2 08 00 08 	add	r8,r9,r8
80019752:	f0 c9 ff bc 	sub	r9,r8,-68
80019756:	30 08       	mov	r8,0
80019758:	b2 a8       	st.b	r9[0x2],r8
	spi_buffers[spi_index].SPIoutBufferTail=0;
8001975a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001975e:	ec f9 00 2c 	ld.w	r9,r6[44]
80019762:	f0 08 10 54 	mul	r8,r8,84
80019766:	f2 08 00 08 	add	r8,r9,r8
8001976a:	f0 c9 ff bc 	sub	r9,r8,-68
8001976e:	30 08       	mov	r8,0
80019770:	b2 b8       	st.b	r9[0x3],r8
	spi_buffers[spi_index].spiReceiverOn=1;
80019772:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019776:	ec f9 00 2c 	ld.w	r9,r6[44]
8001977a:	f0 08 10 54 	mul	r8,r8,84
8001977e:	f2 08 00 08 	add	r8,r9,r8
80019782:	f0 c9 ff b8 	sub	r9,r8,-72
80019786:	30 18       	mov	r8,1
80019788:	b2 88       	st.b	r9[0x0],r8
	spi_buffers[spi_index].traffic=0;
8001978a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001978e:	ec f9 00 2c 	ld.w	r9,r6[44]
80019792:	f0 08 10 54 	mul	r8,r8,84
80019796:	f2 08 00 08 	add	r8,r9,r8
8001979a:	f0 c9 ff b8 	sub	r9,r8,-72
8001979e:	30 08       	mov	r8,0
800197a0:	b2 98       	st.b	r9[0x1],r8
	spi_buffers[spi_index].automatic=1;
800197a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800197a6:	ec f9 00 2c 	ld.w	r9,r6[44]
800197aa:	f0 08 10 54 	mul	r8,r8,84
800197ae:	f2 08 00 08 	add	r8,r9,r8
800197b2:	f0 c9 ff b8 	sub	r9,r8,-72
800197b6:	30 18       	mov	r8,1
800197b8:	b2 b8       	st.b	r9[0x3],r8
	spi_buffers[spi_index].callbackFunction=0;
800197ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800197be:	ec f9 00 2c 	ld.w	r9,r6[44]
800197c2:	f0 08 10 54 	mul	r8,r8,84
800197c6:	f2 08 00 08 	add	r8,r9,r8
800197ca:	2b 48       	sub	r8,-76
800197cc:	30 09       	mov	r9,0
800197ce:	91 09       	st.w	r8[0x0],r9
	spi_buffers[spi_index].transmission_in_progress=0;
800197d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800197d4:	ec f9 00 2c 	ld.w	r9,r6[44]
800197d8:	f0 08 10 54 	mul	r8,r8,84
800197dc:	f2 08 00 08 	add	r8,r9,r8
800197e0:	f0 c9 ff b8 	sub	r9,r8,-72
800197e4:	30 08       	mov	r8,0
800197e6:	b2 a8       	st.b	r9[0x2],r8
    //INTC_register_interrupt(&spi0_int_handler, AVR32_SPI0_IRQ, AVR32_INTC_INT0);
	
    //INTC_register_interrupt(&spi1_int_handler, AVR32_SPI1_IRQ, AVR32_INTC_INT0);
	//spi_buffers[spi_index].spi->imr = AVR32_SPI_RDRF;

	enableSPI(spi_index);
800197e8:	ee fc ff f8 	ld.w	r12,r7[-8]
800197ec:	f0 16 01 b5 	mcall	r6[1748]
	//spi_buffers[spi_index].spi->cr=AVR32_SPI_SPIEN_MASK;	
}
800197f0:	2f ed       	sub	sp,-8
800197f2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800197f6:	00 00       	add	r0,r0
800197f8:	80 01       	ld.sh	r1,r0[0x0]
800197fa:	94 fa       	ld.uh	r10,r10[0xe]

800197fc <enableSPI>:

void enableSPI(int spi_index) {
800197fc:	eb cd 40 c0 	pushm	r6-r7,lr
80019800:	1a 97       	mov	r7,sp
80019802:	20 1d       	sub	sp,4
80019804:	48 a6       	lddpc	r6,8001982c <enableSPI+0x30>
80019806:	1e 26       	rsub	r6,pc
80019808:	ef 4c ff fc 	st.w	r7[-4],r12
	spi_enable(spi_buffers[spi_index].spi);
8001980c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019810:	ec f9 00 2c 	ld.w	r9,r6[44]
80019814:	f0 08 10 54 	mul	r8,r8,84
80019818:	f2 08 00 08 	add	r8,r9,r8
8001981c:	70 08       	ld.w	r8,r8[0x0]
8001981e:	10 9c       	mov	r12,r8
80019820:	f0 16 01 b7 	mcall	r6[1756]
}
80019824:	2f fd       	sub	sp,-4
80019826:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001982a:	00 00       	add	r0,r0
8001982c:	80 01       	ld.sh	r1,r0[0x0]
8001982e:	96 8a       	ld.uh	r10,r11[0x0]

80019830 <disableSPI>:

void disableSPI(int spi_index) {
80019830:	eb cd 40 c0 	pushm	r6-r7,lr
80019834:	1a 97       	mov	r7,sp
80019836:	20 1d       	sub	sp,4
80019838:	48 a6       	lddpc	r6,80019860 <disableSPI+0x30>
8001983a:	1e 26       	rsub	r6,pc
8001983c:	ef 4c ff fc 	st.w	r7[-4],r12
	spi_disable(spi_buffers[spi_index].spi);
80019840:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019844:	ec f9 00 2c 	ld.w	r9,r6[44]
80019848:	f0 08 10 54 	mul	r8,r8,84
8001984c:	f2 08 00 08 	add	r8,r9,r8
80019850:	70 08       	ld.w	r8,r8[0x0]
80019852:	10 9c       	mov	r12,r8
80019854:	f0 16 01 59 	mcall	r6[1380]
}
80019858:	2f fd       	sub	sp,-4
8001985a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001985e:	00 00       	add	r0,r0
80019860:	80 01       	ld.sh	r1,r0[0x0]
80019862:	96 be       	ld.uh	lr,r11[0x6]

80019864 <spiInitDMA>:


// initialise DMA for SPI transfers
  // PDCA channel options
  
void spiInitDMA(int spi_index, int block_size) {
80019864:	eb cd 40 c0 	pushm	r6-r7,lr
80019868:	1a 97       	mov	r7,sp
8001986a:	20 2d       	sub	sp,8
8001986c:	49 c6       	lddpc	r6,800198dc <spiInitDMA+0x78>
8001986e:	1e 26       	rsub	r6,pc
80019870:	ef 4c ff fc 	st.w	r7[-4],r12
80019874:	ef 4b ff f8 	st.w	r7[-8],r11
    .size = 12,                               // transfer counter
    .r_addr = NULL,                           // next memory address
    .r_size = 0,                              // next transfer counter
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer
  };
  PDCA_TX_OPTIONS.addr=(void *) spi_buffers[spi_index].SPIOutBuffer;
80019878:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001987c:	12 98       	mov	r8,r9
8001987e:	a1 78       	lsl	r8,0x1
80019880:	12 08       	add	r8,r9
80019882:	f0 09 15 03 	lsl	r9,r8,0x3
80019886:	10 19       	sub	r9,r8
80019888:	f2 c8 ff ff 	sub	r8,r9,-1
8001988c:	f0 09 15 02 	lsl	r9,r8,0x2
80019890:	ec f8 00 2c 	ld.w	r8,r6[44]
80019894:	10 09       	add	r9,r8
80019896:	ec f8 04 e8 	ld.w	r8,r6[1256]
8001989a:	91 09       	st.w	r8[0x0],r9
  PDCA_RX_OPTIONS.addr=(void *) spi_buffers[spi_index].SPIInBuffer;
8001989c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800198a0:	f0 08 10 54 	mul	r8,r8,84
800198a4:	f0 c9 ff dc 	sub	r9,r8,-36
800198a8:	ec f8 00 2c 	ld.w	r8,r6[44]
800198ac:	10 09       	add	r9,r8
800198ae:	ec f8 04 e4 	ld.w	r8,r6[1252]
800198b2:	91 09       	st.w	r8[0x0],r9
  // Init PDCA channel with the pdca_options.
  pdca_init_channel(SPI0_DMA_CH_TRANSMIT, &PDCA_TX_OPTIONS); // init PDCA channel with options.
800198b4:	ec fb 04 e8 	ld.w	r11,r6[1256]
800198b8:	30 0c       	mov	r12,0
800198ba:	f0 16 00 7a 	mcall	r6[488]
  pdca_init_channel(SPI0_DMA_CH_RECEIVE, &PDCA_RX_OPTIONS); // init PDCA channel with options.
800198be:	ec fb 04 e4 	ld.w	r11,r6[1252]
800198c2:	30 1c       	mov	r12,1
800198c4:	f0 16 00 7a 	mcall	r6[488]

  // Register PDCA IRQ interrupt.

  INTC_register_interrupt( (__int_handler) &pdca_int_handler_spi0, SPI0_DMA_IRQ, AVR32_INTC_INT0);
800198c8:	30 0a       	mov	r10,0
800198ca:	36 1b       	mov	r11,97
800198cc:	fe cc 02 d4 	sub	r12,pc,724
800198d0:	f0 16 00 3b 	mcall	r6[236]
  
  
}
800198d4:	2f ed       	sub	sp,-8
800198d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800198da:	00 00       	add	r0,r0
800198dc:	80 01       	ld.sh	r1,r0[0x0]
800198de:	96 f2       	ld.uh	r2,r11[0xe]

800198e0 <spiTriggerDMA>:

void spiTriggerDMA(int spi_index, int block_size){
800198e0:	eb cd 40 c0 	pushm	r6-r7,lr
800198e4:	1a 97       	mov	r7,sp
800198e6:	20 2d       	sub	sp,8
800198e8:	4a 86       	lddpc	r6,80019988 <spiTriggerDMA+0xa8>
800198ea:	1e 26       	rsub	r6,pc
800198ec:	ef 4c ff fc 	st.w	r7[-4],r12
800198f0:	ef 4b ff f8 	st.w	r7[-8],r11
	//spi_buffers[spi_index].transmission_in_progress=block_size;
	//spi_buffers[spi_index].SPIInBuffer[0]=42;
	//spi_buffers[spi_index].SPIInBuffer[3]=42;
	//spi_buffers[spi_index].SPIInBuffer[6]=42;
	//spi_buffers[spi_index].SPIInBuffer[9]=42;
	pdca_load_channel(SPI0_DMA_CH_TRANSMIT, (void *)spi_buffers[spi_index].SPIOutBuffer, block_size);
800198f4:	ee fa ff f8 	ld.w	r10,r7[-8]
800198f8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800198fc:	12 98       	mov	r8,r9
800198fe:	a1 78       	lsl	r8,0x1
80019900:	12 08       	add	r8,r9
80019902:	f0 09 15 03 	lsl	r9,r8,0x3
80019906:	10 19       	sub	r9,r8
80019908:	f2 c8 ff ff 	sub	r8,r9,-1
8001990c:	f0 09 15 02 	lsl	r9,r8,0x2
80019910:	ec f8 00 2c 	ld.w	r8,r6[44]
80019914:	f2 08 00 08 	add	r8,r9,r8
80019918:	10 9b       	mov	r11,r8
8001991a:	30 0c       	mov	r12,0
8001991c:	f0 16 00 bf 	mcall	r6[764]
	pdca_load_channel(SPI0_DMA_CH_RECEIVE,  (void *)(spi_buffers[spi_index].SPIInBuffer), block_size);
80019920:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019924:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019928:	f0 08 10 54 	mul	r8,r8,84
8001992c:	f0 ca ff dc 	sub	r10,r8,-36
80019930:	ec f8 00 2c 	ld.w	r8,r6[44]
80019934:	f4 08 00 08 	add	r8,r10,r8
80019938:	12 9a       	mov	r10,r9
8001993a:	10 9b       	mov	r11,r8
8001993c:	30 1c       	mov	r12,1
8001993e:	f0 16 00 bf 	mcall	r6[764]

	
	spi_select_device(spi_buffers[spi_index].spi, &spi_buffers[spi_index].adc_spi);
80019942:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019946:	f0 08 10 54 	mul	r8,r8,84
8001994a:	f0 c9 ff b0 	sub	r9,r8,-80
8001994e:	ec f8 00 2c 	ld.w	r8,r6[44]
80019952:	10 09       	add	r9,r8
80019954:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019958:	ec fa 00 2c 	ld.w	r10,r6[44]
8001995c:	f0 08 10 54 	mul	r8,r8,84
80019960:	f4 08 00 08 	add	r8,r10,r8
80019964:	70 08       	ld.w	r8,r8[0x0]
80019966:	12 9b       	mov	r11,r9
80019968:	10 9c       	mov	r12,r8
8001996a:	fe b0 fd e3 	rcall	80019530 <spi_select_device>
	// Enable pdca interrupt each time the reload counter reaches zero, i.e. each time
    // the whole block was received
	pdca_enable_interrupt_transfer_complete(SPI0_DMA_CH_RECEIVE);
8001996e:	30 1c       	mov	r12,1
80019970:	f0 16 00 be 	mcall	r6[760]
	
	pdca_enable(SPI0_DMA_CH_RECEIVE);
80019974:	30 1c       	mov	r12,1
80019976:	f0 16 00 96 	mcall	r6[600]
	pdca_enable(SPI0_DMA_CH_TRANSMIT);
8001997a:	30 0c       	mov	r12,0
8001997c:	f0 16 00 96 	mcall	r6[600]
    
}
80019980:	2f ed       	sub	sp,-8
80019982:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019986:	00 00       	add	r0,r0
80019988:	80 01       	ld.sh	r1,r0[0x0]
8001998a:	97 6e       	st.w	r11[0x18],lr

8001998c <setSPIcallBack>:

/** specify a callback function, that gets called when the SPI buffer is empty
 */
void setSPIcallBack(int spi_index, functionpointer* functionPointer) {
8001998c:	eb cd 40 c0 	pushm	r6-r7,lr
80019990:	1a 97       	mov	r7,sp
80019992:	20 2d       	sub	sp,8
80019994:	48 b6       	lddpc	r6,800199c0 <setSPIcallBack+0x34>
80019996:	1e 26       	rsub	r6,pc
80019998:	ef 4c ff fc 	st.w	r7[-4],r12
8001999c:	ef 4b ff f8 	st.w	r7[-8],r11
	spi_buffers[spi_index].callbackFunction=functionPointer;
800199a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800199a4:	ec f9 00 2c 	ld.w	r9,r6[44]
800199a8:	f0 08 10 54 	mul	r8,r8,84
800199ac:	f2 08 00 08 	add	r8,r9,r8
800199b0:	2b 48       	sub	r8,-76
800199b2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800199b6:	91 09       	st.w	r8[0x0],r9
}
800199b8:	2f ed       	sub	sp,-8
800199ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800199be:	00 00       	add	r0,r0
800199c0:	80 01       	ld.sh	r1,r0[0x0]
800199c2:	98 1a       	ld.sh	r10,r12[0x2]

800199c4 <pauseSPI>:

/** pauses sending 
  * be careful not to overfill the buffer - deadlock may occur  
  */
void pauseSPI(int spi_index){
800199c4:	eb cd 40 c0 	pushm	r6-r7,lr
800199c8:	1a 97       	mov	r7,sp
800199ca:	20 1d       	sub	sp,4
800199cc:	48 a6       	lddpc	r6,800199f4 <pauseSPI+0x30>
800199ce:	1e 26       	rsub	r6,pc
800199d0:	ef 4c ff fc 	st.w	r7[-4],r12
   spi_buffers[spi_index].automatic=0;
800199d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800199d8:	ec f9 00 2c 	ld.w	r9,r6[44]
800199dc:	f0 08 10 54 	mul	r8,r8,84
800199e0:	f2 08 00 08 	add	r8,r9,r8
800199e4:	f0 c9 ff b8 	sub	r9,r8,-72
800199e8:	30 08       	mov	r8,0
800199ea:	b2 b8       	st.b	r9[0x3],r8
}
800199ec:	2f fd       	sub	sp,-4
800199ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800199f2:	00 00       	add	r0,r0
800199f4:	80 01       	ld.sh	r1,r0[0x0]
800199f6:	98 52       	ld.sh	r2,r12[0xa]

800199f8 <resumeSPI>:

/** resumes automatic sending
 */
void resumeSPI(int spi_index){
800199f8:	eb cd 40 c0 	pushm	r6-r7,lr
800199fc:	1a 97       	mov	r7,sp
800199fe:	20 1d       	sub	sp,4
80019a00:	48 c6       	lddpc	r6,80019a30 <resumeSPI+0x38>
80019a02:	1e 26       	rsub	r6,pc
80019a04:	ef 4c ff fc 	st.w	r7[-4],r12
  spi_buffers[spi_index].automatic=1;
80019a08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019a0c:	ec f9 00 2c 	ld.w	r9,r6[44]
80019a10:	f0 08 10 54 	mul	r8,r8,84
80019a14:	f2 08 00 08 	add	r8,r9,r8
80019a18:	f0 c9 ff b8 	sub	r9,r8,-72
80019a1c:	30 18       	mov	r8,1
80019a1e:	b2 b8       	st.b	r9[0x3],r8
  startSPI(spi_index);
80019a20:	ee fc ff fc 	ld.w	r12,r7[-4]
80019a24:	f0 16 00 f3 	mcall	r6[972]
}
80019a28:	2f fd       	sub	sp,-4
80019a2a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019a2e:	00 00       	add	r0,r0
80019a30:	80 01       	ld.sh	r1,r0[0x0]
80019a32:	98 86       	ld.uh	r6,r12[0x0]

80019a34 <activateReceiveSPI>:

void activateReceiveSPI(int spi_index){
80019a34:	eb cd 40 c0 	pushm	r6-r7,lr
80019a38:	1a 97       	mov	r7,sp
80019a3a:	20 1d       	sub	sp,4
80019a3c:	48 a6       	lddpc	r6,80019a64 <activateReceiveSPI+0x30>
80019a3e:	1e 26       	rsub	r6,pc
80019a40:	ef 4c ff fc 	st.w	r7[-4],r12

  spi_buffers[spi_index].spiReceiverOn=1;
80019a44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019a48:	ec f9 00 2c 	ld.w	r9,r6[44]
80019a4c:	f0 08 10 54 	mul	r8,r8,84
80019a50:	f2 08 00 08 	add	r8,r9,r8
80019a54:	f0 c9 ff b8 	sub	r9,r8,-72
80019a58:	30 18       	mov	r8,1
80019a5a:	b2 88       	st.b	r9[0x0],r8
}
80019a5c:	2f fd       	sub	sp,-4
80019a5e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019a62:	00 00       	add	r0,r0
80019a64:	80 01       	ld.sh	r1,r0[0x0]
80019a66:	98 c2       	ld.uh	r2,r12[0x8]

80019a68 <deactivateReceiveSPI>:

void deactivateReceiveSPI(int spi_index){
80019a68:	eb cd 40 c0 	pushm	r6-r7,lr
80019a6c:	1a 97       	mov	r7,sp
80019a6e:	20 1d       	sub	sp,4
80019a70:	48 a6       	lddpc	r6,80019a98 <deactivateReceiveSPI+0x30>
80019a72:	1e 26       	rsub	r6,pc
80019a74:	ef 4c ff fc 	st.w	r7[-4],r12
  spi_buffers[spi_index].spiReceiverOn=0;
80019a78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019a7c:	ec f9 00 2c 	ld.w	r9,r6[44]
80019a80:	f0 08 10 54 	mul	r8,r8,84
80019a84:	f2 08 00 08 	add	r8,r9,r8
80019a88:	f0 c9 ff b8 	sub	r9,r8,-72
80019a8c:	30 08       	mov	r8,0
80019a8e:	b2 88       	st.b	r9[0x0],r8
}
80019a90:	2f fd       	sub	sp,-4
80019a92:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019a96:	00 00       	add	r0,r0
80019a98:	80 01       	ld.sh	r1,r0[0x0]
80019a9a:	98 f6       	ld.uh	r6,r12[0xe]

80019a9c <getTraffic>:
uint8_t getTraffic(int spi_index) {return spi_buffers[spi_index].traffic;}
80019a9c:	eb cd 40 c0 	pushm	r6-r7,lr
80019aa0:	1a 97       	mov	r7,sp
80019aa2:	20 1d       	sub	sp,4
80019aa4:	48 a6       	lddpc	r6,80019acc <getTraffic+0x30>
80019aa6:	1e 26       	rsub	r6,pc
80019aa8:	ef 4c ff fc 	st.w	r7[-4],r12
80019aac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019ab0:	ec f9 00 2c 	ld.w	r9,r6[44]
80019ab4:	f0 08 10 54 	mul	r8,r8,84
80019ab8:	f2 08 00 08 	add	r8,r9,r8
80019abc:	2b 88       	sub	r8,-72
80019abe:	11 98       	ld.ub	r8,r8[0x1]
80019ac0:	5c 58       	castu.b	r8
80019ac2:	10 9c       	mov	r12,r8
80019ac4:	2f fd       	sub	sp,-4
80019ac6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019aca:	00 00       	add	r0,r0
80019acc:	80 01       	ld.sh	r1,r0[0x0]
80019ace:	99 2a       	st.w	r12[0x8],r10

80019ad0 <readSPI>:


/** reads one byte from the incoming SPI buffer
 */
uint8_t readSPI(int spi_index){
80019ad0:	eb cd 40 c0 	pushm	r6-r7,lr
80019ad4:	1a 97       	mov	r7,sp
80019ad6:	20 2d       	sub	sp,8
80019ad8:	4a b6       	lddpc	r6,80019b84 <readSPI+0xb4>
80019ada:	1e 26       	rsub	r6,pc
80019adc:	ef 4c ff f8 	st.w	r7[-8],r12
  uint8_t byte;
  // if buffer empty, wait for incoming data
  while (spi_buffers[spi_index].SPIinBufferHead==spi_buffers[spi_index].SPIinBufferTail);
80019ae0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019ae4:	ec f9 00 2c 	ld.w	r9,r6[44]
80019ae8:	f0 08 10 54 	mul	r8,r8,84
80019aec:	f2 08 00 08 	add	r8,r9,r8
80019af0:	2b c8       	sub	r8,-68
80019af2:	11 88       	ld.ub	r8,r8[0x0]
80019af4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80019af8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019afc:	ec fa 00 2c 	ld.w	r10,r6[44]
80019b00:	f0 08 10 54 	mul	r8,r8,84
80019b04:	f4 08 00 08 	add	r8,r10,r8
80019b08:	2b c8       	sub	r8,-68
80019b0a:	11 98       	ld.ub	r8,r8[0x1]
80019b0c:	5c 58       	castu.b	r8
80019b0e:	f0 09 18 00 	cp.b	r9,r8
80019b12:	ce 70       	breq	80019ae0 <readSPI+0x10>
  byte=spi_buffers[spi_index].SPIInBuffer[spi_buffers[spi_index].SPIinBufferTail];
80019b14:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019b18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019b1c:	ec fa 00 2c 	ld.w	r10,r6[44]
80019b20:	f0 08 10 54 	mul	r8,r8,84
80019b24:	f4 08 00 08 	add	r8,r10,r8
80019b28:	2b c8       	sub	r8,-68
80019b2a:	11 98       	ld.ub	r8,r8[0x1]
80019b2c:	5c 58       	castu.b	r8
80019b2e:	ec fa 00 2c 	ld.w	r10,r6[44]
80019b32:	f2 09 10 54 	mul	r9,r9,84
80019b36:	f4 09 00 09 	add	r9,r10,r9
80019b3a:	f2 08 00 08 	add	r8,r9,r8
80019b3e:	2d c8       	sub	r8,-36
80019b40:	11 88       	ld.ub	r8,r8[0x0]
80019b42:	ef 68 ff ff 	st.b	r7[-1],r8
  spi_buffers[spi_index].SPIinBufferTail=  (spi_buffers[spi_index].SPIinBufferTail+1)&SPI_BUFFER_MASK;
80019b46:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019b4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019b4e:	ec fa 00 2c 	ld.w	r10,r6[44]
80019b52:	f0 08 10 54 	mul	r8,r8,84
80019b56:	f4 08 00 08 	add	r8,r10,r8
80019b5a:	2b c8       	sub	r8,-68
80019b5c:	11 98       	ld.ub	r8,r8[0x1]
80019b5e:	5c 58       	castu.b	r8
80019b60:	2f f8       	sub	r8,-1
80019b62:	5c 58       	castu.b	r8
80019b64:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80019b68:	ec fa 00 2c 	ld.w	r10,r6[44]
80019b6c:	f2 09 10 54 	mul	r9,r9,84
80019b70:	f4 09 00 09 	add	r9,r10,r9
80019b74:	2b c9       	sub	r9,-68
80019b76:	b2 98       	st.b	r9[0x1],r8
  return byte;
80019b78:	ef 38 ff ff 	ld.ub	r8,r7[-1]

}
80019b7c:	10 9c       	mov	r12,r8
80019b7e:	2f ed       	sub	sp,-8
80019b80:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019b84:	80 01       	ld.sh	r1,r0[0x0]
80019b86:	99 5e       	st.w	r12[0x14],lr

80019b88 <clearSPIReadBuffer>:

void clearSPIReadBuffer(int spi_index){
80019b88:	eb cd 40 c0 	pushm	r6-r7,lr
80019b8c:	1a 97       	mov	r7,sp
80019b8e:	20 1d       	sub	sp,4
80019b90:	48 e6       	lddpc	r6,80019bc8 <clearSPIReadBuffer+0x40>
80019b92:	1e 26       	rsub	r6,pc
80019b94:	ef 4c ff fc 	st.w	r7[-4],r12
  spi_buffers[spi_index].SPIinBufferTail=spi_buffers[spi_index].SPIinBufferHead;
80019b98:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019b9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019ba0:	ec fa 00 2c 	ld.w	r10,r6[44]
80019ba4:	f0 08 10 54 	mul	r8,r8,84
80019ba8:	f4 08 00 08 	add	r8,r10,r8
80019bac:	2b c8       	sub	r8,-68
80019bae:	11 88       	ld.ub	r8,r8[0x0]
80019bb0:	5c 58       	castu.b	r8
80019bb2:	ec fa 00 2c 	ld.w	r10,r6[44]
80019bb6:	f2 09 10 54 	mul	r9,r9,84
80019bba:	f4 09 00 09 	add	r9,r10,r9
80019bbe:	2b c9       	sub	r9,-68
80019bc0:	b2 98       	st.b	r9[0x1],r8
}
80019bc2:	2f fd       	sub	sp,-4
80019bc4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019bc8:	80 01       	ld.sh	r1,r0[0x0]
80019bca:	9a 16       	ld.sh	r6,sp[0x2]

80019bcc <writeSPI>:

/** writes one byte to the outgoing SPI buffer
 *  if buffer is full, this method blocks
 *  if sending is paused and buffer runs full, sending is automatically resumed!!
 */
void writeSPI(int spi_index, uint8_t value){
80019bcc:	eb cd 40 c0 	pushm	r6-r7,lr
80019bd0:	1a 97       	mov	r7,sp
80019bd2:	20 3d       	sub	sp,12
80019bd4:	4a b6       	lddpc	r6,80019c80 <writeSPI+0xb4>
80019bd6:	1e 26       	rsub	r6,pc
80019bd8:	ef 4c ff f8 	st.w	r7[-8],r12
80019bdc:	16 98       	mov	r8,r11
80019bde:	ef 68 ff f4 	st.b	r7[-12],r8
  uint8_t newIndex;

  newIndex=(spi_buffers[spi_index].SPIoutBufferHead+1)&SPI_BUFFER_MASK;
80019be2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019be6:	ec f9 00 2c 	ld.w	r9,r6[44]
80019bea:	f0 08 10 54 	mul	r8,r8,84
80019bee:	f2 08 00 08 	add	r8,r9,r8
80019bf2:	2b c8       	sub	r8,-68
80019bf4:	11 a8       	ld.ub	r8,r8[0x2]
80019bf6:	5c 58       	castu.b	r8
80019bf8:	2f f8       	sub	r8,-1
80019bfa:	5c 58       	castu.b	r8
80019bfc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80019c00:	ef 68 ff ff 	st.b	r7[-1],r8
  // check if buffer is already full and wait
  //while (newIndex==spi_buffers[spi_index].SPIoutBufferTail) 
  //{
    //if (spi_buffers[spi_index].automatic==0) resumeSPI(spi_index);
  //}
  spi_buffers[spi_index].SPIOutBuffer[(spi_buffers[spi_index].SPIoutBufferHead)]=value;
80019c04:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019c08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019c0c:	ec fa 00 2c 	ld.w	r10,r6[44]
80019c10:	f0 08 10 54 	mul	r8,r8,84
80019c14:	f4 08 00 08 	add	r8,r10,r8
80019c18:	2b c8       	sub	r8,-68
80019c1a:	11 a8       	ld.ub	r8,r8[0x2]
80019c1c:	5c 58       	castu.b	r8
80019c1e:	ec fa 00 2c 	ld.w	r10,r6[44]
80019c22:	f2 09 10 54 	mul	r9,r9,84
80019c26:	f4 09 00 09 	add	r9,r10,r9
80019c2a:	f2 08 00 08 	add	r8,r9,r8
80019c2e:	f0 c9 ff fc 	sub	r9,r8,-4
80019c32:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80019c36:	b2 88       	st.b	r9[0x0],r8
  spi_buffers[spi_index].SPIoutBufferHead = newIndex;
80019c38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019c3c:	ec f9 00 2c 	ld.w	r9,r6[44]
80019c40:	f0 08 10 54 	mul	r8,r8,84
80019c44:	f2 08 00 08 	add	r8,r9,r8
80019c48:	f0 c9 ff bc 	sub	r9,r8,-68
80019c4c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80019c50:	b2 a8       	st.b	r9[0x2],r8


  if (spi_buffers[spi_index].automatic==1) startSPI(spi_index);
80019c52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019c56:	ec f9 00 2c 	ld.w	r9,r6[44]
80019c5a:	f0 08 10 54 	mul	r8,r8,84
80019c5e:	f2 08 00 08 	add	r8,r9,r8
80019c62:	2b 88       	sub	r8,-72
80019c64:	11 b8       	ld.ub	r8,r8[0x3]
80019c66:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80019c6a:	30 18       	mov	r8,1
80019c6c:	f0 09 18 00 	cp.b	r9,r8
80019c70:	c0 51       	brne	80019c7a <writeSPI+0xae>
80019c72:	ee fc ff f8 	ld.w	r12,r7[-8]
80019c76:	f0 16 00 f3 	mcall	r6[972]
}
80019c7a:	2f dd       	sub	sp,-12
80019c7c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019c80:	80 01       	ld.sh	r1,r0[0x0]
80019c82:	9a 5a       	ld.sh	r10,sp[0xa]

80019c84 <SPItransmit>:

void SPItransmit(int spi_index) {
80019c84:	eb cd 40 c0 	pushm	r6-r7,lr
80019c88:	1a 97       	mov	r7,sp
80019c8a:	20 1d       	sub	sp,4
80019c8c:	4d 66       	lddpc	r6,80019de4 <SPItransmit+0x160>
80019c8e:	1e 26       	rsub	r6,pc
80019c90:	ef 4c ff fc 	st.w	r7[-4],r12
 if (spi_buffers[spi_index].SPIoutBufferHead!=spi_buffers[spi_index].SPIoutBufferTail) 
80019c94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019c98:	ec f9 00 2c 	ld.w	r9,r6[44]
80019c9c:	f0 08 10 54 	mul	r8,r8,84
80019ca0:	f2 08 00 08 	add	r8,r9,r8
80019ca4:	2b c8       	sub	r8,-68
80019ca6:	11 a8       	ld.ub	r8,r8[0x2]
80019ca8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80019cac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019cb0:	ec fa 00 2c 	ld.w	r10,r6[44]
80019cb4:	f0 08 10 54 	mul	r8,r8,84
80019cb8:	f4 08 00 08 	add	r8,r10,r8
80019cbc:	2b c8       	sub	r8,-68
80019cbe:	11 b8       	ld.ub	r8,r8[0x3]
80019cc0:	5c 58       	castu.b	r8
80019cc2:	f0 09 18 00 	cp.b	r9,r8
80019cc6:	c4 90       	breq	80019d58 <SPItransmit+0xd4>
 {
    // read data from buffer and copy it to SPI unit
	spi_buffers[spi_index].spi->tdr = spi_buffers[spi_index].SPIOutBuffer[spi_buffers[spi_index].SPIoutBufferTail];
80019cc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019ccc:	ec f9 00 2c 	ld.w	r9,r6[44]
80019cd0:	f0 08 10 54 	mul	r8,r8,84
80019cd4:	f2 08 00 08 	add	r8,r9,r8
80019cd8:	70 09       	ld.w	r9,r8[0x0]
80019cda:	ee fa ff fc 	ld.w	r10,r7[-4]
80019cde:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019ce2:	ec fb 00 2c 	ld.w	r11,r6[44]
80019ce6:	f0 08 10 54 	mul	r8,r8,84
80019cea:	f6 08 00 08 	add	r8,r11,r8
80019cee:	2b c8       	sub	r8,-68
80019cf0:	11 b8       	ld.ub	r8,r8[0x3]
80019cf2:	5c 58       	castu.b	r8
80019cf4:	ec fb 00 2c 	ld.w	r11,r6[44]
80019cf8:	f4 0a 10 54 	mul	r10,r10,84
80019cfc:	f6 0a 00 0a 	add	r10,r11,r10
80019d00:	f4 08 00 08 	add	r8,r10,r8
80019d04:	2f c8       	sub	r8,-4
80019d06:	11 88       	ld.ub	r8,r8[0x0]
80019d08:	5c 58       	castu.b	r8
80019d0a:	93 38       	st.w	r9[0xc],r8
    spi_buffers[spi_index].transmission_in_progress=1;    
80019d0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019d10:	ec f9 00 2c 	ld.w	r9,r6[44]
80019d14:	f0 08 10 54 	mul	r8,r8,84
80019d18:	f2 08 00 08 	add	r8,r9,r8
80019d1c:	f0 c9 ff b8 	sub	r9,r8,-72
80019d20:	30 18       	mov	r8,1
80019d22:	b2 a8       	st.b	r9[0x2],r8
    // update buffer index
    spi_buffers[spi_index].SPIoutBufferTail=  (spi_buffers[spi_index].SPIoutBufferTail+1)&SPI_BUFFER_MASK;
80019d24:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019d28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019d2c:	ec fa 00 2c 	ld.w	r10,r6[44]
80019d30:	f0 08 10 54 	mul	r8,r8,84
80019d34:	f4 08 00 08 	add	r8,r10,r8
80019d38:	2b c8       	sub	r8,-68
80019d3a:	11 b8       	ld.ub	r8,r8[0x3]
80019d3c:	5c 58       	castu.b	r8
80019d3e:	2f f8       	sub	r8,-1
80019d40:	5c 58       	castu.b	r8
80019d42:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80019d46:	ec fa 00 2c 	ld.w	r10,r6[44]
80019d4a:	f2 09 10 54 	mul	r9,r9,84
80019d4e:	f4 09 00 09 	add	r9,r10,r9
80019d52:	2b c9       	sub	r9,-68
80019d54:	b2 b8       	st.b	r9[0x3],r8
80019d56:	c4 38       	rjmp	80019ddc <SPItransmit+0x158>
	//spi_enable(spi_buffers[spi_index].spi);

  } else {
    spi_buffers[spi_index].SPIoutBufferTail=spi_buffers[spi_index].SPIoutBufferHead;
80019d58:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019d5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019d60:	ec fa 00 2c 	ld.w	r10,r6[44]
80019d64:	f0 08 10 54 	mul	r8,r8,84
80019d68:	f4 08 00 08 	add	r8,r10,r8
80019d6c:	2b c8       	sub	r8,-68
80019d6e:	11 a8       	ld.ub	r8,r8[0x2]
80019d70:	5c 58       	castu.b	r8
80019d72:	ec fa 00 2c 	ld.w	r10,r6[44]
80019d76:	f2 09 10 54 	mul	r9,r9,84
80019d7a:	f4 09 00 09 	add	r9,r10,r9
80019d7e:	2b c9       	sub	r9,-68
80019d80:	b2 b8       	st.b	r9[0x3],r8
    //PORTB |= _BV(SPI_CS);	// pull chip select high to end transmission
	spi_deselect_device(spi_buffers[spi_index].spi, &spi_buffers[spi_index].adc_spi);
80019d82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019d86:	f0 08 10 54 	mul	r8,r8,84
80019d8a:	f0 c9 ff b0 	sub	r9,r8,-80
80019d8e:	ec f8 00 2c 	ld.w	r8,r6[44]
80019d92:	10 09       	add	r9,r8
80019d94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019d98:	ec fa 00 2c 	ld.w	r10,r6[44]
80019d9c:	f0 08 10 54 	mul	r8,r8,84
80019da0:	f4 08 00 08 	add	r8,r10,r8
80019da4:	70 08       	ld.w	r8,r8[0x0]
80019da6:	12 9b       	mov	r11,r9
80019da8:	10 9c       	mov	r12,r8
80019daa:	fe b0 fb db 	rcall	80019560 <spi_deselect_device>
    spi_buffers[spi_index].transmission_in_progress=0;
80019dae:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019db2:	ec f9 00 2c 	ld.w	r9,r6[44]
80019db6:	f0 08 10 54 	mul	r8,r8,84
80019dba:	f2 08 00 08 	add	r8,r9,r8
80019dbe:	f0 c9 ff b8 	sub	r9,r8,-72
80019dc2:	30 08       	mov	r8,0
80019dc4:	b2 a8       	st.b	r9[0x2],r8
	spi_buffers[spi_index].spi->idr =AVR32_SPI_IER_RDRF_MASK | AVR32_SPI_IER_TDRE_MASK;
80019dc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019dca:	ec f9 00 2c 	ld.w	r9,r6[44]
80019dce:	f0 08 10 54 	mul	r8,r8,84
80019dd2:	f2 08 00 08 	add	r8,r9,r8
80019dd6:	70 08       	ld.w	r8,r8[0x0]
80019dd8:	30 39       	mov	r9,3
80019dda:	91 69       	st.w	r8[0x18],r9
    //SPCR&=~_BV(SPIE);
 }
}
80019ddc:	2f fd       	sub	sp,-4
80019dde:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019de2:	00 00       	add	r0,r0
80019de4:	80 01       	ld.sh	r1,r0[0x0]
80019de6:	9b 12       	st.w	sp[0x4],r2

80019de8 <startSPI>:

/** initiates SPI transmission by sending first byte
*/
void startSPI(int spi_index) {
80019de8:	eb cd 40 c0 	pushm	r6-r7,lr
80019dec:	1a 97       	mov	r7,sp
80019dee:	20 1d       	sub	sp,4
80019df0:	4a f6       	lddpc	r6,80019eac <startSPI+0xc4>
80019df2:	1e 26       	rsub	r6,pc
80019df4:	ef 4c ff fc 	st.w	r7[-4],r12
  // check flag if transmission is in progress
  if ((spi_buffers[spi_index].transmission_in_progress==0)
80019df8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019dfc:	ec f9 00 2c 	ld.w	r9,r6[44]
80019e00:	f0 08 10 54 	mul	r8,r8,84
80019e04:	f2 08 00 08 	add	r8,r9,r8
80019e08:	2b 88       	sub	r8,-72
80019e0a:	11 a8       	ld.ub	r8,r8[0x2]
80019e0c:	5c 58       	castu.b	r8
80019e0e:	c4 c1       	brne	80019ea6 <startSPI+0xbe>
	&&(spi_buffers[spi_index].SPIoutBufferHead!=spi_buffers[spi_index].SPIoutBufferTail)) {
80019e10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019e14:	ec f9 00 2c 	ld.w	r9,r6[44]
80019e18:	f0 08 10 54 	mul	r8,r8,84
80019e1c:	f2 08 00 08 	add	r8,r9,r8
80019e20:	2b c8       	sub	r8,-68
80019e22:	11 a8       	ld.ub	r8,r8[0x2]
80019e24:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80019e28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019e2c:	ec fa 00 2c 	ld.w	r10,r6[44]
80019e30:	f0 08 10 54 	mul	r8,r8,84
80019e34:	f4 08 00 08 	add	r8,r10,r8
80019e38:	2b c8       	sub	r8,-68
80019e3a:	11 b8       	ld.ub	r8,r8[0x3]
80019e3c:	5c 58       	castu.b	r8

/** initiates SPI transmission by sending first byte
*/
void startSPI(int spi_index) {
  // check flag if transmission is in progress
  if ((spi_buffers[spi_index].transmission_in_progress==0)
80019e3e:	f0 09 18 00 	cp.b	r9,r8
80019e42:	c3 20       	breq	80019ea6 <startSPI+0xbe>
	&&(spi_buffers[spi_index].SPIoutBufferHead!=spi_buffers[spi_index].SPIoutBufferTail)) {
    // if not, initiate transmission by sending first byte
    //!!!!PORTB &= ~_BV(SPI_CS);	// pull chip select low to start transmission
	spi_select_device(spi_buffers[spi_index].spi, &spi_buffers[spi_index].adc_spi);
80019e44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019e48:	f0 08 10 54 	mul	r8,r8,84
80019e4c:	f0 c9 ff b0 	sub	r9,r8,-80
80019e50:	ec f8 00 2c 	ld.w	r8,r6[44]
80019e54:	10 09       	add	r9,r8
80019e56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019e5a:	ec fa 00 2c 	ld.w	r10,r6[44]
80019e5e:	f0 08 10 54 	mul	r8,r8,84
80019e62:	f4 08 00 08 	add	r8,r10,r8
80019e66:	70 08       	ld.w	r8,r8[0x0]
80019e68:	12 9b       	mov	r11,r9
80019e6a:	10 9c       	mov	r12,r8
80019e6c:	fe b0 fb 62 	rcall	80019530 <spi_select_device>

    spi_buffers[spi_index].transmission_in_progress=1;
80019e70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019e74:	ec f9 00 2c 	ld.w	r9,r6[44]
80019e78:	f0 08 10 54 	mul	r8,r8,84
80019e7c:	f2 08 00 08 	add	r8,r9,r8
80019e80:	f0 c9 ff b8 	sub	r9,r8,-72
80019e84:	30 18       	mov	r8,1
80019e86:	b2 a8       	st.b	r9[0x2],r8
    // activate interrupt to initiate transmission
    //!!!!SPCR|=_BV(SPIE);
 	spi_buffers[spi_index].spi->ier = AVR32_SPI_IER_RDRF_MASK | AVR32_SPI_IER_TDRE_MASK;
80019e88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019e8c:	ec f9 00 2c 	ld.w	r9,r6[44]
80019e90:	f0 08 10 54 	mul	r8,r8,84
80019e94:	f2 08 00 08 	add	r8,r9,r8
80019e98:	70 08       	ld.w	r8,r8[0x0]
80019e9a:	30 39       	mov	r9,3
80019e9c:	91 59       	st.w	r8[0x14],r9

    SPItransmit(spi_index);
80019e9e:	ee fc ff fc 	ld.w	r12,r7[-4]
80019ea2:	f0 16 01 35 	mcall	r6[1236]
  }
}
80019ea6:	2f fd       	sub	sp,-4
80019ea8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019eac:	80 01       	ld.sh	r1,r0[0x0]
80019eae:	9c 76       	ld.sh	r6,lr[0xe]

80019eb0 <SPITransferFinished>:

int8_t SPITransferFinished(int spi_index) {
80019eb0:	eb cd 40 c0 	pushm	r6-r7,lr
80019eb4:	1a 97       	mov	r7,sp
80019eb6:	20 1d       	sub	sp,4
80019eb8:	49 16       	lddpc	r6,80019efc <SPITransferFinished+0x4c>
80019eba:	1e 26       	rsub	r6,pc
80019ebc:	ef 4c ff fc 	st.w	r7[-4],r12
	return (spi_buffers[spi_index].SPIoutBufferHead==spi_buffers[spi_index].SPIoutBufferTail);
80019ec0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019ec4:	ec f9 00 2c 	ld.w	r9,r6[44]
80019ec8:	f0 08 10 54 	mul	r8,r8,84
80019ecc:	f2 08 00 08 	add	r8,r9,r8
80019ed0:	2b c8       	sub	r8,-68
80019ed2:	11 a8       	ld.ub	r8,r8[0x2]
80019ed4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80019ed8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019edc:	ec fa 00 2c 	ld.w	r10,r6[44]
80019ee0:	f0 08 10 54 	mul	r8,r8,84
80019ee4:	f4 08 00 08 	add	r8,r10,r8
80019ee8:	2b c8       	sub	r8,-68
80019eea:	11 b8       	ld.ub	r8,r8[0x3]
80019eec:	5c 58       	castu.b	r8
80019eee:	f0 09 18 00 	cp.b	r9,r8
80019ef2:	5f 08       	sreq	r8
}
80019ef4:	10 9c       	mov	r12,r8
80019ef6:	2f fd       	sub	sp,-4
80019ef8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019efc:	80 01       	ld.sh	r1,r0[0x0]
80019efe:	9d 3e       	st.w	lr[0xc],lr

80019f00 <SPIFlushBuffer>:

/** waits until whole buffer is written to SPI bus
 *  automatically resumes sending if SPI interface was paused */
void SPIFlushBuffer(int spi_index) {
80019f00:	eb cd 40 c0 	pushm	r6-r7,lr
80019f04:	1a 97       	mov	r7,sp
80019f06:	20 1d       	sub	sp,4
80019f08:	49 36       	lddpc	r6,80019f54 <SPIFlushBuffer+0x54>
80019f0a:	1e 26       	rsub	r6,pc
80019f0c:	ef 4c ff fc 	st.w	r7[-4],r12
 	resumeSPI(spi_index);
80019f10:	ee fc ff fc 	ld.w	r12,r7[-4]
80019f14:	f0 16 01 f6 	mcall	r6[2008]
	while (spi_buffers[spi_index].SPIoutBufferHead!=spi_buffers[spi_index].SPIoutBufferTail);
80019f18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019f1c:	ec f9 00 2c 	ld.w	r9,r6[44]
80019f20:	f0 08 10 54 	mul	r8,r8,84
80019f24:	f2 08 00 08 	add	r8,r9,r8
80019f28:	2b c8       	sub	r8,-68
80019f2a:	11 a8       	ld.ub	r8,r8[0x2]
80019f2c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80019f30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019f34:	ec fa 00 2c 	ld.w	r10,r6[44]
80019f38:	f0 08 10 54 	mul	r8,r8,84
80019f3c:	f4 08 00 08 	add	r8,r10,r8
80019f40:	2b c8       	sub	r8,-68
80019f42:	11 b8       	ld.ub	r8,r8[0x3]
80019f44:	5c 58       	castu.b	r8
80019f46:	f0 09 18 00 	cp.b	r9,r8
80019f4a:	ce 71       	brne	80019f18 <SPIFlushBuffer+0x18>
}
80019f4c:	2f fd       	sub	sp,-4
80019f4e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019f52:	00 00       	add	r0,r0
80019f54:	80 01       	ld.sh	r1,r0[0x0]
80019f56:	9d 8e       	st.w	lr[0x20],lr

80019f58 <SPIBytesAvailable>:

/** returns the number of bytes in the incoming buffer
 */
uint8_t SPIBytesAvailable(int spi_index){
80019f58:	eb cd 40 c0 	pushm	r6-r7,lr
80019f5c:	1a 97       	mov	r7,sp
80019f5e:	20 1d       	sub	sp,4
80019f60:	49 36       	lddpc	r6,80019fac <SPIBytesAvailable+0x54>
80019f62:	1e 26       	rsub	r6,pc
80019f64:	ef 4c ff fc 	st.w	r7[-4],r12
  return (SPI_BUFFER_SIZE + spi_buffers[spi_index].SPIinBufferHead - spi_buffers[spi_index].SPIinBufferTail)&SPI_BUFFER_MASK;
80019f68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019f6c:	ec f9 00 2c 	ld.w	r9,r6[44]
80019f70:	f0 08 10 54 	mul	r8,r8,84
80019f74:	f2 08 00 08 	add	r8,r9,r8
80019f78:	2b c8       	sub	r8,-68
80019f7a:	11 88       	ld.ub	r8,r8[0x0]
80019f7c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80019f80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019f84:	ec fa 00 2c 	ld.w	r10,r6[44]
80019f88:	f0 08 10 54 	mul	r8,r8,84
80019f8c:	f4 08 00 08 	add	r8,r10,r8
80019f90:	2b c8       	sub	r8,-68
80019f92:	11 98       	ld.ub	r8,r8[0x1]
80019f94:	5c 58       	castu.b	r8
80019f96:	f2 08 01 08 	sub	r8,r9,r8
80019f9a:	5c 58       	castu.b	r8
80019f9c:	2e 08       	sub	r8,-32
80019f9e:	5c 58       	castu.b	r8
80019fa0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
}
80019fa4:	10 9c       	mov	r12,r8
80019fa6:	2f fd       	sub	sp,-4
80019fa8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019fac:	80 01       	ld.sh	r1,r0[0x0]
80019fae:	9d e6       	st.w	lr[0x38],r6

80019fb0 <spi_handler>:





void spi_handler(int spi_index) {
80019fb0:	eb cd 40 c0 	pushm	r6-r7,lr
80019fb4:	1a 97       	mov	r7,sp
80019fb6:	20 2d       	sub	sp,8
80019fb8:	4d e6       	lddpc	r6,8001a130 <spi_handler+0x180>
80019fba:	1e 26       	rsub	r6,pc
80019fbc:	ef 4c ff f8 	st.w	r7[-8],r12
  uint8_t inData;
  uint8_t tmp;
  inData=spi_buffers[spi_index].spi->rdr;
80019fc0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019fc4:	ec f9 00 2c 	ld.w	r9,r6[44]
80019fc8:	f0 08 10 54 	mul	r8,r8,84
80019fcc:	f2 08 00 08 	add	r8,r9,r8
80019fd0:	70 08       	ld.w	r8,r8[0x0]
80019fd2:	70 28       	ld.w	r8,r8[0x8]
80019fd4:	ef 68 ff fe 	st.b	r7[-2],r8

  if ((spi_buffers[spi_index].spi->sr & AVR32_SPI_SR_TDRE_MASK)!=0) {
80019fd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019fdc:	ec f9 00 2c 	ld.w	r9,r6[44]
80019fe0:	f0 08 10 54 	mul	r8,r8,84
80019fe4:	f2 08 00 08 	add	r8,r9,r8
80019fe8:	70 08       	ld.w	r8,r8[0x0]
80019fea:	70 48       	ld.w	r8,r8[0x10]
80019fec:	e2 18 00 02 	andl	r8,0x2,COH
80019ff0:	c0 50       	breq	80019ffa <spi_handler+0x4a>
	// initiate transfer if necessary
	SPItransmit(spi_index);
80019ff2:	ee fc ff f8 	ld.w	r12,r7[-8]
80019ff6:	f0 16 01 35 	mcall	r6[1236]
  }	
  // only process received data when receiver is activated
  if ((spi_buffers[spi_index].spiReceiverOn==1)&& ((spi_buffers[spi_index].spi->sr & AVR32_SPI_SR_RDRF_MASK)!=0)) {
80019ffa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019ffe:	ec f9 00 2c 	ld.w	r9,r6[44]
8001a002:	f0 08 10 54 	mul	r8,r8,84
8001a006:	f2 08 00 08 	add	r8,r9,r8
8001a00a:	2b 88       	sub	r8,-72
8001a00c:	11 88       	ld.ub	r8,r8[0x0]
8001a00e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001a012:	30 18       	mov	r8,1
8001a014:	f0 09 18 00 	cp.b	r9,r8
8001a018:	e0 81 00 88 	brne	8001a128 <spi_handler+0x178>
8001a01c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a020:	ec f9 00 2c 	ld.w	r9,r6[44]
8001a024:	f0 08 10 54 	mul	r8,r8,84
8001a028:	f2 08 00 08 	add	r8,r9,r8
8001a02c:	70 08       	ld.w	r8,r8[0x0]
8001a02e:	70 48       	ld.w	r8,r8[0x10]
8001a030:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001a034:	5c 58       	castu.b	r8
8001a036:	c7 90       	breq	8001a128 <spi_handler+0x178>
	 // read incoming data from SPI port
	spi_buffers[spi_index].traffic++;
8001a038:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a03c:	ec fa 00 2c 	ld.w	r10,r6[44]
8001a040:	f0 09 10 54 	mul	r9,r8,84
8001a044:	f4 09 00 09 	add	r9,r10,r9
8001a048:	2b 89       	sub	r9,-72
8001a04a:	13 99       	ld.ub	r9,r9[0x1]
8001a04c:	5c 59       	castu.b	r9
8001a04e:	2f f9       	sub	r9,-1
8001a050:	5c 59       	castu.b	r9
8001a052:	ec fa 00 2c 	ld.w	r10,r6[44]
8001a056:	f0 08 10 54 	mul	r8,r8,84
8001a05a:	f4 08 00 08 	add	r8,r10,r8
8001a05e:	f0 ca ff b8 	sub	r10,r8,-72
8001a062:	12 98       	mov	r8,r9
8001a064:	b4 98       	st.b	r10[0x1],r8

    tmp=(spi_buffers[spi_index].SPIinBufferHead+1)&SPI_BUFFER_MASK;
8001a066:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a06a:	ec f9 00 2c 	ld.w	r9,r6[44]
8001a06e:	f0 08 10 54 	mul	r8,r8,84
8001a072:	f2 08 00 08 	add	r8,r9,r8
8001a076:	2b c8       	sub	r8,-68
8001a078:	11 88       	ld.ub	r8,r8[0x0]
8001a07a:	5c 58       	castu.b	r8
8001a07c:	2f f8       	sub	r8,-1
8001a07e:	5c 58       	castu.b	r8
8001a080:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8001a084:	ef 68 ff ff 	st.b	r7[-1],r8
    
    if (tmp==spi_buffers[spi_index].SPIinBufferTail) {
8001a088:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a08c:	ec f9 00 2c 	ld.w	r9,r6[44]
8001a090:	f0 08 10 54 	mul	r8,r8,84
8001a094:	f2 08 00 08 	add	r8,r9,r8
8001a098:	2b c8       	sub	r8,-68
8001a09a:	11 98       	ld.ub	r8,r8[0x1]
8001a09c:	5c 58       	castu.b	r8
8001a09e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8001a0a2:	f0 09 18 00 	cp.b	r9,r8
8001a0a6:	c1 a1       	brne	8001a0da <spi_handler+0x12a>
      //error: receive buffer overflow!!
      // lose old incoming data at the end of the buffer
      spi_buffers[spi_index].SPIinBufferTail=(spi_buffers[spi_index].SPIinBufferTail+1)&SPI_BUFFER_MASK;
8001a0a8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001a0ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a0b0:	ec fa 00 2c 	ld.w	r10,r6[44]
8001a0b4:	f0 08 10 54 	mul	r8,r8,84
8001a0b8:	f4 08 00 08 	add	r8,r10,r8
8001a0bc:	2b c8       	sub	r8,-68
8001a0be:	11 98       	ld.ub	r8,r8[0x1]
8001a0c0:	5c 58       	castu.b	r8
8001a0c2:	2f f8       	sub	r8,-1
8001a0c4:	5c 58       	castu.b	r8
8001a0c6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8001a0ca:	ec fa 00 2c 	ld.w	r10,r6[44]
8001a0ce:	f2 09 10 54 	mul	r9,r9,84
8001a0d2:	f4 09 00 09 	add	r9,r10,r9
8001a0d6:	2b c9       	sub	r9,-68
8001a0d8:	b2 98       	st.b	r9[0x1],r8
    } 
    // store incoming data in buffer
    spi_buffers[spi_index].SPIInBuffer[spi_buffers[spi_index].SPIinBufferHead] = inData;
8001a0da:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001a0de:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a0e2:	ec fa 00 2c 	ld.w	r10,r6[44]
8001a0e6:	f0 08 10 54 	mul	r8,r8,84
8001a0ea:	f4 08 00 08 	add	r8,r10,r8
8001a0ee:	2b c8       	sub	r8,-68
8001a0f0:	11 88       	ld.ub	r8,r8[0x0]
8001a0f2:	5c 58       	castu.b	r8
8001a0f4:	ec fa 00 2c 	ld.w	r10,r6[44]
8001a0f8:	f2 09 10 54 	mul	r9,r9,84
8001a0fc:	f4 09 00 09 	add	r9,r10,r9
8001a100:	f2 08 00 08 	add	r8,r9,r8
8001a104:	f0 c9 ff dc 	sub	r9,r8,-36
8001a108:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001a10c:	b2 88       	st.b	r9[0x0],r8
    // move head pointer forward
    spi_buffers[spi_index].SPIinBufferHead=tmp;
8001a10e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a112:	ec f9 00 2c 	ld.w	r9,r6[44]
8001a116:	f0 08 10 54 	mul	r8,r8,84
8001a11a:	f2 08 00 08 	add	r8,r9,r8
8001a11e:	f0 c9 ff bc 	sub	r9,r8,-68
8001a122:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001a126:	b2 88       	st.b	r9[0x0],r8
  
  }
    
}
8001a128:	2f ed       	sub	sp,-8
8001a12a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a12e:	00 00       	add	r0,r0
8001a130:	80 01       	ld.sh	r1,r0[0x0]
8001a132:	9e 3e       	ld.sh	lr,pc[0x6]

8001a134 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
8001a134:	eb cd 40 80 	pushm	r7,lr
8001a138:	1a 97       	mov	r7,sp
8001a13a:	20 1d       	sub	sp,4
8001a13c:	18 98       	mov	r8,r12
8001a13e:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8001a142:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001a146:	58 38       	cp.w	r8,3
8001a148:	c1 20       	breq	8001a16c <osc_get_rate+0x38>
8001a14a:	e0 89 00 07 	brgt	8001a158 <osc_get_rate+0x24>
8001a14e:	58 08       	cp.w	r8,0
8001a150:	c0 90       	breq	8001a162 <osc_get_rate+0x2e>
8001a152:	58 28       	cp.w	r8,2
8001a154:	c0 f0       	breq	8001a172 <osc_get_rate+0x3e>
8001a156:	c1 b8       	rjmp	8001a18c <osc_get_rate+0x58>
8001a158:	58 48       	cp.w	r8,4
8001a15a:	c1 10       	breq	8001a17c <osc_get_rate+0x48>
8001a15c:	58 58       	cp.w	r8,5
8001a15e:	c1 40       	breq	8001a186 <osc_get_rate+0x52>
8001a160:	c1 68       	rjmp	8001a18c <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8001a162:	e0 68 24 00 	mov	r8,9216
8001a166:	ea 18 00 f4 	orh	r8,0xf4
8001a16a:	c1 28       	rjmp	8001a18e <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8001a16c:	e0 68 80 00 	mov	r8,32768
8001a170:	c0 f8       	rjmp	8001a18e <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8001a172:	e0 68 12 00 	mov	r8,4608
8001a176:	ea 18 00 7a 	orh	r8,0x7a
8001a17a:	c0 a8       	rjmp	8001a18e <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8001a17c:	e0 68 0e 00 	mov	r8,3584
8001a180:	ea 18 07 27 	orh	r8,0x727
8001a184:	c0 58       	rjmp	8001a18e <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8001a186:	e0 78 c1 38 	mov	r8,115000
8001a18a:	c0 28       	rjmp	8001a18e <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
8001a18c:	30 08       	mov	r8,0
	}
}
8001a18e:	10 9c       	mov	r12,r8
8001a190:	2f fd       	sub	sp,-4
8001a192:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a196 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8001a196:	eb cd 40 c0 	pushm	r6-r7,lr
8001a19a:	1a 97       	mov	r7,sp
8001a19c:	48 56       	lddpc	r6,8001a1b0 <sysclk_get_main_hz+0x1a>
8001a19e:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8001a1a0:	30 0c       	mov	r12,0
8001a1a2:	cc 9f       	rcall	8001a134 <osc_get_rate>
8001a1a4:	18 98       	mov	r8,r12
8001a1a6:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8001a1a8:	10 9c       	mov	r12,r8
8001a1aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a1ae:	00 00       	add	r0,r0
8001a1b0:	80 01       	ld.sh	r1,r0[0x0]
8001a1b2:	a0 22       	st.h	r0[0x4],r2

8001a1b4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8001a1b4:	eb cd 40 c0 	pushm	r6-r7,lr
8001a1b8:	1a 97       	mov	r7,sp
8001a1ba:	48 46       	lddpc	r6,8001a1c8 <sysclk_get_cpu_hz+0x14>
8001a1bc:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8001a1be:	ce cf       	rcall	8001a196 <sysclk_get_main_hz>
8001a1c0:	18 98       	mov	r8,r12
}
8001a1c2:	10 9c       	mov	r12,r8
8001a1c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a1c8:	80 01       	ld.sh	r1,r0[0x0]
8001a1ca:	a0 40       	st.h	r0[0x8],r0

8001a1cc <uart_handler_0>:
				usart_opt[UID].uart_device.uart->idr=AVR32_USART_IDR_TXRDY_MASK;\
		}\
	}\
}			

ISR(uart_handler_0, usart_opt[0].uart_device.IRQ, AVR32_INTC_INTLEV_INT1) {\
8001a1cc:	eb cd 40 c0 	pushm	r6-r7,lr
8001a1d0:	1a 97       	mov	r7,sp
8001a1d2:	20 2d       	sub	sp,8
8001a1d4:	4b 26       	lddpc	r6,8001a29c <uart_handler_0+0xd0>
8001a1d6:	1e 26       	rsub	r6,pc
	uint8_t c1;\
	int csr=usart_opt[0].uart_device.uart->csr;\
8001a1d8:	ec f8 00 34 	ld.w	r8,r6[52]
8001a1dc:	70 18       	ld.w	r8,r8[0x4]
8001a1de:	70 58       	ld.w	r8,r8[0x14]
				usart_opt[UID].uart_device.uart->idr=AVR32_USART_IDR_TXRDY_MASK;\
		}\
	}\
}			

ISR(uart_handler_0, usart_opt[0].uart_device.IRQ, AVR32_INTC_INTLEV_INT1) {\
8001a1e0:	ef 48 ff fc 	st.w	r7[-4],r8
	uint8_t c1;\
	int csr=usart_opt[0].uart_device.uart->csr;\
	if (csr & AVR32_USART_CSR_RXRDY_MASK) {\
8001a1e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a1e8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001a1ec:	5c 58       	castu.b	r8
8001a1ee:	c2 70       	breq	8001a23c <uart_handler_0+0x70>
		c1=(uint8_t)usart_opt[0].uart_device.uart->rhr;\
8001a1f0:	ec f8 00 34 	ld.w	r8,r6[52]
8001a1f4:	70 18       	ld.w	r8,r8[0x4]
8001a1f6:	70 68       	ld.w	r8,r8[0x18]
8001a1f8:	ef 68 ff fb 	st.b	r7[-5],r8
		if (usart_opt[0].uart_device.receive_stream==NULL) {\
8001a1fc:	ec f8 00 34 	ld.w	r8,r6[52]
8001a200:	f0 f8 02 14 	ld.w	r8,r8[532]
8001a204:	58 08       	cp.w	r8,0
8001a206:	c0 c1       	brne	8001a21e <uart_handler_0+0x52>
			buffer_put(&(usart_opt[0].uart_device.receive_buffer), c1);\
8001a208:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001a20c:	ec f8 00 34 	ld.w	r8,r6[52]
8001a210:	f0 c8 fe f1 	sub	r8,r8,-271
8001a214:	12 9b       	mov	r11,r9
8001a216:	10 9c       	mov	r12,r8
8001a218:	f0 16 00 55 	mcall	r6[340]
8001a21c:	c1 08       	rjmp	8001a23c <uart_handler_0+0x70>
		} else {\
			usart_opt[0].uart_device.receive_stream->put(usart_opt[0].uart_device.receive_stream->data, c1);\
8001a21e:	ec f8 00 34 	ld.w	r8,r6[52]
8001a222:	f0 f8 02 14 	ld.w	r8,r8[532]
8001a226:	70 18       	ld.w	r8,r8[0x4]
8001a228:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8001a22c:	ec f9 00 34 	ld.w	r9,r6[52]
8001a230:	f2 f9 02 14 	ld.w	r9,r9[532]
8001a234:	72 59       	ld.w	r9,r9[0x14]
8001a236:	14 9b       	mov	r11,r10
8001a238:	12 9c       	mov	r12,r9
8001a23a:	5d 18       	icall	r8
		}\
	}\
	if (csr & AVR32_USART_CSR_TXRDY_MASK) {\
8001a23c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a240:	e2 18 00 02 	andl	r8,0x2,COH
8001a244:	c2 80       	breq	8001a294 <uart_handler_0+0xc8>
		if (buffer_bytes_available(&(usart_opt[0].uart_device.transmit_buffer))>0) {\
8001a246:	ec f8 00 34 	ld.w	r8,r6[52]
8001a24a:	2f 48       	sub	r8,-12
8001a24c:	10 9c       	mov	r12,r8
8001a24e:	f0 16 00 2e 	mcall	r6[184]
8001a252:	18 98       	mov	r8,r12
8001a254:	58 08       	cp.w	r8,0
8001a256:	e0 8a 00 11 	brle	8001a278 <uart_handler_0+0xac>
			c1=buffer_get(&(usart_opt[0].uart_device.transmit_buffer));\
8001a25a:	ec f8 00 34 	ld.w	r8,r6[52]
8001a25e:	2f 48       	sub	r8,-12
8001a260:	10 9c       	mov	r12,r8
8001a262:	f0 16 00 45 	mcall	r6[276]
8001a266:	18 98       	mov	r8,r12
8001a268:	ef 68 ff fb 	st.b	r7[-5],r8
			usart_opt[0].uart_device.uart->thr=c1;\
8001a26c:	ec f8 00 34 	ld.w	r8,r6[52]
8001a270:	70 18       	ld.w	r8,r8[0x4]
8001a272:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001a276:	91 79       	st.w	r8[0x1c],r9
		}\
		if (buffer_bytes_available(&(usart_opt[0].uart_device.transmit_buffer))==0) {\
8001a278:	ec f8 00 34 	ld.w	r8,r6[52]
8001a27c:	2f 48       	sub	r8,-12
8001a27e:	10 9c       	mov	r12,r8
8001a280:	f0 16 00 2e 	mcall	r6[184]
8001a284:	18 98       	mov	r8,r12
8001a286:	58 08       	cp.w	r8,0
8001a288:	c0 61       	brne	8001a294 <uart_handler_0+0xc8>
				usart_opt[0].uart_device.uart->idr=AVR32_USART_IDR_TXRDY_MASK;\
8001a28a:	ec f8 00 34 	ld.w	r8,r6[52]
8001a28e:	70 18       	ld.w	r8,r8[0x4]
8001a290:	30 29       	mov	r9,2
8001a292:	91 39       	st.w	r8[0xc],r9
				usart_opt[UID].uart_device.uart->idr=AVR32_USART_IDR_TXRDY_MASK;\
		}\
	}\
}			

ISR(uart_handler_0, usart_opt[0].uart_device.IRQ, AVR32_INTC_INTLEV_INT1) {\
8001a294:	2f ed       	sub	sp,-8
8001a296:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8001a29a:	d6 03       	rete
8001a29c:	80 01       	ld.sh	r1,r0[0x0]
8001a29e:	a0 5a       	st.h	r0[0xa],r10

8001a2a0 <uart_handler_1>:
	}\
}			

// define interrupt handlers using above macro
//UART_HANDLER(0);
UART_HANDLER(1);
8001a2a0:	eb cd 40 c0 	pushm	r6-r7,lr
8001a2a4:	1a 97       	mov	r7,sp
8001a2a6:	20 2d       	sub	sp,8
8001a2a8:	4b 66       	lddpc	r6,8001a380 <uart_handler_1+0xe0>
8001a2aa:	1e 26       	rsub	r6,pc
8001a2ac:	ec f8 00 34 	ld.w	r8,r6[52]
8001a2b0:	f0 f8 02 2c 	ld.w	r8,r8[556]
8001a2b4:	70 58       	ld.w	r8,r8[0x14]
8001a2b6:	ef 48 ff fc 	st.w	r7[-4],r8
8001a2ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a2be:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001a2c2:	5c 58       	castu.b	r8
8001a2c4:	c2 80       	breq	8001a314 <uart_handler_1+0x74>
8001a2c6:	ec f8 00 34 	ld.w	r8,r6[52]
8001a2ca:	f0 f8 02 2c 	ld.w	r8,r8[556]
8001a2ce:	70 68       	ld.w	r8,r8[0x18]
8001a2d0:	ef 68 ff fb 	st.b	r7[-5],r8
8001a2d4:	ec f8 00 34 	ld.w	r8,r6[52]
8001a2d8:	f0 f8 04 3c 	ld.w	r8,r8[1084]
8001a2dc:	58 08       	cp.w	r8,0
8001a2de:	c0 c1       	brne	8001a2f6 <uart_handler_1+0x56>
8001a2e0:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001a2e4:	ec f8 00 34 	ld.w	r8,r6[52]
8001a2e8:	f0 c8 fc c9 	sub	r8,r8,-823
8001a2ec:	12 9b       	mov	r11,r9
8001a2ee:	10 9c       	mov	r12,r8
8001a2f0:	f0 16 00 55 	mcall	r6[340]
8001a2f4:	c1 08       	rjmp	8001a314 <uart_handler_1+0x74>
8001a2f6:	ec f8 00 34 	ld.w	r8,r6[52]
8001a2fa:	f0 f8 04 3c 	ld.w	r8,r8[1084]
8001a2fe:	70 18       	ld.w	r8,r8[0x4]
8001a300:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8001a304:	ec f9 00 34 	ld.w	r9,r6[52]
8001a308:	f2 f9 04 3c 	ld.w	r9,r9[1084]
8001a30c:	72 59       	ld.w	r9,r9[0x14]
8001a30e:	14 9b       	mov	r11,r10
8001a310:	12 9c       	mov	r12,r9
8001a312:	5d 18       	icall	r8
8001a314:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a318:	e2 18 00 02 	andl	r8,0x2,COH
8001a31c:	c2 d0       	breq	8001a376 <uart_handler_1+0xd6>
8001a31e:	ec f8 00 34 	ld.w	r8,r6[52]
8001a322:	f0 c8 fd cc 	sub	r8,r8,-564
8001a326:	10 9c       	mov	r12,r8
8001a328:	f0 16 00 2e 	mcall	r6[184]
8001a32c:	18 98       	mov	r8,r12
8001a32e:	58 08       	cp.w	r8,0
8001a330:	e0 8a 00 13 	brle	8001a356 <uart_handler_1+0xb6>
8001a334:	ec f8 00 34 	ld.w	r8,r6[52]
8001a338:	f0 c8 fd cc 	sub	r8,r8,-564
8001a33c:	10 9c       	mov	r12,r8
8001a33e:	f0 16 00 45 	mcall	r6[276]
8001a342:	18 98       	mov	r8,r12
8001a344:	ef 68 ff fb 	st.b	r7[-5],r8
8001a348:	ec f8 00 34 	ld.w	r8,r6[52]
8001a34c:	f0 f8 02 2c 	ld.w	r8,r8[556]
8001a350:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001a354:	91 79       	st.w	r8[0x1c],r9
8001a356:	ec f8 00 34 	ld.w	r8,r6[52]
8001a35a:	f0 c8 fd cc 	sub	r8,r8,-564
8001a35e:	10 9c       	mov	r12,r8
8001a360:	f0 16 00 2e 	mcall	r6[184]
8001a364:	18 98       	mov	r8,r12
8001a366:	58 08       	cp.w	r8,0
8001a368:	c0 71       	brne	8001a376 <uart_handler_1+0xd6>
8001a36a:	ec f8 00 34 	ld.w	r8,r6[52]
8001a36e:	f0 f8 02 2c 	ld.w	r8,r8[556]
8001a372:	30 29       	mov	r9,2
8001a374:	91 39       	st.w	r8[0xc],r9
8001a376:	2f ed       	sub	sp,-8
8001a378:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8001a37c:	d6 03       	rete
8001a37e:	00 00       	add	r0,r0
8001a380:	80 01       	ld.sh	r1,r0[0x0]
8001a382:	a1 2e       	st.d	r0++,lr

8001a384 <uart_handler_2>:
UART_HANDLER(2);
8001a384:	eb cd 40 c0 	pushm	r6-r7,lr
8001a388:	1a 97       	mov	r7,sp
8001a38a:	20 2d       	sub	sp,8
8001a38c:	4b 66       	lddpc	r6,8001a464 <uart_handler_2+0xe0>
8001a38e:	1e 26       	rsub	r6,pc
8001a390:	ec f8 00 34 	ld.w	r8,r6[52]
8001a394:	f0 f8 04 54 	ld.w	r8,r8[1108]
8001a398:	70 58       	ld.w	r8,r8[0x14]
8001a39a:	ef 48 ff fc 	st.w	r7[-4],r8
8001a39e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a3a2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001a3a6:	5c 58       	castu.b	r8
8001a3a8:	c2 80       	breq	8001a3f8 <uart_handler_2+0x74>
8001a3aa:	ec f8 00 34 	ld.w	r8,r6[52]
8001a3ae:	f0 f8 04 54 	ld.w	r8,r8[1108]
8001a3b2:	70 68       	ld.w	r8,r8[0x18]
8001a3b4:	ef 68 ff fb 	st.b	r7[-5],r8
8001a3b8:	ec f8 00 34 	ld.w	r8,r6[52]
8001a3bc:	f0 f8 06 64 	ld.w	r8,r8[1636]
8001a3c0:	58 08       	cp.w	r8,0
8001a3c2:	c0 c1       	brne	8001a3da <uart_handler_2+0x56>
8001a3c4:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001a3c8:	ec f8 00 34 	ld.w	r8,r6[52]
8001a3cc:	f0 c8 fa a1 	sub	r8,r8,-1375
8001a3d0:	12 9b       	mov	r11,r9
8001a3d2:	10 9c       	mov	r12,r8
8001a3d4:	f0 16 00 55 	mcall	r6[340]
8001a3d8:	c1 08       	rjmp	8001a3f8 <uart_handler_2+0x74>
8001a3da:	ec f8 00 34 	ld.w	r8,r6[52]
8001a3de:	f0 f8 06 64 	ld.w	r8,r8[1636]
8001a3e2:	70 18       	ld.w	r8,r8[0x4]
8001a3e4:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8001a3e8:	ec f9 00 34 	ld.w	r9,r6[52]
8001a3ec:	f2 f9 06 64 	ld.w	r9,r9[1636]
8001a3f0:	72 59       	ld.w	r9,r9[0x14]
8001a3f2:	14 9b       	mov	r11,r10
8001a3f4:	12 9c       	mov	r12,r9
8001a3f6:	5d 18       	icall	r8
8001a3f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a3fc:	e2 18 00 02 	andl	r8,0x2,COH
8001a400:	c2 d0       	breq	8001a45a <uart_handler_2+0xd6>
8001a402:	ec f8 00 34 	ld.w	r8,r6[52]
8001a406:	f0 c8 fb a4 	sub	r8,r8,-1116
8001a40a:	10 9c       	mov	r12,r8
8001a40c:	f0 16 00 2e 	mcall	r6[184]
8001a410:	18 98       	mov	r8,r12
8001a412:	58 08       	cp.w	r8,0
8001a414:	e0 8a 00 13 	brle	8001a43a <uart_handler_2+0xb6>
8001a418:	ec f8 00 34 	ld.w	r8,r6[52]
8001a41c:	f0 c8 fb a4 	sub	r8,r8,-1116
8001a420:	10 9c       	mov	r12,r8
8001a422:	f0 16 00 45 	mcall	r6[276]
8001a426:	18 98       	mov	r8,r12
8001a428:	ef 68 ff fb 	st.b	r7[-5],r8
8001a42c:	ec f8 00 34 	ld.w	r8,r6[52]
8001a430:	f0 f8 04 54 	ld.w	r8,r8[1108]
8001a434:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001a438:	91 79       	st.w	r8[0x1c],r9
8001a43a:	ec f8 00 34 	ld.w	r8,r6[52]
8001a43e:	f0 c8 fb a4 	sub	r8,r8,-1116
8001a442:	10 9c       	mov	r12,r8
8001a444:	f0 16 00 2e 	mcall	r6[184]
8001a448:	18 98       	mov	r8,r12
8001a44a:	58 08       	cp.w	r8,0
8001a44c:	c0 71       	brne	8001a45a <uart_handler_2+0xd6>
8001a44e:	ec f8 00 34 	ld.w	r8,r6[52]
8001a452:	f0 f8 04 54 	ld.w	r8,r8[1108]
8001a456:	30 29       	mov	r9,2
8001a458:	91 39       	st.w	r8[0xc],r9
8001a45a:	2f ed       	sub	sp,-8
8001a45c:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8001a460:	d6 03       	rete
8001a462:	00 00       	add	r0,r0
8001a464:	80 01       	ld.sh	r1,r0[0x0]
8001a466:	a2 12       	st.h	r1[0x2],r2

8001a468 <uart_handler_3>:
UART_HANDLER(3);
8001a468:	eb cd 40 c0 	pushm	r6-r7,lr
8001a46c:	1a 97       	mov	r7,sp
8001a46e:	20 2d       	sub	sp,8
8001a470:	4b 66       	lddpc	r6,8001a548 <uart_handler_3+0xe0>
8001a472:	1e 26       	rsub	r6,pc
8001a474:	ec f8 00 34 	ld.w	r8,r6[52]
8001a478:	f0 f8 06 7c 	ld.w	r8,r8[1660]
8001a47c:	70 58       	ld.w	r8,r8[0x14]
8001a47e:	ef 48 ff fc 	st.w	r7[-4],r8
8001a482:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a486:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001a48a:	5c 58       	castu.b	r8
8001a48c:	c2 80       	breq	8001a4dc <uart_handler_3+0x74>
8001a48e:	ec f8 00 34 	ld.w	r8,r6[52]
8001a492:	f0 f8 06 7c 	ld.w	r8,r8[1660]
8001a496:	70 68       	ld.w	r8,r8[0x18]
8001a498:	ef 68 ff fb 	st.b	r7[-5],r8
8001a49c:	ec f8 00 34 	ld.w	r8,r6[52]
8001a4a0:	f0 f8 08 8c 	ld.w	r8,r8[2188]
8001a4a4:	58 08       	cp.w	r8,0
8001a4a6:	c0 c1       	brne	8001a4be <uart_handler_3+0x56>
8001a4a8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001a4ac:	ec f8 00 34 	ld.w	r8,r6[52]
8001a4b0:	f0 c8 f8 79 	sub	r8,r8,-1927
8001a4b4:	12 9b       	mov	r11,r9
8001a4b6:	10 9c       	mov	r12,r8
8001a4b8:	f0 16 00 55 	mcall	r6[340]
8001a4bc:	c1 08       	rjmp	8001a4dc <uart_handler_3+0x74>
8001a4be:	ec f8 00 34 	ld.w	r8,r6[52]
8001a4c2:	f0 f8 08 8c 	ld.w	r8,r8[2188]
8001a4c6:	70 18       	ld.w	r8,r8[0x4]
8001a4c8:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8001a4cc:	ec f9 00 34 	ld.w	r9,r6[52]
8001a4d0:	f2 f9 08 8c 	ld.w	r9,r9[2188]
8001a4d4:	72 59       	ld.w	r9,r9[0x14]
8001a4d6:	14 9b       	mov	r11,r10
8001a4d8:	12 9c       	mov	r12,r9
8001a4da:	5d 18       	icall	r8
8001a4dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a4e0:	e2 18 00 02 	andl	r8,0x2,COH
8001a4e4:	c2 d0       	breq	8001a53e <uart_handler_3+0xd6>
8001a4e6:	ec f8 00 34 	ld.w	r8,r6[52]
8001a4ea:	f0 c8 f9 7c 	sub	r8,r8,-1668
8001a4ee:	10 9c       	mov	r12,r8
8001a4f0:	f0 16 00 2e 	mcall	r6[184]
8001a4f4:	18 98       	mov	r8,r12
8001a4f6:	58 08       	cp.w	r8,0
8001a4f8:	e0 8a 00 13 	brle	8001a51e <uart_handler_3+0xb6>
8001a4fc:	ec f8 00 34 	ld.w	r8,r6[52]
8001a500:	f0 c8 f9 7c 	sub	r8,r8,-1668
8001a504:	10 9c       	mov	r12,r8
8001a506:	f0 16 00 45 	mcall	r6[276]
8001a50a:	18 98       	mov	r8,r12
8001a50c:	ef 68 ff fb 	st.b	r7[-5],r8
8001a510:	ec f8 00 34 	ld.w	r8,r6[52]
8001a514:	f0 f8 06 7c 	ld.w	r8,r8[1660]
8001a518:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001a51c:	91 79       	st.w	r8[0x1c],r9
8001a51e:	ec f8 00 34 	ld.w	r8,r6[52]
8001a522:	f0 c8 f9 7c 	sub	r8,r8,-1668
8001a526:	10 9c       	mov	r12,r8
8001a528:	f0 16 00 2e 	mcall	r6[184]
8001a52c:	18 98       	mov	r8,r12
8001a52e:	58 08       	cp.w	r8,0
8001a530:	c0 71       	brne	8001a53e <uart_handler_3+0xd6>
8001a532:	ec f8 00 34 	ld.w	r8,r6[52]
8001a536:	f0 f8 06 7c 	ld.w	r8,r8[1660]
8001a53a:	30 29       	mov	r9,2
8001a53c:	91 39       	st.w	r8[0xc],r9
8001a53e:	2f ed       	sub	sp,-8
8001a540:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8001a544:	d6 03       	rete
8001a546:	00 00       	add	r0,r0
8001a548:	80 01       	ld.sh	r1,r0[0x0]
8001a54a:	a2 f6       	st.b	r1[0x7],r6

8001a54c <uart_handler_4>:
UART_HANDLER(4);
8001a54c:	eb cd 40 c0 	pushm	r6-r7,lr
8001a550:	1a 97       	mov	r7,sp
8001a552:	20 2d       	sub	sp,8
8001a554:	4b 66       	lddpc	r6,8001a62c <uart_handler_4+0xe0>
8001a556:	1e 26       	rsub	r6,pc
8001a558:	ec f8 00 34 	ld.w	r8,r6[52]
8001a55c:	f0 f8 08 a4 	ld.w	r8,r8[2212]
8001a560:	70 58       	ld.w	r8,r8[0x14]
8001a562:	ef 48 ff fc 	st.w	r7[-4],r8
8001a566:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a56a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001a56e:	5c 58       	castu.b	r8
8001a570:	c2 80       	breq	8001a5c0 <uart_handler_4+0x74>
8001a572:	ec f8 00 34 	ld.w	r8,r6[52]
8001a576:	f0 f8 08 a4 	ld.w	r8,r8[2212]
8001a57a:	70 68       	ld.w	r8,r8[0x18]
8001a57c:	ef 68 ff fb 	st.b	r7[-5],r8
8001a580:	ec f8 00 34 	ld.w	r8,r6[52]
8001a584:	f0 f8 0a b4 	ld.w	r8,r8[2740]
8001a588:	58 08       	cp.w	r8,0
8001a58a:	c0 c1       	brne	8001a5a2 <uart_handler_4+0x56>
8001a58c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001a590:	ec f8 00 34 	ld.w	r8,r6[52]
8001a594:	f0 c8 f6 51 	sub	r8,r8,-2479
8001a598:	12 9b       	mov	r11,r9
8001a59a:	10 9c       	mov	r12,r8
8001a59c:	f0 16 00 55 	mcall	r6[340]
8001a5a0:	c1 08       	rjmp	8001a5c0 <uart_handler_4+0x74>
8001a5a2:	ec f8 00 34 	ld.w	r8,r6[52]
8001a5a6:	f0 f8 0a b4 	ld.w	r8,r8[2740]
8001a5aa:	70 18       	ld.w	r8,r8[0x4]
8001a5ac:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8001a5b0:	ec f9 00 34 	ld.w	r9,r6[52]
8001a5b4:	f2 f9 0a b4 	ld.w	r9,r9[2740]
8001a5b8:	72 59       	ld.w	r9,r9[0x14]
8001a5ba:	14 9b       	mov	r11,r10
8001a5bc:	12 9c       	mov	r12,r9
8001a5be:	5d 18       	icall	r8
8001a5c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a5c4:	e2 18 00 02 	andl	r8,0x2,COH
8001a5c8:	c2 d0       	breq	8001a622 <uart_handler_4+0xd6>
8001a5ca:	ec f8 00 34 	ld.w	r8,r6[52]
8001a5ce:	f0 c8 f7 54 	sub	r8,r8,-2220
8001a5d2:	10 9c       	mov	r12,r8
8001a5d4:	f0 16 00 2e 	mcall	r6[184]
8001a5d8:	18 98       	mov	r8,r12
8001a5da:	58 08       	cp.w	r8,0
8001a5dc:	e0 8a 00 13 	brle	8001a602 <uart_handler_4+0xb6>
8001a5e0:	ec f8 00 34 	ld.w	r8,r6[52]
8001a5e4:	f0 c8 f7 54 	sub	r8,r8,-2220
8001a5e8:	10 9c       	mov	r12,r8
8001a5ea:	f0 16 00 45 	mcall	r6[276]
8001a5ee:	18 98       	mov	r8,r12
8001a5f0:	ef 68 ff fb 	st.b	r7[-5],r8
8001a5f4:	ec f8 00 34 	ld.w	r8,r6[52]
8001a5f8:	f0 f8 08 a4 	ld.w	r8,r8[2212]
8001a5fc:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001a600:	91 79       	st.w	r8[0x1c],r9
8001a602:	ec f8 00 34 	ld.w	r8,r6[52]
8001a606:	f0 c8 f7 54 	sub	r8,r8,-2220
8001a60a:	10 9c       	mov	r12,r8
8001a60c:	f0 16 00 2e 	mcall	r6[184]
8001a610:	18 98       	mov	r8,r12
8001a612:	58 08       	cp.w	r8,0
8001a614:	c0 71       	brne	8001a622 <uart_handler_4+0xd6>
8001a616:	ec f8 00 34 	ld.w	r8,r6[52]
8001a61a:	f0 f8 08 a4 	ld.w	r8,r8[2212]
8001a61e:	30 29       	mov	r9,2
8001a620:	91 39       	st.w	r8[0xc],r9
8001a622:	2f ed       	sub	sp,-8
8001a624:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8001a628:	d6 03       	rete
8001a62a:	00 00       	add	r0,r0
8001a62c:	80 01       	ld.sh	r1,r0[0x0]
8001a62e:	a3 da       	cbr	r10,0x3

8001a630 <register_UART_handler>:


void register_UART_handler(int UID) {
8001a630:	eb cd 40 c0 	pushm	r6-r7,lr
8001a634:	1a 97       	mov	r7,sp
8001a636:	20 1d       	sub	sp,4
8001a638:	4a 56       	lddpc	r6,8001a6cc <register_UART_handler+0x9c>
8001a63a:	1e 26       	rsub	r6,pc
8001a63c:	ef 4c ff fc 	st.w	r7[-4],r12
	switch(UID) {
8001a640:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a644:	58 28       	cp.w	r8,2
8001a646:	c2 00       	breq	8001a686 <register_UART_handler+0x56>
8001a648:	e0 89 00 07 	brgt	8001a656 <register_UART_handler+0x26>
8001a64c:	58 08       	cp.w	r8,0
8001a64e:	c0 90       	breq	8001a660 <register_UART_handler+0x30>
8001a650:	58 18       	cp.w	r8,1
8001a652:	c0 f0       	breq	8001a670 <register_UART_handler+0x40>
8001a654:	c3 98       	rjmp	8001a6c6 <register_UART_handler+0x96>
8001a656:	58 38       	cp.w	r8,3
8001a658:	c2 20       	breq	8001a69c <register_UART_handler+0x6c>
8001a65a:	58 48       	cp.w	r8,4
8001a65c:	c2 b0       	breq	8001a6b2 <register_UART_handler+0x82>
8001a65e:	c3 48       	rjmp	8001a6c6 <register_UART_handler+0x96>
		case 0: 	INTC_register_interrupt( (__int_handler) &uart_handler_0, AVR32_USART0_IRQ, AVR32_INTC_INT1); break;
8001a660:	30 1a       	mov	r10,1
8001a662:	e0 6b 02 60 	mov	r11,608
8001a666:	fe cc 04 9a 	sub	r12,pc,1178
8001a66a:	f0 16 00 3b 	mcall	r6[236]
8001a66e:	c2 c8       	rjmp	8001a6c6 <register_UART_handler+0x96>
		case 1: 	INTC_register_interrupt( (__int_handler) &uart_handler_1, usart_opt[1].uart_device.IRQ, AVR32_INTC_INT1); break;
8001a670:	ec f8 00 34 	ld.w	r8,r6[52]
8001a674:	f0 f8 02 30 	ld.w	r8,r8[560]
8001a678:	30 1a       	mov	r10,1
8001a67a:	10 9b       	mov	r11,r8
8001a67c:	fe cc 03 dc 	sub	r12,pc,988
8001a680:	f0 16 00 3b 	mcall	r6[236]
8001a684:	c2 18       	rjmp	8001a6c6 <register_UART_handler+0x96>
		case 2: 	INTC_register_interrupt( (__int_handler) &uart_handler_2, usart_opt[2].uart_device.IRQ, AVR32_INTC_INT1); break;
8001a686:	ec f8 00 34 	ld.w	r8,r6[52]
8001a68a:	f0 f8 04 58 	ld.w	r8,r8[1112]
8001a68e:	30 1a       	mov	r10,1
8001a690:	10 9b       	mov	r11,r8
8001a692:	fe cc 03 0e 	sub	r12,pc,782
8001a696:	f0 16 00 3b 	mcall	r6[236]
8001a69a:	c1 68       	rjmp	8001a6c6 <register_UART_handler+0x96>
		case 3: 	INTC_register_interrupt( (__int_handler) &uart_handler_3, usart_opt[3].uart_device.IRQ, AVR32_INTC_INT1); break;
8001a69c:	ec f8 00 34 	ld.w	r8,r6[52]
8001a6a0:	f0 f8 06 80 	ld.w	r8,r8[1664]
8001a6a4:	30 1a       	mov	r10,1
8001a6a6:	10 9b       	mov	r11,r8
8001a6a8:	fe cc 02 40 	sub	r12,pc,576
8001a6ac:	f0 16 00 3b 	mcall	r6[236]
8001a6b0:	c0 b8       	rjmp	8001a6c6 <register_UART_handler+0x96>
		case 4: 	INTC_register_interrupt( (__int_handler) &uart_handler_4, usart_opt[4].uart_device.IRQ, AVR32_INTC_INT1); break;
8001a6b2:	ec f8 00 34 	ld.w	r8,r6[52]
8001a6b6:	f0 f8 08 a8 	ld.w	r8,r8[2216]
8001a6ba:	30 1a       	mov	r10,1
8001a6bc:	10 9b       	mov	r11,r8
8001a6be:	fe cc 01 72 	sub	r12,pc,370
8001a6c2:	f0 16 00 3b 	mcall	r6[236]

	}
	
}
8001a6c6:	2f fd       	sub	sp,-4
8001a6c8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a6cc:	80 01       	ld.sh	r1,r0[0x0]
8001a6ce:	a4 be       	st.b	r2[0x3],lr

8001a6d0 <init_UART_int>:

usart_config_t *init_UART_int(int UID) {
8001a6d0:	eb cd 40 c0 	pushm	r6-r7,lr
8001a6d4:	1a 97       	mov	r7,sp
8001a6d6:	20 1d       	sub	sp,4
8001a6d8:	4e 16       	lddpc	r6,8001a85c <init_UART_int+0x18c>
8001a6da:	1e 26       	rsub	r6,pc
8001a6dc:	ef 4c ff fc 	st.w	r7[-4],r12
	if ((usart_opt[UID].mode&UART_IN) >0)  gpio_enable_module_pin(usart_opt[UID].rx_pin_map.pin, usart_opt[UID].rx_pin_map.function); 
8001a6e0:	ee fa ff fc 	ld.w	r10,r7[-4]
8001a6e4:	ec f9 00 34 	ld.w	r9,r6[52]
8001a6e8:	e0 68 02 28 	mov	r8,552
8001a6ec:	f4 08 02 48 	mul	r8,r10,r8
8001a6f0:	f2 08 00 08 	add	r8,r9,r8
8001a6f4:	70 08       	ld.w	r8,r8[0x0]
8001a6f6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001a6fa:	58 08       	cp.w	r8,0
8001a6fc:	e0 8a 00 21 	brle	8001a73e <init_UART_int+0x6e>
8001a700:	ee fa ff fc 	ld.w	r10,r7[-4]
8001a704:	ec f9 00 34 	ld.w	r9,r6[52]
8001a708:	e0 68 02 28 	mov	r8,552
8001a70c:	f4 08 02 48 	mul	r8,r10,r8
8001a710:	f2 08 00 08 	add	r8,r9,r8
8001a714:	f0 c8 fd dc 	sub	r8,r8,-548
8001a718:	11 98       	ld.ub	r8,r8[0x1]
8001a71a:	10 99       	mov	r9,r8
8001a71c:	ee fb ff fc 	ld.w	r11,r7[-4]
8001a720:	ec fa 00 34 	ld.w	r10,r6[52]
8001a724:	e0 68 02 28 	mov	r8,552
8001a728:	f6 08 02 48 	mul	r8,r11,r8
8001a72c:	f4 08 00 08 	add	r8,r10,r8
8001a730:	f0 c8 fd dc 	sub	r8,r8,-548
8001a734:	11 88       	ld.ub	r8,r8[0x0]
8001a736:	12 9b       	mov	r11,r9
8001a738:	10 9c       	mov	r12,r8
8001a73a:	f0 16 00 3f 	mcall	r6[252]
	if ((usart_opt[UID].mode&UART_OUT)>0)  gpio_enable_module_pin(usart_opt[UID].tx_pin_map.pin, usart_opt[UID].tx_pin_map.function); 
8001a73e:	ee fa ff fc 	ld.w	r10,r7[-4]
8001a742:	ec f9 00 34 	ld.w	r9,r6[52]
8001a746:	e0 68 02 28 	mov	r8,552
8001a74a:	f4 08 02 48 	mul	r8,r10,r8
8001a74e:	f2 08 00 08 	add	r8,r9,r8
8001a752:	70 08       	ld.w	r8,r8[0x0]
8001a754:	e2 18 00 02 	andl	r8,0x2,COH
8001a758:	58 08       	cp.w	r8,0
8001a75a:	e0 8a 00 21 	brle	8001a79c <init_UART_int+0xcc>
8001a75e:	ee fa ff fc 	ld.w	r10,r7[-4]
8001a762:	ec f9 00 34 	ld.w	r9,r6[52]
8001a766:	e0 68 02 28 	mov	r8,552
8001a76a:	f4 08 02 48 	mul	r8,r10,r8
8001a76e:	f2 08 00 08 	add	r8,r9,r8
8001a772:	f0 c8 fd dc 	sub	r8,r8,-548
8001a776:	11 b8       	ld.ub	r8,r8[0x3]
8001a778:	10 99       	mov	r9,r8
8001a77a:	ee fb ff fc 	ld.w	r11,r7[-4]
8001a77e:	ec fa 00 34 	ld.w	r10,r6[52]
8001a782:	e0 68 02 28 	mov	r8,552
8001a786:	f6 08 02 48 	mul	r8,r11,r8
8001a78a:	f4 08 00 08 	add	r8,r10,r8
8001a78e:	f0 c8 fd dc 	sub	r8,r8,-548
8001a792:	11 a8       	ld.ub	r8,r8[0x2]
8001a794:	12 9b       	mov	r11,r9
8001a796:	10 9c       	mov	r12,r8
8001a798:	f0 16 00 3f 	mcall	r6[252]

	usart_init_rs232( usart_opt[UID].uart_device.uart, &(usart_opt[UID].options), sysclk_get_cpu_hz()); 
8001a79c:	fe b0 fd 0c 	rcall	8001a1b4 <sysclk_get_cpu_hz>
8001a7a0:	18 98       	mov	r8,r12
8001a7a2:	10 9a       	mov	r10,r8
8001a7a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001a7a8:	e0 68 02 28 	mov	r8,552
8001a7ac:	f2 08 02 48 	mul	r8,r9,r8
8001a7b0:	f0 c9 fd e8 	sub	r9,r8,-536
8001a7b4:	ec f8 00 34 	ld.w	r8,r6[52]
8001a7b8:	10 09       	add	r9,r8
8001a7ba:	ee fc ff fc 	ld.w	r12,r7[-4]
8001a7be:	ec f8 00 34 	ld.w	r8,r6[52]
8001a7c2:	e0 6b 00 8a 	mov	r11,138
8001a7c6:	f8 0b 02 4b 	mul	r11,r12,r11
8001a7ca:	2f fb       	sub	r11,-1
8001a7cc:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
8001a7d0:	12 9b       	mov	r11,r9
8001a7d2:	10 9c       	mov	r12,r8
8001a7d4:	f0 16 00 6b 	mcall	r6[428]
	//usart_write_line(usart_opt[UID].uart_device.uart, "UART initialised");
	register_UART_handler(UID);
8001a7d8:	ee fc ff fc 	ld.w	r12,r7[-4]
8001a7dc:	f0 16 02 02 	mcall	r6[2056]
	buffer_init(&usart_opt[UID].uart_device.transmit_buffer);
8001a7e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001a7e4:	e0 68 02 28 	mov	r8,552
8001a7e8:	f2 08 02 48 	mul	r8,r9,r8
8001a7ec:	f0 c9 ff f4 	sub	r9,r8,-12
8001a7f0:	ec f8 00 34 	ld.w	r8,r6[52]
8001a7f4:	f2 08 00 08 	add	r8,r9,r8
8001a7f8:	10 9c       	mov	r12,r8
8001a7fa:	f0 16 01 34 	mcall	r6[1232]
	buffer_init(&usart_opt[UID].uart_device.receive_buffer);
8001a7fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001a802:	e0 68 02 28 	mov	r8,552
8001a806:	f2 08 02 48 	mul	r8,r9,r8
8001a80a:	f0 c9 fe f4 	sub	r9,r8,-268
8001a80e:	ec f8 00 34 	ld.w	r8,r6[52]
8001a812:	f2 08 00 08 	add	r8,r9,r8
8001a816:	2f d8       	sub	r8,-3
8001a818:	10 9c       	mov	r12,r8
8001a81a:	f0 16 01 34 	mcall	r6[1232]
	if (usart_opt[UID].mode&UART_IN >0) usart_opt[UID].uart_device.uart->ier=AVR32_USART_IER_RXRDY_MASK;
8001a81e:	ee fa ff fc 	ld.w	r10,r7[-4]
8001a822:	ec f9 00 34 	ld.w	r9,r6[52]
8001a826:	e0 68 02 28 	mov	r8,552
8001a82a:	f4 08 02 48 	mul	r8,r10,r8
8001a82e:	f2 08 00 08 	add	r8,r9,r8
8001a832:	70 08       	ld.w	r8,r8[0x0]
8001a834:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001a838:	5c 58       	castu.b	r8
8001a83a:	c0 e0       	breq	8001a856 <init_UART_int+0x186>
8001a83c:	ee fa ff fc 	ld.w	r10,r7[-4]
8001a840:	ec f8 00 34 	ld.w	r8,r6[52]
8001a844:	e0 69 00 8a 	mov	r9,138
8001a848:	f4 09 02 49 	mul	r9,r10,r9
8001a84c:	2f f9       	sub	r9,-1
8001a84e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001a852:	30 19       	mov	r9,1
8001a854:	91 29       	st.w	r8[0x8],r9
	//if (usart_opt[UID].mode&UART_OUT>0) usart_opt[UID].uart_device.uart->ier=AVR32_USART_IER_TXRDY_MASK;
} 
8001a856:	2f fd       	sub	sp,-4
8001a858:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a85c:	80 01       	ld.sh	r1,r0[0x0]
8001a85e:	a5 5e       	asr	lr,0x5

8001a860 <uart_int_get_byte>:

/************************************************************************/
/* blocking operation to retrieve a received byte from uart             */
/************************************************************************/
char uart_int_get_byte(usart_config_t *usart_opt) {
8001a860:	eb cd 40 c0 	pushm	r6-r7,lr
8001a864:	1a 97       	mov	r7,sp
8001a866:	20 1d       	sub	sp,4
8001a868:	48 86       	lddpc	r6,8001a888 <uart_int_get_byte+0x28>
8001a86a:	1e 26       	rsub	r6,pc
8001a86c:	ef 4c ff fc 	st.w	r7[-4],r12
	return buffer_get(&(usart_opt->uart_device.receive_buffer));
8001a870:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a874:	f0 c8 fe f1 	sub	r8,r8,-271
8001a878:	10 9c       	mov	r12,r8
8001a87a:	f0 16 00 45 	mcall	r6[276]
8001a87e:	18 98       	mov	r8,r12
}
8001a880:	10 9c       	mov	r12,r8
8001a882:	2f fd       	sub	sp,-4
8001a884:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a888:	80 01       	ld.sh	r1,r0[0x0]
8001a88a:	a6 ee       	st.b	r3[0x6],lr

8001a88c <uart_int_bytes_available>:

/************************************************************************/
/* returns number of received bytes in the receive buffer               */
/************************************************************************/
int uart_int_bytes_available(usart_config_t *usart_opt) {
8001a88c:	eb cd 40 c0 	pushm	r6-r7,lr
8001a890:	1a 97       	mov	r7,sp
8001a892:	20 1d       	sub	sp,4
8001a894:	48 86       	lddpc	r6,8001a8b4 <uart_int_bytes_available+0x28>
8001a896:	1e 26       	rsub	r6,pc
8001a898:	ef 4c ff fc 	st.w	r7[-4],r12
	return buffer_bytes_available(&(usart_opt->uart_device.receive_buffer));
8001a89c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a8a0:	f0 c8 fe f1 	sub	r8,r8,-271
8001a8a4:	10 9c       	mov	r12,r8
8001a8a6:	f0 16 00 2e 	mcall	r6[184]
8001a8aa:	18 98       	mov	r8,r12
}
8001a8ac:	10 9c       	mov	r12,r8
8001a8ae:	2f fd       	sub	sp,-4
8001a8b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a8b4:	80 01       	ld.sh	r1,r0[0x0]
8001a8b6:	a7 1a       	ld.d	r10,--r3

8001a8b8 <uart_int_send_byte>:

/************************************************************************/
/* non-blocking operation to append a byte to the uart send buffer      */
/* if buffer is full, the command has no effect  (returns -1).          */
/************************************************************************/
short uart_int_send_byte(usart_config_t *usart_opt, char data) {
8001a8b8:	eb cd 40 c0 	pushm	r6-r7,lr
8001a8bc:	1a 97       	mov	r7,sp
8001a8be:	20 2d       	sub	sp,8
8001a8c0:	49 56       	lddpc	r6,8001a914 <uart_int_send_byte+0x5c>
8001a8c2:	1e 26       	rsub	r6,pc
8001a8c4:	ef 4c ff fc 	st.w	r7[-4],r12
8001a8c8:	16 98       	mov	r8,r11
8001a8ca:	ef 68 ff f8 	st.b	r7[-8],r8
//	usart_write_line(usart_opt->uart_device.uart, "\ns");
	while (buffer_put(&(usart_opt->uart_device.transmit_buffer), data)<0);
8001a8ce:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8001a8d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a8d6:	2f 48       	sub	r8,-12
8001a8d8:	12 9b       	mov	r11,r9
8001a8da:	10 9c       	mov	r12,r8
8001a8dc:	f0 16 00 55 	mcall	r6[340]
8001a8e0:	18 98       	mov	r8,r12
8001a8e2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001a8e6:	30 08       	mov	r8,0
8001a8e8:	f0 09 18 00 	cp.b	r9,r8
8001a8ec:	cf 15       	brlt	8001a8ce <uart_int_send_byte+0x16>
	if ((buffer_bytes_available(&(usart_opt->uart_device.transmit_buffer)) >= 1))//&&
8001a8ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a8f2:	2f 48       	sub	r8,-12
8001a8f4:	10 9c       	mov	r12,r8
8001a8f6:	f0 16 00 2e 	mcall	r6[184]
8001a8fa:	18 98       	mov	r8,r12
8001a8fc:	58 08       	cp.w	r8,0
8001a8fe:	e0 8a 00 07 	brle	8001a90c <uart_int_send_byte+0x54>
//	  (usart_opt->uart_device.uart->csr & AVR32_USART_CSR_TXRDY_MASK)) 
	{ // if there is exactly one byte in the buffer (this one...), and transmitter ready
		 // kick-start transmission
//		usart_opt->uart_device.uart->thr='c';//buffer_get(&(usart_opt->uart_device.transmit_buffer));
		usart_opt->uart_device.uart->ier=AVR32_USART_IER_TXRDY_MASK;
8001a902:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a906:	70 18       	ld.w	r8,r8[0x4]
8001a908:	30 29       	mov	r9,2
8001a90a:	91 29       	st.w	r8[0x8],r9
	} 		
}
8001a90c:	2f ed       	sub	sp,-8
8001a90e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a912:	00 00       	add	r0,r0
8001a914:	80 01       	ld.sh	r1,r0[0x0]
8001a916:	a7 46       	asr	r6,0x6

8001a918 <uart_int_flush>:


/** 
 * blocking operation to flush the uart buffer. Returns once the last byte has been passed to hardware for transmission.
 */
void uart_int_flush(usart_config_t *usart_opt) {
8001a918:	eb cd 40 c0 	pushm	r6-r7,lr
8001a91c:	1a 97       	mov	r7,sp
8001a91e:	20 1d       	sub	sp,4
8001a920:	48 b6       	lddpc	r6,8001a94c <uart_int_flush+0x34>
8001a922:	1e 26       	rsub	r6,pc
8001a924:	ef 4c ff fc 	st.w	r7[-4],r12
	usart_opt->uart_device.uart->ier=AVR32_USART_IER_TXRDY_MASK;
8001a928:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a92c:	70 18       	ld.w	r8,r8[0x4]
8001a92e:	30 29       	mov	r9,2
8001a930:	91 29       	st.w	r8[0x8],r9
	while (!buffer_empty(&(usart_opt->uart_device.transmit_buffer)));
8001a932:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a936:	2f 48       	sub	r8,-12
8001a938:	10 9c       	mov	r12,r8
8001a93a:	f0 16 01 26 	mcall	r6[1176]
8001a93e:	18 98       	mov	r8,r12
8001a940:	5c 58       	castu.b	r8
8001a942:	cf 80       	breq	8001a932 <uart_int_flush+0x1a>
}
8001a944:	2f fd       	sub	sp,-4
8001a946:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a94a:	00 00       	add	r0,r0
8001a94c:	80 01       	ld.sh	r1,r0[0x0]
8001a94e:	a7 a6       	sbr	r6,0x6

8001a950 <uart_out_buffer_empty>:

int uart_out_buffer_empty(usart_config_t *usart_opt) {
8001a950:	eb cd 40 c0 	pushm	r6-r7,lr
8001a954:	1a 97       	mov	r7,sp
8001a956:	20 1d       	sub	sp,4
8001a958:	48 96       	lddpc	r6,8001a97c <uart_out_buffer_empty+0x2c>
8001a95a:	1e 26       	rsub	r6,pc
8001a95c:	ef 4c ff fc 	st.w	r7[-4],r12
	return buffer_empty(&(usart_opt->uart_device.transmit_buffer));
8001a960:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a964:	2f 48       	sub	r8,-12
8001a966:	10 9c       	mov	r12,r8
8001a968:	f0 16 01 26 	mcall	r6[1176]
8001a96c:	18 98       	mov	r8,r12
8001a96e:	5c 58       	castu.b	r8
8001a970:	5c 68       	casts.b	r8
}
8001a972:	10 9c       	mov	r12,r8
8001a974:	2f fd       	sub	sp,-4
8001a976:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a97a:	00 00       	add	r0,r0
8001a97c:	80 01       	ld.sh	r1,r0[0x0]
8001a97e:	a7 de       	cbr	lr,0x7

8001a980 <get_UART_handle>:

usart_config_t *get_UART_handle(int UID) {
8001a980:	eb cd 40 c0 	pushm	r6-r7,lr
8001a984:	1a 97       	mov	r7,sp
8001a986:	20 1d       	sub	sp,4
8001a988:	48 96       	lddpc	r6,8001a9ac <get_UART_handle+0x2c>
8001a98a:	1e 26       	rsub	r6,pc
8001a98c:	ef 4c ff fc 	st.w	r7[-4],r12
	return &usart_opt[UID];
8001a990:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001a994:	e0 68 02 28 	mov	r8,552
8001a998:	b1 39       	mul	r9,r8
8001a99a:	ec f8 00 34 	ld.w	r8,r6[52]
8001a99e:	f2 08 00 08 	add	r8,r9,r8
}
8001a9a2:	10 9c       	mov	r12,r8
8001a9a4:	2f fd       	sub	sp,-4
8001a9a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a9aa:	00 00       	add	r0,r0
8001a9ac:	80 01       	ld.sh	r1,r0[0x0]
8001a9ae:	a8 0e       	st.h	r4[0x0],lr

8001a9b0 <register_write_stream>:

void register_write_stream(usart_config_t *usart_opt, byte_stream_t *stream) {
8001a9b0:	eb cd 40 c0 	pushm	r6-r7,lr
8001a9b4:	1a 97       	mov	r7,sp
8001a9b6:	20 2d       	sub	sp,8
8001a9b8:	49 16       	lddpc	r6,8001a9fc <register_write_stream+0x4c>
8001a9ba:	1e 26       	rsub	r6,pc
8001a9bc:	ef 4c ff fc 	st.w	r7[-4],r12
8001a9c0:	ef 4b ff f8 	st.w	r7[-8],r11
	stream->get=NULL;
8001a9c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a9c8:	30 09       	mov	r9,0
8001a9ca:	91 09       	st.w	r8[0x0],r9
	//stream->get=&uart_int_get_byte;
	stream->put=&uart_int_send_byte;
8001a9cc:	ec f9 06 0c 	ld.w	r9,r6[1548]
8001a9d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a9d4:	91 19       	st.w	r8[0x4],r9
	stream->flush=&uart_int_flush;
8001a9d6:	ec f9 06 c0 	ld.w	r9,r6[1728]
8001a9da:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a9de:	91 29       	st.w	r8[0x8],r9
	stream->buffer_empty=&uart_out_buffer_empty;
8001a9e0:	ec f9 08 8c 	ld.w	r9,r6[2188]
8001a9e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a9e8:	91 39       	st.w	r8[0xc],r9
	stream->data=usart_opt;
8001a9ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a9ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001a9f2:	91 59       	st.w	r8[0x14],r9

}
8001a9f4:	2f ed       	sub	sp,-8
8001a9f6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a9fa:	00 00       	add	r0,r0
8001a9fc:	80 01       	ld.sh	r1,r0[0x0]
8001a9fe:	a8 3e       	st.h	r4[0x6],lr

8001aa00 <register_read_stream>:


void register_read_stream(usart_config_t *usart_opt,  byte_stream_t *stream) {
8001aa00:	eb cd 40 80 	pushm	r7,lr
8001aa04:	1a 97       	mov	r7,sp
8001aa06:	20 2d       	sub	sp,8
8001aa08:	ef 4c ff fc 	st.w	r7[-4],r12
8001aa0c:	ef 4b ff f8 	st.w	r7[-8],r11
	usart_opt->uart_device.receive_stream=stream;
8001aa10:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001aa14:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001aa18:	f1 49 02 14 	st.w	r8[532],r9
}
8001aa1c:	2f ed       	sub	sp,-8
8001aa1e:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

8001aa24 <init_scheduler>:
#include "scheduler.h"
#include "time_keeper.h"



void init_scheduler(task_set *ts) {
8001aa24:	eb cd 40 80 	pushm	r7,lr
8001aa28:	1a 97       	mov	r7,sp
8001aa2a:	20 2d       	sub	sp,8
8001aa2c:	ef 4c ff f8 	st.w	r7[-8],r12
	int i;
	for (i=0; i<ts->number_of_tasks; i++) {
8001aa30:	30 08       	mov	r8,0
8001aa32:	ef 48 ff fc 	st.w	r7[-4],r8
8001aa36:	c2 18       	rjmp	8001aa78 <init_scheduler+0x54>
		ts->tasks[i].call_function=NULL;
8001aa38:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001aa3c:	ee fa ff f8 	ld.w	r10,r7[-8]
8001aa40:	12 98       	mov	r8,r9
8001aa42:	a1 78       	lsl	r8,0x1
8001aa44:	12 08       	add	r8,r9
8001aa46:	2f f8       	sub	r8,-1
8001aa48:	a5 68       	lsl	r8,0x4
8001aa4a:	f4 08 00 08 	add	r8,r10,r8
8001aa4e:	30 09       	mov	r9,0
8001aa50:	91 09       	st.w	r8[0x0],r9
		ts->tasks[i].tasks=ts;
8001aa52:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001aa56:	ee fa ff f8 	ld.w	r10,r7[-8]
8001aa5a:	ee fb ff f8 	ld.w	r11,r7[-8]
8001aa5e:	12 98       	mov	r8,r9
8001aa60:	a1 78       	lsl	r8,0x1
8001aa62:	12 08       	add	r8,r9
8001aa64:	a5 68       	lsl	r8,0x4
8001aa66:	f6 08 00 08 	add	r8,r11,r8
8001aa6a:	2f 48       	sub	r8,-12
8001aa6c:	91 0a       	st.w	r8[0x0],r10



void init_scheduler(task_set *ts) {
	int i;
	for (i=0; i<ts->number_of_tasks; i++) {
8001aa6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001aa72:	2f f8       	sub	r8,-1
8001aa74:	ef 48 ff fc 	st.w	r7[-4],r8
8001aa78:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001aa7c:	11 88       	ld.ub	r8,r8[0x0]
8001aa7e:	10 99       	mov	r9,r8
8001aa80:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001aa84:	10 39       	cp.w	r9,r8
8001aa86:	fe 99 ff d9 	brgt	8001aa38 <init_scheduler+0x14>
		ts->tasks[i].call_function=NULL;
		ts->tasks[i].tasks=ts;
		//ts->tasks[i].run_mode=UNINITIALISED;
	}
	ts->running_task=-1;
8001aa8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001aa8e:	3f f9       	mov	r9,-1
8001aa90:	91 19       	st.w	r8[0x4],r9
	ts->current_schedule_slot=0;
8001aa92:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001aa96:	30 09       	mov	r9,0
8001aa98:	91 29       	st.w	r8[0x8],r9
}
8001aa9a:	2f ed       	sub	sp,-8
8001aa9c:	e3 cd 80 80 	ldm	sp++,r7,pc

8001aaa0 <register_task>:

task_handle_t register_task(task_set *ts, int task_slot, unsigned long repeat_period, task_run_mode_t run_mode, function_pointer *call_function) {
8001aaa0:	eb cd 40 e0 	pushm	r5-r7,lr
8001aaa4:	1a 97       	mov	r7,sp
8001aaa6:	20 5d       	sub	sp,20
8001aaa8:	4d f6       	lddpc	r6,8001ac24 <register_task+0x184>
8001aaaa:	1e 26       	rsub	r6,pc
8001aaac:	ef 4c ff fc 	st.w	r7[-4],r12
8001aab0:	ef 4b ff f8 	st.w	r7[-8],r11
8001aab4:	ef 4a ff f4 	st.w	r7[-12],r10
8001aab8:	ef 49 ff f0 	st.w	r7[-16],r9
8001aabc:	ef 48 ff ec 	st.w	r7[-20],r8
	if ((task_slot<0) || (task_slot>=ts->number_of_tasks)) {
8001aac0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001aac4:	58 08       	cp.w	r8,0
8001aac6:	c0 a5       	brlt	8001aada <register_task+0x3a>
8001aac8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001aacc:	11 88       	ld.ub	r8,r8[0x0]
8001aace:	10 99       	mov	r9,r8
8001aad0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001aad4:	10 39       	cp.w	r9,r8
8001aad6:	e0 89 00 05 	brgt	8001aae0 <register_task+0x40>
		return -1;
8001aada:	e0 68 00 ff 	mov	r8,255
8001aade:	c9 f8       	rjmp	8001ac1c <register_task+0x17c>
	}
	ts->tasks[task_slot].task_id=task_slot;
8001aae0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001aae4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001aae8:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
8001aaec:	ee fb ff fc 	ld.w	r11,r7[-4]
8001aaf0:	12 98       	mov	r8,r9
8001aaf2:	a1 78       	lsl	r8,0x1
8001aaf4:	12 08       	add	r8,r9
8001aaf6:	a1 78       	lsl	r8,0x1
8001aaf8:	2f f8       	sub	r8,-1
8001aafa:	a3 78       	lsl	r8,0x3
8001aafc:	f6 08 00 08 	add	r8,r11,r8
8001ab00:	14 99       	mov	r9,r10
8001ab02:	b0 69       	st.h	r8[0xc],r9
	ts->tasks[task_slot].call_function=call_function;
8001ab04:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ab08:	ee fa ff ec 	ld.w	r10,r7[-20]
8001ab0c:	ee fb ff fc 	ld.w	r11,r7[-4]
8001ab10:	12 98       	mov	r8,r9
8001ab12:	a1 78       	lsl	r8,0x1
8001ab14:	12 08       	add	r8,r9
8001ab16:	2f f8       	sub	r8,-1
8001ab18:	a5 68       	lsl	r8,0x4
8001ab1a:	f6 08 00 08 	add	r8,r11,r8
8001ab1e:	91 0a       	st.w	r8[0x0],r10
	ts->tasks[task_slot].run_mode=run_mode;
8001ab20:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ab24:	ee fa ff fc 	ld.w	r10,r7[-4]
8001ab28:	12 98       	mov	r8,r9
8001ab2a:	a1 78       	lsl	r8,0x1
8001ab2c:	12 08       	add	r8,r9
8001ab2e:	a5 68       	lsl	r8,0x4
8001ab30:	f4 08 00 08 	add	r8,r10,r8
8001ab34:	2e 88       	sub	r8,-24
8001ab36:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001ab3a:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].repeat_period=repeat_period;
8001ab3c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ab40:	ee fa ff fc 	ld.w	r10,r7[-4]
8001ab44:	12 98       	mov	r8,r9
8001ab46:	a1 78       	lsl	r8,0x1
8001ab48:	12 08       	add	r8,r9
8001ab4a:	a5 68       	lsl	r8,0x4
8001ab4c:	f4 08 00 08 	add	r8,r10,r8
8001ab50:	2e 08       	sub	r8,-32
8001ab52:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ab56:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].next_run=GET_TIME;
8001ab58:	ee f5 ff f8 	ld.w	r5,r7[-8]
8001ab5c:	f0 16 00 29 	mcall	r6[164]
8001ab60:	18 99       	mov	r9,r12
8001ab62:	ee fa ff fc 	ld.w	r10,r7[-4]
8001ab66:	0a 98       	mov	r8,r5
8001ab68:	a1 78       	lsl	r8,0x1
8001ab6a:	0a 08       	add	r8,r5
8001ab6c:	a5 68       	lsl	r8,0x4
8001ab6e:	f4 08 00 08 	add	r8,r10,r8
8001ab72:	2d c8       	sub	r8,-36
8001ab74:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].execution_time=0;
8001ab76:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ab7a:	ee fa ff fc 	ld.w	r10,r7[-4]
8001ab7e:	12 98       	mov	r8,r9
8001ab80:	a1 78       	lsl	r8,0x1
8001ab82:	12 08       	add	r8,r9
8001ab84:	a5 68       	lsl	r8,0x4
8001ab86:	f4 08 00 08 	add	r8,r10,r8
8001ab8a:	2d 88       	sub	r8,-40
8001ab8c:	30 09       	mov	r9,0
8001ab8e:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].timing_mode=PERIODIC_ABSOLUTE;
8001ab90:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ab94:	ee fa ff fc 	ld.w	r10,r7[-4]
8001ab98:	12 98       	mov	r8,r9
8001ab9a:	a1 78       	lsl	r8,0x1
8001ab9c:	12 08       	add	r8,r9
8001ab9e:	2f f8       	sub	r8,-1
8001aba0:	a5 68       	lsl	r8,0x4
8001aba2:	f4 08 00 08 	add	r8,r10,r8
8001aba6:	2f 48       	sub	r8,-12
8001aba8:	30 09       	mov	r9,0
8001abaa:	91 09       	st.w	r8[0x0],r9
#ifdef SCHEDULER_PROFILING	
	ts->tasks[task_slot].delay_max=0;
8001abac:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001abb0:	ee fa ff fc 	ld.w	r10,r7[-4]
8001abb4:	12 98       	mov	r8,r9
8001abb6:	a1 78       	lsl	r8,0x1
8001abb8:	12 08       	add	r8,r9
8001abba:	a5 68       	lsl	r8,0x4
8001abbc:	f4 08 00 08 	add	r8,r10,r8
8001abc0:	2d 48       	sub	r8,-44
8001abc2:	30 09       	mov	r9,0
8001abc4:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].delay_avg=0;
8001abc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001abca:	ee fa ff fc 	ld.w	r10,r7[-4]
8001abce:	f0 c9 ff ff 	sub	r9,r8,-1
8001abd2:	12 98       	mov	r8,r9
8001abd4:	a1 78       	lsl	r8,0x1
8001abd6:	12 08       	add	r8,r9
8001abd8:	a5 68       	lsl	r8,0x4
8001abda:	f4 08 00 08 	add	r8,r10,r8
8001abde:	30 09       	mov	r9,0
8001abe0:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].delay_var_squared=0;
8001abe2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001abe6:	ee fa ff fc 	ld.w	r10,r7[-4]
8001abea:	12 98       	mov	r8,r9
8001abec:	a1 78       	lsl	r8,0x1
8001abee:	12 08       	add	r8,r9
8001abf0:	a5 68       	lsl	r8,0x4
8001abf2:	f4 08 00 08 	add	r8,r10,r8
8001abf6:	2c c8       	sub	r8,-52
8001abf8:	30 09       	mov	r9,0
8001abfa:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].rt_violations=0;
8001abfc:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ac00:	ee fa ff fc 	ld.w	r10,r7[-4]
8001ac04:	12 98       	mov	r8,r9
8001ac06:	a1 78       	lsl	r8,0x1
8001ac08:	12 08       	add	r8,r9
8001ac0a:	a5 68       	lsl	r8,0x4
8001ac0c:	f4 08 00 08 	add	r8,r10,r8
8001ac10:	2c 88       	sub	r8,-56
8001ac12:	30 09       	mov	r9,0
8001ac14:	91 09       	st.w	r8[0x0],r9
#endif
	return task_slot;
8001ac16:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ac1a:	5c 58       	castu.b	r8
}
8001ac1c:	10 9c       	mov	r12,r8
8001ac1e:	2f bd       	sub	sp,-20
8001ac20:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001ac24:	80 01       	ld.sh	r1,r0[0x0]
8001ac26:	a9 2e       	st.d	r4++,lr

8001ac28 <add_task>:

bool add_task(task_set *ts, unsigned long repeat_period, task_run_mode_t run_mode, function_pointer *call_function, uint32_t task_id) {
8001ac28:	eb cd 40 c0 	pushm	r6-r7,lr
8001ac2c:	1a 97       	mov	r7,sp
8001ac2e:	20 6d       	sub	sp,24
8001ac30:	4a d6       	lddpc	r6,8001ace4 <add_task+0xbc>
8001ac32:	1e 26       	rsub	r6,pc
8001ac34:	ef 4c ff f8 	st.w	r7[-8],r12
8001ac38:	ef 4b ff f4 	st.w	r7[-12],r11
8001ac3c:	ef 4a ff f0 	st.w	r7[-16],r10
8001ac40:	ef 49 ff ec 	st.w	r7[-20],r9
8001ac44:	ef 48 ff e8 	st.w	r7[-24],r8
	int task_slot=0;
8001ac48:	30 08       	mov	r8,0
8001ac4a:	ef 48 ff fc 	st.w	r7[-4],r8
	while ((task_slot < ts->number_of_tasks) && (ts->tasks[task_slot].call_function!=NULL)) task_slot++;
8001ac4e:	c0 68       	rjmp	8001ac5a <add_task+0x32>
8001ac50:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ac54:	2f f8       	sub	r8,-1
8001ac56:	ef 48 ff fc 	st.w	r7[-4],r8
8001ac5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ac5e:	11 88       	ld.ub	r8,r8[0x0]
8001ac60:	10 99       	mov	r9,r8
8001ac62:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ac66:	10 39       	cp.w	r9,r8
8001ac68:	e0 8a 00 10 	brle	8001ac88 <add_task+0x60>
8001ac6c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ac70:	ee fa ff f8 	ld.w	r10,r7[-8]
8001ac74:	12 98       	mov	r8,r9
8001ac76:	a1 78       	lsl	r8,0x1
8001ac78:	12 08       	add	r8,r9
8001ac7a:	2f f8       	sub	r8,-1
8001ac7c:	a5 68       	lsl	r8,0x4
8001ac7e:	f4 08 00 08 	add	r8,r10,r8
8001ac82:	70 08       	ld.w	r8,r8[0x0]
8001ac84:	58 08       	cp.w	r8,0
8001ac86:	ce 51       	brne	8001ac50 <add_task+0x28>
	if (task_slot >= ts->number_of_tasks) return false;
8001ac88:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ac8c:	11 88       	ld.ub	r8,r8[0x0]
8001ac8e:	10 99       	mov	r9,r8
8001ac90:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ac94:	10 39       	cp.w	r9,r8
8001ac96:	e0 89 00 04 	brgt	8001ac9e <add_task+0x76>
8001ac9a:	30 08       	mov	r8,0
8001ac9c:	c2 08       	rjmp	8001acdc <add_task+0xb4>
	register_task(ts,  task_slot,   repeat_period, run_mode,  call_function);
8001ac9e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001aca2:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001aca6:	ee fa ff f4 	ld.w	r10,r7[-12]
8001acaa:	ee fb ff fc 	ld.w	r11,r7[-4]
8001acae:	ee fc ff f8 	ld.w	r12,r7[-8]
8001acb2:	f0 16 00 64 	mcall	r6[400]
	ts->tasks[task_slot].task_id=task_id;
8001acb6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001acba:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001acbe:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
8001acc2:	ee fb ff f8 	ld.w	r11,r7[-8]
8001acc6:	12 98       	mov	r8,r9
8001acc8:	a1 78       	lsl	r8,0x1
8001acca:	12 08       	add	r8,r9
8001accc:	a1 78       	lsl	r8,0x1
8001acce:	2f f8       	sub	r8,-1
8001acd0:	a3 78       	lsl	r8,0x3
8001acd2:	f6 08 00 08 	add	r8,r11,r8
8001acd6:	14 99       	mov	r9,r10
8001acd8:	b0 69       	st.h	r8[0xc],r9
	return true;
8001acda:	30 18       	mov	r8,1
}
8001acdc:	10 9c       	mov	r12,r8
8001acde:	2f ad       	sub	sp,-24
8001ace0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ace4:	80 01       	ld.sh	r1,r0[0x0]
8001ace6:	aa b6       	st.b	r5[0x3],r6

8001ace8 <sort_taskset_by_period>:


void sort_taskset_by_period(task_set *ts){
8001ace8:	eb cd 40 80 	pushm	r7,lr
8001acec:	1a 97       	mov	r7,sp
8001acee:	20 fd       	sub	sp,60
8001acf0:	ef 4c ff c4 	st.w	r7[-60],r12
	int i;
	bool sorted=false;
8001acf4:	30 08       	mov	r8,0
8001acf6:	ef 68 ff ff 	st.b	r7[-1],r8
	task_entry tmp;
	if (ts->number_of_tasks<2) return;
8001acfa:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001acfe:	11 89       	ld.ub	r9,r8[0x0]
8001ad00:	30 18       	mov	r8,1
8001ad02:	f0 09 18 00 	cp.b	r9,r8
8001ad06:	e0 8b 01 1d 	brhi	8001af40 <sort_taskset_by_period+0x258>
8001ad0a:	c2 39       	rjmp	8001af50 <sort_taskset_by_period+0x268>

	while (!sorted) {
		sorted=true;
8001ad0c:	30 18       	mov	r8,1
8001ad0e:	ef 68 ff ff 	st.b	r7[-1],r8
		for (i=0; i<ts->number_of_tasks-1; i++) {
8001ad12:	30 08       	mov	r8,0
8001ad14:	ef 48 ff f8 	st.w	r7[-8],r8
8001ad18:	c0 99       	rjmp	8001af2a <sort_taskset_by_period+0x242>
			if ( ((ts->tasks[i].call_function==NULL)&&(ts->tasks[i+1].call_function!=NULL)) ||
8001ad1a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ad1e:	ee fa ff c4 	ld.w	r10,r7[-60]
8001ad22:	12 98       	mov	r8,r9
8001ad24:	a1 78       	lsl	r8,0x1
8001ad26:	12 08       	add	r8,r9
8001ad28:	2f f8       	sub	r8,-1
8001ad2a:	a5 68       	lsl	r8,0x4
8001ad2c:	f4 08 00 08 	add	r8,r10,r8
8001ad30:	70 08       	ld.w	r8,r8[0x0]
8001ad32:	58 08       	cp.w	r8,0
8001ad34:	c1 11       	brne	8001ad56 <sort_taskset_by_period+0x6e>
8001ad36:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ad3a:	f0 c9 ff ff 	sub	r9,r8,-1
8001ad3e:	ee fa ff c4 	ld.w	r10,r7[-60]
8001ad42:	12 98       	mov	r8,r9
8001ad44:	a1 78       	lsl	r8,0x1
8001ad46:	12 08       	add	r8,r9
8001ad48:	2f f8       	sub	r8,-1
8001ad4a:	a5 68       	lsl	r8,0x4
8001ad4c:	f4 08 00 08 	add	r8,r10,r8
8001ad50:	70 08       	ld.w	r8,r8[0x0]
8001ad52:	58 08       	cp.w	r8,0
8001ad54:	c3 e1       	brne	8001add0 <sort_taskset_by_period+0xe8>
				((ts->tasks[i].call_function!=NULL)&&(ts->tasks[i+1].call_function!=NULL) &&
8001ad56:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ad5a:	ee fa ff c4 	ld.w	r10,r7[-60]
8001ad5e:	12 98       	mov	r8,r9
8001ad60:	a1 78       	lsl	r8,0x1
8001ad62:	12 08       	add	r8,r9
8001ad64:	2f f8       	sub	r8,-1
8001ad66:	a5 68       	lsl	r8,0x4
8001ad68:	f4 08 00 08 	add	r8,r10,r8
8001ad6c:	70 08       	ld.w	r8,r8[0x0]
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
		sorted=true;
		for (i=0; i<ts->number_of_tasks-1; i++) {
			if ( ((ts->tasks[i].call_function==NULL)&&(ts->tasks[i+1].call_function!=NULL)) ||
8001ad6e:	58 08       	cp.w	r8,0
8001ad70:	e0 80 00 d8 	breq	8001af20 <sort_taskset_by_period+0x238>
				((ts->tasks[i].call_function!=NULL)&&(ts->tasks[i+1].call_function!=NULL) &&
8001ad74:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ad78:	f0 c9 ff ff 	sub	r9,r8,-1
8001ad7c:	ee fa ff c4 	ld.w	r10,r7[-60]
8001ad80:	12 98       	mov	r8,r9
8001ad82:	a1 78       	lsl	r8,0x1
8001ad84:	12 08       	add	r8,r9
8001ad86:	2f f8       	sub	r8,-1
8001ad88:	a5 68       	lsl	r8,0x4
8001ad8a:	f4 08 00 08 	add	r8,r10,r8
8001ad8e:	70 08       	ld.w	r8,r8[0x0]
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
		sorted=true;
		for (i=0; i<ts->number_of_tasks-1; i++) {
			if ( ((ts->tasks[i].call_function==NULL)&&(ts->tasks[i+1].call_function!=NULL)) ||
8001ad90:	58 08       	cp.w	r8,0
8001ad92:	e0 80 00 c7 	breq	8001af20 <sort_taskset_by_period+0x238>
				((ts->tasks[i].call_function!=NULL)&&(ts->tasks[i+1].call_function!=NULL) &&
				(ts->tasks[i].repeat_period > ts->tasks[i+1].repeat_period))) {
8001ad96:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ad9a:	ee fa ff c4 	ld.w	r10,r7[-60]
8001ad9e:	12 98       	mov	r8,r9
8001ada0:	a1 78       	lsl	r8,0x1
8001ada2:	12 08       	add	r8,r9
8001ada4:	a5 68       	lsl	r8,0x4
8001ada6:	f4 08 00 08 	add	r8,r10,r8
8001adaa:	2e 08       	sub	r8,-32
8001adac:	70 0a       	ld.w	r10,r8[0x0]
8001adae:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001adb2:	f0 c9 ff ff 	sub	r9,r8,-1
8001adb6:	ee fb ff c4 	ld.w	r11,r7[-60]
8001adba:	12 98       	mov	r8,r9
8001adbc:	a1 78       	lsl	r8,0x1
8001adbe:	12 08       	add	r8,r9
8001adc0:	a5 68       	lsl	r8,0x4
8001adc2:	f6 08 00 08 	add	r8,r11,r8
8001adc6:	2e 08       	sub	r8,-32
8001adc8:	70 08       	ld.w	r8,r8[0x0]
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
		sorted=true;
		for (i=0; i<ts->number_of_tasks-1; i++) {
			if ( ((ts->tasks[i].call_function==NULL)&&(ts->tasks[i+1].call_function!=NULL)) ||
8001adca:	10 3a       	cp.w	r10,r8
8001adcc:	e0 88 00 aa 	brls	8001af20 <sort_taskset_by_period+0x238>
				((ts->tasks[i].call_function!=NULL)&&(ts->tasks[i+1].call_function!=NULL) &&
				(ts->tasks[i].repeat_period > ts->tasks[i+1].repeat_period))) {
				tmp=ts->tasks[i];
8001add0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001add4:	ee fa ff c4 	ld.w	r10,r7[-60]
8001add8:	12 98       	mov	r8,r9
8001adda:	a1 78       	lsl	r8,0x1
8001addc:	12 08       	add	r8,r9
8001adde:	a5 68       	lsl	r8,0x4
8001ade0:	f4 08 00 08 	add	r8,r10,r8
8001ade4:	2f 48       	sub	r8,-12
8001ade6:	ee cb 00 38 	sub	r11,r7,56
8001adea:	10 9a       	mov	r10,r8
8001adec:	f6 c8 00 00 	sub	r8,r11,0
8001adf0:	f4 c9 00 00 	sub	r9,r10,0
8001adf4:	72 0c       	ld.w	r12,r9[0x0]
8001adf6:	91 0c       	st.w	r8[0x0],r12
8001adf8:	72 1c       	ld.w	r12,r9[0x4]
8001adfa:	91 1c       	st.w	r8[0x4],r12
8001adfc:	72 2c       	ld.w	r12,r9[0x8]
8001adfe:	91 2c       	st.w	r8[0x8],r12
8001ae00:	72 39       	ld.w	r9,r9[0xc]
8001ae02:	91 39       	st.w	r8[0xc],r9
8001ae04:	f6 c8 ff f0 	sub	r8,r11,-16
8001ae08:	f4 c9 ff f0 	sub	r9,r10,-16
8001ae0c:	72 0c       	ld.w	r12,r9[0x0]
8001ae0e:	91 0c       	st.w	r8[0x0],r12
8001ae10:	72 1c       	ld.w	r12,r9[0x4]
8001ae12:	91 1c       	st.w	r8[0x4],r12
8001ae14:	72 2c       	ld.w	r12,r9[0x8]
8001ae16:	91 2c       	st.w	r8[0x8],r12
8001ae18:	72 39       	ld.w	r9,r9[0xc]
8001ae1a:	91 39       	st.w	r8[0xc],r9
8001ae1c:	f6 c8 ff e0 	sub	r8,r11,-32
8001ae20:	f4 c9 ff e0 	sub	r9,r10,-32
8001ae24:	72 0a       	ld.w	r10,r9[0x0]
8001ae26:	91 0a       	st.w	r8[0x0],r10
8001ae28:	72 1a       	ld.w	r10,r9[0x4]
8001ae2a:	91 1a       	st.w	r8[0x4],r10
8001ae2c:	72 2a       	ld.w	r10,r9[0x8]
8001ae2e:	91 2a       	st.w	r8[0x8],r10
8001ae30:	72 39       	ld.w	r9,r9[0xc]
8001ae32:	91 39       	st.w	r8[0xc],r9
				ts->tasks[i]=ts->tasks[i+1];
8001ae34:	ee fa ff f8 	ld.w	r10,r7[-8]
8001ae38:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ae3c:	f0 c9 ff ff 	sub	r9,r8,-1
8001ae40:	ee fb ff c4 	ld.w	r11,r7[-60]
8001ae44:	14 98       	mov	r8,r10
8001ae46:	a1 78       	lsl	r8,0x1
8001ae48:	14 08       	add	r8,r10
8001ae4a:	a5 68       	lsl	r8,0x4
8001ae4c:	f6 08 00 08 	add	r8,r11,r8
8001ae50:	f0 ca ff f4 	sub	r10,r8,-12
8001ae54:	ee fb ff c4 	ld.w	r11,r7[-60]
8001ae58:	12 98       	mov	r8,r9
8001ae5a:	a1 78       	lsl	r8,0x1
8001ae5c:	12 08       	add	r8,r9
8001ae5e:	a5 68       	lsl	r8,0x4
8001ae60:	f6 08 00 08 	add	r8,r11,r8
8001ae64:	2f 48       	sub	r8,-12
8001ae66:	14 9b       	mov	r11,r10
8001ae68:	10 9a       	mov	r10,r8
8001ae6a:	f6 c8 00 00 	sub	r8,r11,0
8001ae6e:	f4 c9 00 00 	sub	r9,r10,0
8001ae72:	72 0c       	ld.w	r12,r9[0x0]
8001ae74:	91 0c       	st.w	r8[0x0],r12
8001ae76:	72 1c       	ld.w	r12,r9[0x4]
8001ae78:	91 1c       	st.w	r8[0x4],r12
8001ae7a:	72 2c       	ld.w	r12,r9[0x8]
8001ae7c:	91 2c       	st.w	r8[0x8],r12
8001ae7e:	72 39       	ld.w	r9,r9[0xc]
8001ae80:	91 39       	st.w	r8[0xc],r9
8001ae82:	f6 c8 ff f0 	sub	r8,r11,-16
8001ae86:	f4 c9 ff f0 	sub	r9,r10,-16
8001ae8a:	72 0c       	ld.w	r12,r9[0x0]
8001ae8c:	91 0c       	st.w	r8[0x0],r12
8001ae8e:	72 1c       	ld.w	r12,r9[0x4]
8001ae90:	91 1c       	st.w	r8[0x4],r12
8001ae92:	72 2c       	ld.w	r12,r9[0x8]
8001ae94:	91 2c       	st.w	r8[0x8],r12
8001ae96:	72 39       	ld.w	r9,r9[0xc]
8001ae98:	91 39       	st.w	r8[0xc],r9
8001ae9a:	f6 c8 ff e0 	sub	r8,r11,-32
8001ae9e:	f4 c9 ff e0 	sub	r9,r10,-32
8001aea2:	72 0a       	ld.w	r10,r9[0x0]
8001aea4:	91 0a       	st.w	r8[0x0],r10
8001aea6:	72 1a       	ld.w	r10,r9[0x4]
8001aea8:	91 1a       	st.w	r8[0x4],r10
8001aeaa:	72 2a       	ld.w	r10,r9[0x8]
8001aeac:	91 2a       	st.w	r8[0x8],r10
8001aeae:	72 39       	ld.w	r9,r9[0xc]
8001aeb0:	91 39       	st.w	r8[0xc],r9
				ts->tasks[i+1]=tmp;		
8001aeb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001aeb6:	f0 c9 ff ff 	sub	r9,r8,-1
8001aeba:	ee fa ff c4 	ld.w	r10,r7[-60]
8001aebe:	12 98       	mov	r8,r9
8001aec0:	a1 78       	lsl	r8,0x1
8001aec2:	12 08       	add	r8,r9
8001aec4:	a5 68       	lsl	r8,0x4
8001aec6:	f4 08 00 08 	add	r8,r10,r8
8001aeca:	2f 48       	sub	r8,-12
8001aecc:	10 9b       	mov	r11,r8
8001aece:	ee ca 00 38 	sub	r10,r7,56
8001aed2:	f6 c8 00 00 	sub	r8,r11,0
8001aed6:	f4 c9 00 00 	sub	r9,r10,0
8001aeda:	72 0c       	ld.w	r12,r9[0x0]
8001aedc:	91 0c       	st.w	r8[0x0],r12
8001aede:	72 1c       	ld.w	r12,r9[0x4]
8001aee0:	91 1c       	st.w	r8[0x4],r12
8001aee2:	72 2c       	ld.w	r12,r9[0x8]
8001aee4:	91 2c       	st.w	r8[0x8],r12
8001aee6:	72 39       	ld.w	r9,r9[0xc]
8001aee8:	91 39       	st.w	r8[0xc],r9
8001aeea:	f6 c8 ff f0 	sub	r8,r11,-16
8001aeee:	f4 c9 ff f0 	sub	r9,r10,-16
8001aef2:	72 0c       	ld.w	r12,r9[0x0]
8001aef4:	91 0c       	st.w	r8[0x0],r12
8001aef6:	72 1c       	ld.w	r12,r9[0x4]
8001aef8:	91 1c       	st.w	r8[0x4],r12
8001aefa:	72 2c       	ld.w	r12,r9[0x8]
8001aefc:	91 2c       	st.w	r8[0x8],r12
8001aefe:	72 39       	ld.w	r9,r9[0xc]
8001af00:	91 39       	st.w	r8[0xc],r9
8001af02:	f6 c8 ff e0 	sub	r8,r11,-32
8001af06:	f4 c9 ff e0 	sub	r9,r10,-32
8001af0a:	72 0a       	ld.w	r10,r9[0x0]
8001af0c:	91 0a       	st.w	r8[0x0],r10
8001af0e:	72 1a       	ld.w	r10,r9[0x4]
8001af10:	91 1a       	st.w	r8[0x4],r10
8001af12:	72 2a       	ld.w	r10,r9[0x8]
8001af14:	91 2a       	st.w	r8[0x8],r10
8001af16:	72 39       	ld.w	r9,r9[0xc]
8001af18:	91 39       	st.w	r8[0xc],r9
				sorted=false;
8001af1a:	30 08       	mov	r8,0
8001af1c:	ef 68 ff ff 	st.b	r7[-1],r8
	task_entry tmp;
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
		sorted=true;
		for (i=0; i<ts->number_of_tasks-1; i++) {
8001af20:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001af24:	2f f8       	sub	r8,-1
8001af26:	ef 48 ff f8 	st.w	r7[-8],r8
8001af2a:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001af2e:	11 88       	ld.ub	r8,r8[0x0]
8001af30:	f0 c9 00 01 	sub	r9,r8,1
8001af34:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001af38:	10 39       	cp.w	r9,r8
8001af3a:	fe 99 fe f0 	brgt	8001ad1a <sort_taskset_by_period+0x32>
8001af3e:	c0 28       	rjmp	8001af42 <sort_taskset_by_period+0x25a>
	int i;
	bool sorted=false;
	task_entry tmp;
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
8001af40:	d7 03       	nop
8001af42:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001af46:	ec 18 00 01 	eorl	r8,0x1
8001af4a:	5c 58       	castu.b	r8
8001af4c:	fe 91 fe e0 	brne	8001ad0c <sort_taskset_by_period+0x24>
				ts->tasks[i+1]=tmp;		
				sorted=false;
			}
		}
	}		
}
8001af50:	2f 1d       	sub	sp,-60
8001af52:	e3 cd 80 80 	ldm	sp++,r7,pc

8001af56 <run_scheduler_update>:

int run_scheduler_update(task_set *ts, uint8_t schedule_strategy) {
8001af56:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001af5a:	1a 97       	mov	r7,sp
8001af5c:	20 9d       	sub	sp,36
8001af5e:	fe f6 04 0a 	ld.w	r6,pc[1034]
8001af62:	1e 26       	rsub	r6,pc
8001af64:	ef 4c ff e0 	st.w	r7[-32],r12
8001af68:	16 98       	mov	r8,r11
8001af6a:	ef 68 ff dc 	st.b	r7[-36],r8
	int i;
	int realtime_violation=0;
8001af6e:	30 08       	mov	r8,0
8001af70:	ef 48 ff e8 	st.w	r7[-24],r8
	function_pointer call_task;
	task_return_t treturn;
	for (i=ts->current_schedule_slot; i<ts->number_of_tasks; i++) {
8001af74:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001af78:	70 28       	ld.w	r8,r8[0x8]
8001af7a:	ef 48 ff e4 	st.w	r7[-28],r8
8001af7e:	e0 8f 01 e5 	bral	8001b348 <run_scheduler_update+0x3f2>
		uint32_t current_time=GET_TIME;
8001af82:	f0 16 00 29 	mcall	r6[164]
8001af86:	18 98       	mov	r8,r12
8001af88:	ef 48 ff f4 	st.w	r7[-12],r8
		if ((ts->tasks[i].call_function!=NULL)  && (ts->tasks[i].run_mode!=RUN_NEVER) &&(current_time >= ts->tasks[i].next_run)) {
8001af8c:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001af90:	ee fa ff e0 	ld.w	r10,r7[-32]
8001af94:	12 98       	mov	r8,r9
8001af96:	a1 78       	lsl	r8,0x1
8001af98:	12 08       	add	r8,r9
8001af9a:	2f f8       	sub	r8,-1
8001af9c:	a5 68       	lsl	r8,0x4
8001af9e:	f4 08 00 08 	add	r8,r10,r8
8001afa2:	70 08       	ld.w	r8,r8[0x0]
8001afa4:	58 08       	cp.w	r8,0
8001afa6:	e0 80 01 cc 	breq	8001b33e <run_scheduler_update+0x3e8>
8001afaa:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001afae:	ee fa ff e0 	ld.w	r10,r7[-32]
8001afb2:	12 98       	mov	r8,r9
8001afb4:	a1 78       	lsl	r8,0x1
8001afb6:	12 08       	add	r8,r9
8001afb8:	a5 68       	lsl	r8,0x4
8001afba:	f4 08 00 08 	add	r8,r10,r8
8001afbe:	2e 88       	sub	r8,-24
8001afc0:	70 08       	ld.w	r8,r8[0x0]
8001afc2:	58 08       	cp.w	r8,0
8001afc4:	e0 80 01 bd 	breq	8001b33e <run_scheduler_update+0x3e8>
8001afc8:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001afcc:	ee fa ff e0 	ld.w	r10,r7[-32]
8001afd0:	12 98       	mov	r8,r9
8001afd2:	a1 78       	lsl	r8,0x1
8001afd4:	12 08       	add	r8,r9
8001afd6:	a5 68       	lsl	r8,0x4
8001afd8:	f4 08 00 08 	add	r8,r10,r8
8001afdc:	2d c8       	sub	r8,-36
8001afde:	70 09       	ld.w	r9,r8[0x0]
8001afe0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001afe4:	10 39       	cp.w	r9,r8
8001afe6:	e0 8b 01 ac 	brhi	8001b33e <run_scheduler_update+0x3e8>
			uint32_t delay=current_time - (ts->tasks[i].next_run);
8001afea:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001afee:	ee fa ff e0 	ld.w	r10,r7[-32]
8001aff2:	12 98       	mov	r8,r9
8001aff4:	a1 78       	lsl	r8,0x1
8001aff6:	12 08       	add	r8,r9
8001aff8:	a5 68       	lsl	r8,0x4
8001affa:	f4 08 00 08 	add	r8,r10,r8
8001affe:	2d c8       	sub	r8,-36
8001b000:	70 08       	ld.w	r8,r8[0x0]
8001b002:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001b006:	10 19       	sub	r9,r8
8001b008:	ef 49 ff f8 	st.w	r7[-8],r9
			uint32_t task_start_time;

		    task_start_time=GET_TIME;
8001b00c:	f0 16 00 29 	mcall	r6[164]
8001b010:	18 98       	mov	r8,r12
8001b012:	ef 48 ff fc 	st.w	r7[-4],r8
		    call_task=ts->tasks[i].call_function;
8001b016:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001b01a:	ee fa ff e0 	ld.w	r10,r7[-32]
8001b01e:	12 98       	mov	r8,r9
8001b020:	a1 78       	lsl	r8,0x1
8001b022:	12 08       	add	r8,r9
8001b024:	2f f8       	sub	r8,-1
8001b026:	a5 68       	lsl	r8,0x4
8001b028:	f4 08 00 08 	add	r8,r10,r8
8001b02c:	70 08       	ld.w	r8,r8[0x0]
8001b02e:	ef 48 ff ec 	st.w	r7[-20],r8
		    //dbg_print_num(i, 16); dbg_print(" ");dbg_print_num(call_task, 16); dbg_print("\n");
		    treturn = call_task();
8001b032:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001b036:	5d 18       	icall	r8
8001b038:	18 98       	mov	r8,r12
8001b03a:	ef 48 ff f0 	st.w	r7[-16],r8


			
			switch (ts->tasks[i].timing_mode) {
8001b03e:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001b042:	ee fa ff e0 	ld.w	r10,r7[-32]
8001b046:	12 98       	mov	r8,r9
8001b048:	a1 78       	lsl	r8,0x1
8001b04a:	12 08       	add	r8,r9
8001b04c:	2f f8       	sub	r8,-1
8001b04e:	a5 68       	lsl	r8,0x4
8001b050:	f4 08 00 08 	add	r8,r10,r8
8001b054:	2f 48       	sub	r8,-12
8001b056:	70 08       	ld.w	r8,r8[0x0]
8001b058:	58 08       	cp.w	r8,0
8001b05a:	c0 40       	breq	8001b062 <run_scheduler_update+0x10c>
8001b05c:	58 18       	cp.w	r8,1
8001b05e:	c2 90       	breq	8001b0b0 <run_scheduler_update+0x15a>
8001b060:	c4 58       	rjmp	8001b0ea <run_scheduler_update+0x194>
				case PERIODIC_ABSOLUTE:
					ts->tasks[i].next_run += ts->tasks[i].repeat_period;
8001b062:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001b066:	ee fa ff e4 	ld.w	r10,r7[-28]
8001b06a:	ee fb ff e0 	ld.w	r11,r7[-32]
8001b06e:	14 98       	mov	r8,r10
8001b070:	a1 78       	lsl	r8,0x1
8001b072:	14 08       	add	r8,r10
8001b074:	a5 68       	lsl	r8,0x4
8001b076:	f6 08 00 08 	add	r8,r11,r8
8001b07a:	2d c8       	sub	r8,-36
8001b07c:	70 0b       	ld.w	r11,r8[0x0]
8001b07e:	ee fa ff e4 	ld.w	r10,r7[-28]
8001b082:	ee fc ff e0 	ld.w	r12,r7[-32]
8001b086:	14 98       	mov	r8,r10
8001b088:	a1 78       	lsl	r8,0x1
8001b08a:	14 08       	add	r8,r10
8001b08c:	a5 68       	lsl	r8,0x4
8001b08e:	f8 08 00 08 	add	r8,r12,r8
8001b092:	2e 08       	sub	r8,-32
8001b094:	70 08       	ld.w	r8,r8[0x0]
8001b096:	f6 08 00 0a 	add	r10,r11,r8
8001b09a:	ee fb ff e0 	ld.w	r11,r7[-32]
8001b09e:	12 98       	mov	r8,r9
8001b0a0:	a1 78       	lsl	r8,0x1
8001b0a2:	12 08       	add	r8,r9
8001b0a4:	a5 68       	lsl	r8,0x4
8001b0a6:	f6 08 00 08 	add	r8,r11,r8
8001b0aa:	2d c8       	sub	r8,-36
8001b0ac:	91 0a       	st.w	r8[0x0],r10
				break;
8001b0ae:	c1 e8       	rjmp	8001b0ea <run_scheduler_update+0x194>
				case PERIODIC_RELATIVE:
					ts->tasks[i].next_run = GET_TIME + ts->tasks[i].repeat_period;
8001b0b0:	ee f5 ff e4 	ld.w	r5,r7[-28]
8001b0b4:	f0 16 00 29 	mcall	r6[164]
8001b0b8:	18 9a       	mov	r10,r12
8001b0ba:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001b0be:	ee fb ff e0 	ld.w	r11,r7[-32]
8001b0c2:	12 98       	mov	r8,r9
8001b0c4:	a1 78       	lsl	r8,0x1
8001b0c6:	12 08       	add	r8,r9
8001b0c8:	a5 68       	lsl	r8,0x4
8001b0ca:	f6 08 00 08 	add	r8,r11,r8
8001b0ce:	2e 08       	sub	r8,-32
8001b0d0:	70 08       	ld.w	r8,r8[0x0]
8001b0d2:	f4 08 00 09 	add	r9,r10,r8
8001b0d6:	ee fa ff e0 	ld.w	r10,r7[-32]
8001b0da:	0a 98       	mov	r8,r5
8001b0dc:	a1 78       	lsl	r8,0x1
8001b0de:	0a 08       	add	r8,r5
8001b0e0:	a5 68       	lsl	r8,0x4
8001b0e2:	f4 08 00 08 	add	r8,r10,r8
8001b0e6:	2d c8       	sub	r8,-36
8001b0e8:	91 09       	st.w	r8[0x0],r9
				break;
			}
			if (ts->tasks[i].run_mode==RUN_ONCE) ts->tasks[i].run_mode=RUN_NEVER;
8001b0ea:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001b0ee:	ee fa ff e0 	ld.w	r10,r7[-32]
8001b0f2:	12 98       	mov	r8,r9
8001b0f4:	a1 78       	lsl	r8,0x1
8001b0f6:	12 08       	add	r8,r9
8001b0f8:	a5 68       	lsl	r8,0x4
8001b0fa:	f4 08 00 08 	add	r8,r10,r8
8001b0fe:	2e 88       	sub	r8,-24
8001b100:	70 08       	ld.w	r8,r8[0x0]
8001b102:	58 18       	cp.w	r8,1
8001b104:	c0 e1       	brne	8001b120 <run_scheduler_update+0x1ca>
8001b106:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001b10a:	ee fa ff e0 	ld.w	r10,r7[-32]
8001b10e:	12 98       	mov	r8,r9
8001b110:	a1 78       	lsl	r8,0x1
8001b112:	12 08       	add	r8,r9
8001b114:	a5 68       	lsl	r8,0x4
8001b116:	f4 08 00 08 	add	r8,r10,r8
8001b11a:	2e 88       	sub	r8,-24
8001b11c:	30 09       	mov	r9,0
8001b11e:	91 09       	st.w	r8[0x0],r9
			if (ts->tasks[i].next_run < current_time) {
8001b120:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001b124:	ee fa ff e0 	ld.w	r10,r7[-32]
8001b128:	12 98       	mov	r8,r9
8001b12a:	a1 78       	lsl	r8,0x1
8001b12c:	12 08       	add	r8,r9
8001b12e:	a5 68       	lsl	r8,0x4
8001b130:	f4 08 00 08 	add	r8,r10,r8
8001b134:	2d c8       	sub	r8,-36
8001b136:	70 09       	ld.w	r9,r8[0x0]
8001b138:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b13c:	10 39       	cp.w	r9,r8
8001b13e:	c3 92       	brcc	8001b1b0 <run_scheduler_update+0x25a>
				realtime_violation=-i; //realtime violation!!
8001b140:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001b144:	5c 38       	neg	r8
8001b146:	ef 48 ff e8 	st.w	r7[-24],r8
				ts->tasks[i].rt_violations++;
8001b14a:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001b14e:	ee fa ff e0 	ld.w	r10,r7[-32]
8001b152:	12 98       	mov	r8,r9
8001b154:	a1 78       	lsl	r8,0x1
8001b156:	12 08       	add	r8,r9
8001b158:	a5 68       	lsl	r8,0x4
8001b15a:	f4 08 00 08 	add	r8,r10,r8
8001b15e:	2c 88       	sub	r8,-56
8001b160:	70 08       	ld.w	r8,r8[0x0]
8001b162:	f0 ca ff ff 	sub	r10,r8,-1
8001b166:	ee fb ff e0 	ld.w	r11,r7[-32]
8001b16a:	12 98       	mov	r8,r9
8001b16c:	a1 78       	lsl	r8,0x1
8001b16e:	12 08       	add	r8,r9
8001b170:	a5 68       	lsl	r8,0x4
8001b172:	f6 08 00 08 	add	r8,r11,r8
8001b176:	2c 88       	sub	r8,-56
8001b178:	91 0a       	st.w	r8[0x0],r10
				ts->tasks[i].next_run=current_time + ts->tasks[i].repeat_period;
8001b17a:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001b17e:	ee fa ff e4 	ld.w	r10,r7[-28]
8001b182:	ee fb ff e0 	ld.w	r11,r7[-32]
8001b186:	14 98       	mov	r8,r10
8001b188:	a1 78       	lsl	r8,0x1
8001b18a:	14 08       	add	r8,r10
8001b18c:	a5 68       	lsl	r8,0x4
8001b18e:	f6 08 00 08 	add	r8,r11,r8
8001b192:	2e 08       	sub	r8,-32
8001b194:	70 0a       	ld.w	r10,r8[0x0]
8001b196:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b19a:	10 0a       	add	r10,r8
8001b19c:	ee fb ff e0 	ld.w	r11,r7[-32]
8001b1a0:	12 98       	mov	r8,r9
8001b1a2:	a1 78       	lsl	r8,0x1
8001b1a4:	12 08       	add	r8,r9
8001b1a6:	a5 68       	lsl	r8,0x4
8001b1a8:	f6 08 00 08 	add	r8,r11,r8
8001b1ac:	2d c8       	sub	r8,-36
8001b1ae:	91 0a       	st.w	r8[0x0],r10
			}
			
			
			ts->tasks[i].delay_avg= (7*ts->tasks[i].delay_avg + delay)/8;
8001b1b0:	ee fc ff e4 	ld.w	r12,r7[-28]
8001b1b4:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001b1b8:	ee fa ff e0 	ld.w	r10,r7[-32]
8001b1bc:	f0 c9 ff ff 	sub	r9,r8,-1
8001b1c0:	12 98       	mov	r8,r9
8001b1c2:	a1 78       	lsl	r8,0x1
8001b1c4:	12 08       	add	r8,r9
8001b1c6:	a5 68       	lsl	r8,0x4
8001b1c8:	f4 08 00 08 	add	r8,r10,r8
8001b1cc:	70 09       	ld.w	r9,r8[0x0]
8001b1ce:	12 98       	mov	r8,r9
8001b1d0:	a3 78       	lsl	r8,0x3
8001b1d2:	f0 09 01 09 	sub	r9,r8,r9
8001b1d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b1da:	f2 08 00 08 	add	r8,r9,r8
8001b1de:	f0 0a 16 03 	lsr	r10,r8,0x3
8001b1e2:	ee fb ff e0 	ld.w	r11,r7[-32]
8001b1e6:	f8 c9 ff ff 	sub	r9,r12,-1
8001b1ea:	12 98       	mov	r8,r9
8001b1ec:	a1 78       	lsl	r8,0x1
8001b1ee:	12 08       	add	r8,r9
8001b1f0:	a5 68       	lsl	r8,0x4
8001b1f2:	f6 08 00 08 	add	r8,r11,r8
8001b1f6:	91 0a       	st.w	r8[0x0],r10
			if (delay>ts->tasks[i].delay_max) ts->tasks[i].delay_max=delay;
8001b1f8:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001b1fc:	ee fa ff e0 	ld.w	r10,r7[-32]
8001b200:	12 98       	mov	r8,r9
8001b202:	a1 78       	lsl	r8,0x1
8001b204:	12 08       	add	r8,r9
8001b206:	a5 68       	lsl	r8,0x4
8001b208:	f4 08 00 08 	add	r8,r10,r8
8001b20c:	2d 48       	sub	r8,-44
8001b20e:	70 09       	ld.w	r9,r8[0x0]
8001b210:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b214:	10 39       	cp.w	r9,r8
8001b216:	c0 f2       	brcc	8001b234 <run_scheduler_update+0x2de>
8001b218:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001b21c:	ee fa ff e0 	ld.w	r10,r7[-32]
8001b220:	12 98       	mov	r8,r9
8001b222:	a1 78       	lsl	r8,0x1
8001b224:	12 08       	add	r8,r9
8001b226:	a5 68       	lsl	r8,0x4
8001b228:	f4 08 00 08 	add	r8,r10,r8
8001b22c:	2d 48       	sub	r8,-44
8001b22e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001b232:	91 09       	st.w	r8[0x0],r9
			
			ts->tasks[i].delay_var_squared=(15*ts->tasks[i].delay_var_squared+(delay - ts->tasks[i].delay_avg)*(delay - ts->tasks[i].delay_avg))/16;
8001b234:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001b238:	ee fa ff e4 	ld.w	r10,r7[-28]
8001b23c:	ee fb ff e0 	ld.w	r11,r7[-32]
8001b240:	14 98       	mov	r8,r10
8001b242:	a1 78       	lsl	r8,0x1
8001b244:	14 08       	add	r8,r10
8001b246:	a5 68       	lsl	r8,0x4
8001b248:	f6 08 00 08 	add	r8,r11,r8
8001b24c:	2c c8       	sub	r8,-52
8001b24e:	70 0a       	ld.w	r10,r8[0x0]
8001b250:	14 98       	mov	r8,r10
8001b252:	a5 68       	lsl	r8,0x4
8001b254:	f0 0a 01 0b 	sub	r11,r8,r10
8001b258:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001b25c:	ee fc ff e0 	ld.w	r12,r7[-32]
8001b260:	f0 ca ff ff 	sub	r10,r8,-1
8001b264:	14 98       	mov	r8,r10
8001b266:	a1 78       	lsl	r8,0x1
8001b268:	14 08       	add	r8,r10
8001b26a:	a5 68       	lsl	r8,0x4
8001b26c:	f8 08 00 08 	add	r8,r12,r8
8001b270:	70 08       	ld.w	r8,r8[0x0]
8001b272:	ee fa ff f8 	ld.w	r10,r7[-8]
8001b276:	f4 08 01 0c 	sub	r12,r10,r8
8001b27a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001b27e:	ee fe ff e0 	ld.w	lr,r7[-32]
8001b282:	f0 ca ff ff 	sub	r10,r8,-1
8001b286:	14 98       	mov	r8,r10
8001b288:	a1 78       	lsl	r8,0x1
8001b28a:	14 08       	add	r8,r10
8001b28c:	a5 68       	lsl	r8,0x4
8001b28e:	fc 08 00 08 	add	r8,lr,r8
8001b292:	70 08       	ld.w	r8,r8[0x0]
8001b294:	ee fa ff f8 	ld.w	r10,r7[-8]
8001b298:	f4 08 01 08 	sub	r8,r10,r8
8001b29c:	f8 08 02 48 	mul	r8,r12,r8
8001b2a0:	f6 08 00 08 	add	r8,r11,r8
8001b2a4:	f0 0a 16 04 	lsr	r10,r8,0x4
8001b2a8:	ee fb ff e0 	ld.w	r11,r7[-32]
8001b2ac:	12 98       	mov	r8,r9
8001b2ae:	a1 78       	lsl	r8,0x1
8001b2b0:	12 08       	add	r8,r9
8001b2b2:	a5 68       	lsl	r8,0x4
8001b2b4:	f6 08 00 08 	add	r8,r11,r8
8001b2b8:	2c c8       	sub	r8,-52
8001b2ba:	91 0a       	st.w	r8[0x0],r10
			
			ts->tasks[i].execution_time= (7*ts->tasks[i].execution_time + (GET_TIME-task_start_time))/8;
8001b2bc:	ee f5 ff e4 	ld.w	r5,r7[-28]
8001b2c0:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001b2c4:	ee fa ff e0 	ld.w	r10,r7[-32]
8001b2c8:	12 98       	mov	r8,r9
8001b2ca:	a1 78       	lsl	r8,0x1
8001b2cc:	12 08       	add	r8,r9
8001b2ce:	a5 68       	lsl	r8,0x4
8001b2d0:	f4 08 00 08 	add	r8,r10,r8
8001b2d4:	2d 88       	sub	r8,-40
8001b2d6:	70 09       	ld.w	r9,r8[0x0]
8001b2d8:	12 98       	mov	r8,r9
8001b2da:	a3 78       	lsl	r8,0x3
8001b2dc:	f0 09 01 03 	sub	r3,r8,r9
8001b2e0:	f0 16 00 29 	mcall	r6[164]
8001b2e4:	18 99       	mov	r9,r12
8001b2e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b2ea:	f2 08 01 08 	sub	r8,r9,r8
8001b2ee:	e6 08 00 08 	add	r8,r3,r8
8001b2f2:	f0 09 16 03 	lsr	r9,r8,0x3
8001b2f6:	ee fa ff e0 	ld.w	r10,r7[-32]
8001b2fa:	0a 98       	mov	r8,r5
8001b2fc:	a1 78       	lsl	r8,0x1
8001b2fe:	0a 08       	add	r8,r5
8001b300:	a5 68       	lsl	r8,0x4
8001b302:	f4 08 00 08 	add	r8,r10,r8
8001b306:	2d 88       	sub	r8,-40
8001b308:	91 09       	st.w	r8[0x0],r9
						
			switch (schedule_strategy) {
8001b30a:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8001b30e:	58 18       	cp.w	r8,1
8001b310:	c0 81       	brne	8001b320 <run_scheduler_update+0x3ca>
			case FIXED_PRIORITY: 
				ts->current_schedule_slot=0;
8001b312:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001b316:	30 09       	mov	r9,0
8001b318:	91 29       	st.w	r8[0x8],r9
				return realtime_violation;
8001b31a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001b31e:	c2 08       	rjmp	8001b35e <run_scheduler_update+0x408>
				
			default:
			case ROUND_ROBIN:
				// round robin scheme - scheduler will pick up where it left.
				if (i==ts->number_of_tasks) ts->current_schedule_slot=0;
8001b320:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001b324:	11 88       	ld.ub	r8,r8[0x0]
8001b326:	10 99       	mov	r9,r8
8001b328:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001b32c:	10 39       	cp.w	r9,r8
8001b32e:	c0 51       	brne	8001b338 <run_scheduler_update+0x3e2>
8001b330:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001b334:	30 09       	mov	r9,0
8001b336:	91 29       	st.w	r8[0x8],r9
				return realtime_violation;
8001b338:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001b33c:	c1 18       	rjmp	8001b35e <run_scheduler_update+0x408>
int run_scheduler_update(task_set *ts, uint8_t schedule_strategy) {
	int i;
	int realtime_violation=0;
	function_pointer call_task;
	task_return_t treturn;
	for (i=ts->current_schedule_slot; i<ts->number_of_tasks; i++) {
8001b33e:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001b342:	2f f8       	sub	r8,-1
8001b344:	ef 48 ff e4 	st.w	r7[-28],r8
8001b348:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001b34c:	11 88       	ld.ub	r8,r8[0x0]
8001b34e:	10 99       	mov	r9,r8
8001b350:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001b354:	10 39       	cp.w	r9,r8
8001b356:	fe 99 fe 16 	brgt	8001af82 <run_scheduler_update+0x2c>
				return realtime_violation;
			}
			
		}
	}
	return realtime_violation;;
8001b35a:	ee f8 ff e8 	ld.w	r8,r7[-24]
}
8001b35e:	10 9c       	mov	r12,r8
8001b360:	2f 7d       	sub	sp,-36
8001b362:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001b366:	00 00       	add	r0,r0
8001b368:	80 01       	ld.sh	r1,r0[0x0]
8001b36a:	ad e6       	*unknown*

8001b36c <get_task_by_id>:


task_entry* get_task_by_id(task_set *ts, uint16_t task_id){
8001b36c:	eb cd 40 80 	pushm	r7,lr
8001b370:	1a 97       	mov	r7,sp
8001b372:	20 3d       	sub	sp,12
8001b374:	ef 4c ff f8 	st.w	r7[-8],r12
8001b378:	16 98       	mov	r8,r11
8001b37a:	ef 58 ff f4 	st.h	r7[-12],r8
	int i=0;
8001b37e:	30 08       	mov	r8,0
8001b380:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i=0; i<ts->number_of_tasks; i++) {
8001b384:	30 08       	mov	r8,0
8001b386:	ef 48 ff fc 	st.w	r7[-4],r8
8001b38a:	c2 58       	rjmp	8001b3d4 <get_task_by_id+0x68>
		if (ts->tasks[i].task_id==task_id) return &ts->tasks[i];
8001b38c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001b390:	ee fa ff f8 	ld.w	r10,r7[-8]
8001b394:	12 98       	mov	r8,r9
8001b396:	a1 78       	lsl	r8,0x1
8001b398:	12 08       	add	r8,r9
8001b39a:	a1 78       	lsl	r8,0x1
8001b39c:	2f f8       	sub	r8,-1
8001b39e:	a3 78       	lsl	r8,0x3
8001b3a0:	f4 08 00 08 	add	r8,r10,r8
8001b3a4:	90 68       	ld.sh	r8,r8[0xc]
8001b3a6:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8001b3aa:	f0 09 19 00 	cp.h	r9,r8
8001b3ae:	c0 e1       	brne	8001b3ca <get_task_by_id+0x5e>
8001b3b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b3b4:	f0 ca ff f4 	sub	r10,r8,-12
8001b3b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001b3bc:	12 98       	mov	r8,r9
8001b3be:	a1 78       	lsl	r8,0x1
8001b3c0:	12 08       	add	r8,r9
8001b3c2:	a5 68       	lsl	r8,0x4
8001b3c4:	f4 08 00 08 	add	r8,r10,r8
8001b3c8:	c1 08       	rjmp	8001b3e8 <get_task_by_id+0x7c>
}


task_entry* get_task_by_id(task_set *ts, uint16_t task_id){
	int i=0;
	for (i=0; i<ts->number_of_tasks; i++) {
8001b3ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b3ce:	2f f8       	sub	r8,-1
8001b3d0:	ef 48 ff fc 	st.w	r7[-4],r8
8001b3d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b3d8:	11 88       	ld.ub	r8,r8[0x0]
8001b3da:	10 99       	mov	r9,r8
8001b3dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b3e0:	10 39       	cp.w	r9,r8
8001b3e2:	fe 99 ff d5 	brgt	8001b38c <get_task_by_id+0x20>
		if (ts->tasks[i].task_id==task_id) return &ts->tasks[i];
	}
	return NULL;
8001b3e6:	30 08       	mov	r8,0
}
8001b3e8:	10 9c       	mov	r12,r8
8001b3ea:	2f dd       	sub	sp,-12
8001b3ec:	e3 cd 80 80 	ldm	sp++,r7,pc

8001b3f0 <get_task_by_index>:

task_entry* get_task_by_index(task_set *ts, uint16_t task_index) {
8001b3f0:	eb cd 40 80 	pushm	r7,lr
8001b3f4:	1a 97       	mov	r7,sp
8001b3f6:	20 2d       	sub	sp,8
8001b3f8:	ef 4c ff fc 	st.w	r7[-4],r12
8001b3fc:	16 98       	mov	r8,r11
8001b3fe:	ef 58 ff f8 	st.h	r7[-8],r8
	if (task_index<ts->number_of_tasks) {
8001b402:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b406:	11 88       	ld.ub	r8,r8[0x0]
8001b408:	ef 09 ff f8 	ld.sh	r9,r7[-8]
8001b40c:	f0 09 19 00 	cp.h	r9,r8
8001b410:	c0 e2       	brcc	8001b42c <get_task_by_index+0x3c>
		return &ts->tasks[task_index];
8001b412:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b416:	f0 ca ff f4 	sub	r10,r8,-12
8001b41a:	ef 19 ff f8 	ld.uh	r9,r7[-8]
8001b41e:	12 98       	mov	r8,r9
8001b420:	a1 78       	lsl	r8,0x1
8001b422:	12 08       	add	r8,r9
8001b424:	a5 68       	lsl	r8,0x4
8001b426:	f4 08 00 08 	add	r8,r10,r8
8001b42a:	c0 28       	rjmp	8001b42e <get_task_by_index+0x3e>
	}
	return NULL;
8001b42c:	30 08       	mov	r8,0
}
8001b42e:	10 9c       	mov	r12,r8
8001b430:	2f ed       	sub	sp,-8
8001b432:	e3 cd 80 80 	ldm	sp++,r7,pc

8001b436 <change_run_mode>:

void change_run_mode(task_entry *te, task_run_mode_t new_run_mode) {
8001b436:	eb cd 40 80 	pushm	r7,lr
8001b43a:	1a 97       	mov	r7,sp
8001b43c:	20 2d       	sub	sp,8
8001b43e:	ef 4c ff fc 	st.w	r7[-4],r12
8001b442:	ef 4b ff f8 	st.w	r7[-8],r11
	te->run_mode=new_run_mode;
8001b446:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b44a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001b44e:	91 39       	st.w	r8[0xc],r9
}
8001b450:	2f ed       	sub	sp,-8
8001b452:	e3 cd 80 80 	ldm	sp++,r7,pc

8001b456 <change_task_period>:

void change_task_period(task_entry *te, unsigned long repeat_period) {
8001b456:	eb cd 40 c0 	pushm	r6-r7,lr
8001b45a:	1a 97       	mov	r7,sp
8001b45c:	20 2d       	sub	sp,8
8001b45e:	48 c6       	lddpc	r6,8001b48c <change_task_period+0x36>
8001b460:	1e 26       	rsub	r6,pc
8001b462:	ef 4c ff fc 	st.w	r7[-4],r12
8001b466:	ef 4b ff f8 	st.w	r7[-8],r11
	te->repeat_period=repeat_period;
8001b46a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b46e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001b472:	91 59       	st.w	r8[0x14],r9
	change_run_mode(te, RUN_REGULAR);
8001b474:	30 2b       	mov	r11,2
8001b476:	ee fc ff fc 	ld.w	r12,r7[-4]
8001b47a:	f0 16 00 b2 	mcall	r6[712]
	run_task_now(te);
8001b47e:	ee fc ff fc 	ld.w	r12,r7[-4]
8001b482:	f0 16 01 07 	mcall	r6[1052]
}
8001b486:	2f ed       	sub	sp,-8
8001b488:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001b48c:	80 01       	ld.sh	r1,r0[0x0]
8001b48e:	b2 e4       	st.b	r9[0x6],r4

8001b490 <suspend_task>:

void suspend_task(task_entry *te, unsigned long delay) {
8001b490:	eb cd 40 c0 	pushm	r6-r7,lr
8001b494:	1a 97       	mov	r7,sp
8001b496:	20 2d       	sub	sp,8
8001b498:	48 96       	lddpc	r6,8001b4bc <suspend_task+0x2c>
8001b49a:	1e 26       	rsub	r6,pc
8001b49c:	ef 4c ff fc 	st.w	r7[-4],r12
8001b4a0:	ef 4b ff f8 	st.w	r7[-8],r11
	te->next_run=GET_TIME + delay;
8001b4a4:	f0 16 00 29 	mcall	r6[164]
8001b4a8:	18 99       	mov	r9,r12
8001b4aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b4ae:	10 09       	add	r9,r8
8001b4b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b4b4:	91 69       	st.w	r8[0x18],r9
}
8001b4b6:	2f ed       	sub	sp,-8
8001b4b8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001b4bc:	80 01       	ld.sh	r1,r0[0x0]
8001b4be:	b3 1e       	ld.d	lr,--r9

8001b4c0 <run_task_now>:

void run_task_now(task_entry *te) {
8001b4c0:	eb cd 40 80 	pushm	r7,lr
8001b4c4:	1a 97       	mov	r7,sp
8001b4c6:	20 1d       	sub	sp,4
8001b4c8:	ef 4c ff fc 	st.w	r7[-4],r12
	if ((te->run_mode==RUN_NEVER)){
8001b4cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b4d0:	70 38       	ld.w	r8,r8[0xc]
8001b4d2:	58 08       	cp.w	r8,0
8001b4d4:	c0 51       	brne	8001b4de <run_task_now+0x1e>
		te->run_mode=RUN_ONCE;
8001b4d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b4da:	30 19       	mov	r9,1
8001b4dc:	91 39       	st.w	r8[0xc],r9
		//te->next_run=GET_TIME;
	} 
}
8001b4de:	2f fd       	sub	sp,-4
8001b4e0:	e3 cd 80 80 	ldm	sp++,r7,pc

8001b4e4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8001b4e4:	eb cd 40 c0 	pushm	r6-r7,lr
8001b4e8:	1a 97       	mov	r7,sp
8001b4ea:	20 6d       	sub	sp,24
8001b4ec:	49 e6       	lddpc	r6,8001b564 <interpolate+0x80>
8001b4ee:	1e 26       	rsub	r6,pc
8001b4f0:	ef 4c ff f8 	st.w	r7[-8],r12
8001b4f4:	ef 4b ff f4 	st.w	r7[-12],r11
8001b4f8:	ef 4a ff f0 	st.w	r7[-16],r10
8001b4fc:	ef 49 ff ec 	st.w	r7[-20],r9
8001b500:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001b504:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001b508:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001b50c:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001b510:	c0 41       	brne	8001b518 <interpolate+0x34>
	{
		return y1;
8001b512:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001b516:	c2 38       	rjmp	8001b55c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8001b518:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001b51c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001b520:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001b524:	ee fa ff f8 	ld.w	r10,r7[-8]
8001b528:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b52c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001b530:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001b534:	ee fa ff f0 	ld.w	r10,r7[-16]
8001b538:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001b53c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001b540:	12 9b       	mov	r11,r9
8001b542:	10 9c       	mov	r12,r8
8001b544:	f0 16 00 08 	mcall	r6[32]
8001b548:	18 98       	mov	r8,r12
8001b54a:	10 99       	mov	r9,r8
8001b54c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001b550:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001b554:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8001b558:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8001b55c:	10 9c       	mov	r12,r8
8001b55e:	2f ad       	sub	sp,-24
8001b560:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001b564:	80 01       	ld.sh	r1,r0[0x0]
8001b566:	b3 72       	lsl	r2,0x13

8001b568 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8001b568:	eb cd 40 c0 	pushm	r6-r7,lr
8001b56c:	1a 97       	mov	r7,sp
8001b56e:	20 3d       	sub	sp,12
8001b570:	49 06       	lddpc	r6,8001b5b0 <mav_array_memcpy+0x48>
8001b572:	1e 26       	rsub	r6,pc
8001b574:	ef 4c ff fc 	st.w	r7[-4],r12
8001b578:	ef 4b ff f8 	st.w	r7[-8],r11
8001b57c:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8001b580:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b584:	58 08       	cp.w	r8,0
8001b586:	c0 91       	brne	8001b598 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8001b588:	ee fa ff f4 	ld.w	r10,r7[-12]
8001b58c:	30 0b       	mov	r11,0
8001b58e:	ee fc ff fc 	ld.w	r12,r7[-4]
8001b592:	f0 16 00 31 	mcall	r6[196]
8001b596:	c0 98       	rjmp	8001b5a8 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8001b598:	ee fa ff f4 	ld.w	r10,r7[-12]
8001b59c:	ee fb ff f8 	ld.w	r11,r7[-8]
8001b5a0:	ee fc ff fc 	ld.w	r12,r7[-4]
8001b5a4:	f0 16 00 1b 	mcall	r6[108]
	}
}
8001b5a8:	2f dd       	sub	sp,-12
8001b5aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001b5ae:	00 00       	add	r0,r0
8001b5b0:	80 01       	ld.sh	r1,r0[0x0]
8001b5b2:	b3 f6       	*unknown*

8001b5b4 <init_gps_ubx>:
************************************************************************************
Initialization of the GPS with the type of platform
************************************************************************************
*/
void init_gps_ubx(enum GPS_Engine_Setting _engine_nav_setting)
{
8001b5b4:	eb cd 40 c0 	pushm	r6-r7,lr
8001b5b8:	1a 97       	mov	r7,sp
8001b5ba:	20 2d       	sub	sp,8
8001b5bc:	4a 26       	lddpc	r6,8001b644 <init_gps_ubx+0x90>
8001b5be:	1e 26       	rsub	r6,pc
8001b5c0:	ef 4c ff f8 	st.w	r7[-8],r12
	centralData = get_central_data();
8001b5c4:	f0 16 00 33 	mcall	r6[204]
8001b5c8:	18 99       	mov	r9,r12
8001b5ca:	ec f8 00 00 	ld.w	r8,r6[0]
8001b5ce:	91 09       	st.w	r8[0x0],r9
	
	//centralData->gps_stream_out.flush(centralData->gps_stream_out.data);
	
	uint8_t epoch = TIME_OF_WEEK;
8001b5d0:	30 18       	mov	r8,1
8001b5d2:	ef 68 ff ff 	st.b	r7[-1],r8
	idleTimeout = 1200;
8001b5d6:	ec f8 04 40 	ld.w	r8,r6[1088]
8001b5da:	e0 69 04 b0 	mov	r9,1200
8001b5de:	91 09       	st.w	r8[0x0],r9
	
	configure_gps();
8001b5e0:	f0 16 01 89 	mcall	r6[1572]
	
	engine_nav_setting = _engine_nav_setting;
8001b5e4:	ec f8 01 ec 	ld.w	r8,r6[492]
8001b5e8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001b5ec:	91 09       	st.w	r8[0x0],r9
	
	centralData->GPS_data.status = NO_FIX;
8001b5ee:	ec f8 00 00 	ld.w	r8,r6[0]
8001b5f2:	70 09       	ld.w	r9,r8[0x0]
8001b5f4:	30 18       	mov	r8,1
8001b5f6:	f3 68 07 9c 	st.b	r9[1948],r8
	centralData->GPS_data.num_sats = 0;
8001b5fa:	ec f8 00 00 	ld.w	r8,r6[0]
8001b5fe:	70 09       	ld.w	r9,r8[0x0]
8001b600:	30 08       	mov	r8,0
8001b602:	f3 68 07 90 	st.b	r9[1936],r8
	
	next_fix = false;
8001b606:	ec f9 01 f8 	ld.w	r9,r6[504]
8001b60a:	30 08       	mov	r8,0
8001b60c:	b2 88       	st.b	r9[0x0],r8
// 	new_data = false;
// 	valid_read = false;
	have_raw_velocity = false;
8001b60e:	ec f9 03 d4 	ld.w	r9,r6[980]
8001b612:	30 08       	mov	r8,0
8001b614:	b2 88       	st.b	r9[0x0],r8
	fix = false;
8001b616:	ec f9 06 74 	ld.w	r9,r6[1652]
8001b61a:	30 08       	mov	r8,0
8001b61c:	b2 88       	st.b	r9[0x0],r8
	
	last_fix_time = 0;
8001b61e:	ec f8 06 e0 	ld.w	r8,r6[1760]
8001b622:	30 09       	mov	r9,0
8001b624:	91 09       	st.w	r8[0x0],r9
	
	new_position = false;
8001b626:	ec f9 02 64 	ld.w	r9,r6[612]
8001b62a:	30 08       	mov	r8,0
8001b62c:	b2 88       	st.b	r9[0x0],r8
	new_speed = false;
8001b62e:	ec f9 02 30 	ld.w	r9,r6[560]
8001b632:	30 08       	mov	r8,0
8001b634:	b2 88       	st.b	r9[0x0],r8
	
	step = 0;
8001b636:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b63a:	30 08       	mov	r8,0
8001b63c:	b2 88       	st.b	r9[0x0],r8
	}
8001b63e:	2f ed       	sub	sp,-8
8001b640:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001b644:	80 01       	ld.sh	r1,r0[0x0]
8001b646:	b4 42       	st.h	r10[0x8],r2
8001b648:	6c 61       	ld.w	r1,r6[0x18]
8001b64a:	72 67       	ld.w	r7,r9[0x18]
8001b64c:	65 20       	ld.w	r0,r2[0x48]
8001b64e:	70 61       	ld.w	r1,r8[0x18]
8001b650:	79 6c       	ld.w	r12,r12[0x58]
8001b652:	6f 61       	ld.w	r1,r7[0x58]
8001b654:	64 3a       	ld.w	r10,r2[0xc]
8001b656:	20 00       	sub	r0,0
8001b658:	0a 00       	add	r0,r5
8001b65a:	00 00       	add	r0,r0
8001b65c:	57 72       	stdsp	sp[0x1dc],r2
8001b65e:	6f 6e       	ld.w	lr,r7[0x58]
8001b660:	67 20       	ld.w	r0,r3[0x48]
8001b662:	50 6f       	stdsp	sp[0x18],pc
8001b664:	73 6c       	ld.w	r12,r9[0x58]
8001b666:	6c 68       	ld.w	r8,r6[0x18]
8001b668:	20 6d       	sub	sp,24
8001b66a:	65 73       	ld.w	r3,r2[0x5c]
8001b66c:	73 61       	ld.w	r1,r9[0x58]
8001b66e:	67 65       	ld.w	r5,r3[0x58]
8001b670:	20 30       	sub	r0,3
8001b672:	78 00       	ld.w	r0,r12[0x0]
8001b674:	20 4d       	sub	sp,16
8001b676:	73 67       	ld.w	r7,r9[0x58]
8001b678:	20 69       	sub	r9,6
8001b67a:	64 3a       	ld.w	r10,r2[0xc]
8001b67c:	20 30       	sub	r0,3
8001b67e:	78 00       	ld.w	r0,r12[0x0]
8001b680:	20 52       	sub	r2,5
8001b682:	65 63       	ld.w	r3,r2[0x58]
8001b684:	65 69       	ld.w	r9,r2[0x58]
8001b686:	76 65       	ld.w	r5,r11[0x18]
8001b688:	64 20       	ld.w	r0,r2[0x8]
8001b68a:	73 69       	ld.w	r9,r9[0x58]
8001b68c:	7a 65       	ld.w	r5,sp[0x18]
8001b68e:	3a 00       	mov	r0,-96
8001b690:	20 73       	sub	r3,7
8001b692:	68 6f       	ld.w	pc,r4[0x18]
8001b694:	75 6c       	ld.w	r12,r10[0x58]
8001b696:	64 20       	ld.w	r0,r2[0x8]
8001b698:	62 65       	ld.w	r5,r1[0x18]
8001b69a:	3a 00       	mov	r0,-96
8001b69c:	57 72       	stdsp	sp[0x1dc],r2
8001b69e:	6f 6e       	ld.w	lr,r7[0x58]
8001b6a0:	67 20       	ld.w	r0,r3[0x48]
8001b6a2:	4e 61       	lddpc	r1,8001b838 <init_gps_ubx+0x284>
8001b6a4:	76 20       	ld.w	r0,r11[0x8]
8001b6a6:	53 74       	stdsp	sp[0xdc],r4
8001b6a8:	61 74       	ld.w	r4,r0[0x5c]
8001b6aa:	75 73       	ld.w	r3,r10[0x5c]
8001b6ac:	20 6d       	sub	sp,24
8001b6ae:	65 73       	ld.w	r3,r2[0x5c]
8001b6b0:	73 61       	ld.w	r1,r9[0x58]
8001b6b2:	67 65       	ld.w	r5,r3[0x58]
8001b6b4:	20 30       	sub	r0,3
8001b6b6:	78 00       	ld.w	r0,r12[0x0]
8001b6b8:	57 72       	stdsp	sp[0x1dc],r2
8001b6ba:	6f 6e       	ld.w	lr,r7[0x58]
8001b6bc:	67 20       	ld.w	r0,r3[0x48]
8001b6be:	53 6f       	stdsp	sp[0xd8],pc
8001b6c0:	6c 75       	ld.w	r5,r6[0x1c]
8001b6c2:	74 69       	ld.w	r9,r10[0x18]
8001b6c4:	6f 6e       	ld.w	lr,r7[0x58]
8001b6c6:	20 6d       	sub	sp,24
8001b6c8:	65 73       	ld.w	r3,r2[0x5c]
8001b6ca:	73 61       	ld.w	r1,r9[0x58]
8001b6cc:	67 65       	ld.w	r5,r3[0x58]
8001b6ce:	20 30       	sub	r0,3
8001b6d0:	78 00       	ld.w	r0,r12[0x0]
8001b6d2:	00 00       	add	r0,r0
8001b6d4:	57 72       	stdsp	sp[0x1dc],r2
8001b6d6:	6f 6e       	ld.w	lr,r7[0x58]
8001b6d8:	67 20       	ld.w	r0,r3[0x48]
8001b6da:	56 65       	stdsp	sp[0x198],r5
8001b6dc:	6c 6e       	ld.w	lr,r6[0x18]
8001b6de:	65 64       	ld.w	r4,r2[0x58]
8001b6e0:	20 6d       	sub	sp,24
8001b6e2:	65 73       	ld.w	r3,r2[0x5c]
8001b6e4:	73 61       	ld.w	r1,r9[0x58]
8001b6e6:	67 65       	ld.w	r5,r3[0x58]
8001b6e8:	20 30       	sub	r0,3
8001b6ea:	78 00       	ld.w	r0,r12[0x0]
8001b6ec:	57 72       	stdsp	sp[0x1dc],r2
8001b6ee:	6f 6e       	ld.w	lr,r7[0x58]
8001b6f0:	67 20       	ld.w	r0,r3[0x48]
8001b6f2:	53 56       	stdsp	sp[0xd4],r6
8001b6f4:	20 49       	sub	r9,4
8001b6f6:	6e 66       	ld.w	r6,r7[0x18]
8001b6f8:	6f 20       	ld.w	r0,r7[0x48]
8001b6fa:	6d 65       	ld.w	r5,r6[0x58]
8001b6fc:	73 73       	ld.w	r3,r9[0x5c]
8001b6fe:	61 67       	ld.w	r7,r0[0x58]
8001b700:	65 20       	ld.w	r0,r2[0x48]
8001b702:	30 78       	mov	r8,7
8001b704:	00 00       	add	r0,r0
8001b706:	00 00       	add	r0,r0
8001b708:	55 6e       	stdsp	sp[0x158],lr
8001b70a:	65 78       	ld.w	r8,r2[0x5c]
8001b70c:	70 65       	ld.w	r5,r8[0x18]
8001b70e:	63 74       	ld.w	r4,r1[0x5c]
8001b710:	65 64       	ld.w	r4,r2[0x58]
8001b712:	20 4e       	sub	lr,4
8001b714:	41 56       	lddsp	r6,sp[0x54]
8001b716:	20 6d       	sub	sp,24
8001b718:	65 73       	ld.w	r3,r2[0x5c]
8001b71a:	73 61       	ld.w	r1,r9[0x58]
8001b71c:	67 65       	ld.w	r5,r3[0x58]
8001b71e:	2c 20       	sub	r0,-62
8001b720:	43 6c       	lddsp	r12,sp[0xd8]
8001b722:	61 73       	ld.w	r3,r0[0x5c]
8001b724:	73 3a       	ld.w	r10,r9[0x4c]
8001b726:	20 30       	sub	r0,3
8001b728:	78 00       	ld.w	r0,r12[0x0]
8001b72a:	00 00       	add	r0,r0
8001b72c:	2c 20       	sub	r0,-62
8001b72e:	6d 73       	ld.w	r3,r6[0x5c]
8001b730:	67 20       	ld.w	r0,r3[0x48]
8001b732:	69 64       	ld.w	r4,r4[0x58]
8001b734:	3a 20       	mov	r0,-94
8001b736:	30 78       	mov	r8,7
8001b738:	00 00       	add	r0,r0
8001b73a:	00 00       	add	r0,r0
8001b73c:	20 6f       	sub	pc,6
8001b73e:	66 20       	ld.w	r0,r3[0x8]
8001b740:	73 69       	ld.w	r9,r9[0x58]
8001b742:	7a 65       	ld.w	r5,sp[0x18]
8001b744:	20 00       	sub	r0,0
8001b746:	00 00       	add	r0,r0
8001b748:	57 72       	stdsp	sp[0x1dc],r2
8001b74a:	6f 6e       	ld.w	lr,r7[0x58]
8001b74c:	67 20       	ld.w	r0,r3[0x48]
8001b74e:	4e 61       	lddpc	r1,8001b8e4 <ubx_read+0x32>
8001b750:	76 20       	ld.w	r0,r11[0x8]
8001b752:	53 65       	stdsp	sp[0xd8],r5
8001b754:	74 74       	ld.w	r4,r10[0x1c]
8001b756:	69 6e       	ld.w	lr,r4[0x58]
8001b758:	67 73       	ld.w	r3,r3[0x5c]
8001b75a:	20 6d       	sub	sp,24
8001b75c:	65 73       	ld.w	r3,r2[0x5c]
8001b75e:	73 61       	ld.w	r1,r9[0x58]
8001b760:	67 65       	ld.w	r5,r3[0x58]
8001b762:	20 30       	sub	r0,3
8001b764:	78 00       	ld.w	r0,r12[0x0]
8001b766:	00 00       	add	r0,r0
8001b768:	57 72       	stdsp	sp[0x1dc],r2
8001b76a:	6f 6e       	ld.w	lr,r7[0x58]
8001b76c:	67 20       	ld.w	r0,r3[0x48]
8001b76e:	43 46       	lddsp	r6,sp[0xd0]
8001b770:	47 20       	lddsp	r0,sp[0x1c8]
8001b772:	52 61       	stdsp	sp[0x98],r1
8001b774:	74 65       	ld.w	r5,r10[0x18]
8001b776:	20 6d       	sub	sp,24
8001b778:	65 73       	ld.w	r3,r2[0x5c]
8001b77a:	73 61       	ld.w	r1,r9[0x58]
8001b77c:	67 65       	ld.w	r5,r3[0x58]
8001b77e:	20 30       	sub	r0,3
8001b780:	78 00       	ld.w	r0,r12[0x0]
8001b782:	00 00       	add	r0,r0
8001b784:	57 72       	stdsp	sp[0x1dc],r2
8001b786:	6f 6e       	ld.w	lr,r7[0x58]
8001b788:	67 20       	ld.w	r0,r3[0x48]
8001b78a:	43 46       	lddsp	r6,sp[0xd0]
8001b78c:	47 20       	lddsp	r0,sp[0x1c8]
8001b78e:	53 65       	stdsp	sp[0xd8],r5
8001b790:	74 2f       	ld.w	pc,r10[0x8]
8001b792:	67 65       	ld.w	r5,r3[0x58]
8001b794:	74 20       	ld.w	r0,r10[0x8]
8001b796:	6d 65       	ld.w	r5,r6[0x58]
8001b798:	73 73       	ld.w	r3,r9[0x5c]
8001b79a:	61 67       	ld.w	r7,r0[0x58]
8001b79c:	65 20       	ld.w	r0,r2[0x48]
8001b79e:	30 78       	mov	r8,7
8001b7a0:	00 00       	add	r0,r0
8001b7a2:	00 00       	add	r0,r0
8001b7a4:	55 6e       	stdsp	sp[0x158],lr
8001b7a6:	65 78       	ld.w	r8,r2[0x5c]
8001b7a8:	70 65       	ld.w	r5,r8[0x18]
8001b7aa:	63 74       	ld.w	r4,r1[0x5c]
8001b7ac:	65 64       	ld.w	r4,r2[0x58]
8001b7ae:	20 43       	sub	r3,4
8001b7b0:	46 47       	lddsp	r7,sp[0x190]
8001b7b2:	20 6d       	sub	sp,24
8001b7b4:	65 73       	ld.w	r3,r2[0x5c]
8001b7b6:	73 61       	ld.w	r1,r9[0x58]
8001b7b8:	67 65       	ld.w	r5,r3[0x58]
8001b7ba:	2c 20       	sub	r0,-62
8001b7bc:	43 6c       	lddsp	r12,sp[0xd8]
8001b7be:	61 73       	ld.w	r3,r0[0x5c]
8001b7c0:	73 3a       	ld.w	r10,r9[0x4c]
8001b7c2:	20 30       	sub	r0,3
8001b7c4:	78 00       	ld.w	r0,r12[0x0]
8001b7c6:	00 00       	add	r0,r0
8001b7c8:	57 72       	stdsp	sp[0x1dc],r2
8001b7ca:	6f 6e       	ld.w	lr,r7[0x58]
8001b7cc:	67 20       	ld.w	r0,r3[0x48]
8001b7ce:	4d 4f       	lddpc	pc,8001b91c <ubx_read+0x6a>
8001b7d0:	4e 20       	lddpc	r0,8001b958 <ubx_read+0xa6>
8001b7d2:	52 58       	stdsp	sp[0x94],r8
8001b7d4:	52 20       	stdsp	sp[0x88],r0
8001b7d6:	6d 65       	ld.w	r5,r6[0x58]
8001b7d8:	73 73       	ld.w	r3,r9[0x5c]
8001b7da:	61 67       	ld.w	r7,r0[0x58]
8001b7dc:	65 20       	ld.w	r0,r2[0x48]
8001b7de:	30 78       	mov	r8,7
8001b7e0:	00 00       	add	r0,r0
8001b7e2:	00 00       	add	r0,r0
8001b7e4:	55 6e       	stdsp	sp[0x158],lr
8001b7e6:	65 78       	ld.w	r8,r2[0x5c]
8001b7e8:	70 65       	ld.w	r5,r8[0x18]
8001b7ea:	63 74       	ld.w	r4,r1[0x5c]
8001b7ec:	65 64       	ld.w	r4,r2[0x58]
8001b7ee:	20 54       	sub	r4,5
8001b7f0:	49 4d       	lddpc	sp,8001b840 <init_gps_ubx+0x28c>
8001b7f2:	20 6d       	sub	sp,24
8001b7f4:	65 73       	ld.w	r3,r2[0x5c]
8001b7f6:	73 61       	ld.w	r1,r9[0x58]
8001b7f8:	67 65       	ld.w	r5,r3[0x58]
8001b7fa:	2c 20       	sub	r0,-62
8001b7fc:	43 6c       	lddsp	r12,sp[0xd8]
8001b7fe:	61 73       	ld.w	r3,r0[0x5c]
8001b800:	73 3a       	ld.w	r10,r9[0x4c]
8001b802:	20 30       	sub	r0,3
8001b804:	78 00       	ld.w	r0,r12[0x0]
8001b806:	00 00       	add	r0,r0
8001b808:	20 73       	sub	r3,7
8001b80a:	68 6f       	ld.w	pc,r4[0x18]
8001b80c:	75 6c       	ld.w	r12,r10[0x58]
8001b80e:	64 20       	ld.w	r0,r2[0x8]
8001b810:	62 65       	ld.w	r5,r1[0x18]
8001b812:	20 3a       	sub	r10,3
8001b814:	00 00       	add	r0,r0
8001b816:	00 00       	add	r0,r0
8001b818:	57 72       	stdsp	sp[0x1dc],r2
8001b81a:	6f 6e       	ld.w	lr,r7[0x58]
8001b81c:	67 20       	ld.w	r0,r3[0x48]
8001b81e:	54 49       	stdsp	sp[0x110],r9
8001b820:	4d 20       	lddpc	r0,8001b968 <ubx_read+0xb6>
8001b822:	54 50       	stdsp	sp[0x114],r0
8001b824:	20 6d       	sub	sp,24
8001b826:	65 73       	ld.w	r3,r2[0x5c]
8001b828:	73 61       	ld.w	r1,r9[0x58]
8001b82a:	67 65       	ld.w	r5,r3[0x58]
8001b82c:	20 30       	sub	r0,3
8001b82e:	78 00       	ld.w	r0,r12[0x0]
8001b830:	57 72       	stdsp	sp[0x1dc],r2
8001b832:	6f 6e       	ld.w	lr,r7[0x58]
8001b834:	67 20       	ld.w	r0,r3[0x48]
8001b836:	54 49       	stdsp	sp[0x110],r9
8001b838:	4d 20       	lddpc	r0,8001b980 <ubx_read+0xce>
8001b83a:	56 52       	stdsp	sp[0x194],r2
8001b83c:	46 59       	lddsp	r9,sp[0x194]
8001b83e:	20 6d       	sub	sp,24
8001b840:	65 73       	ld.w	r3,r2[0x5c]
8001b842:	73 61       	ld.w	r1,r9[0x58]
8001b844:	67 65       	ld.w	r5,r3[0x58]
8001b846:	20 30       	sub	r0,3
8001b848:	78 00       	ld.w	r0,r12[0x0]
8001b84a:	00 00       	add	r0,r0
8001b84c:	55 6e       	stdsp	sp[0x158],lr
8001b84e:	65 78       	ld.w	r8,r2[0x5c]
8001b850:	70 65       	ld.w	r5,r8[0x18]
8001b852:	63 74       	ld.w	r4,r1[0x5c]
8001b854:	65 64       	ld.w	r4,r2[0x58]
8001b856:	20 6d       	sub	sp,24
8001b858:	65 73       	ld.w	r3,r2[0x5c]
8001b85a:	73 61       	ld.w	r1,r9[0x58]
8001b85c:	67 65       	ld.w	r5,r3[0x58]
8001b85e:	2c 20       	sub	r0,-62
8001b860:	43 6c       	lddsp	r12,sp[0xd8]
8001b862:	61 73       	ld.w	r3,r0[0x5c]
8001b864:	73 3a       	ld.w	r10,r9[0x4c]
8001b866:	20 30       	sub	r0,3
8001b868:	78 00       	ld.w	r0,r12[0x0]
8001b86a:	00 00       	add	r0,r0
8001b86c:	62 61       	ld.w	r1,r1[0x18]
8001b86e:	64 20       	ld.w	r0,r2[0x8]
8001b870:	63 6b       	ld.w	r11,r1[0x58]
8001b872:	73 75       	ld.w	r5,r9[0x5c]
8001b874:	6d 5f       	ld.w	pc,r6[0x54]
8001b876:	61 20       	ld.w	r0,r0[0x48]
8001b878:	00 00       	add	r0,r0
8001b87a:	00 00       	add	r0,r0
8001b87c:	20 73       	sub	r3,7
8001b87e:	68 6f       	ld.w	pc,r4[0x18]
8001b880:	75 6c       	ld.w	r12,r10[0x58]
8001b882:	64 20       	ld.w	r0,r2[0x8]
8001b884:	62 65       	ld.w	r5,r1[0x18]
8001b886:	20 00       	sub	r0,0
8001b888:	20 63       	sub	r3,6
8001b88a:	6c 61       	ld.w	r1,r6[0x18]
8001b88c:	73 73       	ld.w	r3,r9[0x5c]
8001b88e:	20 3a       	sub	r10,3
8001b890:	20 30       	sub	r0,3
8001b892:	78 00       	ld.w	r0,r12[0x0]
8001b894:	20 6d       	sub	sp,24
8001b896:	73 67       	ld.w	r7,r9[0x58]
8001b898:	5f 69       	srmi	r9
8001b89a:	64 20       	ld.w	r0,r2[0x8]
8001b89c:	3a 20       	mov	r0,-94
8001b89e:	30 78       	mov	r8,7
8001b8a0:	00 00       	add	r0,r0
8001b8a2:	00 00       	add	r0,r0
8001b8a4:	62 61       	ld.w	r1,r1[0x18]
8001b8a6:	64 20       	ld.w	r0,r2[0x8]
8001b8a8:	63 6b       	ld.w	r11,r1[0x58]
8001b8aa:	73 75       	ld.w	r5,r9[0x5c]
8001b8ac:	6d 5f       	ld.w	pc,r6[0x54]
8001b8ae:	62 20       	ld.w	r0,r1[0x8]
	...

8001b8b2 <ubx_read>:
re-processing it from the top, this is unavoidable. The parser
attempts to avoid this when possible.
************************************************************************************
*/
bool ubx_read(void)
{
8001b8b2:	eb cd 40 c0 	pushm	r6-r7,lr
8001b8b6:	1a 97       	mov	r7,sp
8001b8b8:	20 2d       	sub	sp,8
8001b8ba:	fe f6 0c fa 	ld.w	r6,pc[3322]
8001b8be:	1e 26       	rsub	r6,pc
	uint8_t data;
	bool msg_ok = false;
8001b8c0:	30 08       	mov	r8,0
8001b8c2:	ef 68 ff fb 	st.b	r7[-5],r8
	//bool new_message = false;
	
	unsigned char * temporaryMessageForSwaping;
	
	while(buffer_bytes_available(&(centralData->gps_buffer)))
8001b8c6:	e0 8f 06 64 	bral	8001c58e <ubx_read+0xcdc>
	{
		data = buffer_get(&(centralData->gps_buffer));
8001b8ca:	ec f8 00 00 	ld.w	r8,r6[0]
8001b8ce:	70 08       	ld.w	r8,r8[0x0]
8001b8d0:	f0 c8 f9 e4 	sub	r8,r8,-1564
8001b8d4:	10 9c       	mov	r12,r8
8001b8d6:	f0 16 00 45 	mcall	r6[276]
8001b8da:	18 98       	mov	r8,r12
8001b8dc:	ef 68 ff fa 	st.b	r7[-6],r8
		
// 		dbg_print(" 0x");
//  	dbg_print_num(data,16);
// 		dbg_print("\n");
		
		switch (step)
8001b8e0:	ec f8 00 4c 	ld.w	r8,r6[76]
8001b8e4:	11 88       	ld.ub	r8,r8[0x0]
8001b8e6:	58 88       	cp.w	r8,8
8001b8e8:	e0 8b 06 53 	brhi	8001c58e <ubx_read+0xcdc>
8001b8ec:	fe c9 ff f8 	sub	r9,pc,-8
8001b8f0:	f2 08 00 2f 	add	pc,r9,r8<<0x2
8001b8f4:	e0 8f 00 26 	bral	8001b940 <ubx_read+0x8e>
8001b8f8:	e0 8f 00 10 	bral	8001b918 <ubx_read+0x66>
8001b8fc:	e0 8f 00 38 	bral	8001b96c <ubx_read+0xba>
8001b900:	e0 8f 00 50 	bral	8001b9a0 <ubx_read+0xee>
8001b904:	e0 8f 00 74 	bral	8001b9ec <ubx_read+0x13a>
8001b908:	e0 8f 00 98 	bral	8001ba38 <ubx_read+0x186>
8001b90c:	e0 8f 05 68 	bral	8001c3dc <ubx_read+0xb2a>
8001b910:	e0 8f 05 ac 	bral	8001c468 <ubx_read+0xbb6>
8001b914:	e0 8f 05 f0 	bral	8001c4f4 <ubx_read+0xc42>
			// chances of recovering from a mismatch and makes it less
			// likely that we will be fooled by the preamble appearing
			// as data in some other message.
			//
		case 1:
			if (data == UBX_PREAMBLE2)
8001b918:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001b91c:	36 28       	mov	r8,98
8001b91e:	f0 09 18 00 	cp.b	r9,r8
8001b922:	c0 b1       	brne	8001b938 <ubx_read+0x86>
			{
				step++;
8001b924:	ec f8 00 4c 	ld.w	r8,r6[76]
8001b928:	11 88       	ld.ub	r8,r8[0x0]
8001b92a:	2f f8       	sub	r8,-1
8001b92c:	5c 58       	castu.b	r8
8001b92e:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b932:	b2 88       	st.b	r9[0x0],r8
				break;
8001b934:	e0 8f 06 2d 	bral	8001c58e <ubx_read+0xcdc>
			}
			step = 0;
8001b938:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b93c:	30 08       	mov	r8,0
8001b93e:	b2 88       	st.b	r9[0x0],r8
		case 0:
			if (data == UBX_PREAMBLE1)
8001b940:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001b944:	3b 58       	mov	r8,-75
8001b946:	f0 09 18 00 	cp.b	r9,r8
8001b94a:	c0 b1       	brne	8001b960 <ubx_read+0xae>
			{
				step++;
8001b94c:	ec f8 00 4c 	ld.w	r8,r6[76]
8001b950:	11 88       	ld.ub	r8,r8[0x0]
8001b952:	2f f8       	sub	r8,-1
8001b954:	5c 58       	castu.b	r8
8001b956:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b95a:	b2 88       	st.b	r9[0x0],r8
				break;
8001b95c:	e0 8f 06 19 	bral	8001c58e <ubx_read+0xcdc>
			}
			step = 0;
8001b960:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b964:	30 08       	mov	r8,0
8001b966:	b2 88       	st.b	r9[0x0],r8
			break;
8001b968:	e0 8f 06 13 	bral	8001c58e <ubx_read+0xcdc>
		//
		// We always collect the length so that we can avoid being
		// fooled by preamble bytes in messages.
		//
		case 2:
			step++;
8001b96c:	ec f8 00 4c 	ld.w	r8,r6[76]
8001b970:	11 88       	ld.ub	r8,r8[0x0]
8001b972:	2f f8       	sub	r8,-1
8001b974:	5c 58       	castu.b	r8
8001b976:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b97a:	b2 88       	st.b	r9[0x0],r8
			ubxclass = data;
8001b97c:	ec f9 00 60 	ld.w	r9,r6[96]
8001b980:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001b984:	b2 88       	st.b	r9[0x0],r8
			cksum_a = data;
8001b986:	ec f9 00 b0 	ld.w	r9,r6[176]
8001b98a:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001b98e:	b2 88       	st.b	r9[0x0],r8
			cksum_b = cksum_a; // reset the checksum accumulators
8001b990:	ec f8 00 b0 	ld.w	r8,r6[176]
8001b994:	11 88       	ld.ub	r8,r8[0x0]
8001b996:	ec f9 01 10 	ld.w	r9,r6[272]
8001b99a:	b2 88       	st.b	r9[0x0],r8
			break;
8001b99c:	e0 8f 05 f9 	bral	8001c58e <ubx_read+0xcdc>
		case 3:
			step++;
8001b9a0:	ec f8 00 4c 	ld.w	r8,r6[76]
8001b9a4:	11 88       	ld.ub	r8,r8[0x0]
8001b9a6:	2f f8       	sub	r8,-1
8001b9a8:	5c 58       	castu.b	r8
8001b9aa:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b9ae:	b2 88       	st.b	r9[0x0],r8
			cksum_a += data;
8001b9b0:	ec f8 00 b0 	ld.w	r8,r6[176]
8001b9b4:	11 88       	ld.ub	r8,r8[0x0]
8001b9b6:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001b9ba:	f2 08 00 08 	add	r8,r9,r8
8001b9be:	5c 58       	castu.b	r8
8001b9c0:	ec f9 00 b0 	ld.w	r9,r6[176]
8001b9c4:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001b9c6:	ec f8 01 10 	ld.w	r8,r6[272]
8001b9ca:	11 89       	ld.ub	r9,r8[0x0]
8001b9cc:	ec f8 00 b0 	ld.w	r8,r6[176]
8001b9d0:	11 88       	ld.ub	r8,r8[0x0]
8001b9d2:	f2 08 00 08 	add	r8,r9,r8
8001b9d6:	5c 58       	castu.b	r8
8001b9d8:	ec f9 01 10 	ld.w	r9,r6[272]
8001b9dc:	b2 88       	st.b	r9[0x0],r8
			msg_id = data;
8001b9de:	ec f9 00 5c 	ld.w	r9,r6[92]
8001b9e2:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001b9e6:	b2 88       	st.b	r9[0x0],r8
			break;
8001b9e8:	e0 8f 05 d3 	bral	8001c58e <ubx_read+0xcdc>
		case 4:
			step++;
8001b9ec:	ec f8 00 4c 	ld.w	r8,r6[76]
8001b9f0:	11 88       	ld.ub	r8,r8[0x0]
8001b9f2:	2f f8       	sub	r8,-1
8001b9f4:	5c 58       	castu.b	r8
8001b9f6:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b9fa:	b2 88       	st.b	r9[0x0],r8
			cksum_a += data;
8001b9fc:	ec f8 00 b0 	ld.w	r8,r6[176]
8001ba00:	11 88       	ld.ub	r8,r8[0x0]
8001ba02:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001ba06:	f2 08 00 08 	add	r8,r9,r8
8001ba0a:	5c 58       	castu.b	r8
8001ba0c:	ec f9 00 b0 	ld.w	r9,r6[176]
8001ba10:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001ba12:	ec f8 01 10 	ld.w	r8,r6[272]
8001ba16:	11 89       	ld.ub	r9,r8[0x0]
8001ba18:	ec f8 00 b0 	ld.w	r8,r6[176]
8001ba1c:	11 88       	ld.ub	r8,r8[0x0]
8001ba1e:	f2 08 00 08 	add	r8,r9,r8
8001ba22:	5c 58       	castu.b	r8
8001ba24:	ec f9 01 10 	ld.w	r9,r6[272]
8001ba28:	b2 88       	st.b	r9[0x0],r8
			payload_length = data;
8001ba2a:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001ba2e:	ec f9 00 58 	ld.w	r9,r6[88]
8001ba32:	b2 08       	st.h	r9[0x0],r8
			break;
8001ba34:	e0 8f 05 ad 	bral	8001c58e <ubx_read+0xcdc>
		case 5:
			step++;
8001ba38:	ec f8 00 4c 	ld.w	r8,r6[76]
8001ba3c:	11 88       	ld.ub	r8,r8[0x0]
8001ba3e:	2f f8       	sub	r8,-1
8001ba40:	5c 58       	castu.b	r8
8001ba42:	ec f9 00 4c 	ld.w	r9,r6[76]
8001ba46:	b2 88       	st.b	r9[0x0],r8
			payload_length |= data<<8;
8001ba48:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001ba4c:	a9 68       	lsl	r8,0x8
8001ba4e:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001ba52:	ec f8 00 58 	ld.w	r8,r6[88]
8001ba56:	90 08       	ld.sh	r8,r8[0x0]
8001ba58:	5c 88       	casts.h	r8
8001ba5a:	f3 e8 10 08 	or	r8,r9,r8
8001ba5e:	5c 88       	casts.h	r8
8001ba60:	ec f9 00 58 	ld.w	r9,r6[88]
8001ba64:	b2 08       	st.h	r9[0x0],r8
			cksum_a += data;
8001ba66:	ec f8 00 b0 	ld.w	r8,r6[176]
8001ba6a:	11 88       	ld.ub	r8,r8[0x0]
8001ba6c:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001ba70:	f2 08 00 08 	add	r8,r9,r8
8001ba74:	5c 58       	castu.b	r8
8001ba76:	ec f9 00 b0 	ld.w	r9,r6[176]
8001ba7a:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001ba7c:	ec f8 01 10 	ld.w	r8,r6[272]
8001ba80:	11 89       	ld.ub	r9,r8[0x0]
8001ba82:	ec f8 00 b0 	ld.w	r8,r6[176]
8001ba86:	11 88       	ld.ub	r8,r8[0x0]
8001ba88:	f2 08 00 08 	add	r8,r9,r8
8001ba8c:	5c 58       	castu.b	r8
8001ba8e:	ec f9 01 10 	ld.w	r9,r6[272]
8001ba92:	b2 88       	st.b	r9[0x0],r8
// 			dbg_print(" large byte shifted");
// 			dbg_print_num(data<<8,10);
// 			dbg_print("\n");
			
			//payload_length |= (uint16_t)(data<<8);
			if (payload_length > 512)
8001ba94:	ec f8 00 58 	ld.w	r8,r6[88]
8001ba98:	90 09       	ld.sh	r9,r8[0x0]
8001ba9a:	e0 68 02 00 	mov	r8,512
8001ba9e:	f0 09 19 00 	cp.h	r9,r8
8001baa2:	e0 88 00 1b 	brls	8001bad8 <ubx_read+0x226>
			{
				// we assume very large payloads are line noise
				dbg_print("large payload: ");
8001baa6:	fe cc 04 5e 	sub	r12,pc,1118
8001baaa:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(payload_length,10);
8001baae:	ec f8 00 58 	ld.w	r8,r6[88]
8001bab2:	90 08       	ld.sh	r8,r8[0x0]
8001bab4:	5c 78       	castu.h	r8
8001bab6:	30 ab       	mov	r11,10
8001bab8:	10 9c       	mov	r12,r8
8001baba:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001babe:	fe cc 04 66 	sub	r12,pc,1126
8001bac2:	f0 16 00 01 	mcall	r6[4]
				payload_length = 0;
8001bac6:	ec f9 00 58 	ld.w	r9,r6[88]
8001baca:	30 08       	mov	r8,0
8001bacc:	b2 08       	st.h	r9[0x0],r8
				step = 0;
8001bace:	ec f9 00 4c 	ld.w	r9,r6[76]
8001bad2:	30 08       	mov	r8,0
8001bad4:	b2 88       	st.b	r9[0x0],r8
				goto reset;
8001bad6:	c0 5b       	rjmp	8001b8e0 <ubx_read+0x2e>
			}
			payload_counter = 0; // prepare to receive payload
8001bad8:	ec f9 01 dc 	ld.w	r9,r6[476]
8001badc:	30 08       	mov	r8,0
8001bade:	b2 08       	st.h	r9[0x0],r8
			
			if(ubxclass == UBX_CLASS_NAV)
8001bae0:	ec f8 00 60 	ld.w	r8,r6[96]
8001bae4:	11 89       	ld.ub	r9,r8[0x0]
8001bae6:	30 18       	mov	r8,1
8001bae8:	f0 09 18 00 	cp.b	r9,r8
8001baec:	e0 81 01 c0 	brne	8001be6c <ubx_read+0x5ba>
			{
				switch(msg_id)
8001baf0:	ec f8 00 5c 	ld.w	r8,r6[92]
8001baf4:	11 88       	ld.ub	r8,r8[0x0]
8001baf6:	58 68       	cp.w	r8,6
8001baf8:	e0 80 00 ab 	breq	8001bc4e <ubx_read+0x39c>
8001bafc:	e0 89 00 08 	brgt	8001bb0c <ubx_read+0x25a>
8001bb00:	58 28       	cp.w	r8,2
8001bb02:	c0 e0       	breq	8001bb1e <ubx_read+0x26c>
8001bb04:	58 38       	cp.w	r8,3
8001bb06:	c5 80       	breq	8001bbb6 <ubx_read+0x304>
8001bb08:	e0 8f 01 84 	bral	8001be10 <ubx_read+0x55e>
8001bb0c:	59 28       	cp.w	r8,18
8001bb0e:	e0 80 00 eb 	breq	8001bce4 <ubx_read+0x432>
8001bb12:	e0 48 00 30 	cp.w	r8,48
8001bb16:	e0 80 01 32 	breq	8001bd7a <ubx_read+0x4c8>
8001bb1a:	e0 8f 01 7b 	bral	8001be10 <ubx_read+0x55e>
				{
				case MSG_NAV_POSLLH:
					if(payload_length == UBX_SIZE_NAV_POSLLH)
8001bb1e:	ec f8 00 58 	ld.w	r8,r6[88]
8001bb22:	90 09       	ld.sh	r9,r8[0x0]
8001bb24:	31 c8       	mov	r8,28
8001bb26:	f0 09 19 00 	cp.h	r9,r8
8001bb2a:	c1 21       	brne	8001bb4e <ubx_read+0x29c>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentPosllhMessage;
8001bb2c:	ec f9 07 bc 	ld.w	r9,r6[1980]
8001bb30:	ec f8 00 dc 	ld.w	r8,r6[220]
8001bb34:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastPosllhMessage;
8001bb36:	ec f9 03 94 	ld.w	r9,r6[916]
8001bb3a:	ec f8 00 e8 	ld.w	r8,r6[232]
8001bb3e:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidPosllhMessage;
8001bb40:	ec f8 01 00 	ld.w	r8,r6[256]
8001bb44:	ec f9 04 9c 	ld.w	r9,r6[1180]
8001bb48:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_POSLLH,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001bb4a:	e0 8f 01 8f 	bral	8001be68 <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentPosllhMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastPosllhMessage;
						ubx_validMessage = &ubx_numberOfValidPosllhMessage;
					}else{
						dbg_print("Wrong Posllh message 0x");
8001bb4e:	fe cc 04 f2 	sub	r12,pc,1266
8001bb52:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001bb56:	ec f8 00 60 	ld.w	r8,r6[96]
8001bb5a:	11 88       	ld.ub	r8,r8[0x0]
8001bb5c:	31 0b       	mov	r11,16
8001bb5e:	10 9c       	mov	r12,r8
8001bb60:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001bb64:	fe cc 04 f0 	sub	r12,pc,1264
8001bb68:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001bb6c:	ec f8 00 5c 	ld.w	r8,r6[92]
8001bb70:	11 88       	ld.ub	r8,r8[0x0]
8001bb72:	31 0b       	mov	r11,16
8001bb74:	10 9c       	mov	r12,r8
8001bb76:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001bb7a:	fe cc 04 fa 	sub	r12,pc,1274
8001bb7e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001bb82:	ec f8 00 58 	ld.w	r8,r6[88]
8001bb86:	90 08       	ld.sh	r8,r8[0x0]
8001bb88:	5c 78       	castu.h	r8
8001bb8a:	30 ab       	mov	r11,10
8001bb8c:	10 9c       	mov	r12,r8
8001bb8e:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001bb92:	fe cc 05 02 	sub	r12,pc,1282
8001bb96:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_POSLLH,10);
8001bb9a:	30 ab       	mov	r11,10
8001bb9c:	31 cc       	mov	r12,28
8001bb9e:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001bba2:	fe cc 05 4a 	sub	r12,pc,1354
8001bba6:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001bbaa:	ec f9 00 4c 	ld.w	r9,r6[76]
8001bbae:	30 08       	mov	r8,0
8001bbb0:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001bbb2:	fe 9f fe 97 	bral	8001b8e0 <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_STATUS:
					if(payload_length == UBX_SIZE_NAV_STATUS)
8001bbb6:	ec f8 00 58 	ld.w	r8,r6[88]
8001bbba:	90 09       	ld.sh	r9,r8[0x0]
8001bbbc:	31 08       	mov	r8,16
8001bbbe:	f0 09 19 00 	cp.h	r9,r8
8001bbc2:	c1 21       	brne	8001bbe6 <ubx_read+0x334>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentStatusMessage;
8001bbc4:	ec f9 06 54 	ld.w	r9,r6[1620]
8001bbc8:	ec f8 00 dc 	ld.w	r8,r6[220]
8001bbcc:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastStatusMessage;
8001bbce:	ec f9 03 98 	ld.w	r9,r6[920]
8001bbd2:	ec f8 00 e8 	ld.w	r8,r6[232]
8001bbd6:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidStatusMessage;
8001bbd8:	ec f8 01 00 	ld.w	r8,r6[256]
8001bbdc:	ec f9 04 5c 	ld.w	r9,r6[1116]
8001bbe0:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_STATUS,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001bbe2:	e0 8f 01 43 	bral	8001be68 <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentStatusMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastStatusMessage;
						ubx_validMessage = &ubx_numberOfValidStatusMessage;
					}else{
						dbg_print("Wrong Nav Status message 0x");
8001bbe6:	fe cc 05 4a 	sub	r12,pc,1354
8001bbea:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001bbee:	ec f8 00 60 	ld.w	r8,r6[96]
8001bbf2:	11 88       	ld.ub	r8,r8[0x0]
8001bbf4:	31 0b       	mov	r11,16
8001bbf6:	10 9c       	mov	r12,r8
8001bbf8:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001bbfc:	fe cc 05 88 	sub	r12,pc,1416
8001bc00:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001bc04:	ec f8 00 5c 	ld.w	r8,r6[92]
8001bc08:	11 88       	ld.ub	r8,r8[0x0]
8001bc0a:	31 0b       	mov	r11,16
8001bc0c:	10 9c       	mov	r12,r8
8001bc0e:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001bc12:	fe cc 05 92 	sub	r12,pc,1426
8001bc16:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001bc1a:	ec f8 00 58 	ld.w	r8,r6[88]
8001bc1e:	90 08       	ld.sh	r8,r8[0x0]
8001bc20:	5c 78       	castu.h	r8
8001bc22:	30 ab       	mov	r11,10
8001bc24:	10 9c       	mov	r12,r8
8001bc26:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001bc2a:	fe cc 05 9a 	sub	r12,pc,1434
8001bc2e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_STATUS,10);
8001bc32:	30 ab       	mov	r11,10
8001bc34:	31 0c       	mov	r12,16
8001bc36:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001bc3a:	fe cc 05 e2 	sub	r12,pc,1506
8001bc3e:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001bc42:	ec f9 00 4c 	ld.w	r9,r6[76]
8001bc46:	30 08       	mov	r8,0
8001bc48:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001bc4a:	fe 9f fe 4b 	bral	8001b8e0 <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_SOL:
					if(payload_length == UBX_SIZE_NAV_SOL)
8001bc4e:	ec f8 00 58 	ld.w	r8,r6[88]
8001bc52:	90 09       	ld.sh	r9,r8[0x0]
8001bc54:	33 48       	mov	r8,52
8001bc56:	f0 09 19 00 	cp.h	r9,r8
8001bc5a:	c1 11       	brne	8001bc7c <ubx_read+0x3ca>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSolutionMessage;
8001bc5c:	ec f9 08 00 	ld.w	r9,r6[2048]
8001bc60:	ec f8 00 dc 	ld.w	r8,r6[220]
8001bc64:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastSolutionMessage;
8001bc66:	ec f9 04 00 	ld.w	r9,r6[1024]
8001bc6a:	ec f8 00 e8 	ld.w	r8,r6[232]
8001bc6e:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidSolutionMessage;;
8001bc70:	ec f8 01 00 	ld.w	r8,r6[256]
8001bc74:	ec f9 04 b4 	ld.w	r9,r6[1204]
8001bc78:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_SOL,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001bc7a:	cf 78       	rjmp	8001be68 <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSolutionMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastSolutionMessage;
						ubx_validMessage = &ubx_numberOfValidSolutionMessage;;
					}else{
						dbg_print("Wrong Solution message 0x");
8001bc7c:	fe cc 05 c4 	sub	r12,pc,1476
8001bc80:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001bc84:	ec f8 00 60 	ld.w	r8,r6[96]
8001bc88:	11 88       	ld.ub	r8,r8[0x0]
8001bc8a:	31 0b       	mov	r11,16
8001bc8c:	10 9c       	mov	r12,r8
8001bc8e:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001bc92:	fe cc 06 1e 	sub	r12,pc,1566
8001bc96:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001bc9a:	ec f8 00 5c 	ld.w	r8,r6[92]
8001bc9e:	11 88       	ld.ub	r8,r8[0x0]
8001bca0:	31 0b       	mov	r11,16
8001bca2:	10 9c       	mov	r12,r8
8001bca4:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001bca8:	fe cc 06 28 	sub	r12,pc,1576
8001bcac:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001bcb0:	ec f8 00 58 	ld.w	r8,r6[88]
8001bcb4:	90 08       	ld.sh	r8,r8[0x0]
8001bcb6:	5c 78       	castu.h	r8
8001bcb8:	30 ab       	mov	r11,10
8001bcba:	10 9c       	mov	r12,r8
8001bcbc:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001bcc0:	fe cc 06 30 	sub	r12,pc,1584
8001bcc4:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_SOL,10);
8001bcc8:	30 ab       	mov	r11,10
8001bcca:	33 4c       	mov	r12,52
8001bccc:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001bcd0:	fe cc 06 78 	sub	r12,pc,1656
8001bcd4:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001bcd8:	ec f9 00 4c 	ld.w	r9,r6[76]
8001bcdc:	30 08       	mov	r8,0
8001bcde:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001bce0:	fe 9f fe 00 	bral	8001b8e0 <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_VELNED:
					if(payload_length == UBX_SIZE_NAV_VELNED)
8001bce4:	ec f8 00 58 	ld.w	r8,r6[88]
8001bce8:	90 09       	ld.sh	r9,r8[0x0]
8001bcea:	32 48       	mov	r8,36
8001bcec:	f0 09 19 00 	cp.h	r9,r8
8001bcf0:	c1 11       	brne	8001bd12 <ubx_read+0x460>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentVelnedMessage;
8001bcf2:	ec f9 05 e0 	ld.w	r9,r6[1504]
8001bcf6:	ec f8 00 dc 	ld.w	r8,r6[220]
8001bcfa:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastVelnedMessage;
8001bcfc:	ec f9 04 b0 	ld.w	r9,r6[1200]
8001bd00:	ec f8 00 e8 	ld.w	r8,r6[232]
8001bd04:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidVelnedMessage;
8001bd06:	ec f8 01 00 	ld.w	r8,r6[256]
8001bd0a:	ec f9 04 c0 	ld.w	r9,r6[1216]
8001bd0e:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_VELNED,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001bd10:	ca c8       	rjmp	8001be68 <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentVelnedMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastVelnedMessage;
						ubx_validMessage = &ubx_numberOfValidVelnedMessage;
					}else{
						dbg_print("Wrong Velned message 0x");
8001bd12:	fe cc 06 3e 	sub	r12,pc,1598
8001bd16:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001bd1a:	ec f8 00 60 	ld.w	r8,r6[96]
8001bd1e:	11 88       	ld.ub	r8,r8[0x0]
8001bd20:	31 0b       	mov	r11,16
8001bd22:	10 9c       	mov	r12,r8
8001bd24:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001bd28:	fe cc 06 b4 	sub	r12,pc,1716
8001bd2c:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001bd30:	ec f8 00 5c 	ld.w	r8,r6[92]
8001bd34:	11 88       	ld.ub	r8,r8[0x0]
8001bd36:	31 0b       	mov	r11,16
8001bd38:	10 9c       	mov	r12,r8
8001bd3a:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001bd3e:	fe cc 06 be 	sub	r12,pc,1726
8001bd42:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001bd46:	ec f8 00 58 	ld.w	r8,r6[88]
8001bd4a:	90 08       	ld.sh	r8,r8[0x0]
8001bd4c:	5c 78       	castu.h	r8
8001bd4e:	30 ab       	mov	r11,10
8001bd50:	10 9c       	mov	r12,r8
8001bd52:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001bd56:	fe cc 06 c6 	sub	r12,pc,1734
8001bd5a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_VELNED,10);
8001bd5e:	30 ab       	mov	r11,10
8001bd60:	32 4c       	mov	r12,36
8001bd62:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001bd66:	fe cc 07 0e 	sub	r12,pc,1806
8001bd6a:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001bd6e:	ec f9 00 4c 	ld.w	r9,r6[76]
8001bd72:	30 08       	mov	r8,0
8001bd74:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001bd76:	fe 9f fd b5 	bral	8001b8e0 <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_SVINFO:
					if(payload_length == UBX_SIZE_NAV_SVINFO)
8001bd7a:	ec f8 00 58 	ld.w	r8,r6[88]
8001bd7e:	90 09       	ld.sh	r9,r8[0x0]
8001bd80:	31 e8       	mov	r8,30
8001bd82:	f0 09 19 00 	cp.h	r9,r8
8001bd86:	c1 11       	brne	8001bda8 <ubx_read+0x4f6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSVInfoMessage;
8001bd88:	ec f9 05 00 	ld.w	r9,r6[1280]
8001bd8c:	ec f8 00 dc 	ld.w	r8,r6[220]
8001bd90:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastSVInfoMessage;
8001bd92:	ec f9 04 94 	ld.w	r9,r6[1172]
8001bd96:	ec f8 00 e8 	ld.w	r8,r6[232]
8001bd9a:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidSVInfoMessage;
8001bd9c:	ec f8 01 00 	ld.w	r8,r6[256]
8001bda0:	ec f9 03 c8 	ld.w	r9,r6[968]
8001bda4:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_SVINFO,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001bda6:	c6 18       	rjmp	8001be68 <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSVInfoMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastSVInfoMessage;
						ubx_validMessage = &ubx_numberOfValidSVInfoMessage;
					}else{
						dbg_print("Wrong SV Info message 0x");
8001bda8:	fe cc 06 bc 	sub	r12,pc,1724
8001bdac:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001bdb0:	ec f8 00 60 	ld.w	r8,r6[96]
8001bdb4:	11 88       	ld.ub	r8,r8[0x0]
8001bdb6:	31 0b       	mov	r11,16
8001bdb8:	10 9c       	mov	r12,r8
8001bdba:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001bdbe:	fe cc 07 4a 	sub	r12,pc,1866
8001bdc2:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001bdc6:	ec f8 00 5c 	ld.w	r8,r6[92]
8001bdca:	11 88       	ld.ub	r8,r8[0x0]
8001bdcc:	31 0b       	mov	r11,16
8001bdce:	10 9c       	mov	r12,r8
8001bdd0:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001bdd4:	fe cc 07 54 	sub	r12,pc,1876
8001bdd8:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001bddc:	ec f8 00 58 	ld.w	r8,r6[88]
8001bde0:	90 08       	ld.sh	r8,r8[0x0]
8001bde2:	5c 78       	castu.h	r8
8001bde4:	30 ab       	mov	r11,10
8001bde6:	10 9c       	mov	r12,r8
8001bde8:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001bdec:	fe cc 07 5c 	sub	r12,pc,1884
8001bdf0:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_SVINFO,10);
8001bdf4:	30 ab       	mov	r11,10
8001bdf6:	31 ec       	mov	r12,30
8001bdf8:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001bdfc:	fe cc 07 a4 	sub	r12,pc,1956
8001be00:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001be04:	ec f9 00 4c 	ld.w	r9,r6[76]
8001be08:	30 08       	mov	r8,0
8001be0a:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001be0c:	fe 9f fd 6a 	bral	8001b8e0 <ubx_read+0x2e>
					}
					break;
				default:
					step = 0;
8001be10:	ec f9 00 4c 	ld.w	r9,r6[76]
8001be14:	30 08       	mov	r8,0
8001be16:	b2 88       	st.b	r9[0x0],r8
					dbg_print("Unexpected NAV message, Class: 0x");
8001be18:	fe cc 07 10 	sub	r12,pc,1808
8001be1c:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(ubxclass,16);
8001be20:	ec f8 00 60 	ld.w	r8,r6[96]
8001be24:	11 88       	ld.ub	r8,r8[0x0]
8001be26:	31 0b       	mov	r11,16
8001be28:	10 9c       	mov	r12,r8
8001be2a:	f0 16 00 04 	mcall	r6[16]
					dbg_print(", msg id: 0x");
8001be2e:	fe cc 07 02 	sub	r12,pc,1794
8001be32:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(msg_id,16);
8001be36:	ec f8 00 5c 	ld.w	r8,r6[92]
8001be3a:	11 88       	ld.ub	r8,r8[0x0]
8001be3c:	31 0b       	mov	r11,16
8001be3e:	10 9c       	mov	r12,r8
8001be40:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of size ");
8001be44:	fe cc 07 08 	sub	r12,pc,1800
8001be48:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(payload_length,10);
8001be4c:	ec f8 00 58 	ld.w	r8,r6[88]
8001be50:	90 08       	ld.sh	r8,r8[0x0]
8001be52:	5c 78       	castu.h	r8
8001be54:	30 ab       	mov	r11,10
8001be56:	10 9c       	mov	r12,r8
8001be58:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001be5c:	fe cc 08 04 	sub	r12,pc,2052
8001be60:	f0 16 00 01 	mcall	r6[4]
					goto reset;
8001be64:	fe 9f fd 3e 	bral	8001b8e0 <ubx_read+0x2e>
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001be68:	e0 8f 03 93 	bral	8001c58e <ubx_read+0xcdc>
					dbg_print(" of size ");
					dbg_print_num(payload_length,10);
					dbg_print("\n");
					goto reset;
				}	
			}else if(ubxclass == UBX_CLASS_CFG)
8001be6c:	ec f8 00 60 	ld.w	r8,r6[96]
8001be70:	11 89       	ld.ub	r9,r8[0x0]
8001be72:	30 68       	mov	r8,6
8001be74:	f0 09 18 00 	cp.b	r9,r8
8001be78:	e0 81 01 1d 	brne	8001c0b2 <ubx_read+0x800>
// 				dbg_print_num(msg_id,16);
// 				dbg_print("payload_length :");
// 				dbg_print_num(payload_length,10);
// 				dbg_print("\n");
				
				switch(msg_id)
8001be7c:	ec f8 00 5c 	ld.w	r8,r6[92]
8001be80:	11 88       	ld.ub	r8,r8[0x0]
8001be82:	58 88       	cp.w	r8,8
8001be84:	c5 30       	breq	8001bf2a <ubx_read+0x678>
8001be86:	e0 48 00 24 	cp.w	r8,36
8001be8a:	c0 50       	breq	8001be94 <ubx_read+0x5e2>
8001be8c:	58 18       	cp.w	r8,1
8001be8e:	e0 80 00 99 	breq	8001bfc0 <ubx_read+0x70e>
8001be92:	ce 28       	rjmp	8001c056 <ubx_read+0x7a4>
				{			
				case MSG_CFG_NAV_SETTINGS:
					if(payload_length == UBX_SIZE_NAV_SETTINGS)
8001be94:	ec f8 00 58 	ld.w	r8,r6[88]
8001be98:	90 09       	ld.sh	r9,r8[0x0]
8001be9a:	32 48       	mov	r8,36
8001be9c:	f0 09 19 00 	cp.h	r9,r8
8001bea0:	c1 11       	brne	8001bec2 <ubx_read+0x610>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentNavSettingsMessage;
8001bea2:	ec f9 05 b0 	ld.w	r9,r6[1456]
8001bea6:	ec f8 00 dc 	ld.w	r8,r6[220]
8001beaa:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastNavSettingsMessage;
8001beac:	ec f9 04 a8 	ld.w	r9,r6[1192]
8001beb0:	ec f8 00 e8 	ld.w	r8,r6[232]
8001beb4:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidNavSettingsMessage;
8001beb6:	ec f8 01 00 	ld.w	r8,r6[256]
8001beba:	ec f9 04 78 	ld.w	r9,r6[1144]
8001bebe:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_SETTINGS,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;		
8001bec0:	cf 78       	rjmp	8001c0ae <ubx_read+0x7fc>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentNavSettingsMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastNavSettingsMessage;
						ubx_validMessage = &ubx_numberOfValidNavSettingsMessage;
					}else{
						dbg_print("Wrong Nav Settings message 0x");
8001bec2:	fe cc 07 7a 	sub	r12,pc,1914
8001bec6:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001beca:	ec f8 00 60 	ld.w	r8,r6[96]
8001bece:	11 88       	ld.ub	r8,r8[0x0]
8001bed0:	31 0b       	mov	r11,16
8001bed2:	10 9c       	mov	r12,r8
8001bed4:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001bed8:	fe cc 08 64 	sub	r12,pc,2148
8001bedc:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001bee0:	ec f8 00 5c 	ld.w	r8,r6[92]
8001bee4:	11 88       	ld.ub	r8,r8[0x0]
8001bee6:	31 0b       	mov	r11,16
8001bee8:	10 9c       	mov	r12,r8
8001beea:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001beee:	fe cc 08 6e 	sub	r12,pc,2158
8001bef2:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001bef6:	ec f8 00 58 	ld.w	r8,r6[88]
8001befa:	90 08       	ld.sh	r8,r8[0x0]
8001befc:	5c 78       	castu.h	r8
8001befe:	30 ab       	mov	r11,10
8001bf00:	10 9c       	mov	r12,r8
8001bf02:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001bf06:	fe cc 08 76 	sub	r12,pc,2166
8001bf0a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_SETTINGS,10);
8001bf0e:	30 ab       	mov	r11,10
8001bf10:	32 4c       	mov	r12,36
8001bf12:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001bf16:	fe cc 08 be 	sub	r12,pc,2238
8001bf1a:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001bf1e:	ec f9 00 4c 	ld.w	r9,r6[76]
8001bf22:	30 08       	mov	r8,0
8001bf24:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001bf26:	fe 9f fc dd 	bral	8001b8e0 <ubx_read+0x2e>
					}
					break;		
				case MSG_CFG_RATE:
					if(payload_length == UBX_SIZE_CFG_RATE)
8001bf2a:	ec f8 00 58 	ld.w	r8,r6[88]
8001bf2e:	90 09       	ld.sh	r9,r8[0x0]
8001bf30:	30 68       	mov	r8,6
8001bf32:	f0 09 19 00 	cp.h	r9,r8
8001bf36:	c1 11       	brne	8001bf58 <ubx_read+0x6a6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGRateMessage;
8001bf38:	ec f9 06 50 	ld.w	r9,r6[1616]
8001bf3c:	ec f8 00 dc 	ld.w	r8,r6[220]
8001bf40:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGRateMessage;
8001bf42:	ec f9 08 94 	ld.w	r9,r6[2196]
8001bf46:	ec f8 00 e8 	ld.w	r8,r6[232]
8001bf4a:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidCFGRateMessage;
8001bf4c:	ec f8 01 00 	ld.w	r8,r6[256]
8001bf50:	ec f9 07 0c 	ld.w	r9,r6[1804]
8001bf54:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_CFG_RATE,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001bf56:	ca c8       	rjmp	8001c0ae <ubx_read+0x7fc>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGRateMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGRateMessage;
						ubx_validMessage = &ubx_numberOfValidCFGRateMessage;
					}else{
						dbg_print("Wrong CFG Rate message 0x");
8001bf58:	fe cc 07 f0 	sub	r12,pc,2032
8001bf5c:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001bf60:	ec f8 00 60 	ld.w	r8,r6[96]
8001bf64:	11 88       	ld.ub	r8,r8[0x0]
8001bf66:	31 0b       	mov	r11,16
8001bf68:	10 9c       	mov	r12,r8
8001bf6a:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001bf6e:	fe cc 08 fa 	sub	r12,pc,2298
8001bf72:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001bf76:	ec f8 00 5c 	ld.w	r8,r6[92]
8001bf7a:	11 88       	ld.ub	r8,r8[0x0]
8001bf7c:	31 0b       	mov	r11,16
8001bf7e:	10 9c       	mov	r12,r8
8001bf80:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001bf84:	fe cc 09 04 	sub	r12,pc,2308
8001bf88:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001bf8c:	ec f8 00 58 	ld.w	r8,r6[88]
8001bf90:	90 08       	ld.sh	r8,r8[0x0]
8001bf92:	5c 78       	castu.h	r8
8001bf94:	30 ab       	mov	r11,10
8001bf96:	10 9c       	mov	r12,r8
8001bf98:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001bf9c:	fe cc 09 0c 	sub	r12,pc,2316
8001bfa0:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_CFG_RATE,10);
8001bfa4:	30 ab       	mov	r11,10
8001bfa6:	30 6c       	mov	r12,6
8001bfa8:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001bfac:	fe cc 09 54 	sub	r12,pc,2388
8001bfb0:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001bfb4:	ec f9 00 4c 	ld.w	r9,r6[76]
8001bfb8:	30 08       	mov	r8,0
8001bfba:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001bfbc:	fe 9f fc 92 	bral	8001b8e0 <ubx_read+0x2e>
					}
					break;
				case MSG_CFG_SET_RATE:
					if (payload_length == UBX_SIZE_CFG_GETSET_RATE)
8001bfc0:	ec f8 00 58 	ld.w	r8,r6[88]
8001bfc4:	90 09       	ld.sh	r9,r8[0x0]
8001bfc6:	30 38       	mov	r8,3
8001bfc8:	f0 09 19 00 	cp.h	r9,r8
8001bfcc:	c1 11       	brne	8001bfee <ubx_read+0x73c>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGSetGetRateMessage;
8001bfce:	ec f9 06 70 	ld.w	r9,r6[1648]
8001bfd2:	ec f8 00 dc 	ld.w	r8,r6[220]
8001bfd6:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGSetGetRateMessage;
8001bfd8:	ec f9 04 10 	ld.w	r9,r6[1040]
8001bfdc:	ec f8 00 e8 	ld.w	r8,r6[232]
8001bfe0:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidCFGSetGetRateMessage;
8001bfe2:	ec f8 01 00 	ld.w	r8,r6[256]
8001bfe6:	ec f9 04 d8 	ld.w	r9,r6[1240]
8001bfea:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_CFG_GETSET_RATE,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001bfec:	c6 18       	rjmp	8001c0ae <ubx_read+0x7fc>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGSetGetRateMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGSetGetRateMessage;
						ubx_validMessage = &ubx_numberOfValidCFGSetGetRateMessage;
					}else{
						dbg_print("Wrong CFG Set/get message 0x");
8001bfee:	fe cc 08 6a 	sub	r12,pc,2154
8001bff2:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001bff6:	ec f8 00 60 	ld.w	r8,r6[96]
8001bffa:	11 88       	ld.ub	r8,r8[0x0]
8001bffc:	31 0b       	mov	r11,16
8001bffe:	10 9c       	mov	r12,r8
8001c000:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001c004:	fe cc 09 90 	sub	r12,pc,2448
8001c008:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001c00c:	ec f8 00 5c 	ld.w	r8,r6[92]
8001c010:	11 88       	ld.ub	r8,r8[0x0]
8001c012:	31 0b       	mov	r11,16
8001c014:	10 9c       	mov	r12,r8
8001c016:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001c01a:	fe cc 09 9a 	sub	r12,pc,2458
8001c01e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001c022:	ec f8 00 58 	ld.w	r8,r6[88]
8001c026:	90 08       	ld.sh	r8,r8[0x0]
8001c028:	5c 78       	castu.h	r8
8001c02a:	30 ab       	mov	r11,10
8001c02c:	10 9c       	mov	r12,r8
8001c02e:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001c032:	fe cc 09 a2 	sub	r12,pc,2466
8001c036:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_CFG_GETSET_RATE,10);
8001c03a:	30 ab       	mov	r11,10
8001c03c:	30 3c       	mov	r12,3
8001c03e:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001c042:	fe cc 09 ea 	sub	r12,pc,2538
8001c046:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001c04a:	ec f9 00 4c 	ld.w	r9,r6[76]
8001c04e:	30 08       	mov	r8,0
8001c050:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001c052:	fe 9f fc 47 	bral	8001b8e0 <ubx_read+0x2e>
					}
					break;
				default:
					step = 0;
8001c056:	ec f9 00 4c 	ld.w	r9,r6[76]
8001c05a:	30 08       	mov	r8,0
8001c05c:	b2 88       	st.b	r9[0x0],r8
					dbg_print("Unexpected CFG message, Class: 0x");
8001c05e:	fe cc 08 ba 	sub	r12,pc,2234
8001c062:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(ubxclass,16);
8001c066:	ec f8 00 60 	ld.w	r8,r6[96]
8001c06a:	11 88       	ld.ub	r8,r8[0x0]
8001c06c:	31 0b       	mov	r11,16
8001c06e:	10 9c       	mov	r12,r8
8001c070:	f0 16 00 04 	mcall	r6[16]
					dbg_print(", msg id: 0x");
8001c074:	fe cc 09 48 	sub	r12,pc,2376
8001c078:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(msg_id,16);
8001c07c:	ec f8 00 5c 	ld.w	r8,r6[92]
8001c080:	11 88       	ld.ub	r8,r8[0x0]
8001c082:	31 0b       	mov	r11,16
8001c084:	10 9c       	mov	r12,r8
8001c086:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of size ");
8001c08a:	fe cc 09 4e 	sub	r12,pc,2382
8001c08e:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(payload_length,10);
8001c092:	ec f8 00 58 	ld.w	r8,r6[88]
8001c096:	90 08       	ld.sh	r8,r8[0x0]
8001c098:	5c 78       	castu.h	r8
8001c09a:	30 ab       	mov	r11,10
8001c09c:	10 9c       	mov	r12,r8
8001c09e:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001c0a2:	fe cc 0a 4a 	sub	r12,pc,2634
8001c0a6:	f0 16 00 01 	mcall	r6[4]
					goto reset;
8001c0aa:	fe 9f fc 1b 	bral	8001b8e0 <ubx_read+0x2e>
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001c0ae:	e0 8f 02 70 	bral	8001c58e <ubx_read+0xcdc>
					dbg_print(" of size ");
					dbg_print_num(payload_length,10);
					dbg_print("\n");
					goto reset;
				}
			} else if (ubxclass == UBX_CLASS_MON)
8001c0b2:	ec f8 00 60 	ld.w	r8,r6[96]
8001c0b6:	11 89       	ld.ub	r9,r8[0x0]
8001c0b8:	30 a8       	mov	r8,10
8001c0ba:	f0 09 18 00 	cp.b	r9,r8
8001c0be:	e0 81 00 88 	brne	8001c1ce <ubx_read+0x91c>
			{
 				switch (msg_id)
8001c0c2:	ec f8 00 5c 	ld.w	r8,r6[92]
8001c0c6:	11 88       	ld.ub	r8,r8[0x0]
8001c0c8:	e0 48 00 21 	cp.w	r8,33
8001c0cc:	c4 d1       	brne	8001c166 <ubx_read+0x8b4>
 				{
 				case MSG_MON_RXR:
 					if(payload_length == UBX_SIZE_MON_RXR)
8001c0ce:	ec f8 00 58 	ld.w	r8,r6[88]
8001c0d2:	90 09       	ld.sh	r9,r8[0x0]
8001c0d4:	30 18       	mov	r8,1
8001c0d6:	f0 09 19 00 	cp.h	r9,r8
8001c0da:	c1 21       	brne	8001c0fe <ubx_read+0x84c>
 					{
 						ubx_currentMessage = (unsigned char**)&ubx_currentMONRXRMessage;
8001c0dc:	ec f9 05 ac 	ld.w	r9,r6[1452]
8001c0e0:	ec f8 00 dc 	ld.w	r8,r6[220]
8001c0e4:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastMONRXRMessage;
8001c0e6:	ec f9 03 f8 	ld.w	r9,r6[1016]
8001c0ea:	ec f8 00 e8 	ld.w	r8,r6[232]
8001c0ee:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidMONRXRMessage;
8001c0f0:	ec f8 01 00 	ld.w	r8,r6[256]
8001c0f4:	ec f9 04 bc 	ld.w	r9,r6[1212]
8001c0f8:	91 09       	st.w	r8[0x0],r9
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001c0fa:	e0 8f 02 4a 	bral	8001c58e <ubx_read+0xcdc>
 					{
 						ubx_currentMessage = (unsigned char**)&ubx_currentMONRXRMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastMONRXRMessage;
						ubx_validMessage = &ubx_numberOfValidMONRXRMessage;
 					}else{
 						dbg_print("Wrong MON RXR message 0x");
8001c0fe:	fe cc 09 36 	sub	r12,pc,2358
8001c102:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(ubxclass,16);
8001c106:	ec f8 00 60 	ld.w	r8,r6[96]
8001c10a:	11 88       	ld.ub	r8,r8[0x0]
8001c10c:	31 0b       	mov	r11,16
8001c10e:	10 9c       	mov	r12,r8
8001c110:	f0 16 00 04 	mcall	r6[16]
 						dbg_print(" Msg id: 0x");
8001c114:	fe cc 0a a0 	sub	r12,pc,2720
8001c118:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(msg_id,16);
8001c11c:	ec f8 00 5c 	ld.w	r8,r6[92]
8001c120:	11 88       	ld.ub	r8,r8[0x0]
8001c122:	31 0b       	mov	r11,16
8001c124:	10 9c       	mov	r12,r8
8001c126:	f0 16 00 04 	mcall	r6[16]
 						dbg_print(" Received size:");
8001c12a:	fe cc 0a aa 	sub	r12,pc,2730
8001c12e:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(payload_length,10);
8001c132:	ec f8 00 58 	ld.w	r8,r6[88]
8001c136:	90 08       	ld.sh	r8,r8[0x0]
8001c138:	5c 78       	castu.h	r8
8001c13a:	30 ab       	mov	r11,10
8001c13c:	10 9c       	mov	r12,r8
8001c13e:	f0 16 00 04 	mcall	r6[16]
 						dbg_print(" should be:");
8001c142:	fe cc 0a b2 	sub	r12,pc,2738
8001c146:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(UBX_SIZE_MON_RXR,10);
8001c14a:	30 ab       	mov	r11,10
8001c14c:	30 1c       	mov	r12,1
8001c14e:	f0 16 00 04 	mcall	r6[16]
 						dbg_print("\n");
8001c152:	fe cc 0a fa 	sub	r12,pc,2810
8001c156:	f0 16 00 01 	mcall	r6[4]
 						step = 0;
8001c15a:	ec f9 00 4c 	ld.w	r9,r6[76]
8001c15e:	30 08       	mov	r8,0
8001c160:	b2 88       	st.b	r9[0x0],r8
 						goto reset;
8001c162:	fe 9f fb bf 	bral	8001b8e0 <ubx_read+0x2e>
 					}
					break;
 				default:
 					step = 0;
8001c166:	ec f9 00 4c 	ld.w	r9,r6[76]
8001c16a:	30 08       	mov	r8,0
8001c16c:	b2 88       	st.b	r9[0x0],r8
 					dbg_print("Unexpected TIM message, Class: 0x");
8001c16e:	fe cc 09 8a 	sub	r12,pc,2442
8001c172:	f0 16 00 01 	mcall	r6[4]
 					dbg_print_num(ubxclass,16);
8001c176:	ec f8 00 60 	ld.w	r8,r6[96]
8001c17a:	11 88       	ld.ub	r8,r8[0x0]
8001c17c:	31 0b       	mov	r11,16
8001c17e:	10 9c       	mov	r12,r8
8001c180:	f0 16 00 04 	mcall	r6[16]
 					dbg_print(", msg id: 0x");
8001c184:	fe cc 0a 58 	sub	r12,pc,2648
8001c188:	f0 16 00 01 	mcall	r6[4]
 					dbg_print_num(msg_id,16);
8001c18c:	ec f8 00 5c 	ld.w	r8,r6[92]
8001c190:	11 88       	ld.ub	r8,r8[0x0]
8001c192:	31 0b       	mov	r11,16
8001c194:	10 9c       	mov	r12,r8
8001c196:	f0 16 00 04 	mcall	r6[16]
 					dbg_print(" of size ");
8001c19a:	fe cc 0a 5e 	sub	r12,pc,2654
8001c19e:	f0 16 00 01 	mcall	r6[4]
 					dbg_print_num(payload_length,10);
8001c1a2:	ec f8 00 58 	ld.w	r8,r6[88]
8001c1a6:	90 08       	ld.sh	r8,r8[0x0]
8001c1a8:	5c 78       	castu.h	r8
8001c1aa:	30 ab       	mov	r11,10
8001c1ac:	10 9c       	mov	r12,r8
8001c1ae:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" should be :");
8001c1b2:	fe cc 09 aa 	sub	r12,pc,2474
8001c1b6:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(MSG_MON_RXR,16);
8001c1ba:	31 0b       	mov	r11,16
8001c1bc:	32 1c       	mov	r12,33
8001c1be:	f0 16 00 04 	mcall	r6[16]
 					dbg_print("\n");
8001c1c2:	fe cc 0b 6a 	sub	r12,pc,2922
8001c1c6:	f0 16 00 01 	mcall	r6[4]
 					goto reset;
8001c1ca:	fe 9f fb 8b 	bral	8001b8e0 <ubx_read+0x2e>
 				}
				
			} else if(ubxclass == UBX_CLASS_TIM)
8001c1ce:	ec f8 00 60 	ld.w	r8,r6[96]
8001c1d2:	11 89       	ld.ub	r9,r8[0x0]
8001c1d4:	30 d8       	mov	r8,13
8001c1d6:	f0 09 18 00 	cp.b	r9,r8
8001c1da:	e0 81 00 d5 	brne	8001c384 <ubx_read+0xad2>
			{
				switch(msg_id)
8001c1de:	ec f8 00 5c 	ld.w	r8,r6[92]
8001c1e2:	11 88       	ld.ub	r8,r8[0x0]
8001c1e4:	58 18       	cp.w	r8,1
8001c1e6:	c0 40       	breq	8001c1ee <ubx_read+0x93c>
8001c1e8:	58 68       	cp.w	r8,6
8001c1ea:	c4 d0       	breq	8001c284 <ubx_read+0x9d2>
8001c1ec:	c9 78       	rjmp	8001c31a <ubx_read+0xa68>
				{
				case MSG_TIM_TP:
					if (payload_length == UBX_SIZE_TIM_TP)
8001c1ee:	ec f8 00 58 	ld.w	r8,r6[88]
8001c1f2:	90 09       	ld.sh	r9,r8[0x0]
8001c1f4:	31 08       	mov	r8,16
8001c1f6:	f0 09 19 00 	cp.h	r9,r8
8001c1fa:	c1 11       	brne	8001c21c <ubx_read+0x96a>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimTPMessage;
8001c1fc:	ec f9 08 48 	ld.w	r9,r6[2120]
8001c200:	ec f8 00 dc 	ld.w	r8,r6[220]
8001c204:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastTimTPMessage;
8001c206:	ec f9 04 38 	ld.w	r9,r6[1080]
8001c20a:	ec f8 00 e8 	ld.w	r8,r6[232]
8001c20e:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidTimTPMessage;
8001c210:	ec f8 01 00 	ld.w	r8,r6[256]
8001c214:	ec f9 04 7c 	ld.w	r9,r6[1148]
8001c218:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_TIM_TP,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001c21a:	cb 48       	rjmp	8001c382 <ubx_read+0xad0>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimTPMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastTimTPMessage;
						ubx_validMessage = &ubx_numberOfValidTimTPMessage;
					}else{
						dbg_print("Wrong TIM TP message 0x");
8001c21c:	fe cc 0a 04 	sub	r12,pc,2564
8001c220:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001c224:	ec f8 00 60 	ld.w	r8,r6[96]
8001c228:	11 88       	ld.ub	r8,r8[0x0]
8001c22a:	31 0b       	mov	r11,16
8001c22c:	10 9c       	mov	r12,r8
8001c22e:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001c232:	fe cc 0b be 	sub	r12,pc,3006
8001c236:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001c23a:	ec f8 00 5c 	ld.w	r8,r6[92]
8001c23e:	11 88       	ld.ub	r8,r8[0x0]
8001c240:	31 0b       	mov	r11,16
8001c242:	10 9c       	mov	r12,r8
8001c244:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001c248:	fe cc 0b c8 	sub	r12,pc,3016
8001c24c:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001c250:	ec f8 00 58 	ld.w	r8,r6[88]
8001c254:	90 08       	ld.sh	r8,r8[0x0]
8001c256:	5c 78       	castu.h	r8
8001c258:	30 ab       	mov	r11,10
8001c25a:	10 9c       	mov	r12,r8
8001c25c:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001c260:	fe cc 0b d0 	sub	r12,pc,3024
8001c264:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_TIM_TP,10);
8001c268:	30 ab       	mov	r11,10
8001c26a:	31 0c       	mov	r12,16
8001c26c:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001c270:	fe cc 0c 18 	sub	r12,pc,3096
8001c274:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001c278:	ec f9 00 4c 	ld.w	r9,r6[76]
8001c27c:	30 08       	mov	r8,0
8001c27e:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001c280:	fe 9f fb 30 	bral	8001b8e0 <ubx_read+0x2e>
					}
					break;
				case MSG_TIM_VRFY:
					if (payload_length == UBX_SIZE_TIM_VRFY)
8001c284:	ec f8 00 58 	ld.w	r8,r6[88]
8001c288:	90 09       	ld.sh	r9,r8[0x0]
8001c28a:	31 48       	mov	r8,20
8001c28c:	f0 09 19 00 	cp.h	r9,r8
8001c290:	c1 11       	brne	8001c2b2 <ubx_read+0xa00>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimVRFYMessage;
8001c292:	ec f9 08 b4 	ld.w	r9,r6[2228]
8001c296:	ec f8 00 dc 	ld.w	r8,r6[220]
8001c29a:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastTimVRFYMessage;
8001c29c:	ec f9 04 50 	ld.w	r9,r6[1104]
8001c2a0:	ec f8 00 e8 	ld.w	r8,r6[232]
8001c2a4:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidTimVRFYMessage;
8001c2a6:	ec f8 01 00 	ld.w	r8,r6[256]
8001c2aa:	ec f9 04 84 	ld.w	r9,r6[1156]
8001c2ae:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_TIM_VRFY,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001c2b0:	c6 98       	rjmp	8001c382 <ubx_read+0xad0>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimVRFYMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastTimVRFYMessage;
						ubx_validMessage = &ubx_numberOfValidTimVRFYMessage;
						}else{
						dbg_print("Wrong TIM VRFY message 0x");
8001c2b2:	fe cc 0a 82 	sub	r12,pc,2690
8001c2b6:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001c2ba:	ec f8 00 60 	ld.w	r8,r6[96]
8001c2be:	11 88       	ld.ub	r8,r8[0x0]
8001c2c0:	31 0b       	mov	r11,16
8001c2c2:	10 9c       	mov	r12,r8
8001c2c4:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001c2c8:	fe cc 0c 54 	sub	r12,pc,3156
8001c2cc:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001c2d0:	ec f8 00 5c 	ld.w	r8,r6[92]
8001c2d4:	11 88       	ld.ub	r8,r8[0x0]
8001c2d6:	31 0b       	mov	r11,16
8001c2d8:	10 9c       	mov	r12,r8
8001c2da:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001c2de:	fe cc 0c 5e 	sub	r12,pc,3166
8001c2e2:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001c2e6:	ec f8 00 58 	ld.w	r8,r6[88]
8001c2ea:	90 08       	ld.sh	r8,r8[0x0]
8001c2ec:	5c 78       	castu.h	r8
8001c2ee:	30 ab       	mov	r11,10
8001c2f0:	10 9c       	mov	r12,r8
8001c2f2:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001c2f6:	fe cc 0c 66 	sub	r12,pc,3174
8001c2fa:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_TIM_VRFY,10);
8001c2fe:	30 ab       	mov	r11,10
8001c300:	31 4c       	mov	r12,20
8001c302:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001c306:	fe cc 0c ae 	sub	r12,pc,3246
8001c30a:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001c30e:	ec f9 00 4c 	ld.w	r9,r6[76]
8001c312:	30 08       	mov	r8,0
8001c314:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001c316:	fe 9f fa e5 	bral	8001b8e0 <ubx_read+0x2e>
					}
					break;
					
				default:
					step = 0;
8001c31a:	ec f9 00 4c 	ld.w	r9,r6[76]
8001c31e:	30 08       	mov	r8,0
8001c320:	b2 88       	st.b	r9[0x0],r8
					dbg_print("Unexpected TIM message, Class: 0x");
8001c322:	fe cc 0b 3e 	sub	r12,pc,2878
8001c326:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(ubxclass,16);
8001c32a:	ec f8 00 60 	ld.w	r8,r6[96]
8001c32e:	11 88       	ld.ub	r8,r8[0x0]
8001c330:	31 0b       	mov	r11,16
8001c332:	10 9c       	mov	r12,r8
8001c334:	f0 16 00 04 	mcall	r6[16]
					dbg_print(", msg id: 0x");
8001c338:	fe cc 0c 0c 	sub	r12,pc,3084
8001c33c:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(msg_id,16);
8001c340:	ec f8 00 5c 	ld.w	r8,r6[92]
8001c344:	11 88       	ld.ub	r8,r8[0x0]
8001c346:	31 0b       	mov	r11,16
8001c348:	10 9c       	mov	r12,r8
8001c34a:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of size ");
8001c34e:	fe cc 0c 12 	sub	r12,pc,3090
8001c352:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(payload_length,10);
8001c356:	ec f8 00 58 	ld.w	r8,r6[88]
8001c35a:	90 08       	ld.sh	r8,r8[0x0]
8001c35c:	5c 78       	castu.h	r8
8001c35e:	30 ab       	mov	r11,10
8001c360:	10 9c       	mov	r12,r8
8001c362:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" should be :");
8001c366:	fe cc 0b 5e 	sub	r12,pc,2910
8001c36a:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(MSG_TIM_TP,16);
8001c36e:	31 0b       	mov	r11,16
8001c370:	30 1c       	mov	r12,1
8001c372:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001c376:	fe cc 0d 1e 	sub	r12,pc,3358
8001c37a:	f0 16 00 01 	mcall	r6[4]
					goto reset;
8001c37e:	fe 9f fa b1 	bral	8001b8e0 <ubx_read+0x2e>
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001c382:	c0 69       	rjmp	8001c58e <ubx_read+0xcdc>
					dbg_print_num(MSG_TIM_TP,16);
					dbg_print("\n");
					goto reset;
				}
			}else{
				step = 0;
8001c384:	ec f9 00 4c 	ld.w	r9,r6[76]
8001c388:	30 08       	mov	r8,0
8001c38a:	b2 88       	st.b	r9[0x0],r8
				dbg_print("Unexpected message, Class: 0x");
8001c38c:	fe cc 0b 40 	sub	r12,pc,2880
8001c390:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(ubxclass,16);
8001c394:	ec f8 00 60 	ld.w	r8,r6[96]
8001c398:	11 88       	ld.ub	r8,r8[0x0]
8001c39a:	31 0b       	mov	r11,16
8001c39c:	10 9c       	mov	r12,r8
8001c39e:	f0 16 00 04 	mcall	r6[16]
				dbg_print(", msg id: 0x");
8001c3a2:	fe cc 0c 76 	sub	r12,pc,3190
8001c3a6:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(msg_id,16);
8001c3aa:	ec f8 00 5c 	ld.w	r8,r6[92]
8001c3ae:	11 88       	ld.ub	r8,r8[0x0]
8001c3b0:	31 0b       	mov	r11,16
8001c3b2:	10 9c       	mov	r12,r8
8001c3b4:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" of size ");
8001c3b8:	fe cc 0c 7c 	sub	r12,pc,3196
8001c3bc:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(payload_length,10);
8001c3c0:	ec f8 00 58 	ld.w	r8,r6[88]
8001c3c4:	90 08       	ld.sh	r8,r8[0x0]
8001c3c6:	5c 78       	castu.h	r8
8001c3c8:	30 ab       	mov	r11,10
8001c3ca:	10 9c       	mov	r12,r8
8001c3cc:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001c3d0:	fe cc 0d 78 	sub	r12,pc,3448
8001c3d4:	f0 16 00 01 	mcall	r6[4]
				goto reset;	
8001c3d8:	fe 9f fa 84 	bral	8001b8e0 <ubx_read+0x2e>
			}		
			break;
		case 6:
			
			cksum_a += data;
8001c3dc:	ec f8 00 b0 	ld.w	r8,r6[176]
8001c3e0:	11 88       	ld.ub	r8,r8[0x0]
8001c3e2:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001c3e6:	f2 08 00 08 	add	r8,r9,r8
8001c3ea:	5c 58       	castu.b	r8
8001c3ec:	ec f9 00 b0 	ld.w	r9,r6[176]
8001c3f0:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001c3f2:	ec f8 01 10 	ld.w	r8,r6[272]
8001c3f6:	11 89       	ld.ub	r9,r8[0x0]
8001c3f8:	ec f8 00 b0 	ld.w	r8,r6[176]
8001c3fc:	11 88       	ld.ub	r8,r8[0x0]
8001c3fe:	f2 08 00 08 	add	r8,r9,r8
8001c402:	5c 58       	castu.b	r8
8001c404:	ec f9 01 10 	ld.w	r9,r6[272]
8001c408:	b2 88       	st.b	r9[0x0],r8
			
			#ifdef BIG_ENDIAN
				(*ubx_currentMessage)[payload_length - 1 - payload_counter] = data;
8001c40a:	ec f8 00 dc 	ld.w	r8,r6[220]
8001c40e:	70 08       	ld.w	r8,r8[0x0]
8001c410:	70 09       	ld.w	r9,r8[0x0]
8001c412:	ec f8 00 58 	ld.w	r8,r6[88]
8001c416:	90 08       	ld.sh	r8,r8[0x0]
8001c418:	5c 78       	castu.h	r8
8001c41a:	f0 ca 00 01 	sub	r10,r8,1
8001c41e:	ec f8 01 dc 	ld.w	r8,r6[476]
8001c422:	90 08       	ld.sh	r8,r8[0x0]
8001c424:	5c 78       	castu.h	r8
8001c426:	f4 08 01 08 	sub	r8,r10,r8
8001c42a:	10 09       	add	r9,r8
8001c42c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001c430:	b2 88       	st.b	r9[0x0],r8
			#else
				(*ubx_currentMessage)[payload_counter] = data;
			#endif
			
			payload_counter++;
8001c432:	ec f8 01 dc 	ld.w	r8,r6[476]
8001c436:	90 08       	ld.sh	r8,r8[0x0]
8001c438:	2f f8       	sub	r8,-1
8001c43a:	5c 88       	casts.h	r8
8001c43c:	ec f9 01 dc 	ld.w	r9,r6[476]
8001c440:	b2 08       	st.h	r9[0x0],r8
			
			if (payload_counter == payload_length)
8001c442:	ec f8 01 dc 	ld.w	r8,r6[476]
8001c446:	90 09       	ld.sh	r9,r8[0x0]
8001c448:	ec f8 00 58 	ld.w	r8,r6[88]
8001c44c:	90 08       	ld.sh	r8,r8[0x0]
8001c44e:	f0 09 19 00 	cp.h	r9,r8
8001c452:	e0 81 00 9b 	brne	8001c588 <ubx_read+0xcd6>
			{
				step++;
8001c456:	ec f8 00 4c 	ld.w	r8,r6[76]
8001c45a:	11 88       	ld.ub	r8,r8[0x0]
8001c45c:	2f f8       	sub	r8,-1
8001c45e:	5c 58       	castu.b	r8
8001c460:	ec f9 00 4c 	ld.w	r9,r6[76]
8001c464:	b2 88       	st.b	r9[0x0],r8
			}
			break;
8001c466:	c9 48       	rjmp	8001c58e <ubx_read+0xcdc>
		case 7:
			step++;
8001c468:	ec f8 00 4c 	ld.w	r8,r6[76]
8001c46c:	11 88       	ld.ub	r8,r8[0x0]
8001c46e:	2f f8       	sub	r8,-1
8001c470:	5c 58       	castu.b	r8
8001c472:	ec f9 00 4c 	ld.w	r9,r6[76]
8001c476:	b2 88       	st.b	r9[0x0],r8
			if (cksum_a != data)
8001c478:	ec f8 00 b0 	ld.w	r8,r6[176]
8001c47c:	11 88       	ld.ub	r8,r8[0x0]
8001c47e:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001c482:	f0 09 18 00 	cp.b	r9,r8
8001c486:	e0 80 00 83 	breq	8001c58c <ubx_read+0xcda>
			{
				dbg_print("bad cksum_a ");
8001c48a:	fe cc 0c 1e 	sub	r12,pc,3102
8001c48e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(data,16);
8001c492:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001c496:	31 0b       	mov	r11,16
8001c498:	10 9c       	mov	r12,r8
8001c49a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" should be ");
8001c49e:	fe cc 0c 22 	sub	r12,pc,3106
8001c4a2:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(cksum_a,16);
8001c4a6:	ec f8 00 b0 	ld.w	r8,r6[176]
8001c4aa:	11 88       	ld.ub	r8,r8[0x0]
8001c4ac:	31 0b       	mov	r11,16
8001c4ae:	10 9c       	mov	r12,r8
8001c4b0:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" class : 0x");
8001c4b4:	fe cc 0c 2c 	sub	r12,pc,3116
8001c4b8:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(ubxclass,16);
8001c4bc:	ec f8 00 60 	ld.w	r8,r6[96]
8001c4c0:	11 88       	ld.ub	r8,r8[0x0]
8001c4c2:	31 0b       	mov	r11,16
8001c4c4:	10 9c       	mov	r12,r8
8001c4c6:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" msg_id : 0x");
8001c4ca:	fe cc 0c 36 	sub	r12,pc,3126
8001c4ce:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(msg_id,16);
8001c4d2:	ec f8 00 5c 	ld.w	r8,r6[92]
8001c4d6:	11 88       	ld.ub	r8,r8[0x0]
8001c4d8:	31 0b       	mov	r11,16
8001c4da:	10 9c       	mov	r12,r8
8001c4dc:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001c4e0:	fe cc 0e 88 	sub	r12,pc,3720
8001c4e4:	f0 16 00 01 	mcall	r6[4]
				step = 0;
8001c4e8:	ec f9 00 4c 	ld.w	r9,r6[76]
8001c4ec:	30 08       	mov	r8,0
8001c4ee:	b2 88       	st.b	r9[0x0],r8
				goto reset;
8001c4f0:	fe 9f f9 f8 	bral	8001b8e0 <ubx_read+0x2e>
			}
			break;
		case 8:
			step=0;
8001c4f4:	ec f9 00 4c 	ld.w	r9,r6[76]
8001c4f8:	30 08       	mov	r8,0
8001c4fa:	b2 88       	st.b	r9[0x0],r8
			if (cksum_b != data)
8001c4fc:	ec f8 01 10 	ld.w	r8,r6[272]
8001c500:	11 88       	ld.ub	r8,r8[0x0]
8001c502:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001c506:	f0 09 18 00 	cp.b	r9,r8
8001c50a:	c1 b0       	breq	8001c540 <ubx_read+0xc8e>
			{
				dbg_print("bad cksum_b ");
8001c50c:	fe cc 0c 68 	sub	r12,pc,3176
8001c510:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(data,16);
8001c514:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001c518:	31 0b       	mov	r11,16
8001c51a:	10 9c       	mov	r12,r8
8001c51c:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" should be ");
8001c520:	fe cc 0c a4 	sub	r12,pc,3236
8001c524:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(cksum_b,16);
8001c528:	ec f8 01 10 	ld.w	r8,r6[272]
8001c52c:	11 88       	ld.ub	r8,r8[0x0]
8001c52e:	31 0b       	mov	r11,16
8001c530:	10 9c       	mov	r12,r8
8001c532:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001c536:	fe cc 0e de 	sub	r12,pc,3806
8001c53a:	f0 16 00 01 	mcall	r6[4]
				break;
8001c53e:	c2 88       	rjmp	8001c58e <ubx_read+0xcdc>
			}
			++(*ubx_validMessage);
8001c540:	ec f8 01 00 	ld.w	r8,r6[256]
8001c544:	70 08       	ld.w	r8,r8[0x0]
8001c546:	90 09       	ld.sh	r9,r8[0x0]
8001c548:	2f f9       	sub	r9,-1
8001c54a:	5c 89       	casts.h	r9
8001c54c:	b0 09       	st.h	r8[0x0],r9
			//dbg_print("Valid message");
			
			// swap message buffers, old message is discarded and becomes incoming buffer, new message become valid message (=old)
			temporaryMessageForSwaping = *ubx_currentMessage;
8001c54e:	ec f8 00 dc 	ld.w	r8,r6[220]
8001c552:	70 08       	ld.w	r8,r8[0x0]
8001c554:	70 08       	ld.w	r8,r8[0x0]
8001c556:	ef 48 ff fc 	st.w	r7[-4],r8
			*ubx_currentMessage = *ubx_lastMessage;
8001c55a:	ec f8 00 dc 	ld.w	r8,r6[220]
8001c55e:	70 08       	ld.w	r8,r8[0x0]
8001c560:	ec f9 00 e8 	ld.w	r9,r6[232]
8001c564:	72 09       	ld.w	r9,r9[0x0]
8001c566:	72 09       	ld.w	r9,r9[0x0]
8001c568:	91 09       	st.w	r8[0x0],r9
			*ubx_lastMessage = temporaryMessageForSwaping;
8001c56a:	ec f8 00 e8 	ld.w	r8,r6[232]
8001c56e:	70 08       	ld.w	r8,r8[0x0]
8001c570:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c574:	91 09       	st.w	r8[0x0],r9
			
			if (ubx_process_data())
8001c576:	f0 16 02 16 	mcall	r6[2136]
8001c57a:	18 98       	mov	r8,r12
8001c57c:	58 08       	cp.w	r8,0
8001c57e:	c0 80       	breq	8001c58e <ubx_read+0xcdc>
			{
				msg_ok = true;
8001c580:	30 18       	mov	r8,1
8001c582:	ef 68 ff fb 	st.b	r7[-5],r8
8001c586:	c0 48       	rjmp	8001c58e <ubx_read+0xcdc>
			
			if (payload_counter == payload_length)
			{
				step++;
			}
			break;
8001c588:	d7 03       	nop
8001c58a:	c0 28       	rjmp	8001c58e <ubx_read+0xcdc>
				dbg_print_num(msg_id,16);
				dbg_print("\n");
				step = 0;
				goto reset;
			}
			break;
8001c58c:	d7 03       	nop
	bool msg_ok = false;
	//bool new_message = false;
	
	unsigned char * temporaryMessageForSwaping;
	
	while(buffer_bytes_available(&(centralData->gps_buffer)))
8001c58e:	ec f8 00 00 	ld.w	r8,r6[0]
8001c592:	70 08       	ld.w	r8,r8[0x0]
8001c594:	f0 c8 f9 e4 	sub	r8,r8,-1564
8001c598:	10 9c       	mov	r12,r8
8001c59a:	f0 16 00 2e 	mcall	r6[184]
8001c59e:	18 98       	mov	r8,r12
8001c5a0:	58 08       	cp.w	r8,0
8001c5a2:	fe 91 f9 94 	brne	8001b8ca <ubx_read+0x18>
				msg_ok = true;
			}
		}
		
	}
	return msg_ok;
8001c5a6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
8001c5aa:	10 9c       	mov	r12,r8
8001c5ac:	2f ed       	sub	sp,-8
8001c5ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c5b2:	00 00       	add	r0,r0
8001c5b4:	80 01       	ld.sh	r1,r0[0x0]
8001c5b6:	b7 42       	asr	r2,0x16
8001c5b8:	4d 53       	lddpc	r3,8001c70c <ubx_read+0xe5a>
8001c5ba:	47 5f       	lddsp	pc,sp[0x1d4]
8001c5bc:	4d 4f       	lddpc	pc,8001c70c <ubx_read+0xe5a>
8001c5be:	4e 20       	lddpc	r0,8001c744 <ubx_read+0xe92>
8001c5c0:	47 50       	lddsp	r0,sp[0x1d4]
8001c5c2:	53 20       	stdsp	sp[0xc8],r0
8001c5c4:	61 77       	ld.w	r7,r0[0x5c]
8001c5c6:	61 6b       	ld.w	r11,r0[0x58]
8001c5c8:	65 0a       	ld.w	r10,r2[0x40]
8001c5ca:	00 00       	add	r0,r0
8001c5cc:	4d 53       	lddpc	r3,8001c720 <ubx_read+0xe6e>
8001c5ce:	47 5f       	lddsp	pc,sp[0x1d4]
8001c5d0:	54 49       	stdsp	sp[0x110],r9
8001c5d2:	4d 5f       	lddpc	pc,8001c724 <ubx_read+0xe72>
8001c5d4:	54 50       	stdsp	sp[0x114],r0
8001c5d6:	20 47       	sub	r7,4
8001c5d8:	50 53       	stdsp	sp[0x14],r3
8001c5da:	20 61       	sub	r1,6
8001c5dc:	77 61       	ld.w	r1,r11[0x58]
8001c5de:	6b 65       	ld.w	r5,r5[0x58]
8001c5e0:	0a 00       	add	r0,r5
8001c5e2:	00 00       	add	r0,r0
8001c5e4:	4d 53       	lddpc	r3,8001c738 <ubx_read+0xe86>
8001c5e6:	47 5f       	lddsp	pc,sp[0x1d4]
8001c5e8:	54 49       	stdsp	sp[0x110],r9
8001c5ea:	4d 5f       	lddpc	pc,8001c73c <ubx_read+0xe8a>
8001c5ec:	56 52       	stdsp	sp[0x194],r2
8001c5ee:	46 59       	lddsp	r9,sp[0x194]
8001c5f0:	00 00       	add	r0,r0
8001c5f2:	00 00       	add	r0,r0
8001c5f4:	20 69       	sub	r9,6
8001c5f6:	74 6f       	ld.w	pc,r10[0x18]
8001c5f8:	77 20       	ld.w	r0,r11[0x48]
8001c5fa:	3a 00       	mov	r0,-96
8001c5fc:	20 66       	sub	r6,6
8001c5fe:	72 61       	ld.w	r1,r9[0x18]
8001c600:	63 20       	ld.w	r0,r1[0x48]
8001c602:	3a 00       	mov	r0,-96
8001c604:	20 64       	sub	r4,6
8001c606:	65 6c       	ld.w	r12,r2[0x58]
8001c608:	74 61       	ld.w	r1,r10[0x18]
8001c60a:	4d 73       	lddpc	r3,8001c764 <ubx_read+0xeb2>
8001c60c:	20 3a       	sub	r10,3
8001c60e:	00 00       	add	r0,r0
8001c610:	20 64       	sub	r4,6
8001c612:	65 6c       	ld.w	r12,r2[0x58]
8001c614:	74 61       	ld.w	r1,r10[0x18]
8001c616:	4e 73       	lddpc	r3,8001c7b0 <ubx_read+0xefe>
8001c618:	20 3a       	sub	r10,3
8001c61a:	00 00       	add	r0,r0
8001c61c:	47 6f       	lddsp	pc,sp[0x1d8]
8001c61e:	74 20       	ld.w	r0,r10[0x8]
8001c620:	65 6e       	ld.w	lr,r2[0x58]
8001c622:	67 69       	ld.w	r9,r3[0x58]
8001c624:	6e 65       	ld.w	r5,r7[0x18]
8001c626:	20 73       	sub	r3,7
8001c628:	65 74       	ld.w	r4,r2[0x5c]
8001c62a:	74 69       	ld.w	r9,r10[0x18]
8001c62c:	6e 67       	ld.w	r7,r7[0x18]
8001c62e:	73 20       	ld.w	r0,r9[0x48]
8001c630:	00 00       	add	r0,r0
8001c632:	00 00       	add	r0,r0
8001c634:	53 65       	stdsp	sp[0xd8],r5
8001c636:	6e 64       	ld.w	r4,r7[0x18]
8001c638:	20 4e       	sub	lr,4
8001c63a:	61 76       	ld.w	r6,r0[0x5c]
8001c63c:	20 73       	sub	r3,7
8001c63e:	65 74       	ld.w	r4,r2[0x5c]
8001c640:	74 69       	ld.w	r9,r10[0x18]
8001c642:	6e 67       	ld.w	r7,r7[0x18]
8001c644:	73 00       	ld.w	r0,r9[0x40]
8001c646:	00 00       	add	r0,r0
8001c648:	4e 6f       	lddpc	pc,8001c7e0 <ubx_read+0xf2e>
8001c64a:	20 65       	sub	r5,6
8001c64c:	6e 67       	ld.w	r7,r7[0x18]
8001c64e:	69 6e       	ld.w	lr,r4[0x58]
8001c650:	65 20       	ld.w	r0,r2[0x48]
8001c652:	73 65       	ld.w	r5,r9[0x58]
8001c654:	74 74       	ld.w	r4,r10[0x1c]
8001c656:	69 6e       	ld.w	lr,r4[0x58]
8001c658:	67 73       	ld.w	r3,r3[0x5c]
8001c65a:	20 72       	sub	r2,7
8001c65c:	65 63       	ld.w	r3,r2[0x58]
8001c65e:	65 69       	ld.w	r9,r2[0x58]
8001c660:	76 65       	ld.w	r5,r11[0x18]
8001c662:	64 20       	ld.w	r0,r2[0x8]
8001c664:	00 00       	add	r0,r0
8001c666:	00 00       	add	r0,r0
8001c668:	4d 65       	lddpc	r5,8001c7c0 <ubx_read+0xf0e>
8001c66a:	73 73       	ld.w	r3,r9[0x5c]
8001c66c:	61 67       	ld.w	r7,r0[0x58]
8001c66e:	65 20       	ld.w	r0,r2[0x48]
8001c670:	43 46       	lddsp	r6,sp[0xd0]
8001c672:	47 20       	lddsp	r0,sp[0x1c8]
8001c674:	52 61       	stdsp	sp[0x98],r1
8001c676:	74 65       	ld.w	r5,r10[0x18]
8001c678:	20 30       	sub	r0,3
8001c67a:	78 00       	ld.w	r0,r12[0x0]
8001c67c:	55 6e       	stdsp	sp[0x158],lr
8001c67e:	65 78       	ld.w	r8,r2[0x5c]
8001c680:	70 65       	ld.w	r5,r8[0x18]
8001c682:	63 74       	ld.w	r4,r1[0x5c]
8001c684:	65 64       	ld.w	r4,r2[0x58]
8001c686:	20 6d       	sub	sp,24
8001c688:	65 73       	ld.w	r3,r2[0x5c]
8001c68a:	73 61       	ld.w	r1,r9[0x58]
8001c68c:	67 65       	ld.w	r5,r3[0x58]
8001c68e:	20 30       	sub	r0,3
8001c690:	78 00       	ld.w	r0,r12[0x0]
8001c692:	00 00       	add	r0,r0
8001c694:	30 32       	mov	r2,3
8001c696:	78 20       	ld.w	r0,r12[0x8]
8001c698:	30 78       	mov	r8,7
8001c69a:	00 00       	add	r0,r0
8001c69c:	30 32       	mov	r2,3
8001c69e:	78 0a       	ld.w	r10,r12[0x0]
8001c6a0:	00 00       	add	r0,r0
8001c6a2:	00 00       	add	r0,r0
8001c6a4:	44 69       	lddsp	r9,sp[0x118]
8001c6a6:	73 61       	ld.w	r1,r9[0x58]
8001c6a8:	62 6c       	ld.w	r12,r1[0x18]
8001c6aa:	69 6e       	ld.w	lr,r4[0x58]
8001c6ac:	67 20       	ld.w	r0,r3[0x48]
8001c6ae:	6d 65       	ld.w	r5,r6[0x58]
8001c6b0:	73 73       	ld.w	r3,r9[0x5c]
8001c6b2:	61 67       	ld.w	r7,r0[0x58]
8001c6b4:	65 20       	ld.w	r0,r2[0x48]
8001c6b6:	30 78       	mov	r8,7
8001c6b8:	00 00       	add	r0,r0
8001c6ba:	00 00       	add	r0,r0
8001c6bc:	4d 53       	lddpc	r3,8001c810 <ubx_read+0xf5e>
8001c6be:	47 5f       	lddsp	pc,sp[0x1d4]
8001c6c0:	4e 41       	lddpc	r1,8001c850 <ubx_read+0xf9e>
8001c6c2:	56 5f       	stdsp	sp[0x194],pc
8001c6c4:	50 4f       	stdsp	sp[0x10],pc
8001c6c6:	53 4c       	stdsp	sp[0xd0],r12
8001c6c8:	4c 48       	lddpc	r8,8001c7d8 <ubx_read+0xf26>
8001c6ca:	00 00       	add	r0,r0
8001c6cc:	20 6c       	sub	r12,6
8001c6ce:	6f 6e       	ld.w	lr,r7[0x58]
8001c6d0:	67 69       	ld.w	r9,r3[0x58]
8001c6d2:	74 75       	ld.w	r5,r10[0x1c]
8001c6d4:	64 65       	ld.w	r5,r2[0x18]
8001c6d6:	20 3a       	sub	r10,3
8001c6d8:	00 00       	add	r0,r0
8001c6da:	00 00       	add	r0,r0
8001c6dc:	20 6c       	sub	r12,6
8001c6de:	61 74       	ld.w	r4,r0[0x5c]
8001c6e0:	69 74       	ld.w	r4,r4[0x5c]
8001c6e2:	75 64       	ld.w	r4,r10[0x58]
8001c6e4:	65 20       	ld.w	r0,r2[0x48]
8001c6e6:	3a 00       	mov	r0,-96
8001c6e8:	20 61       	sub	r1,6
8001c6ea:	6c 74       	ld.w	r4,r6[0x1c]
8001c6ec:	5f 65       	srmi	r5
8001c6ee:	6c 6c       	ld.w	r12,r6[0x18]
8001c6f0:	69 70       	ld.w	r0,r4[0x5c]
8001c6f2:	73 20       	ld.w	r0,r9[0x48]
8001c6f4:	3a 00       	mov	r0,-96
8001c6f6:	00 00       	add	r0,r0
8001c6f8:	20 61       	sub	r1,6
8001c6fa:	6c 74       	ld.w	r4,r6[0x1c]
8001c6fc:	5f 6d       	srmi	sp
8001c6fe:	73 6c       	ld.w	r12,r9[0x58]
8001c700:	20 3a       	sub	r10,3
8001c702:	00 00       	add	r0,r0
8001c704:	20 68       	sub	r8,6
8001c706:	6f 72       	ld.w	r2,r7[0x5c]
8001c708:	7a 5f       	ld.w	pc,sp[0x14]
8001c70a:	61 63       	ld.w	r3,r0[0x58]
8001c70c:	63 20       	ld.w	r0,r1[0x48]
8001c70e:	3a 00       	mov	r0,-96
8001c710:	20 76       	sub	r6,7
8001c712:	65 72       	ld.w	r2,r2[0x5c]
8001c714:	74 5f       	ld.w	pc,r10[0x14]
8001c716:	61 63       	ld.w	r3,r0[0x58]
8001c718:	63 20       	ld.w	r0,r1[0x48]
8001c71a:	3a 00       	mov	r0,-96
8001c71c:	4d 53       	lddpc	r3,8001c870 <ubx_read+0xfbe>
8001c71e:	47 5f       	lddsp	pc,sp[0x1d4]
8001c720:	53 54       	stdsp	sp[0xd4],r4
8001c722:	41 54       	lddsp	r4,sp[0x54]
8001c724:	55 53       	stdsp	sp[0x154],r3
8001c726:	20 66       	sub	r6,6
8001c728:	69 78       	ld.w	r8,r4[0x5c]
8001c72a:	5f 74       	srpl	r4
8001c72c:	79 70       	ld.w	r0,r12[0x5c]
8001c72e:	65 20       	ld.w	r0,r2[0x48]
8001c730:	3d 20       	mov	r0,-46
8001c732:	30 78       	mov	r8,7
8001c734:	00 00       	add	r0,r0
8001c736:	00 00       	add	r0,r0
8001c738:	2c 20       	sub	r0,-62
8001c73a:	75 70       	ld.w	r0,r10[0x5c]
8001c73c:	74 69       	ld.w	r9,r10[0x18]
8001c73e:	6d 65       	ld.w	r5,r6[0x58]
8001c740:	20 3d       	sub	sp,12
8001c742:	00 00       	add	r0,r0
8001c744:	4d 53       	lddpc	r3,8001c898 <ubx_process_data+0xe>
8001c746:	47 5f       	lddsp	pc,sp[0x1d4]
8001c748:	53 4f       	stdsp	sp[0xd0],pc
8001c74a:	4c 20       	lddpc	r0,8001c850 <ubx_read+0xf9e>
8001c74c:	00 00       	add	r0,r0
8001c74e:	00 00       	add	r0,r0
8001c750:	69 74       	ld.w	r4,r4[0x5c]
8001c752:	6f 77       	ld.w	r7,r7[0x5c]
8001c754:	20 3a       	sub	r10,3
8001c756:	00 00       	add	r0,r0
8001c758:	20 77       	sub	r7,7
8001c75a:	65 65       	ld.w	r5,r2[0x58]
8001c75c:	6b 20       	ld.w	r0,r5[0x48]
8001c75e:	3a 00       	mov	r0,-96
8001c760:	20 66       	sub	r6,6
8001c762:	69 78       	ld.w	r8,r4[0x5c]
8001c764:	5f 74       	srpl	r4
8001c766:	79 70       	ld.w	r0,r12[0x5c]
8001c768:	65 20       	ld.w	r0,r2[0x48]
8001c76a:	3d 20       	mov	r0,-46
8001c76c:	30 78       	mov	r8,7
8001c76e:	30 00       	mov	r0,0
8001c770:	20 70       	sub	r0,7
8001c772:	6f 73       	ld.w	r3,r7[0x5c]
8001c774:	5f 61       	srmi	r1
8001c776:	63 63       	ld.w	r3,r1[0x58]
8001c778:	5f 33       	srlo	r3
8001c77a:	64 20       	ld.w	r0,r2[0x8]
8001c77c:	3a 00       	mov	r0,-96
8001c77e:	00 00       	add	r0,r0
8001c780:	20 65       	sub	r5,6
8001c782:	63 65       	ld.w	r5,r1[0x58]
8001c784:	66 78       	ld.w	r8,r3[0x1c]
8001c786:	20 3a       	sub	r10,3
8001c788:	00 00       	add	r0,r0
8001c78a:	00 00       	add	r0,r0
8001c78c:	20 65       	sub	r5,6
8001c78e:	63 65       	ld.w	r5,r1[0x58]
8001c790:	66 79       	ld.w	r9,r3[0x1c]
8001c792:	20 3a       	sub	r10,3
8001c794:	00 00       	add	r0,r0
8001c796:	00 00       	add	r0,r0
8001c798:	20 65       	sub	r5,6
8001c79a:	63 65       	ld.w	r5,r1[0x58]
8001c79c:	66 7a       	ld.w	r10,r3[0x1c]
8001c79e:	20 3a       	sub	r10,3
8001c7a0:	00 00       	add	r0,r0
8001c7a2:	00 00       	add	r0,r0
8001c7a4:	20 70       	sub	r0,7
8001c7a6:	6f 73       	ld.w	r3,r7[0x5c]
8001c7a8:	5f 44       	srge	r4
8001c7aa:	4f 50       	lddpc	r0,8001c97c <ubx_process_data+0xf2>
8001c7ac:	20 3a       	sub	r10,3
8001c7ae:	00 00       	add	r0,r0
8001c7b0:	20 6e       	sub	lr,6
8001c7b2:	75 6d       	ld.w	sp,r10[0x58]
8001c7b4:	20 73       	sub	r3,7
8001c7b6:	61 74       	ld.w	r4,r0[0x5c]
8001c7b8:	20 3a       	sub	r10,3
8001c7ba:	00 00       	add	r0,r0
8001c7bc:	4d 53       	lddpc	r3,8001c910 <ubx_process_data+0x86>
8001c7be:	47 5f       	lddsp	pc,sp[0x1d4]
8001c7c0:	4e 41       	lddpc	r1,8001c950 <ubx_process_data+0xc6>
8001c7c2:	56 5f       	stdsp	sp[0x194],pc
8001c7c4:	56 45       	stdsp	sp[0x190],r5
8001c7c6:	4c 4e       	lddpc	lr,8001c8d4 <ubx_process_data+0x4a>
8001c7c8:	45 44       	lddsp	r4,sp[0x150]
8001c7ca:	20 00       	sub	r0,0
8001c7cc:	20 6e       	sub	lr,6
8001c7ce:	65 64       	ld.w	r4,r2[0x58]
8001c7d0:	5f 6e       	srmi	lr
8001c7d2:	6f 72       	ld.w	r2,r7[0x5c]
8001c7d4:	74 68       	ld.w	r8,r10[0x18]
8001c7d6:	20 3a       	sub	r10,3
8001c7d8:	00 00       	add	r0,r0
8001c7da:	00 00       	add	r0,r0
8001c7dc:	20 6e       	sub	lr,6
8001c7de:	65 64       	ld.w	r4,r2[0x58]
8001c7e0:	5f 65       	srmi	r5
8001c7e2:	61 73       	ld.w	r3,r0[0x5c]
8001c7e4:	74 20       	ld.w	r0,r10[0x8]
8001c7e6:	3a 00       	mov	r0,-96
8001c7e8:	20 6e       	sub	lr,6
8001c7ea:	65 64       	ld.w	r4,r2[0x58]
8001c7ec:	5f 64       	srmi	r4
8001c7ee:	6f 77       	ld.w	r7,r7[0x5c]
8001c7f0:	6e 20       	ld.w	r0,r7[0x8]
8001c7f2:	3a 00       	mov	r0,-96
8001c7f4:	20 73       	sub	r3,7
8001c7f6:	70 65       	ld.w	r5,r8[0x18]
8001c7f8:	65 64       	ld.w	r4,r2[0x58]
8001c7fa:	5f 33       	srlo	r3
8001c7fc:	64 20       	ld.w	r0,r2[0x8]
8001c7fe:	3a 00       	mov	r0,-96
8001c800:	20 68       	sub	r8,6
8001c802:	65 61       	ld.w	r1,r2[0x58]
8001c804:	64 69       	ld.w	r9,r2[0x18]
8001c806:	6e 67       	ld.w	r7,r7[0x18]
8001c808:	5f 32       	srlo	r2
8001c80a:	64 20       	ld.w	r0,r2[0x8]
8001c80c:	3a 00       	mov	r0,-96
8001c80e:	00 00       	add	r0,r0
8001c810:	20 73       	sub	r3,7
8001c812:	70 65       	ld.w	r5,r8[0x18]
8001c814:	65 64       	ld.w	r4,r2[0x58]
8001c816:	5f 61       	srmi	r1
8001c818:	63 63       	ld.w	r3,r1[0x58]
8001c81a:	75 72       	ld.w	r2,r10[0x5c]
8001c81c:	61 63       	ld.w	r3,r0[0x58]
8001c81e:	79 20       	ld.w	r0,r12[0x48]
8001c820:	3a 00       	mov	r0,-96
8001c822:	00 00       	add	r0,r0
8001c824:	20 68       	sub	r8,6
8001c826:	65 61       	ld.w	r1,r2[0x58]
8001c828:	64 69       	ld.w	r9,r2[0x18]
8001c82a:	6e 67       	ld.w	r7,r7[0x18]
8001c82c:	5f 61       	srmi	r1
8001c82e:	63 63       	ld.w	r3,r1[0x58]
8001c830:	75 72       	ld.w	r2,r10[0x5c]
8001c832:	61 63       	ld.w	r3,r0[0x58]
8001c834:	79 20       	ld.w	r0,r12[0x48]
8001c836:	3a 00       	mov	r0,-96
8001c838:	4d 53       	lddpc	r3,8001c98c <ubx_process_data+0x102>
8001c83a:	47 5f       	lddsp	pc,sp[0x1d4]
8001c83c:	4e 41       	lddpc	r1,8001c9cc <ubx_process_data+0x142>
8001c83e:	56 5f       	stdsp	sp[0x194],pc
8001c840:	53 56       	stdsp	sp[0xd4],r6
8001c842:	49 4e       	lddpc	lr,8001c890 <ubx_process_data+0x6>
8001c844:	46 4f       	lddsp	pc,sp[0x190]
8001c846:	2c 20       	sub	r0,-62
8001c848:	6e 75       	ld.w	r5,r7[0x1c]
8001c84a:	6d 43       	ld.w	r3,r6[0x50]
8001c84c:	68 61       	ld.w	r1,r4[0x18]
8001c84e:	6e 6e       	ld.w	lr,r7[0x18]
8001c850:	65 6c       	ld.w	r12,r2[0x58]
8001c852:	3a 00       	mov	r0,-96
8001c854:	55 6e       	stdsp	sp[0x158],lr
8001c856:	65 78       	ld.w	r8,r2[0x5c]
8001c858:	70 65       	ld.w	r5,r8[0x18]
8001c85a:	63 74       	ld.w	r4,r1[0x5c]
8001c85c:	65 64       	ld.w	r4,r2[0x58]
8001c85e:	20 4e       	sub	lr,4
8001c860:	41 56       	lddsp	r6,sp[0x54]
8001c862:	20 6d       	sub	sp,24
8001c864:	65 73       	ld.w	r3,r2[0x5c]
8001c866:	73 61       	ld.w	r1,r9[0x58]
8001c868:	67 65       	ld.w	r5,r3[0x58]
8001c86a:	20 30       	sub	r0,3
8001c86c:	78 00       	ld.w	r0,r12[0x0]
8001c86e:	00 00       	add	r0,r0
8001c870:	44 69       	lddsp	r9,sp[0x118]
8001c872:	73 61       	ld.w	r1,r9[0x58]
8001c874:	62 6c       	ld.w	r12,r1[0x18]
8001c876:	69 6e       	ld.w	lr,r4[0x58]
8001c878:	67 20       	ld.w	r0,r3[0x48]
8001c87a:	4e 41       	lddpc	r1,8001ca08 <ubx_process_data+0x17e>
8001c87c:	56 20       	stdsp	sp[0x188],r0
8001c87e:	6d 65       	ld.w	r5,r6[0x58]
8001c880:	73 73       	ld.w	r3,r9[0x5c]
8001c882:	61 67       	ld.w	r7,r0[0x58]
8001c884:	65 20       	ld.w	r0,r2[0x48]
8001c886:	30 78       	mov	r8,7
	...

8001c88a <ubx_process_data>:
Process the new received message, class by class
return true if new position and velocity messages are received, false otherwise
************************************************************************************
*/
bool ubx_process_data(void)
{
8001c88a:	eb cd 40 e0 	pushm	r5-r7,lr
8001c88e:	1a 97       	mov	r7,sp
8001c890:	20 ad       	sub	sp,40
8001c892:	fe f6 0a e6 	ld.w	r6,pc[2790]
8001c896:	1e 26       	rsub	r6,pc
	ubx_nav_velned *gpsVelned;
	ubx_nav_SVInfo *gpsSVInfo;
	
	//dbg_print("ubx_process_data\n");
	
	if (ubxclass == UBX_CLASS_ACK)
8001c898:	ec f8 00 60 	ld.w	r8,r6[96]
8001c89c:	11 89       	ld.ub	r9,r8[0x0]
8001c89e:	30 58       	mov	r8,5
8001c8a0:	f0 09 18 00 	cp.b	r9,r8
8001c8a4:	c0 f1       	brne	8001c8c2 <ubx_process_data+0x38>
	{
		dbg_print_num(msg_id,10);
8001c8a6:	ec f8 00 5c 	ld.w	r8,r6[92]
8001c8aa:	11 88       	ld.ub	r8,r8[0x0]
8001c8ac:	30 ab       	mov	r11,10
8001c8ae:	10 9c       	mov	r12,r8
8001c8b0:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8001c8b4:	fe cc 12 5c 	sub	r12,pc,4700
8001c8b8:	f0 16 00 01 	mcall	r6[4]
		return false;
8001c8bc:	30 08       	mov	r8,0
8001c8be:	e0 8f 05 58 	bral	8001d36e <ubx_process_data+0xae4>
	}
 	if (ubxclass == UBX_CLASS_MON)
8001c8c2:	ec f8 00 60 	ld.w	r8,r6[96]
8001c8c6:	11 89       	ld.ub	r9,r8[0x0]
8001c8c8:	30 a8       	mov	r8,10
8001c8ca:	f0 09 18 00 	cp.b	r9,r8
8001c8ce:	c1 11       	brne	8001c8f0 <ubx_process_data+0x66>
 	{
 		ubx_mon_rxr_struct *gpsRXR = ubx_GetMonRXR();
8001c8d0:	f0 16 02 1c 	mcall	r6[2160]
8001c8d4:	18 98       	mov	r8,r12
8001c8d6:	ef 48 ff ec 	st.w	r7[-20],r8
 		if (gpsRXR)
8001c8da:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001c8de:	58 08       	cp.w	r8,0
8001c8e0:	c0 50       	breq	8001c8ea <ubx_process_data+0x60>
 		{
 			dbg_print("MSG_MON GPS awake\n");
8001c8e2:	fe cc 03 2a 	sub	r12,pc,810
8001c8e6:	f0 16 00 01 	mcall	r6[4]
 		}
		 return false;
8001c8ea:	30 08       	mov	r8,0
8001c8ec:	e0 8f 05 41 	bral	8001d36e <ubx_process_data+0xae4>
 	}
	if (ubxclass == UBX_CLASS_TIM)
8001c8f0:	ec f8 00 60 	ld.w	r8,r6[96]
8001c8f4:	11 89       	ld.ub	r9,r8[0x0]
8001c8f6:	30 d8       	mov	r8,13
8001c8f8:	f0 09 18 00 	cp.b	r9,r8
8001c8fc:	e0 81 00 89 	brne	8001ca0e <ubx_process_data+0x184>
	{
		ubx_tim_tp *gpsTimTP = ubx_GetTimTP();
8001c900:	f0 16 01 52 	mcall	r6[1352]
8001c904:	18 98       	mov	r8,r12
8001c906:	ef 48 ff f0 	st.w	r7[-16],r8
		if (gpsTimTP)
8001c90a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001c90e:	58 08       	cp.w	r8,0
8001c910:	c2 40       	breq	8001c958 <ubx_process_data+0xce>
		{
			loopTimTp = ++loopTimTp % numSkippedMsg;
8001c912:	ec f8 02 18 	ld.w	r8,r6[536]
8001c916:	11 88       	ld.ub	r8,r8[0x0]
8001c918:	2f f8       	sub	r8,-1
8001c91a:	5c 58       	castu.b	r8
8001c91c:	ec f9 02 18 	ld.w	r9,r6[536]
8001c920:	b2 88       	st.b	r9[0x0],r8
8001c922:	ec f8 02 18 	ld.w	r8,r6[536]
8001c926:	11 88       	ld.ub	r8,r8[0x0]
8001c928:	ec f9 01 a4 	ld.w	r9,r6[420]
8001c92c:	13 89       	ld.ub	r9,r9[0x0]
8001c92e:	f0 09 0d 08 	divu	r8,r8,r9
8001c932:	12 98       	mov	r8,r9
8001c934:	5c 58       	castu.b	r8
8001c936:	ec f9 02 18 	ld.w	r9,r6[536]
8001c93a:	b2 88       	st.b	r9[0x0],r8
			if((printNavOnDebug)&&(loopTimTp == 0))
8001c93c:	ec f8 01 94 	ld.w	r8,r6[404]
8001c940:	11 88       	ld.ub	r8,r8[0x0]
8001c942:	58 08       	cp.w	r8,0
8001c944:	c0 a0       	breq	8001c958 <ubx_process_data+0xce>
8001c946:	ec f8 02 18 	ld.w	r8,r6[536]
8001c94a:	11 88       	ld.ub	r8,r8[0x0]
8001c94c:	58 08       	cp.w	r8,0
8001c94e:	c0 51       	brne	8001c958 <ubx_process_data+0xce>
			{
				dbg_print("MSG_TIM_TP GPS awake\n");
8001c950:	fe cc 03 84 	sub	r12,pc,900
8001c954:	f0 16 00 01 	mcall	r6[4]
			}
		}
		ubx_tim_vrfy *gpsTimVrfy = ubx_GetTimVRFY();
8001c958:	f0 16 02 1e 	mcall	r6[2168]
8001c95c:	18 98       	mov	r8,r12
8001c95e:	ef 48 ff f4 	st.w	r7[-12],r8
		if (gpsTimVrfy)
8001c962:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c966:	58 08       	cp.w	r8,0
8001c968:	c5 00       	breq	8001ca08 <ubx_process_data+0x17e>
		{
			loopTimVrfy = ++loopTimVrfy % numSkippedMsg;
8001c96a:	ec f8 01 cc 	ld.w	r8,r6[460]
8001c96e:	11 88       	ld.ub	r8,r8[0x0]
8001c970:	2f f8       	sub	r8,-1
8001c972:	5c 58       	castu.b	r8
8001c974:	ec f9 01 cc 	ld.w	r9,r6[460]
8001c978:	b2 88       	st.b	r9[0x0],r8
8001c97a:	ec f8 01 cc 	ld.w	r8,r6[460]
8001c97e:	11 88       	ld.ub	r8,r8[0x0]
8001c980:	ec f9 01 a4 	ld.w	r9,r6[420]
8001c984:	13 89       	ld.ub	r9,r9[0x0]
8001c986:	f0 09 0d 08 	divu	r8,r8,r9
8001c98a:	12 98       	mov	r8,r9
8001c98c:	5c 58       	castu.b	r8
8001c98e:	ec f9 01 cc 	ld.w	r9,r6[460]
8001c992:	b2 88       	st.b	r9[0x0],r8
			if((printNavOnDebug)&&(loopTimVrfy == 0))
8001c994:	ec f8 01 94 	ld.w	r8,r6[404]
8001c998:	11 88       	ld.ub	r8,r8[0x0]
8001c99a:	58 08       	cp.w	r8,0
8001c99c:	c3 60       	breq	8001ca08 <ubx_process_data+0x17e>
8001c99e:	ec f8 01 cc 	ld.w	r8,r6[460]
8001c9a2:	11 88       	ld.ub	r8,r8[0x0]
8001c9a4:	58 08       	cp.w	r8,0
8001c9a6:	c3 11       	brne	8001ca08 <ubx_process_data+0x17e>
			{
				dbg_print("MSG_TIM_VRFY");
8001c9a8:	fe cc 03 c4 	sub	r12,pc,964
8001c9ac:	f0 16 00 01 	mcall	r6[4]
				dbg_print(" itow :");
8001c9b0:	fe cc 03 bc 	sub	r12,pc,956
8001c9b4:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->itow,10);
8001c9b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c9bc:	70 48       	ld.w	r8,r8[0x10]
8001c9be:	30 ab       	mov	r11,10
8001c9c0:	10 9c       	mov	r12,r8
8001c9c2:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" frac :");
8001c9c6:	fe cc 03 ca 	sub	r12,pc,970
8001c9ca:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->frac,10);
8001c9ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c9d2:	70 38       	ld.w	r8,r8[0xc]
8001c9d4:	30 ab       	mov	r11,10
8001c9d6:	10 9c       	mov	r12,r8
8001c9d8:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" deltaMs :");
8001c9dc:	fe cc 03 d8 	sub	r12,pc,984
8001c9e0:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->deltaMs,10);
8001c9e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c9e8:	70 28       	ld.w	r8,r8[0x8]
8001c9ea:	30 ab       	mov	r11,10
8001c9ec:	10 9c       	mov	r12,r8
8001c9ee:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" deltaNs :");
8001c9f2:	fe cc 03 e2 	sub	r12,pc,994
8001c9f6:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->deltaNs,10);
8001c9fa:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c9fe:	70 18       	ld.w	r8,r8[0x4]
8001ca00:	30 ab       	mov	r11,10
8001ca02:	10 9c       	mov	r12,r8
8001ca04:	f0 16 00 04 	mcall	r6[16]
			}
			
		}
		return false;
8001ca08:	30 08       	mov	r8,0
8001ca0a:	e0 8f 04 b2 	bral	8001d36e <ubx_process_data+0xae4>
	}
	 
	if (ubxclass == UBX_CLASS_CFG && msg_id == MSG_CFG_NAV_SETTINGS)
8001ca0e:	ec f8 00 60 	ld.w	r8,r6[96]
8001ca12:	11 89       	ld.ub	r9,r8[0x0]
8001ca14:	30 68       	mov	r8,6
8001ca16:	f0 09 18 00 	cp.b	r9,r8
8001ca1a:	c5 b1       	brne	8001cad0 <ubx_process_data+0x246>
8001ca1c:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ca20:	11 89       	ld.ub	r9,r8[0x0]
8001ca22:	32 48       	mov	r8,36
8001ca24:	f0 09 18 00 	cp.b	r9,r8
8001ca28:	c5 41       	brne	8001cad0 <ubx_process_data+0x246>
	{
		ubx_cfg_nav_settings *gpsNavSettings = ubx_GetNavSettings();
8001ca2a:	f0 16 01 f5 	mcall	r6[2004]
8001ca2e:	18 98       	mov	r8,r12
8001ca30:	ef 48 ff f8 	st.w	r7[-8],r8
		- 5 Sea
		- 6 Airborne with <1g Acceleration
		- 7 Airborne with <2g Acceleration
		- 8 Airborne with <4g Acceleration
		*/
		if(gpsNavSettings)
8001ca34:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ca38:	58 08       	cp.w	r8,0
8001ca3a:	c1 20       	breq	8001ca5e <ubx_process_data+0x1d4>
		{
			
			dbg_print("Got engine settings ");
8001ca3c:	fe cc 04 20 	sub	r12,pc,1056
8001ca40:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(gpsNavSettings->dynModel,16);
8001ca44:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ca48:	f1 38 00 21 	ld.ub	r8,r8[33]
8001ca4c:	31 0b       	mov	r11,16
8001ca4e:	10 9c       	mov	r12,r8
8001ca50:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001ca54:	fe cc 13 fc 	sub	r12,pc,5116
8001ca58:	f0 16 00 01 	mcall	r6[4]
8001ca5c:	c3 78       	rjmp	8001caca <ubx_process_data+0x240>
		
		}else{
			if (engine_nav_setting != GPS_ENGINE_NONE && !gpsNavSettings)
8001ca5e:	ec f8 01 ec 	ld.w	r8,r6[492]
8001ca62:	70 08       	ld.w	r8,r8[0x0]
8001ca64:	5b f8       	cp.w	r8,-1
8001ca66:	c2 30       	breq	8001caac <ubx_process_data+0x222>
8001ca68:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ca6c:	58 08       	cp.w	r8,0
8001ca6e:	c1 f1       	brne	8001caac <ubx_process_data+0x222>
			{
				if(gpsNavSettings->dynModel != engine_nav_setting)
8001ca70:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ca74:	f1 38 00 21 	ld.ub	r8,r8[33]
8001ca78:	10 99       	mov	r9,r8
8001ca7a:	ec f8 01 ec 	ld.w	r8,r6[492]
8001ca7e:	70 08       	ld.w	r8,r8[0x0]
8001ca80:	10 39       	cp.w	r9,r8
8001ca82:	c1 50       	breq	8001caac <ubx_process_data+0x222>
				{
					nav_settings.dynModel = engine_nav_setting;
8001ca84:	ec f8 01 ec 	ld.w	r8,r6[492]
8001ca88:	70 08       	ld.w	r8,r8[0x0]
8001ca8a:	5c 58       	castu.b	r8
8001ca8c:	ec f9 03 b8 	ld.w	r9,r6[952]
8001ca90:	f3 68 00 21 	st.b	r9[33],r8
					dbg_print("Send Nav settings");
8001ca94:	fe cc 04 60 	sub	r12,pc,1120
8001ca98:	f0 16 00 01 	mcall	r6[4]
					ubx_send_message_nav_settings(UBX_CLASS_CFG,MSG_CFG_NAV_SETTINGS, &nav_settings,sizeof(nav_settings));
8001ca9c:	ec f8 03 b8 	ld.w	r8,r6[952]
8001caa0:	32 49       	mov	r9,36
8001caa2:	10 9a       	mov	r10,r8
8001caa4:	32 4b       	mov	r11,36
8001caa6:	30 6c       	mov	r12,6
8001caa8:	f0 16 01 03 	mcall	r6[1036]
				}				
			}
			dbg_print("No engine settings received ");
8001caac:	fe cc 04 64 	sub	r12,pc,1124
8001cab0:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(msg_id,16);
8001cab4:	ec f8 00 5c 	ld.w	r8,r6[92]
8001cab8:	11 88       	ld.ub	r8,r8[0x0]
8001caba:	31 0b       	mov	r11,16
8001cabc:	10 9c       	mov	r12,r8
8001cabe:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001cac2:	fe cc 14 6a 	sub	r12,pc,5226
8001cac6:	f0 16 00 01 	mcall	r6[4]
		}
		return false;
8001caca:	30 08       	mov	r8,0
8001cacc:	e0 8f 04 51 	bral	8001d36e <ubx_process_data+0xae4>
	}
	
	if (ubxclass == UBX_CLASS_CFG && msg_id == MSG_CFG_SET_RATE)
8001cad0:	ec f8 00 60 	ld.w	r8,r6[96]
8001cad4:	11 89       	ld.ub	r9,r8[0x0]
8001cad6:	30 68       	mov	r8,6
8001cad8:	f0 09 18 00 	cp.b	r9,r8
8001cadc:	c3 11       	brne	8001cb3e <ubx_process_data+0x2b4>
8001cade:	ec f8 00 5c 	ld.w	r8,r6[92]
8001cae2:	11 89       	ld.ub	r9,r8[0x0]
8001cae4:	30 18       	mov	r8,1
8001cae6:	f0 09 18 00 	cp.b	r9,r8
8001caea:	c2 a1       	brne	8001cb3e <ubx_process_data+0x2b4>
	{
		ubx_cfg_msg_rate *gpsMsgRate;
		gpsMsgRate = ubx_GetMsgRate();
8001caec:	f0 16 01 9b 	mcall	r6[1644]
8001caf0:	18 98       	mov	r8,r12
8001caf2:	ef 48 ff fc 	st.w	r7[-4],r8
		
		if (gpsMsgRate)
8001caf6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cafa:	58 08       	cp.w	r8,0
8001cafc:	c1 e0       	breq	8001cb38 <ubx_process_data+0x2ae>
		{
			dbg_print("Message CFG Rate 0x");
8001cafe:	fe cc 04 96 	sub	r12,pc,1174
8001cb02:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(gpsMsgRate->msg_class,16);
8001cb06:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cb0a:	11 a8       	ld.ub	r8,r8[0x2]
8001cb0c:	31 0b       	mov	r11,16
8001cb0e:	10 9c       	mov	r12,r8
8001cb10:	f0 16 00 04 	mcall	r6[16]
			dbg_print_num(gpsMsgRate->msg_id_rate,16);
8001cb14:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cb18:	11 98       	ld.ub	r8,r8[0x1]
8001cb1a:	31 0b       	mov	r11,16
8001cb1c:	10 9c       	mov	r12,r8
8001cb1e:	f0 16 00 04 	mcall	r6[16]
			dbg_print_num(gpsMsgRate->rate,10);
8001cb22:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cb26:	11 88       	ld.ub	r8,r8[0x0]
8001cb28:	30 ab       	mov	r11,10
8001cb2a:	10 9c       	mov	r12,r8
8001cb2c:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001cb30:	fe cc 14 d8 	sub	r12,pc,5336
8001cb34:	f0 16 00 01 	mcall	r6[4]
		}		
		return false;
8001cb38:	30 08       	mov	r8,0
8001cb3a:	e0 8f 04 1a 	bral	8001d36e <ubx_process_data+0xae4>
	}
	
	if (ubxclass != UBX_CLASS_NAV)
8001cb3e:	ec f8 00 60 	ld.w	r8,r6[96]
8001cb42:	11 89       	ld.ub	r9,r8[0x0]
8001cb44:	30 18       	mov	r8,1
8001cb46:	f0 09 18 00 	cp.b	r9,r8
8001cb4a:	c5 10       	breq	8001cbec <ubx_process_data+0x362>
	{
		dbg_print("Unexpected message 0x");
8001cb4c:	fe cc 04 d0 	sub	r12,pc,1232
8001cb50:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(ubxclass,16);
8001cb54:	ec f8 00 60 	ld.w	r8,r6[96]
8001cb58:	11 88       	ld.ub	r8,r8[0x0]
8001cb5a:	31 0b       	mov	r11,16
8001cb5c:	10 9c       	mov	r12,r8
8001cb5e:	f0 16 00 04 	mcall	r6[16]
		dbg_print("02x 0x");
8001cb62:	fe cc 04 ce 	sub	r12,pc,1230
8001cb66:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(msg_id,10);
8001cb6a:	ec f8 00 5c 	ld.w	r8,r6[92]
8001cb6e:	11 88       	ld.ub	r8,r8[0x0]
8001cb70:	30 ab       	mov	r11,10
8001cb72:	10 9c       	mov	r12,r8
8001cb74:	f0 16 00 04 	mcall	r6[16]
		dbg_print("02x\n");
8001cb78:	fe cc 04 dc 	sub	r12,pc,1244
8001cb7c:	f0 16 00 01 	mcall	r6[4]
		if (++disable_counter == 0)
8001cb80:	ec f8 01 a8 	ld.w	r8,r6[424]
8001cb84:	11 88       	ld.ub	r8,r8[0x0]
8001cb86:	2f f8       	sub	r8,-1
8001cb88:	5c 58       	castu.b	r8
8001cb8a:	ec f9 01 a8 	ld.w	r9,r6[424]
8001cb8e:	b2 88       	st.b	r9[0x0],r8
8001cb90:	ec f8 01 a8 	ld.w	r8,r6[424]
8001cb94:	11 88       	ld.ub	r8,r8[0x0]
8001cb96:	58 08       	cp.w	r8,0
8001cb98:	c2 71       	brne	8001cbe6 <ubx_process_data+0x35c>
			// disable future sends of this message id, but
			// only do this every 256 messages, as some
			// message types can't be disabled and we don't
			// want to get into an ack war
			
			dbg_print("Disabling message 0x");
8001cb9a:	fe cc 04 f6 	sub	r12,pc,1270
8001cb9e:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(ubxclass,16);
8001cba2:	ec f8 00 60 	ld.w	r8,r6[96]
8001cba6:	11 88       	ld.ub	r8,r8[0x0]
8001cba8:	31 0b       	mov	r11,16
8001cbaa:	10 9c       	mov	r12,r8
8001cbac:	f0 16 00 04 	mcall	r6[16]
			dbg_print("02x 0x");
8001cbb0:	fe cc 05 1c 	sub	r12,pc,1308
8001cbb4:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(msg_id,16);
8001cbb8:	ec f8 00 5c 	ld.w	r8,r6[92]
8001cbbc:	11 88       	ld.ub	r8,r8[0x0]
8001cbbe:	31 0b       	mov	r11,16
8001cbc0:	10 9c       	mov	r12,r8
8001cbc2:	f0 16 00 04 	mcall	r6[16]
			dbg_print("02x\n");
8001cbc6:	fe cc 05 2a 	sub	r12,pc,1322
8001cbca:	f0 16 00 01 	mcall	r6[4]
			ubx_configure_message_rate(ubxclass, msg_id, 0);
8001cbce:	ec f8 00 5c 	ld.w	r8,r6[92]
8001cbd2:	11 88       	ld.ub	r8,r8[0x0]
8001cbd4:	10 99       	mov	r9,r8
8001cbd6:	ec f8 00 60 	ld.w	r8,r6[96]
8001cbda:	11 88       	ld.ub	r8,r8[0x0]
8001cbdc:	30 0a       	mov	r10,0
8001cbde:	12 9b       	mov	r11,r9
8001cbe0:	10 9c       	mov	r12,r8
8001cbe2:	f0 16 00 5f 	mcall	r6[380]
		}
		return false;
8001cbe6:	30 08       	mov	r8,0
8001cbe8:	e0 8f 03 c3 	bral	8001d36e <ubx_process_data+0xae4>
	}
	
	// Class NAV:
	switch (msg_id)
8001cbec:	ec f8 00 5c 	ld.w	r8,r6[92]
8001cbf0:	11 88       	ld.ub	r8,r8[0x0]
8001cbf2:	58 68       	cp.w	r8,6
8001cbf4:	e0 80 01 6f 	breq	8001ced2 <ubx_process_data+0x648>
8001cbf8:	e0 89 00 09 	brgt	8001cc0a <ubx_process_data+0x380>
8001cbfc:	58 28       	cp.w	r8,2
8001cbfe:	c0 f0       	breq	8001cc1c <ubx_process_data+0x392>
8001cc00:	58 38       	cp.w	r8,3
8001cc02:	e0 80 01 01 	breq	8001ce04 <ubx_process_data+0x57a>
8001cc06:	e0 8f 03 63 	bral	8001d2cc <ubx_process_data+0xa42>
8001cc0a:	59 28       	cp.w	r8,18
8001cc0c:	e0 80 02 2c 	breq	8001d064 <ubx_process_data+0x7da>
8001cc10:	e0 48 00 30 	cp.w	r8,48
8001cc14:	e0 80 03 3e 	breq	8001d290 <ubx_process_data+0xa06>
8001cc18:	e0 8f 03 5a 	bral	8001d2cc <ubx_process_data+0xa42>
	{
	case MSG_NAV_POSLLH:
		gpsPosllh = ubx_GetPosllh();
8001cc1c:	f0 16 01 7c 	mcall	r6[1520]
8001cc20:	18 98       	mov	r8,r12
8001cc22:	ef 48 ff d8 	st.w	r7[-40],r8
		if (gpsPosllh)
8001cc26:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001cc2a:	58 08       	cp.w	r8,0
8001cc2c:	e0 80 03 85 	breq	8001d336 <ubx_process_data+0xaac>
		{
			loopPosllh = ++loopPosllh % numSkippedMsg;
8001cc30:	ec f8 02 04 	ld.w	r8,r6[516]
8001cc34:	11 88       	ld.ub	r8,r8[0x0]
8001cc36:	2f f8       	sub	r8,-1
8001cc38:	5c 58       	castu.b	r8
8001cc3a:	ec f9 02 04 	ld.w	r9,r6[516]
8001cc3e:	b2 88       	st.b	r9[0x0],r8
8001cc40:	ec f8 02 04 	ld.w	r8,r6[516]
8001cc44:	11 88       	ld.ub	r8,r8[0x0]
8001cc46:	ec f9 01 a4 	ld.w	r9,r6[420]
8001cc4a:	13 89       	ld.ub	r9,r9[0x0]
8001cc4c:	f0 09 0d 08 	divu	r8,r8,r9
8001cc50:	12 98       	mov	r8,r9
8001cc52:	5c 58       	castu.b	r8
8001cc54:	ec f9 02 04 	ld.w	r9,r6[516]
8001cc58:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopPosllh == 0))
8001cc5a:	ec f8 01 94 	ld.w	r8,r6[404]
8001cc5e:	11 88       	ld.ub	r8,r8[0x0]
8001cc60:	58 08       	cp.w	r8,0
8001cc62:	c5 b0       	breq	8001cd18 <ubx_process_data+0x48e>
8001cc64:	ec f8 02 04 	ld.w	r8,r6[516]
8001cc68:	11 88       	ld.ub	r8,r8[0x0]
8001cc6a:	58 08       	cp.w	r8,0
8001cc6c:	c5 61       	brne	8001cd18 <ubx_process_data+0x48e>
			{
				dbg_print("MSG_NAV_POSLLH");
8001cc6e:	fe cc 05 b2 	sub	r12,pc,1458
8001cc72:	f0 16 00 01 	mcall	r6[4]
				dbg_print(" itow :");
8001cc76:	fe cc 06 82 	sub	r12,pc,1666
8001cc7a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->itow,10);
8001cc7e:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001cc82:	70 68       	ld.w	r8,r8[0x18]
8001cc84:	30 ab       	mov	r11,10
8001cc86:	10 9c       	mov	r12,r8
8001cc88:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" longitude :");
8001cc8c:	fe cc 05 c0 	sub	r12,pc,1472
8001cc90:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->longitude,10);
8001cc94:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001cc98:	70 58       	ld.w	r8,r8[0x14]
8001cc9a:	30 ab       	mov	r11,10
8001cc9c:	10 9c       	mov	r12,r8
8001cc9e:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" latitude :");
8001cca2:	fe cc 05 c6 	sub	r12,pc,1478
8001cca6:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->latitude,10);
8001ccaa:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ccae:	70 48       	ld.w	r8,r8[0x10]
8001ccb0:	30 ab       	mov	r11,10
8001ccb2:	10 9c       	mov	r12,r8
8001ccb4:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" alt_ellips :");
8001ccb8:	fe cc 05 d0 	sub	r12,pc,1488
8001ccbc:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->altitude_ellipsoid,10);
8001ccc0:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ccc4:	70 38       	ld.w	r8,r8[0xc]
8001ccc6:	30 ab       	mov	r11,10
8001ccc8:	10 9c       	mov	r12,r8
8001ccca:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" alt_msl :");
8001ccce:	fe cc 05 d6 	sub	r12,pc,1494
8001ccd2:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->altitude_msl,10);
8001ccd6:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ccda:	70 28       	ld.w	r8,r8[0x8]
8001ccdc:	30 ab       	mov	r11,10
8001ccde:	10 9c       	mov	r12,r8
8001cce0:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" horz_acc :");
8001cce4:	fe cc 05 e0 	sub	r12,pc,1504
8001cce8:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->horizontal_accuracy,10);
8001ccec:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ccf0:	70 18       	ld.w	r8,r8[0x4]
8001ccf2:	30 ab       	mov	r11,10
8001ccf4:	10 9c       	mov	r12,r8
8001ccf6:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" vert_acc :");
8001ccfa:	fe cc 05 ea 	sub	r12,pc,1514
8001ccfe:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->vertical_accuracy,10);
8001cd02:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001cd06:	70 08       	ld.w	r8,r8[0x0]
8001cd08:	30 ab       	mov	r11,10
8001cd0a:	10 9c       	mov	r12,r8
8001cd0c:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001cd10:	fe cc 16 b8 	sub	r12,pc,5816
8001cd14:	f0 16 00 01 	mcall	r6[4]
			}
			
			centralData->GPS_data.timegps = gpsPosllh->itow;
8001cd18:	ec f8 00 00 	ld.w	r8,r6[0]
8001cd1c:	70 08       	ld.w	r8,r8[0x0]
8001cd1e:	ee f9 ff d8 	ld.w	r9,r7[-40]
8001cd22:	72 69       	ld.w	r9,r9[0x18]
8001cd24:	f1 49 07 98 	st.w	r8[1944],r9
			centralData->GPS_data.longitude = gpsPosllh->longitude / 10000000.0;
8001cd28:	ec f8 00 00 	ld.w	r8,r6[0]
8001cd2c:	70 05       	ld.w	r5,r8[0x0]
8001cd2e:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001cd32:	70 58       	ld.w	r8,r8[0x14]
8001cd34:	10 9c       	mov	r12,r8
8001cd36:	f0 16 00 1a 	mcall	r6[104]
8001cd3a:	30 08       	mov	r8,0
8001cd3c:	e0 69 12 d0 	mov	r9,4816
8001cd40:	ea 19 41 63 	orh	r9,0x4163
8001cd44:	f0 16 00 0c 	mcall	r6[48]
8001cd48:	14 98       	mov	r8,r10
8001cd4a:	16 99       	mov	r9,r11
8001cd4c:	ea e9 07 58 	st.d	r5[1880],r8
			centralData->GPS_data.latitude = gpsPosllh->latitude / 10000000.0;
8001cd50:	ec f8 00 00 	ld.w	r8,r6[0]
8001cd54:	70 05       	ld.w	r5,r8[0x0]
8001cd56:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001cd5a:	70 48       	ld.w	r8,r8[0x10]
8001cd5c:	10 9c       	mov	r12,r8
8001cd5e:	f0 16 00 1a 	mcall	r6[104]
8001cd62:	30 08       	mov	r8,0
8001cd64:	e0 69 12 d0 	mov	r9,4816
8001cd68:	ea 19 41 63 	orh	r9,0x4163
8001cd6c:	f0 16 00 0c 	mcall	r6[48]
8001cd70:	14 98       	mov	r8,r10
8001cd72:	16 99       	mov	r9,r11
8001cd74:	ea e9 07 50 	st.d	r5[1872],r8
			centralData->GPS_data.alt_elips = ((float)gpsPosllh->altitude_ellipsoid) / 1000.0;
8001cd78:	ec f8 00 00 	ld.w	r8,r6[0]
8001cd7c:	70 05       	ld.w	r5,r8[0x0]
8001cd7e:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001cd82:	70 38       	ld.w	r8,r8[0xc]
8001cd84:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001cd88:	fc 1b 44 7a 	movh	r11,0x447a
8001cd8c:	10 9c       	mov	r12,r8
8001cd8e:	f0 16 00 08 	mcall	r6[32]
8001cd92:	18 98       	mov	r8,r12
8001cd94:	eb 48 07 64 	st.w	r5[1892],r8
			centralData->GPS_data.altitude = ((float)gpsPosllh->altitude_msl) / 1000.0;
8001cd98:	ec f8 00 00 	ld.w	r8,r6[0]
8001cd9c:	70 05       	ld.w	r5,r8[0x0]
8001cd9e:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001cda2:	70 28       	ld.w	r8,r8[0x8]
8001cda4:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001cda8:	fc 1b 44 7a 	movh	r11,0x447a
8001cdac:	10 9c       	mov	r12,r8
8001cdae:	f0 16 00 08 	mcall	r6[32]
8001cdb2:	18 98       	mov	r8,r12
8001cdb4:	eb 48 07 60 	st.w	r5[1888],r8
			centralData->GPS_data.horizontalAccuracy = ((float)gpsPosllh->horizontal_accuracy) / 1000.0;
8001cdb8:	ec f8 00 00 	ld.w	r8,r6[0]
8001cdbc:	70 05       	ld.w	r5,r8[0x0]
8001cdbe:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001cdc2:	70 18       	ld.w	r8,r8[0x4]
8001cdc4:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001cdc8:	fc 1b 44 7a 	movh	r11,0x447a
8001cdcc:	10 9c       	mov	r12,r8
8001cdce:	f0 16 00 08 	mcall	r6[32]
8001cdd2:	18 98       	mov	r8,r12
8001cdd4:	eb 48 07 80 	st.w	r5[1920],r8
			centralData->GPS_data.verticalAccuracy = ((float)gpsPosllh->vertical_accuracy) / 1000.0;
8001cdd8:	ec f8 00 00 	ld.w	r8,r6[0]
8001cddc:	70 05       	ld.w	r5,r8[0x0]
8001cdde:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001cde2:	70 08       	ld.w	r8,r8[0x0]
8001cde4:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001cde8:	fc 1b 44 7a 	movh	r11,0x447a
8001cdec:	10 9c       	mov	r12,r8
8001cdee:	f0 16 00 08 	mcall	r6[32]
8001cdf2:	18 98       	mov	r8,r12
8001cdf4:	eb 48 07 84 	st.w	r5[1924],r8
			//centralData->GPS_data.status = next_fix;
			
			new_position = true;
8001cdf8:	ec f9 02 64 	ld.w	r9,r6[612]
8001cdfc:	30 18       	mov	r8,1
8001cdfe:	b2 88       	st.b	r9[0x0],r8
		}
		break;
8001ce00:	e0 8f 02 a2 	bral	8001d344 <ubx_process_data+0xaba>
	case MSG_NAV_STATUS:
		gpsStatus = ubx_GetStatus();
8001ce04:	f0 16 01 56 	mcall	r6[1368]
8001ce08:	18 98       	mov	r8,r12
8001ce0a:	ef 48 ff dc 	st.w	r7[-36],r8
		
		if (gpsStatus)
8001ce0e:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001ce12:	58 08       	cp.w	r8,0
8001ce14:	e0 80 02 93 	breq	8001d33a <ubx_process_data+0xab0>
		{
			loopStatus = ++loopStatus % numSkippedMsg;
8001ce18:	ec f8 01 e0 	ld.w	r8,r6[480]
8001ce1c:	11 88       	ld.ub	r8,r8[0x0]
8001ce1e:	2f f8       	sub	r8,-1
8001ce20:	5c 58       	castu.b	r8
8001ce22:	ec f9 01 e0 	ld.w	r9,r6[480]
8001ce26:	b2 88       	st.b	r9[0x0],r8
8001ce28:	ec f8 01 e0 	ld.w	r8,r6[480]
8001ce2c:	11 88       	ld.ub	r8,r8[0x0]
8001ce2e:	ec f9 01 a4 	ld.w	r9,r6[420]
8001ce32:	13 89       	ld.ub	r9,r9[0x0]
8001ce34:	f0 09 0d 08 	divu	r8,r8,r9
8001ce38:	12 98       	mov	r8,r9
8001ce3a:	5c 58       	castu.b	r8
8001ce3c:	ec f9 01 e0 	ld.w	r9,r6[480]
8001ce40:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopStatus == 0))
8001ce42:	ec f8 01 94 	ld.w	r8,r6[404]
8001ce46:	11 88       	ld.ub	r8,r8[0x0]
8001ce48:	58 08       	cp.w	r8,0
8001ce4a:	c2 10       	breq	8001ce8c <ubx_process_data+0x602>
8001ce4c:	ec f8 01 e0 	ld.w	r8,r6[480]
8001ce50:	11 88       	ld.ub	r8,r8[0x0]
8001ce52:	58 08       	cp.w	r8,0
8001ce54:	c1 c1       	brne	8001ce8c <ubx_process_data+0x602>
			{
				dbg_print("MSG_STATUS fix_type = 0x");
8001ce56:	fe cc 07 3a 	sub	r12,pc,1850
8001ce5a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsStatus->fix_type,16);
8001ce5e:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001ce62:	f1 38 00 0b 	ld.ub	r8,r8[11]
8001ce66:	31 0b       	mov	r11,16
8001ce68:	10 9c       	mov	r12,r8
8001ce6a:	f0 16 00 04 	mcall	r6[16]
//	 			dbg_print(" fix_status = 0x");
//	 			dbg_print_num(gpsStatus->fix_status,16);
				dbg_print(", uptime =");
8001ce6e:	fe cc 07 36 	sub	r12,pc,1846
8001ce72:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsStatus->uptime,10);
8001ce76:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001ce7a:	70 08       	ld.w	r8,r8[0x0]
8001ce7c:	30 ab       	mov	r11,10
8001ce7e:	10 9c       	mov	r12,r8
8001ce80:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001ce84:	fe cc 18 2c 	sub	r12,pc,6188
8001ce88:	f0 16 00 01 	mcall	r6[4]
			}		
		
			//next_fix = (gpsStatus->fix_status & NAV_STATUS_FIX_VALID) && (gpsStatus->fix_type == GPS_FIX_TYPE_3DFIX);
			next_fix = (gpsStatus->fix_type == GPS_FIX_TYPE_3DFIX);
8001ce8c:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001ce90:	f1 39 00 0b 	ld.ub	r9,r8[11]
8001ce94:	30 38       	mov	r8,3
8001ce96:	f0 09 18 00 	cp.b	r9,r8
8001ce9a:	5f 08       	sreq	r8
8001ce9c:	5c 58       	castu.b	r8
8001ce9e:	ec f9 01 f8 	ld.w	r9,r6[504]
8001cea2:	b2 88       	st.b	r9[0x0],r8
			if (!next_fix)
8001cea4:	ec f8 01 f8 	ld.w	r8,r6[504]
8001cea8:	11 88       	ld.ub	r8,r8[0x0]
8001ceaa:	ec 18 00 01 	eorl	r8,0x1
8001ceae:	5c 58       	castu.b	r8
8001ceb0:	c0 90       	breq	8001cec2 <ubx_process_data+0x638>
			{
				centralData->GPS_data.status = NO_FIX;
8001ceb2:	ec f8 00 00 	ld.w	r8,r6[0]
8001ceb6:	70 09       	ld.w	r9,r8[0x0]
8001ceb8:	30 18       	mov	r8,1
8001ceba:	f3 68 07 9c 	st.b	r9[1948],r8
			}else{
				centralData->GPS_data.status = GPS_OK;
			}
		}
		break;
8001cebe:	e0 8f 02 43 	bral	8001d344 <ubx_process_data+0xaba>
			next_fix = (gpsStatus->fix_type == GPS_FIX_TYPE_3DFIX);
			if (!next_fix)
			{
				centralData->GPS_data.status = NO_FIX;
			}else{
				centralData->GPS_data.status = GPS_OK;
8001cec2:	ec f8 00 00 	ld.w	r8,r6[0]
8001cec6:	70 09       	ld.w	r9,r8[0x0]
8001cec8:	30 28       	mov	r8,2
8001ceca:	f3 68 07 9c 	st.b	r9[1948],r8
			}
		}
		break;
8001cece:	e0 8f 02 3b 	bral	8001d344 <ubx_process_data+0xaba>
	case MSG_NAV_SOL:
		gpsSolution = ubx_GetSolution();
8001ced2:	f0 16 01 86 	mcall	r6[1560]
8001ced6:	18 98       	mov	r8,r12
8001ced8:	ef 48 ff e0 	st.w	r7[-32],r8
		
		if (gpsSolution)
8001cedc:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001cee0:	58 08       	cp.w	r8,0
8001cee2:	e0 80 02 2e 	breq	8001d33e <ubx_process_data+0xab4>
		{
			loopSolution = ++loopSolution % numSkippedMsg;
8001cee6:	ec f8 01 d8 	ld.w	r8,r6[472]
8001ceea:	11 88       	ld.ub	r8,r8[0x0]
8001ceec:	2f f8       	sub	r8,-1
8001ceee:	5c 58       	castu.b	r8
8001cef0:	ec f9 01 d8 	ld.w	r9,r6[472]
8001cef4:	b2 88       	st.b	r9[0x0],r8
8001cef6:	ec f8 01 d8 	ld.w	r8,r6[472]
8001cefa:	11 88       	ld.ub	r8,r8[0x0]
8001cefc:	ec f9 01 a4 	ld.w	r9,r6[420]
8001cf00:	13 89       	ld.ub	r9,r9[0x0]
8001cf02:	f0 09 0d 08 	divu	r8,r8,r9
8001cf06:	12 98       	mov	r8,r9
8001cf08:	5c 58       	castu.b	r8
8001cf0a:	ec f9 01 d8 	ld.w	r9,r6[472]
8001cf0e:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopSolution == 0))
8001cf10:	ec f8 01 94 	ld.w	r8,r6[404]
8001cf14:	11 88       	ld.ub	r8,r8[0x0]
8001cf16:	58 08       	cp.w	r8,0
8001cf18:	c7 40       	breq	8001d000 <ubx_process_data+0x776>
8001cf1a:	ec f8 01 d8 	ld.w	r8,r6[472]
8001cf1e:	11 88       	ld.ub	r8,r8[0x0]
8001cf20:	58 08       	cp.w	r8,0
8001cf22:	c6 f1       	brne	8001d000 <ubx_process_data+0x776>
			{
				dbg_print("MSG_SOL ");
8001cf24:	fe cc 07 e0 	sub	r12,pc,2016
8001cf28:	f0 16 00 01 	mcall	r6[4]
				dbg_print("itow :");
8001cf2c:	fe cc 07 dc 	sub	r12,pc,2012
8001cf30:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->itow,10);
8001cf34:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001cf38:	70 c8       	ld.w	r8,r8[0x30]
8001cf3a:	30 ab       	mov	r11,10
8001cf3c:	10 9c       	mov	r12,r8
8001cf3e:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" week :");
8001cf42:	fe cc 07 ea 	sub	r12,pc,2026
8001cf46:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->week,10);
8001cf4a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001cf4e:	f1 08 00 2a 	ld.sh	r8,r8[42]
8001cf52:	30 ab       	mov	r11,10
8001cf54:	10 9c       	mov	r12,r8
8001cf56:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" fix_type = 0x0");
8001cf5a:	fe cc 07 fa 	sub	r12,pc,2042
8001cf5e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->fix_type,16);
8001cf62:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001cf66:	f1 38 00 29 	ld.ub	r8,r8[41]
8001cf6a:	31 0b       	mov	r11,16
8001cf6c:	10 9c       	mov	r12,r8
8001cf6e:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" pos_acc_3d :");
8001cf72:	fe cc 08 02 	sub	r12,pc,2050
8001cf76:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->position_accuracy_3d,10);
8001cf7a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001cf7e:	70 68       	ld.w	r8,r8[0x18]
8001cf80:	30 ab       	mov	r11,10
8001cf82:	10 9c       	mov	r12,r8
8001cf84:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ecefx :");
8001cf88:	fe cc 08 08 	sub	r12,pc,2056
8001cf8c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->ecef_x,10);
8001cf90:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001cf94:	70 98       	ld.w	r8,r8[0x24]
8001cf96:	30 ab       	mov	r11,10
8001cf98:	10 9c       	mov	r12,r8
8001cf9a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ecefy :");
8001cf9e:	fe cc 08 12 	sub	r12,pc,2066
8001cfa2:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->ecef_y,10);
8001cfa6:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001cfaa:	70 88       	ld.w	r8,r8[0x20]
8001cfac:	30 ab       	mov	r11,10
8001cfae:	10 9c       	mov	r12,r8
8001cfb0:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ecefz :");
8001cfb4:	fe cc 08 1c 	sub	r12,pc,2076
8001cfb8:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->ecef_z,10);
8001cfbc:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001cfc0:	70 78       	ld.w	r8,r8[0x1c]
8001cfc2:	30 ab       	mov	r11,10
8001cfc4:	10 9c       	mov	r12,r8
8001cfc6:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" pos_DOP :");
8001cfca:	fe cc 08 26 	sub	r12,pc,2086
8001cfce:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->position_DOP,10);
8001cfd2:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001cfd6:	90 38       	ld.sh	r8,r8[0x6]
8001cfd8:	5c 78       	castu.h	r8
8001cfda:	30 ab       	mov	r11,10
8001cfdc:	10 9c       	mov	r12,r8
8001cfde:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" num sat :");
8001cfe2:	fe cc 08 32 	sub	r12,pc,2098
8001cfe6:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->satellites,10);
8001cfea:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001cfee:	11 c8       	ld.ub	r8,r8[0x4]
8001cff0:	30 ab       	mov	r11,10
8001cff2:	10 9c       	mov	r12,r8
8001cff4:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001cff8:	fe cc 19 a0 	sub	r12,pc,6560
8001cffc:	f0 16 00 01 	mcall	r6[4]
			}
			//next_fix = (gpsSolution->fix_status & NAV_STATUS_FIX_VALID) && (gpsSolution->fix_type == GPS_FIX_TYPE_3DFIX);
			next_fix = (gpsSolution->fix_type == GPS_FIX_TYPE_3DFIX);
8001d000:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001d004:	f1 39 00 29 	ld.ub	r9,r8[41]
8001d008:	30 38       	mov	r8,3
8001d00a:	f0 09 18 00 	cp.b	r9,r8
8001d00e:	5f 08       	sreq	r8
8001d010:	5c 58       	castu.b	r8
8001d012:	ec f9 01 f8 	ld.w	r9,r6[504]
8001d016:	b2 88       	st.b	r9[0x0],r8
			if (!next_fix)
8001d018:	ec f8 01 f8 	ld.w	r8,r6[504]
8001d01c:	11 88       	ld.ub	r8,r8[0x0]
8001d01e:	ec 18 00 01 	eorl	r8,0x1
8001d022:	5c 58       	castu.b	r8
8001d024:	c0 80       	breq	8001d034 <ubx_process_data+0x7aa>
			{
				centralData->GPS_data.status = NO_FIX;
8001d026:	ec f8 00 00 	ld.w	r8,r6[0]
8001d02a:	70 09       	ld.w	r9,r8[0x0]
8001d02c:	30 18       	mov	r8,1
8001d02e:	f3 68 07 9c 	st.b	r9[1948],r8
8001d032:	c0 78       	rjmp	8001d040 <ubx_process_data+0x7b6>
			}else{
				centralData->GPS_data.status = GPS_OK;
8001d034:	ec f8 00 00 	ld.w	r8,r6[0]
8001d038:	70 09       	ld.w	r9,r8[0x0]
8001d03a:	30 28       	mov	r8,2
8001d03c:	f3 68 07 9c 	st.b	r9[1948],r8
			}
		
			centralData->GPS_data.num_sats = gpsSolution->satellites;
8001d040:	ec f8 00 00 	ld.w	r8,r6[0]
8001d044:	70 09       	ld.w	r9,r8[0x0]
8001d046:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001d04a:	11 c8       	ld.ub	r8,r8[0x4]
8001d04c:	f3 68 07 90 	st.b	r9[1936],r8
			centralData->GPS_data.hdop = gpsSolution->position_DOP;
8001d050:	ec f8 00 00 	ld.w	r8,r6[0]
8001d054:	70 09       	ld.w	r9,r8[0x0]
8001d056:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001d05a:	90 38       	ld.sh	r8,r8[0x6]
8001d05c:	f3 58 07 92 	st.h	r9[1938],r8
		}
		break;
8001d060:	e0 8f 01 72 	bral	8001d344 <ubx_process_data+0xaba>
	case MSG_NAV_VELNED:
		gpsVelned = ubx_GetVelned();
8001d064:	f0 16 01 67 	mcall	r6[1436]
8001d068:	18 98       	mov	r8,r12
8001d06a:	ef 48 ff e4 	st.w	r7[-28],r8
		
		if (gpsVelned)
8001d06e:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d072:	58 08       	cp.w	r8,0
8001d074:	e0 80 01 67 	breq	8001d342 <ubx_process_data+0xab8>
		{
			loopVelned = ++loopVelned % numSkippedMsg;
8001d078:	ec f8 01 e4 	ld.w	r8,r6[484]
8001d07c:	11 88       	ld.ub	r8,r8[0x0]
8001d07e:	2f f8       	sub	r8,-1
8001d080:	5c 58       	castu.b	r8
8001d082:	ec f9 01 e4 	ld.w	r9,r6[484]
8001d086:	b2 88       	st.b	r9[0x0],r8
8001d088:	ec f8 01 e4 	ld.w	r8,r6[484]
8001d08c:	11 88       	ld.ub	r8,r8[0x0]
8001d08e:	ec f9 01 a4 	ld.w	r9,r6[420]
8001d092:	13 89       	ld.ub	r9,r9[0x0]
8001d094:	f0 09 0d 08 	divu	r8,r8,r9
8001d098:	12 98       	mov	r8,r9
8001d09a:	5c 58       	castu.b	r8
8001d09c:	ec f9 01 e4 	ld.w	r9,r6[484]
8001d0a0:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopVelned == 0))
8001d0a2:	ec f8 01 94 	ld.w	r8,r6[404]
8001d0a6:	11 88       	ld.ub	r8,r8[0x0]
8001d0a8:	58 08       	cp.w	r8,0
8001d0aa:	c6 60       	breq	8001d176 <ubx_process_data+0x8ec>
8001d0ac:	ec f8 01 e4 	ld.w	r8,r6[484]
8001d0b0:	11 88       	ld.ub	r8,r8[0x0]
8001d0b2:	58 08       	cp.w	r8,0
8001d0b4:	c6 11       	brne	8001d176 <ubx_process_data+0x8ec>
			{
			
				dbg_print("MSG_NAV_VELNED ");
8001d0b6:	fe cc 08 fa 	sub	r12,pc,2298
8001d0ba:	f0 16 00 01 	mcall	r6[4]
		
				dbg_print("itow :");
8001d0be:	fe cc 09 6e 	sub	r12,pc,2414
8001d0c2:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->itow,10);
8001d0c6:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d0ca:	70 88       	ld.w	r8,r8[0x20]
8001d0cc:	30 ab       	mov	r11,10
8001d0ce:	10 9c       	mov	r12,r8
8001d0d0:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ned_north :");
8001d0d4:	fe cc 09 08 	sub	r12,pc,2312
8001d0d8:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->ned_north,10);
8001d0dc:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d0e0:	70 78       	ld.w	r8,r8[0x1c]
8001d0e2:	30 ab       	mov	r11,10
8001d0e4:	10 9c       	mov	r12,r8
8001d0e6:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ned_east :");
8001d0ea:	fe cc 09 0e 	sub	r12,pc,2318
8001d0ee:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->ned_east,10);
8001d0f2:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d0f6:	70 68       	ld.w	r8,r8[0x18]
8001d0f8:	30 ab       	mov	r11,10
8001d0fa:	10 9c       	mov	r12,r8
8001d0fc:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ned_down :");
8001d100:	fe cc 09 18 	sub	r12,pc,2328
8001d104:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->ned_down,10);
8001d108:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d10c:	70 58       	ld.w	r8,r8[0x14]
8001d10e:	30 ab       	mov	r11,10
8001d110:	10 9c       	mov	r12,r8
8001d112:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" speed_3d :");
8001d116:	fe cc 09 22 	sub	r12,pc,2338
8001d11a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->speed_3d,10);
8001d11e:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d122:	70 48       	ld.w	r8,r8[0x10]
8001d124:	30 ab       	mov	r11,10
8001d126:	10 9c       	mov	r12,r8
8001d128:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" heading_2d :");
8001d12c:	fe cc 09 2c 	sub	r12,pc,2348
8001d130:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->heading_2d,10);
8001d134:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d138:	70 28       	ld.w	r8,r8[0x8]
8001d13a:	30 ab       	mov	r11,10
8001d13c:	10 9c       	mov	r12,r8
8001d13e:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" speed_accuracy :");
8001d142:	fe cc 09 32 	sub	r12,pc,2354
8001d146:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->speed_accuracy,10);
8001d14a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d14e:	70 18       	ld.w	r8,r8[0x4]
8001d150:	30 ab       	mov	r11,10
8001d152:	10 9c       	mov	r12,r8
8001d154:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" heading_accuracy :");
8001d158:	fe cc 09 34 	sub	r12,pc,2356
8001d15c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->heading_accuracy,10);
8001d160:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d164:	70 08       	ld.w	r8,r8[0x0]
8001d166:	30 ab       	mov	r11,10
8001d168:	10 9c       	mov	r12,r8
8001d16a:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001d16e:	fe cc 1b 16 	sub	r12,pc,6934
8001d172:	f0 16 00 01 	mcall	r6[4]
			}
			centralData->GPS_data.timegps = gpsVelned->itow;
8001d176:	ec f8 00 00 	ld.w	r8,r6[0]
8001d17a:	70 08       	ld.w	r8,r8[0x0]
8001d17c:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001d180:	72 89       	ld.w	r9,r9[0x20]
8001d182:	f1 49 07 98 	st.w	r8[1944],r9
			centralData->GPS_data.speed        = ((float)gpsVelned->speed_3d)/100.; // m/s
8001d186:	ec f8 00 00 	ld.w	r8,r6[0]
8001d18a:	70 05       	ld.w	r5,r8[0x0]
8001d18c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d190:	70 48       	ld.w	r8,r8[0x10]
8001d192:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001d196:	fc 1b 42 c8 	movh	r11,0x42c8
8001d19a:	10 9c       	mov	r12,r8
8001d19c:	f0 16 00 08 	mcall	r6[32]
8001d1a0:	18 98       	mov	r8,r12
8001d1a2:	eb 48 07 68 	st.w	r5[1896],r8
			centralData->GPS_data.groundSpeed = ((float)gpsVelned->groundSpeed_2d) / 100.; // m/s
8001d1a6:	ec f8 00 00 	ld.w	r8,r6[0]
8001d1aa:	70 05       	ld.w	r5,r8[0x0]
8001d1ac:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d1b0:	70 38       	ld.w	r8,r8[0xc]
8001d1b2:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001d1b6:	fc 1b 42 c8 	movh	r11,0x42c8
8001d1ba:	10 9c       	mov	r12,r8
8001d1bc:	f0 16 00 08 	mcall	r6[32]
8001d1c0:	18 98       	mov	r8,r12
8001d1c2:	eb 48 07 6c 	st.w	r5[1900],r8
			centralData->GPS_data.course = ((float)gpsVelned->heading_2d) / 100000.; // Heading 2D deg * 100000 rescaled to deg * 100
8001d1c6:	ec f8 00 00 	ld.w	r8,r6[0]
8001d1ca:	70 05       	ld.w	r5,r8[0x0]
8001d1cc:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d1d0:	70 28       	ld.w	r8,r8[0x8]
8001d1d2:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001d1d6:	e0 6b 50 00 	mov	r11,20480
8001d1da:	ea 1b 47 c3 	orh	r11,0x47c3
8001d1de:	10 9c       	mov	r12,r8
8001d1e0:	f0 16 00 08 	mcall	r6[32]
8001d1e4:	18 98       	mov	r8,r12
8001d1e6:	eb 48 07 7c 	st.w	r5[1916],r8
			have_raw_velocity = true;
8001d1ea:	ec f9 03 d4 	ld.w	r9,r6[980]
8001d1ee:	30 18       	mov	r8,1
8001d1f0:	b2 88       	st.b	r9[0x0],r8
			centralData->GPS_data.northSpeed  = ((float)gpsVelned->ned_north) / 100.0;
8001d1f2:	ec f8 00 00 	ld.w	r8,r6[0]
8001d1f6:	70 05       	ld.w	r5,r8[0x0]
8001d1f8:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d1fc:	70 78       	ld.w	r8,r8[0x1c]
8001d1fe:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001d202:	fc 1b 42 c8 	movh	r11,0x42c8
8001d206:	10 9c       	mov	r12,r8
8001d208:	f0 16 00 08 	mcall	r6[32]
8001d20c:	18 98       	mov	r8,r12
8001d20e:	eb 48 07 70 	st.w	r5[1904],r8
			centralData->GPS_data.eastSpeed   = ((float)gpsVelned->ned_east) / 100.;
8001d212:	ec f8 00 00 	ld.w	r8,r6[0]
8001d216:	70 05       	ld.w	r5,r8[0x0]
8001d218:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d21c:	70 68       	ld.w	r8,r8[0x18]
8001d21e:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001d222:	fc 1b 42 c8 	movh	r11,0x42c8
8001d226:	10 9c       	mov	r12,r8
8001d228:	f0 16 00 08 	mcall	r6[32]
8001d22c:	18 98       	mov	r8,r12
8001d22e:	eb 48 07 74 	st.w	r5[1908],r8
			centralData->GPS_data.verticalSpeed   = ((float)gpsVelned->ned_down) / 100.;
8001d232:	ec f8 00 00 	ld.w	r8,r6[0]
8001d236:	70 05       	ld.w	r5,r8[0x0]
8001d238:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d23c:	70 58       	ld.w	r8,r8[0x14]
8001d23e:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001d242:	fc 1b 42 c8 	movh	r11,0x42c8
8001d246:	10 9c       	mov	r12,r8
8001d248:	f0 16 00 08 	mcall	r6[32]
8001d24c:	18 98       	mov	r8,r12
8001d24e:	eb 48 07 78 	st.w	r5[1912],r8
			centralData->GPS_data.speedAccuracy = ((float)gpsVelned->speed_accuracy)/100.;
8001d252:	ec f8 00 00 	ld.w	r8,r6[0]
8001d256:	70 05       	ld.w	r5,r8[0x0]
8001d258:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d25c:	70 18       	ld.w	r8,r8[0x4]
8001d25e:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001d262:	fc 1b 42 c8 	movh	r11,0x42c8
8001d266:	10 9c       	mov	r12,r8
8001d268:	f0 16 00 08 	mcall	r6[32]
8001d26c:	18 98       	mov	r8,r12
8001d26e:	eb 48 07 88 	st.w	r5[1928],r8
			centralData->GPS_data.headingAccuracy = gpsVelned->heading_accuracy;
8001d272:	ec f8 00 00 	ld.w	r8,r6[0]
8001d276:	70 08       	ld.w	r8,r8[0x0]
8001d278:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001d27c:	72 09       	ld.w	r9,r9[0x0]
8001d27e:	e5 a4 09 09 	cop	cp0,cr9,cr0,cr9,0x48
8001d282:	f1 49 07 8c 	st.w	r8[1932],r9
			new_speed = true;
8001d286:	ec f9 02 30 	ld.w	r9,r6[560]
8001d28a:	30 18       	mov	r8,1
8001d28c:	b2 88       	st.b	r9[0x0],r8
		}
		break;
8001d28e:	c5 b8       	rjmp	8001d344 <ubx_process_data+0xaba>
	case MSG_NAV_SVINFO:
		gpsSVInfo = ubx_GetSVInfo();
8001d290:	f0 16 01 d3 	mcall	r6[1868]
8001d294:	18 98       	mov	r8,r12
8001d296:	ef 48 ff e8 	st.w	r7[-24],r8
		
		if (gpsSVInfo)
8001d29a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001d29e:	58 08       	cp.w	r8,0
8001d2a0:	c1 60       	breq	8001d2cc <ubx_process_data+0xa42>
		{
			if (printNavOnDebug)
8001d2a2:	ec f8 01 94 	ld.w	r8,r6[404]
8001d2a6:	11 88       	ld.ub	r8,r8[0x0]
8001d2a8:	58 08       	cp.w	r8,0
8001d2aa:	c1 10       	breq	8001d2cc <ubx_process_data+0xa42>
			{
				dbg_print("MSG_NAV_SVINFO, numChannel:");
8001d2ac:	fe cc 0a 74 	sub	r12,pc,2676
8001d2b0:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSVInfo->numCh,10);
8001d2b4:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001d2b8:	f1 38 00 c3 	ld.ub	r8,r8[195]
8001d2bc:	30 ab       	mov	r11,10
8001d2be:	10 9c       	mov	r12,r8
8001d2c0:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001d2c4:	fe cc 1c 6c 	sub	r12,pc,7276
8001d2c8:	f0 16 00 01 	mcall	r6[4]
			}
		}
		
		
	default:
		dbg_print("Unexpected NAV message 0x");
8001d2cc:	fe cc 0a 78 	sub	r12,pc,2680
8001d2d0:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(msg_id,10);
8001d2d4:	ec f8 00 5c 	ld.w	r8,r6[92]
8001d2d8:	11 88       	ld.ub	r8,r8[0x0]
8001d2da:	30 ab       	mov	r11,10
8001d2dc:	10 9c       	mov	r12,r8
8001d2de:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8001d2e2:	fe cc 1c 8a 	sub	r12,pc,7306
8001d2e6:	f0 16 00 01 	mcall	r6[4]
		
		if (++disable_counter == 0) {
8001d2ea:	ec f8 01 a8 	ld.w	r8,r6[424]
8001d2ee:	11 88       	ld.ub	r8,r8[0x0]
8001d2f0:	2f f8       	sub	r8,-1
8001d2f2:	5c 58       	castu.b	r8
8001d2f4:	ec f9 01 a8 	ld.w	r9,r6[424]
8001d2f8:	b2 88       	st.b	r9[0x0],r8
8001d2fa:	ec f8 01 a8 	ld.w	r8,r6[424]
8001d2fe:	11 88       	ld.ub	r8,r8[0x0]
8001d300:	58 08       	cp.w	r8,0
8001d302:	c1 81       	brne	8001d332 <ubx_process_data+0xaa8>
			//Debug("Disabling NAV message 0x%02x", (unsigned)_msg_id);
			dbg_print("Disabling NAV message 0x");
8001d304:	fe cc 0a 94 	sub	r12,pc,2708
8001d308:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(msg_id,16);
8001d30c:	ec f8 00 5c 	ld.w	r8,r6[92]
8001d310:	11 88       	ld.ub	r8,r8[0x0]
8001d312:	31 0b       	mov	r11,16
8001d314:	10 9c       	mov	r12,r8
8001d316:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001d31a:	fe cc 1c c2 	sub	r12,pc,7362
8001d31e:	f0 16 00 01 	mcall	r6[4]
			ubx_configure_message_rate(UBX_CLASS_NAV, msg_id, 0);
8001d322:	ec f8 00 5c 	ld.w	r8,r6[92]
8001d326:	11 88       	ld.ub	r8,r8[0x0]
8001d328:	30 0a       	mov	r10,0
8001d32a:	10 9b       	mov	r11,r8
8001d32c:	30 1c       	mov	r12,1
8001d32e:	f0 16 00 5f 	mcall	r6[380]
		}
		return false;
8001d332:	30 08       	mov	r8,0
8001d334:	c1 d8       	rjmp	8001d36e <ubx_process_data+0xae4>
			centralData->GPS_data.verticalAccuracy = ((float)gpsPosllh->vertical_accuracy) / 1000.0;
			//centralData->GPS_data.status = next_fix;
			
			new_position = true;
		}
		break;
8001d336:	d7 03       	nop
8001d338:	c0 68       	rjmp	8001d344 <ubx_process_data+0xaba>
				centralData->GPS_data.status = NO_FIX;
			}else{
				centralData->GPS_data.status = GPS_OK;
			}
		}
		break;
8001d33a:	d7 03       	nop
8001d33c:	c0 48       	rjmp	8001d344 <ubx_process_data+0xaba>
			}
		
			centralData->GPS_data.num_sats = gpsSolution->satellites;
			centralData->GPS_data.hdop = gpsSolution->position_DOP;
		}
		break;
8001d33e:	d7 03       	nop
8001d340:	c0 28       	rjmp	8001d344 <ubx_process_data+0xaba>
			centralData->GPS_data.verticalSpeed   = ((float)gpsVelned->ned_down) / 100.;
			centralData->GPS_data.speedAccuracy = ((float)gpsVelned->speed_accuracy)/100.;
			centralData->GPS_data.headingAccuracy = gpsVelned->heading_accuracy;
			new_speed = true;
		}
		break;
8001d342:	d7 03       	nop
		}
		return false;
	}
	// we only return true when we get new position and speed data
	// this ensures we don't use stale data
	if (new_position && new_speed) {
8001d344:	ec f8 02 64 	ld.w	r8,r6[612]
8001d348:	11 88       	ld.ub	r8,r8[0x0]
8001d34a:	58 08       	cp.w	r8,0
8001d34c:	c1 00       	breq	8001d36c <ubx_process_data+0xae2>
8001d34e:	ec f8 02 30 	ld.w	r8,r6[560]
8001d352:	11 88       	ld.ub	r8,r8[0x0]
8001d354:	58 08       	cp.w	r8,0
8001d356:	c0 b0       	breq	8001d36c <ubx_process_data+0xae2>
		new_speed = false;
8001d358:	ec f9 02 30 	ld.w	r9,r6[560]
8001d35c:	30 08       	mov	r8,0
8001d35e:	b2 88       	st.b	r9[0x0],r8
		new_position = false;
8001d360:	ec f9 02 64 	ld.w	r9,r6[612]
8001d364:	30 08       	mov	r8,0
8001d366:	b2 88       	st.b	r9[0x0],r8
// 		if (fix_count == 100) {
// 			// ask for nav settings every 20 seconds
// 			dbg_print("Asking for engine setting\n");
// 			ubx_send_message(UBX_CLASS_CFG, MSG_CFG_NAV_SETTINGS, NULL, 0);
// 		}
		return true;
8001d368:	30 18       	mov	r8,1
8001d36a:	c0 28       	rjmp	8001d36e <ubx_process_data+0xae4>
	}
	return false;
8001d36c:	30 08       	mov	r8,0
}
8001d36e:	10 9c       	mov	r12,r8
8001d370:	2f 6d       	sub	sp,-40
8001d372:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001d376:	00 00       	add	r0,r0
8001d378:	80 01       	ld.sh	r1,r0[0x0]
8001d37a:	c7 1a       	rjmp	8001d05c <ubx_process_data+0x7d2>

8001d37c <update_checksum>:
************************************************************************************
Checksum update
************************************************************************************
*/
void update_checksum(uint8_t *data, uint8_t len, uint8_t *ck_a, uint8_t *ck_b)
{
8001d37c:	eb cd 40 80 	pushm	r7,lr
8001d380:	1a 97       	mov	r7,sp
8001d382:	20 4d       	sub	sp,16
8001d384:	ef 4c ff fc 	st.w	r7[-4],r12
8001d388:	16 98       	mov	r8,r11
8001d38a:	ef 4a ff f4 	st.w	r7[-12],r10
8001d38e:	ef 49 ff f0 	st.w	r7[-16],r9
8001d392:	ef 68 ff f8 	st.b	r7[-8],r8
	while (len--) {
8001d396:	c1 e8       	rjmp	8001d3d2 <update_checksum+0x56>
		*ck_a += *data;
8001d398:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d39c:	11 89       	ld.ub	r9,r8[0x0]
8001d39e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d3a2:	11 88       	ld.ub	r8,r8[0x0]
8001d3a4:	f2 08 00 08 	add	r8,r9,r8
8001d3a8:	5c 58       	castu.b	r8
8001d3aa:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001d3ae:	b2 88       	st.b	r9[0x0],r8
		*ck_b += *ck_a;
8001d3b0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001d3b4:	11 89       	ld.ub	r9,r8[0x0]
8001d3b6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d3ba:	11 88       	ld.ub	r8,r8[0x0]
8001d3bc:	f2 08 00 08 	add	r8,r9,r8
8001d3c0:	5c 58       	castu.b	r8
8001d3c2:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001d3c6:	b2 88       	st.b	r9[0x0],r8
		data++;
8001d3c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d3cc:	2f f8       	sub	r8,-1
8001d3ce:	ef 48 ff fc 	st.w	r7[-4],r8
Checksum update
************************************************************************************
*/
void update_checksum(uint8_t *data, uint8_t len, uint8_t *ck_a, uint8_t *ck_b)
{
	while (len--) {
8001d3d2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8001d3d6:	30 08       	mov	r8,0
8001d3d8:	f0 09 18 00 	cp.b	r9,r8
8001d3dc:	5f 18       	srne	r8
8001d3de:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001d3e2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001d3e6:	20 18       	sub	r8,1
8001d3e8:	ef 68 ff f8 	st.b	r7[-8],r8
8001d3ec:	58 09       	cp.w	r9,0
8001d3ee:	cd 51       	brne	8001d398 <update_checksum+0x1c>
		*ck_a += *data;
		*ck_b += *ck_a;
		data++;
	}
}
8001d3f0:	2f cd       	sub	sp,-16
8001d3f2:	e3 cd 80 80 	ldm	sp++,r7,pc

8001d3f6 <endian_lower_bytes_uint16>:
To send the lower byte of an uint16_t in the Little Endian format
************************************************************************************
*/

uint8_t endian_lower_bytes_uint16(uint16_t bytes)
{
8001d3f6:	eb cd 40 80 	pushm	r7,lr
8001d3fa:	1a 97       	mov	r7,sp
8001d3fc:	20 1d       	sub	sp,4
8001d3fe:	18 98       	mov	r8,r12
8001d400:	ef 58 ff fc 	st.h	r7[-4],r8
	return (bytes & 0x00FF);
8001d404:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8001d408:	5c 58       	castu.b	r8
}
8001d40a:	10 9c       	mov	r12,r8
8001d40c:	2f fd       	sub	sp,-4
8001d40e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001d412 <endian_higher_bytes_uint16>:
************************************************************************************
To send the higher byte of an uint16_t in the Little Endian format
************************************************************************************
*/
uint8_t endian_higher_bytes_uint16(uint16_t bytes)
{
8001d412:	eb cd 40 80 	pushm	r7,lr
8001d416:	1a 97       	mov	r7,sp
8001d418:	20 1d       	sub	sp,4
8001d41a:	18 98       	mov	r8,r12
8001d41c:	ef 58 ff fc 	st.h	r7[-4],r8
	return (bytes & 0xFF00)>>8;
8001d420:	ef 18 ff fc 	ld.uh	r8,r7[-4]
8001d424:	a9 88       	lsr	r8,0x8
8001d426:	5c 88       	casts.h	r8
8001d428:	5c 58       	castu.b	r8
}
8001d42a:	10 9c       	mov	r12,r8
8001d42c:	2f fd       	sub	sp,-4
8001d42e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001d432 <ubx_send_header>:
************************************************************************************
To send the UBX header of all messages
************************************************************************************
*/
void ubx_send_header(uint8_t msg_class, uint8_t _msg_id, uint8_t size)
{
8001d432:	eb cd 40 c0 	pushm	r6-r7,lr
8001d436:	1a 97       	mov	r7,sp
8001d438:	20 5d       	sub	sp,20
8001d43a:	4b 76       	lddpc	r6,8001d514 <ubx_send_header+0xe2>
8001d43c:	1e 26       	rsub	r6,pc
8001d43e:	16 99       	mov	r9,r11
8001d440:	14 98       	mov	r8,r10
8001d442:	18 9a       	mov	r10,r12
8001d444:	ef 6a ff f4 	st.b	r7[-12],r10
8001d448:	ef 69 ff f0 	st.b	r7[-16],r9
8001d44c:	ef 68 ff ec 	st.b	r7[-20],r8
	ubx_header header;
	header.preamble1		= UBX_PREAMBLE1;
8001d450:	3b 58       	mov	r8,-75
8001d452:	ef 68 ff ff 	st.b	r7[-1],r8
	header.preamble2		= UBX_PREAMBLE2;
8001d456:	36 28       	mov	r8,98
8001d458:	ef 68 ff fe 	st.b	r7[-2],r8
	header.msg_class		= msg_class;
8001d45c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001d460:	ef 68 ff fd 	st.b	r7[-3],r8
	header.msg_id_header    = _msg_id;
8001d464:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001d468:	ef 68 ff fc 	st.b	r7[-4],r8
	header.length			= size;
8001d46c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001d470:	ef 58 ff fa 	st.h	r7[-6],r8
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,header.msg_id_header);
	//
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,(uint8_t) (header.length & 0x0F));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,(uint8_t) (header.length & 0xF0)>>8);
	
	putnum(&centralData->gps_stream_out,header.preamble1,16);
8001d474:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001d478:	10 99       	mov	r9,r8
8001d47a:	ec f8 00 00 	ld.w	r8,r6[0]
8001d47e:	70 08       	ld.w	r8,r8[0x0]
8001d480:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001d484:	31 0a       	mov	r10,16
8001d486:	12 9b       	mov	r11,r9
8001d488:	10 9c       	mov	r12,r8
8001d48a:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,header.preamble2,16);
8001d48e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001d492:	10 99       	mov	r9,r8
8001d494:	ec f8 00 00 	ld.w	r8,r6[0]
8001d498:	70 08       	ld.w	r8,r8[0x0]
8001d49a:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001d49e:	31 0a       	mov	r10,16
8001d4a0:	12 9b       	mov	r11,r9
8001d4a2:	10 9c       	mov	r12,r8
8001d4a4:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,header.msg_class,10);
8001d4a8:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8001d4ac:	10 99       	mov	r9,r8
8001d4ae:	ec f8 00 00 	ld.w	r8,r6[0]
8001d4b2:	70 08       	ld.w	r8,r8[0x0]
8001d4b4:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001d4b8:	30 aa       	mov	r10,10
8001d4ba:	12 9b       	mov	r11,r9
8001d4bc:	10 9c       	mov	r12,r8
8001d4be:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,header.msg_id_header,16);
8001d4c2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001d4c6:	10 99       	mov	r9,r8
8001d4c8:	ec f8 00 00 	ld.w	r8,r6[0]
8001d4cc:	70 08       	ld.w	r8,r8[0x0]
8001d4ce:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001d4d2:	31 0a       	mov	r10,16
8001d4d4:	12 9b       	mov	r11,r9
8001d4d6:	10 9c       	mov	r12,r8
8001d4d8:	f0 16 00 28 	mcall	r6[160]
	
	putnum(&centralData->gps_stream_out,(uint8_t) (header.length & 0x0F),16);
8001d4dc:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8001d4e0:	5c 58       	castu.b	r8
8001d4e2:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
8001d4e6:	ec f8 00 00 	ld.w	r8,r6[0]
8001d4ea:	70 08       	ld.w	r8,r8[0x0]
8001d4ec:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001d4f0:	31 0a       	mov	r10,16
8001d4f2:	12 9b       	mov	r11,r9
8001d4f4:	10 9c       	mov	r12,r8
8001d4f6:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,(uint8_t) (header.length & 0xF0)>>8,16);
8001d4fa:	ec f8 00 00 	ld.w	r8,r6[0]
8001d4fe:	70 08       	ld.w	r8,r8[0x0]
8001d500:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001d504:	31 0a       	mov	r10,16
8001d506:	30 0b       	mov	r11,0
8001d508:	10 9c       	mov	r12,r8
8001d50a:	f0 16 00 28 	mcall	r6[160]
	
}
8001d50e:	2f bd       	sub	sp,-20
8001d510:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d514:	80 01       	ld.sh	r1,r0[0x0]
8001d516:	d2 c0       	acall	0x2c

8001d518 <ubx_send_cksum>:
************************************************************************************
To send the checksum of every message
************************************************************************************
*/
void ubx_send_cksum(uint8_t ck_sum_a, uint8_t ck_sum_b)
{
8001d518:	eb cd 40 c0 	pushm	r6-r7,lr
8001d51c:	1a 97       	mov	r7,sp
8001d51e:	20 2d       	sub	sp,8
8001d520:	49 26       	lddpc	r6,8001d568 <ubx_send_cksum+0x50>
8001d522:	1e 26       	rsub	r6,pc
8001d524:	18 99       	mov	r9,r12
8001d526:	16 98       	mov	r8,r11
8001d528:	ef 69 ff fc 	st.b	r7[-4],r9
8001d52c:	ef 68 ff f8 	st.b	r7[-8],r8
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,ck_sum_a);
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,ck_sum_b);
	
	putnum(&centralData->gps_stream_out,ck_sum_a,16);
8001d530:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8001d534:	ec f8 00 00 	ld.w	r8,r6[0]
8001d538:	70 08       	ld.w	r8,r8[0x0]
8001d53a:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001d53e:	31 0a       	mov	r10,16
8001d540:	12 9b       	mov	r11,r9
8001d542:	10 9c       	mov	r12,r8
8001d544:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,ck_sum_b,16);
8001d548:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8001d54c:	ec f8 00 00 	ld.w	r8,r6[0]
8001d550:	70 08       	ld.w	r8,r8[0x0]
8001d552:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001d556:	31 0a       	mov	r10,16
8001d558:	12 9b       	mov	r11,r9
8001d55a:	10 9c       	mov	r12,r8
8001d55c:	f0 16 00 28 	mcall	r6[160]
}
8001d560:	2f ed       	sub	sp,-8
8001d562:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d566:	00 00       	add	r0,r0
8001d568:	80 01       	ld.sh	r1,r0[0x0]
8001d56a:	d3 a6       	*unknown*

8001d56c <ubx_send_message>:
NOT USED ANYMORE
To send a message to the GPS
************************************************************************************
*/
void ubx_send_message(uint8_t msg_class, uint8_t _msg_id, void *msg, uint8_t size)
{
8001d56c:	eb cd 40 c0 	pushm	r6-r7,lr
8001d570:	1a 97       	mov	r7,sp
8001d572:	20 6d       	sub	sp,24
8001d574:	4b 56       	lddpc	r6,8001d648 <ubx_send_message+0xdc>
8001d576:	1e 26       	rsub	r6,pc
8001d578:	ef 4a ff ec 	st.w	r7[-20],r10
8001d57c:	12 98       	mov	r8,r9
8001d57e:	18 99       	mov	r9,r12
8001d580:	ef 69 ff f4 	st.b	r7[-12],r9
8001d584:	16 99       	mov	r9,r11
8001d586:	ef 69 ff f0 	st.b	r7[-16],r9
8001d58a:	ef 68 ff e8 	st.b	r7[-24],r8
	ubx_header header;
	uint8_t ck_a=0, ck_b=0;
8001d58e:	30 08       	mov	r8,0
8001d590:	ef 68 ff f9 	st.b	r7[-7],r8
8001d594:	30 08       	mov	r8,0
8001d596:	ef 68 ff f8 	st.b	r7[-8],r8
	header.preamble1 = UBX_PREAMBLE1;
8001d59a:	3b 58       	mov	r8,-75
8001d59c:	ef 68 ff ff 	st.b	r7[-1],r8
	header.preamble2 = UBX_PREAMBLE2;
8001d5a0:	36 28       	mov	r8,98
8001d5a2:	ef 68 ff fe 	st.b	r7[-2],r8
	header.msg_class = msg_class;
8001d5a6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001d5aa:	ef 68 ff fd 	st.b	r7[-3],r8
	header.msg_id_header    = _msg_id;
8001d5ae:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001d5b2:	ef 68 ff fc 	st.b	r7[-4],r8
	header.length    = size;
8001d5b6:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8001d5ba:	ef 58 ff fa 	st.h	r7[-6],r8
	
	update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
8001d5be:	ee c9 00 08 	sub	r9,r7,8
8001d5c2:	ee ca 00 07 	sub	r10,r7,7
8001d5c6:	ee c8 00 06 	sub	r8,r7,6
8001d5ca:	2f d8       	sub	r8,-3
8001d5cc:	30 4b       	mov	r11,4
8001d5ce:	10 9c       	mov	r12,r8
8001d5d0:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)msg, size, &ck_a, &ck_b);
8001d5d4:	ef 3b ff e8 	ld.ub	r11,r7[-24]
8001d5d8:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d5dc:	ee c9 00 08 	sub	r9,r7,8
8001d5e0:	ee ca 00 07 	sub	r10,r7,7
8001d5e4:	10 9c       	mov	r12,r8
8001d5e6:	f0 16 00 35 	mcall	r6[212]
	
 	putstring(&(centralData->gps_stream_out),&header);
8001d5ea:	ee c9 00 06 	sub	r9,r7,6
8001d5ee:	ec f8 00 00 	ld.w	r8,r6[0]
8001d5f2:	70 08       	ld.w	r8,r8[0x0]
8001d5f4:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001d5f8:	12 9b       	mov	r11,r9
8001d5fa:	10 9c       	mov	r12,r8
8001d5fc:	f0 16 00 34 	mcall	r6[208]
 	putstring(&(centralData->gps_stream_out),(uint8_t *)msg);
8001d600:	ee f9 ff ec 	ld.w	r9,r7[-20]
8001d604:	ec f8 00 00 	ld.w	r8,r6[0]
8001d608:	70 08       	ld.w	r8,r8[0x0]
8001d60a:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001d60e:	12 9b       	mov	r11,r9
8001d610:	10 9c       	mov	r12,r8
8001d612:	f0 16 00 34 	mcall	r6[208]
 	putstring(&(centralData->gps_stream_out),&ck_a);
8001d616:	ec f8 00 00 	ld.w	r8,r6[0]
8001d61a:	70 08       	ld.w	r8,r8[0x0]
8001d61c:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001d620:	ee c9 00 07 	sub	r9,r7,7
8001d624:	12 9b       	mov	r11,r9
8001d626:	10 9c       	mov	r12,r8
8001d628:	f0 16 00 34 	mcall	r6[208]
 	putstring(&(centralData->gps_stream_out),&ck_b);
8001d62c:	ec f8 00 00 	ld.w	r8,r6[0]
8001d630:	70 08       	ld.w	r8,r8[0x0]
8001d632:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001d636:	ee c9 00 08 	sub	r9,r7,8
8001d63a:	12 9b       	mov	r11,r9
8001d63c:	10 9c       	mov	r12,r8
8001d63e:	f0 16 00 34 	mcall	r6[208]
	
	//centralData->gps_stream_out.flush(&(centralData->gps_stream_out.data));
}
8001d642:	2f ad       	sub	sp,-24
8001d644:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d648:	80 01       	ld.sh	r1,r0[0x0]
8001d64a:	d3 fa       	popm	r0-r12

8001d64c <ubx_send_message_CFG_nav_rate>:
Class:		0x06	UBX_CLASS_CFG
Msg_id:		0x08	MSG_CFG_RATE
************************************************************************************
*/
void ubx_send_message_CFG_nav_rate(uint8_t msg_class, uint8_t _msg_id, ubx_cfg_nav_rate_send msg, uint8_t size)
{
8001d64c:	eb cd 40 e0 	pushm	r5-r7,lr
8001d650:	1a 97       	mov	r7,sp
8001d652:	20 4d       	sub	sp,16
8001d654:	4d d6       	lddpc	r6,8001d7c8 <ubx_send_message_CFG_nav_rate+0x17c>
8001d656:	1e 26       	rsub	r6,pc
8001d658:	ee c5 ff f0 	sub	r5,r7,-16
8001d65c:	16 99       	mov	r9,r11
8001d65e:	14 98       	mov	r8,r10
8001d660:	18 9a       	mov	r10,r12
8001d662:	ef 6a ff f8 	st.b	r7[-8],r10
8001d666:	ef 69 ff f4 	st.b	r7[-12],r9
8001d66a:	ef 68 ff f0 	st.b	r7[-16],r8
	uint8_t ck_a=0, ck_b=0;
8001d66e:	30 08       	mov	r8,0
8001d670:	ef 68 ff ff 	st.b	r7[-1],r8
8001d674:	30 08       	mov	r8,0
8001d676:	ef 68 ff fe 	st.b	r7[-2],r8
	
	update_checksum((uint8_t *)&msg_class, 1, &ck_a, &ck_b);
8001d67a:	ee c9 00 02 	sub	r9,r7,2
8001d67e:	ee ca 00 01 	sub	r10,r7,1
8001d682:	ee c8 00 08 	sub	r8,r7,8
8001d686:	30 1b       	mov	r11,1
8001d688:	10 9c       	mov	r12,r8
8001d68a:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)&_msg_id, 1, &ck_a, &ck_b);
8001d68e:	ee c9 00 02 	sub	r9,r7,2
8001d692:	ee ca 00 01 	sub	r10,r7,1
8001d696:	ee c8 00 0c 	sub	r8,r7,12
8001d69a:	30 1b       	mov	r11,1
8001d69c:	10 9c       	mov	r12,r8
8001d69e:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)&size, 1, &ck_a, &ck_b);
8001d6a2:	ee c9 00 02 	sub	r9,r7,2
8001d6a6:	ee ca 00 01 	sub	r10,r7,1
8001d6aa:	ee c8 00 10 	sub	r8,r7,16
8001d6ae:	30 1b       	mov	r11,1
8001d6b0:	10 9c       	mov	r12,r8
8001d6b2:	f0 16 00 35 	mcall	r6[212]

	//update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
	update_checksum((uint8_t *)&msg, size, &ck_a, &ck_b);
8001d6b6:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001d6ba:	10 9b       	mov	r11,r8
8001d6bc:	0a 98       	mov	r8,r5
8001d6be:	ee c9 00 02 	sub	r9,r7,2
8001d6c2:	ee ca 00 01 	sub	r10,r7,1
8001d6c6:	10 9c       	mov	r12,r8
8001d6c8:	f0 16 00 35 	mcall	r6[212]
	
	ubx_send_header(msg_class,_msg_id,size);
8001d6cc:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001d6d0:	10 9a       	mov	r10,r8
8001d6d2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001d6d6:	10 99       	mov	r9,r8
8001d6d8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001d6dc:	12 9b       	mov	r11,r9
8001d6de:	10 9c       	mov	r12,r8
8001d6e0:	f0 16 00 c6 	mcall	r6[792]
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_lower_bytes_uint16(msg.nav_rate));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_higher_bytes_uint16(msg.nav_rate));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_lower_bytes_uint16(msg.timeref));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_higher_bytes_uint16(msg.timeref));	
	
	putnum(&centralData->gps_stream_out, endian_lower_bytes_uint16(msg.measure_rate_ms),16);
8001d6e4:	8a 08       	ld.sh	r8,r5[0x0]
8001d6e6:	5c 78       	castu.h	r8
8001d6e8:	10 9c       	mov	r12,r8
8001d6ea:	f0 16 00 b1 	mcall	r6[708]
8001d6ee:	18 98       	mov	r8,r12
8001d6f0:	10 99       	mov	r9,r8
8001d6f2:	ec f8 00 00 	ld.w	r8,r6[0]
8001d6f6:	70 08       	ld.w	r8,r8[0x0]
8001d6f8:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001d6fc:	31 0a       	mov	r10,16
8001d6fe:	12 9b       	mov	r11,r9
8001d700:	10 9c       	mov	r12,r8
8001d702:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_higher_bytes_uint16(msg.measure_rate_ms),16);
8001d706:	8a 08       	ld.sh	r8,r5[0x0]
8001d708:	5c 78       	castu.h	r8
8001d70a:	10 9c       	mov	r12,r8
8001d70c:	f0 16 00 b9 	mcall	r6[740]
8001d710:	18 98       	mov	r8,r12
8001d712:	10 99       	mov	r9,r8
8001d714:	ec f8 00 00 	ld.w	r8,r6[0]
8001d718:	70 08       	ld.w	r8,r8[0x0]
8001d71a:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001d71e:	31 0a       	mov	r10,16
8001d720:	12 9b       	mov	r11,r9
8001d722:	10 9c       	mov	r12,r8
8001d724:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_lower_bytes_uint16(msg.nav_rate),16);
8001d728:	8a 18       	ld.sh	r8,r5[0x2]
8001d72a:	5c 78       	castu.h	r8
8001d72c:	10 9c       	mov	r12,r8
8001d72e:	f0 16 00 b1 	mcall	r6[708]
8001d732:	18 98       	mov	r8,r12
8001d734:	10 99       	mov	r9,r8
8001d736:	ec f8 00 00 	ld.w	r8,r6[0]
8001d73a:	70 08       	ld.w	r8,r8[0x0]
8001d73c:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001d740:	31 0a       	mov	r10,16
8001d742:	12 9b       	mov	r11,r9
8001d744:	10 9c       	mov	r12,r8
8001d746:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_higher_bytes_uint16(msg.nav_rate),16);
8001d74a:	8a 18       	ld.sh	r8,r5[0x2]
8001d74c:	5c 78       	castu.h	r8
8001d74e:	10 9c       	mov	r12,r8
8001d750:	f0 16 00 b9 	mcall	r6[740]
8001d754:	18 98       	mov	r8,r12
8001d756:	10 99       	mov	r9,r8
8001d758:	ec f8 00 00 	ld.w	r8,r6[0]
8001d75c:	70 08       	ld.w	r8,r8[0x0]
8001d75e:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001d762:	31 0a       	mov	r10,16
8001d764:	12 9b       	mov	r11,r9
8001d766:	10 9c       	mov	r12,r8
8001d768:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_lower_bytes_uint16(msg.timeref),16);
8001d76c:	8a 28       	ld.sh	r8,r5[0x4]
8001d76e:	5c 78       	castu.h	r8
8001d770:	10 9c       	mov	r12,r8
8001d772:	f0 16 00 b1 	mcall	r6[708]
8001d776:	18 98       	mov	r8,r12
8001d778:	10 99       	mov	r9,r8
8001d77a:	ec f8 00 00 	ld.w	r8,r6[0]
8001d77e:	70 08       	ld.w	r8,r8[0x0]
8001d780:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001d784:	31 0a       	mov	r10,16
8001d786:	12 9b       	mov	r11,r9
8001d788:	10 9c       	mov	r12,r8
8001d78a:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_higher_bytes_uint16(msg.timeref),16);
8001d78e:	8a 28       	ld.sh	r8,r5[0x4]
8001d790:	5c 78       	castu.h	r8
8001d792:	10 9c       	mov	r12,r8
8001d794:	f0 16 00 b9 	mcall	r6[740]
8001d798:	18 98       	mov	r8,r12
8001d79a:	10 99       	mov	r9,r8
8001d79c:	ec f8 00 00 	ld.w	r8,r6[0]
8001d7a0:	70 08       	ld.w	r8,r8[0x0]
8001d7a2:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001d7a6:	31 0a       	mov	r10,16
8001d7a8:	12 9b       	mov	r11,r9
8001d7aa:	10 9c       	mov	r12,r8
8001d7ac:	f0 16 00 28 	mcall	r6[160]
	
	ubx_send_cksum(ck_a,ck_b);
8001d7b0:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001d7b4:	10 99       	mov	r9,r8
8001d7b6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001d7ba:	12 9b       	mov	r11,r9
8001d7bc:	10 9c       	mov	r12,r8
8001d7be:	f0 16 00 c4 	mcall	r6[784]
	
	//centralData->gps_stream_out.flush(&(centralData->gps_stream_out.data));
}
8001d7c2:	2f cd       	sub	sp,-16
8001d7c4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001d7c8:	80 01       	ld.sh	r1,r0[0x0]
8001d7ca:	d4 da       	popm	r0-r3,r8-r10,lr

8001d7cc <ubx_send_message_nav_settings>:
Class:		0x06	UBX_CLASS_CFG
Msg_id :	0x24	MSG_CFG_NAV_SETTINGS
************************************************************************************
*/
void ubx_send_message_nav_settings(uint8_t msg_class, uint8_t _msg_id, enum GPS_Engine_Setting *engine_settings, uint8_t size)
{
8001d7cc:	eb cd 40 c0 	pushm	r6-r7,lr
8001d7d0:	1a 97       	mov	r7,sp
8001d7d2:	20 5d       	sub	sp,20
8001d7d4:	4b 46       	lddpc	r6,8001d8a4 <ubx_send_message_nav_settings+0xd8>
8001d7d6:	1e 26       	rsub	r6,pc
8001d7d8:	ef 4a ff f0 	st.w	r7[-16],r10
8001d7dc:	12 98       	mov	r8,r9
8001d7de:	18 99       	mov	r9,r12
8001d7e0:	ef 69 ff f8 	st.b	r7[-8],r9
8001d7e4:	16 99       	mov	r9,r11
8001d7e6:	ef 69 ff f4 	st.b	r7[-12],r9
8001d7ea:	ef 68 ff ec 	st.b	r7[-20],r8
	uint8_t ck_a=0, ck_b=0;
8001d7ee:	30 08       	mov	r8,0
8001d7f0:	ef 68 ff ff 	st.b	r7[-1],r8
8001d7f4:	30 08       	mov	r8,0
8001d7f6:	ef 68 ff fe 	st.b	r7[-2],r8
	
	update_checksum((uint8_t *)&msg_class, 1, &ck_a, &ck_b);
8001d7fa:	ee c9 00 02 	sub	r9,r7,2
8001d7fe:	ee ca 00 01 	sub	r10,r7,1
8001d802:	ee c8 00 08 	sub	r8,r7,8
8001d806:	30 1b       	mov	r11,1
8001d808:	10 9c       	mov	r12,r8
8001d80a:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)&_msg_id, 1, &ck_a, &ck_b);
8001d80e:	ee c9 00 02 	sub	r9,r7,2
8001d812:	ee ca 00 01 	sub	r10,r7,1
8001d816:	ee c8 00 0c 	sub	r8,r7,12
8001d81a:	30 1b       	mov	r11,1
8001d81c:	10 9c       	mov	r12,r8
8001d81e:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)&size, 1, &ck_a, &ck_b);
8001d822:	ee c9 00 02 	sub	r9,r7,2
8001d826:	ee ca 00 01 	sub	r10,r7,1
8001d82a:	ee c8 00 14 	sub	r8,r7,20
8001d82e:	30 1b       	mov	r11,1
8001d830:	10 9c       	mov	r12,r8
8001d832:	f0 16 00 35 	mcall	r6[212]

	//update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
	
	
	ubx_send_header(msg_class,_msg_id,size);
8001d836:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001d83a:	10 9a       	mov	r10,r8
8001d83c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001d840:	10 99       	mov	r9,r8
8001d842:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001d846:	12 9b       	mov	r11,r9
8001d848:	10 9c       	mov	r12,r8
8001d84a:	f0 16 00 c6 	mcall	r6[792]
	
	if (engine_settings != NULL)
8001d84e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001d852:	58 08       	cp.w	r8,0
8001d854:	c1 c0       	breq	8001d88c <ubx_send_message_nav_settings+0xc0>
	{
		update_checksum((uint8_t *)engine_settings, size, &ck_a, &ck_b);
8001d856:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001d85a:	10 9b       	mov	r11,r8
8001d85c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001d860:	ee c9 00 02 	sub	r9,r7,2
8001d864:	ee ca 00 01 	sub	r10,r7,1
8001d868:	10 9c       	mov	r12,r8
8001d86a:	f0 16 00 35 	mcall	r6[212]
		//centralData->gps_stream_out.put(centralData->gps_stream_out.data, (uint8_t) *engine_settings);
		putnum(&centralData->gps_stream_out, (uint8_t) *engine_settings,10);
8001d86e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001d872:	70 08       	ld.w	r8,r8[0x0]
8001d874:	5c 58       	castu.b	r8
8001d876:	10 99       	mov	r9,r8
8001d878:	ec f8 00 00 	ld.w	r8,r6[0]
8001d87c:	70 08       	ld.w	r8,r8[0x0]
8001d87e:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001d882:	30 aa       	mov	r10,10
8001d884:	12 9b       	mov	r11,r9
8001d886:	10 9c       	mov	r12,r8
8001d888:	f0 16 00 28 	mcall	r6[160]
	}
	
	ubx_send_cksum(ck_a,ck_b);
8001d88c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001d890:	10 99       	mov	r9,r8
8001d892:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001d896:	12 9b       	mov	r11,r9
8001d898:	10 9c       	mov	r12,r8
8001d89a:	f0 16 00 c4 	mcall	r6[784]
	
	//centralData->gps_stream_out.flush(&(centralData->gps_stream_out.data));
}
8001d89e:	2f bd       	sub	sp,-20
8001d8a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d8a4:	80 01       	ld.sh	r1,r0[0x0]
8001d8a6:	d6 5a       	popm	r0-r3,r8-r9,r12,lr

8001d8a8 <ubx_configure_message_rate>:
Class:		0x06	UBX_CLASS_CFG
Msg_id :	0x01	MSG_CFG_SET_RATE
************************************************************************************
*/
void ubx_configure_message_rate(uint8_t msg_class, uint8_t _msg_id, uint8_t rate)
{
8001d8a8:	eb cd 40 c0 	pushm	r6-r7,lr
8001d8ac:	1a 97       	mov	r7,sp
8001d8ae:	20 5d       	sub	sp,20
8001d8b0:	4c 16       	lddpc	r6,8001d9b4 <ubx_configure_message_rate+0x10c>
8001d8b2:	1e 26       	rsub	r6,pc
8001d8b4:	16 99       	mov	r9,r11
8001d8b6:	14 98       	mov	r8,r10
8001d8b8:	18 9a       	mov	r10,r12
8001d8ba:	ef 6a ff f4 	st.b	r7[-12],r10
8001d8be:	ef 69 ff f0 	st.b	r7[-16],r9
8001d8c2:	ef 68 ff ec 	st.b	r7[-20],r8
	uint8_t ck_a=0, ck_b=0;
8001d8c6:	30 08       	mov	r8,0
8001d8c8:	ef 68 ff ff 	st.b	r7[-1],r8
8001d8cc:	30 08       	mov	r8,0
8001d8ce:	ef 68 ff fe 	st.b	r7[-2],r8
	ubx_cfg_msg_rate_send msg;
	msg.msg_class = msg_class;
8001d8d2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001d8d6:	ef 68 ff fb 	st.b	r7[-5],r8
	msg.msg_id_rate    = _msg_id;
8001d8da:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001d8de:	ef 68 ff fc 	st.b	r7[-4],r8
	msg.rate          = rate;
8001d8e2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001d8e6:	ef 68 ff fd 	st.b	r7[-3],r8
	
	uint8_t size = sizeof(msg);
8001d8ea:	30 38       	mov	r8,3
8001d8ec:	ef 68 ff fa 	st.b	r7[-6],r8
	
	update_checksum((uint8_t *)&msg_class, 1, &ck_a, &ck_b);
8001d8f0:	ee c9 00 02 	sub	r9,r7,2
8001d8f4:	ee ca 00 01 	sub	r10,r7,1
8001d8f8:	ee c8 00 0c 	sub	r8,r7,12
8001d8fc:	30 1b       	mov	r11,1
8001d8fe:	10 9c       	mov	r12,r8
8001d900:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)&_msg_id, 1, &ck_a, &ck_b);
8001d904:	ee c9 00 02 	sub	r9,r7,2
8001d908:	ee ca 00 01 	sub	r10,r7,1
8001d90c:	ee c8 00 10 	sub	r8,r7,16
8001d910:	30 1b       	mov	r11,1
8001d912:	10 9c       	mov	r12,r8
8001d914:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)&size, 1, &ck_a, &ck_b);
8001d918:	ee c9 00 02 	sub	r9,r7,2
8001d91c:	ee ca 00 01 	sub	r10,r7,1
8001d920:	ee c8 00 06 	sub	r8,r7,6
8001d924:	30 1b       	mov	r11,1
8001d926:	10 9c       	mov	r12,r8
8001d928:	f0 16 00 35 	mcall	r6[212]

	//update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
	update_checksum((uint8_t *)&msg, size, &ck_a, &ck_b);
8001d92c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001d930:	10 9b       	mov	r11,r8
8001d932:	ee c9 00 02 	sub	r9,r7,2
8001d936:	ee ca 00 01 	sub	r10,r7,1
8001d93a:	ee c8 00 05 	sub	r8,r7,5
8001d93e:	10 9c       	mov	r12,r8
8001d940:	f0 16 00 35 	mcall	r6[212]
	
	ubx_send_header(UBX_CLASS_CFG,MSG_CFG_SET_RATE,sizeof(msg));
8001d944:	30 3a       	mov	r10,3
8001d946:	30 1b       	mov	r11,1
8001d948:	30 6c       	mov	r12,6
8001d94a:	f0 16 00 c6 	mcall	r6[792]
	
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,msg.msg_class);
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,msg.msg_id_rate);
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,msg.rate);
	
	putnum(&centralData->gps_stream_out,msg.msg_class,16);
8001d94e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8001d952:	10 99       	mov	r9,r8
8001d954:	ec f8 00 00 	ld.w	r8,r6[0]
8001d958:	70 08       	ld.w	r8,r8[0x0]
8001d95a:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001d95e:	31 0a       	mov	r10,16
8001d960:	12 9b       	mov	r11,r9
8001d962:	10 9c       	mov	r12,r8
8001d964:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,msg.msg_id_rate,16);
8001d968:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001d96c:	10 99       	mov	r9,r8
8001d96e:	ec f8 00 00 	ld.w	r8,r6[0]
8001d972:	70 08       	ld.w	r8,r8[0x0]
8001d974:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001d978:	31 0a       	mov	r10,16
8001d97a:	12 9b       	mov	r11,r9
8001d97c:	10 9c       	mov	r12,r8
8001d97e:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,msg.rate,16);
8001d982:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8001d986:	10 99       	mov	r9,r8
8001d988:	ec f8 00 00 	ld.w	r8,r6[0]
8001d98c:	70 08       	ld.w	r8,r8[0x0]
8001d98e:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001d992:	31 0a       	mov	r10,16
8001d994:	12 9b       	mov	r11,r9
8001d996:	10 9c       	mov	r12,r8
8001d998:	f0 16 00 28 	mcall	r6[160]
	
	ubx_send_cksum(ck_a,ck_b);
8001d99c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001d9a0:	10 99       	mov	r9,r8
8001d9a2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001d9a6:	12 9b       	mov	r11,r9
8001d9a8:	10 9c       	mov	r12,r8
8001d9aa:	f0 16 00 c4 	mcall	r6[784]
	//ubx_send_message(UBX_CLASS_CFG, MSG_CFG_SET_RATE, &msg, sizeof(msg));
	
	//centralData->gps_stream_out.flush(centralData->gps_stream_out.data);
}
8001d9ae:	2f bd       	sub	sp,-20
8001d9b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d9b4:	80 01       	ld.sh	r1,r0[0x0]
8001d9b6:	d7 36       	*unknown*
8001d9b8:	24 50       	sub	r0,69
8001d9ba:	55 42       	stdsp	sp[0x150],r2
8001d9bc:	58 2c       	cp.w	r12,2
8001d9be:	34 31       	mov	r1,67
8001d9c0:	2c 31       	sub	r1,-61
8001d9c2:	2c 30       	sub	r0,-61
8001d9c4:	30 30       	mov	r0,3
8001d9c6:	33 2c       	mov	r12,50
8001d9c8:	30 30       	mov	r0,3
8001d9ca:	30 31       	mov	r1,3
8001d9cc:	2c 33       	sub	r3,-61
8001d9ce:	38 34       	mov	r4,-125
8001d9d0:	30 30       	mov	r0,3
8001d9d2:	2c 30       	sub	r0,-61
8001d9d4:	2a 32       	sub	r2,-93
8001d9d6:	35 0d       	mov	sp,80
8001d9d8:	0a 00       	add	r0,r5

8001d9da <configure_gps>:
To configure the GPS in binary mode and the Navigation messages we want
The GPS and UART channel should already be configured in the good baudrate 38400U
************************************************************************************
*/
void configure_gps(void)
{
8001d9da:	eb cd 40 c0 	pushm	r6-r7,lr
8001d9de:	1a 97       	mov	r7,sp
8001d9e0:	20 3d       	sub	sp,12
8001d9e2:	4a 66       	lddpc	r6,8001da78 <configure_gps+0x9e>
8001d9e4:	1e 26       	rsub	r6,pc
	ubx_cfg_nav_rate_send msg;
	const unsigned baudrates[4] = {9600U, 19200U, 38400U, 57600U};

	const char *set_binary = UBLOX_SET_BINARY;
8001d9e6:	fe c8 00 2e 	sub	r8,pc,46
8001d9ea:	ef 48 ff fc 	st.w	r7[-4],r8
// 	for (uint8_t i=0; i<4; i++)
// 	{
	
	//dbg_print("Set to binary mode ");
	//dbg_print(set_binary);
	putstring(&(centralData->gps_stream_out),set_binary);
8001d9ee:	ec f8 00 00 	ld.w	r8,r6[0]
8001d9f2:	70 08       	ld.w	r8,r8[0x0]
8001d9f4:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001d9f8:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d9fc:	10 9c       	mov	r12,r8
8001d9fe:	f0 16 00 34 	mcall	r6[208]
	
	
	//_port->begin(38400U);

	// ask for navigation solutions every 200ms
	msg.measure_rate_ms = 200;		// ms
8001da02:	e0 68 00 c8 	mov	r8,200
8001da06:	ef 58 ff f6 	st.h	r7[-10],r8
	msg.nav_rate        = 1;		// constant equal to 1
8001da0a:	30 18       	mov	r8,1
8001da0c:	ef 58 ff f8 	st.h	r7[-8],r8
	msg.timeref         = 0;		// 0:UTC time, 1:GPS time
8001da10:	30 08       	mov	r8,0
8001da12:	ef 58 ff fa 	st.h	r7[-6],r8
	
	ubx_send_message_CFG_nav_rate(UBX_CLASS_CFG, MSG_CFG_RATE, msg, sizeof(msg));
8001da16:	20 2d       	sub	sp,8
8001da18:	1a 98       	mov	r8,sp
8001da1a:	ee c9 00 0a 	sub	r9,r7,10
8001da1e:	30 6a       	mov	r10,6
8001da20:	12 9b       	mov	r11,r9
8001da22:	10 9c       	mov	r12,r8
8001da24:	f0 16 00 1b 	mcall	r6[108]
8001da28:	30 6a       	mov	r10,6
8001da2a:	30 8b       	mov	r11,8
8001da2c:	30 6c       	mov	r12,6
8001da2e:	f0 16 01 a0 	mcall	r6[1664]
8001da32:	2f ed       	sub	sp,-8

	// ask for the messages we parse to be sent on every navigation solution
	//dbg_print("Set navigation messages\n");
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_POSLLH, 1);
8001da34:	30 1a       	mov	r10,1
8001da36:	30 2b       	mov	r11,2
8001da38:	30 1c       	mov	r12,1
8001da3a:	f0 16 00 5f 	mcall	r6[380]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_STATUS, 1);
8001da3e:	30 1a       	mov	r10,1
8001da40:	30 3b       	mov	r11,3
8001da42:	30 1c       	mov	r12,1
8001da44:	f0 16 00 5f 	mcall	r6[380]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_SOL, 1);
8001da48:	30 1a       	mov	r10,1
8001da4a:	30 6b       	mov	r11,6
8001da4c:	30 1c       	mov	r12,1
8001da4e:	f0 16 00 5f 	mcall	r6[380]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_VELNED, 1);
8001da52:	30 1a       	mov	r10,1
8001da54:	31 2b       	mov	r11,18
8001da56:	30 1c       	mov	r12,1
8001da58:	f0 16 00 5f 	mcall	r6[380]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_SVINFO, 1);
8001da5c:	30 1a       	mov	r10,1
8001da5e:	33 0b       	mov	r11,48
8001da60:	30 1c       	mov	r12,1
8001da62:	f0 16 00 5f 	mcall	r6[380]

	// ask for the current navigation settings
	//Debug("Asking for engine setting\n");
	//dbg_print("Asking for engine setting\n");
	ubx_send_message_nav_settings(UBX_CLASS_CFG, MSG_CFG_NAV_SETTINGS, NULL, 0);
8001da66:	30 09       	mov	r9,0
8001da68:	30 0a       	mov	r10,0
8001da6a:	32 4b       	mov	r11,36
8001da6c:	30 6c       	mov	r12,6
8001da6e:	f0 16 01 03 	mcall	r6[1036]
}
8001da72:	2f dd       	sub	sp,-12
8001da74:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001da78:	80 01       	ld.sh	r1,r0[0x0]
8001da7a:	d8 68       	*unknown*

8001da7c <gps_update>:
************************************************************************************
The function that needs to be called to get the GPS information
************************************************************************************
*/
void gps_update(void)
{
8001da7c:	eb cd 40 c0 	pushm	r6-r7,lr
8001da80:	1a 97       	mov	r7,sp
8001da82:	20 2d       	sub	sp,8
8001da84:	fe f6 02 08 	ld.w	r6,pc[520]
8001da88:	1e 26       	rsub	r6,pc
	bool result;
	uint32_t tnow;
	
	result = ubx_read();
8001da8a:	f0 16 01 a7 	mcall	r6[1692]
8001da8e:	18 98       	mov	r8,r12
8001da90:	ef 68 ff fb 	st.b	r7[-5],r8
	
	tnow = get_millis();
8001da94:	f0 16 00 0f 	mcall	r6[60]
8001da98:	18 98       	mov	r8,r12
8001da9a:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if (! result)
8001da9e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8001daa2:	ec 18 00 01 	eorl	r8,0x1
8001daa6:	5c 58       	castu.b	r8
8001daa8:	c1 f0       	breq	8001dae6 <gps_update+0x6a>
	{
		if ((tnow - idleTimer) > idleTimeout)
8001daaa:	ec f8 03 3c 	ld.w	r8,r6[828]
8001daae:	70 08       	ld.w	r8,r8[0x0]
8001dab0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001dab4:	10 19       	sub	r9,r8
8001dab6:	ec f8 04 40 	ld.w	r8,r6[1088]
8001daba:	70 08       	ld.w	r8,r8[0x0]
8001dabc:	10 39       	cp.w	r9,r8
8001dabe:	e0 88 00 e3 	brls	8001dc84 <gps_update+0x208>
		{
			/*dbg_print("gps read timeout ");
			dbg_print_num(tnow,10);
			dbg_print("\n");
			*/
			centralData->GPS_data.status = NO_GPS;
8001dac2:	ec f8 00 00 	ld.w	r8,r6[0]
8001dac6:	70 09       	ld.w	r9,r8[0x0]
8001dac8:	30 08       	mov	r8,0
8001daca:	f3 68 07 9c 	st.b	r9[1948],r8
			
			init_gps_ubx(engine_nav_setting);
8001dace:	ec f8 01 ec 	ld.w	r8,r6[492]
8001dad2:	70 08       	ld.w	r8,r8[0x0]
8001dad4:	10 9c       	mov	r12,r8
8001dad6:	f0 16 01 6f 	mcall	r6[1468]
			idleTimer = tnow;
8001dada:	ec f8 03 3c 	ld.w	r8,r6[828]
8001dade:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001dae2:	91 09       	st.w	r8[0x0],r9
8001dae4:	cd 08       	rjmp	8001dc84 <gps_update+0x208>
		
// 		valid_read = true;
// 		new_data = true;

		// reset the idle timer
		idleTimer = tnow;
8001dae6:	ec f8 03 3c 	ld.w	r8,r6[828]
8001daea:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001daee:	91 09       	st.w	r8[0x0],r9
		
		centralData->GPS_data.timeLastMsg = tnow;
8001daf0:	ec f8 00 00 	ld.w	r8,r6[0]
8001daf4:	70 08       	ld.w	r8,r8[0x0]
8001daf6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001dafa:	f1 49 07 94 	st.w	r8[1940],r9
		
		if(centralData->GPS_data.status == GPS_OK)
8001dafe:	ec f8 00 00 	ld.w	r8,r6[0]
8001db02:	70 08       	ld.w	r8,r8[0x0]
8001db04:	f1 39 07 9c 	ld.ub	r9,r8[1948]
8001db08:	30 28       	mov	r8,2
8001db0a:	f0 09 18 00 	cp.b	r9,r8
8001db0e:	e0 81 00 9d 	brne	8001dc48 <gps_update+0x1cc>
		{
			// Check for horizontal accuracy
			if (centralData->GPS_data.horizontalAccuracy < UBX_POSITION_PRECISION)
8001db12:	ec f8 00 00 	ld.w	r8,r6[0]
8001db16:	70 08       	ld.w	r8,r8[0x0]
8001db18:	f0 fa 07 80 	ld.w	r10,r8[1920]
8001db1c:	30 18       	mov	r8,1
8001db1e:	fc 19 41 a0 	movh	r9,0x41a0
8001db22:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001db26:	e0 8c 00 03 	brvs	8001db2c <gps_update+0xb0>
8001db2a:	c0 25       	brlt	8001db2e <gps_update+0xb2>
8001db2c:	30 08       	mov	r8,0
8001db2e:	5c 58       	castu.b	r8
8001db30:	c0 80       	breq	8001db40 <gps_update+0xc4>
			{
				centralData->GPS_data.horizontalStatus = 1;
8001db32:	ec f8 00 00 	ld.w	r8,r6[0]
8001db36:	70 09       	ld.w	r9,r8[0x0]
8001db38:	30 18       	mov	r8,1
8001db3a:	f3 68 07 9d 	st.b	r9[1949],r8
8001db3e:	c0 78       	rjmp	8001db4c <gps_update+0xd0>
			}else{  
				centralData->GPS_data.horizontalStatus = 0;
8001db40:	ec f8 00 00 	ld.w	r8,r6[0]
8001db44:	70 09       	ld.w	r9,r8[0x0]
8001db46:	30 08       	mov	r8,0
8001db48:	f3 68 07 9d 	st.b	r9[1949],r8
			}
			// Check for vertical accuracy
			if (centralData->GPS_data.verticalAccuracy < UBX_ALTITUDE_PRECISION)
8001db4c:	ec f8 00 00 	ld.w	r8,r6[0]
8001db50:	70 08       	ld.w	r8,r8[0x0]
8001db52:	f0 fa 07 84 	ld.w	r10,r8[1924]
8001db56:	30 18       	mov	r8,1
8001db58:	fc 19 41 a0 	movh	r9,0x41a0
8001db5c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001db60:	e0 8c 00 03 	brvs	8001db66 <gps_update+0xea>
8001db64:	c0 25       	brlt	8001db68 <gps_update+0xec>
8001db66:	30 08       	mov	r8,0
8001db68:	5c 58       	castu.b	r8
8001db6a:	c0 80       	breq	8001db7a <gps_update+0xfe>
			{
				centralData->GPS_data.altitudeStatus = 1;
8001db6c:	ec f8 00 00 	ld.w	r8,r6[0]
8001db70:	70 09       	ld.w	r9,r8[0x0]
8001db72:	30 18       	mov	r8,1
8001db74:	f3 68 07 9e 	st.b	r9[1950],r8
8001db78:	c0 78       	rjmp	8001db86 <gps_update+0x10a>
			}else{
				centralData->GPS_data.altitudeStatus = 0;
8001db7a:	ec f8 00 00 	ld.w	r8,r6[0]
8001db7e:	70 09       	ld.w	r9,r8[0x0]
8001db80:	30 08       	mov	r8,0
8001db82:	f3 68 07 9e 	st.b	r9[1950],r8
			}
			// Check for speed accuracy
			if (centralData->GPS_data.speedAccuracy < UBX_SPEED_PRECISION)
8001db86:	ec f8 00 00 	ld.w	r8,r6[0]
8001db8a:	70 08       	ld.w	r8,r8[0x0]
8001db8c:	f0 fa 07 88 	ld.w	r10,r8[1928]
8001db90:	30 18       	mov	r8,1
8001db92:	fc 19 40 a0 	movh	r9,0x40a0
8001db96:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001db9a:	e0 8c 00 03 	brvs	8001dba0 <gps_update+0x124>
8001db9e:	c0 25       	brlt	8001dba2 <gps_update+0x126>
8001dba0:	30 08       	mov	r8,0
8001dba2:	5c 58       	castu.b	r8
8001dba4:	c0 80       	breq	8001dbb4 <gps_update+0x138>
			{
				centralData->GPS_data.speedStatus = 1;
8001dba6:	ec f8 00 00 	ld.w	r8,r6[0]
8001dbaa:	70 09       	ld.w	r9,r8[0x0]
8001dbac:	30 18       	mov	r8,1
8001dbae:	f3 68 07 9f 	st.b	r9[1951],r8
8001dbb2:	c0 78       	rjmp	8001dbc0 <gps_update+0x144>
			}else{
				centralData->GPS_data.speedStatus = 0;
8001dbb4:	ec f8 00 00 	ld.w	r8,r6[0]
8001dbb8:	70 09       	ld.w	r9,r8[0x0]
8001dbba:	30 08       	mov	r8,0
8001dbbc:	f3 68 07 9f 	st.b	r9[1951],r8
			}
			// Check for heading accuracy
			if (centralData->GPS_data.headingAccuracy < UBX_HEADING_PRECISION)
8001dbc0:	ec f8 00 00 	ld.w	r8,r6[0]
8001dbc4:	70 08       	ld.w	r8,r8[0x0]
8001dbc6:	f0 fa 07 8c 	ld.w	r10,r8[1932]
8001dbca:	30 18       	mov	r8,1
8001dbcc:	e0 69 96 80 	mov	r9,38528
8001dbd0:	ea 19 4a 98 	orh	r9,0x4a98
8001dbd4:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001dbd8:	e0 8c 00 03 	brvs	8001dbde <gps_update+0x162>
8001dbdc:	c0 25       	brlt	8001dbe0 <gps_update+0x164>
8001dbde:	30 08       	mov	r8,0
8001dbe0:	5c 58       	castu.b	r8
8001dbe2:	c0 80       	breq	8001dbf2 <gps_update+0x176>
			{
				centralData->GPS_data.courseStatus = 1;
8001dbe4:	ec f8 00 00 	ld.w	r8,r6[0]
8001dbe8:	70 09       	ld.w	r9,r8[0x0]
8001dbea:	30 18       	mov	r8,1
8001dbec:	f3 68 07 a0 	st.b	r9[1952],r8
8001dbf0:	c0 78       	rjmp	8001dbfe <gps_update+0x182>
				}else{
				centralData->GPS_data.courseStatus = 0;
8001dbf2:	ec f8 00 00 	ld.w	r8,r6[0]
8001dbf6:	70 09       	ld.w	r9,r8[0x0]
8001dbf8:	30 08       	mov	r8,0
8001dbfa:	f3 68 07 a0 	st.b	r9[1952],r8
			}
			
			centralData->GPS_data.accuracyStatus = centralData->GPS_data.horizontalStatus & centralData->GPS_data.altitudeStatus & centralData->GPS_data.speedStatus & centralData->GPS_data.courseStatus;
8001dbfe:	ec f8 00 00 	ld.w	r8,r6[0]
8001dc02:	70 09       	ld.w	r9,r8[0x0]
8001dc04:	ec f8 00 00 	ld.w	r8,r6[0]
8001dc08:	70 08       	ld.w	r8,r8[0x0]
8001dc0a:	f1 3a 07 9d 	ld.ub	r10,r8[1949]
8001dc0e:	ec f8 00 00 	ld.w	r8,r6[0]
8001dc12:	70 08       	ld.w	r8,r8[0x0]
8001dc14:	f1 38 07 9e 	ld.ub	r8,r8[1950]
8001dc18:	f5 e8 00 08 	and	r8,r10,r8
8001dc1c:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8001dc20:	ec f8 00 00 	ld.w	r8,r6[0]
8001dc24:	70 08       	ld.w	r8,r8[0x0]
8001dc26:	f1 38 07 9f 	ld.ub	r8,r8[1951]
8001dc2a:	f5 e8 00 08 	and	r8,r10,r8
8001dc2e:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8001dc32:	ec f8 00 00 	ld.w	r8,r6[0]
8001dc36:	70 08       	ld.w	r8,r8[0x0]
8001dc38:	f1 38 07 a0 	ld.ub	r8,r8[1952]
8001dc3c:	f5 e8 00 08 	and	r8,r10,r8
8001dc40:	5c 58       	castu.b	r8
8001dc42:	f3 68 07 a1 	st.b	r9[1953],r8
8001dc46:	c1 f8       	rjmp	8001dc84 <gps_update+0x208>
// 				
// 				// no good way to get descent rate
// 				centralData->GPS_data.verticalSpeed = 0;
// 			}
		}else{
			centralData->GPS_data.horizontalStatus = 0;
8001dc48:	ec f8 00 00 	ld.w	r8,r6[0]
8001dc4c:	70 09       	ld.w	r9,r8[0x0]
8001dc4e:	30 08       	mov	r8,0
8001dc50:	f3 68 07 9d 	st.b	r9[1949],r8
			centralData->GPS_data.altitudeStatus = 0;
8001dc54:	ec f8 00 00 	ld.w	r8,r6[0]
8001dc58:	70 09       	ld.w	r9,r8[0x0]
8001dc5a:	30 08       	mov	r8,0
8001dc5c:	f3 68 07 9e 	st.b	r9[1950],r8
			centralData->GPS_data.speedStatus = 0;
8001dc60:	ec f8 00 00 	ld.w	r8,r6[0]
8001dc64:	70 09       	ld.w	r9,r8[0x0]
8001dc66:	30 08       	mov	r8,0
8001dc68:	f3 68 07 9f 	st.b	r9[1951],r8
			centralData->GPS_data.courseStatus = 0;
8001dc6c:	ec f8 00 00 	ld.w	r8,r6[0]
8001dc70:	70 09       	ld.w	r9,r8[0x0]
8001dc72:	30 08       	mov	r8,0
8001dc74:	f3 68 07 a0 	st.b	r9[1952],r8
			
			centralData->GPS_data.accuracyStatus = 0;
8001dc78:	ec f8 00 00 	ld.w	r8,r6[0]
8001dc7c:	70 09       	ld.w	r9,r8[0x0]
8001dc7e:	30 08       	mov	r8,0
8001dc80:	f3 68 07 a1 	st.b	r9[1953],r8
		}
	}
}
8001dc84:	2f ed       	sub	sp,-8
8001dc86:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001dc8a:	00 00       	add	r0,r0
8001dc8c:	80 01       	ld.sh	r1,r0[0x0]
8001dc8e:	d9 0c       	*unknown*

8001dc90 <newValidGpsMsg>:
/*
* This function returns true if there is a new valid GPS message that arrived at time tnow
* false otherwise
*/
bool newValidGpsMsg(uint32_t *prevGpsMsgTime)
{
8001dc90:	eb cd 40 c0 	pushm	r6-r7,lr
8001dc94:	1a 97       	mov	r7,sp
8001dc96:	20 1d       	sub	sp,4
8001dc98:	49 36       	lddpc	r6,8001dce4 <newValidGpsMsg+0x54>
8001dc9a:	1e 26       	rsub	r6,pc
8001dc9c:	ef 4c ff fc 	st.w	r7[-4],r12
	
	
	if((*prevGpsMsgTime != centralData->GPS_data.timeLastMsg)&&(centralData->GPS_data.status == GPS_OK)//&&(centralData->GPS_data.accuracyStatus == 1)
8001dca0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001dca4:	70 09       	ld.w	r9,r8[0x0]
8001dca6:	ec f8 00 00 	ld.w	r8,r6[0]
8001dcaa:	70 08       	ld.w	r8,r8[0x0]
8001dcac:	f0 f8 07 94 	ld.w	r8,r8[1940]
8001dcb0:	10 39       	cp.w	r9,r8
8001dcb2:	c1 40       	breq	8001dcda <newValidGpsMsg+0x4a>
8001dcb4:	ec f8 00 00 	ld.w	r8,r6[0]
8001dcb8:	70 08       	ld.w	r8,r8[0x0]
8001dcba:	f1 39 07 9c 	ld.ub	r9,r8[1948]
8001dcbe:	30 28       	mov	r8,2
8001dcc0:	f0 09 18 00 	cp.b	r9,r8
8001dcc4:	c0 b1       	brne	8001dcda <newValidGpsMsg+0x4a>
	)
	{
		*prevGpsMsgTime = centralData->GPS_data.timeLastMsg;
8001dcc6:	ec f8 00 00 	ld.w	r8,r6[0]
8001dcca:	70 08       	ld.w	r8,r8[0x0]
8001dccc:	f0 f9 07 94 	ld.w	r9,r8[1940]
8001dcd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001dcd4:	91 09       	st.w	r8[0x0],r9
		return true;
8001dcd6:	30 18       	mov	r8,1
8001dcd8:	c0 28       	rjmp	8001dcdc <newValidGpsMsg+0x4c>
	}else{
		return false;
8001dcda:	30 08       	mov	r8,0
	}
	
	
}
8001dcdc:	10 9c       	mov	r12,r8
8001dcde:	2f fd       	sub	sp,-4
8001dce0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001dce4:	80 01       	ld.sh	r1,r0[0x0]
8001dce6:	db 1e       	*unknown*

8001dce8 <ubx_GetPosllh>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid posllh message, or 0.
*/
ubx_nav_posllh * ubx_GetPosllh()
{
8001dce8:	eb cd 40 c0 	pushm	r6-r7,lr
8001dcec:	1a 97       	mov	r7,sp
8001dcee:	48 86       	lddpc	r6,8001dd0c <ubx_GetPosllh+0x24>
8001dcf0:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidPosllhMessage)
8001dcf2:	ec f8 04 9c 	ld.w	r8,r6[1180]
8001dcf6:	90 08       	ld.sh	r8,r8[0x0]
8001dcf8:	58 08       	cp.w	r8,0
8001dcfa:	c0 50       	breq	8001dd04 <ubx_GetPosllh+0x1c>
	return ubx_lastPosllhMessage;
8001dcfc:	ec f8 03 94 	ld.w	r8,r6[916]
8001dd00:	70 08       	ld.w	r8,r8[0x0]
8001dd02:	c0 28       	rjmp	8001dd06 <ubx_GetPosllh+0x1e>
	else
	return 0;
8001dd04:	30 08       	mov	r8,0
}
8001dd06:	10 9c       	mov	r12,r8
8001dd08:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001dd0c:	80 01       	ld.sh	r1,r0[0x0]
8001dd0e:	db 74       	*unknown*

8001dd10 <ubx_GetStatus>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_nav_status * ubx_GetStatus()
{
8001dd10:	eb cd 40 c0 	pushm	r6-r7,lr
8001dd14:	1a 97       	mov	r7,sp
8001dd16:	48 86       	lddpc	r6,8001dd34 <ubx_GetStatus+0x24>
8001dd18:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidStatusMessage)
8001dd1a:	ec f8 04 5c 	ld.w	r8,r6[1116]
8001dd1e:	90 08       	ld.sh	r8,r8[0x0]
8001dd20:	58 08       	cp.w	r8,0
8001dd22:	c0 50       	breq	8001dd2c <ubx_GetStatus+0x1c>
	return ubx_lastStatusMessage;
8001dd24:	ec f8 03 98 	ld.w	r8,r6[920]
8001dd28:	70 08       	ld.w	r8,r8[0x0]
8001dd2a:	c0 28       	rjmp	8001dd2e <ubx_GetStatus+0x1e>
	else
	return 0;
8001dd2c:	30 08       	mov	r8,0
}
8001dd2e:	10 9c       	mov	r12,r8
8001dd30:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001dd34:	80 01       	ld.sh	r1,r0[0x0]
8001dd36:	db 9c       	*unknown*

8001dd38 <ubx_GetSolution>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid velned message, or 0.
*/
ubx_nav_solution * ubx_GetSolution()
{
8001dd38:	eb cd 40 c0 	pushm	r6-r7,lr
8001dd3c:	1a 97       	mov	r7,sp
8001dd3e:	48 86       	lddpc	r6,8001dd5c <ubx_GetSolution+0x24>
8001dd40:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidSolutionMessage)
8001dd42:	ec f8 04 b4 	ld.w	r8,r6[1204]
8001dd46:	90 08       	ld.sh	r8,r8[0x0]
8001dd48:	58 08       	cp.w	r8,0
8001dd4a:	c0 50       	breq	8001dd54 <ubx_GetSolution+0x1c>
	return ubx_lastSolutionMessage;
8001dd4c:	ec f8 04 00 	ld.w	r8,r6[1024]
8001dd50:	70 08       	ld.w	r8,r8[0x0]
8001dd52:	c0 28       	rjmp	8001dd56 <ubx_GetSolution+0x1e>
	else
	return 0;
8001dd54:	30 08       	mov	r8,0
}
8001dd56:	10 9c       	mov	r12,r8
8001dd58:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001dd5c:	80 01       	ld.sh	r1,r0[0x0]
8001dd5e:	db c4       	*unknown*

8001dd60 <ubx_GetVelned>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid velned message, or 0.
*/
ubx_nav_velned * ubx_GetVelned()
{
8001dd60:	eb cd 40 c0 	pushm	r6-r7,lr
8001dd64:	1a 97       	mov	r7,sp
8001dd66:	48 86       	lddpc	r6,8001dd84 <ubx_GetVelned+0x24>
8001dd68:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidVelnedMessage)
8001dd6a:	ec f8 04 c0 	ld.w	r8,r6[1216]
8001dd6e:	90 08       	ld.sh	r8,r8[0x0]
8001dd70:	58 08       	cp.w	r8,0
8001dd72:	c0 50       	breq	8001dd7c <ubx_GetVelned+0x1c>
	return ubx_lastVelnedMessage;
8001dd74:	ec f8 04 b0 	ld.w	r8,r6[1200]
8001dd78:	70 08       	ld.w	r8,r8[0x0]
8001dd7a:	c0 28       	rjmp	8001dd7e <ubx_GetVelned+0x1e>
	else
	return 0;
8001dd7c:	30 08       	mov	r8,0
}
8001dd7e:	10 9c       	mov	r12,r8
8001dd80:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001dd84:	80 01       	ld.sh	r1,r0[0x0]
8001dd86:	db ec       	*unknown*

8001dd88 <ubx_GetSVInfo>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_nav_SVInfo * ubx_GetSVInfo()
{
8001dd88:	eb cd 40 c0 	pushm	r6-r7,lr
8001dd8c:	1a 97       	mov	r7,sp
8001dd8e:	48 86       	lddpc	r6,8001ddac <ubx_GetSVInfo+0x24>
8001dd90:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidSVInfoMessage)
8001dd92:	ec f8 03 c8 	ld.w	r8,r6[968]
8001dd96:	90 08       	ld.sh	r8,r8[0x0]
8001dd98:	58 08       	cp.w	r8,0
8001dd9a:	c0 50       	breq	8001dda4 <ubx_GetSVInfo+0x1c>
	return ubx_lastSVInfoMessage;
8001dd9c:	ec f8 04 94 	ld.w	r8,r6[1172]
8001dda0:	70 08       	ld.w	r8,r8[0x0]
8001dda2:	c0 28       	rjmp	8001dda6 <ubx_GetSVInfo+0x1e>
	else
	return 0;
8001dda4:	30 08       	mov	r8,0
}
8001dda6:	10 9c       	mov	r12,r8
8001dda8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ddac:	80 01       	ld.sh	r1,r0[0x0]
8001ddae:	dc 14       	*unknown*

8001ddb0 <ubx_GetNavSettings>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_cfg_nav_settings * ubx_GetNavSettings()
{
8001ddb0:	eb cd 40 c0 	pushm	r6-r7,lr
8001ddb4:	1a 97       	mov	r7,sp
8001ddb6:	48 86       	lddpc	r6,8001ddd4 <ubx_GetNavSettings+0x24>
8001ddb8:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidNavSettingsMessage)
8001ddba:	ec f8 04 78 	ld.w	r8,r6[1144]
8001ddbe:	90 08       	ld.sh	r8,r8[0x0]
8001ddc0:	58 08       	cp.w	r8,0
8001ddc2:	c0 50       	breq	8001ddcc <ubx_GetNavSettings+0x1c>
	return ubx_lastNavSettingsMessage;
8001ddc4:	ec f8 04 a8 	ld.w	r8,r6[1192]
8001ddc8:	70 08       	ld.w	r8,r8[0x0]
8001ddca:	c0 28       	rjmp	8001ddce <ubx_GetNavSettings+0x1e>
	else
	return 0;
8001ddcc:	30 08       	mov	r8,0
}
8001ddce:	10 9c       	mov	r12,r8
8001ddd0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ddd4:	80 01       	ld.sh	r1,r0[0x0]
8001ddd6:	dc 3c       	*unknown*

8001ddd8 <ubx_GetMsgRate>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_cfg_msg_rate * ubx_GetMsgRate()
{
8001ddd8:	eb cd 40 c0 	pushm	r6-r7,lr
8001dddc:	1a 97       	mov	r7,sp
8001ddde:	48 86       	lddpc	r6,8001ddfc <ubx_GetMsgRate+0x24>
8001dde0:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidCFGSetGetRateMessage)
8001dde2:	ec f8 04 d8 	ld.w	r8,r6[1240]
8001dde6:	90 08       	ld.sh	r8,r8[0x0]
8001dde8:	58 08       	cp.w	r8,0
8001ddea:	c0 50       	breq	8001ddf4 <ubx_GetMsgRate+0x1c>
	return ubx_lastCFGSetGetRateMessage;
8001ddec:	ec f8 04 10 	ld.w	r8,r6[1040]
8001ddf0:	70 08       	ld.w	r8,r8[0x0]
8001ddf2:	c0 28       	rjmp	8001ddf6 <ubx_GetMsgRate+0x1e>
	else
	return 0;
8001ddf4:	30 08       	mov	r8,0
}
8001ddf6:	10 9c       	mov	r12,r8
8001ddf8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ddfc:	80 01       	ld.sh	r1,r0[0x0]
8001ddfe:	dc 64       	*unknown*

8001de00 <ubx_GetMonRXR>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_mon_rxr_struct * ubx_GetMonRXR()
{
8001de00:	eb cd 40 c0 	pushm	r6-r7,lr
8001de04:	1a 97       	mov	r7,sp
8001de06:	48 86       	lddpc	r6,8001de24 <ubx_GetMonRXR+0x24>
8001de08:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidMONRXRMessage)
8001de0a:	ec f8 04 bc 	ld.w	r8,r6[1212]
8001de0e:	90 08       	ld.sh	r8,r8[0x0]
8001de10:	58 08       	cp.w	r8,0
8001de12:	c0 50       	breq	8001de1c <ubx_GetMonRXR+0x1c>
	return ubx_lastMONRXRMessage;
8001de14:	ec f8 03 f8 	ld.w	r8,r6[1016]
8001de18:	70 08       	ld.w	r8,r8[0x0]
8001de1a:	c0 28       	rjmp	8001de1e <ubx_GetMonRXR+0x1e>
	else
	return 0;
8001de1c:	30 08       	mov	r8,0
}
8001de1e:	10 9c       	mov	r12,r8
8001de20:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001de24:	80 01       	ld.sh	r1,r0[0x0]
8001de26:	dc 8c       	*unknown*

8001de28 <ubx_GetTimTP>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_tim_tp * ubx_GetTimTP()
{
8001de28:	eb cd 40 c0 	pushm	r6-r7,lr
8001de2c:	1a 97       	mov	r7,sp
8001de2e:	48 86       	lddpc	r6,8001de4c <ubx_GetTimTP+0x24>
8001de30:	1e 26       	rsub	r6,pc
	if(ubx_numberOfValidTimTPMessage)
8001de32:	ec f8 04 7c 	ld.w	r8,r6[1148]
8001de36:	90 08       	ld.sh	r8,r8[0x0]
8001de38:	58 08       	cp.w	r8,0
8001de3a:	c0 50       	breq	8001de44 <ubx_GetTimTP+0x1c>
	return ubx_lastTimTPMessage;
8001de3c:	ec f8 04 38 	ld.w	r8,r6[1080]
8001de40:	70 08       	ld.w	r8,r8[0x0]
8001de42:	c0 28       	rjmp	8001de46 <ubx_GetTimTP+0x1e>
	else
	return 0;
8001de44:	30 08       	mov	r8,0
}
8001de46:	10 9c       	mov	r12,r8
8001de48:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001de4c:	80 01       	ld.sh	r1,r0[0x0]
8001de4e:	dc b4       	*unknown*

8001de50 <ubx_GetTimVRFY>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_tim_vrfy * ubx_GetTimVRFY()
{
8001de50:	eb cd 40 c0 	pushm	r6-r7,lr
8001de54:	1a 97       	mov	r7,sp
8001de56:	48 86       	lddpc	r6,8001de74 <ubx_GetTimVRFY+0x24>
8001de58:	1e 26       	rsub	r6,pc
	if(ubx_numberOfValidTimVRFYMessage)
8001de5a:	ec f8 04 84 	ld.w	r8,r6[1156]
8001de5e:	90 08       	ld.sh	r8,r8[0x0]
8001de60:	58 08       	cp.w	r8,0
8001de62:	c0 50       	breq	8001de6c <ubx_GetTimVRFY+0x1c>
	return ubx_lastTimVRFYMessage;
8001de64:	ec f8 04 50 	ld.w	r8,r6[1104]
8001de68:	70 08       	ld.w	r8,r8[0x0]
8001de6a:	c0 28       	rjmp	8001de6e <ubx_GetTimVRFY+0x1e>
	else
	return 0;
8001de6c:	30 08       	mov	r8,0
}
8001de6e:	10 9c       	mov	r12,r8
8001de70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001de74:	80 01       	ld.sh	r1,r0[0x0]
8001de76:	dc dc       	*unknown*

8001de78 <ToRad>:

float ToRad(float numdeg)
{
8001de78:	eb cd 40 c0 	pushm	r6-r7,lr
8001de7c:	1a 97       	mov	r7,sp
8001de7e:	20 1d       	sub	sp,4
8001de80:	49 46       	lddpc	r6,8001ded0 <ToRad+0x58>
8001de82:	1e 26       	rsub	r6,pc
8001de84:	ef 4c ff fc 	st.w	r7[-4],r12
	return numdeg * DEG2RAD;
8001de88:	ee fc ff fc 	ld.w	r12,r7[-4]
8001de8c:	f0 16 00 02 	mcall	r6[8]
8001de90:	e0 68 2d 18 	mov	r8,11544
8001de94:	ea 18 54 44 	orh	r8,0x5444
8001de98:	e0 69 21 fb 	mov	r9,8699
8001de9c:	ea 19 40 09 	orh	r9,0x4009
8001dea0:	f0 16 00 03 	mcall	r6[12]
8001dea4:	14 98       	mov	r8,r10
8001dea6:	16 99       	mov	r9,r11
8001dea8:	10 9a       	mov	r10,r8
8001deaa:	12 9b       	mov	r11,r9
8001deac:	30 08       	mov	r8,0
8001deae:	e0 69 80 00 	mov	r9,32768
8001deb2:	ea 19 40 66 	orh	r9,0x4066
8001deb6:	f0 16 00 0c 	mcall	r6[48]
8001deba:	14 98       	mov	r8,r10
8001debc:	16 99       	mov	r9,r11
8001debe:	10 9a       	mov	r10,r8
8001dec0:	12 9b       	mov	r11,r9
8001dec2:	f0 16 00 09 	mcall	r6[36]
8001dec6:	18 98       	mov	r8,r12
8001dec8:	10 9c       	mov	r12,r8
8001deca:	2f fd       	sub	sp,-4
8001decc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ded0:	80 01       	ld.sh	r1,r0[0x0]
8001ded2:	dd 06       	*unknown*

8001ded4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8001ded4:	eb cd 40 c0 	pushm	r6-r7,lr
8001ded8:	1a 97       	mov	r7,sp
8001deda:	20 6d       	sub	sp,24
8001dedc:	49 e6       	lddpc	r6,8001df54 <interpolate+0x80>
8001dede:	1e 26       	rsub	r6,pc
8001dee0:	ef 4c ff f8 	st.w	r7[-8],r12
8001dee4:	ef 4b ff f4 	st.w	r7[-12],r11
8001dee8:	ef 4a ff f0 	st.w	r7[-16],r10
8001deec:	ef 49 ff ec 	st.w	r7[-20],r9
8001def0:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001def4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001def8:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001defc:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001df00:	c0 41       	brne	8001df08 <interpolate+0x34>
	{
		return y1;
8001df02:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001df06:	c2 38       	rjmp	8001df4c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8001df08:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001df0c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001df10:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001df14:	ee fa ff f8 	ld.w	r10,r7[-8]
8001df18:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001df1c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001df20:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001df24:	ee fa ff f0 	ld.w	r10,r7[-16]
8001df28:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001df2c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001df30:	12 9b       	mov	r11,r9
8001df32:	10 9c       	mov	r12,r8
8001df34:	f0 16 00 08 	mcall	r6[32]
8001df38:	18 98       	mov	r8,r12
8001df3a:	10 99       	mov	r9,r8
8001df3c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001df40:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001df44:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8001df48:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8001df4c:	10 9c       	mov	r12,r8
8001df4e:	2f ad       	sub	sp,-24
8001df50:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001df54:	80 01       	ld.sh	r1,r0[0x0]
8001df56:	dd 62       	popm	r4-r9,r11,lr-pc

8001df58 <init_imu>:
#include "time_keeper.h"
#include "print_util.h"
#include "position_estimation.h"

int ic;
void init_imu (Imu_Data_t *imu1) {
8001df58:	eb cd 40 c0 	pushm	r6-r7,lr
8001df5c:	1a 97       	mov	r7,sp
8001df5e:	20 1d       	sub	sp,4
8001df60:	4d 36       	lddpc	r6,8001e0ac <init_imu+0x154>
8001df62:	1e 26       	rsub	r6,pc
8001df64:	ef 4c ff fc 	st.w	r7[-4],r12
	
	
	init_itg3200_slow();	
8001df68:	f0 16 02 21 	mcall	r6[2180]
	init_adxl345_slow();
8001df6c:	f0 16 01 7a 	mcall	r6[1512]
	//init_lsm330();
	
	init_hmc5883_slow();
8001df70:	f0 16 01 f8 	mcall	r6[2016]

	//calibrate_Gyros(imu1);
	imu1->raw_scale[0] =  RAW_GYRO_X_SCALE;
8001df74:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001df78:	e0 69 e0 00 	mov	r9,57344
8001df7c:	ea 19 46 44 	orh	r9,0x4644
8001df80:	f1 49 01 14 	st.w	r8[276],r9
	imu1->raw_scale[1] =  RAW_GYRO_Y_SCALE;
8001df84:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001df88:	e0 69 e0 00 	mov	r9,57344
8001df8c:	ea 19 c6 44 	orh	r9,0xc644
8001df90:	f1 49 01 18 	st.w	r8[280],r9
	imu1->raw_scale[2] =  RAW_GYRO_Z_SCALE;
8001df94:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001df98:	e0 69 e0 00 	mov	r9,57344
8001df9c:	ea 19 46 44 	orh	r9,0x4644
8001dfa0:	f1 49 01 1c 	st.w	r8[284],r9
	imu1->raw_scale[0+ACC_OFFSET] =  RAW_ACC_X_SCALE;
8001dfa4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001dfa8:	e0 69 75 6a 	mov	r9,30058
8001dfac:	ea 19 43 81 	orh	r9,0x4381
8001dfb0:	f1 49 01 20 	st.w	r8[288],r9
	imu1->raw_scale[1+ACC_OFFSET] =  RAW_ACC_Y_SCALE;
8001dfb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001dfb8:	e0 69 7e 1e 	mov	r9,32286
8001dfbc:	ea 19 43 81 	orh	r9,0x4381
8001dfc0:	f1 49 01 24 	st.w	r8[292],r9
	imu1->raw_scale[2+ACC_OFFSET] =  RAW_ACC_Z_SCALE;
8001dfc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001dfc8:	e0 69 0a 9c 	mov	r9,2716
8001dfcc:	ea 19 43 81 	orh	r9,0x4381
8001dfd0:	f1 49 01 28 	st.w	r8[296],r9
	imu1->raw_scale[0+COMPASS_OFFSET] =  RAW_MAG_X_SCALE;
8001dfd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001dfd8:	e0 69 91 bc 	mov	r9,37308
8001dfdc:	ea 19 44 04 	orh	r9,0x4404
8001dfe0:	f1 49 01 2c 	st.w	r8[300],r9
	imu1->raw_scale[1+COMPASS_OFFSET] =  RAW_MAG_Y_SCALE;
8001dfe4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001dfe8:	e0 69 52 c7 	mov	r9,21191
8001dfec:	ea 19 44 03 	orh	r9,0x4403
8001dff0:	f1 49 01 30 	st.w	r8[304],r9
	imu1->raw_scale[2+COMPASS_OFFSET] =  RAW_MAG_Z_SCALE;
8001dff4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001dff8:	e0 69 39 4b 	mov	r9,14667
8001dffc:	ea 19 43 f9 	orh	r9,0x43f9
8001e000:	f1 49 01 34 	st.w	r8[308],r9
	
	imu1->raw_bias[0+GYRO_OFFSET]= 0.0;
8001e004:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e008:	30 09       	mov	r9,0
8001e00a:	f1 49 00 f0 	st.w	r8[240],r9
	imu1->raw_bias[1+GYRO_OFFSET]= 0.0;
8001e00e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e012:	30 09       	mov	r9,0
8001e014:	f1 49 00 f4 	st.w	r8[244],r9
	imu1->raw_bias[2+GYRO_OFFSET]= 0.0;
8001e018:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e01c:	30 09       	mov	r9,0
8001e01e:	f1 49 00 f8 	st.w	r8[248],r9
	//myquad
	// acceleration biais
	imu1->raw_bias[0+ACC_OFFSET]= ACC_BIAIS_X;
8001e022:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e026:	fc 19 41 90 	movh	r9,0x4190
8001e02a:	f1 49 00 fc 	st.w	r8[252],r9
	imu1->raw_bias[1+ACC_OFFSET]= ACC_BIAIS_Y;
8001e02e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e032:	fc 19 41 10 	movh	r9,0x4110
8001e036:	f1 49 01 00 	st.w	r8[256],r9
	imu1->raw_bias[2+ACC_OFFSET]= ACC_BIAIS_Z;
8001e03a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e03e:	fc 19 c1 80 	movh	r9,0xc180
8001e042:	f1 49 01 04 	st.w	r8[260],r9
	
	// magneto bias
	imu1->raw_bias[0+COMPASS_OFFSET]= MAG_BIAIS_X;
8001e046:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e04a:	e0 69 c2 19 	mov	r9,49689
8001e04e:	ea 19 43 03 	orh	r9,0x4303
8001e052:	f1 49 01 08 	st.w	r8[264],r9
	imu1->raw_bias[1+COMPASS_OFFSET]= MAG_BIAIS_Y;
8001e056:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e05a:	e0 69 09 d5 	mov	r9,2517
8001e05e:	ea 19 c1 d1 	orh	r9,0xc1d1
8001e062:	f1 49 01 0c 	st.w	r8[268],r9
	imu1->raw_bias[2+COMPASS_OFFSET]= MAG_BIAIS_Z;
8001e066:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e06a:	e0 69 a8 8d 	mov	r9,43149
8001e06e:	ea 19 42 74 	orh	r9,0x4274
8001e072:	f1 49 01 10 	st.w	r8[272],r9
	
	
	imu_last_update_init = false;
8001e076:	ec f9 03 0c 	ld.w	r9,r6[780]
8001e07a:	30 08       	mov	r8,0
8001e07c:	b2 88       	st.b	r9[0x0],r8
	
	qfInit(&imu1->attitude, imu1->raw_scale, imu1->raw_bias);
8001e07e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e082:	f0 ca ff 10 	sub	r10,r8,-240
8001e086:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e08a:	f0 c9 fe ec 	sub	r9,r8,-276
8001e08e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e092:	12 9b       	mov	r11,r9
8001e094:	10 9c       	mov	r12,r8
8001e096:	f0 16 01 f2 	mcall	r6[1992]
	imu1->attitude.calibration_level=OFF;
8001e09a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001e09e:	30 08       	mov	r8,0
8001e0a0:	f3 68 00 b8 	st.b	r9[184],r8
}
8001e0a4:	2f fd       	sub	sp,-4
8001e0a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e0aa:	00 00       	add	r0,r0
8001e0ac:	80 01       	ld.sh	r1,r0[0x0]
8001e0ae:	dd e6       	*unknown*

8001e0b0 <imu_get_raw_data>:


void imu_get_raw_data(Imu_Data_t *imu1) {
8001e0b0:	eb cd 40 c0 	pushm	r6-r7,lr
8001e0b4:	1a 97       	mov	r7,sp
8001e0b6:	20 5d       	sub	sp,20
8001e0b8:	4b 66       	lddpc	r6,8001e190 <imu_get_raw_data+0xe0>
8001e0ba:	1e 26       	rsub	r6,pc
8001e0bc:	ef 4c ff ec 	st.w	r7[-20],r12
	int i=0;
8001e0c0:	30 08       	mov	r8,0
8001e0c2:	ef 48 ff f0 	st.w	r7[-16],r8
	
	gyro_data* gyros=get_gyro_data_slow();
8001e0c6:	f0 16 01 de 	mcall	r6[1912]
8001e0ca:	18 98       	mov	r8,r12
8001e0cc:	ef 48 ff f4 	st.w	r7[-12],r8
	acc_data* accs=get_acc_data_slow();
8001e0d0:	f0 16 01 ca 	mcall	r6[1832]
8001e0d4:	18 98       	mov	r8,r12
8001e0d6:	ef 48 ff f8 	st.w	r7[-8],r8
	
//	lsm_gyro_data_t* gyros=lsm330_get_gyro_data();
//	lsm_acc_data_t* accs=lsm330_get_acc_data();
	compass_data* compass=get_compass_data_slow();
8001e0da:	f0 16 01 41 	mcall	r6[1284]
8001e0de:	18 98       	mov	r8,r12
8001e0e0:	ef 48 ff fc 	st.w	r7[-4],r8


	imu1->raw_channels[GYRO_OFFSET+IMU_X]=(float)gyros->axes[RAW_GYRO_X];
8001e0e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e0e8:	90 28       	ld.sh	r8,r8[0x4]
8001e0ea:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001e0ee:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001e0f2:	f1 49 00 cc 	st.w	r8[204],r9
	imu1->raw_channels[GYRO_OFFSET+IMU_Y]=(float)gyros->axes[RAW_GYRO_Y];
8001e0f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e0fa:	90 18       	ld.sh	r8,r8[0x2]
8001e0fc:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001e100:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001e104:	f1 49 00 d0 	st.w	r8[208],r9
	imu1->raw_channels[GYRO_OFFSET+IMU_Z]=(float)gyros->axes[RAW_GYRO_Z];
8001e108:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e10c:	90 38       	ld.sh	r8,r8[0x6]
8001e10e:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001e112:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001e116:	f1 49 00 d4 	st.w	r8[212],r9

	imu1->raw_channels[ACC_OFFSET+IMU_X]=(float)accs->axes[RAW_ACC_X];
8001e11a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e11e:	90 38       	ld.sh	r8,r8[0x6]
8001e120:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001e124:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001e128:	f1 49 00 d8 	st.w	r8[216],r9
	imu1->raw_channels[ACC_OFFSET+IMU_Y]=(float)accs->axes[RAW_ACC_Y];
8001e12c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e130:	90 48       	ld.sh	r8,r8[0x8]
8001e132:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001e136:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001e13a:	f1 49 00 dc 	st.w	r8[220],r9
	imu1->raw_channels[ACC_OFFSET+IMU_Z]=(float)accs->axes[RAW_ACC_Z];
8001e13e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e142:	90 58       	ld.sh	r8,r8[0xa]
8001e144:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001e148:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001e14c:	f1 49 00 e0 	st.w	r8[224],r9

	imu1->raw_channels[COMPASS_OFFSET+IMU_X]=(float)-compass->axes[RAW_COMPASS_X];
8001e150:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e154:	90 58       	ld.sh	r8,r8[0xa]
8001e156:	5c 38       	neg	r8
8001e158:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001e15c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001e160:	f1 49 00 e4 	st.w	r8[228],r9
	imu1->raw_channels[COMPASS_OFFSET+IMU_Y]=(float)-compass->axes[RAW_COMPASS_Y];
8001e164:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e168:	90 38       	ld.sh	r8,r8[0x6]
8001e16a:	5c 38       	neg	r8
8001e16c:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001e170:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001e174:	f1 49 00 e8 	st.w	r8[232],r9
	imu1->raw_channels[COMPASS_OFFSET+IMU_Z]=(float)compass->axes[RAW_COMPASS_Z];
8001e178:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e17c:	90 48       	ld.sh	r8,r8[0x8]
8001e17e:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001e182:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001e186:	f1 49 00 ec 	st.w	r8[236],r9
	
}
8001e18a:	2f bd       	sub	sp,-20
8001e18c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e190:	80 01       	ld.sh	r1,r0[0x0]
8001e192:	df 3e       	*unknown*

8001e194 <calibrate_Gyros>:

void calibrate_Gyros(Imu_Data_t *imu1) {
8001e194:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001e198:	1a 97       	mov	r7,sp
8001e19a:	20 3d       	sub	sp,12
8001e19c:	4e 86       	lddpc	r6,8001e33c <calibrate_Gyros+0x1a8>
8001e19e:	1e 26       	rsub	r6,pc
8001e1a0:	ef 4c ff f4 	st.w	r7[-12],r12
	int i,j;
	imu_get_raw_data(imu1);
8001e1a4:	ee fc ff f4 	ld.w	r12,r7[-12]
8001e1a8:	f0 16 00 9d 	mcall	r6[628]
	for (j=0; j<3; j++) {
8001e1ac:	30 08       	mov	r8,0
8001e1ae:	ef 48 ff fc 	st.w	r7[-4],r8
8001e1b2:	c1 48       	rjmp	8001e1da <calibrate_Gyros+0x46>
		imu1->raw_bias[j]=(float)imu1->raw_channels[j];
8001e1b4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001e1b8:	ee fa ff fc 	ld.w	r10,r7[-4]
8001e1bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e1c0:	2c da       	sub	r10,-51
8001e1c2:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8001e1c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e1ca:	2c 49       	sub	r9,-60
8001e1cc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}

void calibrate_Gyros(Imu_Data_t *imu1) {
	int i,j;
	imu_get_raw_data(imu1);
	for (j=0; j<3; j++) {
8001e1d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e1d4:	2f f8       	sub	r8,-1
8001e1d6:	ef 48 ff fc 	st.w	r7[-4],r8
8001e1da:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e1de:	58 28       	cp.w	r8,2
8001e1e0:	fe 9a ff ea 	brle	8001e1b4 <calibrate_Gyros+0x20>
		imu1->raw_bias[j]=(float)imu1->raw_channels[j];
	}
	
	for (i=0; i<100; i++) {
8001e1e4:	30 08       	mov	r8,0
8001e1e6:	ef 48 ff f8 	st.w	r7[-8],r8
8001e1ea:	c9 f8       	rjmp	8001e328 <calibrate_Gyros+0x194>
		imu_get_raw_data(imu1);
8001e1ec:	ee fc ff f4 	ld.w	r12,r7[-12]
8001e1f0:	f0 16 00 9d 	mcall	r6[628]

		//imu1->raw_bias[0+ACC_OFFSET]  = (0.9*imu1->raw_bias[0+ACC_OFFSET]+0.1*(float)imu1->raw_channels[0+ACC_OFFSET]);
		//imu1->raw_bias[1+ACC_OFFSET]  = (0.9*imu1->raw_bias[1+ACC_OFFSET]+0.1*(float)imu1->raw_channels[1+ACC_OFFSET]);
		//imu1->raw_bias[2+ACC_OFFSET]  = (0.9*imu1->raw_bias[2+ACC_OFFSET]+0.1*((float)imu1->raw_channels[2+ACC_OFFSET]-imu1->raw_scale[2+ACC_OFFSET]));
		for (j=0; j<3; j++) {
8001e1f4:	30 08       	mov	r8,0
8001e1f6:	ef 48 ff fc 	st.w	r7[-4],r8
8001e1fa:	c8 a8       	rjmp	8001e30e <calibrate_Gyros+0x17a>
			imu1->raw_bias[j]=(0.9*imu1->raw_bias[j]+0.1*(float)imu1->raw_channels[j]);
8001e1fc:	ee f5 ff fc 	ld.w	r5,r7[-4]
8001e200:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001e204:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e208:	2c 49       	sub	r9,-60
8001e20a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e20e:	10 9c       	mov	r12,r8
8001e210:	f0 16 00 02 	mcall	r6[8]
8001e214:	e0 68 cc cd 	mov	r8,52429
8001e218:	ea 18 cc cc 	orh	r8,0xcccc
8001e21c:	e0 69 cc cc 	mov	r9,52428
8001e220:	ea 19 3f ec 	orh	r9,0x3fec
8001e224:	f0 16 00 03 	mcall	r6[12]
8001e228:	14 98       	mov	r8,r10
8001e22a:	16 99       	mov	r9,r11
8001e22c:	10 92       	mov	r2,r8
8001e22e:	12 93       	mov	r3,r9
8001e230:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001e234:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e238:	2c d9       	sub	r9,-51
8001e23a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e23e:	10 9c       	mov	r12,r8
8001e240:	f0 16 00 02 	mcall	r6[8]
8001e244:	e0 68 99 9a 	mov	r8,39322
8001e248:	ea 18 99 99 	orh	r8,0x9999
8001e24c:	e0 69 99 99 	mov	r9,39321
8001e250:	ea 19 3f b9 	orh	r9,0x3fb9
8001e254:	f0 16 00 03 	mcall	r6[12]
8001e258:	14 98       	mov	r8,r10
8001e25a:	16 99       	mov	r9,r11
8001e25c:	04 9a       	mov	r10,r2
8001e25e:	06 9b       	mov	r11,r3
8001e260:	f0 16 00 05 	mcall	r6[20]
8001e264:	14 98       	mov	r8,r10
8001e266:	16 99       	mov	r9,r11
8001e268:	10 9a       	mov	r10,r8
8001e26a:	12 9b       	mov	r11,r9
8001e26c:	f0 16 00 09 	mcall	r6[36]
8001e270:	18 9a       	mov	r10,r12
8001e272:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e276:	ea c9 ff c4 	sub	r9,r5,-60
8001e27a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			imu1->attitude.raw_mag_mean[j] = (1.0-MAG_LPF)*imu1->attitude.raw_mag_mean[j]+MAG_LPF*((float)imu1->raw_channels[j+COMPASS_OFFSET]);
8001e27e:	ee f5 ff fc 	ld.w	r5,r7[-4]
8001e282:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001e286:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e28a:	2d 59       	sub	r9,-43
8001e28c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e290:	10 9c       	mov	r12,r8
8001e292:	f0 16 00 02 	mcall	r6[8]
8001e296:	e0 68 cc cd 	mov	r8,52429
8001e29a:	ea 18 cc cc 	orh	r8,0xcccc
8001e29e:	e0 69 cc cc 	mov	r9,52428
8001e2a2:	ea 19 3f ec 	orh	r9,0x3fec
8001e2a6:	f0 16 00 03 	mcall	r6[12]
8001e2aa:	14 98       	mov	r8,r10
8001e2ac:	16 99       	mov	r9,r11
8001e2ae:	10 92       	mov	r2,r8
8001e2b0:	12 93       	mov	r3,r9
8001e2b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e2b6:	f0 c9 ff fa 	sub	r9,r8,-6
8001e2ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e2be:	2c d9       	sub	r9,-51
8001e2c0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e2c4:	10 9c       	mov	r12,r8
8001e2c6:	f0 16 00 02 	mcall	r6[8]
8001e2ca:	e0 68 99 9a 	mov	r8,39322
8001e2ce:	ea 18 99 99 	orh	r8,0x9999
8001e2d2:	e0 69 99 99 	mov	r9,39321
8001e2d6:	ea 19 3f b9 	orh	r9,0x3fb9
8001e2da:	f0 16 00 03 	mcall	r6[12]
8001e2de:	14 98       	mov	r8,r10
8001e2e0:	16 99       	mov	r9,r11
8001e2e2:	04 9a       	mov	r10,r2
8001e2e4:	06 9b       	mov	r11,r3
8001e2e6:	f0 16 00 05 	mcall	r6[20]
8001e2ea:	14 98       	mov	r8,r10
8001e2ec:	16 99       	mov	r9,r11
8001e2ee:	10 9a       	mov	r10,r8
8001e2f0:	12 9b       	mov	r11,r9
8001e2f2:	f0 16 00 09 	mcall	r6[36]
8001e2f6:	18 9a       	mov	r10,r12
8001e2f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e2fc:	ea c9 ff d5 	sub	r9,r5,-43
8001e300:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		imu_get_raw_data(imu1);

		//imu1->raw_bias[0+ACC_OFFSET]  = (0.9*imu1->raw_bias[0+ACC_OFFSET]+0.1*(float)imu1->raw_channels[0+ACC_OFFSET]);
		//imu1->raw_bias[1+ACC_OFFSET]  = (0.9*imu1->raw_bias[1+ACC_OFFSET]+0.1*(float)imu1->raw_channels[1+ACC_OFFSET]);
		//imu1->raw_bias[2+ACC_OFFSET]  = (0.9*imu1->raw_bias[2+ACC_OFFSET]+0.1*((float)imu1->raw_channels[2+ACC_OFFSET]-imu1->raw_scale[2+ACC_OFFSET]));
		for (j=0; j<3; j++) {
8001e304:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e308:	2f f8       	sub	r8,-1
8001e30a:	ef 48 ff fc 	st.w	r7[-4],r8
8001e30e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e312:	58 28       	cp.w	r8,2
8001e314:	fe 9a ff 74 	brle	8001e1fc <calibrate_Gyros+0x68>
			imu1->raw_bias[j]=(0.9*imu1->raw_bias[j]+0.1*(float)imu1->raw_channels[j]);
			imu1->attitude.raw_mag_mean[j] = (1.0-MAG_LPF)*imu1->attitude.raw_mag_mean[j]+MAG_LPF*((float)imu1->raw_channels[j+COMPASS_OFFSET]);
		}
		delay_ms(4);
8001e318:	30 4c       	mov	r12,4
8001e31a:	f0 16 01 0a 	mcall	r6[1064]
	imu_get_raw_data(imu1);
	for (j=0; j<3; j++) {
		imu1->raw_bias[j]=(float)imu1->raw_channels[j];
	}
	
	for (i=0; i<100; i++) {
8001e31e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e322:	2f f8       	sub	r8,-1
8001e324:	ef 48 ff f8 	st.w	r7[-8],r8
8001e328:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e32c:	e0 48 00 63 	cp.w	r8,99
8001e330:	fe 9a ff 5e 	brle	8001e1ec <calibrate_Gyros+0x58>
		}
		delay_ms(4);
	}


}
8001e334:	2f dd       	sub	sp,-12
8001e336:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001e33a:	00 00       	add	r0,r0
8001e33c:	80 01       	ld.sh	r1,r0[0x0]
8001e33e:	e0 22 eb cd 	sub	r2,60365

8001e340 <imu_update>:

void imu_update(Imu_Data_t *imu1, position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps){
8001e340:	eb cd 40 c0 	pushm	r6-r7,lr
8001e344:	1a 97       	mov	r7,sp
8001e346:	20 5d       	sub	sp,20
8001e348:	4b 46       	lddpc	r6,8001e418 <imu_update+0xd8>
8001e34a:	1e 26       	rsub	r6,pc
8001e34c:	ef 4c ff f8 	st.w	r7[-8],r12
8001e350:	ef 4b ff f4 	st.w	r7[-12],r11
8001e354:	ef 4a ff f0 	st.w	r7[-16],r10
8001e358:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t t=get_time_ticks();
8001e35c:	f0 16 00 2d 	mcall	r6[180]
8001e360:	18 98       	mov	r8,r12
8001e362:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if (!imu_last_update_init)
8001e366:	ec f8 03 0c 	ld.w	r8,r6[780]
8001e36a:	11 88       	ld.ub	r8,r8[0x0]
8001e36c:	ec 18 00 01 	eorl	r8,0x1
8001e370:	5c 58       	castu.b	r8
8001e372:	c0 c0       	breq	8001e38a <imu_update+0x4a>
	{
		imu1->last_update = t;
8001e374:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e378:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001e37c:	f1 49 01 38 	st.w	r8[312],r9
		imu_last_update_init = true;
8001e380:	ec f9 03 0c 	ld.w	r9,r6[780]
8001e384:	30 18       	mov	r8,1
8001e386:	b2 88       	st.b	r9[0x0],r8
8001e388:	c4 48       	rjmp	8001e410 <imu_update+0xd0>
	}else{
		imu1->dt=ticks_to_seconds(t - imu1->last_update);
8001e38a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e38e:	f0 f8 01 38 	ld.w	r8,r8[312]
8001e392:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001e396:	f2 08 01 08 	sub	r8,r9,r8
8001e39a:	10 9c       	mov	r12,r8
8001e39c:	f0 16 00 c1 	mcall	r6[772]
8001e3a0:	18 99       	mov	r9,r12
8001e3a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e3a6:	f1 49 01 40 	st.w	r8[320],r9
		imu1->last_update=t;
8001e3aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e3ae:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001e3b2:	f1 49 01 38 	st.w	r8[312],r9
		qfilter(&imu1->attitude, &imu1->raw_channels, imu1->dt, false);
8001e3b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e3ba:	f0 fa 01 40 	ld.w	r10,r8[320]
8001e3be:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e3c2:	f0 cb ff 34 	sub	r11,r8,-204
8001e3c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e3ca:	30 09       	mov	r9,0
8001e3cc:	10 9c       	mov	r12,r8
8001e3ce:	f0 16 01 69 	mcall	r6[1444]
		if (imu1->attitude.calibration_level==OFF) {
8001e3d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e3d6:	f1 38 00 b8 	ld.ub	r8,r8[184]
8001e3da:	58 08       	cp.w	r8,0
8001e3dc:	c1 a1       	brne	8001e410 <imu_update+0xd0>
			position_integration(pos_est, &imu1->attitude, imu1->dt);
8001e3de:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e3e2:	f0 f9 01 40 	ld.w	r9,r8[320]
8001e3e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e3ea:	12 9a       	mov	r10,r9
8001e3ec:	10 9b       	mov	r11,r8
8001e3ee:	ee fc ff f4 	ld.w	r12,r7[-12]
8001e3f2:	f0 16 02 10 	mcall	r6[2112]
			position_correction(pos_est, barometer, gps, imu1->dt);
8001e3f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e3fa:	f0 f8 01 40 	ld.w	r8,r8[320]
8001e3fe:	10 99       	mov	r9,r8
8001e400:	ee fa ff ec 	ld.w	r10,r7[-20]
8001e404:	ee fb ff f0 	ld.w	r11,r7[-16]
8001e408:	ee fc ff f4 	ld.w	r12,r7[-12]
8001e40c:	f0 16 01 ee 	mcall	r6[1976]
		}
	}
}
8001e410:	2f bd       	sub	sp,-20
8001e412:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e416:	00 00       	add	r0,r0
8001e418:	80 01       	ld.sh	r1,r0[0x0]
8001e41a:	e1 ce eb cd 	ldm	lr,r0,r2-r3,r6-r9,r11,sp-pc

8001e41c <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8001e41c:	eb cd 40 80 	pushm	r7,lr
8001e420:	1a 97       	mov	r7,sp
8001e422:	20 3d       	sub	sp,12
8001e424:	ef 4c ff f8 	st.w	r7[-8],r12
8001e428:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8001e42c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e430:	70 09       	ld.w	r9,r8[0x0]
8001e432:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e436:	70 08       	ld.w	r8,r8[0x0]
8001e438:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e43c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e440:	2f c8       	sub	r8,-4
8001e442:	70 0a       	ld.w	r10,r8[0x0]
8001e444:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e448:	2f c8       	sub	r8,-4
8001e44a:	70 08       	ld.w	r8,r8[0x0]
8001e44c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e450:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e454:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e458:	2f 88       	sub	r8,-8
8001e45a:	70 0a       	ld.w	r10,r8[0x0]
8001e45c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e460:	2f 88       	sub	r8,-8
8001e462:	70 08       	ld.w	r8,r8[0x0]
8001e464:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e468:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001e46c:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8001e470:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001e474:	10 9c       	mov	r12,r8
8001e476:	2f dd       	sub	sp,-12
8001e478:	e3 cd 80 80 	ldm	sp++,r7,pc

8001e47c <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
8001e47c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001e480:	1a 97       	mov	r7,sp
8001e482:	20 7d       	sub	sp,28
8001e484:	4b d6       	lddpc	r6,8001e578 <quat_multi+0xfc>
8001e486:	1e 26       	rsub	r6,pc
8001e488:	ee c8 ff ec 	sub	r8,r7,-20
8001e48c:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8001e48e:	70 2a       	ld.w	r10,r8[0x8]
8001e490:	70 79       	ld.w	r9,r8[0x1c]
8001e492:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001e496:	70 3b       	ld.w	r11,r8[0xc]
8001e498:	70 69       	ld.w	r9,r8[0x18]
8001e49a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001e49e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001e4a2:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
8001e4a6:	70 3a       	ld.w	r10,r8[0xc]
8001e4a8:	70 59       	ld.w	r9,r8[0x14]
8001e4aa:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001e4ae:	70 1b       	ld.w	r11,r8[0x4]
8001e4b0:	70 79       	ld.w	r9,r8[0x1c]
8001e4b2:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001e4b6:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001e4ba:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8001e4be:	70 1a       	ld.w	r10,r8[0x4]
8001e4c0:	70 69       	ld.w	r9,r8[0x18]
8001e4c2:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001e4c6:	70 2b       	ld.w	r11,r8[0x8]
8001e4c8:	70 59       	ld.w	r9,r8[0x14]
8001e4ca:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001e4ce:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001e4d2:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
8001e4d6:	70 4a       	ld.w	r10,r8[0x10]
8001e4d8:	70 19       	ld.w	r9,r8[0x4]
8001e4da:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001e4de:	70 0b       	ld.w	r11,r8[0x0]
8001e4e0:	70 59       	ld.w	r9,r8[0x14]
8001e4e2:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001e4e6:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8001e4ea:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e4ee:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001e4f2:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
8001e4f6:	70 4a       	ld.w	r10,r8[0x10]
8001e4f8:	70 29       	ld.w	r9,r8[0x8]
8001e4fa:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001e4fe:	70 0b       	ld.w	r11,r8[0x0]
8001e500:	70 69       	ld.w	r9,r8[0x18]
8001e502:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001e506:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8001e50a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001e50e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001e512:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8001e516:	70 4a       	ld.w	r10,r8[0x10]
8001e518:	70 39       	ld.w	r9,r8[0xc]
8001e51a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001e51e:	70 0b       	ld.w	r11,r8[0x0]
8001e520:	70 79       	ld.w	r9,r8[0x1c]
8001e522:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001e526:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8001e52a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001e52e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001e532:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8001e536:	70 0a       	ld.w	r10,r8[0x0]
8001e538:	70 49       	ld.w	r9,r8[0x10]
8001e53a:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8001e53e:	f0 c9 ff f0 	sub	r9,r8,-16
8001e542:	2f c9       	sub	r9,-4
8001e544:	2f c8       	sub	r8,-4
8001e546:	12 9b       	mov	r11,r9
8001e548:	10 9c       	mov	r12,r8
8001e54a:	c6 9f       	rcall	8001e41c <scalar_product>
8001e54c:	18 98       	mov	r8,r12
8001e54e:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8001e552:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
8001e556:	0a 98       	mov	r8,r5
8001e558:	ee c9 00 1c 	sub	r9,r7,28
8001e55c:	20 08       	sub	r8,0
8001e55e:	20 09       	sub	r9,0
8001e560:	72 0a       	ld.w	r10,r9[0x0]
8001e562:	91 0a       	st.w	r8[0x0],r10
8001e564:	72 1a       	ld.w	r10,r9[0x4]
8001e566:	91 1a       	st.w	r8[0x4],r10
8001e568:	72 2a       	ld.w	r10,r9[0x8]
8001e56a:	91 2a       	st.w	r8[0x8],r10
8001e56c:	72 39       	ld.w	r9,r9[0xc]
8001e56e:	91 39       	st.w	r8[0xc],r9
}
8001e570:	0a 9c       	mov	r12,r5
8001e572:	2f 9d       	sub	sp,-28
8001e574:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001e578:	80 01       	ld.sh	r1,r0[0x0]
8001e57a:	e3 0a eb cd 	ld.sh	r10,r1[-5171]

8001e57c <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
8001e57c:	eb cd 40 80 	pushm	r7,lr
8001e580:	1a 97       	mov	r7,sp
8001e582:	20 5d       	sub	sp,20
8001e584:	ee c9 ff f8 	sub	r9,r7,-8
8001e588:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
8001e58a:	72 08       	ld.w	r8,r9[0x0]
8001e58c:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8001e590:	30 08       	mov	r8,0
8001e592:	ef 48 ff fc 	st.w	r7[-4],r8
8001e596:	c1 58       	rjmp	8001e5c0 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
8001e598:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e59c:	ee fb ff fc 	ld.w	r11,r7[-4]
8001e5a0:	2f fb       	sub	r11,-1
8001e5a2:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
8001e5a6:	ee 1b 80 00 	eorh	r11,0x8000
8001e5aa:	2f f8       	sub	r8,-1
8001e5ac:	a3 68       	lsl	r8,0x2
8001e5ae:	ee 08 00 08 	add	r8,r7,r8
8001e5b2:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
8001e5b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e5ba:	2f f8       	sub	r8,-1
8001e5bc:	ef 48 ff fc 	st.w	r7[-4],r8
8001e5c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e5c4:	58 28       	cp.w	r8,2
8001e5c6:	fe 9a ff e9 	brle	8001e598 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8001e5ca:	14 98       	mov	r8,r10
8001e5cc:	ee c9 00 14 	sub	r9,r7,20
8001e5d0:	20 08       	sub	r8,0
8001e5d2:	20 09       	sub	r9,0
8001e5d4:	72 0b       	ld.w	r11,r9[0x0]
8001e5d6:	91 0b       	st.w	r8[0x0],r11
8001e5d8:	72 1b       	ld.w	r11,r9[0x4]
8001e5da:	91 1b       	st.w	r8[0x4],r11
8001e5dc:	72 2b       	ld.w	r11,r9[0x8]
8001e5de:	91 2b       	st.w	r8[0x8],r11
8001e5e0:	72 39       	ld.w	r9,r9[0xc]
8001e5e2:	91 39       	st.w	r8[0xc],r9
}
8001e5e4:	14 9c       	mov	r12,r10
8001e5e6:	2f bd       	sub	sp,-20
8001e5e8:	e3 cd 80 80 	ldm	sp++,r7,pc

8001e5ec <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
8001e5ec:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001e5f0:	1a 97       	mov	r7,sp
8001e5f2:	20 cd       	sub	sp,48
8001e5f4:	4b c6       	lddpc	r6,8001e6e4 <quat_global_to_local+0xf8>
8001e5f6:	1e 26       	rsub	r6,pc
8001e5f8:	ee c5 ff ec 	sub	r5,r7,-20
8001e5fc:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8001e5fe:	ee ca 00 10 	sub	r10,r7,16
8001e602:	20 4d       	sub	sp,16
8001e604:	1a 98       	mov	r8,sp
8001e606:	0a 99       	mov	r9,r5
8001e608:	20 08       	sub	r8,0
8001e60a:	20 09       	sub	r9,0
8001e60c:	72 0b       	ld.w	r11,r9[0x0]
8001e60e:	91 0b       	st.w	r8[0x0],r11
8001e610:	72 1b       	ld.w	r11,r9[0x4]
8001e612:	91 1b       	st.w	r8[0x4],r11
8001e614:	72 2b       	ld.w	r11,r9[0x8]
8001e616:	91 2b       	st.w	r8[0x8],r11
8001e618:	72 39       	ld.w	r9,r9[0xc]
8001e61a:	91 39       	st.w	r8[0xc],r9
8001e61c:	14 9c       	mov	r12,r10
8001e61e:	ca ff       	rcall	8001e57c <quat_inv>
8001e620:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8001e622:	ee ca 00 20 	sub	r10,r7,32
8001e626:	20 4d       	sub	sp,16
8001e628:	1a 98       	mov	r8,sp
8001e62a:	ea c9 ff f0 	sub	r9,r5,-16
8001e62e:	20 08       	sub	r8,0
8001e630:	20 09       	sub	r9,0
8001e632:	72 0b       	ld.w	r11,r9[0x0]
8001e634:	91 0b       	st.w	r8[0x0],r11
8001e636:	72 1b       	ld.w	r11,r9[0x4]
8001e638:	91 1b       	st.w	r8[0x4],r11
8001e63a:	72 2b       	ld.w	r11,r9[0x8]
8001e63c:	91 2b       	st.w	r8[0x8],r11
8001e63e:	72 39       	ld.w	r9,r9[0xc]
8001e640:	91 39       	st.w	r8[0xc],r9
8001e642:	20 4d       	sub	sp,16
8001e644:	1a 98       	mov	r8,sp
8001e646:	ee c9 00 10 	sub	r9,r7,16
8001e64a:	20 08       	sub	r8,0
8001e64c:	20 09       	sub	r9,0
8001e64e:	72 0b       	ld.w	r11,r9[0x0]
8001e650:	91 0b       	st.w	r8[0x0],r11
8001e652:	72 1b       	ld.w	r11,r9[0x4]
8001e654:	91 1b       	st.w	r8[0x4],r11
8001e656:	72 2b       	ld.w	r11,r9[0x8]
8001e658:	91 2b       	st.w	r8[0x8],r11
8001e65a:	72 39       	ld.w	r9,r9[0xc]
8001e65c:	91 39       	st.w	r8[0xc],r9
8001e65e:	14 9c       	mov	r12,r10
8001e660:	c0 ef       	rcall	8001e47c <quat_multi>
8001e662:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
8001e664:	ee ca 00 30 	sub	r10,r7,48
8001e668:	20 4d       	sub	sp,16
8001e66a:	1a 98       	mov	r8,sp
8001e66c:	0a 99       	mov	r9,r5
8001e66e:	20 08       	sub	r8,0
8001e670:	20 09       	sub	r9,0
8001e672:	72 0b       	ld.w	r11,r9[0x0]
8001e674:	91 0b       	st.w	r8[0x0],r11
8001e676:	72 1b       	ld.w	r11,r9[0x4]
8001e678:	91 1b       	st.w	r8[0x4],r11
8001e67a:	72 2b       	ld.w	r11,r9[0x8]
8001e67c:	91 2b       	st.w	r8[0x8],r11
8001e67e:	72 39       	ld.w	r9,r9[0xc]
8001e680:	91 39       	st.w	r8[0xc],r9
8001e682:	20 4d       	sub	sp,16
8001e684:	1a 98       	mov	r8,sp
8001e686:	ee c9 00 20 	sub	r9,r7,32
8001e68a:	20 08       	sub	r8,0
8001e68c:	20 09       	sub	r9,0
8001e68e:	72 0b       	ld.w	r11,r9[0x0]
8001e690:	91 0b       	st.w	r8[0x0],r11
8001e692:	72 1b       	ld.w	r11,r9[0x4]
8001e694:	91 1b       	st.w	r8[0x4],r11
8001e696:	72 2b       	ld.w	r11,r9[0x8]
8001e698:	91 2b       	st.w	r8[0x8],r11
8001e69a:	72 39       	ld.w	r9,r9[0xc]
8001e69c:	91 39       	st.w	r8[0xc],r9
8001e69e:	14 9c       	mov	r12,r10
8001e6a0:	ce ee       	rcall	8001e47c <quat_multi>
8001e6a2:	2f 8d       	sub	sp,-32
8001e6a4:	ee c8 00 20 	sub	r8,r7,32
8001e6a8:	ee c9 00 30 	sub	r9,r7,48
8001e6ac:	20 08       	sub	r8,0
8001e6ae:	20 09       	sub	r9,0
8001e6b0:	72 0a       	ld.w	r10,r9[0x0]
8001e6b2:	91 0a       	st.w	r8[0x0],r10
8001e6b4:	72 1a       	ld.w	r10,r9[0x4]
8001e6b6:	91 1a       	st.w	r8[0x4],r10
8001e6b8:	72 2a       	ld.w	r10,r9[0x8]
8001e6ba:	91 2a       	st.w	r8[0x8],r10
8001e6bc:	72 39       	ld.w	r9,r9[0xc]
8001e6be:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8001e6c0:	06 98       	mov	r8,r3
8001e6c2:	ee c9 00 20 	sub	r9,r7,32
8001e6c6:	20 08       	sub	r8,0
8001e6c8:	20 09       	sub	r9,0
8001e6ca:	72 0a       	ld.w	r10,r9[0x0]
8001e6cc:	91 0a       	st.w	r8[0x0],r10
8001e6ce:	72 1a       	ld.w	r10,r9[0x4]
8001e6d0:	91 1a       	st.w	r8[0x4],r10
8001e6d2:	72 2a       	ld.w	r10,r9[0x8]
8001e6d4:	91 2a       	st.w	r8[0x8],r10
8001e6d6:	72 39       	ld.w	r9,r9[0xc]
8001e6d8:	91 39       	st.w	r8[0xc],r9
}
8001e6da:	06 9c       	mov	r12,r3
8001e6dc:	2f 4d       	sub	sp,-48
8001e6de:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001e6e2:	00 00       	add	r0,r0
8001e6e4:	80 01       	ld.sh	r1,r0[0x0]
8001e6e6:	e4 7a eb cd 	mov	r10,388045

8001e6e8 <quat_local_to_global>:

UQuat_t static inline quat_local_to_global(const UQuat_t qe, const UQuat_t qvect)
{
8001e6e8:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001e6ec:	1a 97       	mov	r7,sp
8001e6ee:	20 cd       	sub	sp,48
8001e6f0:	4b c6       	lddpc	r6,8001e7e0 <quat_local_to_global+0xf8>
8001e6f2:	1e 26       	rsub	r6,pc
8001e6f4:	ee c5 ff ec 	sub	r5,r7,-20
8001e6f8:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8001e6fa:	ee ca 00 10 	sub	r10,r7,16
8001e6fe:	20 4d       	sub	sp,16
8001e700:	1a 98       	mov	r8,sp
8001e702:	0a 99       	mov	r9,r5
8001e704:	20 08       	sub	r8,0
8001e706:	20 09       	sub	r9,0
8001e708:	72 0b       	ld.w	r11,r9[0x0]
8001e70a:	91 0b       	st.w	r8[0x0],r11
8001e70c:	72 1b       	ld.w	r11,r9[0x4]
8001e70e:	91 1b       	st.w	r8[0x4],r11
8001e710:	72 2b       	ld.w	r11,r9[0x8]
8001e712:	91 2b       	st.w	r8[0x8],r11
8001e714:	72 39       	ld.w	r9,r9[0xc]
8001e716:	91 39       	st.w	r8[0xc],r9
8001e718:	14 9c       	mov	r12,r10
8001e71a:	c3 1f       	rcall	8001e57c <quat_inv>
8001e71c:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qe, qvect);
8001e71e:	ee ca 00 20 	sub	r10,r7,32
8001e722:	20 4d       	sub	sp,16
8001e724:	1a 98       	mov	r8,sp
8001e726:	ea c9 ff f0 	sub	r9,r5,-16
8001e72a:	20 08       	sub	r8,0
8001e72c:	20 09       	sub	r9,0
8001e72e:	72 0b       	ld.w	r11,r9[0x0]
8001e730:	91 0b       	st.w	r8[0x0],r11
8001e732:	72 1b       	ld.w	r11,r9[0x4]
8001e734:	91 1b       	st.w	r8[0x4],r11
8001e736:	72 2b       	ld.w	r11,r9[0x8]
8001e738:	91 2b       	st.w	r8[0x8],r11
8001e73a:	72 39       	ld.w	r9,r9[0xc]
8001e73c:	91 39       	st.w	r8[0xc],r9
8001e73e:	20 4d       	sub	sp,16
8001e740:	1a 98       	mov	r8,sp
8001e742:	0a 99       	mov	r9,r5
8001e744:	20 08       	sub	r8,0
8001e746:	20 09       	sub	r9,0
8001e748:	72 0b       	ld.w	r11,r9[0x0]
8001e74a:	91 0b       	st.w	r8[0x0],r11
8001e74c:	72 1b       	ld.w	r11,r9[0x4]
8001e74e:	91 1b       	st.w	r8[0x4],r11
8001e750:	72 2b       	ld.w	r11,r9[0x8]
8001e752:	91 2b       	st.w	r8[0x8],r11
8001e754:	72 39       	ld.w	r9,r9[0xc]
8001e756:	91 39       	st.w	r8[0xc],r9
8001e758:	14 9c       	mov	r12,r10
8001e75a:	c9 1e       	rcall	8001e47c <quat_multi>
8001e75c:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp, qinv);
8001e75e:	ee ca 00 30 	sub	r10,r7,48
8001e762:	20 4d       	sub	sp,16
8001e764:	1a 98       	mov	r8,sp
8001e766:	ee c9 00 10 	sub	r9,r7,16
8001e76a:	20 08       	sub	r8,0
8001e76c:	20 09       	sub	r9,0
8001e76e:	72 0b       	ld.w	r11,r9[0x0]
8001e770:	91 0b       	st.w	r8[0x0],r11
8001e772:	72 1b       	ld.w	r11,r9[0x4]
8001e774:	91 1b       	st.w	r8[0x4],r11
8001e776:	72 2b       	ld.w	r11,r9[0x8]
8001e778:	91 2b       	st.w	r8[0x8],r11
8001e77a:	72 39       	ld.w	r9,r9[0xc]
8001e77c:	91 39       	st.w	r8[0xc],r9
8001e77e:	20 4d       	sub	sp,16
8001e780:	1a 98       	mov	r8,sp
8001e782:	ee c9 00 20 	sub	r9,r7,32
8001e786:	20 08       	sub	r8,0
8001e788:	20 09       	sub	r9,0
8001e78a:	72 0b       	ld.w	r11,r9[0x0]
8001e78c:	91 0b       	st.w	r8[0x0],r11
8001e78e:	72 1b       	ld.w	r11,r9[0x4]
8001e790:	91 1b       	st.w	r8[0x4],r11
8001e792:	72 2b       	ld.w	r11,r9[0x8]
8001e794:	91 2b       	st.w	r8[0x8],r11
8001e796:	72 39       	ld.w	r9,r9[0xc]
8001e798:	91 39       	st.w	r8[0xc],r9
8001e79a:	14 9c       	mov	r12,r10
8001e79c:	c7 0e       	rcall	8001e47c <quat_multi>
8001e79e:	2f 8d       	sub	sp,-32
8001e7a0:	ee c8 00 20 	sub	r8,r7,32
8001e7a4:	ee c9 00 30 	sub	r9,r7,48
8001e7a8:	20 08       	sub	r8,0
8001e7aa:	20 09       	sub	r9,0
8001e7ac:	72 0a       	ld.w	r10,r9[0x0]
8001e7ae:	91 0a       	st.w	r8[0x0],r10
8001e7b0:	72 1a       	ld.w	r10,r9[0x4]
8001e7b2:	91 1a       	st.w	r8[0x4],r10
8001e7b4:	72 2a       	ld.w	r10,r9[0x8]
8001e7b6:	91 2a       	st.w	r8[0x8],r10
8001e7b8:	72 39       	ld.w	r9,r9[0xc]
8001e7ba:	91 39       	st.w	r8[0xc],r9
	
	return qtmp;
8001e7bc:	06 98       	mov	r8,r3
8001e7be:	ee c9 00 20 	sub	r9,r7,32
8001e7c2:	20 08       	sub	r8,0
8001e7c4:	20 09       	sub	r9,0
8001e7c6:	72 0a       	ld.w	r10,r9[0x0]
8001e7c8:	91 0a       	st.w	r8[0x0],r10
8001e7ca:	72 1a       	ld.w	r10,r9[0x4]
8001e7cc:	91 1a       	st.w	r8[0x4],r10
8001e7ce:	72 2a       	ld.w	r10,r9[0x8]
8001e7d0:	91 2a       	st.w	r8[0x8],r10
8001e7d2:	72 39       	ld.w	r9,r9[0xc]
8001e7d4:	91 39       	st.w	r8[0xc],r9
}
8001e7d6:	06 9c       	mov	r12,r3
8001e7d8:	2f 4d       	sub	sp,-48
8001e7da:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001e7de:	00 00       	add	r0,r0
8001e7e0:	80 01       	ld.sh	r1,r0[0x0]
8001e7e2:	e5 76 eb cd 	stcond	r2[-5171],r6

8001e7e4 <fast_sqrt>:

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
8001e7e4:	eb cd 40 c0 	pushm	r6-r7,lr
8001e7e8:	1a 97       	mov	r7,sp
8001e7ea:	20 2d       	sub	sp,8
8001e7ec:	4b 26       	lddpc	r6,8001e8b4 <fast_sqrt+0xd0>
8001e7ee:	1e 26       	rsub	r6,pc
8001e7f0:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
8001e7f4:	30 18       	mov	r8,1
8001e7f6:	ee fa ff f8 	ld.w	r10,r7[-8]
8001e7fa:	30 09       	mov	r9,0
8001e7fc:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001e800:	e0 8c 00 03 	brvs	8001e806 <fast_sqrt+0x22>
8001e804:	c0 25       	brlt	8001e808 <fast_sqrt+0x24>
8001e806:	30 08       	mov	r8,0
8001e808:	5c 58       	castu.b	r8
8001e80a:	c0 30       	breq	8001e810 <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
8001e80c:	30 08       	mov	r8,0
8001e80e:	c4 f8       	rjmp	8001e8ac <fast_sqrt+0xc8>
	}
	float result=1.0;
8001e810:	fc 18 3f 80 	movh	r8,0x3f80
8001e814:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001e818:	ee fb ff fc 	ld.w	r11,r7[-4]
8001e81c:	ee fc ff f8 	ld.w	r12,r7[-8]
8001e820:	f0 16 00 08 	mcall	r6[32]
8001e824:	18 98       	mov	r8,r12
8001e826:	10 99       	mov	r9,r8
8001e828:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e82c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e830:	fc 18 3f 00 	movh	r8,0x3f00
8001e834:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001e838:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001e83c:	ee fb ff fc 	ld.w	r11,r7[-4]
8001e840:	ee fc ff f8 	ld.w	r12,r7[-8]
8001e844:	f0 16 00 08 	mcall	r6[32]
8001e848:	18 98       	mov	r8,r12
8001e84a:	10 99       	mov	r9,r8
8001e84c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e850:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e854:	fc 18 3f 00 	movh	r8,0x3f00
8001e858:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001e85c:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001e860:	ee fb ff fc 	ld.w	r11,r7[-4]
8001e864:	ee fc ff f8 	ld.w	r12,r7[-8]
8001e868:	f0 16 00 08 	mcall	r6[32]
8001e86c:	18 98       	mov	r8,r12
8001e86e:	10 99       	mov	r9,r8
8001e870:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e874:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e878:	fc 18 3f 00 	movh	r8,0x3f00
8001e87c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001e880:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001e884:	ee fb ff fc 	ld.w	r11,r7[-4]
8001e888:	ee fc ff f8 	ld.w	r12,r7[-8]
8001e88c:	f0 16 00 08 	mcall	r6[32]
8001e890:	18 98       	mov	r8,r12
8001e892:	10 99       	mov	r9,r8
8001e894:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e898:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e89c:	fc 18 3f 00 	movh	r8,0x3f00
8001e8a0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001e8a4:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
8001e8a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001e8ac:	10 9c       	mov	r12,r8
8001e8ae:	2f ed       	sub	sp,-8
8001e8b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e8b4:	80 01       	ld.sh	r1,r0[0x0]
8001e8b6:	e6 72 eb cd 	mov	r2,519117

8001e8b8 <quat_normalise>:
	{
		u[i] = v[i] / norm;
	}
}

static inline UQuat_t quat_normalise(const UQuat_t q) {
8001e8b8:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001e8bc:	1a 97       	mov	r7,sp
8001e8be:	20 6d       	sub	sp,24
8001e8c0:	4b f6       	lddpc	r6,8001e9bc <quat_normalise+0x104>
8001e8c2:	1e 26       	rsub	r6,pc
8001e8c4:	ee c5 ff e8 	sub	r5,r7,-24
8001e8c8:	18 92       	mov	r2,r12
	UQuat_t result={.s=1.0, .v={0.0, 0.0, 0.0} };
8001e8ca:	fc 18 3f 80 	movh	r8,0x3f80
8001e8ce:	ef 48 ff e8 	st.w	r7[-24],r8
8001e8d2:	30 08       	mov	r8,0
8001e8d4:	ef 48 ff ec 	st.w	r7[-20],r8
8001e8d8:	30 08       	mov	r8,0
8001e8da:	ef 48 ff f0 	st.w	r7[-16],r8
8001e8de:	30 08       	mov	r8,0
8001e8e0:	ef 48 ff f4 	st.w	r7[-12],r8
	float snorm= SQR(q.s) + SQR(q.v[0]) + SQR(q.v[1]) + SQR(q.v[2]);
8001e8e4:	6a 09       	ld.w	r9,r5[0x0]
8001e8e6:	6a 08       	ld.w	r8,r5[0x0]
8001e8e8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e8ec:	6a 1a       	ld.w	r10,r5[0x4]
8001e8ee:	6a 18       	ld.w	r8,r5[0x4]
8001e8f0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e8f4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e8f8:	6a 2a       	ld.w	r10,r5[0x8]
8001e8fa:	6a 28       	ld.w	r8,r5[0x8]
8001e8fc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e900:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e904:	6a 3a       	ld.w	r10,r5[0xc]
8001e906:	6a 38       	ld.w	r8,r5[0xc]
8001e908:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e90c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001e910:	ef 48 ff f8 	st.w	r7[-8],r8
	if (snorm >0.0000001) {
8001e914:	ee fc ff f8 	ld.w	r12,r7[-8]
8001e918:	f0 16 00 02 	mcall	r6[8]
8001e91c:	14 98       	mov	r8,r10
8001e91e:	16 99       	mov	r9,r11
8001e920:	30 03       	mov	r3,0
8001e922:	e0 6a af 48 	mov	r10,44872
8001e926:	ea 1a 9a bc 	orh	r10,0x9abc
8001e92a:	e0 6b d7 f2 	mov	r11,55282
8001e92e:	ea 1b 3e 7a 	orh	r11,0x3e7a
8001e932:	f0 16 00 1c 	mcall	r6[112]
8001e936:	18 98       	mov	r8,r12
8001e938:	58 08       	cp.w	r8,0
8001e93a:	c0 20       	breq	8001e93e <quat_normalise+0x86>
8001e93c:	30 13       	mov	r3,1
8001e93e:	f1 d3 c0 08 	bfextu	r8,r3,0x0,0x8
8001e942:	c2 b0       	breq	8001e998 <quat_normalise+0xe0>
		float norm=fast_sqrt(snorm);
8001e944:	ee fc ff f8 	ld.w	r12,r7[-8]
8001e948:	c4 ef       	rcall	8001e7e4 <fast_sqrt>
8001e94a:	18 98       	mov	r8,r12
8001e94c:	ef 48 ff fc 	st.w	r7[-4],r8
		result.s=q.s/norm;
8001e950:	6a 08       	ld.w	r8,r5[0x0]
8001e952:	ee fb ff fc 	ld.w	r11,r7[-4]
8001e956:	10 9c       	mov	r12,r8
8001e958:	f0 16 00 08 	mcall	r6[32]
8001e95c:	18 98       	mov	r8,r12
8001e95e:	ef 48 ff e8 	st.w	r7[-24],r8
		result.v[0]=q.v[0]/norm;		result.v[1]=q.v[1]/norm;		result.v[2]=q.v[2]/norm;
8001e962:	6a 18       	ld.w	r8,r5[0x4]
8001e964:	ee fb ff fc 	ld.w	r11,r7[-4]
8001e968:	10 9c       	mov	r12,r8
8001e96a:	f0 16 00 08 	mcall	r6[32]
8001e96e:	18 98       	mov	r8,r12
8001e970:	ef 48 ff ec 	st.w	r7[-20],r8
8001e974:	6a 28       	ld.w	r8,r5[0x8]
8001e976:	ee fb ff fc 	ld.w	r11,r7[-4]
8001e97a:	10 9c       	mov	r12,r8
8001e97c:	f0 16 00 08 	mcall	r6[32]
8001e980:	18 98       	mov	r8,r12
8001e982:	ef 48 ff f0 	st.w	r7[-16],r8
8001e986:	6a 38       	ld.w	r8,r5[0xc]
8001e988:	ee fb ff fc 	ld.w	r11,r7[-4]
8001e98c:	10 9c       	mov	r12,r8
8001e98e:	f0 16 00 08 	mcall	r6[32]
8001e992:	18 98       	mov	r8,r12
8001e994:	ef 48 ff f4 	st.w	r7[-12],r8

	}
	return result;
8001e998:	04 98       	mov	r8,r2
8001e99a:	ee c9 00 18 	sub	r9,r7,24
8001e99e:	20 08       	sub	r8,0
8001e9a0:	20 09       	sub	r9,0
8001e9a2:	72 0a       	ld.w	r10,r9[0x0]
8001e9a4:	91 0a       	st.w	r8[0x0],r10
8001e9a6:	72 1a       	ld.w	r10,r9[0x4]
8001e9a8:	91 1a       	st.w	r8[0x4],r10
8001e9aa:	72 2a       	ld.w	r10,r9[0x8]
8001e9ac:	91 2a       	st.w	r8[0x8],r10
8001e9ae:	72 39       	ld.w	r9,r9[0xc]
8001e9b0:	91 39       	st.w	r8[0xc],r9
}
8001e9b2:	04 9c       	mov	r12,r2
8001e9b4:	2f ad       	sub	sp,-24
8001e9b6:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001e9ba:	00 00       	add	r0,r0
8001e9bc:	80 01       	ld.sh	r1,r0[0x0]
8001e9be:	e7 46 eb cd 	st.w	r3[-5171],r6

8001e9c0 <clip>:
		return b;
	}
}


static float inline clip(float input_value, float clip_value) {
8001e9c0:	eb cd 40 80 	pushm	r7,lr
8001e9c4:	1a 97       	mov	r7,sp
8001e9c6:	20 2d       	sub	sp,8
8001e9c8:	ef 4c ff fc 	st.w	r7[-4],r12
8001e9cc:	ef 4b ff f8 	st.w	r7[-8],r11
	
	if (input_value>clip_value)  return clip_value;     
8001e9d0:	30 18       	mov	r8,1
8001e9d2:	ee fa ff fc 	ld.w	r10,r7[-4]
8001e9d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001e9da:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001e9de:	e0 8c 00 04 	brvs	8001e9e6 <clip+0x26>
8001e9e2:	e0 89 00 03 	brgt	8001e9e8 <clip+0x28>
8001e9e6:	30 08       	mov	r8,0
8001e9e8:	5c 58       	castu.b	r8
8001e9ea:	c0 40       	breq	8001e9f2 <clip+0x32>
8001e9ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e9f0:	c1 98       	rjmp	8001ea22 <clip+0x62>
	if (input_value<-clip_value) return -clip_value; 
8001e9f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e9f6:	10 9a       	mov	r10,r8
8001e9f8:	ee 1a 80 00 	eorh	r10,0x8000
8001e9fc:	30 18       	mov	r8,1
8001e9fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ea02:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001ea06:	e0 8c 00 04 	brvs	8001ea0e <clip+0x4e>
8001ea0a:	e0 89 00 03 	brgt	8001ea10 <clip+0x50>
8001ea0e:	30 08       	mov	r8,0
8001ea10:	5c 58       	castu.b	r8
8001ea12:	c0 60       	breq	8001ea1e <clip+0x5e>
8001ea14:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ea18:	ee 18 80 00 	eorh	r8,0x8000
8001ea1c:	c0 38       	rjmp	8001ea22 <clip+0x62>
	return input_value;
8001ea1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001ea22:	10 9c       	mov	r12,r8
8001ea24:	2f ed       	sub	sp,-8
8001ea26:	e3 cd 80 80 	ldm	sp++,r7,pc

8001ea2a <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8001ea2a:	eb cd 40 c0 	pushm	r6-r7,lr
8001ea2e:	1a 97       	mov	r7,sp
8001ea30:	20 6d       	sub	sp,24
8001ea32:	49 f6       	lddpc	r6,8001eaac <interpolate+0x82>
8001ea34:	1e 26       	rsub	r6,pc
8001ea36:	ef 4c ff f8 	st.w	r7[-8],r12
8001ea3a:	ef 4b ff f4 	st.w	r7[-12],r11
8001ea3e:	ef 4a ff f0 	st.w	r7[-16],r10
8001ea42:	ef 49 ff ec 	st.w	r7[-20],r9
8001ea46:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001ea4a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ea4e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001ea52:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001ea56:	c0 41       	brne	8001ea5e <interpolate+0x34>
	{
		return y1;
8001ea58:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001ea5c:	c2 38       	rjmp	8001eaa2 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8001ea5e:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001ea62:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001ea66:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001ea6a:	ee fa ff f8 	ld.w	r10,r7[-8]
8001ea6e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ea72:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001ea76:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001ea7a:	ee fa ff f0 	ld.w	r10,r7[-16]
8001ea7e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ea82:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001ea86:	12 9b       	mov	r11,r9
8001ea88:	10 9c       	mov	r12,r8
8001ea8a:	f0 16 00 08 	mcall	r6[32]
8001ea8e:	18 98       	mov	r8,r12
8001ea90:	10 99       	mov	r9,r8
8001ea92:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001ea96:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001ea9a:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8001ea9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8001eaa2:	10 9c       	mov	r12,r8
8001eaa4:	2f ad       	sub	sp,-24
8001eaa6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001eaaa:	00 00       	add	r0,r0
8001eaac:	80 01       	ld.sh	r1,r0[0x0]
8001eaae:	e8 b8       	*unknown*

8001eab0 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8001eab0:	eb cd 40 c0 	pushm	r6-r7,lr
8001eab4:	1a 97       	mov	r7,sp
8001eab6:	20 3d       	sub	sp,12
8001eab8:	49 06       	lddpc	r6,8001eaf8 <mav_array_memcpy+0x48>
8001eaba:	1e 26       	rsub	r6,pc
8001eabc:	ef 4c ff fc 	st.w	r7[-4],r12
8001eac0:	ef 4b ff f8 	st.w	r7[-8],r11
8001eac4:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8001eac8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001eacc:	58 08       	cp.w	r8,0
8001eace:	c0 91       	brne	8001eae0 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8001ead0:	ee fa ff f4 	ld.w	r10,r7[-12]
8001ead4:	30 0b       	mov	r11,0
8001ead6:	ee fc ff fc 	ld.w	r12,r7[-4]
8001eada:	f0 16 00 31 	mcall	r6[196]
8001eade:	c0 98       	rjmp	8001eaf0 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8001eae0:	ee fa ff f4 	ld.w	r10,r7[-12]
8001eae4:	ee fb ff f8 	ld.w	r11,r7[-8]
8001eae8:	ee fc ff fc 	ld.w	r12,r7[-4]
8001eaec:	f0 16 00 1b 	mcall	r6[108]
	}
}
8001eaf0:	2f dd       	sub	sp,-12
8001eaf2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001eaf6:	00 00       	add	r0,r0
8001eaf8:	80 01       	ld.sh	r1,r0[0x0]
8001eafa:	e9 3e eb cd 	ld.ub	lr,r4[-5171]

8001eafc <init_simulation>:
#include "coord_conventions.h"
#include "position_estimation.h"
#include "central_data.h"
#include "maths.h"

void init_simulation(simulation_model_t *sim, Quat_Attitude_t *start_attitude) {
8001eafc:	eb cd 40 c0 	pushm	r6-r7,lr
8001eb00:	1a 97       	mov	r7,sp
8001eb02:	20 3d       	sub	sp,12
8001eb04:	4b f6       	lddpc	r6,8001ec00 <init_simulation+0x104>
8001eb06:	1e 26       	rsub	r6,pc
8001eb08:	ef 4c ff f8 	st.w	r7[-8],r12
8001eb0c:	ef 4b ff f4 	st.w	r7[-12],r11
	int i;
	(*sim)=vehicle_model_parameters;
8001eb10:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001eb14:	ec f9 08 d4 	ld.w	r9,r6[2260]
8001eb18:	e0 6a 01 94 	mov	r10,404
8001eb1c:	12 9b       	mov	r11,r9
8001eb1e:	10 9c       	mov	r12,r8
8001eb20:	f0 16 00 1b 	mcall	r6[108]
	for (i=0; i<3; i++) {
8001eb24:	30 08       	mov	r8,0
8001eb26:	ef 48 ff fc 	st.w	r7[-4],r8
8001eb2a:	c2 d8       	rjmp	8001eb84 <init_simulation+0x88>
		sim->rates_bf[i]=0;
8001eb2c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001eb30:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001eb34:	2f d9       	sub	r9,-3
8001eb36:	30 0a       	mov	r10,0
8001eb38:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->torques_bf[i]=0;
8001eb3c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001eb40:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001eb44:	30 0a       	mov	r10,0
8001eb46:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->lin_forces_bf[i]=0;
8001eb4a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001eb4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001eb52:	2f a9       	sub	r9,-6
8001eb54:	30 0a       	mov	r10,0
8001eb56:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->vel_bf[i]=0.0;
8001eb5a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001eb5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001eb62:	2f 79       	sub	r9,-9
8001eb64:	30 0a       	mov	r10,0
8001eb66:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->pos[i]=0.0;
8001eb6a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001eb6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001eb72:	2f 19       	sub	r9,-15
8001eb74:	30 0a       	mov	r10,0
8001eb76:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
#include "maths.h"

void init_simulation(simulation_model_t *sim, Quat_Attitude_t *start_attitude) {
	int i;
	(*sim)=vehicle_model_parameters;
	for (i=0; i<3; i++) {
8001eb7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001eb7e:	2f f8       	sub	r8,-1
8001eb80:	ef 48 ff fc 	st.w	r7[-4],r8
8001eb84:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001eb88:	58 28       	cp.w	r8,2
8001eb8a:	fe 9a ff d1 	brle	8001eb2c <init_simulation+0x30>
		sim->pos[i]=0.0;
		
	}

	// set initial conditions to given attitude (including scalefactors and biases for simulated IMU)
	sim->attitude=*start_attitude;
8001eb8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001eb92:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001eb96:	2b 88       	sub	r8,-72
8001eb98:	e0 6a 00 cc 	mov	r10,204
8001eb9c:	12 9b       	mov	r11,r9
8001eb9e:	10 9c       	mov	r12,r8
8001eba0:	f0 16 00 1b 	mcall	r6[108]

	for (i=0; i<ROTORCOUNT; i++) {
8001eba4:	30 08       	mov	r8,0
8001eba6:	ef 48 ff fc 	st.w	r7[-4],r8
8001ebaa:	c0 e8       	rjmp	8001ebc6 <init_simulation+0xca>
		sim->rotorspeeds[i]=0.0;			
8001ebac:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ebb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ebb4:	2a f9       	sub	r9,-81
8001ebb6:	30 0a       	mov	r10,0
8001ebb8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}

	// set initial conditions to given attitude (including scalefactors and biases for simulated IMU)
	sim->attitude=*start_attitude;

	for (i=0; i<ROTORCOUNT; i++) {
8001ebbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ebc0:	2f f8       	sub	r8,-1
8001ebc2:	ef 48 ff fc 	st.w	r7[-4],r8
8001ebc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ebca:	58 38       	cp.w	r8,3
8001ebcc:	fe 9a ff f0 	brle	8001ebac <init_simulation+0xb0>
		sim->rotorspeeds[i]=0.0;			
	}
	sim->last_update=get_time();
8001ebd0:	f0 16 02 0b 	mcall	r6[2092]
8001ebd4:	14 98       	mov	r8,r10
8001ebd6:	16 99       	mov	r9,r11
8001ebd8:	10 9a       	mov	r10,r8
8001ebda:	12 9b       	mov	r11,r9
8001ebdc:	f0 16 00 80 	mcall	r6[512]
8001ebe0:	18 99       	mov	r9,r12
8001ebe2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ebe6:	f1 49 01 8c 	st.w	r8[396],r9
	sim->dt=0.01;
8001ebea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ebee:	e0 69 d7 0a 	mov	r9,55050
8001ebf2:	ea 19 3c 23 	orh	r9,0x3c23
8001ebf6:	f1 49 01 90 	st.w	r8[400],r9
}
8001ebfa:	2f dd       	sub	sp,-12
8001ebfc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ec00:	80 01       	ld.sh	r1,r0[0x0]
8001ec02:	e9 8a       	*unknown*

8001ec04 <lift_drag_base>:



// inverse function of mix_to_servos in stabilisation to recover torques and forces

static inline float lift_drag_base(simulation_model_t *sim, float rpm, float sqr_lat_airspeed, float axial_airspeed) {
8001ec04:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001ec08:	1a 97       	mov	r7,sp
8001ec0a:	20 6d       	sub	sp,24
8001ec0c:	4e 26       	lddpc	r6,8001ed94 <lift_drag_base+0x190>
8001ec0e:	1e 26       	rsub	r6,pc
8001ec10:	ef 4c ff f4 	st.w	r7[-12],r12
8001ec14:	ef 4b ff f0 	st.w	r7[-16],r11
8001ec18:	ef 4a ff ec 	st.w	r7[-20],r10
8001ec1c:	ef 49 ff e8 	st.w	r7[-24],r9
	if (rpm < 0.1) return 0.0;
8001ec20:	ee fc ff f0 	ld.w	r12,r7[-16]
8001ec24:	f0 16 00 02 	mcall	r6[8]
8001ec28:	30 05       	mov	r5,0
8001ec2a:	e0 68 99 9a 	mov	r8,39322
8001ec2e:	ea 18 99 99 	orh	r8,0x9999
8001ec32:	e0 69 99 99 	mov	r9,39321
8001ec36:	ea 19 3f b9 	orh	r9,0x3fb9
8001ec3a:	f0 16 00 1c 	mcall	r6[112]
8001ec3e:	18 98       	mov	r8,r12
8001ec40:	58 08       	cp.w	r8,0
8001ec42:	c0 20       	breq	8001ec46 <lift_drag_base+0x42>
8001ec44:	30 15       	mov	r5,1
8001ec46:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8001ec4a:	c0 30       	breq	8001ec50 <lift_drag_base+0x4c>
8001ec4c:	30 08       	mov	r8,0
8001ec4e:	c9 f8       	rjmp	8001ed8c <lift_drag_base+0x188>
	float mean_vel=sim->rotor_diameter *PI * rpm/60.0;
8001ec50:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ec54:	f0 f8 01 68 	ld.w	r8,r8[360]
8001ec58:	10 9c       	mov	r12,r8
8001ec5a:	f0 16 00 02 	mcall	r6[8]
8001ec5e:	e0 68 2d 18 	mov	r8,11544
8001ec62:	ea 18 54 44 	orh	r8,0x5444
8001ec66:	e0 69 21 fb 	mov	r9,8699
8001ec6a:	ea 19 40 09 	orh	r9,0x4009
8001ec6e:	f0 16 00 03 	mcall	r6[12]
8001ec72:	14 98       	mov	r8,r10
8001ec74:	16 99       	mov	r9,r11
8001ec76:	10 92       	mov	r2,r8
8001ec78:	12 93       	mov	r3,r9
8001ec7a:	ee fc ff f0 	ld.w	r12,r7[-16]
8001ec7e:	f0 16 00 02 	mcall	r6[8]
8001ec82:	14 98       	mov	r8,r10
8001ec84:	16 99       	mov	r9,r11
8001ec86:	04 9a       	mov	r10,r2
8001ec88:	06 9b       	mov	r11,r3
8001ec8a:	f0 16 00 03 	mcall	r6[12]
8001ec8e:	14 98       	mov	r8,r10
8001ec90:	16 99       	mov	r9,r11
8001ec92:	10 9a       	mov	r10,r8
8001ec94:	12 9b       	mov	r11,r9
8001ec96:	30 08       	mov	r8,0
8001ec98:	fc 19 40 4e 	movh	r9,0x404e
8001ec9c:	f0 16 00 0c 	mcall	r6[48]
8001eca0:	14 98       	mov	r8,r10
8001eca2:	16 99       	mov	r9,r11
8001eca4:	10 9a       	mov	r10,r8
8001eca6:	12 9b       	mov	r11,r9
8001eca8:	f0 16 00 09 	mcall	r6[36]
8001ecac:	18 98       	mov	r8,r12
8001ecae:	ef 48 ff f8 	st.w	r7[-8],r8
	float exit_vel=rpm/60.0 *sim -> rotor_pitch;           
8001ecb2:	ee fc ff f0 	ld.w	r12,r7[-16]
8001ecb6:	f0 16 00 02 	mcall	r6[8]
8001ecba:	30 08       	mov	r8,0
8001ecbc:	fc 19 40 4e 	movh	r9,0x404e
8001ecc0:	f0 16 00 0c 	mcall	r6[48]
8001ecc4:	14 98       	mov	r8,r10
8001ecc6:	16 99       	mov	r9,r11
8001ecc8:	10 92       	mov	r2,r8
8001ecca:	12 93       	mov	r3,r9
8001eccc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ecd0:	f0 f8 01 70 	ld.w	r8,r8[368]
8001ecd4:	10 9c       	mov	r12,r8
8001ecd6:	f0 16 00 02 	mcall	r6[8]
8001ecda:	14 98       	mov	r8,r10
8001ecdc:	16 99       	mov	r9,r11
8001ecde:	04 9a       	mov	r10,r2
8001ece0:	06 9b       	mov	r11,r3
8001ece2:	f0 16 00 03 	mcall	r6[12]
8001ece6:	14 98       	mov	r8,r10
8001ece8:	16 99       	mov	r9,r11
8001ecea:	10 9a       	mov	r10,r8
8001ecec:	12 9b       	mov	r11,r9
8001ecee:	f0 16 00 09 	mcall	r6[36]
8001ecf2:	18 98       	mov	r8,r12
8001ecf4:	ef 48 ff fc 	st.w	r7[-4],r8
	return (0.5*AIR_DENSITY*(mean_vel*mean_vel +sqr_lat_airspeed) * sim->rotor_foil_area  * (1.0-(axial_airspeed/exit_vel)));
8001ecf8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ecfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ed00:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001ed04:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001ed08:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001ed0c:	10 9c       	mov	r12,r8
8001ed0e:	f0 16 00 02 	mcall	r6[8]
8001ed12:	e0 68 33 33 	mov	r8,13107
8001ed16:	ea 18 33 33 	orh	r8,0x3333
8001ed1a:	e0 69 33 33 	mov	r9,13107
8001ed1e:	ea 19 3f e3 	orh	r9,0x3fe3
8001ed22:	f0 16 00 03 	mcall	r6[12]
8001ed26:	14 98       	mov	r8,r10
8001ed28:	16 99       	mov	r9,r11
8001ed2a:	10 92       	mov	r2,r8
8001ed2c:	12 93       	mov	r3,r9
8001ed2e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ed32:	f0 f8 01 6c 	ld.w	r8,r8[364]
8001ed36:	10 9c       	mov	r12,r8
8001ed38:	f0 16 00 02 	mcall	r6[8]
8001ed3c:	14 98       	mov	r8,r10
8001ed3e:	16 99       	mov	r9,r11
8001ed40:	04 9a       	mov	r10,r2
8001ed42:	06 9b       	mov	r11,r3
8001ed44:	f0 16 00 03 	mcall	r6[12]
8001ed48:	14 98       	mov	r8,r10
8001ed4a:	16 99       	mov	r9,r11
8001ed4c:	10 92       	mov	r2,r8
8001ed4e:	12 93       	mov	r3,r9
8001ed50:	ee fb ff fc 	ld.w	r11,r7[-4]
8001ed54:	ee fc ff e8 	ld.w	r12,r7[-24]
8001ed58:	f0 16 00 08 	mcall	r6[32]
8001ed5c:	18 98       	mov	r8,r12
8001ed5e:	10 9c       	mov	r12,r8
8001ed60:	f0 16 00 02 	mcall	r6[8]
8001ed64:	14 98       	mov	r8,r10
8001ed66:	16 99       	mov	r9,r11
8001ed68:	30 0a       	mov	r10,0
8001ed6a:	fc 1b 3f f0 	movh	r11,0x3ff0
8001ed6e:	f0 16 00 11 	mcall	r6[68]
8001ed72:	14 98       	mov	r8,r10
8001ed74:	16 99       	mov	r9,r11
8001ed76:	04 9a       	mov	r10,r2
8001ed78:	06 9b       	mov	r11,r3
8001ed7a:	f0 16 00 03 	mcall	r6[12]
8001ed7e:	14 98       	mov	r8,r10
8001ed80:	16 99       	mov	r9,r11
8001ed82:	10 9a       	mov	r10,r8
8001ed84:	12 9b       	mov	r11,r9
8001ed86:	f0 16 00 09 	mcall	r6[36]
8001ed8a:	18 98       	mov	r8,r12
}
8001ed8c:	10 9c       	mov	r12,r8
8001ed8e:	2f ad       	sub	sp,-24
8001ed90:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001ed94:	80 01       	ld.sh	r1,r0[0x0]
8001ed96:	ea 92 eb cd 	brhs	8019c530 <_data_lma+0x168ce0>

8001ed98 <forces_from_servos_diag_quad>:


void forces_from_servos_diag_quad(simulation_model_t *sim, servo_output *servos){
8001ed98:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8001ed9c:	1a 97       	mov	r7,sp
8001ed9e:	21 dd       	sub	sp,116
8001eda0:	fe f6 04 54 	ld.w	r6,pc[1108]
8001eda4:	1e 26       	rsub	r6,pc
8001eda6:	ef 4c ff 90 	st.w	r7[-112],r12
8001edaa:	ef 4b ff 8c 	st.w	r7[-116],r11
	int i;
	float motor_command[4];
	float rotor_lifts[4], rotor_drags[4], rotor_inertia[4], rotor_lateral_drag[4];
	float ldb;
	
	float sqr_lateral_airspeed=SQR(sim->vel_bf[0]) + SQR(sim->vel_bf[1]*sim->vel_bf[1]);
8001edae:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001edb2:	70 99       	ld.w	r9,r8[0x24]
8001edb4:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001edb8:	70 98       	ld.w	r8,r8[0x24]
8001edba:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001edbe:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001edc2:	70 aa       	ld.w	r10,r8[0x28]
8001edc4:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001edc8:	70 a8       	ld.w	r8,r8[0x28]
8001edca:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8001edce:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001edd2:	70 ab       	ld.w	r11,r8[0x28]
8001edd4:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001edd8:	70 a8       	ld.w	r8,r8[0x28]
8001edda:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8001edde:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001ede2:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001ede6:	ef 48 ff ec 	st.w	r7[-20],r8
	float lateral_airspeed=sqrt(sqr_lateral_airspeed);
8001edea:	ee fc ff ec 	ld.w	r12,r7[-20]
8001edee:	f0 16 00 02 	mcall	r6[8]
8001edf2:	14 98       	mov	r8,r10
8001edf4:	16 99       	mov	r9,r11
8001edf6:	10 9a       	mov	r10,r8
8001edf8:	12 9b       	mov	r11,r9
8001edfa:	f0 16 00 70 	mcall	r6[448]
8001edfe:	14 98       	mov	r8,r10
8001ee00:	16 99       	mov	r9,r11
8001ee02:	10 9a       	mov	r10,r8
8001ee04:	12 9b       	mov	r11,r9
8001ee06:	f0 16 00 09 	mcall	r6[36]
8001ee0a:	18 98       	mov	r8,r12
8001ee0c:	ef 48 ff f0 	st.w	r7[-16],r8
	
	for (i=0; i<4; i++) {
8001ee10:	30 08       	mov	r8,0
8001ee12:	ef 48 ff e4 	st.w	r7[-28],r8
8001ee16:	cb 28       	rjmp	8001ef7a <forces_from_servos_diag_quad+0x1e2>
		float old_rotor_speed;
		motor_command[i]=(float)servos[i].value/SERVO_SCALE - sim->rotor_rpm_offset;
8001ee18:	ee f5 ff e4 	ld.w	r5,r7[-28]
8001ee1c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001ee20:	a5 68       	lsl	r8,0x4
8001ee22:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8001ee26:	f2 08 00 08 	add	r8,r9,r8
8001ee2a:	70 08       	ld.w	r8,r8[0x0]
8001ee2c:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001ee30:	fc 1b 43 fa 	movh	r11,0x43fa
8001ee34:	10 9c       	mov	r12,r8
8001ee36:	f0 16 00 08 	mcall	r6[32]
8001ee3a:	18 98       	mov	r8,r12
8001ee3c:	10 99       	mov	r9,r8
8001ee3e:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001ee42:	f0 f8 01 5c 	ld.w	r8,r8[348]
8001ee46:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001ee4a:	ea 08 15 02 	lsl	r8,r5,0x2
8001ee4e:	ee 08 00 08 	add	r8,r7,r8
8001ee52:	f1 49 ff d4 	st.w	r8[-44],r9
		if (motor_command[i]<0.0) motor_command[i]=0;
8001ee56:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001ee5a:	a3 68       	lsl	r8,0x2
8001ee5c:	ee 08 00 08 	add	r8,r7,r8
8001ee60:	f0 fa ff d4 	ld.w	r10,r8[-44]
8001ee64:	30 18       	mov	r8,1
8001ee66:	30 09       	mov	r9,0
8001ee68:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001ee6c:	e0 8c 00 03 	brvs	8001ee72 <forces_from_servos_diag_quad+0xda>
8001ee70:	c0 25       	brlt	8001ee74 <forces_from_servos_diag_quad+0xdc>
8001ee72:	30 08       	mov	r8,0
8001ee74:	5c 58       	castu.b	r8
8001ee76:	c0 90       	breq	8001ee88 <forces_from_servos_diag_quad+0xf0>
8001ee78:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001ee7c:	a3 68       	lsl	r8,0x2
8001ee7e:	ee 08 00 08 	add	r8,r7,r8
8001ee82:	30 09       	mov	r9,0
8001ee84:	f1 49 ff d4 	st.w	r8[-44],r9
		
		// temporarily save old rotor speeds
		old_rotor_speed=sim->rotorspeeds[i];
8001ee88:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001ee8c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001ee90:	2a f9       	sub	r9,-81
8001ee92:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001ee96:	ef 48 ff fc 	st.w	r7[-4],r8
		// estimate rotor speeds by low-pass filtering
		//sim->rotorspeeds[i]=(sim->rotor_lpf) * sim->rotorspeeds[i] + (1.0-sim->rotor_lpf) * (motor_command[i] * sim->rotor_rpm_gain);
		sim->rotorspeeds[i]=(motor_command[i] * sim->rotor_rpm_gain);
8001ee9a:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001ee9e:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001eea2:	a3 68       	lsl	r8,0x2
8001eea4:	ee 08 00 08 	add	r8,r7,r8
8001eea8:	f0 fa ff d4 	ld.w	r10,r8[-44]
8001eeac:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001eeb0:	f0 f8 01 58 	ld.w	r8,r8[344]
8001eeb4:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8001eeb8:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001eebc:	2a f9       	sub	r9,-81
8001eebe:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		// calculate torque created by rotor inertia
		rotor_inertia[i]=(sim->rotorspeeds[i] - old_rotor_speed)/sim->dt * sim->rotor_momentum;
8001eec2:	ee f5 ff e4 	ld.w	r5,r7[-28]
8001eec6:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001eeca:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001eece:	2a f9       	sub	r9,-81
8001eed0:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8001eed4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001eed8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8001eedc:	ee f9 ff 90 	ld.w	r9,r7[-112]
8001eee0:	f2 f9 01 90 	ld.w	r9,r9[400]
8001eee4:	12 9b       	mov	r11,r9
8001eee6:	10 9c       	mov	r12,r8
8001eee8:	f0 16 00 08 	mcall	r6[32]
8001eeec:	18 98       	mov	r8,r12
8001eeee:	10 99       	mov	r9,r8
8001eef0:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001eef4:	f0 f8 01 84 	ld.w	r8,r8[388]
8001eef8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001eefc:	ea 08 15 02 	lsl	r8,r5,0x2
8001ef00:	ee 08 00 08 	add	r8,r7,r8
8001ef04:	f1 49 ff a4 	st.w	r8[-92],r9
		
		ldb=lift_drag_base(sim, sim->rotorspeeds[i], sqr_lateral_airspeed, -sim->vel_bf[Z]);
8001ef08:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001ef0c:	70 b8       	ld.w	r8,r8[0x2c]
8001ef0e:	10 99       	mov	r9,r8
8001ef10:	ee 19 80 00 	eorh	r9,0x8000
8001ef14:	ee fa ff e4 	ld.w	r10,r7[-28]
8001ef18:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001ef1c:	2a fa       	sub	r10,-81
8001ef1e:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8001ef22:	ee fa ff ec 	ld.w	r10,r7[-20]
8001ef26:	10 9b       	mov	r11,r8
8001ef28:	ee fc ff 90 	ld.w	r12,r7[-112]
8001ef2c:	c6 ce       	rcall	8001ec04 <lift_drag_base>
8001ef2e:	18 98       	mov	r8,r12
8001ef30:	ef 48 ff e8 	st.w	r7[-24],r8
		//ldb=lift_drag_base(sim, sim->rotorspeeds[i], sqr_lateral_airspeed, 0.0);
		
		rotor_lifts[i]=ldb * sim->rotor_cl;
8001ef34:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001ef38:	ee f9 ff 90 	ld.w	r9,r7[-112]
8001ef3c:	f2 fa 01 64 	ld.w	r10,r9[356]
8001ef40:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001ef44:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
8001ef48:	a3 68       	lsl	r8,0x2
8001ef4a:	ee 08 00 08 	add	r8,r7,r8
8001ef4e:	f1 49 ff c4 	st.w	r8[-60],r9
		rotor_drags[i]=ldb * sim->rotor_cd;
8001ef52:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001ef56:	ee f9 ff 90 	ld.w	r9,r7[-112]
8001ef5a:	f2 fa 01 60 	ld.w	r10,r9[352]
8001ef5e:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001ef62:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
8001ef66:	a3 68       	lsl	r8,0x2
8001ef68:	ee 08 00 08 	add	r8,r7,r8
8001ef6c:	f1 49 ff b4 	st.w	r8[-76],r9
	float ldb;
	
	float sqr_lateral_airspeed=SQR(sim->vel_bf[0]) + SQR(sim->vel_bf[1]*sim->vel_bf[1]);
	float lateral_airspeed=sqrt(sqr_lateral_airspeed);
	
	for (i=0; i<4; i++) {
8001ef70:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001ef74:	2f f8       	sub	r8,-1
8001ef76:	ef 48 ff e4 	st.w	r7[-28],r8
8001ef7a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001ef7e:	58 38       	cp.w	r8,3
8001ef80:	fe 9a ff 4c 	brle	8001ee18 <forces_from_servos_diag_quad+0x80>
		
		rotor_lifts[i]=ldb * sim->rotor_cl;
		rotor_drags[i]=ldb * sim->rotor_cd;
	}
	
	float mpos_x=sim->rotor_arm_length / 1.4142;
8001ef84:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001ef88:	f0 f8 01 88 	ld.w	r8,r8[392]
8001ef8c:	10 9c       	mov	r12,r8
8001ef8e:	f0 16 00 02 	mcall	r6[8]
8001ef92:	e0 68 0d 1b 	mov	r8,3355
8001ef96:	ea 18 2d e0 	orh	r8,0x2de0
8001ef9a:	e0 69 a0 90 	mov	r9,41104
8001ef9e:	ea 19 3f f6 	orh	r9,0x3ff6
8001efa2:	f0 16 00 0c 	mcall	r6[48]
8001efa6:	14 98       	mov	r8,r10
8001efa8:	16 99       	mov	r9,r11
8001efaa:	10 9a       	mov	r10,r8
8001efac:	12 9b       	mov	r11,r9
8001efae:	f0 16 00 09 	mcall	r6[36]
8001efb2:	18 98       	mov	r8,r12
8001efb4:	ef 48 ff f4 	st.w	r7[-12],r8
	float mpos_y=sim->rotor_arm_length / 1.4142;
8001efb8:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001efbc:	f0 f8 01 88 	ld.w	r8,r8[392]
8001efc0:	10 9c       	mov	r12,r8
8001efc2:	f0 16 00 02 	mcall	r6[8]
8001efc6:	e0 68 0d 1b 	mov	r8,3355
8001efca:	ea 18 2d e0 	orh	r8,0x2de0
8001efce:	e0 69 a0 90 	mov	r9,41104
8001efd2:	ea 19 3f f6 	orh	r9,0x3ff6
8001efd6:	f0 16 00 0c 	mcall	r6[48]
8001efda:	14 98       	mov	r8,r10
8001efdc:	16 99       	mov	r9,r11
8001efde:	10 9a       	mov	r10,r8
8001efe0:	12 9b       	mov	r11,r9
8001efe2:	f0 16 00 09 	mcall	r6[36]
8001efe6:	18 98       	mov	r8,r12
8001efe8:	ef 48 ff f8 	st.w	r7[-8],r8
	
	// torque around x axis (roll)
	sim->torques_bf[ROLL]  = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_REAR_LEFT]  ) 
8001efec:	ee f9 ff cc 	ld.w	r9,r7[-52]
8001eff0:	ee f8 ff d0 	ld.w	r8,r7[-48]
8001eff4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
						    - (rotor_lifts[M_FRONT_RIGHT] + rotor_lifts[M_REAR_RIGHT] )) * mpos_y;;
8001eff8:	ee fa ff c8 	ld.w	r10,r7[-56]
8001effc:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001f000:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
	
	float mpos_x=sim->rotor_arm_length / 1.4142;
	float mpos_y=sim->rotor_arm_length / 1.4142;
	
	// torque around x axis (roll)
	sim->torques_bf[ROLL]  = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_REAR_LEFT]  ) 
8001f004:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001f008:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f00c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001f010:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001f014:	91 09       	st.w	r8[0x0],r9
						    - (rotor_lifts[M_FRONT_RIGHT] + rotor_lifts[M_REAR_RIGHT] )) * mpos_y;;

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
8001f016:	ee f9 ff cc 	ld.w	r9,r7[-52]
8001f01a:	ee f8 ff c8 	ld.w	r8,r7[-56]
8001f01e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;
8001f022:	ee fa ff d0 	ld.w	r10,r7[-48]
8001f026:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001f02a:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
	// torque around x axis (roll)
	sim->torques_bf[ROLL]  = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_REAR_LEFT]  ) 
						    - (rotor_lifts[M_FRONT_RIGHT] + rotor_lifts[M_REAR_RIGHT] )) * mpos_y;;

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
8001f02e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001f032:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f036:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001f03a:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001f03e:	91 19       	st.w	r8[0x4],r9
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;

	sim->torques_bf[YAW]   = (M_FL_DIR*(10.0*rotor_drags[M_FRONT_LEFT]+rotor_inertia[M_FRONT_LEFT])  + M_FR_DIR*(10.0*rotor_drags[M_FRONT_RIGHT]+rotor_inertia[M_FRONT_RIGHT])
8001f040:	ee f8 ff b8 	ld.w	r8,r7[-72]
8001f044:	10 9c       	mov	r12,r8
8001f046:	f0 16 00 02 	mcall	r6[8]
8001f04a:	30 08       	mov	r8,0
8001f04c:	fc 19 40 24 	movh	r9,0x4024
8001f050:	f0 16 00 03 	mcall	r6[12]
8001f054:	14 98       	mov	r8,r10
8001f056:	16 99       	mov	r9,r11
8001f058:	10 92       	mov	r2,r8
8001f05a:	12 93       	mov	r3,r9
8001f05c:	ee f8 ff a8 	ld.w	r8,r7[-88]
							+ M_RL_DIR*(10.0*rotor_drags[M_REAR_LEFT] +rotor_inertia[M_REAR_LEFT])   + M_RR_DIR*(10.0*rotor_drags[M_REAR_RIGHT] +rotor_inertia[M_REAR_RIGHT] ))*  sim->rotor_diameter;
8001f060:	10 9c       	mov	r12,r8
8001f062:	f0 16 00 02 	mcall	r6[8]
8001f066:	14 98       	mov	r8,r10
8001f068:	16 99       	mov	r9,r11
8001f06a:	04 9a       	mov	r10,r2
8001f06c:	06 9b       	mov	r11,r3
8001f06e:	f0 16 00 05 	mcall	r6[20]
8001f072:	14 98       	mov	r8,r10
8001f074:	16 99       	mov	r9,r11
8001f076:	10 92       	mov	r2,r8
8001f078:	12 93       	mov	r3,r9

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;

	sim->torques_bf[YAW]   = (M_FL_DIR*(10.0*rotor_drags[M_FRONT_LEFT]+rotor_inertia[M_FRONT_LEFT])  + M_FR_DIR*(10.0*rotor_drags[M_FRONT_RIGHT]+rotor_inertia[M_FRONT_RIGHT])
8001f07a:	ee f8 ff bc 	ld.w	r8,r7[-68]
8001f07e:	10 9c       	mov	r12,r8
8001f080:	f0 16 00 02 	mcall	r6[8]
8001f084:	30 08       	mov	r8,0
8001f086:	fc 19 40 24 	movh	r9,0x4024
8001f08a:	f0 16 00 03 	mcall	r6[12]
8001f08e:	14 98       	mov	r8,r10
8001f090:	16 99       	mov	r9,r11
8001f092:	10 90       	mov	r0,r8
8001f094:	12 91       	mov	r1,r9
8001f096:	ee f8 ff ac 	ld.w	r8,r7[-84]
8001f09a:	10 9c       	mov	r12,r8
8001f09c:	f0 16 00 02 	mcall	r6[8]
8001f0a0:	14 98       	mov	r8,r10
8001f0a2:	16 99       	mov	r9,r11
8001f0a4:	00 9a       	mov	r10,r0
8001f0a6:	02 9b       	mov	r11,r1
8001f0a8:	f0 16 00 05 	mcall	r6[20]
8001f0ac:	14 98       	mov	r8,r10
8001f0ae:	16 99       	mov	r9,r11
							+ M_RL_DIR*(10.0*rotor_drags[M_REAR_LEFT] +rotor_inertia[M_REAR_LEFT])   + M_RR_DIR*(10.0*rotor_drags[M_REAR_RIGHT] +rotor_inertia[M_REAR_RIGHT] ))*  sim->rotor_diameter;
8001f0b0:	04 9a       	mov	r10,r2
8001f0b2:	06 9b       	mov	r11,r3
8001f0b4:	f0 16 00 11 	mcall	r6[68]
8001f0b8:	14 98       	mov	r8,r10
8001f0ba:	16 99       	mov	r9,r11
8001f0bc:	10 92       	mov	r2,r8
8001f0be:	12 93       	mov	r3,r9
8001f0c0:	ee f8 ff c0 	ld.w	r8,r7[-64]
8001f0c4:	10 9c       	mov	r12,r8
8001f0c6:	f0 16 00 02 	mcall	r6[8]
8001f0ca:	30 08       	mov	r8,0
8001f0cc:	fc 19 40 24 	movh	r9,0x4024
8001f0d0:	f0 16 00 03 	mcall	r6[12]
8001f0d4:	14 98       	mov	r8,r10
8001f0d6:	16 99       	mov	r9,r11
8001f0d8:	10 90       	mov	r0,r8
8001f0da:	12 91       	mov	r1,r9
8001f0dc:	ee f8 ff b0 	ld.w	r8,r7[-80]
8001f0e0:	10 9c       	mov	r12,r8
8001f0e2:	f0 16 00 02 	mcall	r6[8]
8001f0e6:	14 98       	mov	r8,r10
8001f0e8:	16 99       	mov	r9,r11
8001f0ea:	00 9a       	mov	r10,r0
8001f0ec:	02 9b       	mov	r11,r1
8001f0ee:	f0 16 00 05 	mcall	r6[20]
8001f0f2:	14 98       	mov	r8,r10
8001f0f4:	16 99       	mov	r9,r11
8001f0f6:	04 9a       	mov	r10,r2
8001f0f8:	06 9b       	mov	r11,r3
8001f0fa:	f0 16 00 05 	mcall	r6[20]
8001f0fe:	14 98       	mov	r8,r10
8001f100:	16 99       	mov	r9,r11
8001f102:	10 92       	mov	r2,r8
8001f104:	12 93       	mov	r3,r9
8001f106:	ee f8 ff b4 	ld.w	r8,r7[-76]
8001f10a:	10 9c       	mov	r12,r8
8001f10c:	f0 16 00 02 	mcall	r6[8]
8001f110:	30 08       	mov	r8,0
8001f112:	fc 19 40 24 	movh	r9,0x4024
8001f116:	f0 16 00 03 	mcall	r6[12]
8001f11a:	14 98       	mov	r8,r10
8001f11c:	16 99       	mov	r9,r11
8001f11e:	10 90       	mov	r0,r8
8001f120:	12 91       	mov	r1,r9
8001f122:	ee f8 ff a4 	ld.w	r8,r7[-92]
8001f126:	10 9c       	mov	r12,r8
8001f128:	f0 16 00 02 	mcall	r6[8]
8001f12c:	14 98       	mov	r8,r10
8001f12e:	16 99       	mov	r9,r11
8001f130:	00 9a       	mov	r10,r0
8001f132:	02 9b       	mov	r11,r1
8001f134:	f0 16 00 05 	mcall	r6[20]
8001f138:	14 98       	mov	r8,r10
8001f13a:	16 99       	mov	r9,r11

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;

	sim->torques_bf[YAW]   = (M_FL_DIR*(10.0*rotor_drags[M_FRONT_LEFT]+rotor_inertia[M_FRONT_LEFT])  + M_FR_DIR*(10.0*rotor_drags[M_FRONT_RIGHT]+rotor_inertia[M_FRONT_RIGHT])
8001f13c:	04 9a       	mov	r10,r2
8001f13e:	06 9b       	mov	r11,r3
8001f140:	f0 16 00 11 	mcall	r6[68]
8001f144:	14 98       	mov	r8,r10
8001f146:	16 99       	mov	r9,r11
8001f148:	10 92       	mov	r2,r8
8001f14a:	12 93       	mov	r3,r9
8001f14c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001f150:	f0 f8 01 68 	ld.w	r8,r8[360]
8001f154:	10 9c       	mov	r12,r8
8001f156:	f0 16 00 02 	mcall	r6[8]
8001f15a:	14 98       	mov	r8,r10
8001f15c:	16 99       	mov	r9,r11
8001f15e:	04 9a       	mov	r10,r2
8001f160:	06 9b       	mov	r11,r3
8001f162:	f0 16 00 03 	mcall	r6[12]
8001f166:	14 98       	mov	r8,r10
8001f168:	16 99       	mov	r9,r11
8001f16a:	10 9a       	mov	r10,r8
8001f16c:	12 9b       	mov	r11,r9
8001f16e:	f0 16 00 09 	mcall	r6[36]
8001f172:	18 99       	mov	r9,r12
8001f174:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001f178:	91 29       	st.w	r8[0x8],r9
							+ M_RL_DIR*(10.0*rotor_drags[M_REAR_LEFT] +rotor_inertia[M_REAR_LEFT])   + M_RR_DIR*(10.0*rotor_drags[M_REAR_RIGHT] +rotor_inertia[M_REAR_RIGHT] ))*  sim->rotor_diameter;
	

	
	sim->lin_forces_bf[X] = -sim->vel_bf[X]*lateral_airspeed* sim->vehicle_drag;  
8001f17a:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001f17e:	70 98       	ld.w	r8,r8[0x24]
8001f180:	10 99       	mov	r9,r8
8001f182:	ee 19 80 00 	eorh	r9,0x8000
8001f186:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001f18a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001f18e:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001f192:	f0 f8 01 78 	ld.w	r8,r8[376]
8001f196:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001f19a:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001f19e:	91 69       	st.w	r8[0x18],r9
	sim->lin_forces_bf[Y] = -sim->vel_bf[Y]*lateral_airspeed* sim->vehicle_drag;
8001f1a0:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001f1a4:	70 a8       	ld.w	r8,r8[0x28]
8001f1a6:	10 99       	mov	r9,r8
8001f1a8:	ee 19 80 00 	eorh	r9,0x8000
8001f1ac:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001f1b0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001f1b4:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001f1b8:	f0 f8 01 78 	ld.w	r8,r8[376]
8001f1bc:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001f1c0:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001f1c4:	91 79       	st.w	r8[0x1c],r9
	sim->lin_forces_bf[Z] = -(rotor_lifts[M_FRONT_LEFT]+ rotor_lifts[M_FRONT_RIGHT] +rotor_lifts[M_REAR_LEFT] +rotor_lifts[M_REAR_RIGHT]);
8001f1c6:	ee f9 ff cc 	ld.w	r9,r7[-52]
8001f1ca:	ee f8 ff c8 	ld.w	r8,r7[-56]
8001f1ce:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001f1d2:	ee f8 ff d0 	ld.w	r8,r7[-48]
8001f1d6:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001f1da:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001f1de:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001f1e2:	10 99       	mov	r9,r8
8001f1e4:	ee 19 80 00 	eorh	r9,0x8000
8001f1e8:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001f1ec:	91 89       	st.w	r8[0x20],r9

}
8001f1ee:	2e 3d       	sub	sp,-116
8001f1f0:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8001f1f4:	80 01       	ld.sh	r1,r0[0x0]
8001f1f6:	ec 28 eb cd 	sub	r8,846797

8001f1f8 <forces_from_servos_cross_quad>:


void forces_from_servos_cross_quad(simulation_model_t *sim, servo_output *servos){
8001f1f8:	eb cd 40 80 	pushm	r7,lr
8001f1fc:	1a 97       	mov	r7,sp
8001f1fe:	20 7d       	sub	sp,28
8001f200:	ef 4c ff e8 	st.w	r7[-24],r12
8001f204:	ef 4b ff e4 	st.w	r7[-28],r11

	for (i=0; i<4; i++) {
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
	}
	*/
}
8001f208:	2f 9d       	sub	sp,-28
8001f20a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f20e <simu_update>:

void simu_update(simulation_model_t *sim, servo_output *servo_commands, Imu_Data_t *imu, position_estimator_t *pos_est) {
8001f20e:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001f212:	1a 97       	mov	r7,sp
8001f214:	21 fd       	sub	sp,124
8001f216:	fe f6 0b 7a 	ld.w	r6,pc[2938]
8001f21a:	1e 26       	rsub	r6,pc
8001f21c:	ef 4c ff a0 	st.w	r7[-96],r12
8001f220:	ef 4b ff 9c 	st.w	r7[-100],r11
8001f224:	ef 4a ff 98 	st.w	r7[-104],r10
8001f228:	ef 49 ff 94 	st.w	r7[-108],r9
	int i;
	UQuat_t qtmp1, qvel_bf,  qed;
	const UQuat_t front = {.s=0.0, .v={1.0, 0.0, 0.0}};
8001f22c:	30 08       	mov	r8,0
8001f22e:	ef 48 ff b4 	st.w	r7[-76],r8
8001f232:	fc 18 3f 80 	movh	r8,0x3f80
8001f236:	ef 48 ff b8 	st.w	r7[-72],r8
8001f23a:	30 08       	mov	r8,0
8001f23c:	ef 48 ff bc 	st.w	r7[-68],r8
8001f240:	30 08       	mov	r8,0
8001f242:	ef 48 ff c0 	st.w	r7[-64],r8
	const UQuat_t up = {.s=0.0, .v={UPVECTOR_X, UPVECTOR_Y, UPVECTOR_Z}};
8001f246:	30 08       	mov	r8,0
8001f248:	ef 48 ff a4 	st.w	r7[-92],r8
8001f24c:	30 08       	mov	r8,0
8001f24e:	ef 48 ff a8 	st.w	r7[-88],r8
8001f252:	30 08       	mov	r8,0
8001f254:	ef 48 ff ac 	st.w	r7[-84],r8
8001f258:	fc 18 bf 80 	movh	r8,0xbf80
8001f25c:	ef 48 ff b0 	st.w	r7[-80],r8
	
	central_data_t *central_data;
	uint32_t now=get_micros();
8001f260:	f0 16 00 29 	mcall	r6[164]
8001f264:	18 98       	mov	r8,r12
8001f266:	ef 48 ff fc 	st.w	r7[-4],r8
	sim->dt=(now - sim->last_update)/1000000.0;
8001f26a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f26e:	f0 f8 01 8c 	ld.w	r8,r8[396]
8001f272:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001f276:	f2 08 01 08 	sub	r8,r9,r8
8001f27a:	10 9c       	mov	r12,r8
8001f27c:	f0 16 00 52 	mcall	r6[328]
8001f280:	30 08       	mov	r8,0
8001f282:	e0 69 84 80 	mov	r9,33920
8001f286:	ea 19 41 2e 	orh	r9,0x412e
8001f28a:	f0 16 00 0c 	mcall	r6[48]
8001f28e:	14 98       	mov	r8,r10
8001f290:	16 99       	mov	r9,r11
8001f292:	10 9a       	mov	r10,r8
8001f294:	12 9b       	mov	r11,r9
8001f296:	f0 16 00 09 	mcall	r6[36]
8001f29a:	18 99       	mov	r9,r12
8001f29c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f2a0:	f1 49 01 90 	st.w	r8[400],r9
	sim->last_update=now;
8001f2a4:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f2a8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001f2ac:	f1 49 01 8c 	st.w	r8[396],r9
	central_data=get_central_data();
8001f2b0:	f0 16 00 33 	mcall	r6[204]
8001f2b4:	18 98       	mov	r8,r12
8001f2b6:	ef 48 ff f8 	st.w	r7[-8],r8
	// compute torques and forces based on servo commands
	#ifdef CONF_DIAG
	forces_from_servos_diag_quad(sim, servo_commands);
8001f2ba:	ee fb ff 9c 	ld.w	r11,r7[-100]
8001f2be:	ee fc ff a0 	ld.w	r12,r7[-96]
8001f2c2:	f0 16 01 ec 	mcall	r6[1968]
	forces_from_servos_cross_quad(sim, servo_commands);
	#endif
	
	// integrate torques to get simulated gyro rates (with some damping)
	//for (i=0; i<3; i++) {
	sim->rates_bf[0] = clip((1.0-0.1*sim->dt)*sim->rates_bf[0] + sim->dt * sim->torques_bf[0] /sim->roll_pitch_momentum, 10.0);
8001f2c6:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f2ca:	f0 f8 01 90 	ld.w	r8,r8[400]
8001f2ce:	10 9c       	mov	r12,r8
8001f2d0:	f0 16 00 02 	mcall	r6[8]
8001f2d4:	e0 68 99 9a 	mov	r8,39322
8001f2d8:	ea 18 99 99 	orh	r8,0x9999
8001f2dc:	e0 69 99 99 	mov	r9,39321
8001f2e0:	ea 19 bf b9 	orh	r9,0xbfb9
8001f2e4:	f0 16 00 03 	mcall	r6[12]
8001f2e8:	14 98       	mov	r8,r10
8001f2ea:	16 99       	mov	r9,r11
8001f2ec:	10 9a       	mov	r10,r8
8001f2ee:	12 9b       	mov	r11,r9
8001f2f0:	30 08       	mov	r8,0
8001f2f2:	fc 19 3f f0 	movh	r9,0x3ff0
8001f2f6:	f0 16 00 05 	mcall	r6[20]
8001f2fa:	14 98       	mov	r8,r10
8001f2fc:	16 99       	mov	r9,r11
8001f2fe:	10 92       	mov	r2,r8
8001f300:	12 93       	mov	r3,r9
8001f302:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f306:	70 38       	ld.w	r8,r8[0xc]
8001f308:	10 9c       	mov	r12,r8
8001f30a:	f0 16 00 02 	mcall	r6[8]
8001f30e:	14 98       	mov	r8,r10
8001f310:	16 99       	mov	r9,r11
8001f312:	04 9a       	mov	r10,r2
8001f314:	06 9b       	mov	r11,r3
8001f316:	f0 16 00 03 	mcall	r6[12]
8001f31a:	14 98       	mov	r8,r10
8001f31c:	16 99       	mov	r9,r11
8001f31e:	10 92       	mov	r2,r8
8001f320:	12 93       	mov	r3,r9
8001f322:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f326:	f0 f9 01 90 	ld.w	r9,r8[400]
8001f32a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f32e:	70 08       	ld.w	r8,r8[0x0]
8001f330:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001f334:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001f338:	f2 f9 01 7c 	ld.w	r9,r9[380]
8001f33c:	12 9b       	mov	r11,r9
8001f33e:	10 9c       	mov	r12,r8
8001f340:	f0 16 00 08 	mcall	r6[32]
8001f344:	18 98       	mov	r8,r12
8001f346:	10 9c       	mov	r12,r8
8001f348:	f0 16 00 02 	mcall	r6[8]
8001f34c:	14 98       	mov	r8,r10
8001f34e:	16 99       	mov	r9,r11
8001f350:	04 9a       	mov	r10,r2
8001f352:	06 9b       	mov	r11,r3
8001f354:	f0 16 00 05 	mcall	r6[20]
8001f358:	14 98       	mov	r8,r10
8001f35a:	16 99       	mov	r9,r11
8001f35c:	10 9a       	mov	r10,r8
8001f35e:	12 9b       	mov	r11,r9
8001f360:	f0 16 00 09 	mcall	r6[36]
8001f364:	18 98       	mov	r8,r12
8001f366:	fc 1b 41 20 	movh	r11,0x4120
8001f36a:	10 9c       	mov	r12,r8
8001f36c:	fe b0 fb 2a 	rcall	8001e9c0 <clip>
8001f370:	18 99       	mov	r9,r12
8001f372:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f376:	91 39       	st.w	r8[0xc],r9
	sim->rates_bf[1] = clip((1.0-0.1*sim->dt)*sim->rates_bf[1] + sim->dt * sim->torques_bf[1] /sim->roll_pitch_momentum, 10.0);
8001f378:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f37c:	f0 f8 01 90 	ld.w	r8,r8[400]
8001f380:	10 9c       	mov	r12,r8
8001f382:	f0 16 00 02 	mcall	r6[8]
8001f386:	e0 68 99 9a 	mov	r8,39322
8001f38a:	ea 18 99 99 	orh	r8,0x9999
8001f38e:	e0 69 99 99 	mov	r9,39321
8001f392:	ea 19 bf b9 	orh	r9,0xbfb9
8001f396:	f0 16 00 03 	mcall	r6[12]
8001f39a:	14 98       	mov	r8,r10
8001f39c:	16 99       	mov	r9,r11
8001f39e:	10 9a       	mov	r10,r8
8001f3a0:	12 9b       	mov	r11,r9
8001f3a2:	30 08       	mov	r8,0
8001f3a4:	fc 19 3f f0 	movh	r9,0x3ff0
8001f3a8:	f0 16 00 05 	mcall	r6[20]
8001f3ac:	14 98       	mov	r8,r10
8001f3ae:	16 99       	mov	r9,r11
8001f3b0:	10 92       	mov	r2,r8
8001f3b2:	12 93       	mov	r3,r9
8001f3b4:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f3b8:	70 48       	ld.w	r8,r8[0x10]
8001f3ba:	10 9c       	mov	r12,r8
8001f3bc:	f0 16 00 02 	mcall	r6[8]
8001f3c0:	14 98       	mov	r8,r10
8001f3c2:	16 99       	mov	r9,r11
8001f3c4:	04 9a       	mov	r10,r2
8001f3c6:	06 9b       	mov	r11,r3
8001f3c8:	f0 16 00 03 	mcall	r6[12]
8001f3cc:	14 98       	mov	r8,r10
8001f3ce:	16 99       	mov	r9,r11
8001f3d0:	10 92       	mov	r2,r8
8001f3d2:	12 93       	mov	r3,r9
8001f3d4:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f3d8:	f0 f9 01 90 	ld.w	r9,r8[400]
8001f3dc:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f3e0:	70 18       	ld.w	r8,r8[0x4]
8001f3e2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001f3e6:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001f3ea:	f2 f9 01 7c 	ld.w	r9,r9[380]
8001f3ee:	12 9b       	mov	r11,r9
8001f3f0:	10 9c       	mov	r12,r8
8001f3f2:	f0 16 00 08 	mcall	r6[32]
8001f3f6:	18 98       	mov	r8,r12
8001f3f8:	10 9c       	mov	r12,r8
8001f3fa:	f0 16 00 02 	mcall	r6[8]
8001f3fe:	14 98       	mov	r8,r10
8001f400:	16 99       	mov	r9,r11
8001f402:	04 9a       	mov	r10,r2
8001f404:	06 9b       	mov	r11,r3
8001f406:	f0 16 00 05 	mcall	r6[20]
8001f40a:	14 98       	mov	r8,r10
8001f40c:	16 99       	mov	r9,r11
8001f40e:	10 9a       	mov	r10,r8
8001f410:	12 9b       	mov	r11,r9
8001f412:	f0 16 00 09 	mcall	r6[36]
8001f416:	18 98       	mov	r8,r12
8001f418:	fc 1b 41 20 	movh	r11,0x4120
8001f41c:	10 9c       	mov	r12,r8
8001f41e:	fe b0 fa d1 	rcall	8001e9c0 <clip>
8001f422:	18 99       	mov	r9,r12
8001f424:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f428:	91 49       	st.w	r8[0x10],r9
	sim->rates_bf[2] = clip((1.0-0.1*sim->dt)*sim->rates_bf[2] + sim->dt * sim->torques_bf[2] /sim->yaw_momentum, 10.0);
8001f42a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f42e:	f0 f8 01 90 	ld.w	r8,r8[400]
8001f432:	10 9c       	mov	r12,r8
8001f434:	f0 16 00 02 	mcall	r6[8]
8001f438:	e0 68 99 9a 	mov	r8,39322
8001f43c:	ea 18 99 99 	orh	r8,0x9999
8001f440:	e0 69 99 99 	mov	r9,39321
8001f444:	ea 19 bf b9 	orh	r9,0xbfb9
8001f448:	f0 16 00 03 	mcall	r6[12]
8001f44c:	14 98       	mov	r8,r10
8001f44e:	16 99       	mov	r9,r11
8001f450:	10 9a       	mov	r10,r8
8001f452:	12 9b       	mov	r11,r9
8001f454:	30 08       	mov	r8,0
8001f456:	fc 19 3f f0 	movh	r9,0x3ff0
8001f45a:	f0 16 00 05 	mcall	r6[20]
8001f45e:	14 98       	mov	r8,r10
8001f460:	16 99       	mov	r9,r11
8001f462:	10 92       	mov	r2,r8
8001f464:	12 93       	mov	r3,r9
8001f466:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f46a:	70 58       	ld.w	r8,r8[0x14]
8001f46c:	10 9c       	mov	r12,r8
8001f46e:	f0 16 00 02 	mcall	r6[8]
8001f472:	14 98       	mov	r8,r10
8001f474:	16 99       	mov	r9,r11
8001f476:	04 9a       	mov	r10,r2
8001f478:	06 9b       	mov	r11,r3
8001f47a:	f0 16 00 03 	mcall	r6[12]
8001f47e:	14 98       	mov	r8,r10
8001f480:	16 99       	mov	r9,r11
8001f482:	10 92       	mov	r2,r8
8001f484:	12 93       	mov	r3,r9
8001f486:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f48a:	f0 f9 01 90 	ld.w	r9,r8[400]
8001f48e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f492:	70 28       	ld.w	r8,r8[0x8]
8001f494:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001f498:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001f49c:	f2 f9 01 80 	ld.w	r9,r9[384]
8001f4a0:	12 9b       	mov	r11,r9
8001f4a2:	10 9c       	mov	r12,r8
8001f4a4:	f0 16 00 08 	mcall	r6[32]
8001f4a8:	18 98       	mov	r8,r12
8001f4aa:	10 9c       	mov	r12,r8
8001f4ac:	f0 16 00 02 	mcall	r6[8]
8001f4b0:	14 98       	mov	r8,r10
8001f4b2:	16 99       	mov	r9,r11
8001f4b4:	04 9a       	mov	r10,r2
8001f4b6:	06 9b       	mov	r11,r3
8001f4b8:	f0 16 00 05 	mcall	r6[20]
8001f4bc:	14 98       	mov	r8,r10
8001f4be:	16 99       	mov	r9,r11
8001f4c0:	10 9a       	mov	r10,r8
8001f4c2:	12 9b       	mov	r11,r9
8001f4c4:	f0 16 00 09 	mcall	r6[36]
8001f4c8:	18 98       	mov	r8,r12
8001f4ca:	fc 1b 41 20 	movh	r11,0x4120
8001f4ce:	10 9c       	mov	r12,r8
8001f4d0:	fe b0 fa 78 	rcall	8001e9c0 <clip>
8001f4d4:	18 99       	mov	r9,r12
8001f4d6:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f4da:	91 59       	st.w	r8[0x14],r9
	//}
	
	
	for (i=0; i<3; i++){
8001f4dc:	30 08       	mov	r8,0
8001f4de:	ef 48 ff f4 	st.w	r7[-12],r8
8001f4e2:	c1 58       	rjmp	8001f50c <simu_update+0x2fe>
			qtmp1.v[i] = sim->rates_bf[i];
8001f4e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f4e8:	ee fa ff f4 	ld.w	r10,r7[-12]
8001f4ec:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001f4f0:	2f da       	sub	r10,-3
8001f4f2:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8001f4f6:	2f f8       	sub	r8,-1
8001f4f8:	a3 68       	lsl	r8,0x2
8001f4fa:	ee 08 00 08 	add	r8,r7,r8
8001f4fe:	f1 49 ff e4 	st.w	r8[-28],r9
	sim->rates_bf[1] = clip((1.0-0.1*sim->dt)*sim->rates_bf[1] + sim->dt * sim->torques_bf[1] /sim->roll_pitch_momentum, 10.0);
	sim->rates_bf[2] = clip((1.0-0.1*sim->dt)*sim->rates_bf[2] + sim->dt * sim->torques_bf[2] /sim->yaw_momentum, 10.0);
	//}
	
	
	for (i=0; i<3; i++){
8001f502:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f506:	2f f8       	sub	r8,-1
8001f508:	ef 48 ff f4 	st.w	r7[-12],r8
8001f50c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f510:	58 28       	cp.w	r8,2
8001f512:	fe 9a ff e9 	brle	8001f4e4 <simu_update+0x2d6>
			qtmp1.v[i] = sim->rates_bf[i];
	}
	qtmp1.s=0;
8001f516:	30 08       	mov	r8,0
8001f518:	ef 48 ff e4 	st.w	r7[-28],r8

	// apply step rotation 
	qed = quat_multi(sim->attitude.qe,qtmp1);
8001f51c:	ee ca 00 3c 	sub	r10,r7,60
8001f520:	20 4d       	sub	sp,16
8001f522:	1a 98       	mov	r8,sp
8001f524:	ee c9 00 1c 	sub	r9,r7,28
8001f528:	20 08       	sub	r8,0
8001f52a:	20 09       	sub	r9,0
8001f52c:	72 0b       	ld.w	r11,r9[0x0]
8001f52e:	91 0b       	st.w	r8[0x0],r11
8001f530:	72 1b       	ld.w	r11,r9[0x4]
8001f532:	91 1b       	st.w	r8[0x4],r11
8001f534:	72 2b       	ld.w	r11,r9[0x8]
8001f536:	91 2b       	st.w	r8[0x8],r11
8001f538:	72 39       	ld.w	r9,r9[0xc]
8001f53a:	91 39       	st.w	r8[0xc],r9
8001f53c:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001f540:	20 4d       	sub	sp,16
8001f542:	1a 98       	mov	r8,sp
8001f544:	2b 89       	sub	r9,-72
8001f546:	20 08       	sub	r8,0
8001f548:	20 09       	sub	r9,0
8001f54a:	72 0b       	ld.w	r11,r9[0x0]
8001f54c:	91 0b       	st.w	r8[0x0],r11
8001f54e:	72 1b       	ld.w	r11,r9[0x4]
8001f550:	91 1b       	st.w	r8[0x4],r11
8001f552:	72 2b       	ld.w	r11,r9[0x8]
8001f554:	91 2b       	st.w	r8[0x8],r11
8001f556:	72 39       	ld.w	r9,r9[0xc]
8001f558:	91 39       	st.w	r8[0xc],r9
8001f55a:	14 9c       	mov	r12,r10
8001f55c:	fe b0 f7 90 	rcall	8001e47c <quat_multi>
8001f560:	2f 8d       	sub	sp,-32

	sim->attitude.qe.s=sim->attitude.qe.s+qed.s*sim->dt;
8001f562:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f566:	71 29       	ld.w	r9,r8[0x48]
8001f568:	ee fa ff c4 	ld.w	r10,r7[-60]
8001f56c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f570:	f0 f8 01 90 	ld.w	r8,r8[400]
8001f574:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001f578:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001f57c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f580:	f1 49 00 48 	st.w	r8[72],r9
	sim->attitude.qe.v[0]+=qed.v[0]*sim->dt;
8001f584:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f588:	71 39       	ld.w	r9,r8[0x4c]
8001f58a:	ee fa ff c8 	ld.w	r10,r7[-56]
8001f58e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f592:	f0 f8 01 90 	ld.w	r8,r8[400]
8001f596:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001f59a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001f59e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f5a2:	f1 49 00 4c 	st.w	r8[76],r9
	sim->attitude.qe.v[1]+=qed.v[1]*sim->dt;
8001f5a6:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f5aa:	71 49       	ld.w	r9,r8[0x50]
8001f5ac:	ee fa ff cc 	ld.w	r10,r7[-52]
8001f5b0:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f5b4:	f0 f8 01 90 	ld.w	r8,r8[400]
8001f5b8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001f5bc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001f5c0:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f5c4:	f1 49 00 50 	st.w	r8[80],r9
	sim->attitude.qe.v[2]+=qed.v[2]*sim->dt;
8001f5c8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f5cc:	71 59       	ld.w	r9,r8[0x54]
8001f5ce:	ee fa ff d0 	ld.w	r10,r7[-48]
8001f5d2:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f5d6:	f0 f8 01 90 	ld.w	r8,r8[400]
8001f5da:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001f5de:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001f5e2:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f5e6:	f1 49 00 54 	st.w	r8[84],r9

	sim->attitude.qe = quat_normalise(sim->attitude.qe);
8001f5ea:	ee f5 ff a0 	ld.w	r5,r7[-96]
8001f5ee:	ee ca 00 7c 	sub	r10,r7,124
8001f5f2:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001f5f6:	20 4d       	sub	sp,16
8001f5f8:	1a 98       	mov	r8,sp
8001f5fa:	2b 89       	sub	r9,-72
8001f5fc:	20 08       	sub	r8,0
8001f5fe:	20 09       	sub	r9,0
8001f600:	72 0b       	ld.w	r11,r9[0x0]
8001f602:	91 0b       	st.w	r8[0x0],r11
8001f604:	72 1b       	ld.w	r11,r9[0x4]
8001f606:	91 1b       	st.w	r8[0x4],r11
8001f608:	72 2b       	ld.w	r11,r9[0x8]
8001f60a:	91 2b       	st.w	r8[0x8],r11
8001f60c:	72 39       	ld.w	r9,r9[0xc]
8001f60e:	91 39       	st.w	r8[0xc],r9
8001f610:	14 9c       	mov	r12,r10
8001f612:	fe b0 f9 53 	rcall	8001e8b8 <quat_normalise>
8001f616:	2f cd       	sub	sp,-16
8001f618:	ea c8 ff b8 	sub	r8,r5,-72
8001f61c:	ee c9 00 7c 	sub	r9,r7,124
8001f620:	20 08       	sub	r8,0
8001f622:	20 09       	sub	r9,0
8001f624:	72 0a       	ld.w	r10,r9[0x0]
8001f626:	91 0a       	st.w	r8[0x0],r10
8001f628:	72 1a       	ld.w	r10,r9[0x4]
8001f62a:	91 1a       	st.w	r8[0x4],r10
8001f62c:	72 2a       	ld.w	r10,r9[0x8]
8001f62e:	91 2a       	st.w	r8[0x8],r10
8001f630:	72 39       	ld.w	r9,r9[0xc]
8001f632:	91 39       	st.w	r8[0xc],r9
	sim->attitude.up_vec = quat_global_to_local(sim->attitude.qe, up);
8001f634:	ee f5 ff a0 	ld.w	r5,r7[-96]
8001f638:	ee ca 00 7c 	sub	r10,r7,124
8001f63c:	20 4d       	sub	sp,16
8001f63e:	1a 98       	mov	r8,sp
8001f640:	ee c9 00 5c 	sub	r9,r7,92
8001f644:	20 08       	sub	r8,0
8001f646:	20 09       	sub	r9,0
8001f648:	72 0b       	ld.w	r11,r9[0x0]
8001f64a:	91 0b       	st.w	r8[0x0],r11
8001f64c:	72 1b       	ld.w	r11,r9[0x4]
8001f64e:	91 1b       	st.w	r8[0x4],r11
8001f650:	72 2b       	ld.w	r11,r9[0x8]
8001f652:	91 2b       	st.w	r8[0x8],r11
8001f654:	72 39       	ld.w	r9,r9[0xc]
8001f656:	91 39       	st.w	r8[0xc],r9
8001f658:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001f65c:	20 4d       	sub	sp,16
8001f65e:	1a 98       	mov	r8,sp
8001f660:	2b 89       	sub	r9,-72
8001f662:	20 08       	sub	r8,0
8001f664:	20 09       	sub	r9,0
8001f666:	72 0b       	ld.w	r11,r9[0x0]
8001f668:	91 0b       	st.w	r8[0x0],r11
8001f66a:	72 1b       	ld.w	r11,r9[0x4]
8001f66c:	91 1b       	st.w	r8[0x4],r11
8001f66e:	72 2b       	ld.w	r11,r9[0x8]
8001f670:	91 2b       	st.w	r8[0x8],r11
8001f672:	72 39       	ld.w	r9,r9[0xc]
8001f674:	91 39       	st.w	r8[0xc],r9
8001f676:	14 9c       	mov	r12,r10
8001f678:	fe b0 f7 ba 	rcall	8001e5ec <quat_global_to_local>
8001f67c:	2f 8d       	sub	sp,-32
8001f67e:	ea c8 ff a8 	sub	r8,r5,-88
8001f682:	ee c9 00 7c 	sub	r9,r7,124
8001f686:	20 08       	sub	r8,0
8001f688:	20 09       	sub	r9,0
8001f68a:	72 0a       	ld.w	r10,r9[0x0]
8001f68c:	91 0a       	st.w	r8[0x0],r10
8001f68e:	72 1a       	ld.w	r10,r9[0x4]
8001f690:	91 1a       	st.w	r8[0x4],r10
8001f692:	72 2a       	ld.w	r10,r9[0x8]
8001f694:	91 2a       	st.w	r8[0x8],r10
8001f696:	72 39       	ld.w	r9,r9[0xc]
8001f698:	91 39       	st.w	r8[0xc],r9
	
	sim->attitude.north_vec=quat_global_to_local(sim->attitude.qe, front);	
8001f69a:	ee f5 ff a0 	ld.w	r5,r7[-96]
8001f69e:	ee ca 00 7c 	sub	r10,r7,124
8001f6a2:	20 4d       	sub	sp,16
8001f6a4:	1a 98       	mov	r8,sp
8001f6a6:	ee c9 00 4c 	sub	r9,r7,76
8001f6aa:	20 08       	sub	r8,0
8001f6ac:	20 09       	sub	r9,0
8001f6ae:	72 0b       	ld.w	r11,r9[0x0]
8001f6b0:	91 0b       	st.w	r8[0x0],r11
8001f6b2:	72 1b       	ld.w	r11,r9[0x4]
8001f6b4:	91 1b       	st.w	r8[0x4],r11
8001f6b6:	72 2b       	ld.w	r11,r9[0x8]
8001f6b8:	91 2b       	st.w	r8[0x8],r11
8001f6ba:	72 39       	ld.w	r9,r9[0xc]
8001f6bc:	91 39       	st.w	r8[0xc],r9
8001f6be:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001f6c2:	20 4d       	sub	sp,16
8001f6c4:	1a 98       	mov	r8,sp
8001f6c6:	2b 89       	sub	r9,-72
8001f6c8:	20 08       	sub	r8,0
8001f6ca:	20 09       	sub	r9,0
8001f6cc:	72 0b       	ld.w	r11,r9[0x0]
8001f6ce:	91 0b       	st.w	r8[0x0],r11
8001f6d0:	72 1b       	ld.w	r11,r9[0x4]
8001f6d2:	91 1b       	st.w	r8[0x4],r11
8001f6d4:	72 2b       	ld.w	r11,r9[0x8]
8001f6d6:	91 2b       	st.w	r8[0x8],r11
8001f6d8:	72 39       	ld.w	r9,r9[0xc]
8001f6da:	91 39       	st.w	r8[0xc],r9
8001f6dc:	14 9c       	mov	r12,r10
8001f6de:	fe b0 f7 87 	rcall	8001e5ec <quat_global_to_local>
8001f6e2:	2f 8d       	sub	sp,-32
8001f6e4:	ea c8 ff 98 	sub	r8,r5,-104
8001f6e8:	ee c9 00 7c 	sub	r9,r7,124
8001f6ec:	20 08       	sub	r8,0
8001f6ee:	20 09       	sub	r9,0
8001f6f0:	72 0a       	ld.w	r10,r9[0x0]
8001f6f2:	91 0a       	st.w	r8[0x0],r10
8001f6f4:	72 1a       	ld.w	r10,r9[0x4]
8001f6f6:	91 1a       	st.w	r8[0x4],r10
8001f6f8:	72 2a       	ld.w	r10,r9[0x8]
8001f6fa:	91 2a       	st.w	r8[0x8],r10
8001f6fc:	72 39       	ld.w	r9,r9[0xc]
8001f6fe:	91 39       	st.w	r8[0xc],r9

	// velocity and position integration
	
	// check altitude - if it is lower than 0, clamp everything (this is in NED, assuming negative altitude)
	if (sim->localPosition.pos[Z] >0) {
8001f700:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f704:	f0 fa 01 1c 	ld.w	r10,r8[284]
8001f708:	30 18       	mov	r8,1
8001f70a:	30 09       	mov	r9,0
8001f70c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001f710:	e0 8c 00 04 	brvs	8001f718 <simu_update+0x50a>
8001f714:	e0 89 00 03 	brgt	8001f71a <simu_update+0x50c>
8001f718:	30 08       	mov	r8,0
8001f71a:	5c 58       	castu.b	r8
8001f71c:	e0 80 00 85 	breq	8001f826 <simu_update+0x618>
		sim->vel[Z]=0.0;
8001f720:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f724:	30 09       	mov	r9,0
8001f726:	91 e9       	st.w	r8[0x38],r9
		sim->localPosition.pos[Z]=0.0;
8001f728:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f72c:	30 09       	mov	r9,0
8001f72e:	f1 49 01 1c 	st.w	r8[284],r9

		// simulate "acceleration" caused by contact force with ground, compensating gravity
		for (i=0; i<3; i++) {
8001f732:	30 08       	mov	r8,0
8001f734:	ef 48 ff f4 	st.w	r7[-12],r8
8001f738:	c4 18       	rjmp	8001f7ba <simu_update+0x5ac>
			sim->lin_forces_bf[i]+=sim->attitude.up_vec.v[i]*sim->total_mass *GRAVITY;
8001f73a:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001f73e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001f742:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f746:	2f a9       	sub	r9,-6
8001f748:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001f74c:	10 9c       	mov	r12,r8
8001f74e:	f0 16 00 02 	mcall	r6[8]
8001f752:	14 92       	mov	r2,r10
8001f754:	16 93       	mov	r3,r11
8001f756:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001f75a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f75e:	2e 99       	sub	r9,-23
8001f760:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8001f764:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f768:	f0 f8 01 74 	ld.w	r8,r8[372]
8001f76c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001f770:	10 9c       	mov	r12,r8
8001f772:	f0 16 00 02 	mcall	r6[8]
8001f776:	e0 68 85 1f 	mov	r8,34079
8001f77a:	ea 18 51 eb 	orh	r8,0x51eb
8001f77e:	e0 69 9e b8 	mov	r9,40632
8001f782:	ea 19 40 23 	orh	r9,0x4023
8001f786:	f0 16 00 03 	mcall	r6[12]
8001f78a:	14 98       	mov	r8,r10
8001f78c:	16 99       	mov	r9,r11
8001f78e:	04 9a       	mov	r10,r2
8001f790:	06 9b       	mov	r11,r3
8001f792:	f0 16 00 05 	mcall	r6[20]
8001f796:	14 98       	mov	r8,r10
8001f798:	16 99       	mov	r9,r11
8001f79a:	10 9a       	mov	r10,r8
8001f79c:	12 9b       	mov	r11,r9
8001f79e:	f0 16 00 09 	mcall	r6[36]
8001f7a2:	18 9a       	mov	r10,r12
8001f7a4:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f7a8:	ea c9 ff fa 	sub	r9,r5,-6
8001f7ac:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	if (sim->localPosition.pos[Z] >0) {
		sim->vel[Z]=0.0;
		sim->localPosition.pos[Z]=0.0;

		// simulate "acceleration" caused by contact force with ground, compensating gravity
		for (i=0; i<3; i++) {
8001f7b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f7b4:	2f f8       	sub	r8,-1
8001f7b6:	ef 48 ff f4 	st.w	r7[-12],r8
8001f7ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f7be:	58 28       	cp.w	r8,2
8001f7c0:	fe 9a ff bd 	brle	8001f73a <simu_update+0x52c>
			sim->lin_forces_bf[i]+=sim->attitude.up_vec.v[i]*sim->total_mass *GRAVITY;
		}
				
		// slow down... (will make velocity slightly inconsistent until next update cycle, but shouldn't matter much)
		for (i=0; i<3; i++) {
8001f7c4:	30 08       	mov	r8,0
8001f7c6:	ef 48 ff f4 	st.w	r7[-12],r8
8001f7ca:	c2 98       	rjmp	8001f81c <simu_update+0x60e>
			sim->vel_bf[i]=0.95*sim->vel_bf[i];
8001f7cc:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001f7d0:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001f7d4:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f7d8:	2f 79       	sub	r9,-9
8001f7da:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001f7de:	10 9c       	mov	r12,r8
8001f7e0:	f0 16 00 02 	mcall	r6[8]
8001f7e4:	e0 68 66 66 	mov	r8,26214
8001f7e8:	ea 18 66 66 	orh	r8,0x6666
8001f7ec:	e0 69 66 66 	mov	r9,26214
8001f7f0:	ea 19 3f ee 	orh	r9,0x3fee
8001f7f4:	f0 16 00 03 	mcall	r6[12]
8001f7f8:	14 98       	mov	r8,r10
8001f7fa:	16 99       	mov	r9,r11
8001f7fc:	10 9a       	mov	r10,r8
8001f7fe:	12 9b       	mov	r11,r9
8001f800:	f0 16 00 09 	mcall	r6[36]
8001f804:	18 9a       	mov	r10,r12
8001f806:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f80a:	ea c9 ff f7 	sub	r9,r5,-9
8001f80e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		for (i=0; i<3; i++) {
			sim->lin_forces_bf[i]+=sim->attitude.up_vec.v[i]*sim->total_mass *GRAVITY;
		}
				
		// slow down... (will make velocity slightly inconsistent until next update cycle, but shouldn't matter much)
		for (i=0; i<3; i++) {
8001f812:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f816:	2f f8       	sub	r8,-1
8001f818:	ef 48 ff f4 	st.w	r7[-12],r8
8001f81c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f820:	58 28       	cp.w	r8,2
8001f822:	fe 9a ff d5 	brle	8001f7cc <simu_update+0x5be>
			sim->vel_bf[i]=0.95*sim->vel_bf[i];
		}
	}
	
	for (i=0; i<3; i++){
8001f826:	30 08       	mov	r8,0
8001f828:	ef 48 ff f4 	st.w	r7[-12],r8
8001f82c:	c1 58       	rjmp	8001f856 <simu_update+0x648>
			qtmp1.v[i] = sim->vel[i];
8001f82e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f832:	ee fa ff f4 	ld.w	r10,r7[-12]
8001f836:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001f83a:	2f 4a       	sub	r10,-12
8001f83c:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8001f840:	2f f8       	sub	r8,-1
8001f842:	a3 68       	lsl	r8,0x2
8001f844:	ee 08 00 08 	add	r8,r7,r8
8001f848:	f1 49 ff e4 	st.w	r8[-28],r9
		for (i=0; i<3; i++) {
			sim->vel_bf[i]=0.95*sim->vel_bf[i];
		}
	}
	
	for (i=0; i<3; i++){
8001f84c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f850:	2f f8       	sub	r8,-1
8001f852:	ef 48 ff f4 	st.w	r7[-12],r8
8001f856:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f85a:	58 28       	cp.w	r8,2
8001f85c:	fe 9a ff e9 	brle	8001f82e <simu_update+0x620>
			qtmp1.v[i] = sim->vel[i];
	}
	qtmp1.s=0.0;
8001f860:	30 08       	mov	r8,0
8001f862:	ef 48 ff e4 	st.w	r7[-28],r8
	qvel_bf=quat_global_to_local(sim->attitude.qe, qtmp1);
8001f866:	ee ca 00 7c 	sub	r10,r7,124
8001f86a:	20 4d       	sub	sp,16
8001f86c:	1a 98       	mov	r8,sp
8001f86e:	ee c9 00 1c 	sub	r9,r7,28
8001f872:	20 08       	sub	r8,0
8001f874:	20 09       	sub	r9,0
8001f876:	72 0b       	ld.w	r11,r9[0x0]
8001f878:	91 0b       	st.w	r8[0x0],r11
8001f87a:	72 1b       	ld.w	r11,r9[0x4]
8001f87c:	91 1b       	st.w	r8[0x4],r11
8001f87e:	72 2b       	ld.w	r11,r9[0x8]
8001f880:	91 2b       	st.w	r8[0x8],r11
8001f882:	72 39       	ld.w	r9,r9[0xc]
8001f884:	91 39       	st.w	r8[0xc],r9
8001f886:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001f88a:	20 4d       	sub	sp,16
8001f88c:	1a 98       	mov	r8,sp
8001f88e:	2b 89       	sub	r9,-72
8001f890:	20 08       	sub	r8,0
8001f892:	20 09       	sub	r9,0
8001f894:	72 0b       	ld.w	r11,r9[0x0]
8001f896:	91 0b       	st.w	r8[0x0],r11
8001f898:	72 1b       	ld.w	r11,r9[0x4]
8001f89a:	91 1b       	st.w	r8[0x4],r11
8001f89c:	72 2b       	ld.w	r11,r9[0x8]
8001f89e:	91 2b       	st.w	r8[0x8],r11
8001f8a0:	72 39       	ld.w	r9,r9[0xc]
8001f8a2:	91 39       	st.w	r8[0xc],r9
8001f8a4:	14 9c       	mov	r12,r10
8001f8a6:	fe b0 f6 a3 	rcall	8001e5ec <quat_global_to_local>
8001f8aa:	2f 8d       	sub	sp,-32
8001f8ac:	ee c8 00 2c 	sub	r8,r7,44
8001f8b0:	ee c9 00 7c 	sub	r9,r7,124
8001f8b4:	20 08       	sub	r8,0
8001f8b6:	20 09       	sub	r9,0
8001f8b8:	72 0a       	ld.w	r10,r9[0x0]
8001f8ba:	91 0a       	st.w	r8[0x0],r10
8001f8bc:	72 1a       	ld.w	r10,r9[0x4]
8001f8be:	91 1a       	st.w	r8[0x4],r10
8001f8c0:	72 2a       	ld.w	r10,r9[0x8]
8001f8c2:	91 2a       	st.w	r8[0x8],r10
8001f8c4:	72 39       	ld.w	r9,r9[0xc]
8001f8c6:	91 39       	st.w	r8[0xc],r9
	for (i=0; i<3; i++) {
8001f8c8:	30 08       	mov	r8,0
8001f8ca:	ef 48 ff f4 	st.w	r7[-12],r8
8001f8ce:	c8 08       	rjmp	8001f9ce <simu_update+0x7c0>
		sim->vel_bf[i]=qvel_bf.v[i];
8001f8d0:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001f8d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f8d8:	2f f8       	sub	r8,-1
8001f8da:	a3 68       	lsl	r8,0x2
8001f8dc:	ee 08 00 08 	add	r8,r7,r8
8001f8e0:	f0 fa ff d4 	ld.w	r10,r8[-44]
8001f8e4:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f8e8:	2f 79       	sub	r9,-9
8001f8ea:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		// following the convention in the IMU, this is the acceleration due to force, as measured
		sim->attitude.a[i]=sim->lin_forces_bf[i] / sim->total_mass;
8001f8ee:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001f8f2:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001f8f6:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f8fa:	2f a9       	sub	r9,-6
8001f8fc:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001f900:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001f904:	f2 f9 01 74 	ld.w	r9,r9[372]
8001f908:	12 9b       	mov	r11,r9
8001f90a:	10 9c       	mov	r12,r8
8001f90c:	f0 16 00 08 	mcall	r6[32]
8001f910:	18 98       	mov	r8,r12
8001f912:	10 9a       	mov	r10,r8
8001f914:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f918:	ea c9 ff cd 	sub	r9,r5,-51
8001f91c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		// this is the "clean" acceleration without gravity
		sim->attitude.acc_bf[i]=sim->attitude.a[i] - sim->attitude.up_vec.v[i] * GRAVITY;
8001f920:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001f924:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001f928:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f92c:	2c d9       	sub	r9,-51
8001f92e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001f932:	10 9c       	mov	r12,r8
8001f934:	f0 16 00 02 	mcall	r6[8]
8001f938:	14 92       	mov	r2,r10
8001f93a:	16 93       	mov	r3,r11
8001f93c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001f940:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f944:	2e 99       	sub	r9,-23
8001f946:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001f94a:	10 9c       	mov	r12,r8
8001f94c:	f0 16 00 02 	mcall	r6[8]
8001f950:	e0 68 85 1f 	mov	r8,34079
8001f954:	ea 18 51 eb 	orh	r8,0x51eb
8001f958:	e0 69 9e b8 	mov	r9,40632
8001f95c:	ea 19 c0 23 	orh	r9,0xc023
8001f960:	f0 16 00 03 	mcall	r6[12]
8001f964:	14 98       	mov	r8,r10
8001f966:	16 99       	mov	r9,r11
8001f968:	04 9a       	mov	r10,r2
8001f96a:	06 9b       	mov	r11,r3
8001f96c:	f0 16 00 05 	mcall	r6[20]
8001f970:	14 98       	mov	r8,r10
8001f972:	16 99       	mov	r9,r11
8001f974:	10 9a       	mov	r10,r8
8001f976:	12 9b       	mov	r11,r9
8001f978:	f0 16 00 09 	mcall	r6[36]
8001f97c:	18 9a       	mov	r10,r12
8001f97e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f982:	ea c9 ff be 	sub	r9,r5,-66
8001f986:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		sim->vel_bf[i]=sim->vel_bf[i] + sim->attitude.acc_bf[i] * sim->dt;
8001f98a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001f98e:	ee fa ff f4 	ld.w	r10,r7[-12]
8001f992:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f996:	2f 7a       	sub	r10,-9
8001f998:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8001f99c:	ee fb ff f4 	ld.w	r11,r7[-12]
8001f9a0:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f9a4:	2b eb       	sub	r11,-66
8001f9a6:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8001f9aa:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f9ae:	f0 f8 01 90 	ld.w	r8,r8[400]
8001f9b2:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8001f9b6:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8001f9ba:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f9be:	2f 79       	sub	r9,-9
8001f9c0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	for (i=0; i<3; i++){
			qtmp1.v[i] = sim->vel[i];
	}
	qtmp1.s=0.0;
	qvel_bf=quat_global_to_local(sim->attitude.qe, qtmp1);
	for (i=0; i<3; i++) {
8001f9c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f9c8:	2f f8       	sub	r8,-1
8001f9ca:	ef 48 ff f4 	st.w	r7[-12],r8
8001f9ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f9d2:	58 28       	cp.w	r8,2
8001f9d4:	fe 9a ff 7e 	brle	8001f8d0 <simu_update+0x6c2>
		sim->vel_bf[i]=sim->vel_bf[i] + sim->attitude.acc_bf[i] * sim->dt;
	}
	
	// calculate velocity in global frame
	// vel = qe *vel_bf * qe-1
	qvel_bf.s= 0.0; qvel_bf.v[0]=sim->vel_bf[0]; qvel_bf.v[1]=sim->vel_bf[1]; qvel_bf.v[2]=sim->vel_bf[2];
8001f9d8:	30 08       	mov	r8,0
8001f9da:	ef 48 ff d4 	st.w	r7[-44],r8
8001f9de:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f9e2:	70 98       	ld.w	r8,r8[0x24]
8001f9e4:	ef 48 ff d8 	st.w	r7[-40],r8
8001f9e8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f9ec:	70 a8       	ld.w	r8,r8[0x28]
8001f9ee:	ef 48 ff dc 	st.w	r7[-36],r8
8001f9f2:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001f9f6:	70 b8       	ld.w	r8,r8[0x2c]
8001f9f8:	ef 48 ff e0 	st.w	r7[-32],r8
	qtmp1 = quat_local_to_global(sim->attitude.qe, qvel_bf);
8001f9fc:	ee ca 00 7c 	sub	r10,r7,124
8001fa00:	20 4d       	sub	sp,16
8001fa02:	1a 98       	mov	r8,sp
8001fa04:	ee c9 00 2c 	sub	r9,r7,44
8001fa08:	20 08       	sub	r8,0
8001fa0a:	20 09       	sub	r9,0
8001fa0c:	72 0b       	ld.w	r11,r9[0x0]
8001fa0e:	91 0b       	st.w	r8[0x0],r11
8001fa10:	72 1b       	ld.w	r11,r9[0x4]
8001fa12:	91 1b       	st.w	r8[0x4],r11
8001fa14:	72 2b       	ld.w	r11,r9[0x8]
8001fa16:	91 2b       	st.w	r8[0x8],r11
8001fa18:	72 39       	ld.w	r9,r9[0xc]
8001fa1a:	91 39       	st.w	r8[0xc],r9
8001fa1c:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001fa20:	20 4d       	sub	sp,16
8001fa22:	1a 98       	mov	r8,sp
8001fa24:	2b 89       	sub	r9,-72
8001fa26:	20 08       	sub	r8,0
8001fa28:	20 09       	sub	r9,0
8001fa2a:	72 0b       	ld.w	r11,r9[0x0]
8001fa2c:	91 0b       	st.w	r8[0x0],r11
8001fa2e:	72 1b       	ld.w	r11,r9[0x4]
8001fa30:	91 1b       	st.w	r8[0x4],r11
8001fa32:	72 2b       	ld.w	r11,r9[0x8]
8001fa34:	91 2b       	st.w	r8[0x8],r11
8001fa36:	72 39       	ld.w	r9,r9[0xc]
8001fa38:	91 39       	st.w	r8[0xc],r9
8001fa3a:	14 9c       	mov	r12,r10
8001fa3c:	fe b0 f6 56 	rcall	8001e6e8 <quat_local_to_global>
8001fa40:	2f 8d       	sub	sp,-32
8001fa42:	ee c8 00 1c 	sub	r8,r7,28
8001fa46:	ee c9 00 7c 	sub	r9,r7,124
8001fa4a:	20 08       	sub	r8,0
8001fa4c:	20 09       	sub	r9,0
8001fa4e:	72 0a       	ld.w	r10,r9[0x0]
8001fa50:	91 0a       	st.w	r8[0x0],r10
8001fa52:	72 1a       	ld.w	r10,r9[0x4]
8001fa54:	91 1a       	st.w	r8[0x4],r10
8001fa56:	72 2a       	ld.w	r10,r9[0x8]
8001fa58:	91 2a       	st.w	r8[0x8],r10
8001fa5a:	72 39       	ld.w	r9,r9[0xc]
8001fa5c:	91 39       	st.w	r8[0xc],r9
	sim->vel[0]=qtmp1.v[0]; sim->vel[1]=qtmp1.v[1]; sim->vel[2]=qtmp1.v[2];
8001fa5e:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001fa62:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001fa66:	91 c9       	st.w	r8[0x30],r9
8001fa68:	ee f9 ff ec 	ld.w	r9,r7[-20]
8001fa6c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001fa70:	91 d9       	st.w	r8[0x34],r9
8001fa72:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001fa76:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001fa7a:	91 e9       	st.w	r8[0x38],r9
	
	for (i=0; i<3; i++) {
8001fa7c:	30 08       	mov	r8,0
8001fa7e:	ef 48 ff f4 	st.w	r7[-12],r8
8001fa82:	c2 38       	rjmp	8001fac8 <simu_update+0x8ba>
		sim->localPosition.pos[i] =sim->localPosition.pos[i] + sim->vel[i] * sim->dt;
8001fa84:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001fa88:	ee fa ff f4 	ld.w	r10,r7[-12]
8001fa8c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001fa90:	2b ba       	sub	r10,-69
8001fa92:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8001fa96:	ee fb ff f4 	ld.w	r11,r7[-12]
8001fa9a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001fa9e:	2f 4b       	sub	r11,-12
8001faa0:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8001faa4:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001faa8:	f0 f8 01 90 	ld.w	r8,r8[400]
8001faac:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8001fab0:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8001fab4:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001fab8:	2b b9       	sub	r9,-69
8001faba:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	// vel = qe *vel_bf * qe-1
	qvel_bf.s= 0.0; qvel_bf.v[0]=sim->vel_bf[0]; qvel_bf.v[1]=sim->vel_bf[1]; qvel_bf.v[2]=sim->vel_bf[2];
	qtmp1 = quat_local_to_global(sim->attitude.qe, qvel_bf);
	sim->vel[0]=qtmp1.v[0]; sim->vel[1]=qtmp1.v[1]; sim->vel[2]=qtmp1.v[2];
	
	for (i=0; i<3; i++) {
8001fabe:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001fac2:	2f f8       	sub	r8,-1
8001fac4:	ef 48 ff f4 	st.w	r7[-12],r8
8001fac8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001facc:	58 28       	cp.w	r8,2
8001face:	fe 9a ff db 	brle	8001fa84 <simu_update+0x876>



	// fill in simulated IMU values
	
	imu->raw_channels[GYRO_OFFSET+IMU_X]=sim->rates_bf[0] * imu->raw_scale[GYRO_OFFSET+IMU_X]+imu->raw_bias[GYRO_OFFSET+IMU_X];
8001fad2:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001fad6:	70 39       	ld.w	r9,r8[0xc]
8001fad8:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fadc:	f0 f8 01 14 	ld.w	r8,r8[276]
8001fae0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001fae4:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fae8:	f0 f8 00 f0 	ld.w	r8,r8[240]
8001faec:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001faf0:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001faf4:	f1 49 00 cc 	st.w	r8[204],r9
	imu->raw_channels[GYRO_OFFSET+IMU_Y]=sim->rates_bf[1] * imu->raw_scale[GYRO_OFFSET+IMU_Y]+imu->raw_bias[GYRO_OFFSET+IMU_Y];
8001faf8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001fafc:	70 49       	ld.w	r9,r8[0x10]
8001fafe:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fb02:	f0 f8 01 18 	ld.w	r8,r8[280]
8001fb06:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001fb0a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fb0e:	f0 f8 00 f4 	ld.w	r8,r8[244]
8001fb12:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001fb16:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fb1a:	f1 49 00 d0 	st.w	r8[208],r9
	imu->raw_channels[GYRO_OFFSET+IMU_Z]=sim->rates_bf[2] * imu->raw_scale[GYRO_OFFSET+IMU_Z]+imu->raw_bias[GYRO_OFFSET+IMU_Z];
8001fb1e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001fb22:	70 59       	ld.w	r9,r8[0x14]
8001fb24:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fb28:	f0 f8 01 1c 	ld.w	r8,r8[284]
8001fb2c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001fb30:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fb34:	f0 f8 00 f8 	ld.w	r8,r8[248]
8001fb38:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001fb3c:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fb40:	f1 49 00 d4 	st.w	r8[212],r9

	imu->raw_channels[ACC_OFFSET+IMU_X]=(sim->lin_forces_bf[0] / sim->total_mass / GRAVITY)*imu->raw_scale[ACC_OFFSET+IMU_X]+imu->raw_bias[ACC_OFFSET+IMU_X];
8001fb44:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001fb48:	70 68       	ld.w	r8,r8[0x18]
8001fb4a:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001fb4e:	f2 f9 01 74 	ld.w	r9,r9[372]
8001fb52:	12 9b       	mov	r11,r9
8001fb54:	10 9c       	mov	r12,r8
8001fb56:	f0 16 00 08 	mcall	r6[32]
8001fb5a:	18 98       	mov	r8,r12
8001fb5c:	10 9c       	mov	r12,r8
8001fb5e:	f0 16 00 02 	mcall	r6[8]
8001fb62:	e0 68 85 1f 	mov	r8,34079
8001fb66:	ea 18 51 eb 	orh	r8,0x51eb
8001fb6a:	e0 69 9e b8 	mov	r9,40632
8001fb6e:	ea 19 40 23 	orh	r9,0x4023
8001fb72:	f0 16 00 0c 	mcall	r6[48]
8001fb76:	14 98       	mov	r8,r10
8001fb78:	16 99       	mov	r9,r11
8001fb7a:	10 92       	mov	r2,r8
8001fb7c:	12 93       	mov	r3,r9
8001fb7e:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fb82:	f0 f8 01 20 	ld.w	r8,r8[288]
8001fb86:	10 9c       	mov	r12,r8
8001fb88:	f0 16 00 02 	mcall	r6[8]
8001fb8c:	14 98       	mov	r8,r10
8001fb8e:	16 99       	mov	r9,r11
8001fb90:	04 9a       	mov	r10,r2
8001fb92:	06 9b       	mov	r11,r3
8001fb94:	f0 16 00 03 	mcall	r6[12]
8001fb98:	14 98       	mov	r8,r10
8001fb9a:	16 99       	mov	r9,r11
8001fb9c:	10 92       	mov	r2,r8
8001fb9e:	12 93       	mov	r3,r9
8001fba0:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fba4:	f0 f8 00 fc 	ld.w	r8,r8[252]
8001fba8:	10 9c       	mov	r12,r8
8001fbaa:	f0 16 00 02 	mcall	r6[8]
8001fbae:	14 98       	mov	r8,r10
8001fbb0:	16 99       	mov	r9,r11
8001fbb2:	04 9a       	mov	r10,r2
8001fbb4:	06 9b       	mov	r11,r3
8001fbb6:	f0 16 00 05 	mcall	r6[20]
8001fbba:	14 98       	mov	r8,r10
8001fbbc:	16 99       	mov	r9,r11
8001fbbe:	10 9a       	mov	r10,r8
8001fbc0:	12 9b       	mov	r11,r9
8001fbc2:	f0 16 00 09 	mcall	r6[36]
8001fbc6:	18 99       	mov	r9,r12
8001fbc8:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fbcc:	f1 49 00 d8 	st.w	r8[216],r9
	imu->raw_channels[ACC_OFFSET+IMU_Y]=(sim->lin_forces_bf[1] / sim->total_mass / GRAVITY)*imu->raw_scale[ACC_OFFSET+IMU_Y]+imu->raw_bias[ACC_OFFSET+IMU_Y];
8001fbd0:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001fbd4:	70 78       	ld.w	r8,r8[0x1c]
8001fbd6:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001fbda:	f2 f9 01 74 	ld.w	r9,r9[372]
8001fbde:	12 9b       	mov	r11,r9
8001fbe0:	10 9c       	mov	r12,r8
8001fbe2:	f0 16 00 08 	mcall	r6[32]
8001fbe6:	18 98       	mov	r8,r12
8001fbe8:	10 9c       	mov	r12,r8
8001fbea:	f0 16 00 02 	mcall	r6[8]
8001fbee:	e0 68 85 1f 	mov	r8,34079
8001fbf2:	ea 18 51 eb 	orh	r8,0x51eb
8001fbf6:	e0 69 9e b8 	mov	r9,40632
8001fbfa:	ea 19 40 23 	orh	r9,0x4023
8001fbfe:	f0 16 00 0c 	mcall	r6[48]
8001fc02:	14 98       	mov	r8,r10
8001fc04:	16 99       	mov	r9,r11
8001fc06:	10 92       	mov	r2,r8
8001fc08:	12 93       	mov	r3,r9
8001fc0a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fc0e:	f0 f8 01 24 	ld.w	r8,r8[292]
8001fc12:	10 9c       	mov	r12,r8
8001fc14:	f0 16 00 02 	mcall	r6[8]
8001fc18:	14 98       	mov	r8,r10
8001fc1a:	16 99       	mov	r9,r11
8001fc1c:	04 9a       	mov	r10,r2
8001fc1e:	06 9b       	mov	r11,r3
8001fc20:	f0 16 00 03 	mcall	r6[12]
8001fc24:	14 98       	mov	r8,r10
8001fc26:	16 99       	mov	r9,r11
8001fc28:	10 92       	mov	r2,r8
8001fc2a:	12 93       	mov	r3,r9
8001fc2c:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fc30:	f0 f8 01 00 	ld.w	r8,r8[256]
8001fc34:	10 9c       	mov	r12,r8
8001fc36:	f0 16 00 02 	mcall	r6[8]
8001fc3a:	14 98       	mov	r8,r10
8001fc3c:	16 99       	mov	r9,r11
8001fc3e:	04 9a       	mov	r10,r2
8001fc40:	06 9b       	mov	r11,r3
8001fc42:	f0 16 00 05 	mcall	r6[20]
8001fc46:	14 98       	mov	r8,r10
8001fc48:	16 99       	mov	r9,r11
8001fc4a:	10 9a       	mov	r10,r8
8001fc4c:	12 9b       	mov	r11,r9
8001fc4e:	f0 16 00 09 	mcall	r6[36]
8001fc52:	18 99       	mov	r9,r12
8001fc54:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fc58:	f1 49 00 dc 	st.w	r8[220],r9
	imu->raw_channels[ACC_OFFSET+IMU_Z]=(sim->lin_forces_bf[2] / sim->total_mass / GRAVITY)*imu->raw_scale[ACC_OFFSET+IMU_Z]+imu->raw_bias[ACC_OFFSET+IMU_Z];
8001fc5c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001fc60:	70 88       	ld.w	r8,r8[0x20]
8001fc62:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001fc66:	f2 f9 01 74 	ld.w	r9,r9[372]
8001fc6a:	12 9b       	mov	r11,r9
8001fc6c:	10 9c       	mov	r12,r8
8001fc6e:	f0 16 00 08 	mcall	r6[32]
8001fc72:	18 98       	mov	r8,r12
8001fc74:	10 9c       	mov	r12,r8
8001fc76:	f0 16 00 02 	mcall	r6[8]
8001fc7a:	e0 68 85 1f 	mov	r8,34079
8001fc7e:	ea 18 51 eb 	orh	r8,0x51eb
8001fc82:	e0 69 9e b8 	mov	r9,40632
8001fc86:	ea 19 40 23 	orh	r9,0x4023
8001fc8a:	f0 16 00 0c 	mcall	r6[48]
8001fc8e:	14 98       	mov	r8,r10
8001fc90:	16 99       	mov	r9,r11
8001fc92:	10 92       	mov	r2,r8
8001fc94:	12 93       	mov	r3,r9
8001fc96:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fc9a:	f0 f8 01 28 	ld.w	r8,r8[296]
8001fc9e:	10 9c       	mov	r12,r8
8001fca0:	f0 16 00 02 	mcall	r6[8]
8001fca4:	14 98       	mov	r8,r10
8001fca6:	16 99       	mov	r9,r11
8001fca8:	04 9a       	mov	r10,r2
8001fcaa:	06 9b       	mov	r11,r3
8001fcac:	f0 16 00 03 	mcall	r6[12]
8001fcb0:	14 98       	mov	r8,r10
8001fcb2:	16 99       	mov	r9,r11
8001fcb4:	10 92       	mov	r2,r8
8001fcb6:	12 93       	mov	r3,r9
8001fcb8:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fcbc:	f0 f8 01 04 	ld.w	r8,r8[260]
8001fcc0:	10 9c       	mov	r12,r8
8001fcc2:	f0 16 00 02 	mcall	r6[8]
8001fcc6:	14 98       	mov	r8,r10
8001fcc8:	16 99       	mov	r9,r11
8001fcca:	04 9a       	mov	r10,r2
8001fccc:	06 9b       	mov	r11,r3
8001fcce:	f0 16 00 05 	mcall	r6[20]
8001fcd2:	14 98       	mov	r8,r10
8001fcd4:	16 99       	mov	r9,r11
8001fcd6:	10 9a       	mov	r10,r8
8001fcd8:	12 9b       	mov	r11,r9
8001fcda:	f0 16 00 09 	mcall	r6[36]
8001fcde:	18 99       	mov	r9,r12
8001fce0:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fce4:	f1 49 00 e0 	st.w	r8[224],r9
	// cheating... provide true upvector instead of simulated forces
	//imu->raw_channels[ACC_OFFSET+IMU_X]=sim->attitude.up_vec.v[0] *imu->raw_scale[ACC_OFFSET+IMU_X]+imu->raw_bias[ACC_OFFSET+IMU_X];
	//imu->raw_channels[ACC_OFFSET+IMU_Y]=sim->attitude.up_vec.v[1] *imu->raw_scale[ACC_OFFSET+IMU_Y]+imu->raw_bias[ACC_OFFSET+IMU_Y];
	//imu->raw_channels[ACC_OFFSET+IMU_Z]=sim->attitude.up_vec.v[2] *imu->raw_scale[ACC_OFFSET+IMU_Z]+imu->raw_bias[ACC_OFFSET+IMU_Z];
	
	imu->raw_channels[COMPASS_OFFSET+IMU_X]=(sim->attitude.north_vec.v[0] )*imu->raw_scale[COMPASS_OFFSET+IMU_X]+imu->raw_bias[COMPASS_OFFSET+IMU_X];
8001fce8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001fcec:	71 b9       	ld.w	r9,r8[0x6c]
8001fcee:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fcf2:	f0 f8 01 2c 	ld.w	r8,r8[300]
8001fcf6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001fcfa:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fcfe:	f0 f8 01 08 	ld.w	r8,r8[264]
8001fd02:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001fd06:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fd0a:	f1 49 00 e4 	st.w	r8[228],r9
	imu->raw_channels[COMPASS_OFFSET+IMU_Y]=(sim->attitude.north_vec.v[1] )*imu->raw_scale[COMPASS_OFFSET+IMU_Y]+imu->raw_bias[COMPASS_OFFSET+IMU_Y];
8001fd0e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001fd12:	71 c9       	ld.w	r9,r8[0x70]
8001fd14:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fd18:	f0 f8 01 30 	ld.w	r8,r8[304]
8001fd1c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001fd20:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fd24:	f0 f8 01 0c 	ld.w	r8,r8[268]
8001fd28:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001fd2c:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fd30:	f1 49 00 e8 	st.w	r8[232],r9
	imu->raw_channels[COMPASS_OFFSET+IMU_Z]=(sim->attitude.north_vec.v[2] )*imu->raw_scale[COMPASS_OFFSET+IMU_Z]+imu->raw_bias[COMPASS_OFFSET+IMU_Z];
8001fd34:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001fd38:	71 d9       	ld.w	r9,r8[0x74]
8001fd3a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fd3e:	f0 f8 01 34 	ld.w	r8,r8[308]
8001fd42:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001fd46:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fd4a:	f0 f8 01 10 	ld.w	r8,r8[272]
8001fd4e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001fd52:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001fd56:	f1 49 00 ec 	st.w	r8[236],r9
	
	
	//imu->dt=sim->dt;

	sim->localPosition.heading=get_yaw(sim->attitude.qe);
8001fd5a:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001fd5e:	20 4d       	sub	sp,16
8001fd60:	1a 98       	mov	r8,sp
8001fd62:	2b 89       	sub	r9,-72
8001fd64:	20 08       	sub	r8,0
8001fd66:	20 09       	sub	r9,0
8001fd68:	72 0a       	ld.w	r10,r9[0x0]
8001fd6a:	91 0a       	st.w	r8[0x0],r10
8001fd6c:	72 1a       	ld.w	r10,r9[0x4]
8001fd6e:	91 1a       	st.w	r8[0x4],r10
8001fd70:	72 2a       	ld.w	r10,r9[0x8]
8001fd72:	91 2a       	st.w	r8[0x8],r10
8001fd74:	72 39       	ld.w	r9,r9[0xc]
8001fd76:	91 39       	st.w	r8[0xc],r9
8001fd78:	f0 16 01 1a 	mcall	r6[1128]
8001fd7c:	2f cd       	sub	sp,-16
8001fd7e:	18 99       	mov	r9,r12
8001fd80:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001fd84:	f1 49 01 20 	st.w	r8[288],r9
	//pos_est->localPosition=sim->localPosition;
}
8001fd88:	2e 1d       	sub	sp,-124
8001fd8a:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001fd8e:	00 00       	add	r0,r0
8001fd90:	80 01       	ld.sh	r1,r0[0x0]
8001fd92:	f0 9e eb cd 	brqs	7fe5d52c <_estack+0x7fe4d52c>

8001fd94 <simulate_barometer>:

void simulate_barometer(simulation_model_t *sim, pressure_data *pressure) {
8001fd94:	eb cd 40 c0 	pushm	r6-r7,lr
8001fd98:	1a 97       	mov	r7,sp
8001fd9a:	20 2d       	sub	sp,8
8001fd9c:	49 36       	lddpc	r6,8001fde8 <simulate_barometer+0x54>
8001fd9e:	1e 26       	rsub	r6,pc
8001fda0:	ef 4c ff fc 	st.w	r7[-4],r12
8001fda4:	ef 4b ff f8 	st.w	r7[-8],r11

		pressure->altitude=sim->localPosition.origin.altitude - sim->localPosition.pos[Z];
8001fda8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001fdac:	f0 f9 01 34 	ld.w	r9,r8[308]
8001fdb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001fdb4:	f0 f8 01 1c 	ld.w	r8,r8[284]
8001fdb8:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001fdbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001fdc0:	91 79       	st.w	r8[0x1c],r9
		pressure->vario_vz=sim->vel[Z];
8001fdc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001fdc6:	70 e9       	ld.w	r9,r8[0x38]
8001fdc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001fdcc:	91 99       	st.w	r8[0x24],r9
		pressure->last_update=get_millis();
8001fdce:	f0 16 00 0f 	mcall	r6[60]
8001fdd2:	18 99       	mov	r9,r12
8001fdd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001fdd8:	91 a9       	st.w	r8[0x28],r9
		pressure->altitude_offset=0;
8001fdda:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001fdde:	30 09       	mov	r9,0
8001fde0:	91 89       	st.w	r8[0x20],r9
		
	}
8001fde2:	2f ed       	sub	sp,-8
8001fde4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fde8:	80 01       	ld.sh	r1,r0[0x0]
8001fdea:	fc 22 eb cd 	sub	r2,-201779

8001fdec <simulate_gps>:
	
void simulate_gps(simulation_model_t *sim, gps_Data_type *gps) {
8001fdec:	eb cd 40 c0 	pushm	r6-r7,lr
8001fdf0:	1a 97       	mov	r7,sp
8001fdf2:	20 9d       	sub	sp,36
8001fdf4:	4a b6       	lddpc	r6,8001fea0 <simulate_gps+0xb4>
8001fdf6:	1e 26       	rsub	r6,pc
8001fdf8:	ef 4c ff e0 	st.w	r7[-32],r12
8001fdfc:	ef 4b ff dc 	st.w	r7[-36],r11
		global_position_t gpos=local_to_global_position(sim->localPosition);
8001fe00:	ee cc 00 1c 	sub	r12,r7,28
8001fe04:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001fe08:	20 cd       	sub	sp,48
8001fe0a:	1a 99       	mov	r9,sp
8001fe0c:	12 9b       	mov	r11,r9
8001fe0e:	f0 ca fe ec 	sub	r10,r8,-276
8001fe12:	f6 c8 00 00 	sub	r8,r11,0
8001fe16:	f4 c9 00 00 	sub	r9,r10,0
8001fe1a:	72 0e       	ld.w	lr,r9[0x0]
8001fe1c:	91 0e       	st.w	r8[0x0],lr
8001fe1e:	72 1e       	ld.w	lr,r9[0x4]
8001fe20:	91 1e       	st.w	r8[0x4],lr
8001fe22:	72 2e       	ld.w	lr,r9[0x8]
8001fe24:	91 2e       	st.w	r8[0x8],lr
8001fe26:	72 39       	ld.w	r9,r9[0xc]
8001fe28:	91 39       	st.w	r8[0xc],r9
8001fe2a:	f6 c8 ff f0 	sub	r8,r11,-16
8001fe2e:	f4 c9 ff f0 	sub	r9,r10,-16
8001fe32:	72 0e       	ld.w	lr,r9[0x0]
8001fe34:	91 0e       	st.w	r8[0x0],lr
8001fe36:	72 1e       	ld.w	lr,r9[0x4]
8001fe38:	91 1e       	st.w	r8[0x4],lr
8001fe3a:	72 2e       	ld.w	lr,r9[0x8]
8001fe3c:	91 2e       	st.w	r8[0x8],lr
8001fe3e:	72 39       	ld.w	r9,r9[0xc]
8001fe40:	91 39       	st.w	r8[0xc],r9
8001fe42:	f6 c8 ff e0 	sub	r8,r11,-32
8001fe46:	f4 c9 ff e0 	sub	r9,r10,-32
8001fe4a:	72 0a       	ld.w	r10,r9[0x0]
8001fe4c:	91 0a       	st.w	r8[0x0],r10
8001fe4e:	72 1a       	ld.w	r10,r9[0x4]
8001fe50:	91 1a       	st.w	r8[0x4],r10
8001fe52:	72 2a       	ld.w	r10,r9[0x8]
8001fe54:	91 2a       	st.w	r8[0x8],r10
8001fe56:	72 39       	ld.w	r9,r9[0xc]
8001fe58:	91 39       	st.w	r8[0xc],r9
8001fe5a:	f0 16 00 8e 	mcall	r6[568]
8001fe5e:	2f 4d       	sub	sp,-48
	
		gps->altitude=gpos.altitude;
8001fe60:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001fe64:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001fe68:	91 49       	st.w	r8[0x10],r9
		gps->latitude=gpos.latitude;
8001fe6a:	ee e8 ff ec 	ld.d	r8,r7[-20]
8001fe6e:	ee fa ff dc 	ld.w	r10,r7[-36]
8001fe72:	f4 e9 00 00 	st.d	r10[0],r8
		gps->longitude=gpos.longitude;
8001fe76:	ee e8 ff e4 	ld.d	r8,r7[-28]
8001fe7a:	ee fa ff dc 	ld.w	r10,r7[-36]
8001fe7e:	f4 e9 00 08 	st.d	r10[8],r8
		gps->timeLastMsg=get_millis();
8001fe82:	f0 16 00 0f 	mcall	r6[60]
8001fe86:	18 99       	mov	r9,r12
8001fe88:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001fe8c:	f1 49 00 44 	st.w	r8[68],r9
		gps->status=GPS_OK;
8001fe90:	ee f9 ff dc 	ld.w	r9,r7[-36]
8001fe94:	30 28       	mov	r8,2
8001fe96:	f3 68 00 4c 	st.b	r9[76],r8
	

}
8001fe9a:	2f 7d       	sub	sp,-36
8001fe9c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fea0:	80 01       	ld.sh	r1,r0[0x0]
8001fea2:	fc 7a eb cd 	mov	r10,-136243

8001fea4 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
8001fea4:	eb cd 40 80 	pushm	r7,lr
8001fea8:	1a 97       	mov	r7,sp
8001feaa:	20 3d       	sub	sp,12
8001feac:	18 98       	mov	r8,r12
8001feae:	ef 4b ff f4 	st.w	r7[-12],r11
8001feb2:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
8001feb6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001feba:	90 08       	ld.sh	r8,r8[0x0]
8001febc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001fec0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001fec4:	f3 e8 20 08 	eor	r8,r9,r8
8001fec8:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
8001fecc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001fed0:	a5 68       	lsl	r8,0x4
8001fed2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001fed6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001feda:	f3 e8 20 08 	eor	r8,r9,r8
8001fede:	5c 58       	castu.b	r8
8001fee0:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
8001fee4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001fee8:	90 08       	ld.sh	r8,r8[0x0]
8001feea:	5c 78       	castu.h	r8
8001feec:	a9 88       	lsr	r8,0x8
8001feee:	5c 88       	casts.h	r8
8001fef0:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001fef4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001fef8:	a9 68       	lsl	r8,0x8
8001fefa:	5c 88       	casts.h	r8
8001fefc:	f3 e8 20 08 	eor	r8,r9,r8
8001ff00:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001ff04:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ff08:	a3 78       	lsl	r8,0x3
8001ff0a:	5c 88       	casts.h	r8
8001ff0c:	f3 e8 20 08 	eor	r8,r9,r8
8001ff10:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001ff14:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ff18:	a5 88       	lsr	r8,0x4
8001ff1a:	5c 58       	castu.b	r8
8001ff1c:	f3 e8 20 08 	eor	r8,r9,r8
8001ff20:	5c 88       	casts.h	r8
8001ff22:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ff26:	b2 08       	st.h	r9[0x0],r8
}
8001ff28:	2f dd       	sub	sp,-12
8001ff2a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001ff2e <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
8001ff2e:	eb cd 40 80 	pushm	r7,lr
8001ff32:	1a 97       	mov	r7,sp
8001ff34:	20 1d       	sub	sp,4
8001ff36:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
8001ff3a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ff3e:	3f f8       	mov	r8,-1
8001ff40:	b2 08       	st.h	r9[0x0],r8
}
8001ff42:	2f fd       	sub	sp,-4
8001ff44:	e3 cd 80 80 	ldm	sp++,r7,pc

8001ff48 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
8001ff48:	eb cd 40 c0 	pushm	r6-r7,lr
8001ff4c:	1a 97       	mov	r7,sp
8001ff4e:	20 3d       	sub	sp,12
8001ff50:	49 76       	lddpc	r6,8001ffac <crc_calculate+0x64>
8001ff52:	1e 26       	rsub	r6,pc
8001ff54:	ef 4c ff f8 	st.w	r7[-8],r12
8001ff58:	16 98       	mov	r8,r11
8001ff5a:	ef 58 ff f4 	st.h	r7[-12],r8
        uint16_t crcTmp;
        crc_init(&crcTmp);
8001ff5e:	ee c8 00 02 	sub	r8,r7,2
8001ff62:	10 9c       	mov	r12,r8
8001ff64:	ce 5f       	rcall	8001ff2e <crc_init>
	while (length--) {
8001ff66:	c0 e8       	rjmp	8001ff82 <crc_calculate+0x3a>
                crc_accumulate(*pBuffer++, &crcTmp);
8001ff68:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ff6c:	11 88       	ld.ub	r8,r8[0x0]
8001ff6e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ff72:	2f f9       	sub	r9,-1
8001ff74:	ef 49 ff f8 	st.w	r7[-8],r9
8001ff78:	ee c9 00 02 	sub	r9,r7,2
8001ff7c:	12 9b       	mov	r11,r9
8001ff7e:	10 9c       	mov	r12,r8
8001ff80:	c9 2f       	rcall	8001fea4 <crc_accumulate>
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
8001ff82:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8001ff86:	30 08       	mov	r8,0
8001ff88:	f0 09 19 00 	cp.h	r9,r8
8001ff8c:	5f 18       	srne	r8
8001ff8e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001ff92:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8001ff96:	20 18       	sub	r8,1
8001ff98:	ef 58 ff f4 	st.h	r7[-12],r8
8001ff9c:	58 09       	cp.w	r9,0
8001ff9e:	ce 51       	brne	8001ff68 <crc_calculate+0x20>
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
8001ffa0:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8001ffa4:	10 9c       	mov	r12,r8
8001ffa6:	2f dd       	sub	sp,-12
8001ffa8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ffac:	80 01       	ld.sh	r1,r0[0x0]
8001ffae:	fd d6       	*unknown*

8001ffb0 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
8001ffb0:	eb cd 40 c0 	pushm	r6-r7,lr
8001ffb4:	1a 97       	mov	r7,sp
8001ffb6:	20 4d       	sub	sp,16
8001ffb8:	49 66       	lddpc	r6,80020010 <crc_accumulate_buffer+0x60>
8001ffba:	1e 26       	rsub	r6,pc
8001ffbc:	ef 4c ff f8 	st.w	r7[-8],r12
8001ffc0:	ef 4b ff f4 	st.w	r7[-12],r11
8001ffc4:	14 98       	mov	r8,r10
8001ffc6:	ef 68 ff f0 	st.b	r7[-16],r8
	const uint8_t *p = (const uint8_t *)pBuffer;
8001ffca:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ffce:	ef 48 ff fc 	st.w	r7[-4],r8
	while (length--) {
8001ffd2:	c0 d8       	rjmp	8001ffec <crc_accumulate_buffer+0x3c>
                crc_accumulate(*p++, crcAccum);
8001ffd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ffd8:	11 88       	ld.ub	r8,r8[0x0]
8001ffda:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ffde:	2f f9       	sub	r9,-1
8001ffe0:	ef 49 ff fc 	st.w	r7[-4],r9
8001ffe4:	ee fb ff f8 	ld.w	r11,r7[-8]
8001ffe8:	10 9c       	mov	r12,r8
8001ffea:	c5 df       	rcall	8001fea4 <crc_accumulate>
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
8001ffec:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8001fff0:	30 08       	mov	r8,0
8001fff2:	f0 09 18 00 	cp.b	r9,r8
8001fff6:	5f 18       	srne	r8
8001fff8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001fffc:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80020000:	20 18       	sub	r8,1
80020002:	ef 68 ff f0 	st.b	r7[-16],r8
80020006:	58 09       	cp.w	r9,0
80020008:	ce 61       	brne	8001ffd4 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
        }
}
8002000a:	2f cd       	sub	sp,-16
8002000c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020010:	80 01       	ld.sh	r1,r0[0x0]
80020012:	fe 3e eb cd 	sub	lr,-5171

80020014 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
80020014:	eb cd 40 c0 	pushm	r6-r7,lr
80020018:	1a 97       	mov	r7,sp
8002001a:	20 1d       	sub	sp,4
8002001c:	48 96       	lddpc	r6,80020040 <mavlink_get_channel_status+0x2c>
8002001e:	1e 26       	rsub	r6,pc
80020020:	18 98       	mov	r8,r12
80020022:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
80020026:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002002a:	f0 09 15 04 	lsl	r9,r8,0x4
8002002e:	ec f8 08 d0 	ld.w	r8,r6[2256]
80020032:	f2 08 00 08 	add	r8,r9,r8
}
80020036:	10 9c       	mov	r12,r8
80020038:	2f fd       	sub	sp,-4
8002003a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002003e:	00 00       	add	r0,r0
80020040:	80 01       	ld.sh	r1,r0[0x0]
80020042:	fe a2       	*unknown*

80020044 <_mav_finalize_message_chan_send>:
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, 
						    uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, uint8_t length)
#endif
{
80020044:	eb cd 40 c0 	pushm	r6-r7,lr
80020048:	1a 97       	mov	r7,sp
8002004a:	20 9d       	sub	sp,36
8002004c:	4b d6       	lddpc	r6,80020140 <_mav_finalize_message_chan_send+0xfc>
8002004e:	1e 26       	rsub	r6,pc
80020050:	ef 4c ff ec 	st.w	r7[-20],r12
80020054:	ef 4a ff e4 	st.w	r7[-28],r10
80020058:	16 9a       	mov	r10,r11
8002005a:	ef 6a ff e8 	st.b	r7[-24],r10
8002005e:	ef 69 ff e0 	st.b	r7[-32],r9
80020062:	ef 68 ff dc 	st.b	r7[-36],r8
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
80020066:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002006a:	5c 58       	castu.b	r8
8002006c:	10 9c       	mov	r12,r8
8002006e:	cd 3f       	rcall	80020014 <mavlink_get_channel_status>
80020070:	18 98       	mov	r8,r12
80020072:	ef 48 ff fc 	st.w	r7[-4],r8
	buf[0] = MAVLINK_STX;
80020076:	3f e8       	mov	r8,-2
80020078:	ef 68 ff f4 	st.b	r7[-12],r8
	buf[1] = length;
8002007c:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80020080:	ef 68 ff f5 	st.b	r7[-11],r8
	buf[2] = status->current_tx_seq;
80020084:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020088:	f1 38 00 0a 	ld.ub	r8,r8[10]
8002008c:	ef 68 ff f6 	st.b	r7[-10],r8
	buf[3] = mavlink_system.sysid;
80020090:	ec f8 00 74 	ld.w	r8,r6[116]
80020094:	11 88       	ld.ub	r8,r8[0x0]
80020096:	ef 68 ff f7 	st.b	r7[-9],r8
	buf[4] = mavlink_system.compid;
8002009a:	ec f8 00 74 	ld.w	r8,r6[116]
8002009e:	11 98       	ld.ub	r8,r8[0x1]
800200a0:	ef 68 ff f8 	st.b	r7[-8],r8
	buf[5] = msgid;
800200a4:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800200a8:	ef 68 ff f9 	st.b	r7[-7],r8
	status->current_tx_seq++;
800200ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800200b0:	f1 38 00 0a 	ld.ub	r8,r8[10]
800200b4:	2f f8       	sub	r8,-1
800200b6:	5c 58       	castu.b	r8
800200b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800200bc:	f3 68 00 0a 	st.b	r9[10],r8
	checksum = crc_calculate((uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
800200c0:	ee c8 00 0c 	sub	r8,r7,12
800200c4:	2f f8       	sub	r8,-1
800200c6:	30 5b       	mov	r11,5
800200c8:	10 9c       	mov	r12,r8
800200ca:	c3 ff       	rcall	8001ff48 <crc_calculate>
800200cc:	18 98       	mov	r8,r12
800200ce:	5c 88       	casts.h	r8
800200d0:	ef 58 ff fa 	st.h	r7[-6],r8
	crc_accumulate_buffer(&checksum, packet, length);
800200d4:	ef 39 ff e0 	ld.ub	r9,r7[-32]
800200d8:	ee c8 00 06 	sub	r8,r7,6
800200dc:	12 9a       	mov	r10,r9
800200de:	ee fb ff e4 	ld.w	r11,r7[-28]
800200e2:	10 9c       	mov	r12,r8
800200e4:	c6 6f       	rcall	8001ffb0 <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
800200e6:	ef 38 ff dc 	ld.ub	r8,r7[-36]
800200ea:	ee c9 00 06 	sub	r9,r7,6
800200ee:	12 9b       	mov	r11,r9
800200f0:	10 9c       	mov	r12,r8
800200f2:	cd 9e       	rcall	8001fea4 <crc_accumulate>
#endif
	ck[0] = (uint8_t)(checksum & 0xFF);
800200f4:	ef 08 ff fa 	ld.sh	r8,r7[-6]
800200f8:	5c 58       	castu.b	r8
800200fa:	ef 68 ff f0 	st.b	r7[-16],r8
	ck[1] = (uint8_t)(checksum >> 8);
800200fe:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80020102:	5c 78       	castu.h	r8
80020104:	a9 88       	lsr	r8,0x8
80020106:	5c 88       	casts.h	r8
80020108:	5c 58       	castu.b	r8
8002010a:	ef 68 ff f1 	st.b	r7[-15],r8

	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
8002010e:	ee c8 00 0c 	sub	r8,r7,12
80020112:	30 6a       	mov	r10,6
80020114:	10 9b       	mov	r11,r8
80020116:	ee fc ff ec 	ld.w	r12,r7[-20]
8002011a:	c1 5c       	rcall	80020144 <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
8002011c:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80020120:	10 9a       	mov	r10,r8
80020122:	ee fb ff e4 	ld.w	r11,r7[-28]
80020126:	ee fc ff ec 	ld.w	r12,r7[-20]
8002012a:	c0 dc       	rcall	80020144 <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
8002012c:	ee c8 00 10 	sub	r8,r7,16
80020130:	30 2a       	mov	r10,2
80020132:	10 9b       	mov	r11,r8
80020134:	ee fc ff ec 	ld.w	r12,r7[-20]
80020138:	c0 6c       	rcall	80020144 <_mavlink_send_uart>
	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
}
8002013a:	2f 7d       	sub	sp,-36
8002013c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020140:	80 01       	ld.sh	r1,r0[0x0]
80020142:	fe d2 eb cd 	satsub.w	r2,pc,-5171

80020144 <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
80020144:	eb cd 40 c0 	pushm	r6-r7,lr
80020148:	1a 97       	mov	r7,sp
8002014a:	20 4d       	sub	sp,16
8002014c:	49 46       	lddpc	r6,8002019c <_mavlink_send_uart+0x58>
8002014e:	1e 26       	rsub	r6,pc
80020150:	ef 4c ff f8 	st.w	r7[-8],r12
80020154:	ef 4b ff f4 	st.w	r7[-12],r11
80020158:	14 98       	mov	r8,r10
8002015a:	ef 58 ff f0 	st.h	r7[-16],r8
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8002015e:	30 08       	mov	r8,0
80020160:	ef 58 ff fe 	st.h	r7[-2],r8
80020164:	c1 28       	rjmp	80020188 <_mavlink_send_uart+0x44>
		comm_send_ch(chan, (uint8_t)buf[i]);
80020166:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8002016a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002016e:	f2 08 00 08 	add	r8,r9,r8
80020172:	11 88       	ld.ub	r8,r8[0x0]
80020174:	10 9b       	mov	r11,r8
80020176:	ee fc ff f8 	ld.w	r12,r7[-8]
8002017a:	f0 16 00 dd 	mcall	r6[884]
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8002017e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80020182:	2f f8       	sub	r8,-1
80020184:	ef 58 ff fe 	st.h	r7[-2],r8
80020188:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8002018c:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80020190:	f0 09 19 00 	cp.h	r9,r8
80020194:	ce 93       	brcs	80020166 <_mavlink_send_uart+0x22>
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
80020196:	2f cd       	sub	sp,-16
80020198:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002019c:	80 01       	ld.sh	r1,r0[0x0]
8002019e:	ff d2       	*unknown*

800201a0 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
800201a0:	eb cd 40 80 	pushm	r7,lr
800201a4:	1a 97       	mov	r7,sp
800201a6:	20 2d       	sub	sp,8
800201a8:	ef 4c ff fc 	st.w	r7[-4],r12
800201ac:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
800201b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800201b4:	2f f8       	sub	r8,-1
800201b6:	11 88       	ld.ub	r8,r8[0x0]
800201b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800201bc:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
800201be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800201c2:	f0 c9 ff ff 	sub	r9,r8,-1
800201c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800201ca:	11 88       	ld.ub	r8,r8[0x0]
800201cc:	b2 88       	st.b	r9[0x0],r8
}
800201ce:	2f ed       	sub	sp,-8
800201d0:	e3 cd 80 80 	ldm	sp++,r7,pc

800201d4 <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
800201d4:	eb cd 40 80 	pushm	r7,lr
800201d8:	1a 97       	mov	r7,sp
800201da:	20 2d       	sub	sp,8
800201dc:	ef 4c ff fc 	st.w	r7[-4],r12
800201e0:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
800201e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800201e8:	2f d8       	sub	r8,-3
800201ea:	11 88       	ld.ub	r8,r8[0x0]
800201ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
800201f0:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
800201f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800201f6:	f0 c9 ff ff 	sub	r9,r8,-1
800201fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800201fe:	2f e8       	sub	r8,-2
80020200:	11 88       	ld.ub	r8,r8[0x0]
80020202:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
80020204:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020208:	f0 c9 ff fe 	sub	r9,r8,-2
8002020c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020210:	2f f8       	sub	r8,-1
80020212:	11 88       	ld.ub	r8,r8[0x0]
80020214:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
80020216:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002021a:	f0 c9 ff fd 	sub	r9,r8,-3
8002021e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020222:	11 88       	ld.ub	r8,r8[0x0]
80020224:	b2 88       	st.b	r9[0x0],r8
}
80020226:	2f ed       	sub	sp,-8
80020228:	e3 cd 80 80 	ldm	sp++,r7,pc

8002022c <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8002022c:	eb cd 40 c0 	pushm	r6-r7,lr
80020230:	1a 97       	mov	r7,sp
80020232:	20 3d       	sub	sp,12
80020234:	49 06       	lddpc	r6,80020274 <mav_array_memcpy+0x48>
80020236:	1e 26       	rsub	r6,pc
80020238:	ef 4c ff fc 	st.w	r7[-4],r12
8002023c:	ef 4b ff f8 	st.w	r7[-8],r11
80020240:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80020244:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020248:	58 08       	cp.w	r8,0
8002024a:	c0 91       	brne	8002025c <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8002024c:	ee fa ff f4 	ld.w	r10,r7[-12]
80020250:	30 0b       	mov	r11,0
80020252:	ee fc ff fc 	ld.w	r12,r7[-4]
80020256:	f0 16 00 31 	mcall	r6[196]
8002025a:	c0 98       	rjmp	8002026c <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8002025c:	ee fa ff f4 	ld.w	r10,r7[-12]
80020260:	ee fb ff f8 	ld.w	r11,r7[-8]
80020264:	ee fc ff fc 	ld.w	r12,r7[-4]
80020268:	f0 16 00 1b 	mcall	r6[108]
	}
}
8002026c:	2f dd       	sub	sp,-12
8002026e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020272:	00 00       	add	r0,r0
80020274:	80 02       	ld.sh	r2,r0[0x0]
80020276:	00 ba       	st.h	r0++,r10

80020278 <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
80020278:	eb cd 40 c0 	pushm	r6-r7,lr
8002027c:	1a 97       	mov	r7,sp
8002027e:	20 3d       	sub	sp,12
80020280:	48 d6       	lddpc	r6,800202b4 <_MAV_RETURN_uint16_t+0x3c>
80020282:	1e 26       	rsub	r6,pc
80020284:	ef 4c ff f8 	st.w	r7[-8],r12
80020288:	16 98       	mov	r8,r11
8002028a:	ef 68 ff f4 	st.b	r7[-12],r8
8002028e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020292:	2f 88       	sub	r8,-8
80020294:	10 99       	mov	r9,r8
80020296:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002029a:	10 09       	add	r9,r8
8002029c:	ee c8 00 02 	sub	r8,r7,2
800202a0:	12 9b       	mov	r11,r9
800202a2:	10 9c       	mov	r12,r8
800202a4:	c7 ef       	rcall	800201a0 <byte_swap_2>
800202a6:	ef 08 ff fe 	ld.sh	r8,r7[-2]
800202aa:	10 9c       	mov	r12,r8
800202ac:	2f dd       	sub	sp,-12
800202ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800202b2:	00 00       	add	r0,r0
800202b4:	80 02       	ld.sh	r2,r0[0x0]
800202b6:	01 06       	ld.w	r6,r0++

800202b8 <_MAV_RETURN_uint32_t>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
800202b8:	eb cd 40 c0 	pushm	r6-r7,lr
800202bc:	1a 97       	mov	r7,sp
800202be:	20 3d       	sub	sp,12
800202c0:	48 d6       	lddpc	r6,800202f4 <_MAV_RETURN_uint32_t+0x3c>
800202c2:	1e 26       	rsub	r6,pc
800202c4:	ef 4c ff f8 	st.w	r7[-8],r12
800202c8:	16 98       	mov	r8,r11
800202ca:	ef 68 ff f4 	st.b	r7[-12],r8
800202ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800202d2:	2f 88       	sub	r8,-8
800202d4:	10 99       	mov	r9,r8
800202d6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800202da:	10 09       	add	r9,r8
800202dc:	ee c8 00 04 	sub	r8,r7,4
800202e0:	12 9b       	mov	r11,r9
800202e2:	10 9c       	mov	r12,r8
800202e4:	c7 8f       	rcall	800201d4 <byte_swap_4>
800202e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800202ea:	10 9c       	mov	r12,r8
800202ec:	2f dd       	sub	sp,-12
800202ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800202f2:	00 00       	add	r0,r0
800202f4:	80 02       	ld.sh	r2,r0[0x0]
800202f6:	01 46       	ld.w	r6,--r0

800202f8 <_MAV_RETURN_float>:
_MAV_MSG_RETURN_TYPE(int32_t,  4)
_MAV_MSG_RETURN_TYPE(uint64_t, 8)
_MAV_MSG_RETURN_TYPE(int64_t,  8)
_MAV_MSG_RETURN_TYPE(float,    4)
800202f8:	eb cd 40 c0 	pushm	r6-r7,lr
800202fc:	1a 97       	mov	r7,sp
800202fe:	20 3d       	sub	sp,12
80020300:	48 d6       	lddpc	r6,80020334 <_MAV_RETURN_float+0x3c>
80020302:	1e 26       	rsub	r6,pc
80020304:	ef 4c ff f8 	st.w	r7[-8],r12
80020308:	16 98       	mov	r8,r11
8002030a:	ef 68 ff f4 	st.b	r7[-12],r8
8002030e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020312:	2f 88       	sub	r8,-8
80020314:	10 99       	mov	r9,r8
80020316:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002031a:	10 09       	add	r9,r8
8002031c:	ee c8 00 04 	sub	r8,r7,4
80020320:	12 9b       	mov	r11,r9
80020322:	10 9c       	mov	r12,r8
80020324:	c5 8f       	rcall	800201d4 <byte_swap_4>
80020326:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002032a:	10 9c       	mov	r12,r8
8002032c:	2f dd       	sub	sp,-12
8002032e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020332:	00 00       	add	r0,r0
80020334:	80 02       	ld.sh	r2,r0[0x0]
80020336:	01 86       	ld.ub	r6,r0[0x0]

80020338 <mavlink_msg_set_mode_get_target_system>:
 * @brief Get field target_system from set_mode message
 *
 * @return The system setting the mode
 */
static inline uint8_t mavlink_msg_set_mode_get_target_system(const mavlink_message_t* msg)
{
80020338:	eb cd 40 80 	pushm	r7,lr
8002033c:	1a 97       	mov	r7,sp
8002033e:	20 1d       	sub	sp,4
80020340:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  4);
80020344:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020348:	2f 88       	sub	r8,-8
8002034a:	2f c8       	sub	r8,-4
8002034c:	11 88       	ld.ub	r8,r8[0x0]
}
8002034e:	10 9c       	mov	r12,r8
80020350:	2f fd       	sub	sp,-4
80020352:	e3 cd 80 80 	ldm	sp++,r7,pc

80020356 <mavlink_msg_set_mode_get_base_mode>:
 * @brief Get field base_mode from set_mode message
 *
 * @return The new base mode
 */
static inline uint8_t mavlink_msg_set_mode_get_base_mode(const mavlink_message_t* msg)
{
80020356:	eb cd 40 80 	pushm	r7,lr
8002035a:	1a 97       	mov	r7,sp
8002035c:	20 1d       	sub	sp,4
8002035e:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  5);
80020362:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020366:	2f 88       	sub	r8,-8
80020368:	2f b8       	sub	r8,-5
8002036a:	11 88       	ld.ub	r8,r8[0x0]
}
8002036c:	10 9c       	mov	r12,r8
8002036e:	2f fd       	sub	sp,-4
80020370:	e3 cd 80 80 	ldm	sp++,r7,pc

80020374 <mavlink_msg_set_mode_get_custom_mode>:
 * @brief Get field custom_mode from set_mode message
 *
 * @return The new autopilot-specific mode. This field can be ignored by an autopilot.
 */
static inline uint32_t mavlink_msg_set_mode_get_custom_mode(const mavlink_message_t* msg)
{
80020374:	eb cd 40 c0 	pushm	r6-r7,lr
80020378:	1a 97       	mov	r7,sp
8002037a:	20 1d       	sub	sp,4
8002037c:	48 76       	lddpc	r6,80020398 <mavlink_msg_set_mode_get_custom_mode+0x24>
8002037e:	1e 26       	rsub	r6,pc
80020380:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint32_t(msg,  0);
80020384:	30 0b       	mov	r11,0
80020386:	ee fc ff fc 	ld.w	r12,r7[-4]
8002038a:	c9 7f       	rcall	800202b8 <_MAV_RETURN_uint32_t>
8002038c:	18 98       	mov	r8,r12
}
8002038e:	10 9c       	mov	r12,r8
80020390:	2f fd       	sub	sp,-4
80020392:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020396:	00 00       	add	r0,r0
80020398:	80 02       	ld.sh	r2,r0[0x0]
8002039a:	02 02       	add	r2,r1

8002039c <mavlink_msg_set_mode_decode>:
 *
 * @param msg The message to decode
 * @param set_mode C-struct to decode the message contents into
 */
static inline void mavlink_msg_set_mode_decode(const mavlink_message_t* msg, mavlink_set_mode_t* set_mode)
{
8002039c:	eb cd 40 c0 	pushm	r6-r7,lr
800203a0:	1a 97       	mov	r7,sp
800203a2:	20 2d       	sub	sp,8
800203a4:	48 f6       	lddpc	r6,800203e0 <mavlink_msg_set_mode_decode+0x44>
800203a6:	1e 26       	rsub	r6,pc
800203a8:	ef 4c ff fc 	st.w	r7[-4],r12
800203ac:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	set_mode->custom_mode = mavlink_msg_set_mode_get_custom_mode(msg);
800203b0:	ee fc ff fc 	ld.w	r12,r7[-4]
800203b4:	ce 0f       	rcall	80020374 <mavlink_msg_set_mode_get_custom_mode>
800203b6:	18 99       	mov	r9,r12
800203b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800203bc:	91 09       	st.w	r8[0x0],r9
	set_mode->target_system = mavlink_msg_set_mode_get_target_system(msg);
800203be:	ee fc ff fc 	ld.w	r12,r7[-4]
800203c2:	cb bf       	rcall	80020338 <mavlink_msg_set_mode_get_target_system>
800203c4:	18 98       	mov	r8,r12
800203c6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800203ca:	b2 c8       	st.b	r9[0x4],r8
	set_mode->base_mode = mavlink_msg_set_mode_get_base_mode(msg);
800203cc:	ee fc ff fc 	ld.w	r12,r7[-4]
800203d0:	cc 3f       	rcall	80020356 <mavlink_msg_set_mode_get_base_mode>
800203d2:	18 98       	mov	r8,r12
800203d4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800203d8:	b2 d8       	st.b	r9[0x5],r8
#else
	memcpy(set_mode, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_SET_MODE_LEN);
#endif
}
800203da:	2f ed       	sub	sp,-8
800203dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800203e0:	80 02       	ld.sh	r2,r0[0x0]
800203e2:	02 2a       	rsub	r10,r1

800203e4 <mavlink_msg_mission_item_send>:
 * @param z PARAM7 / z position: global: altitude
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
{
800203e4:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800203e8:	1a 97       	mov	r7,sp
800203ea:	21 2d       	sub	sp,72
800203ec:	4c 26       	lddpc	r6,800204f4 <mavlink_msg_mission_item_send+0x110>
800203ee:	1e 26       	rsub	r6,pc
800203f0:	ee c5 ff ec 	sub	r5,r7,-20
800203f4:	ef 4c ff d4 	st.w	r7[-44],r12
800203f8:	16 93       	mov	r3,r11
800203fa:	14 9e       	mov	lr,r10
800203fc:	12 9c       	mov	r12,r9
800203fe:	10 9b       	mov	r11,r8
80020400:	6a 0a       	ld.w	r10,r5[0x0]
80020402:	6a 19       	ld.w	r9,r5[0x4]
80020404:	6a 28       	ld.w	r8,r5[0x8]
80020406:	ef 63 ff d0 	st.b	r7[-48],r3
8002040a:	ef 6e ff cc 	st.b	r7[-52],lr
8002040e:	ef 5c ff c8 	st.h	r7[-56],r12
80020412:	ef 6b ff c4 	st.b	r7[-60],r11
80020416:	ef 5a ff c0 	st.h	r7[-64],r10
8002041a:	ef 69 ff bc 	st.b	r7[-68],r9
8002041e:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_ITEM_LEN];
	_mav_put_float(buf, 0, param1);
80020422:	ea c9 ff f4 	sub	r9,r5,-12
80020426:	ee c8 00 28 	sub	r8,r7,40
8002042a:	12 9b       	mov	r11,r9
8002042c:	10 9c       	mov	r12,r8
8002042e:	cd 3e       	rcall	800201d4 <byte_swap_4>
	_mav_put_float(buf, 4, param2);
80020430:	ea c9 ff f0 	sub	r9,r5,-16
80020434:	ee c8 00 28 	sub	r8,r7,40
80020438:	2f c8       	sub	r8,-4
8002043a:	12 9b       	mov	r11,r9
8002043c:	10 9c       	mov	r12,r8
8002043e:	cc be       	rcall	800201d4 <byte_swap_4>
	_mav_put_float(buf, 8, param3);
80020440:	ea c9 ff ec 	sub	r9,r5,-20
80020444:	ee c8 00 28 	sub	r8,r7,40
80020448:	2f 88       	sub	r8,-8
8002044a:	12 9b       	mov	r11,r9
8002044c:	10 9c       	mov	r12,r8
8002044e:	cc 3e       	rcall	800201d4 <byte_swap_4>
	_mav_put_float(buf, 12, param4);
80020450:	ea c9 ff e8 	sub	r9,r5,-24
80020454:	ee c8 00 28 	sub	r8,r7,40
80020458:	2f 48       	sub	r8,-12
8002045a:	12 9b       	mov	r11,r9
8002045c:	10 9c       	mov	r12,r8
8002045e:	cb be       	rcall	800201d4 <byte_swap_4>
	_mav_put_float(buf, 16, x);
80020460:	ea c9 ff e4 	sub	r9,r5,-28
80020464:	ee c8 00 28 	sub	r8,r7,40
80020468:	2f 08       	sub	r8,-16
8002046a:	12 9b       	mov	r11,r9
8002046c:	10 9c       	mov	r12,r8
8002046e:	cb 3e       	rcall	800201d4 <byte_swap_4>
	_mav_put_float(buf, 20, y);
80020470:	ea c9 ff e0 	sub	r9,r5,-32
80020474:	ee c8 00 28 	sub	r8,r7,40
80020478:	2e c8       	sub	r8,-20
8002047a:	12 9b       	mov	r11,r9
8002047c:	10 9c       	mov	r12,r8
8002047e:	ca be       	rcall	800201d4 <byte_swap_4>
	_mav_put_float(buf, 24, z);
80020480:	ea c9 ff dc 	sub	r9,r5,-36
80020484:	ee c8 00 28 	sub	r8,r7,40
80020488:	2e 88       	sub	r8,-24
8002048a:	12 9b       	mov	r11,r9
8002048c:	10 9c       	mov	r12,r8
8002048e:	ca 3e       	rcall	800201d4 <byte_swap_4>
	_mav_put_uint16_t(buf, 28, seq);
80020490:	ee c9 00 38 	sub	r9,r7,56
80020494:	ee c8 00 28 	sub	r8,r7,40
80020498:	2e 48       	sub	r8,-28
8002049a:	12 9b       	mov	r11,r9
8002049c:	10 9c       	mov	r12,r8
8002049e:	c8 1e       	rcall	800201a0 <byte_swap_2>
	_mav_put_uint16_t(buf, 30, command);
800204a0:	ee c9 00 40 	sub	r9,r7,64
800204a4:	ee c8 00 28 	sub	r8,r7,40
800204a8:	2e 28       	sub	r8,-30
800204aa:	12 9b       	mov	r11,r9
800204ac:	10 9c       	mov	r12,r8
800204ae:	c7 9e       	rcall	800201a0 <byte_swap_2>
	_mav_put_uint8_t(buf, 32, target_system);
800204b0:	ef 38 ff d0 	ld.ub	r8,r7[-48]
800204b4:	ef 68 ff f8 	st.b	r7[-8],r8
	_mav_put_uint8_t(buf, 33, target_component);
800204b8:	ef 38 ff cc 	ld.ub	r8,r7[-52]
800204bc:	ef 68 ff f9 	st.b	r7[-7],r8
	_mav_put_uint8_t(buf, 34, frame);
800204c0:	ef 38 ff c4 	ld.ub	r8,r7[-60]
800204c4:	ef 68 ff fa 	st.b	r7[-6],r8
	_mav_put_uint8_t(buf, 35, current);
800204c8:	ef 38 ff bc 	ld.ub	r8,r7[-68]
800204cc:	ef 68 ff fb 	st.b	r7[-5],r8
	_mav_put_uint8_t(buf, 36, autocontinue);
800204d0:	ef 38 ff b8 	ld.ub	r8,r7[-72]
800204d4:	ef 68 ff fc 	st.b	r7[-4],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM, buf, MAVLINK_MSG_ID_MISSION_ITEM_LEN, MAVLINK_MSG_ID_MISSION_ITEM_CRC);
800204d8:	ee ca 00 28 	sub	r10,r7,40
800204dc:	e0 68 00 fe 	mov	r8,254
800204e0:	32 59       	mov	r9,37
800204e2:	32 7b       	mov	r11,39
800204e4:	ee fc ff d4 	ld.w	r12,r7[-44]
800204e8:	fe b0 fd ae 	rcall	80020044 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_LEN, MAVLINK_MSG_ID_MISSION_ITEM_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_LEN);
#endif
#endif
}
800204ec:	2e ed       	sub	sp,-72
800204ee:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800204f2:	00 00       	add	r0,r0
800204f4:	80 02       	ld.sh	r2,r0[0x0]
800204f6:	02 72       	tst	r2,r1

800204f8 <mavlink_msg_mission_item_get_target_system>:
 * @brief Get field target_system from mission_item message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_item_get_target_system(const mavlink_message_t* msg)
{
800204f8:	eb cd 40 80 	pushm	r7,lr
800204fc:	1a 97       	mov	r7,sp
800204fe:	20 1d       	sub	sp,4
80020500:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  32);
80020504:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020508:	2f 88       	sub	r8,-8
8002050a:	2e 08       	sub	r8,-32
8002050c:	11 88       	ld.ub	r8,r8[0x0]
}
8002050e:	10 9c       	mov	r12,r8
80020510:	2f fd       	sub	sp,-4
80020512:	e3 cd 80 80 	ldm	sp++,r7,pc

80020516 <mavlink_msg_mission_item_get_target_component>:
 * @brief Get field target_component from mission_item message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_item_get_target_component(const mavlink_message_t* msg)
{
80020516:	eb cd 40 80 	pushm	r7,lr
8002051a:	1a 97       	mov	r7,sp
8002051c:	20 1d       	sub	sp,4
8002051e:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  33);
80020522:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020526:	2f 88       	sub	r8,-8
80020528:	2d f8       	sub	r8,-33
8002052a:	11 88       	ld.ub	r8,r8[0x0]
}
8002052c:	10 9c       	mov	r12,r8
8002052e:	2f fd       	sub	sp,-4
80020530:	e3 cd 80 80 	ldm	sp++,r7,pc

80020534 <mavlink_msg_mission_item_get_seq>:
 * @brief Get field seq from mission_item message
 *
 * @return Sequence
 */
static inline uint16_t mavlink_msg_mission_item_get_seq(const mavlink_message_t* msg)
{
80020534:	eb cd 40 c0 	pushm	r6-r7,lr
80020538:	1a 97       	mov	r7,sp
8002053a:	20 1d       	sub	sp,4
8002053c:	48 86       	lddpc	r6,8002055c <mavlink_msg_mission_item_get_seq+0x28>
8002053e:	1e 26       	rsub	r6,pc
80020540:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  28);
80020544:	31 cb       	mov	r11,28
80020546:	ee fc ff fc 	ld.w	r12,r7[-4]
8002054a:	c9 7e       	rcall	80020278 <_MAV_RETURN_uint16_t>
8002054c:	18 98       	mov	r8,r12
8002054e:	5c 88       	casts.h	r8
80020550:	5c 88       	casts.h	r8
}
80020552:	10 9c       	mov	r12,r8
80020554:	2f fd       	sub	sp,-4
80020556:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002055a:	00 00       	add	r0,r0
8002055c:	80 02       	ld.sh	r2,r0[0x0]
8002055e:	03 c2       	ld.ub	r2,r1[0x4]

80020560 <mavlink_msg_mission_item_get_frame>:
 * @brief Get field frame from mission_item message
 *
 * @return The coordinate system of the MISSION. see MAV_FRAME in mavlink_types.h
 */
static inline uint8_t mavlink_msg_mission_item_get_frame(const mavlink_message_t* msg)
{
80020560:	eb cd 40 80 	pushm	r7,lr
80020564:	1a 97       	mov	r7,sp
80020566:	20 1d       	sub	sp,4
80020568:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  34);
8002056c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020570:	2f 88       	sub	r8,-8
80020572:	2d e8       	sub	r8,-34
80020574:	11 88       	ld.ub	r8,r8[0x0]
}
80020576:	10 9c       	mov	r12,r8
80020578:	2f fd       	sub	sp,-4
8002057a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002057e <mavlink_msg_mission_item_get_command>:
 * @brief Get field command from mission_item message
 *
 * @return The scheduled action for the MISSION. see MAV_CMD in common.xml MAVLink specs
 */
static inline uint16_t mavlink_msg_mission_item_get_command(const mavlink_message_t* msg)
{
8002057e:	eb cd 40 c0 	pushm	r6-r7,lr
80020582:	1a 97       	mov	r7,sp
80020584:	20 1d       	sub	sp,4
80020586:	48 86       	lddpc	r6,800205a4 <mavlink_msg_mission_item_get_command+0x26>
80020588:	1e 26       	rsub	r6,pc
8002058a:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  30);
8002058e:	31 eb       	mov	r11,30
80020590:	ee fc ff fc 	ld.w	r12,r7[-4]
80020594:	c7 2e       	rcall	80020278 <_MAV_RETURN_uint16_t>
80020596:	18 98       	mov	r8,r12
80020598:	5c 88       	casts.h	r8
8002059a:	5c 88       	casts.h	r8
}
8002059c:	10 9c       	mov	r12,r8
8002059e:	2f fd       	sub	sp,-4
800205a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800205a4:	80 02       	ld.sh	r2,r0[0x0]
800205a6:	04 0c       	add	r12,r2

800205a8 <mavlink_msg_mission_item_get_current>:
 * @brief Get field current from mission_item message
 *
 * @return false:0, true:1
 */
static inline uint8_t mavlink_msg_mission_item_get_current(const mavlink_message_t* msg)
{
800205a8:	eb cd 40 80 	pushm	r7,lr
800205ac:	1a 97       	mov	r7,sp
800205ae:	20 1d       	sub	sp,4
800205b0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  35);
800205b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800205b8:	2f 88       	sub	r8,-8
800205ba:	2d d8       	sub	r8,-35
800205bc:	11 88       	ld.ub	r8,r8[0x0]
}
800205be:	10 9c       	mov	r12,r8
800205c0:	2f fd       	sub	sp,-4
800205c2:	e3 cd 80 80 	ldm	sp++,r7,pc

800205c6 <mavlink_msg_mission_item_get_autocontinue>:
 * @brief Get field autocontinue from mission_item message
 *
 * @return autocontinue to next wp
 */
static inline uint8_t mavlink_msg_mission_item_get_autocontinue(const mavlink_message_t* msg)
{
800205c6:	eb cd 40 80 	pushm	r7,lr
800205ca:	1a 97       	mov	r7,sp
800205cc:	20 1d       	sub	sp,4
800205ce:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  36);
800205d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800205d6:	2f 88       	sub	r8,-8
800205d8:	2d c8       	sub	r8,-36
800205da:	11 88       	ld.ub	r8,r8[0x0]
}
800205dc:	10 9c       	mov	r12,r8
800205de:	2f fd       	sub	sp,-4
800205e0:	e3 cd 80 80 	ldm	sp++,r7,pc

800205e4 <mavlink_msg_mission_item_get_param1>:
 * @brief Get field param1 from mission_item message
 *
 * @return PARAM1 / For NAV command MISSIONs: Radius in which the MISSION is accepted as reached, in meters
 */
static inline float mavlink_msg_mission_item_get_param1(const mavlink_message_t* msg)
{
800205e4:	eb cd 40 c0 	pushm	r6-r7,lr
800205e8:	1a 97       	mov	r7,sp
800205ea:	20 1d       	sub	sp,4
800205ec:	48 76       	lddpc	r6,80020608 <mavlink_msg_mission_item_get_param1+0x24>
800205ee:	1e 26       	rsub	r6,pc
800205f0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  0);
800205f4:	30 0b       	mov	r11,0
800205f6:	ee fc ff fc 	ld.w	r12,r7[-4]
800205fa:	c7 fe       	rcall	800202f8 <_MAV_RETURN_float>
800205fc:	18 98       	mov	r8,r12
}
800205fe:	10 9c       	mov	r12,r8
80020600:	2f fd       	sub	sp,-4
80020602:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020606:	00 00       	add	r0,r0
80020608:	80 02       	ld.sh	r2,r0[0x0]
8002060a:	04 72       	tst	r2,r2

8002060c <mavlink_msg_mission_item_get_param2>:
 * @brief Get field param2 from mission_item message
 *
 * @return PARAM2 / For NAV command MISSIONs: Time that the MAV should stay inside the PARAM1 radius before advancing, in milliseconds
 */
static inline float mavlink_msg_mission_item_get_param2(const mavlink_message_t* msg)
{
8002060c:	eb cd 40 c0 	pushm	r6-r7,lr
80020610:	1a 97       	mov	r7,sp
80020612:	20 1d       	sub	sp,4
80020614:	48 76       	lddpc	r6,80020630 <mavlink_msg_mission_item_get_param2+0x24>
80020616:	1e 26       	rsub	r6,pc
80020618:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  4);
8002061c:	30 4b       	mov	r11,4
8002061e:	ee fc ff fc 	ld.w	r12,r7[-4]
80020622:	c6 be       	rcall	800202f8 <_MAV_RETURN_float>
80020624:	18 98       	mov	r8,r12
}
80020626:	10 9c       	mov	r12,r8
80020628:	2f fd       	sub	sp,-4
8002062a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002062e:	00 00       	add	r0,r0
80020630:	80 02       	ld.sh	r2,r0[0x0]
80020632:	04 9a       	mov	r10,r2

80020634 <mavlink_msg_mission_item_get_param3>:
 * @brief Get field param3 from mission_item message
 *
 * @return PARAM3 / For LOITER command MISSIONs: Orbit to circle around the MISSION, in meters. If positive the orbit direction should be clockwise, if negative the orbit direction should be counter-clockwise.
 */
static inline float mavlink_msg_mission_item_get_param3(const mavlink_message_t* msg)
{
80020634:	eb cd 40 c0 	pushm	r6-r7,lr
80020638:	1a 97       	mov	r7,sp
8002063a:	20 1d       	sub	sp,4
8002063c:	48 76       	lddpc	r6,80020658 <mavlink_msg_mission_item_get_param3+0x24>
8002063e:	1e 26       	rsub	r6,pc
80020640:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  8);
80020644:	30 8b       	mov	r11,8
80020646:	ee fc ff fc 	ld.w	r12,r7[-4]
8002064a:	c5 7e       	rcall	800202f8 <_MAV_RETURN_float>
8002064c:	18 98       	mov	r8,r12
}
8002064e:	10 9c       	mov	r12,r8
80020650:	2f fd       	sub	sp,-4
80020652:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020656:	00 00       	add	r0,r0
80020658:	80 02       	ld.sh	r2,r0[0x0]
8002065a:	04 c2       	st.b	r2++,r2

8002065c <mavlink_msg_mission_item_get_param4>:
 * @brief Get field param4 from mission_item message
 *
 * @return PARAM4 / For NAV and LOITER command MISSIONs: Yaw orientation in degrees, [0..360] 0 = NORTH
 */
static inline float mavlink_msg_mission_item_get_param4(const mavlink_message_t* msg)
{
8002065c:	eb cd 40 c0 	pushm	r6-r7,lr
80020660:	1a 97       	mov	r7,sp
80020662:	20 1d       	sub	sp,4
80020664:	48 76       	lddpc	r6,80020680 <mavlink_msg_mission_item_get_param4+0x24>
80020666:	1e 26       	rsub	r6,pc
80020668:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  12);
8002066c:	30 cb       	mov	r11,12
8002066e:	ee fc ff fc 	ld.w	r12,r7[-4]
80020672:	c4 3e       	rcall	800202f8 <_MAV_RETURN_float>
80020674:	18 98       	mov	r8,r12
}
80020676:	10 9c       	mov	r12,r8
80020678:	2f fd       	sub	sp,-4
8002067a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002067e:	00 00       	add	r0,r0
80020680:	80 02       	ld.sh	r2,r0[0x0]
80020682:	04 ea       	st.h	--r2,r10

80020684 <mavlink_msg_mission_item_get_x>:
 * @brief Get field x from mission_item message
 *
 * @return PARAM5 / local: x position, global: latitude
 */
static inline float mavlink_msg_mission_item_get_x(const mavlink_message_t* msg)
{
80020684:	eb cd 40 c0 	pushm	r6-r7,lr
80020688:	1a 97       	mov	r7,sp
8002068a:	20 1d       	sub	sp,4
8002068c:	48 76       	lddpc	r6,800206a8 <mavlink_msg_mission_item_get_x+0x24>
8002068e:	1e 26       	rsub	r6,pc
80020690:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  16);
80020694:	31 0b       	mov	r11,16
80020696:	ee fc ff fc 	ld.w	r12,r7[-4]
8002069a:	c2 fe       	rcall	800202f8 <_MAV_RETURN_float>
8002069c:	18 98       	mov	r8,r12
}
8002069e:	10 9c       	mov	r12,r8
800206a0:	2f fd       	sub	sp,-4
800206a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800206a6:	00 00       	add	r0,r0
800206a8:	80 02       	ld.sh	r2,r0[0x0]
800206aa:	05 12       	ld.sh	r2,r2++

800206ac <mavlink_msg_mission_item_get_y>:
 * @brief Get field y from mission_item message
 *
 * @return PARAM6 / y position: global: longitude
 */
static inline float mavlink_msg_mission_item_get_y(const mavlink_message_t* msg)
{
800206ac:	eb cd 40 c0 	pushm	r6-r7,lr
800206b0:	1a 97       	mov	r7,sp
800206b2:	20 1d       	sub	sp,4
800206b4:	48 76       	lddpc	r6,800206d0 <mavlink_msg_mission_item_get_y+0x24>
800206b6:	1e 26       	rsub	r6,pc
800206b8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  20);
800206bc:	31 4b       	mov	r11,20
800206be:	ee fc ff fc 	ld.w	r12,r7[-4]
800206c2:	c1 be       	rcall	800202f8 <_MAV_RETURN_float>
800206c4:	18 98       	mov	r8,r12
}
800206c6:	10 9c       	mov	r12,r8
800206c8:	2f fd       	sub	sp,-4
800206ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800206ce:	00 00       	add	r0,r0
800206d0:	80 02       	ld.sh	r2,r0[0x0]
800206d2:	05 3a       	ld.ub	r10,r2++

800206d4 <mavlink_msg_mission_item_get_z>:
 * @brief Get field z from mission_item message
 *
 * @return PARAM7 / z position: global: altitude
 */
static inline float mavlink_msg_mission_item_get_z(const mavlink_message_t* msg)
{
800206d4:	eb cd 40 c0 	pushm	r6-r7,lr
800206d8:	1a 97       	mov	r7,sp
800206da:	20 1d       	sub	sp,4
800206dc:	48 76       	lddpc	r6,800206f8 <mavlink_msg_mission_item_get_z+0x24>
800206de:	1e 26       	rsub	r6,pc
800206e0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  24);
800206e4:	31 8b       	mov	r11,24
800206e6:	ee fc ff fc 	ld.w	r12,r7[-4]
800206ea:	c0 7e       	rcall	800202f8 <_MAV_RETURN_float>
800206ec:	18 98       	mov	r8,r12
}
800206ee:	10 9c       	mov	r12,r8
800206f0:	2f fd       	sub	sp,-4
800206f2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800206f6:	00 00       	add	r0,r0
800206f8:	80 02       	ld.sh	r2,r0[0x0]
800206fa:	05 62       	ld.uh	r2,--r2

800206fc <mavlink_msg_mission_item_decode>:
 *
 * @param msg The message to decode
 * @param mission_item C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_item_decode(const mavlink_message_t* msg, mavlink_mission_item_t* mission_item)
{
800206fc:	eb cd 40 c0 	pushm	r6-r7,lr
80020700:	1a 97       	mov	r7,sp
80020702:	20 2d       	sub	sp,8
80020704:	4b a6       	lddpc	r6,800207ec <mavlink_msg_mission_item_decode+0xf0>
80020706:	1e 26       	rsub	r6,pc
80020708:	ef 4c ff fc 	st.w	r7[-4],r12
8002070c:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_item->param1 = mavlink_msg_mission_item_get_param1(msg);
80020710:	ee fc ff fc 	ld.w	r12,r7[-4]
80020714:	c6 8f       	rcall	800205e4 <mavlink_msg_mission_item_get_param1>
80020716:	18 99       	mov	r9,r12
80020718:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002071c:	91 09       	st.w	r8[0x0],r9
	mission_item->param2 = mavlink_msg_mission_item_get_param2(msg);
8002071e:	ee fc ff fc 	ld.w	r12,r7[-4]
80020722:	c7 5f       	rcall	8002060c <mavlink_msg_mission_item_get_param2>
80020724:	18 99       	mov	r9,r12
80020726:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002072a:	91 19       	st.w	r8[0x4],r9
	mission_item->param3 = mavlink_msg_mission_item_get_param3(msg);
8002072c:	ee fc ff fc 	ld.w	r12,r7[-4]
80020730:	c8 2f       	rcall	80020634 <mavlink_msg_mission_item_get_param3>
80020732:	18 99       	mov	r9,r12
80020734:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020738:	91 29       	st.w	r8[0x8],r9
	mission_item->param4 = mavlink_msg_mission_item_get_param4(msg);
8002073a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002073e:	c8 ff       	rcall	8002065c <mavlink_msg_mission_item_get_param4>
80020740:	18 99       	mov	r9,r12
80020742:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020746:	91 39       	st.w	r8[0xc],r9
	mission_item->x = mavlink_msg_mission_item_get_x(msg);
80020748:	ee fc ff fc 	ld.w	r12,r7[-4]
8002074c:	c9 cf       	rcall	80020684 <mavlink_msg_mission_item_get_x>
8002074e:	18 99       	mov	r9,r12
80020750:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020754:	91 49       	st.w	r8[0x10],r9
	mission_item->y = mavlink_msg_mission_item_get_y(msg);
80020756:	ee fc ff fc 	ld.w	r12,r7[-4]
8002075a:	ca 9f       	rcall	800206ac <mavlink_msg_mission_item_get_y>
8002075c:	18 99       	mov	r9,r12
8002075e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020762:	91 59       	st.w	r8[0x14],r9
	mission_item->z = mavlink_msg_mission_item_get_z(msg);
80020764:	ee fc ff fc 	ld.w	r12,r7[-4]
80020768:	cb 6f       	rcall	800206d4 <mavlink_msg_mission_item_get_z>
8002076a:	18 99       	mov	r9,r12
8002076c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020770:	91 69       	st.w	r8[0x18],r9
	mission_item->seq = mavlink_msg_mission_item_get_seq(msg);
80020772:	ee fc ff fc 	ld.w	r12,r7[-4]
80020776:	cd fe       	rcall	80020534 <mavlink_msg_mission_item_get_seq>
80020778:	18 98       	mov	r8,r12
8002077a:	5c 88       	casts.h	r8
8002077c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80020780:	f3 58 00 1c 	st.h	r9[28],r8
	mission_item->command = mavlink_msg_mission_item_get_command(msg);
80020784:	ee fc ff fc 	ld.w	r12,r7[-4]
80020788:	cf be       	rcall	8002057e <mavlink_msg_mission_item_get_command>
8002078a:	18 98       	mov	r8,r12
8002078c:	5c 88       	casts.h	r8
8002078e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80020792:	f3 58 00 1e 	st.h	r9[30],r8
	mission_item->target_system = mavlink_msg_mission_item_get_target_system(msg);
80020796:	ee fc ff fc 	ld.w	r12,r7[-4]
8002079a:	ca fe       	rcall	800204f8 <mavlink_msg_mission_item_get_target_system>
8002079c:	18 98       	mov	r8,r12
8002079e:	ee f9 ff f8 	ld.w	r9,r7[-8]
800207a2:	f3 68 00 20 	st.b	r9[32],r8
	mission_item->target_component = mavlink_msg_mission_item_get_target_component(msg);
800207a6:	ee fc ff fc 	ld.w	r12,r7[-4]
800207aa:	cb 6e       	rcall	80020516 <mavlink_msg_mission_item_get_target_component>
800207ac:	18 98       	mov	r8,r12
800207ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800207b2:	f3 68 00 21 	st.b	r9[33],r8
	mission_item->frame = mavlink_msg_mission_item_get_frame(msg);
800207b6:	ee fc ff fc 	ld.w	r12,r7[-4]
800207ba:	cd 3e       	rcall	80020560 <mavlink_msg_mission_item_get_frame>
800207bc:	18 98       	mov	r8,r12
800207be:	ee f9 ff f8 	ld.w	r9,r7[-8]
800207c2:	f3 68 00 22 	st.b	r9[34],r8
	mission_item->current = mavlink_msg_mission_item_get_current(msg);
800207c6:	ee fc ff fc 	ld.w	r12,r7[-4]
800207ca:	ce fe       	rcall	800205a8 <mavlink_msg_mission_item_get_current>
800207cc:	18 98       	mov	r8,r12
800207ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800207d2:	f3 68 00 23 	st.b	r9[35],r8
	mission_item->autocontinue = mavlink_msg_mission_item_get_autocontinue(msg);
800207d6:	ee fc ff fc 	ld.w	r12,r7[-4]
800207da:	cf 6e       	rcall	800205c6 <mavlink_msg_mission_item_get_autocontinue>
800207dc:	18 98       	mov	r8,r12
800207de:	ee f9 ff f8 	ld.w	r9,r7[-8]
800207e2:	f3 68 00 24 	st.b	r9[36],r8
#else
	memcpy(mission_item, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_ITEM_LEN);
#endif
}
800207e6:	2f ed       	sub	sp,-8
800207e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800207ec:	80 02       	ld.sh	r2,r0[0x0]
800207ee:	05 8a       	ld.ub	r10,r2[0x0]

800207f0 <mavlink_msg_mission_request_send>:
 * @param seq Sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_request_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq)
{
800207f0:	eb cd 40 c0 	pushm	r6-r7,lr
800207f4:	1a 97       	mov	r7,sp
800207f6:	20 5d       	sub	sp,20
800207f8:	49 56       	lddpc	r6,8002084c <mavlink_msg_mission_request_send+0x5c>
800207fa:	1e 26       	rsub	r6,pc
800207fc:	ef 4c ff f8 	st.w	r7[-8],r12
80020800:	12 98       	mov	r8,r9
80020802:	16 99       	mov	r9,r11
80020804:	ef 69 ff f4 	st.b	r7[-12],r9
80020808:	14 99       	mov	r9,r10
8002080a:	ef 69 ff f0 	st.b	r7[-16],r9
8002080e:	ef 58 ff ec 	st.h	r7[-20],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_REQUEST_LEN];
	_mav_put_uint16_t(buf, 0, seq);
80020812:	ee c9 00 14 	sub	r9,r7,20
80020816:	ee c8 00 04 	sub	r8,r7,4
8002081a:	12 9b       	mov	r11,r9
8002081c:	10 9c       	mov	r12,r8
8002081e:	fe b0 fc c1 	rcall	800201a0 <byte_swap_2>
	_mav_put_uint8_t(buf, 2, target_system);
80020822:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80020826:	ef 68 ff fe 	st.b	r7[-2],r8
	_mav_put_uint8_t(buf, 3, target_component);
8002082a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8002082e:	ef 68 ff ff 	st.b	r7[-1],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_REQUEST, buf, MAVLINK_MSG_ID_MISSION_REQUEST_LEN, MAVLINK_MSG_ID_MISSION_REQUEST_CRC);
80020832:	ee ca 00 04 	sub	r10,r7,4
80020836:	e0 68 00 e6 	mov	r8,230
8002083a:	30 49       	mov	r9,4
8002083c:	32 8b       	mov	r11,40
8002083e:	ee fc ff f8 	ld.w	r12,r7[-8]
80020842:	fe b0 fc 01 	rcall	80020044 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_REQUEST, (const char *)&packet, MAVLINK_MSG_ID_MISSION_REQUEST_LEN, MAVLINK_MSG_ID_MISSION_REQUEST_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_REQUEST, (const char *)&packet, MAVLINK_MSG_ID_MISSION_REQUEST_LEN);
#endif
#endif
}
80020846:	2f bd       	sub	sp,-20
80020848:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002084c:	80 02       	ld.sh	r2,r0[0x0]
8002084e:	06 7e       	tst	lr,r3

80020850 <mavlink_msg_mission_request_get_target_system>:
 * @brief Get field target_system from mission_request message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_request_get_target_system(const mavlink_message_t* msg)
{
80020850:	eb cd 40 80 	pushm	r7,lr
80020854:	1a 97       	mov	r7,sp
80020856:	20 1d       	sub	sp,4
80020858:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8002085c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020860:	2f 88       	sub	r8,-8
80020862:	2f e8       	sub	r8,-2
80020864:	11 88       	ld.ub	r8,r8[0x0]
}
80020866:	10 9c       	mov	r12,r8
80020868:	2f fd       	sub	sp,-4
8002086a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002086e <mavlink_msg_mission_request_get_target_component>:
 * @brief Get field target_component from mission_request message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_request_get_target_component(const mavlink_message_t* msg)
{
8002086e:	eb cd 40 80 	pushm	r7,lr
80020872:	1a 97       	mov	r7,sp
80020874:	20 1d       	sub	sp,4
80020876:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8002087a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002087e:	2f 88       	sub	r8,-8
80020880:	2f d8       	sub	r8,-3
80020882:	11 88       	ld.ub	r8,r8[0x0]
}
80020884:	10 9c       	mov	r12,r8
80020886:	2f fd       	sub	sp,-4
80020888:	e3 cd 80 80 	ldm	sp++,r7,pc

8002088c <mavlink_msg_mission_request_get_seq>:
 * @brief Get field seq from mission_request message
 *
 * @return Sequence
 */
static inline uint16_t mavlink_msg_mission_request_get_seq(const mavlink_message_t* msg)
{
8002088c:	eb cd 40 c0 	pushm	r6-r7,lr
80020890:	1a 97       	mov	r7,sp
80020892:	20 1d       	sub	sp,4
80020894:	48 86       	lddpc	r6,800208b4 <mavlink_msg_mission_request_get_seq+0x28>
80020896:	1e 26       	rsub	r6,pc
80020898:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
8002089c:	30 0b       	mov	r11,0
8002089e:	ee fc ff fc 	ld.w	r12,r7[-4]
800208a2:	fe b0 fc eb 	rcall	80020278 <_MAV_RETURN_uint16_t>
800208a6:	18 98       	mov	r8,r12
800208a8:	5c 88       	casts.h	r8
800208aa:	5c 88       	casts.h	r8
}
800208ac:	10 9c       	mov	r12,r8
800208ae:	2f fd       	sub	sp,-4
800208b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800208b4:	80 02       	ld.sh	r2,r0[0x0]
800208b6:	07 1a       	ld.sh	r10,r3++

800208b8 <mavlink_msg_mission_request_decode>:
 *
 * @param msg The message to decode
 * @param mission_request C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_request_decode(const mavlink_message_t* msg, mavlink_mission_request_t* mission_request)
{
800208b8:	eb cd 40 c0 	pushm	r6-r7,lr
800208bc:	1a 97       	mov	r7,sp
800208be:	20 2d       	sub	sp,8
800208c0:	49 06       	lddpc	r6,80020900 <mavlink_msg_mission_request_decode+0x48>
800208c2:	1e 26       	rsub	r6,pc
800208c4:	ef 4c ff fc 	st.w	r7[-4],r12
800208c8:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_request->seq = mavlink_msg_mission_request_get_seq(msg);
800208cc:	ee fc ff fc 	ld.w	r12,r7[-4]
800208d0:	cd ef       	rcall	8002088c <mavlink_msg_mission_request_get_seq>
800208d2:	18 98       	mov	r8,r12
800208d4:	5c 88       	casts.h	r8
800208d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800208da:	b2 08       	st.h	r9[0x0],r8
	mission_request->target_system = mavlink_msg_mission_request_get_target_system(msg);
800208dc:	ee fc ff fc 	ld.w	r12,r7[-4]
800208e0:	cb 8f       	rcall	80020850 <mavlink_msg_mission_request_get_target_system>
800208e2:	18 98       	mov	r8,r12
800208e4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800208e8:	b2 a8       	st.b	r9[0x2],r8
	mission_request->target_component = mavlink_msg_mission_request_get_target_component(msg);
800208ea:	ee fc ff fc 	ld.w	r12,r7[-4]
800208ee:	cc 0f       	rcall	8002086e <mavlink_msg_mission_request_get_target_component>
800208f0:	18 98       	mov	r8,r12
800208f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800208f6:	b2 b8       	st.b	r9[0x3],r8
#else
	memcpy(mission_request, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_REQUEST_LEN);
#endif
}
800208f8:	2f ed       	sub	sp,-8
800208fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800208fe:	00 00       	add	r0,r0
80020900:	80 02       	ld.sh	r2,r0[0x0]
80020902:	07 46       	ld.w	r6,--r3

80020904 <mavlink_msg_mission_set_current_get_target_system>:
 * @brief Get field target_system from mission_set_current message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_set_current_get_target_system(const mavlink_message_t* msg)
{
80020904:	eb cd 40 80 	pushm	r7,lr
80020908:	1a 97       	mov	r7,sp
8002090a:	20 1d       	sub	sp,4
8002090c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
80020910:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020914:	2f 88       	sub	r8,-8
80020916:	2f e8       	sub	r8,-2
80020918:	11 88       	ld.ub	r8,r8[0x0]
}
8002091a:	10 9c       	mov	r12,r8
8002091c:	2f fd       	sub	sp,-4
8002091e:	e3 cd 80 80 	ldm	sp++,r7,pc

80020922 <mavlink_msg_mission_set_current_get_target_component>:
 * @brief Get field target_component from mission_set_current message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_set_current_get_target_component(const mavlink_message_t* msg)
{
80020922:	eb cd 40 80 	pushm	r7,lr
80020926:	1a 97       	mov	r7,sp
80020928:	20 1d       	sub	sp,4
8002092a:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8002092e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020932:	2f 88       	sub	r8,-8
80020934:	2f d8       	sub	r8,-3
80020936:	11 88       	ld.ub	r8,r8[0x0]
}
80020938:	10 9c       	mov	r12,r8
8002093a:	2f fd       	sub	sp,-4
8002093c:	e3 cd 80 80 	ldm	sp++,r7,pc

80020940 <mavlink_msg_mission_set_current_get_seq>:
 * @brief Get field seq from mission_set_current message
 *
 * @return Sequence
 */
static inline uint16_t mavlink_msg_mission_set_current_get_seq(const mavlink_message_t* msg)
{
80020940:	eb cd 40 c0 	pushm	r6-r7,lr
80020944:	1a 97       	mov	r7,sp
80020946:	20 1d       	sub	sp,4
80020948:	48 86       	lddpc	r6,80020968 <mavlink_msg_mission_set_current_get_seq+0x28>
8002094a:	1e 26       	rsub	r6,pc
8002094c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
80020950:	30 0b       	mov	r11,0
80020952:	ee fc ff fc 	ld.w	r12,r7[-4]
80020956:	fe b0 fc 91 	rcall	80020278 <_MAV_RETURN_uint16_t>
8002095a:	18 98       	mov	r8,r12
8002095c:	5c 88       	casts.h	r8
8002095e:	5c 88       	casts.h	r8
}
80020960:	10 9c       	mov	r12,r8
80020962:	2f fd       	sub	sp,-4
80020964:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020968:	80 02       	ld.sh	r2,r0[0x0]
8002096a:	07 ce       	ld.ub	lr,r3[0x4]

8002096c <mavlink_msg_mission_set_current_decode>:
 *
 * @param msg The message to decode
 * @param mission_set_current C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_set_current_decode(const mavlink_message_t* msg, mavlink_mission_set_current_t* mission_set_current)
{
8002096c:	eb cd 40 c0 	pushm	r6-r7,lr
80020970:	1a 97       	mov	r7,sp
80020972:	20 2d       	sub	sp,8
80020974:	49 06       	lddpc	r6,800209b4 <mavlink_msg_mission_set_current_decode+0x48>
80020976:	1e 26       	rsub	r6,pc
80020978:	ef 4c ff fc 	st.w	r7[-4],r12
8002097c:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_set_current->seq = mavlink_msg_mission_set_current_get_seq(msg);
80020980:	ee fc ff fc 	ld.w	r12,r7[-4]
80020984:	cd ef       	rcall	80020940 <mavlink_msg_mission_set_current_get_seq>
80020986:	18 98       	mov	r8,r12
80020988:	5c 88       	casts.h	r8
8002098a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002098e:	b2 08       	st.h	r9[0x0],r8
	mission_set_current->target_system = mavlink_msg_mission_set_current_get_target_system(msg);
80020990:	ee fc ff fc 	ld.w	r12,r7[-4]
80020994:	cb 8f       	rcall	80020904 <mavlink_msg_mission_set_current_get_target_system>
80020996:	18 98       	mov	r8,r12
80020998:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002099c:	b2 a8       	st.b	r9[0x2],r8
	mission_set_current->target_component = mavlink_msg_mission_set_current_get_target_component(msg);
8002099e:	ee fc ff fc 	ld.w	r12,r7[-4]
800209a2:	cc 0f       	rcall	80020922 <mavlink_msg_mission_set_current_get_target_component>
800209a4:	18 98       	mov	r8,r12
800209a6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800209aa:	b2 b8       	st.b	r9[0x3],r8
#else
	memcpy(mission_set_current, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_SET_CURRENT_LEN);
#endif
}
800209ac:	2f ed       	sub	sp,-8
800209ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800209b2:	00 00       	add	r0,r0
800209b4:	80 02       	ld.sh	r2,r0[0x0]
800209b6:	07 fa       	ld.ub	r10,r3[0x7]

800209b8 <mavlink_msg_mission_current_send>:
 * @param seq Sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_current_send(mavlink_channel_t chan, uint16_t seq)
{
800209b8:	eb cd 40 c0 	pushm	r6-r7,lr
800209bc:	1a 97       	mov	r7,sp
800209be:	20 3d       	sub	sp,12
800209c0:	48 e6       	lddpc	r6,800209f8 <mavlink_msg_mission_current_send+0x40>
800209c2:	1e 26       	rsub	r6,pc
800209c4:	ef 4c ff f8 	st.w	r7[-8],r12
800209c8:	16 98       	mov	r8,r11
800209ca:	ef 58 ff f4 	st.h	r7[-12],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_CURRENT_LEN];
	_mav_put_uint16_t(buf, 0, seq);
800209ce:	ee c9 00 0c 	sub	r9,r7,12
800209d2:	ee c8 00 04 	sub	r8,r7,4
800209d6:	12 9b       	mov	r11,r9
800209d8:	10 9c       	mov	r12,r8
800209da:	fe b0 fb e3 	rcall	800201a0 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_CURRENT, buf, MAVLINK_MSG_ID_MISSION_CURRENT_LEN, MAVLINK_MSG_ID_MISSION_CURRENT_CRC);
800209de:	ee ca 00 04 	sub	r10,r7,4
800209e2:	31 c8       	mov	r8,28
800209e4:	30 29       	mov	r9,2
800209e6:	32 ab       	mov	r11,42
800209e8:	ee fc ff f8 	ld.w	r12,r7[-8]
800209ec:	fe b0 fb 2c 	rcall	80020044 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_CURRENT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_CURRENT_LEN, MAVLINK_MSG_ID_MISSION_CURRENT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_CURRENT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_CURRENT_LEN);
#endif
#endif
}
800209f0:	2f dd       	sub	sp,-12
800209f2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800209f6:	00 00       	add	r0,r0
800209f8:	80 02       	ld.sh	r2,r0[0x0]
800209fa:	08 46       	or	r6,r4

800209fc <mavlink_msg_mission_request_list_get_target_system>:
 * @brief Get field target_system from mission_request_list message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_request_list_get_target_system(const mavlink_message_t* msg)
{
800209fc:	eb cd 40 80 	pushm	r7,lr
80020a00:	1a 97       	mov	r7,sp
80020a02:	20 1d       	sub	sp,4
80020a04:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
80020a08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020a0c:	2f 88       	sub	r8,-8
80020a0e:	11 88       	ld.ub	r8,r8[0x0]
}
80020a10:	10 9c       	mov	r12,r8
80020a12:	2f fd       	sub	sp,-4
80020a14:	e3 cd 80 80 	ldm	sp++,r7,pc

80020a18 <mavlink_msg_mission_request_list_get_target_component>:
 * @brief Get field target_component from mission_request_list message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_request_list_get_target_component(const mavlink_message_t* msg)
{
80020a18:	eb cd 40 80 	pushm	r7,lr
80020a1c:	1a 97       	mov	r7,sp
80020a1e:	20 1d       	sub	sp,4
80020a20:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
80020a24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020a28:	2f 88       	sub	r8,-8
80020a2a:	2f f8       	sub	r8,-1
80020a2c:	11 88       	ld.ub	r8,r8[0x0]
}
80020a2e:	10 9c       	mov	r12,r8
80020a30:	2f fd       	sub	sp,-4
80020a32:	e3 cd 80 80 	ldm	sp++,r7,pc

80020a36 <mavlink_msg_mission_request_list_decode>:
 *
 * @param msg The message to decode
 * @param mission_request_list C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_request_list_decode(const mavlink_message_t* msg, mavlink_mission_request_list_t* mission_request_list)
{
80020a36:	eb cd 40 c0 	pushm	r6-r7,lr
80020a3a:	1a 97       	mov	r7,sp
80020a3c:	20 2d       	sub	sp,8
80020a3e:	48 c6       	lddpc	r6,80020a6c <mavlink_msg_mission_request_list_decode+0x36>
80020a40:	1e 26       	rsub	r6,pc
80020a42:	ef 4c ff fc 	st.w	r7[-4],r12
80020a46:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_request_list->target_system = mavlink_msg_mission_request_list_get_target_system(msg);
80020a4a:	ee fc ff fc 	ld.w	r12,r7[-4]
80020a4e:	cd 7f       	rcall	800209fc <mavlink_msg_mission_request_list_get_target_system>
80020a50:	18 98       	mov	r8,r12
80020a52:	ee f9 ff f8 	ld.w	r9,r7[-8]
80020a56:	b2 88       	st.b	r9[0x0],r8
	mission_request_list->target_component = mavlink_msg_mission_request_list_get_target_component(msg);
80020a58:	ee fc ff fc 	ld.w	r12,r7[-4]
80020a5c:	cd ef       	rcall	80020a18 <mavlink_msg_mission_request_list_get_target_component>
80020a5e:	18 98       	mov	r8,r12
80020a60:	ee f9 ff f8 	ld.w	r9,r7[-8]
80020a64:	b2 98       	st.b	r9[0x1],r8
#else
	memcpy(mission_request_list, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_REQUEST_LIST_LEN);
#endif
}
80020a66:	2f ed       	sub	sp,-8
80020a68:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020a6c:	80 02       	ld.sh	r2,r0[0x0]
80020a6e:	08 c4       	st.b	r4++,r4

80020a70 <mavlink_msg_mission_count_send>:
 * @param count Number of mission items in the sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_count_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t count)
{
80020a70:	eb cd 40 c0 	pushm	r6-r7,lr
80020a74:	1a 97       	mov	r7,sp
80020a76:	20 5d       	sub	sp,20
80020a78:	49 56       	lddpc	r6,80020acc <mavlink_msg_mission_count_send+0x5c>
80020a7a:	1e 26       	rsub	r6,pc
80020a7c:	ef 4c ff f8 	st.w	r7[-8],r12
80020a80:	12 98       	mov	r8,r9
80020a82:	16 99       	mov	r9,r11
80020a84:	ef 69 ff f4 	st.b	r7[-12],r9
80020a88:	14 99       	mov	r9,r10
80020a8a:	ef 69 ff f0 	st.b	r7[-16],r9
80020a8e:	ef 58 ff ec 	st.h	r7[-20],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_COUNT_LEN];
	_mav_put_uint16_t(buf, 0, count);
80020a92:	ee c9 00 14 	sub	r9,r7,20
80020a96:	ee c8 00 04 	sub	r8,r7,4
80020a9a:	12 9b       	mov	r11,r9
80020a9c:	10 9c       	mov	r12,r8
80020a9e:	fe b0 fb 81 	rcall	800201a0 <byte_swap_2>
	_mav_put_uint8_t(buf, 2, target_system);
80020aa2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80020aa6:	ef 68 ff fe 	st.b	r7[-2],r8
	_mav_put_uint8_t(buf, 3, target_component);
80020aaa:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80020aae:	ef 68 ff ff 	st.b	r7[-1],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_COUNT, buf, MAVLINK_MSG_ID_MISSION_COUNT_LEN, MAVLINK_MSG_ID_MISSION_COUNT_CRC);
80020ab2:	ee ca 00 04 	sub	r10,r7,4
80020ab6:	e0 68 00 dd 	mov	r8,221
80020aba:	30 49       	mov	r9,4
80020abc:	32 cb       	mov	r11,44
80020abe:	ee fc ff f8 	ld.w	r12,r7[-8]
80020ac2:	fe b0 fa c1 	rcall	80020044 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_COUNT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_COUNT_LEN, MAVLINK_MSG_ID_MISSION_COUNT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_COUNT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_COUNT_LEN);
#endif
#endif
}
80020ac6:	2f bd       	sub	sp,-20
80020ac8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020acc:	80 02       	ld.sh	r2,r0[0x0]
80020ace:	08 fe       	st.b	--r4,lr

80020ad0 <mavlink_msg_mission_count_get_target_system>:
 * @brief Get field target_system from mission_count message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_count_get_target_system(const mavlink_message_t* msg)
{
80020ad0:	eb cd 40 80 	pushm	r7,lr
80020ad4:	1a 97       	mov	r7,sp
80020ad6:	20 1d       	sub	sp,4
80020ad8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
80020adc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020ae0:	2f 88       	sub	r8,-8
80020ae2:	2f e8       	sub	r8,-2
80020ae4:	11 88       	ld.ub	r8,r8[0x0]
}
80020ae6:	10 9c       	mov	r12,r8
80020ae8:	2f fd       	sub	sp,-4
80020aea:	e3 cd 80 80 	ldm	sp++,r7,pc

80020aee <mavlink_msg_mission_count_get_target_component>:
 * @brief Get field target_component from mission_count message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_count_get_target_component(const mavlink_message_t* msg)
{
80020aee:	eb cd 40 80 	pushm	r7,lr
80020af2:	1a 97       	mov	r7,sp
80020af4:	20 1d       	sub	sp,4
80020af6:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
80020afa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020afe:	2f 88       	sub	r8,-8
80020b00:	2f d8       	sub	r8,-3
80020b02:	11 88       	ld.ub	r8,r8[0x0]
}
80020b04:	10 9c       	mov	r12,r8
80020b06:	2f fd       	sub	sp,-4
80020b08:	e3 cd 80 80 	ldm	sp++,r7,pc

80020b0c <mavlink_msg_mission_count_get_count>:
 * @brief Get field count from mission_count message
 *
 * @return Number of mission items in the sequence
 */
static inline uint16_t mavlink_msg_mission_count_get_count(const mavlink_message_t* msg)
{
80020b0c:	eb cd 40 c0 	pushm	r6-r7,lr
80020b10:	1a 97       	mov	r7,sp
80020b12:	20 1d       	sub	sp,4
80020b14:	48 86       	lddpc	r6,80020b34 <mavlink_msg_mission_count_get_count+0x28>
80020b16:	1e 26       	rsub	r6,pc
80020b18:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
80020b1c:	30 0b       	mov	r11,0
80020b1e:	ee fc ff fc 	ld.w	r12,r7[-4]
80020b22:	fe b0 fb ab 	rcall	80020278 <_MAV_RETURN_uint16_t>
80020b26:	18 98       	mov	r8,r12
80020b28:	5c 88       	casts.h	r8
80020b2a:	5c 88       	casts.h	r8
}
80020b2c:	10 9c       	mov	r12,r8
80020b2e:	2f fd       	sub	sp,-4
80020b30:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020b34:	80 02       	ld.sh	r2,r0[0x0]
80020b36:	09 9a       	ld.ub	r10,r4[0x1]

80020b38 <mavlink_msg_mission_count_decode>:
 *
 * @param msg The message to decode
 * @param mission_count C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_count_decode(const mavlink_message_t* msg, mavlink_mission_count_t* mission_count)
{
80020b38:	eb cd 40 c0 	pushm	r6-r7,lr
80020b3c:	1a 97       	mov	r7,sp
80020b3e:	20 2d       	sub	sp,8
80020b40:	49 06       	lddpc	r6,80020b80 <mavlink_msg_mission_count_decode+0x48>
80020b42:	1e 26       	rsub	r6,pc
80020b44:	ef 4c ff fc 	st.w	r7[-4],r12
80020b48:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_count->count = mavlink_msg_mission_count_get_count(msg);
80020b4c:	ee fc ff fc 	ld.w	r12,r7[-4]
80020b50:	cd ef       	rcall	80020b0c <mavlink_msg_mission_count_get_count>
80020b52:	18 98       	mov	r8,r12
80020b54:	5c 88       	casts.h	r8
80020b56:	ee f9 ff f8 	ld.w	r9,r7[-8]
80020b5a:	b2 08       	st.h	r9[0x0],r8
	mission_count->target_system = mavlink_msg_mission_count_get_target_system(msg);
80020b5c:	ee fc ff fc 	ld.w	r12,r7[-4]
80020b60:	cb 8f       	rcall	80020ad0 <mavlink_msg_mission_count_get_target_system>
80020b62:	18 98       	mov	r8,r12
80020b64:	ee f9 ff f8 	ld.w	r9,r7[-8]
80020b68:	b2 a8       	st.b	r9[0x2],r8
	mission_count->target_component = mavlink_msg_mission_count_get_target_component(msg);
80020b6a:	ee fc ff fc 	ld.w	r12,r7[-4]
80020b6e:	cc 0f       	rcall	80020aee <mavlink_msg_mission_count_get_target_component>
80020b70:	18 98       	mov	r8,r12
80020b72:	ee f9 ff f8 	ld.w	r9,r7[-8]
80020b76:	b2 b8       	st.b	r9[0x3],r8
#else
	memcpy(mission_count, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_COUNT_LEN);
#endif
}
80020b78:	2f ed       	sub	sp,-8
80020b7a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020b7e:	00 00       	add	r0,r0
80020b80:	80 02       	ld.sh	r2,r0[0x0]
80020b82:	09 c6       	ld.ub	r6,r4[0x4]

80020b84 <mavlink_msg_mission_clear_all_get_target_system>:
 * @brief Get field target_system from mission_clear_all message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_clear_all_get_target_system(const mavlink_message_t* msg)
{
80020b84:	eb cd 40 80 	pushm	r7,lr
80020b88:	1a 97       	mov	r7,sp
80020b8a:	20 1d       	sub	sp,4
80020b8c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
80020b90:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020b94:	2f 88       	sub	r8,-8
80020b96:	11 88       	ld.ub	r8,r8[0x0]
}
80020b98:	10 9c       	mov	r12,r8
80020b9a:	2f fd       	sub	sp,-4
80020b9c:	e3 cd 80 80 	ldm	sp++,r7,pc

80020ba0 <mavlink_msg_mission_clear_all_get_target_component>:
 * @brief Get field target_component from mission_clear_all message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_clear_all_get_target_component(const mavlink_message_t* msg)
{
80020ba0:	eb cd 40 80 	pushm	r7,lr
80020ba4:	1a 97       	mov	r7,sp
80020ba6:	20 1d       	sub	sp,4
80020ba8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
80020bac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020bb0:	2f 88       	sub	r8,-8
80020bb2:	2f f8       	sub	r8,-1
80020bb4:	11 88       	ld.ub	r8,r8[0x0]
}
80020bb6:	10 9c       	mov	r12,r8
80020bb8:	2f fd       	sub	sp,-4
80020bba:	e3 cd 80 80 	ldm	sp++,r7,pc

80020bbe <mavlink_msg_mission_clear_all_decode>:
 *
 * @param msg The message to decode
 * @param mission_clear_all C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_clear_all_decode(const mavlink_message_t* msg, mavlink_mission_clear_all_t* mission_clear_all)
{
80020bbe:	eb cd 40 c0 	pushm	r6-r7,lr
80020bc2:	1a 97       	mov	r7,sp
80020bc4:	20 2d       	sub	sp,8
80020bc6:	48 c6       	lddpc	r6,80020bf4 <mavlink_msg_mission_clear_all_decode+0x36>
80020bc8:	1e 26       	rsub	r6,pc
80020bca:	ef 4c ff fc 	st.w	r7[-4],r12
80020bce:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_clear_all->target_system = mavlink_msg_mission_clear_all_get_target_system(msg);
80020bd2:	ee fc ff fc 	ld.w	r12,r7[-4]
80020bd6:	cd 7f       	rcall	80020b84 <mavlink_msg_mission_clear_all_get_target_system>
80020bd8:	18 98       	mov	r8,r12
80020bda:	ee f9 ff f8 	ld.w	r9,r7[-8]
80020bde:	b2 88       	st.b	r9[0x0],r8
	mission_clear_all->target_component = mavlink_msg_mission_clear_all_get_target_component(msg);
80020be0:	ee fc ff fc 	ld.w	r12,r7[-4]
80020be4:	cd ef       	rcall	80020ba0 <mavlink_msg_mission_clear_all_get_target_component>
80020be6:	18 98       	mov	r8,r12
80020be8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80020bec:	b2 98       	st.b	r9[0x1],r8
#else
	memcpy(mission_clear_all, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_CLEAR_ALL_LEN);
#endif
}
80020bee:	2f ed       	sub	sp,-8
80020bf0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020bf4:	80 02       	ld.sh	r2,r0[0x0]
80020bf6:	0a 4c       	or	r12,r5

80020bf8 <mavlink_msg_mission_item_reached_send>:
 * @param seq Sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_item_reached_send(mavlink_channel_t chan, uint16_t seq)
{
80020bf8:	eb cd 40 c0 	pushm	r6-r7,lr
80020bfc:	1a 97       	mov	r7,sp
80020bfe:	20 3d       	sub	sp,12
80020c00:	48 e6       	lddpc	r6,80020c38 <mavlink_msg_mission_item_reached_send+0x40>
80020c02:	1e 26       	rsub	r6,pc
80020c04:	ef 4c ff f8 	st.w	r7[-8],r12
80020c08:	16 98       	mov	r8,r11
80020c0a:	ef 58 ff f4 	st.h	r7[-12],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN];
	_mav_put_uint16_t(buf, 0, seq);
80020c0e:	ee c9 00 0c 	sub	r9,r7,12
80020c12:	ee c8 00 04 	sub	r8,r7,4
80020c16:	12 9b       	mov	r11,r9
80020c18:	10 9c       	mov	r12,r8
80020c1a:	fe b0 fa c3 	rcall	800201a0 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM_REACHED, buf, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_CRC);
80020c1e:	ee ca 00 04 	sub	r10,r7,4
80020c22:	30 b8       	mov	r8,11
80020c24:	30 29       	mov	r9,2
80020c26:	32 eb       	mov	r11,46
80020c28:	ee fc ff f8 	ld.w	r12,r7[-8]
80020c2c:	fe b0 fa 0c 	rcall	80020044 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM_REACHED, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM_REACHED, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN);
#endif
#endif
}
80020c30:	2f dd       	sub	sp,-12
80020c32:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020c36:	00 00       	add	r0,r0
80020c38:	80 02       	ld.sh	r2,r0[0x0]
80020c3a:	0a 86       	andn	r6,r5

80020c3c <mavlink_msg_mission_ack_send>:
 * @param type See MAV_MISSION_RESULT enum
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_ack_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t type)
{
80020c3c:	eb cd 40 c0 	pushm	r6-r7,lr
80020c40:	1a 97       	mov	r7,sp
80020c42:	20 5d       	sub	sp,20
80020c44:	49 36       	lddpc	r6,80020c90 <mavlink_msg_mission_ack_send+0x54>
80020c46:	1e 26       	rsub	r6,pc
80020c48:	ef 4c ff f8 	st.w	r7[-8],r12
80020c4c:	12 98       	mov	r8,r9
80020c4e:	16 99       	mov	r9,r11
80020c50:	ef 69 ff f4 	st.b	r7[-12],r9
80020c54:	14 99       	mov	r9,r10
80020c56:	ef 69 ff f0 	st.b	r7[-16],r9
80020c5a:	ef 68 ff ec 	st.b	r7[-20],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_ACK_LEN];
	_mav_put_uint8_t(buf, 0, target_system);
80020c5e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80020c62:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 1, target_component);
80020c66:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80020c6a:	ef 68 ff fd 	st.b	r7[-3],r8
	_mav_put_uint8_t(buf, 2, type);
80020c6e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80020c72:	ef 68 ff fe 	st.b	r7[-2],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ACK, buf, MAVLINK_MSG_ID_MISSION_ACK_LEN, MAVLINK_MSG_ID_MISSION_ACK_CRC);
80020c76:	ee ca 00 04 	sub	r10,r7,4
80020c7a:	e0 68 00 99 	mov	r8,153
80020c7e:	30 39       	mov	r9,3
80020c80:	32 fb       	mov	r11,47
80020c82:	ee fc ff f8 	ld.w	r12,r7[-8]
80020c86:	fe b0 f9 df 	rcall	80020044 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ACK, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ACK_LEN, MAVLINK_MSG_ID_MISSION_ACK_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ACK, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ACK_LEN);
#endif
#endif
}
80020c8a:	2f bd       	sub	sp,-20
80020c8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020c90:	80 02       	ld.sh	r2,r0[0x0]
80020c92:	0a ca       	st.b	r5++,r10

80020c94 <mavlink_msg_mission_ack_get_target_system>:
 * @brief Get field target_system from mission_ack message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_ack_get_target_system(const mavlink_message_t* msg)
{
80020c94:	eb cd 40 80 	pushm	r7,lr
80020c98:	1a 97       	mov	r7,sp
80020c9a:	20 1d       	sub	sp,4
80020c9c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
80020ca0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020ca4:	2f 88       	sub	r8,-8
80020ca6:	11 88       	ld.ub	r8,r8[0x0]
}
80020ca8:	10 9c       	mov	r12,r8
80020caa:	2f fd       	sub	sp,-4
80020cac:	e3 cd 80 80 	ldm	sp++,r7,pc

80020cb0 <mavlink_msg_mission_ack_get_target_component>:
 * @brief Get field target_component from mission_ack message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_ack_get_target_component(const mavlink_message_t* msg)
{
80020cb0:	eb cd 40 80 	pushm	r7,lr
80020cb4:	1a 97       	mov	r7,sp
80020cb6:	20 1d       	sub	sp,4
80020cb8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
80020cbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020cc0:	2f 88       	sub	r8,-8
80020cc2:	2f f8       	sub	r8,-1
80020cc4:	11 88       	ld.ub	r8,r8[0x0]
}
80020cc6:	10 9c       	mov	r12,r8
80020cc8:	2f fd       	sub	sp,-4
80020cca:	e3 cd 80 80 	ldm	sp++,r7,pc

80020cce <mavlink_msg_mission_ack_get_type>:
 * @brief Get field type from mission_ack message
 *
 * @return See MAV_MISSION_RESULT enum
 */
static inline uint8_t mavlink_msg_mission_ack_get_type(const mavlink_message_t* msg)
{
80020cce:	eb cd 40 80 	pushm	r7,lr
80020cd2:	1a 97       	mov	r7,sp
80020cd4:	20 1d       	sub	sp,4
80020cd6:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
80020cda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020cde:	2f 88       	sub	r8,-8
80020ce0:	2f e8       	sub	r8,-2
80020ce2:	11 88       	ld.ub	r8,r8[0x0]
}
80020ce4:	10 9c       	mov	r12,r8
80020ce6:	2f fd       	sub	sp,-4
80020ce8:	e3 cd 80 80 	ldm	sp++,r7,pc

80020cec <mavlink_msg_mission_ack_decode>:
 *
 * @param msg The message to decode
 * @param mission_ack C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_ack_decode(const mavlink_message_t* msg, mavlink_mission_ack_t* mission_ack)
{
80020cec:	eb cd 40 c0 	pushm	r6-r7,lr
80020cf0:	1a 97       	mov	r7,sp
80020cf2:	20 2d       	sub	sp,8
80020cf4:	48 f6       	lddpc	r6,80020d30 <mavlink_msg_mission_ack_decode+0x44>
80020cf6:	1e 26       	rsub	r6,pc
80020cf8:	ef 4c ff fc 	st.w	r7[-4],r12
80020cfc:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_ack->target_system = mavlink_msg_mission_ack_get_target_system(msg);
80020d00:	ee fc ff fc 	ld.w	r12,r7[-4]
80020d04:	cc 8f       	rcall	80020c94 <mavlink_msg_mission_ack_get_target_system>
80020d06:	18 98       	mov	r8,r12
80020d08:	ee f9 ff f8 	ld.w	r9,r7[-8]
80020d0c:	b2 88       	st.b	r9[0x0],r8
	mission_ack->target_component = mavlink_msg_mission_ack_get_target_component(msg);
80020d0e:	ee fc ff fc 	ld.w	r12,r7[-4]
80020d12:	cc ff       	rcall	80020cb0 <mavlink_msg_mission_ack_get_target_component>
80020d14:	18 98       	mov	r8,r12
80020d16:	ee f9 ff f8 	ld.w	r9,r7[-8]
80020d1a:	b2 98       	st.b	r9[0x1],r8
	mission_ack->type = mavlink_msg_mission_ack_get_type(msg);
80020d1c:	ee fc ff fc 	ld.w	r12,r7[-4]
80020d20:	cd 7f       	rcall	80020cce <mavlink_msg_mission_ack_get_type>
80020d22:	18 98       	mov	r8,r12
80020d24:	ee f9 ff f8 	ld.w	r9,r7[-8]
80020d28:	b2 a8       	st.b	r9[0x2],r8
#else
	memcpy(mission_ack, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_ACK_LEN);
#endif
}
80020d2a:	2f ed       	sub	sp,-8
80020d2c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020d30:	80 02       	ld.sh	r2,r0[0x0]
80020d32:	0b 7a       	ld.ub	r10,--r5

80020d34 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
80020d34:	eb cd 40 80 	pushm	r7,lr
80020d38:	1a 97       	mov	r7,sp
80020d3a:	20 3d       	sub	sp,12
80020d3c:	ef 4c ff f8 	st.w	r7[-8],r12
80020d40:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
80020d44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020d48:	70 09       	ld.w	r9,r8[0x0]
80020d4a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020d4e:	70 08       	ld.w	r8,r8[0x0]
80020d50:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80020d54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020d58:	2f c8       	sub	r8,-4
80020d5a:	70 0a       	ld.w	r10,r8[0x0]
80020d5c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020d60:	2f c8       	sub	r8,-4
80020d62:	70 08       	ld.w	r8,r8[0x0]
80020d64:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80020d68:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80020d6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020d70:	2f 88       	sub	r8,-8
80020d72:	70 0a       	ld.w	r10,r8[0x0]
80020d74:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020d78:	2f 88       	sub	r8,-8
80020d7a:	70 08       	ld.w	r8,r8[0x0]
80020d7c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80020d80:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80020d84:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
80020d88:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80020d8c:	10 9c       	mov	r12,r8
80020d8e:	2f dd       	sub	sp,-12
80020d90:	e3 cd 80 80 	ldm	sp++,r7,pc

80020d94 <vector_norm_sqr>:
	result=0.5*(result+(input/result));
	return result;
}

float static inline vector_norm_sqr(float u[])
{
80020d94:	eb cd 40 c0 	pushm	r6-r7,lr
80020d98:	1a 97       	mov	r7,sp
80020d9a:	20 2d       	sub	sp,8
80020d9c:	48 96       	lddpc	r6,80020dc0 <vector_norm_sqr+0x2c>
80020d9e:	1e 26       	rsub	r6,pc
80020da0:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
80020da4:	ee fb ff f8 	ld.w	r11,r7[-8]
80020da8:	ee fc ff f8 	ld.w	r12,r7[-8]
80020dac:	cc 4f       	rcall	80020d34 <scalar_product>
80020dae:	18 98       	mov	r8,r12
80020db0:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
80020db4:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80020db8:	10 9c       	mov	r12,r8
80020dba:	2f ed       	sub	sp,-8
80020dbc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020dc0:	80 02       	ld.sh	r2,r0[0x0]
80020dc2:	0c 22       	rsub	r2,r6

80020dc4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80020dc4:	eb cd 40 c0 	pushm	r6-r7,lr
80020dc8:	1a 97       	mov	r7,sp
80020dca:	20 6d       	sub	sp,24
80020dcc:	49 e6       	lddpc	r6,80020e44 <interpolate+0x80>
80020dce:	1e 26       	rsub	r6,pc
80020dd0:	ef 4c ff f8 	st.w	r7[-8],r12
80020dd4:	ef 4b ff f4 	st.w	r7[-12],r11
80020dd8:	ef 4a ff f0 	st.w	r7[-16],r10
80020ddc:	ef 49 ff ec 	st.w	r7[-20],r9
80020de0:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80020de4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020de8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80020dec:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80020df0:	c0 41       	brne	80020df8 <interpolate+0x34>
	{
		return y1;
80020df2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80020df6:	c2 38       	rjmp	80020e3c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80020df8:	ee f9 ff e8 	ld.w	r9,r7[-24]
80020dfc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80020e00:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80020e04:	ee fa ff f8 	ld.w	r10,r7[-8]
80020e08:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020e0c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80020e10:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80020e14:	ee fa ff f0 	ld.w	r10,r7[-16]
80020e18:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020e1c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80020e20:	12 9b       	mov	r11,r9
80020e22:	10 9c       	mov	r12,r8
80020e24:	f0 16 00 08 	mcall	r6[32]
80020e28:	18 98       	mov	r8,r12
80020e2a:	10 99       	mov	r9,r8
80020e2c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80020e30:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80020e34:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80020e38:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80020e3c:	10 9c       	mov	r12,r8
80020e3e:	2f ad       	sub	sp,-24
80020e40:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020e44:	80 02       	ld.sh	r2,r0[0x0]
80020e46:	0c 52       	eor	r2,r6

80020e48 <get_thrust_from_remote>:


static float inline get_roll_from_remote()	{return rc_get_channel_neutral(RC_ROLL)*RC_ROLL_DIR * RC_SCALEFACTOR; };
static float inline get_pitch_from_remote()	{return rc_get_channel_neutral(RC_PITCH)*RC_PITCH_DIR * RC_SCALEFACTOR; };
static float inline get_yaw_from_remote()	{return rc_get_channel_neutral(RC_YAW)*RC_YAW_DIR * RC_SCALEFACTOR; };
static float inline get_thrust_from_remote()	{return rc_get_channel(RC_THROTTLE)*RC_THROTTLE_DIR*RC_SCALEFACTOR; };
80020e48:	eb cd 40 c0 	pushm	r6-r7,lr
80020e4c:	1a 97       	mov	r7,sp
80020e4e:	48 e6       	lddpc	r6,80020e84 <get_thrust_from_remote+0x3c>
80020e50:	1e 26       	rsub	r6,pc
80020e52:	30 0c       	mov	r12,0
80020e54:	f0 16 00 22 	mcall	r6[136]
80020e58:	18 98       	mov	r8,r12
80020e5a:	10 9c       	mov	r12,r8
80020e5c:	f0 16 00 1a 	mcall	r6[104]
80020e60:	30 08       	mov	r8,0
80020e62:	e0 69 e0 00 	mov	r9,57344
80020e66:	ea 19 40 75 	orh	r9,0x4075
80020e6a:	f0 16 00 0c 	mcall	r6[48]
80020e6e:	14 98       	mov	r8,r10
80020e70:	16 99       	mov	r9,r11
80020e72:	10 9a       	mov	r10,r8
80020e74:	12 9b       	mov	r11,r9
80020e76:	f0 16 00 09 	mcall	r6[36]
80020e7a:	18 98       	mov	r8,r12
80020e7c:	10 9c       	mov	r12,r8
80020e7e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020e82:	00 00       	add	r0,r0
80020e84:	80 02       	ld.sh	r2,r0[0x0]
80020e86:	0c d4       	st.w	--r6,r4

80020e88 <init_waypoint_handler>:
central_data_t *centralData;

int int_loop_count = 0;

void init_waypoint_handler()
{
80020e88:	eb cd 40 c0 	pushm	r6-r7,lr
80020e8c:	1a 97       	mov	r7,sp
80020e8e:	49 c6       	lddpc	r6,80020efc <init_waypoint_handler+0x74>
80020e90:	1e 26       	rsub	r6,pc
	start_timeout = get_millis();
80020e92:	f0 16 00 0f 	mcall	r6[60]
80020e96:	18 99       	mov	r9,r12
80020e98:	ec f8 01 84 	ld.w	r8,r6[388]
80020e9c:	91 09       	st.w	r8[0x0],r9
	timeout_max_wp = 10000;
80020e9e:	ec f8 04 34 	ld.w	r8,r6[1076]
80020ea2:	e0 69 27 10 	mov	r9,10000
80020ea6:	91 09       	st.w	r8[0x0],r9
	centralData = get_central_data();
80020ea8:	f0 16 00 33 	mcall	r6[204]
80020eac:	18 99       	mov	r9,r12
80020eae:	ec f8 00 00 	ld.w	r8,r6[0]
80020eb2:	91 09       	st.w	r8[0x0],r9
	
	centralData->critical_behavior = CLIMB_TO_SAFE_ALT;
80020eb4:	ec f8 00 00 	ld.w	r8,r6[0]
80020eb8:	70 08       	ld.w	r8,r8[0x0]
80020eba:	30 19       	mov	r9,1
80020ebc:	f1 49 0f 2c 	st.w	r8[3884],r9
	centralData->critical_init = false;
80020ec0:	ec f8 00 00 	ld.w	r8,r6[0]
80020ec4:	70 09       	ld.w	r9,r8[0x0]
80020ec6:	30 08       	mov	r8,0
80020ec8:	f3 68 0d 01 	st.b	r9[3329],r8
	centralData->critical_next_state = false;
80020ecc:	ec f8 00 00 	ld.w	r8,r6[0]
80020ed0:	70 09       	ld.w	r9,r8[0x0]
80020ed2:	30 08       	mov	r8,0
80020ed4:	f3 68 0d 02 	st.b	r9[3330],r8
	
	init_waypoint_list(centralData->waypoint_list, &centralData->number_of_waypoints);
80020ed8:	ec f8 00 00 	ld.w	r8,r6[0]
80020edc:	70 08       	ld.w	r8,r8[0x0]
80020ede:	f0 c9 f3 9c 	sub	r9,r8,-3172
80020ee2:	ec f8 00 00 	ld.w	r8,r6[0]
80020ee6:	70 08       	ld.w	r8,r8[0x0]
80020ee8:	f0 c8 f5 ac 	sub	r8,r8,-2644
80020eec:	12 9b       	mov	r11,r9
80020eee:	10 9c       	mov	r12,r8
80020ef0:	f0 16 01 62 	mcall	r6[1416]
	init_wp();
80020ef4:	f0 16 00 93 	mcall	r6[588]
}
80020ef8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020efc:	80 02       	ld.sh	r2,r0[0x0]
80020efe:	0d 14       	ld.sh	r4,r6++
80020f00:	4e 61       	lddpc	r1,80021098 <init_wp+0x178>
80020f02:	76 20       	ld.w	r0,r11[0x8]
80020f04:	69 6e       	ld.w	lr,r4[0x58]
80020f06:	69 74       	ld.w	r4,r4[0x5c]
80020f08:	0a 00       	add	r0,r5
80020f0a:	00 00       	add	r0,r0
80020f0c:	57 61       	stdsp	sp[0x1d8],r1
80020f0e:	79 70       	ld.w	r0,r12[0x5c]
80020f10:	6f 69       	ld.w	r9,r7[0x58]
80020f12:	6e 74       	ld.w	r4,r7[0x1c]
80020f14:	20 4e       	sub	lr,4
80020f16:	72 00       	ld.w	r0,r9[0x0]
80020f18:	20 73       	sub	r3,7
80020f1a:	65 74       	ld.w	r4,r2[0x5c]
80020f1c:	2c 0a       	sub	r10,-64
	...

80020f20 <init_wp>:

void init_wp()
{
80020f20:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80020f24:	1a 97       	mov	r7,sp
80020f26:	21 0d       	sub	sp,64
80020f28:	fe f6 02 fc 	ld.w	r6,pc[764]
80020f2c:	1e 26       	rsub	r6,pc
	uint8_t i,j;
	float rel_pos[3];
	
	if (int_loop_count==0)
80020f2e:	ec f8 03 64 	ld.w	r8,r6[868]
80020f32:	70 08       	ld.w	r8,r8[0x0]
80020f34:	58 08       	cp.w	r8,0
80020f36:	c0 51       	brne	80020f40 <init_wp+0x20>
	{
		dbg_print("Nav init\n");
80020f38:	fe cc 00 38 	sub	r12,pc,56
80020f3c:	f0 16 00 01 	mcall	r6[4]
	}
	int_loop_count=(int_loop_count+1)%1000;
80020f40:	ec f8 03 64 	ld.w	r8,r6[868]
80020f44:	70 08       	ld.w	r8,r8[0x0]
80020f46:	f0 c9 ff ff 	sub	r9,r8,-1
80020f4a:	e0 68 4d d3 	mov	r8,19923
80020f4e:	ea 18 10 62 	orh	r8,0x1062
80020f52:	f2 08 04 4a 	muls.d	r10,r9,r8
80020f56:	f6 0a 14 06 	asr	r10,r11,0x6
80020f5a:	f2 08 14 1f 	asr	r8,r9,0x1f
80020f5e:	f4 08 01 08 	sub	r8,r10,r8
80020f62:	e0 6a 03 e8 	mov	r10,1000
80020f66:	b5 38       	mul	r8,r10
80020f68:	f2 08 01 08 	sub	r8,r9,r8
80020f6c:	ec f9 03 64 	ld.w	r9,r6[868]
80020f70:	93 08       	st.w	r9[0x0],r8
	
	if ((centralData->number_of_waypoints > 0) && (centralData->position_estimator.init_gps_position || centralData->simulation_mode) && centralData->waypoint_receiving == false)
80020f72:	ec f8 00 00 	ld.w	r8,r6[0]
80020f76:	70 08       	ld.w	r8,r8[0x0]
80020f78:	f1 08 0c 64 	ld.sh	r8,r8[3172]
80020f7c:	58 08       	cp.w	r8,0
80020f7e:	e0 80 01 4f 	breq	8002121c <init_wp+0x2fc>
80020f82:	ec f8 00 00 	ld.w	r8,r6[0]
80020f86:	70 08       	ld.w	r8,r8[0x0]
80020f88:	f1 38 09 ac 	ld.ub	r8,r8[2476]
80020f8c:	58 08       	cp.w	r8,0
80020f8e:	c0 91       	brne	80020fa0 <init_wp+0x80>
80020f90:	ec f8 00 00 	ld.w	r8,r6[0]
80020f94:	70 08       	ld.w	r8,r8[0x0]
80020f96:	f0 f8 0d 08 	ld.w	r8,r8[3336]
80020f9a:	58 08       	cp.w	r8,0
80020f9c:	e0 80 01 40 	breq	8002121c <init_wp+0x2fc>
80020fa0:	ec f8 00 00 	ld.w	r8,r6[0]
80020fa4:	70 08       	ld.w	r8,r8[0x0]
80020fa6:	f1 38 0c fe 	ld.ub	r8,r8[3326]
80020faa:	ec 18 00 01 	eorl	r8,0x1
80020fae:	5c 58       	castu.b	r8
80020fb0:	e0 80 01 36 	breq	8002121c <init_wp+0x2fc>
	{
		for (i=0;i<centralData->number_of_waypoints;i++)
80020fb4:	30 08       	mov	r8,0
80020fb6:	ef 68 ff fe 	st.b	r7[-2],r8
80020fba:	c2 69       	rjmp	80021206 <init_wp+0x2e6>
		{
			if ((centralData->waypoint_list[i].current == 1)&&(!centralData->waypoint_set))
80020fbc:	ec f8 00 00 	ld.w	r8,r6[0]
80020fc0:	70 0a       	ld.w	r10,r8[0x0]
80020fc2:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80020fc6:	12 98       	mov	r8,r9
80020fc8:	a1 78       	lsl	r8,0x1
80020fca:	12 08       	add	r8,r9
80020fcc:	a5 68       	lsl	r8,0x4
80020fce:	f4 08 00 08 	add	r8,r10,r8
80020fd2:	f0 c8 f5 a8 	sub	r8,r8,-2648
80020fd6:	11 89       	ld.ub	r9,r8[0x0]
80020fd8:	30 18       	mov	r8,1
80020fda:	f0 09 18 00 	cp.b	r9,r8
80020fde:	e0 81 01 0f 	brne	800211fc <init_wp+0x2dc>
80020fe2:	ec f8 00 00 	ld.w	r8,r6[0]
80020fe6:	70 08       	ld.w	r8,r8[0x0]
80020fe8:	f1 38 0c fc 	ld.ub	r8,r8[3324]
80020fec:	ec 18 00 01 	eorl	r8,0x1
80020ff0:	5c 58       	castu.b	r8
80020ff2:	e0 80 01 05 	breq	800211fc <init_wp+0x2dc>
			{
				centralData->current_wp_count = i;
80020ff6:	ec f8 00 00 	ld.w	r8,r6[0]
80020ffa:	70 09       	ld.w	r9,r8[0x0]
80020ffc:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80021000:	f3 68 0c 66 	st.b	r9[3174],r8
				centralData->current_waypoint = centralData->waypoint_list[centralData->current_wp_count];
80021004:	ec f8 00 00 	ld.w	r8,r6[0]
80021008:	70 0a       	ld.w	r10,r8[0x0]
8002100a:	ec f8 00 00 	ld.w	r8,r6[0]
8002100e:	70 0b       	ld.w	r11,r8[0x0]
80021010:	ec f8 00 00 	ld.w	r8,r6[0]
80021014:	70 08       	ld.w	r8,r8[0x0]
80021016:	f1 38 0c 66 	ld.ub	r8,r8[3174]
8002101a:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
8002101e:	12 98       	mov	r8,r9
80021020:	a1 78       	lsl	r8,0x1
80021022:	12 08       	add	r8,r9
80021024:	a5 68       	lsl	r8,0x4
80021026:	f6 08 00 08 	add	r8,r11,r8
8002102a:	f0 c8 f5 ac 	sub	r8,r8,-2644
8002102e:	f4 cb f3 cc 	sub	r11,r10,-3124
80021032:	10 9a       	mov	r10,r8
80021034:	f6 c8 00 00 	sub	r8,r11,0
80021038:	f4 c9 00 00 	sub	r9,r10,0
8002103c:	72 0c       	ld.w	r12,r9[0x0]
8002103e:	91 0c       	st.w	r8[0x0],r12
80021040:	72 1c       	ld.w	r12,r9[0x4]
80021042:	91 1c       	st.w	r8[0x4],r12
80021044:	72 2c       	ld.w	r12,r9[0x8]
80021046:	91 2c       	st.w	r8[0x8],r12
80021048:	72 39       	ld.w	r9,r9[0xc]
8002104a:	91 39       	st.w	r8[0xc],r9
8002104c:	f6 c8 ff f0 	sub	r8,r11,-16
80021050:	f4 c9 ff f0 	sub	r9,r10,-16
80021054:	72 0c       	ld.w	r12,r9[0x0]
80021056:	91 0c       	st.w	r8[0x0],r12
80021058:	72 1c       	ld.w	r12,r9[0x4]
8002105a:	91 1c       	st.w	r8[0x4],r12
8002105c:	72 2c       	ld.w	r12,r9[0x8]
8002105e:	91 2c       	st.w	r8[0x8],r12
80021060:	72 39       	ld.w	r9,r9[0xc]
80021062:	91 39       	st.w	r8[0xc],r9
80021064:	f6 c8 ff e0 	sub	r8,r11,-32
80021068:	f4 c9 ff e0 	sub	r9,r10,-32
8002106c:	72 0a       	ld.w	r10,r9[0x0]
8002106e:	91 0a       	st.w	r8[0x0],r10
80021070:	72 1a       	ld.w	r10,r9[0x4]
80021072:	91 1a       	st.w	r8[0x4],r10
80021074:	72 2a       	ld.w	r10,r9[0x8]
80021076:	91 2a       	st.w	r8[0x8],r10
80021078:	72 39       	ld.w	r9,r9[0xc]
8002107a:	91 39       	st.w	r8[0xc],r9
				centralData->waypoint_coordinates = set_waypoint_from_frame(centralData->current_waypoint,centralData->position_estimator.localPosition.origin);
8002107c:	ec f8 00 00 	ld.w	r8,r6[0]
80021080:	70 05       	ld.w	r5,r8[0x0]
80021082:	ec f8 00 00 	ld.w	r8,r6[0]
80021086:	70 08       	ld.w	r8,r8[0x0]
80021088:	ec f9 00 00 	ld.w	r9,r6[0]
8002108c:	72 0e       	ld.w	lr,r9[0x0]
8002108e:	ee cc 00 40 	sub	r12,r7,64
80021092:	20 7d       	sub	sp,28
80021094:	1a 99       	mov	r9,sp
80021096:	12 9a       	mov	r10,r9
80021098:	f0 cb f6 0c 	sub	r11,r8,-2548
8002109c:	f4 c8 00 00 	sub	r8,r10,0
800210a0:	f6 c9 00 00 	sub	r9,r11,0
800210a4:	72 03       	ld.w	r3,r9[0x0]
800210a6:	91 03       	st.w	r8[0x0],r3
800210a8:	72 13       	ld.w	r3,r9[0x4]
800210aa:	91 13       	st.w	r8[0x4],r3
800210ac:	72 23       	ld.w	r3,r9[0x8]
800210ae:	91 23       	st.w	r8[0x8],r3
800210b0:	72 39       	ld.w	r9,r9[0xc]
800210b2:	91 39       	st.w	r8[0xc],r9
800210b4:	f6 e8 00 10 	ld.d	r8,r11[16]
800210b8:	f4 e9 00 10 	st.d	r10[16],r8
800210bc:	76 68       	ld.w	r8,r11[0x18]
800210be:	95 68       	st.w	r10[0x18],r8
800210c0:	20 cd       	sub	sp,48
800210c2:	1a 98       	mov	r8,sp
800210c4:	10 9b       	mov	r11,r8
800210c6:	fc ca f3 cc 	sub	r10,lr,-3124
800210ca:	f6 c8 00 00 	sub	r8,r11,0
800210ce:	f4 c9 00 00 	sub	r9,r10,0
800210d2:	72 0e       	ld.w	lr,r9[0x0]
800210d4:	91 0e       	st.w	r8[0x0],lr
800210d6:	72 1e       	ld.w	lr,r9[0x4]
800210d8:	91 1e       	st.w	r8[0x4],lr
800210da:	72 2e       	ld.w	lr,r9[0x8]
800210dc:	91 2e       	st.w	r8[0x8],lr
800210de:	72 39       	ld.w	r9,r9[0xc]
800210e0:	91 39       	st.w	r8[0xc],r9
800210e2:	f6 c8 ff f0 	sub	r8,r11,-16
800210e6:	f4 c9 ff f0 	sub	r9,r10,-16
800210ea:	72 0e       	ld.w	lr,r9[0x0]
800210ec:	91 0e       	st.w	r8[0x0],lr
800210ee:	72 1e       	ld.w	lr,r9[0x4]
800210f0:	91 1e       	st.w	r8[0x4],lr
800210f2:	72 2e       	ld.w	lr,r9[0x8]
800210f4:	91 2e       	st.w	r8[0x8],lr
800210f6:	72 39       	ld.w	r9,r9[0xc]
800210f8:	91 39       	st.w	r8[0xc],r9
800210fa:	f6 c8 ff e0 	sub	r8,r11,-32
800210fe:	f4 c9 ff e0 	sub	r9,r10,-32
80021102:	72 0a       	ld.w	r10,r9[0x0]
80021104:	91 0a       	st.w	r8[0x0],r10
80021106:	72 1a       	ld.w	r10,r9[0x4]
80021108:	91 1a       	st.w	r8[0x4],r10
8002110a:	72 2a       	ld.w	r10,r9[0x8]
8002110c:	91 2a       	st.w	r8[0x8],r10
8002110e:	72 39       	ld.w	r9,r9[0xc]
80021110:	91 39       	st.w	r8[0xc],r9
80021112:	f0 16 01 06 	mcall	r6[1048]
80021116:	2e dd       	sub	sp,-76
80021118:	ea cb f3 98 	sub	r11,r5,-3176
8002111c:	ee ca 00 40 	sub	r10,r7,64
80021120:	f6 c8 00 00 	sub	r8,r11,0
80021124:	f4 c9 00 00 	sub	r9,r10,0
80021128:	72 0c       	ld.w	r12,r9[0x0]
8002112a:	91 0c       	st.w	r8[0x0],r12
8002112c:	72 1c       	ld.w	r12,r9[0x4]
8002112e:	91 1c       	st.w	r8[0x4],r12
80021130:	72 2c       	ld.w	r12,r9[0x8]
80021132:	91 2c       	st.w	r8[0x8],r12
80021134:	72 39       	ld.w	r9,r9[0xc]
80021136:	91 39       	st.w	r8[0xc],r9
80021138:	f6 c8 ff f0 	sub	r8,r11,-16
8002113c:	f4 c9 ff f0 	sub	r9,r10,-16
80021140:	72 0c       	ld.w	r12,r9[0x0]
80021142:	91 0c       	st.w	r8[0x0],r12
80021144:	72 1c       	ld.w	r12,r9[0x4]
80021146:	91 1c       	st.w	r8[0x4],r12
80021148:	72 2c       	ld.w	r12,r9[0x8]
8002114a:	91 2c       	st.w	r8[0x8],r12
8002114c:	72 39       	ld.w	r9,r9[0xc]
8002114e:	91 39       	st.w	r8[0xc],r9
80021150:	f6 c8 ff e0 	sub	r8,r11,-32
80021154:	f4 c9 ff e0 	sub	r9,r10,-32
80021158:	72 0a       	ld.w	r10,r9[0x0]
8002115a:	91 0a       	st.w	r8[0x0],r10
8002115c:	72 1a       	ld.w	r10,r9[0x4]
8002115e:	91 1a       	st.w	r8[0x4],r10
80021160:	72 2a       	ld.w	r10,r9[0x8]
80021162:	91 2a       	st.w	r8[0x8],r10
80021164:	72 39       	ld.w	r9,r9[0xc]
80021166:	91 39       	st.w	r8[0xc],r9
				
				dbg_print("Waypoint Nr");
80021168:	fe cc 02 5c 	sub	r12,pc,604
8002116c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(i,10);
80021170:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80021174:	30 ab       	mov	r11,10
80021176:	10 9c       	mov	r12,r8
80021178:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" set,\n");
8002117c:	fe cc 02 64 	sub	r12,pc,612
80021180:	f0 16 00 01 	mcall	r6[4]
			
				centralData->waypoint_set = true;
80021184:	ec f8 00 00 	ld.w	r8,r6[0]
80021188:	70 09       	ld.w	r9,r8[0x0]
8002118a:	30 18       	mov	r8,1
8002118c:	f3 68 0c fc 	st.b	r9[3324],r8
				//waypoint_reached = false;
				
				for (j=0;j<3;j++)
80021190:	30 08       	mov	r8,0
80021192:	ef 68 ff ff 	st.b	r7[-1],r8
80021196:	c2 18       	rjmp	800211d8 <init_wp+0x2b8>
				{
					rel_pos[j] = centralData->waypoint_coordinates.pos[j]-centralData->position_estimator.localPosition.pos[j];
80021198:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002119c:	ec f9 00 00 	ld.w	r9,r6[0]
800211a0:	72 09       	ld.w	r9,r9[0x0]
800211a2:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800211a6:	f4 ca fc e6 	sub	r10,r10,-794
800211aa:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
800211ae:	ec f9 00 00 	ld.w	r9,r6[0]
800211b2:	72 09       	ld.w	r9,r9[0x0]
800211b4:	ef 3b ff ff 	ld.ub	r11,r7[-1]
800211b8:	f6 cb fd 87 	sub	r11,r11,-633
800211bc:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
800211c0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800211c4:	a3 68       	lsl	r8,0x2
800211c6:	ee 08 00 08 	add	r8,r7,r8
800211ca:	f1 49 ff f0 	st.w	r8[-16],r9
				dbg_print(" set,\n");
			
				centralData->waypoint_set = true;
				//waypoint_reached = false;
				
				for (j=0;j<3;j++)
800211ce:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800211d2:	2f f8       	sub	r8,-1
800211d4:	ef 68 ff ff 	st.b	r7[-1],r8
800211d8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800211dc:	30 28       	mov	r8,2
800211de:	f0 09 18 00 	cp.b	r9,r8
800211e2:	fe 98 ff db 	brls	80021198 <init_wp+0x278>
				{
					rel_pos[j] = centralData->waypoint_coordinates.pos[j]-centralData->position_estimator.localPosition.pos[j];
				}
				centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
800211e6:	ec f8 00 00 	ld.w	r8,r6[0]
800211ea:	70 05       	ld.w	r5,r8[0x0]
800211ec:	ee c8 00 10 	sub	r8,r7,16
800211f0:	10 9c       	mov	r12,r8
800211f2:	fe b0 fd d1 	rcall	80020d94 <vector_norm_sqr>
800211f6:	18 98       	mov	r8,r12
800211f8:	eb 48 0c f8 	st.w	r5[3320],r8
	}
	int_loop_count=(int_loop_count+1)%1000;
	
	if ((centralData->number_of_waypoints > 0) && (centralData->position_estimator.init_gps_position || centralData->simulation_mode) && centralData->waypoint_receiving == false)
	{
		for (i=0;i<centralData->number_of_waypoints;i++)
800211fc:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80021200:	2f f8       	sub	r8,-1
80021202:	ef 68 ff fe 	st.b	r7[-2],r8
80021206:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8002120a:	ec f8 00 00 	ld.w	r8,r6[0]
8002120e:	70 08       	ld.w	r8,r8[0x0]
80021210:	f1 08 0c 64 	ld.sh	r8,r8[3172]
80021214:	f0 09 19 00 	cp.h	r9,r8
80021218:	fe 93 fe d2 	brlo	80020fbc <init_wp+0x9c>
				}
				centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
			}
		}
	}
}
8002121c:	2f 0d       	sub	sp,-64
8002121e:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80021222:	00 00       	add	r0,r0
80021224:	80 02       	ld.sh	r2,r0[0x0]
80021226:	0d b0       	ld.ub	r0,r6[0x3]
80021228:	4e 75       	lddpc	r5,800213c4 <init_waypoint_list+0x17e>
8002122a:	6d 62       	ld.w	r2,r6[0x58]
8002122c:	65 72       	ld.w	r2,r2[0x5c]
8002122e:	20 6f       	sub	pc,6
80021230:	66 20       	ld.w	r0,r3[0x8]
80021232:	57 61       	stdsp	sp[0x1d8],r1
80021234:	79 70       	ld.w	r0,r12[0x5c]
80021236:	6f 69       	ld.w	r9,r7[0x58]
80021238:	6e 74       	ld.w	r4,r7[0x1c]
8002123a:	20 6f       	sub	pc,6
8002123c:	6e 62       	ld.w	r2,r7[0x18]
8002123e:	6f 61       	ld.w	r1,r7[0x58]
80021240:	72 64       	ld.w	r4,r9[0x18]
80021242:	3a 00       	mov	r0,-96
80021244:	0a 00       	add	r0,r5

80021246 <init_waypoint_list>:


void init_waypoint_list(waypoint_struct waypoint_list[], uint16_t* number_of_waypoints)
{
80021246:	eb cd 40 c0 	pushm	r6-r7,lr
8002124a:	1a 97       	mov	r7,sp
8002124c:	20 ed       	sub	sp,56
8002124e:	fe f6 03 1a 	ld.w	r6,pc[794]
80021252:	1e 26       	rsub	r6,pc
80021254:	ef 4c ff cc 	st.w	r7[-52],r12
80021258:	ef 4b ff c8 	st.w	r7[-56],r11
	
	
	// Visit https://code.google.com/p/ardupilot-mega/wiki/MAVLink to have a description of all messages (or common.h)
	waypoint_struct waypoint;
	*number_of_waypoints = 4;
8002125c:	ee f9 ff c8 	ld.w	r9,r7[-56]
80021260:	30 48       	mov	r8,4
80021262:	b2 08       	st.h	r9[0x0],r8
	
	num_waypoint_onboard = *number_of_waypoints;
80021264:	ee f8 ff c8 	ld.w	r8,r7[-56]
80021268:	90 08       	ld.sh	r8,r8[0x0]
8002126a:	ec f9 01 28 	ld.w	r9,r6[296]
8002126e:	b2 08       	st.h	r9[0x0],r8
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
80021270:	30 18       	mov	r8,1
80021272:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 1;
80021276:	30 18       	mov	r8,1
80021278:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
8002127c:	30 38       	mov	r8,3
8002127e:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
80021282:	31 08       	mov	r8,16
80021284:	ef 58 ff d2 	st.h	r7[-46],r8
	
	waypoint.x =  465185223.6174 / 1.0e7f; // convert to deg
80021288:	e0 68 f5 80 	mov	r8,62848
8002128c:	ea 18 f0 d4 	orh	r8,0xf0d4
80021290:	e0 69 42 5e 	mov	r9,16990
80021294:	ea 19 40 47 	orh	r9,0x4047
80021298:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65670560 / 1.0e7f; // convert to deg
8002129c:	fc 18 60 00 	movh	r8,0x6000
800212a0:	e0 69 44 aa 	mov	r9,17578
800212a4:	ea 19 40 1a 	orh	r9,0x401a
800212a8:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 20; //m
800212ac:	30 08       	mov	r8,0
800212ae:	fc 19 40 34 	movh	r9,0x4034
800212b2:	ee e9 ff f8 	st.d	r7[-8],r8
	
	waypoint.param1 = 10; // Hold time in decimal seconds
800212b6:	fc 18 41 20 	movh	r8,0x4120
800212ba:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 2; // Acceptance radius in meters
800212be:	fc 18 40 00 	movh	r8,0x4000
800212c2:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
800212c6:	30 08       	mov	r8,0
800212c8:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
800212cc:	fc 18 42 b4 	movh	r8,0x42b4
800212d0:	ef 48 ff e4 	st.w	r7[-28],r8
	
	waypoint_list[0] = waypoint;
800212d4:	ee f8 ff cc 	ld.w	r8,r7[-52]
800212d8:	10 9b       	mov	r11,r8
800212da:	ee ca 00 30 	sub	r10,r7,48
800212de:	f6 c8 00 00 	sub	r8,r11,0
800212e2:	f4 c9 00 00 	sub	r9,r10,0
800212e6:	72 0c       	ld.w	r12,r9[0x0]
800212e8:	91 0c       	st.w	r8[0x0],r12
800212ea:	72 1c       	ld.w	r12,r9[0x4]
800212ec:	91 1c       	st.w	r8[0x4],r12
800212ee:	72 2c       	ld.w	r12,r9[0x8]
800212f0:	91 2c       	st.w	r8[0x8],r12
800212f2:	72 39       	ld.w	r9,r9[0xc]
800212f4:	91 39       	st.w	r8[0xc],r9
800212f6:	f6 c8 ff f0 	sub	r8,r11,-16
800212fa:	f4 c9 ff f0 	sub	r9,r10,-16
800212fe:	72 0c       	ld.w	r12,r9[0x0]
80021300:	91 0c       	st.w	r8[0x0],r12
80021302:	72 1c       	ld.w	r12,r9[0x4]
80021304:	91 1c       	st.w	r8[0x4],r12
80021306:	72 2c       	ld.w	r12,r9[0x8]
80021308:	91 2c       	st.w	r8[0x8],r12
8002130a:	72 39       	ld.w	r9,r9[0xc]
8002130c:	91 39       	st.w	r8[0xc],r9
8002130e:	f6 c8 ff e0 	sub	r8,r11,-32
80021312:	f4 c9 ff e0 	sub	r9,r10,-32
80021316:	72 0a       	ld.w	r10,r9[0x0]
80021318:	91 0a       	st.w	r8[0x0],r10
8002131a:	72 1a       	ld.w	r10,r9[0x4]
8002131c:	91 1a       	st.w	r8[0x4],r10
8002131e:	72 2a       	ld.w	r10,r9[0x8]
80021320:	91 2a       	st.w	r8[0x8],r10
80021322:	72 39       	ld.w	r9,r9[0xc]
80021324:	91 39       	st.w	r8[0xc],r9
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
80021326:	30 18       	mov	r8,1
80021328:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 0;
8002132c:	30 08       	mov	r8,0
8002132e:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
80021332:	30 38       	mov	r8,3
80021334:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
80021338:	31 08       	mov	r8,16
8002133a:	ef 58 ff d2 	st.h	r7[-46],r8
	
	waypoint.x = 465186816 / 1.0e7f; // convert to deg
8002133e:	fc 18 20 00 	movh	r8,0x2000
80021342:	e0 69 42 64 	mov	r9,16996
80021346:	ea 19 40 47 	orh	r9,0x4047
8002134a:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65670560 / 1.0e7f; // convert to deg
8002134e:	fc 18 60 00 	movh	r8,0x6000
80021352:	e0 69 44 aa 	mov	r9,17578
80021356:	ea 19 40 1a 	orh	r9,0x401a
8002135a:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 20; //m
8002135e:	30 08       	mov	r8,0
80021360:	fc 19 40 34 	movh	r9,0x4034
80021364:	ee e9 ff f8 	st.d	r7[-8],r8
	
	waypoint.param1 = 10; // Hold time in decimal seconds
80021368:	fc 18 41 20 	movh	r8,0x4120
8002136c:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 4; // Acceptance radius in meters
80021370:	fc 18 40 80 	movh	r8,0x4080
80021374:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
80021378:	30 08       	mov	r8,0
8002137a:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
8002137e:	fc 18 42 b4 	movh	r8,0x42b4
80021382:	ef 48 ff e4 	st.w	r7[-28],r8
	
	waypoint_list[1] = waypoint;
80021386:	ee f8 ff cc 	ld.w	r8,r7[-52]
8002138a:	2d 08       	sub	r8,-48
8002138c:	10 9b       	mov	r11,r8
8002138e:	ee ca 00 30 	sub	r10,r7,48
80021392:	f6 c8 00 00 	sub	r8,r11,0
80021396:	f4 c9 00 00 	sub	r9,r10,0
8002139a:	72 0c       	ld.w	r12,r9[0x0]
8002139c:	91 0c       	st.w	r8[0x0],r12
8002139e:	72 1c       	ld.w	r12,r9[0x4]
800213a0:	91 1c       	st.w	r8[0x4],r12
800213a2:	72 2c       	ld.w	r12,r9[0x8]
800213a4:	91 2c       	st.w	r8[0x8],r12
800213a6:	72 39       	ld.w	r9,r9[0xc]
800213a8:	91 39       	st.w	r8[0xc],r9
800213aa:	f6 c8 ff f0 	sub	r8,r11,-16
800213ae:	f4 c9 ff f0 	sub	r9,r10,-16
800213b2:	72 0c       	ld.w	r12,r9[0x0]
800213b4:	91 0c       	st.w	r8[0x0],r12
800213b6:	72 1c       	ld.w	r12,r9[0x4]
800213b8:	91 1c       	st.w	r8[0x4],r12
800213ba:	72 2c       	ld.w	r12,r9[0x8]
800213bc:	91 2c       	st.w	r8[0x8],r12
800213be:	72 39       	ld.w	r9,r9[0xc]
800213c0:	91 39       	st.w	r8[0xc],r9
800213c2:	f6 c8 ff e0 	sub	r8,r11,-32
800213c6:	f4 c9 ff e0 	sub	r9,r10,-32
800213ca:	72 0a       	ld.w	r10,r9[0x0]
800213cc:	91 0a       	st.w	r8[0x0],r10
800213ce:	72 1a       	ld.w	r10,r9[0x4]
800213d0:	91 1a       	st.w	r8[0x4],r10
800213d2:	72 2a       	ld.w	r10,r9[0x8]
800213d4:	91 2a       	st.w	r8[0x8],r10
800213d6:	72 39       	ld.w	r9,r9[0xc]
800213d8:	91 39       	st.w	r8[0xc],r9
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
800213da:	30 18       	mov	r8,1
800213dc:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 0;
800213e0:	30 08       	mov	r8,0
800213e2:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
800213e6:	30 38       	mov	r8,3
800213e8:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
800213ec:	31 08       	mov	r8,16
800213ee:	ef 58 ff d2 	st.h	r7[-46],r8
	
	waypoint.x = 465186816 / 1.0e7f; // convert to deg
800213f2:	fc 18 20 00 	movh	r8,0x2000
800213f6:	e0 69 42 64 	mov	r9,16996
800213fa:	ea 19 40 47 	orh	r9,0x4047
800213fe:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65659084 / 1.0e7f; // convert to deg
80021402:	fc 18 80 00 	movh	r8,0x8000
80021406:	e0 69 43 7d 	mov	r9,17277
8002140a:	ea 19 40 1a 	orh	r9,0x401a
8002140e:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 40; //m
80021412:	30 08       	mov	r8,0
80021414:	fc 19 40 44 	movh	r9,0x4044
80021418:	ee e9 ff f8 	st.d	r7[-8],r8
	
	waypoint.param1 = 10; // Hold time in decimal seconds
8002141c:	fc 18 41 20 	movh	r8,0x4120
80021420:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 15; // Acceptance radius in meters
80021424:	fc 18 41 70 	movh	r8,0x4170
80021428:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
8002142c:	30 08       	mov	r8,0
8002142e:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
80021432:	fc 18 42 b4 	movh	r8,0x42b4
80021436:	ef 48 ff e4 	st.w	r7[-28],r8
	
	waypoint_list[2] = waypoint;
8002143a:	ee f8 ff cc 	ld.w	r8,r7[-52]
8002143e:	2a 08       	sub	r8,-96
80021440:	10 9b       	mov	r11,r8
80021442:	ee ca 00 30 	sub	r10,r7,48
80021446:	f6 c8 00 00 	sub	r8,r11,0
8002144a:	f4 c9 00 00 	sub	r9,r10,0
8002144e:	72 0c       	ld.w	r12,r9[0x0]
80021450:	91 0c       	st.w	r8[0x0],r12
80021452:	72 1c       	ld.w	r12,r9[0x4]
80021454:	91 1c       	st.w	r8[0x4],r12
80021456:	72 2c       	ld.w	r12,r9[0x8]
80021458:	91 2c       	st.w	r8[0x8],r12
8002145a:	72 39       	ld.w	r9,r9[0xc]
8002145c:	91 39       	st.w	r8[0xc],r9
8002145e:	f6 c8 ff f0 	sub	r8,r11,-16
80021462:	f4 c9 ff f0 	sub	r9,r10,-16
80021466:	72 0c       	ld.w	r12,r9[0x0]
80021468:	91 0c       	st.w	r8[0x0],r12
8002146a:	72 1c       	ld.w	r12,r9[0x4]
8002146c:	91 1c       	st.w	r8[0x4],r12
8002146e:	72 2c       	ld.w	r12,r9[0x8]
80021470:	91 2c       	st.w	r8[0x8],r12
80021472:	72 39       	ld.w	r9,r9[0xc]
80021474:	91 39       	st.w	r8[0xc],r9
80021476:	f6 c8 ff e0 	sub	r8,r11,-32
8002147a:	f4 c9 ff e0 	sub	r9,r10,-32
8002147e:	72 0a       	ld.w	r10,r9[0x0]
80021480:	91 0a       	st.w	r8[0x0],r10
80021482:	72 1a       	ld.w	r10,r9[0x4]
80021484:	91 1a       	st.w	r8[0x4],r10
80021486:	72 2a       	ld.w	r10,r9[0x8]
80021488:	91 2a       	st.w	r8[0x8],r10
8002148a:	72 39       	ld.w	r9,r9[0xc]
8002148c:	91 39       	st.w	r8[0xc],r9
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
8002148e:	30 18       	mov	r8,1
80021490:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 0;
80021494:	30 08       	mov	r8,0
80021496:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
8002149a:	30 38       	mov	r8,3
8002149c:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
800214a0:	31 08       	mov	r8,16
800214a2:	ef 58 ff d2 	st.h	r7[-46],r8

	waypoint.x = 465182186 / 1.0e7f; // convert to deg
800214a6:	30 08       	mov	r8,0
800214a8:	e0 69 42 55 	mov	r9,16981
800214ac:	ea 19 40 47 	orh	r9,0x4047
800214b0:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65659084 / 1.0e7f; // convert to deg
800214b4:	fc 18 80 00 	movh	r8,0x8000
800214b8:	e0 69 43 7d 	mov	r9,17277
800214bc:	ea 19 40 1a 	orh	r9,0x401a
800214c0:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 20; //m
800214c4:	30 08       	mov	r8,0
800214c6:	fc 19 40 34 	movh	r9,0x4034
800214ca:	ee e9 ff f8 	st.d	r7[-8],r8

	waypoint.param1 = 10; // Hold time in decimal seconds
800214ce:	fc 18 41 20 	movh	r8,0x4120
800214d2:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 12; // Acceptance radius in meters
800214d6:	fc 18 41 40 	movh	r8,0x4140
800214da:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
800214de:	30 08       	mov	r8,0
800214e0:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
800214e4:	fc 18 42 b4 	movh	r8,0x42b4
800214e8:	ef 48 ff e4 	st.w	r7[-28],r8

	waypoint_list[3] = waypoint;
800214ec:	ee f8 ff cc 	ld.w	r8,r7[-52]
800214f0:	f0 c8 ff 70 	sub	r8,r8,-144
800214f4:	10 9b       	mov	r11,r8
800214f6:	ee ca 00 30 	sub	r10,r7,48
800214fa:	f6 c8 00 00 	sub	r8,r11,0
800214fe:	f4 c9 00 00 	sub	r9,r10,0
80021502:	72 0c       	ld.w	r12,r9[0x0]
80021504:	91 0c       	st.w	r8[0x0],r12
80021506:	72 1c       	ld.w	r12,r9[0x4]
80021508:	91 1c       	st.w	r8[0x4],r12
8002150a:	72 2c       	ld.w	r12,r9[0x8]
8002150c:	91 2c       	st.w	r8[0x8],r12
8002150e:	72 39       	ld.w	r9,r9[0xc]
80021510:	91 39       	st.w	r8[0xc],r9
80021512:	f6 c8 ff f0 	sub	r8,r11,-16
80021516:	f4 c9 ff f0 	sub	r9,r10,-16
8002151a:	72 0c       	ld.w	r12,r9[0x0]
8002151c:	91 0c       	st.w	r8[0x0],r12
8002151e:	72 1c       	ld.w	r12,r9[0x4]
80021520:	91 1c       	st.w	r8[0x4],r12
80021522:	72 2c       	ld.w	r12,r9[0x8]
80021524:	91 2c       	st.w	r8[0x8],r12
80021526:	72 39       	ld.w	r9,r9[0xc]
80021528:	91 39       	st.w	r8[0xc],r9
8002152a:	f6 c8 ff e0 	sub	r8,r11,-32
8002152e:	f4 c9 ff e0 	sub	r9,r10,-32
80021532:	72 0a       	ld.w	r10,r9[0x0]
80021534:	91 0a       	st.w	r8[0x0],r10
80021536:	72 1a       	ld.w	r10,r9[0x4]
80021538:	91 1a       	st.w	r8[0x4],r10
8002153a:	72 2a       	ld.w	r10,r9[0x8]
8002153c:	91 2a       	st.w	r8[0x8],r10
8002153e:	72 39       	ld.w	r9,r9[0xc]
80021540:	91 39       	st.w	r8[0xc],r9
	//waypoint.param3 = 465186806 / 1.0e7f; // lat converted to deg
	//waypoint.param4 = 65659084 / 1.0e7f; // long converted to deg
	
	//waypoint_list[4] = waypoint;
	
	dbg_print("Number of Waypoint onboard:");
80021542:	fe cc 03 1a 	sub	r12,pc,794
80021546:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(num_waypoint_onboard,10);
8002154a:	ec f8 01 28 	ld.w	r8,r6[296]
8002154e:	90 08       	ld.sh	r8,r8[0x0]
80021550:	5c 78       	castu.h	r8
80021552:	30 ab       	mov	r11,10
80021554:	10 9c       	mov	r12,r8
80021556:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
8002155a:	fe cc 03 16 	sub	r12,pc,790
8002155e:	f0 16 00 01 	mcall	r6[4]
	
}
80021562:	2f 2d       	sub	sp,-56
80021564:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80021568:	80 02       	ld.sh	r2,r0[0x0]
8002156a:	10 d6       	st.w	--r8,r6
8002156c:	57 69       	stdsp	sp[0x1d8],r9
8002156e:	6c 6c       	ld.w	r12,r6[0x18]
80021570:	20 73       	sub	r3,7
80021572:	65 6e       	ld.w	lr,r2[0x58]
80021574:	64 20       	ld.w	r0,r2[0x8]
80021576:	00 00       	add	r0,r0
80021578:	20 77       	sub	r7,7
8002157a:	61 79       	ld.w	r9,r0[0x5c]
8002157c:	70 6f       	ld.w	pc,r8[0x18]
8002157e:	69 6e       	ld.w	lr,r4[0x58]
80021580:	74 73       	ld.w	r3,r10[0x1c]
80021582:	0a 00       	add	r0,r5

80021584 <send_count>:

void send_count(Mavlink_Received_t* rec, uint16_t num_of_waypoint, bool* waypoint_receiving, bool * waypoint_sending)
{
80021584:	eb cd 40 c0 	pushm	r6-r7,lr
80021588:	1a 97       	mov	r7,sp
8002158a:	20 5d       	sub	sp,20
8002158c:	4a d6       	lddpc	r6,80021640 <send_count+0xbc>
8002158e:	1e 26       	rsub	r6,pc
80021590:	ef 4c ff f8 	st.w	r7[-8],r12
80021594:	16 98       	mov	r8,r11
80021596:	ef 4a ff f0 	st.w	r7[-16],r10
8002159a:	ef 49 ff ec 	st.w	r7[-20],r9
8002159e:	ef 58 ff f4 	st.h	r7[-12],r8
	mavlink_mission_request_list_t packet;
	mavlink_msg_mission_request_list_decode(&rec->msg,&packet);
800215a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800215a6:	ee c9 00 02 	sub	r9,r7,2
800215aa:	12 9b       	mov	r11,r9
800215ac:	10 9c       	mov	r12,r8
800215ae:	fe b0 fa 44 	rcall	80020a36 <mavlink_msg_mission_request_list_decode>
	
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800215b2:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800215b6:	ec f8 00 c8 	ld.w	r8,r6[200]
800215ba:	11 88       	ld.ub	r8,r8[0x0]
{
	mavlink_mission_request_list_t packet;
	mavlink_msg_mission_request_list_decode(&rec->msg,&packet);
	
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
800215bc:	f0 09 18 00 	cp.b	r9,r8
800215c0:	c3 c1       	brne	80021638 <send_count+0xb4>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800215c2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800215c6:	ec f8 00 c8 	ld.w	r8,r6[200]
800215ca:	11 98       	ld.ub	r8,r8[0x1]
{
	mavlink_mission_request_list_t packet;
	mavlink_msg_mission_request_list_decode(&rec->msg,&packet);
	
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
800215cc:	f0 09 18 00 	cp.b	r9,r8
800215d0:	c3 41       	brne	80021638 <send_count+0xb4>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{	
		mavlink_msg_mission_count_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,num_of_waypoint);
800215d2:	ef 19 ff f4 	ld.uh	r9,r7[-12]
800215d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800215da:	11 e8       	ld.ub	r8,r8[0x6]
800215dc:	10 9a       	mov	r10,r8
800215de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800215e2:	11 d8       	ld.ub	r8,r8[0x5]
800215e4:	10 9b       	mov	r11,r8
800215e6:	30 0c       	mov	r12,0
800215e8:	fe b0 fa 44 	rcall	80020a70 <mavlink_msg_mission_count_send>
		
		if (num_of_waypoint != 0)
800215ec:	ef 09 ff f4 	ld.sh	r9,r7[-12]
800215f0:	30 08       	mov	r8,0
800215f2:	f0 09 19 00 	cp.h	r9,r8
800215f6:	c0 f0       	breq	80021614 <send_count+0x90>
		{
			*waypoint_sending = true;
800215f8:	ee f9 ff ec 	ld.w	r9,r7[-20]
800215fc:	30 18       	mov	r8,1
800215fe:	b2 88       	st.b	r9[0x0],r8
			*waypoint_receiving = false;
80021600:	ee f9 ff f0 	ld.w	r9,r7[-16]
80021604:	30 08       	mov	r8,0
80021606:	b2 88       	st.b	r9[0x0],r8
			start_timeout = get_millis();
80021608:	f0 16 00 0f 	mcall	r6[60]
8002160c:	18 99       	mov	r9,r12
8002160e:	ec f8 01 84 	ld.w	r8,r6[388]
80021612:	91 09       	st.w	r8[0x0],r9
		}
		
		sending_wp_num = 0;
80021614:	ec f8 00 ac 	ld.w	r8,r6[172]
80021618:	30 09       	mov	r9,0
8002161a:	91 09       	st.w	r8[0x0],r9
		dbg_print("Will send ");
8002161c:	fe cc 00 b0 	sub	r12,pc,176
80021620:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(num_of_waypoint,10);
80021624:	ef 18 ff f4 	ld.uh	r8,r7[-12]
80021628:	30 ab       	mov	r11,10
8002162a:	10 9c       	mov	r12,r8
8002162c:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" waypoints\n");
80021630:	fe cc 00 b8 	sub	r12,pc,184
80021634:	f0 16 00 01 	mcall	r6[4]
	}
}
80021638:	2f bd       	sub	sp,-20
8002163a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002163e:	00 00       	add	r0,r0
80021640:	80 02       	ld.sh	r2,r0[0x0]
80021642:	14 12       	sub	r2,r10
80021644:	41 73       	lddsp	r3,sp[0x5c]
80021646:	6b 69       	ld.w	r9,r5[0x58]
80021648:	6e 67       	ld.w	r7,r7[0x18]
8002164a:	20 66       	sub	r6,6
8002164c:	6f 72       	ld.w	r2,r7[0x5c]
8002164e:	20 77       	sub	r7,7
80021650:	61 79       	ld.w	r9,r0[0x5c]
80021652:	70 6f       	ld.w	pc,r8[0x18]
80021654:	69 6e       	ld.w	lr,r4[0x58]
80021656:	74 20       	ld.w	r0,r10[0x8]
80021658:	6e 75       	ld.w	r5,r7[0x1c]
8002165a:	6d 62       	ld.w	r2,r6[0x58]
8002165c:	65 72       	ld.w	r2,r2[0x5c]
8002165e:	20 00       	sub	r0,0
80021660:	53 65       	stdsp	sp[0xd8],r5
80021662:	6e 64       	ld.w	r4,r7[0x18]
80021664:	69 6e       	ld.w	lr,r4[0x58]
80021666:	67 20       	ld.w	r0,r3[0x48]
80021668:	77 61       	ld.w	r1,r11[0x58]
8002166a:	79 70       	ld.w	r0,r12[0x5c]
8002166c:	6f 69       	ld.w	r9,r7[0x58]
8002166e:	6e 74       	ld.w	r4,r7[0x1c]
80021670:	20 00       	sub	r0,0

80021672 <send_waypoint>:

void send_waypoint(Mavlink_Received_t* rec, waypoint_struct waypoint[], uint16_t num_of_waypoint, bool* waypoint_sending)
{
80021672:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80021676:	1a 97       	mov	r7,sp
80021678:	20 9d       	sub	sp,36
8002167a:	fe f6 02 62 	ld.w	r6,pc[610]
8002167e:	1e 26       	rsub	r6,pc
80021680:	ef 4c ff f8 	st.w	r7[-8],r12
80021684:	ef 4b ff f4 	st.w	r7[-12],r11
80021688:	14 98       	mov	r8,r10
8002168a:	ef 49 ff ec 	st.w	r7[-20],r9
8002168e:	ef 58 ff f0 	st.h	r7[-16],r8
	if (*waypoint_sending)
80021692:	ee f8 ff ec 	ld.w	r8,r7[-20]
80021696:	11 88       	ld.ub	r8,r8[0x0]
80021698:	58 08       	cp.w	r8,0
8002169a:	e0 80 01 1e 	breq	800218d6 <send_waypoint+0x264>
	{
		mavlink_mission_request_t packet;
		mavlink_msg_mission_request_decode(&rec->msg,&packet);
8002169e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800216a2:	ee c9 00 04 	sub	r9,r7,4
800216a6:	12 9b       	mov	r11,r9
800216a8:	10 9c       	mov	r12,r8
800216aa:	fe b0 f9 07 	rcall	800208b8 <mavlink_msg_mission_request_decode>
		
		dbg_print("Asking for waypoint number ");
800216ae:	fe cc 00 6a 	sub	r12,pc,106
800216b2:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.seq,10);
800216b6:	ef 08 ff fc 	ld.sh	r8,r7[-4]
800216ba:	5c 78       	castu.h	r8
800216bc:	30 ab       	mov	r11,10
800216be:	10 9c       	mov	r12,r8
800216c0:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
800216c4:	fe cc 04 80 	sub	r12,pc,1152
800216c8:	f0 16 00 01 	mcall	r6[4]
		
		// Check if this message is for this system and subsystem
		if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
		&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800216cc:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800216d0:	ec f8 00 c8 	ld.w	r8,r6[200]
800216d4:	11 88       	ld.ub	r8,r8[0x0]
		dbg_print("Asking for waypoint number ");
		dbg_print_num(packet.seq,10);
		dbg_print("\n");
		
		// Check if this message is for this system and subsystem
		if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
800216d6:	f0 09 18 00 	cp.b	r9,r8
800216da:	e0 81 00 fe 	brne	800218d6 <send_waypoint+0x264>
		&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800216de:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800216e2:	ec f8 00 c8 	ld.w	r8,r6[200]
800216e6:	11 98       	ld.ub	r8,r8[0x1]
		dbg_print("Asking for waypoint number ");
		dbg_print_num(packet.seq,10);
		dbg_print("\n");
		
		// Check if this message is for this system and subsystem
		if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
800216e8:	f0 09 18 00 	cp.b	r9,r8
800216ec:	e0 81 00 f5 	brne	800218d6 <send_waypoint+0x264>
		&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
		{
			sending_wp_num = packet.seq;
800216f0:	ef 08 ff fc 	ld.sh	r8,r7[-4]
800216f4:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800216f8:	ec f8 00 ac 	ld.w	r8,r6[172]
800216fc:	91 09       	st.w	r8[0x0],r9
			if (sending_wp_num < num_of_waypoint)
800216fe:	ef 19 ff f0 	ld.uh	r9,r7[-16]
80021702:	ec f8 00 ac 	ld.w	r8,r6[172]
80021706:	70 08       	ld.w	r8,r8[0x0]
80021708:	10 39       	cp.w	r9,r8
8002170a:	e0 8a 00 e6 	brle	800218d6 <send_waypoint+0x264>
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
8002170e:	ec f8 00 ac 	ld.w	r8,r6[172]
80021712:	70 08       	ld.w	r8,r8[0x0]
80021714:	10 99       	mov	r9,r8
80021716:	12 98       	mov	r8,r9
80021718:	a1 78       	lsl	r8,0x1
8002171a:	12 08       	add	r8,r9
8002171c:	a5 68       	lsl	r8,0x4
8002171e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80021722:	f2 08 00 08 	add	r8,r9,r8
80021726:	f0 e8 00 28 	ld.d	r8,r8[40]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8002172a:	10 9a       	mov	r10,r8
8002172c:	12 9b       	mov	r11,r9
8002172e:	f0 16 00 09 	mcall	r6[36]
80021732:	18 95       	mov	r5,r12
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
80021734:	ec f8 00 ac 	ld.w	r8,r6[172]
80021738:	70 08       	ld.w	r8,r8[0x0]
8002173a:	10 99       	mov	r9,r8
8002173c:	12 98       	mov	r8,r9
8002173e:	a1 78       	lsl	r8,0x1
80021740:	12 08       	add	r8,r9
80021742:	a5 68       	lsl	r8,0x4
80021744:	ee f9 ff f4 	ld.w	r9,r7[-12]
80021748:	f2 08 00 08 	add	r8,r9,r8
8002174c:	f0 e8 00 20 	ld.d	r8,r8[32]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
80021750:	10 9a       	mov	r10,r8
80021752:	12 9b       	mov	r11,r9
80021754:	f0 16 00 09 	mcall	r6[36]
80021758:	ef 4c ff dc 	st.w	r7[-36],r12
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
8002175c:	ec f8 00 ac 	ld.w	r8,r6[172]
80021760:	70 08       	ld.w	r8,r8[0x0]
80021762:	10 99       	mov	r9,r8
80021764:	12 98       	mov	r8,r9
80021766:	a1 78       	lsl	r8,0x1
80021768:	12 08       	add	r8,r9
8002176a:	a5 68       	lsl	r8,0x4
8002176c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80021770:	f2 08 00 08 	add	r8,r9,r8
80021774:	f0 e8 00 18 	ld.d	r8,r8[24]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
80021778:	10 9a       	mov	r10,r8
8002177a:	12 9b       	mov	r11,r9
8002177c:	f0 16 00 09 	mcall	r6[36]
80021780:	ef 4c ff e0 	st.w	r7[-32],r12
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
80021784:	ec f8 00 ac 	ld.w	r8,r6[172]
80021788:	70 08       	ld.w	r8,r8[0x0]
8002178a:	10 99       	mov	r9,r8
8002178c:	12 98       	mov	r8,r9
8002178e:	a1 78       	lsl	r8,0x1
80021790:	12 08       	add	r8,r9
80021792:	a5 68       	lsl	r8,0x4
80021794:	ee f9 ff f4 	ld.w	r9,r7[-12]
80021798:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8002179c:	70 58       	ld.w	r8,r8[0x14]
8002179e:	ef 48 ff e4 	st.w	r7[-28],r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
800217a2:	ec f8 00 ac 	ld.w	r8,r6[172]
800217a6:	70 08       	ld.w	r8,r8[0x0]
800217a8:	10 99       	mov	r9,r8
800217aa:	12 98       	mov	r8,r9
800217ac:	a1 78       	lsl	r8,0x1
800217ae:	12 08       	add	r8,r9
800217b0:	a5 68       	lsl	r8,0x4
800217b2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800217b6:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800217ba:	70 48       	ld.w	r8,r8[0x10]
800217bc:	ef 48 ff e8 	st.w	r7[-24],r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
800217c0:	ec f8 00 ac 	ld.w	r8,r6[172]
800217c4:	70 08       	ld.w	r8,r8[0x0]
800217c6:	10 99       	mov	r9,r8
800217c8:	12 98       	mov	r8,r9
800217ca:	a1 78       	lsl	r8,0x1
800217cc:	12 08       	add	r8,r9
800217ce:	a5 68       	lsl	r8,0x4
800217d0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800217d4:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800217d8:	70 30       	ld.w	r0,r8[0xc]
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
800217da:	ec f8 00 ac 	ld.w	r8,r6[172]
800217de:	70 08       	ld.w	r8,r8[0x0]
800217e0:	10 99       	mov	r9,r8
800217e2:	12 98       	mov	r8,r9
800217e4:	a1 78       	lsl	r8,0x1
800217e6:	12 08       	add	r8,r9
800217e8:	a5 68       	lsl	r8,0x4
800217ea:	ee f9 ff f4 	ld.w	r9,r7[-12]
800217ee:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800217f2:	70 21       	ld.w	r1,r8[0x8]
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
800217f4:	ec f8 00 ac 	ld.w	r8,r6[172]
800217f8:	70 08       	ld.w	r8,r8[0x0]
800217fa:	10 99       	mov	r9,r8
800217fc:	12 98       	mov	r8,r9
800217fe:	a1 78       	lsl	r8,0x1
80021800:	12 08       	add	r8,r9
80021802:	a5 68       	lsl	r8,0x4
80021804:	ee f9 ff f4 	ld.w	r9,r7[-12]
80021808:	f2 08 00 08 	add	r8,r9,r8
8002180c:	11 d8       	ld.ub	r8,r8[0x5]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8002180e:	10 92       	mov	r2,r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
80021810:	ec f8 00 ac 	ld.w	r8,r6[172]
80021814:	70 08       	ld.w	r8,r8[0x0]
80021816:	10 99       	mov	r9,r8
80021818:	12 98       	mov	r8,r9
8002181a:	a1 78       	lsl	r8,0x1
8002181c:	12 08       	add	r8,r9
8002181e:	a5 68       	lsl	r8,0x4
80021820:	ee f9 ff f4 	ld.w	r9,r7[-12]
80021824:	f2 08 00 08 	add	r8,r9,r8
80021828:	11 c8       	ld.ub	r8,r8[0x4]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8002182a:	10 93       	mov	r3,r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
8002182c:	ec f8 00 ac 	ld.w	r8,r6[172]
80021830:	70 08       	ld.w	r8,r8[0x0]
80021832:	10 99       	mov	r9,r8
80021834:	12 98       	mov	r8,r9
80021836:	a1 78       	lsl	r8,0x1
80021838:	12 08       	add	r8,r9
8002183a:	a5 68       	lsl	r8,0x4
8002183c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80021840:	f2 08 00 08 	add	r8,r9,r8
80021844:	90 18       	ld.sh	r8,r8[0x2]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
80021846:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
8002184a:	ec f8 00 ac 	ld.w	r8,r6[172]
8002184e:	70 08       	ld.w	r8,r8[0x0]
80021850:	10 99       	mov	r9,r8
80021852:	12 98       	mov	r8,r9
80021854:	a1 78       	lsl	r8,0x1
80021856:	12 08       	add	r8,r9
80021858:	a5 68       	lsl	r8,0x4
8002185a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002185e:	f2 08 00 08 	add	r8,r9,r8
80021862:	11 88       	ld.ub	r8,r8[0x0]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
80021864:	10 9c       	mov	r12,r8
80021866:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8002186a:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8002186e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021872:	11 e8       	ld.ub	r8,r8[0x6]
80021874:	10 9a       	mov	r10,r8
80021876:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002187a:	11 d8       	ld.ub	r8,r8[0x5]
8002187c:	10 9b       	mov	r11,r8
8002187e:	1a d5       	st.w	--sp,r5
80021880:	ee f8 ff dc 	ld.w	r8,r7[-36]
80021884:	1a d8       	st.w	--sp,r8
80021886:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002188a:	1a d8       	st.w	--sp,r8
8002188c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80021890:	1a d8       	st.w	--sp,r8
80021892:	ee f8 ff e8 	ld.w	r8,r7[-24]
80021896:	1a d8       	st.w	--sp,r8
80021898:	1a d0       	st.w	--sp,r0
8002189a:	1a d1       	st.w	--sp,r1
8002189c:	1a d2       	st.w	--sp,r2
8002189e:	1a d3       	st.w	--sp,r3
800218a0:	1a de       	st.w	--sp,lr
800218a2:	18 98       	mov	r8,r12
800218a4:	30 0c       	mov	r12,0
800218a6:	fe b0 f5 9f 	rcall	800203e4 <mavlink_msg_mission_item_send>
800218aa:	2f 6d       	sub	sp,-40
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
				
				dbg_print("Sending waypoint ");
800218ac:	fe cc 02 4c 	sub	r12,pc,588
800218b0:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(sending_wp_num, 10);
800218b4:	ec f8 00 ac 	ld.w	r8,r6[172]
800218b8:	70 08       	ld.w	r8,r8[0x0]
800218ba:	30 ab       	mov	r11,10
800218bc:	10 9c       	mov	r12,r8
800218be:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
800218c2:	fe cc 06 7e 	sub	r12,pc,1662
800218c6:	f0 16 00 01 	mcall	r6[4]
				
				start_timeout = get_millis();
800218ca:	f0 16 00 0f 	mcall	r6[60]
800218ce:	18 99       	mov	r9,r12
800218d0:	ec f8 01 84 	ld.w	r8,r6[388]
800218d4:	91 09       	st.w	r8[0x0],r9
				
				//sending_wp_num += 1;
			}			
		}
	}	
}
800218d6:	2f 7d       	sub	sp,-36
800218d8:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
800218dc:	80 02       	ld.sh	r2,r0[0x0]
800218de:	15 02       	ld.w	r2,r10++
800218e0:	41 63       	lddsp	r3,sp[0x58]
800218e2:	6b 6e       	ld.w	lr,r5[0x58]
800218e4:	6f 77       	ld.w	r7,r7[0x5c]
800218e6:	6c 65       	ld.w	r5,r6[0x18]
800218e8:	64 67       	ld.w	r7,r2[0x18]
800218ea:	6d 65       	ld.w	r5,r6[0x58]
800218ec:	6e 74       	ld.w	r4,r7[0x1c]
800218ee:	20 72       	sub	r2,7
800218f0:	65 63       	ld.w	r3,r2[0x58]
800218f2:	65 69       	ld.w	r9,r2[0x58]
800218f4:	76 65       	ld.w	r5,r11[0x18]
800218f6:	64 2c       	ld.w	r12,r2[0x8]
800218f8:	20 65       	sub	r5,6
800218fa:	6e 64       	ld.w	r4,r7[0x18]
800218fc:	20 6f       	sub	pc,6
800218fe:	66 20       	ld.w	r0,r3[0x8]
80021900:	77 61       	ld.w	r1,r11[0x58]
80021902:	79 70       	ld.w	r0,r12[0x5c]
80021904:	6f 69       	ld.w	r9,r7[0x58]
80021906:	6e 74       	ld.w	r4,r7[0x1c]
80021908:	20 73       	sub	r3,7
8002190a:	65 6e       	ld.w	lr,r2[0x58]
8002190c:	64 69       	ld.w	r9,r2[0x18]
8002190e:	6e 67       	ld.w	r7,r7[0x18]
80021910:	2e 0a       	sub	r10,-32
	...

80021914 <receive_ack_msg>:

void receive_ack_msg(Mavlink_Received_t* rec, bool* waypoint_sending)
{
80021914:	eb cd 40 c0 	pushm	r6-r7,lr
80021918:	1a 97       	mov	r7,sp
8002191a:	20 3d       	sub	sp,12
8002191c:	49 76       	lddpc	r6,80021978 <receive_ack_msg+0x64>
8002191e:	1e 26       	rsub	r6,pc
80021920:	ef 4c ff f8 	st.w	r7[-8],r12
80021924:	ef 4b ff f4 	st.w	r7[-12],r11
	mavlink_mission_ack_t packet;
	mavlink_msg_mission_ack_decode(&rec->msg, &packet);
80021928:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002192c:	ee c9 00 03 	sub	r9,r7,3
80021930:	12 9b       	mov	r11,r9
80021932:	10 9c       	mov	r12,r8
80021934:	fe b0 f9 dc 	rcall	80020cec <mavlink_msg_mission_ack_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80021938:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8002193c:	ec f8 00 c8 	ld.w	r8,r6[200]
80021940:	11 88       	ld.ub	r8,r8[0x0]
void receive_ack_msg(Mavlink_Received_t* rec, bool* waypoint_sending)
{
	mavlink_mission_ack_t packet;
	mavlink_msg_mission_ack_decode(&rec->msg, &packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80021942:	f0 09 18 00 	cp.b	r9,r8
80021946:	c1 51       	brne	80021970 <receive_ack_msg+0x5c>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80021948:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8002194c:	ec f8 00 c8 	ld.w	r8,r6[200]
80021950:	11 98       	ld.ub	r8,r8[0x1]
void receive_ack_msg(Mavlink_Received_t* rec, bool* waypoint_sending)
{
	mavlink_mission_ack_t packet;
	mavlink_msg_mission_ack_decode(&rec->msg, &packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80021952:	f0 09 18 00 	cp.b	r9,r8
80021956:	c0 d1       	brne	80021970 <receive_ack_msg+0x5c>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		*waypoint_sending = false;
80021958:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002195c:	30 08       	mov	r8,0
8002195e:	b2 88       	st.b	r9[0x0],r8
		sending_wp_num = 0;
80021960:	ec f8 00 ac 	ld.w	r8,r6[172]
80021964:	30 09       	mov	r9,0
80021966:	91 09       	st.w	r8[0x0],r9
		dbg_print("Acknowledgment received, end of waypoint sending.\n");
80021968:	fe cc 00 88 	sub	r12,pc,136
8002196c:	f0 16 00 01 	mcall	r6[4]
	}
}
80021970:	2f dd       	sub	sp,-12
80021972:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80021976:	00 00       	add	r0,r0
80021978:	80 02       	ld.sh	r2,r0[0x0]
8002197a:	17 a2       	ld.ub	r2,r11[0x2]
8002197c:	52 65       	stdsp	sp[0x98],r5
8002197e:	63 65       	ld.w	r5,r1[0x58]
80021980:	69 76       	ld.w	r6,r4[0x5c]
80021982:	69 6e       	ld.w	lr,r4[0x58]
80021984:	67 20       	ld.w	r0,r3[0x48]
80021986:	00 00       	add	r0,r0
80021988:	20 6e       	sub	lr,6
8002198a:	65 77       	ld.w	r7,r2[0x5c]
8002198c:	20 77       	sub	r7,7
8002198e:	61 79       	ld.w	r9,r0[0x5c]
80021990:	70 6f       	ld.w	pc,r8[0x18]
80021992:	69 6e       	ld.w	lr,r4[0x58]
80021994:	74 73       	ld.w	r3,r10[0x1c]
80021996:	2e 20       	sub	r0,-30
80021998:	00 00       	add	r0,r0
8002199a:	00 00       	add	r0,r0
8002199c:	4e 65       	lddpc	r5,80021b34 <receive_count+0x162>
8002199e:	77 20       	ld.w	r0,r11[0x48]
800219a0:	74 6f       	ld.w	pc,r10[0x18]
800219a2:	74 61       	ld.w	r1,r10[0x18]
800219a4:	6c 20       	ld.w	r0,r6[0x8]
800219a6:	6e 75       	ld.w	r5,r7[0x1c]
800219a8:	6d 62       	ld.w	r2,r6[0x58]
800219aa:	65 72       	ld.w	r2,r2[0x5c]
800219ac:	20 6f       	sub	pc,6
800219ae:	66 20       	ld.w	r0,r3[0x8]
800219b0:	77 61       	ld.w	r1,r11[0x58]
800219b2:	79 70       	ld.w	r0,r12[0x5c]
800219b4:	6f 69       	ld.w	r9,r7[0x58]
800219b6:	6e 74       	ld.w	r4,r7[0x1c]
800219b8:	73 3a       	ld.w	r10,r9[0x4c]
800219ba:	00 00       	add	r0,r0
800219bc:	41 73       	lddsp	r3,sp[0x5c]
800219be:	6b 69       	ld.w	r9,r5[0x58]
800219c0:	6e 67       	ld.w	r7,r7[0x18]
800219c2:	20 66       	sub	r6,6
800219c4:	6f 72       	ld.w	r2,r7[0x5c]
800219c6:	20 77       	sub	r7,7
800219c8:	61 79       	ld.w	r9,r0[0x5c]
800219ca:	70 6f       	ld.w	pc,r8[0x18]
800219cc:	69 6e       	ld.w	lr,r4[0x58]
800219ce:	74 20       	ld.w	r0,r10[0x8]
	...

800219d2 <receive_count>:

void receive_count(Mavlink_Received_t* rec, uint16_t* number_of_waypoints, bool* waypoint_receiving, bool* waypoint_sending)
{
800219d2:	eb cd 40 c0 	pushm	r6-r7,lr
800219d6:	1a 97       	mov	r7,sp
800219d8:	20 5d       	sub	sp,20
800219da:	4d 46       	lddpc	r6,80021b28 <receive_count+0x156>
800219dc:	1e 26       	rsub	r6,pc
800219de:	ef 4c ff f8 	st.w	r7[-8],r12
800219e2:	ef 4b ff f4 	st.w	r7[-12],r11
800219e6:	ef 4a ff f0 	st.w	r7[-16],r10
800219ea:	ef 49 ff ec 	st.w	r7[-20],r9
	mavlink_mission_count_t packet;
	mavlink_msg_mission_count_decode(&rec->msg, &packet);
800219ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800219f2:	ee c9 00 04 	sub	r9,r7,4
800219f6:	12 9b       	mov	r11,r9
800219f8:	10 9c       	mov	r12,r8
800219fa:	fe b0 f8 9f 	rcall	80020b38 <mavlink_msg_mission_count_decode>
	//dbg_print_num(mavlink_mission_planner.sysid,10);
	//dbg_print_num(packet.target_component,10);
	//dbg_print_num(mavlink_mission_planner.compid,10);
	//dbg_print("\n");
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800219fe:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80021a02:	ec f8 00 c8 	ld.w	r8,r6[200]
80021a06:	11 88       	ld.ub	r8,r8[0x0]
	//dbg_print_num(packet.target_system,10);
	//dbg_print_num(mavlink_mission_planner.sysid,10);
	//dbg_print_num(packet.target_component,10);
	//dbg_print_num(mavlink_mission_planner.compid,10);
	//dbg_print("\n");
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80021a08:	f0 09 18 00 	cp.b	r9,r8
80021a0c:	e0 81 00 8b 	brne	80021b22 <receive_count+0x150>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80021a10:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80021a14:	ec f8 00 c8 	ld.w	r8,r6[200]
80021a18:	11 98       	ld.ub	r8,r8[0x1]
	//dbg_print_num(packet.target_system,10);
	//dbg_print_num(mavlink_mission_planner.sysid,10);
	//dbg_print_num(packet.target_component,10);
	//dbg_print_num(mavlink_mission_planner.compid,10);
	//dbg_print("\n");
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80021a1a:	f0 09 18 00 	cp.b	r9,r8
80021a1e:	e0 81 00 82 	brne	80021b22 <receive_count+0x150>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		if (*waypoint_receiving == false)
80021a22:	ee f8 ff f0 	ld.w	r8,r7[-16]
80021a26:	11 88       	ld.ub	r8,r8[0x0]
80021a28:	ec 18 00 01 	eorl	r8,0x1
80021a2c:	5c 58       	castu.b	r8
80021a2e:	c5 a0       	breq	80021ae2 <receive_count+0x110>
		{
			// comment these lines if you want to add new waypoints to the list instead of overwriting them
			num_waypoint_onboard = 0;
80021a30:	ec f9 01 28 	ld.w	r9,r6[296]
80021a34:	30 08       	mov	r8,0
80021a36:	b2 08       	st.h	r9[0x0],r8
			*number_of_waypoints =0;
80021a38:	ee f9 ff f4 	ld.w	r9,r7[-12]
80021a3c:	30 08       	mov	r8,0
80021a3e:	b2 08       	st.h	r9[0x0],r8
			//---//
			
			if ((packet.count + *number_of_waypoints) > MAX_WAYPOINTS)
80021a40:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80021a44:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80021a48:	ee f8 ff f4 	ld.w	r8,r7[-12]
80021a4c:	90 08       	ld.sh	r8,r8[0x0]
80021a4e:	5c 78       	castu.h	r8
80021a50:	f2 08 00 08 	add	r8,r9,r8
80021a54:	58 a8       	cp.w	r8,10
80021a56:	e0 8a 00 0a 	brle	80021a6a <receive_count+0x98>
			{
				packet.count = MAX_WAYPOINTS - *number_of_waypoints;
80021a5a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80021a5e:	90 08       	ld.sh	r8,r8[0x0]
80021a60:	f0 08 11 0a 	rsub	r8,r8,10
80021a64:	5c 88       	casts.h	r8
80021a66:	ef 58 ff fc 	st.h	r7[-4],r8
			}
			*number_of_waypoints =  packet.count+ *number_of_waypoints;
80021a6a:	ef 09 ff fc 	ld.sh	r9,r7[-4]
80021a6e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80021a72:	90 08       	ld.sh	r8,r8[0x0]
80021a74:	f2 08 00 08 	add	r8,r9,r8
80021a78:	5c 88       	casts.h	r8
80021a7a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80021a7e:	b2 08       	st.h	r9[0x0],r8
			dbg_print("Receiving ");
80021a80:	fe cc 01 04 	sub	r12,pc,260
80021a84:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(packet.count,10);
80021a88:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80021a8c:	5c 78       	castu.h	r8
80021a8e:	30 ab       	mov	r11,10
80021a90:	10 9c       	mov	r12,r8
80021a92:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" new waypoints. ");
80021a96:	fe cc 01 0e 	sub	r12,pc,270
80021a9a:	f0 16 00 01 	mcall	r6[4]
			dbg_print("New total number of waypoints:");
80021a9e:	fe cc 01 02 	sub	r12,pc,258
80021aa2:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(*number_of_waypoints,10);
80021aa6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80021aaa:	90 08       	ld.sh	r8,r8[0x0]
80021aac:	5c 78       	castu.h	r8
80021aae:	30 ab       	mov	r11,10
80021ab0:	10 9c       	mov	r12,r8
80021ab2:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80021ab6:	fe cc 08 72 	sub	r12,pc,2162
80021aba:	f0 16 00 01 	mcall	r6[4]
			
			*waypoint_receiving   = true;
80021abe:	ee f9 ff f0 	ld.w	r9,r7[-16]
80021ac2:	30 18       	mov	r8,1
80021ac4:	b2 88       	st.b	r9[0x0],r8
			*waypoint_sending     = false;
80021ac6:	ee f9 ff ec 	ld.w	r9,r7[-20]
80021aca:	30 08       	mov	r8,0
80021acc:	b2 88       	st.b	r9[0x0],r8
			waypoint_request_number = 0;
80021ace:	ec f8 01 04 	ld.w	r8,r6[260]
80021ad2:	30 09       	mov	r9,0
80021ad4:	91 09       	st.w	r8[0x0],r9
			
			
			start_timeout = get_millis();
80021ad6:	f0 16 00 0f 	mcall	r6[60]
80021ada:	18 99       	mov	r9,r12
80021adc:	ec f8 01 84 	ld.w	r8,r6[388]
80021ae0:	91 09       	st.w	r8[0x0],r9
		}
		
		mavlink_msg_mission_request_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,waypoint_request_number);
80021ae2:	ec f8 01 04 	ld.w	r8,r6[260]
80021ae6:	70 08       	ld.w	r8,r8[0x0]
80021ae8:	5c 88       	casts.h	r8
80021aea:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80021aee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021af2:	11 e8       	ld.ub	r8,r8[0x6]
80021af4:	10 9a       	mov	r10,r8
80021af6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021afa:	11 d8       	ld.ub	r8,r8[0x5]
80021afc:	10 9b       	mov	r11,r8
80021afe:	30 0c       	mov	r12,0
80021b00:	fe b0 f6 78 	rcall	800207f0 <mavlink_msg_mission_request_send>
		
		dbg_print("Asking for waypoint ");
80021b04:	fe cc 01 48 	sub	r12,pc,328
80021b08:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(waypoint_request_number,10);
80021b0c:	ec f8 01 04 	ld.w	r8,r6[260]
80021b10:	70 08       	ld.w	r8,r8[0x0]
80021b12:	30 ab       	mov	r11,10
80021b14:	10 9c       	mov	r12,r8
80021b16:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");	
80021b1a:	fe cc 08 d6 	sub	r12,pc,2262
80021b1e:	f0 16 00 01 	mcall	r6[4]
	}
	
}
80021b22:	2f bd       	sub	sp,-20
80021b24:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80021b28:	80 02       	ld.sh	r2,r0[0x0]
80021b2a:	18 60       	and	r0,r12
80021b2c:	4e 65       	lddpc	r5,80021cc4 <receive_waypoint+0x102>
80021b2e:	77 20       	ld.w	r0,r11[0x48]
80021b30:	77 61       	ld.w	r1,r11[0x58]
80021b32:	79 70       	ld.w	r0,r12[0x5c]
80021b34:	6f 69       	ld.w	r9,r7[0x58]
80021b36:	6e 74       	ld.w	r4,r7[0x1c]
80021b38:	20 72       	sub	r2,7
80021b3a:	65 63       	ld.w	r3,r2[0x58]
80021b3c:	65 69       	ld.w	r9,r2[0x58]
80021b3e:	76 65       	ld.w	r5,r11[0x18]
80021b40:	64 20       	ld.w	r0,r2[0x8]
80021b42:	00 00       	add	r0,r0
80021b44:	20 72       	sub	r2,7
80021b46:	65 71       	ld.w	r1,r2[0x5c]
80021b48:	75 65       	ld.w	r5,r10[0x58]
80021b4a:	73 74       	ld.w	r4,r9[0x5c]
80021b4c:	65 64       	ld.w	r4,r2[0x58]
80021b4e:	20 6e       	sub	lr,6
80021b50:	75 6d       	ld.w	sp,r10[0x58]
80021b52:	20 3a       	sub	r10,3
80021b54:	00 00       	add	r0,r0
80021b56:	00 00       	add	r0,r0
80021b58:	20 72       	sub	r2,7
80021b5a:	65 63       	ld.w	r3,r2[0x58]
80021b5c:	65 69       	ld.w	r9,r2[0x58]
80021b5e:	76 69       	ld.w	r9,r11[0x18]
80021b60:	6e 67       	ld.w	r7,r7[0x18]
80021b62:	20 6e       	sub	lr,6
80021b64:	75 6d       	ld.w	sp,r10[0x58]
80021b66:	20 3a       	sub	r10,3
80021b68:	00 00       	add	r0,r0
80021b6a:	00 00       	add	r0,r0
80021b6c:	52 65       	stdsp	sp[0x98],r5
80021b6e:	63 65       	ld.w	r5,r1[0x58]
80021b70:	69 76       	ld.w	r6,r4[0x5c]
80021b72:	69 6e       	ld.w	lr,r4[0x58]
80021b74:	67 20       	ld.w	r0,r3[0x48]
80021b76:	67 6f       	ld.w	pc,r3[0x58]
80021b78:	6f 64       	ld.w	r4,r7[0x58]
80021b7a:	20 77       	sub	r7,7
80021b7c:	61 79       	ld.w	r9,r0[0x5c]
80021b7e:	70 6f       	ld.w	pc,r8[0x18]
80021b80:	69 6e       	ld.w	lr,r4[0x58]
80021b82:	74 2c       	ld.w	r12,r10[0x8]
80021b84:	20 6e       	sub	lr,6
80021b86:	75 6d       	ld.w	sp,r10[0x58]
80021b88:	62 65       	ld.w	r5,r1[0x18]
80021b8a:	72 20       	ld.w	r0,r9[0x8]
80021b8c:	00 00       	add	r0,r0
80021b8e:	00 00       	add	r0,r0
80021b90:	20 6f       	sub	pc,6
80021b92:	66 20       	ld.w	r0,r3[0x8]
80021b94:	00 00       	add	r0,r0
80021b96:	00 00       	add	r0,r0
80021b98:	66 6c       	ld.w	r12,r3[0x18]
80021b9a:	69 67       	ld.w	r7,r4[0x58]
80021b9c:	68 74       	ld.w	r4,r4[0x1c]
80021b9e:	20 70       	sub	r0,7
80021ba0:	6c 61       	ld.w	r1,r6[0x18]
80021ba2:	6e 20       	ld.w	r0,r7[0x8]
80021ba4:	72 65       	ld.w	r5,r9[0x18]
80021ba6:	63 65       	ld.w	r5,r1[0x58]
80021ba8:	69 76       	ld.w	r6,r4[0x5c]
80021baa:	65 64       	ld.w	r4,r2[0x58]
80021bac:	21 0a       	sub	r10,16
80021bae:	00 00       	add	r0,r0
80021bb0:	41 63       	lddsp	r3,sp[0x58]
80021bb2:	6b 20       	ld.w	r0,r5[0x48]
80021bb4:	6e 6f       	ld.w	pc,r7[0x18]
80021bb6:	74 20       	ld.w	r0,r10[0x8]
80021bb8:	72 65       	ld.w	r5,r9[0x18]
80021bba:	63 65       	ld.w	r5,r1[0x58]
80021bbc:	69 76       	ld.w	r6,r4[0x5c]
80021bbe:	65 64       	ld.w	r4,r2[0x58]
80021bc0:	21 00       	sub	r0,16

80021bc2 <receive_waypoint>:

void receive_waypoint(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t number_of_waypoints, bool* waypoint_receiving)
{
80021bc2:	eb cd 40 c0 	pushm	r6-r7,lr
80021bc6:	1a 97       	mov	r7,sp
80021bc8:	21 bd       	sub	sp,108
80021bca:	fe f6 03 02 	ld.w	r6,pc[770]
80021bce:	1e 26       	rsub	r6,pc
80021bd0:	ef 4c ff a0 	st.w	r7[-96],r12
80021bd4:	ef 4b ff 9c 	st.w	r7[-100],r11
80021bd8:	14 98       	mov	r8,r10
80021bda:	ef 49 ff 94 	st.w	r7[-108],r9
80021bde:	ef 58 ff 98 	st.h	r7[-104],r8
	mavlink_mission_item_t packet;
	mavlink_msg_mission_item_decode(&rec->msg,&packet);
80021be2:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021be6:	ee c9 00 2c 	sub	r9,r7,44
80021bea:	12 9b       	mov	r11,r9
80021bec:	10 9c       	mov	r12,r8
80021bee:	fe b0 f5 87 	rcall	800206fc <mavlink_msg_mission_item_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80021bf2:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80021bf6:	ec f8 00 74 	ld.w	r8,r6[116]
80021bfa:	11 88       	ld.ub	r8,r8[0x0]
void receive_waypoint(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t number_of_waypoints, bool* waypoint_receiving)
{
	mavlink_mission_item_t packet;
	mavlink_msg_mission_item_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80021bfc:	f0 09 18 00 	cp.b	r9,r8
80021c00:	e0 81 01 63 	brne	80021ec6 <receive_waypoint+0x304>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80021c04:	ef 39 ff f5 	ld.ub	r9,r7[-11]
80021c08:	ec f8 00 c8 	ld.w	r8,r6[200]
80021c0c:	11 98       	ld.ub	r8,r8[0x1]
void receive_waypoint(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t number_of_waypoints, bool* waypoint_receiving)
{
	mavlink_mission_item_t packet;
	mavlink_msg_mission_item_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80021c0e:	f0 09 18 00 	cp.b	r9,r8
80021c12:	e0 81 01 5a 	brne	80021ec6 <receive_waypoint+0x304>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		start_timeout = get_millis();
80021c16:	f0 16 00 0f 	mcall	r6[60]
80021c1a:	18 99       	mov	r9,r12
80021c1c:	ec f8 01 84 	ld.w	r8,r6[388]
80021c20:	91 09       	st.w	r8[0x0],r9
		
		waypoint_struct new_waypoint;
		
		new_waypoint.wp_id = packet.command;
80021c22:	ef 08 ff f2 	ld.sh	r8,r7[-14]
80021c26:	ef 58 ff a6 	st.h	r7[-90],r8
		
		new_waypoint.x = packet.x; // longitude
80021c2a:	ee f8 ff e4 	ld.w	r8,r7[-28]
80021c2e:	10 9c       	mov	r12,r8
80021c30:	f0 16 00 02 	mcall	r6[8]
80021c34:	14 98       	mov	r8,r10
80021c36:	16 99       	mov	r9,r11
80021c38:	ee e9 ff bc 	st.d	r7[-68],r8
		new_waypoint.y = packet.y; // latitude 
80021c3c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80021c40:	10 9c       	mov	r12,r8
80021c42:	f0 16 00 02 	mcall	r6[8]
80021c46:	14 98       	mov	r8,r10
80021c48:	16 99       	mov	r9,r11
80021c4a:	ee e9 ff c4 	st.d	r7[-60],r8
		new_waypoint.z = packet.z; // altitude
80021c4e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80021c52:	10 9c       	mov	r12,r8
80021c54:	f0 16 00 02 	mcall	r6[8]
80021c58:	14 98       	mov	r8,r10
80021c5a:	16 99       	mov	r9,r11
80021c5c:	ee e9 ff cc 	st.d	r7[-52],r8
		
		new_waypoint.autocontinue = packet.autocontinue;
80021c60:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80021c64:	ef 68 ff a9 	st.b	r7[-87],r8
		new_waypoint.frame = packet.frame;
80021c68:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80021c6c:	ef 68 ff a4 	st.b	r7[-92],r8
		
		new_waypoint.current = packet.current;
80021c70:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80021c74:	ef 68 ff a8 	st.b	r7[-88],r8
		
		new_waypoint.param1 = packet.param1;
80021c78:	ee f8 ff d4 	ld.w	r8,r7[-44]
80021c7c:	ef 48 ff ac 	st.w	r7[-84],r8
		new_waypoint.param2 = packet.param2;
80021c80:	ee f8 ff d8 	ld.w	r8,r7[-40]
80021c84:	ef 48 ff b0 	st.w	r7[-80],r8
		new_waypoint.param3 = packet.param3;
80021c88:	ee f8 ff dc 	ld.w	r8,r7[-36]
80021c8c:	ef 48 ff b4 	st.w	r7[-76],r8
		new_waypoint.param4 = packet.param4;
80021c90:	ee f8 ff e0 	ld.w	r8,r7[-32]
80021c94:	ef 48 ff b8 	st.w	r7[-72],r8
		
		dbg_print("New waypoint received ");
80021c98:	fe cc 01 6c 	sub	r12,pc,364
80021c9c:	f0 16 00 01 	mcall	r6[4]
 		//dbg_print_num(packet.current,10);
 		//dbg_print(" Seq :");
 		//dbg_print_num(packet.seq,10);
		//dbg_print(" command id :");
		//dbg_print_num(packet.command,10);
		dbg_print(" requested num :");
80021ca0:	fe cc 01 5c 	sub	r12,pc,348
80021ca4:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(waypoint_request_number,10);
80021ca8:	ec f8 01 04 	ld.w	r8,r6[260]
80021cac:	70 08       	ld.w	r8,r8[0x0]
80021cae:	30 ab       	mov	r11,10
80021cb0:	10 9c       	mov	r12,r8
80021cb2:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" receiving num :");
80021cb6:	fe cc 01 5e 	sub	r12,pc,350
80021cba:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.seq,10);
80021cbe:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80021cc2:	5c 78       	castu.h	r8
80021cc4:	30 ab       	mov	r11,10
80021cc6:	10 9c       	mov	r12,r8
80021cc8:	f0 16 00 04 	mcall	r6[16]
		//dbg_print(" is it receiving :");
		//dbg_print_num(waypoint_receiving,10); // boolean value
		dbg_print("\n");
80021ccc:	fe cc 0a 88 	sub	r12,pc,2696
80021cd0:	f0 16 00 01 	mcall	r6[4]
			//new_waypoint.alt = packet.param2;
			//new_waypoint.param1 = packet.param1;
			//break;
		//}
		
		if(packet.current == 2) {                                               //current = 2 is a flag to tell us this is a "guided mode" waypoint and not for the mission
80021cd4:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80021cd8:	30 28       	mov	r8,2
80021cda:	f0 09 18 00 	cp.b	r9,r8
80021cde:	c0 e1       	brne	80021cfa <receive_waypoint+0x138>

			// set wp_nav's destination
			//wp_nav.set_destination(pv_location_to_vector(tell_command));

			// verify we received the command
			mavlink_msg_mission_ack_send(MAVLINK_COMM_0, rec->msg.sysid,rec->msg.compid, MAV_CMD_ACK_OK);
80021ce0:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021ce4:	11 e8       	ld.ub	r8,r8[0x6]
80021ce6:	10 9a       	mov	r10,r8
80021ce8:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021cec:	11 d8       	ld.ub	r8,r8[0x5]
80021cee:	30 19       	mov	r9,1
80021cf0:	10 9b       	mov	r11,r8
80021cf2:	30 0c       	mov	r12,0
80021cf4:	fe b0 f7 a4 	rcall	80020c3c <mavlink_msg_mission_ack_send>
80021cf8:	ce 78       	rjmp	80021ec6 <receive_waypoint+0x304>

		} else if(packet.current == 3){                                    //current = 3 is a flag to tell us this is a alt change only
80021cfa:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80021cfe:	30 38       	mov	r8,3
80021d00:	f0 09 18 00 	cp.b	r9,r8
80021d04:	c0 e1       	brne	80021d20 <receive_waypoint+0x15e>
			// To-Do: update target altitude for loiter or waypoint controller depending upon nav mode
			// similar to how do_change_alt works
			//wp_nav.set_desired_alt(new_waypoint.alt);

			// verify we received the command
			mavlink_msg_mission_ack_send(MAVLINK_COMM_0, rec->msg.sysid,rec->msg.compid, MAV_CMD_ACK_OK);
80021d06:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021d0a:	11 e8       	ld.ub	r8,r8[0x6]
80021d0c:	10 9a       	mov	r10,r8
80021d0e:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021d12:	11 d8       	ld.ub	r8,r8[0x5]
80021d14:	30 19       	mov	r9,1
80021d16:	10 9b       	mov	r11,r8
80021d18:	30 0c       	mov	r12,0
80021d1a:	fe b0 f7 91 	rcall	80020c3c <mavlink_msg_mission_ack_send>
80021d1e:	cd 48       	rjmp	80021ec6 <receive_waypoint+0x304>

		} else {
			// Check if receiving waypoints
			if (*waypoint_receiving){
80021d20:	ee f8 ff 94 	ld.w	r8,r7[-108]
80021d24:	11 88       	ld.ub	r8,r8[0x0]
80021d26:	58 08       	cp.w	r8,0
80021d28:	e0 80 00 bb 	breq	80021e9e <receive_waypoint+0x2dc>

				// check if this is the requested waypoint
				if (packet.seq == waypoint_request_number)
80021d2c:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80021d30:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80021d34:	ec f8 01 04 	ld.w	r8,r6[260]
80021d38:	70 08       	ld.w	r8,r8[0x0]
80021d3a:	10 39       	cp.w	r9,r8
80021d3c:	e0 81 00 c5 	brne	80021ec6 <receive_waypoint+0x304>
				{
					dbg_print("Receiving good waypoint, number ");
80021d40:	fe cc 01 d4 	sub	r12,pc,468
80021d44:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(waypoint_request_number,10);
80021d48:	ec f8 01 04 	ld.w	r8,r6[260]
80021d4c:	70 08       	ld.w	r8,r8[0x0]
80021d4e:	30 ab       	mov	r11,10
80021d50:	10 9c       	mov	r12,r8
80021d52:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of ");
80021d56:	fe cc 01 c6 	sub	r12,pc,454
80021d5a:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(number_of_waypoints-num_waypoint_onboard,10);
80021d5e:	ef 19 ff 98 	ld.uh	r9,r7[-104]
80021d62:	ec f8 01 28 	ld.w	r8,r6[296]
80021d66:	90 08       	ld.sh	r8,r8[0x0]
80021d68:	5c 78       	castu.h	r8
80021d6a:	f2 08 01 08 	sub	r8,r9,r8
80021d6e:	30 ab       	mov	r11,10
80021d70:	10 9c       	mov	r12,r8
80021d72:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
80021d76:	fe cc 0b 32 	sub	r12,pc,2866
80021d7a:	f0 16 00 01 	mcall	r6[4]
					
				    waypoint_list[num_waypoint_onboard + waypoint_request_number] = new_waypoint;
80021d7e:	ec f8 01 28 	ld.w	r8,r6[296]
80021d82:	90 08       	ld.sh	r8,r8[0x0]
80021d84:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80021d88:	ec f8 01 04 	ld.w	r8,r6[260]
80021d8c:	70 08       	ld.w	r8,r8[0x0]
80021d8e:	f2 08 00 08 	add	r8,r9,r8
80021d92:	10 99       	mov	r9,r8
80021d94:	12 98       	mov	r8,r9
80021d96:	a1 78       	lsl	r8,0x1
80021d98:	12 08       	add	r8,r9
80021d9a:	a5 68       	lsl	r8,0x4
80021d9c:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80021da0:	f2 08 00 08 	add	r8,r9,r8
80021da4:	10 9b       	mov	r11,r8
80021da6:	ee ca 00 5c 	sub	r10,r7,92
80021daa:	f6 c8 00 00 	sub	r8,r11,0
80021dae:	f4 c9 00 00 	sub	r9,r10,0
80021db2:	72 0c       	ld.w	r12,r9[0x0]
80021db4:	91 0c       	st.w	r8[0x0],r12
80021db6:	72 1c       	ld.w	r12,r9[0x4]
80021db8:	91 1c       	st.w	r8[0x4],r12
80021dba:	72 2c       	ld.w	r12,r9[0x8]
80021dbc:	91 2c       	st.w	r8[0x8],r12
80021dbe:	72 39       	ld.w	r9,r9[0xc]
80021dc0:	91 39       	st.w	r8[0xc],r9
80021dc2:	f6 c8 ff f0 	sub	r8,r11,-16
80021dc6:	f4 c9 ff f0 	sub	r9,r10,-16
80021dca:	72 0c       	ld.w	r12,r9[0x0]
80021dcc:	91 0c       	st.w	r8[0x0],r12
80021dce:	72 1c       	ld.w	r12,r9[0x4]
80021dd0:	91 1c       	st.w	r8[0x4],r12
80021dd2:	72 2c       	ld.w	r12,r9[0x8]
80021dd4:	91 2c       	st.w	r8[0x8],r12
80021dd6:	72 39       	ld.w	r9,r9[0xc]
80021dd8:	91 39       	st.w	r8[0xc],r9
80021dda:	f6 c8 ff e0 	sub	r8,r11,-32
80021dde:	f4 c9 ff e0 	sub	r9,r10,-32
80021de2:	72 0a       	ld.w	r10,r9[0x0]
80021de4:	91 0a       	st.w	r8[0x0],r10
80021de6:	72 1a       	ld.w	r10,r9[0x4]
80021de8:	91 1a       	st.w	r8[0x4],r10
80021dea:	72 2a       	ld.w	r10,r9[0x8]
80021dec:	91 2a       	st.w	r8[0x8],r10
80021dee:	72 39       	ld.w	r9,r9[0xc]
80021df0:	91 39       	st.w	r8[0xc],r9
					waypoint_request_number++;
80021df2:	ec f8 01 04 	ld.w	r8,r6[260]
80021df6:	70 08       	ld.w	r8,r8[0x0]
80021df8:	f0 c9 ff ff 	sub	r9,r8,-1
80021dfc:	ec f8 01 04 	ld.w	r8,r6[260]
80021e00:	91 09       	st.w	r8[0x0],r9
					
					if ((num_waypoint_onboard + waypoint_request_number) == number_of_waypoints) 
80021e02:	ec f8 01 28 	ld.w	r8,r6[296]
80021e06:	90 08       	ld.sh	r8,r8[0x0]
80021e08:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80021e0c:	ec f8 01 04 	ld.w	r8,r6[260]
80021e10:	70 08       	ld.w	r8,r8[0x0]
80021e12:	10 09       	add	r9,r8
80021e14:	ef 18 ff 98 	ld.uh	r8,r7[-104]
80021e18:	10 39       	cp.w	r9,r8
80021e1a:	c2 11       	brne	80021e5c <receive_waypoint+0x29a>
					{
						
						uint8_t type = MAV_CMD_ACK_OK;                         // ok (0), error(1) ???
80021e1c:	30 18       	mov	r8,1
80021e1e:	ef 68 ff fe 	st.b	r7[-2],r8
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,mavlink_mission_planner.compid,type);
						mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,type);
80021e22:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80021e26:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021e2a:	11 e8       	ld.ub	r8,r8[0x6]
80021e2c:	10 9a       	mov	r10,r8
80021e2e:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021e32:	11 d8       	ld.ub	r8,r8[0x5]
80021e34:	10 9b       	mov	r11,r8
80021e36:	30 0c       	mov	r12,0
80021e38:	fe b0 f7 02 	rcall	80020c3c <mavlink_msg_mission_ack_send>
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,0,type);
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,mavlink_system.compid,type);
						
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0, packet.target_system, packet.target_component,type);

						dbg_print("flight plan received!\n");
80021e3c:	fe cc 02 a4 	sub	r12,pc,676
80021e40:	f0 16 00 01 	mcall	r6[4]
						*waypoint_receiving = false;
80021e44:	ee f9 ff 94 	ld.w	r9,r7[-108]
80021e48:	30 08       	mov	r8,0
80021e4a:	b2 88       	st.b	r9[0x0],r8
						num_waypoint_onboard = number_of_waypoints;
80021e4c:	ec f9 01 28 	ld.w	r9,r6[296]
80021e50:	ef 08 ff 98 	ld.sh	r8,r7[-104]
80021e54:	b2 08       	st.h	r9[0x0],r8
						init_wp();
80021e56:	f0 16 00 93 	mcall	r6[588]
80021e5a:	c3 68       	rjmp	80021ec6 <receive_waypoint+0x304>
					}else{
						mavlink_msg_mission_request_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,waypoint_request_number);
80021e5c:	ec f8 01 04 	ld.w	r8,r6[260]
80021e60:	70 08       	ld.w	r8,r8[0x0]
80021e62:	5c 88       	casts.h	r8
80021e64:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80021e68:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021e6c:	11 e8       	ld.ub	r8,r8[0x6]
80021e6e:	10 9a       	mov	r10,r8
80021e70:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021e74:	11 d8       	ld.ub	r8,r8[0x5]
80021e76:	10 9b       	mov	r11,r8
80021e78:	30 0c       	mov	r12,0
80021e7a:	fe b0 f4 bb 	rcall	800207f0 <mavlink_msg_mission_request_send>
						
						dbg_print("Asking for waypoint ");
80021e7e:	fe cc 04 c2 	sub	r12,pc,1218
80021e82:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(waypoint_request_number,10);
80021e86:	ec f8 01 04 	ld.w	r8,r6[260]
80021e8a:	70 08       	ld.w	r8,r8[0x0]
80021e8c:	30 ab       	mov	r11,10
80021e8e:	10 9c       	mov	r12,r8
80021e90:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
80021e94:	fe cc 0c 50 	sub	r12,pc,3152
80021e98:	f0 16 00 01 	mcall	r6[4]
80021e9c:	c1 58       	rjmp	80021ec6 <receive_waypoint+0x304>
					}
				}
			}else{
				uint8_t type = MAV_CMD_ACK_OK; //MAV_CMD_ACK_ERR_FAIL;                         // ok (0), error(1)
80021e9e:	30 18       	mov	r8,1
80021ea0:	ef 68 ff ff 	st.b	r7[-1],r8
				dbg_print("Ack not received!");
80021ea4:	fe cc 02 f4 	sub	r12,pc,756
80021ea8:	f0 16 00 01 	mcall	r6[4]
				mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,type);
80021eac:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80021eb0:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021eb4:	11 e8       	ld.ub	r8,r8[0x6]
80021eb6:	10 9a       	mov	r10,r8
80021eb8:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021ebc:	11 d8       	ld.ub	r8,r8[0x5]
80021ebe:	10 9b       	mov	r11,r8
80021ec0:	30 0c       	mov	r12,0
80021ec2:	fe b0 f6 bd 	rcall	80020c3c <mavlink_msg_mission_ack_send>
			}				
		}		
	}			
}		
80021ec6:	2e 5d       	sub	sp,-108
80021ec8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80021ecc:	80 02       	ld.sh	r2,r0[0x0]
80021ece:	1a 52       	eor	r2,sp
80021ed0:	73 65       	ld.w	r5,r9[0x58]
80021ed2:	74 74       	ld.w	r4,r10[0x1c]
80021ed4:	69 6e       	ld.w	lr,r4[0x58]
80021ed6:	67 20       	ld.w	r0,r3[0x48]
80021ed8:	63 75       	ld.w	r5,r1[0x5c]
80021eda:	72 72       	ld.w	r2,r9[0x1c]
80021edc:	65 6e       	ld.w	lr,r2[0x58]
80021ede:	74 20       	ld.w	r0,r10[0x8]
80021ee0:	77 70       	ld.w	r0,r11[0x5c]
80021ee2:	00 00       	add	r0,r0
80021ee4:	53 65       	stdsp	sp[0xd8],r5
80021ee6:	74 20       	ld.w	r0,r10[0x8]
80021ee8:	63 75       	ld.w	r5,r1[0x5c]
80021eea:	72 72       	ld.w	r2,r9[0x1c]
80021eec:	65 6e       	ld.w	lr,r2[0x58]
80021eee:	74 20       	ld.w	r0,r10[0x8]
80021ef0:	77 61       	ld.w	r1,r11[0x58]
80021ef2:	79 70       	ld.w	r0,r12[0x5c]
80021ef4:	6f 69       	ld.w	r9,r7[0x58]
80021ef6:	6e 74       	ld.w	r4,r7[0x1c]
80021ef8:	20 74       	sub	r4,7
80021efa:	6f 20       	ld.w	r0,r7[0x48]
80021efc:	6e 75       	ld.w	r5,r7[0x1c]
80021efe:	6d 62       	ld.w	r2,r6[0x58]
80021f00:	65 72       	ld.w	r2,r2[0x5c]
	...

80021f04 <set_current_wp>:

void set_current_wp(Mavlink_Received_t* rec,  waypoint_struct* waypoint_list[], uint16_t num_of_waypoint)
{
80021f04:	eb cd 40 c0 	pushm	r6-r7,lr
80021f08:	1a 97       	mov	r7,sp
80021f0a:	20 5d       	sub	sp,20
80021f0c:	4c 06       	lddpc	r6,8002200c <set_current_wp+0x108>
80021f0e:	1e 26       	rsub	r6,pc
80021f10:	ef 4c ff f4 	st.w	r7[-12],r12
80021f14:	ef 4b ff f0 	st.w	r7[-16],r11
80021f18:	14 98       	mov	r8,r10
80021f1a:	ef 58 ff ec 	st.h	r7[-20],r8
	mavlink_mission_set_current_t packet;
	mavlink_msg_mission_set_current_decode(&rec->msg,&packet);
80021f1e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80021f22:	ee c9 00 08 	sub	r9,r7,8
80021f26:	12 9b       	mov	r11,r9
80021f28:	10 9c       	mov	r12,r8
80021f2a:	fe b0 f5 21 	rcall	8002096c <mavlink_msg_mission_set_current_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80021f2e:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80021f32:	ec f8 00 74 	ld.w	r8,r6[116]
80021f36:	11 88       	ld.ub	r8,r8[0x0]
void set_current_wp(Mavlink_Received_t* rec,  waypoint_struct* waypoint_list[], uint16_t num_of_waypoint)
{
	mavlink_mission_set_current_t packet;
	mavlink_msg_mission_set_current_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80021f38:	f0 09 18 00 	cp.b	r9,r8
80021f3c:	c6 41       	brne	80022004 <set_current_wp+0x100>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80021f3e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80021f42:	ec f8 00 c8 	ld.w	r8,r6[200]
80021f46:	11 98       	ld.ub	r8,r8[0x1]
void set_current_wp(Mavlink_Received_t* rec,  waypoint_struct* waypoint_list[], uint16_t num_of_waypoint)
{
	mavlink_mission_set_current_t packet;
	mavlink_msg_mission_set_current_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80021f48:	f0 09 18 00 	cp.b	r9,r8
80021f4c:	c5 c1       	brne	80022004 <set_current_wp+0x100>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		dbg_print("setting current wp");
80021f4e:	fe cc 00 7e 	sub	r12,pc,126
80021f52:	f0 16 00 01 	mcall	r6[4]
		int i;
		for (i=0;i<num_of_waypoint;i++)
80021f56:	30 08       	mov	r8,0
80021f58:	ef 48 ff fc 	st.w	r7[-4],r8
80021f5c:	c1 08       	rjmp	80021f7c <set_current_wp+0x78>
		{
			waypoint_list[i]->current = 0;
80021f5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021f62:	a3 68       	lsl	r8,0x2
80021f64:	ee f9 ff f0 	ld.w	r9,r7[-16]
80021f68:	f2 08 00 08 	add	r8,r9,r8
80021f6c:	70 09       	ld.w	r9,r8[0x0]
80021f6e:	30 08       	mov	r8,0
80021f70:	b2 c8       	st.b	r9[0x4],r8
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		dbg_print("setting current wp");
		int i;
		for (i=0;i<num_of_waypoint;i++)
80021f72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021f76:	2f f8       	sub	r8,-1
80021f78:	ef 48 ff fc 	st.w	r7[-4],r8
80021f7c:	ef 19 ff ec 	ld.uh	r9,r7[-20]
80021f80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021f84:	10 39       	cp.w	r9,r8
80021f86:	fe 99 ff ec 	brgt	80021f5e <set_current_wp+0x5a>
		{
			waypoint_list[i]->current = 0;
		}
		if (packet.seq < num_of_waypoint)
80021f8a:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80021f8e:	ef 09 ff ec 	ld.sh	r9,r7[-20]
80021f92:	f0 09 19 00 	cp.h	r9,r8
80021f96:	e0 88 00 2b 	brls	80021fec <set_current_wp+0xe8>
		{
			waypoint_list[packet.seq]->current = 1;
80021f9a:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80021f9e:	5c 78       	castu.h	r8
80021fa0:	a3 68       	lsl	r8,0x2
80021fa2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80021fa6:	f2 08 00 08 	add	r8,r9,r8
80021faa:	70 09       	ld.w	r9,r8[0x0]
80021fac:	30 18       	mov	r8,1
80021fae:	b2 c8       	st.b	r9[0x4],r8
			mavlink_msg_mission_current_send(MAVLINK_COMM_0,waypoint_list[packet.seq]->current);
80021fb0:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80021fb4:	5c 78       	castu.h	r8
80021fb6:	a3 68       	lsl	r8,0x2
80021fb8:	ee f9 ff f0 	ld.w	r9,r7[-16]
80021fbc:	f2 08 00 08 	add	r8,r9,r8
80021fc0:	70 08       	ld.w	r8,r8[0x0]
80021fc2:	11 c8       	ld.ub	r8,r8[0x4]
80021fc4:	10 9b       	mov	r11,r8
80021fc6:	30 0c       	mov	r12,0
80021fc8:	fe b0 f4 f8 	rcall	800209b8 <mavlink_msg_mission_current_send>
			
			dbg_print("Set current waypoint to number");
80021fcc:	fe cc 00 e8 	sub	r12,pc,232
80021fd0:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(packet.seq,10);
80021fd4:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80021fd8:	5c 78       	castu.h	r8
80021fda:	30 ab       	mov	r11,10
80021fdc:	10 9c       	mov	r12,r8
80021fde:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80021fe2:	fe cc 0d 9e 	sub	r12,pc,3486
80021fe6:	f0 16 00 01 	mcall	r6[4]
80021fea:	c0 d8       	rjmp	80022004 <set_current_wp+0x100>
		}else{
			mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_CMD_ACK_ERR_ACCESS_DENIED);
80021fec:	ee f8 ff f4 	ld.w	r8,r7[-12]
80021ff0:	11 e8       	ld.ub	r8,r8[0x6]
80021ff2:	10 9a       	mov	r10,r8
80021ff4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80021ff8:	11 d8       	ld.ub	r8,r8[0x5]
80021ffa:	30 39       	mov	r9,3
80021ffc:	10 9b       	mov	r11,r8
80021ffe:	30 0c       	mov	r12,0
80022000:	fe b0 f6 1e 	rcall	80020c3c <mavlink_msg_mission_ack_send>
		}
	}
}
80022004:	2f bd       	sub	sp,-20
80022006:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002200a:	00 00       	add	r0,r0
8002200c:	80 02       	ld.sh	r2,r0[0x0]
8002200e:	1d 92       	ld.ub	r2,lr[0x1]
80022010:	43 6c       	lddsp	r12,sp[0xd8]
80022012:	65 61       	ld.w	r1,r2[0x58]
80022014:	72 20       	ld.w	r0,r9[0x8]
80022016:	57 61       	stdsp	sp[0x1d8],r1
80022018:	79 70       	ld.w	r0,r12[0x5c]
8002201a:	6f 69       	ld.w	r9,r7[0x58]
8002201c:	6e 74       	ld.w	r4,r7[0x1c]
8002201e:	20 6c       	sub	r12,6
80022020:	69 73       	ld.w	r3,r4[0x5c]
80022022:	74 00       	ld.w	r0,r10[0x0]

80022024 <clear_waypoint_list>:

void clear_waypoint_list(Mavlink_Received_t* rec,  uint16_t* number_of_waypoints, bool* waypoint_set)
{
80022024:	eb cd 40 c0 	pushm	r6-r7,lr
80022028:	1a 97       	mov	r7,sp
8002202a:	20 4d       	sub	sp,16
8002202c:	4a 06       	lddpc	r6,800220ac <clear_waypoint_list+0x88>
8002202e:	1e 26       	rsub	r6,pc
80022030:	ef 4c ff f8 	st.w	r7[-8],r12
80022034:	ef 4b ff f4 	st.w	r7[-12],r11
80022038:	ef 4a ff f0 	st.w	r7[-16],r10
	mavlink_mission_clear_all_t packet;
	mavlink_msg_mission_clear_all_decode(&rec->msg,&packet);
8002203c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022040:	ee c9 00 02 	sub	r9,r7,2
80022044:	12 9b       	mov	r11,r9
80022046:	10 9c       	mov	r12,r8
80022048:	fe b0 f5 bb 	rcall	80020bbe <mavlink_msg_mission_clear_all_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
8002204c:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80022050:	ec f8 00 74 	ld.w	r8,r6[116]
80022054:	11 88       	ld.ub	r8,r8[0x0]
void clear_waypoint_list(Mavlink_Received_t* rec,  uint16_t* number_of_waypoints, bool* waypoint_set)
{
	mavlink_mission_clear_all_t packet;
	mavlink_msg_mission_clear_all_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80022056:	f0 09 18 00 	cp.b	r9,r8
8002205a:	c2 51       	brne	800220a4 <clear_waypoint_list+0x80>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
8002205c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80022060:	ec f8 00 c8 	ld.w	r8,r6[200]
80022064:	11 98       	ld.ub	r8,r8[0x1]
void clear_waypoint_list(Mavlink_Received_t* rec,  uint16_t* number_of_waypoints, bool* waypoint_set)
{
	mavlink_mission_clear_all_t packet;
	mavlink_msg_mission_clear_all_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80022066:	f0 09 18 00 	cp.b	r9,r8
8002206a:	c1 d1       	brne	800220a4 <clear_waypoint_list+0x80>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		*number_of_waypoints = 0;
8002206c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80022070:	30 08       	mov	r8,0
80022072:	b2 08       	st.h	r9[0x0],r8
		num_waypoint_onboard = 0;
80022074:	ec f9 01 28 	ld.w	r9,r6[296]
80022078:	30 08       	mov	r8,0
8002207a:	b2 08       	st.h	r9[0x0],r8
		*waypoint_set = 0;
8002207c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80022080:	30 08       	mov	r8,0
80022082:	b2 88       	st.b	r9[0x0],r8
		mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_CMD_ACK_OK);
80022084:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022088:	11 e8       	ld.ub	r8,r8[0x6]
8002208a:	10 9a       	mov	r10,r8
8002208c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022090:	11 d8       	ld.ub	r8,r8[0x5]
80022092:	30 19       	mov	r9,1
80022094:	10 9b       	mov	r11,r8
80022096:	30 0c       	mov	r12,0
80022098:	fe b0 f5 d2 	rcall	80020c3c <mavlink_msg_mission_ack_send>
		dbg_print("Clear Waypoint list");
8002209c:	fe cc 00 8c 	sub	r12,pc,140
800220a0:	f0 16 00 01 	mcall	r6[4]
	}		
}
800220a4:	2f cd       	sub	sp,-16
800220a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800220aa:	00 00       	add	r0,r0
800220ac:	80 02       	ld.sh	r2,r0[0x0]
800220ae:	1e b2       	st.h	pc++,r2
800220b0:	62 61       	ld.w	r1,r1[0x18]
800220b2:	73 65       	ld.w	r5,r9[0x58]
800220b4:	5f 6d       	srmi	sp
800220b6:	6f 64       	ld.w	r4,r7[0x58]
800220b8:	65 3a       	ld.w	r10,r2[0x4c]
800220ba:	00 00       	add	r0,r0
800220bc:	2c 20       	sub	r0,-62
800220be:	63 75       	ld.w	r5,r1[0x5c]
800220c0:	73 74       	ld.w	r4,r9[0x5c]
800220c2:	6f 6d       	ld.w	sp,r7[0x58]
800220c4:	20 6d       	sub	sp,24
800220c6:	6f 64       	ld.w	r4,r7[0x58]
800220c8:	65 3a       	ld.w	r10,r2[0x4c]
	...

800220cc <set_mav_mode>:

void set_mav_mode(Mavlink_Received_t* rec, uint8_t* board_mav_mode, uint8_t* board_mav_state, uint8_t sim_mode)
{
800220cc:	eb cd 40 e0 	pushm	r5-r7,lr
800220d0:	1a 97       	mov	r7,sp
800220d2:	20 6d       	sub	sp,24
800220d4:	4e 26       	lddpc	r6,8002225c <set_mav_mode+0x190>
800220d6:	1e 26       	rsub	r6,pc
800220d8:	ef 4c ff f4 	st.w	r7[-12],r12
800220dc:	ef 4b ff f0 	st.w	r7[-16],r11
800220e0:	ef 4a ff ec 	st.w	r7[-20],r10
800220e4:	12 98       	mov	r8,r9
800220e6:	ef 68 ff e8 	st.b	r7[-24],r8
	mavlink_set_mode_t packet;
	mavlink_msg_set_mode_decode(&rec->msg,&packet);
800220ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
800220ee:	ee c9 00 08 	sub	r9,r7,8
800220f2:	12 9b       	mov	r11,r9
800220f4:	10 9c       	mov	r12,r8
800220f6:	fe b0 f1 53 	rcall	8002039c <mavlink_msg_set_mode_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid)
800220fa:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800220fe:	ec f8 00 74 	ld.w	r8,r6[116]
80022102:	11 88       	ld.ub	r8,r8[0x0]
80022104:	f0 09 18 00 	cp.b	r9,r8
80022108:	e0 81 00 a6 	brne	80022254 <set_mav_mode+0x188>
	{
		dbg_print("base_mode:");
8002210c:	fe cc 00 5c 	sub	r12,pc,92
80022110:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.base_mode,10);
80022114:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80022118:	30 ab       	mov	r11,10
8002211a:	10 9c       	mov	r12,r8
8002211c:	f0 16 00 04 	mcall	r6[16]
		dbg_print(", custom mode:");
80022120:	fe cc 00 64 	sub	r12,pc,100
80022124:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.custom_mode,10);
80022128:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002212c:	30 ab       	mov	r11,10
8002212e:	10 9c       	mov	r12,r8
80022130:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
80022134:	fe cc 0e f0 	sub	r12,pc,3824
80022138:	f0 16 00 01 	mcall	r6[4]

		if (sim_mode == 0)
8002213c:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80022140:	30 08       	mov	r8,0
80022142:	f0 09 18 00 	cp.b	r9,r8
80022146:	c3 e1       	brne	800221c2 <set_mav_mode+0xf6>
		{
			switch(packet.base_mode)
80022148:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8002214c:	e0 48 00 58 	cp.w	r8,88
80022150:	c0 e0       	breq	8002216c <set_mav_mode+0xa0>
80022152:	e0 89 00 06 	brgt	8002215e <set_mav_mode+0x92>
80022156:	e0 48 00 50 	cp.w	r8,80
8002215a:	c0 90       	breq	8002216c <set_mav_mode+0xa0>
				break;
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
					{
						*board_mav_state = MAV_STATE_ACTIVE;
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
8002215c:	c7 c8       	rjmp	80022254 <set_mav_mode+0x188>
		dbg_print_num(packet.custom_mode,10);
		dbg_print("\n");

		if (sim_mode == 0)
		{
			switch(packet.base_mode)
8002215e:	e0 48 00 5c 	cp.w	r8,92
80022162:	c0 50       	breq	8002216c <set_mav_mode+0xa0>
80022164:	e0 48 00 c0 	cp.w	r8,192
80022168:	c0 c0       	breq	80022180 <set_mav_mode+0xb4>
				break;
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
					{
						*board_mav_state = MAV_STATE_ACTIVE;
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
8002216a:	c7 58       	rjmp	80022254 <set_mav_mode+0x188>
			switch(packet.base_mode)
			{
				case MAV_MODE_STABILIZE_DISARMED:
				case MAV_MODE_GUIDED_DISARMED:
				case MAV_MODE_AUTO_DISARMED:
					*board_mav_state = MAV_STATE_STANDBY;
8002216c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80022170:	30 38       	mov	r8,3
80022172:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_MANUAL_DISARMED;
80022174:	ee f9 ff f0 	ld.w	r9,r7[-16]
80022178:	34 08       	mov	r8,64
8002217a:	b2 88       	st.b	r9[0x0],r8
				break;
8002217c:	d7 03       	nop
8002217e:	c6 b8       	rjmp	80022254 <set_mav_mode+0x188>
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
80022180:	fe b0 f6 64 	rcall	80020e48 <get_thrust_from_remote>
80022184:	18 98       	mov	r8,r12
80022186:	10 9c       	mov	r12,r8
80022188:	f0 16 00 02 	mcall	r6[8]
8002218c:	30 05       	mov	r5,0
8002218e:	e0 68 66 66 	mov	r8,26214
80022192:	ea 18 66 66 	orh	r8,0x6666
80022196:	e0 69 66 66 	mov	r9,26214
8002219a:	ea 19 bf ee 	orh	r9,0xbfee
8002219e:	f0 16 00 1c 	mcall	r6[112]
800221a2:	18 98       	mov	r8,r12
800221a4:	58 08       	cp.w	r8,0
800221a6:	c0 20       	breq	800221aa <set_mav_mode+0xde>
800221a8:	30 15       	mov	r5,1
800221aa:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
800221ae:	c5 20       	breq	80022252 <set_mav_mode+0x186>
					{
						*board_mav_state = MAV_STATE_ACTIVE;
800221b0:	ee f9 ff ec 	ld.w	r9,r7[-20]
800221b4:	30 48       	mov	r8,4
800221b6:	b2 88       	st.b	r9[0x0],r8
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
800221b8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800221bc:	3c 08       	mov	r8,-64
800221be:	b2 88       	st.b	r9[0x0],r8
800221c0:	c4 a8       	rjmp	80022254 <set_mav_mode+0x188>
					}
				break;
			}
		}else{
			switch(packet.base_mode)
800221c2:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800221c6:	e0 48 00 c0 	cp.w	r8,192
800221ca:	c2 00       	breq	8002220a <set_mav_mode+0x13e>
800221cc:	e0 89 00 0c 	brgt	800221e4 <set_mav_mode+0x118>
800221d0:	e0 48 00 58 	cp.w	r8,88
800221d4:	c1 20       	breq	800221f8 <set_mav_mode+0x12c>
800221d6:	e0 48 00 5c 	cp.w	r8,92
800221da:	c0 f0       	breq	800221f8 <set_mav_mode+0x12c>
800221dc:	e0 48 00 50 	cp.w	r8,80
800221e0:	c0 c0       	breq	800221f8 <set_mav_mode+0x12c>
800221e2:	c3 98       	rjmp	80022254 <set_mav_mode+0x188>
800221e4:	e0 48 00 d8 	cp.w	r8,216
800221e8:	c2 30       	breq	8002222e <set_mav_mode+0x162>
800221ea:	e0 48 00 dc 	cp.w	r8,220
800221ee:	c2 90       	breq	80022240 <set_mav_mode+0x174>
800221f0:	e0 48 00 d0 	cp.w	r8,208
800221f4:	c1 40       	breq	8002221c <set_mav_mode+0x150>
800221f6:	c2 f8       	rjmp	80022254 <set_mav_mode+0x188>
			{
				case MAV_MODE_STABILIZE_DISARMED:
				case MAV_MODE_GUIDED_DISARMED:
				case MAV_MODE_AUTO_DISARMED:
					*board_mav_state = MAV_STATE_STANDBY;
800221f8:	ee f9 ff ec 	ld.w	r9,r7[-20]
800221fc:	30 38       	mov	r8,3
800221fe:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_MANUAL_DISARMED;
80022200:	ee f9 ff f0 	ld.w	r9,r7[-16]
80022204:	34 08       	mov	r8,64
80022206:	b2 88       	st.b	r9[0x0],r8
				break;
80022208:	c2 68       	rjmp	80022254 <set_mav_mode+0x188>
				case MAV_MODE_MANUAL_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
8002220a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002220e:	30 48       	mov	r8,4
80022210:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80022212:	ee f9 ff f0 	ld.w	r9,r7[-16]
80022216:	3c 08       	mov	r8,-64
80022218:	b2 88       	st.b	r9[0x0],r8
				break;
8002221a:	c1 d8       	rjmp	80022254 <set_mav_mode+0x188>
				case MAV_MODE_STABILIZE_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
8002221c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80022220:	30 48       	mov	r8,4
80022222:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_STABILIZE_ARMED;
80022224:	ee f9 ff f0 	ld.w	r9,r7[-16]
80022228:	3d 08       	mov	r8,-48
8002222a:	b2 88       	st.b	r9[0x0],r8
				break;
8002222c:	c1 48       	rjmp	80022254 <set_mav_mode+0x188>
				case MAV_MODE_GUIDED_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
8002222e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80022232:	30 48       	mov	r8,4
80022234:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_GUIDED_ARMED;
80022236:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002223a:	3d 88       	mov	r8,-40
8002223c:	b2 88       	st.b	r9[0x0],r8
				break;
8002223e:	c0 b8       	rjmp	80022254 <set_mav_mode+0x188>
				case MAV_MODE_AUTO_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
80022240:	ee f9 ff ec 	ld.w	r9,r7[-20]
80022244:	30 48       	mov	r8,4
80022246:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_AUTO_ARMED;
80022248:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002224c:	3d c8       	mov	r8,-36
8002224e:	b2 88       	st.b	r9[0x0],r8
80022250:	c0 28       	rjmp	80022254 <set_mav_mode+0x188>
				break;
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
					{
						*board_mav_state = MAV_STATE_ACTIVE;
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80022252:	d7 03       	nop
				break;
			}
		}
		
	}
}
80022254:	2f ad       	sub	sp,-24
80022256:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8002225a:	00 00       	add	r0,r0
8002225c:	80 02       	ld.sh	r2,r0[0x0]
8002225e:	1f 5a       	ld.sh	r10,--pc
80022260:	53 65       	stdsp	sp[0xd8],r5
80022262:	6e 64       	ld.w	r4,r7[0x18]
80022264:	69 6e       	ld.w	lr,r4[0x58]
80022266:	67 20       	ld.w	r0,r3[0x48]
80022268:	77 61       	ld.w	r1,r11[0x58]
8002226a:	79 70       	ld.w	r0,r12[0x5c]
8002226c:	6f 69       	ld.w	r9,r7[0x58]
8002226e:	6e 74       	ld.w	r4,r7[0x1c]
80022270:	20 74       	sub	r4,7
80022272:	69 6d       	ld.w	sp,r4[0x58]
80022274:	65 6f       	ld.w	pc,r2[0x58]
80022276:	75 74       	ld.w	r4,r10[0x5c]
80022278:	00 00       	add	r0,r0
8002227a:	00 00       	add	r0,r0
8002227c:	52 65       	stdsp	sp[0x98],r5
8002227e:	63 65       	ld.w	r5,r1[0x58]
80022280:	69 76       	ld.w	r6,r4[0x5c]
80022282:	69 6e       	ld.w	lr,r4[0x58]
80022284:	67 20       	ld.w	r0,r3[0x48]
80022286:	77 61       	ld.w	r1,r11[0x58]
80022288:	79 70       	ld.w	r0,r12[0x5c]
8002228a:	6f 69       	ld.w	r9,r7[0x58]
8002228c:	6e 74       	ld.w	r4,r7[0x1c]
8002228e:	20 74       	sub	r4,7
80022290:	69 6d       	ld.w	sp,r4[0x58]
80022292:	65 6f       	ld.w	pc,r2[0x58]
80022294:	75 74       	ld.w	r4,r10[0x5c]
	...

80022298 <control_time_out_waypoint_msg>:

void control_time_out_waypoint_msg(uint16_t* num_of_waypoint, bool* waypoint_receiving, bool* waypoint_sending)
{
80022298:	eb cd 40 c0 	pushm	r6-r7,lr
8002229c:	1a 97       	mov	r7,sp
8002229e:	20 4d       	sub	sp,16
800222a0:	4a 76       	lddpc	r6,8002233c <control_time_out_waypoint_msg+0xa4>
800222a2:	1e 26       	rsub	r6,pc
800222a4:	ef 4c ff f8 	st.w	r7[-8],r12
800222a8:	ef 4b ff f4 	st.w	r7[-12],r11
800222ac:	ef 4a ff f0 	st.w	r7[-16],r10
	if (*waypoint_sending || *waypoint_receiving)
800222b0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800222b4:	11 88       	ld.ub	r8,r8[0x0]
800222b6:	58 08       	cp.w	r8,0
800222b8:	c0 61       	brne	800222c4 <control_time_out_waypoint_msg+0x2c>
800222ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
800222be:	11 88       	ld.ub	r8,r8[0x0]
800222c0:	58 08       	cp.w	r8,0
800222c2:	c3 90       	breq	80022334 <control_time_out_waypoint_msg+0x9c>
	{
		uint32_t tnow = get_millis();
800222c4:	f0 16 00 0f 	mcall	r6[60]
800222c8:	18 98       	mov	r8,r12
800222ca:	ef 48 ff fc 	st.w	r7[-4],r8
		
		if ((tnow - start_timeout) > timeout_max_wp)
800222ce:	ec f8 01 84 	ld.w	r8,r6[388]
800222d2:	70 08       	ld.w	r8,r8[0x0]
800222d4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800222d8:	10 19       	sub	r9,r8
800222da:	ec f8 04 34 	ld.w	r8,r6[1076]
800222de:	70 08       	ld.w	r8,r8[0x0]
800222e0:	10 39       	cp.w	r9,r8
800222e2:	e0 88 00 29 	brls	80022334 <control_time_out_waypoint_msg+0x9c>
		{
			start_timeout = tnow;
800222e6:	ec f8 01 84 	ld.w	r8,r6[388]
800222ea:	ee f9 ff fc 	ld.w	r9,r7[-4]
800222ee:	91 09       	st.w	r8[0x0],r9
			if (*waypoint_sending)
800222f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800222f4:	11 88       	ld.ub	r8,r8[0x0]
800222f6:	58 08       	cp.w	r8,0
800222f8:	c0 90       	breq	8002230a <control_time_out_waypoint_msg+0x72>
			{
				*waypoint_sending = false;
800222fa:	ee f9 ff f0 	ld.w	r9,r7[-16]
800222fe:	30 08       	mov	r8,0
80022300:	b2 88       	st.b	r9[0x0],r8
				dbg_print("Sending waypoint timeout");
80022302:	fe cc 00 a2 	sub	r12,pc,162
80022306:	f0 16 00 01 	mcall	r6[4]
			}
			if (*waypoint_receiving)
8002230a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002230e:	11 88       	ld.ub	r8,r8[0x0]
80022310:	58 08       	cp.w	r8,0
80022312:	c1 10       	breq	80022334 <control_time_out_waypoint_msg+0x9c>
			{
				*waypoint_receiving = false;
80022314:	ee f9 ff f4 	ld.w	r9,r7[-12]
80022318:	30 08       	mov	r8,0
8002231a:	b2 88       	st.b	r9[0x0],r8
				
				dbg_print("Receiving waypoint timeout");
8002231c:	fe cc 00 a0 	sub	r12,pc,160
80022320:	f0 16 00 01 	mcall	r6[4]
				*num_of_waypoint = 0;
80022324:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022328:	30 08       	mov	r8,0
8002232a:	b2 08       	st.h	r9[0x0],r8
				num_waypoint_onboard = 0;
8002232c:	ec f9 01 28 	ld.w	r9,r6[296]
80022330:	30 08       	mov	r8,0
80022332:	b2 08       	st.h	r9[0x0],r8
				
			}
		}
	}
}
80022334:	2f cd       	sub	sp,-16
80022336:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002233a:	00 00       	add	r0,r0
8002233c:	80 02       	ld.sh	r2,r0[0x0]
8002233e:	21 26       	sub	r6,18
80022340:	77 70       	ld.w	r0,r11[0x5c]
80022342:	5f 67       	srmi	r7
80022344:	6c 6f       	ld.w	pc,r6[0x18]
80022346:	62 61       	ld.w	r1,r1[0x18]
80022348:	6c 3a       	ld.w	r10,r6[0xc]
8002234a:	20 6c       	sub	r12,6
8002234c:	61 74       	ld.w	r4,r0[0x5c]
8002234e:	20 28       	sub	r8,2
80022350:	78 31       	ld.w	r1,r12[0xc]
80022352:	65 37       	ld.w	r7,r2[0x4c]
80022354:	29 3a       	sub	r10,-109
80022356:	00 00       	add	r0,r0
80022358:	20 6c       	sub	r12,6
8002235a:	6f 6e       	ld.w	lr,r7[0x58]
8002235c:	67 20       	ld.w	r0,r3[0x48]
8002235e:	28 78       	sub	r8,-121
80022360:	31 65       	mov	r5,22
80022362:	37 29       	mov	r9,114
80022364:	3a 00       	mov	r0,-96
80022366:	00 00       	add	r0,r0
80022368:	20 61       	sub	r1,6
8002236a:	6c 74       	ld.w	r4,r6[0x1c]
8002236c:	20 28       	sub	r8,2
8002236e:	78 31       	ld.w	r1,r12[0xc]
80022370:	30 30       	mov	r0,3
80022372:	30 29       	mov	r9,2
80022374:	3a 00       	mov	r0,-96
80022376:	00 00       	add	r0,r0
80022378:	20 77       	sub	r7,7
8002237a:	70 5f       	ld.w	pc,r8[0x14]
8002237c:	63 6f       	ld.w	pc,r1[0x58]
8002237e:	6f 72       	ld.w	r2,r7[0x5c]
80022380:	3a 20       	mov	r0,-94
80022382:	78 20       	ld.w	r0,r12[0x8]
80022384:	28 78       	sub	r8,-121
80022386:	31 30       	mov	r0,19
80022388:	30 29       	mov	r9,2
8002238a:	3a 00       	mov	r0,-96
8002238c:	2c 20       	sub	r0,-62
8002238e:	79 20       	ld.w	r0,r12[0x48]
80022390:	28 78       	sub	r8,-121
80022392:	31 30       	mov	r0,19
80022394:	30 29       	mov	r9,2
80022396:	3a 00       	mov	r0,-96
80022398:	2c 20       	sub	r0,-62
8002239a:	7a 20       	ld.w	r0,sp[0x8]
8002239c:	28 78       	sub	r8,-121
8002239e:	31 30       	mov	r0,19
800223a0:	30 29       	mov	r9,2
800223a2:	3a 00       	mov	r0,-96
800223a4:	20 6c       	sub	r12,6
800223a6:	6f 63       	ld.w	r3,r7[0x58]
800223a8:	61 6c       	ld.w	r12,r0[0x58]
800223aa:	4f 72       	lddpc	r2,80022584 <set_waypoint_from_frame+0x192>
800223ac:	69 67       	ld.w	r7,r4[0x58]
800223ae:	69 6e       	ld.w	lr,r4[0x58]
800223b0:	20 6c       	sub	r12,6
800223b2:	61 74       	ld.w	r4,r0[0x5c]
800223b4:	20 28       	sub	r8,2
800223b6:	78 31       	ld.w	r1,r12[0xc]
800223b8:	65 37       	ld.w	r7,r2[0x4c]
800223ba:	29 3a       	sub	r10,-109
800223bc:	00 00       	add	r0,r0
800223be:	00 00       	add	r0,r0
800223c0:	4c 6f       	lddpc	pc,800224d8 <set_waypoint_from_frame+0xe6>
800223c2:	63 61       	ld.w	r1,r1[0x58]
800223c4:	6c 4f       	ld.w	pc,r6[0x10]
800223c6:	72 69       	ld.w	r9,r9[0x18]
800223c8:	67 69       	ld.w	r9,r3[0x58]
800223ca:	6e 3a       	ld.w	r10,r7[0xc]
800223cc:	20 6c       	sub	r12,6
800223ce:	61 74       	ld.w	r4,r0[0x5c]
800223d0:	20 28       	sub	r8,2
800223d2:	78 31       	ld.w	r1,r12[0xc]
800223d4:	65 37       	ld.w	r7,r2[0x4c]
800223d6:	29 3a       	sub	r10,-109
800223d8:	00 00       	add	r0,r0
800223da:	00 00       	add	r0,r0
800223dc:	20 67       	sub	r7,6
800223de:	6c 6f       	ld.w	pc,r6[0x18]
800223e0:	62 61       	ld.w	r1,r1[0x18]
800223e2:	6c 20       	ld.w	r0,r6[0x8]
800223e4:	61 6c       	ld.w	r12,r0[0x58]
800223e6:	74 20       	ld.w	r0,r10[0x8]
800223e8:	28 78       	sub	r8,-121
800223ea:	31 30       	mov	r0,19
800223ec:	30 30       	mov	r0,3
800223ee:	29 3a       	sub	r10,-109
	...

800223f2 <set_waypoint_from_frame>:

local_coordinates_t set_waypoint_from_frame(waypoint_struct current_wp, global_position_t origin)
{
800223f2:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800223f6:	1a 97       	mov	r7,sp
800223f8:	fa cd 00 a8 	sub	sp,sp,168
800223fc:	fe f6 05 f0 	ld.w	r6,pc[1520]
80022400:	1e 26       	rsub	r6,pc
80022402:	ee c5 ff ec 	sub	r5,r7,-20
80022406:	18 93       	mov	r3,r12
	global_position_t waypoint_global;
	local_coordinates_t waypoint_coor;
	
	float rel_pos[3];
	
	for (i=0;i<3;i++)
80022408:	30 08       	mov	r8,0
8002240a:	ef 68 ff ff 	st.b	r7[-1],r8
8002240e:	c0 e8       	rjmp	8002242a <set_waypoint_from_frame+0x38>
	{
		waypoint_coor.pos[i] = 0.0;
80022410:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80022414:	a3 68       	lsl	r8,0x2
80022416:	ee 08 00 08 	add	r8,r7,r8
8002241a:	30 09       	mov	r9,0
8002241c:	f1 49 ff b0 	st.w	r8[-80],r9
	global_position_t waypoint_global;
	local_coordinates_t waypoint_coor;
	
	float rel_pos[3];
	
	for (i=0;i<3;i++)
80022420:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80022424:	2f f8       	sub	r8,-1
80022426:	ef 68 ff ff 	st.b	r7[-1],r8
8002242a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002242e:	30 28       	mov	r8,2
80022430:	f0 09 18 00 	cp.b	r9,r8
80022434:	fe 98 ff ee 	brls	80022410 <set_waypoint_from_frame+0x1e>
	{
		waypoint_coor.pos[i] = 0.0;
	}

	switch(current_wp.frame)
80022438:	0b 88       	ld.ub	r8,r5[0x0]
8002243a:	58 18       	cp.w	r8,1
8002243c:	e0 80 01 31 	breq	8002269e <set_waypoint_from_frame+0x2ac>
80022440:	e0 89 00 06 	brgt	8002244c <set_waypoint_from_frame+0x5a>
80022444:	58 08       	cp.w	r8,0
80022446:	c0 b0       	breq	8002245c <set_waypoint_from_frame+0x6a>
80022448:	e0 8f 02 a7 	bral	80022996 <set_waypoint_from_frame+0x5a4>
8002244c:	58 28       	cp.w	r8,2
8002244e:	e0 80 02 a3 	breq	80022994 <set_waypoint_from_frame+0x5a2>
80022452:	58 38       	cp.w	r8,3
80022454:	e0 80 01 a7 	breq	800227a2 <set_waypoint_from_frame+0x3b0>
80022458:	e0 8f 02 9f 	bral	80022996 <set_waypoint_from_frame+0x5a4>
	{
		case MAV_FRAME_GLOBAL:
			waypoint_global.latitude = current_wp.x;
8002245c:	ea e8 00 18 	ld.d	r8,r5[24]
80022460:	ee e9 ff e8 	st.d	r7[-24],r8
			waypoint_global.longitude = current_wp.y;
80022464:	ea e8 00 20 	ld.d	r8,r5[32]
80022468:	ee e9 ff e0 	st.d	r7[-32],r8
			waypoint_global.altitude = current_wp.z;
8002246c:	ea e8 00 28 	ld.d	r8,r5[40]
80022470:	10 9a       	mov	r10,r8
80022472:	12 9b       	mov	r11,r9
80022474:	f0 16 00 09 	mcall	r6[36]
80022478:	18 98       	mov	r8,r12
8002247a:	ef 48 ff f0 	st.w	r7[-16],r8
			waypoint_coor = global_to_local_position(waypoint_global,origin);
8002247e:	ee cc 00 a8 	sub	r12,r7,168
80022482:	20 7d       	sub	sp,28
80022484:	1a 98       	mov	r8,sp
80022486:	10 9a       	mov	r10,r8
80022488:	ea cb ff d0 	sub	r11,r5,-48
8002248c:	f4 c8 00 00 	sub	r8,r10,0
80022490:	f6 c9 00 00 	sub	r9,r11,0
80022494:	72 0e       	ld.w	lr,r9[0x0]
80022496:	91 0e       	st.w	r8[0x0],lr
80022498:	72 1e       	ld.w	lr,r9[0x4]
8002249a:	91 1e       	st.w	r8[0x4],lr
8002249c:	72 2e       	ld.w	lr,r9[0x8]
8002249e:	91 2e       	st.w	r8[0x8],lr
800224a0:	72 39       	ld.w	r9,r9[0xc]
800224a2:	91 39       	st.w	r8[0xc],r9
800224a4:	f6 e8 00 10 	ld.d	r8,r11[16]
800224a8:	f4 e9 00 10 	st.d	r10[16],r8
800224ac:	76 68       	ld.w	r8,r11[0x18]
800224ae:	95 68       	st.w	r10[0x18],r8
800224b0:	20 7d       	sub	sp,28
800224b2:	1a 98       	mov	r8,sp
800224b4:	10 9a       	mov	r10,r8
800224b6:	ee cb 00 20 	sub	r11,r7,32
800224ba:	f4 c8 00 00 	sub	r8,r10,0
800224be:	f6 c9 00 00 	sub	r9,r11,0
800224c2:	72 0e       	ld.w	lr,r9[0x0]
800224c4:	91 0e       	st.w	r8[0x0],lr
800224c6:	72 1e       	ld.w	lr,r9[0x4]
800224c8:	91 1e       	st.w	r8[0x4],lr
800224ca:	72 2e       	ld.w	lr,r9[0x8]
800224cc:	91 2e       	st.w	r8[0x8],lr
800224ce:	72 39       	ld.w	r9,r9[0xc]
800224d0:	91 39       	st.w	r8[0xc],r9
800224d2:	f6 e8 00 10 	ld.d	r8,r11[16]
800224d6:	f4 e9 00 10 	st.d	r10[16],r8
800224da:	76 68       	ld.w	r8,r11[0x18]
800224dc:	95 68       	st.w	r10[0x18],r8
800224de:	f0 16 00 7f 	mcall	r6[508]
800224e2:	2f 2d       	sub	sp,-56
800224e4:	ee cb 00 50 	sub	r11,r7,80
800224e8:	ee ca 00 a8 	sub	r10,r7,168
800224ec:	f6 c8 00 00 	sub	r8,r11,0
800224f0:	f4 c9 00 00 	sub	r9,r10,0
800224f4:	72 0c       	ld.w	r12,r9[0x0]
800224f6:	91 0c       	st.w	r8[0x0],r12
800224f8:	72 1c       	ld.w	r12,r9[0x4]
800224fa:	91 1c       	st.w	r8[0x4],r12
800224fc:	72 2c       	ld.w	r12,r9[0x8]
800224fe:	91 2c       	st.w	r8[0x8],r12
80022500:	72 39       	ld.w	r9,r9[0xc]
80022502:	91 39       	st.w	r8[0xc],r9
80022504:	f6 c8 ff f0 	sub	r8,r11,-16
80022508:	f4 c9 ff f0 	sub	r9,r10,-16
8002250c:	72 0c       	ld.w	r12,r9[0x0]
8002250e:	91 0c       	st.w	r8[0x0],r12
80022510:	72 1c       	ld.w	r12,r9[0x4]
80022512:	91 1c       	st.w	r8[0x4],r12
80022514:	72 2c       	ld.w	r12,r9[0x8]
80022516:	91 2c       	st.w	r8[0x8],r12
80022518:	72 39       	ld.w	r9,r9[0xc]
8002251a:	91 39       	st.w	r8[0xc],r9
8002251c:	f6 c8 ff e0 	sub	r8,r11,-32
80022520:	f4 c9 ff e0 	sub	r9,r10,-32
80022524:	72 0a       	ld.w	r10,r9[0x0]
80022526:	91 0a       	st.w	r8[0x0],r10
80022528:	72 1a       	ld.w	r10,r9[0x4]
8002252a:	91 1a       	st.w	r8[0x4],r10
8002252c:	72 2a       	ld.w	r10,r9[0x8]
8002252e:	91 2a       	st.w	r8[0x8],r10
80022530:	72 39       	ld.w	r9,r9[0xc]
80022532:	91 39       	st.w	r8[0xc],r9
			
			dbg_print("wp_global: lat (x1e7):");
80022534:	fe cc 01 f4 	sub	r12,pc,500
80022538:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_global.latitude*10000000,10);
8002253c:	ee ea ff e8 	ld.d	r10,r7[-24]
80022540:	30 08       	mov	r8,0
80022542:	e0 69 12 d0 	mov	r9,4816
80022546:	ea 19 41 63 	orh	r9,0x4163
8002254a:	f0 16 00 03 	mcall	r6[12]
8002254e:	14 98       	mov	r8,r10
80022550:	16 99       	mov	r9,r11
80022552:	10 9a       	mov	r10,r8
80022554:	12 9b       	mov	r11,r9
80022556:	f0 16 00 14 	mcall	r6[80]
8002255a:	18 98       	mov	r8,r12
8002255c:	30 ab       	mov	r11,10
8002255e:	10 9c       	mov	r12,r8
80022560:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" long (x1e7):");
80022564:	fe cc 02 0c 	sub	r12,pc,524
80022568:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_global.longitude*10000000,10);
8002256c:	ee ea ff e0 	ld.d	r10,r7[-32]
80022570:	30 08       	mov	r8,0
80022572:	e0 69 12 d0 	mov	r9,4816
80022576:	ea 19 41 63 	orh	r9,0x4163
8002257a:	f0 16 00 03 	mcall	r6[12]
8002257e:	14 98       	mov	r8,r10
80022580:	16 99       	mov	r9,r11
80022582:	10 9a       	mov	r10,r8
80022584:	12 9b       	mov	r11,r9
80022586:	f0 16 00 14 	mcall	r6[80]
8002258a:	18 98       	mov	r8,r12
8002258c:	30 ab       	mov	r11,10
8002258e:	10 9c       	mov	r12,r8
80022590:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" alt (x1000):");
80022594:	fe cc 02 2c 	sub	r12,pc,556
80022598:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_global.altitude*1000,10);
8002259c:	ee f9 ff f0 	ld.w	r9,r7[-16]
800225a0:	fc 18 44 7a 	movh	r8,0x447a
800225a4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800225a8:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800225ac:	30 ab       	mov	r11,10
800225ae:	10 9c       	mov	r12,r8
800225b0:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" wp_coor: x (x100):");
800225b4:	fe cc 02 3c 	sub	r12,pc,572
800225b8:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[X]*100,10);
800225bc:	ee f9 ff b0 	ld.w	r9,r7[-80]
800225c0:	fc 18 42 c8 	movh	r8,0x42c8
800225c4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800225c8:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800225cc:	30 ab       	mov	r11,10
800225ce:	10 9c       	mov	r12,r8
800225d0:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", y (x100):");
800225d4:	fe cc 02 48 	sub	r12,pc,584
800225d8:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Y]*100,10);
800225dc:	ee f9 ff b4 	ld.w	r9,r7[-76]
800225e0:	fc 18 42 c8 	movh	r8,0x42c8
800225e4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800225e8:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800225ec:	30 ab       	mov	r11,10
800225ee:	10 9c       	mov	r12,r8
800225f0:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", z (x100):");
800225f4:	fe cc 02 5c 	sub	r12,pc,604
800225f8:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Z]*100,10);
800225fc:	ee f9 ff b8 	ld.w	r9,r7[-72]
80022600:	fc 18 42 c8 	movh	r8,0x42c8
80022604:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80022608:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8002260c:	30 ab       	mov	r11,10
8002260e:	10 9c       	mov	r12,r8
80022610:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" localOrigin lat (x1e7):");
80022614:	fe cc 02 70 	sub	r12,pc,624
80022618:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.latitude*10000000,10);
8002261c:	ea ea 00 38 	ld.d	r10,r5[56]
80022620:	30 08       	mov	r8,0
80022622:	e0 69 12 d0 	mov	r9,4816
80022626:	ea 19 41 63 	orh	r9,0x4163
8002262a:	f0 16 00 03 	mcall	r6[12]
8002262e:	14 98       	mov	r8,r10
80022630:	16 99       	mov	r9,r11
80022632:	10 9a       	mov	r10,r8
80022634:	12 9b       	mov	r11,r9
80022636:	f0 16 00 14 	mcall	r6[80]
8002263a:	18 98       	mov	r8,r12
8002263c:	30 ab       	mov	r11,10
8002263e:	10 9c       	mov	r12,r8
80022640:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" long (x1e7):");
80022644:	fe cc 02 ec 	sub	r12,pc,748
80022648:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.longitude*10000000,10);
8002264c:	ea ea 00 30 	ld.d	r10,r5[48]
80022650:	30 08       	mov	r8,0
80022652:	e0 69 12 d0 	mov	r9,4816
80022656:	ea 19 41 63 	orh	r9,0x4163
8002265a:	f0 16 00 03 	mcall	r6[12]
8002265e:	14 98       	mov	r8,r10
80022660:	16 99       	mov	r9,r11
80022662:	10 9a       	mov	r10,r8
80022664:	12 9b       	mov	r11,r9
80022666:	f0 16 00 14 	mcall	r6[80]
8002266a:	18 98       	mov	r8,r12
8002266c:	30 ab       	mov	r11,10
8002266e:	10 9c       	mov	r12,r8
80022670:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" alt (x1000):");
80022674:	fe cc 03 0c 	sub	r12,pc,780
80022678:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.altitude*1000,10);
8002267c:	6b 09       	ld.w	r9,r5[0x40]
8002267e:	fc 18 44 7a 	movh	r8,0x447a
80022682:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80022686:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8002268a:	30 ab       	mov	r11,10
8002268c:	10 9c       	mov	r12,r8
8002268e:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80022692:	fe cc 14 4e 	sub	r12,pc,5198
80022696:	f0 16 00 01 	mcall	r6[4]
		
		break;
8002269a:	e0 8f 01 7e 	bral	80022996 <set_waypoint_from_frame+0x5a4>
		case MAV_FRAME_LOCAL_NED:
			waypoint_coor.pos[X] = current_wp.x;
8002269e:	ea e8 00 18 	ld.d	r8,r5[24]
800226a2:	10 9a       	mov	r10,r8
800226a4:	12 9b       	mov	r11,r9
800226a6:	f0 16 00 09 	mcall	r6[36]
800226aa:	18 98       	mov	r8,r12
800226ac:	ef 48 ff b0 	st.w	r7[-80],r8
			waypoint_coor.pos[Y] = current_wp.y;
800226b0:	ea e8 00 20 	ld.d	r8,r5[32]
800226b4:	10 9a       	mov	r10,r8
800226b6:	12 9b       	mov	r11,r9
800226b8:	f0 16 00 09 	mcall	r6[36]
800226bc:	18 98       	mov	r8,r12
800226be:	ef 48 ff b4 	st.w	r7[-76],r8
			waypoint_coor.pos[Z] = current_wp.z;
800226c2:	ea e8 00 28 	ld.d	r8,r5[40]
800226c6:	10 9a       	mov	r10,r8
800226c8:	12 9b       	mov	r11,r9
800226ca:	f0 16 00 09 	mcall	r6[36]
800226ce:	18 98       	mov	r8,r12
800226d0:	ef 48 ff b8 	st.w	r7[-72],r8
			waypoint_coor.heading= deg_to_rad(current_wp.param4);
800226d4:	6a 58       	ld.w	r8,r5[0x14]
800226d6:	10 9c       	mov	r12,r8
800226d8:	f0 16 00 02 	mcall	r6[8]
800226dc:	e0 68 2d 18 	mov	r8,11544
800226e0:	ea 18 54 44 	orh	r8,0x5444
800226e4:	e0 69 21 fb 	mov	r9,8699
800226e8:	ea 19 40 09 	orh	r9,0x4009
800226ec:	f0 16 00 03 	mcall	r6[12]
800226f0:	14 98       	mov	r8,r10
800226f2:	16 99       	mov	r9,r11
800226f4:	10 9a       	mov	r10,r8
800226f6:	12 9b       	mov	r11,r9
800226f8:	30 08       	mov	r8,0
800226fa:	e0 69 80 00 	mov	r9,32768
800226fe:	ea 19 40 66 	orh	r9,0x4066
80022702:	f0 16 00 0c 	mcall	r6[48]
80022706:	14 98       	mov	r8,r10
80022708:	16 99       	mov	r9,r11
8002270a:	10 9a       	mov	r10,r8
8002270c:	12 9b       	mov	r11,r9
8002270e:	f0 16 00 09 	mcall	r6[36]
80022712:	18 98       	mov	r8,r12
80022714:	ef 48 ff bc 	st.w	r7[-68],r8
			waypoint_coor.origin = local_to_global_position(waypoint_coor);
80022718:	ee cc 00 a8 	sub	r12,r7,168
8002271c:	20 cd       	sub	sp,48
8002271e:	1a 98       	mov	r8,sp
80022720:	10 9b       	mov	r11,r8
80022722:	ee ca 00 50 	sub	r10,r7,80
80022726:	f6 c8 00 00 	sub	r8,r11,0
8002272a:	f4 c9 00 00 	sub	r9,r10,0
8002272e:	72 0e       	ld.w	lr,r9[0x0]
80022730:	91 0e       	st.w	r8[0x0],lr
80022732:	72 1e       	ld.w	lr,r9[0x4]
80022734:	91 1e       	st.w	r8[0x4],lr
80022736:	72 2e       	ld.w	lr,r9[0x8]
80022738:	91 2e       	st.w	r8[0x8],lr
8002273a:	72 39       	ld.w	r9,r9[0xc]
8002273c:	91 39       	st.w	r8[0xc],r9
8002273e:	f6 c8 ff f0 	sub	r8,r11,-16
80022742:	f4 c9 ff f0 	sub	r9,r10,-16
80022746:	72 0e       	ld.w	lr,r9[0x0]
80022748:	91 0e       	st.w	r8[0x0],lr
8002274a:	72 1e       	ld.w	lr,r9[0x4]
8002274c:	91 1e       	st.w	r8[0x4],lr
8002274e:	72 2e       	ld.w	lr,r9[0x8]
80022750:	91 2e       	st.w	r8[0x8],lr
80022752:	72 39       	ld.w	r9,r9[0xc]
80022754:	91 39       	st.w	r8[0xc],r9
80022756:	f6 c8 ff e0 	sub	r8,r11,-32
8002275a:	f4 c9 ff e0 	sub	r9,r10,-32
8002275e:	72 0a       	ld.w	r10,r9[0x0]
80022760:	91 0a       	st.w	r8[0x0],r10
80022762:	72 1a       	ld.w	r10,r9[0x4]
80022764:	91 1a       	st.w	r8[0x4],r10
80022766:	72 2a       	ld.w	r10,r9[0x8]
80022768:	91 2a       	st.w	r8[0x8],r10
8002276a:	72 39       	ld.w	r9,r9[0xc]
8002276c:	91 39       	st.w	r8[0xc],r9
8002276e:	f0 16 00 8e 	mcall	r6[568]
80022772:	2f 4d       	sub	sp,-48
80022774:	ee ca 00 40 	sub	r10,r7,64
80022778:	ee cb 00 a8 	sub	r11,r7,168
8002277c:	f4 c8 00 00 	sub	r8,r10,0
80022780:	f6 c9 00 00 	sub	r9,r11,0
80022784:	72 0c       	ld.w	r12,r9[0x0]
80022786:	91 0c       	st.w	r8[0x0],r12
80022788:	72 1c       	ld.w	r12,r9[0x4]
8002278a:	91 1c       	st.w	r8[0x4],r12
8002278c:	72 2c       	ld.w	r12,r9[0x8]
8002278e:	91 2c       	st.w	r8[0x8],r12
80022790:	72 39       	ld.w	r9,r9[0xc]
80022792:	91 39       	st.w	r8[0xc],r9
80022794:	f6 e8 00 10 	ld.d	r8,r11[16]
80022798:	f4 e9 00 10 	st.d	r10[16],r8
8002279c:	76 68       	ld.w	r8,r11[0x18]
8002279e:	95 68       	st.w	r10[0x18],r8
		break;
800227a0:	cf b8       	rjmp	80022996 <set_waypoint_from_frame+0x5a4>
		case MAV_FRAME_MISSION:
			//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_RESULT_UNSUPPORTED);
		break;
		case MAV_FRAME_GLOBAL_RELATIVE_ALT:
			waypoint_global.latitude = current_wp.x;
800227a2:	ea e8 00 18 	ld.d	r8,r5[24]
800227a6:	ee e9 ff e8 	st.d	r7[-24],r8
			waypoint_global.longitude = current_wp.y;
800227aa:	ea e8 00 20 	ld.d	r8,r5[32]
800227ae:	ee e9 ff e0 	st.d	r7[-32],r8
			waypoint_global.altitude = current_wp.z;
800227b2:	ea e8 00 28 	ld.d	r8,r5[40]
800227b6:	10 9a       	mov	r10,r8
800227b8:	12 9b       	mov	r11,r9
800227ba:	f0 16 00 09 	mcall	r6[36]
800227be:	18 98       	mov	r8,r12
800227c0:	ef 48 ff f0 	st.w	r7[-16],r8
		
			global_position_t origin_relative_alt = origin;
800227c4:	ee ca 00 78 	sub	r10,r7,120
800227c8:	ea cb ff d0 	sub	r11,r5,-48
800227cc:	f4 c8 00 00 	sub	r8,r10,0
800227d0:	f6 c9 00 00 	sub	r9,r11,0
800227d4:	72 0c       	ld.w	r12,r9[0x0]
800227d6:	91 0c       	st.w	r8[0x0],r12
800227d8:	72 1c       	ld.w	r12,r9[0x4]
800227da:	91 1c       	st.w	r8[0x4],r12
800227dc:	72 2c       	ld.w	r12,r9[0x8]
800227de:	91 2c       	st.w	r8[0x8],r12
800227e0:	72 39       	ld.w	r9,r9[0xc]
800227e2:	91 39       	st.w	r8[0xc],r9
800227e4:	f6 e8 00 10 	ld.d	r8,r11[16]
800227e8:	f4 e9 00 10 	st.d	r10[16],r8
800227ec:	76 68       	ld.w	r8,r11[0x18]
800227ee:	95 68       	st.w	r10[0x18],r8
			origin_relative_alt.altitude = 0.0;
800227f0:	30 08       	mov	r8,0
800227f2:	ef 48 ff 98 	st.w	r7[-104],r8
			waypoint_coor = global_to_local_position(waypoint_global,origin_relative_alt);
800227f6:	ee cc 00 a8 	sub	r12,r7,168
800227fa:	20 7d       	sub	sp,28
800227fc:	1a 98       	mov	r8,sp
800227fe:	10 9a       	mov	r10,r8
80022800:	ee cb 00 78 	sub	r11,r7,120
80022804:	f4 c8 00 00 	sub	r8,r10,0
80022808:	f6 c9 00 00 	sub	r9,r11,0
8002280c:	72 0e       	ld.w	lr,r9[0x0]
8002280e:	91 0e       	st.w	r8[0x0],lr
80022810:	72 1e       	ld.w	lr,r9[0x4]
80022812:	91 1e       	st.w	r8[0x4],lr
80022814:	72 2e       	ld.w	lr,r9[0x8]
80022816:	91 2e       	st.w	r8[0x8],lr
80022818:	72 39       	ld.w	r9,r9[0xc]
8002281a:	91 39       	st.w	r8[0xc],r9
8002281c:	f6 e8 00 10 	ld.d	r8,r11[16]
80022820:	f4 e9 00 10 	st.d	r10[16],r8
80022824:	76 68       	ld.w	r8,r11[0x18]
80022826:	95 68       	st.w	r10[0x18],r8
80022828:	20 7d       	sub	sp,28
8002282a:	1a 98       	mov	r8,sp
8002282c:	10 9a       	mov	r10,r8
8002282e:	ee cb 00 20 	sub	r11,r7,32
80022832:	f4 c8 00 00 	sub	r8,r10,0
80022836:	f6 c9 00 00 	sub	r9,r11,0
8002283a:	72 0e       	ld.w	lr,r9[0x0]
8002283c:	91 0e       	st.w	r8[0x0],lr
8002283e:	72 1e       	ld.w	lr,r9[0x4]
80022840:	91 1e       	st.w	r8[0x4],lr
80022842:	72 2e       	ld.w	lr,r9[0x8]
80022844:	91 2e       	st.w	r8[0x8],lr
80022846:	72 39       	ld.w	r9,r9[0xc]
80022848:	91 39       	st.w	r8[0xc],r9
8002284a:	f6 e8 00 10 	ld.d	r8,r11[16]
8002284e:	f4 e9 00 10 	st.d	r10[16],r8
80022852:	76 68       	ld.w	r8,r11[0x18]
80022854:	95 68       	st.w	r10[0x18],r8
80022856:	f0 16 00 7f 	mcall	r6[508]
8002285a:	2f 2d       	sub	sp,-56
8002285c:	ee cb 00 50 	sub	r11,r7,80
80022860:	ee ca 00 a8 	sub	r10,r7,168
80022864:	f6 c8 00 00 	sub	r8,r11,0
80022868:	f4 c9 00 00 	sub	r9,r10,0
8002286c:	72 0c       	ld.w	r12,r9[0x0]
8002286e:	91 0c       	st.w	r8[0x0],r12
80022870:	72 1c       	ld.w	r12,r9[0x4]
80022872:	91 1c       	st.w	r8[0x4],r12
80022874:	72 2c       	ld.w	r12,r9[0x8]
80022876:	91 2c       	st.w	r8[0x8],r12
80022878:	72 39       	ld.w	r9,r9[0xc]
8002287a:	91 39       	st.w	r8[0xc],r9
8002287c:	f6 c8 ff f0 	sub	r8,r11,-16
80022880:	f4 c9 ff f0 	sub	r9,r10,-16
80022884:	72 0c       	ld.w	r12,r9[0x0]
80022886:	91 0c       	st.w	r8[0x0],r12
80022888:	72 1c       	ld.w	r12,r9[0x4]
8002288a:	91 1c       	st.w	r8[0x4],r12
8002288c:	72 2c       	ld.w	r12,r9[0x8]
8002288e:	91 2c       	st.w	r8[0x8],r12
80022890:	72 39       	ld.w	r9,r9[0xc]
80022892:	91 39       	st.w	r8[0xc],r9
80022894:	f6 c8 ff e0 	sub	r8,r11,-32
80022898:	f4 c9 ff e0 	sub	r9,r10,-32
8002289c:	72 0a       	ld.w	r10,r9[0x0]
8002289e:	91 0a       	st.w	r8[0x0],r10
800228a0:	72 1a       	ld.w	r10,r9[0x4]
800228a2:	91 1a       	st.w	r8[0x4],r10
800228a4:	72 2a       	ld.w	r10,r9[0x8]
800228a6:	91 2a       	st.w	r8[0x8],r10
800228a8:	72 39       	ld.w	r9,r9[0xc]
800228aa:	91 39       	st.w	r8[0xc],r9
		
			dbg_print("LocalOrigin: lat (x1e7):");
800228ac:	fe cc 04 ec 	sub	r12,pc,1260
800228b0:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin_relative_alt.latitude * 10000000,10);
800228b4:	ee ea ff 90 	ld.d	r10,r7[-112]
800228b8:	30 08       	mov	r8,0
800228ba:	e0 69 12 d0 	mov	r9,4816
800228be:	ea 19 41 63 	orh	r9,0x4163
800228c2:	f0 16 00 03 	mcall	r6[12]
800228c6:	14 98       	mov	r8,r10
800228c8:	16 99       	mov	r9,r11
800228ca:	10 9a       	mov	r10,r8
800228cc:	12 9b       	mov	r11,r9
800228ce:	f0 16 00 14 	mcall	r6[80]
800228d2:	18 98       	mov	r8,r12
800228d4:	30 ab       	mov	r11,10
800228d6:	10 9c       	mov	r12,r8
800228d8:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" long (x1e7):");
800228dc:	fe cc 05 84 	sub	r12,pc,1412
800228e0:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin_relative_alt.longitude * 10000000,10);
800228e4:	ee ea ff 88 	ld.d	r10,r7[-120]
800228e8:	30 08       	mov	r8,0
800228ea:	e0 69 12 d0 	mov	r9,4816
800228ee:	ea 19 41 63 	orh	r9,0x4163
800228f2:	f0 16 00 03 	mcall	r6[12]
800228f6:	14 98       	mov	r8,r10
800228f8:	16 99       	mov	r9,r11
800228fa:	10 9a       	mov	r10,r8
800228fc:	12 9b       	mov	r11,r9
800228fe:	f0 16 00 14 	mcall	r6[80]
80022902:	18 98       	mov	r8,r12
80022904:	30 ab       	mov	r11,10
80022906:	10 9c       	mov	r12,r8
80022908:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" global alt (x1000):");
8002290c:	fe cc 05 30 	sub	r12,pc,1328
80022910:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.altitude*1000,10);
80022914:	6b 09       	ld.w	r9,r5[0x40]
80022916:	fc 18 44 7a 	movh	r8,0x447a
8002291a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002291e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80022922:	30 ab       	mov	r11,10
80022924:	10 9c       	mov	r12,r8
80022926:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" wp_coor: x (x100):");
8002292a:	fe cc 05 b2 	sub	r12,pc,1458
8002292e:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[X]*100,10);
80022932:	ee f9 ff b0 	ld.w	r9,r7[-80]
80022936:	fc 18 42 c8 	movh	r8,0x42c8
8002293a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002293e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80022942:	30 ab       	mov	r11,10
80022944:	10 9c       	mov	r12,r8
80022946:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", y (x100):");
8002294a:	fe cc 05 be 	sub	r12,pc,1470
8002294e:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Y]*100,10);
80022952:	ee f9 ff b4 	ld.w	r9,r7[-76]
80022956:	fc 18 42 c8 	movh	r8,0x42c8
8002295a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002295e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80022962:	30 ab       	mov	r11,10
80022964:	10 9c       	mov	r12,r8
80022966:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", z (x100):");
8002296a:	fe cc 05 d2 	sub	r12,pc,1490
8002296e:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Z]*100,10);
80022972:	ee f9 ff b8 	ld.w	r9,r7[-72]
80022976:	fc 18 42 c8 	movh	r8,0x42c8
8002297a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002297e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80022982:	30 ab       	mov	r11,10
80022984:	10 9c       	mov	r12,r8
80022986:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8002298a:	fe cc 17 46 	sub	r12,pc,5958
8002298e:	f0 16 00 01 	mcall	r6[4]
80022992:	c0 28       	rjmp	80022996 <set_waypoint_from_frame+0x5a4>
			waypoint_coor.heading= deg_to_rad(current_wp.param4);
			waypoint_coor.origin = local_to_global_position(waypoint_coor);
		break;
		case MAV_FRAME_MISSION:
			//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_RESULT_UNSUPPORTED);
		break;
80022994:	d7 03       	nop
		case MAV_FRAME_LOCAL_ENU:
			//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_RESULT_UNSUPPORTED);
		break;
	}
	
	return waypoint_coor;
80022996:	06 9b       	mov	r11,r3
80022998:	ee ca 00 50 	sub	r10,r7,80
8002299c:	f6 c8 00 00 	sub	r8,r11,0
800229a0:	f4 c9 00 00 	sub	r9,r10,0
800229a4:	72 0c       	ld.w	r12,r9[0x0]
800229a6:	91 0c       	st.w	r8[0x0],r12
800229a8:	72 1c       	ld.w	r12,r9[0x4]
800229aa:	91 1c       	st.w	r8[0x4],r12
800229ac:	72 2c       	ld.w	r12,r9[0x8]
800229ae:	91 2c       	st.w	r8[0x8],r12
800229b0:	72 39       	ld.w	r9,r9[0xc]
800229b2:	91 39       	st.w	r8[0xc],r9
800229b4:	f6 c8 ff f0 	sub	r8,r11,-16
800229b8:	f4 c9 ff f0 	sub	r9,r10,-16
800229bc:	72 0c       	ld.w	r12,r9[0x0]
800229be:	91 0c       	st.w	r8[0x0],r12
800229c0:	72 1c       	ld.w	r12,r9[0x4]
800229c2:	91 1c       	st.w	r8[0x4],r12
800229c4:	72 2c       	ld.w	r12,r9[0x8]
800229c6:	91 2c       	st.w	r8[0x8],r12
800229c8:	72 39       	ld.w	r9,r9[0xc]
800229ca:	91 39       	st.w	r8[0xc],r9
800229cc:	f6 c8 ff e0 	sub	r8,r11,-32
800229d0:	f4 c9 ff e0 	sub	r9,r10,-32
800229d4:	72 0a       	ld.w	r10,r9[0x0]
800229d6:	91 0a       	st.w	r8[0x0],r10
800229d8:	72 1a       	ld.w	r10,r9[0x4]
800229da:	91 1a       	st.w	r8[0x4],r10
800229dc:	72 2a       	ld.w	r10,r9[0x8]
800229de:	91 2a       	st.w	r8[0x8],r10
800229e0:	72 39       	ld.w	r9,r9[0xc]
800229e2:	91 39       	st.w	r8[0xc],r9
}
800229e4:	06 9c       	mov	r12,r3
800229e6:	2d 6d       	sub	sp,-168
800229e8:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800229ec:	80 02       	ld.sh	r2,r0[0x0]
800229ee:	22 84       	sub	r4,40
800229f0:	50 6f       	stdsp	sp[0x18],pc
800229f2:	73 69       	ld.w	r9,r9[0x58]
800229f4:	74 69       	ld.w	r9,r10[0x18]
800229f6:	6f 6e       	ld.w	lr,r7[0x58]
800229f8:	20 68       	sub	r8,6
800229fa:	6f 6c       	ld.w	r12,r7[0x58]
800229fc:	64 20       	ld.w	r0,r2[0x8]
800229fe:	61 74       	ld.w	r4,r0[0x5c]
80022a00:	3a 20       	mov	r0,-94
80022a02:	00 00       	add	r0,r0
80022a04:	29 0a       	sub	r10,-112
	...

80022a08 <wp_hold_init>:

void wp_hold_init()
{
80022a08:	eb cd 40 c0 	pushm	r6-r7,lr
80022a0c:	1a 97       	mov	r7,sp
80022a0e:	20 3d       	sub	sp,12
80022a10:	4d 86       	lddpc	r6,80022b70 <wp_hold_init+0x168>
80022a12:	1e 26       	rsub	r6,pc
	if (centralData->waypoint_hold_init == 0)
80022a14:	ec f8 00 00 	ld.w	r8,r6[0]
80022a18:	70 08       	ld.w	r8,r8[0x0]
80022a1a:	f1 38 0c ff 	ld.ub	r8,r8[3327]
80022a1e:	ec 18 00 01 	eorl	r8,0x1
80022a22:	5c 58       	castu.b	r8
80022a24:	e0 80 00 a3 	breq	80022b6a <wp_hold_init+0x162>
	{
		dbg_print("Position hold at: ");
80022a28:	fe cc 00 38 	sub	r12,pc,56
80022a2c:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(centralData->position_estimator.localPosition.pos[X],10);
80022a30:	ec f8 00 00 	ld.w	r8,r6[0]
80022a34:	70 08       	ld.w	r8,r8[0x0]
80022a36:	f0 f8 09 e4 	ld.w	r8,r8[2532]
80022a3a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80022a3e:	30 ab       	mov	r11,10
80022a40:	10 9c       	mov	r12,r8
80022a42:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(centralData->position_estimator.localPosition.pos[Y],10);
80022a46:	ec f8 00 00 	ld.w	r8,r6[0]
80022a4a:	70 08       	ld.w	r8,r8[0x0]
80022a4c:	f0 f8 09 e8 	ld.w	r8,r8[2536]
80022a50:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80022a54:	30 ab       	mov	r11,10
80022a56:	10 9c       	mov	r12,r8
80022a58:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(centralData->position_estimator.localPosition.pos[Z],10);
80022a5c:	ec f8 00 00 	ld.w	r8,r6[0]
80022a60:	70 08       	ld.w	r8,r8[0x0]
80022a62:	f0 f8 09 ec 	ld.w	r8,r8[2540]
80022a66:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80022a6a:	30 ab       	mov	r11,10
80022a6c:	10 9c       	mov	r12,r8
80022a6e:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num((int)(centralData->position_estimator.localPosition.heading*180.0/3.14),10);
80022a72:	ec f8 00 00 	ld.w	r8,r6[0]
80022a76:	70 08       	ld.w	r8,r8[0x0]
80022a78:	f0 f8 09 f0 	ld.w	r8,r8[2544]
80022a7c:	10 9c       	mov	r12,r8
80022a7e:	f0 16 00 02 	mcall	r6[8]
80022a82:	30 08       	mov	r8,0
80022a84:	e0 69 80 00 	mov	r9,32768
80022a88:	ea 19 40 66 	orh	r9,0x4066
80022a8c:	f0 16 00 03 	mcall	r6[12]
80022a90:	14 98       	mov	r8,r10
80022a92:	16 99       	mov	r9,r11
80022a94:	10 9a       	mov	r10,r8
80022a96:	12 9b       	mov	r11,r9
80022a98:	e0 68 85 1f 	mov	r8,34079
80022a9c:	ea 18 51 eb 	orh	r8,0x51eb
80022aa0:	e0 69 1e b8 	mov	r9,7864
80022aa4:	ea 19 40 09 	orh	r9,0x4009
80022aa8:	f0 16 00 0c 	mcall	r6[48]
80022aac:	14 98       	mov	r8,r10
80022aae:	16 99       	mov	r9,r11
80022ab0:	10 9a       	mov	r10,r8
80022ab2:	12 9b       	mov	r11,r9
80022ab4:	f0 16 00 14 	mcall	r6[80]
80022ab8:	18 98       	mov	r8,r12
80022aba:	30 ab       	mov	r11,10
80022abc:	10 9c       	mov	r12,r8
80022abe:	f0 16 00 04 	mcall	r6[16]
		dbg_print(")\n");
80022ac2:	fe cc 00 be 	sub	r12,pc,190
80022ac6:	f0 16 00 01 	mcall	r6[4]
		
		centralData->waypoint_hold_init = true;
80022aca:	ec f8 00 00 	ld.w	r8,r6[0]
80022ace:	70 09       	ld.w	r9,r8[0x0]
80022ad0:	30 18       	mov	r8,1
80022ad2:	f3 68 0c ff 	st.b	r9[3327],r8
		centralData->waypoint_hold_coordinates = centralData->position_estimator.localPosition;
80022ad6:	ec f8 00 00 	ld.w	r8,r6[0]
80022ada:	70 09       	ld.w	r9,r8[0x0]
80022adc:	ec f8 00 00 	ld.w	r8,r6[0]
80022ae0:	70 08       	ld.w	r8,r8[0x0]
80022ae2:	f2 cb f3 68 	sub	r11,r9,-3224
80022ae6:	f0 ca f6 1c 	sub	r10,r8,-2532
80022aea:	f6 c8 00 00 	sub	r8,r11,0
80022aee:	f4 c9 00 00 	sub	r9,r10,0
80022af2:	72 0c       	ld.w	r12,r9[0x0]
80022af4:	91 0c       	st.w	r8[0x0],r12
80022af6:	72 1c       	ld.w	r12,r9[0x4]
80022af8:	91 1c       	st.w	r8[0x4],r12
80022afa:	72 2c       	ld.w	r12,r9[0x8]
80022afc:	91 2c       	st.w	r8[0x8],r12
80022afe:	72 39       	ld.w	r9,r9[0xc]
80022b00:	91 39       	st.w	r8[0xc],r9
80022b02:	f6 c8 ff f0 	sub	r8,r11,-16
80022b06:	f4 c9 ff f0 	sub	r9,r10,-16
80022b0a:	72 0c       	ld.w	r12,r9[0x0]
80022b0c:	91 0c       	st.w	r8[0x0],r12
80022b0e:	72 1c       	ld.w	r12,r9[0x4]
80022b10:	91 1c       	st.w	r8[0x4],r12
80022b12:	72 2c       	ld.w	r12,r9[0x8]
80022b14:	91 2c       	st.w	r8[0x8],r12
80022b16:	72 39       	ld.w	r9,r9[0xc]
80022b18:	91 39       	st.w	r8[0xc],r9
80022b1a:	f6 c8 ff e0 	sub	r8,r11,-32
80022b1e:	f4 c9 ff e0 	sub	r9,r10,-32
80022b22:	72 0a       	ld.w	r10,r9[0x0]
80022b24:	91 0a       	st.w	r8[0x0],r10
80022b26:	72 1a       	ld.w	r10,r9[0x4]
80022b28:	91 1a       	st.w	r8[0x4],r10
80022b2a:	72 2a       	ld.w	r10,r9[0x8]
80022b2c:	91 2a       	st.w	r8[0x8],r10
80022b2e:	72 39       	ld.w	r9,r9[0xc]
80022b30:	91 39       	st.w	r8[0xc],r9
		
		Aero_Attitude_t aero_attitude;
		aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
80022b32:	ec f8 00 00 	ld.w	r8,r6[0]
80022b36:	70 09       	ld.w	r9,r8[0x0]
80022b38:	ee ca 00 0c 	sub	r10,r7,12
80022b3c:	20 4d       	sub	sp,16
80022b3e:	1a 98       	mov	r8,sp
80022b40:	20 08       	sub	r8,0
80022b42:	20 09       	sub	r9,0
80022b44:	72 0b       	ld.w	r11,r9[0x0]
80022b46:	91 0b       	st.w	r8[0x0],r11
80022b48:	72 1b       	ld.w	r11,r9[0x4]
80022b4a:	91 1b       	st.w	r8[0x4],r11
80022b4c:	72 2b       	ld.w	r11,r9[0x8]
80022b4e:	91 2b       	st.w	r8[0x8],r11
80022b50:	72 39       	ld.w	r9,r9[0xc]
80022b52:	91 39       	st.w	r8[0xc],r9
80022b54:	14 9c       	mov	r12,r10
80022b56:	f0 16 00 72 	mcall	r6[456]
80022b5a:	2f cd       	sub	sp,-16
		centralData->waypoint_hold_coordinates.heading = aero_attitude.rpy[2];
80022b5c:	ec f8 00 00 	ld.w	r8,r6[0]
80022b60:	70 08       	ld.w	r8,r8[0x0]
80022b62:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022b66:	f1 49 0c a4 	st.w	r8[3236],r9
	}
}
80022b6a:	2f dd       	sub	sp,-12
80022b6c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022b70:	80 02       	ld.sh	r2,r0[0x0]
80022b72:	28 96       	sub	r6,-119

80022b74 <waypoint_hold_position_handler>:

void waypoint_hold_position_handler()
{
80022b74:	eb cd 40 c0 	pushm	r6-r7,lr
80022b78:	1a 97       	mov	r7,sp
80022b7a:	48 96       	lddpc	r6,80022b9c <waypoint_hold_position_handler+0x28>
80022b7c:	1e 26       	rsub	r6,pc
	if (!centralData->waypoint_set)
80022b7e:	ec f8 00 00 	ld.w	r8,r6[0]
80022b82:	70 08       	ld.w	r8,r8[0x0]
80022b84:	f1 38 0c fc 	ld.ub	r8,r8[3324]
80022b88:	ec 18 00 01 	eorl	r8,0x1
80022b8c:	5c 58       	castu.b	r8
80022b8e:	c0 30       	breq	80022b94 <waypoint_hold_position_handler+0x20>
	{
		init_wp();
80022b90:	f0 16 00 93 	mcall	r6[588]
	}
	wp_hold_init();
80022b94:	f0 16 00 ba 	mcall	r6[744]
}
80022b98:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022b9c:	80 02       	ld.sh	r2,r0[0x0]
80022b9e:	2a 00       	sub	r0,-96
80022ba0:	20 72       	sub	r2,7
80022ba2:	65 61       	ld.w	r1,r2[0x58]
80022ba4:	63 68       	ld.w	r8,r1[0x58]
80022ba6:	65 64       	ld.w	r4,r2[0x58]
80022ba8:	2c 20       	sub	r0,-62
80022baa:	64 69       	ld.w	r9,r2[0x18]
80022bac:	73 74       	ld.w	r4,r9[0x5c]
80022bae:	61 6e       	ld.w	lr,r0[0x58]
80022bb0:	63 65       	ld.w	r5,r1[0x58]
80022bb2:	3a 00       	mov	r0,-96
80022bb4:	20 6c       	sub	r12,6
80022bb6:	65 73       	ld.w	r3,r2[0x5c]
80022bb8:	73 20       	ld.w	r0,r9[0x48]
80022bba:	74 68       	ld.w	r8,r10[0x18]
80022bbc:	61 6e       	ld.w	lr,r0[0x58]
80022bbe:	20 3a       	sub	r10,3
80022bc0:	00 00       	add	r0,r0
80022bc2:	00 00       	add	r0,r0
80022bc4:	2e 0a       	sub	r10,-32
80022bc6:	00 00       	add	r0,r0
80022bc8:	41 75       	lddsp	r5,sp[0x5c]
80022bca:	74 6f       	ld.w	pc,r10[0x18]
80022bcc:	63 6f       	ld.w	pc,r1[0x58]
80022bce:	6e 74       	ld.w	r4,r7[0x1c]
80022bd0:	69 6e       	ld.w	lr,r4[0x58]
80022bd2:	75 65       	ld.w	r5,r10[0x58]
80022bd4:	20 74       	sub	r4,7
80022bd6:	6f 77       	ld.w	r7,r7[0x5c]
80022bd8:	61 72       	ld.w	r2,r0[0x5c]
80022bda:	64 73       	ld.w	r3,r2[0x1c]
80022bdc:	20 77       	sub	r7,7
80022bde:	61 79       	ld.w	r9,r0[0x5c]
80022be0:	70 6f       	ld.w	pc,r8[0x18]
80022be2:	69 6e       	ld.w	lr,r4[0x58]
80022be4:	74 20       	ld.w	r0,r10[0x8]
80022be6:	4e 72       	lddpc	r2,80022d80 <waypoint_navigation_handler+0x18e>
80022be8:	00 00       	add	r0,r0
80022bea:	00 00       	add	r0,r0
80022bec:	53 74       	stdsp	sp[0xdc],r4
80022bee:	6f 70       	ld.w	r0,r7[0x5c]
80022bf0:	0a 00       	add	r0,r5

80022bf2 <waypoint_navigation_handler>:

void waypoint_navigation_handler()
{
80022bf2:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80022bf6:	1a 97       	mov	r7,sp
80022bf8:	21 0d       	sub	sp,64
80022bfa:	fe f6 03 ba 	ld.w	r6,pc[954]
80022bfe:	1e 26       	rsub	r6,pc

	if (centralData->waypoint_set)
80022c00:	ec f8 00 00 	ld.w	r8,r6[0]
80022c04:	70 08       	ld.w	r8,r8[0x0]
80022c06:	f1 38 0c fc 	ld.ub	r8,r8[3324]
80022c0a:	58 08       	cp.w	r8,0
80022c0c:	e0 80 01 cd 	breq	80022fa6 <waypoint_navigation_handler+0x3b4>
	{
		uint8_t i;
		float rel_pos[3];
		for (i=0;i<3;i++)
80022c10:	30 08       	mov	r8,0
80022c12:	ef 68 ff ff 	st.b	r7[-1],r8
80022c16:	c2 18       	rjmp	80022c58 <waypoint_navigation_handler+0x66>
		{
			rel_pos[i] = centralData->waypoint_coordinates.pos[i]-centralData->position_estimator.localPosition.pos[i];
80022c18:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80022c1c:	ec f9 00 00 	ld.w	r9,r6[0]
80022c20:	72 09       	ld.w	r9,r9[0x0]
80022c22:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80022c26:	f4 ca fc e6 	sub	r10,r10,-794
80022c2a:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80022c2e:	ec f9 00 00 	ld.w	r9,r6[0]
80022c32:	72 09       	ld.w	r9,r9[0x0]
80022c34:	ef 3b ff ff 	ld.ub	r11,r7[-1]
80022c38:	f6 cb fd 87 	sub	r11,r11,-633
80022c3c:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80022c40:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80022c44:	a3 68       	lsl	r8,0x2
80022c46:	ee 08 00 08 	add	r8,r7,r8
80022c4a:	f1 49 ff f0 	st.w	r8[-16],r9

	if (centralData->waypoint_set)
	{
		uint8_t i;
		float rel_pos[3];
		for (i=0;i<3;i++)
80022c4e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80022c52:	2f f8       	sub	r8,-1
80022c54:	ef 68 ff ff 	st.b	r7[-1],r8
80022c58:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80022c5c:	30 28       	mov	r8,2
80022c5e:	f0 09 18 00 	cp.b	r9,r8
80022c62:	fe 98 ff db 	brls	80022c18 <waypoint_navigation_handler+0x26>
		{
			rel_pos[i] = centralData->waypoint_coordinates.pos[i]-centralData->position_estimator.localPosition.pos[i];
		}
		centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
80022c66:	ec f8 00 00 	ld.w	r8,r6[0]
80022c6a:	70 05       	ld.w	r5,r8[0x0]
80022c6c:	ee c8 00 10 	sub	r8,r7,16
80022c70:	10 9c       	mov	r12,r8
80022c72:	fe b0 f0 91 	rcall	80020d94 <vector_norm_sqr>
80022c76:	18 98       	mov	r8,r12
80022c78:	eb 48 0c f8 	st.w	r5[3320],r8
		
		if (centralData->dist2wp_sqr < (centralData->current_waypoint.param2*centralData->current_waypoint.param2))
80022c7c:	ec f8 00 00 	ld.w	r8,r6[0]
80022c80:	70 08       	ld.w	r8,r8[0x0]
80022c82:	f0 fa 0c f8 	ld.w	r10,r8[3320]
80022c86:	ec f8 00 00 	ld.w	r8,r6[0]
80022c8a:	70 08       	ld.w	r8,r8[0x0]
80022c8c:	f0 f9 0c 40 	ld.w	r9,r8[3136]
80022c90:	ec f8 00 00 	ld.w	r8,r6[0]
80022c94:	70 08       	ld.w	r8,r8[0x0]
80022c96:	f0 f8 0c 40 	ld.w	r8,r8[3136]
80022c9a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80022c9e:	30 18       	mov	r8,1
80022ca0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80022ca4:	e0 8c 00 03 	brvs	80022caa <waypoint_navigation_handler+0xb8>
80022ca8:	c0 25       	brlt	80022cac <waypoint_navigation_handler+0xba>
80022caa:	30 08       	mov	r8,0
80022cac:	5c 58       	castu.b	r8
80022cae:	e0 80 01 80 	breq	80022fae <waypoint_navigation_handler+0x3bc>
		{
			dbg_print("Waypoint Nr");
80022cb2:	fe cc 1d a6 	sub	r12,pc,7590
80022cb6:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(centralData->current_wp_count,10);
80022cba:	ec f8 00 00 	ld.w	r8,r6[0]
80022cbe:	70 08       	ld.w	r8,r8[0x0]
80022cc0:	f1 38 0c 66 	ld.ub	r8,r8[3174]
80022cc4:	5c 68       	casts.b	r8
80022cc6:	30 ab       	mov	r11,10
80022cc8:	10 9c       	mov	r12,r8
80022cca:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" reached, distance:");
80022cce:	fe cc 01 2e 	sub	r12,pc,302
80022cd2:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(sqrt(centralData->dist2wp_sqr),10);
80022cd6:	ec f8 00 00 	ld.w	r8,r6[0]
80022cda:	70 08       	ld.w	r8,r8[0x0]
80022cdc:	f0 f8 0c f8 	ld.w	r8,r8[3320]
80022ce0:	10 9c       	mov	r12,r8
80022ce2:	f0 16 00 02 	mcall	r6[8]
80022ce6:	14 98       	mov	r8,r10
80022ce8:	16 99       	mov	r9,r11
80022cea:	10 9a       	mov	r10,r8
80022cec:	12 9b       	mov	r11,r9
80022cee:	f0 16 00 70 	mcall	r6[448]
80022cf2:	14 98       	mov	r8,r10
80022cf4:	16 99       	mov	r9,r11
80022cf6:	10 9a       	mov	r10,r8
80022cf8:	12 9b       	mov	r11,r9
80022cfa:	f0 16 00 14 	mcall	r6[80]
80022cfe:	18 98       	mov	r8,r12
80022d00:	30 ab       	mov	r11,10
80022d02:	10 9c       	mov	r12,r8
80022d04:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" less than :");
80022d08:	fe cc 01 54 	sub	r12,pc,340
80022d0c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(centralData->current_waypoint.param2,10);
80022d10:	ec f8 00 00 	ld.w	r8,r6[0]
80022d14:	70 08       	ld.w	r8,r8[0x0]
80022d16:	f0 f8 0c 40 	ld.w	r8,r8[3136]
80022d1a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80022d1e:	30 ab       	mov	r11,10
80022d20:	10 9c       	mov	r12,r8
80022d22:	f0 16 00 04 	mcall	r6[16]
			dbg_print(".\n");
80022d26:	fe cc 01 62 	sub	r12,pc,354
80022d2a:	f0 16 00 01 	mcall	r6[4]
			mavlink_msg_mission_item_reached_send(MAVLINK_COMM_0,centralData->current_wp_count);
80022d2e:	ec f8 00 00 	ld.w	r8,r6[0]
80022d32:	70 08       	ld.w	r8,r8[0x0]
80022d34:	f1 38 0c 66 	ld.ub	r8,r8[3174]
80022d38:	5c 68       	casts.b	r8
80022d3a:	5c 88       	casts.h	r8
80022d3c:	5c 78       	castu.h	r8
80022d3e:	10 9b       	mov	r11,r8
80022d40:	30 0c       	mov	r12,0
80022d42:	fe b0 ef 5b 	rcall	80020bf8 <mavlink_msg_mission_item_reached_send>
			
			centralData->waypoint_list[centralData->current_wp_count].current = 0;
80022d46:	ec f8 00 00 	ld.w	r8,r6[0]
80022d4a:	70 0a       	ld.w	r10,r8[0x0]
80022d4c:	ec f8 00 00 	ld.w	r8,r6[0]
80022d50:	70 08       	ld.w	r8,r8[0x0]
80022d52:	f1 38 0c 66 	ld.ub	r8,r8[3174]
80022d56:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80022d5a:	12 98       	mov	r8,r9
80022d5c:	a1 78       	lsl	r8,0x1
80022d5e:	12 08       	add	r8,r9
80022d60:	a5 68       	lsl	r8,0x4
80022d62:	f4 08 00 08 	add	r8,r10,r8
80022d66:	f0 c9 f5 a8 	sub	r9,r8,-2648
80022d6a:	30 08       	mov	r8,0
80022d6c:	b2 88       	st.b	r9[0x0],r8
			if (centralData->current_waypoint.autocontinue == 1)
80022d6e:	ec f8 00 00 	ld.w	r8,r6[0]
80022d72:	70 08       	ld.w	r8,r8[0x0]
80022d74:	f1 39 0c 39 	ld.ub	r9,r8[3129]
80022d78:	30 18       	mov	r8,1
80022d7a:	f0 09 18 00 	cp.b	r9,r8
80022d7e:	e0 81 01 07 	brne	80022f8c <waypoint_navigation_handler+0x39a>
			{
				dbg_print("Autocontinue towards waypoint Nr");
80022d82:	fe cc 01 ba 	sub	r12,pc,442
80022d86:	f0 16 00 01 	mcall	r6[4]
				
				if (centralData->current_wp_count == (centralData->number_of_waypoints-1))
80022d8a:	ec f8 00 00 	ld.w	r8,r6[0]
80022d8e:	70 08       	ld.w	r8,r8[0x0]
80022d90:	f1 38 0c 66 	ld.ub	r8,r8[3174]
80022d94:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80022d98:	ec f8 00 00 	ld.w	r8,r6[0]
80022d9c:	70 08       	ld.w	r8,r8[0x0]
80022d9e:	f1 08 0c 64 	ld.sh	r8,r8[3172]
80022da2:	5c 78       	castu.h	r8
80022da4:	20 18       	sub	r8,1
80022da6:	10 39       	cp.w	r9,r8
80022da8:	c0 81       	brne	80022db8 <waypoint_navigation_handler+0x1c6>
				{
					centralData->current_wp_count = 0;
80022daa:	ec f8 00 00 	ld.w	r8,r6[0]
80022dae:	70 09       	ld.w	r9,r8[0x0]
80022db0:	30 08       	mov	r8,0
80022db2:	f3 68 0c 66 	st.b	r9[3174],r8
80022db6:	c0 a8       	rjmp	80022dca <waypoint_navigation_handler+0x1d8>
					}else{
					centralData->current_wp_count++;
80022db8:	ec f8 00 00 	ld.w	r8,r6[0]
80022dbc:	70 08       	ld.w	r8,r8[0x0]
80022dbe:	f1 39 0c 66 	ld.ub	r9,r8[3174]
80022dc2:	2f f9       	sub	r9,-1
80022dc4:	5c 59       	castu.b	r9
80022dc6:	f1 69 0c 66 	st.b	r8[3174],r9
				}
				dbg_print_num(centralData->current_wp_count,10);
80022dca:	ec f8 00 00 	ld.w	r8,r6[0]
80022dce:	70 08       	ld.w	r8,r8[0x0]
80022dd0:	f1 38 0c 66 	ld.ub	r8,r8[3174]
80022dd4:	5c 68       	casts.b	r8
80022dd6:	30 ab       	mov	r11,10
80022dd8:	10 9c       	mov	r12,r8
80022dda:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
80022dde:	fe cc 1b 9a 	sub	r12,pc,7066
80022de2:	f0 16 00 01 	mcall	r6[4]
				centralData->waypoint_list[centralData->current_wp_count].current = 1;
80022de6:	ec f8 00 00 	ld.w	r8,r6[0]
80022dea:	70 0a       	ld.w	r10,r8[0x0]
80022dec:	ec f8 00 00 	ld.w	r8,r6[0]
80022df0:	70 08       	ld.w	r8,r8[0x0]
80022df2:	f1 38 0c 66 	ld.ub	r8,r8[3174]
80022df6:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80022dfa:	12 98       	mov	r8,r9
80022dfc:	a1 78       	lsl	r8,0x1
80022dfe:	12 08       	add	r8,r9
80022e00:	a5 68       	lsl	r8,0x4
80022e02:	f4 08 00 08 	add	r8,r10,r8
80022e06:	f0 c9 f5 a8 	sub	r9,r8,-2648
80022e0a:	30 18       	mov	r8,1
80022e0c:	b2 88       	st.b	r9[0x0],r8
				centralData->current_waypoint = centralData->waypoint_list[centralData->current_wp_count];
80022e0e:	ec f8 00 00 	ld.w	r8,r6[0]
80022e12:	70 0a       	ld.w	r10,r8[0x0]
80022e14:	ec f8 00 00 	ld.w	r8,r6[0]
80022e18:	70 0b       	ld.w	r11,r8[0x0]
80022e1a:	ec f8 00 00 	ld.w	r8,r6[0]
80022e1e:	70 08       	ld.w	r8,r8[0x0]
80022e20:	f1 38 0c 66 	ld.ub	r8,r8[3174]
80022e24:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80022e28:	12 98       	mov	r8,r9
80022e2a:	a1 78       	lsl	r8,0x1
80022e2c:	12 08       	add	r8,r9
80022e2e:	a5 68       	lsl	r8,0x4
80022e30:	f6 08 00 08 	add	r8,r11,r8
80022e34:	f0 c8 f5 ac 	sub	r8,r8,-2644
80022e38:	f4 cb f3 cc 	sub	r11,r10,-3124
80022e3c:	10 9a       	mov	r10,r8
80022e3e:	f6 c8 00 00 	sub	r8,r11,0
80022e42:	f4 c9 00 00 	sub	r9,r10,0
80022e46:	72 0c       	ld.w	r12,r9[0x0]
80022e48:	91 0c       	st.w	r8[0x0],r12
80022e4a:	72 1c       	ld.w	r12,r9[0x4]
80022e4c:	91 1c       	st.w	r8[0x4],r12
80022e4e:	72 2c       	ld.w	r12,r9[0x8]
80022e50:	91 2c       	st.w	r8[0x8],r12
80022e52:	72 39       	ld.w	r9,r9[0xc]
80022e54:	91 39       	st.w	r8[0xc],r9
80022e56:	f6 c8 ff f0 	sub	r8,r11,-16
80022e5a:	f4 c9 ff f0 	sub	r9,r10,-16
80022e5e:	72 0c       	ld.w	r12,r9[0x0]
80022e60:	91 0c       	st.w	r8[0x0],r12
80022e62:	72 1c       	ld.w	r12,r9[0x4]
80022e64:	91 1c       	st.w	r8[0x4],r12
80022e66:	72 2c       	ld.w	r12,r9[0x8]
80022e68:	91 2c       	st.w	r8[0x8],r12
80022e6a:	72 39       	ld.w	r9,r9[0xc]
80022e6c:	91 39       	st.w	r8[0xc],r9
80022e6e:	f6 c8 ff e0 	sub	r8,r11,-32
80022e72:	f4 c9 ff e0 	sub	r9,r10,-32
80022e76:	72 0a       	ld.w	r10,r9[0x0]
80022e78:	91 0a       	st.w	r8[0x0],r10
80022e7a:	72 1a       	ld.w	r10,r9[0x4]
80022e7c:	91 1a       	st.w	r8[0x4],r10
80022e7e:	72 2a       	ld.w	r10,r9[0x8]
80022e80:	91 2a       	st.w	r8[0x8],r10
80022e82:	72 39       	ld.w	r9,r9[0xc]
80022e84:	91 39       	st.w	r8[0xc],r9
				centralData->waypoint_coordinates = set_waypoint_from_frame(centralData->current_waypoint,centralData->position_estimator.localPosition.origin);
80022e86:	ec f8 00 00 	ld.w	r8,r6[0]
80022e8a:	70 05       	ld.w	r5,r8[0x0]
80022e8c:	ec f8 00 00 	ld.w	r8,r6[0]
80022e90:	70 08       	ld.w	r8,r8[0x0]
80022e92:	ec f9 00 00 	ld.w	r9,r6[0]
80022e96:	72 0e       	ld.w	lr,r9[0x0]
80022e98:	ee cc 00 40 	sub	r12,r7,64
80022e9c:	20 7d       	sub	sp,28
80022e9e:	1a 99       	mov	r9,sp
80022ea0:	12 9a       	mov	r10,r9
80022ea2:	f0 cb f6 0c 	sub	r11,r8,-2548
80022ea6:	f4 c8 00 00 	sub	r8,r10,0
80022eaa:	f6 c9 00 00 	sub	r9,r11,0
80022eae:	72 03       	ld.w	r3,r9[0x0]
80022eb0:	91 03       	st.w	r8[0x0],r3
80022eb2:	72 13       	ld.w	r3,r9[0x4]
80022eb4:	91 13       	st.w	r8[0x4],r3
80022eb6:	72 23       	ld.w	r3,r9[0x8]
80022eb8:	91 23       	st.w	r8[0x8],r3
80022eba:	72 39       	ld.w	r9,r9[0xc]
80022ebc:	91 39       	st.w	r8[0xc],r9
80022ebe:	f6 e8 00 10 	ld.d	r8,r11[16]
80022ec2:	f4 e9 00 10 	st.d	r10[16],r8
80022ec6:	76 68       	ld.w	r8,r11[0x18]
80022ec8:	95 68       	st.w	r10[0x18],r8
80022eca:	20 cd       	sub	sp,48
80022ecc:	1a 98       	mov	r8,sp
80022ece:	10 9b       	mov	r11,r8
80022ed0:	fc ca f3 cc 	sub	r10,lr,-3124
80022ed4:	f6 c8 00 00 	sub	r8,r11,0
80022ed8:	f4 c9 00 00 	sub	r9,r10,0
80022edc:	72 0e       	ld.w	lr,r9[0x0]
80022ede:	91 0e       	st.w	r8[0x0],lr
80022ee0:	72 1e       	ld.w	lr,r9[0x4]
80022ee2:	91 1e       	st.w	r8[0x4],lr
80022ee4:	72 2e       	ld.w	lr,r9[0x8]
80022ee6:	91 2e       	st.w	r8[0x8],lr
80022ee8:	72 39       	ld.w	r9,r9[0xc]
80022eea:	91 39       	st.w	r8[0xc],r9
80022eec:	f6 c8 ff f0 	sub	r8,r11,-16
80022ef0:	f4 c9 ff f0 	sub	r9,r10,-16
80022ef4:	72 0e       	ld.w	lr,r9[0x0]
80022ef6:	91 0e       	st.w	r8[0x0],lr
80022ef8:	72 1e       	ld.w	lr,r9[0x4]
80022efa:	91 1e       	st.w	r8[0x4],lr
80022efc:	72 2e       	ld.w	lr,r9[0x8]
80022efe:	91 2e       	st.w	r8[0x8],lr
80022f00:	72 39       	ld.w	r9,r9[0xc]
80022f02:	91 39       	st.w	r8[0xc],r9
80022f04:	f6 c8 ff e0 	sub	r8,r11,-32
80022f08:	f4 c9 ff e0 	sub	r9,r10,-32
80022f0c:	72 0a       	ld.w	r10,r9[0x0]
80022f0e:	91 0a       	st.w	r8[0x0],r10
80022f10:	72 1a       	ld.w	r10,r9[0x4]
80022f12:	91 1a       	st.w	r8[0x4],r10
80022f14:	72 2a       	ld.w	r10,r9[0x8]
80022f16:	91 2a       	st.w	r8[0x8],r10
80022f18:	72 39       	ld.w	r9,r9[0xc]
80022f1a:	91 39       	st.w	r8[0xc],r9
80022f1c:	f0 16 01 06 	mcall	r6[1048]
80022f20:	2e dd       	sub	sp,-76
80022f22:	ea cb f3 98 	sub	r11,r5,-3176
80022f26:	ee ca 00 40 	sub	r10,r7,64
80022f2a:	f6 c8 00 00 	sub	r8,r11,0
80022f2e:	f4 c9 00 00 	sub	r9,r10,0
80022f32:	72 0c       	ld.w	r12,r9[0x0]
80022f34:	91 0c       	st.w	r8[0x0],r12
80022f36:	72 1c       	ld.w	r12,r9[0x4]
80022f38:	91 1c       	st.w	r8[0x4],r12
80022f3a:	72 2c       	ld.w	r12,r9[0x8]
80022f3c:	91 2c       	st.w	r8[0x8],r12
80022f3e:	72 39       	ld.w	r9,r9[0xc]
80022f40:	91 39       	st.w	r8[0xc],r9
80022f42:	f6 c8 ff f0 	sub	r8,r11,-16
80022f46:	f4 c9 ff f0 	sub	r9,r10,-16
80022f4a:	72 0c       	ld.w	r12,r9[0x0]
80022f4c:	91 0c       	st.w	r8[0x0],r12
80022f4e:	72 1c       	ld.w	r12,r9[0x4]
80022f50:	91 1c       	st.w	r8[0x4],r12
80022f52:	72 2c       	ld.w	r12,r9[0x8]
80022f54:	91 2c       	st.w	r8[0x8],r12
80022f56:	72 39       	ld.w	r9,r9[0xc]
80022f58:	91 39       	st.w	r8[0xc],r9
80022f5a:	f6 c8 ff e0 	sub	r8,r11,-32
80022f5e:	f4 c9 ff e0 	sub	r9,r10,-32
80022f62:	72 0a       	ld.w	r10,r9[0x0]
80022f64:	91 0a       	st.w	r8[0x0],r10
80022f66:	72 1a       	ld.w	r10,r9[0x4]
80022f68:	91 1a       	st.w	r8[0x4],r10
80022f6a:	72 2a       	ld.w	r10,r9[0x8]
80022f6c:	91 2a       	st.w	r8[0x8],r10
80022f6e:	72 39       	ld.w	r9,r9[0xc]
80022f70:	91 39       	st.w	r8[0xc],r9
				
				mavlink_msg_mission_current_send(MAVLINK_COMM_0,centralData->current_wp_count);
80022f72:	ec f8 00 00 	ld.w	r8,r6[0]
80022f76:	70 08       	ld.w	r8,r8[0x0]
80022f78:	f1 38 0c 66 	ld.ub	r8,r8[3174]
80022f7c:	5c 68       	casts.b	r8
80022f7e:	5c 88       	casts.h	r8
80022f80:	5c 78       	castu.h	r8
80022f82:	10 9b       	mov	r11,r8
80022f84:	30 0c       	mov	r12,0
80022f86:	fe b0 ed 19 	rcall	800209b8 <mavlink_msg_mission_current_send>
80022f8a:	c1 28       	rjmp	80022fae <waypoint_navigation_handler+0x3bc>
				
				}else{
				centralData->waypoint_set = false;
80022f8c:	ec f8 00 00 	ld.w	r8,r6[0]
80022f90:	70 09       	ld.w	r9,r8[0x0]
80022f92:	30 08       	mov	r8,0
80022f94:	f3 68 0c fc 	st.b	r9[3324],r8
				dbg_print("Stop\n");
80022f98:	fe cc 03 ac 	sub	r12,pc,940
80022f9c:	f0 16 00 01 	mcall	r6[4]
				
				wp_hold_init();
80022fa0:	f0 16 00 ba 	mcall	r6[744]
80022fa4:	c0 58       	rjmp	80022fae <waypoint_navigation_handler+0x3bc>
			}
		}
	}else{
		init_wp();
80022fa6:	f0 16 00 93 	mcall	r6[588]
		wp_hold_init();
80022faa:	f0 16 00 ba 	mcall	r6[744]
	}
}
80022fae:	2f 0d       	sub	sp,-64
80022fb0:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80022fb4:	80 02       	ld.sh	r2,r0[0x0]
80022fb6:	2a 82       	sub	r2,-88
80022fb8:	43 72       	lddsp	r2,sp[0xdc]
80022fba:	69 74       	ld.w	r4,r4[0x5c]
80022fbc:	69 63       	ld.w	r3,r4[0x58]
80022fbe:	61 6c       	ld.w	r12,r0[0x58]
80022fc0:	20 53       	sub	r3,5
80022fc2:	74 61       	ld.w	r1,r10[0x18]
80022fc4:	74 65       	ld.w	r5,r10[0x18]
80022fc6:	21 20       	sub	r0,18
80022fc8:	43 6c       	lddsp	r12,sp[0xd8]
80022fca:	69 6d       	ld.w	sp,r4[0x58]
80022fcc:	62 69       	ld.w	r9,r1[0x18]
80022fce:	6e 67       	ld.w	r7,r7[0x18]
80022fd0:	20 74       	sub	r4,7
80022fd2:	6f 20       	ld.w	r0,r7[0x48]
80022fd4:	73 61       	ld.w	r1,r9[0x58]
80022fd6:	66 65       	ld.w	r5,r3[0x18]
80022fd8:	20 61       	sub	r1,6
80022fda:	6c 74       	ld.w	r4,r6[0x1c]
80022fdc:	69 74       	ld.w	r4,r4[0x5c]
80022fde:	75 64       	ld.w	r4,r10[0x58]
80022fe0:	65 2e       	ld.w	lr,r2[0x48]
80022fe2:	0a 00       	add	r0,r5
80022fe4:	43 72       	lddsp	r2,sp[0xdc]
80022fe6:	69 74       	ld.w	r4,r4[0x5c]
80022fe8:	69 63       	ld.w	r3,r4[0x58]
80022fea:	61 6c       	ld.w	r12,r0[0x58]
80022fec:	20 53       	sub	r3,5
80022fee:	74 61       	ld.w	r1,r10[0x18]
80022ff0:	74 65       	ld.w	r5,r10[0x18]
80022ff2:	21 20       	sub	r0,18
80022ff4:	46 6c       	lddsp	r12,sp[0x198]
80022ff6:	79 69       	ld.w	r9,r12[0x58]
80022ff8:	6e 67       	ld.w	r7,r7[0x18]
80022ffa:	20 74       	sub	r4,7
80022ffc:	6f 20       	ld.w	r0,r7[0x48]
80022ffe:	68 6f       	ld.w	pc,r4[0x18]
80023000:	6d 65       	ld.w	r5,r6[0x58]
80023002:	20 77       	sub	r7,7
80023004:	61 79       	ld.w	r9,r0[0x5c]
80023006:	70 6f       	ld.w	pc,r8[0x18]
80023008:	69 6e       	ld.w	lr,r4[0x58]
8002300a:	74 2e       	ld.w	lr,r10[0x8]
8002300c:	0a 00       	add	r0,r5
8002300e:	00 00       	add	r0,r0
80023010:	43 72       	lddsp	r2,sp[0xdc]
80023012:	69 74       	ld.w	r4,r4[0x5c]
80023014:	69 63       	ld.w	r3,r4[0x58]
80023016:	61 6c       	ld.w	r12,r0[0x58]
80023018:	20 53       	sub	r3,5
8002301a:	74 61       	ld.w	r1,r10[0x18]
8002301c:	74 65       	ld.w	r5,r10[0x18]
8002301e:	21 20       	sub	r0,18
80023020:	50 65       	stdsp	sp[0x18],r5
80023022:	72 66       	ld.w	r6,r9[0x18]
80023024:	6f 72       	ld.w	r2,r7[0x5c]
80023026:	6d 69       	ld.w	r9,r6[0x58]
80023028:	6e 67       	ld.w	r7,r7[0x18]
8002302a:	20 63       	sub	r3,6
8002302c:	72 69       	ld.w	r9,r9[0x18]
8002302e:	74 69       	ld.w	r9,r10[0x18]
80023030:	63 61       	ld.w	r1,r1[0x58]
80023032:	6c 20       	ld.w	r0,r6[0x8]
80023034:	6c 61       	ld.w	r1,r6[0x18]
80023036:	6e 64       	ld.w	r4,r7[0x18]
80023038:	69 6e       	ld.w	lr,r4[0x58]
8002303a:	67 2e       	ld.w	lr,r3[0x48]
8002303c:	0a 00       	add	r0,r5
8002303e:	00 00       	add	r0,r0
80023040:	43 72       	lddsp	r2,sp[0xdc]
80023042:	69 74       	ld.w	r4,r4[0x5c]
80023044:	69 63       	ld.w	r3,r4[0x58]
80023046:	61 6c       	ld.w	r12,r0[0x58]
80023048:	20 53       	sub	r3,5
8002304a:	74 61       	ld.w	r1,r10[0x18]
8002304c:	74 65       	ld.w	r5,r10[0x18]
8002304e:	21 20       	sub	r0,18
80023050:	4c 61       	lddpc	r1,80023168 <waypoint_critical_handler+0xe8>
80023052:	6e 64       	ld.w	r4,r7[0x18]
80023054:	65 64       	ld.w	r4,r2[0x58]
80023056:	2c 20       	sub	r0,-62
80023058:	73 77       	ld.w	r7,r9[0x5c]
8002305a:	69 74       	ld.w	r4,r4[0x5c]
8002305c:	63 68       	ld.w	r8,r1[0x58]
8002305e:	69 6e       	ld.w	lr,r4[0x58]
80023060:	67 20       	ld.w	r0,r3[0x48]
80023062:	6f 66       	ld.w	r6,r7[0x58]
80023064:	66 20       	ld.w	r0,r3[0x8]
80023066:	6d 6f       	ld.w	pc,r6[0x58]
80023068:	74 6f       	ld.w	pc,r10[0x18]
8002306a:	72 73       	ld.w	r3,r9[0x1c]
8002306c:	2c 20       	sub	r0,-62
8002306e:	45 6d       	lddsp	sp,sp[0x158]
80023070:	65 72       	ld.w	r2,r2[0x5c]
80023072:	67 65       	ld.w	r5,r3[0x58]
80023074:	6e 63       	ld.w	r3,r7[0x18]
80023076:	79 20       	ld.w	r0,r12[0x48]
80023078:	6d 6f       	ld.w	pc,r6[0x58]
8002307a:	64 65       	ld.w	r5,r2[0x18]
8002307c:	2e 0a       	sub	r10,-32
	...

80023080 <waypoint_critical_handler>:

void waypoint_critical_handler()
{
80023080:	eb cd 40 e0 	pushm	r5-r7,lr
80023084:	1a 97       	mov	r7,sp
80023086:	20 7d       	sub	sp,28
80023088:	fe f6 02 20 	ld.w	r6,pc[544]
8002308c:	1e 26       	rsub	r6,pc
	if (!(centralData->critical_init))
8002308e:	ec f8 00 00 	ld.w	r8,r6[0]
80023092:	70 08       	ld.w	r8,r8[0x0]
80023094:	f1 38 0d 01 	ld.ub	r8,r8[3329]
80023098:	ec 18 00 01 	eorl	r8,0x1
8002309c:	5c 58       	castu.b	r8
8002309e:	c1 10       	breq	800230c0 <waypoint_critical_handler+0x40>
	{
		centralData->critical_init = true;
800230a0:	ec f8 00 00 	ld.w	r8,r6[0]
800230a4:	70 09       	ld.w	r9,r8[0x0]
800230a6:	30 18       	mov	r8,1
800230a8:	f3 68 0d 01 	st.b	r9[3329],r8
		dbg_print("Critical State! Climbing to safe altitude.\n");
800230ac:	fe cc 00 f4 	sub	r12,pc,244
800230b0:	f0 16 00 01 	mcall	r6[4]
		centralData->critical_behavior = CLIMB_TO_SAFE_ALT;
800230b4:	ec f8 00 00 	ld.w	r8,r6[0]
800230b8:	70 08       	ld.w	r8,r8[0x0]
800230ba:	30 19       	mov	r9,1
800230bc:	f1 49 0f 2c 	st.w	r8[3884],r9
	}
	
	if (!(centralData->critical_next_state))
800230c0:	ec f8 00 00 	ld.w	r8,r6[0]
800230c4:	70 08       	ld.w	r8,r8[0x0]
800230c6:	f1 38 0d 02 	ld.ub	r8,r8[3330]
800230ca:	ec 18 00 01 	eorl	r8,0x1
800230ce:	5c 58       	castu.b	r8
800230d0:	e0 80 00 a7 	breq	8002321e <waypoint_critical_handler+0x19e>
	{
		centralData->critical_next_state = true;
800230d4:	ec f8 00 00 	ld.w	r8,r6[0]
800230d8:	70 09       	ld.w	r9,r8[0x0]
800230da:	30 18       	mov	r8,1
800230dc:	f3 68 0d 02 	st.b	r9[3330],r8
		
		Aero_Attitude_t aero_attitude;
		aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
800230e0:	ec f8 00 00 	ld.w	r8,r6[0]
800230e4:	70 09       	ld.w	r9,r8[0x0]
800230e6:	ee ca 00 10 	sub	r10,r7,16
800230ea:	20 4d       	sub	sp,16
800230ec:	1a 98       	mov	r8,sp
800230ee:	20 08       	sub	r8,0
800230f0:	20 09       	sub	r9,0
800230f2:	72 0b       	ld.w	r11,r9[0x0]
800230f4:	91 0b       	st.w	r8[0x0],r11
800230f6:	72 1b       	ld.w	r11,r9[0x4]
800230f8:	91 1b       	st.w	r8[0x4],r11
800230fa:	72 2b       	ld.w	r11,r9[0x8]
800230fc:	91 2b       	st.w	r8[0x8],r11
800230fe:	72 39       	ld.w	r9,r9[0xc]
80023100:	91 39       	st.w	r8[0xc],r9
80023102:	14 9c       	mov	r12,r10
80023104:	f0 16 00 72 	mcall	r6[456]
80023108:	2f cd       	sub	sp,-16
		centralData->waypoint_critical_coordinates.heading = aero_attitude.rpy[2];
8002310a:	ec f8 00 00 	ld.w	r8,r6[0]
8002310e:	70 08       	ld.w	r8,r8[0x0]
80023110:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023114:	f1 49 0c d4 	st.w	r8[3284],r9
		
		switch (centralData->critical_behavior)
80023118:	ec f8 00 00 	ld.w	r8,r6[0]
8002311c:	70 08       	ld.w	r8,r8[0x0]
8002311e:	f0 f8 0f 2c 	ld.w	r8,r8[3884]
80023122:	58 28       	cp.w	r8,2
80023124:	c2 10       	breq	80023166 <waypoint_critical_handler+0xe6>
80023126:	58 38       	cp.w	r8,3
80023128:	c3 30       	breq	8002318e <waypoint_critical_handler+0x10e>
8002312a:	58 18       	cp.w	r8,1
8002312c:	c4 31       	brne	800231b2 <waypoint_critical_handler+0x132>
		{
			case CLIMB_TO_SAFE_ALT:
			centralData->waypoint_critical_coordinates.pos[X] = centralData->position_estimator.localPosition.pos[X];
8002312e:	ec f8 00 00 	ld.w	r8,r6[0]
80023132:	70 08       	ld.w	r8,r8[0x0]
80023134:	ec f9 00 00 	ld.w	r9,r6[0]
80023138:	72 09       	ld.w	r9,r9[0x0]
8002313a:	f2 f9 09 e4 	ld.w	r9,r9[2532]
8002313e:	f1 49 0c c8 	st.w	r8[3272],r9
			centralData->waypoint_critical_coordinates.pos[Y] = centralData->position_estimator.localPosition.pos[Y];
80023142:	ec f8 00 00 	ld.w	r8,r6[0]
80023146:	70 08       	ld.w	r8,r8[0x0]
80023148:	ec f9 00 00 	ld.w	r9,r6[0]
8002314c:	72 09       	ld.w	r9,r9[0x0]
8002314e:	f2 f9 09 e8 	ld.w	r9,r9[2536]
80023152:	f1 49 0c cc 	st.w	r8[3276],r9
			centralData->waypoint_critical_coordinates.pos[Z] = -30.0;
80023156:	ec f8 00 00 	ld.w	r8,r6[0]
8002315a:	70 08       	ld.w	r8,r8[0x0]
8002315c:	fc 19 c1 f0 	movh	r9,0xc1f0
80023160:	f1 49 0c d0 	st.w	r8[3280],r9
			
			break;
80023164:	c2 78       	rjmp	800231b2 <waypoint_critical_handler+0x132>
			case FLY_TO_HOME_WP:
			centralData->waypoint_critical_coordinates.pos[X] = 0.0;
80023166:	ec f8 00 00 	ld.w	r8,r6[0]
8002316a:	70 08       	ld.w	r8,r8[0x0]
8002316c:	30 09       	mov	r9,0
8002316e:	f1 49 0c c8 	st.w	r8[3272],r9
			centralData->waypoint_critical_coordinates.pos[Y] = 0.0;
80023172:	ec f8 00 00 	ld.w	r8,r6[0]
80023176:	70 08       	ld.w	r8,r8[0x0]
80023178:	30 09       	mov	r9,0
8002317a:	f1 49 0c cc 	st.w	r8[3276],r9
			centralData->waypoint_critical_coordinates.pos[Z] = -30.0;
8002317e:	ec f8 00 00 	ld.w	r8,r6[0]
80023182:	70 08       	ld.w	r8,r8[0x0]
80023184:	fc 19 c1 f0 	movh	r9,0xc1f0
80023188:	f1 49 0c d0 	st.w	r8[3280],r9
			break;
8002318c:	c1 38       	rjmp	800231b2 <waypoint_critical_handler+0x132>
			case CRITICAL_LAND:
			centralData->waypoint_critical_coordinates.pos[X] = 0.0;
8002318e:	ec f8 00 00 	ld.w	r8,r6[0]
80023192:	70 08       	ld.w	r8,r8[0x0]
80023194:	30 09       	mov	r9,0
80023196:	f1 49 0c c8 	st.w	r8[3272],r9
			centralData->waypoint_critical_coordinates.pos[Y] = 0.0;
8002319a:	ec f8 00 00 	ld.w	r8,r6[0]
8002319e:	70 08       	ld.w	r8,r8[0x0]
800231a0:	30 09       	mov	r9,0
800231a2:	f1 49 0c cc 	st.w	r8[3276],r9
			centralData->waypoint_critical_coordinates.pos[Z] = 0.0;
800231a6:	ec f8 00 00 	ld.w	r8,r6[0]
800231aa:	70 08       	ld.w	r8,r8[0x0]
800231ac:	30 09       	mov	r9,0
800231ae:	f1 49 0c d0 	st.w	r8[3280],r9
			break;
		}
		float rel_pos[3];
		uint8_t i;
		for (i=0;i<3;i++)
800231b2:	30 08       	mov	r8,0
800231b4:	ef 68 ff ff 	st.b	r7[-1],r8
800231b8:	c2 18       	rjmp	800231fa <waypoint_critical_handler+0x17a>
		{
			rel_pos[i] = centralData->waypoint_critical_coordinates.pos[i] - centralData->position_estimator.localPosition.pos[i];
800231ba:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800231be:	ec f9 00 00 	ld.w	r9,r6[0]
800231c2:	72 09       	ld.w	r9,r9[0x0]
800231c4:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800231c8:	f4 ca fc ce 	sub	r10,r10,-818
800231cc:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
800231d0:	ec f9 00 00 	ld.w	r9,r6[0]
800231d4:	72 09       	ld.w	r9,r9[0x0]
800231d6:	ef 3b ff ff 	ld.ub	r11,r7[-1]
800231da:	f6 cb fd 87 	sub	r11,r11,-633
800231de:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
800231e2:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800231e6:	a3 68       	lsl	r8,0x2
800231e8:	ee 08 00 08 	add	r8,r7,r8
800231ec:	f1 49 ff e4 	st.w	r8[-28],r9
			centralData->waypoint_critical_coordinates.pos[Z] = 0.0;
			break;
		}
		float rel_pos[3];
		uint8_t i;
		for (i=0;i<3;i++)
800231f0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800231f4:	2f f8       	sub	r8,-1
800231f6:	ef 68 ff ff 	st.b	r7[-1],r8
800231fa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800231fe:	30 28       	mov	r8,2
80023200:	f0 09 18 00 	cp.b	r9,r8
80023204:	fe 98 ff db 	brls	800231ba <waypoint_critical_handler+0x13a>
		{
			rel_pos[i] = centralData->waypoint_critical_coordinates.pos[i] - centralData->position_estimator.localPosition.pos[i];
		}
		centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
80023208:	ec f8 00 00 	ld.w	r8,r6[0]
8002320c:	70 05       	ld.w	r5,r8[0x0]
8002320e:	ee c8 00 1c 	sub	r8,r7,28
80023212:	10 9c       	mov	r12,r8
80023214:	fe b0 ed c0 	rcall	80020d94 <vector_norm_sqr>
80023218:	18 98       	mov	r8,r12
8002321a:	eb 48 0c f8 	st.w	r5[3320],r8
	}
	
	if (centralData->dist2wp_sqr < 3.0)
8002321e:	ec f8 00 00 	ld.w	r8,r6[0]
80023222:	70 08       	ld.w	r8,r8[0x0]
80023224:	f0 fa 0c f8 	ld.w	r10,r8[3320]
80023228:	30 18       	mov	r8,1
8002322a:	fc 19 40 40 	movh	r9,0x4040
8002322e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80023232:	e0 8c 00 03 	brvs	80023238 <waypoint_critical_handler+0x1b8>
80023236:	c0 25       	brlt	8002323a <waypoint_critical_handler+0x1ba>
80023238:	30 08       	mov	r8,0
8002323a:	5c 58       	castu.b	r8
8002323c:	c3 20       	breq	800232a0 <waypoint_critical_handler+0x220>
	{
		centralData->critical_next_state = false;
8002323e:	ec f8 00 00 	ld.w	r8,r6[0]
80023242:	70 09       	ld.w	r9,r8[0x0]
80023244:	30 08       	mov	r8,0
80023246:	f3 68 0d 02 	st.b	r9[3330],r8
		switch (centralData->critical_behavior)
8002324a:	ec f8 00 00 	ld.w	r8,r6[0]
8002324e:	70 08       	ld.w	r8,r8[0x0]
80023250:	f0 f8 0f 2c 	ld.w	r8,r8[3884]
80023254:	58 28       	cp.w	r8,2
80023256:	c1 00       	breq	80023276 <waypoint_critical_handler+0x1f6>
80023258:	58 38       	cp.w	r8,3
8002325a:	c1 90       	breq	8002328c <waypoint_critical_handler+0x20c>
8002325c:	58 18       	cp.w	r8,1
8002325e:	c2 11       	brne	800232a0 <waypoint_critical_handler+0x220>
		{
			case CLIMB_TO_SAFE_ALT:
			dbg_print("Critical State! Flying to home waypoint.\n");
80023260:	fe cc 02 7c 	sub	r12,pc,636
80023264:	f0 16 00 01 	mcall	r6[4]
			centralData->critical_behavior = FLY_TO_HOME_WP;
80023268:	ec f8 00 00 	ld.w	r8,r6[0]
8002326c:	70 08       	ld.w	r8,r8[0x0]
8002326e:	30 29       	mov	r9,2
80023270:	f1 49 0f 2c 	st.w	r8[3884],r9
			break;
80023274:	c1 68       	rjmp	800232a0 <waypoint_critical_handler+0x220>
			case FLY_TO_HOME_WP:
			dbg_print("Critical State! Performing critical landing.\n");
80023276:	fe cc 02 66 	sub	r12,pc,614
8002327a:	f0 16 00 01 	mcall	r6[4]
			centralData->critical_behavior = CRITICAL_LAND;
8002327e:	ec f8 00 00 	ld.w	r8,r6[0]
80023282:	70 08       	ld.w	r8,r8[0x0]
80023284:	30 39       	mov	r9,3
80023286:	f1 49 0f 2c 	st.w	r8[3884],r9
			break;
8002328a:	c0 b8       	rjmp	800232a0 <waypoint_critical_handler+0x220>
			case CRITICAL_LAND:
			dbg_print("Critical State! Landed, switching off motors, Emergency mode.\n");
8002328c:	fe cc 02 4c 	sub	r12,pc,588
80023290:	f0 16 00 01 	mcall	r6[4]
			centralData->critical_landing = true;
80023294:	ec f8 00 00 	ld.w	r8,r6[0]
80023298:	70 09       	ld.w	r9,r8[0x0]
8002329a:	30 18       	mov	r8,1
8002329c:	f3 68 0d 00 	st.b	r9[3328],r8
			break;
		}
	}
800232a0:	2f 9d       	sub	sp,-28
800232a2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800232a6:	00 00       	add	r0,r0
800232a8:	80 02       	ld.sh	r2,r0[0x0]
800232aa:	2f 10       	sub	r0,-15

800232ac <buffer_full>:


#include "buffer.h"


int8_t buffer_full(Buffer_t * buffer) {
800232ac:	eb cd 40 80 	pushm	r7,lr
800232b0:	1a 97       	mov	r7,sp
800232b2:	20 1d       	sub	sp,4
800232b4:	ef 4c ff fc 	st.w	r7[-4],r12
	return (((buffer->BufferHead+1)&BUFFER_MASK) == buffer->BufferTail);
800232b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800232bc:	f1 38 01 00 	ld.ub	r8,r8[256]
800232c0:	2f f8       	sub	r8,-1
800232c2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800232c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800232ca:	f1 38 01 01 	ld.ub	r8,r8[257]
800232ce:	10 39       	cp.w	r9,r8
800232d0:	5f 08       	sreq	r8
}
800232d2:	10 9c       	mov	r12,r8
800232d4:	2f fd       	sub	sp,-4
800232d6:	e3 cd 80 80 	ldm	sp++,r7,pc

800232da <buffer_put_lossy>:

void buffer_put_lossy(Buffer_t * buffer, uint8_t byte) {
800232da:	eb cd 40 c0 	pushm	r6-r7,lr
800232de:	1a 97       	mov	r7,sp
800232e0:	20 3d       	sub	sp,12
800232e2:	4a 46       	lddpc	r6,80023370 <buffer_put_lossy+0x96>
800232e4:	1e 26       	rsub	r6,pc
800232e6:	ef 4c ff f8 	st.w	r7[-8],r12
800232ea:	16 98       	mov	r8,r11
800232ec:	ef 68 ff f4 	st.b	r7[-12],r8
	uint8_t tmp;
	tmp=(buffer->BufferHead+1)&BUFFER_MASK;
800232f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800232f4:	f1 38 01 00 	ld.ub	r8,r8[256]
800232f8:	2f f8       	sub	r8,-1
800232fa:	ef 68 ff ff 	st.b	r7[-1],r8

	if (tmp==buffer->BufferTail) {
800232fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023302:	f1 38 01 01 	ld.ub	r8,r8[257]
80023306:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002330a:	f0 09 18 00 	cp.b	r9,r8
8002330e:	c0 b1       	brne	80023324 <buffer_put_lossy+0x4a>
		//error: receive buffer overflow!!
		// lose old incoming data at the end of the buffer
		buffer->BufferTail=(buffer->BufferTail+1)&BUFFER_MASK;
80023310:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023314:	f1 38 01 01 	ld.ub	r8,r8[257]
80023318:	2f f8       	sub	r8,-1
8002331a:	5c 58       	castu.b	r8
8002331c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023320:	f3 68 01 01 	st.b	r9[257],r8
	}
	// store incoming data in buffer
	buffer->Buffer[buffer->BufferHead] = byte;
80023324:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023328:	f1 38 01 00 	ld.ub	r8,r8[256]
8002332c:	10 99       	mov	r9,r8
8002332e:	ee fa ff f8 	ld.w	r10,r7[-8]
80023332:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80023336:	f4 09 0b 08 	st.b	r10[r9],r8
	buffer->BufferHead=tmp;
8002333a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002333e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80023342:	f3 68 01 00 	st.b	r9[256],r8
	if (buffer_full(buffer)) buffer->full =1; else buffer->full=0;
80023346:	ee fc ff f8 	ld.w	r12,r7[-8]
8002334a:	f0 16 01 02 	mcall	r6[1032]
8002334e:	18 98       	mov	r8,r12
80023350:	5c 58       	castu.b	r8
80023352:	c0 70       	breq	80023360 <buffer_put_lossy+0x86>
80023354:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023358:	30 18       	mov	r8,1
8002335a:	f3 68 01 02 	st.b	r9[258],r8
8002335e:	c0 68       	rjmp	8002336a <buffer_put_lossy+0x90>
80023360:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023364:	30 08       	mov	r8,0
80023366:	f3 68 01 02 	st.b	r9[258],r8
}
8002336a:	2f dd       	sub	sp,-12
8002336c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023370:	80 02       	ld.sh	r2,r0[0x0]
80023372:	31 68       	mov	r8,22

80023374 <buffer_put>:

int8_t buffer_put(Buffer_t * buffer, uint8_t byte) {
80023374:	eb cd 40 c0 	pushm	r6-r7,lr
80023378:	1a 97       	mov	r7,sp
8002337a:	20 3d       	sub	sp,12
8002337c:	4a 16       	lddpc	r6,80023400 <buffer_put+0x8c>
8002337e:	1e 26       	rsub	r6,pc
80023380:	ef 4c ff f8 	st.w	r7[-8],r12
80023384:	16 98       	mov	r8,r11
80023386:	ef 68 ff f4 	st.b	r7[-12],r8
	uint8_t tmp;
	tmp=(buffer->BufferHead+1)&BUFFER_MASK;
8002338a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002338e:	f1 38 01 00 	ld.ub	r8,r8[256]
80023392:	2f f8       	sub	r8,-1
80023394:	ef 68 ff ff 	st.b	r7[-1],r8

	if (tmp==buffer->BufferTail) {
80023398:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002339c:	f1 38 01 01 	ld.ub	r8,r8[257]
800233a0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800233a4:	f0 09 18 00 	cp.b	r9,r8
800233a8:	c0 51       	brne	800233b2 <buffer_put+0x3e>
		//error: buffer full! return -1
		return -1;
800233aa:	e0 68 00 ff 	mov	r8,255
	}
	// store incoming data in buffer
	buffer->Buffer[buffer->BufferHead] = byte;
	buffer->BufferHead=tmp;
	if (buffer_full(buffer)) buffer->full =1; else buffer->full=0;
}
800233ae:	10 9c       	mov	r12,r8
800233b0:	c2 48       	rjmp	800233f8 <buffer_put+0x84>
	if (tmp==buffer->BufferTail) {
		//error: buffer full! return -1
		return -1;
	}
	// store incoming data in buffer
	buffer->Buffer[buffer->BufferHead] = byte;
800233b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800233b6:	f1 38 01 00 	ld.ub	r8,r8[256]
800233ba:	10 99       	mov	r9,r8
800233bc:	ee fa ff f8 	ld.w	r10,r7[-8]
800233c0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800233c4:	f4 09 0b 08 	st.b	r10[r9],r8
	buffer->BufferHead=tmp;
800233c8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800233cc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800233d0:	f3 68 01 00 	st.b	r9[256],r8
	if (buffer_full(buffer)) buffer->full =1; else buffer->full=0;
800233d4:	ee fc ff f8 	ld.w	r12,r7[-8]
800233d8:	f0 16 01 02 	mcall	r6[1032]
800233dc:	18 98       	mov	r8,r12
800233de:	5c 58       	castu.b	r8
800233e0:	c0 70       	breq	800233ee <buffer_put+0x7a>
800233e2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800233e6:	30 18       	mov	r8,1
800233e8:	f3 68 01 02 	st.b	r9[258],r8
800233ec:	c0 68       	rjmp	800233f8 <buffer_put+0x84>
800233ee:	ee f9 ff f8 	ld.w	r9,r7[-8]
800233f2:	30 08       	mov	r8,0
800233f4:	f3 68 01 02 	st.b	r9[258],r8
}
800233f8:	2f dd       	sub	sp,-12
800233fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800233fe:	00 00       	add	r0,r0
80023400:	80 02       	ld.sh	r2,r0[0x0]
80023402:	32 02       	mov	r2,32

80023404 <buffer_get>:


uint8_t buffer_get(Buffer_t * buffer) {
80023404:	eb cd 40 80 	pushm	r7,lr
80023408:	1a 97       	mov	r7,sp
8002340a:	20 2d       	sub	sp,8
8002340c:	ef 4c ff f8 	st.w	r7[-8],r12
	uint8_t ret=0;
80023410:	30 08       	mov	r8,0
80023412:	ef 68 ff ff 	st.b	r7[-1],r8
	if (buffer->BufferHead!=buffer->BufferTail){
80023416:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002341a:	f1 39 01 00 	ld.ub	r9,r8[256]
8002341e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023422:	f1 38 01 01 	ld.ub	r8,r8[257]
80023426:	f0 09 18 00 	cp.b	r9,r8
8002342a:	c1 a0       	breq	8002345e <buffer_get+0x5a>
		ret=buffer->Buffer[buffer->BufferTail];
8002342c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023430:	f1 38 01 01 	ld.ub	r8,r8[257]
80023434:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023438:	f2 08 07 08 	ld.ub	r8,r9[r8]
8002343c:	ef 68 ff ff 	st.b	r7[-1],r8
		buffer->BufferTail=  (buffer->BufferTail+1)&BUFFER_MASK;
80023440:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023444:	f1 38 01 01 	ld.ub	r8,r8[257]
80023448:	2f f8       	sub	r8,-1
8002344a:	5c 58       	castu.b	r8
8002344c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023450:	f3 68 01 01 	st.b	r9[257],r8
		buffer->full=0;
80023454:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023458:	30 08       	mov	r8,0
8002345a:	f3 68 01 02 	st.b	r9[258],r8
	}
	return ret;
8002345e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
80023462:	10 9c       	mov	r12,r8
80023464:	2f ed       	sub	sp,-8
80023466:	e3 cd 80 80 	ldm	sp++,r7,pc

8002346a <buffer_empty>:


int8_t buffer_empty(Buffer_t * buffer) {
8002346a:	eb cd 40 80 	pushm	r7,lr
8002346e:	1a 97       	mov	r7,sp
80023470:	20 1d       	sub	sp,4
80023472:	ef 4c ff fc 	st.w	r7[-4],r12
	return (buffer->BufferHead==buffer->BufferTail);
80023476:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002347a:	f1 39 01 00 	ld.ub	r9,r8[256]
8002347e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023482:	f1 38 01 01 	ld.ub	r8,r8[257]
80023486:	f0 09 18 00 	cp.b	r9,r8
8002348a:	5f 08       	sreq	r8
}
8002348c:	10 9c       	mov	r12,r8
8002348e:	2f fd       	sub	sp,-4
80023490:	e3 cd 80 80 	ldm	sp++,r7,pc

80023494 <buffer_bytes_available>:

int buffer_bytes_available(Buffer_t * buffer) {
80023494:	eb cd 40 80 	pushm	r7,lr
80023498:	1a 97       	mov	r7,sp
8002349a:	20 1d       	sub	sp,4
8002349c:	ef 4c ff fc 	st.w	r7[-4],r12
	return (BUFFER_SIZE+buffer->BufferHead - buffer->BufferTail)&BUFFER_MASK;
800234a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800234a4:	f1 38 01 00 	ld.ub	r8,r8[256]
800234a8:	f0 c9 ff 00 	sub	r9,r8,-256
800234ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800234b0:	f1 38 01 01 	ld.ub	r8,r8[257]
800234b4:	f2 08 01 08 	sub	r8,r9,r8
800234b8:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
}
800234bc:	10 9c       	mov	r12,r8
800234be:	2f fd       	sub	sp,-4
800234c0:	e3 cd 80 80 	ldm	sp++,r7,pc

800234c4 <buffer_init>:

void buffer_init(Buffer_t * buffer) {
800234c4:	eb cd 40 80 	pushm	r7,lr
800234c8:	1a 97       	mov	r7,sp
800234ca:	20 1d       	sub	sp,4
800234cc:	ef 4c ff fc 	st.w	r7[-4],r12
	buffer->BufferHead=0;
800234d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800234d4:	30 08       	mov	r8,0
800234d6:	f3 68 01 00 	st.b	r9[256],r8
	buffer->BufferTail=0;
800234da:	ee f9 ff fc 	ld.w	r9,r7[-4]
800234de:	30 08       	mov	r8,0
800234e0:	f3 68 01 01 	st.b	r9[257],r8
	buffer->full=0;
800234e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800234e8:	30 08       	mov	r8,0
800234ea:	f3 68 01 02 	st.b	r9[258],r8
}
800234ee:	2f fd       	sub	sp,-4
800234f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800234f4 <buffer_clear>:

void buffer_clear(Buffer_t * buffer) {
800234f4:	eb cd 40 80 	pushm	r7,lr
800234f8:	1a 97       	mov	r7,sp
800234fa:	20 1d       	sub	sp,4
800234fc:	ef 4c ff fc 	st.w	r7[-4],r12
	buffer->BufferHead=0;
80023500:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023504:	30 08       	mov	r8,0
80023506:	f3 68 01 00 	st.b	r9[256],r8
	buffer->BufferTail=0;
8002350a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002350e:	30 08       	mov	r8,0
80023510:	f3 68 01 01 	st.b	r9[257],r8
	buffer->full=0;
80023514:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023518:	30 08       	mov	r8,0
8002351a:	f3 68 01 02 	st.b	r9[258],r8
}
8002351e:	2f fd       	sub	sp,-4
80023520:	e3 cd 80 80 	ldm	sp++,r7,pc

80023524 <make_buffered_stream>:

void make_buffered_stream(Buffer_t *buffer, byte_stream_t *stream) {
80023524:	eb cd 40 c0 	pushm	r6-r7,lr
80023528:	1a 97       	mov	r7,sp
8002352a:	20 2d       	sub	sp,8
8002352c:	49 16       	lddpc	r6,80023570 <make_buffered_stream+0x4c>
8002352e:	1e 26       	rsub	r6,pc
80023530:	ef 4c ff fc 	st.w	r7[-4],r12
80023534:	ef 4b ff f8 	st.w	r7[-8],r11
	stream->get=&buffer_get;
80023538:	ec f9 01 14 	ld.w	r9,r6[276]
8002353c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023540:	91 09       	st.w	r8[0x0],r9
	stream->put=&buffer_put;
80023542:	ec f9 01 54 	ld.w	r9,r6[340]
80023546:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002354a:	91 19       	st.w	r8[0x4],r9
	stream->flush=NULL;
8002354c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023550:	30 09       	mov	r9,0
80023552:	91 29       	st.w	r8[0x8],r9
	stream->data=buffer;
80023554:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023558:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002355c:	91 59       	st.w	r8[0x14],r9
	stream->bytes_available=&buffer_bytes_available;
8002355e:	ec f9 00 b8 	ld.w	r9,r6[184]
80023562:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023566:	91 49       	st.w	r8[0x10],r9
}
80023568:	2f ed       	sub	sp,-8
8002356a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002356e:	00 00       	add	r0,r0
80023570:	80 02       	ld.sh	r2,r0[0x0]
80023572:	33 b2       	mov	r2,59

80023574 <make_buffered_stream_lossy>:

void make_buffered_stream_lossy(Buffer_t *buffer, byte_stream_t *stream) {
80023574:	eb cd 40 c0 	pushm	r6-r7,lr
80023578:	1a 97       	mov	r7,sp
8002357a:	20 2d       	sub	sp,8
8002357c:	49 16       	lddpc	r6,800235c0 <make_buffered_stream_lossy+0x4c>
8002357e:	1e 26       	rsub	r6,pc
80023580:	ef 4c ff fc 	st.w	r7[-4],r12
80023584:	ef 4b ff f8 	st.w	r7[-8],r11
	stream->get=&buffer_get;
80023588:	ec f9 01 14 	ld.w	r9,r6[276]
8002358c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023590:	91 09       	st.w	r8[0x0],r9
	stream->put=&buffer_put_lossy;
80023592:	ec f9 05 2c 	ld.w	r9,r6[1324]
80023596:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002359a:	91 19       	st.w	r8[0x4],r9
	stream->flush=NULL;
8002359c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800235a0:	30 09       	mov	r9,0
800235a2:	91 29       	st.w	r8[0x8],r9
	stream->data=buffer;
800235a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800235a8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800235ac:	91 59       	st.w	r8[0x14],r9
	stream->bytes_available=&buffer_bytes_available;
800235ae:	ec f9 00 b8 	ld.w	r9,r6[184]
800235b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800235b6:	91 49       	st.w	r8[0x10],r9
}
800235b8:	2f ed       	sub	sp,-8
800235ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800235be:	00 00       	add	r0,r0
800235c0:	80 02       	ld.sh	r2,r0[0x0]
800235c2:	34 02       	mov	r2,64

800235c4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800235c4:	eb cd 40 c0 	pushm	r6-r7,lr
800235c8:	1a 97       	mov	r7,sp
800235ca:	20 6d       	sub	sp,24
800235cc:	49 e6       	lddpc	r6,80023644 <interpolate+0x80>
800235ce:	1e 26       	rsub	r6,pc
800235d0:	ef 4c ff f8 	st.w	r7[-8],r12
800235d4:	ef 4b ff f4 	st.w	r7[-12],r11
800235d8:	ef 4a ff f0 	st.w	r7[-16],r10
800235dc:	ef 49 ff ec 	st.w	r7[-20],r9
800235e0:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
800235e4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800235e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800235ec:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800235f0:	c0 41       	brne	800235f8 <interpolate+0x34>
	{
		return y1;
800235f2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800235f6:	c2 38       	rjmp	8002363c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
800235f8:	ee f9 ff e8 	ld.w	r9,r7[-24]
800235fc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023600:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80023604:	ee fa ff f8 	ld.w	r10,r7[-8]
80023608:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002360c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80023610:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80023614:	ee fa ff f0 	ld.w	r10,r7[-16]
80023618:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002361c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80023620:	12 9b       	mov	r11,r9
80023622:	10 9c       	mov	r12,r8
80023624:	f0 16 00 08 	mcall	r6[32]
80023628:	18 98       	mov	r8,r12
8002362a:	10 99       	mov	r9,r8
8002362c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023630:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80023634:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80023638:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8002363c:	10 9c       	mov	r12,r8
8002363e:	2f ad       	sub	sp,-24
80023640:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023644:	80 02       	ld.sh	r2,r0[0x0]
80023646:	34 52       	mov	r2,69

80023648 <local_to_global_position>:
#include <math.h>
#include "print_util.h"
#include "conf_platform.h"

// convert local NED coordinates to global GPS coordinates (relative to origin given in local coordinate frame)
global_position_t local_to_global_position(local_coordinates_t input){
80023648:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8002364c:	1a 97       	mov	r7,sp
8002364e:	20 8d       	sub	sp,32
80023650:	4d 96       	lddpc	r6,800237b4 <local_to_global_position+0x16c>
80023652:	1e 26       	rsub	r6,pc
80023654:	ee c5 ff e0 	sub	r5,r7,-32
80023658:	ef 4c ff e0 	st.w	r7[-32],r12
	global_position_t output;
	//output.latitude = input.origin.latitude  + rad_to_deg( input.pos[0] *2.0 / (PI * EARTH_RADIUS));
	//output.longitude= input.origin.longitude + rad_to_deg( input.pos[1] *2.0 / (PI * EARTH_RADIUS*cos(deg_to_rad(output.latitude))));
	output.latitude = input.origin.latitude  + rad_to_deg( input.pos[0] / EARTH_RADIUS);
8002365c:	ea e2 00 18 	ld.d	r2,r5[24]
80023660:	6a 08       	ld.w	r8,r5[0x0]
80023662:	10 9c       	mov	r12,r8
80023664:	f0 16 00 02 	mcall	r6[8]
80023668:	fc 18 40 00 	movh	r8,0x4000
8002366c:	e0 69 54 a6 	mov	r9,21670
80023670:	ea 19 41 58 	orh	r9,0x4158
80023674:	f0 16 00 0c 	mcall	r6[48]
80023678:	14 98       	mov	r8,r10
8002367a:	16 99       	mov	r9,r11
8002367c:	10 9a       	mov	r10,r8
8002367e:	12 9b       	mov	r11,r9
80023680:	30 08       	mov	r8,0
80023682:	e0 69 80 00 	mov	r9,32768
80023686:	ea 19 40 66 	orh	r9,0x4066
8002368a:	f0 16 00 03 	mcall	r6[12]
8002368e:	14 98       	mov	r8,r10
80023690:	16 99       	mov	r9,r11
80023692:	10 9a       	mov	r10,r8
80023694:	12 9b       	mov	r11,r9
80023696:	e0 68 2d 18 	mov	r8,11544
8002369a:	ea 18 54 44 	orh	r8,0x5444
8002369e:	e0 69 21 fb 	mov	r9,8699
800236a2:	ea 19 40 09 	orh	r9,0x4009
800236a6:	f0 16 00 0c 	mcall	r6[48]
800236aa:	14 98       	mov	r8,r10
800236ac:	16 99       	mov	r9,r11
800236ae:	04 9a       	mov	r10,r2
800236b0:	06 9b       	mov	r11,r3
800236b2:	f0 16 00 05 	mcall	r6[20]
800236b6:	14 98       	mov	r8,r10
800236b8:	16 99       	mov	r9,r11
800236ba:	ee e9 ff ec 	st.d	r7[-20],r8
	output.longitude= input.origin.longitude + rad_to_deg( input.pos[1] / ( EARTH_RADIUS*cos(deg_to_rad(output.latitude))));
800236be:	ea e2 00 10 	ld.d	r2,r5[16]
800236c2:	6a 18       	ld.w	r8,r5[0x4]
800236c4:	10 9c       	mov	r12,r8
800236c6:	f0 16 00 02 	mcall	r6[8]
800236ca:	14 90       	mov	r0,r10
800236cc:	16 91       	mov	r1,r11
800236ce:	ee ea ff ec 	ld.d	r10,r7[-20]
800236d2:	e0 68 2d 18 	mov	r8,11544
800236d6:	ea 18 54 44 	orh	r8,0x5444
800236da:	e0 69 21 fb 	mov	r9,8699
800236de:	ea 19 40 09 	orh	r9,0x4009
800236e2:	f0 16 00 03 	mcall	r6[12]
800236e6:	14 98       	mov	r8,r10
800236e8:	16 99       	mov	r9,r11
800236ea:	10 9a       	mov	r10,r8
800236ec:	12 9b       	mov	r11,r9
800236ee:	30 08       	mov	r8,0
800236f0:	e0 69 80 00 	mov	r9,32768
800236f4:	ea 19 40 66 	orh	r9,0x4066
800236f8:	f0 16 00 0c 	mcall	r6[48]
800236fc:	14 98       	mov	r8,r10
800236fe:	16 99       	mov	r9,r11
80023700:	10 9a       	mov	r10,r8
80023702:	12 9b       	mov	r11,r9
80023704:	f0 16 00 c2 	mcall	r6[776]
80023708:	fc 18 40 00 	movh	r8,0x4000
8002370c:	e0 69 54 a6 	mov	r9,21670
80023710:	ea 19 41 58 	orh	r9,0x4158
80023714:	f0 16 00 03 	mcall	r6[12]
80023718:	14 98       	mov	r8,r10
8002371a:	16 99       	mov	r9,r11
8002371c:	00 9a       	mov	r10,r0
8002371e:	02 9b       	mov	r11,r1
80023720:	f0 16 00 0c 	mcall	r6[48]
80023724:	14 98       	mov	r8,r10
80023726:	16 99       	mov	r9,r11
80023728:	10 9a       	mov	r10,r8
8002372a:	12 9b       	mov	r11,r9
8002372c:	30 08       	mov	r8,0
8002372e:	e0 69 80 00 	mov	r9,32768
80023732:	ea 19 40 66 	orh	r9,0x4066
80023736:	f0 16 00 03 	mcall	r6[12]
8002373a:	14 98       	mov	r8,r10
8002373c:	16 99       	mov	r9,r11
8002373e:	10 9a       	mov	r10,r8
80023740:	12 9b       	mov	r11,r9
80023742:	e0 68 2d 18 	mov	r8,11544
80023746:	ea 18 54 44 	orh	r8,0x5444
8002374a:	e0 69 21 fb 	mov	r9,8699
8002374e:	ea 19 40 09 	orh	r9,0x4009
80023752:	f0 16 00 0c 	mcall	r6[48]
80023756:	14 98       	mov	r8,r10
80023758:	16 99       	mov	r9,r11
8002375a:	04 9a       	mov	r10,r2
8002375c:	06 9b       	mov	r11,r3
8002375e:	f0 16 00 05 	mcall	r6[20]
80023762:	14 98       	mov	r8,r10
80023764:	16 99       	mov	r9,r11
80023766:	ee e9 ff e4 	st.d	r7[-28],r8
	output.altitude = -input.pos[2] + input.origin.altitude;
8002376a:	6a 89       	ld.w	r9,r5[0x20]
8002376c:	6a 28       	ld.w	r8,r5[0x8]
8002376e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80023772:	ef 48 ff f4 	st.w	r7[-12],r8
	output.heading=input.heading;
80023776:	6a 38       	ld.w	r8,r5[0xc]
80023778:	ef 48 ff f8 	st.w	r7[-8],r8

	return output;
8002377c:	ee fa ff e0 	ld.w	r10,r7[-32]
80023780:	ee cb 00 1c 	sub	r11,r7,28
80023784:	f4 c8 00 00 	sub	r8,r10,0
80023788:	f6 c9 00 00 	sub	r9,r11,0
8002378c:	72 0c       	ld.w	r12,r9[0x0]
8002378e:	91 0c       	st.w	r8[0x0],r12
80023790:	72 1c       	ld.w	r12,r9[0x4]
80023792:	91 1c       	st.w	r8[0x4],r12
80023794:	72 2c       	ld.w	r12,r9[0x8]
80023796:	91 2c       	st.w	r8[0x8],r12
80023798:	72 39       	ld.w	r9,r9[0xc]
8002379a:	91 39       	st.w	r8[0xc],r9
8002379c:	f6 e8 00 10 	ld.d	r8,r11[16]
800237a0:	f4 e9 00 10 	st.d	r10[16],r8
800237a4:	76 68       	ld.w	r8,r11[0x18]
800237a6:	95 68       	st.w	r10[0x18],r8
}
800237a8:	ee fc ff e0 	ld.w	r12,r7[-32]
800237ac:	2f 8d       	sub	sp,-32
800237ae:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
800237b2:	00 00       	add	r0,r0
800237b4:	80 02       	ld.sh	r2,r0[0x0]
800237b6:	34 d6       	mov	r6,77

800237b8 <global_to_local_position>:

// convert a global position into a local coordinate frame around the given global origin
local_coordinates_t global_to_local_position(global_position_t position, global_position_t origin) {
800237b8:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800237bc:	1a 97       	mov	r7,sp
800237be:	20 ed       	sub	sp,56
800237c0:	4f 16       	lddpc	r6,80023984 <global_to_local_position+0x1cc>
800237c2:	1e 26       	rsub	r6,pc
800237c4:	ee c5 ff ec 	sub	r5,r7,-20
800237c8:	18 93       	mov	r3,r12
	local_coordinates_t output;
	output.origin=origin;
800237ca:	ee ca 00 28 	sub	r10,r7,40
800237ce:	ea cb ff e4 	sub	r11,r5,-28
800237d2:	f4 c8 00 00 	sub	r8,r10,0
800237d6:	f6 c9 00 00 	sub	r9,r11,0
800237da:	72 0c       	ld.w	r12,r9[0x0]
800237dc:	91 0c       	st.w	r8[0x0],r12
800237de:	72 1c       	ld.w	r12,r9[0x4]
800237e0:	91 1c       	st.w	r8[0x4],r12
800237e2:	72 2c       	ld.w	r12,r9[0x8]
800237e4:	91 2c       	st.w	r8[0x8],r12
800237e6:	72 39       	ld.w	r9,r9[0xc]
800237e8:	91 39       	st.w	r8[0xc],r9
800237ea:	f6 e8 00 10 	ld.d	r8,r11[16]
800237ee:	f4 e9 00 10 	st.d	r10[16],r8
800237f2:	76 68       	ld.w	r8,r11[0x18]
800237f4:	95 68       	st.w	r10[0x18],r8
	double small_radius=cos(deg_to_rad(position.latitude))*EARTH_RADIUS;
800237f6:	ea ea 00 08 	ld.d	r10,r5[8]
800237fa:	e0 68 2d 18 	mov	r8,11544
800237fe:	ea 18 54 44 	orh	r8,0x5444
80023802:	e0 69 21 fb 	mov	r9,8699
80023806:	ea 19 40 09 	orh	r9,0x4009
8002380a:	f0 16 00 03 	mcall	r6[12]
8002380e:	14 98       	mov	r8,r10
80023810:	16 99       	mov	r9,r11
80023812:	10 9a       	mov	r10,r8
80023814:	12 9b       	mov	r11,r9
80023816:	30 08       	mov	r8,0
80023818:	e0 69 80 00 	mov	r9,32768
8002381c:	ea 19 40 66 	orh	r9,0x4066
80023820:	f0 16 00 0c 	mcall	r6[48]
80023824:	14 98       	mov	r8,r10
80023826:	16 99       	mov	r9,r11
80023828:	10 9a       	mov	r10,r8
8002382a:	12 9b       	mov	r11,r9
8002382c:	f0 16 00 c2 	mcall	r6[776]
80023830:	fc 18 40 00 	movh	r8,0x4000
80023834:	e0 69 54 a6 	mov	r9,21670
80023838:	ea 19 41 58 	orh	r9,0x4158
8002383c:	f0 16 00 03 	mcall	r6[12]
80023840:	14 98       	mov	r8,r10
80023842:	16 99       	mov	r9,r11
80023844:	ee e9 ff f8 	st.d	r7[-8],r8
	output.pos[X]=  (float)(sin(deg_to_rad((position.latitude-origin.latitude)))*EARTH_RADIUS);
80023848:	ea ea 00 08 	ld.d	r10,r5[8]
8002384c:	ea e8 00 24 	ld.d	r8,r5[36]
80023850:	f0 16 00 11 	mcall	r6[68]
80023854:	14 98       	mov	r8,r10
80023856:	16 99       	mov	r9,r11
80023858:	10 9a       	mov	r10,r8
8002385a:	12 9b       	mov	r11,r9
8002385c:	e0 68 2d 18 	mov	r8,11544
80023860:	ea 18 54 44 	orh	r8,0x5444
80023864:	e0 69 21 fb 	mov	r9,8699
80023868:	ea 19 40 09 	orh	r9,0x4009
8002386c:	f0 16 00 03 	mcall	r6[12]
80023870:	14 98       	mov	r8,r10
80023872:	16 99       	mov	r9,r11
80023874:	10 9a       	mov	r10,r8
80023876:	12 9b       	mov	r11,r9
80023878:	30 08       	mov	r8,0
8002387a:	e0 69 80 00 	mov	r9,32768
8002387e:	ea 19 40 66 	orh	r9,0x4066
80023882:	f0 16 00 0c 	mcall	r6[48]
80023886:	14 98       	mov	r8,r10
80023888:	16 99       	mov	r9,r11
8002388a:	10 9a       	mov	r10,r8
8002388c:	12 9b       	mov	r11,r9
8002388e:	f0 16 00 c0 	mcall	r6[768]
80023892:	fc 18 40 00 	movh	r8,0x4000
80023896:	e0 69 54 a6 	mov	r9,21670
8002389a:	ea 19 41 58 	orh	r9,0x4158
8002389e:	f0 16 00 03 	mcall	r6[12]
800238a2:	14 98       	mov	r8,r10
800238a4:	16 99       	mov	r9,r11
800238a6:	10 9a       	mov	r10,r8
800238a8:	12 9b       	mov	r11,r9
800238aa:	f0 16 00 09 	mcall	r6[36]
800238ae:	18 98       	mov	r8,r12
800238b0:	ef 48 ff c8 	st.w	r7[-56],r8
	output.pos[Y]=  (float)(sin(deg_to_rad((position.longitude-origin.longitude)))*small_radius);
800238b4:	ea ea 00 00 	ld.d	r10,r5[0]
800238b8:	ea e8 00 1c 	ld.d	r8,r5[28]
800238bc:	f0 16 00 11 	mcall	r6[68]
800238c0:	14 98       	mov	r8,r10
800238c2:	16 99       	mov	r9,r11
800238c4:	10 9a       	mov	r10,r8
800238c6:	12 9b       	mov	r11,r9
800238c8:	e0 68 2d 18 	mov	r8,11544
800238cc:	ea 18 54 44 	orh	r8,0x5444
800238d0:	e0 69 21 fb 	mov	r9,8699
800238d4:	ea 19 40 09 	orh	r9,0x4009
800238d8:	f0 16 00 03 	mcall	r6[12]
800238dc:	14 98       	mov	r8,r10
800238de:	16 99       	mov	r9,r11
800238e0:	10 9a       	mov	r10,r8
800238e2:	12 9b       	mov	r11,r9
800238e4:	30 08       	mov	r8,0
800238e6:	e0 69 80 00 	mov	r9,32768
800238ea:	ea 19 40 66 	orh	r9,0x4066
800238ee:	f0 16 00 0c 	mcall	r6[48]
800238f2:	14 98       	mov	r8,r10
800238f4:	16 99       	mov	r9,r11
800238f6:	10 9a       	mov	r10,r8
800238f8:	12 9b       	mov	r11,r9
800238fa:	f0 16 00 c0 	mcall	r6[768]
800238fe:	ee e8 ff f8 	ld.d	r8,r7[-8]
80023902:	f0 16 00 03 	mcall	r6[12]
80023906:	14 98       	mov	r8,r10
80023908:	16 99       	mov	r9,r11
8002390a:	10 9a       	mov	r10,r8
8002390c:	12 9b       	mov	r11,r9
8002390e:	f0 16 00 09 	mcall	r6[36]
80023912:	18 98       	mov	r8,r12
80023914:	ef 48 ff cc 	st.w	r7[-52],r8
	output.pos[Z]=  (float)(-(position.altitude - origin.altitude));
80023918:	6a 49       	ld.w	r9,r5[0x10]
8002391a:	6a b8       	ld.w	r8,r5[0x2c]
8002391c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80023920:	ee 18 80 00 	eorh	r8,0x8000
80023924:	ef 48 ff d0 	st.w	r7[-48],r8
	output.heading=position.heading;
80023928:	6a 58       	ld.w	r8,r5[0x14]
8002392a:	ef 48 ff d4 	st.w	r7[-44],r8
	//dbg_print_num(deg_to_rad((position.longitude-origin.longitude))*10000000,10);
	//dbg_print(", sin_long:");
	//dbg_print_num(sin(deg_to_rad((position.longitude-origin.longitude)))*small_radius*10000000,10);
	//dbg_print("\n");
	
	return output;
8002392e:	06 9b       	mov	r11,r3
80023930:	ee ca 00 38 	sub	r10,r7,56
80023934:	f6 c8 00 00 	sub	r8,r11,0
80023938:	f4 c9 00 00 	sub	r9,r10,0
8002393c:	72 0c       	ld.w	r12,r9[0x0]
8002393e:	91 0c       	st.w	r8[0x0],r12
80023940:	72 1c       	ld.w	r12,r9[0x4]
80023942:	91 1c       	st.w	r8[0x4],r12
80023944:	72 2c       	ld.w	r12,r9[0x8]
80023946:	91 2c       	st.w	r8[0x8],r12
80023948:	72 39       	ld.w	r9,r9[0xc]
8002394a:	91 39       	st.w	r8[0xc],r9
8002394c:	f6 c8 ff f0 	sub	r8,r11,-16
80023950:	f4 c9 ff f0 	sub	r9,r10,-16
80023954:	72 0c       	ld.w	r12,r9[0x0]
80023956:	91 0c       	st.w	r8[0x0],r12
80023958:	72 1c       	ld.w	r12,r9[0x4]
8002395a:	91 1c       	st.w	r8[0x4],r12
8002395c:	72 2c       	ld.w	r12,r9[0x8]
8002395e:	91 2c       	st.w	r8[0x8],r12
80023960:	72 39       	ld.w	r9,r9[0xc]
80023962:	91 39       	st.w	r8[0xc],r9
80023964:	f6 c8 ff e0 	sub	r8,r11,-32
80023968:	f4 c9 ff e0 	sub	r9,r10,-32
8002396c:	72 0a       	ld.w	r10,r9[0x0]
8002396e:	91 0a       	st.w	r8[0x0],r10
80023970:	72 1a       	ld.w	r10,r9[0x4]
80023972:	91 1a       	st.w	r8[0x4],r10
80023974:	72 2a       	ld.w	r10,r9[0x8]
80023976:	91 2a       	st.w	r8[0x8],r10
80023978:	72 39       	ld.w	r9,r9[0xc]
8002397a:	91 39       	st.w	r8[0xc],r9
}
8002397c:	06 9c       	mov	r12,r3
8002397e:	2f 2d       	sub	sp,-56
80023980:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80023984:	80 02       	ld.sh	r2,r0[0x0]
80023986:	36 46       	mov	r6,100

80023988 <Quat_to_Aero>:

Aero_Attitude_t Quat_to_Aero(UQuat_t qe) {
80023988:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8002398c:	1a 97       	mov	r7,sp
8002398e:	20 3d       	sub	sp,12
80023990:	4d 06       	lddpc	r6,80023ad0 <Quat_to_Aero+0x148>
80023992:	1e 26       	rsub	r6,pc
80023994:	ee c5 ff e4 	sub	r5,r7,-28
80023998:	18 91       	mov	r1,r12
	Aero_Attitude_t aero;

	aero.rpy[0]= atan2(2*(qe.s*qe.v[0] + qe.v[1]*qe.v[2]) , (qe.s*qe.s - qe.v[0]*qe.v[0] - qe.v[1]*qe.v[1] + qe.v[2]*qe.v[2])); 
8002399a:	6a 09       	ld.w	r9,r5[0x0]
8002399c:	6a 08       	ld.w	r8,r5[0x0]
8002399e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800239a2:	6a 1a       	ld.w	r10,r5[0x4]
800239a4:	6a 18       	ld.w	r8,r5[0x4]
800239a6:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800239aa:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800239ae:	6a 2a       	ld.w	r10,r5[0x8]
800239b0:	6a 28       	ld.w	r8,r5[0x8]
800239b2:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800239b6:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800239ba:	6a 3a       	ld.w	r10,r5[0xc]
800239bc:	6a 38       	ld.w	r8,r5[0xc]
800239be:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800239c2:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800239c6:	10 9c       	mov	r12,r8
800239c8:	f0 16 00 02 	mcall	r6[8]
800239cc:	14 92       	mov	r2,r10
800239ce:	16 93       	mov	r3,r11
800239d0:	6a 09       	ld.w	r9,r5[0x0]
800239d2:	6a 18       	ld.w	r8,r5[0x4]
800239d4:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800239d8:	6a 2a       	ld.w	r10,r5[0x8]
800239da:	6a 38       	ld.w	r8,r5[0xc]
800239dc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800239e0:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800239e4:	e5 a0 08 88 	cop	cp0,cr8,cr8,cr8,0x40
800239e8:	10 9c       	mov	r12,r8
800239ea:	f0 16 00 02 	mcall	r6[8]
800239ee:	04 98       	mov	r8,r2
800239f0:	06 99       	mov	r9,r3
800239f2:	f0 16 00 54 	mcall	r6[336]
800239f6:	14 98       	mov	r8,r10
800239f8:	16 99       	mov	r9,r11
800239fa:	10 9a       	mov	r10,r8
800239fc:	12 9b       	mov	r11,r9
800239fe:	f0 16 00 09 	mcall	r6[36]
80023a02:	18 98       	mov	r8,r12
80023a04:	ef 48 ff f4 	st.w	r7[-12],r8
	aero.rpy[1]=-asin(2*(qe.v[0]*qe.v[2] - qe.s*qe.v[1]));
80023a08:	6a 19       	ld.w	r9,r5[0x4]
80023a0a:	6a 38       	ld.w	r8,r5[0xc]
80023a0c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80023a10:	6a 0a       	ld.w	r10,r5[0x0]
80023a12:	6a 28       	ld.w	r8,r5[0x8]
80023a14:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80023a18:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80023a1c:	fc 18 c0 00 	movh	r8,0xc000
80023a20:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80023a24:	10 9c       	mov	r12,r8
80023a26:	f0 16 00 02 	mcall	r6[8]
80023a2a:	14 98       	mov	r8,r10
80023a2c:	16 99       	mov	r9,r11
80023a2e:	10 9a       	mov	r10,r8
80023a30:	12 9b       	mov	r11,r9
80023a32:	f0 16 01 85 	mcall	r6[1556]
80023a36:	14 98       	mov	r8,r10
80023a38:	16 99       	mov	r9,r11
80023a3a:	10 9a       	mov	r10,r8
80023a3c:	12 9b       	mov	r11,r9
80023a3e:	f0 16 00 09 	mcall	r6[36]
80023a42:	18 98       	mov	r8,r12
80023a44:	ef 48 ff f8 	st.w	r7[-8],r8
	aero.rpy[2]= atan2(2*(qe.s*qe.v[2] + qe.v[0]*qe.v[1]) , (qe.s*qe.s + qe.v[0]*qe.v[0] - qe.v[1]*qe.v[1] - qe.v[2]*qe.v[2]));
80023a48:	6a 09       	ld.w	r9,r5[0x0]
80023a4a:	6a 08       	ld.w	r8,r5[0x0]
80023a4c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80023a50:	6a 1a       	ld.w	r10,r5[0x4]
80023a52:	6a 18       	ld.w	r8,r5[0x4]
80023a54:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80023a58:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80023a5c:	6a 2a       	ld.w	r10,r5[0x8]
80023a5e:	6a 28       	ld.w	r8,r5[0x8]
80023a60:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80023a64:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80023a68:	6a 3a       	ld.w	r10,r5[0xc]
80023a6a:	6a 38       	ld.w	r8,r5[0xc]
80023a6c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80023a70:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80023a74:	10 9c       	mov	r12,r8
80023a76:	f0 16 00 02 	mcall	r6[8]
80023a7a:	14 92       	mov	r2,r10
80023a7c:	16 93       	mov	r3,r11
80023a7e:	6a 09       	ld.w	r9,r5[0x0]
80023a80:	6a 38       	ld.w	r8,r5[0xc]
80023a82:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80023a86:	6a 1a       	ld.w	r10,r5[0x4]
80023a88:	6a 28       	ld.w	r8,r5[0x8]
80023a8a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80023a8e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80023a92:	e5 a0 08 88 	cop	cp0,cr8,cr8,cr8,0x40
80023a96:	10 9c       	mov	r12,r8
80023a98:	f0 16 00 02 	mcall	r6[8]
80023a9c:	04 98       	mov	r8,r2
80023a9e:	06 99       	mov	r9,r3
80023aa0:	f0 16 00 54 	mcall	r6[336]
80023aa4:	14 98       	mov	r8,r10
80023aa6:	16 99       	mov	r9,r11
80023aa8:	10 9a       	mov	r10,r8
80023aaa:	12 9b       	mov	r11,r9
80023aac:	f0 16 00 09 	mcall	r6[36]
80023ab0:	18 98       	mov	r8,r12
80023ab2:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return aero;
80023ab6:	02 9a       	mov	r10,r1
80023ab8:	ee cb 00 0c 	sub	r11,r7,12
80023abc:	f6 e8 00 00 	ld.d	r8,r11[0]
80023ac0:	f4 e9 00 00 	st.d	r10[0],r8
80023ac4:	76 28       	ld.w	r8,r11[0x8]
80023ac6:	95 28       	st.w	r10[0x8],r8
}
80023ac8:	02 9c       	mov	r12,r1
80023aca:	2f dd       	sub	sp,-12
80023acc:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
80023ad0:	80 02       	ld.sh	r2,r0[0x0]
80023ad2:	38 16       	mov	r6,-127

80023ad4 <get_yaw>:

float get_yaw(UQuat_t qe) {
80023ad4:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80023ad8:	1a 97       	mov	r7,sp
80023ada:	49 f6       	lddpc	r6,80023b54 <get_yaw+0x80>
80023adc:	1e 26       	rsub	r6,pc
80023ade:	ee c5 ff e8 	sub	r5,r7,-24
	return  atan2(2*(qe.s*qe.v[2] + qe.v[0]*qe.v[1]) , (qe.s*qe.s + qe.v[0]*qe.v[0] - qe.v[1]*qe.v[1] - qe.v[2]*qe.v[2]));
80023ae2:	6a 09       	ld.w	r9,r5[0x0]
80023ae4:	6a 08       	ld.w	r8,r5[0x0]
80023ae6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80023aea:	6a 1a       	ld.w	r10,r5[0x4]
80023aec:	6a 18       	ld.w	r8,r5[0x4]
80023aee:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80023af2:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80023af6:	6a 2a       	ld.w	r10,r5[0x8]
80023af8:	6a 28       	ld.w	r8,r5[0x8]
80023afa:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80023afe:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80023b02:	6a 3a       	ld.w	r10,r5[0xc]
80023b04:	6a 38       	ld.w	r8,r5[0xc]
80023b06:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80023b0a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80023b0e:	10 9c       	mov	r12,r8
80023b10:	f0 16 00 02 	mcall	r6[8]
80023b14:	14 92       	mov	r2,r10
80023b16:	16 93       	mov	r3,r11
80023b18:	6a 09       	ld.w	r9,r5[0x0]
80023b1a:	6a 38       	ld.w	r8,r5[0xc]
80023b1c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80023b20:	6a 1a       	ld.w	r10,r5[0x4]
80023b22:	6a 28       	ld.w	r8,r5[0x8]
80023b24:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80023b28:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80023b2c:	e5 a0 08 88 	cop	cp0,cr8,cr8,cr8,0x40
80023b30:	10 9c       	mov	r12,r8
80023b32:	f0 16 00 02 	mcall	r6[8]
80023b36:	04 98       	mov	r8,r2
80023b38:	06 99       	mov	r9,r3
80023b3a:	f0 16 00 54 	mcall	r6[336]
80023b3e:	14 98       	mov	r8,r10
80023b40:	16 99       	mov	r9,r11
80023b42:	10 9a       	mov	r10,r8
80023b44:	12 9b       	mov	r11,r9
80023b46:	f0 16 00 09 	mcall	r6[36]
80023b4a:	18 98       	mov	r8,r12
}
80023b4c:	10 9c       	mov	r12,r8
80023b4e:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80023b52:	00 00       	add	r0,r0
80023b54:	80 02       	ld.sh	r2,r0[0x0]
80023b56:	39 60       	mov	r0,-106

80023b58 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80023b58:	eb cd 40 c0 	pushm	r6-r7,lr
80023b5c:	1a 97       	mov	r7,sp
80023b5e:	20 6d       	sub	sp,24
80023b60:	49 e6       	lddpc	r6,80023bd8 <interpolate+0x80>
80023b62:	1e 26       	rsub	r6,pc
80023b64:	ef 4c ff f8 	st.w	r7[-8],r12
80023b68:	ef 4b ff f4 	st.w	r7[-12],r11
80023b6c:	ef 4a ff f0 	st.w	r7[-16],r10
80023b70:	ef 49 ff ec 	st.w	r7[-20],r9
80023b74:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80023b78:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023b7c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023b80:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80023b84:	c0 41       	brne	80023b8c <interpolate+0x34>
	{
		return y1;
80023b86:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023b8a:	c2 38       	rjmp	80023bd0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80023b8c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80023b90:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023b94:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80023b98:	ee fa ff f8 	ld.w	r10,r7[-8]
80023b9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023ba0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80023ba4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80023ba8:	ee fa ff f0 	ld.w	r10,r7[-16]
80023bac:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023bb0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80023bb4:	12 9b       	mov	r11,r9
80023bb6:	10 9c       	mov	r12,r8
80023bb8:	f0 16 00 08 	mcall	r6[32]
80023bbc:	18 98       	mov	r8,r12
80023bbe:	10 99       	mov	r9,r8
80023bc0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023bc4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80023bc8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80023bcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80023bd0:	10 9c       	mov	r12,r8
80023bd2:	2f ad       	sub	sp,-24
80023bd4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023bd8:	80 02       	ld.sh	r2,r0[0x0]
80023bda:	39 e6       	mov	r6,-98

80023bdc <dbg_print_init>:

/**
 * \brief some utilities for printing strings and numbers 
 */
void dbg_print_init(byte_stream_t* debug_stream)
{
80023bdc:	eb cd 40 c0 	pushm	r6-r7,lr
80023be0:	1a 97       	mov	r7,sp
80023be2:	20 1d       	sub	sp,4
80023be4:	48 66       	lddpc	r6,80023bfc <dbg_print_init+0x20>
80023be6:	1e 26       	rsub	r6,pc
80023be8:	ef 4c ff fc 	st.w	r7[-4],r12
	deb_stream=debug_stream;
80023bec:	ec f8 01 bc 	ld.w	r8,r6[444]
80023bf0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023bf4:	91 09       	st.w	r8[0x0],r9
}
80023bf6:	2f fd       	sub	sp,-4
80023bf8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023bfc:	80 02       	ld.sh	r2,r0[0x0]
80023bfe:	3a 6a       	mov	r10,-90

80023c00 <putstring>:

void putstring(byte_stream_t *out_stream, const char* s) {
80023c00:	eb cd 40 80 	pushm	r7,lr
80023c04:	1a 97       	mov	r7,sp
80023c06:	20 2d       	sub	sp,8
80023c08:	ef 4c ff fc 	st.w	r7[-4],r12
80023c0c:	ef 4b ff f8 	st.w	r7[-8],r11
	if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80023c10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c14:	58 08       	cp.w	r8,0
80023c16:	c2 10       	breq	80023c58 <putstring+0x58>
80023c18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c1c:	70 18       	ld.w	r8,r8[0x4]
80023c1e:	58 08       	cp.w	r8,0
80023c20:	c1 51       	brne	80023c4a <putstring+0x4a>
80023c22:	c1 c8       	rjmp	80023c5a <putstring+0x5a>
	while (*s != 0) {
		out_stream->put(out_stream->data, *s);
80023c24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c28:	70 18       	ld.w	r8,r8[0x4]
80023c2a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023c2e:	13 89       	ld.ub	r9,r9[0x0]
80023c30:	12 9a       	mov	r10,r9
80023c32:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023c36:	72 59       	ld.w	r9,r9[0x14]
80023c38:	14 9b       	mov	r11,r10
80023c3a:	12 9c       	mov	r12,r9
80023c3c:	5d 18       	icall	r8
		s++;
80023c3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023c42:	2f f8       	sub	r8,-1
80023c44:	ef 48 ff f8 	st.w	r7[-8],r8
80023c48:	c0 28       	rjmp	80023c4c <putstring+0x4c>
	deb_stream=debug_stream;
}

void putstring(byte_stream_t *out_stream, const char* s) {
	if ((out_stream==NULL) || (out_stream->put==NULL)) return;
	while (*s != 0) {
80023c4a:	d7 03       	nop
80023c4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023c50:	11 88       	ld.ub	r8,r8[0x0]
80023c52:	58 08       	cp.w	r8,0
80023c54:	ce 81       	brne	80023c24 <putstring+0x24>
80023c56:	c0 28       	rjmp	80023c5a <putstring+0x5a>
{
	deb_stream=debug_stream;
}

void putstring(byte_stream_t *out_stream, const char* s) {
	if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80023c58:	d7 03       	nop
	while (*s != 0) {
		out_stream->put(out_stream->data, *s);
		s++;
	}
}
80023c5a:	2f ed       	sub	sp,-8
80023c5c:	e3 cd 80 80 	ldm	sp++,r7,pc

80023c60 <putdigit>:

static const char alphabet[36] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

void putdigit(byte_stream_t *out_stream, unsigned c){
80023c60:	eb cd 40 c0 	pushm	r6-r7,lr
80023c64:	1a 97       	mov	r7,sp
80023c66:	20 2d       	sub	sp,8
80023c68:	49 76       	lddpc	r6,80023cc4 <putdigit+0x64>
80023c6a:	1e 26       	rsub	r6,pc
80023c6c:	ef 4c ff fc 	st.w	r7[-4],r12
80023c70:	ef 4b ff f8 	st.w	r7[-8],r11
if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80023c74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c78:	58 08       	cp.w	r8,0
80023c7a:	c1 d0       	breq	80023cb4 <putdigit+0x54>
80023c7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c80:	70 18       	ld.w	r8,r8[0x4]
80023c82:	58 08       	cp.w	r8,0
80023c84:	c1 a0       	breq	80023cb8 <putdigit+0x58>
	
if (c > 35)
80023c86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023c8a:	e0 48 00 23 	cp.w	r8,35
80023c8e:	e0 8b 00 17 	brhi	80023cbc <putdigit+0x5c>
    return;
  out_stream->put(out_stream->data,  alphabet[c]);
80023c92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c96:	70 18       	ld.w	r8,r8[0x4]
80023c98:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023c9c:	ec fa 08 cc 	ld.w	r10,r6[2252]
80023ca0:	f4 09 07 09 	ld.ub	r9,r10[r9]
80023ca4:	12 9a       	mov	r10,r9
80023ca6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023caa:	72 59       	ld.w	r9,r9[0x14]
80023cac:	14 9b       	mov	r11,r10
80023cae:	12 9c       	mov	r12,r9
80023cb0:	5d 18       	icall	r8
80023cb2:	c0 68       	rjmp	80023cbe <putdigit+0x5e>
}

static const char alphabet[36] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

void putdigit(byte_stream_t *out_stream, unsigned c){
if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80023cb4:	d7 03       	nop
80023cb6:	c0 48       	rjmp	80023cbe <putdigit+0x5e>
80023cb8:	d7 03       	nop
80023cba:	c0 28       	rjmp	80023cbe <putdigit+0x5e>
	
if (c > 35)
    return;
80023cbc:	d7 03       	nop
  out_stream->put(out_stream->data,  alphabet[c]);
}
80023cbe:	2f ed       	sub	sp,-8
80023cc0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023cc4:	80 02       	ld.sh	r2,r0[0x0]
80023cc6:	3a ee       	mov	lr,-82

80023cc8 <putnum>:


/*
  Outputs numbers with less than 10 digits
*/
void putnum(byte_stream_t *out_stream, long c, char base){
80023cc8:	eb cd 40 c0 	pushm	r6-r7,lr
80023ccc:	1a 97       	mov	r7,sp
80023cce:	20 7d       	sub	sp,28
80023cd0:	4b 96       	lddpc	r6,80023db4 <putnum+0xec>
80023cd2:	1e 26       	rsub	r6,pc
80023cd4:	ef 4c ff ec 	st.w	r7[-20],r12
80023cd8:	ef 4b ff e8 	st.w	r7[-24],r11
80023cdc:	14 98       	mov	r8,r10
80023cde:	ef 68 ff e4 	st.b	r7[-28],r8
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
80023ce2:	30 a8       	mov	r8,10
80023ce4:	ef 48 ff fc 	st.w	r7[-4],r8
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80023ce8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023cec:	58 08       	cp.w	r8,0
80023cee:	c5 d0       	breq	80023da8 <putnum+0xe0>
80023cf0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023cf4:	70 18       	ld.w	r8,r8[0x4]
80023cf6:	58 08       	cp.w	r8,0
80023cf8:	c5 a0       	breq	80023dac <putnum+0xe4>
  /* Take Care of the sign */
  if(c < 0){
80023cfa:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023cfe:	58 08       	cp.w	r8,0
80023d00:	c1 04       	brge	80023d20 <putnum+0x58>
    out_stream->put(out_stream->data,   '-');
80023d02:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023d06:	70 18       	ld.w	r8,r8[0x4]
80023d08:	ee f9 ff ec 	ld.w	r9,r7[-20]
80023d0c:	72 59       	ld.w	r9,r9[0x14]
80023d0e:	32 db       	mov	r11,45
80023d10:	12 9c       	mov	r12,r9
80023d12:	5d 18       	icall	r8
    c = c*-1;
80023d14:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023d18:	5c 38       	neg	r8
80023d1a:	ef 48 ff e8 	st.w	r7[-24],r8
80023d1e:	c0 a8       	rjmp	80023d32 <putnum+0x6a>
  } else {
	  out_stream->put(out_stream->data,  ' ');
80023d20:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023d24:	70 18       	ld.w	r8,r8[0x4]
80023d26:	ee f9 ff ec 	ld.w	r9,r7[-20]
80023d2a:	72 59       	ld.w	r9,r9[0x14]
80023d2c:	32 0b       	mov	r11,32
80023d2e:	12 9c       	mov	r12,r9
80023d30:	5d 18       	icall	r8
    
  }

  do{
    i--;
80023d32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023d36:	20 18       	sub	r8,1
80023d38:	ef 48 ff fc 	st.w	r7[-4],r8
    storage[i] = c % base;
80023d3c:	ee fa ff fc 	ld.w	r10,r7[-4]
80023d40:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80023d44:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023d48:	f0 09 0c 08 	divs	r8,r8,r9
80023d4c:	12 98       	mov	r8,r9
80023d4e:	5c 58       	castu.b	r8
80023d50:	ee 0a 00 09 	add	r9,r7,r10
80023d54:	f3 68 ff f0 	st.b	r9[-16],r8
    c = c / base;
80023d58:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80023d5c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023d60:	f0 09 0c 08 	divs	r8,r8,r9
80023d64:	ef 48 ff e8 	st.w	r7[-24],r8
  }while((i >= 0) 
  && (c > 0)
  );
80023d68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023d6c:	58 08       	cp.w	r8,0
80023d6e:	c1 75       	brlt	80023d9c <putnum+0xd4>
80023d70:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023d74:	58 08       	cp.w	r8,0
80023d76:	fe 99 ff de 	brgt	80023d32 <putnum+0x6a>
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80023d7a:	c1 18       	rjmp	80023d9c <putnum+0xd4>
     putdigit(out_stream, storage[i]);
80023d7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023d80:	ee 08 00 08 	add	r8,r7,r8
80023d84:	f1 38 ff f0 	ld.ub	r8,r8[-16]
80023d88:	10 9b       	mov	r11,r8
80023d8a:	ee fc ff ec 	ld.w	r12,r7[-20]
80023d8e:	f0 16 00 b8 	mcall	r6[736]
  && (c > 0)
  );
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80023d92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023d96:	2f f8       	sub	r8,-1
80023d98:	ef 48 ff fc 	st.w	r7[-4],r8
80023d9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023da0:	58 98       	cp.w	r8,9
80023da2:	fe 9a ff ed 	brle	80023d7c <putnum+0xb4>
80023da6:	c0 48       	rjmp	80023dae <putnum+0xe6>
  Outputs numbers with less than 10 digits
*/
void putnum(byte_stream_t *out_stream, long c, char base){
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80023da8:	d7 03       	nop
80023daa:	c0 28       	rjmp	80023dae <putnum+0xe6>
80023dac:	d7 03       	nop
  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
     putdigit(out_stream, storage[i]);
  }

}
80023dae:	2f 9d       	sub	sp,-28
80023db0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023db4:	80 02       	ld.sh	r2,r0[0x0]
80023db6:	3b 56       	mov	r6,-75

80023db8 <putnum_tight>:

void putnum_tight(byte_stream_t *out_stream, long c, char base){
80023db8:	eb cd 40 c0 	pushm	r6-r7,lr
80023dbc:	1a 97       	mov	r7,sp
80023dbe:	20 7d       	sub	sp,28
80023dc0:	4b 46       	lddpc	r6,80023e90 <putnum_tight+0xd8>
80023dc2:	1e 26       	rsub	r6,pc
80023dc4:	ef 4c ff ec 	st.w	r7[-20],r12
80023dc8:	ef 4b ff e8 	st.w	r7[-24],r11
80023dcc:	14 98       	mov	r8,r10
80023dce:	ef 68 ff e4 	st.b	r7[-28],r8
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
80023dd2:	30 a8       	mov	r8,10
80023dd4:	ef 48 ff fc 	st.w	r7[-4],r8
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80023dd8:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023ddc:	58 08       	cp.w	r8,0
80023dde:	c5 30       	breq	80023e84 <putnum_tight+0xcc>
80023de0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023de4:	70 18       	ld.w	r8,r8[0x4]
80023de6:	58 08       	cp.w	r8,0
80023de8:	c5 00       	breq	80023e88 <putnum_tight+0xd0>
  /* Take Care of the sign */
  if(c < 0){
80023dea:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023dee:	58 08       	cp.w	r8,0
80023df0:	c0 f4       	brge	80023e0e <putnum_tight+0x56>
    out_stream->put(out_stream->data,   '-');
80023df2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023df6:	70 18       	ld.w	r8,r8[0x4]
80023df8:	ee f9 ff ec 	ld.w	r9,r7[-20]
80023dfc:	72 59       	ld.w	r9,r9[0x14]
80023dfe:	32 db       	mov	r11,45
80023e00:	12 9c       	mov	r12,r9
80023e02:	5d 18       	icall	r8
    c = c*-1;
80023e04:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023e08:	5c 38       	neg	r8
80023e0a:	ef 48 ff e8 	st.w	r7[-24],r8
  } else {
    
  }

  do{
    i--;
80023e0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e12:	20 18       	sub	r8,1
80023e14:	ef 48 ff fc 	st.w	r7[-4],r8
    storage[i] = c % base;
80023e18:	ee fa ff fc 	ld.w	r10,r7[-4]
80023e1c:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80023e20:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023e24:	f0 09 0c 08 	divs	r8,r8,r9
80023e28:	12 98       	mov	r8,r9
80023e2a:	5c 58       	castu.b	r8
80023e2c:	ee 0a 00 09 	add	r9,r7,r10
80023e30:	f3 68 ff f0 	st.b	r9[-16],r8
    c = c / base;
80023e34:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80023e38:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023e3c:	f0 09 0c 08 	divs	r8,r8,r9
80023e40:	ef 48 ff e8 	st.w	r7[-24],r8
  }while((i >= 0) 
  && (c > 0)
  );
80023e44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e48:	58 08       	cp.w	r8,0
80023e4a:	c1 75       	brlt	80023e78 <putnum_tight+0xc0>
80023e4c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023e50:	58 08       	cp.w	r8,0
80023e52:	fe 99 ff de 	brgt	80023e0e <putnum_tight+0x56>
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80023e56:	c1 18       	rjmp	80023e78 <putnum_tight+0xc0>
     putdigit(out_stream, storage[i]);
80023e58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e5c:	ee 08 00 08 	add	r8,r7,r8
80023e60:	f1 38 ff f0 	ld.ub	r8,r8[-16]
80023e64:	10 9b       	mov	r11,r8
80023e66:	ee fc ff ec 	ld.w	r12,r7[-20]
80023e6a:	f0 16 00 b8 	mcall	r6[736]
  && (c > 0)
  );
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80023e6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e72:	2f f8       	sub	r8,-1
80023e74:	ef 48 ff fc 	st.w	r7[-4],r8
80023e78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e7c:	58 98       	cp.w	r8,9
80023e7e:	fe 9a ff ed 	brle	80023e58 <putnum_tight+0xa0>
80023e82:	c0 48       	rjmp	80023e8a <putnum_tight+0xd2>
}

void putnum_tight(byte_stream_t *out_stream, long c, char base){
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80023e84:	d7 03       	nop
80023e86:	c0 28       	rjmp	80023e8a <putnum_tight+0xd2>
80023e88:	d7 03       	nop
  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
     putdigit(out_stream, storage[i]);
  }

}
80023e8a:	2f 9d       	sub	sp,-28
80023e8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023e90:	80 02       	ld.sh	r2,r0[0x0]
80023e92:	3c 46       	mov	r6,-60
80023e94:	2d 00       	sub	r0,-48
80023e96:	00 00       	add	r0,r0
80023e98:	2e 00       	sub	r0,-32

80023e9a <putfloat>:

void putfloat(byte_stream_t *out_stream, float c, int after_digits){
80023e9a:	eb cd 40 c0 	pushm	r6-r7,lr
80023e9e:	1a 97       	mov	r7,sp
80023ea0:	20 8d       	sub	sp,32
80023ea2:	4b d6       	lddpc	r6,80023f94 <putfloat+0xfa>
80023ea4:	1e 26       	rsub	r6,pc
80023ea6:	ef 4c ff e8 	st.w	r7[-24],r12
80023eaa:	ef 4b ff e4 	st.w	r7[-28],r11
80023eae:	ef 4a ff e0 	st.w	r7[-32],r10
	int i;
	float num=c;
80023eb2:	ee f8 ff e4 	ld.w	r8,r7[-28]
80023eb6:	ef 48 ff f0 	st.w	r7[-16],r8
	if (c<0) {
80023eba:	30 18       	mov	r8,1
80023ebc:	ee fa ff e4 	ld.w	r10,r7[-28]
80023ec0:	30 09       	mov	r9,0
80023ec2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80023ec6:	e0 8c 00 03 	brvs	80023ecc <putfloat+0x32>
80023eca:	c0 25       	brlt	80023ece <putfloat+0x34>
80023ecc:	30 08       	mov	r8,0
80023ece:	5c 58       	castu.b	r8
80023ed0:	c0 d0       	breq	80023eea <putfloat+0x50>
		putstring(out_stream, "-");
80023ed2:	fe cb 00 3e 	sub	r11,pc,62
80023ed6:	ee fc ff e8 	ld.w	r12,r7[-24]
80023eda:	f0 16 00 34 	mcall	r6[208]
		num=-c;
80023ede:	ee f8 ff e4 	ld.w	r8,r7[-28]
80023ee2:	ee 18 80 00 	eorh	r8,0x8000
80023ee6:	ef 48 ff f0 	st.w	r7[-16],r8
	}
	int whole=abs((int)num);
80023eea:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023eee:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80023ef2:	ef 48 ff fc 	st.w	r7[-4],r8
80023ef6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023efa:	5c 48       	abs	r8
80023efc:	ef 48 ff fc 	st.w	r7[-4],r8
80023f00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023f04:	ef 48 ff f4 	st.w	r7[-12],r8
	float after=(num-(float)whole);
80023f08:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023f0c:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80023f10:	ee f9 ff f0 	ld.w	r9,r7[-16]
80023f14:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80023f18:	ef 48 ff f8 	st.w	r7[-8],r8

	putnum_tight(out_stream, whole, 10);
80023f1c:	30 aa       	mov	r10,10
80023f1e:	ee fb ff f4 	ld.w	r11,r7[-12]
80023f22:	ee fc ff e8 	ld.w	r12,r7[-24]
80023f26:	f0 16 01 4c 	mcall	r6[1328]
	putstring(out_stream, "."); 
80023f2a:	fe cb 00 92 	sub	r11,pc,146
80023f2e:	ee fc ff e8 	ld.w	r12,r7[-24]
80023f32:	f0 16 00 34 	mcall	r6[208]
	
	for (i=0; i<after_digits; i++) 
80023f36:	30 08       	mov	r8,0
80023f38:	ef 48 ff ec 	st.w	r7[-20],r8
80023f3c:	c2 38       	rjmp	80023f82 <putfloat+0xe8>
	{
		after*=10;
80023f3e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023f42:	fc 18 41 20 	movh	r8,0x4120
80023f46:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80023f4a:	ef 48 ff f8 	st.w	r7[-8],r8
		putdigit(out_stream, (int)after);
80023f4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023f52:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80023f56:	10 9b       	mov	r11,r8
80023f58:	ee fc ff e8 	ld.w	r12,r7[-24]
80023f5c:	f0 16 00 b8 	mcall	r6[736]
		after=after-(int)after;
80023f60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023f64:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80023f68:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80023f6c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023f70:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80023f74:	ef 48 ff f8 	st.w	r7[-8],r8
	float after=(num-(float)whole);

	putnum_tight(out_stream, whole, 10);
	putstring(out_stream, "."); 
	
	for (i=0; i<after_digits; i++) 
80023f78:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023f7c:	2f f8       	sub	r8,-1
80023f7e:	ef 48 ff ec 	st.w	r7[-20],r8
80023f82:	ee f9 ff ec 	ld.w	r9,r7[-20]
80023f86:	ee f8 ff e0 	ld.w	r8,r7[-32]
80023f8a:	10 39       	cp.w	r9,r8
80023f8c:	cd 95       	brlt	80023f3e <putfloat+0xa4>
		after*=10;
		putdigit(out_stream, (int)after);
		after=after-(int)after;
	}
	
}
80023f8e:	2f 8d       	sub	sp,-32
80023f90:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023f94:	80 02       	ld.sh	r2,r0[0x0]
80023f96:	3d 28       	mov	r8,-46
80023f98:	28 00       	sub	r0,-128
80023f9a:	00 00       	add	r0,r0
80023f9c:	2c 20       	sub	r0,-62
80023f9e:	00 00       	add	r0,r0
80023fa0:	29 20       	sub	r0,-110
	...

80023fa4 <print_vector>:


void print_vector(byte_stream_t *out_stream, float v[], int after_digits) {
80023fa4:	eb cd 40 c0 	pushm	r6-r7,lr
80023fa8:	1a 97       	mov	r7,sp
80023faa:	20 4d       	sub	sp,16
80023fac:	4a 06       	lddpc	r6,8002402c <print_vector+0x88>
80023fae:	1e 26       	rsub	r6,pc
80023fb0:	ef 4c ff f8 	st.w	r7[-8],r12
80023fb4:	ef 4b ff f4 	st.w	r7[-12],r11
80023fb8:	ef 4a ff f0 	st.w	r7[-16],r10
	int i;
	putstring(out_stream, "(");
80023fbc:	fe cb 00 24 	sub	r11,pc,36
80023fc0:	ee fc ff f8 	ld.w	r12,r7[-8]
80023fc4:	f0 16 00 34 	mcall	r6[208]
	for (i=0; i<3; i++) {
80023fc8:	30 08       	mov	r8,0
80023fca:	ef 48 ff fc 	st.w	r7[-4],r8
80023fce:	c2 08       	rjmp	8002400e <print_vector+0x6a>
		putfloat(out_stream, v[i], after_digits);
80023fd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023fd4:	a3 68       	lsl	r8,0x2
80023fd6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023fda:	f2 08 00 08 	add	r8,r9,r8
80023fde:	70 08       	ld.w	r8,r8[0x0]
80023fe0:	ee fa ff f0 	ld.w	r10,r7[-16]
80023fe4:	10 9b       	mov	r11,r8
80023fe6:	ee fc ff f8 	ld.w	r12,r7[-8]
80023fea:	f0 16 00 db 	mcall	r6[876]
		if (i<2) putstring(out_stream, ", ");
80023fee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023ff2:	58 18       	cp.w	r8,1
80023ff4:	e0 89 00 08 	brgt	80024004 <print_vector+0x60>
80023ff8:	fe cb 00 5c 	sub	r11,pc,92
80023ffc:	ee fc ff f8 	ld.w	r12,r7[-8]
80024000:	f0 16 00 34 	mcall	r6[208]


void print_vector(byte_stream_t *out_stream, float v[], int after_digits) {
	int i;
	putstring(out_stream, "(");
	for (i=0; i<3; i++) {
80024004:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024008:	2f f8       	sub	r8,-1
8002400a:	ef 48 ff fc 	st.w	r7[-4],r8
8002400e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024012:	58 28       	cp.w	r8,2
80024014:	fe 9a ff de 	brle	80023fd0 <print_vector+0x2c>
		putfloat(out_stream, v[i], after_digits);
		if (i<2) putstring(out_stream, ", ");

	}
	putstring(out_stream, ") ");
80024018:	fe cb 00 78 	sub	r11,pc,120
8002401c:	ee fc ff f8 	ld.w	r12,r7[-8]
80024020:	f0 16 00 34 	mcall	r6[208]

}
80024024:	2f cd       	sub	sp,-16
80024026:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002402a:	00 00       	add	r0,r0
8002402c:	80 02       	ld.sh	r2,r0[0x0]
8002402e:	3e 32       	mov	r2,-29

80024030 <print_quaternion>:

void print_quaternion(byte_stream_t *out_stream, UQuat_t *quat, int after_digits) {
80024030:	eb cd 40 c0 	pushm	r6-r7,lr
80024034:	1a 97       	mov	r7,sp
80024036:	20 3d       	sub	sp,12
80024038:	49 96       	lddpc	r6,8002409c <print_quaternion+0x6c>
8002403a:	1e 26       	rsub	r6,pc
8002403c:	ef 4c ff fc 	st.w	r7[-4],r12
80024040:	ef 4b ff f8 	st.w	r7[-8],r11
80024044:	ef 4a ff f4 	st.w	r7[-12],r10
	putstring(out_stream, "(");
80024048:	fe cb 00 b0 	sub	r11,pc,176
8002404c:	ee fc ff fc 	ld.w	r12,r7[-4]
80024050:	f0 16 00 34 	mcall	r6[208]
	putfloat(out_stream, quat->s, after_digits);
80024054:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024058:	70 08       	ld.w	r8,r8[0x0]
8002405a:	ee fa ff f4 	ld.w	r10,r7[-12]
8002405e:	10 9b       	mov	r11,r8
80024060:	ee fc ff fc 	ld.w	r12,r7[-4]
80024064:	f0 16 00 db 	mcall	r6[876]
	putstring(out_stream, ", ");
80024068:	fe cb 00 cc 	sub	r11,pc,204
8002406c:	ee fc ff fc 	ld.w	r12,r7[-4]
80024070:	f0 16 00 34 	mcall	r6[208]
	print_vector(out_stream, quat->v, after_digits);
80024074:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024078:	2f c8       	sub	r8,-4
8002407a:	ee fa ff f4 	ld.w	r10,r7[-12]
8002407e:	10 9b       	mov	r11,r8
80024080:	ee fc ff fc 	ld.w	r12,r7[-4]
80024084:	f0 16 00 f7 	mcall	r6[988]
	putstring(out_stream, ") ");
80024088:	fe cb 00 e8 	sub	r11,pc,232
8002408c:	ee fc ff fc 	ld.w	r12,r7[-4]
80024090:	f0 16 00 34 	mcall	r6[208]
}
80024094:	2f dd       	sub	sp,-12
80024096:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002409a:	00 00       	add	r0,r0
8002409c:	80 02       	ld.sh	r2,r0[0x0]
8002409e:	3e be       	mov	lr,-21

800240a0 <dbg_print>:

void dbg_print(const char* s) {
800240a0:	eb cd 40 c0 	pushm	r6-r7,lr
800240a4:	1a 97       	mov	r7,sp
800240a6:	20 1d       	sub	sp,4
800240a8:	48 86       	lddpc	r6,800240c8 <dbg_print+0x28>
800240aa:	1e 26       	rsub	r6,pc
800240ac:	ef 4c ff fc 	st.w	r7[-4],r12
	putstring(deb_stream, s);
800240b0:	ec f8 01 bc 	ld.w	r8,r6[444]
800240b4:	70 08       	ld.w	r8,r8[0x0]
800240b6:	ee fb ff fc 	ld.w	r11,r7[-4]
800240ba:	10 9c       	mov	r12,r8
800240bc:	f0 16 00 34 	mcall	r6[208]

}
800240c0:	2f fd       	sub	sp,-4
800240c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800240c6:	00 00       	add	r0,r0
800240c8:	80 02       	ld.sh	r2,r0[0x0]
800240ca:	3f 2e       	mov	lr,-14

800240cc <dbg_print_num>:

void dbg_print_num(long c, char base) {
800240cc:	eb cd 40 c0 	pushm	r6-r7,lr
800240d0:	1a 97       	mov	r7,sp
800240d2:	20 2d       	sub	sp,8
800240d4:	48 b6       	lddpc	r6,80024100 <dbg_print_num+0x34>
800240d6:	1e 26       	rsub	r6,pc
800240d8:	ef 4c ff fc 	st.w	r7[-4],r12
800240dc:	16 98       	mov	r8,r11
800240de:	ef 68 ff f8 	st.b	r7[-8],r8
	putnum(deb_stream, c, base);
800240e2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800240e6:	ec f8 01 bc 	ld.w	r8,r6[444]
800240ea:	70 08       	ld.w	r8,r8[0x0]
800240ec:	12 9a       	mov	r10,r9
800240ee:	ee fb ff fc 	ld.w	r11,r7[-4]
800240f2:	10 9c       	mov	r12,r8
800240f4:	f0 16 00 28 	mcall	r6[160]

}
800240f8:	2f ed       	sub	sp,-8
800240fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800240fe:	00 00       	add	r0,r0
80024100:	80 02       	ld.sh	r2,r0[0x0]
80024102:	3f 5a       	mov	r10,-11

80024104 <dbg_putfloat>:

void dbg_putfloat(float c, int after_digits) {
80024104:	eb cd 40 c0 	pushm	r6-r7,lr
80024108:	1a 97       	mov	r7,sp
8002410a:	20 2d       	sub	sp,8
8002410c:	48 a6       	lddpc	r6,80024134 <dbg_putfloat+0x30>
8002410e:	1e 26       	rsub	r6,pc
80024110:	ef 4c ff fc 	st.w	r7[-4],r12
80024114:	ef 4b ff f8 	st.w	r7[-8],r11
	putfloat(deb_stream, c, after_digits);
80024118:	ec f8 01 bc 	ld.w	r8,r6[444]
8002411c:	70 08       	ld.w	r8,r8[0x0]
8002411e:	ee fa ff f8 	ld.w	r10,r7[-8]
80024122:	ee fb ff fc 	ld.w	r11,r7[-4]
80024126:	10 9c       	mov	r12,r8
80024128:	f0 16 00 db 	mcall	r6[876]
}
8002412c:	2f ed       	sub	sp,-8
8002412e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024132:	00 00       	add	r0,r0
80024134:	80 02       	ld.sh	r2,r0[0x0]
80024136:	3f 92       	mov	r2,-7

80024138 <dbg_print_vector>:

void dbg_print_vector(float v[], int after_digits) {
80024138:	eb cd 40 c0 	pushm	r6-r7,lr
8002413c:	1a 97       	mov	r7,sp
8002413e:	20 2d       	sub	sp,8
80024140:	48 a6       	lddpc	r6,80024168 <dbg_print_vector+0x30>
80024142:	1e 26       	rsub	r6,pc
80024144:	ef 4c ff fc 	st.w	r7[-4],r12
80024148:	ef 4b ff f8 	st.w	r7[-8],r11
	print_vector(deb_stream, v, after_digits);
8002414c:	ec f8 01 bc 	ld.w	r8,r6[444]
80024150:	70 08       	ld.w	r8,r8[0x0]
80024152:	ee fa ff f8 	ld.w	r10,r7[-8]
80024156:	ee fb ff fc 	ld.w	r11,r7[-4]
8002415a:	10 9c       	mov	r12,r8
8002415c:	f0 16 00 f7 	mcall	r6[988]
}
80024160:	2f ed       	sub	sp,-8
80024162:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024166:	00 00       	add	r0,r0
80024168:	80 02       	ld.sh	r2,r0[0x0]
8002416a:	3f c6       	mov	r6,-4

8002416c <dbg_print_quaternion>:

void dbg_print_quaternion(UQuat_t *quat, int after_digits) {
8002416c:	eb cd 40 c0 	pushm	r6-r7,lr
80024170:	1a 97       	mov	r7,sp
80024172:	20 2d       	sub	sp,8
80024174:	48 a6       	lddpc	r6,8002419c <dbg_print_quaternion+0x30>
80024176:	1e 26       	rsub	r6,pc
80024178:	ef 4c ff fc 	st.w	r7[-4],r12
8002417c:	ef 4b ff f8 	st.w	r7[-8],r11
	print_quaternion(deb_stream, quat, after_digits);
80024180:	ec f8 01 bc 	ld.w	r8,r6[444]
80024184:	70 08       	ld.w	r8,r8[0x0]
80024186:	ee fa ff f8 	ld.w	r10,r7[-8]
8002418a:	ee fb ff fc 	ld.w	r11,r7[-4]
8002418e:	10 9c       	mov	r12,r8
80024190:	f0 16 01 a2 	mcall	r6[1672]
}
80024194:	2f ed       	sub	sp,-8
80024196:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002419a:	00 00       	add	r0,r0
8002419c:	80 02       	ld.sh	r2,r0[0x0]
8002419e:	3f fa       	mov	r10,-1
800241a0:	0a 00       	add	r0,r5

800241a2 <dbg_log_value>:


void dbg_log_value(const char* msg, long value, char base) {
800241a2:	eb cd 40 c0 	pushm	r6-r7,lr
800241a6:	1a 97       	mov	r7,sp
800241a8:	20 3d       	sub	sp,12
800241aa:	49 26       	lddpc	r6,800241f0 <dbg_log_value+0x4e>
800241ac:	1e 26       	rsub	r6,pc
800241ae:	ef 4c ff fc 	st.w	r7[-4],r12
800241b2:	ef 4b ff f8 	st.w	r7[-8],r11
800241b6:	14 98       	mov	r8,r10
800241b8:	ef 68 ff f4 	st.b	r7[-12],r8
	dbg_print(msg);
800241bc:	ee fc ff fc 	ld.w	r12,r7[-4]
800241c0:	f0 16 00 01 	mcall	r6[4]
	if (base>1) {
800241c4:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800241c8:	30 18       	mov	r8,1
800241ca:	f0 09 18 00 	cp.b	r9,r8
800241ce:	e0 88 00 09 	brls	800241e0 <dbg_log_value+0x3e>
		dbg_print_num(value, base);
800241d2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800241d6:	10 9b       	mov	r11,r8
800241d8:	ee fc ff f8 	ld.w	r12,r7[-8]
800241dc:	f0 16 00 04 	mcall	r6[16]
	}
	dbg_print("\n");
800241e0:	fe cc 00 40 	sub	r12,pc,64
800241e4:	f0 16 00 01 	mcall	r6[4]

}
800241e8:	2f dd       	sub	sp,-12
800241ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800241ee:	00 00       	add	r0,r0
800241f0:	80 02       	ld.sh	r2,r0[0x0]
800241f2:	40 30       	lddsp	r0,sp[0xc]

800241f4 <adcifa_get_calibration_data>:
#include "compiler.h"
#include "adcifa.h"

void adcifa_get_calibration_data(volatile avr32_adcifa_t * adcifa,
                                 adcifa_opt_t * p_adcifa_opt)
{
800241f4:	eb cd 40 80 	pushm	r7,lr
800241f8:	1a 97       	mov	r7,sp
800241fa:	20 6d       	sub	sp,24
800241fc:	ef 4c ff ec 	st.w	r7[-20],r12
80024200:	ef 4b ff e8 	st.w	r7[-24],r11
	// Get Offset Calibration
	signed int adc_ocal = (( *(volatile signed int*)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS + AVR32_FLASHC_FROW_OCAL_WORD)) &  AVR32_FLASHC_FROW_OCAL_MASK) >> AVR32_FLASHC_FROW_OCAL_OFFSET;
80024204:	e0 68 02 04 	mov	r8,516
80024208:	ea 18 80 80 	orh	r8,0x8080
8002420c:	70 08       	ld.w	r8,r8[0x0]
8002420e:	e6 18 3f 00 	andh	r8,0x3f00,COH
80024212:	b9 48       	asr	r8,0x18
80024214:	ef 48 ff f0 	st.w	r7[-16],r8
	// Get Gain Calibration
	signed int adc_gcal = (( *(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS + AVR32_FLASHC_FROW_GCAL_WORD)) &  AVR32_FLASHC_FROW_GCAL_MASK) >> AVR32_FLASHC_FROW_GCAL_OFFSET;
80024218:	e0 68 02 04 	mov	r8,516
8002421c:	ea 18 80 80 	orh	r8,0x8080
80024220:	70 08       	ld.w	r8,r8[0x0]
80024222:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
80024226:	ef 48 ff f4 	st.w	r7[-12],r8
	//  Get S/H Calibration
	signed int adc_gain0 = (( *(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS + AVR32_FLASHC_FROW_GAIN0_WORD)) &  AVR32_FLASHC_FROW_GAIN0_MASK) >> AVR32_FLASHC_FROW_GAIN0_OFFSET;
8002422a:	e0 68 02 08 	mov	r8,520
8002422e:	ea 18 80 80 	orh	r8,0x8080
80024232:	70 08       	ld.w	r8,r8[0x0]
80024234:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
80024238:	ef 48 ff f8 	st.w	r7[-8],r8
	signed int adc_gain1 = (( *(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS + AVR32_FLASHC_FROW_GAIN1_WORD)) &  AVR32_FLASHC_FROW_GAIN1_MASK) >> AVR32_FLASHC_FROW_GAIN1_OFFSET;
8002423c:	e0 68 02 08 	mov	r8,520
80024240:	ea 18 80 80 	orh	r8,0x8080
80024244:	70 08       	ld.w	r8,r8[0x0]
80024246:	e6 18 03 ff 	andh	r8,0x3ff,COH
8002424a:	b1 48       	asr	r8,0x10
8002424c:	ef 48 ff fc 	st.w	r7[-4],r8

	// Get ADC Offset Calibration
	p_adcifa_opt->offset_calibration_value = adc_ocal;
80024250:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024254:	5c 88       	casts.h	r8
80024256:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002425a:	b2 68       	st.h	r9[0xc],r8

	// Get ADC Gain Calibration
	p_adcifa_opt->gain_calibration_value = adc_gcal ;
8002425c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024260:	5c 88       	casts.h	r8
80024262:	ee f9 ff e8 	ld.w	r9,r7[-24]
80024266:	b2 58       	st.h	r9[0xa],r8

	// Get Sample & Hold Gain Calibration for Seq 0
	p_adcifa_opt->sh0_calibration_value = adc_gain0;
80024268:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002426c:	5c 88       	casts.h	r8
8002426e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80024272:	b2 78       	st.h	r9[0xe],r8

	// Get Sample & Hold Gain Calibration for Seq 1
	p_adcifa_opt->sh1_calibration_value = adc_gain1;
80024274:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024278:	5c 88       	casts.h	r8
8002427a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002427e:	f3 58 00 10 	st.h	r9[16],r8
}
80024282:	2f ad       	sub	sp,-24
80024284:	e3 cd 80 80 	ldm	sp++,r7,pc

80024288 <adcifa_configure>:


U8 adcifa_configure(volatile avr32_adcifa_t * adcifa,
                    adcifa_opt_t * p_adcifa_opt,
                    U32 pb_hz)
{
80024288:	eb cd 40 80 	pushm	r7,lr
8002428c:	1a 97       	mov	r7,sp
8002428e:	20 3d       	sub	sp,12
80024290:	ef 4c ff fc 	st.w	r7[-4],r12
80024294:	ef 4b ff f8 	st.w	r7[-8],r11
80024298:	ef 4a ff f4 	st.w	r7[-12],r10

	// Sanity Check
	Assert( adcifa!=NULL );

	// Set the ADC configuration
	AVR32_ADCIFA.cfg = (p_adcifa_opt->sleep_mode_enable << AVR32_ADCIFA_CFG_SLEEP)
8002429c:	fc 7a 24 00 	mov	r10,-187392
800242a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800242a4:	f1 38 00 08 	ld.ub	r8,r8[8]
800242a8:	f0 09 15 02 	lsl	r9,r8,0x2
	                    | (p_adcifa_opt->single_sequencer_mode << AVR32_ADCIFA_CFG_SSMQ)
800242ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800242b0:	11 e8       	ld.ub	r8,r8[0x6]
800242b2:	a3 78       	lsl	r8,0x3
	                    | (p_adcifa_opt->free_running_mode_enable << AVR32_ADCIFA_CFG_FRM)
800242b4:	10 49       	or	r9,r8
800242b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800242ba:	11 f8       	ld.ub	r8,r8[0x7]
800242bc:	a5 68       	lsl	r8,0x4
	                    | (p_adcifa_opt->reference_source << AVR32_ADCIFA_CFG_RS)
800242be:	10 49       	or	r9,r8
800242c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800242c4:	11 c8       	ld.ub	r8,r8[0x4]
800242c6:	a5 78       	lsl	r8,0x5
	                    | (p_adcifa_opt->sample_and_hold_disable << AVR32_ADCIFA_CFG_SHD)
800242c8:	10 49       	or	r9,r8
800242ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800242ce:	11 d8       	ld.ub	r8,r8[0x5]
800242d0:	a7 78       	lsl	r8,0x7
	                    | (((ADCIFA_START_UP_TIME * (p_adcifa_opt->frequency/1000))/32000) << AVR32_ADCIFA_CFG_SUT);
800242d2:	f3 e8 10 08 	or	r8,r9,r8

	// Sanity Check
	Assert( adcifa!=NULL );

	// Set the ADC configuration
	AVR32_ADCIFA.cfg = (p_adcifa_opt->sleep_mode_enable << AVR32_ADCIFA_CFG_SLEEP)
800242d6:	10 9b       	mov	r11,r8
	                    | (p_adcifa_opt->single_sequencer_mode << AVR32_ADCIFA_CFG_SSMQ)
	                    | (p_adcifa_opt->free_running_mode_enable << AVR32_ADCIFA_CFG_FRM)
	                    | (p_adcifa_opt->reference_source << AVR32_ADCIFA_CFG_RS)
	                    | (p_adcifa_opt->sample_and_hold_disable << AVR32_ADCIFA_CFG_SHD)
	                    | (((ADCIFA_START_UP_TIME * (p_adcifa_opt->frequency/1000))/32000) << AVR32_ADCIFA_CFG_SUT);
800242d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800242dc:	70 09       	ld.w	r9,r8[0x0]
800242de:	e0 68 4d d3 	mov	r8,19923
800242e2:	ea 18 10 62 	orh	r8,0x1062
800242e6:	f2 08 06 48 	mulu.d	r8,r9,r8
800242ea:	a7 89       	lsr	r9,0x6
800242ec:	e0 68 03 e8 	mov	r8,1000
800242f0:	b1 39       	mul	r9,r8
800242f2:	e0 68 4d d3 	mov	r8,19923
800242f6:	ea 18 10 62 	orh	r8,0x1062
800242fa:	f2 08 06 48 	mulu.d	r8,r9,r8
800242fe:	f2 08 16 0b 	lsr	r8,r9,0xb
80024302:	b1 68       	lsl	r8,0x10

	// Sanity Check
	Assert( adcifa!=NULL );

	// Set the ADC configuration
	AVR32_ADCIFA.cfg = (p_adcifa_opt->sleep_mode_enable << AVR32_ADCIFA_CFG_SLEEP)
80024304:	f7 e8 10 08 	or	r8,r11,r8
80024308:	95 18       	st.w	r10[0x4],r8
	                    | (p_adcifa_opt->reference_source << AVR32_ADCIFA_CFG_RS)
	                    | (p_adcifa_opt->sample_and_hold_disable << AVR32_ADCIFA_CFG_SHD)
	                    | (((ADCIFA_START_UP_TIME * (p_adcifa_opt->frequency/1000))/32000) << AVR32_ADCIFA_CFG_SUT);

	// Configure Clock  (rounded up)
	adcifa->ckdiv = (((pb_hz / (2*p_adcifa_opt->frequency))-1) << AVR32_ADCIFA_CKDIV_CNT_OFFSET) & AVR32_ADCIFA_CKDIV_CNT_MASK;
8002430a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002430e:	70 08       	ld.w	r8,r8[0x0]
80024310:	f0 09 15 01 	lsl	r9,r8,0x1
80024314:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024318:	f0 09 0d 08 	divu	r8,r8,r9
8002431c:	20 18       	sub	r8,1
8002431e:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80024322:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024326:	f1 49 00 44 	st.w	r8[68],r9

	// Set ADC Offset Calibration
	ADCIFA_set_offset_calibration(p_adcifa_opt->offset_calibration_value);
8002432a:	fc 78 24 00 	mov	r8,-187392
8002432e:	fc 79 24 00 	mov	r9,-187392
80024332:	73 aa       	ld.w	r10,r9[0x68]
80024334:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024338:	92 69       	ld.sh	r9,r9[0xc]
8002433a:	b9 69       	lsl	r9,0x18
8002433c:	e6 19 3f 00 	andh	r9,0x3f00,COH
80024340:	f5 e9 10 09 	or	r9,r10,r9
80024344:	f1 49 00 68 	st.w	r8[104],r9

	// Set ADC Gain Calibration
	ADCIFA_set_gain_calibration(p_adcifa_opt->gain_calibration_value);
80024348:	fc 78 24 00 	mov	r8,-187392
8002434c:	fc 79 24 00 	mov	r9,-187392
80024350:	73 aa       	ld.w	r10,r9[0x68]
80024352:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024356:	92 59       	ld.sh	r9,r9[0xa]
80024358:	f3 d9 c0 0f 	bfextu	r9,r9,0x0,0xf
8002435c:	f5 e9 10 09 	or	r9,r10,r9
80024360:	f1 49 00 68 	st.w	r8[104],r9

	// Set Sample & Hold Gain Calibration for seq 0
	ADCIFA_set_sh0_gain_calibration(p_adcifa_opt->sh0_calibration_value);
80024364:	fc 78 24 00 	mov	r8,-187392
80024368:	fc 79 24 00 	mov	r9,-187392
8002436c:	73 ba       	ld.w	r10,r9[0x6c]
8002436e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024372:	92 79       	ld.sh	r9,r9[0xe]
80024374:	f3 d9 c0 0a 	bfextu	r9,r9,0x0,0xa
80024378:	f5 e9 10 09 	or	r9,r10,r9
8002437c:	f1 49 00 6c 	st.w	r8[108],r9

	// Set Sample & Hold Gain Calibration for seq 1
	ADCIFA_set_sh1_gain_calibration(p_adcifa_opt->sh1_calibration_value);
80024380:	fc 78 24 00 	mov	r8,-187392
80024384:	fc 79 24 00 	mov	r9,-187392
80024388:	73 ba       	ld.w	r10,r9[0x6c]
8002438a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002438e:	f3 09 00 10 	ld.sh	r9,r9[16]
80024392:	b1 69       	lsl	r9,0x10
80024394:	e6 19 03 ff 	andh	r9,0x3ff,COH
80024398:	f5 e9 10 09 	or	r9,r10,r9
8002439c:	f1 49 00 6c 	st.w	r8[108],r9

	// Enable ADCIFA
	ADCIFA_enable();
800243a0:	fc 78 24 00 	mov	r8,-187392
800243a4:	fc 79 24 00 	mov	r9,-187392
800243a8:	72 19       	ld.w	r9,r9[0x4]
800243aa:	a1 a9       	sbr	r9,0x0
800243ac:	91 19       	st.w	r8[0x4],r9
800243ae:	c0 28       	rjmp	800243b2 <adcifa_configure+0x12a>

	// Wait Startup Time
	while (1) {
		if (ADCIFA_is_startup_time()) break;
	}
800243b0:	d7 03       	nop
	// Enable ADCIFA
	ADCIFA_enable();

	// Wait Startup Time
	while (1) {
		if (ADCIFA_is_startup_time()) break;
800243b2:	fc 78 24 00 	mov	r8,-187392
800243b6:	70 28       	ld.w	r8,r8[0x8]
800243b8:	e2 18 40 00 	andl	r8,0x4000,COH
800243bc:	cf a0       	breq	800243b0 <adcifa_configure+0x128>
	}

	return ADCIFA_CONFIGURATION_ACCEPTED;
800243be:	30 18       	mov	r8,1
}
800243c0:	10 9c       	mov	r12,r8
800243c2:	2f dd       	sub	sp,-12
800243c4:	e3 cd 80 80 	ldm	sp++,r7,pc

800243c8 <adcifa_configure_sequencer>:

U8 adcifa_configure_sequencer(volatile avr32_adcifa_t * adcifa,
                              U8 sequencer,
                              adcifa_sequencer_opt_t * p_adcifa_sequencer_opt,
                              adcifa_sequencer_conversion_opt_t * p_adcifa_sequencer_conversion_opt)
{
800243c8:	eb cd 40 80 	pushm	r7,lr
800243cc:	1a 97       	mov	r7,sp
800243ce:	20 bd       	sub	sp,44
800243d0:	ef 4c ff e0 	st.w	r7[-32],r12
800243d4:	16 98       	mov	r8,r11
800243d6:	ef 4a ff d8 	st.w	r7[-40],r10
800243da:	ef 49 ff d4 	st.w	r7[-44],r9
800243de:	ef 68 ff dc 	st.b	r7[-36],r8
	U8 g[8]={0};
800243e2:	30 08       	mov	r8,0
800243e4:	30 09       	mov	r9,0
800243e6:	ee e9 ff f4 	st.d	r7[-12],r8
	U8 mp[8]={0};
800243ea:	30 08       	mov	r8,0
800243ec:	30 09       	mov	r9,0
800243ee:	ee e9 ff ec 	st.d	r7[-20],r8
	U8 mn[8]={0};
800243f2:	30 08       	mov	r8,0
800243f4:	30 09       	mov	r9,0
800243f6:	ee e9 ff e4 	st.d	r7[-28],r8
	U8 i;
	// Sanity Check
	Assert( adcifa!=NULL );

	// Switch case with sequencer
	switch (sequencer) {
800243fa:	ef 38 ff dc 	ld.ub	r8,r7[-36]
800243fe:	58 08       	cp.w	r8,0
80024400:	c0 60       	breq	8002440c <adcifa_configure_sequencer+0x44>
80024402:	58 18       	cp.w	r8,1
80024404:	e0 80 00 ed 	breq	800245de <adcifa_configure_sequencer+0x216>
80024408:	e0 8f 01 d7 	bral	800247b6 <adcifa_configure_sequencer+0x3ee>
		// Sequencer 0
	case 0:
		// Configure Sequencer 0
		ADCIFA_configure_sequencer_0((p_adcifa_sequencer_opt->convnb-1),
8002440c:	fc 78 24 00 	mov	r8,-187392
80024410:	ee f9 ff d8 	ld.w	r9,r7[-40]
80024414:	13 89       	ld.ub	r9,r9[0x0]
80024416:	20 19       	sub	r9,1
80024418:	f2 0a 15 10 	lsl	r10,r9,0x10
8002441c:	ee f9 ff d8 	ld.w	r9,r7[-40]
80024420:	13 99       	ld.ub	r9,r9[0x1]
80024422:	ad 69       	lsl	r9,0xc
80024424:	12 4a       	or	r10,r9
80024426:	ee f9 ff d8 	ld.w	r9,r7[-40]
8002442a:	13 a9       	ld.ub	r9,r9[0x2]
8002442c:	a9 69       	lsl	r9,0x8
8002442e:	12 4a       	or	r10,r9
80024430:	ee f9 ff d8 	ld.w	r9,r7[-40]
80024434:	13 b9       	ld.ub	r9,r9[0x3]
80024436:	a3 69       	lsl	r9,0x2
80024438:	12 4a       	or	r10,r9
8002443a:	ee f9 ff d8 	ld.w	r9,r7[-40]
8002443e:	13 c9       	ld.ub	r9,r9[0x4]
80024440:	a3 79       	lsl	r9,0x3
80024442:	12 4a       	or	r10,r9
80024444:	ee f9 ff d8 	ld.w	r9,r7[-40]
80024448:	13 d9       	ld.ub	r9,r9[0x5]
8002444a:	a1 79       	lsl	r9,0x1
8002444c:	12 4a       	or	r10,r9
8002444e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80024452:	13 e9       	ld.ub	r9,r9[0x6]
80024454:	f5 e9 10 09 	or	r9,r10,r9
80024458:	91 59       	st.w	r8[0x14],r9
		                             (p_adcifa_sequencer_opt->sh_mode),
#endif
		                             (p_adcifa_sequencer_opt->half_word_adjustment),
		                             (p_adcifa_sequencer_opt->software_acknowledge));
		// Configure Gain for Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
8002445a:	30 08       	mov	r8,0
8002445c:	ef 68 ff ff 	st.b	r7[-1],r8
80024460:	c1 68       	rjmp	8002448c <adcifa_configure_sequencer+0xc4>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
80024462:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80024466:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002446a:	12 98       	mov	r8,r9
8002446c:	a1 78       	lsl	r8,0x1
8002446e:	12 08       	add	r8,r9
80024470:	ee f9 ff d4 	ld.w	r9,r7[-44]
80024474:	f2 08 00 08 	add	r8,r9,r8
80024478:	11 a8       	ld.ub	r8,r8[0x2]
8002447a:	ee 0a 00 09 	add	r9,r7,r10
8002447e:	f3 68 ff f4 	st.b	r9[-12],r8
		                             (p_adcifa_sequencer_opt->sh_mode),
#endif
		                             (p_adcifa_sequencer_opt->half_word_adjustment),
		                             (p_adcifa_sequencer_opt->software_acknowledge));
		// Configure Gain for Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
80024482:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80024486:	2f f8       	sub	r8,-1
80024488:	ef 68 ff ff 	st.b	r7[-1],r8
8002448c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80024490:	11 88       	ld.ub	r8,r8[0x0]
80024492:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80024496:	f0 09 18 00 	cp.b	r9,r8
8002449a:	ce 43       	brcs	80024462 <adcifa_configure_sequencer+0x9a>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2], g[1], g[0]);
8002449c:	fc 78 24 00 	mov	r8,-187392
800244a0:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800244a4:	f2 0a 15 1c 	lsl	r10,r9,0x1c
800244a8:	ef 39 ff fa 	ld.ub	r9,r7[-6]
800244ac:	b9 69       	lsl	r9,0x18
800244ae:	12 4a       	or	r10,r9
800244b0:	ef 39 ff f9 	ld.ub	r9,r7[-7]
800244b4:	b5 69       	lsl	r9,0x14
800244b6:	12 4a       	or	r10,r9
800244b8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800244bc:	b1 69       	lsl	r9,0x10
800244be:	12 4a       	or	r10,r9
800244c0:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800244c4:	ad 69       	lsl	r9,0xc
800244c6:	12 4a       	or	r10,r9
800244c8:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800244cc:	a9 69       	lsl	r9,0x8
800244ce:	12 4a       	or	r10,r9
800244d0:	ef 39 ff f5 	ld.ub	r9,r7[-11]
800244d4:	a5 69       	lsl	r9,0x4
800244d6:	12 4a       	or	r10,r9
800244d8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800244dc:	f5 e9 10 09 	or	r9,r10,r9
800244e0:	91 79       	st.w	r8[0x1c],r9

		// Configure Mux for Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800244e2:	30 08       	mov	r8,0
800244e4:	ef 68 ff ff 	st.b	r7[-1],r8
800244e8:	c2 68       	rjmp	80024534 <adcifa_configure_sequencer+0x16c>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
800244ea:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800244ee:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800244f2:	12 98       	mov	r8,r9
800244f4:	a1 78       	lsl	r8,0x1
800244f6:	12 08       	add	r8,r9
800244f8:	ee f9 ff d4 	ld.w	r9,r7[-44]
800244fc:	f2 08 00 08 	add	r8,r9,r8
80024500:	11 88       	ld.ub	r8,r8[0x0]
80024502:	ee 0a 00 09 	add	r9,r7,r10
80024506:	f3 68 ff ec 	st.b	r9[-20],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
8002450a:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8002450e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80024512:	12 98       	mov	r8,r9
80024514:	a1 78       	lsl	r8,0x1
80024516:	12 08       	add	r8,r9
80024518:	ee f9 ff d4 	ld.w	r9,r7[-44]
8002451c:	f2 08 00 08 	add	r8,r9,r8
80024520:	11 98       	ld.ub	r8,r8[0x1]
80024522:	ee 0a 00 09 	add	r9,r7,r10
80024526:	f3 68 ff e4 	st.b	r9[-28],r8
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2], g[1], g[0]);

		// Configure Mux for Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
8002452a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002452e:	2f f8       	sub	r8,-1
80024530:	ef 68 ff ff 	st.b	r7[-1],r8
80024534:	ee f8 ff d8 	ld.w	r8,r7[-40]
80024538:	11 88       	ld.ub	r8,r8[0x0]
8002453a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002453e:	f0 09 18 00 	cp.b	r9,r8
80024542:	cd 43       	brcs	800244ea <adcifa_configure_sequencer+0x122>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel0p(mp[7], mp[6], mp[5], mp[4], mp[3], mp[2], mp[1], mp[0]);
80024544:	fc 78 24 00 	mov	r8,-187392
80024548:	ef 39 ff f3 	ld.ub	r9,r7[-13]
8002454c:	f2 0a 15 18 	lsl	r10,r9,0x18
80024550:	ef 39 ff f2 	ld.ub	r9,r7[-14]
80024554:	b1 69       	lsl	r9,0x10
80024556:	12 4a       	or	r10,r9
80024558:	ef 39 ff f1 	ld.ub	r9,r7[-15]
8002455c:	a9 69       	lsl	r9,0x8
8002455e:	12 4a       	or	r10,r9
80024560:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80024564:	f5 e9 10 09 	or	r9,r10,r9
80024568:	91 b9       	st.w	r8[0x2c],r9
8002456a:	fc 78 24 00 	mov	r8,-187392
8002456e:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80024572:	f2 0a 15 18 	lsl	r10,r9,0x18
80024576:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8002457a:	b1 69       	lsl	r9,0x10
8002457c:	12 4a       	or	r10,r9
8002457e:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80024582:	a9 69       	lsl	r9,0x8
80024584:	12 4a       	or	r10,r9
80024586:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002458a:	f5 e9 10 09 	or	r9,r10,r9
8002458e:	91 99       	st.w	r8[0x24],r9
		ADCIFA_configure_muxsel0n(mn[7], mn[6], mn[5], mn[4], mn[3], mn[2], mn[1], mn[0]);
80024590:	fc 78 24 00 	mov	r8,-187392
80024594:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80024598:	f2 0a 15 18 	lsl	r10,r9,0x18
8002459c:	ef 39 ff ea 	ld.ub	r9,r7[-22]
800245a0:	b1 69       	lsl	r9,0x10
800245a2:	12 4a       	or	r10,r9
800245a4:	ef 39 ff e9 	ld.ub	r9,r7[-23]
800245a8:	a9 69       	lsl	r9,0x8
800245aa:	12 4a       	or	r10,r9
800245ac:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800245b0:	f5 e9 10 09 	or	r9,r10,r9
800245b4:	91 f9       	st.w	r8[0x3c],r9
800245b6:	fc 78 24 00 	mov	r8,-187392
800245ba:	ef 39 ff e7 	ld.ub	r9,r7[-25]
800245be:	f2 0a 15 18 	lsl	r10,r9,0x18
800245c2:	ef 39 ff e6 	ld.ub	r9,r7[-26]
800245c6:	b1 69       	lsl	r9,0x10
800245c8:	12 4a       	or	r10,r9
800245ca:	ef 39 ff e5 	ld.ub	r9,r7[-27]
800245ce:	a9 69       	lsl	r9,0x8
800245d0:	12 4a       	or	r10,r9
800245d2:	ef 39 ff e4 	ld.ub	r9,r7[-28]
800245d6:	f5 e9 10 09 	or	r9,r10,r9
800245da:	91 d9       	st.w	r8[0x34],r9
		break;
800245dc:	ce d8       	rjmp	800247b6 <adcifa_configure_sequencer+0x3ee>
		// Sequencer 1
	case 1:
		// Configure Sequencer 1
		ADCIFA_configure_sequencer_1((p_adcifa_sequencer_opt->convnb-1),
800245de:	fc 78 24 00 	mov	r8,-187392
800245e2:	ee f9 ff d8 	ld.w	r9,r7[-40]
800245e6:	13 89       	ld.ub	r9,r9[0x0]
800245e8:	20 19       	sub	r9,1
800245ea:	f2 0a 15 10 	lsl	r10,r9,0x10
800245ee:	ee f9 ff d8 	ld.w	r9,r7[-40]
800245f2:	13 99       	ld.ub	r9,r9[0x1]
800245f4:	ad 69       	lsl	r9,0xc
800245f6:	12 4a       	or	r10,r9
800245f8:	ee f9 ff d8 	ld.w	r9,r7[-40]
800245fc:	13 a9       	ld.ub	r9,r9[0x2]
800245fe:	a9 69       	lsl	r9,0x8
80024600:	12 4a       	or	r10,r9
80024602:	ee f9 ff d8 	ld.w	r9,r7[-40]
80024606:	13 b9       	ld.ub	r9,r9[0x3]
80024608:	a3 69       	lsl	r9,0x2
8002460a:	12 4a       	or	r10,r9
8002460c:	ee f9 ff d8 	ld.w	r9,r7[-40]
80024610:	13 c9       	ld.ub	r9,r9[0x4]
80024612:	a3 79       	lsl	r9,0x3
80024614:	12 4a       	or	r10,r9
80024616:	ee f9 ff d8 	ld.w	r9,r7[-40]
8002461a:	13 d9       	ld.ub	r9,r9[0x5]
8002461c:	a1 79       	lsl	r9,0x1
8002461e:	f5 e9 10 09 	or	r9,r10,r9
80024622:	12 9a       	mov	r10,r9
80024624:	a5 aa       	sbr	r10,0x4
80024626:	ee f9 ff d8 	ld.w	r9,r7[-40]
8002462a:	13 e9       	ld.ub	r9,r9[0x6]
8002462c:	f5 e9 10 09 	or	r9,r10,r9
80024630:	91 69       	st.w	r8[0x18],r9
#endif
		                             (p_adcifa_sequencer_opt->half_word_adjustment),
		                             (p_adcifa_sequencer_opt->software_acknowledge));

		// Configure Gain for Sequencer 1
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
80024632:	30 08       	mov	r8,0
80024634:	ef 68 ff ff 	st.b	r7[-1],r8
80024638:	c1 68       	rjmp	80024664 <adcifa_configure_sequencer+0x29c>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
8002463a:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8002463e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80024642:	12 98       	mov	r8,r9
80024644:	a1 78       	lsl	r8,0x1
80024646:	12 08       	add	r8,r9
80024648:	ee f9 ff d4 	ld.w	r9,r7[-44]
8002464c:	f2 08 00 08 	add	r8,r9,r8
80024650:	11 a8       	ld.ub	r8,r8[0x2]
80024652:	ee 0a 00 09 	add	r9,r7,r10
80024656:	f3 68 ff f4 	st.b	r9[-12],r8
#endif
		                             (p_adcifa_sequencer_opt->half_word_adjustment),
		                             (p_adcifa_sequencer_opt->software_acknowledge));

		// Configure Gain for Sequencer 1
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
8002465a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002465e:	2f f8       	sub	r8,-1
80024660:	ef 68 ff ff 	st.b	r7[-1],r8
80024664:	ee f8 ff d8 	ld.w	r8,r7[-40]
80024668:	11 88       	ld.ub	r8,r8[0x0]
8002466a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002466e:	f0 09 18 00 	cp.b	r9,r8
80024672:	ce 43       	brcs	8002463a <adcifa_configure_sequencer+0x272>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2], g[1], g[0]);
80024674:	fc 78 24 00 	mov	r8,-187392
80024678:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8002467c:	f2 0a 15 1c 	lsl	r10,r9,0x1c
80024680:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80024684:	b9 69       	lsl	r9,0x18
80024686:	12 4a       	or	r10,r9
80024688:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8002468c:	b5 69       	lsl	r9,0x14
8002468e:	12 4a       	or	r10,r9
80024690:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80024694:	b1 69       	lsl	r9,0x10
80024696:	12 4a       	or	r10,r9
80024698:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8002469c:	ad 69       	lsl	r9,0xc
8002469e:	12 4a       	or	r10,r9
800246a0:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800246a4:	a9 69       	lsl	r9,0x8
800246a6:	12 4a       	or	r10,r9
800246a8:	ef 39 ff f5 	ld.ub	r9,r7[-11]
800246ac:	a5 69       	lsl	r9,0x4
800246ae:	12 4a       	or	r10,r9
800246b0:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800246b4:	f5 e9 10 09 	or	r9,r10,r9
800246b8:	91 89       	st.w	r8[0x20],r9

		// Configure Mux for Sequencer 1
		for (i = 0 ; i < p_adcifa_sequencer_opt->convnb; i++) {
800246ba:	30 08       	mov	r8,0
800246bc:	ef 68 ff ff 	st.b	r7[-1],r8
800246c0:	c2 68       	rjmp	8002470c <adcifa_configure_sequencer+0x344>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
800246c2:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800246c6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800246ca:	12 98       	mov	r8,r9
800246cc:	a1 78       	lsl	r8,0x1
800246ce:	12 08       	add	r8,r9
800246d0:	ee f9 ff d4 	ld.w	r9,r7[-44]
800246d4:	f2 08 00 08 	add	r8,r9,r8
800246d8:	11 88       	ld.ub	r8,r8[0x0]
800246da:	ee 0a 00 09 	add	r9,r7,r10
800246de:	f3 68 ff ec 	st.b	r9[-20],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
800246e2:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800246e6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800246ea:	12 98       	mov	r8,r9
800246ec:	a1 78       	lsl	r8,0x1
800246ee:	12 08       	add	r8,r9
800246f0:	ee f9 ff d4 	ld.w	r9,r7[-44]
800246f4:	f2 08 00 08 	add	r8,r9,r8
800246f8:	11 98       	ld.ub	r8,r8[0x1]
800246fa:	ee 0a 00 09 	add	r9,r7,r10
800246fe:	f3 68 ff e4 	st.b	r9[-28],r8
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2], g[1], g[0]);

		// Configure Mux for Sequencer 1
		for (i = 0 ; i < p_adcifa_sequencer_opt->convnb; i++) {
80024702:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80024706:	2f f8       	sub	r8,-1
80024708:	ef 68 ff ff 	st.b	r7[-1],r8
8002470c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80024710:	11 88       	ld.ub	r8,r8[0x0]
80024712:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80024716:	f0 09 18 00 	cp.b	r9,r8
8002471a:	cd 43       	brcs	800246c2 <adcifa_configure_sequencer+0x2fa>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel1p(mp[7], mp[6], mp[5], mp[4], mp[3], mp[2], mp[1], mp[0]);
8002471c:	fc 78 24 00 	mov	r8,-187392
80024720:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80024724:	f2 0a 15 18 	lsl	r10,r9,0x18
80024728:	ef 39 ff f2 	ld.ub	r9,r7[-14]
8002472c:	b1 69       	lsl	r9,0x10
8002472e:	12 4a       	or	r10,r9
80024730:	ef 39 ff f1 	ld.ub	r9,r7[-15]
80024734:	a9 69       	lsl	r9,0x8
80024736:	12 4a       	or	r10,r9
80024738:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002473c:	f5 e9 10 09 	or	r9,r10,r9
80024740:	91 c9       	st.w	r8[0x30],r9
80024742:	fc 78 24 00 	mov	r8,-187392
80024746:	ef 39 ff ef 	ld.ub	r9,r7[-17]
8002474a:	f2 0a 15 18 	lsl	r10,r9,0x18
8002474e:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80024752:	b1 69       	lsl	r9,0x10
80024754:	12 4a       	or	r10,r9
80024756:	ef 39 ff ed 	ld.ub	r9,r7[-19]
8002475a:	a9 69       	lsl	r9,0x8
8002475c:	12 4a       	or	r10,r9
8002475e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80024762:	f5 e9 10 09 	or	r9,r10,r9
80024766:	91 a9       	st.w	r8[0x28],r9
		ADCIFA_configure_muxsel1n(mn[7], mn[6], mn[5], mn[4], mn[3], mn[2], mn[1], mn[0]);
80024768:	fc 78 24 00 	mov	r8,-187392
8002476c:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80024770:	f2 0a 15 18 	lsl	r10,r9,0x18
80024774:	ef 39 ff ea 	ld.ub	r9,r7[-22]
80024778:	b1 69       	lsl	r9,0x10
8002477a:	12 4a       	or	r10,r9
8002477c:	ef 39 ff e9 	ld.ub	r9,r7[-23]
80024780:	a9 69       	lsl	r9,0x8
80024782:	12 4a       	or	r10,r9
80024784:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80024788:	f5 e9 10 09 	or	r9,r10,r9
8002478c:	f1 49 00 40 	st.w	r8[64],r9
80024790:	fc 78 24 00 	mov	r8,-187392
80024794:	ef 39 ff e7 	ld.ub	r9,r7[-25]
80024798:	f2 0a 15 18 	lsl	r10,r9,0x18
8002479c:	ef 39 ff e6 	ld.ub	r9,r7[-26]
800247a0:	b1 69       	lsl	r9,0x10
800247a2:	12 4a       	or	r10,r9
800247a4:	ef 39 ff e5 	ld.ub	r9,r7[-27]
800247a8:	a9 69       	lsl	r9,0x8
800247aa:	12 4a       	or	r10,r9
800247ac:	ef 39 ff e4 	ld.ub	r9,r7[-28]
800247b0:	f5 e9 10 09 	or	r9,r10,r9
800247b4:	91 e9       	st.w	r8[0x38],r9
		break;
	default:
		break;
	}
	return ADCIFA_CONFIGURATION_ACCEPTED;
800247b6:	30 18       	mov	r8,1
}
800247b8:	10 9c       	mov	r12,r8
800247ba:	2f 5d       	sub	sp,-44
800247bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800247c0 <adcifa_configure_window_monitor>:

void adcifa_configure_window_monitor( volatile avr32_adcifa_t * adcifa,
                                      U8 sequencer,
                                      adcifa_window_monitor_opt_t * adc_window_monitor_opt )
{
800247c0:	eb cd 40 80 	pushm	r7,lr
800247c4:	1a 97       	mov	r7,sp
800247c6:	20 4d       	sub	sp,16
800247c8:	ef 4c ff f8 	st.w	r7[-8],r12
800247cc:	16 98       	mov	r8,r11
800247ce:	ef 4a ff f0 	st.w	r7[-16],r10
800247d2:	ef 68 ff f4 	st.b	r7[-12],r8
	switch (sequencer) {
800247d6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800247da:	58 08       	cp.w	r8,0
800247dc:	c0 40       	breq	800247e4 <adcifa_configure_window_monitor+0x24>
800247de:	58 18       	cp.w	r8,1
800247e0:	c3 d0       	breq	8002485a <adcifa_configure_window_monitor+0x9a>
800247e2:	c7 68       	rjmp	800248ce <adcifa_configure_window_monitor+0x10e>
	int temp;
	case 0:
		// Configure sequencer 0
		temp = adcifa->imr & AVR32_ADCIFA_WM0_MASK;
800247e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800247e8:	71 e8       	ld.w	r8,r8[0x78]
800247ea:	e2 18 04 00 	andl	r8,0x400,COH
800247ee:	ef 48 ff fc 	st.w	r7[-4],r8
		adcifa->idr = temp;         // disable interrupt if it was enabled
800247f2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800247f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800247fa:	f1 49 00 74 	st.w	r8[116],r9
		adcifa->wcfg0 = (adc_window_monitor_opt->source_index << AVR32_ADCIFA_WCFG0_SRC_OFFSET)
800247fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024802:	11 98       	ld.ub	r8,r8[0x1]
80024804:	f0 09 15 1b 	lsl	r9,r8,0x1b
		              | (adc_window_monitor_opt->high_threshold << AVR32_ADCIFA_WCFG0_HT_OFFSET)
80024808:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002480c:	90 28       	ld.sh	r8,r8[0x4]
8002480e:	5c 78       	castu.h	r8
80024810:	ad 68       	lsl	r8,0xc
		              | (adc_window_monitor_opt->low_threshold << AVR32_ADCIFA_WCFG0_LT_OFFSET);
80024812:	10 49       	or	r9,r8
80024814:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024818:	90 18       	ld.sh	r8,r8[0x2]
8002481a:	5c 78       	castu.h	r8
	int temp;
	case 0:
		// Configure sequencer 0
		temp = adcifa->imr & AVR32_ADCIFA_WM0_MASK;
		adcifa->idr = temp;         // disable interrupt if it was enabled
		adcifa->wcfg0 = (adc_window_monitor_opt->source_index << AVR32_ADCIFA_WCFG0_SRC_OFFSET)
8002481c:	f3 e8 10 08 	or	r8,r9,r8
80024820:	10 99       	mov	r9,r8
80024822:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024826:	f1 49 00 58 	st.w	r8[88],r9
		              | (adc_window_monitor_opt->high_threshold << AVR32_ADCIFA_WCFG0_HT_OFFSET)
		              | (adc_window_monitor_opt->low_threshold << AVR32_ADCIFA_WCFG0_LT_OFFSET);
		// Clear any pending interrupt before setting new mode
		adcifa->scr = AVR32_ADCIFA_WM0_MASK;
8002482a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002482e:	e0 69 04 00 	mov	r9,1024
80024832:	91 39       	st.w	r8[0xc],r9
		adcifa->wcfg0 |= (adc_window_monitor_opt->mode << AVR32_ADCIFA_WCFG0_WM_OFFSET);
80024834:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024838:	71 69       	ld.w	r9,r8[0x58]
8002483a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002483e:	11 88       	ld.ub	r8,r8[0x0]
80024840:	b9 68       	lsl	r8,0x18
80024842:	10 49       	or	r9,r8
80024844:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024848:	f1 49 00 58 	st.w	r8[88],r9
		adcifa->ier = temp;         // enable interrupt if it was enabled
8002484c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024850:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024854:	f1 49 00 70 	st.w	r8[112],r9
		break;
80024858:	c3 b8       	rjmp	800248ce <adcifa_configure_window_monitor+0x10e>
	case 1:
		// Configure sequencer 1
		temp = adcifa->imr & AVR32_ADCIFA_WM1_MASK;
8002485a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002485e:	71 e8       	ld.w	r8,r8[0x78]
80024860:	e2 18 08 00 	andl	r8,0x800,COH
80024864:	ef 48 ff fc 	st.w	r7[-4],r8
		adcifa->idr = temp;         // disable interrupt if it was enabled
80024868:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002486c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024870:	f1 49 00 74 	st.w	r8[116],r9
		adcifa->wcfg1 = (adc_window_monitor_opt->source_index << AVR32_ADCIFA_WCFG1_SRC_OFFSET)
80024874:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024878:	11 98       	ld.ub	r8,r8[0x1]
8002487a:	f0 09 15 1b 	lsl	r9,r8,0x1b
		              | (adc_window_monitor_opt->high_threshold << AVR32_ADCIFA_WCFG1_HT_OFFSET)
8002487e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024882:	90 28       	ld.sh	r8,r8[0x4]
80024884:	5c 78       	castu.h	r8
80024886:	ad 68       	lsl	r8,0xc
		              | (adc_window_monitor_opt->low_threshold << AVR32_ADCIFA_WCFG1_LT_OFFSET);
80024888:	10 49       	or	r9,r8
8002488a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002488e:	90 18       	ld.sh	r8,r8[0x2]
80024890:	5c 78       	castu.h	r8
		break;
	case 1:
		// Configure sequencer 1
		temp = adcifa->imr & AVR32_ADCIFA_WM1_MASK;
		adcifa->idr = temp;         // disable interrupt if it was enabled
		adcifa->wcfg1 = (adc_window_monitor_opt->source_index << AVR32_ADCIFA_WCFG1_SRC_OFFSET)
80024892:	f3 e8 10 08 	or	r8,r9,r8
80024896:	10 99       	mov	r9,r8
80024898:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002489c:	f1 49 00 5c 	st.w	r8[92],r9
		              | (adc_window_monitor_opt->high_threshold << AVR32_ADCIFA_WCFG1_HT_OFFSET)
		              | (adc_window_monitor_opt->low_threshold << AVR32_ADCIFA_WCFG1_LT_OFFSET);
		// Clear any pending interrupt before setting new mode
		adcifa->scr = AVR32_ADCIFA_WM1_MASK;
800248a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800248a4:	e0 69 08 00 	mov	r9,2048
800248a8:	91 39       	st.w	r8[0xc],r9
		adcifa->wcfg1 |= (adc_window_monitor_opt->mode << AVR32_ADCIFA_WCFG1_WM_OFFSET);
800248aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800248ae:	71 79       	ld.w	r9,r8[0x5c]
800248b0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800248b4:	11 88       	ld.ub	r8,r8[0x0]
800248b6:	b9 68       	lsl	r8,0x18
800248b8:	10 49       	or	r9,r8
800248ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800248be:	f1 49 00 5c 	st.w	r8[92],r9
		adcifa->ier = temp;         // enable interrupt if it was enabled
800248c2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800248c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800248ca:	f1 49 00 70 	st.w	r8[112],r9
		break;
	default:
		break;
	}
}
800248ce:	2f cd       	sub	sp,-16
800248d0:	e3 cd 80 80 	ldm	sp++,r7,pc

800248d4 <adcifa_start_sequencer>:


void adcifa_start_sequencer(volatile avr32_adcifa_t * adcifa, U8 sequencer)
{
800248d4:	eb cd 40 80 	pushm	r7,lr
800248d8:	1a 97       	mov	r7,sp
800248da:	20 2d       	sub	sp,8
800248dc:	ef 4c ff fc 	st.w	r7[-4],r12
800248e0:	16 98       	mov	r8,r11
800248e2:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sanity Check
	Assert( adcifa!=NULL );

	// Switch Sequencer
	switch (sequencer) {
800248e6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800248ea:	58 18       	cp.w	r8,1
800248ec:	c0 a0       	breq	80024900 <adcifa_start_sequencer+0x2c>
800248ee:	58 38       	cp.w	r8,3
800248f0:	c0 d0       	breq	8002490a <adcifa_start_sequencer+0x36>
800248f2:	58 08       	cp.w	r8,0
800248f4:	c0 f1       	brne	80024912 <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ0:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC0_MASK);
800248f6:	fc 78 24 00 	mov	r8,-187392
800248fa:	30 19       	mov	r9,1
800248fc:	91 09       	st.w	r8[0x0],r9
		break;
800248fe:	c0 a8       	rjmp	80024912 <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ1:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC1_MASK);
80024900:	fc 78 24 00 	mov	r8,-187392
80024904:	30 29       	mov	r9,2
80024906:	91 09       	st.w	r8[0x0],r9
		break;
80024908:	c0 58       	rjmp	80024912 <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ0_SEQ1:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC0_MASK | AVR32_ADCIFA_CR_SOC1_MASK);
8002490a:	fc 78 24 00 	mov	r8,-187392
8002490e:	30 39       	mov	r9,3
80024910:	91 09       	st.w	r8[0x0],r9
		break;
	default:
		break;
	}
}
80024912:	2f ed       	sub	sp,-8
80024914:	e3 cd 80 80 	ldm	sp++,r7,pc

80024918 <adcifa_check_eoc>:


bool adcifa_check_eoc(volatile avr32_adcifa_t * adcifa, U8 sequencer)
{
80024918:	eb cd 40 80 	pushm	r7,lr
8002491c:	1a 97       	mov	r7,sp
8002491e:	20 2d       	sub	sp,8
80024920:	ef 4c ff fc 	st.w	r7[-4],r12
80024924:	16 98       	mov	r8,r11
80024926:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sanity Check
	Assert( adcifa!=NULL );

	// get SR register : EOC bit for channel
	switch (sequencer) {
8002492a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002492e:	58 08       	cp.w	r8,0
80024930:	c0 40       	breq	80024938 <adcifa_check_eoc+0x20>
80024932:	58 18       	cp.w	r8,1
80024934:	c0 a0       	breq	80024948 <adcifa_check_eoc+0x30>
80024936:	c1 18       	rjmp	80024958 <adcifa_check_eoc+0x40>
	case 0:
		return ((ADCIFA_is_eoc_sequencer_0()) ? true : false);
80024938:	fc 78 24 00 	mov	r8,-187392
8002493c:	70 28       	ld.w	r8,r8[0x8]
8002493e:	e2 18 00 02 	andl	r8,0x2,COH
80024942:	5f 18       	srne	r8
80024944:	5c 58       	castu.b	r8
80024946:	c0 a8       	rjmp	8002495a <adcifa_check_eoc+0x42>
	case 1:
		return ((ADCIFA_is_eoc_sequencer_1()) ? true : false);
80024948:	fc 78 24 00 	mov	r8,-187392
8002494c:	70 28       	ld.w	r8,r8[0x8]
8002494e:	e2 18 00 20 	andl	r8,0x20,COH
80024952:	5f 18       	srne	r8
80024954:	5c 58       	castu.b	r8
80024956:	c0 28       	rjmp	8002495a <adcifa_check_eoc+0x42>
	default:
		break;
	}
	return false;
80024958:	30 08       	mov	r8,0
}
8002495a:	10 9c       	mov	r12,r8
8002495c:	2f ed       	sub	sp,-8
8002495e:	e3 cd 80 80 	ldm	sp++,r7,pc

80024962 <adcifa_check_eos>:

bool adcifa_check_eos(volatile avr32_adcifa_t * adcifa, U8 sequencer)
{
80024962:	eb cd 40 80 	pushm	r7,lr
80024966:	1a 97       	mov	r7,sp
80024968:	20 2d       	sub	sp,8
8002496a:	ef 4c ff fc 	st.w	r7[-4],r12
8002496e:	16 98       	mov	r8,r11
80024970:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sanity Check
	Assert( adcifa!=NULL );

	// get SR register : EOS bit for channel
	switch (sequencer) {
80024974:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80024978:	58 08       	cp.w	r8,0
8002497a:	c0 40       	breq	80024982 <adcifa_check_eos+0x20>
8002497c:	58 18       	cp.w	r8,1
8002497e:	c0 90       	breq	80024990 <adcifa_check_eos+0x2e>
80024980:	c1 08       	rjmp	800249a0 <adcifa_check_eos+0x3e>
	case 0:
		return ((ADCIFA_is_eos_sequencer_0()) ? true : false);
80024982:	fc 78 24 00 	mov	r8,-187392
80024986:	70 28       	ld.w	r8,r8[0x8]
80024988:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002498c:	5c 58       	castu.b	r8
8002498e:	c0 a8       	rjmp	800249a2 <adcifa_check_eos+0x40>
	case 1:
		return ((ADCIFA_is_eos_sequencer_1()) ? true : false);
80024990:	fc 78 24 00 	mov	r8,-187392
80024994:	70 28       	ld.w	r8,r8[0x8]
80024996:	e2 18 00 10 	andl	r8,0x10,COH
8002499a:	5f 18       	srne	r8
8002499c:	5c 58       	castu.b	r8
8002499e:	c0 28       	rjmp	800249a2 <adcifa_check_eos+0x40>
	default:
		break;
	}
	return false;
800249a0:	30 08       	mov	r8,0
}
800249a2:	10 9c       	mov	r12,r8
800249a4:	2f ed       	sub	sp,-8
800249a6:	e3 cd 80 80 	ldm	sp++,r7,pc

800249aa <adcifa_get_values_from_sequencer>:

U8 adcifa_get_values_from_sequencer(volatile avr32_adcifa_t * adcifa,
                                    U8 sequencer,
                                    adcifa_sequencer_opt_t * p_adcifa_sequencer_opt,
                                    S16* adcifa_values)
{
800249aa:	eb cd 40 c0 	pushm	r6-r7,lr
800249ae:	1a 97       	mov	r7,sp
800249b0:	20 5d       	sub	sp,20
800249b2:	4b 46       	lddpc	r6,80024a80 <adcifa_get_values_from_sequencer+0xd6>
800249b4:	1e 26       	rsub	r6,pc
800249b6:	ef 4c ff f8 	st.w	r7[-8],r12
800249ba:	16 98       	mov	r8,r11
800249bc:	ef 4a ff f0 	st.w	r7[-16],r10
800249c0:	ef 49 ff ec 	st.w	r7[-20],r9
800249c4:	ef 68 ff f4 	st.b	r7[-12],r8
	U8 i;
	// Sanity Check
	Assert( adcifa!=NULL );

	// wait for end of sequence
	if(adcifa_check_eos(adcifa, sequencer) != true)
800249c8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800249cc:	10 9b       	mov	r11,r8
800249ce:	ee fc ff f8 	ld.w	r12,r7[-8]
800249d2:	f0 16 01 3f 	mcall	r6[1276]
800249d6:	18 98       	mov	r8,r12
800249d8:	ec 18 00 01 	eorl	r8,0x1
800249dc:	5c 58       	castu.b	r8
800249de:	c0 30       	breq	800249e4 <adcifa_get_values_from_sequencer+0x3a>
		return ADCIFA_STATUS_NOT_COMPLETED;
800249e0:	30 38       	mov	r8,3
800249e2:	c4 b8       	rjmp	80024a78 <adcifa_get_values_from_sequencer+0xce>

	switch (sequencer) {
800249e4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800249e8:	58 08       	cp.w	r8,0
800249ea:	c0 40       	breq	800249f2 <adcifa_get_values_from_sequencer+0x48>
800249ec:	58 18       	cp.w	r8,1
800249ee:	c2 30       	breq	80024a34 <adcifa_get_values_from_sequencer+0x8a>
800249f0:	c4 38       	rjmp	80024a76 <adcifa_get_values_from_sequencer+0xcc>
	case 0:
		// Read values from Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800249f2:	30 08       	mov	r8,0
800249f4:	ef 68 ff ff 	st.b	r7[-1],r8
800249f8:	c1 58       	rjmp	80024a22 <adcifa_get_values_from_sequencer+0x78>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
800249fa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800249fe:	a1 78       	lsl	r8,0x1
80024a00:	ee f9 ff ec 	ld.w	r9,r7[-20]
80024a04:	10 09       	add	r9,r8
80024a06:	fc 78 24 00 	mov	r8,-187392
80024a0a:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80024a0e:	2d fa       	sub	r10,-33
80024a10:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80024a14:	5c 88       	casts.h	r8
80024a16:	b2 08       	st.h	r9[0x0],r8
		return ADCIFA_STATUS_NOT_COMPLETED;

	switch (sequencer) {
	case 0:
		// Read values from Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80024a18:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80024a1c:	2f f8       	sub	r8,-1
80024a1e:	ef 68 ff ff 	st.b	r7[-1],r8
80024a22:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024a26:	11 88       	ld.ub	r8,r8[0x0]
80024a28:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80024a2c:	f0 09 18 00 	cp.b	r9,r8
80024a30:	ce 53       	brcs	800249fa <adcifa_get_values_from_sequencer+0x50>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
		}
		break;
80024a32:	c2 28       	rjmp	80024a76 <adcifa_get_values_from_sequencer+0xcc>
	case 1:
		// Read values from Sequencer 1
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80024a34:	30 08       	mov	r8,0
80024a36:	ef 68 ff ff 	st.b	r7[-1],r8
80024a3a:	c1 68       	rjmp	80024a66 <adcifa_get_values_from_sequencer+0xbc>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_1(i);
80024a3c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80024a40:	a1 78       	lsl	r8,0x1
80024a42:	ee f9 ff ec 	ld.w	r9,r7[-20]
80024a46:	10 09       	add	r9,r8
80024a48:	fc 78 24 00 	mov	r8,-187392
80024a4c:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80024a50:	2f 8a       	sub	r10,-8
80024a52:	2d fa       	sub	r10,-33
80024a54:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80024a58:	5c 88       	casts.h	r8
80024a5a:	b2 08       	st.h	r9[0x0],r8
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
		}
		break;
	case 1:
		// Read values from Sequencer 1
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80024a5c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80024a60:	2f f8       	sub	r8,-1
80024a62:	ef 68 ff ff 	st.b	r7[-1],r8
80024a66:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024a6a:	11 88       	ld.ub	r8,r8[0x0]
80024a6c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80024a70:	f0 09 18 00 	cp.b	r9,r8
80024a74:	ce 43       	brcs	80024a3c <adcifa_get_values_from_sequencer+0x92>
		break;
	default:
		break;
	}

	return ADCIFA_STATUS_COMPLETED;
80024a76:	30 28       	mov	r8,2
}
80024a78:	10 9c       	mov	r12,r8
80024a7a:	2f bd       	sub	sp,-20
80024a7c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024a80:	80 02       	ld.sh	r2,r0[0x0]
80024a82:	48 38       	lddpc	r8,80024a8c <adcifa_start_itimer+0x8>

80024a84 <adcifa_start_itimer>:

void adcifa_start_itimer(volatile avr32_adcifa_t * adcifa,
                         uint32_t timer_count)
{
80024a84:	eb cd 40 80 	pushm	r7,lr
80024a88:	1a 97       	mov	r7,sp
80024a8a:	20 2d       	sub	sp,8
80024a8c:	ef 4c ff fc 	st.w	r7[-4],r12
80024a90:	ef 4b ff f8 	st.w	r7[-8],r11
	adcifa->itimer = timer_count;
80024a94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024a98:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024a9c:	f1 49 00 48 	st.w	r8[72],r9
	adcifa->cr = AVR32_ADCIFA_CR_TSTART_MASK;
80024aa0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024aa4:	30 89       	mov	r9,8
80024aa6:	91 09       	st.w	r8[0x0],r9
}
80024aa8:	2f ed       	sub	sp,-8
80024aaa:	e3 cd 80 80 	ldm	sp++,r7,pc

80024aae <adcifa_stop_itimer>:

void adcifa_stop_itimer(volatile avr32_adcifa_t * adcifa)
{
80024aae:	eb cd 40 80 	pushm	r7,lr
80024ab2:	1a 97       	mov	r7,sp
80024ab4:	20 1d       	sub	sp,4
80024ab6:	ef 4c ff fc 	st.w	r7[-4],r12
	adcifa->cr = AVR32_ADCIFA_CR_TSTOP_MASK;
80024aba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024abe:	30 49       	mov	r9,4
80024ac0:	91 09       	st.w	r8[0x0],r9
}
80024ac2:	2f fd       	sub	sp,-4
80024ac4:	e3 cd 80 80 	ldm	sp++,r7,pc

80024ac8 <adcifa_enable_interrupt>:

void adcifa_enable_interrupt(volatile avr32_adcifa_t * adcifa,
                             uint32_t interrupt_flags)
{
80024ac8:	eb cd 40 80 	pushm	r7,lr
80024acc:	1a 97       	mov	r7,sp
80024ace:	20 2d       	sub	sp,8
80024ad0:	ef 4c ff fc 	st.w	r7[-4],r12
80024ad4:	ef 4b ff f8 	st.w	r7[-8],r11
	adcifa->ier = interrupt_flags;   // Interrupt Enable Register
80024ad8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024adc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024ae0:	f1 49 00 70 	st.w	r8[112],r9
}
80024ae4:	2f ed       	sub	sp,-8
80024ae6:	e3 cd 80 80 	ldm	sp++,r7,pc

80024aea <adcifa_disable_interrupt>:

void adcifa_disable_interrupt(volatile avr32_adcifa_t * adcifa,
                              uint32_t interrupt_flags)
{
80024aea:	eb cd 40 80 	pushm	r7,lr
80024aee:	1a 97       	mov	r7,sp
80024af0:	20 2d       	sub	sp,8
80024af2:	ef 4c ff fc 	st.w	r7[-4],r12
80024af6:	ef 4b ff f8 	st.w	r7[-8],r11
	adcifa->idr = interrupt_flags;   // Interrupt Disable Register
80024afa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024afe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024b02:	f1 49 00 74 	st.w	r8[116],r9
}
80024b06:	2f ed       	sub	sp,-8
80024b08:	e3 cd 80 80 	ldm	sp++,r7,pc

80024b0c <adcifa_clear_interrupt>:

void adcifa_clear_interrupt(volatile avr32_adcifa_t * adcifa,
                            uint32_t interrupt_flags)
{
80024b0c:	eb cd 40 80 	pushm	r7,lr
80024b10:	1a 97       	mov	r7,sp
80024b12:	20 2d       	sub	sp,8
80024b14:	ef 4c ff fc 	st.w	r7[-4],r12
80024b18:	ef 4b ff f8 	st.w	r7[-8],r11
	adcifa->scr = interrupt_flags;   // Status Clear Register
80024b1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024b20:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024b24:	91 39       	st.w	r8[0xc],r9
}
80024b26:	2f ed       	sub	sp,-8
80024b28:	e3 cd 80 80 	ldm	sp++,r7,pc

80024b2c <ast_is_busy>:
#include <avr32/io.h>
#include "compiler.h"
#include "ast.h"

static int ast_is_busy(volatile avr32_ast_t *ast)
{
80024b2c:	eb cd 40 80 	pushm	r7,lr
80024b30:	1a 97       	mov	r7,sp
80024b32:	20 1d       	sub	sp,4
80024b34:	ef 4c ff fc 	st.w	r7[-4],r12
	return (ast->sr & AVR32_AST_SR_BUSY_MASK) != 0;
80024b38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024b3c:	70 28       	ld.w	r8,r8[0x8]
80024b3e:	e6 18 01 00 	andh	r8,0x100,COH
80024b42:	5f 18       	srne	r8
}
80024b44:	10 9c       	mov	r12,r8
80024b46:	2f fd       	sub	sp,-4
80024b48:	e3 cd 80 80 	ldm	sp++,r7,pc

80024b4c <ast_is_clkbusy>:

static int ast_is_clkbusy(volatile avr32_ast_t *ast)
{
80024b4c:	eb cd 40 80 	pushm	r7,lr
80024b50:	1a 97       	mov	r7,sp
80024b52:	20 1d       	sub	sp,4
80024b54:	ef 4c ff fc 	st.w	r7[-4],r12
	return (ast->sr & AVR32_AST_SR_CLKBUSY_MASK) != 0;
80024b58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024b5c:	70 28       	ld.w	r8,r8[0x8]
80024b5e:	e6 18 10 00 	andh	r8,0x1000,COH
80024b62:	5f 18       	srne	r8
}
80024b64:	10 9c       	mov	r12,r8
80024b66:	2f fd       	sub	sp,-4
80024b68:	e3 cd 80 80 	ldm	sp++,r7,pc

80024b6c <ast_init_calendar>:

int ast_init_calendar(volatile avr32_ast_t *ast,
                      unsigned char osc_type,
                      unsigned char psel,
                      ast_calendar_t ast_calendar)
{
80024b6c:	eb cd 40 c0 	pushm	r6-r7,lr
80024b70:	1a 97       	mov	r7,sp
80024b72:	20 4d       	sub	sp,16
80024b74:	49 a6       	lddpc	r6,80024bdc <ast_init_calendar+0x70>
80024b76:	1e 26       	rsub	r6,pc
80024b78:	ef 4c ff fc 	st.w	r7[-4],r12
80024b7c:	14 98       	mov	r8,r10
80024b7e:	ef 49 ff f0 	st.w	r7[-16],r9
80024b82:	16 99       	mov	r9,r11
80024b84:	ef 69 ff f8 	st.b	r7[-8],r9
80024b88:	ef 68 ff f4 	st.b	r7[-12],r8

	while (ast_is_clkbusy(ast));
80024b8c:	ee fc ff fc 	ld.w	r12,r7[-4]
80024b90:	cd ef       	rcall	80024b4c <ast_is_clkbusy>
80024b92:	18 98       	mov	r8,r12
80024b94:	58 08       	cp.w	r8,0
80024b96:	cf b1       	brne	80024b8c <ast_init_calendar+0x20>
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;
80024b98:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80024b9c:	a9 68       	lsl	r8,0x8
                      unsigned char psel,
                      ast_calendar_t ast_calendar)
{

	while (ast_is_clkbusy(ast));
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
80024b9e:	a1 a8       	sbr	r8,0x0
80024ba0:	10 99       	mov	r9,r8
80024ba2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024ba6:	f1 49 00 40 	st.w	r8[64],r9
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;

	// Set the new AST configuration
	ast->cr =   AST_MODE_CALENDAR << AVR32_AST_CR_CAL_OFFSET |
		psel << AVR32_AST_CR_PSEL_OFFSET ;
80024baa:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80024bae:	b1 68       	lsl	r8,0x10
	while (ast_is_clkbusy(ast));
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;

	// Set the new AST configuration
	ast->cr =   AST_MODE_CALENDAR << AVR32_AST_CR_CAL_OFFSET |
80024bb0:	a3 a8       	sbr	r8,0x2
80024bb2:	10 99       	mov	r9,r8
80024bb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024bb8:	91 09       	st.w	r8[0x0],r9
		psel << AVR32_AST_CR_PSEL_OFFSET ;

	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80024bba:	ee fc ff fc 	ld.w	r12,r7[-4]
80024bbe:	cb 7f       	rcall	80024b2c <ast_is_busy>
80024bc0:	18 98       	mov	r8,r12
80024bc2:	58 08       	cp.w	r8,0
80024bc4:	cf b1       	brne	80024bba <ast_init_calendar+0x4e>

	// Set the calendar
	ast_set_calendar_value(ast, ast_calendar);
80024bc6:	ee fb ff f0 	ld.w	r11,r7[-16]
80024bca:	ee fc ff fc 	ld.w	r12,r7[-4]
80024bce:	f0 16 01 ce 	mcall	r6[1848]

	return 1;
80024bd2:	30 18       	mov	r8,1
}
80024bd4:	10 9c       	mov	r12,r8
80024bd6:	2f cd       	sub	sp,-16
80024bd8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024bdc:	80 02       	ld.sh	r2,r0[0x0]
80024bde:	49 fa       	lddpc	r10,80024c58 <ast_enable+0x1c>

80024be0 <ast_init_counter>:

int ast_init_counter(volatile avr32_ast_t *ast,
                     unsigned char osc_type,
                     unsigned char psel,
                     unsigned long ast_counter)
{
80024be0:	eb cd 40 c0 	pushm	r6-r7,lr
80024be4:	1a 97       	mov	r7,sp
80024be6:	20 4d       	sub	sp,16
80024be8:	49 46       	lddpc	r6,80024c38 <ast_init_counter+0x58>
80024bea:	1e 26       	rsub	r6,pc
80024bec:	ef 4c ff fc 	st.w	r7[-4],r12
80024bf0:	14 98       	mov	r8,r10
80024bf2:	ef 49 ff f0 	st.w	r7[-16],r9
80024bf6:	16 99       	mov	r9,r11
80024bf8:	ef 69 ff f8 	st.b	r7[-8],r9
80024bfc:	ef 68 ff f4 	st.b	r7[-12],r8

//	while (ast_is_clkbusy(ast));
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;
80024c00:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80024c04:	a9 68       	lsl	r8,0x8
                     unsigned char psel,
                     unsigned long ast_counter)
{

//	while (ast_is_clkbusy(ast));
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
80024c06:	a1 a8       	sbr	r8,0x0
80024c08:	10 99       	mov	r9,r8
80024c0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024c0e:	f1 49 00 40 	st.w	r8[64],r9
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;

	// Set the new AST configuration
	ast->cr =   AST_MODE_COUNTER << AVR32_AST_CR_CAL_OFFSET |
80024c12:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80024c16:	b1 68       	lsl	r8,0x10
80024c18:	10 99       	mov	r9,r8
80024c1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024c1e:	91 09       	st.w	r8[0x0],r9

	// Wait until the ast CTRL register is up-to-date
//	while (ast_is_busy(ast));

	// Set the calendar
	ast_set_counter_value(ast, ast_counter);
80024c20:	ee fb ff f0 	ld.w	r11,r7[-16]
80024c24:	ee fc ff fc 	ld.w	r12,r7[-4]
80024c28:	f0 16 02 22 	mcall	r6[2184]

	return 1;
80024c2c:	30 18       	mov	r8,1
}
80024c2e:	10 9c       	mov	r12,r8
80024c30:	2f cd       	sub	sp,-16
80024c32:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024c36:	00 00       	add	r0,r0
80024c38:	80 02       	ld.sh	r2,r0[0x0]
80024c3a:	4a 6e       	lddpc	lr,80024cd0 <ast_set_counter_value+0xc>

80024c3c <ast_enable>:


void ast_enable(volatile avr32_ast_t *ast)
{
80024c3c:	eb cd 40 c0 	pushm	r6-r7,lr
80024c40:	1a 97       	mov	r7,sp
80024c42:	20 1d       	sub	sp,4
80024c44:	48 e6       	lddpc	r6,80024c7c <ast_enable+0x40>
80024c46:	1e 26       	rsub	r6,pc
80024c48:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80024c4c:	ee fc ff fc 	ld.w	r12,r7[-4]
80024c50:	c6 ef       	rcall	80024b2c <ast_is_busy>
80024c52:	18 98       	mov	r8,r12
80024c54:	58 08       	cp.w	r8,0
80024c56:	cf b1       	brne	80024c4c <ast_enable+0x10>
	// Enable the RTC
	ast->cr |= AVR32_AST_CR_EN_MASK;
80024c58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024c5c:	70 08       	ld.w	r8,r8[0x0]
80024c5e:	10 99       	mov	r9,r8
80024c60:	a1 a9       	sbr	r9,0x0
80024c62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024c66:	91 09       	st.w	r8[0x0],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80024c68:	ee fc ff fc 	ld.w	r12,r7[-4]
80024c6c:	c6 0f       	rcall	80024b2c <ast_is_busy>
80024c6e:	18 98       	mov	r8,r12
80024c70:	58 08       	cp.w	r8,0
80024c72:	cf b1       	brne	80024c68 <ast_enable+0x2c>
}
80024c74:	2f fd       	sub	sp,-4
80024c76:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024c7a:	00 00       	add	r0,r0
80024c7c:	80 02       	ld.sh	r2,r0[0x0]
80024c7e:	4a ca       	lddpc	r10,80024d2c <ast_get_counter_value+0x6>

80024c80 <ast_set_calendar_value>:

void ast_set_calendar_value(volatile avr32_ast_t *ast,
                            ast_calendar_t ast_calendar)
{
80024c80:	eb cd 40 c0 	pushm	r6-r7,lr
80024c84:	1a 97       	mov	r7,sp
80024c86:	20 2d       	sub	sp,8
80024c88:	48 e6       	lddpc	r6,80024cc0 <ast_set_calendar_value+0x40>
80024c8a:	1e 26       	rsub	r6,pc
80024c8c:	ef 4c ff fc 	st.w	r7[-4],r12
80024c90:	ef 4b ff f8 	st.w	r7[-8],r11
	// Wait until we can write into the VAL register
	while (ast_is_busy(ast));
80024c94:	ee fc ff fc 	ld.w	r12,r7[-4]
80024c98:	c4 af       	rcall	80024b2c <ast_is_busy>
80024c9a:	18 98       	mov	r8,r12
80024c9c:	58 08       	cp.w	r8,0
80024c9e:	cf b1       	brne	80024c94 <ast_set_calendar_value+0x14>
	// Set the new val value
	ast->calv = ast_calendar.field;
80024ca0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024ca4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024ca8:	f1 49 00 54 	st.w	r8[84],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80024cac:	ee fc ff fc 	ld.w	r12,r7[-4]
80024cb0:	c3 ef       	rcall	80024b2c <ast_is_busy>
80024cb2:	18 98       	mov	r8,r12
80024cb4:	58 08       	cp.w	r8,0
80024cb6:	cf b1       	brne	80024cac <ast_set_calendar_value+0x2c>
}
80024cb8:	2f ed       	sub	sp,-8
80024cba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024cbe:	00 00       	add	r0,r0
80024cc0:	80 02       	ld.sh	r2,r0[0x0]
80024cc2:	4b 0e       	lddpc	lr,80024d80 <ast_enable_alarm0>

80024cc4 <ast_set_counter_value>:

void ast_set_counter_value(volatile avr32_ast_t *ast, unsigned long ast_counter)
{
80024cc4:	eb cd 40 c0 	pushm	r6-r7,lr
80024cc8:	1a 97       	mov	r7,sp
80024cca:	20 2d       	sub	sp,8
80024ccc:	48 d6       	lddpc	r6,80024d00 <ast_set_counter_value+0x3c>
80024cce:	1e 26       	rsub	r6,pc
80024cd0:	ef 4c ff fc 	st.w	r7[-4],r12
80024cd4:	ef 4b ff f8 	st.w	r7[-8],r11
	// Wait until we can write into the VAL register
	while (ast_is_busy(ast));
80024cd8:	ee fc ff fc 	ld.w	r12,r7[-4]
80024cdc:	c2 8f       	rcall	80024b2c <ast_is_busy>
80024cde:	18 98       	mov	r8,r12
80024ce0:	58 08       	cp.w	r8,0
80024ce2:	cf b1       	brne	80024cd8 <ast_set_counter_value+0x14>
	// Set the new val value
	ast->cv = ast_counter;
80024ce4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024ce8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024cec:	91 19       	st.w	r8[0x4],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80024cee:	ee fc ff fc 	ld.w	r12,r7[-4]
80024cf2:	c1 df       	rcall	80024b2c <ast_is_busy>
80024cf4:	18 98       	mov	r8,r12
80024cf6:	58 08       	cp.w	r8,0
80024cf8:	cf b1       	brne	80024cee <ast_set_counter_value+0x2a>
}
80024cfa:	2f ed       	sub	sp,-8
80024cfc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024d00:	80 02       	ld.sh	r2,r0[0x0]
80024d02:	4b 52       	lddpc	r2,80024dd4 <ast_disable_alarm0+0x10>

80024d04 <ast_get_calendar_value>:


ast_calendar_t ast_get_calendar_value(volatile avr32_ast_t *ast)
{
80024d04:	eb cd 40 80 	pushm	r7,lr
80024d08:	1a 97       	mov	r7,sp
80024d0a:	20 2d       	sub	sp,8
80024d0c:	ef 4c ff f8 	st.w	r7[-8],r12
	ast_calendar_t ast_calendar;
	ast_calendar.field = ast->calv;
80024d10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024d14:	71 58       	ld.w	r8,r8[0x54]
80024d16:	ef 48 ff fc 	st.w	r7[-4],r8
	return ast_calendar;
80024d1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80024d1e:	10 9c       	mov	r12,r8
80024d20:	2f ed       	sub	sp,-8
80024d22:	e3 cd 80 80 	ldm	sp++,r7,pc

80024d26 <ast_get_counter_value>:


unsigned long ast_get_counter_value(volatile avr32_ast_t *ast)
{
80024d26:	eb cd 40 80 	pushm	r7,lr
80024d2a:	1a 97       	mov	r7,sp
80024d2c:	20 1d       	sub	sp,4
80024d2e:	ef 4c ff fc 	st.w	r7[-4],r12
	return ast->cv;
80024d32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024d36:	70 18       	ld.w	r8,r8[0x4]
}
80024d38:	10 9c       	mov	r12,r8
80024d3a:	2f fd       	sub	sp,-4
80024d3c:	e3 cd 80 80 	ldm	sp++,r7,pc

80024d40 <ast_set_alarm0_value>:

void ast_set_alarm0_value(volatile avr32_ast_t *ast, U32 alarm_value)
{
80024d40:	eb cd 40 80 	pushm	r7,lr
80024d44:	1a 97       	mov	r7,sp
80024d46:	20 2d       	sub	sp,8
80024d48:	ef 4c ff fc 	st.w	r7[-4],r12
80024d4c:	ef 4b ff f8 	st.w	r7[-8],r11
	// Set the new val value
	ast->ar0 = alarm_value;
80024d50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024d54:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024d58:	91 89       	st.w	r8[0x20],r9
}
80024d5a:	2f ed       	sub	sp,-8
80024d5c:	e3 cd 80 80 	ldm	sp++,r7,pc

80024d60 <ast_set_alarm1_value>:


void ast_set_alarm1_value(volatile avr32_ast_t *ast, U32 alarm_value)
{
80024d60:	eb cd 40 80 	pushm	r7,lr
80024d64:	1a 97       	mov	r7,sp
80024d66:	20 2d       	sub	sp,8
80024d68:	ef 4c ff fc 	st.w	r7[-4],r12
80024d6c:	ef 4b ff f8 	st.w	r7[-8],r11
	// Set the new val value
	ast->ar1 = alarm_value;
80024d70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024d74:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024d78:	91 99       	st.w	r8[0x24],r9
}
80024d7a:	2f ed       	sub	sp,-8
80024d7c:	e3 cd 80 80 	ldm	sp++,r7,pc

80024d80 <ast_enable_alarm0>:


void ast_enable_alarm0(volatile avr32_ast_t *ast)
{
80024d80:	eb cd 40 c0 	pushm	r6-r7,lr
80024d84:	1a 97       	mov	r7,sp
80024d86:	20 1d       	sub	sp,4
80024d88:	48 e6       	lddpc	r6,80024dc0 <ast_enable_alarm0+0x40>
80024d8a:	1e 26       	rsub	r6,pc
80024d8c:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80024d90:	ee fc ff fc 	ld.w	r12,r7[-4]
80024d94:	cc ce       	rcall	80024b2c <ast_is_busy>
80024d96:	18 98       	mov	r8,r12
80024d98:	58 08       	cp.w	r8,0
80024d9a:	cf b1       	brne	80024d90 <ast_enable_alarm0+0x10>
	// Enable the RTC
	ast->eve |= AVR32_AST_EVE_ALARM0_MASK;
80024d9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024da0:	71 28       	ld.w	r8,r8[0x48]
80024da2:	10 99       	mov	r9,r8
80024da4:	a9 a9       	sbr	r9,0x8
80024da6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024daa:	f1 49 00 48 	st.w	r8[72],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80024dae:	ee fc ff fc 	ld.w	r12,r7[-4]
80024db2:	cb de       	rcall	80024b2c <ast_is_busy>
80024db4:	18 98       	mov	r8,r12
80024db6:	58 08       	cp.w	r8,0
80024db8:	cf b1       	brne	80024dae <ast_enable_alarm0+0x2e>
}
80024dba:	2f fd       	sub	sp,-4
80024dbc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024dc0:	80 02       	ld.sh	r2,r0[0x0]
80024dc2:	4c 0e       	lddpc	lr,80024ec0 <ast_set_periodic1_value+0x10>

80024dc4 <ast_disable_alarm0>:


void ast_disable_alarm0(volatile avr32_ast_t *ast)
{
80024dc4:	eb cd 40 c0 	pushm	r6-r7,lr
80024dc8:	1a 97       	mov	r7,sp
80024dca:	20 1d       	sub	sp,4
80024dcc:	48 e6       	lddpc	r6,80024e04 <ast_disable_alarm0+0x40>
80024dce:	1e 26       	rsub	r6,pc
80024dd0:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80024dd4:	ee fc ff fc 	ld.w	r12,r7[-4]
80024dd8:	ca ae       	rcall	80024b2c <ast_is_busy>
80024dda:	18 98       	mov	r8,r12
80024ddc:	58 08       	cp.w	r8,0
80024dde:	cf b1       	brne	80024dd4 <ast_disable_alarm0+0x10>
	// Enable the RTC
	ast->evd |= AVR32_AST_EVE_ALARM0_MASK;
80024de0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024de4:	71 38       	ld.w	r8,r8[0x4c]
80024de6:	10 99       	mov	r9,r8
80024de8:	a9 a9       	sbr	r9,0x8
80024dea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024dee:	f1 49 00 4c 	st.w	r8[76],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80024df2:	ee fc ff fc 	ld.w	r12,r7[-4]
80024df6:	c9 be       	rcall	80024b2c <ast_is_busy>
80024df8:	18 98       	mov	r8,r12
80024dfa:	58 08       	cp.w	r8,0
80024dfc:	cf b1       	brne	80024df2 <ast_disable_alarm0+0x2e>
}
80024dfe:	2f fd       	sub	sp,-4
80024e00:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024e04:	80 02       	ld.sh	r2,r0[0x0]
80024e06:	4c 52       	lddpc	r2,80024f18 <ast_disable_periodic0+0x4>

80024e08 <ast_enable_alarm1>:


void ast_enable_alarm1(volatile avr32_ast_t *ast)
{
80024e08:	eb cd 40 c0 	pushm	r6-r7,lr
80024e0c:	1a 97       	mov	r7,sp
80024e0e:	20 1d       	sub	sp,4
80024e10:	48 e6       	lddpc	r6,80024e48 <ast_enable_alarm1+0x40>
80024e12:	1e 26       	rsub	r6,pc
80024e14:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80024e18:	ee fc ff fc 	ld.w	r12,r7[-4]
80024e1c:	c8 8e       	rcall	80024b2c <ast_is_busy>
80024e1e:	18 98       	mov	r8,r12
80024e20:	58 08       	cp.w	r8,0
80024e22:	cf b1       	brne	80024e18 <ast_enable_alarm1+0x10>
	// Enable the RTC
	ast->eve |= AVR32_AST_EVE_ALARM1_MASK;
80024e24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024e28:	71 28       	ld.w	r8,r8[0x48]
80024e2a:	10 99       	mov	r9,r8
80024e2c:	a9 b9       	sbr	r9,0x9
80024e2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024e32:	f1 49 00 48 	st.w	r8[72],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80024e36:	ee fc ff fc 	ld.w	r12,r7[-4]
80024e3a:	c7 9e       	rcall	80024b2c <ast_is_busy>
80024e3c:	18 98       	mov	r8,r12
80024e3e:	58 08       	cp.w	r8,0
80024e40:	cf b1       	brne	80024e36 <ast_enable_alarm1+0x2e>
}
80024e42:	2f fd       	sub	sp,-4
80024e44:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024e48:	80 02       	ld.sh	r2,r0[0x0]
80024e4a:	4c 96       	lddpc	r6,80024f6c <ast_enable_periodic1+0x10>

80024e4c <ast_disable_alarm1>:


void ast_disable_alarm1(volatile avr32_ast_t *ast)
{
80024e4c:	eb cd 40 c0 	pushm	r6-r7,lr
80024e50:	1a 97       	mov	r7,sp
80024e52:	20 1d       	sub	sp,4
80024e54:	48 e6       	lddpc	r6,80024e8c <ast_disable_alarm1+0x40>
80024e56:	1e 26       	rsub	r6,pc
80024e58:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80024e5c:	ee fc ff fc 	ld.w	r12,r7[-4]
80024e60:	c6 6e       	rcall	80024b2c <ast_is_busy>
80024e62:	18 98       	mov	r8,r12
80024e64:	58 08       	cp.w	r8,0
80024e66:	cf b1       	brne	80024e5c <ast_disable_alarm1+0x10>
	// Enable the RTC
	ast->evd |= AVR32_AST_EVE_ALARM1_MASK;
80024e68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024e6c:	71 38       	ld.w	r8,r8[0x4c]
80024e6e:	10 99       	mov	r9,r8
80024e70:	a9 b9       	sbr	r9,0x9
80024e72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024e76:	f1 49 00 4c 	st.w	r8[76],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80024e7a:	ee fc ff fc 	ld.w	r12,r7[-4]
80024e7e:	c5 7e       	rcall	80024b2c <ast_is_busy>
80024e80:	18 98       	mov	r8,r12
80024e82:	58 08       	cp.w	r8,0
80024e84:	cf b1       	brne	80024e7a <ast_disable_alarm1+0x2e>
}
80024e86:	2f fd       	sub	sp,-4
80024e88:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024e8c:	80 02       	ld.sh	r2,r0[0x0]
80024e8e:	4c da       	lddpc	r10,80024fc0 <ast_disable_periodic1+0x1c>

80024e90 <ast_set_periodic0_value>:


void ast_set_periodic0_value(volatile avr32_ast_t *ast, avr32_ast_pir0_t pir)
{
80024e90:	eb cd 40 80 	pushm	r7,lr
80024e94:	1a 97       	mov	r7,sp
80024e96:	20 2d       	sub	sp,8
80024e98:	ef 4c ff fc 	st.w	r7[-4],r12
80024e9c:	ef 4b ff f8 	st.w	r7[-8],r11
	// Set the new val value
	ast->PIR0 = pir;
80024ea0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024ea4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024ea8:	91 c9       	st.w	r8[0x30],r9
}
80024eaa:	2f ed       	sub	sp,-8
80024eac:	e3 cd 80 80 	ldm	sp++,r7,pc

80024eb0 <ast_set_periodic1_value>:


void ast_set_periodic1_value(volatile avr32_ast_t *ast, avr32_ast_pir1_t pir)
{
80024eb0:	eb cd 40 80 	pushm	r7,lr
80024eb4:	1a 97       	mov	r7,sp
80024eb6:	20 2d       	sub	sp,8
80024eb8:	ef 4c ff fc 	st.w	r7[-4],r12
80024ebc:	ef 4b ff f8 	st.w	r7[-8],r11
	// Set the new val value
	ast->PIR1 = pir;
80024ec0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024ec4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024ec8:	91 d9       	st.w	r8[0x34],r9
}
80024eca:	2f ed       	sub	sp,-8
80024ecc:	e3 cd 80 80 	ldm	sp++,r7,pc

80024ed0 <ast_enable_periodic0>:


void ast_enable_periodic0(volatile avr32_ast_t *ast)
{
80024ed0:	eb cd 40 c0 	pushm	r6-r7,lr
80024ed4:	1a 97       	mov	r7,sp
80024ed6:	20 1d       	sub	sp,4
80024ed8:	48 e6       	lddpc	r6,80024f10 <ast_enable_periodic0+0x40>
80024eda:	1e 26       	rsub	r6,pc
80024edc:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80024ee0:	ee fc ff fc 	ld.w	r12,r7[-4]
80024ee4:	c2 4e       	rcall	80024b2c <ast_is_busy>
80024ee6:	18 98       	mov	r8,r12
80024ee8:	58 08       	cp.w	r8,0
80024eea:	cf b1       	brne	80024ee0 <ast_enable_periodic0+0x10>
	// Enable the RTC
	ast->eve |= AVR32_AST_EVE_PER0_MASK;
80024eec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024ef0:	71 28       	ld.w	r8,r8[0x48]
80024ef2:	10 99       	mov	r9,r8
80024ef4:	b1 a9       	sbr	r9,0x10
80024ef6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024efa:	f1 49 00 48 	st.w	r8[72],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80024efe:	ee fc ff fc 	ld.w	r12,r7[-4]
80024f02:	c1 5e       	rcall	80024b2c <ast_is_busy>
80024f04:	18 98       	mov	r8,r12
80024f06:	58 08       	cp.w	r8,0
80024f08:	cf b1       	brne	80024efe <ast_enable_periodic0+0x2e>
}
80024f0a:	2f fd       	sub	sp,-4
80024f0c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024f10:	80 02       	ld.sh	r2,r0[0x0]
80024f12:	4d 5e       	lddpc	lr,80025064 <dacifb_us_delay+0x78>

80024f14 <ast_disable_periodic0>:


void ast_disable_periodic0(volatile avr32_ast_t *ast)
{
80024f14:	eb cd 40 c0 	pushm	r6-r7,lr
80024f18:	1a 97       	mov	r7,sp
80024f1a:	20 1d       	sub	sp,4
80024f1c:	48 f6       	lddpc	r6,80024f58 <ast_disable_periodic0+0x44>
80024f1e:	1e 26       	rsub	r6,pc
80024f20:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80024f24:	ee fc ff fc 	ld.w	r12,r7[-4]
80024f28:	c0 2e       	rcall	80024b2c <ast_is_busy>
80024f2a:	18 98       	mov	r8,r12
80024f2c:	58 08       	cp.w	r8,0
80024f2e:	cf b1       	brne	80024f24 <ast_disable_periodic0+0x10>
	// Enable the RTC
	ast->evd |= AVR32_AST_EVE_PER0_MASK;
80024f30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024f34:	71 38       	ld.w	r8,r8[0x4c]
80024f36:	10 99       	mov	r9,r8
80024f38:	b1 a9       	sbr	r9,0x10
80024f3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024f3e:	f1 49 00 4c 	st.w	r8[76],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80024f42:	ee fc ff fc 	ld.w	r12,r7[-4]
80024f46:	fe b0 fd f3 	rcall	80024b2c <ast_is_busy>
80024f4a:	18 98       	mov	r8,r12
80024f4c:	58 08       	cp.w	r8,0
80024f4e:	cf a1       	brne	80024f42 <ast_disable_periodic0+0x2e>
}
80024f50:	2f fd       	sub	sp,-4
80024f52:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024f56:	00 00       	add	r0,r0
80024f58:	80 02       	ld.sh	r2,r0[0x0]
80024f5a:	4d a2       	lddpc	r2,800250c0 <dacifb_us_delay+0xd4>

80024f5c <ast_enable_periodic1>:


void ast_enable_periodic1(volatile avr32_ast_t *ast)
{
80024f5c:	eb cd 40 c0 	pushm	r6-r7,lr
80024f60:	1a 97       	mov	r7,sp
80024f62:	20 1d       	sub	sp,4
80024f64:	48 f6       	lddpc	r6,80024fa0 <ast_enable_periodic1+0x44>
80024f66:	1e 26       	rsub	r6,pc
80024f68:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80024f6c:	ee fc ff fc 	ld.w	r12,r7[-4]
80024f70:	fe b0 fd de 	rcall	80024b2c <ast_is_busy>
80024f74:	18 98       	mov	r8,r12
80024f76:	58 08       	cp.w	r8,0
80024f78:	cf a1       	brne	80024f6c <ast_enable_periodic1+0x10>
	// Enable the RTC
	ast->eve |= AVR32_AST_EVE_PER1_MASK;
80024f7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024f7e:	71 28       	ld.w	r8,r8[0x48]
80024f80:	10 99       	mov	r9,r8
80024f82:	b1 b9       	sbr	r9,0x11
80024f84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024f88:	f1 49 00 48 	st.w	r8[72],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80024f8c:	ee fc ff fc 	ld.w	r12,r7[-4]
80024f90:	fe b0 fd ce 	rcall	80024b2c <ast_is_busy>
80024f94:	18 98       	mov	r8,r12
80024f96:	58 08       	cp.w	r8,0
80024f98:	cf a1       	brne	80024f8c <ast_enable_periodic1+0x30>
}
80024f9a:	2f fd       	sub	sp,-4
80024f9c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024fa0:	80 02       	ld.sh	r2,r0[0x0]
80024fa2:	4d ea       	lddpc	r10,80025118 <dacifb_us_delay+0x12c>

80024fa4 <ast_disable_periodic1>:


void ast_disable_periodic1(volatile avr32_ast_t *ast)
{
80024fa4:	eb cd 40 c0 	pushm	r6-r7,lr
80024fa8:	1a 97       	mov	r7,sp
80024faa:	20 1d       	sub	sp,4
80024fac:	48 f6       	lddpc	r6,80024fe8 <ast_disable_periodic1+0x44>
80024fae:	1e 26       	rsub	r6,pc
80024fb0:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80024fb4:	ee fc ff fc 	ld.w	r12,r7[-4]
80024fb8:	fe b0 fd ba 	rcall	80024b2c <ast_is_busy>
80024fbc:	18 98       	mov	r8,r12
80024fbe:	58 08       	cp.w	r8,0
80024fc0:	cf a1       	brne	80024fb4 <ast_disable_periodic1+0x10>
	// Enable the RTC
	ast->evd |= AVR32_AST_EVE_PER0_MASK;
80024fc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024fc6:	71 38       	ld.w	r8,r8[0x4c]
80024fc8:	10 99       	mov	r9,r8
80024fca:	b1 a9       	sbr	r9,0x10
80024fcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024fd0:	f1 49 00 4c 	st.w	r8[76],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80024fd4:	ee fc ff fc 	ld.w	r12,r7[-4]
80024fd8:	fe b0 fd aa 	rcall	80024b2c <ast_is_busy>
80024fdc:	18 98       	mov	r8,r12
80024fde:	58 08       	cp.w	r8,0
80024fe0:	cf a1       	brne	80024fd4 <ast_disable_periodic1+0x30>
}
80024fe2:	2f fd       	sub	sp,-4
80024fe4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024fe8:	80 02       	ld.sh	r2,r0[0x0]
80024fea:	4e 32       	lddpc	r2,80025174 <dacifb_get_calibration_data+0x2c>

80024fec <dacifb_us_delay>:
 *
 * \param us Number of microseconds to wait.
 * \param hsb_mhz_up Rounded-up HSB frequency in MHz.
 */
static void dacifb_us_delay(us, hsb_mhz_up)
{
80024fec:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
80024ff0:	1a 97       	mov	r7,sp
80024ff2:	20 cd       	sub	sp,48
80024ff4:	4d 46       	lddpc	r6,80025144 <dacifb_us_delay+0x158>
80024ff6:	1e 26       	rsub	r6,pc
80024ff8:	ef 4c ff d4 	st.w	r7[-44],r12
80024ffc:	ef 4b ff d0 	st.w	r7[-48],r11
	t_cpu_time timer;
    cpu_set_timeout( cpu_us_2_cy(us, hsb_mhz_up), &timer ); // timeout in 10 ms
80025000:	ee fa ff d0 	ld.w	r10,r7[-48]
80025004:	ee fb ff d4 	ld.w	r11,r7[-44]
80025008:	ef 4b ff e8 	st.w	r7[-24],r11
8002500c:	ef 4a ff e4 	st.w	r7[-28],r10
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80025010:	ee f2 ff e8 	ld.w	r2,r7[-24]
80025014:	30 03       	mov	r3,0
80025016:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002501a:	30 09       	mov	r9,0
8002501c:	e6 08 02 4a 	mul	r10,r3,r8
80025020:	f2 02 02 4b 	mul	r11,r9,r2
80025024:	16 0a       	add	r10,r11
80025026:	e4 08 06 48 	mulu.d	r8,r2,r8
8002502a:	12 0a       	add	r10,r9
8002502c:	14 99       	mov	r9,r10
8002502e:	ee 7a 42 3f 	mov	r10,999999
80025032:	30 0b       	mov	r11,0
80025034:	f0 0a 00 0a 	add	r10,r8,r10
80025038:	f2 0b 00 4b 	adc	r11,r9,r11
8002503c:	ee 78 42 40 	mov	r8,1000000
80025040:	30 09       	mov	r9,0
80025042:	f0 16 01 08 	mcall	r6[1056]
80025046:	14 98       	mov	r8,r10
80025048:	16 99       	mov	r9,r11
8002504a:	ef 48 ff f0 	st.w	r7[-16],r8
8002504e:	ee c8 00 28 	sub	r8,r7,40
80025052:	ef 48 ff ec 	st.w	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80025056:	e1 b8 00 42 	mfsr	r8,0x108
8002505a:	10 99       	mov	r9,r8
8002505c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80025060:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80025062:	ee f8 ff ec 	ld.w	r8,r7[-20]
80025066:	70 09       	ld.w	r9,r8[0x0]
80025068:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002506c:	10 09       	add	r9,r8
8002506e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80025072:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80025074:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025078:	30 08       	mov	r8,0
8002507a:	f3 68 00 08 	st.b	r9[8],r8
8002507e:	ee c8 00 28 	sub	r8,r7,40
80025082:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80025086:	e1 b8 00 42 	mfsr	r8,0x108
8002508a:	ef 48 ff f8 	st.w	r7[-8],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8002508e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80025092:	f1 39 00 08 	ld.ub	r9,r8[8]
80025096:	30 28       	mov	r8,2
80025098:	f0 09 18 00 	cp.b	r9,r8
8002509c:	c0 31       	brne	800250a2 <dacifb_us_delay+0xb6>
    return false;
8002509e:	30 08       	mov	r8,0
800250a0:	c4 38       	rjmp	80025126 <dacifb_us_delay+0x13a>

  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800250a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800250a6:	f1 39 00 08 	ld.ub	r9,r8[8]
800250aa:	30 18       	mov	r8,1
800250ac:	f0 09 18 00 	cp.b	r9,r8
800250b0:	c0 31       	brne	800250b6 <dacifb_us_delay+0xca>
    return true;
800250b2:	30 18       	mov	r8,1
800250b4:	c3 98       	rjmp	80025126 <dacifb_us_delay+0x13a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800250b6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800250ba:	70 09       	ld.w	r9,r8[0x0]
800250bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800250c0:	70 18       	ld.w	r8,r8[0x4]
800250c2:	10 39       	cp.w	r9,r8
800250c4:	e0 88 00 1a 	brls	800250f8 <dacifb_us_delay+0x10c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800250c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800250cc:	70 08       	ld.w	r8,r8[0x0]
800250ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800250d2:	10 39       	cp.w	r9,r8
800250d4:	c1 02       	brcc	800250f4 <dacifb_us_delay+0x108>
800250d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800250da:	70 18       	ld.w	r8,r8[0x4]
800250dc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800250e0:	10 39       	cp.w	r9,r8
800250e2:	e0 88 00 09 	brls	800250f4 <dacifb_us_delay+0x108>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800250e6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800250ea:	30 18       	mov	r8,1
800250ec:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800250f0:	30 18       	mov	r8,1
800250f2:	c1 a8       	rjmp	80025126 <dacifb_us_delay+0x13a>
    }
    return false;
800250f4:	30 08       	mov	r8,0
800250f6:	c1 88       	rjmp	80025126 <dacifb_us_delay+0x13a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800250f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800250fc:	70 08       	ld.w	r8,r8[0x0]
800250fe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025102:	10 39       	cp.w	r9,r8
80025104:	c0 93       	brcs	80025116 <dacifb_us_delay+0x12a>
80025106:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002510a:	70 18       	ld.w	r8,r8[0x4]
8002510c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025110:	10 39       	cp.w	r9,r8
80025112:	e0 88 00 09 	brls	80025124 <dacifb_us_delay+0x138>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80025116:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002511a:	30 18       	mov	r8,1
8002511c:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80025120:	30 18       	mov	r8,1
80025122:	c0 28       	rjmp	80025126 <dacifb_us_delay+0x13a>
    }
    return false;
80025124:	30 08       	mov	r8,0
    while(! cpu_is_timeout(&timer) );
80025126:	58 08       	cp.w	r8,0
80025128:	ca b0       	breq	8002507e <dacifb_us_delay+0x92>
8002512a:	ee c8 00 28 	sub	r8,r7,40
8002512e:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
80025132:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025136:	30 28       	mov	r8,2
80025138:	f3 68 00 08 	st.b	r9[8],r8
    cpu_stop_timeout(&timer);
}
8002513c:	2f 4d       	sub	sp,-48
8002513e:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
80025142:	00 00       	add	r0,r0
80025144:	80 02       	ld.sh	r2,r0[0x0]
80025146:	4e 7a       	lddpc	r10,800252e0 <dacifb_configure+0x102>

80025148 <dacifb_get_calibration_data>:
 */

void dacifb_get_calibration_data( volatile avr32_dacifb_t * dacifb,
                                dacifb_opt_t * p_dacifb_opt,
                                U8 instance)
{
80025148:	eb cd 40 80 	pushm	r7,lr
8002514c:	1a 97       	mov	r7,sp
8002514e:	20 5d       	sub	sp,20
80025150:	ef 4c ff f4 	st.w	r7[-12],r12
80025154:	ef 4b ff f0 	st.w	r7[-16],r11
80025158:	14 98       	mov	r8,r10
8002515a:	ef 68 ff ec 	st.b	r7[-20],r8
  {
    p_dacifb_opt->offset_calibration_value = ((*calibration_data >> 16) & 0x000000FF);
    p_dacifb_opt->gain_calibration_value = ((*calibration_data >> 24) & 0x000000FF);    
  }
#else
  unsigned int* calibration_data_0 = (unsigned int*)AVR32_FLASHC_CALIBRATION_FOURTH_WORD_ADDRESS;
8002515e:	e0 68 02 0c 	mov	r8,524
80025162:	ea 18 80 80 	orh	r8,0x8080
80025166:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int* calibration_data_1 = (unsigned int*)AVR32_FLASHC_CALIBRATION_FIVETH_WORD_ADDRESS;
8002516a:	e0 68 02 14 	mov	r8,532
8002516e:	ea 18 80 80 	orh	r8,0x8080
80025172:	ef 48 ff fc 	st.w	r7[-4],r8
  if (instance == 0)
80025176:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002517a:	30 08       	mov	r8,0
8002517c:	f0 09 18 00 	cp.b	r9,r8
80025180:	c1 71       	brne	800251ae <dacifb_get_calibration_data+0x66>
  {
    p_dacifb_opt->offset_calibration_value = (*calibration_data_0 & 0x000001FF);
80025182:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025186:	70 08       	ld.w	r8,r8[0x0]
80025188:	5c 88       	casts.h	r8
8002518a:	5c 88       	casts.h	r8
8002518c:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80025190:	ee f9 ff f0 	ld.w	r9,r7[-16]
80025194:	b2 28       	st.h	r9[0x4],r8
    p_dacifb_opt->gain_calibration_value = ((*calibration_data_0 >> 16) & 0x000000FF);  
80025196:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002519a:	70 08       	ld.w	r8,r8[0x0]
8002519c:	b1 88       	lsr	r8,0x10
8002519e:	5c 88       	casts.h	r8
800251a0:	5c 88       	casts.h	r8
800251a2:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
800251a6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800251aa:	b2 18       	st.h	r9[0x2],r8
800251ac:	c1 68       	rjmp	800251d8 <dacifb_get_calibration_data+0x90>
  }
  else
  {
    p_dacifb_opt->offset_calibration_value = ((*calibration_data_1) & 0x000001FF);
800251ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800251b2:	70 08       	ld.w	r8,r8[0x0]
800251b4:	5c 88       	casts.h	r8
800251b6:	5c 88       	casts.h	r8
800251b8:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800251bc:	ee f9 ff f0 	ld.w	r9,r7[-16]
800251c0:	b2 28       	st.h	r9[0x4],r8
    p_dacifb_opt->gain_calibration_value = ((*calibration_data_1 >> 16) & 0x000000FF);    
800251c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800251c6:	70 08       	ld.w	r8,r8[0x0]
800251c8:	b1 88       	lsr	r8,0x10
800251ca:	5c 88       	casts.h	r8
800251cc:	5c 88       	casts.h	r8
800251ce:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
800251d2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800251d6:	b2 18       	st.h	r9[0x2],r8
  }
#endif  
}
800251d8:	2f bd       	sub	sp,-20
800251da:	e3 cd 80 80 	ldm	sp++,r7,pc

800251de <dacifb_configure>:

U8 dacifb_configure(volatile avr32_dacifb_t * dacifb,
                           dacifb_opt_t * p_dacifb_opt,
                           U32 pb_hz)
{
800251de:	eb cd 40 80 	pushm	r7,lr
800251e2:	1a 97       	mov	r7,sp
800251e4:	20 5d       	sub	sp,20
800251e6:	ef 4c ff f4 	st.w	r7[-12],r12
800251ea:	ef 4b ff f0 	st.w	r7[-16],r11
800251ee:	ef 4a ff ec 	st.w	r7[-20],r10
  U32 prescaler = 0;
800251f2:	30 08       	mov	r8,0
800251f4:	ef 48 ff f8 	st.w	r7[-8],r8
  U32 counter = 0;
800251f8:	30 08       	mov	r8,0
800251fa:	ef 48 ff fc 	st.w	r7[-4],r8
  
  Assert( dacifb!=NULL );
  
  // Calibration of DAC
  dacifb->goc = (((p_dacifb_opt->offset_calibration_value<<AVR32_DACIFB_GOC_OCR_OFFSET)&AVR32_DACIFB_GOC_OCR_MASK)|
800251fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025202:	90 28       	ld.sh	r8,r8[0x4]
80025204:	5c 78       	castu.h	r8
80025206:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
                 ((p_dacifb_opt->gain_calibration_value<<AVR32_DACIFB_GOC_GCR_OFFSET)&AVR32_DACIFB_GOC_GCR_MASK));
8002520a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002520e:	90 18       	ld.sh	r8,r8[0x2]
80025210:	5c 78       	castu.h	r8
80025212:	b1 68       	lsl	r8,0x10
80025214:	e6 18 01 ff 	andh	r8,0x1ff,COH
  U32 counter = 0;
  
  Assert( dacifb!=NULL );
  
  // Calibration of DAC
  dacifb->goc = (((p_dacifb_opt->offset_calibration_value<<AVR32_DACIFB_GOC_OCR_OFFSET)&AVR32_DACIFB_GOC_OCR_MASK)|
80025218:	f3 e8 10 08 	or	r8,r9,r8
8002521c:	10 99       	mov	r9,r8
8002521e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80025222:	91 d9       	st.w	r8[0x34],r9
                 ((p_dacifb_opt->gain_calibration_value<<AVR32_DACIFB_GOC_GCR_OFFSET)&AVR32_DACIFB_GOC_GCR_MASK));
  
  // Compute PRESC field
  prescaler = 31 - clz(pb_hz/p_dacifb_opt->prescaler_clock_hz);  
80025224:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025228:	70 29       	ld.w	r9,r8[0x8]
8002522a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002522e:	f0 09 0d 08 	divu	r8,r8,r9
80025232:	f0 08 12 00 	clz	r8,r8
80025236:	f0 08 11 1f 	rsub	r8,r8,31
8002523a:	ef 48 ff f8 	st.w	r7[-8],r8

  // Check PRESC value
  if (prescaler > (1<<AVR32_DACIFB_TCR_PRESC_SIZE))
8002523e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025242:	58 88       	cp.w	r8,8
80025244:	e0 88 00 04 	brls	8002524c <dacifb_configure+0x6e>
    return DACIFB_CONFIGURATION_REFUSED;
80025248:	30 08       	mov	r8,0
8002524a:	c6 d8       	rjmp	80025324 <dacifb_configure+0x146>

  // Update prescaler_clock_hz value
  p_dacifb_opt->prescaler_clock_hz = pb_hz / (1<<prescaler);
8002524c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025250:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025254:	f2 08 0a 49 	lsr	r9,r9,r8
80025258:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002525c:	91 29       	st.w	r8[0x8],r9
    
  // Compute CHI field  ( minimum value of 2us) 
  counter = (p_dacifb_opt->prescaler_clock_hz/DACIFB_CHI_MIN_VALUE);
8002525e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025262:	70 29       	ld.w	r9,r8[0x8]
80025264:	e0 68 de 83 	mov	r8,56963
80025268:	ea 18 43 1b 	orh	r8,0x431b
8002526c:	f2 08 06 48 	mulu.d	r8,r9,r8
80025270:	f2 08 16 11 	lsr	r8,r9,0x11
80025274:	ef 48 ff fc 	st.w	r7[-4],r8
  
  // Check CHI value
  if (counter > (1<<AVR32_DACIFB_TCR_CHI_SIZE))
80025278:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002527c:	e0 48 00 80 	cp.w	r8,128
80025280:	e0 88 00 04 	brls	80025288 <dacifb_configure+0xaa>
    return DACIFB_CONFIGURATION_REFUSED;
80025284:	30 08       	mov	r8,0
80025286:	c4 f8       	rjmp	80025324 <dacifb_configure+0x146>
  
  
  // Sampling Rate Frequency
  dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_PRESC_OFFSET)&AVR32_DACIFB_TCR_PRESC_MASK)|
80025288:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002528c:	70 39       	ld.w	r9,r8[0xc]
8002528e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025292:	b9 68       	lsl	r8,0x18
80025294:	10 9a       	mov	r10,r8
80025296:	e6 1a 07 00 	andh	r10,0x700,COH
                  ((counter<<AVR32_DACIFB_TCR_CHI_OFFSET)&AVR32_DACIFB_TCR_CHI_MASK) );
8002529a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002529e:	b1 68       	lsl	r8,0x10
800252a0:	e6 18 00 7f 	andh	r8,0x7f,COH
  if (counter > (1<<AVR32_DACIFB_TCR_CHI_SIZE))
    return DACIFB_CONFIGURATION_REFUSED;
  
  
  // Sampling Rate Frequency
  dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_PRESC_OFFSET)&AVR32_DACIFB_TCR_PRESC_MASK)|
800252a4:	f5 e8 10 08 	or	r8,r10,r8
800252a8:	10 49       	or	r9,r8
800252aa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800252ae:	91 39       	st.w	r8[0xc],r9
                  ((counter<<AVR32_DACIFB_TCR_CHI_OFFSET)&AVR32_DACIFB_TCR_CHI_MASK) );
  
  // Channel Selection
  dacifb->cfr |= ((p_dacifb_opt->channel_selection<<AVR32_DACIFB_CFR_CHC_OFFSET)&AVR32_DACIFB_CFR_CHC_MASK);
800252b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800252b4:	70 19       	ld.w	r9,r8[0x4]
800252b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800252ba:	11 98       	ld.ub	r8,r8[0x1]
800252bc:	b9 68       	lsl	r8,0x18
800252be:	e6 18 03 00 	andh	r8,0x300,COH
800252c2:	10 49       	or	r9,r8
800252c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800252c8:	91 19       	st.w	r8[0x4],r9
    
  // Reference Selection
  dacifb->cfr |= ((p_dacifb_opt->reference <<AVR32_DACIFB_CFR_REF_OFFSET)&AVR32_DACIFB_CFR_REF_MASK);
800252ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800252ce:	70 19       	ld.w	r9,r8[0x4]
800252d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800252d4:	11 88       	ld.ub	r8,r8[0x0]
800252d6:	a9 68       	lsl	r8,0x8
800252d8:	e2 18 01 00 	andl	r8,0x100,COH
800252dc:	10 49       	or	r9,r8
800252de:	ee f8 ff f4 	ld.w	r8,r7[-12]
800252e2:	91 19       	st.w	r8[0x4],r9

  // Dual Data
  dacifb->cfr |= ((p_dacifb_opt->dual<<AVR32_DACIFB_CFR_DDA_OFFSET)&AVR32_DACIFB_CFR_DDA_MASK);
800252e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800252e8:	70 19       	ld.w	r9,r8[0x4]
800252ea:	ee f8 ff f0 	ld.w	r8,r7[-16]
800252ee:	11 f8       	ld.ub	r8,r8[0x7]
800252f0:	a1 78       	lsl	r8,0x1
800252f2:	e2 18 00 02 	andl	r8,0x2,COH
800252f6:	10 49       	or	r9,r8
800252f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800252fc:	91 19       	st.w	r8[0x4],r9
  
  // Low Power Mode
  dacifb->cfr |= ((p_dacifb_opt->low_power <<AVR32_DACIFB_CFR_LP_OFFSET)&AVR32_DACIFB_CFR_LP_MASK);
800252fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80025302:	70 19       	ld.w	r9,r8[0x4]
80025304:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025308:	11 e8       	ld.ub	r8,r8[0x6]
8002530a:	10 49       	or	r9,r8
8002530c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80025310:	91 19       	st.w	r8[0x4],r9
  
  // Enable DAC
  dacifb->cr |= AVR32_DACIFB_CR_EN_MASK;
80025312:	ee f8 ff f4 	ld.w	r8,r7[-12]
80025316:	70 08       	ld.w	r8,r8[0x0]
80025318:	10 99       	mov	r9,r8
8002531a:	a1 a9       	sbr	r9,0x0
8002531c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80025320:	91 09       	st.w	r8[0x0],r9
  
  return DACIFB_CONFIGURATION_ACCEPTED;
80025322:	30 18       	mov	r8,1
}
80025324:	10 9c       	mov	r12,r8
80025326:	2f bd       	sub	sp,-20
80025328:	e3 cd 80 80 	ldm	sp++,r7,pc

8002532c <dacifb_configure_channel>:

U8 dacifb_configure_channel( volatile avr32_dacifb_t * dacifb,
                             U8 channel,
                             dacifb_channel_opt_t * p_dacifb_channel_opt,
                             U32 prescaler_clock_hz)
{
8002532c:	eb cd 40 80 	pushm	r7,lr
80025330:	1a 97       	mov	r7,sp
80025332:	20 7d       	sub	sp,28
80025334:	ef 4c ff f0 	st.w	r7[-16],r12
80025338:	16 98       	mov	r8,r11
8002533a:	ef 4a ff e8 	st.w	r7[-24],r10
8002533e:	ef 49 ff e4 	st.w	r7[-28],r9
80025342:	ef 68 ff ec 	st.b	r7[-20],r8
  U32 prescaler_min = 0;
80025346:	30 08       	mov	r8,0
80025348:	ef 48 ff f4 	st.w	r7[-12],r8
  U32 prescaler_max = 0;
8002534c:	30 08       	mov	r8,0
8002534e:	ef 48 ff f8 	st.w	r7[-8],r8
  U32 prescaler = 0;
80025352:	30 08       	mov	r8,0
80025354:	ef 48 ff fc 	st.w	r7[-4],r8
  
  Assert( dacifb!=NULL );
  
  // Auto-refresh Mode
  if (p_dacifb_channel_opt->auto_refresh_mode == true)
80025358:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002535c:	11 88       	ld.ub	r8,r8[0x0]
8002535e:	58 08       	cp.w	r8,0
80025360:	c2 40       	breq	800253a8 <dacifb_configure_channel+0x7c>
  {
    switch(channel)
80025362:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80025366:	58 28       	cp.w	r8,2
80025368:	c0 e0       	breq	80025384 <dacifb_configure_channel+0x58>
8002536a:	58 38       	cp.w	r8,3
8002536c:	c1 50       	breq	80025396 <dacifb_configure_channel+0x6a>
8002536e:	58 18       	cp.w	r8,1
80025370:	c1 c1       	brne	800253a8 <dacifb_configure_channel+0x7c>
    {
      case DACIFB_CHANNEL_SELECTION_A:
           dacifb->cr |= (AVR32_DACIFB_CR_ARAE_MASK);      
80025372:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025376:	70 08       	ld.w	r8,r8[0x0]
80025378:	10 99       	mov	r9,r8
8002537a:	bb a9       	sbr	r9,0x1a
8002537c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025380:	91 09       	st.w	r8[0x0],r9
        break;
80025382:	c1 38       	rjmp	800253a8 <dacifb_configure_channel+0x7c>
      case DACIFB_CHANNEL_SELECTION_B:
           dacifb->cr |= (AVR32_DACIFB_CR_ARBE_MASK );
80025384:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025388:	70 08       	ld.w	r8,r8[0x0]
8002538a:	10 99       	mov	r9,r8
8002538c:	bb b9       	sbr	r9,0x1b
8002538e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025392:	91 09       	st.w	r8[0x0],r9
        break;  
80025394:	c0 a8       	rjmp	800253a8 <dacifb_configure_channel+0x7c>
      case DACIFB_CHANNEL_SELECTION_AB:
           dacifb->cr |= (AVR32_DACIFB_CR_ARAE_MASK)|(AVR32_DACIFB_CR_ARBE_MASK );
80025396:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002539a:	70 08       	ld.w	r8,r8[0x0]
8002539c:	10 99       	mov	r9,r8
8002539e:	ea 19 0c 00 	orh	r9,0xc00
800253a2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800253a6:	91 09       	st.w	r8[0x0],r9
        break;  
    }
  }
  
  // Compute CHRA/CHRB fields  ( min value of 25us) 
  prescaler_min = 31 - clz(prescaler_clock_hz/DACIFB_CHRx_MIN_VALUE); 
800253a8:	ee f9 ff e4 	ld.w	r9,r7[-28]
800253ac:	e0 68 17 59 	mov	r8,5977
800253b0:	ea 18 d1 b7 	orh	r8,0xd1b7
800253b4:	f2 08 06 48 	mulu.d	r8,r9,r8
800253b8:	f2 08 16 0f 	lsr	r8,r9,0xf
800253bc:	f0 08 12 00 	clz	r8,r8
800253c0:	f0 08 11 1f 	rsub	r8,r8,31
800253c4:	ef 48 ff f4 	st.w	r7[-12],r8
  if (prescaler_min > 0) prescaler_min --;
800253c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800253cc:	58 08       	cp.w	r8,0
800253ce:	c0 60       	breq	800253da <dacifb_configure_channel+0xae>
800253d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800253d4:	20 18       	sub	r8,1
800253d6:	ef 48 ff f4 	st.w	r7[-12],r8
  
  // Check CHRA/CHRB fields
  if ( (prescaler_min > (1<<AVR32_DACIFB_TCR_CHRA_SIZE)) ||
800253da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800253de:	59 08       	cp.w	r8,16
800253e0:	e0 8b 00 07 	brhi	800253ee <dacifb_configure_channel+0xc2>
800253e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800253e8:	59 08       	cp.w	r8,16
800253ea:	e0 88 00 05 	brls	800253f4 <dacifb_configure_channel+0xc8>
       (prescaler_min > (1<<AVR32_DACIFB_TCR_CHRB_SIZE))  )
    return DACIFB_CONFIGURATION_REFUSED;
800253ee:	30 08       	mov	r8,0
800253f0:	e0 8f 01 87 	bral	800256fe <dacifb_configure_channel+0x3d2>
  
  // Compute CHRA/CHRB fields  ( max value of 35us) 
  prescaler_max = 31 - clz(prescaler_clock_hz/DACIFB_CHRx_MAX_VALUE); 
800253f4:	ee f9 ff e4 	ld.w	r9,r7[-28]
800253f8:	e0 68 27 59 	mov	r8,10073
800253fc:	ea 18 fb a9 	orh	r8,0xfba9
80025400:	f2 08 06 48 	mulu.d	r8,r9,r8
80025404:	f2 08 16 0f 	lsr	r8,r9,0xf
80025408:	f0 08 12 00 	clz	r8,r8
8002540c:	f0 08 11 1f 	rsub	r8,r8,31
80025410:	ef 48 ff f8 	st.w	r7[-8],r8
  if (prescaler_max > 0) prescaler_max --;
80025414:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025418:	58 08       	cp.w	r8,0
8002541a:	c0 60       	breq	80025426 <dacifb_configure_channel+0xfa>
8002541c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025420:	20 18       	sub	r8,1
80025422:	ef 48 ff f8 	st.w	r7[-8],r8
  
  // Check CHRA/CHRB fields
  if ( (prescaler_max > (1<<AVR32_DACIFB_TCR_CHRA_SIZE)) ||
80025426:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002542a:	59 08       	cp.w	r8,16
8002542c:	e0 8b 00 07 	brhi	8002543a <dacifb_configure_channel+0x10e>
80025430:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025434:	59 08       	cp.w	r8,16
80025436:	e0 88 00 04 	brls	8002543e <dacifb_configure_channel+0x112>
       (prescaler_max > (1<<AVR32_DACIFB_TCR_CHRB_SIZE))  )
    return DACIFB_CONFIGURATION_REFUSED;      
8002543a:	30 08       	mov	r8,0
8002543c:	c6 19       	rjmp	800256fe <dacifb_configure_channel+0x3d2>
      
  // Find value for CHRA/CHRB in the range min/max values 25us/35us and stop if it is not possible.
  prescaler = 0;
8002543e:	30 08       	mov	r8,0
80025440:	ef 48 ff fc 	st.w	r7[-4],r8
  while ((prescaler<<1) < prescaler_min)
80025444:	c0 68       	rjmp	80025450 <dacifb_configure_channel+0x124>
  {
      prescaler++;
80025446:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002544a:	2f f8       	sub	r8,-1
8002544c:	ef 48 ff fc 	st.w	r7[-4],r8
       (prescaler_max > (1<<AVR32_DACIFB_TCR_CHRB_SIZE))  )
    return DACIFB_CONFIGURATION_REFUSED;      
      
  // Find value for CHRA/CHRB in the range min/max values 25us/35us and stop if it is not possible.
  prescaler = 0;
  while ((prescaler<<1) < prescaler_min)
80025450:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025454:	f0 09 15 01 	lsl	r9,r8,0x1
80025458:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002545c:	10 39       	cp.w	r9,r8
8002545e:	cf 43       	brcs	80025446 <dacifb_configure_channel+0x11a>
  {
      prescaler++;
  } 
  // If value found is out of range, configuration refused 
  if ((prescaler<<1) > prescaler_max)  
80025460:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025464:	f0 09 15 01 	lsl	r9,r8,0x1
80025468:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002546c:	10 39       	cp.w	r9,r8
8002546e:	e0 88 00 04 	brls	80025476 <dacifb_configure_channel+0x14a>
    return DACIFB_CONFIGURATION_REFUSED;    
80025472:	30 08       	mov	r8,0
80025474:	c4 59       	rjmp	800256fe <dacifb_configure_channel+0x3d2>
    
  // Refresh Time 
  switch(channel)
80025476:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8002547a:	58 28       	cp.w	r8,2
8002547c:	c1 10       	breq	8002549e <dacifb_configure_channel+0x172>
8002547e:	58 38       	cp.w	r8,3
80025480:	c1 c0       	breq	800254b8 <dacifb_configure_channel+0x18c>
80025482:	58 18       	cp.w	r8,1
80025484:	c2 c1       	brne	800254dc <dacifb_configure_channel+0x1b0>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->tcr |= ((prescaler<<AVR32_DACIFB_TCR_CHRA_OFFSET)&AVR32_DACIFB_TCR_CHRA_MASK);      
80025486:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002548a:	70 39       	ld.w	r9,r8[0xc]
8002548c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025490:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80025494:	10 49       	or	r9,r8
80025496:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002549a:	91 39       	st.w	r8[0xc],r9
      break;
8002549c:	c2 08       	rjmp	800254dc <dacifb_configure_channel+0x1b0>
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->tcr |= ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK);
8002549e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800254a2:	70 39       	ld.w	r9,r8[0xc]
800254a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800254a8:	a9 68       	lsl	r8,0x8
800254aa:	e2 18 0f 00 	andl	r8,0xf00,COH
800254ae:	10 49       	or	r9,r8
800254b0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800254b4:	91 39       	st.w	r8[0xc],r9
      break;  
800254b6:	c1 38       	rjmp	800254dc <dacifb_configure_channel+0x1b0>
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_CHRA_OFFSET)&AVR32_DACIFB_TCR_CHRA_MASK) |
800254b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800254bc:	70 39       	ld.w	r9,r8[0xc]
800254be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800254c2:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
                          ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK) );
800254c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800254ca:	a9 68       	lsl	r8,0x8
800254cc:	e2 18 0f 00 	andl	r8,0xf00,COH
      break;
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->tcr |= ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK);
      break;  
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_CHRA_OFFSET)&AVR32_DACIFB_TCR_CHRA_MASK) |
800254d0:	f5 e8 10 08 	or	r8,r10,r8
800254d4:	10 49       	or	r9,r8
800254d6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800254da:	91 39       	st.w	r8[0xc],r9
                          ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK) );
      break;
  }

  // Trigger Mode
  switch(channel)
800254dc:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800254e0:	58 28       	cp.w	r8,2
800254e2:	c3 30       	breq	80025548 <dacifb_configure_channel+0x21c>
800254e4:	58 38       	cp.w	r8,3
800254e6:	c5 e0       	breq	800255a2 <dacifb_configure_channel+0x276>
800254e8:	58 18       	cp.w	r8,1
800254ea:	e0 81 00 8f 	brne	80025608 <dacifb_configure_channel+0x2dc>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         if (p_dacifb_channel_opt->trigger_mode!=DACIFB_TRIGGER_MODE_MANUAL)
800254ee:	ee f8 ff e8 	ld.w	r8,r7[-24]
800254f2:	11 98       	ld.ub	r8,r8[0x1]
800254f4:	58 08       	cp.w	r8,0
800254f6:	c0 90       	breq	80025508 <dacifb_configure_channel+0x1dc>
         {
             dacifb->cfr |= (AVR32_DACIFB_CFR_AAE_MASK);
800254f8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800254fc:	70 18       	ld.w	r8,r8[0x4]
800254fe:	10 99       	mov	r9,r8
80025500:	b1 a9       	sbr	r9,0x10
80025502:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025506:	91 19       	st.w	r8[0x4],r9
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
80025508:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002550c:	11 99       	ld.ub	r9,r8[0x1]
8002550e:	30 28       	mov	r8,2
80025510:	f0 09 18 00 	cp.b	r9,r8
80025514:	c0 a1       	brne	80025528 <dacifb_configure_channel+0x1fc>
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLA_MASK);
80025516:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002551a:	70 28       	ld.w	r8,r8[0x8]
8002551c:	10 99       	mov	r9,r8
8002551e:	a1 a9       	sbr	r9,0x0
80025520:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025524:	91 29       	st.w	r8[0x8],r9
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRAE_MASK);
         }
      break;
80025526:	c7 18       	rjmp	80025608 <dacifb_configure_channel+0x2dc>
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLA_MASK);
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
80025528:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002552c:	11 99       	ld.ub	r9,r8[0x1]
8002552e:	30 18       	mov	r8,1
80025530:	f0 09 18 00 	cp.b	r9,r8
80025534:	c6 71       	brne	80025602 <dacifb_configure_channel+0x2d6>
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRAE_MASK);
80025536:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002553a:	70 08       	ld.w	r8,r8[0x0]
8002553c:	10 99       	mov	r9,r8
8002553e:	b9 a9       	sbr	r9,0x18
80025540:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025544:	91 09       	st.w	r8[0x0],r9
         }
      break;
80025546:	c6 18       	rjmp	80025608 <dacifb_configure_channel+0x2dc>
    case DACIFB_CHANNEL_SELECTION_B:
         if (p_dacifb_channel_opt->trigger_mode!=DACIFB_TRIGGER_MODE_MANUAL)
80025548:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002554c:	11 98       	ld.ub	r8,r8[0x1]
8002554e:	58 08       	cp.w	r8,0
80025550:	c0 90       	breq	80025562 <dacifb_configure_channel+0x236>
         {
             dacifb->cfr |= (AVR32_DACIFB_CFR_ABE_MASK);
80025552:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025556:	70 18       	ld.w	r8,r8[0x4]
80025558:	10 99       	mov	r9,r8
8002555a:	b1 b9       	sbr	r9,0x11
8002555c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025560:	91 19       	st.w	r8[0x4],r9
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
80025562:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025566:	11 99       	ld.ub	r9,r8[0x1]
80025568:	30 28       	mov	r8,2
8002556a:	f0 09 18 00 	cp.b	r9,r8
8002556e:	c0 a1       	brne	80025582 <dacifb_configure_channel+0x256>
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLB_MASK);
80025570:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025574:	70 28       	ld.w	r8,r8[0x8]
80025576:	10 99       	mov	r9,r8
80025578:	a9 a9       	sbr	r9,0x8
8002557a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002557e:	91 29       	st.w	r8[0x8],r9
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRBE_MASK);
         }
      break;    
80025580:	c4 48       	rjmp	80025608 <dacifb_configure_channel+0x2dc>
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLB_MASK);
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
80025582:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025586:	11 99       	ld.ub	r9,r8[0x1]
80025588:	30 18       	mov	r8,1
8002558a:	f0 09 18 00 	cp.b	r9,r8
8002558e:	c3 c1       	brne	80025606 <dacifb_configure_channel+0x2da>
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRBE_MASK);
80025590:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025594:	70 08       	ld.w	r8,r8[0x0]
80025596:	10 99       	mov	r9,r8
80025598:	b9 b9       	sbr	r9,0x19
8002559a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002559e:	91 09       	st.w	r8[0x0],r9
         }
      break;    
800255a0:	c3 48       	rjmp	80025608 <dacifb_configure_channel+0x2dc>
    case DACIFB_CHANNEL_SELECTION_AB:
         if (p_dacifb_channel_opt->trigger_mode!=DACIFB_TRIGGER_MODE_MANUAL)
800255a2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800255a6:	11 98       	ld.ub	r8,r8[0x1]
800255a8:	58 08       	cp.w	r8,0
800255aa:	c0 a0       	breq	800255be <dacifb_configure_channel+0x292>
         {
             dacifb->cfr |= (AVR32_DACIFB_CFR_AAE_MASK)|(AVR32_DACIFB_CFR_ABE_MASK);
800255ac:	ee f8 ff f0 	ld.w	r8,r7[-16]
800255b0:	70 18       	ld.w	r8,r8[0x4]
800255b2:	10 99       	mov	r9,r8
800255b4:	ea 19 00 03 	orh	r9,0x3
800255b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800255bc:	91 19       	st.w	r8[0x4],r9
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
800255be:	ee f8 ff e8 	ld.w	r8,r7[-24]
800255c2:	11 99       	ld.ub	r9,r8[0x1]
800255c4:	30 28       	mov	r8,2
800255c6:	f0 09 18 00 	cp.b	r9,r8
800255ca:	c0 b1       	brne	800255e0 <dacifb_configure_channel+0x2b4>
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLA_MASK)|(AVR32_DACIFB_ECR_ESLB_MASK);
800255cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800255d0:	70 28       	ld.w	r8,r8[0x8]
800255d2:	10 99       	mov	r9,r8
800255d4:	e8 19 01 01 	orl	r9,0x101
800255d8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800255dc:	91 29       	st.w	r8[0x8],r9
800255de:	c1 58       	rjmp	80025608 <dacifb_configure_channel+0x2dc>
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
800255e0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800255e4:	11 99       	ld.ub	r9,r8[0x1]
800255e6:	30 18       	mov	r8,1
800255e8:	f0 09 18 00 	cp.b	r9,r8
800255ec:	c0 e1       	brne	80025608 <dacifb_configure_channel+0x2dc>
         {
           dacifb->cr  |= (AVR32_DACIFB_CR_TRAE_MASK)|(AVR32_DACIFB_CR_TRBE_MASK);
800255ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
800255f2:	70 08       	ld.w	r8,r8[0x0]
800255f4:	10 99       	mov	r9,r8
800255f6:	ea 19 03 00 	orh	r9,0x300
800255fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800255fe:	91 09       	st.w	r8[0x0],r9
80025600:	c0 48       	rjmp	80025608 <dacifb_configure_channel+0x2dc>
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRAE_MASK);
         }
      break;
80025602:	d7 03       	nop
80025604:	c0 28       	rjmp	80025608 <dacifb_configure_channel+0x2dc>
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRBE_MASK);
         }
      break;    
80025606:	d7 03       	nop
      break;  
  }
  
  
  // Left Adjust/ Shift Value / Data Rounding
  switch(channel)
80025608:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8002560c:	58 28       	cp.w	r8,2
8002560e:	c2 20       	breq	80025652 <dacifb_configure_channel+0x326>
80025610:	58 38       	cp.w	r8,3
80025612:	c3 d0       	breq	8002568c <dacifb_configure_channel+0x360>
80025614:	58 18       	cp.w	r8,1
80025616:	c7 31       	brne	800256fc <dacifb_configure_channel+0x3d0>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
80025618:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002561c:	70 99       	ld.w	r9,r8[0x24]
8002561e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025622:	11 a8       	ld.ub	r8,r8[0x2]
80025624:	ab 78       	lsl	r8,0xb
80025626:	10 9a       	mov	r10,r8
80025628:	e2 1a 08 00 	andl	r10,0x800,COH
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
8002562c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025630:	11 b8       	ld.ub	r8,r8[0x3]
80025632:	a9 68       	lsl	r8,0x8
80025634:	e2 18 07 00 	andl	r8,0x700,COH
80025638:	10 4a       	or	r10,r8
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));      
8002563a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002563e:	11 c8       	ld.ub	r8,r8[0x4]
80025640:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
  
  // Left Adjust/ Shift Value / Data Rounding
  switch(channel)
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
80025644:	f5 e8 10 08 	or	r8,r10,r8
80025648:	10 49       	or	r9,r8
8002564a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002564e:	91 99       	st.w	r8[0x24],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));      
      break;
80025650:	c5 68       	rjmp	800256fc <dacifb_configure_channel+0x3d0>
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
80025652:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025656:	70 a9       	ld.w	r9,r8[0x28]
80025658:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002565c:	11 a8       	ld.ub	r8,r8[0x2]
8002565e:	ab 78       	lsl	r8,0xb
80025660:	10 9a       	mov	r10,r8
80025662:	e2 1a 08 00 	andl	r10,0x800,COH
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
80025666:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002566a:	11 b8       	ld.ub	r8,r8[0x3]
8002566c:	a9 68       	lsl	r8,0x8
8002566e:	e2 18 07 00 	andl	r8,0x700,COH
80025672:	10 4a       	or	r10,r8
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
80025674:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025678:	11 c8       	ld.ub	r8,r8[0x4]
8002567a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));      
      break;
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
8002567e:	f5 e8 10 08 	or	r8,r10,r8
80025682:	10 49       	or	r9,r8
80025684:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025688:	91 a9       	st.w	r8[0x28],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
      break;    
8002568a:	c3 98       	rjmp	800256fc <dacifb_configure_channel+0x3d0>
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
8002568c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025690:	70 99       	ld.w	r9,r8[0x24]
80025692:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025696:	11 a8       	ld.ub	r8,r8[0x2]
80025698:	ab 78       	lsl	r8,0xb
8002569a:	10 9a       	mov	r10,r8
8002569c:	e2 1a 08 00 	andl	r10,0x800,COH
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
800256a0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800256a4:	11 b8       	ld.ub	r8,r8[0x3]
800256a6:	a9 68       	lsl	r8,0x8
800256a8:	e2 18 07 00 	andl	r8,0x700,COH
800256ac:	10 4a       	or	r10,r8
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));   
800256ae:	ee f8 ff e8 	ld.w	r8,r7[-24]
800256b2:	11 c8       	ld.ub	r8,r8[0x4]
800256b4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
      break;    
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
800256b8:	f5 e8 10 08 	or	r8,r10,r8
800256bc:	10 49       	or	r9,r8
800256be:	ee f8 ff f0 	ld.w	r8,r7[-16]
800256c2:	91 99       	st.w	r8[0x24],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));   
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
800256c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800256c8:	70 a9       	ld.w	r9,r8[0x28]
800256ca:	ee f8 ff e8 	ld.w	r8,r7[-24]
800256ce:	11 a8       	ld.ub	r8,r8[0x2]
800256d0:	ab 78       	lsl	r8,0xb
800256d2:	10 9a       	mov	r10,r8
800256d4:	e2 1a 08 00 	andl	r10,0x800,COH
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
800256d8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800256dc:	11 b8       	ld.ub	r8,r8[0x3]
800256de:	a9 68       	lsl	r8,0x8
800256e0:	e2 18 07 00 	andl	r8,0x700,COH
800256e4:	10 4a       	or	r10,r8
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
800256e6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800256ea:	11 c8       	ld.ub	r8,r8[0x4]
800256ec:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
      break;    
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));   
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
800256f0:	f5 e8 10 08 	or	r8,r10,r8
800256f4:	10 49       	or	r9,r8
800256f6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800256fa:	91 a9       	st.w	r8[0x28],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
      break;   
  }
  return DACIFB_CONFIGURATION_ACCEPTED;
800256fc:	30 18       	mov	r8,1
}
800256fe:	10 9c       	mov	r12,r8
80025700:	2f 9d       	sub	sp,-28
80025702:	e3 cd 80 80 	ldm	sp++,r7,pc

80025706 <dacifb_start_channel>:

void dacifb_start_channel(volatile avr32_dacifb_t * dacifb, 
                          U8 channel,
                          U32 cpu_hz)
{
80025706:	eb cd 40 c0 	pushm	r6-r7,lr
8002570a:	1a 97       	mov	r7,sp
8002570c:	20 3d       	sub	sp,12
8002570e:	49 b6       	lddpc	r6,80025778 <dacifb_start_channel+0x72>
80025710:	1e 26       	rsub	r6,pc
80025712:	ef 4c ff fc 	st.w	r7[-4],r12
80025716:	16 98       	mov	r8,r11
80025718:	ef 4a ff f4 	st.w	r7[-12],r10
8002571c:	ef 68 ff f8 	st.b	r7[-8],r8
  Assert( dacifb!=NULL );
  
  // Wait 2us
  dacifb_us_delay(2,cpu_hz);
80025720:	ee fb ff f4 	ld.w	r11,r7[-12]
80025724:	30 2c       	mov	r12,2
80025726:	fe b0 fc 63 	rcall	80024fec <dacifb_us_delay>
  
  switch(channel)
8002572a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002572e:	58 28       	cp.w	r8,2
80025730:	c0 e0       	breq	8002574c <dacifb_start_channel+0x46>
80025732:	58 38       	cp.w	r8,3
80025734:	c1 50       	breq	8002575e <dacifb_start_channel+0x58>
80025736:	58 18       	cp.w	r8,1
80025738:	c1 c1       	brne	80025770 <dacifb_start_channel+0x6a>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->cr |= (AVR32_DACIFB_CR_AOE_MASK);      
8002573a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002573e:	70 08       	ld.w	r8,r8[0x0]
80025740:	10 99       	mov	r9,r8
80025742:	b1 a9       	sbr	r9,0x10
80025744:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025748:	91 09       	st.w	r8[0x0],r9
      break;
8002574a:	c1 38       	rjmp	80025770 <dacifb_start_channel+0x6a>
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->cr |= (AVR32_DACIFB_CR_BOE_MASK );
8002574c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025750:	70 08       	ld.w	r8,r8[0x0]
80025752:	10 99       	mov	r9,r8
80025754:	b1 b9       	sbr	r9,0x11
80025756:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002575a:	91 09       	st.w	r8[0x0],r9
      break;
8002575c:	c0 a8       	rjmp	80025770 <dacifb_start_channel+0x6a>
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->cr |= (AVR32_DACIFB_CR_AOE_MASK | AVR32_DACIFB_CR_BOE_MASK );
8002575e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025762:	70 08       	ld.w	r8,r8[0x0]
80025764:	10 99       	mov	r9,r8
80025766:	ea 19 00 03 	orh	r9,0x3
8002576a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002576e:	91 09       	st.w	r8[0x0],r9
      break;    
  }
  
}
80025770:	2f dd       	sub	sp,-12
80025772:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025776:	00 00       	add	r0,r0
80025778:	80 02       	ld.sh	r2,r0[0x0]
8002577a:	55 94       	stdsp	sp[0x164],r4

8002577c <dacifb_check_eoc>:


bool dacifb_check_eoc(volatile avr32_dacifb_t * dacifb, 
                      U8 channel)
{
8002577c:	eb cd 40 80 	pushm	r7,lr
80025780:	1a 97       	mov	r7,sp
80025782:	20 2d       	sub	sp,8
80025784:	ef 4c ff fc 	st.w	r7[-4],r12
80025788:	16 98       	mov	r8,r11
8002578a:	ef 68 ff f8 	st.b	r7[-8],r8
  Assert( dacifb!=NULL );
     
  // get SR register : EOC bit for channel
  return ((((dacifb->sr)&(channel<<AVR32_DACIFB_SR_DEA_OFFSET))==(channel<<AVR32_DACIFB_SR_DEA_OFFSET))? DACIFB_STATUS_COMPLETED : DACIFB_STATUS_NOT_COMPLETED);
8002578e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025792:	70 78       	ld.w	r8,r8[0x1c]
80025794:	30 18       	mov	r8,1
}
80025796:	10 9c       	mov	r12,r8
80025798:	2f ed       	sub	sp,-8
8002579a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002579e <dacifb_set_value>:

void dacifb_set_value(volatile avr32_dacifb_t * dacifb, 
                      U8 channel,
                      bool dual,
                      U32 value)
{
8002579e:	eb cd 40 80 	pushm	r7,lr
800257a2:	1a 97       	mov	r7,sp
800257a4:	20 4d       	sub	sp,16
800257a6:	ef 4c ff fc 	st.w	r7[-4],r12
800257aa:	14 98       	mov	r8,r10
800257ac:	ef 49 ff f0 	st.w	r7[-16],r9
800257b0:	16 99       	mov	r9,r11
800257b2:	ef 69 ff f8 	st.b	r7[-8],r9
800257b6:	ef 68 ff f4 	st.b	r7[-12],r8
  Assert( dacifb != NULL );

  // Set new conversion value
  switch(channel)
800257ba:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800257be:	58 28       	cp.w	r8,2
800257c0:	c0 b0       	breq	800257d6 <dacifb_set_value+0x38>
800257c2:	58 38       	cp.w	r8,3
800257c4:	c0 f0       	breq	800257e2 <dacifb_set_value+0x44>
800257c6:	58 18       	cp.w	r8,1
800257c8:	c2 01       	brne	80025808 <dacifb_set_value+0x6a>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->dr0 = (value);      
800257ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800257ce:	ee f9 ff f0 	ld.w	r9,r7[-16]
800257d2:	91 b9       	st.w	r8[0x2c],r9
      break;
800257d4:	c1 a8       	rjmp	80025808 <dacifb_set_value+0x6a>
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->dr1 = (value);
800257d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800257da:	ee f9 ff f0 	ld.w	r9,r7[-16]
800257de:	91 c9       	st.w	r8[0x30],r9
      break;
800257e0:	c1 48       	rjmp	80025808 <dacifb_set_value+0x6a>
    case DACIFB_CHANNEL_SELECTION_AB:
       if(dual==true)
800257e2:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800257e6:	30 08       	mov	r8,0
800257e8:	f0 09 18 00 	cp.b	r9,r8
800257ec:	c0 70       	breq	800257fa <dacifb_set_value+0x5c>
       {
         dacifb->dr0 = value;
800257ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800257f2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800257f6:	91 b9       	st.w	r8[0x2c],r9
800257f8:	c0 88       	rjmp	80025808 <dacifb_set_value+0x6a>
       }
       else
       {
           dacifb->dr0 = ((value&0x00FF) | ( (value&0xFF00>>16)<<16));
800257fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800257fe:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80025802:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025806:	91 b9       	st.w	r8[0x2c],r9
       }
      break;    
  }
}
80025808:	2f cd       	sub	sp,-16
8002580a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002580e <dacifb_reload_timer>:

void dacifb_reload_timer(volatile avr32_dacifb_t * dacifb,
                         U8 channel,
                         U8 timer_us,
                         U32 prescaler_clock_hz)
{
8002580e:	eb cd 40 80 	pushm	r7,lr
80025812:	1a 97       	mov	r7,sp
80025814:	20 5d       	sub	sp,20
80025816:	ef 4c ff f8 	st.w	r7[-8],r12
8002581a:	14 98       	mov	r8,r10
8002581c:	ef 49 ff ec 	st.w	r7[-20],r9
80025820:	16 99       	mov	r9,r11
80025822:	ef 69 ff f4 	st.b	r7[-12],r9
80025826:	ef 68 ff f0 	st.b	r7[-16],r8
    U32 timer;
    
    Assert( dacifb != NULL ); 
    
    timer = ( (timer_us * prescaler_clock_hz)/1000000);
8002582a:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002582e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80025832:	b1 39       	mul	r9,r8
80025834:	e0 68 de 83 	mov	r8,56963
80025838:	ea 18 43 1b 	orh	r8,0x431b
8002583c:	f2 08 06 48 	mulu.d	r8,r9,r8
80025840:	f2 08 16 12 	lsr	r8,r9,0x12
80025844:	ef 48 ff fc 	st.w	r7[-4],r8
    // Reload Timer Valuie
    switch(channel)
80025848:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002584c:	58 28       	cp.w	r8,2
8002584e:	c0 f0       	breq	8002586c <dacifb_reload_timer+0x5e>
80025850:	58 38       	cp.w	r8,3
80025852:	c1 70       	breq	80025880 <dacifb_reload_timer+0x72>
80025854:	58 18       	cp.w	r8,1
80025856:	c2 71       	brne	800258a4 <dacifb_reload_timer+0x96>
    {
      case DACIFB_CHANNEL_SELECTION_A:
           dacifb->tra = (AVR32_DACIFB_TRA_TRL_MASK)|((timer<<AVR32_DACIFB_TRA_TCD_OFFSET)&AVR32_DACIFB_TRA_TCD_MASK);      
80025858:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002585c:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80025860:	10 99       	mov	r9,r8
80025862:	bf b9       	sbr	r9,0x1f
80025864:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025868:	91 e9       	st.w	r8[0x38],r9
        break;
8002586a:	c1 d8       	rjmp	800258a4 <dacifb_reload_timer+0x96>
      case DACIFB_CHANNEL_SELECTION_B:
           dacifb->trb = (AVR32_DACIFB_TRB_TRL_MASK)|((timer<<AVR32_DACIFB_TRB_TCD_OFFSET)&AVR32_DACIFB_TRB_TCD_MASK);  
8002586c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025870:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80025874:	10 99       	mov	r9,r8
80025876:	bf b9       	sbr	r9,0x1f
80025878:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002587c:	91 f9       	st.w	r8[0x3c],r9
        break;
8002587e:	c1 38       	rjmp	800258a4 <dacifb_reload_timer+0x96>
      case DACIFB_CHANNEL_SELECTION_AB:
           dacifb->tra = (AVR32_DACIFB_TRA_TRL_MASK)|((timer<<AVR32_DACIFB_TRA_TCD_OFFSET)&AVR32_DACIFB_TRA_TCD_MASK); 
80025880:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025884:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80025888:	10 99       	mov	r9,r8
8002588a:	bf b9       	sbr	r9,0x1f
8002588c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025890:	91 e9       	st.w	r8[0x38],r9
           dacifb->trb = (AVR32_DACIFB_TRB_TRL_MASK)|((timer<<AVR32_DACIFB_TRB_TCD_OFFSET)&AVR32_DACIFB_TRB_TCD_MASK); 
80025892:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025896:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8002589a:	10 99       	mov	r9,r8
8002589c:	bf b9       	sbr	r9,0x1f
8002589e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800258a2:	91 f9       	st.w	r8[0x3c],r9
        break;    
    }    
}
800258a4:	2f bd       	sub	sp,-20
800258a6:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

800258ac <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
800258ac:	eb cd 40 80 	pushm	r7,lr
800258b0:	1a 97       	mov	r7,sp
800258b2:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800258b4:	e1 b8 00 00 	mfsr	r8,0x0
800258b8:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
800258bc:	d3 03       	ssrf	0x10

	return flags;
800258be:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800258c2:	10 9c       	mov	r12,r8
800258c4:	2f fd       	sub	sp,-4
800258c6:	e3 cd 80 80 	ldm	sp++,r7,pc

800258ca <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
800258ca:	eb cd 40 80 	pushm	r7,lr
800258ce:	1a 97       	mov	r7,sp
800258d0:	20 1d       	sub	sp,4
800258d2:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800258d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800258da:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
800258de:	2f fd       	sub	sp,-4
800258e0:	e3 cd 80 80 	ldm	sp++,r7,pc

800258e4 <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
800258e4:	eb cd 40 80 	pushm	r7,lr
800258e8:	1a 97       	mov	r7,sp
800258ea:	20 4d       	sub	sp,16
800258ec:	ef 4c ff f8 	st.w	r7[-8],r12
800258f0:	ef 4b ff f4 	st.w	r7[-12],r11
800258f4:	ef 4a ff f0 	st.w	r7[-16],r10
	int i;
	for (i = 0; i < nb_lines; i++)
800258f8:	30 08       	mov	r8,0
800258fa:	ef 48 ff fc 	st.w	r7[-4],r8
800258fe:	c2 89       	rjmp	80025b4e <eic_init+0x26a>
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80025900:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025904:	12 98       	mov	r8,r9
80025906:	a1 78       	lsl	r8,0x1
80025908:	12 08       	add	r8,r9
8002590a:	a1 78       	lsl	r8,0x1
8002590c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80025910:	f2 08 00 08 	add	r8,r9,r8
80025914:	11 99       	ld.ub	r9,r8[0x1]
80025916:	30 18       	mov	r8,1
80025918:	f0 09 18 00 	cp.b	r9,r8
8002591c:	c1 51       	brne	80025946 <eic_init+0x62>
			? (eic->mode | (1 << opt[i].eic_line))
8002591e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025922:	70 5a       	ld.w	r10,r8[0x14]
80025924:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025928:	12 98       	mov	r8,r9
8002592a:	a1 78       	lsl	r8,0x1
8002592c:	12 08       	add	r8,r9
8002592e:	a1 78       	lsl	r8,0x1
80025930:	ee f9 ff f4 	ld.w	r9,r7[-12]
80025934:	f2 08 00 08 	add	r8,r9,r8
80025938:	11 88       	ld.ub	r8,r8[0x0]
8002593a:	30 19       	mov	r9,1
8002593c:	f2 08 09 48 	lsl	r8,r9,r8
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80025940:	f5 e8 10 08 	or	r8,r10,r8
80025944:	c1 58       	rjmp	8002596e <eic_init+0x8a>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
80025946:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002594a:	70 5a       	ld.w	r10,r8[0x14]
8002594c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025950:	12 98       	mov	r8,r9
80025952:	a1 78       	lsl	r8,0x1
80025954:	12 08       	add	r8,r9
80025956:	a1 78       	lsl	r8,0x1
80025958:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002595c:	f2 08 00 08 	add	r8,r9,r8
80025960:	11 88       	ld.ub	r8,r8[0x0]
80025962:	30 19       	mov	r9,1
80025964:	f2 08 09 48 	lsl	r8,r9,r8
80025968:	5c d8       	com	r8
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
8002596a:	f5 e8 00 08 	and	r8,r10,r8
8002596e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025972:	93 58       	st.w	r9[0x14],r8
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80025974:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025978:	12 98       	mov	r8,r9
8002597a:	a1 78       	lsl	r8,0x1
8002597c:	12 08       	add	r8,r9
8002597e:	a1 78       	lsl	r8,0x1
80025980:	ee f9 ff f4 	ld.w	r9,r7[-12]
80025984:	f2 08 00 08 	add	r8,r9,r8
80025988:	11 a9       	ld.ub	r9,r8[0x2]
8002598a:	30 18       	mov	r8,1
8002598c:	f0 09 18 00 	cp.b	r9,r8
80025990:	c1 51       	brne	800259ba <eic_init+0xd6>
			? (eic->edge | (1 << opt[i].eic_line))
80025992:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025996:	70 6a       	ld.w	r10,r8[0x18]
80025998:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002599c:	12 98       	mov	r8,r9
8002599e:	a1 78       	lsl	r8,0x1
800259a0:	12 08       	add	r8,r9
800259a2:	a1 78       	lsl	r8,0x1
800259a4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800259a8:	f2 08 00 08 	add	r8,r9,r8
800259ac:	11 88       	ld.ub	r8,r8[0x0]
800259ae:	30 19       	mov	r9,1
800259b0:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
800259b4:	f5 e8 10 08 	or	r8,r10,r8
800259b8:	c1 58       	rjmp	800259e2 <eic_init+0xfe>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
800259ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800259be:	70 6a       	ld.w	r10,r8[0x18]
800259c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800259c4:	12 98       	mov	r8,r9
800259c6:	a1 78       	lsl	r8,0x1
800259c8:	12 08       	add	r8,r9
800259ca:	a1 78       	lsl	r8,0x1
800259cc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800259d0:	f2 08 00 08 	add	r8,r9,r8
800259d4:	11 88       	ld.ub	r8,r8[0x0]
800259d6:	30 19       	mov	r9,1
800259d8:	f2 08 09 48 	lsl	r8,r9,r8
800259dc:	5c d8       	com	r8
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
800259de:	f5 e8 00 08 	and	r8,r10,r8
800259e2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800259e6:	93 68       	st.w	r9[0x18],r8
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
800259e8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800259ec:	12 98       	mov	r8,r9
800259ee:	a1 78       	lsl	r8,0x1
800259f0:	12 08       	add	r8,r9
800259f2:	a1 78       	lsl	r8,0x1
800259f4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800259f8:	f2 08 00 08 	add	r8,r9,r8
800259fc:	11 b9       	ld.ub	r9,r8[0x3]
800259fe:	30 18       	mov	r8,1
80025a00:	f0 09 18 00 	cp.b	r9,r8
80025a04:	c1 51       	brne	80025a2e <eic_init+0x14a>
			? (eic->level | (1 << opt[i].eic_line))
80025a06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025a0a:	70 7a       	ld.w	r10,r8[0x1c]
80025a0c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025a10:	12 98       	mov	r8,r9
80025a12:	a1 78       	lsl	r8,0x1
80025a14:	12 08       	add	r8,r9
80025a16:	a1 78       	lsl	r8,0x1
80025a18:	ee f9 ff f4 	ld.w	r9,r7[-12]
80025a1c:	f2 08 00 08 	add	r8,r9,r8
80025a20:	11 88       	ld.ub	r8,r8[0x0]
80025a22:	30 19       	mov	r9,1
80025a24:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80025a28:	f5 e8 10 08 	or	r8,r10,r8
80025a2c:	c1 58       	rjmp	80025a56 <eic_init+0x172>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
80025a2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025a32:	70 7a       	ld.w	r10,r8[0x1c]
80025a34:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025a38:	12 98       	mov	r8,r9
80025a3a:	a1 78       	lsl	r8,0x1
80025a3c:	12 08       	add	r8,r9
80025a3e:	a1 78       	lsl	r8,0x1
80025a40:	ee f9 ff f4 	ld.w	r9,r7[-12]
80025a44:	f2 08 00 08 	add	r8,r9,r8
80025a48:	11 88       	ld.ub	r8,r8[0x0]
80025a4a:	30 19       	mov	r9,1
80025a4c:	f2 08 09 48 	lsl	r8,r9,r8
80025a50:	5c d8       	com	r8
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80025a52:	f5 e8 00 08 	and	r8,r10,r8
80025a56:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025a5a:	93 78       	st.w	r9[0x1c],r8
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80025a5c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025a60:	12 98       	mov	r8,r9
80025a62:	a1 78       	lsl	r8,0x1
80025a64:	12 08       	add	r8,r9
80025a66:	a1 78       	lsl	r8,0x1
80025a68:	ee f9 ff f4 	ld.w	r9,r7[-12]
80025a6c:	f2 08 00 08 	add	r8,r9,r8
80025a70:	11 c9       	ld.ub	r9,r8[0x4]
80025a72:	30 18       	mov	r8,1
80025a74:	f0 09 18 00 	cp.b	r9,r8
80025a78:	c1 51       	brne	80025aa2 <eic_init+0x1be>
			? (eic->filter | (1 << opt[i].eic_line))
80025a7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025a7e:	70 8a       	ld.w	r10,r8[0x20]
80025a80:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025a84:	12 98       	mov	r8,r9
80025a86:	a1 78       	lsl	r8,0x1
80025a88:	12 08       	add	r8,r9
80025a8a:	a1 78       	lsl	r8,0x1
80025a8c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80025a90:	f2 08 00 08 	add	r8,r9,r8
80025a94:	11 88       	ld.ub	r8,r8[0x0]
80025a96:	30 19       	mov	r9,1
80025a98:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80025a9c:	f5 e8 10 08 	or	r8,r10,r8
80025aa0:	c1 58       	rjmp	80025aca <eic_init+0x1e6>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
80025aa2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025aa6:	70 8a       	ld.w	r10,r8[0x20]
80025aa8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025aac:	12 98       	mov	r8,r9
80025aae:	a1 78       	lsl	r8,0x1
80025ab0:	12 08       	add	r8,r9
80025ab2:	a1 78       	lsl	r8,0x1
80025ab4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80025ab8:	f2 08 00 08 	add	r8,r9,r8
80025abc:	11 88       	ld.ub	r8,r8[0x0]
80025abe:	30 19       	mov	r9,1
80025ac0:	f2 08 09 48 	lsl	r8,r9,r8
80025ac4:	5c d8       	com	r8
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80025ac6:	f5 e8 00 08 	and	r8,r10,r8
80025aca:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025ace:	93 88       	st.w	r9[0x20],r8
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80025ad0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025ad4:	12 98       	mov	r8,r9
80025ad6:	a1 78       	lsl	r8,0x1
80025ad8:	12 08       	add	r8,r9
80025ada:	a1 78       	lsl	r8,0x1
80025adc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80025ae0:	f2 08 00 08 	add	r8,r9,r8
80025ae4:	11 d9       	ld.ub	r9,r8[0x5]
80025ae6:	30 18       	mov	r8,1
80025ae8:	f0 09 18 00 	cp.b	r9,r8
80025aec:	c1 51       	brne	80025b16 <eic_init+0x232>
			? (eic->async | (1 << opt[i].eic_line))
80025aee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025af2:	70 aa       	ld.w	r10,r8[0x28]
80025af4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025af8:	12 98       	mov	r8,r9
80025afa:	a1 78       	lsl	r8,0x1
80025afc:	12 08       	add	r8,r9
80025afe:	a1 78       	lsl	r8,0x1
80025b00:	ee f9 ff f4 	ld.w	r9,r7[-12]
80025b04:	f2 08 00 08 	add	r8,r9,r8
80025b08:	11 88       	ld.ub	r8,r8[0x0]
80025b0a:	30 19       	mov	r9,1
80025b0c:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80025b10:	f5 e8 10 08 	or	r8,r10,r8
80025b14:	c1 58       	rjmp	80025b3e <eic_init+0x25a>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
80025b16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025b1a:	70 aa       	ld.w	r10,r8[0x28]
80025b1c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025b20:	12 98       	mov	r8,r9
80025b22:	a1 78       	lsl	r8,0x1
80025b24:	12 08       	add	r8,r9
80025b26:	a1 78       	lsl	r8,0x1
80025b28:	ee f9 ff f4 	ld.w	r9,r7[-12]
80025b2c:	f2 08 00 08 	add	r8,r9,r8
80025b30:	11 88       	ld.ub	r8,r8[0x0]
80025b32:	30 19       	mov	r9,1
80025b34:	f2 08 09 48 	lsl	r8,r9,r8
80025b38:	5c d8       	com	r8
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80025b3a:	f5 e8 00 08 	and	r8,r10,r8
80025b3e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025b42:	93 a8       	st.w	r9[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
80025b44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025b48:	2f f8       	sub	r8,-1
80025b4a:	ef 48 ff fc 	st.w	r7[-4],r8
80025b4e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025b52:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025b56:	10 39       	cp.w	r9,r8
80025b58:	fe 93 fe d4 	brlo	80025900 <eic_init+0x1c>
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
	}
}
80025b5c:	2f cd       	sub	sp,-16
80025b5e:	e3 cd 80 80 	ldm	sp++,r7,pc

80025b62 <eic_enable_lines>:

void eic_enable_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
80025b62:	eb cd 40 80 	pushm	r7,lr
80025b66:	1a 97       	mov	r7,sp
80025b68:	20 2d       	sub	sp,8
80025b6a:	ef 4c ff fc 	st.w	r7[-4],r12
80025b6e:	ef 4b ff f8 	st.w	r7[-8],r11
	eic->en = mask_lines;
80025b72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025b76:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025b7a:	91 c9       	st.w	r8[0x30],r9
}
80025b7c:	2f ed       	sub	sp,-8
80025b7e:	e3 cd 80 80 	ldm	sp++,r7,pc

80025b82 <eic_enable_line>:

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
80025b82:	eb cd 40 80 	pushm	r7,lr
80025b86:	1a 97       	mov	r7,sp
80025b88:	20 2d       	sub	sp,8
80025b8a:	ef 4c ff fc 	st.w	r7[-4],r12
80025b8e:	ef 4b ff f8 	st.w	r7[-8],r11
	// Enable line line_number
	eic->en = 1 << line_number;
80025b92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025b96:	30 19       	mov	r9,1
80025b98:	f2 08 09 48 	lsl	r8,r9,r8
80025b9c:	10 99       	mov	r9,r8
80025b9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025ba2:	91 c9       	st.w	r8[0x30],r9
}
80025ba4:	2f ed       	sub	sp,-8
80025ba6:	e3 cd 80 80 	ldm	sp++,r7,pc

80025baa <eic_disable_lines>:

void eic_disable_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
80025baa:	eb cd 40 80 	pushm	r7,lr
80025bae:	1a 97       	mov	r7,sp
80025bb0:	20 2d       	sub	sp,8
80025bb2:	ef 4c ff fc 	st.w	r7[-4],r12
80025bb6:	ef 4b ff f8 	st.w	r7[-8],r11
	eic->dis = mask_lines;
80025bba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025bbe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025bc2:	91 d9       	st.w	r8[0x34],r9
}
80025bc4:	2f ed       	sub	sp,-8
80025bc6:	e3 cd 80 80 	ldm	sp++,r7,pc

80025bca <eic_disable_line>:

void eic_disable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
80025bca:	eb cd 40 80 	pushm	r7,lr
80025bce:	1a 97       	mov	r7,sp
80025bd0:	20 2d       	sub	sp,8
80025bd2:	ef 4c ff fc 	st.w	r7[-4],r12
80025bd6:	ef 4b ff f8 	st.w	r7[-8],r11
	// Disable line line_number
	eic->dis = 1 << line_number;
80025bda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025bde:	30 19       	mov	r9,1
80025be0:	f2 08 09 48 	lsl	r8,r9,r8
80025be4:	10 99       	mov	r9,r8
80025be6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025bea:	91 d9       	st.w	r8[0x34],r9
}
80025bec:	2f ed       	sub	sp,-8
80025bee:	e3 cd 80 80 	ldm	sp++,r7,pc

80025bf2 <eic_is_line_enabled>:

bool eic_is_line_enabled(volatile avr32_eic_t *eic, uint32_t line_number)
{
80025bf2:	eb cd 40 80 	pushm	r7,lr
80025bf6:	1a 97       	mov	r7,sp
80025bf8:	20 2d       	sub	sp,8
80025bfa:	ef 4c ff fc 	st.w	r7[-4],r12
80025bfe:	ef 4b ff f8 	st.w	r7[-8],r11
	return (eic->ctrl & (1 << line_number)) != 0;
80025c02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025c06:	70 e9       	ld.w	r9,r8[0x38]
80025c08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025c0c:	30 1a       	mov	r10,1
80025c0e:	f4 08 09 48 	lsl	r8,r10,r8
80025c12:	f3 e8 00 08 	and	r8,r9,r8
80025c16:	5f 18       	srne	r8
80025c18:	5c 58       	castu.b	r8
}
80025c1a:	10 9c       	mov	r12,r8
80025c1c:	2f ed       	sub	sp,-8
80025c1e:	e3 cd 80 80 	ldm	sp++,r7,pc

80025c22 <eic_enable_interrupt_lines>:

void eic_enable_interrupt_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
80025c22:	eb cd 40 80 	pushm	r7,lr
80025c26:	1a 97       	mov	r7,sp
80025c28:	20 2d       	sub	sp,8
80025c2a:	ef 4c ff fc 	st.w	r7[-4],r12
80025c2e:	ef 4b ff f8 	st.w	r7[-8],r11
	eic->ier = mask_lines;
80025c32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025c36:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025c3a:	91 09       	st.w	r8[0x0],r9
}
80025c3c:	2f ed       	sub	sp,-8
80025c3e:	e3 cd 80 80 	ldm	sp++,r7,pc

80025c42 <eic_enable_interrupt_line>:

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
80025c42:	eb cd 40 80 	pushm	r7,lr
80025c46:	1a 97       	mov	r7,sp
80025c48:	20 2d       	sub	sp,8
80025c4a:	ef 4c ff fc 	st.w	r7[-4],r12
80025c4e:	ef 4b ff f8 	st.w	r7[-8],r11
	// Enable line line_number
	eic->ier = 1 << line_number;
80025c52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025c56:	30 19       	mov	r9,1
80025c58:	f2 08 09 48 	lsl	r8,r9,r8
80025c5c:	10 99       	mov	r9,r8
80025c5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025c62:	91 09       	st.w	r8[0x0],r9
}
80025c64:	2f ed       	sub	sp,-8
80025c66:	e3 cd 80 80 	ldm	sp++,r7,pc

80025c6a <eic_disable_interrupt_lines>:

void eic_disable_interrupt_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
80025c6a:	eb cd 40 c0 	pushm	r6-r7,lr
80025c6e:	1a 97       	mov	r7,sp
80025c70:	20 3d       	sub	sp,12
80025c72:	48 d6       	lddpc	r6,80025ca4 <eic_disable_interrupt_lines+0x3a>
80025c74:	1e 26       	rsub	r6,pc
80025c76:	ef 4c ff f8 	st.w	r7[-8],r12
80025c7a:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
80025c7e:	c1 7e       	rcall	800258ac <cpu_irq_save>
80025c80:	18 98       	mov	r8,r12
80025c82:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->idr = mask_lines;
80025c86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025c8a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80025c8e:	91 19       	st.w	r8[0x4],r9
	eic->imr;
80025c90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025c94:	70 28       	ld.w	r8,r8[0x8]
	cpu_irq_restore(flags);
80025c96:	ee fc ff fc 	ld.w	r12,r7[-4]
80025c9a:	c1 8e       	rcall	800258ca <cpu_irq_restore>
}
80025c9c:	2f dd       	sub	sp,-12
80025c9e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025ca2:	00 00       	add	r0,r0
80025ca4:	80 02       	ld.sh	r2,r0[0x0]
80025ca6:	5a f8       	cp.w	r8,-17

80025ca8 <eic_disable_interrupt_line>:

void eic_disable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
80025ca8:	eb cd 40 c0 	pushm	r6-r7,lr
80025cac:	1a 97       	mov	r7,sp
80025cae:	20 3d       	sub	sp,12
80025cb0:	48 f6       	lddpc	r6,80025cec <eic_disable_interrupt_line+0x44>
80025cb2:	1e 26       	rsub	r6,pc
80025cb4:	ef 4c ff f8 	st.w	r7[-8],r12
80025cb8:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
80025cbc:	fe b0 fd f8 	rcall	800258ac <cpu_irq_save>
80025cc0:	18 98       	mov	r8,r12
80025cc2:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->idr = 1 << line_number;
80025cc6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80025cca:	30 19       	mov	r9,1
80025ccc:	f2 08 09 48 	lsl	r8,r9,r8
80025cd0:	10 99       	mov	r9,r8
80025cd2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025cd6:	91 19       	st.w	r8[0x4],r9
	eic->imr;
80025cd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025cdc:	70 28       	ld.w	r8,r8[0x8]
	cpu_irq_restore(flags);
80025cde:	ee fc ff fc 	ld.w	r12,r7[-4]
80025ce2:	fe b0 fd f4 	rcall	800258ca <cpu_irq_restore>
}
80025ce6:	2f dd       	sub	sp,-12
80025ce8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025cec:	80 02       	ld.sh	r2,r0[0x0]
80025cee:	5b 36       	cp.w	r6,-13

80025cf0 <eic_is_interrupt_line_enabled>:

bool eic_is_interrupt_line_enabled(volatile avr32_eic_t *eic, uint32_t line_number)
{
80025cf0:	eb cd 40 80 	pushm	r7,lr
80025cf4:	1a 97       	mov	r7,sp
80025cf6:	20 2d       	sub	sp,8
80025cf8:	ef 4c ff fc 	st.w	r7[-4],r12
80025cfc:	ef 4b ff f8 	st.w	r7[-8],r11
	return (eic->imr & (1 << line_number)) != 0;
80025d00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025d04:	70 29       	ld.w	r9,r8[0x8]
80025d06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025d0a:	30 1a       	mov	r10,1
80025d0c:	f4 08 09 48 	lsl	r8,r10,r8
80025d10:	f3 e8 00 08 	and	r8,r9,r8
80025d14:	5f 18       	srne	r8
80025d16:	5c 58       	castu.b	r8
}
80025d18:	10 9c       	mov	r12,r8
80025d1a:	2f ed       	sub	sp,-8
80025d1c:	e3 cd 80 80 	ldm	sp++,r7,pc

80025d20 <eic_clear_interrupt_lines>:

void eic_clear_interrupt_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
80025d20:	eb cd 40 c0 	pushm	r6-r7,lr
80025d24:	1a 97       	mov	r7,sp
80025d26:	20 3d       	sub	sp,12
80025d28:	48 d6       	lddpc	r6,80025d5c <eic_clear_interrupt_lines+0x3c>
80025d2a:	1e 26       	rsub	r6,pc
80025d2c:	ef 4c ff f8 	st.w	r7[-8],r12
80025d30:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
80025d34:	fe b0 fd bc 	rcall	800258ac <cpu_irq_save>
80025d38:	18 98       	mov	r8,r12
80025d3a:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->icr = mask_lines;
80025d3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025d42:	ee f9 ff f4 	ld.w	r9,r7[-12]
80025d46:	91 49       	st.w	r8[0x10],r9
	eic->isr;
80025d48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025d4c:	70 38       	ld.w	r8,r8[0xc]
	cpu_irq_restore(flags);
80025d4e:	ee fc ff fc 	ld.w	r12,r7[-4]
80025d52:	fe b0 fd bc 	rcall	800258ca <cpu_irq_restore>
}
80025d56:	2f dd       	sub	sp,-12
80025d58:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025d5c:	80 02       	ld.sh	r2,r0[0x0]
80025d5e:	5b ae       	cp.w	lr,-6

80025d60 <eic_clear_interrupt_line>:

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
80025d60:	eb cd 40 c0 	pushm	r6-r7,lr
80025d64:	1a 97       	mov	r7,sp
80025d66:	20 3d       	sub	sp,12
80025d68:	48 f6       	lddpc	r6,80025da4 <eic_clear_interrupt_line+0x44>
80025d6a:	1e 26       	rsub	r6,pc
80025d6c:	ef 4c ff f8 	st.w	r7[-8],r12
80025d70:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
80025d74:	fe b0 fd 9c 	rcall	800258ac <cpu_irq_save>
80025d78:	18 98       	mov	r8,r12
80025d7a:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->icr = 1 << line_number;
80025d7e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80025d82:	30 19       	mov	r9,1
80025d84:	f2 08 09 48 	lsl	r8,r9,r8
80025d88:	10 99       	mov	r9,r8
80025d8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025d8e:	91 49       	st.w	r8[0x10],r9
	eic->isr;
80025d90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025d94:	70 38       	ld.w	r8,r8[0xc]
	cpu_irq_restore(flags);
80025d96:	ee fc ff fc 	ld.w	r12,r7[-4]
80025d9a:	fe b0 fd 98 	rcall	800258ca <cpu_irq_restore>
}
80025d9e:	2f dd       	sub	sp,-12
80025da0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025da4:	80 02       	ld.sh	r2,r0[0x0]
80025da6:	5b ee       	cp.w	lr,-2

80025da8 <eic_is_interrupt_line_pending>:

bool eic_is_interrupt_line_pending(volatile avr32_eic_t *eic, uint32_t line_number)
{
80025da8:	eb cd 40 80 	pushm	r7,lr
80025dac:	1a 97       	mov	r7,sp
80025dae:	20 2d       	sub	sp,8
80025db0:	ef 4c ff fc 	st.w	r7[-4],r12
80025db4:	ef 4b ff f8 	st.w	r7[-8],r11
	return (eic->isr & (1 << line_number)) != 0;
80025db8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025dbc:	70 39       	ld.w	r9,r8[0xc]
80025dbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025dc2:	30 1a       	mov	r10,1
80025dc4:	f4 08 09 48 	lsl	r8,r10,r8
80025dc8:	f3 e8 00 08 	and	r8,r9,r8
80025dcc:	5f 18       	srne	r8
80025dce:	5c 58       	castu.b	r8
}
80025dd0:	10 9c       	mov	r12,r8
80025dd2:	2f ed       	sub	sp,-8
80025dd4:	e3 cd 80 80 	ldm	sp++,r7,pc

80025dd8 <flashc_get_flash_size>:
 */
//! @{


unsigned int flashc_get_flash_size(void)
{
80025dd8:	eb cd 40 c0 	pushm	r6-r7,lr
80025ddc:	1a 97       	mov	r7,sp
80025dde:	48 86       	lddpc	r6,80025dfc <flashc_get_flash_size+0x24>
80025de0:	1e 26       	rsub	r6,pc
     512 << 10,
     768 << 10,
    1024 << 10,
    2048 << 10      
  };
  return FLASH_SIZE[(AVR32_FLASHC.pr & AVR32_FLASHC_PR_FSZ_MASK) >> AVR32_FLASHC_PR_FSZ_OFFSET];
80025de2:	fe 68 00 00 	mov	r8,-131072
80025de6:	70 38       	ld.w	r8,r8[0xc]
80025de8:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
80025dec:	ec f8 08 c8 	ld.w	r8,r6[2248]
80025df0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
     768 << 10,
    1024 << 10
  };
  return FLASH_SIZE[(AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FSZ_MASK) >> AVR32_FLASHC_FSR_FSZ_OFFSET];
#endif  
}
80025df4:	10 9c       	mov	r12,r8
80025df6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025dfa:	00 00       	add	r0,r0
80025dfc:	80 02       	ld.sh	r2,r0[0x0]
80025dfe:	5c 64       	casts.b	r4

80025e00 <flashc_get_page_count>:


unsigned int flashc_get_page_count(void)
{
80025e00:	eb cd 40 c0 	pushm	r6-r7,lr
80025e04:	1a 97       	mov	r7,sp
80025e06:	48 56       	lddpc	r6,80025e18 <flashc_get_page_count+0x18>
80025e08:	1e 26       	rsub	r6,pc
  return flashc_get_flash_size() / AVR32_FLASHC_PAGE_SIZE;
80025e0a:	f0 16 00 ce 	mcall	r6[824]
80025e0e:	18 98       	mov	r8,r12
80025e10:	a9 98       	lsr	r8,0x9
}
80025e12:	10 9c       	mov	r12,r8
80025e14:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025e18:	80 02       	ld.sh	r2,r0[0x0]
80025e1a:	5c 8c       	casts.h	r12

80025e1c <flashc_get_page_count_per_region>:


unsigned int flashc_get_page_count_per_region(void)
{
80025e1c:	eb cd 40 c0 	pushm	r6-r7,lr
80025e20:	1a 97       	mov	r7,sp
80025e22:	48 56       	lddpc	r6,80025e34 <flashc_get_page_count_per_region+0x18>
80025e24:	1e 26       	rsub	r6,pc
  return flashc_get_page_count() / AVR32_FLASHC_REGIONS;
80025e26:	f0 16 01 0c 	mcall	r6[1072]
80025e2a:	18 98       	mov	r8,r12
80025e2c:	a5 88       	lsr	r8,0x4
}
80025e2e:	10 9c       	mov	r12,r8
80025e30:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025e34:	80 02       	ld.sh	r2,r0[0x0]
80025e36:	5c a8       	swap.h	r8

80025e38 <flashc_get_page_region>:


unsigned int flashc_get_page_region(int page_number)
{
80025e38:	eb cd 40 e0 	pushm	r5-r7,lr
80025e3c:	1a 97       	mov	r7,sp
80025e3e:	20 1d       	sub	sp,4
80025e40:	48 c6       	lddpc	r6,80025e70 <flashc_get_page_region+0x38>
80025e42:	1e 26       	rsub	r6,pc
80025e44:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((page_number >= 0) ? page_number : flashc_get_page_number()) / flashc_get_page_count_per_region();
80025e48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025e4c:	58 08       	cp.w	r8,0
80025e4e:	c0 45       	brlt	80025e56 <flashc_get_page_region+0x1e>
80025e50:	ee f5 ff fc 	ld.w	r5,r7[-4]
80025e54:	c0 58       	rjmp	80025e5e <flashc_get_page_region+0x26>
80025e56:	f0 16 01 92 	mcall	r6[1608]
80025e5a:	18 98       	mov	r8,r12
80025e5c:	10 95       	mov	r5,r8
80025e5e:	f0 16 01 1b 	mcall	r6[1132]
80025e62:	18 98       	mov	r8,r12
80025e64:	ea 08 0d 08 	divu	r8,r5,r8
}
80025e68:	10 9c       	mov	r12,r8
80025e6a:	2f fd       	sub	sp,-4
80025e6c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80025e70:	80 02       	ld.sh	r2,r0[0x0]
80025e72:	5c c6       	swap.bh	r6

80025e74 <flashc_get_region_first_page_number>:


unsigned int flashc_get_region_first_page_number(unsigned int region)
{
80025e74:	eb cd 40 c0 	pushm	r6-r7,lr
80025e78:	1a 97       	mov	r7,sp
80025e7a:	20 1d       	sub	sp,4
80025e7c:	48 86       	lddpc	r6,80025e9c <flashc_get_region_first_page_number+0x28>
80025e7e:	1e 26       	rsub	r6,pc
80025e80:	ef 4c ff fc 	st.w	r7[-4],r12
  return region * flashc_get_page_count_per_region();
80025e84:	f0 16 01 1b 	mcall	r6[1132]
80025e88:	18 99       	mov	r9,r12
80025e8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025e8e:	f2 08 02 48 	mul	r8,r9,r8
}
80025e92:	10 9c       	mov	r12,r8
80025e94:	2f fd       	sub	sp,-4
80025e96:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025e9a:	00 00       	add	r0,r0
80025e9c:	80 02       	ld.sh	r2,r0[0x0]
80025e9e:	5d 02       	ror	r2

80025ea0 <flashc_get_wait_state>:
 */
//! @{


unsigned int flashc_get_wait_state(void)
{
80025ea0:	eb cd 40 80 	pushm	r7,lr
80025ea4:	1a 97       	mov	r7,sp
  return (AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FWS_MASK) >> AVR32_FLASHC_FCR_FWS_OFFSET;
80025ea6:	fe 68 00 00 	mov	r8,-131072
80025eaa:	70 08       	ld.w	r8,r8[0x0]
80025eac:	e2 18 00 40 	andl	r8,0x40,COH
80025eb0:	a7 88       	lsr	r8,0x6
}
80025eb2:	10 9c       	mov	r12,r8
80025eb4:	e3 cd 80 80 	ldm	sp++,r7,pc

80025eb8 <flashc_set_wait_state>:


void flashc_set_wait_state(unsigned int wait_state)
{
80025eb8:	eb cd 40 80 	pushm	r7,lr
80025ebc:	1a 97       	mov	r7,sp
80025ebe:	20 2d       	sub	sp,8
80025ec0:	ef 4c ff f8 	st.w	r7[-8],r12
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80025ec4:	fe 68 00 00 	mov	r8,-131072
80025ec8:	70 08       	ld.w	r8,r8[0x0]
80025eca:	30 09       	mov	r9,0
80025ecc:	ef 49 ff fc 	st.w	r7[-4],r9
80025ed0:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcr.FCR.fws = wait_state;
80025ed4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025ed8:	5c 58       	castu.b	r8
80025eda:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80025ede:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80025ee2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025ee6:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
80025eea:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80025eee:	fe 68 00 00 	mov	r8,-131072
80025ef2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025ef6:	91 09       	st.w	r8[0x0],r9
}
80025ef8:	2f ed       	sub	sp,-8
80025efa:	e3 cd 80 80 	ldm	sp++,r7,pc

80025efe <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80025efe:	eb cd 40 c0 	pushm	r6-r7,lr
80025f02:	1a 97       	mov	r7,sp
80025f04:	20 1d       	sub	sp,4
80025f06:	48 c6       	lddpc	r6,80025f34 <flashc_set_bus_freq+0x36>
80025f08:	1e 26       	rsub	r6,pc
80025f0a:	ef 4c ff fc 	st.w	r7[-4],r12
  if(cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ)
80025f0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025f12:	e0 69 8a 3f 	mov	r9,35391
80025f16:	ea 19 01 f7 	orh	r9,0x1f7
80025f1a:	12 38       	cp.w	r8,r9
80025f1c:	e0 88 00 06 	brls	80025f28 <flashc_set_bus_freq+0x2a>
  {
    // Set 1 WS.
    flashc_set_wait_state(1);
80025f20:	30 1c       	mov	r12,1
80025f22:	f0 16 00 a2 	mcall	r6[648]
80025f26:	c0 48       	rjmp	80025f2e <flashc_set_bus_freq+0x30>
  }
  else
  {
    // Set 0 WS.
    flashc_set_wait_state(0);
80025f28:	30 0c       	mov	r12,0
80025f2a:	f0 16 00 a2 	mcall	r6[648]
  }
}
80025f2e:	2f fd       	sub	sp,-4
80025f30:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025f34:	80 02       	ld.sh	r2,r0[0x0]
80025f36:	5d 8c       	*unknown*

80025f38 <flashc_is_ready_int_enabled>:

bool flashc_is_ready_int_enabled(void)
{
80025f38:	eb cd 40 80 	pushm	r7,lr
80025f3c:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FRDY_MASK) != 0);
80025f3e:	fe 68 00 00 	mov	r8,-131072
80025f42:	70 08       	ld.w	r8,r8[0x0]
80025f44:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80025f48:	5c 58       	castu.b	r8
}
80025f4a:	10 9c       	mov	r12,r8
80025f4c:	e3 cd 80 80 	ldm	sp++,r7,pc

80025f50 <flashc_enable_ready_int>:


void flashc_enable_ready_int(bool enable)
{
80025f50:	eb cd 40 80 	pushm	r7,lr
80025f54:	1a 97       	mov	r7,sp
80025f56:	20 2d       	sub	sp,8
80025f58:	18 98       	mov	r8,r12
80025f5a:	ef 68 ff f8 	st.b	r7[-8],r8
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80025f5e:	fe 68 00 00 	mov	r8,-131072
80025f62:	70 08       	ld.w	r8,r8[0x0]
80025f64:	30 09       	mov	r9,0
80025f66:	ef 49 ff fc 	st.w	r7[-4],r9
80025f6a:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcr.FCR.frdy = (enable != false);
80025f6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025f72:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80025f76:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80025f7a:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80025f7e:	fe 68 00 00 	mov	r8,-131072
80025f82:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025f86:	91 09       	st.w	r8[0x0],r9
}
80025f88:	2f ed       	sub	sp,-8
80025f8a:	e3 cd 80 80 	ldm	sp++,r7,pc

80025f8e <flashc_is_lock_error_int_enabled>:


bool flashc_is_lock_error_int_enabled(void)
{
80025f8e:	eb cd 40 80 	pushm	r7,lr
80025f92:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_LOCKE_MASK) != 0);
80025f94:	fe 68 00 00 	mov	r8,-131072
80025f98:	70 08       	ld.w	r8,r8[0x0]
80025f9a:	e2 18 00 04 	andl	r8,0x4,COH
80025f9e:	5f 18       	srne	r8
80025fa0:	5c 58       	castu.b	r8
}
80025fa2:	10 9c       	mov	r12,r8
80025fa4:	e3 cd 80 80 	ldm	sp++,r7,pc

80025fa8 <flashc_enable_lock_error_int>:


void flashc_enable_lock_error_int(bool enable)
{
80025fa8:	eb cd 40 80 	pushm	r7,lr
80025fac:	1a 97       	mov	r7,sp
80025fae:	20 2d       	sub	sp,8
80025fb0:	18 98       	mov	r8,r12
80025fb2:	ef 68 ff f8 	st.b	r7[-8],r8
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80025fb6:	fe 68 00 00 	mov	r8,-131072
80025fba:	70 08       	ld.w	r8,r8[0x0]
80025fbc:	30 09       	mov	r9,0
80025fbe:	ef 49 ff fc 	st.w	r7[-4],r9
80025fc2:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcr.FCR.locke = (enable != false);
80025fc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025fca:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80025fce:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
80025fd2:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80025fd6:	fe 68 00 00 	mov	r8,-131072
80025fda:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025fde:	91 09       	st.w	r8[0x0],r9
}
80025fe0:	2f ed       	sub	sp,-8
80025fe2:	e3 cd 80 80 	ldm	sp++,r7,pc

80025fe6 <flashc_is_prog_error_int_enabled>:


bool flashc_is_prog_error_int_enabled(void)
{
80025fe6:	eb cd 40 80 	pushm	r7,lr
80025fea:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_PROGE_MASK) != 0);
80025fec:	fe 68 00 00 	mov	r8,-131072
80025ff0:	70 08       	ld.w	r8,r8[0x0]
80025ff2:	e2 18 00 08 	andl	r8,0x8,COH
80025ff6:	5f 18       	srne	r8
80025ff8:	5c 58       	castu.b	r8
}
80025ffa:	10 9c       	mov	r12,r8
80025ffc:	e3 cd 80 80 	ldm	sp++,r7,pc

80026000 <flashc_enable_prog_error_int>:


void flashc_enable_prog_error_int(bool enable)
{
80026000:	eb cd 40 80 	pushm	r7,lr
80026004:	1a 97       	mov	r7,sp
80026006:	20 2d       	sub	sp,8
80026008:	18 98       	mov	r8,r12
8002600a:	ef 68 ff f8 	st.b	r7[-8],r8
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
8002600e:	fe 68 00 00 	mov	r8,-131072
80026012:	70 08       	ld.w	r8,r8[0x0]
80026014:	30 09       	mov	r9,0
80026016:	ef 49 ff fc 	st.w	r7[-4],r9
8002601a:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcr.FCR.proge = (enable != false);
8002601e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026022:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80026026:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
8002602a:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8002602e:	fe 68 00 00 	mov	r8,-131072
80026032:	ee f9 ff fc 	ld.w	r9,r7[-4]
80026036:	91 09       	st.w	r8[0x0],r9
}
80026038:	2f ed       	sub	sp,-8
8002603a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002603e <flashc_is_ready>:
 */
//! @{


bool flashc_is_ready(void)
{
8002603e:	eb cd 40 80 	pushm	r7,lr
80026042:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80026044:	fe 68 00 00 	mov	r8,-131072
80026048:	70 28       	ld.w	r8,r8[0x8]
8002604a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002604e:	5c 58       	castu.b	r8
}
80026050:	10 9c       	mov	r12,r8
80026052:	e3 cd 80 80 	ldm	sp++,r7,pc

80026056 <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
80026056:	eb cd 40 c0 	pushm	r6-r7,lr
8002605a:	1a 97       	mov	r7,sp
8002605c:	48 66       	lddpc	r6,80026074 <flashc_default_wait_until_ready+0x1e>
8002605e:	1e 26       	rsub	r6,pc
  while (!flashc_is_ready());
80026060:	f0 16 01 b4 	mcall	r6[1744]
80026064:	18 98       	mov	r8,r12
80026066:	ec 18 00 01 	eorl	r8,0x1
8002606a:	5c 58       	castu.b	r8
8002606c:	cf a1       	brne	80026060 <flashc_default_wait_until_ready+0xa>
}
8002606e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026072:	00 00       	add	r0,r0
80026074:	80 02       	ld.sh	r2,r0[0x0]
80026076:	5e e2       	retqs	r2

80026078 <flashc_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
80026078:	eb cd 40 80 	pushm	r7,lr
8002607c:	1a 97       	mov	r7,sp
  return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
8002607e:	fe 68 00 00 	mov	r8,-131072
80026082:	70 28       	ld.w	r8,r8[0x8]
80026084:	e2 18 00 0c 	andl	r8,0xc,COH
                             AVR32_FLASHC_FSR_PROGE_MASK);
}
80026088:	10 9c       	mov	r12,r8
8002608a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002608e <flashc_is_lock_error>:
//! by a function.
static unsigned int flashc_error_status = 0;


bool flashc_is_lock_error(void)
{
8002608e:	eb cd 40 c0 	pushm	r6-r7,lr
80026092:	1a 97       	mov	r7,sp
80026094:	48 66       	lddpc	r6,800260ac <flashc_is_lock_error+0x1e>
80026096:	1e 26       	rsub	r6,pc
  return ((flashc_error_status & AVR32_FLASHC_FSR_LOCKE_MASK) != 0);
80026098:	ec f8 00 54 	ld.w	r8,r6[84]
8002609c:	70 08       	ld.w	r8,r8[0x0]
8002609e:	e2 18 00 04 	andl	r8,0x4,COH
800260a2:	5f 18       	srne	r8
800260a4:	5c 58       	castu.b	r8
}
800260a6:	10 9c       	mov	r12,r8
800260a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800260ac:	80 02       	ld.sh	r2,r0[0x0]
800260ae:	5f 1a       	srne	r10

800260b0 <flashc_is_programming_error>:


bool flashc_is_programming_error(void)
{
800260b0:	eb cd 40 c0 	pushm	r6-r7,lr
800260b4:	1a 97       	mov	r7,sp
800260b6:	48 76       	lddpc	r6,800260d0 <flashc_is_programming_error+0x20>
800260b8:	1e 26       	rsub	r6,pc
  return ((flashc_error_status & AVR32_FLASHC_FSR_PROGE_MASK) != 0);
800260ba:	ec f8 00 54 	ld.w	r8,r6[84]
800260be:	70 08       	ld.w	r8,r8[0x0]
800260c0:	e2 18 00 08 	andl	r8,0x8,COH
800260c4:	5f 18       	srne	r8
800260c6:	5c 58       	castu.b	r8
}
800260c8:	10 9c       	mov	r12,r8
800260ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800260ce:	00 00       	add	r0,r0
800260d0:	80 02       	ld.sh	r2,r0[0x0]
800260d2:	5f 3c       	srlo	r12

800260d4 <flashc_get_command>:
 */
//! @{


unsigned int flashc_get_command(void)
{
800260d4:	eb cd 40 80 	pushm	r7,lr
800260d8:	1a 97       	mov	r7,sp
  return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_CMD_MASK) >> AVR32_FLASHC_FCMD_CMD_OFFSET;
800260da:	fe 68 00 00 	mov	r8,-131072
800260de:	70 18       	ld.w	r8,r8[0x4]
800260e0:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
}
800260e4:	10 9c       	mov	r12,r8
800260e6:	e3 cd 80 80 	ldm	sp++,r7,pc

800260ea <flashc_get_page_number>:


unsigned int flashc_get_page_number(void)
{
800260ea:	eb cd 40 80 	pushm	r7,lr
800260ee:	1a 97       	mov	r7,sp
  return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
800260f0:	fe 68 00 00 	mov	r8,-131072
800260f4:	70 18       	ld.w	r8,r8[0x4]
800260f6:	e4 18 00 ff 	andh	r8,0xff
800260fa:	e0 18 ff 00 	andl	r8,0xff00
800260fe:	a9 88       	lsr	r8,0x8
}
80026100:	10 9c       	mov	r12,r8
80026102:	e3 cd 80 80 	ldm	sp++,r7,pc

80026106 <flashc_issue_command>:


void flashc_issue_command(unsigned int command, int page_number)
{
80026106:	eb cd 40 c0 	pushm	r6-r7,lr
8002610a:	1a 97       	mov	r7,sp
8002610c:	20 3d       	sub	sp,12
8002610e:	4a 06       	lddpc	r6,8002618c <flashc_issue_command+0x86>
80026110:	1e 26       	rsub	r6,pc
80026112:	ef 4c ff f8 	st.w	r7[-8],r12
80026116:	ef 4b ff f4 	st.w	r7[-12],r11
  u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;
  flashc_wait_until_ready();
8002611a:	ec f8 04 c4 	ld.w	r8,r6[1220]
8002611e:	70 08       	ld.w	r8,r8[0x0]
80026120:	5d 18       	icall	r8
  u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80026122:	fe 68 00 00 	mov	r8,-131072
80026126:	70 18       	ld.w	r8,r8[0x4]
80026128:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcmd.FCMD.cmd = command;
8002612c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026130:	5c 58       	castu.b	r8
80026132:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80026136:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8002613a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002613e:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
80026142:	ef 48 ff fc 	st.w	r7[-4],r8
  if (page_number >= 0) u_avr32_flashc_fcmd.FCMD.pagen = page_number;
80026146:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002614a:	58 08       	cp.w	r8,0
8002614c:	c0 b5       	brlt	80026162 <flashc_issue_command+0x5c>
8002614e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026152:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80026156:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002615a:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
8002615e:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80026162:	3a 58       	mov	r8,-91
80026164:	ef 68 ff fc 	st.b	r7[-4],r8
  AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80026168:	fe 68 00 00 	mov	r8,-131072
8002616c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80026170:	91 19       	st.w	r8[0x4],r9
  flashc_error_status = flashc_get_error_status();
80026172:	c8 3f       	rcall	80026078 <flashc_get_error_status>
80026174:	18 99       	mov	r9,r12
80026176:	ec f8 00 54 	ld.w	r8,r6[84]
8002617a:	91 09       	st.w	r8[0x0],r9
  flashc_wait_until_ready();
8002617c:	ec f8 04 c4 	ld.w	r8,r6[1220]
80026180:	70 08       	ld.w	r8,r8[0x0]
80026182:	5d 18       	icall	r8
}
80026184:	2f dd       	sub	sp,-12
80026186:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002618a:	00 00       	add	r0,r0
8002618c:	80 02       	ld.sh	r2,r0[0x0]
8002618e:	5f 94       	srgt	r4

80026190 <flashc_no_operation>:
 */
//! @{


void flashc_no_operation(void)
{
80026190:	eb cd 40 c0 	pushm	r6-r7,lr
80026194:	1a 97       	mov	r7,sp
80026196:	48 56       	lddpc	r6,800261a8 <flashc_no_operation+0x18>
80026198:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_NOP, -1);
8002619a:	3f fb       	mov	r11,-1
8002619c:	30 0c       	mov	r12,0
8002619e:	f0 16 00 2a 	mcall	r6[168]
}
800261a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800261a6:	00 00       	add	r0,r0
800261a8:	80 02       	ld.sh	r2,r0[0x0]
800261aa:	60 1c       	ld.w	r12,r0[0x4]

800261ac <flashc_erase_all>:


void flashc_erase_all(void)
{
800261ac:	eb cd 40 c0 	pushm	r6-r7,lr
800261b0:	1a 97       	mov	r7,sp
800261b2:	48 56       	lddpc	r6,800261c4 <flashc_erase_all+0x18>
800261b4:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EA, -1);
800261b6:	3f fb       	mov	r11,-1
800261b8:	30 6c       	mov	r12,6
800261ba:	f0 16 00 2a 	mcall	r6[168]
}
800261be:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800261c2:	00 00       	add	r0,r0
800261c4:	80 02       	ld.sh	r2,r0[0x0]
800261c6:	60 38       	ld.w	r8,r0[0xc]

800261c8 <flashc_is_security_bit_active>:
 */
//! @{


bool flashc_is_security_bit_active(void)
{
800261c8:	eb cd 40 80 	pushm	r7,lr
800261cc:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_SECURITY_MASK) != 0);
800261ce:	fe 68 00 00 	mov	r8,-131072
800261d2:	70 28       	ld.w	r8,r8[0x8]
800261d4:	e2 18 00 10 	andl	r8,0x10,COH
800261d8:	5f 18       	srne	r8
800261da:	5c 58       	castu.b	r8
}
800261dc:	10 9c       	mov	r12,r8
800261de:	e3 cd 80 80 	ldm	sp++,r7,pc

800261e2 <flashc_activate_security_bit>:


void flashc_activate_security_bit(void)
{
800261e2:	eb cd 40 c0 	pushm	r6-r7,lr
800261e6:	1a 97       	mov	r7,sp
800261e8:	48 46       	lddpc	r6,800261f8 <flashc_activate_security_bit+0x16>
800261ea:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_SSB, -1);
800261ec:	3f fb       	mov	r11,-1
800261ee:	30 9c       	mov	r12,9
800261f0:	f0 16 00 2a 	mcall	r6[168]
}
800261f4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800261f8:	80 02       	ld.sh	r2,r0[0x0]
800261fa:	60 6e       	ld.w	lr,r0[0x18]

800261fc <flashc_get_bootloader_protected_size>:


unsigned int flashc_get_bootloader_protected_size(void)
{
800261fc:	eb cd 40 c0 	pushm	r6-r7,lr
80026200:	1a 97       	mov	r7,sp
80026202:	20 1d       	sub	sp,4
80026204:	48 e6       	lddpc	r6,8002623c <flashc_get_bootloader_protected_size+0x40>
80026206:	1e 26       	rsub	r6,pc
  unsigned int bootprot = (1 << AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE) - 1 -
                          flashc_read_gp_fuse_bitfield(AVR32_FLASHC_FGPFRLO_BOOTPROT_OFFSET,
                                                       AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE);
80026208:	30 3b       	mov	r11,3
8002620a:	31 1c       	mov	r12,17
8002620c:	f0 16 01 32 	mcall	r6[1224]
80026210:	14 98       	mov	r8,r10
80026212:	16 99       	mov	r9,r11
80026214:	f0 08 11 07 	rsub	r8,r8,7
80026218:	ef 48 ff fc 	st.w	r7[-4],r8
  return (bootprot) ? AVR32_FLASHC_PAGE_SIZE << bootprot : 0;
8002621c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026220:	58 08       	cp.w	r8,0
80026222:	c0 80       	breq	80026232 <flashc_get_bootloader_protected_size+0x36>
80026224:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026228:	e0 69 02 00 	mov	r9,512
8002622c:	f2 08 09 48 	lsl	r8,r9,r8
80026230:	c0 28       	rjmp	80026234 <flashc_get_bootloader_protected_size+0x38>
80026232:	30 08       	mov	r8,0
}
80026234:	10 9c       	mov	r12,r8
80026236:	2f fd       	sub	sp,-4
80026238:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002623c:	80 02       	ld.sh	r2,r0[0x0]
8002623e:	60 8a       	ld.w	r10,r0[0x20]

80026240 <flashc_set_bootloader_protected_size>:


unsigned int flashc_set_bootloader_protected_size(unsigned int bootprot_size)
{
80026240:	eb cd 40 c0 	pushm	r6-r7,lr
80026244:	1a 97       	mov	r7,sp
80026246:	20 7d       	sub	sp,28
80026248:	4a 46       	lddpc	r6,800262d8 <flashc_set_bootloader_protected_size+0x98>
8002624a:	1e 26       	rsub	r6,pc
8002624c:	ef 4c ff e4 	st.w	r7[-28],r12
  flashc_set_gp_fuse_bitfield(AVR32_FLASHC_FGPFRLO_BOOTPROT_OFFSET,
80026250:	ee fa ff e4 	ld.w	r10,r7[-28]
80026254:	58 0a       	cp.w	r10,0
80026256:	c3 40       	breq	800262be <flashc_set_bootloader_protected_size+0x7e>
                              AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE,
                              (1 << AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE) - 1 -
                              ((bootprot_size) ?
                               32 - clz((((min(max(bootprot_size, AVR32_FLASHC_PAGE_SIZE << 1),
80026258:	ee fa ff e4 	ld.w	r10,r7[-28]
8002625c:	ef 4a ff f8 	st.w	r7[-8],r10
80026260:	e0 6a 04 00 	mov	r10,1024
80026264:	ef 4a ff fc 	st.w	r7[-4],r10
80026268:	ee fa ff f8 	ld.w	r10,r7[-8]
8002626c:	ee fb ff fc 	ld.w	r11,r7[-4]
80026270:	f4 0b 0c 4a 	max	r10,r10,r11
80026274:	ef 4a ff f4 	st.w	r7[-12],r10
80026278:	ee fa ff f4 	ld.w	r10,r7[-12]
8002627c:	ef 4a ff ec 	st.w	r7[-20],r10
80026280:	e0 7a 00 00 	mov	r10,65536
80026284:	ef 4a ff f0 	st.w	r7[-16],r10
80026288:	ee fa ff ec 	ld.w	r10,r7[-20]
8002628c:	ee fb ff f0 	ld.w	r11,r7[-16]
80026290:	f4 0b 0d 4a 	min	r10,r10,r11
80026294:	ef 4a ff e8 	st.w	r7[-24],r10
80026298:	ee fa ff e8 	ld.w	r10,r7[-24]
8002629c:	f4 ca fe 01 	sub	r10,r10,-511
800262a0:	f4 cb fe 01 	sub	r11,r10,-511
800262a4:	58 0a       	cp.w	r10,0
800262a6:	f6 0a 17 50 	movlt	r10,r11
800262aa:	a9 5a       	asr	r10,0x9
800262ac:	a1 7a       	lsl	r10,0x1
800262ae:	20 1a       	sub	r10,1
}


unsigned int flashc_set_bootloader_protected_size(unsigned int bootprot_size)
{
  flashc_set_gp_fuse_bitfield(AVR32_FLASHC_FGPFRLO_BOOTPROT_OFFSET,
800262b0:	f4 0a 12 00 	clz	r10,r10
800262b4:	21 8a       	sub	r10,24
800262b6:	14 98       	mov	r8,r10
800262b8:	bf 5a       	asr	r10,0x1f
800262ba:	14 99       	mov	r9,r10
800262bc:	c0 38       	rjmp	800262c2 <flashc_set_bootloader_protected_size+0x82>
800262be:	30 78       	mov	r8,7
800262c0:	30 09       	mov	r9,0
800262c2:	30 3b       	mov	r11,3
800262c4:	31 1c       	mov	r12,17
800262c6:	f0 16 01 5f 	mcall	r6[1404]
                                               AVR32_FLASHC_PAGE_SIZE <<
                                               ((1 << AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE) - 1)) +
                                           AVR32_FLASHC_PAGE_SIZE - 1) /
                                          AVR32_FLASHC_PAGE_SIZE) << 1) - 1) - 1 :
                               0));
  return flashc_get_bootloader_protected_size();
800262ca:	f0 16 01 70 	mcall	r6[1472]
800262ce:	18 98       	mov	r8,r12
}
800262d0:	10 9c       	mov	r12,r8
800262d2:	2f 9d       	sub	sp,-28
800262d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800262d8:	80 02       	ld.sh	r2,r0[0x0]
800262da:	60 ce       	ld.w	lr,r0[0x30]

800262dc <flashc_is_external_privileged_fetch_locked>:


bool flashc_is_external_privileged_fetch_locked(void)
{
800262dc:	eb cd 40 c0 	pushm	r6-r7,lr
800262e0:	1a 97       	mov	r7,sp
800262e2:	48 76       	lddpc	r6,800262fc <flashc_is_external_privileged_fetch_locked+0x20>
800262e4:	1e 26       	rsub	r6,pc
  return (!flashc_read_gp_fuse_bit(AVR32_FLASHC_FGPFRLO_EPFL_OFFSET));
800262e6:	31 0c       	mov	r12,16
800262e8:	f0 16 00 fa 	mcall	r6[1000]
800262ec:	18 98       	mov	r8,r12
800262ee:	ec 18 00 01 	eorl	r8,0x1
800262f2:	5c 58       	castu.b	r8
800262f4:	5c 58       	castu.b	r8
}
800262f6:	10 9c       	mov	r12,r8
800262f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800262fc:	80 02       	ld.sh	r2,r0[0x0]
800262fe:	61 68       	ld.w	r8,r0[0x58]

80026300 <flashc_lock_external_privileged_fetch>:


void flashc_lock_external_privileged_fetch(bool lock)
{
80026300:	eb cd 40 c0 	pushm	r6-r7,lr
80026304:	1a 97       	mov	r7,sp
80026306:	20 1d       	sub	sp,4
80026308:	48 96       	lddpc	r6,8002632c <flashc_lock_external_privileged_fetch+0x2c>
8002630a:	1e 26       	rsub	r6,pc
8002630c:	18 98       	mov	r8,r12
8002630e:	ef 68 ff fc 	st.b	r7[-4],r8
  flashc_set_gp_fuse_bit(AVR32_FLASHC_FGPFRLO_EPFL_OFFSET, !lock);
80026312:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80026316:	ec 18 00 01 	eorl	r8,0x1
8002631a:	5c 58       	castu.b	r8
8002631c:	5c 58       	castu.b	r8
8002631e:	10 9b       	mov	r11,r8
80026320:	31 0c       	mov	r12,16
80026322:	f0 16 01 22 	mcall	r6[1160]
}
80026326:	2f fd       	sub	sp,-4
80026328:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002632c:	80 02       	ld.sh	r2,r0[0x0]
8002632e:	61 8e       	ld.w	lr,r0[0x60]

80026330 <flashc_is_page_region_locked>:


bool flashc_is_page_region_locked(int page_number)
{
80026330:	eb cd 40 c0 	pushm	r6-r7,lr
80026334:	1a 97       	mov	r7,sp
80026336:	20 1d       	sub	sp,4
80026338:	48 96       	lddpc	r6,8002635c <flashc_is_page_region_locked+0x2c>
8002633a:	1e 26       	rsub	r6,pc
8002633c:	ef 4c ff fc 	st.w	r7[-4],r12
  return flashc_is_region_locked(flashc_get_page_region(page_number));
80026340:	ee fc ff fc 	ld.w	r12,r7[-4]
80026344:	f0 16 01 9a 	mcall	r6[1640]
80026348:	18 98       	mov	r8,r12
8002634a:	10 9c       	mov	r12,r8
8002634c:	f0 16 01 48 	mcall	r6[1312]
80026350:	18 98       	mov	r8,r12
}
80026352:	10 9c       	mov	r12,r8
80026354:	2f fd       	sub	sp,-4
80026356:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002635a:	00 00       	add	r0,r0
8002635c:	80 02       	ld.sh	r2,r0[0x0]
8002635e:	61 be       	ld.w	lr,r0[0x6c]

80026360 <flashc_is_region_locked>:


bool flashc_is_region_locked(unsigned int region)
{
80026360:	eb cd 40 80 	pushm	r7,lr
80026364:	1a 97       	mov	r7,sp
80026366:	20 1d       	sub	sp,4
80026368:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_LOCK0_MASK << (region & (AVR32_FLASHC_REGIONS - 1))) != 0);
8002636c:	fe 68 00 00 	mov	r8,-131072
80026370:	70 29       	ld.w	r9,r8[0x8]
80026372:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026376:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002637a:	e0 7a 00 00 	mov	r10,65536
8002637e:	f4 08 09 48 	lsl	r8,r10,r8
80026382:	f3 e8 00 08 	and	r8,r9,r8
80026386:	5f 18       	srne	r8
80026388:	5c 58       	castu.b	r8
}
8002638a:	10 9c       	mov	r12,r8
8002638c:	2f fd       	sub	sp,-4
8002638e:	e3 cd 80 80 	ldm	sp++,r7,pc

80026392 <flashc_lock_page_region>:


void flashc_lock_page_region(int page_number, bool lock)
{
80026392:	eb cd 40 c0 	pushm	r6-r7,lr
80026396:	1a 97       	mov	r7,sp
80026398:	20 2d       	sub	sp,8
8002639a:	48 d6       	lddpc	r6,800263cc <flashc_lock_page_region+0x3a>
8002639c:	1e 26       	rsub	r6,pc
8002639e:	ef 4c ff fc 	st.w	r7[-4],r12
800263a2:	16 98       	mov	r8,r11
800263a4:	ef 68 ff f8 	st.b	r7[-8],r8
  flashc_issue_command((lock) ? AVR32_FLASHC_FCMD_CMD_LP : AVR32_FLASHC_FCMD_CMD_UP, page_number);
800263a8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800263ac:	30 08       	mov	r8,0
800263ae:	f0 09 18 00 	cp.b	r9,r8
800263b2:	c0 30       	breq	800263b8 <flashc_lock_page_region+0x26>
800263b4:	30 48       	mov	r8,4
800263b6:	c0 28       	rjmp	800263ba <flashc_lock_page_region+0x28>
800263b8:	30 58       	mov	r8,5
800263ba:	ee fb ff fc 	ld.w	r11,r7[-4]
800263be:	10 9c       	mov	r12,r8
800263c0:	f0 16 00 2a 	mcall	r6[168]
}
800263c4:	2f ed       	sub	sp,-8
800263c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800263ca:	00 00       	add	r0,r0
800263cc:	80 02       	ld.sh	r2,r0[0x0]
800263ce:	62 20       	ld.w	r0,r1[0x8]

800263d0 <flashc_lock_region>:


void flashc_lock_region(unsigned int region, bool lock)
{
800263d0:	eb cd 40 e0 	pushm	r5-r7,lr
800263d4:	1a 97       	mov	r7,sp
800263d6:	20 2d       	sub	sp,8
800263d8:	48 b6       	lddpc	r6,80026404 <flashc_lock_region+0x34>
800263da:	1e 26       	rsub	r6,pc
800263dc:	ef 4c ff fc 	st.w	r7[-4],r12
800263e0:	16 98       	mov	r8,r11
800263e2:	ef 68 ff f8 	st.b	r7[-8],r8
  flashc_lock_page_region(flashc_get_region_first_page_number(region), lock);
800263e6:	ef 35 ff f8 	ld.ub	r5,r7[-8]
800263ea:	ee fc ff fc 	ld.w	r12,r7[-4]
800263ee:	f0 16 01 80 	mcall	r6[1536]
800263f2:	18 98       	mov	r8,r12
800263f4:	0a 9b       	mov	r11,r5
800263f6:	10 9c       	mov	r12,r8
800263f8:	f0 16 01 ff 	mcall	r6[2044]
}
800263fc:	2f ed       	sub	sp,-8
800263fe:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80026402:	00 00       	add	r0,r0
80026404:	80 02       	ld.sh	r2,r0[0x0]
80026406:	62 5e       	ld.w	lr,r1[0x14]

80026408 <flashc_lock_all_regions>:


void flashc_lock_all_regions(bool lock)
{
80026408:	eb cd 40 c0 	pushm	r6-r7,lr
8002640c:	1a 97       	mov	r7,sp
8002640e:	20 3d       	sub	sp,12
80026410:	49 76       	lddpc	r6,8002646c <flashc_lock_all_regions+0x64>
80026412:	1e 26       	rsub	r6,pc
80026414:	18 98       	mov	r8,r12
80026416:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned int error_status = 0;
8002641a:	30 08       	mov	r8,0
8002641c:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int region = AVR32_FLASHC_REGIONS;
80026420:	31 08       	mov	r8,16
80026422:	ef 48 ff fc 	st.w	r7[-4],r8
  while (region)
80026426:	c1 68       	rjmp	80026452 <flashc_lock_all_regions+0x4a>
  {
    flashc_lock_region(--region, lock);
80026428:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002642c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80026430:	20 19       	sub	r9,1
80026432:	ef 49 ff fc 	st.w	r7[-4],r9
80026436:	10 9b       	mov	r11,r8
80026438:	ee fc ff fc 	ld.w	r12,r7[-4]
8002643c:	f0 16 01 60 	mcall	r6[1408]
    error_status |= flashc_error_status;
80026440:	ec f8 00 54 	ld.w	r8,r6[84]
80026444:	70 08       	ld.w	r8,r8[0x0]
80026446:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002644a:	f3 e8 10 08 	or	r8,r9,r8
8002644e:	ef 48 ff f8 	st.w	r7[-8],r8

void flashc_lock_all_regions(bool lock)
{
  unsigned int error_status = 0;
  unsigned int region = AVR32_FLASHC_REGIONS;
  while (region)
80026452:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026456:	58 08       	cp.w	r8,0
80026458:	ce 81       	brne	80026428 <flashc_lock_all_regions+0x20>
  {
    flashc_lock_region(--region, lock);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
8002645a:	ec f8 00 54 	ld.w	r8,r6[84]
8002645e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80026462:	91 09       	st.w	r8[0x0],r9
}
80026464:	2f dd       	sub	sp,-12
80026466:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002646a:	00 00       	add	r0,r0
8002646c:	80 02       	ld.sh	r2,r0[0x0]
8002646e:	62 96       	ld.w	r6,r1[0x24]

80026470 <flashc_read_gp_fuse_bit>:
 */
//! @{


bool flashc_read_gp_fuse_bit(unsigned int gp_fuse_bit)
{
80026470:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80026474:	1a 97       	mov	r7,sp
80026476:	20 1d       	sub	sp,4
80026478:	49 66       	lddpc	r6,800264d0 <flashc_read_gp_fuse_bit+0x60>
8002647a:	1e 26       	rsub	r6,pc
8002647c:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((flashc_read_all_gp_fuses() & 1ULL << (gp_fuse_bit & 0x3F)) != 0);
80026480:	f0 16 00 7c 	mcall	r6[496]
80026484:	14 98       	mov	r8,r10
80026486:	16 99       	mov	r9,r11
80026488:	ee fa ff fc 	ld.w	r10,r7[-4]
8002648c:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
80026490:	14 9b       	mov	r11,r10
80026492:	e2 1b 00 20 	andl	r11,0x20,COH
80026496:	30 0c       	mov	r12,0
80026498:	f2 05 15 01 	lsl	r5,r9,0x1
8002649c:	14 9e       	mov	lr,r10
8002649e:	ee 1e ff ff 	eorh	lr,0xffff
800264a2:	ec 1e ff ff 	eorl	lr,0xffff
800264a6:	ea 0e 09 4e 	lsl	lr,r5,lr
800264aa:	f0 0a 0a 42 	lsr	r2,r8,r10
800264ae:	fd e2 10 02 	or	r2,lr,r2
800264b2:	f2 0a 0a 43 	lsr	r3,r9,r10
800264b6:	58 0b       	cp.w	r11,0
800264b8:	e6 02 17 10 	movne	r2,r3
800264bc:	f8 03 17 10 	movne	r3,r12
800264c0:	04 98       	mov	r8,r2
800264c2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800264c6:	5c 58       	castu.b	r8
}
800264c8:	10 9c       	mov	r12,r8
800264ca:	2f fd       	sub	sp,-4
800264cc:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
800264d0:	80 02       	ld.sh	r2,r0[0x0]
800264d2:	62 fe       	ld.w	lr,r1[0x3c]

800264d4 <flashc_read_gp_fuse_bitfield>:


U64 flashc_read_gp_fuse_bitfield(unsigned int pos, unsigned int width)
{
800264d4:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
800264d8:	1a 97       	mov	r7,sp
800264da:	20 5d       	sub	sp,20
800264dc:	4b 16       	lddpc	r6,800265a0 <flashc_read_gp_fuse_bitfield+0xcc>
800264de:	1e 26       	rsub	r6,pc
800264e0:	ef 4c ff f0 	st.w	r7[-16],r12
800264e4:	ef 4b ff ec 	st.w	r7[-20],r11
  return flashc_read_all_gp_fuses() >> (pos & 0x3F) & ((1ULL << min(width, 64)) - 1);
800264e8:	f0 16 00 7c 	mcall	r6[496]
800264ec:	14 98       	mov	r8,r10
800264ee:	16 99       	mov	r9,r11
800264f0:	ee fa ff f0 	ld.w	r10,r7[-16]
800264f4:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
800264f8:	14 9b       	mov	r11,r10
800264fa:	e2 1b 00 20 	andl	r11,0x20,COH
800264fe:	30 0c       	mov	r12,0
80026500:	f2 05 15 01 	lsl	r5,r9,0x1
80026504:	14 9e       	mov	lr,r10
80026506:	ee 1e ff ff 	eorh	lr,0xffff
8002650a:	ec 1e ff ff 	eorl	lr,0xffff
8002650e:	ea 0e 09 4e 	lsl	lr,r5,lr
80026512:	f0 0a 0a 42 	lsr	r2,r8,r10
80026516:	fd e2 10 02 	or	r2,lr,r2
8002651a:	f2 0a 0a 43 	lsr	r3,r9,r10
8002651e:	58 0b       	cp.w	r11,0
80026520:	e6 02 17 10 	movne	r2,r3
80026524:	f8 03 17 10 	movne	r3,r12
80026528:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002652c:	ef 48 ff f8 	st.w	r7[-8],r8
80026530:	34 08       	mov	r8,64
80026532:	ef 48 ff fc 	st.w	r7[-4],r8
80026536:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002653a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002653e:	f0 09 0d 48 	min	r8,r8,r9
80026542:	ef 48 ff f4 	st.w	r7[-12],r8
80026546:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002654a:	10 99       	mov	r9,r8
8002654c:	e2 19 00 20 	andl	r9,0x20,COH
80026550:	30 0a       	mov	r10,0
80026552:	30 1b       	mov	r11,1
80026554:	f6 0c 16 01 	lsr	r12,r11,0x1
80026558:	10 9b       	mov	r11,r8
8002655a:	ee 1b ff ff 	eorh	r11,0xffff
8002655e:	ec 1b ff ff 	eorl	r11,0xffff
80026562:	f8 0b 0a 4b 	lsr	r11,r12,r11
80026566:	30 0c       	mov	r12,0
80026568:	f8 08 09 41 	lsl	r1,r12,r8
8002656c:	f7 e1 10 01 	or	r1,r11,r1
80026570:	30 1b       	mov	r11,1
80026572:	f6 08 09 40 	lsl	r0,r11,r8
80026576:	58 09       	cp.w	r9,0
80026578:	e0 01 17 10 	movne	r1,r0
8002657c:	f4 00 17 10 	movne	r0,r10
80026580:	3f f8       	mov	r8,-1
80026582:	3f f9       	mov	r9,-1
80026584:	e0 08 00 0a 	add	r10,r0,r8
80026588:	e2 09 00 4b 	adc	r11,r1,r9
8002658c:	e5 ea 00 08 	and	r8,r2,r10
80026590:	e7 eb 00 09 	and	r9,r3,r11
}
80026594:	10 9a       	mov	r10,r8
80026596:	12 9b       	mov	r11,r9
80026598:	2f bd       	sub	sp,-20
8002659a:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8002659e:	00 00       	add	r0,r0
800265a0:	80 02       	ld.sh	r2,r0[0x0]
800265a2:	63 62       	ld.w	r2,r1[0x58]

800265a4 <flashc_read_gp_fuse_byte>:


U8 flashc_read_gp_fuse_byte(unsigned int gp_fuse_byte)
{
800265a4:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
800265a8:	1a 97       	mov	r7,sp
800265aa:	20 1d       	sub	sp,4
800265ac:	49 66       	lddpc	r6,80026604 <flashc_read_gp_fuse_byte+0x60>
800265ae:	1e 26       	rsub	r6,pc
800265b0:	ef 4c ff fc 	st.w	r7[-4],r12
  return flashc_read_all_gp_fuses() >> ((gp_fuse_byte & 0x07) << 3);
800265b4:	f0 16 00 7c 	mcall	r6[496]
800265b8:	14 98       	mov	r8,r10
800265ba:	16 99       	mov	r9,r11
800265bc:	ee fa ff fc 	ld.w	r10,r7[-4]
800265c0:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
800265c4:	a3 7a       	lsl	r10,0x3
800265c6:	14 9b       	mov	r11,r10
800265c8:	e2 1b 00 20 	andl	r11,0x20,COH
800265cc:	30 0c       	mov	r12,0
800265ce:	f2 05 15 01 	lsl	r5,r9,0x1
800265d2:	14 9e       	mov	lr,r10
800265d4:	ee 1e ff ff 	eorh	lr,0xffff
800265d8:	ec 1e ff ff 	eorl	lr,0xffff
800265dc:	ea 0e 09 4e 	lsl	lr,r5,lr
800265e0:	f0 0a 0a 42 	lsr	r2,r8,r10
800265e4:	fd e2 10 02 	or	r2,lr,r2
800265e8:	f2 0a 0a 43 	lsr	r3,r9,r10
800265ec:	58 0b       	cp.w	r11,0
800265ee:	e6 02 17 10 	movne	r2,r3
800265f2:	f8 03 17 10 	movne	r3,r12
800265f6:	f1 d2 c0 08 	bfextu	r8,r2,0x0,0x8
}
800265fa:	10 9c       	mov	r12,r8
800265fc:	2f fd       	sub	sp,-4
800265fe:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80026602:	00 00       	add	r0,r0
80026604:	80 02       	ld.sh	r2,r0[0x0]
80026606:	64 32       	ld.w	r2,r2[0xc]

80026608 <flashc_read_all_gp_fuses>:


U64 flashc_read_all_gp_fuses(void)
{
80026608:	eb cd 40 8c 	pushm	r2-r3,r7,lr
8002660c:	1a 97       	mov	r7,sp
  return AVR32_FLASHC.fgpfrlo | (U64)AVR32_FLASHC.fgpfrhi << 32;
8002660e:	fe 6c 00 00 	mov	r12,-131072
80026612:	78 6c       	ld.w	r12,r12[0x18]
80026614:	18 9a       	mov	r10,r12
80026616:	30 0b       	mov	r11,0
80026618:	fe 6c 00 00 	mov	r12,-131072
8002661c:	78 5c       	ld.w	r12,r12[0x14]
8002661e:	18 92       	mov	r2,r12
80026620:	30 03       	mov	r3,0
80026622:	e4 09 15 00 	lsl	r9,r2,0x0
80026626:	30 08       	mov	r8,0
80026628:	f5 e8 10 02 	or	r2,r10,r8
8002662c:	f7 e9 10 03 	or	r3,r11,r9
80026630:	04 98       	mov	r8,r2
80026632:	06 99       	mov	r9,r3
}
80026634:	10 9a       	mov	r10,r8
80026636:	12 9b       	mov	r11,r9
80026638:	e3 cd 80 8c 	ldm	sp++,r2-r3,r7,pc

8002663c <flashc_erase_gp_fuse_bit>:


bool flashc_erase_gp_fuse_bit(unsigned int gp_fuse_bit, bool check)
{
8002663c:	eb cd 40 c0 	pushm	r6-r7,lr
80026640:	1a 97       	mov	r7,sp
80026642:	20 2d       	sub	sp,8
80026644:	49 06       	lddpc	r6,80026684 <flashc_erase_gp_fuse_bit+0x48>
80026646:	1e 26       	rsub	r6,pc
80026648:	ef 4c ff fc 	st.w	r7[-4],r12
8002664c:	16 98       	mov	r8,r11
8002664e:	ef 68 ff f8 	st.b	r7[-8],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EGPB, gp_fuse_bit & 0x3F);
80026652:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026656:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8002665a:	10 9b       	mov	r11,r8
8002665c:	30 8c       	mov	r12,8
8002665e:	f0 16 00 2a 	mcall	r6[168]
  return (check) ? flashc_read_gp_fuse_bit(gp_fuse_bit) : true;
80026662:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80026666:	30 08       	mov	r8,0
80026668:	f0 09 18 00 	cp.b	r9,r8
8002666c:	c0 70       	breq	8002667a <flashc_erase_gp_fuse_bit+0x3e>
8002666e:	ee fc ff fc 	ld.w	r12,r7[-4]
80026672:	f0 16 00 fa 	mcall	r6[1000]
80026676:	18 98       	mov	r8,r12
80026678:	c0 28       	rjmp	8002667c <flashc_erase_gp_fuse_bit+0x40>
8002667a:	30 18       	mov	r8,1
}
8002667c:	10 9c       	mov	r12,r8
8002667e:	2f ed       	sub	sp,-8
80026680:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026684:	80 02       	ld.sh	r2,r0[0x0]
80026686:	64 ca       	ld.w	r10,r2[0x30]

80026688 <flashc_erase_gp_fuse_bitfield>:


bool flashc_erase_gp_fuse_bitfield(unsigned int pos, unsigned int width, bool check)
{
80026688:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8002668c:	1a 97       	mov	r7,sp
8002668e:	20 8d       	sub	sp,32
80026690:	4c 36       	lddpc	r6,8002679c <flashc_erase_gp_fuse_bitfield+0x114>
80026692:	1e 26       	rsub	r6,pc
80026694:	ef 4c ff e8 	st.w	r7[-24],r12
80026698:	ef 4b ff e4 	st.w	r7[-28],r11
8002669c:	14 98       	mov	r8,r10
8002669e:	ef 68 ff e0 	st.b	r7[-32],r8
  unsigned int error_status = 0;
800266a2:	30 08       	mov	r8,0
800266a4:	ef 48 ff ec 	st.w	r7[-20],r8
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
800266a8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800266ac:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800266b0:	ef 48 ff e8 	st.w	r7[-24],r8
  width = min(width, 64);
800266b4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800266b8:	ef 48 ff f8 	st.w	r7[-8],r8
800266bc:	34 08       	mov	r8,64
800266be:	ef 48 ff fc 	st.w	r7[-4],r8
800266c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800266c6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800266ca:	f0 09 0d 48 	min	r8,r8,r9
800266ce:	ef 48 ff f4 	st.w	r7[-12],r8
800266d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800266d6:	ef 48 ff e4 	st.w	r7[-28],r8
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++)
800266da:	ee f8 ff e8 	ld.w	r8,r7[-24]
800266de:	ef 48 ff f0 	st.w	r7[-16],r8
800266e2:	c1 48       	rjmp	8002670a <flashc_erase_gp_fuse_bitfield+0x82>
  {
    flashc_erase_gp_fuse_bit(gp_fuse_bit, false);
800266e4:	30 0b       	mov	r11,0
800266e6:	ee fc ff f0 	ld.w	r12,r7[-16]
800266ea:	f0 16 00 f1 	mcall	r6[964]
    error_status |= flashc_error_status;
800266ee:	ec f8 00 54 	ld.w	r8,r6[84]
800266f2:	70 08       	ld.w	r8,r8[0x0]
800266f4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800266f8:	f3 e8 10 08 	or	r8,r9,r8
800266fc:	ef 48 ff ec 	st.w	r7[-20],r8
{
  unsigned int error_status = 0;
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
  width = min(width, 64);
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++)
80026700:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026704:	2f f8       	sub	r8,-1
80026706:	ef 48 ff f0 	st.w	r7[-16],r8
8002670a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002670e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80026712:	10 09       	add	r9,r8
80026714:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026718:	10 39       	cp.w	r9,r8
8002671a:	fe 9b ff e5 	brhi	800266e4 <flashc_erase_gp_fuse_bitfield+0x5c>
  {
    flashc_erase_gp_fuse_bit(gp_fuse_bit, false);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
8002671e:	ec f8 00 54 	ld.w	r8,r6[84]
80026722:	ee f9 ff ec 	ld.w	r9,r7[-20]
80026726:	91 09       	st.w	r8[0x0],r9
  return (check) ? (flashc_read_gp_fuse_bitfield(pos, width) == (1ULL << width) - 1) : true;
80026728:	ef 39 ff e0 	ld.ub	r9,r7[-32]
8002672c:	30 08       	mov	r8,0
8002672e:	f0 09 18 00 	cp.b	r9,r8
80026732:	c3 00       	breq	80026792 <flashc_erase_gp_fuse_bitfield+0x10a>
80026734:	ee fb ff e4 	ld.w	r11,r7[-28]
80026738:	ee fc ff e8 	ld.w	r12,r7[-24]
8002673c:	f0 16 01 32 	mcall	r6[1224]
80026740:	ee f8 ff e4 	ld.w	r8,r7[-28]
80026744:	10 99       	mov	r9,r8
80026746:	e2 19 00 20 	andl	r9,0x20,COH
8002674a:	30 0c       	mov	r12,0
8002674c:	30 1e       	mov	lr,1
8002674e:	fc 05 16 01 	lsr	r5,lr,0x1
80026752:	10 9e       	mov	lr,r8
80026754:	ee 1e ff ff 	eorh	lr,0xffff
80026758:	ec 1e ff ff 	eorl	lr,0xffff
8002675c:	ea 0e 0a 4e 	lsr	lr,r5,lr
80026760:	30 05       	mov	r5,0
80026762:	ea 08 09 43 	lsl	r3,r5,r8
80026766:	fd e3 10 03 	or	r3,lr,r3
8002676a:	30 1e       	mov	lr,1
8002676c:	fc 08 09 42 	lsl	r2,lr,r8
80026770:	58 09       	cp.w	r9,0
80026772:	e4 03 17 10 	movne	r3,r2
80026776:	f8 02 17 10 	movne	r2,r12
8002677a:	3f f8       	mov	r8,-1
8002677c:	3f f9       	mov	r9,-1
8002677e:	e4 08 00 08 	add	r8,r2,r8
80026782:	e6 09 00 49 	adc	r9,r3,r9
80026786:	10 3a       	cp.w	r10,r8
80026788:	f2 0b 13 00 	cpc	r11,r9
8002678c:	5f 08       	sreq	r8
8002678e:	5c 58       	castu.b	r8
80026790:	c0 28       	rjmp	80026794 <flashc_erase_gp_fuse_bitfield+0x10c>
80026792:	30 18       	mov	r8,1
}
80026794:	10 9c       	mov	r12,r8
80026796:	2f 8d       	sub	sp,-32
80026798:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8002679c:	80 02       	ld.sh	r2,r0[0x0]
8002679e:	65 16       	ld.w	r6,r2[0x44]

800267a0 <flashc_erase_gp_fuse_byte>:


bool flashc_erase_gp_fuse_byte(unsigned int gp_fuse_byte, bool check)
{
800267a0:	eb cd 40 c0 	pushm	r6-r7,lr
800267a4:	1a 97       	mov	r7,sp
800267a6:	20 6d       	sub	sp,24
800267a8:	4b 26       	lddpc	r6,80026870 <flashc_erase_gp_fuse_byte+0xd0>
800267aa:	1e 26       	rsub	r6,pc
800267ac:	ef 4c ff ec 	st.w	r7[-20],r12
800267b0:	16 98       	mov	r8,r11
800267b2:	ef 68 ff e8 	st.b	r7[-24],r8
  unsigned int error_status;
  unsigned int current_gp_fuse_byte;
  U64 value = flashc_read_all_gp_fuses();
800267b6:	f0 16 00 7c 	mcall	r6[496]
800267ba:	14 98       	mov	r8,r10
800267bc:	16 99       	mov	r9,r11
800267be:	ee e9 ff f8 	st.d	r7[-8],r8
  flashc_erase_all_gp_fuses(false);
800267c2:	30 0c       	mov	r12,0
800267c4:	f0 16 00 d7 	mcall	r6[860]
  error_status = flashc_error_status;
800267c8:	ec f8 00 54 	ld.w	r8,r6[84]
800267cc:	70 08       	ld.w	r8,r8[0x0]
800267ce:	ef 48 ff f0 	st.w	r7[-16],r8
  for (current_gp_fuse_byte = 0; current_gp_fuse_byte < 8; current_gp_fuse_byte++, value >>= 8)
800267d2:	30 08       	mov	r8,0
800267d4:	ef 48 ff f4 	st.w	r7[-12],r8
800267d8:	c2 b8       	rjmp	8002682e <flashc_erase_gp_fuse_byte+0x8e>
  {
    if (current_gp_fuse_byte != gp_fuse_byte)
800267da:	ee f9 ff f4 	ld.w	r9,r7[-12]
800267de:	ee f8 ff ec 	ld.w	r8,r7[-20]
800267e2:	10 39       	cp.w	r9,r8
800267e4:	c1 10       	breq	80026806 <flashc_erase_gp_fuse_byte+0x66>
    {
      flashc_write_gp_fuse_byte(current_gp_fuse_byte, value);
800267e6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800267ea:	10 9b       	mov	r11,r8
800267ec:	ee fc ff f4 	ld.w	r12,r7[-12]
800267f0:	f0 16 00 92 	mcall	r6[584]
      error_status |= flashc_error_status;
800267f4:	ec f8 00 54 	ld.w	r8,r6[84]
800267f8:	70 08       	ld.w	r8,r8[0x0]
800267fa:	ee f9 ff f0 	ld.w	r9,r7[-16]
800267fe:	f3 e8 10 08 	or	r8,r9,r8
80026802:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int error_status;
  unsigned int current_gp_fuse_byte;
  U64 value = flashc_read_all_gp_fuses();
  flashc_erase_all_gp_fuses(false);
  error_status = flashc_error_status;
  for (current_gp_fuse_byte = 0; current_gp_fuse_byte < 8; current_gp_fuse_byte++, value >>= 8)
80026806:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002680a:	2f f8       	sub	r8,-1
8002680c:	ef 48 ff f4 	st.w	r7[-12],r8
80026810:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026814:	b9 68       	lsl	r8,0x18
80026816:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002681a:	a9 89       	lsr	r9,0x8
8002681c:	f3 e8 10 08 	or	r8,r9,r8
80026820:	ef 48 ff fc 	st.w	r7[-4],r8
80026824:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026828:	a9 88       	lsr	r8,0x8
8002682a:	ef 48 ff f8 	st.w	r7[-8],r8
8002682e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026832:	58 78       	cp.w	r8,7
80026834:	fe 98 ff d3 	brls	800267da <flashc_erase_gp_fuse_byte+0x3a>
    {
      flashc_write_gp_fuse_byte(current_gp_fuse_byte, value);
      error_status |= flashc_error_status;
    }
  }
  flashc_error_status = error_status;
80026838:	ec f8 00 54 	ld.w	r8,r6[84]
8002683c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80026840:	91 09       	st.w	r8[0x0],r9
  return (check) ? (flashc_read_gp_fuse_byte(gp_fuse_byte) == 0xFF) : true;
80026842:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80026846:	30 08       	mov	r8,0
80026848:	f0 09 18 00 	cp.b	r9,r8
8002684c:	c0 d0       	breq	80026866 <flashc_erase_gp_fuse_byte+0xc6>
8002684e:	ee fc ff ec 	ld.w	r12,r7[-20]
80026852:	f0 16 02 27 	mcall	r6[2204]
80026856:	18 98       	mov	r8,r12
80026858:	10 99       	mov	r9,r8
8002685a:	3f f8       	mov	r8,-1
8002685c:	f0 09 18 00 	cp.b	r9,r8
80026860:	5f 08       	sreq	r8
80026862:	5c 58       	castu.b	r8
80026864:	c0 28       	rjmp	80026868 <flashc_erase_gp_fuse_byte+0xc8>
80026866:	30 18       	mov	r8,1
}
80026868:	10 9c       	mov	r12,r8
8002686a:	2f ad       	sub	sp,-24
8002686c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026870:	80 02       	ld.sh	r2,r0[0x0]
80026872:	66 2e       	ld.w	lr,r3[0x8]

80026874 <flashc_erase_all_gp_fuses>:


bool flashc_erase_all_gp_fuses(bool check)
{
80026874:	eb cd 40 c0 	pushm	r6-r7,lr
80026878:	1a 97       	mov	r7,sp
8002687a:	20 1d       	sub	sp,4
8002687c:	48 f6       	lddpc	r6,800268b8 <flashc_erase_all_gp_fuses+0x44>
8002687e:	1e 26       	rsub	r6,pc
80026880:	18 98       	mov	r8,r12
80026882:	ef 68 ff fc 	st.b	r7[-4],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EAGPF, -1);
80026886:	3f fb       	mov	r11,-1
80026888:	30 bc       	mov	r12,11
8002688a:	f0 16 00 2a 	mcall	r6[168]
  return (check) ? (flashc_read_all_gp_fuses() == 0xFFFFFFFFFFFFFFFFULL) : true;
8002688e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80026892:	30 08       	mov	r8,0
80026894:	f0 09 18 00 	cp.b	r9,r8
80026898:	c0 b0       	breq	800268ae <flashc_erase_all_gp_fuses+0x3a>
8002689a:	f0 16 00 7c 	mcall	r6[496]
8002689e:	14 98       	mov	r8,r10
800268a0:	16 99       	mov	r9,r11
800268a2:	f3 e8 00 08 	and	r8,r9,r8
800268a6:	5b f8       	cp.w	r8,-1
800268a8:	5f 08       	sreq	r8
800268aa:	5c 58       	castu.b	r8
800268ac:	c0 28       	rjmp	800268b0 <flashc_erase_all_gp_fuses+0x3c>
800268ae:	30 18       	mov	r8,1
}
800268b0:	10 9c       	mov	r12,r8
800268b2:	2f fd       	sub	sp,-4
800268b4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800268b8:	80 02       	ld.sh	r2,r0[0x0]
800268ba:	67 02       	ld.w	r2,r3[0x40]

800268bc <flashc_write_gp_fuse_bit>:


void flashc_write_gp_fuse_bit(unsigned int gp_fuse_bit, bool value)
{
800268bc:	eb cd 40 c0 	pushm	r6-r7,lr
800268c0:	1a 97       	mov	r7,sp
800268c2:	20 2d       	sub	sp,8
800268c4:	48 c6       	lddpc	r6,800268f4 <flashc_write_gp_fuse_bit+0x38>
800268c6:	1e 26       	rsub	r6,pc
800268c8:	ef 4c ff fc 	st.w	r7[-4],r12
800268cc:	16 98       	mov	r8,r11
800268ce:	ef 68 ff f8 	st.b	r7[-8],r8
  if (!value)
800268d2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800268d6:	ec 18 00 01 	eorl	r8,0x1
800268da:	5c 58       	castu.b	r8
800268dc:	c0 90       	breq	800268ee <flashc_write_gp_fuse_bit+0x32>
    flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WGPB, gp_fuse_bit & 0x3F);
800268de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800268e2:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800268e6:	10 9b       	mov	r11,r8
800268e8:	30 7c       	mov	r12,7
800268ea:	f0 16 00 2a 	mcall	r6[168]
}
800268ee:	2f ed       	sub	sp,-8
800268f0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800268f4:	80 02       	ld.sh	r2,r0[0x0]
800268f6:	67 4a       	ld.w	r10,r3[0x50]

800268f8 <flashc_write_gp_fuse_bitfield>:


void flashc_write_gp_fuse_bitfield(unsigned int pos, unsigned int width, U64 value)
{
800268f8:	eb cd 40 c0 	pushm	r6-r7,lr
800268fc:	1a 97       	mov	r7,sp
800268fe:	20 9d       	sub	sp,36
80026900:	4b 16       	lddpc	r6,800269c4 <flashc_write_gp_fuse_bitfield+0xcc>
80026902:	1e 26       	rsub	r6,pc
80026904:	ef 4c ff e8 	st.w	r7[-24],r12
80026908:	ef 4b ff e4 	st.w	r7[-28],r11
8002690c:	ee e9 ff dc 	st.d	r7[-36],r8
  unsigned int error_status = 0;
80026910:	30 08       	mov	r8,0
80026912:	ef 48 ff ec 	st.w	r7[-20],r8
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
80026916:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002691a:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8002691e:	ef 48 ff e8 	st.w	r7[-24],r8
  width = min(width, 64);
80026922:	ee f8 ff e4 	ld.w	r8,r7[-28]
80026926:	ef 48 ff f8 	st.w	r7[-8],r8
8002692a:	34 08       	mov	r8,64
8002692c:	ef 48 ff fc 	st.w	r7[-4],r8
80026930:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026934:	ee f9 ff fc 	ld.w	r9,r7[-4]
80026938:	f0 09 0d 48 	min	r8,r8,r9
8002693c:	ef 48 ff f4 	st.w	r7[-12],r8
80026940:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026944:	ef 48 ff e4 	st.w	r7[-28],r8
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++, value >>= 1)
80026948:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002694c:	ef 48 ff f0 	st.w	r7[-16],r8
80026950:	c2 88       	rjmp	800269a0 <flashc_write_gp_fuse_bitfield+0xa8>
  {
    flashc_write_gp_fuse_bit(gp_fuse_bit, value & 0x01);
80026952:	ee f8 ff e0 	ld.w	r8,r7[-32]
80026956:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002695a:	5c 58       	castu.b	r8
8002695c:	10 9b       	mov	r11,r8
8002695e:	ee fc ff f0 	ld.w	r12,r7[-16]
80026962:	f0 16 00 e2 	mcall	r6[904]
    error_status |= flashc_error_status;
80026966:	ec f8 00 54 	ld.w	r8,r6[84]
8002696a:	70 08       	ld.w	r8,r8[0x0]
8002696c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80026970:	f3 e8 10 08 	or	r8,r9,r8
80026974:	ef 48 ff ec 	st.w	r7[-20],r8
{
  unsigned int error_status = 0;
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
  width = min(width, 64);
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++, value >>= 1)
80026978:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002697c:	2f f8       	sub	r8,-1
8002697e:	ef 48 ff f0 	st.w	r7[-16],r8
80026982:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026986:	bf 78       	lsl	r8,0x1f
80026988:	ee f9 ff e0 	ld.w	r9,r7[-32]
8002698c:	a1 99       	lsr	r9,0x1
8002698e:	f3 e8 10 08 	or	r8,r9,r8
80026992:	ef 48 ff e0 	st.w	r7[-32],r8
80026996:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002699a:	a1 98       	lsr	r8,0x1
8002699c:	ef 48 ff dc 	st.w	r7[-36],r8
800269a0:	ee f9 ff e8 	ld.w	r9,r7[-24]
800269a4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800269a8:	10 09       	add	r9,r8
800269aa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800269ae:	10 39       	cp.w	r9,r8
800269b0:	fe 9b ff d1 	brhi	80026952 <flashc_write_gp_fuse_bitfield+0x5a>
  {
    flashc_write_gp_fuse_bit(gp_fuse_bit, value & 0x01);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
800269b4:	ec f8 00 54 	ld.w	r8,r6[84]
800269b8:	ee f9 ff ec 	ld.w	r9,r7[-20]
800269bc:	91 09       	st.w	r8[0x0],r9
}
800269be:	2f 7d       	sub	sp,-36
800269c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800269c4:	80 02       	ld.sh	r2,r0[0x0]
800269c6:	67 86       	ld.w	r6,r3[0x60]

800269c8 <flashc_write_gp_fuse_byte>:


void flashc_write_gp_fuse_byte(unsigned int gp_fuse_byte, U8 value)
{
800269c8:	eb cd 40 c0 	pushm	r6-r7,lr
800269cc:	1a 97       	mov	r7,sp
800269ce:	20 2d       	sub	sp,8
800269d0:	48 c6       	lddpc	r6,80026a00 <flashc_write_gp_fuse_byte+0x38>
800269d2:	1e 26       	rsub	r6,pc
800269d4:	ef 4c ff fc 	st.w	r7[-4],r12
800269d8:	16 98       	mov	r8,r11
800269da:	ef 68 ff f8 	st.b	r7[-8],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_PGPFB, (gp_fuse_byte & 0x07) | value << 3);
800269de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800269e2:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
800269e6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800269ea:	a3 78       	lsl	r8,0x3
800269ec:	f3 e8 10 08 	or	r8,r9,r8
800269f0:	10 9b       	mov	r11,r8
800269f2:	30 ac       	mov	r12,10
800269f4:	f0 16 00 2a 	mcall	r6[168]
}
800269f8:	2f ed       	sub	sp,-8
800269fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800269fe:	00 00       	add	r0,r0
80026a00:	80 02       	ld.sh	r2,r0[0x0]
80026a02:	68 56       	ld.w	r6,r4[0x14]

80026a04 <flashc_write_all_gp_fuses>:


void flashc_write_all_gp_fuses(U64 value)
{
80026a04:	eb cd 40 c0 	pushm	r6-r7,lr
80026a08:	1a 97       	mov	r7,sp
80026a0a:	20 4d       	sub	sp,16
80026a0c:	49 e6       	lddpc	r6,80026a84 <flashc_write_all_gp_fuses+0x80>
80026a0e:	1e 26       	rsub	r6,pc
80026a10:	ee eb ff f0 	st.d	r7[-16],r10
  unsigned int error_status = 0;
80026a14:	30 08       	mov	r8,0
80026a16:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int gp_fuse_byte;
  for (gp_fuse_byte = 0; gp_fuse_byte < 8; gp_fuse_byte++, value >>= 8)
80026a1a:	30 08       	mov	r8,0
80026a1c:	ef 48 ff fc 	st.w	r7[-4],r8
80026a20:	c2 58       	rjmp	80026a6a <flashc_write_all_gp_fuses+0x66>
  {
    flashc_write_gp_fuse_byte(gp_fuse_byte, value);
80026a22:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80026a26:	10 9b       	mov	r11,r8
80026a28:	ee fc ff fc 	ld.w	r12,r7[-4]
80026a2c:	f0 16 00 92 	mcall	r6[584]
    error_status |= flashc_error_status;
80026a30:	ec f8 00 54 	ld.w	r8,r6[84]
80026a34:	70 08       	ld.w	r8,r8[0x0]
80026a36:	ee f9 ff f8 	ld.w	r9,r7[-8]
80026a3a:	f3 e8 10 08 	or	r8,r9,r8
80026a3e:	ef 48 ff f8 	st.w	r7[-8],r8

void flashc_write_all_gp_fuses(U64 value)
{
  unsigned int error_status = 0;
  unsigned int gp_fuse_byte;
  for (gp_fuse_byte = 0; gp_fuse_byte < 8; gp_fuse_byte++, value >>= 8)
80026a42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a46:	2f f8       	sub	r8,-1
80026a48:	ef 48 ff fc 	st.w	r7[-4],r8
80026a4c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026a50:	b9 68       	lsl	r8,0x18
80026a52:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026a56:	a9 89       	lsr	r9,0x8
80026a58:	f3 e8 10 08 	or	r8,r9,r8
80026a5c:	ef 48 ff f4 	st.w	r7[-12],r8
80026a60:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026a64:	a9 88       	lsr	r8,0x8
80026a66:	ef 48 ff f0 	st.w	r7[-16],r8
80026a6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a6e:	58 78       	cp.w	r8,7
80026a70:	fe 98 ff d9 	brls	80026a22 <flashc_write_all_gp_fuses+0x1e>
  {
    flashc_write_gp_fuse_byte(gp_fuse_byte, value);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
80026a74:	ec f8 00 54 	ld.w	r8,r6[84]
80026a78:	ee f9 ff f8 	ld.w	r9,r7[-8]
80026a7c:	91 09       	st.w	r8[0x0],r9
}
80026a7e:	2f cd       	sub	sp,-16
80026a80:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026a84:	80 02       	ld.sh	r2,r0[0x0]
80026a86:	68 92       	ld.w	r2,r4[0x24]

80026a88 <flashc_set_gp_fuse_bit>:


void flashc_set_gp_fuse_bit(unsigned int gp_fuse_bit, bool value)
{
80026a88:	eb cd 40 c0 	pushm	r6-r7,lr
80026a8c:	1a 97       	mov	r7,sp
80026a8e:	20 2d       	sub	sp,8
80026a90:	48 e6       	lddpc	r6,80026ac8 <flashc_set_gp_fuse_bit+0x40>
80026a92:	1e 26       	rsub	r6,pc
80026a94:	ef 4c ff fc 	st.w	r7[-4],r12
80026a98:	16 98       	mov	r8,r11
80026a9a:	ef 68 ff f8 	st.b	r7[-8],r8
  if (value)
80026a9e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80026aa2:	30 08       	mov	r8,0
80026aa4:	f0 09 18 00 	cp.b	r9,r8
80026aa8:	c0 70       	breq	80026ab6 <flashc_set_gp_fuse_bit+0x2e>
    flashc_erase_gp_fuse_bit(gp_fuse_bit, false);
80026aaa:	30 0b       	mov	r11,0
80026aac:	ee fc ff fc 	ld.w	r12,r7[-4]
80026ab0:	f0 16 00 f1 	mcall	r6[964]
80026ab4:	c0 68       	rjmp	80026ac0 <flashc_set_gp_fuse_bit+0x38>
  else
    flashc_write_gp_fuse_bit(gp_fuse_bit, false);
80026ab6:	30 0b       	mov	r11,0
80026ab8:	ee fc ff fc 	ld.w	r12,r7[-4]
80026abc:	f0 16 00 e2 	mcall	r6[904]
}
80026ac0:	2f ed       	sub	sp,-8
80026ac2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026ac6:	00 00       	add	r0,r0
80026ac8:	80 02       	ld.sh	r2,r0[0x0]
80026aca:	69 16       	ld.w	r6,r4[0x44]

80026acc <flashc_set_gp_fuse_bitfield>:


void flashc_set_gp_fuse_bitfield(unsigned int pos, unsigned int width, U64 value)
{
80026acc:	eb cd 40 c0 	pushm	r6-r7,lr
80026ad0:	1a 97       	mov	r7,sp
80026ad2:	20 9d       	sub	sp,36
80026ad4:	4b 16       	lddpc	r6,80026b98 <flashc_set_gp_fuse_bitfield+0xcc>
80026ad6:	1e 26       	rsub	r6,pc
80026ad8:	ef 4c ff e8 	st.w	r7[-24],r12
80026adc:	ef 4b ff e4 	st.w	r7[-28],r11
80026ae0:	ee e9 ff dc 	st.d	r7[-36],r8
  unsigned int error_status = 0;
80026ae4:	30 08       	mov	r8,0
80026ae6:	ef 48 ff ec 	st.w	r7[-20],r8
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
80026aea:	ee f8 ff e8 	ld.w	r8,r7[-24]
80026aee:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80026af2:	ef 48 ff e8 	st.w	r7[-24],r8
  width = min(width, 64);
80026af6:	ee f8 ff e4 	ld.w	r8,r7[-28]
80026afa:	ef 48 ff f8 	st.w	r7[-8],r8
80026afe:	34 08       	mov	r8,64
80026b00:	ef 48 ff fc 	st.w	r7[-4],r8
80026b04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b08:	ee f9 ff fc 	ld.w	r9,r7[-4]
80026b0c:	f0 09 0d 48 	min	r8,r8,r9
80026b10:	ef 48 ff f4 	st.w	r7[-12],r8
80026b14:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026b18:	ef 48 ff e4 	st.w	r7[-28],r8
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++, value >>= 1)
80026b1c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80026b20:	ef 48 ff f0 	st.w	r7[-16],r8
80026b24:	c2 88       	rjmp	80026b74 <flashc_set_gp_fuse_bitfield+0xa8>
  {
    flashc_set_gp_fuse_bit(gp_fuse_bit, value & 0x01);
80026b26:	ee f8 ff e0 	ld.w	r8,r7[-32]
80026b2a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80026b2e:	5c 58       	castu.b	r8
80026b30:	10 9b       	mov	r11,r8
80026b32:	ee fc ff f0 	ld.w	r12,r7[-16]
80026b36:	f0 16 01 22 	mcall	r6[1160]
    error_status |= flashc_error_status;
80026b3a:	ec f8 00 54 	ld.w	r8,r6[84]
80026b3e:	70 08       	ld.w	r8,r8[0x0]
80026b40:	ee f9 ff ec 	ld.w	r9,r7[-20]
80026b44:	f3 e8 10 08 	or	r8,r9,r8
80026b48:	ef 48 ff ec 	st.w	r7[-20],r8
{
  unsigned int error_status = 0;
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
  width = min(width, 64);
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++, value >>= 1)
80026b4c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026b50:	2f f8       	sub	r8,-1
80026b52:	ef 48 ff f0 	st.w	r7[-16],r8
80026b56:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026b5a:	bf 78       	lsl	r8,0x1f
80026b5c:	ee f9 ff e0 	ld.w	r9,r7[-32]
80026b60:	a1 99       	lsr	r9,0x1
80026b62:	f3 e8 10 08 	or	r8,r9,r8
80026b66:	ef 48 ff e0 	st.w	r7[-32],r8
80026b6a:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026b6e:	a1 98       	lsr	r8,0x1
80026b70:	ef 48 ff dc 	st.w	r7[-36],r8
80026b74:	ee f9 ff e8 	ld.w	r9,r7[-24]
80026b78:	ee f8 ff e4 	ld.w	r8,r7[-28]
80026b7c:	10 09       	add	r9,r8
80026b7e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026b82:	10 39       	cp.w	r9,r8
80026b84:	fe 9b ff d1 	brhi	80026b26 <flashc_set_gp_fuse_bitfield+0x5a>
  {
    flashc_set_gp_fuse_bit(gp_fuse_bit, value & 0x01);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
80026b88:	ec f8 00 54 	ld.w	r8,r6[84]
80026b8c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80026b90:	91 09       	st.w	r8[0x0],r9
}
80026b92:	2f 7d       	sub	sp,-36
80026b94:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026b98:	80 02       	ld.sh	r2,r0[0x0]
80026b9a:	69 5a       	ld.w	r10,r4[0x54]

80026b9c <flashc_set_gp_fuse_byte>:


void flashc_set_gp_fuse_byte(unsigned int gp_fuse_byte, U8 value)
{
80026b9c:	eb cd 40 c0 	pushm	r6-r7,lr
80026ba0:	1a 97       	mov	r7,sp
80026ba2:	20 3d       	sub	sp,12
80026ba4:	49 c6       	lddpc	r6,80026c14 <flashc_set_gp_fuse_byte+0x78>
80026ba6:	1e 26       	rsub	r6,pc
80026ba8:	ef 4c ff f8 	st.w	r7[-8],r12
80026bac:	16 98       	mov	r8,r11
80026bae:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned int error_status;
  switch (value)
80026bb2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80026bb6:	58 08       	cp.w	r8,0
80026bb8:	c0 a0       	breq	80026bcc <flashc_set_gp_fuse_byte+0x30>
80026bba:	e0 48 00 ff 	cp.w	r8,255
80026bbe:	c0 d1       	brne	80026bd8 <flashc_set_gp_fuse_byte+0x3c>
  {
  case 0xFF:
    flashc_erase_gp_fuse_byte(gp_fuse_byte, false);
80026bc0:	30 0b       	mov	r11,0
80026bc2:	ee fc ff f8 	ld.w	r12,r7[-8]
80026bc6:	f0 16 01 16 	mcall	r6[1112]
    break;
80026bca:	c2 18       	rjmp	80026c0c <flashc_set_gp_fuse_byte+0x70>
  case 0x00:
    flashc_write_gp_fuse_byte(gp_fuse_byte, 0x00);
80026bcc:	30 0b       	mov	r11,0
80026bce:	ee fc ff f8 	ld.w	r12,r7[-8]
80026bd2:	f0 16 00 92 	mcall	r6[584]
    break;
80026bd6:	c1 b8       	rjmp	80026c0c <flashc_set_gp_fuse_byte+0x70>
  default:
    flashc_erase_gp_fuse_byte(gp_fuse_byte, false);
80026bd8:	30 0b       	mov	r11,0
80026bda:	ee fc ff f8 	ld.w	r12,r7[-8]
80026bde:	f0 16 01 16 	mcall	r6[1112]
    error_status = flashc_error_status;
80026be2:	ec f8 00 54 	ld.w	r8,r6[84]
80026be6:	70 08       	ld.w	r8,r8[0x0]
80026be8:	ef 48 ff fc 	st.w	r7[-4],r8
    flashc_write_gp_fuse_byte(gp_fuse_byte, value);
80026bec:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80026bf0:	10 9b       	mov	r11,r8
80026bf2:	ee fc ff f8 	ld.w	r12,r7[-8]
80026bf6:	f0 16 00 92 	mcall	r6[584]
    flashc_error_status |= error_status;
80026bfa:	ec f8 00 54 	ld.w	r8,r6[84]
80026bfe:	70 09       	ld.w	r9,r8[0x0]
80026c00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c04:	10 49       	or	r9,r8
80026c06:	ec f8 00 54 	ld.w	r8,r6[84]
80026c0a:	91 09       	st.w	r8[0x0],r9
  }
}
80026c0c:	2f dd       	sub	sp,-12
80026c0e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026c12:	00 00       	add	r0,r0
80026c14:	80 02       	ld.sh	r2,r0[0x0]
80026c16:	6a 2a       	ld.w	r10,r5[0x8]

80026c18 <flashc_set_all_gp_fuses>:


void flashc_set_all_gp_fuses(U64 value)
{
80026c18:	eb cd 40 c0 	pushm	r6-r7,lr
80026c1c:	1a 97       	mov	r7,sp
80026c1e:	20 3d       	sub	sp,12
80026c20:	49 86       	lddpc	r6,80026c80 <flashc_set_all_gp_fuses+0x68>
80026c22:	1e 26       	rsub	r6,pc
80026c24:	ee eb ff f4 	st.d	r7[-12],r10
  unsigned int error_status;
  switch (value)
80026c28:	ee e8 ff f4 	ld.d	r8,r7[-12]
80026c2c:	58 08       	cp.w	r8,0
80026c2e:	5c 29       	cpc	r9
80026c30:	c0 b0       	breq	80026c46 <flashc_set_all_gp_fuses+0x2e>
80026c32:	3f fa       	mov	r10,-1
80026c34:	3f fb       	mov	r11,-1
80026c36:	14 38       	cp.w	r8,r10
80026c38:	f6 09 13 00 	cpc	r9,r11
80026c3c:	c0 a1       	brne	80026c50 <flashc_set_all_gp_fuses+0x38>
  {
  case 0xFFFFFFFFFFFFFFFFULL:
    flashc_erase_all_gp_fuses(false);
80026c3e:	30 0c       	mov	r12,0
80026c40:	f0 16 00 d7 	mcall	r6[860]
    break;
80026c44:	c1 b8       	rjmp	80026c7a <flashc_set_all_gp_fuses+0x62>
  case 0x0000000000000000ULL:
    flashc_write_all_gp_fuses(0x0000000000000000ULL);
80026c46:	30 0a       	mov	r10,0
80026c48:	30 0b       	mov	r11,0
80026c4a:	f0 16 00 f9 	mcall	r6[996]
    break;
80026c4e:	c1 68       	rjmp	80026c7a <flashc_set_all_gp_fuses+0x62>
  default:
    flashc_erase_all_gp_fuses(false);
80026c50:	30 0c       	mov	r12,0
80026c52:	f0 16 00 d7 	mcall	r6[860]
    error_status = flashc_error_status;
80026c56:	ec f8 00 54 	ld.w	r8,r6[84]
80026c5a:	70 08       	ld.w	r8,r8[0x0]
80026c5c:	ef 48 ff fc 	st.w	r7[-4],r8
    flashc_write_all_gp_fuses(value);
80026c60:	ee ea ff f4 	ld.d	r10,r7[-12]
80026c64:	f0 16 00 f9 	mcall	r6[996]
    flashc_error_status |= error_status;
80026c68:	ec f8 00 54 	ld.w	r8,r6[84]
80026c6c:	70 09       	ld.w	r9,r8[0x0]
80026c6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c72:	10 49       	or	r9,r8
80026c74:	ec f8 00 54 	ld.w	r8,r6[84]
80026c78:	91 09       	st.w	r8[0x0],r9
  }
}
80026c7a:	2f dd       	sub	sp,-12
80026c7c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026c80:	80 02       	ld.sh	r2,r0[0x0]
80026c82:	6a a6       	ld.w	r6,r5[0x28]

80026c84 <flashc_clear_page_buffer>:
 */
//! @{


void flashc_clear_page_buffer(void)
{
80026c84:	eb cd 40 c0 	pushm	r6-r7,lr
80026c88:	1a 97       	mov	r7,sp
80026c8a:	48 56       	lddpc	r6,80026c9c <flashc_clear_page_buffer+0x18>
80026c8c:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_CPB, -1);
80026c8e:	3f fb       	mov	r11,-1
80026c90:	30 3c       	mov	r12,3
80026c92:	f0 16 00 2a 	mcall	r6[168]
}
80026c96:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026c9a:	00 00       	add	r0,r0
80026c9c:	80 02       	ld.sh	r2,r0[0x0]
80026c9e:	6b 10       	ld.w	r0,r5[0x44]

80026ca0 <flashc_is_page_erased>:


bool flashc_is_page_erased(void)
{
80026ca0:	eb cd 40 80 	pushm	r7,lr
80026ca4:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
80026ca6:	fe 68 00 00 	mov	r8,-131072
80026caa:	70 28       	ld.w	r8,r8[0x8]
80026cac:	e2 18 00 20 	andl	r8,0x20,COH
80026cb0:	5f 18       	srne	r8
80026cb2:	5c 58       	castu.b	r8
}
80026cb4:	10 9c       	mov	r12,r8
80026cb6:	e3 cd 80 80 	ldm	sp++,r7,pc

80026cba <flashc_quick_page_read>:


bool flashc_quick_page_read(int page_number)
{
80026cba:	eb cd 40 c0 	pushm	r6-r7,lr
80026cbe:	1a 97       	mov	r7,sp
80026cc0:	20 1d       	sub	sp,4
80026cc2:	48 96       	lddpc	r6,80026ce4 <flashc_quick_page_read+0x2a>
80026cc4:	1e 26       	rsub	r6,pc
80026cc6:	ef 4c ff fc 	st.w	r7[-4],r12
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
80026cca:	ee fb ff fc 	ld.w	r11,r7[-4]
80026cce:	30 cc       	mov	r12,12
80026cd0:	f0 16 00 2a 	mcall	r6[168]
  return flashc_is_page_erased();
80026cd4:	f0 16 00 e8 	mcall	r6[928]
80026cd8:	18 98       	mov	r8,r12
}
80026cda:	10 9c       	mov	r12,r8
80026cdc:	2f fd       	sub	sp,-4
80026cde:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026ce2:	00 00       	add	r0,r0
80026ce4:	80 02       	ld.sh	r2,r0[0x0]
80026ce6:	6b 48       	ld.w	r8,r5[0x50]

80026ce8 <flashc_erase_page>:


bool flashc_erase_page(int page_number, bool check)
{
80026ce8:	eb cd 40 c0 	pushm	r6-r7,lr
80026cec:	1a 97       	mov	r7,sp
80026cee:	20 4d       	sub	sp,16
80026cf0:	49 86       	lddpc	r6,80026d50 <flashc_erase_page+0x68>
80026cf2:	1e 26       	rsub	r6,pc
80026cf4:	ef 4c ff f4 	st.w	r7[-12],r12
80026cf8:	16 98       	mov	r8,r11
80026cfa:	ef 68 ff f0 	st.b	r7[-16],r8
  bool page_erased = true;
80026cfe:	30 18       	mov	r8,1
80026d00:	ef 68 ff fb 	st.b	r7[-5],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
80026d04:	ee fb ff f4 	ld.w	r11,r7[-12]
80026d08:	30 2c       	mov	r12,2
80026d0a:	f0 16 00 2a 	mcall	r6[168]
  if (check)
80026d0e:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80026d12:	30 08       	mov	r8,0
80026d14:	f0 09 18 00 	cp.b	r9,r8
80026d18:	c1 50       	breq	80026d42 <flashc_erase_page+0x5a>
  {
    unsigned int error_status = flashc_error_status;
80026d1a:	ec f8 00 54 	ld.w	r8,r6[84]
80026d1e:	70 08       	ld.w	r8,r8[0x0]
80026d20:	ef 48 ff fc 	st.w	r7[-4],r8
    page_erased = flashc_quick_page_read(-1);
80026d24:	3f fc       	mov	r12,-1
80026d26:	f0 16 01 7f 	mcall	r6[1532]
80026d2a:	18 98       	mov	r8,r12
80026d2c:	ef 68 ff fb 	st.b	r7[-5],r8
    flashc_error_status |= error_status;
80026d30:	ec f8 00 54 	ld.w	r8,r6[84]
80026d34:	70 09       	ld.w	r9,r8[0x0]
80026d36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d3a:	10 49       	or	r9,r8
80026d3c:	ec f8 00 54 	ld.w	r8,r6[84]
80026d40:	91 09       	st.w	r8[0x0],r9
  }
  return page_erased;
80026d42:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
80026d46:	10 9c       	mov	r12,r8
80026d48:	2f cd       	sub	sp,-16
80026d4a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026d4e:	00 00       	add	r0,r0
80026d50:	80 02       	ld.sh	r2,r0[0x0]
80026d52:	6b 76       	ld.w	r6,r5[0x5c]

80026d54 <flashc_erase_all_pages>:


bool flashc_erase_all_pages(bool check)
{
80026d54:	eb cd 40 e0 	pushm	r5-r7,lr
80026d58:	1a 97       	mov	r7,sp
80026d5a:	20 4d       	sub	sp,16
80026d5c:	49 f6       	lddpc	r6,80026dd8 <flashc_erase_all_pages+0x84>
80026d5e:	1e 26       	rsub	r6,pc
80026d60:	18 98       	mov	r8,r12
80026d62:	ef 68 ff f0 	st.b	r7[-16],r8
  bool all_pages_erased = true;
80026d66:	30 18       	mov	r8,1
80026d68:	ef 68 ff f7 	st.b	r7[-9],r8
  unsigned int error_status = 0;
80026d6c:	30 08       	mov	r8,0
80026d6e:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int page_number = flashc_get_page_count();
80026d72:	f0 16 01 0c 	mcall	r6[1072]
80026d76:	18 98       	mov	r8,r12
80026d78:	ef 48 ff fc 	st.w	r7[-4],r8
  while (page_number)
80026d7c:	c1 f8       	rjmp	80026dba <flashc_erase_all_pages+0x66>
  {
    all_pages_erased &= flashc_erase_page(--page_number, check);
80026d7e:	ef 35 ff f7 	ld.ub	r5,r7[-9]
80026d82:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80026d86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d8a:	20 18       	sub	r8,1
80026d8c:	ef 48 ff fc 	st.w	r7[-4],r8
80026d90:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d94:	12 9b       	mov	r11,r9
80026d96:	10 9c       	mov	r12,r8
80026d98:	f0 16 00 a9 	mcall	r6[676]
80026d9c:	18 98       	mov	r8,r12
80026d9e:	eb e8 00 08 	and	r8,r5,r8
80026da2:	5f 18       	srne	r8
80026da4:	ef 68 ff f7 	st.b	r7[-9],r8
    error_status |= flashc_error_status;
80026da8:	ec f8 00 54 	ld.w	r8,r6[84]
80026dac:	70 08       	ld.w	r8,r8[0x0]
80026dae:	ee f9 ff f8 	ld.w	r9,r7[-8]
80026db2:	f3 e8 10 08 	or	r8,r9,r8
80026db6:	ef 48 ff f8 	st.w	r7[-8],r8
bool flashc_erase_all_pages(bool check)
{
  bool all_pages_erased = true;
  unsigned int error_status = 0;
  unsigned int page_number = flashc_get_page_count();
  while (page_number)
80026dba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026dbe:	58 08       	cp.w	r8,0
80026dc0:	cd f1       	brne	80026d7e <flashc_erase_all_pages+0x2a>
  {
    all_pages_erased &= flashc_erase_page(--page_number, check);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
80026dc2:	ec f8 00 54 	ld.w	r8,r6[84]
80026dc6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80026dca:	91 09       	st.w	r8[0x0],r9
  return all_pages_erased;
80026dcc:	ef 38 ff f7 	ld.ub	r8,r7[-9]
}
80026dd0:	10 9c       	mov	r12,r8
80026dd2:	2f cd       	sub	sp,-16
80026dd4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80026dd8:	80 02       	ld.sh	r2,r0[0x0]
80026dda:	6b e2       	ld.w	r2,r5[0x78]

80026ddc <flashc_write_page>:


void flashc_write_page(int page_number)
{
80026ddc:	eb cd 40 c0 	pushm	r6-r7,lr
80026de0:	1a 97       	mov	r7,sp
80026de2:	20 1d       	sub	sp,4
80026de4:	48 66       	lddpc	r6,80026dfc <flashc_write_page+0x20>
80026de6:	1e 26       	rsub	r6,pc
80026de8:	ef 4c ff fc 	st.w	r7[-4],r12
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WP, page_number);
80026dec:	ee fb ff fc 	ld.w	r11,r7[-4]
80026df0:	30 1c       	mov	r12,1
80026df2:	f0 16 00 2a 	mcall	r6[168]
}
80026df6:	2f fd       	sub	sp,-4
80026df8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026dfc:	80 02       	ld.sh	r2,r0[0x0]
80026dfe:	6c 6a       	ld.w	r10,r6[0x18]

80026e00 <flashc_quick_user_page_read>:


bool flashc_quick_user_page_read(void)
{
80026e00:	eb cd 40 c0 	pushm	r6-r7,lr
80026e04:	1a 97       	mov	r7,sp
80026e06:	48 76       	lddpc	r6,80026e20 <flashc_quick_user_page_read+0x20>
80026e08:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
80026e0a:	3f fb       	mov	r11,-1
80026e0c:	30 fc       	mov	r12,15
80026e0e:	f0 16 00 2a 	mcall	r6[168]
  return flashc_is_page_erased();
80026e12:	f0 16 00 e8 	mcall	r6[928]
80026e16:	18 98       	mov	r8,r12
}
80026e18:	10 9c       	mov	r12,r8
80026e1a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026e1e:	00 00       	add	r0,r0
80026e20:	80 02       	ld.sh	r2,r0[0x0]
80026e22:	6c 8c       	ld.w	r12,r6[0x20]

80026e24 <flashc_erase_user_page>:


bool flashc_erase_user_page(bool check)
{
80026e24:	eb cd 40 c0 	pushm	r6-r7,lr
80026e28:	1a 97       	mov	r7,sp
80026e2a:	20 1d       	sub	sp,4
80026e2c:	48 c6       	lddpc	r6,80026e5c <flashc_erase_user_page+0x38>
80026e2e:	1e 26       	rsub	r6,pc
80026e30:	18 98       	mov	r8,r12
80026e32:	ef 68 ff fc 	st.b	r7[-4],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EUP, -1);
80026e36:	3f fb       	mov	r11,-1
80026e38:	30 ec       	mov	r12,14
80026e3a:	f0 16 00 2a 	mcall	r6[168]
  return (check) ? flashc_quick_user_page_read() : true;
80026e3e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80026e42:	30 08       	mov	r8,0
80026e44:	f0 09 18 00 	cp.b	r9,r8
80026e48:	c0 50       	breq	80026e52 <flashc_erase_user_page+0x2e>
80026e4a:	f0 16 02 1f 	mcall	r6[2172]
80026e4e:	18 98       	mov	r8,r12
80026e50:	c0 28       	rjmp	80026e54 <flashc_erase_user_page+0x30>
80026e52:	30 18       	mov	r8,1
}
80026e54:	10 9c       	mov	r12,r8
80026e56:	2f fd       	sub	sp,-4
80026e58:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026e5c:	80 02       	ld.sh	r2,r0[0x0]
80026e5e:	6c b2       	ld.w	r2,r6[0x2c]

80026e60 <flashc_write_user_page>:


void flashc_write_user_page(void)
{
80026e60:	eb cd 40 c0 	pushm	r6-r7,lr
80026e64:	1a 97       	mov	r7,sp
80026e66:	48 56       	lddpc	r6,80026e78 <flashc_write_user_page+0x18>
80026e68:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WUP, -1);
80026e6a:	3f fb       	mov	r11,-1
80026e6c:	30 dc       	mov	r12,13
80026e6e:	f0 16 00 2a 	mcall	r6[168]
}
80026e72:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026e76:	00 00       	add	r0,r0
80026e78:	80 02       	ld.sh	r2,r0[0x0]
80026e7a:	6c ec       	ld.w	r12,r6[0x38]

80026e7c <flashc_memset8>:


volatile void *flashc_memset8(volatile void *dst, U8 src, size_t nbytes, bool erase)
{
80026e7c:	eb cd 40 c0 	pushm	r6-r7,lr
80026e80:	1a 97       	mov	r7,sp
80026e82:	20 4d       	sub	sp,16
80026e84:	49 26       	lddpc	r6,80026ecc <flashc_memset8+0x50>
80026e86:	1e 26       	rsub	r6,pc
80026e88:	ef 4c ff fc 	st.w	r7[-4],r12
80026e8c:	ef 4a ff f4 	st.w	r7[-12],r10
80026e90:	12 98       	mov	r8,r9
80026e92:	16 99       	mov	r9,r11
80026e94:	ef 69 ff f8 	st.b	r7[-8],r9
80026e98:	ef 68 ff f0 	st.b	r7[-16],r8
  return flashc_memset16(dst, src | (U16)src << 8, nbytes, erase);
80026e9c:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80026ea0:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80026ea4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80026ea8:	a9 68       	lsl	r8,0x8
80026eaa:	5c 88       	casts.h	r8
80026eac:	f5 e8 10 08 	or	r8,r10,r8
80026eb0:	5c 88       	casts.h	r8
80026eb2:	5c 78       	castu.h	r8
80026eb4:	ee fa ff f4 	ld.w	r10,r7[-12]
80026eb8:	10 9b       	mov	r11,r8
80026eba:	ee fc ff fc 	ld.w	r12,r7[-4]
80026ebe:	f0 16 01 8a 	mcall	r6[1576]
80026ec2:	18 98       	mov	r8,r12
}
80026ec4:	10 9c       	mov	r12,r8
80026ec6:	2f cd       	sub	sp,-16
80026ec8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026ecc:	80 02       	ld.sh	r2,r0[0x0]
80026ece:	6d 0a       	ld.w	r10,r6[0x40]

80026ed0 <flashc_memset16>:


volatile void *flashc_memset16(volatile void *dst, U16 src, size_t nbytes, bool erase)
{
80026ed0:	eb cd 40 c0 	pushm	r6-r7,lr
80026ed4:	1a 97       	mov	r7,sp
80026ed6:	20 4d       	sub	sp,16
80026ed8:	49 16       	lddpc	r6,80026f1c <flashc_memset16+0x4c>
80026eda:	1e 26       	rsub	r6,pc
80026edc:	ef 4c ff fc 	st.w	r7[-4],r12
80026ee0:	ef 4a ff f4 	st.w	r7[-12],r10
80026ee4:	12 98       	mov	r8,r9
80026ee6:	16 99       	mov	r9,r11
80026ee8:	ef 59 ff f8 	st.h	r7[-8],r9
80026eec:	ef 68 ff f0 	st.b	r7[-16],r8
  return flashc_memset32(dst, src | (U32)src << 16, nbytes, erase);
80026ef0:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80026ef4:	ef 1a ff f8 	ld.uh	r10,r7[-8]
80026ef8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80026efc:	b1 68       	lsl	r8,0x10
80026efe:	f5 e8 10 08 	or	r8,r10,r8
80026f02:	ee fa ff f4 	ld.w	r10,r7[-12]
80026f06:	10 9b       	mov	r11,r8
80026f08:	ee fc ff fc 	ld.w	r12,r7[-4]
80026f0c:	f0 16 01 c6 	mcall	r6[1816]
80026f10:	18 98       	mov	r8,r12
}
80026f12:	10 9c       	mov	r12,r8
80026f14:	2f cd       	sub	sp,-16
80026f16:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026f1a:	00 00       	add	r0,r0
80026f1c:	80 02       	ld.sh	r2,r0[0x0]
80026f1e:	6d 5e       	ld.w	lr,r6[0x54]

80026f20 <flashc_memset32>:


volatile void *flashc_memset32(volatile void *dst, U32 src, size_t nbytes, bool erase)
{
80026f20:	eb cd 40 cf 	pushm	r0-r3,r6-r7,lr
80026f24:	1a 97       	mov	r7,sp
80026f26:	20 6d       	sub	sp,24
80026f28:	49 56       	lddpc	r6,80026f7c <flashc_memset32+0x5c>
80026f2a:	1e 26       	rsub	r6,pc
80026f2c:	ef 4c ff fc 	st.w	r7[-4],r12
80026f30:	ef 4b ff f8 	st.w	r7[-8],r11
80026f34:	ef 4a ff f4 	st.w	r7[-12],r10
80026f38:	12 98       	mov	r8,r9
80026f3a:	ef 68 ff f0 	st.b	r7[-16],r8
  return flashc_memset64(dst, src | (U64)src << 32, nbytes, erase);
80026f3e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80026f42:	ee f0 ff f8 	ld.w	r0,r7[-8]
80026f46:	30 01       	mov	r1,0
80026f48:	ee f9 ff f8 	ld.w	r9,r7[-8]
80026f4c:	ef 49 ff ec 	st.w	r7[-20],r9
80026f50:	30 09       	mov	r9,0
80026f52:	ef 49 ff e8 	st.w	r7[-24],r9
80026f56:	ee f3 ff ec 	ld.w	r3,r7[-20]
80026f5a:	a1 63       	lsl	r3,0x0
80026f5c:	30 02       	mov	r2,0
80026f5e:	e1 e2 10 0a 	or	r10,r0,r2
80026f62:	e3 e3 10 0b 	or	r11,r1,r3
80026f66:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026f6a:	ee fc ff fc 	ld.w	r12,r7[-4]
80026f6e:	f0 16 01 ab 	mcall	r6[1708]
80026f72:	18 98       	mov	r8,r12
}
80026f74:	10 9c       	mov	r12,r8
80026f76:	2f ad       	sub	sp,-24
80026f78:	e3 cd 80 cf 	ldm	sp++,r0-r3,r6-r7,pc
80026f7c:	80 02       	ld.sh	r2,r0[0x0]
80026f7e:	6d ae       	ld.w	lr,r6[0x68]

80026f80 <flashc_memset64>:


volatile void *flashc_memset64(volatile void *dst, U64 src, size_t nbytes, bool erase)
{
80026f80:	eb cd 40 c0 	pushm	r6-r7,lr
80026f84:	1a 97       	mov	r7,sp
80026f86:	21 bd       	sub	sp,108
80026f88:	fe f6 04 14 	ld.w	r6,pc[1044]
80026f8c:	1e 26       	rsub	r6,pc
80026f8e:	ef 4c ff a4 	st.w	r7[-92],r12
80026f92:	ee eb ff 9c 	st.d	r7[-100],r10
80026f96:	ef 49 ff 98 	st.w	r7[-104],r9
80026f9a:	ef 68 ff 94 	st.b	r7[-108],r8
  // Use aggregated pointers to have several alignments available for a same address.
  UnionCVPtr flash_array_end;
  UnionVPtr dest;
  Union64 source = {0};
80026f9e:	30 08       	mov	r8,0
80026fa0:	30 09       	mov	r9,0
80026fa2:	ee e9 ff d8 	st.d	r7[-40],r8
  StructCVPtr dest_end;
  UnionCVPtr flash_page_source_end;
  bool incomplete_flash_page_end;
  Union64 flash_dword;
  UnionVPtr tmp;
  unsigned int error_status = 0;
80026fa6:	30 08       	mov	r8,0
80026fa8:	ef 48 ff ec 	st.w	r7[-20],r8
  unsigned int i;

  // Reformat arguments.
  flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
80026fac:	f0 16 00 ce 	mcall	r6[824]
80026fb0:	18 99       	mov	r9,r12
80026fb2:	fc 18 80 00 	movh	r8,0x8000
80026fb6:	f2 08 00 08 	add	r8,r9,r8
80026fba:	ef 48 ff e4 	st.w	r7[-28],r8
  dest.u8ptr = dst;
80026fbe:	ee f8 ff a4 	ld.w	r8,r7[-92]
80026fc2:	ef 48 ff e0 	st.w	r7[-32],r8
  for (i = (Get_align((U32)dest.u8ptr, sizeof(U64)) - 1) & (sizeof(U64) - 1);
80026fc6:	ee f8 ff e0 	ld.w	r8,r7[-32]
80026fca:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80026fce:	20 18       	sub	r8,1
80026fd0:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80026fd4:	ef 48 ff f0 	st.w	r7[-16],r8
80026fd8:	c1 f8       	rjmp	80027016 <flashc_memset64+0x96>
       src; i = (i - 1) & (sizeof(U64) - 1))
  {
    source.u8[i] = src;
80026fda:	ee f9 ff f0 	ld.w	r9,r7[-16]
80026fde:	ef 38 ff a3 	ld.ub	r8,r7[-93]
80026fe2:	ee 09 00 09 	add	r9,r7,r9
80026fe6:	f3 68 ff d8 	st.b	r9[-40],r8
    src >>= 8;
80026fea:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80026fee:	b9 68       	lsl	r8,0x18
80026ff0:	ee f9 ff a0 	ld.w	r9,r7[-96]
80026ff4:	a9 89       	lsr	r9,0x8
80026ff6:	f3 e8 10 08 	or	r8,r9,r8
80026ffa:	ef 48 ff a0 	st.w	r7[-96],r8
80026ffe:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80027002:	a9 88       	lsr	r8,0x8
80027004:	ef 48 ff 9c 	st.w	r7[-100],r8

  // Reformat arguments.
  flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
  dest.u8ptr = dst;
  for (i = (Get_align((U32)dest.u8ptr, sizeof(U64)) - 1) & (sizeof(U64) - 1);
       src; i = (i - 1) & (sizeof(U64) - 1))
80027008:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002700c:	20 18       	sub	r8,1
8002700e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80027012:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int i;

  // Reformat arguments.
  flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
  dest.u8ptr = dst;
  for (i = (Get_align((U32)dest.u8ptr, sizeof(U64)) - 1) & (sizeof(U64) - 1);
80027016:	ee e8 ff 9c 	ld.d	r8,r7[-100]
8002701a:	58 08       	cp.w	r8,0
8002701c:	5c 29       	cpc	r9
8002701e:	cd e1       	brne	80026fda <flashc_memset64+0x5a>
       src; i = (i - 1) & (sizeof(U64) - 1))
  {
    source.u8[i] = src;
    src >>= 8;
  }
  dest_end.u8ptr = dest.u8ptr + nbytes;
80027020:	ee f9 ff e0 	ld.w	r9,r7[-32]
80027024:	ee f8 ff 98 	ld.w	r8,r7[-104]
80027028:	f2 08 00 08 	add	r8,r9,r8
8002702c:	ef 48 ff d4 	st.w	r7[-44],r8

  // If destination is outside flash, go to next flash page if any.
  if (dest.u8ptr < AVR32_FLASH)
80027030:	ee f8 ff e0 	ld.w	r8,r7[-32]
80027034:	e0 69 ff ff 	mov	r9,65535
80027038:	ea 19 7f ff 	orh	r9,0x7fff
8002703c:	12 38       	cp.w	r8,r9
8002703e:	e0 8b 00 07 	brhi	8002704c <flashc_memset64+0xcc>
  {
    dest.u8ptr = AVR32_FLASH;
80027042:	fc 18 80 00 	movh	r8,0x8000
80027046:	ef 48 ff e0 	st.w	r7[-32],r8
8002704a:	c1 58       	rjmp	80027074 <flashc_memset64+0xf4>
  }
  else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE)
8002704c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80027050:	ee f8 ff e0 	ld.w	r8,r7[-32]
80027054:	10 39       	cp.w	r9,r8
80027056:	e0 8b 00 0f 	brhi	80027074 <flashc_memset64+0xf4>
8002705a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002705e:	e0 69 ff ff 	mov	r9,65535
80027062:	ea 19 80 7f 	orh	r9,0x807f
80027066:	12 38       	cp.w	r8,r9
80027068:	e0 8b 00 06 	brhi	80027074 <flashc_memset64+0xf4>
  {
    dest.u8ptr = AVR32_FLASHC_USER_PAGE;
8002706c:	fc 18 80 80 	movh	r8,0x8080
80027070:	ef 48 ff e0 	st.w	r7[-32],r8
  }

  // If end of destination is outside flash, move it to the end of the previous flash page if any.
  if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE)
80027074:	ee f8 ff d4 	ld.w	r8,r7[-44]
80027078:	e0 69 02 00 	mov	r9,512
8002707c:	ea 19 80 80 	orh	r9,0x8080
80027080:	12 38       	cp.w	r8,r9
80027082:	e0 88 00 09 	brls	80027094 <flashc_memset64+0x114>
  {
    dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
80027086:	e0 68 02 00 	mov	r8,512
8002708a:	ea 18 80 80 	orh	r8,0x8080
8002708e:	ef 48 ff d4 	st.w	r7[-44],r8
80027092:	c1 38       	rjmp	800270b8 <flashc_memset64+0x138>
  }
  else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr)
80027094:	ee f8 ff d4 	ld.w	r8,r7[-44]
80027098:	fc 19 80 80 	movh	r9,0x8080
8002709c:	12 38       	cp.w	r8,r9
8002709e:	e0 8b 00 0d 	brhi	800270b8 <flashc_memset64+0x138>
800270a2:	ee f9 ff d4 	ld.w	r9,r7[-44]
800270a6:	ee f8 ff e4 	ld.w	r8,r7[-28]
800270aa:	10 39       	cp.w	r9,r8
800270ac:	e0 88 00 06 	brls	800270b8 <flashc_memset64+0x138>
  {
    dest_end.u8ptr = flash_array_end.u8ptr;
800270b0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800270b4:	ef 48 ff d4 	st.w	r7[-44],r8
  }

  // Align each end of destination pointer with its natural boundary.
  dest_end.u16ptr = (U16 *)Align_down((U32)dest_end.u8ptr, sizeof(U16));
800270b8:	ee f8 ff d4 	ld.w	r8,r7[-44]
800270bc:	a1 c8       	cbr	r8,0x0
800270be:	ef 48 ff cc 	st.w	r7[-52],r8
  dest_end.u32ptr = (U32 *)Align_down((U32)dest_end.u16ptr, sizeof(U32));
800270c2:	ee f8 ff cc 	ld.w	r8,r7[-52]
800270c6:	e0 18 ff fc 	andl	r8,0xfffc
800270ca:	ef 48 ff c4 	st.w	r7[-60],r8
  dest_end.u64ptr = (U64 *)Align_down((U32)dest_end.u32ptr, sizeof(U64));
800270ce:	ee f8 ff c4 	ld.w	r8,r7[-60]
800270d2:	e0 18 ff f8 	andl	r8,0xfff8
800270d6:	ef 48 ff bc 	st.w	r7[-68],r8

  // While end of destination is not reached...
  while (dest.u8ptr < dest_end.u8ptr)
800270da:	c4 f9       	rjmp	80027378 <flashc_memset64+0x3f8>
  {
    // Clear the page buffer in order to prepare data for a flash page write.
    flashc_clear_page_buffer();
800270dc:	f0 16 01 2e 	mcall	r6[1208]
    error_status |= flashc_error_status;
800270e0:	ec f8 00 54 	ld.w	r8,r6[84]
800270e4:	70 08       	ld.w	r8,r8[0x0]
800270e6:	ee f9 ff ec 	ld.w	r9,r7[-20]
800270ea:	f3 e8 10 08 	or	r8,r9,r8
800270ee:	ef 48 ff ec 	st.w	r7[-20],r8

    // Determine where the source data will end in the current flash page.
    flash_page_source_end.u64ptr =
      (U64 *)min((U32)dest_end.u64ptr,
800270f2:	ee f8 ff bc 	ld.w	r8,r7[-68]
800270f6:	ef 48 ff f8 	st.w	r7[-8],r8
800270fa:	ee f8 ff e0 	ld.w	r8,r7[-32]
800270fe:	e0 18 fe 00 	andl	r8,0xfe00
80027102:	f0 c8 fe 00 	sub	r8,r8,-512
80027106:	ef 48 ff fc 	st.w	r7[-4],r8
8002710a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002710e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027112:	f0 09 0d 48 	min	r8,r8,r9
80027116:	ef 48 ff f4 	st.w	r7[-12],r8
8002711a:	ee f8 ff f4 	ld.w	r8,r7[-12]
    // Clear the page buffer in order to prepare data for a flash page write.
    flashc_clear_page_buffer();
    error_status |= flashc_error_status;

    // Determine where the source data will end in the current flash page.
    flash_page_source_end.u64ptr =
8002711e:	ef 48 ff b4 	st.w	r7[-76],r8
      (U64 *)min((U32)dest_end.u64ptr,
                 Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

    // Determine if the current destination page has an incomplete end.
    incomplete_flash_page_end = (Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
80027122:	ee f8 ff e0 	ld.w	r8,r7[-32]
80027126:	10 9a       	mov	r10,r8
80027128:	e0 1a fe 00 	andl	r10,0xfe00
                                 Align_down((U32)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));
8002712c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80027130:	10 99       	mov	r9,r8
80027132:	e0 19 fe 00 	andl	r9,0xfe00
    flash_page_source_end.u64ptr =
      (U64 *)min((U32)dest_end.u64ptr,
                 Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

    // Determine if the current destination page has an incomplete end.
    incomplete_flash_page_end = (Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
80027136:	30 18       	mov	r8,1
80027138:	12 3a       	cp.w	r10,r9
8002713a:	c0 22       	brcc	8002713e <flashc_memset64+0x1be>
8002713c:	30 08       	mov	r8,0
8002713e:	ef 68 ff eb 	st.b	r7[-21],r8
                                 Align_down((U32)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

    // Use a flash double-word buffer to manage unaligned accesses.
    flash_dword.u64 = source.u64;
80027142:	ee e8 ff d8 	ld.d	r8,r7[-40]
80027146:	ee e9 ff ac 	st.d	r7[-84],r8

    // If destination does not point to the beginning of the current flash page...
    if (!Test_align((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE))
8002714a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002714e:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80027152:	c5 b0       	breq	80027208 <flashc_memset64+0x288>
    {
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80027154:	ee f8 ff e0 	ld.w	r8,r7[-32]
80027158:	e0 18 fe 00 	andl	r8,0xfe00
8002715c:	ef 48 ff a8 	st.w	r7[-88],r8
80027160:	c0 e8       	rjmp	8002717c <flashc_memset64+0x1fc>
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
        *tmp.u64ptr = *tmp.u64ptr;
80027162:	ee fa ff a8 	ld.w	r10,r7[-88]
80027166:	ee f8 ff a8 	ld.w	r8,r7[-88]
8002716a:	f0 e8 00 00 	ld.d	r8,r8[0]
8002716e:	f4 e9 00 00 	st.d	r10[0],r8
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
80027172:	ee f8 ff a8 	ld.w	r8,r7[-88]
80027176:	2f 88       	sub	r8,-8
80027178:	ef 48 ff a8 	st.w	r7[-88],r8
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
8002717c:	ee f9 ff a8 	ld.w	r9,r7[-88]
80027180:	ee f8 ff e0 	ld.w	r8,r7[-32]
80027184:	e0 18 ff f8 	andl	r8,0xfff8
    {
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80027188:	10 39       	cp.w	r9,r8
8002718a:	ce c3       	brcs	80027162 <flashc_memset64+0x1e2>
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
        *tmp.u64ptr = *tmp.u64ptr;

      // If destination is not 64-bit aligned...
      if (!Test_align((U32)dest.u8ptr, sizeof(U64)))
8002718c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80027190:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80027194:	c3 a0       	breq	80027208 <flashc_memset64+0x288>
        // Fill the beginning of the flash double-word buffer with the current
        // flash page data.
        // This is required by the hardware, even if page erase is not
        // requested, in order to be able to write successfully to erased parts
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
80027196:	30 08       	mov	r8,0
80027198:	ef 48 ff f0 	st.w	r7[-16],r8
8002719c:	c1 38       	rjmp	800271c2 <flashc_memset64+0x242>
          flash_dword.u8[i] = *tmp.u8ptr++;
8002719e:	ee fa ff f0 	ld.w	r10,r7[-16]
800271a2:	ee f8 ff a8 	ld.w	r8,r7[-88]
800271a6:	11 89       	ld.ub	r9,r8[0x0]
800271a8:	5c 59       	castu.b	r9
800271aa:	ee 0a 00 0a 	add	r10,r7,r10
800271ae:	f5 69 ff ac 	st.b	r10[-84],r9
800271b2:	2f f8       	sub	r8,-1
800271b4:	ef 48 ff a8 	st.w	r7[-88],r8
        // Fill the beginning of the flash double-word buffer with the current
        // flash page data.
        // This is required by the hardware, even if page erase is not
        // requested, in order to be able to write successfully to erased parts
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
800271b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800271bc:	2f f8       	sub	r8,-1
800271be:	ef 48 ff f0 	st.w	r7[-16],r8
800271c2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800271c6:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
800271ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800271ce:	10 39       	cp.w	r9,r8
800271d0:	fe 9b ff e7 	brhi	8002719e <flashc_memset64+0x21e>
          flash_dword.u8[i] = *tmp.u8ptr++;

        // Align the destination pointer with its 64-bit boundary.
        dest.u64ptr = (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
800271d4:	ee f8 ff e0 	ld.w	r8,r7[-32]
800271d8:	e0 18 ff f8 	andl	r8,0xfff8
800271dc:	ef 48 ff e0 	st.w	r7[-32],r8

        // If the current destination double-word is not the last one...
        if (dest.u64ptr < dest_end.u64ptr)
800271e0:	ee f9 ff e0 	ld.w	r9,r7[-32]
800271e4:	ee f8 ff bc 	ld.w	r8,r7[-68]
800271e8:	10 39       	cp.w	r9,r8
800271ea:	c0 f2       	brcc	80027208 <flashc_memset64+0x288>
        {
          // Write the flash double-word buffer to the page buffer and reinitialize it.
          *dest.u64ptr++ = flash_dword.u64;
800271ec:	ee fa ff e0 	ld.w	r10,r7[-32]
800271f0:	ee e8 ff ac 	ld.d	r8,r7[-84]
800271f4:	f4 e9 00 00 	st.d	r10[0],r8
800271f8:	f4 c8 ff f8 	sub	r8,r10,-8
800271fc:	ef 48 ff e0 	st.w	r7[-32],r8
          flash_dword.u64 = source.u64;
80027200:	ee e8 ff d8 	ld.d	r8,r7[-40]
80027204:	ee e9 ff ac 	st.d	r7[-84],r8
        }
      }
    }

    // Write the source data to the page buffer with 64-bit alignment.
    for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
80027208:	ee f8 ff b4 	ld.w	r8,r7[-76]
8002720c:	10 99       	mov	r9,r8
8002720e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80027212:	f2 08 01 08 	sub	r8,r9,r8
80027216:	a3 58       	asr	r8,0x3
80027218:	ef 48 ff f0 	st.w	r7[-16],r8
8002721c:	c1 08       	rjmp	8002723c <flashc_memset64+0x2bc>
      *dest.u64ptr++ = source.u64;
8002721e:	ee fa ff e0 	ld.w	r10,r7[-32]
80027222:	ee e8 ff d8 	ld.d	r8,r7[-40]
80027226:	f4 e9 00 00 	st.d	r10[0],r8
8002722a:	f4 c8 ff f8 	sub	r8,r10,-8
8002722e:	ef 48 ff e0 	st.w	r7[-32],r8
        }
      }
    }

    // Write the source data to the page buffer with 64-bit alignment.
    for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
80027232:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027236:	20 18       	sub	r8,1
80027238:	ef 48 ff f0 	st.w	r7[-16],r8
8002723c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027240:	58 08       	cp.w	r8,0
80027242:	ce e1       	brne	8002721e <flashc_memset64+0x29e>
      *dest.u64ptr++ = source.u64;

    // If the current destination page has an incomplete end...
    if (incomplete_flash_page_end)
80027244:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80027248:	30 08       	mov	r8,0
8002724a:	f0 09 18 00 	cp.b	r9,r8
8002724e:	c4 70       	breq	800272dc <flashc_memset64+0x35c>
    {
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      {
        tmp.u8ptr = (volatile U8 *)dest_end.u8ptr;
80027250:	ee f8 ff d4 	ld.w	r8,r7[-44]
80027254:	ef 48 ff a8 	st.w	r7[-88],r8

        // If end of destination is not 64-bit aligned...
        if (!Test_align((U32)dest_end.u8ptr, sizeof(U64)))
80027258:	ee f8 ff d4 	ld.w	r8,r7[-44]
8002725c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80027260:	c3 80       	breq	800272d0 <flashc_memset64+0x350>
        {
          // Fill the end of the flash double-word buffer with the current flash page data.
          for (i = Get_align((U32)dest_end.u8ptr, sizeof(U64)); i < sizeof(U64); i++)
80027262:	ee f8 ff d4 	ld.w	r8,r7[-44]
80027266:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8002726a:	ef 48 ff f0 	st.w	r7[-16],r8
8002726e:	c1 38       	rjmp	80027294 <flashc_memset64+0x314>
            flash_dword.u8[i] = *tmp.u8ptr++;
80027270:	ee fa ff f0 	ld.w	r10,r7[-16]
80027274:	ee f8 ff a8 	ld.w	r8,r7[-88]
80027278:	11 89       	ld.ub	r9,r8[0x0]
8002727a:	5c 59       	castu.b	r9
8002727c:	ee 0a 00 0a 	add	r10,r7,r10
80027280:	f5 69 ff ac 	st.b	r10[-84],r9
80027284:	2f f8       	sub	r8,-1
80027286:	ef 48 ff a8 	st.w	r7[-88],r8

        // If end of destination is not 64-bit aligned...
        if (!Test_align((U32)dest_end.u8ptr, sizeof(U64)))
        {
          // Fill the end of the flash double-word buffer with the current flash page data.
          for (i = Get_align((U32)dest_end.u8ptr, sizeof(U64)); i < sizeof(U64); i++)
8002728a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002728e:	2f f8       	sub	r8,-1
80027290:	ef 48 ff f0 	st.w	r7[-16],r8
80027294:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027298:	58 78       	cp.w	r8,7
8002729a:	fe 98 ff eb 	brls	80027270 <flashc_memset64+0x2f0>
            flash_dword.u8[i] = *tmp.u8ptr++;

          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
8002729e:	ee fa ff e0 	ld.w	r10,r7[-32]
800272a2:	ee e8 ff ac 	ld.d	r8,r7[-84]
800272a6:	f4 e9 00 00 	st.d	r10[0],r8
800272aa:	f4 c8 ff f8 	sub	r8,r10,-8
800272ae:	ef 48 ff e0 	st.w	r7[-32],r8
        }

        // Fill the end of the page buffer with the current flash page data.
        for (; !Test_align((U32)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++)
800272b2:	c1 08       	rjmp	800272d2 <flashc_memset64+0x352>
          *tmp.u64ptr = *tmp.u64ptr;
800272b4:	ee fa ff a8 	ld.w	r10,r7[-88]
800272b8:	ee f8 ff a8 	ld.w	r8,r7[-88]
800272bc:	f0 e8 00 00 	ld.d	r8,r8[0]
800272c0:	f4 e9 00 00 	st.d	r10[0],r8
          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
        }

        // Fill the end of the page buffer with the current flash page data.
        for (; !Test_align((U32)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++)
800272c4:	ee f8 ff a8 	ld.w	r8,r7[-88]
800272c8:	2f 88       	sub	r8,-8
800272ca:	ef 48 ff a8 	st.w	r7[-88],r8
800272ce:	c0 28       	rjmp	800272d2 <flashc_memset64+0x352>
800272d0:	d7 03       	nop
800272d2:	ee f8 ff a8 	ld.w	r8,r7[-88]
800272d6:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800272da:	ce d1       	brne	800272b4 <flashc_memset64+0x334>
          *tmp.u64ptr = *tmp.u64ptr;
      }
    }

    // If the current flash page is in the flash array...
    if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE)
800272dc:	ee f8 ff e0 	ld.w	r8,r7[-32]
800272e0:	fc 19 80 80 	movh	r9,0x8080
800272e4:	12 38       	cp.w	r8,r9
800272e6:	e0 8b 00 2c 	brhi	8002733e <flashc_memset64+0x3be>
    {
      // Erase the current page if requested and write it from the page buffer.
      if (erase)
800272ea:	ef 39 ff 94 	ld.ub	r9,r7[-108]
800272ee:	30 08       	mov	r8,0
800272f0:	f0 09 18 00 	cp.b	r9,r8
800272f4:	c0 e0       	breq	80027310 <flashc_memset64+0x390>
      {
        flashc_erase_page(-1, false);
800272f6:	30 0b       	mov	r11,0
800272f8:	3f fc       	mov	r12,-1
800272fa:	f0 16 00 a9 	mcall	r6[676]
        error_status |= flashc_error_status;
800272fe:	ec f8 00 54 	ld.w	r8,r6[84]
80027302:	70 08       	ld.w	r8,r8[0x0]
80027304:	ee f9 ff ec 	ld.w	r9,r7[-20]
80027308:	f3 e8 10 08 	or	r8,r9,r8
8002730c:	ef 48 ff ec 	st.w	r7[-20],r8
      }
      flashc_write_page(-1);
80027310:	3f fc       	mov	r12,-1
80027312:	f0 16 00 fd 	mcall	r6[1012]
      error_status |= flashc_error_status;
80027316:	ec f8 00 54 	ld.w	r8,r6[84]
8002731a:	70 08       	ld.w	r8,r8[0x0]
8002731c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80027320:	f3 e8 10 08 	or	r8,r9,r8
80027324:	ef 48 ff ec 	st.w	r7[-20],r8

      // If the end of the flash array is reached, go to the User page.
      if (dest.u8ptr >= flash_array_end.u8ptr)
80027328:	ee f9 ff e0 	ld.w	r9,r7[-32]
8002732c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80027330:	10 39       	cp.w	r9,r8
80027332:	c2 33       	brcs	80027378 <flashc_memset64+0x3f8>
        dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80027334:	fc 18 80 80 	movh	r8,0x8080
80027338:	ef 48 ff e0 	st.w	r7[-32],r8
8002733c:	c1 e8       	rjmp	80027378 <flashc_memset64+0x3f8>
    }
    // If the current flash page is the User page...
    else
    {
      // Erase the User page if requested and write it from the page buffer.
      if (erase)
8002733e:	ef 39 ff 94 	ld.ub	r9,r7[-108]
80027342:	30 08       	mov	r8,0
80027344:	f0 09 18 00 	cp.b	r9,r8
80027348:	c0 d0       	breq	80027362 <flashc_memset64+0x3e2>
      {
        flashc_erase_user_page(false);
8002734a:	30 0c       	mov	r12,0
8002734c:	f0 16 01 33 	mcall	r6[1228]
        error_status |= flashc_error_status;
80027350:	ec f8 00 54 	ld.w	r8,r6[84]
80027354:	70 08       	ld.w	r8,r8[0x0]
80027356:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002735a:	f3 e8 10 08 	or	r8,r9,r8
8002735e:	ef 48 ff ec 	st.w	r7[-20],r8
      }
      flashc_write_user_page();
80027362:	f0 16 00 fc 	mcall	r6[1008]
      error_status |= flashc_error_status;
80027366:	ec f8 00 54 	ld.w	r8,r6[84]
8002736a:	70 08       	ld.w	r8,r8[0x0]
8002736c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80027370:	f3 e8 10 08 	or	r8,r9,r8
80027374:	ef 48 ff ec 	st.w	r7[-20],r8
  dest_end.u16ptr = (U16 *)Align_down((U32)dest_end.u8ptr, sizeof(U16));
  dest_end.u32ptr = (U32 *)Align_down((U32)dest_end.u16ptr, sizeof(U32));
  dest_end.u64ptr = (U64 *)Align_down((U32)dest_end.u32ptr, sizeof(U64));

  // While end of destination is not reached...
  while (dest.u8ptr < dest_end.u8ptr)
80027378:	ee f9 ff e0 	ld.w	r9,r7[-32]
8002737c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80027380:	10 39       	cp.w	r9,r8
80027382:	fe 93 fe ad 	brlo	800270dc <flashc_memset64+0x15c>
      error_status |= flashc_error_status;
    }
  }

  // Update the FLASHC error status.
  flashc_error_status = error_status;
80027386:	ec f8 00 54 	ld.w	r8,r6[84]
8002738a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002738e:	91 09       	st.w	r8[0x0],r9

  // Return the initial destination pointer as the standard memset function does.
  return dst;
80027390:	ee f8 ff a4 	ld.w	r8,r7[-92]
}
80027394:	10 9c       	mov	r12,r8
80027396:	2e 5d       	sub	sp,-108
80027398:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002739c:	80 02       	ld.sh	r2,r0[0x0]
8002739e:	6e 10       	ld.w	r0,r7[0x4]

800273a0 <flashc_memcpy>:


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
800273a0:	eb cd 40 c0 	pushm	r6-r7,lr
800273a4:	1a 97       	mov	r7,sp
800273a6:	21 ad       	sub	sp,104
800273a8:	fe f6 05 80 	ld.w	r6,pc[1408]
800273ac:	1e 26       	rsub	r6,pc
800273ae:	ef 4c ff a4 	st.w	r7[-92],r12
800273b2:	ef 4b ff a0 	st.w	r7[-96],r11
800273b6:	ef 4a ff 9c 	st.w	r7[-100],r10
800273ba:	12 98       	mov	r8,r9
800273bc:	ef 68 ff 98 	st.b	r7[-104],r8
  UnionCPtr source;
  StructCVPtr dest_end;
  UnionCVPtr flash_page_source_end;
  bool incomplete_flash_page_end;
  Union64 flash_dword;
  bool flash_dword_pending = false;
800273c0:	30 08       	mov	r8,0
800273c2:	ef 68 ff e7 	st.b	r7[-25],r8
  UnionVPtr tmp;
  unsigned int error_status = 0;
800273c6:	30 08       	mov	r8,0
800273c8:	ef 48 ff e8 	st.w	r7[-24],r8
  unsigned int i, j;

  // Reformat arguments.
  flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
800273cc:	f0 16 00 ce 	mcall	r6[824]
800273d0:	18 99       	mov	r9,r12
800273d2:	fc 18 80 00 	movh	r8,0x8000
800273d6:	f2 08 00 08 	add	r8,r9,r8
800273da:	ef 48 ff e0 	st.w	r7[-32],r8
  dest.u8ptr = dst;
800273de:	ee f8 ff a4 	ld.w	r8,r7[-92]
800273e2:	ef 48 ff dc 	st.w	r7[-36],r8
  source.u8ptr = src;
800273e6:	ee f8 ff a0 	ld.w	r8,r7[-96]
800273ea:	ef 48 ff d8 	st.w	r7[-40],r8
  dest_end.u8ptr = dest.u8ptr + nbytes;
800273ee:	ee f9 ff dc 	ld.w	r9,r7[-36]
800273f2:	ee f8 ff 9c 	ld.w	r8,r7[-100]
800273f6:	f2 08 00 08 	add	r8,r9,r8
800273fa:	ef 48 ff d4 	st.w	r7[-44],r8

  // If destination is outside flash, go to next flash page if any.
  if (dest.u8ptr < AVR32_FLASH)
800273fe:	ee f8 ff dc 	ld.w	r8,r7[-36]
80027402:	e0 6a ff ff 	mov	r10,65535
80027406:	ea 1a 7f ff 	orh	r10,0x7fff
8002740a:	14 38       	cp.w	r8,r10
8002740c:	e0 8b 00 13 	brhi	80027432 <flashc_memcpy+0x92>
  {
    source.u8ptr += AVR32_FLASH - dest.u8ptr;
80027410:	ee f9 ff d8 	ld.w	r9,r7[-40]
80027414:	ee f8 ff dc 	ld.w	r8,r7[-36]
80027418:	fc 1a 80 00 	movh	r10,0x8000
8002741c:	f4 08 01 08 	sub	r8,r10,r8
80027420:	f2 08 00 08 	add	r8,r9,r8
80027424:	ef 48 ff d8 	st.w	r7[-40],r8
    dest.u8ptr = AVR32_FLASH;
80027428:	fc 18 80 00 	movh	r8,0x8000
8002742c:	ef 48 ff dc 	st.w	r7[-36],r8
80027430:	c2 18       	rjmp	80027472 <flashc_memcpy+0xd2>
  }
  else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE)
80027432:	ee f9 ff e0 	ld.w	r9,r7[-32]
80027436:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002743a:	10 39       	cp.w	r9,r8
8002743c:	e0 8b 00 1b 	brhi	80027472 <flashc_memcpy+0xd2>
80027440:	ee f8 ff dc 	ld.w	r8,r7[-36]
80027444:	e0 69 ff ff 	mov	r9,65535
80027448:	ea 19 80 7f 	orh	r9,0x807f
8002744c:	12 38       	cp.w	r8,r9
8002744e:	e0 8b 00 12 	brhi	80027472 <flashc_memcpy+0xd2>
  {
    source.u8ptr += AVR32_FLASHC_USER_PAGE - dest.u8ptr;
80027452:	ee f9 ff d8 	ld.w	r9,r7[-40]
80027456:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002745a:	fc 1a 80 80 	movh	r10,0x8080
8002745e:	f4 08 01 08 	sub	r8,r10,r8
80027462:	f2 08 00 08 	add	r8,r9,r8
80027466:	ef 48 ff d8 	st.w	r7[-40],r8
    dest.u8ptr = AVR32_FLASHC_USER_PAGE;
8002746a:	fc 18 80 80 	movh	r8,0x8080
8002746e:	ef 48 ff dc 	st.w	r7[-36],r8
  }

  // If end of destination is outside flash, move it to the end of the previous flash page if any.
  if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE)
80027472:	ee f8 ff d4 	ld.w	r8,r7[-44]
80027476:	e0 69 02 00 	mov	r9,512
8002747a:	ea 19 80 80 	orh	r9,0x8080
8002747e:	12 38       	cp.w	r8,r9
80027480:	e0 88 00 09 	brls	80027492 <flashc_memcpy+0xf2>
  {
    dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
80027484:	e0 68 02 00 	mov	r8,512
80027488:	ea 18 80 80 	orh	r8,0x8080
8002748c:	ef 48 ff d4 	st.w	r7[-44],r8
80027490:	c1 38       	rjmp	800274b6 <flashc_memcpy+0x116>
  }
  else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr)
80027492:	ee f8 ff d4 	ld.w	r8,r7[-44]
80027496:	fc 1a 80 80 	movh	r10,0x8080
8002749a:	14 38       	cp.w	r8,r10
8002749c:	e0 8b 00 0d 	brhi	800274b6 <flashc_memcpy+0x116>
800274a0:	ee f9 ff d4 	ld.w	r9,r7[-44]
800274a4:	ee f8 ff e0 	ld.w	r8,r7[-32]
800274a8:	10 39       	cp.w	r9,r8
800274aa:	e0 88 00 06 	brls	800274b6 <flashc_memcpy+0x116>
  {
    dest_end.u8ptr = flash_array_end.u8ptr;
800274ae:	ee f8 ff e0 	ld.w	r8,r7[-32]
800274b2:	ef 48 ff d4 	st.w	r7[-44],r8
  }

  // Align each end of destination pointer with its natural boundary.
  dest_end.u16ptr = (U16 *)Align_down((U32)dest_end.u8ptr, sizeof(U16));
800274b6:	ee f8 ff d4 	ld.w	r8,r7[-44]
800274ba:	a1 c8       	cbr	r8,0x0
800274bc:	ef 48 ff cc 	st.w	r7[-52],r8
  dest_end.u32ptr = (U32 *)Align_down((U32)dest_end.u16ptr, sizeof(U32));
800274c0:	ee f8 ff cc 	ld.w	r8,r7[-52]
800274c4:	e0 18 ff fc 	andl	r8,0xfffc
800274c8:	ef 48 ff c4 	st.w	r7[-60],r8
  dest_end.u64ptr = (U64 *)Align_down((U32)dest_end.u32ptr, sizeof(U64));
800274cc:	ee f8 ff c4 	ld.w	r8,r7[-60]
800274d0:	e0 18 ff f8 	andl	r8,0xfff8
800274d4:	ef 48 ff bc 	st.w	r7[-68],r8

  // While end of destination is not reached...
  while (dest.u8ptr < dest_end.u8ptr)
800274d8:	e0 8f 02 16 	bral	80027904 <flashc_memcpy+0x564>
  {
    // Clear the page buffer in order to prepare data for a flash page write.
    flashc_clear_page_buffer();
800274dc:	f0 16 01 2e 	mcall	r6[1208]
    error_status |= flashc_error_status;
800274e0:	ec f8 00 54 	ld.w	r8,r6[84]
800274e4:	70 08       	ld.w	r8,r8[0x0]
800274e6:	ee f9 ff e8 	ld.w	r9,r7[-24]
800274ea:	f3 e8 10 08 	or	r8,r9,r8
800274ee:	ef 48 ff e8 	st.w	r7[-24],r8

    // Determine where the source data will end in the current flash page.
    flash_page_source_end.u64ptr =
      (U64 *)min((U32)dest_end.u64ptr,
800274f2:	ee f8 ff bc 	ld.w	r8,r7[-68]
800274f6:	ef 48 ff f8 	st.w	r7[-8],r8
800274fa:	ee f8 ff dc 	ld.w	r8,r7[-36]
800274fe:	e0 18 fe 00 	andl	r8,0xfe00
80027502:	f0 c8 fe 00 	sub	r8,r8,-512
80027506:	ef 48 ff fc 	st.w	r7[-4],r8
8002750a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002750e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027512:	f0 09 0d 48 	min	r8,r8,r9
80027516:	ef 48 ff f4 	st.w	r7[-12],r8
8002751a:	ee f8 ff f4 	ld.w	r8,r7[-12]
    // Clear the page buffer in order to prepare data for a flash page write.
    flashc_clear_page_buffer();
    error_status |= flashc_error_status;

    // Determine where the source data will end in the current flash page.
    flash_page_source_end.u64ptr =
8002751e:	ef 48 ff b4 	st.w	r7[-76],r8
      (U64 *)min((U32)dest_end.u64ptr,
                 Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

    // Determine if the current destination page has an incomplete end.
    incomplete_flash_page_end = (Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
80027522:	ee f8 ff dc 	ld.w	r8,r7[-36]
80027526:	10 9a       	mov	r10,r8
80027528:	e0 1a fe 00 	andl	r10,0xfe00
                                 Align_down((U32)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));
8002752c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80027530:	10 99       	mov	r9,r8
80027532:	e0 19 fe 00 	andl	r9,0xfe00
    flash_page_source_end.u64ptr =
      (U64 *)min((U32)dest_end.u64ptr,
                 Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

    // Determine if the current destination page has an incomplete end.
    incomplete_flash_page_end = (Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
80027536:	30 18       	mov	r8,1
80027538:	12 3a       	cp.w	r10,r9
8002753a:	c0 22       	brcc	8002753e <flashc_memcpy+0x19e>
8002753c:	30 08       	mov	r8,0
8002753e:	ef 68 ff e6 	st.b	r7[-26],r8
                                 Align_down((U32)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

    // If destination does not point to the beginning of the current flash page...
    if (!Test_align((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE))
80027542:	ee f8 ff dc 	ld.w	r8,r7[-36]
80027546:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
8002754a:	c7 20       	breq	8002762e <flashc_memcpy+0x28e>
    {
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
8002754c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80027550:	e0 18 fe 00 	andl	r8,0xfe00
80027554:	ef 48 ff a8 	st.w	r7[-88],r8
80027558:	c0 e8       	rjmp	80027574 <flashc_memcpy+0x1d4>
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
        *tmp.u64ptr = *tmp.u64ptr;
8002755a:	ee fa ff a8 	ld.w	r10,r7[-88]
8002755e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80027562:	f0 e8 00 00 	ld.d	r8,r8[0]
80027566:	f4 e9 00 00 	st.d	r10[0],r8
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
8002756a:	ee f8 ff a8 	ld.w	r8,r7[-88]
8002756e:	2f 88       	sub	r8,-8
80027570:	ef 48 ff a8 	st.w	r7[-88],r8
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
80027574:	ee f9 ff a8 	ld.w	r9,r7[-88]
80027578:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002757c:	e0 18 ff f8 	andl	r8,0xfff8
    {
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80027580:	10 39       	cp.w	r9,r8
80027582:	ce c3       	brcs	8002755a <flashc_memcpy+0x1ba>
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
        *tmp.u64ptr = *tmp.u64ptr;

      // If destination is not 64-bit aligned...
      if (!Test_align((U32)dest.u8ptr, sizeof(U64)))
80027584:	ee f8 ff dc 	ld.w	r8,r7[-36]
80027588:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8002758c:	c5 10       	breq	8002762e <flashc_memcpy+0x28e>
        // Fill the beginning of the flash double-word buffer with the current
        // flash page data.
        // This is required by the hardware, even if page erase is not
        // requested, in order to be able to write successfully to erased parts
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
8002758e:	30 08       	mov	r8,0
80027590:	ef 48 ff ec 	st.w	r7[-20],r8
80027594:	c1 38       	rjmp	800275ba <flashc_memcpy+0x21a>
          flash_dword.u8[i] = *tmp.u8ptr++;
80027596:	ee fa ff ec 	ld.w	r10,r7[-20]
8002759a:	ee f8 ff a8 	ld.w	r8,r7[-88]
8002759e:	11 89       	ld.ub	r9,r8[0x0]
800275a0:	5c 59       	castu.b	r9
800275a2:	ee 0a 00 0a 	add	r10,r7,r10
800275a6:	f5 69 ff ac 	st.b	r10[-84],r9
800275aa:	2f f8       	sub	r8,-1
800275ac:	ef 48 ff a8 	st.w	r7[-88],r8
        // Fill the beginning of the flash double-word buffer with the current
        // flash page data.
        // This is required by the hardware, even if page erase is not
        // requested, in order to be able to write successfully to erased parts
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
800275b0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800275b4:	2f f8       	sub	r8,-1
800275b6:	ef 48 ff ec 	st.w	r7[-20],r8
800275ba:	ee f8 ff dc 	ld.w	r8,r7[-36]
800275be:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
800275c2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800275c6:	10 39       	cp.w	r9,r8
800275c8:	fe 9b ff e7 	brhi	80027596 <flashc_memcpy+0x1f6>
          flash_dword.u8[i] = *tmp.u8ptr++;

        // Fill the end of the flash double-word buffer with the source data.
        for (; i < sizeof(U64); i++)
800275cc:	c1 28       	rjmp	800275f0 <flashc_memcpy+0x250>
          flash_dword.u8[i] = *source.u8ptr++;
800275ce:	ee fa ff ec 	ld.w	r10,r7[-20]
800275d2:	ee f8 ff d8 	ld.w	r8,r7[-40]
800275d6:	11 89       	ld.ub	r9,r8[0x0]
800275d8:	ee 0a 00 0a 	add	r10,r7,r10
800275dc:	f5 69 ff ac 	st.b	r10[-84],r9
800275e0:	2f f8       	sub	r8,-1
800275e2:	ef 48 ff d8 	st.w	r7[-40],r8
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
          flash_dword.u8[i] = *tmp.u8ptr++;

        // Fill the end of the flash double-word buffer with the source data.
        for (; i < sizeof(U64); i++)
800275e6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800275ea:	2f f8       	sub	r8,-1
800275ec:	ef 48 ff ec 	st.w	r7[-20],r8
800275f0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800275f4:	58 78       	cp.w	r8,7
800275f6:	fe 98 ff ec 	brls	800275ce <flashc_memcpy+0x22e>
          flash_dword.u8[i] = *source.u8ptr++;

        // Align the destination pointer with its 64-bit boundary.
        dest.u64ptr = (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
800275fa:	ee f8 ff dc 	ld.w	r8,r7[-36]
800275fe:	e0 18 ff f8 	andl	r8,0xfff8
80027602:	ef 48 ff dc 	st.w	r7[-36],r8

        // If the current destination double-word is not the last one...
        if (dest.u64ptr < dest_end.u64ptr)
80027606:	ee f9 ff dc 	ld.w	r9,r7[-36]
8002760a:	ee f8 ff bc 	ld.w	r8,r7[-68]
8002760e:	10 39       	cp.w	r9,r8
80027610:	c0 c2       	brcc	80027628 <flashc_memcpy+0x288>
        {
          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
80027612:	ee fa ff dc 	ld.w	r10,r7[-36]
80027616:	ee e8 ff ac 	ld.d	r8,r7[-84]
8002761a:	f4 e9 00 00 	st.d	r10[0],r8
8002761e:	f4 c8 ff f8 	sub	r8,r10,-8
80027622:	ef 48 ff dc 	st.w	r7[-36],r8
80027626:	c0 48       	rjmp	8002762e <flashc_memcpy+0x28e>
        }
        // If the current destination double-word is the last one, the flash
        // double-word buffer must be kept for later.
        else flash_dword_pending = true;
80027628:	30 18       	mov	r8,1
8002762a:	ef 68 ff e7 	st.b	r7[-25],r8
      }
    }

    // Read the source data with the maximal possible alignment and write it to
    // the page buffer with 64-bit alignment.
    switch (Get_align((U32)source.u8ptr, sizeof(U32)))
8002762e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80027632:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80027636:	c0 40       	breq	8002763e <flashc_memcpy+0x29e>
80027638:	58 28       	cp.w	r8,2
8002763a:	c2 70       	breq	80027688 <flashc_memcpy+0x2e8>
8002763c:	c6 18       	rjmp	800276fe <flashc_memcpy+0x35e>
    {
    case 0:
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
8002763e:	ee f8 ff b4 	ld.w	r8,r7[-76]
80027642:	10 99       	mov	r9,r8
80027644:	ee f8 ff dc 	ld.w	r8,r7[-36]
80027648:	f2 08 01 08 	sub	r8,r9,r8
8002764c:	a3 58       	asr	r8,0x3
8002764e:	ef 48 ff ec 	st.w	r7[-20],r8
80027652:	c1 68       	rjmp	8002767e <flashc_memcpy+0x2de>
        *dest.u64ptr++ = *source.u64ptr++;
80027654:	ee fb ff dc 	ld.w	r11,r7[-36]
80027658:	ee fa ff d8 	ld.w	r10,r7[-40]
8002765c:	f4 e8 00 00 	ld.d	r8,r10[0]
80027660:	f6 e9 00 00 	st.d	r11[0],r8
80027664:	f6 c8 ff f8 	sub	r8,r11,-8
80027668:	ef 48 ff dc 	st.w	r7[-36],r8
8002766c:	f4 c8 ff f8 	sub	r8,r10,-8
80027670:	ef 48 ff d8 	st.w	r7[-40],r8
    // Read the source data with the maximal possible alignment and write it to
    // the page buffer with 64-bit alignment.
    switch (Get_align((U32)source.u8ptr, sizeof(U32)))
    {
    case 0:
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
80027674:	ee f8 ff ec 	ld.w	r8,r7[-20]
80027678:	20 18       	sub	r8,1
8002767a:	ef 48 ff ec 	st.w	r7[-20],r8
8002767e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80027682:	58 08       	cp.w	r8,0
80027684:	ce 81       	brne	80027654 <flashc_memcpy+0x2b4>
        *dest.u64ptr++ = *source.u64ptr++;
      break;
80027686:	c7 48       	rjmp	8002776e <flashc_memcpy+0x3ce>

    case sizeof(U16):
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
80027688:	ee f8 ff b4 	ld.w	r8,r7[-76]
8002768c:	10 99       	mov	r9,r8
8002768e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80027692:	f2 08 01 08 	sub	r8,r9,r8
80027696:	a3 58       	asr	r8,0x3
80027698:	ef 48 ff ec 	st.w	r7[-20],r8
8002769c:	c2 c8       	rjmp	800276f4 <flashc_memcpy+0x354>
      {
        for (j = 0; j < sizeof(U64) / sizeof(U16); j++) flash_dword.u16[j] = *source.u16ptr++;
8002769e:	30 08       	mov	r8,0
800276a0:	ef 48 ff f0 	st.w	r7[-16],r8
800276a4:	c1 48       	rjmp	800276cc <flashc_memcpy+0x32c>
800276a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800276aa:	ee f9 ff d8 	ld.w	r9,r7[-40]
800276ae:	92 0a       	ld.sh	r10,r9[0x0]
800276b0:	a1 78       	lsl	r8,0x1
800276b2:	ee 08 00 08 	add	r8,r7,r8
800276b6:	f1 5a ff ac 	st.h	r8[-84],r10
800276ba:	f2 c8 ff fe 	sub	r8,r9,-2
800276be:	ef 48 ff d8 	st.w	r7[-40],r8
800276c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800276c6:	2f f8       	sub	r8,-1
800276c8:	ef 48 ff f0 	st.w	r7[-16],r8
800276cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800276d0:	58 38       	cp.w	r8,3
800276d2:	fe 98 ff ea 	brls	800276a6 <flashc_memcpy+0x306>
        *dest.u64ptr++ = flash_dword.u64;
800276d6:	ee fa ff dc 	ld.w	r10,r7[-36]
800276da:	ee e8 ff ac 	ld.d	r8,r7[-84]
800276de:	f4 e9 00 00 	st.d	r10[0],r8
800276e2:	f4 c8 ff f8 	sub	r8,r10,-8
800276e6:	ef 48 ff dc 	st.w	r7[-36],r8
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
        *dest.u64ptr++ = *source.u64ptr++;
      break;

    case sizeof(U16):
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
800276ea:	ee f8 ff ec 	ld.w	r8,r7[-20]
800276ee:	20 18       	sub	r8,1
800276f0:	ef 48 ff ec 	st.w	r7[-20],r8
800276f4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800276f8:	58 08       	cp.w	r8,0
800276fa:	cd 21       	brne	8002769e <flashc_memcpy+0x2fe>
      {
        for (j = 0; j < sizeof(U64) / sizeof(U16); j++) flash_dword.u16[j] = *source.u16ptr++;
        *dest.u64ptr++ = flash_dword.u64;
      }
      break;
800276fc:	c3 98       	rjmp	8002776e <flashc_memcpy+0x3ce>

    default:
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
800276fe:	ee f8 ff b4 	ld.w	r8,r7[-76]
80027702:	10 99       	mov	r9,r8
80027704:	ee f8 ff dc 	ld.w	r8,r7[-36]
80027708:	f2 08 01 08 	sub	r8,r9,r8
8002770c:	a3 58       	asr	r8,0x3
8002770e:	ef 48 ff ec 	st.w	r7[-20],r8
80027712:	c2 a8       	rjmp	80027766 <flashc_memcpy+0x3c6>
      {
        for (j = 0; j < sizeof(U64); j++) flash_dword.u8[j] = *source.u8ptr++;
80027714:	30 08       	mov	r8,0
80027716:	ef 48 ff f0 	st.w	r7[-16],r8
8002771a:	c1 28       	rjmp	8002773e <flashc_memcpy+0x39e>
8002771c:	ee fa ff f0 	ld.w	r10,r7[-16]
80027720:	ee f8 ff d8 	ld.w	r8,r7[-40]
80027724:	11 89       	ld.ub	r9,r8[0x0]
80027726:	ee 0a 00 0a 	add	r10,r7,r10
8002772a:	f5 69 ff ac 	st.b	r10[-84],r9
8002772e:	2f f8       	sub	r8,-1
80027730:	ef 48 ff d8 	st.w	r7[-40],r8
80027734:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027738:	2f f8       	sub	r8,-1
8002773a:	ef 48 ff f0 	st.w	r7[-16],r8
8002773e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027742:	58 78       	cp.w	r8,7
80027744:	fe 98 ff ec 	brls	8002771c <flashc_memcpy+0x37c>
        *dest.u64ptr++ = flash_dword.u64;
80027748:	ee fa ff dc 	ld.w	r10,r7[-36]
8002774c:	ee e8 ff ac 	ld.d	r8,r7[-84]
80027750:	f4 e9 00 00 	st.d	r10[0],r8
80027754:	f4 c8 ff f8 	sub	r8,r10,-8
80027758:	ef 48 ff dc 	st.w	r7[-36],r8
        *dest.u64ptr++ = flash_dword.u64;
      }
      break;

    default:
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
8002775c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80027760:	20 18       	sub	r8,1
80027762:	ef 48 ff ec 	st.w	r7[-20],r8
80027766:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002776a:	58 08       	cp.w	r8,0
8002776c:	cd 41       	brne	80027714 <flashc_memcpy+0x374>
        *dest.u64ptr++ = flash_dword.u64;
      }
    }

    // If the current destination page has an incomplete end...
    if (incomplete_flash_page_end)
8002776e:	ef 39 ff e6 	ld.ub	r9,r7[-26]
80027772:	30 08       	mov	r8,0
80027774:	f0 09 18 00 	cp.b	r9,r8
80027778:	c6 c0       	breq	80027850 <flashc_memcpy+0x4b0>
    {
      // If the flash double-word buffer is in use, do not initialize it.
      if (flash_dword_pending) i = Get_align((U32)dest_end.u8ptr, sizeof(U64));
8002777a:	ef 39 ff e7 	ld.ub	r9,r7[-25]
8002777e:	30 08       	mov	r8,0
80027780:	f0 09 18 00 	cp.b	r9,r8
80027784:	c0 80       	breq	80027794 <flashc_memcpy+0x3f4>
80027786:	ee f8 ff d4 	ld.w	r8,r7[-44]
8002778a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8002778e:	ef 48 ff ec 	st.w	r7[-20],r8
80027792:	c1 f8       	rjmp	800277d0 <flashc_memcpy+0x430>
      // If the flash double-word buffer is free...
      else
      {
        // Fill the beginning of the flash double-word buffer with the source data.
        for (i = 0; i < Get_align((U32)dest_end.u8ptr, sizeof(U64)); i++)
80027794:	30 08       	mov	r8,0
80027796:	ef 48 ff ec 	st.w	r7[-20],r8
8002779a:	c1 28       	rjmp	800277be <flashc_memcpy+0x41e>
          flash_dword.u8[i] = *source.u8ptr++;
8002779c:	ee fa ff ec 	ld.w	r10,r7[-20]
800277a0:	ee f8 ff d8 	ld.w	r8,r7[-40]
800277a4:	11 89       	ld.ub	r9,r8[0x0]
800277a6:	ee 0a 00 0a 	add	r10,r7,r10
800277aa:	f5 69 ff ac 	st.b	r10[-84],r9
800277ae:	2f f8       	sub	r8,-1
800277b0:	ef 48 ff d8 	st.w	r7[-40],r8
      if (flash_dword_pending) i = Get_align((U32)dest_end.u8ptr, sizeof(U64));
      // If the flash double-word buffer is free...
      else
      {
        // Fill the beginning of the flash double-word buffer with the source data.
        for (i = 0; i < Get_align((U32)dest_end.u8ptr, sizeof(U64)); i++)
800277b4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800277b8:	2f f8       	sub	r8,-1
800277ba:	ef 48 ff ec 	st.w	r7[-20],r8
800277be:	ee f8 ff d4 	ld.w	r8,r7[-44]
800277c2:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
800277c6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800277ca:	10 39       	cp.w	r9,r8
800277cc:	fe 9b ff e8 	brhi	8002779c <flashc_memcpy+0x3fc>

      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      {
        tmp.u8ptr = (volatile U8 *)dest_end.u8ptr;
800277d0:	ee f8 ff d4 	ld.w	r8,r7[-44]
800277d4:	ef 48 ff a8 	st.w	r7[-88],r8

        // If end of destination is not 64-bit aligned...
        if (!Test_align((U32)dest_end.u8ptr, sizeof(U64)))
800277d8:	ee f8 ff d4 	ld.w	r8,r7[-44]
800277dc:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800277e0:	c3 20       	breq	80027844 <flashc_memcpy+0x4a4>
        {
          // Fill the end of the flash double-word buffer with the current flash page data.
          for (; i < sizeof(U64); i++)
800277e2:	c1 38       	rjmp	80027808 <flashc_memcpy+0x468>
            flash_dword.u8[i] = *tmp.u8ptr++;
800277e4:	ee fa ff ec 	ld.w	r10,r7[-20]
800277e8:	ee f8 ff a8 	ld.w	r8,r7[-88]
800277ec:	11 89       	ld.ub	r9,r8[0x0]
800277ee:	5c 59       	castu.b	r9
800277f0:	ee 0a 00 0a 	add	r10,r7,r10
800277f4:	f5 69 ff ac 	st.b	r10[-84],r9
800277f8:	2f f8       	sub	r8,-1
800277fa:	ef 48 ff a8 	st.w	r7[-88],r8

        // If end of destination is not 64-bit aligned...
        if (!Test_align((U32)dest_end.u8ptr, sizeof(U64)))
        {
          // Fill the end of the flash double-word buffer with the current flash page data.
          for (; i < sizeof(U64); i++)
800277fe:	ee f8 ff ec 	ld.w	r8,r7[-20]
80027802:	2f f8       	sub	r8,-1
80027804:	ef 48 ff ec 	st.w	r7[-20],r8
80027808:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002780c:	58 78       	cp.w	r8,7
8002780e:	fe 98 ff eb 	brls	800277e4 <flashc_memcpy+0x444>
            flash_dword.u8[i] = *tmp.u8ptr++;

          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
80027812:	ee fa ff dc 	ld.w	r10,r7[-36]
80027816:	ee e8 ff ac 	ld.d	r8,r7[-84]
8002781a:	f4 e9 00 00 	st.d	r10[0],r8
8002781e:	f4 c8 ff f8 	sub	r8,r10,-8
80027822:	ef 48 ff dc 	st.w	r7[-36],r8
        }

        // Fill the end of the page buffer with the current flash page data.
        for (; !Test_align((U32)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++)
80027826:	c1 08       	rjmp	80027846 <flashc_memcpy+0x4a6>
          *tmp.u64ptr = *tmp.u64ptr;
80027828:	ee fa ff a8 	ld.w	r10,r7[-88]
8002782c:	ee f8 ff a8 	ld.w	r8,r7[-88]
80027830:	f0 e8 00 00 	ld.d	r8,r8[0]
80027834:	f4 e9 00 00 	st.d	r10[0],r8
          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
        }

        // Fill the end of the page buffer with the current flash page data.
        for (; !Test_align((U32)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++)
80027838:	ee f8 ff a8 	ld.w	r8,r7[-88]
8002783c:	2f 88       	sub	r8,-8
8002783e:	ef 48 ff a8 	st.w	r7[-88],r8
80027842:	c0 28       	rjmp	80027846 <flashc_memcpy+0x4a6>
80027844:	d7 03       	nop
80027846:	ee f8 ff a8 	ld.w	r8,r7[-88]
8002784a:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
8002784e:	ce d1       	brne	80027828 <flashc_memcpy+0x488>
          *tmp.u64ptr = *tmp.u64ptr;
      }
    }

    // If the current flash page is in the flash array...
    if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE)
80027850:	ee f8 ff dc 	ld.w	r8,r7[-36]
80027854:	fc 19 80 80 	movh	r9,0x8080
80027858:	12 38       	cp.w	r8,r9
8002785a:	e0 8b 00 38 	brhi	800278ca <flashc_memcpy+0x52a>
    {
      // Erase the current page if requested and write it from the page buffer.
      if (erase)
8002785e:	ef 39 ff 98 	ld.ub	r9,r7[-104]
80027862:	30 08       	mov	r8,0
80027864:	f0 09 18 00 	cp.b	r9,r8
80027868:	c0 e0       	breq	80027884 <flashc_memcpy+0x4e4>
      {
        flashc_erase_page(-1, false);
8002786a:	30 0b       	mov	r11,0
8002786c:	3f fc       	mov	r12,-1
8002786e:	f0 16 00 a9 	mcall	r6[676]
        error_status |= flashc_error_status;
80027872:	ec f8 00 54 	ld.w	r8,r6[84]
80027876:	70 08       	ld.w	r8,r8[0x0]
80027878:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002787c:	f3 e8 10 08 	or	r8,r9,r8
80027880:	ef 48 ff e8 	st.w	r7[-24],r8
      }
      flashc_write_page(-1);
80027884:	3f fc       	mov	r12,-1
80027886:	f0 16 00 fd 	mcall	r6[1012]
      error_status |= flashc_error_status;
8002788a:	ec f8 00 54 	ld.w	r8,r6[84]
8002788e:	70 08       	ld.w	r8,r8[0x0]
80027890:	ee f9 ff e8 	ld.w	r9,r7[-24]
80027894:	f3 e8 10 08 	or	r8,r9,r8
80027898:	ef 48 ff e8 	st.w	r7[-24],r8

      // If the end of the flash array is reached, go to the User page.
      if (dest.u8ptr >= flash_array_end.u8ptr)
8002789c:	ee f9 ff dc 	ld.w	r9,r7[-36]
800278a0:	ee f8 ff e0 	ld.w	r8,r7[-32]
800278a4:	10 39       	cp.w	r9,r8
800278a6:	c2 f3       	brcs	80027904 <flashc_memcpy+0x564>
      {
        source.u8ptr += AVR32_FLASHC_USER_PAGE - dest.u8ptr;
800278a8:	ee f9 ff d8 	ld.w	r9,r7[-40]
800278ac:	ee f8 ff dc 	ld.w	r8,r7[-36]
800278b0:	fc 1a 80 80 	movh	r10,0x8080
800278b4:	f4 08 01 08 	sub	r8,r10,r8
800278b8:	f2 08 00 08 	add	r8,r9,r8
800278bc:	ef 48 ff d8 	st.w	r7[-40],r8
        dest.u8ptr = AVR32_FLASHC_USER_PAGE;
800278c0:	fc 18 80 80 	movh	r8,0x8080
800278c4:	ef 48 ff dc 	st.w	r7[-36],r8
800278c8:	c1 e8       	rjmp	80027904 <flashc_memcpy+0x564>
    }
    // If the current flash page is the User page...
    else
    {
      // Erase the User page if requested and write it from the page buffer.
      if (erase)
800278ca:	ef 39 ff 98 	ld.ub	r9,r7[-104]
800278ce:	30 08       	mov	r8,0
800278d0:	f0 09 18 00 	cp.b	r9,r8
800278d4:	c0 d0       	breq	800278ee <flashc_memcpy+0x54e>
      {
        flashc_erase_user_page(false);
800278d6:	30 0c       	mov	r12,0
800278d8:	f0 16 01 33 	mcall	r6[1228]
        error_status |= flashc_error_status;
800278dc:	ec f8 00 54 	ld.w	r8,r6[84]
800278e0:	70 08       	ld.w	r8,r8[0x0]
800278e2:	ee f9 ff e8 	ld.w	r9,r7[-24]
800278e6:	f3 e8 10 08 	or	r8,r9,r8
800278ea:	ef 48 ff e8 	st.w	r7[-24],r8
      }
      flashc_write_user_page();
800278ee:	f0 16 00 fc 	mcall	r6[1008]
      error_status |= flashc_error_status;
800278f2:	ec f8 00 54 	ld.w	r8,r6[84]
800278f6:	70 08       	ld.w	r8,r8[0x0]
800278f8:	ee f9 ff e8 	ld.w	r9,r7[-24]
800278fc:	f3 e8 10 08 	or	r8,r9,r8
80027900:	ef 48 ff e8 	st.w	r7[-24],r8
  dest_end.u16ptr = (U16 *)Align_down((U32)dest_end.u8ptr, sizeof(U16));
  dest_end.u32ptr = (U32 *)Align_down((U32)dest_end.u16ptr, sizeof(U32));
  dest_end.u64ptr = (U64 *)Align_down((U32)dest_end.u32ptr, sizeof(U64));

  // While end of destination is not reached...
  while (dest.u8ptr < dest_end.u8ptr)
80027904:	ee f9 ff dc 	ld.w	r9,r7[-36]
80027908:	ee f8 ff d4 	ld.w	r8,r7[-44]
8002790c:	10 39       	cp.w	r9,r8
8002790e:	fe 93 fd e7 	brlo	800274dc <flashc_memcpy+0x13c>
      error_status |= flashc_error_status;
    }
  }

  // Update the FLASHC error status.
  flashc_error_status = error_status;
80027912:	ec f8 00 54 	ld.w	r8,r6[84]
80027916:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002791a:	91 09       	st.w	r8[0x0],r9

  // Return the initial destination pointer as the standard memcpy function does.
  return dst;
8002791c:	ee f8 ff a4 	ld.w	r8,r7[-92]
}
80027920:	10 9c       	mov	r12,r8
80027922:	2e 6d       	sub	sp,-104
80027924:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027928:	80 02       	ld.sh	r2,r0[0x0]
8002792a:	72 30       	ld.w	r0,r9[0xc]

8002792c <flashc_set_flash_waitstate_and_readmode>:


#if UC3C
void flashc_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
8002792c:	eb cd 40 c0 	pushm	r6-r7,lr
80027930:	1a 97       	mov	r7,sp
80027932:	20 1d       	sub	sp,4
80027934:	49 76       	lddpc	r6,80027990 <flashc_set_flash_waitstate_and_readmode+0x64>
80027936:	1e 26       	rsub	r6,pc
80027938:	ef 4c ff fc 	st.w	r7[-4],r12
  #define AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ      33000000
  #define AVR32_FLASHC_HSEN_FWS_1_MAX_FREQ      72000000
  // These defines are missing from or wrong in the toolchain header files uc3cxxx.h
  // Put a Bugzilla 

  if(cpu_f_hz > AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ)    // > 33MHz
8002793c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027940:	e0 69 8a 40 	mov	r9,35392
80027944:	ea 19 01 f7 	orh	r9,0x1f7
80027948:	12 38       	cp.w	r8,r9
8002794a:	e0 88 00 18 	brls	8002797a <flashc_set_flash_waitstate_and_readmode+0x4e>
  {
    // Set a wait-state
    flashc_set_wait_state(1);
8002794e:	30 1c       	mov	r12,1
80027950:	f0 16 00 a2 	mcall	r6[648]
    if(cpu_f_hz <= AVR32_FLASHC_FWS_1_MAX_FREQ) // <= 66MHz and >33Mhz
80027954:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027958:	e0 69 14 80 	mov	r9,5248
8002795c:	ea 19 03 ef 	orh	r9,0x3ef
80027960:	12 38       	cp.w	r8,r9
80027962:	e0 8b 00 07 	brhi	80027970 <flashc_set_flash_waitstate_and_readmode+0x44>
    {
      // Disable the high-speed read mode.      
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
80027966:	3f fb       	mov	r11,-1
80027968:	31 1c       	mov	r12,17
8002796a:	f0 16 00 2a 	mcall	r6[168]
8002796e:	c0 d8       	rjmp	80027988 <flashc_set_flash_waitstate_and_readmode+0x5c>
    }
    else // > 66Mhz
    {
      // Enable the high-speed read mode.
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSEN, -1);                     
80027970:	3f fb       	mov	r11,-1
80027972:	31 0c       	mov	r12,16
80027974:	f0 16 00 2a 	mcall	r6[168]
80027978:	c0 88       	rjmp	80027988 <flashc_set_flash_waitstate_and_readmode+0x5c>
    }
  }
  else  // <= 33 MHz    
  {
    // Disable wait-state
    flashc_set_wait_state(0);
8002797a:	30 0c       	mov	r12,0
8002797c:	f0 16 00 a2 	mcall	r6[648]

    // Disable the high-speed read mode.
    flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
80027980:	3f fb       	mov	r11,-1
80027982:	31 1c       	mov	r12,17
80027984:	f0 16 00 2a 	mcall	r6[168]
    
  }
}
80027988:	2f fd       	sub	sp,-4
8002798a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002798e:	00 00       	add	r0,r0
80027990:	80 02       	ld.sh	r2,r0[0x0]
80027992:	77 ba       	ld.w	r10,r11[0x6c]

80027994 <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80027994:	eb cd 40 c0 	pushm	r6-r7,lr
80027998:	1a 97       	mov	r7,sp
8002799a:	20 4d       	sub	sp,16
8002799c:	49 b6       	lddpc	r6,80027a08 <gpio_enable_module+0x74>
8002799e:	1e 26       	rsub	r6,pc
800279a0:	ef 4c ff f4 	st.w	r7[-12],r12
800279a4:	ef 4b ff f0 	st.w	r7[-16],r11
  int status = GPIO_SUCCESS;
800279a8:	30 08       	mov	r8,0
800279aa:	ef 48 ff f8 	st.w	r7[-8],r8
  uint32_t i;

  for (i = 0; i < size; i++)
800279ae:	30 08       	mov	r8,0
800279b0:	ef 48 ff fc 	st.w	r7[-4],r8
800279b4:	c1 d8       	rjmp	800279ee <gpio_enable_module+0x5a>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800279b6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800279ba:	11 98       	ld.ub	r8,r8[0x1]
800279bc:	10 99       	mov	r9,r8
800279be:	ee f8 ff f4 	ld.w	r8,r7[-12]
800279c2:	11 88       	ld.ub	r8,r8[0x0]
800279c4:	12 9b       	mov	r11,r9
800279c6:	10 9c       	mov	r12,r8
800279c8:	f0 16 00 3f 	mcall	r6[252]
800279cc:	18 98       	mov	r8,r12
800279ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800279d2:	f3 e8 10 08 	or	r8,r9,r8
800279d6:	ef 48 ff f8 	st.w	r7[-8],r8
    gpiomap++;
800279da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800279de:	2f e8       	sub	r8,-2
800279e0:	ef 48 ff f4 	st.w	r7[-12],r8
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
800279e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800279e8:	2f f8       	sub	r8,-1
800279ea:	ef 48 ff fc 	st.w	r7[-4],r8
800279ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
800279f2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800279f6:	10 39       	cp.w	r9,r8
800279f8:	cd f3       	brcs	800279b6 <gpio_enable_module+0x22>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
800279fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
800279fe:	10 9c       	mov	r12,r8
80027a00:	2f cd       	sub	sp,-16
80027a02:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027a06:	00 00       	add	r0,r0
80027a08:	80 02       	ld.sh	r2,r0[0x0]
80027a0a:	78 22       	ld.w	r2,r12[0x8]

80027a0c <gpio_enable_module_pin>:


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
80027a0c:	eb cd 40 c0 	pushm	r6-r7,lr
80027a10:	1a 97       	mov	r7,sp
80027a12:	20 3d       	sub	sp,12
80027a14:	fe f6 02 94 	ld.w	r6,pc[660]
80027a18:	1e 26       	rsub	r6,pc
80027a1a:	ef 4c ff f8 	st.w	r7[-8],r12
80027a1e:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027a22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a26:	a5 98       	lsr	r8,0x5
80027a28:	a9 78       	lsl	r8,0x9
80027a2a:	e0 28 e0 00 	sub	r8,57344
80027a2e:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the correct function.
  switch (function)
80027a32:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027a36:	58 78       	cp.w	r8,7
80027a38:	e0 8b 01 26 	brhi	80027c84 <gpio_enable_module_pin+0x278>
80027a3c:	fe c9 ff f8 	sub	r9,pc,-8
80027a40:	f2 08 00 2f 	add	pc,r9,r8<<0x2
80027a44:	e0 8f 00 10 	bral	80027a64 <gpio_enable_module_pin+0x58>
80027a48:	e0 8f 00 30 	bral	80027aa8 <gpio_enable_module_pin+0x9c>
80027a4c:	e0 8f 00 50 	bral	80027aec <gpio_enable_module_pin+0xe0>
80027a50:	e0 8f 00 70 	bral	80027b30 <gpio_enable_module_pin+0x124>
80027a54:	e0 8f 00 90 	bral	80027b74 <gpio_enable_module_pin+0x168>
80027a58:	e0 8f 00 b0 	bral	80027bb8 <gpio_enable_module_pin+0x1ac>
80027a5c:	e0 8f 00 d0 	bral	80027bfc <gpio_enable_module_pin+0x1f0>
80027a60:	e0 8f 00 f0 	bral	80027c40 <gpio_enable_module_pin+0x234>
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80027a64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a68:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027a6c:	30 19       	mov	r9,1
80027a6e:	f2 08 09 48 	lsl	r8,r9,r8
80027a72:	10 99       	mov	r9,r8
80027a74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027a78:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80027a7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a7e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027a82:	30 19       	mov	r9,1
80027a84:	f2 08 09 48 	lsl	r8,r9,r8
80027a88:	10 99       	mov	r9,r8
80027a8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027a8e:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80027a90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a94:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027a98:	30 19       	mov	r9,1
80027a9a:	f2 08 09 48 	lsl	r8,r9,r8
80027a9e:	10 99       	mov	r9,r8
80027aa0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027aa4:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80027aa6:	cf 18       	rjmp	80027c88 <gpio_enable_module_pin+0x27c>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80027aa8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027aac:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027ab0:	30 19       	mov	r9,1
80027ab2:	f2 08 09 48 	lsl	r8,r9,r8
80027ab6:	10 99       	mov	r9,r8
80027ab8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027abc:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80027abe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027ac2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027ac6:	30 19       	mov	r9,1
80027ac8:	f2 08 09 48 	lsl	r8,r9,r8
80027acc:	10 99       	mov	r9,r8
80027ace:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027ad2:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80027ad4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027ad8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027adc:	30 19       	mov	r9,1
80027ade:	f2 08 09 48 	lsl	r8,r9,r8
80027ae2:	10 99       	mov	r9,r8
80027ae4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027ae8:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80027aea:	cc f8       	rjmp	80027c88 <gpio_enable_module_pin+0x27c>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80027aec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027af0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027af4:	30 19       	mov	r9,1
80027af6:	f2 08 09 48 	lsl	r8,r9,r8
80027afa:	10 99       	mov	r9,r8
80027afc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027b00:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80027b02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b06:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027b0a:	30 19       	mov	r9,1
80027b0c:	f2 08 09 48 	lsl	r8,r9,r8
80027b10:	10 99       	mov	r9,r8
80027b12:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027b16:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80027b18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b1c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027b20:	30 19       	mov	r9,1
80027b22:	f2 08 09 48 	lsl	r8,r9,r8
80027b26:	10 99       	mov	r9,r8
80027b28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027b2c:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80027b2e:	ca d8       	rjmp	80027c88 <gpio_enable_module_pin+0x27c>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80027b30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b34:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027b38:	30 19       	mov	r9,1
80027b3a:	f2 08 09 48 	lsl	r8,r9,r8
80027b3e:	10 99       	mov	r9,r8
80027b40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027b44:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80027b46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b4a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027b4e:	30 19       	mov	r9,1
80027b50:	f2 08 09 48 	lsl	r8,r9,r8
80027b54:	10 99       	mov	r9,r8
80027b56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027b5a:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80027b5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b60:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027b64:	30 19       	mov	r9,1
80027b66:	f2 08 09 48 	lsl	r8,r9,r8
80027b6a:	10 99       	mov	r9,r8
80027b6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027b70:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80027b72:	c8 b8       	rjmp	80027c88 <gpio_enable_module_pin+0x27c>

#if (AVR32_GPIO_H_VERSION >= 210)
  case 4: // E function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80027b74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b78:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027b7c:	30 19       	mov	r9,1
80027b7e:	f2 08 09 48 	lsl	r8,r9,r8
80027b82:	10 99       	mov	r9,r8
80027b84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027b88:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80027b8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b8e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027b92:	30 19       	mov	r9,1
80027b94:	f2 08 09 48 	lsl	r8,r9,r8
80027b98:	10 99       	mov	r9,r8
80027b9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027b9e:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80027ba0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027ba4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027ba8:	30 19       	mov	r9,1
80027baa:	f2 08 09 48 	lsl	r8,r9,r8
80027bae:	10 99       	mov	r9,r8
80027bb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027bb4:	91 d9       	st.w	r8[0x34],r9
    break;
80027bb6:	c6 98       	rjmp	80027c88 <gpio_enable_module_pin+0x27c>
    
  case 5: // F function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80027bb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027bbc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027bc0:	30 19       	mov	r9,1
80027bc2:	f2 08 09 48 	lsl	r8,r9,r8
80027bc6:	10 99       	mov	r9,r8
80027bc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027bcc:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80027bce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027bd2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027bd6:	30 19       	mov	r9,1
80027bd8:	f2 08 09 48 	lsl	r8,r9,r8
80027bdc:	10 99       	mov	r9,r8
80027bde:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027be2:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80027be4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027be8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027bec:	30 19       	mov	r9,1
80027bee:	f2 08 09 48 	lsl	r8,r9,r8
80027bf2:	10 99       	mov	r9,r8
80027bf4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027bf8:	91 d9       	st.w	r8[0x34],r9
    break;
80027bfa:	c4 78       	rjmp	80027c88 <gpio_enable_module_pin+0x27c>
    
  case 6: // G function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80027bfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027c00:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027c04:	30 19       	mov	r9,1
80027c06:	f2 08 09 48 	lsl	r8,r9,r8
80027c0a:	10 99       	mov	r9,r8
80027c0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027c10:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80027c12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027c16:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027c1a:	30 19       	mov	r9,1
80027c1c:	f2 08 09 48 	lsl	r8,r9,r8
80027c20:	10 99       	mov	r9,r8
80027c22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027c26:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80027c28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027c2c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027c30:	30 19       	mov	r9,1
80027c32:	f2 08 09 48 	lsl	r8,r9,r8
80027c36:	10 99       	mov	r9,r8
80027c38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027c3c:	91 d9       	st.w	r8[0x34],r9
    break;
80027c3e:	c2 58       	rjmp	80027c88 <gpio_enable_module_pin+0x27c>
    
  case 7: // H function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80027c40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027c44:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027c48:	30 19       	mov	r9,1
80027c4a:	f2 08 09 48 	lsl	r8,r9,r8
80027c4e:	10 99       	mov	r9,r8
80027c50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027c54:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80027c56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027c5a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027c5e:	30 19       	mov	r9,1
80027c60:	f2 08 09 48 	lsl	r8,r9,r8
80027c64:	10 99       	mov	r9,r8
80027c66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027c6a:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80027c6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027c70:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027c74:	30 19       	mov	r9,1
80027c76:	f2 08 09 48 	lsl	r8,r9,r8
80027c7a:	10 99       	mov	r9,r8
80027c7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027c80:	91 d9       	st.w	r8[0x34],r9
    break;
80027c82:	c0 38       	rjmp	80027c88 <gpio_enable_module_pin+0x27c>
#endif

  default:
    return GPIO_INVALID_ARGUMENT;
80027c84:	30 18       	mov	r8,1
80027c86:	c0 d8       	rjmp	80027ca0 <gpio_enable_module_pin+0x294>
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80027c88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027c8c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027c90:	30 19       	mov	r9,1
80027c92:	f2 08 09 48 	lsl	r8,r9,r8
80027c96:	10 99       	mov	r9,r8
80027c98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027c9c:	91 29       	st.w	r8[0x8],r9

  return GPIO_SUCCESS;
80027c9e:	30 08       	mov	r8,0
}
80027ca0:	10 9c       	mov	r12,r8
80027ca2:	2f dd       	sub	sp,-12
80027ca4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027ca8:	80 02       	ld.sh	r2,r0[0x0]
80027caa:	78 9c       	ld.w	r12,r12[0x24]

80027cac <gpio_enable_gpio>:


void gpio_enable_gpio(const gpio_map_t gpiomap, uint32_t size)
{
80027cac:	eb cd 40 c0 	pushm	r6-r7,lr
80027cb0:	1a 97       	mov	r7,sp
80027cb2:	20 3d       	sub	sp,12
80027cb4:	49 26       	lddpc	r6,80027cfc <gpio_enable_gpio+0x50>
80027cb6:	1e 26       	rsub	r6,pc
80027cb8:	ef 4c ff f8 	st.w	r7[-8],r12
80027cbc:	ef 4b ff f4 	st.w	r7[-12],r11
  uint32_t i;

  for (i = 0; i < size; i++)
80027cc0:	30 08       	mov	r8,0
80027cc2:	ef 48 ff fc 	st.w	r7[-4],r8
80027cc6:	c1 18       	rjmp	80027ce8 <gpio_enable_gpio+0x3c>
  {
    gpio_enable_gpio_pin(gpiomap->pin);
80027cc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027ccc:	11 88       	ld.ub	r8,r8[0x0]
80027cce:	10 9c       	mov	r12,r8
80027cd0:	f0 16 01 5b 	mcall	r6[1388]
    gpiomap++;
80027cd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027cd8:	2f e8       	sub	r8,-2
80027cda:	ef 48 ff f8 	st.w	r7[-8],r8

void gpio_enable_gpio(const gpio_map_t gpiomap, uint32_t size)
{
  uint32_t i;

  for (i = 0; i < size; i++)
80027cde:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027ce2:	2f f8       	sub	r8,-1
80027ce4:	ef 48 ff fc 	st.w	r7[-4],r8
80027ce8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027cec:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027cf0:	10 39       	cp.w	r9,r8
80027cf2:	ce b3       	brcs	80027cc8 <gpio_enable_gpio+0x1c>
  {
    gpio_enable_gpio_pin(gpiomap->pin);
    gpiomap++;
  }
}
80027cf4:	2f dd       	sub	sp,-12
80027cf6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027cfa:	00 00       	add	r0,r0
80027cfc:	80 02       	ld.sh	r2,r0[0x0]
80027cfe:	7b 3a       	ld.w	r10,sp[0x4c]

80027d00 <gpio_enable_gpio_pin>:


void gpio_enable_gpio_pin(uint32_t pin)
{
80027d00:	eb cd 40 80 	pushm	r7,lr
80027d04:	1a 97       	mov	r7,sp
80027d06:	20 2d       	sub	sp,8
80027d08:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027d0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027d10:	a5 98       	lsr	r8,0x5
80027d12:	a9 78       	lsl	r8,0x9
80027d14:	e0 28 e0 00 	sub	r8,57344
80027d18:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->oderc = 1 << (pin & 0x1F);
80027d1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027d20:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027d24:	30 19       	mov	r9,1
80027d26:	f2 08 09 48 	lsl	r8,r9,r8
80027d2a:	10 99       	mov	r9,r8
80027d2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027d30:	f1 49 00 48 	st.w	r8[72],r9
  gpio_port->gpers = 1 << (pin & 0x1F);
80027d34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027d38:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027d3c:	30 19       	mov	r9,1
80027d3e:	f2 08 09 48 	lsl	r8,r9,r8
80027d42:	10 99       	mov	r9,r8
80027d44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027d48:	91 19       	st.w	r8[0x4],r9
}
80027d4a:	2f ed       	sub	sp,-8
80027d4c:	e3 cd 80 80 	ldm	sp++,r7,pc

80027d50 <gpio_enable_pin_pull_up>:

#endif


void gpio_enable_pin_pull_up(uint32_t pin)
{
80027d50:	eb cd 40 80 	pushm	r7,lr
80027d54:	1a 97       	mov	r7,sp
80027d56:	20 2d       	sub	sp,8
80027d58:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027d5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027d60:	a5 98       	lsr	r8,0x5
80027d62:	a9 78       	lsl	r8,0x9
80027d64:	e0 28 e0 00 	sub	r8,57344
80027d68:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puers = 1 << (pin & 0x1F);
80027d6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027d70:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027d74:	30 19       	mov	r9,1
80027d76:	f2 08 09 48 	lsl	r8,r9,r8
80027d7a:	10 99       	mov	r9,r8
80027d7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027d80:	f1 49 00 74 	st.w	r8[116],r9
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
  gpio_port->pderc = 1 << (pin & 0x1F);
80027d84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027d88:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027d8c:	30 19       	mov	r9,1
80027d8e:	f2 08 09 48 	lsl	r8,r9,r8
80027d92:	10 99       	mov	r9,r8
80027d94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027d98:	f1 49 00 88 	st.w	r8[136],r9
#endif
}
80027d9c:	2f ed       	sub	sp,-8
80027d9e:	e3 cd 80 80 	ldm	sp++,r7,pc

80027da2 <gpio_disable_pin_pull_up>:


void gpio_disable_pin_pull_up(uint32_t pin)
{
80027da2:	eb cd 40 80 	pushm	r7,lr
80027da6:	1a 97       	mov	r7,sp
80027da8:	20 2d       	sub	sp,8
80027daa:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027dae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027db2:	a5 98       	lsr	r8,0x5
80027db4:	a9 78       	lsl	r8,0x9
80027db6:	e0 28 e0 00 	sub	r8,57344
80027dba:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puerc = 1 << (pin & 0x1F);
80027dbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027dc2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027dc6:	30 19       	mov	r9,1
80027dc8:	f2 08 09 48 	lsl	r8,r9,r8
80027dcc:	10 99       	mov	r9,r8
80027dce:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027dd2:	f1 49 00 78 	st.w	r8[120],r9
}
80027dd6:	2f ed       	sub	sp,-8
80027dd8:	e3 cd 80 80 	ldm	sp++,r7,pc

80027ddc <gpio_enable_pin_pull_down>:
/*! \brief Enables the pull-down resistor of a pin.
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_pull_down(uint32_t pin)
{
80027ddc:	eb cd 40 80 	pushm	r7,lr
80027de0:	1a 97       	mov	r7,sp
80027de2:	20 2d       	sub	sp,8
80027de4:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027de8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027dec:	a5 98       	lsr	r8,0x5
80027dee:	a9 78       	lsl	r8,0x9
80027df0:	e0 28 e0 00 	sub	r8,57344
80027df4:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puerc = 1 << (pin & 0x1F);
80027df8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027dfc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027e00:	30 19       	mov	r9,1
80027e02:	f2 08 09 48 	lsl	r8,r9,r8
80027e06:	10 99       	mov	r9,r8
80027e08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027e0c:	f1 49 00 78 	st.w	r8[120],r9
  gpio_port->pders = 1 << (pin & 0x1F);
80027e10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027e14:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027e18:	30 19       	mov	r9,1
80027e1a:	f2 08 09 48 	lsl	r8,r9,r8
80027e1e:	10 99       	mov	r9,r8
80027e20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027e24:	f1 49 00 84 	st.w	r8[132],r9
}
80027e28:	2f ed       	sub	sp,-8
80027e2a:	e3 cd 80 80 	ldm	sp++,r7,pc

80027e2e <gpio_disable_pin_pull_down>:
/*! \brief Disables the pull-down resistor of a pin.
 *
 * \param pin The pin number.
 */
void gpio_disable_pin_pull_down(uint32_t pin)
{
80027e2e:	eb cd 40 80 	pushm	r7,lr
80027e32:	1a 97       	mov	r7,sp
80027e34:	20 2d       	sub	sp,8
80027e36:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027e3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027e3e:	a5 98       	lsr	r8,0x5
80027e40:	a9 78       	lsl	r8,0x9
80027e42:	e0 28 e0 00 	sub	r8,57344
80027e46:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->pderc = 1 << (pin & 0x1F);
80027e4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027e4e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027e52:	30 19       	mov	r9,1
80027e54:	f2 08 09 48 	lsl	r8,r9,r8
80027e58:	10 99       	mov	r9,r8
80027e5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027e5e:	f1 49 00 88 	st.w	r8[136],r9
}
80027e62:	2f ed       	sub	sp,-8
80027e64:	e3 cd 80 80 	ldm	sp++,r7,pc

80027e68 <gpio_enable_pin_buskeeper>:
/*! \brief Enables the buskeeper functionality on a pin.
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_buskeeper(uint32_t pin)
{
80027e68:	eb cd 40 80 	pushm	r7,lr
80027e6c:	1a 97       	mov	r7,sp
80027e6e:	20 2d       	sub	sp,8
80027e70:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027e74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027e78:	a5 98       	lsr	r8,0x5
80027e7a:	a9 78       	lsl	r8,0x9
80027e7c:	e0 28 e0 00 	sub	r8,57344
80027e80:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puers = 1 << (pin & 0x1F);
80027e84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027e88:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027e8c:	30 19       	mov	r9,1
80027e8e:	f2 08 09 48 	lsl	r8,r9,r8
80027e92:	10 99       	mov	r9,r8
80027e94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027e98:	f1 49 00 74 	st.w	r8[116],r9
  gpio_port->pders = 1 << (pin & 0x1F);
80027e9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027ea0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027ea4:	30 19       	mov	r9,1
80027ea6:	f2 08 09 48 	lsl	r8,r9,r8
80027eaa:	10 99       	mov	r9,r8
80027eac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027eb0:	f1 49 00 84 	st.w	r8[132],r9
}
80027eb4:	2f ed       	sub	sp,-8
80027eb6:	e3 cd 80 80 	ldm	sp++,r7,pc

80027eba <gpio_disable_pin_buskeeper>:
/*! \brief Disables the buskeeper functionality on a pin.
 *
 * \param pin The pin number.
 */
void gpio_disable_pin_buskeeper(uint32_t pin)
{
80027eba:	eb cd 40 80 	pushm	r7,lr
80027ebe:	1a 97       	mov	r7,sp
80027ec0:	20 2d       	sub	sp,8
80027ec2:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027ec6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027eca:	a5 98       	lsr	r8,0x5
80027ecc:	a9 78       	lsl	r8,0x9
80027ece:	e0 28 e0 00 	sub	r8,57344
80027ed2:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puerc = 1 << (pin & 0x1F);
80027ed6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027eda:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027ede:	30 19       	mov	r9,1
80027ee0:	f2 08 09 48 	lsl	r8,r9,r8
80027ee4:	10 99       	mov	r9,r8
80027ee6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027eea:	f1 49 00 78 	st.w	r8[120],r9
  gpio_port->pderc = 1 << (pin & 0x1F);
80027eee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027ef2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027ef6:	30 19       	mov	r9,1
80027ef8:	f2 08 09 48 	lsl	r8,r9,r8
80027efc:	10 99       	mov	r9,r8
80027efe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027f02:	f1 49 00 88 	st.w	r8[136],r9
}
80027f06:	2f ed       	sub	sp,-8
80027f08:	e3 cd 80 80 	ldm	sp++,r7,pc

80027f0c <gpio_configure_pin>:

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
80027f0c:	eb cd 40 80 	pushm	r7,lr
80027f10:	1a 97       	mov	r7,sp
80027f12:	20 3d       	sub	sp,12
80027f14:	ef 4c ff f8 	st.w	r7[-8],r12
80027f18:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
80027f1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027f20:	a5 98       	lsr	r8,0x5
80027f22:	a9 78       	lsl	r8,0x9
80027f24:	e0 28 e0 00 	sub	r8,57344
80027f28:	ef 48 ff fc 	st.w	r7[-4],r8

  /* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
    if (flags & GPIO_PULL_DOWN)
80027f2c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027f30:	e2 18 00 08 	andl	r8,0x8,COH
80027f34:	c0 e0       	breq	80027f50 <gpio_configure_pin+0x44>
            gpio_port->pders = 1 << (pin & 0x1F);
80027f36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027f3a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027f3e:	30 19       	mov	r9,1
80027f40:	f2 08 09 48 	lsl	r8,r9,r8
80027f44:	10 99       	mov	r9,r8
80027f46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027f4a:	f1 49 00 84 	st.w	r8[132],r9
80027f4e:	c0 d8       	rjmp	80027f68 <gpio_configure_pin+0x5c>
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
80027f50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027f54:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027f58:	30 19       	mov	r9,1
80027f5a:	f2 08 09 48 	lsl	r8,r9,r8
80027f5e:	10 99       	mov	r9,r8
80027f60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027f64:	f1 49 00 88 	st.w	r8[136],r9
#endif    
    if (flags & GPIO_PULL_UP)
80027f68:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027f6c:	e2 18 00 04 	andl	r8,0x4,COH
80027f70:	c0 e0       	breq	80027f8c <gpio_configure_pin+0x80>
            gpio_port->puers = 1 << (pin & 0x1F);
80027f72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027f76:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027f7a:	30 19       	mov	r9,1
80027f7c:	f2 08 09 48 	lsl	r8,r9,r8
80027f80:	10 99       	mov	r9,r8
80027f82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027f86:	f1 49 00 74 	st.w	r8[116],r9
80027f8a:	c0 d8       	rjmp	80027fa4 <gpio_configure_pin+0x98>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80027f8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027f90:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027f94:	30 19       	mov	r9,1
80027f96:	f2 08 09 48 	lsl	r8,r9,r8
80027f9a:	10 99       	mov	r9,r8
80027f9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027fa0:	f1 49 00 78 	st.w	r8[120],r9

    /* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
            if (flags & GPIO_OPEN_DRAIN)
80027fa4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027fa8:	e2 18 00 40 	andl	r8,0x40,COH
80027fac:	c0 e0       	breq	80027fc8 <gpio_configure_pin+0xbc>
                    gpio_port->odmers = 1 << (pin & 0x1F);
80027fae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027fb2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027fb6:	30 19       	mov	r9,1
80027fb8:	f2 08 09 48 	lsl	r8,r9,r8
80027fbc:	10 99       	mov	r9,r8
80027fbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027fc2:	f1 49 00 e4 	st.w	r8[228],r9
80027fc6:	c0 d8       	rjmp	80027fe0 <gpio_configure_pin+0xd4>
            else
                    gpio_port->odmerc = 1 << (pin & 0x1F);            
80027fc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027fcc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027fd0:	30 19       	mov	r9,1
80027fd2:	f2 08 09 48 	lsl	r8,r9,r8
80027fd6:	10 99       	mov	r9,r8
80027fd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027fdc:	f1 49 00 e8 	st.w	r8[232],r9

            if (flags & GPIO_OPEN_DRAIN)
80027fe0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027fe4:	e2 18 00 40 	andl	r8,0x40,COH
80027fe8:	c0 e0       	breq	80028004 <gpio_configure_pin+0xf8>
                    gpio_port->pders = 1 << (pin & 0x1F);
80027fea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027fee:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027ff2:	30 19       	mov	r9,1
80027ff4:	f2 08 09 48 	lsl	r8,r9,r8
80027ff8:	10 99       	mov	r9,r8
80027ffa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027ffe:	f1 49 00 84 	st.w	r8[132],r9
80028002:	c0 d8       	rjmp	8002801c <gpio_configure_pin+0x110>
            else
                    gpio_port->pderc = 1 << (pin & 0x1F);
80028004:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028008:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002800c:	30 19       	mov	r9,1
8002800e:	f2 08 09 48 	lsl	r8,r9,r8
80028012:	10 99       	mov	r9,r8
80028014:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028018:	f1 49 00 88 	st.w	r8[136],r9
#endif 
            
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED) 
            /* Select drive strength */
            if (flags & GPIO_DRIVE_LOW)
8002801c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028020:	e2 18 00 10 	andl	r8,0x10,COH
80028024:	c0 e0       	breq	80028040 <gpio_configure_pin+0x134>
                    gpio_port->odcr0s = 1 << (pin & 0x1F);
80028026:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002802a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002802e:	30 19       	mov	r9,1
80028030:	f2 08 09 48 	lsl	r8,r9,r8
80028034:	10 99       	mov	r9,r8
80028036:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002803a:	f1 49 01 04 	st.w	r8[260],r9
8002803e:	c0 d8       	rjmp	80028058 <gpio_configure_pin+0x14c>
            else
                    gpio_port->odcr0c = 1 << (pin & 0x1F);
80028040:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028044:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80028048:	30 19       	mov	r9,1
8002804a:	f2 08 09 48 	lsl	r8,r9,r8
8002804e:	10 99       	mov	r9,r8
80028050:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028054:	f1 49 01 08 	st.w	r8[264],r9
            if (flags & GPIO_DRIVE_HIGH)
80028058:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002805c:	e2 18 00 20 	andl	r8,0x20,COH
80028060:	c0 e0       	breq	8002807c <gpio_configure_pin+0x170>
                    gpio_port->odcr1s = 1 << (pin & 0x1F);
80028062:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028066:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002806a:	30 19       	mov	r9,1
8002806c:	f2 08 09 48 	lsl	r8,r9,r8
80028070:	10 99       	mov	r9,r8
80028072:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028076:	f1 49 01 14 	st.w	r8[276],r9
8002807a:	c0 d8       	rjmp	80028094 <gpio_configure_pin+0x188>
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
8002807c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028080:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80028084:	30 19       	mov	r9,1
80028086:	f2 08 09 48 	lsl	r8,r9,r8
8002808a:	10 99       	mov	r9,r8
8002808c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028090:	f1 49 01 18 	st.w	r8[280],r9
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80028094:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028098:	e2 18 00 80 	andl	r8,0x80,COH
8002809c:	c5 a0       	breq	80028150 <gpio_configure_pin+0x244>
            if (flags & GPIO_BOTHEDGES)
8002809e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800280a2:	e2 18 01 80 	andl	r8,0x180,COH
800280a6:	c1 a0       	breq	800280da <gpio_configure_pin+0x1ce>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
800280a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800280ac:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800280b0:	30 19       	mov	r9,1
800280b2:	f2 08 09 48 	lsl	r8,r9,r8
800280b6:	10 99       	mov	r9,r8
800280b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800280bc:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
800280c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800280c4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800280c8:	30 19       	mov	r9,1
800280ca:	f2 08 09 48 	lsl	r8,r9,r8
800280ce:	10 99       	mov	r9,r8
800280d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800280d4:	f1 49 00 b8 	st.w	r8[184],r9
800280d8:	c3 c8       	rjmp	80028150 <gpio_configure_pin+0x244>
            }
            else if (flags & GPIO_RISING)
800280da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800280de:	e2 18 02 80 	andl	r8,0x280,COH
800280e2:	c1 a0       	breq	80028116 <gpio_configure_pin+0x20a>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
800280e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800280e8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800280ec:	30 19       	mov	r9,1
800280ee:	f2 08 09 48 	lsl	r8,r9,r8
800280f2:	10 99       	mov	r9,r8
800280f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800280f8:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
800280fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028100:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80028104:	30 19       	mov	r9,1
80028106:	f2 08 09 48 	lsl	r8,r9,r8
8002810a:	10 99       	mov	r9,r8
8002810c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028110:	f1 49 00 b8 	st.w	r8[184],r9
80028114:	c1 e8       	rjmp	80028150 <gpio_configure_pin+0x244>
            }
            else if (flags & GPIO_FALLING)
80028116:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002811a:	e2 18 03 80 	andl	r8,0x380,COH
8002811e:	c1 90       	breq	80028150 <gpio_configure_pin+0x244>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80028120:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028124:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80028128:	30 19       	mov	r9,1
8002812a:	f2 08 09 48 	lsl	r8,r9,r8
8002812e:	10 99       	mov	r9,r8
80028130:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028134:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
80028138:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002813c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80028140:	30 19       	mov	r9,1
80028142:	f2 08 09 48 	lsl	r8,r9,r8
80028146:	10 99       	mov	r9,r8
80028148:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002814c:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80028150:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028154:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028158:	5c 58       	castu.b	r8
8002815a:	c2 c0       	breq	800281b2 <gpio_configure_pin+0x2a6>
            if (flags & GPIO_INIT_HIGH)
8002815c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028160:	e2 18 00 02 	andl	r8,0x2,COH
80028164:	c0 e0       	breq	80028180 <gpio_configure_pin+0x274>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
80028166:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002816a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002816e:	30 19       	mov	r9,1
80028170:	f2 08 09 48 	lsl	r8,r9,r8
80028174:	10 99       	mov	r9,r8
80028176:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002817a:	f1 49 00 54 	st.w	r8[84],r9
8002817e:	c0 d8       	rjmp	80028198 <gpio_configure_pin+0x28c>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
80028180:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028184:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80028188:	30 19       	mov	r9,1
8002818a:	f2 08 09 48 	lsl	r8,r9,r8
8002818e:	10 99       	mov	r9,r8
80028190:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028194:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
80028198:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002819c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800281a0:	30 19       	mov	r9,1
800281a2:	f2 08 09 48 	lsl	r8,r9,r8
800281a6:	10 99       	mov	r9,r8
800281a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800281ac:	f1 49 00 44 	st.w	r8[68],r9
800281b0:	c0 d8       	rjmp	800281ca <gpio_configure_pin+0x2be>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
800281b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800281b6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800281ba:	30 19       	mov	r9,1
800281bc:	f2 08 09 48 	lsl	r8,r9,r8
800281c0:	10 99       	mov	r9,r8
800281c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800281c6:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
800281ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800281ce:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800281d2:	30 19       	mov	r9,1
800281d4:	f2 08 09 48 	lsl	r8,r9,r8
800281d8:	10 99       	mov	r9,r8
800281da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800281de:	91 19       	st.w	r8[0x4],r9
}
800281e0:	2f dd       	sub	sp,-12
800281e2:	e3 cd 80 80 	ldm	sp++,r7,pc

800281e6 <gpio_configure_group>:

void gpio_configure_group(uint32_t port, uint32_t mask, uint32_t flags)
{  
800281e6:	eb cd 40 80 	pushm	r7,lr
800281ea:	1a 97       	mov	r7,sp
800281ec:	20 4d       	sub	sp,16
800281ee:	ef 4c ff f8 	st.w	r7[-8],r12
800281f2:	ef 4b ff f4 	st.w	r7[-12],r11
800281f6:	ef 4a ff f0 	st.w	r7[-16],r10
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];  
800281fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800281fe:	a9 78       	lsl	r8,0x9
80028200:	e0 28 e0 00 	sub	r8,57344
80028204:	ef 48 ff fc 	st.w	r7[-4],r8

  /* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)  
    if (flags & GPIO_PULL_DOWN)
80028208:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002820c:	e2 18 00 08 	andl	r8,0x8,COH
80028210:	c0 80       	breq	80028220 <gpio_configure_group+0x3a>
            gpio_port->pders = mask;
80028212:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028216:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002821a:	f1 49 00 84 	st.w	r8[132],r9
8002821e:	c0 78       	rjmp	8002822c <gpio_configure_group+0x46>
    else
            gpio_port->pderc = mask;
80028220:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028224:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028228:	f1 49 00 88 	st.w	r8[136],r9
#endif    
    if (flags & GPIO_PULL_UP)
8002822c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028230:	e2 18 00 04 	andl	r8,0x4,COH
80028234:	c0 80       	breq	80028244 <gpio_configure_group+0x5e>
            gpio_port->puers = mask;
80028236:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002823a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002823e:	f1 49 00 74 	st.w	r8[116],r9
80028242:	c0 78       	rjmp	80028250 <gpio_configure_group+0x6a>
    else
            gpio_port->puerc = mask;
80028244:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028248:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002824c:	f1 49 00 78 	st.w	r8[120],r9

    /* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)  
            if (flags & GPIO_OPEN_DRAIN)
80028250:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028254:	e2 18 00 40 	andl	r8,0x40,COH
80028258:	c0 80       	breq	80028268 <gpio_configure_group+0x82>
                    gpio_port->odmers = mask;
8002825a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002825e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028262:	f1 49 00 e4 	st.w	r8[228],r9
80028266:	c0 78       	rjmp	80028274 <gpio_configure_group+0x8e>
            else
                    gpio_port->odmerc = mask;            
80028268:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002826c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028270:	f1 49 00 e8 	st.w	r8[232],r9

            if (flags & GPIO_OPEN_DRAIN)
80028274:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028278:	e2 18 00 40 	andl	r8,0x40,COH
8002827c:	c0 80       	breq	8002828c <gpio_configure_group+0xa6>
                    gpio_port->pders = mask;
8002827e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028282:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028286:	f1 49 00 84 	st.w	r8[132],r9
8002828a:	c0 78       	rjmp	80028298 <gpio_configure_group+0xb2>
            else
                    gpio_port->pderc = mask;
8002828c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028290:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028294:	f1 49 00 88 	st.w	r8[136],r9
#endif 
            
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED) 
            /* Select drive strength */
            if (flags & GPIO_DRIVE_LOW)
80028298:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002829c:	e2 18 00 10 	andl	r8,0x10,COH
800282a0:	c0 80       	breq	800282b0 <gpio_configure_group+0xca>
                    gpio_port->odcr0s = mask;
800282a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800282a6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800282aa:	f1 49 01 04 	st.w	r8[260],r9
800282ae:	c0 78       	rjmp	800282bc <gpio_configure_group+0xd6>
            else
                    gpio_port->odcr0c = mask;
800282b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800282b4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800282b8:	f1 49 01 08 	st.w	r8[264],r9
            if (flags & GPIO_DRIVE_HIGH)
800282bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800282c0:	e2 18 00 20 	andl	r8,0x20,COH
800282c4:	c0 80       	breq	800282d4 <gpio_configure_group+0xee>
                    gpio_port->odcr1s = mask;
800282c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800282ca:	ee f9 ff f4 	ld.w	r9,r7[-12]
800282ce:	f1 49 01 14 	st.w	r8[276],r9
800282d2:	c0 78       	rjmp	800282e0 <gpio_configure_group+0xfa>
            else
                    gpio_port->odcr1c = mask;
800282d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800282d8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800282dc:	f1 49 01 18 	st.w	r8[280],r9
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
800282e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800282e4:	e2 18 00 80 	andl	r8,0x80,COH
800282e8:	c3 60       	breq	80028354 <gpio_configure_group+0x16e>
            if (flags & GPIO_BOTHEDGES)
800282ea:	ee f8 ff f0 	ld.w	r8,r7[-16]
800282ee:	e2 18 01 80 	andl	r8,0x180,COH
800282f2:	c0 e0       	breq	8002830e <gpio_configure_group+0x128>
            {
                   gpio_port->imr0c = mask;
800282f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800282f8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800282fc:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = mask;
80028300:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028304:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028308:	f1 49 00 b8 	st.w	r8[184],r9
8002830c:	c2 48       	rjmp	80028354 <gpio_configure_group+0x16e>
            }
            else if (flags & GPIO_RISING)
8002830e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028312:	e2 18 02 80 	andl	r8,0x280,COH
80028316:	c0 e0       	breq	80028332 <gpio_configure_group+0x14c>
            {
                   gpio_port->imr0s = mask;
80028318:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002831c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028320:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = mask;
80028324:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028328:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002832c:	f1 49 00 b8 	st.w	r8[184],r9
80028330:	c1 28       	rjmp	80028354 <gpio_configure_group+0x16e>
            }
            else if (flags & GPIO_FALLING)
80028332:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028336:	e2 18 03 80 	andl	r8,0x380,COH
8002833a:	c0 d0       	breq	80028354 <gpio_configure_group+0x16e>
            {
                   gpio_port->imr0c = mask;
8002833c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028340:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028344:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = mask;
80028348:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002834c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028350:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80028354:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028358:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002835c:	5c 58       	castu.b	r8
8002835e:	c1 a0       	breq	80028392 <gpio_configure_group+0x1ac>
            if (flags & GPIO_INIT_HIGH)
80028360:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028364:	e2 18 00 02 	andl	r8,0x2,COH
80028368:	c0 80       	breq	80028378 <gpio_configure_group+0x192>
                    gpio_port->ovrs = mask;
8002836a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002836e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028372:	f1 49 00 54 	st.w	r8[84],r9
80028376:	c0 78       	rjmp	80028384 <gpio_configure_group+0x19e>
            else
                    gpio_port->ovrc = mask;
80028378:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002837c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028380:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = mask;
80028384:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028388:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002838c:	f1 49 00 44 	st.w	r8[68],r9
80028390:	c0 78       	rjmp	8002839e <gpio_configure_group+0x1b8>
    } else {
            gpio_port->oderc = mask;
80028392:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028396:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002839a:	f1 49 00 48 	st.w	r8[72],r9
    }
    
    /* Enable GPIO */
    gpio_port->gpers = mask;
8002839e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800283a2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800283a6:	91 19       	st.w	r8[0x4],r9
}
800283a8:	2f cd       	sub	sp,-16
800283aa:	e3 cd 80 80 	ldm	sp++,r7,pc

800283ae <gpio_get_pin_value>:

int gpio_get_pin_value(uint32_t pin)
{
800283ae:	eb cd 40 80 	pushm	r7,lr
800283b2:	1a 97       	mov	r7,sp
800283b4:	20 2d       	sub	sp,8
800283b6:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800283ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800283be:	a5 98       	lsr	r8,0x5
800283c0:	a9 78       	lsl	r8,0x9
800283c2:	e0 28 e0 00 	sub	r8,57344
800283c6:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
800283ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800283ce:	71 89       	ld.w	r9,r8[0x60]
800283d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800283d4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800283d8:	f2 08 0a 48 	lsr	r8,r9,r8
800283dc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
800283e0:	10 9c       	mov	r12,r8
800283e2:	2f ed       	sub	sp,-8
800283e4:	e3 cd 80 80 	ldm	sp++,r7,pc

800283e8 <gpio_get_gpio_pin_output_value>:


int gpio_get_gpio_pin_output_value(uint32_t pin)
{
800283e8:	eb cd 40 80 	pushm	r7,lr
800283ec:	1a 97       	mov	r7,sp
800283ee:	20 2d       	sub	sp,8
800283f0:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800283f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800283f8:	a5 98       	lsr	r8,0x5
800283fa:	a9 78       	lsl	r8,0x9
800283fc:	e0 28 e0 00 	sub	r8,57344
80028400:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->ovr >> (pin & 0x1F)) & 1;
80028404:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028408:	71 49       	ld.w	r9,r8[0x50]
8002840a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002840e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80028412:	f2 08 0a 48 	lsr	r8,r9,r8
80028416:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
8002841a:	10 9c       	mov	r12,r8
8002841c:	2f ed       	sub	sp,-8
8002841e:	e3 cd 80 80 	ldm	sp++,r7,pc

80028422 <gpio_get_gpio_open_drain_pin_output_value>:


int gpio_get_gpio_open_drain_pin_output_value(uint32_t pin)
{
80028422:	eb cd 40 80 	pushm	r7,lr
80028426:	1a 97       	mov	r7,sp
80028428:	20 2d       	sub	sp,8
8002842a:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002842e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028432:	a5 98       	lsr	r8,0x5
80028434:	a9 78       	lsl	r8,0x9
80028436:	e0 28 e0 00 	sub	r8,57344
8002843a:	ef 48 ff fc 	st.w	r7[-4],r8
  return ((gpio_port->oder >> (pin & 0x1F)) & 1) ^ 1;
8002843e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028442:	71 09       	ld.w	r9,r8[0x40]
80028444:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028448:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002844c:	f2 08 0a 48 	lsr	r8,r9,r8
80028450:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028454:	5f 08       	sreq	r8
}
80028456:	10 9c       	mov	r12,r8
80028458:	2f ed       	sub	sp,-8
8002845a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002845e <gpio_set_gpio_pin>:


void gpio_set_gpio_pin(uint32_t pin)
{
8002845e:	eb cd 40 80 	pushm	r7,lr
80028462:	1a 97       	mov	r7,sp
80028464:	20 2d       	sub	sp,8
80028466:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002846a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002846e:	a5 98       	lsr	r8,0x5
80028470:	a9 78       	lsl	r8,0x9
80028472:	e0 28 e0 00 	sub	r8,57344
80028476:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
8002847a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002847e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80028482:	30 19       	mov	r9,1
80028484:	f2 08 09 48 	lsl	r8,r9,r8
80028488:	10 99       	mov	r9,r8
8002848a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002848e:	f1 49 00 54 	st.w	r8[84],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80028492:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028496:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002849a:	30 19       	mov	r9,1
8002849c:	f2 08 09 48 	lsl	r8,r9,r8
800284a0:	10 99       	mov	r9,r8
800284a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800284a6:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
800284aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800284ae:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800284b2:	30 19       	mov	r9,1
800284b4:	f2 08 09 48 	lsl	r8,r9,r8
800284b8:	10 99       	mov	r9,r8
800284ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800284be:	91 19       	st.w	r8[0x4],r9
}
800284c0:	2f ed       	sub	sp,-8
800284c2:	e3 cd 80 80 	ldm	sp++,r7,pc

800284c6 <gpio_set_pin_high>:

void gpio_set_pin_high(uint32_t pin)
{
800284c6:	eb cd 40 80 	pushm	r7,lr
800284ca:	1a 97       	mov	r7,sp
800284cc:	20 2d       	sub	sp,8
800284ce:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800284d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800284d6:	a5 98       	lsr	r8,0x5
800284d8:	a9 78       	lsl	r8,0x9
800284da:	e0 28 e0 00 	sub	r8,57344
800284de:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
800284e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800284e6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800284ea:	30 19       	mov	r9,1
800284ec:	f2 08 09 48 	lsl	r8,r9,r8
800284f0:	10 99       	mov	r9,r8
800284f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800284f6:	f1 49 00 54 	st.w	r8[84],r9
}
800284fa:	2f ed       	sub	sp,-8
800284fc:	e3 cd 80 80 	ldm	sp++,r7,pc

80028500 <gpio_set_group_high>:

void gpio_set_group_high(uint32_t port, uint32_t mask)
{
80028500:	eb cd 40 80 	pushm	r7,lr
80028504:	1a 97       	mov	r7,sp
80028506:	20 3d       	sub	sp,12
80028508:	ef 4c ff f8 	st.w	r7[-8],r12
8002850c:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
80028510:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028514:	a9 78       	lsl	r8,0x9
80028516:	e0 28 e0 00 	sub	r8,57344
8002851a:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = mask; // Value to be driven on the I/O group: 1.
8002851e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028522:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028526:	f1 49 00 54 	st.w	r8[84],r9
}
8002852a:	2f dd       	sub	sp,-12
8002852c:	e3 cd 80 80 	ldm	sp++,r7,pc

80028530 <gpio_set_pin_low>:


void gpio_set_pin_low(uint32_t pin)
{
80028530:	eb cd 40 80 	pushm	r7,lr
80028534:	1a 97       	mov	r7,sp
80028536:	20 2d       	sub	sp,8
80028538:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002853c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028540:	a5 98       	lsr	r8,0x5
80028542:	a9 78       	lsl	r8,0x9
80028544:	e0 28 e0 00 	sub	r8,57344
80028548:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
8002854c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028550:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80028554:	30 19       	mov	r9,1
80028556:	f2 08 09 48 	lsl	r8,r9,r8
8002855a:	10 99       	mov	r9,r8
8002855c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028560:	f1 49 00 58 	st.w	r8[88],r9
}
80028564:	2f ed       	sub	sp,-8
80028566:	e3 cd 80 80 	ldm	sp++,r7,pc

8002856a <gpio_clr_gpio_pin>:

void gpio_clr_gpio_pin(uint32_t pin)
{
8002856a:	eb cd 40 80 	pushm	r7,lr
8002856e:	1a 97       	mov	r7,sp
80028570:	20 2d       	sub	sp,8
80028572:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80028576:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002857a:	a5 98       	lsr	r8,0x5
8002857c:	a9 78       	lsl	r8,0x9
8002857e:	e0 28 e0 00 	sub	r8,57344
80028582:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80028586:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002858a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002858e:	30 19       	mov	r9,1
80028590:	f2 08 09 48 	lsl	r8,r9,r8
80028594:	10 99       	mov	r9,r8
80028596:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002859a:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
8002859e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800285a2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800285a6:	30 19       	mov	r9,1
800285a8:	f2 08 09 48 	lsl	r8,r9,r8
800285ac:	10 99       	mov	r9,r8
800285ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800285b2:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.  
800285b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800285ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800285be:	30 19       	mov	r9,1
800285c0:	f2 08 09 48 	lsl	r8,r9,r8
800285c4:	10 99       	mov	r9,r8
800285c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800285ca:	91 19       	st.w	r8[0x4],r9
}
800285cc:	2f ed       	sub	sp,-8
800285ce:	e3 cd 80 80 	ldm	sp++,r7,pc

800285d2 <gpio_set_group_low>:

void gpio_set_group_low(uint32_t port, uint32_t mask)
{
800285d2:	eb cd 40 80 	pushm	r7,lr
800285d6:	1a 97       	mov	r7,sp
800285d8:	20 3d       	sub	sp,12
800285da:	ef 4c ff f8 	st.w	r7[-8],r12
800285de:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
800285e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800285e6:	a9 78       	lsl	r8,0x9
800285e8:	e0 28 e0 00 	sub	r8,57344
800285ec:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = mask; // Value to be driven on the I/O group: 0.
800285f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800285f4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800285f8:	f1 49 00 58 	st.w	r8[88],r9
}
800285fc:	2f dd       	sub	sp,-12
800285fe:	e3 cd 80 80 	ldm	sp++,r7,pc

80028602 <gpio_tgl_gpio_pin>:

void gpio_tgl_gpio_pin(uint32_t pin)
{
80028602:	eb cd 40 80 	pushm	r7,lr
80028606:	1a 97       	mov	r7,sp
80028608:	20 2d       	sub	sp,8
8002860a:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002860e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028612:	a5 98       	lsr	r8,0x5
80028614:	a9 78       	lsl	r8,0x9
80028616:	e0 28 e0 00 	sub	r8,57344
8002861a:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
8002861e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028622:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80028626:	30 19       	mov	r9,1
80028628:	f2 08 09 48 	lsl	r8,r9,r8
8002862c:	10 99       	mov	r9,r8
8002862e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028632:	f1 49 00 5c 	st.w	r8[92],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80028636:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002863a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002863e:	30 19       	mov	r9,1
80028640:	f2 08 09 48 	lsl	r8,r9,r8
80028644:	10 99       	mov	r9,r8
80028646:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002864a:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
8002864e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028652:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80028656:	30 19       	mov	r9,1
80028658:	f2 08 09 48 	lsl	r8,r9,r8
8002865c:	10 99       	mov	r9,r8
8002865e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028662:	91 19       	st.w	r8[0x4],r9
}
80028664:	2f ed       	sub	sp,-8
80028666:	e3 cd 80 80 	ldm	sp++,r7,pc

8002866a <gpio_toggle_pin>:

void gpio_toggle_pin(uint32_t pin)
{
8002866a:	eb cd 40 80 	pushm	r7,lr
8002866e:	1a 97       	mov	r7,sp
80028670:	20 2d       	sub	sp,8
80028672:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80028676:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002867a:	a5 98       	lsr	r8,0x5
8002867c:	a9 78       	lsl	r8,0x9
8002867e:	e0 28 e0 00 	sub	r8,57344
80028682:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
80028686:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002868a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002868e:	30 19       	mov	r9,1
80028690:	f2 08 09 48 	lsl	r8,r9,r8
80028694:	10 99       	mov	r9,r8
80028696:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002869a:	f1 49 00 5c 	st.w	r8[92],r9
}
8002869e:	2f ed       	sub	sp,-8
800286a0:	e3 cd 80 80 	ldm	sp++,r7,pc

800286a4 <gpio_toggle_group>:

void gpio_toggle_group(uint32_t port, uint32_t mask)
{
800286a4:	eb cd 40 80 	pushm	r7,lr
800286a8:	1a 97       	mov	r7,sp
800286aa:	20 3d       	sub	sp,12
800286ac:	ef 4c ff f8 	st.w	r7[-8],r12
800286b0:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
800286b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800286b8:	a9 78       	lsl	r8,0x9
800286ba:	e0 28 e0 00 	sub	r8,57344
800286be:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = mask; // Toggle the I/O port.
800286c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800286c6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800286ca:	f1 49 00 5c 	st.w	r8[92],r9
}
800286ce:	2f dd       	sub	sp,-12
800286d0:	e3 cd 80 80 	ldm	sp++,r7,pc

800286d4 <gpio_set_gpio_open_drain_pin>:

void gpio_set_gpio_open_drain_pin(uint32_t pin)
{
800286d4:	eb cd 40 80 	pushm	r7,lr
800286d8:	1a 97       	mov	r7,sp
800286da:	20 2d       	sub	sp,8
800286dc:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800286e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800286e4:	a5 98       	lsr	r8,0x5
800286e6:	a9 78       	lsl	r8,0x9
800286e8:	e0 28 e0 00 	sub	r8,57344
800286ec:	ef 48 ff fc 	st.w	r7[-4],r8

  gpio_port->oderc = 1 << (pin & 0x1F); // The GPIO output driver is disabled for that pin.
800286f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800286f4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800286f8:	30 19       	mov	r9,1
800286fa:	f2 08 09 48 	lsl	r8,r9,r8
800286fe:	10 99       	mov	r9,r8
80028700:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028704:	f1 49 00 48 	st.w	r8[72],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80028708:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002870c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80028710:	30 19       	mov	r9,1
80028712:	f2 08 09 48 	lsl	r8,r9,r8
80028716:	10 99       	mov	r9,r8
80028718:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002871c:	91 19       	st.w	r8[0x4],r9
}
8002871e:	2f ed       	sub	sp,-8
80028720:	e3 cd 80 80 	ldm	sp++,r7,pc

80028724 <gpio_clr_gpio_open_drain_pin>:


void gpio_clr_gpio_open_drain_pin(uint32_t pin)
{
80028724:	eb cd 40 80 	pushm	r7,lr
80028728:	1a 97       	mov	r7,sp
8002872a:	20 2d       	sub	sp,8
8002872c:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80028730:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028734:	a5 98       	lsr	r8,0x5
80028736:	a9 78       	lsl	r8,0x9
80028738:	e0 28 e0 00 	sub	r8,57344
8002873c:	ef 48 ff fc 	st.w	r7[-4],r8

  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80028740:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028744:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80028748:	30 19       	mov	r9,1
8002874a:	f2 08 09 48 	lsl	r8,r9,r8
8002874e:	10 99       	mov	r9,r8
80028750:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028754:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80028758:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002875c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80028760:	30 19       	mov	r9,1
80028762:	f2 08 09 48 	lsl	r8,r9,r8
80028766:	10 99       	mov	r9,r8
80028768:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002876c:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80028770:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028774:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80028778:	30 19       	mov	r9,1
8002877a:	f2 08 09 48 	lsl	r8,r9,r8
8002877e:	10 99       	mov	r9,r8
80028780:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028784:	91 19       	st.w	r8[0x4],r9
}
80028786:	2f ed       	sub	sp,-8
80028788:	e3 cd 80 80 	ldm	sp++,r7,pc

8002878c <gpio_tgl_gpio_open_drain_pin>:


void gpio_tgl_gpio_open_drain_pin(uint32_t pin)
{
8002878c:	eb cd 40 80 	pushm	r7,lr
80028790:	1a 97       	mov	r7,sp
80028792:	20 2d       	sub	sp,8
80028794:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80028798:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002879c:	a5 98       	lsr	r8,0x5
8002879e:	a9 78       	lsl	r8,0x9
800287a0:	e0 28 e0 00 	sub	r8,57344
800287a4:	ef 48 ff fc 	st.w	r7[-4],r8

  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line if the GPIO output driver is enabled: 0.
800287a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800287ac:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800287b0:	30 19       	mov	r9,1
800287b2:	f2 08 09 48 	lsl	r8,r9,r8
800287b6:	10 99       	mov	r9,r8
800287b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800287bc:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->odert = 1 << (pin & 0x1F); // The GPIO output driver is toggled for that pin.
800287c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800287c4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800287c8:	30 19       	mov	r9,1
800287ca:	f2 08 09 48 	lsl	r8,r9,r8
800287ce:	10 99       	mov	r9,r8
800287d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800287d4:	f1 49 00 4c 	st.w	r8[76],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
800287d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800287dc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800287e0:	30 19       	mov	r9,1
800287e2:	f2 08 09 48 	lsl	r8,r9,r8
800287e6:	10 99       	mov	r9,r8
800287e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800287ec:	91 19       	st.w	r8[0x4],r9
}
800287ee:	2f ed       	sub	sp,-8
800287f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800287f4 <gpio_enable_pin_glitch_filter>:


void gpio_enable_pin_glitch_filter(uint32_t pin)
{
800287f4:	eb cd 40 80 	pushm	r7,lr
800287f8:	1a 97       	mov	r7,sp
800287fa:	20 2d       	sub	sp,8
800287fc:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80028800:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028804:	a5 98       	lsr	r8,0x5
80028806:	a9 78       	lsl	r8,0x9
80028808:	e0 28 e0 00 	sub	r8,57344
8002880c:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->gfers = 1 << (pin & 0x1F);
80028810:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028814:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80028818:	30 19       	mov	r9,1
8002881a:	f2 08 09 48 	lsl	r8,r9,r8
8002881e:	10 99       	mov	r9,r8
80028820:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028824:	f1 49 00 c4 	st.w	r8[196],r9
}
80028828:	2f ed       	sub	sp,-8
8002882a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002882e <gpio_disable_pin_glitch_filter>:


void gpio_disable_pin_glitch_filter(uint32_t pin)
{
8002882e:	eb cd 40 80 	pushm	r7,lr
80028832:	1a 97       	mov	r7,sp
80028834:	20 2d       	sub	sp,8
80028836:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002883a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002883e:	a5 98       	lsr	r8,0x5
80028840:	a9 78       	lsl	r8,0x9
80028842:	e0 28 e0 00 	sub	r8,57344
80028846:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->gferc = 1 << (pin & 0x1F);
8002884a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002884e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80028852:	30 19       	mov	r9,1
80028854:	f2 08 09 48 	lsl	r8,r9,r8
80028858:	10 99       	mov	r9,r8
8002885a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002885e:	f1 49 00 c8 	st.w	r8[200],r9
}
80028862:	2f ed       	sub	sp,-8
80028864:	e3 cd 80 80 	ldm	sp++,r7,pc

80028868 <gpio_configure_edge_detector>:
 *             or \ref GPIO_FALLING_EDGE).
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
static int gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
80028868:	eb cd 40 80 	pushm	r7,lr
8002886c:	1a 97       	mov	r7,sp
8002886e:	20 3d       	sub	sp,12
80028870:	ef 4c ff f8 	st.w	r7[-8],r12
80028874:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80028878:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002887c:	a5 98       	lsr	r8,0x5
8002887e:	a9 78       	lsl	r8,0x9
80028880:	e0 28 e0 00 	sub	r8,57344
80028884:	ef 48 ff fc 	st.w	r7[-4],r8
  
  // Configure the edge detector.
  switch (mode)
80028888:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002888c:	58 18       	cp.w	r8,1
8002888e:	c1 e0       	breq	800288ca <gpio_configure_edge_detector+0x62>
80028890:	c0 43       	brcs	80028898 <gpio_configure_edge_detector+0x30>
80028892:	58 28       	cp.w	r8,2
80028894:	c3 40       	breq	800288fc <gpio_configure_edge_detector+0x94>
80028896:	c4 c8       	rjmp	8002892e <gpio_configure_edge_detector+0xc6>
  {
  case GPIO_PIN_CHANGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
80028898:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002889c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800288a0:	30 19       	mov	r9,1
800288a2:	f2 08 09 48 	lsl	r8,r9,r8
800288a6:	10 99       	mov	r9,r8
800288a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800288ac:	f1 49 00 a8 	st.w	r8[168],r9
    gpio_port->imr1c = 1 << (pin & 0x1F);
800288b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800288b4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800288b8:	30 19       	mov	r9,1
800288ba:	f2 08 09 48 	lsl	r8,r9,r8
800288be:	10 99       	mov	r9,r8
800288c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800288c4:	f1 49 00 b8 	st.w	r8[184],r9
    break;
800288c8:	c3 58       	rjmp	80028932 <gpio_configure_edge_detector+0xca>

  case GPIO_RISING_EDGE:
    gpio_port->imr0s = 1 << (pin & 0x1F);
800288ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800288ce:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800288d2:	30 19       	mov	r9,1
800288d4:	f2 08 09 48 	lsl	r8,r9,r8
800288d8:	10 99       	mov	r9,r8
800288da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800288de:	f1 49 00 a4 	st.w	r8[164],r9
    gpio_port->imr1c = 1 << (pin & 0x1F);
800288e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800288e6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800288ea:	30 19       	mov	r9,1
800288ec:	f2 08 09 48 	lsl	r8,r9,r8
800288f0:	10 99       	mov	r9,r8
800288f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800288f6:	f1 49 00 b8 	st.w	r8[184],r9
    break;
800288fa:	c1 c8       	rjmp	80028932 <gpio_configure_edge_detector+0xca>

  case GPIO_FALLING_EDGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
800288fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028900:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80028904:	30 19       	mov	r9,1
80028906:	f2 08 09 48 	lsl	r8,r9,r8
8002890a:	10 99       	mov	r9,r8
8002890c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028910:	f1 49 00 a8 	st.w	r8[168],r9
    gpio_port->imr1s = 1 << (pin & 0x1F);
80028914:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028918:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002891c:	30 19       	mov	r9,1
8002891e:	f2 08 09 48 	lsl	r8,r9,r8
80028922:	10 99       	mov	r9,r8
80028924:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028928:	f1 49 00 b4 	st.w	r8[180],r9
    break;
8002892c:	c0 38       	rjmp	80028932 <gpio_configure_edge_detector+0xca>

  default:
    return GPIO_INVALID_ARGUMENT;
8002892e:	30 18       	mov	r8,1
80028930:	c0 28       	rjmp	80028934 <gpio_configure_edge_detector+0xcc>
  }

  return GPIO_SUCCESS;
80028932:	30 08       	mov	r8,0
}
80028934:	10 9c       	mov	r12,r8
80028936:	2f dd       	sub	sp,-12
80028938:	e3 cd 80 80 	ldm	sp++,r7,pc

8002893c <gpio_enable_pin_interrupt>:


int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
8002893c:	eb cd 40 c0 	pushm	r6-r7,lr
80028940:	1a 97       	mov	r7,sp
80028942:	20 3d       	sub	sp,12
80028944:	49 b6       	lddpc	r6,800289b0 <gpio_enable_pin_interrupt+0x74>
80028946:	1e 26       	rsub	r6,pc
80028948:	ef 4c ff f8 	st.w	r7[-8],r12
8002894c:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];
80028950:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028954:	a5 98       	lsr	r8,0x5
80028956:	a9 78       	lsl	r8,0x9
80028958:	e0 28 e0 00 	sub	r8,57344
8002895c:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
80028960:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028964:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80028968:	30 19       	mov	r9,1
8002896a:	f2 08 09 48 	lsl	r8,r9,r8
8002896e:	10 99       	mov	r9,r8
80028970:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028974:	f1 49 00 c4 	st.w	r8[196],r9

  // Configure the edge detector.
  if(GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode))
80028978:	ee fb ff f4 	ld.w	r11,r7[-12]
8002897c:	ee fc ff f8 	ld.w	r12,r7[-8]
80028980:	c7 4f       	rcall	80028868 <gpio_configure_edge_detector>
80028982:	18 98       	mov	r8,r12
80028984:	58 18       	cp.w	r8,1
80028986:	c0 31       	brne	8002898c <gpio_enable_pin_interrupt+0x50>
    return(GPIO_INVALID_ARGUMENT);
80028988:	30 18       	mov	r8,1
8002898a:	c0 e8       	rjmp	800289a6 <gpio_enable_pin_interrupt+0x6a>

  // Enable interrupt.
  gpio_port->iers = 1 << (pin & 0x1F);
8002898c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028990:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80028994:	30 19       	mov	r9,1
80028996:	f2 08 09 48 	lsl	r8,r9,r8
8002899a:	10 99       	mov	r9,r8
8002899c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800289a0:	f1 49 00 94 	st.w	r8[148],r9

  return GPIO_SUCCESS;
800289a4:	30 08       	mov	r8,0
}
800289a6:	10 9c       	mov	r12,r8
800289a8:	2f dd       	sub	sp,-12
800289aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800289ae:	00 00       	add	r0,r0
800289b0:	80 02       	ld.sh	r2,r0[0x0]
800289b2:	87 ca       	st.w	r3[0x30],r10

800289b4 <gpio_disable_pin_interrupt>:


void gpio_disable_pin_interrupt(uint32_t pin)
{
800289b4:	eb cd 40 80 	pushm	r7,lr
800289b8:	1a 97       	mov	r7,sp
800289ba:	20 2d       	sub	sp,8
800289bc:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800289c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800289c4:	a5 98       	lsr	r8,0x5
800289c6:	a9 78       	lsl	r8,0x9
800289c8:	e0 28 e0 00 	sub	r8,57344
800289cc:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ierc = 1 << (pin & 0x1F);
800289d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800289d4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800289d8:	30 19       	mov	r9,1
800289da:	f2 08 09 48 	lsl	r8,r9,r8
800289de:	10 99       	mov	r9,r8
800289e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800289e4:	f1 49 00 98 	st.w	r8[152],r9
}
800289e8:	2f ed       	sub	sp,-8
800289ea:	e3 cd 80 80 	ldm	sp++,r7,pc

800289ee <gpio_get_pin_interrupt_flag>:


int gpio_get_pin_interrupt_flag(uint32_t pin)
{
800289ee:	eb cd 40 80 	pushm	r7,lr
800289f2:	1a 97       	mov	r7,sp
800289f4:	20 2d       	sub	sp,8
800289f6:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800289fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800289fe:	a5 98       	lsr	r8,0x5
80028a00:	a9 78       	lsl	r8,0x9
80028a02:	e0 28 e0 00 	sub	r8,57344
80028a06:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->ifr >> (pin & 0x1F)) & 1;
80028a0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028a0e:	f0 f9 00 d0 	ld.w	r9,r8[208]
80028a12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028a16:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80028a1a:	f2 08 0a 48 	lsr	r8,r9,r8
80028a1e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
80028a22:	10 9c       	mov	r12,r8
80028a24:	2f ed       	sub	sp,-8
80028a26:	e3 cd 80 80 	ldm	sp++,r7,pc

80028a2a <gpio_clear_pin_interrupt_flag>:


void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
80028a2a:	eb cd 40 80 	pushm	r7,lr
80028a2e:	1a 97       	mov	r7,sp
80028a30:	20 2d       	sub	sp,8
80028a32:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80028a36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028a3a:	a5 98       	lsr	r8,0x5
80028a3c:	a9 78       	lsl	r8,0x9
80028a3e:	e0 28 e0 00 	sub	r8,57344
80028a42:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ifrc = 1 << (pin & 0x1F);

  // Restore interrupt enable register.
  gpio_port->ier = gpio_ier;
#else
  gpio_port->ifrc = 1 << (pin & 0x1F);
80028a46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028a4a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80028a4e:	30 19       	mov	r9,1
80028a50:	f2 08 09 48 	lsl	r8,r9,r8
80028a54:	10 99       	mov	r9,r8
80028a56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028a5a:	f1 49 00 d8 	st.w	r8[216],r9
#endif
}
80028a5e:	2f ed       	sub	sp,-8
80028a60:	e3 cd 80 80 	ldm	sp++,r7,pc

80028a64 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80028a64:	eb cd 40 c0 	pushm	r6-r7,lr
80028a68:	1a 97       	mov	r7,sp
  // Catch unregistered interrupts.
  while (true);
80028a6a:	c0 08       	rjmp	80028a6a <_unhandled_interrupt+0x6>

80028a6c <_get_interrupt_handler>:
 * \return Interrupt handler to execute.
 *
 * \note Taken and adapted from Newlib.
 */
__int_handler _get_interrupt_handler(unsigned int int_level)
{
80028a6c:	eb cd 40 c0 	pushm	r6-r7,lr
80028a70:	1a 97       	mov	r7,sp
80028a72:	20 3d       	sub	sp,12
80028a74:	49 a6       	lddpc	r6,80028adc <_get_interrupt_handler+0x70>
80028a76:	1e 26       	rsub	r6,pc
80028a78:	ef 4c ff f4 	st.w	r7[-12],r12
  // ICR3 is mapped first, ICR0 last.
  // Code in exception.S puts int_level in R12 which is used by AVR32-GCC to
  // pass a single argument to a function.
  unsigned int int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80028a7c:	fe 78 00 00 	mov	r8,-65536
80028a80:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028a84:	f2 09 11 03 	rsub	r9,r9,3
80028a88:	28 09       	sub	r9,-128
80028a8a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80028a8e:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int int_req = AVR32_INTC.irr[int_grp];
80028a92:	fe 78 00 00 	mov	r8,-65536
80028a96:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028a9a:	2c 09       	sub	r9,-64
80028a9c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80028aa0:	ef 48 ff fc 	st.w	r7[-4],r8
  // exception.S will provide the interrupt handler with a clean interrupt stack
  // frame, with nothing more pushed onto the stack. The interrupt handler must
  // manage the `rete' instruction, what can be done thanks to pure assembly,
  // inline assembly or the `__attribute__((__interrupt__))' C function
  // attribute.
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
80028aa4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028aa8:	58 08       	cp.w	r8,0
80028aaa:	c1 40       	breq	80028ad2 <_get_interrupt_handler+0x66>
80028aac:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028ab0:	ec f8 02 94 	ld.w	r8,r6[660]
80028ab4:	a1 79       	lsl	r9,0x1
80028ab6:	2f f9       	sub	r9,-1
80028ab8:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80028abc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028ac0:	f0 08 12 00 	clz	r8,r8
80028ac4:	f0 08 11 1f 	rsub	r8,r8,31
80028ac8:	a3 68       	lsl	r8,0x2
80028aca:	f2 08 00 08 	add	r8,r9,r8
80028ace:	70 08       	ld.w	r8,r8[0x0]
80028ad0:	c0 28       	rjmp	80028ad4 <_get_interrupt_handler+0x68>
80028ad2:	30 08       	mov	r8,0
}
80028ad4:	10 9c       	mov	r12,r8
80028ad6:	2f dd       	sub	sp,-12
80028ad8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028adc:	80 02       	ld.sh	r2,r0[0x0]
80028ade:	88 fa       	ld.uh	r10,r4[0xe]

80028ae0 <INTC_init_evba>:

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
80028ae0:	eb cd 40 c0 	pushm	r6-r7,lr
80028ae4:	1a 97       	mov	r7,sp
80028ae6:	48 56       	lddpc	r6,80028af8 <INTC_init_evba+0x18>
80028ae8:	1e 26       	rsub	r6,pc
  Set_system_register(AVR32_EVBA, (int)&_evba );
80028aea:	ec f8 07 a4 	ld.w	r8,r6[1956]
80028aee:	e3 b8 00 01 	mtsr	0x4,r8
}
80028af2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028af6:	00 00       	add	r0,r0
80028af8:	80 02       	ld.sh	r2,r0[0x0]
80028afa:	89 6c       	st.w	r4[0x18],r12

80028afc <INTC_init_interrupts>:

void INTC_init_interrupts(void)
{
80028afc:	eb cd 40 c0 	pushm	r6-r7,lr
80028b00:	1a 97       	mov	r7,sp
80028b02:	20 2d       	sub	sp,8
80028b04:	4a 16       	lddpc	r6,80028b88 <INTC_init_interrupts+0x8c>
80028b06:	1e 26       	rsub	r6,pc
  unsigned int int_grp, int_req;

  INTC_init_evba();
80028b08:	ce cf       	rcall	80028ae0 <INTC_init_evba>

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80028b0a:	30 08       	mov	r8,0
80028b0c:	ef 48 ff f8 	st.w	r7[-8],r8
80028b10:	c3 38       	rjmp	80028b76 <INTC_init_interrupts+0x7a>
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80028b12:	30 08       	mov	r8,0
80028b14:	ef 48 ff fc 	st.w	r7[-4],r8
80028b18:	c1 68       	rjmp	80028b44 <INTC_init_interrupts+0x48>
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80028b1a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028b1e:	ec f8 02 94 	ld.w	r8,r6[660]
80028b22:	a1 79       	lsl	r9,0x1
80028b24:	2f f9       	sub	r9,-1
80028b26:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80028b2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028b2e:	a3 68       	lsl	r8,0x2
80028b30:	f2 08 00 08 	add	r8,r9,r8
80028b34:	fe c9 00 d0 	sub	r9,pc,208
80028b38:	91 09       	st.w	r8[0x0],r9

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80028b3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028b3e:	2f f8       	sub	r8,-1
80028b40:	ef 48 ff fc 	st.w	r7[-4],r8
80028b44:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028b48:	ec f8 02 94 	ld.w	r8,r6[660]
80028b4c:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]
80028b50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028b54:	10 39       	cp.w	r9,r8
80028b56:	fe 9b ff e2 	brhi	80028b1a <INTC_init_interrupts+0x1e>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
80028b5a:	fe 78 00 00 	mov	r8,-65536
80028b5e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028b62:	ec fa 03 ec 	ld.w	r10,r6[1004]
80028b66:	74 0a       	ld.w	r10,r10[0x0]
80028b68:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  unsigned int int_grp, int_req;

  INTC_init_evba();

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80028b6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028b70:	2f f8       	sub	r8,-1
80028b72:	ef 48 ff f8 	st.w	r7[-8],r8
80028b76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028b7a:	e0 48 00 2e 	cp.w	r8,46
80028b7e:	fe 98 ff ca 	brls	80028b12 <INTC_init_interrupts+0x16>
    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
  }
}
80028b82:	2f ed       	sub	sp,-8
80028b84:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028b88:	80 02       	ld.sh	r2,r0[0x0]
80028b8a:	89 8a       	st.w	r4[0x20],r10

80028b8c <INTC_register_interrupt>:


void INTC_register_interrupt(__int_handler handler, unsigned int irq, unsigned int int_level)
{
80028b8c:	eb cd 40 c0 	pushm	r6-r7,lr
80028b90:	1a 97       	mov	r7,sp
80028b92:	20 4d       	sub	sp,16
80028b94:	49 86       	lddpc	r6,80028bf4 <INTC_register_interrupt+0x68>
80028b96:	1e 26       	rsub	r6,pc
80028b98:	ef 4c ff f8 	st.w	r7[-8],r12
80028b9c:	ef 4b ff f4 	st.w	r7[-12],r11
80028ba0:	ef 4a ff f0 	st.w	r7[-16],r10
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80028ba4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028ba8:	a5 98       	lsr	r8,0x5
80028baa:	ef 48 ff fc 	st.w	r7[-4],r8

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
80028bae:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028bb2:	ec f8 02 94 	ld.w	r8,r6[660]
80028bb6:	a1 79       	lsl	r9,0x1
80028bb8:	2f f9       	sub	r9,-1
80028bba:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80028bbe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028bc2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80028bc6:	a3 68       	lsl	r8,0x2
80028bc8:	f2 08 00 08 	add	r8,r9,r8
80028bcc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028bd0:	91 09       	st.w	r8[0x0],r9
  // Program the corresponding IPRX register to set the interrupt priority level
  // and the interrupt vector offset that will be fetched by the core interrupt
  // system.
  // NOTE: The _intx functions are intermediate assembly functions between the
  // core interrupt system and the user interrupt handler.
  AVR32_INTC.ipr[int_grp] = ipr_val[int_level & (AVR32_INTC_IPR_INTLEVEL_MASK >> AVR32_INTC_IPR_INTLEVEL_OFFSET)];
80028bd2:	fe 78 00 00 	mov	r8,-65536
80028bd6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028bda:	ee fa ff f0 	ld.w	r10,r7[-16]
80028bde:	f7 da c0 02 	bfextu	r11,r10,0x0,0x2
80028be2:	ec fa 03 ec 	ld.w	r10,r6[1004]
80028be6:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
80028bea:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80028bee:	2f cd       	sub	sp,-16
80028bf0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028bf4:	80 02       	ld.sh	r2,r0[0x0]
80028bf6:	8a 1a       	ld.sh	r10,r5[0x2]

80028bf8 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80028bf8:	eb cd 40 80 	pushm	r7,lr
80028bfc:	1a 97       	mov	r7,sp
80028bfe:	20 1d       	sub	sp,4
80028c00:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80028c04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028c08:	e6 18 00 01 	andh	r8,0x1,COH
80028c0c:	5f 08       	sreq	r8
80028c0e:	5c 58       	castu.b	r8
}
80028c10:	10 9c       	mov	r12,r8
80028c12:	2f fd       	sub	sp,-4
80028c14:	e3 cd 80 80 	ldm	sp++,r7,pc

80028c18 <pdca_get_handler>:
#include "compiler.h"
#include "pdca.h"


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
80028c18:	eb cd 40 80 	pushm	r7,lr
80028c1c:	1a 97       	mov	r7,sp
80028c1e:	20 2d       	sub	sp,8
80028c20:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
80028c24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028c28:	a7 68       	lsl	r8,0x6
80028c2a:	e2 38 00 00 	sub	r8,196608
80028c2e:	ef 48 ff fc 	st.w	r7[-4],r8

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
80028c32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028c36:	58 f8       	cp.w	r8,15
80028c38:	e0 88 00 04 	brls	80028c40 <pdca_get_handler+0x28>
    return (volatile avr32_pdca_channel_t *)PDCA_INVALID_ARGUMENT;
80028c3c:	3f f8       	mov	r8,-1
80028c3e:	c0 38       	rjmp	80028c44 <pdca_get_handler+0x2c>

  return pdca_channel;
80028c40:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80028c44:	10 9c       	mov	r12,r8
80028c46:	2f ed       	sub	sp,-8
80028c48:	e3 cd 80 80 	ldm	sp++,r7,pc

80028c4c <pdca_init_channel>:


int pdca_init_channel(unsigned int pdca_ch_number, const pdca_channel_options_t *opt)
{
80028c4c:	eb cd 40 c0 	pushm	r6-r7,lr
80028c50:	1a 97       	mov	r7,sp
80028c52:	20 4d       	sub	sp,16
80028c54:	4b 26       	lddpc	r6,80028d1c <pdca_init_channel+0xd0>
80028c56:	1e 26       	rsub	r6,pc
80028c58:	ef 4c ff f4 	st.w	r7[-12],r12
80028c5c:	ef 4b ff f0 	st.w	r7[-16],r11
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80028c60:	ee fc ff f4 	ld.w	r12,r7[-12]
80028c64:	f0 16 00 27 	mcall	r6[156]
80028c68:	18 98       	mov	r8,r12
80028c6a:	ef 48 ff f8 	st.w	r7[-8],r8

  pdca_disable_interrupt_transfer_complete(pdca_ch_number); // disable channel interrupt
80028c6e:	ee fc ff f4 	ld.w	r12,r7[-12]
80028c72:	f0 16 00 9f 	mcall	r6[636]
  pdca_disable_interrupt_reload_counter_zero(pdca_ch_number); // disable channel interrupt
80028c76:	ee fc ff f4 	ld.w	r12,r7[-12]
80028c7a:	f0 16 02 09 	mcall	r6[2084]

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80028c7e:	e1 b8 00 00 	mfsr	r8,0x0
80028c82:	10 9c       	mov	r12,r8
80028c84:	cb af       	rcall	80028bf8 <cpu_irq_is_enabled_flags>
80028c86:	18 98       	mov	r8,r12
80028c88:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80028c8c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028c90:	30 08       	mov	r8,0
80028c92:	f0 09 18 00 	cp.b	r9,r8
80028c96:	c0 20       	breq	80028c9a <pdca_init_channel+0x4e>
80028c98:	d3 03       	ssrf	0x10
  pdca_channel->mar = (unsigned long)opt->addr;
80028c9a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028c9e:	70 08       	ld.w	r8,r8[0x0]
80028ca0:	10 99       	mov	r9,r8
80028ca2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028ca6:	91 09       	st.w	r8[0x0],r9
  pdca_channel->tcr = opt->size;
80028ca8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028cac:	70 19       	ld.w	r9,r8[0x4]
80028cae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028cb2:	91 29       	st.w	r8[0x8],r9
  pdca_channel->psr = opt->pid;
80028cb4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028cb8:	70 49       	ld.w	r9,r8[0x10]
80028cba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028cbe:	91 19       	st.w	r8[0x4],r9
  pdca_channel->marr = (unsigned long)opt->r_addr;
80028cc0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028cc4:	70 28       	ld.w	r8,r8[0x8]
80028cc6:	10 99       	mov	r9,r8
80028cc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028ccc:	91 39       	st.w	r8[0xc],r9
  pdca_channel->tcrr = opt->r_size;
80028cce:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028cd2:	70 39       	ld.w	r9,r8[0xc]
80028cd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028cd8:	91 49       	st.w	r8[0x10],r9
  pdca_channel->mr =
#if (AVR32_PDCA_H_VERSION >= 120)
opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
80028cda:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028cde:	f1 38 00 18 	ld.ub	r8,r8[24]
80028ce2:	a3 68       	lsl	r8,0x2
  pdca_channel->mar = (unsigned long)opt->addr;
  pdca_channel->tcr = opt->size;
  pdca_channel->psr = opt->pid;
  pdca_channel->marr = (unsigned long)opt->r_addr;
  pdca_channel->tcrr = opt->r_size;
  pdca_channel->mr =
80028ce4:	10 99       	mov	r9,r8
80028ce6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028cea:	70 58       	ld.w	r8,r8[0x14]
#if (AVR32_PDCA_H_VERSION >= 120)
opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
80028cec:	10 49       	or	r9,r8
  pdca_channel->mar = (unsigned long)opt->addr;
  pdca_channel->tcr = opt->size;
  pdca_channel->psr = opt->pid;
  pdca_channel->marr = (unsigned long)opt->r_addr;
  pdca_channel->tcrr = opt->r_size;
  pdca_channel->mr =
80028cee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028cf2:	91 69       	st.w	r8[0x18],r9
#if (AVR32_PDCA_H_VERSION >= 120)
opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
#endif
                     opt->transfer_size << AVR32_PDCA_SIZE_OFFSET;
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80028cf4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028cf8:	e0 69 01 00 	mov	r9,256
80028cfc:	91 59       	st.w	r8[0x14],r9
  pdca_channel->isr;
80028cfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028d02:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80028d04:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028d08:	30 08       	mov	r8,0
80028d0a:	f0 09 18 00 	cp.b	r9,r8
80028d0e:	c0 20       	breq	80028d12 <pdca_init_channel+0xc6>
80028d10:	d5 03       	csrf	0x10

  return PDCA_SUCCESS;
80028d12:	30 08       	mov	r8,0
}
80028d14:	10 9c       	mov	r12,r8
80028d16:	2f cd       	sub	sp,-16
80028d18:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028d1c:	80 02       	ld.sh	r2,r0[0x0]
80028d1e:	8a da       	ld.uh	r10,r5[0xa]

80028d20 <pdca_get_channel_status>:


unsigned int pdca_get_channel_status(unsigned int pdca_ch_number)
{
80028d20:	eb cd 40 c0 	pushm	r6-r7,lr
80028d24:	1a 97       	mov	r7,sp
80028d26:	20 2d       	sub	sp,8
80028d28:	48 a6       	lddpc	r6,80028d50 <pdca_get_channel_status+0x30>
80028d2a:	1e 26       	rsub	r6,pc
80028d2c:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80028d30:	ee fc ff f8 	ld.w	r12,r7[-8]
80028d34:	f0 16 00 27 	mcall	r6[156]
80028d38:	18 98       	mov	r8,r12
80028d3a:	ef 48 ff fc 	st.w	r7[-4],r8

  return (pdca_channel->sr & AVR32_PDCA_TEN_MASK) != 0;
80028d3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028d42:	70 78       	ld.w	r8,r8[0x1c]
80028d44:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
80028d48:	10 9c       	mov	r12,r8
80028d4a:	2f ed       	sub	sp,-8
80028d4c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028d50:	80 02       	ld.sh	r2,r0[0x0]
80028d52:	8b ae       	st.w	r5[0x28],lr

80028d54 <pdca_disable>:


void pdca_disable(unsigned int pdca_ch_number)
{
80028d54:	eb cd 40 c0 	pushm	r6-r7,lr
80028d58:	1a 97       	mov	r7,sp
80028d5a:	20 2d       	sub	sp,8
80028d5c:	48 96       	lddpc	r6,80028d80 <pdca_disable+0x2c>
80028d5e:	1e 26       	rsub	r6,pc
80028d60:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80028d64:	ee fc ff f8 	ld.w	r12,r7[-8]
80028d68:	f0 16 00 27 	mcall	r6[156]
80028d6c:	18 98       	mov	r8,r12
80028d6e:	ef 48 ff fc 	st.w	r7[-4],r8

  // Disable transfer
  pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
80028d72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028d76:	30 29       	mov	r9,2
80028d78:	91 59       	st.w	r8[0x14],r9

}
80028d7a:	2f ed       	sub	sp,-8
80028d7c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028d80:	80 02       	ld.sh	r2,r0[0x0]
80028d82:	8b e2       	st.w	r5[0x38],r2

80028d84 <pdca_enable>:


void pdca_enable(unsigned int pdca_ch_number)
{
80028d84:	eb cd 40 c0 	pushm	r6-r7,lr
80028d88:	1a 97       	mov	r7,sp
80028d8a:	20 2d       	sub	sp,8
80028d8c:	48 96       	lddpc	r6,80028db0 <pdca_enable+0x2c>
80028d8e:	1e 26       	rsub	r6,pc
80028d90:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80028d94:	ee fc ff f8 	ld.w	r12,r7[-8]
80028d98:	f0 16 00 27 	mcall	r6[156]
80028d9c:	18 98       	mov	r8,r12
80028d9e:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable transfer
  pdca_channel->cr = AVR32_PDCA_TEN_MASK;
80028da2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028da6:	30 19       	mov	r9,1
80028da8:	91 59       	st.w	r8[0x14],r9
}
80028daa:	2f ed       	sub	sp,-8
80028dac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028db0:	80 02       	ld.sh	r2,r0[0x0]
80028db2:	8c 12       	ld.sh	r2,r6[0x2]

80028db4 <pdca_get_load_size>:


unsigned int pdca_get_load_size(unsigned int pdca_ch_number)
{
80028db4:	eb cd 40 c0 	pushm	r6-r7,lr
80028db8:	1a 97       	mov	r7,sp
80028dba:	20 2d       	sub	sp,8
80028dbc:	48 96       	lddpc	r6,80028de0 <pdca_get_load_size+0x2c>
80028dbe:	1e 26       	rsub	r6,pc
80028dc0:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80028dc4:	ee fc ff f8 	ld.w	r12,r7[-8]
80028dc8:	f0 16 00 27 	mcall	r6[156]
80028dcc:	18 98       	mov	r8,r12
80028dce:	ef 48 ff fc 	st.w	r7[-4],r8

  return pdca_channel->tcr;
80028dd2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028dd6:	70 28       	ld.w	r8,r8[0x8]
}
80028dd8:	10 9c       	mov	r12,r8
80028dda:	2f ed       	sub	sp,-8
80028ddc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028de0:	80 02       	ld.sh	r2,r0[0x0]
80028de2:	8c 42       	ld.sh	r2,r6[0x8]

80028de4 <pdca_load_channel>:


void pdca_load_channel(unsigned int pdca_ch_number, volatile void *addr, unsigned int size)
{
80028de4:	eb cd 40 c0 	pushm	r6-r7,lr
80028de8:	1a 97       	mov	r7,sp
80028dea:	20 5d       	sub	sp,20
80028dec:	49 d6       	lddpc	r6,80028e60 <pdca_load_channel+0x7c>
80028dee:	1e 26       	rsub	r6,pc
80028df0:	ef 4c ff f4 	st.w	r7[-12],r12
80028df4:	ef 4b ff f0 	st.w	r7[-16],r11
80028df8:	ef 4a ff ec 	st.w	r7[-20],r10
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80028dfc:	ee fc ff f4 	ld.w	r12,r7[-12]
80028e00:	f0 16 00 27 	mcall	r6[156]
80028e04:	18 98       	mov	r8,r12
80028e06:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80028e0a:	e1 b8 00 00 	mfsr	r8,0x0
80028e0e:	10 9c       	mov	r12,r8
80028e10:	cf 4e       	rcall	80028bf8 <cpu_irq_is_enabled_flags>
80028e12:	18 98       	mov	r8,r12
80028e14:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80028e18:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028e1c:	30 08       	mov	r8,0
80028e1e:	f0 09 18 00 	cp.b	r9,r8
80028e22:	c0 20       	breq	80028e26 <pdca_load_channel+0x42>
80028e24:	d3 03       	ssrf	0x10
  pdca_channel->mar = (unsigned long)addr;
80028e26:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028e2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028e2e:	91 09       	st.w	r8[0x0],r9
  pdca_channel->tcr = size;
80028e30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028e34:	ee f9 ff ec 	ld.w	r9,r7[-20]
80028e38:	91 29       	st.w	r8[0x8],r9
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80028e3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028e3e:	e0 69 01 00 	mov	r9,256
80028e42:	91 59       	st.w	r8[0x14],r9
  pdca_channel->isr;
80028e44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028e48:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80028e4a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028e4e:	30 08       	mov	r8,0
80028e50:	f0 09 18 00 	cp.b	r9,r8
80028e54:	c0 20       	breq	80028e58 <pdca_load_channel+0x74>
80028e56:	d5 03       	csrf	0x10
}
80028e58:	2f bd       	sub	sp,-20
80028e5a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028e5e:	00 00       	add	r0,r0
80028e60:	80 02       	ld.sh	r2,r0[0x0]
80028e62:	8c 72       	ld.sh	r2,r6[0xe]

80028e64 <pdca_get_reload_size>:


unsigned int pdca_get_reload_size(unsigned int pdca_ch_number)
{
80028e64:	eb cd 40 c0 	pushm	r6-r7,lr
80028e68:	1a 97       	mov	r7,sp
80028e6a:	20 2d       	sub	sp,8
80028e6c:	48 96       	lddpc	r6,80028e90 <pdca_get_reload_size+0x2c>
80028e6e:	1e 26       	rsub	r6,pc
80028e70:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80028e74:	ee fc ff f8 	ld.w	r12,r7[-8]
80028e78:	f0 16 00 27 	mcall	r6[156]
80028e7c:	18 98       	mov	r8,r12
80028e7e:	ef 48 ff fc 	st.w	r7[-4],r8

  return pdca_channel->tcrr;
80028e82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028e86:	70 48       	ld.w	r8,r8[0x10]
}
80028e88:	10 9c       	mov	r12,r8
80028e8a:	2f ed       	sub	sp,-8
80028e8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028e90:	80 02       	ld.sh	r2,r0[0x0]
80028e92:	8c f2       	ld.uh	r2,r6[0xe]

80028e94 <pdca_reload_channel>:


void pdca_reload_channel(unsigned int pdca_ch_number, volatile void *addr, unsigned int size)
{
80028e94:	eb cd 40 c0 	pushm	r6-r7,lr
80028e98:	1a 97       	mov	r7,sp
80028e9a:	20 5d       	sub	sp,20
80028e9c:	49 d6       	lddpc	r6,80028f10 <pdca_reload_channel+0x7c>
80028e9e:	1e 26       	rsub	r6,pc
80028ea0:	ef 4c ff f4 	st.w	r7[-12],r12
80028ea4:	ef 4b ff f0 	st.w	r7[-16],r11
80028ea8:	ef 4a ff ec 	st.w	r7[-20],r10
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80028eac:	ee fc ff f4 	ld.w	r12,r7[-12]
80028eb0:	f0 16 00 27 	mcall	r6[156]
80028eb4:	18 98       	mov	r8,r12
80028eb6:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80028eba:	e1 b8 00 00 	mfsr	r8,0x0
80028ebe:	10 9c       	mov	r12,r8
80028ec0:	c9 ce       	rcall	80028bf8 <cpu_irq_is_enabled_flags>
80028ec2:	18 98       	mov	r8,r12
80028ec4:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80028ec8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028ecc:	30 08       	mov	r8,0
80028ece:	f0 09 18 00 	cp.b	r9,r8
80028ed2:	c0 20       	breq	80028ed6 <pdca_reload_channel+0x42>
80028ed4:	d3 03       	ssrf	0x10
  // set up next memory address
  pdca_channel->marr = (unsigned long)addr;
80028ed6:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028eda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028ede:	91 39       	st.w	r8[0xc],r9
  // set up next memory size
  pdca_channel->tcrr = size;
80028ee0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028ee4:	ee f9 ff ec 	ld.w	r9,r7[-20]
80028ee8:	91 49       	st.w	r8[0x10],r9
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80028eea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028eee:	e0 69 01 00 	mov	r9,256
80028ef2:	91 59       	st.w	r8[0x14],r9
  pdca_channel->isr;
80028ef4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028ef8:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80028efa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028efe:	30 08       	mov	r8,0
80028f00:	f0 09 18 00 	cp.b	r9,r8
80028f04:	c0 20       	breq	80028f08 <pdca_reload_channel+0x74>
80028f06:	d5 03       	csrf	0x10
}
80028f08:	2f bd       	sub	sp,-20
80028f0a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028f0e:	00 00       	add	r0,r0
80028f10:	80 02       	ld.sh	r2,r0[0x0]
80028f12:	8d 22       	st.w	r6[0x8],r2

80028f14 <pdca_set_peripheral_select>:


void pdca_set_peripheral_select(unsigned int pdca_ch_number, unsigned int pid)
{
80028f14:	eb cd 40 c0 	pushm	r6-r7,lr
80028f18:	1a 97       	mov	r7,sp
80028f1a:	20 3d       	sub	sp,12
80028f1c:	48 b6       	lddpc	r6,80028f48 <pdca_set_peripheral_select+0x34>
80028f1e:	1e 26       	rsub	r6,pc
80028f20:	ef 4c ff f8 	st.w	r7[-8],r12
80028f24:	ef 4b ff f4 	st.w	r7[-12],r11
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80028f28:	ee fc ff f8 	ld.w	r12,r7[-8]
80028f2c:	f0 16 00 27 	mcall	r6[156]
80028f30:	18 98       	mov	r8,r12
80028f32:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->psr = pid;
80028f36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028f3a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028f3e:	91 19       	st.w	r8[0x4],r9
}
80028f40:	2f dd       	sub	sp,-12
80028f42:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028f46:	00 00       	add	r0,r0
80028f48:	80 02       	ld.sh	r2,r0[0x0]
80028f4a:	8d a2       	st.w	r6[0x28],r2

80028f4c <pdca_set_transfer_size>:


void pdca_set_transfer_size(unsigned int pdca_ch_number, unsigned int transfer_size)
{
80028f4c:	eb cd 40 c0 	pushm	r6-r7,lr
80028f50:	1a 97       	mov	r7,sp
80028f52:	20 3d       	sub	sp,12
80028f54:	48 e6       	lddpc	r6,80028f8c <pdca_set_transfer_size+0x40>
80028f56:	1e 26       	rsub	r6,pc
80028f58:	ef 4c ff f8 	st.w	r7[-8],r12
80028f5c:	ef 4b ff f4 	st.w	r7[-12],r11
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80028f60:	ee fc ff f8 	ld.w	r12,r7[-8]
80028f64:	f0 16 00 27 	mcall	r6[156]
80028f68:	18 98       	mov	r8,r12
80028f6a:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->mr = (pdca_channel->mr & ~AVR32_PDCA_SIZE_MASK) |
80028f6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028f72:	70 68       	ld.w	r8,r8[0x18]
80028f74:	10 99       	mov	r9,r8
80028f76:	e0 19 ff fc 	andl	r9,0xfffc
80028f7a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028f7e:	10 49       	or	r9,r8
80028f80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028f84:	91 69       	st.w	r8[0x18],r9
                     transfer_size << AVR32_PDCA_SIZE_OFFSET;
}
80028f86:	2f dd       	sub	sp,-12
80028f88:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028f8c:	80 02       	ld.sh	r2,r0[0x0]
80028f8e:	8d da       	st.w	r6[0x34],r10

80028f90 <pdca_disable_event_trigger>:

#if (AVR32_PDCA_H_VERSION >= 120)


void pdca_disable_event_trigger(unsigned int pdca_ch_number)
{
80028f90:	eb cd 40 c0 	pushm	r6-r7,lr
80028f94:	1a 97       	mov	r7,sp
80028f96:	20 2d       	sub	sp,8
80028f98:	48 b6       	lddpc	r6,80028fc4 <pdca_disable_event_trigger+0x34>
80028f9a:	1e 26       	rsub	r6,pc
80028f9c:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80028fa0:	ee fc ff f8 	ld.w	r12,r7[-8]
80028fa4:	f0 16 00 27 	mcall	r6[156]
80028fa8:	18 98       	mov	r8,r12
80028faa:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->mr &= ~AVR32_PDCA_ETRIG_MASK;
80028fae:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028fb2:	70 68       	ld.w	r8,r8[0x18]
80028fb4:	10 99       	mov	r9,r8
80028fb6:	a3 c9       	cbr	r9,0x2
80028fb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028fbc:	91 69       	st.w	r8[0x18],r9
}
80028fbe:	2f ed       	sub	sp,-8
80028fc0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028fc4:	80 02       	ld.sh	r2,r0[0x0]
80028fc6:	8e 1e       	ld.sh	lr,r7[0x2]

80028fc8 <pdca_enable_event_trigger>:


void pdca_enable_event_trigger(unsigned int pdca_ch_number)
{
80028fc8:	eb cd 40 c0 	pushm	r6-r7,lr
80028fcc:	1a 97       	mov	r7,sp
80028fce:	20 2d       	sub	sp,8
80028fd0:	48 b6       	lddpc	r6,80028ffc <pdca_enable_event_trigger+0x34>
80028fd2:	1e 26       	rsub	r6,pc
80028fd4:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80028fd8:	ee fc ff f8 	ld.w	r12,r7[-8]
80028fdc:	f0 16 00 27 	mcall	r6[156]
80028fe0:	18 98       	mov	r8,r12
80028fe2:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->mr |= AVR32_PDCA_ETRIG_MASK;
80028fe6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028fea:	70 68       	ld.w	r8,r8[0x18]
80028fec:	10 99       	mov	r9,r8
80028fee:	a3 a9       	sbr	r9,0x2
80028ff0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028ff4:	91 69       	st.w	r8[0x18],r9
}
80028ff6:	2f ed       	sub	sp,-8
80028ff8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028ffc:	80 02       	ld.sh	r2,r0[0x0]
80028ffe:	8e 56       	ld.sh	r6,r7[0xa]

80029000 <pdca_disable_interrupt_transfer_error>:

#endif


void pdca_disable_interrupt_transfer_error(unsigned int pdca_ch_number)
{
80029000:	eb cd 40 c0 	pushm	r6-r7,lr
80029004:	1a 97       	mov	r7,sp
80029006:	20 3d       	sub	sp,12
80029008:	49 66       	lddpc	r6,80029060 <pdca_disable_interrupt_transfer_error+0x60>
8002900a:	1e 26       	rsub	r6,pc
8002900c:	ef 4c ff f4 	st.w	r7[-12],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80029010:	ee fc ff f4 	ld.w	r12,r7[-12]
80029014:	f0 16 00 27 	mcall	r6[156]
80029018:	18 98       	mov	r8,r12
8002901a:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
8002901e:	e1 b8 00 00 	mfsr	r8,0x0
80029022:	10 9c       	mov	r12,r8
80029024:	fe b0 fd ea 	rcall	80028bf8 <cpu_irq_is_enabled_flags>
80029028:	18 98       	mov	r8,r12
8002902a:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
8002902e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029032:	30 08       	mov	r8,0
80029034:	f0 09 18 00 	cp.b	r9,r8
80029038:	c0 20       	breq	8002903c <pdca_disable_interrupt_transfer_error+0x3c>
8002903a:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_TERR_MASK;
8002903c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029040:	30 49       	mov	r9,4
80029042:	91 99       	st.w	r8[0x24],r9
  pdca_channel->isr;
80029044:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029048:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
8002904a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002904e:	30 08       	mov	r8,0
80029050:	f0 09 18 00 	cp.b	r9,r8
80029054:	c0 20       	breq	80029058 <pdca_disable_interrupt_transfer_error+0x58>
80029056:	d5 03       	csrf	0x10
}
80029058:	2f dd       	sub	sp,-12
8002905a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002905e:	00 00       	add	r0,r0
80029060:	80 02       	ld.sh	r2,r0[0x0]
80029062:	8e 8e       	ld.uh	lr,r7[0x0]

80029064 <pdca_enable_interrupt_transfer_error>:


void pdca_enable_interrupt_transfer_error(unsigned int pdca_ch_number)
{
80029064:	eb cd 40 c0 	pushm	r6-r7,lr
80029068:	1a 97       	mov	r7,sp
8002906a:	20 2d       	sub	sp,8
8002906c:	48 96       	lddpc	r6,80029090 <pdca_enable_interrupt_transfer_error+0x2c>
8002906e:	1e 26       	rsub	r6,pc
80029070:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80029074:	ee fc ff f8 	ld.w	r12,r7[-8]
80029078:	f0 16 00 27 	mcall	r6[156]
8002907c:	18 98       	mov	r8,r12
8002907e:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->ier = AVR32_PDCA_TERR_MASK;
80029082:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029086:	30 49       	mov	r9,4
80029088:	91 89       	st.w	r8[0x20],r9
}
8002908a:	2f ed       	sub	sp,-8
8002908c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029090:	80 02       	ld.sh	r2,r0[0x0]
80029092:	8e f2       	ld.uh	r2,r7[0xe]

80029094 <pdca_disable_interrupt_transfer_complete>:


void pdca_disable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
80029094:	eb cd 40 c0 	pushm	r6-r7,lr
80029098:	1a 97       	mov	r7,sp
8002909a:	20 3d       	sub	sp,12
8002909c:	49 66       	lddpc	r6,800290f4 <pdca_disable_interrupt_transfer_complete+0x60>
8002909e:	1e 26       	rsub	r6,pc
800290a0:	ef 4c ff f4 	st.w	r7[-12],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
800290a4:	ee fc ff f4 	ld.w	r12,r7[-12]
800290a8:	f0 16 00 27 	mcall	r6[156]
800290ac:	18 98       	mov	r8,r12
800290ae:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
800290b2:	e1 b8 00 00 	mfsr	r8,0x0
800290b6:	10 9c       	mov	r12,r8
800290b8:	fe b0 fd a0 	rcall	80028bf8 <cpu_irq_is_enabled_flags>
800290bc:	18 98       	mov	r8,r12
800290be:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
800290c2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800290c6:	30 08       	mov	r8,0
800290c8:	f0 09 18 00 	cp.b	r9,r8
800290cc:	c0 20       	breq	800290d0 <pdca_disable_interrupt_transfer_complete+0x3c>
800290ce:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_TRC_MASK;
800290d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800290d4:	30 29       	mov	r9,2
800290d6:	91 99       	st.w	r8[0x24],r9
  pdca_channel->isr;
800290d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800290dc:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
800290de:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800290e2:	30 08       	mov	r8,0
800290e4:	f0 09 18 00 	cp.b	r9,r8
800290e8:	c0 20       	breq	800290ec <pdca_disable_interrupt_transfer_complete+0x58>
800290ea:	d5 03       	csrf	0x10
}
800290ec:	2f dd       	sub	sp,-12
800290ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800290f2:	00 00       	add	r0,r0
800290f4:	80 02       	ld.sh	r2,r0[0x0]
800290f6:	8f 22       	st.w	r7[0x8],r2

800290f8 <pdca_enable_interrupt_transfer_complete>:


void pdca_enable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
800290f8:	eb cd 40 c0 	pushm	r6-r7,lr
800290fc:	1a 97       	mov	r7,sp
800290fe:	20 2d       	sub	sp,8
80029100:	48 96       	lddpc	r6,80029124 <pdca_enable_interrupt_transfer_complete+0x2c>
80029102:	1e 26       	rsub	r6,pc
80029104:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80029108:	ee fc ff f8 	ld.w	r12,r7[-8]
8002910c:	f0 16 00 27 	mcall	r6[156]
80029110:	18 98       	mov	r8,r12
80029112:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->ier = AVR32_PDCA_TRC_MASK;
80029116:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002911a:	30 29       	mov	r9,2
8002911c:	91 89       	st.w	r8[0x20],r9
}
8002911e:	2f ed       	sub	sp,-8
80029120:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029124:	80 02       	ld.sh	r2,r0[0x0]
80029126:	8f 86       	st.w	r7[0x20],r6

80029128 <pdca_disable_interrupt_reload_counter_zero>:


void pdca_disable_interrupt_reload_counter_zero(unsigned int pdca_ch_number)
{
80029128:	eb cd 40 c0 	pushm	r6-r7,lr
8002912c:	1a 97       	mov	r7,sp
8002912e:	20 3d       	sub	sp,12
80029130:	49 66       	lddpc	r6,80029188 <pdca_disable_interrupt_reload_counter_zero+0x60>
80029132:	1e 26       	rsub	r6,pc
80029134:	ef 4c ff f4 	st.w	r7[-12],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80029138:	ee fc ff f4 	ld.w	r12,r7[-12]
8002913c:	f0 16 00 27 	mcall	r6[156]
80029140:	18 98       	mov	r8,r12
80029142:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80029146:	e1 b8 00 00 	mfsr	r8,0x0
8002914a:	10 9c       	mov	r12,r8
8002914c:	fe b0 fd 56 	rcall	80028bf8 <cpu_irq_is_enabled_flags>
80029150:	18 98       	mov	r8,r12
80029152:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80029156:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002915a:	30 08       	mov	r8,0
8002915c:	f0 09 18 00 	cp.b	r9,r8
80029160:	c0 20       	breq	80029164 <pdca_disable_interrupt_reload_counter_zero+0x3c>
80029162:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_RCZ_MASK;
80029164:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029168:	30 19       	mov	r9,1
8002916a:	91 99       	st.w	r8[0x24],r9
  pdca_channel->isr;
8002916c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029170:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80029172:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029176:	30 08       	mov	r8,0
80029178:	f0 09 18 00 	cp.b	r9,r8
8002917c:	c0 20       	breq	80029180 <pdca_disable_interrupt_reload_counter_zero+0x58>
8002917e:	d5 03       	csrf	0x10
}
80029180:	2f dd       	sub	sp,-12
80029182:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029186:	00 00       	add	r0,r0
80029188:	80 02       	ld.sh	r2,r0[0x0]
8002918a:	8f b6       	st.w	r7[0x2c],r6

8002918c <pdca_enable_interrupt_reload_counter_zero>:


void pdca_enable_interrupt_reload_counter_zero(unsigned int pdca_ch_number)
{
8002918c:	eb cd 40 c0 	pushm	r6-r7,lr
80029190:	1a 97       	mov	r7,sp
80029192:	20 2d       	sub	sp,8
80029194:	48 96       	lddpc	r6,800291b8 <pdca_enable_interrupt_reload_counter_zero+0x2c>
80029196:	1e 26       	rsub	r6,pc
80029198:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
8002919c:	ee fc ff f8 	ld.w	r12,r7[-8]
800291a0:	f0 16 00 27 	mcall	r6[156]
800291a4:	18 98       	mov	r8,r12
800291a6:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->ier = AVR32_PDCA_RCZ_MASK;
800291aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800291ae:	30 19       	mov	r9,1
800291b0:	91 89       	st.w	r8[0x20],r9
}
800291b2:	2f ed       	sub	sp,-8
800291b4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800291b8:	80 02       	ld.sh	r2,r0[0x0]
800291ba:	90 1a       	ld.sh	r10,r8[0x2]

800291bc <pdca_get_transfer_status>:


unsigned long pdca_get_transfer_status(unsigned int pdca_ch_number)
{
800291bc:	eb cd 40 c0 	pushm	r6-r7,lr
800291c0:	1a 97       	mov	r7,sp
800291c2:	20 2d       	sub	sp,8
800291c4:	48 96       	lddpc	r6,800291e8 <pdca_get_transfer_status+0x2c>
800291c6:	1e 26       	rsub	r6,pc
800291c8:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
800291cc:	ee fc ff f8 	ld.w	r12,r7[-8]
800291d0:	f0 16 00 27 	mcall	r6[156]
800291d4:	18 98       	mov	r8,r12
800291d6:	ef 48 ff fc 	st.w	r7[-4],r8

  return pdca_channel->isr;
800291da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800291de:	70 b8       	ld.w	r8,r8[0x2c]
}
800291e0:	10 9c       	mov	r12,r8
800291e2:	2f ed       	sub	sp,-8
800291e4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800291e8:	80 02       	ld.sh	r2,r0[0x0]
800291ea:	90 4a       	ld.sh	r10,r8[0x8]

800291ec <pevc_channel_configure>:
// See comment header in pevc.h
bool pevc_channel_configure( volatile avr32_pevc_t *pevc,
                             unsigned short int chan_id,
                             unsigned short int gen_id,
                             const pevc_evs_opt_t *pevs )
{
800291ec:	eb cd 40 80 	pushm	r7,lr
800291f0:	1a 97       	mov	r7,sp
800291f2:	20 4d       	sub	sp,16
800291f4:	ef 4c ff fc 	st.w	r7[-4],r12
800291f8:	14 98       	mov	r8,r10
800291fa:	ef 49 ff f0 	st.w	r7[-16],r9
800291fe:	16 99       	mov	r9,r11
80029200:	ef 59 ff f8 	st.h	r7[-8],r9
80029204:	ef 58 ff f4 	st.h	r7[-12],r8
  if( NULL != pevc )
80029208:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002920c:	58 08       	cp.w	r8,0
8002920e:	c6 90       	breq	800292e0 <pevc_channel_configure+0xf4>
  {
    if(( gen_id < PEVC_NUMBER_OF_EVENT_GENERATORS )
80029210:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80029214:	32 18       	mov	r8,33
80029216:	f0 09 19 00 	cp.h	r9,r8
8002921a:	e0 8b 00 61 	brhi	800292dc <pevc_channel_configure+0xf0>
8002921e:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80029222:	31 58       	mov	r8,21
80029224:	f0 09 19 00 	cp.h	r9,r8
80029228:	e0 8b 00 5a 	brhi	800292dc <pevc_channel_configure+0xf0>
    && ( chan_id < PEVC_NUMBER_OF_EVENT_USERS ))
    {
      // Connect the generator gen_id to the channel.
      pevc->CHMX[chan_id].evmx = gen_id;
8002922c:	ef 1a ff f8 	ld.uh	r10,r7[-8]
80029230:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80029234:	5c 58       	castu.b	r8
80029236:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8002923a:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8002923e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029242:	2c 0a       	sub	r10,-64
80029244:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80029248:	f1 db d0 06 	bfins	r8,r11,0x0,0x6
8002924c:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8

      // Configure the event shaper for the channel.
      if( NULL != pevs )
80029250:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029254:	58 08       	cp.w	r8,0
80029256:	c4 10       	breq	800292d8 <pevc_channel_configure+0xec>
      {
        pevc->igfdr = pevs->igfdr;  // Only one divider for all EVS channels.
80029258:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002925c:	11 88       	ld.ub	r8,r8[0x0]
8002925e:	10 99       	mov	r9,r8
80029260:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029264:	91 29       	st.w	r8[0x8],r9
        pevc->EVS[gen_id].igf = pevs->igf;
80029266:	ef 1a ff f4 	ld.uh	r10,r7[-12]
8002926a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002926e:	70 18       	ld.w	r8,r8[0x4]
80029270:	5c 58       	castu.b	r8
80029272:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029276:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8002927a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002927e:	28 0a       	sub	r10,-128
80029280:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80029284:	f1 db d0 41 	bfins	r8,r11,0x2,0x1
80029288:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
        pevc->EVS[gen_id].evf = pevs->evf;
8002928c:	ef 1a ff f4 	ld.uh	r10,r7[-12]
80029290:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029294:	70 28       	ld.w	r8,r8[0x8]
80029296:	5c 58       	castu.b	r8
80029298:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002929c:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
800292a0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800292a4:	28 0a       	sub	r10,-128
800292a6:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
800292aa:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
800292ae:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
        pevc->EVS[gen_id].evr = pevs->evr;
800292b2:	ef 1a ff f4 	ld.uh	r10,r7[-12]
800292b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800292ba:	70 38       	ld.w	r8,r8[0xc]
800292bc:	5c 58       	castu.b	r8
800292be:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800292c2:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
800292c6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800292ca:	28 0a       	sub	r10,-128
800292cc:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
800292d0:	f1 db d0 01 	bfins	r8,r11,0x0,0x1
800292d4:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
      }
      return( PASS );
800292d8:	30 08       	mov	r8,0
800292da:	c0 48       	rjmp	800292e2 <pevc_channel_configure+0xf6>
    }
    else return( FAIL );
800292dc:	30 18       	mov	r8,1
800292de:	c0 28       	rjmp	800292e2 <pevc_channel_configure+0xf6>
  }
  else
    return( FAIL );
800292e0:	30 18       	mov	r8,1
}
800292e2:	10 9c       	mov	r12,r8
800292e4:	2f cd       	sub	sp,-16
800292e6:	e3 cd 80 80 	ldm	sp++,r7,pc

800292ea <pevc_igfd_set>:


// See comment header in pevc.h
void pevc_igfd_set( volatile avr32_pevc_t *pevc, unsigned char igfd )
{
800292ea:	eb cd 40 80 	pushm	r7,lr
800292ee:	1a 97       	mov	r7,sp
800292f0:	20 2d       	sub	sp,8
800292f2:	ef 4c ff fc 	st.w	r7[-4],r12
800292f6:	16 98       	mov	r8,r11
800292f8:	ef 68 ff f8 	st.b	r7[-8],r8
  Assert( NULL != pevc );
  PEVC_IGFD_SET(pevc, igfd);
800292fc:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80029300:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
80029304:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029308:	91 29       	st.w	r8[0x8],r9
}
8002930a:	2f ed       	sub	sp,-8
8002930c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029310 <pevc_channels_enable>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
void pevc_channels_enable( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask )
{
80029310:	eb cd 40 80 	pushm	r7,lr
80029314:	1a 97       	mov	r7,sp
80029316:	20 3d       	sub	sp,12
80029318:	ef 4c ff fc 	st.w	r7[-4],r12
8002931c:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_ENABLE(pevc, chan_mask);
80029320:	ee e8 ff f4 	ld.d	r8,r7[-12]
80029324:	fc 1a 80 00 	movh	r10,0x8000
80029328:	30 0b       	mov	r11,0
8002932a:	14 38       	cp.w	r8,r10
8002932c:	f6 09 13 00 	cpc	r9,r11
80029330:	e0 8b 00 08 	brhi	80029340 <pevc_channels_enable+0x30>
80029334:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029338:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002933c:	91 89       	st.w	r8[0x20],r9
8002933e:	c0 68       	rjmp	8002934a <pevc_channels_enable+0x3a>
80029340:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029344:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029348:	91 99       	st.w	r8[0x24],r9
}
8002934a:	2f dd       	sub	sp,-12
8002934c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029350 <pevc_channels_disable>:

// See comment header in pevc.h
void pevc_channels_disable( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask )
{
80029350:	eb cd 40 80 	pushm	r7,lr
80029354:	1a 97       	mov	r7,sp
80029356:	20 3d       	sub	sp,12
80029358:	ef 4c ff fc 	st.w	r7[-4],r12
8002935c:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_DISABLE(pevc, chan_mask);
80029360:	ee e8 ff f4 	ld.d	r8,r7[-12]
80029364:	fc 1a 80 00 	movh	r10,0x8000
80029368:	30 0b       	mov	r11,0
8002936a:	14 38       	cp.w	r8,r10
8002936c:	f6 09 13 00 	cpc	r9,r11
80029370:	e0 8b 00 08 	brhi	80029380 <pevc_channels_disable+0x30>
80029374:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029378:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002937c:	91 c9       	st.w	r8[0x30],r9
8002937e:	c0 68       	rjmp	8002938a <pevc_channels_disable+0x3a>
80029380:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029384:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029388:	91 d9       	st.w	r8[0x34],r9
}
8002938a:	2f dd       	sub	sp,-12
8002938c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029390 <pevc_get_channel_status>:

// See comment header in pevc.h
bool pevc_get_channel_status( volatile avr32_pevc_t *pevc, unsigned short int chan_id )
{
80029390:	eb cd 40 80 	pushm	r7,lr
80029394:	1a 97       	mov	r7,sp
80029396:	20 2d       	sub	sp,8
80029398:	ef 4c ff fc 	st.w	r7[-4],r12
8002939c:	16 98       	mov	r8,r11
8002939e:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
800293a2:	ef 09 ff f8 	ld.sh	r9,r7[-8]
800293a6:	31 f8       	mov	r8,31
800293a8:	f0 09 19 00 	cp.h	r9,r8
800293ac:	e0 8b 00 12 	brhi	800293d0 <pevc_get_channel_status+0x40>
    return( ((pevc->chsr0) & (1 << chan_id))>>chan_id );
800293b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800293b4:	70 49       	ld.w	r9,r8[0x10]
800293b6:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800293ba:	30 1a       	mov	r10,1
800293bc:	f4 08 09 48 	lsl	r8,r10,r8
800293c0:	10 69       	and	r9,r8
800293c2:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800293c6:	f2 08 0a 48 	lsr	r8,r9,r8
800293ca:	5f 18       	srne	r8
800293cc:	5c 58       	castu.b	r8
800293ce:	c1 28       	rjmp	800293f2 <pevc_get_channel_status+0x62>
  else
    return( ((pevc->chsr1) & (1 << (chan_id-32)))>>(chan_id-32) );
800293d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800293d4:	70 59       	ld.w	r9,r8[0x14]
800293d6:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800293da:	22 08       	sub	r8,32
800293dc:	30 1a       	mov	r10,1
800293de:	f4 08 09 48 	lsl	r8,r10,r8
800293e2:	10 69       	and	r9,r8
800293e4:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800293e8:	22 08       	sub	r8,32
800293ea:	f2 08 0a 48 	lsr	r8,r9,r8
800293ee:	5f 18       	srne	r8
800293f0:	5c 58       	castu.b	r8
}
800293f2:	10 9c       	mov	r12,r8
800293f4:	2f ed       	sub	sp,-8
800293f6:	e3 cd 80 80 	ldm	sp++,r7,pc

800293fa <pevc_get_channel_state>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
bool pevc_get_channel_state(volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
800293fa:	eb cd 40 80 	pushm	r7,lr
800293fe:	1a 97       	mov	r7,sp
80029400:	20 2d       	sub	sp,8
80029402:	ef 4c ff fc 	st.w	r7[-4],r12
80029406:	16 98       	mov	r8,r11
80029408:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
8002940c:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80029410:	31 f8       	mov	r8,31
80029412:	f0 09 19 00 	cp.h	r9,r8
80029416:	e0 8b 00 12 	brhi	8002943a <pevc_get_channel_state+0x40>
    return( ((pevc->busy0) & (1 << chan_id))>>chan_id );
8002941a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002941e:	71 49       	ld.w	r9,r8[0x50]
80029420:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80029424:	30 1a       	mov	r10,1
80029426:	f4 08 09 48 	lsl	r8,r10,r8
8002942a:	10 69       	and	r9,r8
8002942c:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80029430:	f2 08 0a 48 	lsr	r8,r9,r8
80029434:	5f 18       	srne	r8
80029436:	5c 58       	castu.b	r8
80029438:	c1 28       	rjmp	8002945c <pevc_get_channel_state+0x62>
  else
    return( ((pevc->busy1) & (1 << (chan_id-32)))>>(chan_id-32) );
8002943a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002943e:	71 59       	ld.w	r9,r8[0x54]
80029440:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80029444:	22 08       	sub	r8,32
80029446:	30 1a       	mov	r10,1
80029448:	f4 08 09 48 	lsl	r8,r10,r8
8002944c:	10 69       	and	r9,r8
8002944e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80029452:	22 08       	sub	r8,32
80029454:	f2 08 0a 48 	lsr	r8,r9,r8
80029458:	5f 18       	srne	r8
8002945a:	5c 58       	castu.b	r8
}
8002945c:	10 9c       	mov	r12,r8
8002945e:	2f ed       	sub	sp,-8
80029460:	e3 cd 80 80 	ldm	sp++,r7,pc

80029464 <pevc_channel_sev_enable>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
void pevc_channel_sev_enable( volatile avr32_pevc_t *pevc, unsigned short int chan_id )
{
80029464:	eb cd 40 80 	pushm	r7,lr
80029468:	1a 97       	mov	r7,sp
8002946a:	20 2d       	sub	sp,8
8002946c:	ef 4c ff fc 	st.w	r7[-4],r12
80029470:	16 98       	mov	r8,r11
80029472:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  pevc->CHMX[chan_id].smx = ENABLE;
80029476:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002947a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002947e:	f0 ca ff c0 	sub	r10,r8,-64
80029482:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80029486:	30 1b       	mov	r11,1
80029488:	f1 db d1 01 	bfins	r8,r11,0x8,0x1
8002948c:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
}
80029490:	2f ed       	sub	sp,-8
80029492:	e3 cd 80 80 	ldm	sp++,r7,pc

80029496 <pevc_channels_trigger_sev>:

// See comment header in pevc.h
void pevc_channels_trigger_sev(volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
80029496:	eb cd 40 80 	pushm	r7,lr
8002949a:	1a 97       	mov	r7,sp
8002949c:	20 3d       	sub	sp,12
8002949e:	ef 4c ff fc 	st.w	r7[-4],r12
800294a2:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_TRIGGER_SEV(pevc, chan_mask);
800294a6:	ee e8 ff f4 	ld.d	r8,r7[-12]
800294aa:	fc 1a 80 00 	movh	r10,0x8000
800294ae:	30 0b       	mov	r11,0
800294b0:	14 38       	cp.w	r8,r10
800294b2:	f6 09 13 00 	cpc	r9,r11
800294b6:	e0 8b 00 09 	brhi	800294c8 <pevc_channels_trigger_sev+0x32>
800294ba:	ee f9 ff f8 	ld.w	r9,r7[-8]
800294be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800294c2:	f1 49 00 40 	st.w	r8[64],r9
800294c6:	c0 78       	rjmp	800294d4 <pevc_channels_trigger_sev+0x3e>
800294c8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800294cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800294d0:	f1 49 00 44 	st.w	r8[68],r9
}
800294d4:	2f dd       	sub	sp,-12
800294d6:	e3 cd 80 80 	ldm	sp++,r7,pc

800294da <pevc_channel_sev_disable>:

// See comment header in pevc.h
void pevc_channel_sev_disable( volatile avr32_pevc_t *pevc, unsigned short int chan_id )
{
800294da:	eb cd 40 80 	pushm	r7,lr
800294de:	1a 97       	mov	r7,sp
800294e0:	20 2d       	sub	sp,8
800294e2:	ef 4c ff fc 	st.w	r7[-4],r12
800294e6:	16 98       	mov	r8,r11
800294e8:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  pevc->CHMX[chan_id].smx = DISABLE;
800294ec:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800294f0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800294f4:	f0 ca ff c0 	sub	r10,r8,-64
800294f8:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
800294fc:	30 0b       	mov	r11,0
800294fe:	f1 db d1 01 	bfins	r8,r11,0x8,0x1
80029502:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
}
80029506:	2f ed       	sub	sp,-8
80029508:	e3 cd 80 80 	ldm	sp++,r7,pc

8002950c <pevc_channels_enable_trigger_interrupt>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
void pevc_channels_enable_trigger_interrupt( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
8002950c:	eb cd 40 80 	pushm	r7,lr
80029510:	1a 97       	mov	r7,sp
80029512:	20 3d       	sub	sp,12
80029514:	ef 4c ff fc 	st.w	r7[-4],r12
80029518:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_ENABLE_TRIGGER_INTERRUPT(pevc, chan_mask);
8002951c:	ee e8 ff f4 	ld.d	r8,r7[-12]
80029520:	fc 1a 80 00 	movh	r10,0x8000
80029524:	30 0b       	mov	r11,0
80029526:	14 38       	cp.w	r8,r10
80029528:	f6 09 13 00 	cpc	r9,r11
8002952c:	e0 8b 00 09 	brhi	8002953e <pevc_channels_enable_trigger_interrupt+0x32>
80029530:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029534:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029538:	f1 49 00 90 	st.w	r8[144],r9
8002953c:	c0 78       	rjmp	8002954a <pevc_channels_enable_trigger_interrupt+0x3e>
8002953e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029542:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029546:	f1 49 00 94 	st.w	r8[148],r9
}
8002954a:	2f dd       	sub	sp,-12
8002954c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029550 <pevc_channels_disable_trigger_interrupt>:

// See comment header in pevc.h
void pevc_channels_disable_trigger_interrupt( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
80029550:	eb cd 40 80 	pushm	r7,lr
80029554:	1a 97       	mov	r7,sp
80029556:	20 3d       	sub	sp,12
80029558:	ef 4c ff fc 	st.w	r7[-4],r12
8002955c:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_DISABLE_TRIGGER_INTERRUPT(pevc, chan_mask);
80029560:	ee e8 ff f4 	ld.d	r8,r7[-12]
80029564:	fc 1a 80 00 	movh	r10,0x8000
80029568:	30 0b       	mov	r11,0
8002956a:	14 38       	cp.w	r8,r10
8002956c:	f6 09 13 00 	cpc	r9,r11
80029570:	e0 8b 00 09 	brhi	80029582 <pevc_channels_disable_trigger_interrupt+0x32>
80029574:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029578:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002957c:	f1 49 00 a0 	st.w	r8[160],r9
80029580:	c0 78       	rjmp	8002958e <pevc_channels_disable_trigger_interrupt+0x3e>
80029582:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029586:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002958a:	f1 49 00 a4 	st.w	r8[164],r9
}
8002958e:	2f dd       	sub	sp,-12
80029590:	e3 cd 80 80 	ldm	sp++,r7,pc

80029594 <pevc_channel_is_trigger_interrupt_enabled>:

// See comment header in pevc.h
bool pevc_channel_is_trigger_interrupt_enabled( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
80029594:	eb cd 40 80 	pushm	r7,lr
80029598:	1a 97       	mov	r7,sp
8002959a:	20 2d       	sub	sp,8
8002959c:	ef 4c ff fc 	st.w	r7[-4],r12
800295a0:	16 98       	mov	r8,r11
800295a2:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
800295a6:	ef 09 ff f8 	ld.sh	r9,r7[-8]
800295aa:	31 f8       	mov	r8,31
800295ac:	f0 09 19 00 	cp.h	r9,r8
800295b0:	e0 8b 00 13 	brhi	800295d6 <pevc_channel_is_trigger_interrupt_enabled+0x42>
    return( ((pevc->trimr0) & (1 << chan_id))>>chan_id );
800295b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800295b8:	f0 f9 00 80 	ld.w	r9,r8[128]
800295bc:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800295c0:	30 1a       	mov	r10,1
800295c2:	f4 08 09 48 	lsl	r8,r10,r8
800295c6:	10 69       	and	r9,r8
800295c8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800295cc:	f2 08 0a 48 	lsr	r8,r9,r8
800295d0:	5f 18       	srne	r8
800295d2:	5c 58       	castu.b	r8
800295d4:	c1 38       	rjmp	800295fa <pevc_channel_is_trigger_interrupt_enabled+0x66>
  else
    return( ((pevc->trimr1) & (1 << (chan_id-32)))>>(chan_id-32) );
800295d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800295da:	f0 f9 00 84 	ld.w	r9,r8[132]
800295de:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800295e2:	22 08       	sub	r8,32
800295e4:	30 1a       	mov	r10,1
800295e6:	f4 08 09 48 	lsl	r8,r10,r8
800295ea:	10 69       	and	r9,r8
800295ec:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800295f0:	22 08       	sub	r8,32
800295f2:	f2 08 0a 48 	lsr	r8,r9,r8
800295f6:	5f 18       	srne	r8
800295f8:	5c 58       	castu.b	r8
}
800295fa:	10 9c       	mov	r12,r8
800295fc:	2f ed       	sub	sp,-8
800295fe:	e3 cd 80 80 	ldm	sp++,r7,pc

80029602 <pevc_channel_is_trigger_interrupt_raised>:

// See comment header in pevc.h
bool pevc_channel_is_trigger_interrupt_raised( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
80029602:	eb cd 40 80 	pushm	r7,lr
80029606:	1a 97       	mov	r7,sp
80029608:	20 2d       	sub	sp,8
8002960a:	ef 4c ff fc 	st.w	r7[-4],r12
8002960e:	16 98       	mov	r8,r11
80029610:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
80029614:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80029618:	31 f8       	mov	r8,31
8002961a:	f0 09 19 00 	cp.h	r9,r8
8002961e:	e0 8b 00 12 	brhi	80029642 <pevc_channel_is_trigger_interrupt_raised+0x40>
    return( ((pevc->trsr0) & (1 << chan_id))>>chan_id );
80029622:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029626:	71 89       	ld.w	r9,r8[0x60]
80029628:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002962c:	30 1a       	mov	r10,1
8002962e:	f4 08 09 48 	lsl	r8,r10,r8
80029632:	10 69       	and	r9,r8
80029634:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80029638:	f2 08 0a 48 	lsr	r8,r9,r8
8002963c:	5f 18       	srne	r8
8002963e:	5c 58       	castu.b	r8
80029640:	c1 28       	rjmp	80029664 <pevc_channel_is_trigger_interrupt_raised+0x62>
  else
    return( ((pevc->trsr1) & (1 << (chan_id-32)))>>(chan_id-32) );
80029642:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029646:	71 99       	ld.w	r9,r8[0x64]
80029648:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002964c:	22 08       	sub	r8,32
8002964e:	30 1a       	mov	r10,1
80029650:	f4 08 09 48 	lsl	r8,r10,r8
80029654:	10 69       	and	r9,r8
80029656:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002965a:	22 08       	sub	r8,32
8002965c:	f2 08 0a 48 	lsr	r8,r9,r8
80029660:	5f 18       	srne	r8
80029662:	5c 58       	castu.b	r8
}
80029664:	10 9c       	mov	r12,r8
80029666:	2f ed       	sub	sp,-8
80029668:	e3 cd 80 80 	ldm	sp++,r7,pc

8002966c <pevc_channel_clear_trigger_interrupt>:

// See comment header in pevc.h
void pevc_channel_clear_trigger_interrupt( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
8002966c:	eb cd 40 80 	pushm	r7,lr
80029670:	1a 97       	mov	r7,sp
80029672:	20 2d       	sub	sp,8
80029674:	ef 4c ff fc 	st.w	r7[-4],r12
80029678:	16 98       	mov	r8,r11
8002967a:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
8002967e:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80029682:	31 f8       	mov	r8,31
80029684:	f0 09 19 00 	cp.h	r9,r8
80029688:	e0 8b 00 0d 	brhi	800296a2 <pevc_channel_clear_trigger_interrupt+0x36>
    pevc->trscr0 = (1 << chan_id);
8002968c:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80029690:	30 19       	mov	r9,1
80029692:	f2 08 09 48 	lsl	r8,r9,r8
80029696:	10 99       	mov	r9,r8
80029698:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002969c:	f1 49 00 70 	st.w	r8[112],r9
800296a0:	c0 c8       	rjmp	800296b8 <pevc_channel_clear_trigger_interrupt+0x4c>
  else
    pevc->trscr1 = (1 << (chan_id-32));
800296a2:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800296a6:	22 08       	sub	r8,32
800296a8:	30 19       	mov	r9,1
800296aa:	f2 08 09 48 	lsl	r8,r9,r8
800296ae:	10 99       	mov	r9,r8
800296b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800296b4:	f1 49 00 74 	st.w	r8[116],r9
}
800296b8:	2f ed       	sub	sp,-8
800296ba:	e3 cd 80 80 	ldm	sp++,r7,pc

800296be <pevc_channels_enable_overrun_interrupt>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
void pevc_channels_enable_overrun_interrupt( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
800296be:	eb cd 40 80 	pushm	r7,lr
800296c2:	1a 97       	mov	r7,sp
800296c4:	20 3d       	sub	sp,12
800296c6:	ef 4c ff fc 	st.w	r7[-4],r12
800296ca:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_ENABLE_OVERRUN_INTERRUPT(pevc, chan_mask);
800296ce:	ee e8 ff f4 	ld.d	r8,r7[-12]
800296d2:	fc 1a 80 00 	movh	r10,0x8000
800296d6:	30 0b       	mov	r11,0
800296d8:	14 38       	cp.w	r8,r10
800296da:	f6 09 13 00 	cpc	r9,r11
800296de:	e0 8b 00 09 	brhi	800296f0 <pevc_channels_enable_overrun_interrupt+0x32>
800296e2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800296e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800296ea:	f1 49 00 e0 	st.w	r8[224],r9
800296ee:	c0 78       	rjmp	800296fc <pevc_channels_enable_overrun_interrupt+0x3e>
800296f0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800296f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800296f8:	f1 49 00 e4 	st.w	r8[228],r9
}
800296fc:	2f dd       	sub	sp,-12
800296fe:	e3 cd 80 80 	ldm	sp++,r7,pc

80029702 <pevc_channels_disable_overrun_interrupt>:

// See comment header in pevc.h
void pevc_channels_disable_overrun_interrupt( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
80029702:	eb cd 40 80 	pushm	r7,lr
80029706:	1a 97       	mov	r7,sp
80029708:	20 3d       	sub	sp,12
8002970a:	ef 4c ff fc 	st.w	r7[-4],r12
8002970e:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_DISABLE_OVERRUN_INTERRUPT(pevc, chan_mask);
80029712:	ee e8 ff f4 	ld.d	r8,r7[-12]
80029716:	fc 1a 80 00 	movh	r10,0x8000
8002971a:	30 0b       	mov	r11,0
8002971c:	14 38       	cp.w	r8,r10
8002971e:	f6 09 13 00 	cpc	r9,r11
80029722:	e0 8b 00 09 	brhi	80029734 <pevc_channels_disable_overrun_interrupt+0x32>
80029726:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002972a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002972e:	f1 49 00 f0 	st.w	r8[240],r9
80029732:	c0 78       	rjmp	80029740 <pevc_channels_disable_overrun_interrupt+0x3e>
80029734:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029738:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002973c:	f1 49 00 f4 	st.w	r8[244],r9
}
80029740:	2f dd       	sub	sp,-12
80029742:	e3 cd 80 80 	ldm	sp++,r7,pc

80029746 <pevc_channel_is_overrun_interrupt_enabled>:

// See comment header in pevc.h
bool pevc_channel_is_overrun_interrupt_enabled( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
80029746:	eb cd 40 80 	pushm	r7,lr
8002974a:	1a 97       	mov	r7,sp
8002974c:	20 2d       	sub	sp,8
8002974e:	ef 4c ff fc 	st.w	r7[-4],r12
80029752:	16 98       	mov	r8,r11
80029754:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
80029758:	ef 09 ff f8 	ld.sh	r9,r7[-8]
8002975c:	31 f8       	mov	r8,31
8002975e:	f0 09 19 00 	cp.h	r9,r8
80029762:	e0 8b 00 13 	brhi	80029788 <pevc_channel_is_overrun_interrupt_enabled+0x42>
    return( ((pevc->ovimr0) & (1 << chan_id))>>chan_id );
80029766:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002976a:	f0 f9 00 d0 	ld.w	r9,r8[208]
8002976e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80029772:	30 1a       	mov	r10,1
80029774:	f4 08 09 48 	lsl	r8,r10,r8
80029778:	10 69       	and	r9,r8
8002977a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002977e:	f2 08 0a 48 	lsr	r8,r9,r8
80029782:	5f 18       	srne	r8
80029784:	5c 58       	castu.b	r8
80029786:	c1 38       	rjmp	800297ac <pevc_channel_is_overrun_interrupt_enabled+0x66>
  else
    return( ((pevc->ovimr1) & (1 << (chan_id-32)))>>(chan_id-32) );
80029788:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002978c:	f0 f9 00 d4 	ld.w	r9,r8[212]
80029790:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80029794:	22 08       	sub	r8,32
80029796:	30 1a       	mov	r10,1
80029798:	f4 08 09 48 	lsl	r8,r10,r8
8002979c:	10 69       	and	r9,r8
8002979e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800297a2:	22 08       	sub	r8,32
800297a4:	f2 08 0a 48 	lsr	r8,r9,r8
800297a8:	5f 18       	srne	r8
800297aa:	5c 58       	castu.b	r8
}
800297ac:	10 9c       	mov	r12,r8
800297ae:	2f ed       	sub	sp,-8
800297b0:	e3 cd 80 80 	ldm	sp++,r7,pc

800297b4 <pevc_channel_is_overrun_interrupt_raised>:

// See comment header in pevc.h
bool pevc_channel_is_overrun_interrupt_raised( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
800297b4:	eb cd 40 80 	pushm	r7,lr
800297b8:	1a 97       	mov	r7,sp
800297ba:	20 2d       	sub	sp,8
800297bc:	ef 4c ff fc 	st.w	r7[-4],r12
800297c0:	16 98       	mov	r8,r11
800297c2:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
800297c6:	ef 09 ff f8 	ld.sh	r9,r7[-8]
800297ca:	31 f8       	mov	r8,31
800297cc:	f0 09 19 00 	cp.h	r9,r8
800297d0:	e0 8b 00 13 	brhi	800297f6 <pevc_channel_is_overrun_interrupt_raised+0x42>
    return( ((pevc->ovsr0) & (1 << chan_id))>>chan_id );
800297d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800297d8:	f0 f9 00 b0 	ld.w	r9,r8[176]
800297dc:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800297e0:	30 1a       	mov	r10,1
800297e2:	f4 08 09 48 	lsl	r8,r10,r8
800297e6:	10 69       	and	r9,r8
800297e8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800297ec:	f2 08 0a 48 	lsr	r8,r9,r8
800297f0:	5f 18       	srne	r8
800297f2:	5c 58       	castu.b	r8
800297f4:	c1 38       	rjmp	8002981a <pevc_channel_is_overrun_interrupt_raised+0x66>
  else
    return( ((pevc->ovsr1) & (1 << (chan_id-32)))>>(chan_id-32) );
800297f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800297fa:	f0 f9 00 b4 	ld.w	r9,r8[180]
800297fe:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80029802:	22 08       	sub	r8,32
80029804:	30 1a       	mov	r10,1
80029806:	f4 08 09 48 	lsl	r8,r10,r8
8002980a:	10 69       	and	r9,r8
8002980c:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80029810:	22 08       	sub	r8,32
80029812:	f2 08 0a 48 	lsr	r8,r9,r8
80029816:	5f 18       	srne	r8
80029818:	5c 58       	castu.b	r8
}
8002981a:	10 9c       	mov	r12,r8
8002981c:	2f ed       	sub	sp,-8
8002981e:	e3 cd 80 80 	ldm	sp++,r7,pc

80029822 <pevc_channel_clear_overrun_interrupt>:

// See comment header in pevc.h
void pevc_channel_clear_overrun_interrupt( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
80029822:	eb cd 40 80 	pushm	r7,lr
80029826:	1a 97       	mov	r7,sp
80029828:	20 2d       	sub	sp,8
8002982a:	ef 4c ff fc 	st.w	r7[-4],r12
8002982e:	16 98       	mov	r8,r11
80029830:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
80029834:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80029838:	31 f8       	mov	r8,31
8002983a:	f0 09 19 00 	cp.h	r9,r8
8002983e:	e0 8b 00 0d 	brhi	80029858 <pevc_channel_clear_overrun_interrupt+0x36>
    pevc->ovscr0 = (1 << chan_id);
80029842:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80029846:	30 19       	mov	r9,1
80029848:	f2 08 09 48 	lsl	r8,r9,r8
8002984c:	10 99       	mov	r9,r8
8002984e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029852:	f1 49 00 c0 	st.w	r8[192],r9
80029856:	c0 c8       	rjmp	8002986e <pevc_channel_clear_overrun_interrupt+0x4c>
  else
    pevc->ovscr1 = (1 << (chan_id-32));
80029858:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002985c:	22 08       	sub	r8,32
8002985e:	30 19       	mov	r9,1
80029860:	f2 08 09 48 	lsl	r8,r9,r8
80029864:	10 99       	mov	r9,r8
80029866:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002986a:	f1 49 00 c4 	st.w	r8[196],r9
}
8002986e:	2f ed       	sub	sp,-8
80029870:	e3 cd 80 80 	ldm	sp++,r7,pc

80029874 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80029874:	eb cd 40 80 	pushm	r7,lr
80029878:	1a 97       	mov	r7,sp
8002987a:	20 1d       	sub	sp,4
8002987c:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80029880:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029884:	e6 18 00 01 	andh	r8,0x1,COH
80029888:	5f 08       	sreq	r8
8002988a:	5c 58       	castu.b	r8
}
8002988c:	10 9c       	mov	r12,r8
8002988e:	2f fd       	sub	sp,-4
80029890:	e3 cd 80 80 	ldm	sp++,r7,pc

80029894 <scif_pclksr_statushigh_wait>:
 * \return Status.
 *   \retval 0   Status is high.
 *   \retval <0  SCIF_POLL_TIMEOUT Timeout expired before the status was high.
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
80029894:	eb cd 40 80 	pushm	r7,lr
80029898:	1a 97       	mov	r7,sp
8002989a:	20 2d       	sub	sp,8
8002989c:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
800298a0:	e0 78 86 a0 	mov	r8,100000
800298a4:	ef 48 ff fc 	st.w	r7[-4],r8
  
  while(!(AVR32_SCIF.pclksr & statusMask))
800298a8:	c0 c8       	rjmp	800298c0 <scif_pclksr_statushigh_wait+0x2c>
  {
    if(--timeout == 0)
800298aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800298ae:	20 18       	sub	r8,1
800298b0:	ef 48 ff fc 	st.w	r7[-4],r8
800298b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800298b8:	58 08       	cp.w	r8,0
800298ba:	c0 31       	brne	800298c0 <scif_pclksr_statushigh_wait+0x2c>
      return -1;
800298bc:	3f f8       	mov	r8,-1
800298be:	c0 a8       	rjmp	800298d2 <scif_pclksr_statushigh_wait+0x3e>
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
  
  while(!(AVR32_SCIF.pclksr & statusMask))
800298c0:	fe 78 08 00 	mov	r8,-63488
800298c4:	70 59       	ld.w	r9,r8[0x14]
800298c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800298ca:	f3 e8 00 08 	and	r8,r9,r8
800298ce:	ce e0       	breq	800298aa <scif_pclksr_statushigh_wait+0x16>
  {
    if(--timeout == 0)
      return -1;
  }
  return PASS;
800298d0:	30 08       	mov	r8,0
}
800298d2:	10 9c       	mov	r12,r8
800298d4:	2f ed       	sub	sp,-8
800298d6:	e3 cd 80 80 	ldm	sp++,r7,pc

800298da <scif_read_gplp>:

unsigned long scif_read_gplp(unsigned long gplp)
{
800298da:	eb cd 40 80 	pushm	r7,lr
800298de:	1a 97       	mov	r7,sp
800298e0:	20 1d       	sub	sp,4
800298e2:	ef 4c ff fc 	st.w	r7[-4],r12
  return AVR32_SCIF.gplp[gplp];
800298e6:	fe 78 08 00 	mov	r8,-63488
800298ea:	ee f9 ff fc 	ld.w	r9,r7[-4]
800298ee:	2e 99       	sub	r9,-23
800298f0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
}
800298f4:	10 9c       	mov	r12,r8
800298f6:	2f fd       	sub	sp,-4
800298f8:	e3 cd 80 80 	ldm	sp++,r7,pc

800298fc <scif_write_gplp>:


void scif_write_gplp(int gplp, unsigned long value)
{
800298fc:	eb cd 40 80 	pushm	r7,lr
80029900:	1a 97       	mov	r7,sp
80029902:	20 2d       	sub	sp,8
80029904:	ef 4c ff fc 	st.w	r7[-4],r12
80029908:	ef 4b ff f8 	st.w	r7[-8],r11
  SCIF_UNLOCK(AVR32_SCIF_GPLP + 4*gplp); 
8002990c:	fe 78 08 00 	mov	r8,-63488
80029910:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029914:	2e 99       	sub	r9,-23
80029916:	a3 69       	lsl	r9,0x2
80029918:	ea 19 aa 00 	orh	r9,0xaa00
8002991c:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.gplp[gplp] = value;
8002991e:	fe 78 08 00 	mov	r8,-63488
80029922:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029926:	2e 99       	sub	r9,-23
80029928:	ee fa ff f8 	ld.w	r10,r7[-8]
8002992c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80029930:	2f ed       	sub	sp,-8
80029932:	e3 cd 80 80 	ldm	sp++,r7,pc

80029936 <scif_start_osc>:
/**
 ** OSC0/OSC1 Functions
 **/

long int scif_start_osc(scif_osc_t osc, const scif_osc_opt_t *opt, bool wait_for_ready)
{
80029936:	eb cd 40 c0 	pushm	r6-r7,lr
8002993a:	1a 97       	mov	r7,sp
8002993c:	20 6d       	sub	sp,24
8002993e:	4c c6       	lddpc	r6,80029a6c <scif_start_osc+0x136>
80029940:	1e 26       	rsub	r6,pc
80029942:	ef 4c ff f0 	st.w	r7[-16],r12
80029946:	ef 4b ff ec 	st.w	r7[-20],r11
8002994a:	14 98       	mov	r8,r10
8002994c:	ef 68 ff e8 	st.b	r7[-24],r8
      return -1;
    }  
  }
#endif  // AVR32SFW_INPUT_CHECK
  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
80029950:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029954:	fe 79 08 00 	mov	r9,-63488
80029958:	ee fa ff f0 	ld.w	r10,r7[-16]
8002995c:	a3 68       	lsl	r8,0x2
8002995e:	ee 08 00 08 	add	r8,r7,r8
80029962:	2f 7a       	sub	r10,-9
80029964:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80029968:	f1 49 ff f4 	st.w	r8[-12],r9
  // Modify: Configure & start OSC0.
  u_avr32_scif_oscctrl.OSCCTRL[osc].mode = opt->mode;
8002996c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80029970:	ee f8 ff ec 	ld.w	r8,r7[-20]
80029974:	70 18       	ld.w	r8,r8[0x4]
80029976:	5c 58       	castu.b	r8
80029978:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002997c:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80029980:	f2 08 15 02 	lsl	r8,r9,0x2
80029984:	ee 08 00 08 	add	r8,r7,r8
80029988:	f0 f9 ff f4 	ld.w	r9,r8[-12]
8002998c:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80029990:	f1 49 ff f4 	st.w	r8[-12],r9
  u_avr32_scif_oscctrl.OSCCTRL[osc].gain = opt->gain;
80029994:	ee f9 ff f0 	ld.w	r9,r7[-16]
80029998:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002999c:	f1 38 00 09 	ld.ub	r8,r8[9]
800299a0:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800299a4:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800299a8:	f2 08 15 02 	lsl	r8,r9,0x2
800299ac:	ee 08 00 08 	add	r8,r7,r8
800299b0:	f0 f9 ff f4 	ld.w	r9,r8[-12]
800299b4:	f3 da d0 22 	bfins	r9,r10,0x1,0x2
800299b8:	f1 49 ff f4 	st.w	r8[-12],r9
  u_avr32_scif_oscctrl.OSCCTRL[osc].startup = opt->startup;
800299bc:	ee f9 ff f0 	ld.w	r9,r7[-16]
800299c0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800299c4:	f1 38 00 08 	ld.ub	r8,r8[8]
800299c8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800299cc:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800299d0:	f2 08 15 02 	lsl	r8,r9,0x2
800299d4:	ee 08 00 08 	add	r8,r7,r8
800299d8:	f0 f9 ff f4 	ld.w	r9,r8[-12]
800299dc:	f3 da d1 04 	bfins	r9,r10,0x8,0x4
800299e0:	f1 49 ff f4 	st.w	r8[-12],r9
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
800299e4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800299e8:	a3 68       	lsl	r8,0x2
800299ea:	ee 08 00 08 	add	r8,r7,r8
800299ee:	f0 f9 ff f4 	ld.w	r9,r8[-12]
800299f2:	30 1a       	mov	r10,1
800299f4:	f3 da d2 01 	bfins	r9,r10,0x10,0x1
800299f8:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
800299fc:	e1 b8 00 00 	mfsr	r8,0x0
80029a00:	10 9c       	mov	r12,r8
80029a02:	c3 9f       	rcall	80029874 <cpu_irq_is_enabled_flags>
80029a04:	18 98       	mov	r8,r12
80029a06:	ef 68 ff ff 	st.b	r7[-1],r8
80029a0a:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);    
80029a0c:	fe 78 08 00 	mov	r8,-63488
80029a10:	ee f9 ff f0 	ld.w	r9,r7[-16]
80029a14:	2f 79       	sub	r9,-9
80029a16:	a3 69       	lsl	r9,0x2
80029a18:	ea 19 aa 00 	orh	r9,0xaa00
80029a1c:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80029a1e:	fe 79 08 00 	mov	r9,-63488
80029a22:	ee fa ff f0 	ld.w	r10,r7[-16]
80029a26:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029a2a:	2f 7a       	sub	r10,-9
80029a2c:	a3 68       	lsl	r8,0x2
80029a2e:	ee 08 00 08 	add	r8,r7,r8
80029a32:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80029a36:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80029a3a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029a3e:	30 08       	mov	r8,0
80029a40:	f0 09 18 00 	cp.b	r9,r8
80029a44:	c0 20       	breq	80029a48 <scif_start_osc+0x112>
80029a46:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80029a48:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80029a4c:	30 08       	mov	r8,0
80029a4e:	f0 09 18 00 	cp.b	r9,r8
80029a52:	c0 80       	breq	80029a62 <scif_start_osc+0x12c>
  {
    // Wait until OSC0 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
80029a54:	30 1c       	mov	r12,1
80029a56:	c1 ff       	rcall	80029894 <scif_pclksr_statushigh_wait>
80029a58:	18 98       	mov	r8,r12
80029a5a:	58 08       	cp.w	r8,0
80029a5c:	c0 30       	breq	80029a62 <scif_start_osc+0x12c>
      return -1;
80029a5e:	3f f8       	mov	r8,-1
80029a60:	c0 28       	rjmp	80029a64 <scif_start_osc+0x12e>
  }
  return PASS;
80029a62:	30 08       	mov	r8,0
}
80029a64:	10 9c       	mov	r12,r8
80029a66:	2f ad       	sub	sp,-24
80029a68:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029a6c:	80 02       	ld.sh	r2,r0[0x0]
80029a6e:	97 c4       	st.w	r11[0x30],r4

80029a70 <scif_is_osc_ready>:


bool scif_is_osc_ready(scif_osc_t osc)
{
80029a70:	eb cd 40 80 	pushm	r7,lr
80029a74:	1a 97       	mov	r7,sp
80029a76:	20 1d       	sub	sp,4
80029a78:	ef 4c ff fc 	st.w	r7[-4],r12
  if (osc == SCIF_OSC0)
80029a7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029a80:	58 08       	cp.w	r8,0
80029a82:	c0 81       	brne	80029a92 <scif_is_osc_ready+0x22>
  {
    return((AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_OSC0RDY_MASK)>>AVR32_SCIF_PCLKSR_OSC0RDY_OFFSET);
80029a84:	fe 78 08 00 	mov	r8,-63488
80029a88:	70 58       	ld.w	r8,r8[0x14]
80029a8a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029a8e:	5c 58       	castu.b	r8
80029a90:	c0 98       	rjmp	80029aa2 <scif_is_osc_ready+0x32>
  }
  else
  {
    return((AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_OSC1RDY_MASK)>>AVR32_SCIF_PCLKSR_OSC1RDY_OFFSET);  
80029a92:	fe 78 08 00 	mov	r8,-63488
80029a96:	70 58       	ld.w	r8,r8[0x14]
80029a98:	e2 18 00 02 	andl	r8,0x2,COH
80029a9c:	a1 98       	lsr	r8,0x1
80029a9e:	5f 18       	srne	r8
80029aa0:	5c 58       	castu.b	r8
  }
}
80029aa2:	10 9c       	mov	r12,r8
80029aa4:	2f fd       	sub	sp,-4
80029aa6:	e3 cd 80 80 	ldm	sp++,r7,pc

80029aaa <scif_stop_osc>:


long int scif_stop_osc(scif_osc_t osc)
{
80029aaa:	eb cd 40 c0 	pushm	r6-r7,lr
80029aae:	1a 97       	mov	r7,sp
80029ab0:	20 3d       	sub	sp,12
80029ab2:	49 d6       	lddpc	r6,80029b24 <scif_stop_osc+0x7a>
80029ab4:	1e 26       	rsub	r6,pc
80029ab6:	ef 4c ff f4 	st.w	r7[-12],r12

  unsigned long temp;

  temp = AVR32_SCIF.oscctrl[osc];
80029aba:	fe 78 08 00 	mov	r8,-63488
80029abe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80029ac2:	2f 79       	sub	r9,-9
80029ac4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80029ac8:	ef 48 ff f8 	st.w	r7[-8],r8
  temp &= ~AVR32_SCIF_OSCCTRL_OSCEN_MASK;
80029acc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029ad0:	b1 c8       	cbr	r8,0x10
80029ad2:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80029ad6:	e1 b8 00 00 	mfsr	r8,0x0
80029ada:	10 9c       	mov	r12,r8
80029adc:	cc ce       	rcall	80029874 <cpu_irq_is_enabled_flags>
80029ade:	18 98       	mov	r8,r12
80029ae0:	ef 68 ff ff 	st.b	r7[-1],r8
80029ae4:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
80029ae6:	fe 78 08 00 	mov	r8,-63488
80029aea:	ee f9 ff f4 	ld.w	r9,r7[-12]
80029aee:	2f 79       	sub	r9,-9
80029af0:	a3 69       	lsl	r9,0x2
80029af2:	ea 19 aa 00 	orh	r9,0xaa00
80029af6:	91 69       	st.w	r8[0x18],r9
  // Stop OSC0.
  AVR32_SCIF.oscctrl[osc] = temp;
80029af8:	fe 78 08 00 	mov	r8,-63488
80029afc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80029b00:	2f 79       	sub	r9,-9
80029b02:	ee fa ff f8 	ld.w	r10,r7[-8]
80029b06:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  AVR32_LEAVE_CRITICAL_REGION( );
80029b0a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029b0e:	30 08       	mov	r8,0
80029b10:	f0 09 18 00 	cp.b	r9,r8
80029b14:	c0 20       	breq	80029b18 <scif_stop_osc+0x6e>
80029b16:	d5 03       	csrf	0x10
      
  return PASS;
80029b18:	30 08       	mov	r8,0
}
80029b1a:	10 9c       	mov	r12,r8
80029b1c:	2f dd       	sub	sp,-12
80029b1e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029b22:	00 00       	add	r0,r0
80029b24:	80 02       	ld.sh	r2,r0[0x0]
80029b26:	99 38       	st.w	r12[0xc],r8

80029b28 <scif_configure_osc_crystalmode>:


long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
80029b28:	eb cd 40 c0 	pushm	r6-r7,lr
80029b2c:	1a 97       	mov	r7,sp
80029b2e:	20 5d       	sub	sp,20
80029b30:	4d 46       	lddpc	r6,80029c80 <scif_configure_osc_crystalmode+0x158>
80029b32:	1e 26       	rsub	r6,pc
80029b34:	ef 4c ff f0 	st.w	r7[-16],r12
80029b38:	ef 4b ff ec 	st.w	r7[-20],r11
  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;
  
  if (osc == SCIF_OSC0)
80029b3c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029b40:	58 08       	cp.w	r8,0
80029b42:	c4 e1       	brne	80029bde <scif_configure_osc_crystalmode+0xb6>
  {    
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;    
80029b44:	fe 78 08 00 	mov	r8,-63488
80029b48:	70 98       	ld.w	r8,r8[0x24]
80029b4a:	ef 48 ff f4 	st.w	r7[-12],r8
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // cyrstal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
80029b4e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029b52:	30 19       	mov	r9,1
80029b54:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80029b58:	ef 48 ff f4 	st.w	r7[-12],r8
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  900000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80029b5c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80029b60:	ec 58 bb 9f 	cp.w	r8,899999
80029b64:	e0 88 00 1b 	brls	80029b9a <scif_configure_osc_crystalmode+0x72>
80029b68:	ee f8 ff ec 	ld.w	r8,r7[-20]
80029b6c:	e0 69 c6 bf 	mov	r9,50879
80029b70:	ea 19 00 2d 	orh	r9,0x2d
80029b74:	12 38       	cp.w	r8,r9
80029b76:	e0 88 00 0f 	brls	80029b94 <scif_configure_osc_crystalmode+0x6c>
80029b7a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80029b7e:	e0 69 11 ff 	mov	r9,4607
80029b82:	ea 19 00 7a 	orh	r9,0x7a
80029b86:	12 38       	cp.w	r8,r9
80029b88:	e0 8b 00 04 	brhi	80029b90 <scif_configure_osc_crystalmode+0x68>
80029b8c:	30 28       	mov	r8,2
80029b8e:	c0 28       	rjmp	80029b92 <scif_configure_osc_crystalmode+0x6a>
80029b90:	30 38       	mov	r8,3
80029b92:	c0 28       	rjmp	80029b96 <scif_configure_osc_crystalmode+0x6e>
80029b94:	30 18       	mov	r8,1
80029b96:	10 99       	mov	r9,r8
80029b98:	c0 28       	rjmp	80029b9c <scif_configure_osc_crystalmode+0x74>
80029b9a:	30 09       	mov	r9,0
80029b9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029ba0:	f1 d9 d0 22 	bfins	r8,r9,0x1,0x2
80029ba4:	ef 48 ff f4 	st.w	r7[-12],r8
                                                   (fcrystal < 3000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                                   (fcrystal < 8000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G2 :
                                                                          AVR32_SCIF_OSCCTRL0_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
80029ba8:	e1 b8 00 00 	mfsr	r8,0x0
80029bac:	10 9c       	mov	r12,r8
80029bae:	c6 3e       	rcall	80029874 <cpu_irq_is_enabled_flags>
80029bb0:	18 98       	mov	r8,r12
80029bb2:	ef 68 ff fe 	st.b	r7[-2],r8
80029bb6:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL0 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL);
80029bb8:	fe 78 08 00 	mov	r8,-63488
80029bbc:	32 49       	mov	r9,36
80029bbe:	ea 19 aa 00 	orh	r9,0xaa00
80029bc2:	91 69       	st.w	r8[0x18],r9
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC0] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0];
80029bc4:	fe 78 08 00 	mov	r8,-63488
80029bc8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80029bcc:	91 99       	st.w	r8[0x24],r9
    AVR32_LEAVE_CRITICAL_REGION( );
80029bce:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80029bd2:	30 08       	mov	r8,0
80029bd4:	f0 09 18 00 	cp.b	r9,r8
80029bd8:	c4 f0       	breq	80029c76 <scif_configure_osc_crystalmode+0x14e>
80029bda:	d5 03       	csrf	0x10
80029bdc:	c4 d8       	rjmp	80029c76 <scif_configure_osc_crystalmode+0x14e>
  }
  else
  { 
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;    
80029bde:	fe 78 08 00 	mov	r8,-63488
80029be2:	70 a8       	ld.w	r8,r8[0x28]
80029be4:	ef 48 ff f8 	st.w	r7[-8],r8
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // cyrstal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
80029be8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029bec:	30 19       	mov	r9,1
80029bee:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80029bf2:	ef 48 ff f8 	st.w	r7[-8],r8
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  900000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
80029bf6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80029bfa:	ec 58 bb 9f 	cp.w	r8,899999
80029bfe:	e0 88 00 1b 	brls	80029c34 <scif_configure_osc_crystalmode+0x10c>
80029c02:	ee f8 ff ec 	ld.w	r8,r7[-20]
80029c06:	e0 69 c6 bf 	mov	r9,50879
80029c0a:	ea 19 00 2d 	orh	r9,0x2d
80029c0e:	12 38       	cp.w	r8,r9
80029c10:	e0 88 00 0f 	brls	80029c2e <scif_configure_osc_crystalmode+0x106>
80029c14:	ee f8 ff ec 	ld.w	r8,r7[-20]
80029c18:	e0 69 11 ff 	mov	r9,4607
80029c1c:	ea 19 00 7a 	orh	r9,0x7a
80029c20:	12 38       	cp.w	r8,r9
80029c22:	e0 8b 00 04 	brhi	80029c2a <scif_configure_osc_crystalmode+0x102>
80029c26:	30 28       	mov	r8,2
80029c28:	c0 28       	rjmp	80029c2c <scif_configure_osc_crystalmode+0x104>
80029c2a:	30 38       	mov	r8,3
80029c2c:	c0 28       	rjmp	80029c30 <scif_configure_osc_crystalmode+0x108>
80029c2e:	30 18       	mov	r8,1
80029c30:	10 99       	mov	r9,r8
80029c32:	c0 28       	rjmp	80029c36 <scif_configure_osc_crystalmode+0x10e>
80029c34:	30 09       	mov	r9,0
80029c36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029c3a:	f1 d9 d0 22 	bfins	r8,r9,0x1,0x2
80029c3e:	ef 48 ff f8 	st.w	r7[-8],r8
                                                   (fcrystal < 3000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G1 :
                                                   (fcrystal < 8000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G2 :
                                                                          AVR32_SCIF_OSCCTRL1_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
80029c42:	e1 b8 00 00 	mfsr	r8,0x0
80029c46:	10 9c       	mov	r12,r8
80029c48:	c1 6e       	rcall	80029874 <cpu_irq_is_enabled_flags>
80029c4a:	18 98       	mov	r8,r12
80029c4c:	ef 68 ff ff 	st.b	r7[-1],r8
80029c50:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL1 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4);
80029c52:	fe 78 08 00 	mov	r8,-63488
80029c56:	32 89       	mov	r9,40
80029c58:	ea 19 aa 00 	orh	r9,0xaa00
80029c5c:	91 69       	st.w	r8[0x18],r9
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC1] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1];
80029c5e:	fe 78 08 00 	mov	r8,-63488
80029c62:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029c66:	91 a9       	st.w	r8[0x28],r9
    AVR32_LEAVE_CRITICAL_REGION( );
80029c68:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029c6c:	30 08       	mov	r8,0
80029c6e:	f0 09 18 00 	cp.b	r9,r8
80029c72:	c0 20       	breq	80029c76 <scif_configure_osc_crystalmode+0x14e>
80029c74:	d5 03       	csrf	0x10
  }

  return PASS;
80029c76:	30 08       	mov	r8,0
}
80029c78:	10 9c       	mov	r12,r8
80029c7a:	2f bd       	sub	sp,-20
80029c7c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029c80:	80 02       	ld.sh	r2,r0[0x0]
80029c82:	99 b6       	st.w	r12[0x2c],r6

80029c84 <scif_configure_osc_extmode>:

long int scif_configure_osc_extmode(scif_osc_t osc)
{
80029c84:	eb cd 40 c0 	pushm	r6-r7,lr
80029c88:	1a 97       	mov	r7,sp
80029c8a:	20 4d       	sub	sp,16
80029c8c:	4a 56       	lddpc	r6,80029d20 <scif_configure_osc_extmode+0x9c>
80029c8e:	1e 26       	rsub	r6,pc
80029c90:	ef 4c ff f0 	st.w	r7[-16],r12
  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;
  
      // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
80029c94:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029c98:	fe 79 08 00 	mov	r9,-63488
80029c9c:	ee fa ff f0 	ld.w	r10,r7[-16]
80029ca0:	a3 68       	lsl	r8,0x2
80029ca2:	ee 08 00 08 	add	r8,r7,r8
80029ca6:	2f 7a       	sub	r10,-9
80029ca8:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80029cac:	f1 49 ff f4 	st.w	r8[-12],r9
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // cyrstal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[osc].mode = SCIF_OSC_MODE_EXT_CLK;
80029cb0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029cb4:	a3 68       	lsl	r8,0x2
80029cb6:	ee 08 00 08 	add	r8,r7,r8
80029cba:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80029cbe:	30 0a       	mov	r10,0
80029cc0:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80029cc4:	f1 49 ff f4 	st.w	r8[-12],r9
    AVR32_ENTER_CRITICAL_REGION( );
80029cc8:	e1 b8 00 00 	mfsr	r8,0x0
80029ccc:	10 9c       	mov	r12,r8
80029cce:	fe b0 fd d3 	rcall	80029874 <cpu_irq_is_enabled_flags>
80029cd2:	18 98       	mov	r8,r12
80029cd4:	ef 68 ff ff 	st.b	r7[-1],r8
80029cd8:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL0 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
80029cda:	fe 78 08 00 	mov	r8,-63488
80029cde:	ee f9 ff f0 	ld.w	r9,r7[-16]
80029ce2:	2f 79       	sub	r9,-9
80029ce4:	a3 69       	lsl	r9,0x2
80029ce6:	ea 19 aa 00 	orh	r9,0xaa00
80029cea:	91 69       	st.w	r8[0x18],r9
    // Write Back
    AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80029cec:	fe 79 08 00 	mov	r9,-63488
80029cf0:	ee fa ff f0 	ld.w	r10,r7[-16]
80029cf4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029cf8:	2f 7a       	sub	r10,-9
80029cfa:	a3 68       	lsl	r8,0x2
80029cfc:	ee 08 00 08 	add	r8,r7,r8
80029d00:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80029d04:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
    AVR32_LEAVE_CRITICAL_REGION( );
80029d08:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029d0c:	30 08       	mov	r8,0
80029d0e:	f0 09 18 00 	cp.b	r9,r8
80029d12:	c0 20       	breq	80029d16 <scif_configure_osc_extmode+0x92>
80029d14:	d5 03       	csrf	0x10

  return PASS;
80029d16:	30 08       	mov	r8,0
}
80029d18:	10 9c       	mov	r12,r8
80029d1a:	2f cd       	sub	sp,-16
80029d1c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029d20:	80 02       	ld.sh	r2,r0[0x0]
80029d22:	9b 12       	st.w	sp[0x4],r2

80029d24 <scif_enable_osc>:

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
80029d24:	eb cd 40 c0 	pushm	r6-r7,lr
80029d28:	1a 97       	mov	r7,sp
80029d2a:	20 6d       	sub	sp,24
80029d2c:	4b 86       	lddpc	r6,80029e0c <scif_enable_osc+0xe8>
80029d2e:	1e 26       	rsub	r6,pc
80029d30:	ef 4c ff f0 	st.w	r7[-16],r12
80029d34:	ef 4b ff ec 	st.w	r7[-20],r11
80029d38:	14 98       	mov	r8,r10
80029d3a:	ef 68 ff e8 	st.b	r7[-24],r8

  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;      
80029d3e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029d42:	fe 79 08 00 	mov	r9,-63488
80029d46:	ee fa ff f0 	ld.w	r10,r7[-16]
80029d4a:	a3 68       	lsl	r8,0x2
80029d4c:	ee 08 00 08 	add	r8,r7,r8
80029d50:	2f 7a       	sub	r10,-9
80029d52:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80029d56:	f1 49 ff f4 	st.w	r8[-12],r9
  // Modify: Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl.OSCCTRL[osc].startup = startup;
80029d5a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80029d5e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80029d62:	5c 58       	castu.b	r8
80029d64:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80029d68:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80029d6c:	f2 08 15 02 	lsl	r8,r9,0x2
80029d70:	ee 08 00 08 	add	r8,r7,r8
80029d74:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80029d78:	f3 da d1 04 	bfins	r9,r10,0x8,0x4
80029d7c:	f1 49 ff f4 	st.w	r8[-12],r9
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
80029d80:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029d84:	a3 68       	lsl	r8,0x2
80029d86:	ee 08 00 08 	add	r8,r7,r8
80029d8a:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80029d8e:	30 1a       	mov	r10,1
80029d90:	f3 da d2 01 	bfins	r9,r10,0x10,0x1
80029d94:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80029d98:	e1 b8 00 00 	mfsr	r8,0x0
80029d9c:	10 9c       	mov	r12,r8
80029d9e:	fe b0 fd 6b 	rcall	80029874 <cpu_irq_is_enabled_flags>
80029da2:	18 98       	mov	r8,r12
80029da4:	ef 68 ff ff 	st.b	r7[-1],r8
80029da8:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
80029daa:	fe 78 08 00 	mov	r8,-63488
80029dae:	ee f9 ff f0 	ld.w	r9,r7[-16]
80029db2:	2f 79       	sub	r9,-9
80029db4:	a3 69       	lsl	r9,0x2
80029db6:	ea 19 aa 00 	orh	r9,0xaa00
80029dba:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80029dbc:	fe 79 08 00 	mov	r9,-63488
80029dc0:	ee fa ff f0 	ld.w	r10,r7[-16]
80029dc4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029dc8:	2f 7a       	sub	r10,-9
80029dca:	a3 68       	lsl	r8,0x2
80029dcc:	ee 08 00 08 	add	r8,r7,r8
80029dd0:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80029dd4:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80029dd8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029ddc:	30 08       	mov	r8,0
80029dde:	f0 09 18 00 	cp.b	r9,r8
80029de2:	c0 20       	breq	80029de6 <scif_enable_osc+0xc2>
80029de4:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80029de6:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80029dea:	30 08       	mov	r8,0
80029dec:	f0 09 18 00 	cp.b	r9,r8
80029df0:	c0 90       	breq	80029e02 <scif_enable_osc+0xde>
  {
    // Wait until OSC0 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
80029df2:	30 1c       	mov	r12,1
80029df4:	fe b0 fd 50 	rcall	80029894 <scif_pclksr_statushigh_wait>
80029df8:	18 98       	mov	r8,r12
80029dfa:	58 08       	cp.w	r8,0
80029dfc:	c0 30       	breq	80029e02 <scif_enable_osc+0xde>
      return -1;
80029dfe:	3f f8       	mov	r8,-1
80029e00:	c0 28       	rjmp	80029e04 <scif_enable_osc+0xe0>
  }
      
  return PASS;
80029e02:	30 08       	mov	r8,0
}
80029e04:	10 9c       	mov	r12,r8
80029e06:	2f ad       	sub	sp,-24
80029e08:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029e0c:	80 02       	ld.sh	r2,r0[0x0]
80029e0e:	9b b2       	st.w	sp[0x2c],r2

80029e10 <scif_enable_extosc>:

long int scif_enable_extosc(scif_osc_t osc)
{
80029e10:	eb cd 40 c0 	pushm	r6-r7,lr
80029e14:	1a 97       	mov	r7,sp
80029e16:	20 4d       	sub	sp,16
80029e18:	4a 56       	lddpc	r6,80029eac <scif_enable_extosc+0x9c>
80029e1a:	1e 26       	rsub	r6,pc
80029e1c:	ef 4c ff f0 	st.w	r7[-16],r12

  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;    
80029e20:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029e24:	fe 79 08 00 	mov	r9,-63488
80029e28:	ee fa ff f0 	ld.w	r10,r7[-16]
80029e2c:	a3 68       	lsl	r8,0x2
80029e2e:	ee 08 00 08 	add	r8,r7,r8
80029e32:	2f 7a       	sub	r10,-9
80029e34:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80029e38:	f1 49 ff f4 	st.w	r8[-12],r9
  // Modify : Enable the osc.
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
80029e3c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029e40:	a3 68       	lsl	r8,0x2
80029e42:	ee 08 00 08 	add	r8,r7,r8
80029e46:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80029e4a:	30 1a       	mov	r10,1
80029e4c:	f3 da d2 01 	bfins	r9,r10,0x10,0x1
80029e50:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80029e54:	e1 b8 00 00 	mfsr	r8,0x0
80029e58:	10 9c       	mov	r12,r8
80029e5a:	fe b0 fd 0d 	rcall	80029874 <cpu_irq_is_enabled_flags>
80029e5e:	18 98       	mov	r8,r12
80029e60:	ef 68 ff ff 	st.b	r7[-1],r8
80029e64:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
80029e66:	fe 78 08 00 	mov	r8,-63488
80029e6a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80029e6e:	2f 79       	sub	r9,-9
80029e70:	a3 69       	lsl	r9,0x2
80029e72:	ea 19 aa 00 	orh	r9,0xaa00
80029e76:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80029e78:	fe 79 08 00 	mov	r9,-63488
80029e7c:	ee fa ff f0 	ld.w	r10,r7[-16]
80029e80:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029e84:	2f 7a       	sub	r10,-9
80029e86:	a3 68       	lsl	r8,0x2
80029e88:	ee 08 00 08 	add	r8,r7,r8
80029e8c:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80029e90:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80029e94:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029e98:	30 08       	mov	r8,0
80029e9a:	f0 09 18 00 	cp.b	r9,r8
80029e9e:	c0 20       	breq	80029ea2 <scif_enable_extosc+0x92>
80029ea0:	d5 03       	csrf	0x10
  
  return PASS;
80029ea2:	30 08       	mov	r8,0
}
80029ea4:	10 9c       	mov	r12,r8
80029ea6:	2f cd       	sub	sp,-16
80029ea8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029eac:	80 02       	ld.sh	r2,r0[0x0]
80029eae:	9c 9e       	ld.uh	lr,lr[0x2]

80029eb0 <scif_pll_setup>:

/**
 ** PLL0/PLL1 Functions
 **/
long int scif_pll_setup(scif_pll_t pll, const scif_pll_opt_t opt)
{
80029eb0:	eb cd 40 c0 	pushm	r6-r7,lr
80029eb4:	1a 97       	mov	r7,sp
80029eb6:	20 4d       	sub	sp,16
80029eb8:	4d 46       	lddpc	r6,8002a008 <scif_pll_setup+0x158>
80029eba:	1e 26       	rsub	r6,pc
80029ebc:	ee c8 ff f4 	sub	r8,r7,-12
80029ec0:	ef 4c ff f0 	st.w	r7[-16],r12

  u_avr32_scif_pll_t   u_avr32_scif_pll;

  // Read Register
  u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
80029ec4:	ee f9 ff f0 	ld.w	r9,r7[-16]
80029ec8:	fe 7a 08 00 	mov	r10,-63488
80029ecc:	ee fb ff f0 	ld.w	r11,r7[-16]
80029ed0:	a3 69       	lsl	r9,0x2
80029ed2:	ee 09 00 09 	add	r9,r7,r9
80029ed6:	2f 9b       	sub	r11,-7
80029ed8:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
80029edc:	f3 4a ff f4 	st.w	r9[-12],r10
  // Modify Configuration 
  u_avr32_scif_pll.PLL[pll].pllosc  = opt.osc;
80029ee0:	ee fa ff f0 	ld.w	r10,r7[-16]
80029ee4:	f1 39 00 10 	ld.ub	r9,r8[16]
80029ee8:	f3 d9 c0 02 	bfextu	r9,r9,0x0,0x2
80029eec:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80029ef0:	f4 09 15 02 	lsl	r9,r10,0x2
80029ef4:	ee 09 00 09 	add	r9,r7,r9
80029ef8:	f2 fa ff f4 	ld.w	r10,r9[-12]
80029efc:	f5 db d0 22 	bfins	r10,r11,0x1,0x2
80029f00:	f3 4a ff f4 	st.w	r9[-12],r10
  u_avr32_scif_pll.PLL[pll].pllopt  = opt.pll_freq | (opt.pll_div2 << 1) | (opt.pll_wbwdisable << 2);
80029f04:	ee fc ff f0 	ld.w	r12,r7[-16]
80029f08:	11 89       	ld.ub	r9,r8[0x0]
80029f0a:	12 9a       	mov	r10,r9
80029f0c:	11 a9       	ld.ub	r9,r8[0x2]
80029f0e:	a1 79       	lsl	r9,0x1
80029f10:	5c 59       	castu.b	r9
80029f12:	f5 e9 10 09 	or	r9,r10,r9
80029f16:	f5 d9 c0 08 	bfextu	r10,r9,0x0,0x8
80029f1a:	11 99       	ld.ub	r9,r8[0x1]
80029f1c:	a3 69       	lsl	r9,0x2
80029f1e:	5c 59       	castu.b	r9
80029f20:	f5 e9 10 09 	or	r9,r10,r9
80029f24:	5c 59       	castu.b	r9
80029f26:	5c 59       	castu.b	r9
80029f28:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
80029f2c:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80029f30:	f8 09 15 02 	lsl	r9,r12,0x2
80029f34:	ee 09 00 09 	add	r9,r7,r9
80029f38:	f2 fa ff f4 	ld.w	r10,r9[-12]
80029f3c:	f5 db d0 63 	bfins	r10,r11,0x3,0x3
80029f40:	f3 4a ff f4 	st.w	r9[-12],r10
  u_avr32_scif_pll.PLL[pll].plldiv   = opt.div;
80029f44:	ee fa ff f0 	ld.w	r10,r7[-16]
80029f48:	70 29       	ld.w	r9,r8[0x8]
80029f4a:	5c 59       	castu.b	r9
80029f4c:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80029f50:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80029f54:	f4 09 15 02 	lsl	r9,r10,0x2
80029f58:	ee 09 00 09 	add	r9,r7,r9
80029f5c:	f2 fa ff f4 	ld.w	r10,r9[-12]
80029f60:	f5 db d1 04 	bfins	r10,r11,0x8,0x4
80029f64:	f3 4a ff f4 	st.w	r9[-12],r10
  u_avr32_scif_pll.PLL[pll].pllmul  = opt.mul;
80029f68:	ee fa ff f0 	ld.w	r10,r7[-16]
80029f6c:	70 19       	ld.w	r9,r8[0x4]
80029f6e:	5c 59       	castu.b	r9
80029f70:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80029f74:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80029f78:	f4 09 15 02 	lsl	r9,r10,0x2
80029f7c:	ee 09 00 09 	add	r9,r7,r9
80029f80:	f2 fa ff f4 	ld.w	r10,r9[-12]
80029f84:	f5 db d2 04 	bfins	r10,r11,0x10,0x4
80029f88:	f3 4a ff f4 	st.w	r9[-12],r10
  u_avr32_scif_pll.PLL[pll].pllcount= opt.lockcount;
80029f8c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80029f90:	70 38       	ld.w	r8,r8[0xc]
80029f92:	5c 58       	castu.b	r8
80029f94:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80029f98:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80029f9c:	f2 08 15 02 	lsl	r8,r9,0x2
80029fa0:	ee 08 00 08 	add	r8,r7,r8
80029fa4:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80029fa8:	f3 da d3 06 	bfins	r9,r10,0x18,0x6
80029fac:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80029fb0:	e1 b8 00 00 	mfsr	r8,0x0
80029fb4:	10 9c       	mov	r12,r8
80029fb6:	fe b0 fc 5f 	rcall	80029874 <cpu_irq_is_enabled_flags>
80029fba:	18 98       	mov	r8,r12
80029fbc:	ef 68 ff ff 	st.b	r7[-1],r8
80029fc0:	d3 03       	ssrf	0x10
  // Unlock the write-protected PLL0 register
  SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll); 
80029fc2:	fe 78 08 00 	mov	r8,-63488
80029fc6:	ee f9 ff f0 	ld.w	r9,r7[-16]
80029fca:	2f 99       	sub	r9,-7
80029fcc:	a3 69       	lsl	r9,0x2
80029fce:	ea 19 aa 00 	orh	r9,0xaa00
80029fd2:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
80029fd4:	fe 79 08 00 	mov	r9,-63488
80029fd8:	ee fa ff f0 	ld.w	r10,r7[-16]
80029fdc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029fe0:	2f 9a       	sub	r10,-7
80029fe2:	a3 68       	lsl	r8,0x2
80029fe4:	ee 08 00 08 	add	r8,r7,r8
80029fe8:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80029fec:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80029ff0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029ff4:	30 08       	mov	r8,0
80029ff6:	f0 09 18 00 	cp.b	r9,r8
80029ffa:	c0 20       	breq	80029ffe <scif_pll_setup+0x14e>
80029ffc:	d5 03       	csrf	0x10

  return PASS;
80029ffe:	30 08       	mov	r8,0
}
8002a000:	10 9c       	mov	r12,r8
8002a002:	2f cd       	sub	sp,-16
8002a004:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a008:	80 02       	ld.sh	r2,r0[0x0]
8002a00a:	9d 3e       	st.w	lr[0xc],lr

8002a00c <scif_pll_enable>:

long int scif_pll_enable(scif_pll_t pll)
{
8002a00c:	eb cd 40 c0 	pushm	r6-r7,lr
8002a010:	1a 97       	mov	r7,sp
8002a012:	20 4d       	sub	sp,16
8002a014:	4a 56       	lddpc	r6,8002a0a8 <scif_pll_enable+0x9c>
8002a016:	1e 26       	rsub	r6,pc
8002a018:	ef 4c ff f0 	st.w	r7[-16],r12

  u_avr32_scif_pll_t   u_avr32_scif_pll;
  
    // Read Register
    u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
8002a01c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a020:	fe 79 08 00 	mov	r9,-63488
8002a024:	ee fa ff f0 	ld.w	r10,r7[-16]
8002a028:	a3 68       	lsl	r8,0x2
8002a02a:	ee 08 00 08 	add	r8,r7,r8
8002a02e:	2f 9a       	sub	r10,-7
8002a030:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8002a034:	f1 49 ff f4 	st.w	r8[-12],r9
    // Modify Configuration 
    u_avr32_scif_pll.PLL[pll].pllen = ENABLE;
8002a038:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a03c:	a3 68       	lsl	r8,0x2
8002a03e:	ee 08 00 08 	add	r8,r7,r8
8002a042:	f0 f9 ff f4 	ld.w	r9,r8[-12]
8002a046:	30 1a       	mov	r10,1
8002a048:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
8002a04c:	f1 49 ff f4 	st.w	r8[-12],r9
    AVR32_ENTER_CRITICAL_REGION( );
8002a050:	e1 b8 00 00 	mfsr	r8,0x0
8002a054:	10 9c       	mov	r12,r8
8002a056:	fe b0 fc 0f 	rcall	80029874 <cpu_irq_is_enabled_flags>
8002a05a:	18 98       	mov	r8,r12
8002a05c:	ef 68 ff ff 	st.b	r7[-1],r8
8002a060:	d3 03       	ssrf	0x10
    // Unlock the write-protected PLL0 register
    SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll); 
8002a062:	fe 78 08 00 	mov	r8,-63488
8002a066:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a06a:	2f 99       	sub	r9,-7
8002a06c:	a3 69       	lsl	r9,0x2
8002a06e:	ea 19 aa 00 	orh	r9,0xaa00
8002a072:	91 69       	st.w	r8[0x18],r9
    // Write Back
    AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
8002a074:	fe 79 08 00 	mov	r9,-63488
8002a078:	ee fa ff f0 	ld.w	r10,r7[-16]
8002a07c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a080:	2f 9a       	sub	r10,-7
8002a082:	a3 68       	lsl	r8,0x2
8002a084:	ee 08 00 08 	add	r8,r7,r8
8002a088:	f0 f8 ff f4 	ld.w	r8,r8[-12]
8002a08c:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
    AVR32_LEAVE_CRITICAL_REGION( );
8002a090:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a094:	30 08       	mov	r8,0
8002a096:	f0 09 18 00 	cp.b	r9,r8
8002a09a:	c0 20       	breq	8002a09e <scif_pll_enable+0x92>
8002a09c:	d5 03       	csrf	0x10
  
  return PASS;
8002a09e:	30 08       	mov	r8,0
}
8002a0a0:	10 9c       	mov	r12,r8
8002a0a2:	2f cd       	sub	sp,-16
8002a0a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a0a8:	80 02       	ld.sh	r2,r0[0x0]
8002a0aa:	9e 9a       	ld.uh	r10,pc[0x2]

8002a0ac <scif_pll_disable>:

long int scif_pll_disable(scif_pll_t pll)
{
8002a0ac:	eb cd 40 c0 	pushm	r6-r7,lr
8002a0b0:	1a 97       	mov	r7,sp
8002a0b2:	20 4d       	sub	sp,16
8002a0b4:	4a 56       	lddpc	r6,8002a148 <scif_pll_disable+0x9c>
8002a0b6:	1e 26       	rsub	r6,pc
8002a0b8:	ef 4c ff f0 	st.w	r7[-16],r12

  u_avr32_scif_pll_t   u_avr32_scif_pll;

  // Read Register
  u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
8002a0bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a0c0:	fe 79 08 00 	mov	r9,-63488
8002a0c4:	ee fa ff f0 	ld.w	r10,r7[-16]
8002a0c8:	a3 68       	lsl	r8,0x2
8002a0ca:	ee 08 00 08 	add	r8,r7,r8
8002a0ce:	2f 9a       	sub	r10,-7
8002a0d0:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8002a0d4:	f1 49 ff f4 	st.w	r8[-12],r9
  // Modify Configuration 
  u_avr32_scif_pll.PLL[pll].pllen = DISABLE;
8002a0d8:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a0dc:	a3 68       	lsl	r8,0x2
8002a0de:	ee 08 00 08 	add	r8,r7,r8
8002a0e2:	f0 f9 ff f4 	ld.w	r9,r8[-12]
8002a0e6:	30 0a       	mov	r10,0
8002a0e8:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
8002a0ec:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
8002a0f0:	e1 b8 00 00 	mfsr	r8,0x0
8002a0f4:	10 9c       	mov	r12,r8
8002a0f6:	fe b0 fb bf 	rcall	80029874 <cpu_irq_is_enabled_flags>
8002a0fa:	18 98       	mov	r8,r12
8002a0fc:	ef 68 ff ff 	st.b	r7[-1],r8
8002a100:	d3 03       	ssrf	0x10
  // Unlock the write-protected PLL0 register
  SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll); 
8002a102:	fe 78 08 00 	mov	r8,-63488
8002a106:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a10a:	2f 99       	sub	r9,-7
8002a10c:	a3 69       	lsl	r9,0x2
8002a10e:	ea 19 aa 00 	orh	r9,0xaa00
8002a112:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
8002a114:	fe 79 08 00 	mov	r9,-63488
8002a118:	ee fa ff f0 	ld.w	r10,r7[-16]
8002a11c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a120:	2f 9a       	sub	r10,-7
8002a122:	a3 68       	lsl	r8,0x2
8002a124:	ee 08 00 08 	add	r8,r7,r8
8002a128:	f0 f8 ff f4 	ld.w	r8,r8[-12]
8002a12c:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
8002a130:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a134:	30 08       	mov	r8,0
8002a136:	f0 09 18 00 	cp.b	r9,r8
8002a13a:	c0 20       	breq	8002a13e <scif_pll_disable+0x92>
8002a13c:	d5 03       	csrf	0x10

  return PASS;
8002a13e:	30 08       	mov	r8,0
}
8002a140:	10 9c       	mov	r12,r8
8002a142:	2f cd       	sub	sp,-16
8002a144:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a148:	80 02       	ld.sh	r2,r0[0x0]
8002a14a:	9f 3a       	st.w	pc[0xc],r10

8002a14c <scif_wait_for_pll_locked>:

long int scif_wait_for_pll_locked(scif_pll_t pll)
{
8002a14c:	eb cd 40 80 	pushm	r7,lr
8002a150:	1a 97       	mov	r7,sp
8002a152:	20 1d       	sub	sp,4
8002a154:	ef 4c ff fc 	st.w	r7[-4],r12
  
  if (pll == SCIF_PLL0)
8002a158:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a15c:	58 08       	cp.w	r8,0
8002a15e:	c0 81       	brne	8002a16e <scif_wait_for_pll_locked+0x22>
  { 
      // Wait until PLL0 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL0_LOCK_MASK));
8002a160:	fe 78 08 00 	mov	r8,-63488
8002a164:	70 58       	ld.w	r8,r8[0x14]
8002a166:	e2 18 00 10 	andl	r8,0x10,COH
8002a16a:	cf b0       	breq	8002a160 <scif_wait_for_pll_locked+0x14>
8002a16c:	c0 78       	rjmp	8002a17a <scif_wait_for_pll_locked+0x2e>
  }
  else
  {
      // Wait until PLL1 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL1_LOCK_MASK));
8002a16e:	fe 78 08 00 	mov	r8,-63488
8002a172:	70 58       	ld.w	r8,r8[0x14]
8002a174:	e2 18 00 20 	andl	r8,0x20,COH
8002a178:	cf b0       	breq	8002a16e <scif_wait_for_pll_locked+0x22>
  }
  
  return PASS;
8002a17a:	30 08       	mov	r8,0
}
8002a17c:	10 9c       	mov	r12,r8
8002a17e:	2f fd       	sub	sp,-4
8002a180:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a184 <scif_start_osc32>:
/**
 ** OSC32 Functions
 **/

long int scif_start_osc32(const scif_osc32_opt_t *opt, bool wait_for_ready)
{
8002a184:	eb cd 40 c0 	pushm	r6-r7,lr
8002a188:	1a 97       	mov	r7,sp
8002a18a:	20 4d       	sub	sp,16
8002a18c:	4a f6       	lddpc	r6,8002a248 <scif_start_osc32+0xc4>
8002a18e:	1e 26       	rsub	r6,pc
8002a190:	ef 4c ff f4 	st.w	r7[-12],r12
8002a194:	16 98       	mov	r8,r11
8002a196:	ef 68 ff f0 	st.b	r7[-16],r8
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // Read Register
  u_avr32_scif_oscctrl32.oscctrl32 = AVR32_SCIF.oscctrl32 ;  
8002a19a:	fe 78 08 00 	mov	r8,-63488
8002a19e:	71 38       	ld.w	r8,r8[0x4c]
8002a1a0:	ef 48 ff f8 	st.w	r7[-8],r8
  
  // Modify : Configure & start OSC32.
  u_avr32_scif_oscctrl32.OSCCTRL32.mode = opt->mode;
8002a1a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a1a8:	70 18       	ld.w	r8,r8[0x4]
8002a1aa:	5c 58       	castu.b	r8
8002a1ac:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8002a1b0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8002a1b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a1b8:	f1 d9 d1 02 	bfins	r8,r9,0x8,0x2
8002a1bc:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl32.OSCCTRL32.startup = opt->startup;
8002a1c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a1c4:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a1c8:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8002a1cc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8002a1d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a1d4:	f1 d9 d2 03 	bfins	r8,r9,0x10,0x3
8002a1d8:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl32.OSCCTRL32.osc32en = ENABLE;
8002a1dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a1e0:	30 19       	mov	r9,1
8002a1e2:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
8002a1e6:	ef 48 ff f8 	st.w	r7[-8],r8
  
  AVR32_ENTER_CRITICAL_REGION( );
8002a1ea:	e1 b8 00 00 	mfsr	r8,0x0
8002a1ee:	10 9c       	mov	r12,r8
8002a1f0:	fe b0 fb 42 	rcall	80029874 <cpu_irq_is_enabled_flags>
8002a1f4:	18 98       	mov	r8,r12
8002a1f6:	ef 68 ff ff 	st.b	r7[-1],r8
8002a1fa:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL32 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL32);
8002a1fc:	fe 78 08 00 	mov	r8,-63488
8002a200:	34 c9       	mov	r9,76
8002a202:	ea 19 aa 00 	orh	r9,0xaa00
8002a206:	91 69       	st.w	r8[0x18],r9
  
  // Write Back
  AVR32_SCIF.oscctrl32 = u_avr32_scif_oscctrl32.oscctrl32;
8002a208:	fe 78 08 00 	mov	r8,-63488
8002a20c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a210:	f1 49 00 4c 	st.w	r8[76],r9
  AVR32_LEAVE_CRITICAL_REGION( );
8002a214:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a218:	30 08       	mov	r8,0
8002a21a:	f0 09 18 00 	cp.b	r9,r8
8002a21e:	c0 20       	breq	8002a222 <scif_start_osc32+0x9e>
8002a220:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
8002a222:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002a226:	30 08       	mov	r8,0
8002a228:	f0 09 18 00 	cp.b	r9,r8
8002a22c:	c0 90       	breq	8002a23e <scif_start_osc32+0xba>
  {
    // Wait until OSC32 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC32RDY_MASK))
8002a22e:	30 4c       	mov	r12,4
8002a230:	fe b0 fb 32 	rcall	80029894 <scif_pclksr_statushigh_wait>
8002a234:	18 98       	mov	r8,r12
8002a236:	58 08       	cp.w	r8,0
8002a238:	c0 30       	breq	8002a23e <scif_start_osc32+0xba>
      return -1;
8002a23a:	3f f8       	mov	r8,-1
8002a23c:	c0 28       	rjmp	8002a240 <scif_start_osc32+0xbc>
  }
  
  return PASS;
8002a23e:	30 08       	mov	r8,0
}
8002a240:	10 9c       	mov	r12,r8
8002a242:	2f cd       	sub	sp,-16
8002a244:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a248:	80 02       	ld.sh	r2,r0[0x0]
8002a24a:	a0 12       	st.h	r0[0x2],r2

8002a24c <scif_stop_osc32>:


long scif_stop_osc32()
{
8002a24c:	eb cd 40 c0 	pushm	r6-r7,lr
8002a250:	1a 97       	mov	r7,sp
8002a252:	20 2d       	sub	sp,8
8002a254:	49 76       	lddpc	r6,8002a2b0 <scif_stop_osc32+0x64>
8002a256:	1e 26       	rsub	r6,pc
  unsigned long temp = AVR32_SCIF.oscctrl32;
8002a258:	fe 78 08 00 	mov	r8,-63488
8002a25c:	71 38       	ld.w	r8,r8[0x4c]
8002a25e:	ef 48 ff f8 	st.w	r7[-8],r8
  temp &= ~AVR32_SCIF_OSCCTRL32_OSC32EN_MASK;
8002a262:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a266:	a1 c8       	cbr	r8,0x0
8002a268:	ef 48 ff f8 	st.w	r7[-8],r8

  AVR32_ENTER_CRITICAL_REGION( );
8002a26c:	e1 b8 00 00 	mfsr	r8,0x0
8002a270:	10 9c       	mov	r12,r8
8002a272:	fe b0 fb 01 	rcall	80029874 <cpu_irq_is_enabled_flags>
8002a276:	18 98       	mov	r8,r12
8002a278:	ef 68 ff ff 	st.b	r7[-1],r8
8002a27c:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL32 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL32);
8002a27e:	fe 78 08 00 	mov	r8,-63488
8002a282:	34 c9       	mov	r9,76
8002a284:	ea 19 aa 00 	orh	r9,0xaa00
8002a288:	91 69       	st.w	r8[0x18],r9
  
  // Stop OSC32.
  AVR32_SCIF.oscctrl32 = temp;
8002a28a:	fe 78 08 00 	mov	r8,-63488
8002a28e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a292:	f1 49 00 4c 	st.w	r8[76],r9
  AVR32_LEAVE_CRITICAL_REGION( );
8002a296:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a29a:	30 08       	mov	r8,0
8002a29c:	f0 09 18 00 	cp.b	r9,r8
8002a2a0:	c0 20       	breq	8002a2a4 <scif_stop_osc32+0x58>
8002a2a2:	d5 03       	csrf	0x10

  return PASS;
8002a2a4:	30 08       	mov	r8,0
}
8002a2a6:	10 9c       	mov	r12,r8
8002a2a8:	2f ed       	sub	sp,-8
8002a2aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a2ae:	00 00       	add	r0,r0
8002a2b0:	80 02       	ld.sh	r2,r0[0x0]
8002a2b2:	a0 da       	st.b	r0[0x5],r10

8002a2b4 <scif_start_rc8M>:
/**
 ** 8MHz RCosc Functions
 **/

void scif_start_rc8M(void)
{
8002a2b4:	eb cd 40 c0 	pushm	r6-r7,lr
8002a2b8:	1a 97       	mov	r7,sp
8002a2ba:	20 2d       	sub	sp,8
8002a2bc:	49 66       	lddpc	r6,8002a314 <scif_start_rc8M+0x60>
8002a2be:	1e 26       	rsub	r6,pc
  unsigned int* calibration_bits = (unsigned int*)0x80800200;
8002a2c0:	e0 68 02 00 	mov	r8,512
8002a2c4:	ea 18 80 80 	orh	r8,0x8080
8002a2c8:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
8002a2cc:	e1 b8 00 00 	mfsr	r8,0x0
8002a2d0:	10 9c       	mov	r12,r8
8002a2d2:	fe b0 fa d1 	rcall	80029874 <cpu_irq_is_enabled_flags>
8002a2d6:	18 98       	mov	r8,r12
8002a2d8:	ef 68 ff ff 	st.b	r7[-1],r8
8002a2dc:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC8MCR register
  SCIF_UNLOCK(AVR32_SCIF_RCCR8);
8002a2de:	fe 78 08 00 	mov	r8,-63488
8002a2e2:	34 89       	mov	r9,72
8002a2e4:	ea 19 aa 00 	orh	r9,0xaa00
8002a2e8:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.rccr8 = AVR32_SCIF_RCCR8_RCOSC8_EN_MASK | ((*calibration_bits)&AVR32_SCIF_RCCR8_CALIB_MASK);
8002a2ea:	fe 78 08 00 	mov	r8,-63488
8002a2ee:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a2f2:	72 09       	ld.w	r9,r9[0x0]
8002a2f4:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
8002a2f8:	b9 a9       	sbr	r9,0x18
8002a2fa:	f1 49 00 48 	st.w	r8[72],r9
  AVR32_LEAVE_CRITICAL_REGION( );
8002a2fe:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a302:	30 08       	mov	r8,0
8002a304:	f0 09 18 00 	cp.b	r9,r8
8002a308:	c0 20       	breq	8002a30c <scif_start_rc8M+0x58>
8002a30a:	d5 03       	csrf	0x10
}
8002a30c:	2f ed       	sub	sp,-8
8002a30e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a312:	00 00       	add	r0,r0
8002a314:	80 02       	ld.sh	r2,r0[0x0]
8002a316:	a1 42       	asr	r2,0x0

8002a318 <scif_stop_rc8M>:

void scif_stop_rc8M(void)
{
8002a318:	eb cd 40 c0 	pushm	r6-r7,lr
8002a31c:	1a 97       	mov	r7,sp
8002a31e:	20 2d       	sub	sp,8
8002a320:	49 66       	lddpc	r6,8002a378 <scif_stop_rc8M+0x60>
8002a322:	1e 26       	rsub	r6,pc
  unsigned long temp = AVR32_SCIF.rccr8;
8002a324:	fe 78 08 00 	mov	r8,-63488
8002a328:	71 28       	ld.w	r8,r8[0x48]
8002a32a:	ef 48 ff f8 	st.w	r7[-8],r8
  
  AVR32_ENTER_CRITICAL_REGION( );
8002a32e:	e1 b8 00 00 	mfsr	r8,0x0
8002a332:	10 9c       	mov	r12,r8
8002a334:	fe b0 fa a0 	rcall	80029874 <cpu_irq_is_enabled_flags>
8002a338:	18 98       	mov	r8,r12
8002a33a:	ef 68 ff ff 	st.b	r7[-1],r8
8002a33e:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC8MCR register
  SCIF_UNLOCK(AVR32_SCIF_RCCR8);
8002a340:	fe 78 08 00 	mov	r8,-63488
8002a344:	34 89       	mov	r9,72
8002a346:	ea 19 aa 00 	orh	r9,0xaa00
8002a34a:	91 69       	st.w	r8[0x18],r9
  temp &= ~AVR32_SCIF_RCCR8_RCOSC8_EN_MASK;
8002a34c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a350:	b9 c8       	cbr	r8,0x18
8002a352:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_SCIF.rccr8 = temp;
8002a356:	fe 78 08 00 	mov	r8,-63488
8002a35a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a35e:	f1 49 00 48 	st.w	r8[72],r9
  AVR32_LEAVE_CRITICAL_REGION( );
8002a362:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a366:	30 08       	mov	r8,0
8002a368:	f0 09 18 00 	cp.b	r9,r8
8002a36c:	c0 20       	breq	8002a370 <scif_stop_rc8M+0x58>
8002a36e:	d5 03       	csrf	0x10
}
8002a370:	2f ed       	sub	sp,-8
8002a372:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a376:	00 00       	add	r0,r0
8002a378:	80 02       	ld.sh	r2,r0[0x0]
8002a37a:	a1 a6       	sbr	r6,0x0

8002a37c <scif_start_rc120M>:
/**
 ** 120MHz RCosc Functions
 **/

void scif_start_rc120M(void)
{
8002a37c:	eb cd 40 c0 	pushm	r6-r7,lr
8002a380:	1a 97       	mov	r7,sp
8002a382:	20 1d       	sub	sp,4
8002a384:	49 06       	lddpc	r6,8002a3c4 <scif_start_rc120M+0x48>
8002a386:	1e 26       	rsub	r6,pc
  AVR32_ENTER_CRITICAL_REGION( );
8002a388:	e1 b8 00 00 	mfsr	r8,0x0
8002a38c:	10 9c       	mov	r12,r8
8002a38e:	fe b0 fa 73 	rcall	80029874 <cpu_irq_is_enabled_flags>
8002a392:	18 98       	mov	r8,r12
8002a394:	ef 68 ff ff 	st.b	r7[-1],r8
8002a398:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC120MCR register
  SCIF_UNLOCK(AVR32_SCIF_RC120MCR);
8002a39a:	fe 78 08 00 	mov	r8,-63488
8002a39e:	35 89       	mov	r9,88
8002a3a0:	ea 19 aa 00 	orh	r9,0xaa00
8002a3a4:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.rc120mcr = AVR32_SCIF_RC120MCR_EN_MASK;
8002a3a6:	fe 78 08 00 	mov	r8,-63488
8002a3aa:	30 19       	mov	r9,1
8002a3ac:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_LEAVE_CRITICAL_REGION( );
8002a3b0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a3b4:	30 08       	mov	r8,0
8002a3b6:	f0 09 18 00 	cp.b	r9,r8
8002a3ba:	c0 20       	breq	8002a3be <scif_start_rc120M+0x42>
8002a3bc:	d5 03       	csrf	0x10
}
8002a3be:	2f fd       	sub	sp,-4
8002a3c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a3c4:	80 02       	ld.sh	r2,r0[0x0]
8002a3c6:	a2 0a       	st.h	r1[0x0],r10

8002a3c8 <scif_stop_rc120M>:

void scif_stop_rc120M(void)
{
8002a3c8:	eb cd 40 c0 	pushm	r6-r7,lr
8002a3cc:	1a 97       	mov	r7,sp
8002a3ce:	20 2d       	sub	sp,8
8002a3d0:	49 66       	lddpc	r6,8002a428 <scif_stop_rc120M+0x60>
8002a3d2:	1e 26       	rsub	r6,pc
  unsigned long temp = AVR32_SCIF.rc120mcr;
8002a3d4:	fe 78 08 00 	mov	r8,-63488
8002a3d8:	71 68       	ld.w	r8,r8[0x58]
8002a3da:	ef 48 ff f8 	st.w	r7[-8],r8

  AVR32_ENTER_CRITICAL_REGION( );
8002a3de:	e1 b8 00 00 	mfsr	r8,0x0
8002a3e2:	10 9c       	mov	r12,r8
8002a3e4:	fe b0 fa 48 	rcall	80029874 <cpu_irq_is_enabled_flags>
8002a3e8:	18 98       	mov	r8,r12
8002a3ea:	ef 68 ff ff 	st.b	r7[-1],r8
8002a3ee:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC120MCR register
  SCIF_UNLOCK(AVR32_SCIF_RC120MCR);
8002a3f0:	fe 78 08 00 	mov	r8,-63488
8002a3f4:	35 89       	mov	r9,88
8002a3f6:	ea 19 aa 00 	orh	r9,0xaa00
8002a3fa:	91 69       	st.w	r8[0x18],r9
  temp &= ~AVR32_SCIF_RC120MCR_EN_MASK;
8002a3fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a400:	a1 c8       	cbr	r8,0x0
8002a402:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_SCIF.rc120mcr = temp;
8002a406:	fe 78 08 00 	mov	r8,-63488
8002a40a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a40e:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_LEAVE_CRITICAL_REGION( );
8002a412:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a416:	30 08       	mov	r8,0
8002a418:	f0 09 18 00 	cp.b	r9,r8
8002a41c:	c0 20       	breq	8002a420 <scif_stop_rc120M+0x58>
8002a41e:	d5 03       	csrf	0x10
}
8002a420:	2f ed       	sub	sp,-8
8002a422:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a426:	00 00       	add	r0,r0
8002a428:	80 02       	ld.sh	r2,r0[0x0]
8002a42a:	a2 56       	st.h	r1[0xa],r6

8002a42c <scif_start_gclk>:
/**
 ** Generic Clock Functions
 **/

long int scif_start_gclk(unsigned int gclk, const scif_gclk_opt_t *opt)
{
8002a42c:	eb cd 40 80 	pushm	r7,lr
8002a430:	1a 97       	mov	r7,sp
8002a432:	20 2d       	sub	sp,8
8002a434:	ef 4c ff fc 	st.w	r7[-4],r12
8002a438:	ef 4b ff f8 	st.w	r7[-8],r11
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
8002a43c:	fe 78 08 00 	mov	r8,-63488
8002a440:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a444:	2e 79       	sub	r9,-25
8002a446:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8002a44a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002a44e:	5c 58       	castu.b	r8
8002a450:	c0 30       	breq	8002a456 <scif_start_gclk+0x2a>
    return -1;
8002a452:	3f f8       	mov	r8,-1
8002a454:	c2 08       	rjmp	8002a494 <scif_start_gclk+0x68>

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
8002a456:	fe 78 08 00 	mov	r8,-63488
8002a45a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a45e:	ee fa ff f8 	ld.w	r10,r7[-8]
8002a462:	74 1a       	ld.w	r10,r10[0x4]
8002a464:	b1 6a       	lsl	r10,0x10
8002a466:	14 9b       	mov	r11,r10
8002a468:	e6 1b 00 ff 	andh	r11,0xff,COH
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
8002a46c:	ee fa ff f8 	ld.w	r10,r7[-8]
8002a470:	74 2a       	ld.w	r10,r10[0x8]
8002a472:	a1 7a       	lsl	r10,0x1
8002a474:	e2 1a 00 02 	andl	r10,0x2,COH
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
8002a478:	14 4b       	or	r11,r10
8002a47a:	ee fa ff f8 	ld.w	r10,r7[-8]
8002a47e:	74 0a       	ld.w	r10,r10[0x0]
8002a480:	a9 6a       	lsl	r10,0x8
8002a482:	e2 1a 0f 00 	andl	r10,0xf00,COH
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);
8002a486:	f7 ea 10 0a 	or	r10,r11,r10
  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
    return -1;

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
8002a48a:	a1 aa       	sbr	r10,0x0
8002a48c:	2e 79       	sub	r9,-25
8002a48e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);

  return PASS;
8002a492:	30 08       	mov	r8,0
}
8002a494:	10 9c       	mov	r12,r8
8002a496:	2f ed       	sub	sp,-8
8002a498:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a49c <scif_stop_gclk>:


long int scif_stop_gclk(unsigned int gclk)
{
8002a49c:	eb cd 40 80 	pushm	r7,lr
8002a4a0:	1a 97       	mov	r7,sp
8002a4a2:	20 2d       	sub	sp,8
8002a4a4:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
8002a4a8:	e0 78 86 a0 	mov	r8,100000
8002a4ac:	ef 48 ff fc 	st.w	r7[-4],r8
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;
8002a4b0:	fe 78 08 00 	mov	r8,-63488
8002a4b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a4b8:	fe 7a 08 00 	mov	r10,-63488
8002a4bc:	ee fb ff f8 	ld.w	r11,r7[-8]
8002a4c0:	2e 7b       	sub	r11,-25
8002a4c2:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
8002a4c6:	a1 ca       	cbr	r10,0x0
8002a4c8:	2e 79       	sub	r9,-25
8002a4ca:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  
  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
8002a4ce:	c0 c8       	rjmp	8002a4e6 <scif_stop_gclk+0x4a>
  {
    if(--timeout == 0)
8002a4d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a4d4:	20 18       	sub	r8,1
8002a4d6:	ef 48 ff fc 	st.w	r7[-4],r8
8002a4da:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a4de:	58 08       	cp.w	r8,0
8002a4e0:	c0 31       	brne	8002a4e6 <scif_stop_gclk+0x4a>
      return -1;
8002a4e2:	3f f8       	mov	r8,-1
8002a4e4:	c0 d8       	rjmp	8002a4fe <scif_stop_gclk+0x62>

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;
  
  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
8002a4e6:	fe 78 08 00 	mov	r8,-63488
8002a4ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a4ee:	2e 79       	sub	r9,-25
8002a4f0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8002a4f4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002a4f8:	5c 58       	castu.b	r8
8002a4fa:	ce b1       	brne	8002a4d0 <scif_stop_gclk+0x34>
  {
    if(--timeout == 0)
      return -1;
  }
  
  return PASS;
8002a4fc:	30 08       	mov	r8,0
}
8002a4fe:	10 9c       	mov	r12,r8
8002a500:	2f ed       	sub	sp,-8
8002a502:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a506 <scif_gc_setup>:


long int scif_gc_setup(unsigned int gclk, scif_gcctrl_oscsel_t clk_src, unsigned int diven, unsigned int divfactor)
{
8002a506:	eb cd 40 c0 	pushm	r6-r7,lr
8002a50a:	1a 97       	mov	r7,sp
8002a50c:	20 5d       	sub	sp,20
8002a50e:	4a f6       	lddpc	r6,8002a5c8 <scif_gc_setup+0xc2>
8002a510:	1e 26       	rsub	r6,pc
8002a512:	ef 4c ff f8 	st.w	r7[-8],r12
8002a516:	ef 4b ff f4 	st.w	r7[-12],r11
8002a51a:	ef 4a ff f0 	st.w	r7[-16],r10
8002a51e:	ef 49 ff ec 	st.w	r7[-20],r9
  int restart_gc = false;
8002a522:	30 08       	mov	r8,0
8002a524:	ef 48 ff fc 	st.w	r7[-4],r8
  
  
  // Change the division factor to conform to the equation: fgclk = fsrc/divfactor = fsrc/(2*(div+1))
  divfactor = (divfactor>>1) -1;
8002a528:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002a52c:	a1 98       	lsr	r8,0x1
8002a52e:	20 18       	sub	r8,1
8002a530:	ef 48 ff ec 	st.w	r7[-20],r8
      return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, disable it before changing its setup.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
8002a534:	fe 78 08 00 	mov	r8,-63488
8002a538:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a53c:	2e 79       	sub	r9,-25
8002a53e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8002a542:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002a546:	5c 58       	castu.b	r8
8002a548:	c0 d0       	breq	8002a562 <scif_gc_setup+0x5c>
  {
    restart_gc = true;
8002a54a:	30 18       	mov	r8,1
8002a54c:	ef 48 ff fc 	st.w	r7[-4],r8
    if(scif_stop_gclk(gclk) < 0)
8002a550:	ee fc ff f8 	ld.w	r12,r7[-8]
8002a554:	f0 16 02 24 	mcall	r6[2192]
8002a558:	18 98       	mov	r8,r12
8002a55a:	58 08       	cp.w	r8,0
8002a55c:	c0 34       	brge	8002a562 <scif_gc_setup+0x5c>
      return -1;  // Could not stop the generic clock.
8002a55e:	3f f8       	mov	r8,-1
8002a560:	c2 f8       	rjmp	8002a5be <scif_gc_setup+0xb8>
  }

  // Setup the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((divfactor << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
8002a562:	fe 78 08 00 	mov	r8,-63488
8002a566:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a56a:	ee fa ff ec 	ld.w	r10,r7[-20]
8002a56e:	b1 6a       	lsl	r10,0x10
8002a570:	14 9b       	mov	r11,r10
8002a572:	e6 1b 00 ff 	andh	r11,0xff,COH
                            |((diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
8002a576:	ee fa ff f0 	ld.w	r10,r7[-16]
8002a57a:	a1 7a       	lsl	r10,0x1
8002a57c:	e2 1a 00 02 	andl	r10,0x2,COH
                            |((clk_src << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK);
8002a580:	14 4b       	or	r11,r10
8002a582:	ee fa ff f4 	ld.w	r10,r7[-12]
8002a586:	a9 6a       	lsl	r10,0x8
8002a588:	e2 1a 0f 00 	andl	r10,0xf00,COH
    if(scif_stop_gclk(gclk) < 0)
      return -1;  // Could not stop the generic clock.
  }

  // Setup the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((divfactor << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
8002a58c:	f7 ea 10 0a 	or	r10,r11,r10
8002a590:	2e 79       	sub	r9,-25
8002a592:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                            |((diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((clk_src << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK);
                            
  // Restart the gc if it previously was enabled.
  if(true == restart_gc)
8002a596:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a59a:	58 18       	cp.w	r8,1
8002a59c:	c1 01       	brne	8002a5bc <scif_gc_setup+0xb6>
    AVR32_SCIF.gcctrl[gclk] |= AVR32_SCIF_GCCTRL_CEN_MASK ;
8002a59e:	fe 78 08 00 	mov	r8,-63488
8002a5a2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a5a6:	fe 7a 08 00 	mov	r10,-63488
8002a5aa:	ee fb ff f8 	ld.w	r11,r7[-8]
8002a5ae:	2e 7b       	sub	r11,-25
8002a5b0:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
8002a5b4:	a1 aa       	sbr	r10,0x0
8002a5b6:	2e 79       	sub	r9,-25
8002a5b8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

  return PASS;
8002a5bc:	30 08       	mov	r8,0
}
8002a5be:	10 9c       	mov	r12,r8
8002a5c0:	2f bd       	sub	sp,-20
8002a5c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a5c6:	00 00       	add	r0,r0
8002a5c8:	80 02       	ld.sh	r2,r0[0x0]
8002a5ca:	a3 94       	lsr	r4,0x3

8002a5cc <scif_gc_enable>:


long int scif_gc_enable(unsigned int gclk)
{
8002a5cc:	eb cd 40 80 	pushm	r7,lr
8002a5d0:	1a 97       	mov	r7,sp
8002a5d2:	20 1d       	sub	sp,4
8002a5d4:	ef 4c ff fc 	st.w	r7[-4],r12
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, do nothing.
  if(!(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK))
8002a5d8:	fe 78 08 00 	mov	r8,-63488
8002a5dc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a5e0:	2e 79       	sub	r9,-25
8002a5e2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8002a5e6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002a5ea:	c1 01       	brne	8002a60a <scif_gc_enable+0x3e>
    AVR32_SCIF.gcctrl[gclk] |= AVR32_SCIF_GCCTRL_CEN_MASK;
8002a5ec:	fe 78 08 00 	mov	r8,-63488
8002a5f0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a5f4:	fe 7a 08 00 	mov	r10,-63488
8002a5f8:	ee fb ff fc 	ld.w	r11,r7[-4]
8002a5fc:	2e 7b       	sub	r11,-25
8002a5fe:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
8002a602:	a1 aa       	sbr	r10,0x0
8002a604:	2e 79       	sub	r9,-25
8002a606:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
    
  return PASS;
8002a60a:	30 08       	mov	r8,0

}
8002a60c:	10 9c       	mov	r12,r8
8002a60e:	2f fd       	sub	sp,-4
8002a610:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a614 <scif_bod18_enable_irq>:

void scif_bod18_enable_irq(void)
{
8002a614:	eb cd 40 80 	pushm	r7,lr
8002a618:	1a 97       	mov	r7,sp
  AVR32_SCIF.ier = AVR32_SCIF_IER_BODDET_MASK ;
8002a61a:	fe 78 08 00 	mov	r8,-63488
8002a61e:	34 09       	mov	r9,64
8002a620:	91 09       	st.w	r8[0x0],r9
}
8002a622:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a626 <scif_bod18_disable_irq>:

void scif_bod18_disable_irq(void)
{
8002a626:	eb cd 40 c0 	pushm	r6-r7,lr
8002a62a:	1a 97       	mov	r7,sp
8002a62c:	20 1d       	sub	sp,4
8002a62e:	49 26       	lddpc	r6,8002a674 <scif_bod18_disable_irq+0x4e>
8002a630:	1e 26       	rsub	r6,pc
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
8002a632:	e1 b8 00 00 	mfsr	r8,0x0
8002a636:	10 9c       	mov	r12,r8
8002a638:	fe b0 f9 1e 	rcall	80029874 <cpu_irq_is_enabled_flags>
8002a63c:	18 98       	mov	r8,r12
8002a63e:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) Disable_global_interrupt();
8002a642:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a646:	30 08       	mov	r8,0
8002a648:	f0 09 18 00 	cp.b	r9,r8
8002a64c:	c0 20       	breq	8002a650 <scif_bod18_disable_irq+0x2a>
8002a64e:	d3 03       	ssrf	0x10
  AVR32_SCIF.idr = AVR32_SCIF_IDR_BODDET_MASK;
8002a650:	fe 78 08 00 	mov	r8,-63488
8002a654:	34 09       	mov	r9,64
8002a656:	91 19       	st.w	r8[0x4],r9
  AVR32_SCIF.isr;
8002a658:	fe 78 08 00 	mov	r8,-63488
8002a65c:	70 38       	ld.w	r8,r8[0xc]
  if (global_interrupt_enabled) Enable_global_interrupt();
8002a65e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a662:	30 08       	mov	r8,0
8002a664:	f0 09 18 00 	cp.b	r9,r8
8002a668:	c0 20       	breq	8002a66c <scif_bod18_disable_irq+0x46>
8002a66a:	d5 03       	csrf	0x10
}
8002a66c:	2f fd       	sub	sp,-4
8002a66e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a672:	00 00       	add	r0,r0
8002a674:	80 02       	ld.sh	r2,r0[0x0]
8002a676:	a4 b4       	st.b	r2[0x3],r4

8002a678 <scif_bod18_clear_irq>:

void scif_bod18_clear_irq(void)
{
8002a678:	eb cd 40 80 	pushm	r7,lr
8002a67c:	1a 97       	mov	r7,sp
  AVR32_SCIF.icr = AVR32_SCIF_ICR_BODDET_MASK;
8002a67e:	fe 78 08 00 	mov	r8,-63488
8002a682:	34 09       	mov	r9,64
8002a684:	91 49       	st.w	r8[0x10],r9
}
8002a686:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a68a <scif_bod18_get_irq_status>:

unsigned long scif_bod18_get_irq_status(void)
{
8002a68a:	eb cd 40 80 	pushm	r7,lr
8002a68e:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.isr & AVR32_SCIF_ISR_BODDET_MASK) != 0);
8002a690:	fe 78 08 00 	mov	r8,-63488
8002a694:	70 38       	ld.w	r8,r8[0xc]
8002a696:	e2 18 00 40 	andl	r8,0x40,COH
8002a69a:	5f 18       	srne	r8
}
8002a69c:	10 9c       	mov	r12,r8
8002a69e:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a6a2 <scif_bod18_get_irq_enable_bit>:

unsigned long scif_bod18_get_irq_enable_bit(void)
{
8002a6a2:	eb cd 40 80 	pushm	r7,lr
8002a6a6:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.imr & AVR32_SCIF_IMR_BODDET_MASK) != 0);
8002a6a8:	fe 78 08 00 	mov	r8,-63488
8002a6ac:	70 28       	ld.w	r8,r8[0x8]
8002a6ae:	e2 18 00 40 	andl	r8,0x40,COH
8002a6b2:	5f 18       	srne	r8
}
8002a6b4:	10 9c       	mov	r12,r8
8002a6b6:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a6ba <scif_bod18_get_level>:

unsigned long scif_bod18_get_level(void)
{
8002a6ba:	eb cd 40 80 	pushm	r7,lr
8002a6be:	1a 97       	mov	r7,sp
  return (AVR32_SCIF.bod & AVR32_SCIF_BOD_LEVEL_MASK) >> AVR32_SCIF_BOD_LEVEL_OFFSET;
8002a6c0:	fe 78 08 00 	mov	r8,-63488
8002a6c4:	70 b8       	ld.w	r8,r8[0x2c]
8002a6c6:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
}
8002a6ca:	10 9c       	mov	r12,r8
8002a6cc:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a6d0 <scif_bod33_enable_irq>:

void scif_bod33_enable_irq(void)
{
8002a6d0:	eb cd 40 80 	pushm	r7,lr
8002a6d4:	1a 97       	mov	r7,sp
  AVR32_SCIF.ier = AVR32_SCIF_IER_BOD33DET_MASK ;
8002a6d6:	fe 78 08 00 	mov	r8,-63488
8002a6da:	e0 69 00 80 	mov	r9,128
8002a6de:	91 09       	st.w	r8[0x0],r9
}
8002a6e0:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a6e4 <scif_bod33_disable_irq>:

void scif_bod33_disable_irq(void)
{
8002a6e4:	eb cd 40 c0 	pushm	r6-r7,lr
8002a6e8:	1a 97       	mov	r7,sp
8002a6ea:	20 1d       	sub	sp,4
8002a6ec:	49 26       	lddpc	r6,8002a734 <scif_bod33_disable_irq+0x50>
8002a6ee:	1e 26       	rsub	r6,pc
   bool global_interrupt_enabled = Is_global_interrupt_enabled();
8002a6f0:	e1 b8 00 00 	mfsr	r8,0x0
8002a6f4:	10 9c       	mov	r12,r8
8002a6f6:	fe b0 f8 bf 	rcall	80029874 <cpu_irq_is_enabled_flags>
8002a6fa:	18 98       	mov	r8,r12
8002a6fc:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) Disable_global_interrupt();
8002a700:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a704:	30 08       	mov	r8,0
8002a706:	f0 09 18 00 	cp.b	r9,r8
8002a70a:	c0 20       	breq	8002a70e <scif_bod33_disable_irq+0x2a>
8002a70c:	d3 03       	ssrf	0x10
  AVR32_SCIF.idr = AVR32_SCIF_IDR_BOD33DET_MASK;
8002a70e:	fe 78 08 00 	mov	r8,-63488
8002a712:	e0 69 00 80 	mov	r9,128
8002a716:	91 19       	st.w	r8[0x4],r9
  AVR32_SCIF.isr;
8002a718:	fe 78 08 00 	mov	r8,-63488
8002a71c:	70 38       	ld.w	r8,r8[0xc]
  if (global_interrupt_enabled) Enable_global_interrupt();
8002a71e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a722:	30 08       	mov	r8,0
8002a724:	f0 09 18 00 	cp.b	r9,r8
8002a728:	c0 20       	breq	8002a72c <scif_bod33_disable_irq+0x48>
8002a72a:	d5 03       	csrf	0x10
}
8002a72c:	2f fd       	sub	sp,-4
8002a72e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a732:	00 00       	add	r0,r0
8002a734:	80 02       	ld.sh	r2,r0[0x0]
8002a736:	a5 72       	lsl	r2,0x5

8002a738 <scif_bod33_clear_irq>:
 
void scif_bod33_clear_irq(void)
{
8002a738:	eb cd 40 80 	pushm	r7,lr
8002a73c:	1a 97       	mov	r7,sp
  AVR32_SCIF.icr = AVR32_SCIF_ICR_BOD33DET_MASK;
8002a73e:	fe 78 08 00 	mov	r8,-63488
8002a742:	e0 69 00 80 	mov	r9,128
8002a746:	91 49       	st.w	r8[0x10],r9
}
8002a748:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a74c <scif_bod33_get_irq_status>:
 
unsigned long scif_bod33_get_irq_status(void)
{
8002a74c:	eb cd 40 80 	pushm	r7,lr
8002a750:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.isr & AVR32_SCIF_ISR_BOD33DET_MASK) != 0);
8002a752:	fe 78 08 00 	mov	r8,-63488
8002a756:	70 38       	ld.w	r8,r8[0xc]
8002a758:	e2 18 00 80 	andl	r8,0x80,COH
8002a75c:	5f 18       	srne	r8
}
8002a75e:	10 9c       	mov	r12,r8
8002a760:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a764 <scif_bod33_get_irq_enable_bit>:
 
unsigned long scif_bod33_get_irq_enable_bit(void)
{
8002a764:	eb cd 40 80 	pushm	r7,lr
8002a768:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.imr & AVR32_SCIF_IMR_BOD33DET_MASK) != 0);
8002a76a:	fe 78 08 00 	mov	r8,-63488
8002a76e:	70 28       	ld.w	r8,r8[0x8]
8002a770:	e2 18 00 80 	andl	r8,0x80,COH
8002a774:	5f 18       	srne	r8
}
8002a776:	10 9c       	mov	r12,r8
8002a778:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a77c <scif_bod33_get_level>:
 
unsigned long scif_bod33_get_level(void)
{
8002a77c:	eb cd 40 80 	pushm	r7,lr
8002a780:	1a 97       	mov	r7,sp
  return (AVR32_SCIF.bod33 & AVR32_SCIF_BOD33_LEVEL_MASK) >> AVR32_SCIF_BOD33_LEVEL_OFFSET;
8002a782:	fe 78 08 00 	mov	r8,-63488
8002a786:	70 d8       	ld.w	r8,r8[0x34]
8002a788:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
}
8002a78c:	10 9c       	mov	r12,r8
8002a78e:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a792 <scif_bod50_enable_irq>:

void scif_bod50_enable_irq(void)
{
8002a792:	eb cd 40 80 	pushm	r7,lr
8002a796:	1a 97       	mov	r7,sp
  AVR32_SCIF.ier = AVR32_SCIF_IER_BOD50DET_MASK ;
8002a798:	fe 78 08 00 	mov	r8,-63488
8002a79c:	e0 69 01 00 	mov	r9,256
8002a7a0:	91 09       	st.w	r8[0x0],r9
}
8002a7a2:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a7a6 <scif_bod50_disable_irq>:

void scif_bod50_disable_irq(void)
{
8002a7a6:	eb cd 40 c0 	pushm	r6-r7,lr
8002a7aa:	1a 97       	mov	r7,sp
8002a7ac:	20 1d       	sub	sp,4
8002a7ae:	49 26       	lddpc	r6,8002a7f4 <scif_bod50_disable_irq+0x4e>
8002a7b0:	1e 26       	rsub	r6,pc
   bool global_interrupt_enabled = Is_global_interrupt_enabled();
8002a7b2:	e1 b8 00 00 	mfsr	r8,0x0
8002a7b6:	10 9c       	mov	r12,r8
8002a7b8:	fe b0 f8 5e 	rcall	80029874 <cpu_irq_is_enabled_flags>
8002a7bc:	18 98       	mov	r8,r12
8002a7be:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) Disable_global_interrupt();
8002a7c2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a7c6:	30 08       	mov	r8,0
8002a7c8:	f0 09 18 00 	cp.b	r9,r8
8002a7cc:	c0 20       	breq	8002a7d0 <scif_bod50_disable_irq+0x2a>
8002a7ce:	d3 03       	ssrf	0x10
  AVR32_SCIF.idr = AVR32_SCIF_IDR_BOD50DET_MASK;
8002a7d0:	fe 78 08 00 	mov	r8,-63488
8002a7d4:	e0 69 01 00 	mov	r9,256
8002a7d8:	91 19       	st.w	r8[0x4],r9
  AVR32_SCIF.isr;
8002a7da:	fe 78 08 00 	mov	r8,-63488
8002a7de:	70 38       	ld.w	r8,r8[0xc]
  if (global_interrupt_enabled) Enable_global_interrupt();
8002a7e0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a7e4:	30 08       	mov	r8,0
8002a7e6:	f0 09 18 00 	cp.b	r9,r8
8002a7ea:	c0 20       	breq	8002a7ee <scif_bod50_disable_irq+0x48>
8002a7ec:	d5 03       	csrf	0x10
}
8002a7ee:	2f fd       	sub	sp,-4
8002a7f0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a7f4:	80 02       	ld.sh	r2,r0[0x0]
8002a7f6:	a6 34       	st.h	r3[0x6],r4

8002a7f8 <scif_bod50_clear_irq>:
 
void scif_bod50_clear_irq(void)
{
8002a7f8:	eb cd 40 80 	pushm	r7,lr
8002a7fc:	1a 97       	mov	r7,sp
  AVR32_SCIF.icr = AVR32_SCIF_ICR_BOD50DET_MASK;
8002a7fe:	fe 78 08 00 	mov	r8,-63488
8002a802:	e0 69 01 00 	mov	r9,256
8002a806:	91 49       	st.w	r8[0x10],r9
}
8002a808:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a80c <scif_bod50_get_irq_status>:
 
unsigned long scif_bod50_get_irq_status(void)
{
8002a80c:	eb cd 40 80 	pushm	r7,lr
8002a810:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.isr & AVR32_SCIF_ISR_BOD50DET_MASK) != 0);
8002a812:	fe 78 08 00 	mov	r8,-63488
8002a816:	70 38       	ld.w	r8,r8[0xc]
8002a818:	e2 18 01 00 	andl	r8,0x100,COH
8002a81c:	5f 18       	srne	r8
}
8002a81e:	10 9c       	mov	r12,r8
8002a820:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a824 <scif_bod50_get_irq_enable_bit>:
 
unsigned long scif_bod50_get_irq_enable_bit(void)
{
8002a824:	eb cd 40 80 	pushm	r7,lr
8002a828:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.imr & AVR32_SCIF_IMR_BOD50DET_MASK) != 0);
8002a82a:	fe 78 08 00 	mov	r8,-63488
8002a82e:	70 28       	ld.w	r8,r8[0x8]
8002a830:	e2 18 01 00 	andl	r8,0x100,COH
8002a834:	5f 18       	srne	r8
}
8002a836:	10 9c       	mov	r12,r8
8002a838:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a83c <scif_bod50_get_level>:
 
unsigned long scif_bod50_get_level(void)
{
8002a83c:	eb cd 40 80 	pushm	r7,lr
8002a840:	1a 97       	mov	r7,sp
  return (AVR32_SCIF.bod50 & AVR32_SCIF_BOD50_LEVEL_MASK) >> AVR32_SCIF_BOD50_LEVEL_OFFSET;
8002a842:	fe 78 08 00 	mov	r8,-63488
8002a846:	70 e8       	ld.w	r8,r8[0x38]
8002a848:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
}
8002a84c:	10 9c       	mov	r12,r8
8002a84e:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

8002a854 <getBaudDiv>:

#endif


int16_t getBaudDiv(const unsigned int baudrate, uint32_t pba_hz)
{
8002a854:	eb cd 40 80 	pushm	r7,lr
8002a858:	1a 97       	mov	r7,sp
8002a85a:	20 3d       	sub	sp,12
8002a85c:	ef 4c ff f8 	st.w	r7[-8],r12
8002a860:	ef 4b ff f4 	st.w	r7[-12],r11
  int baudDiv = (pba_hz + baudrate / 2) / baudrate;
8002a864:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a868:	f0 09 16 01 	lsr	r9,r8,0x1
8002a86c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a870:	f2 08 00 08 	add	r8,r9,r8
8002a874:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a878:	f0 09 0d 08 	divu	r8,r8,r9
8002a87c:	ef 48 ff fc 	st.w	r7[-4],r8

  if (baudDiv <= 0 || baudDiv > 255) {
8002a880:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a884:	58 08       	cp.w	r8,0
8002a886:	e0 8a 00 08 	brle	8002a896 <getBaudDiv+0x42>
8002a88a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a88e:	e0 48 00 ff 	cp.w	r8,255
8002a892:	e0 8a 00 04 	brle	8002a89a <getBaudDiv+0x46>
    return -1;
8002a896:	3f f8       	mov	r8,-1
8002a898:	c0 48       	rjmp	8002a8a0 <getBaudDiv+0x4c>
  }

  return baudDiv;
8002a89a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a89e:	5c 88       	casts.h	r8
}
8002a8a0:	10 9c       	mov	r12,r8
8002a8a2:	2f dd       	sub	sp,-12
8002a8a4:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a8a8 <spi_initSlave>:

spi_status_t spi_initSlave(volatile avr32_spi_t *spi,
                           unsigned char bits,
                           unsigned char spi_mode)
{
8002a8a8:	eb cd 40 80 	pushm	r7,lr
8002a8ac:	1a 97       	mov	r7,sp
8002a8ae:	20 3d       	sub	sp,12
8002a8b0:	ef 4c ff fc 	st.w	r7[-4],r12
8002a8b4:	16 99       	mov	r9,r11
8002a8b6:	14 98       	mov	r8,r10
8002a8b8:	ef 69 ff f8 	st.b	r7[-8],r9
8002a8bc:	ef 68 ff f4 	st.b	r7[-12],r8
  if (spi_mode > 3 ||
8002a8c0:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8002a8c4:	30 38       	mov	r8,3
8002a8c6:	f0 09 18 00 	cp.b	r9,r8
8002a8ca:	e0 8b 00 10 	brhi	8002a8ea <spi_initSlave+0x42>
8002a8ce:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8002a8d2:	30 78       	mov	r8,7
8002a8d4:	f0 09 18 00 	cp.b	r9,r8
8002a8d8:	e0 88 00 09 	brls	8002a8ea <spi_initSlave+0x42>
8002a8dc:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8002a8e0:	31 08       	mov	r8,16
8002a8e2:	f0 09 18 00 	cp.b	r9,r8
8002a8e6:	e0 88 00 04 	brls	8002a8ee <spi_initSlave+0x46>
      bits < 8 || bits > 16) {
    return SPI_ERROR_ARGUMENT;
8002a8ea:	30 28       	mov	r8,2
8002a8ec:	c1 f8       	rjmp	8002a92a <spi_initSlave+0x82>
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
8002a8ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a8f2:	e0 69 00 80 	mov	r9,128
8002a8f6:	91 09       	st.w	r8[0x0],r9

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  spi->csr0 = ((spi_mode >> 1) << AVR32_SPI_CSR0_CPOL_OFFSET) |
8002a8f8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002a8fc:	a1 98       	lsr	r8,0x1
8002a8fe:	5c 58       	castu.b	r8
8002a900:	10 99       	mov	r9,r8
              (((spi_mode & 0x1) ^ 0x1) << AVR32_SPI_CSR0_NCPHA_OFFSET) |
8002a902:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002a906:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002a90a:	c0 31       	brne	8002a910 <spi_initSlave+0x68>
8002a90c:	30 28       	mov	r8,2
8002a90e:	c0 28       	rjmp	8002a912 <spi_initSlave+0x6a>
8002a910:	30 08       	mov	r8,0
8002a912:	10 49       	or	r9,r8
              ((bits - 8) << AVR32_SPI_CSR0_BITS_OFFSET);
8002a914:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002a918:	20 88       	sub	r8,8
8002a91a:	a5 68       	lsl	r8,0x4

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  spi->csr0 = ((spi_mode >> 1) << AVR32_SPI_CSR0_CPOL_OFFSET) |
8002a91c:	f3 e8 10 08 	or	r8,r9,r8
8002a920:	10 99       	mov	r9,r8
8002a922:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a926:	91 c9       	st.w	r8[0x30],r9
              (((spi_mode & 0x1) ^ 0x1) << AVR32_SPI_CSR0_NCPHA_OFFSET) |
              ((bits - 8) << AVR32_SPI_CSR0_BITS_OFFSET);

  return SPI_OK;
8002a928:	30 08       	mov	r8,0
}
8002a92a:	10 9c       	mov	r12,r8
8002a92c:	2f dd       	sub	sp,-12
8002a92e:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a932 <spi_initTest>:


spi_status_t spi_initTest(volatile avr32_spi_t *spi)
{
8002a932:	eb cd 40 80 	pushm	r7,lr
8002a936:	1a 97       	mov	r7,sp
8002a938:	20 1d       	sub	sp,4
8002a93a:	ef 4c ff fc 	st.w	r7[-4],r12
  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
8002a93e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a942:	e0 69 00 80 	mov	r9,128
8002a946:	91 09       	st.w	r8[0x0],r9
  spi->mr |= AVR32_SPI_MR_MSTR_MASK | // Master Mode.
8002a948:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a94c:	70 18       	ld.w	r8,r8[0x4]
8002a94e:	10 99       	mov	r9,r8
8002a950:	e8 19 00 81 	orl	r9,0x81
8002a954:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a958:	91 19       	st.w	r8[0x4],r9
             AVR32_SPI_MR_LLB_MASK;   // Local Loopback.

  return SPI_OK;
8002a95a:	30 08       	mov	r8,0
}
8002a95c:	10 9c       	mov	r12,r8
8002a95e:	2f fd       	sub	sp,-4
8002a960:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a964 <spi_initMaster>:


spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
8002a964:	eb cd 40 80 	pushm	r7,lr
8002a968:	1a 97       	mov	r7,sp
8002a96a:	20 3d       	sub	sp,12
8002a96c:	ef 4c ff f8 	st.w	r7[-8],r12
8002a970:	ef 4b ff f4 	st.w	r7[-12],r11
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
8002a974:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a978:	f1 39 00 0d 	ld.ub	r9,r8[13]
8002a97c:	30 18       	mov	r8,1
8002a97e:	f0 09 18 00 	cp.b	r9,r8
8002a982:	e0 88 00 04 	brls	8002a98a <spi_initMaster+0x26>
    return SPI_ERROR_ARGUMENT;
8002a986:	30 28       	mov	r8,2
8002a988:	c3 48       	rjmp	8002a9f0 <spi_initMaster+0x8c>
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
8002a98a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a98e:	e0 69 00 80 	mov	r9,128
8002a992:	91 09       	st.w	r8[0x0],r9

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
8002a994:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a998:	70 18       	ld.w	r8,r8[0x4]
8002a99a:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.mstr = 1;
8002a99e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a9a2:	30 19       	mov	r9,1
8002a9a4:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
8002a9a8:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
8002a9ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a9b0:	f1 38 00 0d 	ld.ub	r8,r8[13]
8002a9b4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002a9b8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8002a9bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a9c0:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
8002a9c4:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.llb = 0;
8002a9c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a9cc:	30 09       	mov	r9,0
8002a9ce:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
8002a9d2:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
8002a9d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a9da:	30 f9       	mov	r9,15
8002a9dc:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
8002a9e0:	ef 48 ff fc 	st.w	r7[-4],r8
  spi->mr = u_avr32_spi_mr.mr;
8002a9e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a9e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a9ec:	91 19       	st.w	r8[0x4],r9

  return SPI_OK;
8002a9ee:	30 08       	mov	r8,0
}
8002a9f0:	10 9c       	mov	r12,r8
8002a9f2:	2f dd       	sub	sp,-12
8002a9f4:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a9f8 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
                               unsigned char variable_ps,
                               unsigned char pcs_decode,
                               unsigned char delay)
{
8002a9f8:	eb cd 40 80 	pushm	r7,lr
8002a9fc:	1a 97       	mov	r7,sp
8002a9fe:	20 5d       	sub	sp,20
8002aa00:	ef 4c ff f8 	st.w	r7[-8],r12
8002aa04:	12 98       	mov	r8,r9
8002aa06:	16 99       	mov	r9,r11
8002aa08:	ef 69 ff f4 	st.b	r7[-12],r9
8002aa0c:	14 99       	mov	r9,r10
8002aa0e:	ef 69 ff f0 	st.b	r7[-16],r9
8002aa12:	ef 68 ff ec 	st.b	r7[-20],r8
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
8002aa16:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8002aa1a:	30 18       	mov	r8,1
8002aa1c:	f0 09 18 00 	cp.b	r9,r8
8002aa20:	e0 8b 00 09 	brhi	8002aa32 <spi_selectionMode+0x3a>
8002aa24:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002aa28:	30 18       	mov	r8,1
8002aa2a:	f0 09 18 00 	cp.b	r9,r8
8002aa2e:	e0 88 00 04 	brls	8002aa36 <spi_selectionMode+0x3e>
      pcs_decode > 1) {
    return SPI_ERROR_ARGUMENT;
8002aa32:	30 28       	mov	r8,2
8002aa34:	c2 88       	rjmp	8002aa84 <spi_selectionMode+0x8c>
  }

  u_avr32_spi_mr.mr = spi->mr;
8002aa36:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aa3a:	70 18       	ld.w	r8,r8[0x4]
8002aa3c:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.ps = variable_ps;
8002aa40:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002aa44:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002aa48:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8002aa4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa50:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
8002aa54:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.pcsdec = pcs_decode;
8002aa58:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8002aa5c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002aa60:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8002aa64:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa68:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
8002aa6c:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.dlybcs = delay;
8002aa70:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8002aa74:	ef 68 ff fc 	st.b	r7[-4],r8
  spi->mr = u_avr32_spi_mr.mr;
8002aa78:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002aa7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aa80:	91 19       	st.w	r8[0x4],r9

  return SPI_OK;
8002aa82:	30 08       	mov	r8,0
}
8002aa84:	10 9c       	mov	r12,r8
8002aa86:	2f bd       	sub	sp,-20
8002aa88:	e3 cd 80 80 	ldm	sp++,r7,pc

8002aa8c <spi_selectChip>:


spi_status_t spi_selectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
8002aa8c:	eb cd 40 80 	pushm	r7,lr
8002aa90:	1a 97       	mov	r7,sp
8002aa92:	20 2d       	sub	sp,8
8002aa94:	ef 4c ff fc 	st.w	r7[-4],r12
8002aa98:	16 98       	mov	r8,r11
8002aa9a:	ef 68 ff f8 	st.b	r7[-8],r8
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
8002aa9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aaa2:	70 18       	ld.w	r8,r8[0x4]
8002aaa4:	10 99       	mov	r9,r8
8002aaa6:	ea 19 00 0f 	orh	r9,0xf
8002aaaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aaae:	91 19       	st.w	r8[0x4],r9

  if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
8002aab0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aab4:	70 18       	ld.w	r8,r8[0x4]
8002aab6:	e2 18 00 04 	andl	r8,0x4,COH
8002aaba:	c1 90       	breq	8002aaec <spi_selectChip+0x60>
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
8002aabc:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8002aac0:	30 e8       	mov	r8,14
8002aac2:	f0 09 18 00 	cp.b	r9,r8
8002aac6:	e0 88 00 04 	brls	8002aace <spi_selectChip+0x42>
      return SPI_ERROR_ARGUMENT;
8002aaca:	30 28       	mov	r8,2
8002aacc:	c2 88       	rjmp	8002ab1c <spi_selectChip+0x90>
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
8002aace:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aad2:	70 19       	ld.w	r9,r8[0x4]
8002aad4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002aad8:	b1 68       	lsl	r8,0x10
8002aada:	ea 18 ff f0 	orh	r8,0xfff0
8002aade:	e8 18 ff ff 	orl	r8,0xffff
8002aae2:	10 69       	and	r9,r8
8002aae4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aae8:	91 19       	st.w	r8[0x4],r9
8002aaea:	c1 88       	rjmp	8002ab1a <spi_selectChip+0x8e>
  } else {
    if (chip > 3) {
8002aaec:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8002aaf0:	30 38       	mov	r8,3
8002aaf2:	f0 09 18 00 	cp.b	r9,r8
8002aaf6:	e0 88 00 04 	brls	8002aafe <spi_selectChip+0x72>
      return SPI_ERROR_ARGUMENT;
8002aafa:	30 28       	mov	r8,2
8002aafc:	c1 08       	rjmp	8002ab1c <spi_selectChip+0x90>
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
8002aafe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ab02:	70 19       	ld.w	r9,r8[0x4]
8002ab04:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002ab08:	2f 08       	sub	r8,-16
8002ab0a:	30 1a       	mov	r10,1
8002ab0c:	f4 08 09 48 	lsl	r8,r10,r8
8002ab10:	5c d8       	com	r8
8002ab12:	10 69       	and	r9,r8
8002ab14:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ab18:	91 19       	st.w	r8[0x4],r9
  }

  return SPI_OK;
8002ab1a:	30 08       	mov	r8,0
}
8002ab1c:	10 9c       	mov	r12,r8
8002ab1e:	2f ed       	sub	sp,-8
8002ab20:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ab24 <spi_unselectChip>:


spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
8002ab24:	eb cd 40 80 	pushm	r7,lr
8002ab28:	1a 97       	mov	r7,sp
8002ab2a:	20 3d       	sub	sp,12
8002ab2c:	ef 4c ff f8 	st.w	r7[-8],r12
8002ab30:	16 98       	mov	r8,r11
8002ab32:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned int timeout = SPI_TIMEOUT;
8002ab36:	e0 68 3a 98 	mov	r8,15000
8002ab3a:	ef 48 ff fc 	st.w	r7[-4],r8

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8002ab3e:	c0 f8       	rjmp	8002ab5c <spi_unselectChip+0x38>
    if (!timeout--) {
8002ab40:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ab44:	58 08       	cp.w	r8,0
8002ab46:	5f 08       	sreq	r8
8002ab48:	5c 58       	castu.b	r8
8002ab4a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ab4e:	20 19       	sub	r9,1
8002ab50:	ef 49 ff fc 	st.w	r7[-4],r9
8002ab54:	58 08       	cp.w	r8,0
8002ab56:	c0 30       	breq	8002ab5c <spi_unselectChip+0x38>
      return SPI_ERROR_TIMEOUT;
8002ab58:	30 18       	mov	r8,1
8002ab5a:	c1 68       	rjmp	8002ab86 <spi_unselectChip+0x62>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8002ab5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ab60:	70 48       	ld.w	r8,r8[0x10]
8002ab62:	e2 18 02 00 	andl	r8,0x200,COH
8002ab66:	ce d0       	breq	8002ab40 <spi_unselectChip+0x1c>
      return SPI_ERROR_TIMEOUT;
    }
  }

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
8002ab68:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ab6c:	70 18       	ld.w	r8,r8[0x4]
8002ab6e:	10 99       	mov	r9,r8
8002ab70:	ea 19 00 0f 	orh	r9,0xf
8002ab74:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ab78:	91 19       	st.w	r8[0x4],r9

  // Last transfer, so deassert the current NPCS if CSAAT is set.
  spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
8002ab7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ab7e:	fc 19 01 00 	movh	r9,0x100
8002ab82:	91 09       	st.w	r8[0x0],r9

#ifdef FREERTOS_USED
  xSemaphoreGive(xSPIMutex);
#endif

  return SPI_OK;
8002ab84:	30 08       	mov	r8,0
}
8002ab86:	10 9c       	mov	r12,r8
8002ab88:	2f dd       	sub	sp,-12
8002ab8a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ab8e <spi_setupChipReg>:


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
8002ab8e:	eb cd 40 c0 	pushm	r6-r7,lr
8002ab92:	1a 97       	mov	r7,sp
8002ab94:	20 5d       	sub	sp,20
8002ab96:	4e 06       	lddpc	r6,8002ad14 <spi_setupChipReg+0x186>
8002ab98:	1e 26       	rsub	r6,pc
8002ab9a:	ef 4c ff f4 	st.w	r7[-12],r12
8002ab9e:	ef 4b ff f0 	st.w	r7[-16],r11
8002aba2:	ef 4a ff ec 	st.w	r7[-20],r10
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
8002aba6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002abaa:	f1 39 00 0c 	ld.ub	r9,r8[12]
8002abae:	30 38       	mov	r8,3
8002abb0:	f0 09 18 00 	cp.b	r9,r8
8002abb4:	e0 8b 00 1d 	brhi	8002abee <spi_setupChipReg+0x60>
      options->stay_act > 1 ||
8002abb8:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002abbc:	f1 39 00 0b 	ld.ub	r9,r8[11]
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
8002abc0:	30 18       	mov	r8,1
8002abc2:	f0 09 18 00 	cp.b	r9,r8
8002abc6:	e0 8b 00 14 	brhi	8002abee <spi_setupChipReg+0x60>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
8002abca:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002abce:	f1 39 00 08 	ld.ub	r9,r8[8]
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
8002abd2:	30 78       	mov	r8,7
8002abd4:	f0 09 18 00 	cp.b	r9,r8
8002abd8:	e0 88 00 0b 	brls	8002abee <spi_setupChipReg+0x60>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
8002abdc:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002abe0:	f1 39 00 08 	ld.ub	r9,r8[8]
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
8002abe4:	31 08       	mov	r8,16
8002abe6:	f0 09 18 00 	cp.b	r9,r8
8002abea:	e0 88 00 04 	brls	8002abf2 <spi_setupChipReg+0x64>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
    return SPI_ERROR_ARGUMENT;
8002abee:	30 28       	mov	r8,2
8002abf0:	c8 d8       	rjmp	8002ad0a <spi_setupChipReg+0x17c>
  }

  int baudDiv = getBaudDiv(options->baudrate, pba_hz);
8002abf2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002abf6:	70 18       	ld.w	r8,r8[0x4]
8002abf8:	ee fb ff ec 	ld.w	r11,r7[-20]
8002abfc:	10 9c       	mov	r12,r8
8002abfe:	f0 16 01 29 	mcall	r6[1188]
8002ac02:	18 98       	mov	r8,r12
8002ac04:	ef 48 ff fc 	st.w	r7[-4],r8

  if (baudDiv < 0) {
8002ac08:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac0c:	58 08       	cp.w	r8,0
8002ac0e:	c0 34       	brge	8002ac14 <spi_setupChipReg+0x86>
    return SPI_ERROR_ARGUMENT;
8002ac10:	30 28       	mov	r8,2
8002ac12:	c7 c8       	rjmp	8002ad0a <spi_setupChipReg+0x17c>
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
8002ac14:	30 08       	mov	r8,0
8002ac16:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
8002ac1a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002ac1e:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002ac22:	a1 98       	lsr	r8,0x1
8002ac24:	5c 58       	castu.b	r8
8002ac26:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ac2a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8002ac2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ac32:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
8002ac36:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
8002ac3a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002ac3e:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002ac42:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ac46:	5f 08       	sreq	r8
8002ac48:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8002ac4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ac50:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
8002ac54:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
8002ac58:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002ac5c:	f1 38 00 0b 	ld.ub	r8,r8[11]
8002ac60:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ac64:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8002ac68:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ac6c:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
8002ac70:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
8002ac74:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002ac78:	f1 38 00 08 	ld.ub	r8,r8[8]
8002ac7c:	20 88       	sub	r8,8
8002ac7e:	5c 58       	castu.b	r8
8002ac80:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002ac84:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8002ac88:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ac8c:	f1 d9 d0 84 	bfins	r8,r9,0x4,0x4
8002ac90:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
8002ac94:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac98:	5c 58       	castu.b	r8
8002ac9a:	ef 68 ff fa 	st.b	r7[-6],r8
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
8002ac9e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002aca2:	f1 38 00 09 	ld.ub	r8,r8[9]
8002aca6:	ef 68 ff f9 	st.b	r7[-7],r8
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
8002acaa:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002acae:	f1 38 00 0a 	ld.ub	r8,r8[10]
8002acb2:	ef 68 ff f8 	st.b	r7[-8],r8

  switch(options->reg) {
8002acb6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002acba:	11 88       	ld.ub	r8,r8[0x0]
8002acbc:	58 18       	cp.w	r8,1
8002acbe:	c1 10       	breq	8002ace0 <spi_setupChipReg+0x152>
8002acc0:	e0 89 00 05 	brgt	8002acca <spi_setupChipReg+0x13c>
8002acc4:	58 08       	cp.w	r8,0
8002acc6:	c0 70       	breq	8002acd4 <spi_setupChipReg+0x146>
8002acc8:	c1 e8       	rjmp	8002ad04 <spi_setupChipReg+0x176>
8002acca:	58 28       	cp.w	r8,2
8002accc:	c1 00       	breq	8002acec <spi_setupChipReg+0x15e>
8002acce:	58 38       	cp.w	r8,3
8002acd0:	c1 40       	breq	8002acf8 <spi_setupChipReg+0x16a>
8002acd2:	c1 98       	rjmp	8002ad04 <spi_setupChipReg+0x176>
    case 0:
      spi->csr0 = u_avr32_spi_csr.csr;
8002acd4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002acd8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002acdc:	91 c9       	st.w	r8[0x30],r9
      break;
8002acde:	c1 58       	rjmp	8002ad08 <spi_setupChipReg+0x17a>
    case 1:
      spi->csr1 = u_avr32_spi_csr.csr;
8002ace0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002ace4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ace8:	91 d9       	st.w	r8[0x34],r9
      break;
8002acea:	c0 f8       	rjmp	8002ad08 <spi_setupChipReg+0x17a>
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
8002acec:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002acf0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002acf4:	91 e9       	st.w	r8[0x38],r9
      break;
8002acf6:	c0 98       	rjmp	8002ad08 <spi_setupChipReg+0x17a>
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
8002acf8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002acfc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ad00:	91 f9       	st.w	r8[0x3c],r9
      break;
8002ad02:	c0 38       	rjmp	8002ad08 <spi_setupChipReg+0x17a>
    default:
      return SPI_ERROR_ARGUMENT;
8002ad04:	30 28       	mov	r8,2
8002ad06:	c0 28       	rjmp	8002ad0a <spi_setupChipReg+0x17c>
      while(1);
    }
  }
#endif

  return SPI_OK;
8002ad08:	30 08       	mov	r8,0
}
8002ad0a:	10 9c       	mov	r12,r8
8002ad0c:	2f bd       	sub	sp,-20
8002ad0e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ad12:	00 00       	add	r0,r0
8002ad14:	80 02       	ld.sh	r2,r0[0x0]
8002ad16:	aa 1c       	st.h	r5[0x2],r12

8002ad18 <spi_enable>:


void spi_enable(volatile avr32_spi_t *spi)
{
8002ad18:	eb cd 40 80 	pushm	r7,lr
8002ad1c:	1a 97       	mov	r7,sp
8002ad1e:	20 1d       	sub	sp,4
8002ad20:	ef 4c ff fc 	st.w	r7[-4],r12
  spi->cr = AVR32_SPI_CR_SPIEN_MASK;
8002ad24:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad28:	30 19       	mov	r9,1
8002ad2a:	91 09       	st.w	r8[0x0],r9
}
8002ad2c:	2f fd       	sub	sp,-4
8002ad2e:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ad32 <spi_disable>:


void spi_disable(volatile avr32_spi_t *spi)
{
8002ad32:	eb cd 40 80 	pushm	r7,lr
8002ad36:	1a 97       	mov	r7,sp
8002ad38:	20 1d       	sub	sp,4
8002ad3a:	ef 4c ff fc 	st.w	r7[-4],r12
  spi->cr = AVR32_SPI_CR_SPIDIS_MASK;
8002ad3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad42:	30 29       	mov	r9,2
8002ad44:	91 09       	st.w	r8[0x0],r9
}
8002ad46:	2f fd       	sub	sp,-4
8002ad48:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ad4c <spi_is_enabled>:


int spi_is_enabled(volatile avr32_spi_t *spi)
{
8002ad4c:	eb cd 40 80 	pushm	r7,lr
8002ad50:	1a 97       	mov	r7,sp
8002ad52:	20 1d       	sub	sp,4
8002ad54:	ef 4c ff fc 	st.w	r7[-4],r12
  return (spi->sr & AVR32_SPI_SR_SPIENS_MASK) != 0;
8002ad58:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad5c:	70 48       	ld.w	r8,r8[0x10]
8002ad5e:	e6 18 00 01 	andh	r8,0x1,COH
8002ad62:	5f 18       	srne	r8
}
8002ad64:	10 9c       	mov	r12,r8
8002ad66:	2f fd       	sub	sp,-4
8002ad68:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ad6c <spi_writeRegisterEmptyCheck>:

unsigned char spi_writeRegisterEmptyCheck(volatile avr32_spi_t *spi)
{
8002ad6c:	eb cd 40 80 	pushm	r7,lr
8002ad70:	1a 97       	mov	r7,sp
8002ad72:	20 1d       	sub	sp,4
8002ad74:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
8002ad78:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad7c:	70 48       	ld.w	r8,r8[0x10]
8002ad7e:	e2 18 00 02 	andl	r8,0x2,COH
8002ad82:	5f 18       	srne	r8
}
8002ad84:	10 9c       	mov	r12,r8
8002ad86:	2f fd       	sub	sp,-4
8002ad88:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ad8c <spi_write>:


spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
8002ad8c:	eb cd 40 80 	pushm	r7,lr
8002ad90:	1a 97       	mov	r7,sp
8002ad92:	20 3d       	sub	sp,12
8002ad94:	ef 4c ff f8 	st.w	r7[-8],r12
8002ad98:	16 98       	mov	r8,r11
8002ad9a:	ef 58 ff f4 	st.h	r7[-12],r8
  unsigned int timeout = SPI_TIMEOUT;
8002ad9e:	e0 68 3a 98 	mov	r8,15000
8002ada2:	ef 48 ff fc 	st.w	r7[-4],r8

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8002ada6:	c0 f8       	rjmp	8002adc4 <spi_write+0x38>
    if (!timeout--) {
8002ada8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002adac:	58 08       	cp.w	r8,0
8002adae:	5f 08       	sreq	r8
8002adb0:	5c 58       	castu.b	r8
8002adb2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002adb6:	20 19       	sub	r9,1
8002adb8:	ef 49 ff fc 	st.w	r7[-4],r9
8002adbc:	58 08       	cp.w	r8,0
8002adbe:	c0 30       	breq	8002adc4 <spi_write+0x38>
      return SPI_ERROR_TIMEOUT;
8002adc0:	30 18       	mov	r8,1
8002adc2:	c0 d8       	rjmp	8002addc <spi_write+0x50>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8002adc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002adc8:	70 48       	ld.w	r8,r8[0x10]
8002adca:	e2 18 00 02 	andl	r8,0x2,COH
8002adce:	ce d0       	breq	8002ada8 <spi_write+0x1c>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
8002add0:	ef 19 ff f4 	ld.uh	r9,r7[-12]
8002add4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002add8:	91 39       	st.w	r8[0xc],r9

  return SPI_OK;
8002adda:	30 08       	mov	r8,0
}
8002addc:	10 9c       	mov	r12,r8
8002adde:	2f dd       	sub	sp,-12
8002ade0:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ade4 <spi_variableSlaveWrite>:


spi_status_t spi_variableSlaveWrite(volatile avr32_spi_t *spi, uint16_t data,
                                    uint8_t pcs, uint8_t lastxfer)
{
8002ade4:	eb cd 40 80 	pushm	r7,lr
8002ade8:	1a 97       	mov	r7,sp
8002adea:	20 5d       	sub	sp,20
8002adec:	ef 4c ff f8 	st.w	r7[-8],r12
8002adf0:	12 98       	mov	r8,r9
8002adf2:	16 99       	mov	r9,r11
8002adf4:	ef 59 ff f4 	st.h	r7[-12],r9
8002adf8:	14 99       	mov	r9,r10
8002adfa:	ef 69 ff f0 	st.b	r7[-16],r9
8002adfe:	ef 68 ff ec 	st.b	r7[-20],r8
  unsigned int timeout = SPI_TIMEOUT;
8002ae02:	e0 68 3a 98 	mov	r8,15000
8002ae06:	ef 48 ff fc 	st.w	r7[-4],r8

  if (pcs > 14 || lastxfer > 1) {
8002ae0a:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002ae0e:	30 e8       	mov	r8,14
8002ae10:	f0 09 18 00 	cp.b	r9,r8
8002ae14:	e0 8b 00 09 	brhi	8002ae26 <spi_variableSlaveWrite+0x42>
8002ae18:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002ae1c:	30 18       	mov	r8,1
8002ae1e:	f0 09 18 00 	cp.b	r9,r8
8002ae22:	e0 88 00 12 	brls	8002ae46 <spi_variableSlaveWrite+0x62>
    return SPI_ERROR_ARGUMENT;
8002ae26:	30 28       	mov	r8,2
8002ae28:	c2 68       	rjmp	8002ae74 <spi_variableSlaveWrite+0x90>
  }

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
    if (!timeout--) {
8002ae2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae2e:	58 08       	cp.w	r8,0
8002ae30:	5f 08       	sreq	r8
8002ae32:	5c 58       	castu.b	r8
8002ae34:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ae38:	20 19       	sub	r9,1
8002ae3a:	ef 49 ff fc 	st.w	r7[-4],r9
8002ae3e:	58 08       	cp.w	r8,0
8002ae40:	c0 40       	breq	8002ae48 <spi_variableSlaveWrite+0x64>
      return SPI_ERROR_TIMEOUT;
8002ae42:	30 18       	mov	r8,1
8002ae44:	c1 88       	rjmp	8002ae74 <spi_variableSlaveWrite+0x90>

  if (pcs > 14 || lastxfer > 1) {
    return SPI_ERROR_ARGUMENT;
  }

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8002ae46:	d7 03       	nop
8002ae48:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ae4c:	70 48       	ld.w	r8,r8[0x10]
8002ae4e:	e2 18 00 02 	andl	r8,0x2,COH
8002ae52:	ce c0       	breq	8002ae2a <spi_variableSlaveWrite+0x46>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = (data << AVR32_SPI_TDR_TD_OFFSET) |
8002ae54:	ef 19 ff f4 	ld.uh	r9,r7[-12]
             (pcs << AVR32_SPI_TDR_PCS_OFFSET) |
8002ae58:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8002ae5c:	b1 68       	lsl	r8,0x10
8002ae5e:	10 49       	or	r9,r8
             (lastxfer << AVR32_SPI_TDR_LASTXFER_OFFSET);
8002ae60:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8002ae64:	b9 68       	lsl	r8,0x18
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = (data << AVR32_SPI_TDR_TD_OFFSET) |
8002ae66:	f3 e8 10 08 	or	r8,r9,r8
8002ae6a:	10 99       	mov	r9,r8
8002ae6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ae70:	91 39       	st.w	r8[0xc],r9
             (pcs << AVR32_SPI_TDR_PCS_OFFSET) |
             (lastxfer << AVR32_SPI_TDR_LASTXFER_OFFSET);

  return SPI_OK;
8002ae72:	30 08       	mov	r8,0
}
8002ae74:	10 9c       	mov	r12,r8
8002ae76:	2f bd       	sub	sp,-20
8002ae78:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ae7c <spi_writeEndCheck>:


unsigned char spi_writeEndCheck(volatile avr32_spi_t *spi)
{
8002ae7c:	eb cd 40 80 	pushm	r7,lr
8002ae80:	1a 97       	mov	r7,sp
8002ae82:	20 1d       	sub	sp,4
8002ae84:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0);
8002ae88:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae8c:	70 48       	ld.w	r8,r8[0x10]
8002ae8e:	e2 18 02 00 	andl	r8,0x200,COH
8002ae92:	5f 18       	srne	r8
}
8002ae94:	10 9c       	mov	r12,r8
8002ae96:	2f fd       	sub	sp,-4
8002ae98:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ae9c <spi_readRegisterFullCheck>:


unsigned char spi_readRegisterFullCheck(volatile avr32_spi_t *spi)
{
8002ae9c:	eb cd 40 80 	pushm	r7,lr
8002aea0:	1a 97       	mov	r7,sp
8002aea2:	20 1d       	sub	sp,4
8002aea4:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
8002aea8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aeac:	70 48       	ld.w	r8,r8[0x10]
8002aeae:	5c 58       	castu.b	r8
8002aeb0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
8002aeb4:	10 9c       	mov	r12,r8
8002aeb6:	2f fd       	sub	sp,-4
8002aeb8:	e3 cd 80 80 	ldm	sp++,r7,pc

8002aebc <spi_read>:


spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
8002aebc:	eb cd 40 80 	pushm	r7,lr
8002aec0:	1a 97       	mov	r7,sp
8002aec2:	20 3d       	sub	sp,12
8002aec4:	ef 4c ff f8 	st.w	r7[-8],r12
8002aec8:	ef 4b ff f4 	st.w	r7[-12],r11
  unsigned int timeout = SPI_TIMEOUT;
8002aecc:	e0 68 3a 98 	mov	r8,15000
8002aed0:	ef 48 ff fc 	st.w	r7[-4],r8

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
8002aed4:	c0 f8       	rjmp	8002aef2 <spi_read+0x36>
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
8002aed6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aeda:	58 08       	cp.w	r8,0
8002aedc:	5f 08       	sreq	r8
8002aede:	5c 58       	castu.b	r8
8002aee0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002aee4:	20 19       	sub	r9,1
8002aee6:	ef 49 ff fc 	st.w	r7[-4],r9
8002aeea:	58 08       	cp.w	r8,0
8002aeec:	c0 30       	breq	8002aef2 <spi_read+0x36>
      return SPI_ERROR_TIMEOUT;
8002aeee:	30 18       	mov	r8,1
8002aef0:	c1 18       	rjmp	8002af12 <spi_read+0x56>

spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
8002aef2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aef6:	70 48       	ld.w	r8,r8[0x10]
8002aef8:	e2 18 02 01 	andl	r8,0x201,COH
8002aefc:	e0 48 02 01 	cp.w	r8,513
8002af00:	ce b1       	brne	8002aed6 <spi_read+0x1a>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  *data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
8002af02:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af06:	70 28       	ld.w	r8,r8[0x8]
8002af08:	5c 88       	casts.h	r8
8002af0a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002af0e:	b2 08       	st.h	r9[0x0],r8

  return SPI_OK;
8002af10:	30 08       	mov	r8,0
}
8002af12:	10 9c       	mov	r12,r8
8002af14:	2f dd       	sub	sp,-12
8002af16:	e3 cd 80 80 	ldm	sp++,r7,pc

8002af1a <spi_getStatus>:


unsigned char spi_getStatus(volatile avr32_spi_t *spi)
{
8002af1a:	eb cd 40 80 	pushm	r7,lr
8002af1e:	1a 97       	mov	r7,sp
8002af20:	20 3d       	sub	sp,12
8002af22:	ef 4c ff f4 	st.w	r7[-12],r12
  spi_status_t ret = SPI_OK;
8002af26:	30 08       	mov	r8,0
8002af28:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned long sr = spi->sr;
8002af2c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002af30:	70 48       	ld.w	r8,r8[0x10]
8002af32:	ef 48 ff fc 	st.w	r7[-4],r8

  if (sr & AVR32_SPI_SR_OVRES_MASK) {
8002af36:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af3a:	e2 18 00 08 	andl	r8,0x8,COH
8002af3e:	c0 40       	breq	8002af46 <spi_getStatus+0x2c>
    ret = SPI_ERROR_OVERRUN;
8002af40:	30 38       	mov	r8,3
8002af42:	ef 48 ff f8 	st.w	r7[-8],r8
  }

  if (sr & AVR32_SPI_SR_MODF_MASK) {
8002af46:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af4a:	e2 18 00 04 	andl	r8,0x4,COH
8002af4e:	c0 60       	breq	8002af5a <spi_getStatus+0x40>
    ret += SPI_ERROR_MODE_FAULT;
8002af50:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af54:	2f c8       	sub	r8,-4
8002af56:	ef 48 ff f8 	st.w	r7[-8],r8
  }

  if (ret == (SPI_ERROR_OVERRUN + SPI_ERROR_MODE_FAULT)) {
8002af5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af5e:	58 78       	cp.w	r8,7
8002af60:	c0 31       	brne	8002af66 <spi_getStatus+0x4c>
    return SPI_ERROR_OVERRUN_AND_MODE_FAULT;
8002af62:	30 58       	mov	r8,5
8002af64:	c0 b8       	rjmp	8002af7a <spi_getStatus+0x60>
  }
  else if (ret > 0) {
8002af66:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af6a:	58 08       	cp.w	r8,0
8002af6c:	e0 8a 00 06 	brle	8002af78 <spi_getStatus+0x5e>
    return ret;
8002af70:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af74:	5c 58       	castu.b	r8
8002af76:	c0 28       	rjmp	8002af7a <spi_getStatus+0x60>
  } else {
    return SPI_OK;
8002af78:	30 08       	mov	r8,0
  }
}
8002af7a:	10 9c       	mov	r12,r8
8002af7c:	2f dd       	sub	sp,-12
8002af7e:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

8002af84 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8002af84:	eb cd 40 80 	pushm	r7,lr
8002af88:	1a 97       	mov	r7,sp
8002af8a:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8002af8c:	e1 b8 00 00 	mfsr	r8,0x0
8002af90:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8002af94:	d3 03       	ssrf	0x10

	return flags;
8002af96:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002af9a:	10 9c       	mov	r12,r8
8002af9c:	2f fd       	sub	sp,-4
8002af9e:	e3 cd 80 80 	ldm	sp++,r7,pc

8002afa2 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
8002afa2:	eb cd 40 80 	pushm	r7,lr
8002afa6:	1a 97       	mov	r7,sp
8002afa8:	20 1d       	sub	sp,4
8002afaa:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8002afae:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002afb2:	e6 18 00 01 	andh	r8,0x1,COH
8002afb6:	5f 08       	sreq	r8
8002afb8:	5c 58       	castu.b	r8
}
8002afba:	10 9c       	mov	r12,r8
8002afbc:	2f fd       	sub	sp,-4
8002afbe:	e3 cd 80 80 	ldm	sp++,r7,pc

8002afc2 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
8002afc2:	eb cd 40 80 	pushm	r7,lr
8002afc6:	1a 97       	mov	r7,sp
8002afc8:	20 1d       	sub	sp,4
8002afca:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8002afce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002afd2:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8002afd6:	2f fd       	sub	sp,-4
8002afd8:	e3 cd 80 80 	ldm	sp++,r7,pc

8002afdc <twim_master_interrupt_handler>:
/** 
 * \internal  
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
8002afdc:	eb cd 40 c0 	pushm	r6-r7,lr
8002afe0:	1a 97       	mov	r7,sp
8002afe2:	20 1d       	sub	sp,4
8002afe4:	4d 96       	lddpc	r6,8002b148 <twim_master_interrupt_handler+0x16c>
8002afe6:	1e 26       	rsub	r6,pc
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
8002afe8:	ec f8 00 40 	ld.w	r8,r6[64]
8002afec:	70 08       	ld.w	r8,r8[0x0]
8002afee:	70 79       	ld.w	r9,r8[0x1c]
8002aff0:	ec f8 01 08 	ld.w	r8,r6[264]
8002aff4:	70 08       	ld.w	r8,r8[0x0]
8002aff6:	f3 e8 00 08 	and	r8,r9,r8
8002affa:	ef 48 ff fc 	st.w	r7[-4],r8
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
8002affe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b002:	e2 18 07 00 	andl	r8,0x700,COH
8002b006:	c2 30       	breq	8002b04c <twim_master_interrupt_handler+0x70>
		//if we get a nak, clear the valid bit in cmdr, 
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ? 
8002b008:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b00c:	e2 18 03 00 	andl	r8,0x300,COH
8002b010:	c0 30       	breq	8002b016 <twim_master_interrupt_handler+0x3a>
8002b012:	3f c8       	mov	r8,-4
8002b014:	c0 28       	rjmp	8002b018 <twim_master_interrupt_handler+0x3c>
8002b016:	3f e8       	mov	r8,-2
8002b018:	ec f9 00 78 	ld.w	r9,r6[120]
8002b01c:	93 08       	st.w	r9[0x0],r8
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
8002b01e:	ec f8 00 40 	ld.w	r8,r6[64]
8002b022:	70 09       	ld.w	r9,r8[0x0]
8002b024:	72 38       	ld.w	r8,r9[0xc]
8002b026:	30 0a       	mov	r10,0
8002b028:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
8002b02c:	93 38       	st.w	r9[0xc],r8
		twim_inst->scr = ~0UL;
8002b02e:	ec f8 00 40 	ld.w	r8,r6[64]
8002b032:	70 08       	ld.w	r8,r8[0x0]
8002b034:	3f f9       	mov	r9,-1
8002b036:	91 b9       	st.w	r8[0x2c],r9
		twim_inst->idr = ~0UL;
8002b038:	ec f8 00 40 	ld.w	r8,r6[64]
8002b03c:	70 08       	ld.w	r8,r8[0x0]
8002b03e:	3f f9       	mov	r9,-1
8002b040:	91 99       	st.w	r8[0x24],r9
		twim_next = false;
8002b042:	ec f9 00 bc 	ld.w	r9,r6[188]
8002b046:	30 08       	mov	r8,0
8002b048:	b2 88       	st.b	r9[0x0],r8
8002b04a:	c7 a8       	rjmp	8002b13e <twim_master_interrupt_handler+0x162>
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
8002b04c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b050:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002b054:	5c 58       	castu.b	r8
8002b056:	c2 d0       	breq	8002b0b0 <twim_master_interrupt_handler+0xd4>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
8002b058:	ec f8 00 c0 	ld.w	r8,r6[192]
8002b05c:	70 09       	ld.w	r9,r8[0x0]
8002b05e:	ec f8 00 40 	ld.w	r8,r6[64]
8002b062:	70 08       	ld.w	r8,r8[0x0]
8002b064:	70 58       	ld.w	r8,r8[0x14]
8002b066:	5c 58       	castu.b	r8
8002b068:	b2 88       	st.b	r9[0x0],r8
		twim_rx_data++;
8002b06a:	ec f8 00 c0 	ld.w	r8,r6[192]
8002b06e:	70 08       	ld.w	r8,r8[0x0]
8002b070:	f0 c9 ff ff 	sub	r9,r8,-1
8002b074:	ec f8 00 c0 	ld.w	r8,r6[192]
8002b078:	91 09       	st.w	r8[0x0],r9
		// decrease recieved bytes number
		twim_rx_nb_bytes--;
8002b07a:	ec f8 01 58 	ld.w	r8,r6[344]
8002b07e:	70 08       	ld.w	r8,r8[0x0]
8002b080:	f0 c9 00 01 	sub	r9,r8,1
8002b084:	ec f8 01 58 	ld.w	r8,r6[344]
8002b088:	91 09       	st.w	r8[0x0],r9
		// receive complete
		if (twim_rx_nb_bytes == 0) {
8002b08a:	ec f8 01 58 	ld.w	r8,r6[344]
8002b08e:	70 08       	ld.w	r8,r8[0x0]
8002b090:	58 08       	cp.w	r8,0
8002b092:	c5 61       	brne	8002b13e <twim_master_interrupt_handler+0x162>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
8002b094:	ec f8 00 40 	ld.w	r8,r6[64]
8002b098:	70 08       	ld.w	r8,r8[0x0]
8002b09a:	30 19       	mov	r9,1
8002b09c:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
8002b09e:	ec f9 00 bc 	ld.w	r9,r6[188]
8002b0a2:	30 08       	mov	r8,0
8002b0a4:	b2 88       	st.b	r9[0x0],r8
			transfer_status=true;
8002b0a6:	ec f8 00 78 	ld.w	r8,r6[120]
8002b0aa:	30 19       	mov	r9,1
8002b0ac:	91 09       	st.w	r8[0x0],r9
8002b0ae:	c4 88       	rjmp	8002b13e <twim_master_interrupt_handler+0x162>
			
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
8002b0b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b0b4:	e2 18 00 02 	andl	r8,0x2,COH
8002b0b8:	c4 30       	breq	8002b13e <twim_master_interrupt_handler+0x162>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
8002b0ba:	ec f8 00 84 	ld.w	r8,r6[132]
8002b0be:	70 08       	ld.w	r8,r8[0x0]
8002b0c0:	58 08       	cp.w	r8,0
8002b0c2:	c0 b1       	brne	8002b0d8 <twim_master_interrupt_handler+0xfc>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
8002b0c4:	ec f8 00 40 	ld.w	r8,r6[64]
8002b0c8:	70 08       	ld.w	r8,r8[0x0]
8002b0ca:	30 29       	mov	r9,2
8002b0cc:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
8002b0ce:	ec f9 00 bc 	ld.w	r9,r6[188]
8002b0d2:	30 08       	mov	r8,0
8002b0d4:	b2 88       	st.b	r9[0x0],r8
8002b0d6:	c3 48       	rjmp	8002b13e <twim_master_interrupt_handler+0x162>
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
8002b0d8:	ec f8 00 40 	ld.w	r8,r6[64]
8002b0dc:	70 0a       	ld.w	r10,r8[0x0]
8002b0de:	ec f8 00 90 	ld.w	r8,r6[144]
8002b0e2:	70 08       	ld.w	r8,r8[0x0]
8002b0e4:	11 89       	ld.ub	r9,r8[0x0]
8002b0e6:	5c 59       	castu.b	r9
8002b0e8:	95 69       	st.w	r10[0x18],r9
8002b0ea:	f0 c9 ff ff 	sub	r9,r8,-1
8002b0ee:	ec f8 00 90 	ld.w	r8,r6[144]
8002b0f2:	91 09       	st.w	r8[0x0],r9
			// decrease transmited bytes number
			twim_tx_nb_bytes--;
8002b0f4:	ec f8 00 84 	ld.w	r8,r6[132]
8002b0f8:	70 08       	ld.w	r8,r8[0x0]
8002b0fa:	f0 c9 00 01 	sub	r9,r8,1
8002b0fe:	ec f8 00 84 	ld.w	r8,r6[132]
8002b102:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
8002b104:	ec f8 00 84 	ld.w	r8,r6[132]
8002b108:	70 08       	ld.w	r8,r8[0x0]
8002b10a:	58 08       	cp.w	r8,0
8002b10c:	c1 91       	brne	8002b13e <twim_master_interrupt_handler+0x162>
				// Check for next transfer
				if(twim_next) {
8002b10e:	ec f8 00 bc 	ld.w	r8,r6[188]
8002b112:	11 88       	ld.ub	r8,r8[0x0]
8002b114:	5c 58       	castu.b	r8
8002b116:	c1 40       	breq	8002b13e <twim_master_interrupt_handler+0x162>
					twim_next = false;
8002b118:	ec f9 00 bc 	ld.w	r9,r6[188]
8002b11c:	30 08       	mov	r8,0
8002b11e:	b2 88       	st.b	r9[0x0],r8
					twim_tx_nb_bytes = twim_package->length;
8002b120:	ec f8 02 1c 	ld.w	r8,r6[540]
8002b124:	70 08       	ld.w	r8,r8[0x0]
8002b126:	70 49       	ld.w	r9,r8[0x10]
8002b128:	ec f8 00 84 	ld.w	r8,r6[132]
8002b12c:	91 09       	st.w	r8[0x0],r9
					twim_tx_data = twim_package->buffer;
8002b12e:	ec f8 02 1c 	ld.w	r8,r6[540]
8002b132:	70 08       	ld.w	r8,r8[0x0]
8002b134:	70 38       	ld.w	r8,r8[0xc]
8002b136:	10 99       	mov	r9,r8
8002b138:	ec f8 00 90 	ld.w	r8,r6[144]
8002b13c:	91 09       	st.w	r8[0x0],r9
				}
			}
		}
	}
	return;
}
8002b13e:	2f fd       	sub	sp,-4
8002b140:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8002b144:	d6 03       	rete
8002b146:	00 00       	add	r0,r0
8002b148:	80 02       	ld.sh	r2,r0[0x0]
8002b14a:	ae 6a       	st.h	r7[0xc],r10

8002b14c <twim_master_interrupt_handler2>:
/** 
 * \internal  
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler2,AVR32_TWIM1_GROUP,CONF_TWIM_IRQ_LEVEL)
{
8002b14c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b150:	1a 97       	mov	r7,sp
8002b152:	20 1d       	sub	sp,4
8002b154:	4d 76       	lddpc	r6,8002b2b0 <twim_master_interrupt_handler2+0x164>
8002b156:	1e 26       	rsub	r6,pc
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
8002b158:	ec f8 00 40 	ld.w	r8,r6[64]
8002b15c:	70 08       	ld.w	r8,r8[0x0]
8002b15e:	70 79       	ld.w	r9,r8[0x1c]
8002b160:	ec f8 01 08 	ld.w	r8,r6[264]
8002b164:	70 08       	ld.w	r8,r8[0x0]
8002b166:	f3 e8 00 08 	and	r8,r9,r8
8002b16a:	ef 48 ff fc 	st.w	r7[-4],r8
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
8002b16e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b172:	e2 18 07 00 	andl	r8,0x700,COH
8002b176:	c2 30       	breq	8002b1bc <twim_master_interrupt_handler2+0x70>
		//if we get a nak, clear the valid bit in cmdr, 
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ? 
8002b178:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b17c:	e2 18 03 00 	andl	r8,0x300,COH
8002b180:	c0 30       	breq	8002b186 <twim_master_interrupt_handler2+0x3a>
8002b182:	3f c8       	mov	r8,-4
8002b184:	c0 28       	rjmp	8002b188 <twim_master_interrupt_handler2+0x3c>
8002b186:	3f e8       	mov	r8,-2
8002b188:	ec f9 00 78 	ld.w	r9,r6[120]
8002b18c:	93 08       	st.w	r9[0x0],r8
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
8002b18e:	ec f8 00 40 	ld.w	r8,r6[64]
8002b192:	70 09       	ld.w	r9,r8[0x0]
8002b194:	72 38       	ld.w	r8,r9[0xc]
8002b196:	30 0a       	mov	r10,0
8002b198:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
8002b19c:	93 38       	st.w	r9[0xc],r8
		twim_inst->scr = ~0UL;
8002b19e:	ec f8 00 40 	ld.w	r8,r6[64]
8002b1a2:	70 08       	ld.w	r8,r8[0x0]
8002b1a4:	3f f9       	mov	r9,-1
8002b1a6:	91 b9       	st.w	r8[0x2c],r9
		twim_inst->idr = ~0UL;
8002b1a8:	ec f8 00 40 	ld.w	r8,r6[64]
8002b1ac:	70 08       	ld.w	r8,r8[0x0]
8002b1ae:	3f f9       	mov	r9,-1
8002b1b0:	91 99       	st.w	r8[0x24],r9
		twim_next = false;
8002b1b2:	ec f9 00 bc 	ld.w	r9,r6[188]
8002b1b6:	30 08       	mov	r8,0
8002b1b8:	b2 88       	st.b	r9[0x0],r8
8002b1ba:	c7 68       	rjmp	8002b2a6 <twim_master_interrupt_handler2+0x15a>
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
8002b1bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b1c0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002b1c4:	5c 58       	castu.b	r8
8002b1c6:	c2 90       	breq	8002b218 <twim_master_interrupt_handler2+0xcc>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
8002b1c8:	ec f8 00 c0 	ld.w	r8,r6[192]
8002b1cc:	70 09       	ld.w	r9,r8[0x0]
8002b1ce:	ec f8 00 40 	ld.w	r8,r6[64]
8002b1d2:	70 08       	ld.w	r8,r8[0x0]
8002b1d4:	70 58       	ld.w	r8,r8[0x14]
8002b1d6:	5c 58       	castu.b	r8
8002b1d8:	b2 88       	st.b	r9[0x0],r8
		twim_rx_data++;
8002b1da:	ec f8 00 c0 	ld.w	r8,r6[192]
8002b1de:	70 08       	ld.w	r8,r8[0x0]
8002b1e0:	f0 c9 ff ff 	sub	r9,r8,-1
8002b1e4:	ec f8 00 c0 	ld.w	r8,r6[192]
8002b1e8:	91 09       	st.w	r8[0x0],r9
		// decrease recieved bytes number
		twim_rx_nb_bytes--;
8002b1ea:	ec f8 01 58 	ld.w	r8,r6[344]
8002b1ee:	70 08       	ld.w	r8,r8[0x0]
8002b1f0:	f0 c9 00 01 	sub	r9,r8,1
8002b1f4:	ec f8 01 58 	ld.w	r8,r6[344]
8002b1f8:	91 09       	st.w	r8[0x0],r9
		// receive complete
		if (twim_rx_nb_bytes == 0) {
8002b1fa:	ec f8 01 58 	ld.w	r8,r6[344]
8002b1fe:	70 08       	ld.w	r8,r8[0x0]
8002b200:	58 08       	cp.w	r8,0
8002b202:	c5 21       	brne	8002b2a6 <twim_master_interrupt_handler2+0x15a>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
8002b204:	ec f8 00 40 	ld.w	r8,r6[64]
8002b208:	70 08       	ld.w	r8,r8[0x0]
8002b20a:	30 19       	mov	r9,1
8002b20c:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
8002b20e:	ec f9 00 bc 	ld.w	r9,r6[188]
8002b212:	30 08       	mov	r8,0
8002b214:	b2 88       	st.b	r9[0x0],r8
8002b216:	c4 88       	rjmp	8002b2a6 <twim_master_interrupt_handler2+0x15a>
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
8002b218:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b21c:	e2 18 00 02 	andl	r8,0x2,COH
8002b220:	c4 30       	breq	8002b2a6 <twim_master_interrupt_handler2+0x15a>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
8002b222:	ec f8 00 84 	ld.w	r8,r6[132]
8002b226:	70 08       	ld.w	r8,r8[0x0]
8002b228:	58 08       	cp.w	r8,0
8002b22a:	c0 b1       	brne	8002b240 <twim_master_interrupt_handler2+0xf4>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
8002b22c:	ec f8 00 40 	ld.w	r8,r6[64]
8002b230:	70 08       	ld.w	r8,r8[0x0]
8002b232:	30 29       	mov	r9,2
8002b234:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
8002b236:	ec f9 00 bc 	ld.w	r9,r6[188]
8002b23a:	30 08       	mov	r8,0
8002b23c:	b2 88       	st.b	r9[0x0],r8
8002b23e:	c3 48       	rjmp	8002b2a6 <twim_master_interrupt_handler2+0x15a>
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
8002b240:	ec f8 00 40 	ld.w	r8,r6[64]
8002b244:	70 0a       	ld.w	r10,r8[0x0]
8002b246:	ec f8 00 90 	ld.w	r8,r6[144]
8002b24a:	70 08       	ld.w	r8,r8[0x0]
8002b24c:	11 89       	ld.ub	r9,r8[0x0]
8002b24e:	5c 59       	castu.b	r9
8002b250:	95 69       	st.w	r10[0x18],r9
8002b252:	f0 c9 ff ff 	sub	r9,r8,-1
8002b256:	ec f8 00 90 	ld.w	r8,r6[144]
8002b25a:	91 09       	st.w	r8[0x0],r9
			// decrease transmited bytes number
			twim_tx_nb_bytes--;
8002b25c:	ec f8 00 84 	ld.w	r8,r6[132]
8002b260:	70 08       	ld.w	r8,r8[0x0]
8002b262:	f0 c9 00 01 	sub	r9,r8,1
8002b266:	ec f8 00 84 	ld.w	r8,r6[132]
8002b26a:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
8002b26c:	ec f8 00 84 	ld.w	r8,r6[132]
8002b270:	70 08       	ld.w	r8,r8[0x0]
8002b272:	58 08       	cp.w	r8,0
8002b274:	c1 91       	brne	8002b2a6 <twim_master_interrupt_handler2+0x15a>
				// Check for next transfer
				if(twim_next) {
8002b276:	ec f8 00 bc 	ld.w	r8,r6[188]
8002b27a:	11 88       	ld.ub	r8,r8[0x0]
8002b27c:	5c 58       	castu.b	r8
8002b27e:	c1 40       	breq	8002b2a6 <twim_master_interrupt_handler2+0x15a>
					twim_next = false;
8002b280:	ec f9 00 bc 	ld.w	r9,r6[188]
8002b284:	30 08       	mov	r8,0
8002b286:	b2 88       	st.b	r9[0x0],r8
					twim_tx_nb_bytes = twim_package->length;
8002b288:	ec f8 02 1c 	ld.w	r8,r6[540]
8002b28c:	70 08       	ld.w	r8,r8[0x0]
8002b28e:	70 49       	ld.w	r9,r8[0x10]
8002b290:	ec f8 00 84 	ld.w	r8,r6[132]
8002b294:	91 09       	st.w	r8[0x0],r9
					twim_tx_data = twim_package->buffer;
8002b296:	ec f8 02 1c 	ld.w	r8,r6[540]
8002b29a:	70 08       	ld.w	r8,r8[0x0]
8002b29c:	70 38       	ld.w	r8,r8[0xc]
8002b29e:	10 99       	mov	r9,r8
8002b2a0:	ec f8 00 90 	ld.w	r8,r6[144]
8002b2a4:	91 09       	st.w	r8[0x0],r9
				}
			}
		}
	}
	return;
}
8002b2a6:	2f fd       	sub	sp,-4
8002b2a8:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8002b2ac:	d6 03       	rete
8002b2ae:	00 00       	add	r0,r0
8002b2b0:	80 02       	ld.sh	r2,r0[0x0]
8002b2b2:	af da       	cbr	r10,0xf

8002b2b4 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
8002b2b4:	eb cd 40 80 	pushm	r7,lr
8002b2b8:	1a 97       	mov	r7,sp
8002b2ba:	20 5d       	sub	sp,20
8002b2bc:	ef 4c ff f4 	st.w	r7[-12],r12
8002b2c0:	ef 4b ff f0 	st.w	r7[-16],r11
8002b2c4:	ef 4a ff ec 	st.w	r7[-20],r10
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
8002b2c8:	30 08       	mov	r8,0
8002b2ca:	ef 68 ff ff 	st.b	r7[-1],r8
	f_prescaled = (pba_hz / speed / 2);
8002b2ce:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002b2d2:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002b2d6:	f0 09 0d 08 	divu	r8,r8,r9
8002b2da:	a1 98       	lsr	r8,0x1
8002b2dc:	ef 48 ff f8 	st.w	r7[-8],r8
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
8002b2e0:	c0 b8       	rjmp	8002b2f6 <twim_set_speed+0x42>
		// increase clock divider
		cwgr_exp++;
8002b2e2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002b2e6:	2f f8       	sub	r8,-1
8002b2e8:	ef 68 ff ff 	st.b	r7[-1],r8
		// divide f_prescaled value
		f_prescaled /= 2;
8002b2ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b2f0:	a1 98       	lsr	r8,0x1
8002b2f2:	ef 48 ff f8 	st.w	r7[-8],r8
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
8002b2f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b2fa:	e0 48 00 ff 	cp.w	r8,255
8002b2fe:	e0 88 00 09 	brls	8002b310 <twim_set_speed+0x5c>
8002b302:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002b306:	30 78       	mov	r8,7
8002b308:	f0 09 18 00 	cp.b	r9,r8
8002b30c:	fe 98 ff eb 	brls	8002b2e2 <twim_set_speed+0x2e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
8002b310:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002b314:	30 78       	mov	r8,7
8002b316:	f0 09 18 00 	cp.b	r9,r8
8002b31a:	e0 88 00 04 	brls	8002b322 <twim_set_speed+0x6e>
		return ERR_INVALID_ARG;
8002b31e:	3f 88       	mov	r8,-8
8002b320:	c1 a8       	rjmp	8002b354 <twim_set_speed+0xa0>
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
8002b322:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b326:	f0 09 16 01 	lsr	r9,r8,0x1
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
8002b32a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b32e:	a1 98       	lsr	r8,0x1
8002b330:	ee fa ff f8 	ld.w	r10,r7[-8]
8002b334:	f4 08 01 08 	sub	r8,r10,r8
8002b338:	a9 68       	lsl	r8,0x8
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
8002b33a:	10 49       	or	r9,r8
8002b33c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002b340:	bd 68       	lsl	r8,0x1c
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
8002b342:	10 49       	or	r9,r8
8002b344:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b348:	b1 68       	lsl	r8,0x10
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
8002b34a:	10 49       	or	r9,r8
8002b34c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b350:	91 19       	st.w	r8[0x4],r9
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
	return STATUS_OK;
8002b352:	30 08       	mov	r8,0
}
8002b354:	10 9c       	mov	r12,r8
8002b356:	2f bd       	sub	sp,-20
8002b358:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b35c <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
8002b35c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b360:	1a 97       	mov	r7,sp
8002b362:	20 4d       	sub	sp,16
8002b364:	4c 06       	lddpc	r6,8002b464 <twim_master_init+0x108>
8002b366:	1e 26       	rsub	r6,pc
8002b368:	ef 4c ff f4 	st.w	r7[-12],r12
8002b36c:	ef 4b ff f0 	st.w	r7[-16],r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8002b370:	e1 b8 00 00 	mfsr	r8,0x0
8002b374:	10 9c       	mov	r12,r8
8002b376:	c1 6e       	rcall	8002afa2 <cpu_irq_is_enabled_flags>
8002b378:	18 98       	mov	r8,r12
8002b37a:	ef 68 ff fb 	st.b	r7[-5],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002b37e:	ec f8 00 78 	ld.w	r8,r6[120]
8002b382:	30 09       	mov	r9,0
8002b384:	91 09       	st.w	r8[0x0],r9
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
8002b386:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8002b38a:	30 08       	mov	r8,0
8002b38c:	f0 09 18 00 	cp.b	r9,r8
8002b390:	c0 20       	breq	8002b394 <twim_master_init+0x38>
		cpu_irq_disable ();
8002b392:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
8002b394:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b398:	3f f9       	mov	r9,-1
8002b39a:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002b39c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b3a0:	30 19       	mov	r9,1
8002b3a2:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002b3a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b3a8:	e0 69 00 80 	mov	r9,128
8002b3ac:	91 09       	st.w	r8[0x0],r9
	if (global_interrupt_enabled) {
8002b3ae:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8002b3b2:	30 08       	mov	r8,0
8002b3b4:	f0 09 18 00 	cp.b	r9,r8
8002b3b8:	c0 20       	breq	8002b3bc <twim_master_init+0x60>
		cpu_irq_enable ();
8002b3ba:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
8002b3bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b3c0:	3f f9       	mov	r9,-1
8002b3c2:	91 b9       	st.w	r8[0x2c],r9
	
	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
8002b3c4:	fe b0 fd e0 	rcall	8002af84 <cpu_irq_save>
8002b3c8:	18 98       	mov	r8,r12
8002b3ca:	ef 48 ff fc 	st.w	r7[-4],r8
	irq_register_handler(twim_master_interrupt_handler,
8002b3ce:	30 1a       	mov	r10,1
8002b3d0:	e0 6b 03 20 	mov	r11,800
8002b3d4:	fe cc 03 f8 	sub	r12,pc,1016
8002b3d8:	f0 16 00 3b 	mcall	r6[236]
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	irq_register_handler(twim_master_interrupt_handler2,
8002b3dc:	30 1a       	mov	r10,1
8002b3de:	e0 6b 03 40 	mov	r11,832
8002b3e2:	fe cc 02 96 	sub	r12,pc,662
8002b3e6:	f0 16 00 3b 	mcall	r6[236]
	AVR32_TWIM1_IRQ , CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);
8002b3ea:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b3ee:	fe b0 fd ea 	rcall	8002afc2 <cpu_irq_restore>
	
	if (opt->smbus) {
8002b3f2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b3f6:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002b3fa:	58 08       	cp.w	r8,0
8002b3fc:	c0 90       	breq	8002b40e <twim_master_init+0xb2>
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
8002b3fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b402:	31 09       	mov	r9,16
8002b404:	91 09       	st.w	r8[0x0],r9
		twim->smbtr = (uint32_t) -1;
8002b406:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b40a:	3f f9       	mov	r9,-1
8002b40c:	91 29       	st.w	r8[0x8],r9
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) == 
8002b40e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b412:	70 09       	ld.w	r9,r8[0x0]
8002b414:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b418:	70 18       	ld.w	r8,r8[0x4]
8002b41a:	12 9a       	mov	r10,r9
8002b41c:	10 9b       	mov	r11,r8
8002b41e:	ee fc ff f4 	ld.w	r12,r7[-12]
8002b422:	f0 16 01 37 	mcall	r6[1244]
8002b426:	18 98       	mov	r8,r12
8002b428:	5b 88       	cp.w	r8,-8
8002b42a:	c0 31       	brne	8002b430 <twim_master_init+0xd4>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
8002b42c:	3f 88       	mov	r8,-8
8002b42e:	c1 68       	rjmp	8002b45a <twim_master_init+0xfe>
	}
	// Probe the component
	twim_probe (twim, opt->chip);
8002b430:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b434:	70 28       	ld.w	r8,r8[0x8]
8002b436:	10 9b       	mov	r11,r8
8002b438:	ee fc ff f4 	ld.w	r12,r7[-12]
8002b43c:	f0 16 01 0f 	mcall	r6[1084]
	//Check for nack and abitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002b440:	ec f8 00 78 	ld.w	r8,r6[120]
8002b444:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and abitration
	if (transfer_status == TWI_RECEIVE_NACK
8002b446:	5b c8       	cp.w	r8,-4
8002b448:	c0 60       	breq	8002b454 <twim_master_init+0xf8>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002b44a:	ec f8 00 78 	ld.w	r8,r6[120]
8002b44e:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and abitration
	if (transfer_status == TWI_RECEIVE_NACK
8002b450:	5b e8       	cp.w	r8,-2
8002b452:	c0 31       	brne	8002b458 <twim_master_init+0xfc>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002b454:	3f f8       	mov	r8,-1
8002b456:	c0 28       	rjmp	8002b45a <twim_master_init+0xfe>
	}
	return STATUS_OK;
8002b458:	30 08       	mov	r8,0
}
8002b45a:	10 9c       	mov	r12,r8
8002b45c:	2f cd       	sub	sp,-16
8002b45e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b462:	00 00       	add	r0,r0
8002b464:	80 02       	ld.sh	r2,r0[0x0]
8002b466:	b1 ea       	*unknown*

8002b468 <twim_disable_interrupt>:
 * \brief Disable the TWI interrupts and clear its status register
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
8002b468:	eb cd 40 c0 	pushm	r6-r7,lr
8002b46c:	1a 97       	mov	r7,sp
8002b46e:	20 2d       	sub	sp,8
8002b470:	48 f6       	lddpc	r6,8002b4ac <twim_disable_interrupt+0x44>
8002b472:	1e 26       	rsub	r6,pc
8002b474:	ef 4c ff f8 	st.w	r7[-8],r12
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8002b478:	e1 b8 00 00 	mfsr	r8,0x0
8002b47c:	10 9c       	mov	r12,r8
8002b47e:	fe b0 fd 92 	rcall	8002afa2 <cpu_irq_is_enabled_flags>
8002b482:	18 98       	mov	r8,r12
8002b484:	ef 68 ff ff 	st.b	r7[-1],r8
	if (global_interrupt_enabled) {
8002b488:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002b48c:	30 08       	mov	r8,0
8002b48e:	f0 09 18 00 	cp.b	r9,r8
8002b492:	c0 20       	breq	8002b496 <twim_disable_interrupt+0x2e>
		cpu_irq_disable ();
8002b494:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
8002b496:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b49a:	3f f9       	mov	r9,-1
8002b49c:	91 99       	st.w	r8[0x24],r9
	// Clear the status flags
	twim->scr = ~0UL;
8002b49e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b4a2:	3f f9       	mov	r9,-1
8002b4a4:	91 b9       	st.w	r8[0x2c],r9
}
8002b4a6:	2f ed       	sub	sp,-8
8002b4a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b4ac:	80 02       	ld.sh	r2,r0[0x0]
8002b4ae:	b2 f6       	st.b	r9[0x7],r6

8002b4b0 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
8002b4b0:	eb cd 40 c0 	pushm	r6-r7,lr
8002b4b4:	1a 97       	mov	r7,sp
8002b4b6:	20 3d       	sub	sp,12
8002b4b8:	48 c6       	lddpc	r6,8002b4e8 <twim_probe+0x38>
8002b4ba:	1e 26       	rsub	r6,pc
8002b4bc:	ef 4c ff f8 	st.w	r7[-8],r12
8002b4c0:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t data[1] = { 0 };
8002b4c4:	30 08       	mov	r8,0
8002b4c6:	ef 68 ff fc 	st.b	r7[-4],r8
	return (twim_write (twim,data,0,chip_addr,0));
8002b4ca:	ee cb 00 04 	sub	r11,r7,4
8002b4ce:	30 08       	mov	r8,0
8002b4d0:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b4d4:	30 0a       	mov	r10,0
8002b4d6:	ee fc ff f8 	ld.w	r12,r7[-8]
8002b4da:	f0 16 00 36 	mcall	r6[216]
8002b4de:	18 98       	mov	r8,r12
}
8002b4e0:	10 9c       	mov	r12,r8
8002b4e2:	2f dd       	sub	sp,-12
8002b4e4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b4e8:	80 02       	ld.sh	r2,r0[0x0]
8002b4ea:	b3 3e       	mul	lr,r9

8002b4ec <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
8002b4ec:	eb cd 40 c0 	pushm	r6-r7,lr
8002b4f0:	1a 97       	mov	r7,sp
8002b4f2:	20 2d       	sub	sp,8
8002b4f4:	4e 76       	lddpc	r6,8002b690 <twim_read_packet+0x1a4>
8002b4f6:	1e 26       	rsub	r6,pc
8002b4f8:	ef 4c ff fc 	st.w	r7[-4],r12
8002b4fc:	ef 4b ff f8 	st.w	r7[-8],r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002b500:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b504:	30 29       	mov	r9,2
8002b506:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002b508:	ec f8 00 40 	ld.w	r8,r6[64]
8002b50c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002b510:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002b512:	ec f8 00 40 	ld.w	r8,r6[64]
8002b516:	70 08       	ld.w	r8,r8[0x0]
8002b518:	10 9c       	mov	r12,r8
8002b51a:	f0 16 00 85 	mcall	r6[532]
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
8002b51e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b522:	70 38       	ld.w	r8,r8[0xc]
8002b524:	10 99       	mov	r9,r8
8002b526:	ec f8 00 c0 	ld.w	r8,r6[192]
8002b52a:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
8002b52c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b530:	70 49       	ld.w	r9,r8[0x10]
8002b532:	ec f8 01 58 	ld.w	r8,r6[344]
8002b536:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
8002b538:	ec f9 00 bc 	ld.w	r9,r6[188]
8002b53c:	30 08       	mov	r8,0
8002b53e:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002b540:	ec f8 00 78 	ld.w	r8,r6[120]
8002b544:	30 09       	mov	r9,0
8002b546:	91 09       	st.w	r8[0x0],r9
	//check if internal address access is performed
	if (package->addr_length) {
8002b548:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b54c:	f1 38 00 08 	ld.ub	r8,r8[8]
8002b550:	58 08       	cp.w	r8,0
8002b552:	c5 60       	breq	8002b5fe <twim_read_packet+0x112>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002b554:	ec f8 00 40 	ld.w	r8,r6[64]
8002b558:	70 08       	ld.w	r8,r8[0x0]
8002b55a:	30 19       	mov	r9,1
8002b55c:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
8002b55e:	ec f8 00 40 	ld.w	r8,r6[64]
8002b562:	70 08       	ld.w	r8,r8[0x0]
8002b564:	e0 69 00 80 	mov	r9,128
8002b568:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
8002b56a:	ec f8 00 40 	ld.w	r8,r6[64]
8002b56e:	70 08       	ld.w	r8,r8[0x0]
8002b570:	30 29       	mov	r9,2
8002b572:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = (uint8_t *) (&(package->addr));
8002b574:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b578:	2f c8       	sub	r8,-4
8002b57a:	10 99       	mov	r9,r8
8002b57c:	ec f8 00 90 	ld.w	r8,r6[144]
8002b580:	91 09       	st.w	r8[0x0],r9
		twim_tx_data += (4 - package->addr_length);
8002b582:	ec f8 00 90 	ld.w	r8,r6[144]
8002b586:	70 09       	ld.w	r9,r8[0x0]
8002b588:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b58c:	f1 38 00 08 	ld.ub	r8,r8[8]
8002b590:	f0 08 11 04 	rsub	r8,r8,4
8002b594:	10 09       	add	r9,r8
8002b596:	ec f8 00 90 	ld.w	r8,r6[144]
8002b59a:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
8002b59c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b5a0:	f1 38 00 08 	ld.ub	r8,r8[8]
8002b5a4:	10 99       	mov	r9,r8
8002b5a6:	ec f8 00 84 	ld.w	r8,r6[132]
8002b5aa:	91 09       	st.w	r8[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | 
8002b5ac:	ec f8 01 08 	ld.w	r8,r6[264]
8002b5b0:	e0 69 07 03 	mov	r9,1795
8002b5b4:	91 09       	st.w	r8[0x0],r9
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002b5b6:	ec f8 00 40 	ld.w	r8,r6[64]
8002b5ba:	70 08       	ld.w	r8,r8[0x0]
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002b5bc:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b5c0:	72 09       	ld.w	r9,r9[0x0]
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | 
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002b5c2:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002b5c6:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b5ca:	f3 39 00 08 	ld.ub	r9,r9[8]
8002b5ce:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002b5d0:	f5 e9 10 09 	or	r9,r10,r9
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | 
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002b5d4:	e8 19 a0 00 	orl	r9,0xa000
8002b5d8:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8002b5da:	ec f8 00 40 	ld.w	r8,r6[64]
8002b5de:	70 08       	ld.w	r8,r8[0x0]
8002b5e0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b5e4:	72 09       	ld.w	r9,r9[0x0]
8002b5e6:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002b5ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b5ee:	72 49       	ld.w	r9,r9[0x10]
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002b5f0:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002b5f2:	f5 e9 10 09 	or	r9,r10,r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8002b5f6:	e8 19 e0 01 	orl	r9,0xe001
8002b5fa:	91 49       	st.w	r8[0x10],r9
8002b5fc:	c1 b8       	rjmp	8002b632 <twim_read_packet+0x146>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
8002b5fe:	ec f8 00 84 	ld.w	r8,r6[132]
8002b602:	30 09       	mov	r9,0
8002b604:	91 09       	st.w	r8[0x0],r9
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
8002b606:	ec f8 01 08 	ld.w	r8,r6[264]
8002b60a:	e0 69 07 01 	mov	r9,1793
8002b60e:	91 09       	st.w	r8[0x0],r9
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002b610:	ec f8 00 40 	ld.w	r8,r6[64]
8002b614:	70 08       	ld.w	r8,r8[0x0]
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002b616:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b61a:	72 09       	ld.w	r9,r9[0x0]
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002b61c:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002b620:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b624:	72 49       	ld.w	r9,r9[0x10]
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002b626:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002b628:	f5 e9 10 09 	or	r9,r10,r9
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002b62c:	e8 19 e0 01 	orl	r9,0xe001
8002b630:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8002b632:	ec f8 00 40 	ld.w	r8,r6[64]
8002b636:	70 08       	ld.w	r8,r8[0x0]
8002b638:	ec f9 01 08 	ld.w	r9,r6[264]
8002b63c:	72 09       	ld.w	r9,r9[0x0]
8002b63e:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002b640:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b644:	30 19       	mov	r9,1
8002b646:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8002b648:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8002b64a:	c0 38       	rjmp	8002b650 <twim_read_packet+0x164>
		cpu_relax();
8002b64c:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8002b650:	ec f8 00 78 	ld.w	r8,r6[120]
8002b654:	70 08       	ld.w	r8,r8[0x0]
8002b656:	58 08       	cp.w	r8,0
8002b658:	c0 61       	brne	8002b664 <twim_read_packet+0x178>
8002b65a:	f0 16 00 74 	mcall	r6[464]
8002b65e:	18 98       	mov	r8,r12
8002b660:	58 08       	cp.w	r8,0
8002b662:	cf 50       	breq	8002b64c <twim_read_packet+0x160>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002b664:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b668:	30 29       	mov	r9,2
8002b66a:	91 09       	st.w	r8[0x0],r9
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002b66c:	ec f8 00 78 	ld.w	r8,r6[120]
8002b670:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
8002b672:	5b c8       	cp.w	r8,-4
8002b674:	c0 60       	breq	8002b680 <twim_read_packet+0x194>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002b676:	ec f8 00 78 	ld.w	r8,r6[120]
8002b67a:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
8002b67c:	5b e8       	cp.w	r8,-2
8002b67e:	c0 31       	brne	8002b684 <twim_read_packet+0x198>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002b680:	3f f8       	mov	r8,-1
8002b682:	c0 28       	rjmp	8002b686 <twim_read_packet+0x19a>
	}
	return STATUS_OK;
8002b684:	30 08       	mov	r8,0
}
8002b686:	10 9c       	mov	r12,r8
8002b688:	2f ed       	sub	sp,-8
8002b68a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b68e:	00 00       	add	r0,r0
8002b690:	80 02       	ld.sh	r2,r0[0x0]
8002b692:	b3 7a       	lsl	r10,0x13

8002b694 <twim_read>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read (volatile avr32_twim_t *twim, uint8_t *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
8002b694:	eb cd 40 c0 	pushm	r6-r7,lr
8002b698:	1a 97       	mov	r7,sp
8002b69a:	20 5d       	sub	sp,20
8002b69c:	4c c6       	lddpc	r6,8002b7cc <twim_read+0x138>
8002b69e:	1e 26       	rsub	r6,pc
8002b6a0:	ef 4c ff fc 	st.w	r7[-4],r12
8002b6a4:	ef 4b ff f8 	st.w	r7[-8],r11
8002b6a8:	ef 4a ff f4 	st.w	r7[-12],r10
8002b6ac:	ef 49 ff f0 	st.w	r7[-16],r9
8002b6b0:	ef 68 ff ec 	st.b	r7[-20],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002b6b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b6b8:	30 19       	mov	r9,1
8002b6ba:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002b6bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b6c0:	e0 69 00 80 	mov	r9,128
8002b6c4:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002b6c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b6ca:	30 29       	mov	r9,2
8002b6cc:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002b6ce:	ec f8 00 40 	ld.w	r8,r6[64]
8002b6d2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002b6d6:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002b6d8:	ec f8 00 40 	ld.w	r8,r6[64]
8002b6dc:	70 08       	ld.w	r8,r8[0x0]
8002b6de:	10 9c       	mov	r12,r8
8002b6e0:	f0 16 00 85 	mcall	r6[532]
	// get a pointer to applicative data
	twim_rx_data = buffer;
8002b6e4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b6e8:	ec f8 00 c0 	ld.w	r8,r6[192]
8002b6ec:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = nbytes;
8002b6ee:	ec f8 01 58 	ld.w	r8,r6[344]
8002b6f2:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b6f6:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
8002b6f8:	ec f9 00 bc 	ld.w	r9,r6[188]
8002b6fc:	30 08       	mov	r8,0
8002b6fe:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002b700:	ec f8 00 78 	ld.w	r8,r6[120]
8002b704:	30 09       	mov	r9,0
8002b706:	91 09       	st.w	r8[0x0],r9
	//tenbit need special handling
	if (tenbit)	{
8002b708:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002b70c:	30 08       	mov	r8,0
8002b70e:	f0 09 18 00 	cp.b	r9,r8
8002b712:	c1 a0       	breq	8002b746 <twim_read+0xb2>
		twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002b714:	ec f8 00 40 	ld.w	r8,r6[64]
8002b718:	70 08       	ld.w	r8,r8[0x0]
8002b71a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002b71e:	a1 79       	lsl	r9,0x1
8002b720:	e8 19 a8 00 	orl	r9,0xa800
8002b724:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim_inst->ncmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002b726:	ec f8 00 40 	ld.w	r8,r6[64]
8002b72a:	70 08       	ld.w	r8,r8[0x0]
8002b72c:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002b730:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002b734:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b738:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002b73a:	f5 e9 10 09 	or	r9,r10,r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim_inst->ncmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002b73e:	e8 19 f8 01 	orl	r9,0xf801
8002b742:	91 49       	st.w	r8[0x10],r9
8002b744:	c1 08       	rjmp	8002b764 <twim_read+0xd0>
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002b746:	ec f8 00 40 	ld.w	r8,r6[64]
8002b74a:	70 08       	ld.w	r8,r8[0x0]
8002b74c:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002b750:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002b754:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b758:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002b75a:	f5 e9 10 09 	or	r9,r10,r9
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002b75e:	e8 19 e0 01 	orl	r9,0xe001
8002b762:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (0 << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// mask NACK and RXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
8002b764:	ec f8 01 08 	ld.w	r8,r6[264]
8002b768:	e0 69 07 01 	mov	r9,1793
8002b76c:	91 09       	st.w	r8[0x0],r9
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8002b76e:	ec f8 00 40 	ld.w	r8,r6[64]
8002b772:	70 08       	ld.w	r8,r8[0x0]
8002b774:	ec f9 01 08 	ld.w	r9,r6[264]
8002b778:	72 09       	ld.w	r9,r9[0x0]
8002b77a:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002b77c:	ec f8 00 40 	ld.w	r8,r6[64]
8002b780:	70 08       	ld.w	r8,r8[0x0]
8002b782:	30 19       	mov	r9,1
8002b784:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8002b786:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8002b788:	c0 38       	rjmp	8002b78e <twim_read+0xfa>
		cpu_relax();
8002b78a:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8002b78e:	ec f8 00 78 	ld.w	r8,r6[120]
8002b792:	70 08       	ld.w	r8,r8[0x0]
8002b794:	58 08       	cp.w	r8,0
8002b796:	c0 61       	brne	8002b7a2 <twim_read+0x10e>
8002b798:	f0 16 00 74 	mcall	r6[464]
8002b79c:	18 98       	mov	r8,r12
8002b79e:	58 08       	cp.w	r8,0
8002b7a0:	cf 50       	breq	8002b78a <twim_read+0xf6>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002b7a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b7a6:	30 29       	mov	r9,2
8002b7a8:	91 09       	st.w	r8[0x0],r9
	//Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002b7aa:	ec f8 00 78 	ld.w	r8,r6[120]
8002b7ae:	70 08       	ld.w	r8,r8[0x0]
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	//Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8002b7b0:	5b c8       	cp.w	r8,-4
8002b7b2:	c0 60       	breq	8002b7be <twim_read+0x12a>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002b7b4:	ec f8 00 78 	ld.w	r8,r6[120]
8002b7b8:	70 08       	ld.w	r8,r8[0x0]
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	//Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8002b7ba:	5b e8       	cp.w	r8,-2
8002b7bc:	c0 31       	brne	8002b7c2 <twim_read+0x12e>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002b7be:	3f f8       	mov	r8,-1
8002b7c0:	c0 28       	rjmp	8002b7c4 <twim_read+0x130>
	}
	return STATUS_OK;
8002b7c2:	30 08       	mov	r8,0
}
8002b7c4:	10 9c       	mov	r12,r8
8002b7c6:	2f bd       	sub	sp,-20
8002b7c8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b7cc:	80 02       	ld.sh	r2,r0[0x0]
8002b7ce:	b5 22       	st.d	r10++,r2

8002b7d0 <twim_write_packet>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
8002b7d0:	eb cd 40 c0 	pushm	r6-r7,lr
8002b7d4:	1a 97       	mov	r7,sp
8002b7d6:	20 2d       	sub	sp,8
8002b7d8:	4f 16       	lddpc	r6,8002b99c <twim_write_packet+0x1cc>
8002b7da:	1e 26       	rsub	r6,pc
8002b7dc:	ef 4c ff fc 	st.w	r7[-4],r12
8002b7e0:	ef 4b ff f8 	st.w	r7[-8],r11
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002b7e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b7e8:	30 19       	mov	r9,1
8002b7ea:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002b7ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b7f0:	e0 69 00 80 	mov	r9,128
8002b7f4:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002b7f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b7fa:	30 29       	mov	r9,2
8002b7fc:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002b7fe:	ec f8 00 40 	ld.w	r8,r6[64]
8002b802:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002b806:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002b808:	ec f8 00 40 	ld.w	r8,r6[64]
8002b80c:	70 08       	ld.w	r8,r8[0x0]
8002b80e:	10 9c       	mov	r12,r8
8002b810:	f0 16 00 85 	mcall	r6[532]
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002b814:	ec f8 00 78 	ld.w	r8,r6[120]
8002b818:	30 09       	mov	r9,0
8002b81a:	91 09       	st.w	r8[0x0],r9
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_TXRDY_MASK;
8002b81c:	ec f8 01 08 	ld.w	r8,r6[264]
8002b820:	e0 69 07 02 	mov	r9,1794
8002b824:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
8002b826:	ec f9 00 bc 	ld.w	r9,r6[188]
8002b82a:	30 08       	mov	r8,0
8002b82c:	b2 88       	st.b	r9[0x0],r8
	//check if internal address access is performed
	if (package->addr_length) {
8002b82e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b832:	f1 38 00 08 	ld.ub	r8,r8[8]
8002b836:	58 08       	cp.w	r8,0
8002b838:	c6 40       	breq	8002b900 <twim_write_packet+0x130>
		// selection of first valid byte of the address
		twim_tx_data = (uint8_t *) (&(package->addr));
8002b83a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b83e:	2f c8       	sub	r8,-4
8002b840:	10 99       	mov	r9,r8
8002b842:	ec f8 00 90 	ld.w	r8,r6[144]
8002b846:	91 09       	st.w	r8[0x0],r9
		twim_tx_data += (4 - package->addr_length);
8002b848:	ec f8 00 90 	ld.w	r8,r6[144]
8002b84c:	70 09       	ld.w	r9,r8[0x0]
8002b84e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b852:	f1 38 00 08 	ld.ub	r8,r8[8]
8002b856:	f0 08 11 04 	rsub	r8,r8,4
8002b85a:	10 09       	add	r9,r8
8002b85c:	ec f8 00 90 	ld.w	r8,r6[144]
8002b860:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
8002b862:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b866:	f1 38 00 08 	ld.ub	r8,r8[8]
8002b86a:	10 99       	mov	r9,r8
8002b86c:	ec f8 00 84 	ld.w	r8,r6[132]
8002b870:	91 09       	st.w	r8[0x0],r9
		// Initiate the transfer to send the internal address
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002b872:	ec f8 00 40 	ld.w	r8,r6[64]
8002b876:	70 08       	ld.w	r8,r8[0x0]
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002b878:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b87c:	72 09       	ld.w	r9,r9[0x0]
		twim_tx_data = (uint8_t *) (&(package->addr));
		twim_tx_data += (4 - package->addr_length);
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
		// Initiate the transfer to send the internal address
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002b87e:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002b882:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b886:	f3 39 00 08 	ld.ub	r9,r9[8]
8002b88a:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002b88c:	f5 e9 10 09 	or	r9,r10,r9
		twim_tx_data = (uint8_t *) (&(package->addr));
		twim_tx_data += (4 - package->addr_length);
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
		// Initiate the transfer to send the internal address
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002b890:	e8 19 a0 00 	orl	r9,0xa000
8002b894:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set next transfer to true
		twim_next = true;
8002b896:	ec f9 00 bc 	ld.w	r9,r6[188]
8002b89a:	30 18       	mov	r8,1
8002b89c:	b2 88       	st.b	r9[0x0],r8
		// Set the number of bytes & address for next transfer
		twim_package = package;
8002b89e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b8a2:	ec f8 02 1c 	ld.w	r8,r6[540]
8002b8a6:	91 09       	st.w	r8[0x0],r9
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8002b8a8:	ec f8 00 40 	ld.w	r8,r6[64]
8002b8ac:	70 08       	ld.w	r8,r8[0x0]
8002b8ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b8b2:	72 09       	ld.w	r9,r9[0x0]
8002b8b4:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002b8b8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b8bc:	72 49       	ld.w	r9,r9[0x10]
		twim_next = true;
		// Set the number of bytes & address for next transfer
		twim_package = package;
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002b8be:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002b8c0:	f5 e9 10 09 	or	r9,r10,r9
		// set next transfer to true
		twim_next = true;
		// Set the number of bytes & address for next transfer
		twim_package = package;
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8002b8c4:	e8 19 e0 00 	orl	r9,0xe000
8002b8c8:	91 49       	st.w	r8[0x10],r9
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// update IMR through IER
		twim_inst->ier = twim_it_mask;
8002b8ca:	ec f8 00 40 	ld.w	r8,r6[64]
8002b8ce:	70 08       	ld.w	r8,r8[0x0]
8002b8d0:	ec f9 01 08 	ld.w	r9,r6[264]
8002b8d4:	72 09       	ld.w	r9,r9[0x0]
8002b8d6:	91 89       	st.w	r8[0x20],r9
		// Enable master transfer
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002b8d8:	ec f8 00 40 	ld.w	r8,r6[64]
8002b8dc:	70 08       	ld.w	r8,r8[0x0]
8002b8de:	30 19       	mov	r9,1
8002b8e0:	91 09       	st.w	r8[0x0],r9
		// Enable all interrupts
		cpu_irq_enable ();
8002b8e2:	d5 03       	csrf	0x10
		// wait until Busy to be false
		while (!(transfer_status) && !(twim_status ())) {
8002b8e4:	c0 38       	rjmp	8002b8ea <twim_write_packet+0x11a>
		cpu_relax();
8002b8e6:	fe cf ff fc 	sub	pc,pc,-4
		// Enable master transfer
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
		// Enable all interrupts
		cpu_irq_enable ();
		// wait until Busy to be false
		while (!(transfer_status) && !(twim_status ())) {
8002b8ea:	ec f8 00 78 	ld.w	r8,r6[120]
8002b8ee:	70 08       	ld.w	r8,r8[0x0]
8002b8f0:	58 08       	cp.w	r8,0
8002b8f2:	c3 f1       	brne	8002b970 <twim_write_packet+0x1a0>
8002b8f4:	f0 16 00 74 	mcall	r6[464]
8002b8f8:	18 98       	mov	r8,r12
8002b8fa:	58 08       	cp.w	r8,0
8002b8fc:	cf 50       	breq	8002b8e6 <twim_write_packet+0x116>
8002b8fe:	c3 98       	rjmp	8002b970 <twim_write_packet+0x1a0>
		cpu_relax();
		}
	} else {
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
8002b900:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b904:	70 38       	ld.w	r8,r8[0xc]
8002b906:	10 99       	mov	r9,r8
8002b908:	ec f8 00 90 	ld.w	r8,r6[144]
8002b90c:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
8002b90e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b912:	70 49       	ld.w	r9,r8[0x10]
8002b914:	ec f8 00 84 	ld.w	r8,r6[132]
8002b918:	91 09       	st.w	r8[0x0],r9
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002b91a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b91e:	70 08       	ld.w	r8,r8[0x0]
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002b920:	f0 09 15 01 	lsl	r9,r8,0x1
			| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002b924:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b928:	70 48       	ld.w	r8,r8[0x10]
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002b92a:	b1 68       	lsl	r8,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002b92c:	f3 e8 10 08 	or	r8,r9,r8
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002b930:	10 99       	mov	r9,r8
8002b932:	e8 19 e0 00 	orl	r9,0xe000
8002b936:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b93a:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_VALID_MASK)
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK) 
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8002b93c:	ec f8 00 40 	ld.w	r8,r6[64]
8002b940:	70 08       	ld.w	r8,r8[0x0]
8002b942:	ec f9 01 08 	ld.w	r9,r6[264]
8002b946:	72 09       	ld.w	r9,r9[0x0]
8002b948:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002b94a:	ec f8 00 40 	ld.w	r8,r6[64]
8002b94e:	70 08       	ld.w	r8,r8[0x0]
8002b950:	30 19       	mov	r9,1
8002b952:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8002b954:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8002b956:	c0 38       	rjmp	8002b95c <twim_write_packet+0x18c>
		cpu_relax();
8002b958:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8002b95c:	ec f8 00 78 	ld.w	r8,r6[120]
8002b960:	70 08       	ld.w	r8,r8[0x0]
8002b962:	58 08       	cp.w	r8,0
8002b964:	c0 61       	brne	8002b970 <twim_write_packet+0x1a0>
8002b966:	f0 16 00 74 	mcall	r6[464]
8002b96a:	18 98       	mov	r8,r12
8002b96c:	58 08       	cp.w	r8,0
8002b96e:	cf 50       	breq	8002b958 <twim_write_packet+0x188>
		cpu_relax();
	}}
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002b970:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b974:	30 29       	mov	r9,2
8002b976:	91 09       	st.w	r8[0x0],r9
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002b978:	ec f8 00 78 	ld.w	r8,r6[120]
8002b97c:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8002b97e:	5b c8       	cp.w	r8,-4
8002b980:	c0 60       	breq	8002b98c <twim_write_packet+0x1bc>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002b982:	ec f8 00 78 	ld.w	r8,r6[120]
8002b986:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8002b988:	5b e8       	cp.w	r8,-2
8002b98a:	c0 31       	brne	8002b990 <twim_write_packet+0x1c0>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002b98c:	3f f8       	mov	r8,-1
8002b98e:	c0 28       	rjmp	8002b992 <twim_write_packet+0x1c2>
	}
	return STATUS_OK;
8002b990:	30 08       	mov	r8,0
}
8002b992:	10 9c       	mov	r12,r8
8002b994:	2f ed       	sub	sp,-8
8002b996:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b99a:	00 00       	add	r0,r0
8002b99c:	80 02       	ld.sh	r2,r0[0x0]
8002b99e:	b6 5e       	st.h	r11[0xa],lr

8002b9a0 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
8002b9a0:	eb cd 40 c0 	pushm	r6-r7,lr
8002b9a4:	1a 97       	mov	r7,sp
8002b9a6:	20 5d       	sub	sp,20
8002b9a8:	4b f6       	lddpc	r6,8002baa4 <twim_write+0x104>
8002b9aa:	1e 26       	rsub	r6,pc
8002b9ac:	ef 4c ff fc 	st.w	r7[-4],r12
8002b9b0:	ef 4b ff f8 	st.w	r7[-8],r11
8002b9b4:	ef 4a ff f4 	st.w	r7[-12],r10
8002b9b8:	ef 49 ff f0 	st.w	r7[-16],r9
8002b9bc:	ef 68 ff ec 	st.b	r7[-20],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002b9c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b9c4:	30 19       	mov	r9,1
8002b9c6:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002b9c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b9cc:	e0 69 00 80 	mov	r9,128
8002b9d0:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002b9d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b9d6:	30 29       	mov	r9,2
8002b9d8:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002b9da:	ec f8 00 40 	ld.w	r8,r6[64]
8002b9de:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002b9e2:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002b9e4:	ec f8 00 40 	ld.w	r8,r6[64]
8002b9e8:	70 08       	ld.w	r8,r8[0x0]
8002b9ea:	10 9c       	mov	r12,r8
8002b9ec:	f0 16 00 85 	mcall	r6[532]
	// get a pointer to applicative data
	twim_tx_data = buffer;
8002b9f0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b9f4:	ec f8 00 90 	ld.w	r8,r6[144]
8002b9f8:	91 09       	st.w	r8[0x0],r9
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
8002b9fa:	ec f8 00 84 	ld.w	r8,r6[132]
8002b9fe:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002ba02:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
8002ba04:	ec f9 00 bc 	ld.w	r9,r6[188]
8002ba08:	30 08       	mov	r8,0
8002ba0a:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002ba0c:	ec f8 00 78 	ld.w	r8,r6[120]
8002ba10:	30 09       	mov	r9,0
8002ba12:	91 09       	st.w	r8[0x0],r9
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002ba14:	ec f8 00 40 	ld.w	r8,r6[64]
8002ba18:	70 08       	ld.w	r8,r8[0x0]
8002ba1a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002ba1e:	f2 0a 15 01 	lsl	r10,r9,0x1
			| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002ba22:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002ba26:	b1 69       	lsl	r9,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002ba28:	12 4a       	or	r10,r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
8002ba2a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002ba2e:	ab 79       	lsl	r9,0xb
	// Set next transfer to false
	twim_next = false;
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002ba30:	f5 e9 10 09 	or	r9,r10,r9
8002ba34:	e8 19 e0 00 	orl	r9,0xe000
8002ba38:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
8002ba3a:	ec f8 01 08 	ld.w	r8,r6[264]
8002ba3e:	e0 69 03 02 	mov	r9,770
8002ba42:	91 09       	st.w	r8[0x0],r9
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8002ba44:	ec f8 00 40 	ld.w	r8,r6[64]
8002ba48:	70 08       	ld.w	r8,r8[0x0]
8002ba4a:	ec f9 01 08 	ld.w	r9,r6[264]
8002ba4e:	72 09       	ld.w	r9,r9[0x0]
8002ba50:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002ba52:	ec f8 00 40 	ld.w	r8,r6[64]
8002ba56:	70 08       	ld.w	r8,r8[0x0]
8002ba58:	30 19       	mov	r9,1
8002ba5a:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8002ba5c:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8002ba5e:	c0 38       	rjmp	8002ba64 <twim_write+0xc4>
		cpu_relax();
8002ba60:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8002ba64:	ec f8 00 78 	ld.w	r8,r6[120]
8002ba68:	70 08       	ld.w	r8,r8[0x0]
8002ba6a:	58 08       	cp.w	r8,0
8002ba6c:	c0 61       	brne	8002ba78 <twim_write+0xd8>
8002ba6e:	f0 16 00 74 	mcall	r6[464]
8002ba72:	18 98       	mov	r8,r12
8002ba74:	58 08       	cp.w	r8,0
8002ba76:	cf 50       	breq	8002ba60 <twim_write+0xc0>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002ba78:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ba7c:	30 29       	mov	r9,2
8002ba7e:	91 09       	st.w	r8[0x0],r9
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002ba80:	ec f8 00 78 	ld.w	r8,r6[120]
8002ba84:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
8002ba86:	5b c8       	cp.w	r8,-4
8002ba88:	c0 60       	breq	8002ba94 <twim_write+0xf4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002ba8a:	ec f8 00 78 	ld.w	r8,r6[120]
8002ba8e:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
8002ba90:	5b e8       	cp.w	r8,-2
8002ba92:	c0 31       	brne	8002ba98 <twim_write+0xf8>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002ba94:	3f f8       	mov	r8,-1
8002ba96:	c0 28       	rjmp	8002ba9a <twim_write+0xfa>
	}
	return STATUS_OK;
8002ba98:	30 08       	mov	r8,0
}
8002ba9a:	10 9c       	mov	r12,r8
8002ba9c:	2f bd       	sub	sp,-20
8002ba9e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002baa2:	00 00       	add	r0,r0
8002baa4:	80 02       	ld.sh	r2,r0[0x0]
8002baa6:	b8 2e       	st.h	r12[0x4],lr

8002baa8 <twim_chained_transfer>:
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_chained_transfer (volatile avr32_twim_t *twim,
		volatile twim_transfer_t *first,
		volatile twim_transfer_t *second, bool tenbit)
{
8002baa8:	eb cd 40 c0 	pushm	r6-r7,lr
8002baac:	1a 97       	mov	r7,sp
8002baae:	20 4d       	sub	sp,16
8002bab0:	fe f6 03 4c 	ld.w	r6,pc[844]
8002bab4:	1e 26       	rsub	r6,pc
8002bab6:	ef 4c ff fc 	st.w	r7[-4],r12
8002baba:	ef 4b ff f8 	st.w	r7[-8],r11
8002babe:	ef 4a ff f4 	st.w	r7[-12],r10
8002bac2:	12 98       	mov	r8,r9
8002bac4:	ef 68 ff f0 	st.b	r7[-16],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002bac8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bacc:	30 19       	mov	r9,1
8002bace:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002bad0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bad4:	e0 69 00 80 	mov	r9,128
8002bad8:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002bada:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bade:	30 29       	mov	r9,2
8002bae0:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002bae2:	ec f8 00 40 	ld.w	r8,r6[64]
8002bae6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002baea:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002baec:	ec f8 00 40 	ld.w	r8,r6[64]
8002baf0:	70 08       	ld.w	r8,r8[0x0]
8002baf2:	10 9c       	mov	r12,r8
8002baf4:	f0 16 00 85 	mcall	r6[532]
	// Set next transfer to false
	twim_next = false;
8002baf8:	ec f9 00 bc 	ld.w	r9,r6[188]
8002bafc:	30 08       	mov	r8,0
8002bafe:	b2 88       	st.b	r9[0x0],r8
	transfer_status = TWI_SUCCESS;
8002bb00:	ec f8 00 78 	ld.w	r8,r6[120]
8002bb04:	30 09       	mov	r9,0
8002bb06:	91 09       	st.w	r8[0x0],r9
	if (tenbit && first->read) {
8002bb08:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002bb0c:	30 08       	mov	r8,0
8002bb0e:	f0 09 18 00 	cp.b	r9,r8
8002bb12:	c3 00       	breq	8002bb72 <twim_chained_transfer+0xca>
8002bb14:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bb18:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002bb1c:	5c 58       	castu.b	r8
8002bb1e:	c2 a0       	breq	8002bb72 <twim_chained_transfer+0xca>
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (0 << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002bb20:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bb24:	70 08       	ld.w	r8,r8[0x0]
	twim_disable_interrupt (twim_inst);
	// Set next transfer to false
	twim_next = false;
	transfer_status = TWI_SUCCESS;
	if (tenbit && first->read) {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002bb26:	a1 78       	lsl	r8,0x1
8002bb28:	10 99       	mov	r9,r8
8002bb2a:	e8 19 a8 00 	orl	r9,0xa800
8002bb2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bb32:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim->ncmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002bb34:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bb38:	70 08       	ld.w	r8,r8[0x0]
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim->ncmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002bb3a:	f0 09 15 01 	lsl	r9,r8,0x1
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002bb3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bb42:	70 28       	ld.w	r8,r8[0x8]
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim->ncmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002bb44:	b1 68       	lsl	r8,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002bb46:	f3 e8 10 08 	or	r8,r9,r8
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim->ncmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002bb4a:	10 99       	mov	r9,r8
8002bb4c:	e8 19 b8 01 	orl	r9,0xb801
8002bb50:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bb54:	91 49       	st.w	r8[0x10],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002bb56:	c0 38       	rjmp	8002bb5c <twim_chained_transfer+0xb4>
			cpu_relax();
8002bb58:	fe cf ff fc 	sub	pc,pc,-4
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002bb5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bb60:	70 78       	ld.w	r8,r8[0x1c]
8002bb62:	e2 18 00 08 	andl	r8,0x8,COH
8002bb66:	cf 90       	breq	8002bb58 <twim_chained_transfer+0xb0>
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
8002bb68:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bb6c:	30 89       	mov	r9,8
8002bb6e:	91 b9       	st.w	r8[0x2c],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
	// Set next transfer to false
	twim_next = false;
	transfer_status = TWI_SUCCESS;
	if (tenbit && first->read) {
8002bb70:	c1 c8       	rjmp	8002bba8 <twim_chained_transfer+0x100>
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002bb72:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bb76:	70 08       	ld.w	r8,r8[0x0]
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002bb78:	f0 09 15 01 	lsl	r9,r8,0x1
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002bb7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bb80:	70 28       	ld.w	r8,r8[0x8]
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002bb82:	b1 68       	lsl	r8,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002bb84:	10 49       	or	r9,r8
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
8002bb86:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8002bb8a:	ab 78       	lsl	r8,0xb
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002bb8c:	10 49       	or	r9,r8
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
8002bb8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bb92:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002bb96:	5c 58       	castu.b	r8
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002bb98:	f3 e8 10 08 	or	r8,r9,r8
8002bb9c:	10 99       	mov	r9,r8
8002bb9e:	e8 19 a0 00 	orl	r9,0xa000
8002bba2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bba6:	91 39       	st.w	r8[0xc],r9
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| (second->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002bba8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bbac:	70 08       	ld.w	r8,r8[0x0]
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002bbae:	f0 09 15 01 	lsl	r9,r8,0x1
			| (second->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002bbb2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bbb6:	70 28       	ld.w	r8,r8[0x8]
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| (second->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002bbb8:	b1 68       	lsl	r8,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002bbba:	10 49       	or	r9,r8
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
8002bbbc:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8002bbc0:	ab 78       	lsl	r8,0xb
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002bbc2:	f3 e8 10 0a 	or	r10,r9,r8
			| (second->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (((tenbit && second->read) ? 1 : 0) 
8002bbc6:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002bbca:	30 08       	mov	r8,0
8002bbcc:	f0 09 18 00 	cp.b	r9,r8
8002bbd0:	c0 90       	breq	8002bbe2 <twim_chained_transfer+0x13a>
8002bbd2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bbd6:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002bbda:	5c 58       	castu.b	r8
8002bbdc:	c0 30       	breq	8002bbe2 <twim_chained_transfer+0x13a>
8002bbde:	30 18       	mov	r8,1
8002bbe0:	c0 28       	rjmp	8002bbe4 <twim_chained_transfer+0x13c>
8002bbe2:	30 08       	mov	r8,0
8002bbe4:	ad 68       	lsl	r8,0xc
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002bbe6:	f5 e8 10 09 	or	r9,r10,r8
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (((tenbit && second->read) ? 1 : 0) 
			<< AVR32_TWIM_CMDR_REPSAME_OFFSET)
			| ((second->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
8002bbea:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bbee:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002bbf2:	5c 58       	castu.b	r8
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002bbf4:	f3 e8 10 08 	or	r8,r9,r8
8002bbf8:	10 99       	mov	r9,r8
8002bbfa:	e8 19 e0 00 	orl	r9,0xe000
8002bbfe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bc02:	91 49       	st.w	r8[0x10],r9
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (((tenbit && second->read) ? 1 : 0) 
			<< AVR32_TWIM_CMDR_REPSAME_OFFSET)
			| ((second->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);

	if (first->read) {
8002bc04:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bc08:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002bc0c:	5c 58       	castu.b	r8
8002bc0e:	c3 80       	breq	8002bc7e <twim_chained_transfer+0x1d6>
		// get a pointer to applicative data
		twim_rx_data = first->buffer;
8002bc10:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bc14:	70 18       	ld.w	r8,r8[0x4]
8002bc16:	10 99       	mov	r9,r8
8002bc18:	ec f8 00 c0 	ld.w	r8,r6[192]
8002bc1c:	91 09       	st.w	r8[0x0],r9
		// get data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002bc1e:	c1 58       	rjmp	8002bc48 <twim_chained_transfer+0x1a0>
			if (twim->sr & AVR32_TWIM_SR_RXRDY_MASK) {
8002bc20:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bc24:	70 78       	ld.w	r8,r8[0x1c]
8002bc26:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002bc2a:	5c 58       	castu.b	r8
8002bc2c:	c0 e0       	breq	8002bc48 <twim_chained_transfer+0x1a0>
				*twim_rx_data++ = twim->rhr;
8002bc2e:	ec f8 00 c0 	ld.w	r8,r6[192]
8002bc32:	70 08       	ld.w	r8,r8[0x0]
8002bc34:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bc38:	72 59       	ld.w	r9,r9[0x14]
8002bc3a:	5c 59       	castu.b	r9
8002bc3c:	b0 89       	st.b	r8[0x0],r9
8002bc3e:	f0 c9 ff ff 	sub	r9,r8,-1
8002bc42:	ec f8 00 c0 	ld.w	r8,r6[192]
8002bc46:	91 09       	st.w	r8[0x0],r9

	if (first->read) {
		// get a pointer to applicative data
		twim_rx_data = first->buffer;
		// get data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002bc48:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bc4c:	70 78       	ld.w	r8,r8[0x1c]
8002bc4e:	e2 18 00 08 	andl	r8,0x8,COH
8002bc52:	ce 70       	breq	8002bc20 <twim_chained_transfer+0x178>
			if (twim->sr & AVR32_TWIM_SR_RXRDY_MASK) {
				*twim_rx_data++ = twim->rhr;
			}
		}
		if (twim->sr & AVR32_TWIM_SR_RXRDY_MASK) {
8002bc54:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bc58:	70 78       	ld.w	r8,r8[0x1c]
8002bc5a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002bc5e:	5c 58       	castu.b	r8
8002bc60:	c4 40       	breq	8002bce8 <twim_chained_transfer+0x240>
			*twim_rx_data++ = twim->rhr;
8002bc62:	ec f8 00 c0 	ld.w	r8,r6[192]
8002bc66:	70 08       	ld.w	r8,r8[0x0]
8002bc68:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bc6c:	72 59       	ld.w	r9,r9[0x14]
8002bc6e:	5c 59       	castu.b	r9
8002bc70:	b0 89       	st.b	r8[0x0],r9
8002bc72:	f0 c9 ff ff 	sub	r9,r8,-1
8002bc76:	ec f8 00 c0 	ld.w	r8,r6[192]
8002bc7a:	91 09       	st.w	r8[0x0],r9
8002bc7c:	c3 68       	rjmp	8002bce8 <twim_chained_transfer+0x240>
		}
	} else {
		// get a pointer to applicative data
		twim_tx_data = first->buffer;
8002bc7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bc82:	70 18       	ld.w	r8,r8[0x4]
8002bc84:	10 99       	mov	r9,r8
8002bc86:	ec f8 00 90 	ld.w	r8,r6[144]
8002bc8a:	91 09       	st.w	r8[0x0],r9
		twim_tx_nb_bytes = first->length;
8002bc8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bc90:	70 29       	ld.w	r9,r8[0x8]
8002bc92:	ec f8 00 84 	ld.w	r8,r6[132]
8002bc96:	91 09       	st.w	r8[0x0],r9
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002bc98:	c2 28       	rjmp	8002bcdc <twim_chained_transfer+0x234>
			if ((twim_tx_nb_bytes > 0) &&
8002bc9a:	ec f8 00 84 	ld.w	r8,r6[132]
8002bc9e:	70 08       	ld.w	r8,r8[0x0]
8002bca0:	58 08       	cp.w	r8,0
8002bca2:	c1 d0       	breq	8002bcdc <twim_chained_transfer+0x234>
					(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)) {
8002bca4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bca8:	70 78       	ld.w	r8,r8[0x1c]
8002bcaa:	e2 18 00 02 	andl	r8,0x2,COH
		// get a pointer to applicative data
		twim_tx_data = first->buffer;
		twim_tx_nb_bytes = first->length;
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
			if ((twim_tx_nb_bytes > 0) &&
8002bcae:	c1 70       	breq	8002bcdc <twim_chained_transfer+0x234>
					(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)) {
				twim->thr = *twim_tx_data++;
8002bcb0:	ec f8 00 90 	ld.w	r8,r6[144]
8002bcb4:	70 08       	ld.w	r8,r8[0x0]
8002bcb6:	11 89       	ld.ub	r9,r8[0x0]
8002bcb8:	5c 59       	castu.b	r9
8002bcba:	12 9a       	mov	r10,r9
8002bcbc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bcc0:	93 6a       	st.w	r9[0x18],r10
8002bcc2:	f0 c9 ff ff 	sub	r9,r8,-1
8002bcc6:	ec f8 00 90 	ld.w	r8,r6[144]
8002bcca:	91 09       	st.w	r8[0x0],r9
				twim_tx_nb_bytes--;
8002bccc:	ec f8 00 84 	ld.w	r8,r6[132]
8002bcd0:	70 08       	ld.w	r8,r8[0x0]
8002bcd2:	f0 c9 00 01 	sub	r9,r8,1
8002bcd6:	ec f8 00 84 	ld.w	r8,r6[132]
8002bcda:	91 09       	st.w	r8[0x0],r9
	} else {
		// get a pointer to applicative data
		twim_tx_data = first->buffer;
		twim_tx_nb_bytes = first->length;
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002bcdc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bce0:	70 78       	ld.w	r8,r8[0x1c]
8002bce2:	e2 18 00 08 	andl	r8,0x8,COH
8002bce6:	cd a0       	breq	8002bc9a <twim_chained_transfer+0x1f2>
				twim_tx_nb_bytes--;
			}
		}
	}

	twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
8002bce8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bcec:	30 89       	mov	r9,8
8002bcee:	91 b9       	st.w	r8[0x2c],r9

	if (second->read) {
8002bcf0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bcf4:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002bcf8:	5c 58       	castu.b	r8
8002bcfa:	c2 40       	breq	8002bd42 <twim_chained_transfer+0x29a>
		// get a pointer to applicative data
		twim_rx_data = second->buffer;
8002bcfc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bd00:	70 18       	ld.w	r8,r8[0x4]
8002bd02:	10 99       	mov	r9,r8
8002bd04:	ec f8 00 c0 	ld.w	r8,r6[192]
8002bd08:	91 09       	st.w	r8[0x0],r9
		// get data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
8002bd0a:	c1 58       	rjmp	8002bd34 <twim_chained_transfer+0x28c>
			if (twim->sr & AVR32_TWIM_SR_RXRDY_MASK) {
8002bd0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bd10:	70 78       	ld.w	r8,r8[0x1c]
8002bd12:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002bd16:	5c 58       	castu.b	r8
8002bd18:	c0 e0       	breq	8002bd34 <twim_chained_transfer+0x28c>
				*twim_rx_data++ = twim->rhr;
8002bd1a:	ec f8 00 c0 	ld.w	r8,r6[192]
8002bd1e:	70 08       	ld.w	r8,r8[0x0]
8002bd20:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bd24:	72 59       	ld.w	r9,r9[0x14]
8002bd26:	5c 59       	castu.b	r9
8002bd28:	b0 89       	st.b	r8[0x0],r9
8002bd2a:	f0 c9 ff ff 	sub	r9,r8,-1
8002bd2e:	ec f8 00 c0 	ld.w	r8,r6[192]
8002bd32:	91 09       	st.w	r8[0x0],r9

	if (second->read) {
		// get a pointer to applicative data
		twim_rx_data = second->buffer;
		// get data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
8002bd34:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bd38:	70 78       	ld.w	r8,r8[0x1c]
8002bd3a:	e2 18 00 10 	andl	r8,0x10,COH
8002bd3e:	ce 70       	breq	8002bd0c <twim_chained_transfer+0x264>
8002bd40:	c3 68       	rjmp	8002bdac <twim_chained_transfer+0x304>
				*twim_rx_data++ = twim->rhr;
			}
		}
	} else {
		// get a pointer to applicative data
		twim_tx_data = second->buffer;
8002bd42:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bd46:	70 18       	ld.w	r8,r8[0x4]
8002bd48:	10 99       	mov	r9,r8
8002bd4a:	ec f8 00 90 	ld.w	r8,r6[144]
8002bd4e:	91 09       	st.w	r8[0x0],r9
		
		twim_tx_nb_bytes = second->length;
8002bd50:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bd54:	70 29       	ld.w	r9,r8[0x8]
8002bd56:	ec f8 00 84 	ld.w	r8,r6[132]
8002bd5a:	91 09       	st.w	r8[0x0],r9
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
8002bd5c:	c2 28       	rjmp	8002bda0 <twim_chained_transfer+0x2f8>
			if ((twim_tx_nb_bytes > 0) && 
8002bd5e:	ec f8 00 84 	ld.w	r8,r6[132]
8002bd62:	70 08       	ld.w	r8,r8[0x0]
8002bd64:	58 08       	cp.w	r8,0
8002bd66:	c1 d0       	breq	8002bda0 <twim_chained_transfer+0x2f8>
					(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)) {
8002bd68:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bd6c:	70 78       	ld.w	r8,r8[0x1c]
8002bd6e:	e2 18 00 02 	andl	r8,0x2,COH
		twim_tx_data = second->buffer;
		
		twim_tx_nb_bytes = second->length;
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
			if ((twim_tx_nb_bytes > 0) && 
8002bd72:	c1 70       	breq	8002bda0 <twim_chained_transfer+0x2f8>
					(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)) {
			twim->thr = *twim_tx_data++;
8002bd74:	ec f8 00 90 	ld.w	r8,r6[144]
8002bd78:	70 08       	ld.w	r8,r8[0x0]
8002bd7a:	11 89       	ld.ub	r9,r8[0x0]
8002bd7c:	5c 59       	castu.b	r9
8002bd7e:	12 9a       	mov	r10,r9
8002bd80:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bd84:	93 6a       	st.w	r9[0x18],r10
8002bd86:	f0 c9 ff ff 	sub	r9,r8,-1
8002bd8a:	ec f8 00 90 	ld.w	r8,r6[144]
8002bd8e:	91 09       	st.w	r8[0x0],r9
			twim_tx_nb_bytes--;
8002bd90:	ec f8 00 84 	ld.w	r8,r6[132]
8002bd94:	70 08       	ld.w	r8,r8[0x0]
8002bd96:	f0 c9 00 01 	sub	r9,r8,1
8002bd9a:	ec f8 00 84 	ld.w	r8,r6[132]
8002bd9e:	91 09       	st.w	r8[0x0],r9
		// get a pointer to applicative data
		twim_tx_data = second->buffer;
		
		twim_tx_nb_bytes = second->length;
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
8002bda0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bda4:	70 78       	ld.w	r8,r8[0x1c]
8002bda6:	e2 18 00 10 	andl	r8,0x10,COH
8002bdaa:	cd a0       	breq	8002bd5e <twim_chained_transfer+0x2b6>
			twim_tx_nb_bytes--;
			}
		}
	}

	if (twim->sr & AVR32_TWIM_SR_ARBLST_MASK) {
8002bdac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bdb0:	70 78       	ld.w	r8,r8[0x1c]
8002bdb2:	e2 18 04 00 	andl	r8,0x400,COH
8002bdb6:	c0 80       	breq	8002bdc6 <twim_chained_transfer+0x31e>
		twim->scr = AVR32_TWIM_SCR_ARBLST_MASK;
8002bdb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bdbc:	e0 69 04 00 	mov	r9,1024
8002bdc0:	91 b9       	st.w	r8[0x2c],r9
		return ERR_IO_ERROR;
8002bdc2:	3f f8       	mov	r8,-1
8002bdc4:	c1 88       	rjmp	8002bdf4 <twim_chained_transfer+0x34c>
	}

	if (twim->sr & AVR32_TWIM_SR_NAK_MASK) {
8002bdc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bdca:	70 78       	ld.w	r8,r8[0x1c]
8002bdcc:	e2 18 03 00 	andl	r8,0x300,COH
8002bdd0:	c1 10       	breq	8002bdf2 <twim_chained_transfer+0x34a>
		twim->cmdr = twim->cmdr ^ AVR32_TWIM_CMDR_VALID_MASK;
8002bdd2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bdd6:	70 38       	ld.w	r8,r8[0xc]
8002bdd8:	10 99       	mov	r9,r8
8002bdda:	ec 19 80 00 	eorl	r9,0x8000
8002bdde:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bde2:	91 39       	st.w	r8[0xc],r9
		twim->scr = AVR32_TWIM_SCR_NAK_MASK;
8002bde4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bde8:	e0 69 03 00 	mov	r9,768
8002bdec:	91 b9       	st.w	r8[0x2c],r9
		return ERR_IO_ERROR;
8002bdee:	3f f8       	mov	r8,-1
8002bdf0:	c0 28       	rjmp	8002bdf4 <twim_chained_transfer+0x34c>
	}
	return STATUS_OK;
8002bdf2:	30 08       	mov	r8,0
}
8002bdf4:	10 9c       	mov	r12,r8
8002bdf6:	2f cd       	sub	sp,-16
8002bdf8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bdfc:	80 02       	ld.sh	r2,r0[0x0]
8002bdfe:	b9 38       	mul	r8,r12

8002be00 <twim_status>:

/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
8002be00:	eb cd 40 c0 	pushm	r6-r7,lr
8002be04:	1a 97       	mov	r7,sp
8002be06:	20 1d       	sub	sp,4
8002be08:	48 a6       	lddpc	r6,8002be30 <twim_status+0x30>
8002be0a:	1e 26       	rsub	r6,pc
	uint32_t status = twim_inst->sr;
8002be0c:	ec f8 00 40 	ld.w	r8,r6[64]
8002be10:	70 08       	ld.w	r8,r8[0x0]
8002be12:	70 78       	ld.w	r8,r8[0x1c]
8002be14:	ef 48 ff fc 	st.w	r7[-4],r8
	if ((status & AVR32_TWIM_SR_IDLE_MASK)
8002be18:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002be1c:	e2 18 00 10 	andl	r8,0x10,COH
8002be20:	c0 30       	breq	8002be26 <twim_status+0x26>
#if AVR32_TWIM_H_VERSION > 101 ||(status&AVR32_TWIM_SR_BUSFREE_MASK)
#endif 
		) {
		return 1;
8002be22:	30 18       	mov	r8,1
8002be24:	c0 28       	rjmp	8002be28 <twim_status+0x28>
	} else {
		return 0;
8002be26:	30 08       	mov	r8,0
	}
}
8002be28:	10 9c       	mov	r12,r8
8002be2a:	2f fd       	sub	sp,-4
8002be2c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002be30:	80 02       	ld.sh	r2,r0[0x0]
8002be32:	bc 8e       	st.b	lr[0x0],lr

8002be34 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
8002be34:	eb cd 40 80 	pushm	r7,lr
8002be38:	1a 97       	mov	r7,sp
8002be3a:	20 1d       	sub	sp,4
8002be3c:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8002be40:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002be44:	e6 18 00 01 	andh	r8,0x1,COH
8002be48:	5f 08       	sreq	r8
8002be4a:	5c 58       	castu.b	r8
}
8002be4c:	10 9c       	mov	r12,r8
8002be4e:	2f fd       	sub	sp,-4
8002be50:	e3 cd 80 80 	ldm	sp++,r7,pc

8002be54 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
8002be54:	eb cd 40 80 	pushm	r7,lr
8002be58:	1a 97       	mov	r7,sp
8002be5a:	20 7d       	sub	sp,28
8002be5c:	ef 4c ff ec 	st.w	r7[-20],r12
8002be60:	ef 4b ff e8 	st.w	r7[-24],r11
8002be64:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
8002be68:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002be6c:	f0 09 15 04 	lsl	r9,r8,0x4
8002be70:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002be74:	10 39       	cp.w	r9,r8
8002be76:	e0 8b 00 04 	brhi	8002be7e <usart_set_async_baudrate+0x2a>
8002be7a:	31 08       	mov	r8,16
8002be7c:	c0 28       	rjmp	8002be80 <usart_set_async_baudrate+0x2c>
8002be7e:	30 88       	mov	r8,8
8002be80:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
8002be84:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002be88:	f0 09 15 03 	lsl	r9,r8,0x3
8002be8c:	ee fa ff f0 	ld.w	r10,r7[-16]
8002be90:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002be94:	f4 08 02 48 	mul	r8,r10,r8
8002be98:	a1 98       	lsr	r8,0x1
8002be9a:	f2 08 00 08 	add	r8,r9,r8
8002be9e:	ee fa ff f0 	ld.w	r10,r7[-16]
8002bea2:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002bea6:	f4 09 02 49 	mul	r9,r10,r9
8002beaa:	f0 09 0d 08 	divu	r8,r8,r9
8002beae:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
8002beb2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002beb6:	a3 98       	lsr	r8,0x3
8002beb8:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
8002bebc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bec0:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8002bec4:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8002bec8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002becc:	58 08       	cp.w	r8,0
8002bece:	c0 70       	breq	8002bedc <usart_set_async_baudrate+0x88>
8002bed0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bed4:	e0 48 ff ff 	cp.w	r8,65535
8002bed8:	e0 88 00 04 	brls	8002bee0 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
8002bedc:	30 18       	mov	r8,1
8002bede:	c2 08       	rjmp	8002bf1e <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
8002bee0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002bee4:	70 18       	ld.w	r8,r8[0x4]
8002bee6:	10 99       	mov	r9,r8
8002bee8:	e4 19 ff f7 	andh	r9,0xfff7
8002beec:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
8002bef0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002bef4:	59 08       	cp.w	r8,16
8002bef6:	c0 40       	breq	8002befe <usart_set_async_baudrate+0xaa>
8002bef8:	e8 68 00 00 	mov	r8,524288
8002befc:	c0 28       	rjmp	8002bf00 <usart_set_async_baudrate+0xac>
8002befe:	30 08       	mov	r8,0
8002bf00:	10 49       	or	r9,r8
8002bf02:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002bf06:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
8002bf08:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bf0c:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
8002bf10:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bf14:	10 49       	or	r9,r8
8002bf16:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002bf1a:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
8002bf1c:	30 08       	mov	r8,0
}
8002bf1e:	10 9c       	mov	r12,r8
8002bf20:	2f 9d       	sub	sp,-28
8002bf22:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bf26 <usart_set_sync_master_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_sync_master_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
8002bf26:	eb cd 40 80 	pushm	r7,lr
8002bf2a:	1a 97       	mov	r7,sp
8002bf2c:	20 4d       	sub	sp,16
8002bf2e:	ef 4c ff f8 	st.w	r7[-8],r12
8002bf32:	ef 4b ff f4 	st.w	r7[-12],r11
8002bf36:	ef 4a ff f0 	st.w	r7[-16],r10
  unsigned int cd = (pba_hz + baudrate / 2) / baudrate;
8002bf3a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bf3e:	f0 09 16 01 	lsr	r9,r8,0x1
8002bf42:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002bf46:	f2 08 00 08 	add	r8,r9,r8
8002bf4a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002bf4e:	f0 09 0d 08 	divu	r8,r8,r9
8002bf52:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8002bf56:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bf5a:	58 08       	cp.w	r8,0
8002bf5c:	c0 70       	breq	8002bf6a <usart_set_sync_master_baudrate+0x44>
8002bf5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bf62:	e0 48 ff ff 	cp.w	r8,65535
8002bf66:	e0 88 00 04 	brls	8002bf6e <usart_set_sync_master_baudrate+0x48>
    return USART_INVALID_INPUT;
8002bf6a:	30 18       	mov	r8,1
8002bf6c:	c1 18       	rjmp	8002bf8e <usart_set_sync_master_baudrate+0x68>

  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
8002bf6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bf72:	70 18       	ld.w	r8,r8[0x4]
8002bf74:	e0 18 fe cf 	andl	r8,0xfecf
8002bf78:	10 99       	mov	r9,r8
8002bf7a:	a9 a9       	sbr	r9,0x8
8002bf7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bf80:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              AVR32_USART_MR_SYNC_MASK;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET;
8002bf82:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bf86:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bf8a:	91 89       	st.w	r8[0x20],r9

  return USART_SUCCESS;
8002bf8c:	30 08       	mov	r8,0
}
8002bf8e:	10 9c       	mov	r12,r8
8002bf90:	2f cd       	sub	sp,-16
8002bf92:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bf96 <usart_set_sync_slave_baudrate>:
 * \param usart Base address of the USART instance.
 *
 * \retval USART_SUCCESS  Baud rate successfully initialized.
 */
static int usart_set_sync_slave_baudrate(volatile avr32_usart_t *usart)
{
8002bf96:	eb cd 40 80 	pushm	r7,lr
8002bf9a:	1a 97       	mov	r7,sp
8002bf9c:	20 1d       	sub	sp,4
8002bf9e:	ef 4c ff fc 	st.w	r7[-4],r12
  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
8002bfa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bfa6:	70 18       	ld.w	r8,r8[0x4]
8002bfa8:	10 99       	mov	r9,r8
8002bfaa:	e8 19 01 30 	orl	r9,0x130
8002bfae:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bfb2:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_USCLKS_SCK << AVR32_USART_MR_USCLKS_OFFSET |
              AVR32_USART_MR_SYNC_MASK;

  return USART_SUCCESS;
8002bfb4:	30 08       	mov	r8,0
}
8002bfb6:	10 9c       	mov	r12,r8
8002bfb8:	2f fd       	sub	sp,-4
8002bfba:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bfbe <usart_set_iso7816_clock>:
 *
 * \retval USART_SUCCESS        ISO7816 clock successfully initialized.
 * \retval USART_INVALID_INPUT  ISO7816 clock set point is out of range for the given input clock frequency.
 */
static int usart_set_iso7816_clock(volatile avr32_usart_t *usart, unsigned int clock, unsigned long pba_hz)
{
8002bfbe:	eb cd 40 80 	pushm	r7,lr
8002bfc2:	1a 97       	mov	r7,sp
8002bfc4:	20 4d       	sub	sp,16
8002bfc6:	ef 4c ff f8 	st.w	r7[-8],r12
8002bfca:	ef 4b ff f4 	st.w	r7[-12],r11
8002bfce:	ef 4a ff f0 	st.w	r7[-16],r10
  unsigned int cd = (pba_hz + clock / 2) / clock;
8002bfd2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bfd6:	f0 09 16 01 	lsr	r9,r8,0x1
8002bfda:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002bfde:	f2 08 00 08 	add	r8,r9,r8
8002bfe2:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002bfe6:	f0 09 0d 08 	divu	r8,r8,r9
8002bfea:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8002bfee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bff2:	58 08       	cp.w	r8,0
8002bff4:	c0 70       	breq	8002c002 <usart_set_iso7816_clock+0x44>
8002bff6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bffa:	e0 48 ff ff 	cp.w	r8,65535
8002bffe:	e0 88 00 04 	brls	8002c006 <usart_set_iso7816_clock+0x48>
    return USART_INVALID_INPUT;
8002c002:	30 18       	mov	r8,1
8002c004:	c1 28       	rjmp	8002c028 <usart_set_iso7816_clock+0x6a>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
8002c006:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c00a:	70 18       	ld.w	r8,r8[0x4]
8002c00c:	10 99       	mov	r9,r8
8002c00e:	e4 19 ff f7 	andh	r9,0xfff7
8002c012:	e0 19 fe cf 	andl	r9,0xfecf
8002c016:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c01a:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              AVR32_USART_MR_OVER_X16 << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET;
8002c01c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c020:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c024:	91 89       	st.w	r8[0x20],r9

  return USART_SUCCESS;
8002c026:	30 08       	mov	r8,0
}
8002c028:	10 9c       	mov	r12,r8
8002c02a:	2f cd       	sub	sp,-16
8002c02c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c030 <usart_set_spi_master_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_spi_master_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
8002c030:	eb cd 40 80 	pushm	r7,lr
8002c034:	1a 97       	mov	r7,sp
8002c036:	20 4d       	sub	sp,16
8002c038:	ef 4c ff f8 	st.w	r7[-8],r12
8002c03c:	ef 4b ff f4 	st.w	r7[-12],r11
8002c040:	ef 4a ff f0 	st.w	r7[-16],r10
  unsigned int cd = (pba_hz + baudrate / 2) / baudrate;
8002c044:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c048:	f0 09 16 01 	lsr	r9,r8,0x1
8002c04c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002c050:	f2 08 00 08 	add	r8,r9,r8
8002c054:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c058:	f0 09 0d 08 	divu	r8,r8,r9
8002c05c:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 4 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8002c060:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c064:	58 38       	cp.w	r8,3
8002c066:	e0 88 00 08 	brls	8002c076 <usart_set_spi_master_baudrate+0x46>
8002c06a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c06e:	e0 48 ff ff 	cp.w	r8,65535
8002c072:	e0 88 00 04 	brls	8002c07a <usart_set_spi_master_baudrate+0x4a>
    return USART_INVALID_INPUT;
8002c076:	30 18       	mov	r8,1
8002c078:	c1 08       	rjmp	8002c098 <usart_set_spi_master_baudrate+0x68>

  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
8002c07a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c07e:	70 18       	ld.w	r8,r8[0x4]
8002c080:	10 99       	mov	r9,r8
8002c082:	e0 19 ff cf 	andl	r9,0xffcf
8002c086:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c08a:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET;
8002c08c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c090:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c094:	91 89       	st.w	r8[0x20],r9

  return USART_SUCCESS;
8002c096:	30 08       	mov	r8,0
}
8002c098:	10 9c       	mov	r12,r8
8002c09a:	2f cd       	sub	sp,-16
8002c09c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c0a0 <usart_set_spi_slave_baudrate>:
 * \param usart Base address of the USART instance.
 *
 * \retval USART_SUCCESS  Baud rate successfully initialized.
 */
static int usart_set_spi_slave_baudrate(volatile avr32_usart_t *usart)
{
8002c0a0:	eb cd 40 80 	pushm	r7,lr
8002c0a4:	1a 97       	mov	r7,sp
8002c0a6:	20 1d       	sub	sp,4
8002c0a8:	ef 4c ff fc 	st.w	r7[-4],r12
  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
8002c0ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c0b0:	70 18       	ld.w	r8,r8[0x4]
8002c0b2:	10 99       	mov	r9,r8
8002c0b4:	e8 19 00 30 	orl	r9,0x30
8002c0b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c0bc:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_USCLKS_SCK << AVR32_USART_MR_USCLKS_OFFSET;

  return USART_SUCCESS;
8002c0be:	30 08       	mov	r8,0
}
8002c0c0:	10 9c       	mov	r12,r8
8002c0c2:	2f fd       	sub	sp,-4
8002c0c4:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c0c8 <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
8002c0c8:	eb cd 40 c0 	pushm	r6-r7,lr
8002c0cc:	1a 97       	mov	r7,sp
8002c0ce:	20 2d       	sub	sp,8
8002c0d0:	49 a6       	lddpc	r6,8002c138 <usart_reset+0x70>
8002c0d2:	1e 26       	rsub	r6,pc
8002c0d4:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
8002c0d8:	e1 b8 00 00 	mfsr	r8,0x0
8002c0dc:	10 9c       	mov	r12,r8
8002c0de:	ca be       	rcall	8002be34 <cpu_irq_is_enabled_flags>
8002c0e0:	18 98       	mov	r8,r12
8002c0e2:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
8002c0e6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002c0ea:	30 08       	mov	r8,0
8002c0ec:	f0 09 18 00 	cp.b	r9,r8
8002c0f0:	c0 20       	breq	8002c0f4 <usart_reset+0x2c>
8002c0f2:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
8002c0f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c0f8:	3f f9       	mov	r9,-1
8002c0fa:	91 39       	st.w	r8[0xc],r9
  usart->csr;
8002c0fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c100:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
8002c102:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002c106:	30 08       	mov	r8,0
8002c108:	f0 09 18 00 	cp.b	r9,r8
8002c10c:	c0 20       	breq	8002c110 <usart_reset+0x48>
8002c10e:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
8002c110:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c114:	30 09       	mov	r9,0
8002c116:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
8002c118:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c11c:	30 09       	mov	r9,0
8002c11e:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
8002c120:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c124:	30 09       	mov	r9,0
8002c126:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
8002c128:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c12c:	ea 69 61 0c 	mov	r9,680204
8002c130:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
8002c132:	2f ed       	sub	sp,-8
8002c134:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c138:	80 02       	ld.sh	r2,r0[0x0]
8002c13a:	bf 56       	asr	r6,0x1f

8002c13c <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002c13c:	eb cd 40 c0 	pushm	r6-r7,lr
8002c140:	1a 97       	mov	r7,sp
8002c142:	20 3d       	sub	sp,12
8002c144:	4d 86       	lddpc	r6,8002c2a4 <usart_init_rs232+0x168>
8002c146:	1e 26       	rsub	r6,pc
8002c148:	ef 4c ff fc 	st.w	r7[-4],r12
8002c14c:	ef 4b ff f8 	st.w	r7[-8],r11
8002c150:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002c154:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c158:	f0 16 00 4d 	mcall	r6[308]

  // Check input values.
  if (!opt || // Null pointer.
8002c15c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c160:	58 08       	cp.w	r8,0
8002c162:	c3 80       	breq	8002c1d2 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
8002c164:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c168:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c16a:	30 48       	mov	r8,4
8002c16c:	f0 09 18 00 	cp.b	r9,r8
8002c170:	e0 88 00 31 	brls	8002c1d2 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
8002c174:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c178:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c17a:	30 98       	mov	r8,9
8002c17c:	f0 09 18 00 	cp.b	r9,r8
8002c180:	e0 8b 00 29 	brhi	8002c1d2 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8002c184:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c188:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c18a:	30 78       	mov	r8,7
8002c18c:	f0 09 18 00 	cp.b	r9,r8
8002c190:	e0 8b 00 21 	brhi	8002c1d2 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
8002c194:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c198:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c19a:	e0 68 01 01 	mov	r8,257
8002c19e:	f0 09 19 00 	cp.h	r9,r8
8002c1a2:	e0 8b 00 18 	brhi	8002c1d2 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8002c1a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c1aa:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c1ae:	30 38       	mov	r8,3
8002c1b0:	f0 09 18 00 	cp.b	r9,r8
8002c1b4:	e0 8b 00 0f 	brhi	8002c1d2 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8002c1b8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c1bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c1c0:	70 08       	ld.w	r8,r8[0x0]
8002c1c2:	12 9a       	mov	r10,r9
8002c1c4:	10 9b       	mov	r11,r8
8002c1c6:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c1ca:	c4 5e       	rcall	8002be54 <usart_set_async_baudrate>
8002c1cc:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c1ce:	58 18       	cp.w	r8,1
8002c1d0:	c0 31       	brne	8002c1d6 <usart_init_rs232+0x9a>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002c1d2:	30 18       	mov	r8,1
8002c1d4:	c6 48       	rjmp	8002c29c <usart_init_rs232+0x160>

  if (opt->charlength == 9)
8002c1d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c1da:	11 c9       	ld.ub	r9,r8[0x4]
8002c1dc:	30 98       	mov	r8,9
8002c1de:	f0 09 18 00 	cp.b	r9,r8
8002c1e2:	c0 a1       	brne	8002c1f6 <usart_init_rs232+0xba>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002c1e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c1e8:	70 18       	ld.w	r8,r8[0x4]
8002c1ea:	10 99       	mov	r9,r8
8002c1ec:	b1 b9       	sbr	r9,0x11
8002c1ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c1f2:	91 19       	st.w	r8[0x4],r9
8002c1f4:	c0 d8       	rjmp	8002c20e <usart_init_rs232+0xd2>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002c1f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c1fa:	70 19       	ld.w	r9,r8[0x4]
8002c1fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c200:	11 c8       	ld.ub	r8,r8[0x4]
8002c202:	20 58       	sub	r8,5
8002c204:	a7 68       	lsl	r8,0x6
8002c206:	10 49       	or	r9,r8
8002c208:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c20c:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002c20e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c212:	70 19       	ld.w	r9,r8[0x4]
8002c214:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c218:	11 d8       	ld.ub	r8,r8[0x5]
8002c21a:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8002c21e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c222:	f1 38 00 08 	ld.ub	r8,r8[8]
8002c226:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002c228:	f5 e8 10 08 	or	r8,r10,r8
8002c22c:	10 49       	or	r9,r8
8002c22e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c232:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8002c234:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c238:	90 39       	ld.sh	r9,r8[0x6]
8002c23a:	30 28       	mov	r8,2
8002c23c:	f0 09 19 00 	cp.h	r9,r8
8002c240:	e0 88 00 14 	brls	8002c268 <usart_init_rs232+0x12c>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8002c244:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c248:	70 18       	ld.w	r8,r8[0x4]
8002c24a:	10 99       	mov	r9,r8
8002c24c:	ad b9       	sbr	r9,0xd
8002c24e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c252:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8002c254:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c258:	90 38       	ld.sh	r8,r8[0x6]
8002c25a:	5c 78       	castu.h	r8
8002c25c:	20 28       	sub	r8,2
8002c25e:	10 99       	mov	r9,r8
8002c260:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c264:	91 a9       	st.w	r8[0x28],r9
8002c266:	c0 d8       	rjmp	8002c280 <usart_init_rs232+0x144>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8002c268:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c26c:	70 19       	ld.w	r9,r8[0x4]
8002c26e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c272:	90 38       	ld.sh	r8,r8[0x6]
8002c274:	5c 78       	castu.h	r8
8002c276:	ad 68       	lsl	r8,0xc
8002c278:	10 49       	or	r9,r8
8002c27a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c27e:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002c280:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c284:	70 18       	ld.w	r8,r8[0x4]
8002c286:	10 99       	mov	r9,r8
8002c288:	e0 19 ff f0 	andl	r9,0xfff0
8002c28c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c290:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002c292:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c296:	35 09       	mov	r9,80
8002c298:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002c29a:	30 08       	mov	r8,0
}
8002c29c:	10 9c       	mov	r12,r8
8002c29e:	2f dd       	sub	sp,-12
8002c2a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c2a4:	80 02       	ld.sh	r2,r0[0x0]
8002c2a6:	bf ca       	cbr	r10,0x1e

8002c2a8 <usart_init_rs232_tx_only>:


int usart_init_rs232_tx_only(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002c2a8:	eb cd 40 c0 	pushm	r6-r7,lr
8002c2ac:	1a 97       	mov	r7,sp
8002c2ae:	20 3d       	sub	sp,12
8002c2b0:	4d c6       	lddpc	r6,8002c420 <usart_init_rs232_tx_only+0x178>
8002c2b2:	1e 26       	rsub	r6,pc
8002c2b4:	ef 4c ff fc 	st.w	r7[-4],r12
8002c2b8:	ef 4b ff f8 	st.w	r7[-8],r11
8002c2bc:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002c2c0:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c2c4:	f0 16 00 4d 	mcall	r6[308]

  // Check input values.
  if (!opt || // Null pointer.
8002c2c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c2cc:	58 08       	cp.w	r8,0
8002c2ce:	c4 00       	breq	8002c34e <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
8002c2d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c2d4:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c2d6:	30 48       	mov	r8,4
8002c2d8:	f0 09 18 00 	cp.b	r9,r8
8002c2dc:	e0 88 00 39 	brls	8002c34e <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
8002c2e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c2e4:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c2e6:	30 98       	mov	r8,9
8002c2e8:	f0 09 18 00 	cp.b	r9,r8
8002c2ec:	e0 8b 00 31 	brhi	8002c34e <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8002c2f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c2f4:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c2f6:	30 78       	mov	r8,7
8002c2f8:	f0 09 18 00 	cp.b	r9,r8
8002c2fc:	e0 8b 00 29 	brhi	8002c34e <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002c300:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c304:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c306:	30 18       	mov	r8,1
8002c308:	f0 09 19 00 	cp.h	r9,r8
8002c30c:	c2 10       	breq	8002c34e <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002c30e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c312:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c314:	e0 68 01 01 	mov	r8,257
8002c318:	f0 09 19 00 	cp.h	r9,r8
8002c31c:	e0 8b 00 19 	brhi	8002c34e <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8002c320:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c324:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c328:	30 38       	mov	r8,3
8002c32a:	f0 09 18 00 	cp.b	r9,r8
8002c32e:	e0 8b 00 10 	brhi	8002c34e <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8002c332:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c336:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c33a:	70 08       	ld.w	r8,r8[0x0]
8002c33c:	12 9a       	mov	r10,r9
8002c33e:	10 9b       	mov	r11,r8
8002c340:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c344:	fe b0 fd f1 	rcall	8002bf26 <usart_set_sync_master_baudrate>
8002c348:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c34a:	58 18       	cp.w	r8,1
8002c34c:	c0 31       	brne	8002c352 <usart_init_rs232_tx_only+0xaa>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002c34e:	30 18       	mov	r8,1
8002c350:	c6 48       	rjmp	8002c418 <usart_init_rs232_tx_only+0x170>

  if (opt->charlength == 9)
8002c352:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c356:	11 c9       	ld.ub	r9,r8[0x4]
8002c358:	30 98       	mov	r8,9
8002c35a:	f0 09 18 00 	cp.b	r9,r8
8002c35e:	c0 a1       	brne	8002c372 <usart_init_rs232_tx_only+0xca>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002c360:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c364:	70 18       	ld.w	r8,r8[0x4]
8002c366:	10 99       	mov	r9,r8
8002c368:	b1 b9       	sbr	r9,0x11
8002c36a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c36e:	91 19       	st.w	r8[0x4],r9
8002c370:	c0 d8       	rjmp	8002c38a <usart_init_rs232_tx_only+0xe2>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002c372:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c376:	70 19       	ld.w	r9,r8[0x4]
8002c378:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c37c:	11 c8       	ld.ub	r8,r8[0x4]
8002c37e:	20 58       	sub	r8,5
8002c380:	a7 68       	lsl	r8,0x6
8002c382:	10 49       	or	r9,r8
8002c384:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c388:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002c38a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c38e:	70 19       	ld.w	r9,r8[0x4]
8002c390:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c394:	11 d8       	ld.ub	r8,r8[0x5]
8002c396:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8002c39a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c39e:	f1 38 00 08 	ld.ub	r8,r8[8]
8002c3a2:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002c3a4:	f5 e8 10 08 	or	r8,r10,r8
8002c3a8:	10 49       	or	r9,r8
8002c3aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c3ae:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8002c3b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c3b4:	90 39       	ld.sh	r9,r8[0x6]
8002c3b6:	30 28       	mov	r8,2
8002c3b8:	f0 09 19 00 	cp.h	r9,r8
8002c3bc:	e0 88 00 14 	brls	8002c3e4 <usart_init_rs232_tx_only+0x13c>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8002c3c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c3c4:	70 18       	ld.w	r8,r8[0x4]
8002c3c6:	10 99       	mov	r9,r8
8002c3c8:	ad b9       	sbr	r9,0xd
8002c3ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c3ce:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8002c3d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c3d4:	90 38       	ld.sh	r8,r8[0x6]
8002c3d6:	5c 78       	castu.h	r8
8002c3d8:	20 28       	sub	r8,2
8002c3da:	10 99       	mov	r9,r8
8002c3dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c3e0:	91 a9       	st.w	r8[0x28],r9
8002c3e2:	c0 d8       	rjmp	8002c3fc <usart_init_rs232_tx_only+0x154>
  }
  else
    // Insert 1 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8002c3e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c3e8:	70 19       	ld.w	r9,r8[0x4]
8002c3ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c3ee:	90 38       	ld.sh	r8,r8[0x6]
8002c3f0:	5c 78       	castu.h	r8
8002c3f2:	ad 68       	lsl	r8,0xc
8002c3f4:	10 49       	or	r9,r8
8002c3f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c3fa:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002c3fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c400:	70 18       	ld.w	r8,r8[0x4]
8002c402:	10 99       	mov	r9,r8
8002c404:	e0 19 ff f0 	andl	r9,0xfff0
8002c408:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c40c:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable only output as input is not possible in synchronous mode without
  // transferring clock.
  usart->cr = AVR32_USART_CR_TXEN_MASK;
8002c40e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c412:	34 09       	mov	r9,64
8002c414:	91 09       	st.w	r8[0x0],r9

  return USART_SUCCESS;
8002c416:	30 08       	mov	r8,0
}
8002c418:	10 9c       	mov	r12,r8
8002c41a:	2f dd       	sub	sp,-12
8002c41c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c420:	80 02       	ld.sh	r2,r0[0x0]
8002c422:	c1 36       	brmi	8002c448 <usart_init_hw_handshaking+0x24>

8002c424 <usart_init_hw_handshaking>:


int usart_init_hw_handshaking(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002c424:	eb cd 40 c0 	pushm	r6-r7,lr
8002c428:	1a 97       	mov	r7,sp
8002c42a:	20 3d       	sub	sp,12
8002c42c:	49 26       	lddpc	r6,8002c474 <usart_init_hw_handshaking+0x50>
8002c42e:	1e 26       	rsub	r6,pc
8002c430:	ef 4c ff fc 	st.w	r7[-4],r12
8002c434:	ef 4b ff f8 	st.w	r7[-8],r11
8002c438:	ef 4a ff f4 	st.w	r7[-12],r10
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
8002c43c:	ee fa ff f4 	ld.w	r10,r7[-12]
8002c440:	ee fb ff f8 	ld.w	r11,r7[-8]
8002c444:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c448:	f0 16 00 6b 	mcall	r6[428]
8002c44c:	18 98       	mov	r8,r12
8002c44e:	58 18       	cp.w	r8,1
8002c450:	c0 31       	brne	8002c456 <usart_init_hw_handshaking+0x32>
    return USART_INVALID_INPUT;
8002c452:	30 18       	mov	r8,1
8002c454:	c0 c8       	rjmp	8002c46c <usart_init_hw_handshaking+0x48>

  // Set hardware handshaking mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002c456:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c45a:	70 18       	ld.w	r8,r8[0x4]
8002c45c:	e0 18 ff f0 	andl	r8,0xfff0
8002c460:	10 99       	mov	r9,r8
8002c462:	a1 b9       	sbr	r9,0x1
8002c464:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c468:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_HARDWARE << AVR32_USART_MR_MODE_OFFSET;

  return USART_SUCCESS;
8002c46a:	30 08       	mov	r8,0
}
8002c46c:	10 9c       	mov	r12,r8
8002c46e:	2f dd       	sub	sp,-12
8002c470:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c474:	80 02       	ld.sh	r2,r0[0x0]
8002c476:	c2 b2       	brcc	8002c4cc <usart_init_modem+0x54>

8002c478 <usart_init_modem>:


int usart_init_modem(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002c478:	eb cd 40 c0 	pushm	r6-r7,lr
8002c47c:	1a 97       	mov	r7,sp
8002c47e:	20 3d       	sub	sp,12
8002c480:	49 36       	lddpc	r6,8002c4cc <usart_init_modem+0x54>
8002c482:	1e 26       	rsub	r6,pc
8002c484:	ef 4c ff fc 	st.w	r7[-4],r12
8002c488:	ef 4b ff f8 	st.w	r7[-8],r11
8002c48c:	ef 4a ff f4 	st.w	r7[-12],r10
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
8002c490:	ee fa ff f4 	ld.w	r10,r7[-12]
8002c494:	ee fb ff f8 	ld.w	r11,r7[-8]
8002c498:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c49c:	f0 16 00 6b 	mcall	r6[428]
8002c4a0:	18 98       	mov	r8,r12
8002c4a2:	58 18       	cp.w	r8,1
8002c4a4:	c0 31       	brne	8002c4aa <usart_init_modem+0x32>
    return USART_INVALID_INPUT;
8002c4a6:	30 18       	mov	r8,1
8002c4a8:	c0 d8       	rjmp	8002c4c2 <usart_init_modem+0x4a>

  // Set modem mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002c4aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c4ae:	70 18       	ld.w	r8,r8[0x4]
8002c4b0:	e0 18 ff f0 	andl	r8,0xfff0
8002c4b4:	10 99       	mov	r9,r8
8002c4b6:	e8 19 00 03 	orl	r9,0x3
8002c4ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c4be:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_MODEM << AVR32_USART_MR_MODE_OFFSET;

  return USART_SUCCESS;
8002c4c0:	30 08       	mov	r8,0
}
8002c4c2:	10 9c       	mov	r12,r8
8002c4c4:	2f dd       	sub	sp,-12
8002c4c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c4ca:	00 00       	add	r0,r0
8002c4cc:	80 02       	ld.sh	r2,r0[0x0]
8002c4ce:	c3 06       	brmi	8002c52e <usart_init_sync_master+0x5e>

8002c4d0 <usart_init_sync_master>:


int usart_init_sync_master(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002c4d0:	eb cd 40 c0 	pushm	r6-r7,lr
8002c4d4:	1a 97       	mov	r7,sp
8002c4d6:	20 3d       	sub	sp,12
8002c4d8:	4d e6       	lddpc	r6,8002c650 <usart_init_sync_master+0x180>
8002c4da:	1e 26       	rsub	r6,pc
8002c4dc:	ef 4c ff fc 	st.w	r7[-4],r12
8002c4e0:	ef 4b ff f8 	st.w	r7[-8],r11
8002c4e4:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002c4e8:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c4ec:	f0 16 00 4d 	mcall	r6[308]

  // Check input values.
  if (!opt || // Null pointer.
8002c4f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c4f4:	58 08       	cp.w	r8,0
8002c4f6:	c4 00       	breq	8002c576 <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
8002c4f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c4fc:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c4fe:	30 48       	mov	r8,4
8002c500:	f0 09 18 00 	cp.b	r9,r8
8002c504:	e0 88 00 39 	brls	8002c576 <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
8002c508:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c50c:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c50e:	30 98       	mov	r8,9
8002c510:	f0 09 18 00 	cp.b	r9,r8
8002c514:	e0 8b 00 31 	brhi	8002c576 <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8002c518:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c51c:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c51e:	30 78       	mov	r8,7
8002c520:	f0 09 18 00 	cp.b	r9,r8
8002c524:	e0 8b 00 29 	brhi	8002c576 <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002c528:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c52c:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c52e:	30 18       	mov	r8,1
8002c530:	f0 09 19 00 	cp.h	r9,r8
8002c534:	c2 10       	breq	8002c576 <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002c536:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c53a:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c53c:	e0 68 01 01 	mov	r8,257
8002c540:	f0 09 19 00 	cp.h	r9,r8
8002c544:	e0 8b 00 19 	brhi	8002c576 <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8002c548:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c54c:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c550:	30 38       	mov	r8,3
8002c552:	f0 09 18 00 	cp.b	r9,r8
8002c556:	e0 8b 00 10 	brhi	8002c576 <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8002c55a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c55e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c562:	70 08       	ld.w	r8,r8[0x0]
8002c564:	12 9a       	mov	r10,r9
8002c566:	10 9b       	mov	r11,r8
8002c568:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c56c:	fe b0 fc dd 	rcall	8002bf26 <usart_set_sync_master_baudrate>
8002c570:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c572:	58 18       	cp.w	r8,1
8002c574:	c0 31       	brne	8002c57a <usart_init_sync_master+0xaa>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002c576:	30 18       	mov	r8,1
8002c578:	c6 78       	rjmp	8002c646 <usart_init_sync_master+0x176>

  if (opt->charlength == 9)
8002c57a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c57e:	11 c9       	ld.ub	r9,r8[0x4]
8002c580:	30 98       	mov	r8,9
8002c582:	f0 09 18 00 	cp.b	r9,r8
8002c586:	c0 a1       	brne	8002c59a <usart_init_sync_master+0xca>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002c588:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c58c:	70 18       	ld.w	r8,r8[0x4]
8002c58e:	10 99       	mov	r9,r8
8002c590:	b1 b9       	sbr	r9,0x11
8002c592:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c596:	91 19       	st.w	r8[0x4],r9
8002c598:	c0 d8       	rjmp	8002c5b2 <usart_init_sync_master+0xe2>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002c59a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c59e:	70 19       	ld.w	r9,r8[0x4]
8002c5a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c5a4:	11 c8       	ld.ub	r8,r8[0x4]
8002c5a6:	20 58       	sub	r8,5
8002c5a8:	a7 68       	lsl	r8,0x6
8002c5aa:	10 49       	or	r9,r8
8002c5ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c5b0:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002c5b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c5b6:	70 19       	ld.w	r9,r8[0x4]
8002c5b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c5bc:	11 d8       	ld.ub	r8,r8[0x5]
8002c5be:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8002c5c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c5c6:	f1 38 00 08 	ld.ub	r8,r8[8]
8002c5ca:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002c5cc:	f5 e8 10 08 	or	r8,r10,r8
8002c5d0:	10 49       	or	r9,r8
8002c5d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c5d6:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8002c5d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c5dc:	90 39       	ld.sh	r9,r8[0x6]
8002c5de:	30 28       	mov	r8,2
8002c5e0:	f0 09 19 00 	cp.h	r9,r8
8002c5e4:	e0 88 00 14 	brls	8002c60c <usart_init_sync_master+0x13c>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8002c5e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c5ec:	70 18       	ld.w	r8,r8[0x4]
8002c5ee:	10 99       	mov	r9,r8
8002c5f0:	ad b9       	sbr	r9,0xd
8002c5f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c5f6:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8002c5f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c5fc:	90 38       	ld.sh	r8,r8[0x6]
8002c5fe:	5c 78       	castu.h	r8
8002c600:	20 28       	sub	r8,2
8002c602:	10 99       	mov	r9,r8
8002c604:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c608:	91 a9       	st.w	r8[0x28],r9
8002c60a:	c0 d8       	rjmp	8002c624 <usart_init_sync_master+0x154>
  }
  else
    // Insert 1 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8002c60c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c610:	70 19       	ld.w	r9,r8[0x4]
8002c612:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c616:	90 38       	ld.sh	r8,r8[0x6]
8002c618:	5c 78       	castu.h	r8
8002c61a:	ad 68       	lsl	r8,0xc
8002c61c:	10 49       	or	r9,r8
8002c61e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c622:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002c624:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c628:	70 18       	ld.w	r8,r8[0x4]
8002c62a:	e4 18 ff fb 	andh	r8,0xfffb
8002c62e:	e0 18 ff f0 	andl	r8,0xfff0
8002c632:	10 99       	mov	r9,r8
8002c634:	b3 a9       	sbr	r9,0x12
8002c636:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c63a:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET |
              AVR32_USART_MR_CLKO_MASK;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002c63c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c640:	35 09       	mov	r9,80
8002c642:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002c644:	30 08       	mov	r8,0
}
8002c646:	10 9c       	mov	r12,r8
8002c648:	2f dd       	sub	sp,-12
8002c64a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c64e:	00 00       	add	r0,r0
8002c650:	80 02       	ld.sh	r2,r0[0x0]
8002c652:	c3 5e       	rcall	8002c2bc <usart_init_rs232_tx_only+0x14>

8002c654 <usart_init_sync_slave>:


int usart_init_sync_slave(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002c654:	eb cd 40 c0 	pushm	r6-r7,lr
8002c658:	1a 97       	mov	r7,sp
8002c65a:	20 3d       	sub	sp,12
8002c65c:	4d 96       	lddpc	r6,8002c7c0 <usart_init_sync_slave+0x16c>
8002c65e:	1e 26       	rsub	r6,pc
8002c660:	ef 4c ff fc 	st.w	r7[-4],r12
8002c664:	ef 4b ff f8 	st.w	r7[-8],r11
8002c668:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002c66c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c670:	f0 16 00 4d 	mcall	r6[308]

  // Check input values.
  if (!opt || // Null pointer.
8002c674:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c678:	58 08       	cp.w	r8,0
8002c67a:	c3 90       	breq	8002c6ec <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
8002c67c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c680:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c682:	30 48       	mov	r8,4
8002c684:	f0 09 18 00 	cp.b	r9,r8
8002c688:	e0 88 00 32 	brls	8002c6ec <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
8002c68c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c690:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c692:	30 98       	mov	r8,9
8002c694:	f0 09 18 00 	cp.b	r9,r8
8002c698:	e0 8b 00 2a 	brhi	8002c6ec <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8002c69c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c6a0:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c6a2:	30 78       	mov	r8,7
8002c6a4:	f0 09 18 00 	cp.b	r9,r8
8002c6a8:	e0 8b 00 22 	brhi	8002c6ec <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002c6ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c6b0:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c6b2:	30 18       	mov	r8,1
8002c6b4:	f0 09 19 00 	cp.h	r9,r8
8002c6b8:	c1 a0       	breq	8002c6ec <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002c6ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c6be:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c6c0:	e0 68 01 01 	mov	r8,257
8002c6c4:	f0 09 19 00 	cp.h	r9,r8
8002c6c8:	e0 8b 00 12 	brhi	8002c6ec <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8002c6cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c6d0:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c6d4:	30 38       	mov	r8,3
8002c6d6:	f0 09 18 00 	cp.b	r9,r8
8002c6da:	e0 8b 00 09 	brhi	8002c6ec <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_slave_baudrate(usart) == USART_INVALID_INPUT)
8002c6de:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c6e2:	fe b0 fc 5a 	rcall	8002bf96 <usart_set_sync_slave_baudrate>
8002c6e6:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c6e8:	58 18       	cp.w	r8,1
8002c6ea:	c0 31       	brne	8002c6f0 <usart_init_sync_slave+0x9c>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_slave_baudrate(usart) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002c6ec:	30 18       	mov	r8,1
8002c6ee:	c6 48       	rjmp	8002c7b6 <usart_init_sync_slave+0x162>

  if (opt->charlength == 9)
8002c6f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c6f4:	11 c9       	ld.ub	r9,r8[0x4]
8002c6f6:	30 98       	mov	r8,9
8002c6f8:	f0 09 18 00 	cp.b	r9,r8
8002c6fc:	c0 a1       	brne	8002c710 <usart_init_sync_slave+0xbc>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002c6fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c702:	70 18       	ld.w	r8,r8[0x4]
8002c704:	10 99       	mov	r9,r8
8002c706:	b1 b9       	sbr	r9,0x11
8002c708:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c70c:	91 19       	st.w	r8[0x4],r9
8002c70e:	c0 d8       	rjmp	8002c728 <usart_init_sync_slave+0xd4>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002c710:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c714:	70 19       	ld.w	r9,r8[0x4]
8002c716:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c71a:	11 c8       	ld.ub	r8,r8[0x4]
8002c71c:	20 58       	sub	r8,5
8002c71e:	a7 68       	lsl	r8,0x6
8002c720:	10 49       	or	r9,r8
8002c722:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c726:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002c728:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c72c:	70 19       	ld.w	r9,r8[0x4]
8002c72e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c732:	11 d8       	ld.ub	r8,r8[0x5]
8002c734:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8002c738:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c73c:	f1 38 00 08 	ld.ub	r8,r8[8]
8002c740:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002c742:	f5 e8 10 08 	or	r8,r10,r8
8002c746:	10 49       	or	r9,r8
8002c748:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c74c:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8002c74e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c752:	90 39       	ld.sh	r9,r8[0x6]
8002c754:	30 28       	mov	r8,2
8002c756:	f0 09 19 00 	cp.h	r9,r8
8002c75a:	e0 88 00 14 	brls	8002c782 <usart_init_sync_slave+0x12e>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8002c75e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c762:	70 18       	ld.w	r8,r8[0x4]
8002c764:	10 99       	mov	r9,r8
8002c766:	ad b9       	sbr	r9,0xd
8002c768:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c76c:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8002c76e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c772:	90 38       	ld.sh	r8,r8[0x6]
8002c774:	5c 78       	castu.h	r8
8002c776:	20 28       	sub	r8,2
8002c778:	10 99       	mov	r9,r8
8002c77a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c77e:	91 a9       	st.w	r8[0x28],r9
8002c780:	c0 d8       	rjmp	8002c79a <usart_init_sync_slave+0x146>
  }
  else
    // Insert 1 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8002c782:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c786:	70 19       	ld.w	r9,r8[0x4]
8002c788:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c78c:	90 38       	ld.sh	r8,r8[0x6]
8002c78e:	5c 78       	castu.h	r8
8002c790:	ad 68       	lsl	r8,0xc
8002c792:	10 49       	or	r9,r8
8002c794:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c798:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002c79a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c79e:	70 18       	ld.w	r8,r8[0x4]
8002c7a0:	10 99       	mov	r9,r8
8002c7a2:	e0 19 ff f0 	andl	r9,0xfff0
8002c7a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c7aa:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002c7ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c7b0:	35 09       	mov	r9,80
8002c7b2:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002c7b4:	30 08       	mov	r8,0
}
8002c7b6:	10 9c       	mov	r12,r8
8002c7b8:	2f dd       	sub	sp,-12
8002c7ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c7be:	00 00       	add	r0,r0
8002c7c0:	80 02       	ld.sh	r2,r0[0x0]
8002c7c2:	c4 e2       	brcc	8002c85e <usart_init_IrDA+0x46>

8002c7c4 <usart_init_rs485>:


int usart_init_rs485(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002c7c4:	eb cd 40 c0 	pushm	r6-r7,lr
8002c7c8:	1a 97       	mov	r7,sp
8002c7ca:	20 3d       	sub	sp,12
8002c7cc:	49 26       	lddpc	r6,8002c814 <usart_init_rs485+0x50>
8002c7ce:	1e 26       	rsub	r6,pc
8002c7d0:	ef 4c ff fc 	st.w	r7[-4],r12
8002c7d4:	ef 4b ff f8 	st.w	r7[-8],r11
8002c7d8:	ef 4a ff f4 	st.w	r7[-12],r10
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
8002c7dc:	ee fa ff f4 	ld.w	r10,r7[-12]
8002c7e0:	ee fb ff f8 	ld.w	r11,r7[-8]
8002c7e4:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c7e8:	f0 16 00 6b 	mcall	r6[428]
8002c7ec:	18 98       	mov	r8,r12
8002c7ee:	58 18       	cp.w	r8,1
8002c7f0:	c0 31       	brne	8002c7f6 <usart_init_rs485+0x32>
    return USART_INVALID_INPUT;
8002c7f2:	30 18       	mov	r8,1
8002c7f4:	c0 c8       	rjmp	8002c80c <usart_init_rs485+0x48>

  // Set RS485 mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002c7f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c7fa:	70 18       	ld.w	r8,r8[0x4]
8002c7fc:	e0 18 ff f0 	andl	r8,0xfff0
8002c800:	10 99       	mov	r9,r8
8002c802:	a1 a9       	sbr	r9,0x0
8002c804:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c808:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_RS485 << AVR32_USART_MR_MODE_OFFSET;

  return USART_SUCCESS;
8002c80a:	30 08       	mov	r8,0
}
8002c80c:	10 9c       	mov	r12,r8
8002c80e:	2f dd       	sub	sp,-12
8002c810:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c814:	80 02       	ld.sh	r2,r0[0x0]
8002c816:	c6 52       	brcc	8002c8e0 <usart_init_iso7816+0x58>

8002c818 <usart_init_IrDA>:


int usart_init_IrDA(volatile avr32_usart_t *usart, const usart_options_t *opt,
                    long pba_hz, unsigned char irda_filter)
{
8002c818:	eb cd 40 c0 	pushm	r6-r7,lr
8002c81c:	1a 97       	mov	r7,sp
8002c81e:	20 4d       	sub	sp,16
8002c820:	49 96       	lddpc	r6,8002c884 <usart_init_IrDA+0x6c>
8002c822:	1e 26       	rsub	r6,pc
8002c824:	ef 4c ff fc 	st.w	r7[-4],r12
8002c828:	ef 4b ff f8 	st.w	r7[-8],r11
8002c82c:	ef 4a ff f4 	st.w	r7[-12],r10
8002c830:	12 98       	mov	r8,r9
8002c832:	ef 68 ff f0 	st.b	r7[-16],r8
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
8002c836:	ee fa ff f4 	ld.w	r10,r7[-12]
8002c83a:	ee fb ff f8 	ld.w	r11,r7[-8]
8002c83e:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c842:	f0 16 00 6b 	mcall	r6[428]
8002c846:	18 98       	mov	r8,r12
8002c848:	58 18       	cp.w	r8,1
8002c84a:	c0 31       	brne	8002c850 <usart_init_IrDA+0x38>
    return USART_INVALID_INPUT;
8002c84c:	30 18       	mov	r8,1
8002c84e:	c1 78       	rjmp	8002c87c <usart_init_IrDA+0x64>

  // Set IrDA filter.
  usart->ifr = irda_filter;
8002c850:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002c854:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c858:	f1 49 00 4c 	st.w	r8[76],r9

  // Set IrDA mode and activate filtering of input.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002c85c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c860:	70 18       	ld.w	r8,r8[0x4]
8002c862:	e4 18 ef ff 	andh	r8,0xefff
8002c866:	e0 18 ff f0 	andl	r8,0xfff0
8002c86a:	10 99       	mov	r9,r8
8002c86c:	ea 19 10 00 	orh	r9,0x1000
8002c870:	e8 19 00 08 	orl	r9,0x8
8002c874:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c878:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MODE_IRDA << AVR32_USART_MR_MODE_OFFSET |
              AVR32_USART_MR_FILTER_MASK;

  return USART_SUCCESS;
8002c87a:	30 08       	mov	r8,0
}
8002c87c:	10 9c       	mov	r12,r8
8002c87e:	2f cd       	sub	sp,-16
8002c880:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c884:	80 02       	ld.sh	r2,r0[0x0]
8002c886:	c6 a6       	brmi	8002c95a <usart_init_iso7816+0xd2>

8002c888 <usart_init_iso7816>:


int usart_init_iso7816(volatile avr32_usart_t *usart, const usart_iso7816_options_t *opt, int t, long pba_hz)
{
8002c888:	eb cd 40 c0 	pushm	r6-r7,lr
8002c88c:	1a 97       	mov	r7,sp
8002c88e:	20 5d       	sub	sp,20
8002c890:	4c 46       	lddpc	r6,8002c9a0 <usart_init_iso7816+0x118>
8002c892:	1e 26       	rsub	r6,pc
8002c894:	ef 4c ff f8 	st.w	r7[-8],r12
8002c898:	ef 4b ff f4 	st.w	r7[-12],r11
8002c89c:	ef 4a ff f0 	st.w	r7[-16],r10
8002c8a0:	ef 49 ff ec 	st.w	r7[-20],r9
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002c8a4:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c8a8:	f0 16 00 4d 	mcall	r6[308]

  // Check input values.
  if (!opt || // Null pointer.
8002c8ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c8b0:	58 08       	cp.w	r8,0
8002c8b2:	c0 90       	breq	8002c8c4 <usart_init_iso7816+0x3c>
      opt->paritytype > 1)
8002c8b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c8b8:	11 e9       	ld.ub	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002c8ba:	30 18       	mov	r8,1
8002c8bc:	f0 09 18 00 	cp.b	r9,r8
8002c8c0:	e0 88 00 04 	brls	8002c8c8 <usart_init_iso7816+0x40>
      opt->paritytype > 1)
    return USART_INVALID_INPUT;
8002c8c4:	30 18       	mov	r8,1
8002c8c6:	c6 98       	rjmp	8002c998 <usart_init_iso7816+0x110>

  if (t == 0)
8002c8c8:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002c8cc:	58 08       	cp.w	r8,0
8002c8ce:	c0 c1       	brne	8002c8e6 <usart_init_iso7816+0x5e>
  {
    // Set USART mode to ISO7816, T=0.
    // The T=0 protocol always uses 2 stop bits.
    usart->mr = AVR32_USART_MR_MODE_ISO7816_T0 << AVR32_USART_MR_MODE_OFFSET |
8002c8d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c8d4:	70 58       	ld.w	r8,r8[0x14]
                AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET |
                opt->bit_order << AVR32_USART_MR_MSBF_OFFSET; // Allow MSBF in T=0.
8002c8d6:	b1 68       	lsl	r8,0x10

  if (t == 0)
  {
    // Set USART mode to ISO7816, T=0.
    // The T=0 protocol always uses 2 stop bits.
    usart->mr = AVR32_USART_MR_MODE_ISO7816_T0 << AVR32_USART_MR_MODE_OFFSET |
8002c8d8:	e8 18 20 04 	orl	r8,0x2004
8002c8dc:	10 99       	mov	r9,r8
8002c8de:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c8e2:	91 19       	st.w	r8[0x4],r9
8002c8e4:	c1 98       	rjmp	8002c916 <usart_init_iso7816+0x8e>
                AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET |
                opt->bit_order << AVR32_USART_MR_MSBF_OFFSET; // Allow MSBF in T=0.
  }
  else if (t == 1)
8002c8e6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002c8ea:	58 18       	cp.w	r8,1
8002c8ec:	c1 31       	brne	8002c912 <usart_init_iso7816+0x8a>
  {
    // Only LSB first in the T=1 protocol.
    // max_iterations field is only used in T=0 mode.
    if (opt->bit_order != 0 ||
8002c8ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c8f2:	70 58       	ld.w	r8,r8[0x14]
8002c8f4:	58 08       	cp.w	r8,0
8002c8f6:	c0 71       	brne	8002c904 <usart_init_iso7816+0x7c>
        opt->max_iterations != 0)
8002c8f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c8fc:	f1 38 00 10 	ld.ub	r8,r8[16]
  }
  else if (t == 1)
  {
    // Only LSB first in the T=1 protocol.
    // max_iterations field is only used in T=0 mode.
    if (opt->bit_order != 0 ||
8002c900:	58 08       	cp.w	r8,0
8002c902:	c0 30       	breq	8002c908 <usart_init_iso7816+0x80>
        opt->max_iterations != 0)
      return USART_INVALID_INPUT;
8002c904:	30 18       	mov	r8,1
8002c906:	c4 98       	rjmp	8002c998 <usart_init_iso7816+0x110>

    // Set USART mode to ISO7816, T=1.
    // The T=1 protocol always uses 1 stop bit.
    usart->mr = AVR32_USART_MR_MODE_ISO7816_T1 << AVR32_USART_MR_MODE_OFFSET |
8002c908:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c90c:	30 69       	mov	r9,6
8002c90e:	91 19       	st.w	r8[0x4],r9
8002c910:	c0 38       	rjmp	8002c916 <usart_init_iso7816+0x8e>
                AVR32_USART_MR_NBSTOP_1 << AVR32_USART_MR_NBSTOP_OFFSET;
  }
  else
    return USART_INVALID_INPUT;
8002c912:	30 18       	mov	r8,1
8002c914:	c4 28       	rjmp	8002c998 <usart_init_iso7816+0x110>

  if (usart_set_iso7816_clock(usart, opt->iso7816_hz, pba_hz) == USART_INVALID_INPUT)
8002c916:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002c91a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c91e:	70 08       	ld.w	r8,r8[0x0]
8002c920:	12 9a       	mov	r10,r9
8002c922:	10 9b       	mov	r11,r8
8002c924:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c928:	fe b0 fb 4b 	rcall	8002bfbe <usart_set_iso7816_clock>
8002c92c:	18 98       	mov	r8,r12
8002c92e:	58 18       	cp.w	r8,1
8002c930:	c0 31       	brne	8002c936 <usart_init_iso7816+0xae>
    return USART_INVALID_INPUT;
8002c932:	30 18       	mov	r8,1
8002c934:	c3 28       	rjmp	8002c998 <usart_init_iso7816+0x110>

  // Set FIDI register: bit rate = selected clock/FI_DI_ratio/16.
  usart->fidi = opt->fidi_ratio;
8002c936:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c93a:	90 28       	ld.sh	r8,r8[0x4]
8002c93c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8002c940:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c944:	f1 49 00 40 	st.w	r8[64],r9

  // Set ISO7816 spesific options in the MODE register.
  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002c948:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c94c:	70 19       	ld.w	r9,r8[0x4]
8002c94e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c952:	11 e8       	ld.ub	r8,r8[0x6]
8002c954:	a9 78       	lsl	r8,0x9
               AVR32_USART_MR_CLKO_MASK | // Enable clock output.
8002c956:	10 9a       	mov	r10,r8
8002c958:	b3 aa       	sbr	r10,0x12
               opt->inhibit_nack << AVR32_USART_MR_INACK_OFFSET |
8002c95a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c95e:	70 28       	ld.w	r8,r8[0x8]
8002c960:	b5 68       	lsl	r8,0x14
8002c962:	10 4a       	or	r10,r8
               opt->dis_suc_nack << AVR32_USART_MR_DSNACK_OFFSET |
8002c964:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c968:	70 38       	ld.w	r8,r8[0xc]
8002c96a:	b5 78       	lsl	r8,0x15
8002c96c:	10 4a       	or	r10,r8
               opt->max_iterations << AVR32_USART_MR_MAX_ITERATION_OFFSET;
8002c96e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c972:	f1 38 00 10 	ld.ub	r8,r8[16]
8002c976:	b9 68       	lsl	r8,0x18

  // Set FIDI register: bit rate = selected clock/FI_DI_ratio/16.
  usart->fidi = opt->fidi_ratio;

  // Set ISO7816 spesific options in the MODE register.
  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002c978:	f5 e8 10 08 	or	r8,r10,r8
8002c97c:	10 49       	or	r9,r8
8002c97e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c982:	91 19       	st.w	r8[0x4],r9
8002c984:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c988:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void usart_iso7816_enable_receiver(volatile avr32_usart_t *usart)
{
  usart->cr = AVR32_USART_CR_TXDIS_MASK | AVR32_USART_CR_RXEN_MASK;
8002c98c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c990:	e0 69 00 90 	mov	r9,144
8002c994:	91 09       	st.w	r8[0x0],r9
               opt->max_iterations << AVR32_USART_MR_MAX_ITERATION_OFFSET;

  // Setup complete; enable the receiver by default.
  usart_iso7816_enable_receiver(usart);

  return USART_SUCCESS;
8002c996:	30 08       	mov	r8,0
}
8002c998:	10 9c       	mov	r12,r8
8002c99a:	2f bd       	sub	sp,-20
8002c99c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c9a0:	80 02       	ld.sh	r2,r0[0x0]
8002c9a2:	c7 16       	brmi	8002ca84 <usart_init_spi_master+0x18>

8002c9a4 <usart_init_lin_master>:
    defined(AVR32_USART_440_H_INCLUDED) || \
    defined(AVR32_USART_602_H_INCLUDED)


int usart_init_lin_master(volatile avr32_usart_t *usart, unsigned long baudrate, long pba_hz)
{
8002c9a4:	eb cd 40 c0 	pushm	r6-r7,lr
8002c9a8:	1a 97       	mov	r7,sp
8002c9aa:	20 3d       	sub	sp,12
8002c9ac:	49 66       	lddpc	r6,8002ca04 <usart_init_lin_master+0x60>
8002c9ae:	1e 26       	rsub	r6,pc
8002c9b0:	ef 4c ff fc 	st.w	r7[-4],r12
8002c9b4:	ef 4b ff f8 	st.w	r7[-8],r11
8002c9b8:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002c9bc:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c9c0:	f0 16 00 4d 	mcall	r6[308]

  // Check input values.
  if (usart_set_async_baudrate(usart, baudrate, pba_hz) == USART_INVALID_INPUT)
8002c9c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c9c8:	10 9a       	mov	r10,r8
8002c9ca:	ee fb ff f8 	ld.w	r11,r7[-8]
8002c9ce:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c9d2:	fe b0 fa 41 	rcall	8002be54 <usart_set_async_baudrate>
8002c9d6:	18 98       	mov	r8,r12
8002c9d8:	58 18       	cp.w	r8,1
8002c9da:	c0 31       	brne	8002c9e0 <usart_init_lin_master+0x3c>
    return USART_INVALID_INPUT;
8002c9dc:	30 18       	mov	r8,1
8002c9de:	c0 f8       	rjmp	8002c9fc <usart_init_lin_master+0x58>

  usart->mr |= AVR32_USART_MR_MODE_LIN_MASTER << AVR32_USART_MR_MODE_OFFSET;  // LIN master mode.
8002c9e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c9e4:	70 18       	ld.w	r8,r8[0x4]
8002c9e6:	10 99       	mov	r9,r8
8002c9e8:	e8 19 00 0a 	orl	r9,0xa
8002c9ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c9f0:	91 19       	st.w	r8[0x4],r9

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002c9f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c9f6:	35 09       	mov	r9,80
8002c9f8:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002c9fa:	30 08       	mov	r8,0
}
8002c9fc:	10 9c       	mov	r12,r8
8002c9fe:	2f dd       	sub	sp,-12
8002ca00:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ca04:	80 02       	ld.sh	r2,r0[0x0]
8002ca06:	c8 32       	brcc	8002c90c <usart_init_iso7816+0x84>

8002ca08 <usart_init_lin_slave>:


int usart_init_lin_slave(volatile avr32_usart_t *usart, unsigned long baudrate, long pba_hz)
{
8002ca08:	eb cd 40 c0 	pushm	r6-r7,lr
8002ca0c:	1a 97       	mov	r7,sp
8002ca0e:	20 3d       	sub	sp,12
8002ca10:	49 66       	lddpc	r6,8002ca68 <usart_init_lin_slave+0x60>
8002ca12:	1e 26       	rsub	r6,pc
8002ca14:	ef 4c ff fc 	st.w	r7[-4],r12
8002ca18:	ef 4b ff f8 	st.w	r7[-8],r11
8002ca1c:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002ca20:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ca24:	f0 16 00 4d 	mcall	r6[308]

  // Check input values.
  if (usart_set_async_baudrate(usart, baudrate, pba_hz) == USART_INVALID_INPUT)
8002ca28:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ca2c:	10 9a       	mov	r10,r8
8002ca2e:	ee fb ff f8 	ld.w	r11,r7[-8]
8002ca32:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ca36:	fe b0 fa 0f 	rcall	8002be54 <usart_set_async_baudrate>
8002ca3a:	18 98       	mov	r8,r12
8002ca3c:	58 18       	cp.w	r8,1
8002ca3e:	c0 31       	brne	8002ca44 <usart_init_lin_slave+0x3c>
    return USART_INVALID_INPUT;
8002ca40:	30 18       	mov	r8,1
8002ca42:	c0 f8       	rjmp	8002ca60 <usart_init_lin_slave+0x58>

  usart->mr |= AVR32_USART_MR_MODE_LIN_SLAVE << AVR32_USART_MR_MODE_OFFSET; // LIN slave mode.
8002ca44:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ca48:	70 18       	ld.w	r8,r8[0x4]
8002ca4a:	10 99       	mov	r9,r8
8002ca4c:	e8 19 00 0b 	orl	r9,0xb
8002ca50:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ca54:	91 19       	st.w	r8[0x4],r9

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002ca56:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ca5a:	35 09       	mov	r9,80
8002ca5c:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002ca5e:	30 08       	mov	r8,0
}
8002ca60:	10 9c       	mov	r12,r8
8002ca62:	2f dd       	sub	sp,-12
8002ca64:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ca68:	80 02       	ld.sh	r2,r0[0x0]
8002ca6a:	c8 96       	brmi	8002c97c <usart_init_iso7816+0xf4>

8002ca6c <usart_init_spi_master>:


int usart_init_spi_master(volatile avr32_usart_t *usart, const usart_spi_options_t *opt, long pba_hz)
{
8002ca6c:	eb cd 40 c0 	pushm	r6-r7,lr
8002ca70:	1a 97       	mov	r7,sp
8002ca72:	20 3d       	sub	sp,12
8002ca74:	4c 46       	lddpc	r6,8002cb84 <usart_init_spi_master+0x118>
8002ca76:	1e 26       	rsub	r6,pc
8002ca78:	ef 4c ff fc 	st.w	r7[-4],r12
8002ca7c:	ef 4b ff f8 	st.w	r7[-8],r11
8002ca80:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002ca84:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ca88:	f0 16 00 4d 	mcall	r6[308]

  // Check input values.
  if (!opt || // Null pointer.
8002ca8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ca90:	58 08       	cp.w	r8,0
8002ca92:	c2 f0       	breq	8002caf0 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
8002ca94:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ca98:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002ca9a:	30 48       	mov	r8,4
8002ca9c:	f0 09 18 00 	cp.b	r9,r8
8002caa0:	e0 88 00 28 	brls	8002caf0 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
8002caa4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002caa8:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002caaa:	30 98       	mov	r8,9
8002caac:	f0 09 18 00 	cp.b	r9,r8
8002cab0:	e0 8b 00 20 	brhi	8002caf0 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
8002cab4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cab8:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002caba:	30 38       	mov	r8,3
8002cabc:	f0 09 18 00 	cp.b	r9,r8
8002cac0:	e0 8b 00 18 	brhi	8002caf0 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
8002cac4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cac8:	11 e9       	ld.ub	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002caca:	30 38       	mov	r8,3
8002cacc:	f0 09 18 00 	cp.b	r9,r8
8002cad0:	e0 8b 00 10 	brhi	8002caf0 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8002cad4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002cad8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cadc:	70 08       	ld.w	r8,r8[0x0]
8002cade:	12 9a       	mov	r10,r9
8002cae0:	10 9b       	mov	r11,r8
8002cae2:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cae6:	fe b0 fa a5 	rcall	8002c030 <usart_set_spi_master_baudrate>
8002caea:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002caec:	58 18       	cp.w	r8,1
8002caee:	c0 31       	brne	8002caf4 <usart_init_spi_master+0x88>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002caf0:	30 18       	mov	r8,1
8002caf2:	c4 48       	rjmp	8002cb7a <usart_init_spi_master+0x10e>

  if (opt->charlength == 9)
8002caf4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002caf8:	11 c9       	ld.ub	r9,r8[0x4]
8002cafa:	30 98       	mov	r8,9
8002cafc:	f0 09 18 00 	cp.b	r9,r8
8002cb00:	c0 a1       	brne	8002cb14 <usart_init_spi_master+0xa8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002cb02:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cb06:	70 18       	ld.w	r8,r8[0x4]
8002cb08:	10 99       	mov	r9,r8
8002cb0a:	b1 b9       	sbr	r9,0x11
8002cb0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cb10:	91 19       	st.w	r8[0x4],r9
8002cb12:	c0 d8       	rjmp	8002cb2c <usart_init_spi_master+0xc0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002cb14:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cb18:	70 19       	ld.w	r9,r8[0x4]
8002cb1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cb1e:	11 c8       	ld.ub	r8,r8[0x4]
8002cb20:	20 58       	sub	r8,5
8002cb22:	a7 68       	lsl	r8,0x6
8002cb24:	10 49       	or	r9,r8
8002cb26:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cb2a:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
8002cb2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cb30:	70 19       	ld.w	r9,r8[0x4]
               ((opt->spimode & 0x1) ^ 0x1) << AVR32_USART_MR_SYNC_OFFSET |   // SPI clock phase.
8002cb32:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cb36:	11 d8       	ld.ub	r8,r8[0x5]
8002cb38:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002cb3c:	c0 41       	brne	8002cb44 <usart_init_spi_master+0xd8>
8002cb3e:	e0 68 01 0e 	mov	r8,270
8002cb42:	c0 28       	rjmp	8002cb46 <usart_init_spi_master+0xda>
8002cb44:	30 e8       	mov	r8,14
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET |             // Channel mode.
8002cb46:	ee fa ff f8 	ld.w	r10,r7[-8]
8002cb4a:	15 ea       	ld.ub	r10,r10[0x6]
8002cb4c:	af 6a       	lsl	r10,0xe
8002cb4e:	f1 ea 10 0a 	or	r10,r8,r10
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET |            // SPI clock polarity.
8002cb52:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cb56:	11 d8       	ld.ub	r8,r8[0x5]
8002cb58:	a1 98       	lsr	r8,0x1
8002cb5a:	5c 58       	castu.b	r8
8002cb5c:	b1 68       	lsl	r8,0x10
8002cb5e:	f5 e8 10 08 	or	r8,r10,r8
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
8002cb62:	f3 e8 10 08 	or	r8,r9,r8
8002cb66:	10 99       	mov	r9,r8
8002cb68:	b3 a9       	sbr	r9,0x12
8002cb6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cb6e:	91 19       	st.w	r8[0x4],r9
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET |            // SPI clock polarity.
               AVR32_USART_MR_CLKO_MASK;                                      // Drive SCK pin.

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002cb70:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cb74:	35 09       	mov	r9,80
8002cb76:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002cb78:	30 08       	mov	r8,0
}
8002cb7a:	10 9c       	mov	r12,r8
8002cb7c:	2f dd       	sub	sp,-12
8002cb7e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cb82:	00 00       	add	r0,r0
8002cb84:	80 02       	ld.sh	r2,r0[0x0]
8002cb86:	c8 fa       	rjmp	8002c8a4 <usart_init_iso7816+0x1c>

8002cb88 <usart_init_spi_slave>:


int usart_init_spi_slave(volatile avr32_usart_t *usart, const usart_spi_options_t *opt, long pba_hz)
{
8002cb88:	eb cd 40 c0 	pushm	r6-r7,lr
8002cb8c:	1a 97       	mov	r7,sp
8002cb8e:	20 3d       	sub	sp,12
8002cb90:	4b f6       	lddpc	r6,8002cc8c <usart_init_spi_slave+0x104>
8002cb92:	1e 26       	rsub	r6,pc
8002cb94:	ef 4c ff fc 	st.w	r7[-4],r12
8002cb98:	ef 4b ff f8 	st.w	r7[-8],r11
8002cb9c:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002cba0:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cba4:	f0 16 00 4d 	mcall	r6[308]

  // Check input values.
  if (!opt || // Null pointer.
8002cba8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cbac:	58 08       	cp.w	r8,0
8002cbae:	c2 80       	breq	8002cbfe <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
8002cbb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cbb4:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002cbb6:	30 48       	mov	r8,4
8002cbb8:	f0 09 18 00 	cp.b	r9,r8
8002cbbc:	e0 88 00 21 	brls	8002cbfe <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
8002cbc0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cbc4:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002cbc6:	30 98       	mov	r8,9
8002cbc8:	f0 09 18 00 	cp.b	r9,r8
8002cbcc:	e0 8b 00 19 	brhi	8002cbfe <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
8002cbd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cbd4:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002cbd6:	30 38       	mov	r8,3
8002cbd8:	f0 09 18 00 	cp.b	r9,r8
8002cbdc:	e0 8b 00 11 	brhi	8002cbfe <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
8002cbe0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cbe4:	11 e9       	ld.ub	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002cbe6:	30 38       	mov	r8,3
8002cbe8:	f0 09 18 00 	cp.b	r9,r8
8002cbec:	e0 8b 00 09 	brhi	8002cbfe <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_slave_baudrate(usart) == USART_INVALID_INPUT)
8002cbf0:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cbf4:	fe b0 fa 56 	rcall	8002c0a0 <usart_set_spi_slave_baudrate>
8002cbf8:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002cbfa:	58 18       	cp.w	r8,1
8002cbfc:	c0 31       	brne	8002cc02 <usart_init_spi_slave+0x7a>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_slave_baudrate(usart) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002cbfe:	30 18       	mov	r8,1
8002cc00:	c4 18       	rjmp	8002cc82 <usart_init_spi_slave+0xfa>

  if (opt->charlength == 9)
8002cc02:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cc06:	11 c9       	ld.ub	r9,r8[0x4]
8002cc08:	30 98       	mov	r8,9
8002cc0a:	f0 09 18 00 	cp.b	r9,r8
8002cc0e:	c0 a1       	brne	8002cc22 <usart_init_spi_slave+0x9a>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002cc10:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cc14:	70 18       	ld.w	r8,r8[0x4]
8002cc16:	10 99       	mov	r9,r8
8002cc18:	b1 b9       	sbr	r9,0x11
8002cc1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cc1e:	91 19       	st.w	r8[0x4],r9
8002cc20:	c0 d8       	rjmp	8002cc3a <usart_init_spi_slave+0xb2>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002cc22:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cc26:	70 19       	ld.w	r9,r8[0x4]
8002cc28:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cc2c:	11 c8       	ld.ub	r8,r8[0x4]
8002cc2e:	20 58       	sub	r8,5
8002cc30:	a7 68       	lsl	r8,0x6
8002cc32:	10 49       	or	r9,r8
8002cc34:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cc38:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_SLAVE << AVR32_USART_MR_MODE_OFFSET |  // SPI slave mode.
8002cc3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cc3e:	70 19       	ld.w	r9,r8[0x4]
               ((opt->spimode & 0x1) ^ 0x1) << AVR32_USART_MR_SYNC_OFFSET |   // SPI clock phase.
8002cc40:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cc44:	11 d8       	ld.ub	r8,r8[0x5]
8002cc46:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002cc4a:	c0 41       	brne	8002cc52 <usart_init_spi_slave+0xca>
8002cc4c:	e0 68 01 0f 	mov	r8,271
8002cc50:	c0 28       	rjmp	8002cc54 <usart_init_spi_slave+0xcc>
8002cc52:	30 f8       	mov	r8,15
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET |             // Channel mode.
8002cc54:	ee fa ff f8 	ld.w	r10,r7[-8]
8002cc58:	15 ea       	ld.ub	r10,r10[0x6]
8002cc5a:	af 6a       	lsl	r10,0xe
8002cc5c:	f1 ea 10 0a 	or	r10,r8,r10
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET;             // SPI clock polarity.
8002cc60:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cc64:	11 d8       	ld.ub	r8,r8[0x5]
8002cc66:	a1 98       	lsr	r8,0x1
8002cc68:	5c 58       	castu.b	r8
8002cc6a:	b1 68       	lsl	r8,0x10
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_SLAVE << AVR32_USART_MR_MODE_OFFSET |  // SPI slave mode.
8002cc6c:	f5 e8 10 08 	or	r8,r10,r8
8002cc70:	10 49       	or	r9,r8
8002cc72:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cc76:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET |             // Channel mode.
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET;             // SPI clock polarity.

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002cc78:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cc7c:	35 09       	mov	r9,80
8002cc7e:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002cc80:	30 08       	mov	r8,0
}
8002cc82:	10 9c       	mov	r12,r8
8002cc84:	2f dd       	sub	sp,-12
8002cc86:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cc8a:	00 00       	add	r0,r0
8002cc8c:	80 02       	ld.sh	r2,r0[0x0]
8002cc8e:	ca 16       	brmi	8002cbd0 <usart_init_spi_slave+0x48>

8002cc90 <usart_spi_selectChip>:
 */
//! @{


int usart_spi_selectChip(volatile avr32_usart_t *usart)
{
8002cc90:	eb cd 40 80 	pushm	r7,lr
8002cc94:	1a 97       	mov	r7,sp
8002cc96:	20 1d       	sub	sp,4
8002cc98:	ef 4c ff fc 	st.w	r7[-4],r12
  // Force the SPI chip select.
  usart->cr = AVR32_USART_CR_RTSEN_MASK;
8002cc9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cca0:	e4 69 00 00 	mov	r9,262144
8002cca4:	91 09       	st.w	r8[0x0],r9

  return USART_SUCCESS;
8002cca6:	30 08       	mov	r8,0
}
8002cca8:	10 9c       	mov	r12,r8
8002ccaa:	2f fd       	sub	sp,-4
8002ccac:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ccb0 <usart_spi_unselectChip>:


int usart_spi_unselectChip(volatile avr32_usart_t *usart)
{
8002ccb0:	eb cd 40 80 	pushm	r7,lr
8002ccb4:	1a 97       	mov	r7,sp
8002ccb6:	20 3d       	sub	sp,12
8002ccb8:	ef 4c ff f4 	st.w	r7[-12],r12
  int timeout = USART_DEFAULT_TIMEOUT;
8002ccbc:	e0 68 27 10 	mov	r8,10000
8002ccc0:	ef 48 ff f8 	st.w	r7[-8],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
8002ccc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ccc8:	58 08       	cp.w	r8,0
8002ccca:	5f 08       	sreq	r8
8002cccc:	5c 58       	castu.b	r8
8002ccce:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002ccd2:	20 19       	sub	r9,1
8002ccd4:	ef 49 ff f8 	st.w	r7[-8],r9
8002ccd8:	58 08       	cp.w	r8,0
8002ccda:	c0 30       	breq	8002cce0 <usart_spi_unselectChip+0x30>
8002ccdc:	3f f8       	mov	r8,-1
8002ccde:	c1 38       	rjmp	8002cd04 <usart_spi_unselectChip+0x54>
8002cce0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002cce4:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_empty(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXEMPTY_MASK) != 0;
8002cce8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ccec:	70 58       	ld.w	r8,r8[0x14]
8002ccee:	e2 18 02 00 	andl	r8,0x200,COH
8002ccf2:	5f 18       	srne	r8
  } while (!usart_tx_empty(usart));
8002ccf4:	58 08       	cp.w	r8,0
8002ccf6:	ce 70       	breq	8002ccc4 <usart_spi_unselectChip+0x14>

  // Release the SPI chip select.
  usart->cr = AVR32_USART_CR_RTSDIS_MASK;
8002ccf8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ccfc:	e8 69 00 00 	mov	r9,524288
8002cd00:	91 09       	st.w	r8[0x0],r9

  return USART_SUCCESS;
8002cd02:	30 08       	mov	r8,0
}
8002cd04:	10 9c       	mov	r12,r8
8002cd06:	2f dd       	sub	sp,-12
8002cd08:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cd0c <usart_send_address>:
 */
//! @{


int usart_send_address(volatile avr32_usart_t *usart, int address)
{
8002cd0c:	eb cd 40 c0 	pushm	r6-r7,lr
8002cd10:	1a 97       	mov	r7,sp
8002cd12:	20 5d       	sub	sp,20
8002cd14:	49 96       	lddpc	r6,8002cd78 <usart_send_address+0x6c>
8002cd16:	1e 26       	rsub	r6,pc
8002cd18:	ef 4c ff f0 	st.w	r7[-16],r12
8002cd1c:	ef 4b ff ec 	st.w	r7[-20],r11
8002cd20:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002cd24:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ int usart_mode_is_multidrop(volatile avr32_usart_t *usart)
{
  return ((usart->mr >> AVR32_USART_MR_PAR_OFFSET) & AVR32_USART_MR_PAR_MULTI) == AVR32_USART_MR_PAR_MULTI;
8002cd28:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002cd2c:	70 18       	ld.w	r8,r8[0x4]
8002cd2e:	a9 98       	lsr	r8,0x9
8002cd30:	e2 18 00 06 	andl	r8,0x6,COH
8002cd34:	58 68       	cp.w	r8,6
8002cd36:	5f 08       	sreq	r8


int usart_send_address(volatile avr32_usart_t *usart, int address)
{
  // Check if USART is in multidrop / RS485 mode.
  if (!usart_mode_is_multidrop(usart)) return USART_MODE_FAULT;
8002cd38:	58 08       	cp.w	r8,0
8002cd3a:	c0 31       	brne	8002cd40 <usart_send_address+0x34>
8002cd3c:	30 58       	mov	r8,5
8002cd3e:	c1 88       	rjmp	8002cd6e <usart_send_address+0x62>

  // Prepare to send an address.
  usart->cr = AVR32_USART_CR_SENDA_MASK;
8002cd40:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002cd44:	e0 69 10 00 	mov	r9,4096
8002cd48:	91 09       	st.w	r8[0x0],r9
8002cd4a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002cd4e:	ef 48 ff fc 	st.w	r7[-4],r8
8002cd52:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002cd56:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void usart_bw_write_char(volatile avr32_usart_t *usart, int c)
{
  while (usart_write_char(usart, c) != USART_SUCCESS);
8002cd5a:	ee fb ff f8 	ld.w	r11,r7[-8]
8002cd5e:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cd62:	f0 16 01 1d 	mcall	r6[1140]
8002cd66:	18 98       	mov	r8,r12
8002cd68:	58 08       	cp.w	r8,0
8002cd6a:	cf 81       	brne	8002cd5a <usart_send_address+0x4e>

  // Write the address to TX.
  usart_bw_write_char(usart, address);

  return USART_SUCCESS;
8002cd6c:	30 08       	mov	r8,0
}
8002cd6e:	10 9c       	mov	r12,r8
8002cd70:	2f bd       	sub	sp,-20
8002cd72:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cd76:	00 00       	add	r0,r0
8002cd78:	80 02       	ld.sh	r2,r0[0x0]
8002cd7a:	cb 9a       	rjmp	8002caec <usart_init_spi_master+0x80>

8002cd7c <usart_write_char>:


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
8002cd7c:	eb cd 40 80 	pushm	r7,lr
8002cd80:	1a 97       	mov	r7,sp
8002cd82:	20 3d       	sub	sp,12
8002cd84:	ef 4c ff f8 	st.w	r7[-8],r12
8002cd88:	ef 4b ff f4 	st.w	r7[-12],r11
8002cd8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cd90:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
8002cd94:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cd98:	70 58       	ld.w	r8,r8[0x14]
8002cd9a:	e2 18 00 02 	andl	r8,0x2,COH
8002cd9e:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
8002cda0:	58 08       	cp.w	r8,0
8002cda2:	c0 a0       	breq	8002cdb6 <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
8002cda4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002cda8:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
8002cdac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cdb0:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
8002cdb2:	30 08       	mov	r8,0
8002cdb4:	c0 28       	rjmp	8002cdb8 <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
8002cdb6:	30 28       	mov	r8,2
}
8002cdb8:	10 9c       	mov	r12,r8
8002cdba:	2f dd       	sub	sp,-12
8002cdbc:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cdc0 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
8002cdc0:	eb cd 40 c0 	pushm	r6-r7,lr
8002cdc4:	1a 97       	mov	r7,sp
8002cdc6:	20 3d       	sub	sp,12
8002cdc8:	49 36       	lddpc	r6,8002ce14 <usart_putchar+0x54>
8002cdca:	1e 26       	rsub	r6,pc
8002cdcc:	ef 4c ff f8 	st.w	r7[-8],r12
8002cdd0:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
8002cdd4:	e0 68 27 10 	mov	r8,10000
8002cdd8:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
8002cddc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cde0:	58 08       	cp.w	r8,0
8002cde2:	5f 08       	sreq	r8
8002cde4:	5c 58       	castu.b	r8
8002cde6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cdea:	20 19       	sub	r9,1
8002cdec:	ef 49 ff fc 	st.w	r7[-4],r9
8002cdf0:	58 08       	cp.w	r8,0
8002cdf2:	c0 30       	breq	8002cdf8 <usart_putchar+0x38>
8002cdf4:	3f f8       	mov	r8,-1
8002cdf6:	c0 b8       	rjmp	8002ce0c <usart_putchar+0x4c>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
8002cdf8:	ee fb ff f4 	ld.w	r11,r7[-12]
8002cdfc:	ee fc ff f8 	ld.w	r12,r7[-8]
8002ce00:	f0 16 01 1d 	mcall	r6[1140]
8002ce04:	18 98       	mov	r8,r12
8002ce06:	58 08       	cp.w	r8,0
8002ce08:	ce a1       	brne	8002cddc <usart_putchar+0x1c>

  return USART_SUCCESS;
8002ce0a:	30 08       	mov	r8,0
}
8002ce0c:	10 9c       	mov	r12,r8
8002ce0e:	2f dd       	sub	sp,-12
8002ce10:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ce14:	80 02       	ld.sh	r2,r0[0x0]
8002ce16:	cc 4e       	rcall	8002cb9e <usart_init_spi_slave+0x16>

8002ce18 <usart_read_char>:


int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
8002ce18:	eb cd 40 80 	pushm	r7,lr
8002ce1c:	1a 97       	mov	r7,sp
8002ce1e:	20 3d       	sub	sp,12
8002ce20:	ef 4c ff f8 	st.w	r7[-8],r12
8002ce24:	ef 4b ff f4 	st.w	r7[-12],r11
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
8002ce28:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ce2c:	70 58       	ld.w	r8,r8[0x14]
8002ce2e:	e2 18 00 e0 	andl	r8,0xe0,COH
8002ce32:	c0 30       	breq	8002ce38 <usart_read_char+0x20>
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;
8002ce34:	30 48       	mov	r8,4
8002ce36:	c1 68       	rjmp	8002ce62 <usart_read_char+0x4a>
8002ce38:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ce3c:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
8002ce40:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ce44:	70 58       	ld.w	r8,r8[0x14]
8002ce46:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
8002ce4a:	c0 b0       	breq	8002ce60 <usart_read_char+0x48>
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
8002ce4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ce50:	70 68       	ld.w	r8,r8[0x18]
8002ce52:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
8002ce56:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ce5a:	91 09       	st.w	r8[0x0],r9
    return USART_SUCCESS;
8002ce5c:	30 08       	mov	r8,0
8002ce5e:	c0 28       	rjmp	8002ce62 <usart_read_char+0x4a>
  }
  else
    return USART_RX_EMPTY;
8002ce60:	30 38       	mov	r8,3
}
8002ce62:	10 9c       	mov	r12,r8
8002ce64:	2f dd       	sub	sp,-12
8002ce66:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ce6a <usart_getchar>:


int usart_getchar(volatile avr32_usart_t *usart)
{
8002ce6a:	eb cd 40 c0 	pushm	r6-r7,lr
8002ce6e:	1a 97       	mov	r7,sp
8002ce70:	20 3d       	sub	sp,12
8002ce72:	49 06       	lddpc	r6,8002ceb0 <usart_getchar+0x46>
8002ce74:	1e 26       	rsub	r6,pc
8002ce76:	ef 4c ff f4 	st.w	r7[-12],r12
  int c, ret;

  while ((ret = usart_read_char(usart, &c)) == USART_RX_EMPTY);
8002ce7a:	ee c8 00 08 	sub	r8,r7,8
8002ce7e:	10 9b       	mov	r11,r8
8002ce80:	ee fc ff f4 	ld.w	r12,r7[-12]
8002ce84:	f0 16 02 04 	mcall	r6[2064]
8002ce88:	18 98       	mov	r8,r12
8002ce8a:	ef 48 ff fc 	st.w	r7[-4],r8
8002ce8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ce92:	58 38       	cp.w	r8,3
8002ce94:	cf 30       	breq	8002ce7a <usart_getchar+0x10>

  if (ret == USART_RX_ERROR)
8002ce96:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ce9a:	58 48       	cp.w	r8,4
8002ce9c:	c0 31       	brne	8002cea2 <usart_getchar+0x38>
    return USART_FAILURE;
8002ce9e:	3f f8       	mov	r8,-1
8002cea0:	c0 38       	rjmp	8002cea6 <usart_getchar+0x3c>

  return c;
8002cea2:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8002cea6:	10 9c       	mov	r12,r8
8002cea8:	2f dd       	sub	sp,-12
8002ceaa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ceae:	00 00       	add	r0,r0
8002ceb0:	80 02       	ld.sh	r2,r0[0x0]
8002ceb2:	cc f8       	rjmp	8002d050 <delay_ms+0xa4>

8002ceb4 <usart_write_line>:


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
8002ceb4:	eb cd 40 c0 	pushm	r6-r7,lr
8002ceb8:	1a 97       	mov	r7,sp
8002ceba:	20 2d       	sub	sp,8
8002cebc:	48 e6       	lddpc	r6,8002cef4 <usart_write_line+0x40>
8002cebe:	1e 26       	rsub	r6,pc
8002cec0:	ef 4c ff fc 	st.w	r7[-4],r12
8002cec4:	ef 4b ff f8 	st.w	r7[-8],r11
  while (*string != '\0')
8002cec8:	c0 e8       	rjmp	8002cee4 <usart_write_line+0x30>
    usart_putchar(usart, *string++);
8002ceca:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cece:	11 88       	ld.ub	r8,r8[0x0]
8002ced0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002ced4:	2f f9       	sub	r9,-1
8002ced6:	ef 49 ff f8 	st.w	r7[-8],r9
8002ceda:	10 9b       	mov	r11,r8
8002cedc:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cee0:	f0 16 00 aa 	mcall	r6[680]
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
8002cee4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cee8:	11 88       	ld.ub	r8,r8[0x0]
8002ceea:	58 08       	cp.w	r8,0
8002ceec:	ce f1       	brne	8002ceca <usart_write_line+0x16>
    usart_putchar(usart, *string++);
}
8002ceee:	2f ed       	sub	sp,-8
8002cef0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cef4:	80 02       	ld.sh	r2,r0[0x0]
8002cef6:	cd 42       	brcc	8002ce9e <usart_getchar+0x34>
8002cef8:	45 72       	lddsp	r2,sp[0x15c]
8002cefa:	72 6f       	ld.w	pc,r9[0x18]
8002cefc:	72 21       	ld.w	r1,r9[0x8]
8002cefe:	21 21       	sub	r1,18
8002cf00:	0d 0a       	ld.w	r10,r6++
	...

8002cf04 <usart_get_echo_line>:


int usart_get_echo_line(volatile avr32_usart_t *usart)
{
8002cf04:	eb cd 40 c0 	pushm	r6-r7,lr
8002cf08:	1a 97       	mov	r7,sp
8002cf0a:	20 3d       	sub	sp,12
8002cf0c:	49 e6       	lddpc	r6,8002cf84 <usart_get_echo_line+0x80>
8002cf0e:	1e 26       	rsub	r6,pc
8002cf10:	ef 4c ff f4 	st.w	r7[-12],r12
  int rx_char;
  int retval = USART_SUCCESS;
8002cf14:	30 08       	mov	r8,0
8002cf16:	ef 48 ff fc 	st.w	r7[-4],r8
8002cf1a:	c0 28       	rjmp	8002cf1e <usart_get_echo_line+0x1a>
    if (rx_char == '\r')
    { // Add a LF and consider this as the end of the line.
      usart_putchar(usart, '\n');
      break;
    }
  }
8002cf1c:	d7 03       	nop
  int rx_char;
  int retval = USART_SUCCESS;

  while (1)
  {
    rx_char = usart_getchar(usart);
8002cf1e:	ee fc ff f4 	ld.w	r12,r7[-12]
8002cf22:	f0 16 01 d0 	mcall	r6[1856]
8002cf26:	18 98       	mov	r8,r12
8002cf28:	ef 48 ff f8 	st.w	r7[-8],r8
    if (rx_char == USART_FAILURE)
8002cf2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cf30:	5b f8       	cp.w	r8,-1
8002cf32:	c0 b1       	brne	8002cf48 <usart_get_echo_line+0x44>
    {
      usart_write_line(usart, "Error!!!\r\n");
8002cf34:	fe cb 00 3c 	sub	r11,pc,60
8002cf38:	ee fc ff f4 	ld.w	r12,r7[-12]
8002cf3c:	f0 16 01 64 	mcall	r6[1424]
      retval = USART_FAILURE;
8002cf40:	3f f8       	mov	r8,-1
8002cf42:	ef 48 ff fc 	st.w	r7[-4],r8
      break;
8002cf46:	c1 98       	rjmp	8002cf78 <usart_get_echo_line+0x74>
    }
    if (rx_char == '\x03')
8002cf48:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cf4c:	58 38       	cp.w	r8,3
8002cf4e:	c0 51       	brne	8002cf58 <usart_get_echo_line+0x54>
    {
      retval = USART_FAILURE;
8002cf50:	3f f8       	mov	r8,-1
8002cf52:	ef 48 ff fc 	st.w	r7[-4],r8
      break;
8002cf56:	c1 18       	rjmp	8002cf78 <usart_get_echo_line+0x74>
    }
    usart_putchar(usart, rx_char);
8002cf58:	ee fb ff f8 	ld.w	r11,r7[-8]
8002cf5c:	ee fc ff f4 	ld.w	r12,r7[-12]
8002cf60:	f0 16 00 aa 	mcall	r6[680]
    if (rx_char == '\r')
8002cf64:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cf68:	58 d8       	cp.w	r8,13
8002cf6a:	cd 91       	brne	8002cf1c <usart_get_echo_line+0x18>
    { // Add a LF and consider this as the end of the line.
      usart_putchar(usart, '\n');
8002cf6c:	30 ab       	mov	r11,10
8002cf6e:	ee fc ff f4 	ld.w	r12,r7[-12]
8002cf72:	f0 16 00 aa 	mcall	r6[680]
      break;
8002cf76:	d7 03       	nop
    }
  }

  return retval;
8002cf78:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002cf7c:	10 9c       	mov	r12,r8
8002cf7e:	2f dd       	sub	sp,-12
8002cf80:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cf84:	80 02       	ld.sh	r2,r0[0x0]
8002cf86:	cd 92       	brcc	8002cf38 <usart_get_echo_line+0x34>

8002cf88 <delay_init>:
#endif

//_____ D E C L A R A T I O N S ____________________________________________

void delay_init(unsigned long fcpu_hz)
{
8002cf88:	eb cd 40 c0 	pushm	r6-r7,lr
8002cf8c:	1a 97       	mov	r7,sp
8002cf8e:	20 1d       	sub	sp,4
8002cf90:	48 66       	lddpc	r6,8002cfa8 <delay_init+0x20>
8002cf92:	1e 26       	rsub	r6,pc
8002cf94:	ef 4c ff fc 	st.w	r7[-4],r12
#ifndef FREERTOS_USED
  s_fcpu_hz = fcpu_hz;
8002cf98:	ec f8 04 e0 	ld.w	r8,r6[1248]
8002cf9c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cfa0:	91 09       	st.w	r8[0x0],r9
#endif
}
8002cfa2:	2f fd       	sub	sp,-4
8002cfa4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cfa8:	80 02       	ld.sh	r2,r0[0x0]
8002cfaa:	ce 16       	brmi	8002cf6c <usart_get_echo_line+0x68>

8002cfac <delay_ms>:


void delay_ms(unsigned long delay)
{
8002cfac:	eb cd 40 c0 	pushm	r6-r7,lr
8002cfb0:	1a 97       	mov	r7,sp
8002cfb2:	20 cd       	sub	sp,48
8002cfb4:	4d 36       	lddpc	r6,8002d100 <delay_ms+0x154>
8002cfb6:	1e 26       	rsub	r6,pc
8002cfb8:	ef 4c ff d0 	st.w	r7[-48],r12
#if (defined FREERTOS_USED)
  vTaskDelay( (portTickType)TASK_DELAY_MS(delay) );
#elif (defined NUTOS_USED)
  NutSleep(delay);
#else
  cpu_delay_ms(delay, s_fcpu_hz);
8002cfbc:	ec fc 04 e0 	ld.w	r12,r6[1248]
8002cfc0:	78 0c       	ld.w	r12,r12[0x0]
8002cfc2:	ee fe ff d0 	ld.w	lr,r7[-48]
8002cfc6:	ef 4e ff e4 	st.w	r7[-28],lr
8002cfca:	ef 4c ff e0 	st.w	r7[-32],r12
8002cfce:	ee fc ff e4 	ld.w	r12,r7[-28]
8002cfd2:	ef 4c ff ec 	st.w	r7[-20],r12
8002cfd6:	ee fc ff e0 	ld.w	r12,r7[-32]
8002cfda:	ef 4c ff e8 	st.w	r7[-24],r12
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8002cfde:	ee fa ff ec 	ld.w	r10,r7[-20]
8002cfe2:	30 0b       	mov	r11,0
8002cfe4:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002cfe8:	30 09       	mov	r9,0
8002cfea:	f6 08 02 4c 	mul	r12,r11,r8
8002cfee:	f2 0a 02 4e 	mul	lr,r9,r10
8002cff2:	1c 0c       	add	r12,lr
8002cff4:	f4 08 06 48 	mulu.d	r8,r10,r8
8002cff8:	12 0c       	add	r12,r9
8002cffa:	18 99       	mov	r9,r12
8002cffc:	e0 6a 03 e7 	mov	r10,999
8002d000:	30 0b       	mov	r11,0
8002d002:	f0 0a 00 0a 	add	r10,r8,r10
8002d006:	f2 0b 00 4b 	adc	r11,r9,r11
8002d00a:	e0 68 03 e8 	mov	r8,1000
8002d00e:	30 09       	mov	r9,0
8002d010:	f0 16 01 08 	mcall	r6[1056]
8002d014:	14 98       	mov	r8,r10
8002d016:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8002d018:	ef 48 ff f4 	st.w	r7[-12],r8
8002d01c:	ee c8 00 2c 	sub	r8,r7,44
8002d020:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8002d024:	e1 b8 00 42 	mfsr	r8,0x108
8002d028:	10 99       	mov	r9,r8
8002d02a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002d02e:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8002d030:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002d034:	70 09       	ld.w	r9,r8[0x0]
8002d036:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d03a:	10 09       	add	r9,r8
8002d03c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002d040:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8002d042:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002d046:	30 08       	mov	r8,0
8002d048:	f3 68 00 08 	st.b	r9[8],r8
8002d04c:	ee c8 00 2c 	sub	r8,r7,44
8002d050:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8002d054:	e1 b8 00 42 	mfsr	r8,0x108
8002d058:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8002d05c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d060:	f1 39 00 08 	ld.ub	r9,r8[8]
8002d064:	30 28       	mov	r8,2
8002d066:	f0 09 18 00 	cp.b	r9,r8
8002d06a:	c0 31       	brne	8002d070 <delay_ms+0xc4>
    return false;
8002d06c:	30 08       	mov	r8,0
8002d06e:	c4 38       	rjmp	8002d0f4 <delay_ms+0x148>

  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8002d070:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d074:	f1 39 00 08 	ld.ub	r9,r8[8]
8002d078:	30 18       	mov	r8,1
8002d07a:	f0 09 18 00 	cp.b	r9,r8
8002d07e:	c0 31       	brne	8002d084 <delay_ms+0xd8>
    return true;
8002d080:	30 18       	mov	r8,1
8002d082:	c3 98       	rjmp	8002d0f4 <delay_ms+0x148>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8002d084:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d088:	70 09       	ld.w	r9,r8[0x0]
8002d08a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d08e:	70 18       	ld.w	r8,r8[0x4]
8002d090:	10 39       	cp.w	r9,r8
8002d092:	e0 88 00 1a 	brls	8002d0c6 <delay_ms+0x11a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8002d096:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d09a:	70 08       	ld.w	r8,r8[0x0]
8002d09c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d0a0:	10 39       	cp.w	r9,r8
8002d0a2:	c1 02       	brcc	8002d0c2 <delay_ms+0x116>
8002d0a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d0a8:	70 18       	ld.w	r8,r8[0x4]
8002d0aa:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d0ae:	10 39       	cp.w	r9,r8
8002d0b0:	e0 88 00 09 	brls	8002d0c2 <delay_ms+0x116>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8002d0b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d0b8:	30 18       	mov	r8,1
8002d0ba:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8002d0be:	30 18       	mov	r8,1
8002d0c0:	c1 a8       	rjmp	8002d0f4 <delay_ms+0x148>
    }
    return false;
8002d0c2:	30 08       	mov	r8,0
8002d0c4:	c1 88       	rjmp	8002d0f4 <delay_ms+0x148>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8002d0c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d0ca:	70 08       	ld.w	r8,r8[0x0]
8002d0cc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d0d0:	10 39       	cp.w	r9,r8
8002d0d2:	c0 93       	brcs	8002d0e4 <delay_ms+0x138>
8002d0d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d0d8:	70 18       	ld.w	r8,r8[0x4]
8002d0da:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d0de:	10 39       	cp.w	r9,r8
8002d0e0:	e0 88 00 09 	brls	8002d0f2 <delay_ms+0x146>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8002d0e4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d0e8:	30 18       	mov	r8,1
8002d0ea:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8002d0ee:	30 18       	mov	r8,1
8002d0f0:	c0 28       	rjmp	8002d0f4 <delay_ms+0x148>
    }
    return false;
8002d0f2:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8002d0f4:	58 08       	cp.w	r8,0
8002d0f6:	ca b0       	breq	8002d04c <delay_ms+0xa0>
#endif
}
8002d0f8:	2f 4d       	sub	sp,-48
8002d0fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d0fe:	00 00       	add	r0,r0
8002d100:	80 02       	ld.sh	r2,r0[0x0]
8002d102:	ce 3a       	rjmp	8002cec8 <usart_write_line+0x14>

8002d104 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
8002d104:	48 dd       	lddpc	sp,8002d138 <udata_clear_loop_end+0x4>

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
8002d106:	fe c0 a1 06 	sub	r0,pc,-24314
  mtsr    AVR32_EVBA, r0
8002d10a:	e3 b0 00 01 	mtsr	0x4,r0

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
8002d10e:	d5 53       	csrf	0x15
  lda.w   r1, _edata
8002d110:	48 b0       	lddpc	r0,8002d13c <udata_clear_loop_end+0x8>
  cp      r0, r1
8002d112:	48 c1       	lddpc	r1,8002d140 <udata_clear_loop_end+0xc>
  brhs    idata_load_loop_end
8002d114:	02 30       	cp.w	r0,r1
  lda.w   r2, _data_lma
8002d116:	c0 62       	brcc	8002d122 <idata_load_loop_end>
idata_load_loop:
  ld.d    r4, r2++
8002d118:	48 b2       	lddpc	r2,8002d144 <udata_clear_loop_end+0x10>

8002d11a <idata_load_loop>:
  st.d    r0++, r4
8002d11a:	a5 05       	ld.d	r4,r2++
  cp      r0, r1
8002d11c:	a1 24       	st.d	r0++,r4
  brlo    idata_load_loop
8002d11e:	02 30       	cp.w	r0,r1
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
8002d120:	cf d3       	brcs	8002d11a <idata_load_loop>

8002d122 <idata_load_loop_end>:
  lda.w   r1, _end
8002d122:	48 a0       	lddpc	r0,8002d148 <udata_clear_loop_end+0x14>
  cp      r0, r1
8002d124:	48 a1       	lddpc	r1,8002d14c <udata_clear_loop_end+0x18>
  brhs    udata_clear_loop_end
8002d126:	02 30       	cp.w	r0,r1
  mov     r2, 0
8002d128:	c0 62       	brcc	8002d134 <udata_clear_loop_end>
  mov     r3, 0
8002d12a:	30 02       	mov	r2,0
udata_clear_loop:
  st.d    r0++, r2
8002d12c:	30 03       	mov	r3,0

8002d12e <udata_clear_loop>:
  cp      r0, r1
8002d12e:	a1 22       	st.d	r0++,r2
  brlo    udata_clear_loop
8002d130:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8002d132:	cf e3       	brcs	8002d12e <udata_clear_loop>

8002d134 <udata_clear_loop_end>:
8002d134:	fe cf e6 e8 	sub	pc,pc,-6424
8002d138:	00 01       	add	r1,r0
8002d13a:	00 00       	add	r0,r0
8002d13c:	00 00       	add	r0,r0
8002d13e:	00 04       	add	r4,r0
8002d140:	00 00       	add	r0,r0
8002d142:	20 e8       	sub	r8,14
8002d144:	80 03       	ld.sh	r3,r0[0x0]
8002d146:	38 50       	mov	r0,-123
8002d148:	00 00       	add	r0,r0
8002d14a:	20 e8       	sub	r8,14
8002d14c:	00 00       	add	r0,r0
8002d14e:	97 18       	st.w	r11[0x4],r8

8002d150 <board_init>:
8002d150:	eb cd 40 c0 	pushm	r6-r7,lr
#if defined (CONF_BOARD_AT45DBX)
#define AT45DBX_MEM_CNT             1
#endif

void board_init(void)
{
8002d154:	1a 97       	mov	r7,sp
8002d156:	48 76       	lddpc	r6,8002d170 <board_init+0x20>
8002d158:	1e 26       	rsub	r6,pc
		sizeof(AT45DBX_SPI_GPIO_MAP) / sizeof(AT45DBX_SPI_GPIO_MAP[0]));
#endif

	// Configure the pins connected to LEDs as output and set their default
	// initial state to high (LEDs off).        
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
8002d15a:	30 1b       	mov	r11,1
8002d15c:	32 0c       	mov	r12,32
8002d15e:	f0 16 00 3d 	mcall	r6[244]
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
8002d162:	30 1b       	mov	r11,1
8002d164:	32 1c       	mov	r12,33
8002d166:	f0 16 00 3d 	mcall	r6[244]
  };

  // TWI gpio pins cofiguration
  gpio_enable_module(TWI_GPIO_MAP, sizeof(TWI_GPIO_MAP) / sizeof(TWI_GPIO_MAP[0]));
#endif
}
8002d16a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d16e:	00 00       	add	r0,r0
8002d170:	80 02       	ld.sh	r2,r0[0x0]
8002d172:	cf dc       	rcall	8002d36c <osc_priv_disable_rc8m+0x54>

8002d174 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8002d174:	eb cd 40 80 	pushm	r7,lr
8002d178:	1a 97       	mov	r7,sp
8002d17a:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8002d17c:	e1 b8 00 00 	mfsr	r8,0x0
8002d180:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8002d184:	d3 03       	ssrf	0x10

	return flags;
8002d186:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002d18a:	10 9c       	mov	r12,r8
8002d18c:	2f fd       	sub	sp,-4
8002d18e:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d192 <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8002d192:	eb cd 40 80 	pushm	r7,lr
8002d196:	1a 97       	mov	r7,sp
8002d198:	20 1d       	sub	sp,4
8002d19a:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8002d19e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d1a2:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8002d1a6:	2f fd       	sub	sp,-4
8002d1a8:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d1ac <osc_priv_enable_osc0>:
 */
#include <osc.h>

#ifdef BOARD_OSC0_HZ
void osc_priv_enable_osc0(void)
{
8002d1ac:	eb cd 40 c0 	pushm	r6-r7,lr
8002d1b0:	1a 97       	mov	r7,sp
8002d1b2:	20 1d       	sub	sp,4
8002d1b4:	48 c6       	lddpc	r6,8002d1e4 <osc_priv_enable_osc0+0x38>
8002d1b6:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002d1b8:	cd ef       	rcall	8002d174 <cpu_irq_save>
8002d1ba:	18 98       	mov	r8,r12
8002d1bc:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL;
8002d1c0:	fe 78 08 00 	mov	r8,-63488
8002d1c4:	32 49       	mov	r9,36
8002d1c6:	ea 19 aa 00 	orh	r9,0xaa00
8002d1ca:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl[0] =
8002d1cc:	fe 78 08 00 	mov	r8,-63488
8002d1d0:	e0 79 0c 07 	mov	r9,68615
8002d1d4:	91 99       	st.w	r8[0x24],r9
			(OSC0_STARTUP_VALUE << AVR32_SCIF_OSCCTRL_STARTUP)
			| (OSC0_GAIN_VALUE << AVR32_SCIF_OSCCTRL_GAIN)
			| (OSC0_MODE_VALUE << AVR32_SCIF_OSCCTRL_MODE)
			| (1U << AVR32_SCIF_OSCCTRL_OSCEN);
	cpu_irq_restore(flags);
8002d1d6:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d1da:	cd cf       	rcall	8002d192 <cpu_irq_restore>
}
8002d1dc:	2f fd       	sub	sp,-4
8002d1de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d1e2:	00 00       	add	r0,r0
8002d1e4:	80 02       	ld.sh	r2,r0[0x0]
8002d1e6:	d0 3a       	popm	r0-r7

8002d1e8 <osc_priv_disable_osc0>:

void osc_priv_disable_osc0(void)
{
8002d1e8:	eb cd 40 c0 	pushm	r6-r7,lr
8002d1ec:	1a 97       	mov	r7,sp
8002d1ee:	20 1d       	sub	sp,4
8002d1f0:	48 b6       	lddpc	r6,8002d21c <osc_priv_disable_osc0+0x34>
8002d1f2:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002d1f4:	cc 0f       	rcall	8002d174 <cpu_irq_save>
8002d1f6:	18 98       	mov	r8,r12
8002d1f8:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL;
8002d1fc:	fe 78 08 00 	mov	r8,-63488
8002d200:	32 49       	mov	r9,36
8002d202:	ea 19 aa 00 	orh	r9,0xaa00
8002d206:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl[0] = 0;
8002d208:	fe 78 08 00 	mov	r8,-63488
8002d20c:	30 09       	mov	r9,0
8002d20e:	91 99       	st.w	r8[0x24],r9
	cpu_irq_restore(flags);
8002d210:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d214:	cb ff       	rcall	8002d192 <cpu_irq_restore>
}
8002d216:	2f fd       	sub	sp,-4
8002d218:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d21c:	80 02       	ld.sh	r2,r0[0x0]
8002d21e:	d0 76       	*unknown*

8002d220 <osc_priv_enable_osc32>:
}
#endif /* BOARD_OSC0_HZ */

#ifdef BOARD_OSC32_HZ
void osc_priv_enable_osc32(void)
{
8002d220:	eb cd 40 c0 	pushm	r6-r7,lr
8002d224:	1a 97       	mov	r7,sp
8002d226:	20 1d       	sub	sp,4
8002d228:	48 c6       	lddpc	r6,8002d258 <osc_priv_enable_osc32+0x38>
8002d22a:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002d22c:	ca 4f       	rcall	8002d174 <cpu_irq_save>
8002d22e:	18 98       	mov	r8,r12
8002d230:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL32;
8002d234:	fe 78 08 00 	mov	r8,-63488
8002d238:	34 c9       	mov	r9,76
8002d23a:	ea 19 aa 00 	orh	r9,0xaa00
8002d23e:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl32 =
8002d240:	fe 78 08 00 	mov	r8,-63488
8002d244:	e2 69 01 01 	mov	r9,131329
8002d248:	f1 49 00 4c 	st.w	r8[76],r9
			(OSC32_STARTUP_VALUE << AVR32_SCIF_OSCCTRL32_STARTUP)
			| (OSC32_MODE_VALUE << AVR32_SCIF_OSCCTRL32_MODE)
			| (1U << AVR32_SCIF_OSCCTRL32_OSC32EN);
	cpu_irq_restore(flags);
8002d24c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d250:	ca 1f       	rcall	8002d192 <cpu_irq_restore>
}
8002d252:	2f fd       	sub	sp,-4
8002d254:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d258:	80 02       	ld.sh	r2,r0[0x0]
8002d25a:	d0 ae       	*unknown*

8002d25c <osc_priv_disable_osc32>:

void osc_priv_disable_osc32(void)
{
8002d25c:	eb cd 40 c0 	pushm	r6-r7,lr
8002d260:	1a 97       	mov	r7,sp
8002d262:	20 1d       	sub	sp,4
8002d264:	48 c6       	lddpc	r6,8002d294 <osc_priv_disable_osc32+0x38>
8002d266:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002d268:	c8 6f       	rcall	8002d174 <cpu_irq_save>
8002d26a:	18 98       	mov	r8,r12
8002d26c:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL32;
8002d270:	fe 78 08 00 	mov	r8,-63488
8002d274:	34 c9       	mov	r9,76
8002d276:	ea 19 aa 00 	orh	r9,0xaa00
8002d27a:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl32 = 0;
8002d27c:	fe 78 08 00 	mov	r8,-63488
8002d280:	30 09       	mov	r9,0
8002d282:	f1 49 00 4c 	st.w	r8[76],r9
	cpu_irq_restore(flags);
8002d286:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d28a:	c8 4f       	rcall	8002d192 <cpu_irq_restore>
}
8002d28c:	2f fd       	sub	sp,-4
8002d28e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d292:	00 00       	add	r0,r0
8002d294:	80 02       	ld.sh	r2,r0[0x0]
8002d296:	d0 ea       	popm	r4-r10

8002d298 <osc_priv_enable_rc8m>:
#endif /* BOARD_OSC0_HZ */

void osc_priv_enable_rc8m(void)
{
8002d298:	eb cd 40 c0 	pushm	r6-r7,lr
8002d29c:	1a 97       	mov	r7,sp
8002d29e:	20 3d       	sub	sp,12
8002d2a0:	49 d6       	lddpc	r6,8002d314 <osc_priv_enable_rc8m+0x7c>
8002d2a2:	1e 26       	rsub	r6,pc
	irqflags_t flags;
	uint32_t   rccr8;
    uint32_t* calibration_bits = (uint32_t*)0x80800200;
8002d2a4:	e0 68 02 00 	mov	r8,512
8002d2a8:	ea 18 80 80 	orh	r8,0x8080
8002d2ac:	ef 48 ff fc 	st.w	r7[-4],r8
	/* Wait for the CALIB field to be updated from fuses after reset */
	while (!(AVR32_SCIF.rccr8 & AVR32_SCIF_RCCR8_FCD_MASK)) {
8002d2b0:	fe 78 08 00 	mov	r8,-63488
8002d2b4:	71 28       	ld.w	r8,r8[0x48]
8002d2b6:	e6 18 00 01 	andh	r8,0x1,COH
8002d2ba:	cf b0       	breq	8002d2b0 <osc_priv_enable_rc8m+0x18>
		/* Do nothing */
	}

	/* Enable the oscillator without touching the CALIB and FCD fields */
	flags = cpu_irq_save();
8002d2bc:	c5 cf       	rcall	8002d174 <cpu_irq_save>
8002d2be:	18 98       	mov	r8,r12
8002d2c0:	ef 48 ff f4 	st.w	r7[-12],r8
	rccr8 = AVR32_SCIF.rccr8;
8002d2c4:	fe 78 08 00 	mov	r8,-63488
8002d2c8:	71 28       	ld.w	r8,r8[0x48]
8002d2ca:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 &= AVR32_SCIF_RCCR8_FCD_MASK | ((*calibration_bits)&AVR32_SCIF_RCCR8_CALIB_MASK);
8002d2ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d2d2:	70 08       	ld.w	r8,r8[0x0]
8002d2d4:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8002d2d8:	b1 a8       	sbr	r8,0x10
8002d2da:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d2de:	f3 e8 00 08 	and	r8,r9,r8
8002d2e2:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 |= 1U << AVR32_SCIF_RCOSC8_EN;
8002d2e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d2ea:	b9 a8       	sbr	r8,0x18
8002d2ec:	ef 48 ff f8 	st.w	r7[-8],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RCCR8;
8002d2f0:	fe 78 08 00 	mov	r8,-63488
8002d2f4:	34 89       	mov	r9,72
8002d2f6:	ea 19 aa 00 	orh	r9,0xaa00
8002d2fa:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rccr8 = rccr8;
8002d2fc:	fe 78 08 00 	mov	r8,-63488
8002d300:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d304:	f1 49 00 48 	st.w	r8[72],r9
	cpu_irq_restore(flags);
8002d308:	ee fc ff f4 	ld.w	r12,r7[-12]
8002d30c:	c4 3f       	rcall	8002d192 <cpu_irq_restore>
}
8002d30e:	2f dd       	sub	sp,-12
8002d310:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d314:	80 02       	ld.sh	r2,r0[0x0]
8002d316:	d1 26       	*unknown*

8002d318 <osc_priv_disable_rc8m>:

void osc_priv_disable_rc8m(void)
{
8002d318:	eb cd 40 c0 	pushm	r6-r7,lr
8002d31c:	1a 97       	mov	r7,sp
8002d31e:	20 2d       	sub	sp,8
8002d320:	49 36       	lddpc	r6,8002d36c <osc_priv_disable_rc8m+0x54>
8002d322:	1e 26       	rsub	r6,pc
	irqflags_t flags;
	uint32_t   rccr8;

	/* Disable the oscillator without touching the CALIB and FCD fields */
	flags = cpu_irq_save();
8002d324:	c2 8f       	rcall	8002d174 <cpu_irq_save>
8002d326:	18 98       	mov	r8,r12
8002d328:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 = AVR32_SCIF.rccr8;
8002d32c:	fe 78 08 00 	mov	r8,-63488
8002d330:	71 28       	ld.w	r8,r8[0x48]
8002d332:	ef 48 ff fc 	st.w	r7[-4],r8
	rccr8 &= AVR32_SCIF_RCCR8_FCD_MASK | AVR32_SCIF_RCCR8_CALIB_MASK;
8002d336:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d33a:	e4 18 00 01 	andh	r8,0x1
8002d33e:	e0 18 00 ff 	andl	r8,0xff
8002d342:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RCCR8;
8002d346:	fe 78 08 00 	mov	r8,-63488
8002d34a:	34 89       	mov	r9,72
8002d34c:	ea 19 aa 00 	orh	r9,0xaa00
8002d350:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rccr8 = rccr8;
8002d352:	fe 78 08 00 	mov	r8,-63488
8002d356:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d35a:	f1 49 00 48 	st.w	r8[72],r9
	cpu_irq_restore(flags);
8002d35e:	ee fc ff f8 	ld.w	r12,r7[-8]
8002d362:	c1 8f       	rcall	8002d192 <cpu_irq_restore>
}
8002d364:	2f ed       	sub	sp,-8
8002d366:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d36a:	00 00       	add	r0,r0
8002d36c:	80 02       	ld.sh	r2,r0[0x0]
8002d36e:	d1 a6       	*unknown*

8002d370 <osc_priv_enable_rc120m>:

void osc_priv_enable_rc120m(void)
{
8002d370:	eb cd 40 c0 	pushm	r6-r7,lr
8002d374:	1a 97       	mov	r7,sp
8002d376:	20 1d       	sub	sp,4
8002d378:	48 c6       	lddpc	r6,8002d3a8 <osc_priv_enable_rc120m+0x38>
8002d37a:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002d37c:	cf ce       	rcall	8002d174 <cpu_irq_save>
8002d37e:	18 98       	mov	r8,r12
8002d380:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
8002d384:	fe 78 08 00 	mov	r8,-63488
8002d388:	35 89       	mov	r9,88
8002d38a:	ea 19 aa 00 	orh	r9,0xaa00
8002d38e:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc120mcr = 1U << AVR32_SCIF_RC120MCR_EN;
8002d390:	fe 78 08 00 	mov	r8,-63488
8002d394:	30 19       	mov	r9,1
8002d396:	f1 49 00 58 	st.w	r8[88],r9
	cpu_irq_restore(flags);
8002d39a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d39e:	cf ae       	rcall	8002d192 <cpu_irq_restore>
}
8002d3a0:	2f fd       	sub	sp,-4
8002d3a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d3a6:	00 00       	add	r0,r0
8002d3a8:	80 02       	ld.sh	r2,r0[0x0]
8002d3aa:	d1 fe       	*unknown*

8002d3ac <osc_priv_disable_rc120m>:

void osc_priv_disable_rc120m(void)
{
8002d3ac:	eb cd 40 c0 	pushm	r6-r7,lr
8002d3b0:	1a 97       	mov	r7,sp
8002d3b2:	20 1d       	sub	sp,4
8002d3b4:	48 c6       	lddpc	r6,8002d3e4 <osc_priv_disable_rc120m+0x38>
8002d3b6:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002d3b8:	cd ee       	rcall	8002d174 <cpu_irq_save>
8002d3ba:	18 98       	mov	r8,r12
8002d3bc:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
8002d3c0:	fe 78 08 00 	mov	r8,-63488
8002d3c4:	35 89       	mov	r9,88
8002d3c6:	ea 19 aa 00 	orh	r9,0xaa00
8002d3ca:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc120mcr = 0;
8002d3cc:	fe 78 08 00 	mov	r8,-63488
8002d3d0:	30 09       	mov	r9,0
8002d3d2:	f1 49 00 58 	st.w	r8[88],r9
	cpu_irq_restore(flags);
8002d3d6:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d3da:	cd ce       	rcall	8002d192 <cpu_irq_restore>
}
8002d3dc:	2f fd       	sub	sp,-4
8002d3de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d3e2:	00 00       	add	r0,r0
8002d3e4:	80 02       	ld.sh	r2,r0[0x0]
8002d3e6:	d2 3a       	popm	r0-r7,r12

8002d3e8 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8002d3e8:	eb cd 40 80 	pushm	r7,lr
8002d3ec:	1a 97       	mov	r7,sp
8002d3ee:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8002d3f0:	e1 b8 00 00 	mfsr	r8,0x0
8002d3f4:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8002d3f8:	d3 03       	ssrf	0x10

	return flags;
8002d3fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002d3fe:	10 9c       	mov	r12,r8
8002d400:	2f fd       	sub	sp,-4
8002d402:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d406 <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8002d406:	eb cd 40 80 	pushm	r7,lr
8002d40a:	1a 97       	mov	r7,sp
8002d40c:	20 1d       	sub	sp,4
8002d40e:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8002d412:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d416:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8002d41a:	2f fd       	sub	sp,-4
8002d41c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d420 <pll_config_write>:
#include <avr32/io.h>
#include <compiler.h>
#include <pll.h>

void pll_config_write(const struct pll_config *cfg, unsigned int pll_id)
{
8002d420:	eb cd 40 c0 	pushm	r6-r7,lr
8002d424:	1a 97       	mov	r7,sp
8002d426:	20 3d       	sub	sp,12
8002d428:	49 26       	lddpc	r6,8002d470 <pll_config_write+0x50>
8002d42a:	1e 26       	rsub	r6,pc
8002d42c:	ef 4c ff f8 	st.w	r7[-8],r12
8002d430:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
8002d434:	cd af       	rcall	8002d3e8 <cpu_irq_save>
8002d436:	18 98       	mov	r8,r12
8002d438:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
8002d43c:	fe 78 08 00 	mov	r8,-63488
8002d440:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d444:	2f 99       	sub	r9,-7
8002d446:	a3 69       	lsl	r9,0x2
8002d448:	ea 19 aa 00 	orh	r9,0xaa00
8002d44c:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = cfg->ctrl;
8002d44e:	fe 78 08 00 	mov	r8,-63488
8002d452:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d456:	ee fa ff f8 	ld.w	r10,r7[-8]
8002d45a:	74 0a       	ld.w	r10,r10[0x0]
8002d45c:	2f 99       	sub	r9,-7
8002d45e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
8002d462:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d466:	cd 0f       	rcall	8002d406 <cpu_irq_restore>
}
8002d468:	2f dd       	sub	sp,-12
8002d46a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d46e:	00 00       	add	r0,r0
8002d470:	80 02       	ld.sh	r2,r0[0x0]
8002d472:	d2 ae       	*unknown*

8002d474 <pll_enable>:

void pll_enable(const struct pll_config *cfg, unsigned int pll_id)
{
8002d474:	eb cd 40 c0 	pushm	r6-r7,lr
8002d478:	1a 97       	mov	r7,sp
8002d47a:	20 3d       	sub	sp,12
8002d47c:	49 26       	lddpc	r6,8002d4c4 <pll_enable+0x50>
8002d47e:	1e 26       	rsub	r6,pc
8002d480:	ef 4c ff f8 	st.w	r7[-8],r12
8002d484:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
8002d488:	cb 0f       	rcall	8002d3e8 <cpu_irq_save>
8002d48a:	18 98       	mov	r8,r12
8002d48c:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
8002d490:	fe 78 08 00 	mov	r8,-63488
8002d494:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d498:	2f 99       	sub	r9,-7
8002d49a:	a3 69       	lsl	r9,0x2
8002d49c:	ea 19 aa 00 	orh	r9,0xaa00
8002d4a0:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = cfg->ctrl | (1U << AVR32_SCIF_PLLEN);
8002d4a2:	fe 78 08 00 	mov	r8,-63488
8002d4a6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d4aa:	ee fa ff f8 	ld.w	r10,r7[-8]
8002d4ae:	74 0a       	ld.w	r10,r10[0x0]
8002d4b0:	a1 aa       	sbr	r10,0x0
8002d4b2:	2f 99       	sub	r9,-7
8002d4b4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
8002d4b8:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d4bc:	ca 5f       	rcall	8002d406 <cpu_irq_restore>
}
8002d4be:	2f dd       	sub	sp,-12
8002d4c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d4c4:	80 02       	ld.sh	r2,r0[0x0]
8002d4c6:	d3 02       	popm	r11-r12

8002d4c8 <pll_disable>:

void pll_disable(unsigned int pll_id)
{
8002d4c8:	eb cd 40 c0 	pushm	r6-r7,lr
8002d4cc:	1a 97       	mov	r7,sp
8002d4ce:	20 2d       	sub	sp,8
8002d4d0:	49 06       	lddpc	r6,8002d510 <pll_disable+0x48>
8002d4d2:	1e 26       	rsub	r6,pc
8002d4d4:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
8002d4d8:	c8 8f       	rcall	8002d3e8 <cpu_irq_save>
8002d4da:	18 98       	mov	r8,r12
8002d4dc:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
8002d4e0:	fe 78 08 00 	mov	r8,-63488
8002d4e4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d4e8:	2f 99       	sub	r9,-7
8002d4ea:	a3 69       	lsl	r9,0x2
8002d4ec:	ea 19 aa 00 	orh	r9,0xaa00
8002d4f0:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = 0;
8002d4f2:	fe 78 08 00 	mov	r8,-63488
8002d4f6:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d4fa:	2f 99       	sub	r9,-7
8002d4fc:	30 0a       	mov	r10,0
8002d4fe:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
8002d502:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d506:	c8 0f       	rcall	8002d406 <cpu_irq_restore>
}
8002d508:	2f ed       	sub	sp,-8
8002d50a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d50e:	00 00       	add	r0,r0
8002d510:	80 02       	ld.sh	r2,r0[0x0]
8002d512:	d3 56       	*unknown*

8002d514 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8002d514:	eb cd 40 80 	pushm	r7,lr
8002d518:	1a 97       	mov	r7,sp
8002d51a:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8002d51c:	e1 b8 00 00 	mfsr	r8,0x0
8002d520:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8002d524:	d3 03       	ssrf	0x10

	return flags;
8002d526:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002d52a:	10 9c       	mov	r12,r8
8002d52c:	2f fd       	sub	sp,-4
8002d52e:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d532 <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8002d532:	eb cd 40 80 	pushm	r7,lr
8002d536:	1a 97       	mov	r7,sp
8002d538:	20 1d       	sub	sp,4
8002d53a:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8002d53e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d542:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8002d546:	2f fd       	sub	sp,-4
8002d548:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d54c <osc_enable>:
extern void osc_priv_enable_rc120m(void);
extern void osc_priv_disable_rc120m(void);
extern bool osc_priv_rc120m_is_ready(void);

static inline void osc_enable(uint8_t id)
{
8002d54c:	eb cd 40 c0 	pushm	r6-r7,lr
8002d550:	1a 97       	mov	r7,sp
8002d552:	20 1d       	sub	sp,4
8002d554:	49 16       	lddpc	r6,8002d598 <osc_enable+0x4c>
8002d556:	1e 26       	rsub	r6,pc
8002d558:	18 98       	mov	r8,r12
8002d55a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002d55e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002d562:	58 28       	cp.w	r8,2
8002d564:	c1 10       	breq	8002d586 <osc_enable+0x3a>
8002d566:	e0 89 00 05 	brgt	8002d570 <osc_enable+0x24>
8002d56a:	58 08       	cp.w	r8,0
8002d56c:	c0 70       	breq	8002d57a <osc_enable+0x2e>
8002d56e:	c1 18       	rjmp	8002d590 <osc_enable+0x44>
8002d570:	58 38       	cp.w	r8,3
8002d572:	c0 70       	breq	8002d580 <osc_enable+0x34>
8002d574:	58 48       	cp.w	r8,4
8002d576:	c0 b0       	breq	8002d58c <osc_enable+0x40>
8002d578:	c0 c8       	rjmp	8002d590 <osc_enable+0x44>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
8002d57a:	f0 16 01 eb 	mcall	r6[1964]
		break;
8002d57e:	c0 98       	rjmp	8002d590 <osc_enable+0x44>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
8002d580:	f0 16 01 e2 	mcall	r6[1928]
		break;
8002d584:	c0 68       	rjmp	8002d590 <osc_enable+0x44>
#endif

	case OSC_ID_RC8M:
		osc_priv_enable_rc8m();
8002d586:	f0 16 01 75 	mcall	r6[1492]
		break;
8002d58a:	c0 38       	rjmp	8002d590 <osc_enable+0x44>

	case OSC_ID_RC120M:
		osc_priv_enable_rc120m();
8002d58c:	f0 16 01 a1 	mcall	r6[1668]

	default:
		/* unhandled_case(id); */
		break;
	}
}
8002d590:	2f fd       	sub	sp,-4
8002d592:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d596:	00 00       	add	r0,r0
8002d598:	80 02       	ld.sh	r2,r0[0x0]
8002d59a:	d3 da       	popm	r0-r3,r8-r12

8002d59c <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint8_t id)
{
8002d59c:	eb cd 40 80 	pushm	r7,lr
8002d5a0:	1a 97       	mov	r7,sp
8002d5a2:	20 1d       	sub	sp,4
8002d5a4:	18 98       	mov	r8,r12
8002d5a6:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002d5aa:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002d5ae:	58 38       	cp.w	r8,3
8002d5b0:	c1 50       	breq	8002d5da <osc_is_ready+0x3e>
8002d5b2:	e0 89 00 07 	brgt	8002d5c0 <osc_is_ready+0x24>
8002d5b6:	58 08       	cp.w	r8,0
8002d5b8:	c0 90       	breq	8002d5ca <osc_is_ready+0x2e>
8002d5ba:	58 28       	cp.w	r8,2
8002d5bc:	c1 70       	breq	8002d5ea <osc_is_ready+0x4e>
8002d5be:	c2 88       	rjmp	8002d60e <osc_is_ready+0x72>
8002d5c0:	58 48       	cp.w	r8,4
8002d5c2:	c1 c0       	breq	8002d5fa <osc_is_ready+0x5e>
8002d5c4:	58 58       	cp.w	r8,5
8002d5c6:	c2 20       	breq	8002d60a <osc_is_ready+0x6e>
8002d5c8:	c2 38       	rjmp	8002d60e <osc_is_ready+0x72>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC0RDY));
8002d5ca:	fe 78 08 00 	mov	r8,-63488
8002d5ce:	70 58       	ld.w	r8,r8[0x14]
8002d5d0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002d5d4:	5f 18       	srne	r8
8002d5d6:	5c 58       	castu.b	r8
8002d5d8:	c1 c8       	rjmp	8002d610 <osc_is_ready+0x74>
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC1RDY));
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC32RDY));
8002d5da:	fe 78 08 00 	mov	r8,-63488
8002d5de:	70 58       	ld.w	r8,r8[0x14]
8002d5e0:	e2 18 00 04 	andl	r8,0x4,COH
8002d5e4:	5f 18       	srne	r8
8002d5e6:	5c 58       	castu.b	r8
8002d5e8:	c1 48       	rjmp	8002d610 <osc_is_ready+0x74>
#endif

	case OSC_ID_RC8M:
		return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_RCOSC8MRDY));
8002d5ea:	fe 78 08 00 	mov	r8,-63488
8002d5ee:	70 58       	ld.w	r8,r8[0x14]
8002d5f0:	e2 18 00 08 	andl	r8,0x8,COH
8002d5f4:	5f 18       	srne	r8
8002d5f6:	5c 58       	castu.b	r8
8002d5f8:	c0 c8       	rjmp	8002d610 <osc_is_ready+0x74>

	case OSC_ID_RC120M:
		return !!(AVR32_SCIF.rc120mcr & (1 << AVR32_SCIF_RC120MCR_EN));
8002d5fa:	fe 78 08 00 	mov	r8,-63488
8002d5fe:	71 68       	ld.w	r8,r8[0x58]
8002d600:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002d604:	5f 18       	srne	r8
8002d606:	5c 58       	castu.b	r8
8002d608:	c0 48       	rjmp	8002d610 <osc_is_ready+0x74>

	case OSC_ID_RCSYS:
		/* RCSYS is always ready */
		return true;
8002d60a:	30 18       	mov	r8,1
8002d60c:	c0 28       	rjmp	8002d610 <osc_is_ready+0x74>

	default:
		/* unhandled_case(id); */
		return false;
8002d60e:	30 08       	mov	r8,0
	}
}
8002d610:	10 9c       	mov	r12,r8
8002d612:	2f fd       	sub	sp,-4
8002d614:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d618 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
8002d618:	eb cd 40 80 	pushm	r7,lr
8002d61c:	1a 97       	mov	r7,sp
8002d61e:	20 1d       	sub	sp,4
8002d620:	18 98       	mov	r8,r12
8002d622:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002d626:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002d62a:	58 38       	cp.w	r8,3
8002d62c:	c1 20       	breq	8002d650 <osc_get_rate+0x38>
8002d62e:	e0 89 00 07 	brgt	8002d63c <osc_get_rate+0x24>
8002d632:	58 08       	cp.w	r8,0
8002d634:	c0 90       	breq	8002d646 <osc_get_rate+0x2e>
8002d636:	58 28       	cp.w	r8,2
8002d638:	c0 f0       	breq	8002d656 <osc_get_rate+0x3e>
8002d63a:	c1 b8       	rjmp	8002d670 <osc_get_rate+0x58>
8002d63c:	58 48       	cp.w	r8,4
8002d63e:	c1 10       	breq	8002d660 <osc_get_rate+0x48>
8002d640:	58 58       	cp.w	r8,5
8002d642:	c1 40       	breq	8002d66a <osc_get_rate+0x52>
8002d644:	c1 68       	rjmp	8002d670 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8002d646:	e0 68 24 00 	mov	r8,9216
8002d64a:	ea 18 00 f4 	orh	r8,0xf4
8002d64e:	c1 28       	rjmp	8002d672 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8002d650:	e0 68 80 00 	mov	r8,32768
8002d654:	c0 f8       	rjmp	8002d672 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8002d656:	e0 68 12 00 	mov	r8,4608
8002d65a:	ea 18 00 7a 	orh	r8,0x7a
8002d65e:	c0 a8       	rjmp	8002d672 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8002d660:	e0 68 0e 00 	mov	r8,3584
8002d664:	ea 18 07 27 	orh	r8,0x727
8002d668:	c0 58       	rjmp	8002d672 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8002d66a:	e0 78 c1 38 	mov	r8,115000
8002d66e:	c0 28       	rjmp	8002d672 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
8002d670:	30 08       	mov	r8,0
	}
}
8002d672:	10 9c       	mov	r12,r8
8002d674:	2f fd       	sub	sp,-4
8002d676:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d67a <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
8002d67a:	eb cd 40 c0 	pushm	r6-r7,lr
8002d67e:	1a 97       	mov	r7,sp
8002d680:	20 1d       	sub	sp,4
8002d682:	48 96       	lddpc	r6,8002d6a4 <osc_wait_ready+0x2a>
8002d684:	1e 26       	rsub	r6,pc
8002d686:	18 98       	mov	r8,r12
8002d688:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
8002d68c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002d690:	10 9c       	mov	r12,r8
8002d692:	c8 5f       	rcall	8002d59c <osc_is_ready>
8002d694:	18 98       	mov	r8,r12
8002d696:	ec 18 00 01 	eorl	r8,0x1
8002d69a:	5c 58       	castu.b	r8
8002d69c:	cf 81       	brne	8002d68c <osc_wait_ready+0x12>
		/* Do nothing */
	}
}
8002d69e:	2f fd       	sub	sp,-4
8002d6a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d6a4:	80 02       	ld.sh	r2,r0[0x0]
8002d6a6:	d5 08       	*unknown*

8002d6a8 <pll_config_set_option>:
			* CONFIG_PLL##pll_id##_MUL)                            \
			/ CONFIG_PLL##pll_id##_DIV)

static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
8002d6a8:	eb cd 40 80 	pushm	r7,lr
8002d6ac:	1a 97       	mov	r7,sp
8002d6ae:	20 2d       	sub	sp,8
8002d6b0:	ef 4c ff fc 	st.w	r7[-4],r12
8002d6b4:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_SCIF_PLLOPT + option);
8002d6b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d6bc:	70 09       	ld.w	r9,r8[0x0]
8002d6be:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d6c2:	2f d8       	sub	r8,-3
8002d6c4:	30 1a       	mov	r10,1
8002d6c6:	f4 08 09 48 	lsl	r8,r10,r8
8002d6ca:	10 49       	or	r9,r8
8002d6cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d6d0:	91 09       	st.w	r8[0x0],r9
}
8002d6d2:	2f ed       	sub	sp,-8
8002d6d4:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d6d8 <pll_config_init>:
 * The PLL options #PLL_OPT_VCO_RANGE_LOW and #PLL_OPT_OUTPUT_DIV will
 * be set automatically based on the calculated target frequency.
 */
static inline void pll_config_init(struct pll_config *cfg,
		enum pll_source src, unsigned int div, unsigned int mul)
{
8002d6d8:	eb cd 40 c0 	pushm	r6-r7,lr
8002d6dc:	1a 97       	mov	r7,sp
8002d6de:	20 5d       	sub	sp,20
8002d6e0:	4b 46       	lddpc	r6,8002d7b0 <pll_config_init+0xd8>
8002d6e2:	1e 26       	rsub	r6,pc
8002d6e4:	ef 4c ff f8 	st.w	r7[-8],r12
8002d6e8:	ef 4b ff f4 	st.w	r7[-12],r11
8002d6ec:	ef 4a ff f0 	st.w	r7[-16],r10
8002d6f0:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t vco_hz;

	Assert(src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(src) * mul;
8002d6f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d6f8:	5c 58       	castu.b	r8
8002d6fa:	10 9c       	mov	r12,r8
8002d6fc:	c8 ef       	rcall	8002d618 <osc_get_rate>
8002d6fe:	18 99       	mov	r9,r12
8002d700:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d704:	f2 08 02 48 	mul	r8,r9,r8
8002d708:	ef 48 ff fc 	st.w	r7[-4],r8
	vco_hz /= div;
8002d70c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d710:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002d714:	f0 09 0d 08 	divu	r8,r8,r9
8002d718:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(vco_hz >= PLL_MIN_HZ);
	Assert(vco_hz <= PLL_MAX_HZ);

	cfg->ctrl = 0;
8002d71c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d720:	30 09       	mov	r9,0
8002d722:	91 09       	st.w	r8[0x0],r9

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
8002d724:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d728:	e0 69 b3 ff 	mov	r9,46079
8002d72c:	ea 19 04 c4 	orh	r9,0x4c4
8002d730:	12 38       	cp.w	r8,r9
8002d732:	e0 8b 00 15 	brhi	8002d75c <pll_config_init+0x84>
8002d736:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d73a:	58 88       	cp.w	r8,8
8002d73c:	e0 8b 00 10 	brhi	8002d75c <pll_config_init+0x84>
		mul *= 2;
8002d740:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d744:	a1 78       	lsl	r8,0x1
8002d746:	ef 48 ff ec 	st.w	r7[-20],r8
		vco_hz *= 2;
8002d74a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d74e:	a1 78       	lsl	r8,0x1
8002d750:	ef 48 ff fc 	st.w	r7[-4],r8
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
8002d754:	30 1b       	mov	r11,1
8002d756:	ee fc ff f8 	ld.w	r12,r7[-8]
8002d75a:	ca 7f       	rcall	8002d6a8 <pll_config_set_option>
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
8002d75c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d760:	e0 69 fe 7f 	mov	r9,65151
8002d764:	ea 19 0a 21 	orh	r9,0xa21
8002d768:	12 38       	cp.w	r8,r9
8002d76a:	e0 8b 00 06 	brhi	8002d776 <pll_config_init+0x9e>
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);
8002d76e:	30 0b       	mov	r11,0
8002d770:	ee fc ff f8 	ld.w	r12,r7[-8]
8002d774:	c9 af       	rcall	8002d6a8 <pll_config_set_option>

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
8002d776:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d77a:	70 09       	ld.w	r9,r8[0x0]
8002d77c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d780:	20 18       	sub	r8,1
8002d782:	f0 0a 15 10 	lsl	r10,r8,0x10
		| (div << AVR32_SCIF_PLLDIV)
8002d786:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002d78a:	a9 68       	lsl	r8,0x8
		| (PLL_MAX_STARTUP_CYCLES << AVR32_SCIF_PLLCOUNT)
8002d78c:	10 4a       	or	r10,r8
		| (src << AVR32_SCIF_PLLOSC);
8002d78e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d792:	a1 78       	lsl	r8,0x1
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
8002d794:	f5 e8 10 08 	or	r8,r10,r8
8002d798:	f3 e8 10 08 	or	r8,r9,r8
8002d79c:	10 99       	mov	r9,r8
8002d79e:	ea 19 3f 00 	orh	r9,0x3f00
8002d7a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d7a6:	91 09       	st.w	r8[0x0],r9
		| (div << AVR32_SCIF_PLLDIV)
		| (PLL_MAX_STARTUP_CYCLES << AVR32_SCIF_PLLCOUNT)
		| (src << AVR32_SCIF_PLLOSC);
}
8002d7a8:	2f bd       	sub	sp,-20
8002d7aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d7ae:	00 00       	add	r0,r0
8002d7b0:	80 02       	ld.sh	r2,r0[0x0]
8002d7b2:	d5 66       	*unknown*

8002d7b4 <pll_is_locked>:
extern void pll_config_write(const struct pll_config *cfg, unsigned int pll_id);
extern void pll_enable(const struct pll_config *cfg, unsigned int pll_id);
extern void pll_disable(unsigned int pll_id);

static inline bool pll_is_locked(unsigned int pll_id)
{
8002d7b4:	eb cd 40 80 	pushm	r7,lr
8002d7b8:	1a 97       	mov	r7,sp
8002d7ba:	20 1d       	sub	sp,4
8002d7bc:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_SCIF.pclksr & (1U << (AVR32_SCIF_PLL0_LOCK + pll_id)));
8002d7c0:	fe 78 08 00 	mov	r8,-63488
8002d7c4:	70 59       	ld.w	r9,r8[0x14]
8002d7c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d7ca:	2f c8       	sub	r8,-4
8002d7cc:	30 1a       	mov	r10,1
8002d7ce:	f4 08 09 48 	lsl	r8,r10,r8
8002d7d2:	f3 e8 00 08 	and	r8,r9,r8
8002d7d6:	5f 18       	srne	r8
8002d7d8:	5c 58       	castu.b	r8
}
8002d7da:	10 9c       	mov	r12,r8
8002d7dc:	2f fd       	sub	sp,-4
8002d7de:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d7e2 <pll_enable_source_sync>:

static inline void pll_enable_source_sync(enum pll_source src)
{
8002d7e2:	eb cd 40 c0 	pushm	r6-r7,lr
8002d7e6:	1a 97       	mov	r7,sp
8002d7e8:	20 1d       	sub	sp,4
8002d7ea:	49 06       	lddpc	r6,8002d828 <pll_enable_source_sync+0x46>
8002d7ec:	1e 26       	rsub	r6,pc
8002d7ee:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
8002d7f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d7f6:	58 18       	cp.w	r8,1
8002d7f8:	e0 88 00 05 	brls	8002d802 <pll_enable_source_sync+0x20>
8002d7fc:	58 28       	cp.w	r8,2
8002d7fe:	c0 d0       	breq	8002d818 <pll_enable_source_sync+0x36>
8002d800:	c1 08       	rjmp	8002d820 <pll_enable_source_sync+0x3e>
	case PLL_SRC_OSC0: /* Fall through */
	case PLL_SRC_OSC1:
		osc_enable(src);
8002d802:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d806:	5c 58       	castu.b	r8
8002d808:	10 9c       	mov	r12,r8
8002d80a:	ca 1e       	rcall	8002d54c <osc_enable>
		osc_wait_ready(src);
8002d80c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d810:	5c 58       	castu.b	r8
8002d812:	10 9c       	mov	r12,r8
8002d814:	c3 3f       	rcall	8002d67a <osc_wait_ready>
		break;
8002d816:	c0 58       	rjmp	8002d820 <pll_enable_source_sync+0x3e>

	case PLL_SRC_RC8M:
		osc_enable(OSC_ID_RC8M);
8002d818:	30 2c       	mov	r12,2
8002d81a:	c9 9e       	rcall	8002d54c <osc_enable>
		osc_wait_ready(OSC_ID_RC8M);
8002d81c:	30 2c       	mov	r12,2
8002d81e:	c2 ef       	rcall	8002d67a <osc_wait_ready>

	default:
		// unhandled_case(src);
		break;
	}
}
8002d820:	2f fd       	sub	sp,-4
8002d822:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d826:	00 00       	add	r0,r0
8002d828:	80 02       	ld.sh	r2,r0[0x0]
8002d82a:	d6 70       	acall	0x67

8002d82c <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
8002d82c:	eb cd 40 c0 	pushm	r6-r7,lr
8002d830:	1a 97       	mov	r7,sp
8002d832:	20 1d       	sub	sp,4
8002d834:	48 96       	lddpc	r6,8002d858 <pll_wait_for_lock+0x2c>
8002d836:	1e 26       	rsub	r6,pc
8002d838:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
8002d83c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d840:	cb af       	rcall	8002d7b4 <pll_is_locked>
8002d842:	18 98       	mov	r8,r12
8002d844:	ec 18 00 01 	eorl	r8,0x1
8002d848:	5c 58       	castu.b	r8
8002d84a:	cf 91       	brne	8002d83c <pll_wait_for_lock+0x10>
		/* Do nothing */
	}

	return 0;
8002d84c:	30 08       	mov	r8,0
}
8002d84e:	10 9c       	mov	r12,r8
8002d850:	2f fd       	sub	sp,-4
8002d852:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d856:	00 00       	add	r0,r0
8002d858:	80 02       	ld.sh	r2,r0[0x0]
8002d85a:	d6 ba       	popm	r0-r7,r10,r12,lr

8002d85c <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
8002d85c:	eb cd 40 80 	pushm	r7,lr
8002d860:	1a 97       	mov	r7,sp
8002d862:	20 2d       	sub	sp,8
8002d864:	ef 4c ff fc 	st.w	r7[-4],r12
8002d868:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
8002d86c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d870:	30 09       	mov	r9,0
8002d872:	91 09       	st.w	r8[0x0],r9
}
8002d874:	2f ed       	sub	sp,-8
8002d876:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d87a <genclk_config_set_source>:
	AVR32_SCIF.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
8002d87a:	eb cd 40 80 	pushm	r7,lr
8002d87e:	1a 97       	mov	r7,sp
8002d880:	20 2d       	sub	sp,8
8002d882:	ef 4c ff fc 	st.w	r7[-4],r12
8002d886:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
8002d88a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d88e:	70 08       	ld.w	r8,r8[0x0]
8002d890:	10 99       	mov	r9,r8
8002d892:	e0 19 f0 ff 	andl	r9,0xf0ff
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
8002d896:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d89a:	a9 68       	lsl	r8,0x8
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
8002d89c:	10 49       	or	r9,r8
8002d89e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d8a2:	91 09       	st.w	r8[0x0],r9
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
}
8002d8a4:	2f ed       	sub	sp,-8
8002d8a6:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d8aa <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
8002d8aa:	eb cd 40 80 	pushm	r7,lr
8002d8ae:	1a 97       	mov	r7,sp
8002d8b0:	20 2d       	sub	sp,8
8002d8b2:	ef 4c ff fc 	st.w	r7[-4],r12
8002d8b6:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_SCIF_GCCTRL_DIVEN_MASK
8002d8ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d8be:	70 08       	ld.w	r8,r8[0x0]
8002d8c0:	10 99       	mov	r9,r8
8002d8c2:	e4 19 ff 00 	andh	r9,0xff00
8002d8c6:	e0 19 ff fd 	andl	r9,0xfffd
8002d8ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d8ce:	91 09       	st.w	r8[0x0],r9
			| AVR32_SCIF_GCCTRL_DIV_MASK);

	if (divider > 1) {
8002d8d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d8d4:	58 18       	cp.w	r8,1
8002d8d6:	e0 88 00 17 	brls	8002d904 <genclk_config_set_divider+0x5a>
		cfg->ctrl |= 1U << AVR32_SCIF_GCCTRL_DIVEN;
8002d8da:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d8de:	70 08       	ld.w	r8,r8[0x0]
8002d8e0:	10 99       	mov	r9,r8
8002d8e2:	a1 b9       	sbr	r9,0x1
8002d8e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d8e8:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_SCIF_GCCTRL_DIV;
8002d8ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d8ee:	70 09       	ld.w	r9,r8[0x0]
8002d8f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d8f4:	2f f8       	sub	r8,-1
8002d8f6:	a1 98       	lsr	r8,0x1
8002d8f8:	20 18       	sub	r8,1
8002d8fa:	b1 68       	lsl	r8,0x10
8002d8fc:	10 49       	or	r9,r8
8002d8fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d902:	91 09       	st.w	r8[0x0],r9
	}
}
8002d904:	2f ed       	sub	sp,-8
8002d906:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d90a <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
8002d90a:	eb cd 40 80 	pushm	r7,lr
8002d90e:	1a 97       	mov	r7,sp
8002d910:	20 2d       	sub	sp,8
8002d912:	ef 4c ff fc 	st.w	r7[-4],r12
8002d916:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
8002d91a:	fe 78 08 00 	mov	r8,-63488
8002d91e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d922:	ee fa ff fc 	ld.w	r10,r7[-4]
8002d926:	74 0a       	ld.w	r10,r10[0x0]
8002d928:	a1 aa       	sbr	r10,0x0
8002d92a:	2e 79       	sub	r9,-25
8002d92c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8002d930:	2f ed       	sub	sp,-8
8002d932:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d936 <genclk_disable>:

static inline void genclk_disable(unsigned int id)
{
8002d936:	eb cd 40 80 	pushm	r7,lr
8002d93a:	1a 97       	mov	r7,sp
8002d93c:	20 1d       	sub	sp,4
8002d93e:	ef 4c ff fc 	st.w	r7[-4],r12
	AVR32_SCIF.gcctrl[id] = 0;
8002d942:	fe 78 08 00 	mov	r8,-63488
8002d946:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d94a:	2e 79       	sub	r9,-25
8002d94c:	30 0a       	mov	r10,0
8002d94e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8002d952:	2f fd       	sub	sp,-4
8002d954:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d958 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8002d958:	eb cd 40 c0 	pushm	r6-r7,lr
8002d95c:	1a 97       	mov	r7,sp
8002d95e:	48 56       	lddpc	r6,8002d970 <sysclk_get_main_hz+0x18>
8002d960:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8002d962:	30 0c       	mov	r12,0
8002d964:	c5 ae       	rcall	8002d618 <osc_get_rate>
8002d966:	18 98       	mov	r8,r12
8002d968:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8002d96a:	10 9c       	mov	r12,r8
8002d96c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d970:	80 02       	ld.sh	r2,r0[0x0]
8002d972:	d7 e4       	*unknown*

8002d974 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
8002d974:	eb cd 40 c0 	pushm	r6-r7,lr
8002d978:	1a 97       	mov	r7,sp
8002d97a:	20 4d       	sub	sp,16
8002d97c:	49 d6       	lddpc	r6,8002d9f0 <sysclk_priv_enable_module+0x7c>
8002d97e:	1e 26       	rsub	r6,pc
8002d980:	ef 4c ff f4 	st.w	r7[-12],r12
8002d984:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
8002d988:	fe b0 fd c6 	rcall	8002d514 <cpu_irq_save>
8002d98c:	18 98       	mov	r8,r12
8002d98e:	ef 48 ff f8 	st.w	r7[-8],r8

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8002d992:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d996:	a3 68       	lsl	r8,0x2
8002d998:	e0 28 fb e0 	sub	r8,64480
8002d99c:	70 08       	ld.w	r8,r8[0x0]
8002d99e:	ef 48 ff fc 	st.w	r7[-4],r8
	mask |= 1U << module_index;
8002d9a2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002d9a6:	30 19       	mov	r9,1
8002d9a8:	f2 08 09 48 	lsl	r8,r9,r8
8002d9ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d9b0:	f3 e8 10 08 	or	r8,r9,r8
8002d9b4:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
8002d9b8:	fe 78 04 00 	mov	r8,-64512
8002d9bc:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d9c0:	f2 0a 15 02 	lsl	r10,r9,0x2
8002d9c4:	32 09       	mov	r9,32
8002d9c6:	ea 19 aa 00 	orh	r9,0xaa00
8002d9ca:	f4 09 00 09 	add	r9,r10,r9
8002d9ce:	f1 49 00 58 	st.w	r8[88],r9
	*(&AVR32_PM.cpumask + bus_id) = mask;
8002d9d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d9d6:	a3 68       	lsl	r8,0x2
8002d9d8:	e0 28 fb e0 	sub	r8,64480
8002d9dc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d9e0:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
8002d9e2:	ee fc ff f8 	ld.w	r12,r7[-8]
8002d9e6:	fe b0 fd a6 	rcall	8002d532 <cpu_irq_restore>
}
8002d9ea:	2f cd       	sub	sp,-16
8002d9ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d9f0:	80 02       	ld.sh	r2,r0[0x0]
8002d9f2:	d8 02       	popm	pc

8002d9f4 <sysclk_priv_disable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be disabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_disable_module(unsigned int bus_id, unsigned int module_index)
{
8002d9f4:	eb cd 40 c0 	pushm	r6-r7,lr
8002d9f8:	1a 97       	mov	r7,sp
8002d9fa:	20 4d       	sub	sp,16
8002d9fc:	49 e6       	lddpc	r6,8002da74 <sysclk_priv_disable_module+0x80>
8002d9fe:	1e 26       	rsub	r6,pc
8002da00:	ef 4c ff f4 	st.w	r7[-12],r12
8002da04:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
8002da08:	fe b0 fd 86 	rcall	8002d514 <cpu_irq_save>
8002da0c:	18 98       	mov	r8,r12
8002da0e:	ef 48 ff f8 	st.w	r7[-8],r8

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8002da12:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002da16:	a3 68       	lsl	r8,0x2
8002da18:	e0 28 fb e0 	sub	r8,64480
8002da1c:	70 08       	ld.w	r8,r8[0x0]
8002da1e:	ef 48 ff fc 	st.w	r7[-4],r8
	mask &= ~(1U << module_index);
8002da22:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002da26:	30 19       	mov	r9,1
8002da28:	f2 08 09 48 	lsl	r8,r9,r8
8002da2c:	5c d8       	com	r8
8002da2e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002da32:	f3 e8 00 08 	and	r8,r9,r8
8002da36:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
8002da3a:	fe 78 04 00 	mov	r8,-64512
8002da3e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002da42:	f2 0a 15 02 	lsl	r10,r9,0x2
8002da46:	32 09       	mov	r9,32
8002da48:	ea 19 aa 00 	orh	r9,0xaa00
8002da4c:	f4 09 00 09 	add	r9,r10,r9
8002da50:	f1 49 00 58 	st.w	r8[88],r9
	*(&AVR32_PM.cpumask + bus_id) = mask;
8002da54:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002da58:	a3 68       	lsl	r8,0x2
8002da5a:	e0 28 fb e0 	sub	r8,64480
8002da5e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002da62:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
8002da64:	ee fc ff f8 	ld.w	r12,r7[-8]
8002da68:	fe b0 fd 65 	rcall	8002d532 <cpu_irq_restore>
}
8002da6c:	2f cd       	sub	sp,-16
8002da6e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002da72:	00 00       	add	r0,r0
8002da74:	80 02       	ld.sh	r2,r0[0x0]
8002da76:	d8 82       	popm	r10,pc

8002da78 <sysclk_set_prescalers>:
 * \param pbc_shift The PBC clock will be divided by \f$2^{pbc\_shift}\f$
 */
void sysclk_set_prescalers(unsigned int cpu_shift,
		unsigned int pba_shift, unsigned int pbb_shift,
		unsigned int pbc_shift)
{
8002da78:	eb cd 40 c0 	pushm	r6-r7,lr
8002da7c:	1a 97       	mov	r7,sp
8002da7e:	20 9d       	sub	sp,36
8002da80:	4b f6       	lddpc	r6,8002db7c <sysclk_set_prescalers+0x104>
8002da82:	1e 26       	rsub	r6,pc
8002da84:	ef 4c ff e8 	st.w	r7[-24],r12
8002da88:	ef 4b ff e4 	st.w	r7[-28],r11
8002da8c:	ef 4a ff e0 	st.w	r7[-32],r10
8002da90:	ef 49 ff dc 	st.w	r7[-36],r9
	irqflags_t flags;
	uint32_t   cpu_cksel = 0;
8002da94:	30 08       	mov	r8,0
8002da96:	ef 48 ff f0 	st.w	r7[-16],r8
	uint32_t   pba_cksel = 0;
8002da9a:	30 08       	mov	r8,0
8002da9c:	ef 48 ff f4 	st.w	r7[-12],r8
	uint32_t   pbb_cksel = 0;
8002daa0:	30 08       	mov	r8,0
8002daa2:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t   pbc_cksel = 0;
8002daa6:	30 08       	mov	r8,0
8002daa8:	ef 48 ff fc 	st.w	r7[-4],r8

	Assert(cpu_shift <= pba_shift);
	Assert(cpu_shift <= pbb_shift);

	if (cpu_shift > 0)
8002daac:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002dab0:	58 08       	cp.w	r8,0
8002dab2:	c0 80       	breq	8002dac2 <sysclk_set_prescalers+0x4a>
		cpu_cksel = ((cpu_shift - 1) << AVR32_PM_CPUSEL)
8002dab4:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002dab8:	20 18       	sub	r8,1
8002daba:	a5 68       	lsl	r8,0x4
8002dabc:	a7 b8       	sbr	r8,0x7
8002dabe:	ef 48 ff f0 	st.w	r7[-16],r8
				| (1U << AVR32_PM_CPUDIV);

	if (pba_shift > 0)
8002dac2:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002dac6:	58 08       	cp.w	r8,0
8002dac8:	c0 80       	breq	8002dad8 <sysclk_set_prescalers+0x60>
		pba_cksel = ((pba_shift - 1) << AVR32_PM_PBASEL)
8002daca:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002dace:	20 18       	sub	r8,1
8002dad0:	ad 68       	lsl	r8,0xc
8002dad2:	a7 b8       	sbr	r8,0x7
8002dad4:	ef 48 ff f4 	st.w	r7[-12],r8
				| (1U << AVR32_PM_PBADIV);

	if (pbb_shift > 0)
8002dad8:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002dadc:	58 08       	cp.w	r8,0
8002dade:	c0 80       	breq	8002daee <sysclk_set_prescalers+0x76>
		pbb_cksel = ((pbb_shift - 1) << AVR32_PM_PBBSEL)
8002dae0:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002dae4:	20 18       	sub	r8,1
8002dae6:	b1 68       	lsl	r8,0x10
8002dae8:	a7 b8       	sbr	r8,0x7
8002daea:	ef 48 ff f8 	st.w	r7[-8],r8
				| (1U << AVR32_PM_PBBDIV);

	if (pbc_shift > 0)
8002daee:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002daf2:	58 08       	cp.w	r8,0
8002daf4:	c0 80       	breq	8002db04 <sysclk_set_prescalers+0x8c>
		pbc_cksel = ((pbc_shift - 1) << AVR32_PM_PBCSEL)
8002daf6:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002dafa:	20 18       	sub	r8,1
8002dafc:	b5 68       	lsl	r8,0x14
8002dafe:	a7 b8       	sbr	r8,0x7
8002db00:	ef 48 ff fc 	st.w	r7[-4],r8
				| (1U << AVR32_PM_PBCDIV);

	flags = cpu_irq_save();
8002db04:	fe b0 fd 08 	rcall	8002d514 <cpu_irq_save>
8002db08:	18 98       	mov	r8,r12
8002db0a:	ef 48 ff ec 	st.w	r7[-20],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_CPUSEL;
8002db0e:	fe 78 04 00 	mov	r8,-64512
8002db12:	30 49       	mov	r9,4
8002db14:	ea 19 aa 00 	orh	r9,0xaa00
8002db18:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.cpusel = cpu_cksel;
8002db1c:	fe 78 04 00 	mov	r8,-64512
8002db20:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002db24:	91 19       	st.w	r8[0x4],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBASEL;
8002db26:	fe 78 04 00 	mov	r8,-64512
8002db2a:	30 c9       	mov	r9,12
8002db2c:	ea 19 aa 00 	orh	r9,0xaa00
8002db30:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbasel = pba_cksel;
8002db34:	fe 78 04 00 	mov	r8,-64512
8002db38:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002db3c:	91 39       	st.w	r8[0xc],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBBSEL;
8002db3e:	fe 78 04 00 	mov	r8,-64512
8002db42:	31 09       	mov	r9,16
8002db44:	ea 19 aa 00 	orh	r9,0xaa00
8002db48:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbbsel = pbb_cksel;
8002db4c:	fe 78 04 00 	mov	r8,-64512
8002db50:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002db54:	91 49       	st.w	r8[0x10],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBCSEL;
8002db56:	fe 78 04 00 	mov	r8,-64512
8002db5a:	31 49       	mov	r9,20
8002db5c:	ea 19 aa 00 	orh	r9,0xaa00
8002db60:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbbsel = pbc_cksel;
8002db64:	fe 78 04 00 	mov	r8,-64512
8002db68:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002db6c:	91 49       	st.w	r8[0x10],r9
	cpu_irq_restore(flags);
8002db6e:	ee fc ff ec 	ld.w	r12,r7[-20]
8002db72:	fe b0 fc e0 	rcall	8002d532 <cpu_irq_restore>
}
8002db76:	2f 7d       	sub	sp,-36
8002db78:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002db7c:	80 02       	ld.sh	r2,r0[0x0]
8002db7e:	d9 06       	*unknown*

8002db80 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint_fast8_t src)
{
8002db80:	eb cd 40 c0 	pushm	r6-r7,lr
8002db84:	1a 97       	mov	r7,sp
8002db86:	20 2d       	sub	sp,8
8002db88:	48 e6       	lddpc	r6,8002dbc0 <sysclk_set_source+0x40>
8002db8a:	1e 26       	rsub	r6,pc
8002db8c:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_RC8M);

	flags = cpu_irq_save();
8002db90:	fe b0 fc c2 	rcall	8002d514 <cpu_irq_save>
8002db94:	18 98       	mov	r8,r12
8002db96:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
8002db9a:	fe 78 04 00 	mov	r8,-64512
8002db9e:	fc 19 aa 00 	movh	r9,0xaa00
8002dba2:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.mcctrl = src;
8002dba6:	fe 78 04 00 	mov	r8,-64512
8002dbaa:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002dbae:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8002dbb0:	ee fc ff fc 	ld.w	r12,r7[-4]
8002dbb4:	fe b0 fc bf 	rcall	8002d532 <cpu_irq_restore>
}
8002dbb8:	2f ed       	sub	sp,-8
8002dbba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002dbbe:	00 00       	add	r0,r0
8002dbc0:	80 02       	ld.sh	r2,r0[0x0]
8002dbc2:	da 0e       	*unknown*

8002dbc4 <sysclk_enable_usb>:
 * \pre The USB generick clock must be configurated to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
8002dbc4:	eb cd 40 c0 	pushm	r6-r7,lr
8002dbc8:	1a 97       	mov	r7,sp
8002dbca:	20 3d       	sub	sp,12
8002dbcc:	49 66       	lddpc	r6,8002dc24 <sysclk_enable_usb+0x60>
8002dbce:	1e 26       	rsub	r6,pc
	struct genclk_config gcfg;

	genclk_config_defaults(&gcfg, AVR32_USBC_GCLK_NUM);
8002dbd0:	ee c8 00 04 	sub	r8,r7,4
8002dbd4:	30 0b       	mov	r11,0
8002dbd6:	10 9c       	mov	r12,r8
8002dbd8:	c4 2e       	rcall	8002d85c <genclk_config_defaults>
#endif

#ifdef CONFIG_PLL1_SOURCE
	case USBCLK_SRC_PLL1: {
		struct pll_config pllcfg;
		pll_enable_source_sync(CONFIG_PLL1_SOURCE);
8002dbda:	30 0c       	mov	r12,0
8002dbdc:	c0 3e       	rcall	8002d7e2 <pll_enable_source_sync>
		pll_config_defaults(&pllcfg, 1);
8002dbde:	ee c8 00 0c 	sub	r8,r7,12
8002dbe2:	30 39       	mov	r9,3
8002dbe4:	30 1a       	mov	r10,1
8002dbe6:	30 0b       	mov	r11,0
8002dbe8:	10 9c       	mov	r12,r8
8002dbea:	fe b0 fd 77 	rcall	8002d6d8 <pll_config_init>
		pll_enable(&pllcfg, 1);
8002dbee:	ee c8 00 0c 	sub	r8,r7,12
8002dbf2:	30 1b       	mov	r11,1
8002dbf4:	10 9c       	mov	r12,r8
8002dbf6:	f0 16 00 b3 	mcall	r6[716]
		pll_wait_for_lock(1);
8002dbfa:	30 1c       	mov	r12,1
8002dbfc:	c1 8e       	rcall	8002d82c <pll_wait_for_lock>
		genclk_config_set_source(&gcfg, GENCLK_SRC_PLL1);
8002dbfe:	ee c8 00 04 	sub	r8,r7,4
8002dc02:	30 6b       	mov	r11,6
8002dc04:	10 9c       	mov	r12,r8
8002dc06:	c3 ae       	rcall	8002d87a <genclk_config_set_source>
	default:
		/* unhandled_case(CONFIG_USBCLK_SOURCE); */
		break;
	}

	genclk_config_set_divider(&gcfg, CONFIG_USBCLK_DIV);
8002dc08:	ee c8 00 04 	sub	r8,r7,4
8002dc0c:	30 1b       	mov	r11,1
8002dc0e:	10 9c       	mov	r12,r8
8002dc10:	c4 de       	rcall	8002d8aa <genclk_config_set_divider>
	genclk_enable(&gcfg, AVR32_USBC_GCLK_NUM);
8002dc12:	ee c8 00 04 	sub	r8,r7,4
8002dc16:	30 0b       	mov	r11,0
8002dc18:	10 9c       	mov	r12,r8
8002dc1a:	c7 8e       	rcall	8002d90a <genclk_enable>
}
8002dc1c:	2f dd       	sub	sp,-12
8002dc1e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002dc22:	00 00       	add	r0,r0
8002dc24:	80 02       	ld.sh	r2,r0[0x0]
8002dc26:	da 52       	popm	r0-r3,r8-r9,r12,pc

8002dc28 <sysclk_disable_usb>:

/**
 * \brief Disable the USB generic clock
 */
void sysclk_disable_usb(void)
{
8002dc28:	eb cd 40 c0 	pushm	r6-r7,lr
8002dc2c:	1a 97       	mov	r7,sp
8002dc2e:	48 46       	lddpc	r6,8002dc3c <sysclk_disable_usb+0x14>
8002dc30:	1e 26       	rsub	r6,pc
   genclk_disable(AVR32_USBC_GCLK_NUM);
8002dc32:	30 0c       	mov	r12,0
8002dc34:	c8 1e       	rcall	8002d936 <genclk_disable>
}
8002dc36:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002dc3a:	00 00       	add	r0,r0
8002dc3c:	80 02       	ld.sh	r2,r0[0x0]
8002dc3e:	da b4       	*unknown*

8002dc40 <sysclk_init>:
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
8002dc40:	eb cd 40 c0 	pushm	r6-r7,lr
8002dc44:	1a 97       	mov	r7,sp
8002dc46:	20 2d       	sub	sp,8
8002dc48:	49 b6       	lddpc	r6,8002dcb4 <sysclk_init+0x74>
8002dc4a:	1e 26       	rsub	r6,pc

#ifdef CONFIG_PLL0_SOURCE

		struct pll_config pllcfg;

		pll_enable_source_sync(CONFIG_PLL0_SOURCE);
8002dc4c:	30 0c       	mov	r12,0
8002dc4e:	fe b0 fd ca 	rcall	8002d7e2 <pll_enable_source_sync>
		pll_config_defaults(&pllcfg, 0);
8002dc52:	ee c8 00 04 	sub	r8,r7,4
8002dc56:	30 49       	mov	r9,4
8002dc58:	30 1a       	mov	r10,1
8002dc5a:	30 0b       	mov	r11,0
8002dc5c:	10 9c       	mov	r12,r8
8002dc5e:	fe b0 fd 3d 	rcall	8002d6d8 <pll_config_init>
		pll_enable(&pllcfg, 0);
8002dc62:	ee c8 00 04 	sub	r8,r7,4
8002dc66:	30 0b       	mov	r11,0
8002dc68:	10 9c       	mov	r12,r8
8002dc6a:	f0 16 00 b3 	mcall	r6[716]
		pll_wait_for_lock(0);
8002dc6e:	30 0c       	mov	r12,0
8002dc70:	fe b0 fd de 	rcall	8002d82c <pll_wait_for_lock>

#ifdef CONFIG_PLL1_SOURCE
	
		struct pll_config pllcfg1;

		pll_enable_source_sync(CONFIG_PLL1_SOURCE);
8002dc74:	30 0c       	mov	r12,0
8002dc76:	fe b0 fd b6 	rcall	8002d7e2 <pll_enable_source_sync>
		pll_config_defaults(&pllcfg1, 1);
8002dc7a:	ee c8 00 08 	sub	r8,r7,8
8002dc7e:	30 39       	mov	r9,3
8002dc80:	30 1a       	mov	r10,1
8002dc82:	30 0b       	mov	r11,0
8002dc84:	10 9c       	mov	r12,r8
8002dc86:	fe b0 fd 29 	rcall	8002d6d8 <pll_config_init>
		pll_enable(&pllcfg1, 1);
8002dc8a:	ee c8 00 08 	sub	r8,r7,8
8002dc8e:	30 1b       	mov	r11,1
8002dc90:	10 9c       	mov	r12,r8
8002dc92:	f0 16 00 b3 	mcall	r6[716]
		pll_wait_for_lock(1);
8002dc96:	30 1c       	mov	r12,1
8002dc98:	fe b0 fd ca 	rcall	8002d82c <pll_wait_for_lock>


	case SYSCLK_SRC_PLL0: {

		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_main_hz());
8002dc9c:	c5 ee       	rcall	8002d958 <sysclk_get_main_hz>
8002dc9e:	18 98       	mov	r8,r12
8002dca0:	10 9c       	mov	r12,r8
8002dca2:	f0 16 01 68 	mcall	r6[1440]
		sysclk_set_source(SYSCLK_SRC_PLL0);
8002dca6:	30 3c       	mov	r12,3
8002dca8:	f0 16 01 cf 	mcall	r6[1852]

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
8002dcac:	2f ed       	sub	sp,-8
8002dcae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002dcb2:	00 00       	add	r0,r0
8002dcb4:	80 02       	ld.sh	r2,r0[0x0]
8002dcb6:	da ce       	*unknown*

8002dcb8 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
8002dcb8:	eb cd 40 80 	pushm	r7,lr
8002dcbc:	1a 97       	mov	r7,sp
8002dcbe:	20 1d       	sub	sp,4
8002dcc0:	18 98       	mov	r8,r12
8002dcc2:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002dcc6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002dcca:	58 38       	cp.w	r8,3
8002dccc:	c1 20       	breq	8002dcf0 <osc_get_rate+0x38>
8002dcce:	e0 89 00 07 	brgt	8002dcdc <osc_get_rate+0x24>
8002dcd2:	58 08       	cp.w	r8,0
8002dcd4:	c0 90       	breq	8002dce6 <osc_get_rate+0x2e>
8002dcd6:	58 28       	cp.w	r8,2
8002dcd8:	c0 f0       	breq	8002dcf6 <osc_get_rate+0x3e>
8002dcda:	c1 b8       	rjmp	8002dd10 <osc_get_rate+0x58>
8002dcdc:	58 48       	cp.w	r8,4
8002dcde:	c1 10       	breq	8002dd00 <osc_get_rate+0x48>
8002dce0:	58 58       	cp.w	r8,5
8002dce2:	c1 40       	breq	8002dd0a <osc_get_rate+0x52>
8002dce4:	c1 68       	rjmp	8002dd10 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8002dce6:	e0 68 24 00 	mov	r8,9216
8002dcea:	ea 18 00 f4 	orh	r8,0xf4
8002dcee:	c1 28       	rjmp	8002dd12 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8002dcf0:	e0 68 80 00 	mov	r8,32768
8002dcf4:	c0 f8       	rjmp	8002dd12 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8002dcf6:	e0 68 12 00 	mov	r8,4608
8002dcfa:	ea 18 00 7a 	orh	r8,0x7a
8002dcfe:	c0 a8       	rjmp	8002dd12 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8002dd00:	e0 68 0e 00 	mov	r8,3584
8002dd04:	ea 18 07 27 	orh	r8,0x727
8002dd08:	c0 58       	rjmp	8002dd12 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8002dd0a:	e0 78 c1 38 	mov	r8,115000
8002dd0e:	c0 28       	rjmp	8002dd12 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
8002dd10:	30 08       	mov	r8,0
	}
}
8002dd12:	10 9c       	mov	r12,r8
8002dd14:	2f fd       	sub	sp,-4
8002dd16:	e3 cd 80 80 	ldm	sp++,r7,pc

8002dd1a <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8002dd1a:	eb cd 40 c0 	pushm	r6-r7,lr
8002dd1e:	1a 97       	mov	r7,sp
8002dd20:	48 56       	lddpc	r6,8002dd34 <sysclk_get_main_hz+0x1a>
8002dd22:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8002dd24:	30 0c       	mov	r12,0
8002dd26:	cc 9f       	rcall	8002dcb8 <osc_get_rate>
8002dd28:	18 98       	mov	r8,r12
8002dd2a:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8002dd2c:	10 9c       	mov	r12,r8
8002dd2e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002dd32:	00 00       	add	r0,r0
8002dd34:	80 02       	ld.sh	r2,r0[0x0]
8002dd36:	db a6       	*unknown*

8002dd38 <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
8002dd38:	eb cd 40 c0 	pushm	r6-r7,lr
8002dd3c:	1a 97       	mov	r7,sp
8002dd3e:	48 46       	lddpc	r6,8002dd4c <sysclk_get_pba_hz+0x14>
8002dd40:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
8002dd42:	ce cf       	rcall	8002dd1a <sysclk_get_main_hz>
8002dd44:	18 98       	mov	r8,r12
}
8002dd46:	10 9c       	mov	r12,r8
8002dd48:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002dd4c:	80 02       	ld.sh	r2,r0[0x0]
8002dd4e:	db c4       	*unknown*

8002dd50 <spi_set_chipselect_delay_bct>:
 * \param delay       Delay.
 */

static inline void spi_set_chipselect_delay_bct(volatile avr32_spi_t *spi,
                        uint8_t chip_select, uint8_t delay)
{
8002dd50:	eb cd 40 80 	pushm	r7,lr
8002dd54:	1a 97       	mov	r7,sp
8002dd56:	20 3d       	sub	sp,12
8002dd58:	ef 4c ff fc 	st.w	r7[-4],r12
8002dd5c:	16 99       	mov	r9,r11
8002dd5e:	14 98       	mov	r8,r10
8002dd60:	ef 69 ff f8 	st.b	r7[-8],r9
8002dd64:	ef 68 ff f4 	st.b	r7[-12],r8
  Assert(chip_select>3);
  switch(chip_select) {
8002dd68:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002dd6c:	58 18       	cp.w	r8,1
8002dd6e:	c1 40       	breq	8002dd96 <spi_set_chipselect_delay_bct+0x46>
8002dd70:	e0 89 00 05 	brgt	8002dd7a <spi_set_chipselect_delay_bct+0x2a>
8002dd74:	58 08       	cp.w	r8,0
8002dd76:	c0 70       	breq	8002dd84 <spi_set_chipselect_delay_bct+0x34>
8002dd78:	c2 98       	rjmp	8002ddca <spi_set_chipselect_delay_bct+0x7a>
8002dd7a:	58 28       	cp.w	r8,2
8002dd7c:	c1 60       	breq	8002dda8 <spi_set_chipselect_delay_bct+0x58>
8002dd7e:	58 38       	cp.w	r8,3
8002dd80:	c1 d0       	breq	8002ddba <spi_set_chipselect_delay_bct+0x6a>
8002dd82:	c2 48       	rjmp	8002ddca <spi_set_chipselect_delay_bct+0x7a>
    case 0:
      spi->CSR0.dlybct = delay;
8002dd84:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002dd88:	72 c8       	ld.w	r8,r9[0x30]
8002dd8a:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002dd8e:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002dd92:	93 c8       	st.w	r9[0x30],r8
      break;
8002dd94:	c1 b8       	rjmp	8002ddca <spi_set_chipselect_delay_bct+0x7a>
    case 1:
      spi->CSR1.dlybct  = delay;
8002dd96:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002dd9a:	72 d8       	ld.w	r8,r9[0x34]
8002dd9c:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002dda0:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002dda4:	93 d8       	st.w	r9[0x34],r8
      break;
8002dda6:	c1 28       	rjmp	8002ddca <spi_set_chipselect_delay_bct+0x7a>
    case 2:
      spi->CSR2.dlybct  = delay;
8002dda8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ddac:	72 e8       	ld.w	r8,r9[0x38]
8002ddae:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002ddb2:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002ddb6:	93 e8       	st.w	r9[0x38],r8
      break;
8002ddb8:	c0 98       	rjmp	8002ddca <spi_set_chipselect_delay_bct+0x7a>
    case 3:
      spi->CSR3.dlybct  = delay;
8002ddba:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ddbe:	72 f8       	ld.w	r8,r9[0x3c]
8002ddc0:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002ddc4:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002ddc8:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002ddca:	2f dd       	sub	sp,-12
8002ddcc:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ddd0 <spi_set_chipselect_delay_bs>:
 * \param chip_select Chip Select.
 * \param delay       Delay.
 */
static inline void spi_set_chipselect_delay_bs(volatile avr32_spi_t *spi,
                        uint8_t chip_select, uint8_t delay)
{
8002ddd0:	eb cd 40 80 	pushm	r7,lr
8002ddd4:	1a 97       	mov	r7,sp
8002ddd6:	20 3d       	sub	sp,12
8002ddd8:	ef 4c ff fc 	st.w	r7[-4],r12
8002dddc:	16 99       	mov	r9,r11
8002ddde:	14 98       	mov	r8,r10
8002dde0:	ef 69 ff f8 	st.b	r7[-8],r9
8002dde4:	ef 68 ff f4 	st.b	r7[-12],r8
  Assert(chip_select>3);
  switch(chip_select) {
8002dde8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002ddec:	58 18       	cp.w	r8,1
8002ddee:	c1 40       	breq	8002de16 <spi_set_chipselect_delay_bs+0x46>
8002ddf0:	e0 89 00 05 	brgt	8002ddfa <spi_set_chipselect_delay_bs+0x2a>
8002ddf4:	58 08       	cp.w	r8,0
8002ddf6:	c0 70       	breq	8002de04 <spi_set_chipselect_delay_bs+0x34>
8002ddf8:	c2 98       	rjmp	8002de4a <spi_set_chipselect_delay_bs+0x7a>
8002ddfa:	58 28       	cp.w	r8,2
8002ddfc:	c1 60       	breq	8002de28 <spi_set_chipselect_delay_bs+0x58>
8002ddfe:	58 38       	cp.w	r8,3
8002de00:	c1 d0       	breq	8002de3a <spi_set_chipselect_delay_bs+0x6a>
8002de02:	c2 48       	rjmp	8002de4a <spi_set_chipselect_delay_bs+0x7a>
    case 0:
      spi->CSR0.dlybs = delay;
8002de04:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002de08:	72 c8       	ld.w	r8,r9[0x30]
8002de0a:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002de0e:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002de12:	93 c8       	st.w	r9[0x30],r8
      break;
8002de14:	c1 b8       	rjmp	8002de4a <spi_set_chipselect_delay_bs+0x7a>
    case 1:
      spi->CSR1.dlybs  = delay;
8002de16:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002de1a:	72 d8       	ld.w	r8,r9[0x34]
8002de1c:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002de20:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002de24:	93 d8       	st.w	r9[0x34],r8
      break;
8002de26:	c1 28       	rjmp	8002de4a <spi_set_chipselect_delay_bs+0x7a>
    case 2:
      spi->CSR2.dlybs  = delay;
8002de28:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002de2c:	72 e8       	ld.w	r8,r9[0x38]
8002de2e:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002de32:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002de36:	93 e8       	st.w	r9[0x38],r8
      break;
8002de38:	c0 98       	rjmp	8002de4a <spi_set_chipselect_delay_bs+0x7a>
    case 3:
      spi->CSR3.dlybs  = delay;
8002de3a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002de3e:	72 f8       	ld.w	r8,r9[0x3c]
8002de40:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002de44:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002de48:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002de4a:	2f dd       	sub	sp,-12
8002de4c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002de50 <spi_set_bits_per_transfer>:
 * \param chip_select Chip Select.
 * \param len         Bits per Transfer [8...16].
 */
static inline void spi_set_bits_per_transfer(volatile avr32_spi_t *spi, uint8_t chip_select,
                        uint8_t len)
{
8002de50:	eb cd 40 80 	pushm	r7,lr
8002de54:	1a 97       	mov	r7,sp
8002de56:	20 3d       	sub	sp,12
8002de58:	ef 4c ff fc 	st.w	r7[-4],r12
8002de5c:	16 99       	mov	r9,r11
8002de5e:	14 98       	mov	r8,r10
8002de60:	ef 69 ff f8 	st.b	r7[-8],r9
8002de64:	ef 68 ff f4 	st.b	r7[-12],r8
  Assert((len>8)&&(len<16));
  switch(chip_select) {
8002de68:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002de6c:	58 18       	cp.w	r8,1
8002de6e:	c1 a0       	breq	8002dea2 <spi_set_bits_per_transfer+0x52>
8002de70:	e0 89 00 05 	brgt	8002de7a <spi_set_bits_per_transfer+0x2a>
8002de74:	58 08       	cp.w	r8,0
8002de76:	c0 70       	breq	8002de84 <spi_set_bits_per_transfer+0x34>
8002de78:	c4 18       	rjmp	8002defa <spi_set_bits_per_transfer+0xaa>
8002de7a:	58 28       	cp.w	r8,2
8002de7c:	c2 20       	breq	8002dec0 <spi_set_bits_per_transfer+0x70>
8002de7e:	58 38       	cp.w	r8,3
8002de80:	c2 f0       	breq	8002dede <spi_set_bits_per_transfer+0x8e>
8002de82:	c3 c8       	rjmp	8002defa <spi_set_bits_per_transfer+0xaa>
    case 0:
      spi->CSR0.bits = len - 8;
8002de84:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002de88:	20 88       	sub	r8,8
8002de8a:	5c 58       	castu.b	r8
8002de8c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002de90:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002de94:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002de98:	72 c8       	ld.w	r8,r9[0x30]
8002de9a:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002de9e:	93 c8       	st.w	r9[0x30],r8
      break;
8002dea0:	c2 d8       	rjmp	8002defa <spi_set_bits_per_transfer+0xaa>
    case 1:
      spi->CSR1.bits  = len - 8;
8002dea2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002dea6:	20 88       	sub	r8,8
8002dea8:	5c 58       	castu.b	r8
8002deaa:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002deae:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002deb2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002deb6:	72 d8       	ld.w	r8,r9[0x34]
8002deb8:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002debc:	93 d8       	st.w	r9[0x34],r8
      break;
8002debe:	c1 e8       	rjmp	8002defa <spi_set_bits_per_transfer+0xaa>
    case 2:
      spi->CSR2.bits  = len - 8;
8002dec0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002dec4:	20 88       	sub	r8,8
8002dec6:	5c 58       	castu.b	r8
8002dec8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002decc:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002ded0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ded4:	72 e8       	ld.w	r8,r9[0x38]
8002ded6:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002deda:	93 e8       	st.w	r9[0x38],r8
      break;
8002dedc:	c0 f8       	rjmp	8002defa <spi_set_bits_per_transfer+0xaa>
    case 3:
      spi->CSR3.bits  = len - 8;
8002dede:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002dee2:	20 88       	sub	r8,8
8002dee4:	5c 58       	castu.b	r8
8002dee6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002deea:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002deee:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002def2:	72 f8       	ld.w	r8,r9[0x3c]
8002def4:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002def8:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002defa:	2f dd       	sub	sp,-12
8002defc:	e3 cd 80 80 	ldm	sp++,r7,pc

8002df00 <spi_set_baudrate_register>:
 * \param chip_select Chip Select.
 * \param scbr        Baudrate Register.
 */
static inline void spi_set_baudrate_register(volatile avr32_spi_t *spi,uint8_t chip_select,
                        uint8_t scbr)
{
8002df00:	eb cd 40 80 	pushm	r7,lr
8002df04:	1a 97       	mov	r7,sp
8002df06:	20 3d       	sub	sp,12
8002df08:	ef 4c ff fc 	st.w	r7[-4],r12
8002df0c:	16 99       	mov	r9,r11
8002df0e:	14 98       	mov	r8,r10
8002df10:	ef 69 ff f8 	st.b	r7[-8],r9
8002df14:	ef 68 ff f4 	st.b	r7[-12],r8
  switch(chip_select) {
8002df18:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002df1c:	58 18       	cp.w	r8,1
8002df1e:	c1 40       	breq	8002df46 <spi_set_baudrate_register+0x46>
8002df20:	e0 89 00 05 	brgt	8002df2a <spi_set_baudrate_register+0x2a>
8002df24:	58 08       	cp.w	r8,0
8002df26:	c0 70       	breq	8002df34 <spi_set_baudrate_register+0x34>
8002df28:	c2 98       	rjmp	8002df7a <spi_set_baudrate_register+0x7a>
8002df2a:	58 28       	cp.w	r8,2
8002df2c:	c1 60       	breq	8002df58 <spi_set_baudrate_register+0x58>
8002df2e:	58 38       	cp.w	r8,3
8002df30:	c1 d0       	breq	8002df6a <spi_set_baudrate_register+0x6a>
8002df32:	c2 48       	rjmp	8002df7a <spi_set_baudrate_register+0x7a>
    case 0:
      spi->CSR0.scbr = scbr;
8002df34:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002df38:	72 c8       	ld.w	r8,r9[0x30]
8002df3a:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002df3e:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002df42:	93 c8       	st.w	r9[0x30],r8
      break;
8002df44:	c1 b8       	rjmp	8002df7a <spi_set_baudrate_register+0x7a>
    case 1:
      spi->CSR1.scbr  = scbr;
8002df46:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002df4a:	72 d8       	ld.w	r8,r9[0x34]
8002df4c:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002df50:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002df54:	93 d8       	st.w	r9[0x34],r8
      break;
8002df56:	c1 28       	rjmp	8002df7a <spi_set_baudrate_register+0x7a>
    case 2:
      spi->CSR2.scbr  = scbr;
8002df58:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002df5c:	72 e8       	ld.w	r8,r9[0x38]
8002df5e:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002df62:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002df66:	93 e8       	st.w	r9[0x38],r8
      break;
8002df68:	c0 98       	rjmp	8002df7a <spi_set_baudrate_register+0x7a>
    case 3:
      spi->CSR3.scbr  = scbr;
8002df6a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002df6e:	72 f8       	ld.w	r8,r9[0x3c]
8002df70:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002df74:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002df78:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002df7a:	2f dd       	sub	sp,-12
8002df7c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002df80 <spi_enable_active_mode>:
 *
 * \param spi         Base address of the SPI instance.
 * \param chip_select Chip Select.
 */
static inline void spi_enable_active_mode(volatile avr32_spi_t *spi,uint8_t chip_select)
{
8002df80:	eb cd 40 80 	pushm	r7,lr
8002df84:	1a 97       	mov	r7,sp
8002df86:	20 2d       	sub	sp,8
8002df88:	ef 4c ff fc 	st.w	r7[-4],r12
8002df8c:	16 98       	mov	r8,r11
8002df8e:	ef 68 ff f8 	st.b	r7[-8],r8
  switch(chip_select) {
8002df92:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002df96:	58 18       	cp.w	r8,1
8002df98:	c1 30       	breq	8002dfbe <spi_enable_active_mode+0x3e>
8002df9a:	e0 89 00 05 	brgt	8002dfa4 <spi_enable_active_mode+0x24>
8002df9e:	58 08       	cp.w	r8,0
8002dfa0:	c0 70       	breq	8002dfae <spi_enable_active_mode+0x2e>
8002dfa2:	c2 58       	rjmp	8002dfec <spi_enable_active_mode+0x6c>
8002dfa4:	58 28       	cp.w	r8,2
8002dfa6:	c1 40       	breq	8002dfce <spi_enable_active_mode+0x4e>
8002dfa8:	58 38       	cp.w	r8,3
8002dfaa:	c1 a0       	breq	8002dfde <spi_enable_active_mode+0x5e>
8002dfac:	c2 08       	rjmp	8002dfec <spi_enable_active_mode+0x6c>
    case 0:
      spi->CSR0.csaat = 1;
8002dfae:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002dfb2:	72 c8       	ld.w	r8,r9[0x30]
8002dfb4:	30 1a       	mov	r10,1
8002dfb6:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002dfba:	93 c8       	st.w	r9[0x30],r8
      break;
8002dfbc:	c1 88       	rjmp	8002dfec <spi_enable_active_mode+0x6c>
    case 1:
      spi->CSR1.csaat  = 1;
8002dfbe:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002dfc2:	72 d8       	ld.w	r8,r9[0x34]
8002dfc4:	30 1a       	mov	r10,1
8002dfc6:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002dfca:	93 d8       	st.w	r9[0x34],r8
      break;
8002dfcc:	c1 08       	rjmp	8002dfec <spi_enable_active_mode+0x6c>
    case 2:
      spi->CSR2.csaat  = 1;
8002dfce:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002dfd2:	72 e8       	ld.w	r8,r9[0x38]
8002dfd4:	30 1a       	mov	r10,1
8002dfd6:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002dfda:	93 e8       	st.w	r9[0x38],r8
      break;
8002dfdc:	c0 88       	rjmp	8002dfec <spi_enable_active_mode+0x6c>
    case 3:
      spi->CSR3.csaat  = 1;
8002dfde:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002dfe2:	72 f8       	ld.w	r8,r9[0x3c]
8002dfe4:	30 1a       	mov	r10,1
8002dfe6:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002dfea:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002dfec:	2f ed       	sub	sp,-8
8002dfee:	e3 cd 80 80 	ldm	sp++,r7,pc

8002dff2 <spi_set_mode>:
 * \param chip_select Chip Select.
 * \param flags       SPI Mode.
 */
static inline void spi_set_mode(volatile avr32_spi_t *spi,uint8_t chip_select,
                        uint8_t flags)
{
8002dff2:	eb cd 40 80 	pushm	r7,lr
8002dff6:	1a 97       	mov	r7,sp
8002dff8:	20 3d       	sub	sp,12
8002dffa:	ef 4c ff fc 	st.w	r7[-4],r12
8002dffe:	16 99       	mov	r9,r11
8002e000:	14 98       	mov	r8,r10
8002e002:	ef 69 ff f8 	st.b	r7[-8],r9
8002e006:	ef 68 ff f4 	st.b	r7[-12],r8
  switch(chip_select) {
8002e00a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002e00e:	58 18       	cp.w	r8,1
8002e010:	c2 70       	breq	8002e05e <spi_set_mode+0x6c>
8002e012:	e0 89 00 05 	brgt	8002e01c <spi_set_mode+0x2a>
8002e016:	58 08       	cp.w	r8,0
8002e018:	c0 70       	breq	8002e026 <spi_set_mode+0x34>
8002e01a:	c7 58       	rjmp	8002e104 <spi_set_mode+0x112>
8002e01c:	58 28       	cp.w	r8,2
8002e01e:	c3 c0       	breq	8002e096 <spi_set_mode+0xa4>
8002e020:	58 38       	cp.w	r8,3
8002e022:	c5 60       	breq	8002e0ce <spi_set_mode+0xdc>
8002e024:	c7 08       	rjmp	8002e104 <spi_set_mode+0x112>
    case 0:
      spi->CSR0.cpol = flags >> 1;
8002e026:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002e02a:	a1 98       	lsr	r8,0x1
8002e02c:	5c 58       	castu.b	r8
8002e02e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002e032:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002e036:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002e03a:	72 c8       	ld.w	r8,r9[0x30]
8002e03c:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002e040:	93 c8       	st.w	r9[0x30],r8
      spi->CSR0.ncpha = (flags & 0x1) ^ 0x1;
8002e042:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002e046:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002e04a:	5f 08       	sreq	r8
8002e04c:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002e050:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002e054:	72 c8       	ld.w	r8,r9[0x30]
8002e056:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002e05a:	93 c8       	st.w	r9[0x30],r8
      break;
8002e05c:	c5 48       	rjmp	8002e104 <spi_set_mode+0x112>
    case 1:
      spi->CSR1.cpol  = flags >> 1;
8002e05e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002e062:	a1 98       	lsr	r8,0x1
8002e064:	5c 58       	castu.b	r8
8002e066:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002e06a:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002e06e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002e072:	72 d8       	ld.w	r8,r9[0x34]
8002e074:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002e078:	93 d8       	st.w	r9[0x34],r8
      spi->CSR1.ncpha = (flags & 0x1) ^ 0x1;
8002e07a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002e07e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002e082:	5f 08       	sreq	r8
8002e084:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002e088:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002e08c:	72 d8       	ld.w	r8,r9[0x34]
8002e08e:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002e092:	93 d8       	st.w	r9[0x34],r8
      break;
8002e094:	c3 88       	rjmp	8002e104 <spi_set_mode+0x112>
    case 2:
      spi->CSR2.cpol  = flags >> 1;
8002e096:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002e09a:	a1 98       	lsr	r8,0x1
8002e09c:	5c 58       	castu.b	r8
8002e09e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002e0a2:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002e0a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002e0aa:	72 e8       	ld.w	r8,r9[0x38]
8002e0ac:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002e0b0:	93 e8       	st.w	r9[0x38],r8
      spi->CSR2.ncpha = (flags & 0x1) ^ 0x1;
8002e0b2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002e0b6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002e0ba:	5f 08       	sreq	r8
8002e0bc:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002e0c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002e0c4:	72 e8       	ld.w	r8,r9[0x38]
8002e0c6:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002e0ca:	93 e8       	st.w	r9[0x38],r8
      break;
8002e0cc:	c1 c8       	rjmp	8002e104 <spi_set_mode+0x112>
    case 3:
      spi->CSR3.cpol  = flags >> 1;
8002e0ce:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002e0d2:	a1 98       	lsr	r8,0x1
8002e0d4:	5c 58       	castu.b	r8
8002e0d6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002e0da:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002e0de:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002e0e2:	72 f8       	ld.w	r8,r9[0x3c]
8002e0e4:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002e0e8:	93 f8       	st.w	r9[0x3c],r8
      spi->CSR3.ncpha = (flags & 0x1) ^ 0x1;
8002e0ea:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002e0ee:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002e0f2:	5f 08       	sreq	r8
8002e0f4:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002e0f8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002e0fc:	72 f8       	ld.w	r8,r9[0x3c]
8002e0fe:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002e102:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002e104:	2f dd       	sub	sp,-12
8002e106:	e3 cd 80 80 	ldm	sp++,r7,pc

8002e10a <spi_put>:
 * \param spi Base address of the SPI instance.
 * \param data The data byte to be loaded 
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
8002e10a:	eb cd 40 80 	pushm	r7,lr
8002e10e:	1a 97       	mov	r7,sp
8002e110:	20 2d       	sub	sp,8
8002e112:	ef 4c ff fc 	st.w	r7[-4],r12
8002e116:	16 98       	mov	r8,r11
8002e118:	ef 58 ff f8 	st.h	r7[-8],r8
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
8002e11c:	ef 19 ff f8 	ld.uh	r9,r7[-8]
8002e120:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002e124:	91 39       	st.w	r8[0xc],r9
}
8002e126:	2f ed       	sub	sp,-8
8002e128:	e3 cd 80 80 	ldm	sp++,r7,pc

8002e12c <spi_get>:
 * \param spi Base address of the SPI instance.
 * \return The data byte 
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
8002e12c:	eb cd 40 80 	pushm	r7,lr
8002e130:	1a 97       	mov	r7,sp
8002e132:	20 1d       	sub	sp,4
8002e134:	ef 4c ff fc 	st.w	r7[-4],r12
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
8002e138:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002e13c:	70 28       	ld.w	r8,r8[0x8]
8002e13e:	5c 88       	casts.h	r8
}
8002e140:	10 9c       	mov	r12,r8
8002e142:	2f fd       	sub	sp,-4
8002e144:	e3 cd 80 80 	ldm	sp++,r7,pc

8002e148 <spi_is_tx_ready>:
 * \return Status.
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
8002e148:	eb cd 40 80 	pushm	r7,lr
8002e14c:	1a 97       	mov	r7,sp
8002e14e:	20 1d       	sub	sp,4
8002e150:	ef 4c ff fc 	st.w	r7[-4],r12
  return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
8002e154:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002e158:	70 48       	ld.w	r8,r8[0x10]
8002e15a:	e2 18 00 02 	andl	r8,0x2,COH
8002e15e:	5f 18       	srne	r8
8002e160:	5c 58       	castu.b	r8
}
8002e162:	10 9c       	mov	r12,r8
8002e164:	2f fd       	sub	sp,-4
8002e166:	e3 cd 80 80 	ldm	sp++,r7,pc

8002e16a <spi_is_rx_ready>:
 * \param spi Base address of the SPI instance.
 *
 * \return \c 1 if the SPI Receiver is ready, otherwise \c 0.
 */
static inline bool spi_is_rx_ready(volatile avr32_spi_t *spi)
{
8002e16a:	eb cd 40 80 	pushm	r7,lr
8002e16e:	1a 97       	mov	r7,sp
8002e170:	20 1d       	sub	sp,4
8002e172:	ef 4c ff fc 	st.w	r7[-4],r12
  return (spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) ==
8002e176:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002e17a:	70 48       	ld.w	r8,r8[0x10]
8002e17c:	e2 18 02 01 	andl	r8,0x201,COH
8002e180:	e0 48 02 01 	cp.w	r8,513
8002e184:	5f 08       	sreq	r8
8002e186:	5c 58       	castu.b	r8
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK);
}
8002e188:	10 9c       	mov	r12,r8
8002e18a:	2f fd       	sub	sp,-4
8002e18c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002e190 <spi_write_single>:
 * \param spi    Base address of the SPI instance.
 * \param data   Data to write
 *
 */
static inline void spi_write_single(volatile avr32_spi_t *spi, uint8_t data)
{
8002e190:	eb cd 40 c0 	pushm	r6-r7,lr
8002e194:	1a 97       	mov	r7,sp
8002e196:	20 2d       	sub	sp,8
8002e198:	48 86       	lddpc	r6,8002e1b8 <spi_write_single+0x28>
8002e19a:	1e 26       	rsub	r6,pc
8002e19c:	ef 4c ff fc 	st.w	r7[-4],r12
8002e1a0:	16 98       	mov	r8,r11
8002e1a2:	ef 68 ff f8 	st.b	r7[-8],r8
	spi_put(spi,(uint16_t)data);
8002e1a6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002e1aa:	10 9b       	mov	r11,r8
8002e1ac:	ee fc ff fc 	ld.w	r12,r7[-4]
8002e1b0:	ca df       	rcall	8002e10a <spi_put>
}
8002e1b2:	2f ed       	sub	sp,-8
8002e1b4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002e1b8:	80 02       	ld.sh	r2,r0[0x0]
8002e1ba:	e0 1e eb cd 	andl	lr,0xebcd

8002e1bc <spi_read_single>:
 * \param spi    Base address of the SPI instance.
 * \param data   Data to read
 *
 */
static inline void spi_read_single(volatile avr32_spi_t *spi, uint8_t *data)
{
8002e1bc:	eb cd 40 c0 	pushm	r6-r7,lr
8002e1c0:	1a 97       	mov	r7,sp
8002e1c2:	20 2d       	sub	sp,8
8002e1c4:	48 96       	lddpc	r6,8002e1e8 <spi_read_single+0x2c>
8002e1c6:	1e 26       	rsub	r6,pc
8002e1c8:	ef 4c ff fc 	st.w	r7[-4],r12
8002e1cc:	ef 4b ff f8 	st.w	r7[-8],r11
	*data = (uint8_t)spi_get(spi);
8002e1d0:	ee fc ff fc 	ld.w	r12,r7[-4]
8002e1d4:	ca cf       	rcall	8002e12c <spi_get>
8002e1d6:	18 98       	mov	r8,r12
8002e1d8:	5c 88       	casts.h	r8
8002e1da:	5c 58       	castu.b	r8
8002e1dc:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002e1e0:	b2 88       	st.b	r9[0x0],r8
}
8002e1e2:	2f ed       	sub	sp,-8
8002e1e4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002e1e8:	80 02       	ld.sh	r2,r0[0x0]
8002e1ea:	e0 4a eb cd 	cp.w	r10,60365

8002e1ec <spi_master_setup_device>:


void spi_master_setup_device(volatile avr32_spi_t *spi, struct spi_device *device, 
     spi_flags_t flags, uint32_t baud_rate,
     board_spi_select_id_t sel_id)
{
8002e1ec:	eb cd 40 c0 	pushm	r6-r7,lr
8002e1f0:	1a 97       	mov	r7,sp
8002e1f2:	20 5d       	sub	sp,20
8002e1f4:	4a 76       	lddpc	r6,8002e290 <spi_master_setup_device+0xa4>
8002e1f6:	1e 26       	rsub	r6,pc
8002e1f8:	ef 4c ff fc 	st.w	r7[-4],r12
8002e1fc:	ef 4b ff f8 	st.w	r7[-8],r11
8002e200:	ef 49 ff f0 	st.w	r7[-16],r9
8002e204:	14 99       	mov	r9,r10
8002e206:	ef 69 ff f4 	st.b	r7[-12],r9
8002e20a:	ef 68 ff ec 	st.b	r7[-20],r8
  spi_set_chipselect_delay_bct(spi,device->id,CONFIG_SPI_MASTER_DELAY_BCT);
8002e20e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002e212:	11 88       	ld.ub	r8,r8[0x0]
8002e214:	30 0a       	mov	r10,0
8002e216:	10 9b       	mov	r11,r8
8002e218:	ee fc ff fc 	ld.w	r12,r7[-4]
8002e21c:	fe b0 fd 9a 	rcall	8002dd50 <spi_set_chipselect_delay_bct>
  spi_set_chipselect_delay_bs(spi,device->id,CONFIG_SPI_MASTER_DELAY_BS);
8002e220:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002e224:	11 88       	ld.ub	r8,r8[0x0]
8002e226:	30 0a       	mov	r10,0
8002e228:	10 9b       	mov	r11,r8
8002e22a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002e22e:	fe b0 fd d1 	rcall	8002ddd0 <spi_set_chipselect_delay_bs>
  spi_set_bits_per_transfer(spi,device->id,CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
8002e232:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002e236:	11 88       	ld.ub	r8,r8[0x0]
8002e238:	30 8a       	mov	r10,8
8002e23a:	10 9b       	mov	r11,r8
8002e23c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002e240:	c0 8e       	rcall	8002de50 <spi_set_bits_per_transfer>
  spi_set_baudrate_register(spi,device->id,getBaudDiv(baud_rate, sysclk_get_pba_hz()));
8002e242:	fe b0 fd 7b 	rcall	8002dd38 <sysclk_get_pba_hz>
8002e246:	18 98       	mov	r8,r12
8002e248:	10 9b       	mov	r11,r8
8002e24a:	ee fc ff f0 	ld.w	r12,r7[-16]
8002e24e:	f0 16 01 29 	mcall	r6[1188]
8002e252:	18 98       	mov	r8,r12
8002e254:	5c 58       	castu.b	r8
8002e256:	10 99       	mov	r9,r8
8002e258:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002e25c:	11 88       	ld.ub	r8,r8[0x0]
8002e25e:	12 9a       	mov	r10,r9
8002e260:	10 9b       	mov	r11,r8
8002e262:	ee fc ff fc 	ld.w	r12,r7[-4]
8002e266:	c4 de       	rcall	8002df00 <spi_set_baudrate_register>
  spi_enable_active_mode(spi,device->id);
8002e268:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002e26c:	11 88       	ld.ub	r8,r8[0x0]
8002e26e:	10 9b       	mov	r11,r8
8002e270:	ee fc ff fc 	ld.w	r12,r7[-4]
8002e274:	c8 6e       	rcall	8002df80 <spi_enable_active_mode>
  spi_set_mode(spi,device->id,flags);
8002e276:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8002e27a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002e27e:	11 88       	ld.ub	r8,r8[0x0]
8002e280:	12 9a       	mov	r10,r9
8002e282:	10 9b       	mov	r11,r8
8002e284:	ee fc ff fc 	ld.w	r12,r7[-4]
8002e288:	cb 5e       	rcall	8002dff2 <spi_set_mode>
    {
      while(1);
    }
  }
#endif
}
8002e28a:	2f bd       	sub	sp,-20
8002e28c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002e290:	80 02       	ld.sh	r2,r0[0x0]
8002e292:	e0 7a eb cd 	mov	r10,125901

8002e294 <spi_read_packet>:

status_code_t spi_read_packet(volatile avr32_spi_t *spi,uint8_t *data, size_t len)
{
8002e294:	eb cd 40 c0 	pushm	r6-r7,lr
8002e298:	1a 97       	mov	r7,sp
8002e29a:	20 6d       	sub	sp,24
8002e29c:	4b 66       	lddpc	r6,8002e374 <spi_read_packet+0xe0>
8002e29e:	1e 26       	rsub	r6,pc
8002e2a0:	ef 4c ff f0 	st.w	r7[-16],r12
8002e2a4:	ef 4b ff ec 	st.w	r7[-20],r11
8002e2a8:	ef 4a ff e8 	st.w	r7[-24],r10
  unsigned int timeout = SPI_TIMEOUT;
8002e2ac:	e0 68 3a 98 	mov	r8,15000
8002e2b0:	ef 48 ff f8 	st.w	r7[-8],r8
  uint8_t val;  
  size_t i=0;  
8002e2b4:	30 08       	mov	r8,0
8002e2b6:	ef 48 ff fc 	st.w	r7[-4],r8
  while(len) {
8002e2ba:	c5 48       	rjmp	8002e362 <spi_read_packet+0xce>
  	 timeout = SPI_TIMEOUT;
8002e2bc:	e0 68 3a 98 	mov	r8,15000
8002e2c0:	ef 48 ff f8 	st.w	r7[-8],r8
     while (!spi_is_tx_ready(spi)) {
8002e2c4:	c0 f8       	rjmp	8002e2e2 <spi_read_packet+0x4e>
       if (!timeout--) {
8002e2c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002e2ca:	58 08       	cp.w	r8,0
8002e2cc:	5f 08       	sreq	r8
8002e2ce:	5c 58       	castu.b	r8
8002e2d0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002e2d4:	20 19       	sub	r9,1
8002e2d6:	ef 49 ff f8 	st.w	r7[-8],r9
8002e2da:	58 08       	cp.w	r8,0
8002e2dc:	c0 30       	breq	8002e2e2 <spi_read_packet+0x4e>
         return ERR_TIMEOUT;
8002e2de:	3f d8       	mov	r8,-3
8002e2e0:	c4 68       	rjmp	8002e36c <spi_read_packet+0xd8>
  unsigned int timeout = SPI_TIMEOUT;
  uint8_t val;  
  size_t i=0;  
  while(len) {
  	 timeout = SPI_TIMEOUT;
     while (!spi_is_tx_ready(spi)) {
8002e2e2:	ee fc ff f0 	ld.w	r12,r7[-16]
8002e2e6:	c3 1f       	rcall	8002e148 <spi_is_tx_ready>
8002e2e8:	18 98       	mov	r8,r12
8002e2ea:	ec 18 00 01 	eorl	r8,0x1
8002e2ee:	5c 58       	castu.b	r8
8002e2f0:	ce b1       	brne	8002e2c6 <spi_read_packet+0x32>
       if (!timeout--) {
         return ERR_TIMEOUT;
       }
     }
     spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
8002e2f2:	e0 6b 00 ff 	mov	r11,255
8002e2f6:	ee fc ff f0 	ld.w	r12,r7[-16]
8002e2fa:	c4 bf       	rcall	8002e190 <spi_write_single>
     timeout = SPI_TIMEOUT;
8002e2fc:	e0 68 3a 98 	mov	r8,15000
8002e300:	ef 48 ff f8 	st.w	r7[-8],r8
     while (!spi_is_rx_ready(spi)) {
8002e304:	c0 f8       	rjmp	8002e322 <spi_read_packet+0x8e>
       if (!timeout--) {
8002e306:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002e30a:	58 08       	cp.w	r8,0
8002e30c:	5f 08       	sreq	r8
8002e30e:	5c 58       	castu.b	r8
8002e310:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002e314:	20 19       	sub	r9,1
8002e316:	ef 49 ff f8 	st.w	r7[-8],r9
8002e31a:	58 08       	cp.w	r8,0
8002e31c:	c0 30       	breq	8002e322 <spi_read_packet+0x8e>
         return ERR_TIMEOUT;
8002e31e:	3f d8       	mov	r8,-3
8002e320:	c2 68       	rjmp	8002e36c <spi_read_packet+0xd8>
         return ERR_TIMEOUT;
       }
     }
     spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
     timeout = SPI_TIMEOUT;
     while (!spi_is_rx_ready(spi)) {
8002e322:	ee fc ff f0 	ld.w	r12,r7[-16]
8002e326:	c2 2f       	rcall	8002e16a <spi_is_rx_ready>
8002e328:	18 98       	mov	r8,r12
8002e32a:	ec 18 00 01 	eorl	r8,0x1
8002e32e:	5c 58       	castu.b	r8
8002e330:	ce b1       	brne	8002e306 <spi_read_packet+0x72>
       if (!timeout--) {
         return ERR_TIMEOUT;
       }
     }
     spi_read_single(spi,&val);
8002e332:	ee c8 00 09 	sub	r8,r7,9
8002e336:	10 9b       	mov	r11,r8
8002e338:	ee fc ff f0 	ld.w	r12,r7[-16]
8002e33c:	c4 0f       	rcall	8002e1bc <spi_read_single>
     data[i] = val;
8002e33e:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002e342:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002e346:	10 09       	add	r9,r8
8002e348:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8002e34c:	b2 88       	st.b	r9[0x0],r8
     i++;
8002e34e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002e352:	2f f8       	sub	r8,-1
8002e354:	ef 48 ff fc 	st.w	r7[-4],r8
     len--;
8002e358:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002e35c:	20 18       	sub	r8,1
8002e35e:	ef 48 ff e8 	st.w	r7[-24],r8
status_code_t spi_read_packet(volatile avr32_spi_t *spi,uint8_t *data, size_t len)
{
  unsigned int timeout = SPI_TIMEOUT;
  uint8_t val;  
  size_t i=0;  
  while(len) {
8002e362:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002e366:	58 08       	cp.w	r8,0
8002e368:	ca a1       	brne	8002e2bc <spi_read_packet+0x28>
     spi_read_single(spi,&val);
     data[i] = val;
     i++;
     len--;
  }
  return STATUS_OK;
8002e36a:	30 08       	mov	r8,0
}
8002e36c:	10 9c       	mov	r12,r8
8002e36e:	2f ad       	sub	sp,-24
8002e370:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002e374:	80 02       	ld.sh	r2,r0[0x0]
8002e376:	e1 22 eb cd 	ld.sb	r2,r0[-5171]

8002e378 <spi_write_packet>:

status_code_t spi_write_packet(volatile avr32_spi_t *spi, const uint8_t *data, size_t len)
{
8002e378:	eb cd 40 c0 	pushm	r6-r7,lr
8002e37c:	1a 97       	mov	r7,sp
8002e37e:	20 6d       	sub	sp,24
8002e380:	4a 76       	lddpc	r6,8002e41c <spi_write_packet+0xa4>
8002e382:	1e 26       	rsub	r6,pc
8002e384:	ef 4c ff f0 	st.w	r7[-16],r12
8002e388:	ef 4b ff ec 	st.w	r7[-20],r11
8002e38c:	ef 4a ff e8 	st.w	r7[-24],r10
  unsigned int timeout = SPI_TIMEOUT;
8002e390:	e0 68 3a 98 	mov	r8,15000
8002e394:	ef 48 ff f4 	st.w	r7[-12],r8
  size_t i=0;
8002e398:	30 08       	mov	r8,0
8002e39a:	ef 48 ff f8 	st.w	r7[-8],r8
  uint8_t val;
  while(len) {
8002e39e:	c3 58       	rjmp	8002e408 <spi_write_packet+0x90>
     timeout = SPI_TIMEOUT;
8002e3a0:	e0 68 3a 98 	mov	r8,15000
8002e3a4:	ef 48 ff f4 	st.w	r7[-12],r8
     while (!spi_is_tx_ready(spi)) {
8002e3a8:	c0 f8       	rjmp	8002e3c6 <spi_write_packet+0x4e>
       if (!timeout--) {
8002e3aa:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e3ae:	58 08       	cp.w	r8,0
8002e3b0:	5f 08       	sreq	r8
8002e3b2:	5c 58       	castu.b	r8
8002e3b4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002e3b8:	20 19       	sub	r9,1
8002e3ba:	ef 49 ff f4 	st.w	r7[-12],r9
8002e3be:	58 08       	cp.w	r8,0
8002e3c0:	c0 30       	breq	8002e3c6 <spi_write_packet+0x4e>
         return ERR_TIMEOUT;
8002e3c2:	3f d8       	mov	r8,-3
8002e3c4:	c2 78       	rjmp	8002e412 <spi_write_packet+0x9a>
  unsigned int timeout = SPI_TIMEOUT;
  size_t i=0;
  uint8_t val;
  while(len) {
     timeout = SPI_TIMEOUT;
     while (!spi_is_tx_ready(spi)) {
8002e3c6:	ee fc ff f0 	ld.w	r12,r7[-16]
8002e3ca:	cb fe       	rcall	8002e148 <spi_is_tx_ready>
8002e3cc:	18 98       	mov	r8,r12
8002e3ce:	ec 18 00 01 	eorl	r8,0x1
8002e3d2:	5c 58       	castu.b	r8
8002e3d4:	ce b1       	brne	8002e3aa <spi_write_packet+0x32>
       if (!timeout--) {
         return ERR_TIMEOUT;
       }
     }
     val = data[i];     
8002e3d6:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002e3da:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002e3de:	f2 08 00 08 	add	r8,r9,r8
8002e3e2:	11 88       	ld.ub	r8,r8[0x0]
8002e3e4:	ef 68 ff ff 	st.b	r7[-1],r8
     spi_write_single(spi,val);
8002e3e8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002e3ec:	10 9b       	mov	r11,r8
8002e3ee:	ee fc ff f0 	ld.w	r12,r7[-16]
8002e3f2:	cc fe       	rcall	8002e190 <spi_write_single>
     i++;
8002e3f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002e3f8:	2f f8       	sub	r8,-1
8002e3fa:	ef 48 ff f8 	st.w	r7[-8],r8
     len--;
8002e3fe:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002e402:	20 18       	sub	r8,1
8002e404:	ef 48 ff e8 	st.w	r7[-24],r8
status_code_t spi_write_packet(volatile avr32_spi_t *spi, const uint8_t *data, size_t len)
{
  unsigned int timeout = SPI_TIMEOUT;
  size_t i=0;
  uint8_t val;
  while(len) {
8002e408:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002e40c:	58 08       	cp.w	r8,0
8002e40e:	cc 91       	brne	8002e3a0 <spi_write_packet+0x28>
     val = data[i];     
     spi_write_single(spi,val);
     i++;
     len--;
  }
  return STATUS_OK;
8002e410:	30 08       	mov	r8,0
}
8002e412:	10 9c       	mov	r12,r8
8002e414:	2f ad       	sub	sp,-24
8002e416:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002e41a:	00 00       	add	r0,r0
8002e41c:	80 02       	ld.sh	r2,r0[0x0]
8002e41e:	e2 06       	*unknown*

8002e420 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8002e420:	eb cd 40 c0 	pushm	r6-r7,lr
8002e424:	1a 97       	mov	r7,sp
8002e426:	20 6d       	sub	sp,24
8002e428:	49 e6       	lddpc	r6,8002e4a0 <interpolate+0x80>
8002e42a:	1e 26       	rsub	r6,pc
8002e42c:	ef 4c ff f8 	st.w	r7[-8],r12
8002e430:	ef 4b ff f4 	st.w	r7[-12],r11
8002e434:	ef 4a ff f0 	st.w	r7[-16],r10
8002e438:	ef 49 ff ec 	st.w	r7[-20],r9
8002e43c:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8002e440:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002e444:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002e448:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8002e44c:	c0 41       	brne	8002e454 <interpolate+0x34>
	{
		return y1;
8002e44e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002e452:	c2 38       	rjmp	8002e498 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8002e454:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002e458:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002e45c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8002e460:	ee fa ff f8 	ld.w	r10,r7[-8]
8002e464:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e468:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8002e46c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002e470:	ee fa ff f0 	ld.w	r10,r7[-16]
8002e474:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002e478:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8002e47c:	12 9b       	mov	r11,r9
8002e47e:	10 9c       	mov	r12,r8
8002e480:	f0 16 00 08 	mcall	r6[32]
8002e484:	18 98       	mov	r8,r12
8002e486:	10 99       	mov	r9,r8
8002e488:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002e48c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8002e490:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8002e494:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8002e498:	10 9c       	mov	r12,r8
8002e49a:	2f ad       	sub	sp,-24
8002e49c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002e4a0:	80 02       	ld.sh	r2,r0[0x0]
8002e4a2:	e2 ae       	*unknown*

8002e4a4 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8002e4a4:	eb cd 40 c0 	pushm	r6-r7,lr
8002e4a8:	1a 97       	mov	r7,sp
8002e4aa:	20 3d       	sub	sp,12
8002e4ac:	49 06       	lddpc	r6,8002e4ec <mav_array_memcpy+0x48>
8002e4ae:	1e 26       	rsub	r6,pc
8002e4b0:	ef 4c ff fc 	st.w	r7[-4],r12
8002e4b4:	ef 4b ff f8 	st.w	r7[-8],r11
8002e4b8:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8002e4bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002e4c0:	58 08       	cp.w	r8,0
8002e4c2:	c0 91       	brne	8002e4d4 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8002e4c4:	ee fa ff f4 	ld.w	r10,r7[-12]
8002e4c8:	30 0b       	mov	r11,0
8002e4ca:	ee fc ff fc 	ld.w	r12,r7[-4]
8002e4ce:	f0 16 00 31 	mcall	r6[196]
8002e4d2:	c0 98       	rjmp	8002e4e4 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8002e4d4:	ee fa ff f4 	ld.w	r10,r7[-12]
8002e4d8:	ee fb ff f8 	ld.w	r11,r7[-8]
8002e4dc:	ee fc ff fc 	ld.w	r12,r7[-4]
8002e4e0:	f0 16 00 1b 	mcall	r6[108]
	}
}
8002e4e4:	2f dd       	sub	sp,-12
8002e4e6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002e4ea:	00 00       	add	r0,r0
8002e4ec:	80 02       	ld.sh	r2,r0[0x0]
8002e4ee:	e3 32 eb cd 	ld.ub	r2,r1[-5171]

8002e4f0 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
8002e4f0:	eb cd 40 80 	pushm	r7,lr
8002e4f4:	1a 97       	mov	r7,sp
8002e4f6:	20 1d       	sub	sp,4
8002e4f8:	18 98       	mov	r8,r12
8002e4fa:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002e4fe:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002e502:	58 38       	cp.w	r8,3
8002e504:	c1 20       	breq	8002e528 <osc_get_rate+0x38>
8002e506:	e0 89 00 07 	brgt	8002e514 <osc_get_rate+0x24>
8002e50a:	58 08       	cp.w	r8,0
8002e50c:	c0 90       	breq	8002e51e <osc_get_rate+0x2e>
8002e50e:	58 28       	cp.w	r8,2
8002e510:	c0 f0       	breq	8002e52e <osc_get_rate+0x3e>
8002e512:	c1 b8       	rjmp	8002e548 <osc_get_rate+0x58>
8002e514:	58 48       	cp.w	r8,4
8002e516:	c1 10       	breq	8002e538 <osc_get_rate+0x48>
8002e518:	58 58       	cp.w	r8,5
8002e51a:	c1 40       	breq	8002e542 <osc_get_rate+0x52>
8002e51c:	c1 68       	rjmp	8002e548 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8002e51e:	e0 68 24 00 	mov	r8,9216
8002e522:	ea 18 00 f4 	orh	r8,0xf4
8002e526:	c1 28       	rjmp	8002e54a <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8002e528:	e0 68 80 00 	mov	r8,32768
8002e52c:	c0 f8       	rjmp	8002e54a <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8002e52e:	e0 68 12 00 	mov	r8,4608
8002e532:	ea 18 00 7a 	orh	r8,0x7a
8002e536:	c0 a8       	rjmp	8002e54a <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8002e538:	e0 68 0e 00 	mov	r8,3584
8002e53c:	ea 18 07 27 	orh	r8,0x727
8002e540:	c0 58       	rjmp	8002e54a <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8002e542:	e0 78 c1 38 	mov	r8,115000
8002e546:	c0 28       	rjmp	8002e54a <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
8002e548:	30 08       	mov	r8,0
	}
}
8002e54a:	10 9c       	mov	r12,r8
8002e54c:	2f fd       	sub	sp,-4
8002e54e:	e3 cd 80 80 	ldm	sp++,r7,pc

8002e552 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8002e552:	eb cd 40 c0 	pushm	r6-r7,lr
8002e556:	1a 97       	mov	r7,sp
8002e558:	48 56       	lddpc	r6,8002e56c <sysclk_get_main_hz+0x1a>
8002e55a:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8002e55c:	30 0c       	mov	r12,0
8002e55e:	cc 9f       	rcall	8002e4f0 <osc_get_rate>
8002e560:	18 98       	mov	r8,r12
8002e562:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8002e564:	10 9c       	mov	r12,r8
8002e566:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002e56a:	00 00       	add	r0,r0
8002e56c:	80 02       	ld.sh	r2,r0[0x0]
8002e56e:	e3 de       	*unknown*

8002e570 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8002e570:	eb cd 40 c0 	pushm	r6-r7,lr
8002e574:	1a 97       	mov	r7,sp
8002e576:	48 46       	lddpc	r6,8002e584 <sysclk_get_cpu_hz+0x14>
8002e578:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8002e57a:	ce cf       	rcall	8002e552 <sysclk_get_main_hz>
8002e57c:	18 98       	mov	r8,r12
}
8002e57e:	10 9c       	mov	r12,r8
8002e580:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002e584:	80 02       	ld.sh	r2,r0[0x0]
8002e586:	e3 fc eb cd 	st.wqs	r1[0x734],r12

8002e588 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
8002e588:	eb cd 40 c0 	pushm	r6-r7,lr
8002e58c:	1a 97       	mov	r7,sp
8002e58e:	20 1d       	sub	sp,4
8002e590:	49 06       	lddpc	r6,8002e5d0 <sleepmgr_init+0x48>
8002e592:	1e 26       	rsub	r6,pc
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8002e594:	30 08       	mov	r8,0
8002e596:	ef 68 ff ff 	st.b	r7[-1],r8
8002e59a:	c0 d8       	rjmp	8002e5b4 <sleepmgr_init+0x2c>
		sleepmgr_locks[i] = 0;
8002e59c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002e5a0:	ec fa 04 14 	ld.w	r10,r6[1044]
8002e5a4:	30 08       	mov	r8,0
8002e5a6:	f4 09 0b 08 	st.b	r10[r9],r8
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8002e5aa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002e5ae:	2f f8       	sub	r8,-1
8002e5b0:	ef 68 ff ff 	st.b	r7[-1],r8
8002e5b4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002e5b8:	30 58       	mov	r8,5
8002e5ba:	f0 09 18 00 	cp.b	r9,r8
8002e5be:	fe 98 ff ef 	brls	8002e59c <sleepmgr_init+0x14>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
8002e5c2:	ec f9 04 14 	ld.w	r9,r6[1044]
8002e5c6:	30 18       	mov	r8,1
8002e5c8:	b2 e8       	st.b	r9[0x6],r8
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8002e5ca:	2f fd       	sub	sp,-4
8002e5cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002e5d0:	80 02       	ld.sh	r2,r0[0x0]
8002e5d2:	e4 16 42 6f 	andh	r6,0x426f
8002e5d6:	61 72       	ld.w	r2,r0[0x5c]
8002e5d8:	64 20       	ld.w	r0,r2[0x8]
8002e5da:	69 6e       	ld.w	lr,r4[0x58]
8002e5dc:	69 74       	ld.w	r4,r4[0x5c]
8002e5de:	69 61       	ld.w	r1,r4[0x58]
8002e5e0:	6c 69       	ld.w	r9,r6[0x18]
8002e5e2:	73 65       	ld.w	r5,r9[0x58]
8002e5e4:	64 2e       	ld.w	lr,r2[0x8]
8002e5e6:	0a 00       	add	r0,r5

8002e5e8 <initialise_board>:
#include "bmp085.h"
#include "analog_monitor.h"

//static volatile board_hardware_t board_hardware;

void initialise_board(central_data_t *centralData) {
8002e5e8:	eb cd 40 e0 	pushm	r5-r7,lr
8002e5ec:	1a 97       	mov	r7,sp
8002e5ee:	20 3d       	sub	sp,12
8002e5f0:	4f 66       	lddpc	r6,8002e7c8 <initialise_board+0x1e0>
8002e5f2:	1e 26       	rsub	r6,pc
8002e5f4:	ef 4c ff f4 	st.w	r7[-12],r12
	int i;
	enum GPS_Engine_Setting engine_nav_settings = GPS_ENGINE_AIRBORNE_4G;
8002e5f8:	30 88       	mov	r8,8
8002e5fa:	ef 48 ff fc 	st.w	r7[-4],r8

	irq_initialize_vectors();
8002e5fe:	f0 16 01 23 	mcall	r6[1164]
	cpu_irq_enable();
8002e602:	d5 03       	csrf	0x10
	Disable_global_interrupt();
8002e604:	d3 03       	ssrf	0x10
		
	// Initialize the sleep manager
	sleepmgr_init();
8002e606:	cc 1f       	rcall	8002e588 <sleepmgr_init>
	sysclk_init();
8002e608:	f0 16 01 53 	mcall	r6[1356]
	board_init();
8002e60c:	f0 16 01 af 	mcall	r6[1724]
	delay_init(sysclk_get_cpu_hz());
8002e610:	cb 0f       	rcall	8002e570 <sysclk_get_cpu_hz>
8002e612:	18 98       	mov	r8,r12
8002e614:	10 9c       	mov	r12,r8
8002e616:	f0 16 01 c0 	mcall	r6[1792]
	init_time_keeper();
8002e61a:	f0 16 02 07 	mcall	r6[2076]
		
	INTC_init_interrupts();
8002e61e:	f0 16 01 23 	mcall	r6[1164]
		
		
	if (init_i2c(0)!=STATUS_OK) {
8002e622:	30 0c       	mov	r12,0
8002e624:	f0 16 00 ea 	mcall	r6[936]
8002e628:	18 98       	mov	r8,r12
8002e62a:	58 08       	cp.w	r8,0
8002e62c:	c0 20       	breq	8002e630 <initialise_board+0x48>
		//putstring(STDOUT, "Error initialising I2C\n");
		while (1==1);
8002e62e:	c0 08       	rjmp	8002e62e <initialise_board+0x46>
		} else {
		//putstring(STDOUT, "initialised I2C.\n");
	};
	if (init_i2c(1)!=STATUS_OK) {
8002e630:	30 1c       	mov	r12,1
8002e632:	f0 16 00 ea 	mcall	r6[936]
8002e636:	18 98       	mov	r8,r12
8002e638:	58 08       	cp.w	r8,0
8002e63a:	c0 20       	breq	8002e63e <initialise_board+0x56>
		//putstring(STDOUT, "Error initialising I2C\n");
		while (1==1);
8002e63c:	c0 08       	rjmp	8002e63c <initialise_board+0x54>
		} else {
		//putstring(STDOUT, "initialised I2C.\n");
	};

	LED_Off(LED1);
8002e63e:	30 2c       	mov	r12,2
8002e640:	f0 16 01 73 	mcall	r6[1484]
	// Configure the pins connected to LEDs as output and set their default
	// initial state to high (LEDs off).
	//gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
	//gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);

	init_Servos();
8002e644:	f0 16 02 2e 	mcall	r6[2232]
	set_servos(&servo_failsafe);
8002e648:	ec fc 08 c4 	ld.w	r12,r6[2244]
8002e64c:	f0 16 00 b0 	mcall	r6[704]
	
		
	init_UART_int(0);
8002e650:	30 0c       	mov	r12,0
8002e652:	f0 16 00 ac 	mcall	r6[688]
	register_write_stream(get_UART_handle(0), &(centralData->xbee_out_stream));
8002e656:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e65a:	f0 c5 fa 44 	sub	r5,r8,-1468
8002e65e:	30 0c       	mov	r12,0
8002e660:	f0 16 00 6d 	mcall	r6[436]
8002e664:	18 98       	mov	r8,r12
8002e666:	0a 9b       	mov	r11,r5
8002e668:	10 9c       	mov	r12,r8
8002e66a:	f0 16 00 dc 	mcall	r6[880]
				
		
	init_UART_int(3);
8002e66e:	30 3c       	mov	r12,3
8002e670:	f0 16 00 ac 	mcall	r6[688]
	make_buffered_stream(&(centralData->gps_buffer), &(centralData->gps_stream_in));
8002e674:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e678:	f0 c9 f8 e0 	sub	r9,r8,-1824
8002e67c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e680:	f0 c8 f9 e4 	sub	r8,r8,-1564
8002e684:	12 9b       	mov	r11,r9
8002e686:	10 9c       	mov	r12,r8
8002e688:	f0 16 01 76 	mcall	r6[1496]
	register_read_stream(get_UART_handle(3), &(centralData->gps_stream_in));
8002e68c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e690:	f0 c5 f8 e0 	sub	r5,r8,-1824
8002e694:	30 3c       	mov	r12,3
8002e696:	f0 16 00 6d 	mcall	r6[436]
8002e69a:	18 98       	mov	r8,r12
8002e69c:	0a 9b       	mov	r11,r5
8002e69e:	10 9c       	mov	r12,r8
8002e6a0:	f0 16 00 ca 	mcall	r6[808]
	register_write_stream(get_UART_handle(3), &(centralData->gps_stream_out));
8002e6a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e6a8:	f0 c5 f8 c8 	sub	r5,r8,-1848
8002e6ac:	30 3c       	mov	r12,3
8002e6ae:	f0 16 00 6d 	mcall	r6[436]
8002e6b2:	18 98       	mov	r8,r12
8002e6b4:	0a 9b       	mov	r11,r5
8002e6b6:	10 9c       	mov	r12,r8
8002e6b8:	f0 16 00 dc 	mcall	r6[880]
		
	init_UART_int(4);
8002e6bc:	30 4c       	mov	r12,4
8002e6be:	f0 16 00 ac 	mcall	r6[688]
	register_write_stream(get_UART_handle(4), &(centralData->wired_out_stream));
8002e6c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e6c6:	f0 c5 fa 14 	sub	r5,r8,-1516
8002e6ca:	30 4c       	mov	r12,4
8002e6cc:	f0 16 00 6d 	mcall	r6[436]
8002e6d0:	18 98       	mov	r8,r12
8002e6d2:	0a 9b       	mov	r11,r5
8002e6d4:	10 9c       	mov	r12,r8
8002e6d6:	f0 16 00 dc 	mcall	r6[880]


	make_buffered_stream_lossy(&(centralData->xbee_in_buffer), &(centralData->xbee_in_stream));
8002e6da:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e6de:	f0 c9 fa 2c 	sub	r9,r8,-1492
8002e6e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e6e6:	f0 c8 fc 4c 	sub	r8,r8,-948
8002e6ea:	12 9b       	mov	r11,r9
8002e6ec:	10 9c       	mov	r12,r8
8002e6ee:	f0 16 00 f8 	mcall	r6[992]
	make_buffered_stream_lossy(&(centralData->wired_in_buffer), &(centralData->wired_in_stream));
8002e6f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e6f6:	f0 c9 f9 fc 	sub	r9,r8,-1540
8002e6fa:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e6fe:	f0 c8 fb 49 	sub	r8,r8,-1207
8002e702:	12 9b       	mov	r11,r9
8002e704:	10 9c       	mov	r12,r8
8002e706:	f0 16 00 f8 	mcall	r6[992]
	register_read_stream(get_UART_handle(4), &(centralData->wired_in_stream));
8002e70a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e70e:	f0 c5 f9 fc 	sub	r5,r8,-1540
8002e712:	30 4c       	mov	r12,4
8002e714:	f0 16 00 6d 	mcall	r6[436]
8002e718:	18 98       	mov	r8,r12
8002e71a:	0a 9b       	mov	r11,r5
8002e71c:	10 9c       	mov	r12,r8
8002e71e:	f0 16 00 ca 	mcall	r6[808]
	register_read_stream(get_UART_handle(0), &(centralData->xbee_in_stream));
8002e722:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e726:	f0 c5 fa 2c 	sub	r5,r8,-1492
8002e72a:	30 0c       	mov	r12,0
8002e72c:	f0 16 00 6d 	mcall	r6[436]
8002e730:	18 98       	mov	r8,r12
8002e732:	0a 9b       	mov	r11,r5
8002e734:	10 9c       	mov	r12,r8
8002e736:	f0 16 00 ca 	mcall	r6[808]

		
	// connect abstracted aliases to hardware ports


	centralData->telemetry_down_stream=&(centralData->xbee_out_stream);
8002e73a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e73e:	f0 c9 fa 44 	sub	r9,r8,-1468
8002e742:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e746:	f1 49 0a 44 	st.w	r8[2628],r9
	centralData->telemetry_up_stream=&(centralData->xbee_in_stream);
8002e74a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e74e:	f0 c9 fa 2c 	sub	r9,r8,-1492
8002e752:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e756:	f1 49 0a 48 	st.w	r8[2632],r9
	centralData->debug_out_stream=&(centralData->wired_out_stream);
8002e75a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e75e:	f0 c9 fa 14 	sub	r9,r8,-1516
8002e762:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e766:	f1 49 0a 4c 	st.w	r8[2636],r9
	centralData->debug_in_stream=&(centralData->wired_in_stream);
8002e76a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e76e:	f0 c9 f9 fc 	sub	r9,r8,-1540
8002e772:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e776:	f1 49 0a 50 	st.w	r8[2640],r9
	centralData->telemetry_up_stream  =&(centralData->wired_in_stream);		
	centralData->debug_out_stream     =&(centralData->xbee_out_stream);
	centralData->debug_in_stream      =&(centralData->xbee_in_stream);
*/

	init_analog_monitor();
8002e77a:	f0 16 01 cb 	mcall	r6[1836]
	// init mavlink
	init_mavlink(centralData->telemetry_down_stream, centralData->telemetry_up_stream, MAVLINK_SYS_ID);
8002e77e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e782:	f0 f9 0a 48 	ld.w	r9,r8[2632]
8002e786:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e78a:	f0 f8 0a 44 	ld.w	r8,r8[2628]
8002e78e:	32 ca       	mov	r10,44
8002e790:	12 9b       	mov	r11,r9
8002e792:	10 9c       	mov	r12,r8
8002e794:	f0 16 01 d8 	mcall	r6[1888]
		
	// init debug output
	dbg_print_init(centralData->debug_out_stream);
8002e798:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e79c:	f0 f8 0a 4c 	ld.w	r8,r8[2636]
8002e7a0:	10 9c       	mov	r12,r8
8002e7a2:	f0 16 01 6d 	mcall	r6[1460]
		
	init_imu(&(centralData->imu1));
8002e7a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e7aa:	10 9c       	mov	r12,r8
8002e7ac:	f0 16 01 79 	mcall	r6[1508]
	init_bmp085();
8002e7b0:	f0 16 01 f3 	mcall	r6[1996]

	rc_init();
8002e7b4:	f0 16 01 42 	mcall	r6[1288]


	Enable_global_interrupt();
8002e7b8:	d5 03       	csrf	0x10
	dbg_print("Board initialised.\n");
8002e7ba:	fe cc 01 e6 	sub	r12,pc,486
8002e7be:	f0 16 00 01 	mcall	r6[4]
}
8002e7c2:	2f dd       	sub	sp,-12
8002e7c4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8002e7c8:	80 02       	ld.sh	r2,r0[0x0]
8002e7ca:	e4 76 eb cd 	mov	r6,388045

8002e7cc <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8002e7cc:	eb cd 40 c0 	pushm	r6-r7,lr
8002e7d0:	1a 97       	mov	r7,sp
8002e7d2:	20 6d       	sub	sp,24
8002e7d4:	49 e6       	lddpc	r6,8002e84c <interpolate+0x80>
8002e7d6:	1e 26       	rsub	r6,pc
8002e7d8:	ef 4c ff f8 	st.w	r7[-8],r12
8002e7dc:	ef 4b ff f4 	st.w	r7[-12],r11
8002e7e0:	ef 4a ff f0 	st.w	r7[-16],r10
8002e7e4:	ef 49 ff ec 	st.w	r7[-20],r9
8002e7e8:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8002e7ec:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002e7f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002e7f4:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8002e7f8:	c0 41       	brne	8002e800 <interpolate+0x34>
	{
		return y1;
8002e7fa:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002e7fe:	c2 38       	rjmp	8002e844 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8002e800:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002e804:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002e808:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8002e80c:	ee fa ff f8 	ld.w	r10,r7[-8]
8002e810:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002e814:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8002e818:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002e81c:	ee fa ff f0 	ld.w	r10,r7[-16]
8002e820:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002e824:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8002e828:	12 9b       	mov	r11,r9
8002e82a:	10 9c       	mov	r12,r8
8002e82c:	f0 16 00 08 	mcall	r6[32]
8002e830:	18 98       	mov	r8,r12
8002e832:	10 99       	mov	r9,r8
8002e834:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002e838:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8002e83c:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8002e840:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8002e844:	10 9c       	mov	r12,r8
8002e846:	2f ad       	sub	sp,-24
8002e848:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002e84c:	80 02       	ld.sh	r2,r0[0x0]
8002e84e:	e6 5a eb cd 	cp.w	r10,519117

8002e850 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8002e850:	eb cd 40 c0 	pushm	r6-r7,lr
8002e854:	1a 97       	mov	r7,sp
8002e856:	20 3d       	sub	sp,12
8002e858:	49 06       	lddpc	r6,8002e898 <mav_array_memcpy+0x48>
8002e85a:	1e 26       	rsub	r6,pc
8002e85c:	ef 4c ff fc 	st.w	r7[-4],r12
8002e860:	ef 4b ff f8 	st.w	r7[-8],r11
8002e864:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8002e868:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002e86c:	58 08       	cp.w	r8,0
8002e86e:	c0 91       	brne	8002e880 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8002e870:	ee fa ff f4 	ld.w	r10,r7[-12]
8002e874:	30 0b       	mov	r11,0
8002e876:	ee fc ff fc 	ld.w	r12,r7[-4]
8002e87a:	f0 16 00 31 	mcall	r6[196]
8002e87e:	c0 98       	rjmp	8002e890 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8002e880:	ee fa ff f4 	ld.w	r10,r7[-12]
8002e884:	ee fb ff f8 	ld.w	r11,r7[-8]
8002e888:	ee fc ff fc 	ld.w	r12,r7[-4]
8002e88c:	f0 16 00 1b 	mcall	r6[108]
	}
}
8002e890:	2f dd       	sub	sp,-12
8002e892:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002e896:	00 00       	add	r0,r0
8002e898:	80 02       	ld.sh	r2,r0[0x0]
8002e89a:	e6 de 44 65 	satsub.w	lr,r3,17509
8002e89e:	62 75       	ld.w	r5,r1[0x1c]
8002e8a0:	67 20       	ld.w	r0,r3[0x48]
8002e8a2:	73 74       	ld.w	r4,r9[0x5c]
8002e8a4:	72 65       	ld.w	r5,r9[0x18]
8002e8a6:	61 6d       	ld.w	sp,r0[0x58]
8002e8a8:	20 69       	sub	r9,6
8002e8aa:	6e 69       	ld.w	r9,r7[0x18]
8002e8ac:	74 69       	ld.w	r9,r10[0x18]
8002e8ae:	61 6c       	ld.w	r12,r0[0x58]
8002e8b0:	69 73       	ld.w	r3,r4[0x5c]
8002e8b2:	65 64       	ld.w	r4,r2[0x58]
8002e8b4:	0a 00       	add	r0,r5

8002e8b6 <initialisation>:
#include "orca.h"
//#include "flashvault.h"

central_data_t *centralData;

void initialisation() {
8002e8b6:	eb cd 40 c0 	pushm	r6-r7,lr
8002e8ba:	1a 97       	mov	r7,sp
8002e8bc:	20 2d       	sub	sp,8
8002e8be:	4e 36       	lddpc	r6,8002ea48 <initialisation+0x192>
8002e8c0:	1e 26       	rsub	r6,pc
	int i;
	enum GPS_Engine_Setting engine_nav_settings = GPS_ENGINE_AIRBORNE_4G;
8002e8c2:	30 88       	mov	r8,8
8002e8c4:	ef 48 ff fc 	st.w	r7[-4],r8

	centralData = get_central_data();
8002e8c8:	f0 16 00 33 	mcall	r6[204]
8002e8cc:	18 99       	mov	r9,r12
8002e8ce:	ec f8 00 00 	ld.w	r8,r6[0]
8002e8d2:	91 09       	st.w	r8[0x0],r9
	initialise_board(centralData);
8002e8d4:	ec f8 00 00 	ld.w	r8,r6[0]
8002e8d8:	70 08       	ld.w	r8,r8[0x0]
8002e8da:	10 9c       	mov	r12,r8
8002e8dc:	f0 16 02 2b 	mcall	r6[2220]
	initialise_central_data();
8002e8e0:	f0 16 01 c2 	mcall	r6[1800]
	

	init_radar_modules();
8002e8e4:	f0 16 01 74 	mcall	r6[1488]
	dbg_print("Debug stream initialised\n");
8002e8e8:	fe cc 00 4c 	sub	r12,pc,76
8002e8ec:	f0 16 00 01 	mcall	r6[4]

	//init_gps_ubx(engine_nav_settings);
	
	set_servos(&servo_failsafe);
8002e8f0:	ec fc 08 c0 	ld.w	r12,r6[2240]
8002e8f4:	f0 16 00 b0 	mcall	r6[704]
	
	//delay_ms(1000);
	init_stabilisation();
8002e8f8:	f0 16 01 96 	mcall	r6[1624]
	
	init_onboard_parameters();
8002e8fc:	f0 16 01 f0 	mcall	r6[1984]
	init_mavlink_actions();
8002e900:	f0 16 01 e0 	mcall	r6[1920]
	init_pos_integration(&centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);
8002e904:	ec f8 00 00 	ld.w	r8,r6[0]
8002e908:	70 08       	ld.w	r8,r8[0x0]
8002e90a:	f0 ca f8 b0 	sub	r10,r8,-1872
8002e90e:	ec f8 00 00 	ld.w	r8,r6[0]
8002e912:	70 08       	ld.w	r8,r8[0x0]
8002e914:	f0 c9 f2 f4 	sub	r9,r8,-3340
8002e918:	ec f8 00 00 	ld.w	r8,r6[0]
8002e91c:	70 08       	ld.w	r8,r8[0x0]
8002e91e:	f0 c8 f6 7c 	sub	r8,r8,-2436
8002e922:	12 9b       	mov	r11,r9
8002e924:	10 9c       	mov	r12,r8
8002e926:	f0 16 01 7b 	mcall	r6[1516]
	
	centralData->imu1.attitude.calibration_level=LEVELING;	
8002e92a:	ec f8 00 00 	ld.w	r8,r6[0]
8002e92e:	70 09       	ld.w	r9,r8[0x0]
8002e930:	30 18       	mov	r8,1
8002e932:	f3 68 00 b8 	st.b	r9[184],r8
	centralData->mav_state = MAV_STATE_CALIBRATING;
8002e936:	ec f8 00 00 	ld.w	r8,r6[0]
8002e93a:	70 09       	ld.w	r9,r8[0x0]
8002e93c:	30 28       	mov	r8,2
8002e93e:	f3 68 0d 06 	st.b	r9[3334],r8
	centralData->mav_mode = MAV_MODE_PREFLIGHT;
8002e942:	ec f8 00 00 	ld.w	r8,r6[0]
8002e946:	70 09       	ld.w	r9,r8[0x0]
8002e948:	30 08       	mov	r8,0
8002e94a:	f3 68 0d 05 	st.b	r9[3333],r8

//	calibrate_Gyros(&centralData->imu1);
	for (i=400; i>0; i--) {
8002e94e:	e0 68 01 90 	mov	r8,400
8002e952:	ef 48 ff f8 	st.w	r7[-8],r8
8002e956:	c2 68       	rjmp	8002e9a2 <initialisation+0xec>
		imu_get_raw_data(&(centralData->imu1));
8002e958:	ec f8 00 00 	ld.w	r8,r6[0]
8002e95c:	70 08       	ld.w	r8,r8[0x0]
8002e95e:	10 9c       	mov	r12,r8
8002e960:	f0 16 00 9d 	mcall	r6[628]
		imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);	
8002e964:	ec f8 00 00 	ld.w	r8,r6[0]
8002e968:	70 08       	ld.w	r8,r8[0x0]
8002e96a:	f0 c9 f8 b0 	sub	r9,r8,-1872
8002e96e:	ec f8 00 00 	ld.w	r8,r6[0]
8002e972:	70 08       	ld.w	r8,r8[0x0]
8002e974:	f0 ca f2 f4 	sub	r10,r8,-3340
8002e978:	ec f8 00 00 	ld.w	r8,r6[0]
8002e97c:	70 08       	ld.w	r8,r8[0x0]
8002e97e:	f0 cb f6 7c 	sub	r11,r8,-2436
8002e982:	ec f8 00 00 	ld.w	r8,r6[0]
8002e986:	70 08       	ld.w	r8,r8[0x0]
8002e988:	10 9c       	mov	r12,r8
8002e98a:	f0 16 00 9e 	mcall	r6[632]
		mavlink_protocol_update();	
8002e98e:	f0 16 00 e9 	mcall	r6[932]
		delay_ms(5);
8002e992:	30 5c       	mov	r12,5
8002e994:	f0 16 01 0a 	mcall	r6[1064]
	centralData->imu1.attitude.calibration_level=LEVELING;	
	centralData->mav_state = MAV_STATE_CALIBRATING;
	centralData->mav_mode = MAV_MODE_PREFLIGHT;

//	calibrate_Gyros(&centralData->imu1);
	for (i=400; i>0; i--) {
8002e998:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002e99c:	20 18       	sub	r8,1
8002e99e:	ef 48 ff f8 	st.w	r7[-8],r8
8002e9a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002e9a6:	58 08       	cp.w	r8,0
8002e9a8:	e0 8c 00 04 	brvs	8002e9b0 <initialisation+0xfa>
8002e9ac:	fe 99 ff d6 	brgt	8002e958 <initialisation+0xa2>
	for (i=100; i>0; i--) {
		imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);	
		mavlink_protocol_update();			
		delay_ms(5);
	}*/
	centralData->imu1.attitude.calibration_level=OFF;
8002e9b0:	ec f8 00 00 	ld.w	r8,r6[0]
8002e9b4:	70 09       	ld.w	r9,r8[0x0]
8002e9b6:	30 08       	mov	r8,0
8002e9b8:	f3 68 00 b8 	st.b	r9[184],r8
	//reset position estimate
	for (i=0; i<3; i++) {
8002e9bc:	30 08       	mov	r8,0
8002e9be:	ef 48 ff f8 	st.w	r7[-8],r8
8002e9c2:	c2 48       	rjmp	8002ea0a <initialisation+0x154>
		// clean acceleration estimate without gravity:
		centralData->position_estimator.vel_bf[i]=0.0;
8002e9c4:	ec f8 00 00 	ld.w	r8,r6[0]
8002e9c8:	70 08       	ld.w	r8,r8[0x0]
8002e9ca:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002e9ce:	f2 c9 fd 94 	sub	r9,r9,-620
8002e9d2:	30 0a       	mov	r10,0
8002e9d4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		centralData->position_estimator.vel[i]=0.0;
8002e9d8:	ec f8 00 00 	ld.w	r8,r6[0]
8002e9dc:	70 08       	ld.w	r8,r8[0x0]
8002e9de:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002e9e2:	f2 c9 fd 91 	sub	r9,r9,-623
8002e9e6:	30 0a       	mov	r10,0
8002e9e8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		centralData->position_estimator.localPosition.pos[i]=0.0;
8002e9ec:	ec f8 00 00 	ld.w	r8,r6[0]
8002e9f0:	70 08       	ld.w	r8,r8[0x0]
8002e9f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002e9f6:	f2 c9 fd 87 	sub	r9,r9,-633
8002e9fa:	30 0a       	mov	r10,0
8002e9fc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		mavlink_protocol_update();			
		delay_ms(5);
	}*/
	centralData->imu1.attitude.calibration_level=OFF;
	//reset position estimate
	for (i=0; i<3; i++) {
8002ea00:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ea04:	2f f8       	sub	r8,-1
8002ea06:	ef 48 ff f8 	st.w	r7[-8],r8
8002ea0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ea0e:	58 28       	cp.w	r8,2
8002ea10:	fe 9a ff da 	brle	8002e9c4 <initialisation+0x10e>
		// clean acceleration estimate without gravity:
		centralData->position_estimator.vel_bf[i]=0.0;
		centralData->position_estimator.vel[i]=0.0;
		centralData->position_estimator.localPosition.pos[i]=0.0;
	}
	centralData->mav_state = MAV_STATE_STANDBY;
8002ea14:	ec f8 00 00 	ld.w	r8,r6[0]
8002ea18:	70 09       	ld.w	r9,r8[0x0]
8002ea1a:	30 38       	mov	r8,3
8002ea1c:	f3 68 0d 06 	st.b	r9[3334],r8
	centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
8002ea20:	ec f8 00 00 	ld.w	r8,r6[0]
8002ea24:	70 09       	ld.w	r9,r8[0x0]
8002ea26:	34 08       	mov	r8,64
8002ea28:	f3 68 0d 05 	st.b	r9[3333],r8
	init_nav();
8002ea2c:	f0 16 01 c9 	mcall	r6[1828]
	init_waypoint_handler();
8002ea30:	f0 16 01 65 	mcall	r6[1428]
	//e_init();
	
	init_neighbors();
8002ea34:	f0 16 01 97 	mcall	r6[1628]
	init_orca();
8002ea38:	f0 16 02 14 	mcall	r6[2128]
	
	LED_On(LED1);
8002ea3c:	30 2c       	mov	r12,2
8002ea3e:	f0 16 01 4e 	mcall	r6[1336]
}
8002ea42:	2f ed       	sub	sp,-8
8002ea44:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ea48:	80 02       	ld.sh	r2,r0[0x0]
8002ea4a:	e7 44 eb cd 	st.w	r3[-5171],r4

8002ea4c <main>:



void main (void)
{
8002ea4c:	eb cd 40 c0 	pushm	r6-r7,lr
8002ea50:	1a 97       	mov	r7,sp
8002ea52:	48 b6       	lddpc	r6,8002ea7c <main+0x30>
8002ea54:	1e 26       	rsub	r6,pc
	
	initialisation();
8002ea56:	f0 16 01 e4 	mcall	r6[1936]
	
	create_tasks();
8002ea5a:	f0 16 02 20 	mcall	r6[2176]
	
	// turn on simulation mode: 1: simulation mode, 0: reality
	centralData->simulation_mode = 0;
8002ea5e:	ec f8 00 00 	ld.w	r8,r6[0]
8002ea62:	70 08       	ld.w	r8,r8[0x0]
8002ea64:	30 09       	mov	r9,0
8002ea66:	f1 49 0d 08 	st.w	r8[3336],r9
	// main loop
	
	while (1==1) {
		
		//run_scheduler_update(get_main_taskset(), FIXED_PRIORITY);
		run_scheduler_update(get_main_taskset(), ROUND_ROBIN);
8002ea6a:	f0 16 01 0b 	mcall	r6[1068]
8002ea6e:	18 98       	mov	r8,r12
8002ea70:	30 0b       	mov	r11,0
8002ea72:	10 9c       	mov	r12,r8
8002ea74:	f0 16 00 f4 	mcall	r6[976]
		
		//LED_On(LED1);

		
	}		
8002ea78:	cf 9b       	rjmp	8002ea6a <main+0x1e>
8002ea7a:	00 00       	add	r0,r0
8002ea7c:	80 02       	ld.sh	r2,r0[0x0]
8002ea7e:	e8 d8 d4 21 	satsub.w	r8,r4,-11231

8002ea80 <cos>:
8002ea80:	d4 21       	pushm	r4-r7,lr
8002ea82:	20 4d       	sub	sp,16
8002ea84:	e0 6e 21 fb 	mov	lr,8699
8002ea88:	ea 1e 3f e9 	orh	lr,0x3fe9
8002ea8c:	14 98       	mov	r8,r10
8002ea8e:	16 99       	mov	r9,r11
8002ea90:	16 95       	mov	r5,r11
8002ea92:	14 96       	mov	r6,r10
8002ea94:	16 97       	mov	r7,r11
8002ea96:	16 94       	mov	r4,r11
8002ea98:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8002ea9c:	1c 3c       	cp.w	r12,lr
8002ea9e:	e0 89 00 05 	brgt	8002eaa8 <cos+0x28>
8002eaa2:	30 08       	mov	r8,0
8002eaa4:	30 09       	mov	r9,0
8002eaa6:	c1 a8       	rjmp	8002eada <cos+0x5a>
8002eaa8:	e0 65 ff ff 	mov	r5,65535
8002eaac:	ea 15 7f ef 	orh	r5,0x7fef
8002eab0:	0a 3c       	cp.w	r12,r5
8002eab2:	e0 8a 00 05 	brle	8002eabc <cos+0x3c>
8002eab6:	e0 a0 1a 49 	rcall	80031f48 <__avr32_f64_sub>
8002eaba:	c2 68       	rjmp	8002eb06 <cos+0x86>
8002eabc:	1a 9c       	mov	r12,sp
8002eabe:	e0 a0 0b 91 	rcall	800301e0 <__ieee754_rem_pio2>
8002eac2:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
8002eac6:	58 1c       	cp.w	r12,1
8002eac8:	c0 c0       	breq	8002eae0 <cos+0x60>
8002eaca:	58 2c       	cp.w	r12,2
8002eacc:	c1 10       	breq	8002eaee <cos+0x6e>
8002eace:	fa e8 00 08 	ld.d	r8,sp[8]
8002ead2:	fa ea 00 00 	ld.d	r10,sp[0]
8002ead6:	58 0c       	cp.w	r12,0
8002ead8:	c1 41       	brne	8002eb00 <cos+0x80>
8002eada:	e0 a0 10 b7 	rcall	80030c48 <__kernel_cos>
8002eade:	c1 48       	rjmp	8002eb06 <cos+0x86>
8002eae0:	fa e8 00 08 	ld.d	r8,sp[8]
8002eae4:	fa ea 00 00 	ld.d	r10,sp[0]
8002eae8:	e0 a0 15 14 	rcall	80031510 <__kernel_sin>
8002eaec:	c0 78       	rjmp	8002eafa <cos+0x7a>
8002eaee:	fa e8 00 08 	ld.d	r8,sp[8]
8002eaf2:	fa ea 00 00 	ld.d	r10,sp[0]
8002eaf6:	e0 a0 10 a9 	rcall	80030c48 <__kernel_cos>
8002eafa:	ee 1b 80 00 	eorh	r11,0x8000
8002eafe:	c0 48       	rjmp	8002eb06 <cos+0x86>
8002eb00:	30 1c       	mov	r12,1
8002eb02:	e0 a0 15 07 	rcall	80031510 <__kernel_sin>
8002eb06:	2f cd       	sub	sp,-16
8002eb08:	d8 22       	popm	r4-r7,pc
8002eb0a:	d7 03       	nop

8002eb0c <sin>:
8002eb0c:	d4 21       	pushm	r4-r7,lr
8002eb0e:	20 4d       	sub	sp,16
8002eb10:	e0 6e 21 fb 	mov	lr,8699
8002eb14:	ea 1e 3f e9 	orh	lr,0x3fe9
8002eb18:	14 98       	mov	r8,r10
8002eb1a:	16 99       	mov	r9,r11
8002eb1c:	16 95       	mov	r5,r11
8002eb1e:	14 96       	mov	r6,r10
8002eb20:	16 97       	mov	r7,r11
8002eb22:	16 94       	mov	r4,r11
8002eb24:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8002eb28:	1c 3c       	cp.w	r12,lr
8002eb2a:	e0 89 00 06 	brgt	8002eb36 <sin+0x2a>
8002eb2e:	30 0c       	mov	r12,0
8002eb30:	30 08       	mov	r8,0
8002eb32:	30 09       	mov	r9,0
8002eb34:	c1 b8       	rjmp	8002eb6a <sin+0x5e>
8002eb36:	e0 65 ff ff 	mov	r5,65535
8002eb3a:	ea 15 7f ef 	orh	r5,0x7fef
8002eb3e:	0a 3c       	cp.w	r12,r5
8002eb40:	e0 8a 00 05 	brle	8002eb4a <sin+0x3e>
8002eb44:	e0 a0 1a 02 	rcall	80031f48 <__avr32_f64_sub>
8002eb48:	c2 78       	rjmp	8002eb96 <sin+0x8a>
8002eb4a:	1a 9c       	mov	r12,sp
8002eb4c:	e0 a0 0b 4a 	rcall	800301e0 <__ieee754_rem_pio2>
8002eb50:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
8002eb54:	58 1c       	cp.w	r12,1
8002eb56:	c0 d0       	breq	8002eb70 <sin+0x64>
8002eb58:	58 2c       	cp.w	r12,2
8002eb5a:	c1 20       	breq	8002eb7e <sin+0x72>
8002eb5c:	fa e8 00 08 	ld.d	r8,sp[8]
8002eb60:	fa ea 00 00 	ld.d	r10,sp[0]
8002eb64:	58 0c       	cp.w	r12,0
8002eb66:	c1 41       	brne	8002eb8e <sin+0x82>
8002eb68:	30 1c       	mov	r12,1
8002eb6a:	e0 a0 14 d3 	rcall	80031510 <__kernel_sin>
8002eb6e:	c1 48       	rjmp	8002eb96 <sin+0x8a>
8002eb70:	fa e8 00 08 	ld.d	r8,sp[8]
8002eb74:	fa ea 00 00 	ld.d	r10,sp[0]
8002eb78:	e0 a0 10 68 	rcall	80030c48 <__kernel_cos>
8002eb7c:	c0 d8       	rjmp	8002eb96 <sin+0x8a>
8002eb7e:	30 1c       	mov	r12,1
8002eb80:	fa e8 00 08 	ld.d	r8,sp[8]
8002eb84:	fa ea 00 00 	ld.d	r10,sp[0]
8002eb88:	e0 a0 14 c4 	rcall	80031510 <__kernel_sin>
8002eb8c:	c0 38       	rjmp	8002eb92 <sin+0x86>
8002eb8e:	e0 a0 10 5d 	rcall	80030c48 <__kernel_cos>
8002eb92:	ee 1b 80 00 	eorh	r11,0x8000
8002eb96:	2f cd       	sub	sp,-16
8002eb98:	d8 22       	popm	r4-r7,pc
8002eb9a:	d7 03       	nop

8002eb9c <asin>:
8002eb9c:	d4 31       	pushm	r0-r7,lr
8002eb9e:	20 9d       	sub	sp,36
8002eba0:	4a 17       	lddpc	r7,8002ec24 <asin+0x88>
8002eba2:	14 94       	mov	r4,r10
8002eba4:	16 95       	mov	r5,r11
8002eba6:	e0 a0 02 3d 	rcall	8002f020 <__ieee754_asin>
8002ebaa:	6e 08       	ld.w	r8,r7[0x0]
8002ebac:	14 92       	mov	r2,r10
8002ebae:	16 93       	mov	r3,r11
8002ebb0:	5b f8       	cp.w	r8,-1
8002ebb2:	c3 50       	breq	8002ec1c <asin+0x80>
8002ebb4:	08 9a       	mov	r10,r4
8002ebb6:	0a 9b       	mov	r11,r5
8002ebb8:	e0 a0 17 b8 	rcall	80031b28 <__isnand>
8002ebbc:	18 96       	mov	r6,r12
8002ebbe:	c2 f1       	brne	8002ec1c <asin+0x80>
8002ebc0:	08 9a       	mov	r10,r4
8002ebc2:	0a 9b       	mov	r11,r5
8002ebc4:	e0 a0 17 16 	rcall	800319f0 <fabs>
8002ebc8:	14 98       	mov	r8,r10
8002ebca:	16 99       	mov	r9,r11
8002ebcc:	30 0a       	mov	r10,0
8002ebce:	fc 1b 3f f0 	movh	r11,0x3ff0
8002ebd2:	e0 a0 1b e1 	rcall	80032394 <__avr32_f64_cmp_lt>
8002ebd6:	c2 30       	breq	8002ec1c <asin+0x80>
8002ebd8:	30 18       	mov	r8,1
8002ebda:	50 08       	stdsp	sp[0x0],r8
8002ebdc:	49 38       	lddpc	r8,8002ec28 <asin+0x8c>
8002ebde:	50 86       	stdsp	sp[0x20],r6
8002ebe0:	50 18       	stdsp	sp[0x4],r8
8002ebe2:	fa e5 00 08 	st.d	sp[8],r4
8002ebe6:	fa e5 00 10 	st.d	sp[16],r4
8002ebea:	49 1c       	lddpc	r12,8002ec2c <asin+0x90>
8002ebec:	e0 a0 17 ad 	rcall	80031b46 <nan>
8002ebf0:	fa eb 00 18 	st.d	sp[24],r10
8002ebf4:	6e 08       	ld.w	r8,r7[0x0]
8002ebf6:	58 28       	cp.w	r8,2
8002ebf8:	c0 50       	breq	8002ec02 <asin+0x66>
8002ebfa:	1a 9c       	mov	r12,sp
8002ebfc:	e0 a0 17 a4 	rcall	80031b44 <matherr>
8002ec00:	c0 51       	brne	8002ec0a <asin+0x6e>
8002ec02:	e0 a0 21 2b 	rcall	80032e58 <__errno>
8002ec06:	32 18       	mov	r8,33
8002ec08:	99 08       	st.w	r12[0x0],r8
8002ec0a:	40 88       	lddsp	r8,sp[0x20]
8002ec0c:	58 08       	cp.w	r8,0
8002ec0e:	c0 50       	breq	8002ec18 <asin+0x7c>
8002ec10:	e0 a0 21 24 	rcall	80032e58 <__errno>
8002ec14:	40 88       	lddsp	r8,sp[0x20]
8002ec16:	99 08       	st.w	r12[0x0],r8
8002ec18:	fa e2 00 18 	ld.d	r2,sp[24]
8002ec1c:	04 9a       	mov	r10,r2
8002ec1e:	06 9b       	mov	r11,r3
8002ec20:	2f 7d       	sub	sp,-36
8002ec22:	d8 32       	popm	r0-r7,pc
8002ec24:	00 00       	add	r0,r0
8002ec26:	1f f0       	ld.ub	r0,pc[0x7]
8002ec28:	80 03       	ld.sh	r3,r0[0x0]
8002ec2a:	35 74       	mov	r4,87
8002ec2c:	80 03       	ld.sh	r3,r0[0x0]
8002ec2e:	35 78       	mov	r8,87

8002ec30 <atan2>:
8002ec30:	d4 01       	pushm	lr
8002ec32:	e0 a0 04 6f 	rcall	8002f510 <__ieee754_atan2>
8002ec36:	d8 02       	popm	pc

8002ec38 <pow>:
8002ec38:	d4 31       	pushm	r0-r7,lr
8002ec3a:	20 cd       	sub	sp,48
8002ec3c:	10 94       	mov	r4,r8
8002ec3e:	14 92       	mov	r2,r10
8002ec40:	16 93       	mov	r3,r11
8002ec42:	12 95       	mov	r5,r9
8002ec44:	e0 a0 05 7c 	rcall	8002f73c <__ieee754_pow>
8002ec48:	4b f6       	lddpc	r6,8002ed44 <pow+0x10c>
8002ec4a:	14 90       	mov	r0,r10
8002ec4c:	16 91       	mov	r1,r11
8002ec4e:	6c 08       	ld.w	r8,r6[0x0]
8002ec50:	5b f8       	cp.w	r8,-1
8002ec52:	e0 80 01 46 	breq	8002eede <pow+0x2a6>
8002ec56:	08 9a       	mov	r10,r4
8002ec58:	0a 9b       	mov	r11,r5
8002ec5a:	e0 a0 17 67 	rcall	80031b28 <__isnand>
8002ec5e:	50 2c       	stdsp	sp[0x8],r12
8002ec60:	e0 81 01 3f 	brne	8002eede <pow+0x2a6>
8002ec64:	04 9a       	mov	r10,r2
8002ec66:	06 9b       	mov	r11,r3
8002ec68:	e0 a0 17 60 	rcall	80031b28 <__isnand>
8002ec6c:	18 97       	mov	r7,r12
8002ec6e:	c2 40       	breq	8002ecb6 <pow+0x7e>
8002ec70:	30 08       	mov	r8,0
8002ec72:	30 09       	mov	r9,0
8002ec74:	08 9a       	mov	r10,r4
8002ec76:	0a 9b       	mov	r11,r5
8002ec78:	e0 a0 1b 47 	rcall	80032306 <__avr32_f64_cmp_eq>
8002ec7c:	e0 80 01 31 	breq	8002eede <pow+0x2a6>
8002ec80:	30 18       	mov	r8,1
8002ec82:	50 38       	stdsp	sp[0xc],r8
8002ec84:	4b 18       	lddpc	r8,8002ed48 <pow+0x110>
8002ec86:	40 2c       	lddsp	r12,sp[0x8]
8002ec88:	50 48       	stdsp	sp[0x10],r8
8002ec8a:	fc 19 3f f0 	movh	r9,0x3ff0
8002ec8e:	30 08       	mov	r8,0
8002ec90:	fa e3 00 14 	st.d	sp[20],r2
8002ec94:	fa e5 00 1c 	st.d	sp[28],r4
8002ec98:	50 bc       	stdsp	sp[0x2c],r12
8002ec9a:	fa e9 00 24 	st.d	sp[36],r8
8002ec9e:	6c 0a       	ld.w	r10,r6[0x0]
8002eca0:	5b fa       	cp.w	r10,-1
8002eca2:	5f 0b       	sreq	r11
8002eca4:	58 2a       	cp.w	r10,2
8002eca6:	5f 0a       	sreq	r10
8002eca8:	f5 eb 10 0b 	or	r11,r10,r11
8002ecac:	f8 0b 18 00 	cp.b	r11,r12
8002ecb0:	e0 81 01 0e 	brne	8002eecc <pow+0x294>
8002ecb4:	c8 08       	rjmp	8002edb4 <pow+0x17c>
8002ecb6:	30 08       	mov	r8,0
8002ecb8:	30 09       	mov	r9,0
8002ecba:	04 9a       	mov	r10,r2
8002ecbc:	06 9b       	mov	r11,r3
8002ecbe:	e0 a0 1b 24 	rcall	80032306 <__avr32_f64_cmp_eq>
8002ecc2:	c4 50       	breq	8002ed4c <pow+0x114>
8002ecc4:	30 08       	mov	r8,0
8002ecc6:	30 09       	mov	r9,0
8002ecc8:	08 9a       	mov	r10,r4
8002ecca:	0a 9b       	mov	r11,r5
8002eccc:	e0 a0 1b 1d 	rcall	80032306 <__avr32_f64_cmp_eq>
8002ecd0:	c1 70       	breq	8002ecfe <pow+0xc6>
8002ecd2:	30 18       	mov	r8,1
8002ecd4:	50 38       	stdsp	sp[0xc],r8
8002ecd6:	49 d8       	lddpc	r8,8002ed48 <pow+0x110>
8002ecd8:	30 09       	mov	r9,0
8002ecda:	50 48       	stdsp	sp[0x10],r8
8002ecdc:	50 b7       	stdsp	sp[0x2c],r7
8002ecde:	30 08       	mov	r8,0
8002ece0:	fa e3 00 14 	st.d	sp[20],r2
8002ece4:	fa e9 00 24 	st.d	sp[36],r8
8002ece8:	fa e5 00 1c 	st.d	sp[28],r4
8002ecec:	6c 08       	ld.w	r8,r6[0x0]
8002ecee:	58 08       	cp.w	r8,0
8002ecf0:	c6 20       	breq	8002edb4 <pow+0x17c>
8002ecf2:	30 08       	mov	r8,0
8002ecf4:	fc 19 3f f0 	movh	r9,0x3ff0
8002ecf8:	fa e9 00 24 	st.d	sp[36],r8
8002ecfc:	ce 88       	rjmp	8002eecc <pow+0x294>
8002ecfe:	08 9a       	mov	r10,r4
8002ed00:	0a 9b       	mov	r11,r5
8002ed02:	e0 a0 16 7b 	rcall	800319f8 <finite>
8002ed06:	e0 80 00 ec 	breq	8002eede <pow+0x2a6>
8002ed0a:	30 08       	mov	r8,0
8002ed0c:	30 09       	mov	r9,0
8002ed0e:	08 9a       	mov	r10,r4
8002ed10:	0a 9b       	mov	r11,r5
8002ed12:	e0 a0 1b 41 	rcall	80032394 <__avr32_f64_cmp_lt>
8002ed16:	e0 80 00 e4 	breq	8002eede <pow+0x2a6>
8002ed1a:	30 18       	mov	r8,1
8002ed1c:	50 b7       	stdsp	sp[0x2c],r7
8002ed1e:	50 38       	stdsp	sp[0xc],r8
8002ed20:	fa e3 00 14 	st.d	sp[20],r2
8002ed24:	48 98       	lddpc	r8,8002ed48 <pow+0x110>
8002ed26:	fa e5 00 1c 	st.d	sp[28],r4
8002ed2a:	50 48       	stdsp	sp[0x10],r8
8002ed2c:	6c 08       	ld.w	r8,r6[0x0]
8002ed2e:	58 08       	cp.w	r8,0
8002ed30:	c3 30       	breq	8002ed96 <pow+0x15e>
8002ed32:	30 0a       	mov	r10,0
8002ed34:	f0 6b 00 00 	mov	r11,-1048576
8002ed38:	fa eb 00 24 	st.d	sp[36],r10
8002ed3c:	58 28       	cp.w	r8,2
8002ed3e:	c4 10       	breq	8002edc0 <pow+0x188>
8002ed40:	c3 a8       	rjmp	8002edb4 <pow+0x17c>
8002ed42:	d7 03       	nop
8002ed44:	00 00       	add	r0,r0
8002ed46:	1f f0       	ld.ub	r0,pc[0x7]
8002ed48:	80 03       	ld.sh	r3,r0[0x0]
8002ed4a:	35 7c       	mov	r12,87
8002ed4c:	00 9a       	mov	r10,r0
8002ed4e:	02 9b       	mov	r11,r1
8002ed50:	e0 a0 16 54 	rcall	800319f8 <finite>
8002ed54:	18 97       	mov	r7,r12
8002ed56:	e0 81 00 8f 	brne	8002ee74 <pow+0x23c>
8002ed5a:	04 9a       	mov	r10,r2
8002ed5c:	06 9b       	mov	r11,r3
8002ed5e:	e0 a0 16 4d 	rcall	800319f8 <finite>
8002ed62:	e0 80 00 89 	breq	8002ee74 <pow+0x23c>
8002ed66:	08 9a       	mov	r10,r4
8002ed68:	0a 9b       	mov	r11,r5
8002ed6a:	e0 a0 16 47 	rcall	800319f8 <finite>
8002ed6e:	e0 80 00 83 	breq	8002ee74 <pow+0x23c>
8002ed72:	00 9a       	mov	r10,r0
8002ed74:	02 9b       	mov	r11,r1
8002ed76:	e0 a0 16 d9 	rcall	80031b28 <__isnand>
8002ed7a:	4b e8       	lddpc	r8,8002ee70 <pow+0x238>
8002ed7c:	58 0c       	cp.w	r12,0
8002ed7e:	c2 50       	breq	8002edc8 <pow+0x190>
8002ed80:	50 48       	stdsp	sp[0x10],r8
8002ed82:	50 b7       	stdsp	sp[0x2c],r7
8002ed84:	30 18       	mov	r8,1
8002ed86:	fa e3 00 14 	st.d	sp[20],r2
8002ed8a:	fa e5 00 1c 	st.d	sp[28],r4
8002ed8e:	50 38       	stdsp	sp[0xc],r8
8002ed90:	6c 07       	ld.w	r7,r6[0x0]
8002ed92:	58 07       	cp.w	r7,0
8002ed94:	c0 61       	brne	8002eda0 <pow+0x168>
8002ed96:	30 08       	mov	r8,0
8002ed98:	30 09       	mov	r9,0
8002ed9a:	fa e9 00 24 	st.d	sp[36],r8
8002ed9e:	c0 b8       	rjmp	8002edb4 <pow+0x17c>
8002eda0:	30 08       	mov	r8,0
8002eda2:	30 09       	mov	r9,0
8002eda4:	10 9a       	mov	r10,r8
8002eda6:	12 9b       	mov	r11,r9
8002eda8:	e0 a0 1b 44 	rcall	80032430 <__avr32_f64_div>
8002edac:	fa eb 00 24 	st.d	sp[36],r10
8002edb0:	58 27       	cp.w	r7,2
8002edb2:	c0 70       	breq	8002edc0 <pow+0x188>
8002edb4:	fa cc ff f4 	sub	r12,sp,-12
8002edb8:	e0 a0 16 c6 	rcall	80031b44 <matherr>
8002edbc:	e0 81 00 88 	brne	8002eecc <pow+0x294>
8002edc0:	e0 a0 20 4c 	rcall	80032e58 <__errno>
8002edc4:	32 18       	mov	r8,33
8002edc6:	c8 28       	rjmp	8002eeca <pow+0x292>
8002edc8:	50 48       	stdsp	sp[0x10],r8
8002edca:	50 bc       	stdsp	sp[0x2c],r12
8002edcc:	30 38       	mov	r8,3
8002edce:	fa e3 00 14 	st.d	sp[20],r2
8002edd2:	50 38       	stdsp	sp[0xc],r8
8002edd4:	fa e5 00 1c 	st.d	sp[28],r4
8002edd8:	6c 08       	ld.w	r8,r6[0x0]
8002edda:	58 08       	cp.w	r8,0
8002eddc:	c2 81       	brne	8002ee2c <pow+0x1f4>
8002edde:	fc 18 e0 00 	movh	r8,0xe000
8002ede2:	e0 69 ff ff 	mov	r9,65535
8002ede6:	ea 19 47 ef 	orh	r9,0x47ef
8002edea:	04 9a       	mov	r10,r2
8002edec:	fa e9 00 24 	st.d	sp[36],r8
8002edf0:	06 9b       	mov	r11,r3
8002edf2:	30 08       	mov	r8,0
8002edf4:	30 09       	mov	r9,0
8002edf6:	e0 a0 1a cf 	rcall	80032394 <__avr32_f64_cmp_lt>
8002edfa:	c5 c0       	breq	8002eeb2 <pow+0x27a>
8002edfc:	fc 19 3f e0 	movh	r9,0x3fe0
8002ee00:	30 08       	mov	r8,0
8002ee02:	08 9a       	mov	r10,r4
8002ee04:	0a 9b       	mov	r11,r5
8002ee06:	e0 a0 17 b5 	rcall	80031d70 <__avr32_f64_mul>
8002ee0a:	16 99       	mov	r9,r11
8002ee0c:	50 0a       	stdsp	sp[0x0],r10
8002ee0e:	50 19       	stdsp	sp[0x4],r9
8002ee10:	e0 a0 16 a0 	rcall	80031b50 <rint>
8002ee14:	40 19       	lddsp	r9,sp[0x4]
8002ee16:	40 08       	lddsp	r8,sp[0x0]
8002ee18:	e0 a0 1a 77 	rcall	80032306 <__avr32_f64_cmp_eq>
8002ee1c:	c4 b1       	brne	8002eeb2 <pow+0x27a>
8002ee1e:	fc 18 e0 00 	movh	r8,0xe000
8002ee22:	e0 69 ff ff 	mov	r9,65535
8002ee26:	ea 19 c7 ef 	orh	r9,0xc7ef
8002ee2a:	c4 28       	rjmp	8002eeae <pow+0x276>
8002ee2c:	30 08       	mov	r8,0
8002ee2e:	fc 19 7f f0 	movh	r9,0x7ff0
8002ee32:	04 9a       	mov	r10,r2
8002ee34:	fa e9 00 24 	st.d	sp[36],r8
8002ee38:	06 9b       	mov	r11,r3
8002ee3a:	30 08       	mov	r8,0
8002ee3c:	30 09       	mov	r9,0
8002ee3e:	e0 a0 1a ab 	rcall	80032394 <__avr32_f64_cmp_lt>
8002ee42:	c3 80       	breq	8002eeb2 <pow+0x27a>
8002ee44:	fc 19 3f e0 	movh	r9,0x3fe0
8002ee48:	30 08       	mov	r8,0
8002ee4a:	08 9a       	mov	r10,r4
8002ee4c:	0a 9b       	mov	r11,r5
8002ee4e:	e0 a0 17 91 	rcall	80031d70 <__avr32_f64_mul>
8002ee52:	16 99       	mov	r9,r11
8002ee54:	50 0a       	stdsp	sp[0x0],r10
8002ee56:	50 19       	stdsp	sp[0x4],r9
8002ee58:	e0 a0 16 7c 	rcall	80031b50 <rint>
8002ee5c:	40 19       	lddsp	r9,sp[0x4]
8002ee5e:	40 08       	lddsp	r8,sp[0x0]
8002ee60:	e0 a0 1a 53 	rcall	80032306 <__avr32_f64_cmp_eq>
8002ee64:	c2 71       	brne	8002eeb2 <pow+0x27a>
8002ee66:	30 08       	mov	r8,0
8002ee68:	f0 69 00 00 	mov	r9,-1048576
8002ee6c:	c2 18       	rjmp	8002eeae <pow+0x276>
8002ee6e:	d7 03       	nop
8002ee70:	80 03       	ld.sh	r3,r0[0x0]
8002ee72:	35 7c       	mov	r12,87
8002ee74:	30 08       	mov	r8,0
8002ee76:	30 09       	mov	r9,0
8002ee78:	00 9a       	mov	r10,r0
8002ee7a:	02 9b       	mov	r11,r1
8002ee7c:	e0 a0 1a 45 	rcall	80032306 <__avr32_f64_cmp_eq>
8002ee80:	c2 f0       	breq	8002eede <pow+0x2a6>
8002ee82:	04 9a       	mov	r10,r2
8002ee84:	06 9b       	mov	r11,r3
8002ee86:	e0 a0 15 b9 	rcall	800319f8 <finite>
8002ee8a:	c2 a0       	breq	8002eede <pow+0x2a6>
8002ee8c:	08 9a       	mov	r10,r4
8002ee8e:	0a 9b       	mov	r11,r5
8002ee90:	e0 a0 15 b4 	rcall	800319f8 <finite>
8002ee94:	c2 50       	breq	8002eede <pow+0x2a6>
8002ee96:	30 48       	mov	r8,4
8002ee98:	50 38       	stdsp	sp[0xc],r8
8002ee9a:	49 48       	lddpc	r8,8002eee8 <pow+0x2b0>
8002ee9c:	50 48       	stdsp	sp[0x10],r8
8002ee9e:	30 08       	mov	r8,0
8002eea0:	fa e3 00 14 	st.d	sp[20],r2
8002eea4:	50 b8       	stdsp	sp[0x2c],r8
8002eea6:	fa e5 00 1c 	st.d	sp[28],r4
8002eeaa:	30 08       	mov	r8,0
8002eeac:	30 09       	mov	r9,0
8002eeae:	fa e9 00 24 	st.d	sp[36],r8
8002eeb2:	48 f8       	lddpc	r8,8002eeec <pow+0x2b4>
8002eeb4:	70 08       	ld.w	r8,r8[0x0]
8002eeb6:	58 28       	cp.w	r8,2
8002eeb8:	c0 60       	breq	8002eec4 <pow+0x28c>
8002eeba:	fa cc ff f4 	sub	r12,sp,-12
8002eebe:	e0 a0 16 43 	rcall	80031b44 <matherr>
8002eec2:	c0 51       	brne	8002eecc <pow+0x294>
8002eec4:	e0 a0 1f ca 	rcall	80032e58 <__errno>
8002eec8:	32 28       	mov	r8,34
8002eeca:	99 08       	st.w	r12[0x0],r8
8002eecc:	40 b8       	lddsp	r8,sp[0x2c]
8002eece:	58 08       	cp.w	r8,0
8002eed0:	c0 50       	breq	8002eeda <pow+0x2a2>
8002eed2:	e0 a0 1f c3 	rcall	80032e58 <__errno>
8002eed6:	40 b8       	lddsp	r8,sp[0x2c]
8002eed8:	99 08       	st.w	r12[0x0],r8
8002eeda:	fa e0 00 24 	ld.d	r0,sp[36]
8002eede:	00 9a       	mov	r10,r0
8002eee0:	02 9b       	mov	r11,r1
8002eee2:	2f 4d       	sub	sp,-48
8002eee4:	d8 32       	popm	r0-r7,pc
8002eee6:	d7 03       	nop
8002eee8:	80 03       	ld.sh	r3,r0[0x0]
8002eeea:	35 7c       	mov	r12,87
8002eeec:	00 00       	add	r0,r0
8002eeee:	1f f0       	ld.ub	r0,pc[0x7]

8002eef0 <sqrt>:
8002eef0:	d4 31       	pushm	r0-r7,lr
8002eef2:	20 9d       	sub	sp,36
8002eef4:	4a 47       	lddpc	r7,8002ef84 <sqrt+0x94>
8002eef6:	14 94       	mov	r4,r10
8002eef8:	16 95       	mov	r5,r11
8002eefa:	e0 a0 0b ab 	rcall	80030650 <__ieee754_sqrt>
8002eefe:	6e 08       	ld.w	r8,r7[0x0]
8002ef00:	14 92       	mov	r2,r10
8002ef02:	16 93       	mov	r3,r11
8002ef04:	5b f8       	cp.w	r8,-1
8002ef06:	c3 a0       	breq	8002ef7a <sqrt+0x8a>
8002ef08:	08 9a       	mov	r10,r4
8002ef0a:	0a 9b       	mov	r11,r5
8002ef0c:	e0 a0 16 0e 	rcall	80031b28 <__isnand>
8002ef10:	18 96       	mov	r6,r12
8002ef12:	c3 41       	brne	8002ef7a <sqrt+0x8a>
8002ef14:	30 08       	mov	r8,0
8002ef16:	30 09       	mov	r9,0
8002ef18:	08 9a       	mov	r10,r4
8002ef1a:	0a 9b       	mov	r11,r5
8002ef1c:	e0 a0 1a 3c 	rcall	80032394 <__avr32_f64_cmp_lt>
8002ef20:	c2 d0       	breq	8002ef7a <sqrt+0x8a>
8002ef22:	30 18       	mov	r8,1
8002ef24:	50 86       	stdsp	sp[0x20],r6
8002ef26:	50 08       	stdsp	sp[0x0],r8
8002ef28:	fa e5 00 08 	st.d	sp[8],r4
8002ef2c:	49 78       	lddpc	r8,8002ef88 <sqrt+0x98>
8002ef2e:	fa e5 00 10 	st.d	sp[16],r4
8002ef32:	50 18       	stdsp	sp[0x4],r8
8002ef34:	6e 07       	ld.w	r7,r7[0x0]
8002ef36:	58 07       	cp.w	r7,0
8002ef38:	c0 61       	brne	8002ef44 <sqrt+0x54>
8002ef3a:	30 08       	mov	r8,0
8002ef3c:	30 09       	mov	r9,0
8002ef3e:	fa e9 00 18 	st.d	sp[24],r8
8002ef42:	c0 b8       	rjmp	8002ef58 <sqrt+0x68>
8002ef44:	30 08       	mov	r8,0
8002ef46:	30 09       	mov	r9,0
8002ef48:	10 9a       	mov	r10,r8
8002ef4a:	12 9b       	mov	r11,r9
8002ef4c:	e0 a0 1a 72 	rcall	80032430 <__avr32_f64_div>
8002ef50:	fa eb 00 18 	st.d	sp[24],r10
8002ef54:	58 27       	cp.w	r7,2
8002ef56:	c0 50       	breq	8002ef60 <sqrt+0x70>
8002ef58:	1a 9c       	mov	r12,sp
8002ef5a:	e0 a0 15 f5 	rcall	80031b44 <matherr>
8002ef5e:	c0 51       	brne	8002ef68 <sqrt+0x78>
8002ef60:	e0 a0 1f 7c 	rcall	80032e58 <__errno>
8002ef64:	32 18       	mov	r8,33
8002ef66:	99 08       	st.w	r12[0x0],r8
8002ef68:	40 88       	lddsp	r8,sp[0x20]
8002ef6a:	58 08       	cp.w	r8,0
8002ef6c:	c0 50       	breq	8002ef76 <sqrt+0x86>
8002ef6e:	e0 a0 1f 75 	rcall	80032e58 <__errno>
8002ef72:	40 88       	lddsp	r8,sp[0x20]
8002ef74:	99 08       	st.w	r12[0x0],r8
8002ef76:	fa e2 00 18 	ld.d	r2,sp[24]
8002ef7a:	04 9a       	mov	r10,r2
8002ef7c:	06 9b       	mov	r11,r3
8002ef7e:	2f 7d       	sub	sp,-36
8002ef80:	d8 32       	popm	r0-r7,pc
8002ef82:	d7 03       	nop
8002ef84:	00 00       	add	r0,r0
8002ef86:	1f f0       	ld.ub	r0,pc[0x7]
8002ef88:	80 03       	ld.sh	r3,r0[0x0]
8002ef8a:	35 80       	mov	r0,88

8002ef8c <acosf>:
8002ef8c:	d4 21       	pushm	r4-r7,lr
8002ef8e:	20 9d       	sub	sp,36
8002ef90:	4a 17       	lddpc	r7,8002f014 <acosf+0x88>
8002ef92:	18 96       	mov	r6,r12
8002ef94:	e0 a0 0c 24 	rcall	800307dc <__ieee754_acosf>
8002ef98:	6e 08       	ld.w	r8,r7[0x0]
8002ef9a:	18 95       	mov	r5,r12
8002ef9c:	5b f8       	cp.w	r8,-1
8002ef9e:	c3 70       	breq	8002f00c <acosf+0x80>
8002efa0:	0c 9c       	mov	r12,r6
8002efa2:	e0 a0 16 d4 	rcall	80031d4a <isnanf>
8002efa6:	18 94       	mov	r4,r12
8002efa8:	c3 21       	brne	8002f00c <acosf+0x80>
8002efaa:	0c 9c       	mov	r12,r6
8002efac:	e0 a0 16 cc 	rcall	80031d44 <fabsf>
8002efb0:	18 9b       	mov	r11,r12
8002efb2:	fc 1c 3f 80 	movh	r12,0x3f80
8002efb6:	e0 a0 1a 23 	rcall	800323fc <__avr32_f32_cmp_lt>
8002efba:	c2 90       	breq	8002f00c <acosf+0x80>
8002efbc:	30 18       	mov	r8,1
8002efbe:	50 08       	stdsp	sp[0x0],r8
8002efc0:	49 68       	lddpc	r8,8002f018 <acosf+0x8c>
8002efc2:	0c 9c       	mov	r12,r6
8002efc4:	50 18       	stdsp	sp[0x4],r8
8002efc6:	50 84       	stdsp	sp[0x20],r4
8002efc8:	e0 a0 1d a1 	rcall	80032b0a <__avr32_f32_to_f64>
8002efcc:	49 4c       	lddpc	r12,8002f01c <acosf+0x90>
8002efce:	fa eb 00 08 	st.d	sp[8],r10
8002efd2:	fa eb 00 10 	st.d	sp[16],r10
8002efd6:	e0 a0 15 b8 	rcall	80031b46 <nan>
8002efda:	fa eb 00 18 	st.d	sp[24],r10
8002efde:	6e 08       	ld.w	r8,r7[0x0]
8002efe0:	58 28       	cp.w	r8,2
8002efe2:	c0 50       	breq	8002efec <acosf+0x60>
8002efe4:	1a 9c       	mov	r12,sp
8002efe6:	e0 a0 15 af 	rcall	80031b44 <matherr>
8002efea:	c0 51       	brne	8002eff4 <acosf+0x68>
8002efec:	e0 a0 1f 36 	rcall	80032e58 <__errno>
8002eff0:	32 18       	mov	r8,33
8002eff2:	99 08       	st.w	r12[0x0],r8
8002eff4:	40 88       	lddsp	r8,sp[0x20]
8002eff6:	58 08       	cp.w	r8,0
8002eff8:	c0 50       	breq	8002f002 <acosf+0x76>
8002effa:	e0 a0 1f 2f 	rcall	80032e58 <__errno>
8002effe:	40 88       	lddsp	r8,sp[0x20]
8002f000:	99 08       	st.w	r12[0x0],r8
8002f002:	fa ea 00 18 	ld.d	r10,sp[24]
8002f006:	e0 a0 1d b2 	rcall	80032b6a <__avr32_f64_to_f32>
8002f00a:	18 95       	mov	r5,r12
8002f00c:	0a 9c       	mov	r12,r5
8002f00e:	2f 7d       	sub	sp,-36
8002f010:	d8 22       	popm	r4-r7,pc
8002f012:	d7 03       	nop
8002f014:	00 00       	add	r0,r0
8002f016:	1f f0       	ld.ub	r0,pc[0x7]
8002f018:	80 03       	ld.sh	r3,r0[0x0]
8002f01a:	35 88       	mov	r8,88
8002f01c:	80 03       	ld.sh	r3,r0[0x0]
8002f01e:	35 78       	mov	r8,87

8002f020 <__ieee754_asin>:
8002f020:	d4 31       	pushm	r0-r7,lr
8002f022:	20 5d       	sub	sp,20
8002f024:	50 0b       	stdsp	sp[0x0],r11
8002f026:	16 96       	mov	r6,r11
8002f028:	14 97       	mov	r7,r10
8002f02a:	eb db c0 1f 	bfextu	r5,r11,0x0,0x1f
8002f02e:	e0 68 ff ff 	mov	r8,65535
8002f032:	ea 18 3f ef 	orh	r8,0x3fef
8002f036:	10 35       	cp.w	r5,r8
8002f038:	e0 8a 00 32 	brle	8002f09c <__ieee754_asin+0x7c>
8002f03c:	fc 1a c0 10 	movh	r10,0xc010
8002f040:	14 05       	add	r5,r10
8002f042:	0e 45       	or	r5,r7
8002f044:	c1 f1       	brne	8002f082 <__ieee754_asin+0x62>
8002f046:	e0 68 2d 18 	mov	r8,11544
8002f04a:	ea 18 54 44 	orh	r8,0x5444
8002f04e:	e0 69 21 fb 	mov	r9,8699
8002f052:	ea 19 3f f9 	orh	r9,0x3ff9
8002f056:	0e 9a       	mov	r10,r7
8002f058:	e0 a0 16 8c 	rcall	80031d70 <__avr32_f64_mul>
8002f05c:	e0 68 5c 07 	mov	r8,23559
8002f060:	ea 18 33 14 	orh	r8,0x3314
8002f064:	14 94       	mov	r4,r10
8002f066:	16 95       	mov	r5,r11
8002f068:	e0 69 a6 26 	mov	r9,42534
8002f06c:	ea 19 3c 91 	orh	r9,0x3c91
8002f070:	0c 9b       	mov	r11,r6
8002f072:	0e 9a       	mov	r10,r7
8002f074:	e0 a0 16 7e 	rcall	80031d70 <__avr32_f64_mul>
8002f078:	14 98       	mov	r8,r10
8002f07a:	16 99       	mov	r9,r11
8002f07c:	08 9a       	mov	r10,r4
8002f07e:	0a 9b       	mov	r11,r5
8002f080:	ce 48       	rjmp	8002f248 <__ieee754_asin+0x228>
8002f082:	0c 99       	mov	r9,r6
8002f084:	0e 98       	mov	r8,r7
8002f086:	0e 9a       	mov	r10,r7
8002f088:	e0 a0 17 60 	rcall	80031f48 <__avr32_f64_sub>
8002f08c:	14 98       	mov	r8,r10
8002f08e:	16 99       	mov	r9,r11
8002f090:	e0 a0 19 d0 	rcall	80032430 <__avr32_f64_div>
8002f094:	16 96       	mov	r6,r11
8002f096:	14 97       	mov	r7,r10
8002f098:	e0 8f 02 37 	bral	8002f506 <__ieee754_asin+0x4e6>
8002f09c:	e0 68 ff ff 	mov	r8,65535
8002f0a0:	ea 18 3f df 	orh	r8,0x3fdf
8002f0a4:	10 35       	cp.w	r5,r8
8002f0a6:	e0 89 00 d4 	brgt	8002f24e <__ieee754_asin+0x22e>
8002f0aa:	e0 68 ff ff 	mov	r8,65535
8002f0ae:	ea 18 3e 3f 	orh	r8,0x3e3f
8002f0b2:	10 35       	cp.w	r5,r8
8002f0b4:	e0 89 00 17 	brgt	8002f0e2 <__ieee754_asin+0xc2>
8002f0b8:	e0 68 75 9c 	mov	r8,30108
8002f0bc:	ea 18 88 00 	orh	r8,0x8800
8002f0c0:	e0 69 e4 3c 	mov	r9,58428
8002f0c4:	ea 19 7e 37 	orh	r9,0x7e37
8002f0c8:	e0 a0 18 0e 	rcall	800320e4 <__avr32_f64_add>
8002f0cc:	14 98       	mov	r8,r10
8002f0ce:	16 99       	mov	r9,r11
8002f0d0:	30 0a       	mov	r10,0
8002f0d2:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f0d6:	e0 a0 19 5f 	rcall	80032394 <__avr32_f64_cmp_lt>
8002f0da:	e0 80 00 ba 	breq	8002f24e <__ieee754_asin+0x22e>
8002f0de:	e0 8f 02 14 	bral	8002f506 <__ieee754_asin+0x4e6>
8002f0e2:	16 99       	mov	r9,r11
8002f0e4:	14 98       	mov	r8,r10
8002f0e6:	e0 a0 16 45 	rcall	80031d70 <__avr32_f64_mul>
8002f0ea:	e0 68 f7 09 	mov	r8,63241
8002f0ee:	ea 18 0d fd 	orh	r8,0xdfd
8002f0f2:	14 94       	mov	r4,r10
8002f0f4:	16 95       	mov	r5,r11
8002f0f6:	e0 69 3d e1 	mov	r9,15841
8002f0fa:	ea 19 3f 02 	orh	r9,0x3f02
8002f0fe:	e0 a0 16 39 	rcall	80031d70 <__avr32_f64_mul>
8002f102:	e0 68 b2 88 	mov	r8,45704
8002f106:	ea 18 75 01 	orh	r8,0x7501
8002f10a:	e0 69 ef e0 	mov	r9,61408
8002f10e:	ea 19 3f 49 	orh	r9,0x3f49
8002f112:	e0 a0 17 e9 	rcall	800320e4 <__avr32_f64_add>
8002f116:	14 98       	mov	r8,r10
8002f118:	16 99       	mov	r9,r11
8002f11a:	08 9a       	mov	r10,r4
8002f11c:	0a 9b       	mov	r11,r5
8002f11e:	e0 a0 16 29 	rcall	80031d70 <__avr32_f64_mul>
8002f122:	e0 68 8f 3b 	mov	r8,36667
8002f126:	ea 18 b5 68 	orh	r8,0xb568
8002f12a:	e0 69 82 28 	mov	r9,33320
8002f12e:	ea 19 3f a4 	orh	r9,0x3fa4
8002f132:	e0 a0 17 0b 	rcall	80031f48 <__avr32_f64_sub>
8002f136:	14 98       	mov	r8,r10
8002f138:	16 99       	mov	r9,r11
8002f13a:	08 9a       	mov	r10,r4
8002f13c:	0a 9b       	mov	r11,r5
8002f13e:	e0 a0 16 19 	rcall	80031d70 <__avr32_f64_mul>
8002f142:	e0 68 44 55 	mov	r8,17493
8002f146:	ea 18 0e 88 	orh	r8,0xe88
8002f14a:	e0 69 c1 55 	mov	r9,49493
8002f14e:	ea 19 3f c9 	orh	r9,0x3fc9
8002f152:	e0 a0 17 c9 	rcall	800320e4 <__avr32_f64_add>
8002f156:	14 98       	mov	r8,r10
8002f158:	16 99       	mov	r9,r11
8002f15a:	08 9a       	mov	r10,r4
8002f15c:	0a 9b       	mov	r11,r5
8002f15e:	e0 a0 16 09 	rcall	80031d70 <__avr32_f64_mul>
8002f162:	e0 68 6f 7d 	mov	r8,28541
8002f166:	ea 18 03 eb 	orh	r8,0x3eb
8002f16a:	e0 69 d6 12 	mov	r9,54802
8002f16e:	ea 19 3f d4 	orh	r9,0x3fd4
8002f172:	e0 a0 16 eb 	rcall	80031f48 <__avr32_f64_sub>
8002f176:	14 98       	mov	r8,r10
8002f178:	16 99       	mov	r9,r11
8002f17a:	08 9a       	mov	r10,r4
8002f17c:	0a 9b       	mov	r11,r5
8002f17e:	e0 a0 15 f9 	rcall	80031d70 <__avr32_f64_mul>
8002f182:	e0 68 55 55 	mov	r8,21845
8002f186:	ea 18 55 55 	orh	r8,0x5555
8002f18a:	e0 69 55 55 	mov	r9,21845
8002f18e:	ea 19 3f c5 	orh	r9,0x3fc5
8002f192:	e0 a0 17 a9 	rcall	800320e4 <__avr32_f64_add>
8002f196:	14 98       	mov	r8,r10
8002f198:	16 99       	mov	r9,r11
8002f19a:	08 9a       	mov	r10,r4
8002f19c:	0a 9b       	mov	r11,r5
8002f19e:	e0 a0 15 e9 	rcall	80031d70 <__avr32_f64_mul>
8002f1a2:	e0 68 92 82 	mov	r8,37506
8002f1a6:	ea 18 b1 2e 	orh	r8,0xb12e
8002f1aa:	14 92       	mov	r2,r10
8002f1ac:	16 93       	mov	r3,r11
8002f1ae:	e0 69 b8 c5 	mov	r9,47301
8002f1b2:	ea 19 3f b3 	orh	r9,0x3fb3
8002f1b6:	08 9a       	mov	r10,r4
8002f1b8:	0a 9b       	mov	r11,r5
8002f1ba:	e0 a0 15 db 	rcall	80031d70 <__avr32_f64_mul>
8002f1be:	e0 68 01 59 	mov	r8,345
8002f1c2:	ea 18 1b 8d 	orh	r8,0x1b8d
8002f1c6:	e0 69 06 6c 	mov	r9,1644
8002f1ca:	ea 19 3f e6 	orh	r9,0x3fe6
8002f1ce:	e0 a0 16 bd 	rcall	80031f48 <__avr32_f64_sub>
8002f1d2:	14 98       	mov	r8,r10
8002f1d4:	16 99       	mov	r9,r11
8002f1d6:	08 9a       	mov	r10,r4
8002f1d8:	0a 9b       	mov	r11,r5
8002f1da:	e0 a0 15 cb 	rcall	80031d70 <__avr32_f64_mul>
8002f1de:	e0 68 8a c8 	mov	r8,35528
8002f1e2:	ea 18 9c 59 	orh	r8,0x9c59
8002f1e6:	e0 69 2a e5 	mov	r9,10981
8002f1ea:	ea 19 40 00 	orh	r9,0x4000
8002f1ee:	e0 a0 17 7b 	rcall	800320e4 <__avr32_f64_add>
8002f1f2:	14 98       	mov	r8,r10
8002f1f4:	16 99       	mov	r9,r11
8002f1f6:	08 9a       	mov	r10,r4
8002f1f8:	0a 9b       	mov	r11,r5
8002f1fa:	e0 a0 15 bb 	rcall	80031d70 <__avr32_f64_mul>
8002f1fe:	e0 68 2d 4b 	mov	r8,11595
8002f202:	ea 18 1c 8a 	orh	r8,0x1c8a
8002f206:	e0 69 3a 27 	mov	r9,14887
8002f20a:	ea 19 40 03 	orh	r9,0x4003
8002f20e:	e0 a0 16 9d 	rcall	80031f48 <__avr32_f64_sub>
8002f212:	14 98       	mov	r8,r10
8002f214:	16 99       	mov	r9,r11
8002f216:	08 9a       	mov	r10,r4
8002f218:	0a 9b       	mov	r11,r5
8002f21a:	e0 a0 15 ab 	rcall	80031d70 <__avr32_f64_mul>
8002f21e:	30 08       	mov	r8,0
8002f220:	fc 19 3f f0 	movh	r9,0x3ff0
8002f224:	e0 a0 17 60 	rcall	800320e4 <__avr32_f64_add>
8002f228:	14 98       	mov	r8,r10
8002f22a:	16 99       	mov	r9,r11
8002f22c:	04 9a       	mov	r10,r2
8002f22e:	06 9b       	mov	r11,r3
8002f230:	e0 a0 19 00 	rcall	80032430 <__avr32_f64_div>
8002f234:	14 98       	mov	r8,r10
8002f236:	16 99       	mov	r9,r11
8002f238:	0e 9a       	mov	r10,r7
8002f23a:	0c 9b       	mov	r11,r6
8002f23c:	e0 a0 15 9a 	rcall	80031d70 <__avr32_f64_mul>
8002f240:	14 98       	mov	r8,r10
8002f242:	16 99       	mov	r9,r11
8002f244:	0e 9a       	mov	r10,r7
8002f246:	0c 9b       	mov	r11,r6
8002f248:	e0 a0 17 4e 	rcall	800320e4 <__avr32_f64_add>
8002f24c:	c2 4b       	rjmp	8002f094 <__ieee754_asin+0x74>
8002f24e:	0c 9b       	mov	r11,r6
8002f250:	0e 9a       	mov	r10,r7
8002f252:	e0 a0 13 cf 	rcall	800319f0 <fabs>
8002f256:	14 98       	mov	r8,r10
8002f258:	16 99       	mov	r9,r11
8002f25a:	30 0a       	mov	r10,0
8002f25c:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f260:	e0 a0 16 74 	rcall	80031f48 <__avr32_f64_sub>
8002f264:	30 08       	mov	r8,0
8002f266:	fc 19 3f e0 	movh	r9,0x3fe0
8002f26a:	e0 a0 15 83 	rcall	80031d70 <__avr32_f64_mul>
8002f26e:	e0 68 f7 09 	mov	r8,63241
8002f272:	ea 18 0d fd 	orh	r8,0xdfd
8002f276:	16 97       	mov	r7,r11
8002f278:	14 96       	mov	r6,r10
8002f27a:	e0 69 3d e1 	mov	r9,15841
8002f27e:	ea 19 3f 02 	orh	r9,0x3f02
8002f282:	e0 a0 15 77 	rcall	80031d70 <__avr32_f64_mul>
8002f286:	e0 68 b2 88 	mov	r8,45704
8002f28a:	ea 18 75 01 	orh	r8,0x7501
8002f28e:	e0 69 ef e0 	mov	r9,61408
8002f292:	ea 19 3f 49 	orh	r9,0x3f49
8002f296:	e0 a0 17 27 	rcall	800320e4 <__avr32_f64_add>
8002f29a:	14 98       	mov	r8,r10
8002f29c:	16 99       	mov	r9,r11
8002f29e:	0c 9a       	mov	r10,r6
8002f2a0:	0e 9b       	mov	r11,r7
8002f2a2:	e0 a0 15 67 	rcall	80031d70 <__avr32_f64_mul>
8002f2a6:	e0 68 8f 3b 	mov	r8,36667
8002f2aa:	ea 18 b5 68 	orh	r8,0xb568
8002f2ae:	e0 69 82 28 	mov	r9,33320
8002f2b2:	ea 19 3f a4 	orh	r9,0x3fa4
8002f2b6:	e0 a0 16 49 	rcall	80031f48 <__avr32_f64_sub>
8002f2ba:	14 98       	mov	r8,r10
8002f2bc:	16 99       	mov	r9,r11
8002f2be:	0c 9a       	mov	r10,r6
8002f2c0:	0e 9b       	mov	r11,r7
8002f2c2:	e0 a0 15 57 	rcall	80031d70 <__avr32_f64_mul>
8002f2c6:	e0 68 44 55 	mov	r8,17493
8002f2ca:	ea 18 0e 88 	orh	r8,0xe88
8002f2ce:	e0 69 c1 55 	mov	r9,49493
8002f2d2:	ea 19 3f c9 	orh	r9,0x3fc9
8002f2d6:	e0 a0 17 07 	rcall	800320e4 <__avr32_f64_add>
8002f2da:	14 98       	mov	r8,r10
8002f2dc:	16 99       	mov	r9,r11
8002f2de:	0c 9a       	mov	r10,r6
8002f2e0:	0e 9b       	mov	r11,r7
8002f2e2:	e0 a0 15 47 	rcall	80031d70 <__avr32_f64_mul>
8002f2e6:	e0 68 6f 7d 	mov	r8,28541
8002f2ea:	ea 18 03 eb 	orh	r8,0x3eb
8002f2ee:	e0 69 d6 12 	mov	r9,54802
8002f2f2:	ea 19 3f d4 	orh	r9,0x3fd4
8002f2f6:	e0 a0 16 29 	rcall	80031f48 <__avr32_f64_sub>
8002f2fa:	14 98       	mov	r8,r10
8002f2fc:	16 99       	mov	r9,r11
8002f2fe:	0c 9a       	mov	r10,r6
8002f300:	0e 9b       	mov	r11,r7
8002f302:	e0 a0 15 37 	rcall	80031d70 <__avr32_f64_mul>
8002f306:	e0 68 55 55 	mov	r8,21845
8002f30a:	ea 18 55 55 	orh	r8,0x5555
8002f30e:	e0 69 55 55 	mov	r9,21845
8002f312:	ea 19 3f c5 	orh	r9,0x3fc5
8002f316:	e0 a0 16 e7 	rcall	800320e4 <__avr32_f64_add>
8002f31a:	14 98       	mov	r8,r10
8002f31c:	16 99       	mov	r9,r11
8002f31e:	0c 9a       	mov	r10,r6
8002f320:	0e 9b       	mov	r11,r7
8002f322:	e0 a0 15 27 	rcall	80031d70 <__avr32_f64_mul>
8002f326:	e0 68 92 82 	mov	r8,37506
8002f32a:	ea 18 b1 2e 	orh	r8,0xb12e
8002f32e:	e0 69 b8 c5 	mov	r9,47301
8002f332:	ea 19 3f b3 	orh	r9,0x3fb3
8002f336:	14 90       	mov	r0,r10
8002f338:	16 91       	mov	r1,r11
8002f33a:	0c 9a       	mov	r10,r6
8002f33c:	0e 9b       	mov	r11,r7
8002f33e:	e0 a0 15 19 	rcall	80031d70 <__avr32_f64_mul>
8002f342:	e0 68 01 59 	mov	r8,345
8002f346:	ea 18 1b 8d 	orh	r8,0x1b8d
8002f34a:	e0 69 06 6c 	mov	r9,1644
8002f34e:	ea 19 3f e6 	orh	r9,0x3fe6
8002f352:	e0 a0 15 fb 	rcall	80031f48 <__avr32_f64_sub>
8002f356:	14 98       	mov	r8,r10
8002f358:	16 99       	mov	r9,r11
8002f35a:	0c 9a       	mov	r10,r6
8002f35c:	0e 9b       	mov	r11,r7
8002f35e:	e0 a0 15 09 	rcall	80031d70 <__avr32_f64_mul>
8002f362:	e0 68 8a c8 	mov	r8,35528
8002f366:	ea 18 9c 59 	orh	r8,0x9c59
8002f36a:	e0 69 2a e5 	mov	r9,10981
8002f36e:	ea 19 40 00 	orh	r9,0x4000
8002f372:	e0 a0 16 b9 	rcall	800320e4 <__avr32_f64_add>
8002f376:	14 98       	mov	r8,r10
8002f378:	16 99       	mov	r9,r11
8002f37a:	0c 9a       	mov	r10,r6
8002f37c:	0e 9b       	mov	r11,r7
8002f37e:	e0 a0 14 f9 	rcall	80031d70 <__avr32_f64_mul>
8002f382:	e0 68 2d 4b 	mov	r8,11595
8002f386:	ea 18 1c 8a 	orh	r8,0x1c8a
8002f38a:	e0 69 3a 27 	mov	r9,14887
8002f38e:	ea 19 40 03 	orh	r9,0x4003
8002f392:	e0 a0 15 db 	rcall	80031f48 <__avr32_f64_sub>
8002f396:	14 98       	mov	r8,r10
8002f398:	16 99       	mov	r9,r11
8002f39a:	0c 9a       	mov	r10,r6
8002f39c:	0e 9b       	mov	r11,r7
8002f39e:	e0 a0 14 e9 	rcall	80031d70 <__avr32_f64_mul>
8002f3a2:	30 08       	mov	r8,0
8002f3a4:	fc 19 3f f0 	movh	r9,0x3ff0
8002f3a8:	e0 a0 16 9e 	rcall	800320e4 <__avr32_f64_add>
8002f3ac:	fa eb 00 04 	st.d	sp[4],r10
8002f3b0:	0c 9a       	mov	r10,r6
8002f3b2:	0e 9b       	mov	r11,r7
8002f3b4:	e0 a0 09 4e 	rcall	80030650 <__ieee754_sqrt>
8002f3b8:	e0 68 33 32 	mov	r8,13106
8002f3bc:	ea 18 3f ef 	orh	r8,0x3fef
8002f3c0:	14 92       	mov	r2,r10
8002f3c2:	16 93       	mov	r3,r11
8002f3c4:	10 35       	cp.w	r5,r8
8002f3c6:	e0 8a 00 2d 	brle	8002f420 <__ieee754_asin+0x400>
8002f3ca:	fa e8 00 04 	ld.d	r8,sp[4]
8002f3ce:	00 9a       	mov	r10,r0
8002f3d0:	02 9b       	mov	r11,r1
8002f3d2:	e0 a0 18 2f 	rcall	80032430 <__avr32_f64_div>
8002f3d6:	14 98       	mov	r8,r10
8002f3d8:	16 99       	mov	r9,r11
8002f3da:	04 9a       	mov	r10,r2
8002f3dc:	06 9b       	mov	r11,r3
8002f3de:	e0 a0 14 c9 	rcall	80031d70 <__avr32_f64_mul>
8002f3e2:	14 98       	mov	r8,r10
8002f3e4:	16 99       	mov	r9,r11
8002f3e6:	04 9a       	mov	r10,r2
8002f3e8:	06 9b       	mov	r11,r3
8002f3ea:	e0 a0 16 7d 	rcall	800320e4 <__avr32_f64_add>
8002f3ee:	14 98       	mov	r8,r10
8002f3f0:	16 99       	mov	r9,r11
8002f3f2:	e0 a0 16 79 	rcall	800320e4 <__avr32_f64_add>
8002f3f6:	e0 68 5c 07 	mov	r8,23559
8002f3fa:	ea 18 33 14 	orh	r8,0x3314
8002f3fe:	e0 69 a6 26 	mov	r9,42534
8002f402:	ea 19 3c 91 	orh	r9,0x3c91
8002f406:	e0 a0 15 a1 	rcall	80031f48 <__avr32_f64_sub>
8002f40a:	14 98       	mov	r8,r10
8002f40c:	16 99       	mov	r9,r11
8002f40e:	e0 6a 2d 18 	mov	r10,11544
8002f412:	ea 1a 54 44 	orh	r10,0x5444
8002f416:	e0 6b 21 fb 	mov	r11,8699
8002f41a:	ea 1b 3f f9 	orh	r11,0x3ff9
8002f41e:	c6 98       	rjmp	8002f4f0 <__ieee754_asin+0x4d0>
8002f420:	14 98       	mov	r8,r10
8002f422:	06 99       	mov	r9,r3
8002f424:	e0 a0 16 60 	rcall	800320e4 <__avr32_f64_add>
8002f428:	fa e8 00 04 	ld.d	r8,sp[4]
8002f42c:	fa eb 00 0c 	st.d	sp[12],r10
8002f430:	00 9a       	mov	r10,r0
8002f432:	02 9b       	mov	r11,r1
8002f434:	e0 a0 17 fe 	rcall	80032430 <__avr32_f64_div>
8002f438:	14 98       	mov	r8,r10
8002f43a:	16 99       	mov	r9,r11
8002f43c:	fa ea 00 0c 	ld.d	r10,sp[12]
8002f440:	e0 a0 14 98 	rcall	80031d70 <__avr32_f64_mul>
8002f444:	30 04       	mov	r4,0
8002f446:	14 90       	mov	r0,r10
8002f448:	16 91       	mov	r1,r11
8002f44a:	08 98       	mov	r8,r4
8002f44c:	06 99       	mov	r9,r3
8002f44e:	08 9a       	mov	r10,r4
8002f450:	06 9b       	mov	r11,r3
8002f452:	e0 a0 14 8f 	rcall	80031d70 <__avr32_f64_mul>
8002f456:	14 98       	mov	r8,r10
8002f458:	16 99       	mov	r9,r11
8002f45a:	0c 9a       	mov	r10,r6
8002f45c:	0e 9b       	mov	r11,r7
8002f45e:	e0 a0 15 75 	rcall	80031f48 <__avr32_f64_sub>
8002f462:	08 98       	mov	r8,r4
8002f464:	16 97       	mov	r7,r11
8002f466:	14 96       	mov	r6,r10
8002f468:	06 99       	mov	r9,r3
8002f46a:	04 9a       	mov	r10,r2
8002f46c:	06 9b       	mov	r11,r3
8002f46e:	e0 a0 16 3b 	rcall	800320e4 <__avr32_f64_add>
8002f472:	14 98       	mov	r8,r10
8002f474:	16 99       	mov	r9,r11
8002f476:	0c 9a       	mov	r10,r6
8002f478:	0e 9b       	mov	r11,r7
8002f47a:	e0 a0 17 db 	rcall	80032430 <__avr32_f64_div>
8002f47e:	30 08       	mov	r8,0
8002f480:	fc 19 c0 00 	movh	r9,0xc000
8002f484:	e0 a0 14 76 	rcall	80031d70 <__avr32_f64_mul>
8002f488:	e0 68 5c 07 	mov	r8,23559
8002f48c:	ea 18 33 14 	orh	r8,0x3314
8002f490:	e0 69 a6 26 	mov	r9,42534
8002f494:	ea 19 3c 91 	orh	r9,0x3c91
8002f498:	e0 a0 16 26 	rcall	800320e4 <__avr32_f64_add>
8002f49c:	14 98       	mov	r8,r10
8002f49e:	16 99       	mov	r9,r11
8002f4a0:	00 9a       	mov	r10,r0
8002f4a2:	02 9b       	mov	r11,r1
8002f4a4:	e0 a0 15 52 	rcall	80031f48 <__avr32_f64_sub>
8002f4a8:	30 08       	mov	r8,0
8002f4aa:	16 97       	mov	r7,r11
8002f4ac:	14 96       	mov	r6,r10
8002f4ae:	fc 19 c0 00 	movh	r9,0xc000
8002f4b2:	08 9a       	mov	r10,r4
8002f4b4:	06 9b       	mov	r11,r3
8002f4b6:	e0 a0 14 5d 	rcall	80031d70 <__avr32_f64_mul>
8002f4ba:	e0 68 2d 18 	mov	r8,11544
8002f4be:	ea 18 54 44 	orh	r8,0x5444
8002f4c2:	e0 69 21 fb 	mov	r9,8699
8002f4c6:	ea 19 3f e9 	orh	r9,0x3fe9
8002f4ca:	e0 a0 16 0d 	rcall	800320e4 <__avr32_f64_add>
8002f4ce:	14 98       	mov	r8,r10
8002f4d0:	16 99       	mov	r9,r11
8002f4d2:	0c 9a       	mov	r10,r6
8002f4d4:	0e 9b       	mov	r11,r7
8002f4d6:	e0 a0 15 39 	rcall	80031f48 <__avr32_f64_sub>
8002f4da:	06 95       	mov	r5,r3
8002f4dc:	14 98       	mov	r8,r10
8002f4de:	16 99       	mov	r9,r11
8002f4e0:	e0 6a 2d 18 	mov	r10,11544
8002f4e4:	ea 1a 54 44 	orh	r10,0x5444
8002f4e8:	e0 6b 21 fb 	mov	r11,8699
8002f4ec:	ea 1b 3f e9 	orh	r11,0x3fe9
8002f4f0:	e0 a0 15 2c 	rcall	80031f48 <__avr32_f64_sub>
8002f4f4:	40 08       	lddsp	r8,sp[0x0]
8002f4f6:	16 96       	mov	r6,r11
8002f4f8:	14 97       	mov	r7,r10
8002f4fa:	ee 16 80 00 	eorh	r6,0x8000
8002f4fe:	58 08       	cp.w	r8,0
8002f500:	e0 8a 00 03 	brle	8002f506 <__ieee754_asin+0x4e6>
8002f504:	16 96       	mov	r6,r11
8002f506:	0c 9b       	mov	r11,r6
8002f508:	0e 9a       	mov	r10,r7
8002f50a:	2f bd       	sub	sp,-20
8002f50c:	d8 32       	popm	r0-r7,pc
8002f50e:	d7 03       	nop

8002f510 <__ieee754_atan2>:
8002f510:	d4 31       	pushm	r0-r7,lr
8002f512:	20 2d       	sub	sp,8
8002f514:	50 0b       	stdsp	sp[0x0],r11
8002f516:	10 96       	mov	r6,r8
8002f518:	10 92       	mov	r2,r8
8002f51a:	fd d9 c0 1f 	bfextu	lr,r9,0x0,0x1f
8002f51e:	5c 38       	neg	r8
8002f520:	14 94       	mov	r4,r10
8002f522:	0c 48       	or	r8,r6
8002f524:	16 95       	mov	r5,r11
8002f526:	12 93       	mov	r3,r9
8002f528:	14 90       	mov	r0,r10
8002f52a:	16 91       	mov	r1,r11
8002f52c:	12 9c       	mov	r12,r9
8002f52e:	fd e8 13 f8 	or	r8,lr,r8>>0x1f
8002f532:	fc 17 7f f0 	movh	r7,0x7ff0
8002f536:	0e 38       	cp.w	r8,r7
8002f538:	e0 8b 00 0e 	brhi	8002f554 <__ieee754_atan2+0x44>
8002f53c:	f1 db c0 1f 	bfextu	r8,r11,0x0,0x1f
8002f540:	f4 07 11 00 	rsub	r7,r10,0
8002f544:	fc 10 7f f0 	movh	r0,0x7ff0
8002f548:	14 47       	or	r7,r10
8002f54a:	f1 e7 13 f7 	or	r7,r8,r7>>0x1f
8002f54e:	00 37       	cp.w	r7,r0
8002f550:	e0 88 00 09 	brls	8002f562 <__ieee754_atan2+0x52>
8002f554:	04 98       	mov	r8,r2
8002f556:	06 99       	mov	r9,r3
8002f558:	08 9a       	mov	r10,r4
8002f55a:	0a 9b       	mov	r11,r5
8002f55c:	e0 a0 15 c4 	rcall	800320e4 <__avr32_f64_add>
8002f560:	ce 88       	rjmp	8002f730 <__ieee754_atan2+0x220>
8002f562:	fc 17 c0 10 	movh	r7,0xc010
8002f566:	f8 07 00 07 	add	r7,r12,r7
8002f56a:	0c 47       	or	r7,r6
8002f56c:	c0 41       	brne	8002f574 <__ieee754_atan2+0x64>
8002f56e:	e0 a0 10 9b 	rcall	800316a4 <atan>
8002f572:	cd f8       	rjmp	8002f730 <__ieee754_atan2+0x220>
8002f574:	f8 07 14 1e 	asr	r7,r12,0x1e
8002f578:	f1 ea 10 09 	or	r9,r8,r10
8002f57c:	e2 17 00 02 	andl	r7,0x2,COH
8002f580:	ef eb 13 f7 	or	r7,r7,r11>>0x1f
8002f584:	58 09       	cp.w	r9,0
8002f586:	c0 71       	brne	8002f594 <__ieee754_atan2+0x84>
8002f588:	58 27       	cp.w	r7,2
8002f58a:	c5 10       	breq	8002f62c <__ieee754_atan2+0x11c>
8002f58c:	e0 8a 00 d4 	brle	8002f734 <__ieee754_atan2+0x224>
8002f590:	58 37       	cp.w	r7,3
8002f592:	c5 60       	breq	8002f63e <__ieee754_atan2+0x12e>
8002f594:	fd e6 10 06 	or	r6,lr,r6
8002f598:	c6 00       	breq	8002f658 <__ieee754_atan2+0x148>
8002f59a:	fc 19 7f f0 	movh	r9,0x7ff0
8002f59e:	12 3e       	cp.w	lr,r9
8002f5a0:	c5 81       	brne	8002f650 <__ieee754_atan2+0x140>
8002f5a2:	12 38       	cp.w	r8,r9
8002f5a4:	c3 11       	brne	8002f606 <__ieee754_atan2+0xf6>
8002f5a6:	58 17       	cp.w	r7,1
8002f5a8:	c0 b0       	breq	8002f5be <__ieee754_atan2+0xae>
8002f5aa:	e0 89 00 05 	brgt	8002f5b4 <__ieee754_atan2+0xa4>
8002f5ae:	58 07       	cp.w	r7,0
8002f5b0:	c1 00       	breq	8002f5d0 <__ieee754_atan2+0xc0>
8002f5b2:	c5 38       	rjmp	8002f658 <__ieee754_atan2+0x148>
8002f5b4:	58 27       	cp.w	r7,2
8002f5b6:	c1 60       	breq	8002f5e2 <__ieee754_atan2+0xd2>
8002f5b8:	58 37       	cp.w	r7,3
8002f5ba:	c4 f1       	brne	8002f658 <__ieee754_atan2+0x148>
8002f5bc:	c1 c8       	rjmp	8002f5f4 <__ieee754_atan2+0xe4>
8002f5be:	e0 64 2d 18 	mov	r4,11544
8002f5c2:	ea 14 54 44 	orh	r4,0x5444
8002f5c6:	e0 65 21 fb 	mov	r5,8699
8002f5ca:	ea 15 bf e9 	orh	r5,0xbfe9
8002f5ce:	cb 38       	rjmp	8002f734 <__ieee754_atan2+0x224>
8002f5d0:	e0 64 2d 18 	mov	r4,11544
8002f5d4:	ea 14 54 44 	orh	r4,0x5444
8002f5d8:	e0 65 21 fb 	mov	r5,8699
8002f5dc:	ea 15 3f e9 	orh	r5,0x3fe9
8002f5e0:	ca a8       	rjmp	8002f734 <__ieee754_atan2+0x224>
8002f5e2:	e0 64 21 d2 	mov	r4,8658
8002f5e6:	ea 14 7f 33 	orh	r4,0x7f33
8002f5ea:	e0 65 d9 7c 	mov	r5,55676
8002f5ee:	ea 15 40 02 	orh	r5,0x4002
8002f5f2:	ca 18       	rjmp	8002f734 <__ieee754_atan2+0x224>
8002f5f4:	e0 64 21 d2 	mov	r4,8658
8002f5f8:	ea 14 7f 33 	orh	r4,0x7f33
8002f5fc:	e0 65 d9 7c 	mov	r5,55676
8002f600:	ea 15 c0 02 	orh	r5,0xc002
8002f604:	c9 88       	rjmp	8002f734 <__ieee754_atan2+0x224>
8002f606:	58 17       	cp.w	r7,1
8002f608:	c0 b0       	breq	8002f61e <__ieee754_atan2+0x10e>
8002f60a:	e0 89 00 05 	brgt	8002f614 <__ieee754_atan2+0x104>
8002f60e:	58 07       	cp.w	r7,0
8002f610:	c0 b0       	breq	8002f626 <__ieee754_atan2+0x116>
8002f612:	c1 f8       	rjmp	8002f650 <__ieee754_atan2+0x140>
8002f614:	58 27       	cp.w	r7,2
8002f616:	c0 b0       	breq	8002f62c <__ieee754_atan2+0x11c>
8002f618:	58 37       	cp.w	r7,3
8002f61a:	c1 b1       	brne	8002f650 <__ieee754_atan2+0x140>
8002f61c:	c1 18       	rjmp	8002f63e <__ieee754_atan2+0x12e>
8002f61e:	30 04       	mov	r4,0
8002f620:	fc 15 80 00 	movh	r5,0x8000
8002f624:	c8 88       	rjmp	8002f734 <__ieee754_atan2+0x224>
8002f626:	30 04       	mov	r4,0
8002f628:	30 05       	mov	r5,0
8002f62a:	c8 58       	rjmp	8002f734 <__ieee754_atan2+0x224>
8002f62c:	e0 64 2d 18 	mov	r4,11544
8002f630:	ea 14 54 44 	orh	r4,0x5444
8002f634:	e0 65 21 fb 	mov	r5,8699
8002f638:	ea 15 40 09 	orh	r5,0x4009
8002f63c:	c7 c8       	rjmp	8002f734 <__ieee754_atan2+0x224>
8002f63e:	e0 64 2d 18 	mov	r4,11544
8002f642:	ea 14 54 44 	orh	r4,0x5444
8002f646:	e0 65 21 fb 	mov	r5,8699
8002f64a:	ea 15 c0 09 	orh	r5,0xc009
8002f64e:	c7 38       	rjmp	8002f734 <__ieee754_atan2+0x224>
8002f650:	fc 10 7f f0 	movh	r0,0x7ff0
8002f654:	00 38       	cp.w	r8,r0
8002f656:	c1 51       	brne	8002f680 <__ieee754_atan2+0x170>
8002f658:	58 01       	cp.w	r1,0
8002f65a:	c0 a5       	brlt	8002f66e <__ieee754_atan2+0x15e>
8002f65c:	e0 64 2d 18 	mov	r4,11544
8002f660:	ea 14 54 44 	orh	r4,0x5444
8002f664:	e0 65 21 fb 	mov	r5,8699
8002f668:	ea 15 3f f9 	orh	r5,0x3ff9
8002f66c:	c6 48       	rjmp	8002f734 <__ieee754_atan2+0x224>
8002f66e:	e0 64 2d 18 	mov	r4,11544
8002f672:	ea 14 54 44 	orh	r4,0x5444
8002f676:	e0 65 21 fb 	mov	r5,8699
8002f67a:	ea 15 bf f9 	orh	r5,0xbff9
8002f67e:	c5 b8       	rjmp	8002f734 <__ieee754_atan2+0x224>
8002f680:	1c 18       	sub	r8,lr
8002f682:	b5 48       	asr	r8,0x14
8002f684:	e0 48 00 3c 	cp.w	r8,60
8002f688:	e0 8a 00 0b 	brle	8002f69e <__ieee754_atan2+0x18e>
8002f68c:	e0 6a 2d 18 	mov	r10,11544
8002f690:	ea 1a 54 44 	orh	r10,0x5444
8002f694:	e0 6b 21 fb 	mov	r11,8699
8002f698:	ea 1b 3f f9 	orh	r11,0x3ff9
8002f69c:	c1 48       	rjmp	8002f6c4 <__ieee754_atan2+0x1b4>
8002f69e:	fe 58 ff c4 	cp.w	r8,-60
8002f6a2:	5f 58       	srlt	r8
8002f6a4:	f1 ec 03 fc 	and	r12,r8,r12>>0x1f
8002f6a8:	c0 40       	breq	8002f6b0 <__ieee754_atan2+0x1a0>
8002f6aa:	30 0a       	mov	r10,0
8002f6ac:	30 0b       	mov	r11,0
8002f6ae:	c0 b8       	rjmp	8002f6c4 <__ieee754_atan2+0x1b4>
8002f6b0:	04 98       	mov	r8,r2
8002f6b2:	06 99       	mov	r9,r3
8002f6b4:	08 9a       	mov	r10,r4
8002f6b6:	0a 9b       	mov	r11,r5
8002f6b8:	e0 a0 16 bc 	rcall	80032430 <__avr32_f64_div>
8002f6bc:	e0 a0 11 9a 	rcall	800319f0 <fabs>
8002f6c0:	e0 a0 0f f2 	rcall	800316a4 <atan>
8002f6c4:	58 17       	cp.w	r7,1
8002f6c6:	c0 60       	breq	8002f6d2 <__ieee754_atan2+0x1c2>
8002f6c8:	58 27       	cp.w	r7,2
8002f6ca:	c0 a0       	breq	8002f6de <__ieee754_atan2+0x1ce>
8002f6cc:	58 07       	cp.w	r7,0
8002f6ce:	c1 d1       	brne	8002f708 <__ieee754_atan2+0x1f8>
8002f6d0:	c3 08       	rjmp	8002f730 <__ieee754_atan2+0x220>
8002f6d2:	fc 18 80 00 	movh	r8,0x8000
8002f6d6:	14 94       	mov	r4,r10
8002f6d8:	f6 08 00 05 	add	r5,r11,r8
8002f6dc:	c2 c8       	rjmp	8002f734 <__ieee754_atan2+0x224>
8002f6de:	e0 68 5c 07 	mov	r8,23559
8002f6e2:	ea 18 33 14 	orh	r8,0x3314
8002f6e6:	e0 69 a6 26 	mov	r9,42534
8002f6ea:	ea 19 3c a1 	orh	r9,0x3ca1
8002f6ee:	e0 a0 14 2d 	rcall	80031f48 <__avr32_f64_sub>
8002f6f2:	14 98       	mov	r8,r10
8002f6f4:	16 99       	mov	r9,r11
8002f6f6:	e0 6a 2d 18 	mov	r10,11544
8002f6fa:	ea 1a 54 44 	orh	r10,0x5444
8002f6fe:	e0 6b 21 fb 	mov	r11,8699
8002f702:	ea 1b 40 09 	orh	r11,0x4009
8002f706:	c1 38       	rjmp	8002f72c <__ieee754_atan2+0x21c>
8002f708:	e0 68 5c 07 	mov	r8,23559
8002f70c:	ea 18 33 14 	orh	r8,0x3314
8002f710:	e0 69 a6 26 	mov	r9,42534
8002f714:	ea 19 3c a1 	orh	r9,0x3ca1
8002f718:	e0 a0 14 18 	rcall	80031f48 <__avr32_f64_sub>
8002f71c:	e0 68 2d 18 	mov	r8,11544
8002f720:	ea 18 54 44 	orh	r8,0x5444
8002f724:	e0 69 21 fb 	mov	r9,8699
8002f728:	ea 19 40 09 	orh	r9,0x4009
8002f72c:	e0 a0 14 0e 	rcall	80031f48 <__avr32_f64_sub>
8002f730:	14 94       	mov	r4,r10
8002f732:	16 95       	mov	r5,r11
8002f734:	08 9a       	mov	r10,r4
8002f736:	0a 9b       	mov	r11,r5
8002f738:	2f ed       	sub	sp,-8
8002f73a:	d8 32       	popm	r0-r7,pc

8002f73c <__ieee754_pow>:
8002f73c:	d4 31       	pushm	r0-r7,lr
8002f73e:	20 ed       	sub	sp,56
8002f740:	10 94       	mov	r4,r8
8002f742:	12 95       	mov	r5,r9
8002f744:	50 7b       	stdsp	sp[0x1c],r11
8002f746:	fa e5 00 0c 	st.d	sp[12],r4
8002f74a:	12 97       	mov	r7,r9
8002f74c:	10 96       	mov	r6,r8
8002f74e:	40 31       	lddsp	r1,sp[0xc]
8002f750:	40 49       	lddsp	r9,sp[0x10]
8002f752:	e5 d1 c0 1f 	bfextu	r2,r1,0x0,0x1f
8002f756:	16 90       	mov	r0,r11
8002f758:	14 93       	mov	r3,r10
8002f75a:	14 98       	mov	r8,r10
8002f75c:	e5 e9 10 0c 	or	r12,r2,r9
8002f760:	e0 80 05 33 	breq	800301c6 <__ieee754_pow+0xa8a>
8002f764:	50 1b       	stdsp	sp[0x4],r11
8002f766:	16 9e       	mov	lr,r11
8002f768:	e9 db c0 1f 	bfextu	r4,r11,0x0,0x1f
8002f76c:	fc 1c 7f f0 	movh	r12,0x7ff0
8002f770:	18 34       	cp.w	r4,r12
8002f772:	e0 89 00 1a 	brgt	8002f7a6 <__ieee754_pow+0x6a>
8002f776:	5f 05       	sreq	r5
8002f778:	50 55       	stdsp	sp[0x14],r5
8002f77a:	30 0c       	mov	r12,0
8002f77c:	58 0a       	cp.w	r10,0
8002f77e:	5f 15       	srne	r5
8002f780:	40 5e       	lddsp	lr,sp[0x14]
8002f782:	fd e5 00 05 	and	r5,lr,r5
8002f786:	f8 05 18 00 	cp.b	r5,r12
8002f78a:	c0 e1       	brne	8002f7a6 <__ieee754_pow+0x6a>
8002f78c:	fc 1c 7f f0 	movh	r12,0x7ff0
8002f790:	18 32       	cp.w	r2,r12
8002f792:	e0 89 00 0a 	brgt	8002f7a6 <__ieee754_pow+0x6a>
8002f796:	5f 0c       	sreq	r12
8002f798:	58 09       	cp.w	r9,0
8002f79a:	5f 1e       	srne	lr
8002f79c:	f9 ee 00 0e 	and	lr,r12,lr
8002f7a0:	ea 0e 18 00 	cp.b	lr,r5
8002f7a4:	c0 d0       	breq	8002f7be <__ieee754_pow+0x82>
8002f7a6:	fc 19 c0 10 	movh	r9,0xc010
8002f7aa:	12 04       	add	r4,r9
8002f7ac:	e9 e8 10 08 	or	r8,r4,r8
8002f7b0:	e0 80 05 0b 	breq	800301c6 <__ieee754_pow+0xa8a>
8002f7b4:	4d 6c       	lddpc	r12,8002f90c <__ieee754_pow+0x1d0>
8002f7b6:	e0 a0 11 c8 	rcall	80031b46 <nan>
8002f7ba:	e0 8f 05 03 	bral	800301c0 <__ieee754_pow+0xa84>
8002f7be:	58 0b       	cp.w	r11,0
8002f7c0:	c3 64       	brge	8002f82c <__ieee754_pow+0xf0>
8002f7c2:	e0 6b ff ff 	mov	r11,65535
8002f7c6:	ea 1b 43 3f 	orh	r11,0x433f
8002f7ca:	16 32       	cp.w	r2,r11
8002f7cc:	e0 8a 00 04 	brle	8002f7d4 <__ieee754_pow+0x98>
8002f7d0:	30 25       	mov	r5,2
8002f7d2:	c2 e8       	rjmp	8002f82e <__ieee754_pow+0xf2>
8002f7d4:	e0 6a ff ff 	mov	r10,65535
8002f7d8:	ea 1a 3f ef 	orh	r10,0x3fef
8002f7dc:	14 32       	cp.w	r2,r10
8002f7de:	e0 8a 00 27 	brle	8002f82c <__ieee754_pow+0xf0>
8002f7e2:	e4 0a 14 14 	asr	r10,r2,0x14
8002f7e6:	f4 ca 03 ff 	sub	r10,r10,1023
8002f7ea:	59 4a       	cp.w	r10,20
8002f7ec:	e0 8a 00 0f 	brle	8002f80a <__ieee754_pow+0xce>
8002f7f0:	f4 0a 11 34 	rsub	r10,r10,52
8002f7f4:	f2 0a 0a 45 	lsr	r5,r9,r10
8002f7f8:	ea 0a 09 4a 	lsl	r10,r5,r10
8002f7fc:	12 3a       	cp.w	r10,r9
8002f7fe:	c1 71       	brne	8002f82c <__ieee754_pow+0xf0>
8002f800:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8002f804:	ea 05 11 02 	rsub	r5,r5,2
8002f808:	c1 38       	rjmp	8002f82e <__ieee754_pow+0xf2>
8002f80a:	40 49       	lddsp	r9,sp[0x10]
8002f80c:	58 09       	cp.w	r9,0
8002f80e:	c5 01       	brne	8002f8ae <__ieee754_pow+0x172>
8002f810:	f4 0a 11 14 	rsub	r10,r10,20
8002f814:	e4 0a 08 45 	asr	r5,r2,r10
8002f818:	ea 0a 09 4a 	lsl	r10,r5,r10
8002f81c:	04 3a       	cp.w	r10,r2
8002f81e:	e0 81 04 de 	brne	800301da <__ieee754_pow+0xa9e>
8002f822:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8002f826:	ea 05 11 02 	rsub	r5,r5,2
8002f82a:	c0 48       	rjmp	8002f832 <__ieee754_pow+0xf6>
8002f82c:	30 05       	mov	r5,0
8002f82e:	58 09       	cp.w	r9,0
8002f830:	c4 01       	brne	8002f8b0 <__ieee754_pow+0x174>
8002f832:	58 0c       	cp.w	r12,0
8002f834:	c1 90       	breq	8002f866 <__ieee754_pow+0x12a>
8002f836:	fc 19 c0 10 	movh	r9,0xc010
8002f83a:	e8 09 00 09 	add	r9,r4,r9
8002f83e:	f3 e8 10 08 	or	r8,r9,r8
8002f842:	e0 80 04 c2 	breq	800301c6 <__ieee754_pow+0xa8a>
8002f846:	e0 68 ff ff 	mov	r8,65535
8002f84a:	ea 18 3f ef 	orh	r8,0x3fef
8002f84e:	10 34       	cp.w	r4,r8
8002f850:	e0 8a 00 07 	brle	8002f85e <__ieee754_pow+0x122>
8002f854:	58 01       	cp.w	r1,0
8002f856:	e0 84 04 be 	brge	800301d2 <__ieee754_pow+0xa96>
8002f85a:	e0 8f 04 ba 	bral	800301ce <__ieee754_pow+0xa92>
8002f85e:	58 01       	cp.w	r1,0
8002f860:	e0 84 04 b7 	brge	800301ce <__ieee754_pow+0xa92>
8002f864:	c5 98       	rjmp	8002f916 <__ieee754_pow+0x1da>
8002f866:	fc 1e 3f f0 	movh	lr,0x3ff0
8002f86a:	1c 32       	cp.w	r2,lr
8002f86c:	c0 d1       	brne	8002f886 <__ieee754_pow+0x14a>
8002f86e:	58 01       	cp.w	r1,0
8002f870:	c0 55       	brlt	8002f87a <__ieee754_pow+0x13e>
8002f872:	00 97       	mov	r7,r0
8002f874:	06 96       	mov	r6,r3
8002f876:	e0 8f 04 ae 	bral	800301d2 <__ieee754_pow+0xa96>
8002f87a:	00 99       	mov	r9,r0
8002f87c:	06 98       	mov	r8,r3
8002f87e:	30 0a       	mov	r10,0
8002f880:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f884:	c5 c8       	rjmp	8002f93c <__ieee754_pow+0x200>
8002f886:	fc 1c 40 00 	movh	r12,0x4000
8002f88a:	18 31       	cp.w	r1,r12
8002f88c:	c0 41       	brne	8002f894 <__ieee754_pow+0x158>
8002f88e:	00 99       	mov	r9,r0
8002f890:	06 98       	mov	r8,r3
8002f892:	c8 68       	rjmp	8002f99e <__ieee754_pow+0x262>
8002f894:	fc 1b 3f e0 	movh	r11,0x3fe0
8002f898:	16 31       	cp.w	r1,r11
8002f89a:	c0 b1       	brne	8002f8b0 <__ieee754_pow+0x174>
8002f89c:	40 1a       	lddsp	r10,sp[0x4]
8002f89e:	58 0a       	cp.w	r10,0
8002f8a0:	c0 85       	brlt	8002f8b0 <__ieee754_pow+0x174>
8002f8a2:	00 9b       	mov	r11,r0
8002f8a4:	06 9a       	mov	r10,r3
8002f8a6:	e0 a0 06 d5 	rcall	80030650 <__ieee754_sqrt>
8002f8aa:	e0 8f 04 8b 	bral	800301c0 <__ieee754_pow+0xa84>
8002f8ae:	30 05       	mov	r5,0
8002f8b0:	50 08       	stdsp	sp[0x0],r8
8002f8b2:	00 9b       	mov	r11,r0
8002f8b4:	06 9a       	mov	r10,r3
8002f8b6:	e0 a0 10 9d 	rcall	800319f0 <fabs>
8002f8ba:	40 08       	lddsp	r8,sp[0x0]
8002f8bc:	58 08       	cp.w	r8,0
8002f8be:	c3 01       	brne	8002f91e <__ieee754_pow+0x1e2>
8002f8c0:	58 04       	cp.w	r4,0
8002f8c2:	5f 09       	sreq	r9
8002f8c4:	40 5e       	lddsp	lr,sp[0x14]
8002f8c6:	fd e9 10 09 	or	r9,lr,r9
8002f8ca:	f0 09 18 00 	cp.b	r9,r8
8002f8ce:	c0 51       	brne	8002f8d8 <__ieee754_pow+0x19c>
8002f8d0:	fc 1c 3f f0 	movh	r12,0x3ff0
8002f8d4:	18 34       	cp.w	r4,r12
8002f8d6:	c2 41       	brne	8002f91e <__ieee754_pow+0x1e2>
8002f8d8:	58 01       	cp.w	r1,0
8002f8da:	c0 84       	brge	8002f8ea <__ieee754_pow+0x1ae>
8002f8dc:	16 99       	mov	r9,r11
8002f8de:	14 98       	mov	r8,r10
8002f8e0:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f8e4:	30 0a       	mov	r10,0
8002f8e6:	e0 a0 15 a5 	rcall	80032430 <__avr32_f64_div>
8002f8ea:	16 97       	mov	r7,r11
8002f8ec:	14 96       	mov	r6,r10
8002f8ee:	40 1b       	lddsp	r11,sp[0x4]
8002f8f0:	58 0b       	cp.w	r11,0
8002f8f2:	e0 84 04 70 	brge	800301d2 <__ieee754_pow+0xa96>
8002f8f6:	fc 18 c0 10 	movh	r8,0xc010
8002f8fa:	10 04       	add	r4,r8
8002f8fc:	eb e4 10 04 	or	r4,r5,r4
8002f900:	c0 81       	brne	8002f910 <__ieee754_pow+0x1d4>
8002f902:	0e 9b       	mov	r11,r7
8002f904:	0e 99       	mov	r9,r7
8002f906:	0c 98       	mov	r8,r6
8002f908:	c1 68       	rjmp	8002f934 <__ieee754_pow+0x1f8>
8002f90a:	d7 03       	nop
8002f90c:	80 03       	ld.sh	r3,r0[0x0]
8002f90e:	35 78       	mov	r8,87
8002f910:	58 15       	cp.w	r5,1
8002f912:	e0 81 04 60 	brne	800301d2 <__ieee754_pow+0xa96>
8002f916:	ee 17 80 00 	eorh	r7,0x8000
8002f91a:	e0 8f 04 5c 	bral	800301d2 <__ieee754_pow+0xa96>
8002f91e:	40 78       	lddsp	r8,sp[0x1c]
8002f920:	bf 98       	lsr	r8,0x1f
8002f922:	20 18       	sub	r8,1
8002f924:	50 d8       	stdsp	sp[0x34],r8
8002f926:	eb e8 10 08 	or	r8,r5,r8
8002f92a:	c0 d1       	brne	8002f944 <__ieee754_pow+0x208>
8002f92c:	00 99       	mov	r9,r0
8002f92e:	06 98       	mov	r8,r3
8002f930:	06 9a       	mov	r10,r3
8002f932:	00 9b       	mov	r11,r0
8002f934:	e0 a0 13 0a 	rcall	80031f48 <__avr32_f64_sub>
8002f938:	14 98       	mov	r8,r10
8002f93a:	16 99       	mov	r9,r11
8002f93c:	e0 a0 15 7a 	rcall	80032430 <__avr32_f64_div>
8002f940:	e0 8f 04 40 	bral	800301c0 <__ieee754_pow+0xa84>
8002f944:	fc 19 41 e0 	movh	r9,0x41e0
8002f948:	12 32       	cp.w	r2,r9
8002f94a:	e0 8a 00 9f 	brle	8002fa88 <__ieee754_pow+0x34c>
8002f94e:	fc 18 43 f0 	movh	r8,0x43f0
8002f952:	10 32       	cp.w	r2,r8
8002f954:	e0 8a 00 0a 	brle	8002f968 <__ieee754_pow+0x22c>
8002f958:	e0 65 ff ff 	mov	r5,65535
8002f95c:	ea 15 3f ef 	orh	r5,0x3fef
8002f960:	0a 34       	cp.w	r4,r5
8002f962:	e0 89 00 13 	brgt	8002f988 <__ieee754_pow+0x24c>
8002f966:	c0 88       	rjmp	8002f976 <__ieee754_pow+0x23a>
8002f968:	e0 60 ff fe 	mov	r0,65534
8002f96c:	ea 10 3f ef 	orh	r0,0x3fef
8002f970:	00 34       	cp.w	r4,r0
8002f972:	e0 89 00 06 	brgt	8002f97e <__ieee754_pow+0x242>
8002f976:	58 01       	cp.w	r1,0
8002f978:	e0 84 04 2b 	brge	800301ce <__ieee754_pow+0xa92>
8002f97c:	c0 98       	rjmp	8002f98e <__ieee754_pow+0x252>
8002f97e:	fc 1e 3f f0 	movh	lr,0x3ff0
8002f982:	1c 34       	cp.w	r4,lr
8002f984:	e0 8a 00 11 	brle	8002f9a6 <__ieee754_pow+0x26a>
8002f988:	58 01       	cp.w	r1,0
8002f98a:	e0 8a 04 22 	brle	800301ce <__ieee754_pow+0xa92>
8002f98e:	e0 68 75 9c 	mov	r8,30108
8002f992:	ea 18 88 00 	orh	r8,0x8800
8002f996:	e0 69 e4 3c 	mov	r9,58428
8002f99a:	ea 19 7e 37 	orh	r9,0x7e37
8002f99e:	10 9a       	mov	r10,r8
8002f9a0:	12 9b       	mov	r11,r9
8002f9a2:	e0 8f 04 0d 	bral	800301bc <__ieee754_pow+0xa80>
8002f9a6:	30 08       	mov	r8,0
8002f9a8:	fc 19 3f f0 	movh	r9,0x3ff0
8002f9ac:	e0 a0 12 ce 	rcall	80031f48 <__avr32_f64_sub>
8002f9b0:	fc 18 60 00 	movh	r8,0x6000
8002f9b4:	14 92       	mov	r2,r10
8002f9b6:	16 93       	mov	r3,r11
8002f9b8:	e0 69 15 47 	mov	r9,5447
8002f9bc:	ea 19 3f f7 	orh	r9,0x3ff7
8002f9c0:	e0 a0 11 d8 	rcall	80031d70 <__avr32_f64_mul>
8002f9c4:	e0 68 df 44 	mov	r8,57156
8002f9c8:	ea 18 f8 5d 	orh	r8,0xf85d
8002f9cc:	fa eb 00 0c 	st.d	sp[12],r10
8002f9d0:	e0 69 ae 0b 	mov	r9,44555
8002f9d4:	ea 19 3e 54 	orh	r9,0x3e54
8002f9d8:	04 9a       	mov	r10,r2
8002f9da:	06 9b       	mov	r11,r3
8002f9dc:	e0 a0 11 ca 	rcall	80031d70 <__avr32_f64_mul>
8002f9e0:	04 98       	mov	r8,r2
8002f9e2:	fa eb 00 04 	st.d	sp[4],r10
8002f9e6:	06 99       	mov	r9,r3
8002f9e8:	04 9a       	mov	r10,r2
8002f9ea:	06 9b       	mov	r11,r3
8002f9ec:	e0 a0 11 c2 	rcall	80031d70 <__avr32_f64_mul>
8002f9f0:	30 08       	mov	r8,0
8002f9f2:	14 90       	mov	r0,r10
8002f9f4:	16 91       	mov	r1,r11
8002f9f6:	fc 19 bf d0 	movh	r9,0xbfd0
8002f9fa:	04 9a       	mov	r10,r2
8002f9fc:	06 9b       	mov	r11,r3
8002f9fe:	e0 a0 11 b9 	rcall	80031d70 <__avr32_f64_mul>
8002fa02:	e0 68 55 55 	mov	r8,21845
8002fa06:	ea 18 55 55 	orh	r8,0x5555
8002fa0a:	e0 69 55 55 	mov	r9,21845
8002fa0e:	ea 19 3f d5 	orh	r9,0x3fd5
8002fa12:	e0 a0 13 69 	rcall	800320e4 <__avr32_f64_add>
8002fa16:	14 98       	mov	r8,r10
8002fa18:	16 99       	mov	r9,r11
8002fa1a:	04 9a       	mov	r10,r2
8002fa1c:	06 9b       	mov	r11,r3
8002fa1e:	e0 a0 11 a9 	rcall	80031d70 <__avr32_f64_mul>
8002fa22:	14 98       	mov	r8,r10
8002fa24:	16 99       	mov	r9,r11
8002fa26:	30 0a       	mov	r10,0
8002fa28:	fc 1b 3f e0 	movh	r11,0x3fe0
8002fa2c:	e0 a0 12 8e 	rcall	80031f48 <__avr32_f64_sub>
8002fa30:	14 98       	mov	r8,r10
8002fa32:	16 99       	mov	r9,r11
8002fa34:	00 9a       	mov	r10,r0
8002fa36:	02 9b       	mov	r11,r1
8002fa38:	e0 a0 11 9c 	rcall	80031d70 <__avr32_f64_mul>
8002fa3c:	e0 68 82 fe 	mov	r8,33534
8002fa40:	ea 18 65 2b 	orh	r8,0x652b
8002fa44:	e0 69 15 47 	mov	r9,5447
8002fa48:	ea 19 bf f7 	orh	r9,0xbff7
8002fa4c:	e0 a0 11 92 	rcall	80031d70 <__avr32_f64_mul>
8002fa50:	14 98       	mov	r8,r10
8002fa52:	16 99       	mov	r9,r11
8002fa54:	fa ea 00 04 	ld.d	r10,sp[4]
8002fa58:	e0 a0 13 46 	rcall	800320e4 <__avr32_f64_add>
8002fa5c:	16 91       	mov	r1,r11
8002fa5e:	14 98       	mov	r8,r10
8002fa60:	14 90       	mov	r0,r10
8002fa62:	02 99       	mov	r9,r1
8002fa64:	fa ea 00 0c 	ld.d	r10,sp[12]
8002fa68:	e0 a0 13 3e 	rcall	800320e4 <__avr32_f64_add>
8002fa6c:	fa e8 00 0c 	ld.d	r8,sp[12]
8002fa70:	16 93       	mov	r3,r11
8002fa72:	30 02       	mov	r2,0
8002fa74:	06 9b       	mov	r11,r3
8002fa76:	04 9a       	mov	r10,r2
8002fa78:	e0 a0 12 68 	rcall	80031f48 <__avr32_f64_sub>
8002fa7c:	14 98       	mov	r8,r10
8002fa7e:	16 99       	mov	r9,r11
8002fa80:	00 9a       	mov	r10,r0
8002fa82:	02 9b       	mov	r11,r1
8002fa84:	e0 8f 01 c6 	bral	8002fe10 <__ieee754_pow+0x6d4>
8002fa88:	ee 54 ff ff 	cp.w	r4,1048575
8002fa8c:	e0 8a 00 04 	brle	8002fa94 <__ieee754_pow+0x358>
8002fa90:	30 0c       	mov	r12,0
8002fa92:	c0 98       	rjmp	8002faa4 <__ieee754_pow+0x368>
8002fa94:	fc 19 43 40 	movh	r9,0x4340
8002fa98:	30 08       	mov	r8,0
8002fa9a:	e0 a0 11 6b 	rcall	80031d70 <__avr32_f64_mul>
8002fa9e:	3c bc       	mov	r12,-53
8002faa0:	16 99       	mov	r9,r11
8002faa2:	12 94       	mov	r4,r9
8002faa4:	f1 d4 c0 14 	bfextu	r8,r4,0x0,0x14
8002faa8:	f8 cc 03 ff 	sub	r12,r12,1023
8002faac:	b5 44       	asr	r4,0x14
8002faae:	10 93       	mov	r3,r8
8002fab0:	08 0c       	add	r12,r4
8002fab2:	ea 13 3f f0 	orh	r3,0x3ff0
8002fab6:	e2 58 98 8e 	cp.w	r8,235662
8002faba:	e0 8a 00 0c 	brle	8002fad2 <__ieee754_pow+0x396>
8002fabe:	ea 58 b6 79 	cp.w	r8,767609
8002fac2:	e0 89 00 04 	brgt	8002faca <__ieee754_pow+0x38e>
8002fac6:	30 14       	mov	r4,1
8002fac8:	c0 68       	rjmp	8002fad4 <__ieee754_pow+0x398>
8002faca:	f0 68 00 00 	mov	r8,-1048576
8002face:	2f fc       	sub	r12,-1
8002fad0:	10 03       	add	r3,r8
8002fad2:	30 04       	mov	r4,0
8002fad4:	14 98       	mov	r8,r10
8002fad6:	06 99       	mov	r9,r3
8002fad8:	4d ea       	lddpc	r10,8002fc50 <__ieee754_pow+0x514>
8002fada:	50 0c       	stdsp	sp[0x0],r12
8002fadc:	f4 04 02 30 	ld.d	r0,r10[r4<<0x3]
8002fae0:	fa e9 00 14 	st.d	sp[20],r8
8002fae4:	fa e1 00 1c 	st.d	sp[28],r0
8002fae8:	00 98       	mov	r8,r0
8002faea:	02 99       	mov	r9,r1
8002faec:	fa ea 00 14 	ld.d	r10,sp[20]
8002faf0:	e0 a0 12 2c 	rcall	80031f48 <__avr32_f64_sub>
8002faf4:	fa e8 00 1c 	ld.d	r8,sp[28]
8002faf8:	fa eb 00 24 	st.d	sp[36],r10
8002fafc:	fa ea 00 14 	ld.d	r10,sp[20]
8002fb00:	e0 a0 12 f2 	rcall	800320e4 <__avr32_f64_add>
8002fb04:	14 98       	mov	r8,r10
8002fb06:	16 99       	mov	r9,r11
8002fb08:	30 0a       	mov	r10,0
8002fb0a:	fc 1b 3f f0 	movh	r11,0x3ff0
8002fb0e:	e0 a0 14 91 	rcall	80032430 <__avr32_f64_div>
8002fb12:	14 98       	mov	r8,r10
8002fb14:	16 99       	mov	r9,r11
8002fb16:	fa eb 00 2c 	st.d	sp[44],r10
8002fb1a:	fa ea 00 24 	ld.d	r10,sp[36]
8002fb1e:	e0 a0 11 29 	rcall	80031d70 <__avr32_f64_mul>
8002fb22:	30 09       	mov	r9,0
8002fb24:	fa eb 00 0c 	st.d	sp[12],r10
8002fb28:	fa eb 00 04 	st.d	sp[4],r10
8002fb2c:	a1 53       	asr	r3,0x1
8002fb2e:	30 0a       	mov	r10,0
8002fb30:	bd b3       	sbr	r3,0x1d
8002fb32:	e8 08 15 12 	lsl	r8,r4,0x12
8002fb36:	f8 28 00 00 	sub	r8,-524288
8002fb3a:	f0 03 00 0b 	add	r11,r8,r3
8002fb3e:	50 49       	stdsp	sp[0x10],r9
8002fb40:	14 92       	mov	r2,r10
8002fb42:	fa e0 00 0c 	ld.d	r0,sp[12]
8002fb46:	16 93       	mov	r3,r11
8002fb48:	14 98       	mov	r8,r10
8002fb4a:	16 99       	mov	r9,r11
8002fb4c:	00 9a       	mov	r10,r0
8002fb4e:	02 9b       	mov	r11,r1
8002fb50:	e0 a0 11 10 	rcall	80031d70 <__avr32_f64_mul>
8002fb54:	14 98       	mov	r8,r10
8002fb56:	16 99       	mov	r9,r11
8002fb58:	fa ea 00 24 	ld.d	r10,sp[36]
8002fb5c:	e0 a0 11 f6 	rcall	80031f48 <__avr32_f64_sub>
8002fb60:	fa e8 00 1c 	ld.d	r8,sp[28]
8002fb64:	fa eb 00 24 	st.d	sp[36],r10
8002fb68:	04 9a       	mov	r10,r2
8002fb6a:	06 9b       	mov	r11,r3
8002fb6c:	e0 a0 11 ee 	rcall	80031f48 <__avr32_f64_sub>
8002fb70:	14 98       	mov	r8,r10
8002fb72:	16 99       	mov	r9,r11
8002fb74:	fa ea 00 14 	ld.d	r10,sp[20]
8002fb78:	e0 a0 11 e8 	rcall	80031f48 <__avr32_f64_sub>
8002fb7c:	14 98       	mov	r8,r10
8002fb7e:	16 99       	mov	r9,r11
8002fb80:	00 9a       	mov	r10,r0
8002fb82:	02 9b       	mov	r11,r1
8002fb84:	e0 a0 10 f6 	rcall	80031d70 <__avr32_f64_mul>
8002fb88:	14 98       	mov	r8,r10
8002fb8a:	16 99       	mov	r9,r11
8002fb8c:	fa ea 00 24 	ld.d	r10,sp[36]
8002fb90:	e0 a0 11 dc 	rcall	80031f48 <__avr32_f64_sub>
8002fb94:	14 98       	mov	r8,r10
8002fb96:	16 99       	mov	r9,r11
8002fb98:	fa ea 00 2c 	ld.d	r10,sp[44]
8002fb9c:	e0 a0 10 ea 	rcall	80031d70 <__avr32_f64_mul>
8002fba0:	fa e8 00 04 	ld.d	r8,sp[4]
8002fba4:	fa eb 00 14 	st.d	sp[20],r10
8002fba8:	10 9a       	mov	r10,r8
8002fbaa:	12 9b       	mov	r11,r9
8002fbac:	e0 a0 10 e2 	rcall	80031d70 <__avr32_f64_mul>
8002fbb0:	16 93       	mov	r3,r11
8002fbb2:	14 92       	mov	r2,r10
8002fbb4:	06 99       	mov	r9,r3
8002fbb6:	14 98       	mov	r8,r10
8002fbb8:	e0 a0 10 dc 	rcall	80031d70 <__avr32_f64_mul>
8002fbbc:	e0 68 4e ef 	mov	r8,20207
8002fbc0:	ea 18 4a 45 	orh	r8,0x4a45
8002fbc4:	fa eb 00 1c 	st.d	sp[28],r10
8002fbc8:	e0 69 7e 28 	mov	r9,32296
8002fbcc:	ea 19 3f ca 	orh	r9,0x3fca
8002fbd0:	04 9a       	mov	r10,r2
8002fbd2:	06 9b       	mov	r11,r3
8002fbd4:	e0 a0 10 ce 	rcall	80031d70 <__avr32_f64_mul>
8002fbd8:	e0 68 db 65 	mov	r8,56165
8002fbdc:	ea 18 93 c9 	orh	r8,0x93c9
8002fbe0:	e0 69 86 4a 	mov	r9,34378
8002fbe4:	ea 19 3f cd 	orh	r9,0x3fcd
8002fbe8:	e0 a0 12 7e 	rcall	800320e4 <__avr32_f64_add>
8002fbec:	14 98       	mov	r8,r10
8002fbee:	16 99       	mov	r9,r11
8002fbf0:	04 9a       	mov	r10,r2
8002fbf2:	06 9b       	mov	r11,r3
8002fbf4:	e0 a0 10 be 	rcall	80031d70 <__avr32_f64_mul>
8002fbf8:	e0 68 41 01 	mov	r8,16641
8002fbfc:	ea 18 a9 1d 	orh	r8,0xa91d
8002fc00:	e0 69 74 60 	mov	r9,29792
8002fc04:	ea 19 3f d1 	orh	r9,0x3fd1
8002fc08:	e0 a0 12 6e 	rcall	800320e4 <__avr32_f64_add>
8002fc0c:	14 98       	mov	r8,r10
8002fc0e:	16 99       	mov	r9,r11
8002fc10:	04 9a       	mov	r10,r2
8002fc12:	06 9b       	mov	r11,r3
8002fc14:	e0 a0 10 ae 	rcall	80031d70 <__avr32_f64_mul>
8002fc18:	e0 68 26 4d 	mov	r8,9805
8002fc1c:	ea 18 51 8f 	orh	r8,0x518f
8002fc20:	e0 69 55 55 	mov	r9,21845
8002fc24:	ea 19 3f d5 	orh	r9,0x3fd5
8002fc28:	e0 a0 12 5e 	rcall	800320e4 <__avr32_f64_add>
8002fc2c:	14 98       	mov	r8,r10
8002fc2e:	16 99       	mov	r9,r11
8002fc30:	04 9a       	mov	r10,r2
8002fc32:	06 9b       	mov	r11,r3
8002fc34:	e0 a0 10 9e 	rcall	80031d70 <__avr32_f64_mul>
8002fc38:	e0 68 ab ff 	mov	r8,44031
8002fc3c:	ea 18 db 6f 	orh	r8,0xdb6f
8002fc40:	e0 69 6d b6 	mov	r9,28086
8002fc44:	ea 19 3f db 	orh	r9,0x3fdb
8002fc48:	e0 a0 12 4e 	rcall	800320e4 <__avr32_f64_add>
8002fc4c:	c0 48       	rjmp	8002fc54 <__ieee754_pow+0x518>
8002fc4e:	d7 03       	nop
8002fc50:	80 03       	ld.sh	r3,r0[0x0]
8002fc52:	35 b0       	mov	r0,91
8002fc54:	14 98       	mov	r8,r10
8002fc56:	16 99       	mov	r9,r11
8002fc58:	04 9a       	mov	r10,r2
8002fc5a:	06 9b       	mov	r11,r3
8002fc5c:	e0 a0 10 8a 	rcall	80031d70 <__avr32_f64_mul>
8002fc60:	e0 68 33 03 	mov	r8,13059
8002fc64:	ea 18 33 33 	orh	r8,0x3333
8002fc68:	e0 69 33 33 	mov	r9,13107
8002fc6c:	ea 19 3f e3 	orh	r9,0x3fe3
8002fc70:	e0 a0 12 3a 	rcall	800320e4 <__avr32_f64_add>
8002fc74:	14 98       	mov	r8,r10
8002fc76:	16 99       	mov	r9,r11
8002fc78:	fa ea 00 1c 	ld.d	r10,sp[28]
8002fc7c:	e0 a0 10 7a 	rcall	80031d70 <__avr32_f64_mul>
8002fc80:	fa e8 00 04 	ld.d	r8,sp[4]
8002fc84:	14 92       	mov	r2,r10
8002fc86:	16 93       	mov	r3,r11
8002fc88:	00 9a       	mov	r10,r0
8002fc8a:	02 9b       	mov	r11,r1
8002fc8c:	e0 a0 12 2c 	rcall	800320e4 <__avr32_f64_add>
8002fc90:	14 98       	mov	r8,r10
8002fc92:	16 99       	mov	r9,r11
8002fc94:	fa ea 00 14 	ld.d	r10,sp[20]
8002fc98:	e0 a0 10 6c 	rcall	80031d70 <__avr32_f64_mul>
8002fc9c:	14 98       	mov	r8,r10
8002fc9e:	16 99       	mov	r9,r11
8002fca0:	04 9a       	mov	r10,r2
8002fca2:	06 9b       	mov	r11,r3
8002fca4:	e0 a0 12 20 	rcall	800320e4 <__avr32_f64_add>
8002fca8:	00 98       	mov	r8,r0
8002fcaa:	fa eb 00 1c 	st.d	sp[28],r10
8002fcae:	02 99       	mov	r9,r1
8002fcb0:	00 9a       	mov	r10,r0
8002fcb2:	02 9b       	mov	r11,r1
8002fcb4:	e0 a0 10 5e 	rcall	80031d70 <__avr32_f64_mul>
8002fcb8:	30 08       	mov	r8,0
8002fcba:	fc 19 40 08 	movh	r9,0x4008
8002fcbe:	fa eb 00 2c 	st.d	sp[44],r10
8002fcc2:	e0 a0 12 11 	rcall	800320e4 <__avr32_f64_add>
8002fcc6:	fa e8 00 1c 	ld.d	r8,sp[28]
8002fcca:	e0 a0 12 0d 	rcall	800320e4 <__avr32_f64_add>
8002fcce:	40 48       	lddsp	r8,sp[0x10]
8002fcd0:	16 93       	mov	r3,r11
8002fcd2:	10 92       	mov	r2,r8
8002fcd4:	06 99       	mov	r9,r3
8002fcd6:	00 9a       	mov	r10,r0
8002fcd8:	02 9b       	mov	r11,r1
8002fcda:	e0 a0 10 4b 	rcall	80031d70 <__avr32_f64_mul>
8002fcde:	04 98       	mov	r8,r2
8002fce0:	06 99       	mov	r9,r3
8002fce2:	fa eb 00 24 	st.d	sp[36],r10
8002fce6:	fa ea 00 14 	ld.d	r10,sp[20]
8002fcea:	e0 a0 10 43 	rcall	80031d70 <__avr32_f64_mul>
8002fcee:	30 08       	mov	r8,0
8002fcf0:	14 90       	mov	r0,r10
8002fcf2:	16 91       	mov	r1,r11
8002fcf4:	04 9a       	mov	r10,r2
8002fcf6:	06 9b       	mov	r11,r3
8002fcf8:	fc 19 40 08 	movh	r9,0x4008
8002fcfc:	e0 a0 11 26 	rcall	80031f48 <__avr32_f64_sub>
8002fd00:	fa e8 00 2c 	ld.d	r8,sp[44]
8002fd04:	e0 a0 11 22 	rcall	80031f48 <__avr32_f64_sub>
8002fd08:	14 98       	mov	r8,r10
8002fd0a:	16 99       	mov	r9,r11
8002fd0c:	fa ea 00 1c 	ld.d	r10,sp[28]
8002fd10:	e0 a0 11 1c 	rcall	80031f48 <__avr32_f64_sub>
8002fd14:	fa e8 00 04 	ld.d	r8,sp[4]
8002fd18:	e0 a0 10 2c 	rcall	80031d70 <__avr32_f64_mul>
8002fd1c:	14 98       	mov	r8,r10
8002fd1e:	16 99       	mov	r9,r11
8002fd20:	00 9a       	mov	r10,r0
8002fd22:	02 9b       	mov	r11,r1
8002fd24:	e0 a0 11 e0 	rcall	800320e4 <__avr32_f64_add>
8002fd28:	16 91       	mov	r1,r11
8002fd2a:	14 90       	mov	r0,r10
8002fd2c:	14 98       	mov	r8,r10
8002fd2e:	02 99       	mov	r9,r1
8002fd30:	fa ea 00 24 	ld.d	r10,sp[36]
8002fd34:	e0 a0 11 d8 	rcall	800320e4 <__avr32_f64_add>
8002fd38:	40 4e       	lddsp	lr,sp[0x10]
8002fd3a:	16 93       	mov	r3,r11
8002fd3c:	1c 92       	mov	r2,lr
8002fd3e:	1c 9a       	mov	r10,lr
8002fd40:	fc 18 e0 00 	movh	r8,0xe000
8002fd44:	e0 69 c7 09 	mov	r9,50953
8002fd48:	ea 19 3f ee 	orh	r9,0x3fee
8002fd4c:	06 9b       	mov	r11,r3
8002fd4e:	e0 a0 10 11 	rcall	80031d70 <__avr32_f64_mul>
8002fd52:	e0 68 01 f5 	mov	r8,501
8002fd56:	ea 18 14 5b 	orh	r8,0x145b
8002fd5a:	fa eb 00 14 	st.d	sp[20],r10
8002fd5e:	e0 69 2f e0 	mov	r9,12256
8002fd62:	ea 19 be 3e 	orh	r9,0xbe3e
8002fd66:	04 9a       	mov	r10,r2
8002fd68:	06 9b       	mov	r11,r3
8002fd6a:	e0 a0 10 03 	rcall	80031d70 <__avr32_f64_mul>
8002fd6e:	fa e8 00 24 	ld.d	r8,sp[36]
8002fd72:	fa eb 00 04 	st.d	sp[4],r10
8002fd76:	04 9a       	mov	r10,r2
8002fd78:	06 9b       	mov	r11,r3
8002fd7a:	e0 a0 10 e7 	rcall	80031f48 <__avr32_f64_sub>
8002fd7e:	14 98       	mov	r8,r10
8002fd80:	16 99       	mov	r9,r11
8002fd82:	00 9a       	mov	r10,r0
8002fd84:	02 9b       	mov	r11,r1
8002fd86:	e0 a0 10 e1 	rcall	80031f48 <__avr32_f64_sub>
8002fd8a:	e0 68 03 fd 	mov	r8,1021
8002fd8e:	ea 18 dc 3a 	orh	r8,0xdc3a
8002fd92:	e0 69 c7 09 	mov	r9,50953
8002fd96:	ea 19 3f ee 	orh	r9,0x3fee
8002fd9a:	e0 a0 0f eb 	rcall	80031d70 <__avr32_f64_mul>
8002fd9e:	14 98       	mov	r8,r10
8002fda0:	16 99       	mov	r9,r11
8002fda2:	fa ea 00 04 	ld.d	r10,sp[4]
8002fda6:	e0 a0 11 9f 	rcall	800320e4 <__avr32_f64_add>
8002fdaa:	4a 18       	lddpc	r8,8002fe2c <__ieee754_pow+0x6f0>
8002fdac:	f0 04 02 38 	ld.d	r8,r8[r4<<0x3]
8002fdb0:	e0 a0 11 9a 	rcall	800320e4 <__avr32_f64_add>
8002fdb4:	40 0c       	lddsp	r12,sp[0x0]
8002fdb6:	fa eb 00 1c 	st.d	sp[28],r10
8002fdba:	e0 a0 12 36 	rcall	80032226 <__avr32_s32_to_f64>
8002fdbe:	49 d8       	lddpc	r8,8002fe30 <__ieee754_pow+0x6f4>
8002fdc0:	14 90       	mov	r0,r10
8002fdc2:	16 91       	mov	r1,r11
8002fdc4:	f0 04 02 3a 	ld.d	r10,r8[r4<<0x3]
8002fdc8:	fa e8 00 1c 	ld.d	r8,sp[28]
8002fdcc:	fa eb 00 04 	st.d	sp[4],r10
8002fdd0:	fa ea 00 14 	ld.d	r10,sp[20]
8002fdd4:	e0 a0 11 88 	rcall	800320e4 <__avr32_f64_add>
8002fdd8:	fa e8 00 04 	ld.d	r8,sp[4]
8002fddc:	e0 a0 11 84 	rcall	800320e4 <__avr32_f64_add>
8002fde0:	00 98       	mov	r8,r0
8002fde2:	02 99       	mov	r9,r1
8002fde4:	e0 a0 11 80 	rcall	800320e4 <__avr32_f64_add>
8002fde8:	00 98       	mov	r8,r0
8002fdea:	02 99       	mov	r9,r1
8002fdec:	40 4a       	lddsp	r10,sp[0x10]
8002fdee:	16 93       	mov	r3,r11
8002fdf0:	14 92       	mov	r2,r10
8002fdf2:	06 9b       	mov	r11,r3
8002fdf4:	e0 a0 10 aa 	rcall	80031f48 <__avr32_f64_sub>
8002fdf8:	fa e8 00 04 	ld.d	r8,sp[4]
8002fdfc:	e0 a0 10 a6 	rcall	80031f48 <__avr32_f64_sub>
8002fe00:	fa e8 00 14 	ld.d	r8,sp[20]
8002fe04:	e0 a0 10 a2 	rcall	80031f48 <__avr32_f64_sub>
8002fe08:	14 98       	mov	r8,r10
8002fe0a:	16 99       	mov	r9,r11
8002fe0c:	fa ea 00 1c 	ld.d	r10,sp[28]
8002fe10:	e0 a0 10 9c 	rcall	80031f48 <__avr32_f64_sub>
8002fe14:	20 15       	sub	r5,1
8002fe16:	40 d9       	lddsp	r9,sp[0x34]
8002fe18:	14 90       	mov	r0,r10
8002fe1a:	16 91       	mov	r1,r11
8002fe1c:	12 45       	or	r5,r9
8002fe1e:	c0 b0       	breq	8002fe34 <__ieee754_pow+0x6f8>
8002fe20:	30 04       	mov	r4,0
8002fe22:	fc 15 3f f0 	movh	r5,0x3ff0
8002fe26:	fa e5 00 0c 	st.d	sp[12],r4
8002fe2a:	c0 a8       	rjmp	8002fe3e <__ieee754_pow+0x702>
8002fe2c:	80 03       	ld.sh	r3,r0[0x0]
8002fe2e:	35 a0       	mov	r0,90
8002fe30:	80 03       	ld.sh	r3,r0[0x0]
8002fe32:	35 90       	mov	r0,89
8002fe34:	30 0a       	mov	r10,0
8002fe36:	fc 1b bf f0 	movh	r11,0xbff0
8002fe3a:	fa eb 00 0c 	st.d	sp[12],r10
8002fe3e:	0e 99       	mov	r9,r7
8002fe40:	30 08       	mov	r8,0
8002fe42:	0e 9b       	mov	r11,r7
8002fe44:	fa e9 00 04 	st.d	sp[4],r8
8002fe48:	0c 9a       	mov	r10,r6
8002fe4a:	e0 a0 10 7f 	rcall	80031f48 <__avr32_f64_sub>
8002fe4e:	04 98       	mov	r8,r2
8002fe50:	06 99       	mov	r9,r3
8002fe52:	e0 a0 0f 8f 	rcall	80031d70 <__avr32_f64_mul>
8002fe56:	00 98       	mov	r8,r0
8002fe58:	14 94       	mov	r4,r10
8002fe5a:	16 95       	mov	r5,r11
8002fe5c:	02 99       	mov	r9,r1
8002fe5e:	0e 9b       	mov	r11,r7
8002fe60:	0c 9a       	mov	r10,r6
8002fe62:	e0 a0 0f 87 	rcall	80031d70 <__avr32_f64_mul>
8002fe66:	14 98       	mov	r8,r10
8002fe68:	16 99       	mov	r9,r11
8002fe6a:	08 9a       	mov	r10,r4
8002fe6c:	0a 9b       	mov	r11,r5
8002fe6e:	e0 a0 11 3b 	rcall	800320e4 <__avr32_f64_add>
8002fe72:	04 98       	mov	r8,r2
8002fe74:	06 99       	mov	r9,r3
8002fe76:	14 90       	mov	r0,r10
8002fe78:	16 91       	mov	r1,r11
8002fe7a:	fa ea 00 04 	ld.d	r10,sp[4]
8002fe7e:	e0 a0 0f 79 	rcall	80031d70 <__avr32_f64_mul>
8002fe82:	14 94       	mov	r4,r10
8002fe84:	16 95       	mov	r5,r11
8002fe86:	08 98       	mov	r8,r4
8002fe88:	00 9a       	mov	r10,r0
8002fe8a:	02 9b       	mov	r11,r1
8002fe8c:	0a 99       	mov	r9,r5
8002fe8e:	fa e5 00 04 	st.d	sp[4],r4
8002fe92:	e0 a0 11 29 	rcall	800320e4 <__avr32_f64_add>
8002fe96:	e0 6e ff ff 	mov	lr,65535
8002fe9a:	ea 1e 40 8f 	orh	lr,0x408f
8002fe9e:	16 93       	mov	r3,r11
8002fea0:	14 92       	mov	r2,r10
8002fea2:	06 97       	mov	r7,r3
8002fea4:	06 98       	mov	r8,r3
8002fea6:	1c 33       	cp.w	r3,lr
8002fea8:	e0 8a 00 36 	brle	8002ff14 <__ieee754_pow+0x7d8>
8002feac:	fc 1a bf 70 	movh	r10,0xbf70
8002feb0:	14 08       	add	r8,r10
8002feb2:	f1 e2 10 09 	or	r9,r8,r2
8002feb6:	c1 a1       	brne	8002feea <__ieee754_pow+0x7ae>
8002feb8:	e0 68 82 fe 	mov	r8,33534
8002febc:	ea 18 65 2b 	orh	r8,0x652b
8002fec0:	e0 69 15 47 	mov	r9,5447
8002fec4:	ea 19 3c 97 	orh	r9,0x3c97
8002fec8:	00 9a       	mov	r10,r0
8002feca:	02 9b       	mov	r11,r1
8002fecc:	e0 a0 11 0c 	rcall	800320e4 <__avr32_f64_add>
8002fed0:	08 98       	mov	r8,r4
8002fed2:	fa eb 00 14 	st.d	sp[20],r10
8002fed6:	0a 99       	mov	r9,r5
8002fed8:	04 9a       	mov	r10,r2
8002feda:	06 9b       	mov	r11,r3
8002fedc:	e0 a0 10 36 	rcall	80031f48 <__avr32_f64_sub>
8002fee0:	fa e8 00 14 	ld.d	r8,sp[20]
8002fee4:	e0 a0 12 58 	rcall	80032394 <__avr32_f64_cmp_lt>
8002fee8:	c4 40       	breq	8002ff70 <__ieee754_pow+0x834>
8002feea:	e0 68 75 9c 	mov	r8,30108
8002feee:	ea 18 88 00 	orh	r8,0x8800
8002fef2:	e0 69 e4 3c 	mov	r9,58428
8002fef6:	ea 19 7e 37 	orh	r9,0x7e37
8002fefa:	fa ea 00 0c 	ld.d	r10,sp[12]
8002fefe:	e0 a0 0f 39 	rcall	80031d70 <__avr32_f64_mul>
8002ff02:	e0 68 75 9c 	mov	r8,30108
8002ff06:	ea 18 88 00 	orh	r8,0x8800
8002ff0a:	e0 69 e4 3c 	mov	r9,58428
8002ff0e:	ea 19 7e 37 	orh	r9,0x7e37
8002ff12:	c5 59       	rjmp	800301bc <__ieee754_pow+0xa80>
8002ff14:	f9 d3 c0 1f 	bfextu	r12,r3,0x0,0x1f
8002ff18:	e0 6e cb ff 	mov	lr,52223
8002ff1c:	ea 1e 40 90 	orh	lr,0x4090
8002ff20:	1c 3c       	cp.w	r12,lr
8002ff22:	e0 8a 00 27 	brle	8002ff70 <__ieee754_pow+0x834>
8002ff26:	e0 6c 34 00 	mov	r12,13312
8002ff2a:	ea 1c 3f 6f 	orh	r12,0x3f6f
8002ff2e:	18 08       	add	r8,r12
8002ff30:	14 48       	or	r8,r10
8002ff32:	c0 a1       	brne	8002ff46 <__ieee754_pow+0x80a>
8002ff34:	08 98       	mov	r8,r4
8002ff36:	0a 99       	mov	r9,r5
8002ff38:	e0 a0 10 08 	rcall	80031f48 <__avr32_f64_sub>
8002ff3c:	00 98       	mov	r8,r0
8002ff3e:	02 99       	mov	r9,r1
8002ff40:	e0 a0 11 f6 	rcall	8003232c <__avr32_f64_cmp_ge>
8002ff44:	c1 60       	breq	8002ff70 <__ieee754_pow+0x834>
8002ff46:	e0 68 f3 59 	mov	r8,62297
8002ff4a:	ea 18 c2 f8 	orh	r8,0xc2f8
8002ff4e:	e0 69 6e 1f 	mov	r9,28191
8002ff52:	ea 19 01 a5 	orh	r9,0x1a5
8002ff56:	fa ea 00 0c 	ld.d	r10,sp[12]
8002ff5a:	e0 a0 0f 0b 	rcall	80031d70 <__avr32_f64_mul>
8002ff5e:	e0 68 f3 59 	mov	r8,62297
8002ff62:	ea 18 c2 f8 	orh	r8,0xc2f8
8002ff66:	e0 69 6e 1f 	mov	r9,28191
8002ff6a:	ea 19 01 a5 	orh	r9,0x1a5
8002ff6e:	c2 79       	rjmp	800301bc <__ieee754_pow+0xa80>
8002ff70:	f1 d7 c0 1f 	bfextu	r8,r7,0x0,0x1f
8002ff74:	fc 1c 3f e0 	movh	r12,0x3fe0
8002ff78:	18 38       	cp.w	r8,r12
8002ff7a:	e0 89 00 04 	brgt	8002ff82 <__ieee754_pow+0x846>
8002ff7e:	30 06       	mov	r6,0
8002ff80:	c2 78       	rjmp	8002ffce <__ieee754_pow+0x892>
8002ff82:	fc 19 00 10 	movh	r9,0x10
8002ff86:	b5 48       	asr	r8,0x14
8002ff88:	f0 c8 03 fe 	sub	r8,r8,1022
8002ff8c:	f2 08 08 48 	asr	r8,r9,r8
8002ff90:	0e 08       	add	r8,r7
8002ff92:	f3 d8 c0 14 	bfextu	r9,r8,0x0,0x14
8002ff96:	b5 a9       	sbr	r9,0x14
8002ff98:	f9 d8 c2 8b 	bfextu	r12,r8,0x14,0xb
8002ff9c:	30 0a       	mov	r10,0
8002ff9e:	f8 cc 03 ff 	sub	r12,r12,1023
8002ffa2:	f8 06 11 14 	rsub	r6,r12,20
8002ffa6:	f2 06 08 46 	asr	r6,r9,r6
8002ffaa:	ee 79 ff ff 	mov	r9,1048575
8002ffae:	f2 0c 08 4c 	asr	r12,r9,r12
8002ffb2:	5c dc       	com	r12
8002ffb4:	f9 e8 00 0b 	and	r11,r12,r8
8002ffb8:	58 07       	cp.w	r7,0
8002ffba:	fb b6 05 00 	rsublt	r6,0
8002ffbe:	14 98       	mov	r8,r10
8002ffc0:	16 99       	mov	r9,r11
8002ffc2:	08 9a       	mov	r10,r4
8002ffc4:	0a 9b       	mov	r11,r5
8002ffc6:	e0 a0 0f c1 	rcall	80031f48 <__avr32_f64_sub>
8002ffca:	fa eb 00 04 	st.d	sp[4],r10
8002ffce:	fa e8 00 04 	ld.d	r8,sp[4]
8002ffd2:	00 9a       	mov	r10,r0
8002ffd4:	02 9b       	mov	r11,r1
8002ffd6:	e0 a0 10 87 	rcall	800320e4 <__avr32_f64_add>
8002ffda:	30 04       	mov	r4,0
8002ffdc:	16 95       	mov	r5,r11
8002ffde:	30 08       	mov	r8,0
8002ffe0:	e0 69 2e 43 	mov	r9,11843
8002ffe4:	ea 19 3f e6 	orh	r9,0x3fe6
8002ffe8:	08 9a       	mov	r10,r4
8002ffea:	0a 9b       	mov	r11,r5
8002ffec:	e0 a0 0e c2 	rcall	80031d70 <__avr32_f64_mul>
8002fff0:	fa e8 00 04 	ld.d	r8,sp[4]
8002fff4:	fa eb 00 14 	st.d	sp[20],r10
8002fff8:	08 9a       	mov	r10,r4
8002fffa:	0a 9b       	mov	r11,r5
8002fffc:	e0 a0 0f a6 	rcall	80031f48 <__avr32_f64_sub>
80030000:	14 98       	mov	r8,r10
80030002:	16 99       	mov	r9,r11
80030004:	00 9a       	mov	r10,r0
80030006:	02 9b       	mov	r11,r1
80030008:	e0 a0 0f a0 	rcall	80031f48 <__avr32_f64_sub>
8003000c:	e0 68 39 ef 	mov	r8,14831
80030010:	ea 18 fe fa 	orh	r8,0xfefa
80030014:	e0 69 2e 42 	mov	r9,11842
80030018:	ea 19 3f e6 	orh	r9,0x3fe6
8003001c:	e0 a0 0e aa 	rcall	80031d70 <__avr32_f64_mul>
80030020:	e0 68 6c 39 	mov	r8,27705
80030024:	ea 18 0c a8 	orh	r8,0xca8
80030028:	14 92       	mov	r2,r10
8003002a:	16 93       	mov	r3,r11
8003002c:	08 9a       	mov	r10,r4
8003002e:	0a 9b       	mov	r11,r5
80030030:	e0 69 5c 61 	mov	r9,23649
80030034:	ea 19 be 20 	orh	r9,0xbe20
80030038:	e0 a0 0e 9c 	rcall	80031d70 <__avr32_f64_mul>
8003003c:	14 98       	mov	r8,r10
8003003e:	16 99       	mov	r9,r11
80030040:	04 9a       	mov	r10,r2
80030042:	06 9b       	mov	r11,r3
80030044:	e0 a0 10 50 	rcall	800320e4 <__avr32_f64_add>
80030048:	16 93       	mov	r3,r11
8003004a:	14 92       	mov	r2,r10
8003004c:	14 98       	mov	r8,r10
8003004e:	06 99       	mov	r9,r3
80030050:	fa ea 00 14 	ld.d	r10,sp[20]
80030054:	e0 a0 10 48 	rcall	800320e4 <__avr32_f64_add>
80030058:	fa e8 00 14 	ld.d	r8,sp[20]
8003005c:	14 94       	mov	r4,r10
8003005e:	16 95       	mov	r5,r11
80030060:	e0 a0 0f 74 	rcall	80031f48 <__avr32_f64_sub>
80030064:	14 98       	mov	r8,r10
80030066:	16 99       	mov	r9,r11
80030068:	04 9a       	mov	r10,r2
8003006a:	06 9b       	mov	r11,r3
8003006c:	e0 a0 0f 6e 	rcall	80031f48 <__avr32_f64_sub>
80030070:	08 98       	mov	r8,r4
80030072:	fa eb 00 04 	st.d	sp[4],r10
80030076:	0a 99       	mov	r9,r5
80030078:	08 9a       	mov	r10,r4
8003007a:	0a 9b       	mov	r11,r5
8003007c:	e0 a0 0e 7a 	rcall	80031d70 <__avr32_f64_mul>
80030080:	e0 68 a4 d0 	mov	r8,42192
80030084:	ea 18 72 be 	orh	r8,0x72be
80030088:	14 92       	mov	r2,r10
8003008a:	16 93       	mov	r3,r11
8003008c:	e0 69 37 69 	mov	r9,14185
80030090:	ea 19 3e 66 	orh	r9,0x3e66
80030094:	e0 a0 0e 6e 	rcall	80031d70 <__avr32_f64_mul>
80030098:	e0 68 6b f1 	mov	r8,27633
8003009c:	ea 18 c5 d2 	orh	r8,0xc5d2
800300a0:	e0 69 bd 41 	mov	r9,48449
800300a4:	ea 19 3e bb 	orh	r9,0x3ebb
800300a8:	e0 a0 0f 50 	rcall	80031f48 <__avr32_f64_sub>
800300ac:	14 98       	mov	r8,r10
800300ae:	16 99       	mov	r9,r11
800300b0:	04 9a       	mov	r10,r2
800300b2:	06 9b       	mov	r11,r3
800300b4:	e0 a0 0e 5e 	rcall	80031d70 <__avr32_f64_mul>
800300b8:	e0 68 de 2c 	mov	r8,56876
800300bc:	ea 18 af 25 	orh	r8,0xaf25
800300c0:	e0 69 56 6a 	mov	r9,22122
800300c4:	ea 19 3f 11 	orh	r9,0x3f11
800300c8:	e0 a0 10 0e 	rcall	800320e4 <__avr32_f64_add>
800300cc:	14 98       	mov	r8,r10
800300ce:	16 99       	mov	r9,r11
800300d0:	04 9a       	mov	r10,r2
800300d2:	06 9b       	mov	r11,r3
800300d4:	e0 a0 0e 4e 	rcall	80031d70 <__avr32_f64_mul>
800300d8:	e0 68 bd 93 	mov	r8,48531
800300dc:	ea 18 16 be 	orh	r8,0x16be
800300e0:	e0 69 c1 6c 	mov	r9,49516
800300e4:	ea 19 3f 66 	orh	r9,0x3f66
800300e8:	e0 a0 0f 30 	rcall	80031f48 <__avr32_f64_sub>
800300ec:	14 98       	mov	r8,r10
800300ee:	16 99       	mov	r9,r11
800300f0:	04 9a       	mov	r10,r2
800300f2:	06 9b       	mov	r11,r3
800300f4:	e0 a0 0e 3e 	rcall	80031d70 <__avr32_f64_mul>
800300f8:	e0 68 55 3e 	mov	r8,21822
800300fc:	ea 18 55 55 	orh	r8,0x5555
80030100:	e0 69 55 55 	mov	r9,21845
80030104:	ea 19 3f c5 	orh	r9,0x3fc5
80030108:	e0 a0 0f ee 	rcall	800320e4 <__avr32_f64_add>
8003010c:	14 98       	mov	r8,r10
8003010e:	16 99       	mov	r9,r11
80030110:	04 9a       	mov	r10,r2
80030112:	06 9b       	mov	r11,r3
80030114:	e0 a0 0e 2e 	rcall	80031d70 <__avr32_f64_mul>
80030118:	14 98       	mov	r8,r10
8003011a:	16 99       	mov	r9,r11
8003011c:	08 9a       	mov	r10,r4
8003011e:	0a 9b       	mov	r11,r5
80030120:	e0 a0 0f 14 	rcall	80031f48 <__avr32_f64_sub>
80030124:	16 93       	mov	r3,r11
80030126:	14 92       	mov	r2,r10
80030128:	14 98       	mov	r8,r10
8003012a:	06 99       	mov	r9,r3
8003012c:	08 9a       	mov	r10,r4
8003012e:	0a 9b       	mov	r11,r5
80030130:	e0 a0 0e 20 	rcall	80031d70 <__avr32_f64_mul>
80030134:	30 08       	mov	r8,0
80030136:	14 90       	mov	r0,r10
80030138:	16 91       	mov	r1,r11
8003013a:	04 9a       	mov	r10,r2
8003013c:	06 9b       	mov	r11,r3
8003013e:	fc 19 40 00 	movh	r9,0x4000
80030142:	e0 a0 0f 03 	rcall	80031f48 <__avr32_f64_sub>
80030146:	14 98       	mov	r8,r10
80030148:	16 99       	mov	r9,r11
8003014a:	00 9a       	mov	r10,r0
8003014c:	02 9b       	mov	r11,r1
8003014e:	e0 a0 11 71 	rcall	80032430 <__avr32_f64_div>
80030152:	fa e8 00 04 	ld.d	r8,sp[4]
80030156:	14 92       	mov	r2,r10
80030158:	16 93       	mov	r3,r11
8003015a:	08 9a       	mov	r10,r4
8003015c:	0a 9b       	mov	r11,r5
8003015e:	e0 a0 0e 09 	rcall	80031d70 <__avr32_f64_mul>
80030162:	14 98       	mov	r8,r10
80030164:	16 99       	mov	r9,r11
80030166:	fa ea 00 04 	ld.d	r10,sp[4]
8003016a:	e0 a0 0f bd 	rcall	800320e4 <__avr32_f64_add>
8003016e:	14 98       	mov	r8,r10
80030170:	16 99       	mov	r9,r11
80030172:	04 9a       	mov	r10,r2
80030174:	06 9b       	mov	r11,r3
80030176:	e0 a0 0e e9 	rcall	80031f48 <__avr32_f64_sub>
8003017a:	08 98       	mov	r8,r4
8003017c:	0a 99       	mov	r9,r5
8003017e:	e0 a0 0e e5 	rcall	80031f48 <__avr32_f64_sub>
80030182:	14 98       	mov	r8,r10
80030184:	16 99       	mov	r9,r11
80030186:	30 0a       	mov	r10,0
80030188:	fc 1b 3f f0 	movh	r11,0x3ff0
8003018c:	e0 a0 0e de 	rcall	80031f48 <__avr32_f64_sub>
80030190:	ec 0c 15 14 	lsl	r12,r6,0x14
80030194:	16 95       	mov	r5,r11
80030196:	14 94       	mov	r4,r10
80030198:	f8 05 00 08 	add	r8,r12,r5
8003019c:	f0 09 14 14 	asr	r9,r8,0x14
800301a0:	58 09       	cp.w	r9,0
800301a2:	e0 89 00 08 	brgt	800301b2 <__ieee754_pow+0xa76>
800301a6:	0c 9c       	mov	r12,r6
800301a8:	e0 a0 0d 60 	rcall	80031c68 <scalbn>
800301ac:	14 98       	mov	r8,r10
800301ae:	16 99       	mov	r9,r11
800301b0:	c0 48       	rjmp	800301b8 <__ieee754_pow+0xa7c>
800301b2:	10 95       	mov	r5,r8
800301b4:	14 98       	mov	r8,r10
800301b6:	0a 99       	mov	r9,r5
800301b8:	fa ea 00 0c 	ld.d	r10,sp[12]
800301bc:	e0 a0 0d da 	rcall	80031d70 <__avr32_f64_mul>
800301c0:	16 97       	mov	r7,r11
800301c2:	14 96       	mov	r6,r10
800301c4:	c0 78       	rjmp	800301d2 <__ieee754_pow+0xa96>
800301c6:	fc 17 3f f0 	movh	r7,0x3ff0
800301ca:	30 06       	mov	r6,0
800301cc:	c0 38       	rjmp	800301d2 <__ieee754_pow+0xa96>
800301ce:	30 07       	mov	r7,0
800301d0:	0e 96       	mov	r6,r7
800301d2:	0e 9b       	mov	r11,r7
800301d4:	0c 9a       	mov	r10,r6
800301d6:	2f 2d       	sub	sp,-56
800301d8:	d8 32       	popm	r0-r7,pc
800301da:	30 05       	mov	r5,0
800301dc:	fe 9f fb 2b 	bral	8002f832 <__ieee754_pow+0xf6>

800301e0 <__ieee754_rem_pio2>:
800301e0:	d4 31       	pushm	r0-r7,lr
800301e2:	20 ad       	sub	sp,40
800301e4:	50 3b       	stdsp	sp[0xc],r11
800301e6:	18 96       	mov	r6,r12
800301e8:	14 98       	mov	r8,r10
800301ea:	16 99       	mov	r9,r11
800301ec:	14 92       	mov	r2,r10
800301ee:	16 93       	mov	r3,r11
800301f0:	eb db c0 1f 	bfextu	r5,r11,0x0,0x1f
800301f4:	e0 6c 21 fb 	mov	r12,8699
800301f8:	ea 1c 3f e9 	orh	r12,0x3fe9
800301fc:	18 35       	cp.w	r5,r12
800301fe:	e0 89 00 0b 	brgt	80030214 <__ieee754_rem_pio2+0x34>
80030202:	ec e9 00 00 	st.d	r6[0],r8
80030206:	30 07       	mov	r7,0
80030208:	30 08       	mov	r8,0
8003020a:	30 09       	mov	r9,0
8003020c:	ec e9 00 08 	st.d	r6[8],r8
80030210:	e0 8f 02 1b 	bral	80030646 <__ieee754_rem_pio2+0x466>
80030214:	e0 6c d9 7b 	mov	r12,55675
80030218:	ea 1c 40 02 	orh	r12,0x4002
8003021c:	18 35       	cp.w	r5,r12
8003021e:	e0 89 00 b6 	brgt	8003038a <__ieee754_rem_pio2+0x1aa>
80030222:	58 0b       	cp.w	r11,0
80030224:	e0 8a 00 59 	brle	800302d6 <__ieee754_rem_pio2+0xf6>
80030228:	fc 18 54 40 	movh	r8,0x5440
8003022c:	e0 69 21 fb 	mov	r9,8699
80030230:	ea 19 3f f9 	orh	r9,0x3ff9
80030234:	e0 a0 0e 8a 	rcall	80031f48 <__avr32_f64_sub>
80030238:	e0 68 21 fb 	mov	r8,8699
8003023c:	ea 18 3f f9 	orh	r8,0x3ff9
80030240:	14 92       	mov	r2,r10
80030242:	16 93       	mov	r3,r11
80030244:	10 35       	cp.w	r5,r8
80030246:	c1 e0       	breq	80030282 <__ieee754_rem_pio2+0xa2>
80030248:	e0 68 63 31 	mov	r8,25393
8003024c:	ea 18 1a 62 	orh	r8,0x1a62
80030250:	e0 69 b4 61 	mov	r9,46177
80030254:	ea 19 3d d0 	orh	r9,0x3dd0
80030258:	e0 a0 0e 78 	rcall	80031f48 <__avr32_f64_sub>
8003025c:	14 94       	mov	r4,r10
8003025e:	16 95       	mov	r5,r11
80030260:	08 98       	mov	r8,r4
80030262:	0a 99       	mov	r9,r5
80030264:	04 9a       	mov	r10,r2
80030266:	06 9b       	mov	r11,r3
80030268:	ec e5 00 00 	st.d	r6[0],r4
8003026c:	e0 a0 0e 6e 	rcall	80031f48 <__avr32_f64_sub>
80030270:	e0 68 63 31 	mov	r8,25393
80030274:	ea 18 1a 62 	orh	r8,0x1a62
80030278:	e0 69 b4 61 	mov	r9,46177
8003027c:	ea 19 3d d0 	orh	r9,0x3dd0
80030280:	c2 78       	rjmp	800302ce <__ieee754_rem_pio2+0xee>
80030282:	fc 18 1a 60 	movh	r8,0x1a60
80030286:	e0 69 b4 61 	mov	r9,46177
8003028a:	ea 19 3d d0 	orh	r9,0x3dd0
8003028e:	e0 a0 0e 5d 	rcall	80031f48 <__avr32_f64_sub>
80030292:	e0 68 70 73 	mov	r8,28787
80030296:	ea 18 2e 03 	orh	r8,0x2e03
8003029a:	14 94       	mov	r4,r10
8003029c:	16 95       	mov	r5,r11
8003029e:	e0 69 19 8a 	mov	r9,6538
800302a2:	ea 19 3b a3 	orh	r9,0x3ba3
800302a6:	e0 a0 0e 51 	rcall	80031f48 <__avr32_f64_sub>
800302aa:	14 92       	mov	r2,r10
800302ac:	16 93       	mov	r3,r11
800302ae:	04 98       	mov	r8,r2
800302b0:	06 99       	mov	r9,r3
800302b2:	08 9a       	mov	r10,r4
800302b4:	0a 9b       	mov	r11,r5
800302b6:	ec e3 00 00 	st.d	r6[0],r2
800302ba:	e0 a0 0e 47 	rcall	80031f48 <__avr32_f64_sub>
800302be:	e0 68 70 73 	mov	r8,28787
800302c2:	ea 18 2e 03 	orh	r8,0x2e03
800302c6:	e0 69 19 8a 	mov	r9,6538
800302ca:	ea 19 3b a3 	orh	r9,0x3ba3
800302ce:	30 17       	mov	r7,1
800302d0:	e0 a0 0e 3c 	rcall	80031f48 <__avr32_f64_sub>
800302d4:	c3 08       	rjmp	80030334 <__ieee754_rem_pio2+0x154>
800302d6:	fc 18 54 40 	movh	r8,0x5440
800302da:	e0 69 21 fb 	mov	r9,8699
800302de:	ea 19 3f f9 	orh	r9,0x3ff9
800302e2:	e0 a0 0f 01 	rcall	800320e4 <__avr32_f64_add>
800302e6:	e0 6c 21 fb 	mov	r12,8699
800302ea:	ea 1c 3f f9 	orh	r12,0x3ff9
800302ee:	14 92       	mov	r2,r10
800302f0:	16 93       	mov	r3,r11
800302f2:	18 35       	cp.w	r5,r12
800302f4:	c2 40       	breq	8003033c <__ieee754_rem_pio2+0x15c>
800302f6:	e0 68 63 31 	mov	r8,25393
800302fa:	ea 18 1a 62 	orh	r8,0x1a62
800302fe:	e0 69 b4 61 	mov	r9,46177
80030302:	ea 19 3d d0 	orh	r9,0x3dd0
80030306:	e0 a0 0e ef 	rcall	800320e4 <__avr32_f64_add>
8003030a:	14 94       	mov	r4,r10
8003030c:	16 95       	mov	r5,r11
8003030e:	08 98       	mov	r8,r4
80030310:	0a 99       	mov	r9,r5
80030312:	04 9a       	mov	r10,r2
80030314:	06 9b       	mov	r11,r3
80030316:	ec e5 00 00 	st.d	r6[0],r4
8003031a:	e0 a0 0e 17 	rcall	80031f48 <__avr32_f64_sub>
8003031e:	e0 68 63 31 	mov	r8,25393
80030322:	ea 18 1a 62 	orh	r8,0x1a62
80030326:	e0 69 b4 61 	mov	r9,46177
8003032a:	ea 19 3d d0 	orh	r9,0x3dd0
8003032e:	3f f7       	mov	r7,-1
80030330:	e0 a0 0e da 	rcall	800320e4 <__avr32_f64_add>
80030334:	ec eb 00 08 	st.d	r6[8],r10
80030338:	e0 8f 01 87 	bral	80030646 <__ieee754_rem_pio2+0x466>
8003033c:	fc 18 1a 60 	movh	r8,0x1a60
80030340:	e0 69 b4 61 	mov	r9,46177
80030344:	ea 19 3d d0 	orh	r9,0x3dd0
80030348:	e0 a0 0e ce 	rcall	800320e4 <__avr32_f64_add>
8003034c:	e0 68 70 73 	mov	r8,28787
80030350:	ea 18 2e 03 	orh	r8,0x2e03
80030354:	14 94       	mov	r4,r10
80030356:	16 95       	mov	r5,r11
80030358:	e0 69 19 8a 	mov	r9,6538
8003035c:	ea 19 3b a3 	orh	r9,0x3ba3
80030360:	e0 a0 0e c2 	rcall	800320e4 <__avr32_f64_add>
80030364:	14 92       	mov	r2,r10
80030366:	16 93       	mov	r3,r11
80030368:	04 98       	mov	r8,r2
8003036a:	06 99       	mov	r9,r3
8003036c:	08 9a       	mov	r10,r4
8003036e:	0a 9b       	mov	r11,r5
80030370:	ec e3 00 00 	st.d	r6[0],r2
80030374:	e0 a0 0d ea 	rcall	80031f48 <__avr32_f64_sub>
80030378:	e0 68 70 73 	mov	r8,28787
8003037c:	ea 18 2e 03 	orh	r8,0x2e03
80030380:	e0 69 19 8a 	mov	r9,6538
80030384:	ea 19 3b a3 	orh	r9,0x3ba3
80030388:	cd 3b       	rjmp	8003032e <__ieee754_rem_pio2+0x14e>
8003038a:	e0 6c 21 fb 	mov	r12,8699
8003038e:	ea 1c 41 39 	orh	r12,0x4139
80030392:	18 35       	cp.w	r5,r12
80030394:	e0 89 00 f4 	brgt	8003057c <__ieee754_rem_pio2+0x39c>
80030398:	e0 a0 0b 2c 	rcall	800319f0 <fabs>
8003039c:	e0 68 c8 83 	mov	r8,51331
800303a0:	ea 18 6d c9 	orh	r8,0x6dc9
800303a4:	14 92       	mov	r2,r10
800303a6:	16 93       	mov	r3,r11
800303a8:	e0 69 5f 30 	mov	r9,24368
800303ac:	ea 19 3f e4 	orh	r9,0x3fe4
800303b0:	e0 a0 0c e0 	rcall	80031d70 <__avr32_f64_mul>
800303b4:	30 08       	mov	r8,0
800303b6:	fc 19 3f e0 	movh	r9,0x3fe0
800303ba:	e0 a0 0e 95 	rcall	800320e4 <__avr32_f64_add>
800303be:	e0 a0 0f 1d 	rcall	800321f8 <__avr32_f64_to_s32>
800303c2:	18 97       	mov	r7,r12
800303c4:	e0 a0 0f 31 	rcall	80032226 <__avr32_s32_to_f64>
800303c8:	fc 18 54 40 	movh	r8,0x5440
800303cc:	e0 69 21 fb 	mov	r9,8699
800303d0:	ea 19 bf f9 	orh	r9,0xbff9
800303d4:	fa eb 00 04 	st.d	sp[4],r10
800303d8:	e0 a0 0c cc 	rcall	80031d70 <__avr32_f64_mul>
800303dc:	14 98       	mov	r8,r10
800303de:	16 99       	mov	r9,r11
800303e0:	04 9a       	mov	r10,r2
800303e2:	06 9b       	mov	r11,r3
800303e4:	e0 a0 0e 80 	rcall	800320e4 <__avr32_f64_add>
800303e8:	e0 68 63 31 	mov	r8,25393
800303ec:	ea 18 1a 62 	orh	r8,0x1a62
800303f0:	14 92       	mov	r2,r10
800303f2:	16 93       	mov	r3,r11
800303f4:	e0 69 b4 61 	mov	r9,46177
800303f8:	ea 19 3d d0 	orh	r9,0x3dd0
800303fc:	fa ea 00 04 	ld.d	r10,sp[4]
80030400:	e0 a0 0c b8 	rcall	80031d70 <__avr32_f64_mul>
80030404:	14 90       	mov	r0,r10
80030406:	16 91       	mov	r1,r11
80030408:	59 f7       	cp.w	r7,31
8003040a:	e0 89 00 0a 	brgt	8003041e <__ieee754_rem_pio2+0x23e>
8003040e:	ee c9 00 01 	sub	r9,r7,1
80030412:	4d a8       	lddpc	r8,80030578 <__ieee754_rem_pio2+0x398>
80030414:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80030418:	10 35       	cp.w	r5,r8
8003041a:	e0 81 00 8b 	brne	80030530 <__ieee754_rem_pio2+0x350>
8003041e:	00 98       	mov	r8,r0
80030420:	02 99       	mov	r9,r1
80030422:	04 9a       	mov	r10,r2
80030424:	06 9b       	mov	r11,r3
80030426:	e0 a0 0d 91 	rcall	80031f48 <__avr32_f64_sub>
8003042a:	ec eb 00 00 	st.d	r6[0],r10
8003042e:	ea 0c 14 14 	asr	r12,r5,0x14
80030432:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
80030436:	f8 0b 01 0b 	sub	r11,r12,r11
8003043a:	59 0b       	cp.w	r11,16
8003043c:	e0 8a 00 82 	brle	80030540 <__ieee754_rem_pio2+0x360>
80030440:	50 0c       	stdsp	sp[0x0],r12
80030442:	fc 18 1a 60 	movh	r8,0x1a60
80030446:	e0 69 b4 61 	mov	r9,46177
8003044a:	ea 19 3d d0 	orh	r9,0x3dd0
8003044e:	fa ea 00 04 	ld.d	r10,sp[4]
80030452:	e0 a0 0c 8f 	rcall	80031d70 <__avr32_f64_mul>
80030456:	16 91       	mov	r1,r11
80030458:	14 90       	mov	r0,r10
8003045a:	14 98       	mov	r8,r10
8003045c:	02 99       	mov	r9,r1
8003045e:	04 9a       	mov	r10,r2
80030460:	06 9b       	mov	r11,r3
80030462:	e0 a0 0d 73 	rcall	80031f48 <__avr32_f64_sub>
80030466:	16 95       	mov	r5,r11
80030468:	14 98       	mov	r8,r10
8003046a:	14 94       	mov	r4,r10
8003046c:	0a 99       	mov	r9,r5
8003046e:	04 9a       	mov	r10,r2
80030470:	06 9b       	mov	r11,r3
80030472:	e0 a0 0d 6b 	rcall	80031f48 <__avr32_f64_sub>
80030476:	00 98       	mov	r8,r0
80030478:	02 99       	mov	r9,r1
8003047a:	e0 a0 0d 67 	rcall	80031f48 <__avr32_f64_sub>
8003047e:	e0 68 70 73 	mov	r8,28787
80030482:	ea 18 2e 03 	orh	r8,0x2e03
80030486:	14 92       	mov	r2,r10
80030488:	16 93       	mov	r3,r11
8003048a:	e0 69 19 8a 	mov	r9,6538
8003048e:	ea 19 3b a3 	orh	r9,0x3ba3
80030492:	fa ea 00 04 	ld.d	r10,sp[4]
80030496:	e0 a0 0c 6d 	rcall	80031d70 <__avr32_f64_mul>
8003049a:	04 98       	mov	r8,r2
8003049c:	06 99       	mov	r9,r3
8003049e:	e0 a0 0d 55 	rcall	80031f48 <__avr32_f64_sub>
800304a2:	16 91       	mov	r1,r11
800304a4:	14 98       	mov	r8,r10
800304a6:	14 90       	mov	r0,r10
800304a8:	02 99       	mov	r9,r1
800304aa:	08 9a       	mov	r10,r4
800304ac:	0a 9b       	mov	r11,r5
800304ae:	e0 a0 0d 4d 	rcall	80031f48 <__avr32_f64_sub>
800304b2:	ec eb 00 00 	st.d	r6[0],r10
800304b6:	40 0c       	lddsp	r12,sp[0x0]
800304b8:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
800304bc:	16 1c       	sub	r12,r11
800304be:	e0 4c 00 31 	cp.w	r12,49
800304c2:	e0 89 00 05 	brgt	800304cc <__ieee754_rem_pio2+0x2ec>
800304c6:	08 92       	mov	r2,r4
800304c8:	0a 93       	mov	r3,r5
800304ca:	c3 b8       	rjmp	80030540 <__ieee754_rem_pio2+0x360>
800304cc:	fc 18 2e 00 	movh	r8,0x2e00
800304d0:	e0 69 19 8a 	mov	r9,6538
800304d4:	ea 19 3b a3 	orh	r9,0x3ba3
800304d8:	fa ea 00 04 	ld.d	r10,sp[4]
800304dc:	e0 a0 0c 4a 	rcall	80031d70 <__avr32_f64_mul>
800304e0:	16 91       	mov	r1,r11
800304e2:	14 90       	mov	r0,r10
800304e4:	14 98       	mov	r8,r10
800304e6:	02 99       	mov	r9,r1
800304e8:	08 9a       	mov	r10,r4
800304ea:	0a 9b       	mov	r11,r5
800304ec:	e0 a0 0d 2e 	rcall	80031f48 <__avr32_f64_sub>
800304f0:	14 98       	mov	r8,r10
800304f2:	16 93       	mov	r3,r11
800304f4:	14 92       	mov	r2,r10
800304f6:	06 99       	mov	r9,r3
800304f8:	08 9a       	mov	r10,r4
800304fa:	0a 9b       	mov	r11,r5
800304fc:	e0 a0 0d 26 	rcall	80031f48 <__avr32_f64_sub>
80030500:	00 98       	mov	r8,r0
80030502:	02 99       	mov	r9,r1
80030504:	e0 a0 0d 22 	rcall	80031f48 <__avr32_f64_sub>
80030508:	e0 68 49 c1 	mov	r8,18881
8003050c:	ea 18 25 20 	orh	r8,0x2520
80030510:	14 94       	mov	r4,r10
80030512:	16 95       	mov	r5,r11
80030514:	e0 69 83 9a 	mov	r9,33690
80030518:	ea 19 39 7b 	orh	r9,0x397b
8003051c:	fa ea 00 04 	ld.d	r10,sp[4]
80030520:	e0 a0 0c 28 	rcall	80031d70 <__avr32_f64_mul>
80030524:	08 98       	mov	r8,r4
80030526:	0a 99       	mov	r9,r5
80030528:	e0 a0 0d 10 	rcall	80031f48 <__avr32_f64_sub>
8003052c:	14 90       	mov	r0,r10
8003052e:	16 91       	mov	r1,r11
80030530:	00 98       	mov	r8,r0
80030532:	02 99       	mov	r9,r1
80030534:	04 9a       	mov	r10,r2
80030536:	06 9b       	mov	r11,r3
80030538:	e0 a0 0d 08 	rcall	80031f48 <__avr32_f64_sub>
8003053c:	ec eb 00 00 	st.d	r6[0],r10
80030540:	ec e8 00 00 	ld.d	r8,r6[0]
80030544:	04 9a       	mov	r10,r2
80030546:	06 9b       	mov	r11,r3
80030548:	e0 a0 0d 00 	rcall	80031f48 <__avr32_f64_sub>
8003054c:	00 98       	mov	r8,r0
8003054e:	ec c5 ff f8 	sub	r5,r6,-8
80030552:	02 99       	mov	r9,r1
80030554:	e0 a0 0c fa 	rcall	80031f48 <__avr32_f64_sub>
80030558:	ea eb 00 00 	st.d	r5[0],r10
8003055c:	40 38       	lddsp	r8,sp[0xc]
8003055e:	58 08       	cp.w	r8,0
80030560:	c7 34       	brge	80030646 <__ieee754_rem_pio2+0x466>
80030562:	6c 08       	ld.w	r8,r6[0x0]
80030564:	ee 18 80 00 	eorh	r8,0x8000
80030568:	8d 08       	st.w	r6[0x0],r8
8003056a:	5c 37       	neg	r7
8003056c:	6a 08       	ld.w	r8,r5[0x0]
8003056e:	ee 18 80 00 	eorh	r8,0x8000
80030572:	8b 08       	st.w	r5[0x0],r8
80030574:	c6 98       	rjmp	80030646 <__ieee754_rem_pio2+0x466>
80030576:	d7 03       	nop
80030578:	80 03       	ld.sh	r3,r0[0x0]
8003057a:	35 c0       	mov	r0,92
8003057c:	e0 6c ff ff 	mov	r12,65535
80030580:	ea 1c 7f ef 	orh	r12,0x7fef
80030584:	18 35       	cp.w	r5,r12
80030586:	e0 8a 00 08 	brle	80030596 <__ieee754_rem_pio2+0x3b6>
8003058a:	30 07       	mov	r7,0
8003058c:	e0 a0 0c de 	rcall	80031f48 <__avr32_f64_sub>
80030590:	ec eb 00 00 	st.d	r6[0],r10
80030594:	cd 0a       	rjmp	80030334 <__ieee754_rem_pio2+0x154>
80030596:	ea 03 14 14 	asr	r3,r5,0x14
8003059a:	e6 c3 04 16 	sub	r3,r3,1046
8003059e:	e6 08 15 14 	lsl	r8,r3,0x14
800305a2:	ea 08 01 01 	sub	r1,r5,r8
800305a6:	02 9b       	mov	r11,r1
800305a8:	e0 a0 0e 28 	rcall	800321f8 <__avr32_f64_to_s32>
800305ac:	e0 a0 0e 3d 	rcall	80032226 <__avr32_s32_to_f64>
800305b0:	14 94       	mov	r4,r10
800305b2:	16 95       	mov	r5,r11
800305b4:	08 98       	mov	r8,r4
800305b6:	0a 99       	mov	r9,r5
800305b8:	fa e5 00 10 	st.d	sp[16],r4
800305bc:	02 9b       	mov	r11,r1
800305be:	04 9a       	mov	r10,r2
800305c0:	e0 a0 0c c4 	rcall	80031f48 <__avr32_f64_sub>
800305c4:	30 08       	mov	r8,0
800305c6:	fc 19 41 70 	movh	r9,0x4170
800305ca:	e0 a0 0b d3 	rcall	80031d70 <__avr32_f64_mul>
800305ce:	14 90       	mov	r0,r10
800305d0:	16 91       	mov	r1,r11
800305d2:	e0 a0 0e 13 	rcall	800321f8 <__avr32_f64_to_s32>
800305d6:	e0 a0 0e 28 	rcall	80032226 <__avr32_s32_to_f64>
800305da:	16 95       	mov	r5,r11
800305dc:	14 94       	mov	r4,r10
800305de:	0a 99       	mov	r9,r5
800305e0:	08 98       	mov	r8,r4
800305e2:	fa e5 00 18 	st.d	sp[24],r4
800305e6:	00 9a       	mov	r10,r0
800305e8:	02 9b       	mov	r11,r1
800305ea:	e0 a0 0c af 	rcall	80031f48 <__avr32_f64_sub>
800305ee:	30 08       	mov	r8,0
800305f0:	fc 19 41 70 	movh	r9,0x4170
800305f4:	30 35       	mov	r5,3
800305f6:	e0 a0 0b bd 	rcall	80031d70 <__avr32_f64_mul>
800305fa:	fa c7 ff d8 	sub	r7,sp,-40
800305fe:	af 2b       	st.d	--r7,r10
80030600:	ee ea 00 00 	ld.d	r10,r7[0]
80030604:	0a 91       	mov	r1,r5
80030606:	20 87       	sub	r7,8
80030608:	20 15       	sub	r5,1
8003060a:	30 08       	mov	r8,0
8003060c:	30 09       	mov	r9,0
8003060e:	e0 a0 0e 7c 	rcall	80032306 <__avr32_f64_cmp_eq>
80030612:	cf 71       	brne	80030600 <__ieee754_rem_pio2+0x420>
80030614:	48 e8       	lddpc	r8,8003064c <__ieee754_rem_pio2+0x46c>
80030616:	02 99       	mov	r9,r1
80030618:	1a d8       	st.w	--sp,r8
8003061a:	06 9a       	mov	r10,r3
8003061c:	30 28       	mov	r8,2
8003061e:	fa cc ff ec 	sub	r12,sp,-20
80030622:	0c 9b       	mov	r11,r6
80030624:	e0 a0 04 06 	rcall	80030e30 <__kernel_rem_pio2>
80030628:	2f fd       	sub	sp,-4
8003062a:	18 97       	mov	r7,r12
8003062c:	40 38       	lddsp	r8,sp[0xc]
8003062e:	58 08       	cp.w	r8,0
80030630:	c0 b4       	brge	80030646 <__ieee754_rem_pio2+0x466>
80030632:	6c 08       	ld.w	r8,r6[0x0]
80030634:	ee 18 80 00 	eorh	r8,0x8000
80030638:	8d 08       	st.w	r6[0x0],r8
8003063a:	5c 37       	neg	r7
8003063c:	2f 86       	sub	r6,-8
8003063e:	6c 08       	ld.w	r8,r6[0x0]
80030640:	ee 18 80 00 	eorh	r8,0x8000
80030644:	8d 08       	st.w	r6[0x0],r8
80030646:	0e 9c       	mov	r12,r7
80030648:	2f 6d       	sub	sp,-40
8003064a:	d8 32       	popm	r0-r7,pc
8003064c:	80 03       	ld.sh	r3,r0[0x0]
8003064e:	36 40       	mov	r0,100

80030650 <__ieee754_sqrt>:
80030650:	d4 31       	pushm	r0-r7,lr
80030652:	fc 1e 7f f0 	movh	lr,0x7ff0
80030656:	16 9c       	mov	r12,r11
80030658:	14 96       	mov	r6,r10
8003065a:	16 97       	mov	r7,r11
8003065c:	14 94       	mov	r4,r10
8003065e:	16 95       	mov	r5,r11
80030660:	16 99       	mov	r9,r11
80030662:	14 98       	mov	r8,r10
80030664:	e6 1c 7f f0 	andh	r12,0x7ff0,COH
80030668:	1c 3c       	cp.w	r12,lr
8003066a:	c0 c1       	brne	80030682 <__ieee754_sqrt+0x32>
8003066c:	14 98       	mov	r8,r10
8003066e:	16 99       	mov	r9,r11
80030670:	e0 a0 0b 80 	rcall	80031d70 <__avr32_f64_mul>
80030674:	14 98       	mov	r8,r10
80030676:	16 99       	mov	r9,r11
80030678:	0c 9a       	mov	r10,r6
8003067a:	0e 9b       	mov	r11,r7
8003067c:	e0 a0 0d 34 	rcall	800320e4 <__avr32_f64_add>
80030680:	c1 38       	rjmp	800306a6 <__ieee754_sqrt+0x56>
80030682:	58 0b       	cp.w	r11,0
80030684:	e0 89 00 14 	brgt	800306ac <__ieee754_sqrt+0x5c>
80030688:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8003068c:	14 4c       	or	r12,r10
8003068e:	e0 80 00 a3 	breq	800307d4 <__ieee754_sqrt+0x184>
80030692:	58 0b       	cp.w	r11,0
80030694:	c0 c0       	breq	800306ac <__ieee754_sqrt+0x5c>
80030696:	14 98       	mov	r8,r10
80030698:	16 99       	mov	r9,r11
8003069a:	e0 a0 0c 57 	rcall	80031f48 <__avr32_f64_sub>
8003069e:	14 98       	mov	r8,r10
800306a0:	16 99       	mov	r9,r11
800306a2:	e0 a0 0e c7 	rcall	80032430 <__avr32_f64_div>
800306a6:	14 96       	mov	r6,r10
800306a8:	16 97       	mov	r7,r11
800306aa:	c9 58       	rjmp	800307d4 <__ieee754_sqrt+0x184>
800306ac:	f2 0a 14 14 	asr	r10,r9,0x14
800306b0:	c0 60       	breq	800306bc <__ieee754_sqrt+0x6c>
800306b2:	c1 88       	rjmp	800306e2 <__ieee754_sqrt+0x92>
800306b4:	f0 09 16 0b 	lsr	r9,r8,0xb
800306b8:	21 5a       	sub	r10,21
800306ba:	b5 78       	lsl	r8,0x15
800306bc:	58 09       	cp.w	r9,0
800306be:	cf b0       	breq	800306b4 <__ieee754_sqrt+0x64>
800306c0:	30 0b       	mov	r11,0
800306c2:	c0 38       	rjmp	800306c8 <__ieee754_sqrt+0x78>
800306c4:	a1 79       	lsl	r9,0x1
800306c6:	2f fb       	sub	r11,-1
800306c8:	ed b9 00 14 	bld	r9,0x14
800306cc:	cf c1       	brne	800306c4 <__ieee754_sqrt+0x74>
800306ce:	2f fa       	sub	r10,-1
800306d0:	f6 0c 11 20 	rsub	r12,r11,32
800306d4:	16 1a       	sub	r10,r11
800306d6:	f0 0c 0a 4c 	lsr	r12,r8,r12
800306da:	f0 0b 09 48 	lsl	r8,r8,r11
800306de:	f9 e9 10 09 	or	r9,r12,r9
800306e2:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
800306e6:	f4 c6 03 ff 	sub	r6,r10,1023
800306ea:	b5 a9       	sbr	r9,0x14
800306ec:	ed b6 00 00 	bld	r6,0x0
800306f0:	c0 61       	brne	800306fc <__ieee754_sqrt+0xac>
800306f2:	f0 0a 16 1f 	lsr	r10,r8,0x1f
800306f6:	a1 78       	lsl	r8,0x1
800306f8:	f4 09 00 19 	add	r9,r10,r9<<0x1
800306fc:	30 07       	mov	r7,0
800306fe:	f0 0a 15 01 	lsl	r10,r8,0x1
80030702:	0e 9c       	mov	r12,r7
80030704:	bf 98       	lsr	r8,0x1f
80030706:	fc 1b 00 20 	movh	r11,0x20
8003070a:	f0 09 00 18 	add	r8,r8,r9<<0x1
8003070e:	0e 99       	mov	r9,r7
80030710:	f2 0b 00 0e 	add	lr,r9,r11
80030714:	2f f7       	sub	r7,-1
80030716:	10 3e       	cp.w	lr,r8
80030718:	f1 de ea 18 	suble	r8,r8,lr
8003071c:	f9 db ea 0c 	addle	r12,r12,r11
80030720:	fd db ea 09 	addle	r9,lr,r11
80030724:	f4 0e 16 1f 	lsr	lr,r10,0x1f
80030728:	a1 9b       	lsr	r11,0x1
8003072a:	fc 08 00 18 	add	r8,lr,r8<<0x1
8003072e:	a1 7a       	lsl	r10,0x1
80030730:	59 67       	cp.w	r7,22
80030732:	ce f1       	brne	80030710 <__ieee754_sqrt+0xc0>
80030734:	30 07       	mov	r7,0
80030736:	fc 15 80 00 	movh	r5,0x8000
8003073a:	0e 9b       	mov	r11,r7
8003073c:	0e 94       	mov	r4,r7
8003073e:	0e 92       	mov	r2,r7
80030740:	ea 04 00 0e 	add	lr,r5,r4
80030744:	10 39       	cp.w	r9,r8
80030746:	c0 95       	brlt	80030758 <__ieee754_sqrt+0x108>
80030748:	5f 03       	sreq	r3
8003074a:	14 3e       	cp.w	lr,r10
8003074c:	5f 81       	srls	r1
8003074e:	e3 e3 00 03 	and	r3,r1,r3
80030752:	e4 03 18 00 	cp.b	r3,r2
80030756:	c1 70       	breq	80030784 <__ieee754_sqrt+0x134>
80030758:	1c 93       	mov	r3,lr
8003075a:	fc 05 00 04 	add	r4,lr,r5
8003075e:	e6 13 80 00 	andh	r3,0x8000,COH
80030762:	fc 11 80 00 	movh	r1,0x8000
80030766:	02 33       	cp.w	r3,r1
80030768:	c0 61       	brne	80030774 <__ieee754_sqrt+0x124>
8003076a:	58 04       	cp.w	r4,0
8003076c:	c0 45       	brlt	80030774 <__ieee754_sqrt+0x124>
8003076e:	f2 c3 ff ff 	sub	r3,r9,-1
80030772:	c0 28       	rjmp	80030776 <__ieee754_sqrt+0x126>
80030774:	12 93       	mov	r3,r9
80030776:	12 18       	sub	r8,r9
80030778:	0a 0b       	add	r11,r5
8003077a:	1c 3a       	cp.w	r10,lr
8003077c:	f7 b8 03 01 	sublo	r8,1
80030780:	06 99       	mov	r9,r3
80030782:	1c 1a       	sub	r10,lr
80030784:	f4 0e 16 1f 	lsr	lr,r10,0x1f
80030788:	a1 95       	lsr	r5,0x1
8003078a:	2f f7       	sub	r7,-1
8003078c:	fc 08 00 18 	add	r8,lr,r8<<0x1
80030790:	a1 7a       	lsl	r10,0x1
80030792:	e0 47 00 20 	cp.w	r7,32
80030796:	cd 51       	brne	80030740 <__ieee754_sqrt+0xf0>
80030798:	14 48       	or	r8,r10
8003079a:	c0 a0       	breq	800307ae <__ieee754_sqrt+0x15e>
8003079c:	f1 db c0 01 	bfextu	r8,r11,0x0,0x1
800307a0:	5b fb       	cp.w	r11,-1
800307a2:	f7 bc 00 ff 	subeq	r12,-1
800307a6:	f9 bb 00 00 	moveq	r11,0
800307aa:	f1 db e1 0b 	addne	r11,r8,r11
800307ae:	a1 9b       	lsr	r11,0x1
800307b0:	16 99       	mov	r9,r11
800307b2:	bf b9       	sbr	r9,0x1f
800307b4:	ec 0a 14 01 	asr	r10,r6,0x1
800307b8:	f8 08 14 01 	asr	r8,r12,0x1
800307bc:	b5 6a       	lsl	r10,0x14
800307be:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800307c2:	f2 0b 17 10 	movne	r11,r9
800307c6:	fc 19 3f e0 	movh	r9,0x3fe0
800307ca:	16 96       	mov	r6,r11
800307cc:	12 0a       	add	r10,r9
800307ce:	f4 08 00 08 	add	r8,r10,r8
800307d2:	10 97       	mov	r7,r8
800307d4:	0c 9a       	mov	r10,r6
800307d6:	0e 9b       	mov	r11,r7
800307d8:	d8 32       	popm	r0-r7,pc
800307da:	d7 03       	nop

800307dc <__ieee754_acosf>:
800307dc:	d4 21       	pushm	r4-r7,lr
800307de:	fc 1a 3f 80 	movh	r10,0x3f80
800307e2:	18 96       	mov	r6,r12
800307e4:	f1 dc c0 1f 	bfextu	r8,r12,0x0,0x1f
800307e8:	14 38       	cp.w	r8,r10
800307ea:	c0 a1       	brne	800307fe <__ieee754_acosf+0x22>
800307ec:	e0 6c 0f db 	mov	r12,4059
800307f0:	ea 1c 40 49 	orh	r12,0x4049
800307f4:	30 08       	mov	r8,0
800307f6:	58 06       	cp.w	r6,0
800307f8:	f0 0c 17 90 	movgt	r12,r8
800307fc:	d8 22       	popm	r4-r7,pc
800307fe:	fc 1a 3f 80 	movh	r10,0x3f80
80030802:	14 38       	cp.w	r8,r10
80030804:	e0 8a 00 09 	brle	80030816 <__ieee754_acosf+0x3a>
80030808:	18 9b       	mov	r11,r12
8003080a:	e0 a0 10 51 	rcall	800328ac <__avr32_f32_sub>
8003080e:	18 9b       	mov	r11,r12
80030810:	e0 a0 0f 9c 	rcall	80032748 <__avr32_f32_div>
80030814:	d8 22       	popm	r4-r7,pc
80030816:	e0 6a ff ff 	mov	r10,65535
8003081a:	ea 1a 3e ff 	orh	r10,0x3eff
8003081e:	14 38       	cp.w	r8,r10
80030820:	e0 89 00 8d 	brgt	8003093a <__ieee754_acosf+0x15e>
80030824:	fc 19 23 00 	movh	r9,0x2300
80030828:	12 38       	cp.w	r8,r9
8003082a:	e0 89 00 07 	brgt	80030838 <__ieee754_acosf+0x5c>
8003082e:	e0 6c 0f db 	mov	r12,4059
80030832:	ea 1c 3f c9 	orh	r12,0x3fc9
80030836:	d8 22       	popm	r4-r7,pc
80030838:	18 9b       	mov	r11,r12
8003083a:	e0 a0 10 f7 	rcall	80032a28 <__avr32_f32_mul>
8003083e:	e0 6b ef 08 	mov	r11,61192
80030842:	ea 1b 38 11 	orh	r11,0x3811
80030846:	18 97       	mov	r7,r12
80030848:	e0 a0 10 f0 	rcall	80032a28 <__avr32_f32_mul>
8003084c:	e0 6b 7f 04 	mov	r11,32516
80030850:	ea 1b 3a 4f 	orh	r11,0x3a4f
80030854:	e0 a0 10 94 	rcall	8003297c <__avr32_f32_add>
80030858:	18 9b       	mov	r11,r12
8003085a:	0e 9c       	mov	r12,r7
8003085c:	e0 a0 10 e6 	rcall	80032a28 <__avr32_f32_mul>
80030860:	e0 6b 11 46 	mov	r11,4422
80030864:	ea 1b 3d 24 	orh	r11,0x3d24
80030868:	e0 a0 10 22 	rcall	800328ac <__avr32_f32_sub>
8003086c:	18 9b       	mov	r11,r12
8003086e:	0e 9c       	mov	r12,r7
80030870:	e0 a0 10 dc 	rcall	80032a28 <__avr32_f32_mul>
80030874:	e0 6b 0a a8 	mov	r11,2728
80030878:	ea 1b 3e 4e 	orh	r11,0x3e4e
8003087c:	e0 a0 10 80 	rcall	8003297c <__avr32_f32_add>
80030880:	18 9b       	mov	r11,r12
80030882:	0e 9c       	mov	r12,r7
80030884:	e0 a0 10 d2 	rcall	80032a28 <__avr32_f32_mul>
80030888:	e0 6b b0 90 	mov	r11,45200
8003088c:	ea 1b 3e a6 	orh	r11,0x3ea6
80030890:	e0 a0 10 0e 	rcall	800328ac <__avr32_f32_sub>
80030894:	18 9b       	mov	r11,r12
80030896:	0e 9c       	mov	r12,r7
80030898:	e0 a0 10 c8 	rcall	80032a28 <__avr32_f32_mul>
8003089c:	e0 6b aa ab 	mov	r11,43691
800308a0:	ea 1b 3e 2a 	orh	r11,0x3e2a
800308a4:	e0 a0 10 6c 	rcall	8003297c <__avr32_f32_add>
800308a8:	18 9b       	mov	r11,r12
800308aa:	0e 9c       	mov	r12,r7
800308ac:	e0 a0 10 be 	rcall	80032a28 <__avr32_f32_mul>
800308b0:	e0 6b c6 2e 	mov	r11,50734
800308b4:	ea 1b 3d 9d 	orh	r11,0x3d9d
800308b8:	18 95       	mov	r5,r12
800308ba:	0e 9c       	mov	r12,r7
800308bc:	e0 a0 10 b6 	rcall	80032a28 <__avr32_f32_mul>
800308c0:	e0 6b 33 61 	mov	r11,13153
800308c4:	ea 1b 3f 30 	orh	r11,0x3f30
800308c8:	e0 a0 0f f2 	rcall	800328ac <__avr32_f32_sub>
800308cc:	18 9b       	mov	r11,r12
800308ce:	0e 9c       	mov	r12,r7
800308d0:	e0 a0 10 ac 	rcall	80032a28 <__avr32_f32_mul>
800308d4:	e0 6b 57 2d 	mov	r11,22317
800308d8:	ea 1b 40 01 	orh	r11,0x4001
800308dc:	e0 a0 10 50 	rcall	8003297c <__avr32_f32_add>
800308e0:	18 9b       	mov	r11,r12
800308e2:	0e 9c       	mov	r12,r7
800308e4:	e0 a0 10 a2 	rcall	80032a28 <__avr32_f32_mul>
800308e8:	e0 6b d1 39 	mov	r11,53561
800308ec:	ea 1b 40 19 	orh	r11,0x4019
800308f0:	e0 a0 0f de 	rcall	800328ac <__avr32_f32_sub>
800308f4:	18 9b       	mov	r11,r12
800308f6:	0e 9c       	mov	r12,r7
800308f8:	e0 a0 10 98 	rcall	80032a28 <__avr32_f32_mul>
800308fc:	fc 1b 3f 80 	movh	r11,0x3f80
80030900:	e0 a0 10 3e 	rcall	8003297c <__avr32_f32_add>
80030904:	18 9b       	mov	r11,r12
80030906:	0a 9c       	mov	r12,r5
80030908:	e0 a0 0f 20 	rcall	80032748 <__avr32_f32_div>
8003090c:	18 9b       	mov	r11,r12
8003090e:	0c 9c       	mov	r12,r6
80030910:	e0 a0 10 8c 	rcall	80032a28 <__avr32_f32_mul>
80030914:	18 9b       	mov	r11,r12
80030916:	e0 6c 21 68 	mov	r12,8552
8003091a:	ea 1c 33 a2 	orh	r12,0x33a2
8003091e:	e0 a0 0f c7 	rcall	800328ac <__avr32_f32_sub>
80030922:	18 9b       	mov	r11,r12
80030924:	0c 9c       	mov	r12,r6
80030926:	e0 a0 0f c3 	rcall	800328ac <__avr32_f32_sub>
8003092a:	18 9b       	mov	r11,r12
8003092c:	e0 6c 0f da 	mov	r12,4058
80030930:	ea 1c 3f c9 	orh	r12,0x3fc9
80030934:	e0 a0 0f bc 	rcall	800328ac <__avr32_f32_sub>
80030938:	d8 22       	popm	r4-r7,pc
8003093a:	58 0c       	cp.w	r12,0
8003093c:	e0 84 00 8c 	brge	80030a54 <__ieee754_acosf+0x278>
80030940:	fc 1b 3f 80 	movh	r11,0x3f80
80030944:	e0 a0 10 1c 	rcall	8003297c <__avr32_f32_add>
80030948:	fc 1b 3f 00 	movh	r11,0x3f00
8003094c:	e0 a0 10 6e 	rcall	80032a28 <__avr32_f32_mul>
80030950:	18 97       	mov	r7,r12
80030952:	c1 9d       	rcall	80030b84 <__ieee754_sqrtf>
80030954:	e0 6b ef 08 	mov	r11,61192
80030958:	ea 1b 38 11 	orh	r11,0x3811
8003095c:	18 96       	mov	r6,r12
8003095e:	0e 9c       	mov	r12,r7
80030960:	e0 a0 10 64 	rcall	80032a28 <__avr32_f32_mul>
80030964:	e0 6b 7f 04 	mov	r11,32516
80030968:	ea 1b 3a 4f 	orh	r11,0x3a4f
8003096c:	e0 a0 10 08 	rcall	8003297c <__avr32_f32_add>
80030970:	18 9b       	mov	r11,r12
80030972:	0e 9c       	mov	r12,r7
80030974:	e0 a0 10 5a 	rcall	80032a28 <__avr32_f32_mul>
80030978:	e0 6b 11 46 	mov	r11,4422
8003097c:	ea 1b 3d 24 	orh	r11,0x3d24
80030980:	e0 a0 0f 96 	rcall	800328ac <__avr32_f32_sub>
80030984:	18 9b       	mov	r11,r12
80030986:	0e 9c       	mov	r12,r7
80030988:	e0 a0 10 50 	rcall	80032a28 <__avr32_f32_mul>
8003098c:	e0 6b 0a a8 	mov	r11,2728
80030990:	ea 1b 3e 4e 	orh	r11,0x3e4e
80030994:	e0 a0 0f f4 	rcall	8003297c <__avr32_f32_add>
80030998:	18 9b       	mov	r11,r12
8003099a:	0e 9c       	mov	r12,r7
8003099c:	e0 a0 10 46 	rcall	80032a28 <__avr32_f32_mul>
800309a0:	e0 6b b0 90 	mov	r11,45200
800309a4:	ea 1b 3e a6 	orh	r11,0x3ea6
800309a8:	e0 a0 0f 82 	rcall	800328ac <__avr32_f32_sub>
800309ac:	18 9b       	mov	r11,r12
800309ae:	0e 9c       	mov	r12,r7
800309b0:	e0 a0 10 3c 	rcall	80032a28 <__avr32_f32_mul>
800309b4:	e0 6b aa ab 	mov	r11,43691
800309b8:	ea 1b 3e 2a 	orh	r11,0x3e2a
800309bc:	e0 a0 0f e0 	rcall	8003297c <__avr32_f32_add>
800309c0:	18 9b       	mov	r11,r12
800309c2:	0e 9c       	mov	r12,r7
800309c4:	e0 a0 10 32 	rcall	80032a28 <__avr32_f32_mul>
800309c8:	e0 6b c6 2e 	mov	r11,50734
800309cc:	ea 1b 3d 9d 	orh	r11,0x3d9d
800309d0:	18 95       	mov	r5,r12
800309d2:	0e 9c       	mov	r12,r7
800309d4:	e0 a0 10 2a 	rcall	80032a28 <__avr32_f32_mul>
800309d8:	e0 6b 33 61 	mov	r11,13153
800309dc:	ea 1b 3f 30 	orh	r11,0x3f30
800309e0:	e0 a0 0f 66 	rcall	800328ac <__avr32_f32_sub>
800309e4:	18 9b       	mov	r11,r12
800309e6:	0e 9c       	mov	r12,r7
800309e8:	e0 a0 10 20 	rcall	80032a28 <__avr32_f32_mul>
800309ec:	e0 6b 57 2d 	mov	r11,22317
800309f0:	ea 1b 40 01 	orh	r11,0x4001
800309f4:	e0 a0 0f c4 	rcall	8003297c <__avr32_f32_add>
800309f8:	18 9b       	mov	r11,r12
800309fa:	0e 9c       	mov	r12,r7
800309fc:	e0 a0 10 16 	rcall	80032a28 <__avr32_f32_mul>
80030a00:	e0 6b d1 39 	mov	r11,53561
80030a04:	ea 1b 40 19 	orh	r11,0x4019
80030a08:	e0 a0 0f 52 	rcall	800328ac <__avr32_f32_sub>
80030a0c:	18 9b       	mov	r11,r12
80030a0e:	0e 9c       	mov	r12,r7
80030a10:	e0 a0 10 0c 	rcall	80032a28 <__avr32_f32_mul>
80030a14:	fc 1b 3f 80 	movh	r11,0x3f80
80030a18:	e0 a0 0f b2 	rcall	8003297c <__avr32_f32_add>
80030a1c:	18 9b       	mov	r11,r12
80030a1e:	0a 9c       	mov	r12,r5
80030a20:	e0 a0 0e 94 	rcall	80032748 <__avr32_f32_div>
80030a24:	0c 9b       	mov	r11,r6
80030a26:	e0 a0 10 01 	rcall	80032a28 <__avr32_f32_mul>
80030a2a:	e0 6b 21 68 	mov	r11,8552
80030a2e:	ea 1b 33 a2 	orh	r11,0x33a2
80030a32:	e0 a0 0f 3d 	rcall	800328ac <__avr32_f32_sub>
80030a36:	18 9b       	mov	r11,r12
80030a38:	0c 9c       	mov	r12,r6
80030a3a:	e0 a0 0f a1 	rcall	8003297c <__avr32_f32_add>
80030a3e:	fc 1b c0 00 	movh	r11,0xc000
80030a42:	e0 a0 0f f3 	rcall	80032a28 <__avr32_f32_mul>
80030a46:	e0 6b 0f da 	mov	r11,4058
80030a4a:	ea 1b 40 49 	orh	r11,0x4049
80030a4e:	e0 a0 0f 97 	rcall	8003297c <__avr32_f32_add>
80030a52:	d8 22       	popm	r4-r7,pc
80030a54:	18 9b       	mov	r11,r12
80030a56:	fc 1c 3f 80 	movh	r12,0x3f80
80030a5a:	e0 a0 0f 29 	rcall	800328ac <__avr32_f32_sub>
80030a5e:	fc 1b 3f 00 	movh	r11,0x3f00
80030a62:	e0 a0 0f e3 	rcall	80032a28 <__avr32_f32_mul>
80030a66:	18 97       	mov	r7,r12
80030a68:	c8 ec       	rcall	80030b84 <__ieee754_sqrtf>
80030a6a:	e0 6b ef 08 	mov	r11,61192
80030a6e:	ea 1b 38 11 	orh	r11,0x3811
80030a72:	18 95       	mov	r5,r12
80030a74:	0e 9c       	mov	r12,r7
80030a76:	e0 a0 0f d9 	rcall	80032a28 <__avr32_f32_mul>
80030a7a:	e0 6b 7f 04 	mov	r11,32516
80030a7e:	ea 1b 3a 4f 	orh	r11,0x3a4f
80030a82:	e0 a0 0f 7d 	rcall	8003297c <__avr32_f32_add>
80030a86:	18 9b       	mov	r11,r12
80030a88:	0e 9c       	mov	r12,r7
80030a8a:	e0 a0 0f cf 	rcall	80032a28 <__avr32_f32_mul>
80030a8e:	e0 6b 11 46 	mov	r11,4422
80030a92:	ea 1b 3d 24 	orh	r11,0x3d24
80030a96:	e0 a0 0f 0b 	rcall	800328ac <__avr32_f32_sub>
80030a9a:	18 9b       	mov	r11,r12
80030a9c:	0e 9c       	mov	r12,r7
80030a9e:	e0 a0 0f c5 	rcall	80032a28 <__avr32_f32_mul>
80030aa2:	e0 6b 0a a8 	mov	r11,2728
80030aa6:	ea 1b 3e 4e 	orh	r11,0x3e4e
80030aaa:	e0 a0 0f 69 	rcall	8003297c <__avr32_f32_add>
80030aae:	18 9b       	mov	r11,r12
80030ab0:	0e 9c       	mov	r12,r7
80030ab2:	e0 a0 0f bb 	rcall	80032a28 <__avr32_f32_mul>
80030ab6:	e0 6b b0 90 	mov	r11,45200
80030aba:	ea 1b 3e a6 	orh	r11,0x3ea6
80030abe:	e0 a0 0e f7 	rcall	800328ac <__avr32_f32_sub>
80030ac2:	18 9b       	mov	r11,r12
80030ac4:	0e 9c       	mov	r12,r7
80030ac6:	e0 a0 0f b1 	rcall	80032a28 <__avr32_f32_mul>
80030aca:	e0 6b aa ab 	mov	r11,43691
80030ace:	ea 1b 3e 2a 	orh	r11,0x3e2a
80030ad2:	e0 a0 0f 55 	rcall	8003297c <__avr32_f32_add>
80030ad6:	18 9b       	mov	r11,r12
80030ad8:	0e 9c       	mov	r12,r7
80030ada:	e0 a0 0f a7 	rcall	80032a28 <__avr32_f32_mul>
80030ade:	e0 6b c6 2e 	mov	r11,50734
80030ae2:	ea 1b 3d 9d 	orh	r11,0x3d9d
80030ae6:	18 94       	mov	r4,r12
80030ae8:	0e 9c       	mov	r12,r7
80030aea:	e0 a0 0f 9f 	rcall	80032a28 <__avr32_f32_mul>
80030aee:	e0 6b 33 61 	mov	r11,13153
80030af2:	ea 1b 3f 30 	orh	r11,0x3f30
80030af6:	e0 a0 0e db 	rcall	800328ac <__avr32_f32_sub>
80030afa:	18 9b       	mov	r11,r12
80030afc:	0e 9c       	mov	r12,r7
80030afe:	e0 a0 0f 95 	rcall	80032a28 <__avr32_f32_mul>
80030b02:	e0 6b 57 2d 	mov	r11,22317
80030b06:	ea 1b 40 01 	orh	r11,0x4001
80030b0a:	e0 a0 0f 39 	rcall	8003297c <__avr32_f32_add>
80030b0e:	18 9b       	mov	r11,r12
80030b10:	0e 9c       	mov	r12,r7
80030b12:	e0 a0 0f 8b 	rcall	80032a28 <__avr32_f32_mul>
80030b16:	e0 6b d1 39 	mov	r11,53561
80030b1a:	ea 1b 40 19 	orh	r11,0x4019
80030b1e:	e0 a0 0e c7 	rcall	800328ac <__avr32_f32_sub>
80030b22:	18 9b       	mov	r11,r12
80030b24:	0e 9c       	mov	r12,r7
80030b26:	e0 a0 0f 81 	rcall	80032a28 <__avr32_f32_mul>
80030b2a:	fc 1b 3f 80 	movh	r11,0x3f80
80030b2e:	e0 a0 0f 27 	rcall	8003297c <__avr32_f32_add>
80030b32:	18 9b       	mov	r11,r12
80030b34:	08 9c       	mov	r12,r4
80030b36:	e0 a0 0e 09 	rcall	80032748 <__avr32_f32_div>
80030b3a:	0a 9b       	mov	r11,r5
80030b3c:	e0 a0 0f 76 	rcall	80032a28 <__avr32_f32_mul>
80030b40:	0a 96       	mov	r6,r5
80030b42:	18 94       	mov	r4,r12
80030b44:	e0 16 f0 00 	andl	r6,0xf000
80030b48:	0c 9b       	mov	r11,r6
80030b4a:	0c 9c       	mov	r12,r6
80030b4c:	e0 a0 0f 6e 	rcall	80032a28 <__avr32_f32_mul>
80030b50:	18 9b       	mov	r11,r12
80030b52:	0e 9c       	mov	r12,r7
80030b54:	e0 a0 0e ac 	rcall	800328ac <__avr32_f32_sub>
80030b58:	0c 9b       	mov	r11,r6
80030b5a:	18 97       	mov	r7,r12
80030b5c:	0a 9c       	mov	r12,r5
80030b5e:	e0 a0 0f 0f 	rcall	8003297c <__avr32_f32_add>
80030b62:	18 9b       	mov	r11,r12
80030b64:	0e 9c       	mov	r12,r7
80030b66:	e0 a0 0d f1 	rcall	80032748 <__avr32_f32_div>
80030b6a:	18 9b       	mov	r11,r12
80030b6c:	08 9c       	mov	r12,r4
80030b6e:	e0 a0 0f 07 	rcall	8003297c <__avr32_f32_add>
80030b72:	18 9b       	mov	r11,r12
80030b74:	0c 9c       	mov	r12,r6
80030b76:	e0 a0 0f 03 	rcall	8003297c <__avr32_f32_add>
80030b7a:	18 9b       	mov	r11,r12
80030b7c:	e0 a0 0f 00 	rcall	8003297c <__avr32_f32_add>
80030b80:	d8 22       	popm	r4-r7,pc
80030b82:	d7 03       	nop

80030b84 <__ieee754_sqrtf>:
80030b84:	d4 21       	pushm	r4-r7,lr
80030b86:	e0 6b ff ff 	mov	r11,65535
80030b8a:	ea 1b 7f 7f 	orh	r11,0x7f7f
80030b8e:	18 97       	mov	r7,r12
80030b90:	18 98       	mov	r8,r12
80030b92:	f3 dc c0 1f 	bfextu	r9,r12,0x0,0x1f
80030b96:	16 39       	cp.w	r9,r11
80030b98:	e0 88 00 0a 	brls	80030bac <__ieee754_sqrtf+0x28>
80030b9c:	18 9b       	mov	r11,r12
80030b9e:	e0 a0 0f 45 	rcall	80032a28 <__avr32_f32_mul>
80030ba2:	18 9b       	mov	r11,r12
80030ba4:	0e 9c       	mov	r12,r7
80030ba6:	e0 a0 0e eb 	rcall	8003297c <__avr32_f32_add>
80030baa:	c0 b8       	rjmp	80030bc0 <__ieee754_sqrtf+0x3c>
80030bac:	58 09       	cp.w	r9,0
80030bae:	c4 a0       	breq	80030c42 <__ieee754_sqrtf+0xbe>
80030bb0:	58 0c       	cp.w	r12,0
80030bb2:	c0 94       	brge	80030bc4 <__ieee754_sqrtf+0x40>
80030bb4:	18 9b       	mov	r11,r12
80030bb6:	e0 a0 0e 7b 	rcall	800328ac <__avr32_f32_sub>
80030bba:	18 9b       	mov	r11,r12
80030bbc:	e0 a0 0d c6 	rcall	80032748 <__avr32_f32_div>
80030bc0:	18 97       	mov	r7,r12
80030bc2:	c4 08       	rjmp	80030c42 <__ieee754_sqrtf+0xbe>
80030bc4:	f8 0a 14 17 	asr	r10,r12,0x17
80030bc8:	e0 6b ff ff 	mov	r11,65535
80030bcc:	ea 1b 00 7f 	orh	r11,0x7f
80030bd0:	16 39       	cp.w	r9,r11
80030bd2:	e0 8b 00 0b 	brhi	80030be8 <__ieee754_sqrtf+0x64>
80030bd6:	30 09       	mov	r9,0
80030bd8:	c0 38       	rjmp	80030bde <__ieee754_sqrtf+0x5a>
80030bda:	a1 78       	lsl	r8,0x1
80030bdc:	2f f9       	sub	r9,-1
80030bde:	ed b8 00 17 	bld	r8,0x17
80030be2:	cf c1       	brne	80030bda <__ieee754_sqrtf+0x56>
80030be4:	2f fa       	sub	r10,-1
80030be6:	12 1a       	sub	r10,r9
80030be8:	f4 cc 00 7f 	sub	r12,r10,127
80030bec:	f3 dc c0 01 	bfextu	r9,r12,0x0,0x1
80030bf0:	30 0a       	mov	r10,0
80030bf2:	f1 d8 c0 17 	bfextu	r8,r8,0x0,0x17
80030bf6:	14 97       	mov	r7,r10
80030bf8:	b7 b8       	sbr	r8,0x17
80030bfa:	14 9e       	mov	lr,r10
80030bfc:	f0 0b 15 01 	lsl	r11,r8,0x1
80030c00:	14 39       	cp.w	r9,r10
80030c02:	f6 08 17 10 	movne	r8,r11
80030c06:	fc 19 01 00 	movh	r9,0x100
80030c0a:	a1 78       	lsl	r8,0x1
80030c0c:	fc 09 00 0b 	add	r11,lr,r9
80030c10:	2f fa       	sub	r10,-1
80030c12:	10 3b       	cp.w	r11,r8
80030c14:	f1 db ea 18 	suble	r8,r8,r11
80030c18:	ef d9 ea 07 	addle	r7,r7,r9
80030c1c:	f7 d9 ea 0e 	addle	lr,r11,r9
80030c20:	a1 78       	lsl	r8,0x1
80030c22:	a1 99       	lsr	r9,0x1
80030c24:	59 9a       	cp.w	r10,25
80030c26:	cf 31       	brne	80030c0c <__ieee754_sqrtf+0x88>
80030c28:	f3 d7 c0 01 	bfextu	r9,r7,0x0,0x1
80030c2c:	58 08       	cp.w	r8,0
80030c2e:	f3 d7 e1 07 	addne	r7,r9,r7
80030c32:	a1 57       	asr	r7,0x1
80030c34:	a1 5c       	asr	r12,0x1
80030c36:	fc 18 3f 00 	movh	r8,0x3f00
80030c3a:	b7 7c       	lsl	r12,0x17
80030c3c:	10 0c       	add	r12,r8
80030c3e:	0e 0c       	add	r12,r7
80030c40:	18 97       	mov	r7,r12
80030c42:	0e 9c       	mov	r12,r7
80030c44:	d8 22       	popm	r4-r7,pc
80030c46:	d7 03       	nop

80030c48 <__kernel_cos>:
80030c48:	d4 31       	pushm	r0-r7,lr
80030c4a:	20 6d       	sub	sp,24
80030c4c:	fa e9 00 08 	st.d	sp[8],r8
80030c50:	14 92       	mov	r2,r10
80030c52:	16 93       	mov	r3,r11
80030c54:	14 96       	mov	r6,r10
80030c56:	ef db c0 1f 	bfextu	r7,r11,0x0,0x1f
80030c5a:	e0 69 ff ff 	mov	r9,65535
80030c5e:	ea 19 3e 3f 	orh	r9,0x3e3f
80030c62:	12 37       	cp.w	r7,r9
80030c64:	e0 89 00 09 	brgt	80030c76 <__kernel_cos+0x2e>
80030c68:	e0 a0 0a c8 	rcall	800321f8 <__avr32_f64_to_s32>
80030c6c:	c0 51       	brne	80030c76 <__kernel_cos+0x2e>
80030c6e:	30 0a       	mov	r10,0
80030c70:	fc 1b 3f f0 	movh	r11,0x3ff0
80030c74:	cd b8       	rjmp	80030e2a <__kernel_cos+0x1e2>
80030c76:	04 98       	mov	r8,r2
80030c78:	06 99       	mov	r9,r3
80030c7a:	04 9a       	mov	r10,r2
80030c7c:	06 9b       	mov	r11,r3
80030c7e:	e0 a0 08 79 	rcall	80031d70 <__avr32_f64_mul>
80030c82:	e0 68 38 d4 	mov	r8,14548
80030c86:	ea 18 be 88 	orh	r8,0xbe88
80030c8a:	14 94       	mov	r4,r10
80030c8c:	16 95       	mov	r5,r11
80030c8e:	e0 69 fa e9 	mov	r9,64233
80030c92:	ea 19 bd a8 	orh	r9,0xbda8
80030c96:	e0 a0 08 6d 	rcall	80031d70 <__avr32_f64_mul>
80030c9a:	e0 68 b1 c4 	mov	r8,45508
80030c9e:	ea 18 bd b4 	orh	r8,0xbdb4
80030ca2:	e0 69 ee 9e 	mov	r9,61086
80030ca6:	ea 19 3e 21 	orh	r9,0x3e21
80030caa:	e0 a0 0a 1d 	rcall	800320e4 <__avr32_f64_add>
80030cae:	14 98       	mov	r8,r10
80030cb0:	16 99       	mov	r9,r11
80030cb2:	08 9a       	mov	r10,r4
80030cb4:	0a 9b       	mov	r11,r5
80030cb6:	e0 a0 08 5d 	rcall	80031d70 <__avr32_f64_mul>
80030cba:	e0 68 52 ad 	mov	r8,21165
80030cbe:	ea 18 80 9c 	orh	r8,0x809c
80030cc2:	e0 69 7e 4f 	mov	r9,32335
80030cc6:	ea 19 3e 92 	orh	r9,0x3e92
80030cca:	e0 a0 09 3f 	rcall	80031f48 <__avr32_f64_sub>
80030cce:	14 98       	mov	r8,r10
80030cd0:	16 99       	mov	r9,r11
80030cd2:	08 9a       	mov	r10,r4
80030cd4:	0a 9b       	mov	r11,r5
80030cd6:	e0 a0 08 4d 	rcall	80031d70 <__avr32_f64_mul>
80030cda:	e0 68 15 90 	mov	r8,5520
80030cde:	ea 18 19 cb 	orh	r8,0x19cb
80030ce2:	e0 69 01 a0 	mov	r9,416
80030ce6:	ea 19 3e fa 	orh	r9,0x3efa
80030cea:	e0 a0 09 fd 	rcall	800320e4 <__avr32_f64_add>
80030cee:	14 98       	mov	r8,r10
80030cf0:	16 99       	mov	r9,r11
80030cf2:	08 9a       	mov	r10,r4
80030cf4:	0a 9b       	mov	r11,r5
80030cf6:	e0 a0 08 3d 	rcall	80031d70 <__avr32_f64_mul>
80030cfa:	e0 68 51 77 	mov	r8,20855
80030cfe:	ea 18 16 c1 	orh	r8,0x16c1
80030d02:	e0 69 c1 6c 	mov	r9,49516
80030d06:	ea 19 3f 56 	orh	r9,0x3f56
80030d0a:	e0 a0 09 1f 	rcall	80031f48 <__avr32_f64_sub>
80030d0e:	14 98       	mov	r8,r10
80030d10:	16 99       	mov	r9,r11
80030d12:	08 9a       	mov	r10,r4
80030d14:	0a 9b       	mov	r11,r5
80030d16:	e0 a0 08 2d 	rcall	80031d70 <__avr32_f64_mul>
80030d1a:	e0 68 55 4c 	mov	r8,21836
80030d1e:	ea 18 55 55 	orh	r8,0x5555
80030d22:	e0 69 55 55 	mov	r9,21845
80030d26:	ea 19 3f a5 	orh	r9,0x3fa5
80030d2a:	e0 a0 09 dd 	rcall	800320e4 <__avr32_f64_add>
80030d2e:	14 98       	mov	r8,r10
80030d30:	16 99       	mov	r9,r11
80030d32:	08 9a       	mov	r10,r4
80030d34:	0a 9b       	mov	r11,r5
80030d36:	e0 a0 08 1d 	rcall	80031d70 <__avr32_f64_mul>
80030d3a:	fa eb 00 00 	st.d	sp[0],r10
80030d3e:	e0 68 33 32 	mov	r8,13106
80030d42:	ea 18 3f d3 	orh	r8,0x3fd3
80030d46:	10 37       	cp.w	r7,r8
80030d48:	e0 89 00 2b 	brgt	80030d9e <__kernel_cos+0x156>
80030d4c:	30 08       	mov	r8,0
80030d4e:	fc 19 3f e0 	movh	r9,0x3fe0
80030d52:	08 9a       	mov	r10,r4
80030d54:	0a 9b       	mov	r11,r5
80030d56:	e0 a0 08 0d 	rcall	80031d70 <__avr32_f64_mul>
80030d5a:	fa e8 00 00 	ld.d	r8,sp[0]
80030d5e:	14 90       	mov	r0,r10
80030d60:	16 91       	mov	r1,r11
80030d62:	08 9a       	mov	r10,r4
80030d64:	0a 9b       	mov	r11,r5
80030d66:	e0 a0 08 05 	rcall	80031d70 <__avr32_f64_mul>
80030d6a:	fa e8 00 08 	ld.d	r8,sp[8]
80030d6e:	16 97       	mov	r7,r11
80030d70:	14 96       	mov	r6,r10
80030d72:	06 9b       	mov	r11,r3
80030d74:	04 9a       	mov	r10,r2
80030d76:	e0 a0 07 fd 	rcall	80031d70 <__avr32_f64_mul>
80030d7a:	14 98       	mov	r8,r10
80030d7c:	16 99       	mov	r9,r11
80030d7e:	0c 9a       	mov	r10,r6
80030d80:	0e 9b       	mov	r11,r7
80030d82:	e0 a0 08 e3 	rcall	80031f48 <__avr32_f64_sub>
80030d86:	14 98       	mov	r8,r10
80030d88:	16 99       	mov	r9,r11
80030d8a:	00 9a       	mov	r10,r0
80030d8c:	02 9b       	mov	r11,r1
80030d8e:	e0 a0 08 dd 	rcall	80031f48 <__avr32_f64_sub>
80030d92:	14 98       	mov	r8,r10
80030d94:	16 99       	mov	r9,r11
80030d96:	30 0a       	mov	r10,0
80030d98:	fc 1b 3f f0 	movh	r11,0x3ff0
80030d9c:	c4 58       	rjmp	80030e26 <__kernel_cos+0x1de>
80030d9e:	fc 19 3f e9 	movh	r9,0x3fe9
80030da2:	12 37       	cp.w	r7,r9
80030da4:	e0 8a 00 06 	brle	80030db0 <__kernel_cos+0x168>
80030da8:	30 06       	mov	r6,0
80030daa:	fc 17 3f d2 	movh	r7,0x3fd2
80030dae:	c0 88       	rjmp	80030dbe <__kernel_cos+0x176>
80030db0:	fc 1a ff e0 	movh	r10,0xffe0
80030db4:	30 08       	mov	r8,0
80030db6:	ee 0a 00 09 	add	r9,r7,r10
80030dba:	10 96       	mov	r6,r8
80030dbc:	12 97       	mov	r7,r9
80030dbe:	0c 98       	mov	r8,r6
80030dc0:	0e 99       	mov	r9,r7
80030dc2:	30 0a       	mov	r10,0
80030dc4:	fc 1b 3f f0 	movh	r11,0x3ff0
80030dc8:	e0 a0 08 c0 	rcall	80031f48 <__avr32_f64_sub>
80030dcc:	30 08       	mov	r8,0
80030dce:	fa eb 00 10 	st.d	sp[16],r10
80030dd2:	fc 19 3f e0 	movh	r9,0x3fe0
80030dd6:	08 9a       	mov	r10,r4
80030dd8:	0a 9b       	mov	r11,r5
80030dda:	e0 a0 07 cb 	rcall	80031d70 <__avr32_f64_mul>
80030dde:	0c 98       	mov	r8,r6
80030de0:	0e 99       	mov	r9,r7
80030de2:	e0 a0 08 b3 	rcall	80031f48 <__avr32_f64_sub>
80030de6:	fa e8 00 00 	ld.d	r8,sp[0]
80030dea:	14 90       	mov	r0,r10
80030dec:	16 91       	mov	r1,r11
80030dee:	08 9a       	mov	r10,r4
80030df0:	0a 9b       	mov	r11,r5
80030df2:	e0 a0 07 bf 	rcall	80031d70 <__avr32_f64_mul>
80030df6:	fa e8 00 08 	ld.d	r8,sp[8]
80030dfa:	16 97       	mov	r7,r11
80030dfc:	14 96       	mov	r6,r10
80030dfe:	06 9b       	mov	r11,r3
80030e00:	04 9a       	mov	r10,r2
80030e02:	e0 a0 07 b7 	rcall	80031d70 <__avr32_f64_mul>
80030e06:	14 98       	mov	r8,r10
80030e08:	16 99       	mov	r9,r11
80030e0a:	0c 9a       	mov	r10,r6
80030e0c:	0e 9b       	mov	r11,r7
80030e0e:	e0 a0 08 9d 	rcall	80031f48 <__avr32_f64_sub>
80030e12:	14 98       	mov	r8,r10
80030e14:	16 99       	mov	r9,r11
80030e16:	00 9a       	mov	r10,r0
80030e18:	02 9b       	mov	r11,r1
80030e1a:	e0 a0 08 97 	rcall	80031f48 <__avr32_f64_sub>
80030e1e:	14 98       	mov	r8,r10
80030e20:	16 99       	mov	r9,r11
80030e22:	fa ea 00 10 	ld.d	r10,sp[16]
80030e26:	e0 a0 08 91 	rcall	80031f48 <__avr32_f64_sub>
80030e2a:	2f ad       	sub	sp,-24
80030e2c:	d8 32       	popm	r0-r7,pc
80030e2e:	d7 03       	nop

80030e30 <__kernel_rem_pio2>:
80030e30:	d4 31       	pushm	r0-r7,lr
80030e32:	fa cd 02 70 	sub	sp,sp,624
80030e36:	50 b9       	stdsp	sp[0x2c],r9
80030e38:	fa f9 02 94 	ld.w	r9,sp[660]
80030e3c:	50 68       	stdsp	sp[0x18],r8
80030e3e:	50 c9       	stdsp	sp[0x30],r9
80030e40:	16 94       	mov	r4,r11
80030e42:	40 b8       	lddsp	r8,sp[0x2c]
80030e44:	4b e9       	lddpc	r9,80030f3c <__kernel_rem_pio2+0x10c>
80030e46:	20 18       	sub	r8,1
80030e48:	40 6b       	lddsp	r11,sp[0x18]
80030e4a:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80030e4e:	50 58       	stdsp	sp[0x14],r8
80030e50:	50 39       	stdsp	sp[0xc],r9
80030e52:	30 08       	mov	r8,0
80030e54:	f4 c9 00 03 	sub	r9,r10,3
80030e58:	10 97       	mov	r7,r8
80030e5a:	31 83       	mov	r3,24
80030e5c:	f2 03 0c 02 	divs	r2,r9,r3
80030e60:	f0 02 0c 48 	max	r8,r8,r2
80030e64:	40 59       	lddsp	r9,sp[0x14]
80030e66:	10 96       	mov	r6,r8
80030e68:	10 93       	mov	r3,r8
80030e6a:	50 78       	stdsp	sp[0x1c],r8
80030e6c:	40 31       	lddsp	r1,sp[0xc]
80030e6e:	5c d6       	com	r6
80030e70:	12 13       	sub	r3,r9
80030e72:	ec 06 00 16 	add	r6,r6,r6<<0x1
80030e76:	40 c8       	lddsp	r8,sp[0x30]
80030e78:	50 ac       	stdsp	sp[0x28],r12
80030e7a:	12 01       	add	r1,r9
80030e7c:	f4 06 00 36 	add	r6,r10,r6<<0x3
80030e80:	fa c2 fe 80 	sub	r2,sp,-384
80030e84:	f0 03 00 25 	add	r5,r8,r3<<0x2
80030e88:	c0 d8       	rjmp	80030ea2 <__kernel_rem_pio2+0x72>
80030e8a:	ee 03 00 08 	add	r8,r7,r3
80030e8e:	c0 47       	brpl	80030e96 <__kernel_rem_pio2+0x66>
80030e90:	30 0a       	mov	r10,0
80030e92:	30 0b       	mov	r11,0
80030e94:	c0 48       	rjmp	80030e9c <__kernel_rem_pio2+0x6c>
80030e96:	6a 0c       	ld.w	r12,r5[0x0]
80030e98:	e0 a0 09 c7 	rcall	80032226 <__avr32_s32_to_f64>
80030e9c:	a5 2a       	st.d	r2++,r10
80030e9e:	2f f7       	sub	r7,-1
80030ea0:	2f c5       	sub	r5,-4
80030ea2:	02 37       	cp.w	r7,r1
80030ea4:	fe 9a ff f3 	brle	80030e8a <__kernel_rem_pio2+0x5a>
80030ea8:	fa c0 ff c0 	sub	r0,sp,-64
80030eac:	40 53       	lddsp	r3,sp[0x14]
80030eae:	30 02       	mov	r2,0
80030eb0:	fa cc fe 80 	sub	r12,sp,-384
80030eb4:	0c 95       	mov	r5,r6
80030eb6:	c1 b8       	rjmp	80030eec <__kernel_rem_pio2+0xbc>
80030eb8:	ee e8 00 00 	ld.d	r8,r7[0]
80030ebc:	50 0c       	stdsp	sp[0x0],r12
80030ebe:	20 87       	sub	r7,8
80030ec0:	a3 0b       	ld.d	r10,r1++
80030ec2:	e0 a0 07 57 	rcall	80031d70 <__avr32_f64_mul>
80030ec6:	14 98       	mov	r8,r10
80030ec8:	16 99       	mov	r9,r11
80030eca:	fa ea 00 04 	ld.d	r10,sp[4]
80030ece:	e0 a0 09 0b 	rcall	800320e4 <__avr32_f64_add>
80030ed2:	2f f6       	sub	r6,-1
80030ed4:	fa eb 00 04 	st.d	sp[4],r10
80030ed8:	40 0c       	lddsp	r12,sp[0x0]
80030eda:	40 5b       	lddsp	r11,sp[0x14]
80030edc:	16 36       	cp.w	r6,r11
80030ede:	fe 9a ff ed 	brle	80030eb8 <__kernel_rem_pio2+0x88>
80030ee2:	fa e8 00 04 	ld.d	r8,sp[4]
80030ee6:	2f f2       	sub	r2,-1
80030ee8:	a1 28       	st.d	r0++,r8
80030eea:	2f f3       	sub	r3,-1
80030eec:	40 38       	lddsp	r8,sp[0xc]
80030eee:	10 32       	cp.w	r2,r8
80030ef0:	e0 89 00 0b 	brgt	80030f06 <__kernel_rem_pio2+0xd6>
80030ef4:	30 0a       	mov	r10,0
80030ef6:	30 0b       	mov	r11,0
80030ef8:	40 a1       	lddsp	r1,sp[0x28]
80030efa:	f8 03 00 37 	add	r7,r12,r3<<0x3
80030efe:	fa eb 00 04 	st.d	sp[4],r10
80030f02:	30 06       	mov	r6,0
80030f04:	ce bb       	rjmp	80030eda <__kernel_rem_pio2+0xaa>
80030f06:	40 38       	lddsp	r8,sp[0xc]
80030f08:	fa ca fd e0 	sub	r10,sp,-544
80030f0c:	20 18       	sub	r8,1
80030f0e:	0a 96       	mov	r6,r5
80030f10:	f4 08 00 2a 	add	r10,r10,r8<<0x2
80030f14:	40 37       	lddsp	r7,sp[0xc]
80030f16:	50 fa       	stdsp	sp[0x3c],r10
80030f18:	50 e4       	stdsp	sp[0x38],r4
80030f1a:	fa c9 fd 90 	sub	r9,sp,-624
80030f1e:	f2 07 00 38 	add	r8,r9,r7<<0x3
80030f22:	ee c5 00 01 	sub	r5,r7,1
80030f26:	f0 e2 fd d0 	ld.d	r2,r8[-560]
80030f2a:	fa c1 fd e0 	sub	r1,sp,-544
80030f2e:	fa c8 ff c0 	sub	r8,sp,-64
80030f32:	50 11       	stdsp	sp[0x4],r1
80030f34:	f0 05 00 34 	add	r4,r8,r5<<0x3
80030f38:	0e 90       	mov	r0,r7
80030f3a:	c2 58       	rjmp	80030f84 <__kernel_rem_pio2+0x154>
80030f3c:	80 03       	ld.sh	r3,r0[0x0]
80030f3e:	37 48       	mov	r8,116
80030f40:	e0 a0 07 18 	rcall	80031d70 <__avr32_f64_mul>
80030f44:	e0 a0 09 5a 	rcall	800321f8 <__avr32_f64_to_s32>
80030f48:	e0 a0 09 6f 	rcall	80032226 <__avr32_s32_to_f64>
80030f4c:	30 08       	mov	r8,0
80030f4e:	fc 19 c1 70 	movh	r9,0xc170
80030f52:	fa eb 00 20 	st.d	sp[32],r10
80030f56:	e0 a0 07 0d 	rcall	80031d70 <__avr32_f64_mul>
80030f5a:	14 98       	mov	r8,r10
80030f5c:	16 99       	mov	r9,r11
80030f5e:	04 9a       	mov	r10,r2
80030f60:	06 9b       	mov	r11,r3
80030f62:	e0 a0 08 c1 	rcall	800320e4 <__avr32_f64_add>
80030f66:	e0 a0 09 49 	rcall	800321f8 <__avr32_f64_to_s32>
80030f6a:	40 1a       	lddsp	r10,sp[0x4]
80030f6c:	14 ac       	st.w	r10++,r12
80030f6e:	e8 e8 00 00 	ld.d	r8,r4[0]
80030f72:	50 1a       	stdsp	sp[0x4],r10
80030f74:	20 10       	sub	r0,1
80030f76:	fa ea 00 20 	ld.d	r10,sp[32]
80030f7a:	20 84       	sub	r4,8
80030f7c:	e0 a0 08 b4 	rcall	800320e4 <__avr32_f64_add>
80030f80:	14 92       	mov	r2,r10
80030f82:	16 93       	mov	r3,r11
80030f84:	30 08       	mov	r8,0
80030f86:	fc 19 3e 70 	movh	r9,0x3e70
80030f8a:	04 9a       	mov	r10,r2
80030f8c:	06 9b       	mov	r11,r3
80030f8e:	58 00       	cp.w	r0,0
80030f90:	fe 99 ff d8 	brgt	80030f40 <__kernel_rem_pio2+0x110>
80030f94:	0c 9c       	mov	r12,r6
80030f96:	e0 a0 06 69 	rcall	80031c68 <scalbn>
80030f9a:	30 08       	mov	r8,0
80030f9c:	fc 19 3f c0 	movh	r9,0x3fc0
80030fa0:	14 92       	mov	r2,r10
80030fa2:	16 93       	mov	r3,r11
80030fa4:	e0 a0 06 e6 	rcall	80031d70 <__avr32_f64_mul>
80030fa8:	e0 a0 05 30 	rcall	80031a08 <floor>
80030fac:	30 08       	mov	r8,0
80030fae:	fc 19 c0 20 	movh	r9,0xc020
80030fb2:	e0 a0 06 df 	rcall	80031d70 <__avr32_f64_mul>
80030fb6:	14 98       	mov	r8,r10
80030fb8:	16 99       	mov	r9,r11
80030fba:	04 9a       	mov	r10,r2
80030fbc:	06 9b       	mov	r11,r3
80030fbe:	e0 a0 08 93 	rcall	800320e4 <__avr32_f64_add>
80030fc2:	14 92       	mov	r2,r10
80030fc4:	16 93       	mov	r3,r11
80030fc6:	e0 a0 09 19 	rcall	800321f8 <__avr32_f64_to_s32>
80030fca:	18 90       	mov	r0,r12
80030fcc:	e0 a0 09 2d 	rcall	80032226 <__avr32_s32_to_f64>
80030fd0:	14 98       	mov	r8,r10
80030fd2:	16 99       	mov	r9,r11
80030fd4:	04 9a       	mov	r10,r2
80030fd6:	06 9b       	mov	r11,r3
80030fd8:	e0 a0 07 b8 	rcall	80031f48 <__avr32_f64_sub>
80030fdc:	fa eb 00 04 	st.d	sp[4],r10
80030fe0:	58 06       	cp.w	r6,0
80030fe2:	e0 8a 00 18 	brle	80031012 <__kernel_rem_pio2+0x1e2>
80030fe6:	fa c8 fd 90 	sub	r8,sp,-624
80030fea:	ec 0b 11 18 	rsub	r11,r6,24
80030fee:	f0 05 00 29 	add	r9,r8,r5<<0x2
80030ff2:	ec 0c 11 17 	rsub	r12,r6,23
80030ff6:	f2 fa ff b0 	ld.w	r10,r9[-80]
80030ffa:	f4 0b 08 48 	asr	r8,r10,r11
80030ffe:	f0 0b 09 4b 	lsl	r11,r8,r11
80031002:	10 00       	add	r0,r8
80031004:	f4 0b 01 0b 	sub	r11,r10,r11
80031008:	f3 4b ff b0 	st.w	r9[-80],r11
8003100c:	f6 0c 08 44 	asr	r4,r11,r12
80031010:	c1 58       	rjmp	8003103a <__kernel_rem_pio2+0x20a>
80031012:	58 06       	cp.w	r6,0
80031014:	c0 91       	brne	80031026 <__kernel_rem_pio2+0x1f6>
80031016:	fa cb fd 90 	sub	r11,sp,-624
8003101a:	f6 05 00 28 	add	r8,r11,r5<<0x2
8003101e:	f0 f4 ff b0 	ld.w	r4,r8[-80]
80031022:	b7 54       	asr	r4,0x17
80031024:	c0 b8       	rjmp	8003103a <__kernel_rem_pio2+0x20a>
80031026:	30 08       	mov	r8,0
80031028:	fc 19 3f e0 	movh	r9,0x3fe0
8003102c:	e0 a0 09 80 	rcall	8003232c <__avr32_f64_cmp_ge>
80031030:	c0 31       	brne	80031036 <__kernel_rem_pio2+0x206>
80031032:	30 04       	mov	r4,0
80031034:	c5 58       	rjmp	800310de <__kernel_rem_pio2+0x2ae>
80031036:	30 24       	mov	r4,2
80031038:	c0 48       	rjmp	80031040 <__kernel_rem_pio2+0x210>
8003103a:	58 04       	cp.w	r4,0
8003103c:	e0 8a 00 51 	brle	800310de <__kernel_rem_pio2+0x2ae>
80031040:	30 08       	mov	r8,0
80031042:	2f f0       	sub	r0,-1
80031044:	10 93       	mov	r3,r8
80031046:	c1 48       	rjmp	8003106e <__kernel_rem_pio2+0x23e>
80031048:	62 09       	ld.w	r9,r1[0x0]
8003104a:	58 03       	cp.w	r3,0
8003104c:	c0 81       	brne	8003105c <__kernel_rem_pio2+0x22c>
8003104e:	58 09       	cp.w	r9,0
80031050:	c0 d0       	breq	8003106a <__kernel_rem_pio2+0x23a>
80031052:	fc 1a 01 00 	movh	r10,0x100
80031056:	12 1a       	sub	r10,r9
80031058:	83 0a       	st.w	r1[0x0],r10
8003105a:	c0 78       	rjmp	80031068 <__kernel_rem_pio2+0x238>
8003105c:	e0 6b ff ff 	mov	r11,65535
80031060:	ea 1b 00 ff 	orh	r11,0xff
80031064:	12 1b       	sub	r11,r9
80031066:	83 0b       	st.w	r1[0x0],r11
80031068:	30 13       	mov	r3,1
8003106a:	2f f8       	sub	r8,-1
8003106c:	2f c1       	sub	r1,-4
8003106e:	0e 38       	cp.w	r8,r7
80031070:	ce c5       	brlt	80031048 <__kernel_rem_pio2+0x218>
80031072:	58 06       	cp.w	r6,0
80031074:	e0 8a 00 1a 	brle	800310a8 <__kernel_rem_pio2+0x278>
80031078:	58 16       	cp.w	r6,1
8003107a:	c0 40       	breq	80031082 <__kernel_rem_pio2+0x252>
8003107c:	58 26       	cp.w	r6,2
8003107e:	c1 51       	brne	800310a8 <__kernel_rem_pio2+0x278>
80031080:	c0 a8       	rjmp	80031094 <__kernel_rem_pio2+0x264>
80031082:	fa ca fd 90 	sub	r10,sp,-624
80031086:	f4 05 00 28 	add	r8,r10,r5<<0x2
8003108a:	f0 f9 ff b0 	ld.w	r9,r8[-80]
8003108e:	f3 d9 c0 17 	bfextu	r9,r9,0x0,0x17
80031092:	c0 98       	rjmp	800310a4 <__kernel_rem_pio2+0x274>
80031094:	fa c9 fd 90 	sub	r9,sp,-624
80031098:	f2 05 00 28 	add	r8,r9,r5<<0x2
8003109c:	f0 f9 ff b0 	ld.w	r9,r8[-80]
800310a0:	f3 d9 c0 16 	bfextu	r9,r9,0x0,0x16
800310a4:	f1 49 ff b0 	st.w	r8[-80],r9
800310a8:	58 24       	cp.w	r4,2
800310aa:	c1 a1       	brne	800310de <__kernel_rem_pio2+0x2ae>
800310ac:	fa e8 00 04 	ld.d	r8,sp[4]
800310b0:	30 0a       	mov	r10,0
800310b2:	fc 1b 3f f0 	movh	r11,0x3ff0
800310b6:	e0 a0 07 49 	rcall	80031f48 <__avr32_f64_sub>
800310ba:	fa eb 00 04 	st.d	sp[4],r10
800310be:	58 03       	cp.w	r3,0
800310c0:	c0 f0       	breq	800310de <__kernel_rem_pio2+0x2ae>
800310c2:	0c 9c       	mov	r12,r6
800310c4:	30 0a       	mov	r10,0
800310c6:	fc 1b 3f f0 	movh	r11,0x3ff0
800310ca:	e0 a0 05 cf 	rcall	80031c68 <scalbn>
800310ce:	14 98       	mov	r8,r10
800310d0:	16 99       	mov	r9,r11
800310d2:	fa ea 00 04 	ld.d	r10,sp[4]
800310d6:	e0 a0 07 39 	rcall	80031f48 <__avr32_f64_sub>
800310da:	fa eb 00 04 	st.d	sp[4],r10
800310de:	30 08       	mov	r8,0
800310e0:	30 09       	mov	r9,0
800310e2:	fa ea 00 04 	ld.d	r10,sp[4]
800310e6:	e0 a0 09 10 	rcall	80032306 <__avr32_f64_cmp_eq>
800310ea:	c6 40       	breq	800311b2 <__kernel_rem_pio2+0x382>
800310ec:	fa c8 fd e0 	sub	r8,sp,-544
800310f0:	f0 05 00 29 	add	r9,r8,r5<<0x2
800310f4:	30 08       	mov	r8,0
800310f6:	c0 58       	rjmp	80031100 <__kernel_rem_pio2+0x2d0>
800310f8:	72 0a       	ld.w	r10,r9[0x0]
800310fa:	20 15       	sub	r5,1
800310fc:	14 48       	or	r8,r10
800310fe:	20 49       	sub	r9,4
80031100:	40 3b       	lddsp	r11,sp[0xc]
80031102:	16 35       	cp.w	r5,r11
80031104:	cf a4       	brge	800310f8 <__kernel_rem_pio2+0x2c8>
80031106:	58 08       	cp.w	r8,0
80031108:	c5 b1       	brne	800311be <__kernel_rem_pio2+0x38e>
8003110a:	40 f9       	lddsp	r9,sp[0x3c]
8003110c:	30 18       	mov	r8,1
8003110e:	c0 28       	rjmp	80031112 <__kernel_rem_pio2+0x2e2>
80031110:	2f f8       	sub	r8,-1
80031112:	72 0a       	ld.w	r10,r9[0x0]
80031114:	20 49       	sub	r9,4
80031116:	58 0a       	cp.w	r10,0
80031118:	cf c0       	breq	80031110 <__kernel_rem_pio2+0x2e0>
8003111a:	0e 08       	add	r8,r7
8003111c:	40 ba       	lddsp	r10,sp[0x2c]
8003111e:	50 d8       	stdsp	sp[0x34],r8
80031120:	ee 0a 00 02 	add	r2,r7,r10
80031124:	fa c8 fe 80 	sub	r8,sp,-384
80031128:	04 91       	mov	r1,r2
8003112a:	ee c5 ff ff 	sub	r5,r7,-1
8003112e:	40 73       	lddsp	r3,sp[0x1c]
80031130:	40 c9       	lddsp	r9,sp[0x30]
80031132:	2f f3       	sub	r3,-1
80031134:	fa cb ff c0 	sub	r11,sp,-64
80031138:	0e 03       	add	r3,r7
8003113a:	f6 05 00 3b 	add	r11,r11,r5<<0x3
8003113e:	f2 03 00 23 	add	r3,r9,r3<<0x2
80031142:	50 8b       	stdsp	sp[0x20],r11
80031144:	f0 02 00 32 	add	r2,r8,r2<<0x3
80031148:	0c 94       	mov	r4,r6
8003114a:	c2 d8       	rjmp	800311a4 <__kernel_rem_pio2+0x374>
8003114c:	66 0c       	ld.w	r12,r3[0x0]
8003114e:	e0 a0 08 6c 	rcall	80032226 <__avr32_s32_to_f64>
80031152:	30 08       	mov	r8,0
80031154:	e4 eb 00 00 	st.d	r2[0],r10
80031158:	30 09       	mov	r9,0
8003115a:	fa ca fe 80 	sub	r10,sp,-384
8003115e:	40 a0       	lddsp	r0,sp[0x28]
80031160:	f4 01 00 37 	add	r7,r10,r1<<0x3
80031164:	30 06       	mov	r6,0
80031166:	fa e9 00 04 	st.d	sp[4],r8
8003116a:	c1 08       	rjmp	8003118a <__kernel_rem_pio2+0x35a>
8003116c:	ee e8 00 00 	ld.d	r8,r7[0]
80031170:	a1 0b       	ld.d	r10,r0++
80031172:	20 87       	sub	r7,8
80031174:	e0 a0 05 fe 	rcall	80031d70 <__avr32_f64_mul>
80031178:	2f f6       	sub	r6,-1
8003117a:	14 98       	mov	r8,r10
8003117c:	16 99       	mov	r9,r11
8003117e:	fa ea 00 04 	ld.d	r10,sp[4]
80031182:	e0 a0 07 b1 	rcall	800320e4 <__avr32_f64_add>
80031186:	fa eb 00 04 	st.d	sp[4],r10
8003118a:	40 58       	lddsp	r8,sp[0x14]
8003118c:	10 36       	cp.w	r6,r8
8003118e:	fe 9a ff ef 	brle	8003116c <__kernel_rem_pio2+0x33c>
80031192:	40 89       	lddsp	r9,sp[0x20]
80031194:	fa ea 00 04 	ld.d	r10,sp[4]
80031198:	2f f5       	sub	r5,-1
8003119a:	b3 2a       	st.d	r9++,r10
8003119c:	2f c3       	sub	r3,-4
8003119e:	50 89       	stdsp	sp[0x20],r9
800311a0:	2f 82       	sub	r2,-8
800311a2:	2f f1       	sub	r1,-1
800311a4:	40 d8       	lddsp	r8,sp[0x34]
800311a6:	10 35       	cp.w	r5,r8
800311a8:	fe 9a ff d2 	brle	8003114c <__kernel_rem_pio2+0x31c>
800311ac:	08 96       	mov	r6,r4
800311ae:	10 97       	mov	r7,r8
800311b0:	cb 5a       	rjmp	80030f1a <__kernel_rem_pio2+0xea>
800311b2:	50 50       	stdsp	sp[0x14],r0
800311b4:	08 95       	mov	r5,r4
800311b6:	40 e4       	lddsp	r4,sp[0x38]
800311b8:	58 0c       	cp.w	r12,0
800311ba:	c1 30       	breq	800311e0 <__kernel_rem_pio2+0x3b0>
800311bc:	c0 48       	rjmp	800311c4 <__kernel_rem_pio2+0x394>
800311be:	08 95       	mov	r5,r4
800311c0:	50 50       	stdsp	sp[0x14],r0
800311c2:	40 e4       	lddsp	r4,sp[0x38]
800311c4:	20 17       	sub	r7,1
800311c6:	fa c8 fd e0 	sub	r8,sp,-544
800311ca:	21 86       	sub	r6,24
800311cc:	f0 07 00 28 	add	r8,r8,r7<<0x2
800311d0:	c0 38       	rjmp	800311d6 <__kernel_rem_pio2+0x3a6>
800311d2:	20 17       	sub	r7,1
800311d4:	21 86       	sub	r6,24
800311d6:	70 09       	ld.w	r9,r8[0x0]
800311d8:	20 48       	sub	r8,4
800311da:	58 09       	cp.w	r9,0
800311dc:	cf b0       	breq	800311d2 <__kernel_rem_pio2+0x3a2>
800311de:	c4 48       	rjmp	80031266 <__kernel_rem_pio2+0x436>
800311e0:	fa ea 00 04 	ld.d	r10,sp[4]
800311e4:	ec 0c 11 00 	rsub	r12,r6,0
800311e8:	e0 a0 05 40 	rcall	80031c68 <scalbn>
800311ec:	30 08       	mov	r8,0
800311ee:	14 90       	mov	r0,r10
800311f0:	16 91       	mov	r1,r11
800311f2:	fc 19 41 70 	movh	r9,0x4170
800311f6:	ee 03 15 02 	lsl	r3,r7,0x2
800311fa:	e0 a0 08 99 	rcall	8003232c <__avr32_f64_cmp_ge>
800311fe:	c2 a0       	breq	80031252 <__kernel_rem_pio2+0x422>
80031200:	30 08       	mov	r8,0
80031202:	fc 19 3e 70 	movh	r9,0x3e70
80031206:	00 9a       	mov	r10,r0
80031208:	02 9b       	mov	r11,r1
8003120a:	e0 a0 05 b3 	rcall	80031d70 <__avr32_f64_mul>
8003120e:	e0 a0 07 f5 	rcall	800321f8 <__avr32_f64_to_s32>
80031212:	e0 a0 08 0a 	rcall	80032226 <__avr32_s32_to_f64>
80031216:	30 08       	mov	r8,0
80031218:	fc 19 c1 70 	movh	r9,0xc170
8003121c:	fa eb 00 04 	st.d	sp[4],r10
80031220:	e0 a0 05 a8 	rcall	80031d70 <__avr32_f64_mul>
80031224:	16 99       	mov	r9,r11
80031226:	14 98       	mov	r8,r10
80031228:	02 9b       	mov	r11,r1
8003122a:	00 9a       	mov	r10,r0
8003122c:	e0 a0 07 5c 	rcall	800320e4 <__avr32_f64_add>
80031230:	e0 a0 07 e4 	rcall	800321f8 <__avr32_f64_to_s32>
80031234:	fa cb fd 90 	sub	r11,sp,-624
80031238:	f6 03 00 03 	add	r3,r11,r3
8003123c:	2f f7       	sub	r7,-1
8003123e:	e7 4c ff b0 	st.w	r3[-80],r12
80031242:	fa c9 fd 90 	sub	r9,sp,-624
80031246:	fa ea 00 04 	ld.d	r10,sp[4]
8003124a:	2e 86       	sub	r6,-24
8003124c:	f2 07 00 23 	add	r3,r9,r7<<0x2
80031250:	c0 78       	rjmp	8003125e <__kernel_rem_pio2+0x42e>
80031252:	fa c8 fd 90 	sub	r8,sp,-624
80031256:	00 9a       	mov	r10,r0
80031258:	f0 03 00 03 	add	r3,r8,r3
8003125c:	02 9b       	mov	r11,r1
8003125e:	e0 a0 07 cd 	rcall	800321f8 <__avr32_f64_to_s32>
80031262:	e7 4c ff b0 	st.w	r3[-80],r12
80031266:	0c 9c       	mov	r12,r6
80031268:	30 0a       	mov	r10,0
8003126a:	fc 1b 3f f0 	movh	r11,0x3ff0
8003126e:	fa c3 fd e0 	sub	r3,sp,-544
80031272:	e0 a0 04 fb 	rcall	80031c68 <scalbn>
80031276:	fa c2 ff c0 	sub	r2,sp,-64
8003127a:	0e 96       	mov	r6,r7
8003127c:	14 90       	mov	r0,r10
8003127e:	16 91       	mov	r1,r11
80031280:	e6 07 00 23 	add	r3,r3,r7<<0x2
80031284:	e4 07 00 32 	add	r2,r2,r7<<0x3
80031288:	c1 88       	rjmp	800312b8 <__kernel_rem_pio2+0x488>
8003128a:	66 0c       	ld.w	r12,r3[0x0]
8003128c:	e0 a0 07 cd 	rcall	80032226 <__avr32_s32_to_f64>
80031290:	14 98       	mov	r8,r10
80031292:	16 99       	mov	r9,r11
80031294:	00 9a       	mov	r10,r0
80031296:	02 9b       	mov	r11,r1
80031298:	e0 a0 05 6c 	rcall	80031d70 <__avr32_f64_mul>
8003129c:	30 08       	mov	r8,0
8003129e:	e4 eb 00 00 	st.d	r2[0],r10
800312a2:	fc 19 3e 70 	movh	r9,0x3e70
800312a6:	00 9a       	mov	r10,r0
800312a8:	02 9b       	mov	r11,r1
800312aa:	20 16       	sub	r6,1
800312ac:	e0 a0 05 62 	rcall	80031d70 <__avr32_f64_mul>
800312b0:	20 43       	sub	r3,4
800312b2:	20 82       	sub	r2,8
800312b4:	14 90       	mov	r0,r10
800312b6:	16 91       	mov	r1,r11
800312b8:	58 06       	cp.w	r6,0
800312ba:	ce 84       	brge	8003128a <__kernel_rem_pio2+0x45a>
800312bc:	fa cc ff 20 	sub	r12,sp,-224
800312c0:	0a 91       	mov	r1,r5
800312c2:	0e 93       	mov	r3,r7
800312c4:	30 02       	mov	r2,0
800312c6:	18 96       	mov	r6,r12
800312c8:	0e 95       	mov	r5,r7
800312ca:	c1 c8       	rjmp	80031302 <__kernel_rem_pio2+0x4d2>
800312cc:	ad 09       	ld.d	r8,r6++
800312ce:	2f f7       	sub	r7,-1
800312d0:	a1 0b       	ld.d	r10,r0++
800312d2:	e0 a0 05 4f 	rcall	80031d70 <__avr32_f64_mul>
800312d6:	14 98       	mov	r8,r10
800312d8:	16 99       	mov	r9,r11
800312da:	fa ea 00 04 	ld.d	r10,sp[4]
800312de:	e0 a0 07 03 	rcall	800320e4 <__avr32_f64_add>
800312e2:	fa eb 00 04 	st.d	sp[4],r10
800312e6:	40 3b       	lddsp	r11,sp[0xc]
800312e8:	16 37       	cp.w	r7,r11
800312ea:	e0 89 00 05 	brgt	800312f4 <__kernel_rem_pio2+0x4c4>
800312ee:	04 37       	cp.w	r7,r2
800312f0:	fe 9a ff ee 	brle	800312cc <__kernel_rem_pio2+0x49c>
800312f4:	06 96       	mov	r6,r3
800312f6:	fa e8 00 04 	ld.d	r8,sp[4]
800312fa:	40 73       	lddsp	r3,sp[0x1c]
800312fc:	ad 28       	st.d	r6++,r8
800312fe:	20 13       	sub	r3,1
80031300:	2f f2       	sub	r2,-1
80031302:	58 03       	cp.w	r3,0
80031304:	c0 f5       	brlt	80031322 <__kernel_rem_pio2+0x4f2>
80031306:	fa c8 ff c0 	sub	r8,sp,-64
8003130a:	30 0a       	mov	r10,0
8003130c:	f0 03 00 3c 	add	r12,r8,r3<<0x3
80031310:	30 0b       	mov	r11,0
80031312:	50 73       	stdsp	sp[0x1c],r3
80031314:	4d 00       	lddpc	r0,80031454 <__kernel_rem_pio2+0x624>
80031316:	0c 93       	mov	r3,r6
80031318:	fa eb 00 04 	st.d	sp[4],r10
8003131c:	30 07       	mov	r7,0
8003131e:	18 96       	mov	r6,r12
80031320:	ce 3b       	rjmp	800312e6 <__kernel_rem_pio2+0x4b6>
80031322:	0a 97       	mov	r7,r5
80031324:	40 6a       	lddsp	r10,sp[0x18]
80031326:	02 95       	mov	r5,r1
80031328:	58 2a       	cp.w	r10,2
8003132a:	e0 89 00 07 	brgt	80031338 <__kernel_rem_pio2+0x508>
8003132e:	58 1a       	cp.w	r10,1
80031330:	c1 14       	brge	80031352 <__kernel_rem_pio2+0x522>
80031332:	58 0a       	cp.w	r10,0
80031334:	c1 70       	breq	80031362 <__kernel_rem_pio2+0x532>
80031336:	ce 68       	rjmp	80031502 <__kernel_rem_pio2+0x6d2>
80031338:	40 69       	lddsp	r9,sp[0x18]
8003133a:	58 39       	cp.w	r9,3
8003133c:	e0 81 00 e3 	brne	80031502 <__kernel_rem_pio2+0x6d2>
80031340:	ee c6 00 01 	sub	r6,r7,1
80031344:	fa c8 ff 20 	sub	r8,sp,-224
80031348:	0e 92       	mov	r2,r7
8003134a:	f0 06 00 36 	add	r6,r8,r6<<0x3
8003134e:	0c 93       	mov	r3,r6
80031350:	c7 d8       	rjmp	8003144a <__kernel_rem_pio2+0x61a>
80031352:	fa c6 ff 20 	sub	r6,sp,-224
80031356:	30 0c       	mov	r12,0
80031358:	ec 07 00 36 	add	r6,r6,r7<<0x3
8003135c:	0e 93       	mov	r3,r7
8003135e:	18 9a       	mov	r10,r12
80031360:	c2 98       	rjmp	800313b2 <__kernel_rem_pio2+0x582>
80031362:	40 6c       	lddsp	r12,sp[0x18]
80031364:	0e 96       	mov	r6,r7
80031366:	fa c8 ff 20 	sub	r8,sp,-224
8003136a:	18 9a       	mov	r10,r12
8003136c:	f0 07 00 37 	add	r7,r8,r7<<0x3
80031370:	c0 a8       	rjmp	80031384 <__kernel_rem_pio2+0x554>
80031372:	ee e8 00 00 	ld.d	r8,r7[0]
80031376:	18 9b       	mov	r11,r12
80031378:	20 87       	sub	r7,8
8003137a:	06 9a       	mov	r10,r3
8003137c:	20 16       	sub	r6,1
8003137e:	e0 a0 06 b3 	rcall	800320e4 <__avr32_f64_add>
80031382:	16 9c       	mov	r12,r11
80031384:	14 93       	mov	r3,r10
80031386:	58 06       	cp.w	r6,0
80031388:	cf 54       	brge	80031372 <__kernel_rem_pio2+0x542>
8003138a:	18 98       	mov	r8,r12
8003138c:	ee 18 80 00 	eorh	r8,0x8000
80031390:	58 05       	cp.w	r5,0
80031392:	f0 0c 17 10 	movne	r12,r8
80031396:	14 98       	mov	r8,r10
80031398:	18 99       	mov	r9,r12
8003139a:	e8 e9 00 00 	st.d	r4[0],r8
8003139e:	cb 28       	rjmp	80031502 <__kernel_rem_pio2+0x6d2>
800313a0:	ec e8 00 00 	ld.d	r8,r6[0]
800313a4:	18 9b       	mov	r11,r12
800313a6:	04 9a       	mov	r10,r2
800313a8:	20 13       	sub	r3,1
800313aa:	e0 a0 06 9d 	rcall	800320e4 <__avr32_f64_add>
800313ae:	20 86       	sub	r6,8
800313b0:	16 9c       	mov	r12,r11
800313b2:	14 92       	mov	r2,r10
800313b4:	58 03       	cp.w	r3,0
800313b6:	cf 54       	brge	800313a0 <__kernel_rem_pio2+0x570>
800313b8:	18 9b       	mov	r11,r12
800313ba:	18 98       	mov	r8,r12
800313bc:	ee 18 80 00 	eorh	r8,0x8000
800313c0:	58 05       	cp.w	r5,0
800313c2:	f0 0c 17 10 	movne	r12,r8
800313c6:	18 93       	mov	r3,r12
800313c8:	14 92       	mov	r2,r10
800313ca:	16 99       	mov	r9,r11
800313cc:	e8 e3 00 00 	st.d	r4[0],r2
800313d0:	14 98       	mov	r8,r10
800313d2:	fa c3 ff 18 	sub	r3,sp,-232
800313d6:	fa ea 00 e0 	ld.d	r10,sp[224]
800313da:	30 16       	mov	r6,1
800313dc:	e0 a0 05 b6 	rcall	80031f48 <__avr32_f64_sub>
800313e0:	c0 78       	rjmp	800313ee <__kernel_rem_pio2+0x5be>
800313e2:	2f f6       	sub	r6,-1
800313e4:	a7 09       	ld.d	r8,r3++
800313e6:	18 9b       	mov	r11,r12
800313e8:	04 9a       	mov	r10,r2
800313ea:	e0 a0 06 7d 	rcall	800320e4 <__avr32_f64_add>
800313ee:	16 9c       	mov	r12,r11
800313f0:	14 92       	mov	r2,r10
800313f2:	0e 36       	cp.w	r6,r7
800313f4:	fe 9a ff f7 	brle	800313e2 <__kernel_rem_pio2+0x5b2>
800313f8:	16 98       	mov	r8,r11
800313fa:	ee 18 80 00 	eorh	r8,0x8000
800313fe:	58 05       	cp.w	r5,0
80031400:	f0 0c 17 10 	movne	r12,r8
80031404:	14 98       	mov	r8,r10
80031406:	18 99       	mov	r9,r12
80031408:	e8 e9 00 08 	st.d	r4[8],r8
8003140c:	c7 b8       	rjmp	80031502 <__kernel_rem_pio2+0x6d2>
8003140e:	e6 e0 00 00 	ld.d	r0,r3[0]
80031412:	e6 e8 00 08 	ld.d	r8,r3[8]
80031416:	00 9a       	mov	r10,r0
80031418:	02 9b       	mov	r11,r1
8003141a:	e0 a0 06 65 	rcall	800320e4 <__avr32_f64_add>
8003141e:	fa eb 00 0c 	st.d	sp[12],r10
80031422:	14 98       	mov	r8,r10
80031424:	16 99       	mov	r9,r11
80031426:	00 9a       	mov	r10,r0
80031428:	02 9b       	mov	r11,r1
8003142a:	e0 a0 05 8f 	rcall	80031f48 <__avr32_f64_sub>
8003142e:	14 98       	mov	r8,r10
80031430:	16 99       	mov	r9,r11
80031432:	e6 ea 00 08 	ld.d	r10,r3[8]
80031436:	e0 a0 06 57 	rcall	800320e4 <__avr32_f64_add>
8003143a:	fa e8 00 0c 	ld.d	r8,sp[12]
8003143e:	e6 eb 00 08 	st.d	r3[8],r10
80031442:	e6 e9 00 00 	st.d	r3[0],r8
80031446:	20 12       	sub	r2,1
80031448:	20 83       	sub	r3,8
8003144a:	58 02       	cp.w	r2,0
8003144c:	fe 99 ff e1 	brgt	8003140e <__kernel_rem_pio2+0x5de>
80031450:	0e 93       	mov	r3,r7
80031452:	c2 18       	rjmp	80031494 <__kernel_rem_pio2+0x664>
80031454:	80 03       	ld.sh	r3,r0[0x0]
80031456:	37 58       	mov	r8,117
80031458:	ec e0 00 00 	ld.d	r0,r6[0]
8003145c:	ec e8 00 08 	ld.d	r8,r6[8]
80031460:	00 9a       	mov	r10,r0
80031462:	02 9b       	mov	r11,r1
80031464:	e0 a0 06 40 	rcall	800320e4 <__avr32_f64_add>
80031468:	fa eb 00 0c 	st.d	sp[12],r10
8003146c:	14 98       	mov	r8,r10
8003146e:	16 99       	mov	r9,r11
80031470:	00 9a       	mov	r10,r0
80031472:	02 9b       	mov	r11,r1
80031474:	e0 a0 05 6a 	rcall	80031f48 <__avr32_f64_sub>
80031478:	14 98       	mov	r8,r10
8003147a:	16 99       	mov	r9,r11
8003147c:	ec ea 00 08 	ld.d	r10,r6[8]
80031480:	e0 a0 06 32 	rcall	800320e4 <__avr32_f64_add>
80031484:	fa e8 00 0c 	ld.d	r8,sp[12]
80031488:	ec eb 00 08 	st.d	r6[8],r10
8003148c:	ec e9 00 00 	st.d	r6[0],r8
80031490:	20 13       	sub	r3,1
80031492:	20 86       	sub	r6,8
80031494:	58 13       	cp.w	r3,1
80031496:	fe 99 ff e1 	brgt	80031458 <__kernel_rem_pio2+0x628>
8003149a:	0e 96       	mov	r6,r7
8003149c:	fa c8 ff 20 	sub	r8,sp,-224
800314a0:	30 0c       	mov	r12,0
800314a2:	f0 07 00 37 	add	r7,r8,r7<<0x3
800314a6:	18 9a       	mov	r10,r12
800314a8:	c0 a8       	rjmp	800314bc <__kernel_rem_pio2+0x68c>
800314aa:	ee e8 00 00 	ld.d	r8,r7[0]
800314ae:	18 9b       	mov	r11,r12
800314b0:	20 87       	sub	r7,8
800314b2:	06 9a       	mov	r10,r3
800314b4:	20 16       	sub	r6,1
800314b6:	e0 a0 06 17 	rcall	800320e4 <__avr32_f64_add>
800314ba:	16 9c       	mov	r12,r11
800314bc:	14 93       	mov	r3,r10
800314be:	58 16       	cp.w	r6,1
800314c0:	fe 99 ff f5 	brgt	800314aa <__kernel_rem_pio2+0x67a>
800314c4:	58 05       	cp.w	r5,0
800314c6:	c0 e1       	brne	800314e2 <__kernel_rem_pio2+0x6b2>
800314c8:	fa e8 00 e0 	ld.d	r8,sp[224]
800314cc:	e8 e9 00 00 	st.d	r4[0],r8
800314d0:	fa e8 00 e8 	ld.d	r8,sp[232]
800314d4:	e8 e9 00 08 	st.d	r4[8],r8
800314d8:	18 99       	mov	r9,r12
800314da:	14 98       	mov	r8,r10
800314dc:	e8 e9 00 10 	st.d	r4[16],r8
800314e0:	c1 18       	rjmp	80031502 <__kernel_rem_pio2+0x6d2>
800314e2:	89 5a       	st.w	r4[0x14],r10
800314e4:	ee 1c 80 00 	eorh	r12,0x8000
800314e8:	89 4c       	st.w	r4[0x10],r12
800314ea:	43 88       	lddsp	r8,sp[0xe0]
800314ec:	ee 18 80 00 	eorh	r8,0x8000
800314f0:	89 08       	st.w	r4[0x0],r8
800314f2:	43 98       	lddsp	r8,sp[0xe4]
800314f4:	89 18       	st.w	r4[0x4],r8
800314f6:	43 a8       	lddsp	r8,sp[0xe8]
800314f8:	ee 18 80 00 	eorh	r8,0x8000
800314fc:	89 28       	st.w	r4[0x8],r8
800314fe:	43 b8       	lddsp	r8,sp[0xec]
80031500:	89 38       	st.w	r4[0xc],r8
80031502:	40 58       	lddsp	r8,sp[0x14]
80031504:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80031508:	fe 3d fd 90 	sub	sp,-624
8003150c:	d8 32       	popm	r0-r7,pc
8003150e:	d7 03       	nop

80031510 <__kernel_sin>:
80031510:	d4 31       	pushm	r0-r7,lr
80031512:	20 4d       	sub	sp,16
80031514:	fa e9 00 08 	st.d	sp[8],r8
80031518:	50 0c       	stdsp	sp[0x0],r12
8003151a:	14 96       	mov	r6,r10
8003151c:	16 97       	mov	r7,r11
8003151e:	f1 db c0 1f 	bfextu	r8,r11,0x0,0x1f
80031522:	e0 69 ff ff 	mov	r9,65535
80031526:	ea 19 3e 3f 	orh	r9,0x3e3f
8003152a:	12 38       	cp.w	r8,r9
8003152c:	e0 89 00 06 	brgt	80031538 <__kernel_sin+0x28>
80031530:	e0 a0 06 64 	rcall	800321f8 <__avr32_f64_to_s32>
80031534:	e0 80 00 b3 	breq	8003169a <__kernel_sin+0x18a>
80031538:	0c 98       	mov	r8,r6
8003153a:	0e 99       	mov	r9,r7
8003153c:	0c 9a       	mov	r10,r6
8003153e:	0e 9b       	mov	r11,r7
80031540:	e0 a0 04 18 	rcall	80031d70 <__avr32_f64_mul>
80031544:	0c 98       	mov	r8,r6
80031546:	14 94       	mov	r4,r10
80031548:	16 95       	mov	r5,r11
8003154a:	0e 99       	mov	r9,r7
8003154c:	e0 a0 04 12 	rcall	80031d70 <__avr32_f64_mul>
80031550:	e0 68 d5 7c 	mov	r8,54652
80031554:	ea 18 5a cf 	orh	r8,0x5acf
80031558:	e0 69 d9 3a 	mov	r9,55610
8003155c:	ea 19 3d e5 	orh	r9,0x3de5
80031560:	14 90       	mov	r0,r10
80031562:	16 91       	mov	r1,r11
80031564:	08 9a       	mov	r10,r4
80031566:	0a 9b       	mov	r11,r5
80031568:	e0 a0 04 04 	rcall	80031d70 <__avr32_f64_mul>
8003156c:	e0 68 9c eb 	mov	r8,40171
80031570:	ea 18 8a 2b 	orh	r8,0x8a2b
80031574:	e0 69 e5 e6 	mov	r9,58854
80031578:	ea 19 3e 5a 	orh	r9,0x3e5a
8003157c:	e0 a0 04 e6 	rcall	80031f48 <__avr32_f64_sub>
80031580:	14 98       	mov	r8,r10
80031582:	16 99       	mov	r9,r11
80031584:	08 9a       	mov	r10,r4
80031586:	0a 9b       	mov	r11,r5
80031588:	e0 a0 03 f4 	rcall	80031d70 <__avr32_f64_mul>
8003158c:	e0 68 fe 7d 	mov	r8,65149
80031590:	ea 18 57 b1 	orh	r8,0x57b1
80031594:	e0 69 1d e3 	mov	r9,7651
80031598:	ea 19 3e c7 	orh	r9,0x3ec7
8003159c:	e0 a0 05 a4 	rcall	800320e4 <__avr32_f64_add>
800315a0:	14 98       	mov	r8,r10
800315a2:	16 99       	mov	r9,r11
800315a4:	08 9a       	mov	r10,r4
800315a6:	0a 9b       	mov	r11,r5
800315a8:	e0 a0 03 e4 	rcall	80031d70 <__avr32_f64_mul>
800315ac:	e0 68 61 d5 	mov	r8,25045
800315b0:	ea 18 19 c1 	orh	r8,0x19c1
800315b4:	e0 69 01 a0 	mov	r9,416
800315b8:	ea 19 3f 2a 	orh	r9,0x3f2a
800315bc:	e0 a0 04 c6 	rcall	80031f48 <__avr32_f64_sub>
800315c0:	14 98       	mov	r8,r10
800315c2:	16 99       	mov	r9,r11
800315c4:	08 9a       	mov	r10,r4
800315c6:	0a 9b       	mov	r11,r5
800315c8:	e0 a0 03 d4 	rcall	80031d70 <__avr32_f64_mul>
800315cc:	e0 68 f8 a6 	mov	r8,63654
800315d0:	ea 18 11 10 	orh	r8,0x1110
800315d4:	e0 69 11 11 	mov	r9,4369
800315d8:	ea 19 3f 81 	orh	r9,0x3f81
800315dc:	e0 a0 05 84 	rcall	800320e4 <__avr32_f64_add>
800315e0:	40 08       	lddsp	r8,sp[0x0]
800315e2:	14 92       	mov	r2,r10
800315e4:	16 93       	mov	r3,r11
800315e6:	58 08       	cp.w	r8,0
800315e8:	c1 e1       	brne	80031624 <__kernel_sin+0x114>
800315ea:	14 98       	mov	r8,r10
800315ec:	06 99       	mov	r9,r3
800315ee:	08 9a       	mov	r10,r4
800315f0:	0a 9b       	mov	r11,r5
800315f2:	e0 a0 03 bf 	rcall	80031d70 <__avr32_f64_mul>
800315f6:	e0 68 55 49 	mov	r8,21833
800315fa:	ea 18 55 55 	orh	r8,0x5555
800315fe:	e0 69 55 55 	mov	r9,21845
80031602:	ea 19 3f c5 	orh	r9,0x3fc5
80031606:	e0 a0 04 a1 	rcall	80031f48 <__avr32_f64_sub>
8003160a:	14 98       	mov	r8,r10
8003160c:	16 99       	mov	r9,r11
8003160e:	00 9a       	mov	r10,r0
80031610:	02 9b       	mov	r11,r1
80031612:	e0 a0 03 af 	rcall	80031d70 <__avr32_f64_mul>
80031616:	14 98       	mov	r8,r10
80031618:	16 99       	mov	r9,r11
8003161a:	0c 9a       	mov	r10,r6
8003161c:	0e 9b       	mov	r11,r7
8003161e:	e0 a0 05 63 	rcall	800320e4 <__avr32_f64_add>
80031622:	c3 a8       	rjmp	80031696 <__kernel_sin+0x186>
80031624:	30 08       	mov	r8,0
80031626:	fc 19 3f e0 	movh	r9,0x3fe0
8003162a:	fa ea 00 08 	ld.d	r10,sp[8]
8003162e:	e0 a0 03 a1 	rcall	80031d70 <__avr32_f64_mul>
80031632:	04 98       	mov	r8,r2
80031634:	fa eb 00 00 	st.d	sp[0],r10
80031638:	06 99       	mov	r9,r3
8003163a:	00 9a       	mov	r10,r0
8003163c:	02 9b       	mov	r11,r1
8003163e:	e0 a0 03 99 	rcall	80031d70 <__avr32_f64_mul>
80031642:	14 98       	mov	r8,r10
80031644:	16 99       	mov	r9,r11
80031646:	fa ea 00 00 	ld.d	r10,sp[0]
8003164a:	e0 a0 04 7f 	rcall	80031f48 <__avr32_f64_sub>
8003164e:	14 98       	mov	r8,r10
80031650:	16 99       	mov	r9,r11
80031652:	08 9a       	mov	r10,r4
80031654:	0a 9b       	mov	r11,r5
80031656:	e0 a0 03 8d 	rcall	80031d70 <__avr32_f64_mul>
8003165a:	fa e8 00 08 	ld.d	r8,sp[8]
8003165e:	e0 a0 04 75 	rcall	80031f48 <__avr32_f64_sub>
80031662:	e0 68 55 49 	mov	r8,21833
80031666:	ea 18 55 55 	orh	r8,0x5555
8003166a:	14 94       	mov	r4,r10
8003166c:	16 95       	mov	r5,r11
8003166e:	e0 69 55 55 	mov	r9,21845
80031672:	ea 19 3f c5 	orh	r9,0x3fc5
80031676:	00 9a       	mov	r10,r0
80031678:	02 9b       	mov	r11,r1
8003167a:	e0 a0 03 7b 	rcall	80031d70 <__avr32_f64_mul>
8003167e:	14 98       	mov	r8,r10
80031680:	16 99       	mov	r9,r11
80031682:	08 9a       	mov	r10,r4
80031684:	0a 9b       	mov	r11,r5
80031686:	e0 a0 05 2f 	rcall	800320e4 <__avr32_f64_add>
8003168a:	14 98       	mov	r8,r10
8003168c:	16 99       	mov	r9,r11
8003168e:	0c 9a       	mov	r10,r6
80031690:	0e 9b       	mov	r11,r7
80031692:	e0 a0 04 5b 	rcall	80031f48 <__avr32_f64_sub>
80031696:	14 96       	mov	r6,r10
80031698:	16 97       	mov	r7,r11
8003169a:	0c 9a       	mov	r10,r6
8003169c:	0e 9b       	mov	r11,r7
8003169e:	2f cd       	sub	sp,-16
800316a0:	d8 32       	popm	r0-r7,pc
800316a2:	d7 03       	nop

800316a4 <atan>:
800316a4:	d4 31       	pushm	r0-r7,lr
800316a6:	20 1d       	sub	sp,4
800316a8:	50 0b       	stdsp	sp[0x0],r11
800316aa:	16 96       	mov	r6,r11
800316ac:	14 97       	mov	r7,r10
800316ae:	e7 db c0 1f 	bfextu	r3,r11,0x0,0x1f
800316b2:	e0 68 ff ff 	mov	r8,65535
800316b6:	ea 18 44 0f 	orh	r8,0x440f
800316ba:	10 33       	cp.w	r3,r8
800316bc:	e0 8a 00 24 	brle	80031704 <atan+0x60>
800316c0:	fc 1c 7f f0 	movh	r12,0x7ff0
800316c4:	18 33       	cp.w	r3,r12
800316c6:	e0 89 00 08 	brgt	800316d6 <atan+0x32>
800316ca:	5f 0c       	sreq	r12
800316cc:	58 0a       	cp.w	r10,0
800316ce:	5f 18       	srne	r8
800316d0:	f9 e8 00 08 	and	r8,r12,r8
800316d4:	c0 80       	breq	800316e4 <atan+0x40>
800316d6:	0c 9b       	mov	r11,r6
800316d8:	0e 9a       	mov	r10,r7
800316da:	0c 99       	mov	r9,r6
800316dc:	0e 98       	mov	r8,r7
800316de:	e0 a0 05 03 	rcall	800320e4 <__avr32_f64_add>
800316e2:	c5 a9       	rjmp	80031996 <atan+0x2f2>
800316e4:	e0 68 21 fb 	mov	r8,8699
800316e8:	ea 18 bf f9 	orh	r8,0xbff9
800316ec:	e0 66 21 fb 	mov	r6,8699
800316f0:	ea 16 3f f9 	orh	r6,0x3ff9
800316f4:	e0 67 2d 18 	mov	r7,11544
800316f8:	ea 17 54 44 	orh	r7,0x5444
800316fc:	58 0b       	cp.w	r11,0
800316fe:	f0 06 17 a0 	movle	r6,r8
80031702:	c6 e9       	rjmp	800319de <atan+0x33a>
80031704:	e0 68 ff ff 	mov	r8,65535
80031708:	ea 18 3f db 	orh	r8,0x3fdb
8003170c:	10 33       	cp.w	r3,r8
8003170e:	e0 89 00 1d 	brgt	80031748 <atan+0xa4>
80031712:	e0 6c ff ff 	mov	r12,65535
80031716:	ea 1c 3e 1f 	orh	r12,0x3e1f
8003171a:	18 33       	cp.w	r3,r12
8003171c:	e0 89 00 73 	brgt	80031802 <atan+0x15e>
80031720:	e0 68 75 9c 	mov	r8,30108
80031724:	ea 18 88 00 	orh	r8,0x8800
80031728:	e0 69 e4 3c 	mov	r9,58428
8003172c:	ea 19 7e 37 	orh	r9,0x7e37
80031730:	0c 9b       	mov	r11,r6
80031732:	e0 a0 04 d9 	rcall	800320e4 <__avr32_f64_add>
80031736:	14 98       	mov	r8,r10
80031738:	16 99       	mov	r9,r11
8003173a:	30 0a       	mov	r10,0
8003173c:	fc 1b 3f f0 	movh	r11,0x3ff0
80031740:	e0 a0 06 2a 	rcall	80032394 <__avr32_f64_cmp_lt>
80031744:	c5 f0       	breq	80031802 <atan+0x15e>
80031746:	c4 c9       	rjmp	800319de <atan+0x33a>
80031748:	0c 9b       	mov	r11,r6
8003174a:	c5 3d       	rcall	800319f0 <fabs>
8003174c:	e0 68 ff ff 	mov	r8,65535
80031750:	ea 18 3f f2 	orh	r8,0x3ff2
80031754:	14 94       	mov	r4,r10
80031756:	16 95       	mov	r5,r11
80031758:	10 33       	cp.w	r3,r8
8003175a:	e0 89 00 33 	brgt	800317c0 <atan+0x11c>
8003175e:	e0 6c ff ff 	mov	r12,65535
80031762:	ea 1c 3f e5 	orh	r12,0x3fe5
80031766:	18 33       	cp.w	r3,r12
80031768:	e0 89 00 14 	brgt	80031790 <atan+0xec>
8003176c:	0a 99       	mov	r9,r5
8003176e:	14 98       	mov	r8,r10
80031770:	e0 a0 04 ba 	rcall	800320e4 <__avr32_f64_add>
80031774:	30 08       	mov	r8,0
80031776:	fc 19 3f f0 	movh	r9,0x3ff0
8003177a:	e0 a0 03 e7 	rcall	80031f48 <__avr32_f64_sub>
8003177e:	30 08       	mov	r8,0
80031780:	14 96       	mov	r6,r10
80031782:	16 97       	mov	r7,r11
80031784:	08 9a       	mov	r10,r4
80031786:	0a 9b       	mov	r11,r5
80031788:	fc 19 40 00 	movh	r9,0x4000
8003178c:	30 05       	mov	r5,0
8003178e:	c0 e8       	rjmp	800317aa <atan+0x106>
80031790:	30 08       	mov	r8,0
80031792:	fc 19 3f f0 	movh	r9,0x3ff0
80031796:	e0 a0 03 d9 	rcall	80031f48 <__avr32_f64_sub>
8003179a:	30 08       	mov	r8,0
8003179c:	14 96       	mov	r6,r10
8003179e:	16 97       	mov	r7,r11
800317a0:	08 9a       	mov	r10,r4
800317a2:	0a 9b       	mov	r11,r5
800317a4:	fc 19 3f f0 	movh	r9,0x3ff0
800317a8:	30 15       	mov	r5,1
800317aa:	e0 a0 04 9d 	rcall	800320e4 <__avr32_f64_add>
800317ae:	14 98       	mov	r8,r10
800317b0:	16 99       	mov	r9,r11
800317b2:	0c 9a       	mov	r10,r6
800317b4:	0e 9b       	mov	r11,r7
800317b6:	e0 a0 06 3d 	rcall	80032430 <__avr32_f64_div>
800317ba:	16 96       	mov	r6,r11
800317bc:	14 97       	mov	r7,r10
800317be:	c2 38       	rjmp	80031804 <atan+0x160>
800317c0:	e0 68 7f ff 	mov	r8,32767
800317c4:	ea 18 40 03 	orh	r8,0x4003
800317c8:	10 33       	cp.w	r3,r8
800317ca:	e0 89 00 15 	brgt	800317f4 <atan+0x150>
800317ce:	30 08       	mov	r8,0
800317d0:	fc 19 3f f8 	movh	r9,0x3ff8
800317d4:	e0 a0 03 ba 	rcall	80031f48 <__avr32_f64_sub>
800317d8:	30 08       	mov	r8,0
800317da:	16 97       	mov	r7,r11
800317dc:	fc 19 3f f8 	movh	r9,0x3ff8
800317e0:	0a 9b       	mov	r11,r5
800317e2:	14 96       	mov	r6,r10
800317e4:	08 9a       	mov	r10,r4
800317e6:	e0 a0 02 c5 	rcall	80031d70 <__avr32_f64_mul>
800317ea:	30 08       	mov	r8,0
800317ec:	fc 19 3f f0 	movh	r9,0x3ff0
800317f0:	30 25       	mov	r5,2
800317f2:	cd cb       	rjmp	800317aa <atan+0x106>
800317f4:	14 98       	mov	r8,r10
800317f6:	0a 99       	mov	r9,r5
800317f8:	30 0a       	mov	r10,0
800317fa:	fc 1b bf f0 	movh	r11,0xbff0
800317fe:	30 35       	mov	r5,3
80031800:	cd bb       	rjmp	800317b6 <atan+0x112>
80031802:	3f f5       	mov	r5,-1
80031804:	0c 99       	mov	r9,r6
80031806:	0e 98       	mov	r8,r7
80031808:	0c 9b       	mov	r11,r6
8003180a:	0e 9a       	mov	r10,r7
8003180c:	e0 a0 02 b2 	rcall	80031d70 <__avr32_f64_mul>
80031810:	16 91       	mov	r1,r11
80031812:	14 90       	mov	r0,r10
80031814:	02 99       	mov	r9,r1
80031816:	14 98       	mov	r8,r10
80031818:	e0 a0 02 ac 	rcall	80031d70 <__avr32_f64_mul>
8003181c:	e0 68 da 11 	mov	r8,55825
80031820:	ea 18 e3 22 	orh	r8,0xe322
80031824:	14 92       	mov	r2,r10
80031826:	16 93       	mov	r3,r11
80031828:	e0 69 ad 3a 	mov	r9,44346
8003182c:	ea 19 3f 90 	orh	r9,0x3f90
80031830:	e0 a0 02 a0 	rcall	80031d70 <__avr32_f64_mul>
80031834:	e0 68 0d eb 	mov	r8,3563
80031838:	ea 18 24 76 	orh	r8,0x2476
8003183c:	e0 69 7b 4b 	mov	r9,31563
80031840:	ea 19 3f a9 	orh	r9,0x3fa9
80031844:	e0 a0 04 50 	rcall	800320e4 <__avr32_f64_add>
80031848:	14 98       	mov	r8,r10
8003184a:	16 99       	mov	r9,r11
8003184c:	04 9a       	mov	r10,r2
8003184e:	06 9b       	mov	r11,r3
80031850:	e0 a0 02 90 	rcall	80031d70 <__avr32_f64_mul>
80031854:	e0 68 3d 51 	mov	r8,15697
80031858:	ea 18 a0 d0 	orh	r8,0xa0d0
8003185c:	e0 69 0d 66 	mov	r9,3430
80031860:	ea 19 3f b1 	orh	r9,0x3fb1
80031864:	e0 a0 04 40 	rcall	800320e4 <__avr32_f64_add>
80031868:	14 98       	mov	r8,r10
8003186a:	16 99       	mov	r9,r11
8003186c:	04 9a       	mov	r10,r2
8003186e:	06 9b       	mov	r11,r3
80031870:	e0 a0 02 80 	rcall	80031d70 <__avr32_f64_mul>
80031874:	e0 68 20 6e 	mov	r8,8302
80031878:	ea 18 c5 4c 	orh	r8,0xc54c
8003187c:	e0 69 45 cd 	mov	r9,17869
80031880:	ea 19 3f b7 	orh	r9,0x3fb7
80031884:	e0 a0 04 30 	rcall	800320e4 <__avr32_f64_add>
80031888:	14 98       	mov	r8,r10
8003188a:	16 99       	mov	r9,r11
8003188c:	04 9a       	mov	r10,r2
8003188e:	06 9b       	mov	r11,r3
80031890:	e0 a0 02 70 	rcall	80031d70 <__avr32_f64_mul>
80031894:	e0 68 83 ff 	mov	r8,33791
80031898:	ea 18 92 00 	orh	r8,0x9200
8003189c:	e0 69 49 24 	mov	r9,18724
800318a0:	ea 19 3f c2 	orh	r9,0x3fc2
800318a4:	e0 a0 04 20 	rcall	800320e4 <__avr32_f64_add>
800318a8:	14 98       	mov	r8,r10
800318aa:	16 99       	mov	r9,r11
800318ac:	04 9a       	mov	r10,r2
800318ae:	06 9b       	mov	r11,r3
800318b0:	e0 a0 02 60 	rcall	80031d70 <__avr32_f64_mul>
800318b4:	e0 68 55 0d 	mov	r8,21773
800318b8:	ea 18 55 55 	orh	r8,0x5555
800318bc:	e0 69 55 55 	mov	r9,21845
800318c0:	ea 19 3f d5 	orh	r9,0x3fd5
800318c4:	e0 a0 04 10 	rcall	800320e4 <__avr32_f64_add>
800318c8:	14 98       	mov	r8,r10
800318ca:	16 99       	mov	r9,r11
800318cc:	00 9a       	mov	r10,r0
800318ce:	02 9b       	mov	r11,r1
800318d0:	e0 a0 02 50 	rcall	80031d70 <__avr32_f64_mul>
800318d4:	e0 68 6c 2f 	mov	r8,27695
800318d8:	ea 18 2c 6a 	orh	r8,0x2c6a
800318dc:	e0 69 b4 44 	mov	r9,46148
800318e0:	ea 19 bf a2 	orh	r9,0xbfa2
800318e4:	14 90       	mov	r0,r10
800318e6:	16 91       	mov	r1,r11
800318e8:	04 9a       	mov	r10,r2
800318ea:	06 9b       	mov	r11,r3
800318ec:	e0 a0 02 42 	rcall	80031d70 <__avr32_f64_mul>
800318f0:	e0 68 fd 9a 	mov	r8,64922
800318f4:	ea 18 52 de 	orh	r8,0x52de
800318f8:	e0 69 de 2d 	mov	r9,56877
800318fc:	ea 19 3f ad 	orh	r9,0x3fad
80031900:	e0 a0 03 24 	rcall	80031f48 <__avr32_f64_sub>
80031904:	14 98       	mov	r8,r10
80031906:	16 99       	mov	r9,r11
80031908:	04 9a       	mov	r10,r2
8003190a:	06 9b       	mov	r11,r3
8003190c:	e0 a0 02 32 	rcall	80031d70 <__avr32_f64_mul>
80031910:	e0 68 9a 6d 	mov	r8,39533
80031914:	ea 18 af 74 	orh	r8,0xaf74
80031918:	e0 69 b0 f2 	mov	r9,45298
8003191c:	ea 19 3f b3 	orh	r9,0x3fb3
80031920:	e0 a0 03 14 	rcall	80031f48 <__avr32_f64_sub>
80031924:	14 98       	mov	r8,r10
80031926:	16 99       	mov	r9,r11
80031928:	04 9a       	mov	r10,r2
8003192a:	06 9b       	mov	r11,r3
8003192c:	e0 a0 02 22 	rcall	80031d70 <__avr32_f64_mul>
80031930:	e0 68 16 71 	mov	r8,5745
80031934:	ea 18 fe 23 	orh	r8,0xfe23
80031938:	e0 69 71 c6 	mov	r9,29126
8003193c:	ea 19 3f bc 	orh	r9,0x3fbc
80031940:	e0 a0 03 04 	rcall	80031f48 <__avr32_f64_sub>
80031944:	14 98       	mov	r8,r10
80031946:	16 99       	mov	r9,r11
80031948:	04 9a       	mov	r10,r2
8003194a:	06 9b       	mov	r11,r3
8003194c:	e0 a0 02 12 	rcall	80031d70 <__avr32_f64_mul>
80031950:	e0 68 eb c4 	mov	r8,60356
80031954:	ea 18 99 98 	orh	r8,0x9998
80031958:	e0 69 99 99 	mov	r9,39321
8003195c:	ea 19 3f c9 	orh	r9,0x3fc9
80031960:	e0 a0 02 f4 	rcall	80031f48 <__avr32_f64_sub>
80031964:	14 98       	mov	r8,r10
80031966:	16 99       	mov	r9,r11
80031968:	04 9a       	mov	r10,r2
8003196a:	06 9b       	mov	r11,r3
8003196c:	e0 a0 02 02 	rcall	80031d70 <__avr32_f64_mul>
80031970:	14 98       	mov	r8,r10
80031972:	16 99       	mov	r9,r11
80031974:	5b f5       	cp.w	r5,-1
80031976:	c1 31       	brne	8003199c <atan+0x2f8>
80031978:	00 9a       	mov	r10,r0
8003197a:	02 9b       	mov	r11,r1
8003197c:	e0 a0 03 b4 	rcall	800320e4 <__avr32_f64_add>
80031980:	14 98       	mov	r8,r10
80031982:	16 99       	mov	r9,r11
80031984:	0e 9a       	mov	r10,r7
80031986:	0c 9b       	mov	r11,r6
80031988:	cf 4d       	rcall	80031d70 <__avr32_f64_mul>
8003198a:	14 98       	mov	r8,r10
8003198c:	16 99       	mov	r9,r11
8003198e:	0e 9a       	mov	r10,r7
80031990:	0c 9b       	mov	r11,r6
80031992:	e0 a0 02 db 	rcall	80031f48 <__avr32_f64_sub>
80031996:	16 96       	mov	r6,r11
80031998:	14 97       	mov	r7,r10
8003199a:	c2 28       	rjmp	800319de <atan+0x33a>
8003199c:	00 9a       	mov	r10,r0
8003199e:	02 9b       	mov	r11,r1
800319a0:	e0 a0 03 a2 	rcall	800320e4 <__avr32_f64_add>
800319a4:	14 98       	mov	r8,r10
800319a6:	16 99       	mov	r9,r11
800319a8:	0e 9a       	mov	r10,r7
800319aa:	0c 9b       	mov	r11,r6
800319ac:	ce 2d       	rcall	80031d70 <__avr32_f64_mul>
800319ae:	48 f8       	lddpc	r8,800319e8 <atan+0x344>
800319b0:	f0 05 02 38 	ld.d	r8,r8[r5<<0x3]
800319b4:	e0 a0 02 ca 	rcall	80031f48 <__avr32_f64_sub>
800319b8:	0c 99       	mov	r9,r6
800319ba:	0e 98       	mov	r8,r7
800319bc:	e0 a0 02 c6 	rcall	80031f48 <__avr32_f64_sub>
800319c0:	14 98       	mov	r8,r10
800319c2:	16 99       	mov	r9,r11
800319c4:	48 aa       	lddpc	r10,800319ec <atan+0x348>
800319c6:	f4 05 02 3a 	ld.d	r10,r10[r5<<0x3]
800319ca:	e0 a0 02 bf 	rcall	80031f48 <__avr32_f64_sub>
800319ce:	40 0c       	lddsp	r12,sp[0x0]
800319d0:	16 96       	mov	r6,r11
800319d2:	14 97       	mov	r7,r10
800319d4:	ee 16 80 00 	eorh	r6,0x8000
800319d8:	58 0c       	cp.w	r12,0
800319da:	c0 25       	brlt	800319de <atan+0x33a>
800319dc:	16 96       	mov	r6,r11
800319de:	0c 9b       	mov	r11,r6
800319e0:	0e 9a       	mov	r10,r7
800319e2:	2f fd       	sub	sp,-4
800319e4:	d8 32       	popm	r0-r7,pc
800319e6:	d7 03       	nop
800319e8:	80 03       	ld.sh	r3,r0[0x0]
800319ea:	37 98       	mov	r8,121
800319ec:	80 03       	ld.sh	r3,r0[0x0]
800319ee:	37 b8       	mov	r8,123

800319f0 <fabs>:
800319f0:	f3 db c0 1f 	bfextu	r9,r11,0x0,0x1f
800319f4:	12 9b       	mov	r11,r9
800319f6:	5e fc       	retal	r12

800319f8 <finite>:
800319f8:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
800319fc:	fc 18 80 10 	movh	r8,0x8010
80031a00:	f6 08 00 0c 	add	r12,r11,r8
80031a04:	bf 9c       	lsr	r12,0x1f
80031a06:	5e fc       	retal	r12

80031a08 <floor>:
80031a08:	d4 31       	pushm	r0-r7,lr
80031a0a:	e9 db c2 8b 	bfextu	r4,r11,0x14,0xb
80031a0e:	14 98       	mov	r8,r10
80031a10:	16 99       	mov	r9,r11
80031a12:	14 92       	mov	r2,r10
80031a14:	16 93       	mov	r3,r11
80031a16:	16 97       	mov	r7,r11
80031a18:	14 91       	mov	r1,r10
80031a1a:	14 96       	mov	r6,r10
80031a1c:	e8 c5 03 ff 	sub	r5,r4,1023
80031a20:	59 35       	cp.w	r5,19
80031a22:	e0 89 00 48 	brgt	80031ab2 <floor+0xaa>
80031a26:	58 05       	cp.w	r5,0
80031a28:	c2 04       	brge	80031a68 <floor+0x60>
80031a2a:	e0 68 75 9c 	mov	r8,30108
80031a2e:	ea 18 88 00 	orh	r8,0x8800
80031a32:	e0 69 e4 3c 	mov	r9,58428
80031a36:	ea 19 7e 37 	orh	r9,0x7e37
80031a3a:	e0 a0 03 55 	rcall	800320e4 <__avr32_f64_add>
80031a3e:	14 98       	mov	r8,r10
80031a40:	16 99       	mov	r9,r11
80031a42:	30 0a       	mov	r10,0
80031a44:	30 0b       	mov	r11,0
80031a46:	e0 a0 04 a7 	rcall	80032394 <__avr32_f64_cmp_lt>
80031a4a:	c6 a0       	breq	80031b1e <floor+0x116>
80031a4c:	58 03       	cp.w	r3,0
80031a4e:	c0 45       	brlt	80031a56 <floor+0x4e>
80031a50:	30 06       	mov	r6,0
80031a52:	0c 97       	mov	r7,r6
80031a54:	c6 58       	rjmp	80031b1e <floor+0x116>
80031a56:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80031a5a:	f1 e2 10 06 	or	r6,r8,r2
80031a5e:	fc 18 bf f0 	movh	r8,0xbff0
80031a62:	f0 07 17 10 	movne	r7,r8
80031a66:	c2 48       	rjmp	80031aae <floor+0xa6>
80031a68:	ee 74 ff ff 	mov	r4,1048575
80031a6c:	e8 05 08 44 	asr	r4,r4,r5
80031a70:	e9 eb 00 0c 	and	r12,r4,r11
80031a74:	f9 ea 10 01 	or	r1,r12,r10
80031a78:	c5 50       	breq	80031b22 <floor+0x11a>
80031a7a:	e0 68 75 9c 	mov	r8,30108
80031a7e:	ea 18 88 00 	orh	r8,0x8800
80031a82:	e0 69 e4 3c 	mov	r9,58428
80031a86:	ea 19 7e 37 	orh	r9,0x7e37
80031a8a:	e0 a0 03 2d 	rcall	800320e4 <__avr32_f64_add>
80031a8e:	14 98       	mov	r8,r10
80031a90:	16 99       	mov	r9,r11
80031a92:	30 0a       	mov	r10,0
80031a94:	30 0b       	mov	r11,0
80031a96:	e0 a0 04 7f 	rcall	80032394 <__avr32_f64_cmp_lt>
80031a9a:	c4 20       	breq	80031b1e <floor+0x116>
80031a9c:	58 03       	cp.w	r3,0
80031a9e:	c0 64       	brge	80031aaa <floor+0xa2>
80031aa0:	fc 18 00 10 	movh	r8,0x10
80031aa4:	f0 05 08 45 	asr	r5,r8,r5
80031aa8:	0a 07       	add	r7,r5
80031aaa:	5c d4       	com	r4
80031aac:	08 67       	and	r7,r4
80031aae:	30 06       	mov	r6,0
80031ab0:	c3 78       	rjmp	80031b1e <floor+0x116>
80031ab2:	e0 45 00 33 	cp.w	r5,51
80031ab6:	e0 8a 00 0a 	brle	80031aca <floor+0xc2>
80031aba:	e0 45 04 00 	cp.w	r5,1024
80031abe:	c3 21       	brne	80031b22 <floor+0x11a>
80031ac0:	e0 a0 03 12 	rcall	800320e4 <__avr32_f64_add>
80031ac4:	14 98       	mov	r8,r10
80031ac6:	16 99       	mov	r9,r11
80031ac8:	c2 d8       	rjmp	80031b22 <floor+0x11a>
80031aca:	3f fc       	mov	r12,-1
80031acc:	e8 c4 04 13 	sub	r4,r4,1043
80031ad0:	f8 04 0a 44 	lsr	r4,r12,r4
80031ad4:	e9 ea 00 0c 	and	r12,r4,r10
80031ad8:	c2 50       	breq	80031b22 <floor+0x11a>
80031ada:	e0 68 75 9c 	mov	r8,30108
80031ade:	ea 18 88 00 	orh	r8,0x8800
80031ae2:	e0 69 e4 3c 	mov	r9,58428
80031ae6:	ea 19 7e 37 	orh	r9,0x7e37
80031aea:	e0 a0 02 fd 	rcall	800320e4 <__avr32_f64_add>
80031aee:	14 98       	mov	r8,r10
80031af0:	16 99       	mov	r9,r11
80031af2:	30 0a       	mov	r10,0
80031af4:	30 0b       	mov	r11,0
80031af6:	e0 a0 04 4f 	rcall	80032394 <__avr32_f64_cmp_lt>
80031afa:	c1 20       	breq	80031b1e <floor+0x116>
80031afc:	58 03       	cp.w	r3,0
80031afe:	c0 e4       	brge	80031b1a <floor+0x112>
80031b00:	59 45       	cp.w	r5,20
80031b02:	c0 31       	brne	80031b08 <floor+0x100>
80031b04:	2f f7       	sub	r7,-1
80031b06:	c0 a8       	rjmp	80031b1a <floor+0x112>
80031b08:	30 18       	mov	r8,1
80031b0a:	ea 05 11 34 	rsub	r5,r5,52
80031b0e:	f0 05 09 45 	lsl	r5,r8,r5
80031b12:	0a 06       	add	r6,r5
80031b14:	04 36       	cp.w	r6,r2
80031b16:	e7 d8 e3 07 	addcs	r7,r3,r8
80031b1a:	5c d4       	com	r4
80031b1c:	08 66       	and	r6,r4
80031b1e:	0e 99       	mov	r9,r7
80031b20:	0c 98       	mov	r8,r6
80031b22:	10 9a       	mov	r10,r8
80031b24:	12 9b       	mov	r11,r9
80031b26:	d8 32       	popm	r0-r7,pc

80031b28 <__isnand>:
80031b28:	14 98       	mov	r8,r10
80031b2a:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80031b2e:	f0 0c 11 00 	rsub	r12,r8,0
80031b32:	10 4c       	or	r12,r8
80031b34:	fc 18 7f f0 	movh	r8,0x7ff0
80031b38:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80031b3c:	f0 0c 01 0c 	sub	r12,r8,r12
80031b40:	bf 9c       	lsr	r12,0x1f
80031b42:	5e fc       	retal	r12

80031b44 <matherr>:
80031b44:	5e fd       	retal	0

80031b46 <nan>:
80031b46:	30 0a       	mov	r10,0
80031b48:	fc 1b 7f f8 	movh	r11,0x7ff8
80031b4c:	5e fc       	retal	r12
80031b4e:	d7 03       	nop

80031b50 <rint>:
80031b50:	d4 21       	pushm	r4-r7,lr
80031b52:	20 2d       	sub	sp,8
80031b54:	ed db c2 8b 	bfextu	r6,r11,0x14,0xb
80031b58:	14 94       	mov	r4,r10
80031b5a:	16 95       	mov	r5,r11
80031b5c:	14 98       	mov	r8,r10
80031b5e:	16 9e       	mov	lr,r11
80031b60:	16 9c       	mov	r12,r11
80031b62:	f6 07 16 1f 	lsr	r7,r11,0x1f
80031b66:	ec c9 03 ff 	sub	r9,r6,1023
80031b6a:	59 39       	cp.w	r9,19
80031b6c:	e0 89 00 49 	brgt	80031bfe <rint+0xae>
80031b70:	58 09       	cp.w	r9,0
80031b72:	c2 b4       	brge	80031bc8 <rint+0x78>
80031b74:	f3 db c0 1f 	bfextu	r9,r11,0x0,0x1f
80031b78:	14 49       	or	r9,r10
80031b7a:	c7 10       	breq	80031c5c <rint+0x10c>
80031b7c:	fd db c0 14 	bfextu	lr,r11,0x0,0x14
80031b80:	4b 9c       	lddpc	r12,80031c64 <rint+0x114>
80031b82:	fd e4 10 08 	or	r8,lr,r4
80031b86:	16 99       	mov	r9,r11
80031b88:	f0 0e 11 00 	rsub	lr,r8,0
80031b8c:	e6 19 ff fe 	andh	r9,0xfffe,COH
80031b90:	fd e8 10 08 	or	r8,lr,r8
80031b94:	ad 88       	lsr	r8,0xc
80031b96:	e6 18 00 08 	andh	r8,0x8,COH
80031b9a:	f1 e9 10 0b 	or	r11,r8,r9
80031b9e:	f8 07 02 34 	ld.d	r4,r12[r7<<0x3]
80031ba2:	14 98       	mov	r8,r10
80031ba4:	16 99       	mov	r9,r11
80031ba6:	08 9a       	mov	r10,r4
80031ba8:	0a 9b       	mov	r11,r5
80031baa:	e0 a0 02 9d 	rcall	800320e4 <__avr32_f64_add>
80031bae:	08 98       	mov	r8,r4
80031bb0:	fa eb 00 00 	st.d	sp[0],r10
80031bb4:	0a 99       	mov	r9,r5
80031bb6:	fa ea 00 00 	ld.d	r10,sp[0]
80031bba:	cc 7d       	rcall	80031f48 <__avr32_f64_sub>
80031bbc:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
80031bc0:	14 94       	mov	r4,r10
80031bc2:	f7 e7 11 f5 	or	r5,r11,r7<<0x1f
80031bc6:	c4 b8       	rjmp	80031c5c <rint+0x10c>
80031bc8:	ee 7a ff ff 	mov	r10,1048575
80031bcc:	f4 09 08 4a 	asr	r10,r10,r9
80031bd0:	f5 eb 00 0b 	and	r11,r10,r11
80031bd4:	08 4b       	or	r11,r4
80031bd6:	c4 30       	breq	80031c5c <rint+0x10c>
80031bd8:	a1 9a       	lsr	r10,0x1
80031bda:	f5 e5 00 0b 	and	r11,r10,r5
80031bde:	08 4b       	or	r11,r4
80031be0:	c0 31       	brne	80031be6 <rint+0x96>
80031be2:	16 98       	mov	r8,r11
80031be4:	c2 b8       	rjmp	80031c3a <rint+0xea>
80031be6:	59 39       	cp.w	r9,19
80031be8:	c0 41       	brne	80031bf0 <rint+0xa0>
80031bea:	fc 18 40 00 	movh	r8,0x4000
80031bee:	c2 68       	rjmp	80031c3a <rint+0xea>
80031bf0:	14 8c       	andn	r12,r10
80031bf2:	e2 6a 00 00 	mov	r10,131072
80031bf6:	f4 09 08 49 	asr	r9,r10,r9
80031bfa:	12 4c       	or	r12,r9
80031bfc:	c1 f8       	rjmp	80031c3a <rint+0xea>
80031bfe:	e0 49 00 33 	cp.w	r9,51
80031c02:	e0 8a 00 0a 	brle	80031c16 <rint+0xc6>
80031c06:	e0 49 04 00 	cp.w	r9,1024
80031c0a:	c2 91       	brne	80031c5c <rint+0x10c>
80031c0c:	14 98       	mov	r8,r10
80031c0e:	16 99       	mov	r9,r11
80031c10:	e0 a0 02 6a 	rcall	800320e4 <__avr32_f64_add>
80031c14:	c2 28       	rjmp	80031c58 <rint+0x108>
80031c16:	ec c6 04 13 	sub	r6,r6,1043
80031c1a:	3f f9       	mov	r9,-1
80031c1c:	f2 06 0a 49 	lsr	r9,r9,r6
80031c20:	f3 ea 00 0a 	and	r10,r9,r10
80031c24:	c1 c0       	breq	80031c5c <rint+0x10c>
80031c26:	a1 99       	lsr	r9,0x1
80031c28:	f3 e4 00 0a 	and	r10,r9,r4
80031c2c:	c0 70       	breq	80031c3a <rint+0xea>
80031c2e:	12 88       	andn	r8,r9
80031c30:	fc 19 40 00 	movh	r9,0x4000
80031c34:	f2 06 08 46 	asr	r6,r9,r6
80031c38:	0c 48       	or	r8,r6
80031c3a:	48 ba       	lddpc	r10,80031c64 <rint+0x114>
80031c3c:	18 99       	mov	r9,r12
80031c3e:	f4 07 02 36 	ld.d	r6,r10[r7<<0x3]
80031c42:	0c 9a       	mov	r10,r6
80031c44:	0e 9b       	mov	r11,r7
80031c46:	e0 a0 02 4f 	rcall	800320e4 <__avr32_f64_add>
80031c4a:	0c 98       	mov	r8,r6
80031c4c:	fa eb 00 00 	st.d	sp[0],r10
80031c50:	0e 99       	mov	r9,r7
80031c52:	fa ea 00 00 	ld.d	r10,sp[0]
80031c56:	c7 9d       	rcall	80031f48 <__avr32_f64_sub>
80031c58:	14 94       	mov	r4,r10
80031c5a:	16 95       	mov	r5,r11
80031c5c:	08 9a       	mov	r10,r4
80031c5e:	0a 9b       	mov	r11,r5
80031c60:	2f ed       	sub	sp,-8
80031c62:	d8 22       	popm	r4-r7,pc
80031c64:	80 03       	ld.sh	r3,r0[0x0]
80031c66:	37 d8       	mov	r8,125

80031c68 <scalbn>:
80031c68:	d4 21       	pushm	r4-r7,lr
80031c6a:	18 97       	mov	r7,r12
80031c6c:	14 98       	mov	r8,r10
80031c6e:	16 99       	mov	r9,r11
80031c70:	14 94       	mov	r4,r10
80031c72:	16 95       	mov	r5,r11
80031c74:	14 96       	mov	r6,r10
80031c76:	16 9c       	mov	r12,r11
80031c78:	fd db c2 8b 	bfextu	lr,r11,0x14,0xb
80031c7c:	c1 11       	brne	80031c9e <scalbn+0x36>
80031c7e:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
80031c82:	14 4c       	or	r12,r10
80031c84:	c5 c0       	breq	80031d3c <scalbn+0xd4>
80031c86:	30 08       	mov	r8,0
80031c88:	fc 19 43 50 	movh	r9,0x4350
80031c8c:	c7 2c       	rcall	80031d70 <__avr32_f64_mul>
80031c8e:	16 99       	mov	r9,r11
80031c90:	14 98       	mov	r8,r10
80031c92:	14 94       	mov	r4,r10
80031c94:	12 95       	mov	r5,r9
80031c96:	fe 57 3c b0 	cp.w	r7,-50000
80031c9a:	c0 84       	brge	80031caa <scalbn+0x42>
80031c9c:	c3 a8       	rjmp	80031d10 <scalbn+0xa8>
80031c9e:	e0 4e 07 ff 	cp.w	lr,2047
80031ca2:	c0 81       	brne	80031cb2 <scalbn+0x4a>
80031ca4:	e0 a0 02 20 	rcall	800320e4 <__avr32_f64_add>
80031ca8:	c4 88       	rjmp	80031d38 <scalbn+0xd0>
80031caa:	fd d9 c2 8b 	bfextu	lr,r9,0x14,0xb
80031cae:	12 9c       	mov	r12,r9
80031cb0:	23 6e       	sub	lr,54
80031cb2:	0e 0e       	add	lr,r7
80031cb4:	e0 4e 07 fe 	cp.w	lr,2046
80031cb8:	e0 89 00 11 	brgt	80031cda <scalbn+0x72>
80031cbc:	58 0e       	cp.w	lr,0
80031cbe:	e0 8a 00 07 	brle	80031ccc <scalbn+0x64>
80031cc2:	e4 1c 80 0f 	andh	r12,0x800f
80031cc6:	f9 ee 11 49 	or	r9,r12,lr<<0x14
80031cca:	c3 98       	rjmp	80031d3c <scalbn+0xd4>
80031ccc:	fe 5e ff cb 	cp.w	lr,-53
80031cd0:	c2 94       	brge	80031d22 <scalbn+0xba>
80031cd2:	e0 47 c3 50 	cp.w	r7,50000
80031cd6:	e0 8a 00 14 	brle	80031cfe <scalbn+0x96>
80031cda:	e0 6a 75 9c 	mov	r10,30108
80031cde:	ea 1a 88 00 	orh	r10,0x8800
80031ce2:	e0 6b e4 3c 	mov	r11,58428
80031ce6:	ea 1b 7e 37 	orh	r11,0x7e37
80031cea:	c3 7c       	rcall	80031d58 <copysign>
80031cec:	e0 68 75 9c 	mov	r8,30108
80031cf0:	ea 18 88 00 	orh	r8,0x8800
80031cf4:	e0 69 e4 3c 	mov	r9,58428
80031cf8:	ea 19 7e 37 	orh	r9,0x7e37
80031cfc:	c1 d8       	rjmp	80031d36 <scalbn+0xce>
80031cfe:	e0 6a f3 59 	mov	r10,62297
80031d02:	ea 1a c2 f8 	orh	r10,0xc2f8
80031d06:	e0 6b 6e 1f 	mov	r11,28191
80031d0a:	ea 1b 01 a5 	orh	r11,0x1a5
80031d0e:	c2 5c       	rcall	80031d58 <copysign>
80031d10:	e0 68 f3 59 	mov	r8,62297
80031d14:	ea 18 c2 f8 	orh	r8,0xc2f8
80031d18:	e0 69 6e 1f 	mov	r9,28191
80031d1c:	ea 19 01 a5 	orh	r9,0x1a5
80031d20:	c0 b8       	rjmp	80031d36 <scalbn+0xce>
80031d22:	2c ae       	sub	lr,-54
80031d24:	e4 1c 80 0f 	andh	r12,0x800f
80031d28:	f9 ee 11 49 	or	r9,r12,lr<<0x14
80031d2c:	10 9a       	mov	r10,r8
80031d2e:	12 9b       	mov	r11,r9
80031d30:	30 08       	mov	r8,0
80031d32:	fc 19 3c 90 	movh	r9,0x3c90
80031d36:	c1 dc       	rcall	80031d70 <__avr32_f64_mul>
80031d38:	14 98       	mov	r8,r10
80031d3a:	16 99       	mov	r9,r11
80031d3c:	10 9a       	mov	r10,r8
80031d3e:	12 9b       	mov	r11,r9
80031d40:	d8 22       	popm	r4-r7,pc
80031d42:	d7 03       	nop

80031d44 <fabsf>:
80031d44:	f9 dc c0 1f 	bfextu	r12,r12,0x0,0x1f
80031d48:	5e fc       	retal	r12

80031d4a <isnanf>:
80031d4a:	fc 18 7f 80 	movh	r8,0x7f80
80031d4e:	f9 dc c0 1f 	bfextu	r12,r12,0x0,0x1f
80031d52:	10 3c       	cp.w	r12,r8
80031d54:	5f 9c       	srgt	r12
80031d56:	5e fc       	retal	r12

80031d58 <copysign>:
80031d58:	d4 21       	pushm	r4-r7,lr
80031d5a:	e6 19 80 00 	andh	r9,0x8000,COH
80031d5e:	16 95       	mov	r5,r11
80031d60:	14 94       	mov	r4,r10
80031d62:	14 96       	mov	r6,r10
80031d64:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
80031d68:	f3 eb 10 0b 	or	r11,r9,r11
80031d6c:	16 97       	mov	r7,r11
80031d6e:	d8 22       	popm	r4-r7,pc

80031d70 <__avr32_f64_mul>:
80031d70:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80031d74:	e0 80 00 dc 	breq	80031f2c <__avr32_f64_mul_op1_zero>
80031d78:	d4 21       	pushm	r4-r7,lr
80031d7a:	f7 e9 20 0e 	eor	lr,r11,r9
80031d7e:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80031d82:	30 15       	mov	r5,1
80031d84:	c4 30       	breq	80031e0a <__avr32_f64_mul_op1_subnormal>
80031d86:	ab 6b       	lsl	r11,0xa
80031d88:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80031d8c:	ab 6a       	lsl	r10,0xa
80031d8e:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80031d92:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80031d96:	c5 c0       	breq	80031e4e <__avr32_f64_mul_op2_subnormal>
80031d98:	a1 78       	lsl	r8,0x1
80031d9a:	5c f9       	rol	r9
80031d9c:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80031da0:	e0 47 07 ff 	cp.w	r7,2047
80031da4:	c7 70       	breq	80031e92 <__avr32_f64_mul_op_nan_or_inf>
80031da6:	e0 46 07 ff 	cp.w	r6,2047
80031daa:	c7 40       	breq	80031e92 <__avr32_f64_mul_op_nan_or_inf>
80031dac:	ee 06 00 0c 	add	r12,r7,r6
80031db0:	e0 2c 03 fe 	sub	r12,1022
80031db4:	f6 08 06 44 	mulu.d	r4,r11,r8
80031db8:	f4 09 07 44 	macu.d	r4,r10,r9
80031dbc:	f4 08 06 46 	mulu.d	r6,r10,r8
80031dc0:	f6 09 06 4a 	mulu.d	r10,r11,r9
80031dc4:	08 07       	add	r7,r4
80031dc6:	f4 05 00 4a 	adc	r10,r10,r5
80031dca:	5c 0b       	acr	r11
80031dcc:	ed bb 00 14 	bld	r11,0x14
80031dd0:	c0 50       	breq	80031dda <__avr32_f64_mul+0x6a>
80031dd2:	a1 77       	lsl	r7,0x1
80031dd4:	5c fa       	rol	r10
80031dd6:	5c fb       	rol	r11
80031dd8:	20 1c       	sub	r12,1
80031dda:	58 0c       	cp.w	r12,0
80031ddc:	e0 8a 00 6f 	brle	80031eba <__avr32_f64_mul_res_subnormal>
80031de0:	e0 4c 07 ff 	cp.w	r12,2047
80031de4:	e0 84 00 9c 	brge	80031f1c <__avr32_f64_mul_res_inf>
80031de8:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80031dec:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80031df0:	ef e6 12 17 	or	r7,r7,r6>>0x1
80031df4:	ee 17 80 00 	eorh	r7,0x8000
80031df8:	f1 b7 04 20 	satu	r7,0x1
80031dfc:	0e 0a       	add	r10,r7
80031dfe:	5c 0b       	acr	r11
80031e00:	ed be 00 1f 	bld	lr,0x1f
80031e04:	ef bb 00 1f 	bst	r11,0x1f
80031e08:	d8 22       	popm	r4-r7,pc

80031e0a <__avr32_f64_mul_op1_subnormal>:
80031e0a:	e4 1b 00 0f 	andh	r11,0xf
80031e0e:	f4 0c 12 00 	clz	r12,r10
80031e12:	f6 06 12 00 	clz	r6,r11
80031e16:	f7 bc 03 e1 	sublo	r12,-31
80031e1a:	f8 06 17 30 	movlo	r6,r12
80031e1e:	f7 b6 02 01 	subhs	r6,1
80031e22:	e0 46 00 20 	cp.w	r6,32
80031e26:	c0 d4       	brge	80031e40 <__avr32_f64_mul_op1_subnormal+0x36>
80031e28:	ec 0c 11 20 	rsub	r12,r6,32
80031e2c:	f6 06 09 4b 	lsl	r11,r11,r6
80031e30:	f4 0c 0a 4c 	lsr	r12,r10,r12
80031e34:	18 4b       	or	r11,r12
80031e36:	f4 06 09 4a 	lsl	r10,r10,r6
80031e3a:	20 b6       	sub	r6,11
80031e3c:	0c 17       	sub	r7,r6
80031e3e:	ca ab       	rjmp	80031d92 <__avr32_f64_mul+0x22>
80031e40:	f4 06 09 4b 	lsl	r11,r10,r6
80031e44:	c6 40       	breq	80031f0c <__avr32_f64_mul_res_zero>
80031e46:	30 0a       	mov	r10,0
80031e48:	20 b6       	sub	r6,11
80031e4a:	0c 17       	sub	r7,r6
80031e4c:	ca 3b       	rjmp	80031d92 <__avr32_f64_mul+0x22>

80031e4e <__avr32_f64_mul_op2_subnormal>:
80031e4e:	e4 19 00 0f 	andh	r9,0xf
80031e52:	f0 0c 12 00 	clz	r12,r8
80031e56:	f2 05 12 00 	clz	r5,r9
80031e5a:	f7 bc 03 ea 	sublo	r12,-22
80031e5e:	f8 05 17 30 	movlo	r5,r12
80031e62:	f7 b5 02 0a 	subhs	r5,10
80031e66:	e0 45 00 20 	cp.w	r5,32
80031e6a:	c0 d4       	brge	80031e84 <__avr32_f64_mul_op2_subnormal+0x36>
80031e6c:	ea 0c 11 20 	rsub	r12,r5,32
80031e70:	f2 05 09 49 	lsl	r9,r9,r5
80031e74:	f0 0c 0a 4c 	lsr	r12,r8,r12
80031e78:	18 49       	or	r9,r12
80031e7a:	f0 05 09 48 	lsl	r8,r8,r5
80031e7e:	20 25       	sub	r5,2
80031e80:	0a 16       	sub	r6,r5
80031e82:	c8 fb       	rjmp	80031da0 <__avr32_f64_mul+0x30>
80031e84:	f0 05 09 49 	lsl	r9,r8,r5
80031e88:	c4 20       	breq	80031f0c <__avr32_f64_mul_res_zero>
80031e8a:	30 08       	mov	r8,0
80031e8c:	20 25       	sub	r5,2
80031e8e:	0a 16       	sub	r6,r5
80031e90:	c8 8b       	rjmp	80031da0 <__avr32_f64_mul+0x30>

80031e92 <__avr32_f64_mul_op_nan_or_inf>:
80031e92:	e4 19 00 0f 	andh	r9,0xf
80031e96:	e4 1b 00 0f 	andh	r11,0xf
80031e9a:	14 4b       	or	r11,r10
80031e9c:	10 49       	or	r9,r8
80031e9e:	e0 47 07 ff 	cp.w	r7,2047
80031ea2:	c0 91       	brne	80031eb4 <__avr32_f64_mul_op1_not_naninf>
80031ea4:	58 0b       	cp.w	r11,0
80031ea6:	c3 81       	brne	80031f16 <__avr32_f64_mul_res_nan>
80031ea8:	e0 46 07 ff 	cp.w	r6,2047
80031eac:	c3 81       	brne	80031f1c <__avr32_f64_mul_res_inf>
80031eae:	58 09       	cp.w	r9,0
80031eb0:	c3 60       	breq	80031f1c <__avr32_f64_mul_res_inf>
80031eb2:	c3 28       	rjmp	80031f16 <__avr32_f64_mul_res_nan>

80031eb4 <__avr32_f64_mul_op1_not_naninf>:
80031eb4:	58 09       	cp.w	r9,0
80031eb6:	c3 30       	breq	80031f1c <__avr32_f64_mul_res_inf>
80031eb8:	c2 f8       	rjmp	80031f16 <__avr32_f64_mul_res_nan>

80031eba <__avr32_f64_mul_res_subnormal>:
80031eba:	5c 3c       	neg	r12
80031ebc:	2f fc       	sub	r12,-1
80031ebe:	f1 bc 04 c0 	satu	r12,0x6
80031ec2:	e0 4c 00 20 	cp.w	r12,32
80031ec6:	c1 14       	brge	80031ee8 <__avr32_f64_mul_res_subnormal+0x2e>
80031ec8:	f8 08 11 20 	rsub	r8,r12,32
80031ecc:	0e 46       	or	r6,r7
80031ece:	ee 0c 0a 47 	lsr	r7,r7,r12
80031ed2:	f4 08 09 49 	lsl	r9,r10,r8
80031ed6:	12 47       	or	r7,r9
80031ed8:	f4 0c 0a 4a 	lsr	r10,r10,r12
80031edc:	f6 08 09 49 	lsl	r9,r11,r8
80031ee0:	12 4a       	or	r10,r9
80031ee2:	f6 0c 0a 4b 	lsr	r11,r11,r12
80031ee6:	c8 3b       	rjmp	80031dec <__avr32_f64_mul+0x7c>
80031ee8:	f8 08 11 20 	rsub	r8,r12,32
80031eec:	f9 b9 00 00 	moveq	r9,0
80031ef0:	c0 30       	breq	80031ef6 <__avr32_f64_mul_res_subnormal+0x3c>
80031ef2:	f6 08 09 49 	lsl	r9,r11,r8
80031ef6:	0e 46       	or	r6,r7
80031ef8:	ed ea 10 16 	or	r6,r6,r10<<0x1
80031efc:	f4 0c 0a 4a 	lsr	r10,r10,r12
80031f00:	f3 ea 10 07 	or	r7,r9,r10
80031f04:	f6 0c 0a 4a 	lsr	r10,r11,r12
80031f08:	30 0b       	mov	r11,0
80031f0a:	c7 1b       	rjmp	80031dec <__avr32_f64_mul+0x7c>

80031f0c <__avr32_f64_mul_res_zero>:
80031f0c:	1c 9b       	mov	r11,lr
80031f0e:	e6 1b 80 00 	andh	r11,0x8000,COH
80031f12:	30 0a       	mov	r10,0
80031f14:	d8 22       	popm	r4-r7,pc

80031f16 <__avr32_f64_mul_res_nan>:
80031f16:	3f fb       	mov	r11,-1
80031f18:	3f fa       	mov	r10,-1
80031f1a:	d8 22       	popm	r4-r7,pc

80031f1c <__avr32_f64_mul_res_inf>:
80031f1c:	f0 6b 00 00 	mov	r11,-1048576
80031f20:	ed be 00 1f 	bld	lr,0x1f
80031f24:	ef bb 00 1f 	bst	r11,0x1f
80031f28:	30 0a       	mov	r10,0
80031f2a:	d8 22       	popm	r4-r7,pc

80031f2c <__avr32_f64_mul_op1_zero>:
80031f2c:	f7 e9 20 0b 	eor	r11,r11,r9
80031f30:	e6 1b 80 00 	andh	r11,0x8000,COH
80031f34:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80031f38:	e0 4c 07 ff 	cp.w	r12,2047
80031f3c:	5e 1c       	retne	r12
80031f3e:	3f fa       	mov	r10,-1
80031f40:	3f fb       	mov	r11,-1
80031f42:	5e fc       	retal	r12

80031f44 <__avr32_f64_sub_from_add>:
80031f44:	ee 19 80 00 	eorh	r9,0x8000

80031f48 <__avr32_f64_sub>:
80031f48:	f7 e9 20 0c 	eor	r12,r11,r9
80031f4c:	e0 86 00 ca 	brmi	800320e0 <__avr32_f64_add_from_sub>
80031f50:	eb cd 40 e0 	pushm	r5-r7,lr
80031f54:	16 9c       	mov	r12,r11
80031f56:	e6 1c 80 00 	andh	r12,0x8000,COH
80031f5a:	bf db       	cbr	r11,0x1f
80031f5c:	bf d9       	cbr	r9,0x1f
80031f5e:	10 3a       	cp.w	r10,r8
80031f60:	f2 0b 13 00 	cpc	r11,r9
80031f64:	c0 92       	brcc	80031f76 <__avr32_f64_sub+0x2e>
80031f66:	16 97       	mov	r7,r11
80031f68:	12 9b       	mov	r11,r9
80031f6a:	0e 99       	mov	r9,r7
80031f6c:	14 97       	mov	r7,r10
80031f6e:	10 9a       	mov	r10,r8
80031f70:	0e 98       	mov	r8,r7
80031f72:	ee 1c 80 00 	eorh	r12,0x8000
80031f76:	f6 07 16 14 	lsr	r7,r11,0x14
80031f7a:	ab 7b       	lsl	r11,0xb
80031f7c:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80031f80:	ab 7a       	lsl	r10,0xb
80031f82:	bf bb       	sbr	r11,0x1f
80031f84:	f2 06 16 14 	lsr	r6,r9,0x14
80031f88:	c4 40       	breq	80032010 <__avr32_f64_sub_opL_subnormal>
80031f8a:	ab 79       	lsl	r9,0xb
80031f8c:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80031f90:	ab 78       	lsl	r8,0xb
80031f92:	bf b9       	sbr	r9,0x1f

80031f94 <__avr32_f64_sub_opL_subnormal_done>:
80031f94:	e0 47 07 ff 	cp.w	r7,2047
80031f98:	c4 f0       	breq	80032036 <__avr32_f64_sub_opH_nan_or_inf>
80031f9a:	0e 26       	rsub	r6,r7
80031f9c:	c1 20       	breq	80031fc0 <__avr32_f64_sub_shift_done>
80031f9e:	ec 05 11 20 	rsub	r5,r6,32
80031fa2:	e0 46 00 20 	cp.w	r6,32
80031fa6:	c7 c2       	brcc	8003209e <__avr32_f64_sub_longshift>
80031fa8:	f0 05 09 4e 	lsl	lr,r8,r5
80031fac:	f2 05 09 45 	lsl	r5,r9,r5
80031fb0:	f0 06 0a 48 	lsr	r8,r8,r6
80031fb4:	f2 06 0a 49 	lsr	r9,r9,r6
80031fb8:	0a 48       	or	r8,r5
80031fba:	58 0e       	cp.w	lr,0
80031fbc:	5f 1e       	srne	lr
80031fbe:	1c 48       	or	r8,lr

80031fc0 <__avr32_f64_sub_shift_done>:
80031fc0:	10 1a       	sub	r10,r8
80031fc2:	f6 09 01 4b 	sbc	r11,r11,r9
80031fc6:	f6 06 12 00 	clz	r6,r11
80031fca:	c0 e0       	breq	80031fe6 <__avr32_f64_sub_longnormalize_done>
80031fcc:	c7 83       	brcs	800320bc <__avr32_f64_sub_longnormalize>
80031fce:	ec 0e 11 20 	rsub	lr,r6,32
80031fd2:	f6 06 09 4b 	lsl	r11,r11,r6
80031fd6:	f4 0e 0a 4e 	lsr	lr,r10,lr
80031fda:	1c 4b       	or	r11,lr
80031fdc:	f4 06 09 4a 	lsl	r10,r10,r6
80031fe0:	0c 17       	sub	r7,r6
80031fe2:	e0 8a 00 39 	brle	80032054 <__avr32_f64_sub_subnormal_result>

80031fe6 <__avr32_f64_sub_longnormalize_done>:
80031fe6:	f4 09 15 15 	lsl	r9,r10,0x15
80031fea:	ab 9a       	lsr	r10,0xb
80031fec:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80031ff0:	ab 9b       	lsr	r11,0xb
80031ff2:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80031ff6:	18 4b       	or	r11,r12

80031ff8 <__avr32_f64_sub_round>:
80031ff8:	fc 17 80 00 	movh	r7,0x8000
80031ffc:	ed ba 00 00 	bld	r10,0x0
80032000:	f7 b7 01 ff 	subne	r7,-1
80032004:	0e 39       	cp.w	r9,r7
80032006:	5f 29       	srhs	r9
80032008:	12 0a       	add	r10,r9
8003200a:	5c 0b       	acr	r11
8003200c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80032010 <__avr32_f64_sub_opL_subnormal>:
80032010:	ab 79       	lsl	r9,0xb
80032012:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80032016:	ab 78       	lsl	r8,0xb
80032018:	f3 e8 10 0e 	or	lr,r9,r8
8003201c:	f9 b6 01 01 	movne	r6,1
80032020:	ee 0e 11 00 	rsub	lr,r7,0
80032024:	f9 b7 00 01 	moveq	r7,1
80032028:	ef bb 00 1f 	bst	r11,0x1f
8003202c:	f7 ea 10 0e 	or	lr,r11,r10
80032030:	f9 b7 00 00 	moveq	r7,0
80032034:	cb 0b       	rjmp	80031f94 <__avr32_f64_sub_opL_subnormal_done>

80032036 <__avr32_f64_sub_opH_nan_or_inf>:
80032036:	bf db       	cbr	r11,0x1f
80032038:	f7 ea 10 0e 	or	lr,r11,r10
8003203c:	c0 81       	brne	8003204c <__avr32_f64_sub_return_nan>
8003203e:	e0 46 07 ff 	cp.w	r6,2047
80032042:	c0 50       	breq	8003204c <__avr32_f64_sub_return_nan>
80032044:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80032048:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8003204c <__avr32_f64_sub_return_nan>:
8003204c:	3f fa       	mov	r10,-1
8003204e:	3f fb       	mov	r11,-1
80032050:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80032054 <__avr32_f64_sub_subnormal_result>:
80032054:	5c 37       	neg	r7
80032056:	2f f7       	sub	r7,-1
80032058:	f1 b7 04 c0 	satu	r7,0x6
8003205c:	e0 47 00 20 	cp.w	r7,32
80032060:	c1 14       	brge	80032082 <__avr32_f64_sub_subnormal_result+0x2e>
80032062:	ee 08 11 20 	rsub	r8,r7,32
80032066:	f4 08 09 49 	lsl	r9,r10,r8
8003206a:	5f 16       	srne	r6
8003206c:	f4 07 0a 4a 	lsr	r10,r10,r7
80032070:	0c 4a       	or	r10,r6
80032072:	f6 08 09 49 	lsl	r9,r11,r8
80032076:	f5 e9 10 0a 	or	r10,r10,r9
8003207a:	f4 07 0a 4b 	lsr	r11,r10,r7
8003207e:	30 07       	mov	r7,0
80032080:	cb 3b       	rjmp	80031fe6 <__avr32_f64_sub_longnormalize_done>
80032082:	ee 08 11 40 	rsub	r8,r7,64
80032086:	f6 08 09 49 	lsl	r9,r11,r8
8003208a:	14 49       	or	r9,r10
8003208c:	5f 16       	srne	r6
8003208e:	f6 07 0a 4a 	lsr	r10,r11,r7
80032092:	0c 4a       	or	r10,r6
80032094:	30 0b       	mov	r11,0
80032096:	30 07       	mov	r7,0
80032098:	ca 7b       	rjmp	80031fe6 <__avr32_f64_sub_longnormalize_done>
8003209a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8003209e <__avr32_f64_sub_longshift>:
8003209e:	f1 b6 04 c0 	satu	r6,0x6
800320a2:	f0 0e 17 00 	moveq	lr,r8
800320a6:	c0 40       	breq	800320ae <__avr32_f64_sub_longshift+0x10>
800320a8:	f2 05 09 4e 	lsl	lr,r9,r5
800320ac:	10 4e       	or	lr,r8
800320ae:	f2 06 0a 48 	lsr	r8,r9,r6
800320b2:	30 09       	mov	r9,0
800320b4:	58 0e       	cp.w	lr,0
800320b6:	5f 1e       	srne	lr
800320b8:	1c 48       	or	r8,lr
800320ba:	c8 3b       	rjmp	80031fc0 <__avr32_f64_sub_shift_done>

800320bc <__avr32_f64_sub_longnormalize>:
800320bc:	f4 06 12 00 	clz	r6,r10
800320c0:	f9 b7 03 00 	movlo	r7,0
800320c4:	f9 b6 03 00 	movlo	r6,0
800320c8:	f9 bc 03 00 	movlo	r12,0
800320cc:	f7 b6 02 e0 	subhs	r6,-32
800320d0:	f4 06 09 4b 	lsl	r11,r10,r6
800320d4:	30 0a       	mov	r10,0
800320d6:	0c 17       	sub	r7,r6
800320d8:	fe 9a ff be 	brle	80032054 <__avr32_f64_sub_subnormal_result>
800320dc:	c8 5b       	rjmp	80031fe6 <__avr32_f64_sub_longnormalize_done>
800320de:	d7 03       	nop

800320e0 <__avr32_f64_add_from_sub>:
800320e0:	ee 19 80 00 	eorh	r9,0x8000

800320e4 <__avr32_f64_add>:
800320e4:	f7 e9 20 0c 	eor	r12,r11,r9
800320e8:	fe 96 ff 2e 	brmi	80031f44 <__avr32_f64_sub_from_add>
800320ec:	eb cd 40 e0 	pushm	r5-r7,lr
800320f0:	16 9c       	mov	r12,r11
800320f2:	e6 1c 80 00 	andh	r12,0x8000,COH
800320f6:	bf db       	cbr	r11,0x1f
800320f8:	bf d9       	cbr	r9,0x1f
800320fa:	12 3b       	cp.w	r11,r9
800320fc:	c0 72       	brcc	8003210a <__avr32_f64_add+0x26>
800320fe:	16 97       	mov	r7,r11
80032100:	12 9b       	mov	r11,r9
80032102:	0e 99       	mov	r9,r7
80032104:	14 97       	mov	r7,r10
80032106:	10 9a       	mov	r10,r8
80032108:	0e 98       	mov	r8,r7
8003210a:	30 0e       	mov	lr,0
8003210c:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80032110:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80032114:	b5 ab       	sbr	r11,0x14
80032116:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8003211a:	c6 20       	breq	800321de <__avr32_f64_add_op2_subnormal>
8003211c:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80032120:	b5 a9       	sbr	r9,0x14
80032122:	e0 47 07 ff 	cp.w	r7,2047
80032126:	c2 80       	breq	80032176 <__avr32_f64_add_opH_nan_or_inf>
80032128:	0e 26       	rsub	r6,r7
8003212a:	c1 20       	breq	8003214e <__avr32_f64_add_shift_done>
8003212c:	e0 46 00 36 	cp.w	r6,54
80032130:	c1 52       	brcc	8003215a <__avr32_f64_add_res_of_done>
80032132:	ec 05 11 20 	rsub	r5,r6,32
80032136:	e0 46 00 20 	cp.w	r6,32
8003213a:	c3 52       	brcc	800321a4 <__avr32_f64_add_longshift>
8003213c:	f0 05 09 4e 	lsl	lr,r8,r5
80032140:	f2 05 09 45 	lsl	r5,r9,r5
80032144:	f0 06 0a 48 	lsr	r8,r8,r6
80032148:	f2 06 0a 49 	lsr	r9,r9,r6
8003214c:	0a 48       	or	r8,r5

8003214e <__avr32_f64_add_shift_done>:
8003214e:	10 0a       	add	r10,r8
80032150:	f6 09 00 4b 	adc	r11,r11,r9
80032154:	ed bb 00 15 	bld	r11,0x15
80032158:	c3 40       	breq	800321c0 <__avr32_f64_add_res_of>

8003215a <__avr32_f64_add_res_of_done>:
8003215a:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8003215e:	18 4b       	or	r11,r12

80032160 <__avr32_f64_add_round>:
80032160:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80032164:	18 4e       	or	lr,r12
80032166:	ee 1e 80 00 	eorh	lr,0x8000
8003216a:	f1 be 04 20 	satu	lr,0x1
8003216e:	1c 0a       	add	r10,lr
80032170:	5c 0b       	acr	r11
80032172:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80032176 <__avr32_f64_add_opH_nan_or_inf>:
80032176:	b5 cb       	cbr	r11,0x14
80032178:	f7 ea 10 0e 	or	lr,r11,r10
8003217c:	c1 01       	brne	8003219c <__avr32_f64_add_return_nan>
8003217e:	e0 46 07 ff 	cp.w	r6,2047
80032182:	c0 30       	breq	80032188 <__avr32_f64_add_opL_nan_or_inf>
80032184:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80032188 <__avr32_f64_add_opL_nan_or_inf>:
80032188:	b5 c9       	cbr	r9,0x14
8003218a:	f3 e8 10 0e 	or	lr,r9,r8
8003218e:	c0 71       	brne	8003219c <__avr32_f64_add_return_nan>
80032190:	30 0a       	mov	r10,0
80032192:	fc 1b 7f f0 	movh	r11,0x7ff0
80032196:	18 4b       	or	r11,r12
80032198:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8003219c <__avr32_f64_add_return_nan>:
8003219c:	3f fa       	mov	r10,-1
8003219e:	3f fb       	mov	r11,-1
800321a0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800321a4 <__avr32_f64_add_longshift>:
800321a4:	f1 b6 04 c0 	satu	r6,0x6
800321a8:	f0 0e 17 00 	moveq	lr,r8
800321ac:	c0 60       	breq	800321b8 <__avr32_f64_add_longshift+0x14>
800321ae:	f2 05 09 4e 	lsl	lr,r9,r5
800321b2:	58 08       	cp.w	r8,0
800321b4:	5f 18       	srne	r8
800321b6:	10 4e       	or	lr,r8
800321b8:	f2 06 0a 48 	lsr	r8,r9,r6
800321bc:	30 09       	mov	r9,0
800321be:	cc 8b       	rjmp	8003214e <__avr32_f64_add_shift_done>

800321c0 <__avr32_f64_add_res_of>:
800321c0:	fd ee 10 1e 	or	lr,lr,lr<<0x1
800321c4:	a1 9b       	lsr	r11,0x1
800321c6:	5d 0a       	ror	r10
800321c8:	5d 0e       	ror	lr
800321ca:	2f f7       	sub	r7,-1
800321cc:	e0 47 07 ff 	cp.w	r7,2047
800321d0:	f9 ba 00 00 	moveq	r10,0
800321d4:	f9 bb 00 00 	moveq	r11,0
800321d8:	f9 be 00 00 	moveq	lr,0
800321dc:	cb fb       	rjmp	8003215a <__avr32_f64_add_res_of_done>

800321de <__avr32_f64_add_op2_subnormal>:
800321de:	30 16       	mov	r6,1
800321e0:	58 07       	cp.w	r7,0
800321e2:	ca 01       	brne	80032122 <__avr32_f64_add+0x3e>
800321e4:	b5 cb       	cbr	r11,0x14
800321e6:	10 0a       	add	r10,r8
800321e8:	f6 09 00 4b 	adc	r11,r11,r9
800321ec:	18 4b       	or	r11,r12
800321ee:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800321f2:	d7 03       	nop

800321f4 <__avr32_f64_to_u32>:
800321f4:	58 0b       	cp.w	r11,0
800321f6:	5e 6d       	retmi	0

800321f8 <__avr32_f64_to_s32>:
800321f8:	f6 0c 15 01 	lsl	r12,r11,0x1
800321fc:	b5 9c       	lsr	r12,0x15
800321fe:	e0 2c 03 ff 	sub	r12,1023
80032202:	5e 3d       	retlo	0
80032204:	f8 0c 11 1f 	rsub	r12,r12,31
80032208:	16 99       	mov	r9,r11
8003220a:	ab 7b       	lsl	r11,0xb
8003220c:	bf bb       	sbr	r11,0x1f
8003220e:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80032212:	f6 0c 0a 4b 	lsr	r11,r11,r12
80032216:	a1 79       	lsl	r9,0x1
80032218:	5e 2b       	reths	r11
8003221a:	5c 3b       	neg	r11
8003221c:	5e fb       	retal	r11

8003221e <__avr32_u32_to_f64>:
8003221e:	f8 cb 00 00 	sub	r11,r12,0
80032222:	30 0c       	mov	r12,0
80032224:	c0 38       	rjmp	8003222a <__avr32_s32_to_f64+0x4>

80032226 <__avr32_s32_to_f64>:
80032226:	18 9b       	mov	r11,r12
80032228:	5c 4b       	abs	r11
8003222a:	30 0a       	mov	r10,0
8003222c:	5e 0b       	reteq	r11
8003222e:	d4 01       	pushm	lr
80032230:	e0 69 04 1e 	mov	r9,1054
80032234:	f6 08 12 00 	clz	r8,r11
80032238:	c1 70       	breq	80032266 <__avr32_s32_to_f64+0x40>
8003223a:	c0 c3       	brcs	80032252 <__avr32_s32_to_f64+0x2c>
8003223c:	f0 0e 11 20 	rsub	lr,r8,32
80032240:	f6 08 09 4b 	lsl	r11,r11,r8
80032244:	f4 0e 0a 4e 	lsr	lr,r10,lr
80032248:	1c 4b       	or	r11,lr
8003224a:	f4 08 09 4a 	lsl	r10,r10,r8
8003224e:	10 19       	sub	r9,r8
80032250:	c0 b8       	rjmp	80032266 <__avr32_s32_to_f64+0x40>
80032252:	f4 08 12 00 	clz	r8,r10
80032256:	f9 b8 03 00 	movlo	r8,0
8003225a:	f7 b8 02 e0 	subhs	r8,-32
8003225e:	f4 08 09 4b 	lsl	r11,r10,r8
80032262:	30 0a       	mov	r10,0
80032264:	10 19       	sub	r9,r8
80032266:	58 09       	cp.w	r9,0
80032268:	e0 89 00 30 	brgt	800322c8 <__avr32_s32_to_f64+0xa2>
8003226c:	5c 39       	neg	r9
8003226e:	2f f9       	sub	r9,-1
80032270:	e0 49 00 36 	cp.w	r9,54
80032274:	c0 43       	brcs	8003227c <__avr32_s32_to_f64+0x56>
80032276:	30 0b       	mov	r11,0
80032278:	30 0a       	mov	r10,0
8003227a:	c2 68       	rjmp	800322c6 <__avr32_s32_to_f64+0xa0>
8003227c:	2f 69       	sub	r9,-10
8003227e:	f2 08 11 20 	rsub	r8,r9,32
80032282:	e0 49 00 20 	cp.w	r9,32
80032286:	c0 b2       	brcc	8003229c <__avr32_s32_to_f64+0x76>
80032288:	f4 08 09 4e 	lsl	lr,r10,r8
8003228c:	f6 08 09 48 	lsl	r8,r11,r8
80032290:	f4 09 0a 4a 	lsr	r10,r10,r9
80032294:	f6 09 0a 4b 	lsr	r11,r11,r9
80032298:	10 4b       	or	r11,r8
8003229a:	c0 88       	rjmp	800322aa <__avr32_s32_to_f64+0x84>
8003229c:	f6 08 09 4e 	lsl	lr,r11,r8
800322a0:	14 4e       	or	lr,r10
800322a2:	16 9a       	mov	r10,r11
800322a4:	30 0b       	mov	r11,0
800322a6:	f4 09 0a 4a 	lsr	r10,r10,r9
800322aa:	ed ba 00 00 	bld	r10,0x0
800322ae:	c0 92       	brcc	800322c0 <__avr32_s32_to_f64+0x9a>
800322b0:	1c 7e       	tst	lr,lr
800322b2:	c0 41       	brne	800322ba <__avr32_s32_to_f64+0x94>
800322b4:	ed ba 00 01 	bld	r10,0x1
800322b8:	c0 42       	brcc	800322c0 <__avr32_s32_to_f64+0x9a>
800322ba:	2f fa       	sub	r10,-1
800322bc:	f7 bb 02 ff 	subhs	r11,-1
800322c0:	5c fc       	rol	r12
800322c2:	5d 0b       	ror	r11
800322c4:	5d 0a       	ror	r10
800322c6:	d8 02       	popm	pc
800322c8:	e0 68 03 ff 	mov	r8,1023
800322cc:	ed ba 00 0b 	bld	r10,0xb
800322d0:	f7 b8 00 ff 	subeq	r8,-1
800322d4:	10 0a       	add	r10,r8
800322d6:	5c 0b       	acr	r11
800322d8:	f7 b9 03 fe 	sublo	r9,-2
800322dc:	e0 49 07 ff 	cp.w	r9,2047
800322e0:	c0 55       	brlt	800322ea <__avr32_s32_to_f64+0xc4>
800322e2:	30 0a       	mov	r10,0
800322e4:	fc 1b ff e0 	movh	r11,0xffe0
800322e8:	c0 c8       	rjmp	80032300 <__floatsidf_return_op1>
800322ea:	ed bb 00 1f 	bld	r11,0x1f
800322ee:	f7 b9 01 01 	subne	r9,1
800322f2:	ab 9a       	lsr	r10,0xb
800322f4:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800322f8:	a1 7b       	lsl	r11,0x1
800322fa:	ab 9b       	lsr	r11,0xb
800322fc:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80032300 <__floatsidf_return_op1>:
80032300:	a1 7c       	lsl	r12,0x1
80032302:	5d 0b       	ror	r11
80032304:	d8 02       	popm	pc

80032306 <__avr32_f64_cmp_eq>:
80032306:	10 3a       	cp.w	r10,r8
80032308:	f2 0b 13 00 	cpc	r11,r9
8003230c:	c0 80       	breq	8003231c <__avr32_f64_cmp_eq+0x16>
8003230e:	a1 7b       	lsl	r11,0x1
80032310:	a1 79       	lsl	r9,0x1
80032312:	14 4b       	or	r11,r10
80032314:	12 4b       	or	r11,r9
80032316:	10 4b       	or	r11,r8
80032318:	5e 0f       	reteq	1
8003231a:	5e fd       	retal	0
8003231c:	a1 7b       	lsl	r11,0x1
8003231e:	fc 1c ff e0 	movh	r12,0xffe0
80032322:	58 0a       	cp.w	r10,0
80032324:	f8 0b 13 00 	cpc	r11,r12
80032328:	5e 8f       	retls	1
8003232a:	5e fd       	retal	0

8003232c <__avr32_f64_cmp_ge>:
8003232c:	1a de       	st.w	--sp,lr
8003232e:	1a d7       	st.w	--sp,r7
80032330:	a1 7b       	lsl	r11,0x1
80032332:	5f 3c       	srlo	r12
80032334:	a1 79       	lsl	r9,0x1
80032336:	5f 37       	srlo	r7
80032338:	5c fc       	rol	r12
8003233a:	fc 1e ff e0 	movh	lr,0xffe0
8003233e:	58 0a       	cp.w	r10,0
80032340:	fc 0b 13 00 	cpc	r11,lr
80032344:	e0 8b 00 1d 	brhi	8003237e <__avr32_f64_cmp_ge+0x52>
80032348:	58 08       	cp.w	r8,0
8003234a:	fc 09 13 00 	cpc	r9,lr
8003234e:	e0 8b 00 18 	brhi	8003237e <__avr32_f64_cmp_ge+0x52>
80032352:	58 0b       	cp.w	r11,0
80032354:	f5 ba 00 00 	subfeq	r10,0
80032358:	c1 50       	breq	80032382 <__avr32_f64_cmp_ge+0x56>
8003235a:	1b 07       	ld.w	r7,sp++
8003235c:	1b 0e       	ld.w	lr,sp++
8003235e:	58 3c       	cp.w	r12,3
80032360:	c0 a0       	breq	80032374 <__avr32_f64_cmp_ge+0x48>
80032362:	58 1c       	cp.w	r12,1
80032364:	c0 33       	brcs	8003236a <__avr32_f64_cmp_ge+0x3e>
80032366:	5e 0f       	reteq	1
80032368:	5e 1d       	retne	0
8003236a:	10 3a       	cp.w	r10,r8
8003236c:	f2 0b 13 00 	cpc	r11,r9
80032370:	5e 2f       	reths	1
80032372:	5e 3d       	retlo	0
80032374:	14 38       	cp.w	r8,r10
80032376:	f6 09 13 00 	cpc	r9,r11
8003237a:	5e 2f       	reths	1
8003237c:	5e 3d       	retlo	0
8003237e:	1b 07       	ld.w	r7,sp++
80032380:	d8 0a       	popm	pc,r12=0
80032382:	58 17       	cp.w	r7,1
80032384:	5f 0c       	sreq	r12
80032386:	58 09       	cp.w	r9,0
80032388:	f5 b8 00 00 	subfeq	r8,0
8003238c:	1b 07       	ld.w	r7,sp++
8003238e:	1b 0e       	ld.w	lr,sp++
80032390:	5e 0f       	reteq	1
80032392:	5e fc       	retal	r12

80032394 <__avr32_f64_cmp_lt>:
80032394:	1a de       	st.w	--sp,lr
80032396:	1a d7       	st.w	--sp,r7
80032398:	a1 7b       	lsl	r11,0x1
8003239a:	5f 3c       	srlo	r12
8003239c:	a1 79       	lsl	r9,0x1
8003239e:	5f 37       	srlo	r7
800323a0:	5c fc       	rol	r12
800323a2:	fc 1e ff e0 	movh	lr,0xffe0
800323a6:	58 0a       	cp.w	r10,0
800323a8:	fc 0b 13 00 	cpc	r11,lr
800323ac:	e0 8b 00 1d 	brhi	800323e6 <__avr32_f64_cmp_lt+0x52>
800323b0:	58 08       	cp.w	r8,0
800323b2:	fc 09 13 00 	cpc	r9,lr
800323b6:	e0 8b 00 18 	brhi	800323e6 <__avr32_f64_cmp_lt+0x52>
800323ba:	58 0b       	cp.w	r11,0
800323bc:	f5 ba 00 00 	subfeq	r10,0
800323c0:	c1 50       	breq	800323ea <__avr32_f64_cmp_lt+0x56>
800323c2:	1b 07       	ld.w	r7,sp++
800323c4:	1b 0e       	ld.w	lr,sp++
800323c6:	58 3c       	cp.w	r12,3
800323c8:	c0 a0       	breq	800323dc <__avr32_f64_cmp_lt+0x48>
800323ca:	58 1c       	cp.w	r12,1
800323cc:	c0 33       	brcs	800323d2 <__avr32_f64_cmp_lt+0x3e>
800323ce:	5e 0d       	reteq	0
800323d0:	5e 1f       	retne	1
800323d2:	10 3a       	cp.w	r10,r8
800323d4:	f2 0b 13 00 	cpc	r11,r9
800323d8:	5e 2d       	reths	0
800323da:	5e 3f       	retlo	1
800323dc:	14 38       	cp.w	r8,r10
800323de:	f6 09 13 00 	cpc	r9,r11
800323e2:	5e 2d       	reths	0
800323e4:	5e 3f       	retlo	1
800323e6:	1b 07       	ld.w	r7,sp++
800323e8:	d8 0a       	popm	pc,r12=0
800323ea:	58 17       	cp.w	r7,1
800323ec:	5f 1c       	srne	r12
800323ee:	58 09       	cp.w	r9,0
800323f0:	f5 b8 00 00 	subfeq	r8,0
800323f4:	1b 07       	ld.w	r7,sp++
800323f6:	1b 0e       	ld.w	lr,sp++
800323f8:	5e 0d       	reteq	0
800323fa:	5e fc       	retal	r12

800323fc <__avr32_f32_cmp_lt>:
800323fc:	f8 0a 15 01 	lsl	r10,r12,0x1
80032400:	f6 09 15 01 	lsl	r9,r11,0x1
80032404:	f5 ba 00 00 	subfeq	r10,0
80032408:	5e 0d       	reteq	0
8003240a:	fc 18 ff 00 	movh	r8,0xff00
8003240e:	10 3a       	cp.w	r10,r8
80032410:	5e bd       	rethi	0
80032412:	10 39       	cp.w	r9,r8
80032414:	5e bd       	rethi	0
80032416:	f7 ec 20 08 	eor	r8,r11,r12
8003241a:	ed bc 00 1f 	bld	r12,0x1f
8003241e:	5f 38       	srlo	r8
80032420:	5e 68       	retmi	r8
80032422:	c0 43       	brcs	8003242a <__avr32_f32_cmp_lt+0x2e>
80032424:	16 3c       	cp.w	r12,r11
80032426:	5e 2d       	reths	0
80032428:	5e 3f       	retlo	1
8003242a:	18 3b       	cp.w	r11,r12
8003242c:	5e 2d       	reths	0
8003242e:	5e 3f       	retlo	1

80032430 <__avr32_f64_div>:
80032430:	eb cd 40 ff 	pushm	r0-r7,lr
80032434:	f7 e9 20 0e 	eor	lr,r11,r9
80032438:	f6 07 16 14 	lsr	r7,r11,0x14
8003243c:	a9 7b       	lsl	r11,0x9
8003243e:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
80032442:	a9 7a       	lsl	r10,0x9
80032444:	bd bb       	sbr	r11,0x1d
80032446:	e4 1b 3f ff 	andh	r11,0x3fff
8003244a:	ab d7       	cbr	r7,0xb
8003244c:	e0 80 00 cc 	breq	800325e4 <__avr32_f64_div_round_subnormal+0x54>
80032450:	e0 47 07 ff 	cp.w	r7,2047
80032454:	e0 84 00 b5 	brge	800325be <__avr32_f64_div_round_subnormal+0x2e>
80032458:	f2 06 16 14 	lsr	r6,r9,0x14
8003245c:	a9 79       	lsl	r9,0x9
8003245e:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80032462:	a9 78       	lsl	r8,0x9
80032464:	bd b9       	sbr	r9,0x1d
80032466:	e4 19 3f ff 	andh	r9,0x3fff
8003246a:	ab d6       	cbr	r6,0xb
8003246c:	e0 80 00 e2 	breq	80032630 <__avr32_f64_div_round_subnormal+0xa0>
80032470:	e0 46 07 ff 	cp.w	r6,2047
80032474:	e0 84 00 b2 	brge	800325d8 <__avr32_f64_div_round_subnormal+0x48>
80032478:	0c 17       	sub	r7,r6
8003247a:	fe 37 fc 01 	sub	r7,-1023
8003247e:	fc 1c 80 00 	movh	r12,0x8000
80032482:	f8 03 16 01 	lsr	r3,r12,0x1
80032486:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8003248a:	5c d4       	com	r4
8003248c:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80032490:	e6 09 06 44 	mulu.d	r4,r3,r9
80032494:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80032498:	e6 05 06 44 	mulu.d	r4,r3,r5
8003249c:	ea 03 15 02 	lsl	r3,r5,0x2
800324a0:	e6 09 06 44 	mulu.d	r4,r3,r9
800324a4:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800324a8:	e6 05 06 44 	mulu.d	r4,r3,r5
800324ac:	ea 03 15 02 	lsl	r3,r5,0x2
800324b0:	e6 09 06 44 	mulu.d	r4,r3,r9
800324b4:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800324b8:	e6 05 06 44 	mulu.d	r4,r3,r5
800324bc:	ea 03 15 02 	lsl	r3,r5,0x2
800324c0:	e6 08 06 40 	mulu.d	r0,r3,r8
800324c4:	e4 09 07 40 	macu.d	r0,r2,r9
800324c8:	e6 09 06 44 	mulu.d	r4,r3,r9
800324cc:	02 04       	add	r4,r1
800324ce:	5c 05       	acr	r5
800324d0:	a3 65       	lsl	r5,0x2
800324d2:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800324d6:	a3 64       	lsl	r4,0x2
800324d8:	5c 34       	neg	r4
800324da:	f8 05 01 45 	sbc	r5,r12,r5
800324de:	e6 04 06 40 	mulu.d	r0,r3,r4
800324e2:	e4 05 07 40 	macu.d	r0,r2,r5
800324e6:	e6 05 06 44 	mulu.d	r4,r3,r5
800324ea:	02 04       	add	r4,r1
800324ec:	5c 05       	acr	r5
800324ee:	ea 03 15 02 	lsl	r3,r5,0x2
800324f2:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800324f6:	e8 02 15 02 	lsl	r2,r4,0x2
800324fa:	e6 08 06 40 	mulu.d	r0,r3,r8
800324fe:	e4 09 07 40 	macu.d	r0,r2,r9
80032502:	e6 09 06 44 	mulu.d	r4,r3,r9
80032506:	02 04       	add	r4,r1
80032508:	5c 05       	acr	r5
8003250a:	a3 65       	lsl	r5,0x2
8003250c:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80032510:	a3 64       	lsl	r4,0x2
80032512:	5c 34       	neg	r4
80032514:	f8 05 01 45 	sbc	r5,r12,r5
80032518:	e6 04 06 40 	mulu.d	r0,r3,r4
8003251c:	e4 05 07 40 	macu.d	r0,r2,r5
80032520:	e6 05 06 44 	mulu.d	r4,r3,r5
80032524:	02 04       	add	r4,r1
80032526:	5c 05       	acr	r5
80032528:	ea 03 15 02 	lsl	r3,r5,0x2
8003252c:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80032530:	e8 02 15 02 	lsl	r2,r4,0x2
80032534:	e6 0a 06 40 	mulu.d	r0,r3,r10
80032538:	e4 0b 07 40 	macu.d	r0,r2,r11
8003253c:	e6 0b 06 42 	mulu.d	r2,r3,r11
80032540:	02 02       	add	r2,r1
80032542:	5c 03       	acr	r3
80032544:	ed b3 00 1c 	bld	r3,0x1c
80032548:	c0 90       	breq	8003255a <__avr32_f64_div+0x12a>
8003254a:	a1 72       	lsl	r2,0x1
8003254c:	5c f3       	rol	r3
8003254e:	20 17       	sub	r7,1
80032550:	a3 9a       	lsr	r10,0x3
80032552:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80032556:	a3 9b       	lsr	r11,0x3
80032558:	c0 58       	rjmp	80032562 <__avr32_f64_div+0x132>
8003255a:	a5 8a       	lsr	r10,0x4
8003255c:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80032560:	a5 8b       	lsr	r11,0x4
80032562:	58 07       	cp.w	r7,0
80032564:	e0 8a 00 8b 	brle	8003267a <__avr32_f64_div_res_subnormal>
80032568:	e0 12 ff 00 	andl	r2,0xff00
8003256c:	e8 12 00 80 	orl	r2,0x80
80032570:	e6 08 06 40 	mulu.d	r0,r3,r8
80032574:	e4 09 07 40 	macu.d	r0,r2,r9
80032578:	e4 08 06 44 	mulu.d	r4,r2,r8
8003257c:	e6 09 06 48 	mulu.d	r8,r3,r9
80032580:	00 05       	add	r5,r0
80032582:	f0 01 00 48 	adc	r8,r8,r1
80032586:	5c 09       	acr	r9
80032588:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8003258c:	58 04       	cp.w	r4,0
8003258e:	5c 25       	cpc	r5

80032590 <__avr32_f64_div_round_subnormal>:
80032590:	f4 08 13 00 	cpc	r8,r10
80032594:	f6 09 13 00 	cpc	r9,r11
80032598:	5f 36       	srlo	r6
8003259a:	f8 06 17 00 	moveq	r6,r12
8003259e:	e4 0a 16 08 	lsr	r10,r2,0x8
800325a2:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
800325a6:	e6 0b 16 08 	lsr	r11,r3,0x8
800325aa:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800325ae:	ed be 00 1f 	bld	lr,0x1f
800325b2:	ef bb 00 1f 	bst	r11,0x1f
800325b6:	0c 0a       	add	r10,r6
800325b8:	5c 0b       	acr	r11
800325ba:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800325be:	e4 1b 00 0f 	andh	r11,0xf
800325c2:	14 4b       	or	r11,r10
800325c4:	e0 81 00 a7 	brne	80032712 <__avr32_f64_div_res_subnormal+0x98>
800325c8:	f2 06 16 14 	lsr	r6,r9,0x14
800325cc:	ab d6       	cbr	r6,0xb
800325ce:	e0 46 07 ff 	cp.w	r6,2047
800325d2:	e0 81 00 a4 	brne	8003271a <__avr32_f64_div_res_subnormal+0xa0>
800325d6:	c9 e8       	rjmp	80032712 <__avr32_f64_div_res_subnormal+0x98>
800325d8:	e4 19 00 0f 	andh	r9,0xf
800325dc:	10 49       	or	r9,r8
800325de:	e0 81 00 9a 	brne	80032712 <__avr32_f64_div_res_subnormal+0x98>
800325e2:	c9 28       	rjmp	80032706 <__avr32_f64_div_res_subnormal+0x8c>
800325e4:	a3 7b       	lsl	r11,0x3
800325e6:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
800325ea:	a3 7a       	lsl	r10,0x3
800325ec:	f5 eb 10 04 	or	r4,r10,r11
800325f0:	e0 80 00 a0 	breq	80032730 <__avr32_f64_div_op1_zero>
800325f4:	f6 04 12 00 	clz	r4,r11
800325f8:	c1 70       	breq	80032626 <__avr32_f64_div_round_subnormal+0x96>
800325fa:	c0 c3       	brcs	80032612 <__avr32_f64_div_round_subnormal+0x82>
800325fc:	e8 05 11 20 	rsub	r5,r4,32
80032600:	f6 04 09 4b 	lsl	r11,r11,r4
80032604:	f4 05 0a 45 	lsr	r5,r10,r5
80032608:	0a 4b       	or	r11,r5
8003260a:	f4 04 09 4a 	lsl	r10,r10,r4
8003260e:	08 17       	sub	r7,r4
80032610:	c0 b8       	rjmp	80032626 <__avr32_f64_div_round_subnormal+0x96>
80032612:	f4 04 12 00 	clz	r4,r10
80032616:	f9 b4 03 00 	movlo	r4,0
8003261a:	f7 b4 02 e0 	subhs	r4,-32
8003261e:	f4 04 09 4b 	lsl	r11,r10,r4
80032622:	30 0a       	mov	r10,0
80032624:	08 17       	sub	r7,r4
80032626:	a3 8a       	lsr	r10,0x2
80032628:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
8003262c:	a3 8b       	lsr	r11,0x2
8003262e:	c1 1b       	rjmp	80032450 <__avr32_f64_div+0x20>
80032630:	a3 79       	lsl	r9,0x3
80032632:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80032636:	a3 78       	lsl	r8,0x3
80032638:	f3 e8 10 04 	or	r4,r9,r8
8003263c:	c6 f0       	breq	8003271a <__avr32_f64_div_res_subnormal+0xa0>
8003263e:	f2 04 12 00 	clz	r4,r9
80032642:	c1 70       	breq	80032670 <__avr32_f64_div_round_subnormal+0xe0>
80032644:	c0 c3       	brcs	8003265c <__avr32_f64_div_round_subnormal+0xcc>
80032646:	e8 05 11 20 	rsub	r5,r4,32
8003264a:	f2 04 09 49 	lsl	r9,r9,r4
8003264e:	f0 05 0a 45 	lsr	r5,r8,r5
80032652:	0a 49       	or	r9,r5
80032654:	f0 04 09 48 	lsl	r8,r8,r4
80032658:	08 16       	sub	r6,r4
8003265a:	c0 b8       	rjmp	80032670 <__avr32_f64_div_round_subnormal+0xe0>
8003265c:	f0 04 12 00 	clz	r4,r8
80032660:	f9 b4 03 00 	movlo	r4,0
80032664:	f7 b4 02 e0 	subhs	r4,-32
80032668:	f0 04 09 49 	lsl	r9,r8,r4
8003266c:	30 08       	mov	r8,0
8003266e:	08 16       	sub	r6,r4
80032670:	a3 88       	lsr	r8,0x2
80032672:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80032676:	a3 89       	lsr	r9,0x2
80032678:	cf ca       	rjmp	80032470 <__avr32_f64_div+0x40>

8003267a <__avr32_f64_div_res_subnormal>:
8003267a:	5c 37       	neg	r7
8003267c:	2f f7       	sub	r7,-1
8003267e:	f1 b7 04 c0 	satu	r7,0x6
80032682:	e0 47 00 20 	cp.w	r7,32
80032686:	c1 54       	brge	800326b0 <__avr32_f64_div_res_subnormal+0x36>
80032688:	ee 06 11 20 	rsub	r6,r7,32
8003268c:	e4 07 0a 42 	lsr	r2,r2,r7
80032690:	e6 06 09 4c 	lsl	r12,r3,r6
80032694:	18 42       	or	r2,r12
80032696:	e6 07 0a 43 	lsr	r3,r3,r7
8003269a:	f4 06 09 41 	lsl	r1,r10,r6
8003269e:	f4 07 0a 4a 	lsr	r10,r10,r7
800326a2:	f6 06 09 4c 	lsl	r12,r11,r6
800326a6:	18 4a       	or	r10,r12
800326a8:	f6 07 0a 4b 	lsr	r11,r11,r7
800326ac:	30 00       	mov	r0,0
800326ae:	c1 58       	rjmp	800326d8 <__avr32_f64_div_res_subnormal+0x5e>
800326b0:	ee 06 11 20 	rsub	r6,r7,32
800326b4:	f9 b0 00 00 	moveq	r0,0
800326b8:	f9 bc 00 00 	moveq	r12,0
800326bc:	c0 50       	breq	800326c6 <__avr32_f64_div_res_subnormal+0x4c>
800326be:	f4 06 09 40 	lsl	r0,r10,r6
800326c2:	f6 06 09 4c 	lsl	r12,r11,r6
800326c6:	e6 07 0a 42 	lsr	r2,r3,r7
800326ca:	30 03       	mov	r3,0
800326cc:	f4 07 0a 41 	lsr	r1,r10,r7
800326d0:	18 41       	or	r1,r12
800326d2:	f6 07 0a 4a 	lsr	r10,r11,r7
800326d6:	30 0b       	mov	r11,0
800326d8:	e0 12 ff 00 	andl	r2,0xff00
800326dc:	e8 12 00 80 	orl	r2,0x80
800326e0:	e6 08 06 46 	mulu.d	r6,r3,r8
800326e4:	e4 09 07 46 	macu.d	r6,r2,r9
800326e8:	e4 08 06 44 	mulu.d	r4,r2,r8
800326ec:	e6 09 06 48 	mulu.d	r8,r3,r9
800326f0:	0c 05       	add	r5,r6
800326f2:	f0 07 00 48 	adc	r8,r8,r7
800326f6:	5c 09       	acr	r9
800326f8:	30 07       	mov	r7,0
800326fa:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
800326fe:	00 34       	cp.w	r4,r0
80032700:	e2 05 13 00 	cpc	r5,r1
80032704:	c4 6b       	rjmp	80032590 <__avr32_f64_div_round_subnormal>
80032706:	1c 9b       	mov	r11,lr
80032708:	e6 1b 80 00 	andh	r11,0x8000,COH
8003270c:	30 0a       	mov	r10,0
8003270e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80032712:	3f fb       	mov	r11,-1
80032714:	30 0a       	mov	r10,0
80032716:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8003271a:	f5 eb 10 04 	or	r4,r10,r11
8003271e:	c0 90       	breq	80032730 <__avr32_f64_div_op1_zero>
80032720:	1c 9b       	mov	r11,lr
80032722:	e6 1b 80 00 	andh	r11,0x8000,COH
80032726:	ea 1b 7f f0 	orh	r11,0x7ff0
8003272a:	30 0a       	mov	r10,0
8003272c:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80032730 <__avr32_f64_div_op1_zero>:
80032730:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80032734:	ce f0       	breq	80032712 <__avr32_f64_div_res_subnormal+0x98>
80032736:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8003273a:	e0 44 07 ff 	cp.w	r4,2047
8003273e:	ce 41       	brne	80032706 <__avr32_f64_div_res_subnormal+0x8c>
80032740:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80032744:	ce 10       	breq	80032706 <__avr32_f64_div_res_subnormal+0x8c>
80032746:	ce 6b       	rjmp	80032712 <__avr32_f64_div_res_subnormal+0x98>

80032748 <__avr32_f32_div>:
80032748:	f7 ec 20 08 	eor	r8,r11,r12
8003274c:	a1 7c       	lsl	r12,0x1
8003274e:	a1 7b       	lsl	r11,0x1
80032750:	c7 a0       	breq	80032844 <__divsf_return_op1+0x16>
80032752:	18 7c       	tst	r12,r12
80032754:	f9 b9 00 00 	moveq	r9,0
80032758:	c0 90       	breq	8003276a <__avr32_f32_div+0x22>
8003275a:	f8 09 16 18 	lsr	r9,r12,0x18
8003275e:	c7 e0       	breq	8003285a <__divsf_return_op1+0x2c>
80032760:	e0 49 00 ff 	cp.w	r9,255
80032764:	c6 82       	brcc	80032834 <__divsf_return_op1+0x6>
80032766:	a7 7c       	lsl	r12,0x7
80032768:	bf bc       	sbr	r12,0x1f
8003276a:	f6 0a 16 18 	lsr	r10,r11,0x18
8003276e:	c7 e0       	breq	8003286a <__divsf_return_op1+0x3c>
80032770:	e0 4a 00 ff 	cp.w	r10,255
80032774:	c6 62       	brcc	80032840 <__divsf_return_op1+0x12>
80032776:	a7 7b       	lsl	r11,0x7
80032778:	bf bb       	sbr	r11,0x1f
8003277a:	58 09       	cp.w	r9,0
8003277c:	f5 bc 00 00 	subfeq	r12,0
80032780:	5e 0d       	reteq	0
80032782:	1a d5       	st.w	--sp,r5
80032784:	bb 27       	st.d	--sp,r6
80032786:	14 19       	sub	r9,r10
80032788:	28 19       	sub	r9,-127
8003278a:	fc 1a 80 00 	movh	r10,0x8000
8003278e:	a3 8c       	lsr	r12,0x2
80032790:	f6 05 16 02 	lsr	r5,r11,0x2
80032794:	f4 0b 16 01 	lsr	r11,r10,0x1
80032798:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
8003279c:	5c d6       	com	r6
8003279e:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
800327a2:	f6 05 06 46 	mulu.d	r6,r11,r5
800327a6:	f4 07 01 27 	sub	r7,r10,r7<<0x2
800327aa:	f6 07 06 46 	mulu.d	r6,r11,r7
800327ae:	ee 0b 15 02 	lsl	r11,r7,0x2
800327b2:	f6 05 06 46 	mulu.d	r6,r11,r5
800327b6:	f4 07 01 27 	sub	r7,r10,r7<<0x2
800327ba:	f6 07 06 46 	mulu.d	r6,r11,r7
800327be:	ee 0b 15 02 	lsl	r11,r7,0x2
800327c2:	f6 05 06 46 	mulu.d	r6,r11,r5
800327c6:	f4 07 01 27 	sub	r7,r10,r7<<0x2
800327ca:	f6 07 06 46 	mulu.d	r6,r11,r7
800327ce:	ee 0b 15 02 	lsl	r11,r7,0x2
800327d2:	f6 05 06 46 	mulu.d	r6,r11,r5
800327d6:	f4 07 01 27 	sub	r7,r10,r7<<0x2
800327da:	f6 07 06 46 	mulu.d	r6,r11,r7
800327de:	ee 0b 15 02 	lsl	r11,r7,0x2
800327e2:	f6 0c 06 46 	mulu.d	r6,r11,r12
800327e6:	a5 8c       	lsr	r12,0x4
800327e8:	ed b7 00 1c 	bld	r7,0x1c
800327ec:	c0 40       	breq	800327f4 <__avr32_f32_div+0xac>
800327ee:	a1 77       	lsl	r7,0x1
800327f0:	20 19       	sub	r9,1
800327f2:	a1 7c       	lsl	r12,0x1
800327f4:	58 09       	cp.w	r9,0
800327f6:	e0 8a 00 42 	brle	8003287a <__avr32_f32_div_res_subnormal>
800327fa:	e0 17 ff e0 	andl	r7,0xffe0
800327fe:	e8 17 00 10 	orl	r7,0x10
80032802:	ea 07 06 4a 	mulu.d	r10,r5,r7
80032806:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8003280a:	58 0a       	cp.w	r10,0

8003280c <__avr32_f32_div_round_subnormal>:
8003280c:	f8 0b 13 00 	cpc	r11,r12
80032810:	5f 3b       	srlo	r11
80032812:	ea 0b 17 00 	moveq	r11,r5
80032816:	ee 0c 16 05 	lsr	r12,r7,0x5
8003281a:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
8003281e:	bb 07       	ld.d	r6,sp++
80032820:	1b 05       	ld.w	r5,sp++
80032822:	ed b8 00 1f 	bld	r8,0x1f
80032826:	ef bc 00 1f 	bst	r12,0x1f
8003282a:	16 0c       	add	r12,r11
8003282c:	5e fc       	retal	r12

8003282e <__divsf_return_op1>:
8003282e:	a1 78       	lsl	r8,0x1
80032830:	5d 0c       	ror	r12
80032832:	5e fc       	retal	r12
80032834:	5e 1e       	retne	-1
80032836:	fc 19 ff 00 	movh	r9,0xff00
8003283a:	12 3b       	cp.w	r11,r9
8003283c:	cf 93       	brcs	8003282e <__divsf_return_op1>
8003283e:	5e fe       	retal	-1
80032840:	5e 0d       	reteq	0
80032842:	5e fe       	retal	-1
80032844:	18 7c       	tst	r12,r12
80032846:	5e 0e       	reteq	-1
80032848:	f8 09 16 18 	lsr	r9,r12,0x18
8003284c:	c0 70       	breq	8003285a <__divsf_return_op1+0x2c>
8003284e:	e0 49 00 ff 	cp.w	r9,255
80032852:	cf 12       	brcc	80032834 <__divsf_return_op1+0x6>
80032854:	fc 1c ff 00 	movh	r12,0xff00
80032858:	ce bb       	rjmp	8003282e <__divsf_return_op1>
8003285a:	a7 7c       	lsl	r12,0x7
8003285c:	f8 09 12 00 	clz	r9,r12
80032860:	f8 09 09 4c 	lsl	r12,r12,r9
80032864:	f2 09 11 01 	rsub	r9,r9,1
80032868:	c8 1b       	rjmp	8003276a <__avr32_f32_div+0x22>
8003286a:	a7 7b       	lsl	r11,0x7
8003286c:	f6 0a 12 00 	clz	r10,r11
80032870:	f6 0a 09 4b 	lsl	r11,r11,r10
80032874:	f4 0a 11 01 	rsub	r10,r10,1
80032878:	c8 5b       	rjmp	80032782 <__avr32_f32_div+0x3a>

8003287a <__avr32_f32_div_res_subnormal>:
8003287a:	5c 39       	neg	r9
8003287c:	2f f9       	sub	r9,-1
8003287e:	f1 b9 04 a0 	satu	r9,0x5
80032882:	f2 0a 11 20 	rsub	r10,r9,32
80032886:	ee 09 0a 47 	lsr	r7,r7,r9
8003288a:	f8 0a 09 46 	lsl	r6,r12,r10
8003288e:	f8 09 0a 4c 	lsr	r12,r12,r9
80032892:	e0 17 ff e0 	andl	r7,0xffe0
80032896:	e8 17 00 10 	orl	r7,0x10
8003289a:	ea 07 06 4a 	mulu.d	r10,r5,r7
8003289e:	30 09       	mov	r9,0
800328a0:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
800328a4:	0c 3a       	cp.w	r10,r6
800328a6:	cb 3b       	rjmp	8003280c <__avr32_f32_div_round_subnormal>

800328a8 <__avr32_f32_sub_from_add>:
800328a8:	ee 1b 80 00 	eorh	r11,0x8000

800328ac <__avr32_f32_sub>:
800328ac:	f7 ec 20 08 	eor	r8,r11,r12
800328b0:	c6 46       	brmi	80032978 <__avr32_f32_add_from_sub>
800328b2:	18 98       	mov	r8,r12
800328b4:	e6 1c 80 00 	andh	r12,0x8000,COH
800328b8:	bf db       	cbr	r11,0x1f
800328ba:	bf d8       	cbr	r8,0x1f
800328bc:	f0 0b 0c 4a 	max	r10,r8,r11
800328c0:	f0 0b 0d 49 	min	r9,r8,r11
800328c4:	10 3a       	cp.w	r10,r8
800328c6:	f7 bc 01 01 	subne	r12,1
800328ca:	e6 1c 80 00 	andh	r12,0x8000,COH
800328ce:	f4 08 15 08 	lsl	r8,r10,0x8
800328d2:	bf b8       	sbr	r8,0x1f
800328d4:	b7 9a       	lsr	r10,0x17
800328d6:	e0 4a 00 ff 	cp.w	r10,255
800328da:	c3 80       	breq	8003294a <__avr32_f32_sub_op1_nan_or_inf>
800328dc:	f2 0b 15 08 	lsl	r11,r9,0x8
800328e0:	bf bb       	sbr	r11,0x1f
800328e2:	b7 99       	lsr	r9,0x17
800328e4:	1a dc       	st.w	--sp,r12
800328e6:	c2 90       	breq	80032938 <__avr32_f32_sub_op2_subnormal>
800328e8:	f4 09 01 0c 	sub	r12,r10,r9
800328ec:	c0 c0       	breq	80032904 <__avr32_f32_sub_shift_done>
800328ee:	f1 bc 04 a0 	satu	r12,0x5
800328f2:	f8 09 11 20 	rsub	r9,r12,32
800328f6:	f6 09 09 49 	lsl	r9,r11,r9
800328fa:	f7 b8 01 01 	subne	r8,1
800328fe:	5f 19       	srne	r9
80032900:	f6 0c 0a 4b 	lsr	r11,r11,r12

80032904 <__avr32_f32_sub_shift_done>:
80032904:	16 18       	sub	r8,r11
80032906:	1b 0c       	ld.w	r12,sp++
80032908:	f0 0b 12 00 	clz	r11,r8
8003290c:	5e 3d       	retlo	0
8003290e:	f0 0b 09 48 	lsl	r8,r8,r11
80032912:	16 1a       	sub	r10,r11
80032914:	e0 8a 00 26 	brle	80032960 <__avr32_f32_sub_subnormal_result>
80032918:	f3 e8 11 89 	or	r9,r9,r8<<0x18
8003291c:	f9 e8 12 8c 	or	r12,r12,r8>>0x8
80032920:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8

80032924 <__avr32_f32_sub_round>:
80032924:	fc 1a 80 00 	movh	r10,0x8000
80032928:	ed bc 00 00 	bld	r12,0x0
8003292c:	f7 ba 01 ff 	subne	r10,-1
80032930:	14 39       	cp.w	r9,r10
80032932:	f7 bc 02 ff 	subhs	r12,-1
80032936:	5e fc       	retal	r12

80032938 <__avr32_f32_sub_op2_subnormal>:
80032938:	bf db       	cbr	r11,0x1f
8003293a:	f9 b9 01 01 	movne	r9,1
8003293e:	58 0a       	cp.w	r10,0
80032940:	cd 41       	brne	800328e8 <__avr32_f32_sub+0x3c>
80032942:	bf d8       	cbr	r8,0x1f
80032944:	f9 ba 01 01 	movne	r10,1
80032948:	cd 0b       	rjmp	800328e8 <__avr32_f32_sub+0x3c>

8003294a <__avr32_f32_sub_op1_nan_or_inf>:
8003294a:	f0 0b 15 01 	lsl	r11,r8,0x1
8003294e:	5e 1e       	retne	-1
80032950:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80032954:	f2 0b 16 17 	lsr	r11,r9,0x17
80032958:	e0 4b 00 ff 	cp.w	r11,255
8003295c:	5e 1c       	retne	r12
8003295e:	5e fe       	retal	-1

80032960 <__avr32_f32_sub_subnormal_result>:
80032960:	f4 0a 11 09 	rsub	r10,r10,9
80032964:	f4 0b 11 20 	rsub	r11,r10,32
80032968:	5e 3d       	retlo	0
8003296a:	f0 0a 0a 4a 	lsr	r10,r8,r10
8003296e:	14 4c       	or	r12,r10
80032970:	f0 0b 09 48 	lsl	r8,r8,r11
80032974:	10 49       	or	r9,r8
80032976:	cd 7b       	rjmp	80032924 <__avr32_f32_sub_round>

80032978 <__avr32_f32_add_from_sub>:
80032978:	ee 1b 80 00 	eorh	r11,0x8000

8003297c <__avr32_f32_add>:
8003297c:	f7 ec 20 08 	eor	r8,r11,r12
80032980:	c9 46       	brmi	800328a8 <__avr32_f32_sub_from_add>
80032982:	18 98       	mov	r8,r12
80032984:	e6 1c 80 00 	andh	r12,0x8000,COH
80032988:	bf db       	cbr	r11,0x1f
8003298a:	bf d8       	cbr	r8,0x1f
8003298c:	f0 0b 0c 4a 	max	r10,r8,r11
80032990:	f0 0b 0d 49 	min	r9,r8,r11
80032994:	f4 08 15 08 	lsl	r8,r10,0x8
80032998:	bf b8       	sbr	r8,0x1f
8003299a:	b7 9a       	lsr	r10,0x17
8003299c:	e0 4a 00 ff 	cp.w	r10,255
800329a0:	c2 d0       	breq	800329fa <__avr32_f32_add_op1_nan_or_inf>
800329a2:	f2 0b 15 08 	lsl	r11,r9,0x8
800329a6:	bf bb       	sbr	r11,0x1f
800329a8:	b7 99       	lsr	r9,0x17
800329aa:	c1 e0       	breq	800329e6 <__avr32_f32_add_op2_subnormal>
800329ac:	1a dc       	st.w	--sp,r12
800329ae:	14 29       	rsub	r9,r10
800329b0:	f1 b9 04 a0 	satu	r9,0x5
800329b4:	f6 09 0a 4c 	lsr	r12,r11,r9
800329b8:	f2 09 11 18 	rsub	r9,r9,24
800329bc:	f6 09 09 4b 	lsl	r11,r11,r9
800329c0:	f7 dc d3 08 	bfins	r11,r12,0x18,0x8
800329c4:	18 08       	add	r8,r12
800329c6:	1b 0c       	ld.w	r12,sp++
800329c8:	c2 63       	brcs	80032a14 <__avr32_f32_add_res_of>
800329ca:	f9 e8 12 8c 	or	r12,r12,r8>>0x8
800329ce:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
800329d2:	fc 1a 80 00 	movh	r10,0x8000
800329d6:	ed bc 00 00 	bld	r12,0x0
800329da:	f7 ba 01 ff 	subne	r10,-1
800329de:	14 3b       	cp.w	r11,r10
800329e0:	f7 bc 02 ff 	subhs	r12,-1
800329e4:	5e fc       	retal	r12

800329e6 <__avr32_f32_add_op2_subnormal>:
800329e6:	bf db       	cbr	r11,0x1f
800329e8:	f9 b9 01 01 	movne	r9,1
800329ec:	58 0a       	cp.w	r10,0
800329ee:	cd f1       	brne	800329ac <__avr32_f32_add+0x30>
800329f0:	bf d8       	cbr	r8,0x1f
800329f2:	10 0b       	add	r11,r8
800329f4:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
800329f8:	5e fc       	retal	r12

800329fa <__avr32_f32_add_op1_nan_or_inf>:
800329fa:	f0 0b 15 01 	lsl	r11,r8,0x1
800329fe:	5e 1e       	retne	-1
80032a00:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80032a04:	f2 0b 16 17 	lsr	r11,r9,0x17
80032a08:	e0 4b 00 ff 	cp.w	r11,255
80032a0c:	5e 1c       	retne	r12
80032a0e:	a9 79       	lsl	r9,0x9
80032a10:	5e 0c       	reteq	r12
80032a12:	5e fe       	retal	-1

80032a14 <__avr32_f32_add_res_of>:
80032a14:	a1 98       	lsr	r8,0x1
80032a16:	2f fa       	sub	r10,-1
80032a18:	e0 4a 00 ff 	cp.w	r10,255
80032a1c:	f9 b8 00 00 	moveq	r8,0
80032a20:	f9 bb 00 00 	moveq	r11,0
80032a24:	cd 3b       	rjmp	800329ca <__avr32_f32_add+0x4e>
80032a26:	d7 03       	nop

80032a28 <__avr32_f32_mul>:
80032a28:	18 98       	mov	r8,r12
80032a2a:	16 5c       	eor	r12,r11
80032a2c:	e6 1c 80 00 	andh	r12,0x8000,COH
80032a30:	bf d8       	cbr	r8,0x1f
80032a32:	c6 60       	breq	80032afe <__avr32_f32_mul_op1_zero>
80032a34:	bf db       	cbr	r11,0x1f
80032a36:	f0 0b 0c 4a 	max	r10,r8,r11
80032a3a:	f0 0b 0d 49 	min	r9,r8,r11
80032a3e:	f4 08 15 08 	lsl	r8,r10,0x8
80032a42:	bf b8       	sbr	r8,0x1f
80032a44:	b7 9a       	lsr	r10,0x17
80032a46:	e0 4a 00 ff 	cp.w	r10,255
80032a4a:	c3 d0       	breq	80032ac4 <__avr32_f32_mul_op1_nan_or_inf>
80032a4c:	f2 0b 15 08 	lsl	r11,r9,0x8
80032a50:	bf bb       	sbr	r11,0x1f
80032a52:	b7 99       	lsr	r9,0x17
80032a54:	c2 40       	breq	80032a9c <__avr32_f32_mul_op2_subnormal>
80032a56:	14 09       	add	r9,r10
80032a58:	f0 0b 06 4a 	mulu.d	r10,r8,r11
80032a5c:	f6 08 15 01 	lsl	r8,r11,0x1
80032a60:	f0 0b 17 20 	movhs	r11,r8
80032a64:	f7 b9 02 01 	subhs	r9,1
80032a68:	a9 8a       	lsr	r10,0x8
80032a6a:	f5 db d3 08 	bfins	r10,r11,0x18,0x8
80032a6e:	27 e9       	sub	r9,126
80032a70:	e0 8a 00 39 	brle	80032ae2 <__avr32_f32_mul_res_subnormal>
80032a74:	e0 49 00 ff 	cp.w	r9,255
80032a78:	c0 f4       	brge	80032a96 <__avr32_f32_mul_round+0x14>
80032a7a:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
80032a7e:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8

80032a82 <__avr32_f32_mul_round>:
80032a82:	fc 18 80 00 	movh	r8,0x8000
80032a86:	ed bc 00 00 	bld	r12,0x0
80032a8a:	f7 b8 01 ff 	subne	r8,-1
80032a8e:	10 3a       	cp.w	r10,r8
80032a90:	f7 bc 02 ff 	subhs	r12,-1
80032a94:	5e fc       	retal	r12
80032a96:	ea 1c 7f 80 	orh	r12,0x7f80
80032a9a:	5e fc       	retal	r12

80032a9c <__avr32_f32_mul_op2_subnormal>:
80032a9c:	bf db       	cbr	r11,0x1f
80032a9e:	f6 09 12 00 	clz	r9,r11
80032aa2:	5e 3d       	retlo	0
80032aa4:	20 89       	sub	r9,8
80032aa6:	f6 09 09 4b 	lsl	r11,r11,r9
80032aaa:	f2 09 11 01 	rsub	r9,r9,1
80032aae:	14 7a       	tst	r10,r10
80032ab0:	cd 31       	brne	80032a56 <__avr32_f32_mul+0x2e>
80032ab2:	bf d8       	cbr	r8,0x1f
80032ab4:	f6 0a 12 00 	clz	r10,r11
80032ab8:	5e 3d       	retlo	0
80032aba:	f0 0a 09 48 	lsl	r8,r8,r10
80032abe:	f4 0a 11 01 	rsub	r10,r10,1
80032ac2:	cc ab       	rjmp	80032a56 <__avr32_f32_mul+0x2e>

80032ac4 <__avr32_f32_mul_op1_nan_or_inf>:
80032ac4:	f0 0b 15 01 	lsl	r11,r8,0x1
80032ac8:	5e 1e       	retne	-1
80032aca:	12 79       	tst	r9,r9
80032acc:	5e 0e       	reteq	-1
80032ace:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80032ad2:	f2 0b 16 17 	lsr	r11,r9,0x17
80032ad6:	e0 4b 00 ff 	cp.w	r11,255
80032ada:	5e 1c       	retne	r12
80032adc:	a9 79       	lsl	r9,0x9
80032ade:	5e 0c       	reteq	r12
80032ae0:	5e fe       	retal	-1

80032ae2 <__avr32_f32_mul_res_subnormal>:
80032ae2:	f2 09 11 09 	rsub	r9,r9,9
80032ae6:	f2 08 11 20 	rsub	r8,r9,32
80032aea:	5e 3d       	retlo	0
80032aec:	f6 09 0a 49 	lsr	r9,r11,r9
80032af0:	12 4c       	or	r12,r9
80032af2:	f6 08 09 4b 	lsl	r11,r11,r8
80032af6:	e4 1a 00 ff 	andh	r10,0xff
80032afa:	16 4a       	or	r10,r11
80032afc:	cc 3b       	rjmp	80032a82 <__avr32_f32_mul_round>

80032afe <__avr32_f32_mul_op1_zero>:
80032afe:	f5 db c2 e8 	bfextu	r10,r11,0x17,0x8
80032b02:	e0 4a 00 ff 	cp.w	r10,255
80032b06:	5e 1c       	retne	r12
80032b08:	5e 0e       	reteq	-1

80032b0a <__avr32_f32_to_f64>:
80032b0a:	f8 0b 15 01 	lsl	r11,r12,0x1
80032b0e:	f9 ba 00 00 	moveq	r10,0
80032b12:	5e 0b       	reteq	r11
80032b14:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
80032b18:	e0 49 00 ff 	cp.w	r9,255
80032b1c:	c1 e0       	breq	80032b58 <__extendsfdf_return_op1+0x6>
80032b1e:	a7 7b       	lsl	r11,0x7
80032b20:	30 0a       	mov	r10,0
80032b22:	58 09       	cp.w	r9,0
80032b24:	f7 b9 00 ff 	subeq	r9,-1
80032b28:	5f 18       	srne	r8
80032b2a:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
80032b2e:	fe 39 fc 80 	sub	r9,-896
80032b32:	f6 08 12 00 	clz	r8,r11
80032b36:	10 19       	sub	r9,r8
80032b38:	f6 08 09 4b 	lsl	r11,r11,r8
80032b3c:	ed bb 00 1f 	bld	r11,0x1f
80032b40:	f7 b9 01 01 	subne	r9,1
80032b44:	ab 9a       	lsr	r10,0xb
80032b46:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80032b4a:	a1 7b       	lsl	r11,0x1
80032b4c:	ab 9b       	lsr	r11,0xb
80032b4e:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80032b52 <__extendsfdf_return_op1>:
80032b52:	a1 7c       	lsl	r12,0x1
80032b54:	5d 0b       	ror	r11
80032b56:	5e fb       	retal	r11
80032b58:	fc 1a ff e0 	movh	r10,0xffe0
80032b5c:	a9 6b       	lsl	r11,0x8
80032b5e:	f9 bb 01 ff 	movne	r11,-1
80032b62:	f4 0b 17 00 	moveq	r11,r10
80032b66:	30 0a       	mov	r10,0
80032b68:	cf 5b       	rjmp	80032b52 <__extendsfdf_return_op1>

80032b6a <__avr32_f64_to_f32>:
80032b6a:	f6 09 15 01 	lsl	r9,r11,0x1
80032b6e:	b5 99       	lsr	r9,0x15
80032b70:	5e 0d       	reteq	0
80032b72:	f6 08 15 0a 	lsl	r8,r11,0xa
80032b76:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
80032b7a:	ab 6a       	lsl	r10,0xa
80032b7c:	5c 3a       	neg	r10
80032b7e:	5c fc       	rol	r12
80032b80:	e0 49 07 ff 	cp.w	r9,2047
80032b84:	c1 a0       	breq	80032bb8 <__truncdfsf_return_op1+0x6>
80032b86:	e0 29 03 80 	sub	r9,896
80032b8a:	bf bc       	sbr	r12,0x1f
80032b8c:	58 09       	cp.w	r9,0
80032b8e:	e0 8a 00 1a 	brle	80032bc2 <__truncdfsf_return_op1+0x10>
80032b92:	37 fa       	mov	r10,127
80032b94:	ed bc 00 08 	bld	r12,0x8
80032b98:	f7 ba 00 ff 	subeq	r10,-1
80032b9c:	14 0c       	add	r12,r10
80032b9e:	f7 b9 03 fe 	sublo	r9,-2
80032ba2:	ed bc 00 1f 	bld	r12,0x1f
80032ba6:	f7 b9 01 01 	subne	r9,1
80032baa:	f8 0c 16 07 	lsr	r12,r12,0x7
80032bae:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

80032bb2 <__truncdfsf_return_op1>:
80032bb2:	a1 7b       	lsl	r11,0x1
80032bb4:	5d 0c       	ror	r12
80032bb6:	5e fc       	retal	r12
80032bb8:	bf dc       	cbr	r12,0x1f
80032bba:	5e 1e       	retne	-1
80032bbc:	fc 1c 7f 80 	movh	r12,0x7f80
80032bc0:	5e fc       	retal	r12
80032bc2:	f2 09 11 01 	rsub	r9,r9,1
80032bc6:	59 99       	cp.w	r9,25
80032bc8:	f9 bc 02 00 	movhs	r12,0
80032bcc:	c1 32       	brcc	80032bf2 <__truncdfsf_return_op1+0x40>
80032bce:	f2 0a 11 20 	rsub	r10,r9,32
80032bd2:	f8 0a 09 4a 	lsl	r10,r12,r10
80032bd6:	5f 1a       	srne	r10
80032bd8:	f8 09 0a 4c 	lsr	r12,r12,r9
80032bdc:	14 4c       	or	r12,r10
80032bde:	37 fa       	mov	r10,127
80032be0:	ed bc 00 08 	bld	r12,0x8
80032be4:	f7 ba 00 ff 	subeq	r10,-1
80032be8:	14 0c       	add	r12,r10
80032bea:	f8 0c 16 07 	lsr	r12,r12,0x7
80032bee:	a1 7b       	lsl	r11,0x1
80032bf0:	5d 0c       	ror	r12
80032bf2:	5e fc       	retal	r12

80032bf4 <__avr32_udiv64>:
80032bf4:	d4 31       	pushm	r0-r7,lr
80032bf6:	1a 97       	mov	r7,sp
80032bf8:	20 3d       	sub	sp,12
80032bfa:	10 9c       	mov	r12,r8
80032bfc:	12 9e       	mov	lr,r9
80032bfe:	14 93       	mov	r3,r10
80032c00:	58 09       	cp.w	r9,0
80032c02:	e0 81 00 bd 	brne	80032d7c <__avr32_udiv64+0x188>
80032c06:	16 38       	cp.w	r8,r11
80032c08:	e0 88 00 40 	brls	80032c88 <__avr32_udiv64+0x94>
80032c0c:	f0 08 12 00 	clz	r8,r8
80032c10:	c0 d0       	breq	80032c2a <__avr32_udiv64+0x36>
80032c12:	f6 08 09 4b 	lsl	r11,r11,r8
80032c16:	f0 09 11 20 	rsub	r9,r8,32
80032c1a:	f8 08 09 4c 	lsl	r12,r12,r8
80032c1e:	f4 09 0a 49 	lsr	r9,r10,r9
80032c22:	f4 08 09 43 	lsl	r3,r10,r8
80032c26:	f3 eb 10 0b 	or	r11,r9,r11
80032c2a:	f8 0e 16 10 	lsr	lr,r12,0x10
80032c2e:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80032c32:	f6 0e 0d 00 	divu	r0,r11,lr
80032c36:	e6 0b 16 10 	lsr	r11,r3,0x10
80032c3a:	00 99       	mov	r9,r0
80032c3c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80032c40:	e0 0a 02 48 	mul	r8,r0,r10
80032c44:	10 3b       	cp.w	r11,r8
80032c46:	c0 a2       	brcc	80032c5a <__avr32_udiv64+0x66>
80032c48:	20 19       	sub	r9,1
80032c4a:	18 0b       	add	r11,r12
80032c4c:	18 3b       	cp.w	r11,r12
80032c4e:	c0 63       	brcs	80032c5a <__avr32_udiv64+0x66>
80032c50:	10 3b       	cp.w	r11,r8
80032c52:	f7 b9 03 01 	sublo	r9,1
80032c56:	f7 dc e3 0b 	addcs	r11,r11,r12
80032c5a:	f6 08 01 01 	sub	r1,r11,r8
80032c5e:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80032c62:	e2 0e 0d 00 	divu	r0,r1,lr
80032c66:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80032c6a:	00 98       	mov	r8,r0
80032c6c:	e0 0a 02 4a 	mul	r10,r0,r10
80032c70:	14 33       	cp.w	r3,r10
80032c72:	c0 82       	brcc	80032c82 <__avr32_udiv64+0x8e>
80032c74:	20 18       	sub	r8,1
80032c76:	18 03       	add	r3,r12
80032c78:	18 33       	cp.w	r3,r12
80032c7a:	c0 43       	brcs	80032c82 <__avr32_udiv64+0x8e>
80032c7c:	14 33       	cp.w	r3,r10
80032c7e:	f7 b8 03 01 	sublo	r8,1
80032c82:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80032c86:	cd f8       	rjmp	80032e44 <__avr32_udiv64+0x250>
80032c88:	58 08       	cp.w	r8,0
80032c8a:	c0 51       	brne	80032c94 <__avr32_udiv64+0xa0>
80032c8c:	30 19       	mov	r9,1
80032c8e:	f2 08 0d 08 	divu	r8,r9,r8
80032c92:	10 9c       	mov	r12,r8
80032c94:	f8 06 12 00 	clz	r6,r12
80032c98:	c0 41       	brne	80032ca0 <__avr32_udiv64+0xac>
80032c9a:	18 1b       	sub	r11,r12
80032c9c:	30 19       	mov	r9,1
80032c9e:	c4 08       	rjmp	80032d1e <__avr32_udiv64+0x12a>
80032ca0:	ec 01 11 20 	rsub	r1,r6,32
80032ca4:	f4 01 0a 49 	lsr	r9,r10,r1
80032ca8:	f8 06 09 4c 	lsl	r12,r12,r6
80032cac:	f6 06 09 48 	lsl	r8,r11,r6
80032cb0:	f6 01 0a 41 	lsr	r1,r11,r1
80032cb4:	f3 e8 10 08 	or	r8,r9,r8
80032cb8:	f8 03 16 10 	lsr	r3,r12,0x10
80032cbc:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80032cc0:	e2 03 0d 00 	divu	r0,r1,r3
80032cc4:	f0 0b 16 10 	lsr	r11,r8,0x10
80032cc8:	00 9e       	mov	lr,r0
80032cca:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80032cce:	e0 05 02 49 	mul	r9,r0,r5
80032cd2:	12 3b       	cp.w	r11,r9
80032cd4:	c0 a2       	brcc	80032ce8 <__avr32_udiv64+0xf4>
80032cd6:	20 1e       	sub	lr,1
80032cd8:	18 0b       	add	r11,r12
80032cda:	18 3b       	cp.w	r11,r12
80032cdc:	c0 63       	brcs	80032ce8 <__avr32_udiv64+0xf4>
80032cde:	12 3b       	cp.w	r11,r9
80032ce0:	f7 be 03 01 	sublo	lr,1
80032ce4:	f7 dc e3 0b 	addcs	r11,r11,r12
80032ce8:	12 1b       	sub	r11,r9
80032cea:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80032cee:	f6 03 0d 02 	divu	r2,r11,r3
80032cf2:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80032cf6:	04 99       	mov	r9,r2
80032cf8:	e4 05 02 4b 	mul	r11,r2,r5
80032cfc:	16 38       	cp.w	r8,r11
80032cfe:	c0 a2       	brcc	80032d12 <__avr32_udiv64+0x11e>
80032d00:	20 19       	sub	r9,1
80032d02:	18 08       	add	r8,r12
80032d04:	18 38       	cp.w	r8,r12
80032d06:	c0 63       	brcs	80032d12 <__avr32_udiv64+0x11e>
80032d08:	16 38       	cp.w	r8,r11
80032d0a:	f7 b9 03 01 	sublo	r9,1
80032d0e:	f1 dc e3 08 	addcs	r8,r8,r12
80032d12:	f4 06 09 43 	lsl	r3,r10,r6
80032d16:	f0 0b 01 0b 	sub	r11,r8,r11
80032d1a:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80032d1e:	f8 06 16 10 	lsr	r6,r12,0x10
80032d22:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80032d26:	f6 06 0d 00 	divu	r0,r11,r6
80032d2a:	e6 0b 16 10 	lsr	r11,r3,0x10
80032d2e:	00 9a       	mov	r10,r0
80032d30:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80032d34:	e0 0e 02 48 	mul	r8,r0,lr
80032d38:	10 3b       	cp.w	r11,r8
80032d3a:	c0 a2       	brcc	80032d4e <__avr32_udiv64+0x15a>
80032d3c:	20 1a       	sub	r10,1
80032d3e:	18 0b       	add	r11,r12
80032d40:	18 3b       	cp.w	r11,r12
80032d42:	c0 63       	brcs	80032d4e <__avr32_udiv64+0x15a>
80032d44:	10 3b       	cp.w	r11,r8
80032d46:	f7 ba 03 01 	sublo	r10,1
80032d4a:	f7 dc e3 0b 	addcs	r11,r11,r12
80032d4e:	f6 08 01 01 	sub	r1,r11,r8
80032d52:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80032d56:	e2 06 0d 00 	divu	r0,r1,r6
80032d5a:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80032d5e:	00 98       	mov	r8,r0
80032d60:	e0 0e 02 4b 	mul	r11,r0,lr
80032d64:	16 33       	cp.w	r3,r11
80032d66:	c0 82       	brcc	80032d76 <__avr32_udiv64+0x182>
80032d68:	20 18       	sub	r8,1
80032d6a:	18 03       	add	r3,r12
80032d6c:	18 33       	cp.w	r3,r12
80032d6e:	c0 43       	brcs	80032d76 <__avr32_udiv64+0x182>
80032d70:	16 33       	cp.w	r3,r11
80032d72:	f7 b8 03 01 	sublo	r8,1
80032d76:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80032d7a:	c6 98       	rjmp	80032e4c <__avr32_udiv64+0x258>
80032d7c:	16 39       	cp.w	r9,r11
80032d7e:	e0 8b 00 65 	brhi	80032e48 <__avr32_udiv64+0x254>
80032d82:	f2 09 12 00 	clz	r9,r9
80032d86:	c0 b1       	brne	80032d9c <__avr32_udiv64+0x1a8>
80032d88:	10 3a       	cp.w	r10,r8
80032d8a:	5f 2a       	srhs	r10
80032d8c:	1c 3b       	cp.w	r11,lr
80032d8e:	5f b8       	srhi	r8
80032d90:	10 4a       	or	r10,r8
80032d92:	f2 0a 18 00 	cp.b	r10,r9
80032d96:	c5 90       	breq	80032e48 <__avr32_udiv64+0x254>
80032d98:	30 18       	mov	r8,1
80032d9a:	c5 98       	rjmp	80032e4c <__avr32_udiv64+0x258>
80032d9c:	f0 09 09 46 	lsl	r6,r8,r9
80032da0:	f2 03 11 20 	rsub	r3,r9,32
80032da4:	fc 09 09 4e 	lsl	lr,lr,r9
80032da8:	f0 03 0a 48 	lsr	r8,r8,r3
80032dac:	f6 09 09 4c 	lsl	r12,r11,r9
80032db0:	f4 03 0a 42 	lsr	r2,r10,r3
80032db4:	ef 46 ff f4 	st.w	r7[-12],r6
80032db8:	f6 03 0a 43 	lsr	r3,r11,r3
80032dbc:	18 42       	or	r2,r12
80032dbe:	f1 ee 10 0c 	or	r12,r8,lr
80032dc2:	f8 01 16 10 	lsr	r1,r12,0x10
80032dc6:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80032dca:	e6 01 0d 04 	divu	r4,r3,r1
80032dce:	e4 03 16 10 	lsr	r3,r2,0x10
80032dd2:	08 9e       	mov	lr,r4
80032dd4:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80032dd8:	e8 06 02 48 	mul	r8,r4,r6
80032ddc:	10 33       	cp.w	r3,r8
80032dde:	c0 a2       	brcc	80032df2 <__avr32_udiv64+0x1fe>
80032de0:	20 1e       	sub	lr,1
80032de2:	18 03       	add	r3,r12
80032de4:	18 33       	cp.w	r3,r12
80032de6:	c0 63       	brcs	80032df2 <__avr32_udiv64+0x1fe>
80032de8:	10 33       	cp.w	r3,r8
80032dea:	f7 be 03 01 	sublo	lr,1
80032dee:	e7 dc e3 03 	addcs	r3,r3,r12
80032df2:	10 13       	sub	r3,r8
80032df4:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80032df8:	e6 01 0d 00 	divu	r0,r3,r1
80032dfc:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80032e00:	00 98       	mov	r8,r0
80032e02:	e0 06 02 46 	mul	r6,r0,r6
80032e06:	0c 3b       	cp.w	r11,r6
80032e08:	c0 a2       	brcc	80032e1c <__avr32_udiv64+0x228>
80032e0a:	20 18       	sub	r8,1
80032e0c:	18 0b       	add	r11,r12
80032e0e:	18 3b       	cp.w	r11,r12
80032e10:	c0 63       	brcs	80032e1c <__avr32_udiv64+0x228>
80032e12:	0c 3b       	cp.w	r11,r6
80032e14:	f7 dc e3 0b 	addcs	r11,r11,r12
80032e18:	f7 b8 03 01 	sublo	r8,1
80032e1c:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80032e20:	ee f4 ff f4 	ld.w	r4,r7[-12]
80032e24:	0c 1b       	sub	r11,r6
80032e26:	f0 04 06 42 	mulu.d	r2,r8,r4
80032e2a:	06 95       	mov	r5,r3
80032e2c:	16 35       	cp.w	r5,r11
80032e2e:	e0 8b 00 0a 	brhi	80032e42 <__avr32_udiv64+0x24e>
80032e32:	5f 0b       	sreq	r11
80032e34:	f4 09 09 49 	lsl	r9,r10,r9
80032e38:	12 32       	cp.w	r2,r9
80032e3a:	5f b9       	srhi	r9
80032e3c:	f7 e9 00 09 	and	r9,r11,r9
80032e40:	c0 60       	breq	80032e4c <__avr32_udiv64+0x258>
80032e42:	20 18       	sub	r8,1
80032e44:	30 09       	mov	r9,0
80032e46:	c0 38       	rjmp	80032e4c <__avr32_udiv64+0x258>
80032e48:	30 09       	mov	r9,0
80032e4a:	12 98       	mov	r8,r9
80032e4c:	10 9a       	mov	r10,r8
80032e4e:	12 93       	mov	r3,r9
80032e50:	10 92       	mov	r2,r8
80032e52:	12 9b       	mov	r11,r9
80032e54:	2f dd       	sub	sp,-12
80032e56:	d8 32       	popm	r0-r7,pc

80032e58 <__errno>:
80032e58:	48 28       	lddpc	r8,80032e60 <__errno+0x8>
80032e5a:	70 0c       	ld.w	r12,r8[0x0]
80032e5c:	2f 4c       	sub	r12,-12
80032e5e:	5e fc       	retal	r12
80032e60:	00 00       	add	r0,r0
80032e62:	20 e4       	sub	r4,14

80032e64 <memcpy>:
80032e64:	58 8a       	cp.w	r10,8
80032e66:	c2 f5       	brlt	80032ec4 <memcpy+0x60>
80032e68:	f9 eb 10 09 	or	r9,r12,r11
80032e6c:	e2 19 00 03 	andl	r9,0x3,COH
80032e70:	e0 81 00 97 	brne	80032f9e <memcpy+0x13a>
80032e74:	e0 4a 00 20 	cp.w	r10,32
80032e78:	c3 b4       	brge	80032eee <memcpy+0x8a>
80032e7a:	f4 08 14 02 	asr	r8,r10,0x2
80032e7e:	f0 09 11 08 	rsub	r9,r8,8
80032e82:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80032e86:	76 69       	ld.w	r9,r11[0x18]
80032e88:	99 69       	st.w	r12[0x18],r9
80032e8a:	76 59       	ld.w	r9,r11[0x14]
80032e8c:	99 59       	st.w	r12[0x14],r9
80032e8e:	76 49       	ld.w	r9,r11[0x10]
80032e90:	99 49       	st.w	r12[0x10],r9
80032e92:	76 39       	ld.w	r9,r11[0xc]
80032e94:	99 39       	st.w	r12[0xc],r9
80032e96:	76 29       	ld.w	r9,r11[0x8]
80032e98:	99 29       	st.w	r12[0x8],r9
80032e9a:	76 19       	ld.w	r9,r11[0x4]
80032e9c:	99 19       	st.w	r12[0x4],r9
80032e9e:	76 09       	ld.w	r9,r11[0x0]
80032ea0:	99 09       	st.w	r12[0x0],r9
80032ea2:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80032ea6:	f8 08 00 28 	add	r8,r12,r8<<0x2
80032eaa:	e0 1a 00 03 	andl	r10,0x3
80032eae:	f4 0a 11 04 	rsub	r10,r10,4
80032eb2:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80032eb6:	17 a9       	ld.ub	r9,r11[0x2]
80032eb8:	b0 a9       	st.b	r8[0x2],r9
80032eba:	17 99       	ld.ub	r9,r11[0x1]
80032ebc:	b0 99       	st.b	r8[0x1],r9
80032ebe:	17 89       	ld.ub	r9,r11[0x0]
80032ec0:	b0 89       	st.b	r8[0x0],r9
80032ec2:	5e fc       	retal	r12
80032ec4:	f4 0a 11 09 	rsub	r10,r10,9
80032ec8:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80032ecc:	17 f9       	ld.ub	r9,r11[0x7]
80032ece:	b8 f9       	st.b	r12[0x7],r9
80032ed0:	17 e9       	ld.ub	r9,r11[0x6]
80032ed2:	b8 e9       	st.b	r12[0x6],r9
80032ed4:	17 d9       	ld.ub	r9,r11[0x5]
80032ed6:	b8 d9       	st.b	r12[0x5],r9
80032ed8:	17 c9       	ld.ub	r9,r11[0x4]
80032eda:	b8 c9       	st.b	r12[0x4],r9
80032edc:	17 b9       	ld.ub	r9,r11[0x3]
80032ede:	b8 b9       	st.b	r12[0x3],r9
80032ee0:	17 a9       	ld.ub	r9,r11[0x2]
80032ee2:	b8 a9       	st.b	r12[0x2],r9
80032ee4:	17 99       	ld.ub	r9,r11[0x1]
80032ee6:	b8 99       	st.b	r12[0x1],r9
80032ee8:	17 89       	ld.ub	r9,r11[0x0]
80032eea:	b8 89       	st.b	r12[0x0],r9
80032eec:	5e fc       	retal	r12
80032eee:	eb cd 40 c0 	pushm	r6-r7,lr
80032ef2:	18 99       	mov	r9,r12
80032ef4:	22 0a       	sub	r10,32
80032ef6:	b7 07       	ld.d	r6,r11++
80032ef8:	b3 26       	st.d	r9++,r6
80032efa:	b7 07       	ld.d	r6,r11++
80032efc:	b3 26       	st.d	r9++,r6
80032efe:	b7 07       	ld.d	r6,r11++
80032f00:	b3 26       	st.d	r9++,r6
80032f02:	b7 07       	ld.d	r6,r11++
80032f04:	b3 26       	st.d	r9++,r6
80032f06:	22 0a       	sub	r10,32
80032f08:	cf 74       	brge	80032ef6 <memcpy+0x92>
80032f0a:	2f 0a       	sub	r10,-16
80032f0c:	c0 65       	brlt	80032f18 <memcpy+0xb4>
80032f0e:	b7 07       	ld.d	r6,r11++
80032f10:	b3 26       	st.d	r9++,r6
80032f12:	b7 07       	ld.d	r6,r11++
80032f14:	b3 26       	st.d	r9++,r6
80032f16:	21 0a       	sub	r10,16
80032f18:	5c 3a       	neg	r10
80032f1a:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80032f1e:	d7 03       	nop
80032f20:	d7 03       	nop
80032f22:	f7 36 00 0e 	ld.ub	r6,r11[14]
80032f26:	f3 66 00 0e 	st.b	r9[14],r6
80032f2a:	f7 36 00 0d 	ld.ub	r6,r11[13]
80032f2e:	f3 66 00 0d 	st.b	r9[13],r6
80032f32:	f7 36 00 0c 	ld.ub	r6,r11[12]
80032f36:	f3 66 00 0c 	st.b	r9[12],r6
80032f3a:	f7 36 00 0b 	ld.ub	r6,r11[11]
80032f3e:	f3 66 00 0b 	st.b	r9[11],r6
80032f42:	f7 36 00 0a 	ld.ub	r6,r11[10]
80032f46:	f3 66 00 0a 	st.b	r9[10],r6
80032f4a:	f7 36 00 09 	ld.ub	r6,r11[9]
80032f4e:	f3 66 00 09 	st.b	r9[9],r6
80032f52:	f7 36 00 08 	ld.ub	r6,r11[8]
80032f56:	f3 66 00 08 	st.b	r9[8],r6
80032f5a:	f7 36 00 07 	ld.ub	r6,r11[7]
80032f5e:	f3 66 00 07 	st.b	r9[7],r6
80032f62:	f7 36 00 06 	ld.ub	r6,r11[6]
80032f66:	f3 66 00 06 	st.b	r9[6],r6
80032f6a:	f7 36 00 05 	ld.ub	r6,r11[5]
80032f6e:	f3 66 00 05 	st.b	r9[5],r6
80032f72:	f7 36 00 04 	ld.ub	r6,r11[4]
80032f76:	f3 66 00 04 	st.b	r9[4],r6
80032f7a:	f7 36 00 03 	ld.ub	r6,r11[3]
80032f7e:	f3 66 00 03 	st.b	r9[3],r6
80032f82:	f7 36 00 02 	ld.ub	r6,r11[2]
80032f86:	f3 66 00 02 	st.b	r9[2],r6
80032f8a:	f7 36 00 01 	ld.ub	r6,r11[1]
80032f8e:	f3 66 00 01 	st.b	r9[1],r6
80032f92:	f7 36 00 00 	ld.ub	r6,r11[0]
80032f96:	f3 66 00 00 	st.b	r9[0],r6
80032f9a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80032f9e:	20 1a       	sub	r10,1
80032fa0:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80032fa4:	f8 0a 0b 09 	st.b	r12[r10],r9
80032fa8:	cf b1       	brne	80032f9e <memcpy+0x13a>
80032faa:	5e fc       	retal	r12

80032fac <memset>:
80032fac:	18 98       	mov	r8,r12
80032fae:	c0 38       	rjmp	80032fb4 <memset+0x8>
80032fb0:	10 cb       	st.b	r8++,r11
80032fb2:	20 1a       	sub	r10,1
80032fb4:	58 0a       	cp.w	r10,0
80032fb6:	cf d1       	brne	80032fb0 <memset+0x4>
80032fb8:	5e fc       	retal	r12

80032fba <strcpy>:
80032fba:	30 08       	mov	r8,0
80032fbc:	f6 08 07 09 	ld.ub	r9,r11[r8]
80032fc0:	f8 08 0b 09 	st.b	r12[r8],r9
80032fc4:	2f f8       	sub	r8,-1
80032fc6:	58 09       	cp.w	r9,0
80032fc8:	cf a1       	brne	80032fbc <strcpy+0x2>
80032fca:	5e fc       	retal	r12

80032fcc <strlen>:
80032fcc:	30 09       	mov	r9,0
80032fce:	18 98       	mov	r8,r12
80032fd0:	c0 28       	rjmp	80032fd4 <strlen+0x8>
80032fd2:	2f f8       	sub	r8,-1
80032fd4:	11 8a       	ld.ub	r10,r8[0x0]
80032fd6:	f2 0a 18 00 	cp.b	r10,r9
80032fda:	cf c1       	brne	80032fd2 <strlen+0x6>
80032fdc:	f0 0c 01 0c 	sub	r12,r8,r12
80032fe0:	5e fc       	retal	r12

Disassembly of section .exception:

80033000 <_evba>:
_evba:

        .org  0x000
        // Unrecoverable Exception.
_handle_Unrecoverable_Exception:
        rjmp $
80033000:	c0 08       	rjmp	80033000 <_evba>
	...

80033004 <_handle_TLB_Multiple_Hit>:

        .org  0x004
        // TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
        rjmp $
80033004:	c0 08       	rjmp	80033004 <_handle_TLB_Multiple_Hit>
	...

80033008 <_handle_Bus_Error_Data_Fetch>:

        .org  0x008
        // Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
        rjmp $
80033008:	c0 08       	rjmp	80033008 <_handle_Bus_Error_Data_Fetch>
	...

8003300c <_handle_Bus_Error_Instruction_Fetch>:

        .org  0x00C
         // Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
        rjmp $
8003300c:	c0 08       	rjmp	8003300c <_handle_Bus_Error_Instruction_Fetch>
	...

80033010 <_handle_NMI>:

        .org  0x010
        // NMI.
_handle_NMI:
		lda.w   pc, eic_nmi_handler
80033010:	4c ff       	lddpc	pc,8003314c <ipr_val+0x10>
	...

80033014 <_handle_Instruction_Address>:
        .org  0x014
        // Instruction Address.
_handle_Instruction_Address:
        rjmp $
80033014:	c0 08       	rjmp	80033014 <_handle_Instruction_Address>
	...

80033018 <_handle_ITLB_Protection>:

        .org  0x018
        // ITLB Protection.
_handle_ITLB_Protection:
        rjmp $
80033018:	c0 08       	rjmp	80033018 <_handle_ITLB_Protection>
	...

8003301c <_handle_Breakpoint>:

        .org  0x01C
        // Breakpoint.
_handle_Breakpoint:
        rjmp $
8003301c:	c0 08       	rjmp	8003301c <_handle_Breakpoint>
	...

80033020 <_handle_Illegal_Opcode>:

        .org  0x020
        // Illegal Opcode.
_handle_Illegal_Opcode:
        rjmp $
80033020:	c0 08       	rjmp	80033020 <_handle_Illegal_Opcode>
	...

80033024 <_handle_Unimplemented_Instruction>:

        .org  0x024
        // Unimplemented Instruction.
_handle_Unimplemented_Instruction:
        rjmp $
80033024:	c0 08       	rjmp	80033024 <_handle_Unimplemented_Instruction>
	...

80033028 <_handle_Privilege_Violation>:

        .org  0x028
        // Privilege Violation.
_handle_Privilege_Violation:
        rjmp $
80033028:	c0 08       	rjmp	80033028 <_handle_Privilege_Violation>
	...

8003302c <_handle_Floating_Point>:

        .org  0x02C
        // Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
        rjmp $
8003302c:	c0 08       	rjmp	8003302c <_handle_Floating_Point>
	...

80033030 <_handle_Coprocessor_Absent>:

        .org  0x030
        // Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
        rjmp $
80033030:	c0 08       	rjmp	80033030 <_handle_Coprocessor_Absent>
	...

80033034 <_handle_Data_Address_Read>:

        .org  0x034
        // Data Address (Read).
_handle_Data_Address_Read:
        rjmp $
80033034:	c0 08       	rjmp	80033034 <_handle_Data_Address_Read>
	...

80033038 <_handle_Data_Address_Write>:

        .org  0x038
        // Data Address (Write).
_handle_Data_Address_Write:
        rjmp $
80033038:	c0 08       	rjmp	80033038 <_handle_Data_Address_Write>
	...

8003303c <_handle_DTLB_Protection_Read>:

        .org  0x03C
        // DTLB Protection (Read).
_handle_DTLB_Protection_Read:
        rjmp $
8003303c:	c0 08       	rjmp	8003303c <_handle_DTLB_Protection_Read>
	...

80033040 <_handle_DTLB_Protection_Write>:

        .org  0x040
        // DTLB Protection (Write).
_handle_DTLB_Protection_Write:
        rjmp $
80033040:	c0 08       	rjmp	80033040 <_handle_DTLB_Protection_Write>
	...

80033044 <_handle_DTLB_Modified>:

        .org  0x044
        // DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
        rjmp $
80033044:	c0 08       	rjmp	80033044 <_handle_DTLB_Modified>
	...

80033050 <_handle_ITLB_Miss>:

        .org  0x050
        // ITLB Miss.
_handle_ITLB_Miss:
        rjmp $
80033050:	c0 08       	rjmp	80033050 <_handle_ITLB_Miss>
	...

80033060 <_handle_DTLB_Miss_Read>:

        .org  0x060
        // DTLB Miss (Read).
_handle_DTLB_Miss_Read:
        rjmp $
80033060:	c0 08       	rjmp	80033060 <_handle_DTLB_Miss_Read>
	...

80033070 <_handle_DTLB_Miss_Write>:

        .org  0x070
        // DTLB Miss (Write).
_handle_DTLB_Miss_Write:
        rjmp $
80033070:	c0 08       	rjmp	80033070 <_handle_DTLB_Miss_Write>
	...

80033100 <_handle_Supervisor_Call>:

        .org  0x100
        // Supervisor Call.
_handle_Supervisor_Call:
        rjmp $
80033100:	c0 08       	rjmp	80033100 <_handle_Supervisor_Call>
80033102:	d7 03       	nop

80033104 <_int0>:
  // CPU upon interrupt entry. No other register is saved by hardware.
#elif __AVR32_AP__
  // PC and SR are automatically saved in respectively RAR_INTx and RSR_INTx by
  // the CPU upon interrupt entry. No other register is saved by hardware.
  pushm   r8-r12, lr
#endif
80033104:	30 0c       	mov	r12,0
80033106:	fe b0 ac b3 	rcall	80028a6c <_get_interrupt_handler>
8003310a:	58 0c       	cp.w	r12,0
8003310c:	f8 0f 17 10 	movne	pc,r12
80033110:	d6 03       	rete

80033112 <_int1>:
80033112:	30 1c       	mov	r12,1
80033114:	fe b0 ac ac 	rcall	80028a6c <_get_interrupt_handler>
80033118:	58 0c       	cp.w	r12,0
8003311a:	f8 0f 17 10 	movne	pc,r12
8003311e:	d6 03       	rete

80033120 <_int2>:
80033120:	30 2c       	mov	r12,2
80033122:	fe b0 ac a5 	rcall	80028a6c <_get_interrupt_handler>
80033126:	58 0c       	cp.w	r12,0
80033128:	f8 0f 17 10 	movne	pc,r12
8003312c:	d6 03       	rete

8003312e <_int3>:
8003312e:	30 3c       	mov	r12,3
80033130:	fe b0 ac 9e 	rcall	80028a6c <_get_interrupt_handler>
80033134:	58 0c       	cp.w	r12,0
80033136:	f8 0f 17 10 	movne	pc,r12
8003313a:	d6 03       	rete

8003313c <ipr_val>:
8003313c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
8003314c:	80 01 69 6c d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ..il............
8003315c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8003316c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8003317c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8003318c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8003319c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800331ac:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800331bc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800331cc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800331dc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800331ec:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800331fc:	d7 03 d7 03                                         ....
