
MegaFly2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0002f9ae  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80031a00  80031a00  00031e00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000644  80031c00  80031c00  00032000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  80032244  80032244  00032644  2**0
                  ALLOC
  6 .data.rel.ro  00000178  00000004  80032248  00032804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .got          00000908  0000017c  800323c0  0003297c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000019f4  00000a84  80032cc8  00033284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007630  00002478  800346bc  00034c78  2**2
                  ALLOC
 10 .comment      00000030  00000000  00000000  00034c78  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000c08  00000000  00000000  00034ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00007ad0  00000000  00000000  000358b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0005ea62  00000000  00000000  0003d380  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000093ca  00000000  00000000  0009bde2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000117cd  00000000  00000000  000a51ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000089cc  00000000  00000000  000b697c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000ed23  00000000  00000000  000bf348  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000dbb0  00000000  00000000  000ce06b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000400  2**0
                  ALLOC
 20 .debug_ranges 000005f0  00000000  00000000  000dbc20  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002000:	fe ff 00 04 	ld.w	pc,pc[4]
80002004:	80 02       	ld.sh	r2,r0[0x0]
80002006:	c2 88       	rjmp	80002056 <byte_swap_4+0x1a>

Disassembly of section .text:

80002008 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
80002008:	eb cd 40 80 	pushm	r7,lr
8000200c:	1a 97       	mov	r7,sp
8000200e:	20 2d       	sub	sp,8
80002010:	ef 4c ff fc 	st.w	r7[-4],r12
80002014:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
80002018:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000201c:	2f f8       	sub	r8,-1
8000201e:	11 88       	ld.ub	r8,r8[0x0]
80002020:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002024:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
80002026:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000202a:	f0 c9 ff ff 	sub	r9,r8,-1
8000202e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002032:	11 88       	ld.ub	r8,r8[0x0]
80002034:	b2 88       	st.b	r9[0x0],r8
}
80002036:	2f ed       	sub	sp,-8
80002038:	e3 cd 80 80 	ldm	sp++,r7,pc

8000203c <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
8000203c:	eb cd 40 80 	pushm	r7,lr
80002040:	1a 97       	mov	r7,sp
80002042:	20 2d       	sub	sp,8
80002044:	ef 4c ff fc 	st.w	r7[-4],r12
80002048:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
8000204c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002050:	2f d8       	sub	r8,-3
80002052:	11 88       	ld.ub	r8,r8[0x0]
80002054:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002058:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
8000205a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000205e:	f0 c9 ff ff 	sub	r9,r8,-1
80002062:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002066:	2f e8       	sub	r8,-2
80002068:	11 88       	ld.ub	r8,r8[0x0]
8000206a:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
8000206c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002070:	f0 c9 ff fe 	sub	r9,r8,-2
80002074:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002078:	2f f8       	sub	r8,-1
8000207a:	11 88       	ld.ub	r8,r8[0x0]
8000207c:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
8000207e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002082:	f0 c9 ff fd 	sub	r9,r8,-3
80002086:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000208a:	11 88       	ld.ub	r8,r8[0x0]
8000208c:	b2 88       	st.b	r9[0x0],r8
}
8000208e:	2f ed       	sub	sp,-8
80002090:	e3 cd 80 80 	ldm	sp++,r7,pc

80002094 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80002094:	eb cd 40 c0 	pushm	r6-r7,lr
80002098:	1a 97       	mov	r7,sp
8000209a:	20 3d       	sub	sp,12
8000209c:	49 06       	lddpc	r6,800020dc <mav_array_memcpy+0x48>
8000209e:	1e 26       	rsub	r6,pc
800020a0:	ef 4c ff fc 	st.w	r7[-4],r12
800020a4:	ef 4b ff f8 	st.w	r7[-8],r11
800020a8:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
800020ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020b0:	58 08       	cp.w	r8,0
800020b2:	c0 91       	brne	800020c4 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
800020b4:	ee fa ff f4 	ld.w	r10,r7[-12]
800020b8:	30 0b       	mov	r11,0
800020ba:	ee fc ff fc 	ld.w	r12,r7[-4]
800020be:	f0 16 00 31 	mcall	r6[196]
800020c2:	c0 98       	rjmp	800020d4 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
800020c4:	ee fa ff f4 	ld.w	r10,r7[-12]
800020c8:	ee fb ff f8 	ld.w	r11,r7[-8]
800020cc:	ee fc ff fc 	ld.w	r12,r7[-4]
800020d0:	f0 16 00 21 	mcall	r6[132]
	}
}
800020d4:	2f dd       	sub	sp,-12
800020d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800020da:	00 00       	add	r0,r0
800020dc:	80 00       	ld.sh	r0,r0[0x0]
800020de:	1f 22       	ld.uh	r2,pc++

800020e0 <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
800020e0:	eb cd 40 c0 	pushm	r6-r7,lr
800020e4:	1a 97       	mov	r7,sp
800020e6:	20 3d       	sub	sp,12
800020e8:	48 d6       	lddpc	r6,8000211c <_MAV_RETURN_uint16_t+0x3c>
800020ea:	1e 26       	rsub	r6,pc
800020ec:	ef 4c ff f8 	st.w	r7[-8],r12
800020f0:	16 98       	mov	r8,r11
800020f2:	ef 68 ff f4 	st.b	r7[-12],r8
800020f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020fa:	2f 88       	sub	r8,-8
800020fc:	10 99       	mov	r9,r8
800020fe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002102:	10 09       	add	r9,r8
80002104:	ee c8 00 02 	sub	r8,r7,2
80002108:	12 9b       	mov	r11,r9
8000210a:	10 9c       	mov	r12,r8
8000210c:	c7 ef       	rcall	80002008 <byte_swap_2>
8000210e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002112:	10 9c       	mov	r12,r8
80002114:	2f dd       	sub	sp,-12
80002116:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000211a:	00 00       	add	r0,r0
8000211c:	80 00       	ld.sh	r0,r0[0x0]
8000211e:	1f 6e       	ld.uh	lr,--pc

80002120 <_MAV_RETURN_int16_t>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
80002120:	eb cd 40 c0 	pushm	r6-r7,lr
80002124:	1a 97       	mov	r7,sp
80002126:	20 3d       	sub	sp,12
80002128:	48 d6       	lddpc	r6,8000215c <_MAV_RETURN_int16_t+0x3c>
8000212a:	1e 26       	rsub	r6,pc
8000212c:	ef 4c ff f8 	st.w	r7[-8],r12
80002130:	16 98       	mov	r8,r11
80002132:	ef 68 ff f4 	st.b	r7[-12],r8
80002136:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000213a:	2f 88       	sub	r8,-8
8000213c:	10 99       	mov	r9,r8
8000213e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002142:	10 09       	add	r9,r8
80002144:	ee c8 00 02 	sub	r8,r7,2
80002148:	12 9b       	mov	r11,r9
8000214a:	10 9c       	mov	r12,r8
8000214c:	c5 ef       	rcall	80002008 <byte_swap_2>
8000214e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002152:	10 9c       	mov	r12,r8
80002154:	2f dd       	sub	sp,-12
80002156:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000215a:	00 00       	add	r0,r0
8000215c:	80 00       	ld.sh	r0,r0[0x0]
8000215e:	1f ae       	ld.ub	lr,pc[0x2]

80002160 <_MAV_RETURN_uint32_t>:
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
80002160:	eb cd 40 c0 	pushm	r6-r7,lr
80002164:	1a 97       	mov	r7,sp
80002166:	20 3d       	sub	sp,12
80002168:	48 d6       	lddpc	r6,8000219c <_MAV_RETURN_uint32_t+0x3c>
8000216a:	1e 26       	rsub	r6,pc
8000216c:	ef 4c ff f8 	st.w	r7[-8],r12
80002170:	16 98       	mov	r8,r11
80002172:	ef 68 ff f4 	st.b	r7[-12],r8
80002176:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000217a:	2f 88       	sub	r8,-8
8000217c:	10 99       	mov	r9,r8
8000217e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002182:	10 09       	add	r9,r8
80002184:	ee c8 00 04 	sub	r8,r7,4
80002188:	12 9b       	mov	r11,r9
8000218a:	10 9c       	mov	r12,r8
8000218c:	c5 8f       	rcall	8000203c <byte_swap_4>
8000218e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002192:	10 9c       	mov	r12,r8
80002194:	2f dd       	sub	sp,-12
80002196:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000219a:	00 00       	add	r0,r0
8000219c:	80 00       	ld.sh	r0,r0[0x0]
8000219e:	1f ee       	ld.ub	lr,pc[0x6]

800021a0 <_MAV_RETURN_int32_t>:
_MAV_MSG_RETURN_TYPE(int32_t,  4)
800021a0:	eb cd 40 c0 	pushm	r6-r7,lr
800021a4:	1a 97       	mov	r7,sp
800021a6:	20 3d       	sub	sp,12
800021a8:	48 d6       	lddpc	r6,800021dc <_MAV_RETURN_int32_t+0x3c>
800021aa:	1e 26       	rsub	r6,pc
800021ac:	ef 4c ff f8 	st.w	r7[-8],r12
800021b0:	16 98       	mov	r8,r11
800021b2:	ef 68 ff f4 	st.b	r7[-12],r8
800021b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800021ba:	2f 88       	sub	r8,-8
800021bc:	10 99       	mov	r9,r8
800021be:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800021c2:	10 09       	add	r9,r8
800021c4:	ee c8 00 04 	sub	r8,r7,4
800021c8:	12 9b       	mov	r11,r9
800021ca:	10 9c       	mov	r12,r8
800021cc:	c3 8f       	rcall	8000203c <byte_swap_4>
800021ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021d2:	10 9c       	mov	r12,r8
800021d4:	2f dd       	sub	sp,-12
800021d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800021da:	00 00       	add	r0,r0
800021dc:	80 00       	ld.sh	r0,r0[0x0]
800021de:	20 2e       	sub	lr,2

800021e0 <mavlink_msg_global_position_int_get_time_boot_ms>:
 * @brief Get field time_boot_ms from global_position_int message
 *
 * @return Timestamp (milliseconds since system boot)
 */
static inline uint32_t mavlink_msg_global_position_int_get_time_boot_ms(const mavlink_message_t* msg)
{
800021e0:	eb cd 40 c0 	pushm	r6-r7,lr
800021e4:	1a 97       	mov	r7,sp
800021e6:	20 1d       	sub	sp,4
800021e8:	48 76       	lddpc	r6,80002204 <mavlink_msg_global_position_int_get_time_boot_ms+0x24>
800021ea:	1e 26       	rsub	r6,pc
800021ec:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint32_t(msg,  0);
800021f0:	30 0b       	mov	r11,0
800021f2:	ee fc ff fc 	ld.w	r12,r7[-4]
800021f6:	cb 5f       	rcall	80002160 <_MAV_RETURN_uint32_t>
800021f8:	18 98       	mov	r8,r12
}
800021fa:	10 9c       	mov	r12,r8
800021fc:	2f fd       	sub	sp,-4
800021fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002202:	00 00       	add	r0,r0
80002204:	80 00       	ld.sh	r0,r0[0x0]
80002206:	20 6e       	sub	lr,6

80002208 <mavlink_msg_global_position_int_get_lat>:
 * @brief Get field lat from global_position_int message
 *
 * @return Latitude, expressed as * 1E7
 */
static inline int32_t mavlink_msg_global_position_int_get_lat(const mavlink_message_t* msg)
{
80002208:	eb cd 40 c0 	pushm	r6-r7,lr
8000220c:	1a 97       	mov	r7,sp
8000220e:	20 1d       	sub	sp,4
80002210:	48 76       	lddpc	r6,8000222c <mavlink_msg_global_position_int_get_lat+0x24>
80002212:	1e 26       	rsub	r6,pc
80002214:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  4);
80002218:	30 4b       	mov	r11,4
8000221a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000221e:	cc 1f       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002220:	18 98       	mov	r8,r12
}
80002222:	10 9c       	mov	r12,r8
80002224:	2f fd       	sub	sp,-4
80002226:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000222a:	00 00       	add	r0,r0
8000222c:	80 00       	ld.sh	r0,r0[0x0]
8000222e:	20 96       	sub	r6,9

80002230 <mavlink_msg_global_position_int_get_lon>:
 * @brief Get field lon from global_position_int message
 *
 * @return Longitude, expressed as * 1E7
 */
static inline int32_t mavlink_msg_global_position_int_get_lon(const mavlink_message_t* msg)
{
80002230:	eb cd 40 c0 	pushm	r6-r7,lr
80002234:	1a 97       	mov	r7,sp
80002236:	20 1d       	sub	sp,4
80002238:	48 76       	lddpc	r6,80002254 <mavlink_msg_global_position_int_get_lon+0x24>
8000223a:	1e 26       	rsub	r6,pc
8000223c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  8);
80002240:	30 8b       	mov	r11,8
80002242:	ee fc ff fc 	ld.w	r12,r7[-4]
80002246:	ca df       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002248:	18 98       	mov	r8,r12
}
8000224a:	10 9c       	mov	r12,r8
8000224c:	2f fd       	sub	sp,-4
8000224e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002252:	00 00       	add	r0,r0
80002254:	80 00       	ld.sh	r0,r0[0x0]
80002256:	20 be       	sub	lr,11

80002258 <mavlink_msg_global_position_int_get_alt>:
 * @brief Get field alt from global_position_int message
 *
 * @return Altitude in meters, expressed as * 1000 (millimeters), above MSL
 */
static inline int32_t mavlink_msg_global_position_int_get_alt(const mavlink_message_t* msg)
{
80002258:	eb cd 40 c0 	pushm	r6-r7,lr
8000225c:	1a 97       	mov	r7,sp
8000225e:	20 1d       	sub	sp,4
80002260:	48 76       	lddpc	r6,8000227c <mavlink_msg_global_position_int_get_alt+0x24>
80002262:	1e 26       	rsub	r6,pc
80002264:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  12);
80002268:	30 cb       	mov	r11,12
8000226a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000226e:	c9 9f       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002270:	18 98       	mov	r8,r12
}
80002272:	10 9c       	mov	r12,r8
80002274:	2f fd       	sub	sp,-4
80002276:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000227a:	00 00       	add	r0,r0
8000227c:	80 00       	ld.sh	r0,r0[0x0]
8000227e:	20 e6       	sub	r6,14

80002280 <mavlink_msg_global_position_int_get_relative_alt>:
 * @brief Get field relative_alt from global_position_int message
 *
 * @return Altitude above ground in meters, expressed as * 1000 (millimeters)
 */
static inline int32_t mavlink_msg_global_position_int_get_relative_alt(const mavlink_message_t* msg)
{
80002280:	eb cd 40 c0 	pushm	r6-r7,lr
80002284:	1a 97       	mov	r7,sp
80002286:	20 1d       	sub	sp,4
80002288:	48 76       	lddpc	r6,800022a4 <mavlink_msg_global_position_int_get_relative_alt+0x24>
8000228a:	1e 26       	rsub	r6,pc
8000228c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  16);
80002290:	31 0b       	mov	r11,16
80002292:	ee fc ff fc 	ld.w	r12,r7[-4]
80002296:	c8 5f       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002298:	18 98       	mov	r8,r12
}
8000229a:	10 9c       	mov	r12,r8
8000229c:	2f fd       	sub	sp,-4
8000229e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022a2:	00 00       	add	r0,r0
800022a4:	80 00       	ld.sh	r0,r0[0x0]
800022a6:	21 0e       	sub	lr,16

800022a8 <mavlink_msg_global_position_int_get_vx>:
 * @brief Get field vx from global_position_int message
 *
 * @return Ground X Speed (Latitude), expressed as m/s * 100
 */
static inline int16_t mavlink_msg_global_position_int_get_vx(const mavlink_message_t* msg)
{
800022a8:	eb cd 40 c0 	pushm	r6-r7,lr
800022ac:	1a 97       	mov	r7,sp
800022ae:	20 1d       	sub	sp,4
800022b0:	48 76       	lddpc	r6,800022cc <mavlink_msg_global_position_int_get_vx+0x24>
800022b2:	1e 26       	rsub	r6,pc
800022b4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  20);
800022b8:	31 4b       	mov	r11,20
800022ba:	ee fc ff fc 	ld.w	r12,r7[-4]
800022be:	c3 1f       	rcall	80002120 <_MAV_RETURN_int16_t>
800022c0:	18 98       	mov	r8,r12
}
800022c2:	10 9c       	mov	r12,r8
800022c4:	2f fd       	sub	sp,-4
800022c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022ca:	00 00       	add	r0,r0
800022cc:	80 00       	ld.sh	r0,r0[0x0]
800022ce:	21 36       	sub	r6,19

800022d0 <mavlink_msg_global_position_int_get_vy>:
 * @brief Get field vy from global_position_int message
 *
 * @return Ground Y Speed (Longitude), expressed as m/s * 100
 */
static inline int16_t mavlink_msg_global_position_int_get_vy(const mavlink_message_t* msg)
{
800022d0:	eb cd 40 c0 	pushm	r6-r7,lr
800022d4:	1a 97       	mov	r7,sp
800022d6:	20 1d       	sub	sp,4
800022d8:	48 76       	lddpc	r6,800022f4 <mavlink_msg_global_position_int_get_vy+0x24>
800022da:	1e 26       	rsub	r6,pc
800022dc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  22);
800022e0:	31 6b       	mov	r11,22
800022e2:	ee fc ff fc 	ld.w	r12,r7[-4]
800022e6:	c1 df       	rcall	80002120 <_MAV_RETURN_int16_t>
800022e8:	18 98       	mov	r8,r12
}
800022ea:	10 9c       	mov	r12,r8
800022ec:	2f fd       	sub	sp,-4
800022ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022f2:	00 00       	add	r0,r0
800022f4:	80 00       	ld.sh	r0,r0[0x0]
800022f6:	21 5e       	sub	lr,21

800022f8 <mavlink_msg_global_position_int_get_vz>:
 * @brief Get field vz from global_position_int message
 *
 * @return Ground Z Speed (Altitude), expressed as m/s * 100
 */
static inline int16_t mavlink_msg_global_position_int_get_vz(const mavlink_message_t* msg)
{
800022f8:	eb cd 40 c0 	pushm	r6-r7,lr
800022fc:	1a 97       	mov	r7,sp
800022fe:	20 1d       	sub	sp,4
80002300:	48 76       	lddpc	r6,8000231c <mavlink_msg_global_position_int_get_vz+0x24>
80002302:	1e 26       	rsub	r6,pc
80002304:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  24);
80002308:	31 8b       	mov	r11,24
8000230a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000230e:	c0 9f       	rcall	80002120 <_MAV_RETURN_int16_t>
80002310:	18 98       	mov	r8,r12
}
80002312:	10 9c       	mov	r12,r8
80002314:	2f fd       	sub	sp,-4
80002316:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000231a:	00 00       	add	r0,r0
8000231c:	80 00       	ld.sh	r0,r0[0x0]
8000231e:	21 86       	sub	r6,24

80002320 <mavlink_msg_global_position_int_get_hdg>:
 * @brief Get field hdg from global_position_int message
 *
 * @return Compass heading in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
 */
static inline uint16_t mavlink_msg_global_position_int_get_hdg(const mavlink_message_t* msg)
{
80002320:	eb cd 40 c0 	pushm	r6-r7,lr
80002324:	1a 97       	mov	r7,sp
80002326:	20 1d       	sub	sp,4
80002328:	48 86       	lddpc	r6,80002348 <mavlink_msg_global_position_int_get_hdg+0x28>
8000232a:	1e 26       	rsub	r6,pc
8000232c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  26);
80002330:	31 ab       	mov	r11,26
80002332:	ee fc ff fc 	ld.w	r12,r7[-4]
80002336:	cd 5e       	rcall	800020e0 <_MAV_RETURN_uint16_t>
80002338:	18 98       	mov	r8,r12
8000233a:	5c 88       	casts.h	r8
8000233c:	5c 88       	casts.h	r8
}
8000233e:	10 9c       	mov	r12,r8
80002340:	2f fd       	sub	sp,-4
80002342:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002346:	00 00       	add	r0,r0
80002348:	80 00       	ld.sh	r0,r0[0x0]
8000234a:	21 ae       	sub	lr,26

8000234c <mavlink_msg_global_position_int_decode>:
 *
 * @param msg The message to decode
 * @param global_position_int C-struct to decode the message contents into
 */
static inline void mavlink_msg_global_position_int_decode(const mavlink_message_t* msg, mavlink_global_position_int_t* global_position_int)
{
8000234c:	eb cd 40 c0 	pushm	r6-r7,lr
80002350:	1a 97       	mov	r7,sp
80002352:	20 2d       	sub	sp,8
80002354:	4a 76       	lddpc	r6,800023f0 <mavlink_msg_global_position_int_decode+0xa4>
80002356:	1e 26       	rsub	r6,pc
80002358:	ef 4c ff fc 	st.w	r7[-4],r12
8000235c:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	global_position_int->time_boot_ms = mavlink_msg_global_position_int_get_time_boot_ms(msg);
80002360:	ee fc ff fc 	ld.w	r12,r7[-4]
80002364:	c3 ef       	rcall	800021e0 <mavlink_msg_global_position_int_get_time_boot_ms>
80002366:	18 99       	mov	r9,r12
80002368:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000236c:	91 09       	st.w	r8[0x0],r9
	global_position_int->lat = mavlink_msg_global_position_int_get_lat(msg);
8000236e:	ee fc ff fc 	ld.w	r12,r7[-4]
80002372:	c4 bf       	rcall	80002208 <mavlink_msg_global_position_int_get_lat>
80002374:	18 99       	mov	r9,r12
80002376:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000237a:	91 19       	st.w	r8[0x4],r9
	global_position_int->lon = mavlink_msg_global_position_int_get_lon(msg);
8000237c:	ee fc ff fc 	ld.w	r12,r7[-4]
80002380:	c5 8f       	rcall	80002230 <mavlink_msg_global_position_int_get_lon>
80002382:	18 99       	mov	r9,r12
80002384:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002388:	91 29       	st.w	r8[0x8],r9
	global_position_int->alt = mavlink_msg_global_position_int_get_alt(msg);
8000238a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000238e:	c6 5f       	rcall	80002258 <mavlink_msg_global_position_int_get_alt>
80002390:	18 99       	mov	r9,r12
80002392:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002396:	91 39       	st.w	r8[0xc],r9
	global_position_int->relative_alt = mavlink_msg_global_position_int_get_relative_alt(msg);
80002398:	ee fc ff fc 	ld.w	r12,r7[-4]
8000239c:	c7 2f       	rcall	80002280 <mavlink_msg_global_position_int_get_relative_alt>
8000239e:	18 99       	mov	r9,r12
800023a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023a4:	91 49       	st.w	r8[0x10],r9
	global_position_int->vx = mavlink_msg_global_position_int_get_vx(msg);
800023a6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023aa:	c7 ff       	rcall	800022a8 <mavlink_msg_global_position_int_get_vx>
800023ac:	18 98       	mov	r8,r12
800023ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023b2:	f3 58 00 14 	st.h	r9[20],r8
	global_position_int->vy = mavlink_msg_global_position_int_get_vy(msg);
800023b6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023ba:	c8 bf       	rcall	800022d0 <mavlink_msg_global_position_int_get_vy>
800023bc:	18 98       	mov	r8,r12
800023be:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023c2:	f3 58 00 16 	st.h	r9[22],r8
	global_position_int->vz = mavlink_msg_global_position_int_get_vz(msg);
800023c6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023ca:	c9 7f       	rcall	800022f8 <mavlink_msg_global_position_int_get_vz>
800023cc:	18 98       	mov	r8,r12
800023ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023d2:	f3 58 00 18 	st.h	r9[24],r8
	global_position_int->hdg = mavlink_msg_global_position_int_get_hdg(msg);
800023d6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023da:	ca 3f       	rcall	80002320 <mavlink_msg_global_position_int_get_hdg>
800023dc:	18 98       	mov	r8,r12
800023de:	5c 88       	casts.h	r8
800023e0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023e4:	f3 58 00 1a 	st.h	r9[26],r8
#else
	memcpy(global_position_int, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN);
#endif
}
800023e8:	2f ed       	sub	sp,-8
800023ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800023ee:	00 00       	add	r0,r0
800023f0:	80 00       	ld.sh	r0,r0[0x0]
800023f2:	21 da       	sub	r10,29

800023f4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800023f4:	eb cd 40 c0 	pushm	r6-r7,lr
800023f8:	1a 97       	mov	r7,sp
800023fa:	20 6d       	sub	sp,24
800023fc:	49 e6       	lddpc	r6,80002474 <interpolate+0x80>
800023fe:	1e 26       	rsub	r6,pc
80002400:	ef 4c ff f8 	st.w	r7[-8],r12
80002404:	ef 4b ff f4 	st.w	r7[-12],r11
80002408:	ef 4a ff f0 	st.w	r7[-16],r10
8000240c:	ef 49 ff ec 	st.w	r7[-20],r9
80002410:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80002414:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002418:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000241c:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80002420:	c0 41       	brne	80002428 <interpolate+0x34>
	{
		return y1;
80002422:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002426:	c2 38       	rjmp	8000246c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80002428:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000242c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002430:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80002434:	ee fa ff f8 	ld.w	r10,r7[-8]
80002438:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000243c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80002440:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002444:	ee fa ff f0 	ld.w	r10,r7[-16]
80002448:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000244c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002450:	12 9b       	mov	r11,r9
80002452:	10 9c       	mov	r12,r8
80002454:	f0 16 00 08 	mcall	r6[32]
80002458:	18 98       	mov	r8,r12
8000245a:	10 99       	mov	r9,r8
8000245c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002460:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80002464:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80002468:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000246c:	10 9c       	mov	r12,r8
8000246e:	2f ad       	sub	sp,-24
80002470:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002474:	80 00       	ld.sh	r0,r0[0x0]
80002476:	22 82       	sub	r2,40

80002478 <init_neighbors>:
#include <stdbool.h>

central_data_t *centralData;

void init_neighbors()
{
80002478:	eb cd 40 c0 	pushm	r6-r7,lr
8000247c:	1a 97       	mov	r7,sp
8000247e:	48 96       	lddpc	r6,800024a0 <init_neighbors+0x28>
80002480:	1e 26       	rsub	r6,pc
	centralData = get_central_data();
80002482:	f0 16 00 33 	mcall	r6[204]
80002486:	18 99       	mov	r9,r12
80002488:	ec f8 00 00 	ld.w	r8,r6[0]
8000248c:	91 09       	st.w	r8[0x0],r9
	centralData->number_of_neighbors = 0;
8000248e:	ec f8 00 00 	ld.w	r8,r6[0]
80002492:	70 09       	ld.w	r9,r8[0x0]
80002494:	30 08       	mov	r8,0
80002496:	f3 68 10 fc 	st.b	r9[4348],r8
}
8000249a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000249e:	00 00       	add	r0,r0
800024a0:	80 00       	ld.sh	r0,r0[0x0]
800024a2:	23 04       	sub	r4,48
800024a4:	54 68       	stdsp	sp[0x118],r8
800024a6:	65 72       	ld.w	r2,r2[0x5c]
800024a8:	65 20       	ld.w	r0,r2[0x48]
800024aa:	69 73       	ld.w	r3,r4[0x5c]
800024ac:	20 6d       	sub	sp,24
800024ae:	6f 72       	ld.w	r2,r7[0x5c]
800024b0:	65 20       	ld.w	r0,r2[0x48]
800024b2:	6e 65       	ld.w	r5,r7[0x18]
800024b4:	69 67       	ld.w	r7,r4[0x58]
800024b6:	68 62       	ld.w	r2,r4[0x18]
800024b8:	6f 72       	ld.w	r2,r7[0x5c]
800024ba:	73 20       	ld.w	r0,r9[0x48]
800024bc:	74 68       	ld.w	r8,r10[0x18]
800024be:	61 6e       	ld.w	lr,r0[0x58]
800024c0:	20 70       	sub	r0,7
800024c2:	6c 61       	ld.w	r1,r6[0x18]
800024c4:	6e 6e       	ld.w	lr,r7[0x18]
800024c6:	65 64       	ld.w	r4,r2[0x58]
800024c8:	21 0a       	sub	r10,16
	...

800024cc <read_msg_from_neighbors>:


void read_msg_from_neighbors(Mavlink_Received_t* rec)
{
800024cc:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800024d0:	1a 97       	mov	r7,sp
800024d2:	fa cd 00 a0 	sub	sp,sp,160
800024d6:	fe f6 03 66 	ld.w	r6,pc[870]
800024da:	1e 26       	rsub	r6,pc
800024dc:	ef 4c ff 90 	st.w	r7[-112],r12
	uint8_t i;
	
	mavlink_global_position_int_t packet;
	mavlink_msg_global_position_int_decode(&rec->msg,&packet);
800024e0:	ee f8 ff 90 	ld.w	r8,r7[-112]
800024e4:	ee c9 00 20 	sub	r9,r7,32
800024e8:	12 9b       	mov	r11,r9
800024ea:	10 9c       	mov	r12,r8
800024ec:	c3 0f       	rcall	8000234c <mavlink_msg_global_position_int_decode>
	//Check if coming from a neighbor
	
	if (rec->msg.sysid != mavlink_system.sysid)
800024ee:	ee f8 ff 90 	ld.w	r8,r7[-112]
800024f2:	11 d9       	ld.ub	r9,r8[0x5]
800024f4:	ec f8 00 70 	ld.w	r8,r6[112]
800024f8:	11 88       	ld.ub	r8,r8[0x0]
800024fa:	f0 09 18 00 	cp.b	r9,r8
800024fe:	e0 80 01 9c 	breq	80002836 <read_msg_from_neighbors+0x36a>
	{
		global_position_t globalPosNeighbor;
		local_coordinates_t localPosNeighbor;
		uint8_t actualNeighbor;
		
		globalPosNeighbor.longitude = packet.lon / 10000000.0;
80002502:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002506:	10 9c       	mov	r12,r8
80002508:	f0 16 00 1a 	mcall	r6[104]
8000250c:	30 08       	mov	r8,0
8000250e:	e0 69 12 d0 	mov	r9,4816
80002512:	ea 19 41 63 	orh	r9,0x4163
80002516:	f0 16 00 0c 	mcall	r6[48]
8000251a:	14 98       	mov	r8,r10
8000251c:	16 99       	mov	r9,r11
8000251e:	ee e9 ff c4 	st.d	r7[-60],r8
		globalPosNeighbor.latitude = packet.lat / 10000000.0;
80002522:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002526:	10 9c       	mov	r12,r8
80002528:	f0 16 00 1a 	mcall	r6[104]
8000252c:	30 08       	mov	r8,0
8000252e:	e0 69 12 d0 	mov	r9,4816
80002532:	ea 19 41 63 	orh	r9,0x4163
80002536:	f0 16 00 0c 	mcall	r6[48]
8000253a:	14 98       	mov	r8,r10
8000253c:	16 99       	mov	r9,r11
8000253e:	ee e9 ff cc 	st.d	r7[-52],r8
		globalPosNeighbor.altitude = packet.alt / 1000.0;
80002542:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002546:	10 9c       	mov	r12,r8
80002548:	f0 16 00 1a 	mcall	r6[104]
8000254c:	30 08       	mov	r8,0
8000254e:	e0 69 40 00 	mov	r9,16384
80002552:	ea 19 40 8f 	orh	r9,0x408f
80002556:	f0 16 00 0c 	mcall	r6[48]
8000255a:	14 98       	mov	r8,r10
8000255c:	16 99       	mov	r9,r11
8000255e:	10 9a       	mov	r10,r8
80002560:	12 9b       	mov	r11,r9
80002562:	f0 16 00 09 	mcall	r6[36]
80002566:	18 98       	mov	r8,r12
80002568:	ef 48 ff d4 	st.w	r7[-44],r8
		globalPosNeighbor.heading = packet.hdg;
8000256c:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80002570:	5c 78       	castu.h	r8
80002572:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
80002576:	ef 48 ff d8 	st.w	r7[-40],r8
		
		localPosNeighbor = global_to_local_position(globalPosNeighbor,centralData->position_estimator.localPosition.origin);
8000257a:	ec f8 00 00 	ld.w	r8,r6[0]
8000257e:	70 08       	ld.w	r8,r8[0x0]
80002580:	ee cc 00 a0 	sub	r12,r7,160
80002584:	20 7d       	sub	sp,28
80002586:	1a 99       	mov	r9,sp
80002588:	12 9a       	mov	r10,r9
8000258a:	f0 cb f2 54 	sub	r11,r8,-3500
8000258e:	f4 c8 00 00 	sub	r8,r10,0
80002592:	f6 c9 00 00 	sub	r9,r11,0
80002596:	72 0e       	ld.w	lr,r9[0x0]
80002598:	91 0e       	st.w	r8[0x0],lr
8000259a:	72 1e       	ld.w	lr,r9[0x4]
8000259c:	91 1e       	st.w	r8[0x4],lr
8000259e:	72 2e       	ld.w	lr,r9[0x8]
800025a0:	91 2e       	st.w	r8[0x8],lr
800025a2:	72 39       	ld.w	r9,r9[0xc]
800025a4:	91 39       	st.w	r8[0xc],r9
800025a6:	f6 e8 00 10 	ld.d	r8,r11[16]
800025aa:	f4 e9 00 10 	st.d	r10[16],r8
800025ae:	76 68       	ld.w	r8,r11[0x18]
800025b0:	95 68       	st.w	r10[0x18],r8
800025b2:	20 7d       	sub	sp,28
800025b4:	1a 98       	mov	r8,sp
800025b6:	10 9a       	mov	r10,r8
800025b8:	ee cb 00 3c 	sub	r11,r7,60
800025bc:	f4 c8 00 00 	sub	r8,r10,0
800025c0:	f6 c9 00 00 	sub	r9,r11,0
800025c4:	72 0e       	ld.w	lr,r9[0x0]
800025c6:	91 0e       	st.w	r8[0x0],lr
800025c8:	72 1e       	ld.w	lr,r9[0x4]
800025ca:	91 1e       	st.w	r8[0x4],lr
800025cc:	72 2e       	ld.w	lr,r9[0x8]
800025ce:	91 2e       	st.w	r8[0x8],lr
800025d0:	72 39       	ld.w	r9,r9[0xc]
800025d2:	91 39       	st.w	r8[0xc],r9
800025d4:	f6 e8 00 10 	ld.d	r8,r11[16]
800025d8:	f4 e9 00 10 	st.d	r10[16],r8
800025dc:	76 68       	ld.w	r8,r11[0x18]
800025de:	95 68       	st.w	r10[0x18],r8
800025e0:	f0 16 00 7a 	mcall	r6[488]
800025e4:	2f 2d       	sub	sp,-56
800025e6:	ee cb 00 6c 	sub	r11,r7,108
800025ea:	ee ca 00 a0 	sub	r10,r7,160
800025ee:	f6 c8 00 00 	sub	r8,r11,0
800025f2:	f4 c9 00 00 	sub	r9,r10,0
800025f6:	72 0c       	ld.w	r12,r9[0x0]
800025f8:	91 0c       	st.w	r8[0x0],r12
800025fa:	72 1c       	ld.w	r12,r9[0x4]
800025fc:	91 1c       	st.w	r8[0x4],r12
800025fe:	72 2c       	ld.w	r12,r9[0x8]
80002600:	91 2c       	st.w	r8[0x8],r12
80002602:	72 39       	ld.w	r9,r9[0xc]
80002604:	91 39       	st.w	r8[0xc],r9
80002606:	f6 c8 ff f0 	sub	r8,r11,-16
8000260a:	f4 c9 ff f0 	sub	r9,r10,-16
8000260e:	72 0c       	ld.w	r12,r9[0x0]
80002610:	91 0c       	st.w	r8[0x0],r12
80002612:	72 1c       	ld.w	r12,r9[0x4]
80002614:	91 1c       	st.w	r8[0x4],r12
80002616:	72 2c       	ld.w	r12,r9[0x8]
80002618:	91 2c       	st.w	r8[0x8],r12
8000261a:	72 39       	ld.w	r9,r9[0xc]
8000261c:	91 39       	st.w	r8[0xc],r9
8000261e:	f6 c8 ff e0 	sub	r8,r11,-32
80002622:	f4 c9 ff e0 	sub	r9,r10,-32
80002626:	72 0a       	ld.w	r10,r9[0x0]
80002628:	91 0a       	st.w	r8[0x0],r10
8000262a:	72 1a       	ld.w	r10,r9[0x4]
8000262c:	91 1a       	st.w	r8[0x4],r10
8000262e:	72 2a       	ld.w	r10,r9[0x8]
80002630:	91 2a       	st.w	r8[0x8],r10
80002632:	72 39       	ld.w	r9,r9[0xc]
80002634:	91 39       	st.w	r8[0xc],r9
		
		bool ID_found = false;
80002636:	30 08       	mov	r8,0
80002638:	ef 68 ff ff 	st.b	r7[-1],r8
		i = 0;
8000263c:	30 08       	mov	r8,0
8000263e:	ef 68 ff fd 	st.b	r7[-3],r8
		while ((!ID_found)&&(i<centralData->number_of_neighbors))
80002642:	c1 b8       	rjmp	80002678 <read_msg_from_neighbors+0x1ac>
		{
			if (rec->msg.sysid == centralData->listNeighbors[i].neighborID)
80002644:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002648:	11 d9       	ld.ub	r9,r8[0x5]
8000264a:	ec f8 00 00 	ld.w	r8,r6[0]
8000264e:	70 0a       	ld.w	r10,r8[0x0]
80002650:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80002654:	a5 78       	lsl	r8,0x5
80002656:	f4 08 00 08 	add	r8,r10,r8
8000265a:	f0 c8 ee fc 	sub	r8,r8,-4356
8000265e:	11 88       	ld.ub	r8,r8[0x0]
80002660:	f0 09 18 00 	cp.b	r9,r8
80002664:	c0 51       	brne	8000266e <read_msg_from_neighbors+0x1a2>
			{
				ID_found = true;
80002666:	30 18       	mov	r8,1
80002668:	ef 68 ff ff 	st.b	r7[-1],r8
8000266c:	c0 68       	rjmp	80002678 <read_msg_from_neighbors+0x1ac>
			}else{
				i++;
8000266e:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80002672:	2f f8       	sub	r8,-1
80002674:	ef 68 ff fd 	st.b	r7[-3],r8
		
		localPosNeighbor = global_to_local_position(globalPosNeighbor,centralData->position_estimator.localPosition.origin);
		
		bool ID_found = false;
		i = 0;
		while ((!ID_found)&&(i<centralData->number_of_neighbors))
80002678:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000267c:	ec 18 00 01 	eorl	r8,0x1
80002680:	5c 58       	castu.b	r8
80002682:	c0 b0       	breq	80002698 <read_msg_from_neighbors+0x1cc>
80002684:	ec f8 00 00 	ld.w	r8,r6[0]
80002688:	70 08       	ld.w	r8,r8[0x0]
8000268a:	f1 38 10 fc 	ld.ub	r8,r8[4348]
8000268e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80002692:	f0 09 18 00 	cp.b	r9,r8
80002696:	cd 73       	brcs	80002644 <read_msg_from_neighbors+0x178>
			//{
				//ID_found = true;
			//}
		}
		
		if (i>=centralData->number_of_neighbors)
80002698:	ec f8 00 00 	ld.w	r8,r6[0]
8000269c:	70 08       	ld.w	r8,r8[0x0]
8000269e:	f1 38 10 fc 	ld.ub	r8,r8[4348]
800026a2:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800026a6:	f0 09 18 00 	cp.b	r9,r8
800026aa:	c2 93       	brcs	800026fc <read_msg_from_neighbors+0x230>
		{
			if (centralData->number_of_neighbors < MAX_NUM_NEIGHBORS)
800026ac:	ec f8 00 00 	ld.w	r8,r6[0]
800026b0:	70 08       	ld.w	r8,r8[0x0]
800026b2:	f1 39 10 fc 	ld.ub	r9,r8[4348]
800026b6:	30 e8       	mov	r8,14
800026b8:	f0 09 18 00 	cp.b	r9,r8
800026bc:	e0 8b 00 13 	brhi	800026e2 <read_msg_from_neighbors+0x216>
			{
				actualNeighbor = centralData->number_of_neighbors;
800026c0:	ec f8 00 00 	ld.w	r8,r6[0]
800026c4:	70 08       	ld.w	r8,r8[0x0]
800026c6:	f1 38 10 fc 	ld.ub	r8,r8[4348]
800026ca:	ef 68 ff fe 	st.b	r7[-2],r8
				centralData->number_of_neighbors++;
800026ce:	ec f8 00 00 	ld.w	r8,r6[0]
800026d2:	70 08       	ld.w	r8,r8[0x0]
800026d4:	f1 39 10 fc 	ld.ub	r9,r8[4348]
800026d8:	2f f9       	sub	r9,-1
800026da:	5c 59       	castu.b	r9
800026dc:	f1 69 10 fc 	st.b	r8[4348],r9
800026e0:	c1 28       	rjmp	80002704 <read_msg_from_neighbors+0x238>
			}else{
				// This case shouldn't happen
				dbg_print("There is more neighbors than planned!\n");
800026e2:	fe cc 02 3e 	sub	r12,pc,574
800026e6:	f0 16 00 01 	mcall	r6[4]
				actualNeighbor = centralData->number_of_neighbors-1;
800026ea:	ec f8 00 00 	ld.w	r8,r6[0]
800026ee:	70 08       	ld.w	r8,r8[0x0]
800026f0:	f1 38 10 fc 	ld.ub	r8,r8[4348]
800026f4:	20 18       	sub	r8,1
800026f6:	ef 68 ff fe 	st.b	r7[-2],r8
800026fa:	c0 58       	rjmp	80002704 <read_msg_from_neighbors+0x238>
			}
		}else{
			actualNeighbor = i;
800026fc:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80002700:	ef 68 ff fe 	st.b	r7[-2],r8
		}
		
		
		
		centralData->listNeighbors[actualNeighbor].neighborID = rec->msg.sysid;
80002704:	ec f8 00 00 	ld.w	r8,r6[0]
80002708:	70 0a       	ld.w	r10,r8[0x0]
8000270a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000270e:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002712:	11 d8       	ld.ub	r8,r8[0x5]
80002714:	a5 79       	lsl	r9,0x5
80002716:	f4 09 00 09 	add	r9,r10,r9
8000271a:	f2 c9 ee fc 	sub	r9,r9,-4356
8000271e:	b2 88       	st.b	r9[0x0],r8
		
		for (i=0;i<3;i++)
80002720:	30 08       	mov	r8,0
80002722:	ef 68 ff fd 	st.b	r7[-3],r8
80002726:	c1 b8       	rjmp	8000275c <read_msg_from_neighbors+0x290>
		{
			centralData->listNeighbors[actualNeighbor].position[i] = localPosNeighbor.pos[i];
80002728:	ec f8 00 00 	ld.w	r8,r6[0]
8000272c:	70 09       	ld.w	r9,r8[0x0]
8000272e:	ef 3c ff fe 	ld.ub	r12,r7[-2]
80002732:	ef 3b ff fd 	ld.ub	r11,r7[-3]
80002736:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000273a:	a3 68       	lsl	r8,0x2
8000273c:	ee 08 00 08 	add	r8,r7,r8
80002740:	f0 fa ff 94 	ld.w	r10,r8[-108]
80002744:	f8 08 15 03 	lsl	r8,r12,0x3
80002748:	16 08       	add	r8,r11
8000274a:	f0 c8 fb be 	sub	r8,r8,-1090
8000274e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
		
		
		
		centralData->listNeighbors[actualNeighbor].neighborID = rec->msg.sysid;
		
		for (i=0;i<3;i++)
80002752:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80002756:	2f f8       	sub	r8,-1
80002758:	ef 68 ff fd 	st.b	r7[-3],r8
8000275c:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80002760:	30 28       	mov	r8,2
80002762:	f0 09 18 00 	cp.b	r9,r8
80002766:	fe 98 ff e1 	brls	80002728 <read_msg_from_neighbors+0x25c>
		{
			centralData->listNeighbors[actualNeighbor].position[i] = localPosNeighbor.pos[i];
		}
		centralData->listNeighbors[actualNeighbor].velocity[X] = packet.vx / 100.0;
8000276a:	ec f8 00 00 	ld.w	r8,r6[0]
8000276e:	70 05       	ld.w	r5,r8[0x0]
80002770:	ef 33 ff fe 	ld.ub	r3,r7[-2]
80002774:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80002778:	10 9c       	mov	r12,r8
8000277a:	f0 16 00 1a 	mcall	r6[104]
8000277e:	30 08       	mov	r8,0
80002780:	fc 19 40 59 	movh	r9,0x4059
80002784:	f0 16 00 0c 	mcall	r6[48]
80002788:	14 98       	mov	r8,r10
8000278a:	16 99       	mov	r9,r11
8000278c:	10 9a       	mov	r10,r8
8000278e:	12 9b       	mov	r11,r9
80002790:	f0 16 00 09 	mcall	r6[36]
80002794:	18 99       	mov	r9,r12
80002796:	e6 08 15 01 	lsl	r8,r3,0x1
8000279a:	2f f8       	sub	r8,-1
8000279c:	a5 68       	lsl	r8,0x4
8000279e:	ea 08 00 08 	add	r8,r5,r8
800027a2:	f0 c8 ee fc 	sub	r8,r8,-4356
800027a6:	91 09       	st.w	r8[0x0],r9
		centralData->listNeighbors[actualNeighbor].velocity[Y] = packet.vy / 100.0;
800027a8:	ec f8 00 00 	ld.w	r8,r6[0]
800027ac:	70 05       	ld.w	r5,r8[0x0]
800027ae:	ef 33 ff fe 	ld.ub	r3,r7[-2]
800027b2:	ef 08 ff f6 	ld.sh	r8,r7[-10]
800027b6:	10 9c       	mov	r12,r8
800027b8:	f0 16 00 1a 	mcall	r6[104]
800027bc:	30 08       	mov	r8,0
800027be:	fc 19 40 59 	movh	r9,0x4059
800027c2:	f0 16 00 0c 	mcall	r6[48]
800027c6:	14 98       	mov	r8,r10
800027c8:	16 99       	mov	r9,r11
800027ca:	10 9a       	mov	r10,r8
800027cc:	12 9b       	mov	r11,r9
800027ce:	f0 16 00 09 	mcall	r6[36]
800027d2:	18 99       	mov	r9,r12
800027d4:	e6 08 15 05 	lsl	r8,r3,0x5
800027d8:	ea 08 00 08 	add	r8,r5,r8
800027dc:	f0 c8 ee e8 	sub	r8,r8,-4376
800027e0:	91 09       	st.w	r8[0x0],r9
		centralData->listNeighbors[actualNeighbor].velocity[Z] = packet.vz / 100.0;
800027e2:	ec f8 00 00 	ld.w	r8,r6[0]
800027e6:	70 05       	ld.w	r5,r8[0x0]
800027e8:	ef 33 ff fe 	ld.ub	r3,r7[-2]
800027ec:	ef 08 ff f8 	ld.sh	r8,r7[-8]
800027f0:	10 9c       	mov	r12,r8
800027f2:	f0 16 00 1a 	mcall	r6[104]
800027f6:	30 08       	mov	r8,0
800027f8:	fc 19 40 59 	movh	r9,0x4059
800027fc:	f0 16 00 0c 	mcall	r6[48]
80002800:	14 98       	mov	r8,r10
80002802:	16 99       	mov	r9,r11
80002804:	10 9a       	mov	r10,r8
80002806:	12 9b       	mov	r11,r9
80002808:	f0 16 00 09 	mcall	r6[36]
8000280c:	18 99       	mov	r9,r12
8000280e:	e6 08 15 05 	lsl	r8,r3,0x5
80002812:	ea 08 00 08 	add	r8,r5,r8
80002816:	f0 c8 ee e4 	sub	r8,r8,-4380
8000281a:	91 09       	st.w	r8[0x0],r9
		
		centralData->listNeighbors[actualNeighbor].size = SIZE_VHC_ORCA;
8000281c:	ec f8 00 00 	ld.w	r8,r6[0]
80002820:	70 09       	ld.w	r9,r8[0x0]
80002822:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80002826:	f0 c8 ff 77 	sub	r8,r8,-137
8000282a:	a5 78       	lsl	r8,0x5
8000282c:	f2 08 00 08 	add	r8,r9,r8
80002830:	fc 19 40 a0 	movh	r9,0x40a0
80002834:	91 09       	st.w	r8[0x0],r9
		//dbg_print(" with velocity ");
		//dbg_print_vector(centralData->listNeighbors[actualNeighbor].velocity,2);
		//dbg_print("\n");
		
	}
80002836:	2d 8d       	sub	sp,-160
80002838:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000283c:	80 00       	ld.sh	r0,r0[0x0]
8000283e:	23 5e       	sub	lr,53

80002840 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80002840:	eb cd 40 c0 	pushm	r6-r7,lr
80002844:	1a 97       	mov	r7,sp
80002846:	20 3d       	sub	sp,12
80002848:	49 06       	lddpc	r6,80002888 <mav_array_memcpy+0x48>
8000284a:	1e 26       	rsub	r6,pc
8000284c:	ef 4c ff fc 	st.w	r7[-4],r12
80002850:	ef 4b ff f8 	st.w	r7[-8],r11
80002854:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80002858:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000285c:	58 08       	cp.w	r8,0
8000285e:	c0 91       	brne	80002870 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80002860:	ee fa ff f4 	ld.w	r10,r7[-12]
80002864:	30 0b       	mov	r11,0
80002866:	ee fc ff fc 	ld.w	r12,r7[-4]
8000286a:	f0 16 00 31 	mcall	r6[196]
8000286e:	c0 98       	rjmp	80002880 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80002870:	ee fa ff f4 	ld.w	r10,r7[-12]
80002874:	ee fb ff f8 	ld.w	r11,r7[-8]
80002878:	ee fc ff fc 	ld.w	r12,r7[-4]
8000287c:	f0 16 00 21 	mcall	r6[132]
	}
}
80002880:	2f dd       	sub	sp,-12
80002882:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002886:	00 00       	add	r0,r0
80002888:	80 00       	ld.sh	r0,r0[0x0]
8000288a:	26 ce       	sub	lr,108

8000288c <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8000288c:	eb cd 40 80 	pushm	r7,lr
80002890:	1a 97       	mov	r7,sp
80002892:	20 3d       	sub	sp,12
80002894:	ef 4c ff f8 	st.w	r7[-8],r12
80002898:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8000289c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028a0:	70 09       	ld.w	r9,r8[0x0]
800028a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028a6:	70 08       	ld.w	r8,r8[0x0]
800028a8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800028ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028b0:	2f c8       	sub	r8,-4
800028b2:	70 0a       	ld.w	r10,r8[0x0]
800028b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028b8:	2f c8       	sub	r8,-4
800028ba:	70 08       	ld.w	r8,r8[0x0]
800028bc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800028c0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800028c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028c8:	2f 88       	sub	r8,-8
800028ca:	70 0a       	ld.w	r10,r8[0x0]
800028cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800028d0:	2f 88       	sub	r8,-8
800028d2:	70 08       	ld.w	r8,r8[0x0]
800028d4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800028d8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800028dc:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
800028e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800028e4:	10 9c       	mov	r12,r8
800028e6:	2f dd       	sub	sp,-12
800028e8:	e3 cd 80 80 	ldm	sp++,r7,pc

800028ec <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
800028ec:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800028f0:	1a 97       	mov	r7,sp
800028f2:	20 7d       	sub	sp,28
800028f4:	4b d6       	lddpc	r6,800029e8 <quat_multi+0xfc>
800028f6:	1e 26       	rsub	r6,pc
800028f8:	ee c8 ff ec 	sub	r8,r7,-20
800028fc:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
800028fe:	70 2a       	ld.w	r10,r8[0x8]
80002900:	70 79       	ld.w	r9,r8[0x1c]
80002902:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80002906:	70 3b       	ld.w	r11,r8[0xc]
80002908:	70 69       	ld.w	r9,r8[0x18]
8000290a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000290e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002912:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
80002916:	70 3a       	ld.w	r10,r8[0xc]
80002918:	70 59       	ld.w	r9,r8[0x14]
8000291a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000291e:	70 1b       	ld.w	r11,r8[0x4]
80002920:	70 79       	ld.w	r9,r8[0x1c]
80002922:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80002926:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000292a:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8000292e:	70 1a       	ld.w	r10,r8[0x4]
80002930:	70 69       	ld.w	r9,r8[0x18]
80002932:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80002936:	70 2b       	ld.w	r11,r8[0x8]
80002938:	70 59       	ld.w	r9,r8[0x14]
8000293a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000293e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002942:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
80002946:	70 4a       	ld.w	r10,r8[0x10]
80002948:	70 19       	ld.w	r9,r8[0x4]
8000294a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000294e:	70 0b       	ld.w	r11,r8[0x0]
80002950:	70 59       	ld.w	r9,r8[0x14]
80002952:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80002956:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000295a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000295e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80002962:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
80002966:	70 4a       	ld.w	r10,r8[0x10]
80002968:	70 29       	ld.w	r9,r8[0x8]
8000296a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000296e:	70 0b       	ld.w	r11,r8[0x0]
80002970:	70 69       	ld.w	r9,r8[0x18]
80002972:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80002976:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000297a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000297e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80002982:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
80002986:	70 4a       	ld.w	r10,r8[0x10]
80002988:	70 39       	ld.w	r9,r8[0xc]
8000298a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000298e:	70 0b       	ld.w	r11,r8[0x0]
80002990:	70 79       	ld.w	r9,r8[0x1c]
80002992:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80002996:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000299a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000299e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800029a2:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
800029a6:	70 0a       	ld.w	r10,r8[0x0]
800029a8:	70 49       	ld.w	r9,r8[0x10]
800029aa:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
800029ae:	f0 c9 ff f0 	sub	r9,r8,-16
800029b2:	2f c9       	sub	r9,-4
800029b4:	2f c8       	sub	r8,-4
800029b6:	12 9b       	mov	r11,r9
800029b8:	10 9c       	mov	r12,r8
800029ba:	c6 9f       	rcall	8000288c <scalar_product>
800029bc:	18 98       	mov	r8,r12
800029be:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
800029c2:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
800029c6:	0a 98       	mov	r8,r5
800029c8:	ee c9 00 1c 	sub	r9,r7,28
800029cc:	20 08       	sub	r8,0
800029ce:	20 09       	sub	r9,0
800029d0:	72 0a       	ld.w	r10,r9[0x0]
800029d2:	91 0a       	st.w	r8[0x0],r10
800029d4:	72 1a       	ld.w	r10,r9[0x4]
800029d6:	91 1a       	st.w	r8[0x4],r10
800029d8:	72 2a       	ld.w	r10,r9[0x8]
800029da:	91 2a       	st.w	r8[0x8],r10
800029dc:	72 39       	ld.w	r9,r9[0xc]
800029de:	91 39       	st.w	r8[0xc],r9
}
800029e0:	0a 9c       	mov	r12,r5
800029e2:	2f 9d       	sub	sp,-28
800029e4:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800029e8:	80 00       	ld.sh	r0,r0[0x0]
800029ea:	27 7a       	sub	r10,119

800029ec <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
800029ec:	eb cd 40 80 	pushm	r7,lr
800029f0:	1a 97       	mov	r7,sp
800029f2:	20 5d       	sub	sp,20
800029f4:	ee c9 ff f8 	sub	r9,r7,-8
800029f8:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
800029fa:	72 08       	ld.w	r8,r9[0x0]
800029fc:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
80002a00:	30 08       	mov	r8,0
80002a02:	ef 48 ff fc 	st.w	r7[-4],r8
80002a06:	c1 58       	rjmp	80002a30 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
80002a08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a0c:	ee fb ff fc 	ld.w	r11,r7[-4]
80002a10:	2f fb       	sub	r11,-1
80002a12:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
80002a16:	ee 1b 80 00 	eorh	r11,0x8000
80002a1a:	2f f8       	sub	r8,-1
80002a1c:	a3 68       	lsl	r8,0x2
80002a1e:	ee 08 00 08 	add	r8,r7,r8
80002a22:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
80002a26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a2a:	2f f8       	sub	r8,-1
80002a2c:	ef 48 ff fc 	st.w	r7[-4],r8
80002a30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a34:	58 28       	cp.w	r8,2
80002a36:	fe 9a ff e9 	brle	80002a08 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
80002a3a:	14 98       	mov	r8,r10
80002a3c:	ee c9 00 14 	sub	r9,r7,20
80002a40:	20 08       	sub	r8,0
80002a42:	20 09       	sub	r9,0
80002a44:	72 0b       	ld.w	r11,r9[0x0]
80002a46:	91 0b       	st.w	r8[0x0],r11
80002a48:	72 1b       	ld.w	r11,r9[0x4]
80002a4a:	91 1b       	st.w	r8[0x4],r11
80002a4c:	72 2b       	ld.w	r11,r9[0x8]
80002a4e:	91 2b       	st.w	r8[0x8],r11
80002a50:	72 39       	ld.w	r9,r9[0xc]
80002a52:	91 39       	st.w	r8[0xc],r9
}
80002a54:	14 9c       	mov	r12,r10
80002a56:	2f bd       	sub	sp,-20
80002a58:	e3 cd 80 80 	ldm	sp++,r7,pc

80002a5c <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
80002a5c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80002a60:	1a 97       	mov	r7,sp
80002a62:	20 cd       	sub	sp,48
80002a64:	4b c6       	lddpc	r6,80002b54 <quat_global_to_local+0xf8>
80002a66:	1e 26       	rsub	r6,pc
80002a68:	ee c5 ff ec 	sub	r5,r7,-20
80002a6c:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
80002a6e:	ee ca 00 10 	sub	r10,r7,16
80002a72:	20 4d       	sub	sp,16
80002a74:	1a 98       	mov	r8,sp
80002a76:	0a 99       	mov	r9,r5
80002a78:	20 08       	sub	r8,0
80002a7a:	20 09       	sub	r9,0
80002a7c:	72 0b       	ld.w	r11,r9[0x0]
80002a7e:	91 0b       	st.w	r8[0x0],r11
80002a80:	72 1b       	ld.w	r11,r9[0x4]
80002a82:	91 1b       	st.w	r8[0x4],r11
80002a84:	72 2b       	ld.w	r11,r9[0x8]
80002a86:	91 2b       	st.w	r8[0x8],r11
80002a88:	72 39       	ld.w	r9,r9[0xc]
80002a8a:	91 39       	st.w	r8[0xc],r9
80002a8c:	14 9c       	mov	r12,r10
80002a8e:	ca ff       	rcall	800029ec <quat_inv>
80002a90:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
80002a92:	ee ca 00 20 	sub	r10,r7,32
80002a96:	20 4d       	sub	sp,16
80002a98:	1a 98       	mov	r8,sp
80002a9a:	ea c9 ff f0 	sub	r9,r5,-16
80002a9e:	20 08       	sub	r8,0
80002aa0:	20 09       	sub	r9,0
80002aa2:	72 0b       	ld.w	r11,r9[0x0]
80002aa4:	91 0b       	st.w	r8[0x0],r11
80002aa6:	72 1b       	ld.w	r11,r9[0x4]
80002aa8:	91 1b       	st.w	r8[0x4],r11
80002aaa:	72 2b       	ld.w	r11,r9[0x8]
80002aac:	91 2b       	st.w	r8[0x8],r11
80002aae:	72 39       	ld.w	r9,r9[0xc]
80002ab0:	91 39       	st.w	r8[0xc],r9
80002ab2:	20 4d       	sub	sp,16
80002ab4:	1a 98       	mov	r8,sp
80002ab6:	ee c9 00 10 	sub	r9,r7,16
80002aba:	20 08       	sub	r8,0
80002abc:	20 09       	sub	r9,0
80002abe:	72 0b       	ld.w	r11,r9[0x0]
80002ac0:	91 0b       	st.w	r8[0x0],r11
80002ac2:	72 1b       	ld.w	r11,r9[0x4]
80002ac4:	91 1b       	st.w	r8[0x4],r11
80002ac6:	72 2b       	ld.w	r11,r9[0x8]
80002ac8:	91 2b       	st.w	r8[0x8],r11
80002aca:	72 39       	ld.w	r9,r9[0xc]
80002acc:	91 39       	st.w	r8[0xc],r9
80002ace:	14 9c       	mov	r12,r10
80002ad0:	c0 ef       	rcall	800028ec <quat_multi>
80002ad2:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
80002ad4:	ee ca 00 30 	sub	r10,r7,48
80002ad8:	20 4d       	sub	sp,16
80002ada:	1a 98       	mov	r8,sp
80002adc:	0a 99       	mov	r9,r5
80002ade:	20 08       	sub	r8,0
80002ae0:	20 09       	sub	r9,0
80002ae2:	72 0b       	ld.w	r11,r9[0x0]
80002ae4:	91 0b       	st.w	r8[0x0],r11
80002ae6:	72 1b       	ld.w	r11,r9[0x4]
80002ae8:	91 1b       	st.w	r8[0x4],r11
80002aea:	72 2b       	ld.w	r11,r9[0x8]
80002aec:	91 2b       	st.w	r8[0x8],r11
80002aee:	72 39       	ld.w	r9,r9[0xc]
80002af0:	91 39       	st.w	r8[0xc],r9
80002af2:	20 4d       	sub	sp,16
80002af4:	1a 98       	mov	r8,sp
80002af6:	ee c9 00 20 	sub	r9,r7,32
80002afa:	20 08       	sub	r8,0
80002afc:	20 09       	sub	r9,0
80002afe:	72 0b       	ld.w	r11,r9[0x0]
80002b00:	91 0b       	st.w	r8[0x0],r11
80002b02:	72 1b       	ld.w	r11,r9[0x4]
80002b04:	91 1b       	st.w	r8[0x4],r11
80002b06:	72 2b       	ld.w	r11,r9[0x8]
80002b08:	91 2b       	st.w	r8[0x8],r11
80002b0a:	72 39       	ld.w	r9,r9[0xc]
80002b0c:	91 39       	st.w	r8[0xc],r9
80002b0e:	14 9c       	mov	r12,r10
80002b10:	ce ee       	rcall	800028ec <quat_multi>
80002b12:	2f 8d       	sub	sp,-32
80002b14:	ee c8 00 20 	sub	r8,r7,32
80002b18:	ee c9 00 30 	sub	r9,r7,48
80002b1c:	20 08       	sub	r8,0
80002b1e:	20 09       	sub	r9,0
80002b20:	72 0a       	ld.w	r10,r9[0x0]
80002b22:	91 0a       	st.w	r8[0x0],r10
80002b24:	72 1a       	ld.w	r10,r9[0x4]
80002b26:	91 1a       	st.w	r8[0x4],r10
80002b28:	72 2a       	ld.w	r10,r9[0x8]
80002b2a:	91 2a       	st.w	r8[0x8],r10
80002b2c:	72 39       	ld.w	r9,r9[0xc]
80002b2e:	91 39       	st.w	r8[0xc],r9

	return qtmp;
80002b30:	06 98       	mov	r8,r3
80002b32:	ee c9 00 20 	sub	r9,r7,32
80002b36:	20 08       	sub	r8,0
80002b38:	20 09       	sub	r9,0
80002b3a:	72 0a       	ld.w	r10,r9[0x0]
80002b3c:	91 0a       	st.w	r8[0x0],r10
80002b3e:	72 1a       	ld.w	r10,r9[0x4]
80002b40:	91 1a       	st.w	r8[0x4],r10
80002b42:	72 2a       	ld.w	r10,r9[0x8]
80002b44:	91 2a       	st.w	r8[0x8],r10
80002b46:	72 39       	ld.w	r9,r9[0xc]
80002b48:	91 39       	st.w	r8[0xc],r9
}
80002b4a:	06 9c       	mov	r12,r3
80002b4c:	2f 4d       	sub	sp,-48
80002b4e:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80002b52:	00 00       	add	r0,r0
80002b54:	80 00       	ld.sh	r0,r0[0x0]
80002b56:	28 ea       	sub	r10,-114

80002b58 <fast_sqrt>:
	
	return qtmp;
}

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
80002b58:	eb cd 40 c0 	pushm	r6-r7,lr
80002b5c:	1a 97       	mov	r7,sp
80002b5e:	20 2d       	sub	sp,8
80002b60:	4b 26       	lddpc	r6,80002c28 <fast_sqrt+0xd0>
80002b62:	1e 26       	rsub	r6,pc
80002b64:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
80002b68:	30 18       	mov	r8,1
80002b6a:	ee fa ff f8 	ld.w	r10,r7[-8]
80002b6e:	30 09       	mov	r9,0
80002b70:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80002b74:	e0 8c 00 03 	brvs	80002b7a <fast_sqrt+0x22>
80002b78:	c0 25       	brlt	80002b7c <fast_sqrt+0x24>
80002b7a:	30 08       	mov	r8,0
80002b7c:	5c 58       	castu.b	r8
80002b7e:	c0 30       	breq	80002b84 <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
80002b80:	30 08       	mov	r8,0
80002b82:	c4 f8       	rjmp	80002c20 <fast_sqrt+0xc8>
	}
	float result=1.0;
80002b84:	fc 18 3f 80 	movh	r8,0x3f80
80002b88:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002b8c:	ee fb ff fc 	ld.w	r11,r7[-4]
80002b90:	ee fc ff f8 	ld.w	r12,r7[-8]
80002b94:	f0 16 00 08 	mcall	r6[32]
80002b98:	18 98       	mov	r8,r12
80002b9a:	10 99       	mov	r9,r8
80002b9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ba0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002ba4:	fc 18 3f 00 	movh	r8,0x3f00
80002ba8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002bac:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002bb0:	ee fb ff fc 	ld.w	r11,r7[-4]
80002bb4:	ee fc ff f8 	ld.w	r12,r7[-8]
80002bb8:	f0 16 00 08 	mcall	r6[32]
80002bbc:	18 98       	mov	r8,r12
80002bbe:	10 99       	mov	r9,r8
80002bc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002bc4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002bc8:	fc 18 3f 00 	movh	r8,0x3f00
80002bcc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002bd0:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002bd4:	ee fb ff fc 	ld.w	r11,r7[-4]
80002bd8:	ee fc ff f8 	ld.w	r12,r7[-8]
80002bdc:	f0 16 00 08 	mcall	r6[32]
80002be0:	18 98       	mov	r8,r12
80002be2:	10 99       	mov	r9,r8
80002be4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002be8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002bec:	fc 18 3f 00 	movh	r8,0x3f00
80002bf0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002bf4:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002bf8:	ee fb ff fc 	ld.w	r11,r7[-4]
80002bfc:	ee fc ff f8 	ld.w	r12,r7[-8]
80002c00:	f0 16 00 08 	mcall	r6[32]
80002c04:	18 98       	mov	r8,r12
80002c06:	10 99       	mov	r9,r8
80002c08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c0c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002c10:	fc 18 3f 00 	movh	r8,0x3f00
80002c14:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002c18:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
80002c1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80002c20:	10 9c       	mov	r12,r8
80002c22:	2f ed       	sub	sp,-8
80002c24:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c28:	80 00       	ld.sh	r0,r0[0x0]
80002c2a:	29 e6       	sub	r6,-98

80002c2c <vector_norm_sqr>:

float static inline vector_norm_sqr(float u[])
{
80002c2c:	eb cd 40 c0 	pushm	r6-r7,lr
80002c30:	1a 97       	mov	r7,sp
80002c32:	20 2d       	sub	sp,8
80002c34:	48 96       	lddpc	r6,80002c58 <vector_norm_sqr+0x2c>
80002c36:	1e 26       	rsub	r6,pc
80002c38:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
80002c3c:	ee fb ff f8 	ld.w	r11,r7[-8]
80002c40:	ee fc ff f8 	ld.w	r12,r7[-8]
80002c44:	c2 4e       	rcall	8000288c <scalar_product>
80002c46:	18 98       	mov	r8,r12
80002c48:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
80002c4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80002c50:	10 9c       	mov	r12,r8
80002c52:	2f ed       	sub	sp,-8
80002c54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c58:	80 00       	ld.sh	r0,r0[0x0]
80002c5a:	2a ba       	sub	r10,-85

80002c5c <vector_norm>:

float static inline vector_norm(float u[])
{
80002c5c:	eb cd 40 c0 	pushm	r6-r7,lr
80002c60:	1a 97       	mov	r7,sp
80002c62:	20 1d       	sub	sp,4
80002c64:	48 86       	lddpc	r6,80002c84 <vector_norm+0x28>
80002c66:	1e 26       	rsub	r6,pc
80002c68:	ef 4c ff fc 	st.w	r7[-4],r12
	return fast_sqrt(vector_norm_sqr(u));
80002c6c:	ee fc ff fc 	ld.w	r12,r7[-4]
80002c70:	cd ef       	rcall	80002c2c <vector_norm_sqr>
80002c72:	18 98       	mov	r8,r12
80002c74:	10 9c       	mov	r12,r8
80002c76:	c7 1f       	rcall	80002b58 <fast_sqrt>
80002c78:	18 98       	mov	r8,r12
}
80002c7a:	10 9c       	mov	r12,r8
80002c7c:	2f fd       	sub	sp,-4
80002c7e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002c82:	00 00       	add	r0,r0
80002c84:	80 00       	ld.sh	r0,r0[0x0]
80002c86:	2a ea       	sub	r10,-82

80002c88 <f_min>:
	}else{
		return -a;
	}
}

static inline float f_min(const float a, const float b){
80002c88:	eb cd 40 80 	pushm	r7,lr
80002c8c:	1a 97       	mov	r7,sp
80002c8e:	20 2d       	sub	sp,8
80002c90:	ef 4c ff fc 	st.w	r7[-4],r12
80002c94:	ef 4b ff f8 	st.w	r7[-8],r11
	if (a <= b)
80002c98:	30 18       	mov	r8,1
80002c9a:	ee fa ff fc 	ld.w	r10,r7[-4]
80002c9e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002ca2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80002ca6:	e0 8c 00 04 	brvs	80002cae <f_min+0x26>
80002caa:	e0 8a 00 03 	brle	80002cb0 <f_min+0x28>
80002cae:	30 08       	mov	r8,0
80002cb0:	5c 58       	castu.b	r8
80002cb2:	c0 40       	breq	80002cba <f_min+0x32>
	{
		return a;
80002cb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002cb8:	c0 38       	rjmp	80002cbe <f_min+0x36>
	}else{
		return b;
80002cba:	ee f8 ff f8 	ld.w	r8,r7[-8]
	}
}
80002cbe:	10 9c       	mov	r12,r8
80002cc0:	2f ed       	sub	sp,-8
80002cc2:	e3 cd 80 80 	ldm	sp++,r7,pc

80002cc6 <f_max>:

static inline float f_max(const float a, const float b){
80002cc6:	eb cd 40 80 	pushm	r7,lr
80002cca:	1a 97       	mov	r7,sp
80002ccc:	20 2d       	sub	sp,8
80002cce:	ef 4c ff fc 	st.w	r7[-4],r12
80002cd2:	ef 4b ff f8 	st.w	r7[-8],r11
	if (a >= b)
80002cd6:	30 18       	mov	r8,1
80002cd8:	ee fa ff fc 	ld.w	r10,r7[-4]
80002cdc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002ce0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80002ce4:	e0 8c 00 03 	brvs	80002cea <f_max+0x24>
80002ce8:	c0 24       	brge	80002cec <f_max+0x26>
80002cea:	30 08       	mov	r8,0
80002cec:	5c 58       	castu.b	r8
80002cee:	c0 40       	breq	80002cf6 <f_max+0x30>
	{
		return a;
80002cf0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002cf4:	c0 38       	rjmp	80002cfa <f_max+0x34>
	}else{
		return b;
80002cf6:	ee f8 ff f8 	ld.w	r8,r7[-8]
	}
}
80002cfa:	10 9c       	mov	r12,r8
80002cfc:	2f ed       	sub	sp,-8
80002cfe:	e3 cd 80 80 	ldm	sp++,r7,pc

80002d02 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80002d02:	eb cd 40 c0 	pushm	r6-r7,lr
80002d06:	1a 97       	mov	r7,sp
80002d08:	20 6d       	sub	sp,24
80002d0a:	49 f6       	lddpc	r6,80002d84 <interpolate+0x82>
80002d0c:	1e 26       	rsub	r6,pc
80002d0e:	ef 4c ff f8 	st.w	r7[-8],r12
80002d12:	ef 4b ff f4 	st.w	r7[-12],r11
80002d16:	ef 4a ff f0 	st.w	r7[-16],r10
80002d1a:	ef 49 ff ec 	st.w	r7[-20],r9
80002d1e:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80002d22:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002d26:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002d2a:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80002d2e:	c0 41       	brne	80002d36 <interpolate+0x34>
	{
		return y1;
80002d30:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002d34:	c2 38       	rjmp	80002d7a <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80002d36:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002d3a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002d3e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80002d42:	ee fa ff f8 	ld.w	r10,r7[-8]
80002d46:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d4a:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80002d4e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002d52:	ee fa ff f0 	ld.w	r10,r7[-16]
80002d56:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002d5a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002d5e:	12 9b       	mov	r11,r9
80002d60:	10 9c       	mov	r12,r8
80002d62:	f0 16 00 08 	mcall	r6[32]
80002d66:	18 98       	mov	r8,r12
80002d68:	10 99       	mov	r9,r8
80002d6a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002d6e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80002d72:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80002d76:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80002d7a:	10 9c       	mov	r12,r8
80002d7c:	2f ad       	sub	sp,-24
80002d7e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002d82:	00 00       	add	r0,r0
80002d84:	80 00       	ld.sh	r0,r0[0x0]
80002d86:	2b 90       	sub	r0,-71

80002d88 <init_orca>:
float timeHorizon, invTimeHorizon;

int8_t loop_count_orca = 0;

void init_orca()
{
80002d88:	eb cd 40 c0 	pushm	r6-r7,lr
80002d8c:	1a 97       	mov	r7,sp
80002d8e:	49 26       	lddpc	r6,80002dd4 <init_orca+0x4c>
80002d90:	1e 26       	rsub	r6,pc
	centralData = get_central_data();
80002d92:	f0 16 00 33 	mcall	r6[204]
80002d96:	18 99       	mov	r9,r12
80002d98:	ec f8 00 00 	ld.w	r8,r6[0]
80002d9c:	91 09       	st.w	r8[0x0],r9
	centralData->safe_size = SIZE_VHC_ORCA;
80002d9e:	ec f8 00 00 	ld.w	r8,r6[0]
80002da2:	70 08       	ld.w	r8,r8[0x0]
80002da4:	fc 19 40 a0 	movh	r9,0x40a0
80002da8:	f1 49 11 00 	st.w	r8[4352],r9
		
	timeHorizon = 8.0;
80002dac:	ec f8 04 2c 	ld.w	r8,r6[1068]
80002db0:	fc 19 41 00 	movh	r9,0x4100
80002db4:	91 09       	st.w	r8[0x0],r9
	invTimeHorizon = 1.0/timeHorizon;
80002db6:	ec f8 04 2c 	ld.w	r8,r6[1068]
80002dba:	70 08       	ld.w	r8,r8[0x0]
80002dbc:	10 9b       	mov	r11,r8
80002dbe:	fc 1c 3f 80 	movh	r12,0x3f80
80002dc2:	f0 16 00 08 	mcall	r6[32]
80002dc6:	18 98       	mov	r8,r12
80002dc8:	10 99       	mov	r9,r8
80002dca:	ec f8 02 b4 	ld.w	r8,r6[692]
80002dce:	91 09       	st.w	r8[0x0],r9
}
80002dd0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002dd4:	80 00       	ld.sh	r0,r0[0x0]
80002dd6:	2c 14       	sub	r4,-63
80002dd8:	43 6f       	lddsp	pc,sp[0xd8]
80002dda:	6c 6c       	ld.w	r12,r6[0x18]
80002ddc:	69 73       	ld.w	r3,r4[0x5c]
80002dde:	69 6f       	ld.w	pc,r4[0x58]
80002de0:	6e 21       	ld.w	r1,r7[0x8]
80002de2:	20 00       	sub	r0,0
80002de4:	44 69       	lddsp	r9,sp[0x118]
80002de6:	73 74       	ld.w	r4,r9[0x5c]
80002de8:	61 6e       	ld.w	lr,r0[0x58]
80002dea:	63 65       	ld.w	r5,r1[0x58]
80002dec:	20 77       	sub	r7,7
80002dee:	69 74       	ld.w	r4,r4[0x5c]
80002df0:	68 20       	ld.w	r0,r4[0x8]
80002df2:	6e 65       	ld.w	r5,r7[0x18]
80002df4:	69 67       	ld.w	r7,r4[0x58]
80002df6:	68 62       	ld.w	r2,r4[0x18]
80002df8:	6f 72       	ld.w	r2,r7[0x5c]
80002dfa:	20 00       	sub	r0,0
80002dfc:	28 78       	sub	r8,-121
80002dfe:	31 30       	mov	r0,19
80002e00:	30 29       	mov	r9,2
80002e02:	3a 00       	mov	r0,-96
80002e04:	0a 00       	add	r0,r5
80002e06:	00 00       	add	r0,r0
80002e08:	4f 72       	lddpc	r2,80002fe4 <computeNewVelocity+0x1b8>
80002e0a:	63 61       	ld.w	r1,r1[0x58]
80002e0c:	20 64       	sub	r4,6
80002e0e:	69 66       	ld.w	r6,r4[0x58]
80002e10:	66 76       	ld.w	r6,r3[0x1c]
80002e12:	65 6c       	ld.w	r12,r2[0x58]
80002e14:	3a 00       	mov	r0,-96
80002e16:	00 00       	add	r0,r0
80002e18:	2c 20       	sub	r0,-62
80002e1a:	4f 70       	lddpc	r0,80002ff4 <computeNewVelocity+0x1c8>
80002e1c:	74 69       	ld.w	r9,r10[0x18]
80002e1e:	6d 61       	ld.w	r1,r6[0x58]
80002e20:	6c 3a       	ld.w	r10,r6[0xc]
80002e22:	00 00       	add	r0,r0
80002e24:	2c 20       	sub	r0,-62
80002e26:	4e 65       	lddpc	r5,80002fbc <computeNewVelocity+0x190>
80002e28:	77 3a       	ld.w	r10,r11[0x4c]
	...

80002e2c <computeNewVelocity>:

void computeNewVelocity(float OptimalVelocity[], float NewVelocity[])
{
80002e2c:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80002e30:	1a 97       	mov	r7,sp
80002e32:	fa cd 02 34 	sub	sp,sp,564
80002e36:	fe f6 09 ee 	ld.w	r6,pc[2542]
80002e3a:	1e 26       	rsub	r6,pc
80002e3c:	ef 4c fd e0 	st.w	r7[-544],r12
80002e40:	ef 4b fd dc 	st.w	r7[-548],r11
	float relativePosition[3], relativeVelocity[3];
	float combinedRadius, distSq, combinedRadiusSq, dotProduct, wLength, wLenghtSq;
	
	float w[3], unitW[3], u[3], neighor_bf[3];
	
	for (i=0;i<3;i++)
80002e44:	30 08       	mov	r8,0
80002e46:	ef 68 ff cf 	st.b	r7[-49],r8
80002e4a:	c1 68       	rjmp	80002e76 <computeNewVelocity+0x4a>
	{
		NewVelocity[i] = OptimalVelocity[i];
80002e4c:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002e50:	a3 68       	lsl	r8,0x2
80002e52:	ee f9 fd dc 	ld.w	r9,r7[-548]
80002e56:	f2 08 00 08 	add	r8,r9,r8
80002e5a:	ef 29 ff cf 	ld.sb	r9,r7[-49]
80002e5e:	a3 69       	lsl	r9,0x2
80002e60:	ee fa fd e0 	ld.w	r10,r7[-544]
80002e64:	f4 09 00 09 	add	r9,r10,r9
80002e68:	72 09       	ld.w	r9,r9[0x0]
80002e6a:	91 09       	st.w	r8[0x0],r9
	float relativePosition[3], relativeVelocity[3];
	float combinedRadius, distSq, combinedRadiusSq, dotProduct, wLength, wLenghtSq;
	
	float w[3], unitW[3], u[3], neighor_bf[3];
	
	for (i=0;i<3;i++)
80002e6c:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80002e70:	2f f8       	sub	r8,-1
80002e72:	ef 68 ff cf 	st.b	r7[-49],r8
80002e76:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80002e7a:	30 28       	mov	r8,2
80002e7c:	f0 09 18 00 	cp.b	r9,r8
80002e80:	fe 9a ff e6 	brle	80002e4c <computeNewVelocity+0x20>
	{
		NewVelocity[i] = OptimalVelocity[i];
	}
	
	/* Create agent ORCA planes. */
	for (ind=0; ind<centralData->number_of_neighbors; ind++)
80002e84:	30 08       	mov	r8,0
80002e86:	ef 68 ff ce 	st.b	r7[-50],r8
80002e8a:	e0 8f 04 22 	bral	800036ce <computeNewVelocity+0x8a2>
		//{
			//relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
			//relativeVelocity[i] = centralData->position_estimator.vel_bf[i] - neighor_bf[i];
		//}
		
		for (i=0;i<3;i++)
80002e8e:	30 08       	mov	r8,0
80002e90:	ef 68 ff cf 	st.b	r7[-49],r8
80002e94:	c4 68       	rjmp	80002f20 <computeNewVelocity+0xf4>
		{
			relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
80002e96:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002e9a:	ec f9 00 00 	ld.w	r9,r6[0]
80002e9e:	72 09       	ld.w	r9,r9[0x0]
80002ea0:	ef 2b ff ce 	ld.sb	r11,r7[-50]
80002ea4:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80002ea8:	a3 7b       	lsl	r11,0x3
80002eaa:	f6 0a 00 0a 	add	r10,r11,r10
80002eae:	f4 ca fb be 	sub	r10,r10,-1090
80002eb2:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80002eb6:	ec f9 00 00 	ld.w	r9,r6[0]
80002eba:	72 09       	ld.w	r9,r9[0x0]
80002ebc:	ef 2b ff cf 	ld.sb	r11,r7[-49]
80002ec0:	f6 cb fc 99 	sub	r11,r11,-871
80002ec4:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80002ec8:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002ecc:	a3 68       	lsl	r8,0x2
80002ece:	ee 08 00 08 	add	r8,r7,r8
80002ed2:	f1 49 fe 38 	st.w	r8[-456],r9
			relativeVelocity[i] = centralData->position_estimator.vel[i] - centralData->listNeighbors[ind].velocity[i];
80002ed6:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002eda:	ec f9 00 00 	ld.w	r9,r6[0]
80002ede:	72 09       	ld.w	r9,r9[0x0]
80002ee0:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80002ee4:	f4 ca fc a3 	sub	r10,r10,-861
80002ee8:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80002eec:	ec f9 00 00 	ld.w	r9,r6[0]
80002ef0:	72 09       	ld.w	r9,r9[0x0]
80002ef2:	ef 2c ff ce 	ld.sb	r12,r7[-50]
80002ef6:	ef 2b ff cf 	ld.sb	r11,r7[-49]
80002efa:	a3 7c       	lsl	r12,0x3
80002efc:	f8 0b 00 0b 	add	r11,r12,r11
80002f00:	f6 cb fb bb 	sub	r11,r11,-1093
80002f04:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80002f08:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002f0c:	a3 68       	lsl	r8,0x2
80002f0e:	ee 08 00 08 	add	r8,r7,r8
80002f12:	f1 49 fe 2c 	st.w	r8[-468],r9
		//{
			//relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
			//relativeVelocity[i] = centralData->position_estimator.vel_bf[i] - neighor_bf[i];
		//}
		
		for (i=0;i<3;i++)
80002f16:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80002f1a:	2f f8       	sub	r8,-1
80002f1c:	ef 68 ff cf 	st.b	r7[-49],r8
80002f20:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80002f24:	30 28       	mov	r8,2
80002f26:	f0 09 18 00 	cp.b	r9,r8
80002f2a:	fe 9a ff b6 	brle	80002e96 <computeNewVelocity+0x6a>
		{
			relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
			relativeVelocity[i] = centralData->position_estimator.vel[i] - centralData->listNeighbors[ind].velocity[i];
		}
		
		q_neighbor.s = 0.0;
80002f2e:	30 08       	mov	r8,0
80002f30:	ef 48 fe 54 	st.w	r7[-428],r8
		q_neighbor.v[0] = relativeVelocity[0];
80002f34:	ee f8 fe 2c 	ld.w	r8,r7[-468]
80002f38:	ef 48 fe 58 	st.w	r7[-424],r8
		q_neighbor.v[1] = relativeVelocity[1];
80002f3c:	ee f8 fe 30 	ld.w	r8,r7[-464]
80002f40:	ef 48 fe 5c 	st.w	r7[-420],r8
		q_neighbor.v[2] = relativeVelocity[2];
80002f44:	ee f8 fe 34 	ld.w	r8,r7[-460]
80002f48:	ef 48 fe 60 	st.w	r7[-416],r8
		q_neighbor_bf = quat_global_to_local(centralData->imu1.attitude.qe,q_neighbor);
80002f4c:	ec f8 00 00 	ld.w	r8,r6[0]
80002f50:	70 0b       	ld.w	r11,r8[0x0]
80002f52:	ee ca 01 bc 	sub	r10,r7,444
80002f56:	20 4d       	sub	sp,16
80002f58:	1a 98       	mov	r8,sp
80002f5a:	ee c9 01 ac 	sub	r9,r7,428
80002f5e:	20 08       	sub	r8,0
80002f60:	20 09       	sub	r9,0
80002f62:	72 0c       	ld.w	r12,r9[0x0]
80002f64:	91 0c       	st.w	r8[0x0],r12
80002f66:	72 1c       	ld.w	r12,r9[0x4]
80002f68:	91 1c       	st.w	r8[0x4],r12
80002f6a:	72 2c       	ld.w	r12,r9[0x8]
80002f6c:	91 2c       	st.w	r8[0x8],r12
80002f6e:	72 39       	ld.w	r9,r9[0xc]
80002f70:	91 39       	st.w	r8[0xc],r9
80002f72:	20 4d       	sub	sp,16
80002f74:	1a 98       	mov	r8,sp
80002f76:	16 99       	mov	r9,r11
80002f78:	20 08       	sub	r8,0
80002f7a:	20 09       	sub	r9,0
80002f7c:	72 0b       	ld.w	r11,r9[0x0]
80002f7e:	91 0b       	st.w	r8[0x0],r11
80002f80:	72 1b       	ld.w	r11,r9[0x4]
80002f82:	91 1b       	st.w	r8[0x4],r11
80002f84:	72 2b       	ld.w	r11,r9[0x8]
80002f86:	91 2b       	st.w	r8[0x8],r11
80002f88:	72 39       	ld.w	r9,r9[0xc]
80002f8a:	91 39       	st.w	r8[0xc],r9
80002f8c:	14 9c       	mov	r12,r10
80002f8e:	fe b0 fd 67 	rcall	80002a5c <quat_global_to_local>
80002f92:	2f 8d       	sub	sp,-32
		
		neighor_bf[0] = q_neighbor_bf.v[0];
80002f94:	ee f8 fe 48 	ld.w	r8,r7[-440]
80002f98:	ef 48 fd fc 	st.w	r7[-516],r8
		neighor_bf[1] = q_neighbor_bf.v[1];
80002f9c:	ee f8 fe 4c 	ld.w	r8,r7[-436]
80002fa0:	ef 48 fe 00 	st.w	r7[-512],r8
		neighor_bf[2] = q_neighbor_bf.v[2];
80002fa4:	ee f8 fe 50 	ld.w	r8,r7[-432]
80002fa8:	ef 48 fe 04 	st.w	r7[-508],r8
		
		for (i=0;i<3;i++)
80002fac:	30 08       	mov	r8,0
80002fae:	ef 68 ff cf 	st.b	r7[-49],r8
80002fb2:	c1 58       	rjmp	80002fdc <computeNewVelocity+0x1b0>
		{
			relativeVelocity[i] = neighor_bf[i];
80002fb4:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80002fb8:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002fbc:	a3 68       	lsl	r8,0x2
80002fbe:	ee 08 00 08 	add	r8,r7,r8
80002fc2:	f0 f9 fd fc 	ld.w	r9,r8[-516]
80002fc6:	f4 08 15 02 	lsl	r8,r10,0x2
80002fca:	ee 08 00 08 	add	r8,r7,r8
80002fce:	f1 49 fe 2c 	st.w	r8[-468],r9
		
		neighor_bf[0] = q_neighbor_bf.v[0];
		neighor_bf[1] = q_neighbor_bf.v[1];
		neighor_bf[2] = q_neighbor_bf.v[2];
		
		for (i=0;i<3;i++)
80002fd2:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80002fd6:	2f f8       	sub	r8,-1
80002fd8:	ef 68 ff cf 	st.b	r7[-49],r8
80002fdc:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80002fe0:	30 28       	mov	r8,2
80002fe2:	f0 09 18 00 	cp.b	r9,r8
80002fe6:	fe 9a ff e7 	brle	80002fb4 <computeNewVelocity+0x188>
		{
			relativeVelocity[i] = neighor_bf[i];
		}
		
		q_neighbor.s = 0.0;
80002fea:	30 08       	mov	r8,0
80002fec:	ef 48 fe 54 	st.w	r7[-428],r8
		q_neighbor.v[0] = relativePosition[0];
80002ff0:	ee f8 fe 38 	ld.w	r8,r7[-456]
80002ff4:	ef 48 fe 58 	st.w	r7[-424],r8
		q_neighbor.v[1] = relativePosition[1];
80002ff8:	ee f8 fe 3c 	ld.w	r8,r7[-452]
80002ffc:	ef 48 fe 5c 	st.w	r7[-420],r8
		q_neighbor.v[2] = relativePosition[2];
80003000:	ee f8 fe 40 	ld.w	r8,r7[-448]
80003004:	ef 48 fe 60 	st.w	r7[-416],r8
		q_neighbor_bf = quat_global_to_local(centralData->imu1.attitude.qe,q_neighbor);
80003008:	ec f8 00 00 	ld.w	r8,r6[0]
8000300c:	70 0b       	ld.w	r11,r8[0x0]
8000300e:	ee ca 02 34 	sub	r10,r7,564
80003012:	20 4d       	sub	sp,16
80003014:	1a 98       	mov	r8,sp
80003016:	ee c9 01 ac 	sub	r9,r7,428
8000301a:	20 08       	sub	r8,0
8000301c:	20 09       	sub	r9,0
8000301e:	72 0c       	ld.w	r12,r9[0x0]
80003020:	91 0c       	st.w	r8[0x0],r12
80003022:	72 1c       	ld.w	r12,r9[0x4]
80003024:	91 1c       	st.w	r8[0x4],r12
80003026:	72 2c       	ld.w	r12,r9[0x8]
80003028:	91 2c       	st.w	r8[0x8],r12
8000302a:	72 39       	ld.w	r9,r9[0xc]
8000302c:	91 39       	st.w	r8[0xc],r9
8000302e:	20 4d       	sub	sp,16
80003030:	1a 98       	mov	r8,sp
80003032:	16 99       	mov	r9,r11
80003034:	20 08       	sub	r8,0
80003036:	20 09       	sub	r9,0
80003038:	72 0b       	ld.w	r11,r9[0x0]
8000303a:	91 0b       	st.w	r8[0x0],r11
8000303c:	72 1b       	ld.w	r11,r9[0x4]
8000303e:	91 1b       	st.w	r8[0x4],r11
80003040:	72 2b       	ld.w	r11,r9[0x8]
80003042:	91 2b       	st.w	r8[0x8],r11
80003044:	72 39       	ld.w	r9,r9[0xc]
80003046:	91 39       	st.w	r8[0xc],r9
80003048:	14 9c       	mov	r12,r10
8000304a:	fe b0 fd 09 	rcall	80002a5c <quat_global_to_local>
8000304e:	2f 8d       	sub	sp,-32
80003050:	ee c8 01 bc 	sub	r8,r7,444
80003054:	ee c9 02 34 	sub	r9,r7,564
80003058:	20 08       	sub	r8,0
8000305a:	20 09       	sub	r9,0
8000305c:	72 0a       	ld.w	r10,r9[0x0]
8000305e:	91 0a       	st.w	r8[0x0],r10
80003060:	72 1a       	ld.w	r10,r9[0x4]
80003062:	91 1a       	st.w	r8[0x4],r10
80003064:	72 2a       	ld.w	r10,r9[0x8]
80003066:	91 2a       	st.w	r8[0x8],r10
80003068:	72 39       	ld.w	r9,r9[0xc]
8000306a:	91 39       	st.w	r8[0xc],r9
		
		neighor_bf[0] = q_neighbor_bf.v[0];
8000306c:	ee f8 fe 48 	ld.w	r8,r7[-440]
80003070:	ef 48 fd fc 	st.w	r7[-516],r8
		neighor_bf[1] = q_neighbor_bf.v[1];
80003074:	ee f8 fe 4c 	ld.w	r8,r7[-436]
80003078:	ef 48 fe 00 	st.w	r7[-512],r8
		neighor_bf[2] = q_neighbor_bf.v[2];
8000307c:	ee f8 fe 50 	ld.w	r8,r7[-432]
80003080:	ef 48 fe 04 	st.w	r7[-508],r8
		
		for (i=0;i<3;i++)
80003084:	30 08       	mov	r8,0
80003086:	ef 68 ff cf 	st.b	r7[-49],r8
8000308a:	c1 58       	rjmp	800030b4 <computeNewVelocity+0x288>
		{
			relativePosition[i] = neighor_bf[i];
8000308c:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80003090:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003094:	a3 68       	lsl	r8,0x2
80003096:	ee 08 00 08 	add	r8,r7,r8
8000309a:	f0 f9 fd fc 	ld.w	r9,r8[-516]
8000309e:	f4 08 15 02 	lsl	r8,r10,0x2
800030a2:	ee 08 00 08 	add	r8,r7,r8
800030a6:	f1 49 fe 38 	st.w	r8[-456],r9
		
		neighor_bf[0] = q_neighbor_bf.v[0];
		neighor_bf[1] = q_neighbor_bf.v[1];
		neighor_bf[2] = q_neighbor_bf.v[2];
		
		for (i=0;i<3;i++)
800030aa:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800030ae:	2f f8       	sub	r8,-1
800030b0:	ef 68 ff cf 	st.b	r7[-49],r8
800030b4:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800030b8:	30 28       	mov	r8,2
800030ba:	f0 09 18 00 	cp.b	r9,r8
800030be:	fe 9a ff e7 	brle	8000308c <computeNewVelocity+0x260>
		{
			relativePosition[i] = neighor_bf[i];
		}
		
		distSq = vector_norm_sqr(relativePosition);
800030c2:	ee c8 01 c8 	sub	r8,r7,456
800030c6:	10 9c       	mov	r12,r8
800030c8:	fe b0 fd b2 	rcall	80002c2c <vector_norm_sqr>
800030cc:	18 98       	mov	r8,r12
800030ce:	ef 48 ff d4 	st.w	r7[-44],r8
		combinedRadius = centralData->safe_size + centralData->listNeighbors[ind].size;
800030d2:	ec f8 00 00 	ld.w	r8,r6[0]
800030d6:	70 08       	ld.w	r8,r8[0x0]
800030d8:	f0 f9 11 00 	ld.w	r9,r8[4352]
800030dc:	ec f8 00 00 	ld.w	r8,r6[0]
800030e0:	70 0a       	ld.w	r10,r8[0x0]
800030e2:	ef 28 ff ce 	ld.sb	r8,r7[-50]
800030e6:	f0 c8 ff 77 	sub	r8,r8,-137
800030ea:	a5 78       	lsl	r8,0x5
800030ec:	f4 08 00 08 	add	r8,r10,r8
800030f0:	70 08       	ld.w	r8,r8[0x0]
800030f2:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800030f6:	ef 48 ff d0 	st.w	r7[-48],r8
		combinedRadiusSq = SQR(combinedRadius);
800030fa:	ee f9 ff d0 	ld.w	r9,r7[-48]
800030fe:	ee f8 ff d0 	ld.w	r8,r7[-48]
80003102:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003106:	ef 48 ff d8 	st.w	r7[-40],r8
		
		
		if (distSq > combinedRadiusSq)
8000310a:	30 18       	mov	r8,1
8000310c:	ee fa ff d4 	ld.w	r10,r7[-44]
80003110:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003114:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003118:	e0 8c 00 04 	brvs	80003120 <computeNewVelocity+0x2f4>
8000311c:	e0 89 00 03 	brgt	80003122 <computeNewVelocity+0x2f6>
80003120:	30 08       	mov	r8,0
80003122:	5c 58       	castu.b	r8
80003124:	e0 80 01 c7 	breq	800034b2 <computeNewVelocity+0x686>
		{
			for (i=0;i<3;i++)
80003128:	30 08       	mov	r8,0
8000312a:	ef 68 ff cf 	st.b	r7[-49],r8
8000312e:	c2 38       	rjmp	80003174 <computeNewVelocity+0x348>
			{
				w[i] = relativeVelocity[i] - invTimeHorizon * relativePosition[i];
80003130:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80003134:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003138:	a3 68       	lsl	r8,0x2
8000313a:	ee 08 00 08 	add	r8,r7,r8
8000313e:	f0 f9 fe 2c 	ld.w	r9,r8[-468]
80003142:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003146:	a3 68       	lsl	r8,0x2
80003148:	ee 08 00 08 	add	r8,r7,r8
8000314c:	f0 fb fe 38 	ld.w	r11,r8[-456]
80003150:	ec f8 02 b4 	ld.w	r8,r6[692]
80003154:	70 08       	ld.w	r8,r8[0x0]
80003156:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000315a:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000315e:	f4 08 15 02 	lsl	r8,r10,0x2
80003162:	ee 08 00 08 	add	r8,r7,r8
80003166:	f1 49 fe 20 	st.w	r8[-480],r9
		combinedRadiusSq = SQR(combinedRadius);
		
		
		if (distSq > combinedRadiusSq)
		{
			for (i=0;i<3;i++)
8000316a:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000316e:	2f f8       	sub	r8,-1
80003170:	ef 68 ff cf 	st.b	r7[-49],r8
80003174:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003178:	30 28       	mov	r8,2
8000317a:	f0 09 18 00 	cp.b	r9,r8
8000317e:	fe 9a ff d9 	brle	80003130 <computeNewVelocity+0x304>
			{
				w[i] = relativeVelocity[i] - invTimeHorizon * relativePosition[i];
			}
			wLenghtSq = vector_norm_sqr(w);
80003182:	ee c8 01 e0 	sub	r8,r7,480
80003186:	10 9c       	mov	r12,r8
80003188:	fe b0 fd 52 	rcall	80002c2c <vector_norm_sqr>
8000318c:	18 98       	mov	r8,r12
8000318e:	ef 48 ff e4 	st.w	r7[-28],r8
			
			dotProduct = scalar_product(w,relativePosition);
80003192:	ee c9 01 c8 	sub	r9,r7,456
80003196:	ee c8 01 e0 	sub	r8,r7,480
8000319a:	12 9b       	mov	r11,r9
8000319c:	10 9c       	mov	r12,r8
8000319e:	fe b0 fb 77 	rcall	8000288c <scalar_product>
800031a2:	18 98       	mov	r8,r12
800031a4:	ef 48 ff dc 	st.w	r7[-36],r8
			
			if ((dotProduct < 0.0)&&(SQR(dotProduct) > (combinedRadiusSq * wLenghtSq)))
800031a8:	30 18       	mov	r8,1
800031aa:	ee fa ff dc 	ld.w	r10,r7[-36]
800031ae:	30 09       	mov	r9,0
800031b0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800031b4:	e0 8c 00 03 	brvs	800031ba <computeNewVelocity+0x38e>
800031b8:	c0 25       	brlt	800031bc <computeNewVelocity+0x390>
800031ba:	30 08       	mov	r8,0
800031bc:	5c 58       	castu.b	r8
800031be:	c7 70       	breq	800032ac <computeNewVelocity+0x480>
800031c0:	ee f9 ff dc 	ld.w	r9,r7[-36]
800031c4:	ee f8 ff dc 	ld.w	r8,r7[-36]
800031c8:	e5 a2 0a 98 	cop	cp0,cr10,cr9,cr8,0x44
800031cc:	ee f9 ff d8 	ld.w	r9,r7[-40]
800031d0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800031d4:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800031d8:	30 18       	mov	r8,1
800031da:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800031de:	e0 8c 00 04 	brvs	800031e6 <computeNewVelocity+0x3ba>
800031e2:	e0 89 00 03 	brgt	800031e8 <computeNewVelocity+0x3bc>
800031e6:	30 08       	mov	r8,0
800031e8:	5c 58       	castu.b	r8
800031ea:	c6 10       	breq	800032ac <computeNewVelocity+0x480>
			{
				/* Project on cut-off circle. */
				wLength = fast_sqrt(wLenghtSq);
800031ec:	ee fc ff e4 	ld.w	r12,r7[-28]
800031f0:	fe b0 fc b4 	rcall	80002b58 <fast_sqrt>
800031f4:	18 98       	mov	r8,r12
800031f6:	ef 48 ff e0 	st.w	r7[-32],r8
				for (i=0;i<3;i++)
800031fa:	30 08       	mov	r8,0
800031fc:	ef 68 ff cf 	st.b	r7[-49],r8
80003200:	c4 d8       	rjmp	8000329a <computeNewVelocity+0x46e>
				{
					unitW[i] = w[i] / wLength;
80003202:	ef 25 ff cf 	ld.sb	r5,r7[-49]
80003206:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000320a:	a3 68       	lsl	r8,0x2
8000320c:	ee 08 00 08 	add	r8,r7,r8
80003210:	f0 f8 fe 20 	ld.w	r8,r8[-480]
80003214:	ee fb ff e0 	ld.w	r11,r7[-32]
80003218:	10 9c       	mov	r12,r8
8000321a:	f0 16 00 08 	mcall	r6[32]
8000321e:	18 98       	mov	r8,r12
80003220:	10 99       	mov	r9,r8
80003222:	ea 08 15 02 	lsl	r8,r5,0x2
80003226:	ee 08 00 08 	add	r8,r7,r8
8000322a:	f1 49 fe 14 	st.w	r8[-492],r9
					planes[ind].normal[i] = unitW[i];
8000322e:	ef 29 ff ce 	ld.sb	r9,r7[-50]
80003232:	ef 2b ff cf 	ld.sb	r11,r7[-49]
80003236:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000323a:	a3 68       	lsl	r8,0x2
8000323c:	ee 08 00 08 	add	r8,r7,r8
80003240:	f0 fa fe 14 	ld.w	r10,r8[-492]
80003244:	12 98       	mov	r8,r9
80003246:	a1 78       	lsl	r8,0x1
80003248:	12 08       	add	r8,r9
8000324a:	a1 78       	lsl	r8,0x1
8000324c:	16 08       	add	r8,r11
8000324e:	a3 68       	lsl	r8,0x2
80003250:	ee 08 00 08 	add	r8,r7,r8
80003254:	f1 4a fe 64 	st.w	r8[-412],r10
					u[i] = (combinedRadius * invTimeHorizon - wLength) * unitW[i];
80003258:	ef 2a ff cf 	ld.sb	r10,r7[-49]
8000325c:	ec f8 02 b4 	ld.w	r8,r6[692]
80003260:	70 09       	ld.w	r9,r8[0x0]
80003262:	ee f8 ff d0 	ld.w	r8,r7[-48]
80003266:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000326a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000326e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003272:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003276:	a3 68       	lsl	r8,0x2
80003278:	ee 08 00 08 	add	r8,r7,r8
8000327c:	f0 f8 fe 14 	ld.w	r8,r8[-492]
80003280:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003284:	f4 08 15 02 	lsl	r8,r10,0x2
80003288:	ee 08 00 08 	add	r8,r7,r8
8000328c:	f1 49 fe 08 	st.w	r8[-504],r9
			
			if ((dotProduct < 0.0)&&(SQR(dotProduct) > (combinedRadiusSq * wLenghtSq)))
			{
				/* Project on cut-off circle. */
				wLength = fast_sqrt(wLenghtSq);
				for (i=0;i<3;i++)
80003290:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80003294:	2f f8       	sub	r8,-1
80003296:	ef 68 ff cf 	st.b	r7[-49],r8
8000329a:	ef 39 ff cf 	ld.ub	r9,r7[-49]
8000329e:	30 28       	mov	r8,2
800032a0:	f0 09 18 00 	cp.b	r9,r8
800032a4:	fe 9a ff af 	brle	80003202 <computeNewVelocity+0x3d6>
			}
			wLenghtSq = vector_norm_sqr(w);
			
			dotProduct = scalar_product(w,relativePosition);
			
			if ((dotProduct < 0.0)&&(SQR(dotProduct) > (combinedRadiusSq * wLenghtSq)))
800032a8:	e0 8f 01 c5 	bral	80003632 <computeNewVelocity+0x806>
					planes[ind].normal[i] = unitW[i];
					u[i] = (combinedRadius * invTimeHorizon - wLength) * unitW[i];
				}
			}else{
				/* Project on cone. */
				float a = distSq;
800032ac:	ee f8 ff d4 	ld.w	r8,r7[-44]
800032b0:	ef 48 ff ec 	st.w	r7[-20],r8
				float b = scalar_product(relativePosition,relativeVelocity);
800032b4:	ee c9 01 d4 	sub	r9,r7,468
800032b8:	ee c8 01 c8 	sub	r8,r7,456
800032bc:	12 9b       	mov	r11,r9
800032be:	10 9c       	mov	r12,r8
800032c0:	fe b0 fa e6 	rcall	8000288c <scalar_product>
800032c4:	18 98       	mov	r8,r12
800032c6:	ef 48 ff f0 	st.w	r7[-16],r8
				float crossProduct[3];
				CROSS(relativePosition,relativeVelocity,crossProduct);
800032ca:	ee f9 fe 3c 	ld.w	r9,r7[-452]
800032ce:	ee f8 fe 34 	ld.w	r8,r7[-460]
800032d2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800032d6:	ee fa fe 40 	ld.w	r10,r7[-448]
800032da:	ee f8 fe 30 	ld.w	r8,r7[-464]
800032de:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800032e2:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800032e6:	ef 48 fd e4 	st.w	r7[-540],r8
800032ea:	ee f9 fe 40 	ld.w	r9,r7[-448]
800032ee:	ee f8 fe 2c 	ld.w	r8,r7[-468]
800032f2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800032f6:	ee fa fe 38 	ld.w	r10,r7[-456]
800032fa:	ee f8 fe 34 	ld.w	r8,r7[-460]
800032fe:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80003302:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80003306:	ef 48 fd e8 	st.w	r7[-536],r8
8000330a:	ee f9 fe 38 	ld.w	r9,r7[-456]
8000330e:	ee f8 fe 30 	ld.w	r8,r7[-464]
80003312:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003316:	ee fa fe 3c 	ld.w	r10,r7[-452]
8000331a:	ee f8 fe 2c 	ld.w	r8,r7[-468]
8000331e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80003322:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80003326:	ef 48 fd ec 	st.w	r7[-532],r8
				float c = vector_norm_sqr(relativeVelocity) - vector_norm_sqr(crossProduct) / (distSq - combinedRadiusSq);
8000332a:	ee c8 01 d4 	sub	r8,r7,468
8000332e:	10 9c       	mov	r12,r8
80003330:	fe b0 fc 7e 	rcall	80002c2c <vector_norm_sqr>
80003334:	18 95       	mov	r5,r12
80003336:	ee c8 02 1c 	sub	r8,r7,540
8000333a:	10 9c       	mov	r12,r8
8000333c:	fe b0 fc 78 	rcall	80002c2c <vector_norm_sqr>
80003340:	18 98       	mov	r8,r12
80003342:	ee fa ff d4 	ld.w	r10,r7[-44]
80003346:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000334a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000334e:	12 9b       	mov	r11,r9
80003350:	10 9c       	mov	r12,r8
80003352:	f0 16 00 08 	mcall	r6[32]
80003356:	18 98       	mov	r8,r12
80003358:	e5 a1 08 58 	cop	cp0,cr8,cr5,cr8,0x42
8000335c:	ef 48 ff f4 	st.w	r7[-12],r8
				float t = (b + fast_sqrt(SQR(b) - a*c)) / a;
80003360:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003364:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003368:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000336c:	ee fa ff ec 	ld.w	r10,r7[-20]
80003370:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003374:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80003378:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000337c:	10 9c       	mov	r12,r8
8000337e:	fe b0 fb ed 	rcall	80002b58 <fast_sqrt>
80003382:	18 99       	mov	r9,r12
80003384:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003388:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000338c:	ee fb ff ec 	ld.w	r11,r7[-20]
80003390:	10 9c       	mov	r12,r8
80003392:	f0 16 00 08 	mcall	r6[32]
80003396:	18 98       	mov	r8,r12
80003398:	ef 48 ff f8 	st.w	r7[-8],r8
				for (i=0;i<3;i++)
8000339c:	30 08       	mov	r8,0
8000339e:	ef 68 ff cf 	st.b	r7[-49],r8
800033a2:	c2 28       	rjmp	800033e6 <computeNewVelocity+0x5ba>
				{
					w[i] = relativeVelocity[i] - t * relativePosition[i];
800033a4:	ef 2a ff cf 	ld.sb	r10,r7[-49]
800033a8:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800033ac:	a3 68       	lsl	r8,0x2
800033ae:	ee 08 00 08 	add	r8,r7,r8
800033b2:	f0 f9 fe 2c 	ld.w	r9,r8[-468]
800033b6:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800033ba:	a3 68       	lsl	r8,0x2
800033bc:	ee 08 00 08 	add	r8,r7,r8
800033c0:	f0 fb fe 38 	ld.w	r11,r8[-456]
800033c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033c8:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
800033cc:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800033d0:	f4 08 15 02 	lsl	r8,r10,0x2
800033d4:	ee 08 00 08 	add	r8,r7,r8
800033d8:	f1 49 fe 20 	st.w	r8[-480],r9
				float b = scalar_product(relativePosition,relativeVelocity);
				float crossProduct[3];
				CROSS(relativePosition,relativeVelocity,crossProduct);
				float c = vector_norm_sqr(relativeVelocity) - vector_norm_sqr(crossProduct) / (distSq - combinedRadiusSq);
				float t = (b + fast_sqrt(SQR(b) - a*c)) / a;
				for (i=0;i<3;i++)
800033dc:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800033e0:	2f f8       	sub	r8,-1
800033e2:	ef 68 ff cf 	st.b	r7[-49],r8
800033e6:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800033ea:	30 28       	mov	r8,2
800033ec:	f0 09 18 00 	cp.b	r9,r8
800033f0:	fe 9a ff da 	brle	800033a4 <computeNewVelocity+0x578>
				{
					w[i] = relativeVelocity[i] - t * relativePosition[i];
				}
				wLength = vector_norm(w);
800033f4:	ee c8 01 e0 	sub	r8,r7,480
800033f8:	10 9c       	mov	r12,r8
800033fa:	fe b0 fc 31 	rcall	80002c5c <vector_norm>
800033fe:	18 98       	mov	r8,r12
80003400:	ef 48 ff e0 	st.w	r7[-32],r8
				for (i=0;i<3;i++)
80003404:	30 08       	mov	r8,0
80003406:	ef 68 ff cf 	st.b	r7[-49],r8
8000340a:	c4 c8       	rjmp	800034a2 <computeNewVelocity+0x676>
				{
					unitW[i] = w[i] / wLength;
8000340c:	ef 25 ff cf 	ld.sb	r5,r7[-49]
80003410:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003414:	a3 68       	lsl	r8,0x2
80003416:	ee 08 00 08 	add	r8,r7,r8
8000341a:	f0 f8 fe 20 	ld.w	r8,r8[-480]
8000341e:	ee fb ff e0 	ld.w	r11,r7[-32]
80003422:	10 9c       	mov	r12,r8
80003424:	f0 16 00 08 	mcall	r6[32]
80003428:	18 98       	mov	r8,r12
8000342a:	10 99       	mov	r9,r8
8000342c:	ea 08 15 02 	lsl	r8,r5,0x2
80003430:	ee 08 00 08 	add	r8,r7,r8
80003434:	f1 49 fe 14 	st.w	r8[-492],r9
					planes[ind].normal[i] = unitW[i];
80003438:	ef 29 ff ce 	ld.sb	r9,r7[-50]
8000343c:	ef 2b ff cf 	ld.sb	r11,r7[-49]
80003440:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003444:	a3 68       	lsl	r8,0x2
80003446:	ee 08 00 08 	add	r8,r7,r8
8000344a:	f0 fa fe 14 	ld.w	r10,r8[-492]
8000344e:	12 98       	mov	r8,r9
80003450:	a1 78       	lsl	r8,0x1
80003452:	12 08       	add	r8,r9
80003454:	a1 78       	lsl	r8,0x1
80003456:	16 08       	add	r8,r11
80003458:	a3 68       	lsl	r8,0x2
8000345a:	ee 08 00 08 	add	r8,r7,r8
8000345e:	f1 4a fe 64 	st.w	r8[-412],r10
					u[i] = (combinedRadius * t - wLength) * unitW[i];
80003462:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80003466:	ee f9 ff d0 	ld.w	r9,r7[-48]
8000346a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000346e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003472:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003476:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000347a:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000347e:	a3 68       	lsl	r8,0x2
80003480:	ee 08 00 08 	add	r8,r7,r8
80003484:	f0 f8 fe 14 	ld.w	r8,r8[-492]
80003488:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000348c:	f4 08 15 02 	lsl	r8,r10,0x2
80003490:	ee 08 00 08 	add	r8,r7,r8
80003494:	f1 49 fe 08 	st.w	r8[-504],r9
				for (i=0;i<3;i++)
				{
					w[i] = relativeVelocity[i] - t * relativePosition[i];
				}
				wLength = vector_norm(w);
				for (i=0;i<3;i++)
80003498:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000349c:	2f f8       	sub	r8,-1
8000349e:	ef 68 ff cf 	st.b	r7[-49],r8
800034a2:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800034a6:	30 28       	mov	r8,2
800034a8:	f0 09 18 00 	cp.b	r9,r8
800034ac:	fe 9a ff b0 	brle	8000340c <computeNewVelocity+0x5e0>
800034b0:	cc 18       	rjmp	80003632 <computeNewVelocity+0x806>
					u[i] = (combinedRadius * t - wLength) * unitW[i];
				}
			}
		}else{
			/* Collisions */
			dbg_print("Collision! ");
800034b2:	fe cc 06 da 	sub	r12,pc,1754
800034b6:	f0 16 00 01 	mcall	r6[4]
			dbg_print("Distance with neighbor ");
800034ba:	fe cc 06 d6 	sub	r12,pc,1750
800034be:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(ind,10);
800034c2:	ef 28 ff ce 	ld.sb	r8,r7[-50]
800034c6:	30 ab       	mov	r11,10
800034c8:	10 9c       	mov	r12,r8
800034ca:	f0 16 00 04 	mcall	r6[16]
			dbg_print("(x100):");
800034ce:	fe cc 06 d2 	sub	r12,pc,1746
800034d2:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(sqrt(distSq)*100.0,10);
800034d6:	ee fc ff d4 	ld.w	r12,r7[-44]
800034da:	f0 16 00 02 	mcall	r6[8]
800034de:	14 98       	mov	r8,r10
800034e0:	16 99       	mov	r9,r11
800034e2:	10 9a       	mov	r10,r8
800034e4:	12 9b       	mov	r11,r9
800034e6:	f0 16 00 6b 	mcall	r6[428]
800034ea:	30 08       	mov	r8,0
800034ec:	fc 19 40 59 	movh	r9,0x4059
800034f0:	f0 16 00 03 	mcall	r6[12]
800034f4:	14 98       	mov	r8,r10
800034f6:	16 99       	mov	r9,r11
800034f8:	10 9a       	mov	r10,r8
800034fa:	12 9b       	mov	r11,r9
800034fc:	f0 16 00 14 	mcall	r6[80]
80003500:	18 98       	mov	r8,r12
80003502:	30 ab       	mov	r11,10
80003504:	10 9c       	mov	r12,r8
80003506:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8000350a:	fe cc 07 06 	sub	r12,pc,1798
8000350e:	f0 16 00 01 	mcall	r6[4]
			
			float invTimeStep = 1.0 / ORCA_TIME_STEP_MILLIS; //PROBLEM wrong time step
80003512:	e0 68 cc cd 	mov	r8,52429
80003516:	ea 18 3d cc 	orh	r8,0x3dcc
8000351a:	ef 48 ff fc 	st.w	r7[-4],r8
			for (i=0;i<3;i++)
8000351e:	30 08       	mov	r8,0
80003520:	ef 68 ff cf 	st.b	r7[-49],r8
80003524:	c2 28       	rjmp	80003568 <computeNewVelocity+0x73c>
			{
				w[i] = relativeVelocity[i] - invTimeStep * relativePosition[i];
80003526:	ef 2a ff cf 	ld.sb	r10,r7[-49]
8000352a:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000352e:	a3 68       	lsl	r8,0x2
80003530:	ee 08 00 08 	add	r8,r7,r8
80003534:	f0 f9 fe 2c 	ld.w	r9,r8[-468]
80003538:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000353c:	a3 68       	lsl	r8,0x2
8000353e:	ee 08 00 08 	add	r8,r7,r8
80003542:	f0 fb fe 38 	ld.w	r11,r8[-456]
80003546:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000354a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000354e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003552:	f4 08 15 02 	lsl	r8,r10,0x2
80003556:	ee 08 00 08 	add	r8,r7,r8
8000355a:	f1 49 fe 20 	st.w	r8[-480],r9
			dbg_print("(x100):");
			dbg_print_num(sqrt(distSq)*100.0,10);
			dbg_print("\n");
			
			float invTimeStep = 1.0 / ORCA_TIME_STEP_MILLIS; //PROBLEM wrong time step
			for (i=0;i<3;i++)
8000355e:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80003562:	2f f8       	sub	r8,-1
80003564:	ef 68 ff cf 	st.b	r7[-49],r8
80003568:	ef 39 ff cf 	ld.ub	r9,r7[-49]
8000356c:	30 28       	mov	r8,2
8000356e:	f0 09 18 00 	cp.b	r9,r8
80003572:	fe 9a ff da 	brle	80003526 <computeNewVelocity+0x6fa>
			{
				w[i] = relativeVelocity[i] - invTimeStep * relativePosition[i];
			}
			wLength = vector_norm(w);
80003576:	ee c8 01 e0 	sub	r8,r7,480
8000357a:	10 9c       	mov	r12,r8
8000357c:	fe b0 fb 70 	rcall	80002c5c <vector_norm>
80003580:	18 98       	mov	r8,r12
80003582:	ef 48 ff e0 	st.w	r7[-32],r8
			for (i=0;i<3;i++)
80003586:	30 08       	mov	r8,0
80003588:	ef 68 ff cf 	st.b	r7[-49],r8
8000358c:	c4 c8       	rjmp	80003624 <computeNewVelocity+0x7f8>
			{
				unitW[i] = w[i] / wLength;
8000358e:	ef 25 ff cf 	ld.sb	r5,r7[-49]
80003592:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003596:	a3 68       	lsl	r8,0x2
80003598:	ee 08 00 08 	add	r8,r7,r8
8000359c:	f0 f8 fe 20 	ld.w	r8,r8[-480]
800035a0:	ee fb ff e0 	ld.w	r11,r7[-32]
800035a4:	10 9c       	mov	r12,r8
800035a6:	f0 16 00 08 	mcall	r6[32]
800035aa:	18 98       	mov	r8,r12
800035ac:	10 99       	mov	r9,r8
800035ae:	ea 08 15 02 	lsl	r8,r5,0x2
800035b2:	ee 08 00 08 	add	r8,r7,r8
800035b6:	f1 49 fe 14 	st.w	r8[-492],r9
				planes[ind].normal[i] = unitW[i];
800035ba:	ef 29 ff ce 	ld.sb	r9,r7[-50]
800035be:	ef 2b ff cf 	ld.sb	r11,r7[-49]
800035c2:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800035c6:	a3 68       	lsl	r8,0x2
800035c8:	ee 08 00 08 	add	r8,r7,r8
800035cc:	f0 fa fe 14 	ld.w	r10,r8[-492]
800035d0:	12 98       	mov	r8,r9
800035d2:	a1 78       	lsl	r8,0x1
800035d4:	12 08       	add	r8,r9
800035d6:	a1 78       	lsl	r8,0x1
800035d8:	16 08       	add	r8,r11
800035da:	a3 68       	lsl	r8,0x2
800035dc:	ee 08 00 08 	add	r8,r7,r8
800035e0:	f1 4a fe 64 	st.w	r8[-412],r10
				u[i] = (combinedRadius * invTimeStep - wLength) * unitW[i];
800035e4:	ef 2a ff cf 	ld.sb	r10,r7[-49]
800035e8:	ee f9 ff d0 	ld.w	r9,r7[-48]
800035ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800035f0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800035f4:	ee f8 ff e0 	ld.w	r8,r7[-32]
800035f8:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800035fc:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003600:	a3 68       	lsl	r8,0x2
80003602:	ee 08 00 08 	add	r8,r7,r8
80003606:	f0 f8 fe 14 	ld.w	r8,r8[-492]
8000360a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000360e:	f4 08 15 02 	lsl	r8,r10,0x2
80003612:	ee 08 00 08 	add	r8,r7,r8
80003616:	f1 49 fe 08 	st.w	r8[-504],r9
			for (i=0;i<3;i++)
			{
				w[i] = relativeVelocity[i] - invTimeStep * relativePosition[i];
			}
			wLength = vector_norm(w);
			for (i=0;i<3;i++)
8000361a:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000361e:	2f f8       	sub	r8,-1
80003620:	ef 68 ff cf 	st.b	r7[-49],r8
80003624:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003628:	30 28       	mov	r8,2
8000362a:	f0 09 18 00 	cp.b	r9,r8
8000362e:	fe 9a ff b0 	brle	8000358e <computeNewVelocity+0x762>
				planes[ind].normal[i] = unitW[i];
				u[i] = (combinedRadius * invTimeStep - wLength) * unitW[i];
			}
		}
		
		for (i=0;i<3;i++)
80003632:	30 08       	mov	r8,0
80003634:	ef 68 ff cf 	st.b	r7[-49],r8
80003638:	c3 f8       	rjmp	800036b6 <computeNewVelocity+0x88a>
		{
			planes[ind].point[i] = centralData->position_estimator.vel_bf[i] + 0.5 * u[i];
8000363a:	ef 25 ff ce 	ld.sb	r5,r7[-50]
8000363e:	ef 21 ff cf 	ld.sb	r1,r7[-49]
80003642:	ec f8 00 00 	ld.w	r8,r6[0]
80003646:	70 08       	ld.w	r8,r8[0x0]
80003648:	ef 29 ff cf 	ld.sb	r9,r7[-49]
8000364c:	f2 c9 fc a6 	sub	r9,r9,-858
80003650:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003654:	10 9c       	mov	r12,r8
80003656:	f0 16 00 02 	mcall	r6[8]
8000365a:	14 92       	mov	r2,r10
8000365c:	16 93       	mov	r3,r11
8000365e:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003662:	a3 68       	lsl	r8,0x2
80003664:	ee 08 00 08 	add	r8,r7,r8
80003668:	f0 f8 fe 08 	ld.w	r8,r8[-504]
8000366c:	10 9c       	mov	r12,r8
8000366e:	f0 16 00 02 	mcall	r6[8]
80003672:	30 08       	mov	r8,0
80003674:	fc 19 3f e0 	movh	r9,0x3fe0
80003678:	f0 16 00 03 	mcall	r6[12]
8000367c:	14 98       	mov	r8,r10
8000367e:	16 99       	mov	r9,r11
80003680:	04 9a       	mov	r10,r2
80003682:	06 9b       	mov	r11,r3
80003684:	f0 16 00 05 	mcall	r6[20]
80003688:	14 98       	mov	r8,r10
8000368a:	16 99       	mov	r9,r11
8000368c:	10 9a       	mov	r10,r8
8000368e:	12 9b       	mov	r11,r9
80003690:	f0 16 00 09 	mcall	r6[36]
80003694:	18 99       	mov	r9,r12
80003696:	0a 98       	mov	r8,r5
80003698:	a1 78       	lsl	r8,0x1
8000369a:	0a 08       	add	r8,r5
8000369c:	a1 78       	lsl	r8,0x1
8000369e:	02 08       	add	r8,r1
800036a0:	2f d8       	sub	r8,-3
800036a2:	a3 68       	lsl	r8,0x2
800036a4:	ee 08 00 08 	add	r8,r7,r8
800036a8:	f1 49 fe 64 	st.w	r8[-412],r9
				planes[ind].normal[i] = unitW[i];
				u[i] = (combinedRadius * invTimeStep - wLength) * unitW[i];
			}
		}
		
		for (i=0;i<3;i++)
800036ac:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800036b0:	2f f8       	sub	r8,-1
800036b2:	ef 68 ff cf 	st.b	r7[-49],r8
800036b6:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800036ba:	30 28       	mov	r8,2
800036bc:	f0 09 18 00 	cp.b	r9,r8
800036c0:	fe 9a ff bd 	brle	8000363a <computeNewVelocity+0x80e>
	{
		NewVelocity[i] = OptimalVelocity[i];
	}
	
	/* Create agent ORCA planes. */
	for (ind=0; ind<centralData->number_of_neighbors; ind++)
800036c4:	ef 38 ff ce 	ld.ub	r8,r7[-50]
800036c8:	2f f8       	sub	r8,-1
800036ca:	ef 68 ff ce 	st.b	r7[-50],r8
800036ce:	ef 29 ff ce 	ld.sb	r9,r7[-50]
800036d2:	ec f8 00 00 	ld.w	r8,r6[0]
800036d6:	70 08       	ld.w	r8,r8[0x0]
800036d8:	f1 38 10 fc 	ld.ub	r8,r8[4348]
800036dc:	10 39       	cp.w	r9,r8
800036de:	fe 95 fb d8 	brlt	80002e8e <computeNewVelocity+0x62>
		{
			planes[ind].point[i] = centralData->position_estimator.vel_bf[i] + 0.5 * u[i];
		}
		
	}
	float planeFail = linearProgram3(planes, OptimalVelocity, MAXSPEED, NewVelocity, false);
800036e2:	ee cc 01 9c 	sub	r12,r7,412
800036e6:	30 08       	mov	r8,0
800036e8:	ee f9 fd dc 	ld.w	r9,r7[-548]
800036ec:	fc 1a 40 90 	movh	r10,0x4090
800036f0:	ee fb fd e0 	ld.w	r11,r7[-544]
800036f4:	f0 16 01 0d 	mcall	r6[1076]
800036f8:	18 98       	mov	r8,r12
800036fa:	ef 48 ff e8 	st.w	r7[-24],r8
	if (planeFail < centralData->number_of_neighbors)
800036fe:	ec f8 00 00 	ld.w	r8,r6[0]
80003702:	70 08       	ld.w	r8,r8[0x0]
80003704:	f1 38 10 fc 	ld.ub	r8,r8[4348]
80003708:	e5 a6 0a 08 	cop	cp0,cr10,cr0,cr8,0x4c
8000370c:	30 18       	mov	r8,1
8000370e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003712:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003716:	e0 8c 00 04 	brvs	8000371e <computeNewVelocity+0x8f2>
8000371a:	e0 89 00 03 	brgt	80003720 <computeNewVelocity+0x8f4>
8000371e:	30 08       	mov	r8,0
80003720:	5c 58       	castu.b	r8
80003722:	c1 10       	breq	80003744 <computeNewVelocity+0x918>
	{
		linearProgram4(planes,planeFail,MAXSPEED,NewVelocity);
80003724:	ee f8 ff e8 	ld.w	r8,r7[-24]
80003728:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000372c:	5c 58       	castu.b	r8
8000372e:	f7 d8 b0 08 	bfexts	r11,r8,0x0,0x8
80003732:	ee c8 01 9c 	sub	r8,r7,412
80003736:	ee f9 fd dc 	ld.w	r9,r7[-548]
8000373a:	fc 1a 40 90 	movh	r10,0x4090
8000373e:	10 9c       	mov	r12,r8
80003740:	f0 16 02 0f 	mcall	r6[2108]
	}
	
	loop_count_orca = loop_count_orca++ % 100;
80003744:	ec f8 02 38 	ld.w	r8,r6[568]
80003748:	11 89       	ld.ub	r9,r8[0x0]
8000374a:	f1 d9 b0 08 	bfexts	r8,r9,0x0,0x8
8000374e:	e0 6a 85 1f 	mov	r10,34079
80003752:	ea 1a 51 eb 	orh	r10,0x51eb
80003756:	f0 0a 04 4a 	muls.d	r10,r8,r10
8000375a:	a5 5b       	asr	r11,0x5
8000375c:	f0 0a 14 1f 	asr	r10,r8,0x1f
80003760:	f6 0a 01 0a 	sub	r10,r11,r10
80003764:	f4 0a 10 64 	mul	r10,r10,100
80003768:	14 18       	sub	r8,r10
8000376a:	5c 58       	castu.b	r8
8000376c:	ec fa 02 38 	ld.w	r10,r6[568]
80003770:	b4 88       	st.b	r10[0x0],r8
80003772:	f2 c8 ff ff 	sub	r8,r9,-1
80003776:	5c 58       	castu.b	r8
80003778:	ec f9 02 38 	ld.w	r9,r6[568]
8000377c:	b2 88       	st.b	r9[0x0],r8
	
	float orca_diff[3];
	for (i=0;i<3;i++)
8000377e:	30 08       	mov	r8,0
80003780:	ef 68 ff cf 	st.b	r7[-49],r8
80003784:	c1 f8       	rjmp	800037c2 <computeNewVelocity+0x996>
	{
		orca_diff[i] = OptimalVelocity[i] - NewVelocity[i];
80003786:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000378a:	ef 29 ff cf 	ld.sb	r9,r7[-49]
8000378e:	a3 69       	lsl	r9,0x2
80003790:	ee fa fd e0 	ld.w	r10,r7[-544]
80003794:	f4 09 00 09 	add	r9,r10,r9
80003798:	72 0a       	ld.w	r10,r9[0x0]
8000379a:	ef 29 ff cf 	ld.sb	r9,r7[-49]
8000379e:	a3 69       	lsl	r9,0x2
800037a0:	ee fb fd dc 	ld.w	r11,r7[-548]
800037a4:	f6 09 00 09 	add	r9,r11,r9
800037a8:	72 09       	ld.w	r9,r9[0x0]
800037aa:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800037ae:	a3 68       	lsl	r8,0x2
800037b0:	ee 08 00 08 	add	r8,r7,r8
800037b4:	f1 49 fd f0 	st.w	r8[-528],r9
	}
	
	loop_count_orca = loop_count_orca++ % 100;
	
	float orca_diff[3];
	for (i=0;i<3;i++)
800037b8:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800037bc:	2f f8       	sub	r8,-1
800037be:	ef 68 ff cf 	st.b	r7[-49],r8
800037c2:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800037c6:	30 28       	mov	r8,2
800037c8:	f0 09 18 00 	cp.b	r9,r8
800037cc:	fe 9a ff dd 	brle	80003786 <computeNewVelocity+0x95a>
	{
		orca_diff[i] = OptimalVelocity[i] - NewVelocity[i];
	}
	
	if (loop_count_orca == 0)
800037d0:	ec f8 02 38 	ld.w	r8,r6[568]
800037d4:	11 88       	ld.ub	r8,r8[0x0]
800037d6:	58 08       	cp.w	r8,0
800037d8:	c2 11       	brne	8000381a <computeNewVelocity+0x9ee>
	{
		dbg_print("Orca diffvel:");
800037da:	fe cc 09 d2 	sub	r12,pc,2514
800037de:	f0 16 00 01 	mcall	r6[4]
		dbg_print_vector(orca_diff,2);
800037e2:	ee c8 02 10 	sub	r8,r7,528
800037e6:	30 2b       	mov	r11,2
800037e8:	10 9c       	mov	r12,r8
800037ea:	f0 16 00 cd 	mcall	r6[820]
		dbg_print(", Optimal:");
800037ee:	fe cc 09 d6 	sub	r12,pc,2518
800037f2:	f0 16 00 01 	mcall	r6[4]
		dbg_print_vector(OptimalVelocity,2);
800037f6:	30 2b       	mov	r11,2
800037f8:	ee fc fd e0 	ld.w	r12,r7[-544]
800037fc:	f0 16 00 cd 	mcall	r6[820]
		dbg_print(", New:");
80003800:	fe cc 09 dc 	sub	r12,pc,2524
80003804:	f0 16 00 01 	mcall	r6[4]
		dbg_print_vector(NewVelocity,2);
80003808:	30 2b       	mov	r11,2
8000380a:	ee fc fd dc 	ld.w	r12,r7[-548]
8000380e:	f0 16 00 cd 	mcall	r6[820]
		dbg_print("\n");
80003812:	fe cc 0a 0e 	sub	r12,pc,2574
80003816:	f0 16 00 01 	mcall	r6[4]
			//dbg_print_vector(NewVelocity,2);
			//dbg_print("\n");
		//}
	}

}
8000381a:	fe 3d fd cc 	sub	sp,-564
8000381e:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
80003822:	00 00       	add	r0,r0
80003824:	80 00       	ld.sh	r0,r0[0x0]
80003826:	2c be       	sub	lr,-53

80003828 <linearProgram1>:

bool linearProgram1(plane_t planes[], int8_t index, line_t line, float maxSpeed, float OptimalVelocity[], float NewVelocity[], bool directionOpt)
{
80003828:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000382c:	1a 97       	mov	r7,sp
8000382e:	21 7d       	sub	sp,92
80003830:	fe f6 04 a8 	ld.w	r6,pc[1192]
80003834:	1e 26       	rsub	r6,pc
80003836:	ee c5 ff ec 	sub	r5,r7,-20
8000383a:	ef 4c ff b8 	st.w	r7[-72],r12
8000383e:	ef 4a ff b0 	st.w	r7[-80],r10
80003842:	ef 49 ff ac 	st.w	r7[-84],r9
80003846:	ef 48 ff a8 	st.w	r7[-88],r8
8000384a:	6a 68       	ld.w	r8,r5[0x18]
8000384c:	16 99       	mov	r9,r11
8000384e:	ef 69 ff b4 	st.b	r7[-76],r9
80003852:	ef 68 ff a4 	st.b	r7[-92],r8
	int8_t i;
	
	float dotProduct = scalar_product(line.point,line.direction);
80003856:	ea c8 ff f4 	sub	r8,r5,-12
8000385a:	0a 9b       	mov	r11,r5
8000385c:	10 9c       	mov	r12,r8
8000385e:	fe b0 f8 17 	rcall	8000288c <scalar_product>
80003862:	18 98       	mov	r8,r12
80003864:	ef 48 ff d8 	st.w	r7[-40],r8
	float discriminant = SQR(dotProduct) + SQR(maxSpeed) - vector_norm_sqr(line.point);
80003868:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000386c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003870:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003874:	ee fa ff b0 	ld.w	r10,r7[-80]
80003878:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000387c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80003880:	e5 a0 03 98 	cop	cp0,cr3,cr9,cr8,0x40
80003884:	ea c8 ff f4 	sub	r8,r5,-12
80003888:	10 9c       	mov	r12,r8
8000388a:	fe b0 f9 d1 	rcall	80002c2c <vector_norm_sqr>
8000388e:	18 98       	mov	r8,r12
80003890:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
80003894:	ef 48 ff dc 	st.w	r7[-36],r8
	
	if (discriminant < 0.0)
80003898:	30 18       	mov	r8,1
8000389a:	ee fa ff dc 	ld.w	r10,r7[-36]
8000389e:	30 09       	mov	r9,0
800038a0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800038a4:	e0 8c 00 03 	brvs	800038aa <linearProgram1+0x82>
800038a8:	c0 25       	brlt	800038ac <linearProgram1+0x84>
800038aa:	30 08       	mov	r8,0
800038ac:	5c 58       	castu.b	r8
800038ae:	c0 40       	breq	800038b6 <linearProgram1+0x8e>
	{
		/* Max speed sphere fully invalidates line. */
		return false;
800038b0:	30 08       	mov	r8,0
800038b2:	e0 8f 02 0e 	bral	80003cce <linearProgram1+0x4a6>
	}
	
	float sqrtDiscriminant = fast_sqrt(discriminant);
800038b6:	ee fc ff dc 	ld.w	r12,r7[-36]
800038ba:	fe b0 f9 4f 	rcall	80002b58 <fast_sqrt>
800038be:	18 98       	mov	r8,r12
800038c0:	ef 48 ff e0 	st.w	r7[-32],r8
	float tLeft = -dotProduct - sqrtDiscriminant;
800038c4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800038c8:	10 99       	mov	r9,r8
800038ca:	ee 19 80 00 	eorh	r9,0x8000
800038ce:	ee f8 ff e0 	ld.w	r8,r7[-32]
800038d2:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800038d6:	ef 48 ff e4 	st.w	r7[-28],r8
	float tRight = -dotProduct + sqrtDiscriminant;
800038da:	ee f9 ff e0 	ld.w	r9,r7[-32]
800038de:	ee f8 ff d8 	ld.w	r8,r7[-40]
800038e2:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800038e6:	ef 48 ff e8 	st.w	r7[-24],r8
	
	int8_t index2;
	for (index2=0;index2<index;index2++)
800038ea:	30 08       	mov	r8,0
800038ec:	ef 68 ff ef 	st.b	r7[-17],r8
800038f0:	cb e8       	rjmp	80003a6c <linearProgram1+0x244>
	{
		float diffPoints[3];
		for (i=0;i<3;i++)
800038f2:	30 08       	mov	r8,0
800038f4:	ef 68 ff d7 	st.b	r7[-41],r8
800038f8:	c2 48       	rjmp	80003940 <linearProgram1+0x118>
		{
			diffPoints[i] = planes[index2].point[i] - line.point[i];
800038fa:	ef 2a ff d7 	ld.sb	r10,r7[-41]
800038fe:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80003902:	12 98       	mov	r8,r9
80003904:	a1 78       	lsl	r8,0x1
80003906:	12 08       	add	r8,r9
80003908:	a3 78       	lsl	r8,0x3
8000390a:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000390e:	f2 08 00 08 	add	r8,r9,r8
80003912:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003916:	2f d9       	sub	r9,-3
80003918:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000391c:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003920:	2f d8       	sub	r8,-3
80003922:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
80003926:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000392a:	f4 08 15 02 	lsl	r8,r10,0x2
8000392e:	ee 08 00 08 	add	r8,r7,r8
80003932:	f1 49 ff c8 	st.w	r8[-56],r9
	
	int8_t index2;
	for (index2=0;index2<index;index2++)
	{
		float diffPoints[3];
		for (i=0;i<3;i++)
80003936:	ef 38 ff d7 	ld.ub	r8,r7[-41]
8000393a:	2f f8       	sub	r8,-1
8000393c:	ef 68 ff d7 	st.b	r7[-41],r8
80003940:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003944:	30 28       	mov	r8,2
80003946:	f0 09 18 00 	cp.b	r9,r8
8000394a:	fe 9a ff d8 	brle	800038fa <linearProgram1+0xd2>
		{
			diffPoints[i] = planes[index2].point[i] - line.point[i];
		}
		float numerator = scalar_product(diffPoints, planes[index2].normal);
8000394e:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80003952:	12 98       	mov	r8,r9
80003954:	a1 78       	lsl	r8,0x1
80003956:	12 08       	add	r8,r9
80003958:	a3 78       	lsl	r8,0x3
8000395a:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000395e:	f2 08 00 08 	add	r8,r9,r8
80003962:	10 99       	mov	r9,r8
80003964:	ee c8 00 38 	sub	r8,r7,56
80003968:	12 9b       	mov	r11,r9
8000396a:	10 9c       	mov	r12,r8
8000396c:	fe b0 f7 90 	rcall	8000288c <scalar_product>
80003970:	18 98       	mov	r8,r12
80003972:	ef 48 ff f0 	st.w	r7[-16],r8
		float denominator = scalar_product(line.direction, planes[index2].normal);
80003976:	ef 29 ff ef 	ld.sb	r9,r7[-17]
8000397a:	12 98       	mov	r8,r9
8000397c:	a1 78       	lsl	r8,0x1
8000397e:	12 08       	add	r8,r9
80003980:	a3 78       	lsl	r8,0x3
80003982:	ee f9 ff b8 	ld.w	r9,r7[-72]
80003986:	f2 08 00 08 	add	r8,r9,r8
8000398a:	10 9b       	mov	r11,r8
8000398c:	0a 9c       	mov	r12,r5
8000398e:	fe b0 f7 7f 	rcall	8000288c <scalar_product>
80003992:	18 98       	mov	r8,r12
80003994:	ef 48 ff f4 	st.w	r7[-12],r8
		
		if (SQR(denominator) <= RVO_EPSILON)
80003998:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000399c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800039a0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800039a4:	10 9c       	mov	r12,r8
800039a6:	f0 16 00 02 	mcall	r6[8]
800039aa:	14 98       	mov	r8,r10
800039ac:	16 99       	mov	r9,r11
800039ae:	30 03       	mov	r3,0
800039b0:	e0 6a 43 2d 	mov	r10,17197
800039b4:	ea 1a eb 1c 	orh	r10,0xeb1c
800039b8:	e0 6b 36 e2 	mov	r11,14050
800039bc:	ea 1b 3f 1a 	orh	r11,0x3f1a
800039c0:	f0 16 00 7d 	mcall	r6[500]
800039c4:	18 98       	mov	r8,r12
800039c6:	58 08       	cp.w	r8,0
800039c8:	c0 20       	breq	800039cc <linearProgram1+0x1a4>
800039ca:	30 13       	mov	r3,1
800039cc:	f1 d3 c0 08 	bfextu	r8,r3,0x0,0x8
800039d0:	c1 00       	breq	800039f0 <linearProgram1+0x1c8>
		{
			/* Lines line is (almost) parallel to plane i. */
			if (numerator > 0.0)
800039d2:	30 18       	mov	r8,1
800039d4:	ee fa ff f0 	ld.w	r10,r7[-16]
800039d8:	30 09       	mov	r9,0
800039da:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800039de:	e0 8c 00 04 	brvs	800039e6 <linearProgram1+0x1be>
800039e2:	e0 89 00 03 	brgt	800039e8 <linearProgram1+0x1c0>
800039e6:	30 08       	mov	r8,0
800039e8:	5c 58       	castu.b	r8
800039ea:	c3 b0       	breq	80003a60 <linearProgram1+0x238>
			{
				return false;
800039ec:	30 08       	mov	r8,0
800039ee:	c7 09       	rjmp	80003cce <linearProgram1+0x4a6>
			}else{
				continue;
			}
		}
		
		float t = numerator / denominator;
800039f0:	ee fb ff f4 	ld.w	r11,r7[-12]
800039f4:	ee fc ff f0 	ld.w	r12,r7[-16]
800039f8:	f0 16 00 08 	mcall	r6[32]
800039fc:	18 98       	mov	r8,r12
800039fe:	ef 48 ff f8 	st.w	r7[-8],r8
		
		if (denominator >= 0.0)
80003a02:	30 18       	mov	r8,1
80003a04:	ee fa ff f4 	ld.w	r10,r7[-12]
80003a08:	30 09       	mov	r9,0
80003a0a:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003a0e:	e0 8c 00 03 	brvs	80003a14 <linearProgram1+0x1ec>
80003a12:	c0 24       	brge	80003a16 <linearProgram1+0x1ee>
80003a14:	30 08       	mov	r8,0
80003a16:	5c 58       	castu.b	r8
80003a18:	c0 b0       	breq	80003a2e <linearProgram1+0x206>
		{
			/* Plane i bounds line on the left. */
			tLeft = f_max(tLeft, t);
80003a1a:	ee fb ff f8 	ld.w	r11,r7[-8]
80003a1e:	ee fc ff e4 	ld.w	r12,r7[-28]
80003a22:	fe b0 f9 52 	rcall	80002cc6 <f_max>
80003a26:	18 98       	mov	r8,r12
80003a28:	ef 48 ff e4 	st.w	r7[-28],r8
80003a2c:	c0 a8       	rjmp	80003a40 <linearProgram1+0x218>
		}else{
			/* Plane i bounds line on the right. */
			tRight = f_min(tRight, t);
80003a2e:	ee fb ff f8 	ld.w	r11,r7[-8]
80003a32:	ee fc ff e8 	ld.w	r12,r7[-24]
80003a36:	fe b0 f9 29 	rcall	80002c88 <f_min>
80003a3a:	18 98       	mov	r8,r12
80003a3c:	ef 48 ff e8 	st.w	r7[-24],r8
		}
		
		if (tLeft > tRight)
80003a40:	30 18       	mov	r8,1
80003a42:	ee fa ff e4 	ld.w	r10,r7[-28]
80003a46:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003a4a:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003a4e:	e0 8c 00 04 	brvs	80003a56 <linearProgram1+0x22e>
80003a52:	e0 89 00 03 	brgt	80003a58 <linearProgram1+0x230>
80003a56:	30 08       	mov	r8,0
80003a58:	5c 58       	castu.b	r8
80003a5a:	c0 40       	breq	80003a62 <linearProgram1+0x23a>
		{
			return false;
80003a5c:	30 08       	mov	r8,0
80003a5e:	c3 89       	rjmp	80003cce <linearProgram1+0x4a6>
			/* Lines line is (almost) parallel to plane i. */
			if (numerator > 0.0)
			{
				return false;
			}else{
				continue;
80003a60:	d7 03       	nop
	float sqrtDiscriminant = fast_sqrt(discriminant);
	float tLeft = -dotProduct - sqrtDiscriminant;
	float tRight = -dotProduct + sqrtDiscriminant;
	
	int8_t index2;
	for (index2=0;index2<index;index2++)
80003a62:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80003a66:	2f f8       	sub	r8,-1
80003a68:	ef 68 ff ef 	st.b	r7[-17],r8
80003a6c:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80003a70:	ef 38 ff b4 	ld.ub	r8,r7[-76]
80003a74:	f0 09 18 00 	cp.b	r9,r8
80003a78:	fe 95 ff 3d 	brlt	800038f2 <linearProgram1+0xca>
		{
			return false;
		}
	}
	
	if (directionOpt)
80003a7c:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80003a80:	30 08       	mov	r8,0
80003a82:	f0 09 18 00 	cp.b	r9,r8
80003a86:	c6 20       	breq	80003b4a <linearProgram1+0x322>
	{
		/* Optimize direction. */
		if (scalar_product(OptimalVelocity, line.direction) > 0.0f) {
80003a88:	0a 9b       	mov	r11,r5
80003a8a:	ee fc ff ac 	ld.w	r12,r7[-84]
80003a8e:	fe b0 f6 ff 	rcall	8000288c <scalar_product>
80003a92:	18 9a       	mov	r10,r12
80003a94:	30 18       	mov	r8,1
80003a96:	30 09       	mov	r9,0
80003a98:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003a9c:	e0 8c 00 04 	brvs	80003aa4 <linearProgram1+0x27c>
80003aa0:	e0 89 00 03 	brgt	80003aa6 <linearProgram1+0x27e>
80003aa4:	30 08       	mov	r8,0
80003aa6:	5c 58       	castu.b	r8
80003aa8:	c2 90       	breq	80003afa <linearProgram1+0x2d2>
			/* Take right extreme. */
			for (i=0;i<3;i++)
80003aaa:	30 08       	mov	r8,0
80003aac:	ef 68 ff d7 	st.b	r7[-41],r8
80003ab0:	c1 d8       	rjmp	80003aea <linearProgram1+0x2c2>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
80003ab2:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003ab6:	a3 68       	lsl	r8,0x2
80003ab8:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003abc:	f2 08 00 08 	add	r8,r9,r8
80003ac0:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003ac4:	2f d9       	sub	r9,-3
80003ac6:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003aca:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003ace:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003ad2:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003ad6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003ada:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003ade:	91 09       	st.w	r8[0x0],r9
	if (directionOpt)
	{
		/* Optimize direction. */
		if (scalar_product(OptimalVelocity, line.direction) > 0.0f) {
			/* Take right extreme. */
			for (i=0;i<3;i++)
80003ae0:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003ae4:	2f f8       	sub	r8,-1
80003ae6:	ef 68 ff d7 	st.b	r7[-41],r8
80003aea:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003aee:	30 28       	mov	r8,2
80003af0:	f0 09 18 00 	cp.b	r9,r8
80003af4:	fe 9a ff df 	brle	80003ab2 <linearProgram1+0x28a>
80003af8:	ce a8       	rjmp	80003ccc <linearProgram1+0x4a4>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else {
			/* Take left extreme. */
			for (i=0;i<3;i++)
80003afa:	30 08       	mov	r8,0
80003afc:	ef 68 ff d7 	st.b	r7[-41],r8
80003b00:	c1 d8       	rjmp	80003b3a <linearProgram1+0x312>
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
80003b02:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003b06:	a3 68       	lsl	r8,0x2
80003b08:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003b0c:	f2 08 00 08 	add	r8,r9,r8
80003b10:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b14:	2f d9       	sub	r9,-3
80003b16:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003b1a:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b1e:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003b22:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003b26:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003b2a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003b2e:	91 09       	st.w	r8[0x0],r9
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else {
			/* Take left extreme. */
			for (i=0;i<3;i++)
80003b30:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003b34:	2f f8       	sub	r8,-1
80003b36:	ef 68 ff d7 	st.b	r7[-41],r8
80003b3a:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003b3e:	30 28       	mov	r8,2
80003b40:	f0 09 18 00 	cp.b	r9,r8
80003b44:	fe 9a ff df 	brle	80003b02 <linearProgram1+0x2da>
80003b48:	cc 28       	rjmp	80003ccc <linearProgram1+0x4a4>
			}
		}
	}else{
		/* Optimize closest point. */
		float diffVelPoint[3];
		for (i=0;i<3;i++)
80003b4a:	30 08       	mov	r8,0
80003b4c:	ef 68 ff d7 	st.b	r7[-41],r8
80003b50:	c1 c8       	rjmp	80003b88 <linearProgram1+0x360>
		{
			diffVelPoint[i] = OptimalVelocity[i] - line.point[i];
80003b52:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003b56:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b5a:	a3 69       	lsl	r9,0x2
80003b5c:	ee fa ff ac 	ld.w	r10,r7[-84]
80003b60:	f4 09 00 09 	add	r9,r10,r9
80003b64:	72 0a       	ld.w	r10,r9[0x0]
80003b66:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b6a:	2f d9       	sub	r9,-3
80003b6c:	ea 09 03 29 	ld.w	r9,r5[r9<<0x2]
80003b70:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80003b74:	a3 68       	lsl	r8,0x2
80003b76:	ee 08 00 08 	add	r8,r7,r8
80003b7a:	f1 49 ff bc 	st.w	r8[-68],r9
			}
		}
	}else{
		/* Optimize closest point. */
		float diffVelPoint[3];
		for (i=0;i<3;i++)
80003b7e:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003b82:	2f f8       	sub	r8,-1
80003b84:	ef 68 ff d7 	st.b	r7[-41],r8
80003b88:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003b8c:	30 28       	mov	r8,2
80003b8e:	f0 09 18 00 	cp.b	r9,r8
80003b92:	fe 9a ff e0 	brle	80003b52 <linearProgram1+0x32a>
		{
			diffVelPoint[i] = OptimalVelocity[i] - line.point[i];
		}
		
		float t = scalar_product(line.direction, diffVelPoint);
80003b96:	ee c8 00 44 	sub	r8,r7,68
80003b9a:	10 9b       	mov	r11,r8
80003b9c:	0a 9c       	mov	r12,r5
80003b9e:	fe b0 f6 77 	rcall	8000288c <scalar_product>
80003ba2:	18 98       	mov	r8,r12
80003ba4:	ef 48 ff fc 	st.w	r7[-4],r8

		if (t < tLeft)
80003ba8:	30 18       	mov	r8,1
80003baa:	ee fa ff fc 	ld.w	r10,r7[-4]
80003bae:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003bb2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003bb6:	e0 8c 00 03 	brvs	80003bbc <linearProgram1+0x394>
80003bba:	c0 25       	brlt	80003bbe <linearProgram1+0x396>
80003bbc:	30 08       	mov	r8,0
80003bbe:	5c 58       	castu.b	r8
80003bc0:	c2 90       	breq	80003c12 <linearProgram1+0x3ea>
		{
			for (i=0;i<3;i++)
80003bc2:	30 08       	mov	r8,0
80003bc4:	ef 68 ff d7 	st.b	r7[-41],r8
80003bc8:	c1 d8       	rjmp	80003c02 <linearProgram1+0x3da>
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
80003bca:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003bce:	a3 68       	lsl	r8,0x2
80003bd0:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003bd4:	f2 08 00 08 	add	r8,r9,r8
80003bd8:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003bdc:	2f d9       	sub	r9,-3
80003bde:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003be2:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003be6:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003bea:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003bee:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003bf2:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003bf6:	91 09       	st.w	r8[0x0],r9
		
		float t = scalar_product(line.direction, diffVelPoint);

		if (t < tLeft)
		{
			for (i=0;i<3;i++)
80003bf8:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003bfc:	2f f8       	sub	r8,-1
80003bfe:	ef 68 ff d7 	st.b	r7[-41],r8
80003c02:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003c06:	30 28       	mov	r8,2
80003c08:	f0 09 18 00 	cp.b	r9,r8
80003c0c:	fe 9a ff df 	brle	80003bca <linearProgram1+0x3a2>
80003c10:	c5 e8       	rjmp	80003ccc <linearProgram1+0x4a4>
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
			}
		}else if (t > tRight){
80003c12:	30 18       	mov	r8,1
80003c14:	ee fa ff fc 	ld.w	r10,r7[-4]
80003c18:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003c1c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003c20:	e0 8c 00 04 	brvs	80003c28 <linearProgram1+0x400>
80003c24:	e0 89 00 03 	brgt	80003c2a <linearProgram1+0x402>
80003c28:	30 08       	mov	r8,0
80003c2a:	5c 58       	castu.b	r8
80003c2c:	c2 90       	breq	80003c7e <linearProgram1+0x456>
			for (i=0;i<3;i++)
80003c2e:	30 08       	mov	r8,0
80003c30:	ef 68 ff d7 	st.b	r7[-41],r8
80003c34:	c1 d8       	rjmp	80003c6e <linearProgram1+0x446>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
80003c36:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003c3a:	a3 68       	lsl	r8,0x2
80003c3c:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003c40:	f2 08 00 08 	add	r8,r9,r8
80003c44:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003c48:	2f d9       	sub	r9,-3
80003c4a:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003c4e:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003c52:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003c56:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003c5a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003c5e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003c62:	91 09       	st.w	r8[0x0],r9
			for (i=0;i<3;i++)
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
			}
		}else if (t > tRight){
			for (i=0;i<3;i++)
80003c64:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003c68:	2f f8       	sub	r8,-1
80003c6a:	ef 68 ff d7 	st.b	r7[-41],r8
80003c6e:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003c72:	30 28       	mov	r8,2
80003c74:	f0 09 18 00 	cp.b	r9,r8
80003c78:	fe 9a ff df 	brle	80003c36 <linearProgram1+0x40e>
80003c7c:	c2 88       	rjmp	80003ccc <linearProgram1+0x4a4>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else{
			for (i=0;i<3;i++)
80003c7e:	30 08       	mov	r8,0
80003c80:	ef 68 ff d7 	st.b	r7[-41],r8
80003c84:	c1 d8       	rjmp	80003cbe <linearProgram1+0x496>
			{
				NewVelocity[i] = line.point[i] + t * line.direction[i];
80003c86:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003c8a:	a3 68       	lsl	r8,0x2
80003c8c:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003c90:	f2 08 00 08 	add	r8,r9,r8
80003c94:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003c98:	2f d9       	sub	r9,-3
80003c9a:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003c9e:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003ca2:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003ca6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003caa:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003cae:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003cb2:	91 09       	st.w	r8[0x0],r9
			for (i=0;i<3;i++)
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else{
			for (i=0;i<3;i++)
80003cb4:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003cb8:	2f f8       	sub	r8,-1
80003cba:	ef 68 ff d7 	st.b	r7[-41],r8
80003cbe:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003cc2:	30 28       	mov	r8,2
80003cc4:	f0 09 18 00 	cp.b	r9,r8
80003cc8:	fe 9a ff df 	brle	80003c86 <linearProgram1+0x45e>
			{
				NewVelocity[i] = line.point[i] + t * line.direction[i];
			}
		}
	}
	return true;
80003ccc:	30 18       	mov	r8,1
}
80003cce:	10 9c       	mov	r12,r8
80003cd0:	2e 9d       	sub	sp,-92
80003cd2:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80003cd6:	00 00       	add	r0,r0
80003cd8:	80 00       	ld.sh	r0,r0[0x0]
80003cda:	36 b8       	mov	r8,107

80003cdc <linearProgram2>:

bool linearProgram2(plane_t planes[], int8_t ind, float maxSpeed, float OptimalVelocity[], float NewVelocity[], bool directionOpt)
{
80003cdc:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80003ce0:	1a 97       	mov	r7,sp
80003ce2:	fa cd 00 cc 	sub	sp,sp,204
80003ce6:	fe f6 09 6e 	ld.w	r6,pc[2414]
80003cea:	1e 26       	rsub	r6,pc
80003cec:	ee ce ff ec 	sub	lr,r7,-20
80003cf0:	ef 4c ff 48 	st.w	r7[-184],r12
80003cf4:	ef 4a ff 40 	st.w	r7[-192],r10
80003cf8:	ef 49 ff 3c 	st.w	r7[-196],r9
80003cfc:	ef 48 ff 38 	st.w	r7[-200],r8
80003d00:	7c 08       	ld.w	r8,lr[0x0]
80003d02:	16 99       	mov	r9,r11
80003d04:	ef 69 ff 44 	st.b	r7[-188],r9
80003d08:	ef 68 ff 34 	st.b	r7[-204],r8
	int8_t i;
	
	float planeDist = scalar_product(planes[ind].point,planes[ind].normal);
80003d0c:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003d10:	12 98       	mov	r8,r9
80003d12:	a1 78       	lsl	r8,0x1
80003d14:	12 08       	add	r8,r9
80003d16:	a3 78       	lsl	r8,0x3
80003d18:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003d1c:	f2 08 00 08 	add	r8,r9,r8
80003d20:	10 9a       	mov	r10,r8
80003d22:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003d26:	12 98       	mov	r8,r9
80003d28:	a1 78       	lsl	r8,0x1
80003d2a:	12 08       	add	r8,r9
80003d2c:	a3 78       	lsl	r8,0x3
80003d2e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003d32:	f2 08 00 08 	add	r8,r9,r8
80003d36:	2f 48       	sub	r8,-12
80003d38:	14 9b       	mov	r11,r10
80003d3a:	10 9c       	mov	r12,r8
80003d3c:	fe b0 f5 a8 	rcall	8000288c <scalar_product>
80003d40:	18 98       	mov	r8,r12
80003d42:	ef 48 ff c8 	st.w	r7[-56],r8
	float planeDistSq = SQR(planeDist);
80003d46:	ee f9 ff c8 	ld.w	r9,r7[-56]
80003d4a:	ee f8 ff c8 	ld.w	r8,r7[-56]
80003d4e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003d52:	ef 48 ff cc 	st.w	r7[-52],r8
	float radiusSq = SQR(maxSpeed);
80003d56:	ee f9 ff 40 	ld.w	r9,r7[-192]
80003d5a:	ee f8 ff 40 	ld.w	r8,r7[-192]
80003d5e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003d62:	ef 48 ff d0 	st.w	r7[-48],r8
	
	if (planeDistSq > radiusSq)
80003d66:	30 18       	mov	r8,1
80003d68:	ee fa ff cc 	ld.w	r10,r7[-52]
80003d6c:	ee f9 ff d0 	ld.w	r9,r7[-48]
80003d70:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003d74:	e0 8c 00 04 	brvs	80003d7c <linearProgram2+0xa0>
80003d78:	e0 89 00 03 	brgt	80003d7e <linearProgram2+0xa2>
80003d7c:	30 08       	mov	r8,0
80003d7e:	5c 58       	castu.b	r8
80003d80:	c0 40       	breq	80003d88 <linearProgram2+0xac>
	{
		/* Max speed sphere fully invalidates plane planeNo. */
		return false;
80003d82:	30 08       	mov	r8,0
80003d84:	e0 8f 04 64 	bral	8000464c <linearProgram2+0x970>
	}
	
	float planeRadiusSq = radiusSq - planeDistSq;
80003d88:	ee f9 ff d0 	ld.w	r9,r7[-48]
80003d8c:	ee f8 ff cc 	ld.w	r8,r7[-52]
80003d90:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80003d94:	ef 48 ff d4 	st.w	r7[-44],r8
	
	float planeCenter[3];
	for(i=0;i<3;i++)
80003d98:	30 08       	mov	r8,0
80003d9a:	ef 68 ff c7 	st.b	r7[-57],r8
80003d9e:	c2 08       	rjmp	80003dde <linearProgram2+0x102>
	{
		planeCenter[i] = planeDist * planes[ind].normal[i];
80003da0:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80003da4:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003da8:	12 98       	mov	r8,r9
80003daa:	a1 78       	lsl	r8,0x1
80003dac:	12 08       	add	r8,r9
80003dae:	a3 78       	lsl	r8,0x3
80003db0:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003db4:	f2 08 00 08 	add	r8,r9,r8
80003db8:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80003dbc:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003dc0:	ee f8 ff c8 	ld.w	r8,r7[-56]
80003dc4:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003dc8:	f4 08 15 02 	lsl	r8,r10,0x2
80003dcc:	ee 08 00 08 	add	r8,r7,r8
80003dd0:	f1 49 ff b8 	st.w	r8[-72],r9
	}
	
	float planeRadiusSq = radiusSq - planeDistSq;
	
	float planeCenter[3];
	for(i=0;i<3;i++)
80003dd4:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003dd8:	2f f8       	sub	r8,-1
80003dda:	ef 68 ff c7 	st.b	r7[-57],r8
80003dde:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003de2:	30 28       	mov	r8,2
80003de4:	f0 09 18 00 	cp.b	r9,r8
80003de8:	fe 9a ff dc 	brle	80003da0 <linearProgram2+0xc4>
	{
		planeCenter[i] = planeDist * planes[ind].normal[i];
	}
	
	if (directionOpt)
80003dec:	ef 39 ff 34 	ld.ub	r9,r7[-204]
80003df0:	30 08       	mov	r8,0
80003df2:	f0 09 18 00 	cp.b	r9,r8
80003df6:	e0 80 00 c0 	breq	80003f76 <linearProgram2+0x29a>
	{
		/* Project direction optVelocity on plane ind. */
		float planeOptVelocity[3];
		float scalarProduct = scalar_product(OptimalVelocity,planes[ind].normal);
80003dfa:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003dfe:	12 98       	mov	r8,r9
80003e00:	a1 78       	lsl	r8,0x1
80003e02:	12 08       	add	r8,r9
80003e04:	a3 78       	lsl	r8,0x3
80003e06:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003e0a:	f2 08 00 08 	add	r8,r9,r8
80003e0e:	10 9b       	mov	r11,r8
80003e10:	ee fc ff 3c 	ld.w	r12,r7[-196]
80003e14:	fe b0 f5 3c 	rcall	8000288c <scalar_product>
80003e18:	18 98       	mov	r8,r12
80003e1a:	ef 48 ff dc 	st.w	r7[-36],r8
		for(i=0;i<3;i++)
80003e1e:	30 08       	mov	r8,0
80003e20:	ef 68 ff c7 	st.b	r7[-57],r8
80003e24:	c2 a8       	rjmp	80003e78 <linearProgram2+0x19c>
		{
			planeOptVelocity[i] = OptimalVelocity[i] - scalarProduct * planes[ind].normal[i];
80003e26:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80003e2a:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003e2e:	a3 68       	lsl	r8,0x2
80003e30:	ee f9 ff 3c 	ld.w	r9,r7[-196]
80003e34:	f2 08 00 08 	add	r8,r9,r8
80003e38:	70 0b       	ld.w	r11,r8[0x0]
80003e3a:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003e3e:	12 98       	mov	r8,r9
80003e40:	a1 78       	lsl	r8,0x1
80003e42:	12 08       	add	r8,r9
80003e44:	a3 78       	lsl	r8,0x3
80003e46:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003e4a:	f2 08 00 08 	add	r8,r9,r8
80003e4e:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80003e52:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003e56:	ee f8 ff dc 	ld.w	r8,r7[-36]
80003e5a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003e5e:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
80003e62:	f4 08 15 02 	lsl	r8,r10,0x2
80003e66:	ee 08 00 08 	add	r8,r7,r8
80003e6a:	f1 49 ff ac 	st.w	r8[-84],r9
	if (directionOpt)
	{
		/* Project direction optVelocity on plane ind. */
		float planeOptVelocity[3];
		float scalarProduct = scalar_product(OptimalVelocity,planes[ind].normal);
		for(i=0;i<3;i++)
80003e6e:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003e72:	2f f8       	sub	r8,-1
80003e74:	ef 68 ff c7 	st.b	r7[-57],r8
80003e78:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003e7c:	30 28       	mov	r8,2
80003e7e:	f0 09 18 00 	cp.b	r9,r8
80003e82:	fe 9a ff d2 	brle	80003e26 <linearProgram2+0x14a>
		{
			planeOptVelocity[i] = OptimalVelocity[i] - scalarProduct * planes[ind].normal[i];
		}
		float planeOptVelocityLengthSq = vector_norm_sqr(planeOptVelocity);
80003e86:	ee c8 00 54 	sub	r8,r7,84
80003e8a:	10 9c       	mov	r12,r8
80003e8c:	fe b0 f6 d0 	rcall	80002c2c <vector_norm_sqr>
80003e90:	18 98       	mov	r8,r12
80003e92:	ef 48 ff e0 	st.w	r7[-32],r8
		
		if (planeOptVelocityLengthSq <= RVO_EPSILON)
80003e96:	ee fc ff e0 	ld.w	r12,r7[-32]
80003e9a:	f0 16 00 02 	mcall	r6[8]
80003e9e:	14 98       	mov	r8,r10
80003ea0:	16 99       	mov	r9,r11
80003ea2:	30 05       	mov	r5,0
80003ea4:	e0 6a 43 2d 	mov	r10,17197
80003ea8:	ea 1a eb 1c 	orh	r10,0xeb1c
80003eac:	e0 6b 36 e2 	mov	r11,14050
80003eb0:	ea 1b 3f 1a 	orh	r11,0x3f1a
80003eb4:	f0 16 00 7d 	mcall	r6[500]
80003eb8:	18 98       	mov	r8,r12
80003eba:	58 08       	cp.w	r8,0
80003ebc:	c0 20       	breq	80003ec0 <linearProgram2+0x1e4>
80003ebe:	30 15       	mov	r5,1
80003ec0:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80003ec4:	c2 00       	breq	80003f04 <linearProgram2+0x228>
		{
			for(i=0;i<3;i++)
80003ec6:	30 08       	mov	r8,0
80003ec8:	ef 68 ff c7 	st.b	r7[-57],r8
80003ecc:	c1 48       	rjmp	80003ef4 <linearProgram2+0x218>
			{
				NewVelocity[i] = planeCenter[i];
80003ece:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003ed2:	a3 68       	lsl	r8,0x2
80003ed4:	ee f9 ff 38 	ld.w	r9,r7[-200]
80003ed8:	10 09       	add	r9,r8
80003eda:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003ede:	a3 68       	lsl	r8,0x2
80003ee0:	ee 08 00 08 	add	r8,r7,r8
80003ee4:	f0 f8 ff b8 	ld.w	r8,r8[-72]
80003ee8:	93 08       	st.w	r9[0x0],r8
		}
		float planeOptVelocityLengthSq = vector_norm_sqr(planeOptVelocity);
		
		if (planeOptVelocityLengthSq <= RVO_EPSILON)
		{
			for(i=0;i<3;i++)
80003eea:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003eee:	2f f8       	sub	r8,-1
80003ef0:	ef 68 ff c7 	st.b	r7[-57],r8
80003ef4:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003ef8:	30 28       	mov	r8,2
80003efa:	f0 09 18 00 	cp.b	r9,r8
80003efe:	fe 9a ff e8 	brle	80003ece <linearProgram2+0x1f2>
80003f02:	c2 d9       	rjmp	8000415c <linearProgram2+0x480>
			{
				NewVelocity[i] = planeCenter[i];
			}
		}else{
			float sqrtPlane = fast_sqrt(planeRadiusSq / planeOptVelocityLengthSq);
80003f04:	ee fb ff e0 	ld.w	r11,r7[-32]
80003f08:	ee fc ff d4 	ld.w	r12,r7[-44]
80003f0c:	f0 16 00 08 	mcall	r6[32]
80003f10:	18 98       	mov	r8,r12
80003f12:	10 9c       	mov	r12,r8
80003f14:	fe b0 f6 22 	rcall	80002b58 <fast_sqrt>
80003f18:	18 98       	mov	r8,r12
80003f1a:	ef 48 ff e4 	st.w	r7[-28],r8
			for(i=0;i<3;i++)
80003f1e:	30 08       	mov	r8,0
80003f20:	ef 68 ff c7 	st.b	r7[-57],r8
80003f24:	c2 18       	rjmp	80003f66 <linearProgram2+0x28a>
			{
				NewVelocity[i] = planeCenter[i] + sqrtPlane * planeOptVelocity[i];
80003f26:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003f2a:	a3 68       	lsl	r8,0x2
80003f2c:	ee f9 ff 38 	ld.w	r9,r7[-200]
80003f30:	10 09       	add	r9,r8
80003f32:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003f36:	a3 68       	lsl	r8,0x2
80003f38:	ee 08 00 08 	add	r8,r7,r8
80003f3c:	f0 fa ff b8 	ld.w	r10,r8[-72]
80003f40:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003f44:	a3 68       	lsl	r8,0x2
80003f46:	ee 08 00 08 	add	r8,r7,r8
80003f4a:	f0 fb ff ac 	ld.w	r11,r8[-84]
80003f4e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003f52:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80003f56:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80003f5a:	93 08       	st.w	r9[0x0],r8
			{
				NewVelocity[i] = planeCenter[i];
			}
		}else{
			float sqrtPlane = fast_sqrt(planeRadiusSq / planeOptVelocityLengthSq);
			for(i=0;i<3;i++)
80003f5c:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003f60:	2f f8       	sub	r8,-1
80003f62:	ef 68 ff c7 	st.b	r7[-57],r8
80003f66:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003f6a:	30 28       	mov	r8,2
80003f6c:	f0 09 18 00 	cp.b	r9,r8
80003f70:	fe 9a ff db 	brle	80003f26 <linearProgram2+0x24a>
80003f74:	cf 48       	rjmp	8000415c <linearProgram2+0x480>
			}
		}
	}else{
		/* Project point optVelocity on plane ind. */
		float diffPtsVel[3];
		for(i=0;i<3;i++)
80003f76:	30 08       	mov	r8,0
80003f78:	ef 68 ff c7 	st.b	r7[-57],r8
80003f7c:	c2 78       	rjmp	80003fca <linearProgram2+0x2ee>
		{
			diffPtsVel[i] = planes[ind].point[i]-OptimalVelocity[i];
80003f7e:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80003f82:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003f86:	12 98       	mov	r8,r9
80003f88:	a1 78       	lsl	r8,0x1
80003f8a:	12 08       	add	r8,r9
80003f8c:	a3 78       	lsl	r8,0x3
80003f8e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003f92:	f2 08 00 08 	add	r8,r9,r8
80003f96:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80003f9a:	2f d9       	sub	r9,-3
80003f9c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003fa0:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003fa4:	a3 68       	lsl	r8,0x2
80003fa6:	ee fb ff 3c 	ld.w	r11,r7[-196]
80003faa:	f6 08 00 08 	add	r8,r11,r8
80003fae:	70 08       	ld.w	r8,r8[0x0]
80003fb0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003fb4:	f4 08 15 02 	lsl	r8,r10,0x2
80003fb8:	ee 08 00 08 	add	r8,r7,r8
80003fbc:	f1 49 ff a0 	st.w	r8[-96],r9
			}
		}
	}else{
		/* Project point optVelocity on plane ind. */
		float diffPtsVel[3];
		for(i=0;i<3;i++)
80003fc0:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003fc4:	2f f8       	sub	r8,-1
80003fc6:	ef 68 ff c7 	st.b	r7[-57],r8
80003fca:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003fce:	30 28       	mov	r8,2
80003fd0:	f0 09 18 00 	cp.b	r9,r8
80003fd4:	fe 9a ff d5 	brle	80003f7e <linearProgram2+0x2a2>
		{
			diffPtsVel[i] = planes[ind].point[i]-OptimalVelocity[i];
		}
		float scalarProduct = scalar_product(diffPtsVel,planes[ind].normal);
80003fd8:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003fdc:	12 98       	mov	r8,r9
80003fde:	a1 78       	lsl	r8,0x1
80003fe0:	12 08       	add	r8,r9
80003fe2:	a3 78       	lsl	r8,0x3
80003fe4:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003fe8:	f2 08 00 08 	add	r8,r9,r8
80003fec:	10 99       	mov	r9,r8
80003fee:	ee c8 00 60 	sub	r8,r7,96
80003ff2:	12 9b       	mov	r11,r9
80003ff4:	10 9c       	mov	r12,r8
80003ff6:	fe b0 f4 4b 	rcall	8000288c <scalar_product>
80003ffa:	18 98       	mov	r8,r12
80003ffc:	ef 48 ff e8 	st.w	r7[-24],r8
		for(i=0;i<3;i++)
80004000:	30 08       	mov	r8,0
80004002:	ef 68 ff c7 	st.b	r7[-57],r8
80004006:	c2 a8       	rjmp	8000405a <linearProgram2+0x37e>
		{
			NewVelocity[i] = OptimalVelocity[i] + scalarProduct * planes[ind].normal[i];
80004008:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000400c:	a3 68       	lsl	r8,0x2
8000400e:	ee f9 ff 38 	ld.w	r9,r7[-200]
80004012:	f2 08 00 0a 	add	r10,r9,r8
80004016:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000401a:	a3 68       	lsl	r8,0x2
8000401c:	ee f9 ff 3c 	ld.w	r9,r7[-196]
80004020:	f2 08 00 08 	add	r8,r9,r8
80004024:	70 0b       	ld.w	r11,r8[0x0]
80004026:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000402a:	12 98       	mov	r8,r9
8000402c:	a1 78       	lsl	r8,0x1
8000402e:	12 08       	add	r8,r9
80004030:	a3 78       	lsl	r8,0x3
80004032:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004036:	f2 08 00 08 	add	r8,r9,r8
8000403a:	ef 29 ff c7 	ld.sb	r9,r7[-57]
8000403e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004042:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004046:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000404a:	e5 a0 08 b8 	cop	cp0,cr8,cr11,cr8,0x40
8000404e:	95 08       	st.w	r10[0x0],r8
		for(i=0;i<3;i++)
		{
			diffPtsVel[i] = planes[ind].point[i]-OptimalVelocity[i];
		}
		float scalarProduct = scalar_product(diffPtsVel,planes[ind].normal);
		for(i=0;i<3;i++)
80004050:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80004054:	2f f8       	sub	r8,-1
80004056:	ef 68 ff c7 	st.b	r7[-57],r8
8000405a:	ef 39 ff c7 	ld.ub	r9,r7[-57]
8000405e:	30 28       	mov	r8,2
80004060:	f0 09 18 00 	cp.b	r9,r8
80004064:	fe 9a ff d2 	brle	80004008 <linearProgram2+0x32c>
		{
			NewVelocity[i] = OptimalVelocity[i] + scalarProduct * planes[ind].normal[i];
		}
		/* If outside planeCircle, project on planeCircle. */
		if (vector_norm_sqr(NewVelocity) > radiusSq) {
80004068:	ee fc ff 38 	ld.w	r12,r7[-200]
8000406c:	fe b0 f5 e0 	rcall	80002c2c <vector_norm_sqr>
80004070:	18 9a       	mov	r10,r12
80004072:	30 18       	mov	r8,1
80004074:	ee f9 ff d0 	ld.w	r9,r7[-48]
80004078:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000407c:	e0 8c 00 04 	brvs	80004084 <linearProgram2+0x3a8>
80004080:	e0 89 00 03 	brgt	80004086 <linearProgram2+0x3aa>
80004084:	30 08       	mov	r8,0
80004086:	5c 58       	castu.b	r8
80004088:	c6 a0       	breq	8000415c <linearProgram2+0x480>
			float planeResult[3];
			for(i=0;i<3;i++)
8000408a:	30 08       	mov	r8,0
8000408c:	ef 68 ff c7 	st.b	r7[-57],r8
80004090:	c1 f8       	rjmp	800040ce <linearProgram2+0x3f2>
			{
				planeResult[i] = NewVelocity[i] - planeCenter[i];
80004092:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80004096:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000409a:	a3 68       	lsl	r8,0x2
8000409c:	ee f9 ff 38 	ld.w	r9,r7[-200]
800040a0:	f2 08 00 08 	add	r8,r9,r8
800040a4:	70 09       	ld.w	r9,r8[0x0]
800040a6:	ef 28 ff c7 	ld.sb	r8,r7[-57]
800040aa:	a3 68       	lsl	r8,0x2
800040ac:	ee 08 00 08 	add	r8,r7,r8
800040b0:	f0 f8 ff b8 	ld.w	r8,r8[-72]
800040b4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800040b8:	f4 08 15 02 	lsl	r8,r10,0x2
800040bc:	ee 08 00 08 	add	r8,r7,r8
800040c0:	f1 49 ff 94 	st.w	r8[-108],r9
			NewVelocity[i] = OptimalVelocity[i] + scalarProduct * planes[ind].normal[i];
		}
		/* If outside planeCircle, project on planeCircle. */
		if (vector_norm_sqr(NewVelocity) > radiusSq) {
			float planeResult[3];
			for(i=0;i<3;i++)
800040c4:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800040c8:	2f f8       	sub	r8,-1
800040ca:	ef 68 ff c7 	st.b	r7[-57],r8
800040ce:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800040d2:	30 28       	mov	r8,2
800040d4:	f0 09 18 00 	cp.b	r9,r8
800040d8:	fe 9a ff dd 	brle	80004092 <linearProgram2+0x3b6>
			{
				planeResult[i] = NewVelocity[i] - planeCenter[i];
			}
			float planeResultLengthSq = vector_norm_sqr(planeResult);
800040dc:	ee c8 00 6c 	sub	r8,r7,108
800040e0:	10 9c       	mov	r12,r8
800040e2:	fe b0 f5 a5 	rcall	80002c2c <vector_norm_sqr>
800040e6:	18 98       	mov	r8,r12
800040e8:	ef 48 ff ec 	st.w	r7[-20],r8
			
			float planeSqrt = fast_sqrt(planeRadiusSq / planeResultLengthSq);
800040ec:	ee fb ff ec 	ld.w	r11,r7[-20]
800040f0:	ee fc ff d4 	ld.w	r12,r7[-44]
800040f4:	f0 16 00 08 	mcall	r6[32]
800040f8:	18 98       	mov	r8,r12
800040fa:	10 9c       	mov	r12,r8
800040fc:	fe b0 f5 2e 	rcall	80002b58 <fast_sqrt>
80004100:	18 98       	mov	r8,r12
80004102:	ef 48 ff f0 	st.w	r7[-16],r8
			for(i=0;i<3;i++)
80004106:	30 08       	mov	r8,0
80004108:	ef 68 ff c7 	st.b	r7[-57],r8
8000410c:	c2 18       	rjmp	8000414e <linearProgram2+0x472>
			{
				NewVelocity[i] = planeCenter[i] + planeSqrt * planeResult[i];
8000410e:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004112:	a3 68       	lsl	r8,0x2
80004114:	ee f9 ff 38 	ld.w	r9,r7[-200]
80004118:	10 09       	add	r9,r8
8000411a:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000411e:	a3 68       	lsl	r8,0x2
80004120:	ee 08 00 08 	add	r8,r7,r8
80004124:	f0 fa ff b8 	ld.w	r10,r8[-72]
80004128:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000412c:	a3 68       	lsl	r8,0x2
8000412e:	ee 08 00 08 	add	r8,r7,r8
80004132:	f0 fb ff 94 	ld.w	r11,r8[-108]
80004136:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000413a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000413e:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80004142:	93 08       	st.w	r9[0x0],r8
				planeResult[i] = NewVelocity[i] - planeCenter[i];
			}
			float planeResultLengthSq = vector_norm_sqr(planeResult);
			
			float planeSqrt = fast_sqrt(planeRadiusSq / planeResultLengthSq);
			for(i=0;i<3;i++)
80004144:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80004148:	2f f8       	sub	r8,-1
8000414a:	ef 68 ff c7 	st.b	r7[-57],r8
8000414e:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80004152:	30 28       	mov	r8,2
80004154:	f0 09 18 00 	cp.b	r9,r8
80004158:	fe 9a ff db 	brle	8000410e <linearProgram2+0x432>
			}
		}
	}
	
	int8_t index;
	for (index=0;index<ind;index++)
8000415c:	30 08       	mov	r8,0
8000415e:	ef 68 ff db 	st.b	r7[-37],r8
80004162:	e0 8f 02 6c 	bral	8000463a <linearProgram2+0x95e>
	{
		float diffPtsNewVel[3];
		for (i=0;i<3;i++)
80004166:	30 08       	mov	r8,0
80004168:	ef 68 ff c7 	st.b	r7[-57],r8
8000416c:	c2 78       	rjmp	800041ba <linearProgram2+0x4de>
		{
			diffPtsNewVel[i] = planes[index].point[i] - NewVelocity[i];
8000416e:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80004172:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004176:	12 98       	mov	r8,r9
80004178:	a1 78       	lsl	r8,0x1
8000417a:	12 08       	add	r8,r9
8000417c:	a3 78       	lsl	r8,0x3
8000417e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004182:	f2 08 00 08 	add	r8,r9,r8
80004186:	ef 29 ff c7 	ld.sb	r9,r7[-57]
8000418a:	2f d9       	sub	r9,-3
8000418c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004190:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004194:	a3 68       	lsl	r8,0x2
80004196:	ee fb ff 38 	ld.w	r11,r7[-200]
8000419a:	f6 08 00 08 	add	r8,r11,r8
8000419e:	70 08       	ld.w	r8,r8[0x0]
800041a0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800041a4:	f4 08 15 02 	lsl	r8,r10,0x2
800041a8:	ee 08 00 08 	add	r8,r7,r8
800041ac:	f1 49 ff 88 	st.w	r8[-120],r9
	
	int8_t index;
	for (index=0;index<ind;index++)
	{
		float diffPtsNewVel[3];
		for (i=0;i<3;i++)
800041b0:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800041b4:	2f f8       	sub	r8,-1
800041b6:	ef 68 ff c7 	st.b	r7[-57],r8
800041ba:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800041be:	30 28       	mov	r8,2
800041c0:	f0 09 18 00 	cp.b	r9,r8
800041c4:	fe 9a ff d5 	brle	8000416e <linearProgram2+0x492>
		{
			diffPtsNewVel[i] = planes[index].point[i] - NewVelocity[i];
		}
		if (scalar_product(planes[index].normal,diffPtsNewVel)>0.0)
800041c8:	ef 29 ff db 	ld.sb	r9,r7[-37]
800041cc:	12 98       	mov	r8,r9
800041ce:	a1 78       	lsl	r8,0x1
800041d0:	12 08       	add	r8,r9
800041d2:	a3 78       	lsl	r8,0x3
800041d4:	ee f9 ff 48 	ld.w	r9,r7[-184]
800041d8:	f2 08 00 08 	add	r8,r9,r8
800041dc:	ee c9 00 78 	sub	r9,r7,120
800041e0:	12 9b       	mov	r11,r9
800041e2:	10 9c       	mov	r12,r8
800041e4:	fe b0 f3 54 	rcall	8000288c <scalar_product>
800041e8:	18 9a       	mov	r10,r12
800041ea:	30 18       	mov	r8,1
800041ec:	30 09       	mov	r9,0
800041ee:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800041f2:	e0 8c 00 04 	brvs	800041fa <linearProgram2+0x51e>
800041f6:	e0 89 00 03 	brgt	800041fc <linearProgram2+0x520>
800041fa:	30 08       	mov	r8,0
800041fc:	5c 58       	castu.b	r8
800041fe:	e0 80 02 19 	breq	80004630 <linearProgram2+0x954>
		{
			/* Result does not satisfy constraint index. Compute new optimal result. */
			/* Compute intersection line of plane index and plane ind. */
			float crossProduct[3];
			CROSS(planes[index].normal,planes[ind].normal,crossProduct);
80004202:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004206:	12 98       	mov	r8,r9
80004208:	a1 78       	lsl	r8,0x1
8000420a:	12 08       	add	r8,r9
8000420c:	a3 78       	lsl	r8,0x3
8000420e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004212:	f2 08 00 08 	add	r8,r9,r8
80004216:	70 1a       	ld.w	r10,r8[0x4]
80004218:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000421c:	12 98       	mov	r8,r9
8000421e:	a1 78       	lsl	r8,0x1
80004220:	12 08       	add	r8,r9
80004222:	a3 78       	lsl	r8,0x3
80004224:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004228:	f2 08 00 08 	add	r8,r9,r8
8000422c:	70 28       	ld.w	r8,r8[0x8]
8000422e:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004232:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004236:	12 98       	mov	r8,r9
80004238:	a1 78       	lsl	r8,0x1
8000423a:	12 08       	add	r8,r9
8000423c:	a3 78       	lsl	r8,0x3
8000423e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004242:	f2 08 00 08 	add	r8,r9,r8
80004246:	70 2b       	ld.w	r11,r8[0x8]
80004248:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000424c:	12 98       	mov	r8,r9
8000424e:	a1 78       	lsl	r8,0x1
80004250:	12 08       	add	r8,r9
80004252:	a3 78       	lsl	r8,0x3
80004254:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004258:	f2 08 00 08 	add	r8,r9,r8
8000425c:	70 18       	ld.w	r8,r8[0x4]
8000425e:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004262:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004266:	ef 48 ff 7c 	st.w	r7[-132],r8
8000426a:	ef 29 ff db 	ld.sb	r9,r7[-37]
8000426e:	12 98       	mov	r8,r9
80004270:	a1 78       	lsl	r8,0x1
80004272:	12 08       	add	r8,r9
80004274:	a3 78       	lsl	r8,0x3
80004276:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000427a:	f2 08 00 08 	add	r8,r9,r8
8000427e:	70 2a       	ld.w	r10,r8[0x8]
80004280:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004284:	12 98       	mov	r8,r9
80004286:	a1 78       	lsl	r8,0x1
80004288:	12 08       	add	r8,r9
8000428a:	a3 78       	lsl	r8,0x3
8000428c:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004290:	f2 08 00 08 	add	r8,r9,r8
80004294:	70 08       	ld.w	r8,r8[0x0]
80004296:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000429a:	ef 29 ff db 	ld.sb	r9,r7[-37]
8000429e:	12 98       	mov	r8,r9
800042a0:	a1 78       	lsl	r8,0x1
800042a2:	12 08       	add	r8,r9
800042a4:	a3 78       	lsl	r8,0x3
800042a6:	ee f9 ff 48 	ld.w	r9,r7[-184]
800042aa:	f2 08 00 08 	add	r8,r9,r8
800042ae:	70 0b       	ld.w	r11,r8[0x0]
800042b0:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800042b4:	12 98       	mov	r8,r9
800042b6:	a1 78       	lsl	r8,0x1
800042b8:	12 08       	add	r8,r9
800042ba:	a3 78       	lsl	r8,0x3
800042bc:	ee f9 ff 48 	ld.w	r9,r7[-184]
800042c0:	f2 08 00 08 	add	r8,r9,r8
800042c4:	70 28       	ld.w	r8,r8[0x8]
800042c6:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
800042ca:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800042ce:	ef 48 ff 80 	st.w	r7[-128],r8
800042d2:	ef 29 ff db 	ld.sb	r9,r7[-37]
800042d6:	12 98       	mov	r8,r9
800042d8:	a1 78       	lsl	r8,0x1
800042da:	12 08       	add	r8,r9
800042dc:	a3 78       	lsl	r8,0x3
800042de:	ee f9 ff 48 	ld.w	r9,r7[-184]
800042e2:	f2 08 00 08 	add	r8,r9,r8
800042e6:	70 0a       	ld.w	r10,r8[0x0]
800042e8:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800042ec:	12 98       	mov	r8,r9
800042ee:	a1 78       	lsl	r8,0x1
800042f0:	12 08       	add	r8,r9
800042f2:	a3 78       	lsl	r8,0x3
800042f4:	ee f9 ff 48 	ld.w	r9,r7[-184]
800042f8:	f2 08 00 08 	add	r8,r9,r8
800042fc:	70 18       	ld.w	r8,r8[0x4]
800042fe:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004302:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004306:	12 98       	mov	r8,r9
80004308:	a1 78       	lsl	r8,0x1
8000430a:	12 08       	add	r8,r9
8000430c:	a3 78       	lsl	r8,0x3
8000430e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004312:	f2 08 00 08 	add	r8,r9,r8
80004316:	70 1b       	ld.w	r11,r8[0x4]
80004318:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000431c:	12 98       	mov	r8,r9
8000431e:	a1 78       	lsl	r8,0x1
80004320:	12 08       	add	r8,r9
80004322:	a3 78       	lsl	r8,0x3
80004324:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004328:	f2 08 00 08 	add	r8,r9,r8
8000432c:	70 08       	ld.w	r8,r8[0x0]
8000432e:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004332:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004336:	ef 48 ff 84 	st.w	r7[-124],r8
			
			if (vector_norm_sqr(crossProduct) <= RVO_EPSILON)
8000433a:	ee c8 00 84 	sub	r8,r7,132
8000433e:	10 9c       	mov	r12,r8
80004340:	fe b0 f4 76 	rcall	80002c2c <vector_norm_sqr>
80004344:	18 98       	mov	r8,r12
80004346:	10 9c       	mov	r12,r8
80004348:	f0 16 00 02 	mcall	r6[8]
8000434c:	14 98       	mov	r8,r10
8000434e:	16 99       	mov	r9,r11
80004350:	30 05       	mov	r5,0
80004352:	e0 6a 43 2d 	mov	r10,17197
80004356:	ea 1a eb 1c 	orh	r10,0xeb1c
8000435a:	e0 6b 36 e2 	mov	r11,14050
8000435e:	ea 1b 3f 1a 	orh	r11,0x3f1a
80004362:	f0 16 00 7d 	mcall	r6[500]
80004366:	18 98       	mov	r8,r12
80004368:	58 08       	cp.w	r8,0
8000436a:	c0 20       	breq	8000436e <linearProgram2+0x692>
8000436c:	30 15       	mov	r5,1
8000436e:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80004372:	c0 30       	breq	80004378 <linearProgram2+0x69c>
			{
				/* Planes ind and index are (almost) parallel, and plane index fully invalidates plane ind. */
				return false;
80004374:	30 08       	mov	r8,0
80004376:	c6 b9       	rjmp	8000464c <linearProgram2+0x970>
			}
			
			line_t line;
			float normCrossProduct = vector_norm(crossProduct);
80004378:	ee c8 00 84 	sub	r8,r7,132
8000437c:	10 9c       	mov	r12,r8
8000437e:	fe b0 f4 6f 	rcall	80002c5c <vector_norm>
80004382:	18 98       	mov	r8,r12
80004384:	ef 48 ff f4 	st.w	r7[-12],r8
			for (i=0;i<3;i++)
80004388:	30 08       	mov	r8,0
8000438a:	ef 68 ff c7 	st.b	r7[-57],r8
8000438e:	c1 c8       	rjmp	800043c6 <linearProgram2+0x6ea>
			{
				line.direction[i] = crossProduct[i] / normCrossProduct;
80004390:	ef 25 ff c7 	ld.sb	r5,r7[-57]
80004394:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004398:	a3 68       	lsl	r8,0x2
8000439a:	ee 08 00 08 	add	r8,r7,r8
8000439e:	f0 f8 ff 7c 	ld.w	r8,r8[-132]
800043a2:	ee fb ff f4 	ld.w	r11,r7[-12]
800043a6:	10 9c       	mov	r12,r8
800043a8:	f0 16 00 08 	mcall	r6[32]
800043ac:	18 98       	mov	r8,r12
800043ae:	10 99       	mov	r9,r8
800043b0:	ea 08 15 02 	lsl	r8,r5,0x2
800043b4:	ee 08 00 08 	add	r8,r7,r8
800043b8:	f1 49 ff 64 	st.w	r8[-156],r9
				return false;
			}
			
			line_t line;
			float normCrossProduct = vector_norm(crossProduct);
			for (i=0;i<3;i++)
800043bc:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800043c0:	2f f8       	sub	r8,-1
800043c2:	ef 68 ff c7 	st.b	r7[-57],r8
800043c6:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800043ca:	30 28       	mov	r8,2
800043cc:	f0 09 18 00 	cp.b	r9,r8
800043d0:	fe 9a ff e0 	brle	80004390 <linearProgram2+0x6b4>
			{
				line.direction[i] = crossProduct[i] / normCrossProduct;
			}
			float lineNormal[3];
			CROSS(line.direction,planes[ind].normal,lineNormal);
800043d4:	ee fa ff 68 	ld.w	r10,r7[-152]
800043d8:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800043dc:	12 98       	mov	r8,r9
800043de:	a1 78       	lsl	r8,0x1
800043e0:	12 08       	add	r8,r9
800043e2:	a3 78       	lsl	r8,0x3
800043e4:	ee f9 ff 48 	ld.w	r9,r7[-184]
800043e8:	f2 08 00 08 	add	r8,r9,r8
800043ec:	70 28       	ld.w	r8,r8[0x8]
800043ee:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
800043f2:	ee fb ff 6c 	ld.w	r11,r7[-148]
800043f6:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800043fa:	12 98       	mov	r8,r9
800043fc:	a1 78       	lsl	r8,0x1
800043fe:	12 08       	add	r8,r9
80004400:	a3 78       	lsl	r8,0x3
80004402:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004406:	f2 08 00 08 	add	r8,r9,r8
8000440a:	70 18       	ld.w	r8,r8[0x4]
8000440c:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004410:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004414:	ef 48 ff 58 	st.w	r7[-168],r8
80004418:	ee fa ff 6c 	ld.w	r10,r7[-148]
8000441c:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004420:	12 98       	mov	r8,r9
80004422:	a1 78       	lsl	r8,0x1
80004424:	12 08       	add	r8,r9
80004426:	a3 78       	lsl	r8,0x3
80004428:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000442c:	f2 08 00 08 	add	r8,r9,r8
80004430:	70 08       	ld.w	r8,r8[0x0]
80004432:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004436:	ee fb ff 64 	ld.w	r11,r7[-156]
8000443a:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000443e:	12 98       	mov	r8,r9
80004440:	a1 78       	lsl	r8,0x1
80004442:	12 08       	add	r8,r9
80004444:	a3 78       	lsl	r8,0x3
80004446:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000444a:	f2 08 00 08 	add	r8,r9,r8
8000444e:	70 28       	ld.w	r8,r8[0x8]
80004450:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004454:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004458:	ef 48 ff 5c 	st.w	r7[-164],r8
8000445c:	ee fa ff 64 	ld.w	r10,r7[-156]
80004460:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004464:	12 98       	mov	r8,r9
80004466:	a1 78       	lsl	r8,0x1
80004468:	12 08       	add	r8,r9
8000446a:	a3 78       	lsl	r8,0x3
8000446c:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004470:	f2 08 00 08 	add	r8,r9,r8
80004474:	70 18       	ld.w	r8,r8[0x4]
80004476:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000447a:	ee fb ff 68 	ld.w	r11,r7[-152]
8000447e:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004482:	12 98       	mov	r8,r9
80004484:	a1 78       	lsl	r8,0x1
80004486:	12 08       	add	r8,r9
80004488:	a3 78       	lsl	r8,0x3
8000448a:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000448e:	f2 08 00 08 	add	r8,r9,r8
80004492:	70 08       	ld.w	r8,r8[0x0]
80004494:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004498:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000449c:	ef 48 ff 60 	st.w	r7[-160],r8
			
			float diffPoints[3];
			for (i=0;i<3;i++)
800044a0:	30 08       	mov	r8,0
800044a2:	ef 68 ff c7 	st.b	r7[-57],r8
800044a6:	c2 e8       	rjmp	80004502 <linearProgram2+0x826>
			{
				diffPoints[i] = planes[index].point[i] - planes[ind].point[i];
800044a8:	ef 2a ff c7 	ld.sb	r10,r7[-57]
800044ac:	ef 29 ff db 	ld.sb	r9,r7[-37]
800044b0:	12 98       	mov	r8,r9
800044b2:	a1 78       	lsl	r8,0x1
800044b4:	12 08       	add	r8,r9
800044b6:	a3 78       	lsl	r8,0x3
800044b8:	ee f9 ff 48 	ld.w	r9,r7[-184]
800044bc:	f2 08 00 08 	add	r8,r9,r8
800044c0:	ef 29 ff c7 	ld.sb	r9,r7[-57]
800044c4:	2f d9       	sub	r9,-3
800044c6:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
800044ca:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800044ce:	12 98       	mov	r8,r9
800044d0:	a1 78       	lsl	r8,0x1
800044d2:	12 08       	add	r8,r9
800044d4:	a3 78       	lsl	r8,0x3
800044d6:	ee f9 ff 48 	ld.w	r9,r7[-184]
800044da:	f2 08 00 08 	add	r8,r9,r8
800044de:	ef 29 ff c7 	ld.sb	r9,r7[-57]
800044e2:	2f d9       	sub	r9,-3
800044e4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800044e8:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
800044ec:	f4 08 15 02 	lsl	r8,r10,0x2
800044f0:	ee 08 00 08 	add	r8,r7,r8
800044f4:	f1 49 ff 4c 	st.w	r8[-180],r9
			}
			float lineNormal[3];
			CROSS(line.direction,planes[ind].normal,lineNormal);
			
			float diffPoints[3];
			for (i=0;i<3;i++)
800044f8:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800044fc:	2f f8       	sub	r8,-1
800044fe:	ef 68 ff c7 	st.b	r7[-57],r8
80004502:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80004506:	30 28       	mov	r8,2
80004508:	f0 09 18 00 	cp.b	r9,r8
8000450c:	fe 9a ff ce 	brle	800044a8 <linearProgram2+0x7cc>
			{
				diffPoints[i] = planes[index].point[i] - planes[ind].point[i];
			}
			float scalarProductPointsNormal = scalar_product(diffPoints,planes[index].normal);
80004510:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004514:	12 98       	mov	r8,r9
80004516:	a1 78       	lsl	r8,0x1
80004518:	12 08       	add	r8,r9
8000451a:	a3 78       	lsl	r8,0x3
8000451c:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004520:	f2 08 00 08 	add	r8,r9,r8
80004524:	10 99       	mov	r9,r8
80004526:	ee c8 00 b4 	sub	r8,r7,180
8000452a:	12 9b       	mov	r11,r9
8000452c:	10 9c       	mov	r12,r8
8000452e:	fe b0 f1 af 	rcall	8000288c <scalar_product>
80004532:	18 98       	mov	r8,r12
80004534:	ef 48 ff f8 	st.w	r7[-8],r8
			float scalarProductNormals = scalar_product(lineNormal,planes[index].normal);
80004538:	ef 29 ff db 	ld.sb	r9,r7[-37]
8000453c:	12 98       	mov	r8,r9
8000453e:	a1 78       	lsl	r8,0x1
80004540:	12 08       	add	r8,r9
80004542:	a3 78       	lsl	r8,0x3
80004544:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004548:	f2 08 00 08 	add	r8,r9,r8
8000454c:	10 99       	mov	r9,r8
8000454e:	ee c8 00 a8 	sub	r8,r7,168
80004552:	12 9b       	mov	r11,r9
80004554:	10 9c       	mov	r12,r8
80004556:	fe b0 f1 9b 	rcall	8000288c <scalar_product>
8000455a:	18 98       	mov	r8,r12
8000455c:	ef 48 ff fc 	st.w	r7[-4],r8
			for(i=0;i<3;i++)
80004560:	30 08       	mov	r8,0
80004562:	ef 68 ff c7 	st.b	r7[-57],r8
80004566:	c3 18       	rjmp	800045c8 <linearProgram2+0x8ec>
			{
				line.point[i] = planes[ind].point[i] + (scalarProductPointsNormal / scalarProductNormals) * lineNormal[i];
80004568:	ef 25 ff c7 	ld.sb	r5,r7[-57]
8000456c:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004570:	12 98       	mov	r8,r9
80004572:	a1 78       	lsl	r8,0x1
80004574:	12 08       	add	r8,r9
80004576:	a3 78       	lsl	r8,0x3
80004578:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000457c:	f2 08 00 08 	add	r8,r9,r8
80004580:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80004584:	2f d9       	sub	r9,-3
80004586:	f0 09 03 23 	ld.w	r3,r8[r9<<0x2]
8000458a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000458e:	ee fc ff f8 	ld.w	r12,r7[-8]
80004592:	f0 16 00 08 	mcall	r6[32]
80004596:	18 98       	mov	r8,r12
80004598:	10 99       	mov	r9,r8
8000459a:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000459e:	a3 68       	lsl	r8,0x2
800045a0:	ee 08 00 08 	add	r8,r7,r8
800045a4:	f0 f8 ff 58 	ld.w	r8,r8[-168]
800045a8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800045ac:	e5 a0 09 38 	cop	cp0,cr9,cr3,cr8,0x40
800045b0:	ea c8 ff fd 	sub	r8,r5,-3
800045b4:	a3 68       	lsl	r8,0x2
800045b6:	ee 08 00 08 	add	r8,r7,r8
800045ba:	f1 49 ff 64 	st.w	r8[-156],r9
			{
				diffPoints[i] = planes[index].point[i] - planes[ind].point[i];
			}
			float scalarProductPointsNormal = scalar_product(diffPoints,planes[index].normal);
			float scalarProductNormals = scalar_product(lineNormal,planes[index].normal);
			for(i=0;i<3;i++)
800045be:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800045c2:	2f f8       	sub	r8,-1
800045c4:	ef 68 ff c7 	st.b	r7[-57],r8
800045c8:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800045cc:	30 28       	mov	r8,2
800045ce:	f0 09 18 00 	cp.b	r9,r8
800045d2:	fe 9a ff cb 	brle	80004568 <linearProgram2+0x88c>
			{
				line.point[i] = planes[ind].point[i] + (scalarProductPointsNormal / scalarProductNormals) * lineNormal[i];
			}
			
			if (!(linearProgram1(planes,index,line,maxSpeed,OptimalVelocity,NewVelocity,directionOpt)))
800045d6:	ef 38 ff 34 	ld.ub	r8,r7[-204]
800045da:	ef 2c ff db 	ld.sb	r12,r7[-37]
800045de:	1a d8       	st.w	--sp,r8
800045e0:	20 6d       	sub	sp,24
800045e2:	1a 98       	mov	r8,sp
800045e4:	10 9a       	mov	r10,r8
800045e6:	ee cb 00 9c 	sub	r11,r7,156
800045ea:	f4 c8 00 00 	sub	r8,r10,0
800045ee:	f6 c9 00 00 	sub	r9,r11,0
800045f2:	72 0e       	ld.w	lr,r9[0x0]
800045f4:	91 0e       	st.w	r8[0x0],lr
800045f6:	72 1e       	ld.w	lr,r9[0x4]
800045f8:	91 1e       	st.w	r8[0x4],lr
800045fa:	72 2e       	ld.w	lr,r9[0x8]
800045fc:	91 2e       	st.w	r8[0x8],lr
800045fe:	72 39       	ld.w	r9,r9[0xc]
80004600:	91 39       	st.w	r8[0xc],r9
80004602:	f6 e8 00 10 	ld.d	r8,r11[16]
80004606:	f4 e9 00 10 	st.d	r10[16],r8
8000460a:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000460e:	ee f9 ff 3c 	ld.w	r9,r7[-196]
80004612:	ee fa ff 40 	ld.w	r10,r7[-192]
80004616:	18 9b       	mov	r11,r12
80004618:	ee fc ff 48 	ld.w	r12,r7[-184]
8000461c:	f0 16 01 d1 	mcall	r6[1860]
80004620:	2f 9d       	sub	sp,-28
80004622:	18 98       	mov	r8,r12
80004624:	ec 18 00 01 	eorl	r8,0x1
80004628:	5c 58       	castu.b	r8
8000462a:	c0 30       	breq	80004630 <linearProgram2+0x954>
			{
				return false;
8000462c:	30 08       	mov	r8,0
8000462e:	c0 f8       	rjmp	8000464c <linearProgram2+0x970>
			}
		}
	}
	
	int8_t index;
	for (index=0;index<ind;index++)
80004630:	ef 38 ff db 	ld.ub	r8,r7[-37]
80004634:	2f f8       	sub	r8,-1
80004636:	ef 68 ff db 	st.b	r7[-37],r8
8000463a:	ef 39 ff db 	ld.ub	r9,r7[-37]
8000463e:	ef 38 ff 44 	ld.ub	r8,r7[-188]
80004642:	f0 09 18 00 	cp.b	r9,r8
80004646:	fe 95 fd 90 	brlt	80004166 <linearProgram2+0x48a>
			{
				return false;
			}
		}
	}
	return true;
8000464a:	30 18       	mov	r8,1
}
8000464c:	10 9c       	mov	r12,r8
8000464e:	2c dd       	sub	sp,-204
80004650:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80004654:	80 00       	ld.sh	r0,r0[0x0]
80004656:	3b 6e       	mov	lr,-74

80004658 <linearProgram3>:

float linearProgram3(plane_t planes[], float OptimalVelocity[], float maxSpeed, float NewVelocity[], bool directionOpt)
{
80004658:	eb cd 40 e0 	pushm	r5-r7,lr
8000465c:	1a 97       	mov	r7,sp
8000465e:	20 ed       	sub	sp,56
80004660:	fe f6 02 e0 	ld.w	r6,pc[736]
80004664:	1e 26       	rsub	r6,pc
80004666:	ef 4c ff d8 	st.w	r7[-40],r12
8000466a:	ef 4b ff d4 	st.w	r7[-44],r11
8000466e:	ef 4a ff d0 	st.w	r7[-48],r10
80004672:	ef 49 ff cc 	st.w	r7[-52],r9
80004676:	ef 68 ff c8 	st.b	r7[-56],r8
	int8_t i;
	
	if (directionOpt)
8000467a:	ef 39 ff c8 	ld.ub	r9,r7[-56]
8000467e:	30 08       	mov	r8,0
80004680:	f0 09 18 00 	cp.b	r9,r8
80004684:	c3 40       	breq	800046ec <linearProgram3+0x94>
	{
		/* Optimize direction. Note that the optimization velocity is of unit length in this case. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
80004686:	ee fc ff d4 	ld.w	r12,r7[-44]
8000468a:	fe b0 f2 e9 	rcall	80002c5c <vector_norm>
8000468e:	18 98       	mov	r8,r12
80004690:	ef 48 ff f8 	st.w	r7[-8],r8
		for(i=0;i<3;i++)
80004694:	30 08       	mov	r8,0
80004696:	ef 68 ff f6 	st.b	r7[-10],r8
8000469a:	c2 18       	rjmp	800046dc <linearProgram3+0x84>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
8000469c:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800046a0:	a3 68       	lsl	r8,0x2
800046a2:	ee f9 ff cc 	ld.w	r9,r7[-52]
800046a6:	f2 08 00 05 	add	r5,r9,r8
800046aa:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800046ae:	a3 68       	lsl	r8,0x2
800046b0:	ee f9 ff d4 	ld.w	r9,r7[-44]
800046b4:	f2 08 00 08 	add	r8,r9,r8
800046b8:	70 08       	ld.w	r8,r8[0x0]
800046ba:	ee fb ff f8 	ld.w	r11,r7[-8]
800046be:	10 9c       	mov	r12,r8
800046c0:	f0 16 00 08 	mcall	r6[32]
800046c4:	18 98       	mov	r8,r12
800046c6:	10 99       	mov	r9,r8
800046c8:	ee f8 ff d0 	ld.w	r8,r7[-48]
800046cc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800046d0:	8b 08       	st.w	r5[0x0],r8
	
	if (directionOpt)
	{
		/* Optimize direction. Note that the optimization velocity is of unit length in this case. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
		for(i=0;i<3;i++)
800046d2:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800046d6:	2f f8       	sub	r8,-1
800046d8:	ef 68 ff f6 	st.b	r7[-10],r8
800046dc:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800046e0:	30 28       	mov	r8,2
800046e2:	f0 09 18 00 	cp.b	r9,r8
800046e6:	fe 9a ff db 	brle	8000469c <linearProgram3+0x44>
800046ea:	c6 98       	rjmp	800047bc <linearProgram3+0x164>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else if (vector_norm_sqr(OptimalVelocity) > SQR(maxSpeed)){
800046ec:	ee fc ff d4 	ld.w	r12,r7[-44]
800046f0:	fe b0 f2 9e 	rcall	80002c2c <vector_norm_sqr>
800046f4:	18 9a       	mov	r10,r12
800046f6:	ee f9 ff d0 	ld.w	r9,r7[-48]
800046fa:	ee f8 ff d0 	ld.w	r8,r7[-48]
800046fe:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80004702:	30 18       	mov	r8,1
80004704:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004708:	e0 8c 00 04 	brvs	80004710 <linearProgram3+0xb8>
8000470c:	e0 89 00 03 	brgt	80004712 <linearProgram3+0xba>
80004710:	30 08       	mov	r8,0
80004712:	5c 58       	castu.b	r8
80004714:	c3 40       	breq	8000477c <linearProgram3+0x124>
		/* Optimize closest point and outside circle. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
80004716:	ee fc ff d4 	ld.w	r12,r7[-44]
8000471a:	fe b0 f2 a1 	rcall	80002c5c <vector_norm>
8000471e:	18 98       	mov	r8,r12
80004720:	ef 48 ff fc 	st.w	r7[-4],r8
		for(i=0;i<3;i++)
80004724:	30 08       	mov	r8,0
80004726:	ef 68 ff f6 	st.b	r7[-10],r8
8000472a:	c2 18       	rjmp	8000476c <linearProgram3+0x114>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
8000472c:	ef 28 ff f6 	ld.sb	r8,r7[-10]
80004730:	a3 68       	lsl	r8,0x2
80004732:	ee f9 ff cc 	ld.w	r9,r7[-52]
80004736:	f2 08 00 05 	add	r5,r9,r8
8000473a:	ef 28 ff f6 	ld.sb	r8,r7[-10]
8000473e:	a3 68       	lsl	r8,0x2
80004740:	ee f9 ff d4 	ld.w	r9,r7[-44]
80004744:	f2 08 00 08 	add	r8,r9,r8
80004748:	70 08       	ld.w	r8,r8[0x0]
8000474a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000474e:	10 9c       	mov	r12,r8
80004750:	f0 16 00 08 	mcall	r6[32]
80004754:	18 98       	mov	r8,r12
80004756:	10 99       	mov	r9,r8
80004758:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000475c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80004760:	8b 08       	st.w	r5[0x0],r8
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else if (vector_norm_sqr(OptimalVelocity) > SQR(maxSpeed)){
		/* Optimize closest point and outside circle. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
		for(i=0;i<3;i++)
80004762:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004766:	2f f8       	sub	r8,-1
80004768:	ef 68 ff f6 	st.b	r7[-10],r8
8000476c:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80004770:	30 28       	mov	r8,2
80004772:	f0 09 18 00 	cp.b	r9,r8
80004776:	fe 9a ff db 	brle	8000472c <linearProgram3+0xd4>
8000477a:	c2 18       	rjmp	800047bc <linearProgram3+0x164>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else{
		for(i=0;i<3;i++)
8000477c:	30 08       	mov	r8,0
8000477e:	ef 68 ff f6 	st.b	r7[-10],r8
80004782:	c1 68       	rjmp	800047ae <linearProgram3+0x156>
		{
			NewVelocity[i] = OptimalVelocity[i];
80004784:	ef 28 ff f6 	ld.sb	r8,r7[-10]
80004788:	a3 68       	lsl	r8,0x2
8000478a:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000478e:	f2 08 00 08 	add	r8,r9,r8
80004792:	ef 29 ff f6 	ld.sb	r9,r7[-10]
80004796:	a3 69       	lsl	r9,0x2
80004798:	ee fa ff d4 	ld.w	r10,r7[-44]
8000479c:	f4 09 00 09 	add	r9,r10,r9
800047a0:	72 09       	ld.w	r9,r9[0x0]
800047a2:	91 09       	st.w	r8[0x0],r9
		for(i=0;i<3;i++)
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else{
		for(i=0;i<3;i++)
800047a4:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800047a8:	2f f8       	sub	r8,-1
800047aa:	ef 68 ff f6 	st.b	r7[-10],r8
800047ae:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800047b2:	30 28       	mov	r8,2
800047b4:	f0 09 18 00 	cp.b	r9,r8
800047b8:	fe 9a ff e6 	brle	80004784 <linearProgram3+0x12c>
		}
	}
	
	int8_t ind;
	
	for (ind=0;ind<centralData->number_of_neighbors;ind++)
800047bc:	30 08       	mov	r8,0
800047be:	ef 68 ff f7 	st.b	r7[-9],r8
800047c2:	ca a8       	rjmp	80004916 <linearProgram3+0x2be>
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
800047c4:	30 08       	mov	r8,0
800047c6:	ef 68 ff f6 	st.b	r7[-10],r8
800047ca:	c2 78       	rjmp	80004818 <linearProgram3+0x1c0>
		{
			diffPointVel[i] = planes[ind].point[i] - NewVelocity[i];
800047cc:	ef 2a ff f6 	ld.sb	r10,r7[-10]
800047d0:	ef 29 ff f7 	ld.sb	r9,r7[-9]
800047d4:	12 98       	mov	r8,r9
800047d6:	a1 78       	lsl	r8,0x1
800047d8:	12 08       	add	r8,r9
800047da:	a3 78       	lsl	r8,0x3
800047dc:	ee f9 ff d8 	ld.w	r9,r7[-40]
800047e0:	f2 08 00 08 	add	r8,r9,r8
800047e4:	ef 29 ff f6 	ld.sb	r9,r7[-10]
800047e8:	2f d9       	sub	r9,-3
800047ea:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800047ee:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800047f2:	a3 68       	lsl	r8,0x2
800047f4:	ee fb ff cc 	ld.w	r11,r7[-52]
800047f8:	f6 08 00 08 	add	r8,r11,r8
800047fc:	70 08       	ld.w	r8,r8[0x0]
800047fe:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80004802:	f4 08 15 02 	lsl	r8,r10,0x2
80004806:	ee 08 00 08 	add	r8,r7,r8
8000480a:	f1 49 ff e8 	st.w	r8[-24],r9
	int8_t ind;
	
	for (ind=0;ind<centralData->number_of_neighbors;ind++)
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
8000480e:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004812:	2f f8       	sub	r8,-1
80004814:	ef 68 ff f6 	st.b	r7[-10],r8
80004818:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000481c:	30 28       	mov	r8,2
8000481e:	f0 09 18 00 	cp.b	r9,r8
80004822:	fe 9a ff d5 	brle	800047cc <linearProgram3+0x174>
		{
			diffPointVel[i] = planes[ind].point[i] - NewVelocity[i];
		}
		if (scalar_product(planes[ind].normal, diffPointVel ) > 0.0)
80004826:	ef 29 ff f7 	ld.sb	r9,r7[-9]
8000482a:	12 98       	mov	r8,r9
8000482c:	a1 78       	lsl	r8,0x1
8000482e:	12 08       	add	r8,r9
80004830:	a3 78       	lsl	r8,0x3
80004832:	ee f9 ff d8 	ld.w	r9,r7[-40]
80004836:	f2 08 00 08 	add	r8,r9,r8
8000483a:	ee c9 00 18 	sub	r9,r7,24
8000483e:	12 9b       	mov	r11,r9
80004840:	10 9c       	mov	r12,r8
80004842:	fe b0 f0 25 	rcall	8000288c <scalar_product>
80004846:	18 9a       	mov	r10,r12
80004848:	30 18       	mov	r8,1
8000484a:	30 09       	mov	r9,0
8000484c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004850:	e0 8c 00 04 	brvs	80004858 <linearProgram3+0x200>
80004854:	e0 89 00 03 	brgt	8000485a <linearProgram3+0x202>
80004858:	30 08       	mov	r8,0
8000485a:	5c 58       	castu.b	r8
8000485c:	c5 80       	breq	8000490c <linearProgram3+0x2b4>
		{
			/* Result does not satisfy constraint ind. Compute new optimal result. */
			float tempResult[3];
			for (i=0;i<3;i++)
8000485e:	30 08       	mov	r8,0
80004860:	ef 68 ff f6 	st.b	r7[-10],r8
80004864:	c1 58       	rjmp	8000488e <linearProgram3+0x236>
			{
				tempResult[i] = NewVelocity[i];
80004866:	ef 28 ff f6 	ld.sb	r8,r7[-10]
8000486a:	ef 29 ff f6 	ld.sb	r9,r7[-10]
8000486e:	a3 69       	lsl	r9,0x2
80004870:	ee fa ff cc 	ld.w	r10,r7[-52]
80004874:	f4 09 00 09 	add	r9,r10,r9
80004878:	72 09       	ld.w	r9,r9[0x0]
8000487a:	a3 68       	lsl	r8,0x2
8000487c:	ee 08 00 08 	add	r8,r7,r8
80004880:	f1 49 ff dc 	st.w	r8[-36],r9
		}
		if (scalar_product(planes[ind].normal, diffPointVel ) > 0.0)
		{
			/* Result does not satisfy constraint ind. Compute new optimal result. */
			float tempResult[3];
			for (i=0;i<3;i++)
80004884:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004888:	2f f8       	sub	r8,-1
8000488a:	ef 68 ff f6 	st.b	r7[-10],r8
8000488e:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80004892:	30 28       	mov	r8,2
80004894:	f0 09 18 00 	cp.b	r9,r8
80004898:	fe 9a ff e7 	brle	80004866 <linearProgram3+0x20e>
			{
				tempResult[i] = NewVelocity[i];
			}
			if (!(linearProgram2(planes,ind,maxSpeed,OptimalVelocity,NewVelocity,directionOpt)))
8000489c:	ef 38 ff c8 	ld.ub	r8,r7[-56]
800048a0:	ef 2b ff f7 	ld.sb	r11,r7[-9]
800048a4:	1a d8       	st.w	--sp,r8
800048a6:	ee f8 ff cc 	ld.w	r8,r7[-52]
800048aa:	ee f9 ff d4 	ld.w	r9,r7[-44]
800048ae:	ee fa ff d0 	ld.w	r10,r7[-48]
800048b2:	ee fc ff d8 	ld.w	r12,r7[-40]
800048b6:	f0 16 01 82 	mcall	r6[1544]
800048ba:	2f fd       	sub	sp,-4
800048bc:	18 98       	mov	r8,r12
800048be:	ec 18 00 01 	eorl	r8,0x1
800048c2:	5c 58       	castu.b	r8
800048c4:	c2 40       	breq	8000490c <linearProgram3+0x2b4>
			{
				for (i=0;i<3;i++)
800048c6:	30 08       	mov	r8,0
800048c8:	ef 68 ff f6 	st.b	r7[-10],r8
800048cc:	c1 48       	rjmp	800048f4 <linearProgram3+0x29c>
				{
					NewVelocity[i] = tempResult[i];
800048ce:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800048d2:	a3 68       	lsl	r8,0x2
800048d4:	ee f9 ff cc 	ld.w	r9,r7[-52]
800048d8:	10 09       	add	r9,r8
800048da:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800048de:	a3 68       	lsl	r8,0x2
800048e0:	ee 08 00 08 	add	r8,r7,r8
800048e4:	f0 f8 ff dc 	ld.w	r8,r8[-36]
800048e8:	93 08       	st.w	r9[0x0],r8
			{
				tempResult[i] = NewVelocity[i];
			}
			if (!(linearProgram2(planes,ind,maxSpeed,OptimalVelocity,NewVelocity,directionOpt)))
			{
				for (i=0;i<3;i++)
800048ea:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800048ee:	2f f8       	sub	r8,-1
800048f0:	ef 68 ff f6 	st.b	r7[-10],r8
800048f4:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800048f8:	30 28       	mov	r8,2
800048fa:	f0 09 18 00 	cp.b	r9,r8
800048fe:	fe 9a ff e8 	brle	800048ce <linearProgram3+0x276>
				{
					NewVelocity[i] = tempResult[i];
				}
				
				return ind;
80004902:	ef 28 ff f7 	ld.sb	r8,r7[-9]
80004906:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8000490a:	c1 78       	rjmp	80004938 <linearProgram3+0x2e0>
		}
	}
	
	int8_t ind;
	
	for (ind=0;ind<centralData->number_of_neighbors;ind++)
8000490c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004910:	2f f8       	sub	r8,-1
80004912:	ef 68 ff f7 	st.b	r7[-9],r8
80004916:	ef 29 ff f7 	ld.sb	r9,r7[-9]
8000491a:	ec f8 00 00 	ld.w	r8,r6[0]
8000491e:	70 08       	ld.w	r8,r8[0x0]
80004920:	f1 38 10 fc 	ld.ub	r8,r8[4348]
80004924:	10 39       	cp.w	r9,r8
80004926:	fe 95 ff 4f 	brlt	800047c4 <linearProgram3+0x16c>
				
				return ind;
			}
		}
	}
	return centralData->number_of_neighbors;
8000492a:	ec f8 00 00 	ld.w	r8,r6[0]
8000492e:	70 08       	ld.w	r8,r8[0x0]
80004930:	f1 38 10 fc 	ld.ub	r8,r8[4348]
80004934:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
}
80004938:	10 9c       	mov	r12,r8
8000493a:	2f 2d       	sub	sp,-56
8000493c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80004940:	80 00       	ld.sh	r0,r0[0x0]
80004942:	44 e8       	lddsp	r8,sp[0x138]

80004944 <linearProgram4>:

void linearProgram4(plane_t planes[], int8_t ind, float maxSpeed, float NewVelocity[])
{
80004944:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80004948:	1a 97       	mov	r7,sp
8000494a:	fa cd 01 ec 	sub	sp,sp,492
8000494e:	fe f6 07 7a 	ld.w	r6,pc[1914]
80004952:	1e 26       	rsub	r6,pc
80004954:	ef 4c fe 20 	st.w	r7[-480],r12
80004958:	16 98       	mov	r8,r11
8000495a:	ef 4a fe 18 	st.w	r7[-488],r10
8000495e:	ef 49 fe 14 	st.w	r7[-492],r9
80004962:	ef 68 fe 1c 	st.b	r7[-484],r8
	
	int8_t index,index2;
	
	plane_t projPlanes[MAX_NUM_NEIGHBORS];
	
	float distance = 0.0;
80004966:	30 08       	mov	r8,0
80004968:	ef 48 ff f0 	st.w	r7[-16],r8
	
	for (index = ind;index<centralData->number_of_neighbors;index++)
8000496c:	ef 38 fe 1c 	ld.ub	r8,r7[-484]
80004970:	ef 68 ff ee 	st.b	r7[-18],r8
80004974:	e0 8f 03 9c 	bral	800050ac <linearProgram4+0x768>
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
80004978:	30 08       	mov	r8,0
8000497a:	ef 68 ff ed 	st.b	r7[-19],r8
8000497e:	c2 78       	rjmp	800049cc <linearProgram4+0x88>
		{
			diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
80004980:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004984:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004988:	12 98       	mov	r8,r9
8000498a:	a1 78       	lsl	r8,0x1
8000498c:	12 08       	add	r8,r9
8000498e:	a3 78       	lsl	r8,0x3
80004990:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004994:	f2 08 00 08 	add	r8,r9,r8
80004998:	ef 29 ff ed 	ld.sb	r9,r7[-19]
8000499c:	2f d9       	sub	r9,-3
8000499e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800049a2:	ef 28 ff ed 	ld.sb	r8,r7[-19]
800049a6:	a3 68       	lsl	r8,0x2
800049a8:	ee fb fe 14 	ld.w	r11,r7[-492]
800049ac:	f6 08 00 08 	add	r8,r11,r8
800049b0:	70 08       	ld.w	r8,r8[0x0]
800049b2:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800049b6:	f4 08 15 02 	lsl	r8,r10,0x2
800049ba:	ee 08 00 08 	add	r8,r7,r8
800049be:	f1 49 fe 78 	st.w	r8[-392],r9
	float distance = 0.0;
	
	for (index = ind;index<centralData->number_of_neighbors;index++)
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
800049c2:	ef 38 ff ed 	ld.ub	r8,r7[-19]
800049c6:	2f f8       	sub	r8,-1
800049c8:	ef 68 ff ed 	st.b	r7[-19],r8
800049cc:	ef 39 ff ed 	ld.ub	r9,r7[-19]
800049d0:	30 28       	mov	r8,2
800049d2:	f0 09 18 00 	cp.b	r9,r8
800049d6:	fe 9a ff d5 	brle	80004980 <linearProgram4+0x3c>
		{
			diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
		}
		if (scalar_product(planes[index].normal,diffPointVel)>distance)
800049da:	ef 29 ff ee 	ld.sb	r9,r7[-18]
800049de:	12 98       	mov	r8,r9
800049e0:	a1 78       	lsl	r8,0x1
800049e2:	12 08       	add	r8,r9
800049e4:	a3 78       	lsl	r8,0x3
800049e6:	ee f9 fe 20 	ld.w	r9,r7[-480]
800049ea:	f2 08 00 08 	add	r8,r9,r8
800049ee:	ee c9 01 88 	sub	r9,r7,392
800049f2:	12 9b       	mov	r11,r9
800049f4:	10 9c       	mov	r12,r8
800049f6:	fe b0 ef 4b 	rcall	8000288c <scalar_product>
800049fa:	18 9a       	mov	r10,r12
800049fc:	30 18       	mov	r8,1
800049fe:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004a02:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004a06:	e0 8c 00 04 	brvs	80004a0e <linearProgram4+0xca>
80004a0a:	e0 89 00 03 	brgt	80004a10 <linearProgram4+0xcc>
80004a0e:	30 08       	mov	r8,0
80004a10:	5c 58       	castu.b	r8
80004a12:	e0 80 03 48 	breq	800050a2 <linearProgram4+0x75e>
		{
			/* Result does not satisfy constraint of plane i. */
			
			for (index2 = 0;index2<index;index2++)
80004a16:	30 08       	mov	r8,0
80004a18:	ef 68 ff ef 	st.b	r7[-17],r8
80004a1c:	e0 8f 02 98 	bral	80004f4c <linearProgram4+0x608>
			{
				plane_t plane;
				float crossProduct[3];
				CROSS(planes[index2].normal, planes[index].normal, crossProduct);
80004a20:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004a24:	12 98       	mov	r8,r9
80004a26:	a1 78       	lsl	r8,0x1
80004a28:	12 08       	add	r8,r9
80004a2a:	a3 78       	lsl	r8,0x3
80004a2c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a30:	f2 08 00 08 	add	r8,r9,r8
80004a34:	70 1a       	ld.w	r10,r8[0x4]
80004a36:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004a3a:	12 98       	mov	r8,r9
80004a3c:	a1 78       	lsl	r8,0x1
80004a3e:	12 08       	add	r8,r9
80004a40:	a3 78       	lsl	r8,0x3
80004a42:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a46:	f2 08 00 08 	add	r8,r9,r8
80004a4a:	70 28       	ld.w	r8,r8[0x8]
80004a4c:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004a50:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004a54:	12 98       	mov	r8,r9
80004a56:	a1 78       	lsl	r8,0x1
80004a58:	12 08       	add	r8,r9
80004a5a:	a3 78       	lsl	r8,0x3
80004a5c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a60:	f2 08 00 08 	add	r8,r9,r8
80004a64:	70 2b       	ld.w	r11,r8[0x8]
80004a66:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004a6a:	12 98       	mov	r8,r9
80004a6c:	a1 78       	lsl	r8,0x1
80004a6e:	12 08       	add	r8,r9
80004a70:	a3 78       	lsl	r8,0x3
80004a72:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a76:	f2 08 00 08 	add	r8,r9,r8
80004a7a:	70 18       	ld.w	r8,r8[0x4]
80004a7c:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004a80:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004a84:	ef 48 fe 3c 	st.w	r7[-452],r8
80004a88:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004a8c:	12 98       	mov	r8,r9
80004a8e:	a1 78       	lsl	r8,0x1
80004a90:	12 08       	add	r8,r9
80004a92:	a3 78       	lsl	r8,0x3
80004a94:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a98:	f2 08 00 08 	add	r8,r9,r8
80004a9c:	70 2a       	ld.w	r10,r8[0x8]
80004a9e:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004aa2:	12 98       	mov	r8,r9
80004aa4:	a1 78       	lsl	r8,0x1
80004aa6:	12 08       	add	r8,r9
80004aa8:	a3 78       	lsl	r8,0x3
80004aaa:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004aae:	f2 08 00 08 	add	r8,r9,r8
80004ab2:	70 08       	ld.w	r8,r8[0x0]
80004ab4:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004ab8:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004abc:	12 98       	mov	r8,r9
80004abe:	a1 78       	lsl	r8,0x1
80004ac0:	12 08       	add	r8,r9
80004ac2:	a3 78       	lsl	r8,0x3
80004ac4:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004ac8:	f2 08 00 08 	add	r8,r9,r8
80004acc:	70 0b       	ld.w	r11,r8[0x0]
80004ace:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004ad2:	12 98       	mov	r8,r9
80004ad4:	a1 78       	lsl	r8,0x1
80004ad6:	12 08       	add	r8,r9
80004ad8:	a3 78       	lsl	r8,0x3
80004ada:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004ade:	f2 08 00 08 	add	r8,r9,r8
80004ae2:	70 28       	ld.w	r8,r8[0x8]
80004ae4:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004ae8:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004aec:	ef 48 fe 40 	st.w	r7[-448],r8
80004af0:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004af4:	12 98       	mov	r8,r9
80004af6:	a1 78       	lsl	r8,0x1
80004af8:	12 08       	add	r8,r9
80004afa:	a3 78       	lsl	r8,0x3
80004afc:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b00:	f2 08 00 08 	add	r8,r9,r8
80004b04:	70 0a       	ld.w	r10,r8[0x0]
80004b06:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004b0a:	12 98       	mov	r8,r9
80004b0c:	a1 78       	lsl	r8,0x1
80004b0e:	12 08       	add	r8,r9
80004b10:	a3 78       	lsl	r8,0x3
80004b12:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b16:	f2 08 00 08 	add	r8,r9,r8
80004b1a:	70 18       	ld.w	r8,r8[0x4]
80004b1c:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004b20:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004b24:	12 98       	mov	r8,r9
80004b26:	a1 78       	lsl	r8,0x1
80004b28:	12 08       	add	r8,r9
80004b2a:	a3 78       	lsl	r8,0x3
80004b2c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b30:	f2 08 00 08 	add	r8,r9,r8
80004b34:	70 1b       	ld.w	r11,r8[0x4]
80004b36:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004b3a:	12 98       	mov	r8,r9
80004b3c:	a1 78       	lsl	r8,0x1
80004b3e:	12 08       	add	r8,r9
80004b40:	a3 78       	lsl	r8,0x3
80004b42:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b46:	f2 08 00 08 	add	r8,r9,r8
80004b4a:	70 08       	ld.w	r8,r8[0x0]
80004b4c:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004b50:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004b54:	ef 48 fe 44 	st.w	r7[-444],r8
				
				if (vector_norm_sqr(crossProduct)<=RVO_EPSILON)
80004b58:	ee c8 01 c4 	sub	r8,r7,452
80004b5c:	10 9c       	mov	r12,r8
80004b5e:	fe b0 f0 67 	rcall	80002c2c <vector_norm_sqr>
80004b62:	18 98       	mov	r8,r12
80004b64:	10 9c       	mov	r12,r8
80004b66:	f0 16 00 02 	mcall	r6[8]
80004b6a:	14 98       	mov	r8,r10
80004b6c:	16 99       	mov	r9,r11
80004b6e:	30 05       	mov	r5,0
80004b70:	e0 6a 43 2d 	mov	r10,17197
80004b74:	ea 1a eb 1c 	orh	r10,0xeb1c
80004b78:	e0 6b 36 e2 	mov	r11,14050
80004b7c:	ea 1b 3f 1a 	orh	r11,0x3f1a
80004b80:	f0 16 00 7d 	mcall	r6[500]
80004b84:	18 98       	mov	r8,r12
80004b86:	58 08       	cp.w	r8,0
80004b88:	c0 20       	breq	80004b8c <linearProgram4+0x248>
80004b8a:	30 15       	mov	r5,1
80004b8c:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80004b90:	c6 50       	breq	80004c5a <linearProgram4+0x316>
				{
					/* Plane index and plane index2 are (almost) parallel. */
					if (scalar_product(planes[index].normal, planes[index2].normal) > 0.0f) {
80004b92:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004b96:	12 98       	mov	r8,r9
80004b98:	a1 78       	lsl	r8,0x1
80004b9a:	12 08       	add	r8,r9
80004b9c:	a3 78       	lsl	r8,0x3
80004b9e:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004ba2:	f2 08 00 08 	add	r8,r9,r8
80004ba6:	10 9a       	mov	r10,r8
80004ba8:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004bac:	12 98       	mov	r8,r9
80004bae:	a1 78       	lsl	r8,0x1
80004bb0:	12 08       	add	r8,r9
80004bb2:	a3 78       	lsl	r8,0x3
80004bb4:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004bb8:	f2 08 00 08 	add	r8,r9,r8
80004bbc:	14 9b       	mov	r11,r10
80004bbe:	10 9c       	mov	r12,r8
80004bc0:	fe b0 ee 66 	rcall	8000288c <scalar_product>
80004bc4:	18 9a       	mov	r10,r12
80004bc6:	30 18       	mov	r8,1
80004bc8:	30 09       	mov	r9,0
80004bca:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004bce:	e0 8c 00 04 	brvs	80004bd6 <linearProgram4+0x292>
80004bd2:	e0 89 00 03 	brgt	80004bd8 <linearProgram4+0x294>
80004bd6:	30 08       	mov	r8,0
80004bd8:	5c 58       	castu.b	r8
80004bda:	e0 81 01 b3 	brne	80004f40 <linearProgram4+0x5fc>
						/* Plane index and plane index2 point in the same direction. */
						continue;
					}else{
						/* Plane index and plane index2 point in opposite direction. */
						for (i=0;i<3;i++)
80004bde:	30 08       	mov	r8,0
80004be0:	ef 68 ff ed 	st.b	r7[-19],r8
80004be4:	c3 38       	rjmp	80004c4a <linearProgram4+0x306>
						{
							plane.point[i] = 0.5 * (planes[index].point[i] + planes[index2].point[i]);
80004be6:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004bea:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004bee:	12 98       	mov	r8,r9
80004bf0:	a1 78       	lsl	r8,0x1
80004bf2:	12 08       	add	r8,r9
80004bf4:	a3 78       	lsl	r8,0x3
80004bf6:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004bfa:	f2 08 00 08 	add	r8,r9,r8
80004bfe:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004c02:	2f d9       	sub	r9,-3
80004c04:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
80004c08:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004c0c:	12 98       	mov	r8,r9
80004c0e:	a1 78       	lsl	r8,0x1
80004c10:	12 08       	add	r8,r9
80004c12:	a3 78       	lsl	r8,0x3
80004c14:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004c18:	f2 08 00 08 	add	r8,r9,r8
80004c1c:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004c20:	2f d9       	sub	r9,-3
80004c22:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004c26:	e5 a0 09 b8 	cop	cp0,cr9,cr11,cr8,0x40
80004c2a:	fc 18 3f 00 	movh	r8,0x3f00
80004c2e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80004c32:	f4 c8 ff fd 	sub	r8,r10,-3
80004c36:	a3 68       	lsl	r8,0x2
80004c38:	ee 08 00 08 	add	r8,r7,r8
80004c3c:	f1 49 fe 48 	st.w	r8[-440],r9
					if (scalar_product(planes[index].normal, planes[index2].normal) > 0.0f) {
						/* Plane index and plane index2 point in the same direction. */
						continue;
					}else{
						/* Plane index and plane index2 point in opposite direction. */
						for (i=0;i<3;i++)
80004c40:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004c44:	2f f8       	sub	r8,-1
80004c46:	ef 68 ff ed 	st.b	r7[-19],r8
80004c4a:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004c4e:	30 28       	mov	r8,2
80004c50:	f0 09 18 00 	cp.b	r9,r8
80004c54:	fe 9a ff c9 	brle	80004be6 <linearProgram4+0x2a2>
80004c58:	c5 69       	rjmp	80004f04 <linearProgram4+0x5c0>
							plane.point[i] = 0.5 * (planes[index].point[i] + planes[index2].point[i]);
						}
					}
				}else{
					float lineNormal[3];
					CROSS(crossProduct,planes[index].normal,lineNormal);
80004c5a:	ee fa fe 40 	ld.w	r10,r7[-448]
80004c5e:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004c62:	12 98       	mov	r8,r9
80004c64:	a1 78       	lsl	r8,0x1
80004c66:	12 08       	add	r8,r9
80004c68:	a3 78       	lsl	r8,0x3
80004c6a:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004c6e:	f2 08 00 08 	add	r8,r9,r8
80004c72:	70 28       	ld.w	r8,r8[0x8]
80004c74:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004c78:	ee fb fe 44 	ld.w	r11,r7[-444]
80004c7c:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004c80:	12 98       	mov	r8,r9
80004c82:	a1 78       	lsl	r8,0x1
80004c84:	12 08       	add	r8,r9
80004c86:	a3 78       	lsl	r8,0x3
80004c88:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004c8c:	f2 08 00 08 	add	r8,r9,r8
80004c90:	70 18       	ld.w	r8,r8[0x4]
80004c92:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004c96:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004c9a:	ef 48 fe 30 	st.w	r7[-464],r8
80004c9e:	ee fa fe 44 	ld.w	r10,r7[-444]
80004ca2:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004ca6:	12 98       	mov	r8,r9
80004ca8:	a1 78       	lsl	r8,0x1
80004caa:	12 08       	add	r8,r9
80004cac:	a3 78       	lsl	r8,0x3
80004cae:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004cb2:	f2 08 00 08 	add	r8,r9,r8
80004cb6:	70 08       	ld.w	r8,r8[0x0]
80004cb8:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004cbc:	ee fb fe 3c 	ld.w	r11,r7[-452]
80004cc0:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004cc4:	12 98       	mov	r8,r9
80004cc6:	a1 78       	lsl	r8,0x1
80004cc8:	12 08       	add	r8,r9
80004cca:	a3 78       	lsl	r8,0x3
80004ccc:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004cd0:	f2 08 00 08 	add	r8,r9,r8
80004cd4:	70 28       	ld.w	r8,r8[0x8]
80004cd6:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004cda:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004cde:	ef 48 fe 34 	st.w	r7[-460],r8
80004ce2:	ee fa fe 3c 	ld.w	r10,r7[-452]
80004ce6:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004cea:	12 98       	mov	r8,r9
80004cec:	a1 78       	lsl	r8,0x1
80004cee:	12 08       	add	r8,r9
80004cf0:	a3 78       	lsl	r8,0x3
80004cf2:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004cf6:	f2 08 00 08 	add	r8,r9,r8
80004cfa:	70 18       	ld.w	r8,r8[0x4]
80004cfc:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004d00:	ee fb fe 40 	ld.w	r11,r7[-448]
80004d04:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004d08:	12 98       	mov	r8,r9
80004d0a:	a1 78       	lsl	r8,0x1
80004d0c:	12 08       	add	r8,r9
80004d0e:	a3 78       	lsl	r8,0x3
80004d10:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004d14:	f2 08 00 08 	add	r8,r9,r8
80004d18:	70 08       	ld.w	r8,r8[0x0]
80004d1a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004d1e:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004d22:	ef 48 fe 38 	st.w	r7[-456],r8
					
					float diffPoints[3];
					for (i=0;i<3;i++)
80004d26:	30 08       	mov	r8,0
80004d28:	ef 68 ff ed 	st.b	r7[-19],r8
80004d2c:	c2 e8       	rjmp	80004d88 <linearProgram4+0x444>
					{
						diffPoints[i] = planes[index2].point[i] - planes[index].point[i];
80004d2e:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004d32:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004d36:	12 98       	mov	r8,r9
80004d38:	a1 78       	lsl	r8,0x1
80004d3a:	12 08       	add	r8,r9
80004d3c:	a3 78       	lsl	r8,0x3
80004d3e:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004d42:	f2 08 00 08 	add	r8,r9,r8
80004d46:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004d4a:	2f d9       	sub	r9,-3
80004d4c:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
80004d50:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004d54:	12 98       	mov	r8,r9
80004d56:	a1 78       	lsl	r8,0x1
80004d58:	12 08       	add	r8,r9
80004d5a:	a3 78       	lsl	r8,0x3
80004d5c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004d60:	f2 08 00 08 	add	r8,r9,r8
80004d64:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004d68:	2f d9       	sub	r9,-3
80004d6a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004d6e:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
80004d72:	f4 08 15 02 	lsl	r8,r10,0x2
80004d76:	ee 08 00 08 	add	r8,r7,r8
80004d7a:	f1 49 fe 24 	st.w	r8[-476],r9
				}else{
					float lineNormal[3];
					CROSS(crossProduct,planes[index].normal,lineNormal);
					
					float diffPoints[3];
					for (i=0;i<3;i++)
80004d7e:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004d82:	2f f8       	sub	r8,-1
80004d84:	ef 68 ff ed 	st.b	r7[-19],r8
80004d88:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004d8c:	30 28       	mov	r8,2
80004d8e:	f0 09 18 00 	cp.b	r9,r8
80004d92:	fe 9a ff ce 	brle	80004d2e <linearProgram4+0x3ea>
					{
						diffPoints[i] = planes[index2].point[i] - planes[index].point[i];
					}
					
					float scalarProdPtsNormal = scalar_product(diffPoints, planes[index2].normal);
80004d96:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004d9a:	12 98       	mov	r8,r9
80004d9c:	a1 78       	lsl	r8,0x1
80004d9e:	12 08       	add	r8,r9
80004da0:	a3 78       	lsl	r8,0x3
80004da2:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004da6:	f2 08 00 08 	add	r8,r9,r8
80004daa:	10 99       	mov	r9,r8
80004dac:	ee c8 01 dc 	sub	r8,r7,476
80004db0:	12 9b       	mov	r11,r9
80004db2:	10 9c       	mov	r12,r8
80004db4:	fe b0 ed 6c 	rcall	8000288c <scalar_product>
80004db8:	18 98       	mov	r8,r12
80004dba:	ef 48 ff f4 	st.w	r7[-12],r8
					float scalarProdNormals = scalar_product(lineNormal, planes[index2].normal);
80004dbe:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004dc2:	12 98       	mov	r8,r9
80004dc4:	a1 78       	lsl	r8,0x1
80004dc6:	12 08       	add	r8,r9
80004dc8:	a3 78       	lsl	r8,0x3
80004dca:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004dce:	f2 08 00 08 	add	r8,r9,r8
80004dd2:	10 99       	mov	r9,r8
80004dd4:	ee c8 01 d0 	sub	r8,r7,464
80004dd8:	12 9b       	mov	r11,r9
80004dda:	10 9c       	mov	r12,r8
80004ddc:	fe b0 ed 58 	rcall	8000288c <scalar_product>
80004de0:	18 98       	mov	r8,r12
80004de2:	ef 48 ff f8 	st.w	r7[-8],r8
					for (i=0;i<3;i++)
80004de6:	30 08       	mov	r8,0
80004de8:	ef 68 ff ed 	st.b	r7[-19],r8
80004dec:	c5 78       	rjmp	80004e9a <linearProgram4+0x556>
					{
						plane.point[i] = planes[index].point[i] + (scalarProdPtsNormal / scalarProdNormals) * lineNormal[i];
80004dee:	ef 25 ff ed 	ld.sb	r5,r7[-19]
80004df2:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004df6:	12 98       	mov	r8,r9
80004df8:	a1 78       	lsl	r8,0x1
80004dfa:	12 08       	add	r8,r9
80004dfc:	a3 78       	lsl	r8,0x3
80004dfe:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004e02:	f2 08 00 08 	add	r8,r9,r8
80004e06:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004e0a:	2f d9       	sub	r9,-3
80004e0c:	f0 09 03 23 	ld.w	r3,r8[r9<<0x2]
80004e10:	ee fb ff f8 	ld.w	r11,r7[-8]
80004e14:	ee fc ff f4 	ld.w	r12,r7[-12]
80004e18:	f0 16 00 08 	mcall	r6[32]
80004e1c:	18 98       	mov	r8,r12
80004e1e:	10 99       	mov	r9,r8
80004e20:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004e24:	a3 68       	lsl	r8,0x2
80004e26:	ee 08 00 08 	add	r8,r7,r8
80004e2a:	f0 f8 fe 30 	ld.w	r8,r8[-464]
80004e2e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80004e32:	e5 a0 09 38 	cop	cp0,cr9,cr3,cr8,0x40
80004e36:	ea c8 ff fd 	sub	r8,r5,-3
80004e3a:	a3 68       	lsl	r8,0x2
80004e3c:	ee 08 00 08 	add	r8,r7,r8
80004e40:	f1 49 fe 48 	st.w	r8[-440],r9
						plane.normal[i] = planes[index2].normal[i] - planes[index].normal[i];
80004e44:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004e48:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004e4c:	12 98       	mov	r8,r9
80004e4e:	a1 78       	lsl	r8,0x1
80004e50:	12 08       	add	r8,r9
80004e52:	a3 78       	lsl	r8,0x3
80004e54:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004e58:	f2 08 00 08 	add	r8,r9,r8
80004e5c:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004e60:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
80004e64:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004e68:	12 98       	mov	r8,r9
80004e6a:	a1 78       	lsl	r8,0x1
80004e6c:	12 08       	add	r8,r9
80004e6e:	a3 78       	lsl	r8,0x3
80004e70:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004e74:	f2 08 00 08 	add	r8,r9,r8
80004e78:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004e7c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004e80:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
80004e84:	f4 08 15 02 	lsl	r8,r10,0x2
80004e88:	ee 08 00 08 	add	r8,r7,r8
80004e8c:	f1 49 fe 48 	st.w	r8[-440],r9
						diffPoints[i] = planes[index2].point[i] - planes[index].point[i];
					}
					
					float scalarProdPtsNormal = scalar_product(diffPoints, planes[index2].normal);
					float scalarProdNormals = scalar_product(lineNormal, planes[index2].normal);
					for (i=0;i<3;i++)
80004e90:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004e94:	2f f8       	sub	r8,-1
80004e96:	ef 68 ff ed 	st.b	r7[-19],r8
80004e9a:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004e9e:	30 28       	mov	r8,2
80004ea0:	f0 09 18 00 	cp.b	r9,r8
80004ea4:	fe 9a ff a5 	brle	80004dee <linearProgram4+0x4aa>
					{
						plane.point[i] = planes[index].point[i] + (scalarProdPtsNormal / scalarProdNormals) * lineNormal[i];
						plane.normal[i] = planes[index2].normal[i] - planes[index].normal[i];
					}
					
					float normNormal = vector_norm(plane.normal);
80004ea8:	ee c8 01 b8 	sub	r8,r7,440
80004eac:	10 9c       	mov	r12,r8
80004eae:	fe b0 ee d7 	rcall	80002c5c <vector_norm>
80004eb2:	18 98       	mov	r8,r12
80004eb4:	ef 48 ff fc 	st.w	r7[-4],r8
					for(i=0;i<3;i++)
80004eb8:	30 08       	mov	r8,0
80004eba:	ef 68 ff ed 	st.b	r7[-19],r8
80004ebe:	c1 c8       	rjmp	80004ef6 <linearProgram4+0x5b2>
					{
						plane.normal[i] = plane.normal[i] / normNormal;
80004ec0:	ef 25 ff ed 	ld.sb	r5,r7[-19]
80004ec4:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004ec8:	a3 68       	lsl	r8,0x2
80004eca:	ee 08 00 08 	add	r8,r7,r8
80004ece:	f0 f8 fe 48 	ld.w	r8,r8[-440]
80004ed2:	ee fb ff fc 	ld.w	r11,r7[-4]
80004ed6:	10 9c       	mov	r12,r8
80004ed8:	f0 16 00 08 	mcall	r6[32]
80004edc:	18 98       	mov	r8,r12
80004ede:	10 99       	mov	r9,r8
80004ee0:	ea 08 15 02 	lsl	r8,r5,0x2
80004ee4:	ee 08 00 08 	add	r8,r7,r8
80004ee8:	f1 49 fe 48 	st.w	r8[-440],r9
						plane.point[i] = planes[index].point[i] + (scalarProdPtsNormal / scalarProdNormals) * lineNormal[i];
						plane.normal[i] = planes[index2].normal[i] - planes[index].normal[i];
					}
					
					float normNormal = vector_norm(plane.normal);
					for(i=0;i<3;i++)
80004eec:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004ef0:	2f f8       	sub	r8,-1
80004ef2:	ef 68 ff ed 	st.b	r7[-19],r8
80004ef6:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004efa:	30 28       	mov	r8,2
80004efc:	f0 09 18 00 	cp.b	r9,r8
80004f00:	fe 9a ff e0 	brle	80004ec0 <linearProgram4+0x57c>
					{
						plane.normal[i] = plane.normal[i] / normNormal;
					}
				}
				projPlanes[index2] = plane;
80004f04:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004f08:	12 98       	mov	r8,r9
80004f0a:	a1 78       	lsl	r8,0x1
80004f0c:	12 08       	add	r8,r9
80004f0e:	a3 78       	lsl	r8,0x3
80004f10:	ee 08 00 08 	add	r8,r7,r8
80004f14:	f0 c8 01 7c 	sub	r8,r8,380
80004f18:	10 9a       	mov	r10,r8
80004f1a:	ee cb 01 b8 	sub	r11,r7,440
80004f1e:	f4 c8 00 00 	sub	r8,r10,0
80004f22:	f6 c9 00 00 	sub	r9,r11,0
80004f26:	72 0c       	ld.w	r12,r9[0x0]
80004f28:	91 0c       	st.w	r8[0x0],r12
80004f2a:	72 1c       	ld.w	r12,r9[0x4]
80004f2c:	91 1c       	st.w	r8[0x4],r12
80004f2e:	72 2c       	ld.w	r12,r9[0x8]
80004f30:	91 2c       	st.w	r8[0x8],r12
80004f32:	72 39       	ld.w	r9,r9[0xc]
80004f34:	91 39       	st.w	r8[0xc],r9
80004f36:	f6 e8 00 10 	ld.d	r8,r11[16]
80004f3a:	f4 e9 00 10 	st.d	r10[16],r8
80004f3e:	c0 28       	rjmp	80004f42 <linearProgram4+0x5fe>
				if (vector_norm_sqr(crossProduct)<=RVO_EPSILON)
				{
					/* Plane index and plane index2 are (almost) parallel. */
					if (scalar_product(planes[index].normal, planes[index2].normal) > 0.0f) {
						/* Plane index and plane index2 point in the same direction. */
						continue;
80004f40:	d7 03       	nop
		}
		if (scalar_product(planes[index].normal,diffPointVel)>distance)
		{
			/* Result does not satisfy constraint of plane i. */
			
			for (index2 = 0;index2<index;index2++)
80004f42:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80004f46:	2f f8       	sub	r8,-1
80004f48:	ef 68 ff ef 	st.b	r7[-17],r8
80004f4c:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80004f50:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80004f54:	f0 09 18 00 	cp.b	r9,r8
80004f58:	fe 95 fd 64 	brlt	80004a20 <linearProgram4+0xdc>
				}
				projPlanes[index2] = plane;
			}
			
			float tempResult[3];
			for (i=0;i<3;i++)
80004f5c:	30 08       	mov	r8,0
80004f5e:	ef 68 ff ed 	st.b	r7[-19],r8
80004f62:	c1 58       	rjmp	80004f8c <linearProgram4+0x648>
			{
				tempResult[i] = NewVelocity[i];
80004f64:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004f68:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004f6c:	a3 69       	lsl	r9,0x2
80004f6e:	ee fa fe 14 	ld.w	r10,r7[-492]
80004f72:	f4 09 00 09 	add	r9,r10,r9
80004f76:	72 09       	ld.w	r9,r9[0x0]
80004f78:	a3 68       	lsl	r8,0x2
80004f7a:	ee 08 00 08 	add	r8,r7,r8
80004f7e:	f1 49 fe 6c 	st.w	r8[-404],r9
				}
				projPlanes[index2] = plane;
			}
			
			float tempResult[3];
			for (i=0;i<3;i++)
80004f82:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004f86:	2f f8       	sub	r8,-1
80004f88:	ef 68 ff ed 	st.b	r7[-19],r8
80004f8c:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004f90:	30 28       	mov	r8,2
80004f92:	f0 09 18 00 	cp.b	r9,r8
80004f96:	fe 9a ff e7 	brle	80004f64 <linearProgram4+0x620>
			{
				tempResult[i] = NewVelocity[i];
			}
			if (linearProgram3(projPlanes,planes[index].normal,maxSpeed,NewVelocity,true)<index)
80004f9a:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004f9e:	12 98       	mov	r8,r9
80004fa0:	a1 78       	lsl	r8,0x1
80004fa2:	12 08       	add	r8,r9
80004fa4:	a3 78       	lsl	r8,0x3
80004fa6:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004faa:	f2 08 00 08 	add	r8,r9,r8
80004fae:	10 9b       	mov	r11,r8
80004fb0:	ee cc 01 7c 	sub	r12,r7,380
80004fb4:	30 18       	mov	r8,1
80004fb6:	ee f9 fe 14 	ld.w	r9,r7[-492]
80004fba:	ee fa fe 18 	ld.w	r10,r7[-488]
80004fbe:	f0 16 01 0d 	mcall	r6[1076]
80004fc2:	18 9a       	mov	r10,r12
80004fc4:	ef 28 ff ee 	ld.sb	r8,r7[-18]
80004fc8:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
80004fcc:	30 18       	mov	r8,1
80004fce:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004fd2:	e0 8c 00 03 	brvs	80004fd8 <linearProgram4+0x694>
80004fd6:	c0 25       	brlt	80004fda <linearProgram4+0x696>
80004fd8:	30 08       	mov	r8,0
80004fda:	5c 58       	castu.b	r8
80004fdc:	c1 f0       	breq	8000501a <linearProgram4+0x6d6>
			{
				for (i=0;i<3;i++)
80004fde:	30 08       	mov	r8,0
80004fe0:	ef 68 ff ed 	st.b	r7[-19],r8
80004fe4:	c1 48       	rjmp	8000500c <linearProgram4+0x6c8>
				{
					NewVelocity[i] = tempResult[i];
80004fe6:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004fea:	a3 68       	lsl	r8,0x2
80004fec:	ee f9 fe 14 	ld.w	r9,r7[-492]
80004ff0:	10 09       	add	r9,r8
80004ff2:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004ff6:	a3 68       	lsl	r8,0x2
80004ff8:	ee 08 00 08 	add	r8,r7,r8
80004ffc:	f0 f8 fe 6c 	ld.w	r8,r8[-404]
80005000:	93 08       	st.w	r9[0x0],r8
			{
				tempResult[i] = NewVelocity[i];
			}
			if (linearProgram3(projPlanes,planes[index].normal,maxSpeed,NewVelocity,true)<index)
			{
				for (i=0;i<3;i++)
80005002:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80005006:	2f f8       	sub	r8,-1
80005008:	ef 68 ff ed 	st.b	r7[-19],r8
8000500c:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80005010:	30 28       	mov	r8,2
80005012:	f0 09 18 00 	cp.b	r9,r8
80005016:	fe 9a ff e8 	brle	80004fe6 <linearProgram4+0x6a2>
				{
					NewVelocity[i] = tempResult[i];
				}
			}
			float diffPointVel[3];
			for (i=0;i<3;i++)
8000501a:	30 08       	mov	r8,0
8000501c:	ef 68 ff ed 	st.b	r7[-19],r8
80005020:	c2 78       	rjmp	8000506e <linearProgram4+0x72a>
			{
				diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
80005022:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80005026:	ef 29 ff ee 	ld.sb	r9,r7[-18]
8000502a:	12 98       	mov	r8,r9
8000502c:	a1 78       	lsl	r8,0x1
8000502e:	12 08       	add	r8,r9
80005030:	a3 78       	lsl	r8,0x3
80005032:	ee f9 fe 20 	ld.w	r9,r7[-480]
80005036:	f2 08 00 08 	add	r8,r9,r8
8000503a:	ef 29 ff ed 	ld.sb	r9,r7[-19]
8000503e:	2f d9       	sub	r9,-3
80005040:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80005044:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80005048:	a3 68       	lsl	r8,0x2
8000504a:	ee fb fe 14 	ld.w	r11,r7[-492]
8000504e:	f6 08 00 08 	add	r8,r11,r8
80005052:	70 08       	ld.w	r8,r8[0x0]
80005054:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80005058:	f4 08 15 02 	lsl	r8,r10,0x2
8000505c:	ee 08 00 08 	add	r8,r7,r8
80005060:	f1 49 fe 60 	st.w	r8[-416],r9
				{
					NewVelocity[i] = tempResult[i];
				}
			}
			float diffPointVel[3];
			for (i=0;i<3;i++)
80005064:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80005068:	2f f8       	sub	r8,-1
8000506a:	ef 68 ff ed 	st.b	r7[-19],r8
8000506e:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80005072:	30 28       	mov	r8,2
80005074:	f0 09 18 00 	cp.b	r9,r8
80005078:	fe 9a ff d5 	brle	80005022 <linearProgram4+0x6de>
			{
				diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
			}
			distance = scalar_product(planes[index].normal,diffPointVel);
8000507c:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80005080:	12 98       	mov	r8,r9
80005082:	a1 78       	lsl	r8,0x1
80005084:	12 08       	add	r8,r9
80005086:	a3 78       	lsl	r8,0x3
80005088:	ee f9 fe 20 	ld.w	r9,r7[-480]
8000508c:	f2 08 00 08 	add	r8,r9,r8
80005090:	ee c9 01 a0 	sub	r9,r7,416
80005094:	12 9b       	mov	r11,r9
80005096:	10 9c       	mov	r12,r8
80005098:	fe b0 eb fa 	rcall	8000288c <scalar_product>
8000509c:	18 98       	mov	r8,r12
8000509e:	ef 48 ff f0 	st.w	r7[-16],r8
	
	plane_t projPlanes[MAX_NUM_NEIGHBORS];
	
	float distance = 0.0;
	
	for (index = ind;index<centralData->number_of_neighbors;index++)
800050a2:	ef 38 ff ee 	ld.ub	r8,r7[-18]
800050a6:	2f f8       	sub	r8,-1
800050a8:	ef 68 ff ee 	st.b	r7[-18],r8
800050ac:	ef 29 ff ee 	ld.sb	r9,r7[-18]
800050b0:	ec f8 00 00 	ld.w	r8,r6[0]
800050b4:	70 08       	ld.w	r8,r8[0x0]
800050b6:	f1 38 10 fc 	ld.ub	r8,r8[4348]
800050ba:	10 39       	cp.w	r9,r8
800050bc:	fe 95 fc 5e 	brlt	80004978 <linearProgram4+0x34>
				diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
			}
			distance = scalar_product(planes[index].normal,diffPointVel);
		}
	}
800050c0:	28 5d       	sub	sp,-492
800050c2:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800050c6:	00 00       	add	r0,r0
800050c8:	80 00       	ld.sh	r0,r0[0x0]
800050ca:	47 d6       	lddsp	r6,sp[0x1f4]

800050cc <clip>:
		return b;
	}
}


static float inline clip(float input_value, float clip_value) {
800050cc:	eb cd 40 80 	pushm	r7,lr
800050d0:	1a 97       	mov	r7,sp
800050d2:	20 2d       	sub	sp,8
800050d4:	ef 4c ff fc 	st.w	r7[-4],r12
800050d8:	ef 4b ff f8 	st.w	r7[-8],r11
	
	if (input_value>clip_value)  return clip_value;     
800050dc:	30 18       	mov	r8,1
800050de:	ee fa ff fc 	ld.w	r10,r7[-4]
800050e2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800050e6:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800050ea:	e0 8c 00 04 	brvs	800050f2 <clip+0x26>
800050ee:	e0 89 00 03 	brgt	800050f4 <clip+0x28>
800050f2:	30 08       	mov	r8,0
800050f4:	5c 58       	castu.b	r8
800050f6:	c0 40       	breq	800050fe <clip+0x32>
800050f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800050fc:	c1 98       	rjmp	8000512e <clip+0x62>
	if (input_value<-clip_value) return -clip_value; 
800050fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005102:	10 9a       	mov	r10,r8
80005104:	ee 1a 80 00 	eorh	r10,0x8000
80005108:	30 18       	mov	r8,1
8000510a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000510e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005112:	e0 8c 00 04 	brvs	8000511a <clip+0x4e>
80005116:	e0 89 00 03 	brgt	8000511c <clip+0x50>
8000511a:	30 08       	mov	r8,0
8000511c:	5c 58       	castu.b	r8
8000511e:	c0 60       	breq	8000512a <clip+0x5e>
80005120:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005124:	ee 18 80 00 	eorh	r8,0x8000
80005128:	c0 38       	rjmp	8000512e <clip+0x62>
	return input_value;
8000512a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000512e:	10 9c       	mov	r12,r8
80005130:	2f ed       	sub	sp,-8
80005132:	e3 cd 80 80 	ldm	sp++,r7,pc

80005136 <soft_zone>:


static float inline soft_zone(float x, float soft_zone_width) {
80005136:	eb cd 40 e0 	pushm	r5-r7,lr
8000513a:	1a 97       	mov	r7,sp
8000513c:	20 2d       	sub	sp,8
8000513e:	4a 16       	lddpc	r6,800051c0 <soft_zone+0x8a>
80005140:	1e 26       	rsub	r6,pc
80005142:	ef 4c ff fc 	st.w	r7[-4],r12
80005146:	ef 4b ff f8 	st.w	r7[-8],r11
	if (soft_zone_width<0.0000001) return x; 
8000514a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000514e:	f0 16 00 02 	mcall	r6[8]
80005152:	30 05       	mov	r5,0
80005154:	e0 68 af 48 	mov	r8,44872
80005158:	ea 18 9a bc 	orh	r8,0x9abc
8000515c:	e0 69 d7 f2 	mov	r9,55282
80005160:	ea 19 3e 7a 	orh	r9,0x3e7a
80005164:	f0 16 00 1d 	mcall	r6[116]
80005168:	18 98       	mov	r8,r12
8000516a:	58 08       	cp.w	r8,0
8000516c:	c0 20       	breq	80005170 <soft_zone+0x3a>
8000516e:	30 15       	mov	r5,1
80005170:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80005174:	c0 40       	breq	8000517c <soft_zone+0x46>
80005176:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000517a:	c1 e8       	rjmp	800051b6 <soft_zone+0x80>
	else {
		return (x*x*x/(SQR(soft_zone_width) + SQR(x)));
8000517c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005180:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005184:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005188:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000518c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005190:	ee fa ff f8 	ld.w	r10,r7[-8]
80005194:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005198:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000519c:	ee fb ff fc 	ld.w	r11,r7[-4]
800051a0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800051a4:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800051a8:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800051ac:	12 9b       	mov	r11,r9
800051ae:	10 9c       	mov	r12,r8
800051b0:	f0 16 00 08 	mcall	r6[32]
800051b4:	18 98       	mov	r8,r12
	}
};
800051b6:	10 9c       	mov	r12,r8
800051b8:	2f ed       	sub	sp,-8
800051ba:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800051be:	00 00       	add	r0,r0
800051c0:	80 00       	ld.sh	r0,r0[0x0]
800051c2:	4f c4       	lddpc	r4,800053b0 <initDiff+0x1e>

800051c4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800051c4:	eb cd 40 c0 	pushm	r6-r7,lr
800051c8:	1a 97       	mov	r7,sp
800051ca:	20 6d       	sub	sp,24
800051cc:	49 e6       	lddpc	r6,80005244 <interpolate+0x80>
800051ce:	1e 26       	rsub	r6,pc
800051d0:	ef 4c ff f8 	st.w	r7[-8],r12
800051d4:	ef 4b ff f4 	st.w	r7[-12],r11
800051d8:	ef 4a ff f0 	st.w	r7[-16],r10
800051dc:	ef 49 ff ec 	st.w	r7[-20],r9
800051e0:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
800051e4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800051e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800051ec:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800051f0:	c0 41       	brne	800051f8 <interpolate+0x34>
	{
		return y1;
800051f2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800051f6:	c2 38       	rjmp	8000523c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
800051f8:	ee f9 ff e8 	ld.w	r9,r7[-24]
800051fc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005200:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80005204:	ee fa ff f8 	ld.w	r10,r7[-8]
80005208:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000520c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80005210:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005214:	ee fa ff f0 	ld.w	r10,r7[-16]
80005218:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000521c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80005220:	12 9b       	mov	r11,r9
80005222:	10 9c       	mov	r12,r8
80005224:	f0 16 00 08 	mcall	r6[32]
80005228:	18 98       	mov	r8,r12
8000522a:	10 99       	mov	r9,r8
8000522c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80005230:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005234:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80005238:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000523c:	10 9c       	mov	r12,r8
8000523e:	2f ad       	sub	sp,-24
80005240:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005244:	80 00       	ld.sh	r0,r0[0x0]
80005246:	50 52       	stdsp	sp[0x14],r2

80005248 <passthroughController>:
#include "time_keeper.h"

#include "pid_control.h"
#include "maths.h"

PID_Controller_t passthroughController() {
80005248:	eb cd 40 e0 	pushm	r5-r7,lr
8000524c:	1a 97       	mov	r7,sp
8000524e:	21 1d       	sub	sp,68
80005250:	49 e6       	lddpc	r6,800052c8 <passthroughController+0x80>
80005252:	1e 26       	rsub	r6,pc
80005254:	18 95       	mov	r5,r12
	PID_Controller_t out;
	out.p_gain=1.0;
80005256:	fc 18 3f 80 	movh	r8,0x3f80
8000525a:	ef 48 ff bc 	st.w	r7[-68],r8
	out.last_update=get_time_ticks();	
8000525e:	f0 16 00 4d 	mcall	r6[308]
80005262:	18 98       	mov	r8,r12
80005264:	ef 48 ff f4 	st.w	r7[-12],r8
	out.clip_min=-10000.0;
80005268:	e0 68 40 00 	mov	r8,16384
8000526c:	ea 18 c6 1c 	orh	r8,0xc61c
80005270:	ef 48 ff c0 	st.w	r7[-64],r8
	out.clip_max= 10000.0;
80005274:	e0 68 40 00 	mov	r8,16384
80005278:	ea 18 46 1c 	orh	r8,0x461c
8000527c:	ef 48 ff c4 	st.w	r7[-60],r8
	out.output=0.0;
80005280:	30 08       	mov	r8,0
80005282:	ef 48 ff ec 	st.w	r7[-20],r8
	out.soft_zone_width=0.0;
80005286:	30 08       	mov	r8,0
80005288:	ef 48 ff fc 	st.w	r7[-4],r8
	initDiff(&(out.differentiator), 0.0, 0.0, 0.0);
8000528c:	ee c8 00 44 	sub	r8,r7,68
80005290:	2e 08       	sub	r8,-32
80005292:	30 09       	mov	r9,0
80005294:	30 0a       	mov	r10,0
80005296:	30 0b       	mov	r11,0
80005298:	10 9c       	mov	r12,r8
8000529a:	f0 16 01 47 	mcall	r6[1308]
	initInt(&(out.integrator), 0.0, 0.0, 0.0);
8000529e:	ee c8 00 44 	sub	r8,r7,68
800052a2:	2f 48       	sub	r8,-12
800052a4:	30 09       	mov	r9,0
800052a6:	30 0a       	mov	r10,0
800052a8:	30 0b       	mov	r11,0
800052aa:	10 9c       	mov	r12,r8
800052ac:	f0 16 01 90 	mcall	r6[1600]
	return out;
800052b0:	0a 98       	mov	r8,r5
800052b2:	ee c9 00 44 	sub	r9,r7,68
800052b6:	34 4a       	mov	r10,68
800052b8:	12 9b       	mov	r11,r9
800052ba:	10 9c       	mov	r12,r8
800052bc:	f0 16 00 21 	mcall	r6[132]
}
800052c0:	0a 9c       	mov	r12,r5
800052c2:	2e fd       	sub	sp,-68
800052c4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800052c8:	80 00       	ld.sh	r0,r0[0x0]
800052ca:	50 d6       	stdsp	sp[0x34],r6

800052cc <integrate>:




float integrate(Integrator_t *integrator, float input, float dt) {
800052cc:	eb cd 40 c0 	pushm	r6-r7,lr
800052d0:	1a 97       	mov	r7,sp
800052d2:	20 3d       	sub	sp,12
800052d4:	49 76       	lddpc	r6,80005330 <integrate+0x64>
800052d6:	1e 26       	rsub	r6,pc
800052d8:	ef 4c ff fc 	st.w	r7[-4],r12
800052dc:	ef 4b ff f8 	st.w	r7[-8],r11
800052e0:	ef 4a ff f4 	st.w	r7[-12],r10

	integrator->accumulator=clip(integrator->accumulator+dt* integrator->pregain * input, integrator->clip);
800052e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052e8:	70 39       	ld.w	r9,r8[0xc]
800052ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052ee:	70 2a       	ld.w	r10,r8[0x8]
800052f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052f4:	70 0b       	ld.w	r11,r8[0x0]
800052f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800052fa:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
800052fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005302:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80005306:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
8000530a:	12 9b       	mov	r11,r9
8000530c:	10 9c       	mov	r12,r8
8000530e:	cd fe       	rcall	800050cc <clip>
80005310:	18 99       	mov	r9,r12
80005312:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005316:	91 29       	st.w	r8[0x8],r9
	return integrator->postgain* integrator->accumulator;
80005318:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000531c:	70 19       	ld.w	r9,r8[0x4]
8000531e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005322:	70 28       	ld.w	r8,r8[0x8]
80005324:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44

}
80005328:	10 9c       	mov	r12,r8
8000532a:	2f dd       	sub	sp,-12
8000532c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005330:	80 00       	ld.sh	r0,r0[0x0]
80005332:	51 5a       	stdsp	sp[0x54],r10

80005334 <initInt>:




void initInt(Integrator_t *integrator, float pregain, float postgain, float clip_val) {
80005334:	eb cd 40 80 	pushm	r7,lr
80005338:	1a 97       	mov	r7,sp
8000533a:	20 4d       	sub	sp,16
8000533c:	ef 4c ff fc 	st.w	r7[-4],r12
80005340:	ef 4b ff f8 	st.w	r7[-8],r11
80005344:	ef 4a ff f4 	st.w	r7[-12],r10
80005348:	ef 49 ff f0 	st.w	r7[-16],r9
	integrator->pregain=pregain;
8000534c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005350:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005354:	91 09       	st.w	r8[0x0],r9
	integrator->postgain=postgain;
80005356:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000535a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000535e:	91 19       	st.w	r8[0x4],r9
	integrator->clip=clip_val;
80005360:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005364:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005368:	91 39       	st.w	r8[0xc],r9
	integrator->accumulator=0.0;
8000536a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000536e:	30 09       	mov	r9,0
80005370:	91 29       	st.w	r8[0x8],r9

}
80005372:	2f cd       	sub	sp,-16
80005374:	e3 cd 80 80 	ldm	sp++,r7,pc

80005378 <resetInt>:
void resetInt(Integrator_t *integrator) {
80005378:	eb cd 40 80 	pushm	r7,lr
8000537c:	1a 97       	mov	r7,sp
8000537e:	20 1d       	sub	sp,4
80005380:	ef 4c ff fc 	st.w	r7[-4],r12
	integrator->accumulator=0.0;
80005384:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005388:	30 09       	mov	r9,0
8000538a:	91 29       	st.w	r8[0x8],r9
}
8000538c:	2f fd       	sub	sp,-4
8000538e:	e3 cd 80 80 	ldm	sp++,r7,pc

80005392 <initDiff>:

void initDiff(Differentiator_t *diff, float gain, float LPF, float clip_val) {
80005392:	eb cd 40 80 	pushm	r7,lr
80005396:	1a 97       	mov	r7,sp
80005398:	20 4d       	sub	sp,16
8000539a:	ef 4c ff fc 	st.w	r7[-4],r12
8000539e:	ef 4b ff f8 	st.w	r7[-8],r11
800053a2:	ef 4a ff f4 	st.w	r7[-12],r10
800053a6:	ef 49 ff f0 	st.w	r7[-16],r9
	diff->gain=gain;
800053aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800053ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800053b2:	91 09       	st.w	r8[0x0],r9
	diff->LPF=LPF;
800053b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800053b8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800053bc:	91 29       	st.w	r8[0x8],r9
	diff->clip=clip_val;
800053be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800053c2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800053c6:	91 39       	st.w	r8[0xc],r9
}
800053c8:	2f cd       	sub	sp,-16
800053ca:	e3 cd 80 80 	ldm	sp++,r7,pc

800053ce <differentiate>:

float differentiate(Differentiator_t *diff, float input, float dt) {
800053ce:	eb cd 40 e0 	pushm	r5-r7,lr
800053d2:	1a 97       	mov	r7,sp
800053d4:	20 4d       	sub	sp,16
800053d6:	4a 66       	lddpc	r6,8000546c <differentiate+0x9e>
800053d8:	1e 26       	rsub	r6,pc
800053da:	ef 4c ff f8 	st.w	r7[-8],r12
800053de:	ef 4b ff f4 	st.w	r7[-12],r11
800053e2:	ef 4a ff f0 	st.w	r7[-16],r10
	float output=0.0;
800053e6:	30 08       	mov	r8,0
800053e8:	ef 48 ff fc 	st.w	r7[-4],r8
	if (dt<0.000001) {
800053ec:	ee fc ff f0 	ld.w	r12,r7[-16]
800053f0:	f0 16 00 02 	mcall	r6[8]
800053f4:	30 05       	mov	r5,0
800053f6:	e0 68 ed 8d 	mov	r8,60813
800053fa:	ea 18 a0 b5 	orh	r8,0xa0b5
800053fe:	e0 69 c6 f7 	mov	r9,50935
80005402:	ea 19 3e b0 	orh	r9,0x3eb0
80005406:	f0 16 00 1d 	mcall	r6[116]
8000540a:	18 98       	mov	r8,r12
8000540c:	58 08       	cp.w	r8,0
8000540e:	c0 20       	breq	80005412 <differentiate+0x44>
80005410:	30 15       	mov	r5,1
80005412:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80005416:	c0 50       	breq	80005420 <differentiate+0x52>
		output=0.0; 
80005418:	30 08       	mov	r8,0
8000541a:	ef 48 ff fc 	st.w	r7[-4],r8
8000541e:	c1 c8       	rjmp	80005456 <differentiate+0x88>
	} else {
		output=clip(diff->gain*(input - diff->previous)/dt, diff->clip);
80005420:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005424:	70 35       	ld.w	r5,r8[0xc]
80005426:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000542a:	70 09       	ld.w	r9,r8[0x0]
8000542c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005430:	70 18       	ld.w	r8,r8[0x4]
80005432:	ee fa ff f4 	ld.w	r10,r7[-12]
80005436:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000543a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000543e:	ee fb ff f0 	ld.w	r11,r7[-16]
80005442:	10 9c       	mov	r12,r8
80005444:	f0 16 00 08 	mcall	r6[32]
80005448:	18 98       	mov	r8,r12
8000544a:	0a 9b       	mov	r11,r5
8000544c:	10 9c       	mov	r12,r8
8000544e:	c3 fe       	rcall	800050cc <clip>
80005450:	18 98       	mov	r8,r12
80005452:	ef 48 ff fc 	st.w	r7[-4],r8
	}	
	//diff->previous=(1.0-(diff->LPF))*input + (diff->LPF) * (diff->previous);
	diff->previous=input;
80005456:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000545a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000545e:	91 19       	st.w	r8[0x4],r9
	return output;
80005460:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005464:	10 9c       	mov	r12,r8
80005466:	2f cd       	sub	sp,-16
80005468:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000546c:	80 00       	ld.sh	r0,r0[0x0]
8000546e:	52 5c       	stdsp	sp[0x94],r12

80005470 <pid_update>:

float pid_update(PID_Controller_t* controller, float error) {
80005470:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80005474:	1a 97       	mov	r7,sp
80005476:	20 3d       	sub	sp,12
80005478:	4c 36       	lddpc	r6,80005584 <pid_update+0x114>
8000547a:	1e 26       	rsub	r6,pc
8000547c:	ef 4c ff f8 	st.w	r7[-8],r12
80005480:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t t= get_time_ticks();
80005484:	f0 16 00 4d 	mcall	r6[308]
80005488:	18 98       	mov	r8,r12
8000548a:	ef 48 ff fc 	st.w	r7[-4],r8
	controller->error=soft_zone(error, controller->soft_zone_width);
8000548e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005492:	71 08       	ld.w	r8,r8[0x40]
80005494:	10 9b       	mov	r11,r8
80005496:	ee fc ff f4 	ld.w	r12,r7[-12]
8000549a:	c4 ee       	rcall	80005136 <soft_zone>
8000549c:	18 99       	mov	r9,r12
8000549e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054a2:	91 d9       	st.w	r8[0x34],r9
	controller->dt=ticks_to_seconds(t - controller->last_update);
800054a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054a8:	70 e8       	ld.w	r8,r8[0x38]
800054aa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800054ae:	f2 08 01 08 	sub	r8,r9,r8
800054b2:	10 9c       	mov	r12,r8
800054b4:	f0 16 00 b9 	mcall	r6[740]
800054b8:	18 99       	mov	r9,r12
800054ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054be:	91 f9       	st.w	r8[0x3c],r9
	controller->last_update=t;
800054c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800054c8:	91 e9       	st.w	r8[0x38],r9
	
	controller->output = controller->p_gain* (controller->error +integrate(&controller->integrator, controller->error, controller->dt) + differentiate(&controller->differentiator, controller->error, controller->dt));
800054ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054ce:	70 05       	ld.w	r5,r8[0x0]
800054d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054d4:	70 d3       	ld.w	r3,r8[0x34]
800054d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054da:	70 fa       	ld.w	r10,r8[0x3c]
800054dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054e0:	70 d9       	ld.w	r9,r8[0x34]
800054e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054e6:	2f 48       	sub	r8,-12
800054e8:	12 9b       	mov	r11,r9
800054ea:	10 9c       	mov	r12,r8
800054ec:	f0 16 00 dc 	mcall	r6[880]
800054f0:	18 98       	mov	r8,r12
800054f2:	e5 a0 03 38 	cop	cp0,cr3,cr3,cr8,0x40
800054f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054fa:	70 fa       	ld.w	r10,r8[0x3c]
800054fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005500:	70 d9       	ld.w	r9,r8[0x34]
80005502:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005506:	2e 08       	sub	r8,-32
80005508:	12 9b       	mov	r11,r9
8000550a:	10 9c       	mov	r12,r8
8000550c:	f0 16 01 0a 	mcall	r6[1064]
80005510:	18 98       	mov	r8,r12
80005512:	e5 a0 08 38 	cop	cp0,cr8,cr3,cr8,0x40
80005516:	e5 a2 09 58 	cop	cp0,cr9,cr5,cr8,0x44
8000551a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000551e:	91 c9       	st.w	r8[0x30],r9
	if (controller->output < controller->clip_min) controller->output=controller->clip_min;
80005520:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005524:	70 ca       	ld.w	r10,r8[0x30]
80005526:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000552a:	70 19       	ld.w	r9,r8[0x4]
8000552c:	30 18       	mov	r8,1
8000552e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005532:	e0 8c 00 03 	brvs	80005538 <pid_update+0xc8>
80005536:	c0 25       	brlt	8000553a <pid_update+0xca>
80005538:	30 08       	mov	r8,0
8000553a:	5c 58       	castu.b	r8
8000553c:	c0 70       	breq	8000554a <pid_update+0xda>
8000553e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005542:	70 19       	ld.w	r9,r8[0x4]
80005544:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005548:	91 c9       	st.w	r8[0x30],r9
	if (controller->output > controller->clip_max) controller->output=controller->clip_max;
8000554a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000554e:	70 ca       	ld.w	r10,r8[0x30]
80005550:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005554:	70 29       	ld.w	r9,r8[0x8]
80005556:	30 18       	mov	r8,1
80005558:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000555c:	e0 8c 00 04 	brvs	80005564 <pid_update+0xf4>
80005560:	e0 89 00 03 	brgt	80005566 <pid_update+0xf6>
80005564:	30 08       	mov	r8,0
80005566:	5c 58       	castu.b	r8
80005568:	c0 70       	breq	80005576 <pid_update+0x106>
8000556a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000556e:	70 29       	ld.w	r9,r8[0x8]
80005570:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005574:	91 c9       	st.w	r8[0x30],r9
	return controller->output;	
80005576:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000557a:	70 c8       	ld.w	r8,r8[0x30]
}
8000557c:	10 9c       	mov	r12,r8
8000557e:	2f dd       	sub	sp,-12
80005580:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80005584:	80 00       	ld.sh	r0,r0[0x0]
80005586:	52 fe       	stdsp	sp[0xbc],lr

80005588 <pid_update_dt>:

float pid_update_dt(PID_Controller_t* controller, float error, float dt) {
80005588:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000558c:	1a 97       	mov	r7,sp
8000558e:	20 3d       	sub	sp,12
80005590:	4b b6       	lddpc	r6,8000567c <pid_update_dt+0xf4>
80005592:	1e 26       	rsub	r6,pc
80005594:	ef 4c ff fc 	st.w	r7[-4],r12
80005598:	ef 4b ff f8 	st.w	r7[-8],r11
8000559c:	ef 4a ff f4 	st.w	r7[-12],r10
	controller->error=error;
800055a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800055a8:	91 d9       	st.w	r8[0x34],r9
	controller->dt=dt;
800055aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055ae:	ee f9 ff f4 	ld.w	r9,r7[-12]
800055b2:	91 f9       	st.w	r8[0x3c],r9
	controller->last_update=get_time_ticks();
800055b4:	f0 16 00 4d 	mcall	r6[308]
800055b8:	18 99       	mov	r9,r12
800055ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055be:	91 e9       	st.w	r8[0x38],r9
	
	controller->output = controller->p_gain* (controller->error +integrate(&controller->integrator, controller->error, controller->dt) + differentiate(&controller->differentiator, controller->error, controller->dt));
800055c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055c4:	70 05       	ld.w	r5,r8[0x0]
800055c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055ca:	70 d3       	ld.w	r3,r8[0x34]
800055cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055d0:	70 fa       	ld.w	r10,r8[0x3c]
800055d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055d6:	70 d9       	ld.w	r9,r8[0x34]
800055d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055dc:	2f 48       	sub	r8,-12
800055de:	12 9b       	mov	r11,r9
800055e0:	10 9c       	mov	r12,r8
800055e2:	f0 16 00 dc 	mcall	r6[880]
800055e6:	18 98       	mov	r8,r12
800055e8:	e5 a0 03 38 	cop	cp0,cr3,cr3,cr8,0x40
800055ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055f0:	70 fa       	ld.w	r10,r8[0x3c]
800055f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055f6:	70 d9       	ld.w	r9,r8[0x34]
800055f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800055fc:	2e 08       	sub	r8,-32
800055fe:	12 9b       	mov	r11,r9
80005600:	10 9c       	mov	r12,r8
80005602:	f0 16 01 0a 	mcall	r6[1064]
80005606:	18 98       	mov	r8,r12
80005608:	e5 a0 08 38 	cop	cp0,cr8,cr3,cr8,0x40
8000560c:	e5 a2 09 58 	cop	cp0,cr9,cr5,cr8,0x44
80005610:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005614:	91 c9       	st.w	r8[0x30],r9
	if (controller->output < controller->clip_min) controller->output=controller->clip_min;
80005616:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000561a:	70 ca       	ld.w	r10,r8[0x30]
8000561c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005620:	70 19       	ld.w	r9,r8[0x4]
80005622:	30 18       	mov	r8,1
80005624:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005628:	e0 8c 00 03 	brvs	8000562e <pid_update_dt+0xa6>
8000562c:	c0 25       	brlt	80005630 <pid_update_dt+0xa8>
8000562e:	30 08       	mov	r8,0
80005630:	5c 58       	castu.b	r8
80005632:	c0 70       	breq	80005640 <pid_update_dt+0xb8>
80005634:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005638:	70 19       	ld.w	r9,r8[0x4]
8000563a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000563e:	91 c9       	st.w	r8[0x30],r9
	if (controller->output > controller->clip_max) controller->output=controller->clip_max;
80005640:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005644:	70 ca       	ld.w	r10,r8[0x30]
80005646:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000564a:	70 29       	ld.w	r9,r8[0x8]
8000564c:	30 18       	mov	r8,1
8000564e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005652:	e0 8c 00 04 	brvs	8000565a <pid_update_dt+0xd2>
80005656:	e0 89 00 03 	brgt	8000565c <pid_update_dt+0xd4>
8000565a:	30 08       	mov	r8,0
8000565c:	5c 58       	castu.b	r8
8000565e:	c0 70       	breq	8000566c <pid_update_dt+0xe4>
80005660:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005664:	70 29       	ld.w	r9,r8[0x8]
80005666:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000566a:	91 c9       	st.w	r8[0x30],r9
	return controller->output;	
8000566c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005670:	70 c8       	ld.w	r8,r8[0x30]
}
80005672:	10 9c       	mov	r12,r8
80005674:	2f dd       	sub	sp,-12
80005676:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000567a:	00 00       	add	r0,r0
8000567c:	80 00       	ld.sh	r0,r0[0x0]
8000567e:	54 16       	stdsp	sp[0x104],r6

80005680 <calc_smaller_angle>:
#define SQR(in) \
		((in)*(in))



float static inline calc_smaller_angle(float angle) {
80005680:	eb cd 40 e0 	pushm	r5-r7,lr
80005684:	1a 97       	mov	r7,sp
80005686:	20 2d       	sub	sp,8
80005688:	4b 56       	lddpc	r6,8000575c <calc_smaller_angle+0xdc>
8000568a:	1e 26       	rsub	r6,pc
8000568c:	ef 4c ff f8 	st.w	r7[-8],r12
	float out=angle;
80005690:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005694:	ef 48 ff fc 	st.w	r7[-4],r8
	while (out<-PI) out+=2.0*PI;
80005698:	c1 88       	rjmp	800056c8 <calc_smaller_angle+0x48>
8000569a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000569e:	f0 16 00 02 	mcall	r6[8]
800056a2:	e0 68 2d 18 	mov	r8,11544
800056a6:	ea 18 54 44 	orh	r8,0x5444
800056aa:	e0 69 21 fb 	mov	r9,8699
800056ae:	ea 19 40 19 	orh	r9,0x4019
800056b2:	f0 16 00 05 	mcall	r6[20]
800056b6:	14 98       	mov	r8,r10
800056b8:	16 99       	mov	r9,r11
800056ba:	10 9a       	mov	r10,r8
800056bc:	12 9b       	mov	r11,r9
800056be:	f0 16 00 09 	mcall	r6[36]
800056c2:	18 98       	mov	r8,r12
800056c4:	ef 48 ff fc 	st.w	r7[-4],r8
800056c8:	ee fc ff fc 	ld.w	r12,r7[-4]
800056cc:	f0 16 00 02 	mcall	r6[8]
800056d0:	30 05       	mov	r5,0
800056d2:	e0 68 2d 18 	mov	r8,11544
800056d6:	ea 18 54 44 	orh	r8,0x5444
800056da:	e0 69 21 fb 	mov	r9,8699
800056de:	ea 19 c0 09 	orh	r9,0xc009
800056e2:	f0 16 00 1d 	mcall	r6[116]
800056e6:	18 98       	mov	r8,r12
800056e8:	58 08       	cp.w	r8,0
800056ea:	c0 20       	breq	800056ee <calc_smaller_angle+0x6e>
800056ec:	30 15       	mov	r5,1
800056ee:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
800056f2:	cd 41       	brne	8000569a <calc_smaller_angle+0x1a>
	while (out>=PI) out-=2.0*PI;
800056f4:	c1 88       	rjmp	80005724 <calc_smaller_angle+0xa4>
800056f6:	ee fc ff fc 	ld.w	r12,r7[-4]
800056fa:	f0 16 00 02 	mcall	r6[8]
800056fe:	e0 68 2d 18 	mov	r8,11544
80005702:	ea 18 54 44 	orh	r8,0x5444
80005706:	e0 69 21 fb 	mov	r9,8699
8000570a:	ea 19 40 19 	orh	r9,0x4019
8000570e:	f0 16 00 11 	mcall	r6[68]
80005712:	14 98       	mov	r8,r10
80005714:	16 99       	mov	r9,r11
80005716:	10 9a       	mov	r10,r8
80005718:	12 9b       	mov	r11,r9
8000571a:	f0 16 00 09 	mcall	r6[36]
8000571e:	18 98       	mov	r8,r12
80005720:	ef 48 ff fc 	st.w	r7[-4],r8
80005724:	ee fc ff fc 	ld.w	r12,r7[-4]
80005728:	f0 16 00 02 	mcall	r6[8]
8000572c:	30 05       	mov	r5,0
8000572e:	e0 68 2d 18 	mov	r8,11544
80005732:	ea 18 54 44 	orh	r8,0x5444
80005736:	e0 69 21 fb 	mov	r9,8699
8000573a:	ea 19 40 09 	orh	r9,0x4009
8000573e:	f0 16 00 7d 	mcall	r6[500]
80005742:	18 98       	mov	r8,r12
80005744:	58 08       	cp.w	r8,0
80005746:	c0 20       	breq	8000574a <calc_smaller_angle+0xca>
80005748:	30 15       	mov	r5,1
8000574a:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000574e:	cd 41       	brne	800056f6 <calc_smaller_angle+0x76>
	return out;
80005750:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005754:	10 9c       	mov	r12,r8
80005756:	2f ed       	sub	sp,-8
80005758:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000575c:	80 00       	ld.sh	r0,r0[0x0]
8000575e:	55 0e       	stdsp	sp[0x140],lr

80005760 <fast_sqrt>:
	
	return qtmp;
}

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
80005760:	eb cd 40 c0 	pushm	r6-r7,lr
80005764:	1a 97       	mov	r7,sp
80005766:	20 2d       	sub	sp,8
80005768:	4b 26       	lddpc	r6,80005830 <fast_sqrt+0xd0>
8000576a:	1e 26       	rsub	r6,pc
8000576c:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
80005770:	30 18       	mov	r8,1
80005772:	ee fa ff f8 	ld.w	r10,r7[-8]
80005776:	30 09       	mov	r9,0
80005778:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000577c:	e0 8c 00 03 	brvs	80005782 <fast_sqrt+0x22>
80005780:	c0 25       	brlt	80005784 <fast_sqrt+0x24>
80005782:	30 08       	mov	r8,0
80005784:	5c 58       	castu.b	r8
80005786:	c0 30       	breq	8000578c <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
80005788:	30 08       	mov	r8,0
8000578a:	c4 f8       	rjmp	80005828 <fast_sqrt+0xc8>
	}
	float result=1.0;
8000578c:	fc 18 3f 80 	movh	r8,0x3f80
80005790:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80005794:	ee fb ff fc 	ld.w	r11,r7[-4]
80005798:	ee fc ff f8 	ld.w	r12,r7[-8]
8000579c:	f0 16 00 08 	mcall	r6[32]
800057a0:	18 98       	mov	r8,r12
800057a2:	10 99       	mov	r9,r8
800057a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057a8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800057ac:	fc 18 3f 00 	movh	r8,0x3f00
800057b0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800057b4:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
800057b8:	ee fb ff fc 	ld.w	r11,r7[-4]
800057bc:	ee fc ff f8 	ld.w	r12,r7[-8]
800057c0:	f0 16 00 08 	mcall	r6[32]
800057c4:	18 98       	mov	r8,r12
800057c6:	10 99       	mov	r9,r8
800057c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057cc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800057d0:	fc 18 3f 00 	movh	r8,0x3f00
800057d4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800057d8:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
800057dc:	ee fb ff fc 	ld.w	r11,r7[-4]
800057e0:	ee fc ff f8 	ld.w	r12,r7[-8]
800057e4:	f0 16 00 08 	mcall	r6[32]
800057e8:	18 98       	mov	r8,r12
800057ea:	10 99       	mov	r9,r8
800057ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800057f0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800057f4:	fc 18 3f 00 	movh	r8,0x3f00
800057f8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800057fc:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80005800:	ee fb ff fc 	ld.w	r11,r7[-4]
80005804:	ee fc ff f8 	ld.w	r12,r7[-8]
80005808:	f0 16 00 08 	mcall	r6[32]
8000580c:	18 98       	mov	r8,r12
8000580e:	10 99       	mov	r9,r8
80005810:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005814:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005818:	fc 18 3f 00 	movh	r8,0x3f00
8000581c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005820:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
80005824:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005828:	10 9c       	mov	r12,r8
8000582a:	2f ed       	sub	sp,-8
8000582c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005830:	80 00       	ld.sh	r0,r0[0x0]
80005832:	55 ee       	stdsp	sp[0x178],lr

80005834 <sigmoid>:
	else {
		return (x*x*x/(SQR(soft_zone_width) + SQR(x)));
	}
};

static float inline sigmoid(float x) {
80005834:	eb cd 40 c0 	pushm	r6-r7,lr
80005838:	1a 97       	mov	r7,sp
8000583a:	20 1d       	sub	sp,4
8000583c:	48 e6       	lddpc	r6,80005874 <sigmoid+0x40>
8000583e:	1e 26       	rsub	r6,pc
80005840:	ef 4c ff fc 	st.w	r7[-4],r12
	return (x/fast_sqrt(1+SQR(x)));
80005844:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005848:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000584c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005850:	fc 18 3f 80 	movh	r8,0x3f80
80005854:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005858:	10 9c       	mov	r12,r8
8000585a:	c8 3f       	rcall	80005760 <fast_sqrt>
8000585c:	18 98       	mov	r8,r12
8000585e:	10 9b       	mov	r11,r8
80005860:	ee fc ff fc 	ld.w	r12,r7[-4]
80005864:	f0 16 00 08 	mcall	r6[32]
80005868:	18 98       	mov	r8,r12
};
8000586a:	10 9c       	mov	r12,r8
8000586c:	2f fd       	sub	sp,-4
8000586e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005872:	00 00       	add	r0,r0
80005874:	80 00       	ld.sh	r0,r0[0x0]
80005876:	56 c2       	stdsp	sp[0x1b0],r2

80005878 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80005878:	eb cd 40 c0 	pushm	r6-r7,lr
8000587c:	1a 97       	mov	r7,sp
8000587e:	20 6d       	sub	sp,24
80005880:	49 e6       	lddpc	r6,800058f8 <interpolate+0x80>
80005882:	1e 26       	rsub	r6,pc
80005884:	ef 4c ff f8 	st.w	r7[-8],r12
80005888:	ef 4b ff f4 	st.w	r7[-12],r11
8000588c:	ef 4a ff f0 	st.w	r7[-16],r10
80005890:	ef 49 ff ec 	st.w	r7[-20],r9
80005894:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80005898:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000589c:	ee f8 ff f0 	ld.w	r8,r7[-16]
800058a0:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800058a4:	c0 41       	brne	800058ac <interpolate+0x34>
	{
		return y1;
800058a6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800058aa:	c2 38       	rjmp	800058f0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
800058ac:	ee f9 ff e8 	ld.w	r9,r7[-24]
800058b0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800058b4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800058b8:	ee fa ff f8 	ld.w	r10,r7[-8]
800058bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800058c0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800058c4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800058c8:	ee fa ff f0 	ld.w	r10,r7[-16]
800058cc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800058d0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800058d4:	12 9b       	mov	r11,r9
800058d6:	10 9c       	mov	r12,r8
800058d8:	f0 16 00 08 	mcall	r6[32]
800058dc:	18 98       	mov	r8,r12
800058de:	10 99       	mov	r9,r8
800058e0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800058e4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800058e8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
800058ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
800058f0:	10 9c       	mov	r12,r8
800058f2:	2f ad       	sub	sp,-24
800058f4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800058f8:	80 00       	ld.sh	r0,r0[0x0]
800058fa:	57 06       	stdsp	sp[0x1c0],r6

800058fc <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
800058fc:	eb cd 40 c0 	pushm	r6-r7,lr
80005900:	1a 97       	mov	r7,sp
80005902:	20 3d       	sub	sp,12
80005904:	49 06       	lddpc	r6,80005944 <mav_array_memcpy+0x48>
80005906:	1e 26       	rsub	r6,pc
80005908:	ef 4c ff fc 	st.w	r7[-4],r12
8000590c:	ef 4b ff f8 	st.w	r7[-8],r11
80005910:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80005914:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005918:	58 08       	cp.w	r8,0
8000591a:	c0 91       	brne	8000592c <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000591c:	ee fa ff f4 	ld.w	r10,r7[-12]
80005920:	30 0b       	mov	r11,0
80005922:	ee fc ff fc 	ld.w	r12,r7[-4]
80005926:	f0 16 00 31 	mcall	r6[196]
8000592a:	c0 98       	rjmp	8000593c <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000592c:	ee fa ff f4 	ld.w	r10,r7[-12]
80005930:	ee fb ff f8 	ld.w	r11,r7[-8]
80005934:	ee fc ff fc 	ld.w	r12,r7[-4]
80005938:	f0 16 00 21 	mcall	r6[132]
	}
}
8000593c:	2f dd       	sub	sp,-12
8000593e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005942:	00 00       	add	r0,r0
80005944:	80 00       	ld.sh	r0,r0[0x0]
80005946:	57 8a       	stdsp	sp[0x1e0],r10

80005948 <init_stabilisation_copter>:
// 	initInt(&((stabiliser->thrust_controller).integrator), 1.5, 1.0, 1.0); // 1.0 1.0 0.5
		
// }

void init_stabilisation_copter(Stabiliser_Stack_copter_t* stabiliser_stack)
{
80005948:	eb cd 40 c0 	pushm	r6-r7,lr
8000594c:	1a 97       	mov	r7,sp
8000594e:	20 1d       	sub	sp,4
80005950:	49 56       	lddpc	r6,800059a4 <init_stabilisation_copter+0x5c>
80005952:	1e 26       	rsub	r6,pc
80005954:	ef 4c ff fc 	st.w	r7[-4],r12
	centralData = get_central_data();
80005958:	f0 16 00 33 	mcall	r6[204]
8000595c:	18 99       	mov	r9,r12
8000595e:	ec f8 00 00 	ld.w	r8,r6[0]
80005962:	91 09       	st.w	r8[0x0],r9
	centralData->controls.run_mode = MOTORS_OFF;
80005964:	ec f8 00 00 	ld.w	r8,r6[0]
80005968:	70 08       	ld.w	r8,r8[0x0]
8000596a:	30 09       	mov	r9,0
8000596c:	f1 49 01 70 	st.w	r8[368],r9
	centralData->controls.control_mode = ATTITUDE_COMMAND_MODE;
80005970:	ec f8 00 00 	ld.w	r8,r6[0]
80005974:	70 08       	ld.w	r8,r8[0x0]
80005976:	30 19       	mov	r9,1
80005978:	f1 49 01 68 	st.w	r8[360],r9
	centralData->controls.yaw_mode = YAW_RELATIVE;
8000597c:	ec f8 00 00 	ld.w	r8,r6[0]
80005980:	70 08       	ld.w	r8,r8[0x0]
80005982:	30 09       	mov	r9,0
80005984:	f1 49 01 6c 	st.w	r8[364],r9

	*stabiliser_stack = stabiliser_defaults_copter;
80005988:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000598c:	ec f9 09 04 	ld.w	r9,r6[2308]
80005990:	e0 6a 03 b8 	mov	r10,952
80005994:	12 9b       	mov	r11,r9
80005996:	10 9c       	mov	r12,r8
80005998:	f0 16 00 21 	mcall	r6[132]
}
8000599c:	2f fd       	sub	sp,-4
8000599e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800059a2:	00 00       	add	r0,r0
800059a4:	80 00       	ld.sh	r0,r0[0x0]
800059a6:	57 d6       	stdsp	sp[0x1f4],r6

800059a8 <cascade_stabilise_copter>:


void cascade_stabilise_copter(Imu_Data_t *imu, position_estimator_t *pos_est, Control_Command_t *control_input) {
800059a8:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
800059ac:	1a 97       	mov	r7,sp
800059ae:	21 5d       	sub	sp,84
800059b0:	fe f6 03 70 	ld.w	r6,pc[880]
800059b4:	1e 26       	rsub	r6,pc
800059b6:	ef 4c ff b4 	st.w	r7[-76],r12
800059ba:	ef 4b ff b0 	st.w	r7[-80],r11
800059be:	ef 4a ff ac 	st.w	r7[-84],r10
	float rpyt_errors[4];
	Control_Command_t input;
	int i;
	
	// set the controller input
	input=*control_input;
800059c2:	ee f9 ff ac 	ld.w	r9,r7[-84]
800059c6:	ee c8 00 48 	sub	r8,r7,72
800059ca:	f0 ca 00 00 	sub	r10,r8,0
800059ce:	f2 cb 00 00 	sub	r11,r9,0
800059d2:	76 0c       	ld.w	r12,r11[0x0]
800059d4:	95 0c       	st.w	r10[0x0],r12
800059d6:	76 1c       	ld.w	r12,r11[0x4]
800059d8:	95 1c       	st.w	r10[0x4],r12
800059da:	76 2c       	ld.w	r12,r11[0x8]
800059dc:	95 2c       	st.w	r10[0x8],r12
800059de:	76 3b       	ld.w	r11,r11[0xc]
800059e0:	95 3b       	st.w	r10[0xc],r11
800059e2:	f0 ca ff f0 	sub	r10,r8,-16
800059e6:	f2 cb ff f0 	sub	r11,r9,-16
800059ea:	76 0c       	ld.w	r12,r11[0x0]
800059ec:	95 0c       	st.w	r10[0x0],r12
800059ee:	76 1c       	ld.w	r12,r11[0x4]
800059f0:	95 1c       	st.w	r10[0x4],r12
800059f2:	76 2c       	ld.w	r12,r11[0x8]
800059f4:	95 2c       	st.w	r10[0x8],r12
800059f6:	76 3b       	ld.w	r11,r11[0xc]
800059f8:	95 3b       	st.w	r10[0xc],r11
800059fa:	f2 ea 00 20 	ld.d	r10,r9[32]
800059fe:	f0 eb 00 20 	st.d	r8[32],r10
80005a02:	72 a9       	ld.w	r9,r9[0x28]
80005a04:	91 a9       	st.w	r8[0x28],r9

	switch (control_input->control_mode) {
80005a06:	ee f8 ff ac 	ld.w	r8,r7[-84]
80005a0a:	70 88       	ld.w	r8,r8[0x20]
80005a0c:	58 18       	cp.w	r8,1
80005a0e:	e0 80 00 df 	breq	80005bcc <cascade_stabilise_copter+0x224>
80005a12:	c0 63       	brcs	80005a1e <cascade_stabilise_copter+0x76>
80005a14:	58 28       	cp.w	r8,2
80005a16:	e0 80 01 40 	breq	80005c96 <cascade_stabilise_copter+0x2ee>
80005a1a:	e0 8f 01 78 	bral	80005d0a <cascade_stabilise_copter+0x362>
	case VELOCITY_COMMAND_MODE:
		rpyt_errors[ROLL]  =   input.tvel[Y] - pos_est->vel_bf[Y];     // map y-axis error to roll axis
80005a1e:	ee f9 ff cc 	ld.w	r9,r7[-52]
80005a22:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005a26:	70 c8       	ld.w	r8,r8[0x30]
80005a28:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005a2c:	ef 48 ff e4 	st.w	r7[-28],r8
		rpyt_errors[PITCH] = -(input.tvel[X] - pos_est->vel_bf[X]);   // map x axis error to pitch axis
80005a30:	ee f9 ff c8 	ld.w	r9,r7[-56]
80005a34:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005a38:	70 b8       	ld.w	r8,r8[0x2c]
80005a3a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005a3e:	ee 18 80 00 	eorh	r8,0x8000
80005a42:	ef 48 ff e8 	st.w	r7[-24],r8
		rpyt_errors[3]     = -(input.tvel[Z] - pos_est->vel[Z]);      // attention - input z-axis maps to thrust input!
80005a46:	ee f9 ff d0 	ld.w	r9,r7[-48]
80005a4a:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005a4e:	71 08       	ld.w	r8,r8[0x40]
80005a50:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005a54:	ee 18 80 00 	eorh	r8,0x8000
80005a58:	ef 48 ff f0 	st.w	r7[-16],r8
		

		if (control_input->yaw_mode == YAW_COORDINATED)  {
80005a5c:	ee f8 ff ac 	ld.w	r8,r7[-84]
80005a60:	70 98       	ld.w	r8,r8[0x24]
80005a62:	58 28       	cp.w	r8,2
80005a64:	c5 61       	brne	80005b10 <cascade_stabilise_copter+0x168>
			float rel_heading = atan2(pos_est->vel_bf[Y], pos_est->vel_bf[X]);
80005a66:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005a6a:	70 b8       	ld.w	r8,r8[0x2c]
80005a6c:	10 9c       	mov	r12,r8
80005a6e:	f0 16 00 02 	mcall	r6[8]
80005a72:	14 92       	mov	r2,r10
80005a74:	16 93       	mov	r3,r11
80005a76:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005a7a:	70 c8       	ld.w	r8,r8[0x30]
80005a7c:	10 9c       	mov	r12,r8
80005a7e:	f0 16 00 02 	mcall	r6[8]
80005a82:	04 98       	mov	r8,r2
80005a84:	06 99       	mov	r9,r3
80005a86:	f0 16 00 52 	mcall	r6[328]
80005a8a:	14 98       	mov	r8,r10
80005a8c:	16 99       	mov	r9,r11
80005a8e:	10 9a       	mov	r10,r8
80005a90:	12 9b       	mov	r11,r9
80005a92:	f0 16 00 09 	mcall	r6[36]
80005a96:	18 98       	mov	r8,r12
80005a98:	ef 48 ff f8 	st.w	r7[-8],r8
			float current_velocity_sqr=SQR(pos_est->vel_bf[X])+SQR(pos_est->vel_bf[Y]);
80005a9c:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005aa0:	70 b9       	ld.w	r9,r8[0x2c]
80005aa2:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005aa6:	70 b8       	ld.w	r8,r8[0x2c]
80005aa8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005aac:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005ab0:	70 ca       	ld.w	r10,r8[0x30]
80005ab2:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005ab6:	70 c8       	ld.w	r8,r8[0x30]
80005ab8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005abc:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005ac0:	ef 48 ff fc 	st.w	r7[-4],r8
			//float blend_func=0.5*(sigmoid(4.0*(current_velocity_sqr - yaw_coordination_velocity))+1.0);
			//blend_func=1.0;
			if (current_velocity_sqr > SQR(centralData->stabiliser_stack.yaw_coordination_velocity)) {
80005ac4:	ec f8 00 00 	ld.w	r8,r6[0]
80005ac8:	70 08       	ld.w	r8,r8[0x0]
80005aca:	f0 f9 05 54 	ld.w	r9,r8[1364]
80005ace:	ec f8 00 00 	ld.w	r8,r6[0]
80005ad2:	70 08       	ld.w	r8,r8[0x0]
80005ad4:	f0 f8 05 54 	ld.w	r8,r8[1364]
80005ad8:	e5 a2 0a 98 	cop	cp0,cr10,cr9,cr8,0x44
80005adc:	30 18       	mov	r8,1
80005ade:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005ae2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005ae6:	e0 8c 00 03 	brvs	80005aec <cascade_stabilise_copter+0x144>
80005aea:	c0 25       	brlt	80005aee <cascade_stabilise_copter+0x146>
80005aec:	30 08       	mov	r8,0
80005aee:	5c 58       	castu.b	r8
80005af0:	c1 00       	breq	80005b10 <cascade_stabilise_copter+0x168>
				input.rpy[YAW]+=sigmoid(3.0*rel_heading);
80005af2:	ee f5 ff c0 	ld.w	r5,r7[-64]
80005af6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005afa:	fc 18 40 40 	movh	r8,0x4040
80005afe:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005b02:	10 9c       	mov	r12,r8
80005b04:	c9 8e       	rcall	80005834 <sigmoid>
80005b06:	18 98       	mov	r8,r12
80005b08:	e5 a0 08 58 	cop	cp0,cr8,cr5,cr8,0x40
80005b0c:	ef 48 ff c0 	st.w	r7[-64],r8
			} else {
				//input.rpy[YAW]=input.theading;
			}
		}

		rpyt_errors[YAW]= input.rpy[YAW];
80005b10:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005b14:	ef 48 ff ec 	st.w	r7[-20],r8
		
		// run PID update on all velocity controllers
		stabilise(&centralData->stabiliser_stack.velocity_stabiliser, centralData->imu1.dt, rpyt_errors);
80005b18:	ec f8 00 00 	ld.w	r8,r6[0]
80005b1c:	70 08       	ld.w	r8,r8[0x0]
80005b1e:	f0 f9 01 40 	ld.w	r9,r8[320]
80005b22:	ec f8 00 00 	ld.w	r8,r6[0]
80005b26:	70 08       	ld.w	r8,r8[0x0]
80005b28:	f0 c8 fb e8 	sub	r8,r8,-1048
80005b2c:	ee ca 00 1c 	sub	r10,r7,28
80005b30:	12 9b       	mov	r11,r9
80005b32:	10 9c       	mov	r12,r8
80005b34:	f0 16 00 ca 	mcall	r6[808]
		
		//velocity_stabiliser.output.thrust = f_min(velocity_stabiliser.output.thrust,control_input->thrust);
		
		centralData->stabiliser_stack.velocity_stabiliser.output.thrust += THRUST_HOVER_POINT;
80005b38:	ec f8 00 00 	ld.w	r8,r6[0]
80005b3c:	70 05       	ld.w	r5,r8[0x0]
80005b3e:	ec f8 00 00 	ld.w	r8,r6[0]
80005b42:	70 08       	ld.w	r8,r8[0x0]
80005b44:	f0 f8 05 34 	ld.w	r8,r8[1332]
80005b48:	10 9c       	mov	r12,r8
80005b4a:	f0 16 00 02 	mcall	r6[8]
80005b4e:	e0 68 33 33 	mov	r8,13107
80005b52:	ea 18 33 33 	orh	r8,0x3333
80005b56:	e0 69 33 33 	mov	r9,13107
80005b5a:	ea 19 3f d3 	orh	r9,0x3fd3
80005b5e:	f0 16 00 11 	mcall	r6[68]
80005b62:	14 98       	mov	r8,r10
80005b64:	16 99       	mov	r9,r11
80005b66:	10 9a       	mov	r10,r8
80005b68:	12 9b       	mov	r11,r9
80005b6a:	f0 16 00 09 	mcall	r6[36]
80005b6e:	18 98       	mov	r8,r12
80005b70:	eb 48 05 34 	st.w	r5[1332],r8
		centralData->stabiliser_stack.velocity_stabiliser.output.theading = input.theading;
80005b74:	ec f8 00 00 	ld.w	r8,r6[0]
80005b78:	70 08       	ld.w	r8,r8[0x0]
80005b7a:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005b7e:	f1 49 05 44 	st.w	r8[1348],r9
		input = centralData->stabiliser_stack.velocity_stabiliser.output;
80005b82:	ec f8 00 00 	ld.w	r8,r6[0]
80005b86:	70 09       	ld.w	r9,r8[0x0]
80005b88:	ee c8 00 48 	sub	r8,r7,72
80005b8c:	f2 c9 fa d8 	sub	r9,r9,-1320
80005b90:	f0 ca 00 00 	sub	r10,r8,0
80005b94:	f2 cb 00 00 	sub	r11,r9,0
80005b98:	76 0c       	ld.w	r12,r11[0x0]
80005b9a:	95 0c       	st.w	r10[0x0],r12
80005b9c:	76 1c       	ld.w	r12,r11[0x4]
80005b9e:	95 1c       	st.w	r10[0x4],r12
80005ba0:	76 2c       	ld.w	r12,r11[0x8]
80005ba2:	95 2c       	st.w	r10[0x8],r12
80005ba4:	76 3b       	ld.w	r11,r11[0xc]
80005ba6:	95 3b       	st.w	r10[0xc],r11
80005ba8:	f0 ca ff f0 	sub	r10,r8,-16
80005bac:	f2 cb ff f0 	sub	r11,r9,-16
80005bb0:	76 0c       	ld.w	r12,r11[0x0]
80005bb2:	95 0c       	st.w	r10[0x0],r12
80005bb4:	76 1c       	ld.w	r12,r11[0x4]
80005bb6:	95 1c       	st.w	r10[0x4],r12
80005bb8:	76 2c       	ld.w	r12,r11[0x8]
80005bba:	95 2c       	st.w	r10[0x8],r12
80005bbc:	76 3b       	ld.w	r11,r11[0xc]
80005bbe:	95 3b       	st.w	r10[0xc],r11
80005bc0:	f2 ea 00 20 	ld.d	r10,r9[32]
80005bc4:	f0 eb 00 20 	st.d	r8[32],r10
80005bc8:	72 a9       	ld.w	r9,r9[0x28]
80005bca:	91 a9       	st.w	r8[0x28],r9
	
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case ATTITUDE_COMMAND_MODE:
		// run absolute attitude controller
		rpyt_errors[0]= input.rpy[0] - (-imu->attitude.up_vec.v[1] ); 
80005bcc:	ee f9 ff b8 	ld.w	r9,r7[-72]
80005bd0:	ee f8 ff b4 	ld.w	r8,r7[-76]
80005bd4:	70 68       	ld.w	r8,r8[0x18]
80005bd6:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005bda:	ef 48 ff e4 	st.w	r7[-28],r8
		rpyt_errors[1]= input.rpy[1] - imu->attitude.up_vec.v[0];
80005bde:	ee f9 ff bc 	ld.w	r9,r7[-68]
80005be2:	ee f8 ff b4 	ld.w	r8,r7[-76]
80005be6:	70 58       	ld.w	r8,r8[0x14]
80005be8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005bec:	ef 48 ff e8 	st.w	r7[-24],r8
		
		rpyt_errors[2]= input.rpy[2];
80005bf0:	ee f8 ff c0 	ld.w	r8,r7[-64]
80005bf4:	ef 48 ff ec 	st.w	r7[-20],r8
		
		if ((control_input->yaw_mode == YAW_ABSOLUTE) ) {
80005bf8:	ee f8 ff ac 	ld.w	r8,r7[-84]
80005bfc:	70 98       	ld.w	r8,r8[0x24]
80005bfe:	58 18       	cp.w	r8,1
80005c00:	c1 21       	brne	80005c24 <cascade_stabilise_copter+0x27c>
			rpyt_errors[2] +=calc_smaller_angle(input.theading- pos_est->localPosition.heading);
80005c02:	ee f5 ff ec 	ld.w	r5,r7[-20]
80005c06:	ee f9 ff d4 	ld.w	r9,r7[-44]
80005c0a:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005c0e:	71 b8       	ld.w	r8,r8[0x6c]
80005c10:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005c14:	10 9c       	mov	r12,r8
80005c16:	fe b0 fd 35 	rcall	80005680 <calc_smaller_angle>
80005c1a:	18 98       	mov	r8,r12
80005c1c:	e5 a0 08 58 	cop	cp0,cr8,cr5,cr8,0x40
80005c20:	ef 48 ff ec 	st.w	r7[-20],r8
		}
		rpyt_errors[3]= input.thrust;       // no feedback for thrust at this level
80005c24:	ee f8 ff c4 	ld.w	r8,r7[-60]
80005c28:	ef 48 ff f0 	st.w	r7[-16],r8
		
		// run PID update on all attitude controllers
		stabilise(&centralData->stabiliser_stack.attitude_stabiliser, centralData->imu1.dt, &rpyt_errors);
80005c2c:	ec f8 00 00 	ld.w	r8,r6[0]
80005c30:	70 08       	ld.w	r8,r8[0x0]
80005c32:	f0 f9 01 40 	ld.w	r9,r8[320]
80005c36:	ec f8 00 00 	ld.w	r8,r6[0]
80005c3a:	70 08       	ld.w	r8,r8[0x0]
80005c3c:	f0 c8 fd 24 	sub	r8,r8,-732
80005c40:	ee ca 00 1c 	sub	r10,r7,28
80005c44:	12 9b       	mov	r11,r9
80005c46:	10 9c       	mov	r12,r8
80005c48:	f0 16 00 ca 	mcall	r6[808]
		
		// use output of attitude controller to set rate setpoints for rate controller 
		input = centralData->stabiliser_stack.attitude_stabiliser.output;
80005c4c:	ec f8 00 00 	ld.w	r8,r6[0]
80005c50:	70 09       	ld.w	r9,r8[0x0]
80005c52:	ee c8 00 48 	sub	r8,r7,72
80005c56:	f2 c9 fc 14 	sub	r9,r9,-1004
80005c5a:	f0 ca 00 00 	sub	r10,r8,0
80005c5e:	f2 cb 00 00 	sub	r11,r9,0
80005c62:	76 0c       	ld.w	r12,r11[0x0]
80005c64:	95 0c       	st.w	r10[0x0],r12
80005c66:	76 1c       	ld.w	r12,r11[0x4]
80005c68:	95 1c       	st.w	r10[0x4],r12
80005c6a:	76 2c       	ld.w	r12,r11[0x8]
80005c6c:	95 2c       	st.w	r10[0x8],r12
80005c6e:	76 3b       	ld.w	r11,r11[0xc]
80005c70:	95 3b       	st.w	r10[0xc],r11
80005c72:	f0 ca ff f0 	sub	r10,r8,-16
80005c76:	f2 cb ff f0 	sub	r11,r9,-16
80005c7a:	76 0c       	ld.w	r12,r11[0x0]
80005c7c:	95 0c       	st.w	r10[0x0],r12
80005c7e:	76 1c       	ld.w	r12,r11[0x4]
80005c80:	95 1c       	st.w	r10[0x4],r12
80005c82:	76 2c       	ld.w	r12,r11[0x8]
80005c84:	95 2c       	st.w	r10[0x8],r12
80005c86:	76 3b       	ld.w	r11,r11[0xc]
80005c88:	95 3b       	st.w	r10[0xc],r11
80005c8a:	f2 ea 00 20 	ld.d	r10,r9[32]
80005c8e:	f0 eb 00 20 	st.d	r8[32],r10
80005c92:	72 a9       	ld.w	r9,r9[0x28]
80005c94:	91 a9       	st.w	r8[0x28],r9
	
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case RATE_COMMAND_MODE: // this level is always run
		// get rate measurements from IMU (filtered angular rates)
		for (i=0; i<3; i++) {
80005c96:	30 08       	mov	r8,0
80005c98:	ef 48 ff f4 	st.w	r7[-12],r8
80005c9c:	c1 e8       	rjmp	80005cd8 <cascade_stabilise_copter+0x330>
			rpyt_errors[i]= input.rpy[i]- imu->attitude.om[i];
80005c9e:	ee fa ff f4 	ld.w	r10,r7[-12]
80005ca2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005ca6:	a3 68       	lsl	r8,0x2
80005ca8:	ee 08 00 08 	add	r8,r7,r8
80005cac:	f0 f9 ff b8 	ld.w	r9,r8[-72]
80005cb0:	ee fb ff f4 	ld.w	r11,r7[-12]
80005cb4:	ee f8 ff b4 	ld.w	r8,r7[-76]
80005cb8:	2e 2b       	sub	r11,-30
80005cba:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
80005cbe:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80005cc2:	f4 08 15 02 	lsl	r8,r10,0x2
80005cc6:	ee 08 00 08 	add	r8,r7,r8
80005cca:	f1 49 ff e4 	st.w	r8[-28],r9
	
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case RATE_COMMAND_MODE: // this level is always run
		// get rate measurements from IMU (filtered angular rates)
		for (i=0; i<3; i++) {
80005cce:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005cd2:	2f f8       	sub	r8,-1
80005cd4:	ef 48 ff f4 	st.w	r7[-12],r8
80005cd8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80005cdc:	58 28       	cp.w	r8,2
80005cde:	fe 9a ff e0 	brle	80005c9e <cascade_stabilise_copter+0x2f6>
			rpyt_errors[i]= input.rpy[i]- imu->attitude.om[i];
		}
		rpyt_errors[3] = input.thrust ;  // no feedback for thrust at this level
80005ce2:	ee f8 ff c4 	ld.w	r8,r7[-60]
80005ce6:	ef 48 ff f0 	st.w	r7[-16],r8
		
		// run PID update on all rate controllers
		stabilise(&centralData->stabiliser_stack.rate_stabiliser, centralData->imu1.dt, &rpyt_errors );
80005cea:	ec f8 00 00 	ld.w	r8,r6[0]
80005cee:	70 08       	ld.w	r8,r8[0x0]
80005cf0:	f0 f9 01 40 	ld.w	r9,r8[320]
80005cf4:	ec f8 00 00 	ld.w	r8,r6[0]
80005cf8:	70 08       	ld.w	r8,r8[0x0]
80005cfa:	f0 c8 fe 60 	sub	r8,r8,-416
80005cfe:	ee ca 00 1c 	sub	r10,r7,28
80005d02:	12 9b       	mov	r11,r9
80005d04:	10 9c       	mov	r12,r8
80005d06:	f0 16 00 ca 	mcall	r6[808]
	}
	
	// mix to servo outputs depending on configuration
	#ifdef CONF_DIAG
	mix_to_servos_diag_quad(&centralData->stabiliser_stack.rate_stabiliser.output);
80005d0a:	ec f8 00 00 	ld.w	r8,r6[0]
80005d0e:	70 08       	ld.w	r8,r8[0x0]
80005d10:	f0 c8 fd 50 	sub	r8,r8,-688
80005d14:	10 9c       	mov	r12,r8
80005d16:	f0 16 01 e7 	mcall	r6[1948]
	#ifdef CONF_CROSS
	mix_to_servos_cross_quad(&centralData->stabiliser_stack.rate_stabiliser.output);
	#endif
	#endif
	
}
80005d1a:	2e bd       	sub	sp,-84
80005d1c:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80005d20:	80 00       	ld.sh	r0,r0[0x0]
80005d22:	58 38       	cp.w	r8,3

80005d24 <mix_to_servos_diag_quad>:

void mix_to_servos_diag_quad(Control_Command_t *control){
80005d24:	eb cd 40 e0 	pushm	r5-r7,lr
80005d28:	1a 97       	mov	r7,sp
80005d2a:	20 6d       	sub	sp,24
80005d2c:	4e 96       	lddpc	r6,80005ed0 <mix_to_servos_diag_quad+0x1ac>
80005d2e:	1e 26       	rsub	r6,pc
80005d30:	ef 4c ff e8 	st.w	r7[-24],r12
	int i;
	float motor_command[4];
	
	motor_command[M_FRONT_RIGHT]= control->thrust + (-control->rpy[ROLL] + control->rpy[PITCH]) + M_FR_DIR * control->rpy[YAW];
80005d34:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d38:	70 39       	ld.w	r9,r8[0xc]
80005d3a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d3e:	70 1a       	ld.w	r10,r8[0x4]
80005d40:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d44:	70 08       	ld.w	r8,r8[0x0]
80005d46:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80005d4a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005d4e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d52:	70 28       	ld.w	r8,r8[0x8]
80005d54:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005d58:	ef 48 ff f0 	st.w	r7[-16],r8
	motor_command[M_FRONT_LEFT] = control->thrust + ( control->rpy[ROLL] + control->rpy[PITCH]) + M_FL_DIR * control->rpy[YAW];
80005d5c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d60:	70 39       	ld.w	r9,r8[0xc]
80005d62:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d66:	70 0a       	ld.w	r10,r8[0x0]
80005d68:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d6c:	70 18       	ld.w	r8,r8[0x4]
80005d6e:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80005d72:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005d76:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d7a:	70 28       	ld.w	r8,r8[0x8]
80005d7c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005d80:	ef 48 ff f4 	st.w	r7[-12],r8
	motor_command[M_REAR_RIGHT] = control->thrust + (-control->rpy[ROLL] - control->rpy[PITCH]) + M_RR_DIR * control->rpy[YAW];
80005d84:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d88:	70 39       	ld.w	r9,r8[0xc]
80005d8a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d8e:	70 08       	ld.w	r8,r8[0x0]
80005d90:	10 9a       	mov	r10,r8
80005d92:	ee 1a 80 00 	eorh	r10,0x8000
80005d96:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005d9a:	70 18       	ld.w	r8,r8[0x4]
80005d9c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80005da0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005da4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005da8:	70 28       	ld.w	r8,r8[0x8]
80005daa:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005dae:	ef 48 ff ec 	st.w	r7[-20],r8
	motor_command[M_REAR_LEFT]  = control->thrust + ( control->rpy[ROLL] - control->rpy[PITCH]) + M_RL_DIR * control->rpy[YAW];
80005db2:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005db6:	70 39       	ld.w	r9,r8[0xc]
80005db8:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005dbc:	70 0a       	ld.w	r10,r8[0x0]
80005dbe:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005dc2:	70 18       	ld.w	r8,r8[0x4]
80005dc4:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80005dc8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005dcc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005dd0:	70 28       	ld.w	r8,r8[0x8]
80005dd2:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005dd6:	ef 48 ff f8 	st.w	r7[-8],r8
	for (i=0; i<4; i++) {
80005dda:	30 08       	mov	r8,0
80005ddc:	ef 48 ff fc 	st.w	r7[-4],r8
80005de0:	c4 98       	rjmp	80005e72 <mix_to_servos_diag_quad+0x14e>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
80005de2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005de6:	a3 68       	lsl	r8,0x2
80005de8:	ee 08 00 08 	add	r8,r7,r8
80005dec:	f0 f8 ff ec 	ld.w	r8,r8[-20]
80005df0:	10 9c       	mov	r12,r8
80005df2:	f0 16 00 02 	mcall	r6[8]
80005df6:	30 05       	mov	r5,0
80005df8:	e0 68 cc cd 	mov	r8,52429
80005dfc:	ea 18 cc cc 	orh	r8,0xcccc
80005e00:	e0 69 cc cc 	mov	r9,52428
80005e04:	ea 19 bf ec 	orh	r9,0xbfec
80005e08:	f0 16 00 1d 	mcall	r6[116]
80005e0c:	18 98       	mov	r8,r12
80005e0e:	58 08       	cp.w	r8,0
80005e10:	c0 20       	breq	80005e14 <mix_to_servos_diag_quad+0xf0>
80005e12:	30 15       	mov	r5,1
80005e14:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80005e18:	c0 c0       	breq	80005e30 <mix_to_servos_diag_quad+0x10c>
80005e1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e1e:	a3 68       	lsl	r8,0x2
80005e20:	ee 08 00 08 	add	r8,r7,r8
80005e24:	e0 69 66 66 	mov	r9,26214
80005e28:	ea 19 bf 66 	orh	r9,0xbf66
80005e2c:	f1 49 ff ec 	st.w	r8[-20],r9
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
80005e30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e34:	a3 68       	lsl	r8,0x2
80005e36:	ee 08 00 08 	add	r8,r7,r8
80005e3a:	f0 fa ff ec 	ld.w	r10,r8[-20]
80005e3e:	30 18       	mov	r8,1
80005e40:	fc 19 3f 80 	movh	r9,0x3f80
80005e44:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005e48:	e0 8c 00 04 	brvs	80005e50 <mix_to_servos_diag_quad+0x12c>
80005e4c:	e0 89 00 03 	brgt	80005e52 <mix_to_servos_diag_quad+0x12e>
80005e50:	30 08       	mov	r8,0
80005e52:	5c 58       	castu.b	r8
80005e54:	c0 a0       	breq	80005e68 <mix_to_servos_diag_quad+0x144>
80005e56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e5a:	a3 68       	lsl	r8,0x2
80005e5c:	ee 08 00 08 	add	r8,r7,r8
80005e60:	fc 19 3f 80 	movh	r9,0x3f80
80005e64:	f1 49 ff ec 	st.w	r8[-20],r9
	
	motor_command[M_FRONT_RIGHT]= control->thrust + (-control->rpy[ROLL] + control->rpy[PITCH]) + M_FR_DIR * control->rpy[YAW];
	motor_command[M_FRONT_LEFT] = control->thrust + ( control->rpy[ROLL] + control->rpy[PITCH]) + M_FL_DIR * control->rpy[YAW];
	motor_command[M_REAR_RIGHT] = control->thrust + (-control->rpy[ROLL] - control->rpy[PITCH]) + M_RR_DIR * control->rpy[YAW];
	motor_command[M_REAR_LEFT]  = control->thrust + ( control->rpy[ROLL] - control->rpy[PITCH]) + M_RL_DIR * control->rpy[YAW];
	for (i=0; i<4; i++) {
80005e68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e6c:	2f f8       	sub	r8,-1
80005e6e:	ef 48 ff fc 	st.w	r7[-4],r8
80005e72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e76:	58 38       	cp.w	r8,3
80005e78:	fe 9a ff b5 	brle	80005de2 <mix_to_servos_diag_quad+0xbe>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
80005e7c:	30 08       	mov	r8,0
80005e7e:	ef 48 ff fc 	st.w	r7[-4],r8
80005e82:	c1 f8       	rjmp	80005ec0 <mix_to_servos_diag_quad+0x19c>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
80005e84:	ec f8 00 00 	ld.w	r8,r6[0]
80005e88:	70 0a       	ld.w	r10,r8[0x0]
80005e8a:	ee fb ff fc 	ld.w	r11,r7[-4]
80005e8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005e92:	a3 68       	lsl	r8,0x2
80005e94:	ee 08 00 08 	add	r8,r7,r8
80005e98:	f0 f9 ff ec 	ld.w	r9,r8[-20]
80005e9c:	fc 18 43 fa 	movh	r8,0x43fa
80005ea0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005ea4:	e5 ab 09 08 	cop	cp0,cr9,cr0,cr8,0x56
80005ea8:	f6 08 15 04 	lsl	r8,r11,0x4
80005eac:	f4 08 00 08 	add	r8,r10,r8
80005eb0:	f0 c8 f9 14 	sub	r8,r8,-1772
80005eb4:	91 09       	st.w	r8[0x0],r9
	for (i=0; i<4; i++) {
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
80005eb6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005eba:	2f f8       	sub	r8,-1
80005ebc:	ef 48 ff fc 	st.w	r7[-4],r8
80005ec0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005ec4:	58 38       	cp.w	r8,3
80005ec6:	fe 9a ff df 	brle	80005e84 <mix_to_servos_diag_quad+0x160>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
	}
}
80005eca:	2f ad       	sub	sp,-24
80005ecc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80005ed0:	80 00       	ld.sh	r0,r0[0x0]
80005ed2:	5b b2       	cp.w	r2,-5

80005ed4 <mix_to_servos_cross_quad>:


void mix_to_servos_cross_quad(Control_Command_t *control){
80005ed4:	eb cd 40 e0 	pushm	r5-r7,lr
80005ed8:	1a 97       	mov	r7,sp
80005eda:	20 6d       	sub	sp,24
80005edc:	4d e6       	lddpc	r6,80006054 <mix_to_servos_cross_quad+0x180>
80005ede:	1e 26       	rsub	r6,pc
80005ee0:	ef 4c ff e8 	st.w	r7[-24],r12
	int i;
	float motor_command[4];
	
	motor_command[M_FRONT]= control->thrust + control->rpy[PITCH] + M_FRONT_DIR * control->rpy[YAW];
80005ee4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005ee8:	70 39       	ld.w	r9,r8[0xc]
80005eea:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005eee:	70 18       	ld.w	r8,r8[0x4]
80005ef0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005ef4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005ef8:	70 28       	ld.w	r8,r8[0x8]
80005efa:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005efe:	ef 48 ff ec 	st.w	r7[-20],r8
	motor_command[M_RIGHT] = control->thrust - control->rpy[ROLL] + M_RIGHT_DIR * control->rpy[YAW];
80005f02:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005f06:	70 39       	ld.w	r9,r8[0xc]
80005f08:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005f0c:	70 08       	ld.w	r8,r8[0x0]
80005f0e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80005f12:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005f16:	70 28       	ld.w	r8,r8[0x8]
80005f18:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005f1c:	ef 48 ff f0 	st.w	r7[-16],r8
	motor_command[M_REAR] = control->thrust - control->rpy[PITCH] + M_REAR_DIR * control->rpy[YAW];
80005f20:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005f24:	70 39       	ld.w	r9,r8[0xc]
80005f26:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005f2a:	70 18       	ld.w	r8,r8[0x4]
80005f2c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80005f30:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005f34:	70 28       	ld.w	r8,r8[0x8]
80005f36:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005f3a:	ef 48 ff f4 	st.w	r7[-12],r8
	motor_command[M_LEFT]  = control->thrust + control->rpy[ROLL] + M_LEFT_DIR * control->rpy[YAW];
80005f3e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005f42:	70 39       	ld.w	r9,r8[0xc]
80005f44:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005f48:	70 08       	ld.w	r8,r8[0x0]
80005f4a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005f4e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80005f52:	70 28       	ld.w	r8,r8[0x8]
80005f54:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005f58:	ef 48 ff f8 	st.w	r7[-8],r8
	for (i=0; i<4; i++) {
80005f5c:	30 08       	mov	r8,0
80005f5e:	ef 48 ff fc 	st.w	r7[-4],r8
80005f62:	c4 98       	rjmp	80005ff4 <mix_to_servos_cross_quad+0x120>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
80005f64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005f68:	a3 68       	lsl	r8,0x2
80005f6a:	ee 08 00 08 	add	r8,r7,r8
80005f6e:	f0 f8 ff ec 	ld.w	r8,r8[-20]
80005f72:	10 9c       	mov	r12,r8
80005f74:	f0 16 00 02 	mcall	r6[8]
80005f78:	30 05       	mov	r5,0
80005f7a:	e0 68 cc cd 	mov	r8,52429
80005f7e:	ea 18 cc cc 	orh	r8,0xcccc
80005f82:	e0 69 cc cc 	mov	r9,52428
80005f86:	ea 19 bf ec 	orh	r9,0xbfec
80005f8a:	f0 16 00 1d 	mcall	r6[116]
80005f8e:	18 98       	mov	r8,r12
80005f90:	58 08       	cp.w	r8,0
80005f92:	c0 20       	breq	80005f96 <mix_to_servos_cross_quad+0xc2>
80005f94:	30 15       	mov	r5,1
80005f96:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80005f9a:	c0 c0       	breq	80005fb2 <mix_to_servos_cross_quad+0xde>
80005f9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005fa0:	a3 68       	lsl	r8,0x2
80005fa2:	ee 08 00 08 	add	r8,r7,r8
80005fa6:	e0 69 66 66 	mov	r9,26214
80005faa:	ea 19 bf 66 	orh	r9,0xbf66
80005fae:	f1 49 ff ec 	st.w	r8[-20],r9
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
80005fb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005fb6:	a3 68       	lsl	r8,0x2
80005fb8:	ee 08 00 08 	add	r8,r7,r8
80005fbc:	f0 fa ff ec 	ld.w	r10,r8[-20]
80005fc0:	30 18       	mov	r8,1
80005fc2:	fc 19 3f 80 	movh	r9,0x3f80
80005fc6:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005fca:	e0 8c 00 04 	brvs	80005fd2 <mix_to_servos_cross_quad+0xfe>
80005fce:	e0 89 00 03 	brgt	80005fd4 <mix_to_servos_cross_quad+0x100>
80005fd2:	30 08       	mov	r8,0
80005fd4:	5c 58       	castu.b	r8
80005fd6:	c0 a0       	breq	80005fea <mix_to_servos_cross_quad+0x116>
80005fd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005fdc:	a3 68       	lsl	r8,0x2
80005fde:	ee 08 00 08 	add	r8,r7,r8
80005fe2:	fc 19 3f 80 	movh	r9,0x3f80
80005fe6:	f1 49 ff ec 	st.w	r8[-20],r9
	
	motor_command[M_FRONT]= control->thrust + control->rpy[PITCH] + M_FRONT_DIR * control->rpy[YAW];
	motor_command[M_RIGHT] = control->thrust - control->rpy[ROLL] + M_RIGHT_DIR * control->rpy[YAW];
	motor_command[M_REAR] = control->thrust - control->rpy[PITCH] + M_REAR_DIR * control->rpy[YAW];
	motor_command[M_LEFT]  = control->thrust + control->rpy[ROLL] + M_LEFT_DIR * control->rpy[YAW];
	for (i=0; i<4; i++) {
80005fea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005fee:	2f f8       	sub	r8,-1
80005ff0:	ef 48 ff fc 	st.w	r7[-4],r8
80005ff4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005ff8:	58 38       	cp.w	r8,3
80005ffa:	fe 9a ff b5 	brle	80005f64 <mix_to_servos_cross_quad+0x90>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
80005ffe:	30 08       	mov	r8,0
80006000:	ef 48 ff fc 	st.w	r7[-4],r8
80006004:	c1 f8       	rjmp	80006042 <mix_to_servos_cross_quad+0x16e>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
80006006:	ec f8 00 00 	ld.w	r8,r6[0]
8000600a:	70 0a       	ld.w	r10,r8[0x0]
8000600c:	ee fb ff fc 	ld.w	r11,r7[-4]
80006010:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006014:	a3 68       	lsl	r8,0x2
80006016:	ee 08 00 08 	add	r8,r7,r8
8000601a:	f0 f9 ff ec 	ld.w	r9,r8[-20]
8000601e:	fc 18 43 fa 	movh	r8,0x43fa
80006022:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80006026:	e5 ab 09 08 	cop	cp0,cr9,cr0,cr8,0x56
8000602a:	f6 08 15 04 	lsl	r8,r11,0x4
8000602e:	f4 08 00 08 	add	r8,r10,r8
80006032:	f0 c8 f9 14 	sub	r8,r8,-1772
80006036:	91 09       	st.w	r8[0x0],r9
	for (i=0; i<4; i++) {
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
80006038:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000603c:	2f f8       	sub	r8,-1
8000603e:	ef 48 ff fc 	st.w	r7[-4],r8
80006042:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006046:	58 38       	cp.w	r8,3
80006048:	fe 9a ff df 	brle	80006006 <mix_to_servos_cross_quad+0x132>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
	}
	
8000604c:	2f ad       	sub	sp,-24
8000604e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006052:	00 00       	add	r0,r0
80006054:	80 00       	ld.sh	r0,r0[0x0]
80006056:	5d 62       	*unknown*

80006058 <init_analog_monitor>:
#define MONITOR_CHANNELS 4
#define MONITOR_SAMPLES 10

int16_t monitor_buffer[MONITOR_CHANNELS *MONITOR_SAMPLES];

void init_analog_monitor() {
80006058:	eb cd 40 c0 	pushm	r6-r7,lr
8000605c:	1a 97       	mov	r7,sp
8000605e:	49 06       	lddpc	r6,8000609c <init_analog_monitor+0x44>
80006060:	1e 26       	rsub	r6,pc
	Init_ADCI(100000, ADCIFA_REF06VDD, 16, 4);
80006062:	30 49       	mov	r9,4
80006064:	31 0a       	mov	r10,16
80006066:	30 1b       	mov	r11,1
80006068:	e0 7c 86 a0 	mov	r12,100000
8000606c:	f0 16 02 0e 	mcall	r6[2104]
	adc_sequencer_add(AVR32_ADCIFA_INP_ADCIN6, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1);  // 6V
80006070:	30 0a       	mov	r10,0
80006072:	30 9b       	mov	r11,9
80006074:	30 6c       	mov	r12,6
80006076:	f0 16 00 91 	mcall	r6[580]
	adc_sequencer_add(AVR32_ADCIFA_INP_ADCIN7, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1);  // 5V_ANALOG
8000607a:	30 0a       	mov	r10,0
8000607c:	30 9b       	mov	r11,9
8000607e:	30 7c       	mov	r12,7
80006080:	f0 16 00 91 	mcall	r6[580]
	adc_sequencer_add(AVR32_ADCIFA_INP_GNDANA, AVR32_ADCIFA_INN_ADCIN10,ADCIFA_SHG_1);  // BAT_FILTERED
80006084:	30 0a       	mov	r10,0
80006086:	30 2b       	mov	r11,2
80006088:	30 ac       	mov	r12,10
8000608a:	f0 16 00 91 	mcall	r6[580]
	adc_sequencer_add(AVR32_ADCIFA_INP_GNDANA, AVR32_ADCIFA_INN_ADCIN11, ADCIFA_SHG_1); //INPUT
8000608e:	30 0a       	mov	r10,0
80006090:	30 3b       	mov	r11,3
80006092:	30 ac       	mov	r12,10
80006094:	f0 16 00 91 	mcall	r6[580]
	//ADCI_Start_Sampling(&monitor_buffer, MONITOR_CHANNELS, MONITOR_SAMPLES, 100, false);
}
80006098:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000609c:	80 00       	ld.sh	r0,r0[0x0]
8000609e:	5e e4       	retqs	r4

800060a0 <trigger_analog_monitor>:

void trigger_analog_monitor() {
800060a0:	eb cd 40 c0 	pushm	r6-r7,lr
800060a4:	1a 97       	mov	r7,sp
800060a6:	48 76       	lddpc	r6,800060c0 <trigger_analog_monitor+0x20>
800060a8:	1e 26       	rsub	r6,pc
	ADCI_Start_Sampling(&monitor_buffer, MONITOR_CHANNELS, MONITOR_SAMPLES, 100, false);
800060aa:	30 08       	mov	r8,0
800060ac:	36 49       	mov	r9,100
800060ae:	30 aa       	mov	r10,10
800060b0:	30 4b       	mov	r11,4
800060b2:	ec fc 03 b8 	ld.w	r12,r6[952]
800060b6:	f0 16 01 8e 	mcall	r6[1592]
}
800060ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800060be:	00 00       	add	r0,r0
800060c0:	80 00       	ld.sh	r0,r0[0x0]
800060c2:	5f 2c       	srhs	r12

800060c4 <get_monitored_avg>:

float get_monitored_avg(int channel) {
800060c4:	eb cd 40 c0 	pushm	r6-r7,lr
800060c8:	1a 97       	mov	r7,sp
800060ca:	20 3d       	sub	sp,12
800060cc:	49 c6       	lddpc	r6,8000613c <get_monitored_avg+0x78>
800060ce:	1e 26       	rsub	r6,pc
800060d0:	ef 4c ff f4 	st.w	r7[-12],r12
	float out=0.0;
800060d4:	30 08       	mov	r8,0
800060d6:	ef 48 ff f8 	st.w	r7[-8],r8
	int i;
	for (i=0; i<MONITOR_SAMPLES; i++) {
800060da:	30 08       	mov	r8,0
800060dc:	ef 48 ff fc 	st.w	r7[-4],r8
800060e0:	c1 98       	rjmp	80006112 <get_monitored_avg+0x4e>
		out+=(float)monitor_buffer[channel + i*MONITOR_CHANNELS];
800060e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800060e6:	f0 09 15 02 	lsl	r9,r8,0x2
800060ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
800060ee:	10 09       	add	r9,r8
800060f0:	ec f8 03 b8 	ld.w	r8,r6[952]
800060f4:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
800060f8:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
800060fc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006100:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006104:	ef 48 ff f8 	st.w	r7[-8],r8
}

float get_monitored_avg(int channel) {
	float out=0.0;
	int i;
	for (i=0; i<MONITOR_SAMPLES; i++) {
80006108:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000610c:	2f f8       	sub	r8,-1
8000610e:	ef 48 ff fc 	st.w	r7[-4],r8
80006112:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006116:	58 98       	cp.w	r8,9
80006118:	fe 9a ff e5 	brle	800060e2 <get_monitored_avg+0x1e>
		out+=(float)monitor_buffer[channel + i*MONITOR_CHANNELS];
	}
	out=out / MONITOR_SAMPLES;
8000611c:	fc 1b 41 20 	movh	r11,0x4120
80006120:	ee fc ff f8 	ld.w	r12,r7[-8]
80006124:	f0 16 00 08 	mcall	r6[32]
80006128:	18 98       	mov	r8,r12
8000612a:	ef 48 ff f8 	st.w	r7[-8],r8
	return out;
8000612e:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80006132:	10 9c       	mov	r12,r8
80006134:	2f dd       	sub	sp,-12
80006136:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000613a:	00 00       	add	r0,r0
8000613c:	80 00       	ld.sh	r0,r0[0x0]
8000613e:	5f 52       	srlt	r2

80006140 <get_battery_rail>:

float get_battery_rail(){
80006140:	eb cd 40 c0 	pushm	r6-r7,lr
80006144:	1a 97       	mov	r7,sp
80006146:	48 f6       	lddpc	r6,80006180 <get_battery_rail+0x40>
80006148:	1e 26       	rsub	r6,pc
	return -CONV_FACTOR_BAT * get_monitored_avg(3);
8000614a:	30 3c       	mov	r12,3
8000614c:	f0 16 00 87 	mcall	r6[540]
80006150:	18 98       	mov	r8,r12
80006152:	10 9c       	mov	r12,r8
80006154:	f0 16 00 02 	mcall	r6[8]
80006158:	e0 68 67 a1 	mov	r8,26529
8000615c:	ea 18 ea b3 	orh	r8,0xeab3
80006160:	e0 69 b5 73 	mov	r9,46451
80006164:	ea 19 bf 65 	orh	r9,0xbf65
80006168:	f0 16 00 03 	mcall	r6[12]
8000616c:	14 98       	mov	r8,r10
8000616e:	16 99       	mov	r9,r11
80006170:	10 9a       	mov	r10,r8
80006172:	12 9b       	mov	r11,r9
80006174:	f0 16 00 09 	mcall	r6[36]
80006178:	18 98       	mov	r8,r12
}
8000617a:	10 9c       	mov	r12,r8
8000617c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006180:	80 00       	ld.sh	r0,r0[0x0]
80006182:	5f cc       	srvs	r12

80006184 <get_internal_rail>:

float get_internal_rail(){
80006184:	eb cd 40 c0 	pushm	r6-r7,lr
80006188:	1a 97       	mov	r7,sp
8000618a:	48 f6       	lddpc	r6,800061c4 <get_internal_rail+0x40>
8000618c:	1e 26       	rsub	r6,pc
	return -CONV_FACTOR_INT * get_monitored_avg(2);
8000618e:	30 2c       	mov	r12,2
80006190:	f0 16 00 87 	mcall	r6[540]
80006194:	18 98       	mov	r8,r12
80006196:	10 9c       	mov	r12,r8
80006198:	f0 16 00 02 	mcall	r6[8]
8000619c:	e0 68 67 a1 	mov	r8,26529
800061a0:	ea 18 ea b3 	orh	r8,0xeab3
800061a4:	e0 69 b5 73 	mov	r9,46451
800061a8:	ea 19 bf 65 	orh	r9,0xbf65
800061ac:	f0 16 00 03 	mcall	r6[12]
800061b0:	14 98       	mov	r8,r10
800061b2:	16 99       	mov	r9,r11
800061b4:	10 9a       	mov	r10,r8
800061b6:	12 9b       	mov	r11,r9
800061b8:	f0 16 00 09 	mcall	r6[36]
800061bc:	18 98       	mov	r8,r12
}
800061be:	10 9c       	mov	r12,r8
800061c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800061c4:	80 00       	ld.sh	r0,r0[0x0]
800061c6:	60 10       	ld.w	r0,r0[0x4]

800061c8 <get_6V_analog_rail>:


float get_6V_analog_rail(){
800061c8:	eb cd 40 c0 	pushm	r6-r7,lr
800061cc:	1a 97       	mov	r7,sp
800061ce:	48 f6       	lddpc	r6,80006208 <get_6V_analog_rail+0x40>
800061d0:	1e 26       	rsub	r6,pc
	return CONV_FACTOR_6V * get_monitored_avg(0);
800061d2:	30 0c       	mov	r12,0
800061d4:	f0 16 00 87 	mcall	r6[540]
800061d8:	18 98       	mov	r8,r12
800061da:	10 9c       	mov	r12,r8
800061dc:	f0 16 00 02 	mcall	r6[8]
800061e0:	e0 68 61 13 	mov	r8,24851
800061e4:	ea 18 d3 c3 	orh	r8,0xd3c3
800061e8:	e0 69 65 2b 	mov	r9,25899
800061ec:	ea 19 3f 59 	orh	r9,0x3f59
800061f0:	f0 16 00 03 	mcall	r6[12]
800061f4:	14 98       	mov	r8,r10
800061f6:	16 99       	mov	r9,r11
800061f8:	10 9a       	mov	r10,r8
800061fa:	12 9b       	mov	r11,r9
800061fc:	f0 16 00 09 	mcall	r6[36]
80006200:	18 98       	mov	r8,r12
}
80006202:	10 9c       	mov	r12,r8
80006204:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006208:	80 00       	ld.sh	r0,r0[0x0]
8000620a:	60 54       	ld.w	r4,r0[0x14]

8000620c <get_5V_analog_rail>:


float get_5V_analog_rail(){
8000620c:	eb cd 40 c0 	pushm	r6-r7,lr
80006210:	1a 97       	mov	r7,sp
80006212:	48 f6       	lddpc	r6,8000624c <get_5V_analog_rail+0x40>
80006214:	1e 26       	rsub	r6,pc
	return CONV_FACTOR_5V * get_monitored_avg(1);
80006216:	30 1c       	mov	r12,1
80006218:	f0 16 00 87 	mcall	r6[540]
8000621c:	18 98       	mov	r8,r12
8000621e:	10 9c       	mov	r12,r8
80006220:	f0 16 00 02 	mcall	r6[8]
80006224:	e0 68 61 13 	mov	r8,24851
80006228:	ea 18 d3 c3 	orh	r8,0xd3c3
8000622c:	e0 69 65 2b 	mov	r9,25899
80006230:	ea 19 3f 59 	orh	r9,0x3f59
80006234:	f0 16 00 03 	mcall	r6[12]
80006238:	14 98       	mov	r8,r10
8000623a:	16 99       	mov	r9,r11
8000623c:	10 9a       	mov	r10,r8
8000623e:	12 9b       	mov	r11,r9
80006240:	f0 16 00 09 	mcall	r6[36]
80006244:	18 98       	mov	r8,r12
}
80006246:	10 9c       	mov	r12,r8
80006248:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000624c:	80 00       	ld.sh	r0,r0[0x0]
8000624e:	60 98       	ld.w	r8,r0[0x24]

80006250 <init_time_keeper>:


#include "time_keeper.h"


void init_time_keeper() {
80006250:	eb cd 40 c0 	pushm	r6-r7,lr
80006254:	1a 97       	mov	r7,sp
80006256:	48 86       	lddpc	r6,80006274 <init_time_keeper+0x24>
80006258:	1e 26       	rsub	r6,pc
	ast_init_counter(&AVR32_AST, AST_OSC_PB, AST_PRESCALER_SETTING, 0);
8000625a:	30 09       	mov	r9,0
8000625c:	30 5a       	mov	r10,5
8000625e:	30 2b       	mov	r11,2
80006260:	fe 7c 0c 00 	mov	r12,-62464
80006264:	f0 16 01 7b 	mcall	r6[1516]
	ast_enable(&AVR32_AST);
80006268:	fe 7c 0c 00 	mov	r12,-62464
8000626c:	f0 16 01 de 	mcall	r6[1912]
}
80006270:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006274:	80 00       	ld.sh	r0,r0[0x0]
80006276:	60 dc       	ld.w	r12,r0[0x34]

80006278 <get_time>:


double get_time(){          // time in seconds since system start
80006278:	eb cd 40 c0 	pushm	r6-r7,lr
8000627c:	1a 97       	mov	r7,sp
8000627e:	48 a6       	lddpc	r6,800062a4 <get_time+0x2c>
80006280:	1e 26       	rsub	r6,pc
	return ticks_to_seconds(get_time_ticks());
80006282:	f0 16 00 4d 	mcall	r6[308]
80006286:	18 98       	mov	r8,r12
80006288:	10 9c       	mov	r12,r8
8000628a:	f0 16 00 b9 	mcall	r6[740]
8000628e:	18 98       	mov	r8,r12
80006290:	10 9c       	mov	r12,r8
80006292:	f0 16 00 02 	mcall	r6[8]
80006296:	14 98       	mov	r8,r10
80006298:	16 99       	mov	r9,r11
}
8000629a:	10 9a       	mov	r10,r8
8000629c:	12 9b       	mov	r11,r9
8000629e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800062a2:	00 00       	add	r0,r0
800062a4:	80 00       	ld.sh	r0,r0[0x0]
800062a6:	61 04       	ld.w	r4,r0[0x40]

800062a8 <get_millis>:
uint32_t get_millis() {     //milliseconds since system start
800062a8:	eb cd 40 c0 	pushm	r6-r7,lr
800062ac:	1a 97       	mov	r7,sp
800062ae:	48 96       	lddpc	r6,800062d0 <get_millis+0x28>
800062b0:	1e 26       	rsub	r6,pc
	return get_time_ticks()/1000; /// (TK_AST_FREQUENCY/1000);
800062b2:	f0 16 00 4d 	mcall	r6[308]
800062b6:	18 99       	mov	r9,r12
800062b8:	e0 68 4d d3 	mov	r8,19923
800062bc:	ea 18 10 62 	orh	r8,0x1062
800062c0:	f2 08 06 48 	mulu.d	r8,r9,r8
800062c4:	f2 08 16 06 	lsr	r8,r9,0x6
}	
800062c8:	10 9c       	mov	r12,r8
800062ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800062ce:	00 00       	add	r0,r0
800062d0:	80 00       	ld.sh	r0,r0[0x0]
800062d2:	61 34       	ld.w	r4,r0[0x4c]

800062d4 <get_micros>:
uint32_t get_micros() {     // microseconds since system start. Will run over after an hour.
800062d4:	eb cd 40 c0 	pushm	r6-r7,lr
800062d8:	1a 97       	mov	r7,sp
800062da:	48 56       	lddpc	r6,800062ec <get_micros+0x18>
800062dc:	1e 26       	rsub	r6,pc
	return get_time_ticks()* (1000000/TK_AST_FREQUENCY);
800062de:	f0 16 00 4d 	mcall	r6[308]
800062e2:	18 98       	mov	r8,r12
}	
800062e4:	10 9c       	mov	r12,r8
800062e6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800062ea:	00 00       	add	r0,r0
800062ec:	80 00       	ld.sh	r0,r0[0x0]
800062ee:	61 60       	ld.w	r0,r0[0x58]

800062f0 <get_time_ticks>:

uint32_t get_time_ticks(){ //raw timer ticks
800062f0:	eb cd 40 c0 	pushm	r6-r7,lr
800062f4:	1a 97       	mov	r7,sp
800062f6:	48 66       	lddpc	r6,8000630c <get_time_ticks+0x1c>
800062f8:	1e 26       	rsub	r6,pc
	return ast_get_counter_value(&AVR32_AST);
800062fa:	fe 7c 0c 00 	mov	r12,-62464
800062fe:	f0 16 02 11 	mcall	r6[2116]
80006302:	18 98       	mov	r8,r12
}
80006304:	10 9c       	mov	r12,r8
80006306:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000630a:	00 00       	add	r0,r0
8000630c:	80 00       	ld.sh	r0,r0[0x0]
8000630e:	61 7c       	ld.w	r12,r0[0x5c]

80006310 <ticks_to_seconds>:

float ticks_to_seconds(uint32_t timer_ticks){
80006310:	eb cd 40 c0 	pushm	r6-r7,lr
80006314:	1a 97       	mov	r7,sp
80006316:	20 1d       	sub	sp,4
80006318:	48 d6       	lddpc	r6,8000634c <ticks_to_seconds+0x3c>
8000631a:	1e 26       	rsub	r6,pc
8000631c:	ef 4c ff fc 	st.w	r7[-4],r12
	return ((double)timer_ticks/(double)TK_AST_FREQUENCY);
80006320:	ee fc ff fc 	ld.w	r12,r7[-4]
80006324:	f0 16 00 51 	mcall	r6[324]
80006328:	30 08       	mov	r8,0
8000632a:	e0 69 84 80 	mov	r9,33920
8000632e:	ea 19 41 2e 	orh	r9,0x412e
80006332:	f0 16 00 0c 	mcall	r6[48]
80006336:	14 98       	mov	r8,r10
80006338:	16 99       	mov	r9,r11
8000633a:	10 9a       	mov	r10,r8
8000633c:	12 9b       	mov	r11,r9
8000633e:	f0 16 00 09 	mcall	r6[36]
80006342:	18 98       	mov	r8,r12
}
80006344:	10 9c       	mov	r12,r8
80006346:	2f fd       	sub	sp,-4
80006348:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000634c:	80 00       	ld.sh	r0,r0[0x0]
8000634e:	61 9e       	ld.w	lr,r0[0x64]

80006350 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80006350:	eb cd 40 c0 	pushm	r6-r7,lr
80006354:	1a 97       	mov	r7,sp
80006356:	20 6d       	sub	sp,24
80006358:	49 e6       	lddpc	r6,800063d0 <interpolate+0x80>
8000635a:	1e 26       	rsub	r6,pc
8000635c:	ef 4c ff f8 	st.w	r7[-8],r12
80006360:	ef 4b ff f4 	st.w	r7[-12],r11
80006364:	ef 4a ff f0 	st.w	r7[-16],r10
80006368:	ef 49 ff ec 	st.w	r7[-20],r9
8000636c:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80006370:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006374:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006378:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8000637c:	c0 41       	brne	80006384 <interpolate+0x34>
	{
		return y1;
8000637e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80006382:	c2 38       	rjmp	800063c8 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80006384:	ee f9 ff e8 	ld.w	r9,r7[-24]
80006388:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000638c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80006390:	ee fa ff f8 	ld.w	r10,r7[-8]
80006394:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006398:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000639c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800063a0:	ee fa ff f0 	ld.w	r10,r7[-16]
800063a4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800063a8:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800063ac:	12 9b       	mov	r11,r9
800063ae:	10 9c       	mov	r12,r8
800063b0:	f0 16 00 08 	mcall	r6[32]
800063b4:	18 98       	mov	r8,r12
800063b6:	10 99       	mov	r9,r8
800063b8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800063bc:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800063c0:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
800063c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
800063c8:	10 9c       	mov	r12,r8
800063ca:	2f ad       	sub	sp,-24
800063cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800063d0:	80 00       	ld.sh	r0,r0[0x0]
800063d2:	61 de       	ld.w	lr,r0[0x74]

800063d4 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
800063d4:	eb cd 40 c0 	pushm	r6-r7,lr
800063d8:	1a 97       	mov	r7,sp
800063da:	20 3d       	sub	sp,12
800063dc:	49 06       	lddpc	r6,8000641c <mav_array_memcpy+0x48>
800063de:	1e 26       	rsub	r6,pc
800063e0:	ef 4c ff fc 	st.w	r7[-4],r12
800063e4:	ef 4b ff f8 	st.w	r7[-8],r11
800063e8:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
800063ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800063f0:	58 08       	cp.w	r8,0
800063f2:	c0 91       	brne	80006404 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
800063f4:	ee fa ff f4 	ld.w	r10,r7[-12]
800063f8:	30 0b       	mov	r11,0
800063fa:	ee fc ff fc 	ld.w	r12,r7[-4]
800063fe:	f0 16 00 31 	mcall	r6[196]
80006402:	c0 98       	rjmp	80006414 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80006404:	ee fa ff f4 	ld.w	r10,r7[-12]
80006408:	ee fb ff f8 	ld.w	r11,r7[-8]
8000640c:	ee fc ff fc 	ld.w	r12,r7[-4]
80006410:	f0 16 00 21 	mcall	r6[132]
	}
}
80006414:	2f dd       	sub	sp,-12
80006416:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000641a:	00 00       	add	r0,r0
8000641c:	80 00       	ld.sh	r0,r0[0x0]
8000641e:	62 62       	ld.w	r2,r1[0x18]

80006420 <e_init>:

uint32_t timeLastGpsMsgEstimator;

//----------------------------INITIALISATION------------------------
void e_init()
{
80006420:	eb cd 40 c0 	pushm	r6-r7,lr
80006424:	1a 97       	mov	r7,sp
80006426:	fe f6 02 06 	ld.w	r6,pc[518]
8000642a:	1e 26       	rsub	r6,pc
	//board=get_board_hardware();
	centralData=get_central_data();
8000642c:	f0 16 00 33 	mcall	r6[204]
80006430:	18 99       	mov	r9,r12
80006432:	ec f8 00 00 	ld.w	r8,r6[0]
80006436:	91 09       	st.w	r8[0x0],r9
	e_kalman_init(X,INIT_X_P); //e stands for estimator not extended
80006438:	fc 1b 41 20 	movh	r11,0x4120
8000643c:	30 0c       	mov	r12,0
8000643e:	f0 16 00 c3 	mcall	r6[780]
	e_kalman_init(Y,INIT_Y_P);
80006442:	fc 1b 41 20 	movh	r11,0x4120
80006446:	30 1c       	mov	r12,1
80006448:	f0 16 00 c3 	mcall	r6[780]
	e_kalman_init(Z,INIT_Z_P);
8000644c:	fc 1b 41 20 	movh	r11,0x4120
80006450:	30 2c       	mov	r12,2
80006452:	f0 16 00 c3 	mcall	r6[780]
	Q[0][0]=Q_X0;
80006456:	ec fa 00 e0 	ld.w	r10,r6[224]
8000645a:	e0 68 a9 fc 	mov	r8,43516
8000645e:	ea 18 d2 f1 	orh	r8,0xd2f1
80006462:	e0 69 62 4d 	mov	r9,25165
80006466:	ea 19 3f 50 	orh	r9,0x3f50
8000646a:	f4 e9 00 00 	st.d	r10[0],r8
	Q[0][1]=Q_X1;
8000646e:	ec fa 00 e0 	ld.w	r10,r6[224]
80006472:	30 08       	mov	r8,0
80006474:	30 09       	mov	r9,0
80006476:	f4 e9 00 08 	st.d	r10[8],r8
	Q[0][2]=Q_X2;
8000647a:	ec fa 00 e0 	ld.w	r10,r6[224]
8000647e:	30 08       	mov	r8,0
80006480:	30 09       	mov	r9,0
80006482:	f4 e9 00 10 	st.d	r10[16],r8
	Q[1][0]=Q_Y0;
80006486:	ec fa 00 e0 	ld.w	r10,r6[224]
8000648a:	30 08       	mov	r8,0
8000648c:	30 09       	mov	r9,0
8000648e:	f4 e9 00 18 	st.d	r10[24],r8
	Q[1][1]=Q_Y1;
80006492:	ec fa 00 e0 	ld.w	r10,r6[224]
80006496:	e0 68 a9 fc 	mov	r8,43516
8000649a:	ea 18 d2 f1 	orh	r8,0xd2f1
8000649e:	e0 69 62 4d 	mov	r9,25165
800064a2:	ea 19 3f 50 	orh	r9,0x3f50
800064a6:	f4 e9 00 20 	st.d	r10[32],r8
	Q[1][2]=Q_Y2;
800064aa:	ec fa 00 e0 	ld.w	r10,r6[224]
800064ae:	30 08       	mov	r8,0
800064b0:	30 09       	mov	r9,0
800064b2:	f4 e9 00 28 	st.d	r10[40],r8
	Q[2][0]=Q_Z0;
800064b6:	ec fa 00 e0 	ld.w	r10,r6[224]
800064ba:	30 08       	mov	r8,0
800064bc:	30 09       	mov	r9,0
800064be:	f4 e9 00 30 	st.d	r10[48],r8
	Q[2][1]=Q_Z1;
800064c2:	ec fa 00 e0 	ld.w	r10,r6[224]
800064c6:	30 08       	mov	r8,0
800064c8:	30 09       	mov	r9,0
800064ca:	f4 e9 00 38 	st.d	r10[56],r8
	Q[2][2]=Q_Z2;
800064ce:	ec fa 00 e0 	ld.w	r10,r6[224]
800064d2:	e0 68 a9 fc 	mov	r8,43516
800064d6:	ea 18 d2 f1 	orh	r8,0xd2f1
800064da:	e0 69 62 4d 	mov	r9,25165
800064de:	ea 19 3f 50 	orh	r9,0x3f50
800064e2:	f4 e9 00 40 	st.d	r10[64],r8
	R[0]=R_X_POS;
800064e6:	ec fa 01 68 	ld.w	r10,r6[360]
800064ea:	e0 68 b0 21 	mov	r8,45089
800064ee:	ea 18 68 72 	orh	r8,0x6872
800064f2:	e0 69 ed 91 	mov	r9,60817
800064f6:	ea 19 3f d8 	orh	r9,0x3fd8
800064fa:	f4 e9 00 00 	st.d	r10[0],r8
	R[1]=R_Y_POS;
800064fe:	ec fa 01 68 	ld.w	r10,r6[360]
80006502:	e0 68 a1 62 	mov	r8,41314
80006506:	ea 18 34 d6 	orh	r8,0x34d6
8000650a:	e0 69 38 ef 	mov	r9,14575
8000650e:	ea 19 3f e3 	orh	r9,0x3fe3
80006512:	f4 e9 00 08 	st.d	r10[8],r8
	R[2]=R_Z_POS;
80006516:	ec fa 01 68 	ld.w	r10,r6[360]
8000651a:	e0 68 6e 2f 	mov	r8,28207
8000651e:	ea 18 01 a3 	orh	r8,0x1a3
80006522:	e0 69 05 bc 	mov	r9,1468
80006526:	ea 19 40 05 	orh	r9,0x4005
8000652a:	f4 e9 00 10 	st.d	r10[16],r8
	
	Q2[0][0]=Q_X0;
8000652e:	ec fa 00 e4 	ld.w	r10,r6[228]
80006532:	e0 68 a9 fc 	mov	r8,43516
80006536:	ea 18 d2 f1 	orh	r8,0xd2f1
8000653a:	e0 69 62 4d 	mov	r9,25165
8000653e:	ea 19 3f 50 	orh	r9,0x3f50
80006542:	f4 e9 00 00 	st.d	r10[0],r8
	Q2[0][1]=Q_X1;
80006546:	ec fa 00 e4 	ld.w	r10,r6[228]
8000654a:	30 08       	mov	r8,0
8000654c:	30 09       	mov	r9,0
8000654e:	f4 e9 00 08 	st.d	r10[8],r8
	Q2[0][2]=Q_X2;
80006552:	ec fa 00 e4 	ld.w	r10,r6[228]
80006556:	30 08       	mov	r8,0
80006558:	30 09       	mov	r9,0
8000655a:	f4 e9 00 10 	st.d	r10[16],r8
	Q2[1][0]=Q_Y0;
8000655e:	ec fa 00 e4 	ld.w	r10,r6[228]
80006562:	30 08       	mov	r8,0
80006564:	30 09       	mov	r9,0
80006566:	f4 e9 00 18 	st.d	r10[24],r8
	Q2[1][1]=Q_Y1;
8000656a:	ec fa 00 e4 	ld.w	r10,r6[228]
8000656e:	e0 68 a9 fc 	mov	r8,43516
80006572:	ea 18 d2 f1 	orh	r8,0xd2f1
80006576:	e0 69 62 4d 	mov	r9,25165
8000657a:	ea 19 3f 50 	orh	r9,0x3f50
8000657e:	f4 e9 00 20 	st.d	r10[32],r8
	Q2[1][2]=Q_Y2;
80006582:	ec fa 00 e4 	ld.w	r10,r6[228]
80006586:	30 08       	mov	r8,0
80006588:	30 09       	mov	r9,0
8000658a:	f4 e9 00 28 	st.d	r10[40],r8
	Q2[2][0]=Q_Z0;
8000658e:	ec fa 00 e4 	ld.w	r10,r6[228]
80006592:	30 08       	mov	r8,0
80006594:	30 09       	mov	r9,0
80006596:	f4 e9 00 30 	st.d	r10[48],r8
	Q2[2][1]=Q_Z1;
8000659a:	ec fa 00 e4 	ld.w	r10,r6[228]
8000659e:	30 08       	mov	r8,0
800065a0:	30 09       	mov	r9,0
800065a2:	f4 e9 00 38 	st.d	r10[56],r8
	Q2[2][2]=Q_Z2;
800065a6:	ec fa 00 e4 	ld.w	r10,r6[228]
800065aa:	e0 68 a9 fc 	mov	r8,43516
800065ae:	ea 18 d2 f1 	orh	r8,0xd2f1
800065b2:	e0 69 62 4d 	mov	r9,25165
800065b6:	ea 19 3f 50 	orh	r9,0x3f50
800065ba:	f4 e9 00 40 	st.d	r10[64],r8
	R2[0]=R_X_POS;
800065be:	ec fa 01 64 	ld.w	r10,r6[356]
800065c2:	e0 68 b0 21 	mov	r8,45089
800065c6:	ea 18 68 72 	orh	r8,0x6872
800065ca:	e0 69 ed 91 	mov	r9,60817
800065ce:	ea 19 3f d8 	orh	r9,0x3fd8
800065d2:	f4 e9 00 00 	st.d	r10[0],r8
	R2[1]=R_Y_POS;
800065d6:	ec fa 01 64 	ld.w	r10,r6[356]
800065da:	e0 68 a1 62 	mov	r8,41314
800065de:	ea 18 34 d6 	orh	r8,0x34d6
800065e2:	e0 69 38 ef 	mov	r9,14575
800065e6:	ea 19 3f e3 	orh	r9,0x3fe3
800065ea:	f4 e9 00 08 	st.d	r10[8],r8
	R2[2]=R_Z_POS;
800065ee:	ec fa 01 64 	ld.w	r10,r6[356]
800065f2:	e0 68 6e 2f 	mov	r8,28207
800065f6:	ea 18 01 a3 	orh	r8,0x1a3
800065fa:	e0 69 05 bc 	mov	r9,1468
800065fe:	ea 19 40 05 	orh	r9,0x4005
80006602:	f4 e9 00 10 	st.d	r10[16],r8
	
	centralData->position_estimator.init_gps_position = false;
80006606:	ec f8 00 00 	ld.w	r8,r6[0]
8000660a:	70 09       	ld.w	r9,r8[0x0]
8000660c:	30 08       	mov	r8,0
8000660e:	f3 68 0d 64 	st.b	r9[3428],r8
	
	timeLastGpsMsgEstimator = 0;
80006612:	ec f8 02 90 	ld.w	r8,r6[656]
80006616:	30 09       	mov	r9,0
80006618:	91 09       	st.w	r8[0x0],r9
	
	filter_init_delta_t = false;
8000661a:	ec f9 02 d4 	ld.w	r9,r6[724]
8000661e:	30 08       	mov	r8,0
80006620:	b2 88       	st.b	r9[0x0],r8
	
	init_pos_gps_estimator();
80006622:	f0 16 01 14 	mcall	r6[1104]
}
80006626:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000662a:	00 00       	add	r0,r0
8000662c:	80 00       	ld.sh	r0,r0[0x0]
8000662e:	62 ae       	ld.w	lr,r1[0x28]
80006630:	47 50       	lddsp	r0,sp[0x1d4]
80006632:	53 20       	stdsp	sp[0xc8],r0
80006634:	70 6f       	ld.w	pc,r8[0x18]
80006636:	73 69       	ld.w	r9,r9[0x58]
80006638:	74 69       	ld.w	r9,r10[0x18]
8000663a:	6f 6e       	ld.w	lr,r7[0x58]
8000663c:	20 69       	sub	r9,6
8000663e:	6e 69       	ld.w	r9,r7[0x18]
80006640:	74 69       	ld.w	r9,r10[0x18]
80006642:	61 6c       	ld.w	r12,r0[0x58]
80006644:	69 7a       	ld.w	r10,r4[0x5c]
80006646:	65 64       	ld.w	r4,r2[0x58]
80006648:	21 0a       	sub	r10,16
	...

8000664c <init_pos_gps_estimator>:

void init_pos_gps_estimator()
{
8000664c:	eb cd 40 c0 	pushm	r6-r7,lr
80006650:	1a 97       	mov	r7,sp
80006652:	49 f6       	lddpc	r6,800066cc <init_pos_gps_estimator+0x80>
80006654:	1e 26       	rsub	r6,pc
	if (newValidGpsMsg(&timeLastGpsMsgEstimator) && (!(centralData->position_estimator.init_gps_position)))
80006656:	ec fc 02 90 	ld.w	r12,r6[656]
8000665a:	f0 16 00 94 	mcall	r6[592]
8000665e:	18 98       	mov	r8,r12
80006660:	58 08       	cp.w	r8,0
80006662:	c3 20       	breq	800066c6 <init_pos_gps_estimator+0x7a>
80006664:	ec f8 00 00 	ld.w	r8,r6[0]
80006668:	70 08       	ld.w	r8,r8[0x0]
8000666a:	f1 38 0d 64 	ld.ub	r8,r8[3428]
8000666e:	ec 18 00 01 	eorl	r8,0x1
80006672:	5c 58       	castu.b	r8
80006674:	c2 90       	breq	800066c6 <init_pos_gps_estimator+0x7a>
	{
		centralData->position_estimator.init_gps_position = true;
80006676:	ec f8 00 00 	ld.w	r8,r6[0]
8000667a:	70 09       	ld.w	r9,r8[0x0]
8000667c:	30 18       	mov	r8,1
8000667e:	f3 68 0d 64 	st.b	r9[3428],r8
		
		centralData->position_estimator.localPosition.origin.longitude = centralData->GPS_data.longitude;
80006682:	ec f8 00 00 	ld.w	r8,r6[0]
80006686:	70 0a       	ld.w	r10,r8[0x0]
80006688:	ec f8 00 00 	ld.w	r8,r6[0]
8000668c:	70 08       	ld.w	r8,r8[0x0]
8000668e:	f0 e8 0b 10 	ld.d	r8,r8[2832]
80006692:	f4 e9 0d ac 	st.d	r10[3500],r8
		centralData->position_estimator.localPosition.origin.latitude = centralData->GPS_data.latitude;
80006696:	ec f8 00 00 	ld.w	r8,r6[0]
8000669a:	70 0a       	ld.w	r10,r8[0x0]
8000669c:	ec f8 00 00 	ld.w	r8,r6[0]
800066a0:	70 08       	ld.w	r8,r8[0x0]
800066a2:	f0 e8 0b 08 	ld.d	r8,r8[2824]
800066a6:	f4 e9 0d b4 	st.d	r10[3508],r8
		centralData->position_estimator.localPosition.origin.altitude = centralData->GPS_data.altitude;
800066aa:	ec f8 00 00 	ld.w	r8,r6[0]
800066ae:	70 08       	ld.w	r8,r8[0x0]
800066b0:	ec f9 00 00 	ld.w	r9,r6[0]
800066b4:	72 09       	ld.w	r9,r9[0x0]
800066b6:	f2 f9 0b 18 	ld.w	r9,r9[2840]
800066ba:	f1 49 0d bc 	st.w	r8[3516],r9
		
		dbg_print("GPS position initialized!\n");
800066be:	fe cc 00 8e 	sub	r12,pc,142
800066c2:	f0 16 00 01 	mcall	r6[4]
	}
}
800066c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800066ca:	00 00       	add	r0,r0
800066cc:	80 00       	ld.sh	r0,r0[0x0]
800066ce:	64 d8       	ld.w	r8,r2[0x34]

800066d0 <e_kalman_init>:

void e_kalman_init (int axis,float init_p) // axis = Z, X or Y
{
800066d0:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
800066d4:	1a 97       	mov	r7,sp
800066d6:	20 4d       	sub	sp,16
800066d8:	4d e6       	lddpc	r6,80006850 <e_kalman_init+0x180>
800066da:	1e 26       	rsub	r6,pc
800066dc:	ef 4c ff f4 	st.w	r7[-12],r12
800066e0:	ef 4b ff f0 	st.w	r7[-16],r11
	int i, j;
	
	centralData->estimation.state[axis][POSITION] = 0; // Differential par rapport au point de depart
800066e4:	ec f8 00 00 	ld.w	r8,r6[0]
800066e8:	70 0a       	ld.w	r10,r8[0x0]
800066ea:	ee f9 ff f4 	ld.w	r9,r7[-12]
800066ee:	12 98       	mov	r8,r9
800066f0:	a1 78       	lsl	r8,0x1
800066f2:	12 08       	add	r8,r9
800066f4:	a3 78       	lsl	r8,0x3
800066f6:	f4 08 00 08 	add	r8,r10,r8
800066fa:	f0 ca f4 a4 	sub	r10,r8,-2908
800066fe:	30 08       	mov	r8,0
80006700:	30 09       	mov	r9,0
80006702:	f4 e9 00 00 	st.d	r10[0],r8
	centralData->estimation.state[axis][SPEED] = 0;
80006706:	ec f8 00 00 	ld.w	r8,r6[0]
8000670a:	70 0a       	ld.w	r10,r8[0x0]
8000670c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006710:	12 98       	mov	r8,r9
80006712:	a1 78       	lsl	r8,0x1
80006714:	12 08       	add	r8,r9
80006716:	2f f8       	sub	r8,-1
80006718:	a3 78       	lsl	r8,0x3
8000671a:	f4 08 00 08 	add	r8,r10,r8
8000671e:	30 0a       	mov	r10,0
80006720:	30 0b       	mov	r11,0
80006722:	f0 eb 0b 5c 	st.d	r8[2908],r10
	
	centralData->estimation.state[axis][BIAIS] = centralData->imu1.attitude.be[axis + ACC_OFFSET];
80006726:	ec f8 00 00 	ld.w	r8,r6[0]
8000672a:	70 03       	ld.w	r3,r8[0x0]
8000672c:	ee f5 ff f4 	ld.w	r5,r7[-12]
80006730:	ec f8 00 00 	ld.w	r8,r6[0]
80006734:	70 08       	ld.w	r8,r8[0x0]
80006736:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000673a:	2f d9       	sub	r9,-3
8000673c:	2f 49       	sub	r9,-12
8000673e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80006742:	10 9c       	mov	r12,r8
80006744:	f0 16 00 02 	mcall	r6[8]
80006748:	0a 98       	mov	r8,r5
8000674a:	a1 78       	lsl	r8,0x1
8000674c:	0a 08       	add	r8,r5
8000674e:	a3 78       	lsl	r8,0x3
80006750:	e6 08 00 08 	add	r8,r3,r8
80006754:	f0 c8 f4 94 	sub	r8,r8,-2924
80006758:	f0 eb 00 00 	st.d	r8[0],r10
	
	for (i=0; i<3; i++)
8000675c:	30 08       	mov	r8,0
8000675e:	ef 48 ff f8 	st.w	r7[-8],r8
80006762:	c6 e8       	rjmp	8000683e <e_kalman_init+0x16e>
	{
		for (j=0; j<3; j++)
80006764:	30 08       	mov	r8,0
80006766:	ef 48 ff fc 	st.w	r7[-4],r8
8000676a:	c3 28       	rjmp	800067ce <e_kalman_init+0xfe>
		{
			P[axis][i][j] = 0.0;
8000676c:	ee fa ff f4 	ld.w	r10,r7[-12]
80006770:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006774:	ee fc ff fc 	ld.w	r12,r7[-4]
80006778:	ec fb 00 18 	ld.w	r11,r6[24]
8000677c:	10 99       	mov	r9,r8
8000677e:	a1 79       	lsl	r9,0x1
80006780:	10 09       	add	r9,r8
80006782:	14 98       	mov	r8,r10
80006784:	a3 78       	lsl	r8,0x3
80006786:	14 08       	add	r8,r10
80006788:	f2 08 00 08 	add	r8,r9,r8
8000678c:	f0 0c 00 0a 	add	r10,r8,r12
80006790:	30 08       	mov	r8,0
80006792:	30 09       	mov	r9,0
80006794:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
			P2[axis][i][j] = 0.0;
80006798:	ee fa ff f4 	ld.w	r10,r7[-12]
8000679c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800067a0:	ee fc ff fc 	ld.w	r12,r7[-4]
800067a4:	ec fb 00 1c 	ld.w	r11,r6[28]
800067a8:	10 99       	mov	r9,r8
800067aa:	a1 79       	lsl	r9,0x1
800067ac:	10 09       	add	r9,r8
800067ae:	14 98       	mov	r8,r10
800067b0:	a3 78       	lsl	r8,0x3
800067b2:	14 08       	add	r8,r10
800067b4:	f2 08 00 08 	add	r8,r9,r8
800067b8:	f0 0c 00 0a 	add	r10,r8,r12
800067bc:	30 08       	mov	r8,0
800067be:	30 09       	mov	r9,0
800067c0:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
	
	centralData->estimation.state[axis][BIAIS] = centralData->imu1.attitude.be[axis + ACC_OFFSET];
	
	for (i=0; i<3; i++)
	{
		for (j=0; j<3; j++)
800067c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800067c8:	2f f8       	sub	r8,-1
800067ca:	ef 48 ff fc 	st.w	r7[-4],r8
800067ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800067d2:	58 28       	cp.w	r8,2
800067d4:	fe 9a ff cc 	brle	8000676c <e_kalman_init+0x9c>
		{
			P[axis][i][j] = 0.0;
			P2[axis][i][j] = 0.0;
		}
		P[axis][i][i] = init_p;
800067d8:	ee f5 ff f4 	ld.w	r5,r7[-12]
800067dc:	ee f3 ff f8 	ld.w	r3,r7[-8]
800067e0:	ee f2 ff f8 	ld.w	r2,r7[-8]
800067e4:	ee fc ff f0 	ld.w	r12,r7[-16]
800067e8:	f0 16 00 02 	mcall	r6[8]
800067ec:	ec fc 00 18 	ld.w	r12,r6[24]
800067f0:	06 99       	mov	r9,r3
800067f2:	a1 79       	lsl	r9,0x1
800067f4:	06 09       	add	r9,r3
800067f6:	0a 98       	mov	r8,r5
800067f8:	a3 78       	lsl	r8,0x3
800067fa:	0a 08       	add	r8,r5
800067fc:	f2 08 00 08 	add	r8,r9,r8
80006800:	04 08       	add	r8,r2
80006802:	f8 08 08 3a 	st.d	r12[r8<<0x3],r10
		P2[axis][i][i] = init_p;
80006806:	ee f5 ff f4 	ld.w	r5,r7[-12]
8000680a:	ee f3 ff f8 	ld.w	r3,r7[-8]
8000680e:	ee f2 ff f8 	ld.w	r2,r7[-8]
80006812:	ee fc ff f0 	ld.w	r12,r7[-16]
80006816:	f0 16 00 02 	mcall	r6[8]
8000681a:	ec fc 00 1c 	ld.w	r12,r6[28]
8000681e:	06 99       	mov	r9,r3
80006820:	a1 79       	lsl	r9,0x1
80006822:	06 09       	add	r9,r3
80006824:	0a 98       	mov	r8,r5
80006826:	a3 78       	lsl	r8,0x3
80006828:	0a 08       	add	r8,r5
8000682a:	f2 08 00 08 	add	r8,r9,r8
8000682e:	04 08       	add	r8,r2
80006830:	f8 08 08 3a 	st.d	r12[r8<<0x3],r10
	centralData->estimation.state[axis][POSITION] = 0; // Differential par rapport au point de depart
	centralData->estimation.state[axis][SPEED] = 0;
	
	centralData->estimation.state[axis][BIAIS] = centralData->imu1.attitude.be[axis + ACC_OFFSET];
	
	for (i=0; i<3; i++)
80006834:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006838:	2f f8       	sub	r8,-1
8000683a:	ef 48 ff f8 	st.w	r7[-8],r8
8000683e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006842:	58 28       	cp.w	r8,2
80006844:	fe 9a ff 90 	brle	80006764 <e_kalman_init+0x94>
			P2[axis][i][j] = 0.0;
		}
		P[axis][i][i] = init_p;
		P2[axis][i][i] = init_p;
	}
}
80006848:	2f cd       	sub	sp,-16
8000684a:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000684e:	00 00       	add	r0,r0
80006850:	80 00       	ld.sh	r0,r0[0x0]
80006852:	65 5e       	ld.w	lr,r2[0x54]

80006854 <e_predict>:

//------------------------------PREDICTION--------------------------
void e_predict (UQuat_t *qe, float a[], float dt)
{
80006854:	eb cd 40 c0 	pushm	r6-r7,lr
80006858:	1a 97       	mov	r7,sp
8000685a:	21 9d       	sub	sp,100
8000685c:	fe f6 03 00 	ld.w	r6,pc[768]
80006860:	1e 26       	rsub	r6,pc
80006862:	ef 4c ff a4 	st.w	r7[-92],r12
80006866:	ef 4b ff a0 	st.w	r7[-96],r11
8000686a:	ef 4a ff 9c 	st.w	r7[-100],r10
	//MUL_V_SCA(z,-a[2])
	//e_kalman_predict(X,(x[0]*x[0]+y[0]*y[0]+z[0]*z[0]),dt);//final x (in NED) acc
	//e_kalman_predict(Y,(x[1]*x[1]+y[1]*y[1]+z[1]*z[1]),dt);
	//e_kalman_predict(Z,(x[2]*x[2]+y[2]*y[2]+z[2]*z[2]),dt);
	
	qe_tmp = *qe;
8000686e:	ee f9 ff a4 	ld.w	r9,r7[-92]
80006872:	ee c8 00 40 	sub	r8,r7,64
80006876:	20 08       	sub	r8,0
80006878:	20 09       	sub	r9,0
8000687a:	72 0a       	ld.w	r10,r9[0x0]
8000687c:	91 0a       	st.w	r8[0x0],r10
8000687e:	72 1a       	ld.w	r10,r9[0x4]
80006880:	91 1a       	st.w	r8[0x4],r10
80006882:	72 2a       	ld.w	r10,r9[0x8]
80006884:	91 2a       	st.w	r8[0x8],r10
80006886:	72 39       	ld.w	r9,r9[0xc]
80006888:	91 39       	st.w	r8[0xc],r9
	
	// compute acceleration in global frame
	// acc_glo = qe * acc_bf * qe-1
	qtmp1.s=0.0; qtmp1.v[0]=a[0]; qtmp1.v[1]=a[1];qtmp1.v[2]=a[2];
8000688a:	30 08       	mov	r8,0
8000688c:	ef 48 ff f0 	st.w	r7[-16],r8
80006890:	ee f8 ff a0 	ld.w	r8,r7[-96]
80006894:	70 08       	ld.w	r8,r8[0x0]
80006896:	ef 48 ff f4 	st.w	r7[-12],r8
8000689a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000689e:	2f c8       	sub	r8,-4
800068a0:	70 08       	ld.w	r8,r8[0x0]
800068a2:	ef 48 ff f8 	st.w	r7[-8],r8
800068a6:	ee f8 ff a0 	ld.w	r8,r7[-96]
800068aa:	2f 88       	sub	r8,-8
800068ac:	70 08       	ld.w	r8,r8[0x0]
800068ae:	ef 48 ff fc 	st.w	r7[-4],r8
	QMUL(qe_tmp,qtmp1,qtmp2);
800068b2:	ee f9 ff c8 	ld.w	r9,r7[-56]
800068b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800068ba:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800068be:	ee fa ff cc 	ld.w	r10,r7[-52]
800068c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800068c6:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800068ca:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800068ce:	ef 48 ff b4 	st.w	r7[-76],r8
800068d2:	ee f9 ff cc 	ld.w	r9,r7[-52]
800068d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800068da:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800068de:	ee fa ff c4 	ld.w	r10,r7[-60]
800068e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800068e6:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800068ea:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800068ee:	ef 48 ff b8 	st.w	r7[-72],r8
800068f2:	ee f9 ff c4 	ld.w	r9,r7[-60]
800068f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800068fa:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800068fe:	ee fa ff c8 	ld.w	r10,r7[-56]
80006902:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006906:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000690a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000690e:	ef 48 ff bc 	st.w	r7[-68],r8
80006912:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006916:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000691a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000691e:	ee fa ff c0 	ld.w	r10,r7[-64]
80006922:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006926:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000692a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000692e:	ee f8 ff b4 	ld.w	r8,r7[-76]
80006932:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006936:	ef 48 ff e4 	st.w	r7[-28],r8
8000693a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000693e:	ee f8 ff c8 	ld.w	r8,r7[-56]
80006942:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006946:	ee fa ff c0 	ld.w	r10,r7[-64]
8000694a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000694e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006952:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006956:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000695a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000695e:	ef 48 ff e8 	st.w	r7[-24],r8
80006962:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006966:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000696a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000696e:	ee fa ff c0 	ld.w	r10,r7[-64]
80006972:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006976:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000697a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000697e:	ee f8 ff bc 	ld.w	r8,r7[-68]
80006982:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006986:	ef 48 ff ec 	st.w	r7[-20],r8
8000698a:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000698e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006992:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006996:	ee fa ff c4 	ld.w	r10,r7[-60]
8000699a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000699e:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
800069a2:	ee fb ff c8 	ld.w	r11,r7[-56]
800069a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800069aa:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
800069ae:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
800069b2:	ee fb ff cc 	ld.w	r11,r7[-52]
800069b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800069ba:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
800069be:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
800069c2:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800069c6:	ef 48 ff e0 	st.w	r7[-32],r8
	QI(qe_tmp,qtmp1);
800069ca:	ee f8 ff c0 	ld.w	r8,r7[-64]
800069ce:	ef 48 ff f0 	st.w	r7[-16],r8
800069d2:	ee f8 ff c4 	ld.w	r8,r7[-60]
800069d6:	ee 18 80 00 	eorh	r8,0x8000
800069da:	ef 48 ff f4 	st.w	r7[-12],r8
800069de:	ee f8 ff c8 	ld.w	r8,r7[-56]
800069e2:	ee 18 80 00 	eorh	r8,0x8000
800069e6:	ef 48 ff f8 	st.w	r7[-8],r8
800069ea:	ee f8 ff cc 	ld.w	r8,r7[-52]
800069ee:	ee 18 80 00 	eorh	r8,0x8000
800069f2:	ef 48 ff fc 	st.w	r7[-4],r8
	QMUL(qtmp2,qtmp1,qtmp3);
800069f6:	ee f9 ff e8 	ld.w	r9,r7[-24]
800069fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800069fe:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006a02:	ee fa ff ec 	ld.w	r10,r7[-20]
80006a06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006a0a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006a0e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006a12:	ef 48 ff b4 	st.w	r7[-76],r8
80006a16:	ee f9 ff ec 	ld.w	r9,r7[-20]
80006a1a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006a1e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006a22:	ee fa ff e4 	ld.w	r10,r7[-28]
80006a26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006a2a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006a2e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006a32:	ef 48 ff b8 	st.w	r7[-72],r8
80006a36:	ee f9 ff e4 	ld.w	r9,r7[-28]
80006a3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006a3e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006a42:	ee fa ff e8 	ld.w	r10,r7[-24]
80006a46:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006a4a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006a4e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006a52:	ef 48 ff bc 	st.w	r7[-68],r8
80006a56:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006a5a:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006a5e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006a62:	ee fa ff e0 	ld.w	r10,r7[-32]
80006a66:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006a6a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006a6e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006a72:	ee f8 ff b4 	ld.w	r8,r7[-76]
80006a76:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006a7a:	ef 48 ff d4 	st.w	r7[-44],r8
80006a7e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006a82:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006a86:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006a8a:	ee fa ff e0 	ld.w	r10,r7[-32]
80006a8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006a92:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006a96:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006a9a:	ee f8 ff b8 	ld.w	r8,r7[-72]
80006a9e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006aa2:	ef 48 ff d8 	st.w	r7[-40],r8
80006aa6:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006aaa:	ee f8 ff ec 	ld.w	r8,r7[-20]
80006aae:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006ab2:	ee fa ff e0 	ld.w	r10,r7[-32]
80006ab6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006aba:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006abe:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006ac2:	ee f8 ff bc 	ld.w	r8,r7[-68]
80006ac6:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006aca:	ef 48 ff dc 	st.w	r7[-36],r8
80006ace:	ee f9 ff e0 	ld.w	r9,r7[-32]
80006ad2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006ad6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006ada:	ee fa ff e4 	ld.w	r10,r7[-28]
80006ade:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006ae2:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80006ae6:	ee fb ff e8 	ld.w	r11,r7[-24]
80006aea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006aee:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80006af2:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
80006af6:	ee fb ff ec 	ld.w	r11,r7[-20]
80006afa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006afe:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80006b02:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80006b06:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006b0a:	ef 48 ff d0 	st.w	r7[-48],r8
	acc_glo[0]=qtmp3.v[0];acc_glo[1]=qtmp3.v[1];acc_glo[2]=qtmp3.v[2];
80006b0e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80006b12:	ef 48 ff a8 	st.w	r7[-88],r8
80006b16:	ee f8 ff d8 	ld.w	r8,r7[-40]
80006b1a:	ef 48 ff ac 	st.w	r7[-84],r8
80006b1e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80006b22:	ef 48 ff b0 	st.w	r7[-80],r8
	//dbg_print_num(centralData->imu1.attitude.a[X]*1000,10);
	//dbg_print_num(centralData->imu1.attitude.a[Y]*1000,10);
	//dbg_print_num(centralData->imu1.attitude.a[Z]*1000,10);
	//dbg_print("\n");

	e_kalman_predict(X,acc_glo[X],dt);//final x (in NED) acc
80006b26:	ee f8 ff a8 	ld.w	r8,r7[-88]
80006b2a:	ee fa ff 9c 	ld.w	r10,r7[-100]
80006b2e:	10 9b       	mov	r11,r8
80006b30:	30 0c       	mov	r12,0
80006b32:	f0 16 00 c8 	mcall	r6[800]
	e_kalman_predict(Y,acc_glo[Y],dt);
80006b36:	ee f8 ff ac 	ld.w	r8,r7[-84]
80006b3a:	ee fa ff 9c 	ld.w	r10,r7[-100]
80006b3e:	10 9b       	mov	r11,r8
80006b40:	30 1c       	mov	r12,1
80006b42:	f0 16 00 c8 	mcall	r6[800]
	//e_kalman_predict_hf(X,acc_glo[X],dt);//final x (in NED) acc
	//e_kalman_predict_hf(Y,acc_glo[Y],dt);
	e_kalman_predict(Z,acc_glo[Z],dt);
80006b46:	ee f8 ff b0 	ld.w	r8,r7[-80]
80006b4a:	ee fa ff 9c 	ld.w	r10,r7[-100]
80006b4e:	10 9b       	mov	r11,r8
80006b50:	30 2c       	mov	r12,2
80006b52:	f0 16 00 c8 	mcall	r6[800]
}
80006b56:	2e 7d       	sub	sp,-100
80006b58:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006b5c:	80 00       	ld.sh	r0,r0[0x0]
80006b5e:	66 e4       	ld.w	r4,r3[0x38]

80006b60 <quat_rot>:

//Rotation of vector vect with the quaternion quat
void quat_rot(UQuat_t *quat,float *vect)
{
80006b60:	eb cd 40 80 	pushm	r7,lr
80006b64:	1a 97       	mov	r7,sp
80006b66:	20 8d       	sub	sp,32
80006b68:	ef 4c ff e4 	st.w	r7[-28],r12
80006b6c:	ef 4b ff e0 	st.w	r7[-32],r11
	float temp1[3],temp2[3];
	CP((*quat).v,vect,temp1);
80006b70:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006b74:	70 29       	ld.w	r9,r8[0x8]
80006b76:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006b7a:	2f 88       	sub	r8,-8
80006b7c:	70 08       	ld.w	r8,r8[0x0]
80006b7e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006b82:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006b86:	70 3a       	ld.w	r10,r8[0xc]
80006b88:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006b8c:	2f c8       	sub	r8,-4
80006b8e:	70 08       	ld.w	r8,r8[0x0]
80006b90:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006b94:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006b98:	ef 48 ff f4 	st.w	r7[-12],r8
80006b9c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006ba0:	70 39       	ld.w	r9,r8[0xc]
80006ba2:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006ba6:	70 08       	ld.w	r8,r8[0x0]
80006ba8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006bac:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006bb0:	70 1a       	ld.w	r10,r8[0x4]
80006bb2:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006bb6:	2f 88       	sub	r8,-8
80006bb8:	70 08       	ld.w	r8,r8[0x0]
80006bba:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006bbe:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006bc2:	ef 48 ff f8 	st.w	r7[-8],r8
80006bc6:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006bca:	70 19       	ld.w	r9,r8[0x4]
80006bcc:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006bd0:	2f c8       	sub	r8,-4
80006bd2:	70 08       	ld.w	r8,r8[0x0]
80006bd4:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006bd8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006bdc:	70 2a       	ld.w	r10,r8[0x8]
80006bde:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006be2:	70 08       	ld.w	r8,r8[0x0]
80006be4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006be8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006bec:	ef 48 ff fc 	st.w	r7[-4],r8
	temp1[0]=temp1[0]+(*quat).s*vect[0];
80006bf0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006bf4:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006bf8:	70 0a       	ld.w	r10,r8[0x0]
80006bfa:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006bfe:	70 08       	ld.w	r8,r8[0x0]
80006c00:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006c04:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006c08:	ef 48 ff f4 	st.w	r7[-12],r8
	temp1[1]=temp1[1]+(*quat).s*vect[1];
80006c0c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006c10:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006c14:	70 0a       	ld.w	r10,r8[0x0]
80006c16:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006c1a:	2f c8       	sub	r8,-4
80006c1c:	70 08       	ld.w	r8,r8[0x0]
80006c1e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006c22:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006c26:	ef 48 ff f8 	st.w	r7[-8],r8
	temp1[2]=temp1[2]+(*quat).s*vect[2];
80006c2a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80006c2e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006c32:	70 0a       	ld.w	r10,r8[0x0]
80006c34:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006c38:	2f 88       	sub	r8,-8
80006c3a:	70 08       	ld.w	r8,r8[0x0]
80006c3c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006c40:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006c44:	ef 48 ff fc 	st.w	r7[-4],r8
	CP((*quat).v,temp1,temp2);
80006c48:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006c4c:	70 29       	ld.w	r9,r8[0x8]
80006c4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006c52:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006c56:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006c5a:	70 3a       	ld.w	r10,r8[0xc]
80006c5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006c60:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006c64:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006c68:	ef 48 ff e8 	st.w	r7[-24],r8
80006c6c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006c70:	70 39       	ld.w	r9,r8[0xc]
80006c72:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006c76:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006c7a:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006c7e:	70 1a       	ld.w	r10,r8[0x4]
80006c80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006c84:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006c88:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006c8c:	ef 48 ff ec 	st.w	r7[-20],r8
80006c90:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006c94:	70 19       	ld.w	r9,r8[0x4]
80006c96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006c9a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006c9e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006ca2:	70 2a       	ld.w	r10,r8[0x8]
80006ca4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006ca8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006cac:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006cb0:	ef 48 ff f0 	st.w	r7[-16],r8
	vect[0]= vect[0]+temp2[0]+temp2[0];
80006cb4:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006cb8:	70 09       	ld.w	r9,r8[0x0]
80006cba:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006cbe:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006cc2:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006cc6:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006cca:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006cce:	91 09       	st.w	r8[0x0],r9
	vect[1]= vect[1]+temp2[1]+temp2[1];
80006cd0:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006cd4:	2f c8       	sub	r8,-4
80006cd6:	ee f9 ff e0 	ld.w	r9,r7[-32]
80006cda:	2f c9       	sub	r9,-4
80006cdc:	72 0a       	ld.w	r10,r9[0x0]
80006cde:	ee f9 ff ec 	ld.w	r9,r7[-20]
80006ce2:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80006ce6:	ee f9 ff ec 	ld.w	r9,r7[-20]
80006cea:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80006cee:	91 09       	st.w	r8[0x0],r9
	vect[2]= vect[2]+temp2[2]+temp2[2];
80006cf0:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006cf4:	2f 88       	sub	r8,-8
80006cf6:	ee f9 ff e0 	ld.w	r9,r7[-32]
80006cfa:	2f 89       	sub	r9,-8
80006cfc:	72 0a       	ld.w	r10,r9[0x0]
80006cfe:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006d02:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80006d06:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006d0a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80006d0e:	91 09       	st.w	r8[0x0],r9
}
80006d10:	2f 8d       	sub	sp,-32
80006d12:	e3 cd 80 80 	ldm	sp++,r7,pc

80006d16 <e_kalman_predict>:

Pk1 = F * Pk0 * F' + Q;

*/
void e_kalman_predict (int axis, float accel_meas, float dt)
{
80006d16:	d4 31       	pushm	r0-r7,lr
80006d18:	1a 97       	mov	r7,sp
80006d1a:	fa cd 00 cc 	sub	sp,sp,204
80006d1e:	fe f6 0d 02 	ld.w	r6,pc[3330]
80006d22:	1e 26       	rsub	r6,pc
80006d24:	ef 4c ff ac 	st.w	r7[-84],r12
80006d28:	ef 4b ff a8 	st.w	r7[-88],r11
80006d2c:	ef 4a ff a4 	st.w	r7[-92],r10
	/* update state */

	//centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED]*(1.0-(VEL_DECAY*dt)) + dt * accel_meas;
	//centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION]*(1.0-(POS_DECAY*dt)) + dt * centralData->estimation.state[axis][SPEED];
	
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + dt * accel_meas;
80006d30:	ec f8 00 00 	ld.w	r8,r6[0]
80006d34:	70 01       	ld.w	r1,r8[0x0]
80006d36:	ee f5 ff ac 	ld.w	r5,r7[-84]
80006d3a:	ec f8 00 00 	ld.w	r8,r6[0]
80006d3e:	70 0a       	ld.w	r10,r8[0x0]
80006d40:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006d44:	12 98       	mov	r8,r9
80006d46:	a1 78       	lsl	r8,0x1
80006d48:	12 08       	add	r8,r9
80006d4a:	2f f8       	sub	r8,-1
80006d4c:	a3 78       	lsl	r8,0x3
80006d4e:	f4 08 00 08 	add	r8,r10,r8
80006d52:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
80006d56:	ee f9 ff a4 	ld.w	r9,r7[-92]
80006d5a:	ee f8 ff a8 	ld.w	r8,r7[-88]
80006d5e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80006d62:	10 9c       	mov	r12,r8
80006d64:	f0 16 00 02 	mcall	r6[8]
80006d68:	14 98       	mov	r8,r10
80006d6a:	16 99       	mov	r9,r11
80006d6c:	04 9a       	mov	r10,r2
80006d6e:	06 9b       	mov	r11,r3
80006d70:	f0 16 00 05 	mcall	r6[20]
80006d74:	14 98       	mov	r8,r10
80006d76:	16 99       	mov	r9,r11
80006d78:	10 9a       	mov	r10,r8
80006d7a:	12 9b       	mov	r11,r9
80006d7c:	0a 98       	mov	r8,r5
80006d7e:	a1 78       	lsl	r8,0x1
80006d80:	0a 08       	add	r8,r5
80006d82:	2f f8       	sub	r8,-1
80006d84:	a3 78       	lsl	r8,0x3
80006d86:	e2 08 00 08 	add	r8,r1,r8
80006d8a:	f0 eb 0b 5c 	st.d	r8[2908],r10
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + dt * centralData->estimation.state[axis][SPEED];
80006d8e:	ec f8 00 00 	ld.w	r8,r6[0]
80006d92:	70 01       	ld.w	r1,r8[0x0]
80006d94:	ee f5 ff ac 	ld.w	r5,r7[-84]
80006d98:	ec f8 00 00 	ld.w	r8,r6[0]
80006d9c:	70 0a       	ld.w	r10,r8[0x0]
80006d9e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006da2:	12 98       	mov	r8,r9
80006da4:	a1 78       	lsl	r8,0x1
80006da6:	12 08       	add	r8,r9
80006da8:	a3 78       	lsl	r8,0x3
80006daa:	f4 08 00 08 	add	r8,r10,r8
80006dae:	f0 c8 f4 a4 	sub	r8,r8,-2908
80006db2:	f0 e2 00 00 	ld.d	r2,r8[0]
80006db6:	ee fc ff a4 	ld.w	r12,r7[-92]
80006dba:	f0 16 00 02 	mcall	r6[8]
80006dbe:	ec f8 00 00 	ld.w	r8,r6[0]
80006dc2:	70 0c       	ld.w	r12,r8[0x0]
80006dc4:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006dc8:	12 98       	mov	r8,r9
80006dca:	a1 78       	lsl	r8,0x1
80006dcc:	12 08       	add	r8,r9
80006dce:	2f f8       	sub	r8,-1
80006dd0:	a3 78       	lsl	r8,0x3
80006dd2:	f8 08 00 08 	add	r8,r12,r8
80006dd6:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
80006dda:	f0 16 00 03 	mcall	r6[12]
80006dde:	14 98       	mov	r8,r10
80006de0:	16 99       	mov	r9,r11
80006de2:	04 9a       	mov	r10,r2
80006de4:	06 9b       	mov	r11,r3
80006de6:	f0 16 00 05 	mcall	r6[20]
80006dea:	14 98       	mov	r8,r10
80006dec:	16 99       	mov	r9,r11
80006dee:	10 9a       	mov	r10,r8
80006df0:	12 9b       	mov	r11,r9
80006df2:	0a 98       	mov	r8,r5
80006df4:	a1 78       	lsl	r8,0x1
80006df6:	0a 08       	add	r8,r5
80006df8:	a3 78       	lsl	r8,0x3
80006dfa:	e2 08 00 08 	add	r8,r1,r8
80006dfe:	f0 c8 f4 a4 	sub	r8,r8,-2908
80006e02:	f0 eb 00 00 	st.d	r8[0],r10
	//centralData->estimation.state[axis][SPEED] = centralData->position_estimator.vel[axis];
	
	
	/* update covariance */
	// F*P*F' calculation
	FPF00 = P[axis][0][0] + dt * ( P[axis][1][0] + P[axis][0][1] + dt * P[axis][1][1] );
80006e06:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006e0a:	ec fa 00 18 	ld.w	r10,r6[24]
80006e0e:	12 98       	mov	r8,r9
80006e10:	a3 78       	lsl	r8,0x3
80006e12:	12 08       	add	r8,r9
80006e14:	a3 78       	lsl	r8,0x3
80006e16:	f4 08 00 08 	add	r8,r10,r8
80006e1a:	f0 ea 00 00 	ld.d	r10,r8[0]
80006e1e:	ee eb ff 34 	st.d	r7[-204],r10
80006e22:	ee fc ff a4 	ld.w	r12,r7[-92]
80006e26:	f0 16 00 02 	mcall	r6[8]
80006e2a:	14 90       	mov	r0,r10
80006e2c:	16 91       	mov	r1,r11
80006e2e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006e32:	ec fa 00 18 	ld.w	r10,r6[24]
80006e36:	12 98       	mov	r8,r9
80006e38:	a3 78       	lsl	r8,0x3
80006e3a:	12 08       	add	r8,r9
80006e3c:	a3 78       	lsl	r8,0x3
80006e3e:	f4 08 00 08 	add	r8,r10,r8
80006e42:	2e 88       	sub	r8,-24
80006e44:	f0 ea 00 00 	ld.d	r10,r8[0]
80006e48:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006e4c:	ec fc 00 18 	ld.w	r12,r6[24]
80006e50:	12 98       	mov	r8,r9
80006e52:	a3 78       	lsl	r8,0x3
80006e54:	12 08       	add	r8,r9
80006e56:	2f f8       	sub	r8,-1
80006e58:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80006e5c:	f0 16 00 05 	mcall	r6[20]
80006e60:	14 98       	mov	r8,r10
80006e62:	16 99       	mov	r9,r11
80006e64:	10 92       	mov	r2,r8
80006e66:	12 93       	mov	r3,r9
80006e68:	ee fc ff a4 	ld.w	r12,r7[-92]
80006e6c:	f0 16 00 02 	mcall	r6[8]
80006e70:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006e74:	ec fc 00 18 	ld.w	r12,r6[24]
80006e78:	12 98       	mov	r8,r9
80006e7a:	a3 78       	lsl	r8,0x3
80006e7c:	12 08       	add	r8,r9
80006e7e:	a3 78       	lsl	r8,0x3
80006e80:	f8 08 00 08 	add	r8,r12,r8
80006e84:	2e 08       	sub	r8,-32
80006e86:	f0 e8 00 00 	ld.d	r8,r8[0]
80006e8a:	f0 16 00 03 	mcall	r6[12]
80006e8e:	14 98       	mov	r8,r10
80006e90:	16 99       	mov	r9,r11
80006e92:	04 9a       	mov	r10,r2
80006e94:	06 9b       	mov	r11,r3
80006e96:	f0 16 00 05 	mcall	r6[20]
80006e9a:	14 98       	mov	r8,r10
80006e9c:	16 99       	mov	r9,r11
80006e9e:	00 9a       	mov	r10,r0
80006ea0:	02 9b       	mov	r11,r1
80006ea2:	f0 16 00 03 	mcall	r6[12]
80006ea6:	14 98       	mov	r8,r10
80006ea8:	16 99       	mov	r9,r11
80006eaa:	ee ea ff 34 	ld.d	r10,r7[-204]
80006eae:	f0 16 00 05 	mcall	r6[20]
80006eb2:	14 98       	mov	r8,r10
80006eb4:	16 99       	mov	r9,r11
80006eb6:	ee e9 ff b8 	st.d	r7[-72],r8
	FPF01 = P[axis][0][1] + dt * ( P[axis][1][1] - P[axis][0][2] - dt * P[axis][1][2] );
80006eba:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006ebe:	ec fa 00 18 	ld.w	r10,r6[24]
80006ec2:	12 98       	mov	r8,r9
80006ec4:	a3 78       	lsl	r8,0x3
80006ec6:	12 08       	add	r8,r9
80006ec8:	2f f8       	sub	r8,-1
80006eca:	f4 08 02 34 	ld.d	r4,r10[r8<<0x3]
80006ece:	ee e5 ff 3c 	st.d	r7[-196],r4
80006ed2:	ee fc ff a4 	ld.w	r12,r7[-92]
80006ed6:	f0 16 00 02 	mcall	r6[8]
80006eda:	14 90       	mov	r0,r10
80006edc:	16 91       	mov	r1,r11
80006ede:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006ee2:	ec fa 00 18 	ld.w	r10,r6[24]
80006ee6:	12 98       	mov	r8,r9
80006ee8:	a3 78       	lsl	r8,0x3
80006eea:	12 08       	add	r8,r9
80006eec:	a3 78       	lsl	r8,0x3
80006eee:	f4 08 00 08 	add	r8,r10,r8
80006ef2:	2e 08       	sub	r8,-32
80006ef4:	f0 ea 00 00 	ld.d	r10,r8[0]
80006ef8:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006efc:	ec fc 00 18 	ld.w	r12,r6[24]
80006f00:	12 98       	mov	r8,r9
80006f02:	a3 78       	lsl	r8,0x3
80006f04:	12 08       	add	r8,r9
80006f06:	a3 78       	lsl	r8,0x3
80006f08:	f8 08 00 08 	add	r8,r12,r8
80006f0c:	2f 08       	sub	r8,-16
80006f0e:	f0 e8 00 00 	ld.d	r8,r8[0]
80006f12:	f0 16 00 11 	mcall	r6[68]
80006f16:	14 98       	mov	r8,r10
80006f18:	16 99       	mov	r9,r11
80006f1a:	10 92       	mov	r2,r8
80006f1c:	12 93       	mov	r3,r9
80006f1e:	ee fc ff a4 	ld.w	r12,r7[-92]
80006f22:	f0 16 00 02 	mcall	r6[8]
80006f26:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006f2a:	ec fc 00 18 	ld.w	r12,r6[24]
80006f2e:	12 98       	mov	r8,r9
80006f30:	a3 78       	lsl	r8,0x3
80006f32:	12 08       	add	r8,r9
80006f34:	a3 78       	lsl	r8,0x3
80006f36:	f8 08 00 08 	add	r8,r12,r8
80006f3a:	2d 88       	sub	r8,-40
80006f3c:	f0 e8 00 00 	ld.d	r8,r8[0]
80006f40:	f0 16 00 03 	mcall	r6[12]
80006f44:	14 98       	mov	r8,r10
80006f46:	16 99       	mov	r9,r11
80006f48:	04 9a       	mov	r10,r2
80006f4a:	06 9b       	mov	r11,r3
80006f4c:	f0 16 00 11 	mcall	r6[68]
80006f50:	14 98       	mov	r8,r10
80006f52:	16 99       	mov	r9,r11
80006f54:	00 9a       	mov	r10,r0
80006f56:	02 9b       	mov	r11,r1
80006f58:	f0 16 00 03 	mcall	r6[12]
80006f5c:	14 98       	mov	r8,r10
80006f5e:	16 99       	mov	r9,r11
80006f60:	ee ea ff 3c 	ld.d	r10,r7[-196]
80006f64:	f0 16 00 05 	mcall	r6[20]
80006f68:	14 98       	mov	r8,r10
80006f6a:	16 99       	mov	r9,r11
80006f6c:	ee e9 ff c0 	st.d	r7[-64],r8
	FPF02 = P[axis][0][2] + dt * ( P[axis][1][2] );
80006f70:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006f74:	ec fa 00 18 	ld.w	r10,r6[24]
80006f78:	12 98       	mov	r8,r9
80006f7a:	a3 78       	lsl	r8,0x3
80006f7c:	12 08       	add	r8,r9
80006f7e:	a3 78       	lsl	r8,0x3
80006f80:	f4 08 00 08 	add	r8,r10,r8
80006f84:	2f 08       	sub	r8,-16
80006f86:	f0 e2 00 00 	ld.d	r2,r8[0]
80006f8a:	ee fc ff a4 	ld.w	r12,r7[-92]
80006f8e:	f0 16 00 02 	mcall	r6[8]
80006f92:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006f96:	ec fc 00 18 	ld.w	r12,r6[24]
80006f9a:	12 98       	mov	r8,r9
80006f9c:	a3 78       	lsl	r8,0x3
80006f9e:	12 08       	add	r8,r9
80006fa0:	a3 78       	lsl	r8,0x3
80006fa2:	f8 08 00 08 	add	r8,r12,r8
80006fa6:	2d 88       	sub	r8,-40
80006fa8:	f0 e8 00 00 	ld.d	r8,r8[0]
80006fac:	f0 16 00 03 	mcall	r6[12]
80006fb0:	14 98       	mov	r8,r10
80006fb2:	16 99       	mov	r9,r11
80006fb4:	04 9a       	mov	r10,r2
80006fb6:	06 9b       	mov	r11,r3
80006fb8:	f0 16 00 05 	mcall	r6[20]
80006fbc:	14 98       	mov	r8,r10
80006fbe:	16 99       	mov	r9,r11
80006fc0:	ee e9 ff c8 	st.d	r7[-56],r8
	FPF10 = P[axis][1][0] + dt * (-P[axis][2][0] + P[axis][1][1] - dt * P[axis][2][1] );
80006fc4:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006fc8:	ec fa 00 18 	ld.w	r10,r6[24]
80006fcc:	12 98       	mov	r8,r9
80006fce:	a3 78       	lsl	r8,0x3
80006fd0:	12 08       	add	r8,r9
80006fd2:	a3 78       	lsl	r8,0x3
80006fd4:	f4 08 00 08 	add	r8,r10,r8
80006fd8:	2e 88       	sub	r8,-24
80006fda:	f0 ea 00 00 	ld.d	r10,r8[0]
80006fde:	ee eb ff 44 	st.d	r7[-188],r10
80006fe2:	ee fc ff a4 	ld.w	r12,r7[-92]
80006fe6:	f0 16 00 02 	mcall	r6[8]
80006fea:	14 90       	mov	r0,r10
80006fec:	16 91       	mov	r1,r11
80006fee:	ee f9 ff ac 	ld.w	r9,r7[-84]
80006ff2:	ec fa 00 18 	ld.w	r10,r6[24]
80006ff6:	12 98       	mov	r8,r9
80006ff8:	a3 78       	lsl	r8,0x3
80006ffa:	12 08       	add	r8,r9
80006ffc:	a3 78       	lsl	r8,0x3
80006ffe:	f4 08 00 08 	add	r8,r10,r8
80007002:	2e 08       	sub	r8,-32
80007004:	f0 ea 00 00 	ld.d	r10,r8[0]
80007008:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000700c:	ec fc 00 18 	ld.w	r12,r6[24]
80007010:	12 98       	mov	r8,r9
80007012:	a3 78       	lsl	r8,0x3
80007014:	12 08       	add	r8,r9
80007016:	a3 78       	lsl	r8,0x3
80007018:	f8 08 00 08 	add	r8,r12,r8
8000701c:	2d 08       	sub	r8,-48
8000701e:	f0 e8 00 00 	ld.d	r8,r8[0]
80007022:	f0 16 00 11 	mcall	r6[68]
80007026:	14 98       	mov	r8,r10
80007028:	16 99       	mov	r9,r11
8000702a:	10 92       	mov	r2,r8
8000702c:	12 93       	mov	r3,r9
8000702e:	ee fc ff a4 	ld.w	r12,r7[-92]
80007032:	f0 16 00 02 	mcall	r6[8]
80007036:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000703a:	ec fc 00 18 	ld.w	r12,r6[24]
8000703e:	12 98       	mov	r8,r9
80007040:	a3 78       	lsl	r8,0x3
80007042:	12 08       	add	r8,r9
80007044:	a3 78       	lsl	r8,0x3
80007046:	f8 08 00 08 	add	r8,r12,r8
8000704a:	2c 88       	sub	r8,-56
8000704c:	f0 e8 00 00 	ld.d	r8,r8[0]
80007050:	f0 16 00 03 	mcall	r6[12]
80007054:	14 98       	mov	r8,r10
80007056:	16 99       	mov	r9,r11
80007058:	04 9a       	mov	r10,r2
8000705a:	06 9b       	mov	r11,r3
8000705c:	f0 16 00 11 	mcall	r6[68]
80007060:	14 98       	mov	r8,r10
80007062:	16 99       	mov	r9,r11
80007064:	00 9a       	mov	r10,r0
80007066:	02 9b       	mov	r11,r1
80007068:	f0 16 00 03 	mcall	r6[12]
8000706c:	14 98       	mov	r8,r10
8000706e:	16 99       	mov	r9,r11
80007070:	ee ea ff 44 	ld.d	r10,r7[-188]
80007074:	f0 16 00 05 	mcall	r6[20]
80007078:	14 98       	mov	r8,r10
8000707a:	16 99       	mov	r9,r11
8000707c:	ee e9 ff d0 	st.d	r7[-48],r8
	FPF11 = P[axis][1][1] + dt * (-P[axis][2][1] - P[axis][1][2] + dt * P[axis][2][2] );
80007080:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007084:	ec fa 00 18 	ld.w	r10,r6[24]
80007088:	12 98       	mov	r8,r9
8000708a:	a3 78       	lsl	r8,0x3
8000708c:	12 08       	add	r8,r9
8000708e:	a3 78       	lsl	r8,0x3
80007090:	f4 08 00 08 	add	r8,r10,r8
80007094:	2e 08       	sub	r8,-32
80007096:	f0 e4 00 00 	ld.d	r4,r8[0]
8000709a:	ee e5 ff 4c 	st.d	r7[-180],r4
8000709e:	ee fc ff a4 	ld.w	r12,r7[-92]
800070a2:	f0 16 00 02 	mcall	r6[8]
800070a6:	14 90       	mov	r0,r10
800070a8:	16 91       	mov	r1,r11
800070aa:	ee f9 ff ac 	ld.w	r9,r7[-84]
800070ae:	ec fa 00 18 	ld.w	r10,r6[24]
800070b2:	12 98       	mov	r8,r9
800070b4:	a3 78       	lsl	r8,0x3
800070b6:	12 08       	add	r8,r9
800070b8:	a3 78       	lsl	r8,0x3
800070ba:	f4 08 00 08 	add	r8,r10,r8
800070be:	2c 88       	sub	r8,-56
800070c0:	f0 e8 00 00 	ld.d	r8,r8[0]
800070c4:	12 94       	mov	r4,r9
800070c6:	ee 14 80 00 	eorh	r4,0x8000
800070ca:	ef 44 ff 54 	st.w	r7[-172],r4
800070ce:	10 9c       	mov	r12,r8
800070d0:	ef 4c ff 58 	st.w	r7[-168],r12
800070d4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800070d8:	ec fa 00 18 	ld.w	r10,r6[24]
800070dc:	12 98       	mov	r8,r9
800070de:	a3 78       	lsl	r8,0x3
800070e0:	12 08       	add	r8,r9
800070e2:	a3 78       	lsl	r8,0x3
800070e4:	f4 08 00 08 	add	r8,r10,r8
800070e8:	2d 88       	sub	r8,-40
800070ea:	f0 e8 00 00 	ld.d	r8,r8[0]
800070ee:	ee ea ff 54 	ld.d	r10,r7[-172]
800070f2:	f0 16 00 11 	mcall	r6[68]
800070f6:	14 98       	mov	r8,r10
800070f8:	16 99       	mov	r9,r11
800070fa:	10 92       	mov	r2,r8
800070fc:	12 93       	mov	r3,r9
800070fe:	ee fc ff a4 	ld.w	r12,r7[-92]
80007102:	f0 16 00 02 	mcall	r6[8]
80007106:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000710a:	ec fc 00 18 	ld.w	r12,r6[24]
8000710e:	12 98       	mov	r8,r9
80007110:	a3 78       	lsl	r8,0x3
80007112:	12 08       	add	r8,r9
80007114:	a3 78       	lsl	r8,0x3
80007116:	f8 08 00 08 	add	r8,r12,r8
8000711a:	2c 08       	sub	r8,-64
8000711c:	f0 e8 00 00 	ld.d	r8,r8[0]
80007120:	f0 16 00 03 	mcall	r6[12]
80007124:	14 98       	mov	r8,r10
80007126:	16 99       	mov	r9,r11
80007128:	04 9a       	mov	r10,r2
8000712a:	06 9b       	mov	r11,r3
8000712c:	f0 16 00 05 	mcall	r6[20]
80007130:	14 98       	mov	r8,r10
80007132:	16 99       	mov	r9,r11
80007134:	00 9a       	mov	r10,r0
80007136:	02 9b       	mov	r11,r1
80007138:	f0 16 00 03 	mcall	r6[12]
8000713c:	14 98       	mov	r8,r10
8000713e:	16 99       	mov	r9,r11
80007140:	ee ea ff 4c 	ld.d	r10,r7[-180]
80007144:	f0 16 00 05 	mcall	r6[20]
80007148:	14 98       	mov	r8,r10
8000714a:	16 99       	mov	r9,r11
8000714c:	ee e9 ff d8 	st.d	r7[-40],r8
	FPF12 = P[axis][1][2] + dt * (-P[axis][2][2] );
80007150:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007154:	ec fa 00 18 	ld.w	r10,r6[24]
80007158:	12 98       	mov	r8,r9
8000715a:	a3 78       	lsl	r8,0x3
8000715c:	12 08       	add	r8,r9
8000715e:	a3 78       	lsl	r8,0x3
80007160:	f4 08 00 08 	add	r8,r10,r8
80007164:	2d 88       	sub	r8,-40
80007166:	f0 e0 00 00 	ld.d	r0,r8[0]
8000716a:	ee fc ff a4 	ld.w	r12,r7[-92]
8000716e:	f0 16 00 02 	mcall	r6[8]
80007172:	14 92       	mov	r2,r10
80007174:	16 93       	mov	r3,r11
80007176:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000717a:	ec fa 00 18 	ld.w	r10,r6[24]
8000717e:	12 98       	mov	r8,r9
80007180:	a3 78       	lsl	r8,0x3
80007182:	12 08       	add	r8,r9
80007184:	a3 78       	lsl	r8,0x3
80007186:	f4 08 00 08 	add	r8,r10,r8
8000718a:	2c 08       	sub	r8,-64
8000718c:	f0 e8 00 00 	ld.d	r8,r8[0]
80007190:	12 9b       	mov	r11,r9
80007192:	ee 1b 80 00 	eorh	r11,0x8000
80007196:	ef 4b ff 5c 	st.w	r7[-164],r11
8000719a:	10 9a       	mov	r10,r8
8000719c:	ef 4a ff 60 	st.w	r7[-160],r10
800071a0:	ee e8 ff 5c 	ld.d	r8,r7[-164]
800071a4:	04 9a       	mov	r10,r2
800071a6:	06 9b       	mov	r11,r3
800071a8:	f0 16 00 03 	mcall	r6[12]
800071ac:	14 98       	mov	r8,r10
800071ae:	16 99       	mov	r9,r11
800071b0:	00 9a       	mov	r10,r0
800071b2:	02 9b       	mov	r11,r1
800071b4:	f0 16 00 05 	mcall	r6[20]
800071b8:	14 98       	mov	r8,r10
800071ba:	16 99       	mov	r9,r11
800071bc:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF20 = P[axis][2][0] + dt * ( P[axis][2][1] );
800071c0:	ee f9 ff ac 	ld.w	r9,r7[-84]
800071c4:	ec fa 00 18 	ld.w	r10,r6[24]
800071c8:	12 98       	mov	r8,r9
800071ca:	a3 78       	lsl	r8,0x3
800071cc:	12 08       	add	r8,r9
800071ce:	a3 78       	lsl	r8,0x3
800071d0:	f4 08 00 08 	add	r8,r10,r8
800071d4:	2d 08       	sub	r8,-48
800071d6:	f0 e2 00 00 	ld.d	r2,r8[0]
800071da:	ee fc ff a4 	ld.w	r12,r7[-92]
800071de:	f0 16 00 02 	mcall	r6[8]
800071e2:	ee f9 ff ac 	ld.w	r9,r7[-84]
800071e6:	ec fc 00 18 	ld.w	r12,r6[24]
800071ea:	12 98       	mov	r8,r9
800071ec:	a3 78       	lsl	r8,0x3
800071ee:	12 08       	add	r8,r9
800071f0:	a3 78       	lsl	r8,0x3
800071f2:	f8 08 00 08 	add	r8,r12,r8
800071f6:	2c 88       	sub	r8,-56
800071f8:	f0 e8 00 00 	ld.d	r8,r8[0]
800071fc:	f0 16 00 03 	mcall	r6[12]
80007200:	14 98       	mov	r8,r10
80007202:	16 99       	mov	r9,r11
80007204:	04 9a       	mov	r10,r2
80007206:	06 9b       	mov	r11,r3
80007208:	f0 16 00 05 	mcall	r6[20]
8000720c:	14 98       	mov	r8,r10
8000720e:	16 99       	mov	r9,r11
80007210:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF21 = P[axis][2][1] + dt * (-P[axis][2][2] );
80007214:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007218:	ec fa 00 18 	ld.w	r10,r6[24]
8000721c:	12 98       	mov	r8,r9
8000721e:	a3 78       	lsl	r8,0x3
80007220:	12 08       	add	r8,r9
80007222:	a3 78       	lsl	r8,0x3
80007224:	f4 08 00 08 	add	r8,r10,r8
80007228:	2c 88       	sub	r8,-56
8000722a:	f0 e2 00 00 	ld.d	r2,r8[0]
8000722e:	ee fc ff a4 	ld.w	r12,r7[-92]
80007232:	f0 16 00 02 	mcall	r6[8]
80007236:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000723a:	ec fc 00 18 	ld.w	r12,r6[24]
8000723e:	12 98       	mov	r8,r9
80007240:	a3 78       	lsl	r8,0x3
80007242:	12 08       	add	r8,r9
80007244:	a3 78       	lsl	r8,0x3
80007246:	f8 08 00 08 	add	r8,r12,r8
8000724a:	2c 08       	sub	r8,-64
8000724c:	f0 e8 00 00 	ld.d	r8,r8[0]
80007250:	12 95       	mov	r5,r9
80007252:	ee 15 80 00 	eorh	r5,0x8000
80007256:	ef 45 ff 64 	st.w	r7[-156],r5
8000725a:	10 94       	mov	r4,r8
8000725c:	ef 44 ff 68 	st.w	r7[-152],r4
80007260:	ee e8 ff 64 	ld.d	r8,r7[-156]
80007264:	f0 16 00 03 	mcall	r6[12]
80007268:	14 98       	mov	r8,r10
8000726a:	16 99       	mov	r9,r11
8000726c:	04 9a       	mov	r10,r2
8000726e:	06 9b       	mov	r11,r3
80007270:	f0 16 00 05 	mcall	r6[20]
80007274:	14 98       	mov	r8,r10
80007276:	16 99       	mov	r9,r11
80007278:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF22 = P[axis][2][2];
8000727c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007280:	ec fa 00 18 	ld.w	r10,r6[24]
80007284:	12 98       	mov	r8,r9
80007286:	a3 78       	lsl	r8,0x3
80007288:	12 08       	add	r8,r9
8000728a:	a3 78       	lsl	r8,0x3
8000728c:	f4 08 00 08 	add	r8,r10,r8
80007290:	2c 08       	sub	r8,-64
80007292:	f0 e8 00 00 	ld.d	r8,r8[0]
80007296:	ee e9 ff f8 	st.d	r7[-8],r8
	// P = F*P*F' + Q
	P[axis][0][0] = FPF00 + Q[axis][POSITION];
8000729a:	ee f5 ff ac 	ld.w	r5,r7[-84]
8000729e:	ee f9 ff ac 	ld.w	r9,r7[-84]
800072a2:	ec fa 00 e0 	ld.w	r10,r6[224]
800072a6:	12 98       	mov	r8,r9
800072a8:	a1 78       	lsl	r8,0x1
800072aa:	12 08       	add	r8,r9
800072ac:	a3 78       	lsl	r8,0x3
800072ae:	f4 08 00 08 	add	r8,r10,r8
800072b2:	f0 ea 00 00 	ld.d	r10,r8[0]
800072b6:	ee e8 ff b8 	ld.d	r8,r7[-72]
800072ba:	f0 16 00 05 	mcall	r6[20]
800072be:	14 98       	mov	r8,r10
800072c0:	16 99       	mov	r9,r11
800072c2:	10 9a       	mov	r10,r8
800072c4:	12 9b       	mov	r11,r9
800072c6:	ec f9 00 18 	ld.w	r9,r6[24]
800072ca:	0a 98       	mov	r8,r5
800072cc:	a3 78       	lsl	r8,0x3
800072ce:	0a 08       	add	r8,r5
800072d0:	a3 78       	lsl	r8,0x3
800072d2:	f2 08 00 08 	add	r8,r9,r8
800072d6:	f0 eb 00 00 	st.d	r8[0],r10
	P[axis][0][1] = FPF01;
800072da:	ee f9 ff ac 	ld.w	r9,r7[-84]
800072de:	ec fa 00 18 	ld.w	r10,r6[24]
800072e2:	12 98       	mov	r8,r9
800072e4:	a3 78       	lsl	r8,0x3
800072e6:	12 08       	add	r8,r9
800072e8:	f0 cb ff ff 	sub	r11,r8,-1
800072ec:	ee e8 ff c0 	ld.d	r8,r7[-64]
800072f0:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P[axis][0][2] = FPF02;
800072f4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800072f8:	ec fa 00 18 	ld.w	r10,r6[24]
800072fc:	12 98       	mov	r8,r9
800072fe:	a3 78       	lsl	r8,0x3
80007300:	12 08       	add	r8,r9
80007302:	a3 78       	lsl	r8,0x3
80007304:	f4 08 00 08 	add	r8,r10,r8
80007308:	f0 ca ff f0 	sub	r10,r8,-16
8000730c:	ee e8 ff c8 	ld.d	r8,r7[-56]
80007310:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][0] = FPF10;
80007314:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007318:	ec fa 00 18 	ld.w	r10,r6[24]
8000731c:	12 98       	mov	r8,r9
8000731e:	a3 78       	lsl	r8,0x3
80007320:	12 08       	add	r8,r9
80007322:	a3 78       	lsl	r8,0x3
80007324:	f4 08 00 08 	add	r8,r10,r8
80007328:	f0 ca ff e8 	sub	r10,r8,-24
8000732c:	ee e8 ff d0 	ld.d	r8,r7[-48]
80007330:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = FPF11 + Q[axis][SPEED];
80007334:	ee f5 ff ac 	ld.w	r5,r7[-84]
80007338:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000733c:	ec fa 00 e0 	ld.w	r10,r6[224]
80007340:	12 98       	mov	r8,r9
80007342:	a1 78       	lsl	r8,0x1
80007344:	12 08       	add	r8,r9
80007346:	2f f8       	sub	r8,-1
80007348:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
8000734c:	ee e8 ff d8 	ld.d	r8,r7[-40]
80007350:	f0 16 00 05 	mcall	r6[20]
80007354:	14 98       	mov	r8,r10
80007356:	16 99       	mov	r9,r11
80007358:	10 9a       	mov	r10,r8
8000735a:	12 9b       	mov	r11,r9
8000735c:	ec f9 00 18 	ld.w	r9,r6[24]
80007360:	0a 98       	mov	r8,r5
80007362:	a3 78       	lsl	r8,0x3
80007364:	0a 08       	add	r8,r5
80007366:	a3 78       	lsl	r8,0x3
80007368:	f2 08 00 08 	add	r8,r9,r8
8000736c:	2e 08       	sub	r8,-32
8000736e:	f0 eb 00 00 	st.d	r8[0],r10
	P[axis][1][2] = FPF12;
80007372:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007376:	ec fa 00 18 	ld.w	r10,r6[24]
8000737a:	12 98       	mov	r8,r9
8000737c:	a3 78       	lsl	r8,0x3
8000737e:	12 08       	add	r8,r9
80007380:	a3 78       	lsl	r8,0x3
80007382:	f4 08 00 08 	add	r8,r10,r8
80007386:	f0 ca ff d8 	sub	r10,r8,-40
8000738a:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000738e:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][0] = FPF20;
80007392:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007396:	ec fa 00 18 	ld.w	r10,r6[24]
8000739a:	12 98       	mov	r8,r9
8000739c:	a3 78       	lsl	r8,0x3
8000739e:	12 08       	add	r8,r9
800073a0:	a3 78       	lsl	r8,0x3
800073a2:	f4 08 00 08 	add	r8,r10,r8
800073a6:	f0 ca ff d0 	sub	r10,r8,-48
800073aa:	ee e8 ff e8 	ld.d	r8,r7[-24]
800073ae:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][1] = FPF21;
800073b2:	ee f9 ff ac 	ld.w	r9,r7[-84]
800073b6:	ec fa 00 18 	ld.w	r10,r6[24]
800073ba:	12 98       	mov	r8,r9
800073bc:	a3 78       	lsl	r8,0x3
800073be:	12 08       	add	r8,r9
800073c0:	a3 78       	lsl	r8,0x3
800073c2:	f4 08 00 08 	add	r8,r10,r8
800073c6:	f0 ca ff c8 	sub	r10,r8,-56
800073ca:	ee e8 ff f0 	ld.d	r8,r7[-16]
800073ce:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][2] = FPF22 + Q[axis][BIAIS];
800073d2:	ee f5 ff ac 	ld.w	r5,r7[-84]
800073d6:	ee f9 ff ac 	ld.w	r9,r7[-84]
800073da:	ec fa 00 e0 	ld.w	r10,r6[224]
800073de:	12 98       	mov	r8,r9
800073e0:	a1 78       	lsl	r8,0x1
800073e2:	12 08       	add	r8,r9
800073e4:	a3 78       	lsl	r8,0x3
800073e6:	f4 08 00 08 	add	r8,r10,r8
800073ea:	2f 08       	sub	r8,-16
800073ec:	f0 ea 00 00 	ld.d	r10,r8[0]
800073f0:	ee e8 ff f8 	ld.d	r8,r7[-8]
800073f4:	f0 16 00 05 	mcall	r6[20]
800073f8:	14 98       	mov	r8,r10
800073fa:	16 99       	mov	r9,r11
800073fc:	10 9a       	mov	r10,r8
800073fe:	12 9b       	mov	r11,r9
80007400:	ec f9 00 18 	ld.w	r9,r6[24]
80007404:	0a 98       	mov	r8,r5
80007406:	a3 78       	lsl	r8,0x3
80007408:	0a 08       	add	r8,r5
8000740a:	a3 78       	lsl	r8,0x3
8000740c:	f2 08 00 08 	add	r8,r9,r8
80007410:	2c 08       	sub	r8,-64
80007412:	f0 eb 00 00 	st.d	r8[0],r10
	
	
	/*************************************************************************************/
	FPF00 = P2[axis][0][0] + dt * ( P2[axis][1][0] + P2[axis][0][1] + dt * P2[axis][1][1] );
80007416:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000741a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000741e:	12 98       	mov	r8,r9
80007420:	a3 78       	lsl	r8,0x3
80007422:	12 08       	add	r8,r9
80007424:	a3 78       	lsl	r8,0x3
80007426:	f4 08 00 08 	add	r8,r10,r8
8000742a:	f0 ea 00 00 	ld.d	r10,r8[0]
8000742e:	ee eb ff 6c 	st.d	r7[-148],r10
80007432:	ee fc ff a4 	ld.w	r12,r7[-92]
80007436:	f0 16 00 02 	mcall	r6[8]
8000743a:	14 90       	mov	r0,r10
8000743c:	16 91       	mov	r1,r11
8000743e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007442:	ec fa 00 1c 	ld.w	r10,r6[28]
80007446:	12 98       	mov	r8,r9
80007448:	a3 78       	lsl	r8,0x3
8000744a:	12 08       	add	r8,r9
8000744c:	a3 78       	lsl	r8,0x3
8000744e:	f4 08 00 08 	add	r8,r10,r8
80007452:	2e 88       	sub	r8,-24
80007454:	f0 ea 00 00 	ld.d	r10,r8[0]
80007458:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000745c:	ec fc 00 1c 	ld.w	r12,r6[28]
80007460:	12 98       	mov	r8,r9
80007462:	a3 78       	lsl	r8,0x3
80007464:	12 08       	add	r8,r9
80007466:	2f f8       	sub	r8,-1
80007468:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000746c:	f0 16 00 05 	mcall	r6[20]
80007470:	14 98       	mov	r8,r10
80007472:	16 99       	mov	r9,r11
80007474:	10 92       	mov	r2,r8
80007476:	12 93       	mov	r3,r9
80007478:	ee fc ff a4 	ld.w	r12,r7[-92]
8000747c:	f0 16 00 02 	mcall	r6[8]
80007480:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007484:	ec fc 00 1c 	ld.w	r12,r6[28]
80007488:	12 98       	mov	r8,r9
8000748a:	a3 78       	lsl	r8,0x3
8000748c:	12 08       	add	r8,r9
8000748e:	a3 78       	lsl	r8,0x3
80007490:	f8 08 00 08 	add	r8,r12,r8
80007494:	2e 08       	sub	r8,-32
80007496:	f0 e8 00 00 	ld.d	r8,r8[0]
8000749a:	f0 16 00 03 	mcall	r6[12]
8000749e:	14 98       	mov	r8,r10
800074a0:	16 99       	mov	r9,r11
800074a2:	04 9a       	mov	r10,r2
800074a4:	06 9b       	mov	r11,r3
800074a6:	f0 16 00 05 	mcall	r6[20]
800074aa:	14 98       	mov	r8,r10
800074ac:	16 99       	mov	r9,r11
800074ae:	00 9a       	mov	r10,r0
800074b0:	02 9b       	mov	r11,r1
800074b2:	f0 16 00 03 	mcall	r6[12]
800074b6:	14 98       	mov	r8,r10
800074b8:	16 99       	mov	r9,r11
800074ba:	ee ea ff 6c 	ld.d	r10,r7[-148]
800074be:	f0 16 00 05 	mcall	r6[20]
800074c2:	14 98       	mov	r8,r10
800074c4:	16 99       	mov	r9,r11
800074c6:	ee e9 ff b8 	st.d	r7[-72],r8
	FPF01 = P2[axis][0][1] + dt * ( P2[axis][1][1] - P2[axis][0][2] - dt * P2[axis][1][2] );
800074ca:	ee f9 ff ac 	ld.w	r9,r7[-84]
800074ce:	ec fa 00 1c 	ld.w	r10,r6[28]
800074d2:	12 98       	mov	r8,r9
800074d4:	a3 78       	lsl	r8,0x3
800074d6:	12 08       	add	r8,r9
800074d8:	2f f8       	sub	r8,-1
800074da:	f4 08 02 34 	ld.d	r4,r10[r8<<0x3]
800074de:	ee e5 ff 74 	st.d	r7[-140],r4
800074e2:	ee fc ff a4 	ld.w	r12,r7[-92]
800074e6:	f0 16 00 02 	mcall	r6[8]
800074ea:	14 90       	mov	r0,r10
800074ec:	16 91       	mov	r1,r11
800074ee:	ee f9 ff ac 	ld.w	r9,r7[-84]
800074f2:	ec fa 00 1c 	ld.w	r10,r6[28]
800074f6:	12 98       	mov	r8,r9
800074f8:	a3 78       	lsl	r8,0x3
800074fa:	12 08       	add	r8,r9
800074fc:	a3 78       	lsl	r8,0x3
800074fe:	f4 08 00 08 	add	r8,r10,r8
80007502:	2e 08       	sub	r8,-32
80007504:	f0 ea 00 00 	ld.d	r10,r8[0]
80007508:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000750c:	ec fc 00 1c 	ld.w	r12,r6[28]
80007510:	12 98       	mov	r8,r9
80007512:	a3 78       	lsl	r8,0x3
80007514:	12 08       	add	r8,r9
80007516:	a3 78       	lsl	r8,0x3
80007518:	f8 08 00 08 	add	r8,r12,r8
8000751c:	2f 08       	sub	r8,-16
8000751e:	f0 e8 00 00 	ld.d	r8,r8[0]
80007522:	f0 16 00 11 	mcall	r6[68]
80007526:	14 98       	mov	r8,r10
80007528:	16 99       	mov	r9,r11
8000752a:	10 92       	mov	r2,r8
8000752c:	12 93       	mov	r3,r9
8000752e:	ee fc ff a4 	ld.w	r12,r7[-92]
80007532:	f0 16 00 02 	mcall	r6[8]
80007536:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000753a:	ec fc 00 1c 	ld.w	r12,r6[28]
8000753e:	12 98       	mov	r8,r9
80007540:	a3 78       	lsl	r8,0x3
80007542:	12 08       	add	r8,r9
80007544:	a3 78       	lsl	r8,0x3
80007546:	f8 08 00 08 	add	r8,r12,r8
8000754a:	2d 88       	sub	r8,-40
8000754c:	f0 e8 00 00 	ld.d	r8,r8[0]
80007550:	f0 16 00 03 	mcall	r6[12]
80007554:	14 98       	mov	r8,r10
80007556:	16 99       	mov	r9,r11
80007558:	04 9a       	mov	r10,r2
8000755a:	06 9b       	mov	r11,r3
8000755c:	f0 16 00 11 	mcall	r6[68]
80007560:	14 98       	mov	r8,r10
80007562:	16 99       	mov	r9,r11
80007564:	00 9a       	mov	r10,r0
80007566:	02 9b       	mov	r11,r1
80007568:	f0 16 00 03 	mcall	r6[12]
8000756c:	14 98       	mov	r8,r10
8000756e:	16 99       	mov	r9,r11
80007570:	ee ea ff 74 	ld.d	r10,r7[-140]
80007574:	f0 16 00 05 	mcall	r6[20]
80007578:	14 98       	mov	r8,r10
8000757a:	16 99       	mov	r9,r11
8000757c:	ee e9 ff c0 	st.d	r7[-64],r8
	FPF02 = P2[axis][0][2] + dt * ( P2[axis][1][2] );
80007580:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007584:	ec fa 00 1c 	ld.w	r10,r6[28]
80007588:	12 98       	mov	r8,r9
8000758a:	a3 78       	lsl	r8,0x3
8000758c:	12 08       	add	r8,r9
8000758e:	a3 78       	lsl	r8,0x3
80007590:	f4 08 00 08 	add	r8,r10,r8
80007594:	2f 08       	sub	r8,-16
80007596:	f0 e2 00 00 	ld.d	r2,r8[0]
8000759a:	ee fc ff a4 	ld.w	r12,r7[-92]
8000759e:	f0 16 00 02 	mcall	r6[8]
800075a2:	ee f9 ff ac 	ld.w	r9,r7[-84]
800075a6:	ec fc 00 1c 	ld.w	r12,r6[28]
800075aa:	12 98       	mov	r8,r9
800075ac:	a3 78       	lsl	r8,0x3
800075ae:	12 08       	add	r8,r9
800075b0:	a3 78       	lsl	r8,0x3
800075b2:	f8 08 00 08 	add	r8,r12,r8
800075b6:	2d 88       	sub	r8,-40
800075b8:	f0 e8 00 00 	ld.d	r8,r8[0]
800075bc:	f0 16 00 03 	mcall	r6[12]
800075c0:	14 98       	mov	r8,r10
800075c2:	16 99       	mov	r9,r11
800075c4:	04 9a       	mov	r10,r2
800075c6:	06 9b       	mov	r11,r3
800075c8:	f0 16 00 05 	mcall	r6[20]
800075cc:	14 98       	mov	r8,r10
800075ce:	16 99       	mov	r9,r11
800075d0:	ee e9 ff c8 	st.d	r7[-56],r8
	FPF10 = P2[axis][1][0] + dt * (-P2[axis][2][0] + P2[axis][1][1] - dt * P2[axis][2][1] );
800075d4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800075d8:	ec fa 00 1c 	ld.w	r10,r6[28]
800075dc:	12 98       	mov	r8,r9
800075de:	a3 78       	lsl	r8,0x3
800075e0:	12 08       	add	r8,r9
800075e2:	a3 78       	lsl	r8,0x3
800075e4:	f4 08 00 08 	add	r8,r10,r8
800075e8:	2e 88       	sub	r8,-24
800075ea:	f0 ea 00 00 	ld.d	r10,r8[0]
800075ee:	ee eb ff 7c 	st.d	r7[-132],r10
800075f2:	ee fc ff a4 	ld.w	r12,r7[-92]
800075f6:	f0 16 00 02 	mcall	r6[8]
800075fa:	14 90       	mov	r0,r10
800075fc:	16 91       	mov	r1,r11
800075fe:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007602:	ec fa 00 1c 	ld.w	r10,r6[28]
80007606:	12 98       	mov	r8,r9
80007608:	a3 78       	lsl	r8,0x3
8000760a:	12 08       	add	r8,r9
8000760c:	a3 78       	lsl	r8,0x3
8000760e:	f4 08 00 08 	add	r8,r10,r8
80007612:	2e 08       	sub	r8,-32
80007614:	f0 ea 00 00 	ld.d	r10,r8[0]
80007618:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000761c:	ec fc 00 1c 	ld.w	r12,r6[28]
80007620:	12 98       	mov	r8,r9
80007622:	a3 78       	lsl	r8,0x3
80007624:	12 08       	add	r8,r9
80007626:	a3 78       	lsl	r8,0x3
80007628:	f8 08 00 08 	add	r8,r12,r8
8000762c:	2d 08       	sub	r8,-48
8000762e:	f0 e8 00 00 	ld.d	r8,r8[0]
80007632:	f0 16 00 11 	mcall	r6[68]
80007636:	14 98       	mov	r8,r10
80007638:	16 99       	mov	r9,r11
8000763a:	10 92       	mov	r2,r8
8000763c:	12 93       	mov	r3,r9
8000763e:	ee fc ff a4 	ld.w	r12,r7[-92]
80007642:	f0 16 00 02 	mcall	r6[8]
80007646:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000764a:	ec fc 00 1c 	ld.w	r12,r6[28]
8000764e:	12 98       	mov	r8,r9
80007650:	a3 78       	lsl	r8,0x3
80007652:	12 08       	add	r8,r9
80007654:	a3 78       	lsl	r8,0x3
80007656:	f8 08 00 08 	add	r8,r12,r8
8000765a:	2c 88       	sub	r8,-56
8000765c:	f0 e8 00 00 	ld.d	r8,r8[0]
80007660:	f0 16 00 03 	mcall	r6[12]
80007664:	14 98       	mov	r8,r10
80007666:	16 99       	mov	r9,r11
80007668:	04 9a       	mov	r10,r2
8000766a:	06 9b       	mov	r11,r3
8000766c:	f0 16 00 11 	mcall	r6[68]
80007670:	14 98       	mov	r8,r10
80007672:	16 99       	mov	r9,r11
80007674:	00 9a       	mov	r10,r0
80007676:	02 9b       	mov	r11,r1
80007678:	f0 16 00 03 	mcall	r6[12]
8000767c:	14 98       	mov	r8,r10
8000767e:	16 99       	mov	r9,r11
80007680:	ee ea ff 7c 	ld.d	r10,r7[-132]
80007684:	f0 16 00 05 	mcall	r6[20]
80007688:	14 98       	mov	r8,r10
8000768a:	16 99       	mov	r9,r11
8000768c:	ee e9 ff d0 	st.d	r7[-48],r8
	FPF11 = P2[axis][1][1] + dt * (-P2[axis][2][1] - P2[axis][1][2] + dt * P2[axis][2][2] );
80007690:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007694:	ec fa 00 1c 	ld.w	r10,r6[28]
80007698:	12 98       	mov	r8,r9
8000769a:	a3 78       	lsl	r8,0x3
8000769c:	12 08       	add	r8,r9
8000769e:	a3 78       	lsl	r8,0x3
800076a0:	f4 08 00 08 	add	r8,r10,r8
800076a4:	2e 08       	sub	r8,-32
800076a6:	f0 e0 00 00 	ld.d	r0,r8[0]
800076aa:	ee fc ff a4 	ld.w	r12,r7[-92]
800076ae:	f0 16 00 02 	mcall	r6[8]
800076b2:	ee eb ff 84 	st.d	r7[-124],r10
800076b6:	ee f9 ff ac 	ld.w	r9,r7[-84]
800076ba:	ec fa 00 1c 	ld.w	r10,r6[28]
800076be:	12 98       	mov	r8,r9
800076c0:	a3 78       	lsl	r8,0x3
800076c2:	12 08       	add	r8,r9
800076c4:	a3 78       	lsl	r8,0x3
800076c6:	f4 08 00 08 	add	r8,r10,r8
800076ca:	2c 88       	sub	r8,-56
800076cc:	f0 e8 00 00 	ld.d	r8,r8[0]
800076d0:	12 9a       	mov	r10,r9
800076d2:	ee 1a 80 00 	eorh	r10,0x8000
800076d6:	ef 4a ff 8c 	st.w	r7[-116],r10
800076da:	10 95       	mov	r5,r8
800076dc:	ef 45 ff 90 	st.w	r7[-112],r5
800076e0:	ee f9 ff ac 	ld.w	r9,r7[-84]
800076e4:	ec fa 00 1c 	ld.w	r10,r6[28]
800076e8:	12 98       	mov	r8,r9
800076ea:	a3 78       	lsl	r8,0x3
800076ec:	12 08       	add	r8,r9
800076ee:	a3 78       	lsl	r8,0x3
800076f0:	f4 08 00 08 	add	r8,r10,r8
800076f4:	2d 88       	sub	r8,-40
800076f6:	f0 e8 00 00 	ld.d	r8,r8[0]
800076fa:	ee ea ff 8c 	ld.d	r10,r7[-116]
800076fe:	f0 16 00 11 	mcall	r6[68]
80007702:	14 98       	mov	r8,r10
80007704:	16 99       	mov	r9,r11
80007706:	10 92       	mov	r2,r8
80007708:	12 93       	mov	r3,r9
8000770a:	ee fc ff a4 	ld.w	r12,r7[-92]
8000770e:	f0 16 00 02 	mcall	r6[8]
80007712:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007716:	ec fc 00 1c 	ld.w	r12,r6[28]
8000771a:	12 98       	mov	r8,r9
8000771c:	a3 78       	lsl	r8,0x3
8000771e:	12 08       	add	r8,r9
80007720:	a3 78       	lsl	r8,0x3
80007722:	f8 08 00 08 	add	r8,r12,r8
80007726:	2c 08       	sub	r8,-64
80007728:	f0 e8 00 00 	ld.d	r8,r8[0]
8000772c:	f0 16 00 03 	mcall	r6[12]
80007730:	14 98       	mov	r8,r10
80007732:	16 99       	mov	r9,r11
80007734:	04 9a       	mov	r10,r2
80007736:	06 9b       	mov	r11,r3
80007738:	f0 16 00 05 	mcall	r6[20]
8000773c:	14 98       	mov	r8,r10
8000773e:	16 99       	mov	r9,r11
80007740:	ee ea ff 84 	ld.d	r10,r7[-124]
80007744:	f0 16 00 03 	mcall	r6[12]
80007748:	14 98       	mov	r8,r10
8000774a:	16 99       	mov	r9,r11
8000774c:	00 9a       	mov	r10,r0
8000774e:	02 9b       	mov	r11,r1
80007750:	f0 16 00 05 	mcall	r6[20]
80007754:	14 98       	mov	r8,r10
80007756:	16 99       	mov	r9,r11
80007758:	ee e9 ff d8 	st.d	r7[-40],r8
	FPF12 = P2[axis][1][2] + dt * (-P2[axis][2][2] );
8000775c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007760:	ec fa 00 1c 	ld.w	r10,r6[28]
80007764:	12 98       	mov	r8,r9
80007766:	a3 78       	lsl	r8,0x3
80007768:	12 08       	add	r8,r9
8000776a:	a3 78       	lsl	r8,0x3
8000776c:	f4 08 00 08 	add	r8,r10,r8
80007770:	2d 88       	sub	r8,-40
80007772:	f0 e2 00 00 	ld.d	r2,r8[0]
80007776:	ee fc ff a4 	ld.w	r12,r7[-92]
8000777a:	f0 16 00 02 	mcall	r6[8]
8000777e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007782:	ec fc 00 1c 	ld.w	r12,r6[28]
80007786:	12 98       	mov	r8,r9
80007788:	a3 78       	lsl	r8,0x3
8000778a:	12 08       	add	r8,r9
8000778c:	a3 78       	lsl	r8,0x3
8000778e:	f8 08 00 08 	add	r8,r12,r8
80007792:	2c 08       	sub	r8,-64
80007794:	f0 e8 00 00 	ld.d	r8,r8[0]
80007798:	12 94       	mov	r4,r9
8000779a:	ee 14 80 00 	eorh	r4,0x8000
8000779e:	ef 44 ff 94 	st.w	r7[-108],r4
800077a2:	10 9c       	mov	r12,r8
800077a4:	ef 4c ff 98 	st.w	r7[-104],r12
800077a8:	ee e8 ff 94 	ld.d	r8,r7[-108]
800077ac:	f0 16 00 03 	mcall	r6[12]
800077b0:	14 98       	mov	r8,r10
800077b2:	16 99       	mov	r9,r11
800077b4:	04 9a       	mov	r10,r2
800077b6:	06 9b       	mov	r11,r3
800077b8:	f0 16 00 05 	mcall	r6[20]
800077bc:	14 98       	mov	r8,r10
800077be:	16 99       	mov	r9,r11
800077c0:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF20 = P2[axis][2][0] + dt * ( P2[axis][2][1] );
800077c4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800077c8:	ec fa 00 1c 	ld.w	r10,r6[28]
800077cc:	12 98       	mov	r8,r9
800077ce:	a3 78       	lsl	r8,0x3
800077d0:	12 08       	add	r8,r9
800077d2:	a3 78       	lsl	r8,0x3
800077d4:	f4 08 00 08 	add	r8,r10,r8
800077d8:	2d 08       	sub	r8,-48
800077da:	f0 e2 00 00 	ld.d	r2,r8[0]
800077de:	ee fc ff a4 	ld.w	r12,r7[-92]
800077e2:	f0 16 00 02 	mcall	r6[8]
800077e6:	ee f9 ff ac 	ld.w	r9,r7[-84]
800077ea:	ec fc 00 1c 	ld.w	r12,r6[28]
800077ee:	12 98       	mov	r8,r9
800077f0:	a3 78       	lsl	r8,0x3
800077f2:	12 08       	add	r8,r9
800077f4:	a3 78       	lsl	r8,0x3
800077f6:	f8 08 00 08 	add	r8,r12,r8
800077fa:	2c 88       	sub	r8,-56
800077fc:	f0 e8 00 00 	ld.d	r8,r8[0]
80007800:	f0 16 00 03 	mcall	r6[12]
80007804:	14 98       	mov	r8,r10
80007806:	16 99       	mov	r9,r11
80007808:	04 9a       	mov	r10,r2
8000780a:	06 9b       	mov	r11,r3
8000780c:	f0 16 00 05 	mcall	r6[20]
80007810:	14 98       	mov	r8,r10
80007812:	16 99       	mov	r9,r11
80007814:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF21 = P2[axis][2][1] + dt * (-P2[axis][2][2] );
80007818:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000781c:	ec fa 00 1c 	ld.w	r10,r6[28]
80007820:	12 98       	mov	r8,r9
80007822:	a3 78       	lsl	r8,0x3
80007824:	12 08       	add	r8,r9
80007826:	a3 78       	lsl	r8,0x3
80007828:	f4 08 00 08 	add	r8,r10,r8
8000782c:	2c 88       	sub	r8,-56
8000782e:	f0 e2 00 00 	ld.d	r2,r8[0]
80007832:	ee fc ff a4 	ld.w	r12,r7[-92]
80007836:	f0 16 00 02 	mcall	r6[8]
8000783a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000783e:	ec fc 00 1c 	ld.w	r12,r6[28]
80007842:	12 98       	mov	r8,r9
80007844:	a3 78       	lsl	r8,0x3
80007846:	12 08       	add	r8,r9
80007848:	a3 78       	lsl	r8,0x3
8000784a:	f8 08 00 08 	add	r8,r12,r8
8000784e:	2c 08       	sub	r8,-64
80007850:	f0 e8 00 00 	ld.d	r8,r8[0]
80007854:	12 95       	mov	r5,r9
80007856:	ee 15 80 00 	eorh	r5,0x8000
8000785a:	ef 45 ff 9c 	st.w	r7[-100],r5
8000785e:	10 94       	mov	r4,r8
80007860:	ef 44 ff a0 	st.w	r7[-96],r4
80007864:	ee e8 ff 9c 	ld.d	r8,r7[-100]
80007868:	f0 16 00 03 	mcall	r6[12]
8000786c:	14 98       	mov	r8,r10
8000786e:	16 99       	mov	r9,r11
80007870:	04 9a       	mov	r10,r2
80007872:	06 9b       	mov	r11,r3
80007874:	f0 16 00 05 	mcall	r6[20]
80007878:	14 98       	mov	r8,r10
8000787a:	16 99       	mov	r9,r11
8000787c:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF22 = P2[axis][2][2];
80007880:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007884:	ec fa 00 1c 	ld.w	r10,r6[28]
80007888:	12 98       	mov	r8,r9
8000788a:	a3 78       	lsl	r8,0x3
8000788c:	12 08       	add	r8,r9
8000788e:	a3 78       	lsl	r8,0x3
80007890:	f4 08 00 08 	add	r8,r10,r8
80007894:	2c 08       	sub	r8,-64
80007896:	f0 e8 00 00 	ld.d	r8,r8[0]
8000789a:	ee e9 ff f8 	st.d	r7[-8],r8
	// P = F*P*F' + Q
	P2[axis][0][0] = FPF00 + Q2[axis][POSITION];
8000789e:	ee f5 ff ac 	ld.w	r5,r7[-84]
800078a2:	ee f9 ff ac 	ld.w	r9,r7[-84]
800078a6:	ec fa 00 e4 	ld.w	r10,r6[228]
800078aa:	12 98       	mov	r8,r9
800078ac:	a1 78       	lsl	r8,0x1
800078ae:	12 08       	add	r8,r9
800078b0:	a3 78       	lsl	r8,0x3
800078b2:	f4 08 00 08 	add	r8,r10,r8
800078b6:	f0 ea 00 00 	ld.d	r10,r8[0]
800078ba:	ee e8 ff b8 	ld.d	r8,r7[-72]
800078be:	f0 16 00 05 	mcall	r6[20]
800078c2:	14 98       	mov	r8,r10
800078c4:	16 99       	mov	r9,r11
800078c6:	10 9a       	mov	r10,r8
800078c8:	12 9b       	mov	r11,r9
800078ca:	ec f9 00 1c 	ld.w	r9,r6[28]
800078ce:	0a 98       	mov	r8,r5
800078d0:	a3 78       	lsl	r8,0x3
800078d2:	0a 08       	add	r8,r5
800078d4:	a3 78       	lsl	r8,0x3
800078d6:	f2 08 00 08 	add	r8,r9,r8
800078da:	f0 eb 00 00 	st.d	r8[0],r10
	P2[axis][0][1] = FPF01;
800078de:	ee f9 ff ac 	ld.w	r9,r7[-84]
800078e2:	ec fa 00 1c 	ld.w	r10,r6[28]
800078e6:	12 98       	mov	r8,r9
800078e8:	a3 78       	lsl	r8,0x3
800078ea:	12 08       	add	r8,r9
800078ec:	f0 cb ff ff 	sub	r11,r8,-1
800078f0:	ee e8 ff c0 	ld.d	r8,r7[-64]
800078f4:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][0][2] = FPF02;
800078f8:	ee f9 ff ac 	ld.w	r9,r7[-84]
800078fc:	ec fa 00 1c 	ld.w	r10,r6[28]
80007900:	12 98       	mov	r8,r9
80007902:	a3 78       	lsl	r8,0x3
80007904:	12 08       	add	r8,r9
80007906:	a3 78       	lsl	r8,0x3
80007908:	f4 08 00 08 	add	r8,r10,r8
8000790c:	f0 ca ff f0 	sub	r10,r8,-16
80007910:	ee e8 ff c8 	ld.d	r8,r7[-56]
80007914:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][0] = FPF10;
80007918:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000791c:	ec fa 00 1c 	ld.w	r10,r6[28]
80007920:	12 98       	mov	r8,r9
80007922:	a3 78       	lsl	r8,0x3
80007924:	12 08       	add	r8,r9
80007926:	a3 78       	lsl	r8,0x3
80007928:	f4 08 00 08 	add	r8,r10,r8
8000792c:	f0 ca ff e8 	sub	r10,r8,-24
80007930:	ee e8 ff d0 	ld.d	r8,r7[-48]
80007934:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = FPF11 + Q2[axis][SPEED];
80007938:	ee f5 ff ac 	ld.w	r5,r7[-84]
8000793c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007940:	ec fa 00 e4 	ld.w	r10,r6[228]
80007944:	12 98       	mov	r8,r9
80007946:	a1 78       	lsl	r8,0x1
80007948:	12 08       	add	r8,r9
8000794a:	2f f8       	sub	r8,-1
8000794c:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
80007950:	ee e8 ff d8 	ld.d	r8,r7[-40]
80007954:	f0 16 00 05 	mcall	r6[20]
80007958:	14 98       	mov	r8,r10
8000795a:	16 99       	mov	r9,r11
8000795c:	10 9a       	mov	r10,r8
8000795e:	12 9b       	mov	r11,r9
80007960:	ec f9 00 1c 	ld.w	r9,r6[28]
80007964:	0a 98       	mov	r8,r5
80007966:	a3 78       	lsl	r8,0x3
80007968:	0a 08       	add	r8,r5
8000796a:	a3 78       	lsl	r8,0x3
8000796c:	f2 08 00 08 	add	r8,r9,r8
80007970:	2e 08       	sub	r8,-32
80007972:	f0 eb 00 00 	st.d	r8[0],r10
	P2[axis][1][2] = FPF12;
80007976:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000797a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000797e:	12 98       	mov	r8,r9
80007980:	a3 78       	lsl	r8,0x3
80007982:	12 08       	add	r8,r9
80007984:	a3 78       	lsl	r8,0x3
80007986:	f4 08 00 08 	add	r8,r10,r8
8000798a:	f0 ca ff d8 	sub	r10,r8,-40
8000798e:	ee e8 ff e0 	ld.d	r8,r7[-32]
80007992:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][0] = FPF20;
80007996:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000799a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000799e:	12 98       	mov	r8,r9
800079a0:	a3 78       	lsl	r8,0x3
800079a2:	12 08       	add	r8,r9
800079a4:	a3 78       	lsl	r8,0x3
800079a6:	f4 08 00 08 	add	r8,r10,r8
800079aa:	f0 ca ff d0 	sub	r10,r8,-48
800079ae:	ee e8 ff e8 	ld.d	r8,r7[-24]
800079b2:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][1] = FPF21;
800079b6:	ee f9 ff ac 	ld.w	r9,r7[-84]
800079ba:	ec fa 00 1c 	ld.w	r10,r6[28]
800079be:	12 98       	mov	r8,r9
800079c0:	a3 78       	lsl	r8,0x3
800079c2:	12 08       	add	r8,r9
800079c4:	a3 78       	lsl	r8,0x3
800079c6:	f4 08 00 08 	add	r8,r10,r8
800079ca:	f0 ca ff c8 	sub	r10,r8,-56
800079ce:	ee e8 ff f0 	ld.d	r8,r7[-16]
800079d2:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][2] = FPF22 + Q2[axis][BIAIS];
800079d6:	ee f5 ff ac 	ld.w	r5,r7[-84]
800079da:	ee f9 ff ac 	ld.w	r9,r7[-84]
800079de:	ec fa 00 e4 	ld.w	r10,r6[228]
800079e2:	12 98       	mov	r8,r9
800079e4:	a1 78       	lsl	r8,0x1
800079e6:	12 08       	add	r8,r9
800079e8:	a3 78       	lsl	r8,0x3
800079ea:	f4 08 00 08 	add	r8,r10,r8
800079ee:	2f 08       	sub	r8,-16
800079f0:	f0 ea 00 00 	ld.d	r10,r8[0]
800079f4:	ee e8 ff f8 	ld.d	r8,r7[-8]
800079f8:	f0 16 00 05 	mcall	r6[20]
800079fc:	14 98       	mov	r8,r10
800079fe:	16 99       	mov	r9,r11
80007a00:	10 9a       	mov	r10,r8
80007a02:	12 9b       	mov	r11,r9
80007a04:	ec f9 00 1c 	ld.w	r9,r6[28]
80007a08:	0a 98       	mov	r8,r5
80007a0a:	a3 78       	lsl	r8,0x3
80007a0c:	0a 08       	add	r8,r5
80007a0e:	a3 78       	lsl	r8,0x3
80007a10:	f2 08 00 08 	add	r8,r9,r8
80007a14:	2c 08       	sub	r8,-64
80007a16:	f0 eb 00 00 	st.d	r8[0],r10
}
80007a1a:	2c dd       	sub	sp,-204
80007a1c:	d8 32       	popm	r0-r7,pc
80007a1e:	00 00       	add	r0,r0
80007a20:	80 00       	ld.sh	r0,r0[0x0]
80007a22:	6b a6       	ld.w	r6,r5[0x68]

80007a24 <e_kalman_predict_hf>:


void e_kalman_predict_hf(int axis, float accel_meas, float dt)
{
80007a24:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80007a28:	1a 97       	mov	r7,sp
80007a2a:	20 fd       	sub	sp,60
80007a2c:	fe f6 05 88 	ld.w	r6,pc[1416]
80007a30:	1e 26       	rsub	r6,pc
80007a32:	ef 4c ff dc 	st.w	r7[-36],r12
80007a36:	ef 4b ff d8 	st.w	r7[-40],r11
80007a3a:	ef 4a ff d4 	st.w	r7[-44],r10
	double FPF00,FPF01,FPF10,FPF11;
	
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + dt * centralData->estimation.state[axis][SPEED] + dt*dt*accel_meas;
80007a3e:	ec f8 00 00 	ld.w	r8,r6[0]
80007a42:	70 01       	ld.w	r1,r8[0x0]
80007a44:	ee f5 ff dc 	ld.w	r5,r7[-36]
80007a48:	ec f8 00 00 	ld.w	r8,r6[0]
80007a4c:	70 0a       	ld.w	r10,r8[0x0]
80007a4e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007a52:	12 98       	mov	r8,r9
80007a54:	a1 78       	lsl	r8,0x1
80007a56:	12 08       	add	r8,r9
80007a58:	a3 78       	lsl	r8,0x3
80007a5a:	f4 08 00 08 	add	r8,r10,r8
80007a5e:	f0 c8 f4 a4 	sub	r8,r8,-2908
80007a62:	f0 e2 00 00 	ld.d	r2,r8[0]
80007a66:	ee fc ff d4 	ld.w	r12,r7[-44]
80007a6a:	f0 16 00 02 	mcall	r6[8]
80007a6e:	ec f8 00 00 	ld.w	r8,r6[0]
80007a72:	70 0c       	ld.w	r12,r8[0x0]
80007a74:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007a78:	12 98       	mov	r8,r9
80007a7a:	a1 78       	lsl	r8,0x1
80007a7c:	12 08       	add	r8,r9
80007a7e:	2f f8       	sub	r8,-1
80007a80:	a3 78       	lsl	r8,0x3
80007a82:	f8 08 00 08 	add	r8,r12,r8
80007a86:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
80007a8a:	f0 16 00 03 	mcall	r6[12]
80007a8e:	14 98       	mov	r8,r10
80007a90:	16 99       	mov	r9,r11
80007a92:	04 9a       	mov	r10,r2
80007a94:	06 9b       	mov	r11,r3
80007a96:	f0 16 00 05 	mcall	r6[20]
80007a9a:	14 98       	mov	r8,r10
80007a9c:	16 99       	mov	r9,r11
80007a9e:	10 92       	mov	r2,r8
80007aa0:	12 93       	mov	r3,r9
80007aa2:	ee f9 ff d4 	ld.w	r9,r7[-44]
80007aa6:	ee f8 ff d4 	ld.w	r8,r7[-44]
80007aaa:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80007aae:	ee f8 ff d8 	ld.w	r8,r7[-40]
80007ab2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80007ab6:	10 9c       	mov	r12,r8
80007ab8:	f0 16 00 02 	mcall	r6[8]
80007abc:	14 98       	mov	r8,r10
80007abe:	16 99       	mov	r9,r11
80007ac0:	04 9a       	mov	r10,r2
80007ac2:	06 9b       	mov	r11,r3
80007ac4:	f0 16 00 05 	mcall	r6[20]
80007ac8:	14 98       	mov	r8,r10
80007aca:	16 99       	mov	r9,r11
80007acc:	10 9a       	mov	r10,r8
80007ace:	12 9b       	mov	r11,r9
80007ad0:	0a 98       	mov	r8,r5
80007ad2:	a1 78       	lsl	r8,0x1
80007ad4:	0a 08       	add	r8,r5
80007ad6:	a3 78       	lsl	r8,0x3
80007ad8:	e2 08 00 08 	add	r8,r1,r8
80007adc:	f0 c8 f4 a4 	sub	r8,r8,-2908
80007ae0:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + dt * centralData->estimation.state[axis][SPEED];
80007ae4:	ec f8 00 00 	ld.w	r8,r6[0]
80007ae8:	70 01       	ld.w	r1,r8[0x0]
80007aea:	ee f5 ff dc 	ld.w	r5,r7[-36]
80007aee:	ec f8 00 00 	ld.w	r8,r6[0]
80007af2:	70 0a       	ld.w	r10,r8[0x0]
80007af4:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007af8:	12 98       	mov	r8,r9
80007afa:	a1 78       	lsl	r8,0x1
80007afc:	12 08       	add	r8,r9
80007afe:	a3 78       	lsl	r8,0x3
80007b00:	f4 08 00 08 	add	r8,r10,r8
80007b04:	f0 c8 f4 a4 	sub	r8,r8,-2908
80007b08:	f0 e2 00 00 	ld.d	r2,r8[0]
80007b0c:	ee fc ff d4 	ld.w	r12,r7[-44]
80007b10:	f0 16 00 02 	mcall	r6[8]
80007b14:	ec f8 00 00 	ld.w	r8,r6[0]
80007b18:	70 0c       	ld.w	r12,r8[0x0]
80007b1a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007b1e:	12 98       	mov	r8,r9
80007b20:	a1 78       	lsl	r8,0x1
80007b22:	12 08       	add	r8,r9
80007b24:	2f f8       	sub	r8,-1
80007b26:	a3 78       	lsl	r8,0x3
80007b28:	f8 08 00 08 	add	r8,r12,r8
80007b2c:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
80007b30:	f0 16 00 03 	mcall	r6[12]
80007b34:	14 98       	mov	r8,r10
80007b36:	16 99       	mov	r9,r11
80007b38:	04 9a       	mov	r10,r2
80007b3a:	06 9b       	mov	r11,r3
80007b3c:	f0 16 00 05 	mcall	r6[20]
80007b40:	14 98       	mov	r8,r10
80007b42:	16 99       	mov	r9,r11
80007b44:	10 9a       	mov	r10,r8
80007b46:	12 9b       	mov	r11,r9
80007b48:	0a 98       	mov	r8,r5
80007b4a:	a1 78       	lsl	r8,0x1
80007b4c:	0a 08       	add	r8,r5
80007b4e:	a3 78       	lsl	r8,0x3
80007b50:	e2 08 00 08 	add	r8,r1,r8
80007b54:	f0 c8 f4 a4 	sub	r8,r8,-2908
80007b58:	f0 eb 00 00 	st.d	r8[0],r10
	
	FPF00 = P[axis][0][0] + dt * (P[axis][1][0] + P[axis][0][1] + dt * P[axis][1][1]);
80007b5c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007b60:	ec fa 00 18 	ld.w	r10,r6[24]
80007b64:	12 98       	mov	r8,r9
80007b66:	a3 78       	lsl	r8,0x3
80007b68:	12 08       	add	r8,r9
80007b6a:	a3 78       	lsl	r8,0x3
80007b6c:	f4 08 00 08 	add	r8,r10,r8
80007b70:	f0 e2 00 00 	ld.d	r2,r8[0]
80007b74:	ee fc ff d4 	ld.w	r12,r7[-44]
80007b78:	f0 16 00 02 	mcall	r6[8]
80007b7c:	14 90       	mov	r0,r10
80007b7e:	16 91       	mov	r1,r11
80007b80:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007b84:	ec fa 00 18 	ld.w	r10,r6[24]
80007b88:	12 98       	mov	r8,r9
80007b8a:	a3 78       	lsl	r8,0x3
80007b8c:	12 08       	add	r8,r9
80007b8e:	a3 78       	lsl	r8,0x3
80007b90:	f4 08 00 08 	add	r8,r10,r8
80007b94:	2e 88       	sub	r8,-24
80007b96:	f0 ea 00 00 	ld.d	r10,r8[0]
80007b9a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007b9e:	ec fc 00 18 	ld.w	r12,r6[24]
80007ba2:	12 98       	mov	r8,r9
80007ba4:	a3 78       	lsl	r8,0x3
80007ba6:	12 08       	add	r8,r9
80007ba8:	2f f8       	sub	r8,-1
80007baa:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80007bae:	f0 16 00 05 	mcall	r6[20]
80007bb2:	14 98       	mov	r8,r10
80007bb4:	16 99       	mov	r9,r11
80007bb6:	ee e9 ff c4 	st.d	r7[-60],r8
80007bba:	ee fc ff d4 	ld.w	r12,r7[-44]
80007bbe:	f0 16 00 02 	mcall	r6[8]
80007bc2:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007bc6:	ec fc 00 18 	ld.w	r12,r6[24]
80007bca:	12 98       	mov	r8,r9
80007bcc:	a3 78       	lsl	r8,0x3
80007bce:	12 08       	add	r8,r9
80007bd0:	a3 78       	lsl	r8,0x3
80007bd2:	f8 08 00 08 	add	r8,r12,r8
80007bd6:	2e 08       	sub	r8,-32
80007bd8:	f0 e8 00 00 	ld.d	r8,r8[0]
80007bdc:	f0 16 00 03 	mcall	r6[12]
80007be0:	14 98       	mov	r8,r10
80007be2:	16 99       	mov	r9,r11
80007be4:	ee ea ff c4 	ld.d	r10,r7[-60]
80007be8:	f0 16 00 05 	mcall	r6[20]
80007bec:	14 98       	mov	r8,r10
80007bee:	16 99       	mov	r9,r11
80007bf0:	00 9a       	mov	r10,r0
80007bf2:	02 9b       	mov	r11,r1
80007bf4:	f0 16 00 03 	mcall	r6[12]
80007bf8:	14 98       	mov	r8,r10
80007bfa:	16 99       	mov	r9,r11
80007bfc:	04 9a       	mov	r10,r2
80007bfe:	06 9b       	mov	r11,r3
80007c00:	f0 16 00 05 	mcall	r6[20]
80007c04:	14 98       	mov	r8,r10
80007c06:	16 99       	mov	r9,r11
80007c08:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF01 = P[axis][0][1] + dt * P[axis][1][1];
80007c0c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007c10:	ec fa 00 18 	ld.w	r10,r6[24]
80007c14:	12 98       	mov	r8,r9
80007c16:	a3 78       	lsl	r8,0x3
80007c18:	12 08       	add	r8,r9
80007c1a:	2f f8       	sub	r8,-1
80007c1c:	f4 08 02 32 	ld.d	r2,r10[r8<<0x3]
80007c20:	ee fc ff d4 	ld.w	r12,r7[-44]
80007c24:	f0 16 00 02 	mcall	r6[8]
80007c28:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007c2c:	ec fc 00 18 	ld.w	r12,r6[24]
80007c30:	12 98       	mov	r8,r9
80007c32:	a3 78       	lsl	r8,0x3
80007c34:	12 08       	add	r8,r9
80007c36:	a3 78       	lsl	r8,0x3
80007c38:	f8 08 00 08 	add	r8,r12,r8
80007c3c:	2e 08       	sub	r8,-32
80007c3e:	f0 e8 00 00 	ld.d	r8,r8[0]
80007c42:	f0 16 00 03 	mcall	r6[12]
80007c46:	14 98       	mov	r8,r10
80007c48:	16 99       	mov	r9,r11
80007c4a:	04 9a       	mov	r10,r2
80007c4c:	06 9b       	mov	r11,r3
80007c4e:	f0 16 00 05 	mcall	r6[20]
80007c52:	14 98       	mov	r8,r10
80007c54:	16 99       	mov	r9,r11
80007c56:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF10 = P[axis][1][0] + dt * P[axis][1][1];
80007c5a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007c5e:	ec fa 00 18 	ld.w	r10,r6[24]
80007c62:	12 98       	mov	r8,r9
80007c64:	a3 78       	lsl	r8,0x3
80007c66:	12 08       	add	r8,r9
80007c68:	a3 78       	lsl	r8,0x3
80007c6a:	f4 08 00 08 	add	r8,r10,r8
80007c6e:	2e 88       	sub	r8,-24
80007c70:	f0 e2 00 00 	ld.d	r2,r8[0]
80007c74:	ee fc ff d4 	ld.w	r12,r7[-44]
80007c78:	f0 16 00 02 	mcall	r6[8]
80007c7c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007c80:	ec fc 00 18 	ld.w	r12,r6[24]
80007c84:	12 98       	mov	r8,r9
80007c86:	a3 78       	lsl	r8,0x3
80007c88:	12 08       	add	r8,r9
80007c8a:	a3 78       	lsl	r8,0x3
80007c8c:	f8 08 00 08 	add	r8,r12,r8
80007c90:	2e 08       	sub	r8,-32
80007c92:	f0 e8 00 00 	ld.d	r8,r8[0]
80007c96:	f0 16 00 03 	mcall	r6[12]
80007c9a:	14 98       	mov	r8,r10
80007c9c:	16 99       	mov	r9,r11
80007c9e:	04 9a       	mov	r10,r2
80007ca0:	06 9b       	mov	r11,r3
80007ca2:	f0 16 00 05 	mcall	r6[20]
80007ca6:	14 98       	mov	r8,r10
80007ca8:	16 99       	mov	r9,r11
80007caa:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF11 = P[axis][1][1];
80007cae:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007cb2:	ec fa 00 18 	ld.w	r10,r6[24]
80007cb6:	12 98       	mov	r8,r9
80007cb8:	a3 78       	lsl	r8,0x3
80007cba:	12 08       	add	r8,r9
80007cbc:	a3 78       	lsl	r8,0x3
80007cbe:	f4 08 00 08 	add	r8,r10,r8
80007cc2:	2e 08       	sub	r8,-32
80007cc4:	f0 e8 00 00 	ld.d	r8,r8[0]
80007cc8:	ee e9 ff f8 	st.d	r7[-8],r8
	
	P[axis][0][0] = FPF00 + Q[axis][POSITION];
80007ccc:	ee f5 ff dc 	ld.w	r5,r7[-36]
80007cd0:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007cd4:	ec fa 00 e0 	ld.w	r10,r6[224]
80007cd8:	12 98       	mov	r8,r9
80007cda:	a1 78       	lsl	r8,0x1
80007cdc:	12 08       	add	r8,r9
80007cde:	a3 78       	lsl	r8,0x3
80007ce0:	f4 08 00 08 	add	r8,r10,r8
80007ce4:	f0 ea 00 00 	ld.d	r10,r8[0]
80007ce8:	ee e8 ff e0 	ld.d	r8,r7[-32]
80007cec:	f0 16 00 05 	mcall	r6[20]
80007cf0:	14 98       	mov	r8,r10
80007cf2:	16 99       	mov	r9,r11
80007cf4:	10 9a       	mov	r10,r8
80007cf6:	12 9b       	mov	r11,r9
80007cf8:	ec f9 00 18 	ld.w	r9,r6[24]
80007cfc:	0a 98       	mov	r8,r5
80007cfe:	a3 78       	lsl	r8,0x3
80007d00:	0a 08       	add	r8,r5
80007d02:	a3 78       	lsl	r8,0x3
80007d04:	f2 08 00 08 	add	r8,r9,r8
80007d08:	f0 eb 00 00 	st.d	r8[0],r10
	P[axis][0][1] = FPF01;
80007d0c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007d10:	ec fa 00 18 	ld.w	r10,r6[24]
80007d14:	12 98       	mov	r8,r9
80007d16:	a3 78       	lsl	r8,0x3
80007d18:	12 08       	add	r8,r9
80007d1a:	f0 cb ff ff 	sub	r11,r8,-1
80007d1e:	ee e8 ff e8 	ld.d	r8,r7[-24]
80007d22:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P[axis][1][0] = FPF10;
80007d26:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007d2a:	ec fa 00 18 	ld.w	r10,r6[24]
80007d2e:	12 98       	mov	r8,r9
80007d30:	a3 78       	lsl	r8,0x3
80007d32:	12 08       	add	r8,r9
80007d34:	a3 78       	lsl	r8,0x3
80007d36:	f4 08 00 08 	add	r8,r10,r8
80007d3a:	f0 ca ff e8 	sub	r10,r8,-24
80007d3e:	ee e8 ff f0 	ld.d	r8,r7[-16]
80007d42:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = FPF11 + Q[axis][SPEED];
80007d46:	ee f5 ff dc 	ld.w	r5,r7[-36]
80007d4a:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007d4e:	ec fa 00 e0 	ld.w	r10,r6[224]
80007d52:	12 98       	mov	r8,r9
80007d54:	a1 78       	lsl	r8,0x1
80007d56:	12 08       	add	r8,r9
80007d58:	2f f8       	sub	r8,-1
80007d5a:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
80007d5e:	ee e8 ff f8 	ld.d	r8,r7[-8]
80007d62:	f0 16 00 05 	mcall	r6[20]
80007d66:	14 98       	mov	r8,r10
80007d68:	16 99       	mov	r9,r11
80007d6a:	10 9a       	mov	r10,r8
80007d6c:	12 9b       	mov	r11,r9
80007d6e:	ec f9 00 18 	ld.w	r9,r6[24]
80007d72:	0a 98       	mov	r8,r5
80007d74:	a3 78       	lsl	r8,0x3
80007d76:	0a 08       	add	r8,r5
80007d78:	a3 78       	lsl	r8,0x3
80007d7a:	f2 08 00 08 	add	r8,r9,r8
80007d7e:	2e 08       	sub	r8,-32
80007d80:	f0 eb 00 00 	st.d	r8[0],r10
	
	/*************************************************************************************/
	FPF00 = P2[axis][0][0] + dt * (P2[axis][1][0] + P2[axis][0][1] + dt * P2[axis][1][1]);
80007d84:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007d88:	ec fa 00 1c 	ld.w	r10,r6[28]
80007d8c:	12 98       	mov	r8,r9
80007d8e:	a3 78       	lsl	r8,0x3
80007d90:	12 08       	add	r8,r9
80007d92:	a3 78       	lsl	r8,0x3
80007d94:	f4 08 00 08 	add	r8,r10,r8
80007d98:	f0 e2 00 00 	ld.d	r2,r8[0]
80007d9c:	ee fc ff d4 	ld.w	r12,r7[-44]
80007da0:	f0 16 00 02 	mcall	r6[8]
80007da4:	14 90       	mov	r0,r10
80007da6:	16 91       	mov	r1,r11
80007da8:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007dac:	ec fa 00 1c 	ld.w	r10,r6[28]
80007db0:	12 98       	mov	r8,r9
80007db2:	a3 78       	lsl	r8,0x3
80007db4:	12 08       	add	r8,r9
80007db6:	a3 78       	lsl	r8,0x3
80007db8:	f4 08 00 08 	add	r8,r10,r8
80007dbc:	2e 88       	sub	r8,-24
80007dbe:	f0 ea 00 00 	ld.d	r10,r8[0]
80007dc2:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007dc6:	ec fc 00 1c 	ld.w	r12,r6[28]
80007dca:	12 98       	mov	r8,r9
80007dcc:	a3 78       	lsl	r8,0x3
80007dce:	12 08       	add	r8,r9
80007dd0:	2f f8       	sub	r8,-1
80007dd2:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80007dd6:	f0 16 00 05 	mcall	r6[20]
80007dda:	14 98       	mov	r8,r10
80007ddc:	16 99       	mov	r9,r11
80007dde:	ee e9 ff cc 	st.d	r7[-52],r8
80007de2:	ee fc ff d4 	ld.w	r12,r7[-44]
80007de6:	f0 16 00 02 	mcall	r6[8]
80007dea:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007dee:	ec fc 00 1c 	ld.w	r12,r6[28]
80007df2:	12 98       	mov	r8,r9
80007df4:	a3 78       	lsl	r8,0x3
80007df6:	12 08       	add	r8,r9
80007df8:	a3 78       	lsl	r8,0x3
80007dfa:	f8 08 00 08 	add	r8,r12,r8
80007dfe:	2e 08       	sub	r8,-32
80007e00:	f0 e8 00 00 	ld.d	r8,r8[0]
80007e04:	f0 16 00 03 	mcall	r6[12]
80007e08:	14 98       	mov	r8,r10
80007e0a:	16 99       	mov	r9,r11
80007e0c:	ee ea ff cc 	ld.d	r10,r7[-52]
80007e10:	f0 16 00 05 	mcall	r6[20]
80007e14:	14 98       	mov	r8,r10
80007e16:	16 99       	mov	r9,r11
80007e18:	00 9a       	mov	r10,r0
80007e1a:	02 9b       	mov	r11,r1
80007e1c:	f0 16 00 03 	mcall	r6[12]
80007e20:	14 98       	mov	r8,r10
80007e22:	16 99       	mov	r9,r11
80007e24:	04 9a       	mov	r10,r2
80007e26:	06 9b       	mov	r11,r3
80007e28:	f0 16 00 05 	mcall	r6[20]
80007e2c:	14 98       	mov	r8,r10
80007e2e:	16 99       	mov	r9,r11
80007e30:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF01 = P2[axis][0][1] + dt * P2[axis][1][1];
80007e34:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007e38:	ec fa 00 1c 	ld.w	r10,r6[28]
80007e3c:	12 98       	mov	r8,r9
80007e3e:	a3 78       	lsl	r8,0x3
80007e40:	12 08       	add	r8,r9
80007e42:	2f f8       	sub	r8,-1
80007e44:	f4 08 02 32 	ld.d	r2,r10[r8<<0x3]
80007e48:	ee fc ff d4 	ld.w	r12,r7[-44]
80007e4c:	f0 16 00 02 	mcall	r6[8]
80007e50:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007e54:	ec fc 00 1c 	ld.w	r12,r6[28]
80007e58:	12 98       	mov	r8,r9
80007e5a:	a3 78       	lsl	r8,0x3
80007e5c:	12 08       	add	r8,r9
80007e5e:	a3 78       	lsl	r8,0x3
80007e60:	f8 08 00 08 	add	r8,r12,r8
80007e64:	2e 08       	sub	r8,-32
80007e66:	f0 e8 00 00 	ld.d	r8,r8[0]
80007e6a:	f0 16 00 03 	mcall	r6[12]
80007e6e:	14 98       	mov	r8,r10
80007e70:	16 99       	mov	r9,r11
80007e72:	04 9a       	mov	r10,r2
80007e74:	06 9b       	mov	r11,r3
80007e76:	f0 16 00 05 	mcall	r6[20]
80007e7a:	14 98       	mov	r8,r10
80007e7c:	16 99       	mov	r9,r11
80007e7e:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF10 = P2[axis][1][0] + dt * P2[axis][1][1];
80007e82:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007e86:	ec fa 00 1c 	ld.w	r10,r6[28]
80007e8a:	12 98       	mov	r8,r9
80007e8c:	a3 78       	lsl	r8,0x3
80007e8e:	12 08       	add	r8,r9
80007e90:	a3 78       	lsl	r8,0x3
80007e92:	f4 08 00 08 	add	r8,r10,r8
80007e96:	2e 88       	sub	r8,-24
80007e98:	f0 e2 00 00 	ld.d	r2,r8[0]
80007e9c:	ee fc ff d4 	ld.w	r12,r7[-44]
80007ea0:	f0 16 00 02 	mcall	r6[8]
80007ea4:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007ea8:	ec fc 00 1c 	ld.w	r12,r6[28]
80007eac:	12 98       	mov	r8,r9
80007eae:	a3 78       	lsl	r8,0x3
80007eb0:	12 08       	add	r8,r9
80007eb2:	a3 78       	lsl	r8,0x3
80007eb4:	f8 08 00 08 	add	r8,r12,r8
80007eb8:	2e 08       	sub	r8,-32
80007eba:	f0 e8 00 00 	ld.d	r8,r8[0]
80007ebe:	f0 16 00 03 	mcall	r6[12]
80007ec2:	14 98       	mov	r8,r10
80007ec4:	16 99       	mov	r9,r11
80007ec6:	04 9a       	mov	r10,r2
80007ec8:	06 9b       	mov	r11,r3
80007eca:	f0 16 00 05 	mcall	r6[20]
80007ece:	14 98       	mov	r8,r10
80007ed0:	16 99       	mov	r9,r11
80007ed2:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF11 = P2[axis][1][1];
80007ed6:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007eda:	ec fa 00 1c 	ld.w	r10,r6[28]
80007ede:	12 98       	mov	r8,r9
80007ee0:	a3 78       	lsl	r8,0x3
80007ee2:	12 08       	add	r8,r9
80007ee4:	a3 78       	lsl	r8,0x3
80007ee6:	f4 08 00 08 	add	r8,r10,r8
80007eea:	2e 08       	sub	r8,-32
80007eec:	f0 e8 00 00 	ld.d	r8,r8[0]
80007ef0:	ee e9 ff f8 	st.d	r7[-8],r8
	
	P2[axis][0][0] = FPF00 + Q2[axis][POSITION];
80007ef4:	ee f5 ff dc 	ld.w	r5,r7[-36]
80007ef8:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007efc:	ec fa 00 e4 	ld.w	r10,r6[228]
80007f00:	12 98       	mov	r8,r9
80007f02:	a1 78       	lsl	r8,0x1
80007f04:	12 08       	add	r8,r9
80007f06:	a3 78       	lsl	r8,0x3
80007f08:	f4 08 00 08 	add	r8,r10,r8
80007f0c:	f0 ea 00 00 	ld.d	r10,r8[0]
80007f10:	ee e8 ff e0 	ld.d	r8,r7[-32]
80007f14:	f0 16 00 05 	mcall	r6[20]
80007f18:	14 98       	mov	r8,r10
80007f1a:	16 99       	mov	r9,r11
80007f1c:	10 9a       	mov	r10,r8
80007f1e:	12 9b       	mov	r11,r9
80007f20:	ec f9 00 1c 	ld.w	r9,r6[28]
80007f24:	0a 98       	mov	r8,r5
80007f26:	a3 78       	lsl	r8,0x3
80007f28:	0a 08       	add	r8,r5
80007f2a:	a3 78       	lsl	r8,0x3
80007f2c:	f2 08 00 08 	add	r8,r9,r8
80007f30:	f0 eb 00 00 	st.d	r8[0],r10
	P2[axis][0][1] = FPF01;
80007f34:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007f38:	ec fa 00 1c 	ld.w	r10,r6[28]
80007f3c:	12 98       	mov	r8,r9
80007f3e:	a3 78       	lsl	r8,0x3
80007f40:	12 08       	add	r8,r9
80007f42:	f0 cb ff ff 	sub	r11,r8,-1
80007f46:	ee e8 ff e8 	ld.d	r8,r7[-24]
80007f4a:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][1][0] = FPF10;
80007f4e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007f52:	ec fa 00 1c 	ld.w	r10,r6[28]
80007f56:	12 98       	mov	r8,r9
80007f58:	a3 78       	lsl	r8,0x3
80007f5a:	12 08       	add	r8,r9
80007f5c:	a3 78       	lsl	r8,0x3
80007f5e:	f4 08 00 08 	add	r8,r10,r8
80007f62:	f0 ca ff e8 	sub	r10,r8,-24
80007f66:	ee e8 ff f0 	ld.d	r8,r7[-16]
80007f6a:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = FPF11 + Q2[axis][SPEED];
80007f6e:	ee f5 ff dc 	ld.w	r5,r7[-36]
80007f72:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007f76:	ec fa 00 e4 	ld.w	r10,r6[228]
80007f7a:	12 98       	mov	r8,r9
80007f7c:	a1 78       	lsl	r8,0x1
80007f7e:	12 08       	add	r8,r9
80007f80:	2f f8       	sub	r8,-1
80007f82:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
80007f86:	ee e8 ff f8 	ld.d	r8,r7[-8]
80007f8a:	f0 16 00 05 	mcall	r6[20]
80007f8e:	14 98       	mov	r8,r10
80007f90:	16 99       	mov	r9,r11
80007f92:	10 9a       	mov	r10,r8
80007f94:	12 9b       	mov	r11,r9
80007f96:	ec f9 00 1c 	ld.w	r9,r6[28]
80007f9a:	0a 98       	mov	r8,r5
80007f9c:	a3 78       	lsl	r8,0x3
80007f9e:	0a 08       	add	r8,r5
80007fa0:	a3 78       	lsl	r8,0x3
80007fa2:	f2 08 00 08 	add	r8,r9,r8
80007fa6:	2e 08       	sub	r8,-32
80007fa8:	f0 eb 00 00 	st.d	r8[0],r10
}
80007fac:	2f 1d       	sub	sp,-60
80007fae:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80007fb2:	00 00       	add	r0,r0
80007fb4:	80 00       	ld.sh	r0,r0[0x0]
80007fb6:	78 b4       	ld.w	r4,r12[0x2c]

80007fb8 <e_kalman_update_position>:

// update covariance
Pp = Pm - K*H*Pm;
*/
void e_kalman_update_position (int axis, double position_meas)
{
80007fb8:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80007fbc:	1a 97       	mov	r7,sp
80007fbe:	fa cd 00 e4 	sub	sp,sp,228
80007fc2:	fe f6 0b fe 	ld.w	r6,pc[3070]
80007fc6:	1e 26       	rsub	r6,pc
80007fc8:	ef 4c ff 84 	st.w	r7[-124],r12
80007fcc:	ee eb ff 7c 	st.d	r7[-132],r10
	double y,y2,S,K1,K2,K3;
	double P11,P12,P13,P21,P22,P23,P31,P32,P33;

	y = position_meas - centralData->estimation.state[axis][POSITION];
80007fd0:	ec f8 00 00 	ld.w	r8,r6[0]
80007fd4:	70 0a       	ld.w	r10,r8[0x0]
80007fd6:	ee f9 ff 84 	ld.w	r9,r7[-124]
80007fda:	12 98       	mov	r8,r9
80007fdc:	a1 78       	lsl	r8,0x1
80007fde:	12 08       	add	r8,r9
80007fe0:	a3 78       	lsl	r8,0x3
80007fe2:	f4 08 00 08 	add	r8,r10,r8
80007fe6:	f0 c8 f4 a4 	sub	r8,r8,-2908
80007fea:	f0 e8 00 00 	ld.d	r8,r8[0]
80007fee:	ee ea ff 7c 	ld.d	r10,r7[-132]
80007ff2:	f0 16 00 11 	mcall	r6[68]
80007ff6:	14 98       	mov	r8,r10
80007ff8:	16 99       	mov	r9,r11
80007ffa:	ee e9 ff 88 	st.d	r7[-120],r8
	
	
	S = P[axis][0][0] + R[axis];
80007ffe:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008002:	ec fa 00 18 	ld.w	r10,r6[24]
80008006:	12 98       	mov	r8,r9
80008008:	a3 78       	lsl	r8,0x3
8000800a:	12 08       	add	r8,r9
8000800c:	a3 78       	lsl	r8,0x3
8000800e:	f4 08 00 08 	add	r8,r10,r8
80008012:	f0 ea 00 00 	ld.d	r10,r8[0]
80008016:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000801a:	ec f8 01 68 	ld.w	r8,r6[360]
8000801e:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80008022:	f0 16 00 05 	mcall	r6[20]
80008026:	14 98       	mov	r8,r10
80008028:	16 99       	mov	r9,r11
8000802a:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P[axis][0][0] * 1/S;
8000802e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008032:	ec fa 00 18 	ld.w	r10,r6[24]
80008036:	12 98       	mov	r8,r9
80008038:	a3 78       	lsl	r8,0x3
8000803a:	12 08       	add	r8,r9
8000803c:	a3 78       	lsl	r8,0x3
8000803e:	f4 08 00 08 	add	r8,r10,r8
80008042:	f0 ea 00 00 	ld.d	r10,r8[0]
80008046:	ee e8 ff 98 	ld.d	r8,r7[-104]
8000804a:	f0 16 00 0c 	mcall	r6[48]
8000804e:	14 98       	mov	r8,r10
80008050:	16 99       	mov	r9,r11
80008052:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P[axis][1][0] * 1/S;
80008056:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000805a:	ec fa 00 18 	ld.w	r10,r6[24]
8000805e:	12 98       	mov	r8,r9
80008060:	a3 78       	lsl	r8,0x3
80008062:	12 08       	add	r8,r9
80008064:	a3 78       	lsl	r8,0x3
80008066:	f4 08 00 08 	add	r8,r10,r8
8000806a:	2e 88       	sub	r8,-24
8000806c:	f0 ea 00 00 	ld.d	r10,r8[0]
80008070:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008074:	f0 16 00 0c 	mcall	r6[48]
80008078:	14 98       	mov	r8,r10
8000807a:	16 99       	mov	r9,r11
8000807c:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P[axis][2][0] * 1/S;
80008080:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008084:	ec fa 00 18 	ld.w	r10,r6[24]
80008088:	12 98       	mov	r8,r9
8000808a:	a3 78       	lsl	r8,0x3
8000808c:	12 08       	add	r8,r9
8000808e:	a3 78       	lsl	r8,0x3
80008090:	f4 08 00 08 	add	r8,r10,r8
80008094:	2d 08       	sub	r8,-48
80008096:	f0 ea 00 00 	ld.d	r10,r8[0]
8000809a:	ee e8 ff 98 	ld.d	r8,r7[-104]
8000809e:	f0 16 00 0c 	mcall	r6[48]
800080a2:	14 98       	mov	r8,r10
800080a4:	16 99       	mov	r9,r11
800080a6:	ee e9 ff b0 	st.d	r7[-80],r8

	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * y;
800080aa:	ec f8 00 00 	ld.w	r8,r6[0]
800080ae:	70 01       	ld.w	r1,r8[0x0]
800080b0:	ee f5 ff 84 	ld.w	r5,r7[-124]
800080b4:	ec f8 00 00 	ld.w	r8,r6[0]
800080b8:	70 0a       	ld.w	r10,r8[0x0]
800080ba:	ee f9 ff 84 	ld.w	r9,r7[-124]
800080be:	12 98       	mov	r8,r9
800080c0:	a1 78       	lsl	r8,0x1
800080c2:	12 08       	add	r8,r9
800080c4:	a3 78       	lsl	r8,0x3
800080c6:	f4 08 00 08 	add	r8,r10,r8
800080ca:	f0 c8 f4 a4 	sub	r8,r8,-2908
800080ce:	f0 e2 00 00 	ld.d	r2,r8[0]
800080d2:	ee e8 ff 88 	ld.d	r8,r7[-120]
800080d6:	ee ea ff a0 	ld.d	r10,r7[-96]
800080da:	f0 16 00 03 	mcall	r6[12]
800080de:	14 98       	mov	r8,r10
800080e0:	16 99       	mov	r9,r11
800080e2:	04 9a       	mov	r10,r2
800080e4:	06 9b       	mov	r11,r3
800080e6:	f0 16 00 05 	mcall	r6[20]
800080ea:	14 98       	mov	r8,r10
800080ec:	16 99       	mov	r9,r11
800080ee:	10 9a       	mov	r10,r8
800080f0:	12 9b       	mov	r11,r9
800080f2:	0a 98       	mov	r8,r5
800080f4:	a1 78       	lsl	r8,0x1
800080f6:	0a 08       	add	r8,r5
800080f8:	a3 78       	lsl	r8,0x3
800080fa:	e2 08 00 08 	add	r8,r1,r8
800080fe:	f0 c8 f4 a4 	sub	r8,r8,-2908
80008102:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * y;
80008106:	ec f8 00 00 	ld.w	r8,r6[0]
8000810a:	70 01       	ld.w	r1,r8[0x0]
8000810c:	ee f5 ff 84 	ld.w	r5,r7[-124]
80008110:	ec f8 00 00 	ld.w	r8,r6[0]
80008114:	70 0a       	ld.w	r10,r8[0x0]
80008116:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000811a:	12 98       	mov	r8,r9
8000811c:	a1 78       	lsl	r8,0x1
8000811e:	12 08       	add	r8,r9
80008120:	2f f8       	sub	r8,-1
80008122:	a3 78       	lsl	r8,0x3
80008124:	f4 08 00 08 	add	r8,r10,r8
80008128:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
8000812c:	ee e8 ff 88 	ld.d	r8,r7[-120]
80008130:	ee ea ff a8 	ld.d	r10,r7[-88]
80008134:	f0 16 00 03 	mcall	r6[12]
80008138:	14 98       	mov	r8,r10
8000813a:	16 99       	mov	r9,r11
8000813c:	04 9a       	mov	r10,r2
8000813e:	06 9b       	mov	r11,r3
80008140:	f0 16 00 05 	mcall	r6[20]
80008144:	14 98       	mov	r8,r10
80008146:	16 99       	mov	r9,r11
80008148:	10 9a       	mov	r10,r8
8000814a:	12 9b       	mov	r11,r9
8000814c:	0a 98       	mov	r8,r5
8000814e:	a1 78       	lsl	r8,0x1
80008150:	0a 08       	add	r8,r5
80008152:	2f f8       	sub	r8,-1
80008154:	a3 78       	lsl	r8,0x3
80008156:	e2 08 00 08 	add	r8,r1,r8
8000815a:	f0 eb 0b 5c 	st.d	r8[2908],r10
	centralData->estimation.state[axis][BIAIS] = centralData->estimation.state[axis][BIAIS] + K3 * y;
8000815e:	ec f8 00 00 	ld.w	r8,r6[0]
80008162:	70 01       	ld.w	r1,r8[0x0]
80008164:	ee f5 ff 84 	ld.w	r5,r7[-124]
80008168:	ec f8 00 00 	ld.w	r8,r6[0]
8000816c:	70 0a       	ld.w	r10,r8[0x0]
8000816e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008172:	12 98       	mov	r8,r9
80008174:	a1 78       	lsl	r8,0x1
80008176:	12 08       	add	r8,r9
80008178:	a3 78       	lsl	r8,0x3
8000817a:	f4 08 00 08 	add	r8,r10,r8
8000817e:	f0 c8 f4 94 	sub	r8,r8,-2924
80008182:	f0 e2 00 00 	ld.d	r2,r8[0]
80008186:	ee e8 ff 88 	ld.d	r8,r7[-120]
8000818a:	ee ea ff b0 	ld.d	r10,r7[-80]
8000818e:	f0 16 00 03 	mcall	r6[12]
80008192:	14 98       	mov	r8,r10
80008194:	16 99       	mov	r9,r11
80008196:	04 9a       	mov	r10,r2
80008198:	06 9b       	mov	r11,r3
8000819a:	f0 16 00 05 	mcall	r6[20]
8000819e:	14 98       	mov	r8,r10
800081a0:	16 99       	mov	r9,r11
800081a2:	10 9a       	mov	r10,r8
800081a4:	12 9b       	mov	r11,r9
800081a6:	0a 98       	mov	r8,r5
800081a8:	a1 78       	lsl	r8,0x1
800081aa:	0a 08       	add	r8,r5
800081ac:	a3 78       	lsl	r8,0x3
800081ae:	e2 08 00 08 	add	r8,r1,r8
800081b2:	f0 c8 f4 94 	sub	r8,r8,-2924
800081b6:	f0 eb 00 00 	st.d	r8[0],r10

	P11 = (1. - K1) * P[axis][0][0];
800081ba:	ee e8 ff a0 	ld.d	r8,r7[-96]
800081be:	30 0a       	mov	r10,0
800081c0:	fc 1b 3f f0 	movh	r11,0x3ff0
800081c4:	f0 16 00 11 	mcall	r6[68]
800081c8:	14 98       	mov	r8,r10
800081ca:	16 99       	mov	r9,r11
800081cc:	10 9a       	mov	r10,r8
800081ce:	12 9b       	mov	r11,r9
800081d0:	ee f9 ff 84 	ld.w	r9,r7[-124]
800081d4:	ec fc 00 18 	ld.w	r12,r6[24]
800081d8:	12 98       	mov	r8,r9
800081da:	a3 78       	lsl	r8,0x3
800081dc:	12 08       	add	r8,r9
800081de:	a3 78       	lsl	r8,0x3
800081e0:	f8 08 00 08 	add	r8,r12,r8
800081e4:	f0 e8 00 00 	ld.d	r8,r8[0]
800081e8:	f0 16 00 03 	mcall	r6[12]
800081ec:	14 98       	mov	r8,r10
800081ee:	16 99       	mov	r9,r11
800081f0:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = (1. - K1) * P[axis][0][1];
800081f4:	ee e8 ff a0 	ld.d	r8,r7[-96]
800081f8:	30 0a       	mov	r10,0
800081fa:	fc 1b 3f f0 	movh	r11,0x3ff0
800081fe:	f0 16 00 11 	mcall	r6[68]
80008202:	14 98       	mov	r8,r10
80008204:	16 99       	mov	r9,r11
80008206:	10 9a       	mov	r10,r8
80008208:	12 9b       	mov	r11,r9
8000820a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000820e:	ec fc 00 18 	ld.w	r12,r6[24]
80008212:	12 98       	mov	r8,r9
80008214:	a3 78       	lsl	r8,0x3
80008216:	12 08       	add	r8,r9
80008218:	2f f8       	sub	r8,-1
8000821a:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000821e:	f0 16 00 03 	mcall	r6[12]
80008222:	14 98       	mov	r8,r10
80008224:	16 99       	mov	r9,r11
80008226:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = (1. - K1) * P[axis][0][2];
8000822a:	ee e8 ff a0 	ld.d	r8,r7[-96]
8000822e:	30 0a       	mov	r10,0
80008230:	fc 1b 3f f0 	movh	r11,0x3ff0
80008234:	f0 16 00 11 	mcall	r6[68]
80008238:	14 98       	mov	r8,r10
8000823a:	16 99       	mov	r9,r11
8000823c:	10 9a       	mov	r10,r8
8000823e:	12 9b       	mov	r11,r9
80008240:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008244:	ec fc 00 18 	ld.w	r12,r6[24]
80008248:	12 98       	mov	r8,r9
8000824a:	a3 78       	lsl	r8,0x3
8000824c:	12 08       	add	r8,r9
8000824e:	a3 78       	lsl	r8,0x3
80008250:	f8 08 00 08 	add	r8,r12,r8
80008254:	2f 08       	sub	r8,-16
80008256:	f0 e8 00 00 	ld.d	r8,r8[0]
8000825a:	f0 16 00 03 	mcall	r6[12]
8000825e:	14 98       	mov	r8,r10
80008260:	16 99       	mov	r9,r11
80008262:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = -K2 * P[axis][0][0] + P[axis][1][0];
80008266:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000826a:	10 99       	mov	r9,r8
8000826c:	ee 19 80 00 	eorh	r9,0x8000
80008270:	ef 49 ff 1c 	st.w	r7[-228],r9
80008274:	ee f8 ff ac 	ld.w	r8,r7[-84]
80008278:	ef 48 ff 20 	st.w	r7[-224],r8
8000827c:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008280:	ec fa 00 18 	ld.w	r10,r6[24]
80008284:	12 98       	mov	r8,r9
80008286:	a3 78       	lsl	r8,0x3
80008288:	12 08       	add	r8,r9
8000828a:	a3 78       	lsl	r8,0x3
8000828c:	f4 08 00 08 	add	r8,r10,r8
80008290:	f0 e8 00 00 	ld.d	r8,r8[0]
80008294:	ee ea ff 1c 	ld.d	r10,r7[-228]
80008298:	f0 16 00 03 	mcall	r6[12]
8000829c:	14 98       	mov	r8,r10
8000829e:	16 99       	mov	r9,r11
800082a0:	10 9a       	mov	r10,r8
800082a2:	12 9b       	mov	r11,r9
800082a4:	ee f9 ff 84 	ld.w	r9,r7[-124]
800082a8:	ec fc 00 18 	ld.w	r12,r6[24]
800082ac:	12 98       	mov	r8,r9
800082ae:	a3 78       	lsl	r8,0x3
800082b0:	12 08       	add	r8,r9
800082b2:	a3 78       	lsl	r8,0x3
800082b4:	f8 08 00 08 	add	r8,r12,r8
800082b8:	2e 88       	sub	r8,-24
800082ba:	f0 e8 00 00 	ld.d	r8,r8[0]
800082be:	f0 16 00 05 	mcall	r6[20]
800082c2:	14 98       	mov	r8,r10
800082c4:	16 99       	mov	r9,r11
800082c6:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = -K2 * P[axis][0][1] + P[axis][1][1];
800082ca:	ee f8 ff a8 	ld.w	r8,r7[-88]
800082ce:	10 99       	mov	r9,r8
800082d0:	ee 19 80 00 	eorh	r9,0x8000
800082d4:	ef 49 ff 24 	st.w	r7[-220],r9
800082d8:	ee f8 ff ac 	ld.w	r8,r7[-84]
800082dc:	ef 48 ff 28 	st.w	r7[-216],r8
800082e0:	ee f9 ff 84 	ld.w	r9,r7[-124]
800082e4:	ec fa 00 18 	ld.w	r10,r6[24]
800082e8:	12 98       	mov	r8,r9
800082ea:	a3 78       	lsl	r8,0x3
800082ec:	12 08       	add	r8,r9
800082ee:	2f f8       	sub	r8,-1
800082f0:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
800082f4:	ee ea ff 24 	ld.d	r10,r7[-220]
800082f8:	f0 16 00 03 	mcall	r6[12]
800082fc:	14 98       	mov	r8,r10
800082fe:	16 99       	mov	r9,r11
80008300:	10 9a       	mov	r10,r8
80008302:	12 9b       	mov	r11,r9
80008304:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008308:	ec fc 00 18 	ld.w	r12,r6[24]
8000830c:	12 98       	mov	r8,r9
8000830e:	a3 78       	lsl	r8,0x3
80008310:	12 08       	add	r8,r9
80008312:	a3 78       	lsl	r8,0x3
80008314:	f8 08 00 08 	add	r8,r12,r8
80008318:	2e 08       	sub	r8,-32
8000831a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000831e:	f0 16 00 05 	mcall	r6[20]
80008322:	14 98       	mov	r8,r10
80008324:	16 99       	mov	r9,r11
80008326:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = -K2 * P[axis][0][2] + P[axis][1][2];
8000832a:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000832e:	10 99       	mov	r9,r8
80008330:	ee 19 80 00 	eorh	r9,0x8000
80008334:	ef 49 ff 2c 	st.w	r7[-212],r9
80008338:	ee f8 ff ac 	ld.w	r8,r7[-84]
8000833c:	ef 48 ff 30 	st.w	r7[-208],r8
80008340:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008344:	ec fa 00 18 	ld.w	r10,r6[24]
80008348:	12 98       	mov	r8,r9
8000834a:	a3 78       	lsl	r8,0x3
8000834c:	12 08       	add	r8,r9
8000834e:	a3 78       	lsl	r8,0x3
80008350:	f4 08 00 08 	add	r8,r10,r8
80008354:	2f 08       	sub	r8,-16
80008356:	f0 e8 00 00 	ld.d	r8,r8[0]
8000835a:	ee ea ff 2c 	ld.d	r10,r7[-212]
8000835e:	f0 16 00 03 	mcall	r6[12]
80008362:	14 98       	mov	r8,r10
80008364:	16 99       	mov	r9,r11
80008366:	10 9a       	mov	r10,r8
80008368:	12 9b       	mov	r11,r9
8000836a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000836e:	ec fc 00 18 	ld.w	r12,r6[24]
80008372:	12 98       	mov	r8,r9
80008374:	a3 78       	lsl	r8,0x3
80008376:	12 08       	add	r8,r9
80008378:	a3 78       	lsl	r8,0x3
8000837a:	f8 08 00 08 	add	r8,r12,r8
8000837e:	2d 88       	sub	r8,-40
80008380:	f0 e8 00 00 	ld.d	r8,r8[0]
80008384:	f0 16 00 05 	mcall	r6[20]
80008388:	14 98       	mov	r8,r10
8000838a:	16 99       	mov	r9,r11
8000838c:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P[axis][0][0] + P[axis][2][0];
80008390:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008394:	10 99       	mov	r9,r8
80008396:	ee 19 80 00 	eorh	r9,0x8000
8000839a:	ef 49 ff 34 	st.w	r7[-204],r9
8000839e:	ee f8 ff b4 	ld.w	r8,r7[-76]
800083a2:	ef 48 ff 38 	st.w	r7[-200],r8
800083a6:	ee f9 ff 84 	ld.w	r9,r7[-124]
800083aa:	ec fa 00 18 	ld.w	r10,r6[24]
800083ae:	12 98       	mov	r8,r9
800083b0:	a3 78       	lsl	r8,0x3
800083b2:	12 08       	add	r8,r9
800083b4:	a3 78       	lsl	r8,0x3
800083b6:	f4 08 00 08 	add	r8,r10,r8
800083ba:	f0 e8 00 00 	ld.d	r8,r8[0]
800083be:	ee ea ff 34 	ld.d	r10,r7[-204]
800083c2:	f0 16 00 03 	mcall	r6[12]
800083c6:	14 98       	mov	r8,r10
800083c8:	16 99       	mov	r9,r11
800083ca:	10 9a       	mov	r10,r8
800083cc:	12 9b       	mov	r11,r9
800083ce:	ee f9 ff 84 	ld.w	r9,r7[-124]
800083d2:	ec fc 00 18 	ld.w	r12,r6[24]
800083d6:	12 98       	mov	r8,r9
800083d8:	a3 78       	lsl	r8,0x3
800083da:	12 08       	add	r8,r9
800083dc:	a3 78       	lsl	r8,0x3
800083de:	f8 08 00 08 	add	r8,r12,r8
800083e2:	2d 08       	sub	r8,-48
800083e4:	f0 e8 00 00 	ld.d	r8,r8[0]
800083e8:	f0 16 00 05 	mcall	r6[20]
800083ec:	14 98       	mov	r8,r10
800083ee:	16 99       	mov	r9,r11
800083f0:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P[axis][0][1] + P[axis][2][1];
800083f4:	ee f8 ff b0 	ld.w	r8,r7[-80]
800083f8:	10 99       	mov	r9,r8
800083fa:	ee 19 80 00 	eorh	r9,0x8000
800083fe:	ef 49 ff 3c 	st.w	r7[-196],r9
80008402:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008406:	ef 48 ff 40 	st.w	r7[-192],r8
8000840a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000840e:	ec fa 00 18 	ld.w	r10,r6[24]
80008412:	12 98       	mov	r8,r9
80008414:	a3 78       	lsl	r8,0x3
80008416:	12 08       	add	r8,r9
80008418:	2f f8       	sub	r8,-1
8000841a:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
8000841e:	ee ea ff 3c 	ld.d	r10,r7[-196]
80008422:	f0 16 00 03 	mcall	r6[12]
80008426:	14 98       	mov	r8,r10
80008428:	16 99       	mov	r9,r11
8000842a:	10 9a       	mov	r10,r8
8000842c:	12 9b       	mov	r11,r9
8000842e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008432:	ec fc 00 18 	ld.w	r12,r6[24]
80008436:	12 98       	mov	r8,r9
80008438:	a3 78       	lsl	r8,0x3
8000843a:	12 08       	add	r8,r9
8000843c:	a3 78       	lsl	r8,0x3
8000843e:	f8 08 00 08 	add	r8,r12,r8
80008442:	2c 88       	sub	r8,-56
80008444:	f0 e8 00 00 	ld.d	r8,r8[0]
80008448:	f0 16 00 05 	mcall	r6[20]
8000844c:	14 98       	mov	r8,r10
8000844e:	16 99       	mov	r9,r11
80008450:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P[axis][0][2] + P[axis][2][2];
80008454:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008458:	10 99       	mov	r9,r8
8000845a:	ee 19 80 00 	eorh	r9,0x8000
8000845e:	ef 49 ff 44 	st.w	r7[-188],r9
80008462:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008466:	ef 48 ff 48 	st.w	r7[-184],r8
8000846a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000846e:	ec fa 00 18 	ld.w	r10,r6[24]
80008472:	12 98       	mov	r8,r9
80008474:	a3 78       	lsl	r8,0x3
80008476:	12 08       	add	r8,r9
80008478:	a3 78       	lsl	r8,0x3
8000847a:	f4 08 00 08 	add	r8,r10,r8
8000847e:	2f 08       	sub	r8,-16
80008480:	f0 e8 00 00 	ld.d	r8,r8[0]
80008484:	ee ea ff 44 	ld.d	r10,r7[-188]
80008488:	f0 16 00 03 	mcall	r6[12]
8000848c:	14 98       	mov	r8,r10
8000848e:	16 99       	mov	r9,r11
80008490:	10 9a       	mov	r10,r8
80008492:	12 9b       	mov	r11,r9
80008494:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008498:	ec fc 00 18 	ld.w	r12,r6[24]
8000849c:	12 98       	mov	r8,r9
8000849e:	a3 78       	lsl	r8,0x3
800084a0:	12 08       	add	r8,r9
800084a2:	a3 78       	lsl	r8,0x3
800084a4:	f8 08 00 08 	add	r8,r12,r8
800084a8:	2c 08       	sub	r8,-64
800084aa:	f0 e8 00 00 	ld.d	r8,r8[0]
800084ae:	f0 16 00 05 	mcall	r6[20]
800084b2:	14 98       	mov	r8,r10
800084b4:	16 99       	mov	r9,r11
800084b6:	ee e9 ff f8 	st.d	r7[-8],r8

	P[axis][0][0] = P11;
800084ba:	ee f9 ff 84 	ld.w	r9,r7[-124]
800084be:	ec fa 00 18 	ld.w	r10,r6[24]
800084c2:	12 98       	mov	r8,r9
800084c4:	a3 78       	lsl	r8,0x3
800084c6:	12 08       	add	r8,r9
800084c8:	a3 78       	lsl	r8,0x3
800084ca:	10 0a       	add	r10,r8
800084cc:	ee e8 ff b8 	ld.d	r8,r7[-72]
800084d0:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][0][1] = P12;
800084d4:	ee f9 ff 84 	ld.w	r9,r7[-124]
800084d8:	ec fb 00 18 	ld.w	r11,r6[24]
800084dc:	12 98       	mov	r8,r9
800084de:	a3 78       	lsl	r8,0x3
800084e0:	12 08       	add	r8,r9
800084e2:	f0 ca ff ff 	sub	r10,r8,-1
800084e6:	ee e8 ff c0 	ld.d	r8,r7[-64]
800084ea:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
	P[axis][0][2] = P13;
800084ee:	ee f9 ff 84 	ld.w	r9,r7[-124]
800084f2:	ec fa 00 18 	ld.w	r10,r6[24]
800084f6:	12 98       	mov	r8,r9
800084f8:	a3 78       	lsl	r8,0x3
800084fa:	12 08       	add	r8,r9
800084fc:	a3 78       	lsl	r8,0x3
800084fe:	f4 08 00 08 	add	r8,r10,r8
80008502:	f0 ca ff f0 	sub	r10,r8,-16
80008506:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000850a:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][0] = P21;
8000850e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008512:	ec fa 00 18 	ld.w	r10,r6[24]
80008516:	12 98       	mov	r8,r9
80008518:	a3 78       	lsl	r8,0x3
8000851a:	12 08       	add	r8,r9
8000851c:	a3 78       	lsl	r8,0x3
8000851e:	f4 08 00 08 	add	r8,r10,r8
80008522:	f0 ca ff e8 	sub	r10,r8,-24
80008526:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000852a:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = P22;
8000852e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008532:	ec fa 00 18 	ld.w	r10,r6[24]
80008536:	12 98       	mov	r8,r9
80008538:	a3 78       	lsl	r8,0x3
8000853a:	12 08       	add	r8,r9
8000853c:	a3 78       	lsl	r8,0x3
8000853e:	f4 08 00 08 	add	r8,r10,r8
80008542:	f0 ca ff e0 	sub	r10,r8,-32
80008546:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000854a:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][2] = P23;
8000854e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008552:	ec fa 00 18 	ld.w	r10,r6[24]
80008556:	12 98       	mov	r8,r9
80008558:	a3 78       	lsl	r8,0x3
8000855a:	12 08       	add	r8,r9
8000855c:	a3 78       	lsl	r8,0x3
8000855e:	f4 08 00 08 	add	r8,r10,r8
80008562:	f0 ca ff d8 	sub	r10,r8,-40
80008566:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000856a:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][0] = P31;
8000856e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008572:	ec fa 00 18 	ld.w	r10,r6[24]
80008576:	12 98       	mov	r8,r9
80008578:	a3 78       	lsl	r8,0x3
8000857a:	12 08       	add	r8,r9
8000857c:	a3 78       	lsl	r8,0x3
8000857e:	f4 08 00 08 	add	r8,r10,r8
80008582:	f0 ca ff d0 	sub	r10,r8,-48
80008586:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000858a:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][1] = P32;
8000858e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008592:	ec fa 00 18 	ld.w	r10,r6[24]
80008596:	12 98       	mov	r8,r9
80008598:	a3 78       	lsl	r8,0x3
8000859a:	12 08       	add	r8,r9
8000859c:	a3 78       	lsl	r8,0x3
8000859e:	f4 08 00 08 	add	r8,r10,r8
800085a2:	f0 ca ff c8 	sub	r10,r8,-56
800085a6:	ee e8 ff f0 	ld.d	r8,r7[-16]
800085aa:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][2] = P33;
800085ae:	ee f9 ff 84 	ld.w	r9,r7[-124]
800085b2:	ec fa 00 18 	ld.w	r10,r6[24]
800085b6:	12 98       	mov	r8,r9
800085b8:	a3 78       	lsl	r8,0x3
800085ba:	12 08       	add	r8,r9
800085bc:	a3 78       	lsl	r8,0x3
800085be:	f4 08 00 08 	add	r8,r10,r8
800085c2:	f0 ca ff c0 	sub	r10,r8,-64
800085c6:	ee e8 ff f8 	ld.d	r8,r7[-8]
800085ca:	f4 e9 00 00 	st.d	r10[0],r8
	
	/*************************************************************************************/
	y = position_meas - centralData->position_estimator.localPosition.pos[axis];
800085ce:	ec f8 00 00 	ld.w	r8,r6[0]
800085d2:	70 09       	ld.w	r9,r8[0x0]
800085d4:	ee f8 ff 84 	ld.w	r8,r7[-124]
800085d8:	f0 c8 fc 99 	sub	r8,r8,-871
800085dc:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
800085e0:	10 9c       	mov	r12,r8
800085e2:	f0 16 00 02 	mcall	r6[8]
800085e6:	14 98       	mov	r8,r10
800085e8:	16 99       	mov	r9,r11
800085ea:	ee ea ff 7c 	ld.d	r10,r7[-132]
800085ee:	f0 16 00 11 	mcall	r6[68]
800085f2:	14 98       	mov	r8,r10
800085f4:	16 99       	mov	r9,r11
800085f6:	ee e9 ff 88 	st.d	r7[-120],r8
	
	S = P2[axis][0][0] + R2[axis];
800085fa:	ee f9 ff 84 	ld.w	r9,r7[-124]
800085fe:	ec fa 00 1c 	ld.w	r10,r6[28]
80008602:	12 98       	mov	r8,r9
80008604:	a3 78       	lsl	r8,0x3
80008606:	12 08       	add	r8,r9
80008608:	a3 78       	lsl	r8,0x3
8000860a:	f4 08 00 08 	add	r8,r10,r8
8000860e:	f0 ea 00 00 	ld.d	r10,r8[0]
80008612:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008616:	ec f8 01 64 	ld.w	r8,r6[356]
8000861a:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000861e:	f0 16 00 05 	mcall	r6[20]
80008622:	14 98       	mov	r8,r10
80008624:	16 99       	mov	r9,r11
80008626:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P2[axis][0][0] * 1/S;
8000862a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000862e:	ec fa 00 1c 	ld.w	r10,r6[28]
80008632:	12 98       	mov	r8,r9
80008634:	a3 78       	lsl	r8,0x3
80008636:	12 08       	add	r8,r9
80008638:	a3 78       	lsl	r8,0x3
8000863a:	f4 08 00 08 	add	r8,r10,r8
8000863e:	f0 ea 00 00 	ld.d	r10,r8[0]
80008642:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008646:	f0 16 00 0c 	mcall	r6[48]
8000864a:	14 98       	mov	r8,r10
8000864c:	16 99       	mov	r9,r11
8000864e:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P2[axis][1][0] * 1/S;
80008652:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008656:	ec fa 00 1c 	ld.w	r10,r6[28]
8000865a:	12 98       	mov	r8,r9
8000865c:	a3 78       	lsl	r8,0x3
8000865e:	12 08       	add	r8,r9
80008660:	a3 78       	lsl	r8,0x3
80008662:	f4 08 00 08 	add	r8,r10,r8
80008666:	2e 88       	sub	r8,-24
80008668:	f0 ea 00 00 	ld.d	r10,r8[0]
8000866c:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008670:	f0 16 00 0c 	mcall	r6[48]
80008674:	14 98       	mov	r8,r10
80008676:	16 99       	mov	r9,r11
80008678:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P2[axis][2][0] * 1/S;
8000867c:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008680:	ec fa 00 1c 	ld.w	r10,r6[28]
80008684:	12 98       	mov	r8,r9
80008686:	a3 78       	lsl	r8,0x3
80008688:	12 08       	add	r8,r9
8000868a:	a3 78       	lsl	r8,0x3
8000868c:	f4 08 00 08 	add	r8,r10,r8
80008690:	2d 08       	sub	r8,-48
80008692:	f0 ea 00 00 	ld.d	r10,r8[0]
80008696:	ee e8 ff 98 	ld.d	r8,r7[-104]
8000869a:	f0 16 00 0c 	mcall	r6[48]
8000869e:	14 98       	mov	r8,r10
800086a0:	16 99       	mov	r9,r11
800086a2:	ee e9 ff b0 	st.d	r7[-80],r8
	
	centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * y;
800086a6:	ec f8 00 00 	ld.w	r8,r6[0]
800086aa:	70 01       	ld.w	r1,r8[0x0]
800086ac:	ee f5 ff 84 	ld.w	r5,r7[-124]
800086b0:	ec f8 00 00 	ld.w	r8,r6[0]
800086b4:	70 09       	ld.w	r9,r8[0x0]
800086b6:	ee f8 ff 84 	ld.w	r8,r7[-124]
800086ba:	f0 c8 fc 99 	sub	r8,r8,-871
800086be:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
800086c2:	10 9c       	mov	r12,r8
800086c4:	f0 16 00 02 	mcall	r6[8]
800086c8:	14 92       	mov	r2,r10
800086ca:	16 93       	mov	r3,r11
800086cc:	ee e8 ff 88 	ld.d	r8,r7[-120]
800086d0:	ee ea ff a0 	ld.d	r10,r7[-96]
800086d4:	f0 16 00 03 	mcall	r6[12]
800086d8:	14 98       	mov	r8,r10
800086da:	16 99       	mov	r9,r11
800086dc:	04 9a       	mov	r10,r2
800086de:	06 9b       	mov	r11,r3
800086e0:	f0 16 00 05 	mcall	r6[20]
800086e4:	14 98       	mov	r8,r10
800086e6:	16 99       	mov	r9,r11
800086e8:	10 9a       	mov	r10,r8
800086ea:	12 9b       	mov	r11,r9
800086ec:	f0 16 00 09 	mcall	r6[36]
800086f0:	18 99       	mov	r9,r12
800086f2:	ea c8 fc 99 	sub	r8,r5,-871
800086f6:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * y;
800086fa:	ec f8 00 00 	ld.w	r8,r6[0]
800086fe:	70 01       	ld.w	r1,r8[0x0]
80008700:	ee f5 ff 84 	ld.w	r5,r7[-124]
80008704:	ec f8 00 00 	ld.w	r8,r6[0]
80008708:	70 09       	ld.w	r9,r8[0x0]
8000870a:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000870e:	f0 c8 fc a3 	sub	r8,r8,-861
80008712:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80008716:	10 9c       	mov	r12,r8
80008718:	f0 16 00 02 	mcall	r6[8]
8000871c:	14 92       	mov	r2,r10
8000871e:	16 93       	mov	r3,r11
80008720:	ee e8 ff 88 	ld.d	r8,r7[-120]
80008724:	ee ea ff a8 	ld.d	r10,r7[-88]
80008728:	f0 16 00 03 	mcall	r6[12]
8000872c:	14 98       	mov	r8,r10
8000872e:	16 99       	mov	r9,r11
80008730:	04 9a       	mov	r10,r2
80008732:	06 9b       	mov	r11,r3
80008734:	f0 16 00 05 	mcall	r6[20]
80008738:	14 98       	mov	r8,r10
8000873a:	16 99       	mov	r9,r11
8000873c:	10 9a       	mov	r10,r8
8000873e:	12 9b       	mov	r11,r9
80008740:	f0 16 00 09 	mcall	r6[36]
80008744:	18 99       	mov	r9,r12
80008746:	ea c8 fc a3 	sub	r8,r5,-861
8000874a:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->imu1.attitude.be[axis+ACC_OFFSET] = centralData->imu1.attitude.be[axis+ACC_OFFSET] + K3 * y;
8000874e:	ec f8 00 00 	ld.w	r8,r6[0]
80008752:	70 01       	ld.w	r1,r8[0x0]
80008754:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008758:	f0 c5 ff fd 	sub	r5,r8,-3
8000875c:	ec f8 00 00 	ld.w	r8,r6[0]
80008760:	70 09       	ld.w	r9,r8[0x0]
80008762:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008766:	2f d8       	sub	r8,-3
80008768:	2f 48       	sub	r8,-12
8000876a:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
8000876e:	10 9c       	mov	r12,r8
80008770:	f0 16 00 02 	mcall	r6[8]
80008774:	14 92       	mov	r2,r10
80008776:	16 93       	mov	r3,r11
80008778:	ee e8 ff 88 	ld.d	r8,r7[-120]
8000877c:	ee ea ff b0 	ld.d	r10,r7[-80]
80008780:	f0 16 00 03 	mcall	r6[12]
80008784:	14 98       	mov	r8,r10
80008786:	16 99       	mov	r9,r11
80008788:	04 9a       	mov	r10,r2
8000878a:	06 9b       	mov	r11,r3
8000878c:	f0 16 00 05 	mcall	r6[20]
80008790:	14 98       	mov	r8,r10
80008792:	16 99       	mov	r9,r11
80008794:	10 9a       	mov	r10,r8
80008796:	12 9b       	mov	r11,r9
80008798:	f0 16 00 09 	mcall	r6[36]
8000879c:	18 99       	mov	r9,r12
8000879e:	ea c8 ff f4 	sub	r8,r5,-12
800087a2:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	
	P11 = (1. - K1) * P2[axis][0][0];
800087a6:	ee e8 ff a0 	ld.d	r8,r7[-96]
800087aa:	30 0a       	mov	r10,0
800087ac:	fc 1b 3f f0 	movh	r11,0x3ff0
800087b0:	f0 16 00 11 	mcall	r6[68]
800087b4:	14 98       	mov	r8,r10
800087b6:	16 99       	mov	r9,r11
800087b8:	10 9a       	mov	r10,r8
800087ba:	12 9b       	mov	r11,r9
800087bc:	ee f9 ff 84 	ld.w	r9,r7[-124]
800087c0:	ec fc 00 1c 	ld.w	r12,r6[28]
800087c4:	12 98       	mov	r8,r9
800087c6:	a3 78       	lsl	r8,0x3
800087c8:	12 08       	add	r8,r9
800087ca:	a3 78       	lsl	r8,0x3
800087cc:	f8 08 00 08 	add	r8,r12,r8
800087d0:	f0 e8 00 00 	ld.d	r8,r8[0]
800087d4:	f0 16 00 03 	mcall	r6[12]
800087d8:	14 98       	mov	r8,r10
800087da:	16 99       	mov	r9,r11
800087dc:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = (1. - K1) * P2[axis][0][1];
800087e0:	ee e8 ff a0 	ld.d	r8,r7[-96]
800087e4:	30 0a       	mov	r10,0
800087e6:	fc 1b 3f f0 	movh	r11,0x3ff0
800087ea:	f0 16 00 11 	mcall	r6[68]
800087ee:	14 98       	mov	r8,r10
800087f0:	16 99       	mov	r9,r11
800087f2:	10 9a       	mov	r10,r8
800087f4:	12 9b       	mov	r11,r9
800087f6:	ee f9 ff 84 	ld.w	r9,r7[-124]
800087fa:	ec fc 00 1c 	ld.w	r12,r6[28]
800087fe:	12 98       	mov	r8,r9
80008800:	a3 78       	lsl	r8,0x3
80008802:	12 08       	add	r8,r9
80008804:	2f f8       	sub	r8,-1
80008806:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000880a:	f0 16 00 03 	mcall	r6[12]
8000880e:	14 98       	mov	r8,r10
80008810:	16 99       	mov	r9,r11
80008812:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = (1. - K1) * P2[axis][0][2];
80008816:	ee e8 ff a0 	ld.d	r8,r7[-96]
8000881a:	30 0a       	mov	r10,0
8000881c:	fc 1b 3f f0 	movh	r11,0x3ff0
80008820:	f0 16 00 11 	mcall	r6[68]
80008824:	14 98       	mov	r8,r10
80008826:	16 99       	mov	r9,r11
80008828:	10 9a       	mov	r10,r8
8000882a:	12 9b       	mov	r11,r9
8000882c:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008830:	ec fc 00 1c 	ld.w	r12,r6[28]
80008834:	12 98       	mov	r8,r9
80008836:	a3 78       	lsl	r8,0x3
80008838:	12 08       	add	r8,r9
8000883a:	a3 78       	lsl	r8,0x3
8000883c:	f8 08 00 08 	add	r8,r12,r8
80008840:	2f 08       	sub	r8,-16
80008842:	f0 e8 00 00 	ld.d	r8,r8[0]
80008846:	f0 16 00 03 	mcall	r6[12]
8000884a:	14 98       	mov	r8,r10
8000884c:	16 99       	mov	r9,r11
8000884e:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = -K2 * P2[axis][0][0] + P2[axis][1][0];
80008852:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008856:	10 99       	mov	r9,r8
80008858:	ee 19 80 00 	eorh	r9,0x8000
8000885c:	ef 49 ff 4c 	st.w	r7[-180],r9
80008860:	ee f8 ff ac 	ld.w	r8,r7[-84]
80008864:	ef 48 ff 50 	st.w	r7[-176],r8
80008868:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000886c:	ec fa 00 1c 	ld.w	r10,r6[28]
80008870:	12 98       	mov	r8,r9
80008872:	a3 78       	lsl	r8,0x3
80008874:	12 08       	add	r8,r9
80008876:	a3 78       	lsl	r8,0x3
80008878:	f4 08 00 08 	add	r8,r10,r8
8000887c:	f0 e8 00 00 	ld.d	r8,r8[0]
80008880:	ee ea ff 4c 	ld.d	r10,r7[-180]
80008884:	f0 16 00 03 	mcall	r6[12]
80008888:	14 98       	mov	r8,r10
8000888a:	16 99       	mov	r9,r11
8000888c:	10 9a       	mov	r10,r8
8000888e:	12 9b       	mov	r11,r9
80008890:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008894:	ec fc 00 1c 	ld.w	r12,r6[28]
80008898:	12 98       	mov	r8,r9
8000889a:	a3 78       	lsl	r8,0x3
8000889c:	12 08       	add	r8,r9
8000889e:	a3 78       	lsl	r8,0x3
800088a0:	f8 08 00 08 	add	r8,r12,r8
800088a4:	2e 88       	sub	r8,-24
800088a6:	f0 e8 00 00 	ld.d	r8,r8[0]
800088aa:	f0 16 00 05 	mcall	r6[20]
800088ae:	14 98       	mov	r8,r10
800088b0:	16 99       	mov	r9,r11
800088b2:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = -K2 * P2[axis][0][1] + P2[axis][1][1];
800088b6:	ee f8 ff a8 	ld.w	r8,r7[-88]
800088ba:	10 99       	mov	r9,r8
800088bc:	ee 19 80 00 	eorh	r9,0x8000
800088c0:	ef 49 ff 54 	st.w	r7[-172],r9
800088c4:	ee f8 ff ac 	ld.w	r8,r7[-84]
800088c8:	ef 48 ff 58 	st.w	r7[-168],r8
800088cc:	ee f9 ff 84 	ld.w	r9,r7[-124]
800088d0:	ec fa 00 1c 	ld.w	r10,r6[28]
800088d4:	12 98       	mov	r8,r9
800088d6:	a3 78       	lsl	r8,0x3
800088d8:	12 08       	add	r8,r9
800088da:	2f f8       	sub	r8,-1
800088dc:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
800088e0:	ee ea ff 54 	ld.d	r10,r7[-172]
800088e4:	f0 16 00 03 	mcall	r6[12]
800088e8:	14 98       	mov	r8,r10
800088ea:	16 99       	mov	r9,r11
800088ec:	10 9a       	mov	r10,r8
800088ee:	12 9b       	mov	r11,r9
800088f0:	ee f9 ff 84 	ld.w	r9,r7[-124]
800088f4:	ec fc 00 1c 	ld.w	r12,r6[28]
800088f8:	12 98       	mov	r8,r9
800088fa:	a3 78       	lsl	r8,0x3
800088fc:	12 08       	add	r8,r9
800088fe:	a3 78       	lsl	r8,0x3
80008900:	f8 08 00 08 	add	r8,r12,r8
80008904:	2e 08       	sub	r8,-32
80008906:	f0 e8 00 00 	ld.d	r8,r8[0]
8000890a:	f0 16 00 05 	mcall	r6[20]
8000890e:	14 98       	mov	r8,r10
80008910:	16 99       	mov	r9,r11
80008912:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = -K2 * P2[axis][0][2] + P2[axis][1][2];
80008916:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000891a:	10 99       	mov	r9,r8
8000891c:	ee 19 80 00 	eorh	r9,0x8000
80008920:	ef 49 ff 5c 	st.w	r7[-164],r9
80008924:	ee f8 ff ac 	ld.w	r8,r7[-84]
80008928:	ef 48 ff 60 	st.w	r7[-160],r8
8000892c:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008930:	ec fa 00 1c 	ld.w	r10,r6[28]
80008934:	12 98       	mov	r8,r9
80008936:	a3 78       	lsl	r8,0x3
80008938:	12 08       	add	r8,r9
8000893a:	a3 78       	lsl	r8,0x3
8000893c:	f4 08 00 08 	add	r8,r10,r8
80008940:	2f 08       	sub	r8,-16
80008942:	f0 e8 00 00 	ld.d	r8,r8[0]
80008946:	ee ea ff 5c 	ld.d	r10,r7[-164]
8000894a:	f0 16 00 03 	mcall	r6[12]
8000894e:	14 98       	mov	r8,r10
80008950:	16 99       	mov	r9,r11
80008952:	10 9a       	mov	r10,r8
80008954:	12 9b       	mov	r11,r9
80008956:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000895a:	ec fc 00 1c 	ld.w	r12,r6[28]
8000895e:	12 98       	mov	r8,r9
80008960:	a3 78       	lsl	r8,0x3
80008962:	12 08       	add	r8,r9
80008964:	a3 78       	lsl	r8,0x3
80008966:	f8 08 00 08 	add	r8,r12,r8
8000896a:	2d 88       	sub	r8,-40
8000896c:	f0 e8 00 00 	ld.d	r8,r8[0]
80008970:	f0 16 00 05 	mcall	r6[20]
80008974:	14 98       	mov	r8,r10
80008976:	16 99       	mov	r9,r11
80008978:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P2[axis][0][0] + P2[axis][2][0];
8000897c:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008980:	10 99       	mov	r9,r8
80008982:	ee 19 80 00 	eorh	r9,0x8000
80008986:	ef 49 ff 64 	st.w	r7[-156],r9
8000898a:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000898e:	ef 48 ff 68 	st.w	r7[-152],r8
80008992:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008996:	ec fa 00 1c 	ld.w	r10,r6[28]
8000899a:	12 98       	mov	r8,r9
8000899c:	a3 78       	lsl	r8,0x3
8000899e:	12 08       	add	r8,r9
800089a0:	a3 78       	lsl	r8,0x3
800089a2:	f4 08 00 08 	add	r8,r10,r8
800089a6:	f0 e8 00 00 	ld.d	r8,r8[0]
800089aa:	ee ea ff 64 	ld.d	r10,r7[-156]
800089ae:	f0 16 00 03 	mcall	r6[12]
800089b2:	14 98       	mov	r8,r10
800089b4:	16 99       	mov	r9,r11
800089b6:	10 9a       	mov	r10,r8
800089b8:	12 9b       	mov	r11,r9
800089ba:	ee f9 ff 84 	ld.w	r9,r7[-124]
800089be:	ec fc 00 1c 	ld.w	r12,r6[28]
800089c2:	12 98       	mov	r8,r9
800089c4:	a3 78       	lsl	r8,0x3
800089c6:	12 08       	add	r8,r9
800089c8:	a3 78       	lsl	r8,0x3
800089ca:	f8 08 00 08 	add	r8,r12,r8
800089ce:	2d 08       	sub	r8,-48
800089d0:	f0 e8 00 00 	ld.d	r8,r8[0]
800089d4:	f0 16 00 05 	mcall	r6[20]
800089d8:	14 98       	mov	r8,r10
800089da:	16 99       	mov	r9,r11
800089dc:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P2[axis][0][1] + P2[axis][2][1];
800089e0:	ee f8 ff b0 	ld.w	r8,r7[-80]
800089e4:	10 99       	mov	r9,r8
800089e6:	ee 19 80 00 	eorh	r9,0x8000
800089ea:	ef 49 ff 6c 	st.w	r7[-148],r9
800089ee:	ee f8 ff b4 	ld.w	r8,r7[-76]
800089f2:	ef 48 ff 70 	st.w	r7[-144],r8
800089f6:	ee f9 ff 84 	ld.w	r9,r7[-124]
800089fa:	ec fa 00 1c 	ld.w	r10,r6[28]
800089fe:	12 98       	mov	r8,r9
80008a00:	a3 78       	lsl	r8,0x3
80008a02:	12 08       	add	r8,r9
80008a04:	2f f8       	sub	r8,-1
80008a06:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80008a0a:	ee ea ff 6c 	ld.d	r10,r7[-148]
80008a0e:	f0 16 00 03 	mcall	r6[12]
80008a12:	14 98       	mov	r8,r10
80008a14:	16 99       	mov	r9,r11
80008a16:	10 9a       	mov	r10,r8
80008a18:	12 9b       	mov	r11,r9
80008a1a:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008a1e:	ec fc 00 1c 	ld.w	r12,r6[28]
80008a22:	12 98       	mov	r8,r9
80008a24:	a3 78       	lsl	r8,0x3
80008a26:	12 08       	add	r8,r9
80008a28:	a3 78       	lsl	r8,0x3
80008a2a:	f8 08 00 08 	add	r8,r12,r8
80008a2e:	2c 88       	sub	r8,-56
80008a30:	f0 e8 00 00 	ld.d	r8,r8[0]
80008a34:	f0 16 00 05 	mcall	r6[20]
80008a38:	14 98       	mov	r8,r10
80008a3a:	16 99       	mov	r9,r11
80008a3c:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P2[axis][0][2] + P2[axis][2][2];
80008a40:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008a44:	10 99       	mov	r9,r8
80008a46:	ee 19 80 00 	eorh	r9,0x8000
80008a4a:	ef 49 ff 74 	st.w	r7[-140],r9
80008a4e:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008a52:	ef 48 ff 78 	st.w	r7[-136],r8
80008a56:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008a5a:	ec fa 00 1c 	ld.w	r10,r6[28]
80008a5e:	12 98       	mov	r8,r9
80008a60:	a3 78       	lsl	r8,0x3
80008a62:	12 08       	add	r8,r9
80008a64:	a3 78       	lsl	r8,0x3
80008a66:	f4 08 00 08 	add	r8,r10,r8
80008a6a:	2f 08       	sub	r8,-16
80008a6c:	f0 e8 00 00 	ld.d	r8,r8[0]
80008a70:	ee ea ff 74 	ld.d	r10,r7[-140]
80008a74:	f0 16 00 03 	mcall	r6[12]
80008a78:	14 98       	mov	r8,r10
80008a7a:	16 99       	mov	r9,r11
80008a7c:	10 9a       	mov	r10,r8
80008a7e:	12 9b       	mov	r11,r9
80008a80:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008a84:	ec fc 00 1c 	ld.w	r12,r6[28]
80008a88:	12 98       	mov	r8,r9
80008a8a:	a3 78       	lsl	r8,0x3
80008a8c:	12 08       	add	r8,r9
80008a8e:	a3 78       	lsl	r8,0x3
80008a90:	f8 08 00 08 	add	r8,r12,r8
80008a94:	2c 08       	sub	r8,-64
80008a96:	f0 e8 00 00 	ld.d	r8,r8[0]
80008a9a:	f0 16 00 05 	mcall	r6[20]
80008a9e:	14 98       	mov	r8,r10
80008aa0:	16 99       	mov	r9,r11
80008aa2:	ee e9 ff f8 	st.d	r7[-8],r8

	P2[axis][0][0] = P11;
80008aa6:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008aaa:	ec fa 00 1c 	ld.w	r10,r6[28]
80008aae:	12 98       	mov	r8,r9
80008ab0:	a3 78       	lsl	r8,0x3
80008ab2:	12 08       	add	r8,r9
80008ab4:	a3 78       	lsl	r8,0x3
80008ab6:	10 0a       	add	r10,r8
80008ab8:	ee e8 ff b8 	ld.d	r8,r7[-72]
80008abc:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][0][1] = P12;
80008ac0:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008ac4:	ec fa 00 1c 	ld.w	r10,r6[28]
80008ac8:	12 98       	mov	r8,r9
80008aca:	a3 78       	lsl	r8,0x3
80008acc:	12 08       	add	r8,r9
80008ace:	f0 cb ff ff 	sub	r11,r8,-1
80008ad2:	ee e8 ff c0 	ld.d	r8,r7[-64]
80008ad6:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][0][2] = P13;
80008ada:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008ade:	ec fa 00 1c 	ld.w	r10,r6[28]
80008ae2:	12 98       	mov	r8,r9
80008ae4:	a3 78       	lsl	r8,0x3
80008ae6:	12 08       	add	r8,r9
80008ae8:	a3 78       	lsl	r8,0x3
80008aea:	f4 08 00 08 	add	r8,r10,r8
80008aee:	f0 ca ff f0 	sub	r10,r8,-16
80008af2:	ee e8 ff c8 	ld.d	r8,r7[-56]
80008af6:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][0] = P21;
80008afa:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008afe:	ec fa 00 1c 	ld.w	r10,r6[28]
80008b02:	12 98       	mov	r8,r9
80008b04:	a3 78       	lsl	r8,0x3
80008b06:	12 08       	add	r8,r9
80008b08:	a3 78       	lsl	r8,0x3
80008b0a:	f4 08 00 08 	add	r8,r10,r8
80008b0e:	f0 ca ff e8 	sub	r10,r8,-24
80008b12:	ee e8 ff d0 	ld.d	r8,r7[-48]
80008b16:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = P22;
80008b1a:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008b1e:	ec fa 00 1c 	ld.w	r10,r6[28]
80008b22:	12 98       	mov	r8,r9
80008b24:	a3 78       	lsl	r8,0x3
80008b26:	12 08       	add	r8,r9
80008b28:	a3 78       	lsl	r8,0x3
80008b2a:	f4 08 00 08 	add	r8,r10,r8
80008b2e:	f0 ca ff e0 	sub	r10,r8,-32
80008b32:	ee e8 ff d8 	ld.d	r8,r7[-40]
80008b36:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][2] = P23;
80008b3a:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008b3e:	ec fa 00 1c 	ld.w	r10,r6[28]
80008b42:	12 98       	mov	r8,r9
80008b44:	a3 78       	lsl	r8,0x3
80008b46:	12 08       	add	r8,r9
80008b48:	a3 78       	lsl	r8,0x3
80008b4a:	f4 08 00 08 	add	r8,r10,r8
80008b4e:	f0 ca ff d8 	sub	r10,r8,-40
80008b52:	ee e8 ff e0 	ld.d	r8,r7[-32]
80008b56:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][0] = P31;
80008b5a:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008b5e:	ec fa 00 1c 	ld.w	r10,r6[28]
80008b62:	12 98       	mov	r8,r9
80008b64:	a3 78       	lsl	r8,0x3
80008b66:	12 08       	add	r8,r9
80008b68:	a3 78       	lsl	r8,0x3
80008b6a:	f4 08 00 08 	add	r8,r10,r8
80008b6e:	f0 ca ff d0 	sub	r10,r8,-48
80008b72:	ee e8 ff e8 	ld.d	r8,r7[-24]
80008b76:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][1] = P32;
80008b7a:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008b7e:	ec fa 00 1c 	ld.w	r10,r6[28]
80008b82:	12 98       	mov	r8,r9
80008b84:	a3 78       	lsl	r8,0x3
80008b86:	12 08       	add	r8,r9
80008b88:	a3 78       	lsl	r8,0x3
80008b8a:	f4 08 00 08 	add	r8,r10,r8
80008b8e:	f0 ca ff c8 	sub	r10,r8,-56
80008b92:	ee e8 ff f0 	ld.d	r8,r7[-16]
80008b96:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][2] = P33;
80008b9a:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008b9e:	ec fa 00 1c 	ld.w	r10,r6[28]
80008ba2:	12 98       	mov	r8,r9
80008ba4:	a3 78       	lsl	r8,0x3
80008ba6:	12 08       	add	r8,r9
80008ba8:	a3 78       	lsl	r8,0x3
80008baa:	f4 08 00 08 	add	r8,r10,r8
80008bae:	f0 ca ff c0 	sub	r10,r8,-64
80008bb2:	ee e8 ff f8 	ld.d	r8,r7[-8]
80008bb6:	f4 e9 00 00 	st.d	r10[0],r8
}
80008bba:	2c 7d       	sub	sp,-228
80008bbc:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
80008bc0:	80 00       	ld.sh	r0,r0[0x0]
80008bc2:	7e 4a       	ld.w	r10,pc[0x10]

80008bc4 <e_kalman_update_speed>:

// update covariance
Pp = Pm - K*H*Pm;
*/
void e_kalman_update_speed(int axis, float speed_meas)
{
80008bc4:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80008bc8:	1a 97       	mov	r7,sp
80008bca:	fa cd 00 d8 	sub	sp,sp,216
80008bce:	fe f6 0c 1a 	ld.w	r6,pc[3098]
80008bd2:	1e 26       	rsub	r6,pc
80008bd4:	ef 4c ff 8c 	st.w	r7[-116],r12
80008bd8:	ef 4b ff 88 	st.w	r7[-120],r11
	
	double yd,S,K1,K2,K3;
	double P11,P12,P13,P21,P22,P23,P31,P32,P33;
	
	yd = speed_meas - centralData->estimation.state[axis][SPEED];
80008bdc:	ee fc ff 88 	ld.w	r12,r7[-120]
80008be0:	f0 16 00 02 	mcall	r6[8]
80008be4:	ec f8 00 00 	ld.w	r8,r6[0]
80008be8:	70 0c       	ld.w	r12,r8[0x0]
80008bea:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008bee:	12 98       	mov	r8,r9
80008bf0:	a1 78       	lsl	r8,0x1
80008bf2:	12 08       	add	r8,r9
80008bf4:	2f f8       	sub	r8,-1
80008bf6:	a3 78       	lsl	r8,0x3
80008bf8:	f8 08 00 08 	add	r8,r12,r8
80008bfc:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
80008c00:	f0 16 00 11 	mcall	r6[68]
80008c04:	14 98       	mov	r8,r10
80008c06:	16 99       	mov	r9,r11
80008c08:	ee e9 ff 90 	st.d	r7[-112],r8
	
	
	S = P[axis][1][1] + R[axis];
80008c0c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008c10:	ec fa 00 18 	ld.w	r10,r6[24]
80008c14:	12 98       	mov	r8,r9
80008c16:	a3 78       	lsl	r8,0x3
80008c18:	12 08       	add	r8,r9
80008c1a:	a3 78       	lsl	r8,0x3
80008c1c:	f4 08 00 08 	add	r8,r10,r8
80008c20:	2e 08       	sub	r8,-32
80008c22:	f0 ea 00 00 	ld.d	r10,r8[0]
80008c26:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008c2a:	ec f8 01 68 	ld.w	r8,r6[360]
80008c2e:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80008c32:	f0 16 00 05 	mcall	r6[20]
80008c36:	14 98       	mov	r8,r10
80008c38:	16 99       	mov	r9,r11
80008c3a:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P[axis][0][1] * 1/S;
80008c3e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008c42:	ec fa 00 18 	ld.w	r10,r6[24]
80008c46:	12 98       	mov	r8,r9
80008c48:	a3 78       	lsl	r8,0x3
80008c4a:	12 08       	add	r8,r9
80008c4c:	2f f8       	sub	r8,-1
80008c4e:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
80008c52:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008c56:	f0 16 00 0c 	mcall	r6[48]
80008c5a:	14 98       	mov	r8,r10
80008c5c:	16 99       	mov	r9,r11
80008c5e:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P[axis][1][1] * 1/S;
80008c62:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008c66:	ec fa 00 18 	ld.w	r10,r6[24]
80008c6a:	12 98       	mov	r8,r9
80008c6c:	a3 78       	lsl	r8,0x3
80008c6e:	12 08       	add	r8,r9
80008c70:	a3 78       	lsl	r8,0x3
80008c72:	f4 08 00 08 	add	r8,r10,r8
80008c76:	2e 08       	sub	r8,-32
80008c78:	f0 ea 00 00 	ld.d	r10,r8[0]
80008c7c:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008c80:	f0 16 00 0c 	mcall	r6[48]
80008c84:	14 98       	mov	r8,r10
80008c86:	16 99       	mov	r9,r11
80008c88:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P[axis][2][1] * 1/S;
80008c8c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008c90:	ec fa 00 18 	ld.w	r10,r6[24]
80008c94:	12 98       	mov	r8,r9
80008c96:	a3 78       	lsl	r8,0x3
80008c98:	12 08       	add	r8,r9
80008c9a:	a3 78       	lsl	r8,0x3
80008c9c:	f4 08 00 08 	add	r8,r10,r8
80008ca0:	2c 88       	sub	r8,-56
80008ca2:	f0 ea 00 00 	ld.d	r10,r8[0]
80008ca6:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008caa:	f0 16 00 0c 	mcall	r6[48]
80008cae:	14 98       	mov	r8,r10
80008cb0:	16 99       	mov	r9,r11
80008cb2:	ee e9 ff b0 	st.d	r7[-80],r8

	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * yd;
80008cb6:	ec f8 00 00 	ld.w	r8,r6[0]
80008cba:	70 01       	ld.w	r1,r8[0x0]
80008cbc:	ee f5 ff 8c 	ld.w	r5,r7[-116]
80008cc0:	ec f8 00 00 	ld.w	r8,r6[0]
80008cc4:	70 0a       	ld.w	r10,r8[0x0]
80008cc6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008cca:	12 98       	mov	r8,r9
80008ccc:	a1 78       	lsl	r8,0x1
80008cce:	12 08       	add	r8,r9
80008cd0:	a3 78       	lsl	r8,0x3
80008cd2:	f4 08 00 08 	add	r8,r10,r8
80008cd6:	f0 c8 f4 a4 	sub	r8,r8,-2908
80008cda:	f0 e2 00 00 	ld.d	r2,r8[0]
80008cde:	ee e8 ff 90 	ld.d	r8,r7[-112]
80008ce2:	ee ea ff a0 	ld.d	r10,r7[-96]
80008ce6:	f0 16 00 03 	mcall	r6[12]
80008cea:	14 98       	mov	r8,r10
80008cec:	16 99       	mov	r9,r11
80008cee:	04 9a       	mov	r10,r2
80008cf0:	06 9b       	mov	r11,r3
80008cf2:	f0 16 00 05 	mcall	r6[20]
80008cf6:	14 98       	mov	r8,r10
80008cf8:	16 99       	mov	r9,r11
80008cfa:	10 9a       	mov	r10,r8
80008cfc:	12 9b       	mov	r11,r9
80008cfe:	0a 98       	mov	r8,r5
80008d00:	a1 78       	lsl	r8,0x1
80008d02:	0a 08       	add	r8,r5
80008d04:	a3 78       	lsl	r8,0x3
80008d06:	e2 08 00 08 	add	r8,r1,r8
80008d0a:	f0 c8 f4 a4 	sub	r8,r8,-2908
80008d0e:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * yd;
80008d12:	ec f8 00 00 	ld.w	r8,r6[0]
80008d16:	70 01       	ld.w	r1,r8[0x0]
80008d18:	ee f5 ff 8c 	ld.w	r5,r7[-116]
80008d1c:	ec f8 00 00 	ld.w	r8,r6[0]
80008d20:	70 0a       	ld.w	r10,r8[0x0]
80008d22:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008d26:	12 98       	mov	r8,r9
80008d28:	a1 78       	lsl	r8,0x1
80008d2a:	12 08       	add	r8,r9
80008d2c:	2f f8       	sub	r8,-1
80008d2e:	a3 78       	lsl	r8,0x3
80008d30:	f4 08 00 08 	add	r8,r10,r8
80008d34:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
80008d38:	ee e8 ff 90 	ld.d	r8,r7[-112]
80008d3c:	ee ea ff a8 	ld.d	r10,r7[-88]
80008d40:	f0 16 00 03 	mcall	r6[12]
80008d44:	14 98       	mov	r8,r10
80008d46:	16 99       	mov	r9,r11
80008d48:	04 9a       	mov	r10,r2
80008d4a:	06 9b       	mov	r11,r3
80008d4c:	f0 16 00 05 	mcall	r6[20]
80008d50:	14 98       	mov	r8,r10
80008d52:	16 99       	mov	r9,r11
80008d54:	10 9a       	mov	r10,r8
80008d56:	12 9b       	mov	r11,r9
80008d58:	0a 98       	mov	r8,r5
80008d5a:	a1 78       	lsl	r8,0x1
80008d5c:	0a 08       	add	r8,r5
80008d5e:	2f f8       	sub	r8,-1
80008d60:	a3 78       	lsl	r8,0x3
80008d62:	e2 08 00 08 	add	r8,r1,r8
80008d66:	f0 eb 0b 5c 	st.d	r8[2908],r10
	centralData->estimation.state[axis][BIAIS] = centralData->estimation.state[axis][BIAIS] + K3 * yd;
80008d6a:	ec f8 00 00 	ld.w	r8,r6[0]
80008d6e:	70 01       	ld.w	r1,r8[0x0]
80008d70:	ee f5 ff 8c 	ld.w	r5,r7[-116]
80008d74:	ec f8 00 00 	ld.w	r8,r6[0]
80008d78:	70 0a       	ld.w	r10,r8[0x0]
80008d7a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008d7e:	12 98       	mov	r8,r9
80008d80:	a1 78       	lsl	r8,0x1
80008d82:	12 08       	add	r8,r9
80008d84:	a3 78       	lsl	r8,0x3
80008d86:	f4 08 00 08 	add	r8,r10,r8
80008d8a:	f0 c8 f4 94 	sub	r8,r8,-2924
80008d8e:	f0 e2 00 00 	ld.d	r2,r8[0]
80008d92:	ee e8 ff 90 	ld.d	r8,r7[-112]
80008d96:	ee ea ff b0 	ld.d	r10,r7[-80]
80008d9a:	f0 16 00 03 	mcall	r6[12]
80008d9e:	14 98       	mov	r8,r10
80008da0:	16 99       	mov	r9,r11
80008da2:	04 9a       	mov	r10,r2
80008da4:	06 9b       	mov	r11,r3
80008da6:	f0 16 00 05 	mcall	r6[20]
80008daa:	14 98       	mov	r8,r10
80008dac:	16 99       	mov	r9,r11
80008dae:	10 9a       	mov	r10,r8
80008db0:	12 9b       	mov	r11,r9
80008db2:	0a 98       	mov	r8,r5
80008db4:	a1 78       	lsl	r8,0x1
80008db6:	0a 08       	add	r8,r5
80008db8:	a3 78       	lsl	r8,0x3
80008dba:	e2 08 00 08 	add	r8,r1,r8
80008dbe:	f0 c8 f4 94 	sub	r8,r8,-2924
80008dc2:	f0 eb 00 00 	st.d	r8[0],r10

	P11 = -K1 * P[axis][1][0] + P[axis][0][0];
80008dc6:	ee f8 ff a0 	ld.w	r8,r7[-96]
80008dca:	10 99       	mov	r9,r8
80008dcc:	ee 19 80 00 	eorh	r9,0x8000
80008dd0:	ef 49 ff 28 	st.w	r7[-216],r9
80008dd4:	ee f8 ff a4 	ld.w	r8,r7[-92]
80008dd8:	ef 48 ff 2c 	st.w	r7[-212],r8
80008ddc:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008de0:	ec fa 00 18 	ld.w	r10,r6[24]
80008de4:	12 98       	mov	r8,r9
80008de6:	a3 78       	lsl	r8,0x3
80008de8:	12 08       	add	r8,r9
80008dea:	a3 78       	lsl	r8,0x3
80008dec:	f4 08 00 08 	add	r8,r10,r8
80008df0:	2e 88       	sub	r8,-24
80008df2:	f0 e8 00 00 	ld.d	r8,r8[0]
80008df6:	ee ea ff 28 	ld.d	r10,r7[-216]
80008dfa:	f0 16 00 03 	mcall	r6[12]
80008dfe:	14 98       	mov	r8,r10
80008e00:	16 99       	mov	r9,r11
80008e02:	10 9a       	mov	r10,r8
80008e04:	12 9b       	mov	r11,r9
80008e06:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008e0a:	ec fc 00 18 	ld.w	r12,r6[24]
80008e0e:	12 98       	mov	r8,r9
80008e10:	a3 78       	lsl	r8,0x3
80008e12:	12 08       	add	r8,r9
80008e14:	a3 78       	lsl	r8,0x3
80008e16:	f8 08 00 08 	add	r8,r12,r8
80008e1a:	f0 e8 00 00 	ld.d	r8,r8[0]
80008e1e:	f0 16 00 05 	mcall	r6[20]
80008e22:	14 98       	mov	r8,r10
80008e24:	16 99       	mov	r9,r11
80008e26:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = -K1 * P[axis][1][1] + P[axis][0][1];
80008e2a:	ee f8 ff a0 	ld.w	r8,r7[-96]
80008e2e:	10 99       	mov	r9,r8
80008e30:	ee 19 80 00 	eorh	r9,0x8000
80008e34:	ef 49 ff 30 	st.w	r7[-208],r9
80008e38:	ee f8 ff a4 	ld.w	r8,r7[-92]
80008e3c:	ef 48 ff 34 	st.w	r7[-204],r8
80008e40:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008e44:	ec fa 00 18 	ld.w	r10,r6[24]
80008e48:	12 98       	mov	r8,r9
80008e4a:	a3 78       	lsl	r8,0x3
80008e4c:	12 08       	add	r8,r9
80008e4e:	a3 78       	lsl	r8,0x3
80008e50:	f4 08 00 08 	add	r8,r10,r8
80008e54:	2e 08       	sub	r8,-32
80008e56:	f0 e8 00 00 	ld.d	r8,r8[0]
80008e5a:	ee ea ff 30 	ld.d	r10,r7[-208]
80008e5e:	f0 16 00 03 	mcall	r6[12]
80008e62:	14 98       	mov	r8,r10
80008e64:	16 99       	mov	r9,r11
80008e66:	10 9a       	mov	r10,r8
80008e68:	12 9b       	mov	r11,r9
80008e6a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008e6e:	ec fc 00 18 	ld.w	r12,r6[24]
80008e72:	12 98       	mov	r8,r9
80008e74:	a3 78       	lsl	r8,0x3
80008e76:	12 08       	add	r8,r9
80008e78:	2f f8       	sub	r8,-1
80008e7a:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80008e7e:	f0 16 00 05 	mcall	r6[20]
80008e82:	14 98       	mov	r8,r10
80008e84:	16 99       	mov	r9,r11
80008e86:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = -K1 * P[axis][1][2] + P[axis][0][2];
80008e8a:	ee f8 ff a0 	ld.w	r8,r7[-96]
80008e8e:	10 99       	mov	r9,r8
80008e90:	ee 19 80 00 	eorh	r9,0x8000
80008e94:	ef 49 ff 38 	st.w	r7[-200],r9
80008e98:	ee f8 ff a4 	ld.w	r8,r7[-92]
80008e9c:	ef 48 ff 3c 	st.w	r7[-196],r8
80008ea0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008ea4:	ec fa 00 18 	ld.w	r10,r6[24]
80008ea8:	12 98       	mov	r8,r9
80008eaa:	a3 78       	lsl	r8,0x3
80008eac:	12 08       	add	r8,r9
80008eae:	a3 78       	lsl	r8,0x3
80008eb0:	f4 08 00 08 	add	r8,r10,r8
80008eb4:	2d 88       	sub	r8,-40
80008eb6:	f0 e8 00 00 	ld.d	r8,r8[0]
80008eba:	ee ea ff 38 	ld.d	r10,r7[-200]
80008ebe:	f0 16 00 03 	mcall	r6[12]
80008ec2:	14 98       	mov	r8,r10
80008ec4:	16 99       	mov	r9,r11
80008ec6:	10 9a       	mov	r10,r8
80008ec8:	12 9b       	mov	r11,r9
80008eca:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008ece:	ec fc 00 18 	ld.w	r12,r6[24]
80008ed2:	12 98       	mov	r8,r9
80008ed4:	a3 78       	lsl	r8,0x3
80008ed6:	12 08       	add	r8,r9
80008ed8:	a3 78       	lsl	r8,0x3
80008eda:	f8 08 00 08 	add	r8,r12,r8
80008ede:	2f 08       	sub	r8,-16
80008ee0:	f0 e8 00 00 	ld.d	r8,r8[0]
80008ee4:	f0 16 00 05 	mcall	r6[20]
80008ee8:	14 98       	mov	r8,r10
80008eea:	16 99       	mov	r9,r11
80008eec:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = (1. - K2) * P[axis][1][0];
80008ef0:	ee e8 ff a8 	ld.d	r8,r7[-88]
80008ef4:	30 0a       	mov	r10,0
80008ef6:	fc 1b 3f f0 	movh	r11,0x3ff0
80008efa:	f0 16 00 11 	mcall	r6[68]
80008efe:	14 98       	mov	r8,r10
80008f00:	16 99       	mov	r9,r11
80008f02:	10 9a       	mov	r10,r8
80008f04:	12 9b       	mov	r11,r9
80008f06:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008f0a:	ec fc 00 18 	ld.w	r12,r6[24]
80008f0e:	12 98       	mov	r8,r9
80008f10:	a3 78       	lsl	r8,0x3
80008f12:	12 08       	add	r8,r9
80008f14:	a3 78       	lsl	r8,0x3
80008f16:	f8 08 00 08 	add	r8,r12,r8
80008f1a:	2e 88       	sub	r8,-24
80008f1c:	f0 e8 00 00 	ld.d	r8,r8[0]
80008f20:	f0 16 00 03 	mcall	r6[12]
80008f24:	14 98       	mov	r8,r10
80008f26:	16 99       	mov	r9,r11
80008f28:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = (1. - K2) * P[axis][1][1];
80008f2c:	ee e8 ff a8 	ld.d	r8,r7[-88]
80008f30:	30 0a       	mov	r10,0
80008f32:	fc 1b 3f f0 	movh	r11,0x3ff0
80008f36:	f0 16 00 11 	mcall	r6[68]
80008f3a:	14 98       	mov	r8,r10
80008f3c:	16 99       	mov	r9,r11
80008f3e:	10 9a       	mov	r10,r8
80008f40:	12 9b       	mov	r11,r9
80008f42:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008f46:	ec fc 00 18 	ld.w	r12,r6[24]
80008f4a:	12 98       	mov	r8,r9
80008f4c:	a3 78       	lsl	r8,0x3
80008f4e:	12 08       	add	r8,r9
80008f50:	a3 78       	lsl	r8,0x3
80008f52:	f8 08 00 08 	add	r8,r12,r8
80008f56:	2e 08       	sub	r8,-32
80008f58:	f0 e8 00 00 	ld.d	r8,r8[0]
80008f5c:	f0 16 00 03 	mcall	r6[12]
80008f60:	14 98       	mov	r8,r10
80008f62:	16 99       	mov	r9,r11
80008f64:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = (1. - K2) * P[axis][1][2];
80008f68:	ee e8 ff a8 	ld.d	r8,r7[-88]
80008f6c:	30 0a       	mov	r10,0
80008f6e:	fc 1b 3f f0 	movh	r11,0x3ff0
80008f72:	f0 16 00 11 	mcall	r6[68]
80008f76:	14 98       	mov	r8,r10
80008f78:	16 99       	mov	r9,r11
80008f7a:	10 9a       	mov	r10,r8
80008f7c:	12 9b       	mov	r11,r9
80008f7e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008f82:	ec fc 00 18 	ld.w	r12,r6[24]
80008f86:	12 98       	mov	r8,r9
80008f88:	a3 78       	lsl	r8,0x3
80008f8a:	12 08       	add	r8,r9
80008f8c:	a3 78       	lsl	r8,0x3
80008f8e:	f8 08 00 08 	add	r8,r12,r8
80008f92:	2d 88       	sub	r8,-40
80008f94:	f0 e8 00 00 	ld.d	r8,r8[0]
80008f98:	f0 16 00 03 	mcall	r6[12]
80008f9c:	14 98       	mov	r8,r10
80008f9e:	16 99       	mov	r9,r11
80008fa0:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P[axis][1][0] + P[axis][2][0];
80008fa4:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008fa8:	10 99       	mov	r9,r8
80008faa:	ee 19 80 00 	eorh	r9,0x8000
80008fae:	ef 49 ff 40 	st.w	r7[-192],r9
80008fb2:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008fb6:	ef 48 ff 44 	st.w	r7[-188],r8
80008fba:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008fbe:	ec fa 00 18 	ld.w	r10,r6[24]
80008fc2:	12 98       	mov	r8,r9
80008fc4:	a3 78       	lsl	r8,0x3
80008fc6:	12 08       	add	r8,r9
80008fc8:	a3 78       	lsl	r8,0x3
80008fca:	f4 08 00 08 	add	r8,r10,r8
80008fce:	2e 88       	sub	r8,-24
80008fd0:	f0 e8 00 00 	ld.d	r8,r8[0]
80008fd4:	ee ea ff 40 	ld.d	r10,r7[-192]
80008fd8:	f0 16 00 03 	mcall	r6[12]
80008fdc:	14 98       	mov	r8,r10
80008fde:	16 99       	mov	r9,r11
80008fe0:	10 9a       	mov	r10,r8
80008fe2:	12 9b       	mov	r11,r9
80008fe4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80008fe8:	ec fc 00 18 	ld.w	r12,r6[24]
80008fec:	12 98       	mov	r8,r9
80008fee:	a3 78       	lsl	r8,0x3
80008ff0:	12 08       	add	r8,r9
80008ff2:	a3 78       	lsl	r8,0x3
80008ff4:	f8 08 00 08 	add	r8,r12,r8
80008ff8:	2d 08       	sub	r8,-48
80008ffa:	f0 e8 00 00 	ld.d	r8,r8[0]
80008ffe:	f0 16 00 05 	mcall	r6[20]
80009002:	14 98       	mov	r8,r10
80009004:	16 99       	mov	r9,r11
80009006:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P[axis][1][1] + P[axis][2][1];
8000900a:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000900e:	10 99       	mov	r9,r8
80009010:	ee 19 80 00 	eorh	r9,0x8000
80009014:	ef 49 ff 48 	st.w	r7[-184],r9
80009018:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000901c:	ef 48 ff 4c 	st.w	r7[-180],r8
80009020:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009024:	ec fa 00 18 	ld.w	r10,r6[24]
80009028:	12 98       	mov	r8,r9
8000902a:	a3 78       	lsl	r8,0x3
8000902c:	12 08       	add	r8,r9
8000902e:	a3 78       	lsl	r8,0x3
80009030:	f4 08 00 08 	add	r8,r10,r8
80009034:	2e 08       	sub	r8,-32
80009036:	f0 e8 00 00 	ld.d	r8,r8[0]
8000903a:	ee ea ff 48 	ld.d	r10,r7[-184]
8000903e:	f0 16 00 03 	mcall	r6[12]
80009042:	14 98       	mov	r8,r10
80009044:	16 99       	mov	r9,r11
80009046:	10 9a       	mov	r10,r8
80009048:	12 9b       	mov	r11,r9
8000904a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000904e:	ec fc 00 18 	ld.w	r12,r6[24]
80009052:	12 98       	mov	r8,r9
80009054:	a3 78       	lsl	r8,0x3
80009056:	12 08       	add	r8,r9
80009058:	a3 78       	lsl	r8,0x3
8000905a:	f8 08 00 08 	add	r8,r12,r8
8000905e:	2c 88       	sub	r8,-56
80009060:	f0 e8 00 00 	ld.d	r8,r8[0]
80009064:	f0 16 00 05 	mcall	r6[20]
80009068:	14 98       	mov	r8,r10
8000906a:	16 99       	mov	r9,r11
8000906c:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P[axis][1][2] + P[axis][2][2];
80009070:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009074:	10 99       	mov	r9,r8
80009076:	ee 19 80 00 	eorh	r9,0x8000
8000907a:	ef 49 ff 50 	st.w	r7[-176],r9
8000907e:	ee f8 ff b4 	ld.w	r8,r7[-76]
80009082:	ef 48 ff 54 	st.w	r7[-172],r8
80009086:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000908a:	ec fa 00 18 	ld.w	r10,r6[24]
8000908e:	12 98       	mov	r8,r9
80009090:	a3 78       	lsl	r8,0x3
80009092:	12 08       	add	r8,r9
80009094:	a3 78       	lsl	r8,0x3
80009096:	f4 08 00 08 	add	r8,r10,r8
8000909a:	2d 88       	sub	r8,-40
8000909c:	f0 e8 00 00 	ld.d	r8,r8[0]
800090a0:	ee ea ff 50 	ld.d	r10,r7[-176]
800090a4:	f0 16 00 03 	mcall	r6[12]
800090a8:	14 98       	mov	r8,r10
800090aa:	16 99       	mov	r9,r11
800090ac:	10 9a       	mov	r10,r8
800090ae:	12 9b       	mov	r11,r9
800090b0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800090b4:	ec fc 00 18 	ld.w	r12,r6[24]
800090b8:	12 98       	mov	r8,r9
800090ba:	a3 78       	lsl	r8,0x3
800090bc:	12 08       	add	r8,r9
800090be:	a3 78       	lsl	r8,0x3
800090c0:	f8 08 00 08 	add	r8,r12,r8
800090c4:	2c 08       	sub	r8,-64
800090c6:	f0 e8 00 00 	ld.d	r8,r8[0]
800090ca:	f0 16 00 05 	mcall	r6[20]
800090ce:	14 98       	mov	r8,r10
800090d0:	16 99       	mov	r9,r11
800090d2:	ee e9 ff f8 	st.d	r7[-8],r8

	P[axis][0][0] = P11;
800090d6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800090da:	ec fa 00 18 	ld.w	r10,r6[24]
800090de:	12 98       	mov	r8,r9
800090e0:	a3 78       	lsl	r8,0x3
800090e2:	12 08       	add	r8,r9
800090e4:	a3 78       	lsl	r8,0x3
800090e6:	10 0a       	add	r10,r8
800090e8:	ee e8 ff b8 	ld.d	r8,r7[-72]
800090ec:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][0][1] = P12;
800090f0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800090f4:	ec fb 00 18 	ld.w	r11,r6[24]
800090f8:	12 98       	mov	r8,r9
800090fa:	a3 78       	lsl	r8,0x3
800090fc:	12 08       	add	r8,r9
800090fe:	f0 ca ff ff 	sub	r10,r8,-1
80009102:	ee e8 ff c0 	ld.d	r8,r7[-64]
80009106:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
	P[axis][0][2] = P13;
8000910a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000910e:	ec fa 00 18 	ld.w	r10,r6[24]
80009112:	12 98       	mov	r8,r9
80009114:	a3 78       	lsl	r8,0x3
80009116:	12 08       	add	r8,r9
80009118:	a3 78       	lsl	r8,0x3
8000911a:	f4 08 00 08 	add	r8,r10,r8
8000911e:	f0 ca ff f0 	sub	r10,r8,-16
80009122:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009126:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][0] = P21;
8000912a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000912e:	ec fa 00 18 	ld.w	r10,r6[24]
80009132:	12 98       	mov	r8,r9
80009134:	a3 78       	lsl	r8,0x3
80009136:	12 08       	add	r8,r9
80009138:	a3 78       	lsl	r8,0x3
8000913a:	f4 08 00 08 	add	r8,r10,r8
8000913e:	f0 ca ff e8 	sub	r10,r8,-24
80009142:	ee e8 ff d0 	ld.d	r8,r7[-48]
80009146:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = P22;
8000914a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000914e:	ec fa 00 18 	ld.w	r10,r6[24]
80009152:	12 98       	mov	r8,r9
80009154:	a3 78       	lsl	r8,0x3
80009156:	12 08       	add	r8,r9
80009158:	a3 78       	lsl	r8,0x3
8000915a:	f4 08 00 08 	add	r8,r10,r8
8000915e:	f0 ca ff e0 	sub	r10,r8,-32
80009162:	ee e8 ff d8 	ld.d	r8,r7[-40]
80009166:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][2] = P23;
8000916a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000916e:	ec fa 00 18 	ld.w	r10,r6[24]
80009172:	12 98       	mov	r8,r9
80009174:	a3 78       	lsl	r8,0x3
80009176:	12 08       	add	r8,r9
80009178:	a3 78       	lsl	r8,0x3
8000917a:	f4 08 00 08 	add	r8,r10,r8
8000917e:	f0 ca ff d8 	sub	r10,r8,-40
80009182:	ee e8 ff e0 	ld.d	r8,r7[-32]
80009186:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][0] = P31;
8000918a:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000918e:	ec fa 00 18 	ld.w	r10,r6[24]
80009192:	12 98       	mov	r8,r9
80009194:	a3 78       	lsl	r8,0x3
80009196:	12 08       	add	r8,r9
80009198:	a3 78       	lsl	r8,0x3
8000919a:	f4 08 00 08 	add	r8,r10,r8
8000919e:	f0 ca ff d0 	sub	r10,r8,-48
800091a2:	ee e8 ff e8 	ld.d	r8,r7[-24]
800091a6:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][1] = P32;
800091aa:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800091ae:	ec fa 00 18 	ld.w	r10,r6[24]
800091b2:	12 98       	mov	r8,r9
800091b4:	a3 78       	lsl	r8,0x3
800091b6:	12 08       	add	r8,r9
800091b8:	a3 78       	lsl	r8,0x3
800091ba:	f4 08 00 08 	add	r8,r10,r8
800091be:	f0 ca ff c8 	sub	r10,r8,-56
800091c2:	ee e8 ff f0 	ld.d	r8,r7[-16]
800091c6:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][2] = P33;
800091ca:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800091ce:	ec fa 00 18 	ld.w	r10,r6[24]
800091d2:	12 98       	mov	r8,r9
800091d4:	a3 78       	lsl	r8,0x3
800091d6:	12 08       	add	r8,r9
800091d8:	a3 78       	lsl	r8,0x3
800091da:	f4 08 00 08 	add	r8,r10,r8
800091de:	f0 ca ff c0 	sub	r10,r8,-64
800091e2:	ee e8 ff f8 	ld.d	r8,r7[-8]
800091e6:	f4 e9 00 00 	st.d	r10[0],r8
	
	/*************************************************************************************/
	yd = speed_meas - centralData->position_estimator.vel[axis];
800091ea:	ec f8 00 00 	ld.w	r8,r6[0]
800091ee:	70 09       	ld.w	r9,r8[0x0]
800091f0:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800091f4:	f0 c8 fc a3 	sub	r8,r8,-861
800091f8:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
800091fc:	ee f8 ff 88 	ld.w	r8,r7[-120]
80009200:	e5 a1 08 89 	cop	cp0,cr8,cr8,cr9,0x42
80009204:	10 9c       	mov	r12,r8
80009206:	f0 16 00 02 	mcall	r6[8]
8000920a:	14 98       	mov	r8,r10
8000920c:	16 99       	mov	r9,r11
8000920e:	ee e9 ff 90 	st.d	r7[-112],r8
	
	S = P2[axis][1][1] + R2[axis];
80009212:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009216:	ec fa 00 1c 	ld.w	r10,r6[28]
8000921a:	12 98       	mov	r8,r9
8000921c:	a3 78       	lsl	r8,0x3
8000921e:	12 08       	add	r8,r9
80009220:	a3 78       	lsl	r8,0x3
80009222:	f4 08 00 08 	add	r8,r10,r8
80009226:	2e 08       	sub	r8,-32
80009228:	f0 ea 00 00 	ld.d	r10,r8[0]
8000922c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009230:	ec f8 01 64 	ld.w	r8,r6[356]
80009234:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80009238:	f0 16 00 05 	mcall	r6[20]
8000923c:	14 98       	mov	r8,r10
8000923e:	16 99       	mov	r9,r11
80009240:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P2[axis][0][1] * 1/S;
80009244:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009248:	ec fa 00 1c 	ld.w	r10,r6[28]
8000924c:	12 98       	mov	r8,r9
8000924e:	a3 78       	lsl	r8,0x3
80009250:	12 08       	add	r8,r9
80009252:	2f f8       	sub	r8,-1
80009254:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
80009258:	ee e8 ff 98 	ld.d	r8,r7[-104]
8000925c:	f0 16 00 0c 	mcall	r6[48]
80009260:	14 98       	mov	r8,r10
80009262:	16 99       	mov	r9,r11
80009264:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P2[axis][1][1] * 1/S;
80009268:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000926c:	ec fa 00 1c 	ld.w	r10,r6[28]
80009270:	12 98       	mov	r8,r9
80009272:	a3 78       	lsl	r8,0x3
80009274:	12 08       	add	r8,r9
80009276:	a3 78       	lsl	r8,0x3
80009278:	f4 08 00 08 	add	r8,r10,r8
8000927c:	2e 08       	sub	r8,-32
8000927e:	f0 ea 00 00 	ld.d	r10,r8[0]
80009282:	ee e8 ff 98 	ld.d	r8,r7[-104]
80009286:	f0 16 00 0c 	mcall	r6[48]
8000928a:	14 98       	mov	r8,r10
8000928c:	16 99       	mov	r9,r11
8000928e:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P2[axis][2][1] * 1/S;
80009292:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009296:	ec fa 00 1c 	ld.w	r10,r6[28]
8000929a:	12 98       	mov	r8,r9
8000929c:	a3 78       	lsl	r8,0x3
8000929e:	12 08       	add	r8,r9
800092a0:	a3 78       	lsl	r8,0x3
800092a2:	f4 08 00 08 	add	r8,r10,r8
800092a6:	2c 88       	sub	r8,-56
800092a8:	f0 ea 00 00 	ld.d	r10,r8[0]
800092ac:	ee e8 ff 98 	ld.d	r8,r7[-104]
800092b0:	f0 16 00 0c 	mcall	r6[48]
800092b4:	14 98       	mov	r8,r10
800092b6:	16 99       	mov	r9,r11
800092b8:	ee e9 ff b0 	st.d	r7[-80],r8
	
	centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * yd;
800092bc:	ec f8 00 00 	ld.w	r8,r6[0]
800092c0:	70 01       	ld.w	r1,r8[0x0]
800092c2:	ee f5 ff 8c 	ld.w	r5,r7[-116]
800092c6:	ec f8 00 00 	ld.w	r8,r6[0]
800092ca:	70 09       	ld.w	r9,r8[0x0]
800092cc:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800092d0:	f0 c8 fc 99 	sub	r8,r8,-871
800092d4:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
800092d8:	10 9c       	mov	r12,r8
800092da:	f0 16 00 02 	mcall	r6[8]
800092de:	14 92       	mov	r2,r10
800092e0:	16 93       	mov	r3,r11
800092e2:	ee e8 ff 90 	ld.d	r8,r7[-112]
800092e6:	ee ea ff a0 	ld.d	r10,r7[-96]
800092ea:	f0 16 00 03 	mcall	r6[12]
800092ee:	14 98       	mov	r8,r10
800092f0:	16 99       	mov	r9,r11
800092f2:	04 9a       	mov	r10,r2
800092f4:	06 9b       	mov	r11,r3
800092f6:	f0 16 00 05 	mcall	r6[20]
800092fa:	14 98       	mov	r8,r10
800092fc:	16 99       	mov	r9,r11
800092fe:	10 9a       	mov	r10,r8
80009300:	12 9b       	mov	r11,r9
80009302:	f0 16 00 09 	mcall	r6[36]
80009306:	18 99       	mov	r9,r12
80009308:	ea c8 fc 99 	sub	r8,r5,-871
8000930c:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * yd;
80009310:	ec f8 00 00 	ld.w	r8,r6[0]
80009314:	70 01       	ld.w	r1,r8[0x0]
80009316:	ee f5 ff 8c 	ld.w	r5,r7[-116]
8000931a:	ec f8 00 00 	ld.w	r8,r6[0]
8000931e:	70 09       	ld.w	r9,r8[0x0]
80009320:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80009324:	f0 c8 fc a3 	sub	r8,r8,-861
80009328:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
8000932c:	10 9c       	mov	r12,r8
8000932e:	f0 16 00 02 	mcall	r6[8]
80009332:	14 92       	mov	r2,r10
80009334:	16 93       	mov	r3,r11
80009336:	ee e8 ff 90 	ld.d	r8,r7[-112]
8000933a:	ee ea ff a8 	ld.d	r10,r7[-88]
8000933e:	f0 16 00 03 	mcall	r6[12]
80009342:	14 98       	mov	r8,r10
80009344:	16 99       	mov	r9,r11
80009346:	04 9a       	mov	r10,r2
80009348:	06 9b       	mov	r11,r3
8000934a:	f0 16 00 05 	mcall	r6[20]
8000934e:	14 98       	mov	r8,r10
80009350:	16 99       	mov	r9,r11
80009352:	10 9a       	mov	r10,r8
80009354:	12 9b       	mov	r11,r9
80009356:	f0 16 00 09 	mcall	r6[36]
8000935a:	18 99       	mov	r9,r12
8000935c:	ea c8 fc a3 	sub	r8,r5,-861
80009360:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->imu1.attitude.be[axis+ACC_OFFSET] = centralData->imu1.attitude.be[axis+ACC_OFFSET] + K3 * yd;
80009364:	ec f8 00 00 	ld.w	r8,r6[0]
80009368:	70 01       	ld.w	r1,r8[0x0]
8000936a:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000936e:	f0 c5 ff fd 	sub	r5,r8,-3
80009372:	ec f8 00 00 	ld.w	r8,r6[0]
80009376:	70 09       	ld.w	r9,r8[0x0]
80009378:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000937c:	2f d8       	sub	r8,-3
8000937e:	2f 48       	sub	r8,-12
80009380:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80009384:	10 9c       	mov	r12,r8
80009386:	f0 16 00 02 	mcall	r6[8]
8000938a:	14 92       	mov	r2,r10
8000938c:	16 93       	mov	r3,r11
8000938e:	ee e8 ff 90 	ld.d	r8,r7[-112]
80009392:	ee ea ff b0 	ld.d	r10,r7[-80]
80009396:	f0 16 00 03 	mcall	r6[12]
8000939a:	14 98       	mov	r8,r10
8000939c:	16 99       	mov	r9,r11
8000939e:	04 9a       	mov	r10,r2
800093a0:	06 9b       	mov	r11,r3
800093a2:	f0 16 00 05 	mcall	r6[20]
800093a6:	14 98       	mov	r8,r10
800093a8:	16 99       	mov	r9,r11
800093aa:	10 9a       	mov	r10,r8
800093ac:	12 9b       	mov	r11,r9
800093ae:	f0 16 00 09 	mcall	r6[36]
800093b2:	18 99       	mov	r9,r12
800093b4:	ea c8 ff f4 	sub	r8,r5,-12
800093b8:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	
	P11 = -K1 * P2[axis][1][0] + P2[axis][0][0];
800093bc:	ee f8 ff a0 	ld.w	r8,r7[-96]
800093c0:	10 99       	mov	r9,r8
800093c2:	ee 19 80 00 	eorh	r9,0x8000
800093c6:	ef 49 ff 58 	st.w	r7[-168],r9
800093ca:	ee f8 ff a4 	ld.w	r8,r7[-92]
800093ce:	ef 48 ff 5c 	st.w	r7[-164],r8
800093d2:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800093d6:	ec fa 00 1c 	ld.w	r10,r6[28]
800093da:	12 98       	mov	r8,r9
800093dc:	a3 78       	lsl	r8,0x3
800093de:	12 08       	add	r8,r9
800093e0:	a3 78       	lsl	r8,0x3
800093e2:	f4 08 00 08 	add	r8,r10,r8
800093e6:	2e 88       	sub	r8,-24
800093e8:	f0 e8 00 00 	ld.d	r8,r8[0]
800093ec:	ee ea ff 58 	ld.d	r10,r7[-168]
800093f0:	f0 16 00 03 	mcall	r6[12]
800093f4:	14 98       	mov	r8,r10
800093f6:	16 99       	mov	r9,r11
800093f8:	10 9a       	mov	r10,r8
800093fa:	12 9b       	mov	r11,r9
800093fc:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009400:	ec fc 00 1c 	ld.w	r12,r6[28]
80009404:	12 98       	mov	r8,r9
80009406:	a3 78       	lsl	r8,0x3
80009408:	12 08       	add	r8,r9
8000940a:	a3 78       	lsl	r8,0x3
8000940c:	f8 08 00 08 	add	r8,r12,r8
80009410:	f0 e8 00 00 	ld.d	r8,r8[0]
80009414:	f0 16 00 05 	mcall	r6[20]
80009418:	14 98       	mov	r8,r10
8000941a:	16 99       	mov	r9,r11
8000941c:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = -K1 * P2[axis][1][1] + P2[axis][0][1];
80009420:	ee f8 ff a0 	ld.w	r8,r7[-96]
80009424:	10 99       	mov	r9,r8
80009426:	ee 19 80 00 	eorh	r9,0x8000
8000942a:	ef 49 ff 60 	st.w	r7[-160],r9
8000942e:	ee f8 ff a4 	ld.w	r8,r7[-92]
80009432:	ef 48 ff 64 	st.w	r7[-156],r8
80009436:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000943a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000943e:	12 98       	mov	r8,r9
80009440:	a3 78       	lsl	r8,0x3
80009442:	12 08       	add	r8,r9
80009444:	a3 78       	lsl	r8,0x3
80009446:	f4 08 00 08 	add	r8,r10,r8
8000944a:	2e 08       	sub	r8,-32
8000944c:	f0 e8 00 00 	ld.d	r8,r8[0]
80009450:	ee ea ff 60 	ld.d	r10,r7[-160]
80009454:	f0 16 00 03 	mcall	r6[12]
80009458:	14 98       	mov	r8,r10
8000945a:	16 99       	mov	r9,r11
8000945c:	10 9a       	mov	r10,r8
8000945e:	12 9b       	mov	r11,r9
80009460:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009464:	ec fc 00 1c 	ld.w	r12,r6[28]
80009468:	12 98       	mov	r8,r9
8000946a:	a3 78       	lsl	r8,0x3
8000946c:	12 08       	add	r8,r9
8000946e:	2f f8       	sub	r8,-1
80009470:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80009474:	f0 16 00 05 	mcall	r6[20]
80009478:	14 98       	mov	r8,r10
8000947a:	16 99       	mov	r9,r11
8000947c:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = -K1 * P2[axis][1][2] + P2[axis][0][2];
80009480:	ee f8 ff a0 	ld.w	r8,r7[-96]
80009484:	10 99       	mov	r9,r8
80009486:	ee 19 80 00 	eorh	r9,0x8000
8000948a:	ef 49 ff 68 	st.w	r7[-152],r9
8000948e:	ee f8 ff a4 	ld.w	r8,r7[-92]
80009492:	ef 48 ff 6c 	st.w	r7[-148],r8
80009496:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000949a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000949e:	12 98       	mov	r8,r9
800094a0:	a3 78       	lsl	r8,0x3
800094a2:	12 08       	add	r8,r9
800094a4:	a3 78       	lsl	r8,0x3
800094a6:	f4 08 00 08 	add	r8,r10,r8
800094aa:	2d 88       	sub	r8,-40
800094ac:	f0 e8 00 00 	ld.d	r8,r8[0]
800094b0:	ee ea ff 68 	ld.d	r10,r7[-152]
800094b4:	f0 16 00 03 	mcall	r6[12]
800094b8:	14 98       	mov	r8,r10
800094ba:	16 99       	mov	r9,r11
800094bc:	10 9a       	mov	r10,r8
800094be:	12 9b       	mov	r11,r9
800094c0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800094c4:	ec fc 00 1c 	ld.w	r12,r6[28]
800094c8:	12 98       	mov	r8,r9
800094ca:	a3 78       	lsl	r8,0x3
800094cc:	12 08       	add	r8,r9
800094ce:	a3 78       	lsl	r8,0x3
800094d0:	f8 08 00 08 	add	r8,r12,r8
800094d4:	2f 08       	sub	r8,-16
800094d6:	f0 e8 00 00 	ld.d	r8,r8[0]
800094da:	f0 16 00 05 	mcall	r6[20]
800094de:	14 98       	mov	r8,r10
800094e0:	16 99       	mov	r9,r11
800094e2:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = (1. - K2) * P2[axis][1][0];
800094e6:	ee e8 ff a8 	ld.d	r8,r7[-88]
800094ea:	30 0a       	mov	r10,0
800094ec:	fc 1b 3f f0 	movh	r11,0x3ff0
800094f0:	f0 16 00 11 	mcall	r6[68]
800094f4:	14 98       	mov	r8,r10
800094f6:	16 99       	mov	r9,r11
800094f8:	10 9a       	mov	r10,r8
800094fa:	12 9b       	mov	r11,r9
800094fc:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009500:	ec fc 00 1c 	ld.w	r12,r6[28]
80009504:	12 98       	mov	r8,r9
80009506:	a3 78       	lsl	r8,0x3
80009508:	12 08       	add	r8,r9
8000950a:	a3 78       	lsl	r8,0x3
8000950c:	f8 08 00 08 	add	r8,r12,r8
80009510:	2e 88       	sub	r8,-24
80009512:	f0 e8 00 00 	ld.d	r8,r8[0]
80009516:	f0 16 00 03 	mcall	r6[12]
8000951a:	14 98       	mov	r8,r10
8000951c:	16 99       	mov	r9,r11
8000951e:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = (1. - K2) * P2[axis][1][1];
80009522:	ee e8 ff a8 	ld.d	r8,r7[-88]
80009526:	30 0a       	mov	r10,0
80009528:	fc 1b 3f f0 	movh	r11,0x3ff0
8000952c:	f0 16 00 11 	mcall	r6[68]
80009530:	14 98       	mov	r8,r10
80009532:	16 99       	mov	r9,r11
80009534:	10 9a       	mov	r10,r8
80009536:	12 9b       	mov	r11,r9
80009538:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000953c:	ec fc 00 1c 	ld.w	r12,r6[28]
80009540:	12 98       	mov	r8,r9
80009542:	a3 78       	lsl	r8,0x3
80009544:	12 08       	add	r8,r9
80009546:	a3 78       	lsl	r8,0x3
80009548:	f8 08 00 08 	add	r8,r12,r8
8000954c:	2e 08       	sub	r8,-32
8000954e:	f0 e8 00 00 	ld.d	r8,r8[0]
80009552:	f0 16 00 03 	mcall	r6[12]
80009556:	14 98       	mov	r8,r10
80009558:	16 99       	mov	r9,r11
8000955a:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = (1. - K2) * P2[axis][1][2];
8000955e:	ee e8 ff a8 	ld.d	r8,r7[-88]
80009562:	30 0a       	mov	r10,0
80009564:	fc 1b 3f f0 	movh	r11,0x3ff0
80009568:	f0 16 00 11 	mcall	r6[68]
8000956c:	14 98       	mov	r8,r10
8000956e:	16 99       	mov	r9,r11
80009570:	10 9a       	mov	r10,r8
80009572:	12 9b       	mov	r11,r9
80009574:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009578:	ec fc 00 1c 	ld.w	r12,r6[28]
8000957c:	12 98       	mov	r8,r9
8000957e:	a3 78       	lsl	r8,0x3
80009580:	12 08       	add	r8,r9
80009582:	a3 78       	lsl	r8,0x3
80009584:	f8 08 00 08 	add	r8,r12,r8
80009588:	2d 88       	sub	r8,-40
8000958a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000958e:	f0 16 00 03 	mcall	r6[12]
80009592:	14 98       	mov	r8,r10
80009594:	16 99       	mov	r9,r11
80009596:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P2[axis][1][0] + P2[axis][2][0];
8000959a:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000959e:	10 99       	mov	r9,r8
800095a0:	ee 19 80 00 	eorh	r9,0x8000
800095a4:	ef 49 ff 70 	st.w	r7[-144],r9
800095a8:	ee f8 ff b4 	ld.w	r8,r7[-76]
800095ac:	ef 48 ff 74 	st.w	r7[-140],r8
800095b0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800095b4:	ec fa 00 1c 	ld.w	r10,r6[28]
800095b8:	12 98       	mov	r8,r9
800095ba:	a3 78       	lsl	r8,0x3
800095bc:	12 08       	add	r8,r9
800095be:	a3 78       	lsl	r8,0x3
800095c0:	f4 08 00 08 	add	r8,r10,r8
800095c4:	2e 88       	sub	r8,-24
800095c6:	f0 e8 00 00 	ld.d	r8,r8[0]
800095ca:	ee ea ff 70 	ld.d	r10,r7[-144]
800095ce:	f0 16 00 03 	mcall	r6[12]
800095d2:	14 98       	mov	r8,r10
800095d4:	16 99       	mov	r9,r11
800095d6:	10 9a       	mov	r10,r8
800095d8:	12 9b       	mov	r11,r9
800095da:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800095de:	ec fc 00 1c 	ld.w	r12,r6[28]
800095e2:	12 98       	mov	r8,r9
800095e4:	a3 78       	lsl	r8,0x3
800095e6:	12 08       	add	r8,r9
800095e8:	a3 78       	lsl	r8,0x3
800095ea:	f8 08 00 08 	add	r8,r12,r8
800095ee:	2d 08       	sub	r8,-48
800095f0:	f0 e8 00 00 	ld.d	r8,r8[0]
800095f4:	f0 16 00 05 	mcall	r6[20]
800095f8:	14 98       	mov	r8,r10
800095fa:	16 99       	mov	r9,r11
800095fc:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P2[axis][1][1] + P2[axis][2][1];
80009600:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009604:	10 99       	mov	r9,r8
80009606:	ee 19 80 00 	eorh	r9,0x8000
8000960a:	ef 49 ff 78 	st.w	r7[-136],r9
8000960e:	ee f8 ff b4 	ld.w	r8,r7[-76]
80009612:	ef 48 ff 7c 	st.w	r7[-132],r8
80009616:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000961a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000961e:	12 98       	mov	r8,r9
80009620:	a3 78       	lsl	r8,0x3
80009622:	12 08       	add	r8,r9
80009624:	a3 78       	lsl	r8,0x3
80009626:	f4 08 00 08 	add	r8,r10,r8
8000962a:	2e 08       	sub	r8,-32
8000962c:	f0 e8 00 00 	ld.d	r8,r8[0]
80009630:	ee ea ff 78 	ld.d	r10,r7[-136]
80009634:	f0 16 00 03 	mcall	r6[12]
80009638:	14 98       	mov	r8,r10
8000963a:	16 99       	mov	r9,r11
8000963c:	10 9a       	mov	r10,r8
8000963e:	12 9b       	mov	r11,r9
80009640:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009644:	ec fc 00 1c 	ld.w	r12,r6[28]
80009648:	12 98       	mov	r8,r9
8000964a:	a3 78       	lsl	r8,0x3
8000964c:	12 08       	add	r8,r9
8000964e:	a3 78       	lsl	r8,0x3
80009650:	f8 08 00 08 	add	r8,r12,r8
80009654:	2c 88       	sub	r8,-56
80009656:	f0 e8 00 00 	ld.d	r8,r8[0]
8000965a:	f0 16 00 05 	mcall	r6[20]
8000965e:	14 98       	mov	r8,r10
80009660:	16 99       	mov	r9,r11
80009662:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P2[axis][1][2] + P2[axis][2][2];
80009666:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000966a:	10 99       	mov	r9,r8
8000966c:	ee 19 80 00 	eorh	r9,0x8000
80009670:	ef 49 ff 80 	st.w	r7[-128],r9
80009674:	ee f8 ff b4 	ld.w	r8,r7[-76]
80009678:	ef 48 ff 84 	st.w	r7[-124],r8
8000967c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009680:	ec fa 00 1c 	ld.w	r10,r6[28]
80009684:	12 98       	mov	r8,r9
80009686:	a3 78       	lsl	r8,0x3
80009688:	12 08       	add	r8,r9
8000968a:	a3 78       	lsl	r8,0x3
8000968c:	f4 08 00 08 	add	r8,r10,r8
80009690:	2d 88       	sub	r8,-40
80009692:	f0 e8 00 00 	ld.d	r8,r8[0]
80009696:	ee ea ff 80 	ld.d	r10,r7[-128]
8000969a:	f0 16 00 03 	mcall	r6[12]
8000969e:	14 98       	mov	r8,r10
800096a0:	16 99       	mov	r9,r11
800096a2:	10 9a       	mov	r10,r8
800096a4:	12 9b       	mov	r11,r9
800096a6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800096aa:	ec fc 00 1c 	ld.w	r12,r6[28]
800096ae:	12 98       	mov	r8,r9
800096b0:	a3 78       	lsl	r8,0x3
800096b2:	12 08       	add	r8,r9
800096b4:	a3 78       	lsl	r8,0x3
800096b6:	f8 08 00 08 	add	r8,r12,r8
800096ba:	2c 08       	sub	r8,-64
800096bc:	f0 e8 00 00 	ld.d	r8,r8[0]
800096c0:	f0 16 00 05 	mcall	r6[20]
800096c4:	14 98       	mov	r8,r10
800096c6:	16 99       	mov	r9,r11
800096c8:	ee e9 ff f8 	st.d	r7[-8],r8

	P2[axis][0][0] = P11;
800096cc:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800096d0:	ec fa 00 1c 	ld.w	r10,r6[28]
800096d4:	12 98       	mov	r8,r9
800096d6:	a3 78       	lsl	r8,0x3
800096d8:	12 08       	add	r8,r9
800096da:	a3 78       	lsl	r8,0x3
800096dc:	10 0a       	add	r10,r8
800096de:	ee e8 ff b8 	ld.d	r8,r7[-72]
800096e2:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][0][1] = P12;
800096e6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800096ea:	ec fa 00 1c 	ld.w	r10,r6[28]
800096ee:	12 98       	mov	r8,r9
800096f0:	a3 78       	lsl	r8,0x3
800096f2:	12 08       	add	r8,r9
800096f4:	f0 cb ff ff 	sub	r11,r8,-1
800096f8:	ee e8 ff c0 	ld.d	r8,r7[-64]
800096fc:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][0][2] = P13;
80009700:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009704:	ec fa 00 1c 	ld.w	r10,r6[28]
80009708:	12 98       	mov	r8,r9
8000970a:	a3 78       	lsl	r8,0x3
8000970c:	12 08       	add	r8,r9
8000970e:	a3 78       	lsl	r8,0x3
80009710:	f4 08 00 08 	add	r8,r10,r8
80009714:	f0 ca ff f0 	sub	r10,r8,-16
80009718:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000971c:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][0] = P21;
80009720:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009724:	ec fa 00 1c 	ld.w	r10,r6[28]
80009728:	12 98       	mov	r8,r9
8000972a:	a3 78       	lsl	r8,0x3
8000972c:	12 08       	add	r8,r9
8000972e:	a3 78       	lsl	r8,0x3
80009730:	f4 08 00 08 	add	r8,r10,r8
80009734:	f0 ca ff e8 	sub	r10,r8,-24
80009738:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000973c:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = P22;
80009740:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009744:	ec fa 00 1c 	ld.w	r10,r6[28]
80009748:	12 98       	mov	r8,r9
8000974a:	a3 78       	lsl	r8,0x3
8000974c:	12 08       	add	r8,r9
8000974e:	a3 78       	lsl	r8,0x3
80009750:	f4 08 00 08 	add	r8,r10,r8
80009754:	f0 ca ff e0 	sub	r10,r8,-32
80009758:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000975c:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][2] = P23;
80009760:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009764:	ec fa 00 1c 	ld.w	r10,r6[28]
80009768:	12 98       	mov	r8,r9
8000976a:	a3 78       	lsl	r8,0x3
8000976c:	12 08       	add	r8,r9
8000976e:	a3 78       	lsl	r8,0x3
80009770:	f4 08 00 08 	add	r8,r10,r8
80009774:	f0 ca ff d8 	sub	r10,r8,-40
80009778:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000977c:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][0] = P31;
80009780:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009784:	ec fa 00 1c 	ld.w	r10,r6[28]
80009788:	12 98       	mov	r8,r9
8000978a:	a3 78       	lsl	r8,0x3
8000978c:	12 08       	add	r8,r9
8000978e:	a3 78       	lsl	r8,0x3
80009790:	f4 08 00 08 	add	r8,r10,r8
80009794:	f0 ca ff d0 	sub	r10,r8,-48
80009798:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000979c:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][1] = P32;
800097a0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800097a4:	ec fa 00 1c 	ld.w	r10,r6[28]
800097a8:	12 98       	mov	r8,r9
800097aa:	a3 78       	lsl	r8,0x3
800097ac:	12 08       	add	r8,r9
800097ae:	a3 78       	lsl	r8,0x3
800097b0:	f4 08 00 08 	add	r8,r10,r8
800097b4:	f0 ca ff c8 	sub	r10,r8,-56
800097b8:	ee e8 ff f0 	ld.d	r8,r7[-16]
800097bc:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][2] = P33;
800097c0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800097c4:	ec fa 00 1c 	ld.w	r10,r6[28]
800097c8:	12 98       	mov	r8,r9
800097ca:	a3 78       	lsl	r8,0x3
800097cc:	12 08       	add	r8,r9
800097ce:	a3 78       	lsl	r8,0x3
800097d0:	f4 08 00 08 	add	r8,r10,r8
800097d4:	f0 ca ff c0 	sub	r10,r8,-64
800097d8:	ee e8 ff f8 	ld.d	r8,r7[-8]
800097dc:	f4 e9 00 00 	st.d	r10[0],r8
}
800097e0:	2c ad       	sub	sp,-216
800097e2:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
800097e6:	00 00       	add	r0,r0
800097e8:	80 00       	ld.sh	r0,r0[0x0]
800097ea:	8a 56       	ld.sh	r6,r5[0xa]

800097ec <e_kalman_update_position_hf>:
  Xp = Xm + K*y;
  // update covariance
  Pp = Pm - K*H*Pm;
*/
void e_kalman_update_position_hf(int axis, double position_meas)
{
800097ec:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
800097f0:	1a 97       	mov	r7,sp
800097f2:	21 bd       	sub	sp,108
800097f4:	fe f6 05 80 	ld.w	r6,pc[1408]
800097f8:	1e 26       	rsub	r6,pc
800097fa:	ef 4c ff bc 	st.w	r7[-68],r12
800097fe:	ee eb ff b4 	st.d	r7[-76],r10
	double posxy,S,K1,K2;
	double P11,P12,P21,P22;
	
	posxy = position_meas - centralData->estimation.state[axis][POSITION];
80009802:	ec f8 00 00 	ld.w	r8,r6[0]
80009806:	70 0a       	ld.w	r10,r8[0x0]
80009808:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000980c:	12 98       	mov	r8,r9
8000980e:	a1 78       	lsl	r8,0x1
80009810:	12 08       	add	r8,r9
80009812:	a3 78       	lsl	r8,0x3
80009814:	f4 08 00 08 	add	r8,r10,r8
80009818:	f0 c8 f4 a4 	sub	r8,r8,-2908
8000981c:	f0 e8 00 00 	ld.d	r8,r8[0]
80009820:	ee ea ff b4 	ld.d	r10,r7[-76]
80009824:	f0 16 00 11 	mcall	r6[68]
80009828:	14 98       	mov	r8,r10
8000982a:	16 99       	mov	r9,r11
8000982c:	ee e9 ff c0 	st.d	r7[-64],r8
	
	
	S = P[axis][0][0] + R[axis];
80009830:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009834:	ec fa 00 18 	ld.w	r10,r6[24]
80009838:	12 98       	mov	r8,r9
8000983a:	a3 78       	lsl	r8,0x3
8000983c:	12 08       	add	r8,r9
8000983e:	a3 78       	lsl	r8,0x3
80009840:	f4 08 00 08 	add	r8,r10,r8
80009844:	f0 ea 00 00 	ld.d	r10,r8[0]
80009848:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000984c:	ec f8 01 68 	ld.w	r8,r6[360]
80009850:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80009854:	f0 16 00 05 	mcall	r6[20]
80009858:	14 98       	mov	r8,r10
8000985a:	16 99       	mov	r9,r11
8000985c:	ee e9 ff c8 	st.d	r7[-56],r8
	K1 = P[axis][0][0] * 1/S;
80009860:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009864:	ec fa 00 18 	ld.w	r10,r6[24]
80009868:	12 98       	mov	r8,r9
8000986a:	a3 78       	lsl	r8,0x3
8000986c:	12 08       	add	r8,r9
8000986e:	a3 78       	lsl	r8,0x3
80009870:	f4 08 00 08 	add	r8,r10,r8
80009874:	f0 ea 00 00 	ld.d	r10,r8[0]
80009878:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000987c:	f0 16 00 0c 	mcall	r6[48]
80009880:	14 98       	mov	r8,r10
80009882:	16 99       	mov	r9,r11
80009884:	ee e9 ff d0 	st.d	r7[-48],r8
	K2 = P[axis][1][0] * 1/S;
80009888:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000988c:	ec fa 00 18 	ld.w	r10,r6[24]
80009890:	12 98       	mov	r8,r9
80009892:	a3 78       	lsl	r8,0x3
80009894:	12 08       	add	r8,r9
80009896:	a3 78       	lsl	r8,0x3
80009898:	f4 08 00 08 	add	r8,r10,r8
8000989c:	2e 88       	sub	r8,-24
8000989e:	f0 ea 00 00 	ld.d	r10,r8[0]
800098a2:	ee e8 ff c8 	ld.d	r8,r7[-56]
800098a6:	f0 16 00 0c 	mcall	r6[48]
800098aa:	14 98       	mov	r8,r10
800098ac:	16 99       	mov	r9,r11
800098ae:	ee e9 ff d8 	st.d	r7[-40],r8
	
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * posxy;
800098b2:	ec f8 00 00 	ld.w	r8,r6[0]
800098b6:	70 08       	ld.w	r8,r8[0x0]
800098b8:	ef 48 ff 94 	st.w	r7[-108],r8
800098bc:	ee f5 ff bc 	ld.w	r5,r7[-68]
800098c0:	ec f8 00 00 	ld.w	r8,r6[0]
800098c4:	70 0a       	ld.w	r10,r8[0x0]
800098c6:	ee f9 ff bc 	ld.w	r9,r7[-68]
800098ca:	12 98       	mov	r8,r9
800098cc:	a1 78       	lsl	r8,0x1
800098ce:	12 08       	add	r8,r9
800098d0:	a3 78       	lsl	r8,0x3
800098d2:	f4 08 00 08 	add	r8,r10,r8
800098d6:	f0 c8 f4 a4 	sub	r8,r8,-2908
800098da:	f0 e2 00 00 	ld.d	r2,r8[0]
800098de:	ee e8 ff c0 	ld.d	r8,r7[-64]
800098e2:	ee ea ff d0 	ld.d	r10,r7[-48]
800098e6:	f0 16 00 03 	mcall	r6[12]
800098ea:	14 98       	mov	r8,r10
800098ec:	16 99       	mov	r9,r11
800098ee:	04 9a       	mov	r10,r2
800098f0:	06 9b       	mov	r11,r3
800098f2:	f0 16 00 05 	mcall	r6[20]
800098f6:	14 98       	mov	r8,r10
800098f8:	16 99       	mov	r9,r11
800098fa:	10 9a       	mov	r10,r8
800098fc:	12 9b       	mov	r11,r9
800098fe:	0a 98       	mov	r8,r5
80009900:	a1 78       	lsl	r8,0x1
80009902:	0a 08       	add	r8,r5
80009904:	a3 78       	lsl	r8,0x3
80009906:	ee f9 ff 94 	ld.w	r9,r7[-108]
8000990a:	f2 08 00 08 	add	r8,r9,r8
8000990e:	f0 c8 f4 a4 	sub	r8,r8,-2908
80009912:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * posxy;
80009916:	ec f8 00 00 	ld.w	r8,r6[0]
8000991a:	70 08       	ld.w	r8,r8[0x0]
8000991c:	ef 48 ff 98 	st.w	r7[-104],r8
80009920:	ee f5 ff bc 	ld.w	r5,r7[-68]
80009924:	ec f8 00 00 	ld.w	r8,r6[0]
80009928:	70 0a       	ld.w	r10,r8[0x0]
8000992a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000992e:	12 98       	mov	r8,r9
80009930:	a1 78       	lsl	r8,0x1
80009932:	12 08       	add	r8,r9
80009934:	2f f8       	sub	r8,-1
80009936:	a3 78       	lsl	r8,0x3
80009938:	f4 08 00 08 	add	r8,r10,r8
8000993c:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
80009940:	ee e8 ff c0 	ld.d	r8,r7[-64]
80009944:	ee ea ff d8 	ld.d	r10,r7[-40]
80009948:	f0 16 00 03 	mcall	r6[12]
8000994c:	14 98       	mov	r8,r10
8000994e:	16 99       	mov	r9,r11
80009950:	04 9a       	mov	r10,r2
80009952:	06 9b       	mov	r11,r3
80009954:	f0 16 00 05 	mcall	r6[20]
80009958:	14 98       	mov	r8,r10
8000995a:	16 99       	mov	r9,r11
8000995c:	10 9a       	mov	r10,r8
8000995e:	12 9b       	mov	r11,r9
80009960:	0a 98       	mov	r8,r5
80009962:	a1 78       	lsl	r8,0x1
80009964:	0a 08       	add	r8,r5
80009966:	2f f8       	sub	r8,-1
80009968:	a3 78       	lsl	r8,0x3
8000996a:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000996e:	f2 08 00 08 	add	r8,r9,r8
80009972:	f0 eb 0b 5c 	st.d	r8[2908],r10
	
	P11 = (1. - K1) * P[axis][0][0];
80009976:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000997a:	30 0a       	mov	r10,0
8000997c:	fc 1b 3f f0 	movh	r11,0x3ff0
80009980:	f0 16 00 11 	mcall	r6[68]
80009984:	14 98       	mov	r8,r10
80009986:	16 99       	mov	r9,r11
80009988:	10 9a       	mov	r10,r8
8000998a:	12 9b       	mov	r11,r9
8000998c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009990:	ec fc 00 18 	ld.w	r12,r6[24]
80009994:	12 98       	mov	r8,r9
80009996:	a3 78       	lsl	r8,0x3
80009998:	12 08       	add	r8,r9
8000999a:	a3 78       	lsl	r8,0x3
8000999c:	f8 08 00 08 	add	r8,r12,r8
800099a0:	f0 e8 00 00 	ld.d	r8,r8[0]
800099a4:	f0 16 00 03 	mcall	r6[12]
800099a8:	14 98       	mov	r8,r10
800099aa:	16 99       	mov	r9,r11
800099ac:	ee e9 ff e0 	st.d	r7[-32],r8
	P12 = (1. - K1) * P[axis][0][1];
800099b0:	ee e8 ff d0 	ld.d	r8,r7[-48]
800099b4:	30 0a       	mov	r10,0
800099b6:	fc 1b 3f f0 	movh	r11,0x3ff0
800099ba:	f0 16 00 11 	mcall	r6[68]
800099be:	14 98       	mov	r8,r10
800099c0:	16 99       	mov	r9,r11
800099c2:	10 9a       	mov	r10,r8
800099c4:	12 9b       	mov	r11,r9
800099c6:	ee f9 ff bc 	ld.w	r9,r7[-68]
800099ca:	ec fc 00 18 	ld.w	r12,r6[24]
800099ce:	12 98       	mov	r8,r9
800099d0:	a3 78       	lsl	r8,0x3
800099d2:	12 08       	add	r8,r9
800099d4:	2f f8       	sub	r8,-1
800099d6:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
800099da:	f0 16 00 03 	mcall	r6[12]
800099de:	14 98       	mov	r8,r10
800099e0:	16 99       	mov	r9,r11
800099e2:	ee e9 ff e8 	st.d	r7[-24],r8
	P21 = -K2 * P[axis][0][0] + P[axis][1][0];
800099e6:	ee f8 ff d8 	ld.w	r8,r7[-40]
800099ea:	10 99       	mov	r9,r8
800099ec:	ee 19 80 00 	eorh	r9,0x8000
800099f0:	ef 49 ff 9c 	st.w	r7[-100],r9
800099f4:	ee f8 ff dc 	ld.w	r8,r7[-36]
800099f8:	ef 48 ff a0 	st.w	r7[-96],r8
800099fc:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009a00:	ec fa 00 18 	ld.w	r10,r6[24]
80009a04:	12 98       	mov	r8,r9
80009a06:	a3 78       	lsl	r8,0x3
80009a08:	12 08       	add	r8,r9
80009a0a:	a3 78       	lsl	r8,0x3
80009a0c:	f4 08 00 08 	add	r8,r10,r8
80009a10:	f0 e8 00 00 	ld.d	r8,r8[0]
80009a14:	ee ea ff 9c 	ld.d	r10,r7[-100]
80009a18:	f0 16 00 03 	mcall	r6[12]
80009a1c:	14 98       	mov	r8,r10
80009a1e:	16 99       	mov	r9,r11
80009a20:	10 9a       	mov	r10,r8
80009a22:	12 9b       	mov	r11,r9
80009a24:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009a28:	ec fc 00 18 	ld.w	r12,r6[24]
80009a2c:	12 98       	mov	r8,r9
80009a2e:	a3 78       	lsl	r8,0x3
80009a30:	12 08       	add	r8,r9
80009a32:	a3 78       	lsl	r8,0x3
80009a34:	f8 08 00 08 	add	r8,r12,r8
80009a38:	2e 88       	sub	r8,-24
80009a3a:	f0 e8 00 00 	ld.d	r8,r8[0]
80009a3e:	f0 16 00 05 	mcall	r6[20]
80009a42:	14 98       	mov	r8,r10
80009a44:	16 99       	mov	r9,r11
80009a46:	ee e9 ff f0 	st.d	r7[-16],r8
	P22 = -K2 * P[axis][0][1] + P[axis][1][1];
80009a4a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80009a4e:	10 99       	mov	r9,r8
80009a50:	ee 19 80 00 	eorh	r9,0x8000
80009a54:	ef 49 ff a4 	st.w	r7[-92],r9
80009a58:	ee f8 ff dc 	ld.w	r8,r7[-36]
80009a5c:	ef 48 ff a8 	st.w	r7[-88],r8
80009a60:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009a64:	ec fa 00 18 	ld.w	r10,r6[24]
80009a68:	12 98       	mov	r8,r9
80009a6a:	a3 78       	lsl	r8,0x3
80009a6c:	12 08       	add	r8,r9
80009a6e:	2f f8       	sub	r8,-1
80009a70:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80009a74:	ee ea ff a4 	ld.d	r10,r7[-92]
80009a78:	f0 16 00 03 	mcall	r6[12]
80009a7c:	14 98       	mov	r8,r10
80009a7e:	16 99       	mov	r9,r11
80009a80:	10 9a       	mov	r10,r8
80009a82:	12 9b       	mov	r11,r9
80009a84:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009a88:	ec fc 00 18 	ld.w	r12,r6[24]
80009a8c:	12 98       	mov	r8,r9
80009a8e:	a3 78       	lsl	r8,0x3
80009a90:	12 08       	add	r8,r9
80009a92:	a3 78       	lsl	r8,0x3
80009a94:	f8 08 00 08 	add	r8,r12,r8
80009a98:	2e 08       	sub	r8,-32
80009a9a:	f0 e8 00 00 	ld.d	r8,r8[0]
80009a9e:	f0 16 00 05 	mcall	r6[20]
80009aa2:	14 98       	mov	r8,r10
80009aa4:	16 99       	mov	r9,r11
80009aa6:	ee e9 ff f8 	st.d	r7[-8],r8

	P[axis][0][0] = P11;
80009aaa:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009aae:	ec fa 00 18 	ld.w	r10,r6[24]
80009ab2:	12 98       	mov	r8,r9
80009ab4:	a3 78       	lsl	r8,0x3
80009ab6:	12 08       	add	r8,r9
80009ab8:	a3 78       	lsl	r8,0x3
80009aba:	10 0a       	add	r10,r8
80009abc:	ee e8 ff e0 	ld.d	r8,r7[-32]
80009ac0:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][0][1] = P12;
80009ac4:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009ac8:	ec fa 00 18 	ld.w	r10,r6[24]
80009acc:	12 98       	mov	r8,r9
80009ace:	a3 78       	lsl	r8,0x3
80009ad0:	12 08       	add	r8,r9
80009ad2:	f0 cb ff ff 	sub	r11,r8,-1
80009ad6:	ee e8 ff e8 	ld.d	r8,r7[-24]
80009ada:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P[axis][1][0] = P21;
80009ade:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009ae2:	ec fa 00 18 	ld.w	r10,r6[24]
80009ae6:	12 98       	mov	r8,r9
80009ae8:	a3 78       	lsl	r8,0x3
80009aea:	12 08       	add	r8,r9
80009aec:	a3 78       	lsl	r8,0x3
80009aee:	f4 08 00 08 	add	r8,r10,r8
80009af2:	f0 ca ff e8 	sub	r10,r8,-24
80009af6:	ee e8 ff f0 	ld.d	r8,r7[-16]
80009afa:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = P22;
80009afe:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009b02:	ec fa 00 18 	ld.w	r10,r6[24]
80009b06:	12 98       	mov	r8,r9
80009b08:	a3 78       	lsl	r8,0x3
80009b0a:	12 08       	add	r8,r9
80009b0c:	a3 78       	lsl	r8,0x3
80009b0e:	f4 08 00 08 	add	r8,r10,r8
80009b12:	f0 ca ff e0 	sub	r10,r8,-32
80009b16:	ee e8 ff f8 	ld.d	r8,r7[-8]
80009b1a:	f4 e9 00 00 	st.d	r10[0],r8
	
	/*************************************************************************************/
	posxy = position_meas - centralData->position_estimator.localPosition.pos[axis];
80009b1e:	ec f8 00 00 	ld.w	r8,r6[0]
80009b22:	70 08       	ld.w	r8,r8[0x0]
80009b24:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009b28:	f2 c9 fc 99 	sub	r9,r9,-871
80009b2c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80009b30:	10 9c       	mov	r12,r8
80009b32:	f0 16 00 02 	mcall	r6[8]
80009b36:	14 98       	mov	r8,r10
80009b38:	16 99       	mov	r9,r11
80009b3a:	ee ea ff b4 	ld.d	r10,r7[-76]
80009b3e:	f0 16 00 11 	mcall	r6[68]
80009b42:	14 98       	mov	r8,r10
80009b44:	16 99       	mov	r9,r11
80009b46:	ee e9 ff c0 	st.d	r7[-64],r8
	
	S = P2[axis][0][0] + R2[axis];
80009b4a:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009b4e:	ec fa 00 1c 	ld.w	r10,r6[28]
80009b52:	12 98       	mov	r8,r9
80009b54:	a3 78       	lsl	r8,0x3
80009b56:	12 08       	add	r8,r9
80009b58:	a3 78       	lsl	r8,0x3
80009b5a:	f4 08 00 08 	add	r8,r10,r8
80009b5e:	f0 ea 00 00 	ld.d	r10,r8[0]
80009b62:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009b66:	ec f8 01 64 	ld.w	r8,r6[356]
80009b6a:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80009b6e:	f0 16 00 05 	mcall	r6[20]
80009b72:	14 98       	mov	r8,r10
80009b74:	16 99       	mov	r9,r11
80009b76:	ee e9 ff c8 	st.d	r7[-56],r8
	K1 = P2[axis][0][0] * 1/S;
80009b7a:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009b7e:	ec fa 00 1c 	ld.w	r10,r6[28]
80009b82:	12 98       	mov	r8,r9
80009b84:	a3 78       	lsl	r8,0x3
80009b86:	12 08       	add	r8,r9
80009b88:	a3 78       	lsl	r8,0x3
80009b8a:	f4 08 00 08 	add	r8,r10,r8
80009b8e:	f0 ea 00 00 	ld.d	r10,r8[0]
80009b92:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009b96:	f0 16 00 0c 	mcall	r6[48]
80009b9a:	14 98       	mov	r8,r10
80009b9c:	16 99       	mov	r9,r11
80009b9e:	ee e9 ff d0 	st.d	r7[-48],r8
	K2 = P2[axis][1][0] * 1/S;
80009ba2:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009ba6:	ec fa 00 1c 	ld.w	r10,r6[28]
80009baa:	12 98       	mov	r8,r9
80009bac:	a3 78       	lsl	r8,0x3
80009bae:	12 08       	add	r8,r9
80009bb0:	a3 78       	lsl	r8,0x3
80009bb2:	f4 08 00 08 	add	r8,r10,r8
80009bb6:	2e 88       	sub	r8,-24
80009bb8:	f0 ea 00 00 	ld.d	r10,r8[0]
80009bbc:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009bc0:	f0 16 00 0c 	mcall	r6[48]
80009bc4:	14 98       	mov	r8,r10
80009bc6:	16 99       	mov	r9,r11
80009bc8:	ee e9 ff d8 	st.d	r7[-40],r8
	
	//centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * posxy;
	//centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * posxy;
	
	P11 = (1. - K1) * P2[axis][0][0];
80009bcc:	ee e8 ff d0 	ld.d	r8,r7[-48]
80009bd0:	30 0a       	mov	r10,0
80009bd2:	fc 1b 3f f0 	movh	r11,0x3ff0
80009bd6:	f0 16 00 11 	mcall	r6[68]
80009bda:	14 98       	mov	r8,r10
80009bdc:	16 99       	mov	r9,r11
80009bde:	10 9a       	mov	r10,r8
80009be0:	12 9b       	mov	r11,r9
80009be2:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009be6:	ec fc 00 1c 	ld.w	r12,r6[28]
80009bea:	12 98       	mov	r8,r9
80009bec:	a3 78       	lsl	r8,0x3
80009bee:	12 08       	add	r8,r9
80009bf0:	a3 78       	lsl	r8,0x3
80009bf2:	f8 08 00 08 	add	r8,r12,r8
80009bf6:	f0 e8 00 00 	ld.d	r8,r8[0]
80009bfa:	f0 16 00 03 	mcall	r6[12]
80009bfe:	14 98       	mov	r8,r10
80009c00:	16 99       	mov	r9,r11
80009c02:	ee e9 ff e0 	st.d	r7[-32],r8
	P12 = (1. - K1) * P2[axis][0][1];
80009c06:	ee e8 ff d0 	ld.d	r8,r7[-48]
80009c0a:	30 0a       	mov	r10,0
80009c0c:	fc 1b 3f f0 	movh	r11,0x3ff0
80009c10:	f0 16 00 11 	mcall	r6[68]
80009c14:	14 98       	mov	r8,r10
80009c16:	16 99       	mov	r9,r11
80009c18:	10 9a       	mov	r10,r8
80009c1a:	12 9b       	mov	r11,r9
80009c1c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009c20:	ec fc 00 1c 	ld.w	r12,r6[28]
80009c24:	12 98       	mov	r8,r9
80009c26:	a3 78       	lsl	r8,0x3
80009c28:	12 08       	add	r8,r9
80009c2a:	2f f8       	sub	r8,-1
80009c2c:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80009c30:	f0 16 00 03 	mcall	r6[12]
80009c34:	14 98       	mov	r8,r10
80009c36:	16 99       	mov	r9,r11
80009c38:	ee e9 ff e8 	st.d	r7[-24],r8
	P21 = -K2 * P2[axis][0][0] + P2[axis][1][0];
80009c3c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80009c40:	10 99       	mov	r9,r8
80009c42:	ee 19 80 00 	eorh	r9,0x8000
80009c46:	ef 49 ff ac 	st.w	r7[-84],r9
80009c4a:	ee f8 ff dc 	ld.w	r8,r7[-36]
80009c4e:	ef 48 ff b0 	st.w	r7[-80],r8
80009c52:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009c56:	ec fa 00 1c 	ld.w	r10,r6[28]
80009c5a:	12 98       	mov	r8,r9
80009c5c:	a3 78       	lsl	r8,0x3
80009c5e:	12 08       	add	r8,r9
80009c60:	a3 78       	lsl	r8,0x3
80009c62:	f4 08 00 08 	add	r8,r10,r8
80009c66:	f0 e8 00 00 	ld.d	r8,r8[0]
80009c6a:	ee ea ff ac 	ld.d	r10,r7[-84]
80009c6e:	f0 16 00 03 	mcall	r6[12]
80009c72:	14 98       	mov	r8,r10
80009c74:	16 99       	mov	r9,r11
80009c76:	10 9a       	mov	r10,r8
80009c78:	12 9b       	mov	r11,r9
80009c7a:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009c7e:	ec fc 00 1c 	ld.w	r12,r6[28]
80009c82:	12 98       	mov	r8,r9
80009c84:	a3 78       	lsl	r8,0x3
80009c86:	12 08       	add	r8,r9
80009c88:	a3 78       	lsl	r8,0x3
80009c8a:	f8 08 00 08 	add	r8,r12,r8
80009c8e:	2e 88       	sub	r8,-24
80009c90:	f0 e8 00 00 	ld.d	r8,r8[0]
80009c94:	f0 16 00 05 	mcall	r6[20]
80009c98:	14 98       	mov	r8,r10
80009c9a:	16 99       	mov	r9,r11
80009c9c:	ee e9 ff f0 	st.d	r7[-16],r8
	P22 = -K2 * P2[axis][0][1] + P2[axis][1][1];
80009ca0:	ee f8 ff d8 	ld.w	r8,r7[-40]
80009ca4:	10 91       	mov	r1,r8
80009ca6:	ee 11 80 00 	eorh	r1,0x8000
80009caa:	ee f0 ff dc 	ld.w	r0,r7[-36]
80009cae:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009cb2:	ec fa 00 1c 	ld.w	r10,r6[28]
80009cb6:	12 98       	mov	r8,r9
80009cb8:	a3 78       	lsl	r8,0x3
80009cba:	12 08       	add	r8,r9
80009cbc:	2f f8       	sub	r8,-1
80009cbe:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80009cc2:	00 9a       	mov	r10,r0
80009cc4:	02 9b       	mov	r11,r1
80009cc6:	f0 16 00 03 	mcall	r6[12]
80009cca:	14 98       	mov	r8,r10
80009ccc:	16 99       	mov	r9,r11
80009cce:	10 9a       	mov	r10,r8
80009cd0:	12 9b       	mov	r11,r9
80009cd2:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009cd6:	ec fc 00 1c 	ld.w	r12,r6[28]
80009cda:	12 98       	mov	r8,r9
80009cdc:	a3 78       	lsl	r8,0x3
80009cde:	12 08       	add	r8,r9
80009ce0:	a3 78       	lsl	r8,0x3
80009ce2:	f8 08 00 08 	add	r8,r12,r8
80009ce6:	2e 08       	sub	r8,-32
80009ce8:	f0 e8 00 00 	ld.d	r8,r8[0]
80009cec:	f0 16 00 05 	mcall	r6[20]
80009cf0:	14 98       	mov	r8,r10
80009cf2:	16 99       	mov	r9,r11
80009cf4:	ee e9 ff f8 	st.d	r7[-8],r8

	P2[axis][0][0] = P11;
80009cf8:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009cfc:	ec fa 00 1c 	ld.w	r10,r6[28]
80009d00:	12 98       	mov	r8,r9
80009d02:	a3 78       	lsl	r8,0x3
80009d04:	12 08       	add	r8,r9
80009d06:	a3 78       	lsl	r8,0x3
80009d08:	10 0a       	add	r10,r8
80009d0a:	ee e8 ff e0 	ld.d	r8,r7[-32]
80009d0e:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][0][1] = P12;
80009d12:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009d16:	ec fa 00 1c 	ld.w	r10,r6[28]
80009d1a:	12 98       	mov	r8,r9
80009d1c:	a3 78       	lsl	r8,0x3
80009d1e:	12 08       	add	r8,r9
80009d20:	f0 cb ff ff 	sub	r11,r8,-1
80009d24:	ee e8 ff e8 	ld.d	r8,r7[-24]
80009d28:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][1][0] = P21;
80009d2c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009d30:	ec fa 00 1c 	ld.w	r10,r6[28]
80009d34:	12 98       	mov	r8,r9
80009d36:	a3 78       	lsl	r8,0x3
80009d38:	12 08       	add	r8,r9
80009d3a:	a3 78       	lsl	r8,0x3
80009d3c:	f4 08 00 08 	add	r8,r10,r8
80009d40:	f0 ca ff e8 	sub	r10,r8,-24
80009d44:	ee e8 ff f0 	ld.d	r8,r7[-16]
80009d48:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = P22;
80009d4c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009d50:	ec fa 00 1c 	ld.w	r10,r6[28]
80009d54:	12 98       	mov	r8,r9
80009d56:	a3 78       	lsl	r8,0x3
80009d58:	12 08       	add	r8,r9
80009d5a:	a3 78       	lsl	r8,0x3
80009d5c:	f4 08 00 08 	add	r8,r10,r8
80009d60:	f0 ca ff e0 	sub	r10,r8,-32
80009d64:	ee e8 ff f8 	ld.d	r8,r7[-8]
80009d68:	f4 e9 00 00 	st.d	r10[0],r8
}
80009d6c:	2e 5d       	sub	sp,-108
80009d6e:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80009d72:	00 00       	add	r0,r0
80009d74:	80 00       	ld.sh	r0,r0[0x0]
80009d76:	96 7c       	ld.sh	r12,r11[0xe]

80009d78 <e_kalman_update_speed_hf>:
  
  // update covariance
  Pp = Pm - K*H*Pm;
*/
void e_kalman_update_speed_hf(int axis, float speed_meas)
{
80009d78:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80009d7c:	1a 97       	mov	r7,sp
80009d7e:	21 ad       	sub	sp,104
80009d80:	fe f6 05 88 	ld.w	r6,pc[1416]
80009d84:	1e 26       	rsub	r6,pc
80009d86:	ef 4c ff bc 	st.w	r7[-68],r12
80009d8a:	ef 4b ff b8 	st.w	r7[-72],r11
		double velxy,S,K1,K2;
		double P11,P12,P21,P22;
		
		velxy = speed_meas - centralData->estimation.state[axis][SPEED];
80009d8e:	ee fc ff b8 	ld.w	r12,r7[-72]
80009d92:	f0 16 00 02 	mcall	r6[8]
80009d96:	ec f8 00 00 	ld.w	r8,r6[0]
80009d9a:	70 0c       	ld.w	r12,r8[0x0]
80009d9c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009da0:	12 98       	mov	r8,r9
80009da2:	a1 78       	lsl	r8,0x1
80009da4:	12 08       	add	r8,r9
80009da6:	2f f8       	sub	r8,-1
80009da8:	a3 78       	lsl	r8,0x3
80009daa:	f8 08 00 08 	add	r8,r12,r8
80009dae:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
80009db2:	f0 16 00 11 	mcall	r6[68]
80009db6:	14 98       	mov	r8,r10
80009db8:	16 99       	mov	r9,r11
80009dba:	ee e9 ff c0 	st.d	r7[-64],r8
		
		S = P[axis][1][1] + R[axis];
80009dbe:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009dc2:	ec fa 00 18 	ld.w	r10,r6[24]
80009dc6:	12 98       	mov	r8,r9
80009dc8:	a3 78       	lsl	r8,0x3
80009dca:	12 08       	add	r8,r9
80009dcc:	a3 78       	lsl	r8,0x3
80009dce:	f4 08 00 08 	add	r8,r10,r8
80009dd2:	2e 08       	sub	r8,-32
80009dd4:	f0 ea 00 00 	ld.d	r10,r8[0]
80009dd8:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009ddc:	ec f8 01 68 	ld.w	r8,r6[360]
80009de0:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80009de4:	f0 16 00 05 	mcall	r6[20]
80009de8:	14 98       	mov	r8,r10
80009dea:	16 99       	mov	r9,r11
80009dec:	ee e9 ff c8 	st.d	r7[-56],r8
		K1 = P[axis][0][1] * 1/S;
80009df0:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009df4:	ec fa 00 18 	ld.w	r10,r6[24]
80009df8:	12 98       	mov	r8,r9
80009dfa:	a3 78       	lsl	r8,0x3
80009dfc:	12 08       	add	r8,r9
80009dfe:	2f f8       	sub	r8,-1
80009e00:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
80009e04:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009e08:	f0 16 00 0c 	mcall	r6[48]
80009e0c:	14 98       	mov	r8,r10
80009e0e:	16 99       	mov	r9,r11
80009e10:	ee e9 ff d0 	st.d	r7[-48],r8
		K2 = P[axis][1][1] * 1/S;
80009e14:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009e18:	ec fa 00 18 	ld.w	r10,r6[24]
80009e1c:	12 98       	mov	r8,r9
80009e1e:	a3 78       	lsl	r8,0x3
80009e20:	12 08       	add	r8,r9
80009e22:	a3 78       	lsl	r8,0x3
80009e24:	f4 08 00 08 	add	r8,r10,r8
80009e28:	2e 08       	sub	r8,-32
80009e2a:	f0 ea 00 00 	ld.d	r10,r8[0]
80009e2e:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009e32:	f0 16 00 0c 	mcall	r6[48]
80009e36:	14 98       	mov	r8,r10
80009e38:	16 99       	mov	r9,r11
80009e3a:	ee e9 ff d8 	st.d	r7[-40],r8

		centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * velxy;
80009e3e:	ec f8 00 00 	ld.w	r8,r6[0]
80009e42:	70 08       	ld.w	r8,r8[0x0]
80009e44:	ef 48 ff 98 	st.w	r7[-104],r8
80009e48:	ee f5 ff bc 	ld.w	r5,r7[-68]
80009e4c:	ec f8 00 00 	ld.w	r8,r6[0]
80009e50:	70 0a       	ld.w	r10,r8[0x0]
80009e52:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009e56:	12 98       	mov	r8,r9
80009e58:	a1 78       	lsl	r8,0x1
80009e5a:	12 08       	add	r8,r9
80009e5c:	a3 78       	lsl	r8,0x3
80009e5e:	f4 08 00 08 	add	r8,r10,r8
80009e62:	f0 c8 f4 a4 	sub	r8,r8,-2908
80009e66:	f0 e2 00 00 	ld.d	r2,r8[0]
80009e6a:	ee e8 ff c0 	ld.d	r8,r7[-64]
80009e6e:	ee ea ff d0 	ld.d	r10,r7[-48]
80009e72:	f0 16 00 03 	mcall	r6[12]
80009e76:	14 98       	mov	r8,r10
80009e78:	16 99       	mov	r9,r11
80009e7a:	04 9a       	mov	r10,r2
80009e7c:	06 9b       	mov	r11,r3
80009e7e:	f0 16 00 05 	mcall	r6[20]
80009e82:	14 98       	mov	r8,r10
80009e84:	16 99       	mov	r9,r11
80009e86:	10 9a       	mov	r10,r8
80009e88:	12 9b       	mov	r11,r9
80009e8a:	0a 98       	mov	r8,r5
80009e8c:	a1 78       	lsl	r8,0x1
80009e8e:	0a 08       	add	r8,r5
80009e90:	a3 78       	lsl	r8,0x3
80009e92:	ee f9 ff 98 	ld.w	r9,r7[-104]
80009e96:	f2 08 00 08 	add	r8,r9,r8
80009e9a:	f0 c8 f4 a4 	sub	r8,r8,-2908
80009e9e:	f0 eb 00 00 	st.d	r8[0],r10
		centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * velxy;
80009ea2:	ec f8 00 00 	ld.w	r8,r6[0]
80009ea6:	70 08       	ld.w	r8,r8[0x0]
80009ea8:	ef 48 ff 9c 	st.w	r7[-100],r8
80009eac:	ee f5 ff bc 	ld.w	r5,r7[-68]
80009eb0:	ec f8 00 00 	ld.w	r8,r6[0]
80009eb4:	70 0a       	ld.w	r10,r8[0x0]
80009eb6:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009eba:	12 98       	mov	r8,r9
80009ebc:	a1 78       	lsl	r8,0x1
80009ebe:	12 08       	add	r8,r9
80009ec0:	2f f8       	sub	r8,-1
80009ec2:	a3 78       	lsl	r8,0x3
80009ec4:	f4 08 00 08 	add	r8,r10,r8
80009ec8:	f0 e2 0b 5c 	ld.d	r2,r8[2908]
80009ecc:	ee e8 ff c0 	ld.d	r8,r7[-64]
80009ed0:	ee ea ff d8 	ld.d	r10,r7[-40]
80009ed4:	f0 16 00 03 	mcall	r6[12]
80009ed8:	14 98       	mov	r8,r10
80009eda:	16 99       	mov	r9,r11
80009edc:	04 9a       	mov	r10,r2
80009ede:	06 9b       	mov	r11,r3
80009ee0:	f0 16 00 05 	mcall	r6[20]
80009ee4:	14 98       	mov	r8,r10
80009ee6:	16 99       	mov	r9,r11
80009ee8:	10 9a       	mov	r10,r8
80009eea:	12 9b       	mov	r11,r9
80009eec:	0a 98       	mov	r8,r5
80009eee:	a1 78       	lsl	r8,0x1
80009ef0:	0a 08       	add	r8,r5
80009ef2:	2f f8       	sub	r8,-1
80009ef4:	a3 78       	lsl	r8,0x3
80009ef6:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80009efa:	f2 08 00 08 	add	r8,r9,r8
80009efe:	f0 eb 0b 5c 	st.d	r8[2908],r10

		P11 = -K1 * P[axis][1][0] + P[axis][0][0];
80009f02:	ee f8 ff d0 	ld.w	r8,r7[-48]
80009f06:	10 99       	mov	r9,r8
80009f08:	ee 19 80 00 	eorh	r9,0x8000
80009f0c:	ef 49 ff a0 	st.w	r7[-96],r9
80009f10:	ee f8 ff d4 	ld.w	r8,r7[-44]
80009f14:	ef 48 ff a4 	st.w	r7[-92],r8
80009f18:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009f1c:	ec fa 00 18 	ld.w	r10,r6[24]
80009f20:	12 98       	mov	r8,r9
80009f22:	a3 78       	lsl	r8,0x3
80009f24:	12 08       	add	r8,r9
80009f26:	a3 78       	lsl	r8,0x3
80009f28:	f4 08 00 08 	add	r8,r10,r8
80009f2c:	2e 88       	sub	r8,-24
80009f2e:	f0 e8 00 00 	ld.d	r8,r8[0]
80009f32:	ee ea ff a0 	ld.d	r10,r7[-96]
80009f36:	f0 16 00 03 	mcall	r6[12]
80009f3a:	14 98       	mov	r8,r10
80009f3c:	16 99       	mov	r9,r11
80009f3e:	10 9a       	mov	r10,r8
80009f40:	12 9b       	mov	r11,r9
80009f42:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009f46:	ec fc 00 18 	ld.w	r12,r6[24]
80009f4a:	12 98       	mov	r8,r9
80009f4c:	a3 78       	lsl	r8,0x3
80009f4e:	12 08       	add	r8,r9
80009f50:	a3 78       	lsl	r8,0x3
80009f52:	f8 08 00 08 	add	r8,r12,r8
80009f56:	f0 e8 00 00 	ld.d	r8,r8[0]
80009f5a:	f0 16 00 05 	mcall	r6[20]
80009f5e:	14 98       	mov	r8,r10
80009f60:	16 99       	mov	r9,r11
80009f62:	ee e9 ff e0 	st.d	r7[-32],r8
		P12 = -K1 * P[axis][1][1] + P[axis][0][1];
80009f66:	ee f8 ff d0 	ld.w	r8,r7[-48]
80009f6a:	10 99       	mov	r9,r8
80009f6c:	ee 19 80 00 	eorh	r9,0x8000
80009f70:	ef 49 ff a8 	st.w	r7[-88],r9
80009f74:	ee f8 ff d4 	ld.w	r8,r7[-44]
80009f78:	ef 48 ff ac 	st.w	r7[-84],r8
80009f7c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009f80:	ec fa 00 18 	ld.w	r10,r6[24]
80009f84:	12 98       	mov	r8,r9
80009f86:	a3 78       	lsl	r8,0x3
80009f88:	12 08       	add	r8,r9
80009f8a:	a3 78       	lsl	r8,0x3
80009f8c:	f4 08 00 08 	add	r8,r10,r8
80009f90:	2e 08       	sub	r8,-32
80009f92:	f0 e8 00 00 	ld.d	r8,r8[0]
80009f96:	ee ea ff a8 	ld.d	r10,r7[-88]
80009f9a:	f0 16 00 03 	mcall	r6[12]
80009f9e:	14 98       	mov	r8,r10
80009fa0:	16 99       	mov	r9,r11
80009fa2:	10 9a       	mov	r10,r8
80009fa4:	12 9b       	mov	r11,r9
80009fa6:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009faa:	ec fc 00 18 	ld.w	r12,r6[24]
80009fae:	12 98       	mov	r8,r9
80009fb0:	a3 78       	lsl	r8,0x3
80009fb2:	12 08       	add	r8,r9
80009fb4:	2f f8       	sub	r8,-1
80009fb6:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80009fba:	f0 16 00 05 	mcall	r6[20]
80009fbe:	14 98       	mov	r8,r10
80009fc0:	16 99       	mov	r9,r11
80009fc2:	ee e9 ff e8 	st.d	r7[-24],r8
		P21 = (1.0 - K2) * P[axis][1][0];
80009fc6:	ee e8 ff d8 	ld.d	r8,r7[-40]
80009fca:	30 0a       	mov	r10,0
80009fcc:	fc 1b 3f f0 	movh	r11,0x3ff0
80009fd0:	f0 16 00 11 	mcall	r6[68]
80009fd4:	14 98       	mov	r8,r10
80009fd6:	16 99       	mov	r9,r11
80009fd8:	10 9a       	mov	r10,r8
80009fda:	12 9b       	mov	r11,r9
80009fdc:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009fe0:	ec fc 00 18 	ld.w	r12,r6[24]
80009fe4:	12 98       	mov	r8,r9
80009fe6:	a3 78       	lsl	r8,0x3
80009fe8:	12 08       	add	r8,r9
80009fea:	a3 78       	lsl	r8,0x3
80009fec:	f8 08 00 08 	add	r8,r12,r8
80009ff0:	2e 88       	sub	r8,-24
80009ff2:	f0 e8 00 00 	ld.d	r8,r8[0]
80009ff6:	f0 16 00 03 	mcall	r6[12]
80009ffa:	14 98       	mov	r8,r10
80009ffc:	16 99       	mov	r9,r11
80009ffe:	ee e9 ff f0 	st.d	r7[-16],r8
		P22 = (1.0 - K2) * P[axis][1][1];
8000a002:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000a006:	30 0a       	mov	r10,0
8000a008:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a00c:	f0 16 00 11 	mcall	r6[68]
8000a010:	14 98       	mov	r8,r10
8000a012:	16 99       	mov	r9,r11
8000a014:	10 9a       	mov	r10,r8
8000a016:	12 9b       	mov	r11,r9
8000a018:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a01c:	ec fc 00 18 	ld.w	r12,r6[24]
8000a020:	12 98       	mov	r8,r9
8000a022:	a3 78       	lsl	r8,0x3
8000a024:	12 08       	add	r8,r9
8000a026:	a3 78       	lsl	r8,0x3
8000a028:	f8 08 00 08 	add	r8,r12,r8
8000a02c:	2e 08       	sub	r8,-32
8000a02e:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a032:	f0 16 00 03 	mcall	r6[12]
8000a036:	14 98       	mov	r8,r10
8000a038:	16 99       	mov	r9,r11
8000a03a:	ee e9 ff f8 	st.d	r7[-8],r8

		P[axis][0][0] = P11;
8000a03e:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a042:	ec fa 00 18 	ld.w	r10,r6[24]
8000a046:	12 98       	mov	r8,r9
8000a048:	a3 78       	lsl	r8,0x3
8000a04a:	12 08       	add	r8,r9
8000a04c:	a3 78       	lsl	r8,0x3
8000a04e:	10 0a       	add	r10,r8
8000a050:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000a054:	f4 e9 00 00 	st.d	r10[0],r8
		P[axis][0][1] = P12;
8000a058:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a05c:	ec fa 00 18 	ld.w	r10,r6[24]
8000a060:	12 98       	mov	r8,r9
8000a062:	a3 78       	lsl	r8,0x3
8000a064:	12 08       	add	r8,r9
8000a066:	f0 cb ff ff 	sub	r11,r8,-1
8000a06a:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000a06e:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
		P[axis][1][0] = P21;
8000a072:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a076:	ec fa 00 18 	ld.w	r10,r6[24]
8000a07a:	12 98       	mov	r8,r9
8000a07c:	a3 78       	lsl	r8,0x3
8000a07e:	12 08       	add	r8,r9
8000a080:	a3 78       	lsl	r8,0x3
8000a082:	f4 08 00 08 	add	r8,r10,r8
8000a086:	f0 ca ff e8 	sub	r10,r8,-24
8000a08a:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000a08e:	f4 e9 00 00 	st.d	r10[0],r8
		P[axis][1][1] = P22;
8000a092:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a096:	ec fa 00 18 	ld.w	r10,r6[24]
8000a09a:	12 98       	mov	r8,r9
8000a09c:	a3 78       	lsl	r8,0x3
8000a09e:	12 08       	add	r8,r9
8000a0a0:	a3 78       	lsl	r8,0x3
8000a0a2:	f4 08 00 08 	add	r8,r10,r8
8000a0a6:	f0 ca ff e0 	sub	r10,r8,-32
8000a0aa:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000a0ae:	f4 e9 00 00 	st.d	r10[0],r8
		
		/*************************************************************************************/
		velxy = speed_meas - centralData->position_estimator.vel[axis];
8000a0b2:	ec f8 00 00 	ld.w	r8,r6[0]
8000a0b6:	70 08       	ld.w	r8,r8[0x0]
8000a0b8:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a0bc:	f2 c9 fc a3 	sub	r9,r9,-861
8000a0c0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000a0c4:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000a0c8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000a0cc:	10 9c       	mov	r12,r8
8000a0ce:	f0 16 00 02 	mcall	r6[8]
8000a0d2:	14 98       	mov	r8,r10
8000a0d4:	16 99       	mov	r9,r11
8000a0d6:	ee e9 ff c0 	st.d	r7[-64],r8
		
		S = P2[axis][1][1] + R2[axis];
8000a0da:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a0de:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a0e2:	12 98       	mov	r8,r9
8000a0e4:	a3 78       	lsl	r8,0x3
8000a0e6:	12 08       	add	r8,r9
8000a0e8:	a3 78       	lsl	r8,0x3
8000a0ea:	f4 08 00 08 	add	r8,r10,r8
8000a0ee:	2e 08       	sub	r8,-32
8000a0f0:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a0f4:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a0f8:	ec f8 01 64 	ld.w	r8,r6[356]
8000a0fc:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000a100:	f0 16 00 05 	mcall	r6[20]
8000a104:	14 98       	mov	r8,r10
8000a106:	16 99       	mov	r9,r11
8000a108:	ee e9 ff c8 	st.d	r7[-56],r8
		K1 = P2[axis][0][1] * 1/S;
8000a10c:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a110:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a114:	12 98       	mov	r8,r9
8000a116:	a3 78       	lsl	r8,0x3
8000a118:	12 08       	add	r8,r9
8000a11a:	2f f8       	sub	r8,-1
8000a11c:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
8000a120:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000a124:	f0 16 00 0c 	mcall	r6[48]
8000a128:	14 98       	mov	r8,r10
8000a12a:	16 99       	mov	r9,r11
8000a12c:	ee e9 ff d0 	st.d	r7[-48],r8
		K2 = P2[axis][1][1] * 1/S;
8000a130:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a134:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a138:	12 98       	mov	r8,r9
8000a13a:	a3 78       	lsl	r8,0x3
8000a13c:	12 08       	add	r8,r9
8000a13e:	a3 78       	lsl	r8,0x3
8000a140:	f4 08 00 08 	add	r8,r10,r8
8000a144:	2e 08       	sub	r8,-32
8000a146:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a14a:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000a14e:	f0 16 00 0c 	mcall	r6[48]
8000a152:	14 98       	mov	r8,r10
8000a154:	16 99       	mov	r9,r11
8000a156:	ee e9 ff d8 	st.d	r7[-40],r8
		
		//centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * velxy;
		//centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * velxy;
		
		P11 = -K1 * P2[axis][1][0] + P2[axis][0][0];
8000a15a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000a15e:	10 99       	mov	r9,r8
8000a160:	ee 19 80 00 	eorh	r9,0x8000
8000a164:	ef 49 ff b0 	st.w	r7[-80],r9
8000a168:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000a16c:	ef 48 ff b4 	st.w	r7[-76],r8
8000a170:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a174:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a178:	12 98       	mov	r8,r9
8000a17a:	a3 78       	lsl	r8,0x3
8000a17c:	12 08       	add	r8,r9
8000a17e:	a3 78       	lsl	r8,0x3
8000a180:	f4 08 00 08 	add	r8,r10,r8
8000a184:	2e 88       	sub	r8,-24
8000a186:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a18a:	ee ea ff b0 	ld.d	r10,r7[-80]
8000a18e:	f0 16 00 03 	mcall	r6[12]
8000a192:	14 98       	mov	r8,r10
8000a194:	16 99       	mov	r9,r11
8000a196:	10 9a       	mov	r10,r8
8000a198:	12 9b       	mov	r11,r9
8000a19a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a19e:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a1a2:	12 98       	mov	r8,r9
8000a1a4:	a3 78       	lsl	r8,0x3
8000a1a6:	12 08       	add	r8,r9
8000a1a8:	a3 78       	lsl	r8,0x3
8000a1aa:	f8 08 00 08 	add	r8,r12,r8
8000a1ae:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a1b2:	f0 16 00 05 	mcall	r6[20]
8000a1b6:	14 98       	mov	r8,r10
8000a1b8:	16 99       	mov	r9,r11
8000a1ba:	ee e9 ff e0 	st.d	r7[-32],r8
		P12 = -K1 * P2[axis][1][1] + P2[axis][0][1];
8000a1be:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000a1c2:	10 91       	mov	r1,r8
8000a1c4:	ee 11 80 00 	eorh	r1,0x8000
8000a1c8:	ee f0 ff d4 	ld.w	r0,r7[-44]
8000a1cc:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a1d0:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a1d4:	12 98       	mov	r8,r9
8000a1d6:	a3 78       	lsl	r8,0x3
8000a1d8:	12 08       	add	r8,r9
8000a1da:	a3 78       	lsl	r8,0x3
8000a1dc:	f4 08 00 08 	add	r8,r10,r8
8000a1e0:	2e 08       	sub	r8,-32
8000a1e2:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a1e6:	00 9a       	mov	r10,r0
8000a1e8:	02 9b       	mov	r11,r1
8000a1ea:	f0 16 00 03 	mcall	r6[12]
8000a1ee:	14 98       	mov	r8,r10
8000a1f0:	16 99       	mov	r9,r11
8000a1f2:	10 9a       	mov	r10,r8
8000a1f4:	12 9b       	mov	r11,r9
8000a1f6:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a1fa:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a1fe:	12 98       	mov	r8,r9
8000a200:	a3 78       	lsl	r8,0x3
8000a202:	12 08       	add	r8,r9
8000a204:	2f f8       	sub	r8,-1
8000a206:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000a20a:	f0 16 00 05 	mcall	r6[20]
8000a20e:	14 98       	mov	r8,r10
8000a210:	16 99       	mov	r9,r11
8000a212:	ee e9 ff e8 	st.d	r7[-24],r8
		P21 = (1.0 - K2) * P2[axis][1][0];
8000a216:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000a21a:	30 0a       	mov	r10,0
8000a21c:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a220:	f0 16 00 11 	mcall	r6[68]
8000a224:	14 98       	mov	r8,r10
8000a226:	16 99       	mov	r9,r11
8000a228:	10 9a       	mov	r10,r8
8000a22a:	12 9b       	mov	r11,r9
8000a22c:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a230:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a234:	12 98       	mov	r8,r9
8000a236:	a3 78       	lsl	r8,0x3
8000a238:	12 08       	add	r8,r9
8000a23a:	a3 78       	lsl	r8,0x3
8000a23c:	f8 08 00 08 	add	r8,r12,r8
8000a240:	2e 88       	sub	r8,-24
8000a242:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a246:	f0 16 00 03 	mcall	r6[12]
8000a24a:	14 98       	mov	r8,r10
8000a24c:	16 99       	mov	r9,r11
8000a24e:	ee e9 ff f0 	st.d	r7[-16],r8
		P22 = (1.0 - K2) * P2[axis][1][1];
8000a252:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000a256:	30 0a       	mov	r10,0
8000a258:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a25c:	f0 16 00 11 	mcall	r6[68]
8000a260:	14 98       	mov	r8,r10
8000a262:	16 99       	mov	r9,r11
8000a264:	10 9a       	mov	r10,r8
8000a266:	12 9b       	mov	r11,r9
8000a268:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a26c:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a270:	12 98       	mov	r8,r9
8000a272:	a3 78       	lsl	r8,0x3
8000a274:	12 08       	add	r8,r9
8000a276:	a3 78       	lsl	r8,0x3
8000a278:	f8 08 00 08 	add	r8,r12,r8
8000a27c:	2e 08       	sub	r8,-32
8000a27e:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a282:	f0 16 00 03 	mcall	r6[12]
8000a286:	14 98       	mov	r8,r10
8000a288:	16 99       	mov	r9,r11
8000a28a:	ee e9 ff f8 	st.d	r7[-8],r8

		P2[axis][0][0] = P11;
8000a28e:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a292:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a296:	12 98       	mov	r8,r9
8000a298:	a3 78       	lsl	r8,0x3
8000a29a:	12 08       	add	r8,r9
8000a29c:	a3 78       	lsl	r8,0x3
8000a29e:	10 0a       	add	r10,r8
8000a2a0:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000a2a4:	f4 e9 00 00 	st.d	r10[0],r8
		P2[axis][0][1] = P12;
8000a2a8:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a2ac:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a2b0:	12 98       	mov	r8,r9
8000a2b2:	a3 78       	lsl	r8,0x3
8000a2b4:	12 08       	add	r8,r9
8000a2b6:	f0 cb ff ff 	sub	r11,r8,-1
8000a2ba:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000a2be:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
		P2[axis][1][0] = P21;
8000a2c2:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a2c6:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a2ca:	12 98       	mov	r8,r9
8000a2cc:	a3 78       	lsl	r8,0x3
8000a2ce:	12 08       	add	r8,r9
8000a2d0:	a3 78       	lsl	r8,0x3
8000a2d2:	f4 08 00 08 	add	r8,r10,r8
8000a2d6:	f0 ca ff e8 	sub	r10,r8,-24
8000a2da:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000a2de:	f4 e9 00 00 	st.d	r10[0],r8
		P2[axis][1][1] = P22;
8000a2e2:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a2e6:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a2ea:	12 98       	mov	r8,r9
8000a2ec:	a3 78       	lsl	r8,0x3
8000a2ee:	12 08       	add	r8,r9
8000a2f0:	a3 78       	lsl	r8,0x3
8000a2f2:	f4 08 00 08 	add	r8,r10,r8
8000a2f6:	f0 ca ff e0 	sub	r10,r8,-32
8000a2fa:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000a2fe:	f4 e9 00 00 	st.d	r10[0],r8
}
8000a302:	2e 6d       	sub	sp,-104
8000a304:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000a308:	80 00       	ld.sh	r0,r0[0x0]
8000a30a:	9c 08       	ld.sh	r8,lr[0x0]

8000a30c <estimator_loop>:

//--------------------------------GLOBAL--------------------------
void estimator_loop()
{
8000a30c:	eb cd 40 e0 	pushm	r5-r7,lr
8000a310:	1a 97       	mov	r7,sp
8000a312:	21 dd       	sub	sp,116
8000a314:	fe f6 02 00 	ld.w	r6,pc[512]
8000a318:	1e 26       	rsub	r6,pc
	
	global_position_t global_gps_position;
	local_coordinates_t local_coordinates;
	//static uint32_t dt_baro,time_before_baro;
	
	if (!centralData->position_estimator.init_gps_position)
8000a31a:	ec f8 00 00 	ld.w	r8,r6[0]
8000a31e:	70 08       	ld.w	r8,r8[0x0]
8000a320:	f1 38 0d 64 	ld.ub	r8,r8[3428]
8000a324:	ec 18 00 01 	eorl	r8,0x1
8000a328:	5c 58       	castu.b	r8
8000a32a:	c0 30       	breq	8000a330 <estimator_loop+0x24>
	{
		init_pos_gps_estimator();
8000a32c:	f0 16 01 14 	mcall	r6[1104]
	}

	if(!filter_init_delta_t)
8000a330:	ec f8 02 d4 	ld.w	r8,r6[724]
8000a334:	11 88       	ld.ub	r8,r8[0x0]
8000a336:	ec 18 00 01 	eorl	r8,0x1
8000a33a:	5c 58       	castu.b	r8
8000a33c:	c0 c0       	breq	8000a354 <estimator_loop+0x48>
	{
		filter_init_delta_t = true;
8000a33e:	ec f9 02 d4 	ld.w	r9,r6[724]
8000a342:	30 18       	mov	r8,1
8000a344:	b2 88       	st.b	r9[0x0],r8
		prev_time = get_micros();
8000a346:	f0 16 00 29 	mcall	r6[164]
8000a34a:	18 99       	mov	r9,r12
8000a34c:	ec f8 02 d0 	ld.w	r8,r6[720]
8000a350:	91 09       	st.w	r8[0x0],r9
8000a352:	cd e8       	rjmp	8000a50e <estimator_loop+0x202>
	}else{
		actual_time = get_micros();
8000a354:	f0 16 00 29 	mcall	r6[164]
8000a358:	18 98       	mov	r8,r12
8000a35a:	ef 48 ff fc 	st.w	r7[-4],r8
		centralData->estimation.delta_t_filter = (float)(actual_time-prev_time);
8000a35e:	ec f8 00 00 	ld.w	r8,r6[0]
8000a362:	70 08       	ld.w	r8,r8[0x0]
8000a364:	ec f9 02 d0 	ld.w	r9,r6[720]
8000a368:	72 09       	ld.w	r9,r9[0x0]
8000a36a:	ee fa ff fc 	ld.w	r10,r7[-4]
8000a36e:	f4 09 01 09 	sub	r9,r10,r9
8000a372:	e5 a4 09 09 	cop	cp0,cr9,cr0,cr9,0x48
8000a376:	f1 49 0b a4 	st.w	r8[2980],r9
		prev_time = actual_time;
8000a37a:	ec f8 02 d0 	ld.w	r8,r6[720]
8000a37e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a382:	91 09       	st.w	r8[0x0],r9
		centralData->estimation.delta_t_filter /= 1000000.0;
8000a384:	ec f8 00 00 	ld.w	r8,r6[0]
8000a388:	70 05       	ld.w	r5,r8[0x0]
8000a38a:	ec f8 00 00 	ld.w	r8,r6[0]
8000a38e:	70 08       	ld.w	r8,r8[0x0]
8000a390:	f0 f8 0b a4 	ld.w	r8,r8[2980]
8000a394:	e0 6b 24 00 	mov	r11,9216
8000a398:	ea 1b 49 74 	orh	r11,0x4974
8000a39c:	10 9c       	mov	r12,r8
8000a39e:	f0 16 00 08 	mcall	r6[32]
8000a3a2:	18 98       	mov	r8,r12
8000a3a4:	eb 48 0b a4 	st.w	r5[2980],r8
		
		e_predict(&(centralData->imu1.attitude.qe),centralData->imu1.attitude.acc_bf,centralData->estimation.delta_t_filter);
8000a3a8:	ec f8 00 00 	ld.w	r8,r6[0]
8000a3ac:	70 08       	ld.w	r8,r8[0x0]
8000a3ae:	f0 fa 0b a4 	ld.w	r10,r8[2980]
8000a3b2:	ec f8 00 00 	ld.w	r8,r6[0]
8000a3b6:	70 08       	ld.w	r8,r8[0x0]
8000a3b8:	f0 c9 ff 40 	sub	r9,r8,-192
8000a3bc:	ec f8 00 00 	ld.w	r8,r6[0]
8000a3c0:	70 08       	ld.w	r8,r8[0x0]
8000a3c2:	12 9b       	mov	r11,r9
8000a3c4:	10 9c       	mov	r12,r8
8000a3c6:	f0 16 01 dc 	mcall	r6[1904]
		
		//Check new values from GPS/Baro, if yes, update
		if (newValidGpsMsg(&timeLastGpsMsgEstimator) && centralData->position_estimator.init_gps_position && (centralData->simulation_mode == 0))
8000a3ca:	ec fc 02 90 	ld.w	r12,r6[656]
8000a3ce:	f0 16 00 94 	mcall	r6[592]
8000a3d2:	18 98       	mov	r8,r12
8000a3d4:	58 08       	cp.w	r8,0
8000a3d6:	e0 80 00 9c 	breq	8000a50e <estimator_loop+0x202>
8000a3da:	ec f8 00 00 	ld.w	r8,r6[0]
8000a3de:	70 08       	ld.w	r8,r8[0x0]
8000a3e0:	f1 38 0d 64 	ld.ub	r8,r8[3428]
8000a3e4:	58 08       	cp.w	r8,0
8000a3e6:	e0 80 00 94 	breq	8000a50e <estimator_loop+0x202>
8000a3ea:	ec f8 00 00 	ld.w	r8,r6[0]
8000a3ee:	70 08       	ld.w	r8,r8[0x0]
8000a3f0:	f0 f8 10 c0 	ld.w	r8,r8[4288]
8000a3f4:	58 08       	cp.w	r8,0
8000a3f6:	e0 81 00 8c 	brne	8000a50e <estimator_loop+0x202>
			//latitude_rad= ((double) (centralData->GPS_data.latitude-init_lat))*DEGREE_TO_RADIAN; //in rad E+7
			//pos_y= (float) (((double) (centralData->GPS_data.longitude-init_long)*EARTH_RADIUS)*DEGREE_TO_RADIAN*(COS_PI_4-COS_PI_4*(centralData->GPS_data.latitude*DEGREE_TO_RADIAN*0.0000001-PI_4)-COS_PI_4*0.5*(centralData->GPS_data.latitude*DEGREE_TO_RADIAN*0.0000001-PI_4)*(centralData->GPS_data.latitude*DEGREE_TO_RADIAN*0.0000001-PI_4)));//Taylor 2nd order cos() approx
			//pos_x= (float) (latitude_rad*EARTH_RADIUS);
			//pos_z= -centralData->GPS_data.altitude+init_alt;
			
			global_gps_position.longitude = centralData->GPS_data.longitude;
8000a3fa:	ec f8 00 00 	ld.w	r8,r6[0]
8000a3fe:	70 08       	ld.w	r8,r8[0x0]
8000a400:	f0 e8 0b 10 	ld.d	r8,r8[2832]
8000a404:	ee e9 ff bc 	st.d	r7[-68],r8
			global_gps_position.latitude = centralData->GPS_data.latitude;
8000a408:	ec f8 00 00 	ld.w	r8,r6[0]
8000a40c:	70 08       	ld.w	r8,r8[0x0]
8000a40e:	f0 e8 0b 08 	ld.d	r8,r8[2824]
8000a412:	ee e9 ff c4 	st.d	r7[-60],r8
			global_gps_position.altitude = centralData->GPS_data.altitude;
8000a416:	ec f8 00 00 	ld.w	r8,r6[0]
8000a41a:	70 08       	ld.w	r8,r8[0x0]
8000a41c:	f0 f8 0b 18 	ld.w	r8,r8[2840]
8000a420:	ef 48 ff cc 	st.w	r7[-52],r8
			
			local_coordinates = global_to_local_position(global_gps_position,centralData->position_estimator.localPosition.origin);
8000a424:	ec f8 00 00 	ld.w	r8,r6[0]
8000a428:	70 08       	ld.w	r8,r8[0x0]
8000a42a:	ee cc 00 74 	sub	r12,r7,116
8000a42e:	20 7d       	sub	sp,28
8000a430:	1a 99       	mov	r9,sp
8000a432:	12 9a       	mov	r10,r9
8000a434:	f0 cb f2 54 	sub	r11,r8,-3500
8000a438:	f4 c8 00 00 	sub	r8,r10,0
8000a43c:	f6 c9 00 00 	sub	r9,r11,0
8000a440:	72 0e       	ld.w	lr,r9[0x0]
8000a442:	91 0e       	st.w	r8[0x0],lr
8000a444:	72 1e       	ld.w	lr,r9[0x4]
8000a446:	91 1e       	st.w	r8[0x4],lr
8000a448:	72 2e       	ld.w	lr,r9[0x8]
8000a44a:	91 2e       	st.w	r8[0x8],lr
8000a44c:	72 39       	ld.w	r9,r9[0xc]
8000a44e:	91 39       	st.w	r8[0xc],r9
8000a450:	f6 e8 00 10 	ld.d	r8,r11[16]
8000a454:	f4 e9 00 10 	st.d	r10[16],r8
8000a458:	76 68       	ld.w	r8,r11[0x18]
8000a45a:	95 68       	st.w	r10[0x18],r8
8000a45c:	20 7d       	sub	sp,28
8000a45e:	1a 98       	mov	r8,sp
8000a460:	10 9a       	mov	r10,r8
8000a462:	ee cb 00 44 	sub	r11,r7,68
8000a466:	f4 c8 00 00 	sub	r8,r10,0
8000a46a:	f6 c9 00 00 	sub	r9,r11,0
8000a46e:	72 0e       	ld.w	lr,r9[0x0]
8000a470:	91 0e       	st.w	r8[0x0],lr
8000a472:	72 1e       	ld.w	lr,r9[0x4]
8000a474:	91 1e       	st.w	r8[0x4],lr
8000a476:	72 2e       	ld.w	lr,r9[0x8]
8000a478:	91 2e       	st.w	r8[0x8],lr
8000a47a:	72 39       	ld.w	r9,r9[0xc]
8000a47c:	91 39       	st.w	r8[0xc],r9
8000a47e:	f6 e8 00 10 	ld.d	r8,r11[16]
8000a482:	f4 e9 00 10 	st.d	r10[16],r8
8000a486:	76 68       	ld.w	r8,r11[0x18]
8000a488:	95 68       	st.w	r10[0x18],r8
8000a48a:	f0 16 00 7a 	mcall	r6[488]
8000a48e:	2f 2d       	sub	sp,-56
			
			//get delay of GPS measure
			//do prediction up to the corresponding delay
			
			e_kalman_update_position(X,local_coordinates.pos[X]);
8000a490:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000a494:	10 9c       	mov	r12,r8
8000a496:	f0 16 00 02 	mcall	r6[8]
8000a49a:	14 98       	mov	r8,r10
8000a49c:	16 99       	mov	r9,r11
8000a49e:	10 9a       	mov	r10,r8
8000a4a0:	12 9b       	mov	r11,r9
8000a4a2:	30 0c       	mov	r12,0
8000a4a4:	f0 16 00 cc 	mcall	r6[816]
			e_kalman_update_position(Y,local_coordinates.pos[Y]);
8000a4a8:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000a4ac:	10 9c       	mov	r12,r8
8000a4ae:	f0 16 00 02 	mcall	r6[8]
8000a4b2:	14 98       	mov	r8,r10
8000a4b4:	16 99       	mov	r9,r11
8000a4b6:	10 9a       	mov	r10,r8
8000a4b8:	12 9b       	mov	r11,r9
8000a4ba:	30 1c       	mov	r12,1
8000a4bc:	f0 16 00 cc 	mcall	r6[816]
			//e_kalman_update_position_hf(X,local_coordinates.pos[X]);
			//e_kalman_update_position_hf(Y,local_coordinates.pos[Y]);
			e_kalman_update_position(Z,local_coordinates.pos[Z]);
8000a4c0:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000a4c4:	10 9c       	mov	r12,r8
8000a4c6:	f0 16 00 02 	mcall	r6[8]
8000a4ca:	14 98       	mov	r8,r10
8000a4cc:	16 99       	mov	r9,r11
8000a4ce:	10 9a       	mov	r10,r8
8000a4d0:	12 9b       	mov	r11,r9
8000a4d2:	30 2c       	mov	r12,2
8000a4d4:	f0 16 00 cc 	mcall	r6[816]
			
			e_kalman_update_speed(X,centralData->GPS_data.northSpeed);
8000a4d8:	ec f8 00 00 	ld.w	r8,r6[0]
8000a4dc:	70 08       	ld.w	r8,r8[0x0]
8000a4de:	f0 f8 0b 28 	ld.w	r8,r8[2856]
8000a4e2:	10 9b       	mov	r11,r8
8000a4e4:	30 0c       	mov	r12,0
8000a4e6:	f0 16 00 a8 	mcall	r6[672]
			e_kalman_update_speed(Y,centralData->GPS_data.eastSpeed);
8000a4ea:	ec f8 00 00 	ld.w	r8,r6[0]
8000a4ee:	70 08       	ld.w	r8,r8[0x0]
8000a4f0:	f0 f8 0b 2c 	ld.w	r8,r8[2860]
8000a4f4:	10 9b       	mov	r11,r8
8000a4f6:	30 1c       	mov	r12,1
8000a4f8:	f0 16 00 a8 	mcall	r6[672]
			//e_kalman_update_speed_hf(X,centralData->GPS_data.northSpeed);
			//e_kalman_update_speed_hf(Y,centralData->GPS_data.eastSpeed);
			e_kalman_update_speed(Z,centralData->GPS_data.verticalSpeed);
8000a4fc:	ec f8 00 00 	ld.w	r8,r6[0]
8000a500:	70 08       	ld.w	r8,r8[0x0]
8000a502:	f0 f8 0b 30 	ld.w	r8,r8[2864]
8000a506:	10 9b       	mov	r11,r8
8000a508:	30 2c       	mov	r12,2
8000a50a:	f0 16 00 a8 	mcall	r6[672]
		e_kalman_update_position(Z,baro->altitude,dt_baro);
		time_before_baro=get_millis();
		}	*/
		//}
	}
8000a50e:	2e 3d       	sub	sp,-116
8000a510:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000a514:	80 00       	ld.sh	r0,r0[0x0]
8000a516:	a1 9c       	lsr	r12,0x1

8000a518 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8000a518:	eb cd 40 80 	pushm	r7,lr
8000a51c:	1a 97       	mov	r7,sp
8000a51e:	20 3d       	sub	sp,12
8000a520:	ef 4c ff f8 	st.w	r7[-8],r12
8000a524:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8000a528:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a52c:	70 09       	ld.w	r9,r8[0x0]
8000a52e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a532:	70 08       	ld.w	r8,r8[0x0]
8000a534:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000a538:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a53c:	2f c8       	sub	r8,-4
8000a53e:	70 0a       	ld.w	r10,r8[0x0]
8000a540:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a544:	2f c8       	sub	r8,-4
8000a546:	70 08       	ld.w	r8,r8[0x0]
8000a548:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000a54c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000a550:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a554:	2f 88       	sub	r8,-8
8000a556:	70 0a       	ld.w	r10,r8[0x0]
8000a558:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a55c:	2f 88       	sub	r8,-8
8000a55e:	70 08       	ld.w	r8,r8[0x0]
8000a560:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000a564:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000a568:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8000a56c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000a570:	10 9c       	mov	r12,r8
8000a572:	2f dd       	sub	sp,-12
8000a574:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a578 <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
8000a578:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000a57c:	1a 97       	mov	r7,sp
8000a57e:	20 7d       	sub	sp,28
8000a580:	4b d6       	lddpc	r6,8000a674 <quat_multi+0xfc>
8000a582:	1e 26       	rsub	r6,pc
8000a584:	ee c8 ff ec 	sub	r8,r7,-20
8000a588:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8000a58a:	70 2a       	ld.w	r10,r8[0x8]
8000a58c:	70 79       	ld.w	r9,r8[0x1c]
8000a58e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000a592:	70 3b       	ld.w	r11,r8[0xc]
8000a594:	70 69       	ld.w	r9,r8[0x18]
8000a596:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000a59a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000a59e:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
8000a5a2:	70 3a       	ld.w	r10,r8[0xc]
8000a5a4:	70 59       	ld.w	r9,r8[0x14]
8000a5a6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000a5aa:	70 1b       	ld.w	r11,r8[0x4]
8000a5ac:	70 79       	ld.w	r9,r8[0x1c]
8000a5ae:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000a5b2:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000a5b6:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8000a5ba:	70 1a       	ld.w	r10,r8[0x4]
8000a5bc:	70 69       	ld.w	r9,r8[0x18]
8000a5be:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000a5c2:	70 2b       	ld.w	r11,r8[0x8]
8000a5c4:	70 59       	ld.w	r9,r8[0x14]
8000a5c6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000a5ca:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000a5ce:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
8000a5d2:	70 4a       	ld.w	r10,r8[0x10]
8000a5d4:	70 19       	ld.w	r9,r8[0x4]
8000a5d6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000a5da:	70 0b       	ld.w	r11,r8[0x0]
8000a5dc:	70 59       	ld.w	r9,r8[0x14]
8000a5de:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000a5e2:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000a5e6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000a5ea:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000a5ee:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
8000a5f2:	70 4a       	ld.w	r10,r8[0x10]
8000a5f4:	70 29       	ld.w	r9,r8[0x8]
8000a5f6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000a5fa:	70 0b       	ld.w	r11,r8[0x0]
8000a5fc:	70 69       	ld.w	r9,r8[0x18]
8000a5fe:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000a602:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000a606:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a60a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000a60e:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8000a612:	70 4a       	ld.w	r10,r8[0x10]
8000a614:	70 39       	ld.w	r9,r8[0xc]
8000a616:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000a61a:	70 0b       	ld.w	r11,r8[0x0]
8000a61c:	70 79       	ld.w	r9,r8[0x1c]
8000a61e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000a622:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000a626:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a62a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000a62e:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8000a632:	70 0a       	ld.w	r10,r8[0x0]
8000a634:	70 49       	ld.w	r9,r8[0x10]
8000a636:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8000a63a:	f0 c9 ff f0 	sub	r9,r8,-16
8000a63e:	2f c9       	sub	r9,-4
8000a640:	2f c8       	sub	r8,-4
8000a642:	12 9b       	mov	r11,r9
8000a644:	10 9c       	mov	r12,r8
8000a646:	c6 9f       	rcall	8000a518 <scalar_product>
8000a648:	18 98       	mov	r8,r12
8000a64a:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8000a64e:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
8000a652:	0a 98       	mov	r8,r5
8000a654:	ee c9 00 1c 	sub	r9,r7,28
8000a658:	20 08       	sub	r8,0
8000a65a:	20 09       	sub	r9,0
8000a65c:	72 0a       	ld.w	r10,r9[0x0]
8000a65e:	91 0a       	st.w	r8[0x0],r10
8000a660:	72 1a       	ld.w	r10,r9[0x4]
8000a662:	91 1a       	st.w	r8[0x4],r10
8000a664:	72 2a       	ld.w	r10,r9[0x8]
8000a666:	91 2a       	st.w	r8[0x8],r10
8000a668:	72 39       	ld.w	r9,r9[0xc]
8000a66a:	91 39       	st.w	r8[0xc],r9
}
8000a66c:	0a 9c       	mov	r12,r5
8000a66e:	2f 9d       	sub	sp,-28
8000a670:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000a674:	80 00       	ld.sh	r0,r0[0x0]
8000a676:	a4 06       	st.h	r2[0x0],r6

8000a678 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
8000a678:	eb cd 40 80 	pushm	r7,lr
8000a67c:	1a 97       	mov	r7,sp
8000a67e:	20 5d       	sub	sp,20
8000a680:	ee c9 ff f8 	sub	r9,r7,-8
8000a684:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
8000a686:	72 08       	ld.w	r8,r9[0x0]
8000a688:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8000a68c:	30 08       	mov	r8,0
8000a68e:	ef 48 ff fc 	st.w	r7[-4],r8
8000a692:	c1 58       	rjmp	8000a6bc <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
8000a694:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a698:	ee fb ff fc 	ld.w	r11,r7[-4]
8000a69c:	2f fb       	sub	r11,-1
8000a69e:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
8000a6a2:	ee 1b 80 00 	eorh	r11,0x8000
8000a6a6:	2f f8       	sub	r8,-1
8000a6a8:	a3 68       	lsl	r8,0x2
8000a6aa:	ee 08 00 08 	add	r8,r7,r8
8000a6ae:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
8000a6b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a6b6:	2f f8       	sub	r8,-1
8000a6b8:	ef 48 ff fc 	st.w	r7[-4],r8
8000a6bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a6c0:	58 28       	cp.w	r8,2
8000a6c2:	fe 9a ff e9 	brle	8000a694 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8000a6c6:	14 98       	mov	r8,r10
8000a6c8:	ee c9 00 14 	sub	r9,r7,20
8000a6cc:	20 08       	sub	r8,0
8000a6ce:	20 09       	sub	r9,0
8000a6d0:	72 0b       	ld.w	r11,r9[0x0]
8000a6d2:	91 0b       	st.w	r8[0x0],r11
8000a6d4:	72 1b       	ld.w	r11,r9[0x4]
8000a6d6:	91 1b       	st.w	r8[0x4],r11
8000a6d8:	72 2b       	ld.w	r11,r9[0x8]
8000a6da:	91 2b       	st.w	r8[0x8],r11
8000a6dc:	72 39       	ld.w	r9,r9[0xc]
8000a6de:	91 39       	st.w	r8[0xc],r9
}
8000a6e0:	14 9c       	mov	r12,r10
8000a6e2:	2f bd       	sub	sp,-20
8000a6e4:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a6e8 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
8000a6e8:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000a6ec:	1a 97       	mov	r7,sp
8000a6ee:	20 cd       	sub	sp,48
8000a6f0:	4b c6       	lddpc	r6,8000a7e0 <quat_global_to_local+0xf8>
8000a6f2:	1e 26       	rsub	r6,pc
8000a6f4:	ee c5 ff ec 	sub	r5,r7,-20
8000a6f8:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000a6fa:	ee ca 00 10 	sub	r10,r7,16
8000a6fe:	20 4d       	sub	sp,16
8000a700:	1a 98       	mov	r8,sp
8000a702:	0a 99       	mov	r9,r5
8000a704:	20 08       	sub	r8,0
8000a706:	20 09       	sub	r9,0
8000a708:	72 0b       	ld.w	r11,r9[0x0]
8000a70a:	91 0b       	st.w	r8[0x0],r11
8000a70c:	72 1b       	ld.w	r11,r9[0x4]
8000a70e:	91 1b       	st.w	r8[0x4],r11
8000a710:	72 2b       	ld.w	r11,r9[0x8]
8000a712:	91 2b       	st.w	r8[0x8],r11
8000a714:	72 39       	ld.w	r9,r9[0xc]
8000a716:	91 39       	st.w	r8[0xc],r9
8000a718:	14 9c       	mov	r12,r10
8000a71a:	ca ff       	rcall	8000a678 <quat_inv>
8000a71c:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8000a71e:	ee ca 00 20 	sub	r10,r7,32
8000a722:	20 4d       	sub	sp,16
8000a724:	1a 98       	mov	r8,sp
8000a726:	ea c9 ff f0 	sub	r9,r5,-16
8000a72a:	20 08       	sub	r8,0
8000a72c:	20 09       	sub	r9,0
8000a72e:	72 0b       	ld.w	r11,r9[0x0]
8000a730:	91 0b       	st.w	r8[0x0],r11
8000a732:	72 1b       	ld.w	r11,r9[0x4]
8000a734:	91 1b       	st.w	r8[0x4],r11
8000a736:	72 2b       	ld.w	r11,r9[0x8]
8000a738:	91 2b       	st.w	r8[0x8],r11
8000a73a:	72 39       	ld.w	r9,r9[0xc]
8000a73c:	91 39       	st.w	r8[0xc],r9
8000a73e:	20 4d       	sub	sp,16
8000a740:	1a 98       	mov	r8,sp
8000a742:	ee c9 00 10 	sub	r9,r7,16
8000a746:	20 08       	sub	r8,0
8000a748:	20 09       	sub	r9,0
8000a74a:	72 0b       	ld.w	r11,r9[0x0]
8000a74c:	91 0b       	st.w	r8[0x0],r11
8000a74e:	72 1b       	ld.w	r11,r9[0x4]
8000a750:	91 1b       	st.w	r8[0x4],r11
8000a752:	72 2b       	ld.w	r11,r9[0x8]
8000a754:	91 2b       	st.w	r8[0x8],r11
8000a756:	72 39       	ld.w	r9,r9[0xc]
8000a758:	91 39       	st.w	r8[0xc],r9
8000a75a:	14 9c       	mov	r12,r10
8000a75c:	c0 ef       	rcall	8000a578 <quat_multi>
8000a75e:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
8000a760:	ee ca 00 30 	sub	r10,r7,48
8000a764:	20 4d       	sub	sp,16
8000a766:	1a 98       	mov	r8,sp
8000a768:	0a 99       	mov	r9,r5
8000a76a:	20 08       	sub	r8,0
8000a76c:	20 09       	sub	r9,0
8000a76e:	72 0b       	ld.w	r11,r9[0x0]
8000a770:	91 0b       	st.w	r8[0x0],r11
8000a772:	72 1b       	ld.w	r11,r9[0x4]
8000a774:	91 1b       	st.w	r8[0x4],r11
8000a776:	72 2b       	ld.w	r11,r9[0x8]
8000a778:	91 2b       	st.w	r8[0x8],r11
8000a77a:	72 39       	ld.w	r9,r9[0xc]
8000a77c:	91 39       	st.w	r8[0xc],r9
8000a77e:	20 4d       	sub	sp,16
8000a780:	1a 98       	mov	r8,sp
8000a782:	ee c9 00 20 	sub	r9,r7,32
8000a786:	20 08       	sub	r8,0
8000a788:	20 09       	sub	r9,0
8000a78a:	72 0b       	ld.w	r11,r9[0x0]
8000a78c:	91 0b       	st.w	r8[0x0],r11
8000a78e:	72 1b       	ld.w	r11,r9[0x4]
8000a790:	91 1b       	st.w	r8[0x4],r11
8000a792:	72 2b       	ld.w	r11,r9[0x8]
8000a794:	91 2b       	st.w	r8[0x8],r11
8000a796:	72 39       	ld.w	r9,r9[0xc]
8000a798:	91 39       	st.w	r8[0xc],r9
8000a79a:	14 9c       	mov	r12,r10
8000a79c:	ce ee       	rcall	8000a578 <quat_multi>
8000a79e:	2f 8d       	sub	sp,-32
8000a7a0:	ee c8 00 20 	sub	r8,r7,32
8000a7a4:	ee c9 00 30 	sub	r9,r7,48
8000a7a8:	20 08       	sub	r8,0
8000a7aa:	20 09       	sub	r9,0
8000a7ac:	72 0a       	ld.w	r10,r9[0x0]
8000a7ae:	91 0a       	st.w	r8[0x0],r10
8000a7b0:	72 1a       	ld.w	r10,r9[0x4]
8000a7b2:	91 1a       	st.w	r8[0x4],r10
8000a7b4:	72 2a       	ld.w	r10,r9[0x8]
8000a7b6:	91 2a       	st.w	r8[0x8],r10
8000a7b8:	72 39       	ld.w	r9,r9[0xc]
8000a7ba:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8000a7bc:	06 98       	mov	r8,r3
8000a7be:	ee c9 00 20 	sub	r9,r7,32
8000a7c2:	20 08       	sub	r8,0
8000a7c4:	20 09       	sub	r9,0
8000a7c6:	72 0a       	ld.w	r10,r9[0x0]
8000a7c8:	91 0a       	st.w	r8[0x0],r10
8000a7ca:	72 1a       	ld.w	r10,r9[0x4]
8000a7cc:	91 1a       	st.w	r8[0x4],r10
8000a7ce:	72 2a       	ld.w	r10,r9[0x8]
8000a7d0:	91 2a       	st.w	r8[0x8],r10
8000a7d2:	72 39       	ld.w	r9,r9[0xc]
8000a7d4:	91 39       	st.w	r8[0xc],r9
}
8000a7d6:	06 9c       	mov	r12,r3
8000a7d8:	2f 4d       	sub	sp,-48
8000a7da:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000a7de:	00 00       	add	r0,r0
8000a7e0:	80 00       	ld.sh	r0,r0[0x0]
8000a7e2:	a5 76       	lsl	r6,0x5

8000a7e4 <quat_local_to_global>:

UQuat_t static inline quat_local_to_global(const UQuat_t qe, const UQuat_t qvect)
{
8000a7e4:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000a7e8:	1a 97       	mov	r7,sp
8000a7ea:	20 cd       	sub	sp,48
8000a7ec:	4b c6       	lddpc	r6,8000a8dc <quat_local_to_global+0xf8>
8000a7ee:	1e 26       	rsub	r6,pc
8000a7f0:	ee c5 ff ec 	sub	r5,r7,-20
8000a7f4:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000a7f6:	ee ca 00 10 	sub	r10,r7,16
8000a7fa:	20 4d       	sub	sp,16
8000a7fc:	1a 98       	mov	r8,sp
8000a7fe:	0a 99       	mov	r9,r5
8000a800:	20 08       	sub	r8,0
8000a802:	20 09       	sub	r9,0
8000a804:	72 0b       	ld.w	r11,r9[0x0]
8000a806:	91 0b       	st.w	r8[0x0],r11
8000a808:	72 1b       	ld.w	r11,r9[0x4]
8000a80a:	91 1b       	st.w	r8[0x4],r11
8000a80c:	72 2b       	ld.w	r11,r9[0x8]
8000a80e:	91 2b       	st.w	r8[0x8],r11
8000a810:	72 39       	ld.w	r9,r9[0xc]
8000a812:	91 39       	st.w	r8[0xc],r9
8000a814:	14 9c       	mov	r12,r10
8000a816:	c3 1f       	rcall	8000a678 <quat_inv>
8000a818:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qe, qvect);
8000a81a:	ee ca 00 20 	sub	r10,r7,32
8000a81e:	20 4d       	sub	sp,16
8000a820:	1a 98       	mov	r8,sp
8000a822:	ea c9 ff f0 	sub	r9,r5,-16
8000a826:	20 08       	sub	r8,0
8000a828:	20 09       	sub	r9,0
8000a82a:	72 0b       	ld.w	r11,r9[0x0]
8000a82c:	91 0b       	st.w	r8[0x0],r11
8000a82e:	72 1b       	ld.w	r11,r9[0x4]
8000a830:	91 1b       	st.w	r8[0x4],r11
8000a832:	72 2b       	ld.w	r11,r9[0x8]
8000a834:	91 2b       	st.w	r8[0x8],r11
8000a836:	72 39       	ld.w	r9,r9[0xc]
8000a838:	91 39       	st.w	r8[0xc],r9
8000a83a:	20 4d       	sub	sp,16
8000a83c:	1a 98       	mov	r8,sp
8000a83e:	0a 99       	mov	r9,r5
8000a840:	20 08       	sub	r8,0
8000a842:	20 09       	sub	r9,0
8000a844:	72 0b       	ld.w	r11,r9[0x0]
8000a846:	91 0b       	st.w	r8[0x0],r11
8000a848:	72 1b       	ld.w	r11,r9[0x4]
8000a84a:	91 1b       	st.w	r8[0x4],r11
8000a84c:	72 2b       	ld.w	r11,r9[0x8]
8000a84e:	91 2b       	st.w	r8[0x8],r11
8000a850:	72 39       	ld.w	r9,r9[0xc]
8000a852:	91 39       	st.w	r8[0xc],r9
8000a854:	14 9c       	mov	r12,r10
8000a856:	c9 1e       	rcall	8000a578 <quat_multi>
8000a858:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp, qinv);
8000a85a:	ee ca 00 30 	sub	r10,r7,48
8000a85e:	20 4d       	sub	sp,16
8000a860:	1a 98       	mov	r8,sp
8000a862:	ee c9 00 10 	sub	r9,r7,16
8000a866:	20 08       	sub	r8,0
8000a868:	20 09       	sub	r9,0
8000a86a:	72 0b       	ld.w	r11,r9[0x0]
8000a86c:	91 0b       	st.w	r8[0x0],r11
8000a86e:	72 1b       	ld.w	r11,r9[0x4]
8000a870:	91 1b       	st.w	r8[0x4],r11
8000a872:	72 2b       	ld.w	r11,r9[0x8]
8000a874:	91 2b       	st.w	r8[0x8],r11
8000a876:	72 39       	ld.w	r9,r9[0xc]
8000a878:	91 39       	st.w	r8[0xc],r9
8000a87a:	20 4d       	sub	sp,16
8000a87c:	1a 98       	mov	r8,sp
8000a87e:	ee c9 00 20 	sub	r9,r7,32
8000a882:	20 08       	sub	r8,0
8000a884:	20 09       	sub	r9,0
8000a886:	72 0b       	ld.w	r11,r9[0x0]
8000a888:	91 0b       	st.w	r8[0x0],r11
8000a88a:	72 1b       	ld.w	r11,r9[0x4]
8000a88c:	91 1b       	st.w	r8[0x4],r11
8000a88e:	72 2b       	ld.w	r11,r9[0x8]
8000a890:	91 2b       	st.w	r8[0x8],r11
8000a892:	72 39       	ld.w	r9,r9[0xc]
8000a894:	91 39       	st.w	r8[0xc],r9
8000a896:	14 9c       	mov	r12,r10
8000a898:	c7 0e       	rcall	8000a578 <quat_multi>
8000a89a:	2f 8d       	sub	sp,-32
8000a89c:	ee c8 00 20 	sub	r8,r7,32
8000a8a0:	ee c9 00 30 	sub	r9,r7,48
8000a8a4:	20 08       	sub	r8,0
8000a8a6:	20 09       	sub	r9,0
8000a8a8:	72 0a       	ld.w	r10,r9[0x0]
8000a8aa:	91 0a       	st.w	r8[0x0],r10
8000a8ac:	72 1a       	ld.w	r10,r9[0x4]
8000a8ae:	91 1a       	st.w	r8[0x4],r10
8000a8b0:	72 2a       	ld.w	r10,r9[0x8]
8000a8b2:	91 2a       	st.w	r8[0x8],r10
8000a8b4:	72 39       	ld.w	r9,r9[0xc]
8000a8b6:	91 39       	st.w	r8[0xc],r9
	
	return qtmp;
8000a8b8:	06 98       	mov	r8,r3
8000a8ba:	ee c9 00 20 	sub	r9,r7,32
8000a8be:	20 08       	sub	r8,0
8000a8c0:	20 09       	sub	r9,0
8000a8c2:	72 0a       	ld.w	r10,r9[0x0]
8000a8c4:	91 0a       	st.w	r8[0x0],r10
8000a8c6:	72 1a       	ld.w	r10,r9[0x4]
8000a8c8:	91 1a       	st.w	r8[0x4],r10
8000a8ca:	72 2a       	ld.w	r10,r9[0x8]
8000a8cc:	91 2a       	st.w	r8[0x8],r10
8000a8ce:	72 39       	ld.w	r9,r9[0xc]
8000a8d0:	91 39       	st.w	r8[0xc],r9
}
8000a8d2:	06 9c       	mov	r12,r3
8000a8d4:	2f 4d       	sub	sp,-48
8000a8d6:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000a8da:	00 00       	add	r0,r0
8000a8dc:	80 00       	ld.sh	r0,r0[0x0]
8000a8de:	a6 72       	st.h	r3[0xe],r2

8000a8e0 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8000a8e0:	eb cd 40 c0 	pushm	r6-r7,lr
8000a8e4:	1a 97       	mov	r7,sp
8000a8e6:	20 6d       	sub	sp,24
8000a8e8:	49 e6       	lddpc	r6,8000a960 <interpolate+0x80>
8000a8ea:	1e 26       	rsub	r6,pc
8000a8ec:	ef 4c ff f8 	st.w	r7[-8],r12
8000a8f0:	ef 4b ff f4 	st.w	r7[-12],r11
8000a8f4:	ef 4a ff f0 	st.w	r7[-16],r10
8000a8f8:	ef 49 ff ec 	st.w	r7[-20],r9
8000a8fc:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8000a900:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000a904:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a908:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8000a90c:	c0 41       	brne	8000a914 <interpolate+0x34>
	{
		return y1;
8000a90e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a912:	c2 38       	rjmp	8000a958 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8000a914:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000a918:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a91c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000a920:	ee fa ff f8 	ld.w	r10,r7[-8]
8000a924:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a928:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000a92c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000a930:	ee fa ff f0 	ld.w	r10,r7[-16]
8000a934:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000a938:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000a93c:	12 9b       	mov	r11,r9
8000a93e:	10 9c       	mov	r12,r8
8000a940:	f0 16 00 08 	mcall	r6[32]
8000a944:	18 98       	mov	r8,r12
8000a946:	10 99       	mov	r9,r8
8000a948:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a94c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000a950:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8000a954:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000a958:	10 9c       	mov	r12,r8
8000a95a:	2f ad       	sub	sp,-24
8000a95c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000a960:	80 00       	ld.sh	r0,r0[0x0]
8000a962:	a7 6e       	lsl	lr,0x6

8000a964 <init_pos_integration>:
void init_pos_gps(position_estimator_t *pos_est, gps_Data_type *gps);
void init_barometer_offset(position_estimator_t *pos_est, pressure_data *barometer);


void init_pos_integration(position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps)
{
8000a964:	eb cd 40 c0 	pushm	r6-r7,lr
8000a968:	1a 97       	mov	r7,sp
8000a96a:	20 3d       	sub	sp,12
8000a96c:	4a 66       	lddpc	r6,8000aa04 <init_pos_integration+0xa0>
8000a96e:	1e 26       	rsub	r6,pc
8000a970:	ef 4c ff fc 	st.w	r7[-4],r12
8000a974:	ef 4b ff f8 	st.w	r7[-8],r11
8000a978:	ef 4a ff f4 	st.w	r7[-12],r10
	//centralData = get_central_data();
	pos_est->init_gps_position = false;
8000a97c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a980:	30 08       	mov	r8,0
8000a982:	f3 68 00 28 	st.b	r9[40],r8
	pos_est->init_barometer=false;
8000a986:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a98a:	30 08       	mov	r8,0
8000a98c:	f3 68 00 29 	st.b	r9[41],r8
	pos_est->timeLastGpsMsg = 0;
8000a990:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a994:	30 09       	mov	r9,0
8000a996:	91 89       	st.w	r8[0x20],r9
	pos_est->timeLastBarometerMsg=0;
8000a998:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a99c:	30 09       	mov	r9,0
8000a99e:	91 99       	st.w	r8[0x24],r9
	
	pos_est->kp_pos[0] = 2.0;
8000a9a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a9a4:	fc 19 40 00 	movh	r9,0x4000
8000a9a8:	91 39       	st.w	r8[0xc],r9
	pos_est->kp_pos[1] = 2.0;
8000a9aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a9ae:	fc 19 40 00 	movh	r9,0x4000
8000a9b2:	91 49       	st.w	r8[0x10],r9
	pos_est->kp_pos[2] = 1.0;
8000a9b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a9b8:	fc 19 3f 80 	movh	r9,0x3f80
8000a9bc:	91 59       	st.w	r8[0x14],r9
	
	pos_est->kp_vel[0] = 1.0;
8000a9be:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a9c2:	fc 19 3f 80 	movh	r9,0x3f80
8000a9c6:	91 09       	st.w	r8[0x0],r9
	pos_est->kp_vel[1] = 1.0;
8000a9c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a9cc:	fc 19 3f 80 	movh	r9,0x3f80
8000a9d0:	91 19       	st.w	r8[0x4],r9
	pos_est->kp_vel[2] = 0.5;
8000a9d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a9d6:	fc 19 3f 00 	movh	r9,0x3f00
8000a9da:	91 29       	st.w	r8[0x8],r9
	
	pos_est->kp_alt=2.0;
8000a9dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a9e0:	fc 19 40 00 	movh	r9,0x4000
8000a9e4:	91 69       	st.w	r8[0x18],r9
	pos_est->kp_vel_baro=1.0;
8000a9e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a9ea:	fc 19 3f 80 	movh	r9,0x3f80
8000a9ee:	91 79       	st.w	r8[0x1c],r9
	
	init_pos_gps(pos_est, gps);
8000a9f0:	ee fb ff f4 	ld.w	r11,r7[-12]
8000a9f4:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a9f8:	f0 16 00 e3 	mcall	r6[908]
}
8000a9fc:	2f dd       	sub	sp,-12
8000a9fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000aa02:	00 00       	add	r0,r0
8000aa04:	80 00       	ld.sh	r0,r0[0x0]
8000aa06:	a7 f2       	*unknown*
8000aa08:	47 50       	lddsp	r0,sp[0x1d4]
8000aa0a:	53 20       	stdsp	sp[0xc8],r0
8000aa0c:	70 6f       	ld.w	pc,r8[0x18]
8000aa0e:	73 69       	ld.w	r9,r9[0x58]
8000aa10:	74 69       	ld.w	r9,r10[0x18]
8000aa12:	6f 6e       	ld.w	lr,r7[0x58]
8000aa14:	20 69       	sub	r9,6
8000aa16:	6e 69       	ld.w	r9,r7[0x18]
8000aa18:	74 69       	ld.w	r9,r10[0x18]
8000aa1a:	61 6c       	ld.w	r12,r0[0x58]
8000aa1c:	69 7a       	ld.w	r10,r4[0x5c]
8000aa1e:	65 64       	ld.w	r4,r2[0x58]
8000aa20:	21 0a       	sub	r10,16
	...

8000aa24 <init_pos_gps>:

void init_pos_gps(position_estimator_t *pos_est, gps_Data_type *gps)
{
8000aa24:	eb cd 40 c0 	pushm	r6-r7,lr
8000aa28:	1a 97       	mov	r7,sp
8000aa2a:	20 3d       	sub	sp,12
8000aa2c:	4d 16       	lddpc	r6,8000ab70 <init_pos_gps+0x14c>
8000aa2e:	1e 26       	rsub	r6,pc
8000aa30:	ef 4c ff f8 	st.w	r7[-8],r12
8000aa34:	ef 4b ff f4 	st.w	r7[-12],r11
	int i;
	
	if (newValidGpsMsg(&pos_est->timeLastGpsMsg) && (!(pos_est->init_gps_position)))
8000aa38:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aa3c:	2e 08       	sub	r8,-32
8000aa3e:	10 9c       	mov	r12,r8
8000aa40:	f0 16 00 94 	mcall	r6[592]
8000aa44:	18 98       	mov	r8,r12
8000aa46:	58 08       	cp.w	r8,0
8000aa48:	e0 80 00 91 	breq	8000ab6a <init_pos_gps+0x146>
8000aa4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aa50:	f1 38 00 28 	ld.ub	r8,r8[40]
8000aa54:	ec 18 00 01 	eorl	r8,0x1
8000aa58:	5c 58       	castu.b	r8
8000aa5a:	e0 80 00 88 	breq	8000ab6a <init_pos_gps+0x146>
	{
		pos_est->init_gps_position = true;
8000aa5e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000aa62:	30 18       	mov	r8,1
8000aa64:	f3 68 00 28 	st.b	r9[40],r8
		
		pos_est->localPosition.origin.longitude = gps->longitude;
8000aa68:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aa6c:	f0 e8 00 08 	ld.d	r8,r8[8]
8000aa70:	ee fa ff f8 	ld.w	r10,r7[-8]
8000aa74:	f4 e9 00 70 	st.d	r10[112],r8
		pos_est->localPosition.origin.latitude = gps->latitude;
8000aa78:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aa7c:	f0 e8 00 00 	ld.d	r8,r8[0]
8000aa80:	ee fa ff f8 	ld.w	r10,r7[-8]
8000aa84:	f4 e9 00 78 	st.d	r10[120],r8
		pos_est->localPosition.origin.altitude = gps->altitude;
8000aa88:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aa8c:	70 49       	ld.w	r9,r8[0x10]
8000aa8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aa92:	f1 49 00 80 	st.w	r8[128],r9
		pos_est->localPosition.timestamp_ms=gps->timeLastMsg;
8000aa96:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aa9a:	71 19       	ld.w	r9,r8[0x44]
8000aa9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aaa0:	f1 49 00 8c 	st.w	r8[140],r9

		pos_est->lastGpsPos=pos_est->localPosition;
8000aaa4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000aaa8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aaac:	f2 cb ff 70 	sub	r11,r9,-144
8000aab0:	f0 ca ff a0 	sub	r10,r8,-96
8000aab4:	f6 c8 00 00 	sub	r8,r11,0
8000aab8:	f4 c9 00 00 	sub	r9,r10,0
8000aabc:	72 0c       	ld.w	r12,r9[0x0]
8000aabe:	91 0c       	st.w	r8[0x0],r12
8000aac0:	72 1c       	ld.w	r12,r9[0x4]
8000aac2:	91 1c       	st.w	r8[0x4],r12
8000aac4:	72 2c       	ld.w	r12,r9[0x8]
8000aac6:	91 2c       	st.w	r8[0x8],r12
8000aac8:	72 39       	ld.w	r9,r9[0xc]
8000aaca:	91 39       	st.w	r8[0xc],r9
8000aacc:	f6 c8 ff f0 	sub	r8,r11,-16
8000aad0:	f4 c9 ff f0 	sub	r9,r10,-16
8000aad4:	72 0c       	ld.w	r12,r9[0x0]
8000aad6:	91 0c       	st.w	r8[0x0],r12
8000aad8:	72 1c       	ld.w	r12,r9[0x4]
8000aada:	91 1c       	st.w	r8[0x4],r12
8000aadc:	72 2c       	ld.w	r12,r9[0x8]
8000aade:	91 2c       	st.w	r8[0x8],r12
8000aae0:	72 39       	ld.w	r9,r9[0xc]
8000aae2:	91 39       	st.w	r8[0xc],r9
8000aae4:	f6 c8 ff e0 	sub	r8,r11,-32
8000aae8:	f4 c9 ff e0 	sub	r9,r10,-32
8000aaec:	72 0a       	ld.w	r10,r9[0x0]
8000aaee:	91 0a       	st.w	r8[0x0],r10
8000aaf0:	72 1a       	ld.w	r10,r9[0x4]
8000aaf2:	91 1a       	st.w	r8[0x4],r10
8000aaf4:	72 2a       	ld.w	r10,r9[0x8]
8000aaf6:	91 2a       	st.w	r8[0x8],r10
8000aaf8:	72 39       	ld.w	r9,r9[0xc]
8000aafa:	91 39       	st.w	r8[0xc],r9
		
		
		pos_est->last_alt=0;
8000aafc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ab00:	30 09       	mov	r9,0
8000ab02:	f1 49 00 50 	st.w	r8[80],r9
		for(i=0;i<3;i++)
8000ab06:	30 08       	mov	r8,0
8000ab08:	ef 48 ff fc 	st.w	r7[-4],r8
8000ab0c:	c2 68       	rjmp	8000ab58 <init_pos_gps+0x134>
		{
			pos_est->pos_correction[i]=0.0;
8000ab0e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ab12:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ab16:	2e f9       	sub	r9,-17
8000ab18:	30 0a       	mov	r10,0
8000ab1a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->last_vel[i]=0.0;
8000ab1e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ab22:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ab26:	2e b9       	sub	r9,-21
8000ab28:	30 0a       	mov	r10,0
8000ab2a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->localPosition.pos[i] = 0.0;
8000ab2e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ab32:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ab36:	2e 89       	sub	r9,-24
8000ab38:	30 0a       	mov	r10,0
8000ab3a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->vel[i]=0.0;
8000ab3e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ab42:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ab46:	2f 29       	sub	r9,-14
8000ab48:	30 0a       	mov	r10,0
8000ab4a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

		pos_est->lastGpsPos=pos_est->localPosition;
		
		
		pos_est->last_alt=0;
		for(i=0;i<3;i++)
8000ab4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ab52:	2f f8       	sub	r8,-1
8000ab54:	ef 48 ff fc 	st.w	r7[-4],r8
8000ab58:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ab5c:	58 28       	cp.w	r8,2
8000ab5e:	fe 9a ff d8 	brle	8000ab0e <init_pos_gps+0xea>
			pos_est->last_vel[i]=0.0;
			pos_est->localPosition.pos[i] = 0.0;
			pos_est->vel[i]=0.0;
		}
		
		dbg_print("GPS position initialized!\n");
8000ab62:	fe cc 01 5a 	sub	r12,pc,346
8000ab66:	f0 16 00 01 	mcall	r6[4]
	}
}
8000ab6a:	2f dd       	sub	sp,-12
8000ab6c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ab70:	80 00       	ld.sh	r0,r0[0x0]
8000ab72:	a8 b2       	st.b	r4[0x3],r2
8000ab74:	4f 66       	lddpc	r6,8000ad4c <position_reset_home_altitude+0xac>
8000ab76:	66 73       	ld.w	r3,r3[0x1c]
8000ab78:	65 74       	ld.w	r4,r2[0x5c]
8000ab7a:	20 6f       	sub	pc,6
8000ab7c:	66 20       	ld.w	r0,r3[0x8]
8000ab7e:	74 68       	ld.w	r8,r10[0x18]
8000ab80:	65 20       	ld.w	r0,r2[0x48]
8000ab82:	62 61       	ld.w	r1,r1[0x18]
8000ab84:	72 6f       	ld.w	pc,r9[0x18]
8000ab86:	6d 65       	ld.w	r5,r6[0x58]
8000ab88:	74 65       	ld.w	r5,r10[0x18]
8000ab8a:	72 20       	ld.w	r0,r9[0x8]
8000ab8c:	73 65       	ld.w	r5,r9[0x58]
8000ab8e:	74 20       	ld.w	r0,r10[0x8]
8000ab90:	74 6f       	ld.w	pc,r10[0x18]
8000ab92:	20 74       	sub	r4,7
8000ab94:	68 65       	ld.w	r5,r4[0x18]
8000ab96:	20 47       	sub	r7,4
8000ab98:	50 53       	stdsp	sp[0x14],r3
8000ab9a:	20 61       	sub	r1,6
8000ab9c:	6c 74       	ld.w	r4,r6[0x1c]
8000ab9e:	69 74       	ld.w	r4,r4[0x5c]
8000aba0:	75 64       	ld.w	r4,r10[0x58]
8000aba2:	65 2c       	ld.w	r12,r2[0x48]
8000aba4:	20 6f       	sub	pc,6
8000aba6:	66 66       	ld.w	r6,r3[0x18]
8000aba8:	73 65       	ld.w	r5,r9[0x58]
8000abaa:	74 20       	ld.w	r0,r10[0x8]
8000abac:	76 61       	ld.w	r1,r11[0x18]
8000abae:	6c 75       	ld.w	r5,r6[0x1c]
8000abb0:	65 20       	ld.w	r0,r2[0x48]
8000abb2:	6f 66       	ld.w	r6,r7[0x58]
8000abb4:	3a 00       	mov	r0,-96
8000abb6:	00 00       	add	r0,r0
8000abb8:	20 3d       	sub	sp,12
8000abba:	20 2d       	sub	sp,8
8000abbc:	00 00       	add	r0,r0
8000abbe:	00 00       	add	r0,r0
8000abc0:	20 2d       	sub	sp,8
8000abc2:	20 00       	sub	r0,0
8000abc4:	20 2b       	sub	r11,2
8000abc6:	20 00       	sub	r0,0
8000abc8:	0a 00       	add	r0,r5

8000abca <init_barometer_offset>:

void init_barometer_offset(position_estimator_t *pos_est, pressure_data *barometer)
{
8000abca:	eb cd 40 c0 	pushm	r6-r7,lr
8000abce:	1a 97       	mov	r7,sp
8000abd0:	20 3d       	sub	sp,12
8000abd2:	4b 36       	lddpc	r6,8000ac9c <init_barometer_offset+0xd2>
8000abd4:	1e 26       	rsub	r6,pc
8000abd6:	ef 4c ff f8 	st.w	r7[-8],r12
8000abda:	ef 4b ff f4 	st.w	r7[-12],r11
	bool boolNewBaro = newValidBarometer(&pos_est->timeLastBarometerMsg);
8000abde:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000abe2:	2d c8       	sub	r8,-36
8000abe4:	10 9c       	mov	r12,r8
8000abe6:	f0 16 00 e4 	mcall	r6[912]
8000abea:	18 98       	mov	r8,r12
8000abec:	ef 68 ff ff 	st.b	r7[-1],r8

		
	//if ((centralData->init_gps_position)&&(boolNewBaro))
	if ((boolNewBaro))
8000abf0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000abf4:	30 08       	mov	r8,0
8000abf6:	f0 09 18 00 	cp.b	r9,r8
8000abfa:	c4 e0       	breq	8000ac96 <init_barometer_offset+0xcc>
	{
		
		barometer->altitude_offset = -(barometer->altitude - pos_est->localPosition.origin.altitude);
8000abfc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ac00:	70 79       	ld.w	r9,r8[0x1c]
8000ac02:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ac06:	f0 f8 00 80 	ld.w	r8,r8[128]
8000ac0a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000ac0e:	10 99       	mov	r9,r8
8000ac10:	ee 19 80 00 	eorh	r9,0x8000
8000ac14:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ac18:	91 89       	st.w	r8[0x20],r9
		//barometer->altitude_offset = -barometer->altitude - pos_est->localPosition.pos[2] + pos_est->localPosition.origin.altitude;
		pos_est->init_barometer = true;
8000ac1a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000ac1e:	30 18       	mov	r8,1
8000ac20:	f3 68 00 29 	st.b	r9[41],r8
		
		dbg_print("Offset of the barometer set to the GPS altitude, offset value of:");
8000ac24:	fe cc 00 b0 	sub	r12,pc,176
8000ac28:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude_offset,10);
8000ac2c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ac30:	70 88       	ld.w	r8,r8[0x20]
8000ac32:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ac36:	30 ab       	mov	r11,10
8000ac38:	10 9c       	mov	r12,r8
8000ac3a:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" = -");
8000ac3e:	fe cc 00 86 	sub	r12,pc,134
8000ac42:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude,10);
8000ac46:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ac4a:	70 78       	ld.w	r8,r8[0x1c]
8000ac4c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ac50:	30 ab       	mov	r11,10
8000ac52:	10 9c       	mov	r12,r8
8000ac54:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" - ");
8000ac58:	fe cc 00 98 	sub	r12,pc,152
8000ac5c:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.pos[2],10);
8000ac60:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ac64:	71 a8       	ld.w	r8,r8[0x68]
8000ac66:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ac6a:	30 ab       	mov	r11,10
8000ac6c:	10 9c       	mov	r12,r8
8000ac6e:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" + ");
8000ac72:	fe cc 00 ae 	sub	r12,pc,174
8000ac76:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.origin.altitude,10);
8000ac7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ac7e:	f0 f8 00 80 	ld.w	r8,r8[128]
8000ac82:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ac86:	30 ab       	mov	r11,10
8000ac88:	10 9c       	mov	r12,r8
8000ac8a:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8000ac8e:	fe cc 00 c6 	sub	r12,pc,198
8000ac92:	f0 16 00 01 	mcall	r6[4]
	}
}
8000ac96:	2f dd       	sub	sp,-12
8000ac98:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ac9c:	80 00       	ld.sh	r0,r0[0x0]
8000ac9e:	aa 58       	st.h	r5[0xa],r8

8000aca0 <position_reset_home_altitude>:

void position_reset_home_altitude(position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps) {
8000aca0:	eb cd 40 c0 	pushm	r6-r7,lr
8000aca4:	1a 97       	mov	r7,sp
8000aca6:	20 4d       	sub	sp,16
8000aca8:	4f 06       	lddpc	r6,8000ae68 <position_reset_home_altitude+0x1c8>
8000acaa:	1e 26       	rsub	r6,pc
8000acac:	ef 4c ff f8 	st.w	r7[-8],r12
8000acb0:	ef 4b ff f4 	st.w	r7[-12],r11
8000acb4:	ef 4a ff f0 	st.w	r7[-16],r10
		int i;
		// reset origin to position where quad is armed if we have GPS
		if (pos_est->init_gps_position) {
8000acb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000acbc:	f1 38 00 28 	ld.ub	r8,r8[40]
8000acc0:	58 08       	cp.w	r8,0
8000acc2:	c4 b0       	breq	8000ad58 <position_reset_home_altitude+0xb8>
			pos_est->localPosition.origin.longitude = gps->longitude;
8000acc4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000acc8:	f0 e8 00 08 	ld.d	r8,r8[8]
8000accc:	ee fa ff f8 	ld.w	r10,r7[-8]
8000acd0:	f4 e9 00 70 	st.d	r10[112],r8
			pos_est->localPosition.origin.latitude = gps->latitude;
8000acd4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000acd8:	f0 e8 00 00 	ld.d	r8,r8[0]
8000acdc:	ee fa ff f8 	ld.w	r10,r7[-8]
8000ace0:	f4 e9 00 78 	st.d	r10[120],r8
			pos_est->localPosition.origin.altitude = gps->altitude;
8000ace4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ace8:	70 49       	ld.w	r9,r8[0x10]
8000acea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000acee:	f1 49 00 80 	st.w	r8[128],r9
			pos_est->localPosition.timestamp_ms=gps->timeLastMsg;
8000acf2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000acf6:	71 19       	ld.w	r9,r8[0x44]
8000acf8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000acfc:	f1 49 00 8c 	st.w	r8[140],r9

			pos_est->lastGpsPos=pos_est->localPosition;
8000ad00:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000ad04:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ad08:	f2 cb ff 70 	sub	r11,r9,-144
8000ad0c:	f0 ca ff a0 	sub	r10,r8,-96
8000ad10:	f6 c8 00 00 	sub	r8,r11,0
8000ad14:	f4 c9 00 00 	sub	r9,r10,0
8000ad18:	72 0c       	ld.w	r12,r9[0x0]
8000ad1a:	91 0c       	st.w	r8[0x0],r12
8000ad1c:	72 1c       	ld.w	r12,r9[0x4]
8000ad1e:	91 1c       	st.w	r8[0x4],r12
8000ad20:	72 2c       	ld.w	r12,r9[0x8]
8000ad22:	91 2c       	st.w	r8[0x8],r12
8000ad24:	72 39       	ld.w	r9,r9[0xc]
8000ad26:	91 39       	st.w	r8[0xc],r9
8000ad28:	f6 c8 ff f0 	sub	r8,r11,-16
8000ad2c:	f4 c9 ff f0 	sub	r9,r10,-16
8000ad30:	72 0c       	ld.w	r12,r9[0x0]
8000ad32:	91 0c       	st.w	r8[0x0],r12
8000ad34:	72 1c       	ld.w	r12,r9[0x4]
8000ad36:	91 1c       	st.w	r8[0x4],r12
8000ad38:	72 2c       	ld.w	r12,r9[0x8]
8000ad3a:	91 2c       	st.w	r8[0x8],r12
8000ad3c:	72 39       	ld.w	r9,r9[0xc]
8000ad3e:	91 39       	st.w	r8[0xc],r9
8000ad40:	f6 c8 ff e0 	sub	r8,r11,-32
8000ad44:	f4 c9 ff e0 	sub	r9,r10,-32
8000ad48:	72 0a       	ld.w	r10,r9[0x0]
8000ad4a:	91 0a       	st.w	r8[0x0],r10
8000ad4c:	72 1a       	ld.w	r10,r9[0x4]
8000ad4e:	91 1a       	st.w	r8[0x4],r10
8000ad50:	72 2a       	ld.w	r10,r9[0x8]
8000ad52:	91 2a       	st.w	r8[0x8],r10
8000ad54:	72 39       	ld.w	r9,r9[0xc]
8000ad56:	91 39       	st.w	r8[0xc],r9
		}
		// reset barometer offset
		barometer->altitude_offset = -(barometer->altitude - barometer->altitude_offset - pos_est->localPosition.origin.altitude);
8000ad58:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ad5c:	70 79       	ld.w	r9,r8[0x1c]
8000ad5e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ad62:	70 88       	ld.w	r8,r8[0x20]
8000ad64:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000ad68:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ad6c:	f0 f8 00 80 	ld.w	r8,r8[128]
8000ad70:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000ad74:	10 99       	mov	r9,r8
8000ad76:	ee 19 80 00 	eorh	r9,0x8000
8000ad7a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ad7e:	91 89       	st.w	r8[0x20],r9
		//barometer->altitude_offset = -barometer->altitude - pos_est->localPosition.pos[2] + pos_est->localPosition.origin.altitude;
		pos_est->init_barometer = true;
8000ad80:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000ad84:	30 18       	mov	r8,1
8000ad86:	f3 68 00 29 	st.b	r9[41],r8
		
		dbg_print("Offset of the barometer set to the GPS altitude, offset value of:");
8000ad8a:	fe cc 02 16 	sub	r12,pc,534
8000ad8e:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude_offset,10);
8000ad92:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ad96:	70 88       	ld.w	r8,r8[0x20]
8000ad98:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000ad9c:	30 ab       	mov	r11,10
8000ad9e:	10 9c       	mov	r12,r8
8000ada0:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" = -");
8000ada4:	fe cc 01 ec 	sub	r12,pc,492
8000ada8:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude,10);
8000adac:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000adb0:	70 78       	ld.w	r8,r8[0x1c]
8000adb2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000adb6:	30 ab       	mov	r11,10
8000adb8:	10 9c       	mov	r12,r8
8000adba:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" - ");
8000adbe:	fe cc 01 fe 	sub	r12,pc,510
8000adc2:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.pos[2],10);
8000adc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000adca:	71 a8       	ld.w	r8,r8[0x68]
8000adcc:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000add0:	30 ab       	mov	r11,10
8000add2:	10 9c       	mov	r12,r8
8000add4:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" + ");
8000add8:	fe cc 02 14 	sub	r12,pc,532
8000addc:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.origin.altitude,10);
8000ade0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ade4:	f0 f8 00 80 	ld.w	r8,r8[128]
8000ade8:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000adec:	30 ab       	mov	r11,10
8000adee:	10 9c       	mov	r12,r8
8000adf0:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8000adf4:	fe cc 02 2c 	sub	r12,pc,556
8000adf8:	f0 16 00 01 	mcall	r6[4]

		// reset position estimator
		pos_est->last_alt=0;
8000adfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ae00:	30 09       	mov	r9,0
8000ae02:	f1 49 00 50 	st.w	r8[80],r9
		for(i=0;i<3;i++)
8000ae06:	30 08       	mov	r8,0
8000ae08:	ef 48 ff fc 	st.w	r7[-4],r8
8000ae0c:	c2 68       	rjmp	8000ae58 <position_reset_home_altitude+0x1b8>
		{
			pos_est->pos_correction[i]=0.0;
8000ae0e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ae12:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ae16:	2e f9       	sub	r9,-17
8000ae18:	30 0a       	mov	r10,0
8000ae1a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->last_vel[i]=0.0;
8000ae1e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ae22:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ae26:	2e b9       	sub	r9,-21
8000ae28:	30 0a       	mov	r10,0
8000ae2a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->localPosition.pos[i] = 0.0;
8000ae2e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ae32:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ae36:	2e 89       	sub	r9,-24
8000ae38:	30 0a       	mov	r10,0
8000ae3a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->vel[i]=0.0;
8000ae3e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ae42:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ae46:	2f 29       	sub	r9,-14
8000ae48:	30 0a       	mov	r10,0
8000ae4a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		dbg_print_num(pos_est->localPosition.origin.altitude,10);
		dbg_print("\n");

		// reset position estimator
		pos_est->last_alt=0;
		for(i=0;i<3;i++)
8000ae4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ae52:	2f f8       	sub	r8,-1
8000ae54:	ef 48 ff fc 	st.w	r7[-4],r8
8000ae58:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ae5c:	58 28       	cp.w	r8,2
8000ae5e:	fe 9a ff d8 	brle	8000ae0e <position_reset_home_altitude+0x16e>
			pos_est->localPosition.pos[i] = 0.0;
			pos_est->vel[i]=0.0;
		}

	
}
8000ae62:	2f cd       	sub	sp,-16
8000ae64:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ae68:	80 00       	ld.sh	r0,r0[0x0]
8000ae6a:	ab 2e       	st.d	r5++,lr

8000ae6c <position_integration>:

void position_integration(position_estimator_t *pos_est, Quat_Attitude_t *attitude, float dt)
{
8000ae6c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000ae70:	1a 97       	mov	r7,sp
8000ae72:	21 fd       	sub	sp,124
8000ae74:	fe f6 03 64 	ld.w	r6,pc[868]
8000ae78:	1e 26       	rsub	r6,pc
8000ae7a:	ef 4c ff 9c 	st.w	r7[-100],r12
8000ae7e:	ef 4b ff 98 	st.w	r7[-104],r11
8000ae82:	ef 4a ff 94 	st.w	r7[-108],r10
	int i;
	
	UQuat_t qvel_bf,qvel, qtmp1, qtmp2, qtmp3;
	float tmp[3];
	qvel.s=0;
8000ae86:	30 08       	mov	r8,0
8000ae88:	ef 48 ff dc 	st.w	r7[-36],r8
	for (i=0; i<3; i++) qvel.v[i]=pos_est->vel[i];
8000ae8c:	30 08       	mov	r8,0
8000ae8e:	ef 48 ff fc 	st.w	r7[-4],r8
8000ae92:	c1 58       	rjmp	8000aebc <position_integration+0x50>
8000ae94:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ae98:	ee fa ff fc 	ld.w	r10,r7[-4]
8000ae9c:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000aea0:	2f 2a       	sub	r10,-14
8000aea2:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8000aea6:	2f f8       	sub	r8,-1
8000aea8:	a3 68       	lsl	r8,0x2
8000aeaa:	ee 08 00 08 	add	r8,r7,r8
8000aeae:	f1 49 ff dc 	st.w	r8[-36],r9
8000aeb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aeb6:	2f f8       	sub	r8,-1
8000aeb8:	ef 48 ff fc 	st.w	r7[-4],r8
8000aebc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000aec0:	58 28       	cp.w	r8,2
8000aec2:	fe 9a ff e9 	brle	8000ae94 <position_integration+0x28>
	qvel_bf=quat_global_to_local(attitude->qe, qvel);
8000aec6:	ee ca 00 7c 	sub	r10,r7,124
8000aeca:	20 4d       	sub	sp,16
8000aecc:	1a 98       	mov	r8,sp
8000aece:	ee c9 00 24 	sub	r9,r7,36
8000aed2:	20 08       	sub	r8,0
8000aed4:	20 09       	sub	r9,0
8000aed6:	72 0b       	ld.w	r11,r9[0x0]
8000aed8:	91 0b       	st.w	r8[0x0],r11
8000aeda:	72 1b       	ld.w	r11,r9[0x4]
8000aedc:	91 1b       	st.w	r8[0x4],r11
8000aede:	72 2b       	ld.w	r11,r9[0x8]
8000aee0:	91 2b       	st.w	r8[0x8],r11
8000aee2:	72 39       	ld.w	r9,r9[0xc]
8000aee4:	91 39       	st.w	r8[0xc],r9
8000aee6:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000aeea:	20 4d       	sub	sp,16
8000aeec:	1a 98       	mov	r8,sp
8000aeee:	20 08       	sub	r8,0
8000aef0:	20 09       	sub	r9,0
8000aef2:	72 0b       	ld.w	r11,r9[0x0]
8000aef4:	91 0b       	st.w	r8[0x0],r11
8000aef6:	72 1b       	ld.w	r11,r9[0x4]
8000aef8:	91 1b       	st.w	r8[0x4],r11
8000aefa:	72 2b       	ld.w	r11,r9[0x8]
8000aefc:	91 2b       	st.w	r8[0x8],r11
8000aefe:	72 39       	ld.w	r9,r9[0xc]
8000af00:	91 39       	st.w	r8[0xc],r9
8000af02:	14 9c       	mov	r12,r10
8000af04:	fe b0 fb f2 	rcall	8000a6e8 <quat_global_to_local>
8000af08:	2f 8d       	sub	sp,-32
8000af0a:	ee c8 00 14 	sub	r8,r7,20
8000af0e:	ee c9 00 7c 	sub	r9,r7,124
8000af12:	20 08       	sub	r8,0
8000af14:	20 09       	sub	r9,0
8000af16:	72 0a       	ld.w	r10,r9[0x0]
8000af18:	91 0a       	st.w	r8[0x0],r10
8000af1a:	72 1a       	ld.w	r10,r9[0x4]
8000af1c:	91 1a       	st.w	r8[0x4],r10
8000af1e:	72 2a       	ld.w	r10,r9[0x8]
8000af20:	91 2a       	st.w	r8[0x8],r10
8000af22:	72 39       	ld.w	r9,r9[0xc]
8000af24:	91 39       	st.w	r8[0xc],r9
	for (i=0; i<3; i++) {
8000af26:	30 08       	mov	r8,0
8000af28:	ef 48 ff fc 	st.w	r7[-4],r8
8000af2c:	c8 c8       	rjmp	8000b044 <position_integration+0x1d8>
		pos_est->vel_bf[i]=qvel_bf.v[i];
8000af2e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000af32:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000af36:	2f f8       	sub	r8,-1
8000af38:	a3 68       	lsl	r8,0x2
8000af3a:	ee 08 00 08 	add	r8,r7,r8
8000af3e:	f0 fa ff ec 	ld.w	r10,r8[-20]
8000af42:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000af46:	2f 59       	sub	r9,-11
8000af48:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		// clean acceleration estimate without gravity:
		attitude->acc_bf[i]=GRAVITY * (attitude->a[i] - attitude->up_vec.v[i]) ;
8000af4c:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000af50:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000af54:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000af58:	2d f9       	sub	r9,-33
8000af5a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000af5e:	ee fa ff fc 	ld.w	r10,r7[-4]
8000af62:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000af66:	2f ba       	sub	r10,-5
8000af68:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000af6c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000af70:	10 9c       	mov	r12,r8
8000af72:	f0 16 00 02 	mcall	r6[8]
8000af76:	e0 68 85 1f 	mov	r8,34079
8000af7a:	ea 18 51 eb 	orh	r8,0x51eb
8000af7e:	e0 69 9e b8 	mov	r9,40632
8000af82:	ea 19 40 23 	orh	r9,0x4023
8000af86:	f0 16 00 03 	mcall	r6[12]
8000af8a:	14 98       	mov	r8,r10
8000af8c:	16 99       	mov	r9,r11
8000af8e:	10 9a       	mov	r10,r8
8000af90:	12 9b       	mov	r11,r9
8000af92:	f0 16 00 09 	mcall	r6[36]
8000af96:	18 9a       	mov	r10,r12
8000af98:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000af9c:	ea c9 ff d0 	sub	r9,r5,-48
8000afa0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		pos_est->vel_bf[i]=pos_est->vel_bf[i]*(1.0-(VEL_DECAY*dt)) + attitude->acc_bf[i]  * dt;
8000afa4:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000afa8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000afac:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000afb0:	2f 59       	sub	r9,-11
8000afb2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000afb6:	10 9c       	mov	r12,r8
8000afb8:	f0 16 00 02 	mcall	r6[8]
8000afbc:	14 92       	mov	r2,r10
8000afbe:	16 93       	mov	r3,r11
8000afc0:	ee fc ff 94 	ld.w	r12,r7[-108]
8000afc4:	f0 16 00 02 	mcall	r6[8]
8000afc8:	30 08       	mov	r8,0
8000afca:	fc 19 80 00 	movh	r9,0x8000
8000afce:	f0 16 00 03 	mcall	r6[12]
8000afd2:	14 98       	mov	r8,r10
8000afd4:	16 99       	mov	r9,r11
8000afd6:	10 9a       	mov	r10,r8
8000afd8:	12 9b       	mov	r11,r9
8000afda:	30 08       	mov	r8,0
8000afdc:	fc 19 3f f0 	movh	r9,0x3ff0
8000afe0:	f0 16 00 05 	mcall	r6[20]
8000afe4:	14 98       	mov	r8,r10
8000afe6:	16 99       	mov	r9,r11
8000afe8:	04 9a       	mov	r10,r2
8000afea:	06 9b       	mov	r11,r3
8000afec:	f0 16 00 03 	mcall	r6[12]
8000aff0:	14 98       	mov	r8,r10
8000aff2:	16 99       	mov	r9,r11
8000aff4:	10 92       	mov	r2,r8
8000aff6:	12 93       	mov	r3,r9
8000aff8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000affc:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000b000:	2d 09       	sub	r9,-48
8000b002:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000b006:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000b00a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000b00e:	10 9c       	mov	r12,r8
8000b010:	f0 16 00 02 	mcall	r6[8]
8000b014:	14 98       	mov	r8,r10
8000b016:	16 99       	mov	r9,r11
8000b018:	04 9a       	mov	r10,r2
8000b01a:	06 9b       	mov	r11,r3
8000b01c:	f0 16 00 05 	mcall	r6[20]
8000b020:	14 98       	mov	r8,r10
8000b022:	16 99       	mov	r9,r11
8000b024:	10 9a       	mov	r10,r8
8000b026:	12 9b       	mov	r11,r9
8000b028:	f0 16 00 09 	mcall	r6[36]
8000b02c:	18 9a       	mov	r10,r12
8000b02e:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b032:	ea c9 ff f5 	sub	r9,r5,-11
8000b036:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	UQuat_t qvel_bf,qvel, qtmp1, qtmp2, qtmp3;
	float tmp[3];
	qvel.s=0;
	for (i=0; i<3; i++) qvel.v[i]=pos_est->vel[i];
	qvel_bf=quat_global_to_local(attitude->qe, qvel);
	for (i=0; i<3; i++) {
8000b03a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b03e:	2f f8       	sub	r8,-1
8000b040:	ef 48 ff fc 	st.w	r7[-4],r8
8000b044:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b048:	58 28       	cp.w	r8,2
8000b04a:	fe 9a ff 72 	brle	8000af2e <position_integration+0xc2>
		pos_est->vel_bf[i]=pos_est->vel_bf[i]*(1.0-(VEL_DECAY*dt)) + attitude->acc_bf[i]  * dt;
	}
	
	// calculate velocity in global frame
	// vel = qe *vel_bf * qe-1
	qvel_bf.s= 0.0; qvel_bf.v[0]=pos_est->vel_bf[0]; qvel_bf.v[1]=pos_est->vel_bf[1]; qvel_bf.v[2]=pos_est->vel_bf[2];
8000b04e:	30 08       	mov	r8,0
8000b050:	ef 48 ff ec 	st.w	r7[-20],r8
8000b054:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b058:	70 b8       	ld.w	r8,r8[0x2c]
8000b05a:	ef 48 ff f0 	st.w	r7[-16],r8
8000b05e:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b062:	70 c8       	ld.w	r8,r8[0x30]
8000b064:	ef 48 ff f4 	st.w	r7[-12],r8
8000b068:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b06c:	70 d8       	ld.w	r8,r8[0x34]
8000b06e:	ef 48 ff f8 	st.w	r7[-8],r8
	qvel = quat_local_to_global(attitude->qe, qvel_bf);
8000b072:	ee ca 00 7c 	sub	r10,r7,124
8000b076:	20 4d       	sub	sp,16
8000b078:	1a 98       	mov	r8,sp
8000b07a:	ee c9 00 14 	sub	r9,r7,20
8000b07e:	20 08       	sub	r8,0
8000b080:	20 09       	sub	r9,0
8000b082:	72 0b       	ld.w	r11,r9[0x0]
8000b084:	91 0b       	st.w	r8[0x0],r11
8000b086:	72 1b       	ld.w	r11,r9[0x4]
8000b088:	91 1b       	st.w	r8[0x4],r11
8000b08a:	72 2b       	ld.w	r11,r9[0x8]
8000b08c:	91 2b       	st.w	r8[0x8],r11
8000b08e:	72 39       	ld.w	r9,r9[0xc]
8000b090:	91 39       	st.w	r8[0xc],r9
8000b092:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000b096:	20 4d       	sub	sp,16
8000b098:	1a 98       	mov	r8,sp
8000b09a:	20 08       	sub	r8,0
8000b09c:	20 09       	sub	r9,0
8000b09e:	72 0b       	ld.w	r11,r9[0x0]
8000b0a0:	91 0b       	st.w	r8[0x0],r11
8000b0a2:	72 1b       	ld.w	r11,r9[0x4]
8000b0a4:	91 1b       	st.w	r8[0x4],r11
8000b0a6:	72 2b       	ld.w	r11,r9[0x8]
8000b0a8:	91 2b       	st.w	r8[0x8],r11
8000b0aa:	72 39       	ld.w	r9,r9[0xc]
8000b0ac:	91 39       	st.w	r8[0xc],r9
8000b0ae:	14 9c       	mov	r12,r10
8000b0b0:	fe b0 fb 9a 	rcall	8000a7e4 <quat_local_to_global>
8000b0b4:	2f 8d       	sub	sp,-32
8000b0b6:	ee c8 00 24 	sub	r8,r7,36
8000b0ba:	ee c9 00 7c 	sub	r9,r7,124
8000b0be:	20 08       	sub	r8,0
8000b0c0:	20 09       	sub	r9,0
8000b0c2:	72 0a       	ld.w	r10,r9[0x0]
8000b0c4:	91 0a       	st.w	r8[0x0],r10
8000b0c6:	72 1a       	ld.w	r10,r9[0x4]
8000b0c8:	91 1a       	st.w	r8[0x4],r10
8000b0ca:	72 2a       	ld.w	r10,r9[0x8]
8000b0cc:	91 2a       	st.w	r8[0x8],r10
8000b0ce:	72 39       	ld.w	r9,r9[0xc]
8000b0d0:	91 39       	st.w	r8[0xc],r9
	pos_est->vel[0]=qvel.v[0]; pos_est->vel[1]=qvel.v[1]; pos_est->vel[2]=qvel.v[2];
8000b0d2:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000b0d6:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b0da:	91 e9       	st.w	r8[0x38],r9
8000b0dc:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000b0e0:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b0e4:	91 f9       	st.w	r8[0x3c],r9
8000b0e6:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000b0ea:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b0ee:	f1 49 00 40 	st.w	r8[64],r9
	//QMUL(attitude->qe, qtmp1, qtmp2);
	//QI(attitude->qe, qtmp1);
	//QMUL(qtmp2, qtmp1, qtmp3);
	//attitude->vel[0]=qtmp3.v[0]; attitude->vel[1]=qtmp3.v[1]; attitude->vel[2]=qtmp3.v[2];
	
	for (i=0; i<3; i++) {
8000b0f2:	30 08       	mov	r8,0
8000b0f4:	ef 48 ff fc 	st.w	r7[-4],r8
8000b0f8:	c6 78       	rjmp	8000b1c6 <position_integration+0x35a>
		// clean position estimate without gravity:
		//prev_pos[i]=attitude->localPosition.pos[i];
		pos_est->localPosition.pos[i] =pos_est->localPosition.pos[i]*(1.0-(POS_DECAY*dt)) + pos_est->vel[i] *dt;
8000b0fa:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000b0fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b102:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b106:	2e 89       	sub	r9,-24
8000b108:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000b10c:	10 9c       	mov	r12,r8
8000b10e:	f0 16 00 02 	mcall	r6[8]
8000b112:	14 92       	mov	r2,r10
8000b114:	16 93       	mov	r3,r11
8000b116:	ee fc ff 94 	ld.w	r12,r7[-108]
8000b11a:	f0 16 00 02 	mcall	r6[8]
8000b11e:	30 08       	mov	r8,0
8000b120:	fc 19 80 00 	movh	r9,0x8000
8000b124:	f0 16 00 03 	mcall	r6[12]
8000b128:	14 98       	mov	r8,r10
8000b12a:	16 99       	mov	r9,r11
8000b12c:	10 9a       	mov	r10,r8
8000b12e:	12 9b       	mov	r11,r9
8000b130:	30 08       	mov	r8,0
8000b132:	fc 19 3f f0 	movh	r9,0x3ff0
8000b136:	f0 16 00 05 	mcall	r6[20]
8000b13a:	14 98       	mov	r8,r10
8000b13c:	16 99       	mov	r9,r11
8000b13e:	04 9a       	mov	r10,r2
8000b140:	06 9b       	mov	r11,r3
8000b142:	f0 16 00 03 	mcall	r6[12]
8000b146:	14 98       	mov	r8,r10
8000b148:	16 99       	mov	r9,r11
8000b14a:	10 92       	mov	r2,r8
8000b14c:	12 93       	mov	r3,r9
8000b14e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b152:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b156:	2f 29       	sub	r9,-14
8000b158:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000b15c:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000b160:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000b164:	10 9c       	mov	r12,r8
8000b166:	f0 16 00 02 	mcall	r6[8]
8000b16a:	14 98       	mov	r8,r10
8000b16c:	16 99       	mov	r9,r11
8000b16e:	04 9a       	mov	r10,r2
8000b170:	06 9b       	mov	r11,r3
8000b172:	f0 16 00 05 	mcall	r6[20]
8000b176:	14 98       	mov	r8,r10
8000b178:	16 99       	mov	r9,r11
8000b17a:	10 9a       	mov	r10,r8
8000b17c:	12 9b       	mov	r11,r9
8000b17e:	f0 16 00 09 	mcall	r6[36]
8000b182:	18 9a       	mov	r10,r12
8000b184:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b188:	ea c9 ff e8 	sub	r9,r5,-24
8000b18c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		pos_est->localPosition.heading=get_yaw(attitude->qe);
8000b190:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000b194:	20 4d       	sub	sp,16
8000b196:	1a 98       	mov	r8,sp
8000b198:	20 08       	sub	r8,0
8000b19a:	20 09       	sub	r9,0
8000b19c:	72 0a       	ld.w	r10,r9[0x0]
8000b19e:	91 0a       	st.w	r8[0x0],r10
8000b1a0:	72 1a       	ld.w	r10,r9[0x4]
8000b1a2:	91 1a       	st.w	r8[0x4],r10
8000b1a4:	72 2a       	ld.w	r10,r9[0x8]
8000b1a6:	91 2a       	st.w	r8[0x8],r10
8000b1a8:	72 39       	ld.w	r9,r9[0xc]
8000b1aa:	91 39       	st.w	r8[0xc],r9
8000b1ac:	f0 16 01 12 	mcall	r6[1096]
8000b1b0:	2f cd       	sub	sp,-16
8000b1b2:	18 99       	mov	r9,r12
8000b1b4:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b1b8:	f1 49 00 6c 	st.w	r8[108],r9
	//QMUL(attitude->qe, qtmp1, qtmp2);
	//QI(attitude->qe, qtmp1);
	//QMUL(qtmp2, qtmp1, qtmp3);
	//attitude->vel[0]=qtmp3.v[0]; attitude->vel[1]=qtmp3.v[1]; attitude->vel[2]=qtmp3.v[2];
	
	for (i=0; i<3; i++) {
8000b1bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b1c0:	2f f8       	sub	r8,-1
8000b1c2:	ef 48 ff fc 	st.w	r7[-4],r8
8000b1c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b1ca:	58 28       	cp.w	r8,2
8000b1cc:	fe 9a ff 97 	brle	8000b0fa <position_integration+0x28e>
		//prev_pos[i]=attitude->localPosition.pos[i];
		pos_est->localPosition.pos[i] =pos_est->localPosition.pos[i]*(1.0-(POS_DECAY*dt)) + pos_est->vel[i] *dt;
		pos_est->localPosition.heading=get_yaw(attitude->qe);
	}

}
8000b1d0:	2e 1d       	sub	sp,-124
8000b1d2:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000b1d6:	00 00       	add	r0,r0
8000b1d8:	80 00       	ld.sh	r0,r0[0x0]
8000b1da:	ac fc       	st.b	r6[0x7],r12
8000b1dc:	47 50       	lddsp	r0,sp[0x1d4]
8000b1de:	53 20       	stdsp	sp[0xc8],r0
8000b1e0:	64 74       	ld.w	r4,r2[0x1c]
8000b1e2:	20 69       	sub	r9,6
8000b1e4:	73 20       	ld.w	r0,r9[0x48]
8000b1e6:	74 6f       	ld.w	pc,r10[0x18]
8000b1e8:	6f 20       	ld.w	r0,r7[0x48]
8000b1ea:	73 6d       	ld.w	sp,r9[0x58]
8000b1ec:	61 6c       	ld.w	r12,r0[0x58]
8000b1ee:	6c 21       	ld.w	r1,r6[0x8]
	...

8000b1f2 <position_correction>:
	
void position_correction(position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps, float dt)
{
8000b1f2:	eb cd 40 e0 	pushm	r5-r7,lr
8000b1f6:	1a 97       	mov	r7,sp
8000b1f8:	fa cd 00 e4 	sub	sp,sp,228
8000b1fc:	fe f6 06 7c 	ld.w	r6,pc[1660]
8000b200:	1e 26       	rsub	r6,pc
8000b202:	ef 4c ff 58 	st.w	r7[-168],r12
8000b206:	ef 4b ff 54 	st.w	r7[-172],r11
8000b20a:	ef 4a ff 50 	st.w	r7[-176],r10
8000b20e:	ef 49 ff 4c 	st.w	r7[-180],r9
	global_position_t global_gps_position;
	local_coordinates_t local_coordinates;
	
	UQuat_t bias_correction ={.s=0, .v={0.0, 0.0, 1.0}};
8000b212:	30 08       	mov	r8,0
8000b214:	ef 48 ff 84 	st.w	r7[-124],r8
8000b218:	30 08       	mov	r8,0
8000b21a:	ef 48 ff 88 	st.w	r7[-120],r8
8000b21e:	30 08       	mov	r8,0
8000b220:	ef 48 ff 8c 	st.w	r7[-116],r8
8000b224:	fc 18 3f 80 	movh	r8,0x3f80
8000b228:	ef 48 ff 90 	st.w	r7[-112],r8
	UQuat_t vel_correction ={.s=0, .v={0.0, 0.0, 1.0}};
8000b22c:	30 08       	mov	r8,0
8000b22e:	ef 48 ff 74 	st.w	r7[-140],r8
8000b232:	30 08       	mov	r8,0
8000b234:	ef 48 ff 78 	st.w	r7[-136],r8
8000b238:	30 08       	mov	r8,0
8000b23a:	ef 48 ff 7c 	st.w	r7[-132],r8
8000b23e:	fc 18 3f 80 	movh	r8,0x3f80
8000b242:	ef 48 ff 80 	st.w	r7[-128],r8
	float pos_error[3]= {0.0,0.0,0.0};
8000b246:	30 08       	mov	r8,0
8000b248:	ef 48 ff 68 	st.w	r7[-152],r8
8000b24c:	30 08       	mov	r8,0
8000b24e:	ef 48 ff 6c 	st.w	r7[-148],r8
8000b252:	30 08       	mov	r8,0
8000b254:	ef 48 ff 70 	st.w	r7[-144],r8
	float baro_alt_error=0.0;
8000b258:	30 08       	mov	r8,0
8000b25a:	ef 48 ff e0 	st.w	r7[-32],r8
	float baro_vel_error=0.0;
8000b25e:	30 08       	mov	r8,0
8000b260:	ef 48 ff e4 	st.w	r7[-28],r8
	float baro_gain=0.0;
8000b264:	30 08       	mov	r8,0
8000b266:	ef 48 ff e8 	st.w	r7[-24],r8
	float gps_gain=0.0;
8000b26a:	30 08       	mov	r8,0
8000b26c:	ef 48 ff ec 	st.w	r7[-20],r8
	float gps_dt=0.0;
8000b270:	30 08       	mov	r8,0
8000b272:	ef 48 ff f0 	st.w	r7[-16],r8
	float vel_error[3]={0.0,0.0,0.0};
8000b276:	30 08       	mov	r8,0
8000b278:	ef 48 ff 5c 	st.w	r7[-164],r8
8000b27c:	30 08       	mov	r8,0
8000b27e:	ef 48 ff 60 	st.w	r7[-160],r8
8000b282:	30 08       	mov	r8,0
8000b284:	ef 48 ff 64 	st.w	r7[-156],r8
	uint32_t tinterGps, tinterBaro;
	int i;
	//if ((centralData->simulation_mode == 0))
	{
		if (pos_est->init_barometer)
8000b288:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b28c:	f1 38 00 29 	ld.ub	r8,r8[41]
8000b290:	58 08       	cp.w	r8,0
8000b292:	c6 40       	breq	8000b35a <position_correction+0x168>
		{
			// altimeter correction
			if (newValidBarometer(&pos_est->timeLastBarometerMsg))
8000b294:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b298:	2d c8       	sub	r8,-36
8000b29a:	10 9c       	mov	r12,r8
8000b29c:	f0 16 00 e4 	mcall	r6[912]
8000b2a0:	18 98       	mov	r8,r12
8000b2a2:	58 08       	cp.w	r8,0
8000b2a4:	c2 70       	breq	8000b2f2 <position_correction+0x100>
			{
				//alt_error = -(barometer->altitude + barometer->altitude_offset) - pos_est->localPosition.pos[2]+pos_est->localPosition.origin.altitude;
				pos_est->last_alt= -(barometer->altitude ) + pos_est->localPosition.origin.altitude;
8000b2a6:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b2aa:	f0 f9 00 80 	ld.w	r9,r8[128]
8000b2ae:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b2b2:	70 78       	ld.w	r8,r8[0x1c]
8000b2b4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000b2b8:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b2bc:	f1 49 00 50 	st.w	r8[80],r9
				baro_alt_error = -(barometer->altitude ) - pos_est->localPosition.pos[2]+pos_est->localPosition.origin.altitude;
8000b2c0:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b2c4:	70 78       	ld.w	r8,r8[0x1c]
8000b2c6:	10 99       	mov	r9,r8
8000b2c8:	ee 19 80 00 	eorh	r9,0x8000
8000b2cc:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b2d0:	71 a8       	ld.w	r8,r8[0x68]
8000b2d2:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000b2d6:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b2da:	f0 f8 00 80 	ld.w	r8,r8[128]
8000b2de:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000b2e2:	ef 48 ff e0 	st.w	r7[-32],r8
				dbg_print(") - ");
				dbg_print_num(pos_est->localPosition.pos[2],10);
				dbg_print(" + ");
				dbg_print_num(pos_est->localPosition.origin.altitude,10);
				dbg_print("\n");*/
				pos_est->timeLastBarometerMsg=barometer->last_update;
8000b2e6:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b2ea:	70 a9       	ld.w	r9,r8[0x28]
8000b2ec:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b2f0:	91 99       	st.w	r8[0x24],r9
			}
			tinterBaro = (get_micros()-barometer->last_update)/1000.0;
8000b2f2:	f0 16 00 29 	mcall	r6[164]
8000b2f6:	18 99       	mov	r9,r12
8000b2f8:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b2fc:	70 a8       	ld.w	r8,r8[0x28]
8000b2fe:	f2 08 01 08 	sub	r8,r9,r8
8000b302:	10 9c       	mov	r12,r8
8000b304:	f0 16 00 51 	mcall	r6[324]
8000b308:	30 08       	mov	r8,0
8000b30a:	e0 69 40 00 	mov	r9,16384
8000b30e:	ea 19 40 8f 	orh	r9,0x408f
8000b312:	f0 16 00 0c 	mcall	r6[48]
8000b316:	14 98       	mov	r8,r10
8000b318:	16 99       	mov	r9,r11
8000b31a:	10 9a       	mov	r10,r8
8000b31c:	12 9b       	mov	r11,r9
8000b31e:	f0 16 00 7b 	mcall	r6[492]
8000b322:	18 98       	mov	r8,r12
8000b324:	ef 48 ff f8 	st.w	r7[-8],r8
			baro_gain=1.0;//fmax(1.0-tinterBaro/1000.0, 0.0);
8000b328:	fc 18 3f 80 	movh	r8,0x3f80
8000b32c:	ef 48 ff e8 	st.w	r7[-24],r8
			
			//pos_est->localPosition.pos[2] += kp_alt/((float)(tinterBaro/2.5 + 1.0)) * alt_error;
			baro_alt_error=pos_est->last_alt  - pos_est->localPosition.pos[2];
8000b330:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b334:	71 49       	ld.w	r9,r8[0x50]
8000b336:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b33a:	71 a8       	ld.w	r8,r8[0x68]
8000b33c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b340:	ef 48 ff e0 	st.w	r7[-32],r8
			baro_vel_error=barometer->vario_vz - pos_est->vel[2];
8000b344:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b348:	70 99       	ld.w	r9,r8[0x24]
8000b34a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b34e:	71 08       	ld.w	r8,r8[0x40]
8000b350:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b354:	ef 48 ff e4 	st.w	r7[-28],r8
8000b358:	c0 78       	rjmp	8000b366 <position_correction+0x174>
			//vel_error[2]=0.1*pos_error[2];
			//pos_est->vel[2] += kp_alt_v * vel_error[2];
				
		}else{
			init_barometer_offset(pos_est, barometer);
8000b35a:	ee fb ff 54 	ld.w	r11,r7[-172]
8000b35e:	ee fc ff 58 	ld.w	r12,r7[-168]
8000b362:	f0 16 02 09 	mcall	r6[2084]
		}
	
		if (pos_est->init_gps_position)
8000b366:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b36a:	f1 38 00 28 	ld.ub	r8,r8[40]
8000b36e:	58 08       	cp.w	r8,0
8000b370:	e0 80 01 9c 	breq	8000b6a8 <position_correction+0x4b6>
		{
			if (newValidGpsMsg(&pos_est->timeLastGpsMsg))
8000b374:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b378:	2e 08       	sub	r8,-32
8000b37a:	10 9c       	mov	r12,r8
8000b37c:	f0 16 00 94 	mcall	r6[592]
8000b380:	18 98       	mov	r8,r12
8000b382:	58 08       	cp.w	r8,0
8000b384:	e0 80 01 07 	breq	8000b592 <position_correction+0x3a0>
			{
				//dbg_print("New valid message\n");
				global_gps_position.longitude = gps->longitude;
8000b388:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b38c:	f0 e8 00 08 	ld.d	r8,r8[8]
8000b390:	ee e9 ff c4 	st.d	r7[-60],r8
				global_gps_position.latitude = gps->latitude;
8000b394:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b398:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b39c:	ee e9 ff cc 	st.d	r7[-52],r8
				global_gps_position.altitude = gps->altitude;
8000b3a0:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b3a4:	70 48       	ld.w	r8,r8[0x10]
8000b3a6:	ef 48 ff d4 	st.w	r7[-44],r8
				global_gps_position.heading=0.0;
8000b3aa:	30 08       	mov	r8,0
8000b3ac:	ef 48 ff d8 	st.w	r7[-40],r8
				local_coordinates = global_to_local_position(global_gps_position,pos_est->localPosition.origin);
8000b3b0:	ee cc 00 e4 	sub	r12,r7,228
8000b3b4:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b3b8:	20 7d       	sub	sp,28
8000b3ba:	1a 99       	mov	r9,sp
8000b3bc:	12 9a       	mov	r10,r9
8000b3be:	f0 cb ff 90 	sub	r11,r8,-112
8000b3c2:	f4 c8 00 00 	sub	r8,r10,0
8000b3c6:	f6 c9 00 00 	sub	r9,r11,0
8000b3ca:	72 0e       	ld.w	lr,r9[0x0]
8000b3cc:	91 0e       	st.w	r8[0x0],lr
8000b3ce:	72 1e       	ld.w	lr,r9[0x4]
8000b3d0:	91 1e       	st.w	r8[0x4],lr
8000b3d2:	72 2e       	ld.w	lr,r9[0x8]
8000b3d4:	91 2e       	st.w	r8[0x8],lr
8000b3d6:	72 39       	ld.w	r9,r9[0xc]
8000b3d8:	91 39       	st.w	r8[0xc],r9
8000b3da:	f6 e8 00 10 	ld.d	r8,r11[16]
8000b3de:	f4 e9 00 10 	st.d	r10[16],r8
8000b3e2:	76 68       	ld.w	r8,r11[0x18]
8000b3e4:	95 68       	st.w	r10[0x18],r8
8000b3e6:	20 7d       	sub	sp,28
8000b3e8:	1a 98       	mov	r8,sp
8000b3ea:	10 9a       	mov	r10,r8
8000b3ec:	ee cb 00 3c 	sub	r11,r7,60
8000b3f0:	f4 c8 00 00 	sub	r8,r10,0
8000b3f4:	f6 c9 00 00 	sub	r9,r11,0
8000b3f8:	72 0e       	ld.w	lr,r9[0x0]
8000b3fa:	91 0e       	st.w	r8[0x0],lr
8000b3fc:	72 1e       	ld.w	lr,r9[0x4]
8000b3fe:	91 1e       	st.w	r8[0x4],lr
8000b400:	72 2e       	ld.w	lr,r9[0x8]
8000b402:	91 2e       	st.w	r8[0x8],lr
8000b404:	72 39       	ld.w	r9,r9[0xc]
8000b406:	91 39       	st.w	r8[0xc],r9
8000b408:	f6 e8 00 10 	ld.d	r8,r11[16]
8000b40c:	f4 e9 00 10 	st.d	r10[16],r8
8000b410:	76 68       	ld.w	r8,r11[0x18]
8000b412:	95 68       	st.w	r10[0x18],r8
8000b414:	f0 16 00 7a 	mcall	r6[488]
8000b418:	2f 2d       	sub	sp,-56
8000b41a:	ee cb 00 6c 	sub	r11,r7,108
8000b41e:	ee ca 00 e4 	sub	r10,r7,228
8000b422:	f6 c8 00 00 	sub	r8,r11,0
8000b426:	f4 c9 00 00 	sub	r9,r10,0
8000b42a:	72 0c       	ld.w	r12,r9[0x0]
8000b42c:	91 0c       	st.w	r8[0x0],r12
8000b42e:	72 1c       	ld.w	r12,r9[0x4]
8000b430:	91 1c       	st.w	r8[0x4],r12
8000b432:	72 2c       	ld.w	r12,r9[0x8]
8000b434:	91 2c       	st.w	r8[0x8],r12
8000b436:	72 39       	ld.w	r9,r9[0xc]
8000b438:	91 39       	st.w	r8[0xc],r9
8000b43a:	f6 c8 ff f0 	sub	r8,r11,-16
8000b43e:	f4 c9 ff f0 	sub	r9,r10,-16
8000b442:	72 0c       	ld.w	r12,r9[0x0]
8000b444:	91 0c       	st.w	r8[0x0],r12
8000b446:	72 1c       	ld.w	r12,r9[0x4]
8000b448:	91 1c       	st.w	r8[0x4],r12
8000b44a:	72 2c       	ld.w	r12,r9[0x8]
8000b44c:	91 2c       	st.w	r8[0x8],r12
8000b44e:	72 39       	ld.w	r9,r9[0xc]
8000b450:	91 39       	st.w	r8[0xc],r9
8000b452:	f6 c8 ff e0 	sub	r8,r11,-32
8000b456:	f4 c9 ff e0 	sub	r9,r10,-32
8000b45a:	72 0a       	ld.w	r10,r9[0x0]
8000b45c:	91 0a       	st.w	r8[0x0],r10
8000b45e:	72 1a       	ld.w	r10,r9[0x4]
8000b460:	91 1a       	st.w	r8[0x4],r10
8000b462:	72 2a       	ld.w	r10,r9[0x8]
8000b464:	91 2a       	st.w	r8[0x8],r10
8000b466:	72 39       	ld.w	r9,r9[0xc]
8000b468:	91 39       	st.w	r8[0xc],r9
				local_coordinates.timestamp_ms=gps->timeLastMsg;
8000b46a:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b46e:	71 18       	ld.w	r8,r8[0x44]
8000b470:	ef 48 ff c0 	st.w	r7[-64],r8
				// compute GPS velocity estimate
				gps_dt=(local_coordinates.timestamp_ms - pos_est->lastGpsPos.timestamp_ms)/1000.0;
8000b474:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000b478:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b47c:	f0 f8 00 bc 	ld.w	r8,r8[188]
8000b480:	f2 08 01 08 	sub	r8,r9,r8
8000b484:	10 9c       	mov	r12,r8
8000b486:	f0 16 00 51 	mcall	r6[324]
8000b48a:	30 08       	mov	r8,0
8000b48c:	e0 69 40 00 	mov	r9,16384
8000b490:	ea 19 40 8f 	orh	r9,0x408f
8000b494:	f0 16 00 0c 	mcall	r6[48]
8000b498:	14 98       	mov	r8,r10
8000b49a:	16 99       	mov	r9,r11
8000b49c:	10 9a       	mov	r10,r8
8000b49e:	12 9b       	mov	r11,r9
8000b4a0:	f0 16 00 09 	mcall	r6[36]
8000b4a4:	18 98       	mov	r8,r12
8000b4a6:	ef 48 ff f0 	st.w	r7[-16],r8
				if (gps_dt>0.001) {
8000b4aa:	ee fc ff f0 	ld.w	r12,r7[-16]
8000b4ae:	f0 16 00 02 	mcall	r6[8]
8000b4b2:	14 98       	mov	r8,r10
8000b4b4:	16 99       	mov	r9,r11
8000b4b6:	30 05       	mov	r5,0
8000b4b8:	e0 6a a9 fc 	mov	r10,43516
8000b4bc:	ea 1a d2 f1 	orh	r10,0xd2f1
8000b4c0:	e0 6b 62 4d 	mov	r11,25165
8000b4c4:	ea 1b 3f 50 	orh	r11,0x3f50
8000b4c8:	f0 16 00 1d 	mcall	r6[116]
8000b4cc:	18 98       	mov	r8,r12
8000b4ce:	58 08       	cp.w	r8,0
8000b4d0:	c0 20       	breq	8000b4d4 <position_correction+0x2e2>
8000b4d2:	30 15       	mov	r5,1
8000b4d4:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000b4d8:	c5 90       	breq	8000b58a <position_correction+0x398>
					for (i=0; i<3; i++) pos_est->last_vel[i] = (local_coordinates.pos[i]-pos_est->lastGpsPos.pos[i])/gps_dt;
8000b4da:	30 08       	mov	r8,0
8000b4dc:	ef 48 ff fc 	st.w	r7[-4],r8
8000b4e0:	c2 58       	rjmp	8000b52a <position_correction+0x338>
8000b4e2:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000b4e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b4ea:	a3 68       	lsl	r8,0x2
8000b4ec:	ee 08 00 08 	add	r8,r7,r8
8000b4f0:	f0 f9 ff 94 	ld.w	r9,r8[-108]
8000b4f4:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b4f8:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b4fc:	2d ca       	sub	r10,-36
8000b4fe:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000b502:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b506:	ee fb ff f0 	ld.w	r11,r7[-16]
8000b50a:	10 9c       	mov	r12,r8
8000b50c:	f0 16 00 08 	mcall	r6[32]
8000b510:	18 98       	mov	r8,r12
8000b512:	10 9a       	mov	r10,r8
8000b514:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b518:	ea c9 ff eb 	sub	r9,r5,-21
8000b51c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000b520:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b524:	2f f8       	sub	r8,-1
8000b526:	ef 48 ff fc 	st.w	r7[-4],r8
8000b52a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b52e:	58 28       	cp.w	r8,2
8000b530:	fe 9a ff d9 	brle	8000b4e2 <position_correction+0x2f0>
					pos_est->lastGpsPos=local_coordinates;
8000b534:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b538:	f0 cb ff 70 	sub	r11,r8,-144
8000b53c:	ee ca 00 6c 	sub	r10,r7,108
8000b540:	f6 c8 00 00 	sub	r8,r11,0
8000b544:	f4 c9 00 00 	sub	r9,r10,0
8000b548:	72 0c       	ld.w	r12,r9[0x0]
8000b54a:	91 0c       	st.w	r8[0x0],r12
8000b54c:	72 1c       	ld.w	r12,r9[0x4]
8000b54e:	91 1c       	st.w	r8[0x4],r12
8000b550:	72 2c       	ld.w	r12,r9[0x8]
8000b552:	91 2c       	st.w	r8[0x8],r12
8000b554:	72 39       	ld.w	r9,r9[0xc]
8000b556:	91 39       	st.w	r8[0xc],r9
8000b558:	f6 c8 ff f0 	sub	r8,r11,-16
8000b55c:	f4 c9 ff f0 	sub	r9,r10,-16
8000b560:	72 0c       	ld.w	r12,r9[0x0]
8000b562:	91 0c       	st.w	r8[0x0],r12
8000b564:	72 1c       	ld.w	r12,r9[0x4]
8000b566:	91 1c       	st.w	r8[0x4],r12
8000b568:	72 2c       	ld.w	r12,r9[0x8]
8000b56a:	91 2c       	st.w	r8[0x8],r12
8000b56c:	72 39       	ld.w	r9,r9[0xc]
8000b56e:	91 39       	st.w	r8[0xc],r9
8000b570:	f6 c8 ff e0 	sub	r8,r11,-32
8000b574:	f4 c9 ff e0 	sub	r9,r10,-32
8000b578:	72 0a       	ld.w	r10,r9[0x0]
8000b57a:	91 0a       	st.w	r8[0x0],r10
8000b57c:	72 1a       	ld.w	r10,r9[0x4]
8000b57e:	91 1a       	st.w	r8[0x4],r10
8000b580:	72 2a       	ld.w	r10,r9[0x8]
8000b582:	91 2a       	st.w	r8[0x8],r10
8000b584:	72 39       	ld.w	r9,r9[0xc]
8000b586:	91 39       	st.w	r8[0xc],r9
8000b588:	c0 58       	rjmp	8000b592 <position_correction+0x3a0>
				} else dbg_print("GPS dt is too small!");
8000b58a:	fe cc 03 ae 	sub	r12,pc,942
8000b58e:	f0 16 00 01 	mcall	r6[4]
			}
			tinterGps = get_millis() - gps->timeLastMsg;
8000b592:	f0 16 00 0f 	mcall	r6[60]
8000b596:	18 99       	mov	r9,r12
8000b598:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b59c:	71 18       	ld.w	r8,r8[0x44]
8000b59e:	10 19       	sub	r9,r8
8000b5a0:	ef 49 ff f4 	st.w	r7[-12],r9
			
			gps_gain=fmax(1.0-tinterGps/1000.0, 0.0);
8000b5a4:	ee fc ff f4 	ld.w	r12,r7[-12]
8000b5a8:	f0 16 00 51 	mcall	r6[324]
8000b5ac:	30 08       	mov	r8,0
8000b5ae:	e0 69 40 00 	mov	r9,16384
8000b5b2:	ea 19 c0 8f 	orh	r9,0xc08f
8000b5b6:	f0 16 00 0c 	mcall	r6[48]
8000b5ba:	14 98       	mov	r8,r10
8000b5bc:	16 99       	mov	r9,r11
8000b5be:	10 9a       	mov	r10,r8
8000b5c0:	12 9b       	mov	r11,r9
8000b5c2:	30 08       	mov	r8,0
8000b5c4:	fc 19 3f f0 	movh	r9,0x3ff0
8000b5c8:	f0 16 00 05 	mcall	r6[20]
8000b5cc:	14 98       	mov	r8,r10
8000b5ce:	16 99       	mov	r9,r11
8000b5d0:	30 05       	mov	r5,0
8000b5d2:	30 0a       	mov	r10,0
8000b5d4:	30 0b       	mov	r11,0
8000b5d6:	f0 16 00 1d 	mcall	r6[116]
8000b5da:	18 98       	mov	r8,r12
8000b5dc:	58 08       	cp.w	r8,0
8000b5de:	c0 20       	breq	8000b5e2 <position_correction+0x3f0>
8000b5e0:	30 15       	mov	r5,1
8000b5e2:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000b5e6:	c1 d0       	breq	8000b620 <position_correction+0x42e>
8000b5e8:	ee fc ff f4 	ld.w	r12,r7[-12]
8000b5ec:	f0 16 00 51 	mcall	r6[324]
8000b5f0:	30 08       	mov	r8,0
8000b5f2:	e0 69 40 00 	mov	r9,16384
8000b5f6:	ea 19 c0 8f 	orh	r9,0xc08f
8000b5fa:	f0 16 00 0c 	mcall	r6[48]
8000b5fe:	14 98       	mov	r8,r10
8000b600:	16 99       	mov	r9,r11
8000b602:	10 9a       	mov	r10,r8
8000b604:	12 9b       	mov	r11,r9
8000b606:	30 08       	mov	r8,0
8000b608:	fc 19 3f f0 	movh	r9,0x3ff0
8000b60c:	f0 16 00 05 	mcall	r6[20]
8000b610:	14 98       	mov	r8,r10
8000b612:	16 99       	mov	r9,r11
8000b614:	10 9a       	mov	r10,r8
8000b616:	12 9b       	mov	r11,r9
8000b618:	f0 16 00 09 	mcall	r6[36]
8000b61c:	18 98       	mov	r8,r12
8000b61e:	c0 28       	rjmp	8000b622 <position_correction+0x430>
8000b620:	30 08       	mov	r8,0
8000b622:	ef 48 ff ec 	st.w	r7[-20],r8
			gps_gain=1.0;
8000b626:	fc 18 3f 80 	movh	r8,0x3f80
8000b62a:	ef 48 ff ec 	st.w	r7[-20],r8
			
			for (i=0;i<3;i++){
8000b62e:	30 08       	mov	r8,0
8000b630:	ef 48 ff fc 	st.w	r7[-4],r8
8000b634:	c3 48       	rjmp	8000b69c <position_correction+0x4aa>
				pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
8000b636:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b63a:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b63e:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000b642:	2d ca       	sub	r10,-36
8000b644:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8000b648:	ee fb ff fc 	ld.w	r11,r7[-4]
8000b64c:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000b650:	2e 8b       	sub	r11,-24
8000b652:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8000b656:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000b65a:	a3 68       	lsl	r8,0x2
8000b65c:	ee 08 00 08 	add	r8,r7,r8
8000b660:	f1 49 ff 68 	st.w	r8[-152],r9
				vel_error[i] = pos_est->last_vel[i]       - pos_est->vel[i]; 
8000b664:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b668:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b66c:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000b670:	2e ba       	sub	r10,-21
8000b672:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8000b676:	ee fb ff fc 	ld.w	r11,r7[-4]
8000b67a:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000b67e:	2f 2b       	sub	r11,-14
8000b680:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8000b684:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000b688:	a3 68       	lsl	r8,0x2
8000b68a:	ee 08 00 08 	add	r8,r7,r8
8000b68e:	f1 49 ff 5c 	st.w	r8[-164],r9
			tinterGps = get_millis() - gps->timeLastMsg;
			
			gps_gain=fmax(1.0-tinterGps/1000.0, 0.0);
			gps_gain=1.0;
			
			for (i=0;i<3;i++){
8000b692:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b696:	2f f8       	sub	r8,-1
8000b698:	ef 48 ff fc 	st.w	r7[-4],r8
8000b69c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b6a0:	58 28       	cp.w	r8,2
8000b6a2:	fe 9a ff ca 	brle	8000b636 <position_correction+0x444>
8000b6a6:	c2 b8       	rjmp	8000b6fc <position_correction+0x50a>
				pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				vel_error[i] = pos_est->last_vel[i]       - pos_est->vel[i]; 
			}
		}else{
			init_pos_gps(pos_est, gps);
8000b6a8:	ee fb ff 50 	ld.w	r11,r7[-176]
8000b6ac:	ee fc ff 58 	ld.w	r12,r7[-168]
8000b6b0:	f0 16 00 e3 	mcall	r6[908]
			for (i=0;i<2;i++){
8000b6b4:	30 08       	mov	r8,0
8000b6b6:	ef 48 ff fc 	st.w	r7[-4],r8
8000b6ba:	c1 68       	rjmp	8000b6e6 <position_correction+0x4f4>
				//pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				pos_error[i] = 0.0;
8000b6bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b6c0:	a3 68       	lsl	r8,0x2
8000b6c2:	ee 08 00 08 	add	r8,r7,r8
8000b6c6:	30 09       	mov	r9,0
8000b6c8:	f1 49 ff 68 	st.w	r8[-152],r9
				vel_error[i] = 0.0;
8000b6cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b6d0:	a3 68       	lsl	r8,0x2
8000b6d2:	ee 08 00 08 	add	r8,r7,r8
8000b6d6:	30 09       	mov	r9,0
8000b6d8:	f1 49 ff 5c 	st.w	r8[-164],r9
				pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				vel_error[i] = pos_est->last_vel[i]       - pos_est->vel[i]; 
			}
		}else{
			init_pos_gps(pos_est, gps);
			for (i=0;i<2;i++){
8000b6dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b6e0:	2f f8       	sub	r8,-1
8000b6e2:	ef 48 ff fc 	st.w	r7[-4],r8
8000b6e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b6ea:	58 18       	cp.w	r8,1
8000b6ec:	fe 9a ff e8 	brle	8000b6bc <position_correction+0x4ca>
				//pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				pos_error[i] = 0.0;
				vel_error[i] = 0.0;
			}
			gps_gain=0.1;
8000b6f0:	e0 68 cc cd 	mov	r8,52429
8000b6f4:	ea 18 3d cc 	orh	r8,0x3dcc
8000b6f8:	ef 48 ff ec 	st.w	r7[-20],r8
		}
		
		// Apply error correction to velocity and position estimates
		for (i=0;i<3;i++) {
8000b6fc:	30 08       	mov	r8,0
8000b6fe:	ef 48 ff fc 	st.w	r7[-4],r8
8000b702:	c2 e8       	rjmp	8000b75e <position_correction+0x56c>
			pos_est->localPosition.pos[i] += pos_est->kp_pos[i] * gps_gain * pos_error[i]* dt;
8000b704:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b708:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b70c:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b710:	2e 8a       	sub	r10,-24
8000b712:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000b716:	ee fb ff fc 	ld.w	r11,r7[-4]
8000b71a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b71e:	2f db       	sub	r11,-3
8000b720:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8000b724:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b728:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000b72c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b730:	a3 68       	lsl	r8,0x2
8000b732:	ee 08 00 08 	add	r8,r7,r8
8000b736:	f0 f8 ff 68 	ld.w	r8,r8[-152]
8000b73a:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000b73e:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000b742:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000b746:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8000b74a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b74e:	2e 89       	sub	r9,-24
8000b750:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			}
			gps_gain=0.1;
		}
		
		// Apply error correction to velocity and position estimates
		for (i=0;i<3;i++) {
8000b754:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b758:	2f f8       	sub	r8,-1
8000b75a:	ef 48 ff fc 	st.w	r7[-4],r8
8000b75e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b762:	58 28       	cp.w	r8,2
8000b764:	fe 9a ff d0 	brle	8000b704 <position_correction+0x512>
			pos_est->localPosition.pos[i] += pos_est->kp_pos[i] * gps_gain * pos_error[i]* dt;
		}
		pos_est->localPosition.pos[2] += pos_est->kp_alt * baro_gain * baro_alt_error* dt;
8000b768:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b76c:	71 a9       	ld.w	r9,r8[0x68]
8000b76e:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b772:	70 6a       	ld.w	r10,r8[0x18]
8000b774:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000b778:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000b77c:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000b780:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000b784:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000b788:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b78c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000b790:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b794:	f1 49 00 68 	st.w	r8[104],r9


		for (i=0; i<3; i++) vel_correction.v[i] = vel_error[i];
8000b798:	30 08       	mov	r8,0
8000b79a:	ef 48 ff fc 	st.w	r7[-4],r8
8000b79e:	c1 68       	rjmp	8000b7ca <position_correction+0x5d8>
8000b7a0:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b7a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b7a8:	a3 68       	lsl	r8,0x2
8000b7aa:	ee 08 00 08 	add	r8,r7,r8
8000b7ae:	f0 f9 ff 5c 	ld.w	r9,r8[-164]
8000b7b2:	f4 c8 ff ff 	sub	r8,r10,-1
8000b7b6:	a3 68       	lsl	r8,0x2
8000b7b8:	ee 08 00 08 	add	r8,r7,r8
8000b7bc:	f1 49 ff 74 	st.w	r8[-140],r9
8000b7c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b7c4:	2f f8       	sub	r8,-1
8000b7c6:	ef 48 ff fc 	st.w	r7[-4],r8
8000b7ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b7ce:	58 28       	cp.w	r8,2
8000b7d0:	fe 9a ff e8 	brle	8000b7a0 <position_correction+0x5ae>
		//for (i=0; i<3; i++) vel_correction.v[i] = pos_error[i];
		//vel_correction = quat_global_to_local(pos_est->qe, vel_correction);
				
		for (i=0;i<3;i++) {			
8000b7d4:	30 08       	mov	r8,0
8000b7d6:	ef 48 ff fc 	st.w	r7[-4],r8
8000b7da:	c2 e8       	rjmp	8000b836 <position_correction+0x644>
			pos_est->vel[i] += pos_est->kp_vel[i]*gps_gain * vel_correction.v[i]* dt;
8000b7dc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b7e0:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b7e4:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b7e8:	2f 2a       	sub	r10,-14
8000b7ea:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000b7ee:	ee fb ff fc 	ld.w	r11,r7[-4]
8000b7f2:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b7f6:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8000b7fa:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b7fe:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000b802:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b806:	2f f8       	sub	r8,-1
8000b808:	a3 68       	lsl	r8,0x2
8000b80a:	ee 08 00 08 	add	r8,r7,r8
8000b80e:	f0 f8 ff 74 	ld.w	r8,r8[-140]
8000b812:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000b816:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000b81a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000b81e:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8000b822:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b826:	2f 29       	sub	r9,-14
8000b828:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

		for (i=0; i<3; i++) vel_correction.v[i] = vel_error[i];
		//for (i=0; i<3; i++) vel_correction.v[i] = pos_error[i];
		//vel_correction = quat_global_to_local(pos_est->qe, vel_correction);
				
		for (i=0;i<3;i++) {			
8000b82c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b830:	2f f8       	sub	r8,-1
8000b832:	ef 48 ff fc 	st.w	r7[-4],r8
8000b836:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b83a:	58 28       	cp.w	r8,2
8000b83c:	fe 9a ff d0 	brle	8000b7dc <position_correction+0x5ea>
			pos_est->vel[i] += pos_est->kp_vel[i]*gps_gain * vel_correction.v[i]* dt;
		}
		pos_est->vel[2] += pos_est->kp_vel_baro * baro_gain * baro_vel_error* dt;
8000b840:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b844:	71 09       	ld.w	r9,r8[0x40]
8000b846:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b84a:	70 7a       	ld.w	r10,r8[0x1c]
8000b84c:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000b850:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000b854:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000b858:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000b85c:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000b860:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b864:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000b868:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b86c:	f1 49 00 40 	st.w	r8[64],r9

	}
8000b870:	2c 7d       	sub	sp,-228
8000b872:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000b876:	00 00       	add	r0,r0
8000b878:	80 00       	ld.sh	r0,r0[0x0]
8000b87a:	b0 84       	st.b	r8[0x0],r4

8000b87c <quat_from_vector>:
	out.v[2] = -q.v[2];

#define QUAT(q, s, v0, v1, v2) \
	q.s=s; q.v[0]=v0; q.v[1]=v1; q.v[2]=v2;

UQuat_t static inline quat_from_vector(float *v) {
8000b87c:	eb cd 40 80 	pushm	r7,lr
8000b880:	1a 97       	mov	r7,sp
8000b882:	20 5d       	sub	sp,20
8000b884:	18 9a       	mov	r10,r12
8000b886:	ef 4b ff ec 	st.w	r7[-20],r11
	UQuat_t q;	
	q.s=0; 
8000b88a:	30 08       	mov	r8,0
8000b88c:	ef 48 ff f0 	st.w	r7[-16],r8
	q.v[0]=v[0]; 
8000b890:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b894:	70 08       	ld.w	r8,r8[0x0]
8000b896:	ef 48 ff f4 	st.w	r7[-12],r8
	q.v[1]=v[1]; 
8000b89a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b89e:	2f c8       	sub	r8,-4
8000b8a0:	70 08       	ld.w	r8,r8[0x0]
8000b8a2:	ef 48 ff f8 	st.w	r7[-8],r8
	q.v[2]=v[2];
8000b8a6:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000b8aa:	2f 88       	sub	r8,-8
8000b8ac:	70 08       	ld.w	r8,r8[0x0]
8000b8ae:	ef 48 ff fc 	st.w	r7[-4],r8
	return q;
8000b8b2:	14 98       	mov	r8,r10
8000b8b4:	ee c9 00 10 	sub	r9,r7,16
8000b8b8:	20 08       	sub	r8,0
8000b8ba:	20 09       	sub	r9,0
8000b8bc:	72 0b       	ld.w	r11,r9[0x0]
8000b8be:	91 0b       	st.w	r8[0x0],r11
8000b8c0:	72 1b       	ld.w	r11,r9[0x4]
8000b8c2:	91 1b       	st.w	r8[0x4],r11
8000b8c4:	72 2b       	ld.w	r11,r9[0x8]
8000b8c6:	91 2b       	st.w	r8[0x8],r11
8000b8c8:	72 39       	ld.w	r9,r9[0xc]
8000b8ca:	91 39       	st.w	r8[0xc],r9
}
8000b8cc:	14 9c       	mov	r12,r10
8000b8ce:	2f bd       	sub	sp,-20
8000b8d0:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b8d4 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8000b8d4:	eb cd 40 80 	pushm	r7,lr
8000b8d8:	1a 97       	mov	r7,sp
8000b8da:	20 3d       	sub	sp,12
8000b8dc:	ef 4c ff f8 	st.w	r7[-8],r12
8000b8e0:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8000b8e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b8e8:	70 09       	ld.w	r9,r8[0x0]
8000b8ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b8ee:	70 08       	ld.w	r8,r8[0x0]
8000b8f0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000b8f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b8f8:	2f c8       	sub	r8,-4
8000b8fa:	70 0a       	ld.w	r10,r8[0x0]
8000b8fc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b900:	2f c8       	sub	r8,-4
8000b902:	70 08       	ld.w	r8,r8[0x0]
8000b904:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b908:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000b90c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b910:	2f 88       	sub	r8,-8
8000b912:	70 0a       	ld.w	r10,r8[0x0]
8000b914:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b918:	2f 88       	sub	r8,-8
8000b91a:	70 08       	ld.w	r8,r8[0x0]
8000b91c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000b920:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000b924:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8000b928:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000b92c:	10 9c       	mov	r12,r8
8000b92e:	2f dd       	sub	sp,-12
8000b930:	e3 cd 80 80 	ldm	sp++,r7,pc

8000b934 <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
8000b934:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000b938:	1a 97       	mov	r7,sp
8000b93a:	20 7d       	sub	sp,28
8000b93c:	4b d6       	lddpc	r6,8000ba30 <quat_multi+0xfc>
8000b93e:	1e 26       	rsub	r6,pc
8000b940:	ee c8 ff ec 	sub	r8,r7,-20
8000b944:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8000b946:	70 2a       	ld.w	r10,r8[0x8]
8000b948:	70 79       	ld.w	r9,r8[0x1c]
8000b94a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000b94e:	70 3b       	ld.w	r11,r8[0xc]
8000b950:	70 69       	ld.w	r9,r8[0x18]
8000b952:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000b956:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000b95a:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
8000b95e:	70 3a       	ld.w	r10,r8[0xc]
8000b960:	70 59       	ld.w	r9,r8[0x14]
8000b962:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000b966:	70 1b       	ld.w	r11,r8[0x4]
8000b968:	70 79       	ld.w	r9,r8[0x1c]
8000b96a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000b96e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000b972:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8000b976:	70 1a       	ld.w	r10,r8[0x4]
8000b978:	70 69       	ld.w	r9,r8[0x18]
8000b97a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000b97e:	70 2b       	ld.w	r11,r8[0x8]
8000b980:	70 59       	ld.w	r9,r8[0x14]
8000b982:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000b986:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000b98a:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
8000b98e:	70 4a       	ld.w	r10,r8[0x10]
8000b990:	70 19       	ld.w	r9,r8[0x4]
8000b992:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000b996:	70 0b       	ld.w	r11,r8[0x0]
8000b998:	70 59       	ld.w	r9,r8[0x14]
8000b99a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000b99e:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000b9a2:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b9a6:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000b9aa:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
8000b9ae:	70 4a       	ld.w	r10,r8[0x10]
8000b9b0:	70 29       	ld.w	r9,r8[0x8]
8000b9b2:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000b9b6:	70 0b       	ld.w	r11,r8[0x0]
8000b9b8:	70 69       	ld.w	r9,r8[0x18]
8000b9ba:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000b9be:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000b9c2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b9c6:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000b9ca:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8000b9ce:	70 4a       	ld.w	r10,r8[0x10]
8000b9d0:	70 39       	ld.w	r9,r8[0xc]
8000b9d2:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000b9d6:	70 0b       	ld.w	r11,r8[0x0]
8000b9d8:	70 79       	ld.w	r9,r8[0x1c]
8000b9da:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000b9de:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000b9e2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b9e6:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000b9ea:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8000b9ee:	70 0a       	ld.w	r10,r8[0x0]
8000b9f0:	70 49       	ld.w	r9,r8[0x10]
8000b9f2:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8000b9f6:	f0 c9 ff f0 	sub	r9,r8,-16
8000b9fa:	2f c9       	sub	r9,-4
8000b9fc:	2f c8       	sub	r8,-4
8000b9fe:	12 9b       	mov	r11,r9
8000ba00:	10 9c       	mov	r12,r8
8000ba02:	c6 9f       	rcall	8000b8d4 <scalar_product>
8000ba04:	18 98       	mov	r8,r12
8000ba06:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8000ba0a:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
8000ba0e:	0a 98       	mov	r8,r5
8000ba10:	ee c9 00 1c 	sub	r9,r7,28
8000ba14:	20 08       	sub	r8,0
8000ba16:	20 09       	sub	r9,0
8000ba18:	72 0a       	ld.w	r10,r9[0x0]
8000ba1a:	91 0a       	st.w	r8[0x0],r10
8000ba1c:	72 1a       	ld.w	r10,r9[0x4]
8000ba1e:	91 1a       	st.w	r8[0x4],r10
8000ba20:	72 2a       	ld.w	r10,r9[0x8]
8000ba22:	91 2a       	st.w	r8[0x8],r10
8000ba24:	72 39       	ld.w	r9,r9[0xc]
8000ba26:	91 39       	st.w	r8[0xc],r9
}
8000ba28:	0a 9c       	mov	r12,r5
8000ba2a:	2f 9d       	sub	sp,-28
8000ba2c:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000ba30:	80 00       	ld.sh	r0,r0[0x0]
8000ba32:	b7 c2       	cbr	r2,0x16

8000ba34 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
8000ba34:	eb cd 40 80 	pushm	r7,lr
8000ba38:	1a 97       	mov	r7,sp
8000ba3a:	20 5d       	sub	sp,20
8000ba3c:	ee c9 ff f8 	sub	r9,r7,-8
8000ba40:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
8000ba42:	72 08       	ld.w	r8,r9[0x0]
8000ba44:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8000ba48:	30 08       	mov	r8,0
8000ba4a:	ef 48 ff fc 	st.w	r7[-4],r8
8000ba4e:	c1 58       	rjmp	8000ba78 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
8000ba50:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba54:	ee fb ff fc 	ld.w	r11,r7[-4]
8000ba58:	2f fb       	sub	r11,-1
8000ba5a:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
8000ba5e:	ee 1b 80 00 	eorh	r11,0x8000
8000ba62:	2f f8       	sub	r8,-1
8000ba64:	a3 68       	lsl	r8,0x2
8000ba66:	ee 08 00 08 	add	r8,r7,r8
8000ba6a:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
8000ba6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba72:	2f f8       	sub	r8,-1
8000ba74:	ef 48 ff fc 	st.w	r7[-4],r8
8000ba78:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba7c:	58 28       	cp.w	r8,2
8000ba7e:	fe 9a ff e9 	brle	8000ba50 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8000ba82:	14 98       	mov	r8,r10
8000ba84:	ee c9 00 14 	sub	r9,r7,20
8000ba88:	20 08       	sub	r8,0
8000ba8a:	20 09       	sub	r9,0
8000ba8c:	72 0b       	ld.w	r11,r9[0x0]
8000ba8e:	91 0b       	st.w	r8[0x0],r11
8000ba90:	72 1b       	ld.w	r11,r9[0x4]
8000ba92:	91 1b       	st.w	r8[0x4],r11
8000ba94:	72 2b       	ld.w	r11,r9[0x8]
8000ba96:	91 2b       	st.w	r8[0x8],r11
8000ba98:	72 39       	ld.w	r9,r9[0xc]
8000ba9a:	91 39       	st.w	r8[0xc],r9
}
8000ba9c:	14 9c       	mov	r12,r10
8000ba9e:	2f bd       	sub	sp,-20
8000baa0:	e3 cd 80 80 	ldm	sp++,r7,pc

8000baa4 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
8000baa4:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000baa8:	1a 97       	mov	r7,sp
8000baaa:	20 cd       	sub	sp,48
8000baac:	4b c6       	lddpc	r6,8000bb9c <quat_global_to_local+0xf8>
8000baae:	1e 26       	rsub	r6,pc
8000bab0:	ee c5 ff ec 	sub	r5,r7,-20
8000bab4:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000bab6:	ee ca 00 10 	sub	r10,r7,16
8000baba:	20 4d       	sub	sp,16
8000babc:	1a 98       	mov	r8,sp
8000babe:	0a 99       	mov	r9,r5
8000bac0:	20 08       	sub	r8,0
8000bac2:	20 09       	sub	r9,0
8000bac4:	72 0b       	ld.w	r11,r9[0x0]
8000bac6:	91 0b       	st.w	r8[0x0],r11
8000bac8:	72 1b       	ld.w	r11,r9[0x4]
8000baca:	91 1b       	st.w	r8[0x4],r11
8000bacc:	72 2b       	ld.w	r11,r9[0x8]
8000bace:	91 2b       	st.w	r8[0x8],r11
8000bad0:	72 39       	ld.w	r9,r9[0xc]
8000bad2:	91 39       	st.w	r8[0xc],r9
8000bad4:	14 9c       	mov	r12,r10
8000bad6:	ca ff       	rcall	8000ba34 <quat_inv>
8000bad8:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8000bada:	ee ca 00 20 	sub	r10,r7,32
8000bade:	20 4d       	sub	sp,16
8000bae0:	1a 98       	mov	r8,sp
8000bae2:	ea c9 ff f0 	sub	r9,r5,-16
8000bae6:	20 08       	sub	r8,0
8000bae8:	20 09       	sub	r9,0
8000baea:	72 0b       	ld.w	r11,r9[0x0]
8000baec:	91 0b       	st.w	r8[0x0],r11
8000baee:	72 1b       	ld.w	r11,r9[0x4]
8000baf0:	91 1b       	st.w	r8[0x4],r11
8000baf2:	72 2b       	ld.w	r11,r9[0x8]
8000baf4:	91 2b       	st.w	r8[0x8],r11
8000baf6:	72 39       	ld.w	r9,r9[0xc]
8000baf8:	91 39       	st.w	r8[0xc],r9
8000bafa:	20 4d       	sub	sp,16
8000bafc:	1a 98       	mov	r8,sp
8000bafe:	ee c9 00 10 	sub	r9,r7,16
8000bb02:	20 08       	sub	r8,0
8000bb04:	20 09       	sub	r9,0
8000bb06:	72 0b       	ld.w	r11,r9[0x0]
8000bb08:	91 0b       	st.w	r8[0x0],r11
8000bb0a:	72 1b       	ld.w	r11,r9[0x4]
8000bb0c:	91 1b       	st.w	r8[0x4],r11
8000bb0e:	72 2b       	ld.w	r11,r9[0x8]
8000bb10:	91 2b       	st.w	r8[0x8],r11
8000bb12:	72 39       	ld.w	r9,r9[0xc]
8000bb14:	91 39       	st.w	r8[0xc],r9
8000bb16:	14 9c       	mov	r12,r10
8000bb18:	c0 ef       	rcall	8000b934 <quat_multi>
8000bb1a:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
8000bb1c:	ee ca 00 30 	sub	r10,r7,48
8000bb20:	20 4d       	sub	sp,16
8000bb22:	1a 98       	mov	r8,sp
8000bb24:	0a 99       	mov	r9,r5
8000bb26:	20 08       	sub	r8,0
8000bb28:	20 09       	sub	r9,0
8000bb2a:	72 0b       	ld.w	r11,r9[0x0]
8000bb2c:	91 0b       	st.w	r8[0x0],r11
8000bb2e:	72 1b       	ld.w	r11,r9[0x4]
8000bb30:	91 1b       	st.w	r8[0x4],r11
8000bb32:	72 2b       	ld.w	r11,r9[0x8]
8000bb34:	91 2b       	st.w	r8[0x8],r11
8000bb36:	72 39       	ld.w	r9,r9[0xc]
8000bb38:	91 39       	st.w	r8[0xc],r9
8000bb3a:	20 4d       	sub	sp,16
8000bb3c:	1a 98       	mov	r8,sp
8000bb3e:	ee c9 00 20 	sub	r9,r7,32
8000bb42:	20 08       	sub	r8,0
8000bb44:	20 09       	sub	r9,0
8000bb46:	72 0b       	ld.w	r11,r9[0x0]
8000bb48:	91 0b       	st.w	r8[0x0],r11
8000bb4a:	72 1b       	ld.w	r11,r9[0x4]
8000bb4c:	91 1b       	st.w	r8[0x4],r11
8000bb4e:	72 2b       	ld.w	r11,r9[0x8]
8000bb50:	91 2b       	st.w	r8[0x8],r11
8000bb52:	72 39       	ld.w	r9,r9[0xc]
8000bb54:	91 39       	st.w	r8[0xc],r9
8000bb56:	14 9c       	mov	r12,r10
8000bb58:	ce ee       	rcall	8000b934 <quat_multi>
8000bb5a:	2f 8d       	sub	sp,-32
8000bb5c:	ee c8 00 20 	sub	r8,r7,32
8000bb60:	ee c9 00 30 	sub	r9,r7,48
8000bb64:	20 08       	sub	r8,0
8000bb66:	20 09       	sub	r9,0
8000bb68:	72 0a       	ld.w	r10,r9[0x0]
8000bb6a:	91 0a       	st.w	r8[0x0],r10
8000bb6c:	72 1a       	ld.w	r10,r9[0x4]
8000bb6e:	91 1a       	st.w	r8[0x4],r10
8000bb70:	72 2a       	ld.w	r10,r9[0x8]
8000bb72:	91 2a       	st.w	r8[0x8],r10
8000bb74:	72 39       	ld.w	r9,r9[0xc]
8000bb76:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8000bb78:	06 98       	mov	r8,r3
8000bb7a:	ee c9 00 20 	sub	r9,r7,32
8000bb7e:	20 08       	sub	r8,0
8000bb80:	20 09       	sub	r9,0
8000bb82:	72 0a       	ld.w	r10,r9[0x0]
8000bb84:	91 0a       	st.w	r8[0x0],r10
8000bb86:	72 1a       	ld.w	r10,r9[0x4]
8000bb88:	91 1a       	st.w	r8[0x4],r10
8000bb8a:	72 2a       	ld.w	r10,r9[0x8]
8000bb8c:	91 2a       	st.w	r8[0x8],r10
8000bb8e:	72 39       	ld.w	r9,r9[0xc]
8000bb90:	91 39       	st.w	r8[0xc],r9
}
8000bb92:	06 9c       	mov	r12,r3
8000bb94:	2f 4d       	sub	sp,-48
8000bb96:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000bb9a:	00 00       	add	r0,r0
8000bb9c:	80 00       	ld.sh	r0,r0[0x0]
8000bb9e:	b9 32       	mul	r2,r12

8000bba0 <quat_local_to_global>:

UQuat_t static inline quat_local_to_global(const UQuat_t qe, const UQuat_t qvect)
{
8000bba0:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000bba4:	1a 97       	mov	r7,sp
8000bba6:	20 cd       	sub	sp,48
8000bba8:	4b c6       	lddpc	r6,8000bc98 <quat_local_to_global+0xf8>
8000bbaa:	1e 26       	rsub	r6,pc
8000bbac:	ee c5 ff ec 	sub	r5,r7,-20
8000bbb0:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000bbb2:	ee ca 00 10 	sub	r10,r7,16
8000bbb6:	20 4d       	sub	sp,16
8000bbb8:	1a 98       	mov	r8,sp
8000bbba:	0a 99       	mov	r9,r5
8000bbbc:	20 08       	sub	r8,0
8000bbbe:	20 09       	sub	r9,0
8000bbc0:	72 0b       	ld.w	r11,r9[0x0]
8000bbc2:	91 0b       	st.w	r8[0x0],r11
8000bbc4:	72 1b       	ld.w	r11,r9[0x4]
8000bbc6:	91 1b       	st.w	r8[0x4],r11
8000bbc8:	72 2b       	ld.w	r11,r9[0x8]
8000bbca:	91 2b       	st.w	r8[0x8],r11
8000bbcc:	72 39       	ld.w	r9,r9[0xc]
8000bbce:	91 39       	st.w	r8[0xc],r9
8000bbd0:	14 9c       	mov	r12,r10
8000bbd2:	c3 1f       	rcall	8000ba34 <quat_inv>
8000bbd4:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qe, qvect);
8000bbd6:	ee ca 00 20 	sub	r10,r7,32
8000bbda:	20 4d       	sub	sp,16
8000bbdc:	1a 98       	mov	r8,sp
8000bbde:	ea c9 ff f0 	sub	r9,r5,-16
8000bbe2:	20 08       	sub	r8,0
8000bbe4:	20 09       	sub	r9,0
8000bbe6:	72 0b       	ld.w	r11,r9[0x0]
8000bbe8:	91 0b       	st.w	r8[0x0],r11
8000bbea:	72 1b       	ld.w	r11,r9[0x4]
8000bbec:	91 1b       	st.w	r8[0x4],r11
8000bbee:	72 2b       	ld.w	r11,r9[0x8]
8000bbf0:	91 2b       	st.w	r8[0x8],r11
8000bbf2:	72 39       	ld.w	r9,r9[0xc]
8000bbf4:	91 39       	st.w	r8[0xc],r9
8000bbf6:	20 4d       	sub	sp,16
8000bbf8:	1a 98       	mov	r8,sp
8000bbfa:	0a 99       	mov	r9,r5
8000bbfc:	20 08       	sub	r8,0
8000bbfe:	20 09       	sub	r9,0
8000bc00:	72 0b       	ld.w	r11,r9[0x0]
8000bc02:	91 0b       	st.w	r8[0x0],r11
8000bc04:	72 1b       	ld.w	r11,r9[0x4]
8000bc06:	91 1b       	st.w	r8[0x4],r11
8000bc08:	72 2b       	ld.w	r11,r9[0x8]
8000bc0a:	91 2b       	st.w	r8[0x8],r11
8000bc0c:	72 39       	ld.w	r9,r9[0xc]
8000bc0e:	91 39       	st.w	r8[0xc],r9
8000bc10:	14 9c       	mov	r12,r10
8000bc12:	c9 1e       	rcall	8000b934 <quat_multi>
8000bc14:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp, qinv);
8000bc16:	ee ca 00 30 	sub	r10,r7,48
8000bc1a:	20 4d       	sub	sp,16
8000bc1c:	1a 98       	mov	r8,sp
8000bc1e:	ee c9 00 10 	sub	r9,r7,16
8000bc22:	20 08       	sub	r8,0
8000bc24:	20 09       	sub	r9,0
8000bc26:	72 0b       	ld.w	r11,r9[0x0]
8000bc28:	91 0b       	st.w	r8[0x0],r11
8000bc2a:	72 1b       	ld.w	r11,r9[0x4]
8000bc2c:	91 1b       	st.w	r8[0x4],r11
8000bc2e:	72 2b       	ld.w	r11,r9[0x8]
8000bc30:	91 2b       	st.w	r8[0x8],r11
8000bc32:	72 39       	ld.w	r9,r9[0xc]
8000bc34:	91 39       	st.w	r8[0xc],r9
8000bc36:	20 4d       	sub	sp,16
8000bc38:	1a 98       	mov	r8,sp
8000bc3a:	ee c9 00 20 	sub	r9,r7,32
8000bc3e:	20 08       	sub	r8,0
8000bc40:	20 09       	sub	r9,0
8000bc42:	72 0b       	ld.w	r11,r9[0x0]
8000bc44:	91 0b       	st.w	r8[0x0],r11
8000bc46:	72 1b       	ld.w	r11,r9[0x4]
8000bc48:	91 1b       	st.w	r8[0x4],r11
8000bc4a:	72 2b       	ld.w	r11,r9[0x8]
8000bc4c:	91 2b       	st.w	r8[0x8],r11
8000bc4e:	72 39       	ld.w	r9,r9[0xc]
8000bc50:	91 39       	st.w	r8[0xc],r9
8000bc52:	14 9c       	mov	r12,r10
8000bc54:	c7 0e       	rcall	8000b934 <quat_multi>
8000bc56:	2f 8d       	sub	sp,-32
8000bc58:	ee c8 00 20 	sub	r8,r7,32
8000bc5c:	ee c9 00 30 	sub	r9,r7,48
8000bc60:	20 08       	sub	r8,0
8000bc62:	20 09       	sub	r9,0
8000bc64:	72 0a       	ld.w	r10,r9[0x0]
8000bc66:	91 0a       	st.w	r8[0x0],r10
8000bc68:	72 1a       	ld.w	r10,r9[0x4]
8000bc6a:	91 1a       	st.w	r8[0x4],r10
8000bc6c:	72 2a       	ld.w	r10,r9[0x8]
8000bc6e:	91 2a       	st.w	r8[0x8],r10
8000bc70:	72 39       	ld.w	r9,r9[0xc]
8000bc72:	91 39       	st.w	r8[0xc],r9
	
	return qtmp;
8000bc74:	06 98       	mov	r8,r3
8000bc76:	ee c9 00 20 	sub	r9,r7,32
8000bc7a:	20 08       	sub	r8,0
8000bc7c:	20 09       	sub	r9,0
8000bc7e:	72 0a       	ld.w	r10,r9[0x0]
8000bc80:	91 0a       	st.w	r8[0x0],r10
8000bc82:	72 1a       	ld.w	r10,r9[0x4]
8000bc84:	91 1a       	st.w	r8[0x4],r10
8000bc86:	72 2a       	ld.w	r10,r9[0x8]
8000bc88:	91 2a       	st.w	r8[0x8],r10
8000bc8a:	72 39       	ld.w	r9,r9[0xc]
8000bc8c:	91 39       	st.w	r8[0xc],r9
}
8000bc8e:	06 9c       	mov	r12,r3
8000bc90:	2f 4d       	sub	sp,-48
8000bc92:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000bc96:	00 00       	add	r0,r0
8000bc98:	80 00       	ld.sh	r0,r0[0x0]
8000bc9a:	ba 2e       	st.h	sp[0x4],lr

8000bc9c <fast_sqrt>:

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
8000bc9c:	eb cd 40 c0 	pushm	r6-r7,lr
8000bca0:	1a 97       	mov	r7,sp
8000bca2:	20 2d       	sub	sp,8
8000bca4:	4b 26       	lddpc	r6,8000bd6c <fast_sqrt+0xd0>
8000bca6:	1e 26       	rsub	r6,pc
8000bca8:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
8000bcac:	30 18       	mov	r8,1
8000bcae:	ee fa ff f8 	ld.w	r10,r7[-8]
8000bcb2:	30 09       	mov	r9,0
8000bcb4:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000bcb8:	e0 8c 00 03 	brvs	8000bcbe <fast_sqrt+0x22>
8000bcbc:	c0 25       	brlt	8000bcc0 <fast_sqrt+0x24>
8000bcbe:	30 08       	mov	r8,0
8000bcc0:	5c 58       	castu.b	r8
8000bcc2:	c0 30       	breq	8000bcc8 <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
8000bcc4:	30 08       	mov	r8,0
8000bcc6:	c4 f8       	rjmp	8000bd64 <fast_sqrt+0xc8>
	}
	float result=1.0;
8000bcc8:	fc 18 3f 80 	movh	r8,0x3f80
8000bccc:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000bcd0:	ee fb ff fc 	ld.w	r11,r7[-4]
8000bcd4:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bcd8:	f0 16 00 08 	mcall	r6[32]
8000bcdc:	18 98       	mov	r8,r12
8000bcde:	10 99       	mov	r9,r8
8000bce0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bce4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000bce8:	fc 18 3f 00 	movh	r8,0x3f00
8000bcec:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000bcf0:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000bcf4:	ee fb ff fc 	ld.w	r11,r7[-4]
8000bcf8:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bcfc:	f0 16 00 08 	mcall	r6[32]
8000bd00:	18 98       	mov	r8,r12
8000bd02:	10 99       	mov	r9,r8
8000bd04:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd08:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000bd0c:	fc 18 3f 00 	movh	r8,0x3f00
8000bd10:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000bd14:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000bd18:	ee fb ff fc 	ld.w	r11,r7[-4]
8000bd1c:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bd20:	f0 16 00 08 	mcall	r6[32]
8000bd24:	18 98       	mov	r8,r12
8000bd26:	10 99       	mov	r9,r8
8000bd28:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd2c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000bd30:	fc 18 3f 00 	movh	r8,0x3f00
8000bd34:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000bd38:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000bd3c:	ee fb ff fc 	ld.w	r11,r7[-4]
8000bd40:	ee fc ff f8 	ld.w	r12,r7[-8]
8000bd44:	f0 16 00 08 	mcall	r6[32]
8000bd48:	18 98       	mov	r8,r12
8000bd4a:	10 99       	mov	r9,r8
8000bd4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd50:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000bd54:	fc 18 3f 00 	movh	r8,0x3f00
8000bd58:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000bd5c:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
8000bd60:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000bd64:	10 9c       	mov	r12,r8
8000bd66:	2f ed       	sub	sp,-8
8000bd68:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000bd6c:	80 00       	ld.sh	r0,r0[0x0]
8000bd6e:	bb 2a       	st.d	sp++,r10

8000bd70 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8000bd70:	eb cd 40 c0 	pushm	r6-r7,lr
8000bd74:	1a 97       	mov	r7,sp
8000bd76:	20 6d       	sub	sp,24
8000bd78:	49 e6       	lddpc	r6,8000bdf0 <interpolate+0x80>
8000bd7a:	1e 26       	rsub	r6,pc
8000bd7c:	ef 4c ff f8 	st.w	r7[-8],r12
8000bd80:	ef 4b ff f4 	st.w	r7[-12],r11
8000bd84:	ef 4a ff f0 	st.w	r7[-16],r10
8000bd88:	ef 49 ff ec 	st.w	r7[-20],r9
8000bd8c:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8000bd90:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000bd94:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000bd98:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8000bd9c:	c0 41       	brne	8000bda4 <interpolate+0x34>
	{
		return y1;
8000bd9e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bda2:	c2 38       	rjmp	8000bde8 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8000bda4:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000bda8:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bdac:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000bdb0:	ee fa ff f8 	ld.w	r10,r7[-8]
8000bdb4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bdb8:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000bdbc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000bdc0:	ee fa ff f0 	ld.w	r10,r7[-16]
8000bdc4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000bdc8:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000bdcc:	12 9b       	mov	r11,r9
8000bdce:	10 9c       	mov	r12,r8
8000bdd0:	f0 16 00 08 	mcall	r6[32]
8000bdd4:	18 98       	mov	r8,r12
8000bdd6:	10 99       	mov	r9,r8
8000bdd8:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bddc:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000bde0:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8000bde4:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000bde8:	10 9c       	mov	r12,r8
8000bdea:	2f ad       	sub	sp,-24
8000bdec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000bdf0:	80 00       	ld.sh	r0,r0[0x0]
8000bdf2:	bb fe       	*unknown*
8000bdf4:	49 6e       	lddpc	lr,8000be4c <qfInit+0x12>
8000bdf6:	69 74       	ld.w	r4,r4[0x5c]
8000bdf8:	69 61       	ld.w	r1,r4[0x58]
8000bdfa:	6c 20       	ld.w	r0,r6[0x8]
8000bdfc:	79 61       	ld.w	r1,r12[0x58]
8000bdfe:	77 3a       	ld.w	r10,r11[0x4c]
8000be00:	00 00       	add	r0,r0
8000be02:	00 00       	add	r0,r0
8000be04:	20 3d       	sub	sp,12
8000be06:	20 61       	sub	r1,6
8000be08:	74 61       	ld.w	r1,r10[0x18]
8000be0a:	6e 32       	ld.w	r2,r7[0xc]
8000be0c:	28 6d       	sub	sp,-488
8000be0e:	61 67       	ld.w	r7,r0[0x58]
8000be10:	5f 79       	srpl	r9
8000be12:	2c 6d       	sub	sp,-232
8000be14:	61 67       	ld.w	r7,r0[0x58]
8000be16:	5f 78       	srpl	r8
8000be18:	29 20       	sub	r0,-110
8000be1a:	3d 00       	mov	r0,-48
8000be1c:	20 2c       	sub	r12,2
8000be1e:	00 00       	add	r0,r0
8000be20:	0a 00       	add	r0,r5
8000be22:	00 00       	add	r0,r0
8000be24:	46 72       	lddsp	r2,sp[0x19c]
8000be26:	6f 6e       	ld.w	lr,r7[0x58]
8000be28:	74 20       	ld.w	r0,r10[0x8]
8000be2a:	6d 61       	ld.w	r1,r6[0x58]
8000be2c:	67 28       	ld.w	r8,r3[0x48]
8000be2e:	7a 29       	ld.w	r9,sp[0x8]
8000be30:	20 28       	sub	r8,2
8000be32:	2a 31       	sub	r1,-93
8000be34:	30 30       	mov	r0,3
8000be36:	29 3a       	sub	r10,-109
	...

8000be3a <qfInit>:

float front_mag_vect_z;



void qfInit(Quat_Attitude_t *attitude,  float *scalefactor, float *bias) {
8000be3a:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000be3e:	1a 97       	mov	r7,sp
8000be40:	20 5d       	sub	sp,20
8000be42:	fe f6 03 46 	ld.w	r6,pc[838]
8000be46:	1e 26       	rsub	r6,pc
8000be48:	ef 4c ff f4 	st.w	r7[-12],r12
8000be4c:	ef 4b ff f0 	st.w	r7[-16],r11
8000be50:	ef 4a ff ec 	st.w	r7[-20],r10
	uint8_t i;
	float init_angle;

	for (i=0; i<9; i++){
8000be54:	30 08       	mov	r8,0
8000be56:	ef 68 ff fb 	st.b	r7[-5],r8
8000be5a:	c2 c8       	rjmp	8000beb2 <qfInit+0x78>
		attitude->sf[i]=1.0/(float)scalefactor[i];
8000be5c:	ef 35 ff fb 	ld.ub	r5,r7[-5]
8000be60:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000be64:	a3 68       	lsl	r8,0x2
8000be66:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000be6a:	f2 08 00 08 	add	r8,r9,r8
8000be6e:	70 08       	ld.w	r8,r8[0x0]
8000be70:	10 9b       	mov	r11,r8
8000be72:	fc 1c 3f 80 	movh	r12,0x3f80
8000be76:	f0 16 00 08 	mcall	r6[32]
8000be7a:	18 98       	mov	r8,r12
8000be7c:	10 9a       	mov	r10,r8
8000be7e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000be82:	ea c9 ff eb 	sub	r9,r5,-21
8000be86:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		attitude->be[i]=bias[i];
8000be8a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000be8e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000be92:	a3 68       	lsl	r8,0x2
8000be94:	ee fa ff ec 	ld.w	r10,r7[-20]
8000be98:	f4 08 00 08 	add	r8,r10,r8
8000be9c:	70 0a       	ld.w	r10,r8[0x0]
8000be9e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bea2:	2f 49       	sub	r9,-12
8000bea4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

void qfInit(Quat_Attitude_t *attitude,  float *scalefactor, float *bias) {
	uint8_t i;
	float init_angle;

	for (i=0; i<9; i++){
8000bea8:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000beac:	2f f8       	sub	r8,-1
8000beae:	ef 68 ff fb 	st.b	r7[-5],r8
8000beb2:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000beb6:	30 88       	mov	r8,8
8000beb8:	f0 09 18 00 	cp.b	r9,r8
8000bebc:	fe 98 ff d0 	brls	8000be5c <qfInit+0x22>
		attitude->sf[i]=1.0/(float)scalefactor[i];
		attitude->be[i]=bias[i];
		
	}
	for (i=0; i<3; i++){
8000bec0:	30 08       	mov	r8,0
8000bec2:	ef 68 ff fb 	st.b	r7[-5],r8
8000bec6:	c0 e8       	rjmp	8000bee2 <qfInit+0xa8>
		attitude->acc_bf[i]=0.0;
8000bec8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000becc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bed0:	2d 09       	sub	r9,-48
8000bed2:	30 0a       	mov	r10,0
8000bed4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	for (i=0; i<9; i++){
		attitude->sf[i]=1.0/(float)scalefactor[i];
		attitude->be[i]=bias[i];
		
	}
	for (i=0; i<3; i++){
8000bed8:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000bedc:	2f f8       	sub	r8,-1
8000bede:	ef 68 ff fb 	st.b	r7[-5],r8
8000bee2:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000bee6:	30 28       	mov	r8,2
8000bee8:	f0 09 18 00 	cp.b	r9,r8
8000beec:	fe 98 ff ee 	brls	8000bec8 <qfInit+0x8e>

//	attitude->be[3]=-0.03;
//	attitude->be[4]=0.08;
//	attitude->be[5]=0.15;

	attitude->qe.s=1.0;
8000bef0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bef4:	fc 19 3f 80 	movh	r9,0x3f80
8000bef8:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0]=0.0;
8000befa:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000befe:	30 09       	mov	r9,0
8000bf00:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1]=0.0;
8000bf02:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bf06:	30 09       	mov	r9,0
8000bf08:	91 29       	st.w	r8[0x8],r9
	attitude->qe.v[2]=0.0;
8000bf0a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bf0e:	30 09       	mov	r9,0
8000bf10:	91 39       	st.w	r8[0xc],r9

	for(i=0; i<3; i++)
8000bf12:	30 08       	mov	r8,0
8000bf14:	ef 68 ff fb 	st.b	r7[-5],r8
8000bf18:	c2 a8       	rjmp	8000bf6c <qfInit+0x132>
	{
		attitude->mag[i]=((float)attitude->raw_mag_mean[i])*attitude->sf[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET];
8000bf1a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000bf1e:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8000bf22:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bf26:	2d 5a       	sub	r10,-43
8000bf28:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000bf2c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000bf30:	f0 cb ff fa 	sub	r11,r8,-6
8000bf34:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bf38:	2e bb       	sub	r11,-21
8000bf3a:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
8000bf3e:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000bf42:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000bf46:	f0 cb ff fa 	sub	r11,r8,-6
8000bf4a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bf4e:	2f 4b       	sub	r11,-12
8000bf50:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
8000bf54:	e5 a1 0a a8 	cop	cp0,cr10,cr10,cr8,0x42
8000bf58:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bf5c:	2d c9       	sub	r9,-36
8000bf5e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	attitude->qe.s=1.0;
	attitude->qe.v[0]=0.0;
	attitude->qe.v[1]=0.0;
	attitude->qe.v[2]=0.0;

	for(i=0; i<3; i++)
8000bf62:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000bf66:	2f f8       	sub	r8,-1
8000bf68:	ef 68 ff fb 	st.b	r7[-5],r8
8000bf6c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000bf70:	30 28       	mov	r8,2
8000bf72:	f0 09 18 00 	cp.b	r9,r8
8000bf76:	fe 98 ff d2 	brls	8000bf1a <qfInit+0xe0>
	{
		attitude->mag[i]=((float)attitude->raw_mag_mean[i])*attitude->sf[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET];
	}
	
	init_angle = atan2(-attitude->mag[1],attitude->mag[0]);
8000bf7a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bf7e:	f0 f8 00 90 	ld.w	r8,r8[144]
8000bf82:	10 9c       	mov	r12,r8
8000bf84:	f0 16 00 02 	mcall	r6[8]
8000bf88:	14 92       	mov	r2,r10
8000bf8a:	16 93       	mov	r3,r11
8000bf8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bf90:	f0 f8 00 94 	ld.w	r8,r8[148]
8000bf94:	ee 18 80 00 	eorh	r8,0x8000
8000bf98:	10 9c       	mov	r12,r8
8000bf9a:	f0 16 00 02 	mcall	r6[8]
8000bf9e:	04 98       	mov	r8,r2
8000bfa0:	06 99       	mov	r9,r3
8000bfa2:	f0 16 00 52 	mcall	r6[328]
8000bfa6:	14 98       	mov	r8,r10
8000bfa8:	16 99       	mov	r9,r11
8000bfaa:	10 9a       	mov	r10,r8
8000bfac:	12 9b       	mov	r11,r9
8000bfae:	f0 16 00 09 	mcall	r6[36]
8000bfb2:	18 98       	mov	r8,r12
8000bfb4:	ef 48 ff fc 	st.w	r7[-4],r8

	dbg_print("Initial yaw:");
8000bfb8:	fe cc 01 c4 	sub	r12,pc,452
8000bfbc:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(init_angle*100.0,10);
8000bfc0:	ee fc ff fc 	ld.w	r12,r7[-4]
8000bfc4:	f0 16 00 02 	mcall	r6[8]
8000bfc8:	30 08       	mov	r8,0
8000bfca:	fc 19 40 59 	movh	r9,0x4059
8000bfce:	f0 16 00 03 	mcall	r6[12]
8000bfd2:	14 98       	mov	r8,r10
8000bfd4:	16 99       	mov	r9,r11
8000bfd6:	10 9a       	mov	r10,r8
8000bfd8:	12 9b       	mov	r11,r9
8000bfda:	f0 16 00 14 	mcall	r6[80]
8000bfde:	18 98       	mov	r8,r12
8000bfe0:	30 ab       	mov	r11,10
8000bfe2:	10 9c       	mov	r12,r8
8000bfe4:	f0 16 00 04 	mcall	r6[16]
	dbg_print(" = atan2(mag_y,mag_x) =");
8000bfe8:	fe cc 01 e4 	sub	r12,pc,484
8000bfec:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(attitude->mag[1]*100.0,10);
8000bff0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bff4:	f0 f8 00 94 	ld.w	r8,r8[148]
8000bff8:	10 9c       	mov	r12,r8
8000bffa:	f0 16 00 02 	mcall	r6[8]
8000bffe:	30 08       	mov	r8,0
8000c000:	fc 19 40 59 	movh	r9,0x4059
8000c004:	f0 16 00 03 	mcall	r6[12]
8000c008:	14 98       	mov	r8,r10
8000c00a:	16 99       	mov	r9,r11
8000c00c:	10 9a       	mov	r10,r8
8000c00e:	12 9b       	mov	r11,r9
8000c010:	f0 16 00 14 	mcall	r6[80]
8000c014:	18 98       	mov	r8,r12
8000c016:	30 ab       	mov	r11,10
8000c018:	10 9c       	mov	r12,r8
8000c01a:	f0 16 00 04 	mcall	r6[16]
	dbg_print(" ,");
8000c01e:	fe cc 02 02 	sub	r12,pc,514
8000c022:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(attitude->mag[0]*100.0,10);
8000c026:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c02a:	f0 f8 00 90 	ld.w	r8,r8[144]
8000c02e:	10 9c       	mov	r12,r8
8000c030:	f0 16 00 02 	mcall	r6[8]
8000c034:	30 08       	mov	r8,0
8000c036:	fc 19 40 59 	movh	r9,0x4059
8000c03a:	f0 16 00 03 	mcall	r6[12]
8000c03e:	14 98       	mov	r8,r10
8000c040:	16 99       	mov	r9,r11
8000c042:	10 9a       	mov	r10,r8
8000c044:	12 9b       	mov	r11,r9
8000c046:	f0 16 00 14 	mcall	r6[80]
8000c04a:	18 98       	mov	r8,r12
8000c04c:	30 ab       	mov	r11,10
8000c04e:	10 9c       	mov	r12,r8
8000c050:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
8000c054:	fe cc 02 34 	sub	r12,pc,564
8000c058:	f0 16 00 01 	mcall	r6[4]

	front_mag_vect_z = attitude->mag[2];
8000c05c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c060:	f0 f9 00 98 	ld.w	r9,r8[152]
8000c064:	ec f8 03 9c 	ld.w	r8,r6[924]
8000c068:	91 09       	st.w	r8[0x0],r9
	dbg_print("Front mag(z) (*100):");
8000c06a:	fe cc 02 46 	sub	r12,pc,582
8000c06e:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(front_mag_vect_z*100.0,10);
8000c072:	ec f8 03 9c 	ld.w	r8,r6[924]
8000c076:	70 08       	ld.w	r8,r8[0x0]
8000c078:	10 9c       	mov	r12,r8
8000c07a:	f0 16 00 02 	mcall	r6[8]
8000c07e:	30 08       	mov	r8,0
8000c080:	fc 19 40 59 	movh	r9,0x4059
8000c084:	f0 16 00 03 	mcall	r6[12]
8000c088:	14 98       	mov	r8,r10
8000c08a:	16 99       	mov	r9,r11
8000c08c:	10 9a       	mov	r10,r8
8000c08e:	12 9b       	mov	r11,r9
8000c090:	f0 16 00 14 	mcall	r6[80]
8000c094:	18 98       	mov	r8,r12
8000c096:	30 ab       	mov	r11,10
8000c098:	10 9c       	mov	r12,r8
8000c09a:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
8000c09e:	fe cc 02 7e 	sub	r12,pc,638
8000c0a2:	f0 16 00 01 	mcall	r6[4]

	attitude->qe.s = cos(init_angle/2.0);
8000c0a6:	ee fc ff fc 	ld.w	r12,r7[-4]
8000c0aa:	f0 16 00 02 	mcall	r6[8]
8000c0ae:	30 08       	mov	r8,0
8000c0b0:	fc 19 40 00 	movh	r9,0x4000
8000c0b4:	f0 16 00 0c 	mcall	r6[48]
8000c0b8:	14 98       	mov	r8,r10
8000c0ba:	16 99       	mov	r9,r11
8000c0bc:	10 9a       	mov	r10,r8
8000c0be:	12 9b       	mov	r11,r9
8000c0c0:	f0 16 00 ba 	mcall	r6[744]
8000c0c4:	14 98       	mov	r8,r10
8000c0c6:	16 99       	mov	r9,r11
8000c0c8:	10 9a       	mov	r10,r8
8000c0ca:	12 9b       	mov	r11,r9
8000c0cc:	f0 16 00 09 	mcall	r6[36]
8000c0d0:	18 99       	mov	r9,r12
8000c0d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c0d6:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0]=0.0;
8000c0d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c0dc:	30 09       	mov	r9,0
8000c0de:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1]=0.0;
8000c0e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c0e4:	30 09       	mov	r9,0
8000c0e6:	91 29       	st.w	r8[0x8],r9
	//attitude->qe.v[2]=sin((PI + init_angle)/2.0);
	attitude->qe.v[2]=sin(init_angle/2.0);
8000c0e8:	ee fc ff fc 	ld.w	r12,r7[-4]
8000c0ec:	f0 16 00 02 	mcall	r6[8]
8000c0f0:	30 08       	mov	r8,0
8000c0f2:	fc 19 40 00 	movh	r9,0x4000
8000c0f6:	f0 16 00 0c 	mcall	r6[48]
8000c0fa:	14 98       	mov	r8,r10
8000c0fc:	16 99       	mov	r9,r11
8000c0fe:	10 9a       	mov	r10,r8
8000c100:	12 9b       	mov	r11,r9
8000c102:	f0 16 00 b8 	mcall	r6[736]
8000c106:	14 98       	mov	r8,r10
8000c108:	16 99       	mov	r9,r11
8000c10a:	10 9a       	mov	r10,r8
8000c10c:	12 9b       	mov	r11,r9
8000c10e:	f0 16 00 09 	mcall	r6[36]
8000c112:	18 99       	mov	r9,r12
8000c114:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c118:	91 39       	st.w	r8[0xc],r9
	
	attitude->kp=0.09;
8000c11a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c11e:	e0 69 51 ec 	mov	r9,20972
8000c122:	ea 19 3d b8 	orh	r9,0x3db8
8000c126:	f1 49 00 9c 	st.w	r8[156],r9
	attitude->ki=attitude->kp/15.0;
8000c12a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c12e:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000c132:	fc 1b 41 70 	movh	r11,0x4170
8000c136:	10 9c       	mov	r12,r8
8000c138:	f0 16 00 08 	mcall	r6[32]
8000c13c:	18 98       	mov	r8,r12
8000c13e:	10 99       	mov	r9,r8
8000c140:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c144:	f1 49 00 a0 	st.w	r8[160],r9
	
	attitude->kp_mag = 0.1;
8000c148:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c14c:	e0 69 cc cd 	mov	r9,52429
8000c150:	ea 19 3d cc 	orh	r9,0x3dcc
8000c154:	f1 49 00 a4 	st.w	r8[164],r9
	attitude->ki_mag = attitude->kp_mag/15.0;
8000c158:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c15c:	f0 f8 00 a4 	ld.w	r8,r8[164]
8000c160:	fc 1b 41 70 	movh	r11,0x4170
8000c164:	10 9c       	mov	r12,r8
8000c166:	f0 16 00 08 	mcall	r6[32]
8000c16a:	18 98       	mov	r8,r12
8000c16c:	10 99       	mov	r9,r8
8000c16e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c172:	f1 49 00 a8 	st.w	r8[168],r9
	
	attitude->calibration_level=LEVELING;
8000c176:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000c17a:	30 18       	mov	r8,1
8000c17c:	f3 68 00 b8 	st.b	r9[184],r8
	//dt=1.0/samplingrate;
}
8000c180:	2f bd       	sub	sp,-20
8000c182:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000c186:	00 00       	add	r0,r0
8000c188:	80 00       	ld.sh	r0,r0[0x0]
8000c18a:	bc ca       	st.b	lr[0x4],r10

8000c18c <qfilter>:


void qfilter(Quat_Attitude_t *attitude, float *rates, float dt, bool simu_mode){
8000c18c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000c190:	1a 97       	mov	r7,sp
8000c192:	fa cd 01 04 	sub	sp,sp,260
8000c196:	fe f6 0b 0a 	ld.w	r6,pc[2826]
8000c19a:	1e 26       	rsub	r6,pc
8000c19c:	ef 4c ff 18 	st.w	r7[-232],r12
8000c1a0:	ef 4b ff 14 	st.w	r7[-236],r11
8000c1a4:	ef 4a ff 10 	st.w	r7[-240],r10
8000c1a8:	12 98       	mov	r8,r9
8000c1aa:	ef 68 ff 0c 	st.b	r7[-244],r8
	uint8_t i;
	float  omc[3], omc_mag[3], rvc[3], tmp[3], snorm, norm, s_acc_norm, acc_norm, s_mag_norm, mag_norm;
	UQuat_t qed, qtmp1, up, up_bf, qtmp2, qtmp3;
	UQuat_t mag_global, mag_corrected_local;
	UQuat_t front_vec_global = {.s=0.0, .v={1.0, 0.0, 0.0}};
8000c1ae:	30 08       	mov	r8,0
8000c1b0:	ef 48 ff 1c 	st.w	r7[-228],r8
8000c1b4:	fc 18 3f 80 	movh	r8,0x3f80
8000c1b8:	ef 48 ff 20 	st.w	r7[-224],r8
8000c1bc:	30 08       	mov	r8,0
8000c1be:	ef 48 ff 24 	st.w	r7[-220],r8
8000c1c2:	30 08       	mov	r8,0
8000c1c4:	ef 48 ff 28 	st.w	r7[-216],r8
	float kp, kp_mag;
	
	
	for (i=0; i<3; i++){
8000c1c8:	30 08       	mov	r8,0
8000c1ca:	ef 68 ff df 	st.b	r7[-33],r8
8000c1ce:	c0 c9       	rjmp	8000c3e6 <qfilter+0x25a>
		attitude->om[i]  = (1.0-GYRO_LPF)*attitude->om[i]+GYRO_LPF*(((float)rates[GYRO_OFFSET+i]-attitude->be[GYRO_OFFSET+i])*attitude->sf[i]);
8000c1d0:	ef 35 ff df 	ld.ub	r5,r7[-33]
8000c1d4:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c1d8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c1dc:	2e 29       	sub	r9,-30
8000c1de:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000c1e2:	10 9c       	mov	r12,r8
8000c1e4:	f0 16 00 02 	mcall	r6[8]
8000c1e8:	e0 68 cc cd 	mov	r8,52429
8000c1ec:	ea 18 cc cc 	orh	r8,0xcccc
8000c1f0:	e0 69 cc cc 	mov	r9,52428
8000c1f4:	ea 19 3f ec 	orh	r9,0x3fec
8000c1f8:	f0 16 00 03 	mcall	r6[12]
8000c1fc:	14 98       	mov	r8,r10
8000c1fe:	16 99       	mov	r9,r11
8000c200:	10 92       	mov	r2,r8
8000c202:	12 93       	mov	r3,r9
8000c204:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c208:	a3 68       	lsl	r8,0x2
8000c20a:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000c20e:	f2 08 00 08 	add	r8,r9,r8
8000c212:	70 09       	ld.w	r9,r8[0x0]
8000c214:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000c218:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c21c:	2f 4a       	sub	r10,-12
8000c21e:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c222:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000c226:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000c22a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c22e:	2e ba       	sub	r10,-21
8000c230:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c234:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c238:	10 9c       	mov	r12,r8
8000c23a:	f0 16 00 02 	mcall	r6[8]
8000c23e:	e0 68 99 9a 	mov	r8,39322
8000c242:	ea 18 99 99 	orh	r8,0x9999
8000c246:	e0 69 99 99 	mov	r9,39321
8000c24a:	ea 19 3f b9 	orh	r9,0x3fb9
8000c24e:	f0 16 00 03 	mcall	r6[12]
8000c252:	14 98       	mov	r8,r10
8000c254:	16 99       	mov	r9,r11
8000c256:	04 9a       	mov	r10,r2
8000c258:	06 9b       	mov	r11,r3
8000c25a:	f0 16 00 05 	mcall	r6[20]
8000c25e:	14 98       	mov	r8,r10
8000c260:	16 99       	mov	r9,r11
8000c262:	10 9a       	mov	r10,r8
8000c264:	12 9b       	mov	r11,r9
8000c266:	f0 16 00 09 	mcall	r6[36]
8000c26a:	18 9a       	mov	r10,r12
8000c26c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c270:	ea c9 ff e2 	sub	r9,r5,-30
8000c274:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		attitude->a[i]   = (1.0-ACC_LPF)*attitude->a[i]+ACC_LPF*(((float)rates[i+ACC_OFFSET]-attitude->be[i+ACC_OFFSET])*attitude->sf[i+ACC_OFFSET]);
8000c278:	ef 35 ff df 	ld.ub	r5,r7[-33]
8000c27c:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c280:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c284:	2d f9       	sub	r9,-33
8000c286:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000c28a:	10 9c       	mov	r12,r8
8000c28c:	f0 16 00 02 	mcall	r6[8]
8000c290:	e0 68 8f 5c 	mov	r8,36700
8000c294:	ea 18 f5 c2 	orh	r8,0xf5c2
8000c298:	e0 69 5c 28 	mov	r9,23592
8000c29c:	ea 19 3f ef 	orh	r9,0x3fef
8000c2a0:	f0 16 00 03 	mcall	r6[12]
8000c2a4:	14 98       	mov	r8,r10
8000c2a6:	16 99       	mov	r9,r11
8000c2a8:	10 92       	mov	r2,r8
8000c2aa:	12 93       	mov	r3,r9
8000c2ac:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c2b0:	2f d8       	sub	r8,-3
8000c2b2:	a3 68       	lsl	r8,0x2
8000c2b4:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000c2b8:	f2 08 00 08 	add	r8,r9,r8
8000c2bc:	70 09       	ld.w	r9,r8[0x0]
8000c2be:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c2c2:	f0 ca ff fd 	sub	r10,r8,-3
8000c2c6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c2ca:	2f 4a       	sub	r10,-12
8000c2cc:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c2d0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000c2d4:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c2d8:	f0 ca ff fd 	sub	r10,r8,-3
8000c2dc:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c2e0:	2e ba       	sub	r10,-21
8000c2e2:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c2e6:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c2ea:	10 9c       	mov	r12,r8
8000c2ec:	f0 16 00 02 	mcall	r6[8]
8000c2f0:	e0 68 14 7b 	mov	r8,5243
8000c2f4:	ea 18 47 ae 	orh	r8,0x47ae
8000c2f8:	e0 69 7a e1 	mov	r9,31457
8000c2fc:	ea 19 3f 94 	orh	r9,0x3f94
8000c300:	f0 16 00 03 	mcall	r6[12]
8000c304:	14 98       	mov	r8,r10
8000c306:	16 99       	mov	r9,r11
8000c308:	04 9a       	mov	r10,r2
8000c30a:	06 9b       	mov	r11,r3
8000c30c:	f0 16 00 05 	mcall	r6[20]
8000c310:	14 98       	mov	r8,r10
8000c312:	16 99       	mov	r9,r11
8000c314:	10 9a       	mov	r10,r8
8000c316:	12 9b       	mov	r11,r9
8000c318:	f0 16 00 09 	mcall	r6[36]
8000c31c:	18 9a       	mov	r10,r12
8000c31e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c322:	ea c9 ff df 	sub	r9,r5,-33
8000c326:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		attitude->mag[i] = (1.0-MAG_LPF)*attitude->mag[i]+MAG_LPF*(((float)rates[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET])*attitude->sf[i+COMPASS_OFFSET]);
8000c32a:	ef 35 ff df 	ld.ub	r5,r7[-33]
8000c32e:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c332:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c336:	2d c9       	sub	r9,-36
8000c338:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000c33c:	10 9c       	mov	r12,r8
8000c33e:	f0 16 00 02 	mcall	r6[8]
8000c342:	e0 68 cc cd 	mov	r8,52429
8000c346:	ea 18 cc cc 	orh	r8,0xcccc
8000c34a:	e0 69 cc cc 	mov	r9,52428
8000c34e:	ea 19 3f ec 	orh	r9,0x3fec
8000c352:	f0 16 00 03 	mcall	r6[12]
8000c356:	14 98       	mov	r8,r10
8000c358:	16 99       	mov	r9,r11
8000c35a:	10 92       	mov	r2,r8
8000c35c:	12 93       	mov	r3,r9
8000c35e:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c362:	2f a8       	sub	r8,-6
8000c364:	a3 68       	lsl	r8,0x2
8000c366:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000c36a:	f2 08 00 08 	add	r8,r9,r8
8000c36e:	70 09       	ld.w	r9,r8[0x0]
8000c370:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c374:	f0 ca ff fa 	sub	r10,r8,-6
8000c378:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c37c:	2f 4a       	sub	r10,-12
8000c37e:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c382:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000c386:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c38a:	f0 ca ff fa 	sub	r10,r8,-6
8000c38e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c392:	2e ba       	sub	r10,-21
8000c394:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c398:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c39c:	10 9c       	mov	r12,r8
8000c39e:	f0 16 00 02 	mcall	r6[8]
8000c3a2:	e0 68 99 9a 	mov	r8,39322
8000c3a6:	ea 18 99 99 	orh	r8,0x9999
8000c3aa:	e0 69 99 99 	mov	r9,39321
8000c3ae:	ea 19 3f b9 	orh	r9,0x3fb9
8000c3b2:	f0 16 00 03 	mcall	r6[12]
8000c3b6:	14 98       	mov	r8,r10
8000c3b8:	16 99       	mov	r9,r11
8000c3ba:	04 9a       	mov	r10,r2
8000c3bc:	06 9b       	mov	r11,r3
8000c3be:	f0 16 00 05 	mcall	r6[20]
8000c3c2:	14 98       	mov	r8,r10
8000c3c4:	16 99       	mov	r9,r11
8000c3c6:	10 9a       	mov	r10,r8
8000c3c8:	12 9b       	mov	r11,r9
8000c3ca:	f0 16 00 09 	mcall	r6[36]
8000c3ce:	18 9a       	mov	r10,r12
8000c3d0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c3d4:	ea c9 ff dc 	sub	r9,r5,-36
8000c3d8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	UQuat_t mag_global, mag_corrected_local;
	UQuat_t front_vec_global = {.s=0.0, .v={1.0, 0.0, 0.0}};
	float kp, kp_mag;
	
	
	for (i=0; i<3; i++){
8000c3dc:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c3e0:	2f f8       	sub	r8,-1
8000c3e2:	ef 68 ff df 	st.b	r7[-33],r8
8000c3e6:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c3ea:	30 28       	mov	r8,2
8000c3ec:	f0 09 18 00 	cp.b	r9,r8
8000c3f0:	fe 98 fe f0 	brls	8000c1d0 <qfilter+0x44>
		attitude->a[i]   = (1.0-ACC_LPF)*attitude->a[i]+ACC_LPF*(((float)rates[i+ACC_OFFSET]-attitude->be[i+ACC_OFFSET])*attitude->sf[i+ACC_OFFSET]);
		attitude->mag[i] = (1.0-MAG_LPF)*attitude->mag[i]+MAG_LPF*(((float)rates[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET])*attitude->sf[i+COMPASS_OFFSET]);
	}

	// up_bf = qe^-1 *(0,0,0,-1) * qe
	up.s=0; up.v[0]=UPVECTOR_X; up.v[1]=UPVECTOR_Y; up.v[2]=UPVECTOR_Z;
8000c3f4:	30 08       	mov	r8,0
8000c3f6:	ef 48 ff 7c 	st.w	r7[-132],r8
8000c3fa:	30 08       	mov	r8,0
8000c3fc:	ef 48 ff 80 	st.w	r7[-128],r8
8000c400:	30 08       	mov	r8,0
8000c402:	ef 48 ff 84 	st.w	r7[-124],r8
8000c406:	fc 18 bf 80 	movh	r8,0xbf80
8000c40a:	ef 48 ff 88 	st.w	r7[-120],r8
	up_bf = quat_global_to_local(attitude->qe, up);
8000c40e:	ee ca 00 94 	sub	r10,r7,148
8000c412:	20 4d       	sub	sp,16
8000c414:	1a 98       	mov	r8,sp
8000c416:	ee c9 00 84 	sub	r9,r7,132
8000c41a:	20 08       	sub	r8,0
8000c41c:	20 09       	sub	r9,0
8000c41e:	72 0b       	ld.w	r11,r9[0x0]
8000c420:	91 0b       	st.w	r8[0x0],r11
8000c422:	72 1b       	ld.w	r11,r9[0x4]
8000c424:	91 1b       	st.w	r8[0x4],r11
8000c426:	72 2b       	ld.w	r11,r9[0x8]
8000c428:	91 2b       	st.w	r8[0x8],r11
8000c42a:	72 39       	ld.w	r9,r9[0xc]
8000c42c:	91 39       	st.w	r8[0xc],r9
8000c42e:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000c432:	20 4d       	sub	sp,16
8000c434:	1a 98       	mov	r8,sp
8000c436:	20 08       	sub	r8,0
8000c438:	20 09       	sub	r9,0
8000c43a:	72 0b       	ld.w	r11,r9[0x0]
8000c43c:	91 0b       	st.w	r8[0x0],r11
8000c43e:	72 1b       	ld.w	r11,r9[0x4]
8000c440:	91 1b       	st.w	r8[0x4],r11
8000c442:	72 2b       	ld.w	r11,r9[0x8]
8000c444:	91 2b       	st.w	r8[0x8],r11
8000c446:	72 39       	ld.w	r9,r9[0xc]
8000c448:	91 39       	st.w	r8[0xc],r9
8000c44a:	14 9c       	mov	r12,r10
8000c44c:	fe b0 fb 2c 	rcall	8000baa4 <quat_global_to_local>
8000c450:	2f 8d       	sub	sp,-32
	
	// calculate norm of acceleration vector
	s_acc_norm=attitude->a[0]*attitude->a[0]+attitude->a[1]*attitude->a[1]+attitude->a[2]*attitude->a[2];
8000c452:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c456:	f0 f9 00 84 	ld.w	r9,r8[132]
8000c45a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c45e:	f0 f8 00 84 	ld.w	r8,r8[132]
8000c462:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c466:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c46a:	f0 fa 00 88 	ld.w	r10,r8[136]
8000c46e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c472:	f0 f8 00 88 	ld.w	r8,r8[136]
8000c476:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c47a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c47e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c482:	f0 fa 00 8c 	ld.w	r10,r8[140]
8000c486:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c48a:	f0 f8 00 8c 	ld.w	r8,r8[140]
8000c48e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c492:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000c496:	ef 48 ff e8 	st.w	r7[-24],r8
	if ((s_acc_norm>0.7*0.7)&&(s_acc_norm<1.3*1.3)) {
8000c49a:	ee fc ff e8 	ld.w	r12,r7[-24]
8000c49e:	f0 16 00 02 	mcall	r6[8]
8000c4a2:	14 98       	mov	r8,r10
8000c4a4:	16 99       	mov	r9,r11
8000c4a6:	30 05       	mov	r5,0
8000c4a8:	e0 6a 8f 5b 	mov	r10,36699
8000c4ac:	ea 1a f5 c2 	orh	r10,0xf5c2
8000c4b0:	e0 6b 5c 28 	mov	r11,23592
8000c4b4:	ea 1b 3f df 	orh	r11,0x3fdf
8000c4b8:	f0 16 00 1d 	mcall	r6[116]
8000c4bc:	18 98       	mov	r8,r12
8000c4be:	58 08       	cp.w	r8,0
8000c4c0:	c0 20       	breq	8000c4c4 <qfilter+0x338>
8000c4c2:	30 15       	mov	r5,1
8000c4c4:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000c4c8:	c7 30       	breq	8000c5ae <qfilter+0x422>
8000c4ca:	ee fc ff e8 	ld.w	r12,r7[-24]
8000c4ce:	f0 16 00 02 	mcall	r6[8]
8000c4d2:	30 05       	mov	r5,0
8000c4d4:	e0 68 d7 0b 	mov	r8,55051
8000c4d8:	ea 18 70 a3 	orh	r8,0x70a3
8000c4dc:	e0 69 0a 3d 	mov	r9,2621
8000c4e0:	ea 19 3f fb 	orh	r9,0x3ffb
8000c4e4:	f0 16 00 1d 	mcall	r6[116]
8000c4e8:	18 98       	mov	r8,r12
8000c4ea:	58 08       	cp.w	r8,0
8000c4ec:	c0 20       	breq	8000c4f0 <qfilter+0x364>
8000c4ee:	30 15       	mov	r5,1
8000c4f0:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000c4f4:	c5 d0       	breq	8000c5ae <qfilter+0x422>
		// approximate square root by running 2 iterations of newton method
		acc_norm=fast_sqrt(s_acc_norm);
8000c4f6:	ee fc ff e8 	ld.w	r12,r7[-24]
8000c4fa:	fe b0 fb d1 	rcall	8000bc9c <fast_sqrt>
8000c4fe:	18 98       	mov	r8,r12
8000c500:	ef 48 ff ec 	st.w	r7[-20],r8

		tmp[0]=attitude->a[0]/acc_norm;
8000c504:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c508:	f0 f8 00 84 	ld.w	r8,r8[132]
8000c50c:	ee fb ff ec 	ld.w	r11,r7[-20]
8000c510:	10 9c       	mov	r12,r8
8000c512:	f0 16 00 08 	mcall	r6[32]
8000c516:	18 98       	mov	r8,r12
8000c518:	ef 48 ff ac 	st.w	r7[-84],r8
		tmp[1]=attitude->a[1]/acc_norm;
8000c51c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c520:	f0 f8 00 88 	ld.w	r8,r8[136]
8000c524:	ee fb ff ec 	ld.w	r11,r7[-20]
8000c528:	10 9c       	mov	r12,r8
8000c52a:	f0 16 00 08 	mcall	r6[32]
8000c52e:	18 98       	mov	r8,r12
8000c530:	ef 48 ff b0 	st.w	r7[-80],r8
		tmp[2]=attitude->a[2]/acc_norm;
8000c534:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c538:	f0 f8 00 8c 	ld.w	r8,r8[140]
8000c53c:	ee fb ff ec 	ld.w	r11,r7[-20]
8000c540:	10 9c       	mov	r12,r8
8000c542:	f0 16 00 08 	mcall	r6[32]
8000c546:	18 98       	mov	r8,r12
8000c548:	ef 48 ff b4 	st.w	r7[-76],r8
		// omc = a x up_bf.v
		CROSS(tmp, up_bf.v, omc);
8000c54c:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000c550:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000c554:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c558:	ee fa ff b4 	ld.w	r10,r7[-76]
8000c55c:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000c560:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c564:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000c568:	ef 48 ff d0 	st.w	r7[-48],r8
8000c56c:	ee f9 ff b4 	ld.w	r9,r7[-76]
8000c570:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000c574:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c578:	ee fa ff ac 	ld.w	r10,r7[-84]
8000c57c:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000c580:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c584:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000c588:	ef 48 ff d4 	st.w	r7[-44],r8
8000c58c:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000c590:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000c594:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c598:	ee fa ff b0 	ld.w	r10,r7[-80]
8000c59c:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000c5a0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c5a4:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000c5a8:	ef 48 ff d8 	st.w	r7[-40],r8
	up.s=0; up.v[0]=UPVECTOR_X; up.v[1]=UPVECTOR_Y; up.v[2]=UPVECTOR_Z;
	up_bf = quat_global_to_local(attitude->qe, up);
	
	// calculate norm of acceleration vector
	s_acc_norm=attitude->a[0]*attitude->a[0]+attitude->a[1]*attitude->a[1]+attitude->a[2]*attitude->a[2];
	if ((s_acc_norm>0.7*0.7)&&(s_acc_norm<1.3*1.3)) {
8000c5ac:	c0 a8       	rjmp	8000c5c0 <qfilter+0x434>
		tmp[1]=attitude->a[1]/acc_norm;
		tmp[2]=attitude->a[2]/acc_norm;
		// omc = a x up_bf.v
		CROSS(tmp, up_bf.v, omc);
	} else {
		omc[0]=0;		omc[1]=0; 		omc[2]=0;
8000c5ae:	30 08       	mov	r8,0
8000c5b0:	ef 48 ff d0 	st.w	r7[-48],r8
8000c5b4:	30 08       	mov	r8,0
8000c5b6:	ef 48 ff d4 	st.w	r7[-44],r8
8000c5ba:	30 08       	mov	r8,0
8000c5bc:	ef 48 ff d8 	st.w	r7[-40],r8
	}

	// Heading computation
	// transfer 
	qtmp1=quat_from_vector(attitude->mag); 
8000c5c0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c5c4:	f0 c9 ff 70 	sub	r9,r8,-144
8000c5c8:	ee c8 01 04 	sub	r8,r7,260
8000c5cc:	12 9b       	mov	r11,r9
8000c5ce:	10 9c       	mov	r12,r8
8000c5d0:	fe b0 f9 56 	rcall	8000b87c <quat_from_vector>
8000c5d4:	ee c8 00 74 	sub	r8,r7,116
8000c5d8:	ee c9 01 04 	sub	r9,r7,260
8000c5dc:	20 08       	sub	r8,0
8000c5de:	20 09       	sub	r9,0
8000c5e0:	72 0a       	ld.w	r10,r9[0x0]
8000c5e2:	91 0a       	st.w	r8[0x0],r10
8000c5e4:	72 1a       	ld.w	r10,r9[0x4]
8000c5e6:	91 1a       	st.w	r8[0x4],r10
8000c5e8:	72 2a       	ld.w	r10,r9[0x8]
8000c5ea:	91 2a       	st.w	r8[0x8],r10
8000c5ec:	72 39       	ld.w	r9,r9[0xc]
8000c5ee:	91 39       	st.w	r8[0xc],r9
	mag_global = quat_local_to_global(attitude->qe, qtmp1);
8000c5f0:	ee ca 00 c4 	sub	r10,r7,196
8000c5f4:	20 4d       	sub	sp,16
8000c5f6:	1a 98       	mov	r8,sp
8000c5f8:	ee c9 00 74 	sub	r9,r7,116
8000c5fc:	20 08       	sub	r8,0
8000c5fe:	20 09       	sub	r9,0
8000c600:	72 0b       	ld.w	r11,r9[0x0]
8000c602:	91 0b       	st.w	r8[0x0],r11
8000c604:	72 1b       	ld.w	r11,r9[0x4]
8000c606:	91 1b       	st.w	r8[0x4],r11
8000c608:	72 2b       	ld.w	r11,r9[0x8]
8000c60a:	91 2b       	st.w	r8[0x8],r11
8000c60c:	72 39       	ld.w	r9,r9[0xc]
8000c60e:	91 39       	st.w	r8[0xc],r9
8000c610:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000c614:	20 4d       	sub	sp,16
8000c616:	1a 98       	mov	r8,sp
8000c618:	20 08       	sub	r8,0
8000c61a:	20 09       	sub	r9,0
8000c61c:	72 0b       	ld.w	r11,r9[0x0]
8000c61e:	91 0b       	st.w	r8[0x0],r11
8000c620:	72 1b       	ld.w	r11,r9[0x4]
8000c622:	91 1b       	st.w	r8[0x4],r11
8000c624:	72 2b       	ld.w	r11,r9[0x8]
8000c626:	91 2b       	st.w	r8[0x8],r11
8000c628:	72 39       	ld.w	r9,r9[0xc]
8000c62a:	91 39       	st.w	r8[0xc],r9
8000c62c:	14 9c       	mov	r12,r10
8000c62e:	fe b0 fa b9 	rcall	8000bba0 <quat_local_to_global>
8000c632:	2f 8d       	sub	sp,-32
	//QI(attitude->qe,qtmp4);
	//QMUL(qtmp4, front_bf, qtmp5);
	//QMUL(qtmp5, attitude->qe, front_bf);
	
	// calculate norm of compass vector
	s_mag_norm=SQR(mag_global.v[0])+SQR(mag_global.v[1])+SQR(mag_global.v[2]);
8000c634:	ee f9 ff 40 	ld.w	r9,r7[-192]
8000c638:	ee f8 ff 40 	ld.w	r8,r7[-192]
8000c63c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c640:	ee fa ff 44 	ld.w	r10,r7[-188]
8000c644:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000c648:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c64c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c650:	ee fa ff 48 	ld.w	r10,r7[-184]
8000c654:	ee f8 ff 48 	ld.w	r8,r7[-184]
8000c658:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c65c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000c660:	ef 48 ff f0 	st.w	r7[-16],r8
	if ((s_mag_norm>0.4*0.4)&&(s_mag_norm<1.8*1.8)) 
8000c664:	ee fc ff f0 	ld.w	r12,r7[-16]
8000c668:	f0 16 00 02 	mcall	r6[8]
8000c66c:	14 98       	mov	r8,r10
8000c66e:	16 99       	mov	r9,r11
8000c670:	30 05       	mov	r5,0
8000c672:	e0 6a 14 7c 	mov	r10,5244
8000c676:	ea 1a 47 ae 	orh	r10,0x47ae
8000c67a:	e0 6b 7a e1 	mov	r11,31457
8000c67e:	ea 1b 3f c4 	orh	r11,0x3fc4
8000c682:	f0 16 00 1d 	mcall	r6[116]
8000c686:	18 98       	mov	r8,r12
8000c688:	58 08       	cp.w	r8,0
8000c68a:	c0 20       	breq	8000c68e <qfilter+0x502>
8000c68c:	30 15       	mov	r5,1
8000c68e:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000c692:	e0 80 00 c2 	breq	8000c816 <qfilter+0x68a>
8000c696:	ee fc ff f0 	ld.w	r12,r7[-16]
8000c69a:	f0 16 00 02 	mcall	r6[8]
8000c69e:	30 05       	mov	r5,0
8000c6a0:	e0 68 51 ec 	mov	r8,20972
8000c6a4:	ea 18 1e b8 	orh	r8,0x1eb8
8000c6a8:	e0 69 eb 85 	mov	r9,60293
8000c6ac:	ea 19 40 09 	orh	r9,0x4009
8000c6b0:	f0 16 00 1d 	mcall	r6[116]
8000c6b4:	18 98       	mov	r8,r12
8000c6b6:	58 08       	cp.w	r8,0
8000c6b8:	c0 20       	breq	8000c6bc <qfilter+0x530>
8000c6ba:	30 15       	mov	r5,1
8000c6bc:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000c6c0:	e0 80 00 ab 	breq	8000c816 <qfilter+0x68a>
	{
		mag_norm=fast_sqrt(s_mag_norm);
8000c6c4:	ee fc ff f0 	ld.w	r12,r7[-16]
8000c6c8:	fe b0 fa ea 	rcall	8000bc9c <fast_sqrt>
8000c6cc:	18 98       	mov	r8,r12
8000c6ce:	ef 48 ff f4 	st.w	r7[-12],r8

		mag_global.v[0]/=mag_norm;
8000c6d2:	ee f8 ff 40 	ld.w	r8,r7[-192]
8000c6d6:	ee fb ff f4 	ld.w	r11,r7[-12]
8000c6da:	10 9c       	mov	r12,r8
8000c6dc:	f0 16 00 08 	mcall	r6[32]
8000c6e0:	18 98       	mov	r8,r12
8000c6e2:	ef 48 ff 40 	st.w	r7[-192],r8
		mag_global.v[1]/=mag_norm;
8000c6e6:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000c6ea:	ee fb ff f4 	ld.w	r11,r7[-12]
8000c6ee:	10 9c       	mov	r12,r8
8000c6f0:	f0 16 00 08 	mcall	r6[32]
8000c6f4:	18 98       	mov	r8,r12
8000c6f6:	ef 48 ff 44 	st.w	r7[-188],r8
		mag_global.v[2]=0.0;   // set z component in global frame to 0
8000c6fa:	30 08       	mov	r8,0
8000c6fc:	ef 48 ff 48 	st.w	r7[-184],r8

		// transfer magneto vector back to body frame 
		attitude->north_vec=quat_global_to_local(attitude->qe, front_vec_global);		
8000c700:	ee f5 ff 18 	ld.w	r5,r7[-232]
8000c704:	ee ca 01 04 	sub	r10,r7,260
8000c708:	20 4d       	sub	sp,16
8000c70a:	1a 98       	mov	r8,sp
8000c70c:	ee c9 00 e4 	sub	r9,r7,228
8000c710:	20 08       	sub	r8,0
8000c712:	20 09       	sub	r9,0
8000c714:	72 0b       	ld.w	r11,r9[0x0]
8000c716:	91 0b       	st.w	r8[0x0],r11
8000c718:	72 1b       	ld.w	r11,r9[0x4]
8000c71a:	91 1b       	st.w	r8[0x4],r11
8000c71c:	72 2b       	ld.w	r11,r9[0x8]
8000c71e:	91 2b       	st.w	r8[0x8],r11
8000c720:	72 39       	ld.w	r9,r9[0xc]
8000c722:	91 39       	st.w	r8[0xc],r9
8000c724:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000c728:	20 4d       	sub	sp,16
8000c72a:	1a 98       	mov	r8,sp
8000c72c:	20 08       	sub	r8,0
8000c72e:	20 09       	sub	r9,0
8000c730:	72 0b       	ld.w	r11,r9[0x0]
8000c732:	91 0b       	st.w	r8[0x0],r11
8000c734:	72 1b       	ld.w	r11,r9[0x4]
8000c736:	91 1b       	st.w	r8[0x4],r11
8000c738:	72 2b       	ld.w	r11,r9[0x8]
8000c73a:	91 2b       	st.w	r8[0x8],r11
8000c73c:	72 39       	ld.w	r9,r9[0xc]
8000c73e:	91 39       	st.w	r8[0xc],r9
8000c740:	14 9c       	mov	r12,r10
8000c742:	fe b0 f9 b1 	rcall	8000baa4 <quat_global_to_local>
8000c746:	2f 8d       	sub	sp,-32
8000c748:	ea c8 ff e0 	sub	r8,r5,-32
8000c74c:	ee c9 01 04 	sub	r9,r7,260
8000c750:	20 08       	sub	r8,0
8000c752:	20 09       	sub	r9,0
8000c754:	72 0a       	ld.w	r10,r9[0x0]
8000c756:	91 0a       	st.w	r8[0x0],r10
8000c758:	72 1a       	ld.w	r10,r9[0x4]
8000c75a:	91 1a       	st.w	r8[0x4],r10
8000c75c:	72 2a       	ld.w	r10,r9[0x8]
8000c75e:	91 2a       	st.w	r8[0x8],r10
8000c760:	72 39       	ld.w	r9,r9[0xc]
8000c762:	91 39       	st.w	r8[0xc],r9
		mag_corrected_local=quat_global_to_local(attitude->qe, mag_global);		
8000c764:	ee ca 00 d4 	sub	r10,r7,212
8000c768:	20 4d       	sub	sp,16
8000c76a:	1a 98       	mov	r8,sp
8000c76c:	ee c9 00 c4 	sub	r9,r7,196
8000c770:	20 08       	sub	r8,0
8000c772:	20 09       	sub	r9,0
8000c774:	72 0b       	ld.w	r11,r9[0x0]
8000c776:	91 0b       	st.w	r8[0x0],r11
8000c778:	72 1b       	ld.w	r11,r9[0x4]
8000c77a:	91 1b       	st.w	r8[0x4],r11
8000c77c:	72 2b       	ld.w	r11,r9[0x8]
8000c77e:	91 2b       	st.w	r8[0x8],r11
8000c780:	72 39       	ld.w	r9,r9[0xc]
8000c782:	91 39       	st.w	r8[0xc],r9
8000c784:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000c788:	20 4d       	sub	sp,16
8000c78a:	1a 98       	mov	r8,sp
8000c78c:	20 08       	sub	r8,0
8000c78e:	20 09       	sub	r9,0
8000c790:	72 0b       	ld.w	r11,r9[0x0]
8000c792:	91 0b       	st.w	r8[0x0],r11
8000c794:	72 1b       	ld.w	r11,r9[0x4]
8000c796:	91 1b       	st.w	r8[0x4],r11
8000c798:	72 2b       	ld.w	r11,r9[0x8]
8000c79a:	91 2b       	st.w	r8[0x8],r11
8000c79c:	72 39       	ld.w	r9,r9[0xc]
8000c79e:	91 39       	st.w	r8[0xc],r9
8000c7a0:	14 9c       	mov	r12,r10
8000c7a2:	fe b0 f9 81 	rcall	8000baa4 <quat_global_to_local>
8000c7a6:	2f 8d       	sub	sp,-32
		// omc = a x up_bf.v
		CROSS(mag_corrected_local.v, attitude->north_vec.v,  omc_mag);
8000c7a8:	ee f9 ff 34 	ld.w	r9,r7[-204]
8000c7ac:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c7b0:	70 b8       	ld.w	r8,r8[0x2c]
8000c7b2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c7b6:	ee fa ff 38 	ld.w	r10,r7[-200]
8000c7ba:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c7be:	70 a8       	ld.w	r8,r8[0x28]
8000c7c0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c7c4:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000c7c8:	ef 48 ff c4 	st.w	r7[-60],r8
8000c7cc:	ee f9 ff 38 	ld.w	r9,r7[-200]
8000c7d0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c7d4:	70 98       	ld.w	r8,r8[0x24]
8000c7d6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c7da:	ee fa ff 30 	ld.w	r10,r7[-208]
8000c7de:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c7e2:	70 b8       	ld.w	r8,r8[0x2c]
8000c7e4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c7e8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000c7ec:	ef 48 ff c8 	st.w	r7[-56],r8
8000c7f0:	ee f9 ff 30 	ld.w	r9,r7[-208]
8000c7f4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c7f8:	70 a8       	ld.w	r8,r8[0x28]
8000c7fa:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c7fe:	ee fa ff 34 	ld.w	r10,r7[-204]
8000c802:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c806:	70 98       	ld.w	r8,r8[0x24]
8000c808:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c80c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000c810:	ef 48 ff cc 	st.w	r7[-52],r8
	//QMUL(qtmp4, front_bf, qtmp5);
	//QMUL(qtmp5, attitude->qe, front_bf);
	
	// calculate norm of compass vector
	s_mag_norm=SQR(mag_global.v[0])+SQR(mag_global.v[1])+SQR(mag_global.v[2]);
	if ((s_mag_norm>0.4*0.4)&&(s_mag_norm<1.8*1.8)) 
8000c814:	c0 a8       	rjmp	8000c828 <qfilter+0x69c>
		mag_corrected_local=quat_global_to_local(attitude->qe, mag_global);		
		// omc = a x up_bf.v
		CROSS(mag_corrected_local.v, attitude->north_vec.v,  omc_mag);
		
	} else {
		omc_mag[0]=0;		omc_mag[1]=0; 		omc_mag[2]=0;
8000c816:	30 08       	mov	r8,0
8000c818:	ef 48 ff c4 	st.w	r7[-60],r8
8000c81c:	30 08       	mov	r8,0
8000c81e:	ef 48 ff c8 	st.w	r7[-56],r8
8000c822:	30 08       	mov	r8,0
8000c824:	ef 48 ff cc 	st.w	r7[-52],r8
	}

	for (i=0; i<3; i++){
8000c828:	30 08       	mov	r8,0
8000c82a:	ef 68 ff df 	st.b	r7[-33],r8
8000c82e:	c3 48       	rjmp	8000c896 <qfilter+0x70a>
		qtmp1.v[i] = attitude->om[i] +attitude->kp*omc[i] +attitude->kp_mag*omc_mag[i];
8000c830:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000c834:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c838:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c83c:	2e 29       	sub	r9,-30
8000c83e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000c842:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c846:	f0 fb 00 9c 	ld.w	r11,r8[156]
8000c84a:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c84e:	a3 68       	lsl	r8,0x2
8000c850:	ee 08 00 08 	add	r8,r7,r8
8000c854:	f0 f8 ff d0 	ld.w	r8,r8[-48]
8000c858:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000c85c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c860:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c864:	f0 fb 00 a4 	ld.w	r11,r8[164]
8000c868:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c86c:	a3 68       	lsl	r8,0x2
8000c86e:	ee 08 00 08 	add	r8,r7,r8
8000c872:	f0 f8 ff c4 	ld.w	r8,r8[-60]
8000c876:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000c87a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c87e:	f4 c8 ff ff 	sub	r8,r10,-1
8000c882:	a3 68       	lsl	r8,0x2
8000c884:	ee 08 00 08 	add	r8,r7,r8
8000c888:	f1 49 ff 8c 	st.w	r8[-116],r9
		
	} else {
		omc_mag[0]=0;		omc_mag[1]=0; 		omc_mag[2]=0;
	}

	for (i=0; i<3; i++){
8000c88c:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c890:	2f f8       	sub	r8,-1
8000c892:	ef 68 ff df 	st.b	r7[-33],r8
8000c896:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c89a:	30 28       	mov	r8,2
8000c89c:	f0 09 18 00 	cp.b	r9,r8
8000c8a0:	fe 98 ff c8 	brls	8000c830 <qfilter+0x6a4>
		qtmp1.v[i] = attitude->om[i] +attitude->kp*omc[i] +attitude->kp_mag*omc_mag[i];
	}
	qtmp1.s=0;
8000c8a4:	30 08       	mov	r8,0
8000c8a6:	ef 48 ff 8c 	st.w	r7[-116],r8

	// apply step rotation with corrections
	qed = quat_multi(attitude->qe,qtmp1);
8000c8aa:	ee ca 00 64 	sub	r10,r7,100
8000c8ae:	20 4d       	sub	sp,16
8000c8b0:	1a 98       	mov	r8,sp
8000c8b2:	ee c9 00 74 	sub	r9,r7,116
8000c8b6:	20 08       	sub	r8,0
8000c8b8:	20 09       	sub	r9,0
8000c8ba:	72 0b       	ld.w	r11,r9[0x0]
8000c8bc:	91 0b       	st.w	r8[0x0],r11
8000c8be:	72 1b       	ld.w	r11,r9[0x4]
8000c8c0:	91 1b       	st.w	r8[0x4],r11
8000c8c2:	72 2b       	ld.w	r11,r9[0x8]
8000c8c4:	91 2b       	st.w	r8[0x8],r11
8000c8c6:	72 39       	ld.w	r9,r9[0xc]
8000c8c8:	91 39       	st.w	r8[0xc],r9
8000c8ca:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000c8ce:	20 4d       	sub	sp,16
8000c8d0:	1a 98       	mov	r8,sp
8000c8d2:	20 08       	sub	r8,0
8000c8d4:	20 09       	sub	r9,0
8000c8d6:	72 0b       	ld.w	r11,r9[0x0]
8000c8d8:	91 0b       	st.w	r8[0x0],r11
8000c8da:	72 1b       	ld.w	r11,r9[0x4]
8000c8dc:	91 1b       	st.w	r8[0x4],r11
8000c8de:	72 2b       	ld.w	r11,r9[0x8]
8000c8e0:	91 2b       	st.w	r8[0x8],r11
8000c8e2:	72 39       	ld.w	r9,r9[0xc]
8000c8e4:	91 39       	st.w	r8[0xc],r9
8000c8e6:	14 9c       	mov	r12,r10
8000c8e8:	fe b0 f8 26 	rcall	8000b934 <quat_multi>
8000c8ec:	2f 8d       	sub	sp,-32

	attitude->qe.s=attitude->qe.s+qed.s*dt;
8000c8ee:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c8f2:	70 09       	ld.w	r9,r8[0x0]
8000c8f4:	ee fa ff 9c 	ld.w	r10,r7[-100]
8000c8f8:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000c8fc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c900:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c904:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c908:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0]+=qed.v[0]*dt;
8000c90a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c90e:	70 19       	ld.w	r9,r8[0x4]
8000c910:	ee fa ff a0 	ld.w	r10,r7[-96]
8000c914:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000c918:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c91c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c920:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c924:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1]+=qed.v[1]*dt;
8000c926:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c92a:	70 29       	ld.w	r9,r8[0x8]
8000c92c:	ee fa ff a4 	ld.w	r10,r7[-92]
8000c930:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000c934:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c938:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c93c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c940:	91 29       	st.w	r8[0x8],r9
	attitude->qe.v[2]+=qed.v[2]*dt;
8000c942:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c946:	70 39       	ld.w	r9,r8[0xc]
8000c948:	ee fa ff a8 	ld.w	r10,r7[-88]
8000c94c:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000c950:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c954:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c958:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c95c:	91 39       	st.w	r8[0xc],r9

	snorm=attitude->qe.s*attitude->qe.s+attitude->qe.v[0]*attitude->qe.v[0] + attitude->qe.v[1] * attitude->qe.v[1] + attitude->qe.v[2] * attitude->qe.v[2];
8000c95e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c962:	70 09       	ld.w	r9,r8[0x0]
8000c964:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c968:	70 08       	ld.w	r8,r8[0x0]
8000c96a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c96e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c972:	70 1a       	ld.w	r10,r8[0x4]
8000c974:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c978:	70 18       	ld.w	r8,r8[0x4]
8000c97a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c97e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c982:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c986:	70 2a       	ld.w	r10,r8[0x8]
8000c988:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c98c:	70 28       	ld.w	r8,r8[0x8]
8000c98e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c992:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c996:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c99a:	70 3a       	ld.w	r10,r8[0xc]
8000c99c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c9a0:	70 38       	ld.w	r8,r8[0xc]
8000c9a2:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c9a6:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000c9aa:	ef 48 ff e0 	st.w	r7[-32],r8
	if (snorm<0.0001) norm=0.01; else {
8000c9ae:	ee fc ff e0 	ld.w	r12,r7[-32]
8000c9b2:	f0 16 00 02 	mcall	r6[8]
8000c9b6:	30 05       	mov	r5,0
8000c9b8:	e0 68 43 2d 	mov	r8,17197
8000c9bc:	ea 18 eb 1c 	orh	r8,0xeb1c
8000c9c0:	e0 69 36 e2 	mov	r9,14050
8000c9c4:	ea 19 3f 1a 	orh	r9,0x3f1a
8000c9c8:	f0 16 00 1d 	mcall	r6[116]
8000c9cc:	18 98       	mov	r8,r12
8000c9ce:	58 08       	cp.w	r8,0
8000c9d0:	c0 20       	breq	8000c9d4 <qfilter+0x848>
8000c9d2:	30 15       	mov	r5,1
8000c9d4:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000c9d8:	c0 80       	breq	8000c9e8 <qfilter+0x85c>
8000c9da:	e0 68 d7 0a 	mov	r8,55050
8000c9de:	ea 18 3c 23 	orh	r8,0x3c23
8000c9e2:	ef 48 ff e4 	st.w	r7[-28],r8
8000c9e6:	c0 88       	rjmp	8000c9f6 <qfilter+0x86a>
		// approximate square root by running 2 iterations of newton method
		norm=fast_sqrt(snorm);
8000c9e8:	ee fc ff e0 	ld.w	r12,r7[-32]
8000c9ec:	fe b0 f9 58 	rcall	8000bc9c <fast_sqrt>
8000c9f0:	18 98       	mov	r8,r12
8000c9f2:	ef 48 ff e4 	st.w	r7[-28],r8
		//norm=0.5*(norm+(snorm/norm));
	}	
	attitude->qe.s/= norm;
8000c9f6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c9fa:	70 08       	ld.w	r8,r8[0x0]
8000c9fc:	ee fb ff e4 	ld.w	r11,r7[-28]
8000ca00:	10 9c       	mov	r12,r8
8000ca02:	f0 16 00 08 	mcall	r6[32]
8000ca06:	18 98       	mov	r8,r12
8000ca08:	10 99       	mov	r9,r8
8000ca0a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ca0e:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0] /= norm;
8000ca10:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ca14:	70 18       	ld.w	r8,r8[0x4]
8000ca16:	ee fb ff e4 	ld.w	r11,r7[-28]
8000ca1a:	10 9c       	mov	r12,r8
8000ca1c:	f0 16 00 08 	mcall	r6[32]
8000ca20:	18 98       	mov	r8,r12
8000ca22:	10 99       	mov	r9,r8
8000ca24:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ca28:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1] /= norm;
8000ca2a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ca2e:	70 28       	ld.w	r8,r8[0x8]
8000ca30:	ee fb ff e4 	ld.w	r11,r7[-28]
8000ca34:	10 9c       	mov	r12,r8
8000ca36:	f0 16 00 08 	mcall	r6[32]
8000ca3a:	18 98       	mov	r8,r12
8000ca3c:	10 99       	mov	r9,r8
8000ca3e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ca42:	91 29       	st.w	r8[0x8],r9
	attitude->qe.v[2] /= norm;
8000ca44:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ca48:	70 38       	ld.w	r8,r8[0xc]
8000ca4a:	ee fb ff e4 	ld.w	r11,r7[-28]
8000ca4e:	10 9c       	mov	r12,r8
8000ca50:	f0 16 00 08 	mcall	r6[32]
8000ca54:	18 98       	mov	r8,r12
8000ca56:	10 99       	mov	r9,r8
8000ca58:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ca5c:	91 39       	st.w	r8[0xc],r9

	// bias estimate update
	attitude->be[0]+= - dt * attitude->ki * omc[0] / attitude->sf[0];
8000ca5e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ca62:	70 c5       	ld.w	r5,r8[0x30]
8000ca64:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000ca68:	10 99       	mov	r9,r8
8000ca6a:	ee 19 80 00 	eorh	r9,0x8000
8000ca6e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ca72:	f0 f8 00 a0 	ld.w	r8,r8[160]
8000ca76:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ca7a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000ca7e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000ca82:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000ca86:	73 59       	ld.w	r9,r9[0x54]
8000ca88:	12 9b       	mov	r11,r9
8000ca8a:	10 9c       	mov	r12,r8
8000ca8c:	f0 16 00 08 	mcall	r6[32]
8000ca90:	18 98       	mov	r8,r12
8000ca92:	e5 a0 09 58 	cop	cp0,cr9,cr5,cr8,0x40
8000ca96:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ca9a:	91 c9       	st.w	r8[0x30],r9
	attitude->be[1]+= - dt * attitude->ki * omc[1] / attitude->sf[1];
8000ca9c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000caa0:	70 d5       	ld.w	r5,r8[0x34]
8000caa2:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000caa6:	10 99       	mov	r9,r8
8000caa8:	ee 19 80 00 	eorh	r9,0x8000
8000caac:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cab0:	f0 f8 00 a0 	ld.w	r8,r8[160]
8000cab4:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000cab8:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000cabc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000cac0:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000cac4:	73 69       	ld.w	r9,r9[0x58]
8000cac6:	12 9b       	mov	r11,r9
8000cac8:	10 9c       	mov	r12,r8
8000caca:	f0 16 00 08 	mcall	r6[32]
8000cace:	18 98       	mov	r8,r12
8000cad0:	e5 a0 09 58 	cop	cp0,cr9,cr5,cr8,0x40
8000cad4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cad8:	91 d9       	st.w	r8[0x34],r9
	attitude->be[2]+= - dt * attitude->ki * omc[2] / attitude->sf[2];
8000cada:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cade:	70 e5       	ld.w	r5,r8[0x38]
8000cae0:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cae4:	10 99       	mov	r9,r8
8000cae6:	ee 19 80 00 	eorh	r9,0x8000
8000caea:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000caee:	f0 f8 00 a0 	ld.w	r8,r8[160]
8000caf2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000caf6:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000cafa:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000cafe:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000cb02:	73 79       	ld.w	r9,r9[0x5c]
8000cb04:	12 9b       	mov	r11,r9
8000cb06:	10 9c       	mov	r12,r8
8000cb08:	f0 16 00 08 	mcall	r6[32]
8000cb0c:	18 98       	mov	r8,r12
8000cb0e:	e5 a0 09 58 	cop	cp0,cr9,cr5,cr8,0x40
8000cb12:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb16:	91 e9       	st.w	r8[0x38],r9
	// bias estimate update
	//attitude->be[6]+= - dt * attitude->ki_mag * omc[0];
	//attitude->be[7]+= - dt * attitude->ki_mag * omc[1];
	//attitude->be[8]+= - dt * attitude->ki_mag * omc[2];

	switch (attitude->calibration_level) {
8000cb18:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb1c:	f1 38 00 b8 	ld.ub	r8,r8[184]
8000cb20:	58 18       	cp.w	r8,1
8000cb22:	c1 c0       	breq	8000cb5a <qfilter+0x9ce>
8000cb24:	58 28       	cp.w	r8,2
8000cb26:	c3 00       	breq	8000cb86 <qfilter+0x9fa>
8000cb28:	58 08       	cp.w	r8,0
8000cb2a:	e0 81 00 94 	brne	8000cc52 <qfilter+0xac6>
		case OFF:
			kp=attitude->kp;//*(0.1/(0.1+s_acc_norm-1.0));
8000cb2e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb32:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000cb36:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/15.0;
8000cb3a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb3e:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000cb42:	fc 1b 41 70 	movh	r11,0x4170
8000cb46:	10 9c       	mov	r12,r8
8000cb48:	f0 16 00 08 	mcall	r6[32]
8000cb4c:	18 98       	mov	r8,r12
8000cb4e:	10 99       	mov	r9,r8
8000cb50:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb54:	f1 49 00 a0 	st.w	r8[160],r9
			break;
8000cb58:	c9 28       	rjmp	8000cc7c <qfilter+0xaf0>
		case LEVELING:
			kp=0.3;
8000cb5a:	e0 68 99 9a 	mov	r8,39322
8000cb5e:	ea 18 3e 99 	orh	r8,0x3e99
8000cb62:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/10.0;
8000cb66:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb6a:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000cb6e:	fc 1b 41 20 	movh	r11,0x4120
8000cb72:	10 9c       	mov	r12,r8
8000cb74:	f0 16 00 08 	mcall	r6[32]
8000cb78:	18 98       	mov	r8,r12
8000cb7a:	10 99       	mov	r9,r8
8000cb7c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb80:	f1 49 00 a0 	st.w	r8[160],r9
			break;
8000cb84:	c7 c8       	rjmp	8000cc7c <qfilter+0xaf0>
		case LEVEL_PLUS_ACCEL:
			kp=0.3;
8000cb86:	e0 68 99 9a 	mov	r8,39322
8000cb8a:	ea 18 3e 99 	orh	r8,0x3e99
8000cb8e:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/10.0;
8000cb92:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb96:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000cb9a:	fc 1b 41 20 	movh	r11,0x4120
8000cb9e:	10 9c       	mov	r12,r8
8000cba0:	f0 16 00 08 	mcall	r6[32]
8000cba4:	18 98       	mov	r8,r12
8000cba6:	10 99       	mov	r9,r8
8000cba8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cbac:	f1 49 00 a0 	st.w	r8[160],r9
			attitude->be[3]+=   dt * attitude->kp * (attitude->a[0]-up_bf.v[0]);
8000cbb0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cbb4:	70 f9       	ld.w	r9,r8[0x3c]
8000cbb6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cbba:	f0 fa 00 9c 	ld.w	r10,r8[156]
8000cbbe:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cbc2:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000cbc6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cbca:	f0 fb 00 84 	ld.w	r11,r8[132]
8000cbce:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000cbd2:	e5 a1 08 b8 	cop	cp0,cr8,cr11,cr8,0x42
8000cbd6:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cbda:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cbde:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cbe2:	91 f9       	st.w	r8[0x3c],r9
			attitude->be[4]+=   dt * attitude->kp * (attitude->a[1]-up_bf.v[1]);
8000cbe4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cbe8:	71 09       	ld.w	r9,r8[0x40]
8000cbea:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cbee:	f0 fa 00 9c 	ld.w	r10,r8[156]
8000cbf2:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cbf6:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000cbfa:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cbfe:	f0 fb 00 88 	ld.w	r11,r8[136]
8000cc02:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000cc06:	e5 a1 08 b8 	cop	cp0,cr8,cr11,cr8,0x42
8000cc0a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cc0e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cc12:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc16:	f1 49 00 40 	st.w	r8[64],r9
			attitude->be[5]+=   dt * attitude->kp * (attitude->a[2]-up_bf.v[2]);
8000cc1a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc1e:	71 19       	ld.w	r9,r8[0x44]
8000cc20:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc24:	f0 fa 00 9c 	ld.w	r10,r8[156]
8000cc28:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cc2c:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000cc30:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc34:	f0 fb 00 8c 	ld.w	r11,r8[140]
8000cc38:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000cc3c:	e5 a1 08 b8 	cop	cp0,cr8,cr11,cr8,0x42
8000cc40:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cc44:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cc48:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc4c:	f1 49 00 44 	st.w	r8[68],r9
			break;
8000cc50:	c1 68       	rjmp	8000cc7c <qfilter+0xaf0>
		default:
			kp=attitude->kp;
8000cc52:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc56:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000cc5a:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/15.0;
8000cc5e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc62:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000cc66:	fc 1b 41 70 	movh	r11,0x4170
8000cc6a:	10 9c       	mov	r12,r8
8000cc6c:	f0 16 00 08 	mcall	r6[32]
8000cc70:	18 98       	mov	r8,r12
8000cc72:	10 99       	mov	r9,r8
8000cc74:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc78:	f1 49 00 a0 	st.w	r8[160],r9
			break;
	}

	// set up-vector (bodyframe) in attitude
	attitude->up_vec.v[0]=up_bf.v[0];
8000cc7c:	ee f9 ff 70 	ld.w	r9,r7[-144]
8000cc80:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc84:	91 59       	st.w	r8[0x14],r9
	attitude->up_vec.v[1]=up_bf.v[1];
8000cc86:	ee f9 ff 74 	ld.w	r9,r7[-140]
8000cc8a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc8e:	91 69       	st.w	r8[0x18],r9
	attitude->up_vec.v[2]=up_bf.v[2];
8000cc90:	ee f9 ff 78 	ld.w	r9,r7[-136]
8000cc94:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc98:	91 79       	st.w	r8[0x1c],r9
	
}
8000cc9a:	2b fd       	sub	sp,-260
8000cc9c:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000cca0:	80 00       	ld.sh	r0,r0[0x0]
8000cca2:	c0 1e       	rcall	8000c8a4 <qfilter+0x718>

8000cca4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8000cca4:	eb cd 40 c0 	pushm	r6-r7,lr
8000cca8:	1a 97       	mov	r7,sp
8000ccaa:	20 6d       	sub	sp,24
8000ccac:	49 e6       	lddpc	r6,8000cd24 <interpolate+0x80>
8000ccae:	1e 26       	rsub	r6,pc
8000ccb0:	ef 4c ff f8 	st.w	r7[-8],r12
8000ccb4:	ef 4b ff f4 	st.w	r7[-12],r11
8000ccb8:	ef 4a ff f0 	st.w	r7[-16],r10
8000ccbc:	ef 49 ff ec 	st.w	r7[-20],r9
8000ccc0:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8000ccc4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000ccc8:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000cccc:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8000ccd0:	c0 41       	brne	8000ccd8 <interpolate+0x34>
	{
		return y1;
8000ccd2:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000ccd6:	c2 38       	rjmp	8000cd1c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8000ccd8:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000ccdc:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000cce0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000cce4:	ee fa ff f8 	ld.w	r10,r7[-8]
8000cce8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ccec:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000ccf0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000ccf4:	ee fa ff f0 	ld.w	r10,r7[-16]
8000ccf8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000ccfc:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000cd00:	12 9b       	mov	r11,r9
8000cd02:	10 9c       	mov	r12,r8
8000cd04:	f0 16 00 08 	mcall	r6[32]
8000cd08:	18 98       	mov	r8,r12
8000cd0a:	10 99       	mov	r9,r8
8000cd0c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000cd10:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000cd14:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8000cd18:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000cd1c:	10 9c       	mov	r12,r8
8000cd1e:	2f ad       	sub	sp,-24
8000cd20:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000cd24:	80 00       	ld.sh	r0,r0[0x0]
8000cd26:	cb 32       	brcc	8000cc8c <qfilter+0xb00>

8000cd28 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8000cd28:	eb cd 40 c0 	pushm	r6-r7,lr
8000cd2c:	1a 97       	mov	r7,sp
8000cd2e:	20 3d       	sub	sp,12
8000cd30:	49 06       	lddpc	r6,8000cd70 <mav_array_memcpy+0x48>
8000cd32:	1e 26       	rsub	r6,pc
8000cd34:	ef 4c ff fc 	st.w	r7[-4],r12
8000cd38:	ef 4b ff f8 	st.w	r7[-8],r11
8000cd3c:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8000cd40:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000cd44:	58 08       	cp.w	r8,0
8000cd46:	c0 91       	brne	8000cd58 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000cd48:	ee fa ff f4 	ld.w	r10,r7[-12]
8000cd4c:	30 0b       	mov	r11,0
8000cd4e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000cd52:	f0 16 00 31 	mcall	r6[196]
8000cd56:	c0 98       	rjmp	8000cd68 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000cd58:	ee fa ff f4 	ld.w	r10,r7[-12]
8000cd5c:	ee fb ff f8 	ld.w	r11,r7[-8]
8000cd60:	ee fc ff fc 	ld.w	r12,r7[-4]
8000cd64:	f0 16 00 21 	mcall	r6[132]
	}
}
8000cd68:	2f dd       	sub	sp,-12
8000cd6a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000cd6e:	00 00       	add	r0,r0
8000cd70:	80 00       	ld.sh	r0,r0[0x0]
8000cd72:	cb b6       	brmi	8000cce8 <interpolate+0x44>

8000cd74 <initialise_central_data>:
#include "conf_sim_model.h"


static volatile central_data_t centralData;

void initialise_central_data(){
8000cd74:	eb cd 40 c0 	pushm	r6-r7,lr
8000cd78:	1a 97       	mov	r7,sp
8000cd7a:	4d 86       	lddpc	r6,8000ced8 <initialise_central_data+0x164>
8000cd7c:	1e 26       	rsub	r6,pc
		
		// init controls
		centralData.controls.rpy[ROLL]=0;
8000cd7e:	ec f8 00 64 	ld.w	r8,r6[100]
8000cd82:	30 09       	mov	r9,0
8000cd84:	f1 49 01 48 	st.w	r8[328],r9
		centralData.controls.rpy[PITCH]=0;
8000cd88:	ec f8 00 64 	ld.w	r8,r6[100]
8000cd8c:	30 09       	mov	r9,0
8000cd8e:	f1 49 01 4c 	st.w	r8[332],r9
		centralData.controls.rpy[YAW]=0;
8000cd92:	ec f8 00 64 	ld.w	r8,r6[100]
8000cd96:	30 09       	mov	r9,0
8000cd98:	f1 49 01 50 	st.w	r8[336],r9
		centralData.controls.thrust=-1.0;
8000cd9c:	ec f8 00 64 	ld.w	r8,r6[100]
8000cda0:	fc 19 bf 80 	movh	r9,0xbf80
8000cda4:	f1 49 01 54 	st.w	r8[340],r9
		
		// init stabilisers
		init_stabilisation_copter(&centralData.stabiliser_stack);
8000cda8:	ec f8 00 64 	ld.w	r8,r6[100]
8000cdac:	f0 c8 fe 60 	sub	r8,r8,-416
8000cdb0:	10 9c       	mov	r12,r8
8000cdb2:	f0 16 01 7a 	mcall	r6[1512]
		// centralData.stabilisers_stack = 

		centralData.simulation_mode=0;
8000cdb6:	ec f8 00 64 	ld.w	r8,r6[100]
8000cdba:	30 09       	mov	r9,0
8000cdbc:	f1 49 10 c0 	st.w	r8[4288],r9

		// init waypoint navigation
		centralData.number_of_waypoints = 0;		
8000cdc0:	ec f9 00 64 	ld.w	r9,r6[100]
8000cdc4:	30 08       	mov	r8,0
8000cdc6:	f3 58 10 1c 	st.h	r9[4124],r8
		centralData.waypoint_set = false;
8000cdca:	ec f9 00 64 	ld.w	r9,r6[100]
8000cdce:	30 08       	mov	r8,0
8000cdd0:	f3 68 10 b4 	st.b	r9[4276],r8
		centralData.waypoint_sending = false;
8000cdd4:	ec f9 00 64 	ld.w	r9,r6[100]
8000cdd8:	30 08       	mov	r8,0
8000cdda:	f3 68 10 b5 	st.b	r9[4277],r8
		centralData.waypoint_receiving = false;
8000cdde:	ec f9 00 64 	ld.w	r9,r6[100]
8000cde2:	30 08       	mov	r8,0
8000cde4:	f3 68 10 b6 	st.b	r9[4278],r8
		centralData.waypoint_hold_init = false;
8000cde8:	ec f9 00 64 	ld.w	r9,r6[100]
8000cdec:	30 08       	mov	r8,0
8000cdee:	f3 68 10 b7 	st.b	r9[4279],r8
		centralData.critical_landing = false;
8000cdf2:	ec f9 00 64 	ld.w	r9,r6[100]
8000cdf6:	30 08       	mov	r8,0
8000cdf8:	f3 68 10 b8 	st.b	r9[4280],r8
		centralData.critical_init = false;
8000cdfc:	ec f9 00 64 	ld.w	r9,r6[100]
8000ce00:	30 08       	mov	r8,0
8000ce02:	f3 68 10 b9 	st.b	r9[4281],r8
		centralData.collision_avoidance = false;
8000ce06:	ec f9 00 64 	ld.w	r9,r6[100]
8000ce0a:	30 08       	mov	r8,0
8000ce0c:	f3 68 10 bb 	st.b	r9[4283],r8

		// default GPS home position
		centralData.position_estimator.localPosition.origin.longitude=   HOME_LONGITUDE;
8000ce10:	ec fa 00 64 	ld.w	r10,r6[100]
8000ce14:	e0 68 33 27 	mov	r8,13095
8000ce18:	ea 18 3f a0 	orh	r8,0x3fa0
8000ce1c:	e0 69 43 a1 	mov	r9,17313
8000ce20:	ea 19 40 1a 	orh	r9,0x401a
8000ce24:	f4 e9 0d ac 	st.d	r10[3500],r8
		centralData.position_estimator.localPosition.origin.latitude =   HOME_LATITUDE;
8000ce28:	ec fa 00 64 	ld.w	r10,r6[100]
8000ce2c:	e0 68 f8 9c 	mov	r8,63644
8000ce30:	ea 18 f0 d4 	orh	r8,0xf0d4
8000ce34:	e0 69 42 5e 	mov	r9,16990
8000ce38:	ea 19 40 47 	orh	r9,0x4047
8000ce3c:	f4 e9 0d b4 	st.d	r10[3508],r8
		centralData.position_estimator.localPosition.origin.altitude =   HOME_ALTITUDE;
8000ce40:	ec f8 00 64 	ld.w	r8,r6[100]
8000ce44:	fc 19 43 c8 	movh	r9,0x43c8
8000ce48:	f1 49 0d bc 	st.w	r8[3516],r9
		centralData.position_estimator.localPosition.pos[0]=0;
8000ce4c:	ec f8 00 64 	ld.w	r8,r6[100]
8000ce50:	30 09       	mov	r9,0
8000ce52:	f1 49 0d 9c 	st.w	r8[3484],r9
		centralData.position_estimator.localPosition.pos[1]=0;
8000ce56:	ec f8 00 64 	ld.w	r8,r6[100]
8000ce5a:	30 09       	mov	r9,0
8000ce5c:	f1 49 0d a0 	st.w	r8[3488],r9
		centralData.position_estimator.localPosition.pos[2]=0;
8000ce60:	ec f8 00 64 	ld.w	r8,r6[100]
8000ce64:	30 09       	mov	r9,0
8000ce66:	f1 49 0d a4 	st.w	r8[3492],r9

		// init simulation
		init_simulation(&(centralData.sim_model),&(centralData.imu1.attitude));
8000ce6a:	ec f8 00 64 	ld.w	r8,r6[100]
8000ce6e:	f0 c8 f4 58 	sub	r8,r8,-2984
8000ce72:	ec fb 00 64 	ld.w	r11,r6[100]
8000ce76:	10 9c       	mov	r12,r8
8000ce78:	f0 16 01 e3 	mcall	r6[1932]
		centralData.sim_model.localPosition = centralData.position_estimator.localPosition;
8000ce7c:	ec f9 00 64 	ld.w	r9,r6[100]
8000ce80:	ec f8 00 64 	ld.w	r8,r6[100]
8000ce84:	f2 cb f3 44 	sub	r11,r9,-3260
8000ce88:	f0 ca f2 64 	sub	r10,r8,-3484
8000ce8c:	f6 c8 00 00 	sub	r8,r11,0
8000ce90:	f4 c9 00 00 	sub	r9,r10,0
8000ce94:	72 0c       	ld.w	r12,r9[0x0]
8000ce96:	91 0c       	st.w	r8[0x0],r12
8000ce98:	72 1c       	ld.w	r12,r9[0x4]
8000ce9a:	91 1c       	st.w	r8[0x4],r12
8000ce9c:	72 2c       	ld.w	r12,r9[0x8]
8000ce9e:	91 2c       	st.w	r8[0x8],r12
8000cea0:	72 39       	ld.w	r9,r9[0xc]
8000cea2:	91 39       	st.w	r8[0xc],r9
8000cea4:	f6 c8 ff f0 	sub	r8,r11,-16
8000cea8:	f4 c9 ff f0 	sub	r9,r10,-16
8000ceac:	72 0c       	ld.w	r12,r9[0x0]
8000ceae:	91 0c       	st.w	r8[0x0],r12
8000ceb0:	72 1c       	ld.w	r12,r9[0x4]
8000ceb2:	91 1c       	st.w	r8[0x4],r12
8000ceb4:	72 2c       	ld.w	r12,r9[0x8]
8000ceb6:	91 2c       	st.w	r8[0x8],r12
8000ceb8:	72 39       	ld.w	r9,r9[0xc]
8000ceba:	91 39       	st.w	r8[0xc],r9
8000cebc:	f6 c8 ff e0 	sub	r8,r11,-32
8000cec0:	f4 c9 ff e0 	sub	r9,r10,-32
8000cec4:	72 0a       	ld.w	r10,r9[0x0]
8000cec6:	91 0a       	st.w	r8[0x0],r10
8000cec8:	72 1a       	ld.w	r10,r9[0x4]
8000ceca:	91 1a       	st.w	r8[0x4],r10
8000cecc:	72 2a       	ld.w	r10,r9[0x8]
8000cece:	91 2a       	st.w	r8[0x8],r10
8000ced0:	72 39       	ld.w	r9,r9[0xc]
8000ced2:	91 39       	st.w	r8[0xc],r9
		
		//init_waypoint_list(centralData.waypoint_list,&(centralData.number_of_waypoints));

}
8000ced4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000ced8:	80 00       	ld.sh	r0,r0[0x0]
8000ceda:	cc 00       	breq	8000ce5a <initialise_central_data+0xe6>

8000cedc <get_central_data>:

central_data_t* get_central_data(void)
{
8000cedc:	eb cd 40 c0 	pushm	r6-r7,lr
8000cee0:	1a 97       	mov	r7,sp
8000cee2:	48 46       	lddpc	r6,8000cef0 <get_central_data+0x14>
8000cee4:	1e 26       	rsub	r6,pc
	return &centralData;
8000cee6:	ec f8 00 64 	ld.w	r8,r6[100]
}
8000ceea:	10 9c       	mov	r12,r8
8000ceec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000cef0:	80 00       	ld.sh	r0,r0[0x0]
8000cef2:	cd 68       	rjmp	8000d09e <crc_accumulate_buffer+0x16>

8000cef4 <get_telemetry_upstream>:

byte_stream_t* get_telemetry_upstream() {
8000cef4:	eb cd 40 c0 	pushm	r6-r7,lr
8000cef8:	1a 97       	mov	r7,sp
8000cefa:	48 56       	lddpc	r6,8000cf0c <get_telemetry_upstream+0x18>
8000cefc:	1e 26       	rsub	r6,pc
	return centralData.telemetry_up_stream;
8000cefe:	ec f8 00 64 	ld.w	r8,r6[100]
8000cf02:	f0 f8 0e 00 	ld.w	r8,r8[3584]
}
8000cf06:	10 9c       	mov	r12,r8
8000cf08:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000cf0c:	80 00       	ld.sh	r0,r0[0x0]
8000cf0e:	cd 80       	breq	8000cebe <initialise_central_data+0x14a>

8000cf10 <get_telemetry_downstream>:
byte_stream_t* get_telemetry_downstream() {
8000cf10:	eb cd 40 c0 	pushm	r6-r7,lr
8000cf14:	1a 97       	mov	r7,sp
8000cf16:	48 56       	lddpc	r6,8000cf28 <get_telemetry_downstream+0x18>
8000cf18:	1e 26       	rsub	r6,pc
	return centralData.telemetry_down_stream;
8000cf1a:	ec f8 00 64 	ld.w	r8,r6[100]
8000cf1e:	f0 f8 0d fc 	ld.w	r8,r8[3580]
}
8000cf22:	10 9c       	mov	r12,r8
8000cf24:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000cf28:	80 00       	ld.sh	r0,r0[0x0]
8000cf2a:	cd 9c       	rcall	8000d0dc <crc_accumulate_buffer+0x54>

8000cf2c <get_debug_stream>:
byte_stream_t* get_debug_stream() {
8000cf2c:	eb cd 40 c0 	pushm	r6-r7,lr
8000cf30:	1a 97       	mov	r7,sp
8000cf32:	48 56       	lddpc	r6,8000cf44 <get_debug_stream+0x18>
8000cf34:	1e 26       	rsub	r6,pc
	return centralData.debug_out_stream;
8000cf36:	ec f8 00 64 	ld.w	r8,r6[100]
8000cf3a:	f0 f8 0e 04 	ld.w	r8,r8[3588]
}
8000cf3e:	10 9c       	mov	r12,r8
8000cf40:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000cf44:	80 00       	ld.sh	r0,r0[0x0]
8000cf46:	cd b8       	rjmp	8000d0fc <mavlink_get_channel_status+0x10>

8000cf48 <get_imu_data>:

Imu_Data_t* get_imu_data() {
8000cf48:	eb cd 40 c0 	pushm	r6-r7,lr
8000cf4c:	1a 97       	mov	r7,sp
8000cf4e:	48 46       	lddpc	r6,8000cf5c <get_imu_data+0x14>
8000cf50:	1e 26       	rsub	r6,pc
	return &centralData.imu1;
8000cf52:	ec f8 00 64 	ld.w	r8,r6[100]
}
8000cf56:	10 9c       	mov	r12,r8
8000cf58:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000cf5c:	80 00       	ld.sh	r0,r0[0x0]
8000cf5e:	cd d4       	brge	8000cf18 <get_telemetry_downstream+0x8>

8000cf60 <get_control_inputs_data>:
Control_Command_t* get_control_inputs_data() {
8000cf60:	eb cd 40 c0 	pushm	r6-r7,lr
8000cf64:	1a 97       	mov	r7,sp
8000cf66:	48 56       	lddpc	r6,8000cf78 <get_control_inputs_data+0x18>
8000cf68:	1e 26       	rsub	r6,pc
	return &centralData.controls;
8000cf6a:	ec f8 00 64 	ld.w	r8,r6[100]
8000cf6e:	f0 c8 fe b8 	sub	r8,r8,-328
8000cf72:	10 9c       	mov	r12,r8
8000cf74:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000cf78:	80 00       	ld.sh	r0,r0[0x0]
8000cf7a:	cd ec       	rcall	8000d136 <_mav_finalize_message_chan_send+0x1a>

8000cf7c <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
8000cf7c:	eb cd 40 80 	pushm	r7,lr
8000cf80:	1a 97       	mov	r7,sp
8000cf82:	20 3d       	sub	sp,12
8000cf84:	18 98       	mov	r8,r12
8000cf86:	ef 4b ff f4 	st.w	r7[-12],r11
8000cf8a:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
8000cf8e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000cf92:	90 08       	ld.sh	r8,r8[0x0]
8000cf94:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000cf98:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000cf9c:	f3 e8 20 08 	eor	r8,r9,r8
8000cfa0:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
8000cfa4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cfa8:	a5 68       	lsl	r8,0x4
8000cfaa:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000cfae:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cfb2:	f3 e8 20 08 	eor	r8,r9,r8
8000cfb6:	5c 58       	castu.b	r8
8000cfb8:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
8000cfbc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000cfc0:	90 08       	ld.sh	r8,r8[0x0]
8000cfc2:	5c 78       	castu.h	r8
8000cfc4:	a9 88       	lsr	r8,0x8
8000cfc6:	5c 88       	casts.h	r8
8000cfc8:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000cfcc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cfd0:	a9 68       	lsl	r8,0x8
8000cfd2:	5c 88       	casts.h	r8
8000cfd4:	f3 e8 20 08 	eor	r8,r9,r8
8000cfd8:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000cfdc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cfe0:	a3 78       	lsl	r8,0x3
8000cfe2:	5c 88       	casts.h	r8
8000cfe4:	f3 e8 20 08 	eor	r8,r9,r8
8000cfe8:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000cfec:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cff0:	a5 88       	lsr	r8,0x4
8000cff2:	5c 58       	castu.b	r8
8000cff4:	f3 e8 20 08 	eor	r8,r9,r8
8000cff8:	5c 88       	casts.h	r8
8000cffa:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000cffe:	b2 08       	st.h	r9[0x0],r8
}
8000d000:	2f dd       	sub	sp,-12
8000d002:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d006 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
8000d006:	eb cd 40 80 	pushm	r7,lr
8000d00a:	1a 97       	mov	r7,sp
8000d00c:	20 1d       	sub	sp,4
8000d00e:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
8000d012:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d016:	3f f8       	mov	r8,-1
8000d018:	b2 08       	st.h	r9[0x0],r8
}
8000d01a:	2f fd       	sub	sp,-4
8000d01c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d020 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
8000d020:	eb cd 40 c0 	pushm	r6-r7,lr
8000d024:	1a 97       	mov	r7,sp
8000d026:	20 3d       	sub	sp,12
8000d028:	49 76       	lddpc	r6,8000d084 <crc_calculate+0x64>
8000d02a:	1e 26       	rsub	r6,pc
8000d02c:	ef 4c ff f8 	st.w	r7[-8],r12
8000d030:	16 98       	mov	r8,r11
8000d032:	ef 58 ff f4 	st.h	r7[-12],r8
        uint16_t crcTmp;
        crc_init(&crcTmp);
8000d036:	ee c8 00 02 	sub	r8,r7,2
8000d03a:	10 9c       	mov	r12,r8
8000d03c:	ce 5f       	rcall	8000d006 <crc_init>
	while (length--) {
8000d03e:	c0 e8       	rjmp	8000d05a <crc_calculate+0x3a>
                crc_accumulate(*pBuffer++, &crcTmp);
8000d040:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d044:	11 88       	ld.ub	r8,r8[0x0]
8000d046:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d04a:	2f f9       	sub	r9,-1
8000d04c:	ef 49 ff f8 	st.w	r7[-8],r9
8000d050:	ee c9 00 02 	sub	r9,r7,2
8000d054:	12 9b       	mov	r11,r9
8000d056:	10 9c       	mov	r12,r8
8000d058:	c9 2f       	rcall	8000cf7c <crc_accumulate>
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
8000d05a:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8000d05e:	30 08       	mov	r8,0
8000d060:	f0 09 19 00 	cp.h	r9,r8
8000d064:	5f 18       	srne	r8
8000d066:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000d06a:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000d06e:	20 18       	sub	r8,1
8000d070:	ef 58 ff f4 	st.h	r7[-12],r8
8000d074:	58 09       	cp.w	r9,0
8000d076:	ce 51       	brne	8000d040 <crc_calculate+0x20>
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
8000d078:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8000d07c:	10 9c       	mov	r12,r8
8000d07e:	2f dd       	sub	sp,-12
8000d080:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d084:	80 00       	ld.sh	r0,r0[0x0]
8000d086:	ce ae       	rcall	8000ce5a <initialise_central_data+0xe6>

8000d088 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
8000d088:	eb cd 40 c0 	pushm	r6-r7,lr
8000d08c:	1a 97       	mov	r7,sp
8000d08e:	20 4d       	sub	sp,16
8000d090:	49 66       	lddpc	r6,8000d0e8 <crc_accumulate_buffer+0x60>
8000d092:	1e 26       	rsub	r6,pc
8000d094:	ef 4c ff f8 	st.w	r7[-8],r12
8000d098:	ef 4b ff f4 	st.w	r7[-12],r11
8000d09c:	14 98       	mov	r8,r10
8000d09e:	ef 68 ff f0 	st.b	r7[-16],r8
	const uint8_t *p = (const uint8_t *)pBuffer;
8000d0a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d0a6:	ef 48 ff fc 	st.w	r7[-4],r8
	while (length--) {
8000d0aa:	c0 d8       	rjmp	8000d0c4 <crc_accumulate_buffer+0x3c>
                crc_accumulate(*p++, crcAccum);
8000d0ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d0b0:	11 88       	ld.ub	r8,r8[0x0]
8000d0b2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d0b6:	2f f9       	sub	r9,-1
8000d0b8:	ef 49 ff fc 	st.w	r7[-4],r9
8000d0bc:	ee fb ff f8 	ld.w	r11,r7[-8]
8000d0c0:	10 9c       	mov	r12,r8
8000d0c2:	c5 df       	rcall	8000cf7c <crc_accumulate>
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
8000d0c4:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000d0c8:	30 08       	mov	r8,0
8000d0ca:	f0 09 18 00 	cp.b	r9,r8
8000d0ce:	5f 18       	srne	r8
8000d0d0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000d0d4:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000d0d8:	20 18       	sub	r8,1
8000d0da:	ef 68 ff f0 	st.b	r7[-16],r8
8000d0de:	58 09       	cp.w	r9,0
8000d0e0:	ce 61       	brne	8000d0ac <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
        }
}
8000d0e2:	2f cd       	sub	sp,-16
8000d0e4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d0e8:	80 00       	ld.sh	r0,r0[0x0]
8000d0ea:	cf 16       	brmi	8000d0cc <crc_accumulate_buffer+0x44>

8000d0ec <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
8000d0ec:	eb cd 40 c0 	pushm	r6-r7,lr
8000d0f0:	1a 97       	mov	r7,sp
8000d0f2:	20 1d       	sub	sp,4
8000d0f4:	48 96       	lddpc	r6,8000d118 <mavlink_get_channel_status+0x2c>
8000d0f6:	1e 26       	rsub	r6,pc
8000d0f8:	18 98       	mov	r8,r12
8000d0fa:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
8000d0fe:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000d102:	f0 09 15 04 	lsl	r9,r8,0x4
8000d106:	ec f8 09 00 	ld.w	r8,r6[2304]
8000d10a:	f2 08 00 08 	add	r8,r9,r8
}
8000d10e:	10 9c       	mov	r12,r8
8000d110:	2f fd       	sub	sp,-4
8000d112:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d116:	00 00       	add	r0,r0
8000d118:	80 00       	ld.sh	r0,r0[0x0]
8000d11a:	cf 7a       	rjmp	8000cf08 <get_telemetry_upstream+0x14>

8000d11c <_mav_finalize_message_chan_send>:
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, 
						    uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, uint8_t length)
#endif
{
8000d11c:	eb cd 40 c0 	pushm	r6-r7,lr
8000d120:	1a 97       	mov	r7,sp
8000d122:	20 9d       	sub	sp,36
8000d124:	4b d6       	lddpc	r6,8000d218 <_mav_finalize_message_chan_send+0xfc>
8000d126:	1e 26       	rsub	r6,pc
8000d128:	ef 4c ff ec 	st.w	r7[-20],r12
8000d12c:	ef 4a ff e4 	st.w	r7[-28],r10
8000d130:	16 9a       	mov	r10,r11
8000d132:	ef 6a ff e8 	st.b	r7[-24],r10
8000d136:	ef 69 ff e0 	st.b	r7[-32],r9
8000d13a:	ef 68 ff dc 	st.b	r7[-36],r8
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
8000d13e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000d142:	5c 58       	castu.b	r8
8000d144:	10 9c       	mov	r12,r8
8000d146:	cd 3f       	rcall	8000d0ec <mavlink_get_channel_status>
8000d148:	18 98       	mov	r8,r12
8000d14a:	ef 48 ff fc 	st.w	r7[-4],r8
	buf[0] = MAVLINK_STX;
8000d14e:	3f e8       	mov	r8,-2
8000d150:	ef 68 ff f4 	st.b	r7[-12],r8
	buf[1] = length;
8000d154:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8000d158:	ef 68 ff f5 	st.b	r7[-11],r8
	buf[2] = status->current_tx_seq;
8000d15c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d160:	f1 38 00 0a 	ld.ub	r8,r8[10]
8000d164:	ef 68 ff f6 	st.b	r7[-10],r8
	buf[3] = mavlink_system.sysid;
8000d168:	ec f8 00 70 	ld.w	r8,r6[112]
8000d16c:	11 88       	ld.ub	r8,r8[0x0]
8000d16e:	ef 68 ff f7 	st.b	r7[-9],r8
	buf[4] = mavlink_system.compid;
8000d172:	ec f8 00 70 	ld.w	r8,r6[112]
8000d176:	11 98       	ld.ub	r8,r8[0x1]
8000d178:	ef 68 ff f8 	st.b	r7[-8],r8
	buf[5] = msgid;
8000d17c:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000d180:	ef 68 ff f9 	st.b	r7[-7],r8
	status->current_tx_seq++;
8000d184:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d188:	f1 38 00 0a 	ld.ub	r8,r8[10]
8000d18c:	2f f8       	sub	r8,-1
8000d18e:	5c 58       	castu.b	r8
8000d190:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d194:	f3 68 00 0a 	st.b	r9[10],r8
	checksum = crc_calculate((uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
8000d198:	ee c8 00 0c 	sub	r8,r7,12
8000d19c:	2f f8       	sub	r8,-1
8000d19e:	30 5b       	mov	r11,5
8000d1a0:	10 9c       	mov	r12,r8
8000d1a2:	c3 ff       	rcall	8000d020 <crc_calculate>
8000d1a4:	18 98       	mov	r8,r12
8000d1a6:	5c 88       	casts.h	r8
8000d1a8:	ef 58 ff fa 	st.h	r7[-6],r8
	crc_accumulate_buffer(&checksum, packet, length);
8000d1ac:	ef 39 ff e0 	ld.ub	r9,r7[-32]
8000d1b0:	ee c8 00 06 	sub	r8,r7,6
8000d1b4:	12 9a       	mov	r10,r9
8000d1b6:	ee fb ff e4 	ld.w	r11,r7[-28]
8000d1ba:	10 9c       	mov	r12,r8
8000d1bc:	c6 6f       	rcall	8000d088 <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
8000d1be:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000d1c2:	ee c9 00 06 	sub	r9,r7,6
8000d1c6:	12 9b       	mov	r11,r9
8000d1c8:	10 9c       	mov	r12,r8
8000d1ca:	cd 9e       	rcall	8000cf7c <crc_accumulate>
#endif
	ck[0] = (uint8_t)(checksum & 0xFF);
8000d1cc:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8000d1d0:	5c 58       	castu.b	r8
8000d1d2:	ef 68 ff f0 	st.b	r7[-16],r8
	ck[1] = (uint8_t)(checksum >> 8);
8000d1d6:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8000d1da:	5c 78       	castu.h	r8
8000d1dc:	a9 88       	lsr	r8,0x8
8000d1de:	5c 88       	casts.h	r8
8000d1e0:	5c 58       	castu.b	r8
8000d1e2:	ef 68 ff f1 	st.b	r7[-15],r8

	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
8000d1e6:	ee c8 00 0c 	sub	r8,r7,12
8000d1ea:	30 6a       	mov	r10,6
8000d1ec:	10 9b       	mov	r11,r8
8000d1ee:	ee fc ff ec 	ld.w	r12,r7[-20]
8000d1f2:	c1 5c       	rcall	8000d21c <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
8000d1f4:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8000d1f8:	10 9a       	mov	r10,r8
8000d1fa:	ee fb ff e4 	ld.w	r11,r7[-28]
8000d1fe:	ee fc ff ec 	ld.w	r12,r7[-20]
8000d202:	c0 dc       	rcall	8000d21c <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
8000d204:	ee c8 00 10 	sub	r8,r7,16
8000d208:	30 2a       	mov	r10,2
8000d20a:	10 9b       	mov	r11,r8
8000d20c:	ee fc ff ec 	ld.w	r12,r7[-20]
8000d210:	c0 6c       	rcall	8000d21c <_mavlink_send_uart>
	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
}
8000d212:	2f 7d       	sub	sp,-36
8000d214:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d218:	80 00       	ld.sh	r0,r0[0x0]
8000d21a:	cf aa       	rjmp	8000d00e <crc_init+0x8>

8000d21c <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
8000d21c:	eb cd 40 c0 	pushm	r6-r7,lr
8000d220:	1a 97       	mov	r7,sp
8000d222:	20 4d       	sub	sp,16
8000d224:	49 46       	lddpc	r6,8000d274 <_mavlink_send_uart+0x58>
8000d226:	1e 26       	rsub	r6,pc
8000d228:	ef 4c ff f8 	st.w	r7[-8],r12
8000d22c:	ef 4b ff f4 	st.w	r7[-12],r11
8000d230:	14 98       	mov	r8,r10
8000d232:	ef 58 ff f0 	st.h	r7[-16],r8
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8000d236:	30 08       	mov	r8,0
8000d238:	ef 58 ff fe 	st.h	r7[-2],r8
8000d23c:	c1 28       	rjmp	8000d260 <_mavlink_send_uart+0x44>
		comm_send_ch(chan, (uint8_t)buf[i]);
8000d23e:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8000d242:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000d246:	f2 08 00 08 	add	r8,r9,r8
8000d24a:	11 88       	ld.ub	r8,r8[0x0]
8000d24c:	10 9b       	mov	r11,r8
8000d24e:	ee fc ff f8 	ld.w	r12,r7[-8]
8000d252:	f0 16 00 d5 	mcall	r6[852]
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8000d256:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000d25a:	2f f8       	sub	r8,-1
8000d25c:	ef 58 ff fe 	st.h	r7[-2],r8
8000d260:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000d264:	ef 08 ff f0 	ld.sh	r8,r7[-16]
8000d268:	f0 09 19 00 	cp.h	r9,r8
8000d26c:	ce 93       	brcs	8000d23e <_mavlink_send_uart+0x22>
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
8000d26e:	2f cd       	sub	sp,-16
8000d270:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d274:	80 00       	ld.sh	r0,r0[0x0]
8000d276:	d0 aa       	popm	r4-r7,r10

8000d278 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
8000d278:	eb cd 40 80 	pushm	r7,lr
8000d27c:	1a 97       	mov	r7,sp
8000d27e:	20 2d       	sub	sp,8
8000d280:	ef 4c ff fc 	st.w	r7[-4],r12
8000d284:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
8000d288:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d28c:	2f f8       	sub	r8,-1
8000d28e:	11 88       	ld.ub	r8,r8[0x0]
8000d290:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d294:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
8000d296:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d29a:	f0 c9 ff ff 	sub	r9,r8,-1
8000d29e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d2a2:	11 88       	ld.ub	r8,r8[0x0]
8000d2a4:	b2 88       	st.b	r9[0x0],r8
}
8000d2a6:	2f ed       	sub	sp,-8
8000d2a8:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d2ac <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
8000d2ac:	eb cd 40 80 	pushm	r7,lr
8000d2b0:	1a 97       	mov	r7,sp
8000d2b2:	20 2d       	sub	sp,8
8000d2b4:	ef 4c ff fc 	st.w	r7[-4],r12
8000d2b8:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
8000d2bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d2c0:	2f d8       	sub	r8,-3
8000d2c2:	11 88       	ld.ub	r8,r8[0x0]
8000d2c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d2c8:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
8000d2ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d2ce:	f0 c9 ff ff 	sub	r9,r8,-1
8000d2d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d2d6:	2f e8       	sub	r8,-2
8000d2d8:	11 88       	ld.ub	r8,r8[0x0]
8000d2da:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
8000d2dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d2e0:	f0 c9 ff fe 	sub	r9,r8,-2
8000d2e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d2e8:	2f f8       	sub	r8,-1
8000d2ea:	11 88       	ld.ub	r8,r8[0x0]
8000d2ec:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
8000d2ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d2f2:	f0 c9 ff fd 	sub	r9,r8,-3
8000d2f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d2fa:	11 88       	ld.ub	r8,r8[0x0]
8000d2fc:	b2 88       	st.b	r9[0x0],r8
}
8000d2fe:	2f ed       	sub	sp,-8
8000d300:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d304 <byte_swap_8>:
static inline void byte_swap_8(char *dst, const char *src)
{
8000d304:	eb cd 40 80 	pushm	r7,lr
8000d308:	1a 97       	mov	r7,sp
8000d30a:	20 2d       	sub	sp,8
8000d30c:	ef 4c ff fc 	st.w	r7[-4],r12
8000d310:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[7];
8000d314:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d318:	2f 98       	sub	r8,-7
8000d31a:	11 88       	ld.ub	r8,r8[0x0]
8000d31c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d320:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[6];
8000d322:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d326:	f0 c9 ff ff 	sub	r9,r8,-1
8000d32a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d32e:	2f a8       	sub	r8,-6
8000d330:	11 88       	ld.ub	r8,r8[0x0]
8000d332:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[5];
8000d334:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d338:	f0 c9 ff fe 	sub	r9,r8,-2
8000d33c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d340:	2f b8       	sub	r8,-5
8000d342:	11 88       	ld.ub	r8,r8[0x0]
8000d344:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[4];
8000d346:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d34a:	f0 c9 ff fd 	sub	r9,r8,-3
8000d34e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d352:	2f c8       	sub	r8,-4
8000d354:	11 88       	ld.ub	r8,r8[0x0]
8000d356:	b2 88       	st.b	r9[0x0],r8
	dst[4] = src[3];
8000d358:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d35c:	f0 c9 ff fc 	sub	r9,r8,-4
8000d360:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d364:	2f d8       	sub	r8,-3
8000d366:	11 88       	ld.ub	r8,r8[0x0]
8000d368:	b2 88       	st.b	r9[0x0],r8
	dst[5] = src[2];
8000d36a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d36e:	f0 c9 ff fb 	sub	r9,r8,-5
8000d372:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d376:	2f e8       	sub	r8,-2
8000d378:	11 88       	ld.ub	r8,r8[0x0]
8000d37a:	b2 88       	st.b	r9[0x0],r8
	dst[6] = src[1];
8000d37c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d380:	f0 c9 ff fa 	sub	r9,r8,-6
8000d384:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d388:	2f f8       	sub	r8,-1
8000d38a:	11 88       	ld.ub	r8,r8[0x0]
8000d38c:	b2 88       	st.b	r9[0x0],r8
	dst[7] = src[0];
8000d38e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d392:	f0 c9 ff f9 	sub	r9,r8,-7
8000d396:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d39a:	11 88       	ld.ub	r8,r8[0x0]
8000d39c:	b2 88       	st.b	r9[0x0],r8
}
8000d39e:	2f ed       	sub	sp,-8
8000d3a0:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d3a4 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8000d3a4:	eb cd 40 c0 	pushm	r6-r7,lr
8000d3a8:	1a 97       	mov	r7,sp
8000d3aa:	20 3d       	sub	sp,12
8000d3ac:	49 06       	lddpc	r6,8000d3ec <mav_array_memcpy+0x48>
8000d3ae:	1e 26       	rsub	r6,pc
8000d3b0:	ef 4c ff fc 	st.w	r7[-4],r12
8000d3b4:	ef 4b ff f8 	st.w	r7[-8],r11
8000d3b8:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8000d3bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d3c0:	58 08       	cp.w	r8,0
8000d3c2:	c0 91       	brne	8000d3d4 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000d3c4:	ee fa ff f4 	ld.w	r10,r7[-12]
8000d3c8:	30 0b       	mov	r11,0
8000d3ca:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d3ce:	f0 16 00 31 	mcall	r6[196]
8000d3d2:	c0 98       	rjmp	8000d3e4 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000d3d4:	ee fa ff f4 	ld.w	r10,r7[-12]
8000d3d8:	ee fb ff f8 	ld.w	r11,r7[-8]
8000d3dc:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d3e0:	f0 16 00 21 	mcall	r6[132]
	}
}
8000d3e4:	2f dd       	sub	sp,-12
8000d3e6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d3ea:	00 00       	add	r0,r0
8000d3ec:	80 00       	ld.sh	r0,r0[0x0]
8000d3ee:	d2 32       	popm	r0-r7,r12

8000d3f0 <_mav_put_char_array>:

/*
 * Place a char array into a buffer
 */
static inline void _mav_put_char_array(char *buf, uint8_t wire_offset, const char *b, uint8_t array_length)
{
8000d3f0:	eb cd 40 c0 	pushm	r6-r7,lr
8000d3f4:	1a 97       	mov	r7,sp
8000d3f6:	20 4d       	sub	sp,16
8000d3f8:	48 e6       	lddpc	r6,8000d430 <_mav_put_char_array+0x40>
8000d3fa:	1e 26       	rsub	r6,pc
8000d3fc:	ef 4c ff fc 	st.w	r7[-4],r12
8000d400:	ef 4a ff f4 	st.w	r7[-12],r10
8000d404:	12 98       	mov	r8,r9
8000d406:	16 99       	mov	r9,r11
8000d408:	ef 69 ff f8 	st.b	r7[-8],r9
8000d40c:	ef 68 ff f0 	st.b	r7[-16],r8
	mav_array_memcpy(&buf[wire_offset], b, array_length);
8000d410:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000d414:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d418:	ee fa ff fc 	ld.w	r10,r7[-4]
8000d41c:	f4 08 00 08 	add	r8,r10,r8
8000d420:	12 9a       	mov	r10,r9
8000d422:	ee fb ff f4 	ld.w	r11,r7[-12]
8000d426:	10 9c       	mov	r12,r8
8000d428:	cb ef       	rcall	8000d3a4 <mav_array_memcpy>

}
8000d42a:	2f cd       	sub	sp,-16
8000d42c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d430:	80 00       	ld.sh	r0,r0[0x0]
8000d432:	d2 7e       	*unknown*

8000d434 <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
8000d434:	eb cd 40 c0 	pushm	r6-r7,lr
8000d438:	1a 97       	mov	r7,sp
8000d43a:	20 3d       	sub	sp,12
8000d43c:	48 d6       	lddpc	r6,8000d470 <_MAV_RETURN_uint16_t+0x3c>
8000d43e:	1e 26       	rsub	r6,pc
8000d440:	ef 4c ff f8 	st.w	r7[-8],r12
8000d444:	16 98       	mov	r8,r11
8000d446:	ef 68 ff f4 	st.b	r7[-12],r8
8000d44a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d44e:	2f 88       	sub	r8,-8
8000d450:	10 99       	mov	r9,r8
8000d452:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d456:	10 09       	add	r9,r8
8000d458:	ee c8 00 02 	sub	r8,r7,2
8000d45c:	12 9b       	mov	r11,r9
8000d45e:	10 9c       	mov	r12,r8
8000d460:	c0 cf       	rcall	8000d278 <byte_swap_2>
8000d462:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000d466:	10 9c       	mov	r12,r8
8000d468:	2f dd       	sub	sp,-12
8000d46a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d46e:	00 00       	add	r0,r0
8000d470:	80 00       	ld.sh	r0,r0[0x0]
8000d472:	d2 c2       	popm	r8-r10,r12

8000d474 <_MAV_RETURN_float>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
_MAV_MSG_RETURN_TYPE(int32_t,  4)
_MAV_MSG_RETURN_TYPE(uint64_t, 8)
_MAV_MSG_RETURN_TYPE(int64_t,  8)
_MAV_MSG_RETURN_TYPE(float,    4)
8000d474:	eb cd 40 c0 	pushm	r6-r7,lr
8000d478:	1a 97       	mov	r7,sp
8000d47a:	20 3d       	sub	sp,12
8000d47c:	48 d6       	lddpc	r6,8000d4b0 <_MAV_RETURN_float+0x3c>
8000d47e:	1e 26       	rsub	r6,pc
8000d480:	ef 4c ff f8 	st.w	r7[-8],r12
8000d484:	16 98       	mov	r8,r11
8000d486:	ef 68 ff f4 	st.b	r7[-12],r8
8000d48a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d48e:	2f 88       	sub	r8,-8
8000d490:	10 99       	mov	r9,r8
8000d492:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000d496:	10 09       	add	r9,r8
8000d498:	ee c8 00 04 	sub	r8,r7,4
8000d49c:	12 9b       	mov	r11,r9
8000d49e:	10 9c       	mov	r12,r8
8000d4a0:	c0 6f       	rcall	8000d2ac <byte_swap_4>
8000d4a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d4a6:	10 9c       	mov	r12,r8
8000d4a8:	2f dd       	sub	sp,-12
8000d4aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d4ae:	00 00       	add	r0,r0
8000d4b0:	80 00       	ld.sh	r0,r0[0x0]
8000d4b2:	d3 02       	popm	r11-r12

8000d4b4 <mavlink_msg_heartbeat_send>:
 * @param system_status System status flag, see MAV_STATE ENUM
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_heartbeat_send(mavlink_channel_t chan, uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
8000d4b4:	eb cd 40 c0 	pushm	r6-r7,lr
8000d4b8:	1a 97       	mov	r7,sp
8000d4ba:	20 9d       	sub	sp,36
8000d4bc:	49 c6       	lddpc	r6,8000d52c <mavlink_msg_heartbeat_send+0x78>
8000d4be:	1e 26       	rsub	r6,pc
8000d4c0:	ee ce ff f4 	sub	lr,r7,-12
8000d4c4:	ef 4c ff f0 	st.w	r7[-16],r12
8000d4c8:	ef 48 ff e0 	st.w	r7[-32],r8
8000d4cc:	7c 08       	ld.w	r8,lr[0x0]
8000d4ce:	ef 6b ff ec 	st.b	r7[-20],r11
8000d4d2:	ef 6a ff e8 	st.b	r7[-24],r10
8000d4d6:	ef 69 ff e4 	st.b	r7[-28],r9
8000d4da:	ef 68 ff dc 	st.b	r7[-36],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_HEARTBEAT_LEN];
	_mav_put_uint32_t(buf, 0, custom_mode);
8000d4de:	ee c9 00 20 	sub	r9,r7,32
8000d4e2:	ee c8 00 0c 	sub	r8,r7,12
8000d4e6:	12 9b       	mov	r11,r9
8000d4e8:	10 9c       	mov	r12,r8
8000d4ea:	ce 1e       	rcall	8000d2ac <byte_swap_4>
	_mav_put_uint8_t(buf, 4, type);
8000d4ec:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000d4f0:	ef 68 ff f8 	st.b	r7[-8],r8
	_mav_put_uint8_t(buf, 5, autopilot);
8000d4f4:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000d4f8:	ef 68 ff f9 	st.b	r7[-7],r8
	_mav_put_uint8_t(buf, 6, base_mode);
8000d4fc:	ef 38 ff e4 	ld.ub	r8,r7[-28]
8000d500:	ef 68 ff fa 	st.b	r7[-6],r8
	_mav_put_uint8_t(buf, 7, system_status);
8000d504:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000d508:	ef 68 ff fb 	st.b	r7[-5],r8
	_mav_put_uint8_t(buf, 8, 3);
8000d50c:	30 38       	mov	r8,3
8000d50e:	ef 68 ff fc 	st.b	r7[-4],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, buf, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
8000d512:	ee ca 00 0c 	sub	r10,r7,12
8000d516:	33 28       	mov	r8,50
8000d518:	30 99       	mov	r9,9
8000d51a:	30 0b       	mov	r11,0
8000d51c:	ee fc ff f0 	ld.w	r12,r7[-16]
8000d520:	fe b0 fd fe 	rcall	8000d11c <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, (const char *)&packet, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, (const char *)&packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#endif
#endif
}
8000d524:	2f 7d       	sub	sp,-36
8000d526:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d52a:	00 00       	add	r0,r0
8000d52c:	80 00       	ld.sh	r0,r0[0x0]
8000d52e:	d3 42       	popm	r8-r9,r11-r12

8000d530 <mavlink_msg_gps_raw_int_send>:
 * @param satellites_visible Number of satellites visible. If unknown, set to 255
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_gps_raw_int_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible)
{
8000d530:	eb cd 40 e0 	pushm	r5-r7,lr
8000d534:	1a 97       	mov	r7,sp
8000d536:	21 2d       	sub	sp,72
8000d538:	4b 76       	lddpc	r6,8000d614 <mavlink_msg_gps_raw_int_send+0xe4>
8000d53a:	1e 26       	rsub	r6,pc
8000d53c:	ee c5 ff f0 	sub	r5,r7,-16
8000d540:	ef 4c ff dc 	st.w	r7[-36],r12
8000d544:	ee eb ff d4 	st.d	r7[-44],r10
8000d548:	12 9e       	mov	lr,r9
8000d54a:	ef 48 ff cc 	st.w	r7[-52],r8
8000d54e:	6a 2c       	ld.w	r12,r5[0x8]
8000d550:	6a 3b       	ld.w	r11,r5[0xc]
8000d552:	6a 4a       	ld.w	r10,r5[0x10]
8000d554:	6a 59       	ld.w	r9,r5[0x14]
8000d556:	6a 68       	ld.w	r8,r5[0x18]
8000d558:	ef 6e ff d0 	st.b	r7[-48],lr
8000d55c:	ef 5c ff c8 	st.h	r7[-56],r12
8000d560:	ef 5b ff c4 	st.h	r7[-60],r11
8000d564:	ef 5a ff c0 	st.h	r7[-64],r10
8000d568:	ef 59 ff bc 	st.h	r7[-68],r9
8000d56c:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_GPS_RAW_INT_LEN];
	_mav_put_uint64_t(buf, 0, time_usec);
8000d570:	ee c9 00 2c 	sub	r9,r7,44
8000d574:	ee c8 00 20 	sub	r8,r7,32
8000d578:	12 9b       	mov	r11,r9
8000d57a:	10 9c       	mov	r12,r8
8000d57c:	cc 4e       	rcall	8000d304 <byte_swap_8>
	_mav_put_int32_t(buf, 8, lat);
8000d57e:	ee c9 00 34 	sub	r9,r7,52
8000d582:	ee c8 00 20 	sub	r8,r7,32
8000d586:	2f 88       	sub	r8,-8
8000d588:	12 9b       	mov	r11,r9
8000d58a:	10 9c       	mov	r12,r8
8000d58c:	c9 0e       	rcall	8000d2ac <byte_swap_4>
	_mav_put_int32_t(buf, 12, lon);
8000d58e:	0a 99       	mov	r9,r5
8000d590:	ee c8 00 20 	sub	r8,r7,32
8000d594:	2f 48       	sub	r8,-12
8000d596:	12 9b       	mov	r11,r9
8000d598:	10 9c       	mov	r12,r8
8000d59a:	c8 9e       	rcall	8000d2ac <byte_swap_4>
	_mav_put_int32_t(buf, 16, alt);
8000d59c:	ea c9 ff fc 	sub	r9,r5,-4
8000d5a0:	ee c8 00 20 	sub	r8,r7,32
8000d5a4:	2f 08       	sub	r8,-16
8000d5a6:	12 9b       	mov	r11,r9
8000d5a8:	10 9c       	mov	r12,r8
8000d5aa:	c8 1e       	rcall	8000d2ac <byte_swap_4>
	_mav_put_uint16_t(buf, 20, eph);
8000d5ac:	ee c9 00 38 	sub	r9,r7,56
8000d5b0:	ee c8 00 20 	sub	r8,r7,32
8000d5b4:	2e c8       	sub	r8,-20
8000d5b6:	12 9b       	mov	r11,r9
8000d5b8:	10 9c       	mov	r12,r8
8000d5ba:	c5 fe       	rcall	8000d278 <byte_swap_2>
	_mav_put_uint16_t(buf, 22, epv);
8000d5bc:	ee c9 00 3c 	sub	r9,r7,60
8000d5c0:	ee c8 00 20 	sub	r8,r7,32
8000d5c4:	2e a8       	sub	r8,-22
8000d5c6:	12 9b       	mov	r11,r9
8000d5c8:	10 9c       	mov	r12,r8
8000d5ca:	c5 7e       	rcall	8000d278 <byte_swap_2>
	_mav_put_uint16_t(buf, 24, vel);
8000d5cc:	ee c9 00 40 	sub	r9,r7,64
8000d5d0:	ee c8 00 20 	sub	r8,r7,32
8000d5d4:	2e 88       	sub	r8,-24
8000d5d6:	12 9b       	mov	r11,r9
8000d5d8:	10 9c       	mov	r12,r8
8000d5da:	c4 fe       	rcall	8000d278 <byte_swap_2>
	_mav_put_uint16_t(buf, 26, cog);
8000d5dc:	ee c9 00 44 	sub	r9,r7,68
8000d5e0:	ee c8 00 20 	sub	r8,r7,32
8000d5e4:	2e 68       	sub	r8,-26
8000d5e6:	12 9b       	mov	r11,r9
8000d5e8:	10 9c       	mov	r12,r8
8000d5ea:	c4 7e       	rcall	8000d278 <byte_swap_2>
	_mav_put_uint8_t(buf, 28, fix_type);
8000d5ec:	ef 38 ff d0 	ld.ub	r8,r7[-48]
8000d5f0:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 29, satellites_visible);
8000d5f4:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8000d5f8:	ef 68 ff fd 	st.b	r7[-3],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GPS_RAW_INT, buf, MAVLINK_MSG_ID_GPS_RAW_INT_LEN, MAVLINK_MSG_ID_GPS_RAW_INT_CRC);
8000d5fc:	ee ca 00 20 	sub	r10,r7,32
8000d600:	31 88       	mov	r8,24
8000d602:	31 e9       	mov	r9,30
8000d604:	31 8b       	mov	r11,24
8000d606:	ee fc ff dc 	ld.w	r12,r7[-36]
8000d60a:	fe b0 fd 89 	rcall	8000d11c <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GPS_RAW_INT, (const char *)&packet, MAVLINK_MSG_ID_GPS_RAW_INT_LEN, MAVLINK_MSG_ID_GPS_RAW_INT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GPS_RAW_INT, (const char *)&packet, MAVLINK_MSG_ID_GPS_RAW_INT_LEN);
#endif
#endif
}
8000d60e:	2e ed       	sub	sp,-72
8000d610:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000d614:	80 00       	ld.sh	r0,r0[0x0]
8000d616:	d3 be       	*unknown*

8000d618 <mavlink_msg_scaled_imu_send>:
 * @param zmag Z Magnetic field (milli tesla)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_scaled_imu_send(mavlink_channel_t chan, uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
8000d618:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000d61c:	1a 97       	mov	r7,sp
8000d61e:	21 1d       	sub	sp,68
8000d620:	4c 66       	lddpc	r6,8000d738 <mavlink_msg_scaled_imu_send+0x120>
8000d622:	1e 26       	rsub	r6,pc
8000d624:	ee ce ff e4 	sub	lr,r7,-28
8000d628:	ef 4c ff e4 	st.w	r7[-28],r12
8000d62c:	ef 4b ff e0 	st.w	r7[-32],r11
8000d630:	14 91       	mov	r1,r10
8000d632:	12 92       	mov	r2,r9
8000d634:	10 93       	mov	r3,r8
8000d636:	7c 05       	ld.w	r5,lr[0x0]
8000d638:	7c 1c       	ld.w	r12,lr[0x4]
8000d63a:	7c 2b       	ld.w	r11,lr[0x8]
8000d63c:	7c 3a       	ld.w	r10,lr[0xc]
8000d63e:	7c 49       	ld.w	r9,lr[0x10]
8000d640:	7c 58       	ld.w	r8,lr[0x14]
8000d642:	02 9e       	mov	lr,r1
8000d644:	ef 5e ff dc 	st.h	r7[-36],lr
8000d648:	04 9e       	mov	lr,r2
8000d64a:	ef 5e ff d8 	st.h	r7[-40],lr
8000d64e:	06 9e       	mov	lr,r3
8000d650:	ef 5e ff d4 	st.h	r7[-44],lr
8000d654:	0a 9e       	mov	lr,r5
8000d656:	ef 5e ff d0 	st.h	r7[-48],lr
8000d65a:	ef 5c ff cc 	st.h	r7[-52],r12
8000d65e:	ef 5b ff c8 	st.h	r7[-56],r11
8000d662:	ef 5a ff c4 	st.h	r7[-60],r10
8000d666:	ef 59 ff c0 	st.h	r7[-64],r9
8000d66a:	ef 58 ff bc 	st.h	r7[-68],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_SCALED_IMU_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000d66e:	ee c9 00 20 	sub	r9,r7,32
8000d672:	ee c8 00 18 	sub	r8,r7,24
8000d676:	12 9b       	mov	r11,r9
8000d678:	10 9c       	mov	r12,r8
8000d67a:	c1 9e       	rcall	8000d2ac <byte_swap_4>
	_mav_put_int16_t(buf, 4, xacc);
8000d67c:	ee c9 00 24 	sub	r9,r7,36
8000d680:	ee c8 00 18 	sub	r8,r7,24
8000d684:	2f c8       	sub	r8,-4
8000d686:	12 9b       	mov	r11,r9
8000d688:	10 9c       	mov	r12,r8
8000d68a:	fe b0 fd f7 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 6, yacc);
8000d68e:	ee c9 00 28 	sub	r9,r7,40
8000d692:	ee c8 00 18 	sub	r8,r7,24
8000d696:	2f a8       	sub	r8,-6
8000d698:	12 9b       	mov	r11,r9
8000d69a:	10 9c       	mov	r12,r8
8000d69c:	fe b0 fd ee 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 8, zacc);
8000d6a0:	ee c9 00 2c 	sub	r9,r7,44
8000d6a4:	ee c8 00 18 	sub	r8,r7,24
8000d6a8:	2f 88       	sub	r8,-8
8000d6aa:	12 9b       	mov	r11,r9
8000d6ac:	10 9c       	mov	r12,r8
8000d6ae:	fe b0 fd e5 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 10, xgyro);
8000d6b2:	ee c9 00 30 	sub	r9,r7,48
8000d6b6:	ee c8 00 18 	sub	r8,r7,24
8000d6ba:	2f 68       	sub	r8,-10
8000d6bc:	12 9b       	mov	r11,r9
8000d6be:	10 9c       	mov	r12,r8
8000d6c0:	fe b0 fd dc 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 12, ygyro);
8000d6c4:	ee c9 00 34 	sub	r9,r7,52
8000d6c8:	ee c8 00 18 	sub	r8,r7,24
8000d6cc:	2f 48       	sub	r8,-12
8000d6ce:	12 9b       	mov	r11,r9
8000d6d0:	10 9c       	mov	r12,r8
8000d6d2:	fe b0 fd d3 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 14, zgyro);
8000d6d6:	ee c9 00 38 	sub	r9,r7,56
8000d6da:	ee c8 00 18 	sub	r8,r7,24
8000d6de:	2f 28       	sub	r8,-14
8000d6e0:	12 9b       	mov	r11,r9
8000d6e2:	10 9c       	mov	r12,r8
8000d6e4:	fe b0 fd ca 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 16, xmag);
8000d6e8:	ee c9 00 3c 	sub	r9,r7,60
8000d6ec:	ee c8 00 18 	sub	r8,r7,24
8000d6f0:	2f 08       	sub	r8,-16
8000d6f2:	12 9b       	mov	r11,r9
8000d6f4:	10 9c       	mov	r12,r8
8000d6f6:	fe b0 fd c1 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 18, ymag);
8000d6fa:	ee c9 00 40 	sub	r9,r7,64
8000d6fe:	ee c8 00 18 	sub	r8,r7,24
8000d702:	2e e8       	sub	r8,-18
8000d704:	12 9b       	mov	r11,r9
8000d706:	10 9c       	mov	r12,r8
8000d708:	fe b0 fd b8 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 20, zmag);
8000d70c:	ee c9 00 44 	sub	r9,r7,68
8000d710:	ee c8 00 18 	sub	r8,r7,24
8000d714:	2e c8       	sub	r8,-20
8000d716:	12 9b       	mov	r11,r9
8000d718:	10 9c       	mov	r12,r8
8000d71a:	fe b0 fd af 	rcall	8000d278 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_IMU, buf, MAVLINK_MSG_ID_SCALED_IMU_LEN, MAVLINK_MSG_ID_SCALED_IMU_CRC);
8000d71e:	ee ca 00 18 	sub	r10,r7,24
8000d722:	e0 68 00 aa 	mov	r8,170
8000d726:	31 69       	mov	r9,22
8000d728:	31 ab       	mov	r11,26
8000d72a:	ee fc ff e4 	ld.w	r12,r7[-28]
8000d72e:	fe b0 fc f7 	rcall	8000d11c <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_IMU, (const char *)&packet, MAVLINK_MSG_ID_SCALED_IMU_LEN, MAVLINK_MSG_ID_SCALED_IMU_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_IMU, (const char *)&packet, MAVLINK_MSG_ID_SCALED_IMU_LEN);
#endif
#endif
}
8000d732:	2e fd       	sub	sp,-68
8000d734:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000d738:	80 00       	ld.sh	r0,r0[0x0]
8000d73a:	d4 a6       	*unknown*

8000d73c <mavlink_msg_raw_imu_send>:
 * @param zmag Z Magnetic field (raw)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_raw_imu_send(mavlink_channel_t chan, uint64_t time_usec, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
8000d73c:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000d740:	1a 97       	mov	r7,sp
8000d742:	21 3d       	sub	sp,76
8000d744:	4c 76       	lddpc	r6,8000d860 <mavlink_msg_raw_imu_send+0x124>
8000d746:	1e 26       	rsub	r6,pc
8000d748:	ee ce ff e4 	sub	lr,r7,-28
8000d74c:	ef 4c ff e0 	st.w	r7[-32],r12
8000d750:	ee eb ff d8 	st.d	r7[-40],r10
8000d754:	12 91       	mov	r1,r9
8000d756:	10 92       	mov	r2,r8
8000d758:	7c 03       	ld.w	r3,lr[0x0]
8000d75a:	7c 15       	ld.w	r5,lr[0x4]
8000d75c:	7c 2c       	ld.w	r12,lr[0x8]
8000d75e:	7c 3b       	ld.w	r11,lr[0xc]
8000d760:	7c 4a       	ld.w	r10,lr[0x10]
8000d762:	7c 59       	ld.w	r9,lr[0x14]
8000d764:	7c 68       	ld.w	r8,lr[0x18]
8000d766:	02 9e       	mov	lr,r1
8000d768:	ef 5e ff d4 	st.h	r7[-44],lr
8000d76c:	04 9e       	mov	lr,r2
8000d76e:	ef 5e ff d0 	st.h	r7[-48],lr
8000d772:	06 9e       	mov	lr,r3
8000d774:	ef 5e ff cc 	st.h	r7[-52],lr
8000d778:	0a 9e       	mov	lr,r5
8000d77a:	ef 5e ff c8 	st.h	r7[-56],lr
8000d77e:	ef 5c ff c4 	st.h	r7[-60],r12
8000d782:	ef 5b ff c0 	st.h	r7[-64],r11
8000d786:	ef 5a ff bc 	st.h	r7[-68],r10
8000d78a:	ef 59 ff b8 	st.h	r7[-72],r9
8000d78e:	ef 58 ff b4 	st.h	r7[-76],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_RAW_IMU_LEN];
	_mav_put_uint64_t(buf, 0, time_usec);
8000d792:	ee c9 00 28 	sub	r9,r7,40
8000d796:	ee c8 00 1c 	sub	r8,r7,28
8000d79a:	12 9b       	mov	r11,r9
8000d79c:	10 9c       	mov	r12,r8
8000d79e:	fe b0 fd b3 	rcall	8000d304 <byte_swap_8>
	_mav_put_int16_t(buf, 8, xacc);
8000d7a2:	ee c9 00 2c 	sub	r9,r7,44
8000d7a6:	ee c8 00 1c 	sub	r8,r7,28
8000d7aa:	2f 88       	sub	r8,-8
8000d7ac:	12 9b       	mov	r11,r9
8000d7ae:	10 9c       	mov	r12,r8
8000d7b0:	fe b0 fd 64 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 10, yacc);
8000d7b4:	ee c9 00 30 	sub	r9,r7,48
8000d7b8:	ee c8 00 1c 	sub	r8,r7,28
8000d7bc:	2f 68       	sub	r8,-10
8000d7be:	12 9b       	mov	r11,r9
8000d7c0:	10 9c       	mov	r12,r8
8000d7c2:	fe b0 fd 5b 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 12, zacc);
8000d7c6:	ee c9 00 34 	sub	r9,r7,52
8000d7ca:	ee c8 00 1c 	sub	r8,r7,28
8000d7ce:	2f 48       	sub	r8,-12
8000d7d0:	12 9b       	mov	r11,r9
8000d7d2:	10 9c       	mov	r12,r8
8000d7d4:	fe b0 fd 52 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 14, xgyro);
8000d7d8:	ee c9 00 38 	sub	r9,r7,56
8000d7dc:	ee c8 00 1c 	sub	r8,r7,28
8000d7e0:	2f 28       	sub	r8,-14
8000d7e2:	12 9b       	mov	r11,r9
8000d7e4:	10 9c       	mov	r12,r8
8000d7e6:	fe b0 fd 49 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 16, ygyro);
8000d7ea:	ee c9 00 3c 	sub	r9,r7,60
8000d7ee:	ee c8 00 1c 	sub	r8,r7,28
8000d7f2:	2f 08       	sub	r8,-16
8000d7f4:	12 9b       	mov	r11,r9
8000d7f6:	10 9c       	mov	r12,r8
8000d7f8:	fe b0 fd 40 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 18, zgyro);
8000d7fc:	ee c9 00 40 	sub	r9,r7,64
8000d800:	ee c8 00 1c 	sub	r8,r7,28
8000d804:	2e e8       	sub	r8,-18
8000d806:	12 9b       	mov	r11,r9
8000d808:	10 9c       	mov	r12,r8
8000d80a:	fe b0 fd 37 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 20, xmag);
8000d80e:	ee c9 00 44 	sub	r9,r7,68
8000d812:	ee c8 00 1c 	sub	r8,r7,28
8000d816:	2e c8       	sub	r8,-20
8000d818:	12 9b       	mov	r11,r9
8000d81a:	10 9c       	mov	r12,r8
8000d81c:	fe b0 fd 2e 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 22, ymag);
8000d820:	ee c9 00 48 	sub	r9,r7,72
8000d824:	ee c8 00 1c 	sub	r8,r7,28
8000d828:	2e a8       	sub	r8,-22
8000d82a:	12 9b       	mov	r11,r9
8000d82c:	10 9c       	mov	r12,r8
8000d82e:	fe b0 fd 25 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 24, zmag);
8000d832:	ee c9 00 4c 	sub	r9,r7,76
8000d836:	ee c8 00 1c 	sub	r8,r7,28
8000d83a:	2e 88       	sub	r8,-24
8000d83c:	12 9b       	mov	r11,r9
8000d83e:	10 9c       	mov	r12,r8
8000d840:	fe b0 fd 1c 	rcall	8000d278 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RAW_IMU, buf, MAVLINK_MSG_ID_RAW_IMU_LEN, MAVLINK_MSG_ID_RAW_IMU_CRC);
8000d844:	ee ca 00 1c 	sub	r10,r7,28
8000d848:	e0 68 00 90 	mov	r8,144
8000d84c:	31 a9       	mov	r9,26
8000d84e:	31 bb       	mov	r11,27
8000d850:	ee fc ff e0 	ld.w	r12,r7[-32]
8000d854:	fe b0 fc 64 	rcall	8000d11c <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RAW_IMU, (const char *)&packet, MAVLINK_MSG_ID_RAW_IMU_LEN, MAVLINK_MSG_ID_RAW_IMU_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RAW_IMU, (const char *)&packet, MAVLINK_MSG_ID_RAW_IMU_LEN);
#endif
#endif
}
8000d858:	2e dd       	sub	sp,-76
8000d85a:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000d85e:	00 00       	add	r0,r0
8000d860:	80 00       	ld.sh	r0,r0[0x0]
8000d862:	d5 ca       	popm	r8-r11,lr

8000d864 <mavlink_msg_scaled_pressure_send>:
 * @param temperature Temperature measurement (0.01 degrees celsius)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_scaled_pressure_send(mavlink_channel_t chan, uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
{
8000d864:	eb cd 40 c0 	pushm	r6-r7,lr
8000d868:	1a 97       	mov	r7,sp
8000d86a:	20 9d       	sub	sp,36
8000d86c:	49 e6       	lddpc	r6,8000d8e4 <mavlink_msg_scaled_pressure_send+0x80>
8000d86e:	1e 26       	rsub	r6,pc
8000d870:	ef 4c ff ec 	st.w	r7[-20],r12
8000d874:	ef 4b ff e8 	st.w	r7[-24],r11
8000d878:	ef 4a ff e4 	st.w	r7[-28],r10
8000d87c:	ef 49 ff e0 	st.w	r7[-32],r9
8000d880:	ef 58 ff dc 	st.h	r7[-36],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_SCALED_PRESSURE_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000d884:	ee c9 00 18 	sub	r9,r7,24
8000d888:	ee c8 00 10 	sub	r8,r7,16
8000d88c:	12 9b       	mov	r11,r9
8000d88e:	10 9c       	mov	r12,r8
8000d890:	fe b0 fd 0e 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 4, press_abs);
8000d894:	ee c9 00 1c 	sub	r9,r7,28
8000d898:	ee c8 00 10 	sub	r8,r7,16
8000d89c:	2f c8       	sub	r8,-4
8000d89e:	12 9b       	mov	r11,r9
8000d8a0:	10 9c       	mov	r12,r8
8000d8a2:	fe b0 fd 05 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 8, press_diff);
8000d8a6:	ee c9 00 20 	sub	r9,r7,32
8000d8aa:	ee c8 00 10 	sub	r8,r7,16
8000d8ae:	2f 88       	sub	r8,-8
8000d8b0:	12 9b       	mov	r11,r9
8000d8b2:	10 9c       	mov	r12,r8
8000d8b4:	fe b0 fc fc 	rcall	8000d2ac <byte_swap_4>
	_mav_put_int16_t(buf, 12, temperature);
8000d8b8:	ee c9 00 24 	sub	r9,r7,36
8000d8bc:	ee c8 00 10 	sub	r8,r7,16
8000d8c0:	2f 48       	sub	r8,-12
8000d8c2:	12 9b       	mov	r11,r9
8000d8c4:	10 9c       	mov	r12,r8
8000d8c6:	fe b0 fc d9 	rcall	8000d278 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_PRESSURE, buf, MAVLINK_MSG_ID_SCALED_PRESSURE_LEN, MAVLINK_MSG_ID_SCALED_PRESSURE_CRC);
8000d8ca:	ee ca 00 10 	sub	r10,r7,16
8000d8ce:	37 38       	mov	r8,115
8000d8d0:	30 e9       	mov	r9,14
8000d8d2:	31 db       	mov	r11,29
8000d8d4:	ee fc ff ec 	ld.w	r12,r7[-20]
8000d8d8:	fe b0 fc 22 	rcall	8000d11c <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_PRESSURE, (const char *)&packet, MAVLINK_MSG_ID_SCALED_PRESSURE_LEN, MAVLINK_MSG_ID_SCALED_PRESSURE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_PRESSURE, (const char *)&packet, MAVLINK_MSG_ID_SCALED_PRESSURE_LEN);
#endif
#endif
}
8000d8dc:	2f 7d       	sub	sp,-36
8000d8de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d8e2:	00 00       	add	r0,r0
8000d8e4:	80 00       	ld.sh	r0,r0[0x0]
8000d8e6:	d6 f2       	popm	r0-r10,r12,lr

8000d8e8 <mavlink_msg_attitude_send>:
 * @param yawspeed Yaw angular speed (rad/s)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_attitude_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed)
{
8000d8e8:	eb cd 40 e0 	pushm	r5-r7,lr
8000d8ec:	1a 97       	mov	r7,sp
8000d8ee:	20 cd       	sub	sp,48
8000d8f0:	4a c6       	lddpc	r6,8000d9a0 <mavlink_msg_attitude_send+0xb8>
8000d8f2:	1e 26       	rsub	r6,pc
8000d8f4:	ee c5 ff f0 	sub	r5,r7,-16
8000d8f8:	ef 4c ff e0 	st.w	r7[-32],r12
8000d8fc:	ef 4b ff dc 	st.w	r7[-36],r11
8000d900:	ef 4a ff d8 	st.w	r7[-40],r10
8000d904:	ef 49 ff d4 	st.w	r7[-44],r9
8000d908:	ef 48 ff d0 	st.w	r7[-48],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ATTITUDE_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000d90c:	ee c9 00 24 	sub	r9,r7,36
8000d910:	ee c8 00 1c 	sub	r8,r7,28
8000d914:	12 9b       	mov	r11,r9
8000d916:	10 9c       	mov	r12,r8
8000d918:	fe b0 fc ca 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 4, roll);
8000d91c:	ee c9 00 28 	sub	r9,r7,40
8000d920:	ee c8 00 1c 	sub	r8,r7,28
8000d924:	2f c8       	sub	r8,-4
8000d926:	12 9b       	mov	r11,r9
8000d928:	10 9c       	mov	r12,r8
8000d92a:	fe b0 fc c1 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 8, pitch);
8000d92e:	ee c9 00 2c 	sub	r9,r7,44
8000d932:	ee c8 00 1c 	sub	r8,r7,28
8000d936:	2f 88       	sub	r8,-8
8000d938:	12 9b       	mov	r11,r9
8000d93a:	10 9c       	mov	r12,r8
8000d93c:	fe b0 fc b8 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 12, yaw);
8000d940:	ee c9 00 30 	sub	r9,r7,48
8000d944:	ee c8 00 1c 	sub	r8,r7,28
8000d948:	2f 48       	sub	r8,-12
8000d94a:	12 9b       	mov	r11,r9
8000d94c:	10 9c       	mov	r12,r8
8000d94e:	fe b0 fc af 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 16, rollspeed);
8000d952:	0a 99       	mov	r9,r5
8000d954:	ee c8 00 1c 	sub	r8,r7,28
8000d958:	2f 08       	sub	r8,-16
8000d95a:	12 9b       	mov	r11,r9
8000d95c:	10 9c       	mov	r12,r8
8000d95e:	fe b0 fc a7 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 20, pitchspeed);
8000d962:	ea c9 ff fc 	sub	r9,r5,-4
8000d966:	ee c8 00 1c 	sub	r8,r7,28
8000d96a:	2e c8       	sub	r8,-20
8000d96c:	12 9b       	mov	r11,r9
8000d96e:	10 9c       	mov	r12,r8
8000d970:	fe b0 fc 9e 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 24, yawspeed);
8000d974:	ea c9 ff f8 	sub	r9,r5,-8
8000d978:	ee c8 00 1c 	sub	r8,r7,28
8000d97c:	2e 88       	sub	r8,-24
8000d97e:	12 9b       	mov	r11,r9
8000d980:	10 9c       	mov	r12,r8
8000d982:	fe b0 fc 95 	rcall	8000d2ac <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE, buf, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
8000d986:	ee ca 00 1c 	sub	r10,r7,28
8000d98a:	32 78       	mov	r8,39
8000d98c:	31 c9       	mov	r9,28
8000d98e:	31 eb       	mov	r11,30
8000d990:	ee fc ff e0 	ld.w	r12,r7[-32]
8000d994:	fe b0 fb c4 	rcall	8000d11c <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_LEN);
#endif
#endif
}
8000d998:	2f 4d       	sub	sp,-48
8000d99a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000d99e:	00 00       	add	r0,r0
8000d9a0:	80 00       	ld.sh	r0,r0[0x0]
8000d9a2:	d7 76       	*unknown*

8000d9a4 <mavlink_msg_attitude_quaternion_send>:
 * @param yawspeed Yaw angular speed (rad/s)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_attitude_quaternion_send(mavlink_channel_t chan, uint32_t time_boot_ms, float q1, float q2, float q3, float q4, float rollspeed, float pitchspeed, float yawspeed)
{
8000d9a4:	eb cd 40 e0 	pushm	r5-r7,lr
8000d9a8:	1a 97       	mov	r7,sp
8000d9aa:	20 dd       	sub	sp,52
8000d9ac:	4b 16       	lddpc	r6,8000da70 <mavlink_msg_attitude_quaternion_send+0xcc>
8000d9ae:	1e 26       	rsub	r6,pc
8000d9b0:	ee c5 ff f0 	sub	r5,r7,-16
8000d9b4:	ef 4c ff dc 	st.w	r7[-36],r12
8000d9b8:	ef 4b ff d8 	st.w	r7[-40],r11
8000d9bc:	ef 4a ff d4 	st.w	r7[-44],r10
8000d9c0:	ef 49 ff d0 	st.w	r7[-48],r9
8000d9c4:	ef 48 ff cc 	st.w	r7[-52],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000d9c8:	ee c9 00 28 	sub	r9,r7,40
8000d9cc:	ee c8 00 20 	sub	r8,r7,32
8000d9d0:	12 9b       	mov	r11,r9
8000d9d2:	10 9c       	mov	r12,r8
8000d9d4:	fe b0 fc 6c 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 4, q1);
8000d9d8:	ee c9 00 2c 	sub	r9,r7,44
8000d9dc:	ee c8 00 20 	sub	r8,r7,32
8000d9e0:	2f c8       	sub	r8,-4
8000d9e2:	12 9b       	mov	r11,r9
8000d9e4:	10 9c       	mov	r12,r8
8000d9e6:	fe b0 fc 63 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 8, q2);
8000d9ea:	ee c9 00 30 	sub	r9,r7,48
8000d9ee:	ee c8 00 20 	sub	r8,r7,32
8000d9f2:	2f 88       	sub	r8,-8
8000d9f4:	12 9b       	mov	r11,r9
8000d9f6:	10 9c       	mov	r12,r8
8000d9f8:	fe b0 fc 5a 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 12, q3);
8000d9fc:	ee c9 00 34 	sub	r9,r7,52
8000da00:	ee c8 00 20 	sub	r8,r7,32
8000da04:	2f 48       	sub	r8,-12
8000da06:	12 9b       	mov	r11,r9
8000da08:	10 9c       	mov	r12,r8
8000da0a:	fe b0 fc 51 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 16, q4);
8000da0e:	0a 99       	mov	r9,r5
8000da10:	ee c8 00 20 	sub	r8,r7,32
8000da14:	2f 08       	sub	r8,-16
8000da16:	12 9b       	mov	r11,r9
8000da18:	10 9c       	mov	r12,r8
8000da1a:	fe b0 fc 49 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 20, rollspeed);
8000da1e:	ea c9 ff fc 	sub	r9,r5,-4
8000da22:	ee c8 00 20 	sub	r8,r7,32
8000da26:	2e c8       	sub	r8,-20
8000da28:	12 9b       	mov	r11,r9
8000da2a:	10 9c       	mov	r12,r8
8000da2c:	fe b0 fc 40 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 24, pitchspeed);
8000da30:	ea c9 ff f8 	sub	r9,r5,-8
8000da34:	ee c8 00 20 	sub	r8,r7,32
8000da38:	2e 88       	sub	r8,-24
8000da3a:	12 9b       	mov	r11,r9
8000da3c:	10 9c       	mov	r12,r8
8000da3e:	fe b0 fc 37 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 28, yawspeed);
8000da42:	ea c9 ff f4 	sub	r9,r5,-12
8000da46:	ee c8 00 20 	sub	r8,r7,32
8000da4a:	2e 48       	sub	r8,-28
8000da4c:	12 9b       	mov	r11,r9
8000da4e:	10 9c       	mov	r12,r8
8000da50:	fe b0 fc 2e 	rcall	8000d2ac <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE_QUATERNION, buf, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_CRC);
8000da54:	ee ca 00 20 	sub	r10,r7,32
8000da58:	e0 68 00 f6 	mov	r8,246
8000da5c:	32 09       	mov	r9,32
8000da5e:	31 fb       	mov	r11,31
8000da60:	ee fc ff dc 	ld.w	r12,r7[-36]
8000da64:	fe b0 fb 5c 	rcall	8000d11c <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE_QUATERNION, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE_QUATERNION, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN);
#endif
#endif
}
8000da68:	2f 3d       	sub	sp,-52
8000da6a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000da6e:	00 00       	add	r0,r0
8000da70:	80 00       	ld.sh	r0,r0[0x0]
8000da72:	d8 32       	popm	r0-r7,pc

8000da74 <mavlink_msg_local_position_ned_send>:
 * @param vz Z Speed
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_local_position_ned_send(mavlink_channel_t chan, uint32_t time_boot_ms, float x, float y, float z, float vx, float vy, float vz)
{
8000da74:	eb cd 40 e0 	pushm	r5-r7,lr
8000da78:	1a 97       	mov	r7,sp
8000da7a:	20 cd       	sub	sp,48
8000da7c:	4a c6       	lddpc	r6,8000db2c <mavlink_msg_local_position_ned_send+0xb8>
8000da7e:	1e 26       	rsub	r6,pc
8000da80:	ee c5 ff f0 	sub	r5,r7,-16
8000da84:	ef 4c ff e0 	st.w	r7[-32],r12
8000da88:	ef 4b ff dc 	st.w	r7[-36],r11
8000da8c:	ef 4a ff d8 	st.w	r7[-40],r10
8000da90:	ef 49 ff d4 	st.w	r7[-44],r9
8000da94:	ef 48 ff d0 	st.w	r7[-48],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000da98:	ee c9 00 24 	sub	r9,r7,36
8000da9c:	ee c8 00 1c 	sub	r8,r7,28
8000daa0:	12 9b       	mov	r11,r9
8000daa2:	10 9c       	mov	r12,r8
8000daa4:	fe b0 fc 04 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 4, x);
8000daa8:	ee c9 00 28 	sub	r9,r7,40
8000daac:	ee c8 00 1c 	sub	r8,r7,28
8000dab0:	2f c8       	sub	r8,-4
8000dab2:	12 9b       	mov	r11,r9
8000dab4:	10 9c       	mov	r12,r8
8000dab6:	fe b0 fb fb 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 8, y);
8000daba:	ee c9 00 2c 	sub	r9,r7,44
8000dabe:	ee c8 00 1c 	sub	r8,r7,28
8000dac2:	2f 88       	sub	r8,-8
8000dac4:	12 9b       	mov	r11,r9
8000dac6:	10 9c       	mov	r12,r8
8000dac8:	fe b0 fb f2 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 12, z);
8000dacc:	ee c9 00 30 	sub	r9,r7,48
8000dad0:	ee c8 00 1c 	sub	r8,r7,28
8000dad4:	2f 48       	sub	r8,-12
8000dad6:	12 9b       	mov	r11,r9
8000dad8:	10 9c       	mov	r12,r8
8000dada:	fe b0 fb e9 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 16, vx);
8000dade:	0a 99       	mov	r9,r5
8000dae0:	ee c8 00 1c 	sub	r8,r7,28
8000dae4:	2f 08       	sub	r8,-16
8000dae6:	12 9b       	mov	r11,r9
8000dae8:	10 9c       	mov	r12,r8
8000daea:	fe b0 fb e1 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 20, vy);
8000daee:	ea c9 ff fc 	sub	r9,r5,-4
8000daf2:	ee c8 00 1c 	sub	r8,r7,28
8000daf6:	2e c8       	sub	r8,-20
8000daf8:	12 9b       	mov	r11,r9
8000dafa:	10 9c       	mov	r12,r8
8000dafc:	fe b0 fb d8 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 24, vz);
8000db00:	ea c9 ff f8 	sub	r9,r5,-8
8000db04:	ee c8 00 1c 	sub	r8,r7,28
8000db08:	2e 88       	sub	r8,-24
8000db0a:	12 9b       	mov	r11,r9
8000db0c:	10 9c       	mov	r12,r8
8000db0e:	fe b0 fb cf 	rcall	8000d2ac <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_LOCAL_POSITION_NED, buf, MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN, MAVLINK_MSG_ID_LOCAL_POSITION_NED_CRC);
8000db12:	ee ca 00 1c 	sub	r10,r7,28
8000db16:	e0 68 00 b9 	mov	r8,185
8000db1a:	31 c9       	mov	r9,28
8000db1c:	32 0b       	mov	r11,32
8000db1e:	ee fc ff e0 	ld.w	r12,r7[-32]
8000db22:	fe b0 fa fd 	rcall	8000d11c <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_LOCAL_POSITION_NED, (const char *)&packet, MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN, MAVLINK_MSG_ID_LOCAL_POSITION_NED_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_LOCAL_POSITION_NED, (const char *)&packet, MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN);
#endif
#endif
}
8000db26:	2f 4d       	sub	sp,-48
8000db28:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000db2c:	80 00       	ld.sh	r0,r0[0x0]
8000db2e:	d9 02       	popm	r11,pc

8000db30 <mavlink_msg_global_position_int_send>:
 * @param hdg Compass heading in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_global_position_int_send(mavlink_channel_t chan, uint32_t time_boot_ms, int32_t lat, int32_t lon, int32_t alt, int32_t relative_alt, int16_t vx, int16_t vy, int16_t vz, uint16_t hdg)
{
8000db30:	eb cd 40 e0 	pushm	r5-r7,lr
8000db34:	1a 97       	mov	r7,sp
8000db36:	21 0d       	sub	sp,64
8000db38:	4b b6       	lddpc	r6,8000dc24 <mavlink_msg_global_position_int_send+0xf4>
8000db3a:	1e 26       	rsub	r6,pc
8000db3c:	ee c5 ff f0 	sub	r5,r7,-16
8000db40:	ef 4c ff e0 	st.w	r7[-32],r12
8000db44:	ef 4b ff dc 	st.w	r7[-36],r11
8000db48:	ef 4a ff d8 	st.w	r7[-40],r10
8000db4c:	ef 49 ff d4 	st.w	r7[-44],r9
8000db50:	ef 48 ff d0 	st.w	r7[-48],r8
8000db54:	6a 1b       	ld.w	r11,r5[0x4]
8000db56:	6a 2a       	ld.w	r10,r5[0x8]
8000db58:	6a 39       	ld.w	r9,r5[0xc]
8000db5a:	6a 48       	ld.w	r8,r5[0x10]
8000db5c:	ef 5b ff cc 	st.h	r7[-52],r11
8000db60:	ef 5a ff c8 	st.h	r7[-56],r10
8000db64:	ef 59 ff c4 	st.h	r7[-60],r9
8000db68:	ef 58 ff c0 	st.h	r7[-64],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000db6c:	ee c9 00 24 	sub	r9,r7,36
8000db70:	ee c8 00 1c 	sub	r8,r7,28
8000db74:	12 9b       	mov	r11,r9
8000db76:	10 9c       	mov	r12,r8
8000db78:	fe b0 fb 9a 	rcall	8000d2ac <byte_swap_4>
	_mav_put_int32_t(buf, 4, lat);
8000db7c:	ee c9 00 28 	sub	r9,r7,40
8000db80:	ee c8 00 1c 	sub	r8,r7,28
8000db84:	2f c8       	sub	r8,-4
8000db86:	12 9b       	mov	r11,r9
8000db88:	10 9c       	mov	r12,r8
8000db8a:	fe b0 fb 91 	rcall	8000d2ac <byte_swap_4>
	_mav_put_int32_t(buf, 8, lon);
8000db8e:	ee c9 00 2c 	sub	r9,r7,44
8000db92:	ee c8 00 1c 	sub	r8,r7,28
8000db96:	2f 88       	sub	r8,-8
8000db98:	12 9b       	mov	r11,r9
8000db9a:	10 9c       	mov	r12,r8
8000db9c:	fe b0 fb 88 	rcall	8000d2ac <byte_swap_4>
	_mav_put_int32_t(buf, 12, alt);
8000dba0:	ee c9 00 30 	sub	r9,r7,48
8000dba4:	ee c8 00 1c 	sub	r8,r7,28
8000dba8:	2f 48       	sub	r8,-12
8000dbaa:	12 9b       	mov	r11,r9
8000dbac:	10 9c       	mov	r12,r8
8000dbae:	fe b0 fb 7f 	rcall	8000d2ac <byte_swap_4>
	_mav_put_int32_t(buf, 16, relative_alt);
8000dbb2:	0a 99       	mov	r9,r5
8000dbb4:	ee c8 00 1c 	sub	r8,r7,28
8000dbb8:	2f 08       	sub	r8,-16
8000dbba:	12 9b       	mov	r11,r9
8000dbbc:	10 9c       	mov	r12,r8
8000dbbe:	fe b0 fb 77 	rcall	8000d2ac <byte_swap_4>
	_mav_put_int16_t(buf, 20, vx);
8000dbc2:	ee c9 00 34 	sub	r9,r7,52
8000dbc6:	ee c8 00 1c 	sub	r8,r7,28
8000dbca:	2e c8       	sub	r8,-20
8000dbcc:	12 9b       	mov	r11,r9
8000dbce:	10 9c       	mov	r12,r8
8000dbd0:	fe b0 fb 54 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 22, vy);
8000dbd4:	ee c9 00 38 	sub	r9,r7,56
8000dbd8:	ee c8 00 1c 	sub	r8,r7,28
8000dbdc:	2e a8       	sub	r8,-22
8000dbde:	12 9b       	mov	r11,r9
8000dbe0:	10 9c       	mov	r12,r8
8000dbe2:	fe b0 fb 4b 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 24, vz);
8000dbe6:	ee c9 00 3c 	sub	r9,r7,60
8000dbea:	ee c8 00 1c 	sub	r8,r7,28
8000dbee:	2e 88       	sub	r8,-24
8000dbf0:	12 9b       	mov	r11,r9
8000dbf2:	10 9c       	mov	r12,r8
8000dbf4:	fe b0 fb 42 	rcall	8000d278 <byte_swap_2>
	_mav_put_uint16_t(buf, 26, hdg);
8000dbf8:	ee c9 00 40 	sub	r9,r7,64
8000dbfc:	ee c8 00 1c 	sub	r8,r7,28
8000dc00:	2e 68       	sub	r8,-26
8000dc02:	12 9b       	mov	r11,r9
8000dc04:	10 9c       	mov	r12,r8
8000dc06:	fe b0 fb 39 	rcall	8000d278 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GLOBAL_POSITION_INT, buf, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_CRC);
8000dc0a:	ee ca 00 1c 	sub	r10,r7,28
8000dc0e:	36 88       	mov	r8,104
8000dc10:	31 c9       	mov	r9,28
8000dc12:	32 1b       	mov	r11,33
8000dc14:	ee fc ff e0 	ld.w	r12,r7[-32]
8000dc18:	fe b0 fa 82 	rcall	8000d11c <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GLOBAL_POSITION_INT, (const char *)&packet, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GLOBAL_POSITION_INT, (const char *)&packet, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN);
#endif
#endif
}
8000dc1c:	2f 0d       	sub	sp,-64
8000dc1e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000dc22:	00 00       	add	r0,r0
8000dc24:	80 00       	ld.sh	r0,r0[0x0]
8000dc26:	d9 be       	*unknown*

8000dc28 <mavlink_msg_rc_channels_scaled_send>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_rc_channels_scaled_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t port, int16_t chan1_scaled, int16_t chan2_scaled, int16_t chan3_scaled, int16_t chan4_scaled, int16_t chan5_scaled, int16_t chan6_scaled, int16_t chan7_scaled, int16_t chan8_scaled, uint8_t rssi)
{
8000dc28:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000dc2c:	1a 97       	mov	r7,sp
8000dc2e:	21 2d       	sub	sp,72
8000dc30:	4c 86       	lddpc	r6,8000dd50 <mavlink_msg_rc_channels_scaled_send+0x128>
8000dc32:	1e 26       	rsub	r6,pc
8000dc34:	ee ce ff e0 	sub	lr,r7,-32
8000dc38:	ef 4c ff e4 	st.w	r7[-28],r12
8000dc3c:	ef 4b ff e0 	st.w	r7[-32],r11
8000dc40:	14 90       	mov	r0,r10
8000dc42:	12 91       	mov	r1,r9
8000dc44:	10 92       	mov	r2,r8
8000dc46:	7c 03       	ld.w	r3,lr[0x0]
8000dc48:	7c 15       	ld.w	r5,lr[0x4]
8000dc4a:	7c 2c       	ld.w	r12,lr[0x8]
8000dc4c:	7c 3b       	ld.w	r11,lr[0xc]
8000dc4e:	7c 4a       	ld.w	r10,lr[0x10]
8000dc50:	7c 59       	ld.w	r9,lr[0x14]
8000dc52:	7c 68       	ld.w	r8,lr[0x18]
8000dc54:	00 9e       	mov	lr,r0
8000dc56:	ef 6e ff dc 	st.b	r7[-36],lr
8000dc5a:	02 9e       	mov	lr,r1
8000dc5c:	ef 5e ff d8 	st.h	r7[-40],lr
8000dc60:	04 9e       	mov	lr,r2
8000dc62:	ef 5e ff d4 	st.h	r7[-44],lr
8000dc66:	06 9e       	mov	lr,r3
8000dc68:	ef 5e ff d0 	st.h	r7[-48],lr
8000dc6c:	0a 9e       	mov	lr,r5
8000dc6e:	ef 5e ff cc 	st.h	r7[-52],lr
8000dc72:	ef 5c ff c8 	st.h	r7[-56],r12
8000dc76:	ef 5b ff c4 	st.h	r7[-60],r11
8000dc7a:	ef 5a ff c0 	st.h	r7[-64],r10
8000dc7e:	ef 59 ff bc 	st.h	r7[-68],r9
8000dc82:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000dc86:	ee c9 00 20 	sub	r9,r7,32
8000dc8a:	ee c8 00 18 	sub	r8,r7,24
8000dc8e:	12 9b       	mov	r11,r9
8000dc90:	10 9c       	mov	r12,r8
8000dc92:	fe b0 fb 0d 	rcall	8000d2ac <byte_swap_4>
	_mav_put_int16_t(buf, 4, chan1_scaled);
8000dc96:	ee c9 00 28 	sub	r9,r7,40
8000dc9a:	ee c8 00 18 	sub	r8,r7,24
8000dc9e:	2f c8       	sub	r8,-4
8000dca0:	12 9b       	mov	r11,r9
8000dca2:	10 9c       	mov	r12,r8
8000dca4:	fe b0 fa ea 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 6, chan2_scaled);
8000dca8:	ee c9 00 2c 	sub	r9,r7,44
8000dcac:	ee c8 00 18 	sub	r8,r7,24
8000dcb0:	2f a8       	sub	r8,-6
8000dcb2:	12 9b       	mov	r11,r9
8000dcb4:	10 9c       	mov	r12,r8
8000dcb6:	fe b0 fa e1 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 8, chan3_scaled);
8000dcba:	ee c9 00 30 	sub	r9,r7,48
8000dcbe:	ee c8 00 18 	sub	r8,r7,24
8000dcc2:	2f 88       	sub	r8,-8
8000dcc4:	12 9b       	mov	r11,r9
8000dcc6:	10 9c       	mov	r12,r8
8000dcc8:	fe b0 fa d8 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 10, chan4_scaled);
8000dccc:	ee c9 00 34 	sub	r9,r7,52
8000dcd0:	ee c8 00 18 	sub	r8,r7,24
8000dcd4:	2f 68       	sub	r8,-10
8000dcd6:	12 9b       	mov	r11,r9
8000dcd8:	10 9c       	mov	r12,r8
8000dcda:	fe b0 fa cf 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 12, chan5_scaled);
8000dcde:	ee c9 00 38 	sub	r9,r7,56
8000dce2:	ee c8 00 18 	sub	r8,r7,24
8000dce6:	2f 48       	sub	r8,-12
8000dce8:	12 9b       	mov	r11,r9
8000dcea:	10 9c       	mov	r12,r8
8000dcec:	fe b0 fa c6 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 14, chan6_scaled);
8000dcf0:	ee c9 00 3c 	sub	r9,r7,60
8000dcf4:	ee c8 00 18 	sub	r8,r7,24
8000dcf8:	2f 28       	sub	r8,-14
8000dcfa:	12 9b       	mov	r11,r9
8000dcfc:	10 9c       	mov	r12,r8
8000dcfe:	fe b0 fa bd 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 16, chan7_scaled);
8000dd02:	ee c9 00 40 	sub	r9,r7,64
8000dd06:	ee c8 00 18 	sub	r8,r7,24
8000dd0a:	2f 08       	sub	r8,-16
8000dd0c:	12 9b       	mov	r11,r9
8000dd0e:	10 9c       	mov	r12,r8
8000dd10:	fe b0 fa b4 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 18, chan8_scaled);
8000dd14:	ee c9 00 44 	sub	r9,r7,68
8000dd18:	ee c8 00 18 	sub	r8,r7,24
8000dd1c:	2e e8       	sub	r8,-18
8000dd1e:	12 9b       	mov	r11,r9
8000dd20:	10 9c       	mov	r12,r8
8000dd22:	fe b0 fa ab 	rcall	8000d278 <byte_swap_2>
	_mav_put_uint8_t(buf, 20, port);
8000dd26:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000dd2a:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 21, rssi);
8000dd2e:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8000dd32:	ef 68 ff fd 	st.b	r7[-3],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_SCALED, buf, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_CRC);
8000dd36:	ee ca 00 18 	sub	r10,r7,24
8000dd3a:	e0 68 00 ed 	mov	r8,237
8000dd3e:	31 69       	mov	r9,22
8000dd40:	32 2b       	mov	r11,34
8000dd42:	ee fc ff e4 	ld.w	r12,r7[-28]
8000dd46:	fe b0 f9 eb 	rcall	8000d11c <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_SCALED, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_SCALED, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN);
#endif
#endif
}
8000dd4a:	2e ed       	sub	sp,-72
8000dd4c:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000dd50:	80 00       	ld.sh	r0,r0[0x0]
8000dd52:	da b6       	*unknown*

8000dd54 <mavlink_msg_rc_channels_raw_send>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_rc_channels_raw_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t port, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint8_t rssi)
{
8000dd54:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000dd58:	1a 97       	mov	r7,sp
8000dd5a:	21 2d       	sub	sp,72
8000dd5c:	4c 86       	lddpc	r6,8000de7c <mavlink_msg_rc_channels_raw_send+0x128>
8000dd5e:	1e 26       	rsub	r6,pc
8000dd60:	ee ce ff e0 	sub	lr,r7,-32
8000dd64:	ef 4c ff e4 	st.w	r7[-28],r12
8000dd68:	ef 4b ff e0 	st.w	r7[-32],r11
8000dd6c:	14 90       	mov	r0,r10
8000dd6e:	12 91       	mov	r1,r9
8000dd70:	10 92       	mov	r2,r8
8000dd72:	7c 03       	ld.w	r3,lr[0x0]
8000dd74:	7c 15       	ld.w	r5,lr[0x4]
8000dd76:	7c 2c       	ld.w	r12,lr[0x8]
8000dd78:	7c 3b       	ld.w	r11,lr[0xc]
8000dd7a:	7c 4a       	ld.w	r10,lr[0x10]
8000dd7c:	7c 59       	ld.w	r9,lr[0x14]
8000dd7e:	7c 68       	ld.w	r8,lr[0x18]
8000dd80:	00 9e       	mov	lr,r0
8000dd82:	ef 6e ff dc 	st.b	r7[-36],lr
8000dd86:	02 9e       	mov	lr,r1
8000dd88:	ef 5e ff d8 	st.h	r7[-40],lr
8000dd8c:	04 9e       	mov	lr,r2
8000dd8e:	ef 5e ff d4 	st.h	r7[-44],lr
8000dd92:	06 9e       	mov	lr,r3
8000dd94:	ef 5e ff d0 	st.h	r7[-48],lr
8000dd98:	0a 9e       	mov	lr,r5
8000dd9a:	ef 5e ff cc 	st.h	r7[-52],lr
8000dd9e:	ef 5c ff c8 	st.h	r7[-56],r12
8000dda2:	ef 5b ff c4 	st.h	r7[-60],r11
8000dda6:	ef 5a ff c0 	st.h	r7[-64],r10
8000ddaa:	ef 59 ff bc 	st.h	r7[-68],r9
8000ddae:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000ddb2:	ee c9 00 20 	sub	r9,r7,32
8000ddb6:	ee c8 00 18 	sub	r8,r7,24
8000ddba:	12 9b       	mov	r11,r9
8000ddbc:	10 9c       	mov	r12,r8
8000ddbe:	fe b0 fa 77 	rcall	8000d2ac <byte_swap_4>
	_mav_put_uint16_t(buf, 4, chan1_raw);
8000ddc2:	ee c9 00 28 	sub	r9,r7,40
8000ddc6:	ee c8 00 18 	sub	r8,r7,24
8000ddca:	2f c8       	sub	r8,-4
8000ddcc:	12 9b       	mov	r11,r9
8000ddce:	10 9c       	mov	r12,r8
8000ddd0:	fe b0 fa 54 	rcall	8000d278 <byte_swap_2>
	_mav_put_uint16_t(buf, 6, chan2_raw);
8000ddd4:	ee c9 00 2c 	sub	r9,r7,44
8000ddd8:	ee c8 00 18 	sub	r8,r7,24
8000dddc:	2f a8       	sub	r8,-6
8000ddde:	12 9b       	mov	r11,r9
8000dde0:	10 9c       	mov	r12,r8
8000dde2:	fe b0 fa 4b 	rcall	8000d278 <byte_swap_2>
	_mav_put_uint16_t(buf, 8, chan3_raw);
8000dde6:	ee c9 00 30 	sub	r9,r7,48
8000ddea:	ee c8 00 18 	sub	r8,r7,24
8000ddee:	2f 88       	sub	r8,-8
8000ddf0:	12 9b       	mov	r11,r9
8000ddf2:	10 9c       	mov	r12,r8
8000ddf4:	fe b0 fa 42 	rcall	8000d278 <byte_swap_2>
	_mav_put_uint16_t(buf, 10, chan4_raw);
8000ddf8:	ee c9 00 34 	sub	r9,r7,52
8000ddfc:	ee c8 00 18 	sub	r8,r7,24
8000de00:	2f 68       	sub	r8,-10
8000de02:	12 9b       	mov	r11,r9
8000de04:	10 9c       	mov	r12,r8
8000de06:	fe b0 fa 39 	rcall	8000d278 <byte_swap_2>
	_mav_put_uint16_t(buf, 12, chan5_raw);
8000de0a:	ee c9 00 38 	sub	r9,r7,56
8000de0e:	ee c8 00 18 	sub	r8,r7,24
8000de12:	2f 48       	sub	r8,-12
8000de14:	12 9b       	mov	r11,r9
8000de16:	10 9c       	mov	r12,r8
8000de18:	fe b0 fa 30 	rcall	8000d278 <byte_swap_2>
	_mav_put_uint16_t(buf, 14, chan6_raw);
8000de1c:	ee c9 00 3c 	sub	r9,r7,60
8000de20:	ee c8 00 18 	sub	r8,r7,24
8000de24:	2f 28       	sub	r8,-14
8000de26:	12 9b       	mov	r11,r9
8000de28:	10 9c       	mov	r12,r8
8000de2a:	fe b0 fa 27 	rcall	8000d278 <byte_swap_2>
	_mav_put_uint16_t(buf, 16, chan7_raw);
8000de2e:	ee c9 00 40 	sub	r9,r7,64
8000de32:	ee c8 00 18 	sub	r8,r7,24
8000de36:	2f 08       	sub	r8,-16
8000de38:	12 9b       	mov	r11,r9
8000de3a:	10 9c       	mov	r12,r8
8000de3c:	fe b0 fa 1e 	rcall	8000d278 <byte_swap_2>
	_mav_put_uint16_t(buf, 18, chan8_raw);
8000de40:	ee c9 00 44 	sub	r9,r7,68
8000de44:	ee c8 00 18 	sub	r8,r7,24
8000de48:	2e e8       	sub	r8,-18
8000de4a:	12 9b       	mov	r11,r9
8000de4c:	10 9c       	mov	r12,r8
8000de4e:	fe b0 fa 15 	rcall	8000d278 <byte_swap_2>
	_mav_put_uint8_t(buf, 20, port);
8000de52:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000de56:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 21, rssi);
8000de5a:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8000de5e:	ef 68 ff fd 	st.b	r7[-3],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_RAW, buf, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
8000de62:	ee ca 00 18 	sub	r10,r7,24
8000de66:	e0 68 00 f4 	mov	r8,244
8000de6a:	31 69       	mov	r9,22
8000de6c:	32 3b       	mov	r11,35
8000de6e:	ee fc ff e4 	ld.w	r12,r7[-28]
8000de72:	fe b0 f9 55 	rcall	8000d11c <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_RAW, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_RAW, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#endif
#endif
}
8000de76:	2e ed       	sub	sp,-72
8000de78:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000de7c:	80 00       	ld.sh	r0,r0[0x0]
8000de7e:	db e2       	popm	r4-r12,pc

8000de80 <mavlink_msg_servo_output_raw_send>:
 * @param servo8_raw Servo output 8 value, in microseconds
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_servo_output_raw_send(mavlink_channel_t chan, uint32_t time_usec, uint8_t port, uint16_t servo1_raw, uint16_t servo2_raw, uint16_t servo3_raw, uint16_t servo4_raw, uint16_t servo5_raw, uint16_t servo6_raw, uint16_t servo7_raw, uint16_t servo8_raw)
{
8000de80:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000de84:	1a 97       	mov	r7,sp
8000de86:	21 1d       	sub	sp,68
8000de88:	4c 46       	lddpc	r6,8000df98 <mavlink_msg_servo_output_raw_send+0x118>
8000de8a:	1e 26       	rsub	r6,pc
8000de8c:	ee ce ff e4 	sub	lr,r7,-28
8000de90:	ef 4c ff e4 	st.w	r7[-28],r12
8000de94:	ef 4b ff e0 	st.w	r7[-32],r11
8000de98:	14 91       	mov	r1,r10
8000de9a:	12 92       	mov	r2,r9
8000de9c:	10 93       	mov	r3,r8
8000de9e:	7c 05       	ld.w	r5,lr[0x0]
8000dea0:	7c 1c       	ld.w	r12,lr[0x4]
8000dea2:	7c 2b       	ld.w	r11,lr[0x8]
8000dea4:	7c 3a       	ld.w	r10,lr[0xc]
8000dea6:	7c 49       	ld.w	r9,lr[0x10]
8000dea8:	7c 58       	ld.w	r8,lr[0x14]
8000deaa:	02 9e       	mov	lr,r1
8000deac:	ef 6e ff dc 	st.b	r7[-36],lr
8000deb0:	04 9e       	mov	lr,r2
8000deb2:	ef 5e ff d8 	st.h	r7[-40],lr
8000deb6:	06 9e       	mov	lr,r3
8000deb8:	ef 5e ff d4 	st.h	r7[-44],lr
8000debc:	0a 9e       	mov	lr,r5
8000debe:	ef 5e ff d0 	st.h	r7[-48],lr
8000dec2:	ef 5c ff cc 	st.h	r7[-52],r12
8000dec6:	ef 5b ff c8 	st.h	r7[-56],r11
8000deca:	ef 5a ff c4 	st.h	r7[-60],r10
8000dece:	ef 59 ff c0 	st.h	r7[-64],r9
8000ded2:	ef 58 ff bc 	st.h	r7[-68],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN];
	_mav_put_uint32_t(buf, 0, time_usec);
8000ded6:	ee c9 00 20 	sub	r9,r7,32
8000deda:	ee c8 00 18 	sub	r8,r7,24
8000dede:	12 9b       	mov	r11,r9
8000dee0:	10 9c       	mov	r12,r8
8000dee2:	fe b0 f9 e5 	rcall	8000d2ac <byte_swap_4>
	_mav_put_uint16_t(buf, 4, servo1_raw);
8000dee6:	ee c9 00 28 	sub	r9,r7,40
8000deea:	ee c8 00 18 	sub	r8,r7,24
8000deee:	2f c8       	sub	r8,-4
8000def0:	12 9b       	mov	r11,r9
8000def2:	10 9c       	mov	r12,r8
8000def4:	fe b0 f9 c2 	rcall	8000d278 <byte_swap_2>
	_mav_put_uint16_t(buf, 6, servo2_raw);
8000def8:	ee c9 00 2c 	sub	r9,r7,44
8000defc:	ee c8 00 18 	sub	r8,r7,24
8000df00:	2f a8       	sub	r8,-6
8000df02:	12 9b       	mov	r11,r9
8000df04:	10 9c       	mov	r12,r8
8000df06:	fe b0 f9 b9 	rcall	8000d278 <byte_swap_2>
	_mav_put_uint16_t(buf, 8, servo3_raw);
8000df0a:	ee c9 00 30 	sub	r9,r7,48
8000df0e:	ee c8 00 18 	sub	r8,r7,24
8000df12:	2f 88       	sub	r8,-8
8000df14:	12 9b       	mov	r11,r9
8000df16:	10 9c       	mov	r12,r8
8000df18:	fe b0 f9 b0 	rcall	8000d278 <byte_swap_2>
	_mav_put_uint16_t(buf, 10, servo4_raw);
8000df1c:	ee c9 00 34 	sub	r9,r7,52
8000df20:	ee c8 00 18 	sub	r8,r7,24
8000df24:	2f 68       	sub	r8,-10
8000df26:	12 9b       	mov	r11,r9
8000df28:	10 9c       	mov	r12,r8
8000df2a:	fe b0 f9 a7 	rcall	8000d278 <byte_swap_2>
	_mav_put_uint16_t(buf, 12, servo5_raw);
8000df2e:	ee c9 00 38 	sub	r9,r7,56
8000df32:	ee c8 00 18 	sub	r8,r7,24
8000df36:	2f 48       	sub	r8,-12
8000df38:	12 9b       	mov	r11,r9
8000df3a:	10 9c       	mov	r12,r8
8000df3c:	fe b0 f9 9e 	rcall	8000d278 <byte_swap_2>
	_mav_put_uint16_t(buf, 14, servo6_raw);
8000df40:	ee c9 00 3c 	sub	r9,r7,60
8000df44:	ee c8 00 18 	sub	r8,r7,24
8000df48:	2f 28       	sub	r8,-14
8000df4a:	12 9b       	mov	r11,r9
8000df4c:	10 9c       	mov	r12,r8
8000df4e:	fe b0 f9 95 	rcall	8000d278 <byte_swap_2>
	_mav_put_uint16_t(buf, 16, servo7_raw);
8000df52:	ee c9 00 40 	sub	r9,r7,64
8000df56:	ee c8 00 18 	sub	r8,r7,24
8000df5a:	2f 08       	sub	r8,-16
8000df5c:	12 9b       	mov	r11,r9
8000df5e:	10 9c       	mov	r12,r8
8000df60:	fe b0 f9 8c 	rcall	8000d278 <byte_swap_2>
	_mav_put_uint16_t(buf, 18, servo8_raw);
8000df64:	ee c9 00 44 	sub	r9,r7,68
8000df68:	ee c8 00 18 	sub	r8,r7,24
8000df6c:	2e e8       	sub	r8,-18
8000df6e:	12 9b       	mov	r11,r9
8000df70:	10 9c       	mov	r12,r8
8000df72:	fe b0 f9 83 	rcall	8000d278 <byte_swap_2>
	_mav_put_uint8_t(buf, 20, port);
8000df76:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000df7a:	ef 68 ff fc 	st.b	r7[-4],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW, buf, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_CRC);
8000df7e:	ee ca 00 18 	sub	r10,r7,24
8000df82:	e0 68 00 de 	mov	r8,222
8000df86:	31 59       	mov	r9,21
8000df88:	32 4b       	mov	r11,36
8000df8a:	ee fc ff e4 	ld.w	r12,r7[-28]
8000df8e:	fe b0 f8 c7 	rcall	8000d11c <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW, (const char *)&packet, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW, (const char *)&packet, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN);
#endif
#endif
}
8000df92:	2e fd       	sub	sp,-68
8000df94:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000df98:	80 00       	ld.sh	r0,r0[0x0]
8000df9a:	dd 0e       	*unknown*

8000df9c <mavlink_msg_roll_pitch_yaw_thrust_setpoint_send>:
 * @param thrust Collective thrust, normalized to 0 .. 1
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float thrust)
{
8000df9c:	eb cd 40 e0 	pushm	r5-r7,lr
8000dfa0:	1a 97       	mov	r7,sp
8000dfa2:	20 ad       	sub	sp,40
8000dfa4:	4a 36       	lddpc	r6,8000e030 <mavlink_msg_roll_pitch_yaw_thrust_setpoint_send+0x94>
8000dfa6:	1e 26       	rsub	r6,pc
8000dfa8:	ee c5 ff f0 	sub	r5,r7,-16
8000dfac:	ef 4c ff e8 	st.w	r7[-24],r12
8000dfb0:	ef 4b ff e4 	st.w	r7[-28],r11
8000dfb4:	ef 4a ff e0 	st.w	r7[-32],r10
8000dfb8:	ef 49 ff dc 	st.w	r7[-36],r9
8000dfbc:	ef 48 ff d8 	st.w	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000dfc0:	ee c9 00 1c 	sub	r9,r7,28
8000dfc4:	ee c8 00 14 	sub	r8,r7,20
8000dfc8:	12 9b       	mov	r11,r9
8000dfca:	10 9c       	mov	r12,r8
8000dfcc:	fe b0 f9 70 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 4, roll);
8000dfd0:	ee c9 00 20 	sub	r9,r7,32
8000dfd4:	ee c8 00 14 	sub	r8,r7,20
8000dfd8:	2f c8       	sub	r8,-4
8000dfda:	12 9b       	mov	r11,r9
8000dfdc:	10 9c       	mov	r12,r8
8000dfde:	fe b0 f9 67 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 8, pitch);
8000dfe2:	ee c9 00 24 	sub	r9,r7,36
8000dfe6:	ee c8 00 14 	sub	r8,r7,20
8000dfea:	2f 88       	sub	r8,-8
8000dfec:	12 9b       	mov	r11,r9
8000dfee:	10 9c       	mov	r12,r8
8000dff0:	fe b0 f9 5e 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 12, yaw);
8000dff4:	ee c9 00 28 	sub	r9,r7,40
8000dff8:	ee c8 00 14 	sub	r8,r7,20
8000dffc:	2f 48       	sub	r8,-12
8000dffe:	12 9b       	mov	r11,r9
8000e000:	10 9c       	mov	r12,r8
8000e002:	fe b0 f9 55 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 16, thrust);
8000e006:	0a 99       	mov	r9,r5
8000e008:	ee c8 00 14 	sub	r8,r7,20
8000e00c:	2f 08       	sub	r8,-16
8000e00e:	12 9b       	mov	r11,r9
8000e010:	10 9c       	mov	r12,r8
8000e012:	fe b0 f9 4d 	rcall	8000d2ac <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT, buf, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_CRC);
8000e016:	ee ca 00 14 	sub	r10,r7,20
8000e01a:	e0 68 00 ef 	mov	r8,239
8000e01e:	31 49       	mov	r9,20
8000e020:	33 ab       	mov	r11,58
8000e022:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e026:	fe b0 f8 7b 	rcall	8000d11c <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN);
#endif
#endif
}
8000e02a:	2f 6d       	sub	sp,-40
8000e02c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e030:	80 00       	ld.sh	r0,r0[0x0]
8000e032:	de 2a       	popm	r4-r7,pc,r12=-1

8000e034 <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send>:
 * @param thrust Collective thrust, normalized to 0 .. 1
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll_speed, float pitch_speed, float yaw_speed, float thrust)
{
8000e034:	eb cd 40 e0 	pushm	r5-r7,lr
8000e038:	1a 97       	mov	r7,sp
8000e03a:	20 ad       	sub	sp,40
8000e03c:	4a 36       	lddpc	r6,8000e0c8 <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send+0x94>
8000e03e:	1e 26       	rsub	r6,pc
8000e040:	ee c5 ff f0 	sub	r5,r7,-16
8000e044:	ef 4c ff e8 	st.w	r7[-24],r12
8000e048:	ef 4b ff e4 	st.w	r7[-28],r11
8000e04c:	ef 4a ff e0 	st.w	r7[-32],r10
8000e050:	ef 49 ff dc 	st.w	r7[-36],r9
8000e054:	ef 48 ff d8 	st.w	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e058:	ee c9 00 1c 	sub	r9,r7,28
8000e05c:	ee c8 00 14 	sub	r8,r7,20
8000e060:	12 9b       	mov	r11,r9
8000e062:	10 9c       	mov	r12,r8
8000e064:	fe b0 f9 24 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 4, roll_speed);
8000e068:	ee c9 00 20 	sub	r9,r7,32
8000e06c:	ee c8 00 14 	sub	r8,r7,20
8000e070:	2f c8       	sub	r8,-4
8000e072:	12 9b       	mov	r11,r9
8000e074:	10 9c       	mov	r12,r8
8000e076:	fe b0 f9 1b 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 8, pitch_speed);
8000e07a:	ee c9 00 24 	sub	r9,r7,36
8000e07e:	ee c8 00 14 	sub	r8,r7,20
8000e082:	2f 88       	sub	r8,-8
8000e084:	12 9b       	mov	r11,r9
8000e086:	10 9c       	mov	r12,r8
8000e088:	fe b0 f9 12 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 12, yaw_speed);
8000e08c:	ee c9 00 28 	sub	r9,r7,40
8000e090:	ee c8 00 14 	sub	r8,r7,20
8000e094:	2f 48       	sub	r8,-12
8000e096:	12 9b       	mov	r11,r9
8000e098:	10 9c       	mov	r12,r8
8000e09a:	fe b0 f9 09 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 16, thrust);
8000e09e:	0a 99       	mov	r9,r5
8000e0a0:	ee c8 00 14 	sub	r8,r7,20
8000e0a4:	2f 08       	sub	r8,-16
8000e0a6:	12 9b       	mov	r11,r9
8000e0a8:	10 9c       	mov	r12,r8
8000e0aa:	fe b0 f9 01 	rcall	8000d2ac <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, buf, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_CRC);
8000e0ae:	ee ca 00 14 	sub	r10,r7,20
8000e0b2:	e0 68 00 ee 	mov	r8,238
8000e0b6:	31 49       	mov	r9,20
8000e0b8:	33 bb       	mov	r11,59
8000e0ba:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e0be:	fe b0 f8 2f 	rcall	8000d11c <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN);
#endif
#endif
}
8000e0c2:	2f 6d       	sub	sp,-40
8000e0c4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e0c8:	80 00       	ld.sh	r0,r0[0x0]
8000e0ca:	de c2       	popm	r8-r10,r12,lr-pc

8000e0cc <mavlink_msg_vfr_hud_send>:
 * @param climb Current climb rate in meters/second
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_vfr_hud_send(mavlink_channel_t chan, float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
8000e0cc:	eb cd 40 e0 	pushm	r5-r7,lr
8000e0d0:	1a 97       	mov	r7,sp
8000e0d2:	20 ad       	sub	sp,40
8000e0d4:	4a 76       	lddpc	r6,8000e170 <mavlink_msg_vfr_hud_send+0xa4>
8000e0d6:	1e 26       	rsub	r6,pc
8000e0d8:	ee c5 ff f0 	sub	r5,r7,-16
8000e0dc:	ef 4c ff e8 	st.w	r7[-24],r12
8000e0e0:	ef 4b ff e4 	st.w	r7[-28],r11
8000e0e4:	ef 4a ff e0 	st.w	r7[-32],r10
8000e0e8:	ef 59 ff dc 	st.h	r7[-36],r9
8000e0ec:	ef 58 ff d8 	st.h	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_VFR_HUD_LEN];
	_mav_put_float(buf, 0, airspeed);
8000e0f0:	ee c9 00 1c 	sub	r9,r7,28
8000e0f4:	ee c8 00 14 	sub	r8,r7,20
8000e0f8:	12 9b       	mov	r11,r9
8000e0fa:	10 9c       	mov	r12,r8
8000e0fc:	fe b0 f8 d8 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 4, groundspeed);
8000e100:	ee c9 00 20 	sub	r9,r7,32
8000e104:	ee c8 00 14 	sub	r8,r7,20
8000e108:	2f c8       	sub	r8,-4
8000e10a:	12 9b       	mov	r11,r9
8000e10c:	10 9c       	mov	r12,r8
8000e10e:	fe b0 f8 cf 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 8, alt);
8000e112:	0a 99       	mov	r9,r5
8000e114:	ee c8 00 14 	sub	r8,r7,20
8000e118:	2f 88       	sub	r8,-8
8000e11a:	12 9b       	mov	r11,r9
8000e11c:	10 9c       	mov	r12,r8
8000e11e:	fe b0 f8 c7 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 12, climb);
8000e122:	ea c9 ff fc 	sub	r9,r5,-4
8000e126:	ee c8 00 14 	sub	r8,r7,20
8000e12a:	2f 48       	sub	r8,-12
8000e12c:	12 9b       	mov	r11,r9
8000e12e:	10 9c       	mov	r12,r8
8000e130:	fe b0 f8 be 	rcall	8000d2ac <byte_swap_4>
	_mav_put_int16_t(buf, 16, heading);
8000e134:	ee c9 00 24 	sub	r9,r7,36
8000e138:	ee c8 00 14 	sub	r8,r7,20
8000e13c:	2f 08       	sub	r8,-16
8000e13e:	12 9b       	mov	r11,r9
8000e140:	10 9c       	mov	r12,r8
8000e142:	fe b0 f8 9b 	rcall	8000d278 <byte_swap_2>
	_mav_put_uint16_t(buf, 18, throttle);
8000e146:	ee c9 00 28 	sub	r9,r7,40
8000e14a:	ee c8 00 14 	sub	r8,r7,20
8000e14e:	2e e8       	sub	r8,-18
8000e150:	12 9b       	mov	r11,r9
8000e152:	10 9c       	mov	r12,r8
8000e154:	fe b0 f8 92 	rcall	8000d278 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_VFR_HUD, buf, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
8000e158:	ee ca 00 14 	sub	r10,r7,20
8000e15c:	31 48       	mov	r8,20
8000e15e:	31 49       	mov	r9,20
8000e160:	34 ab       	mov	r11,74
8000e162:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e166:	fe b0 f7 db 	rcall	8000d11c <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_VFR_HUD, (const char *)&packet, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_VFR_HUD, (const char *)&packet, MAVLINK_MSG_ID_VFR_HUD_LEN);
#endif
#endif
}
8000e16a:	2f 6d       	sub	sp,-40
8000e16c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e170:	80 00       	ld.sh	r0,r0[0x0]
8000e172:	df 5a       	popm	r0-r3,r8-r9,r11,pc,r12=-1

8000e174 <mavlink_msg_command_long_get_target_system>:
 * @brief Get field target_system from command_long message
 *
 * @return System which should execute the command
 */
static inline uint8_t mavlink_msg_command_long_get_target_system(const mavlink_message_t* msg)
{
8000e174:	eb cd 40 80 	pushm	r7,lr
8000e178:	1a 97       	mov	r7,sp
8000e17a:	20 1d       	sub	sp,4
8000e17c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  30);
8000e180:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e184:	2f 88       	sub	r8,-8
8000e186:	2e 28       	sub	r8,-30
8000e188:	11 88       	ld.ub	r8,r8[0x0]
}
8000e18a:	10 9c       	mov	r12,r8
8000e18c:	2f fd       	sub	sp,-4
8000e18e:	e3 cd 80 80 	ldm	sp++,r7,pc

8000e192 <mavlink_msg_command_long_get_target_component>:
 * @brief Get field target_component from command_long message
 *
 * @return Component which should execute the command, 0 for all components
 */
static inline uint8_t mavlink_msg_command_long_get_target_component(const mavlink_message_t* msg)
{
8000e192:	eb cd 40 80 	pushm	r7,lr
8000e196:	1a 97       	mov	r7,sp
8000e198:	20 1d       	sub	sp,4
8000e19a:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  31);
8000e19e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e1a2:	2f 88       	sub	r8,-8
8000e1a4:	2e 18       	sub	r8,-31
8000e1a6:	11 88       	ld.ub	r8,r8[0x0]
}
8000e1a8:	10 9c       	mov	r12,r8
8000e1aa:	2f fd       	sub	sp,-4
8000e1ac:	e3 cd 80 80 	ldm	sp++,r7,pc

8000e1b0 <mavlink_msg_command_long_get_command>:
 * @brief Get field command from command_long message
 *
 * @return Command ID, as defined by MAV_CMD enum.
 */
static inline uint16_t mavlink_msg_command_long_get_command(const mavlink_message_t* msg)
{
8000e1b0:	eb cd 40 c0 	pushm	r6-r7,lr
8000e1b4:	1a 97       	mov	r7,sp
8000e1b6:	20 1d       	sub	sp,4
8000e1b8:	48 86       	lddpc	r6,8000e1d8 <mavlink_msg_command_long_get_command+0x28>
8000e1ba:	1e 26       	rsub	r6,pc
8000e1bc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  28);
8000e1c0:	31 cb       	mov	r11,28
8000e1c2:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e1c6:	fe b0 f9 37 	rcall	8000d434 <_MAV_RETURN_uint16_t>
8000e1ca:	18 98       	mov	r8,r12
8000e1cc:	5c 88       	casts.h	r8
8000e1ce:	5c 88       	casts.h	r8
}
8000e1d0:	10 9c       	mov	r12,r8
8000e1d2:	2f fd       	sub	sp,-4
8000e1d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e1d8:	80 00       	ld.sh	r0,r0[0x0]
8000e1da:	e0 3e eb cd 	sub	lr,125901

8000e1dc <mavlink_msg_command_long_get_confirmation>:
 * @brief Get field confirmation from command_long message
 *
 * @return 0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command)
 */
static inline uint8_t mavlink_msg_command_long_get_confirmation(const mavlink_message_t* msg)
{
8000e1dc:	eb cd 40 80 	pushm	r7,lr
8000e1e0:	1a 97       	mov	r7,sp
8000e1e2:	20 1d       	sub	sp,4
8000e1e4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  32);
8000e1e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e1ec:	2f 88       	sub	r8,-8
8000e1ee:	2e 08       	sub	r8,-32
8000e1f0:	11 88       	ld.ub	r8,r8[0x0]
}
8000e1f2:	10 9c       	mov	r12,r8
8000e1f4:	2f fd       	sub	sp,-4
8000e1f6:	e3 cd 80 80 	ldm	sp++,r7,pc

8000e1fa <mavlink_msg_command_long_get_param1>:
 * @brief Get field param1 from command_long message
 *
 * @return Parameter 1, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param1(const mavlink_message_t* msg)
{
8000e1fa:	eb cd 40 c0 	pushm	r6-r7,lr
8000e1fe:	1a 97       	mov	r7,sp
8000e200:	20 1d       	sub	sp,4
8000e202:	48 86       	lddpc	r6,8000e220 <mavlink_msg_command_long_get_param1+0x26>
8000e204:	1e 26       	rsub	r6,pc
8000e206:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  0);
8000e20a:	30 0b       	mov	r11,0
8000e20c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e210:	fe b0 f9 32 	rcall	8000d474 <_MAV_RETURN_float>
8000e214:	18 98       	mov	r8,r12
}
8000e216:	10 9c       	mov	r12,r8
8000e218:	2f fd       	sub	sp,-4
8000e21a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e21e:	00 00       	add	r0,r0
8000e220:	80 00       	ld.sh	r0,r0[0x0]
8000e222:	e0 88 eb cd 	brls	8002b9bc <usart_init_IrDA+0x20>

8000e224 <mavlink_msg_command_long_get_param2>:
 * @brief Get field param2 from command_long message
 *
 * @return Parameter 2, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param2(const mavlink_message_t* msg)
{
8000e224:	eb cd 40 c0 	pushm	r6-r7,lr
8000e228:	1a 97       	mov	r7,sp
8000e22a:	20 1d       	sub	sp,4
8000e22c:	48 76       	lddpc	r6,8000e248 <mavlink_msg_command_long_get_param2+0x24>
8000e22e:	1e 26       	rsub	r6,pc
8000e230:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  4);
8000e234:	30 4b       	mov	r11,4
8000e236:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e23a:	fe b0 f9 1d 	rcall	8000d474 <_MAV_RETURN_float>
8000e23e:	18 98       	mov	r8,r12
}
8000e240:	10 9c       	mov	r12,r8
8000e242:	2f fd       	sub	sp,-4
8000e244:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e248:	80 00       	ld.sh	r0,r0[0x0]
8000e24a:	e0 b2       	*unknown*

8000e24c <mavlink_msg_command_long_get_param3>:
 * @brief Get field param3 from command_long message
 *
 * @return Parameter 3, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param3(const mavlink_message_t* msg)
{
8000e24c:	eb cd 40 c0 	pushm	r6-r7,lr
8000e250:	1a 97       	mov	r7,sp
8000e252:	20 1d       	sub	sp,4
8000e254:	48 76       	lddpc	r6,8000e270 <mavlink_msg_command_long_get_param3+0x24>
8000e256:	1e 26       	rsub	r6,pc
8000e258:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  8);
8000e25c:	30 8b       	mov	r11,8
8000e25e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e262:	fe b0 f9 09 	rcall	8000d474 <_MAV_RETURN_float>
8000e266:	18 98       	mov	r8,r12
}
8000e268:	10 9c       	mov	r12,r8
8000e26a:	2f fd       	sub	sp,-4
8000e26c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e270:	80 00       	ld.sh	r0,r0[0x0]
8000e272:	e0 da eb cd 	satsub.w	r10,r0,-5171

8000e274 <mavlink_msg_command_long_get_param4>:
 * @brief Get field param4 from command_long message
 *
 * @return Parameter 4, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param4(const mavlink_message_t* msg)
{
8000e274:	eb cd 40 c0 	pushm	r6-r7,lr
8000e278:	1a 97       	mov	r7,sp
8000e27a:	20 1d       	sub	sp,4
8000e27c:	48 76       	lddpc	r6,8000e298 <mavlink_msg_command_long_get_param4+0x24>
8000e27e:	1e 26       	rsub	r6,pc
8000e280:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  12);
8000e284:	30 cb       	mov	r11,12
8000e286:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e28a:	fe b0 f8 f5 	rcall	8000d474 <_MAV_RETURN_float>
8000e28e:	18 98       	mov	r8,r12
}
8000e290:	10 9c       	mov	r12,r8
8000e292:	2f fd       	sub	sp,-4
8000e294:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e298:	80 00       	ld.sh	r0,r0[0x0]
8000e29a:	e1 02 eb cd 	ld.sh	r2,r0[-5171]

8000e29c <mavlink_msg_command_long_get_param5>:
 * @brief Get field param5 from command_long message
 *
 * @return Parameter 5, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param5(const mavlink_message_t* msg)
{
8000e29c:	eb cd 40 c0 	pushm	r6-r7,lr
8000e2a0:	1a 97       	mov	r7,sp
8000e2a2:	20 1d       	sub	sp,4
8000e2a4:	48 76       	lddpc	r6,8000e2c0 <mavlink_msg_command_long_get_param5+0x24>
8000e2a6:	1e 26       	rsub	r6,pc
8000e2a8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  16);
8000e2ac:	31 0b       	mov	r11,16
8000e2ae:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e2b2:	fe b0 f8 e1 	rcall	8000d474 <_MAV_RETURN_float>
8000e2b6:	18 98       	mov	r8,r12
}
8000e2b8:	10 9c       	mov	r12,r8
8000e2ba:	2f fd       	sub	sp,-4
8000e2bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e2c0:	80 00       	ld.sh	r0,r0[0x0]
8000e2c2:	e1 2a eb cd 	ld.sb	r10,r0[-5171]

8000e2c4 <mavlink_msg_command_long_get_param6>:
 * @brief Get field param6 from command_long message
 *
 * @return Parameter 6, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param6(const mavlink_message_t* msg)
{
8000e2c4:	eb cd 40 c0 	pushm	r6-r7,lr
8000e2c8:	1a 97       	mov	r7,sp
8000e2ca:	20 1d       	sub	sp,4
8000e2cc:	48 76       	lddpc	r6,8000e2e8 <mavlink_msg_command_long_get_param6+0x24>
8000e2ce:	1e 26       	rsub	r6,pc
8000e2d0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  20);
8000e2d4:	31 4b       	mov	r11,20
8000e2d6:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e2da:	fe b0 f8 cd 	rcall	8000d474 <_MAV_RETURN_float>
8000e2de:	18 98       	mov	r8,r12
}
8000e2e0:	10 9c       	mov	r12,r8
8000e2e2:	2f fd       	sub	sp,-4
8000e2e4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e2e8:	80 00       	ld.sh	r0,r0[0x0]
8000e2ea:	e1 52 eb cd 	st.h	r0[-5171],r2

8000e2ec <mavlink_msg_command_long_get_param7>:
 * @brief Get field param7 from command_long message
 *
 * @return Parameter 7, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param7(const mavlink_message_t* msg)
{
8000e2ec:	eb cd 40 c0 	pushm	r6-r7,lr
8000e2f0:	1a 97       	mov	r7,sp
8000e2f2:	20 1d       	sub	sp,4
8000e2f4:	48 76       	lddpc	r6,8000e310 <mavlink_msg_command_long_get_param7+0x24>
8000e2f6:	1e 26       	rsub	r6,pc
8000e2f8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  24);
8000e2fc:	31 8b       	mov	r11,24
8000e2fe:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e302:	fe b0 f8 b9 	rcall	8000d474 <_MAV_RETURN_float>
8000e306:	18 98       	mov	r8,r12
}
8000e308:	10 9c       	mov	r12,r8
8000e30a:	2f fd       	sub	sp,-4
8000e30c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e310:	80 00       	ld.sh	r0,r0[0x0]
8000e312:	e1 7a eb cd 	stcond	r0[-5171],r10

8000e314 <mavlink_msg_command_long_decode>:
 *
 * @param msg The message to decode
 * @param command_long C-struct to decode the message contents into
 */
static inline void mavlink_msg_command_long_decode(const mavlink_message_t* msg, mavlink_command_long_t* command_long)
{
8000e314:	eb cd 40 c0 	pushm	r6-r7,lr
8000e318:	1a 97       	mov	r7,sp
8000e31a:	20 2d       	sub	sp,8
8000e31c:	4a e6       	lddpc	r6,8000e3d4 <mavlink_msg_command_long_decode+0xc0>
8000e31e:	1e 26       	rsub	r6,pc
8000e320:	ef 4c ff fc 	st.w	r7[-4],r12
8000e324:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	command_long->param1 = mavlink_msg_command_long_get_param1(msg);
8000e328:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e32c:	c6 7f       	rcall	8000e1fa <mavlink_msg_command_long_get_param1>
8000e32e:	18 99       	mov	r9,r12
8000e330:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e334:	91 09       	st.w	r8[0x0],r9
	command_long->param2 = mavlink_msg_command_long_get_param2(msg);
8000e336:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e33a:	c7 5f       	rcall	8000e224 <mavlink_msg_command_long_get_param2>
8000e33c:	18 99       	mov	r9,r12
8000e33e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e342:	91 19       	st.w	r8[0x4],r9
	command_long->param3 = mavlink_msg_command_long_get_param3(msg);
8000e344:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e348:	c8 2f       	rcall	8000e24c <mavlink_msg_command_long_get_param3>
8000e34a:	18 99       	mov	r9,r12
8000e34c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e350:	91 29       	st.w	r8[0x8],r9
	command_long->param4 = mavlink_msg_command_long_get_param4(msg);
8000e352:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e356:	c8 ff       	rcall	8000e274 <mavlink_msg_command_long_get_param4>
8000e358:	18 99       	mov	r9,r12
8000e35a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e35e:	91 39       	st.w	r8[0xc],r9
	command_long->param5 = mavlink_msg_command_long_get_param5(msg);
8000e360:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e364:	c9 cf       	rcall	8000e29c <mavlink_msg_command_long_get_param5>
8000e366:	18 99       	mov	r9,r12
8000e368:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e36c:	91 49       	st.w	r8[0x10],r9
	command_long->param6 = mavlink_msg_command_long_get_param6(msg);
8000e36e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e372:	ca 9f       	rcall	8000e2c4 <mavlink_msg_command_long_get_param6>
8000e374:	18 99       	mov	r9,r12
8000e376:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e37a:	91 59       	st.w	r8[0x14],r9
	command_long->param7 = mavlink_msg_command_long_get_param7(msg);
8000e37c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e380:	cb 6f       	rcall	8000e2ec <mavlink_msg_command_long_get_param7>
8000e382:	18 99       	mov	r9,r12
8000e384:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e388:	91 69       	st.w	r8[0x18],r9
	command_long->command = mavlink_msg_command_long_get_command(msg);
8000e38a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e38e:	c1 1f       	rcall	8000e1b0 <mavlink_msg_command_long_get_command>
8000e390:	18 98       	mov	r8,r12
8000e392:	5c 88       	casts.h	r8
8000e394:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e398:	f3 58 00 1c 	st.h	r9[28],r8
	command_long->target_system = mavlink_msg_command_long_get_target_system(msg);
8000e39c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e3a0:	ce ae       	rcall	8000e174 <mavlink_msg_command_long_get_target_system>
8000e3a2:	18 98       	mov	r8,r12
8000e3a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e3a8:	f3 68 00 1e 	st.b	r9[30],r8
	command_long->target_component = mavlink_msg_command_long_get_target_component(msg);
8000e3ac:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e3b0:	cf 1e       	rcall	8000e192 <mavlink_msg_command_long_get_target_component>
8000e3b2:	18 98       	mov	r8,r12
8000e3b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e3b8:	f3 68 00 1f 	st.b	r9[31],r8
	command_long->confirmation = mavlink_msg_command_long_get_confirmation(msg);
8000e3bc:	ee fc ff fc 	ld.w	r12,r7[-4]
8000e3c0:	c0 ef       	rcall	8000e1dc <mavlink_msg_command_long_get_confirmation>
8000e3c2:	18 98       	mov	r8,r12
8000e3c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000e3c8:	f3 68 00 20 	st.b	r9[32],r8
#else
	memcpy(command_long, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_COMMAND_LONG_LEN);
#endif
}
8000e3cc:	2f ed       	sub	sp,-8
8000e3ce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e3d2:	00 00       	add	r0,r0
8000e3d4:	80 00       	ld.sh	r0,r0[0x0]
8000e3d6:	e1 a2 eb cd 	cop	cp7,cr11,cr12,cr13,0x4

8000e3d8 <mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send>:
 * @param thrust Collective thrust, normalized to 0 .. 1
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll_rate, float pitch_rate, float yaw_rate, float thrust)
{
8000e3d8:	eb cd 40 e0 	pushm	r5-r7,lr
8000e3dc:	1a 97       	mov	r7,sp
8000e3de:	20 ad       	sub	sp,40
8000e3e0:	4a 36       	lddpc	r6,8000e46c <mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send+0x94>
8000e3e2:	1e 26       	rsub	r6,pc
8000e3e4:	ee c5 ff f0 	sub	r5,r7,-16
8000e3e8:	ef 4c ff e8 	st.w	r7[-24],r12
8000e3ec:	ef 4b ff e4 	st.w	r7[-28],r11
8000e3f0:	ef 4a ff e0 	st.w	r7[-32],r10
8000e3f4:	ef 49 ff dc 	st.w	r7[-36],r9
8000e3f8:	ef 48 ff d8 	st.w	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e3fc:	ee c9 00 1c 	sub	r9,r7,28
8000e400:	ee c8 00 14 	sub	r8,r7,20
8000e404:	12 9b       	mov	r11,r9
8000e406:	10 9c       	mov	r12,r8
8000e408:	fe b0 f7 52 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 4, roll_rate);
8000e40c:	ee c9 00 20 	sub	r9,r7,32
8000e410:	ee c8 00 14 	sub	r8,r7,20
8000e414:	2f c8       	sub	r8,-4
8000e416:	12 9b       	mov	r11,r9
8000e418:	10 9c       	mov	r12,r8
8000e41a:	fe b0 f7 49 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 8, pitch_rate);
8000e41e:	ee c9 00 24 	sub	r9,r7,36
8000e422:	ee c8 00 14 	sub	r8,r7,20
8000e426:	2f 88       	sub	r8,-8
8000e428:	12 9b       	mov	r11,r9
8000e42a:	10 9c       	mov	r12,r8
8000e42c:	fe b0 f7 40 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 12, yaw_rate);
8000e430:	ee c9 00 28 	sub	r9,r7,40
8000e434:	ee c8 00 14 	sub	r8,r7,20
8000e438:	2f 48       	sub	r8,-12
8000e43a:	12 9b       	mov	r11,r9
8000e43c:	10 9c       	mov	r12,r8
8000e43e:	fe b0 f7 37 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 16, thrust);
8000e442:	0a 99       	mov	r9,r5
8000e444:	ee c8 00 14 	sub	r8,r7,20
8000e448:	2f 08       	sub	r8,-16
8000e44a:	12 9b       	mov	r11,r9
8000e44c:	10 9c       	mov	r12,r8
8000e44e:	fe b0 f7 2f 	rcall	8000d2ac <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, buf, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_CRC);
8000e452:	ee ca 00 14 	sub	r10,r7,20
8000e456:	37 f8       	mov	r8,127
8000e458:	31 49       	mov	r9,20
8000e45a:	35 0b       	mov	r11,80
8000e45c:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e460:	fe b0 f6 5e 	rcall	8000d11c <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN);
#endif
#endif
}
8000e464:	2f 6d       	sub	sp,-40
8000e466:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e46a:	00 00       	add	r0,r0
8000e46c:	80 00       	ld.sh	r0,r0[0x0]
8000e46e:	e2 66 eb cd 	mov	r6,191437

8000e470 <mavlink_msg_hil_state_send>:
 * @param zacc Z acceleration (mg)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_hil_state_send(mavlink_channel_t chan, uint64_t time_usec, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed, int32_t lat, int32_t lon, int32_t alt, int16_t vx, int16_t vy, int16_t vz, int16_t xacc, int16_t yacc, int16_t zacc)
{
8000e470:	eb cd 40 e0 	pushm	r5-r7,lr
8000e474:	1a 97       	mov	r7,sp
8000e476:	21 9d       	sub	sp,100
8000e478:	4d d6       	lddpc	r6,8000e5ec <mavlink_msg_hil_state_send+0x17c>
8000e47a:	1e 26       	rsub	r6,pc
8000e47c:	ee c5 ff f0 	sub	r5,r7,-16
8000e480:	ef 4c ff c4 	st.w	r7[-60],r12
8000e484:	ee eb ff bc 	st.d	r7[-68],r10
8000e488:	ef 49 ff b8 	st.w	r7[-72],r9
8000e48c:	ef 48 ff b4 	st.w	r7[-76],r8
8000e490:	6a 7e       	ld.w	lr,r5[0x1c]
8000e492:	6a 8c       	ld.w	r12,r5[0x20]
8000e494:	6a 9b       	ld.w	r11,r5[0x24]
8000e496:	6a aa       	ld.w	r10,r5[0x28]
8000e498:	6a b9       	ld.w	r9,r5[0x2c]
8000e49a:	6a c8       	ld.w	r8,r5[0x30]
8000e49c:	ef 5e ff b0 	st.h	r7[-80],lr
8000e4a0:	ef 5c ff ac 	st.h	r7[-84],r12
8000e4a4:	ef 5b ff a8 	st.h	r7[-88],r11
8000e4a8:	ef 5a ff a4 	st.h	r7[-92],r10
8000e4ac:	ef 59 ff a0 	st.h	r7[-96],r9
8000e4b0:	ef 58 ff 9c 	st.h	r7[-100],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_HIL_STATE_LEN];
	_mav_put_uint64_t(buf, 0, time_usec);
8000e4b4:	ee c9 00 44 	sub	r9,r7,68
8000e4b8:	ee c8 00 38 	sub	r8,r7,56
8000e4bc:	12 9b       	mov	r11,r9
8000e4be:	10 9c       	mov	r12,r8
8000e4c0:	fe b0 f7 22 	rcall	8000d304 <byte_swap_8>
	_mav_put_float(buf, 8, roll);
8000e4c4:	ee c9 00 48 	sub	r9,r7,72
8000e4c8:	ee c8 00 38 	sub	r8,r7,56
8000e4cc:	2f 88       	sub	r8,-8
8000e4ce:	12 9b       	mov	r11,r9
8000e4d0:	10 9c       	mov	r12,r8
8000e4d2:	fe b0 f6 ed 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 12, pitch);
8000e4d6:	ee c9 00 4c 	sub	r9,r7,76
8000e4da:	ee c8 00 38 	sub	r8,r7,56
8000e4de:	2f 48       	sub	r8,-12
8000e4e0:	12 9b       	mov	r11,r9
8000e4e2:	10 9c       	mov	r12,r8
8000e4e4:	fe b0 f6 e4 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 16, yaw);
8000e4e8:	0a 99       	mov	r9,r5
8000e4ea:	ee c8 00 38 	sub	r8,r7,56
8000e4ee:	2f 08       	sub	r8,-16
8000e4f0:	12 9b       	mov	r11,r9
8000e4f2:	10 9c       	mov	r12,r8
8000e4f4:	fe b0 f6 dc 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 20, rollspeed);
8000e4f8:	ea c9 ff fc 	sub	r9,r5,-4
8000e4fc:	ee c8 00 38 	sub	r8,r7,56
8000e500:	2e c8       	sub	r8,-20
8000e502:	12 9b       	mov	r11,r9
8000e504:	10 9c       	mov	r12,r8
8000e506:	fe b0 f6 d3 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 24, pitchspeed);
8000e50a:	ea c9 ff f8 	sub	r9,r5,-8
8000e50e:	ee c8 00 38 	sub	r8,r7,56
8000e512:	2e 88       	sub	r8,-24
8000e514:	12 9b       	mov	r11,r9
8000e516:	10 9c       	mov	r12,r8
8000e518:	fe b0 f6 ca 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 28, yawspeed);
8000e51c:	ea c9 ff f4 	sub	r9,r5,-12
8000e520:	ee c8 00 38 	sub	r8,r7,56
8000e524:	2e 48       	sub	r8,-28
8000e526:	12 9b       	mov	r11,r9
8000e528:	10 9c       	mov	r12,r8
8000e52a:	fe b0 f6 c1 	rcall	8000d2ac <byte_swap_4>
	_mav_put_int32_t(buf, 32, lat);
8000e52e:	ea c9 ff f0 	sub	r9,r5,-16
8000e532:	ee c8 00 38 	sub	r8,r7,56
8000e536:	2e 08       	sub	r8,-32
8000e538:	12 9b       	mov	r11,r9
8000e53a:	10 9c       	mov	r12,r8
8000e53c:	fe b0 f6 b8 	rcall	8000d2ac <byte_swap_4>
	_mav_put_int32_t(buf, 36, lon);
8000e540:	ea c9 ff ec 	sub	r9,r5,-20
8000e544:	ee c8 00 38 	sub	r8,r7,56
8000e548:	2d c8       	sub	r8,-36
8000e54a:	12 9b       	mov	r11,r9
8000e54c:	10 9c       	mov	r12,r8
8000e54e:	fe b0 f6 af 	rcall	8000d2ac <byte_swap_4>
	_mav_put_int32_t(buf, 40, alt);
8000e552:	ea c9 ff e8 	sub	r9,r5,-24
8000e556:	ee c8 00 38 	sub	r8,r7,56
8000e55a:	2d 88       	sub	r8,-40
8000e55c:	12 9b       	mov	r11,r9
8000e55e:	10 9c       	mov	r12,r8
8000e560:	fe b0 f6 a6 	rcall	8000d2ac <byte_swap_4>
	_mav_put_int16_t(buf, 44, vx);
8000e564:	ee c9 00 50 	sub	r9,r7,80
8000e568:	ee c8 00 38 	sub	r8,r7,56
8000e56c:	2d 48       	sub	r8,-44
8000e56e:	12 9b       	mov	r11,r9
8000e570:	10 9c       	mov	r12,r8
8000e572:	fe b0 f6 83 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 46, vy);
8000e576:	ee c9 00 54 	sub	r9,r7,84
8000e57a:	ee c8 00 38 	sub	r8,r7,56
8000e57e:	2d 28       	sub	r8,-46
8000e580:	12 9b       	mov	r11,r9
8000e582:	10 9c       	mov	r12,r8
8000e584:	fe b0 f6 7a 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 48, vz);
8000e588:	ee c9 00 58 	sub	r9,r7,88
8000e58c:	ee c8 00 38 	sub	r8,r7,56
8000e590:	2d 08       	sub	r8,-48
8000e592:	12 9b       	mov	r11,r9
8000e594:	10 9c       	mov	r12,r8
8000e596:	fe b0 f6 71 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 50, xacc);
8000e59a:	ee c9 00 5c 	sub	r9,r7,92
8000e59e:	ee c8 00 38 	sub	r8,r7,56
8000e5a2:	2c e8       	sub	r8,-50
8000e5a4:	12 9b       	mov	r11,r9
8000e5a6:	10 9c       	mov	r12,r8
8000e5a8:	fe b0 f6 68 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 52, yacc);
8000e5ac:	ee c9 00 60 	sub	r9,r7,96
8000e5b0:	ee c8 00 38 	sub	r8,r7,56
8000e5b4:	2c c8       	sub	r8,-52
8000e5b6:	12 9b       	mov	r11,r9
8000e5b8:	10 9c       	mov	r12,r8
8000e5ba:	fe b0 f6 5f 	rcall	8000d278 <byte_swap_2>
	_mav_put_int16_t(buf, 54, zacc);
8000e5be:	ee c9 00 64 	sub	r9,r7,100
8000e5c2:	ee c8 00 38 	sub	r8,r7,56
8000e5c6:	2c a8       	sub	r8,-54
8000e5c8:	12 9b       	mov	r11,r9
8000e5ca:	10 9c       	mov	r12,r8
8000e5cc:	fe b0 f6 56 	rcall	8000d278 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HIL_STATE, buf, MAVLINK_MSG_ID_HIL_STATE_LEN, MAVLINK_MSG_ID_HIL_STATE_CRC);
8000e5d0:	ee ca 00 38 	sub	r10,r7,56
8000e5d4:	e0 68 00 b7 	mov	r8,183
8000e5d8:	33 89       	mov	r9,56
8000e5da:	35 ab       	mov	r11,90
8000e5dc:	ee fc ff c4 	ld.w	r12,r7[-60]
8000e5e0:	fe b0 f5 9e 	rcall	8000d11c <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HIL_STATE, (const char *)&packet, MAVLINK_MSG_ID_HIL_STATE_LEN, MAVLINK_MSG_ID_HIL_STATE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HIL_STATE, (const char *)&packet, MAVLINK_MSG_ID_HIL_STATE_LEN);
#endif
#endif
}
8000e5e4:	2e 7d       	sub	sp,-100
8000e5e6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e5ea:	00 00       	add	r0,r0
8000e5ec:	80 00       	ld.sh	r0,r0[0x0]
8000e5ee:	e2 fe eb cd 	ld.w	lr,r1[-5171]

8000e5f0 <mavlink_msg_named_value_float_send>:
 * @param value Floating point value
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_named_value_float_send(mavlink_channel_t chan, uint32_t time_boot_ms, const char *name, float value)
{
8000e5f0:	eb cd 40 c0 	pushm	r6-r7,lr
8000e5f4:	1a 97       	mov	r7,sp
8000e5f6:	20 9d       	sub	sp,36
8000e5f8:	49 96       	lddpc	r6,8000e65c <mavlink_msg_named_value_float_send+0x6c>
8000e5fa:	1e 26       	rsub	r6,pc
8000e5fc:	ef 4c ff e8 	st.w	r7[-24],r12
8000e600:	ef 4b ff e4 	st.w	r7[-28],r11
8000e604:	ef 4a ff e0 	st.w	r7[-32],r10
8000e608:	ef 49 ff dc 	st.w	r7[-36],r9
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e60c:	ee c9 00 1c 	sub	r9,r7,28
8000e610:	ee c8 00 14 	sub	r8,r7,20
8000e614:	12 9b       	mov	r11,r9
8000e616:	10 9c       	mov	r12,r8
8000e618:	fe b0 f6 4a 	rcall	8000d2ac <byte_swap_4>
	_mav_put_float(buf, 4, value);
8000e61c:	ee c9 00 24 	sub	r9,r7,36
8000e620:	ee c8 00 14 	sub	r8,r7,20
8000e624:	2f c8       	sub	r8,-4
8000e626:	12 9b       	mov	r11,r9
8000e628:	10 9c       	mov	r12,r8
8000e62a:	fe b0 f6 41 	rcall	8000d2ac <byte_swap_4>
	_mav_put_char_array(buf, 8, name, 10);
8000e62e:	ee c8 00 14 	sub	r8,r7,20
8000e632:	30 a9       	mov	r9,10
8000e634:	ee fa ff e0 	ld.w	r10,r7[-32]
8000e638:	30 8b       	mov	r11,8
8000e63a:	10 9c       	mov	r12,r8
8000e63c:	fe b0 f6 da 	rcall	8000d3f0 <_mav_put_char_array>
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT, buf, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_CRC);
8000e640:	ee ca 00 14 	sub	r10,r7,20
8000e644:	e0 68 00 aa 	mov	r8,170
8000e648:	31 29       	mov	r9,18
8000e64a:	e0 6b 00 fb 	mov	r11,251
8000e64e:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e652:	fe b0 f5 65 	rcall	8000d11c <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN);
#endif
#endif
}
8000e656:	2f 7d       	sub	sp,-36
8000e658:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e65c:	80 00       	ld.sh	r0,r0[0x0]
8000e65e:	e4 7e eb cd 	mov	lr,388045

8000e660 <mavlink_msg_named_value_int_send>:
 * @param value Signed integer value
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_named_value_int_send(mavlink_channel_t chan, uint32_t time_boot_ms, const char *name, int32_t value)
{
8000e660:	eb cd 40 c0 	pushm	r6-r7,lr
8000e664:	1a 97       	mov	r7,sp
8000e666:	20 9d       	sub	sp,36
8000e668:	49 96       	lddpc	r6,8000e6cc <mavlink_msg_named_value_int_send+0x6c>
8000e66a:	1e 26       	rsub	r6,pc
8000e66c:	ef 4c ff e8 	st.w	r7[-24],r12
8000e670:	ef 4b ff e4 	st.w	r7[-28],r11
8000e674:	ef 4a ff e0 	st.w	r7[-32],r10
8000e678:	ef 49 ff dc 	st.w	r7[-36],r9
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e67c:	ee c9 00 1c 	sub	r9,r7,28
8000e680:	ee c8 00 14 	sub	r8,r7,20
8000e684:	12 9b       	mov	r11,r9
8000e686:	10 9c       	mov	r12,r8
8000e688:	fe b0 f6 12 	rcall	8000d2ac <byte_swap_4>
	_mav_put_int32_t(buf, 4, value);
8000e68c:	ee c9 00 24 	sub	r9,r7,36
8000e690:	ee c8 00 14 	sub	r8,r7,20
8000e694:	2f c8       	sub	r8,-4
8000e696:	12 9b       	mov	r11,r9
8000e698:	10 9c       	mov	r12,r8
8000e69a:	fe b0 f6 09 	rcall	8000d2ac <byte_swap_4>
	_mav_put_char_array(buf, 8, name, 10);
8000e69e:	ee c8 00 14 	sub	r8,r7,20
8000e6a2:	30 a9       	mov	r9,10
8000e6a4:	ee fa ff e0 	ld.w	r10,r7[-32]
8000e6a8:	30 8b       	mov	r11,8
8000e6aa:	10 9c       	mov	r12,r8
8000e6ac:	fe b0 f6 a2 	rcall	8000d3f0 <_mav_put_char_array>
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_INT, buf, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_INT_CRC);
8000e6b0:	ee ca 00 14 	sub	r10,r7,20
8000e6b4:	32 c8       	mov	r8,44
8000e6b6:	31 29       	mov	r9,18
8000e6b8:	e0 6b 00 fc 	mov	r11,252
8000e6bc:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e6c0:	fe b0 f5 2e 	rcall	8000d11c <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_INT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_INT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_INT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN);
#endif
#endif
}
8000e6c4:	2f 7d       	sub	sp,-36
8000e6c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e6ca:	00 00       	add	r0,r0
8000e6cc:	80 00       	ld.sh	r0,r0[0x0]
8000e6ce:	e4 ee eb cd 	ld.d	lr,r2[-5171]

8000e6d0 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8000e6d0:	eb cd 40 c0 	pushm	r6-r7,lr
8000e6d4:	1a 97       	mov	r7,sp
8000e6d6:	20 6d       	sub	sp,24
8000e6d8:	49 e6       	lddpc	r6,8000e750 <interpolate+0x80>
8000e6da:	1e 26       	rsub	r6,pc
8000e6dc:	ef 4c ff f8 	st.w	r7[-8],r12
8000e6e0:	ef 4b ff f4 	st.w	r7[-12],r11
8000e6e4:	ef 4a ff f0 	st.w	r7[-16],r10
8000e6e8:	ef 49 ff ec 	st.w	r7[-20],r9
8000e6ec:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8000e6f0:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000e6f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e6f8:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8000e6fc:	c0 41       	brne	8000e704 <interpolate+0x34>
	{
		return y1;
8000e6fe:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000e702:	c2 38       	rjmp	8000e748 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8000e704:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000e708:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000e70c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000e710:	ee fa ff f8 	ld.w	r10,r7[-8]
8000e714:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e718:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000e71c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000e720:	ee fa ff f0 	ld.w	r10,r7[-16]
8000e724:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000e728:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000e72c:	12 9b       	mov	r11,r9
8000e72e:	10 9c       	mov	r12,r8
8000e730:	f0 16 00 08 	mcall	r6[32]
8000e734:	18 98       	mov	r8,r12
8000e736:	10 99       	mov	r9,r8
8000e738:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000e73c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000e740:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8000e744:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8000e748:	10 9c       	mov	r12,r8
8000e74a:	2f ad       	sub	sp,-24
8000e74c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e750:	80 00       	ld.sh	r0,r0[0x0]
8000e752:	e5 5e eb cd 	st.h	r2[-5171],lr

8000e754 <mavlink_send_heartbeat>:
#include "mavlink_waypoint_handler.h"
#include "neighbor_selection.h"

central_data_t *centralData;

void mavlink_send_heartbeat(void) {
8000e754:	eb cd 40 c0 	pushm	r6-r7,lr
8000e758:	1a 97       	mov	r7,sp
8000e75a:	20 1d       	sub	sp,4
8000e75c:	48 e6       	lddpc	r6,8000e794 <mavlink_send_heartbeat+0x40>
8000e75e:	1e 26       	rsub	r6,pc

	central_data_t *centralData=get_central_data();
8000e760:	f0 16 00 33 	mcall	r6[204]
8000e764:	18 98       	mov	r8,r12
8000e766:	ef 48 ff fc 	st.w	r7[-4],r8

	mavlink_msg_heartbeat_send(MAVLINK_COMM_0, MAV_TYPE_QUADROTOR, MAV_AUTOPILOT_GENERIC, centralData->mav_mode, 0, centralData->mav_state);
8000e76a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e76e:	f1 38 10 bd 	ld.ub	r8,r8[4285]
8000e772:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e776:	f3 39 10 bc 	ld.ub	r9,r9[4284]
8000e77a:	1a d8       	st.w	--sp,r8
8000e77c:	30 08       	mov	r8,0
8000e77e:	30 0a       	mov	r10,0
8000e780:	30 2b       	mov	r11,2
8000e782:	30 0c       	mov	r12,0
8000e784:	fe b0 f6 98 	rcall	8000d4b4 <mavlink_msg_heartbeat_send>
8000e788:	2f fd       	sub	sp,-4
														//(int)(1000.0*get_internal_rail()), 
														//(int)(1000.0*get_6V_analog_rail()), 
														//(int)(1000.0*get_5V_analog_rail()),
														//0.0, 0.0, 0.0, 0.0);
														
	trigger_analog_monitor();
8000e78a:	f0 16 01 f3 	mcall	r6[1996]
	
	//dbg_print("Send hearbeat.\n");
}
8000e78e:	2f fd       	sub	sp,-4
8000e790:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e794:	80 00       	ld.sh	r0,r0[0x0]
8000e796:	e5 e2 eb cd 	sthh.w	sp[0x2f0],r2:t,r2:b

8000e798 <mavlink_send_raw_imu>:

void mavlink_send_raw_imu(void) {
8000e798:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000e79c:	1a 97       	mov	r7,sp
8000e79e:	20 6d       	sub	sp,24
8000e7a0:	4b e6       	lddpc	r6,8000e898 <mavlink_send_raw_imu+0x100>
8000e7a2:	1e 26       	rsub	r6,pc
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
8000e7a4:	ec f8 00 00 	ld.w	r8,r6[0]
8000e7a8:	70 08       	ld.w	r8,r8[0x0]
8000e7aa:	f0 f8 00 ec 	ld.w	r8,r8[236]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e7ae:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e7b2:	5c 88       	casts.h	r8
8000e7b4:	ef 48 ff e8 	st.w	r7[-24],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Y], 
8000e7b8:	ec f8 00 00 	ld.w	r8,r6[0]
8000e7bc:	70 08       	ld.w	r8,r8[0x0]
8000e7be:	f0 f8 00 e8 	ld.w	r8,r8[232]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e7c2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e7c6:	5c 88       	casts.h	r8
8000e7c8:	ef 48 ff ec 	st.w	r7[-20],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
8000e7cc:	ec f8 00 00 	ld.w	r8,r6[0]
8000e7d0:	70 08       	ld.w	r8,r8[0x0]
8000e7d2:	f0 f8 00 e4 	ld.w	r8,r8[228]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e7d6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e7da:	5c 88       	casts.h	r8
8000e7dc:	ef 48 ff f0 	st.w	r7[-16],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
8000e7e0:	ec f8 00 00 	ld.w	r8,r6[0]
8000e7e4:	70 08       	ld.w	r8,r8[0x0]
8000e7e6:	f0 f8 00 d4 	ld.w	r8,r8[212]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e7ea:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e7ee:	5c 88       	casts.h	r8
8000e7f0:	ef 48 ff f4 	st.w	r7[-12],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
8000e7f4:	ec f8 00 00 	ld.w	r8,r6[0]
8000e7f8:	70 08       	ld.w	r8,r8[0x0]
8000e7fa:	f0 f8 00 d0 	ld.w	r8,r8[208]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e7fe:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e802:	5c 88       	casts.h	r8
8000e804:	ef 48 ff f8 	st.w	r7[-8],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
8000e808:	ec f8 00 00 	ld.w	r8,r6[0]
8000e80c:	70 08       	ld.w	r8,r8[0x0]
8000e80e:	f0 f8 00 cc 	ld.w	r8,r8[204]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e812:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e816:	5c 88       	casts.h	r8
8000e818:	ef 48 ff fc 	st.w	r7[-4],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
8000e81c:	ec f8 00 00 	ld.w	r8,r6[0]
8000e820:	70 08       	ld.w	r8,r8[0x0]
8000e822:	f0 f8 00 e0 	ld.w	r8,r8[224]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e826:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e82a:	5c 88       	casts.h	r8
8000e82c:	10 90       	mov	r0,r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
8000e82e:	ec f8 00 00 	ld.w	r8,r6[0]
8000e832:	70 08       	ld.w	r8,r8[0x0]
8000e834:	f0 f8 00 dc 	ld.w	r8,r8[220]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e838:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e83c:	5c 88       	casts.h	r8
8000e83e:	10 91       	mov	r1,r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
8000e840:	ec f8 00 00 	ld.w	r8,r6[0]
8000e844:	70 08       	ld.w	r8,r8[0x0]
8000e846:	f0 f8 00 d8 	ld.w	r8,r8[216]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e84a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e84e:	5c 88       	casts.h	r8
8000e850:	10 95       	mov	r5,r8
8000e852:	f0 16 00 29 	mcall	r6[164]
8000e856:	18 98       	mov	r8,r12
8000e858:	10 92       	mov	r2,r8
8000e85a:	30 03       	mov	r3,0
8000e85c:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000e860:	1a d8       	st.w	--sp,r8
8000e862:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000e866:	1a d8       	st.w	--sp,r8
8000e868:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e86c:	1a d8       	st.w	--sp,r8
8000e86e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e872:	1a d8       	st.w	--sp,r8
8000e874:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e878:	1a d8       	st.w	--sp,r8
8000e87a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e87e:	1a d8       	st.w	--sp,r8
8000e880:	1a d0       	st.w	--sp,r0
8000e882:	02 98       	mov	r8,r1
8000e884:	0a 99       	mov	r9,r5
8000e886:	04 9a       	mov	r10,r2
8000e888:	06 9b       	mov	r11,r3
8000e88a:	30 0c       	mov	r12,0
8000e88c:	fe b0 f7 58 	rcall	8000d73c <mavlink_msg_raw_imu_send>
8000e890:	2f 9d       	sub	sp,-28
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}
8000e892:	2f ad       	sub	sp,-24
8000e894:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000e898:	80 00       	ld.sh	r0,r0[0x0]
8000e89a:	e6 26 eb cd 	sub	r6,453581

8000e89c <mavlink_send_scaled_imu>:

void mavlink_send_scaled_imu(void) {
8000e89c:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000e8a0:	1a 97       	mov	r7,sp
8000e8a2:	20 4d       	sub	sp,16
8000e8a4:	4c 96       	lddpc	r6,8000e9c8 <mavlink_send_scaled_imu+0x12c>
8000e8a6:	1e 26       	rsub	r6,pc
	//1000*centralData->imu1.attitude.mag[IMU_X],
	//1000*centralData->imu1.attitude.mag[IMU_Y],
	//1000*centralData->imu1.attitude.mag[IMU_Z]
	1000*centralData->imu1.attitude.north_vec.v[0],
	1000*centralData->imu1.attitude.north_vec.v[1],
	1000*centralData->imu1.attitude.north_vec.v[2]
8000e8a8:	ec f8 00 00 	ld.w	r8,r6[0]
8000e8ac:	70 08       	ld.w	r8,r8[0x0]
8000e8ae:	70 b9       	ld.w	r9,r8[0x2c]
8000e8b0:	fc 18 44 7a 	movh	r8,0x447a
8000e8b4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e8b8:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e8bc:	5c 88       	casts.h	r8
8000e8be:	ef 48 ff f0 	st.w	r7[-16],r8
	1000*centralData->imu1.attitude.om[IMU_Z], 
	//1000*centralData->imu1.attitude.mag[IMU_X],
	//1000*centralData->imu1.attitude.mag[IMU_Y],
	//1000*centralData->imu1.attitude.mag[IMU_Z]
	1000*centralData->imu1.attitude.north_vec.v[0],
	1000*centralData->imu1.attitude.north_vec.v[1],
8000e8c2:	ec f8 00 00 	ld.w	r8,r6[0]
8000e8c6:	70 08       	ld.w	r8,r8[0x0]
8000e8c8:	70 a9       	ld.w	r9,r8[0x28]
8000e8ca:	fc 18 44 7a 	movh	r8,0x447a
8000e8ce:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e8d2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e8d6:	5c 88       	casts.h	r8
8000e8d8:	ef 48 ff f4 	st.w	r7[-12],r8
	1000*centralData->imu1.attitude.om[IMU_Y], 
	1000*centralData->imu1.attitude.om[IMU_Z], 
	//1000*centralData->imu1.attitude.mag[IMU_X],
	//1000*centralData->imu1.attitude.mag[IMU_Y],
	//1000*centralData->imu1.attitude.mag[IMU_Z]
	1000*centralData->imu1.attitude.north_vec.v[0],
8000e8dc:	ec f8 00 00 	ld.w	r8,r6[0]
8000e8e0:	70 08       	ld.w	r8,r8[0x0]
8000e8e2:	70 99       	ld.w	r9,r8[0x24]
8000e8e4:	fc 18 44 7a 	movh	r8,0x447a
8000e8e8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e8ec:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e8f0:	5c 88       	casts.h	r8
8000e8f2:	ef 48 ff f8 	st.w	r7[-8],r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
	1000*centralData->imu1.attitude.om[IMU_X], 
	1000*centralData->imu1.attitude.om[IMU_Y], 
	1000*centralData->imu1.attitude.om[IMU_Z], 
8000e8f6:	ec f8 00 00 	ld.w	r8,r6[0]
8000e8fa:	70 08       	ld.w	r8,r8[0x0]
8000e8fc:	f0 f9 00 80 	ld.w	r9,r8[128]
8000e900:	fc 18 44 7a 	movh	r8,0x447a
8000e904:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e908:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e90c:	5c 88       	casts.h	r8
8000e90e:	ef 48 ff fc 	st.w	r7[-4],r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
	1000*centralData->imu1.attitude.om[IMU_X], 
	1000*centralData->imu1.attitude.om[IMU_Y], 
8000e912:	ec f8 00 00 	ld.w	r8,r6[0]
8000e916:	70 08       	ld.w	r8,r8[0x0]
8000e918:	71 f9       	ld.w	r9,r8[0x7c]
8000e91a:	fc 18 44 7a 	movh	r8,0x447a
8000e91e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e922:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e926:	5c 88       	casts.h	r8
8000e928:	10 90       	mov	r0,r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
	1000*centralData->imu1.attitude.om[IMU_X], 
8000e92a:	ec f8 00 00 	ld.w	r8,r6[0]
8000e92e:	70 08       	ld.w	r8,r8[0x0]
8000e930:	71 e9       	ld.w	r9,r8[0x78]
8000e932:	fc 18 44 7a 	movh	r8,0x447a
8000e936:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e93a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e93e:	5c 88       	casts.h	r8
8000e940:	10 91       	mov	r1,r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
8000e942:	ec f8 00 00 	ld.w	r8,r6[0]
8000e946:	70 08       	ld.w	r8,r8[0x0]
8000e948:	f0 f9 00 8c 	ld.w	r9,r8[140]
8000e94c:	fc 18 44 7a 	movh	r8,0x447a
8000e950:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e954:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e958:	5c 88       	casts.h	r8
8000e95a:	10 92       	mov	r2,r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
8000e95c:	ec f8 00 00 	ld.w	r8,r6[0]
8000e960:	70 08       	ld.w	r8,r8[0x0]
8000e962:	f0 f9 00 88 	ld.w	r9,r8[136]
8000e966:	fc 18 44 7a 	movh	r8,0x447a
8000e96a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e96e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e972:	5c 88       	casts.h	r8
8000e974:	10 93       	mov	r3,r8
	1000*centralData->imu1.attitude.a [IMU_X],
8000e976:	ec f8 00 00 	ld.w	r8,r6[0]
8000e97a:	70 08       	ld.w	r8,r8[0x0]
8000e97c:	f0 f9 00 84 	ld.w	r9,r8[132]
8000e980:	fc 18 44 7a 	movh	r8,0x447a
8000e984:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e988:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e98c:	5c 88       	casts.h	r8
8000e98e:	10 95       	mov	r5,r8
8000e990:	f0 16 00 0f 	mcall	r6[60]
8000e994:	18 9b       	mov	r11,r12
8000e996:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e99a:	1a d8       	st.w	--sp,r8
8000e99c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e9a0:	1a d8       	st.w	--sp,r8
8000e9a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e9a6:	1a d8       	st.w	--sp,r8
8000e9a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e9ac:	1a d8       	st.w	--sp,r8
8000e9ae:	1a d0       	st.w	--sp,r0
8000e9b0:	1a d1       	st.w	--sp,r1
8000e9b2:	04 98       	mov	r8,r2
8000e9b4:	06 99       	mov	r9,r3
8000e9b6:	0a 9a       	mov	r10,r5
8000e9b8:	30 0c       	mov	r12,0
8000e9ba:	fe b0 f6 2f 	rcall	8000d618 <mavlink_msg_scaled_imu_send>
8000e9be:	2f ad       	sub	sp,-24
	1000*centralData->imu1.attitude.north_vec.v[2]
	//1000*centralData->imu1.attitude.up_vec.v[0],
	//1000*centralData->imu1.attitude.up_vec.v[1],
	//1000*centralData->imu1.attitude.up_vec.v[2]
	);
}
8000e9c0:	2f cd       	sub	sp,-16
8000e9c2:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000e9c6:	00 00       	add	r0,r0
8000e9c8:	80 00       	ld.sh	r0,r0[0x0]
8000e9ca:	e7 2a eb cd 	ld.sb	r10,r3[-5171]

8000e9cc <mavlink_send_rpy_rates_error>:
void  mavlink_send_rpy_rates_error(void) {
8000e9cc:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000e9d0:	1a 97       	mov	r7,sp
8000e9d2:	20 1d       	sub	sp,4
8000e9d4:	49 16       	lddpc	r6,8000ea18 <mavlink_send_rpy_rates_error+0x4c>
8000e9d6:	1e 26       	rsub	r6,pc
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
8000e9d8:	ec f8 00 00 	ld.w	r8,r6[0]
8000e9dc:	70 08       	ld.w	r8,r8[0x0]
8000e9de:	f0 c8 fe 60 	sub	r8,r8,-416
8000e9e2:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), rate_stab->rpy_controller[0].error, rate_stab->rpy_controller[1].error,rate_stab->rpy_controller[2].error,0 );
8000e9e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e9ea:	f0 f2 00 bc 	ld.w	r2,r8[188]
8000e9ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e9f2:	71 e3       	ld.w	r3,r8[0x78]
8000e9f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e9f8:	70 d5       	ld.w	r5,r8[0x34]
8000e9fa:	f0 16 00 0f 	mcall	r6[60]
8000e9fe:	18 9b       	mov	r11,r12
8000ea00:	30 08       	mov	r8,0
8000ea02:	1a d8       	st.w	--sp,r8
8000ea04:	04 98       	mov	r8,r2
8000ea06:	06 99       	mov	r9,r3
8000ea08:	0a 9a       	mov	r10,r5
8000ea0a:	30 0c       	mov	r12,0
8000ea0c:	fe b0 fc e6 	rcall	8000e3d8 <mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send>
8000ea10:	2f fd       	sub	sp,-4
}
8000ea12:	2f fd       	sub	sp,-4
8000ea14:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000ea18:	80 00       	ld.sh	r0,r0[0x0]
8000ea1a:	e8 5a eb cd 	cp.w	r10,650189

8000ea1c <mavlink_send_rpy_speed_thrust_setpoint>:
void  mavlink_send_rpy_speed_thrust_setpoint(void) {
8000ea1c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000ea20:	1a 97       	mov	r7,sp
8000ea22:	20 1d       	sub	sp,4
8000ea24:	49 16       	lddpc	r6,8000ea68 <mavlink_send_rpy_speed_thrust_setpoint+0x4c>
8000ea26:	1e 26       	rsub	r6,pc
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
8000ea28:	ec f8 00 00 	ld.w	r8,r6[0]
8000ea2c:	70 08       	ld.w	r8,r8[0x0]
8000ea2e:	f0 c8 fe 60 	sub	r8,r8,-416
8000ea32:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), rate_stab->rpy_controller[0].output, rate_stab->rpy_controller[1].output,rate_stab->rpy_controller[2].output,0 );
8000ea36:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ea3a:	f0 f2 00 b8 	ld.w	r2,r8[184]
8000ea3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ea42:	71 d3       	ld.w	r3,r8[0x74]
8000ea44:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ea48:	70 c5       	ld.w	r5,r8[0x30]
8000ea4a:	f0 16 00 0f 	mcall	r6[60]
8000ea4e:	18 9b       	mov	r11,r12
8000ea50:	30 08       	mov	r8,0
8000ea52:	1a d8       	st.w	--sp,r8
8000ea54:	04 98       	mov	r8,r2
8000ea56:	06 99       	mov	r9,r3
8000ea58:	0a 9a       	mov	r10,r5
8000ea5a:	30 0c       	mov	r12,0
8000ea5c:	fe b0 fa ec 	rcall	8000e034 <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send>
8000ea60:	2f fd       	sub	sp,-4
}
8000ea62:	2f fd       	sub	sp,-4
8000ea64:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000ea68:	80 00       	ld.sh	r0,r0[0x0]
8000ea6a:	e8 aa       	*unknown*

8000ea6c <mavlink_send_rpy_thrust_setpoint>:
void mavlink_send_rpy_thrust_setpoint(void) {
8000ea6c:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000ea70:	1a 97       	mov	r7,sp
8000ea72:	49 26       	lddpc	r6,8000eab8 <mavlink_send_rpy_thrust_setpoint+0x4c>
8000ea74:	1e 26       	rsub	r6,pc
	
	// Controls output
	//mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float thrust)
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
8000ea76:	ec f8 00 00 	ld.w	r8,r6[0]
8000ea7a:	70 08       	ld.w	r8,r8[0x0]
8000ea7c:	f0 f1 01 54 	ld.w	r1,r8[340]
8000ea80:	ec f8 00 00 	ld.w	r8,r6[0]
8000ea84:	70 08       	ld.w	r8,r8[0x0]
8000ea86:	f0 f2 01 50 	ld.w	r2,r8[336]
8000ea8a:	ec f8 00 00 	ld.w	r8,r6[0]
8000ea8e:	70 08       	ld.w	r8,r8[0x0]
8000ea90:	f0 f3 01 4c 	ld.w	r3,r8[332]
8000ea94:	ec f8 00 00 	ld.w	r8,r6[0]
8000ea98:	70 08       	ld.w	r8,r8[0x0]
8000ea9a:	f0 f5 01 48 	ld.w	r5,r8[328]
8000ea9e:	f0 16 00 0f 	mcall	r6[60]
8000eaa2:	18 9b       	mov	r11,r12
8000eaa4:	1a d1       	st.w	--sp,r1
8000eaa6:	04 98       	mov	r8,r2
8000eaa8:	06 99       	mov	r9,r3
8000eaaa:	0a 9a       	mov	r10,r5
8000eaac:	30 0c       	mov	r12,0
8000eaae:	fe b0 fa 77 	rcall	8000df9c <mavlink_msg_roll_pitch_yaw_thrust_setpoint_send>
8000eab2:	2f fd       	sub	sp,-4
}
8000eab4:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000eab8:	80 00       	ld.sh	r0,r0[0x0]
8000eaba:	e8 f8 eb cd 	ld.w	r8,r4[-5171]

8000eabc <mavlink_send_servo_output>:

void mavlink_send_servo_output(void) {
8000eabc:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000eac0:	1a 97       	mov	r7,sp
8000eac2:	20 4d       	sub	sp,16
8000eac4:	4c b6       	lddpc	r6,8000ebf0 <mavlink_send_servo_output+0x134>
8000eac6:	1e 26       	rsub	r6,pc
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
8000eac8:	ec f8 00 00 	ld.w	r8,r6[0]
8000eacc:	70 08       	ld.w	r8,r8[0x0]
8000eace:	f0 c8 fe 60 	sub	r8,r8,-416
8000ead2:	ef 48 ff fc 	st.w	r7[-4],r8
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
	1000*rate_stab->output.rpy[2]+1000,
	1000*rate_stab->output.thrust+1000
8000ead6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eada:	f0 f9 01 1c 	ld.w	r9,r8[284]
8000eade:	fc 18 44 7a 	movh	r8,0x447a
8000eae2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000eae6:	fc 18 44 7a 	movh	r8,0x447a
8000eaea:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000eaee:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000eaf2:	5c 88       	casts.h	r8
8000eaf4:	5c 78       	castu.h	r8
8000eaf6:	ef 48 ff f0 	st.w	r7[-16],r8
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
	1000*rate_stab->output.rpy[2]+1000,
8000eafa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eafe:	f0 f9 01 18 	ld.w	r9,r8[280]
8000eb02:	fc 18 44 7a 	movh	r8,0x447a
8000eb06:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000eb0a:	fc 18 44 7a 	movh	r8,0x447a
8000eb0e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000eb12:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000eb16:	5c 88       	casts.h	r8
8000eb18:	5c 78       	castu.h	r8
8000eb1a:	ef 48 ff f4 	st.w	r7[-12],r8
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
8000eb1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eb22:	f0 f9 01 14 	ld.w	r9,r8[276]
8000eb26:	fc 18 44 7a 	movh	r8,0x447a
8000eb2a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000eb2e:	fc 18 44 7a 	movh	r8,0x447a
8000eb32:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000eb36:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000eb3a:	5c 88       	casts.h	r8
8000eb3c:	5c 78       	castu.h	r8
8000eb3e:	ef 48 ff f8 	st.w	r7[-8],r8
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
8000eb42:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eb46:	f0 f9 01 10 	ld.w	r9,r8[272]
8000eb4a:	fc 18 44 7a 	movh	r8,0x447a
8000eb4e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000eb52:	fc 18 44 7a 	movh	r8,0x447a
8000eb56:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000eb5a:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000eb5e:	5c 88       	casts.h	r8
8000eb60:	e1 d8 c0 10 	bfextu	r0,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
8000eb64:	ec f8 00 00 	ld.w	r8,r6[0]
8000eb68:	70 08       	ld.w	r8,r8[0x0]
8000eb6a:	f0 f8 07 1c 	ld.w	r8,r8[1820]
8000eb6e:	5c 88       	casts.h	r8
8000eb70:	f0 c8 fa 24 	sub	r8,r8,-1500
8000eb74:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000eb76:	e3 d8 c0 10 	bfextu	r1,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
8000eb7a:	ec f8 00 00 	ld.w	r8,r6[0]
8000eb7e:	70 08       	ld.w	r8,r8[0x0]
8000eb80:	f0 f8 07 0c 	ld.w	r8,r8[1804]
8000eb84:	5c 88       	casts.h	r8
8000eb86:	f0 c8 fa 24 	sub	r8,r8,-1500
8000eb8a:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000eb8c:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
8000eb90:	ec f8 00 00 	ld.w	r8,r6[0]
8000eb94:	70 08       	ld.w	r8,r8[0x0]
8000eb96:	f0 f8 06 fc 	ld.w	r8,r8[1788]
8000eb9a:	5c 88       	casts.h	r8
8000eb9c:	f0 c8 fa 24 	sub	r8,r8,-1500
8000eba0:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000eba2:	e7 d8 c0 10 	bfextu	r3,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
8000eba6:	ec f8 00 00 	ld.w	r8,r6[0]
8000ebaa:	70 08       	ld.w	r8,r8[0x0]
8000ebac:	f0 f8 06 ec 	ld.w	r8,r8[1772]
8000ebb0:	5c 88       	casts.h	r8
8000ebb2:	f0 c8 fa 24 	sub	r8,r8,-1500
8000ebb6:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab = &centralData->stabiliser_stack.rate_stabiliser;
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000ebb8:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000ebbc:	f0 16 00 29 	mcall	r6[164]
8000ebc0:	18 9b       	mov	r11,r12
8000ebc2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ebc6:	1a d8       	st.w	--sp,r8
8000ebc8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ebcc:	1a d8       	st.w	--sp,r8
8000ebce:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ebd2:	1a d8       	st.w	--sp,r8
8000ebd4:	1a d0       	st.w	--sp,r0
8000ebd6:	1a d1       	st.w	--sp,r1
8000ebd8:	1a d2       	st.w	--sp,r2
8000ebda:	06 98       	mov	r8,r3
8000ebdc:	0a 99       	mov	r9,r5
8000ebde:	30 0a       	mov	r10,0
8000ebe0:	30 0c       	mov	r12,0
8000ebe2:	fe b0 f9 4f 	rcall	8000de80 <mavlink_msg_servo_output_raw_send>
8000ebe6:	2f ad       	sub	sp,-24
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
	1000*rate_stab->output.rpy[2]+1000,
	1000*rate_stab->output.thrust+1000
	);
}
8000ebe8:	2f cd       	sub	sp,-16
8000ebea:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000ebee:	00 00       	add	r0,r0
8000ebf0:	80 00       	ld.sh	r0,r0[0x0]
8000ebf2:	e9 4a eb cd 	st.w	r4[-5171],r10

8000ebf4 <mavlink_send_attitude_quaternion>:

void mavlink_send_attitude_quaternion(void) {
8000ebf4:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000ebf8:	1a 97       	mov	r7,sp
8000ebfa:	20 2d       	sub	sp,8
8000ebfc:	49 c6       	lddpc	r6,8000ec6c <mavlink_send_attitude_quaternion+0x78>
8000ebfe:	1e 26       	rsub	r6,pc
	// ATTITUDE QUATERNION
	mavlink_msg_attitude_quaternion_send(MAVLINK_COMM_0, get_millis(), centralData->imu1.attitude.qe.s, centralData->imu1.attitude.qe.v[0], centralData->imu1.attitude.qe.v[1], centralData->imu1.attitude.qe.v[2], centralData->imu1.attitude.om[0], centralData->imu1.attitude.om[1], centralData->imu1.attitude.om[2]);
8000ec00:	ec f8 00 00 	ld.w	r8,r6[0]
8000ec04:	70 08       	ld.w	r8,r8[0x0]
8000ec06:	f0 f8 00 80 	ld.w	r8,r8[128]
8000ec0a:	ef 48 ff f8 	st.w	r7[-8],r8
8000ec0e:	ec f8 00 00 	ld.w	r8,r6[0]
8000ec12:	70 08       	ld.w	r8,r8[0x0]
8000ec14:	71 f8       	ld.w	r8,r8[0x7c]
8000ec16:	ef 48 ff fc 	st.w	r7[-4],r8
8000ec1a:	ec f8 00 00 	ld.w	r8,r6[0]
8000ec1e:	70 08       	ld.w	r8,r8[0x0]
8000ec20:	71 e0       	ld.w	r0,r8[0x78]
8000ec22:	ec f8 00 00 	ld.w	r8,r6[0]
8000ec26:	70 08       	ld.w	r8,r8[0x0]
8000ec28:	70 31       	ld.w	r1,r8[0xc]
8000ec2a:	ec f8 00 00 	ld.w	r8,r6[0]
8000ec2e:	70 08       	ld.w	r8,r8[0x0]
8000ec30:	70 22       	ld.w	r2,r8[0x8]
8000ec32:	ec f8 00 00 	ld.w	r8,r6[0]
8000ec36:	70 08       	ld.w	r8,r8[0x0]
8000ec38:	70 13       	ld.w	r3,r8[0x4]
8000ec3a:	ec f8 00 00 	ld.w	r8,r6[0]
8000ec3e:	70 08       	ld.w	r8,r8[0x0]
8000ec40:	70 05       	ld.w	r5,r8[0x0]
8000ec42:	f0 16 00 0f 	mcall	r6[60]
8000ec46:	18 9b       	mov	r11,r12
8000ec48:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ec4c:	1a d8       	st.w	--sp,r8
8000ec4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ec52:	1a d8       	st.w	--sp,r8
8000ec54:	1a d0       	st.w	--sp,r0
8000ec56:	1a d1       	st.w	--sp,r1
8000ec58:	04 98       	mov	r8,r2
8000ec5a:	06 99       	mov	r9,r3
8000ec5c:	0a 9a       	mov	r10,r5
8000ec5e:	30 0c       	mov	r12,0
8000ec60:	fe b0 f6 a2 	rcall	8000d9a4 <mavlink_msg_attitude_quaternion_send>
8000ec64:	2f cd       	sub	sp,-16
}
8000ec66:	2f ed       	sub	sp,-8
8000ec68:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000ec6c:	80 00       	ld.sh	r0,r0[0x0]
8000ec6e:	ea 82 eb cd 	brhs	8016c408 <_data_lma+0x13a1c0>

8000ec70 <mavlink_send_attitude>:
void mavlink_send_attitude(void) {
8000ec70:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000ec74:	1a 97       	mov	r7,sp
8000ec76:	20 4d       	sub	sp,16
8000ec78:	49 f6       	lddpc	r6,8000ecf4 <mavlink_send_attitude+0x84>
8000ec7a:	1e 26       	rsub	r6,pc
	// ATTITUDE
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
8000ec7c:	ec f8 00 00 	ld.w	r8,r6[0]
8000ec80:	70 09       	ld.w	r9,r8[0x0]
8000ec82:	ee ca 00 0c 	sub	r10,r7,12
8000ec86:	20 4d       	sub	sp,16
8000ec88:	1a 98       	mov	r8,sp
8000ec8a:	20 08       	sub	r8,0
8000ec8c:	20 09       	sub	r9,0
8000ec8e:	72 0b       	ld.w	r11,r9[0x0]
8000ec90:	91 0b       	st.w	r8[0x0],r11
8000ec92:	72 1b       	ld.w	r11,r9[0x4]
8000ec94:	91 1b       	st.w	r8[0x4],r11
8000ec96:	72 2b       	ld.w	r11,r9[0x8]
8000ec98:	91 2b       	st.w	r8[0x8],r11
8000ec9a:	72 39       	ld.w	r9,r9[0xc]
8000ec9c:	91 39       	st.w	r8[0xc],r9
8000ec9e:	14 9c       	mov	r12,r10
8000eca0:	f0 16 00 6d 	mcall	r6[436]
8000eca4:	2f cd       	sub	sp,-16
	mavlink_msg_attitude_send(MAVLINK_COMM_0, get_millis(), aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2], centralData->imu1.attitude.om[0], centralData->imu1.attitude.om[1], centralData->imu1.attitude.om[2]);
8000eca6:	ec f8 00 00 	ld.w	r8,r6[0]
8000ecaa:	70 08       	ld.w	r8,r8[0x0]
8000ecac:	f0 f8 00 80 	ld.w	r8,r8[128]
8000ecb0:	ef 48 ff f0 	st.w	r7[-16],r8
8000ecb4:	ec f8 00 00 	ld.w	r8,r6[0]
8000ecb8:	70 08       	ld.w	r8,r8[0x0]
8000ecba:	71 f0       	ld.w	r0,r8[0x7c]
8000ecbc:	ec f8 00 00 	ld.w	r8,r6[0]
8000ecc0:	70 08       	ld.w	r8,r8[0x0]
8000ecc2:	71 e1       	ld.w	r1,r8[0x78]
8000ecc4:	ee f2 ff fc 	ld.w	r2,r7[-4]
8000ecc8:	ee f3 ff f8 	ld.w	r3,r7[-8]
8000eccc:	ee f5 ff f4 	ld.w	r5,r7[-12]
8000ecd0:	f0 16 00 0f 	mcall	r6[60]
8000ecd4:	18 9b       	mov	r11,r12
8000ecd6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ecda:	1a d8       	st.w	--sp,r8
8000ecdc:	1a d0       	st.w	--sp,r0
8000ecde:	1a d1       	st.w	--sp,r1
8000ece0:	04 98       	mov	r8,r2
8000ece2:	06 99       	mov	r9,r3
8000ece4:	0a 9a       	mov	r10,r5
8000ece6:	30 0c       	mov	r12,0
8000ece8:	fe b0 f6 00 	rcall	8000d8e8 <mavlink_msg_attitude_send>
8000ecec:	2f dd       	sub	sp,-12
}
8000ecee:	2f cd       	sub	sp,-16
8000ecf0:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000ecf4:	80 00       	ld.sh	r0,r0[0x0]
8000ecf6:	ea fe eb cd 	ld.w	lr,r5[-5171]

8000ecf8 <mavlink_send_global_position>:

void mavlink_send_global_position(void) {				
8000ecf8:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000ecfc:	1a 97       	mov	r7,sp
8000ecfe:	20 9d       	sub	sp,36
8000ed00:	4e 66       	lddpc	r6,8000ee98 <mavlink_send_global_position+0x1a0>
8000ed02:	1e 26       	rsub	r6,pc
   //{
	   //mavlink_msg_global_position_int_send(MAVLINK_COMM_0, get_millis() , centralData->GPS_data.latitude*10000000.0, centralData->GPS_data.longitude*10000000.0, centralData->GPS_data.altitude*1000.0, 1, centralData->GPS_data.northSpeed*100.0, centralData->GPS_data.eastSpeed*100.0, centralData->GPS_data.verticalSpeed*100.0, centralData->GPS_data.course);
   //}else{
	   //mavlink_msg_global_position_int_send(MAVLINK_COMM_0, get_millis(), 46.5193*10000000, 6.56507*10000000, 400*1000, 1, 0, 0, 0, centralData->imu1.attitude.om[2]);
	   	// send integrated position (for now there is no GPS error correction...!!!)
		global_position_t gpos=local_to_global_position(centralData->position_estimator.localPosition);
8000ed04:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed08:	70 08       	ld.w	r8,r8[0x0]
8000ed0a:	ee cc 00 1c 	sub	r12,r7,28
8000ed0e:	20 cd       	sub	sp,48
8000ed10:	1a 99       	mov	r9,sp
8000ed12:	12 9b       	mov	r11,r9
8000ed14:	f0 ca f2 64 	sub	r10,r8,-3484
8000ed18:	f6 c8 00 00 	sub	r8,r11,0
8000ed1c:	f4 c9 00 00 	sub	r9,r10,0
8000ed20:	72 0e       	ld.w	lr,r9[0x0]
8000ed22:	91 0e       	st.w	r8[0x0],lr
8000ed24:	72 1e       	ld.w	lr,r9[0x4]
8000ed26:	91 1e       	st.w	r8[0x4],lr
8000ed28:	72 2e       	ld.w	lr,r9[0x8]
8000ed2a:	91 2e       	st.w	r8[0x8],lr
8000ed2c:	72 39       	ld.w	r9,r9[0xc]
8000ed2e:	91 39       	st.w	r8[0xc],r9
8000ed30:	f6 c8 ff f0 	sub	r8,r11,-16
8000ed34:	f4 c9 ff f0 	sub	r9,r10,-16
8000ed38:	72 0e       	ld.w	lr,r9[0x0]
8000ed3a:	91 0e       	st.w	r8[0x0],lr
8000ed3c:	72 1e       	ld.w	lr,r9[0x4]
8000ed3e:	91 1e       	st.w	r8[0x4],lr
8000ed40:	72 2e       	ld.w	lr,r9[0x8]
8000ed42:	91 2e       	st.w	r8[0x8],lr
8000ed44:	72 39       	ld.w	r9,r9[0xc]
8000ed46:	91 39       	st.w	r8[0xc],r9
8000ed48:	f6 c8 ff e0 	sub	r8,r11,-32
8000ed4c:	f4 c9 ff e0 	sub	r9,r10,-32
8000ed50:	72 0a       	ld.w	r10,r9[0x0]
8000ed52:	91 0a       	st.w	r8[0x0],r10
8000ed54:	72 1a       	ld.w	r10,r9[0x4]
8000ed56:	91 1a       	st.w	r8[0x4],r10
8000ed58:	72 2a       	ld.w	r10,r9[0x8]
8000ed5a:	91 2a       	st.w	r8[0x8],r10
8000ed5c:	72 39       	ld.w	r9,r9[0xc]
8000ed5e:	91 39       	st.w	r8[0xc],r9
8000ed60:	f0 16 00 88 	mcall	r6[544]
8000ed64:	2f 4d       	sub	sp,-48
		mavlink_msg_global_position_int_send(MAVLINK_COMM_0, get_millis(), gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0, 1, centralData->position_estimator.vel[0]*100.0, centralData->position_estimator.vel[1]*100.0, centralData->position_estimator.vel[2]*100.0, centralData->imu1.attitude.om[2]);
8000ed66:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed6a:	70 08       	ld.w	r8,r8[0x0]
8000ed6c:	f0 f8 00 80 	ld.w	r8,r8[128]
8000ed70:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000ed74:	5c 88       	casts.h	r8
8000ed76:	5c 78       	castu.h	r8
8000ed78:	ef 48 ff dc 	st.w	r7[-36],r8
8000ed7c:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed80:	70 08       	ld.w	r8,r8[0x0]
8000ed82:	f0 f8 0d 7c 	ld.w	r8,r8[3452]
8000ed86:	10 9c       	mov	r12,r8
8000ed88:	f0 16 00 02 	mcall	r6[8]
8000ed8c:	30 08       	mov	r8,0
8000ed8e:	fc 19 40 59 	movh	r9,0x4059
8000ed92:	f0 16 00 03 	mcall	r6[12]
8000ed96:	14 98       	mov	r8,r10
8000ed98:	16 99       	mov	r9,r11
8000ed9a:	10 9a       	mov	r10,r8
8000ed9c:	12 9b       	mov	r11,r9
8000ed9e:	f0 16 00 14 	mcall	r6[80]
8000eda2:	18 98       	mov	r8,r12
8000eda4:	5c 88       	casts.h	r8
8000eda6:	ef 48 ff e0 	st.w	r7[-32],r8
8000edaa:	ec f8 00 00 	ld.w	r8,r6[0]
8000edae:	70 08       	ld.w	r8,r8[0x0]
8000edb0:	f0 f8 0d 78 	ld.w	r8,r8[3448]
8000edb4:	10 9c       	mov	r12,r8
8000edb6:	f0 16 00 02 	mcall	r6[8]
8000edba:	30 08       	mov	r8,0
8000edbc:	fc 19 40 59 	movh	r9,0x4059
8000edc0:	f0 16 00 03 	mcall	r6[12]
8000edc4:	14 98       	mov	r8,r10
8000edc6:	16 99       	mov	r9,r11
8000edc8:	10 9a       	mov	r10,r8
8000edca:	12 9b       	mov	r11,r9
8000edcc:	f0 16 00 14 	mcall	r6[80]
8000edd0:	18 98       	mov	r8,r12
8000edd2:	5c 88       	casts.h	r8
8000edd4:	10 90       	mov	r0,r8
8000edd6:	ec f8 00 00 	ld.w	r8,r6[0]
8000edda:	70 08       	ld.w	r8,r8[0x0]
8000eddc:	f0 f8 0d 74 	ld.w	r8,r8[3444]
8000ede0:	10 9c       	mov	r12,r8
8000ede2:	f0 16 00 02 	mcall	r6[8]
8000ede6:	30 08       	mov	r8,0
8000ede8:	fc 19 40 59 	movh	r9,0x4059
8000edec:	f0 16 00 03 	mcall	r6[12]
8000edf0:	14 98       	mov	r8,r10
8000edf2:	16 99       	mov	r9,r11
8000edf4:	10 9a       	mov	r10,r8
8000edf6:	12 9b       	mov	r11,r9
8000edf8:	f0 16 00 14 	mcall	r6[80]
8000edfc:	18 98       	mov	r8,r12
8000edfe:	5c 88       	casts.h	r8
8000ee00:	10 91       	mov	r1,r8
8000ee02:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ee06:	10 9c       	mov	r12,r8
8000ee08:	f0 16 00 02 	mcall	r6[8]
8000ee0c:	30 08       	mov	r8,0
8000ee0e:	e0 69 40 00 	mov	r9,16384
8000ee12:	ea 19 40 8f 	orh	r9,0x408f
8000ee16:	f0 16 00 03 	mcall	r6[12]
8000ee1a:	14 98       	mov	r8,r10
8000ee1c:	16 99       	mov	r9,r11
8000ee1e:	10 9a       	mov	r10,r8
8000ee20:	12 9b       	mov	r11,r9
8000ee22:	f0 16 00 14 	mcall	r6[80]
8000ee26:	18 92       	mov	r2,r12
8000ee28:	ee ea ff e4 	ld.d	r10,r7[-28]
8000ee2c:	30 08       	mov	r8,0
8000ee2e:	e0 69 12 d0 	mov	r9,4816
8000ee32:	ea 19 41 63 	orh	r9,0x4163
8000ee36:	f0 16 00 03 	mcall	r6[12]
8000ee3a:	14 98       	mov	r8,r10
8000ee3c:	16 99       	mov	r9,r11
8000ee3e:	10 9a       	mov	r10,r8
8000ee40:	12 9b       	mov	r11,r9
8000ee42:	f0 16 00 14 	mcall	r6[80]
8000ee46:	18 93       	mov	r3,r12
8000ee48:	ee ea ff ec 	ld.d	r10,r7[-20]
8000ee4c:	30 08       	mov	r8,0
8000ee4e:	e0 69 12 d0 	mov	r9,4816
8000ee52:	ea 19 41 63 	orh	r9,0x4163
8000ee56:	f0 16 00 03 	mcall	r6[12]
8000ee5a:	14 98       	mov	r8,r10
8000ee5c:	16 99       	mov	r9,r11
8000ee5e:	10 9a       	mov	r10,r8
8000ee60:	12 9b       	mov	r11,r9
8000ee62:	f0 16 00 14 	mcall	r6[80]
8000ee66:	18 95       	mov	r5,r12
8000ee68:	f0 16 00 0f 	mcall	r6[60]
8000ee6c:	18 9b       	mov	r11,r12
8000ee6e:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000ee72:	1a d8       	st.w	--sp,r8
8000ee74:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000ee78:	1a d8       	st.w	--sp,r8
8000ee7a:	1a d0       	st.w	--sp,r0
8000ee7c:	1a d1       	st.w	--sp,r1
8000ee7e:	30 18       	mov	r8,1
8000ee80:	1a d8       	st.w	--sp,r8
8000ee82:	04 98       	mov	r8,r2
8000ee84:	06 99       	mov	r9,r3
8000ee86:	0a 9a       	mov	r10,r5
8000ee88:	30 0c       	mov	r12,0
8000ee8a:	fe b0 f6 53 	rcall	8000db30 <mavlink_msg_global_position_int_send>
8000ee8e:	2f bd       	sub	sp,-20
   //} 
}
8000ee90:	2f 7d       	sub	sp,-36
8000ee92:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000ee96:	00 00       	add	r0,r0
8000ee98:	80 00       	ld.sh	r0,r0[0x0]
8000ee9a:	eb 86       	*unknown*

8000ee9c <mavlink_send_hud>:

void mavlink_send_hud(void) {
8000ee9c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000eea0:	1a 97       	mov	r7,sp
8000eea2:	20 5d       	sub	sp,20
8000eea4:	4d 46       	lddpc	r6,8000eff4 <mavlink_send_hud+0x158>
8000eea6:	1e 26       	rsub	r6,pc
	float groundspeed=sqrt(centralData->position_estimator.vel[0]*centralData->position_estimator.vel[0] +centralData->position_estimator.vel[1]*centralData->position_estimator.vel[1]);
8000eea8:	ec f8 00 00 	ld.w	r8,r6[0]
8000eeac:	70 08       	ld.w	r8,r8[0x0]
8000eeae:	f0 f9 0d 74 	ld.w	r9,r8[3444]
8000eeb2:	ec f8 00 00 	ld.w	r8,r6[0]
8000eeb6:	70 08       	ld.w	r8,r8[0x0]
8000eeb8:	f0 f8 0d 74 	ld.w	r8,r8[3444]
8000eebc:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000eec0:	ec f8 00 00 	ld.w	r8,r6[0]
8000eec4:	70 08       	ld.w	r8,r8[0x0]
8000eec6:	f0 fa 0d 78 	ld.w	r10,r8[3448]
8000eeca:	ec f8 00 00 	ld.w	r8,r6[0]
8000eece:	70 08       	ld.w	r8,r8[0x0]
8000eed0:	f0 f8 0d 78 	ld.w	r8,r8[3448]
8000eed4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000eed8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000eedc:	10 9c       	mov	r12,r8
8000eede:	f0 16 00 02 	mcall	r6[8]
8000eee2:	14 98       	mov	r8,r10
8000eee4:	16 99       	mov	r9,r11
8000eee6:	10 9a       	mov	r10,r8
8000eee8:	12 9b       	mov	r11,r9
8000eeea:	f0 16 00 6b 	mcall	r6[428]
8000eeee:	14 98       	mov	r8,r10
8000eef0:	16 99       	mov	r9,r11
8000eef2:	10 9a       	mov	r10,r8
8000eef4:	12 9b       	mov	r11,r9
8000eef6:	f0 16 00 09 	mcall	r6[36]
8000eefa:	18 98       	mov	r8,r12
8000eefc:	ef 48 ff f8 	st.w	r7[-8],r8
	float airspeed=groundspeed;
8000ef00:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ef04:	ef 48 ff fc 	st.w	r7[-4],r8
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
8000ef08:	ec f8 00 00 	ld.w	r8,r6[0]
8000ef0c:	70 09       	ld.w	r9,r8[0x0]
8000ef0e:	ee ca 00 14 	sub	r10,r7,20
8000ef12:	20 4d       	sub	sp,16
8000ef14:	1a 98       	mov	r8,sp
8000ef16:	20 08       	sub	r8,0
8000ef18:	20 09       	sub	r9,0
8000ef1a:	72 0b       	ld.w	r11,r9[0x0]
8000ef1c:	91 0b       	st.w	r8[0x0],r11
8000ef1e:	72 1b       	ld.w	r11,r9[0x4]
8000ef20:	91 1b       	st.w	r8[0x4],r11
8000ef22:	72 2b       	ld.w	r11,r9[0x8]
8000ef24:	91 2b       	st.w	r8[0x8],r11
8000ef26:	72 39       	ld.w	r9,r9[0xc]
8000ef28:	91 39       	st.w	r8[0xc],r9
8000ef2a:	14 9c       	mov	r12,r10
8000ef2c:	f0 16 00 6d 	mcall	r6[436]
8000ef30:	2f cd       	sub	sp,-16
	// mavlink_msg_vfr_hud_send(mavlink_channel_t chan, float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
	mavlink_msg_vfr_hud_send(MAVLINK_COMM_0, airspeed, groundspeed, 180.0*aero_attitude.rpy[2]/PI, (int)((centralData->controls.thrust+1.0)*50), -centralData->position_estimator.localPosition.pos[2], -centralData->position_estimator.vel[2]);
8000ef32:	ec f8 00 00 	ld.w	r8,r6[0]
8000ef36:	70 08       	ld.w	r8,r8[0x0]
8000ef38:	f0 f8 0d 7c 	ld.w	r8,r8[3452]
8000ef3c:	10 92       	mov	r2,r8
8000ef3e:	ee 12 80 00 	eorh	r2,0x8000
8000ef42:	ec f8 00 00 	ld.w	r8,r6[0]
8000ef46:	70 08       	ld.w	r8,r8[0x0]
8000ef48:	f0 f8 0d a4 	ld.w	r8,r8[3492]
8000ef4c:	10 93       	mov	r3,r8
8000ef4e:	ee 13 80 00 	eorh	r3,0x8000
8000ef52:	ec f8 00 00 	ld.w	r8,r6[0]
8000ef56:	70 08       	ld.w	r8,r8[0x0]
8000ef58:	f0 f8 01 54 	ld.w	r8,r8[340]
8000ef5c:	10 9c       	mov	r12,r8
8000ef5e:	f0 16 00 02 	mcall	r6[8]
8000ef62:	30 08       	mov	r8,0
8000ef64:	fc 19 3f f0 	movh	r9,0x3ff0
8000ef68:	f0 16 00 05 	mcall	r6[20]
8000ef6c:	14 98       	mov	r8,r10
8000ef6e:	16 99       	mov	r9,r11
8000ef70:	10 9a       	mov	r10,r8
8000ef72:	12 9b       	mov	r11,r9
8000ef74:	30 08       	mov	r8,0
8000ef76:	fc 19 40 49 	movh	r9,0x4049
8000ef7a:	f0 16 00 03 	mcall	r6[12]
8000ef7e:	14 98       	mov	r8,r10
8000ef80:	16 99       	mov	r9,r11
8000ef82:	10 9a       	mov	r10,r8
8000ef84:	12 9b       	mov	r11,r9
8000ef86:	f0 16 00 14 	mcall	r6[80]
8000ef8a:	18 98       	mov	r8,r12
8000ef8c:	5c 88       	casts.h	r8
8000ef8e:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000ef92:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ef96:	10 9c       	mov	r12,r8
8000ef98:	f0 16 00 02 	mcall	r6[8]
8000ef9c:	30 08       	mov	r8,0
8000ef9e:	e0 69 80 00 	mov	r9,32768
8000efa2:	ea 19 40 66 	orh	r9,0x4066
8000efa6:	f0 16 00 03 	mcall	r6[12]
8000efaa:	14 98       	mov	r8,r10
8000efac:	16 99       	mov	r9,r11
8000efae:	10 9a       	mov	r10,r8
8000efb0:	12 9b       	mov	r11,r9
8000efb2:	e0 68 2d 18 	mov	r8,11544
8000efb6:	ea 18 54 44 	orh	r8,0x5444
8000efba:	e0 69 21 fb 	mov	r9,8699
8000efbe:	ea 19 40 09 	orh	r9,0x4009
8000efc2:	f0 16 00 0c 	mcall	r6[48]
8000efc6:	14 98       	mov	r8,r10
8000efc8:	16 99       	mov	r9,r11
8000efca:	10 9a       	mov	r10,r8
8000efcc:	12 9b       	mov	r11,r9
8000efce:	f0 16 00 14 	mcall	r6[80]
8000efd2:	18 98       	mov	r8,r12
8000efd4:	5c 88       	casts.h	r8
8000efd6:	10 99       	mov	r9,r8
8000efd8:	1a d2       	st.w	--sp,r2
8000efda:	1a d3       	st.w	--sp,r3
8000efdc:	0a 98       	mov	r8,r5
8000efde:	ee fa ff f8 	ld.w	r10,r7[-8]
8000efe2:	ee fb ff fc 	ld.w	r11,r7[-4]
8000efe6:	30 0c       	mov	r12,0
8000efe8:	fe b0 f8 72 	rcall	8000e0cc <mavlink_msg_vfr_hud_send>
8000efec:	2f ed       	sub	sp,-8

	
}
8000efee:	2f bd       	sub	sp,-20
8000eff0:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000eff4:	80 00       	ld.sh	r0,r0[0x0]
8000eff6:	ed 2a eb cd 	ld.sb	r10,r6[-5171]

8000eff8 <mavlink_send_gps_raw>:

void mavlink_send_gps_raw(void) {	
8000eff8:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000effc:	1a 97       	mov	r7,sp
8000effe:	20 4d       	sub	sp,16
8000f000:	4f d6       	lddpc	r6,8000f1f4 <mavlink_send_gps_raw+0x1fc>
8000f002:	1e 26       	rsub	r6,pc
	// mavlink_msg_gps_raw_int_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible)
	if (centralData->GPS_data.status == GPS_OK)
8000f004:	ec f8 00 00 	ld.w	r8,r6[0]
8000f008:	70 08       	ld.w	r8,r8[0x0]
8000f00a:	f1 39 0b 54 	ld.ub	r9,r8[2900]
8000f00e:	30 28       	mov	r8,2
8000f010:	f0 09 18 00 	cp.b	r9,r8
8000f014:	e0 81 00 c0 	brne	8000f194 <mavlink_send_gps_raw+0x19c>
	{
		mavlink_msg_gps_raw_int_send(MAVLINK_COMM_0,1000*centralData->GPS_data.timeLastMsg, centralData->GPS_data.status, centralData->GPS_data.latitude*10000000.0, centralData->GPS_data.longitude*10000000.0, centralData->GPS_data.altitude*1000.0, centralData->GPS_data.hdop*100.0, centralData->GPS_data.speedAccuracy*100.0 ,centralData->GPS_data.groundSpeed*100.0, centralData->GPS_data.course, centralData->GPS_data.num_sats);	
8000f018:	ec f8 00 00 	ld.w	r8,r6[0]
8000f01c:	70 08       	ld.w	r8,r8[0x0]
8000f01e:	f1 38 0b 48 	ld.ub	r8,r8[2888]
8000f022:	ef 48 ff f0 	st.w	r7[-16],r8
8000f026:	ec f8 00 00 	ld.w	r8,r6[0]
8000f02a:	70 08       	ld.w	r8,r8[0x0]
8000f02c:	f0 f8 0b 34 	ld.w	r8,r8[2868]
8000f030:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000f034:	5c 88       	casts.h	r8
8000f036:	5c 78       	castu.h	r8
8000f038:	ef 48 ff f4 	st.w	r7[-12],r8
8000f03c:	ec f8 00 00 	ld.w	r8,r6[0]
8000f040:	70 08       	ld.w	r8,r8[0x0]
8000f042:	f0 f8 0b 24 	ld.w	r8,r8[2852]
8000f046:	10 9c       	mov	r12,r8
8000f048:	f0 16 00 02 	mcall	r6[8]
8000f04c:	30 08       	mov	r8,0
8000f04e:	fc 19 40 59 	movh	r9,0x4059
8000f052:	f0 16 00 03 	mcall	r6[12]
8000f056:	14 98       	mov	r8,r10
8000f058:	16 99       	mov	r9,r11
8000f05a:	10 9a       	mov	r10,r8
8000f05c:	12 9b       	mov	r11,r9
8000f05e:	f0 16 00 7b 	mcall	r6[492]
8000f062:	18 98       	mov	r8,r12
8000f064:	5c 88       	casts.h	r8
8000f066:	5c 78       	castu.h	r8
8000f068:	ef 48 ff f8 	st.w	r7[-8],r8
8000f06c:	ec f8 00 00 	ld.w	r8,r6[0]
8000f070:	70 08       	ld.w	r8,r8[0x0]
8000f072:	f0 f8 0b 40 	ld.w	r8,r8[2880]
8000f076:	10 9c       	mov	r12,r8
8000f078:	f0 16 00 02 	mcall	r6[8]
8000f07c:	30 08       	mov	r8,0
8000f07e:	fc 19 40 59 	movh	r9,0x4059
8000f082:	f0 16 00 03 	mcall	r6[12]
8000f086:	14 98       	mov	r8,r10
8000f088:	16 99       	mov	r9,r11
8000f08a:	10 9a       	mov	r10,r8
8000f08c:	12 9b       	mov	r11,r9
8000f08e:	f0 16 00 7b 	mcall	r6[492]
8000f092:	18 98       	mov	r8,r12
8000f094:	5c 88       	casts.h	r8
8000f096:	5c 78       	castu.h	r8
8000f098:	ef 48 ff fc 	st.w	r7[-4],r8
8000f09c:	ec f8 00 00 	ld.w	r8,r6[0]
8000f0a0:	70 08       	ld.w	r8,r8[0x0]
8000f0a2:	f1 08 0b 4a 	ld.sh	r8,r8[2890]
8000f0a6:	5c 78       	castu.h	r8
8000f0a8:	10 9c       	mov	r12,r8
8000f0aa:	f0 16 00 1a 	mcall	r6[104]
8000f0ae:	30 08       	mov	r8,0
8000f0b0:	fc 19 40 59 	movh	r9,0x4059
8000f0b4:	f0 16 00 03 	mcall	r6[12]
8000f0b8:	14 98       	mov	r8,r10
8000f0ba:	16 99       	mov	r9,r11
8000f0bc:	10 9a       	mov	r10,r8
8000f0be:	12 9b       	mov	r11,r9
8000f0c0:	f0 16 00 7b 	mcall	r6[492]
8000f0c4:	18 98       	mov	r8,r12
8000f0c6:	5c 88       	casts.h	r8
8000f0c8:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
8000f0cc:	ec f8 00 00 	ld.w	r8,r6[0]
8000f0d0:	70 08       	ld.w	r8,r8[0x0]
8000f0d2:	f0 f8 0b 18 	ld.w	r8,r8[2840]
8000f0d6:	10 9c       	mov	r12,r8
8000f0d8:	f0 16 00 02 	mcall	r6[8]
8000f0dc:	30 08       	mov	r8,0
8000f0de:	e0 69 40 00 	mov	r9,16384
8000f0e2:	ea 19 40 8f 	orh	r9,0x408f
8000f0e6:	f0 16 00 03 	mcall	r6[12]
8000f0ea:	14 98       	mov	r8,r10
8000f0ec:	16 99       	mov	r9,r11
8000f0ee:	10 9a       	mov	r10,r8
8000f0f0:	12 9b       	mov	r11,r9
8000f0f2:	f0 16 00 14 	mcall	r6[80]
8000f0f6:	18 93       	mov	r3,r12
8000f0f8:	ec f8 00 00 	ld.w	r8,r6[0]
8000f0fc:	70 08       	ld.w	r8,r8[0x0]
8000f0fe:	f0 ea 0b 10 	ld.d	r10,r8[2832]
8000f102:	30 08       	mov	r8,0
8000f104:	e0 69 12 d0 	mov	r9,4816
8000f108:	ea 19 41 63 	orh	r9,0x4163
8000f10c:	f0 16 00 03 	mcall	r6[12]
8000f110:	14 98       	mov	r8,r10
8000f112:	16 99       	mov	r9,r11
8000f114:	10 9a       	mov	r10,r8
8000f116:	12 9b       	mov	r11,r9
8000f118:	f0 16 00 14 	mcall	r6[80]
8000f11c:	18 95       	mov	r5,r12
8000f11e:	ec f8 00 00 	ld.w	r8,r6[0]
8000f122:	70 08       	ld.w	r8,r8[0x0]
8000f124:	f0 ea 0b 08 	ld.d	r10,r8[2824]
8000f128:	30 08       	mov	r8,0
8000f12a:	e0 69 12 d0 	mov	r9,4816
8000f12e:	ea 19 41 63 	orh	r9,0x4163
8000f132:	f0 16 00 03 	mcall	r6[12]
8000f136:	14 98       	mov	r8,r10
8000f138:	16 99       	mov	r9,r11
8000f13a:	10 9a       	mov	r10,r8
8000f13c:	12 9b       	mov	r11,r9
8000f13e:	f0 16 00 14 	mcall	r6[80]
8000f142:	18 9a       	mov	r10,r12
8000f144:	ec f8 00 00 	ld.w	r8,r6[0]
8000f148:	70 08       	ld.w	r8,r8[0x0]
8000f14a:	f1 38 0b 54 	ld.ub	r8,r8[2900]
8000f14e:	10 99       	mov	r9,r8
8000f150:	ec f8 00 00 	ld.w	r8,r6[0]
8000f154:	70 08       	ld.w	r8,r8[0x0]
8000f156:	f0 fb 0b 4c 	ld.w	r11,r8[2892]
8000f15a:	e0 68 03 e8 	mov	r8,1000
8000f15e:	f6 08 02 48 	mul	r8,r11,r8
8000f162:	10 90       	mov	r0,r8
8000f164:	30 01       	mov	r1,0
8000f166:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000f16a:	1a d8       	st.w	--sp,r8
8000f16c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f170:	1a d8       	st.w	--sp,r8
8000f172:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f176:	1a d8       	st.w	--sp,r8
8000f178:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f17c:	1a d8       	st.w	--sp,r8
8000f17e:	1a d2       	st.w	--sp,r2
8000f180:	1a d3       	st.w	--sp,r3
8000f182:	1a d5       	st.w	--sp,r5
8000f184:	14 98       	mov	r8,r10
8000f186:	00 9a       	mov	r10,r0
8000f188:	02 9b       	mov	r11,r1
8000f18a:	30 0c       	mov	r12,0
8000f18c:	fe b0 f1 d2 	rcall	8000d530 <mavlink_msg_gps_raw_int_send>
8000f190:	2f 9d       	sub	sp,-28
8000f192:	c2 e8       	rjmp	8000f1ee <mavlink_send_gps_raw+0x1f6>
	}else{
		mavlink_msg_gps_raw_int_send(MAVLINK_COMM_0,get_micros(), centralData->GPS_data.status, 46.5193*10000000, 6.56507*10000000, 400 * 1000, 0, 0 , 0, 0, centralData->GPS_data.num_sats);
8000f194:	ec f8 00 00 	ld.w	r8,r6[0]
8000f198:	70 08       	ld.w	r8,r8[0x0]
8000f19a:	f1 38 0b 48 	ld.ub	r8,r8[2888]
8000f19e:	10 91       	mov	r1,r8
8000f1a0:	ec f8 00 00 	ld.w	r8,r6[0]
8000f1a4:	70 08       	ld.w	r8,r8[0x0]
8000f1a6:	f1 38 0b 54 	ld.ub	r8,r8[2900]
8000f1aa:	10 95       	mov	r5,r8
8000f1ac:	f0 16 00 29 	mcall	r6[164]
8000f1b0:	18 98       	mov	r8,r12
8000f1b2:	10 92       	mov	r2,r8
8000f1b4:	30 03       	mov	r3,0
8000f1b6:	1a d1       	st.w	--sp,r1
8000f1b8:	30 08       	mov	r8,0
8000f1ba:	1a d8       	st.w	--sp,r8
8000f1bc:	30 08       	mov	r8,0
8000f1be:	1a d8       	st.w	--sp,r8
8000f1c0:	30 08       	mov	r8,0
8000f1c2:	1a d8       	st.w	--sp,r8
8000f1c4:	30 08       	mov	r8,0
8000f1c6:	1a d8       	st.w	--sp,r8
8000f1c8:	e6 68 1a 80 	mov	r8,400000
8000f1cc:	1a d8       	st.w	--sp,r8
8000f1ce:	e0 68 c0 0c 	mov	r8,49164
8000f1d2:	ea 18 03 e9 	orh	r8,0x3e9
8000f1d6:	1a d8       	st.w	--sp,r8
8000f1d8:	e0 68 48 28 	mov	r8,18472
8000f1dc:	ea 18 1b ba 	orh	r8,0x1bba
8000f1e0:	0a 99       	mov	r9,r5
8000f1e2:	04 9a       	mov	r10,r2
8000f1e4:	06 9b       	mov	r11,r3
8000f1e6:	30 0c       	mov	r12,0
8000f1e8:	fe b0 f1 a4 	rcall	8000d530 <mavlink_msg_gps_raw_int_send>
8000f1ec:	2f 9d       	sub	sp,-28
	}
}
8000f1ee:	2f cd       	sub	sp,-16
8000f1f0:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000f1f4:	80 00       	ld.sh	r0,r0[0x0]
8000f1f6:	ee 86 70 72 	brmi	801dd2da <_data_lma+0x1ab092>
8000f1fa:	65 73       	ld.w	r3,r2[0x5c]
8000f1fc:	73 41       	ld.w	r1,r9[0x50]
8000f1fe:	6c 74       	ld.w	r4,r6[0x1c]
8000f200:	00 00       	add	r0,r0
8000f202:	00 00       	add	r0,r0
8000f204:	6c 61       	ld.w	r1,r6[0x18]
8000f206:	73 74       	ld.w	r4,r9[0x5c]
8000f208:	41 6c       	lddsp	r12,sp[0x58]
8000f20a:	74 00       	ld.w	r0,r10[0x0]
8000f20c:	62 61       	ld.w	r1,r1[0x18]
8000f20e:	72 6f       	ld.w	pc,r9[0x18]
8000f210:	5f 64       	srmi	r4
8000f212:	74 00       	ld.w	r0,r10[0x0]

8000f214 <mavlink_send_pressure>:


void mavlink_send_pressure(void) {			
8000f214:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000f218:	1a 97       	mov	r7,sp
8000f21a:	4b 56       	lddpc	r6,8000f2ec <mavlink_send_pressure+0xd8>
8000f21c:	1e 26       	rsub	r6,pc
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "Altitude", centralData->pressure.altitude);
	
	
	//mavlink_msg_scaled_pressure_send(mavlink_channel_t chan, uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
	
	mavlink_msg_scaled_pressure_send(MAVLINK_COMM_0, get_millis(), centralData->pressure.pressure/100.0, centralData->pressure.vario_vz, centralData->pressure.temperature*100.0);
8000f21e:	ec f8 00 00 	ld.w	r8,r6[0]
8000f222:	70 08       	ld.w	r8,r8[0x0]
8000f224:	f0 f8 10 d0 	ld.w	r8,r8[4304]
8000f228:	10 9c       	mov	r12,r8
8000f22a:	f0 16 00 02 	mcall	r6[8]
8000f22e:	30 08       	mov	r8,0
8000f230:	fc 19 40 59 	movh	r9,0x4059
8000f234:	f0 16 00 03 	mcall	r6[12]
8000f238:	14 98       	mov	r8,r10
8000f23a:	16 99       	mov	r9,r11
8000f23c:	10 9a       	mov	r10,r8
8000f23e:	12 9b       	mov	r11,r9
8000f240:	f0 16 00 14 	mcall	r6[80]
8000f244:	18 98       	mov	r8,r12
8000f246:	5c 88       	casts.h	r8
8000f248:	10 92       	mov	r2,r8
8000f24a:	ec f8 00 00 	ld.w	r8,r6[0]
8000f24e:	70 08       	ld.w	r8,r8[0x0]
8000f250:	f0 f3 10 e8 	ld.w	r3,r8[4328]
8000f254:	ec f8 00 00 	ld.w	r8,r6[0]
8000f258:	70 08       	ld.w	r8,r8[0x0]
8000f25a:	f0 f8 10 cc 	ld.w	r8,r8[4300]
8000f25e:	fc 1b 42 c8 	movh	r11,0x42c8
8000f262:	10 9c       	mov	r12,r8
8000f264:	f0 16 00 08 	mcall	r6[32]
8000f268:	18 98       	mov	r8,r12
8000f26a:	10 95       	mov	r5,r8
8000f26c:	f0 16 00 0f 	mcall	r6[60]
8000f270:	18 9b       	mov	r11,r12
8000f272:	04 98       	mov	r8,r2
8000f274:	06 99       	mov	r9,r3
8000f276:	0a 9a       	mov	r10,r5
8000f278:	30 0c       	mov	r12,0
8000f27a:	fe b0 f2 f5 	rcall	8000d864 <mavlink_msg_scaled_pressure_send>
	flush_mavlink();
8000f27e:	f0 16 00 2d 	mcall	r6[180]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"pressAlt", centralData->pressure.altitude);
8000f282:	ec f8 00 00 	ld.w	r8,r6[0]
8000f286:	70 08       	ld.w	r8,r8[0x0]
8000f288:	f0 f5 10 e0 	ld.w	r5,r8[4320]
8000f28c:	f0 16 00 0f 	mcall	r6[60]
8000f290:	18 98       	mov	r8,r12
8000f292:	0a 99       	mov	r9,r5
8000f294:	fe ca 00 9c 	sub	r10,pc,156
8000f298:	10 9b       	mov	r11,r8
8000f29a:	30 0c       	mov	r12,0
8000f29c:	fe b0 f9 aa 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>
	flush_mavlink();
8000f2a0:	f0 16 00 2d 	mcall	r6[180]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"lastAlt", centralData->position_estimator.last_alt);
8000f2a4:	ec f8 00 00 	ld.w	r8,r6[0]
8000f2a8:	70 08       	ld.w	r8,r8[0x0]
8000f2aa:	f0 f5 0d 8c 	ld.w	r5,r8[3468]
8000f2ae:	f0 16 00 0f 	mcall	r6[60]
8000f2b2:	18 98       	mov	r8,r12
8000f2b4:	0a 99       	mov	r9,r5
8000f2b6:	fe ca 00 b2 	sub	r10,pc,178
8000f2ba:	10 9b       	mov	r11,r8
8000f2bc:	30 0c       	mov	r12,0
8000f2be:	fe b0 f9 99 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>
	flush_mavlink();
8000f2c2:	f0 16 00 2d 	mcall	r6[180]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"baro_dt", centralData->pressure.dt);
8000f2c6:	ec f8 00 00 	ld.w	r8,r6[0]
8000f2ca:	70 08       	ld.w	r8,r8[0x0]
8000f2cc:	f0 f5 10 f8 	ld.w	r5,r8[4344]
8000f2d0:	f0 16 00 0f 	mcall	r6[60]
8000f2d4:	18 98       	mov	r8,r12
8000f2d6:	0a 99       	mov	r9,r5
8000f2d8:	fe ca 00 cc 	sub	r10,pc,204
8000f2dc:	10 9b       	mov	r11,r8
8000f2de:	30 0c       	mov	r12,0
8000f2e0:	fe b0 f9 88 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>
	flush_mavlink();
8000f2e4:	f0 16 00 2d 	mcall	r6[180]
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"pressFilt", centralData->altitude_filtered);
}
8000f2e8:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000f2ec:	80 00       	ld.sh	r0,r0[0x0]
8000f2ee:	f0 a0 52 61 	rcall	7fe197b0 <_estack+0x7fe097b0>
8000f2f2:	64 61       	ld.w	r1,r2[0x18]
8000f2f4:	72 5f       	ld.w	pc,r9[0x14]
8000f2f6:	76 65       	ld.w	r5,r11[0x18]
8000f2f8:	6c 6f       	ld.w	pc,r6[0x18]
8000f2fa:	63 69       	ld.w	r9,r1[0x58]
8000f2fc:	74 79       	ld.w	r9,r10[0x1c]
8000f2fe:	00 00       	add	r0,r0
8000f300:	52 61       	stdsp	sp[0x98],r1
8000f302:	64 61       	ld.w	r1,r2[0x18]
8000f304:	72 5f       	ld.w	pc,r9[0x14]
8000f306:	61 6d       	ld.w	sp,r0[0x58]
8000f308:	70 6c       	ld.w	r12,r8[0x18]
8000f30a:	69 74       	ld.w	r4,r4[0x5c]
8000f30c:	75 64       	ld.w	r4,r10[0x58]
8000f30e:	65 00       	ld.w	r0,r2[0x40]

8000f310 <mavlink_send_radar>:

void mavlink_send_radar(void) {
8000f310:	eb cd 40 e0 	pushm	r5-r7,lr
8000f314:	1a 97       	mov	r7,sp
8000f316:	20 1d       	sub	sp,4
8000f318:	49 76       	lddpc	r6,8000f374 <mavlink_send_radar+0x64>
8000f31a:	1e 26       	rsub	r6,pc
	read_radar();
8000f31c:	f0 16 01 9e 	mcall	r6[1656]
	radar_target *target=get_radar_main_target();
8000f320:	f0 16 01 a8 	mcall	r6[1696]
8000f324:	18 98       	mov	r8,r12
8000f326:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "Radar_velocity", target->velocity);
8000f32a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f32e:	70 05       	ld.w	r5,r8[0x0]
8000f330:	f0 16 00 0f 	mcall	r6[60]
8000f334:	18 98       	mov	r8,r12
8000f336:	0a 99       	mov	r9,r5
8000f338:	fe ca 00 48 	sub	r10,pc,72
8000f33c:	10 9b       	mov	r11,r8
8000f33e:	30 0c       	mov	r12,0
8000f340:	fe b0 f9 58 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "Radar_amplitude", target->amplitude/1000.0);
8000f344:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f348:	70 18       	ld.w	r8,r8[0x4]
8000f34a:	fc 1b 44 7a 	movh	r11,0x447a
8000f34e:	10 9c       	mov	r12,r8
8000f350:	f0 16 00 08 	mcall	r6[32]
8000f354:	18 98       	mov	r8,r12
8000f356:	10 95       	mov	r5,r8
8000f358:	f0 16 00 0f 	mcall	r6[60]
8000f35c:	18 98       	mov	r8,r12
8000f35e:	0a 99       	mov	r9,r5
8000f360:	fe ca 00 60 	sub	r10,pc,96
8000f364:	10 9b       	mov	r11,r8
8000f366:	30 0c       	mov	r12,0
8000f368:	fe b0 f9 44 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>
}
8000f36c:	2f fd       	sub	sp,-4
8000f36e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000f372:	00 00       	add	r0,r0
8000f374:	80 00       	ld.sh	r0,r0[0x0]
8000f376:	f1 9e       	*unknown*

8000f378 <mavlink_send_estimator>:

void mavlink_send_estimator(void)
{
8000f378:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000f37c:	1a 97       	mov	r7,sp
8000f37e:	20 1d       	sub	sp,4
8000f380:	49 a6       	lddpc	r6,8000f3e8 <mavlink_send_estimator+0x70>
8000f382:	1e 26       	rsub	r6,pc
	//mavlink_msg_local_position_ned_send(mavlink_channel_t chan, uint32_t time_boot_ms, float x, float y, float z, float vx, float vy, float vz)
	//mavlink_msg_local_position_ned_send(MAVLINK_COMM_0, get_millis(), centralData->estimation.state[0][0], centralData->estimation.state[1][0], centralData->estimation.state[2][0], centralData->estimation.state[0][1], centralData->estimation.state[1][1], centralData->estimation.state[2][1]);
	mavlink_msg_local_position_ned_send(MAVLINK_COMM_0, get_millis(), centralData->position_estimator.localPosition.pos[0], centralData->position_estimator.localPosition.pos[1], centralData->position_estimator.localPosition.pos[2], centralData->position_estimator.vel[0], centralData->position_estimator.vel[1], centralData->position_estimator.vel[2]);
8000f384:	ec f8 00 00 	ld.w	r8,r6[0]
8000f388:	70 08       	ld.w	r8,r8[0x0]
8000f38a:	f0 f8 0d 7c 	ld.w	r8,r8[3452]
8000f38e:	ef 48 ff fc 	st.w	r7[-4],r8
8000f392:	ec f8 00 00 	ld.w	r8,r6[0]
8000f396:	70 08       	ld.w	r8,r8[0x0]
8000f398:	f0 f0 0d 78 	ld.w	r0,r8[3448]
8000f39c:	ec f8 00 00 	ld.w	r8,r6[0]
8000f3a0:	70 08       	ld.w	r8,r8[0x0]
8000f3a2:	f0 f1 0d 74 	ld.w	r1,r8[3444]
8000f3a6:	ec f8 00 00 	ld.w	r8,r6[0]
8000f3aa:	70 08       	ld.w	r8,r8[0x0]
8000f3ac:	f0 f2 0d a4 	ld.w	r2,r8[3492]
8000f3b0:	ec f8 00 00 	ld.w	r8,r6[0]
8000f3b4:	70 08       	ld.w	r8,r8[0x0]
8000f3b6:	f0 f3 0d a0 	ld.w	r3,r8[3488]
8000f3ba:	ec f8 00 00 	ld.w	r8,r6[0]
8000f3be:	70 08       	ld.w	r8,r8[0x0]
8000f3c0:	f0 f5 0d 9c 	ld.w	r5,r8[3484]
8000f3c4:	f0 16 00 0f 	mcall	r6[60]
8000f3c8:	18 9b       	mov	r11,r12
8000f3ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f3ce:	1a d8       	st.w	--sp,r8
8000f3d0:	1a d0       	st.w	--sp,r0
8000f3d2:	1a d1       	st.w	--sp,r1
8000f3d4:	04 98       	mov	r8,r2
8000f3d6:	06 99       	mov	r9,r3
8000f3d8:	0a 9a       	mov	r10,r5
8000f3da:	30 0c       	mov	r12,0
8000f3dc:	fe b0 f3 4c 	rcall	8000da74 <mavlink_msg_local_position_ned_send>
8000f3e0:	2f dd       	sub	sp,-12
	//dbg_print(", ");
	//dbg_print_num(centralData->position_estimator.localPosition.pos[Y],10);
	//dbg_print(", ");
	//dbg_print_num(centralData->position_estimator.localPosition.pos[Z],10);
	//dbg_print(")\n");
}
8000f3e2:	2f fd       	sub	sp,-4
8000f3e4:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000f3e8:	80 00       	ld.sh	r0,r0[0x0]
8000f3ea:	f2 06       	*unknown*
8000f3ec:	65 73       	ld.w	r3,r2[0x5c]
8000f3ee:	74 69       	ld.w	r9,r10[0x18]
8000f3f0:	58 00       	cp.w	r0,0
8000f3f2:	00 00       	add	r0,r0
8000f3f4:	65 73       	ld.w	r3,r2[0x5c]
8000f3f6:	74 69       	ld.w	r9,r10[0x18]
8000f3f8:	59 00       	cp.w	r0,16
8000f3fa:	00 00       	add	r0,r0
8000f3fc:	65 73       	ld.w	r3,r2[0x5c]
8000f3fe:	74 69       	ld.w	r9,r10[0x18]
8000f400:	5a 00       	cp.w	r0,-32
8000f402:	00 00       	add	r0,r0
8000f404:	65 73       	ld.w	r3,r2[0x5c]
8000f406:	74 69       	ld.w	r9,r10[0x18]
8000f408:	56 78       	stdsp	sp[0x19c],r8
8000f40a:	00 00       	add	r0,r0
8000f40c:	65 73       	ld.w	r3,r2[0x5c]
8000f40e:	74 69       	ld.w	r9,r10[0x18]
8000f410:	56 79       	stdsp	sp[0x19c],r9
8000f412:	00 00       	add	r0,r0
8000f414:	65 73       	ld.w	r3,r2[0x5c]
8000f416:	74 69       	ld.w	r9,r10[0x18]
8000f418:	56 7a       	stdsp	sp[0x19c],r10
8000f41a:	00 00       	add	r0,r0
8000f41c:	65 73       	ld.w	r3,r2[0x5c]
8000f41e:	74 69       	ld.w	r9,r10[0x18]
8000f420:	62 69       	ld.w	r9,r1[0x18]
8000f422:	61 69       	ld.w	r9,r0[0x58]
8000f424:	73 58       	ld.w	r8,r9[0x54]
8000f426:	00 00       	add	r0,r0
8000f428:	65 73       	ld.w	r3,r2[0x5c]
8000f42a:	74 69       	ld.w	r9,r10[0x18]
8000f42c:	62 69       	ld.w	r9,r1[0x18]
8000f42e:	61 69       	ld.w	r9,r0[0x58]
8000f430:	73 59       	ld.w	r9,r9[0x54]
8000f432:	00 00       	add	r0,r0
8000f434:	65 73       	ld.w	r3,r2[0x5c]
8000f436:	74 69       	ld.w	r9,r10[0x18]
8000f438:	62 69       	ld.w	r9,r1[0x18]
8000f43a:	61 69       	ld.w	r9,r0[0x58]
8000f43c:	73 5a       	ld.w	r10,r9[0x54]
	...

8000f440 <mavlink_send_kalman_estimator>:

void mavlink_send_kalman_estimator(void)
{
8000f440:	eb cd 40 e0 	pushm	r5-r7,lr
8000f444:	1a 97       	mov	r7,sp
8000f446:	4d d6       	lddpc	r6,8000f5b8 <mavlink_send_kalman_estimator+0x178>
8000f448:	1e 26       	rsub	r6,pc
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiX", centralData->estimation.state[X][POSITION]);
8000f44a:	ec f8 00 00 	ld.w	r8,r6[0]
8000f44e:	70 08       	ld.w	r8,r8[0x0]
8000f450:	f0 e8 0b 5c 	ld.d	r8,r8[2908]
8000f454:	10 9a       	mov	r10,r8
8000f456:	12 9b       	mov	r11,r9
8000f458:	f0 16 00 09 	mcall	r6[36]
8000f45c:	18 95       	mov	r5,r12
8000f45e:	f0 16 00 0f 	mcall	r6[60]
8000f462:	18 98       	mov	r8,r12
8000f464:	0a 99       	mov	r9,r5
8000f466:	fe ca 00 7a 	sub	r10,pc,122
8000f46a:	10 9b       	mov	r11,r8
8000f46c:	30 0c       	mov	r12,0
8000f46e:	fe b0 f8 c1 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiY", centralData->estimation.state[Y][POSITION]);
8000f472:	ec f8 00 00 	ld.w	r8,r6[0]
8000f476:	70 08       	ld.w	r8,r8[0x0]
8000f478:	f0 e8 0b 74 	ld.d	r8,r8[2932]
8000f47c:	10 9a       	mov	r10,r8
8000f47e:	12 9b       	mov	r11,r9
8000f480:	f0 16 00 09 	mcall	r6[36]
8000f484:	18 95       	mov	r5,r12
8000f486:	f0 16 00 0f 	mcall	r6[60]
8000f48a:	18 98       	mov	r8,r12
8000f48c:	0a 99       	mov	r9,r5
8000f48e:	fe ca 00 9a 	sub	r10,pc,154
8000f492:	10 9b       	mov	r11,r8
8000f494:	30 0c       	mov	r12,0
8000f496:	fe b0 f8 ad 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiZ", centralData->estimation.state[Z][POSITION]);
8000f49a:	ec f8 00 00 	ld.w	r8,r6[0]
8000f49e:	70 08       	ld.w	r8,r8[0x0]
8000f4a0:	f0 e8 0b 8c 	ld.d	r8,r8[2956]
8000f4a4:	10 9a       	mov	r10,r8
8000f4a6:	12 9b       	mov	r11,r9
8000f4a8:	f0 16 00 09 	mcall	r6[36]
8000f4ac:	18 95       	mov	r5,r12
8000f4ae:	f0 16 00 0f 	mcall	r6[60]
8000f4b2:	18 98       	mov	r8,r12
8000f4b4:	0a 99       	mov	r9,r5
8000f4b6:	fe ca 00 ba 	sub	r10,pc,186
8000f4ba:	10 9b       	mov	r11,r8
8000f4bc:	30 0c       	mov	r12,0
8000f4be:	fe b0 f8 99 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>
	
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiVx", centralData->estimation.state[X][SPEED]);
8000f4c2:	ec f8 00 00 	ld.w	r8,r6[0]
8000f4c6:	70 08       	ld.w	r8,r8[0x0]
8000f4c8:	f0 e8 0b 64 	ld.d	r8,r8[2916]
8000f4cc:	10 9a       	mov	r10,r8
8000f4ce:	12 9b       	mov	r11,r9
8000f4d0:	f0 16 00 09 	mcall	r6[36]
8000f4d4:	18 95       	mov	r5,r12
8000f4d6:	f0 16 00 0f 	mcall	r6[60]
8000f4da:	18 98       	mov	r8,r12
8000f4dc:	0a 99       	mov	r9,r5
8000f4de:	fe ca 00 da 	sub	r10,pc,218
8000f4e2:	10 9b       	mov	r11,r8
8000f4e4:	30 0c       	mov	r12,0
8000f4e6:	fe b0 f8 85 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiVy", centralData->estimation.state[Y][SPEED]);
8000f4ea:	ec f8 00 00 	ld.w	r8,r6[0]
8000f4ee:	70 08       	ld.w	r8,r8[0x0]
8000f4f0:	f0 e8 0b 7c 	ld.d	r8,r8[2940]
8000f4f4:	10 9a       	mov	r10,r8
8000f4f6:	12 9b       	mov	r11,r9
8000f4f8:	f0 16 00 09 	mcall	r6[36]
8000f4fc:	18 95       	mov	r5,r12
8000f4fe:	f0 16 00 0f 	mcall	r6[60]
8000f502:	18 98       	mov	r8,r12
8000f504:	0a 99       	mov	r9,r5
8000f506:	fe ca 00 fa 	sub	r10,pc,250
8000f50a:	10 9b       	mov	r11,r8
8000f50c:	30 0c       	mov	r12,0
8000f50e:	fe b0 f8 71 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiVz", centralData->estimation.state[Z][SPEED]);
8000f512:	ec f8 00 00 	ld.w	r8,r6[0]
8000f516:	70 08       	ld.w	r8,r8[0x0]
8000f518:	f0 e8 0b 94 	ld.d	r8,r8[2964]
8000f51c:	10 9a       	mov	r10,r8
8000f51e:	12 9b       	mov	r11,r9
8000f520:	f0 16 00 09 	mcall	r6[36]
8000f524:	18 95       	mov	r5,r12
8000f526:	f0 16 00 0f 	mcall	r6[60]
8000f52a:	18 98       	mov	r8,r12
8000f52c:	0a 99       	mov	r9,r5
8000f52e:	fe ca 01 1a 	sub	r10,pc,282
8000f532:	10 9b       	mov	r11,r8
8000f534:	30 0c       	mov	r12,0
8000f536:	fe b0 f8 5d 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>
	
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estibiaisX", centralData->estimation.state[X][BIAIS]);
8000f53a:	ec f8 00 00 	ld.w	r8,r6[0]
8000f53e:	70 08       	ld.w	r8,r8[0x0]
8000f540:	f0 e8 0b 6c 	ld.d	r8,r8[2924]
8000f544:	10 9a       	mov	r10,r8
8000f546:	12 9b       	mov	r11,r9
8000f548:	f0 16 00 09 	mcall	r6[36]
8000f54c:	18 95       	mov	r5,r12
8000f54e:	f0 16 00 0f 	mcall	r6[60]
8000f552:	18 98       	mov	r8,r12
8000f554:	0a 99       	mov	r9,r5
8000f556:	fe ca 01 3a 	sub	r10,pc,314
8000f55a:	10 9b       	mov	r11,r8
8000f55c:	30 0c       	mov	r12,0
8000f55e:	fe b0 f8 49 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estibiaisY", centralData->estimation.state[Y][BIAIS]);
8000f562:	ec f8 00 00 	ld.w	r8,r6[0]
8000f566:	70 08       	ld.w	r8,r8[0x0]
8000f568:	f0 e8 0b 84 	ld.d	r8,r8[2948]
8000f56c:	10 9a       	mov	r10,r8
8000f56e:	12 9b       	mov	r11,r9
8000f570:	f0 16 00 09 	mcall	r6[36]
8000f574:	18 95       	mov	r5,r12
8000f576:	f0 16 00 0f 	mcall	r6[60]
8000f57a:	18 98       	mov	r8,r12
8000f57c:	0a 99       	mov	r9,r5
8000f57e:	fe ca 01 56 	sub	r10,pc,342
8000f582:	10 9b       	mov	r11,r8
8000f584:	30 0c       	mov	r12,0
8000f586:	fe b0 f8 35 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estibiaisZ", centralData->estimation.state[Z][BIAIS]);
8000f58a:	ec f8 00 00 	ld.w	r8,r6[0]
8000f58e:	70 08       	ld.w	r8,r8[0x0]
8000f590:	f0 e8 0b 9c 	ld.d	r8,r8[2972]
8000f594:	10 9a       	mov	r10,r8
8000f596:	12 9b       	mov	r11,r9
8000f598:	f0 16 00 09 	mcall	r6[36]
8000f59c:	18 95       	mov	r5,r12
8000f59e:	f0 16 00 0f 	mcall	r6[60]
8000f5a2:	18 98       	mov	r8,r12
8000f5a4:	0a 99       	mov	r9,r5
8000f5a6:	fe ca 01 72 	sub	r10,pc,370
8000f5aa:	10 9b       	mov	r11,r8
8000f5ac:	30 0c       	mov	r12,0
8000f5ae:	fe b0 f8 21 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "acc_bfZ", centralData->position_estimator.vel_bf[Y]);
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "acc_bfZ", centralData->position_estimator.vel_bf[Z]);
	
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiDeltaT", centralData->estimation.delta_t_filter);
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imuDeltaT", centralData->imu1.dt);
}
8000f5b2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000f5b6:	00 00       	add	r0,r0
8000f5b8:	80 00       	ld.sh	r0,r0[0x0]
8000f5ba:	f2 cc eb cd 	sub	r12,r9,-5171

8000f5bc <mavlink_send_raw_rc_channels>:
void mavlink_send_raw_rc_channels(void)
{
8000f5bc:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000f5c0:	1a 97       	mov	r7,sp
8000f5c2:	20 4d       	sub	sp,16
8000f5c4:	4b 86       	lddpc	r6,8000f6a4 <mavlink_send_raw_rc_channels+0xe8>
8000f5c6:	1e 26       	rsub	r6,pc
	rc_get_channel(3)+1000,
	rc_get_channel(4)+1000,
	rc_get_channel(5)+1000,
	rc_get_channel(6)+1000,
	rc_get_channel(7)+1000,
	rc_check_receivers());
8000f5c8:	f0 16 00 a7 	mcall	r6[668]
8000f5cc:	18 98       	mov	r8,r12
8000f5ce:	5c 58       	castu.b	r8
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiDeltaT", centralData->estimation.delta_t_filter);
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imuDeltaT", centralData->imu1.dt);
}
void mavlink_send_raw_rc_channels(void)
{
	mavlink_msg_rc_channels_raw_send(MAVLINK_COMM_0,get_millis(),1,
8000f5d0:	5c 58       	castu.b	r8
8000f5d2:	ef 48 ff f0 	st.w	r7[-16],r8
8000f5d6:	30 7c       	mov	r12,7
8000f5d8:	f0 16 00 1b 	mcall	r6[108]
8000f5dc:	18 98       	mov	r8,r12
8000f5de:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f5e2:	5c 88       	casts.h	r8
8000f5e4:	5c 78       	castu.h	r8
8000f5e6:	ef 48 ff f4 	st.w	r7[-12],r8
8000f5ea:	30 6c       	mov	r12,6
8000f5ec:	f0 16 00 1b 	mcall	r6[108]
8000f5f0:	18 98       	mov	r8,r12
8000f5f2:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f5f6:	5c 88       	casts.h	r8
8000f5f8:	5c 78       	castu.h	r8
8000f5fa:	ef 48 ff f8 	st.w	r7[-8],r8
8000f5fe:	30 5c       	mov	r12,5
8000f600:	f0 16 00 1b 	mcall	r6[108]
8000f604:	18 98       	mov	r8,r12
8000f606:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f60a:	5c 88       	casts.h	r8
8000f60c:	5c 78       	castu.h	r8
8000f60e:	ef 48 ff fc 	st.w	r7[-4],r8
8000f612:	30 4c       	mov	r12,4
8000f614:	f0 16 00 1b 	mcall	r6[108]
8000f618:	18 98       	mov	r8,r12
8000f61a:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f61e:	5c 88       	casts.h	r8
8000f620:	e1 d8 c0 10 	bfextu	r0,r8,0x0,0x10
8000f624:	30 3c       	mov	r12,3
8000f626:	f0 16 00 1b 	mcall	r6[108]
8000f62a:	18 98       	mov	r8,r12
8000f62c:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f630:	5c 88       	casts.h	r8
8000f632:	e3 d8 c0 10 	bfextu	r1,r8,0x0,0x10
8000f636:	30 2c       	mov	r12,2
8000f638:	f0 16 00 1b 	mcall	r6[108]
8000f63c:	18 98       	mov	r8,r12
8000f63e:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f642:	5c 88       	casts.h	r8
8000f644:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
8000f648:	30 1c       	mov	r12,1
8000f64a:	f0 16 00 1b 	mcall	r6[108]
8000f64e:	18 98       	mov	r8,r12
8000f650:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f654:	5c 88       	casts.h	r8
8000f656:	e7 d8 c0 10 	bfextu	r3,r8,0x0,0x10
8000f65a:	30 0c       	mov	r12,0
8000f65c:	f0 16 00 1b 	mcall	r6[108]
8000f660:	18 98       	mov	r8,r12
8000f662:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f666:	5c 88       	casts.h	r8
8000f668:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000f66c:	f0 16 00 0f 	mcall	r6[60]
8000f670:	18 9b       	mov	r11,r12
8000f672:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000f676:	1a d8       	st.w	--sp,r8
8000f678:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f67c:	1a d8       	st.w	--sp,r8
8000f67e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f682:	1a d8       	st.w	--sp,r8
8000f684:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f688:	1a d8       	st.w	--sp,r8
8000f68a:	1a d0       	st.w	--sp,r0
8000f68c:	1a d1       	st.w	--sp,r1
8000f68e:	1a d2       	st.w	--sp,r2
8000f690:	06 98       	mov	r8,r3
8000f692:	0a 99       	mov	r9,r5
8000f694:	30 1a       	mov	r10,1
8000f696:	30 0c       	mov	r12,0
8000f698:	fe b0 f3 5e 	rcall	8000dd54 <mavlink_msg_rc_channels_raw_send>
8000f69c:	2f 9d       	sub	sp,-28
	rc_get_channel(4)+1000,
	rc_get_channel(5)+1000,
	rc_get_channel(6)+1000,
	rc_get_channel(7)+1000,
	rc_check_receivers());
}
8000f69e:	2f cd       	sub	sp,-16
8000f6a0:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000f6a4:	80 00       	ld.sh	r0,r0[0x0]
8000f6a6:	f4 4a 43 6f 	cp.w	r10,-769169
8000f6aa:	6c 6c       	ld.w	r12,r6[0x18]
8000f6ac:	5f 41       	srge	r1
8000f6ae:	76 6f       	ld.w	pc,r11[0x18]
8000f6b0:	69 64       	ld.w	r4,r4[0x58]
8000f6b2:	61 6e       	ld.w	lr,r0[0x58]
8000f6b4:	63 65       	ld.w	r5,r1[0x58]
	...

8000f6b8 <mavlink_send_scaled_rc_channels>:

void mavlink_send_scaled_rc_channels(void)
{
8000f6b8:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000f6bc:	1a 97       	mov	r7,sp
8000f6be:	20 4d       	sub	sp,16
8000f6c0:	fe f6 02 94 	ld.w	r6,pc[660]
8000f6c4:	1e 26       	rsub	r6,pc
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(7) * 1000.0 * RC_SCALEFACTOR,
	rc_check_receivers());
8000f6c6:	f0 16 00 a7 	mcall	r6[668]
8000f6ca:	18 98       	mov	r8,r12
8000f6cc:	5c 58       	castu.b	r8
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f6ce:	5c 58       	castu.b	r8
8000f6d0:	ef 48 ff f0 	st.w	r7[-16],r8
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(7) * 1000.0 * RC_SCALEFACTOR,
8000f6d4:	30 7c       	mov	r12,7
8000f6d6:	f0 16 00 1b 	mcall	r6[108]
8000f6da:	18 98       	mov	r8,r12
8000f6dc:	10 9c       	mov	r12,r8
8000f6de:	f0 16 00 1a 	mcall	r6[104]
8000f6e2:	30 08       	mov	r8,0
8000f6e4:	e0 69 40 00 	mov	r9,16384
8000f6e8:	ea 19 40 8f 	orh	r9,0x408f
8000f6ec:	f0 16 00 03 	mcall	r6[12]
8000f6f0:	14 98       	mov	r8,r10
8000f6f2:	16 99       	mov	r9,r11
8000f6f4:	10 9a       	mov	r10,r8
8000f6f6:	12 9b       	mov	r11,r9
8000f6f8:	30 08       	mov	r8,0
8000f6fa:	e0 69 60 00 	mov	r9,24576
8000f6fe:	ea 19 40 7b 	orh	r9,0x407b
8000f702:	f0 16 00 0c 	mcall	r6[48]
8000f706:	14 98       	mov	r8,r10
8000f708:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f70a:	10 9a       	mov	r10,r8
8000f70c:	12 9b       	mov	r11,r9
8000f70e:	f0 16 00 14 	mcall	r6[80]
8000f712:	18 98       	mov	r8,r12
8000f714:	5c 88       	casts.h	r8
8000f716:	ef 48 ff f4 	st.w	r7[-12],r8
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
8000f71a:	30 6c       	mov	r12,6
8000f71c:	f0 16 00 1b 	mcall	r6[108]
8000f720:	18 98       	mov	r8,r12
8000f722:	10 9c       	mov	r12,r8
8000f724:	f0 16 00 1a 	mcall	r6[104]
8000f728:	30 08       	mov	r8,0
8000f72a:	e0 69 40 00 	mov	r9,16384
8000f72e:	ea 19 40 8f 	orh	r9,0x408f
8000f732:	f0 16 00 03 	mcall	r6[12]
8000f736:	14 98       	mov	r8,r10
8000f738:	16 99       	mov	r9,r11
8000f73a:	10 9a       	mov	r10,r8
8000f73c:	12 9b       	mov	r11,r9
8000f73e:	30 08       	mov	r8,0
8000f740:	e0 69 60 00 	mov	r9,24576
8000f744:	ea 19 40 7b 	orh	r9,0x407b
8000f748:	f0 16 00 0c 	mcall	r6[48]
8000f74c:	14 98       	mov	r8,r10
8000f74e:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f750:	10 9a       	mov	r10,r8
8000f752:	12 9b       	mov	r11,r9
8000f754:	f0 16 00 14 	mcall	r6[80]
8000f758:	18 98       	mov	r8,r12
8000f75a:	5c 88       	casts.h	r8
8000f75c:	ef 48 ff f8 	st.w	r7[-8],r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
8000f760:	30 5c       	mov	r12,5
8000f762:	f0 16 00 1b 	mcall	r6[108]
8000f766:	18 98       	mov	r8,r12
8000f768:	10 9c       	mov	r12,r8
8000f76a:	f0 16 00 1a 	mcall	r6[104]
8000f76e:	30 08       	mov	r8,0
8000f770:	e0 69 40 00 	mov	r9,16384
8000f774:	ea 19 40 8f 	orh	r9,0x408f
8000f778:	f0 16 00 03 	mcall	r6[12]
8000f77c:	14 98       	mov	r8,r10
8000f77e:	16 99       	mov	r9,r11
8000f780:	10 9a       	mov	r10,r8
8000f782:	12 9b       	mov	r11,r9
8000f784:	30 08       	mov	r8,0
8000f786:	e0 69 60 00 	mov	r9,24576
8000f78a:	ea 19 40 7b 	orh	r9,0x407b
8000f78e:	f0 16 00 0c 	mcall	r6[48]
8000f792:	14 98       	mov	r8,r10
8000f794:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f796:	10 9a       	mov	r10,r8
8000f798:	12 9b       	mov	r11,r9
8000f79a:	f0 16 00 14 	mcall	r6[80]
8000f79e:	18 98       	mov	r8,r12
8000f7a0:	5c 88       	casts.h	r8
8000f7a2:	ef 48 ff fc 	st.w	r7[-4],r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
8000f7a6:	30 4c       	mov	r12,4
8000f7a8:	f0 16 00 1b 	mcall	r6[108]
8000f7ac:	18 98       	mov	r8,r12
8000f7ae:	10 9c       	mov	r12,r8
8000f7b0:	f0 16 00 1a 	mcall	r6[104]
8000f7b4:	30 08       	mov	r8,0
8000f7b6:	e0 69 40 00 	mov	r9,16384
8000f7ba:	ea 19 40 8f 	orh	r9,0x408f
8000f7be:	f0 16 00 03 	mcall	r6[12]
8000f7c2:	14 98       	mov	r8,r10
8000f7c4:	16 99       	mov	r9,r11
8000f7c6:	10 9a       	mov	r10,r8
8000f7c8:	12 9b       	mov	r11,r9
8000f7ca:	30 08       	mov	r8,0
8000f7cc:	e0 69 60 00 	mov	r9,24576
8000f7d0:	ea 19 40 7b 	orh	r9,0x407b
8000f7d4:	f0 16 00 0c 	mcall	r6[48]
8000f7d8:	14 98       	mov	r8,r10
8000f7da:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f7dc:	10 9a       	mov	r10,r8
8000f7de:	12 9b       	mov	r11,r9
8000f7e0:	f0 16 00 14 	mcall	r6[80]
8000f7e4:	18 98       	mov	r8,r12
8000f7e6:	5c 88       	casts.h	r8
8000f7e8:	10 90       	mov	r0,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
8000f7ea:	30 3c       	mov	r12,3
8000f7ec:	f0 16 00 1b 	mcall	r6[108]
8000f7f0:	18 98       	mov	r8,r12
8000f7f2:	10 9c       	mov	r12,r8
8000f7f4:	f0 16 00 1a 	mcall	r6[104]
8000f7f8:	30 08       	mov	r8,0
8000f7fa:	e0 69 40 00 	mov	r9,16384
8000f7fe:	ea 19 40 8f 	orh	r9,0x408f
8000f802:	f0 16 00 03 	mcall	r6[12]
8000f806:	14 98       	mov	r8,r10
8000f808:	16 99       	mov	r9,r11
8000f80a:	10 9a       	mov	r10,r8
8000f80c:	12 9b       	mov	r11,r9
8000f80e:	30 08       	mov	r8,0
8000f810:	e0 69 60 00 	mov	r9,24576
8000f814:	ea 19 40 7b 	orh	r9,0x407b
8000f818:	f0 16 00 0c 	mcall	r6[48]
8000f81c:	14 98       	mov	r8,r10
8000f81e:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f820:	10 9a       	mov	r10,r8
8000f822:	12 9b       	mov	r11,r9
8000f824:	f0 16 00 14 	mcall	r6[80]
8000f828:	18 98       	mov	r8,r12
8000f82a:	5c 88       	casts.h	r8
8000f82c:	10 91       	mov	r1,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
8000f82e:	30 2c       	mov	r12,2
8000f830:	f0 16 00 1b 	mcall	r6[108]
8000f834:	18 98       	mov	r8,r12
8000f836:	10 9c       	mov	r12,r8
8000f838:	f0 16 00 1a 	mcall	r6[104]
8000f83c:	30 08       	mov	r8,0
8000f83e:	e0 69 40 00 	mov	r9,16384
8000f842:	ea 19 40 8f 	orh	r9,0x408f
8000f846:	f0 16 00 03 	mcall	r6[12]
8000f84a:	14 98       	mov	r8,r10
8000f84c:	16 99       	mov	r9,r11
8000f84e:	10 9a       	mov	r10,r8
8000f850:	12 9b       	mov	r11,r9
8000f852:	30 08       	mov	r8,0
8000f854:	e0 69 60 00 	mov	r9,24576
8000f858:	ea 19 40 7b 	orh	r9,0x407b
8000f85c:	f0 16 00 0c 	mcall	r6[48]
8000f860:	14 98       	mov	r8,r10
8000f862:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f864:	10 9a       	mov	r10,r8
8000f866:	12 9b       	mov	r11,r9
8000f868:	f0 16 00 14 	mcall	r6[80]
8000f86c:	18 98       	mov	r8,r12
8000f86e:	5c 88       	casts.h	r8
8000f870:	10 92       	mov	r2,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
8000f872:	30 1c       	mov	r12,1
8000f874:	f0 16 00 1b 	mcall	r6[108]
8000f878:	18 98       	mov	r8,r12
8000f87a:	10 9c       	mov	r12,r8
8000f87c:	f0 16 00 1a 	mcall	r6[104]
8000f880:	30 08       	mov	r8,0
8000f882:	e0 69 40 00 	mov	r9,16384
8000f886:	ea 19 40 8f 	orh	r9,0x408f
8000f88a:	f0 16 00 03 	mcall	r6[12]
8000f88e:	14 98       	mov	r8,r10
8000f890:	16 99       	mov	r9,r11
8000f892:	10 9a       	mov	r10,r8
8000f894:	12 9b       	mov	r11,r9
8000f896:	30 08       	mov	r8,0
8000f898:	e0 69 60 00 	mov	r9,24576
8000f89c:	ea 19 40 7b 	orh	r9,0x407b
8000f8a0:	f0 16 00 0c 	mcall	r6[48]
8000f8a4:	14 98       	mov	r8,r10
8000f8a6:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f8a8:	10 9a       	mov	r10,r8
8000f8aa:	12 9b       	mov	r11,r9
8000f8ac:	f0 16 00 14 	mcall	r6[80]
8000f8b0:	18 98       	mov	r8,r12
8000f8b2:	5c 88       	casts.h	r8
8000f8b4:	10 93       	mov	r3,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
8000f8b6:	30 0c       	mov	r12,0
8000f8b8:	f0 16 00 1b 	mcall	r6[108]
8000f8bc:	18 98       	mov	r8,r12
8000f8be:	10 9c       	mov	r12,r8
8000f8c0:	f0 16 00 1a 	mcall	r6[104]
8000f8c4:	30 08       	mov	r8,0
8000f8c6:	e0 69 40 00 	mov	r9,16384
8000f8ca:	ea 19 40 8f 	orh	r9,0x408f
8000f8ce:	f0 16 00 03 	mcall	r6[12]
8000f8d2:	14 98       	mov	r8,r10
8000f8d4:	16 99       	mov	r9,r11
8000f8d6:	10 9a       	mov	r10,r8
8000f8d8:	12 9b       	mov	r11,r9
8000f8da:	30 08       	mov	r8,0
8000f8dc:	e0 69 60 00 	mov	r9,24576
8000f8e0:	ea 19 40 7b 	orh	r9,0x407b
8000f8e4:	f0 16 00 0c 	mcall	r6[48]
8000f8e8:	14 98       	mov	r8,r10
8000f8ea:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f8ec:	10 9a       	mov	r10,r8
8000f8ee:	12 9b       	mov	r11,r9
8000f8f0:	f0 16 00 14 	mcall	r6[80]
8000f8f4:	18 98       	mov	r8,r12
8000f8f6:	5c 88       	casts.h	r8
8000f8f8:	10 95       	mov	r5,r8
8000f8fa:	f0 16 00 0f 	mcall	r6[60]
8000f8fe:	18 9b       	mov	r11,r12
8000f900:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000f904:	1a d8       	st.w	--sp,r8
8000f906:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f90a:	1a d8       	st.w	--sp,r8
8000f90c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f910:	1a d8       	st.w	--sp,r8
8000f912:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f916:	1a d8       	st.w	--sp,r8
8000f918:	1a d0       	st.w	--sp,r0
8000f91a:	1a d1       	st.w	--sp,r1
8000f91c:	1a d2       	st.w	--sp,r2
8000f91e:	06 98       	mov	r8,r3
8000f920:	0a 99       	mov	r9,r5
8000f922:	30 1a       	mov	r10,1
8000f924:	30 0c       	mov	r12,0
8000f926:	fe b0 f1 81 	rcall	8000dc28 <mavlink_msg_rc_channels_scaled_send>
8000f92a:	2f 9d       	sub	sp,-28
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(7) * 1000.0 * RC_SCALEFACTOR,
	rc_check_receivers());
	
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0,get_millis(),"Coll_Avoidance",centralData->collision_avoidance);
8000f92c:	ec f8 00 00 	ld.w	r8,r6[0]
8000f930:	70 08       	ld.w	r8,r8[0x0]
8000f932:	f1 38 10 bb 	ld.ub	r8,r8[4283]
8000f936:	10 95       	mov	r5,r8
8000f938:	f0 16 00 0f 	mcall	r6[60]
8000f93c:	18 98       	mov	r8,r12
8000f93e:	0a 99       	mov	r9,r5
8000f940:	fe ca 02 98 	sub	r10,pc,664
8000f944:	10 9b       	mov	r11,r8
8000f946:	30 0c       	mov	r12,0
8000f948:	fe b0 f6 8c 	rcall	8000e660 <mavlink_msg_named_value_int_send>
}
8000f94c:	2f cd       	sub	sp,-16
8000f94e:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000f952:	00 00       	add	r0,r0
8000f954:	80 00       	ld.sh	r0,r0[0x0]
8000f956:	f5 48 72 6f 	st.w	r10[29295],r8
8000f95a:	6c 6c       	ld.w	r12,r6[0x18]
8000f95c:	74 6f       	ld.w	pc,r10[0x18]
8000f95e:	72 71       	ld.w	r1,r9[0x1c]
8000f960:	75 65       	ld.w	r5,r10[0x58]
8000f962:	00 00       	add	r0,r0
8000f964:	70 69       	ld.w	r9,r8[0x18]
8000f966:	74 63       	ld.w	r3,r10[0x18]
8000f968:	68 74       	ld.w	r4,r4[0x1c]
8000f96a:	6f 72       	ld.w	r2,r7[0x5c]
8000f96c:	71 75       	ld.w	r5,r8[0x5c]
8000f96e:	65 00       	ld.w	r0,r2[0x40]
8000f970:	79 61       	ld.w	r1,r12[0x58]
8000f972:	77 74       	ld.w	r4,r11[0x5c]
8000f974:	6f 72       	ld.w	r2,r7[0x5c]
8000f976:	71 75       	ld.w	r5,r8[0x5c]
8000f978:	65 00       	ld.w	r0,r2[0x40]
8000f97a:	00 00       	add	r0,r0
8000f97c:	74 68       	ld.w	r8,r10[0x18]
8000f97e:	72 75       	ld.w	r5,r9[0x1c]
8000f980:	73 74       	ld.w	r4,r9[0x5c]
8000f982:	00 00       	add	r0,r0
8000f984:	72 70       	ld.w	r0,r9[0x1c]
8000f986:	6d 31       	ld.w	r1,r6[0x4c]
8000f988:	00 00       	add	r0,r0
8000f98a:	00 00       	add	r0,r0
8000f98c:	72 70       	ld.w	r0,r9[0x1c]
8000f98e:	6d 32       	ld.w	r2,r6[0x4c]
8000f990:	00 00       	add	r0,r0
8000f992:	00 00       	add	r0,r0
8000f994:	72 70       	ld.w	r0,r9[0x1c]
8000f996:	6d 33       	ld.w	r3,r6[0x4c]
8000f998:	00 00       	add	r0,r0
8000f99a:	00 00       	add	r0,r0
8000f99c:	72 70       	ld.w	r0,r9[0x1c]
8000f99e:	6d 34       	ld.w	r4,r6[0x4c]
	...

8000f9a2 <mavlink_send_simulation>:

void mavlink_send_simulation(void) {
8000f9a2:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000f9a6:	1a 97       	mov	r7,sp
8000f9a8:	21 6d       	sub	sp,88
8000f9aa:	fe f6 03 66 	ld.w	r6,pc[870]
8000f9ae:	1e 26       	rsub	r6,pc
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
8000f9b0:	ec f8 00 00 	ld.w	r8,r6[0]
8000f9b4:	70 09       	ld.w	r9,r8[0x0]
8000f9b6:	ee ca 00 0c 	sub	r10,r7,12
8000f9ba:	20 4d       	sub	sp,16
8000f9bc:	1a 98       	mov	r8,sp
8000f9be:	f2 c9 f4 10 	sub	r9,r9,-3056
8000f9c2:	20 08       	sub	r8,0
8000f9c4:	20 09       	sub	r9,0
8000f9c6:	72 0b       	ld.w	r11,r9[0x0]
8000f9c8:	91 0b       	st.w	r8[0x0],r11
8000f9ca:	72 1b       	ld.w	r11,r9[0x4]
8000f9cc:	91 1b       	st.w	r8[0x4],r11
8000f9ce:	72 2b       	ld.w	r11,r9[0x8]
8000f9d0:	91 2b       	st.w	r8[0x8],r11
8000f9d2:	72 39       	ld.w	r9,r9[0xc]
8000f9d4:	91 39       	st.w	r8[0xc],r9
8000f9d6:	14 9c       	mov	r12,r10
8000f9d8:	f0 16 00 6d 	mcall	r6[436]
8000f9dc:	2f cd       	sub	sp,-16
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
8000f9de:	ec f8 00 00 	ld.w	r8,r6[0]
8000f9e2:	70 08       	ld.w	r8,r8[0x0]
8000f9e4:	ee cc 00 28 	sub	r12,r7,40
8000f9e8:	20 cd       	sub	sp,48
8000f9ea:	1a 99       	mov	r9,sp
8000f9ec:	12 9b       	mov	r11,r9
8000f9ee:	f0 ca f3 44 	sub	r10,r8,-3260
8000f9f2:	f6 c8 00 00 	sub	r8,r11,0
8000f9f6:	f4 c9 00 00 	sub	r9,r10,0
8000f9fa:	72 0e       	ld.w	lr,r9[0x0]
8000f9fc:	91 0e       	st.w	r8[0x0],lr
8000f9fe:	72 1e       	ld.w	lr,r9[0x4]
8000fa00:	91 1e       	st.w	r8[0x4],lr
8000fa02:	72 2e       	ld.w	lr,r9[0x8]
8000fa04:	91 2e       	st.w	r8[0x8],lr
8000fa06:	72 39       	ld.w	r9,r9[0xc]
8000fa08:	91 39       	st.w	r8[0xc],r9
8000fa0a:	f6 c8 ff f0 	sub	r8,r11,-16
8000fa0e:	f4 c9 ff f0 	sub	r9,r10,-16
8000fa12:	72 0e       	ld.w	lr,r9[0x0]
8000fa14:	91 0e       	st.w	r8[0x0],lr
8000fa16:	72 1e       	ld.w	lr,r9[0x4]
8000fa18:	91 1e       	st.w	r8[0x4],lr
8000fa1a:	72 2e       	ld.w	lr,r9[0x8]
8000fa1c:	91 2e       	st.w	r8[0x8],lr
8000fa1e:	72 39       	ld.w	r9,r9[0xc]
8000fa20:	91 39       	st.w	r8[0xc],r9
8000fa22:	f6 c8 ff e0 	sub	r8,r11,-32
8000fa26:	f4 c9 ff e0 	sub	r9,r10,-32
8000fa2a:	72 0a       	ld.w	r10,r9[0x0]
8000fa2c:	91 0a       	st.w	r8[0x0],r10
8000fa2e:	72 1a       	ld.w	r10,r9[0x4]
8000fa30:	91 1a       	st.w	r8[0x4],r10
8000fa32:	72 2a       	ld.w	r10,r9[0x8]
8000fa34:	91 2a       	st.w	r8[0x8],r10
8000fa36:	72 39       	ld.w	r9,r9[0xc]
8000fa38:	91 39       	st.w	r8[0xc],r9
8000fa3a:	f0 16 00 88 	mcall	r6[544]
8000fa3e:	2f 4d       	sub	sp,-48
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
8000fa40:	ec f8 00 00 	ld.w	r8,r6[0]
8000fa44:	70 08       	ld.w	r8,r8[0x0]
8000fa46:	f0 f9 0b c8 	ld.w	r9,r8[3016]
8000fa4a:	fc 18 44 7a 	movh	r8,0x447a
8000fa4e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fa52:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000fa56:	5c 88       	casts.h	r8
8000fa58:	ef 48 ff a8 	st.w	r7[-88],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
8000fa5c:	ec f8 00 00 	ld.w	r8,r6[0]
8000fa60:	70 08       	ld.w	r8,r8[0x0]
8000fa62:	f0 f9 0b c4 	ld.w	r9,r8[3012]
8000fa66:	fc 18 44 7a 	movh	r8,0x447a
8000fa6a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fa6e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000fa72:	5c 88       	casts.h	r8
8000fa74:	ef 48 ff ac 	st.w	r7[-84],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
8000fa78:	ec f8 00 00 	ld.w	r8,r6[0]
8000fa7c:	70 08       	ld.w	r8,r8[0x0]
8000fa7e:	f0 f9 0b c0 	ld.w	r9,r8[3008]
8000fa82:	fc 18 44 7a 	movh	r8,0x447a
8000fa86:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fa8a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000fa8e:	5c 88       	casts.h	r8
8000fa90:	ef 48 ff b0 	st.w	r7[-80],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
8000fa94:	ec f8 00 00 	ld.w	r8,r6[0]
8000fa98:	70 08       	ld.w	r8,r8[0x0]
8000fa9a:	f0 f9 0b e0 	ld.w	r9,r8[3040]
8000fa9e:	fc 18 42 c8 	movh	r8,0x42c8
8000faa2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000faa6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000faaa:	5c 88       	casts.h	r8
8000faac:	ef 48 ff b4 	st.w	r7[-76],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
8000fab0:	ec f8 00 00 	ld.w	r8,r6[0]
8000fab4:	70 08       	ld.w	r8,r8[0x0]
8000fab6:	f0 f9 0b dc 	ld.w	r9,r8[3036]
8000faba:	fc 18 42 c8 	movh	r8,0x42c8
8000fabe:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fac2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000fac6:	5c 88       	casts.h	r8
8000fac8:	ef 48 ff b8 	st.w	r7[-72],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
8000facc:	ec f8 00 00 	ld.w	r8,r6[0]
8000fad0:	70 08       	ld.w	r8,r8[0x0]
8000fad2:	f0 f9 0b d8 	ld.w	r9,r8[3032]
8000fad6:	fc 18 42 c8 	movh	r8,0x42c8
8000fada:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fade:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000fae2:	5c 88       	casts.h	r8
8000fae4:	ef 48 ff bc 	st.w	r7[-68],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
8000fae8:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000faec:	10 9c       	mov	r12,r8
8000faee:	f0 16 00 02 	mcall	r6[8]
8000faf2:	30 08       	mov	r8,0
8000faf4:	e0 69 40 00 	mov	r9,16384
8000faf8:	ea 19 40 8f 	orh	r9,0x408f
8000fafc:	f0 16 00 03 	mcall	r6[12]
8000fb00:	14 98       	mov	r8,r10
8000fb02:	16 99       	mov	r9,r11
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fb04:	10 9a       	mov	r10,r8
8000fb06:	12 9b       	mov	r11,r9
8000fb08:	f0 16 00 14 	mcall	r6[80]
8000fb0c:	ef 4c ff c0 	st.w	r7[-64],r12
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
8000fb10:	ee ea ff d8 	ld.d	r10,r7[-40]
8000fb14:	30 08       	mov	r8,0
8000fb16:	e0 69 12 d0 	mov	r9,4816
8000fb1a:	ea 19 41 63 	orh	r9,0x4163
8000fb1e:	f0 16 00 03 	mcall	r6[12]
8000fb22:	14 98       	mov	r8,r10
8000fb24:	16 99       	mov	r9,r11
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fb26:	10 9a       	mov	r10,r8
8000fb28:	12 9b       	mov	r11,r9
8000fb2a:	f0 16 00 14 	mcall	r6[80]
8000fb2e:	ef 4c ff c4 	st.w	r7[-60],r12
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
8000fb32:	ee ea ff e0 	ld.d	r10,r7[-32]
8000fb36:	30 08       	mov	r8,0
8000fb38:	e0 69 12 d0 	mov	r9,4816
8000fb3c:	ea 19 41 63 	orh	r9,0x4163
8000fb40:	f0 16 00 03 	mcall	r6[12]
8000fb44:	14 98       	mov	r8,r10
8000fb46:	16 99       	mov	r9,r11
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fb48:	10 9a       	mov	r10,r8
8000fb4a:	12 9b       	mov	r11,r9
8000fb4c:	f0 16 00 14 	mcall	r6[80]
8000fb50:	ef 4c ff c8 	st.w	r7[-56],r12
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
8000fb54:	ec f8 00 00 	ld.w	r8,r6[0]
8000fb58:	70 08       	ld.w	r8,r8[0x0]
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fb5a:	f0 f8 0b bc 	ld.w	r8,r8[3004]
8000fb5e:	ef 48 ff cc 	st.w	r7[-52],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
8000fb62:	ec f8 00 00 	ld.w	r8,r6[0]
8000fb66:	70 08       	ld.w	r8,r8[0x0]
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fb68:	f0 f8 0b b8 	ld.w	r8,r8[3000]
8000fb6c:	ef 48 ff d0 	st.w	r7[-48],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
8000fb70:	ec f8 00 00 	ld.w	r8,r6[0]
8000fb74:	70 08       	ld.w	r8,r8[0x0]
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fb76:	f0 f8 0b b4 	ld.w	r8,r8[2996]
8000fb7a:	ef 48 ff d4 	st.w	r7[-44],r8
8000fb7e:	ee f0 ff fc 	ld.w	r0,r7[-4]
8000fb82:	ee f1 ff f8 	ld.w	r1,r7[-8]
8000fb86:	ee f5 ff f4 	ld.w	r5,r7[-12]
8000fb8a:	f0 16 00 29 	mcall	r6[164]
8000fb8e:	18 98       	mov	r8,r12
8000fb90:	10 92       	mov	r2,r8
8000fb92:	30 03       	mov	r3,0
8000fb94:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000fb98:	1a d8       	st.w	--sp,r8
8000fb9a:	ee f8 ff ac 	ld.w	r8,r7[-84]
8000fb9e:	1a d8       	st.w	--sp,r8
8000fba0:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000fba4:	1a d8       	st.w	--sp,r8
8000fba6:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000fbaa:	1a d8       	st.w	--sp,r8
8000fbac:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000fbb0:	1a d8       	st.w	--sp,r8
8000fbb2:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000fbb6:	1a d8       	st.w	--sp,r8
8000fbb8:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000fbbc:	1a d8       	st.w	--sp,r8
8000fbbe:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000fbc2:	1a d8       	st.w	--sp,r8
8000fbc4:	ee f8 ff c8 	ld.w	r8,r7[-56]
8000fbc8:	1a d8       	st.w	--sp,r8
8000fbca:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000fbce:	1a d8       	st.w	--sp,r8
8000fbd0:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000fbd4:	1a d8       	st.w	--sp,r8
8000fbd6:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000fbda:	1a d8       	st.w	--sp,r8
8000fbdc:	1a d0       	st.w	--sp,r0
8000fbde:	02 98       	mov	r8,r1
8000fbe0:	0a 99       	mov	r9,r5
8000fbe2:	04 9a       	mov	r10,r2
8000fbe4:	06 9b       	mov	r11,r3
8000fbe6:	30 0c       	mov	r12,0
8000fbe8:	fe b0 f4 44 	rcall	8000e470 <mavlink_msg_hil_state_send>
8000fbec:	2f 3d       	sub	sp,-52
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
	);
	flush_mavlink();
8000fbee:	f0 16 00 2d 	mcall	r6[180]
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0, get_millis(), "rolltorque", centralData->sim_model.torques_bf[0]);flush_mavlink();
8000fbf2:	ec f8 00 00 	ld.w	r8,r6[0]
8000fbf6:	70 08       	ld.w	r8,r8[0x0]
8000fbf8:	f0 f8 0b a8 	ld.w	r8,r8[2984]
8000fbfc:	e5 ab 05 08 	cop	cp0,cr5,cr0,cr8,0x56
8000fc00:	f0 16 00 0f 	mcall	r6[60]
8000fc04:	18 98       	mov	r8,r12
8000fc06:	0a 99       	mov	r9,r5
8000fc08:	fe ca 02 b0 	sub	r10,pc,688
8000fc0c:	10 9b       	mov	r11,r8
8000fc0e:	30 0c       	mov	r12,0
8000fc10:	fe b0 f5 28 	rcall	8000e660 <mavlink_msg_named_value_int_send>
8000fc14:	f0 16 00 2d 	mcall	r6[180]
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0, get_millis(), "pitchtorque", centralData->sim_model.torques_bf[1]);flush_mavlink();
8000fc18:	ec f8 00 00 	ld.w	r8,r6[0]
8000fc1c:	70 08       	ld.w	r8,r8[0x0]
8000fc1e:	f0 f8 0b ac 	ld.w	r8,r8[2988]
8000fc22:	e5 ab 05 08 	cop	cp0,cr5,cr0,cr8,0x56
8000fc26:	f0 16 00 0f 	mcall	r6[60]
8000fc2a:	18 98       	mov	r8,r12
8000fc2c:	0a 99       	mov	r9,r5
8000fc2e:	fe ca 02 ca 	sub	r10,pc,714
8000fc32:	10 9b       	mov	r11,r8
8000fc34:	30 0c       	mov	r12,0
8000fc36:	fe b0 f5 15 	rcall	8000e660 <mavlink_msg_named_value_int_send>
8000fc3a:	f0 16 00 2d 	mcall	r6[180]
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0, get_millis(), "yawtorque", centralData->sim_model.torques_bf[2]);flush_mavlink();
8000fc3e:	ec f8 00 00 	ld.w	r8,r6[0]
8000fc42:	70 08       	ld.w	r8,r8[0x0]
8000fc44:	f0 f8 0b b0 	ld.w	r8,r8[2992]
8000fc48:	e5 ab 05 08 	cop	cp0,cr5,cr0,cr8,0x56
8000fc4c:	f0 16 00 0f 	mcall	r6[60]
8000fc50:	18 98       	mov	r8,r12
8000fc52:	0a 99       	mov	r9,r5
8000fc54:	fe ca 02 e4 	sub	r10,pc,740
8000fc58:	10 9b       	mov	r11,r8
8000fc5a:	30 0c       	mov	r12,0
8000fc5c:	fe b0 f5 02 	rcall	8000e660 <mavlink_msg_named_value_int_send>
8000fc60:	f0 16 00 2d 	mcall	r6[180]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "thrust", centralData->sim_model.lin_forces_bf[2]);flush_mavlink();
8000fc64:	ec f8 00 00 	ld.w	r8,r6[0]
8000fc68:	70 08       	ld.w	r8,r8[0x0]
8000fc6a:	f0 f5 0b c8 	ld.w	r5,r8[3016]
8000fc6e:	f0 16 00 0f 	mcall	r6[60]
8000fc72:	18 98       	mov	r8,r12
8000fc74:	0a 99       	mov	r9,r5
8000fc76:	fe ca 02 fa 	sub	r10,pc,762
8000fc7a:	10 9b       	mov	r11,r8
8000fc7c:	30 0c       	mov	r12,0
8000fc7e:	fe b0 f4 b9 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>
8000fc82:	f0 16 00 2d 	mcall	r6[180]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm1", centralData->sim_model.rotorspeeds[0]);flush_mavlink();
8000fc86:	ec f8 00 00 	ld.w	r8,r6[0]
8000fc8a:	70 08       	ld.w	r8,r8[0x0]
8000fc8c:	f0 f5 0c ec 	ld.w	r5,r8[3308]
8000fc90:	f0 16 00 0f 	mcall	r6[60]
8000fc94:	18 98       	mov	r8,r12
8000fc96:	0a 99       	mov	r9,r5
8000fc98:	fe ca 03 14 	sub	r10,pc,788
8000fc9c:	10 9b       	mov	r11,r8
8000fc9e:	30 0c       	mov	r12,0
8000fca0:	fe b0 f4 a8 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>
8000fca4:	f0 16 00 2d 	mcall	r6[180]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm2", centralData->sim_model.rotorspeeds[1]);flush_mavlink();
8000fca8:	ec f8 00 00 	ld.w	r8,r6[0]
8000fcac:	70 08       	ld.w	r8,r8[0x0]
8000fcae:	f0 f5 0c f0 	ld.w	r5,r8[3312]
8000fcb2:	f0 16 00 0f 	mcall	r6[60]
8000fcb6:	18 98       	mov	r8,r12
8000fcb8:	0a 99       	mov	r9,r5
8000fcba:	fe ca 03 2e 	sub	r10,pc,814
8000fcbe:	10 9b       	mov	r11,r8
8000fcc0:	30 0c       	mov	r12,0
8000fcc2:	fe b0 f4 97 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>
8000fcc6:	f0 16 00 2d 	mcall	r6[180]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm3", centralData->sim_model.rotorspeeds[2]);flush_mavlink();
8000fcca:	ec f8 00 00 	ld.w	r8,r6[0]
8000fcce:	70 08       	ld.w	r8,r8[0x0]
8000fcd0:	f0 f5 0c f4 	ld.w	r5,r8[3316]
8000fcd4:	f0 16 00 0f 	mcall	r6[60]
8000fcd8:	18 98       	mov	r8,r12
8000fcda:	0a 99       	mov	r9,r5
8000fcdc:	fe ca 03 48 	sub	r10,pc,840
8000fce0:	10 9b       	mov	r11,r8
8000fce2:	30 0c       	mov	r12,0
8000fce4:	fe b0 f4 86 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>
8000fce8:	f0 16 00 2d 	mcall	r6[180]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm4", centralData->sim_model.rotorspeeds[3]);
8000fcec:	ec f8 00 00 	ld.w	r8,r6[0]
8000fcf0:	70 08       	ld.w	r8,r8[0x0]
8000fcf2:	f0 f5 0c f8 	ld.w	r5,r8[3320]
8000fcf6:	f0 16 00 0f 	mcall	r6[60]
8000fcfa:	18 98       	mov	r8,r12
8000fcfc:	0a 99       	mov	r9,r5
8000fcfe:	fe ca 03 62 	sub	r10,pc,866
8000fd02:	10 9b       	mov	r11,r8
8000fd04:	30 0c       	mov	r12,0
8000fd06:	fe b0 f4 75 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>

	
}
8000fd0a:	2e ad       	sub	sp,-88
8000fd0c:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000fd10:	80 00       	ld.sh	r0,r0[0x0]
8000fd12:	f8 32 73 74 	sub	r2,-429196
8000fd16:	61 62       	ld.w	r2,r0[0x58]
8000fd18:	41 76       	lddsp	r6,sp[0x5c]
8000fd1a:	67 44       	ld.w	r4,r3[0x50]
8000fd1c:	65 6c       	ld.w	r12,r2[0x58]
8000fd1e:	61 79       	ld.w	r9,r0[0x5c]
8000fd20:	00 00       	add	r0,r0
8000fd22:	00 00       	add	r0,r0
8000fd24:	73 74       	ld.w	r4,r9[0x5c]
8000fd26:	61 62       	ld.w	r2,r0[0x58]
8000fd28:	44 65       	lddsp	r5,sp[0x118]
8000fd2a:	6c 61       	ld.w	r1,r6[0x18]
8000fd2c:	79 56       	ld.w	r6,r12[0x54]
8000fd2e:	61 72       	ld.w	r2,r0[0x5c]
8000fd30:	00 00       	add	r0,r0
8000fd32:	00 00       	add	r0,r0
8000fd34:	73 74       	ld.w	r4,r9[0x5c]
8000fd36:	61 62       	ld.w	r2,r0[0x58]
8000fd38:	4d 61       	lddpc	r1,8000fe90 <send_rt_stats+0x110>
8000fd3a:	78 44       	ld.w	r4,r12[0x10]
8000fd3c:	65 6c       	ld.w	r12,r2[0x58]
8000fd3e:	61 79       	ld.w	r9,r0[0x5c]
8000fd40:	00 00       	add	r0,r0
8000fd42:	00 00       	add	r0,r0
8000fd44:	73 74       	ld.w	r4,r9[0x5c]
8000fd46:	61 62       	ld.w	r2,r0[0x58]
8000fd48:	52 54       	stdsp	sp[0x94],r4
8000fd4a:	76 69       	ld.w	r9,r11[0x18]
8000fd4c:	6f 00       	ld.w	r0,r7[0x40]
8000fd4e:	00 00       	add	r0,r0
8000fd50:	62 61       	ld.w	r1,r1[0x18]
8000fd52:	72 6f       	ld.w	pc,r9[0x18]
8000fd54:	41 76       	lddsp	r6,sp[0x5c]
8000fd56:	67 44       	ld.w	r4,r3[0x50]
8000fd58:	65 6c       	ld.w	r12,r2[0x58]
8000fd5a:	61 79       	ld.w	r9,r0[0x5c]
8000fd5c:	00 00       	add	r0,r0
8000fd5e:	00 00       	add	r0,r0
8000fd60:	69 6d       	ld.w	sp,r4[0x58]
8000fd62:	75 45       	ld.w	r5,r10[0x50]
8000fd64:	78 54       	ld.w	r4,r12[0x14]
8000fd66:	69 6d       	ld.w	sp,r4[0x58]
8000fd68:	65 00       	ld.w	r0,r2[0x40]
8000fd6a:	00 00       	add	r0,r0
8000fd6c:	6e 61       	ld.w	r1,r7[0x18]
8000fd6e:	76 45       	ld.w	r5,r11[0x10]
8000fd70:	78 54       	ld.w	r4,r12[0x14]
8000fd72:	69 6d       	ld.w	sp,r4[0x58]
8000fd74:	65 00       	ld.w	r0,r2[0x40]
8000fd76:	00 00       	add	r0,r0
8000fd78:	69 6d       	ld.w	sp,r4[0x58]
8000fd7a:	75 5f       	ld.w	pc,r10[0x54]
8000fd7c:	64 74       	ld.w	r4,r2[0x1c]
	...

8000fd80 <send_rt_stats>:

task_return_t send_rt_stats() {
8000fd80:	eb cd 40 e0 	pushm	r5-r7,lr
8000fd84:	1a 97       	mov	r7,sp
8000fd86:	20 1d       	sub	sp,4
8000fd88:	4c e6       	lddpc	r6,8000fec0 <send_rt_stats+0x140>
8000fd8a:	1e 26       	rsub	r6,pc
	task_set *main_tasks=get_main_taskset();
8000fd8c:	f0 16 01 03 	mcall	r6[1036]
8000fd90:	18 98       	mov	r8,r12
8000fd92:	ef 48 ff fc 	st.w	r7[-4],r8
	
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabAvgDelay", main_tasks->tasks[0].delay_avg);
8000fd96:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fd9a:	70 c8       	ld.w	r8,r8[0x30]
8000fd9c:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000fda0:	f0 16 00 0f 	mcall	r6[60]
8000fda4:	18 98       	mov	r8,r12
8000fda6:	0a 99       	mov	r9,r5
8000fda8:	fe ca 00 94 	sub	r10,pc,148
8000fdac:	10 9b       	mov	r11,r8
8000fdae:	30 0c       	mov	r12,0
8000fdb0:	fe b0 f4 20 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabDelayVar", sqrt(main_tasks->tasks[0].delay_var_squared));
8000fdb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fdb8:	70 d8       	ld.w	r8,r8[0x34]
8000fdba:	10 9c       	mov	r12,r8
8000fdbc:	f0 16 00 51 	mcall	r6[324]
8000fdc0:	14 98       	mov	r8,r10
8000fdc2:	16 99       	mov	r9,r11
8000fdc4:	10 9a       	mov	r10,r8
8000fdc6:	12 9b       	mov	r11,r9
8000fdc8:	f0 16 00 6b 	mcall	r6[428]
8000fdcc:	14 98       	mov	r8,r10
8000fdce:	16 99       	mov	r9,r11
8000fdd0:	10 9a       	mov	r10,r8
8000fdd2:	12 9b       	mov	r11,r9
8000fdd4:	f0 16 00 09 	mcall	r6[36]
8000fdd8:	18 95       	mov	r5,r12
8000fdda:	f0 16 00 0f 	mcall	r6[60]
8000fdde:	18 98       	mov	r8,r12
8000fde0:	0a 99       	mov	r9,r5
8000fde2:	fe ca 00 be 	sub	r10,pc,190
8000fde6:	10 9b       	mov	r11,r8
8000fde8:	30 0c       	mov	r12,0
8000fdea:	fe b0 f4 03 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabMaxDelay", main_tasks->tasks[0].delay_max);
8000fdee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fdf2:	70 b8       	ld.w	r8,r8[0x2c]
8000fdf4:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000fdf8:	f0 16 00 0f 	mcall	r6[60]
8000fdfc:	18 98       	mov	r8,r12
8000fdfe:	0a 99       	mov	r9,r5
8000fe00:	fe ca 00 cc 	sub	r10,pc,204
8000fe04:	10 9b       	mov	r11,r8
8000fe06:	30 0c       	mov	r12,0
8000fe08:	fe b0 f3 f4 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabRTvio", main_tasks->tasks[0].rt_violations);
8000fe0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fe10:	70 e8       	ld.w	r8,r8[0x38]
8000fe12:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000fe16:	f0 16 00 0f 	mcall	r6[60]
8000fe1a:	18 98       	mov	r8,r12
8000fe1c:	0a 99       	mov	r9,r5
8000fe1e:	fe ca 00 da 	sub	r10,pc,218
8000fe22:	10 9b       	mov	r11,r8
8000fe24:	30 0c       	mov	r12,0
8000fe26:	fe b0 f3 e5 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>

	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "baroAvgDelay", main_tasks->tasks[1].delay_avg);
8000fe2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fe2e:	71 88       	ld.w	r8,r8[0x60]
8000fe30:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000fe34:	f0 16 00 0f 	mcall	r6[60]
8000fe38:	18 98       	mov	r8,r12
8000fe3a:	0a 99       	mov	r9,r5
8000fe3c:	fe ca 00 ec 	sub	r10,pc,236
8000fe40:	10 9b       	mov	r11,r8
8000fe42:	30 0c       	mov	r12,0
8000fe44:	fe b0 f3 d6 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>


	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imuExTime", main_tasks->tasks[0].execution_time);
8000fe48:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fe4c:	70 a8       	ld.w	r8,r8[0x28]
8000fe4e:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000fe52:	f0 16 00 0f 	mcall	r6[60]
8000fe56:	18 98       	mov	r8,r12
8000fe58:	0a 99       	mov	r9,r5
8000fe5a:	fe ca 00 fa 	sub	r10,pc,250
8000fe5e:	10 9b       	mov	r11,r8
8000fe60:	30 0c       	mov	r12,0
8000fe62:	fe b0 f3 c7 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "navExTime", main_tasks->tasks[3].execution_time);
8000fe66:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fe6a:	f0 f8 00 b8 	ld.w	r8,r8[184]
8000fe6e:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000fe72:	f0 16 00 0f 	mcall	r6[60]
8000fe76:	18 98       	mov	r8,r12
8000fe78:	0a 99       	mov	r9,r5
8000fe7a:	fe ca 01 0e 	sub	r10,pc,270
8000fe7e:	10 9b       	mov	r11,r8
8000fe80:	30 0c       	mov	r12,0
8000fe82:	fe b0 f3 b7 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imu_dt", get_central_data()->imu1.dt);
8000fe86:	f0 16 00 33 	mcall	r6[204]
8000fe8a:	18 98       	mov	r8,r12
8000fe8c:	f0 f5 01 40 	ld.w	r5,r8[320]
8000fe90:	f0 16 00 0f 	mcall	r6[60]
8000fe94:	18 98       	mov	r8,r12
8000fe96:	0a 99       	mov	r9,r5
8000fe98:	fe ca 01 20 	sub	r10,pc,288
8000fe9c:	10 9b       	mov	r11,r8
8000fe9e:	30 0c       	mov	r12,0
8000fea0:	fe b0 f3 a8 	rcall	8000e5f0 <mavlink_msg_named_value_float_send>

	
	main_tasks->tasks[1].rt_violations=0;
8000fea4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fea8:	30 09       	mov	r9,0
8000feaa:	f1 49 00 68 	st.w	r8[104],r9
	main_tasks->tasks[1].delay_max=0;
8000feae:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000feb2:	30 09       	mov	r9,0
8000feb4:	f1 49 00 5c 	st.w	r8[92],r9

}
8000feb8:	2f fd       	sub	sp,-4
8000feba:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000febe:	00 00       	add	r0,r0
8000fec0:	80 00       	ld.sh	r0,r0[0x0]
8000fec2:	fc 0e       	*unknown*
8000fec4:	53 69       	stdsp	sp[0xd8],r9
8000fec6:	6d 5f       	ld.w	pc,r6[0x54]
8000fec8:	6d 6f       	ld.w	pc,r6[0x58]
8000feca:	64 65       	ld.w	r5,r2[0x18]
8000fecc:	00 00       	add	r0,r0
8000fece:	00 00       	add	r0,r0
8000fed0:	52 6f       	stdsp	sp[0x98],pc
8000fed2:	6c 6c       	ld.w	r12,r6[0x18]
8000fed4:	52 50       	stdsp	sp[0x94],r0
8000fed6:	69 64       	ld.w	r4,r4[0x58]
8000fed8:	5f 50       	srlt	r0
8000feda:	5f 47       	srge	r7
8000fedc:	00 00       	add	r0,r0
8000fede:	00 00       	add	r0,r0
8000fee0:	52 6f       	stdsp	sp[0x98],pc
8000fee2:	6c 6c       	ld.w	r12,r6[0x18]
8000fee4:	52 50       	stdsp	sp[0x94],r0
8000fee6:	69 64       	ld.w	r4,r4[0x58]
8000fee8:	5f 49       	srge	r9
8000feea:	5f 50       	srlt	r0
8000feec:	73 74       	ld.w	r4,r9[0x5c]
8000feee:	47 00       	lddsp	r0,sp[0x1c0]
8000fef0:	52 6f       	stdsp	sp[0x98],pc
8000fef2:	6c 6c       	ld.w	r12,r6[0x18]
8000fef4:	52 50       	stdsp	sp[0x94],r0
8000fef6:	69 64       	ld.w	r4,r4[0x58]
8000fef8:	5f 49       	srge	r9
8000fefa:	5f 50       	srlt	r0
8000fefc:	72 65       	ld.w	r5,r9[0x18]
8000fefe:	47 00       	lddsp	r0,sp[0x1c0]
8000ff00:	52 6f       	stdsp	sp[0x98],pc
8000ff02:	6c 6c       	ld.w	r12,r6[0x18]
8000ff04:	52 50       	stdsp	sp[0x94],r0
8000ff06:	69 64       	ld.w	r4,r4[0x58]
8000ff08:	5f 44       	srge	r4
8000ff0a:	5f 47       	srge	r7
8000ff0c:	61 69       	ld.w	r9,r0[0x58]
8000ff0e:	6e 00       	ld.w	r0,r7[0x0]
8000ff10:	52 6f       	stdsp	sp[0x98],pc
8000ff12:	6c 6c       	ld.w	r12,r6[0x18]
8000ff14:	41 50       	lddsp	r0,sp[0x54]
8000ff16:	69 64       	ld.w	r4,r4[0x58]
8000ff18:	5f 50       	srlt	r0
8000ff1a:	5f 47       	srge	r7
8000ff1c:	00 00       	add	r0,r0
8000ff1e:	00 00       	add	r0,r0
8000ff20:	52 6f       	stdsp	sp[0x98],pc
8000ff22:	6c 6c       	ld.w	r12,r6[0x18]
8000ff24:	41 50       	lddsp	r0,sp[0x54]
8000ff26:	69 64       	ld.w	r4,r4[0x58]
8000ff28:	5f 49       	srge	r9
8000ff2a:	5f 50       	srlt	r0
8000ff2c:	73 74       	ld.w	r4,r9[0x5c]
8000ff2e:	47 00       	lddsp	r0,sp[0x1c0]
8000ff30:	52 6f       	stdsp	sp[0x98],pc
8000ff32:	6c 6c       	ld.w	r12,r6[0x18]
8000ff34:	41 50       	lddsp	r0,sp[0x54]
8000ff36:	69 64       	ld.w	r4,r4[0x58]
8000ff38:	5f 49       	srge	r9
8000ff3a:	5f 50       	srlt	r0
8000ff3c:	72 65       	ld.w	r5,r9[0x18]
8000ff3e:	47 00       	lddsp	r0,sp[0x1c0]
8000ff40:	52 6f       	stdsp	sp[0x98],pc
8000ff42:	6c 6c       	ld.w	r12,r6[0x18]
8000ff44:	41 50       	lddsp	r0,sp[0x54]
8000ff46:	69 64       	ld.w	r4,r4[0x58]
8000ff48:	5f 44       	srge	r4
8000ff4a:	5f 47       	srge	r7
8000ff4c:	61 69       	ld.w	r9,r0[0x58]
8000ff4e:	6e 00       	ld.w	r0,r7[0x0]
8000ff50:	50 69       	stdsp	sp[0x18],r9
8000ff52:	74 63       	ld.w	r3,r10[0x18]
8000ff54:	68 52       	ld.w	r2,r4[0x14]
8000ff56:	50 69       	stdsp	sp[0x18],r9
8000ff58:	64 5f       	ld.w	pc,r2[0x14]
8000ff5a:	50 5f       	stdsp	sp[0x14],pc
8000ff5c:	47 00       	lddsp	r0,sp[0x1c0]
8000ff5e:	00 00       	add	r0,r0
8000ff60:	50 69       	stdsp	sp[0x18],r9
8000ff62:	74 63       	ld.w	r3,r10[0x18]
8000ff64:	68 52       	ld.w	r2,r4[0x14]
8000ff66:	50 69       	stdsp	sp[0x18],r9
8000ff68:	64 5f       	ld.w	pc,r2[0x14]
8000ff6a:	49 5f       	lddpc	pc,8000ffbc <send_rt_stats+0x23c>
8000ff6c:	50 73       	stdsp	sp[0x1c],r3
8000ff6e:	74 47       	ld.w	r7,r10[0x10]
8000ff70:	00 00       	add	r0,r0
8000ff72:	00 00       	add	r0,r0
8000ff74:	50 69       	stdsp	sp[0x18],r9
8000ff76:	74 63       	ld.w	r3,r10[0x18]
8000ff78:	68 52       	ld.w	r2,r4[0x14]
8000ff7a:	50 69       	stdsp	sp[0x18],r9
8000ff7c:	64 5f       	ld.w	pc,r2[0x14]
8000ff7e:	49 5f       	lddpc	pc,8000ffd0 <send_rt_stats+0x250>
8000ff80:	50 72       	stdsp	sp[0x1c],r2
8000ff82:	65 47       	ld.w	r7,r2[0x50]
8000ff84:	00 00       	add	r0,r0
8000ff86:	00 00       	add	r0,r0
8000ff88:	50 69       	stdsp	sp[0x18],r9
8000ff8a:	74 63       	ld.w	r3,r10[0x18]
8000ff8c:	68 52       	ld.w	r2,r4[0x14]
8000ff8e:	50 69       	stdsp	sp[0x18],r9
8000ff90:	64 5f       	ld.w	pc,r2[0x14]
8000ff92:	44 5f       	lddsp	pc,sp[0x114]
8000ff94:	47 61       	lddsp	r1,sp[0x1d8]
8000ff96:	69 6e       	ld.w	lr,r4[0x58]
8000ff98:	00 00       	add	r0,r0
8000ff9a:	00 00       	add	r0,r0
8000ff9c:	50 69       	stdsp	sp[0x18],r9
8000ff9e:	74 63       	ld.w	r3,r10[0x18]
8000ffa0:	68 41       	ld.w	r1,r4[0x10]
8000ffa2:	50 69       	stdsp	sp[0x18],r9
8000ffa4:	64 5f       	ld.w	pc,r2[0x14]
8000ffa6:	50 5f       	stdsp	sp[0x14],pc
8000ffa8:	47 00       	lddsp	r0,sp[0x1c0]
8000ffaa:	00 00       	add	r0,r0
8000ffac:	50 69       	stdsp	sp[0x18],r9
8000ffae:	74 63       	ld.w	r3,r10[0x18]
8000ffb0:	68 41       	ld.w	r1,r4[0x10]
8000ffb2:	50 69       	stdsp	sp[0x18],r9
8000ffb4:	64 5f       	ld.w	pc,r2[0x14]
8000ffb6:	49 5f       	lddpc	pc,80010008 <send_rt_stats+0x288>
8000ffb8:	50 73       	stdsp	sp[0x1c],r3
8000ffba:	74 47       	ld.w	r7,r10[0x10]
8000ffbc:	00 00       	add	r0,r0
8000ffbe:	00 00       	add	r0,r0
8000ffc0:	50 69       	stdsp	sp[0x18],r9
8000ffc2:	74 63       	ld.w	r3,r10[0x18]
8000ffc4:	68 41       	ld.w	r1,r4[0x10]
8000ffc6:	50 69       	stdsp	sp[0x18],r9
8000ffc8:	64 5f       	ld.w	pc,r2[0x14]
8000ffca:	49 5f       	lddpc	pc,8001001c <send_rt_stats+0x29c>
8000ffcc:	50 72       	stdsp	sp[0x1c],r2
8000ffce:	65 47       	ld.w	r7,r2[0x50]
8000ffd0:	00 00       	add	r0,r0
8000ffd2:	00 00       	add	r0,r0
8000ffd4:	50 69       	stdsp	sp[0x18],r9
8000ffd6:	74 63       	ld.w	r3,r10[0x18]
8000ffd8:	68 41       	ld.w	r1,r4[0x10]
8000ffda:	50 69       	stdsp	sp[0x18],r9
8000ffdc:	64 5f       	ld.w	pc,r2[0x14]
8000ffde:	44 5f       	lddsp	pc,sp[0x114]
8000ffe0:	47 61       	lddsp	r1,sp[0x1d8]
8000ffe2:	69 6e       	ld.w	lr,r4[0x58]
8000ffe4:	00 00       	add	r0,r0
8000ffe6:	00 00       	add	r0,r0
8000ffe8:	59 61       	cp.w	r1,22
8000ffea:	77 52       	ld.w	r2,r11[0x54]
8000ffec:	50 69       	stdsp	sp[0x18],r9
8000ffee:	64 5f       	ld.w	pc,r2[0x14]
8000fff0:	50 5f       	stdsp	sp[0x14],pc
8000fff2:	47 00       	lddsp	r0,sp[0x1c0]
8000fff4:	59 61       	cp.w	r1,22
8000fff6:	77 52       	ld.w	r2,r11[0x54]
8000fff8:	50 69       	stdsp	sp[0x18],r9
8000fffa:	64 5f       	ld.w	pc,r2[0x14]
8000fffc:	49 5f       	lddpc	pc,80010050 <send_rt_stats+0x2d0>
8000fffe:	50 73       	stdsp	sp[0x1c],r3
80010000:	74 47       	ld.w	r7,r10[0x10]
80010002:	00 00       	add	r0,r0
80010004:	59 61       	cp.w	r1,22
80010006:	77 52       	ld.w	r2,r11[0x54]
80010008:	50 69       	stdsp	sp[0x18],r9
8001000a:	64 5f       	ld.w	pc,r2[0x14]
8001000c:	49 5f       	lddpc	pc,80010060 <send_rt_stats+0x2e0>
8001000e:	50 72       	stdsp	sp[0x1c],r2
80010010:	65 47       	ld.w	r7,r2[0x50]
80010012:	00 00       	add	r0,r0
80010014:	59 61       	cp.w	r1,22
80010016:	77 52       	ld.w	r2,r11[0x54]
80010018:	50 69       	stdsp	sp[0x18],r9
8001001a:	64 5f       	ld.w	pc,r2[0x14]
8001001c:	44 5f       	lddsp	pc,sp[0x114]
8001001e:	47 61       	lddsp	r1,sp[0x1d8]
80010020:	69 6e       	ld.w	lr,r4[0x58]
80010022:	00 00       	add	r0,r0
80010024:	59 61       	cp.w	r1,22
80010026:	77 41       	ld.w	r1,r11[0x50]
80010028:	50 69       	stdsp	sp[0x18],r9
8001002a:	64 5f       	ld.w	pc,r2[0x14]
8001002c:	50 5f       	stdsp	sp[0x14],pc
8001002e:	47 00       	lddsp	r0,sp[0x1c0]
80010030:	59 61       	cp.w	r1,22
80010032:	77 41       	ld.w	r1,r11[0x50]
80010034:	50 69       	stdsp	sp[0x18],r9
80010036:	64 5f       	ld.w	pc,r2[0x14]
80010038:	49 5f       	lddpc	pc,8001008c <send_rt_stats+0x30c>
8001003a:	50 73       	stdsp	sp[0x1c],r3
8001003c:	74 47       	ld.w	r7,r10[0x10]
8001003e:	00 00       	add	r0,r0
80010040:	59 61       	cp.w	r1,22
80010042:	77 41       	ld.w	r1,r11[0x50]
80010044:	50 69       	stdsp	sp[0x18],r9
80010046:	64 5f       	ld.w	pc,r2[0x14]
80010048:	49 5f       	lddpc	pc,8001009c <send_rt_stats+0x31c>
8001004a:	50 72       	stdsp	sp[0x1c],r2
8001004c:	65 47       	ld.w	r7,r2[0x50]
8001004e:	00 00       	add	r0,r0
80010050:	59 61       	cp.w	r1,22
80010052:	77 41       	ld.w	r1,r11[0x50]
80010054:	50 69       	stdsp	sp[0x18],r9
80010056:	64 5f       	ld.w	pc,r2[0x14]
80010058:	44 5f       	lddsp	pc,sp[0x114]
8001005a:	47 61       	lddsp	r1,sp[0x1d8]
8001005c:	69 6e       	ld.w	lr,r4[0x58]
8001005e:	00 00       	add	r0,r0
80010060:	52 6f       	stdsp	sp[0x98],pc
80010062:	6c 6c       	ld.w	r12,r6[0x18]
80010064:	56 50       	stdsp	sp[0x194],r0
80010066:	69 64       	ld.w	r4,r4[0x58]
80010068:	5f 50       	srlt	r0
8001006a:	5f 47       	srge	r7
8001006c:	00 00       	add	r0,r0
8001006e:	00 00       	add	r0,r0
80010070:	52 6f       	stdsp	sp[0x98],pc
80010072:	6c 6c       	ld.w	r12,r6[0x18]
80010074:	56 50       	stdsp	sp[0x194],r0
80010076:	69 64       	ld.w	r4,r4[0x58]
80010078:	5f 49       	srge	r9
8001007a:	5f 50       	srlt	r0
8001007c:	73 74       	ld.w	r4,r9[0x5c]
8001007e:	47 00       	lddsp	r0,sp[0x1c0]
80010080:	52 6f       	stdsp	sp[0x98],pc
80010082:	6c 6c       	ld.w	r12,r6[0x18]
80010084:	56 50       	stdsp	sp[0x194],r0
80010086:	69 64       	ld.w	r4,r4[0x58]
80010088:	5f 49       	srge	r9
8001008a:	5f 50       	srlt	r0
8001008c:	72 65       	ld.w	r5,r9[0x18]
8001008e:	47 00       	lddsp	r0,sp[0x1c0]
80010090:	52 6f       	stdsp	sp[0x98],pc
80010092:	6c 6c       	ld.w	r12,r6[0x18]
80010094:	56 50       	stdsp	sp[0x194],r0
80010096:	69 64       	ld.w	r4,r4[0x58]
80010098:	5f 44       	srge	r4
8001009a:	5f 47       	srge	r7
8001009c:	61 69       	ld.w	r9,r0[0x58]
8001009e:	6e 00       	ld.w	r0,r7[0x0]
800100a0:	50 69       	stdsp	sp[0x18],r9
800100a2:	74 63       	ld.w	r3,r10[0x18]
800100a4:	68 56       	ld.w	r6,r4[0x14]
800100a6:	50 69       	stdsp	sp[0x18],r9
800100a8:	64 5f       	ld.w	pc,r2[0x14]
800100aa:	50 5f       	stdsp	sp[0x14],pc
800100ac:	47 00       	lddsp	r0,sp[0x1c0]
800100ae:	00 00       	add	r0,r0
800100b0:	50 69       	stdsp	sp[0x18],r9
800100b2:	74 63       	ld.w	r3,r10[0x18]
800100b4:	68 56       	ld.w	r6,r4[0x14]
800100b6:	50 69       	stdsp	sp[0x18],r9
800100b8:	64 5f       	ld.w	pc,r2[0x14]
800100ba:	49 5f       	lddpc	pc,8001010c <send_rt_stats+0x38c>
800100bc:	50 73       	stdsp	sp[0x1c],r3
800100be:	74 47       	ld.w	r7,r10[0x10]
800100c0:	00 00       	add	r0,r0
800100c2:	00 00       	add	r0,r0
800100c4:	50 69       	stdsp	sp[0x18],r9
800100c6:	74 63       	ld.w	r3,r10[0x18]
800100c8:	68 56       	ld.w	r6,r4[0x14]
800100ca:	50 69       	stdsp	sp[0x18],r9
800100cc:	64 5f       	ld.w	pc,r2[0x14]
800100ce:	49 5f       	lddpc	pc,80010120 <send_rt_stats+0x3a0>
800100d0:	50 72       	stdsp	sp[0x1c],r2
800100d2:	65 47       	ld.w	r7,r2[0x50]
800100d4:	00 00       	add	r0,r0
800100d6:	00 00       	add	r0,r0
800100d8:	50 69       	stdsp	sp[0x18],r9
800100da:	74 63       	ld.w	r3,r10[0x18]
800100dc:	68 56       	ld.w	r6,r4[0x14]
800100de:	50 69       	stdsp	sp[0x18],r9
800100e0:	64 5f       	ld.w	pc,r2[0x14]
800100e2:	44 5f       	lddsp	pc,sp[0x114]
800100e4:	47 61       	lddsp	r1,sp[0x1d8]
800100e6:	69 6e       	ld.w	lr,r4[0x58]
800100e8:	00 00       	add	r0,r0
800100ea:	00 00       	add	r0,r0
800100ec:	54 68       	stdsp	sp[0x118],r8
800100ee:	72 56       	ld.w	r6,r9[0x14]
800100f0:	50 69       	stdsp	sp[0x18],r9
800100f2:	64 5f       	ld.w	pc,r2[0x14]
800100f4:	50 5f       	stdsp	sp[0x14],pc
800100f6:	47 00       	lddsp	r0,sp[0x1c0]
800100f8:	54 68       	stdsp	sp[0x118],r8
800100fa:	72 56       	ld.w	r6,r9[0x14]
800100fc:	50 69       	stdsp	sp[0x18],r9
800100fe:	64 5f       	ld.w	pc,r2[0x14]
80010100:	49 5f       	lddpc	pc,80010154 <send_rt_stats+0x3d4>
80010102:	50 73       	stdsp	sp[0x1c],r3
80010104:	74 47       	ld.w	r7,r10[0x10]
80010106:	00 00       	add	r0,r0
80010108:	54 68       	stdsp	sp[0x118],r8
8001010a:	72 56       	ld.w	r6,r9[0x14]
8001010c:	50 69       	stdsp	sp[0x18],r9
8001010e:	64 5f       	ld.w	pc,r2[0x14]
80010110:	49 5f       	lddpc	pc,80010164 <send_rt_stats+0x3e4>
80010112:	50 72       	stdsp	sp[0x1c],r2
80010114:	65 47       	ld.w	r7,r2[0x50]
80010116:	00 00       	add	r0,r0
80010118:	54 68       	stdsp	sp[0x118],r8
8001011a:	72 56       	ld.w	r6,r9[0x14]
8001011c:	50 69       	stdsp	sp[0x18],r9
8001011e:	64 5f       	ld.w	pc,r2[0x14]
80010120:	44 5f       	lddsp	pc,sp[0x114]
80010122:	47 61       	lddsp	r1,sp[0x1d8]
80010124:	69 6e       	ld.w	lr,r4[0x58]
80010126:	00 00       	add	r0,r0
80010128:	54 68       	stdsp	sp[0x118],r8
8001012a:	72 56       	ld.w	r6,r9[0x14]
8001012c:	50 69       	stdsp	sp[0x18],r9
8001012e:	64 5f       	ld.w	pc,r2[0x14]
80010130:	44 5f       	lddsp	pc,sp[0x114]
80010132:	4c 50       	lddpc	r0,80010244 <send_rt_stats+0x4c4>
80010134:	46 00       	lddsp	r0,sp[0x180]
80010136:	00 00       	add	r0,r0
80010138:	54 68       	stdsp	sp[0x118],r8
8001013a:	72 56       	ld.w	r6,r9[0x14]
8001013c:	50 69       	stdsp	sp[0x18],r9
8001013e:	64 5f       	ld.w	pc,r2[0x14]
80010140:	73 6f       	ld.w	pc,r9[0x58]
80010142:	66 74       	ld.w	r4,r3[0x1c]
80010144:	00 00       	add	r0,r0
80010146:	00 00       	add	r0,r0
80010148:	51 46       	stdsp	sp[0x50],r6
8001014a:	5f 6b       	srmi	r11
8001014c:	70 5f       	ld.w	pc,r8[0x14]
8001014e:	61 63       	ld.w	r3,r0[0x58]
80010150:	63 00       	ld.w	r0,r1[0x40]
80010152:	00 00       	add	r0,r0
80010154:	51 46       	stdsp	sp[0x50],r6
80010156:	5f 6b       	srmi	r11
80010158:	70 5f       	ld.w	pc,r8[0x14]
8001015a:	6d 61       	ld.w	r1,r6[0x58]
8001015c:	67 00       	ld.w	r0,r3[0x40]
8001015e:	00 00       	add	r0,r0
80010160:	42 69       	lddsp	r9,sp[0x98]
80010162:	61 73       	ld.w	r3,r0[0x5c]
80010164:	5f 47       	srge	r7
80010166:	79 72       	ld.w	r2,r12[0x5c]
80010168:	6f 5f       	ld.w	pc,r7[0x54]
8001016a:	58 00       	cp.w	r0,0
8001016c:	42 69       	lddsp	r9,sp[0x98]
8001016e:	61 73       	ld.w	r3,r0[0x5c]
80010170:	5f 47       	srge	r7
80010172:	79 72       	ld.w	r2,r12[0x5c]
80010174:	6f 5f       	ld.w	pc,r7[0x54]
80010176:	59 00       	cp.w	r0,16
80010178:	42 69       	lddsp	r9,sp[0x98]
8001017a:	61 73       	ld.w	r3,r0[0x5c]
8001017c:	5f 47       	srge	r7
8001017e:	79 72       	ld.w	r2,r12[0x5c]
80010180:	6f 5f       	ld.w	pc,r7[0x54]
80010182:	5a 00       	cp.w	r0,-32
80010184:	42 69       	lddsp	r9,sp[0x98]
80010186:	61 73       	ld.w	r3,r0[0x5c]
80010188:	5f 41       	srge	r1
8001018a:	63 63       	ld.w	r3,r1[0x58]
8001018c:	5f 58       	srlt	r8
8001018e:	00 00       	add	r0,r0
80010190:	42 69       	lddsp	r9,sp[0x98]
80010192:	61 73       	ld.w	r3,r0[0x5c]
80010194:	5f 41       	srge	r1
80010196:	63 63       	ld.w	r3,r1[0x58]
80010198:	5f 59       	srlt	r9
8001019a:	00 00       	add	r0,r0
8001019c:	42 69       	lddsp	r9,sp[0x98]
8001019e:	61 73       	ld.w	r3,r0[0x5c]
800101a0:	5f 41       	srge	r1
800101a2:	63 63       	ld.w	r3,r1[0x58]
800101a4:	5f 5a       	srlt	r10
800101a6:	00 00       	add	r0,r0
800101a8:	42 69       	lddsp	r9,sp[0x98]
800101aa:	61 73       	ld.w	r3,r0[0x5c]
800101ac:	5f 4d       	srge	sp
800101ae:	61 67       	ld.w	r7,r0[0x58]
800101b0:	5f 58       	srlt	r8
800101b2:	00 00       	add	r0,r0
800101b4:	42 69       	lddsp	r9,sp[0x98]
800101b6:	61 73       	ld.w	r3,r0[0x5c]
800101b8:	5f 4d       	srge	sp
800101ba:	61 67       	ld.w	r7,r0[0x58]
800101bc:	5f 59       	srlt	r9
800101be:	00 00       	add	r0,r0
800101c0:	42 69       	lddsp	r9,sp[0x98]
800101c2:	61 73       	ld.w	r3,r0[0x5c]
800101c4:	5f 4d       	srge	sp
800101c6:	61 67       	ld.w	r7,r0[0x58]
800101c8:	5f 5a       	srlt	r10
800101ca:	00 00       	add	r0,r0
800101cc:	53 63       	stdsp	sp[0xd8],r3
800101ce:	61 6c       	ld.w	r12,r0[0x58]
800101d0:	65 5f       	ld.w	pc,r2[0x54]
800101d2:	47 79       	lddsp	r9,sp[0x1dc]
800101d4:	72 6f       	ld.w	pc,r9[0x18]
800101d6:	5f 58       	srlt	r8
800101d8:	00 00       	add	r0,r0
800101da:	00 00       	add	r0,r0
800101dc:	53 63       	stdsp	sp[0xd8],r3
800101de:	61 6c       	ld.w	r12,r0[0x58]
800101e0:	65 5f       	ld.w	pc,r2[0x54]
800101e2:	47 79       	lddsp	r9,sp[0x1dc]
800101e4:	72 6f       	ld.w	pc,r9[0x18]
800101e6:	5f 59       	srlt	r9
800101e8:	00 00       	add	r0,r0
800101ea:	00 00       	add	r0,r0
800101ec:	53 63       	stdsp	sp[0xd8],r3
800101ee:	61 6c       	ld.w	r12,r0[0x58]
800101f0:	65 5f       	ld.w	pc,r2[0x54]
800101f2:	47 79       	lddsp	r9,sp[0x1dc]
800101f4:	72 6f       	ld.w	pc,r9[0x18]
800101f6:	5f 5a       	srlt	r10
800101f8:	00 00       	add	r0,r0
800101fa:	00 00       	add	r0,r0
800101fc:	53 63       	stdsp	sp[0xd8],r3
800101fe:	61 6c       	ld.w	r12,r0[0x58]
80010200:	65 5f       	ld.w	pc,r2[0x54]
80010202:	41 63       	lddsp	r3,sp[0x58]
80010204:	63 5f       	ld.w	pc,r1[0x54]
80010206:	58 00       	cp.w	r0,0
80010208:	53 63       	stdsp	sp[0xd8],r3
8001020a:	61 6c       	ld.w	r12,r0[0x58]
8001020c:	65 5f       	ld.w	pc,r2[0x54]
8001020e:	41 63       	lddsp	r3,sp[0x58]
80010210:	63 5f       	ld.w	pc,r1[0x54]
80010212:	59 00       	cp.w	r0,16
80010214:	53 63       	stdsp	sp[0xd8],r3
80010216:	61 6c       	ld.w	r12,r0[0x58]
80010218:	65 5f       	ld.w	pc,r2[0x54]
8001021a:	41 63       	lddsp	r3,sp[0x58]
8001021c:	63 5f       	ld.w	pc,r1[0x54]
8001021e:	5a 00       	cp.w	r0,-32
80010220:	53 63       	stdsp	sp[0xd8],r3
80010222:	61 6c       	ld.w	r12,r0[0x58]
80010224:	65 5f       	ld.w	pc,r2[0x54]
80010226:	4d 61       	lddpc	r1,8001037c <add_PID_parameters+0xe4>
80010228:	67 5f       	ld.w	pc,r3[0x54]
8001022a:	58 00       	cp.w	r0,0
8001022c:	53 63       	stdsp	sp[0xd8],r3
8001022e:	61 6c       	ld.w	r12,r0[0x58]
80010230:	65 5f       	ld.w	pc,r2[0x54]
80010232:	4d 61       	lddpc	r1,80010388 <add_PID_parameters+0xf0>
80010234:	67 5f       	ld.w	pc,r3[0x54]
80010236:	59 00       	cp.w	r0,16
80010238:	53 63       	stdsp	sp[0xd8],r3
8001023a:	61 6c       	ld.w	r12,r0[0x58]
8001023c:	65 5f       	ld.w	pc,r2[0x54]
8001023e:	4d 61       	lddpc	r1,80010394 <add_PID_parameters+0xfc>
80010240:	67 5f       	ld.w	pc,r3[0x54]
80010242:	5a 00       	cp.w	r0,-32
80010244:	49 44       	lddpc	r4,80010294 <send_rt_stats+0x514>
80010246:	5f 53       	srlt	r3
80010248:	79 73       	ld.w	r3,r12[0x5c]
8001024a:	74 65       	ld.w	r5,r10[0x18]
8001024c:	6d 00       	ld.w	r0,r6[0x40]
8001024e:	00 00       	add	r0,r0
80010250:	49 44       	lddpc	r4,800102a0 <add_PID_parameters+0x8>
80010252:	5f 50       	srlt	r0
80010254:	6c 61       	ld.w	r1,r6[0x18]
80010256:	6e 6e       	ld.w	lr,r7[0x18]
80010258:	65 72       	ld.w	r2,r2[0x5c]
8001025a:	00 00       	add	r0,r0
8001025c:	50 6f       	stdsp	sp[0x18],pc
8001025e:	73 5f       	ld.w	pc,r9[0x54]
80010260:	6b 70       	ld.w	r0,r5[0x5c]
80010262:	5f 61       	srmi	r1
80010264:	6c 74       	ld.w	r4,r6[0x1c]
80010266:	00 00       	add	r0,r0
80010268:	50 6f       	stdsp	sp[0x18],pc
8001026a:	73 5f       	ld.w	pc,r9[0x54]
8001026c:	6b 70       	ld.w	r0,r5[0x5c]
8001026e:	5f 76       	srpl	r6
80010270:	65 6c       	ld.w	r12,r2[0x58]
80010272:	62 00       	ld.w	r0,r1[0x0]
80010274:	50 6f       	stdsp	sp[0x18],pc
80010276:	73 5f       	ld.w	pc,r9[0x54]
80010278:	6b 70       	ld.w	r0,r5[0x5c]
8001027a:	5f 70       	srpl	r0
8001027c:	6f 73       	ld.w	r3,r7[0x5c]
8001027e:	30 00       	mov	r0,0
80010280:	50 6f       	stdsp	sp[0x18],pc
80010282:	73 5f       	ld.w	pc,r9[0x54]
80010284:	6b 70       	ld.w	r0,r5[0x5c]
80010286:	5f 70       	srpl	r0
80010288:	6f 73       	ld.w	r3,r7[0x5c]
8001028a:	31 00       	mov	r0,16
8001028c:	50 6f       	stdsp	sp[0x18],pc
8001028e:	73 5f       	ld.w	pc,r9[0x54]
80010290:	6b 70       	ld.w	r0,r5[0x5c]
80010292:	5f 70       	srpl	r0
80010294:	6f 73       	ld.w	r3,r7[0x5c]
80010296:	32 00       	mov	r0,32

80010298 <add_PID_parameters>:


void add_PID_parameters(void) {
80010298:	eb cd 40 c0 	pushm	r6-r7,lr
8001029c:	1a 97       	mov	r7,sp
8001029e:	20 3d       	sub	sp,12
800102a0:	fe f6 04 cc 	ld.w	r6,pc[1228]
800102a4:	1e 26       	rsub	r6,pc
	Stabiliser_t* rate_stabiliser = &centralData->stabiliser_stack.rate_stabiliser;
800102a6:	ec f8 00 00 	ld.w	r8,r6[0]
800102aa:	70 08       	ld.w	r8,r8[0x0]
800102ac:	f0 c8 fe 60 	sub	r8,r8,-416
800102b0:	ef 48 ff f4 	st.w	r7[-12],r8
	Stabiliser_t* attitude_stabiliser = &centralData->stabiliser_stack.attitude_stabiliser;
800102b4:	ec f8 00 00 	ld.w	r8,r6[0]
800102b8:	70 08       	ld.w	r8,r8[0x0]
800102ba:	f0 c8 fd 24 	sub	r8,r8,-732
800102be:	ef 48 ff f8 	st.w	r7[-8],r8
	Stabiliser_t* velocity_stabiliser= &centralData->stabiliser_stack.velocity_stabiliser;
800102c2:	ec f8 00 00 	ld.w	r8,r6[0]
800102c6:	70 08       	ld.w	r8,r8[0x0]
800102c8:	f0 c8 fb e8 	sub	r8,r8,-1048
800102cc:	ef 48 ff fc 	st.w	r7[-4],r8

	
	add_parameter_int32(&centralData->simulation_mode, "Sim_mode");
800102d0:	ec f8 00 00 	ld.w	r8,r6[0]
800102d4:	70 08       	ld.w	r8,r8[0x0]
800102d6:	f0 c8 ef 40 	sub	r8,r8,-4288
800102da:	fe cb 04 16 	sub	r11,pc,1046
800102de:	10 9c       	mov	r12,r8
800102e0:	f0 16 02 03 	mcall	r6[2060]
	// Roll rate PID
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].p_gain, "RollRPid_P_G");
800102e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800102e8:	fe cb 04 18 	sub	r11,pc,1048
800102ec:	10 9c       	mov	r12,r8
800102ee:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].clip_max, "RollRPid_P_CLmx");
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].clip_min, "RollRPid_P_CLmn");
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].integrator.clip, "RollRPid_I_CLip");
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].integrator.postgain, "RollRPid_I_PstG");
800102f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800102f6:	2f 08       	sub	r8,-16
800102f8:	fe cb 04 18 	sub	r11,pc,1048
800102fc:	10 9c       	mov	r12,r8
800102fe:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].integrator.pregain, "RollRPid_I_PreG");
80010302:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010306:	2f 48       	sub	r8,-12
80010308:	fe cb 04 18 	sub	r11,pc,1048
8001030c:	10 9c       	mov	r12,r8
8001030e:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].differentiator.clip, "RollRPid_D_Clip");
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].differentiator.gain, "RollRPid_D_Gain");
80010312:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010316:	2e 08       	sub	r8,-32
80010318:	fe cb 04 18 	sub	r11,pc,1048
8001031c:	10 9c       	mov	r12,r8
8001031e:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].differentiator.LPF, "RollRPid_D_LPF");
	
	// Roll attitude PID
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].p_gain, "RollAPid_P_G");
80010322:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010326:	fe cb 04 16 	sub	r11,pc,1046
8001032a:	10 9c       	mov	r12,r8
8001032c:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].clip_max, "RollAPid_P_CLmx");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].clip_min, "RollAPid_P_CLmn");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].integrator.clip, "RollAPid_I_CLip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].integrator.postgain, "RollAPid_I_PstG");
80010330:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010334:	2f 08       	sub	r8,-16
80010336:	fe cb 04 16 	sub	r11,pc,1046
8001033a:	10 9c       	mov	r12,r8
8001033c:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].integrator.pregain, "RollAPid_I_PreG");
80010340:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010344:	2f 48       	sub	r8,-12
80010346:	fe cb 04 16 	sub	r11,pc,1046
8001034a:	10 9c       	mov	r12,r8
8001034c:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].differentiator.clip, "RollAPid_D_Clip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].differentiator.gain, "RollAPid_D_Gain");
80010350:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010354:	2e 08       	sub	r8,-32
80010356:	fe cb 04 16 	sub	r11,pc,1046
8001035a:	10 9c       	mov	r12,r8
8001035c:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].differentiator.LPF, "RollAPid_D_LPF");

	// Pitch rate PID
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].p_gain, "PitchRPid_P_G");
80010360:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010364:	2b c8       	sub	r8,-68
80010366:	fe cb 04 16 	sub	r11,pc,1046
8001036a:	10 9c       	mov	r12,r8
8001036c:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].clip_max, "PitchRPid_P_CLmx");
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].clip_min, "PitchRPid_P_CLmn");
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].integrator.clip, "PitchRPid_I_CLip");
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].integrator.postgain, "PitchRPid_I_PstG");
80010370:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010374:	2a c8       	sub	r8,-84
80010376:	fe cb 04 16 	sub	r11,pc,1046
8001037a:	10 9c       	mov	r12,r8
8001037c:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].integrator.pregain, "PitchRPid_I_PreG");
80010380:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010384:	2b 08       	sub	r8,-80
80010386:	fe cb 04 12 	sub	r11,pc,1042
8001038a:	10 9c       	mov	r12,r8
8001038c:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].differentiator.clip, "PitchRPid_D_Clip");
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].differentiator.gain, "PitchRPid_D_Gain");
80010390:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010394:	29 c8       	sub	r8,-100
80010396:	fe cb 04 0e 	sub	r11,pc,1038
8001039a:	10 9c       	mov	r12,r8
8001039c:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].differentiator.LPF, "PitchRPid_D_LPF");
	
	// Pitch attitude PID
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].p_gain, "PitchAPid_P_G");
800103a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800103a4:	2b c8       	sub	r8,-68
800103a6:	fe cb 04 0a 	sub	r11,pc,1034
800103aa:	10 9c       	mov	r12,r8
800103ac:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].clip_max, "PitchAPid_P_CLmx");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].clip_min, "PitchAPid_P_CLmn");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].integrator.clip, "PitchAPid_I_CLip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].integrator.postgain, "PitchAPid_I_PstG");
800103b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800103b4:	2a c8       	sub	r8,-84
800103b6:	fe cb 04 0a 	sub	r11,pc,1034
800103ba:	10 9c       	mov	r12,r8
800103bc:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].integrator.pregain, "PitchAPid_I_PreG");
800103c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800103c4:	2b 08       	sub	r8,-80
800103c6:	fe cb 04 06 	sub	r11,pc,1030
800103ca:	10 9c       	mov	r12,r8
800103cc:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].differentiator.clip, "PitchAPid_D_Clip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].differentiator.gain, "PitchAPid_D_Gain");
800103d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800103d4:	29 c8       	sub	r8,-100
800103d6:	fe cb 04 02 	sub	r11,pc,1026
800103da:	10 9c       	mov	r12,r8
800103dc:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].differentiator.LPF, "PitchAPid_D_LPF");

	// Yaw rate PID
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].p_gain, "YawRPid_P_G");
800103e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800103e4:	f0 c8 ff 78 	sub	r8,r8,-136
800103e8:	fe cb 04 00 	sub	r11,pc,1024
800103ec:	10 9c       	mov	r12,r8
800103ee:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].clip_max, "YawRPid_P_CLmx");
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].clip_min, "YawRPid_P_CLmn");
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].integrator.clip, "YawRPid_I_CLip");
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].integrator.postgain, "YawRPid_I_PstG");
800103f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800103f6:	f0 c8 ff 68 	sub	r8,r8,-152
800103fa:	fe cb 04 06 	sub	r11,pc,1030
800103fe:	10 9c       	mov	r12,r8
80010400:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].integrator.pregain, "YawRPid_I_PreG");
80010404:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010408:	f0 c8 ff 6c 	sub	r8,r8,-148
8001040c:	fe cb 04 08 	sub	r11,pc,1032
80010410:	10 9c       	mov	r12,r8
80010412:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].differentiator.clip, "YawRPid_D_Clip");
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].differentiator.gain, "YawRPid_D_Gain");
80010416:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001041a:	f0 c8 ff 58 	sub	r8,r8,-168
8001041e:	fe cb 04 0a 	sub	r11,pc,1034
80010422:	10 9c       	mov	r12,r8
80010424:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].differentiator.LPF, "YawRPid_D_LPF");
	
	// Yaw attitude PID
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].p_gain, "YawAPid_P_G");
80010428:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001042c:	f0 c8 ff 78 	sub	r8,r8,-136
80010430:	fe cb 04 0c 	sub	r11,pc,1036
80010434:	10 9c       	mov	r12,r8
80010436:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].clip_max, "YawAPid_P_CLmx");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].clip_min, "YawAPid_P_CLmn");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].integrator.clip, "YawAPid_I_CLip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].integrator.postgain, "YawAPid_I_PstG");
8001043a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001043e:	f0 c8 ff 68 	sub	r8,r8,-152
80010442:	fe cb 04 12 	sub	r11,pc,1042
80010446:	10 9c       	mov	r12,r8
80010448:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].integrator.pregain, "YawAPid_I_PreG");
8001044c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010450:	f0 c8 ff 6c 	sub	r8,r8,-148
80010454:	fe cb 04 14 	sub	r11,pc,1044
80010458:	10 9c       	mov	r12,r8
8001045a:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.clip, "YawAPid_D_Clip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.gain, "YawAPid_D_Gain");
8001045e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010462:	f0 c8 ff 58 	sub	r8,r8,-168
80010466:	fe cb 04 16 	sub	r11,pc,1046
8001046a:	10 9c       	mov	r12,r8
8001046c:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.LPF, "YawAPid_D_LPF");


	// Roll velocity PID
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].p_gain, "RollVPid_P_G");
80010470:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010474:	fe cb 04 14 	sub	r11,pc,1044
80010478:	10 9c       	mov	r12,r8
8001047a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].integrator.postgain, "RollVPid_I_PstG");
8001047e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010482:	2f 08       	sub	r8,-16
80010484:	fe cb 04 14 	sub	r11,pc,1044
80010488:	10 9c       	mov	r12,r8
8001048a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].integrator.pregain, "RollVPid_I_PreG");
8001048e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010492:	2f 48       	sub	r8,-12
80010494:	fe cb 04 14 	sub	r11,pc,1044
80010498:	10 9c       	mov	r12,r8
8001049a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].differentiator.gain, "RollVPid_D_Gain");
8001049e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800104a2:	2e 08       	sub	r8,-32
800104a4:	fe cb 04 14 	sub	r11,pc,1044
800104a8:	10 9c       	mov	r12,r8
800104aa:	f0 16 00 0e 	mcall	r6[56]

	// Pitch velocity PID
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].p_gain, "PitchVPid_P_G");
800104ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800104b2:	2b c8       	sub	r8,-68
800104b4:	fe cb 04 14 	sub	r11,pc,1044
800104b8:	10 9c       	mov	r12,r8
800104ba:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].integrator.postgain, "PitchVPid_I_PstG");
800104be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800104c2:	2a c8       	sub	r8,-84
800104c4:	fe cb 04 14 	sub	r11,pc,1044
800104c8:	10 9c       	mov	r12,r8
800104ca:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].integrator.pregain, "PitchVPid_I_PreG");
800104ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800104d2:	2b 08       	sub	r8,-80
800104d4:	fe cb 04 10 	sub	r11,pc,1040
800104d8:	10 9c       	mov	r12,r8
800104da:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].differentiator.gain, "PitchVPid_D_Gain");
800104de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800104e2:	29 c8       	sub	r8,-100
800104e4:	fe cb 04 0c 	sub	r11,pc,1036
800104e8:	10 9c       	mov	r12,r8
800104ea:	f0 16 00 0e 	mcall	r6[56]

	// Thrust velocity PID
	add_parameter_float(&velocity_stabiliser->thrust_controller.p_gain, "ThrVPid_P_G");
800104ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800104f2:	f0 c8 ff 34 	sub	r8,r8,-204
800104f6:	fe cb 04 0a 	sub	r11,pc,1034
800104fa:	10 9c       	mov	r12,r8
800104fc:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.integrator.postgain, "ThrVPid_I_PstG");
80010500:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010504:	f0 c8 ff 24 	sub	r8,r8,-220
80010508:	fe cb 04 10 	sub	r11,pc,1040
8001050c:	10 9c       	mov	r12,r8
8001050e:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.integrator.pregain, "ThrVPid_I_PreG");
80010512:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010516:	f0 c8 ff 28 	sub	r8,r8,-216
8001051a:	fe cb 04 12 	sub	r11,pc,1042
8001051e:	10 9c       	mov	r12,r8
80010520:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.differentiator.gain, "ThrVPid_D_Gain");
80010524:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010528:	f0 c8 ff 14 	sub	r8,r8,-236
8001052c:	fe cb 04 14 	sub	r11,pc,1044
80010530:	10 9c       	mov	r12,r8
80010532:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.differentiator.LPF, "ThrVPid_D_LPF");
80010536:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001053a:	f0 c8 ff 0c 	sub	r8,r8,-244
8001053e:	fe cb 04 16 	sub	r11,pc,1046
80010542:	10 9c       	mov	r12,r8
80010544:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.soft_zone_width, "ThrVPid_soft");
80010548:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001054c:	f0 c8 fe f4 	sub	r8,r8,-268
80010550:	fe cb 04 18 	sub	r11,pc,1048
80010554:	10 9c       	mov	r12,r8
80010556:	f0 16 00 0e 	mcall	r6[56]

	// qfilter
	add_parameter_float(&centralData->imu1.attitude.kp, "QF_kp_acc");
8001055a:	ec f8 00 00 	ld.w	r8,r6[0]
8001055e:	70 08       	ld.w	r8,r8[0x0]
80010560:	f0 c8 ff 64 	sub	r8,r8,-156
80010564:	fe cb 04 1c 	sub	r11,pc,1052
80010568:	10 9c       	mov	r12,r8
8001056a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.kp_mag, "QF_kp_mag");
8001056e:	ec f8 00 00 	ld.w	r8,r6[0]
80010572:	70 08       	ld.w	r8,r8[0x0]
80010574:	f0 c8 ff 5c 	sub	r8,r8,-164
80010578:	fe cb 04 24 	sub	r11,pc,1060
8001057c:	10 9c       	mov	r12,r8
8001057e:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.gain, "YawAPid_D_Gain");
80010582:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010586:	f0 c8 ff 58 	sub	r8,r8,-168
8001058a:	fe cb 05 3a 	sub	r11,pc,1338
8001058e:	10 9c       	mov	r12,r8
80010590:	f0 16 00 0e 	mcall	r6[56]
	
	// Biaises
	add_parameter_float(&centralData->imu1.attitude.be[GYRO_OFFSET+X],"Bias_Gyro_X");
80010594:	ec f8 00 00 	ld.w	r8,r6[0]
80010598:	70 08       	ld.w	r8,r8[0x0]
8001059a:	2d 08       	sub	r8,-48
8001059c:	fe cb 04 3c 	sub	r11,pc,1084
800105a0:	10 9c       	mov	r12,r8
800105a2:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[GYRO_OFFSET+Y],"Bias_Gyro_Y");
800105a6:	ec f8 00 00 	ld.w	r8,r6[0]
800105aa:	70 08       	ld.w	r8,r8[0x0]
800105ac:	2c c8       	sub	r8,-52
800105ae:	fe cb 04 42 	sub	r11,pc,1090
800105b2:	10 9c       	mov	r12,r8
800105b4:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[GYRO_OFFSET+Z],"Bias_Gyro_Z");
800105b8:	ec f8 00 00 	ld.w	r8,r6[0]
800105bc:	70 08       	ld.w	r8,r8[0x0]
800105be:	2c 88       	sub	r8,-56
800105c0:	fe cb 04 48 	sub	r11,pc,1096
800105c4:	10 9c       	mov	r12,r8
800105c6:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.attitude.be[ACC_OFFSET+X],"Bias_Acc_X");
800105ca:	ec f8 00 00 	ld.w	r8,r6[0]
800105ce:	70 08       	ld.w	r8,r8[0x0]
800105d0:	2c 48       	sub	r8,-60
800105d2:	fe cb 04 4e 	sub	r11,pc,1102
800105d6:	10 9c       	mov	r12,r8
800105d8:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[ACC_OFFSET+Y],"Bias_Acc_Y");
800105dc:	ec f8 00 00 	ld.w	r8,r6[0]
800105e0:	70 08       	ld.w	r8,r8[0x0]
800105e2:	2c 08       	sub	r8,-64
800105e4:	fe cb 04 54 	sub	r11,pc,1108
800105e8:	10 9c       	mov	r12,r8
800105ea:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[ACC_OFFSET+Z],"Bias_Acc_Z");
800105ee:	ec f8 00 00 	ld.w	r8,r6[0]
800105f2:	70 08       	ld.w	r8,r8[0x0]
800105f4:	2b c8       	sub	r8,-68
800105f6:	fe cb 04 5a 	sub	r11,pc,1114
800105fa:	10 9c       	mov	r12,r8
800105fc:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.attitude.be[COMPASS_OFFSET+X],"Bias_Mag_X");
80010600:	ec f8 00 00 	ld.w	r8,r6[0]
80010604:	70 08       	ld.w	r8,r8[0x0]
80010606:	2b 88       	sub	r8,-72
80010608:	fe cb 04 60 	sub	r11,pc,1120
8001060c:	10 9c       	mov	r12,r8
8001060e:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[COMPASS_OFFSET+Y],"Bias_Mag_Y");
80010612:	ec f8 00 00 	ld.w	r8,r6[0]
80010616:	70 08       	ld.w	r8,r8[0x0]
80010618:	2b 48       	sub	r8,-76
8001061a:	fe cb 04 66 	sub	r11,pc,1126
8001061e:	10 9c       	mov	r12,r8
80010620:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[COMPASS_OFFSET+Z],"Bias_Mag_Z");
80010624:	ec f8 00 00 	ld.w	r8,r6[0]
80010628:	70 08       	ld.w	r8,r8[0x0]
8001062a:	2b 08       	sub	r8,-80
8001062c:	fe cb 04 6c 	sub	r11,pc,1132
80010630:	10 9c       	mov	r12,r8
80010632:	f0 16 00 0e 	mcall	r6[56]
	
	// Scale factor
	add_parameter_float(&centralData->imu1.raw_scale[GYRO_OFFSET+X],"Scale_Gyro_X");
80010636:	ec f8 00 00 	ld.w	r8,r6[0]
8001063a:	70 08       	ld.w	r8,r8[0x0]
8001063c:	f0 c8 fe ec 	sub	r8,r8,-276
80010640:	fe cb 04 74 	sub	r11,pc,1140
80010644:	10 9c       	mov	r12,r8
80010646:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[GYRO_OFFSET+Y],"Scale_Gyro_Y");
8001064a:	ec f8 00 00 	ld.w	r8,r6[0]
8001064e:	70 08       	ld.w	r8,r8[0x0]
80010650:	f0 c8 fe e8 	sub	r8,r8,-280
80010654:	fe cb 04 78 	sub	r11,pc,1144
80010658:	10 9c       	mov	r12,r8
8001065a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[GYRO_OFFSET+Z],"Scale_Gyro_Z");
8001065e:	ec f8 00 00 	ld.w	r8,r6[0]
80010662:	70 08       	ld.w	r8,r8[0x0]
80010664:	f0 c8 fe e4 	sub	r8,r8,-284
80010668:	fe cb 04 7c 	sub	r11,pc,1148
8001066c:	10 9c       	mov	r12,r8
8001066e:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.raw_scale[ACC_OFFSET+X],"Scale_Acc_X");
80010672:	ec f8 00 00 	ld.w	r8,r6[0]
80010676:	70 08       	ld.w	r8,r8[0x0]
80010678:	f0 c8 fe e0 	sub	r8,r8,-288
8001067c:	fe cb 04 80 	sub	r11,pc,1152
80010680:	10 9c       	mov	r12,r8
80010682:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[ACC_OFFSET+Y],"Scale_Acc_Y");
80010686:	ec f8 00 00 	ld.w	r8,r6[0]
8001068a:	70 08       	ld.w	r8,r8[0x0]
8001068c:	f0 c8 fe dc 	sub	r8,r8,-292
80010690:	fe cb 04 88 	sub	r11,pc,1160
80010694:	10 9c       	mov	r12,r8
80010696:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[ACC_OFFSET+Z],"Scale_Acc_Z");
8001069a:	ec f8 00 00 	ld.w	r8,r6[0]
8001069e:	70 08       	ld.w	r8,r8[0x0]
800106a0:	f0 c8 fe d8 	sub	r8,r8,-296
800106a4:	fe cb 04 90 	sub	r11,pc,1168
800106a8:	10 9c       	mov	r12,r8
800106aa:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.raw_scale[COMPASS_OFFSET+X],"Scale_Mag_X");
800106ae:	ec f8 00 00 	ld.w	r8,r6[0]
800106b2:	70 08       	ld.w	r8,r8[0x0]
800106b4:	f0 c8 fe d4 	sub	r8,r8,-300
800106b8:	fe cb 04 98 	sub	r11,pc,1176
800106bc:	10 9c       	mov	r12,r8
800106be:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[COMPASS_OFFSET+Y],"Scale_Mag_Y");
800106c2:	ec f8 00 00 	ld.w	r8,r6[0]
800106c6:	70 08       	ld.w	r8,r8[0x0]
800106c8:	f0 c8 fe d0 	sub	r8,r8,-304
800106cc:	fe cb 04 a0 	sub	r11,pc,1184
800106d0:	10 9c       	mov	r12,r8
800106d2:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[COMPASS_OFFSET+Z],"Scale_Mag_Z");
800106d6:	ec f8 00 00 	ld.w	r8,r6[0]
800106da:	70 08       	ld.w	r8,r8[0x0]
800106dc:	f0 c8 fe cc 	sub	r8,r8,-308
800106e0:	fe cb 04 a8 	sub	r11,pc,1192
800106e4:	10 9c       	mov	r12,r8
800106e6:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_uint8(&(mavlink_system.sysid),"ID_System");
800106ea:	fe cb 04 a6 	sub	r11,pc,1190
800106ee:	ec fc 00 70 	ld.w	r12,r6[112]
800106f2:	f0 16 00 df 	mcall	r6[892]
	add_parameter_uint8(&(mavlink_mission_planner.sysid),"ID_Planner");
800106f6:	fe cb 04 a6 	sub	r11,pc,1190
800106fa:	ec fc 00 c8 	ld.w	r12,r6[200]
800106fe:	f0 16 00 df 	mcall	r6[892]

	add_parameter_float(&centralData->position_estimator.kp_alt,"Pos_kp_alt");
80010702:	ec f8 00 00 	ld.w	r8,r6[0]
80010706:	70 08       	ld.w	r8,r8[0x0]
80010708:	f0 c8 f2 ac 	sub	r8,r8,-3412
8001070c:	fe cb 04 b0 	sub	r11,pc,1200
80010710:	10 9c       	mov	r12,r8
80010712:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_vel_baro,"Pos_kp_velb");
80010716:	ec f8 00 00 	ld.w	r8,r6[0]
8001071a:	70 08       	ld.w	r8,r8[0x0]
8001071c:	f0 c8 f2 a8 	sub	r8,r8,-3416
80010720:	fe cb 04 b8 	sub	r11,pc,1208
80010724:	10 9c       	mov	r12,r8
80010726:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_pos[0],"Pos_kp_pos0");
8001072a:	ec f8 00 00 	ld.w	r8,r6[0]
8001072e:	70 08       	ld.w	r8,r8[0x0]
80010730:	f0 c8 f2 b8 	sub	r8,r8,-3400
80010734:	fe cb 04 c0 	sub	r11,pc,1216
80010738:	10 9c       	mov	r12,r8
8001073a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_pos[1],"Pos_kp_pos1");
8001073e:	ec f8 00 00 	ld.w	r8,r6[0]
80010742:	70 08       	ld.w	r8,r8[0x0]
80010744:	f0 c8 f2 b4 	sub	r8,r8,-3404
80010748:	fe cb 04 c8 	sub	r11,pc,1224
8001074c:	10 9c       	mov	r12,r8
8001074e:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_pos[2],"Pos_kp_pos2");
80010752:	ec f8 00 00 	ld.w	r8,r6[0]
80010756:	70 08       	ld.w	r8,r8[0x0]
80010758:	f0 c8 f2 b0 	sub	r8,r8,-3408
8001075c:	fe cb 04 d0 	sub	r11,pc,1232
80010760:	10 9c       	mov	r12,r8
80010762:	f0 16 00 0e 	mcall	r6[56]
}
80010766:	2f dd       	sub	sp,-12
80010768:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001076c:	80 01       	ld.sh	r1,r0[0x0]
8001076e:	01 28       	ld.uh	r8,r0++

80010770 <control_waypoint_timeout>:


task_return_t control_waypoint_timeout () {
80010770:	eb cd 40 c0 	pushm	r6-r7,lr
80010774:	1a 97       	mov	r7,sp
80010776:	48 c6       	lddpc	r6,800107a4 <control_waypoint_timeout+0x34>
80010778:	1e 26       	rsub	r6,pc
	control_time_out_waypoint_msg(&(centralData->number_of_waypoints),&centralData->waypoint_receiving,&centralData->waypoint_sending);
8001077a:	ec f8 00 00 	ld.w	r8,r6[0]
8001077e:	70 08       	ld.w	r8,r8[0x0]
80010780:	f0 ca ef 4b 	sub	r10,r8,-4277
80010784:	ec f8 00 00 	ld.w	r8,r6[0]
80010788:	70 08       	ld.w	r8,r8[0x0]
8001078a:	f0 c9 ef 4a 	sub	r9,r8,-4278
8001078e:	ec f8 00 00 	ld.w	r8,r6[0]
80010792:	70 08       	ld.w	r8,r8[0x0]
80010794:	f0 c8 ef e4 	sub	r8,r8,-4124
80010798:	12 9b       	mov	r11,r9
8001079a:	10 9c       	mov	r12,r8
8001079c:	f0 16 02 0d 	mcall	r6[2100]
}
800107a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800107a4:	80 01       	ld.sh	r1,r0[0x0]
800107a6:	05 fc       	ld.ub	r12,r2[0x7]

800107a8 <handle_specific_messages>:

void handle_specific_messages (Mavlink_Received_t* rec) {
800107a8:	eb cd 40 c0 	pushm	r6-r7,lr
800107ac:	1a 97       	mov	r7,sp
800107ae:	20 1d       	sub	sp,4
800107b0:	fe f6 02 e0 	ld.w	r6,pc[736]
800107b4:	1e 26       	rsub	r6,pc
800107b6:	ef 4c ff fc 	st.w	r7[-4],r12
	if (rec->msg.sysid == MAVLINK_BASE_STATION_ID) {
800107ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800107be:	11 d9       	ld.ub	r9,r8[0x5]
800107c0:	3f f8       	mov	r8,-1
800107c2:	f0 09 18 00 	cp.b	r9,r8
800107c6:	e0 81 01 52 	brne	80010a6a <handle_specific_messages+0x2c2>
		switch(rec->msg.msgid) {
800107ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800107ce:	11 f8       	ld.ub	r8,r8[0x7]
800107d0:	20 b8       	sub	r8,11
800107d2:	e0 48 00 41 	cp.w	r8,65
800107d6:	e0 8b 01 57 	brhi	80010a84 <handle_specific_messages+0x2dc>
800107da:	fe c9 ff f6 	sub	r9,pc,-10
800107de:	f2 08 00 2f 	add	pc,r9,r8<<0x2
800107e2:	00 00       	add	r0,r0
800107e4:	e0 8f 01 25 	bral	80010a2e <handle_specific_messages+0x286>
800107e8:	e0 8f 01 50 	bral	80010a88 <handle_specific_messages+0x2e0>
800107ec:	e0 8f 01 4e 	bral	80010a88 <handle_specific_messages+0x2e0>
800107f0:	e0 8f 01 4c 	bral	80010a88 <handle_specific_messages+0x2e0>
800107f4:	e0 8f 01 4a 	bral	80010a88 <handle_specific_messages+0x2e0>
800107f8:	e0 8f 01 48 	bral	80010a88 <handle_specific_messages+0x2e0>
800107fc:	e0 8f 01 46 	bral	80010a88 <handle_specific_messages+0x2e0>
80010800:	e0 8f 01 44 	bral	80010a88 <handle_specific_messages+0x2e0>
80010804:	e0 8f 01 42 	bral	80010a88 <handle_specific_messages+0x2e0>
80010808:	e0 8f 01 40 	bral	80010a88 <handle_specific_messages+0x2e0>
8001080c:	e0 8f 01 3e 	bral	80010a88 <handle_specific_messages+0x2e0>
80010810:	e0 8f 01 3c 	bral	80010a88 <handle_specific_messages+0x2e0>
80010814:	e0 8f 01 3a 	bral	80010a88 <handle_specific_messages+0x2e0>
80010818:	e0 8f 01 38 	bral	80010a88 <handle_specific_messages+0x2e0>
8001081c:	e0 8f 01 36 	bral	80010a88 <handle_specific_messages+0x2e0>
80010820:	e0 8f 01 34 	bral	80010a88 <handle_specific_messages+0x2e0>
80010824:	e0 8f 01 32 	bral	80010a88 <handle_specific_messages+0x2e0>
80010828:	e0 8f 01 30 	bral	80010a88 <handle_specific_messages+0x2e0>
8001082c:	e0 8f 01 2e 	bral	80010a88 <handle_specific_messages+0x2e0>
80010830:	e0 8f 01 2c 	bral	80010a88 <handle_specific_messages+0x2e0>
80010834:	e0 8f 01 2a 	bral	80010a88 <handle_specific_messages+0x2e0>
80010838:	e0 8f 01 28 	bral	80010a88 <handle_specific_messages+0x2e0>
8001083c:	e0 8f 01 26 	bral	80010a88 <handle_specific_messages+0x2e0>
80010840:	e0 8f 01 24 	bral	80010a88 <handle_specific_messages+0x2e0>
80010844:	e0 8f 01 22 	bral	80010a88 <handle_specific_messages+0x2e0>
80010848:	e0 8f 01 20 	bral	80010a88 <handle_specific_messages+0x2e0>
8001084c:	e0 8f 01 1e 	bral	80010a88 <handle_specific_messages+0x2e0>
80010850:	e0 8f 01 1c 	bral	80010a88 <handle_specific_messages+0x2e0>
80010854:	e0 8f 00 4c 	bral	800108ec <handle_specific_messages+0x144>
80010858:	e0 8f 00 67 	bral	80010926 <handle_specific_messages+0x17e>
8001085c:	e0 8f 00 82 	bral	80010960 <handle_specific_messages+0x1b8>
80010860:	e0 8f 01 14 	bral	80010a88 <handle_specific_messages+0x2e0>
80010864:	e0 8f 00 92 	bral	80010988 <handle_specific_messages+0x1e0>
80010868:	e0 8f 00 ad 	bral	800109c2 <handle_specific_messages+0x21a>
8001086c:	e0 8f 00 c4 	bral	800109f4 <handle_specific_messages+0x24c>
80010870:	e0 8f 01 0c 	bral	80010a88 <handle_specific_messages+0x2e0>
80010874:	e0 8f 00 d1 	bral	80010a16 <handle_specific_messages+0x26e>
80010878:	e0 8f 01 08 	bral	80010a88 <handle_specific_messages+0x2e0>
8001087c:	e0 8f 01 06 	bral	80010a88 <handle_specific_messages+0x2e0>
80010880:	e0 8f 01 04 	bral	80010a88 <handle_specific_messages+0x2e0>
80010884:	e0 8f 01 02 	bral	80010a88 <handle_specific_messages+0x2e0>
80010888:	e0 8f 01 00 	bral	80010a88 <handle_specific_messages+0x2e0>
8001088c:	e0 8f 00 fe 	bral	80010a88 <handle_specific_messages+0x2e0>
80010890:	e0 8f 00 fc 	bral	80010a88 <handle_specific_messages+0x2e0>
80010894:	e0 8f 00 fa 	bral	80010a88 <handle_specific_messages+0x2e0>
80010898:	e0 8f 00 f8 	bral	80010a88 <handle_specific_messages+0x2e0>
8001089c:	e0 8f 00 f6 	bral	80010a88 <handle_specific_messages+0x2e0>
800108a0:	e0 8f 00 f4 	bral	80010a88 <handle_specific_messages+0x2e0>
800108a4:	e0 8f 00 f2 	bral	80010a88 <handle_specific_messages+0x2e0>
800108a8:	e0 8f 00 f0 	bral	80010a88 <handle_specific_messages+0x2e0>
800108ac:	e0 8f 00 ee 	bral	80010a88 <handle_specific_messages+0x2e0>
800108b0:	e0 8f 00 ec 	bral	80010a88 <handle_specific_messages+0x2e0>
800108b4:	e0 8f 00 ea 	bral	80010a88 <handle_specific_messages+0x2e0>
800108b8:	e0 8f 00 e8 	bral	80010a88 <handle_specific_messages+0x2e0>
800108bc:	e0 8f 00 e6 	bral	80010a88 <handle_specific_messages+0x2e0>
800108c0:	e0 8f 00 e4 	bral	80010a88 <handle_specific_messages+0x2e0>
800108c4:	e0 8f 00 e2 	bral	80010a88 <handle_specific_messages+0x2e0>
800108c8:	e0 8f 00 e0 	bral	80010a88 <handle_specific_messages+0x2e0>
800108cc:	e0 8f 00 de 	bral	80010a88 <handle_specific_messages+0x2e0>
800108d0:	e0 8f 00 dc 	bral	80010a88 <handle_specific_messages+0x2e0>
800108d4:	e0 8f 00 da 	bral	80010a88 <handle_specific_messages+0x2e0>
800108d8:	e0 8f 00 d8 	bral	80010a88 <handle_specific_messages+0x2e0>
800108dc:	e0 8f 00 d6 	bral	80010a88 <handle_specific_messages+0x2e0>
800108e0:	e0 8f 00 d4 	bral	80010a88 <handle_specific_messages+0x2e0>
800108e4:	e0 8f 00 d2 	bral	80010a88 <handle_specific_messages+0x2e0>
800108e8:	e0 8f 00 bb 	bral	80010a5e <handle_specific_messages+0x2b6>
				case MAVLINK_MSG_ID_MISSION_ITEM: { // 39
					suspend_downstream(500000);
800108ec:	e6 7c a1 20 	mov	r12,500000
800108f0:	f0 16 00 78 	mcall	r6[480]
					receive_waypoint(rec, centralData->waypoint_list, centralData->number_of_waypoints,&centralData->waypoint_receiving);
800108f4:	ec f8 00 00 	ld.w	r8,r6[0]
800108f8:	70 08       	ld.w	r8,r8[0x0]
800108fa:	f0 c9 ef 4a 	sub	r9,r8,-4278
800108fe:	ec f8 00 00 	ld.w	r8,r6[0]
80010902:	70 08       	ld.w	r8,r8[0x0]
80010904:	f1 08 10 1c 	ld.sh	r8,r8[4124]
80010908:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8001090c:	ec f8 00 00 	ld.w	r8,r6[0]
80010910:	70 08       	ld.w	r8,r8[0x0]
80010912:	f0 cb f1 f4 	sub	r11,r8,-3596
80010916:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001091a:	10 9c       	mov	r12,r8
8001091c:	f0 16 01 68 	mcall	r6[1440]
					flush_mavlink();
80010920:	f0 16 00 2d 	mcall	r6[180]
				}
				break;
80010924:	cb 38       	rjmp	80010a8a <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_MISSION_REQUEST : { // 40
					suspend_downstream(500000);
80010926:	e6 7c a1 20 	mov	r12,500000
8001092a:	f0 16 00 78 	mcall	r6[480]
					send_waypoint(rec, centralData->waypoint_list, centralData->number_of_waypoints,&centralData->waypoint_sending);
8001092e:	ec f8 00 00 	ld.w	r8,r6[0]
80010932:	70 08       	ld.w	r8,r8[0x0]
80010934:	f0 c9 ef 4b 	sub	r9,r8,-4277
80010938:	ec f8 00 00 	ld.w	r8,r6[0]
8001093c:	70 08       	ld.w	r8,r8[0x0]
8001093e:	f1 08 10 1c 	ld.sh	r8,r8[4124]
80010942:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80010946:	ec f8 00 00 	ld.w	r8,r6[0]
8001094a:	70 08       	ld.w	r8,r8[0x0]
8001094c:	f0 cb f1 f4 	sub	r11,r8,-3596
80010950:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010954:	10 9c       	mov	r12,r8
80010956:	f0 16 01 89 	mcall	r6[1572]
					flush_mavlink();
8001095a:	f0 16 00 2d 	mcall	r6[180]
				}
				break;
8001095e:	c9 68       	rjmp	80010a8a <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_MISSION_SET_CURRENT : { // 41
					set_current_wp(rec, &(centralData->waypoint_list), centralData->number_of_waypoints);
80010960:	ec f8 00 00 	ld.w	r8,r6[0]
80010964:	70 08       	ld.w	r8,r8[0x0]
80010966:	f1 08 10 1c 	ld.sh	r8,r8[4124]
8001096a:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8001096e:	ec f8 00 00 	ld.w	r8,r6[0]
80010972:	70 08       	ld.w	r8,r8[0x0]
80010974:	f0 c8 f1 f4 	sub	r8,r8,-3596
80010978:	10 99       	mov	r9,r8
8001097a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001097e:	12 9b       	mov	r11,r9
80010980:	10 9c       	mov	r12,r8
80010982:	f0 16 01 74 	mcall	r6[1488]
				}
				break;
80010986:	c8 28       	rjmp	80010a8a <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_MISSION_REQUEST_LIST: { // 43
					// this initiates all waypoints being sent to the base-station - therefore, we pause the downstream telemetry to free the channel
					// (at least until we have a radio system with guaranteed bandwidth)
					suspend_downstream(500000);
80010988:	e6 7c a1 20 	mov	r12,500000
8001098c:	f0 16 00 78 	mcall	r6[480]
					send_count(rec, centralData->number_of_waypoints,&centralData->waypoint_receiving,&centralData->waypoint_sending);
80010990:	ec f8 00 00 	ld.w	r8,r6[0]
80010994:	70 08       	ld.w	r8,r8[0x0]
80010996:	f0 c9 ef 4b 	sub	r9,r8,-4277
8001099a:	ec f8 00 00 	ld.w	r8,r6[0]
8001099e:	70 08       	ld.w	r8,r8[0x0]
800109a0:	f0 ca ef 4a 	sub	r10,r8,-4278
800109a4:	ec f8 00 00 	ld.w	r8,r6[0]
800109a8:	70 08       	ld.w	r8,r8[0x0]
800109aa:	f1 08 10 1c 	ld.sh	r8,r8[4124]
800109ae:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
800109b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800109b6:	10 9c       	mov	r12,r8
800109b8:	f0 16 01 a7 	mcall	r6[1692]
					flush_mavlink();
800109bc:	f0 16 00 2d 	mcall	r6[180]
				}
				break;
800109c0:	c6 58       	rjmp	80010a8a <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_MISSION_COUNT : { // 44
					// this initiates all waypoints being sent from base-station - therefore, we pause the downstream telemetry to free the channel
					// (at least until we have a radio system with guaranteed bandwidth)
					suspend_downstream(500000);
800109c2:	e6 7c a1 20 	mov	r12,500000
800109c6:	f0 16 00 78 	mcall	r6[480]
					receive_count(rec, &(centralData->number_of_waypoints),&centralData->waypoint_receiving,&centralData->waypoint_sending);
800109ca:	ec f8 00 00 	ld.w	r8,r6[0]
800109ce:	70 08       	ld.w	r8,r8[0x0]
800109d0:	f0 c9 ef 4b 	sub	r9,r8,-4277
800109d4:	ec f8 00 00 	ld.w	r8,r6[0]
800109d8:	70 08       	ld.w	r8,r8[0x0]
800109da:	f0 ca ef 4a 	sub	r10,r8,-4278
800109de:	ec f8 00 00 	ld.w	r8,r6[0]
800109e2:	70 08       	ld.w	r8,r8[0x0]
800109e4:	f0 cb ef e4 	sub	r11,r8,-4124
800109e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800109ec:	10 9c       	mov	r12,r8
800109ee:	f0 16 02 21 	mcall	r6[2180]
				}
				break;
800109f2:	c4 c8       	rjmp	80010a8a <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_MISSION_CLEAR_ALL : { // 45
					clear_waypoint_list(rec, &(centralData->number_of_waypoints),&centralData->waypoint_set);
800109f4:	ec f8 00 00 	ld.w	r8,r6[0]
800109f8:	70 08       	ld.w	r8,r8[0x0]
800109fa:	f0 ca ef 4c 	sub	r10,r8,-4276
800109fe:	ec f8 00 00 	ld.w	r8,r6[0]
80010a02:	70 08       	ld.w	r8,r8[0x0]
80010a04:	f0 c9 ef e4 	sub	r9,r8,-4124
80010a08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010a0c:	12 9b       	mov	r11,r9
80010a0e:	10 9c       	mov	r12,r8
80010a10:	f0 16 01 7e 	mcall	r6[1528]
				}
				break;
80010a14:	c3 b8       	rjmp	80010a8a <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_MISSION_ACK : { // 47
					receive_ack_msg(rec,&centralData->waypoint_sending);
80010a16:	ec f8 00 00 	ld.w	r8,r6[0]
80010a1a:	70 08       	ld.w	r8,r8[0x0]
80010a1c:	f0 c9 ef 4b 	sub	r9,r8,-4277
80010a20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010a24:	12 9b       	mov	r11,r9
80010a26:	10 9c       	mov	r12,r8
80010a28:	f0 16 01 f1 	mcall	r6[1988]
				}
				break;
80010a2c:	c2 f8       	rjmp	80010a8a <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_SET_MODE : { // 11
					set_mav_mode(rec, &centralData->mav_mode, &(centralData->mav_state),centralData->simulation_mode);
80010a2e:	ec f8 00 00 	ld.w	r8,r6[0]
80010a32:	70 08       	ld.w	r8,r8[0x0]
80010a34:	f0 f8 10 c0 	ld.w	r8,r8[4288]
80010a38:	5c 58       	castu.b	r8
80010a3a:	10 99       	mov	r9,r8
80010a3c:	ec f8 00 00 	ld.w	r8,r6[0]
80010a40:	70 08       	ld.w	r8,r8[0x0]
80010a42:	f0 ca ef 43 	sub	r10,r8,-4285
80010a46:	ec f8 00 00 	ld.w	r8,r6[0]
80010a4a:	70 08       	ld.w	r8,r8[0x0]
80010a4c:	f0 cb ef 44 	sub	r11,r8,-4284
80010a50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010a54:	10 9c       	mov	r12,r8
80010a56:	f0 16 01 cd 	mcall	r6[1844]
				}
				break;
80010a5a:	d7 03       	nop
80010a5c:	c1 78       	rjmp	80010a8a <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_COMMAND_LONG : { // 76
					receive_message_long(rec);
80010a5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010a62:	10 9c       	mov	r12,r8
80010a64:	f0 16 01 84 	mcall	r6[1552]
80010a68:	c1 18       	rjmp	80010a8a <handle_specific_messages+0x2e2>
				}
				break;
		}
	} else
	if (rec->msg.msgid == MAVLINK_MSG_ID_GLOBAL_POSITION_INT)
80010a6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010a6e:	11 f9       	ld.ub	r9,r8[0x7]
80010a70:	32 18       	mov	r8,33
80010a72:	f0 09 18 00 	cp.b	r9,r8
80010a76:	c0 a1       	brne	80010a8a <handle_specific_messages+0x2e2>
		//dbg_print_num(rec.msg.sysid, 10);
		//dbg_print(" for component");
		//dbg_print_num(rec.msg.compid,10);
		//dbg_print( "\n");
		
		read_msg_from_neighbors(&rec);
80010a78:	ee c8 00 04 	sub	r8,r7,4
80010a7c:	10 9c       	mov	r12,r8
80010a7e:	f0 16 01 3e 	mcall	r6[1272]
80010a82:	c0 48       	rjmp	80010a8a <handle_specific_messages+0x2e2>
				case MAVLINK_MSG_ID_SET_MODE : { // 11
					set_mav_mode(rec, &centralData->mav_mode, &(centralData->mav_state),centralData->simulation_mode);
				}
				break;
				case MAVLINK_MSG_ID_COMMAND_LONG : { // 76
					receive_message_long(rec);
80010a84:	d7 03       	nop
80010a86:	c0 28       	rjmp	80010a8a <handle_specific_messages+0x2e2>
80010a88:	d7 03       	nop
		//dbg_print_num(rec.msg.compid,10);
		//dbg_print( "\n");
		
		read_msg_from_neighbors(&rec);
	}
}
80010a8a:	2f fd       	sub	sp,-4
80010a8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010a90:	80 01       	ld.sh	r1,r0[0x0]
80010a92:	06 38       	cp.w	r8,r3
80010a94:	70 61       	ld.w	r1,r8[0x18]
80010a96:	72 61       	ld.w	r1,r9[0x18]
80010a98:	6d 65       	ld.w	r5,r6[0x58]
80010a9a:	74 65       	ld.w	r5,r10[0x18]
80010a9c:	72 73       	ld.w	r3,r9[0x1c]
80010a9e:	3a 00       	mov	r0,-96
80010aa0:	2c 20       	sub	r0,-62
80010aa2:	63 6f       	ld.w	pc,r1[0x58]
80010aa4:	6d 6d       	ld.w	sp,r6[0x58]
80010aa6:	61 6e       	ld.w	lr,r0[0x58]
80010aa8:	64 20       	ld.w	r0,r2[0x8]
80010aaa:	69 64       	ld.w	r4,r4[0x58]
80010aac:	3a 00       	mov	r0,-96
80010aae:	00 00       	add	r0,r0
80010ab0:	2c 20       	sub	r0,-62
80010ab2:	63 6f       	ld.w	pc,r1[0x58]
80010ab4:	6e 66       	ld.w	r6,r7[0x18]
80010ab6:	69 72       	ld.w	r2,r4[0x5c]
80010ab8:	6d 61       	ld.w	r1,r6[0x58]
80010aba:	74 69       	ld.w	r9,r10[0x18]
80010abc:	6f 6e       	ld.w	lr,r7[0x58]
80010abe:	3a 00       	mov	r0,-96
80010ac0:	0a 00       	add	r0,r5
80010ac2:	00 00       	add	r0,r0
80010ac4:	52 65       	stdsp	sp[0x98],r5
80010ac6:	61 64       	ld.w	r4,r0[0x58]
80010ac8:	69 6e       	ld.w	lr,r4[0x58]
80010aca:	67 20       	ld.w	r0,r3[0x48]
80010acc:	66 72       	ld.w	r2,r3[0x1c]
80010ace:	6f 6d       	ld.w	sp,r7[0x58]
80010ad0:	20 66       	sub	r6,6
80010ad2:	6c 61       	ld.w	r1,r6[0x18]
80010ad4:	73 68       	ld.w	r8,r9[0x58]
80010ad6:	63 2e       	ld.w	lr,r1[0x48]
80010ad8:	2e 2e       	sub	lr,-30
80010ada:	0a 00       	add	r0,r5
80010adc:	57 72       	stdsp	sp[0x1dc],r2
80010ade:	69 74       	ld.w	r4,r4[0x5c]
80010ae0:	74 69       	ld.w	r9,r10[0x18]
80010ae2:	6e 67       	ld.w	r7,r7[0x18]
80010ae4:	20 74       	sub	r4,7
80010ae6:	6f 20       	ld.w	r0,r7[0x48]
80010ae8:	66 6c       	ld.w	r12,r3[0x18]
80010aea:	61 73       	ld.w	r3,r0[0x5c]
80010aec:	68 63       	ld.w	r3,r4[0x18]
80010aee:	0a 00       	add	r0,r5

80010af0 <receive_message_long>:

void receive_message_long(Mavlink_Received_t* rec)
{
80010af0:	eb cd 40 c0 	pushm	r6-r7,lr
80010af4:	1a 97       	mov	r7,sp
80010af6:	20 ad       	sub	sp,40
80010af8:	fe f6 04 cc 	ld.w	r6,pc[1228]
80010afc:	1e 26       	rsub	r6,pc
80010afe:	ef 4c ff d8 	st.w	r7[-40],r12
	mavlink_command_long_t packet;
	mavlink_msg_command_long_decode(&rec->msg,&packet);
80010b02:	ee f8 ff d8 	ld.w	r8,r7[-40]
80010b06:	ee c9 00 24 	sub	r9,r7,36
80010b0a:	12 9b       	mov	r11,r9
80010b0c:	10 9c       	mov	r12,r8
80010b0e:	fe b0 ec 03 	rcall	8000e314 <mavlink_msg_command_long_decode>
	// Check if this message is for this system and subsystem
	// dbg_print("target_comp:");
	// dbg_print_num(packet.target_component,10);
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&&(uint8_t)packet.target_component == (uint8_t)0)
80010b12:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80010b16:	ec f8 00 70 	ld.w	r8,r6[112]
80010b1a:	11 88       	ld.ub	r8,r8[0x0]
	mavlink_command_long_t packet;
	mavlink_msg_command_long_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	// dbg_print("target_comp:");
	// dbg_print_num(packet.target_component,10);
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80010b1c:	f0 09 18 00 	cp.b	r9,r8
80010b20:	e0 81 02 4e 	brne	80010fbc <receive_message_long+0x4cc>
	&&(uint8_t)packet.target_component == (uint8_t)0)
80010b24:	ef 38 ff fb 	ld.ub	r8,r7[-5]
	mavlink_command_long_t packet;
	mavlink_msg_command_long_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	// dbg_print("target_comp:");
	// dbg_print_num(packet.target_component,10);
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80010b28:	58 08       	cp.w	r8,0
80010b2a:	e0 81 02 49 	brne	80010fbc <receive_message_long+0x4cc>
	&&(uint8_t)packet.target_component == (uint8_t)0)
	{
		// print packet command and parameters for debug
		dbg_print("parameters:");
80010b2e:	fe cc 00 9a 	sub	r12,pc,154
80010b32:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.param1,10);
80010b36:	ee f8 ff dc 	ld.w	r8,r7[-36]
80010b3a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80010b3e:	30 ab       	mov	r11,10
80010b40:	10 9c       	mov	r12,r8
80010b42:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param2,10);
80010b46:	ee f8 ff e0 	ld.w	r8,r7[-32]
80010b4a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80010b4e:	30 ab       	mov	r11,10
80010b50:	10 9c       	mov	r12,r8
80010b52:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param3,10);
80010b56:	ee f8 ff e4 	ld.w	r8,r7[-28]
80010b5a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80010b5e:	30 ab       	mov	r11,10
80010b60:	10 9c       	mov	r12,r8
80010b62:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param4,10);
80010b66:	ee f8 ff e8 	ld.w	r8,r7[-24]
80010b6a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80010b6e:	30 ab       	mov	r11,10
80010b70:	10 9c       	mov	r12,r8
80010b72:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param5,10);
80010b76:	ee f8 ff ec 	ld.w	r8,r7[-20]
80010b7a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80010b7e:	30 ab       	mov	r11,10
80010b80:	10 9c       	mov	r12,r8
80010b82:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param6,10);
80010b86:	ee f8 ff f0 	ld.w	r8,r7[-16]
80010b8a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80010b8e:	30 ab       	mov	r11,10
80010b90:	10 9c       	mov	r12,r8
80010b92:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param7,10);
80010b96:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010b9a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80010b9e:	30 ab       	mov	r11,10
80010ba0:	10 9c       	mov	r12,r8
80010ba2:	f0 16 00 04 	mcall	r6[16]
		dbg_print(", command id:");
80010ba6:	fe cc 01 06 	sub	r12,pc,262
80010baa:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.command,10);
80010bae:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80010bb2:	5c 78       	castu.h	r8
80010bb4:	30 ab       	mov	r11,10
80010bb6:	10 9c       	mov	r12,r8
80010bb8:	f0 16 00 04 	mcall	r6[16]
		dbg_print(", confirmation:");
80010bbc:	fe cc 01 0c 	sub	r12,pc,268
80010bc0:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.confirmation,10);
80010bc4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80010bc8:	30 ab       	mov	r11,10
80010bca:	10 9c       	mov	r12,r8
80010bcc:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
80010bd0:	fe cc 01 10 	sub	r12,pc,272
80010bd4:	f0 16 00 01 	mcall	r6[4]
		
		switch(packet.command) {
80010bd8:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80010bdc:	5c 78       	castu.h	r8
80010bde:	21 08       	sub	r8,16
80010be0:	e0 48 00 e5 	cp.w	r8,229
80010be4:	e0 8b 01 ec 	brhi	80010fbc <receive_message_long+0x4cc>
80010be8:	fe c9 ff f8 	sub	r9,pc,-8
80010bec:	f2 08 00 2f 	add	pc,r9,r8<<0x2
80010bf0:	e0 8f 01 e6 	bral	80010fbc <receive_message_long+0x4cc>
80010bf4:	e0 8f 01 e4 	bral	80010fbc <receive_message_long+0x4cc>
80010bf8:	e0 8f 01 e2 	bral	80010fbc <receive_message_long+0x4cc>
80010bfc:	e0 8f 01 e0 	bral	80010fbc <receive_message_long+0x4cc>
80010c00:	e0 8f 01 de 	bral	80010fbc <receive_message_long+0x4cc>
80010c04:	e0 8f 01 dc 	bral	80010fbc <receive_message_long+0x4cc>
80010c08:	e0 8f 01 da 	bral	80010fbc <receive_message_long+0x4cc>
80010c0c:	e0 8f 01 d8 	bral	80010fbc <receive_message_long+0x4cc>
80010c10:	e0 8f 01 d6 	bral	80010fbc <receive_message_long+0x4cc>
80010c14:	e0 8f 01 d4 	bral	80010fbc <receive_message_long+0x4cc>
80010c18:	e0 8f 01 d2 	bral	80010fbc <receive_message_long+0x4cc>
80010c1c:	e0 8f 01 d0 	bral	80010fbc <receive_message_long+0x4cc>
80010c20:	e0 8f 01 ce 	bral	80010fbc <receive_message_long+0x4cc>
80010c24:	e0 8f 01 cc 	bral	80010fbc <receive_message_long+0x4cc>
80010c28:	e0 8f 01 ca 	bral	80010fbc <receive_message_long+0x4cc>
80010c2c:	e0 8f 01 c8 	bral	80010fbc <receive_message_long+0x4cc>
80010c30:	e0 8f 01 c6 	bral	80010fbc <receive_message_long+0x4cc>
80010c34:	e0 8f 01 c4 	bral	80010fbc <receive_message_long+0x4cc>
80010c38:	e0 8f 01 c2 	bral	80010fbc <receive_message_long+0x4cc>
80010c3c:	e0 8f 01 c0 	bral	80010fbc <receive_message_long+0x4cc>
80010c40:	e0 8f 01 be 	bral	80010fbc <receive_message_long+0x4cc>
80010c44:	e0 8f 01 bc 	bral	80010fbc <receive_message_long+0x4cc>
80010c48:	e0 8f 01 ba 	bral	80010fbc <receive_message_long+0x4cc>
80010c4c:	e0 8f 01 b8 	bral	80010fbc <receive_message_long+0x4cc>
80010c50:	e0 8f 01 b6 	bral	80010fbc <receive_message_long+0x4cc>
80010c54:	e0 8f 01 b4 	bral	80010fbc <receive_message_long+0x4cc>
80010c58:	e0 8f 01 b2 	bral	80010fbc <receive_message_long+0x4cc>
80010c5c:	e0 8f 01 b0 	bral	80010fbc <receive_message_long+0x4cc>
80010c60:	e0 8f 01 ae 	bral	80010fbc <receive_message_long+0x4cc>
80010c64:	e0 8f 01 ac 	bral	80010fbc <receive_message_long+0x4cc>
80010c68:	e0 8f 01 aa 	bral	80010fbc <receive_message_long+0x4cc>
80010c6c:	e0 8f 01 a8 	bral	80010fbc <receive_message_long+0x4cc>
80010c70:	e0 8f 01 a6 	bral	80010fbc <receive_message_long+0x4cc>
80010c74:	e0 8f 01 a4 	bral	80010fbc <receive_message_long+0x4cc>
80010c78:	e0 8f 01 a2 	bral	80010fbc <receive_message_long+0x4cc>
80010c7c:	e0 8f 01 a0 	bral	80010fbc <receive_message_long+0x4cc>
80010c80:	e0 8f 01 9e 	bral	80010fbc <receive_message_long+0x4cc>
80010c84:	e0 8f 01 9c 	bral	80010fbc <receive_message_long+0x4cc>
80010c88:	e0 8f 01 9a 	bral	80010fbc <receive_message_long+0x4cc>
80010c8c:	e0 8f 01 98 	bral	80010fbc <receive_message_long+0x4cc>
80010c90:	e0 8f 01 96 	bral	80010fbc <receive_message_long+0x4cc>
80010c94:	e0 8f 01 94 	bral	80010fbc <receive_message_long+0x4cc>
80010c98:	e0 8f 01 92 	bral	80010fbc <receive_message_long+0x4cc>
80010c9c:	e0 8f 01 90 	bral	80010fbc <receive_message_long+0x4cc>
80010ca0:	e0 8f 01 8e 	bral	80010fbc <receive_message_long+0x4cc>
80010ca4:	e0 8f 01 8c 	bral	80010fbc <receive_message_long+0x4cc>
80010ca8:	e0 8f 01 8a 	bral	80010fbc <receive_message_long+0x4cc>
80010cac:	e0 8f 01 88 	bral	80010fbc <receive_message_long+0x4cc>
80010cb0:	e0 8f 01 86 	bral	80010fbc <receive_message_long+0x4cc>
80010cb4:	e0 8f 01 84 	bral	80010fbc <receive_message_long+0x4cc>
80010cb8:	e0 8f 01 82 	bral	80010fbc <receive_message_long+0x4cc>
80010cbc:	e0 8f 01 80 	bral	80010fbc <receive_message_long+0x4cc>
80010cc0:	e0 8f 01 7e 	bral	80010fbc <receive_message_long+0x4cc>
80010cc4:	e0 8f 01 7c 	bral	80010fbc <receive_message_long+0x4cc>
80010cc8:	e0 8f 01 7a 	bral	80010fbc <receive_message_long+0x4cc>
80010ccc:	e0 8f 01 78 	bral	80010fbc <receive_message_long+0x4cc>
80010cd0:	e0 8f 01 76 	bral	80010fbc <receive_message_long+0x4cc>
80010cd4:	e0 8f 01 74 	bral	80010fbc <receive_message_long+0x4cc>
80010cd8:	e0 8f 01 72 	bral	80010fbc <receive_message_long+0x4cc>
80010cdc:	e0 8f 01 70 	bral	80010fbc <receive_message_long+0x4cc>
80010ce0:	e0 8f 01 6e 	bral	80010fbc <receive_message_long+0x4cc>
80010ce4:	e0 8f 01 6c 	bral	80010fbc <receive_message_long+0x4cc>
80010ce8:	e0 8f 01 6a 	bral	80010fbc <receive_message_long+0x4cc>
80010cec:	e0 8f 01 68 	bral	80010fbc <receive_message_long+0x4cc>
80010cf0:	e0 8f 01 66 	bral	80010fbc <receive_message_long+0x4cc>
80010cf4:	e0 8f 01 64 	bral	80010fbc <receive_message_long+0x4cc>
80010cf8:	e0 8f 01 62 	bral	80010fbc <receive_message_long+0x4cc>
80010cfc:	e0 8f 01 60 	bral	80010fbc <receive_message_long+0x4cc>
80010d00:	e0 8f 01 5e 	bral	80010fbc <receive_message_long+0x4cc>
80010d04:	e0 8f 01 5c 	bral	80010fbc <receive_message_long+0x4cc>
80010d08:	e0 8f 01 5a 	bral	80010fbc <receive_message_long+0x4cc>
80010d0c:	e0 8f 01 58 	bral	80010fbc <receive_message_long+0x4cc>
80010d10:	e0 8f 01 56 	bral	80010fbc <receive_message_long+0x4cc>
80010d14:	e0 8f 01 54 	bral	80010fbc <receive_message_long+0x4cc>
80010d18:	e0 8f 01 52 	bral	80010fbc <receive_message_long+0x4cc>
80010d1c:	e0 8f 01 50 	bral	80010fbc <receive_message_long+0x4cc>
80010d20:	e0 8f 01 4e 	bral	80010fbc <receive_message_long+0x4cc>
80010d24:	e0 8f 01 4c 	bral	80010fbc <receive_message_long+0x4cc>
80010d28:	e0 8f 01 4a 	bral	80010fbc <receive_message_long+0x4cc>
80010d2c:	e0 8f 01 48 	bral	80010fbc <receive_message_long+0x4cc>
80010d30:	e0 8f 01 46 	bral	80010fbc <receive_message_long+0x4cc>
80010d34:	e0 8f 01 44 	bral	80010fbc <receive_message_long+0x4cc>
80010d38:	e0 8f 01 42 	bral	80010fbc <receive_message_long+0x4cc>
80010d3c:	e0 8f 01 40 	bral	80010fbc <receive_message_long+0x4cc>
80010d40:	e0 8f 01 3e 	bral	80010fbc <receive_message_long+0x4cc>
80010d44:	e0 8f 01 3c 	bral	80010fbc <receive_message_long+0x4cc>
80010d48:	e0 8f 01 3a 	bral	80010fbc <receive_message_long+0x4cc>
80010d4c:	e0 8f 01 38 	bral	80010fbc <receive_message_long+0x4cc>
80010d50:	e0 8f 01 36 	bral	80010fbc <receive_message_long+0x4cc>
80010d54:	e0 8f 01 34 	bral	80010fbc <receive_message_long+0x4cc>
80010d58:	e0 8f 01 32 	bral	80010fbc <receive_message_long+0x4cc>
80010d5c:	e0 8f 01 30 	bral	80010fbc <receive_message_long+0x4cc>
80010d60:	e0 8f 01 2e 	bral	80010fbc <receive_message_long+0x4cc>
80010d64:	e0 8f 01 2c 	bral	80010fbc <receive_message_long+0x4cc>
80010d68:	e0 8f 01 2a 	bral	80010fbc <receive_message_long+0x4cc>
80010d6c:	e0 8f 01 28 	bral	80010fbc <receive_message_long+0x4cc>
80010d70:	e0 8f 01 26 	bral	80010fbc <receive_message_long+0x4cc>
80010d74:	e0 8f 01 24 	bral	80010fbc <receive_message_long+0x4cc>
80010d78:	e0 8f 01 22 	bral	80010fbc <receive_message_long+0x4cc>
80010d7c:	e0 8f 01 20 	bral	80010fbc <receive_message_long+0x4cc>
80010d80:	e0 8f 01 1e 	bral	80010fbc <receive_message_long+0x4cc>
80010d84:	e0 8f 01 1c 	bral	80010fbc <receive_message_long+0x4cc>
80010d88:	e0 8f 01 1a 	bral	80010fbc <receive_message_long+0x4cc>
80010d8c:	e0 8f 01 18 	bral	80010fbc <receive_message_long+0x4cc>
80010d90:	e0 8f 01 16 	bral	80010fbc <receive_message_long+0x4cc>
80010d94:	e0 8f 01 14 	bral	80010fbc <receive_message_long+0x4cc>
80010d98:	e0 8f 01 12 	bral	80010fbc <receive_message_long+0x4cc>
80010d9c:	e0 8f 01 10 	bral	80010fbc <receive_message_long+0x4cc>
80010da0:	e0 8f 01 0e 	bral	80010fbc <receive_message_long+0x4cc>
80010da4:	e0 8f 01 0c 	bral	80010fbc <receive_message_long+0x4cc>
80010da8:	e0 8f 01 0a 	bral	80010fbc <receive_message_long+0x4cc>
80010dac:	e0 8f 01 08 	bral	80010fbc <receive_message_long+0x4cc>
80010db0:	e0 8f 01 06 	bral	80010fbc <receive_message_long+0x4cc>
80010db4:	e0 8f 01 04 	bral	80010fbc <receive_message_long+0x4cc>
80010db8:	e0 8f 01 02 	bral	80010fbc <receive_message_long+0x4cc>
80010dbc:	e0 8f 01 00 	bral	80010fbc <receive_message_long+0x4cc>
80010dc0:	e0 8f 00 fe 	bral	80010fbc <receive_message_long+0x4cc>
80010dc4:	e0 8f 00 fc 	bral	80010fbc <receive_message_long+0x4cc>
80010dc8:	e0 8f 00 fa 	bral	80010fbc <receive_message_long+0x4cc>
80010dcc:	e0 8f 00 f8 	bral	80010fbc <receive_message_long+0x4cc>
80010dd0:	e0 8f 00 f6 	bral	80010fbc <receive_message_long+0x4cc>
80010dd4:	e0 8f 00 f4 	bral	80010fbc <receive_message_long+0x4cc>
80010dd8:	e0 8f 00 f2 	bral	80010fbc <receive_message_long+0x4cc>
80010ddc:	e0 8f 00 f0 	bral	80010fbc <receive_message_long+0x4cc>
80010de0:	e0 8f 00 ee 	bral	80010fbc <receive_message_long+0x4cc>
80010de4:	e0 8f 00 ec 	bral	80010fbc <receive_message_long+0x4cc>
80010de8:	e0 8f 00 ea 	bral	80010fbc <receive_message_long+0x4cc>
80010dec:	e0 8f 00 e8 	bral	80010fbc <receive_message_long+0x4cc>
80010df0:	e0 8f 00 e6 	bral	80010fbc <receive_message_long+0x4cc>
80010df4:	e0 8f 00 e4 	bral	80010fbc <receive_message_long+0x4cc>
80010df8:	e0 8f 00 e2 	bral	80010fbc <receive_message_long+0x4cc>
80010dfc:	e0 8f 00 e0 	bral	80010fbc <receive_message_long+0x4cc>
80010e00:	e0 8f 00 de 	bral	80010fbc <receive_message_long+0x4cc>
80010e04:	e0 8f 00 dc 	bral	80010fbc <receive_message_long+0x4cc>
80010e08:	e0 8f 00 da 	bral	80010fbc <receive_message_long+0x4cc>
80010e0c:	e0 8f 00 d8 	bral	80010fbc <receive_message_long+0x4cc>
80010e10:	e0 8f 00 d6 	bral	80010fbc <receive_message_long+0x4cc>
80010e14:	e0 8f 00 d4 	bral	80010fbc <receive_message_long+0x4cc>
80010e18:	e0 8f 00 d2 	bral	80010fbc <receive_message_long+0x4cc>
80010e1c:	e0 8f 00 d0 	bral	80010fbc <receive_message_long+0x4cc>
80010e20:	e0 8f 00 ce 	bral	80010fbc <receive_message_long+0x4cc>
80010e24:	e0 8f 00 cc 	bral	80010fbc <receive_message_long+0x4cc>
80010e28:	e0 8f 00 ca 	bral	80010fbc <receive_message_long+0x4cc>
80010e2c:	e0 8f 00 c8 	bral	80010fbc <receive_message_long+0x4cc>
80010e30:	e0 8f 00 c6 	bral	80010fbc <receive_message_long+0x4cc>
80010e34:	e0 8f 00 c4 	bral	80010fbc <receive_message_long+0x4cc>
80010e38:	e0 8f 00 c2 	bral	80010fbc <receive_message_long+0x4cc>
80010e3c:	e0 8f 00 c0 	bral	80010fbc <receive_message_long+0x4cc>
80010e40:	e0 8f 00 be 	bral	80010fbc <receive_message_long+0x4cc>
80010e44:	e0 8f 00 bc 	bral	80010fbc <receive_message_long+0x4cc>
80010e48:	e0 8f 00 ba 	bral	80010fbc <receive_message_long+0x4cc>
80010e4c:	e0 8f 00 b8 	bral	80010fbc <receive_message_long+0x4cc>
80010e50:	e0 8f 00 b6 	bral	80010fbc <receive_message_long+0x4cc>
80010e54:	e0 8f 00 b4 	bral	80010fbc <receive_message_long+0x4cc>
80010e58:	e0 8f 00 b2 	bral	80010fbc <receive_message_long+0x4cc>
80010e5c:	e0 8f 00 b0 	bral	80010fbc <receive_message_long+0x4cc>
80010e60:	e0 8f 00 ae 	bral	80010fbc <receive_message_long+0x4cc>
80010e64:	e0 8f 00 ac 	bral	80010fbc <receive_message_long+0x4cc>
80010e68:	e0 8f 00 aa 	bral	80010fbc <receive_message_long+0x4cc>
80010e6c:	e0 8f 00 a8 	bral	80010fbc <receive_message_long+0x4cc>
80010e70:	e0 8f 00 a6 	bral	80010fbc <receive_message_long+0x4cc>
80010e74:	e0 8f 00 a4 	bral	80010fbc <receive_message_long+0x4cc>
80010e78:	e0 8f 00 a2 	bral	80010fbc <receive_message_long+0x4cc>
80010e7c:	e0 8f 00 a0 	bral	80010fbc <receive_message_long+0x4cc>
80010e80:	e0 8f 00 9e 	bral	80010fbc <receive_message_long+0x4cc>
80010e84:	e0 8f 00 9c 	bral	80010fbc <receive_message_long+0x4cc>
80010e88:	e0 8f 00 9a 	bral	80010fbc <receive_message_long+0x4cc>
80010e8c:	e0 8f 00 98 	bral	80010fbc <receive_message_long+0x4cc>
80010e90:	e0 8f 00 96 	bral	80010fbc <receive_message_long+0x4cc>
80010e94:	e0 8f 00 94 	bral	80010fbc <receive_message_long+0x4cc>
80010e98:	e0 8f 00 92 	bral	80010fbc <receive_message_long+0x4cc>
80010e9c:	e0 8f 00 90 	bral	80010fbc <receive_message_long+0x4cc>
80010ea0:	e0 8f 00 8e 	bral	80010fbc <receive_message_long+0x4cc>
80010ea4:	e0 8f 00 8c 	bral	80010fbc <receive_message_long+0x4cc>
80010ea8:	e0 8f 00 8a 	bral	80010fbc <receive_message_long+0x4cc>
80010eac:	e0 8f 00 88 	bral	80010fbc <receive_message_long+0x4cc>
80010eb0:	e0 8f 00 86 	bral	80010fbc <receive_message_long+0x4cc>
80010eb4:	e0 8f 00 84 	bral	80010fbc <receive_message_long+0x4cc>
80010eb8:	e0 8f 00 82 	bral	80010fbc <receive_message_long+0x4cc>
80010ebc:	e0 8f 00 80 	bral	80010fbc <receive_message_long+0x4cc>
80010ec0:	e0 8f 00 7e 	bral	80010fbc <receive_message_long+0x4cc>
80010ec4:	e0 8f 00 7c 	bral	80010fbc <receive_message_long+0x4cc>
80010ec8:	e0 8f 00 7a 	bral	80010fbc <receive_message_long+0x4cc>
80010ecc:	e0 8f 00 78 	bral	80010fbc <receive_message_long+0x4cc>
80010ed0:	e0 8f 00 76 	bral	80010fbc <receive_message_long+0x4cc>
80010ed4:	e0 8f 00 74 	bral	80010fbc <receive_message_long+0x4cc>
80010ed8:	e0 8f 00 72 	bral	80010fbc <receive_message_long+0x4cc>
80010edc:	e0 8f 00 70 	bral	80010fbc <receive_message_long+0x4cc>
80010ee0:	e0 8f 00 6e 	bral	80010fbc <receive_message_long+0x4cc>
80010ee4:	e0 8f 00 6c 	bral	80010fbc <receive_message_long+0x4cc>
80010ee8:	e0 8f 00 6a 	bral	80010fbc <receive_message_long+0x4cc>
80010eec:	e0 8f 00 68 	bral	80010fbc <receive_message_long+0x4cc>
80010ef0:	e0 8f 00 66 	bral	80010fbc <receive_message_long+0x4cc>
80010ef4:	e0 8f 00 64 	bral	80010fbc <receive_message_long+0x4cc>
80010ef8:	e0 8f 00 62 	bral	80010fbc <receive_message_long+0x4cc>
80010efc:	e0 8f 00 60 	bral	80010fbc <receive_message_long+0x4cc>
80010f00:	e0 8f 00 5e 	bral	80010fbc <receive_message_long+0x4cc>
80010f04:	e0 8f 00 5c 	bral	80010fbc <receive_message_long+0x4cc>
80010f08:	e0 8f 00 5a 	bral	80010fbc <receive_message_long+0x4cc>
80010f0c:	e0 8f 00 58 	bral	80010fbc <receive_message_long+0x4cc>
80010f10:	e0 8f 00 56 	bral	80010fbc <receive_message_long+0x4cc>
80010f14:	e0 8f 00 54 	bral	80010fbc <receive_message_long+0x4cc>
80010f18:	e0 8f 00 52 	bral	80010fbc <receive_message_long+0x4cc>
80010f1c:	e0 8f 00 50 	bral	80010fbc <receive_message_long+0x4cc>
80010f20:	e0 8f 00 4e 	bral	80010fbc <receive_message_long+0x4cc>
80010f24:	e0 8f 00 4c 	bral	80010fbc <receive_message_long+0x4cc>
80010f28:	e0 8f 00 4a 	bral	80010fbc <receive_message_long+0x4cc>
80010f2c:	e0 8f 00 48 	bral	80010fbc <receive_message_long+0x4cc>
80010f30:	e0 8f 00 46 	bral	80010fbc <receive_message_long+0x4cc>
80010f34:	e0 8f 00 44 	bral	80010fbc <receive_message_long+0x4cc>
80010f38:	e0 8f 00 42 	bral	80010fbc <receive_message_long+0x4cc>
80010f3c:	e0 8f 00 40 	bral	80010fbc <receive_message_long+0x4cc>
80010f40:	e0 8f 00 3e 	bral	80010fbc <receive_message_long+0x4cc>
80010f44:	e0 8f 00 3c 	bral	80010fbc <receive_message_long+0x4cc>
80010f48:	e0 8f 00 3a 	bral	80010fbc <receive_message_long+0x4cc>
80010f4c:	e0 8f 00 38 	bral	80010fbc <receive_message_long+0x4cc>
80010f50:	e0 8f 00 36 	bral	80010fbc <receive_message_long+0x4cc>
80010f54:	e0 8f 00 34 	bral	80010fbc <receive_message_long+0x4cc>
80010f58:	e0 8f 00 32 	bral	80010fbc <receive_message_long+0x4cc>
80010f5c:	e0 8f 00 30 	bral	80010fbc <receive_message_long+0x4cc>
80010f60:	e0 8f 00 2e 	bral	80010fbc <receive_message_long+0x4cc>
80010f64:	e0 8f 00 2c 	bral	80010fbc <receive_message_long+0x4cc>
80010f68:	e0 8f 00 2a 	bral	80010fbc <receive_message_long+0x4cc>
80010f6c:	e0 8f 00 28 	bral	80010fbc <receive_message_long+0x4cc>
80010f70:	e0 8f 00 26 	bral	80010fbc <receive_message_long+0x4cc>
80010f74:	e0 8f 00 24 	bral	80010fbc <receive_message_long+0x4cc>
80010f78:	e0 8f 00 22 	bral	80010fbc <receive_message_long+0x4cc>
80010f7c:	e0 8f 00 20 	bral	80010fbc <receive_message_long+0x4cc>
80010f80:	e0 8f 00 1e 	bral	80010fbc <receive_message_long+0x4cc>
80010f84:	e0 8f 00 02 	bral	80010f88 <receive_message_long+0x498>
			break;
			case MAV_CMD_PREFLIGHT_STORAGE: {
				/* Request storage of different parameter values and logs. This command will be only accepted if in pre-flight mode. |Parameter storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM| Mission storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM| Reserved| Reserved| Empty| Empty| Empty|  */
				
				// Onboard parameters storage
				if (packet.param1 == 0) {
80010f88:	ee f9 ff dc 	ld.w	r9,r7[-36]
80010f8c:	30 08       	mov	r8,0
80010f8e:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80010f92:	c0 81       	brne	80010fa2 <receive_message_long+0x4b2>
					// read parameters from flash
					dbg_print("Reading from flashc...\n");
80010f94:	fe cc 04 d0 	sub	r12,pc,1232
80010f98:	f0 16 00 01 	mcall	r6[4]
					read_parameters_from_flashc();
80010f9c:	f0 16 01 18 	mcall	r6[1120]
80010fa0:	c0 e8       	rjmp	80010fbc <receive_message_long+0x4cc>
				}
				else if (packet.param1 == 1) {
80010fa2:	ee f9 ff dc 	ld.w	r9,r7[-36]
80010fa6:	fc 18 3f 80 	movh	r8,0x3f80
80010faa:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80010fae:	c0 71       	brne	80010fbc <receive_message_long+0x4cc>
					// write parameters to flash
					dbg_print("Writting to flashc\n");
80010fb0:	fe cc 04 d4 	sub	r12,pc,1236
80010fb4:	f0 16 00 01 	mcall	r6[4]
					write_parameters_to_flashc();
80010fb8:	f0 16 01 c7 	mcall	r6[1820]
				/*  | */
			}
			break;
		}
	}
}
80010fbc:	2f 6d       	sub	sp,-40
80010fbe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010fc2:	00 00       	add	r0,r0
80010fc4:	80 01       	ld.sh	r1,r0[0x0]
80010fc6:	09 80       	ld.ub	r0,r4[0x0]

80010fc8 <init_mavlink_actions>:


void init_mavlink_actions(void) {
80010fc8:	eb cd 40 e0 	pushm	r5-r7,lr
80010fcc:	1a 97       	mov	r7,sp
80010fce:	4f 46       	lddpc	r6,8001119c <init_mavlink_actions+0x1d4>
80010fd0:	1e 26       	rsub	r6,pc
	//board=get_board_hardware();
	centralData=get_central_data();
80010fd2:	f0 16 00 33 	mcall	r6[204]
80010fd6:	18 99       	mov	r9,r12
80010fd8:	ec f8 00 00 	ld.w	r8,r6[0]
80010fdc:	91 09       	st.w	r8[0x0],r9
	add_PID_parameters();
80010fde:	f0 16 01 99 	mcall	r6[1636]
	
	//write_parameters_to_flashc();
	
	read_parameters_from_flashc();
80010fe2:	f0 16 01 18 	mcall	r6[1120]
	
	add_task(get_mavlink_taskset(),   10000, RUN_REGULAR, &control_waypoint_timeout, 0);
80010fe6:	ec f5 08 50 	ld.w	r5,r6[2128]
80010fea:	f0 16 00 25 	mcall	r6[148]
80010fee:	30 08       	mov	r8,0
80010ff0:	0a 99       	mov	r9,r5
80010ff2:	30 2a       	mov	r10,2
80010ff4:	e0 6b 27 10 	mov	r11,10000
80010ff8:	f0 16 00 24 	mcall	r6[144]
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_heartbeat, MAVLINK_MSG_ID_HEARTBEAT);
80010ffc:	ec f5 06 c0 	ld.w	r5,r6[1728]
80011000:	f0 16 00 25 	mcall	r6[148]
80011004:	30 08       	mov	r8,0
80011006:	0a 99       	mov	r9,r5
80011008:	30 2a       	mov	r10,2
8001100a:	e6 7b a1 20 	mov	r11,500000
8001100e:	f0 16 00 24 	mcall	r6[144]
	add_task(get_mavlink_taskset(), 1000000, RUN_NEVER, &mavlink_send_attitude_quaternion, MAVLINK_MSG_ID_ATTITUDE_QUATERNION);
80011012:	ec f5 07 54 	ld.w	r5,r6[1876]
80011016:	f0 16 00 25 	mcall	r6[148]
8001101a:	31 f8       	mov	r8,31
8001101c:	0a 99       	mov	r9,r5
8001101e:	30 0a       	mov	r10,0
80011020:	ee 7b 42 40 	mov	r11,1000000
80011024:	f0 16 00 24 	mcall	r6[144]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_attitude, MAVLINK_MSG_ID_ATTITUDE);
80011028:	ec f5 07 bc 	ld.w	r5,r6[1980]
8001102c:	f0 16 00 25 	mcall	r6[148]
80011030:	31 e8       	mov	r8,30
80011032:	0a 99       	mov	r9,r5
80011034:	30 2a       	mov	r10,2
80011036:	e2 7b 0d 40 	mov	r11,200000
8001103a:	f0 16 00 24 	mcall	r6[144]
	
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_hud, MAVLINK_MSG_ID_VFR_HUD);
8001103e:	ec f5 06 34 	ld.w	r5,r6[1588]
80011042:	f0 16 00 25 	mcall	r6[148]
80011046:	34 a8       	mov	r8,74
80011048:	0a 99       	mov	r9,r5
8001104a:	30 2a       	mov	r10,2
8001104c:	e6 7b a1 20 	mov	r11,500000
80011050:	f0 16 00 24 	mcall	r6[144]
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_pressure, MAVLINK_MSG_ID_SCALED_PRESSURE);
80011054:	ec f5 04 f0 	ld.w	r5,r6[1264]
80011058:	f0 16 00 25 	mcall	r6[148]
8001105c:	31 d8       	mov	r8,29
8001105e:	0a 99       	mov	r9,r5
80011060:	30 2a       	mov	r10,2
80011062:	e6 7b a1 20 	mov	r11,500000
80011066:	f0 16 00 24 	mcall	r6[144]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_scaled_imu, MAVLINK_MSG_ID_SCALED_IMU);
8001106a:	ec f5 04 ec 	ld.w	r5,r6[1260]
8001106e:	f0 16 00 25 	mcall	r6[148]
80011072:	31 a8       	mov	r8,26
80011074:	0a 99       	mov	r9,r5
80011076:	30 2a       	mov	r10,2
80011078:	e2 7b 0d 40 	mov	r11,200000
8001107c:	f0 16 00 24 	mcall	r6[144]
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_raw_imu, MAVLINK_MSG_ID_RAW_IMU);
80011080:	ec f5 04 f4 	ld.w	r5,r6[1268]
80011084:	f0 16 00 25 	mcall	r6[148]
80011088:	31 b8       	mov	r8,27
8001108a:	0a 99       	mov	r9,r5
8001108c:	30 2a       	mov	r10,2
8001108e:	e6 7b a1 20 	mov	r11,500000
80011092:	f0 16 00 24 	mcall	r6[144]

	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_rpy_rates_error, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT);
80011096:	ec f5 05 84 	ld.w	r5,r6[1412]
8001109a:	f0 16 00 25 	mcall	r6[148]
8001109e:	35 08       	mov	r8,80
800110a0:	0a 99       	mov	r9,r5
800110a2:	30 0a       	mov	r10,0
800110a4:	e2 7b 0d 40 	mov	r11,200000
800110a8:	f0 16 00 24 	mcall	r6[144]
	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_rpy_speed_thrust_setpoint, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT);
800110ac:	ec f5 05 74 	ld.w	r5,r6[1396]
800110b0:	f0 16 00 25 	mcall	r6[148]
800110b4:	33 b8       	mov	r8,59
800110b6:	0a 99       	mov	r9,r5
800110b8:	30 0a       	mov	r10,0
800110ba:	e2 7b 0d 40 	mov	r11,200000
800110be:	f0 16 00 24 	mcall	r6[144]
	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_rpy_thrust_setpoint, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT);
800110c2:	ec f5 05 18 	ld.w	r5,r6[1304]
800110c6:	f0 16 00 25 	mcall	r6[148]
800110ca:	33 a8       	mov	r8,58
800110cc:	0a 99       	mov	r9,r5
800110ce:	30 0a       	mov	r10,0
800110d0:	e2 7b 0d 40 	mov	r11,200000
800110d4:	f0 16 00 24 	mcall	r6[144]


	add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_servo_output, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW);
800110d8:	ec f5 07 48 	ld.w	r5,r6[1864]
800110dc:	f0 16 00 25 	mcall	r6[148]
800110e0:	32 48       	mov	r8,36
800110e2:	0a 99       	mov	r9,r5
800110e4:	30 2a       	mov	r10,2
800110e6:	e2 7b d0 90 	mov	r11,250000
800110ea:	f0 16 00 24 	mcall	r6[144]
//	add_task(get_mavlink_taskset(),  50000, &mavlink_send_radar);
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_estimator, MAVLINK_MSG_ID_LOCAL_POSITION_NED);
800110ee:	ec f5 06 dc 	ld.w	r5,r6[1756]
800110f2:	f0 16 00 25 	mcall	r6[148]
800110f6:	32 08       	mov	r8,32
800110f8:	0a 99       	mov	r9,r5
800110fa:	30 2a       	mov	r10,2
800110fc:	e2 7b 0d 40 	mov	r11,200000
80011100:	f0 16 00 24 	mcall	r6[144]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_global_position, MAVLINK_MSG_ID_GLOBAL_POSITION_INT);
80011104:	ec f5 07 3c 	ld.w	r5,r6[1852]
80011108:	f0 16 00 25 	mcall	r6[148]
8001110c:	32 18       	mov	r8,33
8001110e:	0a 99       	mov	r9,r5
80011110:	30 2a       	mov	r10,2
80011112:	e2 7b 0d 40 	mov	r11,200000
80011116:	f0 16 00 24 	mcall	r6[144]
	add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_gps_raw, MAVLINK_MSG_ID_GPS_RAW_INT);
8001111a:	ec f5 07 6c 	ld.w	r5,r6[1900]
8001111e:	f0 16 00 25 	mcall	r6[148]
80011122:	31 88       	mov	r8,24
80011124:	0a 99       	mov	r9,r5
80011126:	30 2a       	mov	r10,2
80011128:	e2 7b d0 90 	mov	r11,250000
8001112c:	f0 16 00 24 	mcall	r6[144]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_raw_rc_channels, MAVLINK_MSG_ID_RC_CHANNELS_RAW);
80011130:	ec f5 06 18 	ld.w	r5,r6[1560]
80011134:	f0 16 00 25 	mcall	r6[148]
80011138:	32 38       	mov	r8,35
8001113a:	0a 99       	mov	r9,r5
8001113c:	30 2a       	mov	r10,2
8001113e:	e2 7b 0d 40 	mov	r11,200000
80011142:	f0 16 00 24 	mcall	r6[144]
	add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_scaled_rc_channels, MAVLINK_MSG_ID_RC_CHANNELS_SCALED);
80011146:	ec f5 07 40 	ld.w	r5,r6[1856]
8001114a:	f0 16 00 25 	mcall	r6[148]
8001114e:	32 28       	mov	r8,34
80011150:	0a 99       	mov	r9,r5
80011152:	30 2a       	mov	r10,2
80011154:	e2 7b d0 90 	mov	r11,250000
80011158:	f0 16 00 24 	mcall	r6[144]
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_simulation, MAVLINK_MSG_ID_HIL_STATE);
8001115c:	ec f5 07 d0 	ld.w	r5,r6[2000]
80011160:	f0 16 00 25 	mcall	r6[148]
80011164:	35 a8       	mov	r8,90
80011166:	0a 99       	mov	r9,r5
80011168:	30 2a       	mov	r10,2
8001116a:	e6 7b a1 20 	mov	r11,500000
8001116e:	f0 16 00 24 	mcall	r6[144]
	//add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_kalman_estimator, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT);
	add_task(get_mavlink_taskset(),  250000, RUN_NEVER, &send_rt_stats, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT);
80011172:	ec f5 06 7c 	ld.w	r5,r6[1660]
80011176:	f0 16 00 25 	mcall	r6[148]
8001117a:	e0 68 00 fb 	mov	r8,251
8001117e:	0a 99       	mov	r9,r5
80011180:	30 0a       	mov	r10,0
80011182:	e2 7b d0 90 	mov	r11,250000
80011186:	f0 16 00 24 	mcall	r6[144]
	
	sort_taskset_by_period(get_mavlink_taskset());
8001118a:	f0 16 00 25 	mcall	r6[148]
8001118e:	18 98       	mov	r8,r12
80011190:	10 9c       	mov	r12,r8
80011192:	f0 16 01 a3 	mcall	r6[1676]
}
80011196:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001119a:	00 00       	add	r0,r0
8001119c:	80 01       	ld.sh	r1,r0[0x0]
8001119e:	0e 54       	eor	r4,r7

800111a0 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
800111a0:	eb cd 40 c0 	pushm	r6-r7,lr
800111a4:	1a 97       	mov	r7,sp
800111a6:	20 3d       	sub	sp,12
800111a8:	49 06       	lddpc	r6,800111e8 <mav_array_memcpy+0x48>
800111aa:	1e 26       	rsub	r6,pc
800111ac:	ef 4c ff fc 	st.w	r7[-4],r12
800111b0:	ef 4b ff f8 	st.w	r7[-8],r11
800111b4:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
800111b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800111bc:	58 08       	cp.w	r8,0
800111be:	c0 91       	brne	800111d0 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
800111c0:	ee fa ff f4 	ld.w	r10,r7[-12]
800111c4:	30 0b       	mov	r11,0
800111c6:	ee fc ff fc 	ld.w	r12,r7[-4]
800111ca:	f0 16 00 31 	mcall	r6[196]
800111ce:	c0 98       	rjmp	800111e0 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
800111d0:	ee fa ff f4 	ld.w	r10,r7[-12]
800111d4:	ee fb ff f8 	ld.w	r11,r7[-8]
800111d8:	ee fc ff fc 	ld.w	r12,r7[-4]
800111dc:	f0 16 00 21 	mcall	r6[132]
	}
}
800111e0:	2f dd       	sub	sp,-12
800111e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800111e6:	00 00       	add	r0,r0
800111e8:	80 01       	ld.sh	r1,r0[0x0]
800111ea:	10 2e       	rsub	lr,r8

800111ec <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800111ec:	eb cd 40 c0 	pushm	r6-r7,lr
800111f0:	1a 97       	mov	r7,sp
800111f2:	20 6d       	sub	sp,24
800111f4:	49 e6       	lddpc	r6,8001126c <interpolate+0x80>
800111f6:	1e 26       	rsub	r6,pc
800111f8:	ef 4c ff f8 	st.w	r7[-8],r12
800111fc:	ef 4b ff f4 	st.w	r7[-12],r11
80011200:	ef 4a ff f0 	st.w	r7[-16],r10
80011204:	ef 49 ff ec 	st.w	r7[-20],r9
80011208:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001120c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011210:	ee f8 ff f0 	ld.w	r8,r7[-16]
80011214:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80011218:	c0 41       	brne	80011220 <interpolate+0x34>
	{
		return y1;
8001121a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001121e:	c2 38       	rjmp	80011264 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80011220:	ee f9 ff e8 	ld.w	r9,r7[-24]
80011224:	ee f8 ff ec 	ld.w	r8,r7[-20]
80011228:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001122c:	ee fa ff f8 	ld.w	r10,r7[-8]
80011230:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011234:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80011238:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001123c:	ee fa ff f0 	ld.w	r10,r7[-16]
80011240:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011244:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80011248:	12 9b       	mov	r11,r9
8001124a:	10 9c       	mov	r12,r8
8001124c:	f0 16 00 08 	mcall	r6[32]
80011250:	18 98       	mov	r8,r12
80011252:	10 99       	mov	r9,r8
80011254:	ee f8 ff ec 	ld.w	r8,r7[-20]
80011258:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001125c:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80011260:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80011264:	10 9c       	mov	r12,r8
80011266:	2f ad       	sub	sp,-24
80011268:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001126c:	80 01       	ld.sh	r1,r0[0x0]
8001126e:	10 7a       	tst	r10,r8

80011270 <get_roll_from_remote>:
	#include "joystick_rc.h"
#endif



static float inline get_roll_from_remote()	{return rc_get_channel_neutral(RC_ROLL)*RC_ROLL_DIR * RC_SCALEFACTOR; };
80011270:	eb cd 40 c0 	pushm	r6-r7,lr
80011274:	1a 97       	mov	r7,sp
80011276:	48 e6       	lddpc	r6,800112ac <get_roll_from_remote+0x3c>
80011278:	1e 26       	rsub	r6,pc
8001127a:	30 1c       	mov	r12,1
8001127c:	f0 16 00 bf 	mcall	r6[764]
80011280:	18 98       	mov	r8,r12
80011282:	10 9c       	mov	r12,r8
80011284:	f0 16 00 1a 	mcall	r6[104]
80011288:	30 08       	mov	r8,0
8001128a:	e0 69 60 00 	mov	r9,24576
8001128e:	ea 19 40 7b 	orh	r9,0x407b
80011292:	f0 16 00 0c 	mcall	r6[48]
80011296:	14 98       	mov	r8,r10
80011298:	16 99       	mov	r9,r11
8001129a:	10 9a       	mov	r10,r8
8001129c:	12 9b       	mov	r11,r9
8001129e:	f0 16 00 09 	mcall	r6[36]
800112a2:	18 98       	mov	r8,r12
800112a4:	10 9c       	mov	r12,r8
800112a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800112aa:	00 00       	add	r0,r0
800112ac:	80 01       	ld.sh	r1,r0[0x0]
800112ae:	10 fc       	st.b	--r8,r12

800112b0 <get_pitch_from_remote>:
static float inline get_pitch_from_remote()	{return rc_get_channel_neutral(RC_PITCH)*RC_PITCH_DIR * RC_SCALEFACTOR; };
800112b0:	eb cd 40 c0 	pushm	r6-r7,lr
800112b4:	1a 97       	mov	r7,sp
800112b6:	48 e6       	lddpc	r6,800112ec <get_pitch_from_remote+0x3c>
800112b8:	1e 26       	rsub	r6,pc
800112ba:	30 2c       	mov	r12,2
800112bc:	f0 16 00 bf 	mcall	r6[764]
800112c0:	18 98       	mov	r8,r12
800112c2:	5c 38       	neg	r8
800112c4:	10 9c       	mov	r12,r8
800112c6:	f0 16 00 1a 	mcall	r6[104]
800112ca:	30 08       	mov	r8,0
800112cc:	e0 69 60 00 	mov	r9,24576
800112d0:	ea 19 40 7b 	orh	r9,0x407b
800112d4:	f0 16 00 0c 	mcall	r6[48]
800112d8:	14 98       	mov	r8,r10
800112da:	16 99       	mov	r9,r11
800112dc:	10 9a       	mov	r10,r8
800112de:	12 9b       	mov	r11,r9
800112e0:	f0 16 00 09 	mcall	r6[36]
800112e4:	18 98       	mov	r8,r12
800112e6:	10 9c       	mov	r12,r8
800112e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800112ec:	80 01       	ld.sh	r1,r0[0x0]
800112ee:	11 3c       	ld.ub	r12,r8++

800112f0 <get_yaw_from_remote>:
static float inline get_yaw_from_remote()	{return rc_get_channel_neutral(RC_YAW)*RC_YAW_DIR * RC_SCALEFACTOR; };
800112f0:	eb cd 40 c0 	pushm	r6-r7,lr
800112f4:	1a 97       	mov	r7,sp
800112f6:	48 e6       	lddpc	r6,8001132c <get_yaw_from_remote+0x3c>
800112f8:	1e 26       	rsub	r6,pc
800112fa:	30 3c       	mov	r12,3
800112fc:	f0 16 00 bf 	mcall	r6[764]
80011300:	18 98       	mov	r8,r12
80011302:	10 9c       	mov	r12,r8
80011304:	f0 16 00 1a 	mcall	r6[104]
80011308:	30 08       	mov	r8,0
8001130a:	e0 69 60 00 	mov	r9,24576
8001130e:	ea 19 40 7b 	orh	r9,0x407b
80011312:	f0 16 00 0c 	mcall	r6[48]
80011316:	14 98       	mov	r8,r10
80011318:	16 99       	mov	r9,r11
8001131a:	10 9a       	mov	r10,r8
8001131c:	12 9b       	mov	r11,r9
8001131e:	f0 16 00 09 	mcall	r6[36]
80011322:	18 98       	mov	r8,r12
80011324:	10 9c       	mov	r12,r8
80011326:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001132a:	00 00       	add	r0,r0
8001132c:	80 01       	ld.sh	r1,r0[0x0]
8001132e:	11 7c       	ld.ub	r12,--r8

80011330 <get_thrust_from_remote>:
static float inline get_thrust_from_remote()	{return rc_get_channel(RC_THROTTLE)*RC_THROTTLE_DIR*RC_SCALEFACTOR; };
80011330:	eb cd 40 c0 	pushm	r6-r7,lr
80011334:	1a 97       	mov	r7,sp
80011336:	48 e6       	lddpc	r6,8001136c <get_thrust_from_remote+0x3c>
80011338:	1e 26       	rsub	r6,pc
8001133a:	30 0c       	mov	r12,0
8001133c:	f0 16 00 1b 	mcall	r6[108]
80011340:	18 98       	mov	r8,r12
80011342:	10 9c       	mov	r12,r8
80011344:	f0 16 00 1a 	mcall	r6[104]
80011348:	30 08       	mov	r8,0
8001134a:	e0 69 60 00 	mov	r9,24576
8001134e:	ea 19 40 7b 	orh	r9,0x407b
80011352:	f0 16 00 0c 	mcall	r6[48]
80011356:	14 98       	mov	r8,r10
80011358:	16 99       	mov	r9,r11
8001135a:	10 9a       	mov	r10,r8
8001135c:	12 9b       	mov	r11,r9
8001135e:	f0 16 00 09 	mcall	r6[36]
80011362:	18 98       	mov	r8,r12
80011364:	10 9c       	mov	r12,r8
80011366:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001136a:	00 00       	add	r0,r0
8001136c:	80 01       	ld.sh	r1,r0[0x0]
8001136e:	11 bc       	ld.ub	r12,r8[0x3]

80011370 <get_command_from_remote>:


static inline Control_Command_t get_command_from_remote()
{
80011370:	eb cd 40 e0 	pushm	r5-r7,lr
80011374:	1a 97       	mov	r7,sp
80011376:	20 bd       	sub	sp,44
80011378:	4b a6       	lddpc	r6,80011460 <get_command_from_remote+0xf0>
8001137a:	1e 26       	rsub	r6,pc
8001137c:	18 95       	mov	r5,r12
	Control_Command_t controls;
	controls.rpy[ROLL]= get_roll_from_remote()*RC_INPUT_SCALE;
8001137e:	c7 9f       	rcall	80011270 <get_roll_from_remote>
80011380:	18 98       	mov	r8,r12
80011382:	10 9c       	mov	r12,r8
80011384:	f0 16 00 02 	mcall	r6[8]
80011388:	e0 68 99 9a 	mov	r8,39322
8001138c:	ea 18 99 99 	orh	r8,0x9999
80011390:	e0 69 99 99 	mov	r9,39321
80011394:	ea 19 3f e9 	orh	r9,0x3fe9
80011398:	f0 16 00 03 	mcall	r6[12]
8001139c:	14 98       	mov	r8,r10
8001139e:	16 99       	mov	r9,r11
800113a0:	10 9a       	mov	r10,r8
800113a2:	12 9b       	mov	r11,r9
800113a4:	f0 16 00 09 	mcall	r6[36]
800113a8:	18 98       	mov	r8,r12
800113aa:	ef 48 ff d4 	st.w	r7[-44],r8
	controls.rpy[PITCH]= get_pitch_from_remote()*RC_INPUT_SCALE;
800113ae:	c8 1f       	rcall	800112b0 <get_pitch_from_remote>
800113b0:	18 98       	mov	r8,r12
800113b2:	10 9c       	mov	r12,r8
800113b4:	f0 16 00 02 	mcall	r6[8]
800113b8:	e0 68 99 9a 	mov	r8,39322
800113bc:	ea 18 99 99 	orh	r8,0x9999
800113c0:	e0 69 99 99 	mov	r9,39321
800113c4:	ea 19 3f e9 	orh	r9,0x3fe9
800113c8:	f0 16 00 03 	mcall	r6[12]
800113cc:	14 98       	mov	r8,r10
800113ce:	16 99       	mov	r9,r11
800113d0:	10 9a       	mov	r10,r8
800113d2:	12 9b       	mov	r11,r9
800113d4:	f0 16 00 09 	mcall	r6[36]
800113d8:	18 98       	mov	r8,r12
800113da:	ef 48 ff d8 	st.w	r7[-40],r8
	controls.rpy[YAW]= get_yaw_from_remote()*RC_INPUT_SCALE;
800113de:	c8 9f       	rcall	800112f0 <get_yaw_from_remote>
800113e0:	18 98       	mov	r8,r12
800113e2:	10 9c       	mov	r12,r8
800113e4:	f0 16 00 02 	mcall	r6[8]
800113e8:	e0 68 99 9a 	mov	r8,39322
800113ec:	ea 18 99 99 	orh	r8,0x9999
800113f0:	e0 69 99 99 	mov	r9,39321
800113f4:	ea 19 3f e9 	orh	r9,0x3fe9
800113f8:	f0 16 00 03 	mcall	r6[12]
800113fc:	14 98       	mov	r8,r10
800113fe:	16 99       	mov	r9,r11
80011400:	10 9a       	mov	r10,r8
80011402:	12 9b       	mov	r11,r9
80011404:	f0 16 00 09 	mcall	r6[36]
80011408:	18 98       	mov	r8,r12
8001140a:	ef 48 ff dc 	st.w	r7[-36],r8
	controls.thrust = get_thrust_from_remote();
8001140e:	c9 1f       	rcall	80011330 <get_thrust_from_remote>
80011410:	18 98       	mov	r8,r12
80011412:	ef 48 ff e0 	st.w	r7[-32],r8
	
	return controls;
80011416:	0a 98       	mov	r8,r5
80011418:	ee c9 00 2c 	sub	r9,r7,44
8001141c:	f0 ca 00 00 	sub	r10,r8,0
80011420:	f2 cb 00 00 	sub	r11,r9,0
80011424:	76 0c       	ld.w	r12,r11[0x0]
80011426:	95 0c       	st.w	r10[0x0],r12
80011428:	76 1c       	ld.w	r12,r11[0x4]
8001142a:	95 1c       	st.w	r10[0x4],r12
8001142c:	76 2c       	ld.w	r12,r11[0x8]
8001142e:	95 2c       	st.w	r10[0x8],r12
80011430:	76 3b       	ld.w	r11,r11[0xc]
80011432:	95 3b       	st.w	r10[0xc],r11
80011434:	f0 ca ff f0 	sub	r10,r8,-16
80011438:	f2 cb ff f0 	sub	r11,r9,-16
8001143c:	76 0c       	ld.w	r12,r11[0x0]
8001143e:	95 0c       	st.w	r10[0x0],r12
80011440:	76 1c       	ld.w	r12,r11[0x4]
80011442:	95 1c       	st.w	r10[0x4],r12
80011444:	76 2c       	ld.w	r12,r11[0x8]
80011446:	95 2c       	st.w	r10[0x8],r12
80011448:	76 3b       	ld.w	r11,r11[0xc]
8001144a:	95 3b       	st.w	r10[0xc],r11
8001144c:	f2 ea 00 20 	ld.d	r10,r9[32]
80011450:	f0 eb 00 20 	st.d	r8[32],r10
80011454:	72 a9       	ld.w	r9,r9[0x28]
80011456:	91 a9       	st.w	r8[0x28],r9
}
80011458:	0a 9c       	mov	r12,r5
8001145a:	2f 5d       	sub	sp,-44
8001145c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80011460:	80 01       	ld.sh	r1,r0[0x0]
80011462:	11 fe       	ld.ub	lr,r8[0x7]

80011464 <get_channel_mode>:
	}
#endif

#ifdef TURNIGY_REMOTE
	static inline void get_channel_mode(uint8_t* chanSwitch)
	{
80011464:	eb cd 40 c0 	pushm	r6-r7,lr
80011468:	1a 97       	mov	r7,sp
8001146a:	20 1d       	sub	sp,4
8001146c:	4a d6       	lddpc	r6,80011520 <get_channel_mode+0xbc>
8001146e:	1e 26       	rsub	r6,pc
80011470:	ef 4c ff fc 	st.w	r7[-4],r12
		if (rc_get_channel(RC_SAFETY)<0)
80011474:	30 4c       	mov	r12,4
80011476:	f0 16 00 1b 	mcall	r6[108]
8001147a:	18 98       	mov	r8,r12
8001147c:	10 99       	mov	r9,r8
8001147e:	30 08       	mov	r8,0
80011480:	f0 09 19 00 	cp.h	r9,r8
80011484:	c0 84       	brge	80011494 <get_channel_mode+0x30>
		{
			*chanSwitch |= 0x00;
80011486:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001148a:	11 88       	ld.ub	r8,r8[0x0]
8001148c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80011490:	b2 88       	st.b	r9[0x0],r8
80011492:	c4 38       	rjmp	80011518 <get_channel_mode+0xb4>
			}else if(rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)<0){
80011494:	30 4c       	mov	r12,4
80011496:	f0 16 00 1b 	mcall	r6[108]
8001149a:	18 98       	mov	r8,r12
8001149c:	10 99       	mov	r9,r8
8001149e:	30 08       	mov	r8,0
800114a0:	f0 09 19 00 	cp.h	r9,r8
800114a4:	e0 8a 00 14 	brle	800114cc <get_channel_mode+0x68>
800114a8:	30 5c       	mov	r12,5
800114aa:	f0 16 00 1b 	mcall	r6[108]
800114ae:	18 98       	mov	r8,r12
800114b0:	10 99       	mov	r9,r8
800114b2:	30 08       	mov	r8,0
800114b4:	f0 09 19 00 	cp.h	r9,r8
800114b8:	c0 a4       	brge	800114cc <get_channel_mode+0x68>
			*chanSwitch |= 0x01;
800114ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800114be:	11 88       	ld.ub	r8,r8[0x0]
800114c0:	a1 a8       	sbr	r8,0x0
800114c2:	5c 58       	castu.b	r8
800114c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800114c8:	b2 88       	st.b	r9[0x0],r8
	static inline void get_channel_mode(uint8_t* chanSwitch)
	{
		if (rc_get_channel(RC_SAFETY)<0)
		{
			*chanSwitch |= 0x00;
			}else if(rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)<0){
800114ca:	c2 78       	rjmp	80011518 <get_channel_mode+0xb4>
			*chanSwitch |= 0x01;
			}else if (rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)>20){
800114cc:	30 4c       	mov	r12,4
800114ce:	f0 16 00 1b 	mcall	r6[108]
800114d2:	18 98       	mov	r8,r12
800114d4:	10 99       	mov	r9,r8
800114d6:	30 08       	mov	r8,0
800114d8:	f0 09 19 00 	cp.h	r9,r8
800114dc:	e0 8a 00 16 	brle	80011508 <get_channel_mode+0xa4>
800114e0:	30 5c       	mov	r12,5
800114e2:	f0 16 00 1b 	mcall	r6[108]
800114e6:	18 98       	mov	r8,r12
800114e8:	10 99       	mov	r9,r8
800114ea:	31 48       	mov	r8,20
800114ec:	f0 09 19 00 	cp.h	r9,r8
800114f0:	e0 8a 00 0c 	brle	80011508 <get_channel_mode+0xa4>
			*chanSwitch |= 0x03;
800114f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800114f8:	11 88       	ld.ub	r8,r8[0x0]
800114fa:	e8 18 00 03 	orl	r8,0x3
800114fe:	5c 58       	castu.b	r8
80011500:	ee f9 ff fc 	ld.w	r9,r7[-4]
80011504:	b2 88       	st.b	r9[0x0],r8
		if (rc_get_channel(RC_SAFETY)<0)
		{
			*chanSwitch |= 0x00;
			}else if(rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)<0){
			*chanSwitch |= 0x01;
			}else if (rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)>20){
80011506:	c0 98       	rjmp	80011518 <get_channel_mode+0xb4>
			*chanSwitch |= 0x03;
			}else{
			*chanSwitch |= 0x02;
80011508:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001150c:	11 88       	ld.ub	r8,r8[0x0]
8001150e:	a1 b8       	sbr	r8,0x1
80011510:	5c 58       	castu.b	r8
80011512:	ee f9 ff fc 	ld.w	r9,r7[-4]
80011516:	b2 88       	st.b	r9[0x0],r8
		}
	}
80011518:	2f fd       	sub	sp,-4
8001151a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001151e:	00 00       	add	r0,r0
80011520:	80 01       	ld.sh	r1,r0[0x0]
80011522:	12 f2       	st.b	--r9,r2

80011524 <get_main_taskset>:

#define PRESSURE_LPF 0.1

central_data_t *centralData;

task_set* get_main_taskset() {
80011524:	eb cd 40 c0 	pushm	r6-r7,lr
80011528:	1a 97       	mov	r7,sp
8001152a:	48 46       	lddpc	r6,80011538 <get_main_taskset+0x14>
8001152c:	1e 26       	rsub	r6,pc
	return &main_tasks;
8001152e:	ec f8 01 2c 	ld.w	r8,r6[300]
}
80011532:	10 9c       	mov	r12,r8
80011534:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011538:	80 01       	ld.sh	r1,r0[0x0]
8001153a:	13 b0       	ld.ub	r0,r9[0x3]

8001153c <run_imu_update>:

task_return_t run_imu_update() {
8001153c:	eb cd 40 c0 	pushm	r6-r7,lr
80011540:	1a 97       	mov	r7,sp
80011542:	48 d6       	lddpc	r6,80011574 <run_imu_update+0x38>
80011544:	1e 26       	rsub	r6,pc
	imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);	
80011546:	ec f8 00 00 	ld.w	r8,r6[0]
8001154a:	70 08       	ld.w	r8,r8[0x0]
8001154c:	f0 c9 f4 f8 	sub	r9,r8,-2824
80011550:	ec f8 00 00 	ld.w	r8,r6[0]
80011554:	70 08       	ld.w	r8,r8[0x0]
80011556:	f0 ca ef 3c 	sub	r10,r8,-4292
8001155a:	ec f8 00 00 	ld.w	r8,r6[0]
8001155e:	70 08       	ld.w	r8,r8[0x0]
80011560:	f0 cb f2 c4 	sub	r11,r8,-3388
80011564:	ec f8 00 00 	ld.w	r8,r6[0]
80011568:	70 08       	ld.w	r8,r8[0x0]
8001156a:	10 9c       	mov	r12,r8
8001156c:	f0 16 00 96 	mcall	r6[600]
}	
80011570:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011574:	80 01       	ld.sh	r1,r0[0x0]
80011576:	13 c8       	ld.ub	r8,r9[0x4]
80011578:	6d 6f       	ld.w	pc,r6[0x58]
8001157a:	74 6f       	ld.w	pc,r10[0x18]
8001157c:	72 20       	ld.w	r0,r9[0x8]
8001157e:	6f 6e       	ld.w	lr,r7[0x58]
80011580:	3a 20       	mov	r0,-94
80011582:	79 61       	ld.w	r1,r12[0x58]
80011584:	77 3d       	ld.w	sp,r11[0x4c]
80011586:	0a 00       	add	r0,r5

80011588 <rc_user_channels>:

void rc_user_channels(uint8_t *chanSwitch, int8_t *rc_check, int8_t *motorbool)
{
80011588:	eb cd 40 e0 	pushm	r5-r7,lr
8001158c:	1a 97       	mov	r7,sp
8001158e:	20 3d       	sub	sp,12
80011590:	4c f6       	lddpc	r6,800116cc <rc_user_channels+0x144>
80011592:	1e 26       	rsub	r6,pc
80011594:	ef 4c ff fc 	st.w	r7[-4],r12
80011598:	ef 4b ff f8 	st.w	r7[-8],r11
8001159c:	ef 4a ff f4 	st.w	r7[-12],r10
	
	get_channel_mode(chanSwitch);
800115a0:	ee fc ff fc 	ld.w	r12,r7[-4]
800115a4:	c6 0f       	rcall	80011464 <get_channel_mode>
	//dbg_print_num(*chanSwitch,10);
	//dbg_print_num(getChannel(4),10);
	//dbg_print_num(getChannel(5),10);
	//dbg_print("\n");
	
	if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() > 0.9))
800115a6:	cc 5e       	rcall	80011330 <get_thrust_from_remote>
800115a8:	18 98       	mov	r8,r12
800115aa:	10 9c       	mov	r12,r8
800115ac:	f0 16 00 02 	mcall	r6[8]
800115b0:	30 05       	mov	r5,0
800115b2:	e0 68 66 66 	mov	r8,26214
800115b6:	ea 18 66 66 	orh	r8,0x6666
800115ba:	e0 69 66 66 	mov	r9,26214
800115be:	ea 19 bf ee 	orh	r9,0xbfee
800115c2:	f0 16 00 1d 	mcall	r6[116]
800115c6:	18 98       	mov	r8,r12
800115c8:	58 08       	cp.w	r8,0
800115ca:	c0 20       	breq	800115ce <rc_user_channels+0x46>
800115cc:	30 15       	mov	r5,1
800115ce:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
800115d2:	c2 90       	breq	80011624 <rc_user_channels+0x9c>
800115d4:	c8 ee       	rcall	800112f0 <get_yaw_from_remote>
800115d6:	18 98       	mov	r8,r12
800115d8:	10 9c       	mov	r12,r8
800115da:	f0 16 00 02 	mcall	r6[8]
800115de:	14 98       	mov	r8,r10
800115e0:	16 99       	mov	r9,r11
800115e2:	30 05       	mov	r5,0
800115e4:	e0 6a cc cd 	mov	r10,52429
800115e8:	ea 1a cc cc 	orh	r10,0xcccc
800115ec:	e0 6b cc cc 	mov	r11,52428
800115f0:	ea 1b 3f ec 	orh	r11,0x3fec
800115f4:	f0 16 00 1d 	mcall	r6[116]
800115f8:	18 98       	mov	r8,r12
800115fa:	58 08       	cp.w	r8,0
800115fc:	c0 20       	breq	80011600 <rc_user_channels+0x78>
800115fe:	30 15       	mov	r5,1
80011600:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80011604:	c1 00       	breq	80011624 <rc_user_channels+0x9c>
	{
		//dbg_print("motor on\n");
		dbg_print("motor on: yaw=\n"); dbg_putfloat(get_yaw_from_remote(),2);
80011606:	fe cc 00 8e 	sub	r12,pc,142
8001160a:	f0 16 00 01 	mcall	r6[4]
8001160e:	c7 1e       	rcall	800112f0 <get_yaw_from_remote>
80011610:	18 98       	mov	r8,r12
80011612:	30 2b       	mov	r11,2
80011614:	10 9c       	mov	r12,r8
80011616:	f0 16 02 0b 	mcall	r6[2092]
		*motorbool = 1;
8001161a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001161e:	30 18       	mov	r8,1
80011620:	b2 88       	st.b	r9[0x0],r8
	//dbg_print_num(*chanSwitch,10);
	//dbg_print_num(getChannel(4),10);
	//dbg_print_num(getChannel(5),10);
	//dbg_print("\n");
	
	if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() > 0.9))
80011622:	c3 88       	rjmp	80011692 <rc_user_channels+0x10a>
	{
		//dbg_print("motor on\n");
		dbg_print("motor on: yaw=\n"); dbg_putfloat(get_yaw_from_remote(),2);
		*motorbool = 1;
	}else if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() <-0.9))
80011624:	c8 6e       	rcall	80011330 <get_thrust_from_remote>
80011626:	18 98       	mov	r8,r12
80011628:	10 9c       	mov	r12,r8
8001162a:	f0 16 00 02 	mcall	r6[8]
8001162e:	30 05       	mov	r5,0
80011630:	e0 68 66 66 	mov	r8,26214
80011634:	ea 18 66 66 	orh	r8,0x6666
80011638:	e0 69 66 66 	mov	r9,26214
8001163c:	ea 19 bf ee 	orh	r9,0xbfee
80011640:	f0 16 00 1d 	mcall	r6[116]
80011644:	18 98       	mov	r8,r12
80011646:	58 08       	cp.w	r8,0
80011648:	c0 20       	breq	8001164c <rc_user_channels+0xc4>
8001164a:	30 15       	mov	r5,1
8001164c:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80011650:	c1 d0       	breq	8001168a <rc_user_channels+0x102>
80011652:	c4 fe       	rcall	800112f0 <get_yaw_from_remote>
80011654:	18 98       	mov	r8,r12
80011656:	10 9c       	mov	r12,r8
80011658:	f0 16 00 02 	mcall	r6[8]
8001165c:	30 05       	mov	r5,0
8001165e:	e0 68 cc cd 	mov	r8,52429
80011662:	ea 18 cc cc 	orh	r8,0xcccc
80011666:	e0 69 cc cc 	mov	r9,52428
8001166a:	ea 19 bf ec 	orh	r9,0xbfec
8001166e:	f0 16 00 1d 	mcall	r6[116]
80011672:	18 98       	mov	r8,r12
80011674:	58 08       	cp.w	r8,0
80011676:	c0 20       	breq	8001167a <rc_user_channels+0xf2>
80011678:	30 15       	mov	r5,1
8001167a:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8001167e:	c0 60       	breq	8001168a <rc_user_channels+0x102>
	{
		//dbg_print("motor off\n");
		*motorbool = -1;
80011680:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011684:	3f f8       	mov	r8,-1
80011686:	b2 88       	st.b	r9[0x0],r8
	if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() > 0.9))
	{
		//dbg_print("motor on\n");
		dbg_print("motor on: yaw=\n"); dbg_putfloat(get_yaw_from_remote(),2);
		*motorbool = 1;
	}else if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() <-0.9))
80011688:	c0 58       	rjmp	80011692 <rc_user_channels+0x10a>
	{
		//dbg_print("motor off\n");
		*motorbool = -1;
	}else{
		//dbg_print("motor nothing\n");
		*motorbool = 0;
8001168a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001168e:	30 08       	mov	r8,0
80011690:	b2 88       	st.b	r9[0x0],r8
	}
	
	switch (rc_check_receivers())
80011692:	f0 16 00 a7 	mcall	r6[668]
80011696:	18 98       	mov	r8,r12
80011698:	5c 58       	castu.b	r8
8001169a:	5c 68       	casts.b	r8
8001169c:	5b f8       	cp.w	r8,-1
8001169e:	c0 b0       	breq	800116b4 <rc_user_channels+0x12c>
800116a0:	58 18       	cp.w	r8,1
800116a2:	c0 40       	breq	800116aa <rc_user_channels+0x122>
800116a4:	5b e8       	cp.w	r8,-2
800116a6:	c0 c0       	breq	800116be <rc_user_channels+0x136>
800116a8:	c0 f8       	rjmp	800116c6 <rc_user_channels+0x13e>
	{
		case 1:
		*rc_check = 1;
800116aa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800116ae:	30 18       	mov	r8,1
800116b0:	b2 88       	st.b	r9[0x0],r8
		break;
800116b2:	c0 a8       	rjmp	800116c6 <rc_user_channels+0x13e>
		case -1:
		*rc_check = -1;
800116b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800116b8:	3f f8       	mov	r8,-1
800116ba:	b2 88       	st.b	r9[0x0],r8
		break;
800116bc:	c0 58       	rjmp	800116c6 <rc_user_channels+0x13e>
		case -2:
		*rc_check = -2;
800116be:	ee f9 ff f8 	ld.w	r9,r7[-8]
800116c2:	3f e8       	mov	r8,-2
800116c4:	b2 88       	st.b	r9[0x0],r8
	//dbg_print("rc_check: ");
	//dbg_print_num(rc_check,10);
	//dbg_print("; motorbool : ");
	//dbg_print_num(*motorbool,10);
	//dbg_print("\n");
}
800116c6:	2f dd       	sub	sp,-12
800116c8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800116cc:	80 01       	ld.sh	r1,r0[0x0]
800116ce:	14 16       	sub	r6,r10
800116d0:	53 77       	stdsp	sp[0xdc],r7
800116d2:	69 74       	ld.w	r4,r4[0x5c]
800116d4:	63 68       	ld.w	r8,r1[0x58]
800116d6:	69 6e       	ld.w	lr,r4[0x58]
800116d8:	67 20       	ld.w	r0,r3[0x48]
800116da:	6f 6e       	ld.w	lr,r7[0x58]
800116dc:	20 74       	sub	r4,7
800116de:	68 65       	ld.w	r5,r4[0x18]
800116e0:	20 6d       	sub	sp,24
800116e2:	6f 74       	ld.w	r4,r7[0x5c]
800116e4:	6f 72       	ld.w	r2,r7[0x5c]
800116e6:	73 21       	ld.w	r1,r9[0x48]
800116e8:	0a 00       	add	r0,r5
800116ea:	00 00       	add	r0,r0
800116ec:	53 77       	stdsp	sp[0xdc],r7
800116ee:	69 74       	ld.w	r4,r4[0x5c]
800116f0:	63 68       	ld.w	r8,r1[0x58]
800116f2:	65 73       	ld.w	r3,r2[0x5c]
800116f4:	20 6e       	sub	lr,6
800116f6:	6f 74       	ld.w	r4,r7[0x5c]
800116f8:	20 72       	sub	r2,7
800116fa:	65 61       	ld.w	r1,r2[0x58]
800116fc:	64 79       	ld.w	r9,r2[0x1c]
800116fe:	2c 20       	sub	r0,-62
80011700:	62 6f       	ld.w	pc,r1[0x18]
80011702:	74 68       	ld.w	r8,r10[0x18]
80011704:	20 73       	sub	r3,7
80011706:	68 6f       	ld.w	pc,r4[0x18]
80011708:	75 6c       	ld.w	r12,r10[0x58]
8001170a:	64 20       	ld.w	r0,r2[0x8]
8001170c:	62 65       	ld.w	r5,r1[0x18]
8001170e:	20 70       	sub	r0,7
80011710:	75 73       	ld.w	r3,r10[0x5c]
80011712:	68 65       	ld.w	r5,r4[0x18]
80011714:	64 21       	ld.w	r1,r2[0x8]
80011716:	0a 00       	add	r0,r5
80011718:	53 77       	stdsp	sp[0xdc],r7
8001171a:	69 74       	ld.w	r4,r4[0x5c]
8001171c:	63 68       	ld.w	r8,r1[0x58]
8001171e:	69 6e       	ld.w	lr,r4[0x58]
80011720:	67 20       	ld.w	r0,r3[0x48]
80011722:	6f 66       	ld.w	r6,r7[0x58]
80011724:	66 20       	ld.w	r0,r3[0x8]
80011726:	6d 6f       	ld.w	pc,r6[0x58]
80011728:	74 6f       	ld.w	pc,r10[0x18]
8001172a:	72 73       	ld.w	r3,r9[0x1c]
8001172c:	21 0a       	sub	r10,16
	...

80011730 <set_mav_mode_n_state>:

task_return_t set_mav_mode_n_state()
{
80011730:	eb cd 40 c0 	pushm	r6-r7,lr
80011734:	1a 97       	mov	r7,sp
80011736:	20 1d       	sub	sp,4
80011738:	fe f6 03 9c 	ld.w	r6,pc[924]
8001173c:	1e 26       	rsub	r6,pc
	uint8_t channelSwitches = 0;
8001173e:	30 08       	mov	r8,0
80011740:	ef 68 ff ff 	st.b	r7[-1],r8
	int8_t RC_check = 0;
80011744:	30 08       	mov	r8,0
80011746:	ef 68 ff fe 	st.b	r7[-2],r8
	int8_t motor_switch = 0;
8001174a:	30 08       	mov	r8,0
8001174c:	ef 68 ff fd 	st.b	r7[-3],r8
	
	LED_Toggle(LED1);
80011750:	30 2c       	mov	r12,2
80011752:	f0 16 01 c8 	mcall	r6[1824]
	
	rc_user_channels(&channelSwitches,&RC_check, &motor_switch);
80011756:	ee ca 00 03 	sub	r10,r7,3
8001175a:	ee c9 00 02 	sub	r9,r7,2
8001175e:	ee c8 00 01 	sub	r8,r7,1
80011762:	12 9b       	mov	r11,r9
80011764:	10 9c       	mov	r12,r8
80011766:	f0 16 01 54 	mcall	r6[1360]
	
	switch(centralData->mav_state)
8001176a:	ec f8 00 00 	ld.w	r8,r6[0]
8001176e:	70 08       	ld.w	r8,r8[0x0]
80011770:	f1 38 10 bd 	ld.ub	r8,r8[4285]
80011774:	58 48       	cp.w	r8,4
80011776:	c6 50       	breq	80011840 <set_mav_mode_n_state+0x110>
80011778:	e0 89 00 09 	brgt	8001178a <set_mav_mode_n_state+0x5a>
8001177c:	58 28       	cp.w	r8,2
8001177e:	e0 80 01 a2 	breq	80011ac2 <set_mav_mode_n_state+0x392>
80011782:	58 38       	cp.w	r8,3
80011784:	c0 b0       	breq	8001179a <set_mav_mode_n_state+0x6a>
80011786:	e0 8f 01 a3 	bral	80011acc <set_mav_mode_n_state+0x39c>
8001178a:	58 58       	cp.w	r8,5
8001178c:	e0 80 00 fa 	breq	80011980 <set_mav_mode_n_state+0x250>
80011790:	58 68       	cp.w	r8,6
80011792:	e0 80 01 70 	breq	80011a72 <set_mav_mode_n_state+0x342>
80011796:	e0 8f 01 9b 	bral	80011acc <set_mav_mode_n_state+0x39c>
	{
		case MAV_STATE_CALIBRATING:
			break;
		case MAV_STATE_STANDBY:
			if (motor_switch == 1)
8001179a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8001179e:	30 18       	mov	r8,1
800117a0:	f0 09 18 00 	cp.b	r9,r8
800117a4:	e0 81 01 91 	brne	80011ac6 <set_mav_mode_n_state+0x396>
			{
				switch(channelSwitches)
800117a8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800117ac:	58 18       	cp.w	r8,1
800117ae:	c3 70       	breq	8001181c <set_mav_mode_n_state+0xec>
800117b0:	e0 89 00 06 	brgt	800117bc <set_mav_mode_n_state+0x8c>
800117b4:	58 08       	cp.w	r8,0
800117b6:	c0 90       	breq	800117c8 <set_mav_mode_n_state+0x98>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
						break;
				}
			}
			break;
800117b8:	e0 8f 01 8a 	bral	80011acc <set_mav_mode_n_state+0x39c>
		case MAV_STATE_CALIBRATING:
			break;
		case MAV_STATE_STANDBY:
			if (motor_switch == 1)
			{
				switch(channelSwitches)
800117bc:	58 28       	cp.w	r8,2
800117be:	c3 40       	breq	80011826 <set_mav_mode_n_state+0xf6>
800117c0:	58 38       	cp.w	r8,3
800117c2:	c3 70       	breq	80011830 <set_mav_mode_n_state+0x100>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
						break;
				}
			}
			break;
800117c4:	e0 8f 01 84 	bral	80011acc <set_mav_mode_n_state+0x39c>
			if (motor_switch == 1)
			{
				switch(channelSwitches)
				{
					case 0:
						dbg_print("Switching on the motors!\n");
800117c8:	fe cc 00 f8 	sub	r12,pc,248
800117cc:	f0 16 00 01 	mcall	r6[4]
						position_reset_home_altitude(&centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);
800117d0:	ec f8 00 00 	ld.w	r8,r6[0]
800117d4:	70 08       	ld.w	r8,r8[0x0]
800117d6:	f0 ca f4 f8 	sub	r10,r8,-2824
800117da:	ec f8 00 00 	ld.w	r8,r6[0]
800117de:	70 08       	ld.w	r8,r8[0x0]
800117e0:	f0 c9 ef 3c 	sub	r9,r8,-4292
800117e4:	ec f8 00 00 	ld.w	r8,r6[0]
800117e8:	70 08       	ld.w	r8,r8[0x0]
800117ea:	f0 c8 f2 c4 	sub	r8,r8,-3388
800117ee:	12 9b       	mov	r11,r9
800117f0:	10 9c       	mov	r12,r8
800117f2:	f0 16 02 07 	mcall	r6[2076]
						centralData->controls.run_mode = MOTORS_ON;
800117f6:	ec f8 00 00 	ld.w	r8,r6[0]
800117fa:	70 08       	ld.w	r8,r8[0x0]
800117fc:	30 19       	mov	r9,1
800117fe:	f1 49 01 70 	st.w	r8[368],r9
						centralData->mav_state = MAV_STATE_ACTIVE;
80011802:	ec f8 00 00 	ld.w	r8,r6[0]
80011806:	70 09       	ld.w	r9,r8[0x0]
80011808:	30 48       	mov	r8,4
8001180a:	f3 68 10 bd 	st.b	r9[4285],r8
						centralData->mav_mode = MAV_MODE_MANUAL_ARMED;
8001180e:	ec f8 00 00 	ld.w	r8,r6[0]
80011812:	70 09       	ld.w	r9,r8[0x0]
80011814:	3c 08       	mov	r8,-64
80011816:	f3 68 10 bc 	st.b	r9[4284],r8
						break;
8001181a:	c1 18       	rjmp	8001183c <set_mav_mode_n_state+0x10c>
					case 1:
						dbg_print("Switches not ready, both should be pushed!\n");
8001181c:	fe cc 01 30 	sub	r12,pc,304
80011820:	f0 16 00 01 	mcall	r6[4]
						//centralData->controls.run_mode = MOTORS_ON;
						//centralData->mav_state = MAV_STATE_ACTIVE;
						//centralData->mav_mode = MAV_MODE_STABILIZE_ARMED;
						break;
80011824:	c0 c8       	rjmp	8001183c <set_mav_mode_n_state+0x10c>
					case 2:
						dbg_print("Switches not ready, both should be pushed!\n");
80011826:	fe cc 01 3a 	sub	r12,pc,314
8001182a:	f0 16 00 01 	mcall	r6[4]
						break;
8001182e:	c0 78       	rjmp	8001183c <set_mav_mode_n_state+0x10c>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
80011830:	fe cc 01 44 	sub	r12,pc,324
80011834:	f0 16 00 01 	mcall	r6[4]
						break;
				}
			}
			break;
80011838:	e0 8f 01 4a 	bral	80011acc <set_mav_mode_n_state+0x39c>
8001183c:	e0 8f 01 48 	bral	80011acc <set_mav_mode_n_state+0x39c>
		case MAV_STATE_ACTIVE:
			switch(channelSwitches)
80011840:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80011844:	58 18       	cp.w	r8,1
80011846:	c1 80       	breq	80011876 <set_mav_mode_n_state+0x146>
80011848:	e0 89 00 05 	brgt	80011852 <set_mav_mode_n_state+0x122>
8001184c:	58 08       	cp.w	r8,0
8001184e:	c0 70       	breq	8001185c <set_mav_mode_n_state+0x12c>
80011850:	c2 d8       	rjmp	800118aa <set_mav_mode_n_state+0x17a>
80011852:	58 28       	cp.w	r8,2
80011854:	c1 e0       	breq	80011890 <set_mav_mode_n_state+0x160>
80011856:	58 38       	cp.w	r8,3
80011858:	c2 30       	breq	8001189e <set_mav_mode_n_state+0x16e>
8001185a:	c2 88       	rjmp	800118aa <set_mav_mode_n_state+0x17a>
			{
				case 0:
					centralData->waypoint_hold_init = false;
8001185c:	ec f8 00 00 	ld.w	r8,r6[0]
80011860:	70 09       	ld.w	r9,r8[0x0]
80011862:	30 08       	mov	r8,0
80011864:	f3 68 10 b7 	st.b	r9[4279],r8
					centralData->mav_mode= MAV_MODE_MANUAL_ARMED;
80011868:	ec f8 00 00 	ld.w	r8,r6[0]
8001186c:	70 09       	ld.w	r9,r8[0x0]
8001186e:	3c 08       	mov	r8,-64
80011870:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
80011874:	c1 b8       	rjmp	800118aa <set_mav_mode_n_state+0x17a>
				case 1:
					centralData->waypoint_hold_init = false;
80011876:	ec f8 00 00 	ld.w	r8,r6[0]
8001187a:	70 09       	ld.w	r9,r8[0x0]
8001187c:	30 08       	mov	r8,0
8001187e:	f3 68 10 b7 	st.b	r9[4279],r8
					centralData->mav_mode= MAV_MODE_STABILIZE_ARMED;
80011882:	ec f8 00 00 	ld.w	r8,r6[0]
80011886:	70 09       	ld.w	r9,r8[0x0]
80011888:	3d 08       	mov	r8,-48
8001188a:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
8001188e:	c0 e8       	rjmp	800118aa <set_mav_mode_n_state+0x17a>
				case 2:
					centralData->mav_mode = MAV_MODE_GUIDED_ARMED;
80011890:	ec f8 00 00 	ld.w	r8,r6[0]
80011894:	70 09       	ld.w	r9,r8[0x0]
80011896:	3d 88       	mov	r8,-40
80011898:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
8001189c:	c0 78       	rjmp	800118aa <set_mav_mode_n_state+0x17a>
				case 3:
					
					centralData->mav_mode = MAV_MODE_AUTO_ARMED;
8001189e:	ec f8 00 00 	ld.w	r8,r6[0]
800118a2:	70 09       	ld.w	r9,r8[0x0]
800118a4:	3d c8       	mov	r8,-36
800118a6:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
			}
			
			switch (centralData->mav_mode)
800118aa:	ec f8 00 00 	ld.w	r8,r6[0]
800118ae:	70 08       	ld.w	r8,r8[0x0]
800118b0:	f1 38 10 bc 	ld.ub	r8,r8[4284]
800118b4:	e0 48 00 d0 	cp.w	r8,208
800118b8:	c1 50       	breq	800118e2 <set_mav_mode_n_state+0x1b2>
800118ba:	e0 89 00 06 	brgt	800118c6 <set_mav_mode_n_state+0x196>
800118be:	e0 48 00 c0 	cp.w	r8,192
800118c2:	c0 90       	breq	800118d4 <set_mav_mode_n_state+0x1a4>
800118c4:	c2 88       	rjmp	80011914 <set_mav_mode_n_state+0x1e4>
800118c6:	e0 48 00 d8 	cp.w	r8,216
800118ca:	c1 30       	breq	800118f0 <set_mav_mode_n_state+0x1c0>
800118cc:	e0 48 00 dc 	cp.w	r8,220
800118d0:	c1 30       	breq	800118f6 <set_mav_mode_n_state+0x1c6>
800118d2:	c2 18       	rjmp	80011914 <set_mav_mode_n_state+0x1e4>
			{
				case MAV_MODE_MANUAL_ARMED:
					centralData->waypoint_hold_init = false;
800118d4:	ec f8 00 00 	ld.w	r8,r6[0]
800118d8:	70 09       	ld.w	r9,r8[0x0]
800118da:	30 08       	mov	r8,0
800118dc:	f3 68 10 b7 	st.b	r9[4279],r8
					break;
800118e0:	c1 a8       	rjmp	80011914 <set_mav_mode_n_state+0x1e4>
				case MAV_MODE_STABILIZE_ARMED:
					centralData->waypoint_hold_init = false;
800118e2:	ec f8 00 00 	ld.w	r8,r6[0]
800118e6:	70 09       	ld.w	r9,r8[0x0]
800118e8:	30 08       	mov	r8,0
800118ea:	f3 68 10 b7 	st.b	r9[4279],r8
					break;
800118ee:	c1 38       	rjmp	80011914 <set_mav_mode_n_state+0x1e4>
				case MAV_MODE_GUIDED_ARMED:
					waypoint_hold_position_handler();
800118f0:	f0 16 01 bd 	mcall	r6[1780]
					break;
800118f4:	c1 08       	rjmp	80011914 <set_mav_mode_n_state+0x1e4>
				case MAV_MODE_AUTO_ARMED:
					if (centralData->waypoint_set)
800118f6:	ec f8 00 00 	ld.w	r8,r6[0]
800118fa:	70 08       	ld.w	r8,r8[0x0]
800118fc:	f1 38 10 b4 	ld.ub	r8,r8[4276]
80011900:	58 08       	cp.w	r8,0
80011902:	c0 70       	breq	80011910 <set_mav_mode_n_state+0x1e0>
					{
						centralData->waypoint_hold_init = false;
80011904:	ec f8 00 00 	ld.w	r8,r6[0]
80011908:	70 09       	ld.w	r9,r8[0x0]
8001190a:	30 08       	mov	r8,0
8001190c:	f3 68 10 b7 	st.b	r9[4279],r8
					}
					waypoint_navigation_handler();
80011910:	f0 16 02 0c 	mcall	r6[2096]
					break;
			}
			
			//dbg_print("motor_switch: ");
			//dbg_print_num(motor_switch,10);
			if (motor_switch == -1)
80011914:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80011918:	3f f8       	mov	r8,-1
8001191a:	f0 09 18 00 	cp.b	r9,r8
8001191e:	c1 71       	brne	8001194c <set_mav_mode_n_state+0x21c>
			{
				dbg_print("Switching off motors!\n");
80011920:	fe cc 02 08 	sub	r12,pc,520
80011924:	f0 16 00 01 	mcall	r6[4]
				centralData->controls.run_mode = MOTORS_OFF;
80011928:	ec f8 00 00 	ld.w	r8,r6[0]
8001192c:	70 08       	ld.w	r8,r8[0x0]
8001192e:	30 09       	mov	r9,0
80011930:	f1 49 01 70 	st.w	r8[368],r9
				centralData->mav_state = MAV_STATE_STANDBY;
80011934:	ec f8 00 00 	ld.w	r8,r6[0]
80011938:	70 09       	ld.w	r9,r8[0x0]
8001193a:	30 38       	mov	r8,3
8001193c:	f3 68 10 bd 	st.b	r9[4285],r8
				centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
80011940:	ec f8 00 00 	ld.w	r8,r6[0]
80011944:	70 09       	ld.w	r9,r8[0x0]
80011946:	34 08       	mov	r8,64
80011948:	f3 68 10 bc 	st.b	r9[4284],r8
			}
		
			switch (RC_check)
8001194c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80011950:	5c 68       	casts.b	r8
80011952:	5b f8       	cp.w	r8,-1
80011954:	c0 70       	breq	80011962 <set_mav_mode_n_state+0x232>
80011956:	58 18       	cp.w	r8,1
80011958:	c0 40       	breq	80011960 <set_mav_mode_n_state+0x230>
8001195a:	5b e8       	cp.w	r8,-2
8001195c:	c0 a0       	breq	80011970 <set_mav_mode_n_state+0x240>
					break;
				case -2:
					centralData->mav_state = MAV_STATE_CRITICAL;
					break;
			}
			break;
8001195e:	cb 78       	rjmp	80011acc <set_mav_mode_n_state+0x39c>
			}
		
			switch (RC_check)
			{
				case 1:
					break;
80011960:	c0 f8       	rjmp	8001197e <set_mav_mode_n_state+0x24e>
				case -1:
					centralData->mav_state = MAV_STATE_CRITICAL;
80011962:	ec f8 00 00 	ld.w	r8,r6[0]
80011966:	70 09       	ld.w	r9,r8[0x0]
80011968:	30 58       	mov	r8,5
8001196a:	f3 68 10 bd 	st.b	r9[4285],r8
					break;
8001196e:	c0 88       	rjmp	8001197e <set_mav_mode_n_state+0x24e>
				case -2:
					centralData->mav_state = MAV_STATE_CRITICAL;
80011970:	ec f8 00 00 	ld.w	r8,r6[0]
80011974:	70 09       	ld.w	r9,r8[0x0]
80011976:	30 58       	mov	r8,5
80011978:	f3 68 10 bd 	st.b	r9[4285],r8
					break;
			}
			break;
8001197c:	ca 88       	rjmp	80011acc <set_mav_mode_n_state+0x39c>
8001197e:	ca 78       	rjmp	80011acc <set_mav_mode_n_state+0x39c>
		case MAV_STATE_CRITICAL:
			switch(channelSwitches)
80011980:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80011984:	58 18       	cp.w	r8,1
80011986:	c1 20       	breq	800119aa <set_mav_mode_n_state+0x27a>
80011988:	e0 89 00 05 	brgt	80011992 <set_mav_mode_n_state+0x262>
8001198c:	58 08       	cp.w	r8,0
8001198e:	c0 70       	breq	8001199c <set_mav_mode_n_state+0x26c>
80011990:	c2 18       	rjmp	800119d2 <set_mav_mode_n_state+0x2a2>
80011992:	58 28       	cp.w	r8,2
80011994:	c1 20       	breq	800119b8 <set_mav_mode_n_state+0x288>
80011996:	58 38       	cp.w	r8,3
80011998:	c1 70       	breq	800119c6 <set_mav_mode_n_state+0x296>
8001199a:	c1 c8       	rjmp	800119d2 <set_mav_mode_n_state+0x2a2>
			{
				case 0:
					centralData->mav_mode= MAV_MODE_MANUAL_ARMED;
8001199c:	ec f8 00 00 	ld.w	r8,r6[0]
800119a0:	70 09       	ld.w	r9,r8[0x0]
800119a2:	3c 08       	mov	r8,-64
800119a4:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
800119a8:	c1 58       	rjmp	800119d2 <set_mav_mode_n_state+0x2a2>
				case 1:
					centralData->mav_mode= MAV_MODE_STABILIZE_ARMED;
800119aa:	ec f8 00 00 	ld.w	r8,r6[0]
800119ae:	70 09       	ld.w	r9,r8[0x0]
800119b0:	3d 08       	mov	r8,-48
800119b2:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
800119b6:	c0 e8       	rjmp	800119d2 <set_mav_mode_n_state+0x2a2>
				case 2:
					centralData->mav_mode = MAV_MODE_GUIDED_ARMED;
800119b8:	ec f8 00 00 	ld.w	r8,r6[0]
800119bc:	70 09       	ld.w	r9,r8[0x0]
800119be:	3d 88       	mov	r8,-40
800119c0:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
800119c4:	c0 78       	rjmp	800119d2 <set_mav_mode_n_state+0x2a2>
				case 3:
					centralData->mav_mode = MAV_MODE_AUTO_ARMED;
800119c6:	ec f8 00 00 	ld.w	r8,r6[0]
800119ca:	70 09       	ld.w	r9,r8[0x0]
800119cc:	3d c8       	mov	r8,-36
800119ce:	f3 68 10 bc 	st.b	r9[4284],r8
					break;
			}
			if (motor_switch == -1)
800119d2:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800119d6:	3f f8       	mov	r8,-1
800119d8:	f0 09 18 00 	cp.b	r9,r8
800119dc:	c1 71       	brne	80011a0a <set_mav_mode_n_state+0x2da>
			{
				dbg_print("Switching off motors!\n");
800119de:	fe cc 02 c6 	sub	r12,pc,710
800119e2:	f0 16 00 01 	mcall	r6[4]
				centralData->controls.run_mode = MOTORS_OFF;
800119e6:	ec f8 00 00 	ld.w	r8,r6[0]
800119ea:	70 08       	ld.w	r8,r8[0x0]
800119ec:	30 09       	mov	r9,0
800119ee:	f1 49 01 70 	st.w	r8[368],r9
				centralData->mav_state = MAV_STATE_STANDBY;
800119f2:	ec f8 00 00 	ld.w	r8,r6[0]
800119f6:	70 09       	ld.w	r9,r8[0x0]
800119f8:	30 38       	mov	r8,3
800119fa:	f3 68 10 bd 	st.b	r9[4285],r8
				centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
800119fe:	ec f8 00 00 	ld.w	r8,r6[0]
80011a02:	70 09       	ld.w	r9,r8[0x0]
80011a04:	34 08       	mov	r8,64
80011a06:	f3 68 10 bc 	st.b	r9[4284],r8
			}
			
			switch (centralData->mav_mode)
80011a0a:	ec f8 00 00 	ld.w	r8,r6[0]
80011a0e:	70 08       	ld.w	r8,r8[0x0]
80011a10:	f1 38 10 bc 	ld.ub	r8,r8[4284]
80011a14:	e0 48 00 d8 	cp.w	r8,216
80011a18:	c0 40       	breq	80011a20 <set_mav_mode_n_state+0x2f0>
80011a1a:	e0 48 00 dc 	cp.w	r8,220
80011a1e:	c0 31       	brne	80011a24 <set_mav_mode_n_state+0x2f4>
			{
				case MAV_MODE_GUIDED_ARMED:
				case MAV_MODE_AUTO_ARMED:
					waypoint_critical_handler();
80011a20:	f0 16 01 d9 	mcall	r6[1892]
					break;
			}
			
			switch (RC_check)
80011a24:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80011a28:	5c 68       	casts.b	r8
80011a2a:	5b f8       	cp.w	r8,-1
80011a2c:	c1 30       	breq	80011a52 <set_mav_mode_n_state+0x322>
80011a2e:	58 18       	cp.w	r8,1
80011a30:	c0 40       	breq	80011a38 <set_mav_mode_n_state+0x308>
80011a32:	5b e8       	cp.w	r8,-2
80011a34:	c1 00       	breq	80011a54 <set_mav_mode_n_state+0x324>
						centralData->mav_state = MAV_STATE_EMERGENCY;
					}
					//centralData->mav_state = MAV_STATE_EMERGENCY;
					break;
			}
			break;
80011a36:	c4 b8       	rjmp	80011acc <set_mav_mode_n_state+0x39c>
			}
			
			switch (RC_check)
			{
				case 1:
					centralData->mav_state = MAV_STATE_ACTIVE;
80011a38:	ec f8 00 00 	ld.w	r8,r6[0]
80011a3c:	70 09       	ld.w	r9,r8[0x0]
80011a3e:	30 48       	mov	r8,4
80011a40:	f3 68 10 bd 	st.b	r9[4285],r8
					centralData->critical_init = false;
80011a44:	ec f8 00 00 	ld.w	r8,r6[0]
80011a48:	70 09       	ld.w	r9,r8[0x0]
80011a4a:	30 08       	mov	r8,0
80011a4c:	f3 68 10 b9 	st.b	r9[4281],r8
					break;
80011a50:	c1 08       	rjmp	80011a70 <set_mav_mode_n_state+0x340>
				case -1:
					break;
80011a52:	c0 f8       	rjmp	80011a70 <set_mav_mode_n_state+0x340>
				case -2:
					if (centralData->critical_landing)
80011a54:	ec f8 00 00 	ld.w	r8,r6[0]
80011a58:	70 08       	ld.w	r8,r8[0x0]
80011a5a:	f1 38 10 b8 	ld.ub	r8,r8[4280]
80011a5e:	58 08       	cp.w	r8,0
80011a60:	c3 50       	breq	80011aca <set_mav_mode_n_state+0x39a>
					{
						centralData->mav_state = MAV_STATE_EMERGENCY;
80011a62:	ec f8 00 00 	ld.w	r8,r6[0]
80011a66:	70 09       	ld.w	r9,r8[0x0]
80011a68:	30 68       	mov	r8,6
80011a6a:	f3 68 10 bd 	st.b	r9[4285],r8
					}
					//centralData->mav_state = MAV_STATE_EMERGENCY;
					break;
			}
			break;
80011a6e:	c2 f8       	rjmp	80011acc <set_mav_mode_n_state+0x39c>
80011a70:	c2 e8       	rjmp	80011acc <set_mav_mode_n_state+0x39c>
		case MAV_STATE_EMERGENCY:
			if (centralData->position_estimator.localPosition.pos[Z] < 1.0)
80011a72:	ec f8 00 00 	ld.w	r8,r6[0]
80011a76:	70 08       	ld.w	r8,r8[0x0]
80011a78:	f0 fa 0d a4 	ld.w	r10,r8[3492]
80011a7c:	30 18       	mov	r8,1
80011a7e:	fc 19 3f 80 	movh	r9,0x3f80
80011a82:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80011a86:	e0 8c 00 03 	brvs	80011a8c <set_mav_mode_n_state+0x35c>
80011a8a:	c0 25       	brlt	80011a8e <set_mav_mode_n_state+0x35e>
80011a8c:	30 08       	mov	r8,0
80011a8e:	5c 58       	castu.b	r8
80011a90:	c1 e0       	breq	80011acc <set_mav_mode_n_state+0x39c>
			{
				centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
80011a92:	ec f8 00 00 	ld.w	r8,r6[0]
80011a96:	70 09       	ld.w	r9,r8[0x0]
80011a98:	34 08       	mov	r8,64
80011a9a:	f3 68 10 bc 	st.b	r9[4284],r8
				centralData->controls.control_mode = ATTITUDE_COMMAND_MODE;
80011a9e:	ec f8 00 00 	ld.w	r8,r6[0]
80011aa2:	70 08       	ld.w	r8,r8[0x0]
80011aa4:	30 19       	mov	r9,1
80011aa6:	f1 49 01 68 	st.w	r8[360],r9
				switch (RC_check)
80011aaa:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80011aae:	5c 68       	casts.b	r8
80011ab0:	58 18       	cp.w	r8,1
80011ab2:	c0 d1       	brne	80011acc <set_mav_mode_n_state+0x39c>
				{
					case 1:
						centralData->mav_state = MAV_STATE_STANDBY;
80011ab4:	ec f8 00 00 	ld.w	r8,r6[0]
80011ab8:	70 09       	ld.w	r9,r8[0x0]
80011aba:	30 38       	mov	r8,3
80011abc:	f3 68 10 bd 	st.b	r9[4285],r8
80011ac0:	c0 68       	rjmp	80011acc <set_mav_mode_n_state+0x39c>
	rc_user_channels(&channelSwitches,&RC_check, &motor_switch);
	
	switch(centralData->mav_state)
	{
		case MAV_STATE_CALIBRATING:
			break;
80011ac2:	d7 03       	nop
80011ac4:	c0 48       	rjmp	80011acc <set_mav_mode_n_state+0x39c>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
						break;
				}
			}
			break;
80011ac6:	d7 03       	nop
80011ac8:	c0 28       	rjmp	80011acc <set_mav_mode_n_state+0x39c>
						centralData->mav_state = MAV_STATE_EMERGENCY;
					}
					//centralData->mav_state = MAV_STATE_EMERGENCY;
					break;
			}
			break;
80011aca:	d7 03       	nop
	//dbg_print_num(centralData->mav_state,10);
	//dbg_print(", MAV mode :");
	//dbg_print_num(centralData->mav_mode,10);
	//dbg_print("\n");
	
}
80011acc:	2f fd       	sub	sp,-4
80011ace:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011ad2:	00 00       	add	r0,r0
80011ad4:	80 01       	ld.sh	r1,r0[0x0]
80011ad6:	15 c0       	ld.ub	r0,r10[0x4]

80011ad8 <run_stabilisation>:

task_return_t run_stabilisation() {
80011ad8:	eb cd 40 e0 	pushm	r5-r7,lr
80011adc:	1a 97       	mov	r7,sp
80011ade:	20 cd       	sub	sp,48
80011ae0:	fe f6 04 18 	ld.w	r6,pc[1048]
80011ae4:	1e 26       	rsub	r6,pc
	int i;
	
	if (centralData->simulation_mode==1) {
80011ae6:	ec f8 00 00 	ld.w	r8,r6[0]
80011aea:	70 08       	ld.w	r8,r8[0x0]
80011aec:	f0 f8 10 c0 	ld.w	r8,r8[4288]
80011af0:	58 18       	cp.w	r8,1
80011af2:	c2 d1       	brne	80011b4c <run_stabilisation+0x74>
		simu_update(&centralData->sim_model, &centralData->servos, &(centralData->imu1), &centralData->position_estimator);
80011af4:	ec f8 00 00 	ld.w	r8,r6[0]
80011af8:	70 08       	ld.w	r8,r8[0x0]
80011afa:	f0 c9 f2 c4 	sub	r9,r8,-3388
80011afe:	ec f8 00 00 	ld.w	r8,r6[0]
80011b02:	70 08       	ld.w	r8,r8[0x0]
80011b04:	10 9a       	mov	r10,r8
80011b06:	ec f8 00 00 	ld.w	r8,r6[0]
80011b0a:	70 08       	ld.w	r8,r8[0x0]
80011b0c:	f0 cb f9 14 	sub	r11,r8,-1772
80011b10:	ec f8 00 00 	ld.w	r8,r6[0]
80011b14:	70 08       	ld.w	r8,r8[0x0]
80011b16:	f0 c8 f4 58 	sub	r8,r8,-2984
80011b1a:	10 9c       	mov	r12,r8
80011b1c:	f0 16 01 9b 	mcall	r6[1644]
		
		
		imu_update(&(centralData->imu1), &(centralData->position_estimator), &centralData->pressure, &centralData->GPS_data);
80011b20:	ec f8 00 00 	ld.w	r8,r6[0]
80011b24:	70 08       	ld.w	r8,r8[0x0]
80011b26:	f0 c9 f4 f8 	sub	r9,r8,-2824
80011b2a:	ec f8 00 00 	ld.w	r8,r6[0]
80011b2e:	70 08       	ld.w	r8,r8[0x0]
80011b30:	f0 ca ef 3c 	sub	r10,r8,-4292
80011b34:	ec f8 00 00 	ld.w	r8,r6[0]
80011b38:	70 08       	ld.w	r8,r8[0x0]
80011b3a:	f0 cb f2 c4 	sub	r11,r8,-3388
80011b3e:	ec f8 00 00 	ld.w	r8,r6[0]
80011b42:	70 08       	ld.w	r8,r8[0x0]
80011b44:	10 9c       	mov	r12,r8
80011b46:	f0 16 00 96 	mcall	r6[600]
80011b4a:	c1 c8       	rjmp	80011b82 <run_stabilisation+0xaa>
		
		//for (i=0; i<3; i++) centralData->position_estimator.vel[i]=centralData->sim_model.vel[i];
		//centralData->position_estimator.localPosition=centralData->sim_model.localPosition;
	} else {
		imu_get_raw_data(&(centralData->imu1));
80011b4c:	ec f8 00 00 	ld.w	r8,r6[0]
80011b50:	70 08       	ld.w	r8,r8[0x0]
80011b52:	10 9c       	mov	r12,r8
80011b54:	f0 16 00 95 	mcall	r6[596]
		imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);
80011b58:	ec f8 00 00 	ld.w	r8,r6[0]
80011b5c:	70 08       	ld.w	r8,r8[0x0]
80011b5e:	f0 c9 f4 f8 	sub	r9,r8,-2824
80011b62:	ec f8 00 00 	ld.w	r8,r6[0]
80011b66:	70 08       	ld.w	r8,r8[0x0]
80011b68:	f0 ca ef 3c 	sub	r10,r8,-4292
80011b6c:	ec f8 00 00 	ld.w	r8,r6[0]
80011b70:	70 08       	ld.w	r8,r8[0x0]
80011b72:	f0 cb f2 c4 	sub	r11,r8,-3388
80011b76:	ec f8 00 00 	ld.w	r8,r6[0]
80011b7a:	70 08       	ld.w	r8,r8[0x0]
80011b7c:	10 9c       	mov	r12,r8
80011b7e:	f0 16 00 96 	mcall	r6[600]
	}

	switch(centralData->mav_mode)
80011b82:	ec f8 00 00 	ld.w	r8,r6[0]
80011b86:	70 08       	ld.w	r8,r8[0x0]
80011b88:	f1 38 10 bc 	ld.ub	r8,r8[4284]
80011b8c:	e0 48 00 5c 	cp.w	r8,92
80011b90:	e0 80 01 73 	breq	80011e76 <run_stabilisation+0x39e>
80011b94:	e0 89 00 17 	brgt	80011bc2 <run_stabilisation+0xea>
80011b98:	e0 48 00 40 	cp.w	r8,64
80011b9c:	e0 80 01 6d 	breq	80011e76 <run_stabilisation+0x39e>
80011ba0:	e0 89 00 07 	brgt	80011bae <run_stabilisation+0xd6>
80011ba4:	58 08       	cp.w	r8,0
80011ba6:	e0 80 01 68 	breq	80011e76 <run_stabilisation+0x39e>
80011baa:	e0 8f 01 95 	bral	80011ed4 <run_stabilisation+0x3fc>
80011bae:	e0 48 00 50 	cp.w	r8,80
80011bb2:	e0 80 01 62 	breq	80011e76 <run_stabilisation+0x39e>
80011bb6:	e0 48 00 58 	cp.w	r8,88
80011bba:	e0 80 01 5e 	breq	80011e76 <run_stabilisation+0x39e>
80011bbe:	e0 8f 01 8b 	bral	80011ed4 <run_stabilisation+0x3fc>
80011bc2:	e0 48 00 d0 	cp.w	r8,208
80011bc6:	c5 a0       	breq	80011c7a <run_stabilisation+0x1a2>
80011bc8:	e0 89 00 07 	brgt	80011bd6 <run_stabilisation+0xfe>
80011bcc:	e0 48 00 c0 	cp.w	r8,192
80011bd0:	c0 d0       	breq	80011bea <run_stabilisation+0x112>
80011bd2:	e0 8f 01 81 	bral	80011ed4 <run_stabilisation+0x3fc>
80011bd6:	e0 48 00 d8 	cp.w	r8,216
80011bda:	e0 80 00 c2 	breq	80011d5e <run_stabilisation+0x286>
80011bde:	e0 48 00 dc 	cp.w	r8,220
80011be2:	e0 80 01 04 	breq	80011dea <run_stabilisation+0x312>
80011be6:	e0 8f 01 77 	bral	80011ed4 <run_stabilisation+0x3fc>
	{
		
		case MAV_MODE_MANUAL_ARMED:
			centralData->controls = get_command_from_remote();
80011bea:	ec f8 00 00 	ld.w	r8,r6[0]
80011bee:	70 05       	ld.w	r5,r8[0x0]
80011bf0:	ee c8 00 30 	sub	r8,r7,48
80011bf4:	10 9c       	mov	r12,r8
80011bf6:	fe b0 fb bd 	rcall	80011370 <get_command_from_remote>
80011bfa:	ea c8 fe b8 	sub	r8,r5,-328
80011bfe:	ee c9 00 30 	sub	r9,r7,48
80011c02:	f0 ca 00 00 	sub	r10,r8,0
80011c06:	f2 cb 00 00 	sub	r11,r9,0
80011c0a:	76 0c       	ld.w	r12,r11[0x0]
80011c0c:	95 0c       	st.w	r10[0x0],r12
80011c0e:	76 1c       	ld.w	r12,r11[0x4]
80011c10:	95 1c       	st.w	r10[0x4],r12
80011c12:	76 2c       	ld.w	r12,r11[0x8]
80011c14:	95 2c       	st.w	r10[0x8],r12
80011c16:	76 3b       	ld.w	r11,r11[0xc]
80011c18:	95 3b       	st.w	r10[0xc],r11
80011c1a:	f0 ca ff f0 	sub	r10,r8,-16
80011c1e:	f2 cb ff f0 	sub	r11,r9,-16
80011c22:	76 0c       	ld.w	r12,r11[0x0]
80011c24:	95 0c       	st.w	r10[0x0],r12
80011c26:	76 1c       	ld.w	r12,r11[0x4]
80011c28:	95 1c       	st.w	r10[0x4],r12
80011c2a:	76 2c       	ld.w	r12,r11[0x8]
80011c2c:	95 2c       	st.w	r10[0x8],r12
80011c2e:	76 3b       	ld.w	r11,r11[0xc]
80011c30:	95 3b       	st.w	r10[0xc],r11
80011c32:	f2 ea 00 20 	ld.d	r10,r9[32]
80011c36:	f0 eb 00 20 	st.d	r8[32],r10
80011c3a:	72 a9       	ld.w	r9,r9[0x28]
80011c3c:	91 a9       	st.w	r8[0x28],r9
			
			centralData->controls.yaw_mode=YAW_RELATIVE;
80011c3e:	ec f8 00 00 	ld.w	r8,r6[0]
80011c42:	70 08       	ld.w	r8,r8[0x0]
80011c44:	30 09       	mov	r9,0
80011c46:	f1 49 01 6c 	st.w	r8[364],r9
			centralData->controls.control_mode = ATTITUDE_COMMAND_MODE;
80011c4a:	ec f8 00 00 	ld.w	r8,r6[0]
80011c4e:	70 08       	ld.w	r8,r8[0x0]
80011c50:	30 19       	mov	r9,1
80011c52:	f1 49 01 68 	st.w	r8[360],r9
			
			cascade_stabilise_copter(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
80011c56:	ec f8 00 00 	ld.w	r8,r6[0]
80011c5a:	70 08       	ld.w	r8,r8[0x0]
80011c5c:	f0 ca fe b8 	sub	r10,r8,-328
80011c60:	ec f8 00 00 	ld.w	r8,r6[0]
80011c64:	70 08       	ld.w	r8,r8[0x0]
80011c66:	f0 c9 f2 c4 	sub	r9,r8,-3388
80011c6a:	ec f8 00 00 	ld.w	r8,r6[0]
80011c6e:	70 08       	ld.w	r8,r8[0x0]
80011c70:	12 9b       	mov	r11,r9
80011c72:	10 9c       	mov	r12,r8
80011c74:	f0 16 00 97 	mcall	r6[604]
			break;
80011c78:	c2 e9       	rjmp	80011ed4 <run_stabilisation+0x3fc>
		case MAV_MODE_STABILIZE_ARMED:
			centralData->controls = get_command_from_remote();
80011c7a:	ec f8 00 00 	ld.w	r8,r6[0]
80011c7e:	70 05       	ld.w	r5,r8[0x0]
80011c80:	ee c8 00 30 	sub	r8,r7,48
80011c84:	10 9c       	mov	r12,r8
80011c86:	fe b0 fb 75 	rcall	80011370 <get_command_from_remote>
80011c8a:	ea c8 fe b8 	sub	r8,r5,-328
80011c8e:	ee c9 00 30 	sub	r9,r7,48
80011c92:	f0 ca 00 00 	sub	r10,r8,0
80011c96:	f2 cb 00 00 	sub	r11,r9,0
80011c9a:	76 0c       	ld.w	r12,r11[0x0]
80011c9c:	95 0c       	st.w	r10[0x0],r12
80011c9e:	76 1c       	ld.w	r12,r11[0x4]
80011ca0:	95 1c       	st.w	r10[0x4],r12
80011ca2:	76 2c       	ld.w	r12,r11[0x8]
80011ca4:	95 2c       	st.w	r10[0x8],r12
80011ca6:	76 3b       	ld.w	r11,r11[0xc]
80011ca8:	95 3b       	st.w	r10[0xc],r11
80011caa:	f0 ca ff f0 	sub	r10,r8,-16
80011cae:	f2 cb ff f0 	sub	r11,r9,-16
80011cb2:	76 0c       	ld.w	r12,r11[0x0]
80011cb4:	95 0c       	st.w	r10[0x0],r12
80011cb6:	76 1c       	ld.w	r12,r11[0x4]
80011cb8:	95 1c       	st.w	r10[0x4],r12
80011cba:	76 2c       	ld.w	r12,r11[0x8]
80011cbc:	95 2c       	st.w	r10[0x8],r12
80011cbe:	76 3b       	ld.w	r11,r11[0xc]
80011cc0:	95 3b       	st.w	r10[0xc],r11
80011cc2:	f2 ea 00 20 	ld.d	r10,r9[32]
80011cc6:	f0 eb 00 20 	st.d	r8[32],r10
80011cca:	72 a9       	ld.w	r9,r9[0x28]
80011ccc:	91 a9       	st.w	r8[0x28],r9
			centralData->controls.control_mode = VELOCITY_COMMAND_MODE;
80011cce:	ec f8 00 00 	ld.w	r8,r6[0]
80011cd2:	70 08       	ld.w	r8,r8[0x0]
80011cd4:	30 09       	mov	r9,0
80011cd6:	f1 49 01 68 	st.w	r8[360],r9
			centralData->controls.yaw_mode=YAW_RELATIVE;
80011cda:	ec f8 00 00 	ld.w	r8,r6[0]
80011cde:	70 08       	ld.w	r8,r8[0x0]
80011ce0:	30 09       	mov	r9,0
80011ce2:	f1 49 01 6c 	st.w	r8[364],r9
			
			centralData->controls.tvel[X]=-10.0*centralData->controls.rpy[PITCH];
80011ce6:	ec f8 00 00 	ld.w	r8,r6[0]
80011cea:	70 08       	ld.w	r8,r8[0x0]
80011cec:	ec f9 00 00 	ld.w	r9,r6[0]
80011cf0:	72 09       	ld.w	r9,r9[0x0]
80011cf2:	f2 fa 01 4c 	ld.w	r10,r9[332]
80011cf6:	fc 19 c1 20 	movh	r9,0xc120
80011cfa:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
80011cfe:	f1 49 01 58 	st.w	r8[344],r9
			centralData->controls.tvel[Y]= 10.0*centralData->controls.rpy[ROLL];
80011d02:	ec f8 00 00 	ld.w	r8,r6[0]
80011d06:	70 08       	ld.w	r8,r8[0x0]
80011d08:	ec f9 00 00 	ld.w	r9,r6[0]
80011d0c:	72 09       	ld.w	r9,r9[0x0]
80011d0e:	f2 fa 01 48 	ld.w	r10,r9[328]
80011d12:	fc 19 41 20 	movh	r9,0x4120
80011d16:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
80011d1a:	f1 49 01 5c 	st.w	r8[348],r9
			centralData->controls.tvel[Z]=- 1.5*centralData->controls.thrust;
80011d1e:	ec f8 00 00 	ld.w	r8,r6[0]
80011d22:	70 08       	ld.w	r8,r8[0x0]
80011d24:	ec f9 00 00 	ld.w	r9,r6[0]
80011d28:	72 09       	ld.w	r9,r9[0x0]
80011d2a:	f2 fa 01 54 	ld.w	r10,r9[340]
80011d2e:	fc 19 bf c0 	movh	r9,0xbfc0
80011d32:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
80011d36:	f1 49 01 60 	st.w	r8[352],r9
			
			cascade_stabilise_copter(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
80011d3a:	ec f8 00 00 	ld.w	r8,r6[0]
80011d3e:	70 08       	ld.w	r8,r8[0x0]
80011d40:	f0 ca fe b8 	sub	r10,r8,-328
80011d44:	ec f8 00 00 	ld.w	r8,r6[0]
80011d48:	70 08       	ld.w	r8,r8[0x0]
80011d4a:	f0 c9 f2 c4 	sub	r9,r8,-3388
80011d4e:	ec f8 00 00 	ld.w	r8,r6[0]
80011d52:	70 08       	ld.w	r8,r8[0x0]
80011d54:	12 9b       	mov	r11,r9
80011d56:	10 9c       	mov	r12,r8
80011d58:	f0 16 00 97 	mcall	r6[604]
			
			break;
80011d5c:	cb c8       	rjmp	80011ed4 <run_stabilisation+0x3fc>
		case MAV_MODE_GUIDED_ARMED:
			centralData->controls = centralData->controls_nav;
80011d5e:	ec f8 00 00 	ld.w	r8,r6[0]
80011d62:	70 08       	ld.w	r8,r8[0x0]
80011d64:	ec f9 00 00 	ld.w	r9,r6[0]
80011d68:	72 09       	ld.w	r9,r9[0x0]
80011d6a:	f0 c8 fe b8 	sub	r8,r8,-328
80011d6e:	f2 c9 fe 8c 	sub	r9,r9,-372
80011d72:	f0 ca 00 00 	sub	r10,r8,0
80011d76:	f2 cb 00 00 	sub	r11,r9,0
80011d7a:	76 0c       	ld.w	r12,r11[0x0]
80011d7c:	95 0c       	st.w	r10[0x0],r12
80011d7e:	76 1c       	ld.w	r12,r11[0x4]
80011d80:	95 1c       	st.w	r10[0x4],r12
80011d82:	76 2c       	ld.w	r12,r11[0x8]
80011d84:	95 2c       	st.w	r10[0x8],r12
80011d86:	76 3b       	ld.w	r11,r11[0xc]
80011d88:	95 3b       	st.w	r10[0xc],r11
80011d8a:	f0 ca ff f0 	sub	r10,r8,-16
80011d8e:	f2 cb ff f0 	sub	r11,r9,-16
80011d92:	76 0c       	ld.w	r12,r11[0x0]
80011d94:	95 0c       	st.w	r10[0x0],r12
80011d96:	76 1c       	ld.w	r12,r11[0x4]
80011d98:	95 1c       	st.w	r10[0x4],r12
80011d9a:	76 2c       	ld.w	r12,r11[0x8]
80011d9c:	95 2c       	st.w	r10[0x8],r12
80011d9e:	76 3b       	ld.w	r11,r11[0xc]
80011da0:	95 3b       	st.w	r10[0xc],r11
80011da2:	f2 ea 00 20 	ld.d	r10,r9[32]
80011da6:	f0 eb 00 20 	st.d	r8[32],r10
80011daa:	72 a9       	ld.w	r9,r9[0x28]
80011dac:	91 a9       	st.w	r8[0x28],r9
			//centralData->controls.thrust = f_min(get_thrust_from_remote()*100000.0,centralData->controls_nav.thrust*100000.0)/100000.0;
			//centralData->controls.thrust = get_thrust_from_remote();
			
			centralData->controls.control_mode = VELOCITY_COMMAND_MODE;
80011dae:	ec f8 00 00 	ld.w	r8,r6[0]
80011db2:	70 08       	ld.w	r8,r8[0x0]
80011db4:	30 09       	mov	r9,0
80011db6:	f1 49 01 68 	st.w	r8[360],r9
			centralData->controls.yaw_mode = YAW_ABSOLUTE;
80011dba:	ec f8 00 00 	ld.w	r8,r6[0]
80011dbe:	70 08       	ld.w	r8,r8[0x0]
80011dc0:	30 19       	mov	r9,1
80011dc2:	f1 49 01 6c 	st.w	r8[364],r9
			cascade_stabilise_copter(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
80011dc6:	ec f8 00 00 	ld.w	r8,r6[0]
80011dca:	70 08       	ld.w	r8,r8[0x0]
80011dcc:	f0 ca fe b8 	sub	r10,r8,-328
80011dd0:	ec f8 00 00 	ld.w	r8,r6[0]
80011dd4:	70 08       	ld.w	r8,r8[0x0]
80011dd6:	f0 c9 f2 c4 	sub	r9,r8,-3388
80011dda:	ec f8 00 00 	ld.w	r8,r6[0]
80011dde:	70 08       	ld.w	r8,r8[0x0]
80011de0:	12 9b       	mov	r11,r9
80011de2:	10 9c       	mov	r12,r8
80011de4:	f0 16 00 97 	mcall	r6[604]
			break;
80011de8:	c7 68       	rjmp	80011ed4 <run_stabilisation+0x3fc>
		case MAV_MODE_AUTO_ARMED:
			centralData->controls = centralData->controls_nav;
80011dea:	ec f8 00 00 	ld.w	r8,r6[0]
80011dee:	70 08       	ld.w	r8,r8[0x0]
80011df0:	ec f9 00 00 	ld.w	r9,r6[0]
80011df4:	72 09       	ld.w	r9,r9[0x0]
80011df6:	f0 c8 fe b8 	sub	r8,r8,-328
80011dfa:	f2 c9 fe 8c 	sub	r9,r9,-372
80011dfe:	f0 ca 00 00 	sub	r10,r8,0
80011e02:	f2 cb 00 00 	sub	r11,r9,0
80011e06:	76 0c       	ld.w	r12,r11[0x0]
80011e08:	95 0c       	st.w	r10[0x0],r12
80011e0a:	76 1c       	ld.w	r12,r11[0x4]
80011e0c:	95 1c       	st.w	r10[0x4],r12
80011e0e:	76 2c       	ld.w	r12,r11[0x8]
80011e10:	95 2c       	st.w	r10[0x8],r12
80011e12:	76 3b       	ld.w	r11,r11[0xc]
80011e14:	95 3b       	st.w	r10[0xc],r11
80011e16:	f0 ca ff f0 	sub	r10,r8,-16
80011e1a:	f2 cb ff f0 	sub	r11,r9,-16
80011e1e:	76 0c       	ld.w	r12,r11[0x0]
80011e20:	95 0c       	st.w	r10[0x0],r12
80011e22:	76 1c       	ld.w	r12,r11[0x4]
80011e24:	95 1c       	st.w	r10[0x4],r12
80011e26:	76 2c       	ld.w	r12,r11[0x8]
80011e28:	95 2c       	st.w	r10[0x8],r12
80011e2a:	76 3b       	ld.w	r11,r11[0xc]
80011e2c:	95 3b       	st.w	r10[0xc],r11
80011e2e:	f2 ea 00 20 	ld.d	r10,r9[32]
80011e32:	f0 eb 00 20 	st.d	r8[32],r10
80011e36:	72 a9       	ld.w	r9,r9[0x28]
80011e38:	91 a9       	st.w	r8[0x28],r9
			//centralData->controls.thrust = f_min(get_thrust_from_remote()*100000.0,centralData->controls_nav.thrust*100000.0)/100000.0;
			//centralData->controls.thrust = get_thrust_from_remote();
			
			centralData->controls.control_mode = VELOCITY_COMMAND_MODE;	
80011e3a:	ec f8 00 00 	ld.w	r8,r6[0]
80011e3e:	70 08       	ld.w	r8,r8[0x0]
80011e40:	30 09       	mov	r9,0
80011e42:	f1 49 01 68 	st.w	r8[360],r9
			centralData->controls.yaw_mode = YAW_COORDINATED;
80011e46:	ec f8 00 00 	ld.w	r8,r6[0]
80011e4a:	70 08       	ld.w	r8,r8[0x0]
80011e4c:	30 29       	mov	r9,2
80011e4e:	f1 49 01 6c 	st.w	r8[364],r9
			cascade_stabilise_copter(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
80011e52:	ec f8 00 00 	ld.w	r8,r6[0]
80011e56:	70 08       	ld.w	r8,r8[0x0]
80011e58:	f0 ca fe b8 	sub	r10,r8,-328
80011e5c:	ec f8 00 00 	ld.w	r8,r6[0]
80011e60:	70 08       	ld.w	r8,r8[0x0]
80011e62:	f0 c9 f2 c4 	sub	r9,r8,-3388
80011e66:	ec f8 00 00 	ld.w	r8,r6[0]
80011e6a:	70 08       	ld.w	r8,r8[0x0]
80011e6c:	12 9b       	mov	r11,r9
80011e6e:	10 9c       	mov	r12,r8
80011e70:	f0 16 00 97 	mcall	r6[604]
			break;
80011e74:	c3 08       	rjmp	80011ed4 <run_stabilisation+0x3fc>
		case MAV_MODE_PREFLIGHT:
		case MAV_MODE_MANUAL_DISARMED:
		case MAV_MODE_STABILIZE_DISARMED:
		case MAV_MODE_GUIDED_DISARMED:
		case MAV_MODE_AUTO_DISARMED:
			centralData->controls.run_mode = MOTORS_OFF;
80011e76:	ec f8 00 00 	ld.w	r8,r6[0]
80011e7a:	70 08       	ld.w	r8,r8[0x0]
80011e7c:	30 09       	mov	r9,0
80011e7e:	f1 49 01 70 	st.w	r8[368],r9
			for (i=0; i<NUMBER_OF_SERVO_OUTPUTS; i++) {
80011e82:	30 08       	mov	r8,0
80011e84:	ef 48 ff fc 	st.w	r7[-4],r8
80011e88:	c2 18       	rjmp	80011eca <run_stabilisation+0x3f2>
				centralData->servos[i]=servo_failsafe[i];
80011e8a:	ec f8 00 00 	ld.w	r8,r6[0]
80011e8e:	70 0a       	ld.w	r10,r8[0x0]
80011e90:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011e94:	ee f9 ff fc 	ld.w	r9,r7[-4]
80011e98:	a5 68       	lsl	r8,0x4
80011e9a:	f4 08 00 08 	add	r8,r10,r8
80011e9e:	f0 c8 f9 14 	sub	r8,r8,-1772
80011ea2:	ec fa 08 fc 	ld.w	r10,r6[2300]
80011ea6:	a5 69       	lsl	r9,0x4
80011ea8:	f4 09 00 09 	add	r9,r10,r9
80011eac:	20 08       	sub	r8,0
80011eae:	20 09       	sub	r9,0
80011eb0:	72 0a       	ld.w	r10,r9[0x0]
80011eb2:	91 0a       	st.w	r8[0x0],r10
80011eb4:	72 1a       	ld.w	r10,r9[0x4]
80011eb6:	91 1a       	st.w	r8[0x4],r10
80011eb8:	72 2a       	ld.w	r10,r9[0x8]
80011eba:	91 2a       	st.w	r8[0x8],r10
80011ebc:	72 39       	ld.w	r9,r9[0xc]
80011ebe:	91 39       	st.w	r8[0xc],r9
		case MAV_MODE_MANUAL_DISARMED:
		case MAV_MODE_STABILIZE_DISARMED:
		case MAV_MODE_GUIDED_DISARMED:
		case MAV_MODE_AUTO_DISARMED:
			centralData->controls.run_mode = MOTORS_OFF;
			for (i=0; i<NUMBER_OF_SERVO_OUTPUTS; i++) {
80011ec0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011ec4:	2f f8       	sub	r8,-1
80011ec6:	ef 48 ff fc 	st.w	r7[-4],r8
80011eca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011ece:	58 78       	cp.w	r8,7
80011ed0:	fe 9a ff dd 	brle	80011e8a <run_stabilisation+0x3b2>
			break;
		
	}
	
	// !!! -- for safety, this should remain the only place where values are written to the servo outputs! --- !!!
	if (centralData->simulation_mode!=1) {
80011ed4:	ec f8 00 00 	ld.w	r8,r6[0]
80011ed8:	70 08       	ld.w	r8,r8[0x0]
80011eda:	f0 f8 10 c0 	ld.w	r8,r8[4288]
80011ede:	58 18       	cp.w	r8,1
80011ee0:	c0 90       	breq	80011ef2 <run_stabilisation+0x41a>
		set_servos(&(centralData->servos));
80011ee2:	ec f8 00 00 	ld.w	r8,r6[0]
80011ee6:	70 08       	ld.w	r8,r8[0x0]
80011ee8:	f0 c8 f9 14 	sub	r8,r8,-1772
80011eec:	10 9c       	mov	r12,r8
80011eee:	f0 16 00 a9 	mcall	r6[676]
	}
		

}
80011ef2:	2f 4d       	sub	sp,-48
80011ef4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80011ef8:	80 01       	ld.sh	r1,r0[0x0]
80011efa:	19 68       	ld.uh	r8,--r12

80011efc <gps_task>:

task_return_t gps_task() {
80011efc:	eb cd 40 c0 	pushm	r6-r7,lr
80011f00:	1a 97       	mov	r7,sp
80011f02:	20 1d       	sub	sp,4
80011f04:	49 16       	lddpc	r6,80011f48 <gps_task+0x4c>
80011f06:	1e 26       	rsub	r6,pc
	uint32_t tnow = get_millis();	
80011f08:	f0 16 00 0f 	mcall	r6[60]
80011f0c:	18 98       	mov	r8,r12
80011f0e:	ef 48 ff fc 	st.w	r7[-4],r8
	if (centralData->simulation_mode==1) {
80011f12:	ec f8 00 00 	ld.w	r8,r6[0]
80011f16:	70 08       	ld.w	r8,r8[0x0]
80011f18:	f0 f8 10 c0 	ld.w	r8,r8[4288]
80011f1c:	58 18       	cp.w	r8,1
80011f1e:	c1 01       	brne	80011f3e <gps_task+0x42>
		simulate_gps(&centralData->sim_model, &centralData->GPS_data);
80011f20:	ec f8 00 00 	ld.w	r8,r6[0]
80011f24:	70 08       	ld.w	r8,r8[0x0]
80011f26:	f0 c9 f4 f8 	sub	r9,r8,-2824
80011f2a:	ec f8 00 00 	ld.w	r8,r6[0]
80011f2e:	70 08       	ld.w	r8,r8[0x0]
80011f30:	f0 c8 f4 58 	sub	r8,r8,-2984
80011f34:	12 9b       	mov	r11,r9
80011f36:	10 9c       	mov	r12,r8
80011f38:	f0 16 01 49 	mcall	r6[1316]
80011f3c:	c0 38       	rjmp	80011f42 <gps_task+0x46>
	} else {
		gps_update();
80011f3e:	f0 16 01 fd 	mcall	r6[2036]
	}
}
80011f42:	2f fd       	sub	sp,-4
80011f44:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011f48:	80 01       	ld.sh	r1,r0[0x0]
80011f4a:	1d 8a       	ld.ub	r10,lr[0x0]

80011f4c <run_estimator>:

task_return_t run_estimator()
{
80011f4c:	eb cd 40 c0 	pushm	r6-r7,lr
80011f50:	1a 97       	mov	r7,sp
80011f52:	48 46       	lddpc	r6,80011f60 <run_estimator+0x14>
80011f54:	1e 26       	rsub	r6,pc
	estimator_loop();
80011f56:	f0 16 01 65 	mcall	r6[1428]
}
80011f5a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011f5e:	00 00       	add	r0,r0
80011f60:	80 01       	ld.sh	r1,r0[0x0]
80011f62:	1d d8       	ld.ub	r8,lr[0x5]

80011f64 <run_navigation_task>:

task_return_t run_navigation_task()
{
80011f64:	eb cd 40 c0 	pushm	r6-r7,lr
80011f68:	1a 97       	mov	r7,sp
80011f6a:	20 1d       	sub	sp,4
80011f6c:	fe f6 02 20 	ld.w	r6,pc[544]
80011f70:	1e 26       	rsub	r6,pc
	int8_t i;
	
		switch (centralData->mav_state)
80011f72:	ec f8 00 00 	ld.w	r8,r6[0]
80011f76:	70 08       	ld.w	r8,r8[0x0]
80011f78:	f1 38 10 bd 	ld.ub	r8,r8[4285]
80011f7c:	58 48       	cp.w	r8,4
80011f7e:	c0 50       	breq	80011f88 <run_navigation_task+0x24>
80011f80:	58 58       	cp.w	r8,5
80011f82:	e0 80 00 b5 	breq	800120ec <run_navigation_task+0x188>
80011f86:	cf f8       	rjmp	80012184 <run_navigation_task+0x220>
		{
			case MAV_STATE_ACTIVE:
				switch (centralData->mav_mode)
80011f88:	ec f8 00 00 	ld.w	r8,r6[0]
80011f8c:	70 08       	ld.w	r8,r8[0x0]
80011f8e:	f1 38 10 bc 	ld.ub	r8,r8[4284]
80011f92:	e0 48 00 d8 	cp.w	r8,216
80011f96:	c7 40       	breq	8001207e <run_navigation_task+0x11a>
80011f98:	e0 48 00 dc 	cp.w	r8,220
80011f9c:	e0 81 00 f1 	brne	8001217e <run_navigation_task+0x21a>
				{
					case MAV_MODE_AUTO_ARMED:
						if (centralData->waypoint_set)
80011fa0:	ec f8 00 00 	ld.w	r8,r6[0]
80011fa4:	70 08       	ld.w	r8,r8[0x0]
80011fa6:	f1 38 10 b4 	ld.ub	r8,r8[4276]
80011faa:	58 08       	cp.w	r8,0
80011fac:	c3 10       	breq	8001200e <run_navigation_task+0xaa>
						{
							run_navigation(centralData->waypoint_coordinates);
80011fae:	ec f8 00 00 	ld.w	r8,r6[0]
80011fb2:	70 08       	ld.w	r8,r8[0x0]
80011fb4:	20 cd       	sub	sp,48
80011fb6:	1a 99       	mov	r9,sp
80011fb8:	12 9b       	mov	r11,r9
80011fba:	f0 ca ef e0 	sub	r10,r8,-4128
80011fbe:	f6 c8 00 00 	sub	r8,r11,0
80011fc2:	f4 c9 00 00 	sub	r9,r10,0
80011fc6:	72 0c       	ld.w	r12,r9[0x0]
80011fc8:	91 0c       	st.w	r8[0x0],r12
80011fca:	72 1c       	ld.w	r12,r9[0x4]
80011fcc:	91 1c       	st.w	r8[0x4],r12
80011fce:	72 2c       	ld.w	r12,r9[0x8]
80011fd0:	91 2c       	st.w	r8[0x8],r12
80011fd2:	72 39       	ld.w	r9,r9[0xc]
80011fd4:	91 39       	st.w	r8[0xc],r9
80011fd6:	f6 c8 ff f0 	sub	r8,r11,-16
80011fda:	f4 c9 ff f0 	sub	r9,r10,-16
80011fde:	72 0c       	ld.w	r12,r9[0x0]
80011fe0:	91 0c       	st.w	r8[0x0],r12
80011fe2:	72 1c       	ld.w	r12,r9[0x4]
80011fe4:	91 1c       	st.w	r8[0x4],r12
80011fe6:	72 2c       	ld.w	r12,r9[0x8]
80011fe8:	91 2c       	st.w	r8[0x8],r12
80011fea:	72 39       	ld.w	r9,r9[0xc]
80011fec:	91 39       	st.w	r8[0xc],r9
80011fee:	f6 c8 ff e0 	sub	r8,r11,-32
80011ff2:	f4 c9 ff e0 	sub	r9,r10,-32
80011ff6:	72 0a       	ld.w	r10,r9[0x0]
80011ff8:	91 0a       	st.w	r8[0x0],r10
80011ffa:	72 1a       	ld.w	r10,r9[0x4]
80011ffc:	91 1a       	st.w	r8[0x4],r10
80011ffe:	72 2a       	ld.w	r10,r9[0x8]
80012000:	91 2a       	st.w	r8[0x8],r10
80012002:	72 39       	ld.w	r9,r9[0xc]
80012004:	91 39       	st.w	r8[0xc],r9
80012006:	f0 16 00 8a 	mcall	r6[552]
8001200a:	2f 4d       	sub	sp,-48
8001200c:	c3 78       	rjmp	8001207a <run_navigation_task+0x116>
					
							//computeNewVelocity(centralData->controls_nav.tvel,newVelocity);
						}else if(centralData->waypoint_hold_init)
8001200e:	ec f8 00 00 	ld.w	r8,r6[0]
80012012:	70 08       	ld.w	r8,r8[0x0]
80012014:	f1 38 10 b7 	ld.ub	r8,r8[4279]
80012018:	58 08       	cp.w	r8,0
8001201a:	c3 00       	breq	8001207a <run_navigation_task+0x116>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
8001201c:	ec f8 00 00 	ld.w	r8,r6[0]
80012020:	70 08       	ld.w	r8,r8[0x0]
80012022:	20 cd       	sub	sp,48
80012024:	1a 99       	mov	r9,sp
80012026:	12 9b       	mov	r11,r9
80012028:	f0 ca ef b0 	sub	r10,r8,-4176
8001202c:	f6 c8 00 00 	sub	r8,r11,0
80012030:	f4 c9 00 00 	sub	r9,r10,0
80012034:	72 0c       	ld.w	r12,r9[0x0]
80012036:	91 0c       	st.w	r8[0x0],r12
80012038:	72 1c       	ld.w	r12,r9[0x4]
8001203a:	91 1c       	st.w	r8[0x4],r12
8001203c:	72 2c       	ld.w	r12,r9[0x8]
8001203e:	91 2c       	st.w	r8[0x8],r12
80012040:	72 39       	ld.w	r9,r9[0xc]
80012042:	91 39       	st.w	r8[0xc],r9
80012044:	f6 c8 ff f0 	sub	r8,r11,-16
80012048:	f4 c9 ff f0 	sub	r9,r10,-16
8001204c:	72 0c       	ld.w	r12,r9[0x0]
8001204e:	91 0c       	st.w	r8[0x0],r12
80012050:	72 1c       	ld.w	r12,r9[0x4]
80012052:	91 1c       	st.w	r8[0x4],r12
80012054:	72 2c       	ld.w	r12,r9[0x8]
80012056:	91 2c       	st.w	r8[0x8],r12
80012058:	72 39       	ld.w	r9,r9[0xc]
8001205a:	91 39       	st.w	r8[0xc],r9
8001205c:	f6 c8 ff e0 	sub	r8,r11,-32
80012060:	f4 c9 ff e0 	sub	r9,r10,-32
80012064:	72 0a       	ld.w	r10,r9[0x0]
80012066:	91 0a       	st.w	r8[0x0],r10
80012068:	72 1a       	ld.w	r10,r9[0x4]
8001206a:	91 1a       	st.w	r8[0x4],r10
8001206c:	72 2a       	ld.w	r10,r9[0x8]
8001206e:	91 2a       	st.w	r8[0x8],r10
80012070:	72 39       	ld.w	r9,r9[0xc]
80012072:	91 39       	st.w	r8[0xc],r9
80012074:	f0 16 00 8a 	mcall	r6[552]
80012078:	2f 4d       	sub	sp,-48
						}
						break;
8001207a:	d7 03       	nop
						{
							run_navigation(centralData->waypoint_hold_coordinates);
						}
						break;
				}
				break;
8001207c:	c8 48       	rjmp	80012184 <run_navigation_task+0x220>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
						}
						break;
					case MAV_MODE_GUIDED_ARMED:
						if(centralData->waypoint_hold_init)
8001207e:	ec f8 00 00 	ld.w	r8,r6[0]
80012082:	70 08       	ld.w	r8,r8[0x0]
80012084:	f1 38 10 b7 	ld.ub	r8,r8[4279]
80012088:	58 08       	cp.w	r8,0
8001208a:	c7 c0       	breq	80012182 <run_navigation_task+0x21e>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
8001208c:	ec f8 00 00 	ld.w	r8,r6[0]
80012090:	70 08       	ld.w	r8,r8[0x0]
80012092:	20 cd       	sub	sp,48
80012094:	1a 99       	mov	r9,sp
80012096:	12 9b       	mov	r11,r9
80012098:	f0 ca ef b0 	sub	r10,r8,-4176
8001209c:	f6 c8 00 00 	sub	r8,r11,0
800120a0:	f4 c9 00 00 	sub	r9,r10,0
800120a4:	72 0c       	ld.w	r12,r9[0x0]
800120a6:	91 0c       	st.w	r8[0x0],r12
800120a8:	72 1c       	ld.w	r12,r9[0x4]
800120aa:	91 1c       	st.w	r8[0x4],r12
800120ac:	72 2c       	ld.w	r12,r9[0x8]
800120ae:	91 2c       	st.w	r8[0x8],r12
800120b0:	72 39       	ld.w	r9,r9[0xc]
800120b2:	91 39       	st.w	r8[0xc],r9
800120b4:	f6 c8 ff f0 	sub	r8,r11,-16
800120b8:	f4 c9 ff f0 	sub	r9,r10,-16
800120bc:	72 0c       	ld.w	r12,r9[0x0]
800120be:	91 0c       	st.w	r8[0x0],r12
800120c0:	72 1c       	ld.w	r12,r9[0x4]
800120c2:	91 1c       	st.w	r8[0x4],r12
800120c4:	72 2c       	ld.w	r12,r9[0x8]
800120c6:	91 2c       	st.w	r8[0x8],r12
800120c8:	72 39       	ld.w	r9,r9[0xc]
800120ca:	91 39       	st.w	r8[0xc],r9
800120cc:	f6 c8 ff e0 	sub	r8,r11,-32
800120d0:	f4 c9 ff e0 	sub	r9,r10,-32
800120d4:	72 0a       	ld.w	r10,r9[0x0]
800120d6:	91 0a       	st.w	r8[0x0],r10
800120d8:	72 1a       	ld.w	r10,r9[0x4]
800120da:	91 1a       	st.w	r8[0x4],r10
800120dc:	72 2a       	ld.w	r10,r9[0x8]
800120de:	91 2a       	st.w	r8[0x8],r10
800120e0:	72 39       	ld.w	r9,r9[0xc]
800120e2:	91 39       	st.w	r8[0xc],r9
800120e4:	f0 16 00 8a 	mcall	r6[552]
800120e8:	2f 4d       	sub	sp,-48
						}
						break;
				}
				break;
800120ea:	c4 d8       	rjmp	80012184 <run_navigation_task+0x220>
			case MAV_STATE_CRITICAL:
				if ((centralData->mav_mode == MAV_MODE_GUIDED_ARMED)||(centralData->mav_mode == MAV_MODE_AUTO_ARMED))
800120ec:	ec f8 00 00 	ld.w	r8,r6[0]
800120f0:	70 08       	ld.w	r8,r8[0x0]
800120f2:	f1 39 10 bc 	ld.ub	r9,r8[4284]
800120f6:	3d 88       	mov	r8,-40
800120f8:	f0 09 18 00 	cp.b	r9,r8
800120fc:	c0 a0       	breq	80012110 <run_navigation_task+0x1ac>
800120fe:	ec f8 00 00 	ld.w	r8,r6[0]
80012102:	70 08       	ld.w	r8,r8[0x0]
80012104:	f1 39 10 bc 	ld.ub	r9,r8[4284]
80012108:	3d c8       	mov	r8,-36
8001210a:	f0 09 18 00 	cp.b	r9,r8
8001210e:	c3 b1       	brne	80012184 <run_navigation_task+0x220>
				{
					if(centralData->critical_init)
80012110:	ec f8 00 00 	ld.w	r8,r6[0]
80012114:	70 08       	ld.w	r8,r8[0x0]
80012116:	f1 38 10 b9 	ld.ub	r8,r8[4281]
8001211a:	58 08       	cp.w	r8,0
8001211c:	c3 40       	breq	80012184 <run_navigation_task+0x220>
					{
						run_navigation(centralData->waypoint_critical_coordinates);
8001211e:	ec f8 00 00 	ld.w	r8,r6[0]
80012122:	70 08       	ld.w	r8,r8[0x0]
80012124:	20 cd       	sub	sp,48
80012126:	1a 99       	mov	r9,sp
80012128:	12 9b       	mov	r11,r9
8001212a:	f0 ca ef 80 	sub	r10,r8,-4224
8001212e:	f6 c8 00 00 	sub	r8,r11,0
80012132:	f4 c9 00 00 	sub	r9,r10,0
80012136:	72 0c       	ld.w	r12,r9[0x0]
80012138:	91 0c       	st.w	r8[0x0],r12
8001213a:	72 1c       	ld.w	r12,r9[0x4]
8001213c:	91 1c       	st.w	r8[0x4],r12
8001213e:	72 2c       	ld.w	r12,r9[0x8]
80012140:	91 2c       	st.w	r8[0x8],r12
80012142:	72 39       	ld.w	r9,r9[0xc]
80012144:	91 39       	st.w	r8[0xc],r9
80012146:	f6 c8 ff f0 	sub	r8,r11,-16
8001214a:	f4 c9 ff f0 	sub	r9,r10,-16
8001214e:	72 0c       	ld.w	r12,r9[0x0]
80012150:	91 0c       	st.w	r8[0x0],r12
80012152:	72 1c       	ld.w	r12,r9[0x4]
80012154:	91 1c       	st.w	r8[0x4],r12
80012156:	72 2c       	ld.w	r12,r9[0x8]
80012158:	91 2c       	st.w	r8[0x8],r12
8001215a:	72 39       	ld.w	r9,r9[0xc]
8001215c:	91 39       	st.w	r8[0xc],r9
8001215e:	f6 c8 ff e0 	sub	r8,r11,-32
80012162:	f4 c9 ff e0 	sub	r9,r10,-32
80012166:	72 0a       	ld.w	r10,r9[0x0]
80012168:	91 0a       	st.w	r8[0x0],r10
8001216a:	72 1a       	ld.w	r10,r9[0x4]
8001216c:	91 1a       	st.w	r8[0x4],r10
8001216e:	72 2a       	ld.w	r10,r9[0x8]
80012170:	91 2a       	st.w	r8[0x8],r10
80012172:	72 39       	ld.w	r9,r9[0xc]
80012174:	91 39       	st.w	r8[0xc],r9
80012176:	f0 16 00 8a 	mcall	r6[552]
8001217a:	2f 4d       	sub	sp,-48
8001217c:	c0 48       	rjmp	80012184 <run_navigation_task+0x220>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
						}
						break;
				}
				break;
8001217e:	d7 03       	nop
80012180:	c0 28       	rjmp	80012184 <run_navigation_task+0x220>
80012182:	d7 03       	nop
					}
				}
				break;
		}
	
}
80012184:	2f fd       	sub	sp,-4
80012186:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001218a:	00 00       	add	r0,r0
8001218c:	80 01       	ld.sh	r1,r0[0x0]
8001218e:	1d f4       	ld.ub	r4,lr[0x7]

80012190 <run_barometer>:
uint32_t last_baro_update;
task_return_t run_barometer()
{
80012190:	eb cd 40 c0 	pushm	r6-r7,lr
80012194:	1a 97       	mov	r7,sp
80012196:	20 3d       	sub	sp,12
80012198:	4a d6       	lddpc	r6,8001224c <run_barometer+0xbc>
8001219a:	1e 26       	rsub	r6,pc
	uint32_t tnow = get_micros();
8001219c:	f0 16 00 29 	mcall	r6[164]
800121a0:	18 98       	mov	r8,r12
800121a2:	ef 48 ff f4 	st.w	r7[-12],r8
	central_data_t *central_data=get_central_data();
800121a6:	f0 16 00 33 	mcall	r6[204]
800121aa:	18 98       	mov	r8,r12
800121ac:	ef 48 ff f8 	st.w	r7[-8],r8
	
	pressure_data *pressure= get_pressure_data_slow(centralData->pressure.altitude_offset);
800121b0:	ec f8 00 00 	ld.w	r8,r6[0]
800121b4:	70 08       	ld.w	r8,r8[0x0]
800121b6:	f0 f8 10 e4 	ld.w	r8,r8[4324]
800121ba:	10 9c       	mov	r12,r8
800121bc:	f0 16 01 bb 	mcall	r6[1772]
800121c0:	18 98       	mov	r8,r12
800121c2:	ef 48 ff fc 	st.w	r7[-4],r8
	if (central_data->simulation_mode==1) {
800121c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800121ca:	f0 f8 10 c0 	ld.w	r8,r8[4288]
800121ce:	58 18       	cp.w	r8,1
800121d0:	c0 b1       	brne	800121e6 <run_barometer+0x56>
		simulate_barometer(&centralData->sim_model, pressure);
800121d2:	ec f8 00 00 	ld.w	r8,r6[0]
800121d6:	70 08       	ld.w	r8,r8[0x0]
800121d8:	f0 c8 f4 58 	sub	r8,r8,-2984
800121dc:	ee fb ff fc 	ld.w	r11,r7[-4]
800121e0:	10 9c       	mov	r12,r8
800121e2:	f0 16 01 94 	mcall	r6[1616]
	} 
	centralData->pressure=*pressure;
800121e6:	ec f8 00 00 	ld.w	r8,r6[0]
800121ea:	70 08       	ld.w	r8,r8[0x0]
800121ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
800121f0:	f0 c8 ef 3c 	sub	r8,r8,-4292
800121f4:	f0 ca 00 00 	sub	r10,r8,0
800121f8:	f2 cb 00 00 	sub	r11,r9,0
800121fc:	76 0c       	ld.w	r12,r11[0x0]
800121fe:	95 0c       	st.w	r10[0x0],r12
80012200:	76 1c       	ld.w	r12,r11[0x4]
80012202:	95 1c       	st.w	r10[0x4],r12
80012204:	76 2c       	ld.w	r12,r11[0x8]
80012206:	95 2c       	st.w	r10[0x8],r12
80012208:	76 3b       	ld.w	r11,r11[0xc]
8001220a:	95 3b       	st.w	r10[0xc],r11
8001220c:	f0 ca ff f0 	sub	r10,r8,-16
80012210:	f2 cb ff f0 	sub	r11,r9,-16
80012214:	76 0c       	ld.w	r12,r11[0x0]
80012216:	95 0c       	st.w	r10[0x0],r12
80012218:	76 1c       	ld.w	r12,r11[0x4]
8001221a:	95 1c       	st.w	r10[0x4],r12
8001221c:	76 2c       	ld.w	r12,r11[0x8]
8001221e:	95 2c       	st.w	r10[0x8],r12
80012220:	76 3b       	ld.w	r11,r11[0xc]
80012222:	95 3b       	st.w	r10[0xc],r11
80012224:	f0 ca ff e0 	sub	r10,r8,-32
80012228:	f2 cb ff e0 	sub	r11,r9,-32
8001222c:	76 0c       	ld.w	r12,r11[0x0]
8001222e:	95 0c       	st.w	r10[0x0],r12
80012230:	76 1c       	ld.w	r12,r11[0x4]
80012232:	95 1c       	st.w	r10[0x4],r12
80012234:	76 2c       	ld.w	r12,r11[0x8]
80012236:	95 2c       	st.w	r10[0x8],r12
80012238:	76 3b       	ld.w	r11,r11[0xc]
8001223a:	95 3b       	st.w	r10[0xc],r11
8001223c:	f2 ea 00 30 	ld.d	r10,r9[48]
80012240:	f0 eb 00 30 	st.d	r8[48],r10
	
}
80012244:	2f dd       	sub	sp,-12
80012246:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001224a:	00 00       	add	r0,r0
8001224c:	80 01       	ld.sh	r1,r0[0x0]
8001224e:	20 1e       	sub	lr,1

80012250 <create_tasks>:


void create_tasks() {
80012250:	eb cd 40 c0 	pushm	r6-r7,lr
80012254:	1a 97       	mov	r7,sp
80012256:	4a 96       	lddpc	r6,800122f8 <create_tasks+0xa8>
80012258:	1e 26       	rsub	r6,pc
	
	init_scheduler(&main_tasks);
8001225a:	ec f8 01 2c 	ld.w	r8,r6[300]
8001225e:	10 9c       	mov	r12,r8
80012260:	f0 16 01 09 	mcall	r6[1060]
	
	centralData = get_central_data();
80012264:	f0 16 00 33 	mcall	r6[204]
80012268:	18 99       	mov	r9,r12
8001226a:	ec f8 00 00 	ld.w	r8,r6[0]
8001226e:	91 09       	st.w	r8[0x0],r9
	
	register_task(&main_tasks, 0, 4000, RUN_REGULAR, &run_stabilisation );
80012270:	ec f8 08 6c 	ld.w	r8,r6[2156]
80012274:	ec fc 01 2c 	ld.w	r12,r6[300]
80012278:	30 29       	mov	r9,2
8001227a:	e0 6a 0f a0 	mov	r10,4000
8001227e:	30 0b       	mov	r11,0
80012280:	f0 16 00 61 	mcall	r6[388]
	
	register_task(&main_tasks, 1, 15000, RUN_REGULAR, &run_barometer);
80012284:	ec f8 07 30 	ld.w	r8,r6[1840]
80012288:	ec fc 01 2c 	ld.w	r12,r6[300]
8001228c:	30 29       	mov	r9,2
8001228e:	e0 6a 3a 98 	mov	r10,15000
80012292:	30 1b       	mov	r11,1
80012294:	f0 16 00 61 	mcall	r6[388]
	main_tasks.tasks[1].timing_mode=PERIODIC_RELATIVE;
80012298:	ec f8 01 2c 	ld.w	r8,r6[300]
8001229c:	30 19       	mov	r9,1
8001229e:	f1 49 00 44 	st.w	r8[68],r9

	register_task(&main_tasks, 2, 100000, RUN_REGULAR, &gps_task);
800122a2:	ec f8 07 b4 	ld.w	r8,r6[1972]
800122a6:	ec fc 01 2c 	ld.w	r12,r6[300]
800122aa:	30 29       	mov	r9,2
800122ac:	e0 7a 86 a0 	mov	r10,100000
800122b0:	30 2b       	mov	r11,2
800122b2:	f0 16 00 61 	mcall	r6[388]
	//register_task(&main_tasks, 4, 4000, RUN_REGULAR, &run_estimator);
	//register_task(&main_tasks, , 100000, RUN_REGULAR, &read_radar);

	register_task(&main_tasks, 3, ORCA_TIME_STEP_MILLIS * 1000.0, RUN_REGULAR, &run_navigation_task);
800122b6:	ec f8 06 bc 	ld.w	r8,r6[1724]
800122ba:	ec fc 01 2c 	ld.w	r12,r6[300]
800122be:	30 29       	mov	r9,2
800122c0:	e0 6a 27 10 	mov	r10,10000
800122c4:	30 3b       	mov	r11,3
800122c6:	f0 16 00 61 	mcall	r6[388]

	register_task(&main_tasks, 4, 200000, RUN_REGULAR, &set_mav_mode_n_state);
800122ca:	ec f8 07 0c 	ld.w	r8,r6[1804]
800122ce:	ec fc 01 2c 	ld.w	r12,r6[300]
800122d2:	30 29       	mov	r9,2
800122d4:	e2 7a 0d 40 	mov	r10,200000
800122d8:	30 4b       	mov	r11,4
800122da:	f0 16 00 61 	mcall	r6[388]
	

	register_task(&main_tasks, 5, 4000, RUN_REGULAR, &mavlink_protocol_update);
800122de:	ec f8 03 84 	ld.w	r8,r6[900]
800122e2:	ec fc 01 2c 	ld.w	r12,r6[300]
800122e6:	30 29       	mov	r9,2
800122e8:	e0 6a 0f a0 	mov	r10,4000
800122ec:	30 5b       	mov	r11,5
800122ee:	f0 16 00 61 	mcall	r6[388]

800122f2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800122f6:	00 00       	add	r0,r0
800122f8:	80 01       	ld.sh	r1,r0[0x0]
800122fa:	20 dc       	sub	r12,13

800122fc <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
800122fc:	eb cd 40 80 	pushm	r7,lr
80012300:	1a 97       	mov	r7,sp
80012302:	20 3d       	sub	sp,12
80012304:	18 98       	mov	r8,r12
80012306:	ef 4b ff f4 	st.w	r7[-12],r11
8001230a:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
8001230e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012312:	90 08       	ld.sh	r8,r8[0x0]
80012314:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80012318:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001231c:	f3 e8 20 08 	eor	r8,r9,r8
80012320:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
80012324:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80012328:	a5 68       	lsl	r8,0x4
8001232a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001232e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80012332:	f3 e8 20 08 	eor	r8,r9,r8
80012336:	5c 58       	castu.b	r8
80012338:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
8001233c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012340:	90 08       	ld.sh	r8,r8[0x0]
80012342:	5c 78       	castu.h	r8
80012344:	a9 88       	lsr	r8,0x8
80012346:	5c 88       	casts.h	r8
80012348:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001234c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80012350:	a9 68       	lsl	r8,0x8
80012352:	5c 88       	casts.h	r8
80012354:	f3 e8 20 08 	eor	r8,r9,r8
80012358:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001235c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80012360:	a3 78       	lsl	r8,0x3
80012362:	5c 88       	casts.h	r8
80012364:	f3 e8 20 08 	eor	r8,r9,r8
80012368:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001236c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80012370:	a5 88       	lsr	r8,0x4
80012372:	5c 58       	castu.b	r8
80012374:	f3 e8 20 08 	eor	r8,r9,r8
80012378:	5c 88       	casts.h	r8
8001237a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001237e:	b2 08       	st.h	r9[0x0],r8
}
80012380:	2f dd       	sub	sp,-12
80012382:	e3 cd 80 80 	ldm	sp++,r7,pc

80012386 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
80012386:	eb cd 40 80 	pushm	r7,lr
8001238a:	1a 97       	mov	r7,sp
8001238c:	20 1d       	sub	sp,4
8001238e:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
80012392:	ee f9 ff fc 	ld.w	r9,r7[-4]
80012396:	3f f8       	mov	r8,-1
80012398:	b2 08       	st.h	r9[0x0],r8
}
8001239a:	2f fd       	sub	sp,-4
8001239c:	e3 cd 80 80 	ldm	sp++,r7,pc

800123a0 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
800123a0:	eb cd 40 c0 	pushm	r6-r7,lr
800123a4:	1a 97       	mov	r7,sp
800123a6:	20 1d       	sub	sp,4
800123a8:	48 96       	lddpc	r6,800123cc <mavlink_get_channel_status+0x2c>
800123aa:	1e 26       	rsub	r6,pc
800123ac:	18 98       	mov	r8,r12
800123ae:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
800123b2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800123b6:	f0 09 15 04 	lsl	r9,r8,0x4
800123ba:	ec f8 08 f8 	ld.w	r8,r6[2296]
800123be:	f2 08 00 08 	add	r8,r9,r8
}
800123c2:	10 9c       	mov	r12,r8
800123c4:	2f fd       	sub	sp,-4
800123c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800123ca:	00 00       	add	r0,r0
800123cc:	80 01       	ld.sh	r1,r0[0x0]
800123ce:	22 2e       	sub	lr,34

800123d0 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
800123d0:	eb cd 40 c0 	pushm	r6-r7,lr
800123d4:	1a 97       	mov	r7,sp
800123d6:	20 1d       	sub	sp,4
800123d8:	48 a6       	lddpc	r6,80012400 <mavlink_get_channel_buffer+0x30>
800123da:	1e 26       	rsub	r6,pc
800123dc:	18 98       	mov	r8,r12
800123de:	ef 68 ff fc 	st.b	r7[-4],r8
#error ERROR: IF #define MAVLINK_EXTERNAL_RX_BUFFER IS SET, THE BUFFER HAS TO BE ALLOCATED OUTSIDE OF THIS FUNCTION (mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];)
#endif
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
800123e2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800123e6:	12 98       	mov	r8,r9
800123e8:	a5 68       	lsl	r8,0x4
800123ea:	12 08       	add	r8,r9
800123ec:	a5 68       	lsl	r8,0x4
800123ee:	10 99       	mov	r9,r8
800123f0:	ec f8 08 f4 	ld.w	r8,r6[2292]
800123f4:	f2 08 00 08 	add	r8,r9,r8
}
800123f8:	10 9c       	mov	r12,r8
800123fa:	2f fd       	sub	sp,-4
800123fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012400:	80 01       	ld.sh	r1,r0[0x0]
80012402:	22 5e       	sub	lr,37

80012404 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
80012404:	eb cd 40 c0 	pushm	r6-r7,lr
80012408:	1a 97       	mov	r7,sp
8001240a:	20 1d       	sub	sp,4
8001240c:	48 66       	lddpc	r6,80012424 <mavlink_start_checksum+0x20>
8001240e:	1e 26       	rsub	r6,pc
80012410:	ef 4c ff fc 	st.w	r7[-4],r12
	crc_init(&msg->checksum);
80012414:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012418:	10 9c       	mov	r12,r8
8001241a:	cb 6f       	rcall	80012386 <crc_init>
}
8001241c:	2f fd       	sub	sp,-4
8001241e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012422:	00 00       	add	r0,r0
80012424:	80 01       	ld.sh	r1,r0[0x0]
80012426:	22 92       	sub	r2,41

80012428 <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
80012428:	eb cd 40 c0 	pushm	r6-r7,lr
8001242c:	1a 97       	mov	r7,sp
8001242e:	20 2d       	sub	sp,8
80012430:	48 96       	lddpc	r6,80012454 <mavlink_update_checksum+0x2c>
80012432:	1e 26       	rsub	r6,pc
80012434:	ef 4c ff fc 	st.w	r7[-4],r12
80012438:	16 98       	mov	r8,r11
8001243a:	ef 68 ff f8 	st.b	r7[-8],r8
	crc_accumulate(c, &msg->checksum);
8001243e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80012442:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80012446:	12 9b       	mov	r11,r9
80012448:	10 9c       	mov	r12,r8
8001244a:	c5 9f       	rcall	800122fc <crc_accumulate>
}
8001244c:	2f ed       	sub	sp,-8
8001244e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012452:	00 00       	add	r0,r0
80012454:	80 01       	ld.sh	r1,r0[0x0]
80012456:	22 b6       	sub	r6,43

80012458 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
80012458:	eb cd 40 c0 	pushm	r6-r7,lr
8001245c:	1a 97       	mov	r7,sp
8001245e:	20 7d       	sub	sp,28
80012460:	fe f6 03 b8 	ld.w	r6,pc[952]
80012464:	1e 26       	rsub	r6,pc
80012466:	16 98       	mov	r8,r11
80012468:	ef 4a ff e8 	st.w	r7[-24],r10
8001246c:	ef 49 ff e4 	st.w	r7[-28],r9
80012470:	18 99       	mov	r9,r12
80012472:	ef 69 ff f0 	st.b	r7[-16],r9
80012476:	ef 68 ff ec 	st.b	r7[-20],r8
	static const uint8_t mavlink_message_lengths[256] = MAVLINK_MESSAGE_LENGTHS;
#define MAVLINK_MESSAGE_LENGTH(msgid) mavlink_message_lengths[msgid]
#endif
#endif

	mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan); ///< The currently decoded message
8001247a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001247e:	10 9c       	mov	r12,r8
80012480:	ca 8f       	rcall	800123d0 <mavlink_get_channel_buffer>
80012482:	18 98       	mov	r8,r12
80012484:	ef 48 ff f4 	st.w	r7[-12],r8
	mavlink_status_t* status = mavlink_get_channel_status(chan); ///< The current decode status
80012488:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001248c:	10 9c       	mov	r12,r8
8001248e:	c8 9f       	rcall	800123a0 <mavlink_get_channel_status>
80012490:	18 98       	mov	r8,r12
80012492:	ef 48 ff f8 	st.w	r7[-8],r8
	int bufferIndex = 0;
80012496:	30 08       	mov	r8,0
80012498:	ef 48 ff fc 	st.w	r7[-4],r8

	status->msg_received = 0;
8001249c:	ee f9 ff f8 	ld.w	r9,r7[-8]
800124a0:	30 08       	mov	r8,0
800124a2:	b2 88       	st.b	r9[0x0],r8

	switch (status->parse_state)
800124a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800124a8:	70 18       	ld.w	r8,r8[0x4]
800124aa:	58 98       	cp.w	r8,9
800124ac:	e0 8b 01 70 	brhi	8001278c <mavlink_parse_char+0x334>
800124b0:	fe c9 ff f8 	sub	r9,pc,-8
800124b4:	f2 08 00 2f 	add	pc,r9,r8<<0x2
800124b8:	e0 8f 00 14 	bral	800124e0 <mavlink_parse_char+0x88>
800124bc:	e0 8f 00 12 	bral	800124e0 <mavlink_parse_char+0x88>
800124c0:	e0 8f 00 28 	bral	80012510 <mavlink_parse_char+0xb8>
800124c4:	e0 8f 00 69 	bral	80012596 <mavlink_parse_char+0x13e>
800124c8:	e0 8f 00 57 	bral	80012576 <mavlink_parse_char+0x11e>
800124cc:	e0 8f 00 75 	bral	800125b6 <mavlink_parse_char+0x15e>
800124d0:	e0 8f 00 83 	bral	800125d6 <mavlink_parse_char+0x17e>
800124d4:	e0 8f 00 9b 	bral	8001260a <mavlink_parse_char+0x1b2>
800124d8:	e0 8f 00 c2 	bral	8001265c <mavlink_parse_char+0x204>
800124dc:	e0 8f 01 08 	bral	800126ec <mavlink_parse_char+0x294>
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
800124e0:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800124e4:	3f e8       	mov	r8,-2
800124e6:	f0 09 18 00 	cp.b	r9,r8
800124ea:	e0 81 01 4c 	brne	80012782 <mavlink_parse_char+0x32a>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
800124ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800124f2:	30 29       	mov	r9,2
800124f4:	91 19       	st.w	r8[0x4],r9
			rxmsg->len = 0;
800124f6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800124fa:	30 08       	mov	r8,0
800124fc:	b2 b8       	st.b	r9[0x3],r8
			rxmsg->magic = c;
800124fe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80012502:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012506:	b2 a8       	st.b	r9[0x2],r8
			mavlink_start_checksum(rxmsg);
80012508:	ee fc ff f4 	ld.w	r12,r7[-12]
8001250c:	c7 cf       	rcall	80012404 <mavlink_start_checksum>
		}
		break;
8001250e:	c3 f9       	rjmp	8001278c <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
80012510:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012514:	11 88       	ld.ub	r8,r8[0x0]
80012516:	58 08       	cp.w	r8,0
80012518:	c1 a0       	breq	8001254c <mavlink_parse_char+0xf4>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
8001251a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001251e:	11 98       	ld.ub	r8,r8[0x1]
80012520:	2f f8       	sub	r8,-1
80012522:	5c 58       	castu.b	r8
80012524:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012528:	b2 98       	st.b	r9[0x1],r8
			status->parse_error++;
8001252a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001252e:	11 a8       	ld.ub	r8,r8[0x2]
80012530:	2f f8       	sub	r8,-1
80012532:	5c 58       	castu.b	r8
80012534:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012538:	b2 a8       	st.b	r9[0x2],r8
			status->msg_received = 0;
8001253a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001253e:	30 08       	mov	r8,0
80012540:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
80012542:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012546:	30 19       	mov	r9,1
80012548:	91 19       	st.w	r8[0x4],r9
			rxmsg->len = c;
			status->packet_idx = 0;
			mavlink_update_checksum(rxmsg, c);
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
		}
		break;
8001254a:	c2 19       	rjmp	8001278c <mavlink_parse_char+0x334>
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
		}
		else
		{
			// NOT counting STX, LENGTH, SEQ, SYSID, COMPID, MSGID, CRC1 and CRC2
			rxmsg->len = c;
8001254c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80012550:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012554:	b2 b8       	st.b	r9[0x3],r8
			status->packet_idx = 0;
80012556:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001255a:	30 08       	mov	r8,0
8001255c:	f3 68 00 08 	st.b	r9[8],r8
			mavlink_update_checksum(rxmsg, c);
80012560:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012564:	10 9b       	mov	r11,r8
80012566:	ee fc ff f4 	ld.w	r12,r7[-12]
8001256a:	c5 ff       	rcall	80012428 <mavlink_update_checksum>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
8001256c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012570:	30 49       	mov	r9,4
80012572:	91 19       	st.w	r8[0x4],r9
		}
		break;
80012574:	c0 c9       	rjmp	8001278c <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->seq = c;
80012576:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001257a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001257e:	b2 c8       	st.b	r9[0x4],r8
		mavlink_update_checksum(rxmsg, c);
80012580:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012584:	10 9b       	mov	r11,r8
80012586:	ee fc ff f4 	ld.w	r12,r7[-12]
8001258a:	c4 ff       	rcall	80012428 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
8001258c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012590:	30 39       	mov	r9,3
80012592:	91 19       	st.w	r8[0x4],r9
		break;
80012594:	cf c8       	rjmp	8001278c <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
80012596:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001259a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001259e:	b2 d8       	st.b	r9[0x5],r8
		mavlink_update_checksum(rxmsg, c);
800125a0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800125a4:	10 9b       	mov	r11,r8
800125a6:	ee fc ff f4 	ld.w	r12,r7[-12]
800125aa:	c3 ff       	rcall	80012428 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
800125ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800125b0:	30 59       	mov	r9,5
800125b2:	91 19       	st.w	r8[0x4],r9
		break;
800125b4:	ce c8       	rjmp	8001278c <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
800125b6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800125ba:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800125be:	b2 e8       	st.b	r9[0x6],r8
		mavlink_update_checksum(rxmsg, c);
800125c0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800125c4:	10 9b       	mov	r11,r8
800125c6:	ee fc ff f4 	ld.w	r12,r7[-12]
800125ca:	c2 ff       	rcall	80012428 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
800125cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800125d0:	30 69       	mov	r9,6
800125d2:	91 19       	st.w	r8[0x4],r9
		break;
800125d4:	cd c8       	rjmp	8001278c <mavlink_parse_char+0x334>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
				mavlink_start_checksum(rxmsg);
			}
	        }
#endif
		rxmsg->msgid = c;
800125d6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800125da:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800125de:	b2 f8       	st.b	r9[0x7],r8
		mavlink_update_checksum(rxmsg, c);
800125e0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800125e4:	10 9b       	mov	r11,r8
800125e6:	ee fc ff f4 	ld.w	r12,r7[-12]
800125ea:	c1 ff       	rcall	80012428 <mavlink_update_checksum>
		if (rxmsg->len == 0)
800125ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800125f0:	11 b8       	ld.ub	r8,r8[0x3]
800125f2:	58 08       	cp.w	r8,0
800125f4:	c0 61       	brne	80012600 <mavlink_parse_char+0x1a8>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
800125f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800125fa:	30 89       	mov	r9,8
800125fc:	91 19       	st.w	r8[0x4],r9
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
		}
		break;
800125fe:	cc 78       	rjmp	8001278c <mavlink_parse_char+0x334>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
80012600:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012604:	30 79       	mov	r9,7
80012606:	91 19       	st.w	r8[0x4],r9
		}
		break;
80012608:	cc 28       	rjmp	8001278c <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_MSGID:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
8001260a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001260e:	2f 88       	sub	r8,-8
80012610:	10 9a       	mov	r10,r8
80012612:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012616:	f1 38 00 08 	ld.ub	r8,r8[8]
8001261a:	10 99       	mov	r9,r8
8001261c:	12 0a       	add	r10,r9
8001261e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80012622:	b4 89       	st.b	r10[0x0],r9
80012624:	2f f8       	sub	r8,-1
80012626:	5c 58       	castu.b	r8
80012628:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001262c:	f3 68 00 08 	st.b	r9[8],r8
		mavlink_update_checksum(rxmsg, c);
80012630:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80012634:	10 9b       	mov	r11,r8
80012636:	ee fc ff f4 	ld.w	r12,r7[-12]
8001263a:	cf 7e       	rcall	80012428 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
8001263c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012640:	f1 39 00 08 	ld.ub	r9,r8[8]
80012644:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012648:	11 b8       	ld.ub	r8,r8[0x3]
8001264a:	f0 09 18 00 	cp.b	r9,r8
8001264e:	e0 81 00 9c 	brne	80012786 <mavlink_parse_char+0x32e>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
80012652:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012656:	30 89       	mov	r9,8
80012658:	91 19       	st.w	r8[0x4],r9
		}
		break;
8001265a:	c9 98       	rjmp	8001278c <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD:
#if MAVLINK_CRC_EXTRA
		mavlink_update_checksum(rxmsg, MAVLINK_MESSAGE_CRC(rxmsg->msgid));
8001265c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012660:	11 f8       	ld.ub	r8,r8[0x7]
80012662:	ec f9 08 f0 	ld.w	r9,r6[2288]
80012666:	f2 08 07 08 	ld.ub	r8,r9[r8]
8001266a:	10 9b       	mov	r11,r8
8001266c:	ee fc ff f4 	ld.w	r12,r7[-12]
80012670:	cd ce       	rcall	80012428 <mavlink_update_checksum>
#endif
		if (c != (rxmsg->checksum & 0xFF)) {
80012672:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80012676:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001267a:	90 08       	ld.sh	r8,r8[0x0]
8001267c:	5c 78       	castu.h	r8
8001267e:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80012682:	10 39       	cp.w	r9,r8
80012684:	c2 30       	breq	800126ca <mavlink_parse_char+0x272>
			// Check first checksum byte
			status->parse_error++;
80012686:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001268a:	11 a8       	ld.ub	r8,r8[0x2]
8001268c:	2f f8       	sub	r8,-1
8001268e:	5c 58       	castu.b	r8
80012690:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012694:	b2 a8       	st.b	r9[0x2],r8
			status->msg_received = 0;
80012696:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001269a:	30 08       	mov	r8,0
8001269c:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
8001269e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800126a2:	30 19       	mov	r9,1
800126a4:	91 19       	st.w	r8[0x4],r9
			if (c == MAVLINK_STX)
800126a6:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800126aa:	3f e8       	mov	r8,-2
800126ac:	f0 09 18 00 	cp.b	r9,r8
800126b0:	c6 d1       	brne	8001278a <mavlink_parse_char+0x332>
			{
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
800126b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800126b6:	30 29       	mov	r9,2
800126b8:	91 19       	st.w	r8[0x4],r9
				rxmsg->len = 0;
800126ba:	ee f9 ff f4 	ld.w	r9,r7[-12]
800126be:	30 08       	mov	r8,0
800126c0:	b2 b8       	st.b	r9[0x3],r8
				mavlink_start_checksum(rxmsg);
800126c2:	ee fc ff f4 	ld.w	r12,r7[-12]
800126c6:	c9 fe       	rcall	80012404 <mavlink_start_checksum>
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
		}
		break;
800126c8:	c6 28       	rjmp	8001278c <mavlink_parse_char+0x334>
				mavlink_start_checksum(rxmsg);
			}
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
800126ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800126ce:	30 99       	mov	r9,9
800126d0:	91 19       	st.w	r8[0x4],r9
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
800126d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800126d6:	2f 88       	sub	r8,-8
800126d8:	10 99       	mov	r9,r8
800126da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800126de:	f1 38 00 08 	ld.ub	r8,r8[8]
800126e2:	10 09       	add	r9,r8
800126e4:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800126e8:	b2 88       	st.b	r9[0x0],r8
		}
		break;
800126ea:	c5 18       	rjmp	8001278c <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_CRC1:
		if (c != (rxmsg->checksum >> 8)) {
800126ec:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800126f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800126f4:	90 08       	ld.sh	r8,r8[0x0]
800126f6:	5c 78       	castu.h	r8
800126f8:	a9 88       	lsr	r8,0x8
800126fa:	5c 88       	casts.h	r8
800126fc:	f0 09 19 00 	cp.h	r9,r8
80012700:	c2 30       	breq	80012746 <mavlink_parse_char+0x2ee>
			// Check second checksum byte
			status->parse_error++;
80012702:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012706:	11 a8       	ld.ub	r8,r8[0x2]
80012708:	2f f8       	sub	r8,-1
8001270a:	5c 58       	castu.b	r8
8001270c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012710:	b2 a8       	st.b	r9[0x2],r8
			status->msg_received = 0;
80012712:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012716:	30 08       	mov	r8,0
80012718:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
8001271a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001271e:	30 19       	mov	r9,1
80012720:	91 19       	st.w	r8[0x4],r9
			if (c == MAVLINK_STX)
80012722:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80012726:	3f e8       	mov	r8,-2
80012728:	f0 09 18 00 	cp.b	r9,r8
8001272c:	c3 01       	brne	8001278c <mavlink_parse_char+0x334>
			{
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
8001272e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012732:	30 29       	mov	r9,2
80012734:	91 19       	st.w	r8[0x4],r9
				rxmsg->len = 0;
80012736:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001273a:	30 08       	mov	r8,0
8001273c:	b2 b8       	st.b	r9[0x3],r8
				mavlink_start_checksum(rxmsg);
8001273e:	ee fc ff f4 	ld.w	r12,r7[-12]
80012742:	c6 1e       	rcall	80012404 <mavlink_start_checksum>
80012744:	c2 48       	rjmp	8001278c <mavlink_parse_char+0x334>
			}
		}
		else
		{
			// Successfully got message
			status->msg_received = 1;
80012746:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001274a:	30 18       	mov	r8,1
8001274c:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
8001274e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012752:	30 19       	mov	r9,1
80012754:	91 19       	st.w	r8[0x4],r9
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
80012756:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001275a:	2f 88       	sub	r8,-8
8001275c:	10 99       	mov	r9,r8
8001275e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012762:	f1 38 00 08 	ld.ub	r8,r8[8]
80012766:	2f f8       	sub	r8,-1
80012768:	10 09       	add	r9,r8
8001276a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001276e:	b2 88       	st.b	r9[0x0],r8
			memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
80012770:	e0 6a 01 10 	mov	r10,272
80012774:	ee fb ff f4 	ld.w	r11,r7[-12]
80012778:	ee fc ff e8 	ld.w	r12,r7[-24]
8001277c:	f0 16 00 21 	mcall	r6[132]
80012780:	c0 68       	rjmp	8001278c <mavlink_parse_char+0x334>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
			rxmsg->len = 0;
			rxmsg->magic = c;
			mavlink_start_checksum(rxmsg);
		}
		break;
80012782:	d7 03       	nop
80012784:	c0 48       	rjmp	8001278c <mavlink_parse_char+0x334>
		mavlink_update_checksum(rxmsg, c);
		if (status->packet_idx == rxmsg->len)
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
		}
		break;
80012786:	d7 03       	nop
80012788:	c0 28       	rjmp	8001278c <mavlink_parse_char+0x334>
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
		}
		break;
8001278a:	d7 03       	nop
			memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
		}
		break;
	}

	bufferIndex++;
8001278c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012790:	2f f8       	sub	r8,-1
80012792:	ef 48 ff fc 	st.w	r7[-4],r8
	// If a message has been sucessfully decoded, check index
	if (status->msg_received == 1)
80012796:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001279a:	11 89       	ld.ub	r9,r8[0x0]
8001279c:	30 18       	mov	r8,1
8001279e:	f0 09 18 00 	cp.b	r9,r8
800127a2:	c1 91       	brne	800127d4 <mavlink_parse_char+0x37c>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
800127a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800127a8:	11 c8       	ld.ub	r8,r8[0x4]
800127aa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800127ae:	f3 68 00 09 	st.b	r9[9],r8
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
800127b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800127b6:	90 68       	ld.sh	r8,r8[0xc]
800127b8:	58 08       	cp.w	r8,0
800127ba:	c0 51       	brne	800127c4 <mavlink_parse_char+0x36c>
800127bc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800127c0:	30 08       	mov	r8,0
800127c2:	b2 78       	st.h	r9[0xe],r8
		// Count this packet as received
		status->packet_rx_success_count++;
800127c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800127c8:	90 68       	ld.sh	r8,r8[0xc]
800127ca:	2f f8       	sub	r8,-1
800127cc:	5c 88       	casts.h	r8
800127ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800127d2:	b2 68       	st.h	r9[0xc],r8
	}

	r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
800127d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800127d8:	f1 38 00 09 	ld.ub	r8,r8[9]
800127dc:	2f f8       	sub	r8,-1
800127de:	5c 58       	castu.b	r8
800127e0:	ee f9 ff e4 	ld.w	r9,r7[-28]
800127e4:	f3 68 00 09 	st.b	r9[9],r8
	r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
800127e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800127ec:	90 68       	ld.sh	r8,r8[0xc]
800127ee:	ee f9 ff e4 	ld.w	r9,r7[-28]
800127f2:	b2 68       	st.h	r9[0xc],r8
	r_mavlink_status->packet_rx_drop_count = status->parse_error;
800127f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800127f8:	11 a8       	ld.ub	r8,r8[0x2]
800127fa:	ee f9 ff e4 	ld.w	r9,r7[-28]
800127fe:	b2 78       	st.h	r9[0xe],r8
	status->parse_error = 0;
80012800:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012804:	30 08       	mov	r8,0
80012806:	b2 a8       	st.b	r9[0x2],r8
	return status->msg_received;
80012808:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001280c:	11 88       	ld.ub	r8,r8[0x0]
}
8001280e:	10 9c       	mov	r12,r8
80012810:	2f 9d       	sub	sp,-28
80012812:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012816:	00 00       	add	r0,r0
80012818:	80 01       	ld.sh	r1,r0[0x0]
8001281a:	22 e8       	sub	r8,46

8001281c <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
8001281c:	eb cd 40 80 	pushm	r7,lr
80012820:	1a 97       	mov	r7,sp
80012822:	20 2d       	sub	sp,8
80012824:	ef 4c ff fc 	st.w	r7[-4],r12
80012828:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
8001282c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012830:	2f f8       	sub	r8,-1
80012832:	11 88       	ld.ub	r8,r8[0x0]
80012834:	ee f9 ff fc 	ld.w	r9,r7[-4]
80012838:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
8001283a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001283e:	f0 c9 ff ff 	sub	r9,r8,-1
80012842:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012846:	11 88       	ld.ub	r8,r8[0x0]
80012848:	b2 88       	st.b	r9[0x0],r8
}
8001284a:	2f ed       	sub	sp,-8
8001284c:	e3 cd 80 80 	ldm	sp++,r7,pc

80012850 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80012850:	eb cd 40 c0 	pushm	r6-r7,lr
80012854:	1a 97       	mov	r7,sp
80012856:	20 3d       	sub	sp,12
80012858:	49 06       	lddpc	r6,80012898 <mav_array_memcpy+0x48>
8001285a:	1e 26       	rsub	r6,pc
8001285c:	ef 4c ff fc 	st.w	r7[-4],r12
80012860:	ef 4b ff f8 	st.w	r7[-8],r11
80012864:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80012868:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001286c:	58 08       	cp.w	r8,0
8001286e:	c0 91       	brne	80012880 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80012870:	ee fa ff f4 	ld.w	r10,r7[-12]
80012874:	30 0b       	mov	r11,0
80012876:	ee fc ff fc 	ld.w	r12,r7[-4]
8001287a:	f0 16 00 31 	mcall	r6[196]
8001287e:	c0 98       	rjmp	80012890 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80012880:	ee fa ff f4 	ld.w	r10,r7[-12]
80012884:	ee fb ff f8 	ld.w	r11,r7[-8]
80012888:	ee fc ff fc 	ld.w	r12,r7[-4]
8001288c:	f0 16 00 21 	mcall	r6[132]
	}
}
80012890:	2f dd       	sub	sp,-12
80012892:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012896:	00 00       	add	r0,r0
80012898:	80 01       	ld.sh	r1,r0[0x0]
8001289a:	26 de       	sub	lr,109

8001289c <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
8001289c:	eb cd 40 c0 	pushm	r6-r7,lr
800128a0:	1a 97       	mov	r7,sp
800128a2:	20 3d       	sub	sp,12
800128a4:	48 d6       	lddpc	r6,800128d8 <_MAV_RETURN_uint16_t+0x3c>
800128a6:	1e 26       	rsub	r6,pc
800128a8:	ef 4c ff f8 	st.w	r7[-8],r12
800128ac:	16 98       	mov	r8,r11
800128ae:	ef 68 ff f4 	st.b	r7[-12],r8
800128b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800128b6:	2f 88       	sub	r8,-8
800128b8:	10 99       	mov	r9,r8
800128ba:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800128be:	10 09       	add	r9,r8
800128c0:	ee c8 00 02 	sub	r8,r7,2
800128c4:	12 9b       	mov	r11,r9
800128c6:	10 9c       	mov	r12,r8
800128c8:	ca af       	rcall	8001281c <byte_swap_2>
800128ca:	ef 08 ff fe 	ld.sh	r8,r7[-2]
800128ce:	10 9c       	mov	r12,r8
800128d0:	2f dd       	sub	sp,-12
800128d2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800128d6:	00 00       	add	r0,r0
800128d8:	80 01       	ld.sh	r1,r0[0x0]
800128da:	27 2a       	sub	r10,114

800128dc <_MAV_RETURN_int16_t>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
800128dc:	eb cd 40 c0 	pushm	r6-r7,lr
800128e0:	1a 97       	mov	r7,sp
800128e2:	20 3d       	sub	sp,12
800128e4:	48 d6       	lddpc	r6,80012918 <_MAV_RETURN_int16_t+0x3c>
800128e6:	1e 26       	rsub	r6,pc
800128e8:	ef 4c ff f8 	st.w	r7[-8],r12
800128ec:	16 98       	mov	r8,r11
800128ee:	ef 68 ff f4 	st.b	r7[-12],r8
800128f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800128f6:	2f 88       	sub	r8,-8
800128f8:	10 99       	mov	r9,r8
800128fa:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800128fe:	10 09       	add	r9,r8
80012900:	ee c8 00 02 	sub	r8,r7,2
80012904:	12 9b       	mov	r11,r9
80012906:	10 9c       	mov	r12,r8
80012908:	c8 af       	rcall	8001281c <byte_swap_2>
8001290a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001290e:	10 9c       	mov	r12,r8
80012910:	2f dd       	sub	sp,-12
80012912:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012916:	00 00       	add	r0,r0
80012918:	80 01       	ld.sh	r1,r0[0x0]
8001291a:	27 6a       	sub	r10,118

8001291c <_MAV_RETURN_char_array>:
_MAV_MSG_RETURN_TYPE(double)
#endif // MAVLINK_NEED_BYTE_SWAP

static inline uint16_t _MAV_RETURN_char_array(const mavlink_message_t *msg, char *value, 
						     uint8_t array_length, uint8_t wire_offset)
{
8001291c:	eb cd 40 c0 	pushm	r6-r7,lr
80012920:	1a 97       	mov	r7,sp
80012922:	20 4d       	sub	sp,16
80012924:	49 16       	lddpc	r6,80012968 <_MAV_RETURN_char_array+0x4c>
80012926:	1e 26       	rsub	r6,pc
80012928:	ef 4c ff fc 	st.w	r7[-4],r12
8001292c:	ef 4b ff f8 	st.w	r7[-8],r11
80012930:	12 98       	mov	r8,r9
80012932:	14 99       	mov	r9,r10
80012934:	ef 69 ff f4 	st.b	r7[-12],r9
80012938:	ef 68 ff f0 	st.b	r7[-16],r8
	memcpy(value, &_MAV_PAYLOAD(msg)[wire_offset], array_length);
8001293c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80012940:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012944:	f0 ca ff f8 	sub	r10,r8,-8
80012948:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001294c:	f4 08 00 08 	add	r8,r10,r8
80012950:	12 9a       	mov	r10,r9
80012952:	10 9b       	mov	r11,r8
80012954:	ee fc ff f8 	ld.w	r12,r7[-8]
80012958:	f0 16 00 21 	mcall	r6[132]
	return array_length;
8001295c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
}
80012960:	10 9c       	mov	r12,r8
80012962:	2f cd       	sub	sp,-16
80012964:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012968:	80 01       	ld.sh	r1,r0[0x0]
8001296a:	27 aa       	sub	r10,122

8001296c <mavlink_msg_param_request_read_get_target_system>:
 * @brief Get field target_system from param_request_read message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_param_request_read_get_target_system(const mavlink_message_t* msg)
{
8001296c:	eb cd 40 80 	pushm	r7,lr
80012970:	1a 97       	mov	r7,sp
80012972:	20 1d       	sub	sp,4
80012974:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
80012978:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001297c:	2f 88       	sub	r8,-8
8001297e:	2f e8       	sub	r8,-2
80012980:	11 88       	ld.ub	r8,r8[0x0]
}
80012982:	10 9c       	mov	r12,r8
80012984:	2f fd       	sub	sp,-4
80012986:	e3 cd 80 80 	ldm	sp++,r7,pc

8001298a <mavlink_msg_param_request_read_get_target_component>:
 * @brief Get field target_component from param_request_read message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_param_request_read_get_target_component(const mavlink_message_t* msg)
{
8001298a:	eb cd 40 80 	pushm	r7,lr
8001298e:	1a 97       	mov	r7,sp
80012990:	20 1d       	sub	sp,4
80012992:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
80012996:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001299a:	2f 88       	sub	r8,-8
8001299c:	2f d8       	sub	r8,-3
8001299e:	11 88       	ld.ub	r8,r8[0x0]
}
800129a0:	10 9c       	mov	r12,r8
800129a2:	2f fd       	sub	sp,-4
800129a4:	e3 cd 80 80 	ldm	sp++,r7,pc

800129a8 <mavlink_msg_param_request_read_get_param_id>:
 * @brief Get field param_id from param_request_read message
 *
 * @return Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
 */
static inline uint16_t mavlink_msg_param_request_read_get_param_id(const mavlink_message_t* msg, char *param_id)
{
800129a8:	eb cd 40 c0 	pushm	r6-r7,lr
800129ac:	1a 97       	mov	r7,sp
800129ae:	20 2d       	sub	sp,8
800129b0:	48 a6       	lddpc	r6,800129d8 <mavlink_msg_param_request_read_get_param_id+0x30>
800129b2:	1e 26       	rsub	r6,pc
800129b4:	ef 4c ff fc 	st.w	r7[-4],r12
800129b8:	ef 4b ff f8 	st.w	r7[-8],r11
	return _MAV_RETURN_char_array(msg, param_id, 16,  4);
800129bc:	30 49       	mov	r9,4
800129be:	31 0a       	mov	r10,16
800129c0:	ee fb ff f8 	ld.w	r11,r7[-8]
800129c4:	ee fc ff fc 	ld.w	r12,r7[-4]
800129c8:	ca af       	rcall	8001291c <_MAV_RETURN_char_array>
800129ca:	18 98       	mov	r8,r12
800129cc:	5c 88       	casts.h	r8
800129ce:	5c 88       	casts.h	r8
}
800129d0:	10 9c       	mov	r12,r8
800129d2:	2f ed       	sub	sp,-8
800129d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800129d8:	80 01       	ld.sh	r1,r0[0x0]
800129da:	28 36       	sub	r6,-125

800129dc <mavlink_msg_param_request_read_get_param_index>:
 * @brief Get field param_index from param_request_read message
 *
 * @return Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored)
 */
static inline int16_t mavlink_msg_param_request_read_get_param_index(const mavlink_message_t* msg)
{
800129dc:	eb cd 40 c0 	pushm	r6-r7,lr
800129e0:	1a 97       	mov	r7,sp
800129e2:	20 1d       	sub	sp,4
800129e4:	48 76       	lddpc	r6,80012a00 <mavlink_msg_param_request_read_get_param_index+0x24>
800129e6:	1e 26       	rsub	r6,pc
800129e8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  0);
800129ec:	30 0b       	mov	r11,0
800129ee:	ee fc ff fc 	ld.w	r12,r7[-4]
800129f2:	c7 5f       	rcall	800128dc <_MAV_RETURN_int16_t>
800129f4:	18 98       	mov	r8,r12
}
800129f6:	10 9c       	mov	r12,r8
800129f8:	2f fd       	sub	sp,-4
800129fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800129fe:	00 00       	add	r0,r0
80012a00:	80 01       	ld.sh	r1,r0[0x0]
80012a02:	28 6a       	sub	r10,-122

80012a04 <mavlink_msg_param_request_read_decode>:
 *
 * @param msg The message to decode
 * @param param_request_read C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_request_read_decode(const mavlink_message_t* msg, mavlink_param_request_read_t* param_request_read)
{
80012a04:	eb cd 40 c0 	pushm	r6-r7,lr
80012a08:	1a 97       	mov	r7,sp
80012a0a:	20 2d       	sub	sp,8
80012a0c:	49 36       	lddpc	r6,80012a58 <mavlink_msg_param_request_read_decode+0x54>
80012a0e:	1e 26       	rsub	r6,pc
80012a10:	ef 4c ff fc 	st.w	r7[-4],r12
80012a14:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	param_request_read->param_index = mavlink_msg_param_request_read_get_param_index(msg);
80012a18:	ee fc ff fc 	ld.w	r12,r7[-4]
80012a1c:	ce 0f       	rcall	800129dc <mavlink_msg_param_request_read_get_param_index>
80012a1e:	18 98       	mov	r8,r12
80012a20:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012a24:	b2 08       	st.h	r9[0x0],r8
	param_request_read->target_system = mavlink_msg_param_request_read_get_target_system(msg);
80012a26:	ee fc ff fc 	ld.w	r12,r7[-4]
80012a2a:	ca 1f       	rcall	8001296c <mavlink_msg_param_request_read_get_target_system>
80012a2c:	18 98       	mov	r8,r12
80012a2e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012a32:	b2 a8       	st.b	r9[0x2],r8
	param_request_read->target_component = mavlink_msg_param_request_read_get_target_component(msg);
80012a34:	ee fc ff fc 	ld.w	r12,r7[-4]
80012a38:	ca 9f       	rcall	8001298a <mavlink_msg_param_request_read_get_target_component>
80012a3a:	18 98       	mov	r8,r12
80012a3c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012a40:	b2 b8       	st.b	r9[0x3],r8
	mavlink_msg_param_request_read_get_param_id(msg, param_request_read->param_id);
80012a42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012a46:	2f c8       	sub	r8,-4
80012a48:	10 9b       	mov	r11,r8
80012a4a:	ee fc ff fc 	ld.w	r12,r7[-4]
80012a4e:	ca df       	rcall	800129a8 <mavlink_msg_param_request_read_get_param_id>
#else
	memcpy(param_request_read, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PARAM_REQUEST_READ_LEN);
#endif
}
80012a50:	2f ed       	sub	sp,-8
80012a52:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012a56:	00 00       	add	r0,r0
80012a58:	80 01       	ld.sh	r1,r0[0x0]
80012a5a:	28 92       	sub	r2,-119

80012a5c <mavlink_msg_param_request_list_get_target_system>:
 * @brief Get field target_system from param_request_list message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_param_request_list_get_target_system(const mavlink_message_t* msg)
{
80012a5c:	eb cd 40 80 	pushm	r7,lr
80012a60:	1a 97       	mov	r7,sp
80012a62:	20 1d       	sub	sp,4
80012a64:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
80012a68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012a6c:	2f 88       	sub	r8,-8
80012a6e:	11 88       	ld.ub	r8,r8[0x0]
}
80012a70:	10 9c       	mov	r12,r8
80012a72:	2f fd       	sub	sp,-4
80012a74:	e3 cd 80 80 	ldm	sp++,r7,pc

80012a78 <mavlink_msg_param_request_list_get_target_component>:
 * @brief Get field target_component from param_request_list message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_param_request_list_get_target_component(const mavlink_message_t* msg)
{
80012a78:	eb cd 40 80 	pushm	r7,lr
80012a7c:	1a 97       	mov	r7,sp
80012a7e:	20 1d       	sub	sp,4
80012a80:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
80012a84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012a88:	2f 88       	sub	r8,-8
80012a8a:	2f f8       	sub	r8,-1
80012a8c:	11 88       	ld.ub	r8,r8[0x0]
}
80012a8e:	10 9c       	mov	r12,r8
80012a90:	2f fd       	sub	sp,-4
80012a92:	e3 cd 80 80 	ldm	sp++,r7,pc

80012a96 <mavlink_msg_param_request_list_decode>:
 *
 * @param msg The message to decode
 * @param param_request_list C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_request_list_decode(const mavlink_message_t* msg, mavlink_param_request_list_t* param_request_list)
{
80012a96:	eb cd 40 c0 	pushm	r6-r7,lr
80012a9a:	1a 97       	mov	r7,sp
80012a9c:	20 2d       	sub	sp,8
80012a9e:	48 c6       	lddpc	r6,80012acc <mavlink_msg_param_request_list_decode+0x36>
80012aa0:	1e 26       	rsub	r6,pc
80012aa2:	ef 4c ff fc 	st.w	r7[-4],r12
80012aa6:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	param_request_list->target_system = mavlink_msg_param_request_list_get_target_system(msg);
80012aaa:	ee fc ff fc 	ld.w	r12,r7[-4]
80012aae:	cd 7f       	rcall	80012a5c <mavlink_msg_param_request_list_get_target_system>
80012ab0:	18 98       	mov	r8,r12
80012ab2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012ab6:	b2 88       	st.b	r9[0x0],r8
	param_request_list->target_component = mavlink_msg_param_request_list_get_target_component(msg);
80012ab8:	ee fc ff fc 	ld.w	r12,r7[-4]
80012abc:	cd ef       	rcall	80012a78 <mavlink_msg_param_request_list_get_target_component>
80012abe:	18 98       	mov	r8,r12
80012ac0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012ac4:	b2 98       	st.b	r9[0x1],r8
#else
	memcpy(param_request_list, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PARAM_REQUEST_LIST_LEN);
#endif
}
80012ac6:	2f ed       	sub	sp,-8
80012ac8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012acc:	80 01       	ld.sh	r1,r0[0x0]
80012ace:	29 24       	sub	r4,-110

80012ad0 <mavlink_msg_request_data_stream_get_target_system>:
 * @brief Get field target_system from request_data_stream message
 *
 * @return The target requested to send the message stream.
 */
static inline uint8_t mavlink_msg_request_data_stream_get_target_system(const mavlink_message_t* msg)
{
80012ad0:	eb cd 40 80 	pushm	r7,lr
80012ad4:	1a 97       	mov	r7,sp
80012ad6:	20 1d       	sub	sp,4
80012ad8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
80012adc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012ae0:	2f 88       	sub	r8,-8
80012ae2:	2f e8       	sub	r8,-2
80012ae4:	11 88       	ld.ub	r8,r8[0x0]
}
80012ae6:	10 9c       	mov	r12,r8
80012ae8:	2f fd       	sub	sp,-4
80012aea:	e3 cd 80 80 	ldm	sp++,r7,pc

80012aee <mavlink_msg_request_data_stream_get_target_component>:
 * @brief Get field target_component from request_data_stream message
 *
 * @return The target requested to send the message stream.
 */
static inline uint8_t mavlink_msg_request_data_stream_get_target_component(const mavlink_message_t* msg)
{
80012aee:	eb cd 40 80 	pushm	r7,lr
80012af2:	1a 97       	mov	r7,sp
80012af4:	20 1d       	sub	sp,4
80012af6:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
80012afa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012afe:	2f 88       	sub	r8,-8
80012b00:	2f d8       	sub	r8,-3
80012b02:	11 88       	ld.ub	r8,r8[0x0]
}
80012b04:	10 9c       	mov	r12,r8
80012b06:	2f fd       	sub	sp,-4
80012b08:	e3 cd 80 80 	ldm	sp++,r7,pc

80012b0c <mavlink_msg_request_data_stream_get_req_stream_id>:
 * @brief Get field req_stream_id from request_data_stream message
 *
 * @return The ID of the requested data stream
 */
static inline uint8_t mavlink_msg_request_data_stream_get_req_stream_id(const mavlink_message_t* msg)
{
80012b0c:	eb cd 40 80 	pushm	r7,lr
80012b10:	1a 97       	mov	r7,sp
80012b12:	20 1d       	sub	sp,4
80012b14:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  4);
80012b18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012b1c:	2f 88       	sub	r8,-8
80012b1e:	2f c8       	sub	r8,-4
80012b20:	11 88       	ld.ub	r8,r8[0x0]
}
80012b22:	10 9c       	mov	r12,r8
80012b24:	2f fd       	sub	sp,-4
80012b26:	e3 cd 80 80 	ldm	sp++,r7,pc

80012b2a <mavlink_msg_request_data_stream_get_req_message_rate>:
 * @brief Get field req_message_rate from request_data_stream message
 *
 * @return The requested interval between two messages of this type
 */
static inline uint16_t mavlink_msg_request_data_stream_get_req_message_rate(const mavlink_message_t* msg)
{
80012b2a:	eb cd 40 c0 	pushm	r6-r7,lr
80012b2e:	1a 97       	mov	r7,sp
80012b30:	20 1d       	sub	sp,4
80012b32:	48 86       	lddpc	r6,80012b50 <mavlink_msg_request_data_stream_get_req_message_rate+0x26>
80012b34:	1e 26       	rsub	r6,pc
80012b36:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
80012b3a:	30 0b       	mov	r11,0
80012b3c:	ee fc ff fc 	ld.w	r12,r7[-4]
80012b40:	ca ee       	rcall	8001289c <_MAV_RETURN_uint16_t>
80012b42:	18 98       	mov	r8,r12
80012b44:	5c 88       	casts.h	r8
80012b46:	5c 88       	casts.h	r8
}
80012b48:	10 9c       	mov	r12,r8
80012b4a:	2f fd       	sub	sp,-4
80012b4c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012b50:	80 01       	ld.sh	r1,r0[0x0]
80012b52:	29 b8       	sub	r8,-101

80012b54 <mavlink_msg_request_data_stream_get_start_stop>:
 * @brief Get field start_stop from request_data_stream message
 *
 * @return 1 to start sending, 0 to stop sending.
 */
static inline uint8_t mavlink_msg_request_data_stream_get_start_stop(const mavlink_message_t* msg)
{
80012b54:	eb cd 40 80 	pushm	r7,lr
80012b58:	1a 97       	mov	r7,sp
80012b5a:	20 1d       	sub	sp,4
80012b5c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  5);
80012b60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012b64:	2f 88       	sub	r8,-8
80012b66:	2f b8       	sub	r8,-5
80012b68:	11 88       	ld.ub	r8,r8[0x0]
}
80012b6a:	10 9c       	mov	r12,r8
80012b6c:	2f fd       	sub	sp,-4
80012b6e:	e3 cd 80 80 	ldm	sp++,r7,pc

80012b72 <mavlink_msg_request_data_stream_decode>:
 *
 * @param msg The message to decode
 * @param request_data_stream C-struct to decode the message contents into
 */
static inline void mavlink_msg_request_data_stream_decode(const mavlink_message_t* msg, mavlink_request_data_stream_t* request_data_stream)
{
80012b72:	eb cd 40 c0 	pushm	r6-r7,lr
80012b76:	1a 97       	mov	r7,sp
80012b78:	20 2d       	sub	sp,8
80012b7a:	49 76       	lddpc	r6,80012bd4 <mavlink_msg_request_data_stream_decode+0x62>
80012b7c:	1e 26       	rsub	r6,pc
80012b7e:	ef 4c ff fc 	st.w	r7[-4],r12
80012b82:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	request_data_stream->req_message_rate = mavlink_msg_request_data_stream_get_req_message_rate(msg);
80012b86:	ee fc ff fc 	ld.w	r12,r7[-4]
80012b8a:	cd 0f       	rcall	80012b2a <mavlink_msg_request_data_stream_get_req_message_rate>
80012b8c:	18 98       	mov	r8,r12
80012b8e:	5c 88       	casts.h	r8
80012b90:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012b94:	b2 08       	st.h	r9[0x0],r8
	request_data_stream->target_system = mavlink_msg_request_data_stream_get_target_system(msg);
80012b96:	ee fc ff fc 	ld.w	r12,r7[-4]
80012b9a:	c9 bf       	rcall	80012ad0 <mavlink_msg_request_data_stream_get_target_system>
80012b9c:	18 98       	mov	r8,r12
80012b9e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012ba2:	b2 a8       	st.b	r9[0x2],r8
	request_data_stream->target_component = mavlink_msg_request_data_stream_get_target_component(msg);
80012ba4:	ee fc ff fc 	ld.w	r12,r7[-4]
80012ba8:	ca 3f       	rcall	80012aee <mavlink_msg_request_data_stream_get_target_component>
80012baa:	18 98       	mov	r8,r12
80012bac:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012bb0:	b2 b8       	st.b	r9[0x3],r8
	request_data_stream->req_stream_id = mavlink_msg_request_data_stream_get_req_stream_id(msg);
80012bb2:	ee fc ff fc 	ld.w	r12,r7[-4]
80012bb6:	ca bf       	rcall	80012b0c <mavlink_msg_request_data_stream_get_req_stream_id>
80012bb8:	18 98       	mov	r8,r12
80012bba:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012bbe:	b2 c8       	st.b	r9[0x4],r8
	request_data_stream->start_stop = mavlink_msg_request_data_stream_get_start_stop(msg);
80012bc0:	ee fc ff fc 	ld.w	r12,r7[-4]
80012bc4:	cc 8f       	rcall	80012b54 <mavlink_msg_request_data_stream_get_start_stop>
80012bc6:	18 98       	mov	r8,r12
80012bc8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012bcc:	b2 d8       	st.b	r9[0x5],r8
#else
	memcpy(request_data_stream, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_REQUEST_DATA_STREAM_LEN);
#endif
}
80012bce:	2f ed       	sub	sp,-8
80012bd0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012bd4:	80 01       	ld.sh	r1,r0[0x0]
80012bd6:	2a 00       	sub	r0,-96

80012bd8 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80012bd8:	eb cd 40 c0 	pushm	r6-r7,lr
80012bdc:	1a 97       	mov	r7,sp
80012bde:	20 6d       	sub	sp,24
80012be0:	49 e6       	lddpc	r6,80012c58 <interpolate+0x80>
80012be2:	1e 26       	rsub	r6,pc
80012be4:	ef 4c ff f8 	st.w	r7[-8],r12
80012be8:	ef 4b ff f4 	st.w	r7[-12],r11
80012bec:	ef 4a ff f0 	st.w	r7[-16],r10
80012bf0:	ef 49 ff ec 	st.w	r7[-20],r9
80012bf4:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80012bf8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80012bfc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80012c00:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80012c04:	c0 41       	brne	80012c0c <interpolate+0x34>
	{
		return y1;
80012c06:	ee f8 ff ec 	ld.w	r8,r7[-20]
80012c0a:	c2 38       	rjmp	80012c50 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80012c0c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80012c10:	ee f8 ff ec 	ld.w	r8,r7[-20]
80012c14:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80012c18:	ee fa ff f8 	ld.w	r10,r7[-8]
80012c1c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012c20:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80012c24:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80012c28:	ee fa ff f0 	ld.w	r10,r7[-16]
80012c2c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80012c30:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80012c34:	12 9b       	mov	r11,r9
80012c36:	10 9c       	mov	r12,r8
80012c38:	f0 16 00 08 	mcall	r6[32]
80012c3c:	18 98       	mov	r8,r12
80012c3e:	10 99       	mov	r9,r8
80012c40:	ee f8 ff ec 	ld.w	r8,r7[-20]
80012c44:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80012c48:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80012c4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80012c50:	10 9c       	mov	r12,r8
80012c52:	2f ad       	sub	sp,-24
80012c54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012c58:	80 01       	ld.sh	r1,r0[0x0]
80012c5a:	2a 66       	sub	r6,-90

80012c5c <comm_send_ch>:
central_data_t *centralData;

NEW_TASK_SET (mavlink_tasks, 30)

void comm_send_ch(mavlink_channel_t chan, uint8_t ch)
{
80012c5c:	eb cd 40 c0 	pushm	r6-r7,lr
80012c60:	1a 97       	mov	r7,sp
80012c62:	20 2d       	sub	sp,8
80012c64:	48 e6       	lddpc	r6,80012c9c <comm_send_ch+0x40>
80012c66:	1e 26       	rsub	r6,pc
80012c68:	ef 4c ff fc 	st.w	r7[-4],r12
80012c6c:	16 98       	mov	r8,r11
80012c6e:	ef 68 ff f8 	st.b	r7[-8],r8
	if (chan == MAVLINK_COMM_0)
80012c72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012c76:	58 08       	cp.w	r8,0
80012c78:	c0 e1       	brne	80012c94 <comm_send_ch+0x38>
	{
		//uart0_transmit(ch);
		mavlink_out_stream->put(mavlink_out_stream->data, ch);
80012c7a:	ec f8 01 60 	ld.w	r8,r6[352]
80012c7e:	70 08       	ld.w	r8,r8[0x0]
80012c80:	70 18       	ld.w	r8,r8[0x4]
80012c82:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80012c86:	ec f9 01 60 	ld.w	r9,r6[352]
80012c8a:	72 09       	ld.w	r9,r9[0x0]
80012c8c:	72 59       	ld.w	r9,r9[0x14]
80012c8e:	14 9b       	mov	r11,r10
80012c90:	12 9c       	mov	r12,r9
80012c92:	5d 18       	icall	r8
	}
	if (chan == MAVLINK_COMM_1)
	{
		//uart1_transmit(ch);
	}
}
80012c94:	2f ed       	sub	sp,-8
80012c96:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012c9a:	00 00       	add	r0,r0
80012c9c:	80 01       	ld.sh	r1,r0[0x0]
80012c9e:	2a ea       	sub	r10,-82
80012ca0:	0a 20       	rsub	r0,r5
80012ca2:	52 65       	stdsp	sp[0x98],r5
80012ca4:	63 65       	ld.w	r5,r1[0x58]
80012ca6:	69 76       	ld.w	r6,r4[0x5c]
80012ca8:	65 64       	ld.w	r4,r2[0x58]
80012caa:	20 6d       	sub	sp,24
80012cac:	65 73       	ld.w	r3,r2[0x5c]
80012cae:	73 61       	ld.w	r1,r9[0x58]
80012cb0:	67 65       	ld.w	r5,r3[0x58]
80012cb2:	20 77       	sub	r7,7
80012cb4:	69 74       	ld.w	r4,r4[0x5c]
80012cb6:	68 20       	ld.w	r0,r4[0x8]
80012cb8:	49 44       	lddpc	r4,80012d08 <mavlink_receive_handler+0x2a>
80012cba:	00 00       	add	r0,r0
80012cbc:	20 66       	sub	r6,6
80012cbe:	72 6f       	ld.w	pc,r9[0x18]
80012cc0:	6d 20       	ld.w	r0,r6[0x48]
80012cc2:	73 79       	ld.w	r9,r9[0x5c]
80012cc4:	73 74       	ld.w	r4,r9[0x5c]
80012cc6:	65 6d       	ld.w	sp,r2[0x58]
80012cc8:	00 00       	add	r0,r0
80012cca:	00 00       	add	r0,r0
80012ccc:	20 66       	sub	r6,6
80012cce:	6f 72       	ld.w	r2,r7[0x5c]
80012cd0:	20 63       	sub	r3,6
80012cd2:	6f 6d       	ld.w	sp,r7[0x58]
80012cd4:	70 6f       	ld.w	pc,r8[0x18]
80012cd6:	6e 65       	ld.w	r5,r7[0x18]
80012cd8:	6e 74       	ld.w	r4,r7[0x1c]
80012cda:	00 00       	add	r0,r0
80012cdc:	0a 00       	add	r0,r5

80012cde <mavlink_receive_handler>:

void mavlink_receive_handler() {
80012cde:	eb cd 40 c0 	pushm	r6-r7,lr
80012ce2:	1a 97       	mov	r7,sp
80012ce4:	fa cd 01 20 	sub	sp,sp,288
80012ce8:	49 c6       	lddpc	r6,80012d58 <mavlink_receive_handler+0x7a>
80012cea:	1e 26       	rsub	r6,pc
	Mavlink_Received_t rec;
	
	if(mavlink_receive(mavlink_in_stream, &rec)) {
80012cec:	ec f8 04 d8 	ld.w	r8,r6[1240]
80012cf0:	70 08       	ld.w	r8,r8[0x0]
80012cf2:	ee c9 01 20 	sub	r9,r7,288
80012cf6:	12 9b       	mov	r11,r9
80012cf8:	10 9c       	mov	r12,r8
80012cfa:	f0 16 01 44 	mcall	r6[1296]
80012cfe:	18 98       	mov	r8,r12
80012d00:	58 08       	cp.w	r8,0
80012d02:	c2 80       	breq	80012d52 <mavlink_receive_handler+0x74>
		dbg_print("\n Received message with ID");
80012d04:	fe cc 00 64 	sub	r12,pc,100
80012d08:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(rec.msg.msgid, 10);
80012d0c:	ef 38 fe e7 	ld.ub	r8,r7[-281]
80012d10:	30 ab       	mov	r11,10
80012d12:	10 9c       	mov	r12,r8
80012d14:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" from system");
80012d18:	fe cc 00 5c 	sub	r12,pc,92
80012d1c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(rec.msg.sysid, 10);
80012d20:	ef 38 fe e5 	ld.ub	r8,r7[-283]
80012d24:	30 ab       	mov	r11,10
80012d26:	10 9c       	mov	r12,r8
80012d28:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" for component");
80012d2c:	fe cc 00 60 	sub	r12,pc,96
80012d30:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(rec.msg.compid,10);
80012d34:	ef 38 fe e6 	ld.ub	r8,r7[-282]
80012d38:	30 ab       	mov	r11,10
80012d3a:	10 9c       	mov	r12,r8
80012d3c:	f0 16 00 04 	mcall	r6[16]
			dbg_print( "\n");
80012d40:	fe cc 00 64 	sub	r12,pc,100
80012d44:	f0 16 00 01 	mcall	r6[4]
		
			handle_mavlink_message(&rec);
80012d48:	ee c8 01 20 	sub	r8,r7,288
80012d4c:	10 9c       	mov	r12,r8
80012d4e:	f0 16 01 78 	mcall	r6[1504]
		
		
	}
}
80012d52:	2b 8d       	sub	sp,-288
80012d54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012d58:	80 01       	ld.sh	r1,r0[0x0]
80012d5a:	2b 6e       	sub	lr,-74

80012d5c <init_mavlink>:

void init_mavlink(byte_stream_t *transmit_stream, byte_stream_t *receive_stream, int sysid) {
80012d5c:	eb cd 40 c0 	pushm	r6-r7,lr
80012d60:	1a 97       	mov	r7,sp
80012d62:	20 3d       	sub	sp,12
80012d64:	4a 36       	lddpc	r6,80012df0 <init_mavlink+0x94>
80012d66:	1e 26       	rsub	r6,pc
80012d68:	ef 4c ff fc 	st.w	r7[-4],r12
80012d6c:	ef 4b ff f8 	st.w	r7[-8],r11
80012d70:	ef 4a ff f4 	st.w	r7[-12],r10
	mavlink_system.sysid = sysid; // System ID, 1-255
80012d74:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012d78:	5c 58       	castu.b	r8
80012d7a:	ec f9 00 70 	ld.w	r9,r6[112]
80012d7e:	b2 88       	st.b	r9[0x0],r8
	mavlink_system.compid = 50; // Component/Subsystem ID, 1-255
80012d80:	ec f9 00 70 	ld.w	r9,r6[112]
80012d84:	33 28       	mov	r8,50
80012d86:	b2 98       	st.b	r9[0x1],r8
	mavlink_system.type = MAV_TYPE_QUADROTOR;
80012d88:	ec f9 00 70 	ld.w	r9,r6[112]
80012d8c:	30 28       	mov	r8,2
80012d8e:	b2 a8       	st.b	r9[0x2],r8
	
	mavlink_mission_planner.sysid = mavlink_system.sysid;
80012d90:	ec f8 00 70 	ld.w	r8,r6[112]
80012d94:	11 88       	ld.ub	r8,r8[0x0]
80012d96:	ec f9 00 c8 	ld.w	r9,r6[200]
80012d9a:	b2 88       	st.b	r9[0x0],r8
	mavlink_mission_planner.compid = MAV_COMP_ID_MISSIONPLANNER;
80012d9c:	ec f9 00 c8 	ld.w	r9,r6[200]
80012da0:	3b e8       	mov	r8,-66
80012da2:	b2 98       	st.b	r9[0x1],r8
	mavlink_mission_planner.type = MAV_TYPE_QUADROTOR;
80012da4:	ec f9 00 c8 	ld.w	r9,r6[200]
80012da8:	30 28       	mov	r8,2
80012daa:	b2 a8       	st.b	r9[0x2],r8
	
	mavlink_out_stream = transmit_stream;
80012dac:	ee f9 ff fc 	ld.w	r9,r7[-4]
80012db0:	ec f8 01 60 	ld.w	r8,r6[352]
80012db4:	91 09       	st.w	r8[0x0],r9
	mavlink_in_stream = receive_stream;
80012db6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012dba:	ec f8 04 d8 	ld.w	r8,r6[1240]
80012dbe:	91 09       	st.w	r8[0x0],r9
	
	init_scheduler(&mavlink_tasks);
80012dc0:	ec f8 01 28 	ld.w	r8,r6[296]
80012dc4:	10 9c       	mov	r12,r8
80012dc6:	f0 16 01 09 	mcall	r6[1060]
	
	add_task(&mavlink_tasks, 100000, RUN_REGULAR, &send_scheduled_parameters, MAVLINK_MSG_ID_PARAM_VALUE);
80012dca:	ec f9 05 34 	ld.w	r9,r6[1332]
80012dce:	ec fc 01 28 	ld.w	r12,r6[296]
80012dd2:	31 68       	mov	r8,22
80012dd4:	30 2a       	mov	r10,2
80012dd6:	e0 7b 86 a0 	mov	r11,100000
80012dda:	f0 16 00 24 	mcall	r6[144]

	centralData = get_central_data();
80012dde:	f0 16 00 33 	mcall	r6[204]
80012de2:	18 99       	mov	r9,r12
80012de4:	ec f8 00 00 	ld.w	r8,r6[0]
80012de8:	91 09       	st.w	r8[0x0],r9
}
80012dea:	2f dd       	sub	sp,-12
80012dec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012df0:	80 01       	ld.sh	r1,r0[0x0]
80012df2:	2b ea       	sub	r10,-66

80012df4 <flush_mavlink>:

void flush_mavlink() {
80012df4:	eb cd 40 c0 	pushm	r6-r7,lr
80012df8:	1a 97       	mov	r7,sp
80012dfa:	48 b6       	lddpc	r6,80012e24 <flush_mavlink+0x30>
80012dfc:	1e 26       	rsub	r6,pc
	if (mavlink_out_stream->flush!=NULL) {
80012dfe:	ec f8 01 60 	ld.w	r8,r6[352]
80012e02:	70 08       	ld.w	r8,r8[0x0]
80012e04:	70 28       	ld.w	r8,r8[0x8]
80012e06:	58 08       	cp.w	r8,0
80012e08:	c0 b0       	breq	80012e1e <flush_mavlink+0x2a>
		//mavlink_out_stream->buffer_empty(mavlink_out_stream->data);
		mavlink_out_stream->flush(mavlink_out_stream->data);	
80012e0a:	ec f8 01 60 	ld.w	r8,r6[352]
80012e0e:	70 08       	ld.w	r8,r8[0x0]
80012e10:	70 28       	ld.w	r8,r8[0x8]
80012e12:	ec f9 01 60 	ld.w	r9,r6[352]
80012e16:	72 09       	ld.w	r9,r9[0x0]
80012e18:	72 59       	ld.w	r9,r9[0x14]
80012e1a:	12 9c       	mov	r12,r9
80012e1c:	5d 18       	icall	r8
	
	}
}
80012e1e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012e22:	00 00       	add	r0,r0
80012e24:	80 01       	ld.sh	r1,r0[0x0]
80012e26:	2c 80       	sub	r0,-56

80012e28 <mavlink_protocol_update>:

task_return_t mavlink_protocol_update() {
80012e28:	eb cd 40 c0 	pushm	r6-r7,lr
80012e2c:	1a 97       	mov	r7,sp
80012e2e:	20 1d       	sub	sp,4
80012e30:	49 36       	lddpc	r6,80012e7c <mavlink_protocol_update+0x54>
80012e32:	1e 26       	rsub	r6,pc
	task_return_t result=0;
80012e34:	30 08       	mov	r8,0
80012e36:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_receive_handler();
80012e3a:	f0 16 02 24 	mcall	r6[2192]
	if ((mavlink_out_stream->buffer_empty(mavlink_out_stream->data))==true) {
80012e3e:	ec f8 01 60 	ld.w	r8,r6[352]
80012e42:	70 08       	ld.w	r8,r8[0x0]
80012e44:	70 38       	ld.w	r8,r8[0xc]
80012e46:	ec f9 01 60 	ld.w	r9,r6[352]
80012e4a:	72 09       	ld.w	r9,r9[0x0]
80012e4c:	72 59       	ld.w	r9,r9[0x14]
80012e4e:	12 9c       	mov	r12,r9
80012e50:	5d 18       	icall	r8
80012e52:	18 98       	mov	r8,r12
80012e54:	58 18       	cp.w	r8,1
80012e56:	c0 c1       	brne	80012e6e <mavlink_protocol_update+0x46>
		result = run_scheduler_update(&mavlink_tasks, ROUND_ROBIN);
80012e58:	ec f8 01 28 	ld.w	r8,r6[296]
80012e5c:	30 0b       	mov	r11,0
80012e5e:	10 9c       	mov	r12,r8
80012e60:	f0 16 00 ec 	mcall	r6[944]
80012e64:	18 98       	mov	r8,r12
80012e66:	ef 48 ff fc 	st.w	r7[-4],r8
		flush_mavlink();
80012e6a:	f0 16 00 2d 	mcall	r6[180]
	}
		
	
	return result;
80012e6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80012e72:	10 9c       	mov	r12,r8
80012e74:	2f fd       	sub	sp,-4
80012e76:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012e7a:	00 00       	add	r0,r0
80012e7c:	80 01       	ld.sh	r1,r0[0x0]
80012e7e:	2c b6       	sub	r6,-53

80012e80 <get_mavlink_taskset>:

task_set* get_mavlink_taskset() {
80012e80:	eb cd 40 c0 	pushm	r6-r7,lr
80012e84:	1a 97       	mov	r7,sp
80012e86:	48 46       	lddpc	r6,80012e94 <get_mavlink_taskset+0x14>
80012e88:	1e 26       	rsub	r6,pc
	return &mavlink_tasks;
80012e8a:	ec f8 01 28 	ld.w	r8,r6[296]
}
80012e8e:	10 9c       	mov	r12,r8
80012e90:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012e94:	80 01       	ld.sh	r1,r0[0x0]
80012e96:	2d 0c       	sub	r12,-48

80012e98 <suspend_downstream>:

void suspend_downstream(uint32_t delay) {
80012e98:	eb cd 40 c0 	pushm	r6-r7,lr
80012e9c:	1a 97       	mov	r7,sp
80012e9e:	20 2d       	sub	sp,8
80012ea0:	49 56       	lddpc	r6,80012ef4 <suspend_downstream+0x5c>
80012ea2:	1e 26       	rsub	r6,pc
80012ea4:	ef 4c ff f8 	st.w	r7[-8],r12
	int i;
	for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
80012ea8:	30 08       	mov	r8,0
80012eaa:	ef 48 ff fc 	st.w	r7[-4],r8
80012eae:	c1 78       	rjmp	80012edc <suspend_downstream+0x44>
		suspend_task(&mavlink_tasks.tasks[i], delay);
80012eb0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80012eb4:	12 98       	mov	r8,r9
80012eb6:	a1 78       	lsl	r8,0x1
80012eb8:	12 08       	add	r8,r9
80012eba:	a5 68       	lsl	r8,0x4
80012ebc:	10 99       	mov	r9,r8
80012ebe:	ec f8 01 28 	ld.w	r8,r6[296]
80012ec2:	2f c8       	sub	r8,-4
80012ec4:	f2 08 00 08 	add	r8,r9,r8
80012ec8:	ee fb ff f8 	ld.w	r11,r7[-8]
80012ecc:	10 9c       	mov	r12,r8
80012ece:	f0 16 01 be 	mcall	r6[1784]
	return &mavlink_tasks;
}

void suspend_downstream(uint32_t delay) {
	int i;
	for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
80012ed2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012ed6:	2f f8       	sub	r8,-1
80012ed8:	ef 48 ff fc 	st.w	r7[-4],r8
80012edc:	ec f8 01 28 	ld.w	r8,r6[296]
80012ee0:	11 88       	ld.ub	r8,r8[0x0]
80012ee2:	10 99       	mov	r9,r8
80012ee4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012ee8:	10 39       	cp.w	r9,r8
80012eea:	fe 99 ff e3 	brgt	80012eb0 <suspend_downstream+0x18>
		suspend_task(&mavlink_tasks.tasks[i], delay);
	}	
}
80012eee:	2f ed       	sub	sp,-8
80012ef0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012ef4:	80 01       	ld.sh	r1,r0[0x0]
80012ef6:	2d 26       	sub	r6,-46

80012ef8 <mavlink_receive>:

uint8_t mavlink_receive(byte_stream_t* stream, Mavlink_Received_t* rec) {
80012ef8:	eb cd 40 c0 	pushm	r6-r7,lr
80012efc:	1a 97       	mov	r7,sp
80012efe:	20 3d       	sub	sp,12
80012f00:	49 a6       	lddpc	r6,80012f68 <mavlink_receive+0x70>
80012f02:	1e 26       	rsub	r6,pc
80012f04:	ef 4c ff f8 	st.w	r7[-8],r12
80012f08:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t byte;
	//dbg_print(" ");
	while(stream->bytes_available(stream->data) > 0) {
80012f0c:	c1 d8       	rjmp	80012f46 <mavlink_receive+0x4e>
		byte = stream->get(stream->data);
80012f0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012f12:	70 08       	ld.w	r8,r8[0x0]
80012f14:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012f18:	72 59       	ld.w	r9,r9[0x14]
80012f1a:	12 9c       	mov	r12,r9
80012f1c:	5d 18       	icall	r8
80012f1e:	18 98       	mov	r8,r12
80012f20:	ef 68 ff ff 	st.b	r7[-1],r8
		//dbg_print(".");
		// dbg_print_num(byte, 16);
		// dbg_print(" ");
		if(mavlink_parse_char(MAVLINK_COMM_0, byte, &rec->msg, &rec->status)) {
80012f24:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012f28:	f0 c9 fe f0 	sub	r9,r8,-272
80012f2c:	ee fa ff f4 	ld.w	r10,r7[-12]
80012f30:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80012f34:	10 9b       	mov	r11,r8
80012f36:	30 0c       	mov	r12,0
80012f38:	fe b0 fa 90 	rcall	80012458 <mavlink_parse_char>
80012f3c:	18 98       	mov	r8,r12
80012f3e:	58 08       	cp.w	r8,0
80012f40:	c0 30       	breq	80012f46 <mavlink_receive+0x4e>
			// dbg_print("\n");
			return 1;
80012f42:	30 18       	mov	r8,1
80012f44:	c0 e8       	rjmp	80012f60 <mavlink_receive+0x68>
}

uint8_t mavlink_receive(byte_stream_t* stream, Mavlink_Received_t* rec) {
	uint8_t byte;
	//dbg_print(" ");
	while(stream->bytes_available(stream->data) > 0) {
80012f46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012f4a:	70 48       	ld.w	r8,r8[0x10]
80012f4c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012f50:	72 59       	ld.w	r9,r9[0x14]
80012f52:	12 9c       	mov	r12,r9
80012f54:	5d 18       	icall	r8
80012f56:	18 98       	mov	r8,r12
80012f58:	58 08       	cp.w	r8,0
80012f5a:	fe 99 ff da 	brgt	80012f0e <mavlink_receive+0x16>
			return 1;
		}
		// dbg_print_num(rec->status.parse_state, 16);
		// dbg_print("\n");
	}
	return 0;
80012f5e:	30 08       	mov	r8,0
}
80012f60:	10 9c       	mov	r12,r8
80012f62:	2f dd       	sub	sp,-12
80012f64:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012f68:	80 01       	ld.sh	r1,r0[0x0]
80012f6a:	2d 86       	sub	r6,-40
80012f6c:	6d 73       	ld.w	r3,r6[0x5c]
80012f6e:	67 20       	ld.w	r0,r3[0x48]
80012f70:	63 6f       	ld.w	pc,r1[0x58]
80012f72:	6d 70       	ld.w	r0,r6[0x5c]
80012f74:	20 69       	sub	r9,6
80012f76:	64 3a       	ld.w	r10,r2[0xc]
80012f78:	00 00       	add	r0,r0
80012f7a:	00 00       	add	r0,r0
80012f7c:	73 74       	ld.w	r4,r9[0x5c]
80012f7e:	72 65       	ld.w	r5,r9[0x18]
80012f80:	61 6d       	ld.w	sp,r0[0x58]
80012f82:	20 72       	sub	r2,7
80012f84:	65 71       	ld.w	r1,r2[0x5c]
80012f86:	75 65       	ld.w	r5,r10[0x58]
80012f88:	73 74       	ld.w	r4,r9[0x5c]
80012f8a:	3a 00       	mov	r0,-96
80012f8c:	73 65       	ld.w	r5,r9[0x58]
80012f8e:	6e 64       	ld.w	r4,r7[0x18]
80012f90:	20 61       	sub	r1,6
80012f92:	6c 6c       	ld.w	r12,r6[0x18]
80012f94:	0a 00       	add	r0,r5
80012f96:	00 00       	add	r0,r0
80012f98:	20 73       	sub	r3,7
80012f9a:	74 72       	ld.w	r2,r10[0x1c]
80012f9c:	65 61       	ld.w	r1,r2[0x58]
80012f9e:	6d 3d       	ld.w	sp,r6[0x4c]
80012fa0:	00 00       	add	r0,r0
80012fa2:	00 00       	add	r0,r0
80012fa4:	20 73       	sub	r3,7
80012fa6:	74 61       	ld.w	r1,r10[0x18]
80012fa8:	72 74       	ld.w	r4,r9[0x1c]
80012faa:	5f 73       	srpl	r3
80012fac:	74 6f       	ld.w	pc,r10[0x18]
80012fae:	70 3d       	ld.w	sp,r8[0xc]
80012fb0:	00 00       	add	r0,r0
80012fb2:	00 00       	add	r0,r0
80012fb4:	20 72       	sub	r2,7
80012fb6:	61 74       	ld.w	r4,r0[0x5c]
80012fb8:	65 3d       	ld.w	sp,r2[0x4c]
	...

80012fbc <handle_mavlink_message>:

void handle_mavlink_message(Mavlink_Received_t* rec) {
80012fbc:	eb cd 40 c0 	pushm	r6-r7,lr
80012fc0:	1a 97       	mov	r7,sp
80012fc2:	20 cd       	sub	sp,48
80012fc4:	fe f6 02 34 	ld.w	r6,pc[564]
80012fc8:	1e 26       	rsub	r6,pc
80012fca:	ef 4c ff d0 	st.w	r7[-48],r12
	
	switch(rec->msg.msgid) {
80012fce:	ee f8 ff d0 	ld.w	r8,r7[-48]
80012fd2:	11 f8       	ld.ub	r8,r8[0x7]
80012fd4:	59 58       	cp.w	r8,21
80012fd6:	c0 c0       	breq	80012fee <handle_mavlink_message+0x32>
80012fd8:	e0 89 00 05 	brgt	80012fe2 <handle_mavlink_message+0x26>
80012fdc:	59 48       	cp.w	r8,20
80012fde:	c2 a0       	breq	80013032 <handle_mavlink_message+0x76>
80012fe0:	cf 98       	rjmp	800131d2 <handle_mavlink_message+0x216>
80012fe2:	59 78       	cp.w	r8,23
80012fe4:	c4 70       	breq	80013072 <handle_mavlink_message+0xb6>
80012fe6:	e0 48 00 42 	cp.w	r8,66
80012fea:	c4 d0       	breq	80013084 <handle_mavlink_message+0xc8>
80012fec:	cf 38       	rjmp	800131d2 <handle_mavlink_message+0x216>
		case MAVLINK_MSG_ID_PARAM_REQUEST_LIST: { // 21
			mavlink_param_request_list_t request;
			mavlink_msg_param_request_list_decode(&rec->msg, &request);
80012fee:	ee f8 ff d0 	ld.w	r8,r7[-48]
80012ff2:	ee c9 00 12 	sub	r9,r7,18
80012ff6:	12 9b       	mov	r11,r9
80012ff8:	10 9c       	mov	r12,r8
80012ffa:	fe b0 fd 4e 	rcall	80012a96 <mavlink_msg_param_request_list_decode>
			
			dbg_print("msg comp id:");
80012ffe:	fe cc 00 92 	sub	r12,pc,146
80013002:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(request.target_component,10);
80013006:	ef 38 ff ef 	ld.ub	r8,r7[-17]
8001300a:	30 ab       	mov	r11,10
8001300c:	10 9c       	mov	r12,r8
8001300e:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80013012:	fe cc 03 36 	sub	r12,pc,822
80013016:	f0 16 00 01 	mcall	r6[4]
			
			// Check if this message is for this system
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid) {
8001301a:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8001301e:	ec f8 00 70 	ld.w	r8,r6[112]
80013022:	11 88       	ld.ub	r8,r8[0x0]
80013024:	f0 09 18 00 	cp.b	r9,r8
80013028:	e0 81 00 da 	brne	800131dc <handle_mavlink_message+0x220>
				send_all_parameters();
8001302c:	f0 16 01 55 	mcall	r6[1364]
			}				
		}
		break;
80013030:	ce 18       	rjmp	800131f2 <handle_mavlink_message+0x236>
		case MAVLINK_MSG_ID_PARAM_REQUEST_READ: { //20
			mavlink_param_request_read_t request;
			mavlink_msg_param_request_read_decode(&rec->msg, &request);
80013032:	ee f8 ff d0 	ld.w	r8,r7[-48]
80013036:	ee c9 00 26 	sub	r9,r7,38
8001303a:	12 9b       	mov	r11,r9
8001303c:	10 9c       	mov	r12,r8
8001303e:	fe b0 fc e3 	rcall	80012a04 <mavlink_msg_param_request_read_decode>
			// Check if this message is for this system and subsystem
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {
80013042:	ef 39 ff dc 	ld.ub	r9,r7[-36]
80013046:	ec f8 00 70 	ld.w	r8,r6[112]
8001304a:	11 88       	ld.ub	r8,r8[0x0]
		break;
		case MAVLINK_MSG_ID_PARAM_REQUEST_READ: { //20
			mavlink_param_request_read_t request;
			mavlink_msg_param_request_read_decode(&rec->msg, &request);
			// Check if this message is for this system and subsystem
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
8001304c:	f0 09 18 00 	cp.b	r9,r8
80013050:	e0 81 00 c8 	brne	800131e0 <handle_mavlink_message+0x224>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {
80013054:	ef 39 ff dd 	ld.ub	r9,r7[-35]
80013058:	ec f8 00 70 	ld.w	r8,r6[112]
8001305c:	11 98       	ld.ub	r8,r8[0x1]
		break;
		case MAVLINK_MSG_ID_PARAM_REQUEST_READ: { //20
			mavlink_param_request_read_t request;
			mavlink_msg_param_request_read_decode(&rec->msg, &request);
			// Check if this message is for this system and subsystem
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
8001305e:	f0 09 18 00 	cp.b	r9,r8
80013062:	e0 81 00 c1 	brne	800131e4 <handle_mavlink_message+0x228>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {

				send_parameter(&request);
80013066:	ee c8 00 26 	sub	r8,r7,38
8001306a:	10 9c       	mov	r12,r8
8001306c:	f0 16 01 50 	mcall	r6[1344]
			}				
		}
		break;
80013070:	cc 18       	rjmp	800131f2 <handle_mavlink_message+0x236>
		case MAVLINK_MSG_ID_PARAM_SET: { //23
			suspend_downstream(100000);
80013072:	e0 7c 86 a0 	mov	r12,100000
80013076:	f0 16 00 78 	mcall	r6[480]
			receive_parameter(rec);
8001307a:	ee fc ff d0 	ld.w	r12,r7[-48]
8001307e:	f0 16 01 77 	mcall	r6[1500]
		}
		break;
80013082:	cb 88       	rjmp	800131f2 <handle_mavlink_message+0x236>

		case MAVLINK_MSG_ID_REQUEST_DATA_STREAM: { // 66
			mavlink_request_data_stream_t request;
			mavlink_msg_request_data_stream_decode(&rec->msg, &request);
80013084:	ee f8 ff d0 	ld.w	r8,r7[-48]
80013088:	ee c9 00 2c 	sub	r9,r7,44
8001308c:	12 9b       	mov	r11,r9
8001308e:	10 9c       	mov	r12,r8
80013090:	fe b0 fd 71 	rcall	80012b72 <mavlink_msg_request_data_stream_decode>
			// TODO: control target_component == compid!
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid)
80013094:	ef 39 ff d6 	ld.ub	r9,r7[-42]
80013098:	ec f8 00 70 	ld.w	r8,r6[112]
8001309c:	11 88       	ld.ub	r8,r8[0x0]

		case MAVLINK_MSG_ID_REQUEST_DATA_STREAM: { // 66
			mavlink_request_data_stream_t request;
			mavlink_msg_request_data_stream_decode(&rec->msg, &request);
			// TODO: control target_component == compid!
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
8001309e:	f0 09 18 00 	cp.b	r9,r8
800130a2:	e0 81 00 a3 	brne	800131e8 <handle_mavlink_message+0x22c>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid)
800130a6:	ef 39 ff d7 	ld.ub	r9,r7[-41]
800130aa:	ec f8 00 70 	ld.w	r8,r6[112]
800130ae:	11 98       	ld.ub	r8,r8[0x1]

		case MAVLINK_MSG_ID_REQUEST_DATA_STREAM: { // 66
			mavlink_request_data_stream_t request;
			mavlink_msg_request_data_stream_decode(&rec->msg, &request);
			// TODO: control target_component == compid!
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
800130b0:	f0 09 18 00 	cp.b	r9,r8
800130b4:	e0 81 00 9c 	brne	800131ec <handle_mavlink_message+0x230>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid)
			{
				dbg_print("stream request:");
800130b8:	fe cc 01 3c 	sub	r12,pc,316
800130bc:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(request.target_component,10);
800130c0:	ef 38 ff d7 	ld.ub	r8,r7[-41]
800130c4:	30 ab       	mov	r11,10
800130c6:	10 9c       	mov	r12,r8
800130c8:	f0 16 00 04 	mcall	r6[16]
				if (request.req_stream_id==255) {
800130cc:	ef 39 ff d8 	ld.ub	r9,r7[-40]
800130d0:	3f f8       	mov	r8,-1
800130d2:	f0 09 18 00 	cp.b	r9,r8
800130d6:	c2 a1       	brne	8001312a <handle_mavlink_message+0x16e>
					int i;
					dbg_print("send all\n");
800130d8:	fe cc 01 4c 	sub	r12,pc,332
800130dc:	f0 16 00 01 	mcall	r6[4]
					// send full list of streams
					for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
800130e0:	30 08       	mov	r8,0
800130e2:	ef 48 ff f0 	st.w	r7[-16],r8
800130e6:	c1 88       	rjmp	80013116 <handle_mavlink_message+0x15a>
						task_entry *task=get_task_by_index(&mavlink_tasks, i);
800130e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800130ec:	5c 88       	casts.h	r8
800130ee:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800130f2:	ec f8 01 28 	ld.w	r8,r6[296]
800130f6:	12 9b       	mov	r11,r9
800130f8:	10 9c       	mov	r12,r8
800130fa:	f0 16 01 b3 	mcall	r6[1740]
800130fe:	18 98       	mov	r8,r12
80013100:	ef 48 ff f4 	st.w	r7[-12],r8
						run_task_now(task);
80013104:	ee fc ff f4 	ld.w	r12,r7[-12]
80013108:	f0 16 00 ff 	mcall	r6[1020]
				dbg_print_num(request.target_component,10);
				if (request.req_stream_id==255) {
					int i;
					dbg_print("send all\n");
					// send full list of streams
					for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
8001310c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013110:	2f f8       	sub	r8,-1
80013112:	ef 48 ff f0 	st.w	r7[-16],r8
80013116:	ec f8 01 28 	ld.w	r8,r6[296]
8001311a:	11 88       	ld.ub	r8,r8[0x0]
8001311c:	10 99       	mov	r9,r8
8001311e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013122:	10 39       	cp.w	r9,r8
80013124:	fe 99 ff e2 	brgt	800130e8 <handle_mavlink_message+0x12c>
						change_task_period(task, SCHEDULER_TIMEBASE/(uint32_t)request.req_message_rate);
					}
				}
			}
		}	
		break;
80013128:	c6 58       	rjmp	800131f2 <handle_mavlink_message+0x236>
						task_entry *task=get_task_by_index(&mavlink_tasks, i);
						run_task_now(task);
					}					
				} else {
					int i;
					task_entry *task=get_task_by_id(&mavlink_tasks, request.req_stream_id);
8001312a:	ef 38 ff d8 	ld.ub	r8,r7[-40]
8001312e:	10 99       	mov	r9,r8
80013130:	ec f8 01 28 	ld.w	r8,r6[296]
80013134:	12 9b       	mov	r11,r9
80013136:	10 9c       	mov	r12,r8
80013138:	f0 16 01 b5 	mcall	r6[1748]
8001313c:	18 98       	mov	r8,r12
8001313e:	ef 48 ff fc 	st.w	r7[-4],r8
					dbg_print(" stream="); dbg_print_num(request.req_stream_id, 10);
80013142:	fe cc 01 aa 	sub	r12,pc,426
80013146:	f0 16 00 01 	mcall	r6[4]
8001314a:	ef 38 ff d8 	ld.ub	r8,r7[-40]
8001314e:	30 ab       	mov	r11,10
80013150:	10 9c       	mov	r12,r8
80013152:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" start_stop=");dbg_print_num(request.start_stop, 10);
80013156:	fe cc 01 b2 	sub	r12,pc,434
8001315a:	f0 16 00 01 	mcall	r6[4]
8001315e:	ef 38 ff d9 	ld.ub	r8,r7[-39]
80013162:	30 ab       	mov	r11,10
80013164:	10 9c       	mov	r12,r8
80013166:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" rate=");dbg_print_num(request.req_message_rate,10);
8001316a:	fe cc 01 b6 	sub	r12,pc,438
8001316e:	f0 16 00 01 	mcall	r6[4]
80013172:	ef 08 ff d4 	ld.sh	r8,r7[-44]
80013176:	5c 78       	castu.h	r8
80013178:	30 ab       	mov	r11,10
8001317a:	10 9c       	mov	r12,r8
8001317c:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
80013180:	fe cc 04 a4 	sub	r12,pc,1188
80013184:	f0 16 00 01 	mcall	r6[4]
					dbg_print("\n");
80013188:	fe cc 04 ac 	sub	r12,pc,1196
8001318c:	f0 16 00 01 	mcall	r6[4]
					if (request.start_stop) {
80013190:	ef 38 ff d9 	ld.ub	r8,r7[-39]
80013194:	58 08       	cp.w	r8,0
80013196:	c0 70       	breq	800131a4 <handle_mavlink_message+0x1e8>
						change_run_mode(task, RUN_REGULAR);
80013198:	30 2b       	mov	r11,2
8001319a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001319e:	f0 16 00 ab 	mcall	r6[684]
800131a2:	c0 68       	rjmp	800131ae <handle_mavlink_message+0x1f2>
					}else {
						change_run_mode(task, RUN_NEVER);
800131a4:	30 0b       	mov	r11,0
800131a6:	ee fc ff fc 	ld.w	r12,r7[-4]
800131aa:	f0 16 00 ab 	mcall	r6[684]
					}
					if (request.req_message_rate>0) {
800131ae:	ef 08 ff d4 	ld.sh	r8,r7[-44]
800131b2:	58 08       	cp.w	r8,0
800131b4:	c1 e0       	breq	800131f0 <handle_mavlink_message+0x234>
						change_task_period(task, SCHEDULER_TIMEBASE/(uint32_t)request.req_message_rate);
800131b6:	ef 08 ff d4 	ld.sh	r8,r7[-44]
800131ba:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800131be:	ee 78 42 40 	mov	r8,1000000
800131c2:	f0 09 0d 08 	divu	r8,r8,r9
800131c6:	10 9b       	mov	r11,r8
800131c8:	ee fc ff fc 	ld.w	r12,r7[-4]
800131cc:	f0 16 01 9c 	mcall	r6[1648]
					}
				}
			}
		}	
		break;
800131d0:	c1 18       	rjmp	800131f2 <handle_mavlink_message+0x236>
		default: {
			// handle all platform-specific messages in mavlink-actions:
			handle_specific_messages(rec);
800131d2:	ee fc ff d0 	ld.w	r12,r7[-48]
800131d6:	f0 16 01 ae 	mcall	r6[1720]
800131da:	c0 c8       	rjmp	800131f2 <handle_mavlink_message+0x236>
			// Check if this message is for this system
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid) {
				send_all_parameters();
			}				
		}
		break;
800131dc:	d7 03       	nop
800131de:	c0 a8       	rjmp	800131f2 <handle_mavlink_message+0x236>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {

				send_parameter(&request);
			}				
		}
		break;
800131e0:	d7 03       	nop
800131e2:	c0 88       	rjmp	800131f2 <handle_mavlink_message+0x236>
800131e4:	d7 03       	nop
800131e6:	c0 68       	rjmp	800131f2 <handle_mavlink_message+0x236>
						change_task_period(task, SCHEDULER_TIMEBASE/(uint32_t)request.req_message_rate);
					}
				}
			}
		}	
		break;
800131e8:	d7 03       	nop
800131ea:	c0 48       	rjmp	800131f2 <handle_mavlink_message+0x236>
800131ec:	d7 03       	nop
800131ee:	c0 28       	rjmp	800131f2 <handle_mavlink_message+0x236>
800131f0:	d7 03       	nop
		default: {
			// handle all platform-specific messages in mavlink-actions:
			handle_specific_messages(rec);
		}		
	}
800131f2:	2f 4d       	sub	sp,-48
800131f4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800131f8:	80 01       	ld.sh	r1,r0[0x0]
800131fa:	2e 4c       	sub	r12,-28

800131fc <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
800131fc:	eb cd 40 80 	pushm	r7,lr
80013200:	1a 97       	mov	r7,sp
80013202:	20 3d       	sub	sp,12
80013204:	18 98       	mov	r8,r12
80013206:	ef 4b ff f4 	st.w	r7[-12],r11
8001320a:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
8001320e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013212:	90 08       	ld.sh	r8,r8[0x0]
80013214:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80013218:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001321c:	f3 e8 20 08 	eor	r8,r9,r8
80013220:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
80013224:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013228:	a5 68       	lsl	r8,0x4
8001322a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001322e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013232:	f3 e8 20 08 	eor	r8,r9,r8
80013236:	5c 58       	castu.b	r8
80013238:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
8001323c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013240:	90 08       	ld.sh	r8,r8[0x0]
80013242:	5c 78       	castu.h	r8
80013244:	a9 88       	lsr	r8,0x8
80013246:	5c 88       	casts.h	r8
80013248:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001324c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013250:	a9 68       	lsl	r8,0x8
80013252:	5c 88       	casts.h	r8
80013254:	f3 e8 20 08 	eor	r8,r9,r8
80013258:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001325c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013260:	a3 78       	lsl	r8,0x3
80013262:	5c 88       	casts.h	r8
80013264:	f3 e8 20 08 	eor	r8,r9,r8
80013268:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001326c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013270:	a5 88       	lsr	r8,0x4
80013272:	5c 58       	castu.b	r8
80013274:	f3 e8 20 08 	eor	r8,r9,r8
80013278:	5c 88       	casts.h	r8
8001327a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001327e:	b2 08       	st.h	r9[0x0],r8
}
80013280:	2f dd       	sub	sp,-12
80013282:	e3 cd 80 80 	ldm	sp++,r7,pc

80013286 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
80013286:	eb cd 40 80 	pushm	r7,lr
8001328a:	1a 97       	mov	r7,sp
8001328c:	20 1d       	sub	sp,4
8001328e:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
80013292:	ee f9 ff fc 	ld.w	r9,r7[-4]
80013296:	3f f8       	mov	r8,-1
80013298:	b2 08       	st.h	r9[0x0],r8
}
8001329a:	2f fd       	sub	sp,-4
8001329c:	e3 cd 80 80 	ldm	sp++,r7,pc

800132a0 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
800132a0:	eb cd 40 c0 	pushm	r6-r7,lr
800132a4:	1a 97       	mov	r7,sp
800132a6:	20 3d       	sub	sp,12
800132a8:	49 76       	lddpc	r6,80013304 <crc_calculate+0x64>
800132aa:	1e 26       	rsub	r6,pc
800132ac:	ef 4c ff f8 	st.w	r7[-8],r12
800132b0:	16 98       	mov	r8,r11
800132b2:	ef 58 ff f4 	st.h	r7[-12],r8
        uint16_t crcTmp;
        crc_init(&crcTmp);
800132b6:	ee c8 00 02 	sub	r8,r7,2
800132ba:	10 9c       	mov	r12,r8
800132bc:	ce 5f       	rcall	80013286 <crc_init>
	while (length--) {
800132be:	c0 e8       	rjmp	800132da <crc_calculate+0x3a>
                crc_accumulate(*pBuffer++, &crcTmp);
800132c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800132c4:	11 88       	ld.ub	r8,r8[0x0]
800132c6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800132ca:	2f f9       	sub	r9,-1
800132cc:	ef 49 ff f8 	st.w	r7[-8],r9
800132d0:	ee c9 00 02 	sub	r9,r7,2
800132d4:	12 9b       	mov	r11,r9
800132d6:	10 9c       	mov	r12,r8
800132d8:	c9 2f       	rcall	800131fc <crc_accumulate>
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
800132da:	ef 09 ff f4 	ld.sh	r9,r7[-12]
800132de:	30 08       	mov	r8,0
800132e0:	f0 09 19 00 	cp.h	r9,r8
800132e4:	5f 18       	srne	r8
800132e6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800132ea:	ef 08 ff f4 	ld.sh	r8,r7[-12]
800132ee:	20 18       	sub	r8,1
800132f0:	ef 58 ff f4 	st.h	r7[-12],r8
800132f4:	58 09       	cp.w	r9,0
800132f6:	ce 51       	brne	800132c0 <crc_calculate+0x20>
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
800132f8:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
800132fc:	10 9c       	mov	r12,r8
800132fe:	2f dd       	sub	sp,-12
80013300:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013304:	80 01       	ld.sh	r1,r0[0x0]
80013306:	31 2e       	mov	lr,18

80013308 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
80013308:	eb cd 40 c0 	pushm	r6-r7,lr
8001330c:	1a 97       	mov	r7,sp
8001330e:	20 4d       	sub	sp,16
80013310:	49 66       	lddpc	r6,80013368 <crc_accumulate_buffer+0x60>
80013312:	1e 26       	rsub	r6,pc
80013314:	ef 4c ff f8 	st.w	r7[-8],r12
80013318:	ef 4b ff f4 	st.w	r7[-12],r11
8001331c:	14 98       	mov	r8,r10
8001331e:	ef 68 ff f0 	st.b	r7[-16],r8
	const uint8_t *p = (const uint8_t *)pBuffer;
80013322:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013326:	ef 48 ff fc 	st.w	r7[-4],r8
	while (length--) {
8001332a:	c0 d8       	rjmp	80013344 <crc_accumulate_buffer+0x3c>
                crc_accumulate(*p++, crcAccum);
8001332c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013330:	11 88       	ld.ub	r8,r8[0x0]
80013332:	ee f9 ff fc 	ld.w	r9,r7[-4]
80013336:	2f f9       	sub	r9,-1
80013338:	ef 49 ff fc 	st.w	r7[-4],r9
8001333c:	ee fb ff f8 	ld.w	r11,r7[-8]
80013340:	10 9c       	mov	r12,r8
80013342:	c5 df       	rcall	800131fc <crc_accumulate>
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
80013344:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80013348:	30 08       	mov	r8,0
8001334a:	f0 09 18 00 	cp.b	r9,r8
8001334e:	5f 18       	srne	r8
80013350:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80013354:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80013358:	20 18       	sub	r8,1
8001335a:	ef 68 ff f0 	st.b	r7[-16],r8
8001335e:	58 09       	cp.w	r9,0
80013360:	ce 61       	brne	8001332c <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
        }
}
80013362:	2f cd       	sub	sp,-16
80013364:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013368:	80 01       	ld.sh	r1,r0[0x0]
8001336a:	31 96       	mov	r6,25

8001336c <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
8001336c:	eb cd 40 c0 	pushm	r6-r7,lr
80013370:	1a 97       	mov	r7,sp
80013372:	20 1d       	sub	sp,4
80013374:	48 96       	lddpc	r6,80013398 <mavlink_get_channel_status+0x2c>
80013376:	1e 26       	rsub	r6,pc
80013378:	18 98       	mov	r8,r12
8001337a:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
8001337e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80013382:	f0 09 15 04 	lsl	r9,r8,0x4
80013386:	ec f8 08 ec 	ld.w	r8,r6[2284]
8001338a:	f2 08 00 08 	add	r8,r9,r8
}
8001338e:	10 9c       	mov	r12,r8
80013390:	2f fd       	sub	sp,-4
80013392:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013396:	00 00       	add	r0,r0
80013398:	80 01       	ld.sh	r1,r0[0x0]
8001339a:	31 fa       	mov	r10,31

8001339c <_mav_finalize_message_chan_send>:
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, 
						    uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, uint8_t length)
#endif
{
8001339c:	eb cd 40 c0 	pushm	r6-r7,lr
800133a0:	1a 97       	mov	r7,sp
800133a2:	20 9d       	sub	sp,36
800133a4:	4b d6       	lddpc	r6,80013498 <_mav_finalize_message_chan_send+0xfc>
800133a6:	1e 26       	rsub	r6,pc
800133a8:	ef 4c ff ec 	st.w	r7[-20],r12
800133ac:	ef 4a ff e4 	st.w	r7[-28],r10
800133b0:	16 9a       	mov	r10,r11
800133b2:	ef 6a ff e8 	st.b	r7[-24],r10
800133b6:	ef 69 ff e0 	st.b	r7[-32],r9
800133ba:	ef 68 ff dc 	st.b	r7[-36],r8
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
800133be:	ee f8 ff ec 	ld.w	r8,r7[-20]
800133c2:	5c 58       	castu.b	r8
800133c4:	10 9c       	mov	r12,r8
800133c6:	cd 3f       	rcall	8001336c <mavlink_get_channel_status>
800133c8:	18 98       	mov	r8,r12
800133ca:	ef 48 ff fc 	st.w	r7[-4],r8
	buf[0] = MAVLINK_STX;
800133ce:	3f e8       	mov	r8,-2
800133d0:	ef 68 ff f4 	st.b	r7[-12],r8
	buf[1] = length;
800133d4:	ef 38 ff e0 	ld.ub	r8,r7[-32]
800133d8:	ef 68 ff f5 	st.b	r7[-11],r8
	buf[2] = status->current_tx_seq;
800133dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800133e0:	f1 38 00 0a 	ld.ub	r8,r8[10]
800133e4:	ef 68 ff f6 	st.b	r7[-10],r8
	buf[3] = mavlink_system.sysid;
800133e8:	ec f8 00 70 	ld.w	r8,r6[112]
800133ec:	11 88       	ld.ub	r8,r8[0x0]
800133ee:	ef 68 ff f7 	st.b	r7[-9],r8
	buf[4] = mavlink_system.compid;
800133f2:	ec f8 00 70 	ld.w	r8,r6[112]
800133f6:	11 98       	ld.ub	r8,r8[0x1]
800133f8:	ef 68 ff f8 	st.b	r7[-8],r8
	buf[5] = msgid;
800133fc:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80013400:	ef 68 ff f9 	st.b	r7[-7],r8
	status->current_tx_seq++;
80013404:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013408:	f1 38 00 0a 	ld.ub	r8,r8[10]
8001340c:	2f f8       	sub	r8,-1
8001340e:	5c 58       	castu.b	r8
80013410:	ee f9 ff fc 	ld.w	r9,r7[-4]
80013414:	f3 68 00 0a 	st.b	r9[10],r8
	checksum = crc_calculate((uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
80013418:	ee c8 00 0c 	sub	r8,r7,12
8001341c:	2f f8       	sub	r8,-1
8001341e:	30 5b       	mov	r11,5
80013420:	10 9c       	mov	r12,r8
80013422:	c3 ff       	rcall	800132a0 <crc_calculate>
80013424:	18 98       	mov	r8,r12
80013426:	5c 88       	casts.h	r8
80013428:	ef 58 ff fa 	st.h	r7[-6],r8
	crc_accumulate_buffer(&checksum, packet, length);
8001342c:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80013430:	ee c8 00 06 	sub	r8,r7,6
80013434:	12 9a       	mov	r10,r9
80013436:	ee fb ff e4 	ld.w	r11,r7[-28]
8001343a:	10 9c       	mov	r12,r8
8001343c:	c6 6f       	rcall	80013308 <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
8001343e:	ef 38 ff dc 	ld.ub	r8,r7[-36]
80013442:	ee c9 00 06 	sub	r9,r7,6
80013446:	12 9b       	mov	r11,r9
80013448:	10 9c       	mov	r12,r8
8001344a:	cd 9e       	rcall	800131fc <crc_accumulate>
#endif
	ck[0] = (uint8_t)(checksum & 0xFF);
8001344c:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80013450:	5c 58       	castu.b	r8
80013452:	ef 68 ff f0 	st.b	r7[-16],r8
	ck[1] = (uint8_t)(checksum >> 8);
80013456:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8001345a:	5c 78       	castu.h	r8
8001345c:	a9 88       	lsr	r8,0x8
8001345e:	5c 88       	casts.h	r8
80013460:	5c 58       	castu.b	r8
80013462:	ef 68 ff f1 	st.b	r7[-15],r8

	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
80013466:	ee c8 00 0c 	sub	r8,r7,12
8001346a:	30 6a       	mov	r10,6
8001346c:	10 9b       	mov	r11,r8
8001346e:	ee fc ff ec 	ld.w	r12,r7[-20]
80013472:	c1 5c       	rcall	8001349c <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
80013474:	ef 38 ff e0 	ld.ub	r8,r7[-32]
80013478:	10 9a       	mov	r10,r8
8001347a:	ee fb ff e4 	ld.w	r11,r7[-28]
8001347e:	ee fc ff ec 	ld.w	r12,r7[-20]
80013482:	c0 dc       	rcall	8001349c <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
80013484:	ee c8 00 10 	sub	r8,r7,16
80013488:	30 2a       	mov	r10,2
8001348a:	10 9b       	mov	r11,r8
8001348c:	ee fc ff ec 	ld.w	r12,r7[-20]
80013490:	c0 6c       	rcall	8001349c <_mavlink_send_uart>
	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
}
80013492:	2f 7d       	sub	sp,-36
80013494:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013498:	80 01       	ld.sh	r1,r0[0x0]
8001349a:	32 2a       	mov	r10,34

8001349c <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
8001349c:	eb cd 40 c0 	pushm	r6-r7,lr
800134a0:	1a 97       	mov	r7,sp
800134a2:	20 4d       	sub	sp,16
800134a4:	49 46       	lddpc	r6,800134f4 <_mavlink_send_uart+0x58>
800134a6:	1e 26       	rsub	r6,pc
800134a8:	ef 4c ff f8 	st.w	r7[-8],r12
800134ac:	ef 4b ff f4 	st.w	r7[-12],r11
800134b0:	14 98       	mov	r8,r10
800134b2:	ef 58 ff f0 	st.h	r7[-16],r8
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
800134b6:	30 08       	mov	r8,0
800134b8:	ef 58 ff fe 	st.h	r7[-2],r8
800134bc:	c1 28       	rjmp	800134e0 <_mavlink_send_uart+0x44>
		comm_send_ch(chan, (uint8_t)buf[i]);
800134be:	ef 18 ff fe 	ld.uh	r8,r7[-2]
800134c2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800134c6:	f2 08 00 08 	add	r8,r9,r8
800134ca:	11 88       	ld.ub	r8,r8[0x0]
800134cc:	10 9b       	mov	r11,r8
800134ce:	ee fc ff f8 	ld.w	r12,r7[-8]
800134d2:	f0 16 00 d5 	mcall	r6[852]
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
800134d6:	ef 08 ff fe 	ld.sh	r8,r7[-2]
800134da:	2f f8       	sub	r8,-1
800134dc:	ef 58 ff fe 	st.h	r7[-2],r8
800134e0:	ef 09 ff fe 	ld.sh	r9,r7[-2]
800134e4:	ef 08 ff f0 	ld.sh	r8,r7[-16]
800134e8:	f0 09 19 00 	cp.h	r9,r8
800134ec:	ce 93       	brcs	800134be <_mavlink_send_uart+0x22>
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
800134ee:	2f cd       	sub	sp,-16
800134f0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800134f4:	80 01       	ld.sh	r1,r0[0x0]
800134f6:	33 2a       	mov	r10,50

800134f8 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
800134f8:	eb cd 40 80 	pushm	r7,lr
800134fc:	1a 97       	mov	r7,sp
800134fe:	20 2d       	sub	sp,8
80013500:	ef 4c ff fc 	st.w	r7[-4],r12
80013504:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
80013508:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001350c:	2f f8       	sub	r8,-1
8001350e:	11 88       	ld.ub	r8,r8[0x0]
80013510:	ee f9 ff fc 	ld.w	r9,r7[-4]
80013514:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
80013516:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001351a:	f0 c9 ff ff 	sub	r9,r8,-1
8001351e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013522:	11 88       	ld.ub	r8,r8[0x0]
80013524:	b2 88       	st.b	r9[0x0],r8
}
80013526:	2f ed       	sub	sp,-8
80013528:	e3 cd 80 80 	ldm	sp++,r7,pc

8001352c <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
8001352c:	eb cd 40 80 	pushm	r7,lr
80013530:	1a 97       	mov	r7,sp
80013532:	20 2d       	sub	sp,8
80013534:	ef 4c ff fc 	st.w	r7[-4],r12
80013538:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
8001353c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013540:	2f d8       	sub	r8,-3
80013542:	11 88       	ld.ub	r8,r8[0x0]
80013544:	ee f9 ff fc 	ld.w	r9,r7[-4]
80013548:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
8001354a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001354e:	f0 c9 ff ff 	sub	r9,r8,-1
80013552:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013556:	2f e8       	sub	r8,-2
80013558:	11 88       	ld.ub	r8,r8[0x0]
8001355a:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
8001355c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013560:	f0 c9 ff fe 	sub	r9,r8,-2
80013564:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013568:	2f f8       	sub	r8,-1
8001356a:	11 88       	ld.ub	r8,r8[0x0]
8001356c:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
8001356e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013572:	f0 c9 ff fd 	sub	r9,r8,-3
80013576:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001357a:	11 88       	ld.ub	r8,r8[0x0]
8001357c:	b2 88       	st.b	r9[0x0],r8
}
8001357e:	2f ed       	sub	sp,-8
80013580:	e3 cd 80 80 	ldm	sp++,r7,pc

80013584 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80013584:	eb cd 40 c0 	pushm	r6-r7,lr
80013588:	1a 97       	mov	r7,sp
8001358a:	20 3d       	sub	sp,12
8001358c:	49 06       	lddpc	r6,800135cc <mav_array_memcpy+0x48>
8001358e:	1e 26       	rsub	r6,pc
80013590:	ef 4c ff fc 	st.w	r7[-4],r12
80013594:	ef 4b ff f8 	st.w	r7[-8],r11
80013598:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8001359c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800135a0:	58 08       	cp.w	r8,0
800135a2:	c0 91       	brne	800135b4 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
800135a4:	ee fa ff f4 	ld.w	r10,r7[-12]
800135a8:	30 0b       	mov	r11,0
800135aa:	ee fc ff fc 	ld.w	r12,r7[-4]
800135ae:	f0 16 00 31 	mcall	r6[196]
800135b2:	c0 98       	rjmp	800135c4 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
800135b4:	ee fa ff f4 	ld.w	r10,r7[-12]
800135b8:	ee fb ff f8 	ld.w	r11,r7[-8]
800135bc:	ee fc ff fc 	ld.w	r12,r7[-4]
800135c0:	f0 16 00 21 	mcall	r6[132]
	}
}
800135c4:	2f dd       	sub	sp,-12
800135c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800135ca:	00 00       	add	r0,r0
800135cc:	80 01       	ld.sh	r1,r0[0x0]
800135ce:	34 12       	mov	r2,65

800135d0 <_mav_put_char_array>:

/*
 * Place a char array into a buffer
 */
static inline void _mav_put_char_array(char *buf, uint8_t wire_offset, const char *b, uint8_t array_length)
{
800135d0:	eb cd 40 c0 	pushm	r6-r7,lr
800135d4:	1a 97       	mov	r7,sp
800135d6:	20 4d       	sub	sp,16
800135d8:	48 e6       	lddpc	r6,80013610 <_mav_put_char_array+0x40>
800135da:	1e 26       	rsub	r6,pc
800135dc:	ef 4c ff fc 	st.w	r7[-4],r12
800135e0:	ef 4a ff f4 	st.w	r7[-12],r10
800135e4:	12 98       	mov	r8,r9
800135e6:	16 99       	mov	r9,r11
800135e8:	ef 69 ff f8 	st.b	r7[-8],r9
800135ec:	ef 68 ff f0 	st.b	r7[-16],r8
	mav_array_memcpy(&buf[wire_offset], b, array_length);
800135f0:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800135f4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800135f8:	ee fa ff fc 	ld.w	r10,r7[-4]
800135fc:	f4 08 00 08 	add	r8,r10,r8
80013600:	12 9a       	mov	r10,r9
80013602:	ee fb ff f4 	ld.w	r11,r7[-12]
80013606:	10 9c       	mov	r12,r8
80013608:	cb ef       	rcall	80013584 <mav_array_memcpy>

}
8001360a:	2f cd       	sub	sp,-16
8001360c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013610:	80 01       	ld.sh	r1,r0[0x0]
80013612:	34 5e       	mov	lr,69

80013614 <_MAV_RETURN_float>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
_MAV_MSG_RETURN_TYPE(int32_t,  4)
_MAV_MSG_RETURN_TYPE(uint64_t, 8)
_MAV_MSG_RETURN_TYPE(int64_t,  8)
_MAV_MSG_RETURN_TYPE(float,    4)
80013614:	eb cd 40 c0 	pushm	r6-r7,lr
80013618:	1a 97       	mov	r7,sp
8001361a:	20 3d       	sub	sp,12
8001361c:	48 d6       	lddpc	r6,80013650 <_MAV_RETURN_float+0x3c>
8001361e:	1e 26       	rsub	r6,pc
80013620:	ef 4c ff f8 	st.w	r7[-8],r12
80013624:	16 98       	mov	r8,r11
80013626:	ef 68 ff f4 	st.b	r7[-12],r8
8001362a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001362e:	2f 88       	sub	r8,-8
80013630:	10 99       	mov	r9,r8
80013632:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80013636:	10 09       	add	r9,r8
80013638:	ee c8 00 04 	sub	r8,r7,4
8001363c:	12 9b       	mov	r11,r9
8001363e:	10 9c       	mov	r12,r8
80013640:	c7 6f       	rcall	8001352c <byte_swap_4>
80013642:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013646:	10 9c       	mov	r12,r8
80013648:	2f dd       	sub	sp,-12
8001364a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001364e:	00 00       	add	r0,r0
80013650:	80 01       	ld.sh	r1,r0[0x0]
80013652:	34 a2       	mov	r2,74

80013654 <_MAV_RETURN_char_array>:
_MAV_MSG_RETURN_TYPE(double)
#endif // MAVLINK_NEED_BYTE_SWAP

static inline uint16_t _MAV_RETURN_char_array(const mavlink_message_t *msg, char *value, 
						     uint8_t array_length, uint8_t wire_offset)
{
80013654:	eb cd 40 c0 	pushm	r6-r7,lr
80013658:	1a 97       	mov	r7,sp
8001365a:	20 4d       	sub	sp,16
8001365c:	49 16       	lddpc	r6,800136a0 <_MAV_RETURN_char_array+0x4c>
8001365e:	1e 26       	rsub	r6,pc
80013660:	ef 4c ff fc 	st.w	r7[-4],r12
80013664:	ef 4b ff f8 	st.w	r7[-8],r11
80013668:	12 98       	mov	r8,r9
8001366a:	14 99       	mov	r9,r10
8001366c:	ef 69 ff f4 	st.b	r7[-12],r9
80013670:	ef 68 ff f0 	st.b	r7[-16],r8
	memcpy(value, &_MAV_PAYLOAD(msg)[wire_offset], array_length);
80013674:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80013678:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001367c:	f0 ca ff f8 	sub	r10,r8,-8
80013680:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80013684:	f4 08 00 08 	add	r8,r10,r8
80013688:	12 9a       	mov	r10,r9
8001368a:	10 9b       	mov	r11,r8
8001368c:	ee fc ff f8 	ld.w	r12,r7[-8]
80013690:	f0 16 00 21 	mcall	r6[132]
	return array_length;
80013694:	ef 38 ff f4 	ld.ub	r8,r7[-12]
}
80013698:	10 9c       	mov	r12,r8
8001369a:	2f cd       	sub	sp,-16
8001369c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800136a0:	80 01       	ld.sh	r1,r0[0x0]
800136a2:	34 e2       	mov	r2,78

800136a4 <mavlink_msg_param_value_send>:
 * @param param_index Index of this onboard parameter
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_param_value_send(mavlink_channel_t chan, const char *param_id, float param_value, uint8_t param_type, uint16_t param_count, uint16_t param_index)
{
800136a4:	eb cd 40 c0 	pushm	r6-r7,lr
800136a8:	1a 97       	mov	r7,sp
800136aa:	20 dd       	sub	sp,52
800136ac:	4a 16       	lddpc	r6,80013730 <mavlink_msg_param_value_send+0x8c>
800136ae:	1e 26       	rsub	r6,pc
800136b0:	ee ce ff f4 	sub	lr,r7,-12
800136b4:	ef 4c ff e0 	st.w	r7[-32],r12
800136b8:	ef 4b ff dc 	st.w	r7[-36],r11
800136bc:	ef 4a ff d8 	st.w	r7[-40],r10
800136c0:	12 9a       	mov	r10,r9
800136c2:	10 99       	mov	r9,r8
800136c4:	7c 08       	ld.w	r8,lr[0x0]
800136c6:	ef 6a ff d4 	st.b	r7[-44],r10
800136ca:	ef 59 ff d0 	st.h	r7[-48],r9
800136ce:	ef 58 ff cc 	st.h	r7[-52],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_PARAM_VALUE_LEN];
	_mav_put_float(buf, 0, param_value);
800136d2:	ee c9 00 28 	sub	r9,r7,40
800136d6:	ee c8 00 1c 	sub	r8,r7,28
800136da:	12 9b       	mov	r11,r9
800136dc:	10 9c       	mov	r12,r8
800136de:	c2 7f       	rcall	8001352c <byte_swap_4>
	_mav_put_uint16_t(buf, 4, param_count);
800136e0:	ee c9 00 30 	sub	r9,r7,48
800136e4:	ee c8 00 1c 	sub	r8,r7,28
800136e8:	2f c8       	sub	r8,-4
800136ea:	12 9b       	mov	r11,r9
800136ec:	10 9c       	mov	r12,r8
800136ee:	c0 5f       	rcall	800134f8 <byte_swap_2>
	_mav_put_uint16_t(buf, 6, param_index);
800136f0:	ee c9 00 34 	sub	r9,r7,52
800136f4:	ee c8 00 1c 	sub	r8,r7,28
800136f8:	2f a8       	sub	r8,-6
800136fa:	12 9b       	mov	r11,r9
800136fc:	10 9c       	mov	r12,r8
800136fe:	cf de       	rcall	800134f8 <byte_swap_2>
	_mav_put_uint8_t(buf, 24, param_type);
80013700:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80013704:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_char_array(buf, 8, param_id, 16);
80013708:	ee c8 00 1c 	sub	r8,r7,28
8001370c:	31 09       	mov	r9,16
8001370e:	ee fa ff dc 	ld.w	r10,r7[-36]
80013712:	30 8b       	mov	r11,8
80013714:	10 9c       	mov	r12,r8
80013716:	c5 df       	rcall	800135d0 <_mav_put_char_array>
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PARAM_VALUE, buf, MAVLINK_MSG_ID_PARAM_VALUE_LEN, MAVLINK_MSG_ID_PARAM_VALUE_CRC);
80013718:	ee ca 00 1c 	sub	r10,r7,28
8001371c:	e0 68 00 dc 	mov	r8,220
80013720:	31 99       	mov	r9,25
80013722:	31 6b       	mov	r11,22
80013724:	ee fc ff e0 	ld.w	r12,r7[-32]
80013728:	c3 ae       	rcall	8001339c <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PARAM_VALUE, (const char *)&packet, MAVLINK_MSG_ID_PARAM_VALUE_LEN, MAVLINK_MSG_ID_PARAM_VALUE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PARAM_VALUE, (const char *)&packet, MAVLINK_MSG_ID_PARAM_VALUE_LEN);
#endif
#endif
}
8001372a:	2f 3d       	sub	sp,-52
8001372c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013730:	80 01       	ld.sh	r1,r0[0x0]
80013732:	35 32       	mov	r2,83

80013734 <mavlink_msg_param_set_get_target_system>:
 * @brief Get field target_system from param_set message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_param_set_get_target_system(const mavlink_message_t* msg)
{
80013734:	eb cd 40 80 	pushm	r7,lr
80013738:	1a 97       	mov	r7,sp
8001373a:	20 1d       	sub	sp,4
8001373c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  4);
80013740:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013744:	2f 88       	sub	r8,-8
80013746:	2f c8       	sub	r8,-4
80013748:	11 88       	ld.ub	r8,r8[0x0]
}
8001374a:	10 9c       	mov	r12,r8
8001374c:	2f fd       	sub	sp,-4
8001374e:	e3 cd 80 80 	ldm	sp++,r7,pc

80013752 <mavlink_msg_param_set_get_target_component>:
 * @brief Get field target_component from param_set message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_param_set_get_target_component(const mavlink_message_t* msg)
{
80013752:	eb cd 40 80 	pushm	r7,lr
80013756:	1a 97       	mov	r7,sp
80013758:	20 1d       	sub	sp,4
8001375a:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  5);
8001375e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013762:	2f 88       	sub	r8,-8
80013764:	2f b8       	sub	r8,-5
80013766:	11 88       	ld.ub	r8,r8[0x0]
}
80013768:	10 9c       	mov	r12,r8
8001376a:	2f fd       	sub	sp,-4
8001376c:	e3 cd 80 80 	ldm	sp++,r7,pc

80013770 <mavlink_msg_param_set_get_param_id>:
 * @brief Get field param_id from param_set message
 *
 * @return Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
 */
static inline uint16_t mavlink_msg_param_set_get_param_id(const mavlink_message_t* msg, char *param_id)
{
80013770:	eb cd 40 c0 	pushm	r6-r7,lr
80013774:	1a 97       	mov	r7,sp
80013776:	20 2d       	sub	sp,8
80013778:	48 a6       	lddpc	r6,800137a0 <mavlink_msg_param_set_get_param_id+0x30>
8001377a:	1e 26       	rsub	r6,pc
8001377c:	ef 4c ff fc 	st.w	r7[-4],r12
80013780:	ef 4b ff f8 	st.w	r7[-8],r11
	return _MAV_RETURN_char_array(msg, param_id, 16,  6);
80013784:	30 69       	mov	r9,6
80013786:	31 0a       	mov	r10,16
80013788:	ee fb ff f8 	ld.w	r11,r7[-8]
8001378c:	ee fc ff fc 	ld.w	r12,r7[-4]
80013790:	c6 2f       	rcall	80013654 <_MAV_RETURN_char_array>
80013792:	18 98       	mov	r8,r12
80013794:	5c 88       	casts.h	r8
80013796:	5c 88       	casts.h	r8
}
80013798:	10 9c       	mov	r12,r8
8001379a:	2f ed       	sub	sp,-8
8001379c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800137a0:	80 01       	ld.sh	r1,r0[0x0]
800137a2:	35 fe       	mov	lr,95

800137a4 <mavlink_msg_param_set_get_param_value>:
 * @brief Get field param_value from param_set message
 *
 * @return Onboard parameter value
 */
static inline float mavlink_msg_param_set_get_param_value(const mavlink_message_t* msg)
{
800137a4:	eb cd 40 c0 	pushm	r6-r7,lr
800137a8:	1a 97       	mov	r7,sp
800137aa:	20 1d       	sub	sp,4
800137ac:	48 76       	lddpc	r6,800137c8 <mavlink_msg_param_set_get_param_value+0x24>
800137ae:	1e 26       	rsub	r6,pc
800137b0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  0);
800137b4:	30 0b       	mov	r11,0
800137b6:	ee fc ff fc 	ld.w	r12,r7[-4]
800137ba:	c2 df       	rcall	80013614 <_MAV_RETURN_float>
800137bc:	18 98       	mov	r8,r12
}
800137be:	10 9c       	mov	r12,r8
800137c0:	2f fd       	sub	sp,-4
800137c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800137c6:	00 00       	add	r0,r0
800137c8:	80 01       	ld.sh	r1,r0[0x0]
800137ca:	36 32       	mov	r2,99

800137cc <mavlink_msg_param_set_get_param_type>:
 * @brief Get field param_type from param_set message
 *
 * @return Onboard parameter type: see the MAV_PARAM_TYPE enum for supported data types.
 */
static inline uint8_t mavlink_msg_param_set_get_param_type(const mavlink_message_t* msg)
{
800137cc:	eb cd 40 80 	pushm	r7,lr
800137d0:	1a 97       	mov	r7,sp
800137d2:	20 1d       	sub	sp,4
800137d4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  22);
800137d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800137dc:	2f 88       	sub	r8,-8
800137de:	2e a8       	sub	r8,-22
800137e0:	11 88       	ld.ub	r8,r8[0x0]
}
800137e2:	10 9c       	mov	r12,r8
800137e4:	2f fd       	sub	sp,-4
800137e6:	e3 cd 80 80 	ldm	sp++,r7,pc

800137ea <mavlink_msg_param_set_decode>:
 *
 * @param msg The message to decode
 * @param param_set C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_set_decode(const mavlink_message_t* msg, mavlink_param_set_t* param_set)
{
800137ea:	eb cd 40 c0 	pushm	r6-r7,lr
800137ee:	1a 97       	mov	r7,sp
800137f0:	20 2d       	sub	sp,8
800137f2:	49 76       	lddpc	r6,8001384c <mavlink_msg_param_set_decode+0x62>
800137f4:	1e 26       	rsub	r6,pc
800137f6:	ef 4c ff fc 	st.w	r7[-4],r12
800137fa:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	param_set->param_value = mavlink_msg_param_set_get_param_value(msg);
800137fe:	ee fc ff fc 	ld.w	r12,r7[-4]
80013802:	cd 1f       	rcall	800137a4 <mavlink_msg_param_set_get_param_value>
80013804:	18 99       	mov	r9,r12
80013806:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001380a:	91 09       	st.w	r8[0x0],r9
	param_set->target_system = mavlink_msg_param_set_get_target_system(msg);
8001380c:	ee fc ff fc 	ld.w	r12,r7[-4]
80013810:	c9 2f       	rcall	80013734 <mavlink_msg_param_set_get_target_system>
80013812:	18 98       	mov	r8,r12
80013814:	ee f9 ff f8 	ld.w	r9,r7[-8]
80013818:	b2 c8       	st.b	r9[0x4],r8
	param_set->target_component = mavlink_msg_param_set_get_target_component(msg);
8001381a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001381e:	c9 af       	rcall	80013752 <mavlink_msg_param_set_get_target_component>
80013820:	18 98       	mov	r8,r12
80013822:	ee f9 ff f8 	ld.w	r9,r7[-8]
80013826:	b2 d8       	st.b	r9[0x5],r8
	mavlink_msg_param_set_get_param_id(msg, param_set->param_id);
80013828:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001382c:	2f a8       	sub	r8,-6
8001382e:	10 9b       	mov	r11,r8
80013830:	ee fc ff fc 	ld.w	r12,r7[-4]
80013834:	c9 ef       	rcall	80013770 <mavlink_msg_param_set_get_param_id>
	param_set->param_type = mavlink_msg_param_set_get_param_type(msg);
80013836:	ee fc ff fc 	ld.w	r12,r7[-4]
8001383a:	cc 9f       	rcall	800137cc <mavlink_msg_param_set_get_param_type>
8001383c:	18 98       	mov	r8,r12
8001383e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80013842:	f3 68 00 16 	st.b	r9[22],r8
#else
	memcpy(param_set, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PARAM_SET_LEN);
#endif
}
80013846:	2f ed       	sub	sp,-8
80013848:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001384c:	80 01       	ld.sh	r1,r0[0x0]
8001384e:	36 78       	mov	r8,103

80013850 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80013850:	eb cd 40 c0 	pushm	r6-r7,lr
80013854:	1a 97       	mov	r7,sp
80013856:	20 6d       	sub	sp,24
80013858:	49 e6       	lddpc	r6,800138d0 <interpolate+0x80>
8001385a:	1e 26       	rsub	r6,pc
8001385c:	ef 4c ff f8 	st.w	r7[-8],r12
80013860:	ef 4b ff f4 	st.w	r7[-12],r11
80013864:	ef 4a ff f0 	st.w	r7[-16],r10
80013868:	ef 49 ff ec 	st.w	r7[-20],r9
8001386c:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80013870:	ee f9 ff f4 	ld.w	r9,r7[-12]
80013874:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013878:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001387c:	c0 41       	brne	80013884 <interpolate+0x34>
	{
		return y1;
8001387e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80013882:	c2 38       	rjmp	800138c8 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80013884:	ee f9 ff e8 	ld.w	r9,r7[-24]
80013888:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001388c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80013890:	ee fa ff f8 	ld.w	r10,r7[-8]
80013894:	ee f8 ff f4 	ld.w	r8,r7[-12]
80013898:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001389c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800138a0:	ee fa ff f0 	ld.w	r10,r7[-16]
800138a4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800138a8:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800138ac:	12 9b       	mov	r11,r9
800138ae:	10 9c       	mov	r12,r8
800138b0:	f0 16 00 08 	mcall	r6[32]
800138b4:	18 98       	mov	r8,r12
800138b6:	10 99       	mov	r9,r8
800138b8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800138bc:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800138c0:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
800138c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
800138c8:	10 9c       	mov	r12,r8
800138ca:	2f ad       	sub	sp,-24
800138cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800138d0:	80 01       	ld.sh	r1,r0[0x0]
800138d2:	36 de       	mov	lr,109

800138d4 <init_onboard_parameters>:
#include "flashc.h"
#include "print_util.h"

Parameter_Set_t param_set;

void init_onboard_parameters(void) {
800138d4:	eb cd 40 c0 	pushm	r6-r7,lr
800138d8:	1a 97       	mov	r7,sp
800138da:	48 a6       	lddpc	r6,80013900 <init_onboard_parameters+0x2c>
800138dc:	1e 26       	rsub	r6,pc
	param_set.param_count = 0;
800138de:	ec f8 00 28 	ld.w	r8,r6[40]
800138e2:	30 09       	mov	r9,0
800138e4:	f1 49 0d 20 	st.w	r8[3360],r9
	param_set.enumerate=false;
800138e8:	ec f9 00 28 	ld.w	r9,r6[40]
800138ec:	30 08       	mov	r8,0
800138ee:	f3 68 0d 24 	st.b	r9[3364],r8
	param_set.transmit_parameter_index=0;
800138f2:	ec f8 00 28 	ld.w	r8,r6[40]
800138f6:	30 09       	mov	r9,0
800138f8:	f1 49 0d 28 	st.w	r8[3368],r9
	
}
800138fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013900:	80 01       	ld.sh	r1,r0[0x0]
80013902:	37 60       	mov	r0,118

80013904 <add_parameter_uint8>:

void add_parameter_uint8(uint8_t* val, const char* param_name) {
80013904:	eb cd 40 e0 	pushm	r5-r7,lr
80013908:	1a 97       	mov	r7,sp
8001390a:	20 2d       	sub	sp,8
8001390c:	4b 66       	lddpc	r6,800139e4 <add_parameter_uint8+0xe0>
8001390e:	1e 26       	rsub	r6,pc
80013910:	ef 4c ff fc 	st.w	r7[-4],r12
80013914:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80013918:	ec f8 00 28 	ld.w	r8,r6[40]
8001391c:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013920:	ee fa ff fc 	ld.w	r10,r7[-4]
80013924:	ec fb 00 28 	ld.w	r11,r6[40]
80013928:	12 98       	mov	r8,r9
8001392a:	a3 78       	lsl	r8,0x3
8001392c:	12 18       	sub	r8,r9
8001392e:	a3 68       	lsl	r8,0x2
80013930:	f6 08 00 08 	add	r8,r11,r8
80013934:	91 0a       	st.w	r8[0x0],r10
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
80013936:	ec f8 00 28 	ld.w	r8,r6[40]
8001393a:	f0 f9 0d 20 	ld.w	r9,r8[3360]
8001393e:	12 98       	mov	r8,r9
80013940:	a3 78       	lsl	r8,0x3
80013942:	12 18       	sub	r8,r9
80013944:	2f f8       	sub	r8,-1
80013946:	f0 09 15 02 	lsl	r9,r8,0x2
8001394a:	ec f8 00 28 	ld.w	r8,r6[40]
8001394e:	f2 08 00 08 	add	r8,r9,r8
80013952:	ee fb ff f8 	ld.w	r11,r7[-8]
80013956:	10 9c       	mov	r12,r8
80013958:	f0 16 00 9c 	mcall	r6[624]
	param_set.parameters[param_set.param_count].data_type= MAVLINK_TYPE_UINT8_T;
8001395c:	ec f8 00 28 	ld.w	r8,r6[40]
80013960:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013964:	ec fa 00 28 	ld.w	r10,r6[40]
80013968:	12 98       	mov	r8,r9
8001396a:	a3 78       	lsl	r8,0x3
8001396c:	12 18       	sub	r8,r9
8001396e:	a3 68       	lsl	r8,0x2
80013970:	f4 08 00 08 	add	r8,r10,r8
80013974:	2e c8       	sub	r8,-20
80013976:	30 19       	mov	r9,1
80013978:	91 09       	st.w	r8[0x0],r9
	param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
8001397a:	ec f8 00 28 	ld.w	r8,r6[40]
8001397e:	f0 f5 0d 20 	ld.w	r5,r8[3360]
80013982:	ee fc ff f8 	ld.w	r12,r7[-8]
80013986:	f0 16 00 85 	mcall	r6[532]
8001398a:	18 98       	mov	r8,r12
8001398c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80013990:	ec fa 00 28 	ld.w	r10,r6[40]
80013994:	0a 98       	mov	r8,r5
80013996:	a3 78       	lsl	r8,0x3
80013998:	0a 18       	sub	r8,r5
8001399a:	a3 68       	lsl	r8,0x2
8001399c:	f4 08 00 08 	add	r8,r10,r8
800139a0:	f0 ca ff e8 	sub	r10,r8,-24
800139a4:	12 98       	mov	r8,r9
800139a6:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
800139a8:	ec f8 00 28 	ld.w	r8,r6[40]
800139ac:	f0 f9 0d 20 	ld.w	r9,r8[3360]
800139b0:	ec fa 00 28 	ld.w	r10,r6[40]
800139b4:	12 98       	mov	r8,r9
800139b6:	a3 78       	lsl	r8,0x3
800139b8:	12 18       	sub	r8,r9
800139ba:	a3 68       	lsl	r8,0x2
800139bc:	f4 08 00 08 	add	r8,r10,r8
800139c0:	f0 c9 ff e8 	sub	r9,r8,-24
800139c4:	30 18       	mov	r8,1
800139c6:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
800139c8:	ec f8 00 28 	ld.w	r8,r6[40]
800139cc:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800139d0:	f0 c9 ff ff 	sub	r9,r8,-1
800139d4:	ec f8 00 28 	ld.w	r8,r6[40]
800139d8:	f1 49 0d 20 	st.w	r8[3360],r9
}
800139dc:	2f ed       	sub	sp,-8
800139de:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800139e2:	00 00       	add	r0,r0
800139e4:	80 01       	ld.sh	r1,r0[0x0]
800139e6:	37 92       	mov	r2,121

800139e8 <add_parameter_uint32>:

void add_parameter_uint32(uint32_t* val, const char* param_name) {
800139e8:	eb cd 40 e0 	pushm	r5-r7,lr
800139ec:	1a 97       	mov	r7,sp
800139ee:	20 2d       	sub	sp,8
800139f0:	4b 66       	lddpc	r6,80013ac8 <add_parameter_uint32+0xe0>
800139f2:	1e 26       	rsub	r6,pc
800139f4:	ef 4c ff fc 	st.w	r7[-4],r12
800139f8:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
800139fc:	ec f8 00 28 	ld.w	r8,r6[40]
80013a00:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013a04:	ee fa ff fc 	ld.w	r10,r7[-4]
80013a08:	ec fb 00 28 	ld.w	r11,r6[40]
80013a0c:	12 98       	mov	r8,r9
80013a0e:	a3 78       	lsl	r8,0x3
80013a10:	12 18       	sub	r8,r9
80013a12:	a3 68       	lsl	r8,0x2
80013a14:	f6 08 00 08 	add	r8,r11,r8
80013a18:	91 0a       	st.w	r8[0x0],r10
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
80013a1a:	ec f8 00 28 	ld.w	r8,r6[40]
80013a1e:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013a22:	12 98       	mov	r8,r9
80013a24:	a3 78       	lsl	r8,0x3
80013a26:	12 18       	sub	r8,r9
80013a28:	2f f8       	sub	r8,-1
80013a2a:	f0 09 15 02 	lsl	r9,r8,0x2
80013a2e:	ec f8 00 28 	ld.w	r8,r6[40]
80013a32:	f2 08 00 08 	add	r8,r9,r8
80013a36:	ee fb ff f8 	ld.w	r11,r7[-8]
80013a3a:	10 9c       	mov	r12,r8
80013a3c:	f0 16 00 9c 	mcall	r6[624]
	param_set.parameters[param_set.param_count].data_type= MAVLINK_TYPE_UINT32_T;
80013a40:	ec f8 00 28 	ld.w	r8,r6[40]
80013a44:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013a48:	ec fa 00 28 	ld.w	r10,r6[40]
80013a4c:	12 98       	mov	r8,r9
80013a4e:	a3 78       	lsl	r8,0x3
80013a50:	12 18       	sub	r8,r9
80013a52:	a3 68       	lsl	r8,0x2
80013a54:	f4 08 00 08 	add	r8,r10,r8
80013a58:	2e c8       	sub	r8,-20
80013a5a:	30 59       	mov	r9,5
80013a5c:	91 09       	st.w	r8[0x0],r9
    param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
80013a5e:	ec f8 00 28 	ld.w	r8,r6[40]
80013a62:	f0 f5 0d 20 	ld.w	r5,r8[3360]
80013a66:	ee fc ff f8 	ld.w	r12,r7[-8]
80013a6a:	f0 16 00 85 	mcall	r6[532]
80013a6e:	18 98       	mov	r8,r12
80013a70:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80013a74:	ec fa 00 28 	ld.w	r10,r6[40]
80013a78:	0a 98       	mov	r8,r5
80013a7a:	a3 78       	lsl	r8,0x3
80013a7c:	0a 18       	sub	r8,r5
80013a7e:	a3 68       	lsl	r8,0x2
80013a80:	f4 08 00 08 	add	r8,r10,r8
80013a84:	f0 ca ff e8 	sub	r10,r8,-24
80013a88:	12 98       	mov	r8,r9
80013a8a:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
80013a8c:	ec f8 00 28 	ld.w	r8,r6[40]
80013a90:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013a94:	ec fa 00 28 	ld.w	r10,r6[40]
80013a98:	12 98       	mov	r8,r9
80013a9a:	a3 78       	lsl	r8,0x3
80013a9c:	12 18       	sub	r8,r9
80013a9e:	a3 68       	lsl	r8,0x2
80013aa0:	f4 08 00 08 	add	r8,r10,r8
80013aa4:	f0 c9 ff e8 	sub	r9,r8,-24
80013aa8:	30 18       	mov	r8,1
80013aaa:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
80013aac:	ec f8 00 28 	ld.w	r8,r6[40]
80013ab0:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013ab4:	f0 c9 ff ff 	sub	r9,r8,-1
80013ab8:	ec f8 00 28 	ld.w	r8,r6[40]
80013abc:	f1 49 0d 20 	st.w	r8[3360],r9
}
80013ac0:	2f ed       	sub	sp,-8
80013ac2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013ac6:	00 00       	add	r0,r0
80013ac8:	80 01       	ld.sh	r1,r0[0x0]
80013aca:	38 76       	mov	r6,-121

80013acc <add_parameter_int32>:

void add_parameter_int32(int32_t* val, const char* param_name) {
80013acc:	eb cd 40 e0 	pushm	r5-r7,lr
80013ad0:	1a 97       	mov	r7,sp
80013ad2:	20 2d       	sub	sp,8
80013ad4:	4b 66       	lddpc	r6,80013bac <add_parameter_int32+0xe0>
80013ad6:	1e 26       	rsub	r6,pc
80013ad8:	ef 4c ff fc 	st.w	r7[-4],r12
80013adc:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80013ae0:	ec f8 00 28 	ld.w	r8,r6[40]
80013ae4:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013ae8:	ee fa ff fc 	ld.w	r10,r7[-4]
80013aec:	ec fb 00 28 	ld.w	r11,r6[40]
80013af0:	12 98       	mov	r8,r9
80013af2:	a3 78       	lsl	r8,0x3
80013af4:	12 18       	sub	r8,r9
80013af6:	a3 68       	lsl	r8,0x2
80013af8:	f6 08 00 08 	add	r8,r11,r8
80013afc:	91 0a       	st.w	r8[0x0],r10
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
80013afe:	ec f8 00 28 	ld.w	r8,r6[40]
80013b02:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013b06:	12 98       	mov	r8,r9
80013b08:	a3 78       	lsl	r8,0x3
80013b0a:	12 18       	sub	r8,r9
80013b0c:	2f f8       	sub	r8,-1
80013b0e:	f0 09 15 02 	lsl	r9,r8,0x2
80013b12:	ec f8 00 28 	ld.w	r8,r6[40]
80013b16:	f2 08 00 08 	add	r8,r9,r8
80013b1a:	ee fb ff f8 	ld.w	r11,r7[-8]
80013b1e:	10 9c       	mov	r12,r8
80013b20:	f0 16 00 9c 	mcall	r6[624]
	param_set.parameters[param_set.param_count].data_type = MAVLINK_TYPE_INT32_T;
80013b24:	ec f8 00 28 	ld.w	r8,r6[40]
80013b28:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013b2c:	ec fa 00 28 	ld.w	r10,r6[40]
80013b30:	12 98       	mov	r8,r9
80013b32:	a3 78       	lsl	r8,0x3
80013b34:	12 18       	sub	r8,r9
80013b36:	a3 68       	lsl	r8,0x2
80013b38:	f4 08 00 08 	add	r8,r10,r8
80013b3c:	2e c8       	sub	r8,-20
80013b3e:	30 69       	mov	r9,6
80013b40:	91 09       	st.w	r8[0x0],r9
	param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
80013b42:	ec f8 00 28 	ld.w	r8,r6[40]
80013b46:	f0 f5 0d 20 	ld.w	r5,r8[3360]
80013b4a:	ee fc ff f8 	ld.w	r12,r7[-8]
80013b4e:	f0 16 00 85 	mcall	r6[532]
80013b52:	18 98       	mov	r8,r12
80013b54:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80013b58:	ec fa 00 28 	ld.w	r10,r6[40]
80013b5c:	0a 98       	mov	r8,r5
80013b5e:	a3 78       	lsl	r8,0x3
80013b60:	0a 18       	sub	r8,r5
80013b62:	a3 68       	lsl	r8,0x2
80013b64:	f4 08 00 08 	add	r8,r10,r8
80013b68:	f0 ca ff e8 	sub	r10,r8,-24
80013b6c:	12 98       	mov	r8,r9
80013b6e:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
80013b70:	ec f8 00 28 	ld.w	r8,r6[40]
80013b74:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013b78:	ec fa 00 28 	ld.w	r10,r6[40]
80013b7c:	12 98       	mov	r8,r9
80013b7e:	a3 78       	lsl	r8,0x3
80013b80:	12 18       	sub	r8,r9
80013b82:	a3 68       	lsl	r8,0x2
80013b84:	f4 08 00 08 	add	r8,r10,r8
80013b88:	f0 c9 ff e8 	sub	r9,r8,-24
80013b8c:	30 18       	mov	r8,1
80013b8e:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
80013b90:	ec f8 00 28 	ld.w	r8,r6[40]
80013b94:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013b98:	f0 c9 ff ff 	sub	r9,r8,-1
80013b9c:	ec f8 00 28 	ld.w	r8,r6[40]
80013ba0:	f1 49 0d 20 	st.w	r8[3360],r9
}
80013ba4:	2f ed       	sub	sp,-8
80013ba6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013baa:	00 00       	add	r0,r0
80013bac:	80 01       	ld.sh	r1,r0[0x0]
80013bae:	39 5a       	mov	r10,-107

80013bb0 <add_parameter_float>:

void add_parameter_float(float* val, const char* param_name) {
80013bb0:	eb cd 40 e0 	pushm	r5-r7,lr
80013bb4:	1a 97       	mov	r7,sp
80013bb6:	20 2d       	sub	sp,8
80013bb8:	4b 66       	lddpc	r6,80013c90 <add_parameter_float+0xe0>
80013bba:	1e 26       	rsub	r6,pc
80013bbc:	ef 4c ff fc 	st.w	r7[-4],r12
80013bc0:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80013bc4:	ec f8 00 28 	ld.w	r8,r6[40]
80013bc8:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013bcc:	ec fa 00 28 	ld.w	r10,r6[40]
80013bd0:	12 98       	mov	r8,r9
80013bd2:	a3 78       	lsl	r8,0x3
80013bd4:	12 18       	sub	r8,r9
80013bd6:	a3 68       	lsl	r8,0x2
80013bd8:	f4 08 00 08 	add	r8,r10,r8
80013bdc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80013be0:	91 09       	st.w	r8[0x0],r9
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
80013be2:	ec f8 00 28 	ld.w	r8,r6[40]
80013be6:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013bea:	12 98       	mov	r8,r9
80013bec:	a3 78       	lsl	r8,0x3
80013bee:	12 18       	sub	r8,r9
80013bf0:	2f f8       	sub	r8,-1
80013bf2:	f0 09 15 02 	lsl	r9,r8,0x2
80013bf6:	ec f8 00 28 	ld.w	r8,r6[40]
80013bfa:	f2 08 00 08 	add	r8,r9,r8
80013bfe:	ee fb ff f8 	ld.w	r11,r7[-8]
80013c02:	10 9c       	mov	r12,r8
80013c04:	f0 16 00 9c 	mcall	r6[624]
	param_set.parameters[param_set.param_count].data_type = MAVLINK_TYPE_FLOAT;
80013c08:	ec f8 00 28 	ld.w	r8,r6[40]
80013c0c:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013c10:	ec fa 00 28 	ld.w	r10,r6[40]
80013c14:	12 98       	mov	r8,r9
80013c16:	a3 78       	lsl	r8,0x3
80013c18:	12 18       	sub	r8,r9
80013c1a:	a3 68       	lsl	r8,0x2
80013c1c:	f4 08 00 08 	add	r8,r10,r8
80013c20:	2e c8       	sub	r8,-20
80013c22:	30 99       	mov	r9,9
80013c24:	91 09       	st.w	r8[0x0],r9
	param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
80013c26:	ec f8 00 28 	ld.w	r8,r6[40]
80013c2a:	f0 f5 0d 20 	ld.w	r5,r8[3360]
80013c2e:	ee fc ff f8 	ld.w	r12,r7[-8]
80013c32:	f0 16 00 85 	mcall	r6[532]
80013c36:	18 98       	mov	r8,r12
80013c38:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80013c3c:	ec fa 00 28 	ld.w	r10,r6[40]
80013c40:	0a 98       	mov	r8,r5
80013c42:	a3 78       	lsl	r8,0x3
80013c44:	0a 18       	sub	r8,r5
80013c46:	a3 68       	lsl	r8,0x2
80013c48:	f4 08 00 08 	add	r8,r10,r8
80013c4c:	f0 ca ff e8 	sub	r10,r8,-24
80013c50:	12 98       	mov	r8,r9
80013c52:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
80013c54:	ec f8 00 28 	ld.w	r8,r6[40]
80013c58:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013c5c:	ec fa 00 28 	ld.w	r10,r6[40]
80013c60:	12 98       	mov	r8,r9
80013c62:	a3 78       	lsl	r8,0x3
80013c64:	12 18       	sub	r8,r9
80013c66:	a3 68       	lsl	r8,0x2
80013c68:	f4 08 00 08 	add	r8,r10,r8
80013c6c:	f0 c9 ff e8 	sub	r9,r8,-24
80013c70:	30 18       	mov	r8,1
80013c72:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
80013c74:	ec f8 00 28 	ld.w	r8,r6[40]
80013c78:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013c7c:	f0 c9 ff ff 	sub	r9,r8,-1
80013c80:	ec f8 00 28 	ld.w	r8,r6[40]
80013c84:	f1 49 0d 20 	st.w	r8[3360],r9
}
80013c88:	2f ed       	sub	sp,-8
80013c8a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013c8e:	00 00       	add	r0,r0
80013c90:	80 01       	ld.sh	r1,r0[0x0]
80013c92:	3a 3e       	mov	lr,-93

80013c94 <send_all_parameters>:

void send_all_parameters() {
80013c94:	eb cd 40 c0 	pushm	r6-r7,lr
80013c98:	1a 97       	mov	r7,sp
80013c9a:	20 1d       	sub	sp,4
80013c9c:	49 26       	lddpc	r6,80013ce4 <send_all_parameters+0x50>
80013c9e:	1e 26       	rsub	r6,pc
	// schedule all parameters for transmission
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013ca0:	30 08       	mov	r8,0
80013ca2:	ef 68 ff ff 	st.b	r7[-1],r8
80013ca6:	c1 48       	rjmp	80013cce <send_all_parameters+0x3a>
		param_set.parameters[i].schedule_for_transmission=true;
80013ca8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013cac:	ec fa 00 28 	ld.w	r10,r6[40]
80013cb0:	12 98       	mov	r8,r9
80013cb2:	a3 78       	lsl	r8,0x3
80013cb4:	12 18       	sub	r8,r9
80013cb6:	a3 68       	lsl	r8,0x2
80013cb8:	f4 08 00 08 	add	r8,r10,r8
80013cbc:	f0 c9 ff e8 	sub	r9,r8,-24
80013cc0:	30 18       	mov	r8,1
80013cc2:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
}

void send_all_parameters() {
	// schedule all parameters for transmission
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013cc4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013cc8:	2f f8       	sub	r8,-1
80013cca:	ef 68 ff ff 	st.b	r7[-1],r8
80013cce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013cd2:	ec f8 00 28 	ld.w	r8,r6[40]
80013cd6:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013cda:	10 39       	cp.w	r9,r8
80013cdc:	ce 65       	brlt	80013ca8 <send_all_parameters+0x14>
		param_set.parameters[i].schedule_for_transmission=true;
	}		
}
80013cde:	2f fd       	sub	sp,-4
80013ce0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013ce4:	80 01       	ld.sh	r1,r0[0x0]
80013ce6:	3b 22       	mov	r2,-78

80013ce8 <send_all_parameters_now>:

void send_all_parameters_now() {
80013ce8:	eb cd 40 e0 	pushm	r5-r7,lr
80013cec:	1a 97       	mov	r7,sp
80013cee:	20 1d       	sub	sp,4
80013cf0:	4a d6       	lddpc	r6,80013da4 <send_all_parameters_now+0xbc>
80013cf2:	1e 26       	rsub	r6,pc
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013cf4:	30 08       	mov	r8,0
80013cf6:	ef 68 ff ff 	st.b	r7[-1],r8
80013cfa:	c4 a8       	rjmp	80013d8e <send_all_parameters_now+0xa6>
		mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013cfc:	ef 35 ff ff 	ld.ub	r5,r7[-1]
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
80013d00:	ec f8 00 28 	ld.w	r8,r6[40]
80013d04:	f0 f8 0d 20 	ld.w	r8,r8[3360]
	}		
}

void send_all_parameters_now() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013d08:	5c 88       	casts.h	r8
80013d0a:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
80013d0e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013d12:	ec fa 00 28 	ld.w	r10,r6[40]
80013d16:	12 98       	mov	r8,r9
80013d18:	a3 78       	lsl	r8,0x3
80013d1a:	12 18       	sub	r8,r9
80013d1c:	a3 68       	lsl	r8,0x2
80013d1e:	f4 08 00 08 	add	r8,r10,r8
80013d22:	2e c8       	sub	r8,-20
80013d24:	70 08       	ld.w	r8,r8[0x0]
	}		
}

void send_all_parameters_now() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013d26:	5c 58       	castu.b	r8
80013d28:	10 9c       	mov	r12,r8
80013d2a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013d2e:	ec fa 00 28 	ld.w	r10,r6[40]
80013d32:	12 98       	mov	r8,r9
80013d34:	a3 78       	lsl	r8,0x3
80013d36:	12 18       	sub	r8,r9
80013d38:	a3 68       	lsl	r8,0x2
80013d3a:	f4 08 00 08 	add	r8,r10,r8
80013d3e:	70 08       	ld.w	r8,r8[0x0]
80013d40:	70 0a       	ld.w	r10,r8[0x0]
80013d42:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013d46:	12 98       	mov	r8,r9
80013d48:	a3 78       	lsl	r8,0x3
80013d4a:	12 18       	sub	r8,r9
80013d4c:	2f f8       	sub	r8,-1
80013d4e:	f0 09 15 02 	lsl	r9,r8,0x2
80013d52:	ec f8 00 28 	ld.w	r8,r6[40]
80013d56:	f2 08 00 0b 	add	r11,r9,r8
80013d5a:	1a d5       	st.w	--sp,r5
80013d5c:	1c 98       	mov	r8,lr
80013d5e:	18 99       	mov	r9,r12
80013d60:	30 0c       	mov	r12,0
80013d62:	fe b0 fc a1 	rcall	800136a4 <mavlink_msg_param_value_send>
80013d66:	2f fd       	sub	sp,-4
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
										i);
		param_set.parameters[i].schedule_for_transmission=false;
80013d68:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013d6c:	ec fa 00 28 	ld.w	r10,r6[40]
80013d70:	12 98       	mov	r8,r9
80013d72:	a3 78       	lsl	r8,0x3
80013d74:	12 18       	sub	r8,r9
80013d76:	a3 68       	lsl	r8,0x2
80013d78:	f4 08 00 08 	add	r8,r10,r8
80013d7c:	f0 c9 ff e8 	sub	r9,r8,-24
80013d80:	30 08       	mov	r8,0
80013d82:	b2 a8       	st.b	r9[0x2],r8
		param_set.parameters[i].schedule_for_transmission=true;
	}		
}

void send_all_parameters_now() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013d84:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013d88:	2f f8       	sub	r8,-1
80013d8a:	ef 68 ff ff 	st.b	r7[-1],r8
80013d8e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013d92:	ec f8 00 28 	ld.w	r8,r6[40]
80013d96:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013d9a:	10 39       	cp.w	r9,r8
80013d9c:	cb 05       	brlt	80013cfc <send_all_parameters_now+0x14>
										i);
		param_set.parameters[i].schedule_for_transmission=false;

	}

}
80013d9e:	2f fd       	sub	sp,-4
80013da0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013da4:	80 01       	ld.sh	r1,r0[0x0]
80013da6:	3b 76       	mov	r6,-73

80013da8 <send_scheduled_parameters>:


void send_scheduled_parameters() {
80013da8:	eb cd 40 e0 	pushm	r5-r7,lr
80013dac:	1a 97       	mov	r7,sp
80013dae:	20 1d       	sub	sp,4
80013db0:	4b 56       	lddpc	r6,80013e84 <send_scheduled_parameters+0xdc>
80013db2:	1e 26       	rsub	r6,pc
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013db4:	30 08       	mov	r8,0
80013db6:	ef 68 ff ff 	st.b	r7[-1],r8
80013dba:	c5 98       	rjmp	80013e6c <send_scheduled_parameters+0xc4>
		if (param_set.parameters[i].schedule_for_transmission) {
80013dbc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013dc0:	ec fa 00 28 	ld.w	r10,r6[40]
80013dc4:	12 98       	mov	r8,r9
80013dc6:	a3 78       	lsl	r8,0x3
80013dc8:	12 18       	sub	r8,r9
80013dca:	a3 68       	lsl	r8,0x2
80013dcc:	f4 08 00 08 	add	r8,r10,r8
80013dd0:	2e 88       	sub	r8,-24
80013dd2:	11 a8       	ld.ub	r8,r8[0x2]
80013dd4:	58 08       	cp.w	r8,0
80013dd6:	c4 60       	breq	80013e62 <send_scheduled_parameters+0xba>
			mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013dd8:	ef 35 ff ff 	ld.ub	r5,r7[-1]
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
80013ddc:	ec f8 00 28 	ld.w	r8,r6[40]
80013de0:	f0 f8 0d 20 	ld.w	r8,r8[3360]


void send_scheduled_parameters() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		if (param_set.parameters[i].schedule_for_transmission) {
			mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013de4:	5c 88       	casts.h	r8
80013de6:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
80013dea:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013dee:	ec fa 00 28 	ld.w	r10,r6[40]
80013df2:	12 98       	mov	r8,r9
80013df4:	a3 78       	lsl	r8,0x3
80013df6:	12 18       	sub	r8,r9
80013df8:	a3 68       	lsl	r8,0x2
80013dfa:	f4 08 00 08 	add	r8,r10,r8
80013dfe:	2e c8       	sub	r8,-20
80013e00:	70 08       	ld.w	r8,r8[0x0]


void send_scheduled_parameters() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		if (param_set.parameters[i].schedule_for_transmission) {
			mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013e02:	5c 58       	castu.b	r8
80013e04:	10 9c       	mov	r12,r8
80013e06:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013e0a:	ec fa 00 28 	ld.w	r10,r6[40]
80013e0e:	12 98       	mov	r8,r9
80013e10:	a3 78       	lsl	r8,0x3
80013e12:	12 18       	sub	r8,r9
80013e14:	a3 68       	lsl	r8,0x2
80013e16:	f4 08 00 08 	add	r8,r10,r8
80013e1a:	70 08       	ld.w	r8,r8[0x0]
80013e1c:	70 0a       	ld.w	r10,r8[0x0]
80013e1e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013e22:	12 98       	mov	r8,r9
80013e24:	a3 78       	lsl	r8,0x3
80013e26:	12 18       	sub	r8,r9
80013e28:	2f f8       	sub	r8,-1
80013e2a:	f0 09 15 02 	lsl	r9,r8,0x2
80013e2e:	ec f8 00 28 	ld.w	r8,r6[40]
80013e32:	f2 08 00 0b 	add	r11,r9,r8
80013e36:	1a d5       	st.w	--sp,r5
80013e38:	1c 98       	mov	r8,lr
80013e3a:	18 99       	mov	r9,r12
80013e3c:	30 0c       	mov	r12,0
80013e3e:	fe b0 fc 33 	rcall	800136a4 <mavlink_msg_param_value_send>
80013e42:	2f fd       	sub	sp,-4
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
										i);
			param_set.parameters[i].schedule_for_transmission=false;
80013e44:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013e48:	ec fa 00 28 	ld.w	r10,r6[40]
80013e4c:	12 98       	mov	r8,r9
80013e4e:	a3 78       	lsl	r8,0x3
80013e50:	12 18       	sub	r8,r9
80013e52:	a3 68       	lsl	r8,0x2
80013e54:	f4 08 00 08 	add	r8,r10,r8
80013e58:	f0 c9 ff e8 	sub	r9,r8,-24
80013e5c:	30 08       	mov	r8,0
80013e5e:	b2 a8       	st.b	r9[0x2],r8
			return;
80013e60:	c0 e8       	rjmp	80013e7c <send_scheduled_parameters+0xd4>

}


void send_scheduled_parameters() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013e62:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013e66:	2f f8       	sub	r8,-1
80013e68:	ef 68 ff ff 	st.b	r7[-1],r8
80013e6c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013e70:	ec f8 00 28 	ld.w	r8,r6[40]
80013e74:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013e78:	10 39       	cp.w	r9,r8
80013e7a:	ca 15       	brlt	80013dbc <send_scheduled_parameters+0x14>
			param_set.parameters[i].schedule_for_transmission=false;
			return;
		}			

	}
}
80013e7c:	2f fd       	sub	sp,-4
80013e7e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013e82:	00 00       	add	r0,r0
80013e84:	80 01       	ld.sh	r1,r0[0x0]
80013e86:	3c 36       	mov	r6,-61

80013e88 <send_parameter>:


void send_parameter(mavlink_param_request_read_t* request) {
80013e88:	eb cd 40 c0 	pushm	r6-r7,lr
80013e8c:	1a 97       	mov	r7,sp
80013e8e:	20 4d       	sub	sp,16
80013e90:	4d 26       	lddpc	r6,80013fd8 <send_parameter+0x150>
80013e92:	1e 26       	rsub	r6,pc
80013e94:	ef 4c ff f0 	st.w	r7[-16],r12
	if(request->param_index!=-1) {
80013e98:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013e9c:	90 09       	ld.sh	r9,r8[0x0]
80013e9e:	3f f8       	mov	r8,-1
80013ea0:	f0 09 19 00 	cp.h	r9,r8
80013ea4:	c1 d0       	breq	80013ede <send_parameter+0x56>
									(int8_t*)param_set.parameters[request->param_index].param_name,
									*param_set.parameters[request->param_index].param,
									param_set.parameters[request->param_index].data_type,
									param_set.param_count,
									request->param_index);*/
		if (request->param_index>param_set.param_count) return;
80013ea6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013eaa:	90 08       	ld.sh	r8,r8[0x0]
80013eac:	10 99       	mov	r9,r8
80013eae:	ec f8 00 28 	ld.w	r8,r6[40]
80013eb2:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013eb6:	10 39       	cp.w	r9,r8
80013eb8:	e0 89 00 8b 	brgt	80013fce <send_parameter+0x146>
		param_set.parameters[request->param_index].schedule_for_transmission=true;
80013ebc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013ec0:	90 08       	ld.sh	r8,r8[0x0]
80013ec2:	10 99       	mov	r9,r8
80013ec4:	ec fa 00 28 	ld.w	r10,r6[40]
80013ec8:	12 98       	mov	r8,r9
80013eca:	a3 78       	lsl	r8,0x3
80013ecc:	12 18       	sub	r8,r9
80013ece:	a3 68       	lsl	r8,0x2
80013ed0:	f4 08 00 08 	add	r8,r10,r8
80013ed4:	f0 c9 ff e8 	sub	r9,r8,-24
80013ed8:	30 18       	mov	r8,1
80013eda:	b2 a8       	st.b	r9[0x2],r8
80013edc:	c7 a8       	rjmp	80013fd0 <send_parameter+0x148>

	}
	else {
		char* key = (char*) request->param_id;		
80013ede:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013ee2:	2f c8       	sub	r8,-4
80013ee4:	ef 48 ff f4 	st.w	r7[-12],r8
		for (uint16_t i = 0; i < param_set.param_count; i++) {
80013ee8:	30 08       	mov	r8,0
80013eea:	ef 58 ff fa 	st.h	r7[-6],r8
80013eee:	c6 78       	rjmp	80013fbc <send_parameter+0x134>
			bool match = true;
80013ef0:	30 18       	mov	r8,1
80013ef2:	ef 68 ff fd 	st.b	r7[-3],r8
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
80013ef6:	30 08       	mov	r8,0
80013ef8:	ef 58 ff fe 	st.h	r7[-2],r8
80013efc:	c3 38       	rjmp	80013f62 <send_parameter+0xda>
				// Compare
				if ((char)param_set.parameters[i].param_name[j] != (char)key[j]) {
80013efe:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013f02:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80013f06:	ec fb 00 28 	ld.w	r11,r6[40]
80013f0a:	12 98       	mov	r8,r9
80013f0c:	a3 78       	lsl	r8,0x3
80013f0e:	12 18       	sub	r8,r9
80013f10:	a3 68       	lsl	r8,0x2
80013f12:	f6 08 00 08 	add	r8,r11,r8
80013f16:	14 08       	add	r8,r10
80013f18:	2f c8       	sub	r8,-4
80013f1a:	11 89       	ld.ub	r9,r8[0x0]
80013f1c:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80013f20:	ee fa ff f4 	ld.w	r10,r7[-12]
80013f24:	f4 08 00 08 	add	r8,r10,r8
80013f28:	11 88       	ld.ub	r8,r8[0x0]
80013f2a:	f0 09 18 00 	cp.b	r9,r8
80013f2e:	c0 40       	breq	80013f36 <send_parameter+0xae>
					match = false;
80013f30:	30 08       	mov	r8,0
80013f32:	ef 68 ff fd 	st.b	r7[-3],r8
				}
 
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
80013f36:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013f3a:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80013f3e:	ec fb 00 28 	ld.w	r11,r6[40]
80013f42:	12 98       	mov	r8,r9
80013f44:	a3 78       	lsl	r8,0x3
80013f46:	12 18       	sub	r8,r9
80013f48:	a3 68       	lsl	r8,0x2
80013f4a:	f6 08 00 08 	add	r8,r11,r8
80013f4e:	14 08       	add	r8,r10
80013f50:	2f c8       	sub	r8,-4
80013f52:	11 88       	ld.ub	r8,r8[0x0]
80013f54:	58 08       	cp.w	r8,0
80013f56:	c1 80       	breq	80013f86 <send_parameter+0xfe>
	}
	else {
		char* key = (char*) request->param_id;		
		for (uint16_t i = 0; i < param_set.param_count; i++) {
			bool match = true;
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
80013f58:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80013f5c:	2f f8       	sub	r8,-1
80013f5e:	ef 58 ff fe 	st.h	r7[-2],r8
80013f62:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013f66:	ec fa 00 28 	ld.w	r10,r6[40]
80013f6a:	12 98       	mov	r8,r9
80013f6c:	a3 78       	lsl	r8,0x3
80013f6e:	12 18       	sub	r8,r9
80013f70:	a3 68       	lsl	r8,0x2
80013f72:	f4 08 00 08 	add	r8,r10,r8
80013f76:	2e 88       	sub	r8,-24
80013f78:	11 88       	ld.ub	r8,r8[0x0]
80013f7a:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80013f7e:	f0 09 19 00 	cp.h	r9,r8
80013f82:	cb e3       	brcs	80013efe <send_parameter+0x76>
80013f84:	c0 28       	rjmp	80013f88 <send_parameter+0x100>
					match = false;
				}
 
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
					break;
80013f86:	d7 03       	nop
				}
			}
 
			// Check if matched
			if (match) {
80013f88:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80013f8c:	30 08       	mov	r8,0
80013f8e:	f0 09 18 00 	cp.b	r9,r8
80013f92:	c1 00       	breq	80013fb2 <send_parameter+0x12a>
				/*
				mavlink_msg_param_value_send(MAVLINK_COMM_0,
											(int8_t*)param_set.parameters[i].param_name,
											*param_set.parameters[i].param, param_set.parameters[i].data_type, 
											param_set.param_count, i);*/
				param_set.parameters[i].schedule_for_transmission=true;
80013f94:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013f98:	ec fa 00 28 	ld.w	r10,r6[40]
80013f9c:	12 98       	mov	r8,r9
80013f9e:	a3 78       	lsl	r8,0x3
80013fa0:	12 18       	sub	r8,r9
80013fa2:	a3 68       	lsl	r8,0x2
80013fa4:	f4 08 00 08 	add	r8,r10,r8
80013fa8:	f0 c9 ff e8 	sub	r9,r8,-24
80013fac:	30 18       	mov	r8,1
80013fae:	b2 a8       	st.b	r9[0x2],r8

				break;
80013fb0:	c1 08       	rjmp	80013fd0 <send_parameter+0x148>
		param_set.parameters[request->param_index].schedule_for_transmission=true;

	}
	else {
		char* key = (char*) request->param_id;		
		for (uint16_t i = 0; i < param_set.param_count; i++) {
80013fb2:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80013fb6:	2f f8       	sub	r8,-1
80013fb8:	ef 58 ff fa 	st.h	r7[-6],r8
80013fbc:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013fc0:	ec f8 00 28 	ld.w	r8,r6[40]
80013fc4:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013fc8:	10 39       	cp.w	r9,r8
80013fca:	c9 35       	brlt	80013ef0 <send_parameter+0x68>
80013fcc:	c0 28       	rjmp	80013fd0 <send_parameter+0x148>
									(int8_t*)param_set.parameters[request->param_index].param_name,
									*param_set.parameters[request->param_index].param,
									param_set.parameters[request->param_index].data_type,
									param_set.param_count,
									request->param_index);*/
		if (request->param_index>param_set.param_count) return;
80013fce:	d7 03       	nop

				break;
			}					
		}
	}
}
80013fd0:	2f cd       	sub	sp,-16
80013fd2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013fd6:	00 00       	add	r0,r0
80013fd8:	80 01       	ld.sh	r1,r0[0x0]
80013fda:	3d 16       	mov	r6,-47

80013fdc <receive_parameter>:

void receive_parameter(Mavlink_Received_t* rec) {
80013fdc:	eb cd 40 c0 	pushm	r6-r7,lr
80013fe0:	1a 97       	mov	r7,sp
80013fe2:	20 ad       	sub	sp,40
80013fe4:	4e 76       	lddpc	r6,80014180 <receive_parameter+0x1a4>
80013fe6:	1e 26       	rsub	r6,pc
80013fe8:	ef 4c ff d8 	st.w	r7[-40],r12
	mavlink_param_set_t set;
	mavlink_msg_param_set_decode(&rec->msg, &set);
80013fec:	ee f8 ff d8 	ld.w	r8,r7[-40]
80013ff0:	ee c9 00 24 	sub	r9,r7,36
80013ff4:	12 9b       	mov	r11,r9
80013ff6:	10 9c       	mov	r12,r8
80013ff8:	fe b0 fb f9 	rcall	800137ea <mavlink_msg_param_set_decode>
 
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
80013ffc:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80014000:	ec f8 00 70 	ld.w	r8,r6[112]
80014004:	11 88       	ld.ub	r8,r8[0x0]
void receive_parameter(Mavlink_Received_t* rec) {
	mavlink_param_set_t set;
	mavlink_msg_param_set_decode(&rec->msg, &set);
 
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
80014006:	f0 09 18 00 	cp.b	r9,r8
8001400a:	e0 81 00 b7 	brne	80014178 <receive_parameter+0x19c>
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
8001400e:	ef 39 ff e1 	ld.ub	r9,r7[-31]
80014012:	ec f8 00 70 	ld.w	r8,r6[112]
80014016:	11 98       	ld.ub	r8,r8[0x1]
void receive_parameter(Mavlink_Received_t* rec) {
	mavlink_param_set_t set;
	mavlink_msg_param_set_decode(&rec->msg, &set);
 
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
80014018:	f0 09 18 00 	cp.b	r9,r8
8001401c:	e0 81 00 ae 	brne	80014178 <receive_parameter+0x19c>
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
		char* key = (char*) set.param_id;
80014020:	ee c8 00 24 	sub	r8,r7,36
80014024:	2f a8       	sub	r8,-6
80014026:	ef 48 ff f4 	st.w	r7[-12],r8
				
		for (uint16_t i = 0; i < param_set.param_count; i++) {
8001402a:	30 08       	mov	r8,0
8001402c:	ef 58 ff fa 	st.h	r7[-6],r8
80014030:	c9 78       	rjmp	8001415e <receive_parameter+0x182>
			bool match = true;
80014032:	30 18       	mov	r8,1
80014034:	ef 68 ff fd 	st.b	r7[-3],r8
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
80014038:	30 08       	mov	r8,0
8001403a:	ef 58 ff fe 	st.h	r7[-2],r8
8001403e:	c3 38       	rjmp	800140a4 <receive_parameter+0xc8>
				// Compare
				if ((char)param_set.parameters[i].param_name[j] != (char)key[j]) {
80014040:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80014044:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80014048:	ec fb 00 28 	ld.w	r11,r6[40]
8001404c:	12 98       	mov	r8,r9
8001404e:	a3 78       	lsl	r8,0x3
80014050:	12 18       	sub	r8,r9
80014052:	a3 68       	lsl	r8,0x2
80014054:	f6 08 00 08 	add	r8,r11,r8
80014058:	14 08       	add	r8,r10
8001405a:	2f c8       	sub	r8,-4
8001405c:	11 89       	ld.ub	r9,r8[0x0]
8001405e:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80014062:	ee fa ff f4 	ld.w	r10,r7[-12]
80014066:	f4 08 00 08 	add	r8,r10,r8
8001406a:	11 88       	ld.ub	r8,r8[0x0]
8001406c:	f0 09 18 00 	cp.b	r9,r8
80014070:	c0 40       	breq	80014078 <receive_parameter+0x9c>
					match = false;
80014072:	30 08       	mov	r8,0
80014074:	ef 68 ff fd 	st.b	r7[-3],r8
				}
		
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
80014078:	ef 19 ff fa 	ld.uh	r9,r7[-6]
8001407c:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80014080:	ec fb 00 28 	ld.w	r11,r6[40]
80014084:	12 98       	mov	r8,r9
80014086:	a3 78       	lsl	r8,0x3
80014088:	12 18       	sub	r8,r9
8001408a:	a3 68       	lsl	r8,0x2
8001408c:	f6 08 00 08 	add	r8,r11,r8
80014090:	14 08       	add	r8,r10
80014092:	2f c8       	sub	r8,-4
80014094:	11 88       	ld.ub	r8,r8[0x0]
80014096:	58 08       	cp.w	r8,0
80014098:	c1 80       	breq	800140c8 <receive_parameter+0xec>
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
		char* key = (char*) set.param_id;
				
		for (uint16_t i = 0; i < param_set.param_count; i++) {
			bool match = true;
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
8001409a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001409e:	2f f8       	sub	r8,-1
800140a0:	ef 58 ff fe 	st.h	r7[-2],r8
800140a4:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800140a8:	ec fa 00 28 	ld.w	r10,r6[40]
800140ac:	12 98       	mov	r8,r9
800140ae:	a3 78       	lsl	r8,0x3
800140b0:	12 18       	sub	r8,r9
800140b2:	a3 68       	lsl	r8,0x2
800140b4:	f4 08 00 08 	add	r8,r10,r8
800140b8:	2e 88       	sub	r8,-24
800140ba:	11 88       	ld.ub	r8,r8[0x0]
800140bc:	ef 09 ff fe 	ld.sh	r9,r7[-2]
800140c0:	f0 09 19 00 	cp.h	r9,r8
800140c4:	cb e3       	brcs	80014040 <receive_parameter+0x64>
800140c6:	c0 28       	rjmp	800140ca <receive_parameter+0xee>
					match = false;
				}
		
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
					break;
800140c8:	d7 03       	nop
				}
			}
 
			// Check if matched
			if (match) {
800140ca:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800140ce:	30 08       	mov	r8,0
800140d0:	f0 09 18 00 	cp.b	r9,r8
800140d4:	c4 00       	breq	80014154 <receive_parameter+0x178>
				// Only write and emit changes if there is actually a difference
				if (*param_set.parameters[i].param != set.param_value && set.param_type == param_set.parameters[i].data_type) {
800140d6:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800140da:	ec fa 00 28 	ld.w	r10,r6[40]
800140de:	12 98       	mov	r8,r9
800140e0:	a3 78       	lsl	r8,0x3
800140e2:	12 18       	sub	r8,r9
800140e4:	a3 68       	lsl	r8,0x2
800140e6:	f4 08 00 08 	add	r8,r10,r8
800140ea:	70 08       	ld.w	r8,r8[0x0]
800140ec:	70 09       	ld.w	r9,r8[0x0]
800140ee:	ee f8 ff dc 	ld.w	r8,r7[-36]
800140f2:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800140f6:	c3 e0       	breq	80014172 <receive_parameter+0x196>
800140f8:	ef 38 ff f2 	ld.ub	r8,r7[-14]
800140fc:	10 9a       	mov	r10,r8
800140fe:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80014102:	ec fb 00 28 	ld.w	r11,r6[40]
80014106:	12 98       	mov	r8,r9
80014108:	a3 78       	lsl	r8,0x3
8001410a:	12 18       	sub	r8,r9
8001410c:	a3 68       	lsl	r8,0x2
8001410e:	f6 08 00 08 	add	r8,r11,r8
80014112:	2e c8       	sub	r8,-20
80014114:	70 08       	ld.w	r8,r8[0x0]
80014116:	10 3a       	cp.w	r10,r8
80014118:	c2 f1       	brne	80014176 <receive_parameter+0x19a>
					*param_set.parameters[i].param = set.param_value;
8001411a:	ef 19 ff fa 	ld.uh	r9,r7[-6]
8001411e:	ec fa 00 28 	ld.w	r10,r6[40]
80014122:	12 98       	mov	r8,r9
80014124:	a3 78       	lsl	r8,0x3
80014126:	12 18       	sub	r8,r9
80014128:	a3 68       	lsl	r8,0x2
8001412a:	f4 08 00 08 	add	r8,r10,r8
8001412e:	70 08       	ld.w	r8,r8[0x0]
80014130:	ee f9 ff dc 	ld.w	r9,r7[-36]
80014134:	91 09       	st.w	r8[0x0],r9
//					mavlink_msg_param_value_send(MAVLINK_COMM_0,
//												(int8_t*)param_set.parameters[i].param_name,
//												*param_set.parameters[i].param, param_set.parameters[i].data_type, 
//												param_set.param_count, i);
					// schedule parameter for transmission downstream
					param_set.parameters[i].schedule_for_transmission=true;
80014136:	ef 19 ff fa 	ld.uh	r9,r7[-6]
8001413a:	ec fa 00 28 	ld.w	r10,r6[40]
8001413e:	12 98       	mov	r8,r9
80014140:	a3 78       	lsl	r8,0x3
80014142:	12 18       	sub	r8,r9
80014144:	a3 68       	lsl	r8,0x2
80014146:	f4 08 00 08 	add	r8,r10,r8
8001414a:	f0 c9 ff e8 	sub	r9,r8,-24
8001414e:	30 18       	mov	r8,1
80014150:	b2 a8       	st.b	r9[0x2],r8
				}
				break;
80014152:	c1 38       	rjmp	80014178 <receive_parameter+0x19c>
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
		char* key = (char*) set.param_id;
				
		for (uint16_t i = 0; i < param_set.param_count; i++) {
80014154:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80014158:	2f f8       	sub	r8,-1
8001415a:	ef 58 ff fa 	st.h	r7[-6],r8
8001415e:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80014162:	ec f8 00 28 	ld.w	r8,r6[40]
80014166:	f0 f8 0d 20 	ld.w	r8,r8[3360]
8001416a:	10 39       	cp.w	r9,r8
8001416c:	fe 95 ff 63 	brlt	80014032 <receive_parameter+0x56>
80014170:	c0 48       	rjmp	80014178 <receive_parameter+0x19c>
//												*param_set.parameters[i].param, param_set.parameters[i].data_type, 
//												param_set.param_count, i);
					// schedule parameter for transmission downstream
					param_set.parameters[i].schedule_for_transmission=true;
				}
				break;
80014172:	d7 03       	nop
80014174:	c0 28       	rjmp	80014178 <receive_parameter+0x19c>
80014176:	d7 03       	nop
			}
		}
	}
}
80014178:	2f 6d       	sub	sp,-40
8001417a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001417e:	00 00       	add	r0,r0
80014180:	80 01       	ld.sh	r1,r0[0x0]
80014182:	3e 6a       	mov	r10,-26
80014184:	46 6c       	lddsp	r12,sp[0x198]
80014186:	61 73       	ld.w	r3,r0[0x5c]
80014188:	68 20       	ld.w	r0,r4[0x8]
8001418a:	72 65       	ld.w	r5,r9[0x18]
8001418c:	61 64       	ld.w	r4,r0[0x58]
8001418e:	20 73       	sub	r3,7
80014190:	75 63       	ld.w	r3,r10[0x58]
80014192:	63 65       	ld.w	r5,r1[0x58]
80014194:	73 73       	ld.w	r3,r9[0x5c]
80014196:	66 75       	ld.w	r5,r3[0x1c]
80014198:	6c 21       	ld.w	r1,r6[0x8]
8001419a:	20 4e       	sub	lr,4
8001419c:	65 77       	ld.w	r7,r2[0x5c]
8001419e:	20 50       	sub	r0,5
800141a0:	61 72       	ld.w	r2,r0[0x5c]
800141a2:	61 6d       	ld.w	sp,r0[0x58]
800141a4:	65 74       	ld.w	r4,r2[0x5c]
800141a6:	65 72       	ld.w	r2,r2[0x5c]
800141a8:	73 20       	ld.w	r0,r9[0x48]
800141aa:	69 6e       	ld.w	lr,r4[0x58]
800141ac:	73 65       	ld.w	r5,r9[0x58]
800141ae:	72 74       	ld.w	r4,r9[0x1c]
800141b0:	65 64       	ld.w	r4,r2[0x58]
800141b2:	2e 20       	sub	r0,-30
800141b4:	0a 00       	add	r0,r5
800141b6:	00 00       	add	r0,r0
800141b8:	46 6c       	lddsp	r12,sp[0x198]
800141ba:	61 73       	ld.w	r3,r0[0x5c]
800141bc:	68 20       	ld.w	r0,r4[0x8]
800141be:	6d 65       	ld.w	r5,r6[0x58]
800141c0:	6d 6f       	ld.w	pc,r6[0x58]
800141c2:	72 79       	ld.w	r9,r9[0x1c]
800141c4:	20 63       	sub	r3,6
800141c6:	6f 72       	ld.w	r2,r7[0x5c]
800141c8:	72 75       	ld.w	r5,r9[0x1c]
800141ca:	70 74       	ld.w	r4,r8[0x1c]
800141cc:	65 64       	ld.w	r4,r2[0x58]
800141ce:	21 20       	sub	r0,18
800141d0:	48 61       	lddpc	r1,800141e8 <receive_parameter+0x20c>
800141d2:	72 64       	ld.w	r4,r9[0x18]
800141d4:	63 6f       	ld.w	pc,r1[0x58]
800141d6:	64 65       	ld.w	r5,r2[0x18]
800141d8:	64 20       	ld.w	r0,r2[0x8]
800141da:	76 61       	ld.w	r1,r11[0x18]
800141dc:	6c 75       	ld.w	r5,r6[0x1c]
800141de:	65 73       	ld.w	r3,r2[0x5c]
800141e0:	20 74       	sub	r4,7
800141e2:	61 6b       	ld.w	r11,r0[0x58]
800141e4:	65 6e       	ld.w	lr,r2[0x58]
800141e6:	2e 0a       	sub	r10,-32
	...

800141ea <read_parameters_from_flashc>:

void read_parameters_from_flashc()
{
800141ea:	eb cd 40 c0 	pushm	r6-r7,lr
800141ee:	1a 97       	mov	r7,sp
800141f0:	fa cd 01 f8 	sub	sp,sp,504
800141f4:	4d 06       	lddpc	r6,80014334 <read_parameters_from_flashc+0x14a>
800141f6:	1e 26       	rsub	r6,pc
	uint8_t i;
	nvram_array = AVR32_FLASHC_USER_PAGE_ADDRESS + 0x04;
800141f8:	ec f8 01 94 	ld.w	r8,r6[404]
800141fc:	30 49       	mov	r9,4
800141fe:	ea 19 80 80 	orh	r9,0x8080
80014202:	91 09       	st.w	r8[0x0],r9
	
	nvram_data_ttt local_array;
	
	float cksum1, cksum2;
	cksum1 = 0;
80014204:	30 08       	mov	r8,0
80014206:	ef 48 ff f8 	st.w	r7[-8],r8
	cksum2 = 0;
8001420a:	30 08       	mov	r8,0
8001420c:	ef 48 ff fc 	st.w	r7[-4],r8
	
	for (i=0;i<(param_set.param_count+1);i++)
80014210:	30 08       	mov	r8,0
80014212:	ef 68 ff f7 	st.b	r7[-9],r8
80014216:	c2 98       	rjmp	80014268 <read_parameters_from_flashc+0x7e>
	{
		local_array.values[i] = nvram_array->values[i];
80014218:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8001421c:	ec f9 01 94 	ld.w	r9,r6[404]
80014220:	72 09       	ld.w	r9,r9[0x0]
80014222:	ef 3a ff f7 	ld.ub	r10,r7[-9]
80014226:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8001422a:	a3 68       	lsl	r8,0x2
8001422c:	ee 08 00 08 	add	r8,r7,r8
80014230:	f1 49 fe 08 	st.w	r8[-504],r9
		cksum1 += local_array.values[i];
80014234:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80014238:	a3 68       	lsl	r8,0x2
8001423a:	ee 08 00 08 	add	r8,r7,r8
8001423e:	f0 f8 fe 08 	ld.w	r8,r8[-504]
80014242:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014246:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001424a:	ef 48 ff f8 	st.w	r7[-8],r8
		cksum2 += cksum1;
8001424e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014252:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014256:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001425a:	ef 48 ff fc 	st.w	r7[-4],r8
	
	float cksum1, cksum2;
	cksum1 = 0;
	cksum2 = 0;
	
	for (i=0;i<(param_set.param_count+1);i++)
8001425e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80014262:	2f f8       	sub	r8,-1
80014264:	ef 68 ff f7 	st.b	r7[-9],r8
80014268:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8001426c:	ec f8 00 28 	ld.w	r8,r6[40]
80014270:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80014274:	2f f8       	sub	r8,-1
80014276:	10 39       	cp.w	r9,r8
80014278:	cd 05       	brlt	80014218 <read_parameters_from_flashc+0x2e>
		local_array.values[i] = nvram_array->values[i];
		cksum1 += local_array.values[i];
		cksum2 += cksum1;
	}
	
	if ((param_set.param_count==local_array.values[0])&&(cksum1 == nvram_array->values[param_set.param_count+1])&&(cksum2 == nvram_array->values[param_set.param_count+2]))
8001427a:	ec f8 00 28 	ld.w	r8,r6[40]
8001427e:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80014282:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
80014286:	ee f8 fe 08 	ld.w	r8,r7[-504]
8001428a:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001428e:	c4 b1       	brne	80014324 <read_parameters_from_flashc+0x13a>
80014290:	ec f8 01 94 	ld.w	r8,r6[404]
80014294:	70 08       	ld.w	r8,r8[0x0]
80014296:	ec f9 00 28 	ld.w	r9,r6[40]
8001429a:	f2 f9 0d 20 	ld.w	r9,r9[3360]
8001429e:	2f f9       	sub	r9,-1
800142a0:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800142a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800142a8:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800142ac:	c3 c1       	brne	80014324 <read_parameters_from_flashc+0x13a>
800142ae:	ec f8 01 94 	ld.w	r8,r6[404]
800142b2:	70 08       	ld.w	r8,r8[0x0]
800142b4:	ec f9 00 28 	ld.w	r9,r6[40]
800142b8:	f2 f9 0d 20 	ld.w	r9,r9[3360]
800142bc:	2f e9       	sub	r9,-2
800142be:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800142c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800142c6:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800142ca:	c2 d1       	brne	80014324 <read_parameters_from_flashc+0x13a>
	{
		dbg_print("Flash read successful! New Parameters inserted. \n");
800142cc:	fe cc 01 48 	sub	r12,pc,328
800142d0:	f0 16 00 01 	mcall	r6[4]
		for (i=1;i<(param_set.param_count+1);i++)
800142d4:	30 18       	mov	r8,1
800142d6:	ef 68 ff f7 	st.b	r7[-9],r8
800142da:	c1 b8       	rjmp	80014310 <read_parameters_from_flashc+0x126>
		{
			*param_set.parameters[i-1].param = local_array.values[i];
800142dc:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800142e0:	f0 c9 00 01 	sub	r9,r8,1
800142e4:	ec fa 00 28 	ld.w	r10,r6[40]
800142e8:	12 98       	mov	r8,r9
800142ea:	a3 78       	lsl	r8,0x3
800142ec:	12 18       	sub	r8,r9
800142ee:	a3 68       	lsl	r8,0x2
800142f0:	f4 08 00 08 	add	r8,r10,r8
800142f4:	70 09       	ld.w	r9,r8[0x0]
800142f6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800142fa:	a3 68       	lsl	r8,0x2
800142fc:	ee 08 00 08 	add	r8,r7,r8
80014300:	f0 f8 fe 08 	ld.w	r8,r8[-504]
80014304:	93 08       	st.w	r9[0x0],r8
	}
	
	if ((param_set.param_count==local_array.values[0])&&(cksum1 == nvram_array->values[param_set.param_count+1])&&(cksum2 == nvram_array->values[param_set.param_count+2]))
	{
		dbg_print("Flash read successful! New Parameters inserted. \n");
		for (i=1;i<(param_set.param_count+1);i++)
80014306:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8001430a:	2f f8       	sub	r8,-1
8001430c:	ef 68 ff f7 	st.b	r7[-9],r8
80014310:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80014314:	ec f8 00 28 	ld.w	r8,r6[40]
80014318:	f0 f8 0d 20 	ld.w	r8,r8[3360]
8001431c:	2f f8       	sub	r8,-1
8001431e:	10 39       	cp.w	r9,r8
80014320:	cd e5       	brlt	800142dc <read_parameters_from_flashc+0xf2>
		local_array.values[i] = nvram_array->values[i];
		cksum1 += local_array.values[i];
		cksum2 += cksum1;
	}
	
	if ((param_set.param_count==local_array.values[0])&&(cksum1 == nvram_array->values[param_set.param_count+1])&&(cksum2 == nvram_array->values[param_set.param_count+2]))
80014322:	c0 58       	rjmp	8001432c <read_parameters_from_flashc+0x142>
		for (i=1;i<(param_set.param_count+1);i++)
		{
			*param_set.parameters[i-1].param = local_array.values[i];
		}
	}else{
		dbg_print("Flash memory corrupted! Hardcoded values taken.\n");
80014324:	fe cc 01 6c 	sub	r12,pc,364
80014328:	f0 16 00 01 	mcall	r6[4]
	}
}
8001432c:	28 2d       	sub	sp,-504
8001432e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014332:	00 00       	add	r0,r0
80014334:	80 01       	ld.sh	r1,r0[0x0]
80014336:	40 7a       	lddsp	r10,sp[0x1c]
80014338:	42 65       	lddsp	r5,sp[0x98]
8001433a:	67 69       	ld.w	r9,r3[0x58]
8001433c:	6e 20       	ld.w	r0,r7[0x8]
8001433e:	77 72       	ld.w	r2,r11[0x5c]
80014340:	69 74       	ld.w	r4,r4[0x5c]
80014342:	65 20       	ld.w	r0,r2[0x48]
80014344:	74 6f       	ld.w	pc,r10[0x18]
80014346:	20 66       	sub	r6,6
80014348:	6c 61       	ld.w	r1,r6[0x18]
8001434a:	73 68       	ld.w	r8,r9[0x58]
8001434c:	63 2e       	ld.w	lr,r1[0x48]
8001434e:	2e 2e       	sub	lr,-30
80014350:	0a 00       	add	r0,r5
80014352:	00 00       	add	r0,r0
80014354:	57 72       	stdsp	sp[0x1dc],r2
80014356:	69 74       	ld.w	r4,r4[0x5c]
80014358:	65 20       	ld.w	r0,r2[0x48]
8001435a:	74 6f       	ld.w	pc,r10[0x18]
8001435c:	20 66       	sub	r6,6
8001435e:	61 6c       	ld.w	r12,r0[0x58]
80014360:	73 68       	ld.w	r8,r9[0x58]
80014362:	63 20       	ld.w	r0,r1[0x48]
80014364:	63 6f       	ld.w	pc,r1[0x58]
80014366:	6d 70       	ld.w	r0,r6[0x5c]
80014368:	6c 65       	ld.w	r5,r6[0x18]
8001436a:	74 65       	ld.w	r5,r10[0x18]
8001436c:	64 2e       	ld.w	lr,r2[0x8]
8001436e:	0a 00       	add	r0,r5

80014370 <write_parameters_to_flashc>:

void write_parameters_to_flashc()
{
80014370:	eb cd 40 c0 	pushm	r6-r7,lr
80014374:	1a 97       	mov	r7,sp
80014376:	fa cd 01 f8 	sub	sp,sp,504
8001437a:	4c 96       	lddpc	r6,8001449c <write_parameters_to_flashc+0x12c>
8001437c:	1e 26       	rsub	r6,pc
	float cksum1, cksum2;
	cksum1 = 0;
8001437e:	30 08       	mov	r8,0
80014380:	ef 48 ff f4 	st.w	r7[-12],r8
	cksum2 = 0;
80014384:	30 08       	mov	r8,0
80014386:	ef 48 ff f8 	st.w	r7[-8],r8

	uint8_t i;
	nvram_array = AVR32_FLASHC_USER_PAGE_ADDRESS + 0x04;
8001438a:	ec f8 01 94 	ld.w	r8,r6[404]
8001438e:	30 49       	mov	r9,4
80014390:	ea 19 80 80 	orh	r9,0x8080
80014394:	91 09       	st.w	r8[0x0],r9
	
	nvram_data_ttt local_array;
	
	local_array.values[0] = param_set.param_count;
80014396:	ec f8 00 28 	ld.w	r8,r6[40]
8001439a:	f0 f8 0d 20 	ld.w	r8,r8[3360]
8001439e:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
800143a2:	ef 48 fe 08 	st.w	r7[-504],r8
	cksum1 += local_array.values[0];
800143a6:	ee f8 fe 08 	ld.w	r8,r7[-504]
800143aa:	ee f9 ff f4 	ld.w	r9,r7[-12]
800143ae:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800143b2:	ef 48 ff f4 	st.w	r7[-12],r8
	cksum2 += cksum1;
800143b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800143ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
800143be:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800143c2:	ef 48 ff f8 	st.w	r7[-8],r8
	
	dbg_print("Begin write to flashc...\n");
800143c6:	fe cc 00 8e 	sub	r12,pc,142
800143ca:	f0 16 00 01 	mcall	r6[4]
	
	for (i=1;i<(param_set.param_count+1);i++)
800143ce:	30 18       	mov	r8,1
800143d0:	ef 68 ff ff 	st.b	r7[-1],r8
800143d4:	c3 18       	rjmp	80014436 <write_parameters_to_flashc+0xc6>
	{
		//flashc_memcpy((void *)&(nvram_array->values[i]),   param_set.parameters[i].param, sizeof((nvram_array->values[i])),   true);
		local_array.values[i] = *param_set.parameters[i-1].param;
800143d6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800143da:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800143de:	f0 c9 00 01 	sub	r9,r8,1
800143e2:	ec fb 00 28 	ld.w	r11,r6[40]
800143e6:	12 98       	mov	r8,r9
800143e8:	a3 78       	lsl	r8,0x3
800143ea:	12 18       	sub	r8,r9
800143ec:	a3 68       	lsl	r8,0x2
800143ee:	f6 08 00 08 	add	r8,r11,r8
800143f2:	70 08       	ld.w	r8,r8[0x0]
800143f4:	70 09       	ld.w	r9,r8[0x0]
800143f6:	f4 08 15 02 	lsl	r8,r10,0x2
800143fa:	ee 08 00 08 	add	r8,r7,r8
800143fe:	f1 49 fe 08 	st.w	r8[-504],r9
		cksum1 += local_array.values[i];
80014402:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80014406:	a3 68       	lsl	r8,0x2
80014408:	ee 08 00 08 	add	r8,r7,r8
8001440c:	f0 f8 fe 08 	ld.w	r8,r8[-504]
80014410:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014414:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014418:	ef 48 ff f4 	st.w	r7[-12],r8
		cksum2 += cksum1;
8001441c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014420:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014424:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014428:	ef 48 ff f8 	st.w	r7[-8],r8
	cksum1 += local_array.values[0];
	cksum2 += cksum1;
	
	dbg_print("Begin write to flashc...\n");
	
	for (i=1;i<(param_set.param_count+1);i++)
8001442c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80014430:	2f f8       	sub	r8,-1
80014432:	ef 68 ff ff 	st.b	r7[-1],r8
80014436:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8001443a:	ec f8 00 28 	ld.w	r8,r6[40]
8001443e:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80014442:	2f f8       	sub	r8,-1
80014444:	10 39       	cp.w	r9,r8
80014446:	cc 85       	brlt	800143d6 <write_parameters_to_flashc+0x66>
		//flashc_memcpy((void *)&(nvram_array->values[i]),   param_set.parameters[i].param, sizeof((nvram_array->values[i])),   true);
		local_array.values[i] = *param_set.parameters[i-1].param;
		cksum1 += local_array.values[i];
		cksum2 += cksum1;
	}
	local_array.values[param_set.param_count+1] = cksum1;
80014448:	ec f8 00 28 	ld.w	r8,r6[40]
8001444c:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80014450:	2f f8       	sub	r8,-1
80014452:	a3 68       	lsl	r8,0x2
80014454:	ee 08 00 08 	add	r8,r7,r8
80014458:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001445c:	f1 49 fe 08 	st.w	r8[-504],r9
	local_array.values[param_set.param_count+2] = cksum2;
80014460:	ec f8 00 28 	ld.w	r8,r6[40]
80014464:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80014468:	2f e8       	sub	r8,-2
8001446a:	a3 68       	lsl	r8,0x2
8001446c:	ee 08 00 08 	add	r8,r7,r8
80014470:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014474:	f1 49 fe 08 	st.w	r8[-504],r9
	
	flashc_memcpy((void *)nvram_array, &local_array, sizeof(*nvram_array) ,   true);
80014478:	ec f8 01 94 	ld.w	r8,r6[404]
8001447c:	70 08       	ld.w	r8,r8[0x0]
8001447e:	ee cb 01 f8 	sub	r11,r7,504
80014482:	30 19       	mov	r9,1
80014484:	e0 6a 01 ec 	mov	r10,492
80014488:	10 9c       	mov	r12,r8
8001448a:	f0 16 01 5a 	mcall	r6[1384]
	dbg_print("Write to falshc completed.\n");
8001448e:	fe cc 01 3a 	sub	r12,pc,314
80014492:	f0 16 00 01 	mcall	r6[4]
80014496:	28 2d       	sub	sp,-504
80014498:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001449c:	80 01       	ld.sh	r1,r0[0x0]
8001449e:	42 00       	lddsp	r0,sp[0x80]

800144a0 <quat_from_vector>:
	out.v[2] = -q.v[2];

#define QUAT(q, s, v0, v1, v2) \
	q.s=s; q.v[0]=v0; q.v[1]=v1; q.v[2]=v2;

UQuat_t static inline quat_from_vector(float *v) {
800144a0:	eb cd 40 80 	pushm	r7,lr
800144a4:	1a 97       	mov	r7,sp
800144a6:	20 5d       	sub	sp,20
800144a8:	18 9a       	mov	r10,r12
800144aa:	ef 4b ff ec 	st.w	r7[-20],r11
	UQuat_t q;	
	q.s=0; 
800144ae:	30 08       	mov	r8,0
800144b0:	ef 48 ff f0 	st.w	r7[-16],r8
	q.v[0]=v[0]; 
800144b4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800144b8:	70 08       	ld.w	r8,r8[0x0]
800144ba:	ef 48 ff f4 	st.w	r7[-12],r8
	q.v[1]=v[1]; 
800144be:	ee f8 ff ec 	ld.w	r8,r7[-20]
800144c2:	2f c8       	sub	r8,-4
800144c4:	70 08       	ld.w	r8,r8[0x0]
800144c6:	ef 48 ff f8 	st.w	r7[-8],r8
	q.v[2]=v[2];
800144ca:	ee f8 ff ec 	ld.w	r8,r7[-20]
800144ce:	2f 88       	sub	r8,-8
800144d0:	70 08       	ld.w	r8,r8[0x0]
800144d2:	ef 48 ff fc 	st.w	r7[-4],r8
	return q;
800144d6:	14 98       	mov	r8,r10
800144d8:	ee c9 00 10 	sub	r9,r7,16
800144dc:	20 08       	sub	r8,0
800144de:	20 09       	sub	r9,0
800144e0:	72 0b       	ld.w	r11,r9[0x0]
800144e2:	91 0b       	st.w	r8[0x0],r11
800144e4:	72 1b       	ld.w	r11,r9[0x4]
800144e6:	91 1b       	st.w	r8[0x4],r11
800144e8:	72 2b       	ld.w	r11,r9[0x8]
800144ea:	91 2b       	st.w	r8[0x8],r11
800144ec:	72 39       	ld.w	r9,r9[0xc]
800144ee:	91 39       	st.w	r8[0xc],r9
}
800144f0:	14 9c       	mov	r12,r10
800144f2:	2f bd       	sub	sp,-20
800144f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800144f8 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
800144f8:	eb cd 40 80 	pushm	r7,lr
800144fc:	1a 97       	mov	r7,sp
800144fe:	20 3d       	sub	sp,12
80014500:	ef 4c ff f8 	st.w	r7[-8],r12
80014504:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
80014508:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001450c:	70 09       	ld.w	r9,r8[0x0]
8001450e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014512:	70 08       	ld.w	r8,r8[0x0]
80014514:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80014518:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001451c:	2f c8       	sub	r8,-4
8001451e:	70 0a       	ld.w	r10,r8[0x0]
80014520:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014524:	2f c8       	sub	r8,-4
80014526:	70 08       	ld.w	r8,r8[0x0]
80014528:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001452c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80014530:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014534:	2f 88       	sub	r8,-8
80014536:	70 0a       	ld.w	r10,r8[0x0]
80014538:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001453c:	2f 88       	sub	r8,-8
8001453e:	70 08       	ld.w	r8,r8[0x0]
80014540:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80014544:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014548:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8001454c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80014550:	10 9c       	mov	r12,r8
80014552:	2f dd       	sub	sp,-12
80014554:	e3 cd 80 80 	ldm	sp++,r7,pc

80014558 <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
80014558:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001455c:	1a 97       	mov	r7,sp
8001455e:	20 7d       	sub	sp,28
80014560:	4b d6       	lddpc	r6,80014654 <quat_multi+0xfc>
80014562:	1e 26       	rsub	r6,pc
80014564:	ee c8 ff ec 	sub	r8,r7,-20
80014568:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8001456a:	70 2a       	ld.w	r10,r8[0x8]
8001456c:	70 79       	ld.w	r9,r8[0x1c]
8001456e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80014572:	70 3b       	ld.w	r11,r8[0xc]
80014574:	70 69       	ld.w	r9,r8[0x18]
80014576:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001457a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001457e:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
80014582:	70 3a       	ld.w	r10,r8[0xc]
80014584:	70 59       	ld.w	r9,r8[0x14]
80014586:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001458a:	70 1b       	ld.w	r11,r8[0x4]
8001458c:	70 79       	ld.w	r9,r8[0x1c]
8001458e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80014592:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80014596:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8001459a:	70 1a       	ld.w	r10,r8[0x4]
8001459c:	70 69       	ld.w	r9,r8[0x18]
8001459e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800145a2:	70 2b       	ld.w	r11,r8[0x8]
800145a4:	70 59       	ld.w	r9,r8[0x14]
800145a6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800145aa:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800145ae:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
800145b2:	70 4a       	ld.w	r10,r8[0x10]
800145b4:	70 19       	ld.w	r9,r8[0x4]
800145b6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800145ba:	70 0b       	ld.w	r11,r8[0x0]
800145bc:	70 59       	ld.w	r9,r8[0x14]
800145be:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800145c2:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
800145c6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800145ca:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800145ce:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
800145d2:	70 4a       	ld.w	r10,r8[0x10]
800145d4:	70 29       	ld.w	r9,r8[0x8]
800145d6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800145da:	70 0b       	ld.w	r11,r8[0x0]
800145dc:	70 69       	ld.w	r9,r8[0x18]
800145de:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800145e2:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
800145e6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800145ea:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800145ee:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
800145f2:	70 4a       	ld.w	r10,r8[0x10]
800145f4:	70 39       	ld.w	r9,r8[0xc]
800145f6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800145fa:	70 0b       	ld.w	r11,r8[0x0]
800145fc:	70 79       	ld.w	r9,r8[0x1c]
800145fe:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80014602:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80014606:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001460a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001460e:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
80014612:	70 0a       	ld.w	r10,r8[0x0]
80014614:	70 49       	ld.w	r9,r8[0x10]
80014616:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8001461a:	f0 c9 ff f0 	sub	r9,r8,-16
8001461e:	2f c9       	sub	r9,-4
80014620:	2f c8       	sub	r8,-4
80014622:	12 9b       	mov	r11,r9
80014624:	10 9c       	mov	r12,r8
80014626:	c6 9f       	rcall	800144f8 <scalar_product>
80014628:	18 98       	mov	r8,r12
8001462a:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8001462e:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
80014632:	0a 98       	mov	r8,r5
80014634:	ee c9 00 1c 	sub	r9,r7,28
80014638:	20 08       	sub	r8,0
8001463a:	20 09       	sub	r9,0
8001463c:	72 0a       	ld.w	r10,r9[0x0]
8001463e:	91 0a       	st.w	r8[0x0],r10
80014640:	72 1a       	ld.w	r10,r9[0x4]
80014642:	91 1a       	st.w	r8[0x4],r10
80014644:	72 2a       	ld.w	r10,r9[0x8]
80014646:	91 2a       	st.w	r8[0x8],r10
80014648:	72 39       	ld.w	r9,r9[0xc]
8001464a:	91 39       	st.w	r8[0xc],r9
}
8001464c:	0a 9c       	mov	r12,r5
8001464e:	2f 9d       	sub	sp,-28
80014650:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80014654:	80 01       	ld.sh	r1,r0[0x0]
80014656:	43 e6       	lddsp	r6,sp[0xf8]

80014658 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
80014658:	eb cd 40 80 	pushm	r7,lr
8001465c:	1a 97       	mov	r7,sp
8001465e:	20 5d       	sub	sp,20
80014660:	ee c9 ff f8 	sub	r9,r7,-8
80014664:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
80014666:	72 08       	ld.w	r8,r9[0x0]
80014668:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8001466c:	30 08       	mov	r8,0
8001466e:	ef 48 ff fc 	st.w	r7[-4],r8
80014672:	c1 58       	rjmp	8001469c <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
80014674:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014678:	ee fb ff fc 	ld.w	r11,r7[-4]
8001467c:	2f fb       	sub	r11,-1
8001467e:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
80014682:	ee 1b 80 00 	eorh	r11,0x8000
80014686:	2f f8       	sub	r8,-1
80014688:	a3 68       	lsl	r8,0x2
8001468a:	ee 08 00 08 	add	r8,r7,r8
8001468e:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
80014692:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014696:	2f f8       	sub	r8,-1
80014698:	ef 48 ff fc 	st.w	r7[-4],r8
8001469c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800146a0:	58 28       	cp.w	r8,2
800146a2:	fe 9a ff e9 	brle	80014674 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
800146a6:	14 98       	mov	r8,r10
800146a8:	ee c9 00 14 	sub	r9,r7,20
800146ac:	20 08       	sub	r8,0
800146ae:	20 09       	sub	r9,0
800146b0:	72 0b       	ld.w	r11,r9[0x0]
800146b2:	91 0b       	st.w	r8[0x0],r11
800146b4:	72 1b       	ld.w	r11,r9[0x4]
800146b6:	91 1b       	st.w	r8[0x4],r11
800146b8:	72 2b       	ld.w	r11,r9[0x8]
800146ba:	91 2b       	st.w	r8[0x8],r11
800146bc:	72 39       	ld.w	r9,r9[0xc]
800146be:	91 39       	st.w	r8[0xc],r9
}
800146c0:	14 9c       	mov	r12,r10
800146c2:	2f bd       	sub	sp,-20
800146c4:	e3 cd 80 80 	ldm	sp++,r7,pc

800146c8 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
800146c8:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800146cc:	1a 97       	mov	r7,sp
800146ce:	20 cd       	sub	sp,48
800146d0:	4b c6       	lddpc	r6,800147c0 <quat_global_to_local+0xf8>
800146d2:	1e 26       	rsub	r6,pc
800146d4:	ee c5 ff ec 	sub	r5,r7,-20
800146d8:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
800146da:	ee ca 00 10 	sub	r10,r7,16
800146de:	20 4d       	sub	sp,16
800146e0:	1a 98       	mov	r8,sp
800146e2:	0a 99       	mov	r9,r5
800146e4:	20 08       	sub	r8,0
800146e6:	20 09       	sub	r9,0
800146e8:	72 0b       	ld.w	r11,r9[0x0]
800146ea:	91 0b       	st.w	r8[0x0],r11
800146ec:	72 1b       	ld.w	r11,r9[0x4]
800146ee:	91 1b       	st.w	r8[0x4],r11
800146f0:	72 2b       	ld.w	r11,r9[0x8]
800146f2:	91 2b       	st.w	r8[0x8],r11
800146f4:	72 39       	ld.w	r9,r9[0xc]
800146f6:	91 39       	st.w	r8[0xc],r9
800146f8:	14 9c       	mov	r12,r10
800146fa:	ca ff       	rcall	80014658 <quat_inv>
800146fc:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
800146fe:	ee ca 00 20 	sub	r10,r7,32
80014702:	20 4d       	sub	sp,16
80014704:	1a 98       	mov	r8,sp
80014706:	ea c9 ff f0 	sub	r9,r5,-16
8001470a:	20 08       	sub	r8,0
8001470c:	20 09       	sub	r9,0
8001470e:	72 0b       	ld.w	r11,r9[0x0]
80014710:	91 0b       	st.w	r8[0x0],r11
80014712:	72 1b       	ld.w	r11,r9[0x4]
80014714:	91 1b       	st.w	r8[0x4],r11
80014716:	72 2b       	ld.w	r11,r9[0x8]
80014718:	91 2b       	st.w	r8[0x8],r11
8001471a:	72 39       	ld.w	r9,r9[0xc]
8001471c:	91 39       	st.w	r8[0xc],r9
8001471e:	20 4d       	sub	sp,16
80014720:	1a 98       	mov	r8,sp
80014722:	ee c9 00 10 	sub	r9,r7,16
80014726:	20 08       	sub	r8,0
80014728:	20 09       	sub	r9,0
8001472a:	72 0b       	ld.w	r11,r9[0x0]
8001472c:	91 0b       	st.w	r8[0x0],r11
8001472e:	72 1b       	ld.w	r11,r9[0x4]
80014730:	91 1b       	st.w	r8[0x4],r11
80014732:	72 2b       	ld.w	r11,r9[0x8]
80014734:	91 2b       	st.w	r8[0x8],r11
80014736:	72 39       	ld.w	r9,r9[0xc]
80014738:	91 39       	st.w	r8[0xc],r9
8001473a:	14 9c       	mov	r12,r10
8001473c:	c0 ef       	rcall	80014558 <quat_multi>
8001473e:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
80014740:	ee ca 00 30 	sub	r10,r7,48
80014744:	20 4d       	sub	sp,16
80014746:	1a 98       	mov	r8,sp
80014748:	0a 99       	mov	r9,r5
8001474a:	20 08       	sub	r8,0
8001474c:	20 09       	sub	r9,0
8001474e:	72 0b       	ld.w	r11,r9[0x0]
80014750:	91 0b       	st.w	r8[0x0],r11
80014752:	72 1b       	ld.w	r11,r9[0x4]
80014754:	91 1b       	st.w	r8[0x4],r11
80014756:	72 2b       	ld.w	r11,r9[0x8]
80014758:	91 2b       	st.w	r8[0x8],r11
8001475a:	72 39       	ld.w	r9,r9[0xc]
8001475c:	91 39       	st.w	r8[0xc],r9
8001475e:	20 4d       	sub	sp,16
80014760:	1a 98       	mov	r8,sp
80014762:	ee c9 00 20 	sub	r9,r7,32
80014766:	20 08       	sub	r8,0
80014768:	20 09       	sub	r9,0
8001476a:	72 0b       	ld.w	r11,r9[0x0]
8001476c:	91 0b       	st.w	r8[0x0],r11
8001476e:	72 1b       	ld.w	r11,r9[0x4]
80014770:	91 1b       	st.w	r8[0x4],r11
80014772:	72 2b       	ld.w	r11,r9[0x8]
80014774:	91 2b       	st.w	r8[0x8],r11
80014776:	72 39       	ld.w	r9,r9[0xc]
80014778:	91 39       	st.w	r8[0xc],r9
8001477a:	14 9c       	mov	r12,r10
8001477c:	ce ee       	rcall	80014558 <quat_multi>
8001477e:	2f 8d       	sub	sp,-32
80014780:	ee c8 00 20 	sub	r8,r7,32
80014784:	ee c9 00 30 	sub	r9,r7,48
80014788:	20 08       	sub	r8,0
8001478a:	20 09       	sub	r9,0
8001478c:	72 0a       	ld.w	r10,r9[0x0]
8001478e:	91 0a       	st.w	r8[0x0],r10
80014790:	72 1a       	ld.w	r10,r9[0x4]
80014792:	91 1a       	st.w	r8[0x4],r10
80014794:	72 2a       	ld.w	r10,r9[0x8]
80014796:	91 2a       	st.w	r8[0x8],r10
80014798:	72 39       	ld.w	r9,r9[0xc]
8001479a:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8001479c:	06 98       	mov	r8,r3
8001479e:	ee c9 00 20 	sub	r9,r7,32
800147a2:	20 08       	sub	r8,0
800147a4:	20 09       	sub	r9,0
800147a6:	72 0a       	ld.w	r10,r9[0x0]
800147a8:	91 0a       	st.w	r8[0x0],r10
800147aa:	72 1a       	ld.w	r10,r9[0x4]
800147ac:	91 1a       	st.w	r8[0x4],r10
800147ae:	72 2a       	ld.w	r10,r9[0x8]
800147b0:	91 2a       	st.w	r8[0x8],r10
800147b2:	72 39       	ld.w	r9,r9[0xc]
800147b4:	91 39       	st.w	r8[0xc],r9
}
800147b6:	06 9c       	mov	r12,r3
800147b8:	2f 4d       	sub	sp,-48
800147ba:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800147be:	00 00       	add	r0,r0
800147c0:	80 01       	ld.sh	r1,r0[0x0]
800147c2:	45 56       	lddsp	r6,sp[0x154]

800147c4 <vector_norm_sqr>:
	result=0.5*(result+(input/result));
	return result;
}

float static inline vector_norm_sqr(float u[])
{
800147c4:	eb cd 40 c0 	pushm	r6-r7,lr
800147c8:	1a 97       	mov	r7,sp
800147ca:	20 2d       	sub	sp,8
800147cc:	48 96       	lddpc	r6,800147f0 <vector_norm_sqr+0x2c>
800147ce:	1e 26       	rsub	r6,pc
800147d0:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
800147d4:	ee fb ff f8 	ld.w	r11,r7[-8]
800147d8:	ee fc ff f8 	ld.w	r12,r7[-8]
800147dc:	c8 ee       	rcall	800144f8 <scalar_product>
800147de:	18 98       	mov	r8,r12
800147e0:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
800147e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800147e8:	10 9c       	mov	r12,r8
800147ea:	2f ed       	sub	sp,-8
800147ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800147f0:	80 01       	ld.sh	r1,r0[0x0]
800147f2:	46 52       	lddsp	r2,sp[0x194]

800147f4 <f_abs>:

	}
	return result;
}

static inline float f_abs(const float a){
800147f4:	eb cd 40 80 	pushm	r7,lr
800147f8:	1a 97       	mov	r7,sp
800147fa:	20 1d       	sub	sp,4
800147fc:	ef 4c ff fc 	st.w	r7[-4],r12
	if (a >= 0.0)
80014800:	30 18       	mov	r8,1
80014802:	ee fa ff fc 	ld.w	r10,r7[-4]
80014806:	30 09       	mov	r9,0
80014808:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001480c:	e0 8c 00 03 	brvs	80014812 <f_abs+0x1e>
80014810:	c0 24       	brge	80014814 <f_abs+0x20>
80014812:	30 08       	mov	r8,0
80014814:	5c 58       	castu.b	r8
80014816:	c0 40       	breq	8001481e <f_abs+0x2a>
	{
		return a;
80014818:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001481c:	c0 58       	rjmp	80014826 <f_abs+0x32>
	}else{
		return -a;
8001481e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014822:	ee 18 80 00 	eorh	r8,0x8000
	}
}
80014826:	10 9c       	mov	r12,r8
80014828:	2f fd       	sub	sp,-4
8001482a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001482e <f_min>:

static inline float f_min(const float a, const float b){
8001482e:	eb cd 40 80 	pushm	r7,lr
80014832:	1a 97       	mov	r7,sp
80014834:	20 2d       	sub	sp,8
80014836:	ef 4c ff fc 	st.w	r7[-4],r12
8001483a:	ef 4b ff f8 	st.w	r7[-8],r11
	if (a <= b)
8001483e:	30 18       	mov	r8,1
80014840:	ee fa ff fc 	ld.w	r10,r7[-4]
80014844:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014848:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001484c:	e0 8c 00 04 	brvs	80014854 <f_min+0x26>
80014850:	e0 8a 00 03 	brle	80014856 <f_min+0x28>
80014854:	30 08       	mov	r8,0
80014856:	5c 58       	castu.b	r8
80014858:	c0 40       	breq	80014860 <f_min+0x32>
	{
		return a;
8001485a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001485e:	c0 38       	rjmp	80014864 <f_min+0x36>
	}else{
		return b;
80014860:	ee f8 ff f8 	ld.w	r8,r7[-8]
	}
}
80014864:	10 9c       	mov	r12,r8
80014866:	2f ed       	sub	sp,-8
80014868:	e3 cd 80 80 	ldm	sp++,r7,pc

8001486c <center_window_2>:

static float inline sigmoid(float x) {
	return (x/fast_sqrt(1+SQR(x)));
};

static float inline center_window_2(float x) {
8001486c:	eb cd 40 c0 	pushm	r6-r7,lr
80014870:	1a 97       	mov	r7,sp
80014872:	20 1d       	sub	sp,4
80014874:	48 c6       	lddpc	r6,800148a4 <center_window_2+0x38>
80014876:	1e 26       	rsub	r6,pc
80014878:	ef 4c ff fc 	st.w	r7[-4],r12
	return 1.0/(1+SQR(x));
8001487c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014880:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014884:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80014888:	fc 18 3f 80 	movh	r8,0x3f80
8001488c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014890:	10 9b       	mov	r11,r8
80014892:	fc 1c 3f 80 	movh	r12,0x3f80
80014896:	f0 16 00 08 	mcall	r6[32]
8001489a:	18 98       	mov	r8,r12
}
8001489c:	10 9c       	mov	r12,r8
8001489e:	2f fd       	sub	sp,-4
800148a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800148a4:	80 01       	ld.sh	r1,r0[0x0]
800148a6:	46 fa       	lddsp	r10,sp[0x1bc]

800148a8 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800148a8:	eb cd 40 c0 	pushm	r6-r7,lr
800148ac:	1a 97       	mov	r7,sp
800148ae:	20 6d       	sub	sp,24
800148b0:	49 e6       	lddpc	r6,80014928 <interpolate+0x80>
800148b2:	1e 26       	rsub	r6,pc
800148b4:	ef 4c ff f8 	st.w	r7[-8],r12
800148b8:	ef 4b ff f4 	st.w	r7[-12],r11
800148bc:	ef 4a ff f0 	st.w	r7[-16],r10
800148c0:	ef 49 ff ec 	st.w	r7[-20],r9
800148c4:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
800148c8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800148cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800148d0:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800148d4:	c0 41       	brne	800148dc <interpolate+0x34>
	{
		return y1;
800148d6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800148da:	c2 38       	rjmp	80014920 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
800148dc:	ee f9 ff e8 	ld.w	r9,r7[-24]
800148e0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800148e4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800148e8:	ee fa ff f8 	ld.w	r10,r7[-8]
800148ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800148f0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800148f4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800148f8:	ee fa ff f0 	ld.w	r10,r7[-16]
800148fc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014900:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80014904:	12 9b       	mov	r11,r9
80014906:	10 9c       	mov	r12,r8
80014908:	f0 16 00 08 	mcall	r6[32]
8001490c:	18 98       	mov	r8,r12
8001490e:	10 99       	mov	r9,r8
80014910:	ee f8 ff ec 	ld.w	r8,r7[-20]
80014914:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014918:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8001491c:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80014920:	10 9c       	mov	r12,r8
80014922:	2f ad       	sub	sp,-24
80014924:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014928:	80 01       	ld.sh	r1,r0[0x0]
8001492a:	47 36       	lddsp	r6,sp[0x1cc]

8001492c <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8001492c:	eb cd 40 c0 	pushm	r6-r7,lr
80014930:	1a 97       	mov	r7,sp
80014932:	20 3d       	sub	sp,12
80014934:	49 06       	lddpc	r6,80014974 <mav_array_memcpy+0x48>
80014936:	1e 26       	rsub	r6,pc
80014938:	ef 4c ff fc 	st.w	r7[-4],r12
8001493c:	ef 4b ff f8 	st.w	r7[-8],r11
80014940:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80014944:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014948:	58 08       	cp.w	r8,0
8001494a:	c0 91       	brne	8001495c <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8001494c:	ee fa ff f4 	ld.w	r10,r7[-12]
80014950:	30 0b       	mov	r11,0
80014952:	ee fc ff fc 	ld.w	r12,r7[-4]
80014956:	f0 16 00 31 	mcall	r6[196]
8001495a:	c0 98       	rjmp	8001496c <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8001495c:	ee fa ff f4 	ld.w	r10,r7[-12]
80014960:	ee fb ff f8 	ld.w	r11,r7[-8]
80014964:	ee fc ff fc 	ld.w	r12,r7[-4]
80014968:	f0 16 00 21 	mcall	r6[132]
	}
}
8001496c:	2f dd       	sub	sp,-12
8001496e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014972:	00 00       	add	r0,r0
80014974:	80 01       	ld.sh	r1,r0[0x0]
80014976:	47 ba       	lddsp	r10,sp[0x1ec]

80014978 <init_nav>:

central_data_t *centralData;
float alt_integrator;

void init_nav()
{
80014978:	eb cd 40 c0 	pushm	r6-r7,lr
8001497c:	1a 97       	mov	r7,sp
8001497e:	20 1d       	sub	sp,4
80014980:	49 46       	lddpc	r6,800149d0 <init_nav+0x58>
80014982:	1e 26       	rsub	r6,pc
	int8_t i;
	
	centralData = get_central_data();
80014984:	f0 16 00 33 	mcall	r6[204]
80014988:	18 99       	mov	r9,r12
8001498a:	ec f8 00 00 	ld.w	r8,r6[0]
8001498e:	91 09       	st.w	r8[0x0],r9
	
	centralData->controls_nav.tvel[X] = 0.0;
80014990:	ec f8 00 00 	ld.w	r8,r6[0]
80014994:	70 08       	ld.w	r8,r8[0x0]
80014996:	30 09       	mov	r9,0
80014998:	f1 49 01 84 	st.w	r8[388],r9
	centralData->controls_nav.tvel[Y] = 0.0;
8001499c:	ec f8 00 00 	ld.w	r8,r6[0]
800149a0:	70 08       	ld.w	r8,r8[0x0]
800149a2:	30 09       	mov	r9,0
800149a4:	f1 49 01 88 	st.w	r8[392],r9
	centralData->controls_nav.rpy[YAW] = 0.0;
800149a8:	ec f8 00 00 	ld.w	r8,r6[0]
800149ac:	70 08       	ld.w	r8,r8[0x0]
800149ae:	30 09       	mov	r9,0
800149b0:	f1 49 01 7c 	st.w	r8[380],r9
	centralData->controls_nav.tvel[Z] = 0.0; //centralData->controls.thrust;
800149b4:	ec f8 00 00 	ld.w	r8,r6[0]
800149b8:	70 08       	ld.w	r8,r8[0x0]
800149ba:	30 09       	mov	r9,0
800149bc:	f1 49 01 8c 	st.w	r8[396],r9
	
	alt_integrator = 0.0;
800149c0:	ec f8 07 80 	ld.w	r8,r6[1920]
800149c4:	30 09       	mov	r9,0
800149c6:	91 09       	st.w	r8[0x0],r9
}
800149c8:	2f fd       	sub	sp,-4
800149ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800149ce:	00 00       	add	r0,r0
800149d0:	80 01       	ld.sh	r1,r0[0x0]
800149d2:	48 06       	lddpc	r6,800149d0 <init_nav+0x58>

800149d4 <run_navigation>:


void run_navigation(local_coordinates_t waypoint_input)
{
800149d4:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800149d8:	1a 97       	mov	r7,sp
800149da:	20 8d       	sub	sp,32
800149dc:	49 26       	lddpc	r6,80014a24 <run_navigation+0x50>
800149de:	1e 26       	rsub	r6,pc
800149e0:	ee c5 ff ec 	sub	r5,r7,-20
	float newVelocity[3];
	
	float rel_pos[3], dist2wp_sqr;
	
	// Control in translational speed of the platform
	centralData->dist2wp_sqr = set_rel_pos_n_dist2wp(waypoint_input.pos, rel_pos);
800149e4:	ec f8 00 00 	ld.w	r8,r6[0]
800149e8:	70 03       	ld.w	r3,r8[0x0]
800149ea:	ee c8 00 20 	sub	r8,r7,32
800149ee:	10 9b       	mov	r11,r8
800149f0:	0a 9c       	mov	r12,r5
800149f2:	f0 16 01 a1 	mcall	r6[1668]
800149f6:	18 98       	mov	r8,r12
800149f8:	e7 48 10 b0 	st.w	r3[4272],r8
	set_speed_command(rel_pos,centralData->dist2wp_sqr);
800149fc:	ec f8 00 00 	ld.w	r8,r6[0]
80014a00:	70 08       	ld.w	r8,r8[0x0]
80014a02:	f0 f9 10 b0 	ld.w	r9,r8[4272]
80014a06:	ee c8 00 20 	sub	r8,r7,32
80014a0a:	12 9b       	mov	r11,r9
80014a0c:	10 9c       	mov	r12,r8
80014a0e:	f0 16 01 52 	mcall	r6[1352]
	
	centralData->controls_nav.theading=waypoint_input.heading;
80014a12:	ec f8 00 00 	ld.w	r8,r6[0]
80014a16:	70 08       	ld.w	r8,r8[0x0]
80014a18:	6a 39       	ld.w	r9,r5[0xc]
80014a1a:	f1 49 01 90 	st.w	r8[400],r9
}
80014a1e:	2f 8d       	sub	sp,-32
80014a20:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80014a24:	80 01       	ld.sh	r1,r0[0x0]
80014a26:	48 62       	lddpc	r2,80014a3c <set_rel_pos_n_dist2wp+0x14>

80014a28 <set_rel_pos_n_dist2wp>:

float set_rel_pos_n_dist2wp(float waypointPos[], float rel_pos[])
{
80014a28:	eb cd 40 c0 	pushm	r6-r7,lr
80014a2c:	1a 97       	mov	r7,sp
80014a2e:	20 3d       	sub	sp,12
80014a30:	49 f6       	lddpc	r6,80014aac <set_rel_pos_n_dist2wp+0x84>
80014a32:	1e 26       	rsub	r6,pc
80014a34:	ef 4c ff f8 	st.w	r7[-8],r12
80014a38:	ef 4b ff f4 	st.w	r7[-12],r11
	float dist2wp_sqr;
	
	rel_pos[X] = (float)(waypointPos[X] - centralData->position_estimator.localPosition.pos[X]);
80014a3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014a40:	70 09       	ld.w	r9,r8[0x0]
80014a42:	ec f8 00 00 	ld.w	r8,r6[0]
80014a46:	70 08       	ld.w	r8,r8[0x0]
80014a48:	f0 f8 0d 9c 	ld.w	r8,r8[3484]
80014a4c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80014a50:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014a54:	91 09       	st.w	r8[0x0],r9
	rel_pos[Y] = (float)(waypointPos[Y] - centralData->position_estimator.localPosition.pos[Y]);
80014a56:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014a5a:	2f c8       	sub	r8,-4
80014a5c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014a60:	2f c9       	sub	r9,-4
80014a62:	72 0a       	ld.w	r10,r9[0x0]
80014a64:	ec f9 00 00 	ld.w	r9,r6[0]
80014a68:	72 09       	ld.w	r9,r9[0x0]
80014a6a:	f2 f9 0d a0 	ld.w	r9,r9[3488]
80014a6e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80014a72:	91 09       	st.w	r8[0x0],r9
	rel_pos[Z] = (float)(waypointPos[Z] - centralData->position_estimator.localPosition.pos[Z]);
80014a74:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014a78:	2f 88       	sub	r8,-8
80014a7a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014a7e:	2f 89       	sub	r9,-8
80014a80:	72 0a       	ld.w	r10,r9[0x0]
80014a82:	ec f9 00 00 	ld.w	r9,r6[0]
80014a86:	72 09       	ld.w	r9,r9[0x0]
80014a88:	f2 f9 0d a4 	ld.w	r9,r9[3492]
80014a8c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80014a90:	91 09       	st.w	r8[0x0],r9
	
	dist2wp_sqr = vector_norm_sqr(rel_pos);
80014a92:	ee fc ff f4 	ld.w	r12,r7[-12]
80014a96:	c9 7e       	rcall	800147c4 <vector_norm_sqr>
80014a98:	18 98       	mov	r8,r12
80014a9a:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return dist2wp_sqr;
80014a9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80014aa2:	10 9c       	mov	r12,r8
80014aa4:	2f dd       	sub	sp,-12
80014aa6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014aaa:	00 00       	add	r0,r0
80014aac:	80 01       	ld.sh	r1,r0[0x0]
80014aae:	48 b6       	lddpc	r6,80014ad8 <set_speed_command+0x28>

80014ab0 <set_speed_command>:

void set_speed_command(float rel_pos[], float dist2wpSqr)
{
80014ab0:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80014ab4:	1a 97       	mov	r7,sp
80014ab6:	21 7d       	sub	sp,92
80014ab8:	fe f6 02 f0 	ld.w	r6,pc[752]
80014abc:	1e 26       	rsub	r6,pc
80014abe:	ef 4c ff a8 	st.w	r7[-88],r12
80014ac2:	ef 4b ff a4 	st.w	r7[-92],r11
	
	float dir_desired_bf[3], dir_desired[3], new_velocity[3];
	
	float rel_heading;
	
	norm_rel_dist = sqrt(dist2wpSqr);
80014ac6:	ee fc ff a4 	ld.w	r12,r7[-92]
80014aca:	f0 16 00 02 	mcall	r6[8]
80014ace:	14 98       	mov	r8,r10
80014ad0:	16 99       	mov	r9,r11
80014ad2:	10 9a       	mov	r10,r8
80014ad4:	12 9b       	mov	r11,r9
80014ad6:	f0 16 00 6b 	mcall	r6[428]
80014ada:	14 98       	mov	r8,r10
80014adc:	16 99       	mov	r9,r11
80014ade:	10 9a       	mov	r10,r8
80014ae0:	12 9b       	mov	r11,r9
80014ae2:	f0 16 00 09 	mcall	r6[36]
80014ae6:	18 98       	mov	r8,r12
80014ae8:	ef 48 ff f4 	st.w	r7[-12],r8
	
	if (norm_rel_dist < 0.0005)
80014aec:	ee fc ff f4 	ld.w	r12,r7[-12]
80014af0:	f0 16 00 02 	mcall	r6[8]
80014af4:	30 05       	mov	r5,0
80014af6:	e0 68 a9 fc 	mov	r8,43516
80014afa:	ea 18 d2 f1 	orh	r8,0xd2f1
80014afe:	e0 69 62 4d 	mov	r9,25165
80014b02:	ea 19 3f 40 	orh	r9,0x3f40
80014b06:	f0 16 00 1d 	mcall	r6[116]
80014b0a:	18 98       	mov	r8,r12
80014b0c:	58 08       	cp.w	r8,0
80014b0e:	c0 20       	breq	80014b12 <set_speed_command+0x62>
80014b10:	30 15       	mov	r5,1
80014b12:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80014b16:	c1 80       	breq	80014b46 <set_speed_command+0x96>
	{
		norm_rel_dist += 0.0005;
80014b18:	ee fc ff f4 	ld.w	r12,r7[-12]
80014b1c:	f0 16 00 02 	mcall	r6[8]
80014b20:	e0 68 a9 fc 	mov	r8,43516
80014b24:	ea 18 d2 f1 	orh	r8,0xd2f1
80014b28:	e0 69 62 4d 	mov	r9,25165
80014b2c:	ea 19 3f 40 	orh	r9,0x3f40
80014b30:	f0 16 00 05 	mcall	r6[20]
80014b34:	14 98       	mov	r8,r10
80014b36:	16 99       	mov	r9,r11
80014b38:	10 9a       	mov	r10,r8
80014b3a:	12 9b       	mov	r11,r9
80014b3c:	f0 16 00 09 	mcall	r6[36]
80014b40:	18 98       	mov	r8,r12
80014b42:	ef 48 ff f4 	st.w	r7[-12],r8
	

	
	// calculate dir_desired in local frame
	// vel = qe-1 * rel_pos * qe
	qtmp1 = quat_from_vector(rel_pos);
80014b46:	ee c8 00 20 	sub	r8,r7,32
80014b4a:	ee fb ff a8 	ld.w	r11,r7[-88]
80014b4e:	10 9c       	mov	r12,r8
80014b50:	fe b0 fc a8 	rcall	800144a0 <quat_from_vector>
	//qtmp1.s= 0.0; qtmp1.v[0]=dir_desired[0]; qtmp1.v[1]=dir_desired[1]; qtmp1.v[2]=dir_desired[2];
	qtmp2 = quat_global_to_local(centralData->imu1.attitude.qe,qtmp1);
80014b54:	ec f8 00 00 	ld.w	r8,r6[0]
80014b58:	70 0b       	ld.w	r11,r8[0x0]
80014b5a:	ee ca 00 30 	sub	r10,r7,48
80014b5e:	20 4d       	sub	sp,16
80014b60:	1a 98       	mov	r8,sp
80014b62:	ee c9 00 20 	sub	r9,r7,32
80014b66:	20 08       	sub	r8,0
80014b68:	20 09       	sub	r9,0
80014b6a:	72 0c       	ld.w	r12,r9[0x0]
80014b6c:	91 0c       	st.w	r8[0x0],r12
80014b6e:	72 1c       	ld.w	r12,r9[0x4]
80014b70:	91 1c       	st.w	r8[0x4],r12
80014b72:	72 2c       	ld.w	r12,r9[0x8]
80014b74:	91 2c       	st.w	r8[0x8],r12
80014b76:	72 39       	ld.w	r9,r9[0xc]
80014b78:	91 39       	st.w	r8[0xc],r9
80014b7a:	20 4d       	sub	sp,16
80014b7c:	1a 98       	mov	r8,sp
80014b7e:	16 99       	mov	r9,r11
80014b80:	20 08       	sub	r8,0
80014b82:	20 09       	sub	r9,0
80014b84:	72 0b       	ld.w	r11,r9[0x0]
80014b86:	91 0b       	st.w	r8[0x0],r11
80014b88:	72 1b       	ld.w	r11,r9[0x4]
80014b8a:	91 1b       	st.w	r8[0x4],r11
80014b8c:	72 2b       	ld.w	r11,r9[0x8]
80014b8e:	91 2b       	st.w	r8[0x8],r11
80014b90:	72 39       	ld.w	r9,r9[0xc]
80014b92:	91 39       	st.w	r8[0xc],r9
80014b94:	14 9c       	mov	r12,r10
80014b96:	fe b0 fd 99 	rcall	800146c8 <quat_global_to_local>
80014b9a:	2f 8d       	sub	sp,-32
	dir_desired_bf[0] = qtmp2.v[0]; dir_desired_bf[1] = qtmp2.v[1]; dir_desired_bf[2] = qtmp2.v[2];
80014b9c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80014ba0:	ef 48 ff c4 	st.w	r7[-60],r8
80014ba4:	ee f8 ff d8 	ld.w	r8,r7[-40]
80014ba8:	ef 48 ff c8 	st.w	r7[-56],r8
80014bac:	ee f8 ff dc 	ld.w	r8,r7[-36]
80014bb0:	ef 48 ff cc 	st.w	r7[-52],r8
	
	// experimental: Z-axis in velocity mode is in global frame...
	dir_desired_bf[2] = rel_pos[2];
80014bb4:	ee f8 ff a8 	ld.w	r8,r7[-88]
80014bb8:	2f 88       	sub	r8,-8
80014bba:	70 08       	ld.w	r8,r8[0x0]
80014bbc:	ef 48 ff cc 	st.w	r7[-52],r8
	
	v_desired = f_min(V_CRUISE,(center_window_2(rel_heading) * DIST_2_VEL_GAIN * norm_rel_dist));
80014bc0:	ee fc ff fc 	ld.w	r12,r7[-4]
80014bc4:	c5 4e       	rcall	8001486c <center_window_2>
80014bc6:	18 98       	mov	r8,r12
80014bc8:	10 9c       	mov	r12,r8
80014bca:	f0 16 00 02 	mcall	r6[8]
80014bce:	e0 68 33 33 	mov	r8,13107
80014bd2:	ea 18 33 33 	orh	r8,0x3333
80014bd6:	e0 69 33 33 	mov	r9,13107
80014bda:	ea 19 3f d3 	orh	r9,0x3fd3
80014bde:	f0 16 00 03 	mcall	r6[12]
80014be2:	14 98       	mov	r8,r10
80014be4:	16 99       	mov	r9,r11
80014be6:	10 92       	mov	r2,r8
80014be8:	12 93       	mov	r3,r9
80014bea:	ee fc ff f4 	ld.w	r12,r7[-12]
80014bee:	f0 16 00 02 	mcall	r6[8]
80014bf2:	14 98       	mov	r8,r10
80014bf4:	16 99       	mov	r9,r11
80014bf6:	04 9a       	mov	r10,r2
80014bf8:	06 9b       	mov	r11,r3
80014bfa:	f0 16 00 03 	mcall	r6[12]
80014bfe:	14 98       	mov	r8,r10
80014c00:	16 99       	mov	r9,r11
80014c02:	10 9a       	mov	r10,r8
80014c04:	12 9b       	mov	r11,r9
80014c06:	f0 16 00 09 	mcall	r6[36]
80014c0a:	18 98       	mov	r8,r12
80014c0c:	10 9b       	mov	r11,r8
80014c0e:	fc 1c 40 40 	movh	r12,0x4040
80014c12:	c0 ee       	rcall	8001482e <f_min>
80014c14:	18 98       	mov	r8,r12
80014c16:	ef 48 ff f8 	st.w	r7[-8],r8
	
	if (v_desired *  f_abs(dir_desired_bf[Z]) > MAX_CLIMB_RATE * norm_rel_dist ) {
80014c1a:	ee f8 ff cc 	ld.w	r8,r7[-52]
80014c1e:	10 9c       	mov	r12,r8
80014c20:	fe b0 fd ea 	rcall	800147f4 <f_abs>
80014c24:	18 99       	mov	r9,r12
80014c26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014c2a:	e5 a2 0a 98 	cop	cp0,cr10,cr9,cr8,0x44
80014c2e:	30 18       	mov	r8,1
80014c30:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014c34:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80014c38:	e0 8c 00 04 	brvs	80014c40 <set_speed_command+0x190>
80014c3c:	e0 89 00 03 	brgt	80014c42 <set_speed_command+0x192>
80014c40:	30 08       	mov	r8,0
80014c42:	5c 58       	castu.b	r8
80014c44:	c0 f0       	breq	80014c62 <set_speed_command+0x1b2>
		v_desired = MAX_CLIMB_RATE * norm_rel_dist /f_abs(dir_desired_bf[Z]);
80014c46:	ee f8 ff cc 	ld.w	r8,r7[-52]
80014c4a:	10 9c       	mov	r12,r8
80014c4c:	fe b0 fd d4 	rcall	800147f4 <f_abs>
80014c50:	18 98       	mov	r8,r12
80014c52:	10 9b       	mov	r11,r8
80014c54:	ee fc ff f4 	ld.w	r12,r7[-12]
80014c58:	f0 16 00 08 	mcall	r6[32]
80014c5c:	18 98       	mov	r8,r12
80014c5e:	ef 48 ff f8 	st.w	r7[-8],r8
	}
	
	dir_desired_bf[X] = v_desired * dir_desired_bf[X] / norm_rel_dist;
80014c62:	ee f9 ff c4 	ld.w	r9,r7[-60]
80014c66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014c6a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80014c6e:	ee fb ff f4 	ld.w	r11,r7[-12]
80014c72:	10 9c       	mov	r12,r8
80014c74:	f0 16 00 08 	mcall	r6[32]
80014c78:	18 98       	mov	r8,r12
80014c7a:	ef 48 ff c4 	st.w	r7[-60],r8
	dir_desired_bf[Y] = v_desired * dir_desired_bf[Y] / norm_rel_dist;
80014c7e:	ee f9 ff c8 	ld.w	r9,r7[-56]
80014c82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014c86:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80014c8a:	ee fb ff f4 	ld.w	r11,r7[-12]
80014c8e:	10 9c       	mov	r12,r8
80014c90:	f0 16 00 08 	mcall	r6[32]
80014c94:	18 98       	mov	r8,r12
80014c96:	ef 48 ff c8 	st.w	r7[-56],r8
	dir_desired_bf[Z] = v_desired * dir_desired_bf[Z] / norm_rel_dist;
80014c9a:	ee f9 ff cc 	ld.w	r9,r7[-52]
80014c9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014ca2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80014ca6:	ee fb ff f4 	ld.w	r11,r7[-12]
80014caa:	10 9c       	mov	r12,r8
80014cac:	f0 16 00 08 	mcall	r6[32]
80014cb0:	18 98       	mov	r8,r12
80014cb2:	ef 48 ff cc 	st.w	r7[-52],r8
	//}else{
		//high_speed_nav(dir_desired_bf,centralData->imu1.attitude);
	//}
	
	
	for (i=0;i<3;i++)
80014cb6:	30 08       	mov	r8,0
80014cb8:	ef 68 ff f3 	st.b	r7[-13],r8
80014cbc:	c1 58       	rjmp	80014ce6 <set_speed_command+0x236>
	{
		new_velocity[i] = dir_desired_bf[i];
80014cbe:	ef 3a ff f3 	ld.ub	r10,r7[-13]
80014cc2:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80014cc6:	a3 68       	lsl	r8,0x2
80014cc8:	ee 08 00 08 	add	r8,r7,r8
80014ccc:	f0 f9 ff c4 	ld.w	r9,r8[-60]
80014cd0:	f4 08 15 02 	lsl	r8,r10,0x2
80014cd4:	ee 08 00 08 	add	r8,r7,r8
80014cd8:	f1 49 ff ac 	st.w	r8[-84],r9
	//}else{
		//high_speed_nav(dir_desired_bf,centralData->imu1.attitude);
	//}
	
	
	for (i=0;i<3;i++)
80014cdc:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80014ce0:	2f f8       	sub	r8,-1
80014ce2:	ef 68 ff f3 	st.b	r7[-13],r8
80014ce6:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80014cea:	30 28       	mov	r8,2
80014cec:	f0 09 18 00 	cp.b	r9,r8
80014cf0:	fe 98 ff e7 	brls	80014cbe <set_speed_command+0x20e>
	{
		new_velocity[i] = dir_desired_bf[i];
	}
	if (centralData->collision_avoidance)
80014cf4:	ec f8 00 00 	ld.w	r8,r6[0]
80014cf8:	70 08       	ld.w	r8,r8[0x0]
80014cfa:	f1 38 10 bb 	ld.ub	r8,r8[4283]
80014cfe:	58 08       	cp.w	r8,0
80014d00:	c0 90       	breq	80014d12 <set_speed_command+0x262>
	{
		computeNewVelocity(dir_desired_bf,new_velocity);
80014d02:	ee c9 00 54 	sub	r9,r7,84
80014d06:	ee c8 00 3c 	sub	r8,r7,60
80014d0a:	12 9b       	mov	r11,r9
80014d0c:	10 9c       	mov	r12,r8
80014d0e:	f0 16 01 9a 	mcall	r6[1640]
	}

	rel_heading= atan2(new_velocity[Y],new_velocity[X]);
80014d12:	ee f8 ff ac 	ld.w	r8,r7[-84]
80014d16:	10 9c       	mov	r12,r8
80014d18:	f0 16 00 02 	mcall	r6[8]
80014d1c:	14 92       	mov	r2,r10
80014d1e:	16 93       	mov	r3,r11
80014d20:	ee f8 ff b0 	ld.w	r8,r7[-80]
80014d24:	10 9c       	mov	r12,r8
80014d26:	f0 16 00 02 	mcall	r6[8]
80014d2a:	04 98       	mov	r8,r2
80014d2c:	06 99       	mov	r9,r3
80014d2e:	f0 16 00 52 	mcall	r6[328]
80014d32:	14 98       	mov	r8,r10
80014d34:	16 99       	mov	r9,r11
80014d36:	10 9a       	mov	r10,r8
80014d38:	12 9b       	mov	r11,r9
80014d3a:	f0 16 00 09 	mcall	r6[36]
80014d3e:	18 98       	mov	r8,r12
80014d40:	ef 48 ff fc 	st.w	r7[-4],r8

	centralData->controls_nav.tvel[X] = new_velocity[X];
80014d44:	ec f8 00 00 	ld.w	r8,r6[0]
80014d48:	70 08       	ld.w	r8,r8[0x0]
80014d4a:	ee f9 ff ac 	ld.w	r9,r7[-84]
80014d4e:	f1 49 01 84 	st.w	r8[388],r9
	centralData->controls_nav.tvel[Y] = new_velocity[Y];
80014d52:	ec f8 00 00 	ld.w	r8,r6[0]
80014d56:	70 08       	ld.w	r8,r8[0x0]
80014d58:	ee f9 ff b0 	ld.w	r9,r7[-80]
80014d5c:	f1 49 01 88 	st.w	r8[392],r9
	centralData->controls_nav.tvel[Z] = new_velocity[Z];		
80014d60:	ec f8 00 00 	ld.w	r8,r6[0]
80014d64:	70 08       	ld.w	r8,r8[0x0]
80014d66:	ee f9 ff b4 	ld.w	r9,r7[-76]
80014d6a:	f1 49 01 8c 	st.w	r8[396],r9
	centralData->controls_nav.rpy[YAW] = KP_YAW * rel_heading;
80014d6e:	ec f8 00 00 	ld.w	r8,r6[0]
80014d72:	70 05       	ld.w	r5,r8[0x0]
80014d74:	ee fc ff fc 	ld.w	r12,r7[-4]
80014d78:	f0 16 00 02 	mcall	r6[8]
80014d7c:	e0 68 99 9a 	mov	r8,39322
80014d80:	ea 18 99 99 	orh	r8,0x9999
80014d84:	e0 69 99 99 	mov	r9,39321
80014d88:	ea 19 3f c9 	orh	r9,0x3fc9
80014d8c:	f0 16 00 03 	mcall	r6[12]
80014d90:	14 98       	mov	r8,r10
80014d92:	16 99       	mov	r9,r11
80014d94:	10 9a       	mov	r10,r8
80014d96:	12 9b       	mov	r11,r9
80014d98:	f0 16 00 09 	mcall	r6[36]
80014d9c:	18 98       	mov	r8,r12
80014d9e:	eb 48 01 7c 	st.w	r5[380],r8

	//low_speed_nav(dir_desired_bf,centralData->imu1.attitude,norm_rel_dist);

}
80014da2:	2e 9d       	sub	sp,-92
80014da4:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80014da8:	80 01       	ld.sh	r1,r0[0x0]
80014daa:	49 40       	lddpc	r0,80014df8 <low_speed_nav+0x4c>

80014dac <low_speed_nav>:

void low_speed_nav(float dir_desired_bf[], Quat_Attitude_t attitude, float rel_distance)
{
80014dac:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80014db0:	1a 97       	mov	r7,sp
80014db2:	20 4d       	sub	sp,16
80014db4:	4f 06       	lddpc	r6,80014f74 <low_speed_nav+0x1c8>
80014db6:	1e 26       	rsub	r6,pc
80014db8:	ef 4c ff f4 	st.w	r7[-12],r12
80014dbc:	ef 4b ff f0 	st.w	r7[-16],r11
	// dbg_print("Low speed nav\n");
	
	float yaw_angle_tolerance = PI/10.0;
80014dc0:	e0 68 d9 7c 	mov	r8,55676
80014dc4:	ea 18 3e a0 	orh	r8,0x3ea0
80014dc8:	ef 48 ff f8 	st.w	r7[-8],r8
	
	if ((f_abs(dir_desired_bf[X]) < 0.001 && f_abs(dir_desired_bf[Y]) < 0.001) || centralData->waypoint_hold_init || (rel_distance<=5.0))
80014dcc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014dd0:	70 08       	ld.w	r8,r8[0x0]
80014dd2:	10 9c       	mov	r12,r8
80014dd4:	fe b0 fd 10 	rcall	800147f4 <f_abs>
80014dd8:	18 98       	mov	r8,r12
80014dda:	10 9c       	mov	r12,r8
80014ddc:	f0 16 00 02 	mcall	r6[8]
80014de0:	30 05       	mov	r5,0
80014de2:	e0 68 a9 fc 	mov	r8,43516
80014de6:	ea 18 d2 f1 	orh	r8,0xd2f1
80014dea:	e0 69 62 4d 	mov	r9,25165
80014dee:	ea 19 3f 50 	orh	r9,0x3f50
80014df2:	f0 16 00 1d 	mcall	r6[116]
80014df6:	18 98       	mov	r8,r12
80014df8:	58 08       	cp.w	r8,0
80014dfa:	c0 20       	breq	80014dfe <low_speed_nav+0x52>
80014dfc:	30 15       	mov	r5,1
80014dfe:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80014e02:	c1 e0       	breq	80014e3e <low_speed_nav+0x92>
80014e04:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014e08:	2f c8       	sub	r8,-4
80014e0a:	70 08       	ld.w	r8,r8[0x0]
80014e0c:	10 9c       	mov	r12,r8
80014e0e:	fe b0 fc f3 	rcall	800147f4 <f_abs>
80014e12:	18 98       	mov	r8,r12
80014e14:	10 9c       	mov	r12,r8
80014e16:	f0 16 00 02 	mcall	r6[8]
80014e1a:	30 05       	mov	r5,0
80014e1c:	e0 68 a9 fc 	mov	r8,43516
80014e20:	ea 18 d2 f1 	orh	r8,0xd2f1
80014e24:	e0 69 62 4d 	mov	r9,25165
80014e28:	ea 19 3f 50 	orh	r9,0x3f50
80014e2c:	f0 16 00 1d 	mcall	r6[116]
80014e30:	18 98       	mov	r8,r12
80014e32:	58 08       	cp.w	r8,0
80014e34:	c0 20       	breq	80014e38 <low_speed_nav+0x8c>
80014e36:	30 15       	mov	r5,1
80014e38:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80014e3c:	c1 61       	brne	80014e68 <low_speed_nav+0xbc>
80014e3e:	ec f8 00 00 	ld.w	r8,r6[0]
80014e42:	70 08       	ld.w	r8,r8[0x0]
80014e44:	f1 38 10 b7 	ld.ub	r8,r8[4279]
80014e48:	58 08       	cp.w	r8,0
80014e4a:	c0 f1       	brne	80014e68 <low_speed_nav+0xbc>
80014e4c:	30 18       	mov	r8,1
80014e4e:	ee fa ff f0 	ld.w	r10,r7[-16]
80014e52:	fc 19 40 a0 	movh	r9,0x40a0
80014e56:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80014e5a:	e0 8c 00 04 	brvs	80014e62 <low_speed_nav+0xb6>
80014e5e:	e0 8a 00 03 	brle	80014e64 <low_speed_nav+0xb8>
80014e62:	30 08       	mov	r8,0
80014e64:	5c 58       	castu.b	r8
80014e66:	c1 90       	breq	80014e98 <low_speed_nav+0xec>
	{
		centralData->controls_nav.rpy[YAW] = 0.0;
80014e68:	ec f8 00 00 	ld.w	r8,r6[0]
80014e6c:	70 08       	ld.w	r8,r8[0x0]
80014e6e:	30 09       	mov	r9,0
80014e70:	f1 49 01 7c 	st.w	r8[380],r9
		centralData->controls_nav.tvel[X] = dir_desired_bf[X];
80014e74:	ec f8 00 00 	ld.w	r8,r6[0]
80014e78:	70 08       	ld.w	r8,r8[0x0]
80014e7a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014e7e:	72 09       	ld.w	r9,r9[0x0]
80014e80:	f1 49 01 84 	st.w	r8[388],r9
		centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
80014e84:	ec f8 00 00 	ld.w	r8,r6[0]
80014e88:	70 08       	ld.w	r8,r8[0x0]
80014e8a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014e8e:	2f c9       	sub	r9,-4
80014e90:	72 09       	ld.w	r9,r9[0x0]
80014e92:	f1 49 01 88 	st.w	r8[392],r9
{
	// dbg_print("Low speed nav\n");
	
	float yaw_angle_tolerance = PI/10.0;
	
	if ((f_abs(dir_desired_bf[X]) < 0.001 && f_abs(dir_desired_bf[Y]) < 0.001) || centralData->waypoint_hold_init || (rel_distance<=5.0))
80014e96:	c6 28       	rjmp	80014f5a <low_speed_nav+0x1ae>
	{
		centralData->controls_nav.rpy[YAW] = 0.0;
		centralData->controls_nav.tvel[X] = dir_desired_bf[X];
		centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
	}else{
		float rel_heading = atan2(dir_desired_bf[Y],dir_desired_bf[X]);
80014e98:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014e9c:	70 08       	ld.w	r8,r8[0x0]
80014e9e:	10 9c       	mov	r12,r8
80014ea0:	f0 16 00 02 	mcall	r6[8]
80014ea4:	14 92       	mov	r2,r10
80014ea6:	16 93       	mov	r3,r11
80014ea8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014eac:	2f c8       	sub	r8,-4
80014eae:	70 08       	ld.w	r8,r8[0x0]
80014eb0:	10 9c       	mov	r12,r8
80014eb2:	f0 16 00 02 	mcall	r6[8]
80014eb6:	04 98       	mov	r8,r2
80014eb8:	06 99       	mov	r9,r3
80014eba:	f0 16 00 52 	mcall	r6[328]
80014ebe:	14 98       	mov	r8,r10
80014ec0:	16 99       	mov	r9,r11
80014ec2:	10 9a       	mov	r10,r8
80014ec4:	12 9b       	mov	r11,r9
80014ec6:	f0 16 00 09 	mcall	r6[36]
80014eca:	18 98       	mov	r8,r12
80014ecc:	ef 48 ff fc 	st.w	r7[-4],r8
		
		if (rel_heading >= yaw_angle_tolerance)
80014ed0:	30 18       	mov	r8,1
80014ed2:	ee fa ff fc 	ld.w	r10,r7[-4]
80014ed6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014eda:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80014ede:	e0 8c 00 03 	brvs	80014ee4 <low_speed_nav+0x138>
80014ee2:	c0 24       	brge	80014ee6 <low_speed_nav+0x13a>
80014ee4:	30 08       	mov	r8,0
80014ee6:	5c 58       	castu.b	r8
80014ee8:	c0 e0       	breq	80014f04 <low_speed_nav+0x158>
		{
			centralData->controls_nav.tvel[X] = 0.0;
80014eea:	ec f8 00 00 	ld.w	r8,r6[0]
80014eee:	70 08       	ld.w	r8,r8[0x0]
80014ef0:	30 09       	mov	r9,0
80014ef2:	f1 49 01 84 	st.w	r8[388],r9
			centralData->controls_nav.tvel[Y] = 0.0;
80014ef6:	ec f8 00 00 	ld.w	r8,r6[0]
80014efa:	70 08       	ld.w	r8,r8[0x0]
80014efc:	30 09       	mov	r9,0
80014efe:	f1 49 01 88 	st.w	r8[392],r9
80014f02:	c1 28       	rjmp	80014f26 <low_speed_nav+0x17a>
		}else{
			centralData->controls_nav.tvel[X] = dir_desired_bf[X];
80014f04:	ec f8 00 00 	ld.w	r8,r6[0]
80014f08:	70 08       	ld.w	r8,r8[0x0]
80014f0a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014f0e:	72 09       	ld.w	r9,r9[0x0]
80014f10:	f1 49 01 84 	st.w	r8[388],r9
			centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
80014f14:	ec f8 00 00 	ld.w	r8,r6[0]
80014f18:	70 08       	ld.w	r8,r8[0x0]
80014f1a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014f1e:	2f c9       	sub	r9,-4
80014f20:	72 09       	ld.w	r9,r9[0x0]
80014f22:	f1 49 01 88 	st.w	r8[392],r9
		}
		
		centralData->controls_nav.rpy[YAW] = KP_YAW * rel_heading;
80014f26:	ec f8 00 00 	ld.w	r8,r6[0]
80014f2a:	70 05       	ld.w	r5,r8[0x0]
80014f2c:	ee fc ff fc 	ld.w	r12,r7[-4]
80014f30:	f0 16 00 02 	mcall	r6[8]
80014f34:	e0 68 99 9a 	mov	r8,39322
80014f38:	ea 18 99 99 	orh	r8,0x9999
80014f3c:	e0 69 99 99 	mov	r9,39321
80014f40:	ea 19 3f c9 	orh	r9,0x3fc9
80014f44:	f0 16 00 03 	mcall	r6[12]
80014f48:	14 98       	mov	r8,r10
80014f4a:	16 99       	mov	r9,r11
80014f4c:	10 9a       	mov	r10,r8
80014f4e:	12 9b       	mov	r11,r9
80014f50:	f0 16 00 09 	mcall	r6[36]
80014f54:	18 98       	mov	r8,r12
80014f56:	eb 48 01 7c 	st.w	r5[380],r8
	}

	centralData->controls_nav.tvel[Z] = dir_desired_bf[Z];
80014f5a:	ec f8 00 00 	ld.w	r8,r6[0]
80014f5e:	70 08       	ld.w	r8,r8[0x0]
80014f60:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014f64:	2f 89       	sub	r9,-8
80014f66:	72 09       	ld.w	r9,r9[0x0]
80014f68:	f1 49 01 8c 	st.w	r8[396],r9
}
80014f6c:	2f cd       	sub	sp,-16
80014f6e:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80014f72:	00 00       	add	r0,r0
80014f74:	80 01       	ld.sh	r1,r0[0x0]
80014f76:	4c 3a       	lddpc	r10,80015080 <interpolate+0x60>

80014f78 <high_speed_nav>:

void high_speed_nav(float dir_desired_bf[], Quat_Attitude_t attitude)
{
80014f78:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80014f7c:	1a 97       	mov	r7,sp
80014f7e:	20 1d       	sub	sp,4
80014f80:	4a 76       	lddpc	r6,8001501c <high_speed_nav+0xa4>
80014f82:	1e 26       	rsub	r6,pc
80014f84:	ef 4c ff fc 	st.w	r7[-4],r12
	//dbg_print("High speed nav\n");
	
	centralData->controls_nav.tvel[X] = dir_desired_bf[X];
80014f88:	ec f8 00 00 	ld.w	r8,r6[0]
80014f8c:	70 08       	ld.w	r8,r8[0x0]
80014f8e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014f92:	72 09       	ld.w	r9,r9[0x0]
80014f94:	f1 49 01 84 	st.w	r8[388],r9
	centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
80014f98:	ec f8 00 00 	ld.w	r8,r6[0]
80014f9c:	70 08       	ld.w	r8,r8[0x0]
80014f9e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014fa2:	2f c9       	sub	r9,-4
80014fa4:	72 09       	ld.w	r9,r9[0x0]
80014fa6:	f1 49 01 88 	st.w	r8[392],r9
	centralData->controls_nav.tvel[Z] = dir_desired_bf[Z];
80014faa:	ec f8 00 00 	ld.w	r8,r6[0]
80014fae:	70 08       	ld.w	r8,r8[0x0]
80014fb0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014fb4:	2f 89       	sub	r9,-8
80014fb6:	72 09       	ld.w	r9,r9[0x0]
80014fb8:	f1 49 01 8c 	st.w	r8[396],r9
	centralData->controls_nav.rpy[YAW] = KP_YAW * atan2(centralData->position_estimator.vel_bf[Y], centralData->position_estimator.vel_bf[X]);
80014fbc:	ec f8 00 00 	ld.w	r8,r6[0]
80014fc0:	70 05       	ld.w	r5,r8[0x0]
80014fc2:	ec f8 00 00 	ld.w	r8,r6[0]
80014fc6:	70 08       	ld.w	r8,r8[0x0]
80014fc8:	f0 f8 0d 68 	ld.w	r8,r8[3432]
80014fcc:	10 9c       	mov	r12,r8
80014fce:	f0 16 00 02 	mcall	r6[8]
80014fd2:	14 92       	mov	r2,r10
80014fd4:	16 93       	mov	r3,r11
80014fd6:	ec f8 00 00 	ld.w	r8,r6[0]
80014fda:	70 08       	ld.w	r8,r8[0x0]
80014fdc:	f0 f8 0d 6c 	ld.w	r8,r8[3436]
80014fe0:	10 9c       	mov	r12,r8
80014fe2:	f0 16 00 02 	mcall	r6[8]
80014fe6:	04 98       	mov	r8,r2
80014fe8:	06 99       	mov	r9,r3
80014fea:	f0 16 00 52 	mcall	r6[328]
80014fee:	e0 68 99 9a 	mov	r8,39322
80014ff2:	ea 18 99 99 	orh	r8,0x9999
80014ff6:	e0 69 99 99 	mov	r9,39321
80014ffa:	ea 19 3f c9 	orh	r9,0x3fc9
80014ffe:	f0 16 00 03 	mcall	r6[12]
80015002:	14 98       	mov	r8,r10
80015004:	16 99       	mov	r9,r11
80015006:	10 9a       	mov	r10,r8
80015008:	12 9b       	mov	r11,r9
8001500a:	f0 16 00 09 	mcall	r6[36]
8001500e:	18 98       	mov	r8,r12
80015010:	eb 48 01 7c 	st.w	r5[380],r8
80015014:	2f fd       	sub	sp,-4
80015016:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001501a:	00 00       	add	r0,r0
8001501c:	80 01       	ld.sh	r1,r0[0x0]
8001501e:	4e 06       	lddpc	r6,8001519c <processData+0x54>

80015020 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80015020:	eb cd 40 c0 	pushm	r6-r7,lr
80015024:	1a 97       	mov	r7,sp
80015026:	20 6d       	sub	sp,24
80015028:	49 e6       	lddpc	r6,800150a0 <interpolate+0x80>
8001502a:	1e 26       	rsub	r6,pc
8001502c:	ef 4c ff f8 	st.w	r7[-8],r12
80015030:	ef 4b ff f4 	st.w	r7[-12],r11
80015034:	ef 4a ff f0 	st.w	r7[-16],r10
80015038:	ef 49 ff ec 	st.w	r7[-20],r9
8001503c:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80015040:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015044:	ee f8 ff f0 	ld.w	r8,r7[-16]
80015048:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001504c:	c0 41       	brne	80015054 <interpolate+0x34>
	{
		return y1;
8001504e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80015052:	c2 38       	rjmp	80015098 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80015054:	ee f9 ff e8 	ld.w	r9,r7[-24]
80015058:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001505c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80015060:	ee fa ff f8 	ld.w	r10,r7[-8]
80015064:	ee f8 ff f4 	ld.w	r8,r7[-12]
80015068:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001506c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80015070:	ee fa ff f0 	ld.w	r10,r7[-16]
80015074:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015078:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001507c:	12 9b       	mov	r11,r9
8001507e:	10 9c       	mov	r12,r8
80015080:	f0 16 00 08 	mcall	r6[32]
80015084:	18 98       	mov	r8,r12
80015086:	10 99       	mov	r9,r8
80015088:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001508c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80015090:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80015094:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80015098:	10 9c       	mov	r12,r8
8001509a:	2f ad       	sub	sp,-24
8001509c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800150a0:	80 01       	ld.sh	r1,r0[0x0]
800150a2:	4e ae       	lddpc	lr,80015248 <processData+0x100>

800150a4 <stabilise>:
#include "stabilisation.h"
#include "stabilisation_copter.h"
#include "stabilisation_hybrid.h"

void stabilise(Stabiliser_t *stabiliser, float dt, float errors[]) 
{
800150a4:	eb cd 40 e0 	pushm	r5-r7,lr
800150a8:	1a 97       	mov	r7,sp
800150aa:	20 4d       	sub	sp,16
800150ac:	4a 66       	lddpc	r6,80015144 <stabilise+0xa0>
800150ae:	1e 26       	rsub	r6,pc
800150b0:	ef 4c ff f8 	st.w	r7[-8],r12
800150b4:	ef 4b ff f4 	st.w	r7[-12],r11
800150b8:	ef 4a ff f0 	st.w	r7[-16],r10
	int i;
	for (i = 0; i < 3; i++) 
800150bc:	30 08       	mov	r8,0
800150be:	ef 48 ff fc 	st.w	r7[-4],r8
800150c2:	c2 68       	rjmp	8001510e <stabilise+0x6a>
	{
		stabiliser->output.rpy[i]=	pid_update_dt(&(stabiliser->rpy_controller[i]),  errors[i], dt);
800150c4:	ee f5 ff fc 	ld.w	r5,r7[-4]
800150c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800150cc:	a3 68       	lsl	r8,0x2
800150ce:	ee f9 ff f0 	ld.w	r9,r7[-16]
800150d2:	f2 08 00 08 	add	r8,r9,r8
800150d6:	70 0b       	ld.w	r11,r8[0x0]
800150d8:	ee fa ff f8 	ld.w	r10,r7[-8]
800150dc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800150e0:	12 98       	mov	r8,r9
800150e2:	a5 68       	lsl	r8,0x4
800150e4:	12 08       	add	r8,r9
800150e6:	a3 68       	lsl	r8,0x2
800150e8:	f4 08 00 08 	add	r8,r10,r8
800150ec:	ee fa ff f4 	ld.w	r10,r7[-12]
800150f0:	10 9c       	mov	r12,r8
800150f2:	f0 16 01 20 	mcall	r6[1152]
800150f6:	18 9a       	mov	r10,r12
800150f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800150fc:	ea c9 ff bc 	sub	r9,r5,-68
80015100:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
#include "stabilisation_hybrid.h"

void stabilise(Stabiliser_t *stabiliser, float dt, float errors[]) 
{
	int i;
	for (i = 0; i < 3; i++) 
80015104:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015108:	2f f8       	sub	r8,-1
8001510a:	ef 48 ff fc 	st.w	r7[-4],r8
8001510e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015112:	58 28       	cp.w	r8,2
80015114:	fe 9a ff d8 	brle	800150c4 <stabilise+0x20>
	{
		stabiliser->output.rpy[i]=	pid_update_dt(&(stabiliser->rpy_controller[i]),  errors[i], dt);
	}		
	stabiliser->output.thrust= pid_update_dt(&(stabiliser->thrust_controller),  errors[3], dt);
80015118:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001511c:	2f 48       	sub	r8,-12
8001511e:	70 09       	ld.w	r9,r8[0x0]
80015120:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015124:	f0 c8 ff 34 	sub	r8,r8,-204
80015128:	ee fa ff f4 	ld.w	r10,r7[-12]
8001512c:	12 9b       	mov	r11,r9
8001512e:	10 9c       	mov	r12,r8
80015130:	f0 16 01 20 	mcall	r6[1152]
80015134:	18 99       	mov	r9,r12
80015136:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001513a:	f1 49 01 1c 	st.w	r8[284],r9
8001513e:	2f cd       	sub	sp,-16
80015140:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80015144:	80 01       	ld.sh	r1,r0[0x0]
80015146:	4f 32       	lddpc	r2,80015310 <processData+0x1c8>

80015148 <processData>:
adcifa_sequencer_conversion_opt_t adcifa_sequencer0_conversion_opt[SLOTS_PER_SEQUENCER];
			
			
			
__attribute__((__interrupt__))
static void processData() {
80015148:	eb cd 40 c0 	pushm	r6-r7,lr
8001514c:	1a 97       	mov	r7,sp
8001514e:	20 2d       	sub	sp,8
80015150:	4f 96       	lddpc	r6,80015334 <processData+0x1ec>
80015152:	1e 26       	rsub	r6,pc
	int ch;
	int16_t value;

	if (sample_counter>=number_of_samples)  {
80015154:	ec f8 01 1c 	ld.w	r8,r6[284]
80015158:	70 09       	ld.w	r9,r8[0x0]
8001515a:	ec f8 03 64 	ld.w	r8,r6[868]
8001515e:	70 08       	ld.w	r8,r8[0x0]
80015160:	10 39       	cp.w	r9,r8
80015162:	c2 15       	brlt	800151a4 <processData+0x5c>
		if (continuous_mode) {
80015164:	ec f8 03 3c 	ld.w	r8,r6[828]
80015168:	11 88       	ld.ub	r8,r8[0x0]
8001516a:	58 08       	cp.w	r8,0
8001516c:	c0 e0       	breq	80015188 <processData+0x40>
			sample_counter=0;
8001516e:	ec f8 01 1c 	ld.w	r8,r6[284]
80015172:	30 09       	mov	r9,0
80015174:	91 09       	st.w	r8[0x0],r9
			oversampling_counter=0;
80015176:	ec f8 01 90 	ld.w	r8,r6[400]
8001517a:	30 09       	mov	r9,0
8001517c:	91 09       	st.w	r8[0x0],r9
			channel_index=0;
8001517e:	ec f8 01 3c 	ld.w	r8,r6[316]
80015182:	30 09       	mov	r9,0
80015184:	91 09       	st.w	r8[0x0],r9
		} else {
			adcifa_disable_interrupt(adcifa, ADC_INT_SEOS0);
			//adcifa_disable_interrupt(adcifa, ADC_INT_SEOS1);
			adcifa_stop_itimer(adcifa);
		}
		return;
80015186:	cd 38       	rjmp	8001532c <processData+0x1e4>
		if (continuous_mode) {
			sample_counter=0;
			oversampling_counter=0;
			channel_index=0;
		} else {
			adcifa_disable_interrupt(adcifa, ADC_INT_SEOS0);
80015188:	ec f8 01 18 	ld.w	r8,r6[280]
8001518c:	70 08       	ld.w	r8,r8[0x0]
8001518e:	30 1b       	mov	r11,1
80015190:	10 9c       	mov	r12,r8
80015192:	f0 16 01 1c 	mcall	r6[1136]
			//adcifa_disable_interrupt(adcifa, ADC_INT_SEOS1);
			adcifa_stop_itimer(adcifa);
80015196:	ec f8 01 18 	ld.w	r8,r6[280]
8001519a:	70 08       	ld.w	r8,r8[0x0]
8001519c:	10 9c       	mov	r12,r8
8001519e:	f0 16 00 f9 	mcall	r6[996]
		}
		return;
800151a2:	cc 58       	rjmp	8001532c <processData+0x1e4>
	}
	

	if (((adcifa->sr&ADC_INT_SEOS0) ==0) 
800151a4:	ec f8 01 18 	ld.w	r8,r6[280]
800151a8:	70 08       	ld.w	r8,r8[0x0]
800151aa:	70 28       	ld.w	r8,r8[0x8]
800151ac:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800151b0:	e0 80 00 bd 	breq	8001532a <processData+0x1e2>
	//|| ((adcifa->sr&ADC_INT_SEOS1) ==0) 
	) {return;}
		
	if (sample_counter>=0) {
800151b4:	ec f8 01 1c 	ld.w	r8,r6[284]
800151b8:	70 08       	ld.w	r8,r8[0x0]
800151ba:	58 08       	cp.w	r8,0
800151bc:	c4 85       	brlt	8001524c <processData+0x104>
		for (ch=0; ch<sequencer_item_count; ch++) {
800151be:	30 08       	mov	r8,0
800151c0:	ef 48 ff f8 	st.w	r7[-8],r8
800151c4:	c3 88       	rjmp	80015234 <processData+0xec>
			value=adcifa->resx[ch];
800151c6:	ec f8 01 18 	ld.w	r8,r6[280]
800151ca:	70 08       	ld.w	r8,r8[0x0]
800151cc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800151d0:	2d f9       	sub	r9,-33
800151d2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800151d6:	ef 58 ff fe 	st.h	r7[-2],r8
			if (oversampling_counter<=0) {
800151da:	ec f8 01 90 	ld.w	r8,r6[400]
800151de:	70 08       	ld.w	r8,r8[0x0]
800151e0:	58 08       	cp.w	r8,0
800151e2:	e0 89 00 0c 	brgt	800151fa <processData+0xb2>
				internal_buffer[channel_index]=  value ;
800151e6:	ec f8 01 3c 	ld.w	r8,r6[316]
800151ea:	70 09       	ld.w	r9,r8[0x0]
800151ec:	ef 0a ff fe 	ld.sh	r10,r7[-2]
800151f0:	ec f8 02 2c 	ld.w	r8,r6[556]
800151f4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800151f8:	c1 18       	rjmp	8001521a <processData+0xd2>
			}else {			
				internal_buffer[channel_index]+= value ;
800151fa:	ec f8 01 3c 	ld.w	r8,r6[316]
800151fe:	70 08       	ld.w	r8,r8[0x0]
80015200:	10 99       	mov	r9,r8
80015202:	10 9a       	mov	r10,r8
80015204:	ec f8 02 2c 	ld.w	r8,r6[556]
80015208:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8001520c:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80015210:	10 0a       	add	r10,r8
80015212:	ec f8 02 2c 	ld.w	r8,r6[556]
80015216:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
				//adci_buffer[ch][even_odd][sample_counter]+=value;
			}			
			channel_index++;
8001521a:	ec f8 01 3c 	ld.w	r8,r6[316]
8001521e:	70 08       	ld.w	r8,r8[0x0]
80015220:	f0 c9 ff ff 	sub	r9,r8,-1
80015224:	ec f8 01 3c 	ld.w	r8,r6[316]
80015228:	91 09       	st.w	r8[0x0],r9
	if (((adcifa->sr&ADC_INT_SEOS0) ==0) 
	//|| ((adcifa->sr&ADC_INT_SEOS1) ==0) 
	) {return;}
		
	if (sample_counter>=0) {
		for (ch=0; ch<sequencer_item_count; ch++) {
8001522a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001522e:	2f f8       	sub	r8,-1
80015230:	ef 48 ff f8 	st.w	r7[-8],r8
80015234:	ec f8 01 20 	ld.w	r8,r6[288]
80015238:	11 88       	ld.ub	r8,r8[0x0]
8001523a:	5c 58       	castu.b	r8
8001523c:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80015240:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015244:	10 39       	cp.w	r9,r8
80015246:	fe 99 ff c0 	brgt	800151c6 <processData+0x7e>
8001524a:	c0 a8       	rjmp	8001525e <processData+0x116>
				//adci_buffer[ch][even_odd][sample_counter]+=value;
			}			
			channel_index++;
		
		}
	}	else {sample_counter++; return;}
8001524c:	ec f8 01 1c 	ld.w	r8,r6[284]
80015250:	70 08       	ld.w	r8,r8[0x0]
80015252:	f0 c9 ff ff 	sub	r9,r8,-1
80015256:	ec f8 01 1c 	ld.w	r8,r6[284]
8001525a:	91 09       	st.w	r8[0x0],r9
8001525c:	c6 88       	rjmp	8001532c <processData+0x1e4>
	//if (function_generator!=NULL) {
	//	DAC_set_value((*function_generator)(sampleCounter));
	//}
	if (channel_index>=channel_count) {
8001525e:	ec f8 02 10 	ld.w	r8,r6[528]
80015262:	11 88       	ld.ub	r8,r8[0x0]
80015264:	5c 58       	castu.b	r8
80015266:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
8001526a:	ec f8 01 3c 	ld.w	r8,r6[316]
8001526e:	70 08       	ld.w	r8,r8[0x0]
80015270:	10 39       	cp.w	r9,r8
80015272:	e0 89 00 0e 	brgt	8001528e <processData+0x146>
		oversampling_counter++;
80015276:	ec f8 01 90 	ld.w	r8,r6[400]
8001527a:	70 08       	ld.w	r8,r8[0x0]
8001527c:	f0 c9 ff ff 	sub	r9,r8,-1
80015280:	ec f8 01 90 	ld.w	r8,r6[400]
80015284:	91 09       	st.w	r8[0x0],r9
		channel_index=0;
80015286:	ec f8 01 3c 	ld.w	r8,r6[316]
8001528a:	30 09       	mov	r9,0
8001528c:	91 09       	st.w	r8[0x0],r9
	}
	if (oversampling_counter>= oversampling) {
8001528e:	ec f8 01 90 	ld.w	r8,r6[400]
80015292:	70 09       	ld.w	r9,r8[0x0]
80015294:	ec f8 03 60 	ld.w	r8,r6[864]
80015298:	70 08       	ld.w	r8,r8[0x0]
8001529a:	10 39       	cp.w	r9,r8
8001529c:	c4 85       	brlt	8001532c <processData+0x1e4>
		oversampling_counter=0;
8001529e:	ec f8 01 90 	ld.w	r8,r6[400]
800152a2:	30 09       	mov	r9,0
800152a4:	91 09       	st.w	r8[0x0],r9
		channel_index=0;
800152a6:	ec f8 01 3c 	ld.w	r8,r6[316]
800152aa:	30 09       	mov	r9,0
800152ac:	91 09       	st.w	r8[0x0],r9
		for (ch=0; ch<channel_count; ch++) {
800152ae:	30 08       	mov	r8,0
800152b0:	ef 48 ff f8 	st.w	r7[-8],r8
800152b4:	c2 78       	rjmp	80015302 <processData+0x1ba>
			adci_buffer[ch + sample_counter*channel_count]=internal_buffer[ch] / oversampling_divider;
800152b6:	ec f8 02 74 	ld.w	r8,r6[628]
800152ba:	70 09       	ld.w	r9,r8[0x0]
800152bc:	ec f8 02 10 	ld.w	r8,r6[528]
800152c0:	11 88       	ld.ub	r8,r8[0x0]
800152c2:	5c 58       	castu.b	r8
800152c4:	f5 d8 b0 08 	bfexts	r10,r8,0x0,0x8
800152c8:	ec f8 01 1c 	ld.w	r8,r6[284]
800152cc:	70 08       	ld.w	r8,r8[0x0]
800152ce:	b1 3a       	mul	r10,r8
800152d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800152d4:	f4 08 00 08 	add	r8,r10,r8
800152d8:	a1 78       	lsl	r8,0x1
800152da:	f2 08 00 0a 	add	r10,r9,r8
800152de:	ee f9 ff f8 	ld.w	r9,r7[-8]
800152e2:	ec f8 02 2c 	ld.w	r8,r6[556]
800152e6:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800152ea:	ec f9 04 d4 	ld.w	r9,r6[1236]
800152ee:	72 09       	ld.w	r9,r9[0x0]
800152f0:	f0 09 0c 08 	divs	r8,r8,r9
800152f4:	5c 88       	casts.h	r8
800152f6:	b4 08       	st.h	r10[0x0],r8
		channel_index=0;
	}
	if (oversampling_counter>= oversampling) {
		oversampling_counter=0;
		channel_index=0;
		for (ch=0; ch<channel_count; ch++) {
800152f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800152fc:	2f f8       	sub	r8,-1
800152fe:	ef 48 ff f8 	st.w	r7[-8],r8
80015302:	ec f8 02 10 	ld.w	r8,r6[528]
80015306:	11 88       	ld.ub	r8,r8[0x0]
80015308:	5c 58       	castu.b	r8
8001530a:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
8001530e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015312:	10 39       	cp.w	r9,r8
80015314:	fe 99 ff d1 	brgt	800152b6 <processData+0x16e>
			adci_buffer[ch + sample_counter*channel_count]=internal_buffer[ch] / oversampling_divider;
		}
		sample_counter++;
80015318:	ec f8 01 1c 	ld.w	r8,r6[284]
8001531c:	70 08       	ld.w	r8,r8[0x0]
8001531e:	f0 c9 ff ff 	sub	r9,r8,-1
80015322:	ec f8 01 1c 	ld.w	r8,r6[284]
80015326:	91 09       	st.w	r8[0x0],r9
80015328:	c0 28       	rjmp	8001532c <processData+0x1e4>
	}
	

	if (((adcifa->sr&ADC_INT_SEOS0) ==0) 
	//|| ((adcifa->sr&ADC_INT_SEOS1) ==0) 
	) {return;}
8001532a:	d7 03       	nop
	
	}		
	//DAC_set_value(even_odd*400);
	// acknowledge processing finished
	//adcifa->scr=ADC_INT_SEOS0 | ADC_INT_SEOS1;
}
8001532c:	2f ed       	sub	sp,-8
8001532e:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80015332:	d6 03       	rete
80015334:	80 01       	ld.sh	r1,r0[0x0]
80015336:	4f d6       	lddpc	r6,80015528 <adc_sequencer_add+0xd4>

80015338 <Init_ADCI>:


// Initializes ADC (configures Pins, starts Clock, sets defaults)
void Init_ADCI(uint32_t adc_frequency, uint8_t reference_source, int set_oversampling, int set_oversampling_divider){
80015338:	eb cd 40 c0 	pushm	r6-r7,lr
8001533c:	1a 97       	mov	r7,sp
8001533e:	20 4d       	sub	sp,16
80015340:	4b 96       	lddpc	r6,80015424 <Init_ADCI+0xec>
80015342:	1e 26       	rsub	r6,pc
80015344:	ef 4c ff fc 	st.w	r7[-4],r12
80015348:	16 98       	mov	r8,r11
8001534a:	ef 4a ff f4 	st.w	r7[-12],r10
8001534e:	ef 49 ff f0 	st.w	r7[-16],r9
80015352:	ef 68 ff f8 	st.b	r7[-8],r8

		// Assign and enable GPIO pins to the ADC function.
		gpio_enable_module(ADCIFA_GPIO_MAP, sizeof(ADCIFA_GPIO_MAP) / sizeof(ADCIFA_GPIO_MAP[0]));
80015356:	31 3b       	mov	r11,19
80015358:	ec fc 08 e8 	ld.w	r12,r6[2280]
8001535c:	f0 16 00 92 	mcall	r6[584]

		adc_config_options.frequency=adc_frequency;
80015360:	ec f8 01 08 	ld.w	r8,r6[264]
80015364:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015368:	91 09       	st.w	r8[0x0],r9
		adc_config_options.reference_source=reference_source;
8001536a:	ec f9 01 08 	ld.w	r9,r6[264]
8001536e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80015372:	b2 c8       	st.b	r9[0x4],r8

		// Get ADCIFA Factory Configuration
		adcifa_get_calibration_data(adcifa, &adc_config_options);
80015374:	ec f8 01 18 	ld.w	r8,r6[280]
80015378:	70 08       	ld.w	r8,r8[0x0]
8001537a:	ec fb 01 08 	ld.w	r11,r6[264]
8001537e:	10 9c       	mov	r12,r8
80015380:	f0 16 02 02 	mcall	r6[2056]
		if ((uint16_t)adc_config_options.offset_calibration_value == 0xFFFF){
80015384:	ec f8 01 08 	ld.w	r8,r6[264]
80015388:	90 68       	ld.sh	r8,r8[0xc]
8001538a:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001538e:	3f f8       	mov	r8,-1
80015390:	f0 09 19 00 	cp.h	r9,r8
80015394:	c1 51       	brne	800153be <Init_ADCI+0x86>
			// Set default calibration if Engineering samples and part is not programmed
			adc_config_options.offset_calibration_value = 0x3B;
80015396:	ec f9 01 08 	ld.w	r9,r6[264]
8001539a:	33 b8       	mov	r8,59
8001539c:	b2 68       	st.h	r9[0xc],r8
			adc_config_options.gain_calibration_value = 0x4210;
8001539e:	ec f9 01 08 	ld.w	r9,r6[264]
800153a2:	e0 68 42 10 	mov	r8,16912
800153a6:	b2 58       	st.h	r9[0xa],r8
			adc_config_options.sh0_calibration_value = 0x210;
800153a8:	ec f9 01 08 	ld.w	r9,r6[264]
800153ac:	e0 68 02 10 	mov	r8,528
800153b0:	b2 78       	st.h	r9[0xe],r8
			adc_config_options.sh1_calibration_value = 0x210;
800153b2:	ec f9 01 08 	ld.w	r9,r6[264]
800153b6:	e0 68 02 10 	mov	r8,528
800153ba:	f3 58 00 10 	st.h	r9[16],r8
		}
		adc_config_options.offset_calibration_value = 0x3B; // offset correction
800153be:	ec f9 01 08 	ld.w	r9,r6[264]
800153c2:	33 b8       	mov	r8,59
800153c4:	b2 68       	st.h	r9[0xc],r8

		// Configure ADCIFA core
		adcifa_configure(adcifa, &adc_config_options, FOSC0);
800153c6:	ec f8 01 18 	ld.w	r8,r6[280]
800153ca:	70 08       	ld.w	r8,r8[0x0]
800153cc:	e0 6a 24 00 	mov	r10,9216
800153d0:	ea 1a 00 f4 	orh	r10,0xf4
800153d4:	ec fb 01 08 	ld.w	r11,r6[264]
800153d8:	10 9c       	mov	r12,r8
800153da:	f0 16 02 1e 	mcall	r6[2168]

		clear_adc_sequencer();
800153de:	f0 16 01 fb 	mcall	r6[2028]
		continuous_mode=false;
800153e2:	ec f9 03 3c 	ld.w	r9,r6[828]
800153e6:	30 08       	mov	r8,0
800153e8:	b2 88       	st.b	r9[0x0],r8
		// Configure ADCIFA sequencer 1
		//adcifa_configure_sequencer(adcifa, 1, &adcifa_sequence_opt, adcifa_sequencer1_conversion_opt);
		
		adcifa_disable_interrupt(adcifa, 0xffffffff);
800153ea:	ec f8 01 18 	ld.w	r8,r6[280]
800153ee:	70 08       	ld.w	r8,r8[0x0]
800153f0:	3f fb       	mov	r11,-1
800153f2:	10 9c       	mov	r12,r8
800153f4:	f0 16 01 1c 	mcall	r6[1136]
		INTC_register_interrupt( (__int_handler) &processData, AVR32_ADCIFA_SEQUENCER0_IRQ, AVR32_INTC_INT1);
800153f8:	fe c8 02 b0 	sub	r8,pc,688
800153fc:	30 1a       	mov	r10,1
800153fe:	e0 6b 04 80 	mov	r11,1152
80015402:	10 9c       	mov	r12,r8
80015404:	f0 16 00 3b 	mcall	r6[236]
		//INTC_register_interrupt( (__int_handler) &processData, AVR32_ADCIFA_SEQUENCER1_IRQ, AVR32_INTC_INT1);
		oversampling=set_oversampling;
80015408:	ec f8 03 60 	ld.w	r8,r6[864]
8001540c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015410:	91 09       	st.w	r8[0x0],r9
		oversampling_divider=set_oversampling_divider;
80015412:	ec f8 04 d4 	ld.w	r8,r6[1236]
80015416:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001541a:	91 09       	st.w	r8[0x0],r9
//	int period_us=1000000/samplingrate;
}
8001541c:	2f cd       	sub	sp,-16
8001541e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015422:	00 00       	add	r0,r0
80015424:	80 01       	ld.sh	r1,r0[0x0]
80015426:	51 c6       	stdsp	sp[0x70],r6

80015428 <clear_adc_sequencer>:
void clear_adc_sequencer() {
80015428:	eb cd 40 c0 	pushm	r6-r7,lr
8001542c:	1a 97       	mov	r7,sp
8001542e:	48 96       	lddpc	r6,80015450 <clear_adc_sequencer+0x28>
80015430:	1e 26       	rsub	r6,pc
	sequencer_item_count=0;
80015432:	ec f9 01 20 	ld.w	r9,r6[288]
80015436:	30 08       	mov	r8,0
80015438:	b2 88       	st.b	r9[0x0],r8
	adcifa_sequence_opt.convnb=sequencer_item_count;
8001543a:	ec f8 01 20 	ld.w	r8,r6[288]
8001543e:	11 88       	ld.ub	r8,r8[0x0]
80015440:	5c 58       	castu.b	r8
80015442:	5c 58       	castu.b	r8
80015444:	ec f9 02 b8 	ld.w	r9,r6[696]
80015448:	b2 88       	st.b	r9[0x0],r8
}
8001544a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001544e:	00 00       	add	r0,r0
80015450:	80 01       	ld.sh	r1,r0[0x0]
80015452:	52 b4       	stdsp	sp[0xac],r4

80015454 <adc_sequencer_add>:

int8_t adc_sequencer_add(uint8_t input_p, uint8_t input_n, uint8_t gain) {
80015454:	eb cd 40 c0 	pushm	r6-r7,lr
80015458:	1a 97       	mov	r7,sp
8001545a:	20 3d       	sub	sp,12
8001545c:	4b 36       	lddpc	r6,80015528 <adc_sequencer_add+0xd4>
8001545e:	1e 26       	rsub	r6,pc
80015460:	16 99       	mov	r9,r11
80015462:	14 98       	mov	r8,r10
80015464:	18 9a       	mov	r10,r12
80015466:	ef 6a ff fc 	st.b	r7[-4],r10
8001546a:	ef 69 ff f8 	st.b	r7[-8],r9
8001546e:	ef 68 ff f4 	st.b	r7[-12],r8
	
	if (sequencer_item_count<SLOTS_PER_SEQUENCER-1) {
80015472:	ec f8 01 20 	ld.w	r8,r6[288]
80015476:	11 88       	ld.ub	r8,r8[0x0]
80015478:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001547c:	30 68       	mov	r8,6
8001547e:	f0 09 18 00 	cp.b	r9,r8
80015482:	e0 89 00 4c 	brgt	8001551a <adc_sequencer_add+0xc6>
		adcifa_sequencer0_conversion_opt[sequencer_item_count].channel_p=input_p;
80015486:	ec f8 01 20 	ld.w	r8,r6[288]
8001548a:	11 88       	ld.ub	r8,r8[0x0]
8001548c:	5c 58       	castu.b	r8
8001548e:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80015492:	ec fa 02 3c 	ld.w	r10,r6[572]
80015496:	12 98       	mov	r8,r9
80015498:	a1 78       	lsl	r8,0x1
8001549a:	12 08       	add	r8,r9
8001549c:	f4 08 00 09 	add	r9,r10,r8
800154a0:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800154a4:	b2 88       	st.b	r9[0x0],r8
		adcifa_sequencer0_conversion_opt[sequencer_item_count].channel_n=input_n;
800154a6:	ec f8 01 20 	ld.w	r8,r6[288]
800154aa:	11 88       	ld.ub	r8,r8[0x0]
800154ac:	5c 58       	castu.b	r8
800154ae:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
800154b2:	ec fa 02 3c 	ld.w	r10,r6[572]
800154b6:	12 98       	mov	r8,r9
800154b8:	a1 78       	lsl	r8,0x1
800154ba:	12 08       	add	r8,r9
800154bc:	f4 08 00 08 	add	r8,r10,r8
800154c0:	f0 c9 ff ff 	sub	r9,r8,-1
800154c4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800154c8:	b2 88       	st.b	r9[0x0],r8
		adcifa_sequencer0_conversion_opt[sequencer_item_count].gain=gain;
800154ca:	ec f8 01 20 	ld.w	r8,r6[288]
800154ce:	11 88       	ld.ub	r8,r8[0x0]
800154d0:	5c 58       	castu.b	r8
800154d2:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
800154d6:	ec fa 02 3c 	ld.w	r10,r6[572]
800154da:	12 98       	mov	r8,r9
800154dc:	a1 78       	lsl	r8,0x1
800154de:	12 08       	add	r8,r9
800154e0:	f4 08 00 08 	add	r8,r10,r8
800154e4:	f0 c9 ff fe 	sub	r9,r8,-2
800154e8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800154ec:	b2 88       	st.b	r9[0x0],r8
		sequencer_item_count++;
800154ee:	ec f8 01 20 	ld.w	r8,r6[288]
800154f2:	11 88       	ld.ub	r8,r8[0x0]
800154f4:	5c 58       	castu.b	r8
800154f6:	2f f8       	sub	r8,-1
800154f8:	5c 58       	castu.b	r8
800154fa:	ec f9 01 20 	ld.w	r9,r6[288]
800154fe:	b2 88       	st.b	r9[0x0],r8
		adcifa_sequence_opt.convnb=sequencer_item_count;
80015500:	ec f8 01 20 	ld.w	r8,r6[288]
80015504:	11 88       	ld.ub	r8,r8[0x0]
80015506:	5c 58       	castu.b	r8
80015508:	5c 58       	castu.b	r8
8001550a:	ec f9 02 b8 	ld.w	r9,r6[696]
8001550e:	b2 88       	st.b	r9[0x0],r8
		return sequencer_item_count;
80015510:	ec f8 01 20 	ld.w	r8,r6[288]
80015514:	11 88       	ld.ub	r8,r8[0x0]
80015516:	5c 58       	castu.b	r8
80015518:	c0 38       	rjmp	8001551e <adc_sequencer_add+0xca>
	} else {
		return -1;
8001551a:	e0 68 00 ff 	mov	r8,255
	}
}
8001551e:	10 9c       	mov	r12,r8
80015520:	2f dd       	sub	sp,-12
80015522:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015526:	00 00       	add	r0,r0
80015528:	80 01       	ld.sh	r1,r0[0x0]
8001552a:	52 e2       	stdsp	sp[0xb8],r2

8001552c <ADCI_Start_Sampling>:

// starts sampling, captures one buffer length and then stops
void ADCI_Start_Sampling(int16_t *buffer, int8_t channels, int length, int samplingrate, bool continuous){
8001552c:	eb cd 40 c0 	pushm	r6-r7,lr
80015530:	1a 97       	mov	r7,sp
80015532:	20 6d       	sub	sp,24
80015534:	4a d6       	lddpc	r6,800155e8 <ADCI_Start_Sampling+0xbc>
80015536:	1e 26       	rsub	r6,pc
80015538:	ef 4c ff f8 	st.w	r7[-8],r12
8001553c:	ef 4a ff f0 	st.w	r7[-16],r10
80015540:	ef 49 ff ec 	st.w	r7[-20],r9
80015544:	16 99       	mov	r9,r11
80015546:	ef 69 ff f4 	st.b	r7[-12],r9
8001554a:	ef 68 ff e8 	st.b	r7[-24],r8

	// Configure ADCIFA sequencer 0
	adcifa_configure_sequencer(adcifa, 0, &adcifa_sequence_opt, adcifa_sequencer0_conversion_opt);
8001554e:	ec f8 01 18 	ld.w	r8,r6[280]
80015552:	70 08       	ld.w	r8,r8[0x0]
80015554:	ec f9 02 3c 	ld.w	r9,r6[572]
80015558:	ec fa 02 b8 	ld.w	r10,r6[696]
8001555c:	30 0b       	mov	r11,0
8001555e:	10 9c       	mov	r12,r8
80015560:	f0 16 01 c2 	mcall	r6[1800]
	adci_buffer=buffer;
80015564:	ec f8 02 74 	ld.w	r8,r6[628]
80015568:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001556c:	91 09       	st.w	r8[0x0],r9
	
	int period_us=adc_config_options.frequency/(samplingrate*oversampling);	
8001556e:	ec f8 01 08 	ld.w	r8,r6[264]
80015572:	70 08       	ld.w	r8,r8[0x0]
80015574:	ec f9 03 60 	ld.w	r9,r6[864]
80015578:	72 0a       	ld.w	r10,r9[0x0]
8001557a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8001557e:	f4 09 02 49 	mul	r9,r10,r9
80015582:	f0 09 0d 08 	divu	r8,r8,r9
80015586:	ef 48 ff fc 	st.w	r7[-4],r8
	oversampling_counter=0;
8001558a:	ec f8 01 90 	ld.w	r8,r6[400]
8001558e:	30 09       	mov	r9,0
80015590:	91 09       	st.w	r8[0x0],r9
	sample_counter=-10;
80015592:	ec f8 01 1c 	ld.w	r8,r6[284]
80015596:	3f 69       	mov	r9,-10
80015598:	91 09       	st.w	r8[0x0],r9
	number_of_samples=length;
8001559a:	ec f8 03 64 	ld.w	r8,r6[868]
8001559e:	ee f9 ff f0 	ld.w	r9,r7[-16]
800155a2:	91 09       	st.w	r8[0x0],r9
	continuous_mode=continuous;
800155a4:	ec f9 03 3c 	ld.w	r9,r6[828]
800155a8:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800155ac:	b2 88       	st.b	r9[0x0],r8
	channel_count=channels;
800155ae:	ec f9 02 10 	ld.w	r9,r6[528]
800155b2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800155b6:	b2 88       	st.b	r9[0x0],r8
	channel_index=0;
800155b8:	ec f8 01 3c 	ld.w	r8,r6[316]
800155bc:	30 09       	mov	r9,0
800155be:	91 09       	st.w	r8[0x0],r9
	
	adcifa_enable_interrupt(adcifa, ADC_INT_SEOS0);
800155c0:	ec f8 01 18 	ld.w	r8,r6[280]
800155c4:	70 08       	ld.w	r8,r8[0x0]
800155c6:	30 1b       	mov	r11,1
800155c8:	10 9c       	mov	r12,r8
800155ca:	f0 16 01 4f 	mcall	r6[1340]
	//adcifa_enable_interrupt(adcifa, ADC_INT_SEOS1);
	adcifa_start_itimer(adcifa, period_us);
800155ce:	ee f9 ff fc 	ld.w	r9,r7[-4]
800155d2:	ec f8 01 18 	ld.w	r8,r6[280]
800155d6:	70 08       	ld.w	r8,r8[0x0]
800155d8:	12 9b       	mov	r11,r9
800155da:	10 9c       	mov	r12,r8
800155dc:	f0 16 01 dd 	mcall	r6[1908]
}
800155e0:	2f ad       	sub	sp,-24
800155e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800155e6:	00 00       	add	r0,r0
800155e8:	80 01       	ld.sh	r1,r0[0x0]
800155ea:	53 ba       	stdsp	sp[0xec],r10

800155ec <ADCI_Stop_Sampling>:

// stops sampling immediately
void ADCI_Stop_Sampling(){
800155ec:	eb cd 40 c0 	pushm	r6-r7,lr
800155f0:	1a 97       	mov	r7,sp
800155f2:	48 66       	lddpc	r6,80015608 <ADCI_Stop_Sampling+0x1c>
800155f4:	1e 26       	rsub	r6,pc
	adcifa_stop_itimer(adcifa);
800155f6:	ec f8 01 18 	ld.w	r8,r6[280]
800155fa:	70 08       	ld.w	r8,r8[0x0]
800155fc:	10 9c       	mov	r12,r8
800155fe:	f0 16 00 f9 	mcall	r6[996]
	
}
80015602:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015606:	00 00       	add	r0,r0
80015608:	80 01       	ld.sh	r1,r0[0x0]
8001560a:	54 78       	stdsp	sp[0x11c],r8

8001560c <ADCI_Sampling_Complete>:

// Returns true if one-shot sampling has finished
Bool ADCI_Sampling_Complete(){
8001560c:	eb cd 40 c0 	pushm	r6-r7,lr
80015610:	1a 97       	mov	r7,sp
80015612:	48 86       	lddpc	r6,80015630 <ADCI_Sampling_Complete+0x24>
80015614:	1e 26       	rsub	r6,pc
	return (sample_counter>=number_of_samples);
80015616:	ec f8 01 1c 	ld.w	r8,r6[284]
8001561a:	70 0a       	ld.w	r10,r8[0x0]
8001561c:	ec f8 03 64 	ld.w	r8,r6[868]
80015620:	70 09       	ld.w	r9,r8[0x0]
80015622:	30 18       	mov	r8,1
80015624:	12 3a       	cp.w	r10,r9
80015626:	c0 24       	brge	8001562a <ADCI_Sampling_Complete+0x1e>
80015628:	30 08       	mov	r8,0
}
8001562a:	10 9c       	mov	r12,r8
8001562c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015630:	80 01       	ld.sh	r1,r0[0x0]
80015632:	54 98       	stdsp	sp[0x124],r8

80015634 <ADCI_get_sample>:
//void set_DAC_generator_function(generatorfunction new_function_generator ) {
//	function_generator=new_function_generator;
	
//}

int16_t ADCI_get_sample(int channel, int sample) {
80015634:	eb cd 40 c0 	pushm	r6-r7,lr
80015638:	1a 97       	mov	r7,sp
8001563a:	20 2d       	sub	sp,8
8001563c:	48 f6       	lddpc	r6,80015678 <ADCI_get_sample+0x44>
8001563e:	1e 26       	rsub	r6,pc
80015640:	ef 4c ff fc 	st.w	r7[-4],r12
80015644:	ef 4b ff f8 	st.w	r7[-8],r11
	return adci_buffer[channel + channel_count*sample];
80015648:	ec f8 02 74 	ld.w	r8,r6[628]
8001564c:	70 09       	ld.w	r9,r8[0x0]
8001564e:	ec f8 02 10 	ld.w	r8,r6[528]
80015652:	11 88       	ld.ub	r8,r8[0x0]
80015654:	5c 58       	castu.b	r8
80015656:	f5 d8 b0 08 	bfexts	r10,r8,0x0,0x8
8001565a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001565e:	b1 3a       	mul	r10,r8
80015660:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015664:	f4 08 00 08 	add	r8,r10,r8
80015668:	a1 78       	lsl	r8,0x1
8001566a:	f2 08 00 08 	add	r8,r9,r8
8001566e:	90 08       	ld.sh	r8,r8[0x0]
}
80015670:	10 9c       	mov	r12,r8
80015672:	2f ed       	sub	sp,-8
80015674:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015678:	80 01       	ld.sh	r1,r0[0x0]
8001567a:	54 c2       	stdsp	sp[0x130],r2

8001567c <ADCI_get_buffer>:

int16_t* ADCI_get_buffer() {
8001567c:	eb cd 40 c0 	pushm	r6-r7,lr
80015680:	1a 97       	mov	r7,sp
80015682:	48 56       	lddpc	r6,80015694 <ADCI_get_buffer+0x18>
80015684:	1e 26       	rsub	r6,pc
	return adci_buffer;
80015686:	ec f8 02 74 	ld.w	r8,r6[628]
8001568a:	70 08       	ld.w	r8,r8[0x0]
}
8001568c:	10 9c       	mov	r12,r8
8001568e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015692:	00 00       	add	r0,r0
80015694:	80 01       	ld.sh	r1,r0[0x0]
80015696:	55 08       	stdsp	sp[0x140],r8

80015698 <ADCI_get_sampling_status>:
	
int ADCI_get_sampling_status() {
80015698:	eb cd 40 c0 	pushm	r6-r7,lr
8001569c:	1a 97       	mov	r7,sp
8001569e:	48 56       	lddpc	r6,800156b0 <ADCI_get_sampling_status+0x18>
800156a0:	1e 26       	rsub	r6,pc
	return sample_counter;
800156a2:	ec f8 01 1c 	ld.w	r8,r6[284]
800156a6:	70 08       	ld.w	r8,r8[0x0]
}
800156a8:	10 9c       	mov	r12,r8
800156aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800156ae:	00 00       	add	r0,r0
800156b0:	80 01       	ld.sh	r1,r0[0x0]
800156b2:	55 24       	stdsp	sp[0x148],r4

800156b4 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
800156b4:	eb cd 40 80 	pushm	r7,lr
800156b8:	1a 97       	mov	r7,sp
800156ba:	20 2d       	sub	sp,8
800156bc:	ef 4c ff fc 	st.w	r7[-4],r12
800156c0:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
800156c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800156c8:	30 09       	mov	r9,0
800156ca:	91 09       	st.w	r8[0x0],r9
}
800156cc:	2f ed       	sub	sp,-8
800156ce:	e3 cd 80 80 	ldm	sp++,r7,pc

800156d2 <genclk_config_set_source>:
	AVR32_SCIF.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
800156d2:	eb cd 40 80 	pushm	r7,lr
800156d6:	1a 97       	mov	r7,sp
800156d8:	20 2d       	sub	sp,8
800156da:	ef 4c ff fc 	st.w	r7[-4],r12
800156de:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
800156e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800156e6:	70 08       	ld.w	r8,r8[0x0]
800156e8:	10 99       	mov	r9,r8
800156ea:	e0 19 f0 ff 	andl	r9,0xf0ff
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
800156ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800156f2:	a9 68       	lsl	r8,0x8
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
800156f4:	10 49       	or	r9,r8
800156f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800156fa:	91 09       	st.w	r8[0x0],r9
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
}
800156fc:	2f ed       	sub	sp,-8
800156fe:	e3 cd 80 80 	ldm	sp++,r7,pc

80015702 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
80015702:	eb cd 40 80 	pushm	r7,lr
80015706:	1a 97       	mov	r7,sp
80015708:	20 2d       	sub	sp,8
8001570a:	ef 4c ff fc 	st.w	r7[-4],r12
8001570e:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_SCIF_GCCTRL_DIVEN_MASK
80015712:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015716:	70 08       	ld.w	r8,r8[0x0]
80015718:	10 99       	mov	r9,r8
8001571a:	e4 19 ff 00 	andh	r9,0xff00
8001571e:	e0 19 ff fd 	andl	r9,0xfffd
80015722:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015726:	91 09       	st.w	r8[0x0],r9
			| AVR32_SCIF_GCCTRL_DIV_MASK);

	if (divider > 1) {
80015728:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001572c:	58 18       	cp.w	r8,1
8001572e:	e0 88 00 17 	brls	8001575c <genclk_config_set_divider+0x5a>
		cfg->ctrl |= 1U << AVR32_SCIF_GCCTRL_DIVEN;
80015732:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015736:	70 08       	ld.w	r8,r8[0x0]
80015738:	10 99       	mov	r9,r8
8001573a:	a1 b9       	sbr	r9,0x1
8001573c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015740:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_SCIF_GCCTRL_DIV;
80015742:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015746:	70 09       	ld.w	r9,r8[0x0]
80015748:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001574c:	2f f8       	sub	r8,-1
8001574e:	a1 98       	lsr	r8,0x1
80015750:	20 18       	sub	r8,1
80015752:	b1 68       	lsl	r8,0x10
80015754:	10 49       	or	r9,r8
80015756:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001575a:	91 09       	st.w	r8[0x0],r9
	}
}
8001575c:	2f ed       	sub	sp,-8
8001575e:	e3 cd 80 80 	ldm	sp++,r7,pc

80015762 <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
80015762:	eb cd 40 80 	pushm	r7,lr
80015766:	1a 97       	mov	r7,sp
80015768:	20 2d       	sub	sp,8
8001576a:	ef 4c ff fc 	st.w	r7[-4],r12
8001576e:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
80015772:	fe 78 08 00 	mov	r8,-63488
80015776:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001577a:	ee fa ff fc 	ld.w	r10,r7[-4]
8001577e:	74 0a       	ld.w	r10,r10[0x0]
80015780:	a1 aa       	sbr	r10,0x0
80015782:	2e 79       	sub	r9,-25
80015784:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80015788:	2f ed       	sub	sp,-8
8001578a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001578e <genclk_disable>:

static inline void genclk_disable(unsigned int id)
{
8001578e:	eb cd 40 80 	pushm	r7,lr
80015792:	1a 97       	mov	r7,sp
80015794:	20 1d       	sub	sp,4
80015796:	ef 4c ff fc 	st.w	r7[-4],r12
	AVR32_SCIF.gcctrl[id] = 0;
8001579a:	fe 78 08 00 	mov	r8,-63488
8001579e:	ee f9 ff fc 	ld.w	r9,r7[-4]
800157a2:	2e 79       	sub	r9,-25
800157a4:	30 0a       	mov	r10,0
800157a6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
800157aa:	2f fd       	sub	sp,-4
800157ac:	e3 cd 80 80 	ldm	sp++,r7,pc

800157b0 <get_interrupt_counter>:
#define EXT_INT_LINES 1
eic_options_t eic_options[EXT_INT_LINES];  
 
 

int get_interrupt_counter(void) {
800157b0:	eb cd 40 c0 	pushm	r6-r7,lr
800157b4:	1a 97       	mov	r7,sp
800157b6:	48 56       	lddpc	r6,800157c8 <get_interrupt_counter+0x18>
800157b8:	1e 26       	rsub	r6,pc
	return interrupt_counter;
800157ba:	ec f8 08 e4 	ld.w	r8,r6[2276]
800157be:	70 08       	ld.w	r8,r8[0x0]
}
800157c0:	10 9c       	mov	r12,r8
800157c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800157c6:	00 00       	add	r0,r0
800157c8:	80 01       	ld.sh	r1,r0[0x0]
800157ca:	56 3c       	stdsp	sp[0x18c],r12

800157cc <processData>:


void processData(void) {
800157cc:	eb cd 40 c0 	pushm	r6-r7,lr
800157d0:	1a 97       	mov	r7,sp
800157d2:	20 3d       	sub	sp,12
800157d4:	4b e6       	lddpc	r6,800158cc <processData+0x100>
800157d6:	1e 26       	rsub	r6,pc
	int ch;
	int32_t value;
	if (sampleCounter>=ADC_BUFFER_SIZE) {
800157d8:	ec f8 01 5c 	ld.w	r8,r6[348]
800157dc:	70 08       	ld.w	r8,r8[0x0]
800157de:	e0 48 03 ff 	cp.w	r8,1023
800157e2:	e0 89 00 70 	brgt	800158c2 <processData+0xf6>
		return;
	}	
	uint8_t* buffer =get_spi_in_buffer(ADC_SPI_INDEX);
800157e6:	30 0c       	mov	r12,0
800157e8:	f0 16 01 cb 	mcall	r6[1836]
800157ec:	18 98       	mov	r8,r12
800157ee:	ef 48 ff fc 	st.w	r7[-4],r8
	for (ch=0; ch<4; ch++) {
800157f2:	30 08       	mov	r8,0
800157f4:	ef 48 ff f4 	st.w	r7[-12],r8
800157f8:	c4 48       	rjmp	80015880 <processData+0xb4>
		value=(buffer[3*ch]<<24) + (buffer[3*ch+1]<<16)+(buffer[3*ch+2]<<8);
800157fa:	ee f9 ff f4 	ld.w	r9,r7[-12]
800157fe:	12 98       	mov	r8,r9
80015800:	a1 78       	lsl	r8,0x1
80015802:	12 08       	add	r8,r9
80015804:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015808:	f2 08 00 08 	add	r8,r9,r8
8001580c:	11 88       	ld.ub	r8,r8[0x0]
8001580e:	f0 0a 15 18 	lsl	r10,r8,0x18
80015812:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015816:	12 98       	mov	r8,r9
80015818:	a1 78       	lsl	r8,0x1
8001581a:	12 08       	add	r8,r9
8001581c:	2f f8       	sub	r8,-1
8001581e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015822:	f2 08 00 08 	add	r8,r9,r8
80015826:	11 88       	ld.ub	r8,r8[0x0]
80015828:	b1 68       	lsl	r8,0x10
8001582a:	10 0a       	add	r10,r8
8001582c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015830:	12 98       	mov	r8,r9
80015832:	a1 78       	lsl	r8,0x1
80015834:	12 08       	add	r8,r9
80015836:	2f e8       	sub	r8,-2
80015838:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001583c:	f2 08 00 08 	add	r8,r9,r8
80015840:	11 88       	ld.ub	r8,r8[0x0]
80015842:	a9 68       	lsl	r8,0x8
80015844:	f4 08 00 08 	add	r8,r10,r8
80015848:	ef 48 ff f8 	st.w	r7[-8],r8
		adc_buffer[ch][sampleCounter]=(value/256);
8001584c:	ee fb ff f4 	ld.w	r11,r7[-12]
80015850:	ec f8 01 5c 	ld.w	r8,r6[348]
80015854:	70 09       	ld.w	r9,r8[0x0]
80015856:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001585a:	f0 ca ff 01 	sub	r10,r8,-255
8001585e:	58 08       	cp.w	r8,0
80015860:	f4 08 17 50 	movlt	r8,r10
80015864:	a9 48       	asr	r8,0x8
80015866:	10 9a       	mov	r10,r8
80015868:	ec f8 04 d0 	ld.w	r8,r6[1232]
8001586c:	ab 6b       	lsl	r11,0xa
8001586e:	f6 09 00 09 	add	r9,r11,r9
80015872:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	int32_t value;
	if (sampleCounter>=ADC_BUFFER_SIZE) {
		return;
	}	
	uint8_t* buffer =get_spi_in_buffer(ADC_SPI_INDEX);
	for (ch=0; ch<4; ch++) {
80015876:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001587a:	2f f8       	sub	r8,-1
8001587c:	ef 48 ff f4 	st.w	r7[-12],r8
80015880:	ee f8 ff f4 	ld.w	r8,r7[-12]
80015884:	58 38       	cp.w	r8,3
80015886:	fe 9a ff ba 	brle	800157fa <processData+0x2e>
		value=(buffer[3*ch]<<24) + (buffer[3*ch+1]<<16)+(buffer[3*ch+2]<<8);
		adc_buffer[ch][sampleCounter]=(value/256);
		
	}
	
	if (function_generator!=NULL) {
8001588a:	ec f8 02 84 	ld.w	r8,r6[644]
8001588e:	70 08       	ld.w	r8,r8[0x0]
80015890:	58 08       	cp.w	r8,0
80015892:	c0 f0       	breq	800158b0 <processData+0xe4>
		DAC_set_value((*function_generator)(sampleCounter));
80015894:	ec f8 02 84 	ld.w	r8,r6[644]
80015898:	70 08       	ld.w	r8,r8[0x0]
8001589a:	ec f9 01 5c 	ld.w	r9,r6[348]
8001589e:	72 09       	ld.w	r9,r9[0x0]
800158a0:	12 9c       	mov	r12,r9
800158a2:	5d 18       	icall	r8
800158a4:	18 98       	mov	r8,r12
800158a6:	5c 88       	casts.h	r8
800158a8:	5c 78       	castu.h	r8
800158aa:	10 9c       	mov	r12,r8
800158ac:	f0 16 01 ba 	mcall	r6[1768]
	}		
	
	sampleCounter++;	
800158b0:	ec f8 01 5c 	ld.w	r8,r6[348]
800158b4:	70 08       	ld.w	r8,r8[0x0]
800158b6:	f0 c9 ff ff 	sub	r9,r8,-1
800158ba:	ec f8 01 5c 	ld.w	r8,r6[348]
800158be:	91 09       	st.w	r8[0x0],r9
800158c0:	c0 28       	rjmp	800158c4 <processData+0xf8>

void processData(void) {
	int ch;
	int32_t value;
	if (sampleCounter>=ADC_BUFFER_SIZE) {
		return;
800158c2:	d7 03       	nop
		DAC_set_value((*function_generator)(sampleCounter));
	}		
	
	sampleCounter++;	
	
}  
800158c4:	2f dd       	sub	sp,-12
800158c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800158ca:	00 00       	add	r0,r0
800158cc:	80 01       	ld.sh	r1,r0[0x0]
800158ce:	56 5a       	stdsp	sp[0x194],r10

800158d0 <set_DAC_generator_function>:

void set_DAC_generator_function(generatorfunction new_function_generator ) {
800158d0:	eb cd 40 c0 	pushm	r6-r7,lr
800158d4:	1a 97       	mov	r7,sp
800158d6:	20 1d       	sub	sp,4
800158d8:	48 66       	lddpc	r6,800158f0 <set_DAC_generator_function+0x20>
800158da:	1e 26       	rsub	r6,pc
800158dc:	ef 4c ff fc 	st.w	r7[-4],r12
	function_generator=new_function_generator;
800158e0:	ec f8 02 84 	ld.w	r8,r6[644]
800158e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800158e8:	91 09       	st.w	r8[0x0],r9
	
}
800158ea:	2f fd       	sub	sp,-4
800158ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800158f0:	80 01       	ld.sh	r1,r0[0x0]
800158f2:	57 5e       	stdsp	sp[0x1d4],lr

800158f4 <get_sample>:

float get_sample(int channel, int sample) {
800158f4:	eb cd 40 c0 	pushm	r6-r7,lr
800158f8:	1a 97       	mov	r7,sp
800158fa:	20 2d       	sub	sp,8
800158fc:	48 c6       	lddpc	r6,8001592c <get_sample+0x38>
800158fe:	1e 26       	rsub	r6,pc
80015900:	ef 4c ff fc 	st.w	r7[-4],r12
80015904:	ef 4b ff f8 	st.w	r7[-8],r11
	return adc_buffer[channel][sample];
80015908:	ee fa ff fc 	ld.w	r10,r7[-4]
8001590c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80015910:	ec f8 04 d0 	ld.w	r8,r6[1232]
80015914:	ab 6a       	lsl	r10,0xa
80015916:	f4 09 00 09 	add	r9,r10,r9
8001591a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001591e:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
}
80015922:	10 9c       	mov	r12,r8
80015924:	2f ed       	sub	sp,-8
80015926:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001592a:	00 00       	add	r0,r0
8001592c:	80 01       	ld.sh	r1,r0[0x0]
8001592e:	57 82       	stdsp	sp[0x1e0],r2

80015930 <get_sampling_status>:

int get_sampling_status(void) {
80015930:	eb cd 40 c0 	pushm	r6-r7,lr
80015934:	1a 97       	mov	r7,sp
80015936:	48 56       	lddpc	r6,80015948 <get_sampling_status+0x18>
80015938:	1e 26       	rsub	r6,pc
	return sampleCounter;
8001593a:	ec f8 01 5c 	ld.w	r8,r6[348]
8001593e:	70 08       	ld.w	r8,r8[0x0]
}
80015940:	10 9c       	mov	r12,r8
80015942:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015946:	00 00       	add	r0,r0
80015948:	80 01       	ld.sh	r1,r0[0x0]
8001594a:	57 bc       	stdsp	sp[0x1ec],r12

8001594c <Init_ADC>:

// Initializes ADC (configures Pins, starts Clock, sets defaults)
void Init_ADC(void) {
8001594c:	eb cd 40 c0 	pushm	r6-r7,lr
80015950:	1a 97       	mov	r7,sp
80015952:	4b 96       	lddpc	r6,80015a34 <Init_ADC+0xe8>
80015954:	1e 26       	rsub	r6,pc
	function_generator=NULL;
80015956:	ec f8 02 84 	ld.w	r8,r6[644]
8001595a:	30 09       	mov	r9,0
8001595c:	91 09       	st.w	r8[0x0],r9
	// set mode to "high resolution"
	gpio_configure_pin(ADC_MODE0,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
8001595e:	30 3b       	mov	r11,3
80015960:	32 3c       	mov	r12,35
80015962:	f0 16 00 3c 	mcall	r6[240]
	gpio_configure_pin(ADC_MODE1,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);	
80015966:	30 1b       	mov	r11,1
80015968:	32 4c       	mov	r12,36
8001596a:	f0 16 00 3c 	mcall	r6[240]
	// set Format to Fixed-position TDM via SPI
	gpio_configure_pin(ADC_FORMAT0,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
8001596e:	30 3b       	mov	r11,3
80015970:	32 2c       	mov	r12,34
80015972:	f0 16 00 3c 	mcall	r6[240]
	gpio_configure_pin(ADC_FORMAT1,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);	
80015976:	30 1b       	mov	r11,1
80015978:	32 1c       	mov	r12,33
8001597a:	f0 16 00 3c 	mcall	r6[240]
	gpio_configure_pin(ADC_FORMAT2,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);	
8001597e:	30 1b       	mov	r11,1
80015980:	32 0c       	mov	r12,32
80015982:	f0 16 00 3c 	mcall	r6[240]
	
	// configure the four channels
	gpio_configure_pin(ADC_PWDN1,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
80015986:	30 3b       	mov	r11,3
80015988:	34 0c       	mov	r12,64
8001598a:	f0 16 00 3c 	mcall	r6[240]
	gpio_configure_pin(ADC_PWDN2,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
8001598e:	30 3b       	mov	r11,3
80015990:	34 1c       	mov	r12,65
80015992:	f0 16 00 3c 	mcall	r6[240]
	gpio_configure_pin(ADC_PWDN3,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
80015996:	30 3b       	mov	r11,3
80015998:	34 2c       	mov	r12,66
8001599a:	f0 16 00 3c 	mcall	r6[240]
	gpio_configure_pin(ADC_PWDN4,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
8001599e:	30 3b       	mov	r11,3
800159a0:	34 3c       	mov	r12,67
800159a2:	f0 16 00 3c 	mcall	r6[240]

	
	//gpio_configure_pin(AVR32_TC1_B0_0_0_PIN,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
	//gpio_configure_pin(AVR32_PIN_PC19, GPIO_DIR_OUTPUT| GPIO_INIT_HIGH);	

	ADC_Switch_Clock(true);	
800159a6:	30 1c       	mov	r12,1
800159a8:	f0 16 01 58 	mcall	r6[1376]
	//tc_write_rc(tc, EXAMPLE_TC_CHANNEL_ID, 0x2);     // Set RC value.
	// Start the timer/counter.
	//tc_start(tc, EXAMPLE_TC_CHANNEL_ID);
	
	// Enable edge-triggered interrupt.
	eic_options[0].eic_mode   = EIC_MODE_EDGE_TRIGGERED;
800159ac:	ec f9 01 74 	ld.w	r9,r6[372]
800159b0:	30 08       	mov	r8,0
800159b2:	b2 98       	st.b	r9[0x1],r8
	// Interrupt will trigger on falling edge.
	eic_options[0].eic_edge  = EIC_EDGE_FALLING_EDGE;
800159b4:	ec f9 01 74 	ld.w	r9,r6[372]
800159b8:	30 08       	mov	r8,0
800159ba:	b2 a8       	st.b	r9[0x2],r8
	// Initialize in synchronous mode : interrupt is synchronized to the clock
	eic_options[0].eic_async  = EIC_SYNCH_MODE;
800159bc:	ec f9 01 74 	ld.w	r9,r6[372]
800159c0:	30 08       	mov	r8,0
800159c2:	b2 d8       	st.b	r9[0x5],r8
	// Set the interrupt line number.
	eic_options[0].eic_line   = EXT_NMI;
800159c4:	ec f9 01 74 	ld.w	r9,r6[372]
800159c8:	30 08       	mov	r8,0
800159ca:	b2 88       	st.b	r9[0x0],r8
	
	gpio_enable_module_pin(AVR32_EIC_EXTINT_0_1_PIN, AVR32_EIC_EXTINT_0_1_FUNCTION);
800159cc:	30 1b       	mov	r11,1
800159ce:	37 5c       	mov	r12,117
800159d0:	f0 16 00 3e 	mcall	r6[248]
	
	//Disable_global_interrupt();
// Initialize interrupt vectors.
	
	eic_init(&AVR32_EIC, eic_options, 1);
800159d4:	30 1a       	mov	r10,1
800159d6:	ec fb 01 74 	ld.w	r11,r6[372]
800159da:	fe 7c 14 00 	mov	r12,-60416
800159de:	f0 16 01 b2 	mcall	r6[1736]

	//INTC_init_interrupts();
	// initialise SPI0 interface
	initSPI(&AVR32_SPI0, ADC_SPI_INDEX);
800159e2:	30 0b       	mov	r11,0
800159e4:	fc 7c 18 00 	mov	r12,-190464
800159e8:	f0 16 01 41 	mcall	r6[1284]
	spiInitDMA(0, 12);
800159ec:	30 cb       	mov	r11,12
800159ee:	30 0c       	mov	r12,0
800159f0:	f0 16 01 a2 	mcall	r6[1672]
	setSPIcallBack(ADC_SPI_INDEX, &processData);
800159f4:	ec fb 06 ac 	ld.w	r11,r6[1708]
800159f8:	30 0c       	mov	r12,0
800159fa:	f0 16 01 85 	mcall	r6[1556]
	// Register the EIC interrupt handlers to the interrupt controller.
	//INTC_register_interrupt(&eic_int_handler1, AVR32_EIC_IRQ_1, AVR32_INTC_INT1);
	// Enable the chosen lines and their corresponding interrupt feature.
	eic_enable_line(&AVR32_EIC, eic_options[0].eic_line);
800159fe:	ec f8 01 74 	ld.w	r8,r6[372]
80015a02:	11 88       	ld.ub	r8,r8[0x0]
80015a04:	10 9b       	mov	r11,r8
80015a06:	fe 7c 14 00 	mov	r12,-60416
80015a0a:	f0 16 01 d3 	mcall	r6[1868]
	eic_enable_interrupt_line(&AVR32_EIC, eic_options[0].eic_line);
80015a0e:	ec f8 01 74 	ld.w	r8,r6[372]
80015a12:	11 88       	ld.ub	r8,r8[0x0]
80015a14:	10 9b       	mov	r11,r8
80015a16:	fe 7c 14 00 	mov	r12,-60416
80015a1a:	f0 16 01 7f 	mcall	r6[1532]
	
	
	//Enable_global_interrupt();
	eic_clear_interrupt_line(&AVR32_EIC, EXT_NMI);
80015a1e:	30 0b       	mov	r11,0
80015a20:	fe 7c 14 00 	mov	r12,-60416
80015a24:	f0 16 00 db 	mcall	r6[876]
	
	// activate sync and clkdiv
	gpio_configure_pin(ADC_CLKDIV,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
80015a28:	30 3b       	mov	r11,3
80015a2a:	32 5c       	mov	r12,37
80015a2c:	f0 16 00 3c 	mcall	r6[240]

}
80015a30:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015a34:	80 01       	ld.sh	r1,r0[0x0]
80015a36:	57 d8       	stdsp	sp[0x1f4],r8

80015a38 <ADC_Switch_Clock>:

// Enable/Disable the clock to the ADC
void ADC_Switch_Clock(Bool on_off) {
80015a38:	eb cd 40 c0 	pushm	r6-r7,lr
80015a3c:	1a 97       	mov	r7,sp
80015a3e:	20 1d       	sub	sp,4
80015a40:	49 56       	lddpc	r6,80015a94 <ADC_Switch_Clock+0x5c>
80015a42:	1e 26       	rsub	r6,pc
80015a44:	18 98       	mov	r8,r12
80015a46:	ef 68 ff fc 	st.b	r7[-4],r8
	if (on_off==true) {
80015a4a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80015a4e:	30 18       	mov	r8,1
80015a50:	f0 09 18 00 	cp.b	r9,r8
80015a54:	c1 a1       	brne	80015a88 <ADC_Switch_Clock+0x50>
		gpio_enable_module_pin(AVR32_SCIF_GCLK_1_1_PIN, AVR32_SCIF_GCLK_1_1_FUNCTION);	
80015a56:	30 1b       	mov	r11,1
80015a58:	35 4c       	mov	r12,84
80015a5a:	f0 16 00 3e 	mcall	r6[248]

		gpio_configure_pin(ADC_CLKDIV,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
80015a5e:	30 3b       	mov	r11,3
80015a60:	32 5c       	mov	r12,37
80015a62:	f0 16 00 3c 	mcall	r6[240]
	
	
		//scif_gc_setup(AVR32_SCIF_GCLK_GCLK0PIN, SCIF_GCCTRL_CPUCLOCK, 1, 1);
		//scif_gc_enable(AVR32_SCIF_GCLK_GCLK0PIN);
		genclk_config_defaults(&gcfg, AVR32_SCIF_GCLK_GCLK1PIN);
80015a66:	30 ab       	mov	r11,10
80015a68:	ec fc 02 24 	ld.w	r12,r6[548]
80015a6c:	c2 4e       	rcall	800156b4 <genclk_config_defaults>
		genclk_config_set_source(&gcfg, GENCLK_SRC_PLL1);
80015a6e:	30 6b       	mov	r11,6
80015a70:	ec fc 02 24 	ld.w	r12,r6[548]
80015a74:	c2 fe       	rcall	800156d2 <genclk_config_set_source>
		genclk_config_set_divider(&gcfg, 2);
80015a76:	30 2b       	mov	r11,2
80015a78:	ec fc 02 24 	ld.w	r12,r6[548]
80015a7c:	c4 3e       	rcall	80015702 <genclk_config_set_divider>
		genclk_enable(&gcfg, AVR32_SCIF_GCLK_GCLK1PIN);
80015a7e:	30 ab       	mov	r11,10
80015a80:	ec fc 02 24 	ld.w	r12,r6[548]
80015a84:	c6 fe       	rcall	80015762 <genclk_enable>
80015a86:	c0 38       	rjmp	80015a8c <ADC_Switch_Clock+0x54>
	} else {
		genclk_disable(AVR32_SCIF_GCLK_GCLK1PIN);
80015a88:	30 ac       	mov	r12,10
80015a8a:	c8 2e       	rcall	8001578e <genclk_disable>
		
	}
}
80015a8c:	2f fd       	sub	sp,-4
80015a8e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015a92:	00 00       	add	r0,r0
80015a94:	80 01       	ld.sh	r1,r0[0x0]
80015a96:	58 c6       	cp.w	r6,12

80015a98 <ADC_Switch_Channel>:

// Switch the four input channels on or off
void ADC_Switch_Channel(int channel, Bool on_off){
80015a98:	eb cd 40 80 	pushm	r7,lr
80015a9c:	1a 97       	mov	r7,sp
80015a9e:	20 2d       	sub	sp,8
80015aa0:	ef 4c ff fc 	st.w	r7[-4],r12
80015aa4:	16 98       	mov	r8,r11
80015aa6:	ef 68 ff f8 	st.b	r7[-8],r8
	
}
80015aaa:	2f ed       	sub	sp,-8
80015aac:	e3 cd 80 80 	ldm	sp++,r7,pc

80015ab0 <ADC_Set_Mode>:

// configures the ADC mode (refer to datasheet for options)
void ADC_Set_Mode(int mode){};
80015ab0:	eb cd 40 80 	pushm	r7,lr
80015ab4:	1a 97       	mov	r7,sp
80015ab6:	20 1d       	sub	sp,4
80015ab8:	ef 4c ff fc 	st.w	r7[-4],r12
80015abc:	2f fd       	sub	sp,-4
80015abe:	e3 cd 80 80 	ldm	sp++,r7,pc

80015ac2 <ADC_Start_Oneshot>:

// enables continuous sampling  -- not implemented yet
//void ADC_Start_Sampling(void){}

// starts sampling, captures one buffer length and then stops
void ADC_Start_Oneshot(void){
80015ac2:	eb cd 40 c0 	pushm	r6-r7,lr
80015ac6:	1a 97       	mov	r7,sp
80015ac8:	48 46       	lddpc	r6,80015ad8 <ADC_Start_Oneshot+0x16>
80015aca:	1e 26       	rsub	r6,pc
	//Disable_global_interrupt();
	//eic_enable_interrupt_line(&AVR32_EIC, eic_options[0].eic_line);
	sampleCounter=0;
80015acc:	ec f8 01 5c 	ld.w	r8,r6[348]
80015ad0:	30 09       	mov	r9,0
80015ad2:	91 09       	st.w	r8[0x0],r9
	//Enable_global_interrupt();
};
80015ad4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015ad8:	80 01       	ld.sh	r1,r0[0x0]
80015ada:	59 4e       	cp.w	lr,20

80015adc <ADC_Stop_Sampling>:

// stops sampling immediately
void ADC_Stop_Sampling(void){};
80015adc:	eb cd 40 80 	pushm	r7,lr
80015ae0:	1a 97       	mov	r7,sp
80015ae2:	e3 cd 80 80 	ldm	sp++,r7,pc

80015ae6 <Sampling_Complete>:

// Returns true if one-shot sampling has finished
Bool Sampling_Complete(void){};
80015ae6:	eb cd 40 80 	pushm	r7,lr
80015aea:	1a 97       	mov	r7,sp
80015aec:	e3 cd 80 80 	ldm	sp++,r7,pc

80015af0 <eic_nmi_handler>:
__attribute__((__naked__))

void eic_nmi_handler( void )
{
//	int i=0;
	__asm__ __volatile__ (
80015af0:	d7 f1       	pushm	r0-r12,lr
			/* Save registers not saved upon NMI exception. */
			"pushm   r0-r12, lr\n\t"
			);
	//interrupt_counter++;
	
	if (sampleCounter<ADC_BUFFER_SIZE) {
80015af2:	ec f8 01 5c 	ld.w	r8,r6[348]
80015af6:	70 08       	ld.w	r8,r8[0x0]
80015af8:	e0 48 03 ff 	cp.w	r8,1023
80015afc:	e0 89 00 06 	brgt	80015b08 <eic_nmi_handler+0x18>
		spiTriggerDMA(0, 12);
80015b00:	30 cb       	mov	r11,12
80015b02:	30 0c       	mov	r12,0
80015b04:	f0 16 01 87 	mcall	r6[1564]
	} else {
		//eic_disable_interrupt_line(&AVR32_EIC,eic_options[0].eic_line);

	}
	eic_clear_interrupt_line(&AVR32_EIC, EXT_NMI);
80015b08:	30 0b       	mov	r11,0
80015b0a:	fe 7c 14 00 	mov	r12,-60416
80015b0e:	f0 16 00 db 	mcall	r6[876]
	__asm__ __volatile__ (
80015b12:	d7 f2       	popm	r0-r12,lr
80015b14:	d6 03       	rete
	...

80015b18 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80015b18:	eb cd 40 c0 	pushm	r6-r7,lr
80015b1c:	1a 97       	mov	r7,sp
80015b1e:	20 6d       	sub	sp,24
80015b20:	49 e6       	lddpc	r6,80015b98 <interpolate+0x80>
80015b22:	1e 26       	rsub	r6,pc
80015b24:	ef 4c ff f8 	st.w	r7[-8],r12
80015b28:	ef 4b ff f4 	st.w	r7[-12],r11
80015b2c:	ef 4a ff f0 	st.w	r7[-16],r10
80015b30:	ef 49 ff ec 	st.w	r7[-20],r9
80015b34:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80015b38:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015b3c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80015b40:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80015b44:	c0 41       	brne	80015b4c <interpolate+0x34>
	{
		return y1;
80015b46:	ee f8 ff ec 	ld.w	r8,r7[-20]
80015b4a:	c2 38       	rjmp	80015b90 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80015b4c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80015b50:	ee f8 ff ec 	ld.w	r8,r7[-20]
80015b54:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80015b58:	ee fa ff f8 	ld.w	r10,r7[-8]
80015b5c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80015b60:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80015b64:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80015b68:	ee fa ff f0 	ld.w	r10,r7[-16]
80015b6c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015b70:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80015b74:	12 9b       	mov	r11,r9
80015b76:	10 9c       	mov	r12,r8
80015b78:	f0 16 00 08 	mcall	r6[32]
80015b7c:	18 98       	mov	r8,r12
80015b7e:	10 99       	mov	r9,r8
80015b80:	ee f8 ff ec 	ld.w	r8,r7[-20]
80015b84:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80015b88:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80015b8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80015b90:	10 9c       	mov	r12,r8
80015b92:	2f ad       	sub	sp,-24
80015b94:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015b98:	80 01       	ld.sh	r1,r0[0x0]
80015b9a:	59 a6       	cp.w	r6,26

80015b9c <init_adxl345>:

uint8_t data_configuration[2] ={
DATA_SETTING_ADDRESS, FULL_RES | RANGE_16G};


void init_adxl345(void) {
80015b9c:	eb cd 40 c0 	pushm	r6-r7,lr
80015ba0:	1a 97       	mov	r7,sp
80015ba2:	4b 06       	lddpc	r6,80015c60 <init_adxl345+0xc4>
80015ba4:	1e 26       	rsub	r6,pc
	

	gyro_event.callback=0;
80015ba6:	ec f8 00 8c 	ld.w	r8,r6[140]
80015baa:	30 09       	mov	r9,0
80015bac:	91 c9       	st.w	r8[0x30],r9
	gyro_event.repetition_rate_ms=5;
80015bae:	ec f8 00 8c 	ld.w	r8,r6[140]
80015bb2:	30 59       	mov	r9,5
80015bb4:	91 a9       	st.w	r8[0x28],r9
	gyro_event.trigger_next_event=-1;
80015bb6:	ec f9 00 8c 	ld.w	r9,r6[140]
80015bba:	3f f8       	mov	r8,-1
80015bbc:	f3 68 00 2c 	st.b	r9[44],r8

	gyro_event.config.slave_address=ADXL_ALT_SLAVE_ADDRESS;
80015bc0:	ec f9 00 8c 	ld.w	r9,r6[140]
80015bc4:	35 38       	mov	r8,83
80015bc6:	b2 88       	st.b	r9[0x0],r8
	gyro_event.config.direction=I2C_WRITE;
80015bc8:	ec f9 00 8c 	ld.w	r9,r6[140]
80015bcc:	30 18       	mov	r8,1
80015bce:	f3 68 00 08 	st.b	r9[8],r8
	gyro_event.config.read_data=&acc_outputs.raw_data;
80015bd2:	ec f9 01 58 	ld.w	r9,r6[344]
80015bd6:	ec f8 00 8c 	ld.w	r8,r6[140]
80015bda:	91 59       	st.w	r8[0x14],r9
	gyro_event.config.read_count=6;
80015bdc:	ec f8 00 8c 	ld.w	r8,r6[140]
80015be0:	30 69       	mov	r9,6
80015be2:	91 69       	st.w	r8[0x18],r9
	gyro_event.config.write_data=&default_configuration;
80015be4:	ec f8 00 8c 	ld.w	r8,r6[140]
80015be8:	ec f9 01 40 	ld.w	r9,r6[320]
80015bec:	91 39       	st.w	r8[0xc],r9
	gyro_event.config.write_count=2;
80015bee:	ec f8 00 8c 	ld.w	r8,r6[140]
80015bf2:	30 29       	mov	r9,2
80015bf4:	91 49       	st.w	r8[0x10],r9
	gyro_event.config.i2c_speed=400000;
80015bf6:	ec f8 00 8c 	ld.w	r8,r6[140]
80015bfa:	e6 69 1a 80 	mov	r9,400000
80015bfe:	91 19       	st.w	r8[0x4],r9
	
	i2c_add_request(0, &gyro_event);
80015c00:	ec fb 00 8c 	ld.w	r11,r6[140]
80015c04:	30 0c       	mov	r12,0
80015c06:	f0 16 01 10 	mcall	r6[1088]
	i2c_trigger_request(0, gyro_event.schedule_slot);
80015c0a:	ec f8 00 8c 	ld.w	r8,r6[140]
80015c0e:	f1 38 00 24 	ld.ub	r8,r8[36]
80015c12:	10 9b       	mov	r11,r8
80015c14:	30 0c       	mov	r12,0
80015c16:	f0 16 00 60 	mcall	r6[384]
	
	
	gyro_event.config.direction=I2C_WRITE1_THEN_READ;
80015c1a:	ec f9 00 8c 	ld.w	r9,r6[140]
80015c1e:	30 28       	mov	r8,2
80015c20:	f3 68 00 08 	st.b	r9[8],r8
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
80015c24:	ec f9 00 8c 	ld.w	r9,r6[140]
80015c28:	33 28       	mov	r8,50
80015c2a:	f3 68 00 09 	st.b	r9[9],r8
	gyro_event.config.read_data=&acc_outputs;
80015c2e:	ec f8 00 8c 	ld.w	r8,r6[140]
80015c32:	ec f9 01 58 	ld.w	r9,r6[344]
80015c36:	91 59       	st.w	r8[0x14],r9
	gyro_event.config.read_count=6;
80015c38:	ec f8 00 8c 	ld.w	r8,r6[140]
80015c3c:	30 69       	mov	r9,6
80015c3e:	91 69       	st.w	r8[0x18],r9
	i2c_change_request(0, &gyro_event);
80015c40:	ec fb 00 8c 	ld.w	r11,r6[140]
80015c44:	30 0c       	mov	r12,0
80015c46:	f0 16 01 11 	mcall	r6[1092]
	i2c_trigger_request(0, gyro_event.schedule_slot);
80015c4a:	ec f8 00 8c 	ld.w	r8,r6[140]
80015c4e:	f1 38 00 24 	ld.ub	r8,r8[36]
80015c52:	10 9b       	mov	r11,r8
80015c54:	30 0c       	mov	r12,0
80015c56:	f0 16 00 60 	mcall	r6[384]
	/**/
}
80015c5a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015c5e:	00 00       	add	r0,r0
80015c60:	80 01       	ld.sh	r1,r0[0x0]
80015c62:	5a 28       	cp.w	r8,-30

80015c64 <init_adxl345_slow>:

void init_adxl345_slow(void) {
80015c64:	eb cd 40 c0 	pushm	r6-r7,lr
80015c68:	1a 97       	mov	r7,sp
80015c6a:	48 f6       	lddpc	r6,80015ca4 <init_adxl345_slow+0x40>
80015c6c:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = ADXL_ALT_SLAVE_ADDRESS, 
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM0, &twi_opt);
80015c6e:	ec fb 08 e0 	ld.w	r11,r6[2272]
80015c72:	fe 7c 38 00 	mov	r12,-51200
80015c76:	f0 16 00 70 	mcall	r6[448]
	twim_write(&AVR32_TWIM0, (uint8_t*)&default_configuration, 2, ADXL_ALT_SLAVE_ADDRESS, false);
80015c7a:	30 08       	mov	r8,0
80015c7c:	35 39       	mov	r9,83
80015c7e:	30 2a       	mov	r10,2
80015c80:	ec fb 01 40 	ld.w	r11,r6[320]
80015c84:	fe 7c 38 00 	mov	r12,-51200
80015c88:	f0 16 00 36 	mcall	r6[216]
	twim_write(&AVR32_TWIM0, (uint8_t*)&data_configuration, 2, ADXL_ALT_SLAVE_ADDRESS, false);
80015c8c:	30 08       	mov	r8,0
80015c8e:	35 39       	mov	r9,83
80015c90:	30 2a       	mov	r10,2
80015c92:	ec fb 08 74 	ld.w	r11,r6[2164]
80015c96:	fe 7c 38 00 	mov	r12,-51200
80015c9a:	f0 16 00 36 	mcall	r6[216]
}
80015c9e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015ca2:	00 00       	add	r0,r0
80015ca4:	80 01       	ld.sh	r1,r0[0x0]
80015ca6:	5a f0       	cp.w	r0,-17

80015ca8 <get_acc_data>:

acc_data* get_acc_data(void) {
80015ca8:	eb cd 40 c0 	pushm	r6-r7,lr
80015cac:	1a 97       	mov	r7,sp
80015cae:	48 86       	lddpc	r6,80015ccc <get_acc_data+0x24>
80015cb0:	1e 26       	rsub	r6,pc
	i2c_trigger_request(0, gyro_event.schedule_slot);
80015cb2:	ec f8 00 8c 	ld.w	r8,r6[140]
80015cb6:	f1 38 00 24 	ld.ub	r8,r8[36]
80015cba:	10 9b       	mov	r11,r8
80015cbc:	30 0c       	mov	r12,0
80015cbe:	f0 16 00 60 	mcall	r6[384]
	return &acc_outputs;
80015cc2:	ec f8 01 58 	ld.w	r8,r6[344]
}
80015cc6:	10 9c       	mov	r12,r8
80015cc8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015ccc:	80 01       	ld.sh	r1,r0[0x0]
80015cce:	5b 34       	cp.w	r4,-13

80015cd0 <get_acc_data_slow>:

acc_data* get_acc_data_slow(void) {
80015cd0:	eb cd 40 c0 	pushm	r6-r7,lr
80015cd4:	1a 97       	mov	r7,sp
80015cd6:	20 1d       	sub	sp,4
80015cd8:	4a 96       	lddpc	r6,80015d7c <get_acc_data_slow+0xac>
80015cda:	1e 26       	rsub	r6,pc
	int i;
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
80015cdc:	ec f9 00 8c 	ld.w	r9,r6[140]
80015ce0:	33 28       	mov	r8,50
80015ce2:	f3 68 00 09 	st.b	r9[9],r8
	twim_write(&AVR32_TWIM0, (uint8_t*) &gyro_event.config.write_then_read_preamble, 1, ADXL_ALT_SLAVE_ADDRESS, false);
80015ce6:	ec f8 00 8c 	ld.w	r8,r6[140]
80015cea:	f0 cb ff f7 	sub	r11,r8,-9
80015cee:	30 08       	mov	r8,0
80015cf0:	35 39       	mov	r9,83
80015cf2:	30 1a       	mov	r10,1
80015cf4:	fe 7c 38 00 	mov	r12,-51200
80015cf8:	f0 16 00 36 	mcall	r6[216]
	twim_read(&AVR32_TWIM0, (uint8_t*)&acc_outputs, 6, ADXL_ALT_SLAVE_ADDRESS, false);
80015cfc:	30 08       	mov	r8,0
80015cfe:	35 39       	mov	r9,83
80015d00:	30 6a       	mov	r10,6
80015d02:	ec fb 01 58 	ld.w	r11,r6[344]
80015d06:	fe 7c 38 00 	mov	r12,-51200
80015d0a:	f0 16 00 5f 	mcall	r6[380]
	
	for (i=0; i<3; i++) {
80015d0e:	30 08       	mov	r8,0
80015d10:	ef 48 ff fc 	st.w	r7[-4],r8
80015d14:	c2 98       	rjmp	80015d66 <get_acc_data_slow+0x96>
		acc_outputs.axes[i]=(int16_t)(acc_outputs.raw_data[2*i])+(int16_t)(acc_outputs.raw_data[2*i+1]<<8);
80015d16:	ee fb ff fc 	ld.w	r11,r7[-4]
80015d1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015d1e:	a1 78       	lsl	r8,0x1
80015d20:	ec f9 01 58 	ld.w	r9,r6[344]
80015d24:	f2 08 07 08 	ld.ub	r8,r9[r8]
80015d28:	5c 58       	castu.b	r8
80015d2a:	10 99       	mov	r9,r8
80015d2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015d30:	a1 78       	lsl	r8,0x1
80015d32:	2f f8       	sub	r8,-1
80015d34:	ec fa 01 58 	ld.w	r10,r6[344]
80015d38:	f4 08 07 08 	ld.ub	r8,r10[r8]
80015d3c:	5c 58       	castu.b	r8
80015d3e:	a9 68       	lsl	r8,0x8
80015d40:	5c 88       	casts.h	r8
80015d42:	f2 08 00 08 	add	r8,r9,r8
80015d46:	5c 88       	casts.h	r8
80015d48:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80015d4c:	ec fa 01 58 	ld.w	r10,r6[344]
80015d50:	f6 c8 ff fe 	sub	r8,r11,-2
80015d54:	a1 78       	lsl	r8,0x1
80015d56:	f4 08 00 08 	add	r8,r10,r8
80015d5a:	b0 19       	st.h	r8[0x2],r9
	int i;
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
	twim_write(&AVR32_TWIM0, (uint8_t*) &gyro_event.config.write_then_read_preamble, 1, ADXL_ALT_SLAVE_ADDRESS, false);
	twim_read(&AVR32_TWIM0, (uint8_t*)&acc_outputs, 6, ADXL_ALT_SLAVE_ADDRESS, false);
	
	for (i=0; i<3; i++) {
80015d5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015d60:	2f f8       	sub	r8,-1
80015d62:	ef 48 ff fc 	st.w	r7[-4],r8
80015d66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015d6a:	58 28       	cp.w	r8,2
80015d6c:	fe 9a ff d5 	brle	80015d16 <get_acc_data_slow+0x46>
		acc_outputs.axes[i]=(int16_t)(acc_outputs.raw_data[2*i])+(int16_t)(acc_outputs.raw_data[2*i+1]<<8);
	}			
	return &acc_outputs;
80015d70:	ec f8 01 58 	ld.w	r8,r6[344]
80015d74:	10 9c       	mov	r12,r8
80015d76:	2f fd       	sub	sp,-4
80015d78:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015d7c:	80 01       	ld.sh	r1,r0[0x0]
80015d7e:	5b 5e       	cp.w	lr,-11

80015d80 <f_abs>:

	}
	return result;
}

static inline float f_abs(const float a){
80015d80:	eb cd 40 80 	pushm	r7,lr
80015d84:	1a 97       	mov	r7,sp
80015d86:	20 1d       	sub	sp,4
80015d88:	ef 4c ff fc 	st.w	r7[-4],r12
	if (a >= 0.0)
80015d8c:	30 18       	mov	r8,1
80015d8e:	ee fa ff fc 	ld.w	r10,r7[-4]
80015d92:	30 09       	mov	r9,0
80015d94:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015d98:	e0 8c 00 03 	brvs	80015d9e <f_abs+0x1e>
80015d9c:	c0 24       	brge	80015da0 <f_abs+0x20>
80015d9e:	30 08       	mov	r8,0
80015da0:	5c 58       	castu.b	r8
80015da2:	c0 40       	breq	80015daa <f_abs+0x2a>
	{
		return a;
80015da4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015da8:	c0 58       	rjmp	80015db2 <f_abs+0x32>
	}else{
		return -a;
80015daa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015dae:	ee 18 80 00 	eorh	r8,0x8000
	}
}
80015db2:	10 9c       	mov	r12,r8
80015db4:	2f fd       	sub	sp,-4
80015db6:	e3 cd 80 80 	ldm	sp++,r7,pc

80015dba <median_filter_3x>:
static float inline center_window_4(float x) {
	return 1.0/(1+SQR(SQR(x)));
}


static float inline median_filter_3x(float a, float b, float c) {
80015dba:	eb cd 40 80 	pushm	r7,lr
80015dbe:	1a 97       	mov	r7,sp
80015dc0:	20 4d       	sub	sp,16
80015dc2:	ef 4c ff f8 	st.w	r7[-8],r12
80015dc6:	ef 4b ff f4 	st.w	r7[-12],r11
80015dca:	ef 4a ff f0 	st.w	r7[-16],r10
	float middle;
	if ((a <= b) && (a <= c)) {
80015dce:	30 18       	mov	r8,1
80015dd0:	ee fa ff f8 	ld.w	r10,r7[-8]
80015dd4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015dd8:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015ddc:	e0 8c 00 04 	brvs	80015de4 <median_filter_3x+0x2a>
80015de0:	e0 8a 00 03 	brle	80015de6 <median_filter_3x+0x2c>
80015de4:	30 08       	mov	r8,0
80015de6:	5c 58       	castu.b	r8
80015de8:	c2 50       	breq	80015e32 <median_filter_3x+0x78>
80015dea:	30 18       	mov	r8,1
80015dec:	ee fa ff f8 	ld.w	r10,r7[-8]
80015df0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80015df4:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015df8:	e0 8c 00 04 	brvs	80015e00 <median_filter_3x+0x46>
80015dfc:	e0 8a 00 03 	brle	80015e02 <median_filter_3x+0x48>
80015e00:	30 08       	mov	r8,0
80015e02:	5c 58       	castu.b	r8
80015e04:	c1 70       	breq	80015e32 <median_filter_3x+0x78>
		middle = (b <= c) ? b : c;
80015e06:	30 18       	mov	r8,1
80015e08:	ee fa ff f4 	ld.w	r10,r7[-12]
80015e0c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80015e10:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015e14:	e0 8c 00 04 	brvs	80015e1c <median_filter_3x+0x62>
80015e18:	e0 8a 00 03 	brle	80015e1e <median_filter_3x+0x64>
80015e1c:	30 08       	mov	r8,0
80015e1e:	5c 58       	castu.b	r8
80015e20:	c0 40       	breq	80015e28 <median_filter_3x+0x6e>
80015e22:	ee f8 ff f4 	ld.w	r8,r7[-12]
80015e26:	c0 38       	rjmp	80015e2c <median_filter_3x+0x72>
80015e28:	ee f8 ff f0 	ld.w	r8,r7[-16]
80015e2c:	ef 48 ff fc 	st.w	r7[-4],r8
}


static float inline median_filter_3x(float a, float b, float c) {
	float middle;
	if ((a <= b) && (a <= c)) {
80015e30:	c4 88       	rjmp	80015ec0 <median_filter_3x+0x106>
		middle = (b <= c) ? b : c;
	}
	else if ((b <= a) && (b <= c))
80015e32:	30 18       	mov	r8,1
80015e34:	ee fa ff f4 	ld.w	r10,r7[-12]
80015e38:	ee f9 ff f8 	ld.w	r9,r7[-8]
80015e3c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015e40:	e0 8c 00 04 	brvs	80015e48 <median_filter_3x+0x8e>
80015e44:	e0 8a 00 03 	brle	80015e4a <median_filter_3x+0x90>
80015e48:	30 08       	mov	r8,0
80015e4a:	5c 58       	castu.b	r8
80015e4c:	c2 50       	breq	80015e96 <median_filter_3x+0xdc>
80015e4e:	30 18       	mov	r8,1
80015e50:	ee fa ff f4 	ld.w	r10,r7[-12]
80015e54:	ee f9 ff f0 	ld.w	r9,r7[-16]
80015e58:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015e5c:	e0 8c 00 04 	brvs	80015e64 <median_filter_3x+0xaa>
80015e60:	e0 8a 00 03 	brle	80015e66 <median_filter_3x+0xac>
80015e64:	30 08       	mov	r8,0
80015e66:	5c 58       	castu.b	r8
80015e68:	c1 70       	breq	80015e96 <median_filter_3x+0xdc>
	{
		middle = (a <= c) ? a : c;
80015e6a:	30 18       	mov	r8,1
80015e6c:	ee fa ff f8 	ld.w	r10,r7[-8]
80015e70:	ee f9 ff f0 	ld.w	r9,r7[-16]
80015e74:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015e78:	e0 8c 00 04 	brvs	80015e80 <median_filter_3x+0xc6>
80015e7c:	e0 8a 00 03 	brle	80015e82 <median_filter_3x+0xc8>
80015e80:	30 08       	mov	r8,0
80015e82:	5c 58       	castu.b	r8
80015e84:	c0 40       	breq	80015e8c <median_filter_3x+0xd2>
80015e86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015e8a:	c0 38       	rjmp	80015e90 <median_filter_3x+0xd6>
80015e8c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80015e90:	ef 48 ff fc 	st.w	r7[-4],r8
static float inline median_filter_3x(float a, float b, float c) {
	float middle;
	if ((a <= b) && (a <= c)) {
		middle = (b <= c) ? b : c;
	}
	else if ((b <= a) && (b <= c))
80015e94:	c1 68       	rjmp	80015ec0 <median_filter_3x+0x106>
	{
		middle = (a <= c) ? a : c;
	} else {
	   middle = (a <= b) ? a : b;
80015e96:	30 18       	mov	r8,1
80015e98:	ee fa ff f8 	ld.w	r10,r7[-8]
80015e9c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015ea0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015ea4:	e0 8c 00 04 	brvs	80015eac <median_filter_3x+0xf2>
80015ea8:	e0 8a 00 03 	brle	80015eae <median_filter_3x+0xf4>
80015eac:	30 08       	mov	r8,0
80015eae:	5c 58       	castu.b	r8
80015eb0:	c0 40       	breq	80015eb8 <median_filter_3x+0xfe>
80015eb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015eb6:	c0 38       	rjmp	80015ebc <median_filter_3x+0x102>
80015eb8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80015ebc:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	return middle;
80015ec0:	ee f8 ff fc 	ld.w	r8,r7[-4]

}
80015ec4:	10 9c       	mov	r12,r8
80015ec6:	2f cd       	sub	sp,-16
80015ec8:	e3 cd 80 80 	ldm	sp++,r7,pc

80015ecc <interpolate>:


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80015ecc:	eb cd 40 c0 	pushm	r6-r7,lr
80015ed0:	1a 97       	mov	r7,sp
80015ed2:	20 6d       	sub	sp,24
80015ed4:	49 e6       	lddpc	r6,80015f4c <interpolate+0x80>
80015ed6:	1e 26       	rsub	r6,pc
80015ed8:	ef 4c ff f8 	st.w	r7[-8],r12
80015edc:	ef 4b ff f4 	st.w	r7[-12],r11
80015ee0:	ef 4a ff f0 	st.w	r7[-16],r10
80015ee4:	ef 49 ff ec 	st.w	r7[-20],r9
80015ee8:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80015eec:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015ef0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80015ef4:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80015ef8:	c0 41       	brne	80015f00 <interpolate+0x34>
	{
		return y1;
80015efa:	ee f8 ff ec 	ld.w	r8,r7[-20]
80015efe:	c2 38       	rjmp	80015f44 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80015f00:	ee f9 ff e8 	ld.w	r9,r7[-24]
80015f04:	ee f8 ff ec 	ld.w	r8,r7[-20]
80015f08:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80015f0c:	ee fa ff f8 	ld.w	r10,r7[-8]
80015f10:	ee f8 ff f4 	ld.w	r8,r7[-12]
80015f14:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80015f18:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80015f1c:	ee fa ff f0 	ld.w	r10,r7[-16]
80015f20:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015f24:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80015f28:	12 9b       	mov	r11,r9
80015f2a:	10 9c       	mov	r12,r8
80015f2c:	f0 16 00 08 	mcall	r6[32]
80015f30:	18 98       	mov	r8,r12
80015f32:	10 99       	mov	r9,r8
80015f34:	ee f8 ff ec 	ld.w	r8,r7[-20]
80015f38:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80015f3c:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80015f40:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80015f44:	10 9c       	mov	r12,r8
80015f46:	2f ad       	sub	sp,-24
80015f48:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015f4c:	80 01       	ld.sh	r1,r0[0x0]
80015f4e:	5d 5a       	*unknown*

80015f50 <bmp085_read_int>:
#include <stdbool.h>
#include "print_util.h"

pressure_data pressure_outputs;

int16_t bmp085_read_int(unsigned char address) {
80015f50:	eb cd 40 c0 	pushm	r6-r7,lr
80015f54:	1a 97       	mov	r7,sp
80015f56:	20 2d       	sub	sp,8
80015f58:	48 f6       	lddpc	r6,80015f94 <bmp085_read_int+0x44>
80015f5a:	1e 26       	rsub	r6,pc
80015f5c:	18 98       	mov	r8,r12
80015f5e:	ef 68 ff f8 	st.b	r7[-8],r8
	int16_t result;
	twim_write(&AVR32_TWIM0, (uint8_t*) &address, 1, BMP085_SLAVE_ADDRESS, false);
80015f62:	ee cb 00 08 	sub	r11,r7,8
80015f66:	30 08       	mov	r8,0
80015f68:	37 79       	mov	r9,119
80015f6a:	30 1a       	mov	r10,1
80015f6c:	fe 7c 38 00 	mov	r12,-51200
80015f70:	f0 16 00 36 	mcall	r6[216]
	twim_read(&AVR32_TWIM0, (uint8_t*)&(result), 2, BMP085_SLAVE_ADDRESS, false);
80015f74:	ee cb 00 02 	sub	r11,r7,2
80015f78:	30 08       	mov	r8,0
80015f7a:	37 79       	mov	r9,119
80015f7c:	30 2a       	mov	r10,2
80015f7e:	fe 7c 38 00 	mov	r12,-51200
80015f82:	f0 16 00 5f 	mcall	r6[380]
	return result;
80015f86:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80015f8a:	10 9c       	mov	r12,r8
80015f8c:	2f ed       	sub	sp,-8
80015f8e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015f92:	00 00       	add	r0,r0
80015f94:	80 01       	ld.sh	r1,r0[0x0]
80015f96:	5d de       	*unknown*

80015f98 <init_bmp085>:

void init_bmp085(){
80015f98:	eb cd 40 c0 	pushm	r6-r7,lr
80015f9c:	1a 97       	mov	r7,sp
80015f9e:	20 1d       	sub	sp,4
80015fa0:	49 36       	lddpc	r6,80015fec <init_bmp085+0x54>
80015fa2:	1e 26       	rsub	r6,pc
	int i;
	pressure_outputs.altitude_offset=0.0;
80015fa4:	ec f8 00 48 	ld.w	r8,r6[72]
80015fa8:	30 09       	mov	r9,0
80015faa:	91 89       	st.w	r8[0x20],r9
	for (i=0; i<3; i++) pressure_outputs.last_altitudes[i]=0.0;
80015fac:	30 08       	mov	r8,0
80015fae:	ef 48 ff fc 	st.w	r7[-4],r8
80015fb2:	c0 e8       	rjmp	80015fce <init_bmp085+0x36>
80015fb4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015fb8:	ec f8 00 48 	ld.w	r8,r6[72]
80015fbc:	2f c9       	sub	r9,-4
80015fbe:	30 0a       	mov	r10,0
80015fc0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80015fc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015fc8:	2f f8       	sub	r8,-1
80015fca:	ef 48 ff fc 	st.w	r7[-4],r8
80015fce:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015fd2:	58 28       	cp.w	r8,2
80015fd4:	fe 9a ff f0 	brle	80015fb4 <init_bmp085+0x1c>
	pressure_outputs.vario_vz=0.0;
80015fd8:	ec f8 00 48 	ld.w	r8,r6[72]
80015fdc:	30 09       	mov	r9,0
80015fde:	91 99       	st.w	r8[0x24],r9
	init_bmp085_slow();
80015fe0:	f0 16 01 f2 	mcall	r6[1992]
}
80015fe4:	2f fd       	sub	sp,-4
80015fe6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015fea:	00 00       	add	r0,r0
80015fec:	80 01       	ld.sh	r1,r0[0x0]
80015fee:	5e 26       	reths	r6
80015ff0:	42 4d       	lddsp	sp,sp[0x90]
80015ff2:	50 38       	stdsp	sp[0xc],r8
80015ff4:	35 2f       	mov	pc,82
80015ff6:	31 38       	mov	r8,19
80015ff8:	30 20       	mov	r0,2
80015ffa:	70 72       	ld.w	r2,r8[0x1c]
80015ffc:	65 73       	ld.w	r3,r2[0x5c]
80015ffe:	73 75       	ld.w	r5,r9[0x5c]
80016000:	72 65       	ld.w	r5,r9[0x18]
80016002:	20 73       	sub	r3,7
80016004:	65 6e       	ld.w	lr,r2[0x58]
80016006:	73 6f       	ld.w	pc,r9[0x58]
80016008:	72 20       	ld.w	r0,r9[0x8]
8001600a:	66 6f       	ld.w	pc,r3[0x18]
8001600c:	75 6e       	ld.w	lr,r10[0x58]
8001600e:	64 20       	ld.w	r0,r2[0x8]
80016010:	28 30       	sub	r0,-125
80016012:	78 37       	ld.w	r7,r12[0xc]
80016014:	37 29       	mov	r9,114
80016016:	0a 00       	add	r0,r5
80016018:	42 4d       	lddsp	sp,sp[0x90]
8001601a:	50 38       	stdsp	sp[0xc],r8
8001601c:	35 2f       	mov	pc,82
8001601e:	31 38       	mov	r8,19
80016020:	30 20       	mov	r0,2
80016022:	70 72       	ld.w	r2,r8[0x1c]
80016024:	65 73       	ld.w	r3,r2[0x5c]
80016026:	73 75       	ld.w	r5,r9[0x5c]
80016028:	72 65       	ld.w	r5,r9[0x18]
8001602a:	20 73       	sub	r3,7
8001602c:	65 6e       	ld.w	lr,r2[0x58]
8001602e:	73 6f       	ld.w	pc,r9[0x58]
80016030:	72 20       	ld.w	r0,r9[0x8]
80016032:	6e 6f       	ld.w	pc,r7[0x18]
80016034:	74 20       	ld.w	r0,r10[0x8]
80016036:	72 65       	ld.w	r5,r9[0x18]
80016038:	73 70       	ld.w	r0,r9[0x5c]
8001603a:	6f 6e       	ld.w	lr,r7[0x58]
8001603c:	64 69       	ld.w	r9,r2[0x18]
8001603e:	6e 67       	ld.w	r7,r7[0x18]
80016040:	20 28       	sub	r8,2
80016042:	30 78       	mov	r8,7
80016044:	37 37       	mov	r7,115
80016046:	29 0a       	sub	r10,-112
	...

8001604a <init_bmp085_slow>:

  int16_t ac1, ac2, ac3, b1, b2, mb, mc, md;
  uint16_t ac4, ac5, ac6;


void init_bmp085_slow(){
8001604a:	eb cd 40 c0 	pushm	r6-r7,lr
8001604e:	1a 97       	mov	r7,sp
80016050:	4d 36       	lddpc	r6,8001619c <init_bmp085_slow+0x152>
80016052:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = BMP085_SLAVE_ADDRESS,
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM0, &twi_opt);
80016054:	ec fb 08 dc 	ld.w	r11,r6[2268]
80016058:	fe 7c 38 00 	mov	r12,-51200
8001605c:	f0 16 00 70 	mcall	r6[448]

	if (twim_probe(&AVR32_TWIM0, BMP085_SLAVE_ADDRESS)==STATUS_OK) {
80016060:	37 7b       	mov	r11,119
80016062:	fe 7c 38 00 	mov	r12,-51200
80016066:	f0 16 01 07 	mcall	r6[1052]
8001606a:	18 98       	mov	r8,r12
8001606c:	58 08       	cp.w	r8,0
8001606e:	e0 81 00 8f 	brne	8001618c <init_bmp085_slow+0x142>
		dbg_print("BMP85/180 pressure sensor found (0x77)\n");
80016072:	fe cc 00 82 	sub	r12,pc,130
80016076:	f0 16 00 01 	mcall	r6[4]
	} else {
		dbg_print("BMP85/180 pressure sensor not responding (0x77)\n");
		return;
	}
	ac1 = 408;
8001607a:	ec f9 03 38 	ld.w	r9,r6[824]
8001607e:	e0 68 01 98 	mov	r8,408
80016082:	b2 08       	st.h	r9[0x0],r8
	ac2 = -72;
80016084:	ec f9 03 10 	ld.w	r9,r6[784]
80016088:	3b 88       	mov	r8,-72
8001608a:	b2 08       	st.h	r9[0x0],r8
	ac3 = -14383;
8001608c:	ec f9 02 98 	ld.w	r9,r6[664]
80016090:	fe 78 c7 d1 	mov	r8,-14383
80016094:	b2 08       	st.h	r9[0x0],r8
	ac4 = 32741;
80016096:	ec f9 02 f4 	ld.w	r9,r6[756]
8001609a:	e0 68 7f e5 	mov	r8,32741
8001609e:	b2 08       	st.h	r9[0x0],r8
	ac5 = 32757;
800160a0:	ec f9 03 14 	ld.w	r9,r6[788]
800160a4:	e0 68 7f f5 	mov	r8,32757
800160a8:	b2 08       	st.h	r9[0x0],r8
	ac6 = 23153;
800160aa:	ec f9 03 24 	ld.w	r9,r6[804]
800160ae:	e0 68 5a 71 	mov	r8,23153
800160b2:	b2 08       	st.h	r9[0x0],r8
	mc = -8711;
800160b4:	ec f9 02 cc 	ld.w	r9,r6[716]
800160b8:	fe 78 dd f9 	mov	r8,-8711
800160bc:	b2 08       	st.h	r9[0x0],r8
	md = 2868;
800160be:	ec f9 03 00 	ld.w	r9,r6[768]
800160c2:	e0 68 0b 34 	mov	r8,2868
800160c6:	b2 08       	st.h	r9[0x0],r8
	b1 = 6190;
800160c8:	ec f9 03 2c 	ld.w	r9,r6[812]
800160cc:	e0 68 18 2e 	mov	r8,6190
800160d0:	b2 08       	st.h	r9[0x0],r8
	b2 = 4;
800160d2:	ec f9 03 48 	ld.w	r9,r6[840]
800160d6:	30 48       	mov	r8,4
800160d8:	b2 08       	st.h	r9[0x0],r8

	
	ac1=bmp085_read_int(0xAA);
800160da:	e0 6c 00 aa 	mov	r12,170
800160de:	f0 16 00 45 	mcall	r6[276]
800160e2:	18 98       	mov	r8,r12
800160e4:	ec f9 03 38 	ld.w	r9,r6[824]
800160e8:	b2 08       	st.h	r9[0x0],r8
	ac2=bmp085_read_int(0xAC);
800160ea:	e0 6c 00 ac 	mov	r12,172
800160ee:	f0 16 00 45 	mcall	r6[276]
800160f2:	18 98       	mov	r8,r12
800160f4:	ec f9 03 10 	ld.w	r9,r6[784]
800160f8:	b2 08       	st.h	r9[0x0],r8
	ac3=bmp085_read_int(0xAE);
800160fa:	e0 6c 00 ae 	mov	r12,174
800160fe:	f0 16 00 45 	mcall	r6[276]
80016102:	18 98       	mov	r8,r12
80016104:	ec f9 02 98 	ld.w	r9,r6[664]
80016108:	b2 08       	st.h	r9[0x0],r8
	ac4=bmp085_read_int(0xB0);
8001610a:	e0 6c 00 b0 	mov	r12,176
8001610e:	f0 16 00 45 	mcall	r6[276]
80016112:	18 98       	mov	r8,r12
80016114:	ec f9 02 f4 	ld.w	r9,r6[756]
80016118:	b2 08       	st.h	r9[0x0],r8
	ac5=bmp085_read_int(0xB2);
8001611a:	e0 6c 00 b2 	mov	r12,178
8001611e:	f0 16 00 45 	mcall	r6[276]
80016122:	18 98       	mov	r8,r12
80016124:	ec f9 03 14 	ld.w	r9,r6[788]
80016128:	b2 08       	st.h	r9[0x0],r8
	ac6=bmp085_read_int(0xB4);
8001612a:	e0 6c 00 b4 	mov	r12,180
8001612e:	f0 16 00 45 	mcall	r6[276]
80016132:	18 98       	mov	r8,r12
80016134:	ec f9 03 24 	ld.w	r9,r6[804]
80016138:	b2 08       	st.h	r9[0x0],r8
	b1=bmp085_read_int(0xB6);
8001613a:	e0 6c 00 b6 	mov	r12,182
8001613e:	f0 16 00 45 	mcall	r6[276]
80016142:	18 98       	mov	r8,r12
80016144:	ec f9 03 2c 	ld.w	r9,r6[812]
80016148:	b2 08       	st.h	r9[0x0],r8
	b2=bmp085_read_int(0xB8);
8001614a:	e0 6c 00 b8 	mov	r12,184
8001614e:	f0 16 00 45 	mcall	r6[276]
80016152:	18 98       	mov	r8,r12
80016154:	ec f9 03 48 	ld.w	r9,r6[840]
80016158:	b2 08       	st.h	r9[0x0],r8
	mb=bmp085_read_int(0xBA);
8001615a:	e0 6c 00 ba 	mov	r12,186
8001615e:	f0 16 00 45 	mcall	r6[276]
80016162:	18 98       	mov	r8,r12
80016164:	ec f9 08 14 	ld.w	r9,r6[2068]
80016168:	b2 08       	st.h	r9[0x0],r8
	mc=bmp085_read_int(0xBC);
8001616a:	e0 6c 00 bc 	mov	r12,188
8001616e:	f0 16 00 45 	mcall	r6[276]
80016172:	18 98       	mov	r8,r12
80016174:	ec f9 02 cc 	ld.w	r9,r6[716]
80016178:	b2 08       	st.h	r9[0x0],r8
	md=bmp085_read_int(0xBE);
8001617a:	e0 6c 00 be 	mov	r12,190
8001617e:	f0 16 00 45 	mcall	r6[276]
80016182:	18 98       	mov	r8,r12
80016184:	ec f9 03 00 	ld.w	r9,r6[768]
80016188:	b2 08       	st.h	r9[0x0],r8
8001618a:	c0 68       	rjmp	80016196 <init_bmp085_slow+0x14c>
	twim_master_init(&AVR32_TWIM0, &twi_opt);

	if (twim_probe(&AVR32_TWIM0, BMP085_SLAVE_ADDRESS)==STATUS_OK) {
		dbg_print("BMP85/180 pressure sensor found (0x77)\n");
	} else {
		dbg_print("BMP85/180 pressure sensor not responding (0x77)\n");
8001618c:	fe cc 01 74 	sub	r12,pc,372
80016190:	f0 16 00 01 	mcall	r6[4]
		return;
80016194:	d7 03       	nop
	mb=bmp085_read_int(0xBA);
	mc=bmp085_read_int(0xBC);
	md=bmp085_read_int(0xBE);
	
	
}
80016196:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001619a:	00 00       	add	r0,r0
8001619c:	80 01       	ld.sh	r1,r0[0x0]
8001619e:	5e d6       	retvc	r6

800161a0 <get_pressure_data_slow>:

 


pressure_data* get_pressure_data_slow(float offset) {
800161a0:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
800161a4:	1a 97       	mov	r7,sp
800161a6:	21 4d       	sub	sp,80
800161a8:	fe f6 06 2c 	ld.w	r6,pc[1580]
800161ac:	1e 26       	rsub	r6,pc
800161ae:	ef 4c ff b0 	st.w	r7[-80],r12
		int32_t UT, UP, B3, B5, B6, X1, X2, X3, p;
		uint32_t B4, B7;
			
		uint8_t start_address;
		
		uint8_t start_command_temp []={BMP085_CONTROL, BMP085_READTEMPCMD};
800161b2:	ec f8 08 d8 	ld.w	r8,r6[2264]
800161b6:	90 08       	ld.sh	r8,r8[0x0]
800161b8:	ef 58 ff b8 	st.h	r7[-72],r8
		uint8_t start_command_pressure []={BMP085_CONTROL, BMP085_READPRESSURECMD+ (BMP085_OVERSAMPLING_MODE << 6)};
800161bc:	ec f8 08 d4 	ld.w	r8,r6[2260]
800161c0:	90 08       	ld.sh	r8,r8[0x0]
800161c2:	ef 58 ff b4 	st.h	r7[-76],r8
		int32_t sealevelPressure=101325;
800161c6:	e0 78 8b cd 	mov	r8,101325
800161ca:	ef 48 ff f4 	st.w	r7[-12],r8
		float dt;
		// calibration: use datasheet numbers!

		switch (pressure_outputs.state) {
800161ce:	ec f8 00 48 	ld.w	r8,r6[72]
800161d2:	70 c8       	ld.w	r8,r8[0x30]
800161d4:	58 18       	cp.w	r8,1
800161d6:	c1 50       	breq	80016200 <get_pressure_data_slow+0x60>
800161d8:	c0 53       	brcs	800161e2 <get_pressure_data_slow+0x42>
800161da:	58 28       	cp.w	r8,2
800161dc:	c3 80       	breq	8001624c <get_pressure_data_slow+0xac>
800161de:	e0 8f 02 e9 	bral	800167b0 <get_pressure_data_slow+0x610>
		case IDLE:
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_command_temp, 2, BMP085_SLAVE_ADDRESS, false);
800161e2:	ee cb 00 48 	sub	r11,r7,72
800161e6:	30 08       	mov	r8,0
800161e8:	37 79       	mov	r9,119
800161ea:	30 2a       	mov	r10,2
800161ec:	fe 7c 38 00 	mov	r12,-51200
800161f0:	f0 16 00 36 	mcall	r6[216]
		    //delay_ms(7);
			pressure_outputs.state=GET_TEMP;
800161f4:	ec f8 00 48 	ld.w	r8,r6[72]
800161f8:	30 19       	mov	r9,1
800161fa:	91 c9       	st.w	r8[0x30],r9
			break;
800161fc:	e0 8f 02 da 	bral	800167b0 <get_pressure_data_slow+0x610>
		case GET_TEMP:
			start_address=BMP085_TEMPDATA;
80016200:	3f 68       	mov	r8,-10
80016202:	ef 68 ff bb 	st.b	r7[-69],r8
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, BMP085_SLAVE_ADDRESS, false);
80016206:	ee cb 00 45 	sub	r11,r7,69
8001620a:	30 08       	mov	r8,0
8001620c:	37 79       	mov	r9,119
8001620e:	30 1a       	mov	r10,1
80016210:	fe 7c 38 00 	mov	r12,-51200
80016214:	f0 16 00 36 	mcall	r6[216]
			twim_read(&AVR32_TWIM0, (uint8_t*)&(pressure_outputs.raw_temperature), 2, BMP085_SLAVE_ADDRESS, false);
80016218:	ec f8 00 48 	ld.w	r8,r6[72]
8001621c:	f0 cb ff fd 	sub	r11,r8,-3
80016220:	30 08       	mov	r8,0
80016222:	37 79       	mov	r9,119
80016224:	30 2a       	mov	r10,2
80016226:	fe 7c 38 00 	mov	r12,-51200
8001622a:	f0 16 00 5f 	mcall	r6[380]
		
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_command_pressure, 2, BMP085_SLAVE_ADDRESS, false);
8001622e:	ee cb 00 4c 	sub	r11,r7,76
80016232:	30 08       	mov	r8,0
80016234:	37 79       	mov	r9,119
80016236:	30 2a       	mov	r10,2
80016238:	fe 7c 38 00 	mov	r12,-51200
8001623c:	f0 16 00 36 	mcall	r6[216]
			pressure_outputs.state=GET_PRESSURE;
80016240:	ec f8 00 48 	ld.w	r8,r6[72]
80016244:	30 29       	mov	r9,2
80016246:	91 c9       	st.w	r8[0x30],r9
			//delay_ms(15);
			break;
80016248:	e0 8f 02 b4 	bral	800167b0 <get_pressure_data_slow+0x610>
		case GET_PRESSURE:
			start_address=BMP085_PRESSUREDATA;
8001624c:	3f 68       	mov	r8,-10
8001624e:	ef 68 ff bb 	st.b	r7[-69],r8
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, BMP085_SLAVE_ADDRESS, false);
80016252:	ee cb 00 45 	sub	r11,r7,69
80016256:	30 08       	mov	r8,0
80016258:	37 79       	mov	r9,119
8001625a:	30 1a       	mov	r10,1
8001625c:	fe 7c 38 00 	mov	r12,-51200
80016260:	f0 16 00 36 	mcall	r6[216]
			twim_read(&AVR32_TWIM0, (uint8_t*)&(pressure_outputs.raw_pressure), 3, BMP085_SLAVE_ADDRESS, false);
80016264:	30 08       	mov	r8,0
80016266:	37 79       	mov	r9,119
80016268:	30 3a       	mov	r10,3
8001626a:	ec fb 00 48 	ld.w	r11,r6[72]
8001626e:	fe 7c 38 00 	mov	r12,-51200
80016272:	f0 16 00 5f 	mcall	r6[380]
		
			UP= ((uint32_t)pressure_outputs.raw_pressure[0]<<16 |(uint32_t)pressure_outputs.raw_pressure[1]<<8 | (uint32_t)pressure_outputs.raw_pressure[2]) >> (8-BMP085_OVERSAMPLING_MODE);
80016276:	ec f8 00 48 	ld.w	r8,r6[72]
8001627a:	11 88       	ld.ub	r8,r8[0x0]
8001627c:	f0 09 15 10 	lsl	r9,r8,0x10
80016280:	ec f8 00 48 	ld.w	r8,r6[72]
80016284:	11 98       	ld.ub	r8,r8[0x1]
80016286:	a9 68       	lsl	r8,0x8
80016288:	10 49       	or	r9,r8
8001628a:	ec f8 00 48 	ld.w	r8,r6[72]
8001628e:	11 a8       	ld.ub	r8,r8[0x2]
80016290:	f3 e8 10 08 	or	r8,r9,r8
80016294:	a7 88       	lsr	r8,0x6
80016296:	ef 48 ff cc 	st.w	r7[-52],r8
 
			UT=pressure_outputs.raw_temperature[0]<<8 |pressure_outputs.raw_temperature[1];
8001629a:	ec f8 00 48 	ld.w	r8,r6[72]
8001629e:	11 b8       	ld.ub	r8,r8[0x3]
800162a0:	f0 09 15 08 	lsl	r9,r8,0x8
800162a4:	ec f8 00 48 	ld.w	r8,r6[72]
800162a8:	11 c8       	ld.ub	r8,r8[0x4]
800162aa:	f3 e8 10 08 	or	r8,r9,r8
800162ae:	ef 48 ff c8 	st.w	r7[-56],r8
			// step 1
			X1 = (UT - (int32_t)ac6) * ((int32_t)ac5) / pow(2,15);
800162b2:	ec f8 03 24 	ld.w	r8,r6[804]
800162b6:	90 08       	ld.sh	r8,r8[0x0]
800162b8:	5c 78       	castu.h	r8
800162ba:	ee f9 ff c8 	ld.w	r9,r7[-56]
800162be:	10 19       	sub	r9,r8
800162c0:	ec f8 03 14 	ld.w	r8,r6[788]
800162c4:	90 08       	ld.sh	r8,r8[0x0]
800162c6:	5c 78       	castu.h	r8
800162c8:	f2 08 02 48 	mul	r8,r9,r8
800162cc:	10 9c       	mov	r12,r8
800162ce:	f0 16 00 1a 	mcall	r6[104]
800162d2:	30 08       	mov	r8,0
800162d4:	fc 19 40 e0 	movh	r9,0x40e0
800162d8:	f0 16 00 0c 	mcall	r6[48]
800162dc:	14 98       	mov	r8,r10
800162de:	16 99       	mov	r9,r11
800162e0:	10 9a       	mov	r10,r8
800162e2:	12 9b       	mov	r11,r9
800162e4:	f0 16 00 14 	mcall	r6[80]
800162e8:	18 98       	mov	r8,r12
800162ea:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = ((int32_t)mc * pow(2,11)) / (X1+(int32_t)md);
800162ee:	ec f8 02 cc 	ld.w	r8,r6[716]
800162f2:	90 08       	ld.sh	r8,r8[0x0]
800162f4:	10 9c       	mov	r12,r8
800162f6:	f0 16 00 1a 	mcall	r6[104]
800162fa:	30 08       	mov	r8,0
800162fc:	fc 19 40 a0 	movh	r9,0x40a0
80016300:	f0 16 00 03 	mcall	r6[12]
80016304:	14 98       	mov	r8,r10
80016306:	16 99       	mov	r9,r11
80016308:	10 92       	mov	r2,r8
8001630a:	12 93       	mov	r3,r9
8001630c:	ec f8 03 00 	ld.w	r8,r6[768]
80016310:	90 08       	ld.sh	r8,r8[0x0]
80016312:	10 99       	mov	r9,r8
80016314:	ee f8 ff dc 	ld.w	r8,r7[-36]
80016318:	f2 08 00 08 	add	r8,r9,r8
8001631c:	10 9c       	mov	r12,r8
8001631e:	f0 16 00 1a 	mcall	r6[104]
80016322:	14 98       	mov	r8,r10
80016324:	16 99       	mov	r9,r11
80016326:	04 9a       	mov	r10,r2
80016328:	06 9b       	mov	r11,r3
8001632a:	f0 16 00 0c 	mcall	r6[48]
8001632e:	14 98       	mov	r8,r10
80016330:	16 99       	mov	r9,r11
80016332:	10 9a       	mov	r10,r8
80016334:	12 9b       	mov	r11,r9
80016336:	f0 16 00 14 	mcall	r6[80]
8001633a:	18 98       	mov	r8,r12
8001633c:	ef 48 ff e0 	st.w	r7[-32],r8
			B5 = X1 + X2;
80016340:	ee f9 ff dc 	ld.w	r9,r7[-36]
80016344:	ee f8 ff e0 	ld.w	r8,r7[-32]
80016348:	f2 08 00 08 	add	r8,r9,r8
8001634c:	ef 48 ff d4 	st.w	r7[-44],r8
			pressure_outputs.temperature = (B5+8)/pow(2,4);
80016350:	ee f8 ff d4 	ld.w	r8,r7[-44]
80016354:	2f 88       	sub	r8,-8
80016356:	10 9c       	mov	r12,r8
80016358:	f0 16 00 1a 	mcall	r6[104]
8001635c:	30 08       	mov	r8,0
8001635e:	fc 19 40 30 	movh	r9,0x4030
80016362:	f0 16 00 0c 	mcall	r6[48]
80016366:	14 98       	mov	r8,r10
80016368:	16 99       	mov	r9,r11
8001636a:	10 9a       	mov	r10,r8
8001636c:	12 9b       	mov	r11,r9
8001636e:	f0 16 00 09 	mcall	r6[36]
80016372:	18 99       	mov	r9,r12
80016374:	ec f8 00 48 	ld.w	r8,r6[72]
80016378:	91 39       	st.w	r8[0xc],r9
			pressure_outputs.temperature /= 10;
8001637a:	ec f8 00 48 	ld.w	r8,r6[72]
8001637e:	70 38       	ld.w	r8,r8[0xc]
80016380:	fc 1b 41 20 	movh	r11,0x4120
80016384:	10 9c       	mov	r12,r8
80016386:	f0 16 00 08 	mcall	r6[32]
8001638a:	18 98       	mov	r8,r12
8001638c:	10 99       	mov	r9,r8
8001638e:	ec f8 00 48 	ld.w	r8,r6[72]
80016392:	91 39       	st.w	r8[0xc],r9
	
			// do pressure calcs
			B6 = B5 - 4000;
80016394:	ee f8 ff d4 	ld.w	r8,r7[-44]
80016398:	f0 c8 0f a0 	sub	r8,r8,4000
8001639c:	ef 48 ff d8 	st.w	r7[-40],r8
			X1 = ((int32_t)b2 * ( (B6 * B6)>>12 )) >> 11;
800163a0:	ec f8 03 48 	ld.w	r8,r6[840]
800163a4:	90 08       	ld.sh	r8,r8[0x0]
800163a6:	10 99       	mov	r9,r8
800163a8:	ee fa ff d8 	ld.w	r10,r7[-40]
800163ac:	ee f8 ff d8 	ld.w	r8,r7[-40]
800163b0:	f4 08 02 48 	mul	r8,r10,r8
800163b4:	ad 48       	asr	r8,0xc
800163b6:	f2 08 02 48 	mul	r8,r9,r8
800163ba:	ab 58       	asr	r8,0xb
800163bc:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = ((int32_t)ac2 * B6) >> 11;
800163c0:	ec f8 03 10 	ld.w	r8,r6[784]
800163c4:	90 08       	ld.sh	r8,r8[0x0]
800163c6:	10 99       	mov	r9,r8
800163c8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800163cc:	f2 08 02 48 	mul	r8,r9,r8
800163d0:	ab 58       	asr	r8,0xb
800163d2:	ef 48 ff e0 	st.w	r7[-32],r8
			X3 = X1 + X2;
800163d6:	ee f9 ff dc 	ld.w	r9,r7[-36]
800163da:	ee f8 ff e0 	ld.w	r8,r7[-32]
800163de:	f2 08 00 08 	add	r8,r9,r8
800163e2:	ef 48 ff e4 	st.w	r7[-28],r8
			B3 = ((((int32_t)ac1*4 + X3) << BMP085_OVERSAMPLING_MODE) + 2) / 4;
800163e6:	ec f8 03 38 	ld.w	r8,r6[824]
800163ea:	90 08       	ld.sh	r8,r8[0x0]
800163ec:	f0 09 15 02 	lsl	r9,r8,0x2
800163f0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800163f4:	f2 08 00 08 	add	r8,r9,r8
800163f8:	a3 68       	lsl	r8,0x2
800163fa:	2f e8       	sub	r8,-2
800163fc:	f0 c9 ff fd 	sub	r9,r8,-3
80016400:	58 08       	cp.w	r8,0
80016402:	f2 08 17 50 	movlt	r8,r9
80016406:	a3 48       	asr	r8,0x2
80016408:	ef 48 ff d0 	st.w	r7[-48],r8


			X1 = ((int32_t)ac3 * B6) >> 13;
8001640c:	ec f8 02 98 	ld.w	r8,r6[664]
80016410:	90 08       	ld.sh	r8,r8[0x0]
80016412:	10 99       	mov	r9,r8
80016414:	ee f8 ff d8 	ld.w	r8,r7[-40]
80016418:	f2 08 02 48 	mul	r8,r9,r8
8001641c:	ad 58       	asr	r8,0xd
8001641e:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = ((int32_t)b1 * ((B6 * B6) >> 12)) >> 16;
80016422:	ec f8 03 2c 	ld.w	r8,r6[812]
80016426:	90 08       	ld.sh	r8,r8[0x0]
80016428:	10 99       	mov	r9,r8
8001642a:	ee fa ff d8 	ld.w	r10,r7[-40]
8001642e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80016432:	f4 08 02 48 	mul	r8,r10,r8
80016436:	ad 48       	asr	r8,0xc
80016438:	f2 08 02 48 	mul	r8,r9,r8
8001643c:	b1 48       	asr	r8,0x10
8001643e:	ef 48 ff e0 	st.w	r7[-32],r8
			X3 = ((X1 + X2) + 2) >> 2;
80016442:	ee f9 ff dc 	ld.w	r9,r7[-36]
80016446:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001644a:	f2 08 00 08 	add	r8,r9,r8
8001644e:	2f e8       	sub	r8,-2
80016450:	a3 48       	asr	r8,0x2
80016452:	ef 48 ff e4 	st.w	r7[-28],r8
			B4 = ((uint32_t)ac4 * (uint32_t)(X3 + 32768)) >> 15;
80016456:	ec f8 02 f4 	ld.w	r8,r6[756]
8001645a:	90 08       	ld.sh	r8,r8[0x0]
8001645c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80016460:	ee f8 ff e4 	ld.w	r8,r7[-28]
80016464:	f0 c8 80 00 	sub	r8,r8,-32768
80016468:	f2 08 02 48 	mul	r8,r9,r8
8001646c:	af 98       	lsr	r8,0xf
8001646e:	ef 48 ff ec 	st.w	r7[-20],r8
			B7 = ((uint32_t)UP - B3) * (uint32_t)( 50000UL >> BMP085_OVERSAMPLING_MODE );
80016472:	ee f9 ff cc 	ld.w	r9,r7[-52]
80016476:	ee f8 ff d0 	ld.w	r8,r7[-48]
8001647a:	10 19       	sub	r9,r8
8001647c:	e0 68 30 d4 	mov	r8,12500
80016480:	f2 08 02 48 	mul	r8,r9,r8
80016484:	ef 48 ff f0 	st.w	r7[-16],r8


			if (B7 < 0x80000000) {
80016488:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001648c:	58 08       	cp.w	r8,0
8001648e:	c0 b5       	brlt	800164a4 <get_pressure_data_slow+0x304>
				p = (B7 * 2) / B4;
80016490:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016494:	a1 78       	lsl	r8,0x1
80016496:	ee f9 ff ec 	ld.w	r9,r7[-20]
8001649a:	f0 09 0d 08 	divu	r8,r8,r9
8001649e:	ef 48 ff e8 	st.w	r7[-24],r8
800164a2:	c0 a8       	rjmp	800164b6 <get_pressure_data_slow+0x316>
			} else {
				p = (B7 / B4) * 2;
800164a4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800164a8:	ee f9 ff ec 	ld.w	r9,r7[-20]
800164ac:	f0 09 0d 08 	divu	r8,r8,r9
800164b0:	a1 78       	lsl	r8,0x1
800164b2:	ef 48 ff e8 	st.w	r7[-24],r8
			}
			X1 = (p >> 8) * (p >> 8);
800164b6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800164ba:	f0 09 14 08 	asr	r9,r8,0x8
800164be:	ee f8 ff e8 	ld.w	r8,r7[-24]
800164c2:	a9 48       	asr	r8,0x8
800164c4:	f2 08 02 48 	mul	r8,r9,r8
800164c8:	ef 48 ff dc 	st.w	r7[-36],r8
			X1 = (X1 * 3038) >> 16;
800164cc:	ee f9 ff dc 	ld.w	r9,r7[-36]
800164d0:	e0 68 0b de 	mov	r8,3038
800164d4:	f2 08 02 48 	mul	r8,r9,r8
800164d8:	b1 48       	asr	r8,0x10
800164da:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = (-7357 * p) >> 16;
800164de:	ee f9 ff e8 	ld.w	r9,r7[-24]
800164e2:	fe 78 e3 43 	mov	r8,-7357
800164e6:	f2 08 02 48 	mul	r8,r9,r8
800164ea:	b1 48       	asr	r8,0x10
800164ec:	ef 48 ff e0 	st.w	r7[-32],r8

			p = p + ((X1 + X2 + (int32_t)3791)>>4);
800164f0:	ee f9 ff dc 	ld.w	r9,r7[-36]
800164f4:	ee f8 ff e0 	ld.w	r8,r7[-32]
800164f8:	f2 08 00 08 	add	r8,r9,r8
800164fc:	f0 c8 f1 31 	sub	r8,r8,-3791
80016500:	a5 48       	asr	r8,0x4
80016502:	ee f9 ff e8 	ld.w	r9,r7[-24]
80016506:	f2 08 00 08 	add	r8,r9,r8
8001650a:	ef 48 ff e8 	st.w	r7[-24],r8

			pressure_outputs.pressure=p;
8001650e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80016512:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
80016516:	ec f8 00 48 	ld.w	r8,r6[72]
8001651a:	91 29       	st.w	r8[0x8],r9
		
			vertical_speed=pressure_outputs.altitude;
8001651c:	ec f8 00 48 	ld.w	r8,r6[72]
80016520:	70 78       	ld.w	r8,r8[0x1c]
80016522:	ef 48 ff c4 	st.w	r7[-60],r8
			altitude=44330.0 * (1.0 - pow(pressure_outputs.pressure /sealevelPressure,0.190295)) + pressure_outputs.altitude_offset;
80016526:	ec f8 00 48 	ld.w	r8,r6[72]
8001652a:	70 28       	ld.w	r8,r8[0x8]
8001652c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016530:	e5 a6 09 09 	cop	cp0,cr9,cr0,cr9,0x4c
80016534:	12 9b       	mov	r11,r9
80016536:	10 9c       	mov	r12,r8
80016538:	f0 16 00 08 	mcall	r6[32]
8001653c:	18 98       	mov	r8,r12
8001653e:	10 9c       	mov	r12,r8
80016540:	f0 16 00 02 	mcall	r6[8]
80016544:	e0 68 d1 24 	mov	r8,53540
80016548:	ea 18 28 cb 	orh	r8,0x28cb
8001654c:	e0 69 5b 96 	mov	r9,23446
80016550:	ea 19 3f c8 	orh	r9,0x3fc8
80016554:	f0 16 01 b1 	mcall	r6[1732]
80016558:	14 98       	mov	r8,r10
8001655a:	16 99       	mov	r9,r11
8001655c:	30 0a       	mov	r10,0
8001655e:	fc 1b 3f f0 	movh	r11,0x3ff0
80016562:	f0 16 00 11 	mcall	r6[68]
80016566:	14 98       	mov	r8,r10
80016568:	16 99       	mov	r9,r11
8001656a:	10 9a       	mov	r10,r8
8001656c:	12 9b       	mov	r11,r9
8001656e:	30 08       	mov	r8,0
80016570:	e0 69 a5 40 	mov	r9,42304
80016574:	ea 19 40 e5 	orh	r9,0x40e5
80016578:	f0 16 00 03 	mcall	r6[12]
8001657c:	14 98       	mov	r8,r10
8001657e:	16 99       	mov	r9,r11
80016580:	10 92       	mov	r2,r8
80016582:	12 93       	mov	r3,r9
80016584:	ec f8 00 48 	ld.w	r8,r6[72]
80016588:	70 88       	ld.w	r8,r8[0x20]
8001658a:	10 9c       	mov	r12,r8
8001658c:	f0 16 00 02 	mcall	r6[8]
80016590:	14 98       	mov	r8,r10
80016592:	16 99       	mov	r9,r11
80016594:	04 9a       	mov	r10,r2
80016596:	06 9b       	mov	r11,r3
80016598:	f0 16 00 05 	mcall	r6[20]
8001659c:	14 98       	mov	r8,r10
8001659e:	16 99       	mov	r9,r11
800165a0:	10 9a       	mov	r10,r8
800165a2:	12 9b       	mov	r11,r9
800165a4:	f0 16 00 09 	mcall	r6[36]
800165a8:	18 98       	mov	r8,r12
800165aa:	ef 48 ff c0 	st.w	r7[-64],r8
			
			for (i=0; i<2; i++) {
800165ae:	30 08       	mov	r8,0
800165b0:	ef 48 ff bc 	st.w	r7[-68],r8
800165b4:	c1 68       	rjmp	800165e0 <get_pressure_data_slow+0x440>
				pressure_outputs.last_altitudes[i]=pressure_outputs.last_altitudes[i+1];
800165b6:	ee f9 ff bc 	ld.w	r9,r7[-68]
800165ba:	ee f8 ff bc 	ld.w	r8,r7[-68]
800165be:	f0 ca ff ff 	sub	r10,r8,-1
800165c2:	ec f8 00 48 	ld.w	r8,r6[72]
800165c6:	2f ca       	sub	r10,-4
800165c8:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
800165cc:	ec f8 00 48 	ld.w	r8,r6[72]
800165d0:	2f c9       	sub	r9,-4
800165d2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pressure_outputs.pressure=p;
		
			vertical_speed=pressure_outputs.altitude;
			altitude=44330.0 * (1.0 - pow(pressure_outputs.pressure /sealevelPressure,0.190295)) + pressure_outputs.altitude_offset;
			
			for (i=0; i<2; i++) {
800165d6:	ee f8 ff bc 	ld.w	r8,r7[-68]
800165da:	2f f8       	sub	r8,-1
800165dc:	ef 48 ff bc 	st.w	r7[-68],r8
800165e0:	ee f8 ff bc 	ld.w	r8,r7[-68]
800165e4:	58 18       	cp.w	r8,1
800165e6:	fe 9a ff e8 	brle	800165b6 <get_pressure_data_slow+0x416>
				pressure_outputs.last_altitudes[i]=pressure_outputs.last_altitudes[i+1];
			}
			pressure_outputs.last_altitudes[2]=altitude;
800165ea:	ec f8 00 48 	ld.w	r8,r6[72]
800165ee:	ee f9 ff c0 	ld.w	r9,r7[-64]
800165f2:	91 69       	st.w	r8[0x18],r9
			altitude=median_filter_3x(pressure_outputs.last_altitudes[0], pressure_outputs.last_altitudes[1], pressure_outputs.last_altitudes[2]);
800165f4:	ec f8 00 48 	ld.w	r8,r6[72]
800165f8:	70 6a       	ld.w	r10,r8[0x18]
800165fa:	ec f8 00 48 	ld.w	r8,r6[72]
800165fe:	70 59       	ld.w	r9,r8[0x14]
80016600:	ec f8 00 48 	ld.w	r8,r6[72]
80016604:	70 48       	ld.w	r8,r8[0x10]
80016606:	12 9b       	mov	r11,r9
80016608:	10 9c       	mov	r12,r8
8001660a:	fe b0 fb d8 	rcall	80015dba <median_filter_3x>
8001660e:	18 98       	mov	r8,r12
80016610:	ef 48 ff c0 	st.w	r7[-64],r8
			
			if (f_abs(altitude-pressure_outputs.altitude)<15.0) {
80016614:	ec f8 00 48 	ld.w	r8,r6[72]
80016618:	70 78       	ld.w	r8,r8[0x1c]
8001661a:	ee f9 ff c0 	ld.w	r9,r7[-64]
8001661e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80016622:	10 9c       	mov	r12,r8
80016624:	fe b0 fb ae 	rcall	80015d80 <f_abs>
80016628:	18 9a       	mov	r10,r12
8001662a:	30 18       	mov	r8,1
8001662c:	fc 19 41 70 	movh	r9,0x4170
80016630:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80016634:	e0 8c 00 03 	brvs	8001663a <get_pressure_data_slow+0x49a>
80016638:	c0 25       	brlt	8001663c <get_pressure_data_slow+0x49c>
8001663a:	30 08       	mov	r8,0
8001663c:	5c 58       	castu.b	r8
8001663e:	c3 40       	breq	800166a6 <get_pressure_data_slow+0x506>
				pressure_outputs.altitude = (BARO_ALT_LPF*pressure_outputs.altitude) + (1.0-BARO_ALT_LPF)*altitude;
80016640:	ec f8 00 48 	ld.w	r8,r6[72]
80016644:	70 78       	ld.w	r8,r8[0x1c]
80016646:	10 9c       	mov	r12,r8
80016648:	f0 16 00 02 	mcall	r6[8]
8001664c:	e0 68 66 66 	mov	r8,26214
80016650:	ea 18 66 66 	orh	r8,0x6666
80016654:	e0 69 66 66 	mov	r9,26214
80016658:	ea 19 3f ee 	orh	r9,0x3fee
8001665c:	f0 16 00 03 	mcall	r6[12]
80016660:	14 98       	mov	r8,r10
80016662:	16 99       	mov	r9,r11
80016664:	10 92       	mov	r2,r8
80016666:	12 93       	mov	r3,r9
80016668:	ee fc ff c0 	ld.w	r12,r7[-64]
8001666c:	f0 16 00 02 	mcall	r6[8]
80016670:	e0 68 99 a0 	mov	r8,39328
80016674:	ea 18 99 99 	orh	r8,0x9999
80016678:	e0 69 99 99 	mov	r9,39321
8001667c:	ea 19 3f a9 	orh	r9,0x3fa9
80016680:	f0 16 00 03 	mcall	r6[12]
80016684:	14 98       	mov	r8,r10
80016686:	16 99       	mov	r9,r11
80016688:	04 9a       	mov	r10,r2
8001668a:	06 9b       	mov	r11,r3
8001668c:	f0 16 00 05 	mcall	r6[20]
80016690:	14 98       	mov	r8,r10
80016692:	16 99       	mov	r9,r11
80016694:	10 9a       	mov	r10,r8
80016696:	12 9b       	mov	r11,r9
80016698:	f0 16 00 09 	mcall	r6[36]
8001669c:	18 99       	mov	r9,r12
8001669e:	ec f8 00 48 	ld.w	r8,r6[72]
800166a2:	91 79       	st.w	r8[0x1c],r9
800166a4:	c0 68       	rjmp	800166b0 <get_pressure_data_slow+0x510>
			}else {
				pressure_outputs.altitude = altitude;
800166a6:	ec f8 00 48 	ld.w	r8,r6[72]
800166aa:	ee f9 ff c0 	ld.w	r9,r7[-64]
800166ae:	91 79       	st.w	r8[0x1c],r9
			}
			
			dt = (get_micros()-pressure_outputs.last_update)/1000000.0;
800166b0:	f0 16 00 29 	mcall	r6[164]
800166b4:	18 99       	mov	r9,r12
800166b6:	ec f8 00 48 	ld.w	r8,r6[72]
800166ba:	70 a8       	ld.w	r8,r8[0x28]
800166bc:	f2 08 01 08 	sub	r8,r9,r8
800166c0:	10 9c       	mov	r12,r8
800166c2:	f0 16 00 51 	mcall	r6[324]
800166c6:	30 08       	mov	r8,0
800166c8:	e0 69 84 80 	mov	r9,33920
800166cc:	ea 19 41 2e 	orh	r9,0x412e
800166d0:	f0 16 00 0c 	mcall	r6[48]
800166d4:	14 98       	mov	r8,r10
800166d6:	16 99       	mov	r9,r11
800166d8:	10 9a       	mov	r10,r8
800166da:	12 9b       	mov	r11,r9
800166dc:	f0 16 00 09 	mcall	r6[36]
800166e0:	18 98       	mov	r8,r12
800166e2:	ef 48 ff f8 	st.w	r7[-8],r8
			pressure_outputs.dt=dt;
800166e6:	ec f8 00 48 	ld.w	r8,r6[72]
800166ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
800166ee:	91 d9       	st.w	r8[0x34],r9
			vertical_speed=-(pressure_outputs.altitude-vertical_speed)/dt;
800166f0:	ec f8 00 48 	ld.w	r8,r6[72]
800166f4:	70 79       	ld.w	r9,r8[0x1c]
800166f6:	ee f8 ff c4 	ld.w	r8,r7[-60]
800166fa:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800166fe:	ee 18 80 00 	eorh	r8,0x8000
80016702:	ee fb ff f8 	ld.w	r11,r7[-8]
80016706:	10 9c       	mov	r12,r8
80016708:	f0 16 00 08 	mcall	r6[32]
8001670c:	18 98       	mov	r8,r12
8001670e:	ef 48 ff c4 	st.w	r7[-60],r8
			
			if (abs(vertical_speed)>20) vertical_speed=0.0;
80016712:	ee f8 ff c4 	ld.w	r8,r7[-60]
80016716:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8001671a:	ef 48 ff fc 	st.w	r7[-4],r8
8001671e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016722:	5c 48       	abs	r8
80016724:	ef 48 ff fc 	st.w	r7[-4],r8
80016728:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001672c:	59 48       	cp.w	r8,20
8001672e:	e0 8a 00 05 	brle	80016738 <get_pressure_data_slow+0x598>
80016732:	30 08       	mov	r8,0
80016734:	ef 48 ff c4 	st.w	r7[-60],r8
			pressure_outputs.vario_vz=(VARIO_LPF)*pressure_outputs.vario_vz + (1.0-VARIO_LPF) * (vertical_speed);
80016738:	ec f8 00 48 	ld.w	r8,r6[72]
8001673c:	70 98       	ld.w	r8,r8[0x24]
8001673e:	10 9c       	mov	r12,r8
80016740:	f0 16 00 02 	mcall	r6[8]
80016744:	e0 68 66 66 	mov	r8,26214
80016748:	ea 18 66 66 	orh	r8,0x6666
8001674c:	e0 69 66 66 	mov	r9,26214
80016750:	ea 19 3f ee 	orh	r9,0x3fee
80016754:	f0 16 00 03 	mcall	r6[12]
80016758:	14 98       	mov	r8,r10
8001675a:	16 99       	mov	r9,r11
8001675c:	10 92       	mov	r2,r8
8001675e:	12 93       	mov	r3,r9
80016760:	ee fc ff c4 	ld.w	r12,r7[-60]
80016764:	f0 16 00 02 	mcall	r6[8]
80016768:	e0 68 99 a0 	mov	r8,39328
8001676c:	ea 18 99 99 	orh	r8,0x9999
80016770:	e0 69 99 99 	mov	r9,39321
80016774:	ea 19 3f a9 	orh	r9,0x3fa9
80016778:	f0 16 00 03 	mcall	r6[12]
8001677c:	14 98       	mov	r8,r10
8001677e:	16 99       	mov	r9,r11
80016780:	04 9a       	mov	r10,r2
80016782:	06 9b       	mov	r11,r3
80016784:	f0 16 00 05 	mcall	r6[20]
80016788:	14 98       	mov	r8,r10
8001678a:	16 99       	mov	r9,r11
8001678c:	10 9a       	mov	r10,r8
8001678e:	12 9b       	mov	r11,r9
80016790:	f0 16 00 09 	mcall	r6[36]
80016794:	18 99       	mov	r9,r12
80016796:	ec f8 00 48 	ld.w	r8,r6[72]
8001679a:	91 99       	st.w	r8[0x24],r9
			
			pressure_outputs.last_update=get_micros();
8001679c:	f0 16 00 29 	mcall	r6[164]
800167a0:	18 99       	mov	r9,r12
800167a2:	ec f8 00 48 	ld.w	r8,r6[72]
800167a6:	91 a9       	st.w	r8[0x28],r9
			pressure_outputs.state=IDLE;
800167a8:	ec f8 00 48 	ld.w	r8,r6[72]
800167ac:	30 09       	mov	r9,0
800167ae:	91 c9       	st.w	r8[0x30],r9
			break;
			
		}
		pressure_outputs.last_state_update=get_micros();
800167b0:	f0 16 00 29 	mcall	r6[164]
800167b4:	18 99       	mov	r9,r12
800167b6:	ec f8 00 48 	ld.w	r8,r6[72]
800167ba:	91 b9       	st.w	r8[0x2c],r9
		pressure_outputs.altitude_offset = offset;
800167bc:	ec f8 00 48 	ld.w	r8,r6[72]
800167c0:	ee f9 ff b0 	ld.w	r9,r7[-80]
800167c4:	91 89       	st.w	r8[0x20],r9
		
		return &pressure_outputs;
800167c6:	ec f8 00 48 	ld.w	r8,r6[72]
}
800167ca:	10 9c       	mov	r12,r8
800167cc:	2e cd       	sub	sp,-80
800167ce:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
800167d2:	00 00       	add	r0,r0
800167d4:	80 01       	ld.sh	r1,r0[0x0]
800167d6:	60 30       	ld.w	r0,r0[0xc]

800167d8 <newValidBarometer>:

bool newValidBarometer(uint32_t *timePrevBarometer)
{
800167d8:	eb cd 40 c0 	pushm	r6-r7,lr
800167dc:	1a 97       	mov	r7,sp
800167de:	20 1d       	sub	sp,4
800167e0:	48 d6       	lddpc	r6,80016814 <newValidBarometer+0x3c>
800167e2:	1e 26       	rsub	r6,pc
800167e4:	ef 4c ff fc 	st.w	r7[-4],r12
	if (*timePrevBarometer < pressure_outputs.last_update) 
800167e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800167ec:	70 09       	ld.w	r9,r8[0x0]
800167ee:	ec f8 00 48 	ld.w	r8,r6[72]
800167f2:	70 a8       	ld.w	r8,r8[0x28]
800167f4:	10 39       	cp.w	r9,r8
800167f6:	c0 92       	brcc	80016808 <newValidBarometer+0x30>
	{
		*timePrevBarometer = pressure_outputs.last_update;
800167f8:	ec f8 00 48 	ld.w	r8,r6[72]
800167fc:	70 a9       	ld.w	r9,r8[0x28]
800167fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016802:	91 09       	st.w	r8[0x0],r9
		return true;
80016804:	30 18       	mov	r8,1
80016806:	c0 28       	rjmp	8001680a <newValidBarometer+0x32>
	}else{
		return false;
80016808:	30 08       	mov	r8,0
	}
	
8001680a:	10 9c       	mov	r12,r8
8001680c:	2f fd       	sub	sp,-4
8001680e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016812:	00 00       	add	r0,r0
80016814:	80 01       	ld.sh	r1,r0[0x0]
80016816:	66 66       	ld.w	r6,r3[0x18]

80016818 <init_hmc5883_slow>:
static volatile compass_data compass_outputs;




void init_hmc5883_slow() {
80016818:	eb cd 40 c0 	pushm	r6-r7,lr
8001681c:	1a 97       	mov	r7,sp
8001681e:	48 a6       	lddpc	r6,80016844 <init_hmc5883_slow+0x2c>
80016820:	1e 26       	rsub	r6,pc
	ConfRegA,
	(HMC_SAMPLE_AVG)<<5 | (HMC_RATE) <<2 | HMC_MODE,
	(HMC_RANGE) <<5,
	(HMC_MODE)
	};
	twim_master_init(&AVR32_TWIM0, &twi_opt);
80016822:	ec fb 08 d0 	ld.w	r11,r6[2256]
80016826:	fe 7c 38 00 	mov	r12,-51200
8001682a:	f0 16 00 70 	mcall	r6[448]
	twim_write(&AVR32_TWIM0, (uint8_t*)&compass_default_configuration, 4, HMC5883_SLAVE_ADDRESS, false);
8001682e:	30 08       	mov	r8,0
80016830:	31 e9       	mov	r9,30
80016832:	30 4a       	mov	r10,4
80016834:	ec fb 08 cc 	ld.w	r11,r6[2252]
80016838:	fe 7c 38 00 	mov	r12,-51200
8001683c:	f0 16 00 36 	mcall	r6[216]
}
80016840:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016844:	80 01       	ld.sh	r1,r0[0x0]
80016846:	66 a4       	ld.w	r4,r3[0x28]

80016848 <get_compass_data_slow>:


compass_data* get_compass_data_slow() {
80016848:	eb cd 40 c0 	pushm	r6-r7,lr
8001684c:	1a 97       	mov	r7,sp
8001684e:	20 2d       	sub	sp,8
80016850:	4a 76       	lddpc	r6,800168ec <get_compass_data_slow+0xa4>
80016852:	1e 26       	rsub	r6,pc
	int i;
	uint8_t start_address=DataRegBegin;
80016854:	30 38       	mov	r8,3
80016856:	ef 68 ff fb 	st.b	r7[-5],r8
	twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, HMC5883_SLAVE_ADDRESS, false);
8001685a:	ee cb 00 05 	sub	r11,r7,5
8001685e:	30 08       	mov	r8,0
80016860:	31 e9       	mov	r9,30
80016862:	30 1a       	mov	r10,1
80016864:	fe 7c 38 00 	mov	r12,-51200
80016868:	f0 16 00 36 	mcall	r6[216]
	twim_read(&AVR32_TWIM0, (uint8_t*)&(compass_outputs.raw_data), 6, HMC5883_SLAVE_ADDRESS, false);
8001686c:	ec fb 02 0c 	ld.w	r11,r6[524]
80016870:	30 08       	mov	r8,0
80016872:	31 e9       	mov	r9,30
80016874:	30 6a       	mov	r10,6
80016876:	fe 7c 38 00 	mov	r12,-51200
8001687a:	f0 16 00 5f 	mcall	r6[380]
	
	for (i=0; i<3; i++) {
8001687e:	30 08       	mov	r8,0
80016880:	ef 48 ff fc 	st.w	r7[-4],r8
80016884:	c2 98       	rjmp	800168d6 <get_compass_data_slow+0x8e>
		compass_outputs.axes[i]=(int16_t)(compass_outputs.raw_data[2*i]<<8)+(int16_t)(compass_outputs.raw_data[2*i+1]);
80016886:	ee fb ff fc 	ld.w	r11,r7[-4]
8001688a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001688e:	a1 78       	lsl	r8,0x1
80016890:	ec f9 02 0c 	ld.w	r9,r6[524]
80016894:	f2 08 07 08 	ld.ub	r8,r9[r8]
80016898:	5c 58       	castu.b	r8
8001689a:	a9 68       	lsl	r8,0x8
8001689c:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800168a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800168a4:	a1 78       	lsl	r8,0x1
800168a6:	2f f8       	sub	r8,-1
800168a8:	ec fa 02 0c 	ld.w	r10,r6[524]
800168ac:	f4 08 07 08 	ld.ub	r8,r10[r8]
800168b0:	5c 58       	castu.b	r8
800168b2:	f2 08 00 08 	add	r8,r9,r8
800168b6:	5c 88       	casts.h	r8
800168b8:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800168bc:	ec fa 02 0c 	ld.w	r10,r6[524]
800168c0:	f6 c8 ff fe 	sub	r8,r11,-2
800168c4:	a1 78       	lsl	r8,0x1
800168c6:	f4 08 00 08 	add	r8,r10,r8
800168ca:	b0 19       	st.h	r8[0x2],r9
	int i;
	uint8_t start_address=DataRegBegin;
	twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, HMC5883_SLAVE_ADDRESS, false);
	twim_read(&AVR32_TWIM0, (uint8_t*)&(compass_outputs.raw_data), 6, HMC5883_SLAVE_ADDRESS, false);
	
	for (i=0; i<3; i++) {
800168cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800168d0:	2f f8       	sub	r8,-1
800168d2:	ef 48 ff fc 	st.w	r7[-4],r8
800168d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800168da:	58 28       	cp.w	r8,2
800168dc:	fe 9a ff d5 	brle	80016886 <get_compass_data_slow+0x3e>
		compass_outputs.axes[i]=(int16_t)(compass_outputs.raw_data[2*i]<<8)+(int16_t)(compass_outputs.raw_data[2*i+1]);
	}
	return &compass_outputs;
800168e0:	ec f8 02 0c 	ld.w	r8,r6[524]
800168e4:	10 9c       	mov	r12,r8
800168e6:	2f ed       	sub	sp,-8
800168e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800168ec:	80 01       	ld.sh	r1,r0[0x0]
800168ee:	66 d6       	ld.w	r6,r3[0x34]

800168f0 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
800168f0:	eb cd 40 c0 	pushm	r6-r7,lr
800168f4:	1a 97       	mov	r7,sp
800168f6:	20 6d       	sub	sp,24
800168f8:	49 e6       	lddpc	r6,80016970 <interpolate+0x80>
800168fa:	1e 26       	rsub	r6,pc
800168fc:	ef 4c ff f8 	st.w	r7[-8],r12
80016900:	ef 4b ff f4 	st.w	r7[-12],r11
80016904:	ef 4a ff f0 	st.w	r7[-16],r10
80016908:	ef 49 ff ec 	st.w	r7[-20],r9
8001690c:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80016910:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016914:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016918:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001691c:	c0 41       	brne	80016924 <interpolate+0x34>
	{
		return y1;
8001691e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80016922:	c2 38       	rjmp	80016968 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80016924:	ee f9 ff e8 	ld.w	r9,r7[-24]
80016928:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001692c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80016930:	ee fa ff f8 	ld.w	r10,r7[-8]
80016934:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016938:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001693c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80016940:	ee fa ff f0 	ld.w	r10,r7[-16]
80016944:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016948:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001694c:	12 9b       	mov	r11,r9
8001694e:	10 9c       	mov	r12,r8
80016950:	f0 16 00 08 	mcall	r6[32]
80016954:	18 98       	mov	r8,r12
80016956:	10 99       	mov	r9,r8
80016958:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001695c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80016960:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80016964:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80016968:	10 9c       	mov	r12,r8
8001696a:	2f ad       	sub	sp,-24
8001696c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016970:	80 01       	ld.sh	r1,r0[0x0]
80016972:	67 7e       	ld.w	lr,r3[0x5c]

80016974 <pdca_int_handler_dac>:
 U8 dac_channel_audio = DAC_AUDIO_CHANNEL;


__attribute__((__interrupt__))
static void pdca_int_handler_dac(void)
{
80016974:	eb cd 40 c0 	pushm	r6-r7,lr
80016978:	1a 97       	mov	r7,sp
8001697a:	49 a6       	lddpc	r6,800169e0 <pdca_int_handler_dac+0x6c>
8001697c:	1e 26       	rsub	r6,pc
	AVR32_PDCA.channel[PDCA_CHANNEL_DAC].isr;
8001697e:	fc 78 00 00 	mov	r8,-196608
80016982:	f0 f8 01 2c 	ld.w	r8,r8[300]
	if (autoplay==0) {
80016986:	ec f8 04 cc 	ld.w	r8,r6[1228]
8001698a:	70 08       	ld.w	r8,r8[0x0]
8001698c:	58 08       	cp.w	r8,0
8001698e:	c0 81       	brne	8001699e <pdca_int_handler_dac+0x2a>
		pdca_disable(PDCA_CHANNEL_DAC);
80016990:	30 4c       	mov	r12,4
80016992:	f0 16 00 7e 	mcall	r6[504]
	    pdca_disable_interrupt_transfer_complete(PDCA_CHANNEL_DAC);
80016996:	30 4c       	mov	r12,4
80016998:	f0 16 00 98 	mcall	r6[608]
8001699c:	c1 f8       	rjmp	800169da <pdca_int_handler_dac+0x66>

	}	else {	
       // Set PDCA channel reload values with address where data to load are stored, and size of the data block to load.
       pdca_reload_channel(PDCA_CHANNEL_DAC, (char *)buffer+2*from, to-from);
8001699e:	ec f8 02 80 	ld.w	r8,r6[640]
800169a2:	90 08       	ld.sh	r8,r8[0x0]
800169a4:	5c 88       	casts.h	r8
800169a6:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800169aa:	ec f8 01 8c 	ld.w	r8,r6[396]
800169ae:	90 08       	ld.sh	r8,r8[0x0]
800169b0:	5c 88       	casts.h	r8
800169b2:	5c 78       	castu.h	r8
800169b4:	f2 08 01 08 	sub	r8,r9,r8
800169b8:	10 99       	mov	r9,r8
800169ba:	ec f8 03 5c 	ld.w	r8,r6[860]
800169be:	70 0a       	ld.w	r10,r8[0x0]
800169c0:	ec f8 01 8c 	ld.w	r8,r6[396]
800169c4:	90 08       	ld.sh	r8,r8[0x0]
800169c6:	5c 88       	casts.h	r8
800169c8:	5c 78       	castu.h	r8
800169ca:	a1 78       	lsl	r8,0x1
800169cc:	f4 08 00 08 	add	r8,r10,r8
800169d0:	12 9a       	mov	r10,r9
800169d2:	10 9b       	mov	r11,r8
800169d4:	30 4c       	mov	r12,4
800169d6:	f0 16 01 01 	mcall	r6[1028]
	}	   
		
}
800169da:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800169de:	d6 03       	rete
800169e0:	80 01       	ld.sh	r1,r0[0x0]
800169e2:	68 00       	ld.w	r0,r4[0x0]

800169e4 <init_pevc>:


void init_pevc(void)
{
800169e4:	eb cd 40 c0 	pushm	r6-r7,lr
800169e8:	1a 97       	mov	r7,sp
800169ea:	48 c6       	lddpc	r6,80016a18 <init_pevc+0x34>
800169ec:	1e 26       	rsub	r6,pc
  
  // PEVC Init.
  // Configuring the PEVC path: input is the generic clock, each clock cycle, the PEVC trigger a new DAC sample
  // The sinus samples are sent through the PDCA.  
  // a change on PEVC input pin0 event will trigger the PDCA channel 0/1 transfer
  pevc_channel_configure(ppevc,     AVR32_PEVC_ID_USER_DACIFB0_CHA, 
800169ee:	ec f8 03 94 	ld.w	r8,r6[916]
800169f2:	70 08       	ld.w	r8,r8[0x0]
800169f4:	ec f9 08 c8 	ld.w	r9,r6[2248]
800169f8:	31 0a       	mov	r10,16
800169fa:	30 2b       	mov	r11,2
800169fc:	10 9c       	mov	r12,r8
800169fe:	f0 16 01 a6 	mcall	r6[1688]
                                    AVR32_PEVC_ID_GEN_GCLK_0, 
                                    &PEVC_EVS_OPTIONS);
									  
  // Enable the PEVC channel 0.
  pevc_channels_enable(ppevc, 1<<AVR32_PEVC_ID_USER_DACIFB0_CHA);
80016a02:	ec f8 03 94 	ld.w	r8,r6[916]
80016a06:	70 08       	ld.w	r8,r8[0x0]
80016a08:	30 4a       	mov	r10,4
80016a0a:	30 0b       	mov	r11,0
80016a0c:	10 9c       	mov	r12,r8
80016a0e:	f0 16 01 40 	mcall	r6[1280]
}
80016a12:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016a16:	00 00       	add	r0,r0
80016a18:	80 01       	ld.sh	r1,r0[0x0]
80016a1a:	68 70       	ld.w	r0,r4[0x1c]

80016a1c <init_gclk>:

void init_gclk(void)
{
80016a1c:	eb cd 40 c0 	pushm	r6-r7,lr
80016a20:	1a 97       	mov	r7,sp
80016a22:	48 76       	lddpc	r6,80016a3c <init_gclk+0x20>
80016a24:	1e 26       	rsub	r6,pc
  // Setup Sampling Rate
 
  // Setup the generic clock for EVENT
  scif_gc_setup(AVR32_SCIF_GCLK_GCLK2_EVENT, 
80016a26:	30 a9       	mov	r9,10
80016a28:	30 1a       	mov	r10,1
80016a2a:	30 0b       	mov	r11,0
80016a2c:	30 7c       	mov	r12,7
80016a2e:	f0 16 02 01 	mcall	r6[2052]
                SCIF_GCCTRL_SLOWCLOCK, 
                AVR32_SCIF_GC_DIV_CLOCK, 
                DAC_SAMPLE_CLOCK_DIVIDER);  
  // Now enable the generic clock
  scif_gc_enable(AVR32_SCIF_GCLK_GCLK2_EVENT);
80016a32:	30 7c       	mov	r12,7
80016a34:	f0 16 01 f7 	mcall	r6[2012]
}
80016a38:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016a3c:	80 01       	ld.sh	r1,r0[0x0]
80016a3e:	68 a8       	ld.w	r8,r4[0x28]
80016a40:	65 72       	ld.w	r2,r2[0x5c]
80016a42:	72 6f       	ld.w	pc,r9[0x18]
80016a44:	72 20       	ld.w	r0,r9[0x8]
80016a46:	63 6f       	ld.w	pc,r1[0x58]
80016a48:	6e 66       	ld.w	r6,r7[0x18]
80016a4a:	69 67       	ld.w	r7,r4[0x58]
80016a4c:	75 72       	ld.w	r2,r10[0x5c]
80016a4e:	69 6e       	ld.w	lr,r4[0x58]
80016a50:	67 20       	ld.w	r0,r3[0x48]
80016a52:	44 41       	lddsp	r1,sp[0x110]
80016a54:	43 00       	lddsp	r0,sp[0xc0]
80016a56:	00 00       	add	r0,r0
80016a58:	65 72       	ld.w	r2,r2[0x5c]
80016a5a:	72 6f       	ld.w	pc,r9[0x18]
80016a5c:	72 20       	ld.w	r0,r9[0x8]
80016a5e:	63 6f       	ld.w	pc,r1[0x58]
80016a60:	6e 66       	ld.w	r6,r7[0x18]
80016a62:	69 67       	ld.w	r7,r4[0x58]
80016a64:	75 72       	ld.w	r2,r10[0x5c]
80016a66:	69 6e       	ld.w	lr,r4[0x58]
80016a68:	67 20       	ld.w	r0,r3[0x48]
80016a6a:	44 41       	lddsp	r1,sp[0x110]
80016a6c:	43 20       	lddsp	r0,sp[0xc8]
80016a6e:	63 68       	ld.w	r8,r1[0x58]
80016a70:	61 6e       	ld.w	lr,r0[0x58]
80016a72:	6e 65       	ld.w	r5,r7[0x18]
80016a74:	6c 00       	ld.w	r0,r6[0x0]

80016a76 <Init_DAC>:



void Init_DAC(int trigger_mode) {
80016a76:	eb cd 40 c0 	pushm	r6-r7,lr
80016a7a:	1a 97       	mov	r7,sp
80016a7c:	20 6d       	sub	sp,24
80016a7e:	4b 36       	lddpc	r6,80016b48 <Init_DAC+0xd2>
80016a80:	1e 26       	rsub	r6,pc
80016a82:	ef 4c ff e8 	st.w	r7[-24],r12
                            .low_power                  = false,                          // Low Power Mode     
                            .dual                       = false,                          // Dual Mode
                            .prescaler_clock_hz         = DAC_PRESCALER_CLOCK,             // Prescaler Clock (Should be 500Khz)             
							.offset_calibration_value   = 0,
							.gain_calibration_value     = 1                 
};
80016a86:	ec f8 08 c4 	ld.w	r8,r6[2244]
80016a8a:	ee ca 00 0c 	sub	r10,r7,12
80016a8e:	10 9b       	mov	r11,r8
80016a90:	f6 e8 00 00 	ld.d	r8,r11[0]
80016a94:	f4 e9 00 00 	st.d	r10[0],r8
80016a98:	76 28       	ld.w	r8,r11[0x8]
80016a9a:	95 28       	st.w	r10[0x8],r8
                                                .auto_refresh_mode    = true,                       // Auto Refresh Mode 
                                                .trigger_mode         = trigger_mode,               // Trigger selection
                                                .left_adjustment      = false,                      // Right Adjustment
                                                .data_shift           = 0,                          // Number of Data Shift 
                                                .data_round_enable    = false                       // Data Rouding Mode                                              };
};
80016a9c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80016aa0:	5c 58       	castu.b	r8
80016aa2:	30 19       	mov	r9,1
80016aa4:	ef 69 ff ef 	st.b	r7[-17],r9
80016aa8:	ef 68 ff f0 	st.b	r7[-16],r8
80016aac:	30 08       	mov	r8,0
80016aae:	ef 68 ff f1 	st.b	r7[-15],r8
80016ab2:	30 08       	mov	r8,0
80016ab4:	ef 68 ff f2 	st.b	r7[-14],r8
80016ab8:	30 08       	mov	r8,0
80016aba:	ef 68 ff f3 	st.b	r7[-13],r8

    // Assign and enable GPIO pins to the DAC function.
  gpio_enable_module(DACIFB_GPIO_MAP, sizeof(DACIFB_GPIO_MAP) / sizeof(DACIFB_GPIO_MAP[0]));
80016abe:	30 4b       	mov	r11,4
80016ac0:	ec fc 08 c0 	ld.w	r12,r6[2240]
80016ac4:	f0 16 00 92 	mcall	r6[584]

  // Get DACIFB Factory Configuration
  //dacifb_get_calibration_data(dacifb, &dacifb_opt, DAC_AUDIO_INSTANCE);
                              
  // configure DACIFB
  if (dacifb_configure(dacifb,
80016ac8:	ec f8 02 64 	ld.w	r8,r6[612]
80016acc:	70 08       	ld.w	r8,r8[0x0]
80016ace:	ee c9 00 0c 	sub	r9,r7,12
80016ad2:	e0 6a 24 00 	mov	r10,9216
80016ad6:	ea 1a 00 f4 	orh	r10,0xf4
80016ada:	12 9b       	mov	r11,r9
80016adc:	10 9c       	mov	r12,r8
80016ade:	f0 16 01 73 	mcall	r6[1484]
80016ae2:	18 98       	mov	r8,r12
80016ae4:	58 08       	cp.w	r8,0
80016ae6:	c0 61       	brne	80016af2 <Init_DAC+0x7c>
                   &dacifb_opt,
                   FOSC0) ==0) {
				dbg_print("error configuring DAC");
80016ae8:	fe cc 00 a8 	sub	r12,pc,168
80016aec:	f0 16 00 01 	mcall	r6[4]
				while (1);
80016af0:	c0 08       	rjmp	80016af0 <Init_DAC+0x7a>
  }
  
  // Enable the DACIFB channels.

  // configure channel DACIFB
  if (dacifb_configure_channel(dacifb,
80016af2:	ec f8 03 a0 	ld.w	r8,r6[928]
80016af6:	11 88       	ld.ub	r8,r8[0x0]
80016af8:	10 9b       	mov	r11,r8
80016afa:	ec f8 02 64 	ld.w	r8,r6[612]
80016afe:	70 08       	ld.w	r8,r8[0x0]
80016b00:	ee ca 00 11 	sub	r10,r7,17
80016b04:	e0 69 4b 40 	mov	r9,19264
80016b08:	ea 19 00 4c 	orh	r9,0x4c
80016b0c:	10 9c       	mov	r12,r8
80016b0e:	f0 16 01 b4 	mcall	r6[1744]
80016b12:	18 98       	mov	r8,r12
80016b14:	58 08       	cp.w	r8,0
80016b16:	c0 61       	brne	80016b22 <Init_DAC+0xac>
                           dac_channel_audio,
                           &dacifb_channel_opt,
                           DAC_PRESCALER_CLOCK) ==0) {
				dbg_print("error configuring DAC channel");
80016b18:	fe cc 00 c0 	sub	r12,pc,192
80016b1c:	f0 16 00 01 	mcall	r6[4]
				while (1);
80016b20:	c0 08       	rjmp	80016b20 <Init_DAC+0xaa>
  }
  
  dacifb_start_channel(dacifb,
80016b22:	ec f8 03 a0 	ld.w	r8,r6[928]
80016b26:	11 88       	ld.ub	r8,r8[0x0]
80016b28:	10 99       	mov	r9,r8
80016b2a:	ec f8 02 64 	ld.w	r8,r6[612]
80016b2e:	70 08       	ld.w	r8,r8[0x0]
80016b30:	e0 6a 24 00 	mov	r10,9216
80016b34:	ea 1a 00 f4 	orh	r10,0xf4
80016b38:	12 9b       	mov	r11,r9
80016b3a:	10 9c       	mov	r12,r8
80016b3c:	f0 16 01 4c 	mcall	r6[1328]
                       dac_channel_audio,
                       FOSC0);


}
80016b40:	2f ad       	sub	sp,-24
80016b42:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016b46:	00 00       	add	r0,r0
80016b48:	80 01       	ld.sh	r1,r0[0x0]
80016b4a:	69 04       	ld.w	r4,r4[0x40]

80016b4c <DAC_load_buffer>:

void DAC_load_buffer(uint16_t* samples, int from_sample, int to_sample, int repeat) {
80016b4c:	eb cd 40 c0 	pushm	r6-r7,lr
80016b50:	1a 97       	mov	r7,sp
80016b52:	20 4d       	sub	sp,16
80016b54:	4a a6       	lddpc	r6,80016bfc <DAC_load_buffer+0xb0>
80016b56:	1e 26       	rsub	r6,pc
80016b58:	ef 4c ff fc 	st.w	r7[-4],r12
80016b5c:	ef 4b ff f8 	st.w	r7[-8],r11
80016b60:	ef 4a ff f4 	st.w	r7[-12],r10
80016b64:	ef 49 ff f0 	st.w	r7[-16],r9
  // PDCA channel options
  buffer=samples;
80016b68:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016b6c:	ec f8 03 5c 	ld.w	r8,r6[860]
80016b70:	91 09       	st.w	r8[0x0],r9
  from=from_sample;
80016b72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016b76:	5c 88       	casts.h	r8
80016b78:	ec f9 01 8c 	ld.w	r9,r6[396]
80016b7c:	b2 08       	st.h	r9[0x0],r8
  to=to_sample;
80016b7e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016b82:	5c 88       	casts.h	r8
80016b84:	ec f9 02 80 	ld.w	r9,r6[640]
80016b88:	b2 08       	st.h	r9[0x0],r8
    .size = 0,                         // transfer counter
    .r_addr = NULL,                                // next memory address
    .r_size = 0,                                   // next transfer counter
    .transfer_size = PDCA_TRANSFER_SIZE_HALF_WORD  // select size of the transfer      
  };
  PDCA_OPTIONS.addr=(char *)samples + 2*from;
80016b8a:	ec f8 01 8c 	ld.w	r8,r6[396]
80016b8e:	90 08       	ld.sh	r8,r8[0x0]
80016b90:	5c 88       	casts.h	r8
80016b92:	5c 78       	castu.h	r8
80016b94:	a1 78       	lsl	r8,0x1
80016b96:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016b9a:	10 09       	add	r9,r8
80016b9c:	ec f8 03 58 	ld.w	r8,r6[856]
80016ba0:	91 09       	st.w	r8[0x0],r9
  PDCA_OPTIONS.size=to-from;
80016ba2:	ec f8 02 80 	ld.w	r8,r6[640]
80016ba6:	90 08       	ld.sh	r8,r8[0x0]
80016ba8:	5c 88       	casts.h	r8
80016baa:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80016bae:	ec f8 01 8c 	ld.w	r8,r6[396]
80016bb2:	90 08       	ld.sh	r8,r8[0x0]
80016bb4:	5c 88       	casts.h	r8
80016bb6:	5c 78       	castu.h	r8
80016bb8:	f2 08 01 08 	sub	r8,r9,r8
80016bbc:	10 99       	mov	r9,r8
80016bbe:	ec f8 03 58 	ld.w	r8,r6[856]
80016bc2:	91 19       	st.w	r8[0x4],r9

  // Initialize Event Controller
  init_pevc();
80016bc4:	f0 16 01 d7 	mcall	r6[1884]
  // Initialize Generic Clock
  init_gclk();
80016bc8:	f0 16 01 ca 	mcall	r6[1832]

  // Init PDCA channel with the pdca_options.
  pdca_init_channel(PDCA_CHANNEL_DAC, &PDCA_OPTIONS); // init PDCA channel with options.
80016bcc:	ec fb 03 58 	ld.w	r11,r6[856]
80016bd0:	30 4c       	mov	r12,4
80016bd2:	f0 16 00 75 	mcall	r6[468]

  autoplay=repeat;
80016bd6:	ec f8 04 cc 	ld.w	r8,r6[1228]
80016bda:	ee f9 ff f0 	ld.w	r9,r7[-16]
80016bde:	91 09       	st.w	r8[0x0],r9
  //if (repeat==1) {
	  // TODO: for some reason having this interrupt tends to crash occasionally
      INTC_register_interrupt( (__int_handler) &pdca_int_handler_dac, AVR32_PDCA_IRQ_4, AVR32_INTC_INT0);
80016be0:	30 0a       	mov	r10,0
80016be2:	e0 6b 00 80 	mov	r11,128
80016be6:	fe cc 02 72 	sub	r12,pc,626
80016bea:	f0 16 00 3b 	mcall	r6[236]
	  pdca_enable_interrupt_transfer_complete(PDCA_CHANNEL_DAC);
80016bee:	30 4c       	mov	r12,4
80016bf0:	f0 16 00 b6 	mcall	r6[728]
  //}  
} 
80016bf4:	2f cd       	sub	sp,-16
80016bf6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016bfa:	00 00       	add	r0,r0
80016bfc:	80 01       	ld.sh	r1,r0[0x0]
80016bfe:	69 da       	ld.w	r10,r4[0x74]

80016c00 <DAC_play>:

void DAC_play() {
80016c00:	eb cd 40 c0 	pushm	r6-r7,lr
80016c04:	1a 97       	mov	r7,sp
80016c06:	49 56       	lddpc	r6,80016c58 <DAC_play+0x58>
80016c08:	1e 26       	rsub	r6,pc
	//Disable_global_interrupt();
	pdca_disable(PDCA_CHANNEL_DAC);
80016c0a:	30 4c       	mov	r12,4
80016c0c:	f0 16 00 7e 	mcall	r6[504]
	pdca_reload_channel(PDCA_CHANNEL_DAC, (void *)buffer+2*from, to-from);
80016c10:	ec f8 02 80 	ld.w	r8,r6[640]
80016c14:	90 08       	ld.sh	r8,r8[0x0]
80016c16:	5c 88       	casts.h	r8
80016c18:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80016c1c:	ec f8 01 8c 	ld.w	r8,r6[396]
80016c20:	90 08       	ld.sh	r8,r8[0x0]
80016c22:	5c 88       	casts.h	r8
80016c24:	5c 78       	castu.h	r8
80016c26:	f2 08 01 08 	sub	r8,r9,r8
80016c2a:	10 99       	mov	r9,r8
80016c2c:	ec f8 03 5c 	ld.w	r8,r6[860]
80016c30:	70 0a       	ld.w	r10,r8[0x0]
80016c32:	ec f8 01 8c 	ld.w	r8,r6[396]
80016c36:	90 08       	ld.sh	r8,r8[0x0]
80016c38:	5c 88       	casts.h	r8
80016c3a:	5c 78       	castu.h	r8
80016c3c:	a1 78       	lsl	r8,0x1
80016c3e:	f4 08 00 08 	add	r8,r10,r8
80016c42:	12 9a       	mov	r10,r9
80016c44:	10 9b       	mov	r11,r8
80016c46:	30 4c       	mov	r12,4
80016c48:	f0 16 01 01 	mcall	r6[1028]
  // Enable now the transfer.
    //Enable_global_interrupt();
    pdca_enable(PDCA_CHANNEL_DAC);
80016c4c:	30 4c       	mov	r12,4
80016c4e:	f0 16 00 90 	mcall	r6[576]

  
}
80016c52:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016c56:	00 00       	add	r0,r0
80016c58:	80 01       	ld.sh	r1,r0[0x0]
80016c5a:	6a 8c       	ld.w	r12,r5[0x20]

80016c5c <DAC_pause>:

void DAC_pause(void) {
80016c5c:	eb cd 40 80 	pushm	r7,lr
80016c60:	1a 97       	mov	r7,sp

}
80016c62:	e3 cd 80 80 	ldm	sp++,r7,pc

80016c66 <DAC_resume>:

void DAC_resume(void) {
80016c66:	eb cd 40 80 	pushm	r7,lr
80016c6a:	1a 97       	mov	r7,sp

}
80016c6c:	e3 cd 80 80 	ldm	sp++,r7,pc

80016c70 <DAC_is_finished>:

int  DAC_is_finished(void) {
80016c70:	eb cd 40 80 	pushm	r7,lr
80016c74:	1a 97       	mov	r7,sp
	return 0;
80016c76:	30 08       	mov	r8,0
}
80016c78:	10 9c       	mov	r12,r8
80016c7a:	e3 cd 80 80 	ldm	sp++,r7,pc

80016c7e <DAC_set_value>:

void DAC_set_value(int32_t output) {
80016c7e:	eb cd 40 c0 	pushm	r6-r7,lr
80016c82:	1a 97       	mov	r7,sp
80016c84:	20 1d       	sub	sp,4
80016c86:	48 76       	lddpc	r6,80016ca0 <DAC_set_value+0x22>
80016c88:	1e 26       	rsub	r6,pc
80016c8a:	ef 4c ff fc 	st.w	r7[-4],r12
	dacifb->dr0 = (output); 
80016c8e:	ec f8 02 64 	ld.w	r8,r6[612]
80016c92:	70 08       	ld.w	r8,r8[0x0]
80016c94:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016c98:	91 b9       	st.w	r8[0x2c],r9
}
80016c9a:	2f fd       	sub	sp,-4
80016c9c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016ca0:	80 01       	ld.sh	r1,r0[0x0]
80016ca2:	6b 0c       	ld.w	r12,r5[0x40]

80016ca4 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80016ca4:	eb cd 40 80 	pushm	r7,lr
80016ca8:	1a 97       	mov	r7,sp
80016caa:	20 1d       	sub	sp,4
80016cac:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80016cb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016cb4:	e6 18 00 01 	andh	r8,0x1,COH
80016cb8:	5f 08       	sreq	r8
80016cba:	5c 58       	castu.b	r8
}
80016cbc:	10 9c       	mov	r12,r8
80016cbe:	2f fd       	sub	sp,-4
80016cc0:	e3 cd 80 80 	ldm	sp++,r7,pc

80016cc4 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
80016cc4:	eb cd 40 80 	pushm	r7,lr
80016cc8:	1a 97       	mov	r7,sp
80016cca:	20 1d       	sub	sp,4
80016ccc:	18 98       	mov	r8,r12
80016cce:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80016cd2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80016cd6:	58 38       	cp.w	r8,3
80016cd8:	c1 20       	breq	80016cfc <osc_get_rate+0x38>
80016cda:	e0 89 00 07 	brgt	80016ce8 <osc_get_rate+0x24>
80016cde:	58 08       	cp.w	r8,0
80016ce0:	c0 90       	breq	80016cf2 <osc_get_rate+0x2e>
80016ce2:	58 28       	cp.w	r8,2
80016ce4:	c0 f0       	breq	80016d02 <osc_get_rate+0x3e>
80016ce6:	c1 b8       	rjmp	80016d1c <osc_get_rate+0x58>
80016ce8:	58 48       	cp.w	r8,4
80016cea:	c1 10       	breq	80016d0c <osc_get_rate+0x48>
80016cec:	58 58       	cp.w	r8,5
80016cee:	c1 40       	breq	80016d16 <osc_get_rate+0x52>
80016cf0:	c1 68       	rjmp	80016d1c <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
80016cf2:	e0 68 24 00 	mov	r8,9216
80016cf6:	ea 18 00 f4 	orh	r8,0xf4
80016cfa:	c1 28       	rjmp	80016d1e <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
80016cfc:	e0 68 80 00 	mov	r8,32768
80016d00:	c0 f8       	rjmp	80016d1e <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
80016d02:	e0 68 12 00 	mov	r8,4608
80016d06:	ea 18 00 7a 	orh	r8,0x7a
80016d0a:	c0 a8       	rjmp	80016d1e <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
80016d0c:	e0 68 0e 00 	mov	r8,3584
80016d10:	ea 18 07 27 	orh	r8,0x727
80016d14:	c0 58       	rjmp	80016d1e <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
80016d16:	e0 78 c1 38 	mov	r8,115000
80016d1a:	c0 28       	rjmp	80016d1e <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
80016d1c:	30 08       	mov	r8,0
	}
}
80016d1e:	10 9c       	mov	r12,r8
80016d20:	2f fd       	sub	sp,-4
80016d22:	e3 cd 80 80 	ldm	sp++,r7,pc

80016d26 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
80016d26:	eb cd 40 c0 	pushm	r6-r7,lr
80016d2a:	1a 97       	mov	r7,sp
80016d2c:	48 56       	lddpc	r6,80016d40 <sysclk_get_main_hz+0x1a>
80016d2e:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
80016d30:	30 0c       	mov	r12,0
80016d32:	cc 9f       	rcall	80016cc4 <osc_get_rate>
80016d34:	18 98       	mov	r8,r12
80016d36:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80016d38:	10 9c       	mov	r12,r8
80016d3a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016d3e:	00 00       	add	r0,r0
80016d40:	80 01       	ld.sh	r1,r0[0x0]
80016d42:	6b b2       	ld.w	r2,r5[0x6c]

80016d44 <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
80016d44:	eb cd 40 c0 	pushm	r6-r7,lr
80016d48:	1a 97       	mov	r7,sp
80016d4a:	48 46       	lddpc	r6,80016d58 <sysclk_get_pba_hz+0x14>
80016d4c:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
80016d4e:	ce cf       	rcall	80016d26 <sysclk_get_main_hz>
80016d50:	18 98       	mov	r8,r12
}
80016d52:	10 9c       	mov	r12,r8
80016d54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016d58:	80 01       	ld.sh	r1,r0[0x0]
80016d5a:	6b d0       	ld.w	r0,r5[0x74]

80016d5c <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80016d5c:	eb cd 40 c0 	pushm	r6-r7,lr
80016d60:	1a 97       	mov	r7,sp
80016d62:	20 6d       	sub	sp,24
80016d64:	49 e6       	lddpc	r6,80016ddc <interpolate+0x80>
80016d66:	1e 26       	rsub	r6,pc
80016d68:	ef 4c ff f8 	st.w	r7[-8],r12
80016d6c:	ef 4b ff f4 	st.w	r7[-12],r11
80016d70:	ef 4a ff f0 	st.w	r7[-16],r10
80016d74:	ef 49 ff ec 	st.w	r7[-20],r9
80016d78:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80016d7c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016d80:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016d84:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80016d88:	c0 41       	brne	80016d90 <interpolate+0x34>
	{
		return y1;
80016d8a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80016d8e:	c2 38       	rjmp	80016dd4 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80016d90:	ee f9 ff e8 	ld.w	r9,r7[-24]
80016d94:	ee f8 ff ec 	ld.w	r8,r7[-20]
80016d98:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80016d9c:	ee fa ff f8 	ld.w	r10,r7[-8]
80016da0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016da4:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80016da8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80016dac:	ee fa ff f0 	ld.w	r10,r7[-16]
80016db0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016db4:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80016db8:	12 9b       	mov	r11,r9
80016dba:	10 9c       	mov	r12,r8
80016dbc:	f0 16 00 08 	mcall	r6[32]
80016dc0:	18 98       	mov	r8,r12
80016dc2:	10 99       	mov	r9,r8
80016dc4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80016dc8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80016dcc:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80016dd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80016dd4:	10 9c       	mov	r12,r8
80016dd6:	2f ad       	sub	sp,-24
80016dd8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016ddc:	80 01       	ld.sh	r1,r0[0x0]
80016dde:	6b ea       	ld.w	r10,r5[0x78]
80016de0:	21 00       	sub	r0,16

80016de2 <pdca_int_handler_i2c0>:

/*!  The PDCA interrupt handler.
 */
__attribute__((__interrupt__))
static void pdca_int_handler_i2c0(void)
{
80016de2:	eb cd 40 c0 	pushm	r6-r7,lr
80016de6:	1a 97       	mov	r7,sp
80016de8:	4a 26       	lddpc	r6,80016e70 <pdca_int_handler_i2c0+0x8e>
80016dea:	1e 26       	rsub	r6,pc
	AVR32_TWIM0.cr = AVR32_TWIM_CR_MDIS_MASK;
80016dec:	fe 78 38 00 	mov	r8,-51200
80016df0:	30 29       	mov	r9,2
80016df2:	91 09       	st.w	r8[0x0],r9
	pdca_disable(TWI0_DMA_CH);
80016df4:	30 2c       	mov	r12,2
80016df6:	f0 16 00 7e 	mcall	r6[504]
	
	pdca_disable_interrupt_transfer_complete(TWI0_DMA_CH);
80016dfa:	30 2c       	mov	r12,2
80016dfc:	f0 16 00 98 	mcall	r6[608]
	
   // call callback function to process data, at end of transfer
   // to process data, and maybe add some more data
   schedule[0][current_schedule_slot[0]].transfer_in_progress=0;
80016e00:	ec f8 02 7c 	ld.w	r8,r6[636]
80016e04:	11 88       	ld.ub	r8,r8[0x0]
80016e06:	5c 58       	castu.b	r8
80016e08:	10 99       	mov	r9,r8
80016e0a:	ec fa 01 38 	ld.w	r10,r6[312]
80016e0e:	12 98       	mov	r8,r9
80016e10:	a3 68       	lsl	r8,0x2
80016e12:	12 08       	add	r8,r9
80016e14:	a3 78       	lsl	r8,0x3
80016e16:	f4 08 00 08 	add	r8,r10,r8
80016e1a:	f0 c9 ff e0 	sub	r9,r8,-32
80016e1e:	30 08       	mov	r8,0
80016e20:	b2 a8       	st.b	r9[0x2],r8
   
   if (schedule[0][current_schedule_slot[0]].callback) schedule[0][current_schedule_slot[0]].callback;
80016e22:	ec f8 02 7c 	ld.w	r8,r6[636]
80016e26:	11 88       	ld.ub	r8,r8[0x0]
80016e28:	5c 58       	castu.b	r8
80016e2a:	10 99       	mov	r9,r8
80016e2c:	ec fa 01 38 	ld.w	r10,r6[312]
80016e30:	12 98       	mov	r8,r9
80016e32:	a3 68       	lsl	r8,0x2
80016e34:	12 08       	add	r8,r9
80016e36:	a3 78       	lsl	r8,0x3
80016e38:	f4 08 00 08 	add	r8,r10,r8
80016e3c:	2d c8       	sub	r8,-36
80016e3e:	70 08       	ld.w	r8,r8[0x0]
80016e40:	58 08       	cp.w	r8,0
80016e42:	c1 00       	breq	80016e62 <pdca_int_handler_i2c0+0x80>
80016e44:	ec f8 02 7c 	ld.w	r8,r6[636]
80016e48:	11 88       	ld.ub	r8,r8[0x0]
80016e4a:	5c 58       	castu.b	r8
80016e4c:	10 99       	mov	r9,r8
80016e4e:	ec fa 01 38 	ld.w	r10,r6[312]
80016e52:	12 98       	mov	r8,r9
80016e54:	a3 68       	lsl	r8,0x2
80016e56:	12 08       	add	r8,r9
80016e58:	a3 78       	lsl	r8,0x3
80016e5a:	f4 08 00 08 	add	r8,r10,r8
80016e5e:	2d c8       	sub	r8,-36
80016e60:	70 08       	ld.w	r8,r8[0x0]
   dbg_print( "!");
80016e62:	fe cc 00 82 	sub	r12,pc,130
80016e66:	f0 16 00 01 	mcall	r6[4]
}
80016e6a:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80016e6e:	d6 03       	rete
80016e70:	80 01       	ld.sh	r1,r0[0x0]
80016e72:	6c 6e       	ld.w	lr,r6[0x18]

80016e74 <init_i2c>:




int init_i2c(unsigned char i2c_device) {
80016e74:	eb cd 40 c0 	pushm	r6-r7,lr
80016e78:	1a 97       	mov	r7,sp
80016e7a:	20 4d       	sub	sp,16
80016e7c:	4c b6       	lddpc	r6,80016fa8 <init_i2c+0x134>
80016e7e:	1e 26       	rsub	r6,pc
80016e80:	18 98       	mov	r8,r12
80016e82:	ef 68 ff f0 	st.b	r7[-16],r8
	int i;
	volatile avr32_twim_t *twim;
	switch (i2c_device) {
80016e86:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80016e8a:	58 08       	cp.w	r8,0
80016e8c:	c0 40       	breq	80016e94 <init_i2c+0x20>
80016e8e:	58 18       	cp.w	r8,1
80016e90:	c1 50       	breq	80016eba <init_i2c+0x46>
80016e92:	c2 d8       	rjmp	80016eec <init_i2c+0x78>
	case 0: 
		twim=&AVR32_TWIM0;
80016e94:	fe 78 38 00 	mov	r8,-51200
80016e98:	ef 48 ff f8 	st.w	r7[-8],r8
		// Register PDCA IRQ interrupt.
		INTC_register_interrupt( (__int_handler) &pdca_int_handler_i2c0, TWI0_DMA_IRQ, AVR32_INTC_INT0);
80016e9c:	30 0a       	mov	r10,0
80016e9e:	36 2b       	mov	r11,98
80016ea0:	fe cc 00 be 	sub	r12,pc,190
80016ea4:	f0 16 00 3b 	mcall	r6[236]
		gpio_enable_module_pin(AVR32_TWIMS0_TWCK_0_0_PIN, AVR32_TWIMS0_TWCK_0_0_FUNCTION);
80016ea8:	30 0b       	mov	r11,0
80016eaa:	34 3c       	mov	r12,67
80016eac:	f0 16 00 3e 	mcall	r6[248]
		gpio_enable_module_pin(AVR32_TWIMS0_TWD_0_0_PIN, AVR32_TWIMS0_TWD_0_0_FUNCTION);
80016eb0:	30 0b       	mov	r11,0
80016eb2:	34 2c       	mov	r12,66
80016eb4:	f0 16 00 3e 	mcall	r6[248]

	break;
80016eb8:	c1 c8       	rjmp	80016ef0 <init_i2c+0x7c>
	case 1:
		twim=&AVR32_TWIM1;// Register PDCA IRQ interrupt.
80016eba:	fe 78 3c 00 	mov	r8,-50176
80016ebe:	ef 48 ff f8 	st.w	r7[-8],r8
		INTC_register_interrupt( (__int_handler) &pdca_int_handler_i2c0, TWI1_DMA_IRQ, AVR32_INTC_INT0);
80016ec2:	30 0a       	mov	r10,0
80016ec4:	36 3b       	mov	r11,99
80016ec6:	fe cc 00 e4 	sub	r12,pc,228
80016eca:	f0 16 00 3b 	mcall	r6[236]
		gpio_enable_module_pin(AVR32_TWIMS1_TWCK_0_0_PIN, AVR32_TWIMS1_TWCK_0_0_FUNCTION);
80016ece:	30 0b       	mov	r11,0
80016ed0:	34 5c       	mov	r12,69
80016ed2:	f0 16 00 3e 	mcall	r6[248]
		gpio_enable_module_pin(AVR32_TWIMS1_TWD_0_0_PIN, AVR32_TWIMS1_TWD_0_0_FUNCTION);
80016ed6:	30 0b       	mov	r11,0
80016ed8:	34 4c       	mov	r12,68
80016eda:	f0 16 00 3e 	mcall	r6[248]
		gpio_enable_pin_pull_up(AVR32_TWIMS1_TWCK_0_0_PIN);
80016ede:	34 5c       	mov	r12,69
80016ee0:	f0 16 00 f7 	mcall	r6[988]
		gpio_enable_pin_pull_up(AVR32_TWIMS1_TWD_0_0_PIN);
80016ee4:	34 4c       	mov	r12,68
80016ee6:	f0 16 00 f7 	mcall	r6[988]
	break;
80016eea:	c0 38       	rjmp	80016ef0 <init_i2c+0x7c>
	default: // invalid device ID
		return -1;
80016eec:	3f f8       	mov	r8,-1
80016eee:	c5 98       	rjmp	80016fa0 <init_i2c+0x12c>
	}		
	for (i=0; i<I2C_SCHEDULE_SLOTS; i++) {
80016ef0:	30 08       	mov	r8,0
80016ef2:	ef 48 ff f4 	st.w	r7[-12],r8
80016ef6:	c1 b8       	rjmp	80016f2c <init_i2c+0xb8>
		schedule[i2c_device][i].active=-1;
80016ef8:	ef 3b ff f0 	ld.ub	r11,r7[-16]
80016efc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016f00:	ec fa 01 38 	ld.w	r10,r6[312]
80016f04:	12 98       	mov	r8,r9
80016f06:	a3 68       	lsl	r8,0x2
80016f08:	12 08       	add	r8,r9
80016f0a:	a3 78       	lsl	r8,0x3
80016f0c:	e0 69 01 90 	mov	r9,400
80016f10:	f6 09 02 49 	mul	r9,r11,r9
80016f14:	12 08       	add	r8,r9
80016f16:	f4 08 00 08 	add	r8,r10,r8
80016f1a:	f0 c9 ff e0 	sub	r9,r8,-32
80016f1e:	3f f8       	mov	r8,-1
80016f20:	b2 98       	st.b	r9[0x1],r8
		gpio_enable_pin_pull_up(AVR32_TWIMS1_TWD_0_0_PIN);
	break;
	default: // invalid device ID
		return -1;
	}		
	for (i=0; i<I2C_SCHEDULE_SLOTS; i++) {
80016f22:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016f26:	2f f8       	sub	r8,-1
80016f28:	ef 48 ff f4 	st.w	r7[-12],r8
80016f2c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016f30:	58 98       	cp.w	r8,9
80016f32:	fe 9a ff e3 	brle	80016ef8 <init_i2c+0x84>
		schedule[i2c_device][i].active=-1;
	}
				
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80016f36:	e1 b8 00 00 	mfsr	r8,0x0
80016f3a:	10 9c       	mov	r12,r8
80016f3c:	cb 4e       	rcall	80016ca4 <cpu_irq_is_enabled_flags>
80016f3e:	18 98       	mov	r8,r12
80016f40:	ef 68 ff ff 	st.b	r7[-1],r8
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80016f44:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80016f48:	30 08       	mov	r8,0
80016f4a:	f0 09 18 00 	cp.b	r9,r8
80016f4e:	c0 20       	breq	80016f52 <init_i2c+0xde>
		cpu_irq_disable ();
80016f50:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80016f52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016f56:	3f f9       	mov	r9,-1
80016f58:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80016f5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016f5e:	30 19       	mov	r9,1
80016f60:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80016f62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016f66:	e0 69 00 80 	mov	r9,128
80016f6a:	91 09       	st.w	r8[0x0],r9
	
	
	if (global_interrupt_enabled) {
80016f6c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80016f70:	30 08       	mov	r8,0
80016f72:	f0 09 18 00 	cp.b	r9,r8
80016f76:	c0 20       	breq	80016f7a <init_i2c+0x106>
		cpu_irq_enable ();
80016f78:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
80016f7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016f7e:	3f f9       	mov	r9,-1
80016f80:	91 b9       	st.w	r8[0x2c],r9
//	irq_register_handler(twim_master_interrupt_handler,
//			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
//	cpu_irq_restore(flags);
	
	// Select the speed
	if (twim_set_speed(twim, 100000, sysclk_get_pba_hz()) == 
80016f82:	ce 1e       	rcall	80016d44 <sysclk_get_pba_hz>
80016f84:	18 98       	mov	r8,r12
80016f86:	10 9a       	mov	r10,r8
80016f88:	e0 7b 86 a0 	mov	r11,100000
80016f8c:	ee fc ff f8 	ld.w	r12,r7[-8]
80016f90:	f0 16 01 2f 	mcall	r6[1212]
80016f94:	18 98       	mov	r8,r12
80016f96:	5b 88       	cp.w	r8,-8
80016f98:	c0 31       	brne	80016f9e <init_i2c+0x12a>
			ERR_INVALID_ARG) {
		
		return ERR_INVALID_ARG;
80016f9a:	3f 88       	mov	r8,-8
80016f9c:	c0 28       	rjmp	80016fa0 <init_i2c+0x12c>
	}
	return STATUS_OK;				
80016f9e:	30 08       	mov	r8,0

}
80016fa0:	10 9c       	mov	r12,r8
80016fa2:	2f cd       	sub	sp,-16
80016fa4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016fa8:	80 01       	ld.sh	r1,r0[0x0]
80016faa:	6d 02       	ld.w	r2,r6[0x40]

80016fac <i2c_reset>:



char i2c_reset(unsigned char i2c_device) {
80016fac:	eb cd 40 c0 	pushm	r6-r7,lr
80016fb0:	1a 97       	mov	r7,sp
80016fb2:	20 3d       	sub	sp,12
80016fb4:	4a 26       	lddpc	r6,8001703c <i2c_reset+0x90>
80016fb6:	1e 26       	rsub	r6,pc
80016fb8:	18 98       	mov	r8,r12
80016fba:	ef 68 ff f4 	st.b	r7[-12],r8
	volatile avr32_twim_t *twim;
	switch (i2c_device) {
80016fbe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80016fc2:	58 08       	cp.w	r8,0
80016fc4:	c0 40       	breq	80016fcc <i2c_reset+0x20>
80016fc6:	58 18       	cp.w	r8,1
80016fc8:	c0 70       	breq	80016fd6 <i2c_reset+0x2a>
80016fca:	c0 b8       	rjmp	80016fe0 <i2c_reset+0x34>
	case 0: 
		twim=&AVR32_TWIM0;
80016fcc:	fe 78 38 00 	mov	r8,-51200
80016fd0:	ef 48 ff f8 	st.w	r7[-8],r8
	break;
80016fd4:	c0 a8       	rjmp	80016fe8 <i2c_reset+0x3c>
	case 1:
		twim=&AVR32_TWIM1;
80016fd6:	fe 78 3c 00 	mov	r8,-50176
80016fda:	ef 48 ff f8 	st.w	r7[-8],r8
	break;
80016fde:	c0 58       	rjmp	80016fe8 <i2c_reset+0x3c>
	default: // invalid device ID
		return -1;
80016fe0:	e0 68 00 ff 	mov	r8,255
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
}
80016fe4:	10 9c       	mov	r12,r8
80016fe6:	c2 78       	rjmp	80017034 <i2c_reset+0x88>
		twim=&AVR32_TWIM1;
	break;
	default: // invalid device ID
		return -1;
	}		
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80016fe8:	e1 b8 00 00 	mfsr	r8,0x0
80016fec:	10 9c       	mov	r12,r8
80016fee:	c5 be       	rcall	80016ca4 <cpu_irq_is_enabled_flags>
80016ff0:	18 98       	mov	r8,r12
80016ff2:	ef 68 ff ff 	st.b	r7[-1],r8
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80016ff6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80016ffa:	30 08       	mov	r8,0
80016ffc:	f0 09 18 00 	cp.b	r9,r8
80017000:	c0 20       	breq	80017004 <i2c_reset+0x58>
		cpu_irq_disable ();
80017002:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80017004:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017008:	3f f9       	mov	r9,-1
8001700a:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8001700c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017010:	30 19       	mov	r9,1
80017012:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80017014:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017018:	e0 69 00 80 	mov	r9,128
8001701c:	91 09       	st.w	r8[0x0],r9
	if (global_interrupt_enabled) {
8001701e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80017022:	30 08       	mov	r8,0
80017024:	f0 09 18 00 	cp.b	r9,r8
80017028:	c0 20       	breq	8001702c <i2c_reset+0x80>
		cpu_irq_enable ();
8001702a:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
8001702c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017030:	3f f9       	mov	r9,-1
80017032:	91 b9       	st.w	r8[0x2c],r9
}
80017034:	2f dd       	sub	sp,-12
80017036:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001703a:	00 00       	add	r0,r0
8001703c:	80 01       	ld.sh	r1,r0[0x0]
8001703e:	6e 3a       	ld.w	r10,r7[0xc]

80017040 <i2c_add_request>:
char i2c_add_request(unsigned char i2c_device, i2c_schedule_event* new_event){
80017040:	eb cd 40 c0 	pushm	r6-r7,lr
80017044:	1a 97       	mov	r7,sp
80017046:	20 3d       	sub	sp,12
80017048:	4b f6       	lddpc	r6,80017144 <i2c_add_request+0x104>
8001704a:	1e 26       	rsub	r6,pc
8001704c:	18 98       	mov	r8,r12
8001704e:	ef 4b ff f4 	st.w	r7[-12],r11
80017052:	ef 68 ff f8 	st.b	r7[-8],r8
	// find free schedule slot
	int i=0;
80017056:	30 08       	mov	r8,0
80017058:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i=0; (i<I2C_SCHEDULE_SLOTS)&& (schedule[i2c_device][i].active>=0); i++) {
8001705c:	30 08       	mov	r8,0
8001705e:	ef 48 ff fc 	st.w	r7[-4],r8
80017062:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017066:	58 98       	cp.w	r8,9
80017068:	e0 89 00 1b 	brgt	8001709e <i2c_add_request+0x5e>
8001706c:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80017070:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017074:	ec fa 01 38 	ld.w	r10,r6[312]
80017078:	12 98       	mov	r8,r9
8001707a:	a3 68       	lsl	r8,0x2
8001707c:	12 08       	add	r8,r9
8001707e:	a3 78       	lsl	r8,0x3
80017080:	e0 69 01 90 	mov	r9,400
80017084:	f6 09 02 49 	mul	r9,r11,r9
80017088:	12 08       	add	r8,r9
8001708a:	f4 08 00 08 	add	r8,r10,r8
8001708e:	2e 08       	sub	r8,-32
80017090:	11 98       	ld.ub	r8,r8[0x1]
80017092:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017096:	2f f8       	sub	r8,-1
80017098:	ef 48 ff fc 	st.w	r7[-4],r8
8001709c:	ce 3b       	rjmp	80017062 <i2c_add_request+0x22>
	}
	// add request to schedule
	if (i<I2C_SCHEDULE_SLOTS) {
8001709e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800170a2:	58 98       	cp.w	r8,9
800170a4:	e0 89 00 45 	brgt	8001712e <i2c_add_request+0xee>
		new_event->schedule_slot=i;
800170a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800170ac:	5c 58       	castu.b	r8
800170ae:	ee f9 ff f4 	ld.w	r9,r7[-12]
800170b2:	f3 68 00 18 	st.b	r9[24],r8
		new_event->transfer_in_progress=0;
800170b6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800170ba:	30 08       	mov	r8,0
800170bc:	f3 68 00 22 	st.b	r9[34],r8
		new_event->active=1;
800170c0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800170c4:	30 18       	mov	r8,1
800170c6:	f3 68 00 21 	st.b	r9[33],r8
		schedule[i2c_device][i]=*new_event;
800170ca:	ef 3b ff f8 	ld.ub	r11,r7[-8]
800170ce:	ee f9 ff fc 	ld.w	r9,r7[-4]
800170d2:	ec fa 01 38 	ld.w	r10,r6[312]
800170d6:	12 98       	mov	r8,r9
800170d8:	a3 68       	lsl	r8,0x2
800170da:	12 08       	add	r8,r9
800170dc:	a3 78       	lsl	r8,0x3
800170de:	e0 69 01 90 	mov	r9,400
800170e2:	f6 09 02 49 	mul	r9,r11,r9
800170e6:	12 08       	add	r8,r9
800170e8:	f4 08 00 09 	add	r9,r10,r8
800170ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800170f0:	12 9a       	mov	r10,r9
800170f2:	10 9b       	mov	r11,r8
800170f4:	f4 c8 00 00 	sub	r8,r10,0
800170f8:	f6 c9 00 00 	sub	r9,r11,0
800170fc:	72 0c       	ld.w	r12,r9[0x0]
800170fe:	91 0c       	st.w	r8[0x0],r12
80017100:	72 1c       	ld.w	r12,r9[0x4]
80017102:	91 1c       	st.w	r8[0x4],r12
80017104:	72 2c       	ld.w	r12,r9[0x8]
80017106:	91 2c       	st.w	r8[0x8],r12
80017108:	72 39       	ld.w	r9,r9[0xc]
8001710a:	91 39       	st.w	r8[0xc],r9
8001710c:	f4 c8 ff f0 	sub	r8,r10,-16
80017110:	f6 c9 ff f0 	sub	r9,r11,-16
80017114:	72 0c       	ld.w	r12,r9[0x0]
80017116:	91 0c       	st.w	r8[0x0],r12
80017118:	72 1c       	ld.w	r12,r9[0x4]
8001711a:	91 1c       	st.w	r8[0x4],r12
8001711c:	72 2c       	ld.w	r12,r9[0x8]
8001711e:	91 2c       	st.w	r8[0x8],r12
80017120:	72 39       	ld.w	r9,r9[0xc]
80017122:	91 39       	st.w	r8[0xc],r9
80017124:	f6 e8 00 20 	ld.d	r8,r11[32]
80017128:	f4 e9 00 20 	st.d	r10[32],r8
8001712c:	c0 48       	rjmp	80017134 <i2c_add_request+0xf4>
	} else i=-1;
8001712e:	3f f8       	mov	r8,-1
80017130:	ef 48 ff fc 	st.w	r7[-4],r8
	// return assigned schedule slot
	return i;
80017134:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017138:	5c 58       	castu.b	r8
}
8001713a:	10 9c       	mov	r12,r8
8001713c:	2f dd       	sub	sp,-12
8001713e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017142:	00 00       	add	r0,r0
80017144:	80 01       	ld.sh	r1,r0[0x0]
80017146:	6e ce       	ld.w	lr,r7[0x30]

80017148 <i2c_change_request>:
char i2c_change_request(unsigned char i2c_device, i2c_schedule_event* new_event){
80017148:	eb cd 40 c0 	pushm	r6-r7,lr
8001714c:	1a 97       	mov	r7,sp
8001714e:	20 3d       	sub	sp,12
80017150:	4a a6       	lddpc	r6,800171f8 <i2c_change_request+0xb0>
80017152:	1e 26       	rsub	r6,pc
80017154:	18 98       	mov	r8,r12
80017156:	ef 4b ff f4 	st.w	r7[-12],r11
8001715a:	ef 68 ff f8 	st.b	r7[-8],r8
	int i=new_event->schedule_slot;
8001715e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017162:	f1 38 00 18 	ld.ub	r8,r8[24]
80017166:	ef 48 ff fc 	st.w	r7[-4],r8
	if ((i>=0) && (i<I2C_SCHEDULE_SLOTS)) {
8001716a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001716e:	58 08       	cp.w	r8,0
80017170:	c4 15       	brlt	800171f2 <i2c_change_request+0xaa>
80017172:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017176:	58 98       	cp.w	r8,9
80017178:	e0 89 00 3d 	brgt	800171f2 <i2c_change_request+0xaa>
		new_event->transfer_in_progress=0;
8001717c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017180:	30 08       	mov	r8,0
80017182:	f3 68 00 22 	st.b	r9[34],r8
		new_event->active=1;
80017186:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001718a:	30 18       	mov	r8,1
8001718c:	f3 68 00 21 	st.b	r9[33],r8
		schedule[i2c_device][i]=*new_event;
80017190:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80017194:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017198:	ec fa 01 38 	ld.w	r10,r6[312]
8001719c:	12 98       	mov	r8,r9
8001719e:	a3 68       	lsl	r8,0x2
800171a0:	12 08       	add	r8,r9
800171a2:	a3 78       	lsl	r8,0x3
800171a4:	e0 69 01 90 	mov	r9,400
800171a8:	f6 09 02 49 	mul	r9,r11,r9
800171ac:	12 08       	add	r8,r9
800171ae:	f4 08 00 09 	add	r9,r10,r8
800171b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800171b6:	12 9a       	mov	r10,r9
800171b8:	10 9b       	mov	r11,r8
800171ba:	f4 c8 00 00 	sub	r8,r10,0
800171be:	f6 c9 00 00 	sub	r9,r11,0
800171c2:	72 0c       	ld.w	r12,r9[0x0]
800171c4:	91 0c       	st.w	r8[0x0],r12
800171c6:	72 1c       	ld.w	r12,r9[0x4]
800171c8:	91 1c       	st.w	r8[0x4],r12
800171ca:	72 2c       	ld.w	r12,r9[0x8]
800171cc:	91 2c       	st.w	r8[0x8],r12
800171ce:	72 39       	ld.w	r9,r9[0xc]
800171d0:	91 39       	st.w	r8[0xc],r9
800171d2:	f4 c8 ff f0 	sub	r8,r10,-16
800171d6:	f6 c9 ff f0 	sub	r9,r11,-16
800171da:	72 0c       	ld.w	r12,r9[0x0]
800171dc:	91 0c       	st.w	r8[0x0],r12
800171de:	72 1c       	ld.w	r12,r9[0x4]
800171e0:	91 1c       	st.w	r8[0x4],r12
800171e2:	72 2c       	ld.w	r12,r9[0x8]
800171e4:	91 2c       	st.w	r8[0x8],r12
800171e6:	72 39       	ld.w	r9,r9[0xc]
800171e8:	91 39       	st.w	r8[0xc],r9
800171ea:	f6 e8 00 20 	ld.d	r8,r11[32]
800171ee:	f4 e9 00 20 	st.d	r10[32],r8
	};
}
800171f2:	2f dd       	sub	sp,-12
800171f4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800171f8:	80 01       	ld.sh	r1,r0[0x0]
800171fa:	6f d6       	ld.w	r6,r7[0x74]
800171fc:	77 72       	ld.w	r2,r11[0x5c]
800171fe:	00 00       	add	r0,r0
80017200:	77 00       	ld.w	r0,r11[0x40]

80017202 <i2c_trigger_request>:


char i2c_trigger_request(unsigned char i2c_device, unsigned char schedule_slot) {
80017202:	eb cd 40 c0 	pushm	r6-r7,lr
80017206:	1a 97       	mov	r7,sp
80017208:	20 4d       	sub	sp,16
8001720a:	fe f6 02 32 	ld.w	r6,pc[562]
8001720e:	1e 26       	rsub	r6,pc
80017210:	18 99       	mov	r9,r12
80017212:	16 98       	mov	r8,r11
80017214:	ef 69 ff f4 	st.b	r7[-12],r9
80017218:	ef 68 ff f0 	st.b	r7[-16],r8
	// initiate transfer of given request
	// set up DMA channel
	volatile avr32_twim_t *twim;
	i2c_packet_conf* conf=&schedule[i2c_device][schedule_slot].config;
8001721c:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80017220:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80017224:	12 98       	mov	r8,r9
80017226:	a3 68       	lsl	r8,0x2
80017228:	12 08       	add	r8,r9
8001722a:	a3 78       	lsl	r8,0x3
8001722c:	e0 69 01 90 	mov	r9,400
80017230:	f4 09 02 49 	mul	r9,r10,r9
80017234:	f0 09 00 09 	add	r9,r8,r9
80017238:	ec f8 01 38 	ld.w	r8,r6[312]
8001723c:	f2 08 00 08 	add	r8,r9,r8
80017240:	ef 48 ff fc 	st.w	r7[-4],r8
				.size = 4,	                              // transfer counter
				.r_addr = NULL,                           // next memory address
				.r_size = 0,                              // next transfer counter
				.transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer
			};
	switch (i2c_device) {
80017244:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80017248:	58 08       	cp.w	r8,0
8001724a:	c0 40       	breq	80017252 <i2c_trigger_request+0x50>
8001724c:	58 18       	cp.w	r8,1
8001724e:	c5 90       	breq	80017300 <i2c_trigger_request+0xfe>
80017250:	c5 d8       	rjmp	8001730a <i2c_trigger_request+0x108>
	case 0: 
		twim=&AVR32_TWIM0;
80017252:	fe 78 38 00 	mov	r8,-51200
80017256:	ef 48 ff f8 	st.w	r7[-8],r8
		twim->cr = AVR32_TWIM_CR_MEN_MASK;
8001725a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001725e:	30 19       	mov	r9,1
80017260:	91 09       	st.w	r8[0x0],r9
		twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80017262:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017266:	e0 69 00 80 	mov	r9,128
8001726a:	91 09       	st.w	r8[0x0],r9
		twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8001726c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017270:	30 29       	mov	r9,2
80017272:	91 09       	st.w	r8[0x0],r9
		switch (conf->direction)  {
80017274:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017278:	11 c8       	ld.ub	r8,r8[0x4]
8001727a:	58 18       	cp.w	r8,1
8001727c:	c1 b0       	breq	800172b2 <i2c_trigger_request+0xb0>
8001727e:	58 28       	cp.w	r8,2
80017280:	c0 30       	breq	80017286 <i2c_trigger_request+0x84>
80017282:	58 08       	cp.w	r8,0
80017284:	c3 71       	brne	800172f2 <i2c_trigger_request+0xf0>
		case I2C_WRITE1_THEN_READ:
		case I2C_READ:
			PDCA_OPTIONS.pid=AVR32_TWIM0_PDCA_ID_RX;
80017286:	ec f8 01 54 	ld.w	r8,r6[340]
8001728a:	30 69       	mov	r9,6
8001728c:	91 49       	st.w	r8[0x10],r9
			PDCA_OPTIONS.addr=(void *)conf->read_data;
8001728e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017292:	70 49       	ld.w	r9,r8[0x10]
80017294:	ec f8 01 54 	ld.w	r8,r6[340]
80017298:	91 09       	st.w	r8[0x0],r9
			PDCA_OPTIONS.size=conf->read_count;
8001729a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001729e:	70 59       	ld.w	r9,r8[0x14]
800172a0:	ec f8 01 54 	ld.w	r8,r6[340]
800172a4:	91 19       	st.w	r8[0x4],r9
			// Init PDCA channel with the pdca_options.
			pdca_init_channel(TWI0_DMA_CH, &PDCA_OPTIONS); // init PDCA channel with options.
800172a6:	ec fb 01 54 	ld.w	r11,r6[340]
800172aa:	30 2c       	mov	r12,2
800172ac:	f0 16 00 75 	mcall	r6[468]
			break;
800172b0:	c2 18       	rjmp	800172f2 <i2c_trigger_request+0xf0>
		case I2C_WRITE:
			PDCA_OPTIONS.pid=AVR32_TWIM0_PDCA_ID_TX;
800172b2:	ec f8 01 54 	ld.w	r8,r6[340]
800172b6:	31 19       	mov	r9,17
800172b8:	91 49       	st.w	r8[0x10],r9
			PDCA_OPTIONS.addr=(void *)conf->write_data;
800172ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800172be:	70 29       	ld.w	r9,r8[0x8]
800172c0:	ec f8 01 54 	ld.w	r8,r6[340]
800172c4:	91 09       	st.w	r8[0x0],r9
			PDCA_OPTIONS.size=conf->write_count;
800172c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800172ca:	70 39       	ld.w	r9,r8[0xc]
800172cc:	ec f8 01 54 	ld.w	r8,r6[340]
800172d0:	91 19       	st.w	r8[0x4],r9
			
			// Init PDCA channel with the pdca_options.
			pdca_init_channel(TWI0_DMA_CH, &PDCA_OPTIONS); // init PDCA channel with options.
800172d2:	ec fb 01 54 	ld.w	r11,r6[340]
800172d6:	30 2c       	mov	r12,2
800172d8:	f0 16 00 75 	mcall	r6[468]
			pdca_load_channel(TWI0_DMA_CH, (void *)conf->write_data, conf->write_count);
800172dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800172e0:	70 39       	ld.w	r9,r8[0xc]
800172e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800172e6:	70 28       	ld.w	r8,r8[0x8]
800172e8:	12 9a       	mov	r10,r9
800172ea:	10 9b       	mov	r11,r8
800172ec:	30 2c       	mov	r12,2
800172ee:	f0 16 00 b7 	mcall	r6[732]
		}
		
//		pdca_load_channel(TWI0_DMA_CH, (void *)schedule[i2c_device][schedule_slot].config.write_data, schedule[i2c_device][schedule_slot].config.write_count);
		// Enable pdca interrupt each time the reload counter reaches zero, i.e. each time
		// the whole block was received
		pdca_enable_interrupt_transfer_complete(TWI0_DMA_CH);
800172f2:	30 2c       	mov	r12,2
800172f4:	f0 16 00 b6 	mcall	r6[728]
		pdca_enable_interrupt_transfer_error(TWI0_DMA_CH);
800172f8:	30 2c       	mov	r12,2
800172fa:	f0 16 02 1f 	mcall	r6[2172]
		
		
		break;
800172fe:	c0 98       	rjmp	80017310 <i2c_trigger_request+0x10e>
	case 1:
		twim=&AVR32_TWIM1;
80017300:	fe 78 3c 00 	mov	r8,-50176
80017304:	ef 48 ff f8 	st.w	r7[-8],r8
	break;
80017308:	c0 48       	rjmp	80017310 <i2c_trigger_request+0x10e>
	default: // invalid device ID
		return -1;
8001730a:	e0 68 00 ff 	mov	r8,255
8001730e:	c9 38       	rjmp	80017434 <i2c_trigger_request+0x232>
	}		

	// set up I2C speed and mode
//	twim_set_speed(twim, 100000, sysclk_get_pba_hz());
    
	switch (conf->direction)  {
80017310:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017314:	11 c8       	ld.ub	r8,r8[0x4]
80017316:	58 18       	cp.w	r8,1
80017318:	c4 40       	breq	800173a0 <i2c_trigger_request+0x19e>
8001731a:	58 28       	cp.w	r8,2
8001731c:	c1 50       	breq	80017346 <i2c_trigger_request+0x144>
8001731e:	58 08       	cp.w	r8,0
80017320:	c6 51       	brne	800173ea <i2c_trigger_request+0x1e8>
		case I2C_READ:
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
80017322:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017326:	11 88       	ld.ub	r8,r8[0x0]
80017328:	a1 78       	lsl	r8,0x1
						| (conf->read_count << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
8001732a:	10 99       	mov	r9,r8
//	twim_set_speed(twim, 100000, sysclk_get_pba_hz());
    
	switch (conf->direction)  {
		case I2C_READ:
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
						| (conf->read_count << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8001732c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017330:	70 58       	ld.w	r8,r8[0x14]
80017332:	b1 68       	lsl	r8,0x10
						| (AVR32_TWIM_CMDR_VALID_MASK)
80017334:	f3 e8 10 08 	or	r8,r9,r8
	// set up I2C speed and mode
//	twim_set_speed(twim, 100000, sysclk_get_pba_hz());
    
	switch (conf->direction)  {
		case I2C_READ:
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
80017338:	10 99       	mov	r9,r8
8001733a:	e8 19 a0 00 	orl	r9,0xa000
8001733e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017342:	91 39       	st.w	r8[0xc],r9
						| (conf->read_count << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
			break;	
80017344:	c5 38       	rjmp	800173ea <i2c_trigger_request+0x1e8>
		case I2C_WRITE1_THEN_READ:
			dbg_print( "wr");
80017346:	fe cc 01 4a 	sub	r12,pc,330
8001734a:	f0 16 00 01 	mcall	r6[4]
			
			// set up next command register for the burst read transfer
			// set up command register to initiate the write transfer. The DMA will take care of the reading once this is done.
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
8001734e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017352:	11 88       	ld.ub	r8,r8[0x0]
80017354:	a1 78       	lsl	r8,0x1
80017356:	ea 18 00 01 	orh	r8,0x1
8001735a:	e8 18 a0 00 	orl	r8,0xa000
8001735e:	10 99       	mov	r9,r8
80017360:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017364:	91 39       	st.w	r8[0xc],r9
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			

			twim->ncmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
80017366:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001736a:	11 88       	ld.ub	r8,r8[0x0]
8001736c:	a1 78       	lsl	r8,0x1
						| ((conf->read_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
8001736e:	10 99       	mov	r9,r8
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			

			twim->ncmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
						| ((conf->read_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80017370:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017374:	70 58       	ld.w	r8,r8[0x14]
80017376:	b1 68       	lsl	r8,0x10
						| (AVR32_TWIM_CMDR_VALID_MASK)
80017378:	f3 e8 10 08 	or	r8,r9,r8
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			

			twim->ncmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
8001737c:	10 99       	mov	r9,r8
8001737e:	e8 19 a0 00 	orl	r9,0xa000
80017382:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017386:	91 49       	st.w	r8[0x10],r9
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
			// set up writing of one byte (usually a slave register index)
			//twim->cr = AVR32_TWIM_CR_MEN_MASK;
			twim->thr=conf->write_then_read_preamble;
80017388:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001738c:	11 d8       	ld.ub	r8,r8[0x5]
8001738e:	10 99       	mov	r9,r8
80017390:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017394:	91 69       	st.w	r8[0x18],r9
			twim->cr = AVR32_TWIM_CR_MEN_MASK;
80017396:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001739a:	30 19       	mov	r9,1
8001739c:	91 09       	st.w	r8[0x0],r9
			
			break;	
8001739e:	c2 68       	rjmp	800173ea <i2c_trigger_request+0x1e8>
		case I2C_WRITE:
			dbg_print( "w");
800173a0:	fe cc 01 a0 	sub	r12,pc,416
800173a4:	f0 16 00 01 	mcall	r6[4]
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
800173a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800173ac:	11 88       	ld.ub	r8,r8[0x0]
800173ae:	a1 78       	lsl	r8,0x1
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
800173b0:	10 99       	mov	r9,r8
			
			break;	
		case I2C_WRITE:
			dbg_print( "w");
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
800173b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800173b6:	70 38       	ld.w	r8,r8[0xc]
800173b8:	b1 68       	lsl	r8,0x10
						| (AVR32_TWIM_CMDR_VALID_MASK)
800173ba:	f3 e8 10 08 	or	r8,r9,r8
			twim->cr = AVR32_TWIM_CR_MEN_MASK;
			
			break;	
		case I2C_WRITE:
			dbg_print( "w");
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
800173be:	10 99       	mov	r9,r8
800173c0:	e8 19 a0 00 	orl	r9,0xa000
800173c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800173c8:	91 39       	st.w	r8[0xc],r9
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			twim->ncmdr=(conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
800173ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800173ce:	11 88       	ld.ub	r8,r8[0x0]
800173d0:	a1 78       	lsl	r8,0x1
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						//| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
800173d2:	10 99       	mov	r9,r8
						| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			twim->ncmdr=(conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
800173d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800173d8:	70 38       	ld.w	r8,r8[0xc]
800173da:	b1 68       	lsl	r8,0x10
						//| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
800173dc:	f3 e8 10 08 	or	r8,r9,r8
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			twim->ncmdr=(conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
800173e0:	10 99       	mov	r9,r8
800173e2:	ad b9       	sbr	r9,0xd
800173e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800173e8:	91 49       	st.w	r8[0x10],r9
		break;	
	}		
	// start transfer
	

	current_schedule_slot[i2c_device]=schedule_slot;
800173ea:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800173ee:	ec fa 02 7c 	ld.w	r10,r6[636]
800173f2:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800173f6:	f4 09 0b 08 	st.b	r10[r9],r8
	schedule[i2c_device][schedule_slot].transfer_in_progress=1;
800173fa:	ef 3b ff f4 	ld.ub	r11,r7[-12]
800173fe:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80017402:	ec fa 01 38 	ld.w	r10,r6[312]
80017406:	12 98       	mov	r8,r9
80017408:	a3 68       	lsl	r8,0x2
8001740a:	12 08       	add	r8,r9
8001740c:	a3 78       	lsl	r8,0x3
8001740e:	e0 69 01 90 	mov	r9,400
80017412:	f6 09 02 49 	mul	r9,r11,r9
80017416:	12 08       	add	r8,r9
80017418:	f4 08 00 08 	add	r8,r10,r8
8001741c:	f0 c9 ff e0 	sub	r9,r8,-32
80017420:	30 18       	mov	r8,1
80017422:	b2 a8       	st.b	r9[0x2],r8
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80017424:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017428:	30 19       	mov	r9,1
8001742a:	91 09       	st.w	r8[0x0],r9
	pdca_enable(TWI0_DMA_CH);
8001742c:	30 2c       	mov	r12,2
8001742e:	f0 16 00 90 	mcall	r6[576]
	return 0;
80017432:	30 08       	mov	r8,0
}
80017434:	10 9c       	mov	r12,r8
80017436:	2f cd       	sub	sp,-16
80017438:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001743c:	80 01       	ld.sh	r1,r0[0x0]
8001743e:	70 92       	ld.w	r2,r8[0x24]

80017440 <i2c_pause_request>:

char i2c_pause_request(unsigned char i2c_device, unsigned char schedule_slot){
80017440:	eb cd 40 80 	pushm	r7,lr
80017444:	1a 97       	mov	r7,sp
80017446:	20 2d       	sub	sp,8
80017448:	18 99       	mov	r9,r12
8001744a:	16 98       	mov	r8,r11
8001744c:	ef 69 ff fc 	st.b	r7[-4],r9
80017450:	ef 68 ff f8 	st.b	r7[-8],r8
	// pause scheduler
	// if this request currently active, wait for current transfer to finish
	// deactivate request
	// resume scheduler
}
80017454:	2f ed       	sub	sp,-8
80017456:	e3 cd 80 80 	ldm	sp++,r7,pc

8001745a <i2c_enable_request>:

char i2c_enable_request(unsigned char i2c_device, unsigned char schedule_slot){
8001745a:	eb cd 40 80 	pushm	r7,lr
8001745e:	1a 97       	mov	r7,sp
80017460:	20 2d       	sub	sp,8
80017462:	18 99       	mov	r9,r12
80017464:	16 98       	mov	r8,r11
80017466:	ef 69 ff fc 	st.b	r7[-4],r9
8001746a:	ef 68 ff f8 	st.b	r7[-8],r8
	return 0;
8001746e:	30 08       	mov	r8,0
}
80017470:	10 9c       	mov	r12,r8
80017472:	2f ed       	sub	sp,-8
80017474:	e3 cd 80 80 	ldm	sp++,r7,pc

80017478 <i2c_remove_request>:

char i2c_remove_request(unsigned char i2c_device, unsigned char schedule_slot){
80017478:	eb cd 40 80 	pushm	r7,lr
8001747c:	1a 97       	mov	r7,sp
8001747e:	20 2d       	sub	sp,8
80017480:	18 99       	mov	r9,r12
80017482:	16 98       	mov	r8,r11
80017484:	ef 69 ff fc 	st.b	r7[-4],r9
80017488:	ef 68 ff f8 	st.b	r7[-8],r8
	return 0;
8001748c:	30 08       	mov	r8,0
}
8001748e:	10 9c       	mov	r12,r8
80017490:	2f ed       	sub	sp,-8
80017492:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80017498 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80017498:	eb cd 40 c0 	pushm	r6-r7,lr
8001749c:	1a 97       	mov	r7,sp
8001749e:	20 6d       	sub	sp,24
800174a0:	49 e6       	lddpc	r6,80017518 <interpolate+0x80>
800174a2:	1e 26       	rsub	r6,pc
800174a4:	ef 4c ff f8 	st.w	r7[-8],r12
800174a8:	ef 4b ff f4 	st.w	r7[-12],r11
800174ac:	ef 4a ff f0 	st.w	r7[-16],r10
800174b0:	ef 49 ff ec 	st.w	r7[-20],r9
800174b4:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
800174b8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800174bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800174c0:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800174c4:	c0 41       	brne	800174cc <interpolate+0x34>
	{
		return y1;
800174c6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800174ca:	c2 38       	rjmp	80017510 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
800174cc:	ee f9 ff e8 	ld.w	r9,r7[-24]
800174d0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800174d4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800174d8:	ee fa ff f8 	ld.w	r10,r7[-8]
800174dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800174e0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800174e4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800174e8:	ee fa ff f0 	ld.w	r10,r7[-16]
800174ec:	ee f9 ff f4 	ld.w	r9,r7[-12]
800174f0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800174f4:	12 9b       	mov	r11,r9
800174f6:	10 9c       	mov	r12,r8
800174f8:	f0 16 00 08 	mcall	r6[32]
800174fc:	18 98       	mov	r8,r12
800174fe:	10 99       	mov	r9,r8
80017500:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017504:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80017508:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8001750c:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80017510:	10 9c       	mov	r12,r8
80017512:	2f ad       	sub	sp,-24
80017514:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017518:	80 01       	ld.sh	r1,r0[0x0]
8001751a:	73 26       	ld.w	r6,r9[0x48]

8001751c <init_itg3200>:
} gyro_config;

gyro_config default_configuration;
uint8_t read_preamble=SENSOR_REG_ADDRESS;

void init_itg3200(void) {
8001751c:	eb cd 40 c0 	pushm	r6-r7,lr
80017520:	1a 97       	mov	r7,sp
80017522:	4b c6       	lddpc	r6,80017610 <init_itg3200+0xf4>
80017524:	1e 26       	rsub	r6,pc
	default_configuration.conf_start_reg_address=CONFIG_REG_ADDRESS;
80017526:	ec f9 01 40 	ld.w	r9,r6[320]
8001752a:	31 58       	mov	r8,21
8001752c:	b2 88       	st.b	r9[0x0],r8

	default_configuration.sample_div=4; //output frequency after filtering: 1khz/8khz /(sample_div +1)
8001752e:	ec f9 01 40 	ld.w	r9,r6[320]
80017532:	30 48       	mov	r8,4
80017534:	b2 98       	st.b	r9[0x1],r8
	default_configuration.DLPF=DLPF_42HZ;
80017536:	ec f9 01 40 	ld.w	r9,r6[320]
8001753a:	30 38       	mov	r8,3
8001753c:	b2 a8       	st.b	r9[0x2],r8
	default_configuration.interrupts=0;
8001753e:	ec f9 01 40 	ld.w	r9,r6[320]
80017542:	30 08       	mov	r8,0
80017544:	b2 b8       	st.b	r9[0x3],r8

	gyro_event.callback=0;
80017546:	ec f8 00 7c 	ld.w	r8,r6[124]
8001754a:	30 09       	mov	r9,0
8001754c:	91 c9       	st.w	r8[0x30],r9
	gyro_event.repetition_rate_ms=5;
8001754e:	ec f8 00 7c 	ld.w	r8,r6[124]
80017552:	30 59       	mov	r9,5
80017554:	91 a9       	st.w	r8[0x28],r9
	gyro_event.trigger_next_event=-1;
80017556:	ec f9 00 7c 	ld.w	r9,r6[124]
8001755a:	3f f8       	mov	r8,-1
8001755c:	f3 68 00 2c 	st.b	r9[44],r8

	gyro_event.config.slave_address=ITG3200_SLAVE_ADDRESS;
80017560:	ec f9 00 7c 	ld.w	r9,r6[124]
80017564:	36 88       	mov	r8,104
80017566:	b2 88       	st.b	r9[0x0],r8
	gyro_event.config.direction=I2C_WRITE;
80017568:	ec f9 00 7c 	ld.w	r9,r6[124]
8001756c:	30 18       	mov	r8,1
8001756e:	f3 68 00 08 	st.b	r9[8],r8
	gyro_event.config.read_data=&gyro_outputs;
80017572:	ec f9 02 08 	ld.w	r9,r6[520]
80017576:	ec f8 00 7c 	ld.w	r8,r6[124]
8001757a:	91 59       	st.w	r8[0x14],r9
	gyro_event.config.read_count=8;
8001757c:	ec f8 00 7c 	ld.w	r8,r6[124]
80017580:	30 89       	mov	r9,8
80017582:	91 69       	st.w	r8[0x18],r9
	gyro_event.config.write_data=&default_configuration;
80017584:	ec f8 00 7c 	ld.w	r8,r6[124]
80017588:	ec f9 01 40 	ld.w	r9,r6[320]
8001758c:	91 39       	st.w	r8[0xc],r9
	gyro_event.config.write_count=4;
8001758e:	ec f8 00 7c 	ld.w	r8,r6[124]
80017592:	30 49       	mov	r9,4
80017594:	91 49       	st.w	r8[0x10],r9
	gyro_event.config.i2c_speed=100000;
80017596:	ec f8 00 7c 	ld.w	r8,r6[124]
8001759a:	e0 79 86 a0 	mov	r9,100000
8001759e:	91 19       	st.w	r8[0x4],r9
	
	i2c_add_request(0, &gyro_event);
800175a0:	ec fb 00 7c 	ld.w	r11,r6[124]
800175a4:	30 0c       	mov	r12,0
800175a6:	f0 16 01 10 	mcall	r6[1088]
	i2c_trigger_request(0, gyro_event.schedule_slot);
800175aa:	ec f8 00 7c 	ld.w	r8,r6[124]
800175ae:	f1 38 00 24 	ld.ub	r8,r8[36]
800175b2:	10 9b       	mov	r11,r8
800175b4:	30 0c       	mov	r12,0
800175b6:	f0 16 00 60 	mcall	r6[384]
	
	
	gyro_event.config.direction=I2C_WRITE1_THEN_READ;
800175ba:	ec f9 00 7c 	ld.w	r9,r6[124]
800175be:	30 28       	mov	r8,2
800175c0:	f3 68 00 08 	st.b	r9[8],r8
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
800175c4:	ec f9 00 7c 	ld.w	r9,r6[124]
800175c8:	31 b8       	mov	r8,27
800175ca:	f3 68 00 09 	st.b	r9[9],r8
	gyro_event.config.write_data=&read_preamble;
800175ce:	ec f8 00 7c 	ld.w	r8,r6[124]
800175d2:	ec f9 07 a8 	ld.w	r9,r6[1960]
800175d6:	91 39       	st.w	r8[0xc],r9
	gyro_event.config.write_count=1;
800175d8:	ec f8 00 7c 	ld.w	r8,r6[124]
800175dc:	30 19       	mov	r9,1
800175de:	91 49       	st.w	r8[0x10],r9
	
	gyro_event.config.read_data=&gyro_outputs;
800175e0:	ec f9 02 08 	ld.w	r9,r6[520]
800175e4:	ec f8 00 7c 	ld.w	r8,r6[124]
800175e8:	91 59       	st.w	r8[0x14],r9
	gyro_event.config.read_count=8;
800175ea:	ec f8 00 7c 	ld.w	r8,r6[124]
800175ee:	30 89       	mov	r9,8
800175f0:	91 69       	st.w	r8[0x18],r9
	i2c_change_request(0, &gyro_event);
800175f2:	ec fb 00 7c 	ld.w	r11,r6[124]
800175f6:	30 0c       	mov	r12,0
800175f8:	f0 16 01 11 	mcall	r6[1092]
	i2c_trigger_request(0, gyro_event.schedule_slot);
800175fc:	ec f8 00 7c 	ld.w	r8,r6[124]
80017600:	f1 38 00 24 	ld.ub	r8,r8[36]
80017604:	10 9b       	mov	r11,r8
80017606:	30 0c       	mov	r12,0
80017608:	f0 16 00 60 	mcall	r6[384]
	/**/
}
8001760c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017610:	80 01       	ld.sh	r1,r0[0x0]
80017612:	73 a8       	ld.w	r8,r9[0x68]

80017614 <reconfigure_gyro>:

void reconfigure_gyro(void) {
80017614:	eb cd 40 c0 	pushm	r6-r7,lr
80017618:	1a 97       	mov	r7,sp
8001761a:	48 76       	lddpc	r6,80017634 <reconfigure_gyro+0x20>
8001761c:	1e 26       	rsub	r6,pc
	i2c_trigger_request(0, gyro_event.schedule_slot);
8001761e:	ec f8 00 7c 	ld.w	r8,r6[124]
80017622:	f1 38 00 24 	ld.ub	r8,r8[36]
80017626:	10 9b       	mov	r11,r8
80017628:	30 0c       	mov	r12,0
8001762a:	f0 16 00 60 	mcall	r6[384]
}
8001762e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017632:	00 00       	add	r0,r0
80017634:	80 01       	ld.sh	r1,r0[0x0]
80017636:	74 a0       	ld.w	r0,r10[0x28]

80017638 <init_itg3200_slow>:

void init_itg3200_slow(void) {
80017638:	eb cd 40 c0 	pushm	r6-r7,lr
8001763c:	1a 97       	mov	r7,sp
8001763e:	48 a6       	lddpc	r6,80017664 <init_itg3200_slow+0x2c>
80017640:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = ITG3200_SLAVE_ADDRESS, 
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM0, &twi_opt);
80017642:	ec fb 08 bc 	ld.w	r11,r6[2236]
80017646:	fe 7c 38 00 	mov	r12,-51200
8001764a:	f0 16 00 70 	mcall	r6[448]
	twim_write(&AVR32_TWIM0, (uint8_t*)&default_configuration, 4, ITG3200_SLAVE_ADDRESS, false);
8001764e:	30 08       	mov	r8,0
80017650:	36 89       	mov	r9,104
80017652:	30 4a       	mov	r10,4
80017654:	ec fb 01 40 	ld.w	r11,r6[320]
80017658:	fe 7c 38 00 	mov	r12,-51200
8001765c:	f0 16 00 36 	mcall	r6[216]
}
80017660:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017664:	80 01       	ld.sh	r1,r0[0x0]
80017666:	74 c4       	ld.w	r4,r10[0x30]

80017668 <get_gyro_data>:

gyro_data* get_gyro_data(void) {
80017668:	eb cd 40 c0 	pushm	r6-r7,lr
8001766c:	1a 97       	mov	r7,sp
8001766e:	48 86       	lddpc	r6,8001768c <get_gyro_data+0x24>
80017670:	1e 26       	rsub	r6,pc
	i2c_trigger_request(0, gyro_event.schedule_slot);
80017672:	ec f8 00 7c 	ld.w	r8,r6[124]
80017676:	f1 38 00 24 	ld.ub	r8,r8[36]
8001767a:	10 9b       	mov	r11,r8
8001767c:	30 0c       	mov	r12,0
8001767e:	f0 16 00 60 	mcall	r6[384]
	return &gyro_outputs;
80017682:	ec f8 02 08 	ld.w	r8,r6[520]
}
80017686:	10 9c       	mov	r12,r8
80017688:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001768c:	80 01       	ld.sh	r1,r0[0x0]
8001768e:	74 f4       	ld.w	r4,r10[0x3c]

80017690 <get_gyro_data_slow>:

gyro_data* get_gyro_data_slow(void) {
80017690:	eb cd 40 c0 	pushm	r6-r7,lr
80017694:	1a 97       	mov	r7,sp
80017696:	49 16       	lddpc	r6,800176d8 <get_gyro_data_slow+0x48>
80017698:	1e 26       	rsub	r6,pc
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
8001769a:	ec f9 00 7c 	ld.w	r9,r6[124]
8001769e:	31 b8       	mov	r8,27
800176a0:	f3 68 00 09 	st.b	r9[9],r8
	twim_write(&AVR32_TWIM0, (uint8_t*) &gyro_event.config.write_then_read_preamble, 1, ITG3200_SLAVE_ADDRESS, false);
800176a4:	ec f8 00 7c 	ld.w	r8,r6[124]
800176a8:	f0 cb ff f7 	sub	r11,r8,-9
800176ac:	30 08       	mov	r8,0
800176ae:	36 89       	mov	r9,104
800176b0:	30 1a       	mov	r10,1
800176b2:	fe 7c 38 00 	mov	r12,-51200
800176b6:	f0 16 00 36 	mcall	r6[216]
	twim_read(&AVR32_TWIM0, (uint8_t*)&gyro_outputs, 8, ITG3200_SLAVE_ADDRESS, false);
800176ba:	ec fb 02 08 	ld.w	r11,r6[520]
800176be:	30 08       	mov	r8,0
800176c0:	36 89       	mov	r9,104
800176c2:	30 8a       	mov	r10,8
800176c4:	fe 7c 38 00 	mov	r12,-51200
800176c8:	f0 16 00 5f 	mcall	r6[380]
	
	
	return &gyro_outputs;
800176cc:	ec f8 02 08 	ld.w	r8,r6[520]
800176d0:	10 9c       	mov	r12,r8
800176d2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800176d6:	00 00       	add	r0,r0
800176d8:	80 01       	ld.sh	r1,r0[0x0]
800176da:	75 1c       	ld.w	r12,r10[0x44]

800176dc <LED_Read_Display>:
//! Saved state of all LEDs.
static volatile U32 LED_State = (1 << LED_COUNT) - 1;


U32 LED_Read_Display(void)
{
800176dc:	eb cd 40 c0 	pushm	r6-r7,lr
800176e0:	1a 97       	mov	r7,sp
800176e2:	48 56       	lddpc	r6,800176f4 <LED_Read_Display+0x18>
800176e4:	1e 26       	rsub	r6,pc
  return LED_State;
800176e6:	ec f8 00 f4 	ld.w	r8,r6[244]
800176ea:	70 08       	ld.w	r8,r8[0x0]
}
800176ec:	10 9c       	mov	r12,r8
800176ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800176f2:	00 00       	add	r0,r0
800176f4:	80 01       	ld.sh	r1,r0[0x0]
800176f6:	75 68       	ld.w	r8,r10[0x58]

800176f8 <LED_Display>:


void LED_Display(U32 leds)
{
800176f8:	eb cd 40 c0 	pushm	r6-r7,lr
800176fc:	1a 97       	mov	r7,sp
800176fe:	20 3d       	sub	sp,12
80017700:	4a 96       	lddpc	r6,800177a4 <LED_Display+0xac>
80017702:	1e 26       	rsub	r6,pc
80017704:	ef 4c ff f4 	st.w	r7[-12],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor;
  volatile avr32_gpio_port_t *led_gpio_port;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80017708:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001770c:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80017710:	ef 48 ff f4 	st.w	r7[-12],r8

  // Update the saved state of all LEDs with the requested changes.
  LED_State = leds;
80017714:	ec f8 00 f4 	ld.w	r8,r6[244]
80017718:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001771c:	91 09       	st.w	r8[0x0],r9

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
8001771e:	ec f8 01 b0 	ld.w	r8,r6[432]
80017722:	ef 48 ff f8 	st.w	r7[-8],r8
80017726:	c3 58       	rjmp	80017790 <LED_Display+0x98>
       led_descriptor < LED_DESCRIPTOR + LED_COUNT;
       led_descriptor++)
  {
    // Set the LED to the requested state.
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80017728:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001772c:	70 08       	ld.w	r8,r8[0x0]
8001772e:	a9 78       	lsl	r8,0x9
80017730:	e0 28 e0 00 	sub	r8,57344
80017734:	ef 48 ff fc 	st.w	r7[-4],r8
    if (leds & 1)
80017738:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001773c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80017740:	5c 58       	castu.b	r8
80017742:	c0 90       	breq	80017754 <LED_Display+0x5c>
    {
      led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80017744:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017748:	70 19       	ld.w	r9,r8[0x4]
8001774a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001774e:	f1 49 00 58 	st.w	r8[88],r9
80017752:	c0 88       	rjmp	80017762 <LED_Display+0x6a>
    }
    else
    {
      led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80017754:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017758:	70 19       	ld.w	r9,r8[0x4]
8001775a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001775e:	f1 49 00 54 	st.w	r8[84],r9
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80017762:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017766:	70 19       	ld.w	r9,r8[0x4]
80017768:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001776c:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80017770:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017774:	70 19       	ld.w	r9,r8[0x4]
80017776:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001777a:	91 19       	st.w	r8[0x4],r9
    leds >>= 1;
8001777c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017780:	a1 98       	lsr	r8,0x1
80017782:	ef 48 ff f4 	st.w	r7[-12],r8
  LED_State = leds;

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
       led_descriptor < LED_DESCRIPTOR + LED_COUNT;
       led_descriptor++)
80017786:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001778a:	2f 08       	sub	r8,-16
8001778c:	ef 48 ff f8 	st.w	r7[-8],r8

  // Update the saved state of all LEDs with the requested changes.
  LED_State = leds;

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
80017790:	ee f9 ff f8 	ld.w	r9,r7[-8]
80017794:	ec f8 01 b0 	ld.w	r8,r6[432]
80017798:	2e 08       	sub	r8,-32
8001779a:	10 39       	cp.w	r9,r8
8001779c:	cc 63       	brcs	80017728 <LED_Display+0x30>
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= 1;
  }
}
8001779e:	2f dd       	sub	sp,-12
800177a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800177a4:	80 01       	ld.sh	r1,r0[0x0]
800177a6:	75 86       	ld.w	r6,r10[0x60]

800177a8 <LED_Read_Display_Mask>:


U32 LED_Read_Display_Mask(U32 mask)
{
800177a8:	eb cd 40 c0 	pushm	r6-r7,lr
800177ac:	1a 97       	mov	r7,sp
800177ae:	20 1d       	sub	sp,4
800177b0:	48 86       	lddpc	r6,800177d0 <LED_Read_Display_Mask+0x28>
800177b2:	1e 26       	rsub	r6,pc
800177b4:	ef 4c ff fc 	st.w	r7[-4],r12
  return Rd_bits(LED_State, mask);
800177b8:	ec f8 00 f4 	ld.w	r8,r6[244]
800177bc:	70 09       	ld.w	r9,r8[0x0]
800177be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800177c2:	f3 e8 00 08 	and	r8,r9,r8
}
800177c6:	10 9c       	mov	r12,r8
800177c8:	2f fd       	sub	sp,-4
800177ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800177ce:	00 00       	add	r0,r0
800177d0:	80 01       	ld.sh	r1,r0[0x0]
800177d2:	76 36       	ld.w	r6,r11[0xc]

800177d4 <LED_Display_Mask>:


void LED_Display_Mask(U32 mask, U32 leds)
{
800177d4:	eb cd 40 c0 	pushm	r6-r7,lr
800177d8:	1a 97       	mov	r7,sp
800177da:	20 5d       	sub	sp,20
800177dc:	4b f6       	lddpc	r6,800178d8 <LED_Display_Mask+0x104>
800177de:	1e 26       	rsub	r6,pc
800177e0:	ef 4c ff f0 	st.w	r7[-16],r12
800177e4:	ef 4b ff ec 	st.w	r7[-20],r11
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
800177e8:	ec f8 01 b0 	ld.w	r8,r6[432]
800177ec:	21 08       	sub	r8,16
800177ee:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  mask &= (1 << LED_COUNT) - 1;
800177f2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800177f6:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800177fa:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Wr_bits(LED_State, mask, leds);
800177fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017802:	f0 09 11 ff 	rsub	r9,r8,-1
80017806:	ec f8 00 f4 	ld.w	r8,r6[244]
8001780a:	70 08       	ld.w	r8,r8[0x0]
8001780c:	10 69       	and	r9,r8
8001780e:	ee fa ff ec 	ld.w	r10,r7[-20]
80017812:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017816:	f5 e8 00 08 	and	r8,r10,r8
8001781a:	10 49       	or	r9,r8
8001781c:	ec f8 00 f4 	ld.w	r8,r6[244]
80017820:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (mask)
80017822:	c5 38       	rjmp	800178c8 <LED_Display_Mask+0xf4>
  {
    // Select the next specified LED and set it to the requested state.
    led_shift = 1 + ctz(mask);
80017824:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017828:	5c 98       	brev	r8
8001782a:	f0 08 12 00 	clz	r8,r8
8001782e:	5c 58       	castu.b	r8
80017830:	2f f8       	sub	r8,-1
80017832:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
80017836:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001783a:	a5 68       	lsl	r8,0x4
8001783c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017840:	f2 08 00 08 	add	r8,r9,r8
80017844:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80017848:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001784c:	70 08       	ld.w	r8,r8[0x0]
8001784e:	a9 78       	lsl	r8,0x9
80017850:	e0 28 e0 00 	sub	r8,57344
80017854:	ef 48 ff f8 	st.w	r7[-8],r8
    leds >>= led_shift - 1;
80017858:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001785c:	20 18       	sub	r8,1
8001785e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80017862:	f2 08 0a 48 	lsr	r8,r9,r8
80017866:	ef 48 ff ec 	st.w	r7[-20],r8
    if (leds & 1)
8001786a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001786e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80017872:	5c 58       	castu.b	r8
80017874:	c0 90       	breq	80017886 <LED_Display_Mask+0xb2>
    {
      led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80017876:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001787a:	70 19       	ld.w	r9,r8[0x4]
8001787c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017880:	f1 49 00 58 	st.w	r8[88],r9
80017884:	c0 88       	rjmp	80017894 <LED_Display_Mask+0xc0>
    }
    else
    {
      led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80017886:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001788a:	70 19       	ld.w	r9,r8[0x4]
8001788c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017890:	f1 49 00 54 	st.w	r8[84],r9
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80017894:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017898:	70 19       	ld.w	r9,r8[0x4]
8001789a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001789e:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
800178a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800178a6:	70 19       	ld.w	r9,r8[0x4]
800178a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800178ac:	91 19       	st.w	r8[0x4],r9
    leds >>= 1;
800178ae:	ee f8 ff ec 	ld.w	r8,r7[-20]
800178b2:	a1 98       	lsr	r8,0x1
800178b4:	ef 48 ff ec 	st.w	r7[-20],r8
    mask >>= led_shift;
800178b8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800178bc:	ee f9 ff f0 	ld.w	r9,r7[-16]
800178c0:	f2 08 0a 48 	lsr	r8,r9,r8
800178c4:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Wr_bits(LED_State, mask, leds);

  // While there are specified LEDs left to manage...
  while (mask)
800178c8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800178cc:	58 08       	cp.w	r8,0
800178ce:	ca b1       	brne	80017824 <LED_Display_Mask+0x50>
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= 1;
    mask >>= led_shift;
  }
}
800178d0:	2f bd       	sub	sp,-20
800178d2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800178d6:	00 00       	add	r0,r0
800178d8:	80 01       	ld.sh	r1,r0[0x0]
800178da:	76 62       	ld.w	r2,r11[0x18]

800178dc <LED_Test>:


bool LED_Test(U32 leds)
{
800178dc:	eb cd 40 c0 	pushm	r6-r7,lr
800178e0:	1a 97       	mov	r7,sp
800178e2:	20 1d       	sub	sp,4
800178e4:	48 96       	lddpc	r6,80017908 <LED_Test+0x2c>
800178e6:	1e 26       	rsub	r6,pc
800178e8:	ef 4c ff fc 	st.w	r7[-4],r12
  return Tst_bits(LED_State, leds);
800178ec:	ec f8 00 f4 	ld.w	r8,r6[244]
800178f0:	70 09       	ld.w	r9,r8[0x0]
800178f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800178f6:	f3 e8 00 08 	and	r8,r9,r8
800178fa:	5f 18       	srne	r8
800178fc:	5c 58       	castu.b	r8
}
800178fe:	10 9c       	mov	r12,r8
80017900:	2f fd       	sub	sp,-4
80017902:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017906:	00 00       	add	r0,r0
80017908:	80 01       	ld.sh	r1,r0[0x0]
8001790a:	77 6a       	ld.w	r10,r11[0x58]

8001790c <LED_Off>:


void LED_Off(U32 leds)
{
8001790c:	eb cd 40 c0 	pushm	r6-r7,lr
80017910:	1a 97       	mov	r7,sp
80017912:	20 4d       	sub	sp,16
80017914:	4a b6       	lddpc	r6,800179c0 <LED_Off+0xb4>
80017916:	1e 26       	rsub	r6,pc
80017918:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
8001791c:	ec f8 01 b0 	ld.w	r8,r6[432]
80017920:	21 08       	sub	r8,16
80017922:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80017926:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001792a:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8001792e:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  //Clr_bits(LED_State, leds);
  Set_bits(LED_State, leds);
80017932:	ec f8 00 f4 	ld.w	r8,r6[244]
80017936:	70 09       	ld.w	r9,r8[0x0]
80017938:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001793c:	10 49       	or	r9,r8
8001793e:	ec f8 00 f4 	ld.w	r8,r6[244]
80017942:	91 09       	st.w	r8[0x0],r9
  // While there are specified LEDs left to manage...
  while (leds)
80017944:	c3 78       	rjmp	800179b2 <LED_Off+0xa6>
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
80017946:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001794a:	5c 98       	brev	r8
8001794c:	f0 08 12 00 	clz	r8,r8
80017950:	5c 58       	castu.b	r8
80017952:	2f f8       	sub	r8,-1
80017954:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
80017958:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001795c:	a5 68       	lsl	r8,0x4
8001795e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017962:	f2 08 00 08 	add	r8,r9,r8
80017966:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8001796a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001796e:	70 08       	ld.w	r8,r8[0x0]
80017970:	a9 78       	lsl	r8,0x9
80017972:	e0 28 e0 00 	sub	r8,57344
80017976:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
8001797a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001797e:	70 19       	ld.w	r9,r8[0x4]
80017980:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017984:	f1 49 00 54 	st.w	r8[84],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80017988:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001798c:	70 19       	ld.w	r9,r8[0x4]
8001798e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017992:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80017996:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001799a:	70 19       	ld.w	r9,r8[0x4]
8001799c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800179a0:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
800179a2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800179a6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800179aa:	f2 08 0a 48 	lsr	r8,r9,r8
800179ae:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  //Clr_bits(LED_State, leds);
  Set_bits(LED_State, leds);
  // While there are specified LEDs left to manage...
  while (leds)
800179b2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800179b6:	58 08       	cp.w	r8,0
800179b8:	cc 71       	brne	80017946 <LED_Off+0x3a>
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
800179ba:	2f cd       	sub	sp,-16
800179bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800179c0:	80 01       	ld.sh	r1,r0[0x0]
800179c2:	77 9a       	ld.w	r10,r11[0x64]

800179c4 <LED_On>:


void LED_On(U32 leds)
{
800179c4:	eb cd 40 c0 	pushm	r6-r7,lr
800179c8:	1a 97       	mov	r7,sp
800179ca:	20 4d       	sub	sp,16
800179cc:	4a c6       	lddpc	r6,80017a7c <LED_On+0xb8>
800179ce:	1e 26       	rsub	r6,pc
800179d0:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
800179d4:	ec f8 01 b0 	ld.w	r8,r6[432]
800179d8:	21 08       	sub	r8,16
800179da:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
800179de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800179e2:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800179e6:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  //Set_bits(LED_State, leds);
  Clr_bits(LED_State, leds);
800179ea:	ee f8 ff f0 	ld.w	r8,r7[-16]
800179ee:	f0 09 11 ff 	rsub	r9,r8,-1
800179f2:	ec f8 00 f4 	ld.w	r8,r6[244]
800179f6:	70 08       	ld.w	r8,r8[0x0]
800179f8:	10 69       	and	r9,r8
800179fa:	ec f8 00 f4 	ld.w	r8,r6[244]
800179fe:	91 09       	st.w	r8[0x0],r9
  // While there are specified LEDs left to manage...
  while (leds)
80017a00:	c3 78       	rjmp	80017a6e <LED_On+0xaa>
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
80017a02:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017a06:	5c 98       	brev	r8
80017a08:	f0 08 12 00 	clz	r8,r8
80017a0c:	5c 58       	castu.b	r8
80017a0e:	2f f8       	sub	r8,-1
80017a10:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
80017a14:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80017a18:	a5 68       	lsl	r8,0x4
80017a1a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017a1e:	f2 08 00 08 	add	r8,r9,r8
80017a22:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80017a26:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017a2a:	70 08       	ld.w	r8,r8[0x0]
80017a2c:	a9 78       	lsl	r8,0x9
80017a2e:	e0 28 e0 00 	sub	r8,57344
80017a32:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80017a36:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017a3a:	70 19       	ld.w	r9,r8[0x4]
80017a3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017a40:	f1 49 00 58 	st.w	r8[88],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80017a44:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017a48:	70 19       	ld.w	r9,r8[0x4]
80017a4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017a4e:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80017a52:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017a56:	70 19       	ld.w	r9,r8[0x4]
80017a58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017a5c:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
80017a5e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80017a62:	ee f9 ff f0 	ld.w	r9,r7[-16]
80017a66:	f2 08 0a 48 	lsr	r8,r9,r8
80017a6a:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  //Set_bits(LED_State, leds);
  Clr_bits(LED_State, leds);
  // While there are specified LEDs left to manage...
  while (leds)
80017a6e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017a72:	58 08       	cp.w	r8,0
80017a74:	cc 71       	brne	80017a02 <LED_On+0x3e>
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
80017a76:	2f cd       	sub	sp,-16
80017a78:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017a7c:	80 01       	ld.sh	r1,r0[0x0]
80017a7e:	78 52       	ld.w	r2,r12[0x14]

80017a80 <LED_Toggle>:


void LED_Toggle(U32 leds)
{
80017a80:	eb cd 40 c0 	pushm	r6-r7,lr
80017a84:	1a 97       	mov	r7,sp
80017a86:	20 4d       	sub	sp,16
80017a88:	4a b6       	lddpc	r6,80017b34 <LED_Toggle+0xb4>
80017a8a:	1e 26       	rsub	r6,pc
80017a8c:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
80017a90:	ec f8 01 b0 	ld.w	r8,r6[432]
80017a94:	21 08       	sub	r8,16
80017a96:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80017a9a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017a9e:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80017aa2:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);
80017aa6:	ec f8 00 f4 	ld.w	r8,r6[244]
80017aaa:	70 09       	ld.w	r9,r8[0x0]
80017aac:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017ab0:	10 59       	eor	r9,r8
80017ab2:	ec f8 00 f4 	ld.w	r8,r6[244]
80017ab6:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80017ab8:	c3 78       	rjmp	80017b26 <LED_Toggle+0xa6>
  {
    // Select the next specified LED and toggle it.
    led_shift = 1 + ctz(leds);
80017aba:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017abe:	5c 98       	brev	r8
80017ac0:	f0 08 12 00 	clz	r8,r8
80017ac4:	5c 58       	castu.b	r8
80017ac6:	2f f8       	sub	r8,-1
80017ac8:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
80017acc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80017ad0:	a5 68       	lsl	r8,0x4
80017ad2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017ad6:	f2 08 00 08 	add	r8,r9,r8
80017ada:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80017ade:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017ae2:	70 08       	ld.w	r8,r8[0x0]
80017ae4:	a9 78       	lsl	r8,0x9
80017ae6:	e0 28 e0 00 	sub	r8,57344
80017aea:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrt  = led_descriptor->GPIO.PIN_MASK;
80017aee:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017af2:	70 19       	ld.w	r9,r8[0x4]
80017af4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017af8:	f1 49 00 5c 	st.w	r8[92],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80017afc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017b00:	70 19       	ld.w	r9,r8[0x4]
80017b02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017b06:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80017b0a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017b0e:	70 19       	ld.w	r9,r8[0x4]
80017b10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017b14:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
80017b16:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80017b1a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80017b1e:	f2 08 0a 48 	lsr	r8,r9,r8
80017b22:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80017b26:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017b2a:	58 08       	cp.w	r8,0
80017b2c:	cc 71       	brne	80017aba <LED_Toggle+0x3a>
    led_gpio_port->ovrt  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
80017b2e:	2f cd       	sub	sp,-16
80017b30:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017b34:	80 01       	ld.sh	r1,r0[0x0]
80017b36:	79 0e       	ld.w	lr,r12[0x40]

80017b38 <LED_Read_Display_Field>:


U32 LED_Read_Display_Field(U32 field)
{
80017b38:	eb cd 40 c0 	pushm	r6-r7,lr
80017b3c:	1a 97       	mov	r7,sp
80017b3e:	20 1d       	sub	sp,4
80017b40:	48 b6       	lddpc	r6,80017b6c <LED_Read_Display_Field+0x34>
80017b42:	1e 26       	rsub	r6,pc
80017b44:	ef 4c ff fc 	st.w	r7[-4],r12
  return Rd_bitfield(LED_State, field);
80017b48:	ec f8 00 f4 	ld.w	r8,r6[244]
80017b4c:	70 09       	ld.w	r9,r8[0x0]
80017b4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017b52:	10 69       	and	r9,r8
80017b54:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017b58:	5c 98       	brev	r8
80017b5a:	f0 08 12 00 	clz	r8,r8
80017b5e:	f2 08 0a 48 	lsr	r8,r9,r8
}
80017b62:	10 9c       	mov	r12,r8
80017b64:	2f fd       	sub	sp,-4
80017b66:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017b6a:	00 00       	add	r0,r0
80017b6c:	80 01       	ld.sh	r1,r0[0x0]
80017b6e:	79 c6       	ld.w	r6,r12[0x70]

80017b70 <LED_Display_Field>:


void LED_Display_Field(U32 field, U32 leds)
{
80017b70:	eb cd 40 c0 	pushm	r6-r7,lr
80017b74:	1a 97       	mov	r7,sp
80017b76:	20 2d       	sub	sp,8
80017b78:	48 c6       	lddpc	r6,80017ba8 <LED_Display_Field+0x38>
80017b7a:	1e 26       	rsub	r6,pc
80017b7c:	ef 4c ff fc 	st.w	r7[-4],r12
80017b80:	ef 4b ff f8 	st.w	r7[-8],r11
  // Move the bit-field to the appropriate position for the bit-mask.
  LED_Display_Mask(field, leds << ctz(field));
80017b84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017b88:	5c 98       	brev	r8
80017b8a:	f0 08 12 00 	clz	r8,r8
80017b8e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80017b92:	f2 08 09 48 	lsl	r8,r9,r8
80017b96:	10 9b       	mov	r11,r8
80017b98:	ee fc ff fc 	ld.w	r12,r7[-4]
80017b9c:	f0 16 01 83 	mcall	r6[1548]
}
80017ba0:	2f ed       	sub	sp,-8
80017ba2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017ba6:	00 00       	add	r0,r0
80017ba8:	80 01       	ld.sh	r1,r0[0x0]
80017baa:	79 fe       	ld.w	lr,r12[0x7c]

80017bac <LED_Get_Intensity>:


U8 LED_Get_Intensity(U32 led)
{
80017bac:	eb cd 40 80 	pushm	r7,lr
80017bb0:	1a 97       	mov	r7,sp
80017bb2:	20 1d       	sub	sp,4
80017bb4:	ef 4c ff fc 	st.w	r7[-4],r12
 // always return 0, UC3C don't have PWM connected to LED
 return 0;
80017bb8:	30 08       	mov	r8,0
}
80017bba:	10 9c       	mov	r12,r8
80017bbc:	2f fd       	sub	sp,-4
80017bbe:	e3 cd 80 80 	ldm	sp++,r7,pc

80017bc2 <LED_Set_Intensity>:


void LED_Set_Intensity(U32 leds, U8 intensity)
{
80017bc2:	eb cd 40 80 	pushm	r7,lr
80017bc6:	1a 97       	mov	r7,sp
80017bc8:	20 2d       	sub	sp,8
80017bca:	ef 4c ff fc 	st.w	r7[-4],r12
80017bce:	16 98       	mov	r8,r11
80017bd0:	ef 68 ff f8 	st.b	r7[-8],r8
 // always return, UC3C don't have PWM to modulate led intensity.
 return;
}
80017bd4:	2f ed       	sub	sp,-8
80017bd6:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80017bdc <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80017bdc:	eb cd 40 c0 	pushm	r6-r7,lr
80017be0:	1a 97       	mov	r7,sp
80017be2:	20 6d       	sub	sp,24
80017be4:	49 e6       	lddpc	r6,80017c5c <interpolate+0x80>
80017be6:	1e 26       	rsub	r6,pc
80017be8:	ef 4c ff f8 	st.w	r7[-8],r12
80017bec:	ef 4b ff f4 	st.w	r7[-12],r11
80017bf0:	ef 4a ff f0 	st.w	r7[-16],r10
80017bf4:	ef 49 ff ec 	st.w	r7[-20],r9
80017bf8:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80017bfc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017c00:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017c04:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80017c08:	c0 41       	brne	80017c10 <interpolate+0x34>
	{
		return y1;
80017c0a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017c0e:	c2 38       	rjmp	80017c54 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80017c10:	ee f9 ff e8 	ld.w	r9,r7[-24]
80017c14:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017c18:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80017c1c:	ee fa ff f8 	ld.w	r10,r7[-8]
80017c20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017c24:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80017c28:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80017c2c:	ee fa ff f0 	ld.w	r10,r7[-16]
80017c30:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017c34:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80017c38:	12 9b       	mov	r11,r9
80017c3a:	10 9c       	mov	r12,r8
80017c3c:	f0 16 00 08 	mcall	r6[32]
80017c40:	18 98       	mov	r8,r12
80017c42:	10 99       	mov	r9,r8
80017c44:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017c48:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80017c4c:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80017c50:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80017c54:	10 9c       	mov	r12,r8
80017c56:	2f ad       	sub	sp,-24
80017c58:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017c5c:	80 01       	ld.sh	r1,r0[0x0]
80017c5e:	7a 6a       	ld.w	r10,sp[0x18]

80017c60 <init_radar_modules>:
#include "i2c_driver_int.h"
#include "print_util.h"

radar_target main_target;

void init_radar_modules() {
80017c60:	eb cd 40 c0 	pushm	r6-r7,lr
80017c64:	1a 97       	mov	r7,sp
80017c66:	48 66       	lddpc	r6,80017c7c <init_radar_modules+0x1c>
80017c68:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = 1,
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM1, &twi_opt);
80017c6a:	ec fb 08 b8 	ld.w	r11,r6[2232]
80017c6e:	fe 7c 3c 00 	mov	r12,-50176
80017c72:	f0 16 00 70 	mcall	r6[448]
}
80017c76:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017c7a:	00 00       	add	r0,r0
80017c7c:	80 01       	ld.sh	r1,r0[0x0]
80017c7e:	7a ec       	ld.w	r12,sp[0x38]
80017c80:	0a 00       	add	r0,r5

80017c82 <read_radar>:


void read_radar() {
80017c82:	eb cd 40 c0 	pushm	r6-r7,lr
80017c86:	1a 97       	mov	r7,sp
80017c88:	20 1d       	sub	sp,4
80017c8a:	49 f6       	lddpc	r6,80017d04 <read_radar+0x82>
80017c8c:	1e 26       	rsub	r6,pc
	uint8_t output = 0;
80017c8e:	30 08       	mov	r8,0
80017c90:	ef 68 ff ff 	st.b	r7[-1],r8
//	uint8_t input [8];
	twim_write(&AVR32_TWIM1, (uint8_t*) &output, 1, 1, false);
80017c94:	ee cb 00 01 	sub	r11,r7,1
80017c98:	30 08       	mov	r8,0
80017c9a:	30 19       	mov	r9,1
80017c9c:	30 1a       	mov	r10,1
80017c9e:	fe 7c 3c 00 	mov	r12,-50176
80017ca2:	f0 16 00 36 	mcall	r6[216]
	twim_read(&AVR32_TWIM1, (uint8_t*)&main_target, sizeof(main_target), 1, false);
80017ca6:	ec fb 02 68 	ld.w	r11,r6[616]
80017caa:	30 08       	mov	r8,0
80017cac:	30 19       	mov	r9,1
80017cae:	30 ca       	mov	r10,12
80017cb0:	fe 7c 3c 00 	mov	r12,-50176
80017cb4:	f0 16 00 5f 	mcall	r6[380]
	
	dbg_print_num(main_target.velocity*100.0,10);
80017cb8:	ec f8 02 68 	ld.w	r8,r6[616]
80017cbc:	70 08       	ld.w	r8,r8[0x0]
80017cbe:	10 9c       	mov	r12,r8
80017cc0:	f0 16 00 02 	mcall	r6[8]
80017cc4:	30 08       	mov	r8,0
80017cc6:	fc 19 40 59 	movh	r9,0x4059
80017cca:	f0 16 00 03 	mcall	r6[12]
80017cce:	14 98       	mov	r8,r10
80017cd0:	16 99       	mov	r9,r11
80017cd2:	10 9a       	mov	r10,r8
80017cd4:	12 9b       	mov	r11,r9
80017cd6:	f0 16 00 14 	mcall	r6[80]
80017cda:	18 98       	mov	r8,r12
80017cdc:	30 ab       	mov	r11,10
80017cde:	10 9c       	mov	r12,r8
80017ce0:	f0 16 00 04 	mcall	r6[16]
	dbg_print_num(main_target.amplitude,10);
80017ce4:	ec f8 02 68 	ld.w	r8,r6[616]
80017ce8:	70 18       	ld.w	r8,r8[0x4]
80017cea:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80017cee:	30 ab       	mov	r11,10
80017cf0:	10 9c       	mov	r12,r8
80017cf2:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
80017cf6:	fe cc 00 76 	sub	r12,pc,118
80017cfa:	f0 16 00 01 	mcall	r6[4]
	
}
80017cfe:	2f fd       	sub	sp,-4
80017d00:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017d04:	80 01       	ld.sh	r1,r0[0x0]
80017d06:	7b 10       	ld.w	r0,sp[0x44]

80017d08 <get_radar_main_target>:

radar_target* get_radar_main_target() {
80017d08:	eb cd 40 c0 	pushm	r6-r7,lr
80017d0c:	1a 97       	mov	r7,sp
80017d0e:	48 46       	lddpc	r6,80017d1c <get_radar_main_target+0x14>
80017d10:	1e 26       	rsub	r6,pc
	return &main_target;
80017d12:	ec f8 02 68 	ld.w	r8,r6[616]
	
}
80017d16:	10 9c       	mov	r12,r8
80017d18:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017d1c:	80 01       	ld.sh	r1,r0[0x0]
80017d1e:	7b 94       	ld.w	r4,sp[0x64]

80017d20 <init_Servos>:
#define SERVO_PERIOD (SERVO_TIMER_FREQ/SERVO_REPEAT_FREQ)
#define SERVO_CENTER_DUTY_TICKS 1500//(SERVO_CENTER_DUTY_MICROSEC*SERVO_TIMER_FREQ/1000000)



void init_Servos(void){
80017d20:	eb cd 40 c0 	pushm	r6-r7,lr
80017d24:	1a 97       	mov	r7,sp
80017d26:	20 1d       	sub	sp,4
80017d28:	4c b6       	lddpc	r6,80017e54 <init_Servos+0x134>
80017d2a:	1e 26       	rsub	r6,pc
      int i;
	  // unlock registers
	  AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80017d2c:	fe 78 4c 00 	mov	r8,-46080
80017d30:	e0 69 4d 04 	mov	r9,19716
80017d34:	ea 19 50 57 	orh	r9,0x5057
80017d38:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG0_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
      AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80017d3c:	fe 78 4c 00 	mov	r8,-46080
80017d40:	e0 69 4d 08 	mov	r9,19720
80017d44:	ea 19 50 57 	orh	r9,0x5057
80017d48:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG1_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
      AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80017d4c:	fe 78 4c 00 	mov	r8,-46080
80017d50:	e0 69 4d 10 	mov	r9,19728
80017d54:	ea 19 50 57 	orh	r9,0x5057
80017d58:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG2_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
      AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80017d5c:	fe 78 4c 00 	mov	r8,-46080
80017d60:	e0 69 4d 20 	mov	r9,19744
80017d64:	ea 19 50 57 	orh	r9,0x5057
80017d68:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG3_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
    // clock setup  
	AVR32_PWM.clk =
80017d6c:	fe 78 4c 00 	mov	r8,-46080
80017d70:	e0 69 06 01 	mov	r9,1537
80017d74:	ea 19 06 01 	orh	r9,0x601
80017d78:	91 09       	st.w	r8[0x0],r9
    ( 6 <<AVR32_PWM_PREA_OFFSET) |  // /64
    ( 6 <<AVR32_PWM_PREB_OFFSET) |  // /64
    ( 0 <<AVR32_PWM_CLKSEL_OFFSET);

	// output override for low and high side
	AVR32_PWM.oov  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
80017d7a:	fe 78 4c 00 	mov	r8,-46080
80017d7e:	30 fa       	mov	r10,15
80017d80:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017d84:	f4 09 09 4a 	lsl	r10,r10,r9
80017d88:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017d8c:	2f 09       	sub	r9,-16
80017d8e:	30 fb       	mov	r11,15
80017d90:	f6 09 09 49 	lsl	r9,r11,r9
80017d94:	f5 e9 10 09 	or	r9,r10,r9
80017d98:	f1 49 00 44 	st.w	r8[68],r9
	// output selection clear: dead time generator (0)
	AVR32_PWM.osc  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
80017d9c:	fe 78 4c 00 	mov	r8,-46080
80017da0:	30 fa       	mov	r10,15
80017da2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017da6:	f4 09 09 4a 	lsl	r10,r10,r9
80017daa:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017dae:	2f 09       	sub	r9,-16
80017db0:	30 fb       	mov	r11,15
80017db2:	f6 09 09 49 	lsl	r9,r11,r9
80017db6:	f5 e9 10 09 	or	r9,r10,r9
80017dba:	f1 49 00 50 	st.w	r8[80],r9
	
	// set up channels: enable dead time insertion
	for (i=0; i<4; i++) {
80017dbe:	30 08       	mov	r8,0
80017dc0:	ef 48 ff fc 	st.w	r7[-4],r8
80017dc4:	c3 78       	rjmp	80017e32 <init_Servos+0x112>
		// enable dead time, set channel clock to CLKA
		AVR32_PWM.channel[i].cmr=AVR32_PWM_CMR0_DTE_MASK | 11;
80017dc6:	fe 79 4c 00 	mov	r9,-46080
80017dca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017dce:	2f 08       	sub	r8,-16
80017dd0:	a5 78       	lsl	r8,0x5
80017dd2:	f2 08 00 08 	add	r8,r9,r8
80017dd6:	e0 79 00 0b 	mov	r9,65547
80017dda:	91 09       	st.w	r8[0x0],r9
		AVR32_PWM.channel[i].cprd=10000;
80017ddc:	fe 79 4c 00 	mov	r9,-46080
80017de0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017de4:	a5 78       	lsl	r8,0x5
80017de6:	f2 08 00 08 	add	r8,r9,r8
80017dea:	f0 c8 fd f4 	sub	r8,r8,-524
80017dee:	e0 69 27 10 	mov	r9,10000
80017df2:	91 09       	st.w	r8[0x0],r9
		AVR32_PWM.channel[i].cdty=4000;
80017df4:	fe 79 4c 00 	mov	r9,-46080
80017df8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017dfc:	a5 78       	lsl	r8,0x5
80017dfe:	f2 08 00 08 	add	r8,r9,r8
80017e02:	f0 c8 fd fc 	sub	r8,r8,-516
80017e06:	e0 69 0f a0 	mov	r9,4000
80017e0a:	91 09       	st.w	r8[0x0],r9
		AVR32_PWM.channel[i].dt= 1000<<16 | 1000;
80017e0c:	fe 79 4c 00 	mov	r9,-46080
80017e10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017e14:	a5 78       	lsl	r8,0x5
80017e16:	f2 08 00 08 	add	r8,r9,r8
80017e1a:	f0 c8 fd e8 	sub	r8,r8,-536
80017e1e:	e0 69 03 e8 	mov	r9,1000
80017e22:	ea 19 03 e8 	orh	r9,0x3e8
80017e26:	91 09       	st.w	r8[0x0],r9
	AVR32_PWM.oov  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
	// output selection clear: dead time generator (0)
	AVR32_PWM.osc  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
	
	// set up channels: enable dead time insertion
	for (i=0; i<4; i++) {
80017e28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017e2c:	2f f8       	sub	r8,-1
80017e2e:	ef 48 ff fc 	st.w	r7[-4],r8
80017e32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017e36:	58 38       	cp.w	r8,3
80017e38:	fe 9a ff c7 	brle	80017dc6 <init_Servos+0xa6>
    {AVR32_PWM_PWML_3_0_PIN, AVR32_PWM_PWML_3_0_FUNCTION},
    {AVR32_PWM_PWMH_1_0_PIN, AVR32_PWM_PWMH_1_0_FUNCTION},
    {AVR32_PWM_PWMH_2_0_PIN, AVR32_PWM_PWMH_2_0_FUNCTION},
    {AVR32_PWM_PWMH_3_0_PIN, AVR32_PWM_PWMH_3_0_FUNCTION}
    };			
	gpio_enable_module(PWM_GPIO_MAP, sizeof(PWM_GPIO_MAP) / sizeof(PWM_GPIO_MAP[0]));
80017e3c:	30 6b       	mov	r11,6
80017e3e:	ec fc 08 b4 	ld.w	r12,r6[2228]
80017e42:	f0 16 00 92 	mcall	r6[584]
	// enable
	AVR32_PWM.ena=0b1111;
80017e46:	fe 78 4c 00 	mov	r8,-46080
80017e4a:	30 f9       	mov	r9,15
80017e4c:	91 19       	st.w	r8[0x4],r9
	
	
}
80017e4e:	2f fd       	sub	sp,-4
80017e50:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017e54:	80 01       	ld.sh	r1,r0[0x0]
80017e56:	7b ae       	ld.w	lr,sp[0x68]

80017e58 <set_servo>:

void set_servo(int channel, int val_a, int val_b){
80017e58:	eb cd 40 80 	pushm	r7,lr
80017e5c:	1a 97       	mov	r7,sp
80017e5e:	20 6d       	sub	sp,24
80017e60:	ef 4c ff f0 	st.w	r7[-16],r12
80017e64:	ef 4b ff ec 	st.w	r7[-20],r11
80017e68:	ef 4a ff e8 	st.w	r7[-24],r10
	int duty_a=val_a+SERVO_CENTER_DUTY_TICKS;
80017e6c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017e70:	f0 c8 fa 24 	sub	r8,r8,-1500
80017e74:	ef 48 ff f4 	st.w	r7[-12],r8
	int duty_b=val_b+SERVO_CENTER_DUTY_TICKS;
80017e78:	ee f8 ff e8 	ld.w	r8,r7[-24]
80017e7c:	f0 c8 fa 24 	sub	r8,r8,-1500
80017e80:	ef 48 ff f8 	st.w	r7[-8],r8
	int deadtime=(SERVO_PERIOD-duty_a-duty_b)/2;
80017e84:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017e88:	e0 69 13 88 	mov	r9,5000
80017e8c:	10 19       	sub	r9,r8
80017e8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017e92:	f2 08 01 08 	sub	r8,r9,r8
80017e96:	f0 09 16 1f 	lsr	r9,r8,0x1f
80017e9a:	f2 08 00 08 	add	r8,r9,r8
80017e9e:	a1 58       	asr	r8,0x1
80017ea0:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PWM.channel[channel &0b11].cprdupd=SERVO_PERIOD;
80017ea4:	fe 79 4c 00 	mov	r9,-46080
80017ea8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017eac:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80017eb0:	a5 78       	lsl	r8,0x5
80017eb2:	f2 08 00 08 	add	r8,r9,r8
80017eb6:	f0 c8 fd f0 	sub	r8,r8,-528
80017eba:	e0 69 13 88 	mov	r9,5000
80017ebe:	91 09       	st.w	r8[0x0],r9
	AVR32_PWM.channel[channel &0b11].cdtyupd=duty_a+deadtime;
80017ec0:	fe 7a 4c 00 	mov	r10,-46080
80017ec4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017ec8:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80017ecc:	ee fb ff f4 	ld.w	r11,r7[-12]
80017ed0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017ed4:	f6 09 00 09 	add	r9,r11,r9
80017ed8:	a5 78       	lsl	r8,0x5
80017eda:	f4 08 00 08 	add	r8,r10,r8
80017ede:	f0 c8 fd f8 	sub	r8,r8,-520
80017ee2:	91 09       	st.w	r8[0x0],r9
	AVR32_PWM.channel[channel &0b11].dtupd= deadtime<<16 | deadtime;	
80017ee4:	fe 7a 4c 00 	mov	r10,-46080
80017ee8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017eec:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80017ef0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017ef4:	f2 0b 15 10 	lsl	r11,r9,0x10
80017ef8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017efc:	f7 e9 10 09 	or	r9,r11,r9
80017f00:	a5 78       	lsl	r8,0x5
80017f02:	f4 08 00 08 	add	r8,r10,r8
80017f06:	f0 c8 fd e4 	sub	r8,r8,-540
80017f0a:	91 09       	st.w	r8[0x0],r9
}
80017f0c:	2f ad       	sub	sp,-24
80017f0e:	e3 cd 80 80 	ldm	sp++,r7,pc

80017f12 <set_servos>:


void set_servos(servo_output *servo_outputs) {
80017f12:	eb cd 40 c0 	pushm	r6-r7,lr
80017f16:	1a 97       	mov	r7,sp
80017f18:	20 1d       	sub	sp,4
80017f1a:	49 76       	lddpc	r6,80017f74 <set_servos+0x62>
80017f1c:	1e 26       	rsub	r6,pc
80017f1e:	ef 4c ff fc 	st.w	r7[-4],r12
		set_servo(0, servo_outputs[0].value, servo_outputs[1].value);
		set_servo(1, servo_outputs[2].value, servo_outputs[3].value);
		set_servo(2, servo_outputs[4].value, servo_outputs[5].value);
		set_servo(3, servo_outputs[6].value, servo_outputs[7].value);
	#else
		set_servo(1, servo_outputs[0].value, servo_outputs[1].value);
80017f22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017f26:	2f 08       	sub	r8,-16
80017f28:	70 09       	ld.w	r9,r8[0x0]
80017f2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017f2e:	70 08       	ld.w	r8,r8[0x0]
80017f30:	12 9a       	mov	r10,r9
80017f32:	10 9b       	mov	r11,r8
80017f34:	30 1c       	mov	r12,1
80017f36:	f0 16 00 c1 	mcall	r6[772]
		set_servo(2, servo_outputs[2].value, servo_outputs[3].value);
80017f3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017f3e:	2d 08       	sub	r8,-48
80017f40:	70 09       	ld.w	r9,r8[0x0]
80017f42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017f46:	2e 08       	sub	r8,-32
80017f48:	70 08       	ld.w	r8,r8[0x0]
80017f4a:	12 9a       	mov	r10,r9
80017f4c:	10 9b       	mov	r11,r8
80017f4e:	30 2c       	mov	r12,2
80017f50:	f0 16 00 c1 	mcall	r6[772]
		set_servo(3, servo_outputs[4].value, servo_outputs[5].value);
80017f54:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017f58:	2b 08       	sub	r8,-80
80017f5a:	70 09       	ld.w	r9,r8[0x0]
80017f5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017f60:	2c 08       	sub	r8,-64
80017f62:	70 08       	ld.w	r8,r8[0x0]
80017f64:	12 9a       	mov	r10,r9
80017f66:	10 9b       	mov	r11,r8
80017f68:	30 3c       	mov	r12,3
80017f6a:	f0 16 00 c1 	mcall	r6[772]
	#endif
	
}
80017f6e:	2f fd       	sub	sp,-4
80017f70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017f74:	80 01       	ld.sh	r1,r0[0x0]
80017f76:	7d a0       	ld.w	r0,lr[0x68]

80017f78 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80017f78:	eb cd 40 c0 	pushm	r6-r7,lr
80017f7c:	1a 97       	mov	r7,sp
80017f7e:	20 6d       	sub	sp,24
80017f80:	49 e6       	lddpc	r6,80017ff8 <interpolate+0x80>
80017f82:	1e 26       	rsub	r6,pc
80017f84:	ef 4c ff f8 	st.w	r7[-8],r12
80017f88:	ef 4b ff f4 	st.w	r7[-12],r11
80017f8c:	ef 4a ff f0 	st.w	r7[-16],r10
80017f90:	ef 49 ff ec 	st.w	r7[-20],r9
80017f94:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80017f98:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017f9c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017fa0:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80017fa4:	c0 41       	brne	80017fac <interpolate+0x34>
	{
		return y1;
80017fa6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017faa:	c2 38       	rjmp	80017ff0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80017fac:	ee f9 ff e8 	ld.w	r9,r7[-24]
80017fb0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017fb4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80017fb8:	ee fa ff f8 	ld.w	r10,r7[-8]
80017fbc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017fc0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80017fc4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80017fc8:	ee fa ff f0 	ld.w	r10,r7[-16]
80017fcc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017fd0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80017fd4:	12 9b       	mov	r11,r9
80017fd6:	10 9c       	mov	r12,r8
80017fd8:	f0 16 00 08 	mcall	r6[32]
80017fdc:	18 98       	mov	r8,r12
80017fde:	10 99       	mov	r9,r8
80017fe0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017fe4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80017fe8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80017fec:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80017ff0:	10 9c       	mov	r12,r8
80017ff2:	2f ad       	sub	sp,-24
80017ff4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017ff8:	80 01       	ld.sh	r1,r0[0x0]
80017ffa:	7e 06       	ld.w	r6,pc[0x0]

80017ffc <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
80017ffc:	eb cd 40 80 	pushm	r7,lr
80018000:	1a 97       	mov	r7,sp
80018002:	20 1d       	sub	sp,4
80018004:	18 98       	mov	r8,r12
80018006:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8001800a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001800e:	58 38       	cp.w	r8,3
80018010:	c1 20       	breq	80018034 <osc_get_rate+0x38>
80018012:	e0 89 00 07 	brgt	80018020 <osc_get_rate+0x24>
80018016:	58 08       	cp.w	r8,0
80018018:	c0 90       	breq	8001802a <osc_get_rate+0x2e>
8001801a:	58 28       	cp.w	r8,2
8001801c:	c0 f0       	breq	8001803a <osc_get_rate+0x3e>
8001801e:	c1 b8       	rjmp	80018054 <osc_get_rate+0x58>
80018020:	58 48       	cp.w	r8,4
80018022:	c1 10       	breq	80018044 <osc_get_rate+0x48>
80018024:	58 58       	cp.w	r8,5
80018026:	c1 40       	breq	8001804e <osc_get_rate+0x52>
80018028:	c1 68       	rjmp	80018054 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8001802a:	e0 68 24 00 	mov	r8,9216
8001802e:	ea 18 00 f4 	orh	r8,0xf4
80018032:	c1 28       	rjmp	80018056 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
80018034:	e0 68 80 00 	mov	r8,32768
80018038:	c0 f8       	rjmp	80018056 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8001803a:	e0 68 12 00 	mov	r8,4608
8001803e:	ea 18 00 7a 	orh	r8,0x7a
80018042:	c0 a8       	rjmp	80018056 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
80018044:	e0 68 0e 00 	mov	r8,3584
80018048:	ea 18 07 27 	orh	r8,0x727
8001804c:	c0 58       	rjmp	80018056 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8001804e:	e0 78 c1 38 	mov	r8,115000
80018052:	c0 28       	rjmp	80018056 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
80018054:	30 08       	mov	r8,0
	}
}
80018056:	10 9c       	mov	r12,r8
80018058:	2f fd       	sub	sp,-4
8001805a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001805e <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8001805e:	eb cd 40 c0 	pushm	r6-r7,lr
80018062:	1a 97       	mov	r7,sp
80018064:	48 56       	lddpc	r6,80018078 <sysclk_get_main_hz+0x1a>
80018066:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
80018068:	30 0c       	mov	r12,0
8001806a:	cc 9f       	rcall	80017ffc <osc_get_rate>
8001806c:	18 98       	mov	r8,r12
8001806e:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80018070:	10 9c       	mov	r12,r8
80018072:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018076:	00 00       	add	r0,r0
80018078:	80 01       	ld.sh	r1,r0[0x0]
8001807a:	7e ea       	ld.w	r10,pc[0x38]

8001807c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8001807c:	eb cd 40 c0 	pushm	r6-r7,lr
80018080:	1a 97       	mov	r7,sp
80018082:	48 46       	lddpc	r6,80018090 <sysclk_get_cpu_hz+0x14>
80018084:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
80018086:	ce cf       	rcall	8001805e <sysclk_get_main_hz>
80018088:	18 98       	mov	r8,r12
}
8001808a:	10 9c       	mov	r12,r8
8001808c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018090:	80 01       	ld.sh	r1,r0[0x0]
80018092:	7f 08       	ld.w	r8,pc[0x40]

80018094 <spectrum_handler>:
Spektrum_Receiver_t spRec2;

int16_t channelCenter[16];


ISR(spectrum_handler, AVR32_USART1_IRQ, AVR32_INTC_INTLEV_INT1) {
80018094:	eb cd 40 c0 	pushm	r6-r7,lr
80018098:	1a 97       	mov	r7,sp
8001809a:	20 3d       	sub	sp,12
8001809c:	4c 36       	lddpc	r6,800181a8 <spectrum_handler+0x114>
8001809e:	1e 26       	rsub	r6,pc
	uint8_t c1, c2, i;
	uint16_t sw;
	uint32_t now =get_time_ticks() ;
800180a0:	f0 16 00 4d 	mcall	r6[308]
800180a4:	18 98       	mov	r8,r12
800180a6:	ef 48 ff fc 	st.w	r7[-4],r8
	if (REMOTE_UART.csr & AVR32_USART_CSR_RXRDY_MASK) {
800180aa:	fc 78 14 00 	mov	r8,-191488
800180ae:	70 58       	ld.w	r8,r8[0x14]
800180b0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800180b4:	5c 58       	castu.b	r8
800180b6:	c7 50       	breq	800181a0 <spectrum_handler+0x10c>
		spRec1.duration=now-spRec1.last_time;
800180b8:	ec f8 00 80 	ld.w	r8,r6[128]
800180bc:	f0 f8 01 2c 	ld.w	r8,r8[300]
800180c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800180c4:	10 19       	sub	r9,r8
800180c6:	ec f8 00 80 	ld.w	r8,r6[128]
800180ca:	f1 49 01 30 	st.w	r8[304],r9
		spRec1.last_time=now;
800180ce:	ec f8 00 80 	ld.w	r8,r6[128]
800180d2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800180d6:	f1 49 01 2c 	st.w	r8[300],r9
//		putstring(STDOUT, "!");
		//receiveInterruptHandler(&spRec1.receiver);
		if ((spRec1.duration>2500)) {
800180da:	ec f8 00 80 	ld.w	r8,r6[128]
800180de:	f0 f8 01 30 	ld.w	r8,r8[304]
800180e2:	e0 48 09 c4 	cp.w	r8,2500
800180e6:	e0 88 00 06 	brls	800180f2 <spectrum_handler+0x5e>
			buffer_clear(&spRec1.receiver);
800180ea:	ec fc 00 80 	ld.w	r12,r6[128]
800180ee:	f0 16 02 00 	mcall	r6[2048]
		}
		c1=(uint8_t)REMOTE_UART.rhr;
800180f2:	fc 78 14 00 	mov	r8,-191488
800180f6:	70 68       	ld.w	r8,r8[0x18]
800180f8:	ef 68 ff f7 	st.b	r7[-9],r8
		buffer_put(&spRec1.receiver, c1);
800180fc:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80018100:	10 9b       	mov	r11,r8
80018102:	ec fc 00 80 	ld.w	r12,r6[128]
80018106:	f0 16 00 53 	mcall	r6[332]
		

		if (buffer_bytes_available(&spRec1.receiver)==16) {
8001810a:	ec fc 00 80 	ld.w	r12,r6[128]
8001810e:	f0 16 00 2e 	mcall	r6[184]
80018112:	18 98       	mov	r8,r12
80018114:	59 08       	cp.w	r8,16
80018116:	c4 51       	brne	800181a0 <spectrum_handler+0x10c>
			//PORTC.OUT = _BV(5);
			//putstring(STDOUT, "!");
			for (i=0; i<8; i++) {
80018118:	30 08       	mov	r8,0
8001811a:	ef 68 ff f9 	st.b	r7[-7],r8
8001811e:	c3 a8       	rjmp	80018192 <spectrum_handler+0xfe>
				c1=buffer_get(&spRec1.receiver);
80018120:	ec fc 00 80 	ld.w	r12,r6[128]
80018124:	f0 16 00 44 	mcall	r6[272]
80018128:	18 98       	mov	r8,r12
8001812a:	ef 68 ff f7 	st.b	r7[-9],r8
				c2=buffer_get(&spRec1.receiver);
8001812e:	ec fc 00 80 	ld.w	r12,r6[128]
80018132:	f0 16 00 44 	mcall	r6[272]
80018136:	18 98       	mov	r8,r12
80018138:	ef 68 ff f8 	st.b	r7[-8],r8
				sw=((uint16_t)c1)*256 +((uint16_t)c2);
8001813c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80018140:	a9 68       	lsl	r8,0x8
80018142:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80018146:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001814a:	f2 08 00 08 	add	r8,r9,r8
8001814e:	ef 58 ff fa 	st.h	r7[-6],r8
				//if (c1 & 0x80==0)
				spRec1.channels[(c1 & 0x3c)>>2]=sw&0x3ff;
80018152:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80018156:	e2 18 00 3c 	andl	r8,0x3c,COH
8001815a:	f0 0a 14 02 	asr	r10,r8,0x2
8001815e:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80018162:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
80018166:	ec f9 00 80 	ld.w	r9,r6[128]
8001816a:	f4 ca ff 7e 	sub	r10,r10,-130
8001816e:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
				//spRec1.channels[i]=sw&0x3ff;
				spRec1.valid=1;
80018172:	ec f9 00 80 	ld.w	r9,r6[128]
80018176:	30 18       	mov	r8,1
80018178:	f3 68 01 28 	st.b	r9[296],r8
				spRec1.last_update=now;
8001817c:	ec f8 00 80 	ld.w	r8,r6[128]
80018180:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018184:	f1 49 01 24 	st.w	r8[292],r9
		

		if (buffer_bytes_available(&spRec1.receiver)==16) {
			//PORTC.OUT = _BV(5);
			//putstring(STDOUT, "!");
			for (i=0; i<8; i++) {
80018188:	ef 38 ff f9 	ld.ub	r8,r7[-7]
8001818c:	2f f8       	sub	r8,-1
8001818e:	ef 68 ff f9 	st.b	r7[-7],r8
80018192:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80018196:	30 78       	mov	r8,7
80018198:	f0 09 18 00 	cp.b	r9,r8
8001819c:	fe 98 ff c2 	brls	80018120 <spectrum_handler+0x8c>
				spRec1.valid=1;
				spRec1.last_update=now;
			}
		}
	}		
}
800181a0:	2f dd       	sub	sp,-12
800181a2:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800181a6:	d6 03       	rete
800181a8:	80 01       	ld.sh	r1,r0[0x0]
800181aa:	7f 22       	ld.w	r2,pc[0x48]

800181ac <rc_init>:

void rc_init (void) {
800181ac:	eb cd 40 c0 	pushm	r6-r7,lr
800181b0:	1a 97       	mov	r7,sp
800181b2:	20 1d       	sub	sp,4
800181b4:	4a 96       	lddpc	r6,80018258 <rc_init+0xac>
800181b6:	1e 26       	rsub	r6,pc
   {
    {AVR32_USART1_RXD_0_1_PIN, AVR32_USART1_RXD_0_1_FUNCTION}
   ,{AVR32_USART1_TXD_0_1_PIN, AVR32_USART1_TXD_0_1_FUNCTION}
   };
	int i;
	for (i=0; i<16; i++) {
800181b8:	30 08       	mov	r8,0
800181ba:	ef 48 ff fc 	st.w	r7[-4],r8
800181be:	c2 18       	rjmp	80018200 <rc_init+0x54>
		spRec1.channels[i]=500;
800181c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800181c4:	ec f9 00 80 	ld.w	r9,r6[128]
800181c8:	f0 ca ff 7e 	sub	r10,r8,-130
800181cc:	e0 68 01 f4 	mov	r8,500
800181d0:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		spRec2.channels[i]=500;
800181d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800181d8:	ec f9 01 6c 	ld.w	r9,r6[364]
800181dc:	f0 ca ff 7e 	sub	r10,r8,-130
800181e0:	e0 68 01 f4 	mov	r8,500
800181e4:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		channelCenter[i]=0;
800181e8:	ee fa ff fc 	ld.w	r10,r7[-4]
800181ec:	ec f9 02 bc 	ld.w	r9,r6[700]
800181f0:	30 08       	mov	r8,0
800181f2:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
   {
    {AVR32_USART1_RXD_0_1_PIN, AVR32_USART1_RXD_0_1_FUNCTION}
   ,{AVR32_USART1_TXD_0_1_PIN, AVR32_USART1_TXD_0_1_FUNCTION}
   };
	int i;
	for (i=0; i<16; i++) {
800181f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800181fa:	2f f8       	sub	r8,-1
800181fc:	ef 48 ff fc 	st.w	r7[-4],r8
80018200:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018204:	58 f8       	cp.w	r8,15
80018206:	fe 9a ff dd 	brle	800181c0 <rc_init+0x14>
		spRec1.channels[i]=500;
		spRec2.channels[i]=500;
		channelCenter[i]=0;
	}
	spRec1.channels[RC_THROTTLE]=0;
8001820a:	ec f9 00 80 	ld.w	r9,r6[128]
8001820e:	30 08       	mov	r8,0
80018210:	f3 58 01 04 	st.h	r9[260],r8
	spRec2.channels[RC_THROTTLE]=0;
80018214:	ec f9 01 6c 	ld.w	r9,r6[364]
80018218:	30 08       	mov	r8,0
8001821a:	f3 58 01 04 	st.h	r9[260],r8
	 // USART options.
	 
    // Assign GPIO pins to USART_0.
    gpio_enable_module(USART_GPIO_MAP,
8001821e:	30 2b       	mov	r11,2
80018220:	ec fc 08 b0 	ld.w	r12,r6[2224]
80018224:	f0 16 00 92 	mcall	r6[584]
                     sizeof(USART_GPIO_MAP) / sizeof(USART_GPIO_MAP[0]));
	
    // Initialize the USART in RS232 mode.
    usart_init_rs232( (&REMOTE_UART), &usart_opt, sysclk_get_cpu_hz());
80018228:	c2 af       	rcall	8001807c <sysclk_get_cpu_hz>
8001822a:	18 98       	mov	r8,r12
8001822c:	10 9a       	mov	r10,r8
8001822e:	ec fb 08 ac 	ld.w	r11,r6[2220]
80018232:	fc 7c 14 00 	mov	r12,-191488
80018236:	f0 16 00 68 	mcall	r6[416]
	INTC_register_interrupt( (__int_handler) &spectrum_handler, AVR32_USART1_IRQ, AVR32_INTC_INT1);
8001823a:	30 1a       	mov	r10,1
8001823c:	e0 6b 02 80 	mov	r11,640
80018240:	fe cc 01 ac 	sub	r12,pc,428
80018244:	f0 16 00 3b 	mcall	r6[236]
	REMOTE_UART.ier=AVR32_USART_IER_RXRDY_MASK;
80018248:	fc 78 14 00 	mov	r8,-191488
8001824c:	30 19       	mov	r9,1
8001824e:	91 29       	st.w	r8[0x8],r9
	//initUART_RX(&spRec1.receiver,  &USARTC1, USART_RXCINTLVL_LO_gc, BSEL_SPEKTRUM);
	//initUART_RX(&spRec2.receiver,  &USARTD0, USART_RXCINTLVL_LO_gc, BSEL_SPEKTRUM);

}
80018250:	2f fd       	sub	sp,-4
80018252:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018256:	00 00       	add	r0,r0
80018258:	80 01       	ld.sh	r1,r0[0x0]
8001825a:	80 3a       	ld.sh	r10,r0[0x6]

8001825c <rc_get_channel>:
/**/
int16_t rc_get_channel(uint8_t index) {
8001825c:	eb cd 40 c0 	pushm	r6-r7,lr
80018260:	1a 97       	mov	r7,sp
80018262:	20 1d       	sub	sp,4
80018264:	48 b6       	lddpc	r6,80018290 <rc_get_channel+0x34>
80018266:	1e 26       	rsub	r6,pc
80018268:	18 98       	mov	r8,r12
8001826a:	ef 68 ff fc 	st.b	r7[-4],r8
	//if (checkReceiver1()<checkReceiver2()) {
		return spRec1.channels[index]-500;
8001826e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80018272:	ec f8 00 80 	ld.w	r8,r6[128]
80018276:	f2 c9 ff 7e 	sub	r9,r9,-130
8001827a:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
8001827e:	f0 c8 01 f4 	sub	r8,r8,500
80018282:	5c 88       	casts.h	r8
80018284:	5c 88       	casts.h	r8
	//} else {
	//	return spRec2.channels[index]-500;
	//}
}
80018286:	10 9c       	mov	r12,r8
80018288:	2f fd       	sub	sp,-4
8001828a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001828e:	00 00       	add	r0,r0
80018290:	80 01       	ld.sh	r1,r0[0x0]
80018292:	80 ea       	ld.uh	r10,r0[0xc]

80018294 <rc_get_channel_neutral>:

int16_t rc_get_channel_neutral(uint8_t index) {
80018294:	eb cd 40 e0 	pushm	r5-r7,lr
80018298:	1a 97       	mov	r7,sp
8001829a:	20 2d       	sub	sp,8
8001829c:	4a 36       	lddpc	r6,80018328 <rc_get_channel_neutral+0x94>
8001829e:	1e 26       	rsub	r6,pc
800182a0:	18 98       	mov	r8,r12
800182a2:	ef 68 ff f8 	st.b	r7[-8],r8
	int16_t value=rc_get_channel(index)-channelCenter[index];
800182a6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800182aa:	10 9c       	mov	r12,r8
800182ac:	f0 16 00 1b 	mcall	r6[108]
800182b0:	18 98       	mov	r8,r12
800182b2:	10 99       	mov	r9,r8
800182b4:	ef 3a ff f8 	ld.ub	r10,r7[-8]
800182b8:	ec f8 02 bc 	ld.w	r8,r6[700]
800182bc:	f0 0a 04 18 	ld.sh	r8,r8[r10<<0x1]
800182c0:	f2 08 01 08 	sub	r8,r9,r8
800182c4:	5c 88       	casts.h	r8
800182c6:	ef 58 ff fe 	st.h	r7[-2],r8
	// clamp to dead zone
	if ((value>-DEADZONE)&&(value<DEADZONE)) value=0;
800182ca:	ef 08 ff fe 	ld.sh	r8,r7[-2]
800182ce:	10 9c       	mov	r12,r8
800182d0:	f0 16 00 1a 	mcall	r6[104]
800182d4:	14 98       	mov	r8,r10
800182d6:	16 99       	mov	r9,r11
800182d8:	30 05       	mov	r5,0
800182da:	30 0a       	mov	r10,0
800182dc:	fc 1b c0 3e 	movh	r11,0xc03e
800182e0:	f0 16 00 1d 	mcall	r6[116]
800182e4:	18 98       	mov	r8,r12
800182e6:	58 08       	cp.w	r8,0
800182e8:	c0 20       	breq	800182ec <rc_get_channel_neutral+0x58>
800182ea:	30 15       	mov	r5,1
800182ec:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
800182f0:	c1 60       	breq	8001831c <rc_get_channel_neutral+0x88>
800182f2:	ef 08 ff fe 	ld.sh	r8,r7[-2]
800182f6:	10 9c       	mov	r12,r8
800182f8:	f0 16 00 1a 	mcall	r6[104]
800182fc:	30 05       	mov	r5,0
800182fe:	30 08       	mov	r8,0
80018300:	fc 19 40 3e 	movh	r9,0x403e
80018304:	f0 16 00 1d 	mcall	r6[116]
80018308:	18 98       	mov	r8,r12
8001830a:	58 08       	cp.w	r8,0
8001830c:	c0 20       	breq	80018310 <rc_get_channel_neutral+0x7c>
8001830e:	30 15       	mov	r5,1
80018310:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80018314:	c0 40       	breq	8001831c <rc_get_channel_neutral+0x88>
80018316:	30 08       	mov	r8,0
80018318:	ef 58 ff fe 	st.h	r7[-2],r8
	return value;
8001831c:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80018320:	10 9c       	mov	r12,r8
80018322:	2f ed       	sub	sp,-8
80018324:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80018328:	80 01       	ld.sh	r1,r0[0x0]
8001832a:	81 22       	st.w	r0[0x8],r2

8001832c <rc_center_channel>:

void rc_center_channel(uint8_t index){
8001832c:	eb cd 40 e0 	pushm	r5-r7,lr
80018330:	1a 97       	mov	r7,sp
80018332:	20 1d       	sub	sp,4
80018334:	48 a6       	lddpc	r6,8001835c <rc_center_channel+0x30>
80018336:	1e 26       	rsub	r6,pc
80018338:	18 98       	mov	r8,r12
8001833a:	ef 68 ff fc 	st.b	r7[-4],r8
	channelCenter[index]=rc_get_channel(index);
8001833e:	ef 35 ff fc 	ld.ub	r5,r7[-4]
80018342:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80018346:	10 9c       	mov	r12,r8
80018348:	f0 16 00 1b 	mcall	r6[108]
8001834c:	18 98       	mov	r8,r12
8001834e:	ec f9 02 bc 	ld.w	r9,r6[700]
80018352:	f2 05 0a 18 	st.h	r9[r5<<0x1],r8
}
80018356:	2f fd       	sub	sp,-4
80018358:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001835c:	80 01       	ld.sh	r1,r0[0x0]
8001835e:	81 ba       	st.w	r0[0x2c],r10

80018360 <checkReceiver1>:

int8_t checkReceiver1() {
80018360:	eb cd 40 c0 	pushm	r6-r7,lr
80018364:	1a 97       	mov	r7,sp
80018366:	20 3d       	sub	sp,12
80018368:	4b 56       	lddpc	r6,8001843c <checkReceiver1+0xdc>
8001836a:	1e 26       	rsub	r6,pc
	int8_t i;
	uint32_t now = get_time_ticks();
8001836c:	f0 16 00 4d 	mcall	r6[308]
80018370:	18 98       	mov	r8,r12
80018372:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t duration=now-spRec1.last_update;
80018376:	ec f8 00 80 	ld.w	r8,r6[128]
8001837a:	f0 f8 01 24 	ld.w	r8,r8[292]
8001837e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018382:	10 19       	sub	r9,r8
80018384:	ef 49 ff fc 	st.w	r7[-4],r9
	if (spRec1.valid==0) return -2;
80018388:	ec f8 00 80 	ld.w	r8,r6[128]
8001838c:	f1 38 01 28 	ld.ub	r8,r8[296]
80018390:	58 08       	cp.w	r8,0
80018392:	c0 41       	brne	8001839a <checkReceiver1+0x3a>
80018394:	e0 68 00 fe 	mov	r8,254
80018398:	c4 d8       	rjmp	80018432 <checkReceiver1+0xd2>
	if (duration<100000) {
8001839a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001839e:	e0 58 86 9f 	cp.w	r8,99999
800183a2:	e0 8b 00 04 	brhi	800183aa <checkReceiver1+0x4a>
		return 1;
800183a6:	30 18       	mov	r8,1
800183a8:	c4 58       	rjmp	80018432 <checkReceiver1+0xd2>
	} else
	if (duration<1500000) {
800183aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800183ae:	e0 69 e3 5f 	mov	r9,58207
800183b2:	ea 19 00 16 	orh	r9,0x16
800183b6:	12 38       	cp.w	r8,r9
800183b8:	e0 8b 00 17 	brhi	800183e6 <checkReceiver1+0x86>
		spRec1.channels[RC_ROLL]=500;	
800183bc:	ec f9 00 80 	ld.w	r9,r6[128]
800183c0:	e0 68 01 f4 	mov	r8,500
800183c4:	f3 58 01 06 	st.h	r9[262],r8
		spRec1.channels[RC_PITCH]=500;	
800183c8:	ec f9 00 80 	ld.w	r9,r6[128]
800183cc:	e0 68 01 f4 	mov	r8,500
800183d0:	f3 58 01 08 	st.h	r9[264],r8
		spRec1.channels[RC_YAW]=500;	
800183d4:	ec f9 00 80 	ld.w	r9,r6[128]
800183d8:	e0 68 01 f4 	mov	r8,500
800183dc:	f3 58 01 0a 	st.h	r9[266],r8
		return -1; // brief drop out - hold pattern
800183e0:	e0 68 00 ff 	mov	r8,255
800183e4:	c2 78       	rjmp	80018432 <checkReceiver1+0xd2>
		
	} else {
		spRec1.valid = 0;
800183e6:	ec f9 00 80 	ld.w	r9,r6[128]
800183ea:	30 08       	mov	r8,0
800183ec:	f3 68 01 28 	st.b	r9[296],r8
		for (i=1; i<8; i++) {
800183f0:	30 18       	mov	r8,1
800183f2:	ef 68 ff f7 	st.b	r7[-9],r8
800183f6:	c1 08       	rjmp	80018416 <checkReceiver1+0xb6>
			spRec1.channels[i]=500;			
800183f8:	ef 28 ff f7 	ld.sb	r8,r7[-9]
800183fc:	ec f9 00 80 	ld.w	r9,r6[128]
80018400:	f0 ca ff 7e 	sub	r10,r8,-130
80018404:	e0 68 01 f4 	mov	r8,500
80018408:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		spRec1.channels[RC_YAW]=500;	
		return -1; // brief drop out - hold pattern
		
	} else {
		spRec1.valid = 0;
		for (i=1; i<8; i++) {
8001840c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80018410:	2f f8       	sub	r8,-1
80018412:	ef 68 ff f7 	st.b	r7[-9],r8
80018416:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8001841a:	30 78       	mov	r8,7
8001841c:	f0 09 18 00 	cp.b	r9,r8
80018420:	fe 9a ff ec 	brle	800183f8 <checkReceiver1+0x98>
			spRec1.channels[i]=500;			
		}
		spRec1.channels[RC_THROTTLE]=0;
80018424:	ec f9 00 80 	ld.w	r9,r6[128]
80018428:	30 08       	mov	r8,0
8001842a:	f3 58 01 04 	st.h	r9[260],r8
		return -2; // fade - fail safe
8001842e:	e0 68 00 fe 	mov	r8,254

	}

}
80018432:	10 9c       	mov	r12,r8
80018434:	2f dd       	sub	sp,-12
80018436:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001843a:	00 00       	add	r0,r0
8001843c:	80 01       	ld.sh	r1,r0[0x0]
8001843e:	81 ee       	st.w	r0[0x38],lr

80018440 <checkReceiver2>:

int8_t checkReceiver2(){
80018440:	eb cd 40 c0 	pushm	r6-r7,lr
80018444:	1a 97       	mov	r7,sp
80018446:	20 3d       	sub	sp,12
80018448:	4a 96       	lddpc	r6,800184ec <checkReceiver2+0xac>
8001844a:	1e 26       	rsub	r6,pc
	int8_t i;
	uint32_t now = 0; //TCC0.CNT;
8001844c:	30 08       	mov	r8,0
8001844e:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t duration = now - spRec2.last_update;
80018452:	ec f8 01 6c 	ld.w	r8,r6[364]
80018456:	f0 f8 01 24 	ld.w	r8,r8[292]
8001845a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001845e:	10 19       	sub	r9,r8
80018460:	ef 49 ff fc 	st.w	r7[-4],r9
	if (spRec2.valid==0) return -2;
80018464:	ec f8 01 6c 	ld.w	r8,r6[364]
80018468:	f1 38 01 28 	ld.ub	r8,r8[296]
8001846c:	58 08       	cp.w	r8,0
8001846e:	c0 41       	brne	80018476 <checkReceiver2+0x36>
80018470:	e0 68 00 fe 	mov	r8,254
80018474:	c3 88       	rjmp	800184e4 <checkReceiver2+0xa4>
	if (duration < 200000) {
80018476:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001847a:	e2 58 0d 3f 	cp.w	r8,199999
8001847e:	e0 8b 00 04 	brhi	80018486 <checkReceiver2+0x46>
		return 1;
80018482:	30 18       	mov	r8,1
80018484:	c3 08       	rjmp	800184e4 <checkReceiver2+0xa4>
	} else if (duration < 500000) {
80018486:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001848a:	e6 58 a1 1f 	cp.w	r8,499999
8001848e:	e0 8b 00 05 	brhi	80018498 <checkReceiver2+0x58>
		return -1; // brief drop out - hold pattern
80018492:	e0 68 00 ff 	mov	r8,255
80018496:	c2 78       	rjmp	800184e4 <checkReceiver2+0xa4>
	} else {
		spRec2.valid = 0;
80018498:	ec f9 01 6c 	ld.w	r9,r6[364]
8001849c:	30 08       	mov	r8,0
8001849e:	f3 68 01 28 	st.b	r9[296],r8
		for (i=1; i<8; i++) {
800184a2:	30 18       	mov	r8,1
800184a4:	ef 68 ff f7 	st.b	r7[-9],r8
800184a8:	c1 08       	rjmp	800184c8 <checkReceiver2+0x88>
			spRec2.channels[i]=500;
800184aa:	ef 28 ff f7 	ld.sb	r8,r7[-9]
800184ae:	ec f9 01 6c 	ld.w	r9,r6[364]
800184b2:	f0 ca ff 7e 	sub	r10,r8,-130
800184b6:	e0 68 01 f4 	mov	r8,500
800184ba:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		return 1;
	} else if (duration < 500000) {
		return -1; // brief drop out - hold pattern
	} else {
		spRec2.valid = 0;
		for (i=1; i<8; i++) {
800184be:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800184c2:	2f f8       	sub	r8,-1
800184c4:	ef 68 ff f7 	st.b	r7[-9],r8
800184c8:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800184cc:	30 78       	mov	r8,7
800184ce:	f0 09 18 00 	cp.b	r9,r8
800184d2:	fe 9a ff ec 	brle	800184aa <checkReceiver2+0x6a>
			spRec2.channels[i]=500;
		}
		spRec2.channels[RC_THROTTLE]=0;
800184d6:	ec f9 01 6c 	ld.w	r9,r6[364]
800184da:	30 08       	mov	r8,0
800184dc:	f3 58 01 04 	st.h	r9[260],r8
		return -2; // fade - fail safe
800184e0:	e0 68 00 fe 	mov	r8,254

	}

}
800184e4:	10 9c       	mov	r12,r8
800184e6:	2f dd       	sub	sp,-12
800184e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800184ec:	80 01       	ld.sh	r1,r0[0x0]
800184ee:	82 ce       	ld.uh	lr,r1[0x8]

800184f0 <rc_check_receivers>:

int8_t rc_check_receivers() {
800184f0:	eb cd 40 c0 	pushm	r6-r7,lr
800184f4:	1a 97       	mov	r7,sp
800184f6:	48 66       	lddpc	r6,8001850c <rc_check_receivers+0x1c>
800184f8:	1e 26       	rsub	r6,pc
	return checkReceiver1();// + checkReceiver2();
800184fa:	f0 16 01 95 	mcall	r6[1620]
800184fe:	18 98       	mov	r8,r12
80018500:	5c 58       	castu.b	r8
80018502:	5c 58       	castu.b	r8
}
80018504:	10 9c       	mov	r12,r8
80018506:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001850a:	00 00       	add	r0,r0
8001850c:	80 01       	ld.sh	r1,r0[0x0]
8001850e:	83 7c       	st.w	r1[0x1c],r12

80018510 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
80018510:	eb cd 40 c0 	pushm	r6-r7,lr
80018514:	1a 97       	mov	r7,sp
80018516:	20 1d       	sub	sp,4
80018518:	48 66       	lddpc	r6,80018530 <sysclk_enable_pba_module+0x20>
8001851a:	1e 26       	rsub	r6,pc
8001851c:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80018520:	ee fb ff fc 	ld.w	r11,r7[-4]
80018524:	30 2c       	mov	r12,2
80018526:	f0 16 01 f0 	mcall	r6[1984]
}
8001852a:	2f fd       	sub	sp,-4
8001852c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018530:	80 01       	ld.sh	r1,r0[0x0]
80018532:	83 9e       	st.w	r1[0x24],lr

80018534 <spi_reset>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
static inline void spi_reset(volatile avr32_spi_t *spi)
{
80018534:	eb cd 40 80 	pushm	r7,lr
80018538:	1a 97       	mov	r7,sp
8001853a:	20 1d       	sub	sp,4
8001853c:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
80018540:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018544:	e0 69 00 80 	mov	r9,128
80018548:	91 09       	st.w	r8[0x0],r9
}
8001854a:	2f fd       	sub	sp,-4
8001854c:	e3 cd 80 80 	ldm	sp++,r7,pc

80018550 <spi_set_master_mode>:
/*! \brief Set Master Mode of the SPI.
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_set_master_mode(volatile avr32_spi_t *spi)
{
80018550:	eb cd 40 80 	pushm	r7,lr
80018554:	1a 97       	mov	r7,sp
80018556:	20 1d       	sub	sp,4
80018558:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.mstr = 1;
8001855c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018560:	72 18       	ld.w	r8,r9[0x4]
80018562:	30 1a       	mov	r10,1
80018564:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
80018568:	93 18       	st.w	r9[0x4],r8
}
8001856a:	2f fd       	sub	sp,-4
8001856c:	e3 cd 80 80 	ldm	sp++,r7,pc

80018570 <spi_disable_modfault>:
/*! \brief Disable Modfault of the SPI.
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_modfault(volatile avr32_spi_t *spi)
{
80018570:	eb cd 40 80 	pushm	r7,lr
80018574:	1a 97       	mov	r7,sp
80018576:	20 1d       	sub	sp,4
80018578:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.modfdis = 1;
8001857c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018580:	72 18       	ld.w	r8,r9[0x4]
80018582:	30 1a       	mov	r10,1
80018584:	f1 da d0 81 	bfins	r8,r10,0x4,0x1
80018588:	93 18       	st.w	r9[0x4],r8
}
8001858a:	2f fd       	sub	sp,-4
8001858c:	e3 cd 80 80 	ldm	sp++,r7,pc

80018590 <spi_disable_loopback>:
/*! \brief Disable Loopback of the SPI.
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_loopback(volatile avr32_spi_t *spi)
{
80018590:	eb cd 40 80 	pushm	r7,lr
80018594:	1a 97       	mov	r7,sp
80018596:	20 1d       	sub	sp,4
80018598:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.llb = 0;
8001859c:	ee f9 ff fc 	ld.w	r9,r7[-4]
800185a0:	72 18       	ld.w	r8,r9[0x4]
800185a2:	30 0a       	mov	r10,0
800185a4:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
800185a8:	93 18       	st.w	r9[0x4],r8
}
800185aa:	2f fd       	sub	sp,-4
800185ac:	e3 cd 80 80 	ldm	sp++,r7,pc

800185b0 <spi_disable_chipselect_decoding>:
/*! \brief Disable Chip Select Decoding of the SPI.
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_chipselect_decoding(volatile avr32_spi_t *spi)
{
800185b0:	eb cd 40 80 	pushm	r7,lr
800185b4:	1a 97       	mov	r7,sp
800185b6:	20 1d       	sub	sp,4
800185b8:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.pcsdec = 0;
800185bc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800185c0:	72 18       	ld.w	r8,r9[0x4]
800185c2:	30 0a       	mov	r10,0
800185c4:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
800185c8:	93 18       	st.w	r9[0x4],r8
}
800185ca:	2f fd       	sub	sp,-4
800185cc:	e3 cd 80 80 	ldm	sp++,r7,pc

800185d0 <spi_set_chipselect>:
 *
 * \param spi         Base address of the SPI instance.
 * \param chip_select Chip Select.
 */
static inline void spi_set_chipselect(volatile avr32_spi_t *spi,uint8_t chip_select)
{
800185d0:	eb cd 40 80 	pushm	r7,lr
800185d4:	1a 97       	mov	r7,sp
800185d6:	20 2d       	sub	sp,8
800185d8:	ef 4c ff fc 	st.w	r7[-4],r12
800185dc:	16 98       	mov	r8,r11
800185de:	ef 68 ff f8 	st.b	r7[-8],r8
	spi->MR.pcs = chip_select;
800185e2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800185e6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800185ea:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800185ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
800185f2:	72 18       	ld.w	r8,r9[0x4]
800185f4:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
800185f8:	93 18       	st.w	r9[0x4],r8
}
800185fa:	2f ed       	sub	sp,-8
800185fc:	e3 cd 80 80 	ldm	sp++,r7,pc

80018600 <spi_disable_variable_chipselect>:
/*! \brief Disable Variable Chip Select of the SPI.
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_disable_variable_chipselect(volatile avr32_spi_t *spi)
{
80018600:	eb cd 40 80 	pushm	r7,lr
80018604:	1a 97       	mov	r7,sp
80018606:	20 1d       	sub	sp,4
80018608:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.ps = 0;
8001860c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018610:	72 18       	ld.w	r8,r9[0x4]
80018612:	30 0a       	mov	r10,0
80018614:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
80018618:	93 18       	st.w	r9[0x4],r8
}
8001861a:	2f fd       	sub	sp,-4
8001861c:	e3 cd 80 80 	ldm	sp++,r7,pc

80018620 <spi_set_delay>:
 *
 * \param spi         Base address of the SPI instance.
 * \param delay       Delay.
 */
static inline void spi_set_delay(volatile avr32_spi_t *spi,uint8_t delay)
{
80018620:	eb cd 40 80 	pushm	r7,lr
80018624:	1a 97       	mov	r7,sp
80018626:	20 2d       	sub	sp,8
80018628:	ef 4c ff fc 	st.w	r7[-4],r12
8001862c:	16 98       	mov	r8,r11
8001862e:	ef 68 ff f8 	st.b	r7[-8],r8
	spi->MR.dlybcs = delay;
80018632:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018636:	72 18       	ld.w	r8,r9[0x4]
80018638:	ef 3a ff f8 	ld.ub	r10,r7[-8]
8001863c:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
80018640:	93 18       	st.w	r9[0x4],r8
}
80018642:	2f ed       	sub	sp,-8
80018644:	e3 cd 80 80 	ldm	sp++,r7,pc

80018648 <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
static inline void spi_master_init(volatile avr32_spi_t *spi)
{
80018648:	eb cd 40 c0 	pushm	r6-r7,lr
8001864c:	1a 97       	mov	r7,sp
8001864e:	20 1d       	sub	sp,4
80018650:	49 86       	lddpc	r6,800186b0 <spi_master_init+0x68>
80018652:	1e 26       	rsub	r6,pc
80018654:	ef 4c ff fc 	st.w	r7[-4],r12
#ifdef AVR32_SPI
	sysclk_enable_pba_module(SYSCLK_SPI);	
#else
	if ((uint32_t)spi == AVR32_SPI0_ADDRESS)
80018658:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001865c:	fc 58 18 00 	cp.w	r8,-190464
80018660:	c0 41       	brne	80018668 <spi_master_init+0x20>
	{
	sysclk_enable_pba_module(SYSCLK_SPI0);	
80018662:	30 3c       	mov	r12,3
80018664:	c5 6f       	rcall	80018510 <sysclk_enable_pba_module>
80018666:	c0 88       	rjmp	80018676 <spi_master_init+0x2e>
	}
#ifdef AVR32_SPI1
	else if ((uint32_t)spi == AVR32_SPI1_ADDRESS)
80018668:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001866c:	fe 58 34 00 	cp.w	r8,-52224
80018670:	c0 31       	brne	80018676 <spi_master_init+0x2e>
	{
	sysclk_enable_pba_module(SYSCLK_SPI1);	
80018672:	30 bc       	mov	r12,11
80018674:	c4 ef       	rcall	80018510 <sysclk_enable_pba_module>
	}
#endif
#endif
  
  spi_reset(spi);
80018676:	ee fc ff fc 	ld.w	r12,r7[-4]
8001867a:	c5 df       	rcall	80018534 <spi_reset>
  spi_set_master_mode(spi);
8001867c:	ee fc ff fc 	ld.w	r12,r7[-4]
80018680:	c6 8f       	rcall	80018550 <spi_set_master_mode>
  spi_disable_modfault(spi);
80018682:	ee fc ff fc 	ld.w	r12,r7[-4]
80018686:	c7 5f       	rcall	80018570 <spi_disable_modfault>
  spi_disable_loopback(spi);
80018688:	ee fc ff fc 	ld.w	r12,r7[-4]
8001868c:	c8 2f       	rcall	80018590 <spi_disable_loopback>
  spi_set_chipselect(spi,(1 << AVR32_SPI_MR_PCS_SIZE) - 1);
8001868e:	30 fb       	mov	r11,15
80018690:	ee fc ff fc 	ld.w	r12,r7[-4]
80018694:	c9 ef       	rcall	800185d0 <spi_set_chipselect>
  spi_disable_variable_chipselect(spi);
80018696:	ee fc ff fc 	ld.w	r12,r7[-4]
8001869a:	cb 3f       	rcall	80018600 <spi_disable_variable_chipselect>
  spi_disable_chipselect_decoding(spi);
8001869c:	ee fc ff fc 	ld.w	r12,r7[-4]
800186a0:	c8 8f       	rcall	800185b0 <spi_disable_chipselect_decoding>
  spi_set_delay(spi,CONFIG_SPI_MASTER_DELAY_BCS);
800186a2:	30 0b       	mov	r11,0
800186a4:	ee fc ff fc 	ld.w	r12,r7[-4]
800186a8:	cb cf       	rcall	80018620 <spi_set_delay>
}
800186aa:	2f fd       	sub	sp,-4
800186ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800186b0:	80 01       	ld.sh	r1,r0[0x0]
800186b2:	84 d6       	ld.uh	r6,r2[0xa]

800186b4 <spi_select_device>:
 * \param spi Base address of the SPI instance.
 * \param device SPI device
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi, struct spi_device *device)
{
800186b4:	eb cd 40 c0 	pushm	r6-r7,lr
800186b8:	1a 97       	mov	r7,sp
800186ba:	20 2d       	sub	sp,8
800186bc:	48 96       	lddpc	r6,800186e0 <spi_select_device+0x2c>
800186be:	1e 26       	rsub	r6,pc
800186c0:	ef 4c ff fc 	st.w	r7[-4],r12
800186c4:	ef 4b ff f8 	st.w	r7[-8],r11
	spi_selectChip(spi,device->id);
800186c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800186cc:	11 88       	ld.ub	r8,r8[0x0]
800186ce:	10 9b       	mov	r11,r8
800186d0:	ee fc ff fc 	ld.w	r12,r7[-4]
800186d4:	f0 16 01 fa 	mcall	r6[2024]
}
800186d8:	2f ed       	sub	sp,-8
800186da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800186de:	00 00       	add	r0,r0
800186e0:	80 01       	ld.sh	r1,r0[0x0]
800186e2:	85 42       	st.w	r2[0x10],r2

800186e4 <spi_deselect_device>:
 * \param device SPI device
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi, struct spi_device *device)
{
800186e4:	eb cd 40 c0 	pushm	r6-r7,lr
800186e8:	1a 97       	mov	r7,sp
800186ea:	20 2d       	sub	sp,8
800186ec:	48 96       	lddpc	r6,80018710 <spi_deselect_device+0x2c>
800186ee:	1e 26       	rsub	r6,pc
800186f0:	ef 4c ff fc 	st.w	r7[-4],r12
800186f4:	ef 4b ff f8 	st.w	r7[-8],r11
	spi_unselectChip(spi,device->id);
800186f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800186fc:	11 88       	ld.ub	r8,r8[0x0]
800186fe:	10 9b       	mov	r11,r8
80018700:	ee fc ff fc 	ld.w	r12,r7[-4]
80018704:	f0 16 01 48 	mcall	r6[1312]
}
80018708:	2f ed       	sub	sp,-8
8001870a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001870e:	00 00       	add	r0,r0
80018710:	80 01       	ld.sh	r1,r0[0x0]
80018712:	85 72       	st.w	r2[0x1c],r2

80018714 <get_spi_in_buffer>:
#include "led.h"


static volatile spi_buffer_t spi_buffers[SPI_NUMBER];

uint8_t* get_spi_in_buffer(int spi_index) {
80018714:	eb cd 40 c0 	pushm	r6-r7,lr
80018718:	1a 97       	mov	r7,sp
8001871a:	20 1d       	sub	sp,4
8001871c:	48 96       	lddpc	r6,80018740 <get_spi_in_buffer+0x2c>
8001871e:	1e 26       	rsub	r6,pc
80018720:	ef 4c ff fc 	st.w	r7[-4],r12
	return spi_buffers[spi_index].SPIInBuffer;
80018724:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018728:	f0 08 10 54 	mul	r8,r8,84
8001872c:	f0 c9 ff dc 	sub	r9,r8,-36
80018730:	ec f8 00 2c 	ld.w	r8,r6[44]
80018734:	f2 08 00 08 	add	r8,r9,r8
}
80018738:	10 9c       	mov	r12,r8
8001873a:	2f fd       	sub	sp,-4
8001873c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018740:	80 01       	ld.sh	r1,r0[0x0]
80018742:	85 a2       	st.w	r2[0x28],r2

80018744 <spi0_int_handler>:

/** interrupt handler
  * manages sending and receiving data
*/
__attribute__((__interrupt__))
void spi0_int_handler() {
80018744:	eb cd 40 c0 	pushm	r6-r7,lr
80018748:	1a 97       	mov	r7,sp
8001874a:	48 56       	lddpc	r6,8001875c <spi0_int_handler+0x18>
8001874c:	1e 26       	rsub	r6,pc
	//LED_On(LED1);
	spi_handler(0);
8001874e:	30 0c       	mov	r12,0
80018750:	f0 16 01 23 	mcall	r6[1164]
}
80018754:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80018758:	d6 03       	rete
8001875a:	00 00       	add	r0,r0
8001875c:	80 01       	ld.sh	r1,r0[0x0]
8001875e:	85 d0       	st.w	r2[0x34],r0

80018760 <spi1_int_handler>:

__attribute__((__interrupt__))
void spi1_int_handler() {
80018760:	eb cd 40 c0 	pushm	r6-r7,lr
80018764:	1a 97       	mov	r7,sp
80018766:	48 56       	lddpc	r6,80018778 <spi1_int_handler+0x18>
80018768:	1e 26       	rsub	r6,pc
	spi_handler(1);
8001876a:	30 1c       	mov	r12,1
8001876c:	f0 16 01 23 	mcall	r6[1164]
}
80018770:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80018774:	d6 03       	rete
80018776:	00 00       	add	r0,r0
80018778:	80 01       	ld.sh	r1,r0[0x0]
8001877a:	85 ec       	st.w	r2[0x38],r12

8001877c <pdca_int_handler_spi0>:

/*! \brief The PDCA interrupt handler.
 */
__attribute__((__interrupt__))
static void pdca_int_handler_spi0(void)
{
8001877c:	eb cd 40 c0 	pushm	r6-r7,lr
80018780:	1a 97       	mov	r7,sp
80018782:	49 b6       	lddpc	r6,800187ec <pdca_int_handler_spi0+0x70>
80018784:	1e 26       	rsub	r6,pc
	AVR32_PDCA.channel[SPI0_DMA_CH_RECEIVE].isr;
80018786:	fc 78 00 00 	mov	r8,-196608
8001878a:	71 b8       	ld.w	r8,r8[0x6c]
	AVR32_PDCA.channel[SPI0_DMA_CH_TRANSMIT].isr;
8001878c:	fc 78 00 00 	mov	r8,-196608
80018790:	70 b8       	ld.w	r8,r8[0x2c]
	pdca_disable(SPI0_DMA_CH_RECEIVE);
80018792:	30 1c       	mov	r12,1
80018794:	f0 16 00 7e 	mcall	r6[504]
	pdca_disable(SPI0_DMA_CH_TRANSMIT);
80018798:	30 0c       	mov	r12,0
8001879a:	f0 16 00 7e 	mcall	r6[504]
	pdca_disable_interrupt_transfer_complete(SPI0_DMA_CH_RECEIVE);
8001879e:	30 1c       	mov	r12,1
800187a0:	f0 16 00 98 	mcall	r6[608]
	spi_deselect_device(spi_buffers[0].spi, &spi_buffers[0].adc_spi);
800187a4:	ec f8 00 2c 	ld.w	r8,r6[44]
800187a8:	70 08       	ld.w	r8,r8[0x0]
800187aa:	ec f9 00 2c 	ld.w	r9,r6[44]
800187ae:	2b 09       	sub	r9,-80
800187b0:	12 9b       	mov	r11,r9
800187b2:	10 9c       	mov	r12,r8
800187b4:	c9 8f       	rcall	800186e4 <spi_deselect_device>
   // call callback function to process data, at end of transfer
   // to process data, and maybe add some more data
   spi_buffers[0].SPIinBufferTail=spi_buffers[0].transmission_in_progress;
800187b6:	ec f8 00 2c 	ld.w	r8,r6[44]
800187ba:	f1 38 00 4a 	ld.ub	r8,r8[74]
800187be:	5c 58       	castu.b	r8
800187c0:	ec f9 00 2c 	ld.w	r9,r6[44]
800187c4:	f3 68 00 45 	st.b	r9[69],r8
   spi_buffers[0].transmission_in_progress=0;
800187c8:	ec f9 00 2c 	ld.w	r9,r6[44]
800187cc:	30 08       	mov	r8,0
800187ce:	f3 68 00 4a 	st.b	r9[74],r8
   //spi_buffers[0].traffic++;
   
   if ((spi_buffers[0].callbackFunction)) spi_buffers[0].callbackFunction();
800187d2:	ec f8 00 2c 	ld.w	r8,r6[44]
800187d6:	71 38       	ld.w	r8,r8[0x4c]
800187d8:	58 08       	cp.w	r8,0
800187da:	c0 50       	breq	800187e4 <pdca_int_handler_spi0+0x68>
800187dc:	ec f8 00 2c 	ld.w	r8,r6[44]
800187e0:	71 38       	ld.w	r8,r8[0x4c]
800187e2:	5d 18       	icall	r8
   
}
800187e4:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800187e8:	d6 03       	rete
800187ea:	00 00       	add	r0,r0
800187ec:	80 01       	ld.sh	r1,r0[0x0]
800187ee:	86 08       	ld.sh	r8,r3[0x0]

800187f0 <initSPI>:
/** initialises SPI interface
 *  this interface uses internal buffers and interrupts. 
 *  bytes in the outgoing buffer are sent automatically via interrupt
 */

void initSPI(volatile avr32_spi_t *spi, int spi_index){
800187f0:	eb cd 40 c0 	pushm	r6-r7,lr
800187f4:	1a 97       	mov	r7,sp
800187f6:	20 2d       	sub	sp,8
800187f8:	4e 16       	lddpc	r6,8001897c <initSPI+0x18c>
800187fa:	1e 26       	rsub	r6,pc
800187fc:	ef 4c ff fc 	st.w	r7[-4],r12
80018800:	ef 4b ff f8 	st.w	r7[-8],r11
	// init SPI
	spi_buffers[spi_index].spi= spi;
80018804:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018808:	ec f9 00 2c 	ld.w	r9,r6[44]
8001880c:	f0 08 10 54 	mul	r8,r8,84
80018810:	f2 08 00 08 	add	r8,r9,r8
80018814:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018818:	91 09       	st.w	r8[0x0],r9
	
	spi_buffers[spi_index].adc_spi.id=0;
8001881a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001881e:	ec f9 00 2c 	ld.w	r9,r6[44]
80018822:	f0 08 10 54 	mul	r8,r8,84
80018826:	f2 08 00 08 	add	r8,r9,r8
8001882a:	f0 c9 ff b0 	sub	r9,r8,-80
8001882e:	30 08       	mov	r8,0
80018830:	b2 88       	st.b	r9[0x0],r8
	
	spi_master_init(spi_buffers[spi_index].spi);
80018832:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018836:	ec f9 00 2c 	ld.w	r9,r6[44]
8001883a:	f0 08 10 54 	mul	r8,r8,84
8001883e:	f2 08 00 08 	add	r8,r9,r8
80018842:	70 08       	ld.w	r8,r8[0x0]
80018844:	10 9c       	mov	r12,r8
80018846:	c0 1f       	rcall	80018648 <spi_master_init>
	spi_master_setup_device(spi_buffers[spi_index].spi, &spi_buffers[spi_index].adc_spi, SPI_MODE_0, 20000000, 0);
80018848:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001884c:	f0 08 10 54 	mul	r8,r8,84
80018850:	f0 c9 ff b0 	sub	r9,r8,-80
80018854:	ec f8 00 2c 	ld.w	r8,r6[44]
80018858:	f2 08 00 0b 	add	r11,r9,r8
8001885c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018860:	ec f9 00 2c 	ld.w	r9,r6[44]
80018864:	f0 08 10 54 	mul	r8,r8,84
80018868:	f2 08 00 08 	add	r8,r9,r8
8001886c:	70 0c       	ld.w	r12,r8[0x0]
8001886e:	30 08       	mov	r8,0
80018870:	e0 69 2d 00 	mov	r9,11520
80018874:	ea 19 01 31 	orh	r9,0x131
80018878:	30 0a       	mov	r10,0
8001887a:	f0 16 01 69 	mcall	r6[1444]
	//spi_buffers[spi_index].spi->cr=AVR32_SPI_SWRST_MASK;
	
	//spi_buffers[spi_index].spi->mr=AVR32_SPI_MSTR_MASK;

	
	gpio_enable_module_pin(AVR32_SPI0_MOSI_0_0_PIN, AVR32_SPI0_MOSI_0_0_FUNCTION);
8001887e:	30 0b       	mov	r11,0
80018880:	36 0c       	mov	r12,96
80018882:	f0 16 00 3e 	mcall	r6[248]
	//gpio_configure_pin(AVR32_SPI0_MOSI_0_0_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
	gpio_enable_module_pin(AVR32_SPI0_MISO_0_0_PIN, AVR32_SPI0_MISO_0_0_FUNCTION);
80018886:	30 0b       	mov	r11,0
80018888:	36 1c       	mov	r12,97
8001888a:	f0 16 00 3e 	mcall	r6[248]
	gpio_enable_module_pin(AVR32_SPI0_SCK_0_0_PIN, AVR32_SPI0_SCK_0_0_FUNCTION);
8001888e:	30 0b       	mov	r11,0
80018890:	36 2c       	mov	r12,98
80018892:	f0 16 00 3e 	mcall	r6[248]

	spi_buffers[spi_index].SPIinBufferHead=0;
80018896:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001889a:	ec f9 00 2c 	ld.w	r9,r6[44]
8001889e:	f0 08 10 54 	mul	r8,r8,84
800188a2:	f2 08 00 08 	add	r8,r9,r8
800188a6:	f0 c9 ff bc 	sub	r9,r8,-68
800188aa:	30 08       	mov	r8,0
800188ac:	b2 88       	st.b	r9[0x0],r8
	spi_buffers[spi_index].SPIinBufferTail=0;
800188ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800188b2:	ec f9 00 2c 	ld.w	r9,r6[44]
800188b6:	f0 08 10 54 	mul	r8,r8,84
800188ba:	f2 08 00 08 	add	r8,r9,r8
800188be:	f0 c9 ff bc 	sub	r9,r8,-68
800188c2:	30 08       	mov	r8,0
800188c4:	b2 98       	st.b	r9[0x1],r8
	spi_buffers[spi_index].SPIoutBufferHead=0;
800188c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800188ca:	ec f9 00 2c 	ld.w	r9,r6[44]
800188ce:	f0 08 10 54 	mul	r8,r8,84
800188d2:	f2 08 00 08 	add	r8,r9,r8
800188d6:	f0 c9 ff bc 	sub	r9,r8,-68
800188da:	30 08       	mov	r8,0
800188dc:	b2 a8       	st.b	r9[0x2],r8
	spi_buffers[spi_index].SPIoutBufferTail=0;
800188de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800188e2:	ec f9 00 2c 	ld.w	r9,r6[44]
800188e6:	f0 08 10 54 	mul	r8,r8,84
800188ea:	f2 08 00 08 	add	r8,r9,r8
800188ee:	f0 c9 ff bc 	sub	r9,r8,-68
800188f2:	30 08       	mov	r8,0
800188f4:	b2 b8       	st.b	r9[0x3],r8
	spi_buffers[spi_index].spiReceiverOn=1;
800188f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800188fa:	ec f9 00 2c 	ld.w	r9,r6[44]
800188fe:	f0 08 10 54 	mul	r8,r8,84
80018902:	f2 08 00 08 	add	r8,r9,r8
80018906:	f0 c9 ff b8 	sub	r9,r8,-72
8001890a:	30 18       	mov	r8,1
8001890c:	b2 88       	st.b	r9[0x0],r8
	spi_buffers[spi_index].traffic=0;
8001890e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018912:	ec f9 00 2c 	ld.w	r9,r6[44]
80018916:	f0 08 10 54 	mul	r8,r8,84
8001891a:	f2 08 00 08 	add	r8,r9,r8
8001891e:	f0 c9 ff b8 	sub	r9,r8,-72
80018922:	30 08       	mov	r8,0
80018924:	b2 98       	st.b	r9[0x1],r8
	spi_buffers[spi_index].automatic=1;
80018926:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001892a:	ec f9 00 2c 	ld.w	r9,r6[44]
8001892e:	f0 08 10 54 	mul	r8,r8,84
80018932:	f2 08 00 08 	add	r8,r9,r8
80018936:	f0 c9 ff b8 	sub	r9,r8,-72
8001893a:	30 18       	mov	r8,1
8001893c:	b2 b8       	st.b	r9[0x3],r8
	spi_buffers[spi_index].callbackFunction=0;
8001893e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018942:	ec f9 00 2c 	ld.w	r9,r6[44]
80018946:	f0 08 10 54 	mul	r8,r8,84
8001894a:	f2 08 00 08 	add	r8,r9,r8
8001894e:	2b 48       	sub	r8,-76
80018950:	30 09       	mov	r9,0
80018952:	91 09       	st.w	r8[0x0],r9
	spi_buffers[spi_index].transmission_in_progress=0;
80018954:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018958:	ec f9 00 2c 	ld.w	r9,r6[44]
8001895c:	f0 08 10 54 	mul	r8,r8,84
80018960:	f2 08 00 08 	add	r8,r9,r8
80018964:	f0 c9 ff b8 	sub	r9,r8,-72
80018968:	30 08       	mov	r8,0
8001896a:	b2 a8       	st.b	r9[0x2],r8
    //INTC_register_interrupt(&spi0_int_handler, AVR32_SPI0_IRQ, AVR32_INTC_INT0);
	
    //INTC_register_interrupt(&spi1_int_handler, AVR32_SPI1_IRQ, AVR32_INTC_INT0);
	//spi_buffers[spi_index].spi->imr = AVR32_SPI_RDRF;

	enableSPI(spi_index);
8001896c:	ee fc ff f8 	ld.w	r12,r7[-8]
80018970:	f0 16 01 aa 	mcall	r6[1704]
	//spi_buffers[spi_index].spi->cr=AVR32_SPI_SPIEN_MASK;	
}
80018974:	2f ed       	sub	sp,-8
80018976:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001897a:	00 00       	add	r0,r0
8001897c:	80 01       	ld.sh	r1,r0[0x0]
8001897e:	86 7e       	ld.sh	lr,r3[0xe]

80018980 <enableSPI>:

void enableSPI(int spi_index) {
80018980:	eb cd 40 c0 	pushm	r6-r7,lr
80018984:	1a 97       	mov	r7,sp
80018986:	20 1d       	sub	sp,4
80018988:	48 a6       	lddpc	r6,800189b0 <enableSPI+0x30>
8001898a:	1e 26       	rsub	r6,pc
8001898c:	ef 4c ff fc 	st.w	r7[-4],r12
	spi_enable(spi_buffers[spi_index].spi);
80018990:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018994:	ec f9 00 2c 	ld.w	r9,r6[44]
80018998:	f0 08 10 54 	mul	r8,r8,84
8001899c:	f2 08 00 08 	add	r8,r9,r8
800189a0:	70 08       	ld.w	r8,r8[0x0]
800189a2:	10 9c       	mov	r12,r8
800189a4:	f0 16 01 ac 	mcall	r6[1712]
}
800189a8:	2f fd       	sub	sp,-4
800189aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800189ae:	00 00       	add	r0,r0
800189b0:	80 01       	ld.sh	r1,r0[0x0]
800189b2:	88 0e       	ld.sh	lr,r4[0x0]

800189b4 <disableSPI>:

void disableSPI(int spi_index) {
800189b4:	eb cd 40 c0 	pushm	r6-r7,lr
800189b8:	1a 97       	mov	r7,sp
800189ba:	20 1d       	sub	sp,4
800189bc:	48 a6       	lddpc	r6,800189e4 <disableSPI+0x30>
800189be:	1e 26       	rsub	r6,pc
800189c0:	ef 4c ff fc 	st.w	r7[-4],r12
	spi_disable(spi_buffers[spi_index].spi);
800189c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800189c8:	ec f9 00 2c 	ld.w	r9,r6[44]
800189cc:	f0 08 10 54 	mul	r8,r8,84
800189d0:	f2 08 00 08 	add	r8,r9,r8
800189d4:	70 08       	ld.w	r8,r8[0x0]
800189d6:	10 9c       	mov	r12,r8
800189d8:	f0 16 01 51 	mcall	r6[1348]
}
800189dc:	2f fd       	sub	sp,-4
800189de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800189e2:	00 00       	add	r0,r0
800189e4:	80 01       	ld.sh	r1,r0[0x0]
800189e6:	88 42       	ld.sh	r2,r4[0x8]

800189e8 <spiInitDMA>:


// initialise DMA for SPI transfers
  // PDCA channel options
  
void spiInitDMA(int spi_index, int block_size) {
800189e8:	eb cd 40 c0 	pushm	r6-r7,lr
800189ec:	1a 97       	mov	r7,sp
800189ee:	20 2d       	sub	sp,8
800189f0:	49 c6       	lddpc	r6,80018a60 <spiInitDMA+0x78>
800189f2:	1e 26       	rsub	r6,pc
800189f4:	ef 4c ff fc 	st.w	r7[-4],r12
800189f8:	ef 4b ff f8 	st.w	r7[-8],r11
    .size = 12,                               // transfer counter
    .r_addr = NULL,                           // next memory address
    .r_size = 0,                              // next transfer counter
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer
  };
  PDCA_TX_OPTIONS.addr=(void *) spi_buffers[spi_index].SPIOutBuffer;
800189fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018a00:	12 98       	mov	r8,r9
80018a02:	a1 78       	lsl	r8,0x1
80018a04:	12 08       	add	r8,r9
80018a06:	f0 09 15 03 	lsl	r9,r8,0x3
80018a0a:	10 19       	sub	r9,r8
80018a0c:	f2 c8 ff ff 	sub	r8,r9,-1
80018a10:	f0 09 15 02 	lsl	r9,r8,0x2
80018a14:	ec f8 00 2c 	ld.w	r8,r6[44]
80018a18:	10 09       	add	r9,r8
80018a1a:	ec f8 04 c8 	ld.w	r8,r6[1224]
80018a1e:	91 09       	st.w	r8[0x0],r9
  PDCA_RX_OPTIONS.addr=(void *) spi_buffers[spi_index].SPIInBuffer;
80018a20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018a24:	f0 08 10 54 	mul	r8,r8,84
80018a28:	f0 c9 ff dc 	sub	r9,r8,-36
80018a2c:	ec f8 00 2c 	ld.w	r8,r6[44]
80018a30:	10 09       	add	r9,r8
80018a32:	ec f8 04 c4 	ld.w	r8,r6[1220]
80018a36:	91 09       	st.w	r8[0x0],r9
  // Init PDCA channel with the pdca_options.
  pdca_init_channel(SPI0_DMA_CH_TRANSMIT, &PDCA_TX_OPTIONS); // init PDCA channel with options.
80018a38:	ec fb 04 c8 	ld.w	r11,r6[1224]
80018a3c:	30 0c       	mov	r12,0
80018a3e:	f0 16 00 75 	mcall	r6[468]
  pdca_init_channel(SPI0_DMA_CH_RECEIVE, &PDCA_RX_OPTIONS); // init PDCA channel with options.
80018a42:	ec fb 04 c4 	ld.w	r11,r6[1220]
80018a46:	30 1c       	mov	r12,1
80018a48:	f0 16 00 75 	mcall	r6[468]

  // Register PDCA IRQ interrupt.

  INTC_register_interrupt( (__int_handler) &pdca_int_handler_spi0, SPI0_DMA_IRQ, AVR32_INTC_INT0);
80018a4c:	30 0a       	mov	r10,0
80018a4e:	36 1b       	mov	r11,97
80018a50:	fe cc 02 d4 	sub	r12,pc,724
80018a54:	f0 16 00 3b 	mcall	r6[236]
  
  
}
80018a58:	2f ed       	sub	sp,-8
80018a5a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018a5e:	00 00       	add	r0,r0
80018a60:	80 01       	ld.sh	r1,r0[0x0]
80018a62:	88 76       	ld.sh	r6,r4[0xe]

80018a64 <spiTriggerDMA>:

void spiTriggerDMA(int spi_index, int block_size){
80018a64:	eb cd 40 c0 	pushm	r6-r7,lr
80018a68:	1a 97       	mov	r7,sp
80018a6a:	20 2d       	sub	sp,8
80018a6c:	4a 86       	lddpc	r6,80018b0c <spiTriggerDMA+0xa8>
80018a6e:	1e 26       	rsub	r6,pc
80018a70:	ef 4c ff fc 	st.w	r7[-4],r12
80018a74:	ef 4b ff f8 	st.w	r7[-8],r11
	//spi_buffers[spi_index].transmission_in_progress=block_size;
	//spi_buffers[spi_index].SPIInBuffer[0]=42;
	//spi_buffers[spi_index].SPIInBuffer[3]=42;
	//spi_buffers[spi_index].SPIInBuffer[6]=42;
	//spi_buffers[spi_index].SPIInBuffer[9]=42;
	pdca_load_channel(SPI0_DMA_CH_TRANSMIT, (void *)spi_buffers[spi_index].SPIOutBuffer, block_size);
80018a78:	ee fa ff f8 	ld.w	r10,r7[-8]
80018a7c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018a80:	12 98       	mov	r8,r9
80018a82:	a1 78       	lsl	r8,0x1
80018a84:	12 08       	add	r8,r9
80018a86:	f0 09 15 03 	lsl	r9,r8,0x3
80018a8a:	10 19       	sub	r9,r8
80018a8c:	f2 c8 ff ff 	sub	r8,r9,-1
80018a90:	f0 09 15 02 	lsl	r9,r8,0x2
80018a94:	ec f8 00 2c 	ld.w	r8,r6[44]
80018a98:	f2 08 00 08 	add	r8,r9,r8
80018a9c:	10 9b       	mov	r11,r8
80018a9e:	30 0c       	mov	r12,0
80018aa0:	f0 16 00 b7 	mcall	r6[732]
	pdca_load_channel(SPI0_DMA_CH_RECEIVE,  (void *)(spi_buffers[spi_index].SPIInBuffer), block_size);
80018aa4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018aa8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018aac:	f0 08 10 54 	mul	r8,r8,84
80018ab0:	f0 ca ff dc 	sub	r10,r8,-36
80018ab4:	ec f8 00 2c 	ld.w	r8,r6[44]
80018ab8:	f4 08 00 08 	add	r8,r10,r8
80018abc:	12 9a       	mov	r10,r9
80018abe:	10 9b       	mov	r11,r8
80018ac0:	30 1c       	mov	r12,1
80018ac2:	f0 16 00 b7 	mcall	r6[732]

	
	spi_select_device(spi_buffers[spi_index].spi, &spi_buffers[spi_index].adc_spi);
80018ac6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018aca:	f0 08 10 54 	mul	r8,r8,84
80018ace:	f0 c9 ff b0 	sub	r9,r8,-80
80018ad2:	ec f8 00 2c 	ld.w	r8,r6[44]
80018ad6:	10 09       	add	r9,r8
80018ad8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018adc:	ec fa 00 2c 	ld.w	r10,r6[44]
80018ae0:	f0 08 10 54 	mul	r8,r8,84
80018ae4:	f4 08 00 08 	add	r8,r10,r8
80018ae8:	70 08       	ld.w	r8,r8[0x0]
80018aea:	12 9b       	mov	r11,r9
80018aec:	10 9c       	mov	r12,r8
80018aee:	fe b0 fd e3 	rcall	800186b4 <spi_select_device>
	// Enable pdca interrupt each time the reload counter reaches zero, i.e. each time
    // the whole block was received
	pdca_enable_interrupt_transfer_complete(SPI0_DMA_CH_RECEIVE);
80018af2:	30 1c       	mov	r12,1
80018af4:	f0 16 00 b6 	mcall	r6[728]
	
	pdca_enable(SPI0_DMA_CH_RECEIVE);
80018af8:	30 1c       	mov	r12,1
80018afa:	f0 16 00 90 	mcall	r6[576]
	pdca_enable(SPI0_DMA_CH_TRANSMIT);
80018afe:	30 0c       	mov	r12,0
80018b00:	f0 16 00 90 	mcall	r6[576]
    
}
80018b04:	2f ed       	sub	sp,-8
80018b06:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018b0a:	00 00       	add	r0,r0
80018b0c:	80 01       	ld.sh	r1,r0[0x0]
80018b0e:	88 f2       	ld.uh	r2,r4[0xe]

80018b10 <setSPIcallBack>:

/** specify a callback function, that gets called when the SPI buffer is empty
 */
void setSPIcallBack(int spi_index, functionpointer* functionPointer) {
80018b10:	eb cd 40 c0 	pushm	r6-r7,lr
80018b14:	1a 97       	mov	r7,sp
80018b16:	20 2d       	sub	sp,8
80018b18:	48 b6       	lddpc	r6,80018b44 <setSPIcallBack+0x34>
80018b1a:	1e 26       	rsub	r6,pc
80018b1c:	ef 4c ff fc 	st.w	r7[-4],r12
80018b20:	ef 4b ff f8 	st.w	r7[-8],r11
	spi_buffers[spi_index].callbackFunction=functionPointer;
80018b24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b28:	ec f9 00 2c 	ld.w	r9,r6[44]
80018b2c:	f0 08 10 54 	mul	r8,r8,84
80018b30:	f2 08 00 08 	add	r8,r9,r8
80018b34:	2b 48       	sub	r8,-76
80018b36:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018b3a:	91 09       	st.w	r8[0x0],r9
}
80018b3c:	2f ed       	sub	sp,-8
80018b3e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018b42:	00 00       	add	r0,r0
80018b44:	80 01       	ld.sh	r1,r0[0x0]
80018b46:	89 9e       	st.w	r4[0x24],lr

80018b48 <pauseSPI>:

/** pauses sending 
  * be careful not to overfill the buffer - deadlock may occur  
  */
void pauseSPI(int spi_index){
80018b48:	eb cd 40 c0 	pushm	r6-r7,lr
80018b4c:	1a 97       	mov	r7,sp
80018b4e:	20 1d       	sub	sp,4
80018b50:	48 a6       	lddpc	r6,80018b78 <pauseSPI+0x30>
80018b52:	1e 26       	rsub	r6,pc
80018b54:	ef 4c ff fc 	st.w	r7[-4],r12
   spi_buffers[spi_index].automatic=0;
80018b58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b5c:	ec f9 00 2c 	ld.w	r9,r6[44]
80018b60:	f0 08 10 54 	mul	r8,r8,84
80018b64:	f2 08 00 08 	add	r8,r9,r8
80018b68:	f0 c9 ff b8 	sub	r9,r8,-72
80018b6c:	30 08       	mov	r8,0
80018b6e:	b2 b8       	st.b	r9[0x3],r8
}
80018b70:	2f fd       	sub	sp,-4
80018b72:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018b76:	00 00       	add	r0,r0
80018b78:	80 01       	ld.sh	r1,r0[0x0]
80018b7a:	89 d6       	st.w	r4[0x34],r6

80018b7c <resumeSPI>:

/** resumes automatic sending
 */
void resumeSPI(int spi_index){
80018b7c:	eb cd 40 c0 	pushm	r6-r7,lr
80018b80:	1a 97       	mov	r7,sp
80018b82:	20 1d       	sub	sp,4
80018b84:	48 c6       	lddpc	r6,80018bb4 <resumeSPI+0x38>
80018b86:	1e 26       	rsub	r6,pc
80018b88:	ef 4c ff fc 	st.w	r7[-4],r12
  spi_buffers[spi_index].automatic=1;
80018b8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b90:	ec f9 00 2c 	ld.w	r9,r6[44]
80018b94:	f0 08 10 54 	mul	r8,r8,84
80018b98:	f2 08 00 08 	add	r8,r9,r8
80018b9c:	f0 c9 ff b8 	sub	r9,r8,-72
80018ba0:	30 18       	mov	r8,1
80018ba2:	b2 b8       	st.b	r9[0x3],r8
  startSPI(spi_index);
80018ba4:	ee fc ff fc 	ld.w	r12,r7[-4]
80018ba8:	f0 16 00 eb 	mcall	r6[940]
}
80018bac:	2f fd       	sub	sp,-4
80018bae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018bb2:	00 00       	add	r0,r0
80018bb4:	80 01       	ld.sh	r1,r0[0x0]
80018bb6:	8a 0a       	ld.sh	r10,r5[0x0]

80018bb8 <activateReceiveSPI>:

void activateReceiveSPI(int spi_index){
80018bb8:	eb cd 40 c0 	pushm	r6-r7,lr
80018bbc:	1a 97       	mov	r7,sp
80018bbe:	20 1d       	sub	sp,4
80018bc0:	48 a6       	lddpc	r6,80018be8 <activateReceiveSPI+0x30>
80018bc2:	1e 26       	rsub	r6,pc
80018bc4:	ef 4c ff fc 	st.w	r7[-4],r12

  spi_buffers[spi_index].spiReceiverOn=1;
80018bc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018bcc:	ec f9 00 2c 	ld.w	r9,r6[44]
80018bd0:	f0 08 10 54 	mul	r8,r8,84
80018bd4:	f2 08 00 08 	add	r8,r9,r8
80018bd8:	f0 c9 ff b8 	sub	r9,r8,-72
80018bdc:	30 18       	mov	r8,1
80018bde:	b2 88       	st.b	r9[0x0],r8
}
80018be0:	2f fd       	sub	sp,-4
80018be2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018be6:	00 00       	add	r0,r0
80018be8:	80 01       	ld.sh	r1,r0[0x0]
80018bea:	8a 46       	ld.sh	r6,r5[0x8]

80018bec <deactivateReceiveSPI>:

void deactivateReceiveSPI(int spi_index){
80018bec:	eb cd 40 c0 	pushm	r6-r7,lr
80018bf0:	1a 97       	mov	r7,sp
80018bf2:	20 1d       	sub	sp,4
80018bf4:	48 a6       	lddpc	r6,80018c1c <deactivateReceiveSPI+0x30>
80018bf6:	1e 26       	rsub	r6,pc
80018bf8:	ef 4c ff fc 	st.w	r7[-4],r12
  spi_buffers[spi_index].spiReceiverOn=0;
80018bfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018c00:	ec f9 00 2c 	ld.w	r9,r6[44]
80018c04:	f0 08 10 54 	mul	r8,r8,84
80018c08:	f2 08 00 08 	add	r8,r9,r8
80018c0c:	f0 c9 ff b8 	sub	r9,r8,-72
80018c10:	30 08       	mov	r8,0
80018c12:	b2 88       	st.b	r9[0x0],r8
}
80018c14:	2f fd       	sub	sp,-4
80018c16:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018c1a:	00 00       	add	r0,r0
80018c1c:	80 01       	ld.sh	r1,r0[0x0]
80018c1e:	8a 7a       	ld.sh	r10,r5[0xe]

80018c20 <getTraffic>:
uint8_t getTraffic(int spi_index) {return spi_buffers[spi_index].traffic;}
80018c20:	eb cd 40 c0 	pushm	r6-r7,lr
80018c24:	1a 97       	mov	r7,sp
80018c26:	20 1d       	sub	sp,4
80018c28:	48 a6       	lddpc	r6,80018c50 <getTraffic+0x30>
80018c2a:	1e 26       	rsub	r6,pc
80018c2c:	ef 4c ff fc 	st.w	r7[-4],r12
80018c30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018c34:	ec f9 00 2c 	ld.w	r9,r6[44]
80018c38:	f0 08 10 54 	mul	r8,r8,84
80018c3c:	f2 08 00 08 	add	r8,r9,r8
80018c40:	2b 88       	sub	r8,-72
80018c42:	11 98       	ld.ub	r8,r8[0x1]
80018c44:	5c 58       	castu.b	r8
80018c46:	10 9c       	mov	r12,r8
80018c48:	2f fd       	sub	sp,-4
80018c4a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018c4e:	00 00       	add	r0,r0
80018c50:	80 01       	ld.sh	r1,r0[0x0]
80018c52:	8a ae       	ld.uh	lr,r5[0x4]

80018c54 <readSPI>:


/** reads one byte from the incoming SPI buffer
 */
uint8_t readSPI(int spi_index){
80018c54:	eb cd 40 c0 	pushm	r6-r7,lr
80018c58:	1a 97       	mov	r7,sp
80018c5a:	20 2d       	sub	sp,8
80018c5c:	4a b6       	lddpc	r6,80018d08 <readSPI+0xb4>
80018c5e:	1e 26       	rsub	r6,pc
80018c60:	ef 4c ff f8 	st.w	r7[-8],r12
  uint8_t byte;
  // if buffer empty, wait for incoming data
  while (spi_buffers[spi_index].SPIinBufferHead==spi_buffers[spi_index].SPIinBufferTail);
80018c64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018c68:	ec f9 00 2c 	ld.w	r9,r6[44]
80018c6c:	f0 08 10 54 	mul	r8,r8,84
80018c70:	f2 08 00 08 	add	r8,r9,r8
80018c74:	2b c8       	sub	r8,-68
80018c76:	11 88       	ld.ub	r8,r8[0x0]
80018c78:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018c7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018c80:	ec fa 00 2c 	ld.w	r10,r6[44]
80018c84:	f0 08 10 54 	mul	r8,r8,84
80018c88:	f4 08 00 08 	add	r8,r10,r8
80018c8c:	2b c8       	sub	r8,-68
80018c8e:	11 98       	ld.ub	r8,r8[0x1]
80018c90:	5c 58       	castu.b	r8
80018c92:	f0 09 18 00 	cp.b	r9,r8
80018c96:	ce 70       	breq	80018c64 <readSPI+0x10>
  byte=spi_buffers[spi_index].SPIInBuffer[spi_buffers[spi_index].SPIinBufferTail];
80018c98:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018c9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018ca0:	ec fa 00 2c 	ld.w	r10,r6[44]
80018ca4:	f0 08 10 54 	mul	r8,r8,84
80018ca8:	f4 08 00 08 	add	r8,r10,r8
80018cac:	2b c8       	sub	r8,-68
80018cae:	11 98       	ld.ub	r8,r8[0x1]
80018cb0:	5c 58       	castu.b	r8
80018cb2:	ec fa 00 2c 	ld.w	r10,r6[44]
80018cb6:	f2 09 10 54 	mul	r9,r9,84
80018cba:	f4 09 00 09 	add	r9,r10,r9
80018cbe:	f2 08 00 08 	add	r8,r9,r8
80018cc2:	2d c8       	sub	r8,-36
80018cc4:	11 88       	ld.ub	r8,r8[0x0]
80018cc6:	ef 68 ff ff 	st.b	r7[-1],r8
  spi_buffers[spi_index].SPIinBufferTail=  (spi_buffers[spi_index].SPIinBufferTail+1)&SPI_BUFFER_MASK;
80018cca:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018cce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018cd2:	ec fa 00 2c 	ld.w	r10,r6[44]
80018cd6:	f0 08 10 54 	mul	r8,r8,84
80018cda:	f4 08 00 08 	add	r8,r10,r8
80018cde:	2b c8       	sub	r8,-68
80018ce0:	11 98       	ld.ub	r8,r8[0x1]
80018ce2:	5c 58       	castu.b	r8
80018ce4:	2f f8       	sub	r8,-1
80018ce6:	5c 58       	castu.b	r8
80018ce8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80018cec:	ec fa 00 2c 	ld.w	r10,r6[44]
80018cf0:	f2 09 10 54 	mul	r9,r9,84
80018cf4:	f4 09 00 09 	add	r9,r10,r9
80018cf8:	2b c9       	sub	r9,-68
80018cfa:	b2 98       	st.b	r9[0x1],r8
  return byte;
80018cfc:	ef 38 ff ff 	ld.ub	r8,r7[-1]

}
80018d00:	10 9c       	mov	r12,r8
80018d02:	2f ed       	sub	sp,-8
80018d04:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018d08:	80 01       	ld.sh	r1,r0[0x0]
80018d0a:	8a e2       	ld.uh	r2,r5[0xc]

80018d0c <clearSPIReadBuffer>:

void clearSPIReadBuffer(int spi_index){
80018d0c:	eb cd 40 c0 	pushm	r6-r7,lr
80018d10:	1a 97       	mov	r7,sp
80018d12:	20 1d       	sub	sp,4
80018d14:	48 e6       	lddpc	r6,80018d4c <clearSPIReadBuffer+0x40>
80018d16:	1e 26       	rsub	r6,pc
80018d18:	ef 4c ff fc 	st.w	r7[-4],r12
  spi_buffers[spi_index].SPIinBufferTail=spi_buffers[spi_index].SPIinBufferHead;
80018d1c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018d20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018d24:	ec fa 00 2c 	ld.w	r10,r6[44]
80018d28:	f0 08 10 54 	mul	r8,r8,84
80018d2c:	f4 08 00 08 	add	r8,r10,r8
80018d30:	2b c8       	sub	r8,-68
80018d32:	11 88       	ld.ub	r8,r8[0x0]
80018d34:	5c 58       	castu.b	r8
80018d36:	ec fa 00 2c 	ld.w	r10,r6[44]
80018d3a:	f2 09 10 54 	mul	r9,r9,84
80018d3e:	f4 09 00 09 	add	r9,r10,r9
80018d42:	2b c9       	sub	r9,-68
80018d44:	b2 98       	st.b	r9[0x1],r8
}
80018d46:	2f fd       	sub	sp,-4
80018d48:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018d4c:	80 01       	ld.sh	r1,r0[0x0]
80018d4e:	8b 9a       	st.w	r5[0x24],r10

80018d50 <writeSPI>:

/** writes one byte to the outgoing SPI buffer
 *  if buffer is full, this method blocks
 *  if sending is paused and buffer runs full, sending is automatically resumed!!
 */
void writeSPI(int spi_index, uint8_t value){
80018d50:	eb cd 40 c0 	pushm	r6-r7,lr
80018d54:	1a 97       	mov	r7,sp
80018d56:	20 3d       	sub	sp,12
80018d58:	4a b6       	lddpc	r6,80018e04 <writeSPI+0xb4>
80018d5a:	1e 26       	rsub	r6,pc
80018d5c:	ef 4c ff f8 	st.w	r7[-8],r12
80018d60:	16 98       	mov	r8,r11
80018d62:	ef 68 ff f4 	st.b	r7[-12],r8
  uint8_t newIndex;

  newIndex=(spi_buffers[spi_index].SPIoutBufferHead+1)&SPI_BUFFER_MASK;
80018d66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018d6a:	ec f9 00 2c 	ld.w	r9,r6[44]
80018d6e:	f0 08 10 54 	mul	r8,r8,84
80018d72:	f2 08 00 08 	add	r8,r9,r8
80018d76:	2b c8       	sub	r8,-68
80018d78:	11 a8       	ld.ub	r8,r8[0x2]
80018d7a:	5c 58       	castu.b	r8
80018d7c:	2f f8       	sub	r8,-1
80018d7e:	5c 58       	castu.b	r8
80018d80:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80018d84:	ef 68 ff ff 	st.b	r7[-1],r8
  // check if buffer is already full and wait
  //while (newIndex==spi_buffers[spi_index].SPIoutBufferTail) 
  //{
    //if (spi_buffers[spi_index].automatic==0) resumeSPI(spi_index);
  //}
  spi_buffers[spi_index].SPIOutBuffer[(spi_buffers[spi_index].SPIoutBufferHead)]=value;
80018d88:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018d8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018d90:	ec fa 00 2c 	ld.w	r10,r6[44]
80018d94:	f0 08 10 54 	mul	r8,r8,84
80018d98:	f4 08 00 08 	add	r8,r10,r8
80018d9c:	2b c8       	sub	r8,-68
80018d9e:	11 a8       	ld.ub	r8,r8[0x2]
80018da0:	5c 58       	castu.b	r8
80018da2:	ec fa 00 2c 	ld.w	r10,r6[44]
80018da6:	f2 09 10 54 	mul	r9,r9,84
80018daa:	f4 09 00 09 	add	r9,r10,r9
80018dae:	f2 08 00 08 	add	r8,r9,r8
80018db2:	f0 c9 ff fc 	sub	r9,r8,-4
80018db6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80018dba:	b2 88       	st.b	r9[0x0],r8
  spi_buffers[spi_index].SPIoutBufferHead = newIndex;
80018dbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018dc0:	ec f9 00 2c 	ld.w	r9,r6[44]
80018dc4:	f0 08 10 54 	mul	r8,r8,84
80018dc8:	f2 08 00 08 	add	r8,r9,r8
80018dcc:	f0 c9 ff bc 	sub	r9,r8,-68
80018dd0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80018dd4:	b2 a8       	st.b	r9[0x2],r8


  if (spi_buffers[spi_index].automatic==1) startSPI(spi_index);
80018dd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018dda:	ec f9 00 2c 	ld.w	r9,r6[44]
80018dde:	f0 08 10 54 	mul	r8,r8,84
80018de2:	f2 08 00 08 	add	r8,r9,r8
80018de6:	2b 88       	sub	r8,-72
80018de8:	11 b8       	ld.ub	r8,r8[0x3]
80018dea:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018dee:	30 18       	mov	r8,1
80018df0:	f0 09 18 00 	cp.b	r9,r8
80018df4:	c0 51       	brne	80018dfe <writeSPI+0xae>
80018df6:	ee fc ff f8 	ld.w	r12,r7[-8]
80018dfa:	f0 16 00 eb 	mcall	r6[940]
}
80018dfe:	2f dd       	sub	sp,-12
80018e00:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018e04:	80 01       	ld.sh	r1,r0[0x0]
80018e06:	8b de       	st.w	r5[0x34],lr

80018e08 <SPItransmit>:

void SPItransmit(int spi_index) {
80018e08:	eb cd 40 c0 	pushm	r6-r7,lr
80018e0c:	1a 97       	mov	r7,sp
80018e0e:	20 1d       	sub	sp,4
80018e10:	4d 66       	lddpc	r6,80018f68 <SPItransmit+0x160>
80018e12:	1e 26       	rsub	r6,pc
80018e14:	ef 4c ff fc 	st.w	r7[-4],r12
 if (spi_buffers[spi_index].SPIoutBufferHead!=spi_buffers[spi_index].SPIoutBufferTail) 
80018e18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018e1c:	ec f9 00 2c 	ld.w	r9,r6[44]
80018e20:	f0 08 10 54 	mul	r8,r8,84
80018e24:	f2 08 00 08 	add	r8,r9,r8
80018e28:	2b c8       	sub	r8,-68
80018e2a:	11 a8       	ld.ub	r8,r8[0x2]
80018e2c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018e30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018e34:	ec fa 00 2c 	ld.w	r10,r6[44]
80018e38:	f0 08 10 54 	mul	r8,r8,84
80018e3c:	f4 08 00 08 	add	r8,r10,r8
80018e40:	2b c8       	sub	r8,-68
80018e42:	11 b8       	ld.ub	r8,r8[0x3]
80018e44:	5c 58       	castu.b	r8
80018e46:	f0 09 18 00 	cp.b	r9,r8
80018e4a:	c4 90       	breq	80018edc <SPItransmit+0xd4>
 {
    // read data from buffer and copy it to SPI unit
	spi_buffers[spi_index].spi->tdr = spi_buffers[spi_index].SPIOutBuffer[spi_buffers[spi_index].SPIoutBufferTail];
80018e4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018e50:	ec f9 00 2c 	ld.w	r9,r6[44]
80018e54:	f0 08 10 54 	mul	r8,r8,84
80018e58:	f2 08 00 08 	add	r8,r9,r8
80018e5c:	70 09       	ld.w	r9,r8[0x0]
80018e5e:	ee fa ff fc 	ld.w	r10,r7[-4]
80018e62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018e66:	ec fb 00 2c 	ld.w	r11,r6[44]
80018e6a:	f0 08 10 54 	mul	r8,r8,84
80018e6e:	f6 08 00 08 	add	r8,r11,r8
80018e72:	2b c8       	sub	r8,-68
80018e74:	11 b8       	ld.ub	r8,r8[0x3]
80018e76:	5c 58       	castu.b	r8
80018e78:	ec fb 00 2c 	ld.w	r11,r6[44]
80018e7c:	f4 0a 10 54 	mul	r10,r10,84
80018e80:	f6 0a 00 0a 	add	r10,r11,r10
80018e84:	f4 08 00 08 	add	r8,r10,r8
80018e88:	2f c8       	sub	r8,-4
80018e8a:	11 88       	ld.ub	r8,r8[0x0]
80018e8c:	5c 58       	castu.b	r8
80018e8e:	93 38       	st.w	r9[0xc],r8
    spi_buffers[spi_index].transmission_in_progress=1;    
80018e90:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018e94:	ec f9 00 2c 	ld.w	r9,r6[44]
80018e98:	f0 08 10 54 	mul	r8,r8,84
80018e9c:	f2 08 00 08 	add	r8,r9,r8
80018ea0:	f0 c9 ff b8 	sub	r9,r8,-72
80018ea4:	30 18       	mov	r8,1
80018ea6:	b2 a8       	st.b	r9[0x2],r8
    // update buffer index
    spi_buffers[spi_index].SPIoutBufferTail=  (spi_buffers[spi_index].SPIoutBufferTail+1)&SPI_BUFFER_MASK;
80018ea8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018eac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018eb0:	ec fa 00 2c 	ld.w	r10,r6[44]
80018eb4:	f0 08 10 54 	mul	r8,r8,84
80018eb8:	f4 08 00 08 	add	r8,r10,r8
80018ebc:	2b c8       	sub	r8,-68
80018ebe:	11 b8       	ld.ub	r8,r8[0x3]
80018ec0:	5c 58       	castu.b	r8
80018ec2:	2f f8       	sub	r8,-1
80018ec4:	5c 58       	castu.b	r8
80018ec6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80018eca:	ec fa 00 2c 	ld.w	r10,r6[44]
80018ece:	f2 09 10 54 	mul	r9,r9,84
80018ed2:	f4 09 00 09 	add	r9,r10,r9
80018ed6:	2b c9       	sub	r9,-68
80018ed8:	b2 b8       	st.b	r9[0x3],r8
80018eda:	c4 38       	rjmp	80018f60 <SPItransmit+0x158>
	//spi_enable(spi_buffers[spi_index].spi);

  } else {
    spi_buffers[spi_index].SPIoutBufferTail=spi_buffers[spi_index].SPIoutBufferHead;
80018edc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018ee0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018ee4:	ec fa 00 2c 	ld.w	r10,r6[44]
80018ee8:	f0 08 10 54 	mul	r8,r8,84
80018eec:	f4 08 00 08 	add	r8,r10,r8
80018ef0:	2b c8       	sub	r8,-68
80018ef2:	11 a8       	ld.ub	r8,r8[0x2]
80018ef4:	5c 58       	castu.b	r8
80018ef6:	ec fa 00 2c 	ld.w	r10,r6[44]
80018efa:	f2 09 10 54 	mul	r9,r9,84
80018efe:	f4 09 00 09 	add	r9,r10,r9
80018f02:	2b c9       	sub	r9,-68
80018f04:	b2 b8       	st.b	r9[0x3],r8
    //PORTB |= _BV(SPI_CS);	// pull chip select high to end transmission
	spi_deselect_device(spi_buffers[spi_index].spi, &spi_buffers[spi_index].adc_spi);
80018f06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018f0a:	f0 08 10 54 	mul	r8,r8,84
80018f0e:	f0 c9 ff b0 	sub	r9,r8,-80
80018f12:	ec f8 00 2c 	ld.w	r8,r6[44]
80018f16:	10 09       	add	r9,r8
80018f18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018f1c:	ec fa 00 2c 	ld.w	r10,r6[44]
80018f20:	f0 08 10 54 	mul	r8,r8,84
80018f24:	f4 08 00 08 	add	r8,r10,r8
80018f28:	70 08       	ld.w	r8,r8[0x0]
80018f2a:	12 9b       	mov	r11,r9
80018f2c:	10 9c       	mov	r12,r8
80018f2e:	fe b0 fb db 	rcall	800186e4 <spi_deselect_device>
    spi_buffers[spi_index].transmission_in_progress=0;
80018f32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018f36:	ec f9 00 2c 	ld.w	r9,r6[44]
80018f3a:	f0 08 10 54 	mul	r8,r8,84
80018f3e:	f2 08 00 08 	add	r8,r9,r8
80018f42:	f0 c9 ff b8 	sub	r9,r8,-72
80018f46:	30 08       	mov	r8,0
80018f48:	b2 a8       	st.b	r9[0x2],r8
	spi_buffers[spi_index].spi->idr =AVR32_SPI_IER_RDRF_MASK | AVR32_SPI_IER_TDRE_MASK;
80018f4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018f4e:	ec f9 00 2c 	ld.w	r9,r6[44]
80018f52:	f0 08 10 54 	mul	r8,r8,84
80018f56:	f2 08 00 08 	add	r8,r9,r8
80018f5a:	70 08       	ld.w	r8,r8[0x0]
80018f5c:	30 39       	mov	r9,3
80018f5e:	91 69       	st.w	r8[0x18],r9
    //SPCR&=~_BV(SPIE);
 }
}
80018f60:	2f fd       	sub	sp,-4
80018f62:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018f66:	00 00       	add	r0,r0
80018f68:	80 01       	ld.sh	r1,r0[0x0]
80018f6a:	8c 96       	ld.uh	r6,r6[0x2]

80018f6c <startSPI>:

/** initiates SPI transmission by sending first byte
*/
void startSPI(int spi_index) {
80018f6c:	eb cd 40 c0 	pushm	r6-r7,lr
80018f70:	1a 97       	mov	r7,sp
80018f72:	20 1d       	sub	sp,4
80018f74:	4a f6       	lddpc	r6,80019030 <startSPI+0xc4>
80018f76:	1e 26       	rsub	r6,pc
80018f78:	ef 4c ff fc 	st.w	r7[-4],r12
  // check flag if transmission is in progress
  if ((spi_buffers[spi_index].transmission_in_progress==0)
80018f7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018f80:	ec f9 00 2c 	ld.w	r9,r6[44]
80018f84:	f0 08 10 54 	mul	r8,r8,84
80018f88:	f2 08 00 08 	add	r8,r9,r8
80018f8c:	2b 88       	sub	r8,-72
80018f8e:	11 a8       	ld.ub	r8,r8[0x2]
80018f90:	5c 58       	castu.b	r8
80018f92:	c4 c1       	brne	8001902a <startSPI+0xbe>
	&&(spi_buffers[spi_index].SPIoutBufferHead!=spi_buffers[spi_index].SPIoutBufferTail)) {
80018f94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018f98:	ec f9 00 2c 	ld.w	r9,r6[44]
80018f9c:	f0 08 10 54 	mul	r8,r8,84
80018fa0:	f2 08 00 08 	add	r8,r9,r8
80018fa4:	2b c8       	sub	r8,-68
80018fa6:	11 a8       	ld.ub	r8,r8[0x2]
80018fa8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018fac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018fb0:	ec fa 00 2c 	ld.w	r10,r6[44]
80018fb4:	f0 08 10 54 	mul	r8,r8,84
80018fb8:	f4 08 00 08 	add	r8,r10,r8
80018fbc:	2b c8       	sub	r8,-68
80018fbe:	11 b8       	ld.ub	r8,r8[0x3]
80018fc0:	5c 58       	castu.b	r8

/** initiates SPI transmission by sending first byte
*/
void startSPI(int spi_index) {
  // check flag if transmission is in progress
  if ((spi_buffers[spi_index].transmission_in_progress==0)
80018fc2:	f0 09 18 00 	cp.b	r9,r8
80018fc6:	c3 20       	breq	8001902a <startSPI+0xbe>
	&&(spi_buffers[spi_index].SPIoutBufferHead!=spi_buffers[spi_index].SPIoutBufferTail)) {
    // if not, initiate transmission by sending first byte
    //!!!!PORTB &= ~_BV(SPI_CS);	// pull chip select low to start transmission
	spi_select_device(spi_buffers[spi_index].spi, &spi_buffers[spi_index].adc_spi);
80018fc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018fcc:	f0 08 10 54 	mul	r8,r8,84
80018fd0:	f0 c9 ff b0 	sub	r9,r8,-80
80018fd4:	ec f8 00 2c 	ld.w	r8,r6[44]
80018fd8:	10 09       	add	r9,r8
80018fda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018fde:	ec fa 00 2c 	ld.w	r10,r6[44]
80018fe2:	f0 08 10 54 	mul	r8,r8,84
80018fe6:	f4 08 00 08 	add	r8,r10,r8
80018fea:	70 08       	ld.w	r8,r8[0x0]
80018fec:	12 9b       	mov	r11,r9
80018fee:	10 9c       	mov	r12,r8
80018ff0:	fe b0 fb 62 	rcall	800186b4 <spi_select_device>

    spi_buffers[spi_index].transmission_in_progress=1;
80018ff4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018ff8:	ec f9 00 2c 	ld.w	r9,r6[44]
80018ffc:	f0 08 10 54 	mul	r8,r8,84
80019000:	f2 08 00 08 	add	r8,r9,r8
80019004:	f0 c9 ff b8 	sub	r9,r8,-72
80019008:	30 18       	mov	r8,1
8001900a:	b2 a8       	st.b	r9[0x2],r8
    // activate interrupt to initiate transmission
    //!!!!SPCR|=_BV(SPIE);
 	spi_buffers[spi_index].spi->ier = AVR32_SPI_IER_RDRF_MASK | AVR32_SPI_IER_TDRE_MASK;
8001900c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019010:	ec f9 00 2c 	ld.w	r9,r6[44]
80019014:	f0 08 10 54 	mul	r8,r8,84
80019018:	f2 08 00 08 	add	r8,r9,r8
8001901c:	70 08       	ld.w	r8,r8[0x0]
8001901e:	30 39       	mov	r9,3
80019020:	91 59       	st.w	r8[0x14],r9

    SPItransmit(spi_index);
80019022:	ee fc ff fc 	ld.w	r12,r7[-4]
80019026:	f0 16 01 2d 	mcall	r6[1204]
  }
}
8001902a:	2f fd       	sub	sp,-4
8001902c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019030:	80 01       	ld.sh	r1,r0[0x0]
80019032:	8d fa       	st.w	r6[0x3c],r10

80019034 <SPITransferFinished>:

int8_t SPITransferFinished(int spi_index) {
80019034:	eb cd 40 c0 	pushm	r6-r7,lr
80019038:	1a 97       	mov	r7,sp
8001903a:	20 1d       	sub	sp,4
8001903c:	49 16       	lddpc	r6,80019080 <SPITransferFinished+0x4c>
8001903e:	1e 26       	rsub	r6,pc
80019040:	ef 4c ff fc 	st.w	r7[-4],r12
	return (spi_buffers[spi_index].SPIoutBufferHead==spi_buffers[spi_index].SPIoutBufferTail);
80019044:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019048:	ec f9 00 2c 	ld.w	r9,r6[44]
8001904c:	f0 08 10 54 	mul	r8,r8,84
80019050:	f2 08 00 08 	add	r8,r9,r8
80019054:	2b c8       	sub	r8,-68
80019056:	11 a8       	ld.ub	r8,r8[0x2]
80019058:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001905c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019060:	ec fa 00 2c 	ld.w	r10,r6[44]
80019064:	f0 08 10 54 	mul	r8,r8,84
80019068:	f4 08 00 08 	add	r8,r10,r8
8001906c:	2b c8       	sub	r8,-68
8001906e:	11 b8       	ld.ub	r8,r8[0x3]
80019070:	5c 58       	castu.b	r8
80019072:	f0 09 18 00 	cp.b	r9,r8
80019076:	5f 08       	sreq	r8
}
80019078:	10 9c       	mov	r12,r8
8001907a:	2f fd       	sub	sp,-4
8001907c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019080:	80 01       	ld.sh	r1,r0[0x0]
80019082:	8e c2       	ld.uh	r2,r7[0x8]

80019084 <SPIFlushBuffer>:

/** waits until whole buffer is written to SPI bus
 *  automatically resumes sending if SPI interface was paused */
void SPIFlushBuffer(int spi_index) {
80019084:	eb cd 40 c0 	pushm	r6-r7,lr
80019088:	1a 97       	mov	r7,sp
8001908a:	20 1d       	sub	sp,4
8001908c:	49 36       	lddpc	r6,800190d8 <SPIFlushBuffer+0x54>
8001908e:	1e 26       	rsub	r6,pc
80019090:	ef 4c ff fc 	st.w	r7[-4],r12
 	resumeSPI(spi_index);
80019094:	ee fc ff fc 	ld.w	r12,r7[-4]
80019098:	f0 16 01 ec 	mcall	r6[1968]
	while (spi_buffers[spi_index].SPIoutBufferHead!=spi_buffers[spi_index].SPIoutBufferTail);
8001909c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800190a0:	ec f9 00 2c 	ld.w	r9,r6[44]
800190a4:	f0 08 10 54 	mul	r8,r8,84
800190a8:	f2 08 00 08 	add	r8,r9,r8
800190ac:	2b c8       	sub	r8,-68
800190ae:	11 a8       	ld.ub	r8,r8[0x2]
800190b0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800190b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800190b8:	ec fa 00 2c 	ld.w	r10,r6[44]
800190bc:	f0 08 10 54 	mul	r8,r8,84
800190c0:	f4 08 00 08 	add	r8,r10,r8
800190c4:	2b c8       	sub	r8,-68
800190c6:	11 b8       	ld.ub	r8,r8[0x3]
800190c8:	5c 58       	castu.b	r8
800190ca:	f0 09 18 00 	cp.b	r9,r8
800190ce:	ce 71       	brne	8001909c <SPIFlushBuffer+0x18>
}
800190d0:	2f fd       	sub	sp,-4
800190d2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800190d6:	00 00       	add	r0,r0
800190d8:	80 01       	ld.sh	r1,r0[0x0]
800190da:	8f 12       	st.w	r7[0x4],r2

800190dc <SPIBytesAvailable>:

/** returns the number of bytes in the incoming buffer
 */
uint8_t SPIBytesAvailable(int spi_index){
800190dc:	eb cd 40 c0 	pushm	r6-r7,lr
800190e0:	1a 97       	mov	r7,sp
800190e2:	20 1d       	sub	sp,4
800190e4:	49 36       	lddpc	r6,80019130 <SPIBytesAvailable+0x54>
800190e6:	1e 26       	rsub	r6,pc
800190e8:	ef 4c ff fc 	st.w	r7[-4],r12
  return (SPI_BUFFER_SIZE + spi_buffers[spi_index].SPIinBufferHead - spi_buffers[spi_index].SPIinBufferTail)&SPI_BUFFER_MASK;
800190ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800190f0:	ec f9 00 2c 	ld.w	r9,r6[44]
800190f4:	f0 08 10 54 	mul	r8,r8,84
800190f8:	f2 08 00 08 	add	r8,r9,r8
800190fc:	2b c8       	sub	r8,-68
800190fe:	11 88       	ld.ub	r8,r8[0x0]
80019100:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80019104:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019108:	ec fa 00 2c 	ld.w	r10,r6[44]
8001910c:	f0 08 10 54 	mul	r8,r8,84
80019110:	f4 08 00 08 	add	r8,r10,r8
80019114:	2b c8       	sub	r8,-68
80019116:	11 98       	ld.ub	r8,r8[0x1]
80019118:	5c 58       	castu.b	r8
8001911a:	f2 08 01 08 	sub	r8,r9,r8
8001911e:	5c 58       	castu.b	r8
80019120:	2e 08       	sub	r8,-32
80019122:	5c 58       	castu.b	r8
80019124:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
}
80019128:	10 9c       	mov	r12,r8
8001912a:	2f fd       	sub	sp,-4
8001912c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019130:	80 01       	ld.sh	r1,r0[0x0]
80019132:	8f 6a       	st.w	r7[0x18],r10

80019134 <spi_handler>:





void spi_handler(int spi_index) {
80019134:	eb cd 40 c0 	pushm	r6-r7,lr
80019138:	1a 97       	mov	r7,sp
8001913a:	20 2d       	sub	sp,8
8001913c:	4d e6       	lddpc	r6,800192b4 <spi_handler+0x180>
8001913e:	1e 26       	rsub	r6,pc
80019140:	ef 4c ff f8 	st.w	r7[-8],r12
  uint8_t inData;
  uint8_t tmp;
  inData=spi_buffers[spi_index].spi->rdr;
80019144:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019148:	ec f9 00 2c 	ld.w	r9,r6[44]
8001914c:	f0 08 10 54 	mul	r8,r8,84
80019150:	f2 08 00 08 	add	r8,r9,r8
80019154:	70 08       	ld.w	r8,r8[0x0]
80019156:	70 28       	ld.w	r8,r8[0x8]
80019158:	ef 68 ff fe 	st.b	r7[-2],r8

  if ((spi_buffers[spi_index].spi->sr & AVR32_SPI_SR_TDRE_MASK)!=0) {
8001915c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019160:	ec f9 00 2c 	ld.w	r9,r6[44]
80019164:	f0 08 10 54 	mul	r8,r8,84
80019168:	f2 08 00 08 	add	r8,r9,r8
8001916c:	70 08       	ld.w	r8,r8[0x0]
8001916e:	70 48       	ld.w	r8,r8[0x10]
80019170:	e2 18 00 02 	andl	r8,0x2,COH
80019174:	c0 50       	breq	8001917e <spi_handler+0x4a>
	// initiate transfer if necessary
	SPItransmit(spi_index);
80019176:	ee fc ff f8 	ld.w	r12,r7[-8]
8001917a:	f0 16 01 2d 	mcall	r6[1204]
  }	
  // only process received data when receiver is activated
  if ((spi_buffers[spi_index].spiReceiverOn==1)&& ((spi_buffers[spi_index].spi->sr & AVR32_SPI_SR_RDRF_MASK)!=0)) {
8001917e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019182:	ec f9 00 2c 	ld.w	r9,r6[44]
80019186:	f0 08 10 54 	mul	r8,r8,84
8001918a:	f2 08 00 08 	add	r8,r9,r8
8001918e:	2b 88       	sub	r8,-72
80019190:	11 88       	ld.ub	r8,r8[0x0]
80019192:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80019196:	30 18       	mov	r8,1
80019198:	f0 09 18 00 	cp.b	r9,r8
8001919c:	e0 81 00 88 	brne	800192ac <spi_handler+0x178>
800191a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800191a4:	ec f9 00 2c 	ld.w	r9,r6[44]
800191a8:	f0 08 10 54 	mul	r8,r8,84
800191ac:	f2 08 00 08 	add	r8,r9,r8
800191b0:	70 08       	ld.w	r8,r8[0x0]
800191b2:	70 48       	ld.w	r8,r8[0x10]
800191b4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800191b8:	5c 58       	castu.b	r8
800191ba:	c7 90       	breq	800192ac <spi_handler+0x178>
	 // read incoming data from SPI port
	spi_buffers[spi_index].traffic++;
800191bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800191c0:	ec fa 00 2c 	ld.w	r10,r6[44]
800191c4:	f0 09 10 54 	mul	r9,r8,84
800191c8:	f4 09 00 09 	add	r9,r10,r9
800191cc:	2b 89       	sub	r9,-72
800191ce:	13 99       	ld.ub	r9,r9[0x1]
800191d0:	5c 59       	castu.b	r9
800191d2:	2f f9       	sub	r9,-1
800191d4:	5c 59       	castu.b	r9
800191d6:	ec fa 00 2c 	ld.w	r10,r6[44]
800191da:	f0 08 10 54 	mul	r8,r8,84
800191de:	f4 08 00 08 	add	r8,r10,r8
800191e2:	f0 ca ff b8 	sub	r10,r8,-72
800191e6:	12 98       	mov	r8,r9
800191e8:	b4 98       	st.b	r10[0x1],r8

    tmp=(spi_buffers[spi_index].SPIinBufferHead+1)&SPI_BUFFER_MASK;
800191ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800191ee:	ec f9 00 2c 	ld.w	r9,r6[44]
800191f2:	f0 08 10 54 	mul	r8,r8,84
800191f6:	f2 08 00 08 	add	r8,r9,r8
800191fa:	2b c8       	sub	r8,-68
800191fc:	11 88       	ld.ub	r8,r8[0x0]
800191fe:	5c 58       	castu.b	r8
80019200:	2f f8       	sub	r8,-1
80019202:	5c 58       	castu.b	r8
80019204:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80019208:	ef 68 ff ff 	st.b	r7[-1],r8
    
    if (tmp==spi_buffers[spi_index].SPIinBufferTail) {
8001920c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019210:	ec f9 00 2c 	ld.w	r9,r6[44]
80019214:	f0 08 10 54 	mul	r8,r8,84
80019218:	f2 08 00 08 	add	r8,r9,r8
8001921c:	2b c8       	sub	r8,-68
8001921e:	11 98       	ld.ub	r8,r8[0x1]
80019220:	5c 58       	castu.b	r8
80019222:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80019226:	f0 09 18 00 	cp.b	r9,r8
8001922a:	c1 a1       	brne	8001925e <spi_handler+0x12a>
      //error: receive buffer overflow!!
      // lose old incoming data at the end of the buffer
      spi_buffers[spi_index].SPIinBufferTail=(spi_buffers[spi_index].SPIinBufferTail+1)&SPI_BUFFER_MASK;
8001922c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019230:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019234:	ec fa 00 2c 	ld.w	r10,r6[44]
80019238:	f0 08 10 54 	mul	r8,r8,84
8001923c:	f4 08 00 08 	add	r8,r10,r8
80019240:	2b c8       	sub	r8,-68
80019242:	11 98       	ld.ub	r8,r8[0x1]
80019244:	5c 58       	castu.b	r8
80019246:	2f f8       	sub	r8,-1
80019248:	5c 58       	castu.b	r8
8001924a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8001924e:	ec fa 00 2c 	ld.w	r10,r6[44]
80019252:	f2 09 10 54 	mul	r9,r9,84
80019256:	f4 09 00 09 	add	r9,r10,r9
8001925a:	2b c9       	sub	r9,-68
8001925c:	b2 98       	st.b	r9[0x1],r8
    } 
    // store incoming data in buffer
    spi_buffers[spi_index].SPIInBuffer[spi_buffers[spi_index].SPIinBufferHead] = inData;
8001925e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019262:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019266:	ec fa 00 2c 	ld.w	r10,r6[44]
8001926a:	f0 08 10 54 	mul	r8,r8,84
8001926e:	f4 08 00 08 	add	r8,r10,r8
80019272:	2b c8       	sub	r8,-68
80019274:	11 88       	ld.ub	r8,r8[0x0]
80019276:	5c 58       	castu.b	r8
80019278:	ec fa 00 2c 	ld.w	r10,r6[44]
8001927c:	f2 09 10 54 	mul	r9,r9,84
80019280:	f4 09 00 09 	add	r9,r10,r9
80019284:	f2 08 00 08 	add	r8,r9,r8
80019288:	f0 c9 ff dc 	sub	r9,r8,-36
8001928c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80019290:	b2 88       	st.b	r9[0x0],r8
    // move head pointer forward
    spi_buffers[spi_index].SPIinBufferHead=tmp;
80019292:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019296:	ec f9 00 2c 	ld.w	r9,r6[44]
8001929a:	f0 08 10 54 	mul	r8,r8,84
8001929e:	f2 08 00 08 	add	r8,r9,r8
800192a2:	f0 c9 ff bc 	sub	r9,r8,-68
800192a6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800192aa:	b2 88       	st.b	r9[0x0],r8
  
  }
    
}
800192ac:	2f ed       	sub	sp,-8
800192ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800192b2:	00 00       	add	r0,r0
800192b4:	80 01       	ld.sh	r1,r0[0x0]
800192b6:	8f c2       	st.w	r7[0x30],r2

800192b8 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
800192b8:	eb cd 40 80 	pushm	r7,lr
800192bc:	1a 97       	mov	r7,sp
800192be:	20 1d       	sub	sp,4
800192c0:	18 98       	mov	r8,r12
800192c2:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
800192c6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800192ca:	58 38       	cp.w	r8,3
800192cc:	c1 20       	breq	800192f0 <osc_get_rate+0x38>
800192ce:	e0 89 00 07 	brgt	800192dc <osc_get_rate+0x24>
800192d2:	58 08       	cp.w	r8,0
800192d4:	c0 90       	breq	800192e6 <osc_get_rate+0x2e>
800192d6:	58 28       	cp.w	r8,2
800192d8:	c0 f0       	breq	800192f6 <osc_get_rate+0x3e>
800192da:	c1 b8       	rjmp	80019310 <osc_get_rate+0x58>
800192dc:	58 48       	cp.w	r8,4
800192de:	c1 10       	breq	80019300 <osc_get_rate+0x48>
800192e0:	58 58       	cp.w	r8,5
800192e2:	c1 40       	breq	8001930a <osc_get_rate+0x52>
800192e4:	c1 68       	rjmp	80019310 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
800192e6:	e0 68 24 00 	mov	r8,9216
800192ea:	ea 18 00 f4 	orh	r8,0xf4
800192ee:	c1 28       	rjmp	80019312 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
800192f0:	e0 68 80 00 	mov	r8,32768
800192f4:	c0 f8       	rjmp	80019312 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
800192f6:	e0 68 12 00 	mov	r8,4608
800192fa:	ea 18 00 7a 	orh	r8,0x7a
800192fe:	c0 a8       	rjmp	80019312 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
80019300:	e0 68 0e 00 	mov	r8,3584
80019304:	ea 18 07 27 	orh	r8,0x727
80019308:	c0 58       	rjmp	80019312 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8001930a:	e0 78 c1 38 	mov	r8,115000
8001930e:	c0 28       	rjmp	80019312 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
80019310:	30 08       	mov	r8,0
	}
}
80019312:	10 9c       	mov	r12,r8
80019314:	2f fd       	sub	sp,-4
80019316:	e3 cd 80 80 	ldm	sp++,r7,pc

8001931a <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8001931a:	eb cd 40 c0 	pushm	r6-r7,lr
8001931e:	1a 97       	mov	r7,sp
80019320:	48 56       	lddpc	r6,80019334 <sysclk_get_main_hz+0x1a>
80019322:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
80019324:	30 0c       	mov	r12,0
80019326:	cc 9f       	rcall	800192b8 <osc_get_rate>
80019328:	18 98       	mov	r8,r12
8001932a:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8001932c:	10 9c       	mov	r12,r8
8001932e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019332:	00 00       	add	r0,r0
80019334:	80 01       	ld.sh	r1,r0[0x0]
80019336:	91 a6       	st.w	r8[0x28],r6

80019338 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
80019338:	eb cd 40 c0 	pushm	r6-r7,lr
8001933c:	1a 97       	mov	r7,sp
8001933e:	48 46       	lddpc	r6,8001934c <sysclk_get_cpu_hz+0x14>
80019340:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
80019342:	ce cf       	rcall	8001931a <sysclk_get_main_hz>
80019344:	18 98       	mov	r8,r12
}
80019346:	10 9c       	mov	r12,r8
80019348:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001934c:	80 01       	ld.sh	r1,r0[0x0]
8001934e:	91 c4       	st.w	r8[0x30],r4

80019350 <uart_handler_0>:
				usart_opt[UID].uart_device.uart->idr=AVR32_USART_IDR_TXRDY_MASK;\
		}\
	}\
}			

ISR(uart_handler_0, usart_opt[0].uart_device.IRQ, AVR32_INTC_INTLEV_INT1) {\
80019350:	eb cd 40 c0 	pushm	r6-r7,lr
80019354:	1a 97       	mov	r7,sp
80019356:	20 2d       	sub	sp,8
80019358:	4b 26       	lddpc	r6,80019420 <uart_handler_0+0xd0>
8001935a:	1e 26       	rsub	r6,pc
	uint8_t c1;\
	int csr=usart_opt[0].uart_device.uart->csr;\
8001935c:	ec f8 00 34 	ld.w	r8,r6[52]
80019360:	70 18       	ld.w	r8,r8[0x4]
80019362:	70 58       	ld.w	r8,r8[0x14]
				usart_opt[UID].uart_device.uart->idr=AVR32_USART_IDR_TXRDY_MASK;\
		}\
	}\
}			

ISR(uart_handler_0, usart_opt[0].uart_device.IRQ, AVR32_INTC_INTLEV_INT1) {\
80019364:	ef 48 ff fc 	st.w	r7[-4],r8
	uint8_t c1;\
	int csr=usart_opt[0].uart_device.uart->csr;\
	if (csr & AVR32_USART_CSR_RXRDY_MASK) {\
80019368:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001936c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80019370:	5c 58       	castu.b	r8
80019372:	c2 70       	breq	800193c0 <uart_handler_0+0x70>
		c1=(uint8_t)usart_opt[0].uart_device.uart->rhr;\
80019374:	ec f8 00 34 	ld.w	r8,r6[52]
80019378:	70 18       	ld.w	r8,r8[0x4]
8001937a:	70 68       	ld.w	r8,r8[0x18]
8001937c:	ef 68 ff fb 	st.b	r7[-5],r8
		if (usart_opt[0].uart_device.receive_stream==NULL) {\
80019380:	ec f8 00 34 	ld.w	r8,r6[52]
80019384:	f0 f8 02 14 	ld.w	r8,r8[532]
80019388:	58 08       	cp.w	r8,0
8001938a:	c0 c1       	brne	800193a2 <uart_handler_0+0x52>
			buffer_put(&(usart_opt[0].uart_device.receive_buffer), c1);\
8001938c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80019390:	ec f8 00 34 	ld.w	r8,r6[52]
80019394:	f0 c8 fe f1 	sub	r8,r8,-271
80019398:	12 9b       	mov	r11,r9
8001939a:	10 9c       	mov	r12,r8
8001939c:	f0 16 00 53 	mcall	r6[332]
800193a0:	c1 08       	rjmp	800193c0 <uart_handler_0+0x70>
		} else {\
			usart_opt[0].uart_device.receive_stream->put(usart_opt[0].uart_device.receive_stream->data, c1);\
800193a2:	ec f8 00 34 	ld.w	r8,r6[52]
800193a6:	f0 f8 02 14 	ld.w	r8,r8[532]
800193aa:	70 18       	ld.w	r8,r8[0x4]
800193ac:	ef 3a ff fb 	ld.ub	r10,r7[-5]
800193b0:	ec f9 00 34 	ld.w	r9,r6[52]
800193b4:	f2 f9 02 14 	ld.w	r9,r9[532]
800193b8:	72 59       	ld.w	r9,r9[0x14]
800193ba:	14 9b       	mov	r11,r10
800193bc:	12 9c       	mov	r12,r9
800193be:	5d 18       	icall	r8
		}\
	}\
	if (csr & AVR32_USART_CSR_TXRDY_MASK) {\
800193c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800193c4:	e2 18 00 02 	andl	r8,0x2,COH
800193c8:	c2 80       	breq	80019418 <uart_handler_0+0xc8>
		if (buffer_bytes_available(&(usart_opt[0].uart_device.transmit_buffer))>0) {\
800193ca:	ec f8 00 34 	ld.w	r8,r6[52]
800193ce:	2f 48       	sub	r8,-12
800193d0:	10 9c       	mov	r12,r8
800193d2:	f0 16 00 2e 	mcall	r6[184]
800193d6:	18 98       	mov	r8,r12
800193d8:	58 08       	cp.w	r8,0
800193da:	e0 8a 00 11 	brle	800193fc <uart_handler_0+0xac>
			c1=buffer_get(&(usart_opt[0].uart_device.transmit_buffer));\
800193de:	ec f8 00 34 	ld.w	r8,r6[52]
800193e2:	2f 48       	sub	r8,-12
800193e4:	10 9c       	mov	r12,r8
800193e6:	f0 16 00 44 	mcall	r6[272]
800193ea:	18 98       	mov	r8,r12
800193ec:	ef 68 ff fb 	st.b	r7[-5],r8
			usart_opt[0].uart_device.uart->thr=c1;\
800193f0:	ec f8 00 34 	ld.w	r8,r6[52]
800193f4:	70 18       	ld.w	r8,r8[0x4]
800193f6:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800193fa:	91 79       	st.w	r8[0x1c],r9
		}\
		if (buffer_bytes_available(&(usart_opt[0].uart_device.transmit_buffer))==0) {\
800193fc:	ec f8 00 34 	ld.w	r8,r6[52]
80019400:	2f 48       	sub	r8,-12
80019402:	10 9c       	mov	r12,r8
80019404:	f0 16 00 2e 	mcall	r6[184]
80019408:	18 98       	mov	r8,r12
8001940a:	58 08       	cp.w	r8,0
8001940c:	c0 61       	brne	80019418 <uart_handler_0+0xc8>
				usart_opt[0].uart_device.uart->idr=AVR32_USART_IDR_TXRDY_MASK;\
8001940e:	ec f8 00 34 	ld.w	r8,r6[52]
80019412:	70 18       	ld.w	r8,r8[0x4]
80019414:	30 29       	mov	r9,2
80019416:	91 39       	st.w	r8[0xc],r9
				usart_opt[UID].uart_device.uart->idr=AVR32_USART_IDR_TXRDY_MASK;\
		}\
	}\
}			

ISR(uart_handler_0, usart_opt[0].uart_device.IRQ, AVR32_INTC_INTLEV_INT1) {\
80019418:	2f ed       	sub	sp,-8
8001941a:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8001941e:	d6 03       	rete
80019420:	80 01       	ld.sh	r1,r0[0x0]
80019422:	91 de       	st.w	r8[0x34],lr

80019424 <uart_handler_1>:
	}\
}			

// define interrupt handlers using above macro
//UART_HANDLER(0);
UART_HANDLER(1);
80019424:	eb cd 40 c0 	pushm	r6-r7,lr
80019428:	1a 97       	mov	r7,sp
8001942a:	20 2d       	sub	sp,8
8001942c:	4b 66       	lddpc	r6,80019504 <uart_handler_1+0xe0>
8001942e:	1e 26       	rsub	r6,pc
80019430:	ec f8 00 34 	ld.w	r8,r6[52]
80019434:	f0 f8 02 2c 	ld.w	r8,r8[556]
80019438:	70 58       	ld.w	r8,r8[0x14]
8001943a:	ef 48 ff fc 	st.w	r7[-4],r8
8001943e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019442:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80019446:	5c 58       	castu.b	r8
80019448:	c2 80       	breq	80019498 <uart_handler_1+0x74>
8001944a:	ec f8 00 34 	ld.w	r8,r6[52]
8001944e:	f0 f8 02 2c 	ld.w	r8,r8[556]
80019452:	70 68       	ld.w	r8,r8[0x18]
80019454:	ef 68 ff fb 	st.b	r7[-5],r8
80019458:	ec f8 00 34 	ld.w	r8,r6[52]
8001945c:	f0 f8 04 3c 	ld.w	r8,r8[1084]
80019460:	58 08       	cp.w	r8,0
80019462:	c0 c1       	brne	8001947a <uart_handler_1+0x56>
80019464:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80019468:	ec f8 00 34 	ld.w	r8,r6[52]
8001946c:	f0 c8 fc c9 	sub	r8,r8,-823
80019470:	12 9b       	mov	r11,r9
80019472:	10 9c       	mov	r12,r8
80019474:	f0 16 00 53 	mcall	r6[332]
80019478:	c1 08       	rjmp	80019498 <uart_handler_1+0x74>
8001947a:	ec f8 00 34 	ld.w	r8,r6[52]
8001947e:	f0 f8 04 3c 	ld.w	r8,r8[1084]
80019482:	70 18       	ld.w	r8,r8[0x4]
80019484:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80019488:	ec f9 00 34 	ld.w	r9,r6[52]
8001948c:	f2 f9 04 3c 	ld.w	r9,r9[1084]
80019490:	72 59       	ld.w	r9,r9[0x14]
80019492:	14 9b       	mov	r11,r10
80019494:	12 9c       	mov	r12,r9
80019496:	5d 18       	icall	r8
80019498:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001949c:	e2 18 00 02 	andl	r8,0x2,COH
800194a0:	c2 d0       	breq	800194fa <uart_handler_1+0xd6>
800194a2:	ec f8 00 34 	ld.w	r8,r6[52]
800194a6:	f0 c8 fd cc 	sub	r8,r8,-564
800194aa:	10 9c       	mov	r12,r8
800194ac:	f0 16 00 2e 	mcall	r6[184]
800194b0:	18 98       	mov	r8,r12
800194b2:	58 08       	cp.w	r8,0
800194b4:	e0 8a 00 13 	brle	800194da <uart_handler_1+0xb6>
800194b8:	ec f8 00 34 	ld.w	r8,r6[52]
800194bc:	f0 c8 fd cc 	sub	r8,r8,-564
800194c0:	10 9c       	mov	r12,r8
800194c2:	f0 16 00 44 	mcall	r6[272]
800194c6:	18 98       	mov	r8,r12
800194c8:	ef 68 ff fb 	st.b	r7[-5],r8
800194cc:	ec f8 00 34 	ld.w	r8,r6[52]
800194d0:	f0 f8 02 2c 	ld.w	r8,r8[556]
800194d4:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800194d8:	91 79       	st.w	r8[0x1c],r9
800194da:	ec f8 00 34 	ld.w	r8,r6[52]
800194de:	f0 c8 fd cc 	sub	r8,r8,-564
800194e2:	10 9c       	mov	r12,r8
800194e4:	f0 16 00 2e 	mcall	r6[184]
800194e8:	18 98       	mov	r8,r12
800194ea:	58 08       	cp.w	r8,0
800194ec:	c0 71       	brne	800194fa <uart_handler_1+0xd6>
800194ee:	ec f8 00 34 	ld.w	r8,r6[52]
800194f2:	f0 f8 02 2c 	ld.w	r8,r8[556]
800194f6:	30 29       	mov	r9,2
800194f8:	91 39       	st.w	r8[0xc],r9
800194fa:	2f ed       	sub	sp,-8
800194fc:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80019500:	d6 03       	rete
80019502:	00 00       	add	r0,r0
80019504:	80 01       	ld.sh	r1,r0[0x0]
80019506:	92 b2       	ld.uh	r2,r9[0x6]

80019508 <uart_handler_2>:
UART_HANDLER(2);
80019508:	eb cd 40 c0 	pushm	r6-r7,lr
8001950c:	1a 97       	mov	r7,sp
8001950e:	20 2d       	sub	sp,8
80019510:	4b 66       	lddpc	r6,800195e8 <uart_handler_2+0xe0>
80019512:	1e 26       	rsub	r6,pc
80019514:	ec f8 00 34 	ld.w	r8,r6[52]
80019518:	f0 f8 04 54 	ld.w	r8,r8[1108]
8001951c:	70 58       	ld.w	r8,r8[0x14]
8001951e:	ef 48 ff fc 	st.w	r7[-4],r8
80019522:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019526:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001952a:	5c 58       	castu.b	r8
8001952c:	c2 80       	breq	8001957c <uart_handler_2+0x74>
8001952e:	ec f8 00 34 	ld.w	r8,r6[52]
80019532:	f0 f8 04 54 	ld.w	r8,r8[1108]
80019536:	70 68       	ld.w	r8,r8[0x18]
80019538:	ef 68 ff fb 	st.b	r7[-5],r8
8001953c:	ec f8 00 34 	ld.w	r8,r6[52]
80019540:	f0 f8 06 64 	ld.w	r8,r8[1636]
80019544:	58 08       	cp.w	r8,0
80019546:	c0 c1       	brne	8001955e <uart_handler_2+0x56>
80019548:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001954c:	ec f8 00 34 	ld.w	r8,r6[52]
80019550:	f0 c8 fa a1 	sub	r8,r8,-1375
80019554:	12 9b       	mov	r11,r9
80019556:	10 9c       	mov	r12,r8
80019558:	f0 16 00 53 	mcall	r6[332]
8001955c:	c1 08       	rjmp	8001957c <uart_handler_2+0x74>
8001955e:	ec f8 00 34 	ld.w	r8,r6[52]
80019562:	f0 f8 06 64 	ld.w	r8,r8[1636]
80019566:	70 18       	ld.w	r8,r8[0x4]
80019568:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8001956c:	ec f9 00 34 	ld.w	r9,r6[52]
80019570:	f2 f9 06 64 	ld.w	r9,r9[1636]
80019574:	72 59       	ld.w	r9,r9[0x14]
80019576:	14 9b       	mov	r11,r10
80019578:	12 9c       	mov	r12,r9
8001957a:	5d 18       	icall	r8
8001957c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019580:	e2 18 00 02 	andl	r8,0x2,COH
80019584:	c2 d0       	breq	800195de <uart_handler_2+0xd6>
80019586:	ec f8 00 34 	ld.w	r8,r6[52]
8001958a:	f0 c8 fb a4 	sub	r8,r8,-1116
8001958e:	10 9c       	mov	r12,r8
80019590:	f0 16 00 2e 	mcall	r6[184]
80019594:	18 98       	mov	r8,r12
80019596:	58 08       	cp.w	r8,0
80019598:	e0 8a 00 13 	brle	800195be <uart_handler_2+0xb6>
8001959c:	ec f8 00 34 	ld.w	r8,r6[52]
800195a0:	f0 c8 fb a4 	sub	r8,r8,-1116
800195a4:	10 9c       	mov	r12,r8
800195a6:	f0 16 00 44 	mcall	r6[272]
800195aa:	18 98       	mov	r8,r12
800195ac:	ef 68 ff fb 	st.b	r7[-5],r8
800195b0:	ec f8 00 34 	ld.w	r8,r6[52]
800195b4:	f0 f8 04 54 	ld.w	r8,r8[1108]
800195b8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800195bc:	91 79       	st.w	r8[0x1c],r9
800195be:	ec f8 00 34 	ld.w	r8,r6[52]
800195c2:	f0 c8 fb a4 	sub	r8,r8,-1116
800195c6:	10 9c       	mov	r12,r8
800195c8:	f0 16 00 2e 	mcall	r6[184]
800195cc:	18 98       	mov	r8,r12
800195ce:	58 08       	cp.w	r8,0
800195d0:	c0 71       	brne	800195de <uart_handler_2+0xd6>
800195d2:	ec f8 00 34 	ld.w	r8,r6[52]
800195d6:	f0 f8 04 54 	ld.w	r8,r8[1108]
800195da:	30 29       	mov	r9,2
800195dc:	91 39       	st.w	r8[0xc],r9
800195de:	2f ed       	sub	sp,-8
800195e0:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800195e4:	d6 03       	rete
800195e6:	00 00       	add	r0,r0
800195e8:	80 01       	ld.sh	r1,r0[0x0]
800195ea:	93 96       	st.w	r9[0x24],r6

800195ec <uart_handler_3>:
UART_HANDLER(3);
800195ec:	eb cd 40 c0 	pushm	r6-r7,lr
800195f0:	1a 97       	mov	r7,sp
800195f2:	20 2d       	sub	sp,8
800195f4:	4b 66       	lddpc	r6,800196cc <uart_handler_3+0xe0>
800195f6:	1e 26       	rsub	r6,pc
800195f8:	ec f8 00 34 	ld.w	r8,r6[52]
800195fc:	f0 f8 06 7c 	ld.w	r8,r8[1660]
80019600:	70 58       	ld.w	r8,r8[0x14]
80019602:	ef 48 ff fc 	st.w	r7[-4],r8
80019606:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001960a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001960e:	5c 58       	castu.b	r8
80019610:	c2 80       	breq	80019660 <uart_handler_3+0x74>
80019612:	ec f8 00 34 	ld.w	r8,r6[52]
80019616:	f0 f8 06 7c 	ld.w	r8,r8[1660]
8001961a:	70 68       	ld.w	r8,r8[0x18]
8001961c:	ef 68 ff fb 	st.b	r7[-5],r8
80019620:	ec f8 00 34 	ld.w	r8,r6[52]
80019624:	f0 f8 08 8c 	ld.w	r8,r8[2188]
80019628:	58 08       	cp.w	r8,0
8001962a:	c0 c1       	brne	80019642 <uart_handler_3+0x56>
8001962c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80019630:	ec f8 00 34 	ld.w	r8,r6[52]
80019634:	f0 c8 f8 79 	sub	r8,r8,-1927
80019638:	12 9b       	mov	r11,r9
8001963a:	10 9c       	mov	r12,r8
8001963c:	f0 16 00 53 	mcall	r6[332]
80019640:	c1 08       	rjmp	80019660 <uart_handler_3+0x74>
80019642:	ec f8 00 34 	ld.w	r8,r6[52]
80019646:	f0 f8 08 8c 	ld.w	r8,r8[2188]
8001964a:	70 18       	ld.w	r8,r8[0x4]
8001964c:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80019650:	ec f9 00 34 	ld.w	r9,r6[52]
80019654:	f2 f9 08 8c 	ld.w	r9,r9[2188]
80019658:	72 59       	ld.w	r9,r9[0x14]
8001965a:	14 9b       	mov	r11,r10
8001965c:	12 9c       	mov	r12,r9
8001965e:	5d 18       	icall	r8
80019660:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019664:	e2 18 00 02 	andl	r8,0x2,COH
80019668:	c2 d0       	breq	800196c2 <uart_handler_3+0xd6>
8001966a:	ec f8 00 34 	ld.w	r8,r6[52]
8001966e:	f0 c8 f9 7c 	sub	r8,r8,-1668
80019672:	10 9c       	mov	r12,r8
80019674:	f0 16 00 2e 	mcall	r6[184]
80019678:	18 98       	mov	r8,r12
8001967a:	58 08       	cp.w	r8,0
8001967c:	e0 8a 00 13 	brle	800196a2 <uart_handler_3+0xb6>
80019680:	ec f8 00 34 	ld.w	r8,r6[52]
80019684:	f0 c8 f9 7c 	sub	r8,r8,-1668
80019688:	10 9c       	mov	r12,r8
8001968a:	f0 16 00 44 	mcall	r6[272]
8001968e:	18 98       	mov	r8,r12
80019690:	ef 68 ff fb 	st.b	r7[-5],r8
80019694:	ec f8 00 34 	ld.w	r8,r6[52]
80019698:	f0 f8 06 7c 	ld.w	r8,r8[1660]
8001969c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800196a0:	91 79       	st.w	r8[0x1c],r9
800196a2:	ec f8 00 34 	ld.w	r8,r6[52]
800196a6:	f0 c8 f9 7c 	sub	r8,r8,-1668
800196aa:	10 9c       	mov	r12,r8
800196ac:	f0 16 00 2e 	mcall	r6[184]
800196b0:	18 98       	mov	r8,r12
800196b2:	58 08       	cp.w	r8,0
800196b4:	c0 71       	brne	800196c2 <uart_handler_3+0xd6>
800196b6:	ec f8 00 34 	ld.w	r8,r6[52]
800196ba:	f0 f8 06 7c 	ld.w	r8,r8[1660]
800196be:	30 29       	mov	r9,2
800196c0:	91 39       	st.w	r8[0xc],r9
800196c2:	2f ed       	sub	sp,-8
800196c4:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800196c8:	d6 03       	rete
800196ca:	00 00       	add	r0,r0
800196cc:	80 01       	ld.sh	r1,r0[0x0]
800196ce:	94 7a       	ld.sh	r10,r10[0xe]

800196d0 <uart_handler_4>:
UART_HANDLER(4);
800196d0:	eb cd 40 c0 	pushm	r6-r7,lr
800196d4:	1a 97       	mov	r7,sp
800196d6:	20 2d       	sub	sp,8
800196d8:	4b 66       	lddpc	r6,800197b0 <uart_handler_4+0xe0>
800196da:	1e 26       	rsub	r6,pc
800196dc:	ec f8 00 34 	ld.w	r8,r6[52]
800196e0:	f0 f8 08 a4 	ld.w	r8,r8[2212]
800196e4:	70 58       	ld.w	r8,r8[0x14]
800196e6:	ef 48 ff fc 	st.w	r7[-4],r8
800196ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800196ee:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800196f2:	5c 58       	castu.b	r8
800196f4:	c2 80       	breq	80019744 <uart_handler_4+0x74>
800196f6:	ec f8 00 34 	ld.w	r8,r6[52]
800196fa:	f0 f8 08 a4 	ld.w	r8,r8[2212]
800196fe:	70 68       	ld.w	r8,r8[0x18]
80019700:	ef 68 ff fb 	st.b	r7[-5],r8
80019704:	ec f8 00 34 	ld.w	r8,r6[52]
80019708:	f0 f8 0a b4 	ld.w	r8,r8[2740]
8001970c:	58 08       	cp.w	r8,0
8001970e:	c0 c1       	brne	80019726 <uart_handler_4+0x56>
80019710:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80019714:	ec f8 00 34 	ld.w	r8,r6[52]
80019718:	f0 c8 f6 51 	sub	r8,r8,-2479
8001971c:	12 9b       	mov	r11,r9
8001971e:	10 9c       	mov	r12,r8
80019720:	f0 16 00 53 	mcall	r6[332]
80019724:	c1 08       	rjmp	80019744 <uart_handler_4+0x74>
80019726:	ec f8 00 34 	ld.w	r8,r6[52]
8001972a:	f0 f8 0a b4 	ld.w	r8,r8[2740]
8001972e:	70 18       	ld.w	r8,r8[0x4]
80019730:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80019734:	ec f9 00 34 	ld.w	r9,r6[52]
80019738:	f2 f9 0a b4 	ld.w	r9,r9[2740]
8001973c:	72 59       	ld.w	r9,r9[0x14]
8001973e:	14 9b       	mov	r11,r10
80019740:	12 9c       	mov	r12,r9
80019742:	5d 18       	icall	r8
80019744:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019748:	e2 18 00 02 	andl	r8,0x2,COH
8001974c:	c2 d0       	breq	800197a6 <uart_handler_4+0xd6>
8001974e:	ec f8 00 34 	ld.w	r8,r6[52]
80019752:	f0 c8 f7 54 	sub	r8,r8,-2220
80019756:	10 9c       	mov	r12,r8
80019758:	f0 16 00 2e 	mcall	r6[184]
8001975c:	18 98       	mov	r8,r12
8001975e:	58 08       	cp.w	r8,0
80019760:	e0 8a 00 13 	brle	80019786 <uart_handler_4+0xb6>
80019764:	ec f8 00 34 	ld.w	r8,r6[52]
80019768:	f0 c8 f7 54 	sub	r8,r8,-2220
8001976c:	10 9c       	mov	r12,r8
8001976e:	f0 16 00 44 	mcall	r6[272]
80019772:	18 98       	mov	r8,r12
80019774:	ef 68 ff fb 	st.b	r7[-5],r8
80019778:	ec f8 00 34 	ld.w	r8,r6[52]
8001977c:	f0 f8 08 a4 	ld.w	r8,r8[2212]
80019780:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80019784:	91 79       	st.w	r8[0x1c],r9
80019786:	ec f8 00 34 	ld.w	r8,r6[52]
8001978a:	f0 c8 f7 54 	sub	r8,r8,-2220
8001978e:	10 9c       	mov	r12,r8
80019790:	f0 16 00 2e 	mcall	r6[184]
80019794:	18 98       	mov	r8,r12
80019796:	58 08       	cp.w	r8,0
80019798:	c0 71       	brne	800197a6 <uart_handler_4+0xd6>
8001979a:	ec f8 00 34 	ld.w	r8,r6[52]
8001979e:	f0 f8 08 a4 	ld.w	r8,r8[2212]
800197a2:	30 29       	mov	r9,2
800197a4:	91 39       	st.w	r8[0xc],r9
800197a6:	2f ed       	sub	sp,-8
800197a8:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800197ac:	d6 03       	rete
800197ae:	00 00       	add	r0,r0
800197b0:	80 01       	ld.sh	r1,r0[0x0]
800197b2:	95 5e       	st.w	r10[0x14],lr

800197b4 <register_UART_handler>:


void register_UART_handler(int UID) {
800197b4:	eb cd 40 c0 	pushm	r6-r7,lr
800197b8:	1a 97       	mov	r7,sp
800197ba:	20 1d       	sub	sp,4
800197bc:	4a 56       	lddpc	r6,80019850 <register_UART_handler+0x9c>
800197be:	1e 26       	rsub	r6,pc
800197c0:	ef 4c ff fc 	st.w	r7[-4],r12
	switch(UID) {
800197c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800197c8:	58 28       	cp.w	r8,2
800197ca:	c2 00       	breq	8001980a <register_UART_handler+0x56>
800197cc:	e0 89 00 07 	brgt	800197da <register_UART_handler+0x26>
800197d0:	58 08       	cp.w	r8,0
800197d2:	c0 90       	breq	800197e4 <register_UART_handler+0x30>
800197d4:	58 18       	cp.w	r8,1
800197d6:	c0 f0       	breq	800197f4 <register_UART_handler+0x40>
800197d8:	c3 98       	rjmp	8001984a <register_UART_handler+0x96>
800197da:	58 38       	cp.w	r8,3
800197dc:	c2 20       	breq	80019820 <register_UART_handler+0x6c>
800197de:	58 48       	cp.w	r8,4
800197e0:	c2 b0       	breq	80019836 <register_UART_handler+0x82>
800197e2:	c3 48       	rjmp	8001984a <register_UART_handler+0x96>
		case 0: 	INTC_register_interrupt( (__int_handler) &uart_handler_0, AVR32_USART0_IRQ, AVR32_INTC_INT1); break;
800197e4:	30 1a       	mov	r10,1
800197e6:	e0 6b 02 60 	mov	r11,608
800197ea:	fe cc 04 9a 	sub	r12,pc,1178
800197ee:	f0 16 00 3b 	mcall	r6[236]
800197f2:	c2 c8       	rjmp	8001984a <register_UART_handler+0x96>
		case 1: 	INTC_register_interrupt( (__int_handler) &uart_handler_1, usart_opt[1].uart_device.IRQ, AVR32_INTC_INT1); break;
800197f4:	ec f8 00 34 	ld.w	r8,r6[52]
800197f8:	f0 f8 02 30 	ld.w	r8,r8[560]
800197fc:	30 1a       	mov	r10,1
800197fe:	10 9b       	mov	r11,r8
80019800:	fe cc 03 dc 	sub	r12,pc,988
80019804:	f0 16 00 3b 	mcall	r6[236]
80019808:	c2 18       	rjmp	8001984a <register_UART_handler+0x96>
		case 2: 	INTC_register_interrupt( (__int_handler) &uart_handler_2, usart_opt[2].uart_device.IRQ, AVR32_INTC_INT1); break;
8001980a:	ec f8 00 34 	ld.w	r8,r6[52]
8001980e:	f0 f8 04 58 	ld.w	r8,r8[1112]
80019812:	30 1a       	mov	r10,1
80019814:	10 9b       	mov	r11,r8
80019816:	fe cc 03 0e 	sub	r12,pc,782
8001981a:	f0 16 00 3b 	mcall	r6[236]
8001981e:	c1 68       	rjmp	8001984a <register_UART_handler+0x96>
		case 3: 	INTC_register_interrupt( (__int_handler) &uart_handler_3, usart_opt[3].uart_device.IRQ, AVR32_INTC_INT1); break;
80019820:	ec f8 00 34 	ld.w	r8,r6[52]
80019824:	f0 f8 06 80 	ld.w	r8,r8[1664]
80019828:	30 1a       	mov	r10,1
8001982a:	10 9b       	mov	r11,r8
8001982c:	fe cc 02 40 	sub	r12,pc,576
80019830:	f0 16 00 3b 	mcall	r6[236]
80019834:	c0 b8       	rjmp	8001984a <register_UART_handler+0x96>
		case 4: 	INTC_register_interrupt( (__int_handler) &uart_handler_4, usart_opt[4].uart_device.IRQ, AVR32_INTC_INT1); break;
80019836:	ec f8 00 34 	ld.w	r8,r6[52]
8001983a:	f0 f8 08 a8 	ld.w	r8,r8[2216]
8001983e:	30 1a       	mov	r10,1
80019840:	10 9b       	mov	r11,r8
80019842:	fe cc 01 72 	sub	r12,pc,370
80019846:	f0 16 00 3b 	mcall	r6[236]

	}
	
}
8001984a:	2f fd       	sub	sp,-4
8001984c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019850:	80 01       	ld.sh	r1,r0[0x0]
80019852:	96 42       	ld.sh	r2,r11[0x8]

80019854 <init_UART_int>:

usart_config_t *init_UART_int(int UID) {
80019854:	eb cd 40 c0 	pushm	r6-r7,lr
80019858:	1a 97       	mov	r7,sp
8001985a:	20 1d       	sub	sp,4
8001985c:	4e 16       	lddpc	r6,800199e0 <init_UART_int+0x18c>
8001985e:	1e 26       	rsub	r6,pc
80019860:	ef 4c ff fc 	st.w	r7[-4],r12
	if ((usart_opt[UID].mode&UART_IN) >0)  gpio_enable_module_pin(usart_opt[UID].rx_pin_map.pin, usart_opt[UID].rx_pin_map.function); 
80019864:	ee fa ff fc 	ld.w	r10,r7[-4]
80019868:	ec f9 00 34 	ld.w	r9,r6[52]
8001986c:	e0 68 02 28 	mov	r8,552
80019870:	f4 08 02 48 	mul	r8,r10,r8
80019874:	f2 08 00 08 	add	r8,r9,r8
80019878:	70 08       	ld.w	r8,r8[0x0]
8001987a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001987e:	58 08       	cp.w	r8,0
80019880:	e0 8a 00 21 	brle	800198c2 <init_UART_int+0x6e>
80019884:	ee fa ff fc 	ld.w	r10,r7[-4]
80019888:	ec f9 00 34 	ld.w	r9,r6[52]
8001988c:	e0 68 02 28 	mov	r8,552
80019890:	f4 08 02 48 	mul	r8,r10,r8
80019894:	f2 08 00 08 	add	r8,r9,r8
80019898:	f0 c8 fd dc 	sub	r8,r8,-548
8001989c:	11 98       	ld.ub	r8,r8[0x1]
8001989e:	10 99       	mov	r9,r8
800198a0:	ee fb ff fc 	ld.w	r11,r7[-4]
800198a4:	ec fa 00 34 	ld.w	r10,r6[52]
800198a8:	e0 68 02 28 	mov	r8,552
800198ac:	f6 08 02 48 	mul	r8,r11,r8
800198b0:	f4 08 00 08 	add	r8,r10,r8
800198b4:	f0 c8 fd dc 	sub	r8,r8,-548
800198b8:	11 88       	ld.ub	r8,r8[0x0]
800198ba:	12 9b       	mov	r11,r9
800198bc:	10 9c       	mov	r12,r8
800198be:	f0 16 00 3e 	mcall	r6[248]
	if ((usart_opt[UID].mode&UART_OUT)>0)  gpio_enable_module_pin(usart_opt[UID].tx_pin_map.pin, usart_opt[UID].tx_pin_map.function); 
800198c2:	ee fa ff fc 	ld.w	r10,r7[-4]
800198c6:	ec f9 00 34 	ld.w	r9,r6[52]
800198ca:	e0 68 02 28 	mov	r8,552
800198ce:	f4 08 02 48 	mul	r8,r10,r8
800198d2:	f2 08 00 08 	add	r8,r9,r8
800198d6:	70 08       	ld.w	r8,r8[0x0]
800198d8:	e2 18 00 02 	andl	r8,0x2,COH
800198dc:	58 08       	cp.w	r8,0
800198de:	e0 8a 00 21 	brle	80019920 <init_UART_int+0xcc>
800198e2:	ee fa ff fc 	ld.w	r10,r7[-4]
800198e6:	ec f9 00 34 	ld.w	r9,r6[52]
800198ea:	e0 68 02 28 	mov	r8,552
800198ee:	f4 08 02 48 	mul	r8,r10,r8
800198f2:	f2 08 00 08 	add	r8,r9,r8
800198f6:	f0 c8 fd dc 	sub	r8,r8,-548
800198fa:	11 b8       	ld.ub	r8,r8[0x3]
800198fc:	10 99       	mov	r9,r8
800198fe:	ee fb ff fc 	ld.w	r11,r7[-4]
80019902:	ec fa 00 34 	ld.w	r10,r6[52]
80019906:	e0 68 02 28 	mov	r8,552
8001990a:	f6 08 02 48 	mul	r8,r11,r8
8001990e:	f4 08 00 08 	add	r8,r10,r8
80019912:	f0 c8 fd dc 	sub	r8,r8,-548
80019916:	11 a8       	ld.ub	r8,r8[0x2]
80019918:	12 9b       	mov	r11,r9
8001991a:	10 9c       	mov	r12,r8
8001991c:	f0 16 00 3e 	mcall	r6[248]

	usart_init_rs232( usart_opt[UID].uart_device.uart, &(usart_opt[UID].options), sysclk_get_cpu_hz()); 
80019920:	fe b0 fd 0c 	rcall	80019338 <sysclk_get_cpu_hz>
80019924:	18 98       	mov	r8,r12
80019926:	10 9a       	mov	r10,r8
80019928:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001992c:	e0 68 02 28 	mov	r8,552
80019930:	f2 08 02 48 	mul	r8,r9,r8
80019934:	f0 c9 fd e8 	sub	r9,r8,-536
80019938:	ec f8 00 34 	ld.w	r8,r6[52]
8001993c:	10 09       	add	r9,r8
8001993e:	ee fc ff fc 	ld.w	r12,r7[-4]
80019942:	ec f8 00 34 	ld.w	r8,r6[52]
80019946:	e0 6b 00 8a 	mov	r11,138
8001994a:	f8 0b 02 4b 	mul	r11,r12,r11
8001994e:	2f fb       	sub	r11,-1
80019950:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
80019954:	12 9b       	mov	r11,r9
80019956:	10 9c       	mov	r12,r8
80019958:	f0 16 00 68 	mcall	r6[416]
	//usart_write_line(usart_opt[UID].uart_device.uart, "UART initialised");
	register_UART_handler(UID);
8001995c:	ee fc ff fc 	ld.w	r12,r7[-4]
80019960:	f0 16 01 f8 	mcall	r6[2016]
	buffer_init(&usart_opt[UID].uart_device.transmit_buffer);
80019964:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019968:	e0 68 02 28 	mov	r8,552
8001996c:	f2 08 02 48 	mul	r8,r9,r8
80019970:	f0 c9 ff f4 	sub	r9,r8,-12
80019974:	ec f8 00 34 	ld.w	r8,r6[52]
80019978:	f2 08 00 08 	add	r8,r9,r8
8001997c:	10 9c       	mov	r12,r8
8001997e:	f0 16 01 2c 	mcall	r6[1200]
	buffer_init(&usart_opt[UID].uart_device.receive_buffer);
80019982:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019986:	e0 68 02 28 	mov	r8,552
8001998a:	f2 08 02 48 	mul	r8,r9,r8
8001998e:	f0 c9 fe f4 	sub	r9,r8,-268
80019992:	ec f8 00 34 	ld.w	r8,r6[52]
80019996:	f2 08 00 08 	add	r8,r9,r8
8001999a:	2f d8       	sub	r8,-3
8001999c:	10 9c       	mov	r12,r8
8001999e:	f0 16 01 2c 	mcall	r6[1200]
	if (usart_opt[UID].mode&UART_IN >0) usart_opt[UID].uart_device.uart->ier=AVR32_USART_IER_RXRDY_MASK;
800199a2:	ee fa ff fc 	ld.w	r10,r7[-4]
800199a6:	ec f9 00 34 	ld.w	r9,r6[52]
800199aa:	e0 68 02 28 	mov	r8,552
800199ae:	f4 08 02 48 	mul	r8,r10,r8
800199b2:	f2 08 00 08 	add	r8,r9,r8
800199b6:	70 08       	ld.w	r8,r8[0x0]
800199b8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800199bc:	5c 58       	castu.b	r8
800199be:	c0 e0       	breq	800199da <init_UART_int+0x186>
800199c0:	ee fa ff fc 	ld.w	r10,r7[-4]
800199c4:	ec f8 00 34 	ld.w	r8,r6[52]
800199c8:	e0 69 00 8a 	mov	r9,138
800199cc:	f4 09 02 49 	mul	r9,r10,r9
800199d0:	2f f9       	sub	r9,-1
800199d2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800199d6:	30 19       	mov	r9,1
800199d8:	91 29       	st.w	r8[0x8],r9
	//if (usart_opt[UID].mode&UART_OUT>0) usart_opt[UID].uart_device.uart->ier=AVR32_USART_IER_TXRDY_MASK;
} 
800199da:	2f fd       	sub	sp,-4
800199dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800199e0:	80 01       	ld.sh	r1,r0[0x0]
800199e2:	96 e2       	ld.uh	r2,r11[0xc]

800199e4 <uart_int_get_byte>:

/************************************************************************/
/* blocking operation to retrieve a received byte from uart             */
/************************************************************************/
char uart_int_get_byte(usart_config_t *usart_opt) {
800199e4:	eb cd 40 c0 	pushm	r6-r7,lr
800199e8:	1a 97       	mov	r7,sp
800199ea:	20 1d       	sub	sp,4
800199ec:	48 86       	lddpc	r6,80019a0c <uart_int_get_byte+0x28>
800199ee:	1e 26       	rsub	r6,pc
800199f0:	ef 4c ff fc 	st.w	r7[-4],r12
	return buffer_get(&(usart_opt->uart_device.receive_buffer));
800199f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800199f8:	f0 c8 fe f1 	sub	r8,r8,-271
800199fc:	10 9c       	mov	r12,r8
800199fe:	f0 16 00 44 	mcall	r6[272]
80019a02:	18 98       	mov	r8,r12
}
80019a04:	10 9c       	mov	r12,r8
80019a06:	2f fd       	sub	sp,-4
80019a08:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019a0c:	80 01       	ld.sh	r1,r0[0x0]
80019a0e:	98 72       	ld.sh	r2,r12[0xe]

80019a10 <uart_int_bytes_available>:

/************************************************************************/
/* returns number of received bytes in the receive buffer               */
/************************************************************************/
int uart_int_bytes_available(usart_config_t *usart_opt) {
80019a10:	eb cd 40 c0 	pushm	r6-r7,lr
80019a14:	1a 97       	mov	r7,sp
80019a16:	20 1d       	sub	sp,4
80019a18:	48 86       	lddpc	r6,80019a38 <uart_int_bytes_available+0x28>
80019a1a:	1e 26       	rsub	r6,pc
80019a1c:	ef 4c ff fc 	st.w	r7[-4],r12
	return buffer_bytes_available(&(usart_opt->uart_device.receive_buffer));
80019a20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019a24:	f0 c8 fe f1 	sub	r8,r8,-271
80019a28:	10 9c       	mov	r12,r8
80019a2a:	f0 16 00 2e 	mcall	r6[184]
80019a2e:	18 98       	mov	r8,r12
}
80019a30:	10 9c       	mov	r12,r8
80019a32:	2f fd       	sub	sp,-4
80019a34:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019a38:	80 01       	ld.sh	r1,r0[0x0]
80019a3a:	98 9e       	ld.uh	lr,r12[0x2]

80019a3c <uart_int_send_byte>:

/************************************************************************/
/* non-blocking operation to append a byte to the uart send buffer      */
/* if buffer is full, the command has no effect  (returns -1).          */
/************************************************************************/
short uart_int_send_byte(usart_config_t *usart_opt, char data) {
80019a3c:	eb cd 40 c0 	pushm	r6-r7,lr
80019a40:	1a 97       	mov	r7,sp
80019a42:	20 2d       	sub	sp,8
80019a44:	49 56       	lddpc	r6,80019a98 <uart_int_send_byte+0x5c>
80019a46:	1e 26       	rsub	r6,pc
80019a48:	ef 4c ff fc 	st.w	r7[-4],r12
80019a4c:	16 98       	mov	r8,r11
80019a4e:	ef 68 ff f8 	st.b	r7[-8],r8
//	usart_write_line(usart_opt->uart_device.uart, "\ns");
	while (buffer_put(&(usart_opt->uart_device.transmit_buffer), data)<0);
80019a52:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80019a56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019a5a:	2f 48       	sub	r8,-12
80019a5c:	12 9b       	mov	r11,r9
80019a5e:	10 9c       	mov	r12,r8
80019a60:	f0 16 00 53 	mcall	r6[332]
80019a64:	18 98       	mov	r8,r12
80019a66:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80019a6a:	30 08       	mov	r8,0
80019a6c:	f0 09 18 00 	cp.b	r9,r8
80019a70:	cf 15       	brlt	80019a52 <uart_int_send_byte+0x16>
	if ((buffer_bytes_available(&(usart_opt->uart_device.transmit_buffer)) >= 1))//&&
80019a72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019a76:	2f 48       	sub	r8,-12
80019a78:	10 9c       	mov	r12,r8
80019a7a:	f0 16 00 2e 	mcall	r6[184]
80019a7e:	18 98       	mov	r8,r12
80019a80:	58 08       	cp.w	r8,0
80019a82:	e0 8a 00 07 	brle	80019a90 <uart_int_send_byte+0x54>
//	  (usart_opt->uart_device.uart->csr & AVR32_USART_CSR_TXRDY_MASK)) 
	{ // if there is exactly one byte in the buffer (this one...), and transmitter ready
		 // kick-start transmission
//		usart_opt->uart_device.uart->thr='c';//buffer_get(&(usart_opt->uart_device.transmit_buffer));
		usart_opt->uart_device.uart->ier=AVR32_USART_IER_TXRDY_MASK;
80019a86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019a8a:	70 18       	ld.w	r8,r8[0x4]
80019a8c:	30 29       	mov	r9,2
80019a8e:	91 29       	st.w	r8[0x8],r9
	} 		
}
80019a90:	2f ed       	sub	sp,-8
80019a92:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019a96:	00 00       	add	r0,r0
80019a98:	80 01       	ld.sh	r1,r0[0x0]
80019a9a:	98 ca       	ld.uh	r10,r12[0x8]

80019a9c <uart_int_flush>:


/** 
 * blocking operation to flush the uart buffer. Returns once the last byte has been passed to hardware for transmission.
 */
void uart_int_flush(usart_config_t *usart_opt) {
80019a9c:	eb cd 40 c0 	pushm	r6-r7,lr
80019aa0:	1a 97       	mov	r7,sp
80019aa2:	20 1d       	sub	sp,4
80019aa4:	48 b6       	lddpc	r6,80019ad0 <uart_int_flush+0x34>
80019aa6:	1e 26       	rsub	r6,pc
80019aa8:	ef 4c ff fc 	st.w	r7[-4],r12
	usart_opt->uart_device.uart->ier=AVR32_USART_IER_TXRDY_MASK;
80019aac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019ab0:	70 18       	ld.w	r8,r8[0x4]
80019ab2:	30 29       	mov	r9,2
80019ab4:	91 29       	st.w	r8[0x8],r9
	while (!buffer_empty(&(usart_opt->uart_device.transmit_buffer)));
80019ab6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019aba:	2f 48       	sub	r8,-12
80019abc:	10 9c       	mov	r12,r8
80019abe:	f0 16 01 1e 	mcall	r6[1144]
80019ac2:	18 98       	mov	r8,r12
80019ac4:	5c 58       	castu.b	r8
80019ac6:	cf 80       	breq	80019ab6 <uart_int_flush+0x1a>
}
80019ac8:	2f fd       	sub	sp,-4
80019aca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019ace:	00 00       	add	r0,r0
80019ad0:	80 01       	ld.sh	r1,r0[0x0]
80019ad2:	99 2a       	st.w	r12[0x8],r10

80019ad4 <uart_out_buffer_empty>:

int uart_out_buffer_empty(usart_config_t *usart_opt) {
80019ad4:	eb cd 40 c0 	pushm	r6-r7,lr
80019ad8:	1a 97       	mov	r7,sp
80019ada:	20 1d       	sub	sp,4
80019adc:	48 96       	lddpc	r6,80019b00 <uart_out_buffer_empty+0x2c>
80019ade:	1e 26       	rsub	r6,pc
80019ae0:	ef 4c ff fc 	st.w	r7[-4],r12
	return buffer_empty(&(usart_opt->uart_device.transmit_buffer));
80019ae4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019ae8:	2f 48       	sub	r8,-12
80019aea:	10 9c       	mov	r12,r8
80019aec:	f0 16 01 1e 	mcall	r6[1144]
80019af0:	18 98       	mov	r8,r12
80019af2:	5c 58       	castu.b	r8
80019af4:	5c 68       	casts.b	r8
}
80019af6:	10 9c       	mov	r12,r8
80019af8:	2f fd       	sub	sp,-4
80019afa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019afe:	00 00       	add	r0,r0
80019b00:	80 01       	ld.sh	r1,r0[0x0]
80019b02:	99 62       	st.w	r12[0x18],r2

80019b04 <get_UART_handle>:

usart_config_t *get_UART_handle(int UID) {
80019b04:	eb cd 40 c0 	pushm	r6-r7,lr
80019b08:	1a 97       	mov	r7,sp
80019b0a:	20 1d       	sub	sp,4
80019b0c:	48 96       	lddpc	r6,80019b30 <get_UART_handle+0x2c>
80019b0e:	1e 26       	rsub	r6,pc
80019b10:	ef 4c ff fc 	st.w	r7[-4],r12
	return &usart_opt[UID];
80019b14:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019b18:	e0 68 02 28 	mov	r8,552
80019b1c:	b1 39       	mul	r9,r8
80019b1e:	ec f8 00 34 	ld.w	r8,r6[52]
80019b22:	f2 08 00 08 	add	r8,r9,r8
}
80019b26:	10 9c       	mov	r12,r8
80019b28:	2f fd       	sub	sp,-4
80019b2a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019b2e:	00 00       	add	r0,r0
80019b30:	80 01       	ld.sh	r1,r0[0x0]
80019b32:	99 92       	st.w	r12[0x24],r2

80019b34 <register_write_stream>:

void register_write_stream(usart_config_t *usart_opt, byte_stream_t *stream) {
80019b34:	eb cd 40 c0 	pushm	r6-r7,lr
80019b38:	1a 97       	mov	r7,sp
80019b3a:	20 2d       	sub	sp,8
80019b3c:	49 16       	lddpc	r6,80019b80 <register_write_stream+0x4c>
80019b3e:	1e 26       	rsub	r6,pc
80019b40:	ef 4c ff fc 	st.w	r7[-4],r12
80019b44:	ef 4b ff f8 	st.w	r7[-8],r11
	stream->get=NULL;
80019b48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019b4c:	30 09       	mov	r9,0
80019b4e:	91 09       	st.w	r8[0x0],r9
	//stream->get=&uart_int_get_byte;
	stream->put=&uart_int_send_byte;
80019b50:	ec f9 05 e4 	ld.w	r9,r6[1508]
80019b54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019b58:	91 19       	st.w	r8[0x4],r9
	stream->flush=&uart_int_flush;
80019b5a:	ec f9 06 94 	ld.w	r9,r6[1684]
80019b5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019b62:	91 29       	st.w	r8[0x8],r9
	stream->buffer_empty=&uart_out_buffer_empty;
80019b64:	ec f9 08 60 	ld.w	r9,r6[2144]
80019b68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019b6c:	91 39       	st.w	r8[0xc],r9
	stream->data=usart_opt;
80019b6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019b72:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019b76:	91 59       	st.w	r8[0x14],r9

}
80019b78:	2f ed       	sub	sp,-8
80019b7a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019b7e:	00 00       	add	r0,r0
80019b80:	80 01       	ld.sh	r1,r0[0x0]
80019b82:	99 c2       	st.w	r12[0x30],r2

80019b84 <register_read_stream>:


void register_read_stream(usart_config_t *usart_opt,  byte_stream_t *stream) {
80019b84:	eb cd 40 80 	pushm	r7,lr
80019b88:	1a 97       	mov	r7,sp
80019b8a:	20 2d       	sub	sp,8
80019b8c:	ef 4c ff fc 	st.w	r7[-4],r12
80019b90:	ef 4b ff f8 	st.w	r7[-8],r11
	usart_opt->uart_device.receive_stream=stream;
80019b94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019b98:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019b9c:	f1 49 02 14 	st.w	r8[532],r9
}
80019ba0:	2f ed       	sub	sp,-8
80019ba2:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80019ba8 <init_scheduler>:
#include "scheduler.h"
#include "time_keeper.h"



void init_scheduler(task_set *ts) {
80019ba8:	eb cd 40 80 	pushm	r7,lr
80019bac:	1a 97       	mov	r7,sp
80019bae:	20 2d       	sub	sp,8
80019bb0:	ef 4c ff f8 	st.w	r7[-8],r12
	int i;
	for (i=0; i<ts->number_of_tasks; i++) {
80019bb4:	30 08       	mov	r8,0
80019bb6:	ef 48 ff fc 	st.w	r7[-4],r8
80019bba:	c2 18       	rjmp	80019bfc <init_scheduler+0x54>
		ts->tasks[i].call_function=NULL;
80019bbc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019bc0:	ee fa ff f8 	ld.w	r10,r7[-8]
80019bc4:	12 98       	mov	r8,r9
80019bc6:	a1 78       	lsl	r8,0x1
80019bc8:	12 08       	add	r8,r9
80019bca:	2f f8       	sub	r8,-1
80019bcc:	a5 68       	lsl	r8,0x4
80019bce:	f4 08 00 08 	add	r8,r10,r8
80019bd2:	30 09       	mov	r9,0
80019bd4:	91 09       	st.w	r8[0x0],r9
		ts->tasks[i].tasks=ts;
80019bd6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019bda:	ee fa ff f8 	ld.w	r10,r7[-8]
80019bde:	ee fb ff f8 	ld.w	r11,r7[-8]
80019be2:	12 98       	mov	r8,r9
80019be4:	a1 78       	lsl	r8,0x1
80019be6:	12 08       	add	r8,r9
80019be8:	a5 68       	lsl	r8,0x4
80019bea:	f6 08 00 08 	add	r8,r11,r8
80019bee:	2f 48       	sub	r8,-12
80019bf0:	91 0a       	st.w	r8[0x0],r10



void init_scheduler(task_set *ts) {
	int i;
	for (i=0; i<ts->number_of_tasks; i++) {
80019bf2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019bf6:	2f f8       	sub	r8,-1
80019bf8:	ef 48 ff fc 	st.w	r7[-4],r8
80019bfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019c00:	11 88       	ld.ub	r8,r8[0x0]
80019c02:	10 99       	mov	r9,r8
80019c04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019c08:	10 39       	cp.w	r9,r8
80019c0a:	fe 99 ff d9 	brgt	80019bbc <init_scheduler+0x14>
		ts->tasks[i].call_function=NULL;
		ts->tasks[i].tasks=ts;
		//ts->tasks[i].run_mode=UNINITIALISED;
	}
	ts->running_task=-1;
80019c0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019c12:	3f f9       	mov	r9,-1
80019c14:	91 19       	st.w	r8[0x4],r9
	ts->current_schedule_slot=0;
80019c16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019c1a:	30 09       	mov	r9,0
80019c1c:	91 29       	st.w	r8[0x8],r9
}
80019c1e:	2f ed       	sub	sp,-8
80019c20:	e3 cd 80 80 	ldm	sp++,r7,pc

80019c24 <register_task>:

task_handle_t register_task(task_set *ts, int task_slot, unsigned long repeat_period, task_run_mode_t run_mode, function_pointer *call_function) {
80019c24:	eb cd 40 e0 	pushm	r5-r7,lr
80019c28:	1a 97       	mov	r7,sp
80019c2a:	20 5d       	sub	sp,20
80019c2c:	4d f6       	lddpc	r6,80019da8 <register_task+0x184>
80019c2e:	1e 26       	rsub	r6,pc
80019c30:	ef 4c ff fc 	st.w	r7[-4],r12
80019c34:	ef 4b ff f8 	st.w	r7[-8],r11
80019c38:	ef 4a ff f4 	st.w	r7[-12],r10
80019c3c:	ef 49 ff f0 	st.w	r7[-16],r9
80019c40:	ef 48 ff ec 	st.w	r7[-20],r8
	if ((task_slot<0) || (task_slot>=ts->number_of_tasks)) {
80019c44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019c48:	58 08       	cp.w	r8,0
80019c4a:	c0 a5       	brlt	80019c5e <register_task+0x3a>
80019c4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019c50:	11 88       	ld.ub	r8,r8[0x0]
80019c52:	10 99       	mov	r9,r8
80019c54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019c58:	10 39       	cp.w	r9,r8
80019c5a:	e0 89 00 05 	brgt	80019c64 <register_task+0x40>
		return -1;
80019c5e:	e0 68 00 ff 	mov	r8,255
80019c62:	c9 f8       	rjmp	80019da0 <register_task+0x17c>
	}
	ts->tasks[task_slot].task_id=task_slot;
80019c64:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019c68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019c6c:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
80019c70:	ee fb ff fc 	ld.w	r11,r7[-4]
80019c74:	12 98       	mov	r8,r9
80019c76:	a1 78       	lsl	r8,0x1
80019c78:	12 08       	add	r8,r9
80019c7a:	a1 78       	lsl	r8,0x1
80019c7c:	2f f8       	sub	r8,-1
80019c7e:	a3 78       	lsl	r8,0x3
80019c80:	f6 08 00 08 	add	r8,r11,r8
80019c84:	14 99       	mov	r9,r10
80019c86:	b0 69       	st.h	r8[0xc],r9
	ts->tasks[task_slot].call_function=call_function;
80019c88:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019c8c:	ee fa ff ec 	ld.w	r10,r7[-20]
80019c90:	ee fb ff fc 	ld.w	r11,r7[-4]
80019c94:	12 98       	mov	r8,r9
80019c96:	a1 78       	lsl	r8,0x1
80019c98:	12 08       	add	r8,r9
80019c9a:	2f f8       	sub	r8,-1
80019c9c:	a5 68       	lsl	r8,0x4
80019c9e:	f6 08 00 08 	add	r8,r11,r8
80019ca2:	91 0a       	st.w	r8[0x0],r10
	ts->tasks[task_slot].run_mode=run_mode;
80019ca4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019ca8:	ee fa ff fc 	ld.w	r10,r7[-4]
80019cac:	12 98       	mov	r8,r9
80019cae:	a1 78       	lsl	r8,0x1
80019cb0:	12 08       	add	r8,r9
80019cb2:	a5 68       	lsl	r8,0x4
80019cb4:	f4 08 00 08 	add	r8,r10,r8
80019cb8:	2e 88       	sub	r8,-24
80019cba:	ee f9 ff f0 	ld.w	r9,r7[-16]
80019cbe:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].repeat_period=repeat_period;
80019cc0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019cc4:	ee fa ff fc 	ld.w	r10,r7[-4]
80019cc8:	12 98       	mov	r8,r9
80019cca:	a1 78       	lsl	r8,0x1
80019ccc:	12 08       	add	r8,r9
80019cce:	a5 68       	lsl	r8,0x4
80019cd0:	f4 08 00 08 	add	r8,r10,r8
80019cd4:	2e 08       	sub	r8,-32
80019cd6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80019cda:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].next_run=GET_TIME;
80019cdc:	ee f5 ff f8 	ld.w	r5,r7[-8]
80019ce0:	f0 16 00 29 	mcall	r6[164]
80019ce4:	18 99       	mov	r9,r12
80019ce6:	ee fa ff fc 	ld.w	r10,r7[-4]
80019cea:	0a 98       	mov	r8,r5
80019cec:	a1 78       	lsl	r8,0x1
80019cee:	0a 08       	add	r8,r5
80019cf0:	a5 68       	lsl	r8,0x4
80019cf2:	f4 08 00 08 	add	r8,r10,r8
80019cf6:	2d c8       	sub	r8,-36
80019cf8:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].execution_time=0;
80019cfa:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019cfe:	ee fa ff fc 	ld.w	r10,r7[-4]
80019d02:	12 98       	mov	r8,r9
80019d04:	a1 78       	lsl	r8,0x1
80019d06:	12 08       	add	r8,r9
80019d08:	a5 68       	lsl	r8,0x4
80019d0a:	f4 08 00 08 	add	r8,r10,r8
80019d0e:	2d 88       	sub	r8,-40
80019d10:	30 09       	mov	r9,0
80019d12:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].timing_mode=PERIODIC_ABSOLUTE;
80019d14:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019d18:	ee fa ff fc 	ld.w	r10,r7[-4]
80019d1c:	12 98       	mov	r8,r9
80019d1e:	a1 78       	lsl	r8,0x1
80019d20:	12 08       	add	r8,r9
80019d22:	2f f8       	sub	r8,-1
80019d24:	a5 68       	lsl	r8,0x4
80019d26:	f4 08 00 08 	add	r8,r10,r8
80019d2a:	2f 48       	sub	r8,-12
80019d2c:	30 09       	mov	r9,0
80019d2e:	91 09       	st.w	r8[0x0],r9
#ifdef SCHEDULER_PROFILING	
	ts->tasks[task_slot].delay_max=0;
80019d30:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019d34:	ee fa ff fc 	ld.w	r10,r7[-4]
80019d38:	12 98       	mov	r8,r9
80019d3a:	a1 78       	lsl	r8,0x1
80019d3c:	12 08       	add	r8,r9
80019d3e:	a5 68       	lsl	r8,0x4
80019d40:	f4 08 00 08 	add	r8,r10,r8
80019d44:	2d 48       	sub	r8,-44
80019d46:	30 09       	mov	r9,0
80019d48:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].delay_avg=0;
80019d4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019d4e:	ee fa ff fc 	ld.w	r10,r7[-4]
80019d52:	f0 c9 ff ff 	sub	r9,r8,-1
80019d56:	12 98       	mov	r8,r9
80019d58:	a1 78       	lsl	r8,0x1
80019d5a:	12 08       	add	r8,r9
80019d5c:	a5 68       	lsl	r8,0x4
80019d5e:	f4 08 00 08 	add	r8,r10,r8
80019d62:	30 09       	mov	r9,0
80019d64:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].delay_var_squared=0;
80019d66:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019d6a:	ee fa ff fc 	ld.w	r10,r7[-4]
80019d6e:	12 98       	mov	r8,r9
80019d70:	a1 78       	lsl	r8,0x1
80019d72:	12 08       	add	r8,r9
80019d74:	a5 68       	lsl	r8,0x4
80019d76:	f4 08 00 08 	add	r8,r10,r8
80019d7a:	2c c8       	sub	r8,-52
80019d7c:	30 09       	mov	r9,0
80019d7e:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].rt_violations=0;
80019d80:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019d84:	ee fa ff fc 	ld.w	r10,r7[-4]
80019d88:	12 98       	mov	r8,r9
80019d8a:	a1 78       	lsl	r8,0x1
80019d8c:	12 08       	add	r8,r9
80019d8e:	a5 68       	lsl	r8,0x4
80019d90:	f4 08 00 08 	add	r8,r10,r8
80019d94:	2c 88       	sub	r8,-56
80019d96:	30 09       	mov	r9,0
80019d98:	91 09       	st.w	r8[0x0],r9
#endif
	return task_slot;
80019d9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019d9e:	5c 58       	castu.b	r8
}
80019da0:	10 9c       	mov	r12,r8
80019da2:	2f bd       	sub	sp,-20
80019da4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80019da8:	80 01       	ld.sh	r1,r0[0x0]
80019daa:	9a b2       	ld.uh	r2,sp[0x6]

80019dac <add_task>:

bool add_task(task_set *ts, unsigned long repeat_period, task_run_mode_t run_mode, function_pointer *call_function, uint32_t task_id) {
80019dac:	eb cd 40 c0 	pushm	r6-r7,lr
80019db0:	1a 97       	mov	r7,sp
80019db2:	20 6d       	sub	sp,24
80019db4:	4a d6       	lddpc	r6,80019e68 <add_task+0xbc>
80019db6:	1e 26       	rsub	r6,pc
80019db8:	ef 4c ff f8 	st.w	r7[-8],r12
80019dbc:	ef 4b ff f4 	st.w	r7[-12],r11
80019dc0:	ef 4a ff f0 	st.w	r7[-16],r10
80019dc4:	ef 49 ff ec 	st.w	r7[-20],r9
80019dc8:	ef 48 ff e8 	st.w	r7[-24],r8
	int task_slot=0;
80019dcc:	30 08       	mov	r8,0
80019dce:	ef 48 ff fc 	st.w	r7[-4],r8
	while ((task_slot < ts->number_of_tasks) && (ts->tasks[task_slot].call_function!=NULL)) task_slot++;
80019dd2:	c0 68       	rjmp	80019dde <add_task+0x32>
80019dd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019dd8:	2f f8       	sub	r8,-1
80019dda:	ef 48 ff fc 	st.w	r7[-4],r8
80019dde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019de2:	11 88       	ld.ub	r8,r8[0x0]
80019de4:	10 99       	mov	r9,r8
80019de6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019dea:	10 39       	cp.w	r9,r8
80019dec:	e0 8a 00 10 	brle	80019e0c <add_task+0x60>
80019df0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019df4:	ee fa ff f8 	ld.w	r10,r7[-8]
80019df8:	12 98       	mov	r8,r9
80019dfa:	a1 78       	lsl	r8,0x1
80019dfc:	12 08       	add	r8,r9
80019dfe:	2f f8       	sub	r8,-1
80019e00:	a5 68       	lsl	r8,0x4
80019e02:	f4 08 00 08 	add	r8,r10,r8
80019e06:	70 08       	ld.w	r8,r8[0x0]
80019e08:	58 08       	cp.w	r8,0
80019e0a:	ce 51       	brne	80019dd4 <add_task+0x28>
	if (task_slot >= ts->number_of_tasks) return false;
80019e0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019e10:	11 88       	ld.ub	r8,r8[0x0]
80019e12:	10 99       	mov	r9,r8
80019e14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019e18:	10 39       	cp.w	r9,r8
80019e1a:	e0 89 00 04 	brgt	80019e22 <add_task+0x76>
80019e1e:	30 08       	mov	r8,0
80019e20:	c2 08       	rjmp	80019e60 <add_task+0xb4>
	register_task(ts,  task_slot,   repeat_period, run_mode,  call_function);
80019e22:	ee f8 ff ec 	ld.w	r8,r7[-20]
80019e26:	ee f9 ff f0 	ld.w	r9,r7[-16]
80019e2a:	ee fa ff f4 	ld.w	r10,r7[-12]
80019e2e:	ee fb ff fc 	ld.w	r11,r7[-4]
80019e32:	ee fc ff f8 	ld.w	r12,r7[-8]
80019e36:	f0 16 00 61 	mcall	r6[388]
	ts->tasks[task_slot].task_id=task_id;
80019e3a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019e3e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80019e42:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
80019e46:	ee fb ff f8 	ld.w	r11,r7[-8]
80019e4a:	12 98       	mov	r8,r9
80019e4c:	a1 78       	lsl	r8,0x1
80019e4e:	12 08       	add	r8,r9
80019e50:	a1 78       	lsl	r8,0x1
80019e52:	2f f8       	sub	r8,-1
80019e54:	a3 78       	lsl	r8,0x3
80019e56:	f6 08 00 08 	add	r8,r11,r8
80019e5a:	14 99       	mov	r9,r10
80019e5c:	b0 69       	st.h	r8[0xc],r9
	return true;
80019e5e:	30 18       	mov	r8,1
}
80019e60:	10 9c       	mov	r12,r8
80019e62:	2f ad       	sub	sp,-24
80019e64:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019e68:	80 01       	ld.sh	r1,r0[0x0]
80019e6a:	9c 3a       	ld.sh	r10,lr[0x6]

80019e6c <sort_taskset_by_period>:


void sort_taskset_by_period(task_set *ts){
80019e6c:	eb cd 40 80 	pushm	r7,lr
80019e70:	1a 97       	mov	r7,sp
80019e72:	20 fd       	sub	sp,60
80019e74:	ef 4c ff c4 	st.w	r7[-60],r12
	int i;
	bool sorted=false;
80019e78:	30 08       	mov	r8,0
80019e7a:	ef 68 ff ff 	st.b	r7[-1],r8
	task_entry tmp;
	if (ts->number_of_tasks<2) return;
80019e7e:	ee f8 ff c4 	ld.w	r8,r7[-60]
80019e82:	11 89       	ld.ub	r9,r8[0x0]
80019e84:	30 18       	mov	r8,1
80019e86:	f0 09 18 00 	cp.b	r9,r8
80019e8a:	e0 8b 01 1d 	brhi	8001a0c4 <sort_taskset_by_period+0x258>
80019e8e:	c2 39       	rjmp	8001a0d4 <sort_taskset_by_period+0x268>

	while (!sorted) {
		sorted=true;
80019e90:	30 18       	mov	r8,1
80019e92:	ef 68 ff ff 	st.b	r7[-1],r8
		for (i=0; i<ts->number_of_tasks-1; i++) {
80019e96:	30 08       	mov	r8,0
80019e98:	ef 48 ff f8 	st.w	r7[-8],r8
80019e9c:	c0 99       	rjmp	8001a0ae <sort_taskset_by_period+0x242>
			if ( ((ts->tasks[i].call_function==NULL)&&(ts->tasks[i+1].call_function!=NULL)) ||
80019e9e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019ea2:	ee fa ff c4 	ld.w	r10,r7[-60]
80019ea6:	12 98       	mov	r8,r9
80019ea8:	a1 78       	lsl	r8,0x1
80019eaa:	12 08       	add	r8,r9
80019eac:	2f f8       	sub	r8,-1
80019eae:	a5 68       	lsl	r8,0x4
80019eb0:	f4 08 00 08 	add	r8,r10,r8
80019eb4:	70 08       	ld.w	r8,r8[0x0]
80019eb6:	58 08       	cp.w	r8,0
80019eb8:	c1 11       	brne	80019eda <sort_taskset_by_period+0x6e>
80019eba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019ebe:	f0 c9 ff ff 	sub	r9,r8,-1
80019ec2:	ee fa ff c4 	ld.w	r10,r7[-60]
80019ec6:	12 98       	mov	r8,r9
80019ec8:	a1 78       	lsl	r8,0x1
80019eca:	12 08       	add	r8,r9
80019ecc:	2f f8       	sub	r8,-1
80019ece:	a5 68       	lsl	r8,0x4
80019ed0:	f4 08 00 08 	add	r8,r10,r8
80019ed4:	70 08       	ld.w	r8,r8[0x0]
80019ed6:	58 08       	cp.w	r8,0
80019ed8:	c3 e1       	brne	80019f54 <sort_taskset_by_period+0xe8>
				((ts->tasks[i].call_function!=NULL)&&(ts->tasks[i+1].call_function!=NULL) &&
80019eda:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019ede:	ee fa ff c4 	ld.w	r10,r7[-60]
80019ee2:	12 98       	mov	r8,r9
80019ee4:	a1 78       	lsl	r8,0x1
80019ee6:	12 08       	add	r8,r9
80019ee8:	2f f8       	sub	r8,-1
80019eea:	a5 68       	lsl	r8,0x4
80019eec:	f4 08 00 08 	add	r8,r10,r8
80019ef0:	70 08       	ld.w	r8,r8[0x0]
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
		sorted=true;
		for (i=0; i<ts->number_of_tasks-1; i++) {
			if ( ((ts->tasks[i].call_function==NULL)&&(ts->tasks[i+1].call_function!=NULL)) ||
80019ef2:	58 08       	cp.w	r8,0
80019ef4:	e0 80 00 d8 	breq	8001a0a4 <sort_taskset_by_period+0x238>
				((ts->tasks[i].call_function!=NULL)&&(ts->tasks[i+1].call_function!=NULL) &&
80019ef8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019efc:	f0 c9 ff ff 	sub	r9,r8,-1
80019f00:	ee fa ff c4 	ld.w	r10,r7[-60]
80019f04:	12 98       	mov	r8,r9
80019f06:	a1 78       	lsl	r8,0x1
80019f08:	12 08       	add	r8,r9
80019f0a:	2f f8       	sub	r8,-1
80019f0c:	a5 68       	lsl	r8,0x4
80019f0e:	f4 08 00 08 	add	r8,r10,r8
80019f12:	70 08       	ld.w	r8,r8[0x0]
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
		sorted=true;
		for (i=0; i<ts->number_of_tasks-1; i++) {
			if ( ((ts->tasks[i].call_function==NULL)&&(ts->tasks[i+1].call_function!=NULL)) ||
80019f14:	58 08       	cp.w	r8,0
80019f16:	e0 80 00 c7 	breq	8001a0a4 <sort_taskset_by_period+0x238>
				((ts->tasks[i].call_function!=NULL)&&(ts->tasks[i+1].call_function!=NULL) &&
				(ts->tasks[i].repeat_period > ts->tasks[i+1].repeat_period))) {
80019f1a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019f1e:	ee fa ff c4 	ld.w	r10,r7[-60]
80019f22:	12 98       	mov	r8,r9
80019f24:	a1 78       	lsl	r8,0x1
80019f26:	12 08       	add	r8,r9
80019f28:	a5 68       	lsl	r8,0x4
80019f2a:	f4 08 00 08 	add	r8,r10,r8
80019f2e:	2e 08       	sub	r8,-32
80019f30:	70 0a       	ld.w	r10,r8[0x0]
80019f32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019f36:	f0 c9 ff ff 	sub	r9,r8,-1
80019f3a:	ee fb ff c4 	ld.w	r11,r7[-60]
80019f3e:	12 98       	mov	r8,r9
80019f40:	a1 78       	lsl	r8,0x1
80019f42:	12 08       	add	r8,r9
80019f44:	a5 68       	lsl	r8,0x4
80019f46:	f6 08 00 08 	add	r8,r11,r8
80019f4a:	2e 08       	sub	r8,-32
80019f4c:	70 08       	ld.w	r8,r8[0x0]
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
		sorted=true;
		for (i=0; i<ts->number_of_tasks-1; i++) {
			if ( ((ts->tasks[i].call_function==NULL)&&(ts->tasks[i+1].call_function!=NULL)) ||
80019f4e:	10 3a       	cp.w	r10,r8
80019f50:	e0 88 00 aa 	brls	8001a0a4 <sort_taskset_by_period+0x238>
				((ts->tasks[i].call_function!=NULL)&&(ts->tasks[i+1].call_function!=NULL) &&
				(ts->tasks[i].repeat_period > ts->tasks[i+1].repeat_period))) {
				tmp=ts->tasks[i];
80019f54:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019f58:	ee fa ff c4 	ld.w	r10,r7[-60]
80019f5c:	12 98       	mov	r8,r9
80019f5e:	a1 78       	lsl	r8,0x1
80019f60:	12 08       	add	r8,r9
80019f62:	a5 68       	lsl	r8,0x4
80019f64:	f4 08 00 08 	add	r8,r10,r8
80019f68:	2f 48       	sub	r8,-12
80019f6a:	ee cb 00 38 	sub	r11,r7,56
80019f6e:	10 9a       	mov	r10,r8
80019f70:	f6 c8 00 00 	sub	r8,r11,0
80019f74:	f4 c9 00 00 	sub	r9,r10,0
80019f78:	72 0c       	ld.w	r12,r9[0x0]
80019f7a:	91 0c       	st.w	r8[0x0],r12
80019f7c:	72 1c       	ld.w	r12,r9[0x4]
80019f7e:	91 1c       	st.w	r8[0x4],r12
80019f80:	72 2c       	ld.w	r12,r9[0x8]
80019f82:	91 2c       	st.w	r8[0x8],r12
80019f84:	72 39       	ld.w	r9,r9[0xc]
80019f86:	91 39       	st.w	r8[0xc],r9
80019f88:	f6 c8 ff f0 	sub	r8,r11,-16
80019f8c:	f4 c9 ff f0 	sub	r9,r10,-16
80019f90:	72 0c       	ld.w	r12,r9[0x0]
80019f92:	91 0c       	st.w	r8[0x0],r12
80019f94:	72 1c       	ld.w	r12,r9[0x4]
80019f96:	91 1c       	st.w	r8[0x4],r12
80019f98:	72 2c       	ld.w	r12,r9[0x8]
80019f9a:	91 2c       	st.w	r8[0x8],r12
80019f9c:	72 39       	ld.w	r9,r9[0xc]
80019f9e:	91 39       	st.w	r8[0xc],r9
80019fa0:	f6 c8 ff e0 	sub	r8,r11,-32
80019fa4:	f4 c9 ff e0 	sub	r9,r10,-32
80019fa8:	72 0a       	ld.w	r10,r9[0x0]
80019faa:	91 0a       	st.w	r8[0x0],r10
80019fac:	72 1a       	ld.w	r10,r9[0x4]
80019fae:	91 1a       	st.w	r8[0x4],r10
80019fb0:	72 2a       	ld.w	r10,r9[0x8]
80019fb2:	91 2a       	st.w	r8[0x8],r10
80019fb4:	72 39       	ld.w	r9,r9[0xc]
80019fb6:	91 39       	st.w	r8[0xc],r9
				ts->tasks[i]=ts->tasks[i+1];
80019fb8:	ee fa ff f8 	ld.w	r10,r7[-8]
80019fbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019fc0:	f0 c9 ff ff 	sub	r9,r8,-1
80019fc4:	ee fb ff c4 	ld.w	r11,r7[-60]
80019fc8:	14 98       	mov	r8,r10
80019fca:	a1 78       	lsl	r8,0x1
80019fcc:	14 08       	add	r8,r10
80019fce:	a5 68       	lsl	r8,0x4
80019fd0:	f6 08 00 08 	add	r8,r11,r8
80019fd4:	f0 ca ff f4 	sub	r10,r8,-12
80019fd8:	ee fb ff c4 	ld.w	r11,r7[-60]
80019fdc:	12 98       	mov	r8,r9
80019fde:	a1 78       	lsl	r8,0x1
80019fe0:	12 08       	add	r8,r9
80019fe2:	a5 68       	lsl	r8,0x4
80019fe4:	f6 08 00 08 	add	r8,r11,r8
80019fe8:	2f 48       	sub	r8,-12
80019fea:	14 9b       	mov	r11,r10
80019fec:	10 9a       	mov	r10,r8
80019fee:	f6 c8 00 00 	sub	r8,r11,0
80019ff2:	f4 c9 00 00 	sub	r9,r10,0
80019ff6:	72 0c       	ld.w	r12,r9[0x0]
80019ff8:	91 0c       	st.w	r8[0x0],r12
80019ffa:	72 1c       	ld.w	r12,r9[0x4]
80019ffc:	91 1c       	st.w	r8[0x4],r12
80019ffe:	72 2c       	ld.w	r12,r9[0x8]
8001a000:	91 2c       	st.w	r8[0x8],r12
8001a002:	72 39       	ld.w	r9,r9[0xc]
8001a004:	91 39       	st.w	r8[0xc],r9
8001a006:	f6 c8 ff f0 	sub	r8,r11,-16
8001a00a:	f4 c9 ff f0 	sub	r9,r10,-16
8001a00e:	72 0c       	ld.w	r12,r9[0x0]
8001a010:	91 0c       	st.w	r8[0x0],r12
8001a012:	72 1c       	ld.w	r12,r9[0x4]
8001a014:	91 1c       	st.w	r8[0x4],r12
8001a016:	72 2c       	ld.w	r12,r9[0x8]
8001a018:	91 2c       	st.w	r8[0x8],r12
8001a01a:	72 39       	ld.w	r9,r9[0xc]
8001a01c:	91 39       	st.w	r8[0xc],r9
8001a01e:	f6 c8 ff e0 	sub	r8,r11,-32
8001a022:	f4 c9 ff e0 	sub	r9,r10,-32
8001a026:	72 0a       	ld.w	r10,r9[0x0]
8001a028:	91 0a       	st.w	r8[0x0],r10
8001a02a:	72 1a       	ld.w	r10,r9[0x4]
8001a02c:	91 1a       	st.w	r8[0x4],r10
8001a02e:	72 2a       	ld.w	r10,r9[0x8]
8001a030:	91 2a       	st.w	r8[0x8],r10
8001a032:	72 39       	ld.w	r9,r9[0xc]
8001a034:	91 39       	st.w	r8[0xc],r9
				ts->tasks[i+1]=tmp;		
8001a036:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a03a:	f0 c9 ff ff 	sub	r9,r8,-1
8001a03e:	ee fa ff c4 	ld.w	r10,r7[-60]
8001a042:	12 98       	mov	r8,r9
8001a044:	a1 78       	lsl	r8,0x1
8001a046:	12 08       	add	r8,r9
8001a048:	a5 68       	lsl	r8,0x4
8001a04a:	f4 08 00 08 	add	r8,r10,r8
8001a04e:	2f 48       	sub	r8,-12
8001a050:	10 9b       	mov	r11,r8
8001a052:	ee ca 00 38 	sub	r10,r7,56
8001a056:	f6 c8 00 00 	sub	r8,r11,0
8001a05a:	f4 c9 00 00 	sub	r9,r10,0
8001a05e:	72 0c       	ld.w	r12,r9[0x0]
8001a060:	91 0c       	st.w	r8[0x0],r12
8001a062:	72 1c       	ld.w	r12,r9[0x4]
8001a064:	91 1c       	st.w	r8[0x4],r12
8001a066:	72 2c       	ld.w	r12,r9[0x8]
8001a068:	91 2c       	st.w	r8[0x8],r12
8001a06a:	72 39       	ld.w	r9,r9[0xc]
8001a06c:	91 39       	st.w	r8[0xc],r9
8001a06e:	f6 c8 ff f0 	sub	r8,r11,-16
8001a072:	f4 c9 ff f0 	sub	r9,r10,-16
8001a076:	72 0c       	ld.w	r12,r9[0x0]
8001a078:	91 0c       	st.w	r8[0x0],r12
8001a07a:	72 1c       	ld.w	r12,r9[0x4]
8001a07c:	91 1c       	st.w	r8[0x4],r12
8001a07e:	72 2c       	ld.w	r12,r9[0x8]
8001a080:	91 2c       	st.w	r8[0x8],r12
8001a082:	72 39       	ld.w	r9,r9[0xc]
8001a084:	91 39       	st.w	r8[0xc],r9
8001a086:	f6 c8 ff e0 	sub	r8,r11,-32
8001a08a:	f4 c9 ff e0 	sub	r9,r10,-32
8001a08e:	72 0a       	ld.w	r10,r9[0x0]
8001a090:	91 0a       	st.w	r8[0x0],r10
8001a092:	72 1a       	ld.w	r10,r9[0x4]
8001a094:	91 1a       	st.w	r8[0x4],r10
8001a096:	72 2a       	ld.w	r10,r9[0x8]
8001a098:	91 2a       	st.w	r8[0x8],r10
8001a09a:	72 39       	ld.w	r9,r9[0xc]
8001a09c:	91 39       	st.w	r8[0xc],r9
				sorted=false;
8001a09e:	30 08       	mov	r8,0
8001a0a0:	ef 68 ff ff 	st.b	r7[-1],r8
	task_entry tmp;
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
		sorted=true;
		for (i=0; i<ts->number_of_tasks-1; i++) {
8001a0a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a0a8:	2f f8       	sub	r8,-1
8001a0aa:	ef 48 ff f8 	st.w	r7[-8],r8
8001a0ae:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001a0b2:	11 88       	ld.ub	r8,r8[0x0]
8001a0b4:	f0 c9 00 01 	sub	r9,r8,1
8001a0b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a0bc:	10 39       	cp.w	r9,r8
8001a0be:	fe 99 fe f0 	brgt	80019e9e <sort_taskset_by_period+0x32>
8001a0c2:	c0 28       	rjmp	8001a0c6 <sort_taskset_by_period+0x25a>
	int i;
	bool sorted=false;
	task_entry tmp;
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
8001a0c4:	d7 03       	nop
8001a0c6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001a0ca:	ec 18 00 01 	eorl	r8,0x1
8001a0ce:	5c 58       	castu.b	r8
8001a0d0:	fe 91 fe e0 	brne	80019e90 <sort_taskset_by_period+0x24>
				ts->tasks[i+1]=tmp;		
				sorted=false;
			}
		}
	}		
}
8001a0d4:	2f 1d       	sub	sp,-60
8001a0d6:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a0da <run_scheduler_update>:

int run_scheduler_update(task_set *ts, uint8_t schedule_strategy) {
8001a0da:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001a0de:	1a 97       	mov	r7,sp
8001a0e0:	20 9d       	sub	sp,36
8001a0e2:	fe f6 04 0a 	ld.w	r6,pc[1034]
8001a0e6:	1e 26       	rsub	r6,pc
8001a0e8:	ef 4c ff e0 	st.w	r7[-32],r12
8001a0ec:	16 98       	mov	r8,r11
8001a0ee:	ef 68 ff dc 	st.b	r7[-36],r8
	int i;
	int realtime_violation=0;
8001a0f2:	30 08       	mov	r8,0
8001a0f4:	ef 48 ff e8 	st.w	r7[-24],r8
	function_pointer call_task;
	task_return_t treturn;
	for (i=ts->current_schedule_slot; i<ts->number_of_tasks; i++) {
8001a0f8:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001a0fc:	70 28       	ld.w	r8,r8[0x8]
8001a0fe:	ef 48 ff e4 	st.w	r7[-28],r8
8001a102:	e0 8f 01 e5 	bral	8001a4cc <run_scheduler_update+0x3f2>
		uint32_t current_time=GET_TIME;
8001a106:	f0 16 00 29 	mcall	r6[164]
8001a10a:	18 98       	mov	r8,r12
8001a10c:	ef 48 ff f4 	st.w	r7[-12],r8
		if ((ts->tasks[i].call_function!=NULL)  && (ts->tasks[i].run_mode!=RUN_NEVER) &&(current_time >= ts->tasks[i].next_run)) {
8001a110:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001a114:	ee fa ff e0 	ld.w	r10,r7[-32]
8001a118:	12 98       	mov	r8,r9
8001a11a:	a1 78       	lsl	r8,0x1
8001a11c:	12 08       	add	r8,r9
8001a11e:	2f f8       	sub	r8,-1
8001a120:	a5 68       	lsl	r8,0x4
8001a122:	f4 08 00 08 	add	r8,r10,r8
8001a126:	70 08       	ld.w	r8,r8[0x0]
8001a128:	58 08       	cp.w	r8,0
8001a12a:	e0 80 01 cc 	breq	8001a4c2 <run_scheduler_update+0x3e8>
8001a12e:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001a132:	ee fa ff e0 	ld.w	r10,r7[-32]
8001a136:	12 98       	mov	r8,r9
8001a138:	a1 78       	lsl	r8,0x1
8001a13a:	12 08       	add	r8,r9
8001a13c:	a5 68       	lsl	r8,0x4
8001a13e:	f4 08 00 08 	add	r8,r10,r8
8001a142:	2e 88       	sub	r8,-24
8001a144:	70 08       	ld.w	r8,r8[0x0]
8001a146:	58 08       	cp.w	r8,0
8001a148:	e0 80 01 bd 	breq	8001a4c2 <run_scheduler_update+0x3e8>
8001a14c:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001a150:	ee fa ff e0 	ld.w	r10,r7[-32]
8001a154:	12 98       	mov	r8,r9
8001a156:	a1 78       	lsl	r8,0x1
8001a158:	12 08       	add	r8,r9
8001a15a:	a5 68       	lsl	r8,0x4
8001a15c:	f4 08 00 08 	add	r8,r10,r8
8001a160:	2d c8       	sub	r8,-36
8001a162:	70 09       	ld.w	r9,r8[0x0]
8001a164:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001a168:	10 39       	cp.w	r9,r8
8001a16a:	e0 8b 01 ac 	brhi	8001a4c2 <run_scheduler_update+0x3e8>
			uint32_t delay=current_time - (ts->tasks[i].next_run);
8001a16e:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001a172:	ee fa ff e0 	ld.w	r10,r7[-32]
8001a176:	12 98       	mov	r8,r9
8001a178:	a1 78       	lsl	r8,0x1
8001a17a:	12 08       	add	r8,r9
8001a17c:	a5 68       	lsl	r8,0x4
8001a17e:	f4 08 00 08 	add	r8,r10,r8
8001a182:	2d c8       	sub	r8,-36
8001a184:	70 08       	ld.w	r8,r8[0x0]
8001a186:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001a18a:	10 19       	sub	r9,r8
8001a18c:	ef 49 ff f8 	st.w	r7[-8],r9
			uint32_t task_start_time;

		    task_start_time=GET_TIME;
8001a190:	f0 16 00 29 	mcall	r6[164]
8001a194:	18 98       	mov	r8,r12
8001a196:	ef 48 ff fc 	st.w	r7[-4],r8
		    call_task=ts->tasks[i].call_function;
8001a19a:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001a19e:	ee fa ff e0 	ld.w	r10,r7[-32]
8001a1a2:	12 98       	mov	r8,r9
8001a1a4:	a1 78       	lsl	r8,0x1
8001a1a6:	12 08       	add	r8,r9
8001a1a8:	2f f8       	sub	r8,-1
8001a1aa:	a5 68       	lsl	r8,0x4
8001a1ac:	f4 08 00 08 	add	r8,r10,r8
8001a1b0:	70 08       	ld.w	r8,r8[0x0]
8001a1b2:	ef 48 ff ec 	st.w	r7[-20],r8
		    //dbg_print_num(i, 16); dbg_print(" ");dbg_print_num(call_task, 16); dbg_print("\n");
		    treturn = call_task();
8001a1b6:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001a1ba:	5d 18       	icall	r8
8001a1bc:	18 98       	mov	r8,r12
8001a1be:	ef 48 ff f0 	st.w	r7[-16],r8


			
			switch (ts->tasks[i].timing_mode) {
8001a1c2:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001a1c6:	ee fa ff e0 	ld.w	r10,r7[-32]
8001a1ca:	12 98       	mov	r8,r9
8001a1cc:	a1 78       	lsl	r8,0x1
8001a1ce:	12 08       	add	r8,r9
8001a1d0:	2f f8       	sub	r8,-1
8001a1d2:	a5 68       	lsl	r8,0x4
8001a1d4:	f4 08 00 08 	add	r8,r10,r8
8001a1d8:	2f 48       	sub	r8,-12
8001a1da:	70 08       	ld.w	r8,r8[0x0]
8001a1dc:	58 08       	cp.w	r8,0
8001a1de:	c0 40       	breq	8001a1e6 <run_scheduler_update+0x10c>
8001a1e0:	58 18       	cp.w	r8,1
8001a1e2:	c2 90       	breq	8001a234 <run_scheduler_update+0x15a>
8001a1e4:	c4 58       	rjmp	8001a26e <run_scheduler_update+0x194>
				case PERIODIC_ABSOLUTE:
					ts->tasks[i].next_run += ts->tasks[i].repeat_period;
8001a1e6:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001a1ea:	ee fa ff e4 	ld.w	r10,r7[-28]
8001a1ee:	ee fb ff e0 	ld.w	r11,r7[-32]
8001a1f2:	14 98       	mov	r8,r10
8001a1f4:	a1 78       	lsl	r8,0x1
8001a1f6:	14 08       	add	r8,r10
8001a1f8:	a5 68       	lsl	r8,0x4
8001a1fa:	f6 08 00 08 	add	r8,r11,r8
8001a1fe:	2d c8       	sub	r8,-36
8001a200:	70 0b       	ld.w	r11,r8[0x0]
8001a202:	ee fa ff e4 	ld.w	r10,r7[-28]
8001a206:	ee fc ff e0 	ld.w	r12,r7[-32]
8001a20a:	14 98       	mov	r8,r10
8001a20c:	a1 78       	lsl	r8,0x1
8001a20e:	14 08       	add	r8,r10
8001a210:	a5 68       	lsl	r8,0x4
8001a212:	f8 08 00 08 	add	r8,r12,r8
8001a216:	2e 08       	sub	r8,-32
8001a218:	70 08       	ld.w	r8,r8[0x0]
8001a21a:	f6 08 00 0a 	add	r10,r11,r8
8001a21e:	ee fb ff e0 	ld.w	r11,r7[-32]
8001a222:	12 98       	mov	r8,r9
8001a224:	a1 78       	lsl	r8,0x1
8001a226:	12 08       	add	r8,r9
8001a228:	a5 68       	lsl	r8,0x4
8001a22a:	f6 08 00 08 	add	r8,r11,r8
8001a22e:	2d c8       	sub	r8,-36
8001a230:	91 0a       	st.w	r8[0x0],r10
				break;
8001a232:	c1 e8       	rjmp	8001a26e <run_scheduler_update+0x194>
				case PERIODIC_RELATIVE:
					ts->tasks[i].next_run = GET_TIME + ts->tasks[i].repeat_period;
8001a234:	ee f5 ff e4 	ld.w	r5,r7[-28]
8001a238:	f0 16 00 29 	mcall	r6[164]
8001a23c:	18 9a       	mov	r10,r12
8001a23e:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001a242:	ee fb ff e0 	ld.w	r11,r7[-32]
8001a246:	12 98       	mov	r8,r9
8001a248:	a1 78       	lsl	r8,0x1
8001a24a:	12 08       	add	r8,r9
8001a24c:	a5 68       	lsl	r8,0x4
8001a24e:	f6 08 00 08 	add	r8,r11,r8
8001a252:	2e 08       	sub	r8,-32
8001a254:	70 08       	ld.w	r8,r8[0x0]
8001a256:	f4 08 00 09 	add	r9,r10,r8
8001a25a:	ee fa ff e0 	ld.w	r10,r7[-32]
8001a25e:	0a 98       	mov	r8,r5
8001a260:	a1 78       	lsl	r8,0x1
8001a262:	0a 08       	add	r8,r5
8001a264:	a5 68       	lsl	r8,0x4
8001a266:	f4 08 00 08 	add	r8,r10,r8
8001a26a:	2d c8       	sub	r8,-36
8001a26c:	91 09       	st.w	r8[0x0],r9
				break;
			}
			if (ts->tasks[i].run_mode==RUN_ONCE) ts->tasks[i].run_mode=RUN_NEVER;
8001a26e:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001a272:	ee fa ff e0 	ld.w	r10,r7[-32]
8001a276:	12 98       	mov	r8,r9
8001a278:	a1 78       	lsl	r8,0x1
8001a27a:	12 08       	add	r8,r9
8001a27c:	a5 68       	lsl	r8,0x4
8001a27e:	f4 08 00 08 	add	r8,r10,r8
8001a282:	2e 88       	sub	r8,-24
8001a284:	70 08       	ld.w	r8,r8[0x0]
8001a286:	58 18       	cp.w	r8,1
8001a288:	c0 e1       	brne	8001a2a4 <run_scheduler_update+0x1ca>
8001a28a:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001a28e:	ee fa ff e0 	ld.w	r10,r7[-32]
8001a292:	12 98       	mov	r8,r9
8001a294:	a1 78       	lsl	r8,0x1
8001a296:	12 08       	add	r8,r9
8001a298:	a5 68       	lsl	r8,0x4
8001a29a:	f4 08 00 08 	add	r8,r10,r8
8001a29e:	2e 88       	sub	r8,-24
8001a2a0:	30 09       	mov	r9,0
8001a2a2:	91 09       	st.w	r8[0x0],r9
			if (ts->tasks[i].next_run < current_time) {
8001a2a4:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001a2a8:	ee fa ff e0 	ld.w	r10,r7[-32]
8001a2ac:	12 98       	mov	r8,r9
8001a2ae:	a1 78       	lsl	r8,0x1
8001a2b0:	12 08       	add	r8,r9
8001a2b2:	a5 68       	lsl	r8,0x4
8001a2b4:	f4 08 00 08 	add	r8,r10,r8
8001a2b8:	2d c8       	sub	r8,-36
8001a2ba:	70 09       	ld.w	r9,r8[0x0]
8001a2bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001a2c0:	10 39       	cp.w	r9,r8
8001a2c2:	c3 92       	brcc	8001a334 <run_scheduler_update+0x25a>
				realtime_violation=-i; //realtime violation!!
8001a2c4:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001a2c8:	5c 38       	neg	r8
8001a2ca:	ef 48 ff e8 	st.w	r7[-24],r8
				ts->tasks[i].rt_violations++;
8001a2ce:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001a2d2:	ee fa ff e0 	ld.w	r10,r7[-32]
8001a2d6:	12 98       	mov	r8,r9
8001a2d8:	a1 78       	lsl	r8,0x1
8001a2da:	12 08       	add	r8,r9
8001a2dc:	a5 68       	lsl	r8,0x4
8001a2de:	f4 08 00 08 	add	r8,r10,r8
8001a2e2:	2c 88       	sub	r8,-56
8001a2e4:	70 08       	ld.w	r8,r8[0x0]
8001a2e6:	f0 ca ff ff 	sub	r10,r8,-1
8001a2ea:	ee fb ff e0 	ld.w	r11,r7[-32]
8001a2ee:	12 98       	mov	r8,r9
8001a2f0:	a1 78       	lsl	r8,0x1
8001a2f2:	12 08       	add	r8,r9
8001a2f4:	a5 68       	lsl	r8,0x4
8001a2f6:	f6 08 00 08 	add	r8,r11,r8
8001a2fa:	2c 88       	sub	r8,-56
8001a2fc:	91 0a       	st.w	r8[0x0],r10
				ts->tasks[i].next_run=current_time + ts->tasks[i].repeat_period;
8001a2fe:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001a302:	ee fa ff e4 	ld.w	r10,r7[-28]
8001a306:	ee fb ff e0 	ld.w	r11,r7[-32]
8001a30a:	14 98       	mov	r8,r10
8001a30c:	a1 78       	lsl	r8,0x1
8001a30e:	14 08       	add	r8,r10
8001a310:	a5 68       	lsl	r8,0x4
8001a312:	f6 08 00 08 	add	r8,r11,r8
8001a316:	2e 08       	sub	r8,-32
8001a318:	70 0a       	ld.w	r10,r8[0x0]
8001a31a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001a31e:	10 0a       	add	r10,r8
8001a320:	ee fb ff e0 	ld.w	r11,r7[-32]
8001a324:	12 98       	mov	r8,r9
8001a326:	a1 78       	lsl	r8,0x1
8001a328:	12 08       	add	r8,r9
8001a32a:	a5 68       	lsl	r8,0x4
8001a32c:	f6 08 00 08 	add	r8,r11,r8
8001a330:	2d c8       	sub	r8,-36
8001a332:	91 0a       	st.w	r8[0x0],r10
			}
			
			
			ts->tasks[i].delay_avg= (7*ts->tasks[i].delay_avg + delay)/8;
8001a334:	ee fc ff e4 	ld.w	r12,r7[-28]
8001a338:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001a33c:	ee fa ff e0 	ld.w	r10,r7[-32]
8001a340:	f0 c9 ff ff 	sub	r9,r8,-1
8001a344:	12 98       	mov	r8,r9
8001a346:	a1 78       	lsl	r8,0x1
8001a348:	12 08       	add	r8,r9
8001a34a:	a5 68       	lsl	r8,0x4
8001a34c:	f4 08 00 08 	add	r8,r10,r8
8001a350:	70 09       	ld.w	r9,r8[0x0]
8001a352:	12 98       	mov	r8,r9
8001a354:	a3 78       	lsl	r8,0x3
8001a356:	f0 09 01 09 	sub	r9,r8,r9
8001a35a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a35e:	f2 08 00 08 	add	r8,r9,r8
8001a362:	f0 0a 16 03 	lsr	r10,r8,0x3
8001a366:	ee fb ff e0 	ld.w	r11,r7[-32]
8001a36a:	f8 c9 ff ff 	sub	r9,r12,-1
8001a36e:	12 98       	mov	r8,r9
8001a370:	a1 78       	lsl	r8,0x1
8001a372:	12 08       	add	r8,r9
8001a374:	a5 68       	lsl	r8,0x4
8001a376:	f6 08 00 08 	add	r8,r11,r8
8001a37a:	91 0a       	st.w	r8[0x0],r10
			if (delay>ts->tasks[i].delay_max) ts->tasks[i].delay_max=delay;
8001a37c:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001a380:	ee fa ff e0 	ld.w	r10,r7[-32]
8001a384:	12 98       	mov	r8,r9
8001a386:	a1 78       	lsl	r8,0x1
8001a388:	12 08       	add	r8,r9
8001a38a:	a5 68       	lsl	r8,0x4
8001a38c:	f4 08 00 08 	add	r8,r10,r8
8001a390:	2d 48       	sub	r8,-44
8001a392:	70 09       	ld.w	r9,r8[0x0]
8001a394:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a398:	10 39       	cp.w	r9,r8
8001a39a:	c0 f2       	brcc	8001a3b8 <run_scheduler_update+0x2de>
8001a39c:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001a3a0:	ee fa ff e0 	ld.w	r10,r7[-32]
8001a3a4:	12 98       	mov	r8,r9
8001a3a6:	a1 78       	lsl	r8,0x1
8001a3a8:	12 08       	add	r8,r9
8001a3aa:	a5 68       	lsl	r8,0x4
8001a3ac:	f4 08 00 08 	add	r8,r10,r8
8001a3b0:	2d 48       	sub	r8,-44
8001a3b2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001a3b6:	91 09       	st.w	r8[0x0],r9
			
			ts->tasks[i].delay_var_squared=(15*ts->tasks[i].delay_var_squared+(delay - ts->tasks[i].delay_avg)*(delay - ts->tasks[i].delay_avg))/16;
8001a3b8:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001a3bc:	ee fa ff e4 	ld.w	r10,r7[-28]
8001a3c0:	ee fb ff e0 	ld.w	r11,r7[-32]
8001a3c4:	14 98       	mov	r8,r10
8001a3c6:	a1 78       	lsl	r8,0x1
8001a3c8:	14 08       	add	r8,r10
8001a3ca:	a5 68       	lsl	r8,0x4
8001a3cc:	f6 08 00 08 	add	r8,r11,r8
8001a3d0:	2c c8       	sub	r8,-52
8001a3d2:	70 0a       	ld.w	r10,r8[0x0]
8001a3d4:	14 98       	mov	r8,r10
8001a3d6:	a5 68       	lsl	r8,0x4
8001a3d8:	f0 0a 01 0b 	sub	r11,r8,r10
8001a3dc:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001a3e0:	ee fc ff e0 	ld.w	r12,r7[-32]
8001a3e4:	f0 ca ff ff 	sub	r10,r8,-1
8001a3e8:	14 98       	mov	r8,r10
8001a3ea:	a1 78       	lsl	r8,0x1
8001a3ec:	14 08       	add	r8,r10
8001a3ee:	a5 68       	lsl	r8,0x4
8001a3f0:	f8 08 00 08 	add	r8,r12,r8
8001a3f4:	70 08       	ld.w	r8,r8[0x0]
8001a3f6:	ee fa ff f8 	ld.w	r10,r7[-8]
8001a3fa:	f4 08 01 0c 	sub	r12,r10,r8
8001a3fe:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001a402:	ee fe ff e0 	ld.w	lr,r7[-32]
8001a406:	f0 ca ff ff 	sub	r10,r8,-1
8001a40a:	14 98       	mov	r8,r10
8001a40c:	a1 78       	lsl	r8,0x1
8001a40e:	14 08       	add	r8,r10
8001a410:	a5 68       	lsl	r8,0x4
8001a412:	fc 08 00 08 	add	r8,lr,r8
8001a416:	70 08       	ld.w	r8,r8[0x0]
8001a418:	ee fa ff f8 	ld.w	r10,r7[-8]
8001a41c:	f4 08 01 08 	sub	r8,r10,r8
8001a420:	f8 08 02 48 	mul	r8,r12,r8
8001a424:	f6 08 00 08 	add	r8,r11,r8
8001a428:	f0 0a 16 04 	lsr	r10,r8,0x4
8001a42c:	ee fb ff e0 	ld.w	r11,r7[-32]
8001a430:	12 98       	mov	r8,r9
8001a432:	a1 78       	lsl	r8,0x1
8001a434:	12 08       	add	r8,r9
8001a436:	a5 68       	lsl	r8,0x4
8001a438:	f6 08 00 08 	add	r8,r11,r8
8001a43c:	2c c8       	sub	r8,-52
8001a43e:	91 0a       	st.w	r8[0x0],r10
			
			ts->tasks[i].execution_time= (7*ts->tasks[i].execution_time + (GET_TIME-task_start_time))/8;
8001a440:	ee f5 ff e4 	ld.w	r5,r7[-28]
8001a444:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001a448:	ee fa ff e0 	ld.w	r10,r7[-32]
8001a44c:	12 98       	mov	r8,r9
8001a44e:	a1 78       	lsl	r8,0x1
8001a450:	12 08       	add	r8,r9
8001a452:	a5 68       	lsl	r8,0x4
8001a454:	f4 08 00 08 	add	r8,r10,r8
8001a458:	2d 88       	sub	r8,-40
8001a45a:	70 09       	ld.w	r9,r8[0x0]
8001a45c:	12 98       	mov	r8,r9
8001a45e:	a3 78       	lsl	r8,0x3
8001a460:	f0 09 01 03 	sub	r3,r8,r9
8001a464:	f0 16 00 29 	mcall	r6[164]
8001a468:	18 99       	mov	r9,r12
8001a46a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a46e:	f2 08 01 08 	sub	r8,r9,r8
8001a472:	e6 08 00 08 	add	r8,r3,r8
8001a476:	f0 09 16 03 	lsr	r9,r8,0x3
8001a47a:	ee fa ff e0 	ld.w	r10,r7[-32]
8001a47e:	0a 98       	mov	r8,r5
8001a480:	a1 78       	lsl	r8,0x1
8001a482:	0a 08       	add	r8,r5
8001a484:	a5 68       	lsl	r8,0x4
8001a486:	f4 08 00 08 	add	r8,r10,r8
8001a48a:	2d 88       	sub	r8,-40
8001a48c:	91 09       	st.w	r8[0x0],r9
						
			switch (schedule_strategy) {
8001a48e:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8001a492:	58 18       	cp.w	r8,1
8001a494:	c0 81       	brne	8001a4a4 <run_scheduler_update+0x3ca>
			case FIXED_PRIORITY: 
				ts->current_schedule_slot=0;
8001a496:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001a49a:	30 09       	mov	r9,0
8001a49c:	91 29       	st.w	r8[0x8],r9
				return realtime_violation;
8001a49e:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001a4a2:	c2 08       	rjmp	8001a4e2 <run_scheduler_update+0x408>
				
			default:
			case ROUND_ROBIN:
				// round robin scheme - scheduler will pick up where it left.
				if (i==ts->number_of_tasks) ts->current_schedule_slot=0;
8001a4a4:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001a4a8:	11 88       	ld.ub	r8,r8[0x0]
8001a4aa:	10 99       	mov	r9,r8
8001a4ac:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001a4b0:	10 39       	cp.w	r9,r8
8001a4b2:	c0 51       	brne	8001a4bc <run_scheduler_update+0x3e2>
8001a4b4:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001a4b8:	30 09       	mov	r9,0
8001a4ba:	91 29       	st.w	r8[0x8],r9
				return realtime_violation;
8001a4bc:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001a4c0:	c1 18       	rjmp	8001a4e2 <run_scheduler_update+0x408>
int run_scheduler_update(task_set *ts, uint8_t schedule_strategy) {
	int i;
	int realtime_violation=0;
	function_pointer call_task;
	task_return_t treturn;
	for (i=ts->current_schedule_slot; i<ts->number_of_tasks; i++) {
8001a4c2:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001a4c6:	2f f8       	sub	r8,-1
8001a4c8:	ef 48 ff e4 	st.w	r7[-28],r8
8001a4cc:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001a4d0:	11 88       	ld.ub	r8,r8[0x0]
8001a4d2:	10 99       	mov	r9,r8
8001a4d4:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001a4d8:	10 39       	cp.w	r9,r8
8001a4da:	fe 99 fe 16 	brgt	8001a106 <run_scheduler_update+0x2c>
				return realtime_violation;
			}
			
		}
	}
	return realtime_violation;;
8001a4de:	ee f8 ff e8 	ld.w	r8,r7[-24]
}
8001a4e2:	10 9c       	mov	r12,r8
8001a4e4:	2f 7d       	sub	sp,-36
8001a4e6:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001a4ea:	00 00       	add	r0,r0
8001a4ec:	80 01       	ld.sh	r1,r0[0x0]
8001a4ee:	9f 6a       	st.w	pc[0x18],r10

8001a4f0 <get_task_by_id>:


task_entry* get_task_by_id(task_set *ts, uint16_t task_id){
8001a4f0:	eb cd 40 80 	pushm	r7,lr
8001a4f4:	1a 97       	mov	r7,sp
8001a4f6:	20 3d       	sub	sp,12
8001a4f8:	ef 4c ff f8 	st.w	r7[-8],r12
8001a4fc:	16 98       	mov	r8,r11
8001a4fe:	ef 58 ff f4 	st.h	r7[-12],r8
	int i=0;
8001a502:	30 08       	mov	r8,0
8001a504:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i=0; i<ts->number_of_tasks; i++) {
8001a508:	30 08       	mov	r8,0
8001a50a:	ef 48 ff fc 	st.w	r7[-4],r8
8001a50e:	c2 58       	rjmp	8001a558 <get_task_by_id+0x68>
		if (ts->tasks[i].task_id==task_id) return &ts->tasks[i];
8001a510:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001a514:	ee fa ff f8 	ld.w	r10,r7[-8]
8001a518:	12 98       	mov	r8,r9
8001a51a:	a1 78       	lsl	r8,0x1
8001a51c:	12 08       	add	r8,r9
8001a51e:	a1 78       	lsl	r8,0x1
8001a520:	2f f8       	sub	r8,-1
8001a522:	a3 78       	lsl	r8,0x3
8001a524:	f4 08 00 08 	add	r8,r10,r8
8001a528:	90 68       	ld.sh	r8,r8[0xc]
8001a52a:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8001a52e:	f0 09 19 00 	cp.h	r9,r8
8001a532:	c0 e1       	brne	8001a54e <get_task_by_id+0x5e>
8001a534:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a538:	f0 ca ff f4 	sub	r10,r8,-12
8001a53c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001a540:	12 98       	mov	r8,r9
8001a542:	a1 78       	lsl	r8,0x1
8001a544:	12 08       	add	r8,r9
8001a546:	a5 68       	lsl	r8,0x4
8001a548:	f4 08 00 08 	add	r8,r10,r8
8001a54c:	c1 08       	rjmp	8001a56c <get_task_by_id+0x7c>
}


task_entry* get_task_by_id(task_set *ts, uint16_t task_id){
	int i=0;
	for (i=0; i<ts->number_of_tasks; i++) {
8001a54e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a552:	2f f8       	sub	r8,-1
8001a554:	ef 48 ff fc 	st.w	r7[-4],r8
8001a558:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a55c:	11 88       	ld.ub	r8,r8[0x0]
8001a55e:	10 99       	mov	r9,r8
8001a560:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a564:	10 39       	cp.w	r9,r8
8001a566:	fe 99 ff d5 	brgt	8001a510 <get_task_by_id+0x20>
		if (ts->tasks[i].task_id==task_id) return &ts->tasks[i];
	}
	return NULL;
8001a56a:	30 08       	mov	r8,0
}
8001a56c:	10 9c       	mov	r12,r8
8001a56e:	2f dd       	sub	sp,-12
8001a570:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a574 <get_task_by_index>:

task_entry* get_task_by_index(task_set *ts, uint16_t task_index) {
8001a574:	eb cd 40 80 	pushm	r7,lr
8001a578:	1a 97       	mov	r7,sp
8001a57a:	20 2d       	sub	sp,8
8001a57c:	ef 4c ff fc 	st.w	r7[-4],r12
8001a580:	16 98       	mov	r8,r11
8001a582:	ef 58 ff f8 	st.h	r7[-8],r8
	if (task_index<ts->number_of_tasks) {
8001a586:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a58a:	11 88       	ld.ub	r8,r8[0x0]
8001a58c:	ef 09 ff f8 	ld.sh	r9,r7[-8]
8001a590:	f0 09 19 00 	cp.h	r9,r8
8001a594:	c0 e2       	brcc	8001a5b0 <get_task_by_index+0x3c>
		return &ts->tasks[task_index];
8001a596:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a59a:	f0 ca ff f4 	sub	r10,r8,-12
8001a59e:	ef 19 ff f8 	ld.uh	r9,r7[-8]
8001a5a2:	12 98       	mov	r8,r9
8001a5a4:	a1 78       	lsl	r8,0x1
8001a5a6:	12 08       	add	r8,r9
8001a5a8:	a5 68       	lsl	r8,0x4
8001a5aa:	f4 08 00 08 	add	r8,r10,r8
8001a5ae:	c0 28       	rjmp	8001a5b2 <get_task_by_index+0x3e>
	}
	return NULL;
8001a5b0:	30 08       	mov	r8,0
}
8001a5b2:	10 9c       	mov	r12,r8
8001a5b4:	2f ed       	sub	sp,-8
8001a5b6:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a5ba <change_run_mode>:

void change_run_mode(task_entry *te, task_run_mode_t new_run_mode) {
8001a5ba:	eb cd 40 80 	pushm	r7,lr
8001a5be:	1a 97       	mov	r7,sp
8001a5c0:	20 2d       	sub	sp,8
8001a5c2:	ef 4c ff fc 	st.w	r7[-4],r12
8001a5c6:	ef 4b ff f8 	st.w	r7[-8],r11
	te->run_mode=new_run_mode;
8001a5ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a5ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001a5d2:	91 39       	st.w	r8[0xc],r9
}
8001a5d4:	2f ed       	sub	sp,-8
8001a5d6:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a5da <change_task_period>:

void change_task_period(task_entry *te, unsigned long repeat_period) {
8001a5da:	eb cd 40 c0 	pushm	r6-r7,lr
8001a5de:	1a 97       	mov	r7,sp
8001a5e0:	20 2d       	sub	sp,8
8001a5e2:	48 c6       	lddpc	r6,8001a610 <change_task_period+0x36>
8001a5e4:	1e 26       	rsub	r6,pc
8001a5e6:	ef 4c ff fc 	st.w	r7[-4],r12
8001a5ea:	ef 4b ff f8 	st.w	r7[-8],r11
	te->repeat_period=repeat_period;
8001a5ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a5f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001a5f6:	91 59       	st.w	r8[0x14],r9
	change_run_mode(te, RUN_REGULAR);
8001a5f8:	30 2b       	mov	r11,2
8001a5fa:	ee fc ff fc 	ld.w	r12,r7[-4]
8001a5fe:	f0 16 00 ab 	mcall	r6[684]
	run_task_now(te);
8001a602:	ee fc ff fc 	ld.w	r12,r7[-4]
8001a606:	f0 16 00 ff 	mcall	r6[1020]
}
8001a60a:	2f ed       	sub	sp,-8
8001a60c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a610:	80 01       	ld.sh	r1,r0[0x0]
8001a612:	a4 68       	st.h	r2[0xc],r8

8001a614 <suspend_task>:

void suspend_task(task_entry *te, unsigned long delay) {
8001a614:	eb cd 40 c0 	pushm	r6-r7,lr
8001a618:	1a 97       	mov	r7,sp
8001a61a:	20 2d       	sub	sp,8
8001a61c:	48 96       	lddpc	r6,8001a640 <suspend_task+0x2c>
8001a61e:	1e 26       	rsub	r6,pc
8001a620:	ef 4c ff fc 	st.w	r7[-4],r12
8001a624:	ef 4b ff f8 	st.w	r7[-8],r11
	te->next_run=GET_TIME + delay;
8001a628:	f0 16 00 29 	mcall	r6[164]
8001a62c:	18 99       	mov	r9,r12
8001a62e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a632:	10 09       	add	r9,r8
8001a634:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a638:	91 69       	st.w	r8[0x18],r9
}
8001a63a:	2f ed       	sub	sp,-8
8001a63c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a640:	80 01       	ld.sh	r1,r0[0x0]
8001a642:	a4 a2       	st.b	r2[0x2],r2

8001a644 <run_task_now>:

void run_task_now(task_entry *te) {
8001a644:	eb cd 40 80 	pushm	r7,lr
8001a648:	1a 97       	mov	r7,sp
8001a64a:	20 1d       	sub	sp,4
8001a64c:	ef 4c ff fc 	st.w	r7[-4],r12
	if ((te->run_mode==RUN_NEVER)){
8001a650:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a654:	70 38       	ld.w	r8,r8[0xc]
8001a656:	58 08       	cp.w	r8,0
8001a658:	c0 51       	brne	8001a662 <run_task_now+0x1e>
		te->run_mode=RUN_ONCE;
8001a65a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a65e:	30 19       	mov	r9,1
8001a660:	91 39       	st.w	r8[0xc],r9
		//te->next_run=GET_TIME;
	} 
}
8001a662:	2f fd       	sub	sp,-4
8001a664:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a668 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8001a668:	eb cd 40 c0 	pushm	r6-r7,lr
8001a66c:	1a 97       	mov	r7,sp
8001a66e:	20 6d       	sub	sp,24
8001a670:	49 e6       	lddpc	r6,8001a6e8 <interpolate+0x80>
8001a672:	1e 26       	rsub	r6,pc
8001a674:	ef 4c ff f8 	st.w	r7[-8],r12
8001a678:	ef 4b ff f4 	st.w	r7[-12],r11
8001a67c:	ef 4a ff f0 	st.w	r7[-16],r10
8001a680:	ef 49 ff ec 	st.w	r7[-20],r9
8001a684:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001a688:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001a68c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001a690:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001a694:	c0 41       	brne	8001a69c <interpolate+0x34>
	{
		return y1;
8001a696:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001a69a:	c2 38       	rjmp	8001a6e0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8001a69c:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001a6a0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001a6a4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001a6a8:	ee fa ff f8 	ld.w	r10,r7[-8]
8001a6ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001a6b0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001a6b4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001a6b8:	ee fa ff f0 	ld.w	r10,r7[-16]
8001a6bc:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001a6c0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001a6c4:	12 9b       	mov	r11,r9
8001a6c6:	10 9c       	mov	r12,r8
8001a6c8:	f0 16 00 08 	mcall	r6[32]
8001a6cc:	18 98       	mov	r8,r12
8001a6ce:	10 99       	mov	r9,r8
8001a6d0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001a6d4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001a6d8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8001a6dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8001a6e0:	10 9c       	mov	r12,r8
8001a6e2:	2f ad       	sub	sp,-24
8001a6e4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a6e8:	80 01       	ld.sh	r1,r0[0x0]
8001a6ea:	a4 f6       	st.b	r2[0x7],r6

8001a6ec <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8001a6ec:	eb cd 40 c0 	pushm	r6-r7,lr
8001a6f0:	1a 97       	mov	r7,sp
8001a6f2:	20 3d       	sub	sp,12
8001a6f4:	49 06       	lddpc	r6,8001a734 <mav_array_memcpy+0x48>
8001a6f6:	1e 26       	rsub	r6,pc
8001a6f8:	ef 4c ff fc 	st.w	r7[-4],r12
8001a6fc:	ef 4b ff f8 	st.w	r7[-8],r11
8001a700:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8001a704:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a708:	58 08       	cp.w	r8,0
8001a70a:	c0 91       	brne	8001a71c <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8001a70c:	ee fa ff f4 	ld.w	r10,r7[-12]
8001a710:	30 0b       	mov	r11,0
8001a712:	ee fc ff fc 	ld.w	r12,r7[-4]
8001a716:	f0 16 00 31 	mcall	r6[196]
8001a71a:	c0 98       	rjmp	8001a72c <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8001a71c:	ee fa ff f4 	ld.w	r10,r7[-12]
8001a720:	ee fb ff f8 	ld.w	r11,r7[-8]
8001a724:	ee fc ff fc 	ld.w	r12,r7[-4]
8001a728:	f0 16 00 21 	mcall	r6[132]
	}
}
8001a72c:	2f dd       	sub	sp,-12
8001a72e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a732:	00 00       	add	r0,r0
8001a734:	80 01       	ld.sh	r1,r0[0x0]
8001a736:	a5 7a       	lsl	r10,0x5

8001a738 <init_gps_ubx>:
************************************************************************************
Initialization of the GPS with the type of platform
************************************************************************************
*/
void init_gps_ubx(enum GPS_Engine_Setting _engine_nav_setting)
{
8001a738:	eb cd 40 c0 	pushm	r6-r7,lr
8001a73c:	1a 97       	mov	r7,sp
8001a73e:	20 2d       	sub	sp,8
8001a740:	4a 26       	lddpc	r6,8001a7c8 <init_gps_ubx+0x90>
8001a742:	1e 26       	rsub	r6,pc
8001a744:	ef 4c ff f8 	st.w	r7[-8],r12
	centralData = get_central_data();
8001a748:	f0 16 00 33 	mcall	r6[204]
8001a74c:	18 99       	mov	r9,r12
8001a74e:	ec f8 00 00 	ld.w	r8,r6[0]
8001a752:	91 09       	st.w	r8[0x0],r9
	
	//centralData->gps_stream_out.flush(centralData->gps_stream_out.data);
	
	uint8_t epoch = TIME_OF_WEEK;
8001a754:	30 18       	mov	r8,1
8001a756:	ef 68 ff ff 	st.b	r7[-1],r8
	idleTimeout = 1200;
8001a75a:	ec f8 04 20 	ld.w	r8,r6[1056]
8001a75e:	e0 69 04 b0 	mov	r9,1200
8001a762:	91 09       	st.w	r8[0x0],r9
	
	configure_gps();
8001a764:	f0 16 01 80 	mcall	r6[1536]
	
	engine_nav_setting = _engine_nav_setting;
8001a768:	ec f8 01 d8 	ld.w	r8,r6[472]
8001a76c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001a770:	91 09       	st.w	r8[0x0],r9
	
	centralData->GPS_data.status = NO_FIX;
8001a772:	ec f8 00 00 	ld.w	r8,r6[0]
8001a776:	70 09       	ld.w	r9,r8[0x0]
8001a778:	30 18       	mov	r8,1
8001a77a:	f3 68 0b 54 	st.b	r9[2900],r8
	centralData->GPS_data.num_sats = 0;
8001a77e:	ec f8 00 00 	ld.w	r8,r6[0]
8001a782:	70 09       	ld.w	r9,r8[0x0]
8001a784:	30 08       	mov	r8,0
8001a786:	f3 68 0b 48 	st.b	r9[2888],r8
	
	next_fix = false;
8001a78a:	ec f9 01 e4 	ld.w	r9,r6[484]
8001a78e:	30 08       	mov	r8,0
8001a790:	b2 88       	st.b	r9[0x0],r8
// 	new_data = false;
// 	valid_read = false;
	have_raw_velocity = false;
8001a792:	ec f9 03 b4 	ld.w	r9,r6[948]
8001a796:	30 08       	mov	r8,0
8001a798:	b2 88       	st.b	r9[0x0],r8
	fix = false;
8001a79a:	ec f9 06 4c 	ld.w	r9,r6[1612]
8001a79e:	30 08       	mov	r8,0
8001a7a0:	b2 88       	st.b	r9[0x0],r8
	
	last_fix_time = 0;
8001a7a2:	ec f8 06 b4 	ld.w	r8,r6[1716]
8001a7a6:	30 09       	mov	r9,0
8001a7a8:	91 09       	st.w	r8[0x0],r9
	
	new_position = false;
8001a7aa:	ec f9 02 4c 	ld.w	r9,r6[588]
8001a7ae:	30 08       	mov	r8,0
8001a7b0:	b2 88       	st.b	r9[0x0],r8
	new_speed = false;
8001a7b2:	ec f9 02 18 	ld.w	r9,r6[536]
8001a7b6:	30 08       	mov	r8,0
8001a7b8:	b2 88       	st.b	r9[0x0],r8
	
	step = 0;
8001a7ba:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a7be:	30 08       	mov	r8,0
8001a7c0:	b2 88       	st.b	r9[0x0],r8
	}
8001a7c2:	2f ed       	sub	sp,-8
8001a7c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a7c8:	80 01       	ld.sh	r1,r0[0x0]
8001a7ca:	a5 c6       	cbr	r6,0x4
8001a7cc:	6c 61       	ld.w	r1,r6[0x18]
8001a7ce:	72 67       	ld.w	r7,r9[0x18]
8001a7d0:	65 20       	ld.w	r0,r2[0x48]
8001a7d2:	70 61       	ld.w	r1,r8[0x18]
8001a7d4:	79 6c       	ld.w	r12,r12[0x58]
8001a7d6:	6f 61       	ld.w	r1,r7[0x58]
8001a7d8:	64 3a       	ld.w	r10,r2[0xc]
8001a7da:	20 00       	sub	r0,0
8001a7dc:	0a 00       	add	r0,r5
8001a7de:	00 00       	add	r0,r0
8001a7e0:	57 72       	stdsp	sp[0x1dc],r2
8001a7e2:	6f 6e       	ld.w	lr,r7[0x58]
8001a7e4:	67 20       	ld.w	r0,r3[0x48]
8001a7e6:	50 6f       	stdsp	sp[0x18],pc
8001a7e8:	73 6c       	ld.w	r12,r9[0x58]
8001a7ea:	6c 68       	ld.w	r8,r6[0x18]
8001a7ec:	20 6d       	sub	sp,24
8001a7ee:	65 73       	ld.w	r3,r2[0x5c]
8001a7f0:	73 61       	ld.w	r1,r9[0x58]
8001a7f2:	67 65       	ld.w	r5,r3[0x58]
8001a7f4:	20 30       	sub	r0,3
8001a7f6:	78 00       	ld.w	r0,r12[0x0]
8001a7f8:	20 4d       	sub	sp,16
8001a7fa:	73 67       	ld.w	r7,r9[0x58]
8001a7fc:	20 69       	sub	r9,6
8001a7fe:	64 3a       	ld.w	r10,r2[0xc]
8001a800:	20 30       	sub	r0,3
8001a802:	78 00       	ld.w	r0,r12[0x0]
8001a804:	20 52       	sub	r2,5
8001a806:	65 63       	ld.w	r3,r2[0x58]
8001a808:	65 69       	ld.w	r9,r2[0x58]
8001a80a:	76 65       	ld.w	r5,r11[0x18]
8001a80c:	64 20       	ld.w	r0,r2[0x8]
8001a80e:	73 69       	ld.w	r9,r9[0x58]
8001a810:	7a 65       	ld.w	r5,sp[0x18]
8001a812:	3a 00       	mov	r0,-96
8001a814:	20 73       	sub	r3,7
8001a816:	68 6f       	ld.w	pc,r4[0x18]
8001a818:	75 6c       	ld.w	r12,r10[0x58]
8001a81a:	64 20       	ld.w	r0,r2[0x8]
8001a81c:	62 65       	ld.w	r5,r1[0x18]
8001a81e:	3a 00       	mov	r0,-96
8001a820:	57 72       	stdsp	sp[0x1dc],r2
8001a822:	6f 6e       	ld.w	lr,r7[0x58]
8001a824:	67 20       	ld.w	r0,r3[0x48]
8001a826:	4e 61       	lddpc	r1,8001a9bc <init_gps_ubx+0x284>
8001a828:	76 20       	ld.w	r0,r11[0x8]
8001a82a:	53 74       	stdsp	sp[0xdc],r4
8001a82c:	61 74       	ld.w	r4,r0[0x5c]
8001a82e:	75 73       	ld.w	r3,r10[0x5c]
8001a830:	20 6d       	sub	sp,24
8001a832:	65 73       	ld.w	r3,r2[0x5c]
8001a834:	73 61       	ld.w	r1,r9[0x58]
8001a836:	67 65       	ld.w	r5,r3[0x58]
8001a838:	20 30       	sub	r0,3
8001a83a:	78 00       	ld.w	r0,r12[0x0]
8001a83c:	57 72       	stdsp	sp[0x1dc],r2
8001a83e:	6f 6e       	ld.w	lr,r7[0x58]
8001a840:	67 20       	ld.w	r0,r3[0x48]
8001a842:	53 6f       	stdsp	sp[0xd8],pc
8001a844:	6c 75       	ld.w	r5,r6[0x1c]
8001a846:	74 69       	ld.w	r9,r10[0x18]
8001a848:	6f 6e       	ld.w	lr,r7[0x58]
8001a84a:	20 6d       	sub	sp,24
8001a84c:	65 73       	ld.w	r3,r2[0x5c]
8001a84e:	73 61       	ld.w	r1,r9[0x58]
8001a850:	67 65       	ld.w	r5,r3[0x58]
8001a852:	20 30       	sub	r0,3
8001a854:	78 00       	ld.w	r0,r12[0x0]
8001a856:	00 00       	add	r0,r0
8001a858:	57 72       	stdsp	sp[0x1dc],r2
8001a85a:	6f 6e       	ld.w	lr,r7[0x58]
8001a85c:	67 20       	ld.w	r0,r3[0x48]
8001a85e:	56 65       	stdsp	sp[0x198],r5
8001a860:	6c 6e       	ld.w	lr,r6[0x18]
8001a862:	65 64       	ld.w	r4,r2[0x58]
8001a864:	20 6d       	sub	sp,24
8001a866:	65 73       	ld.w	r3,r2[0x5c]
8001a868:	73 61       	ld.w	r1,r9[0x58]
8001a86a:	67 65       	ld.w	r5,r3[0x58]
8001a86c:	20 30       	sub	r0,3
8001a86e:	78 00       	ld.w	r0,r12[0x0]
8001a870:	57 72       	stdsp	sp[0x1dc],r2
8001a872:	6f 6e       	ld.w	lr,r7[0x58]
8001a874:	67 20       	ld.w	r0,r3[0x48]
8001a876:	53 56       	stdsp	sp[0xd4],r6
8001a878:	20 49       	sub	r9,4
8001a87a:	6e 66       	ld.w	r6,r7[0x18]
8001a87c:	6f 20       	ld.w	r0,r7[0x48]
8001a87e:	6d 65       	ld.w	r5,r6[0x58]
8001a880:	73 73       	ld.w	r3,r9[0x5c]
8001a882:	61 67       	ld.w	r7,r0[0x58]
8001a884:	65 20       	ld.w	r0,r2[0x48]
8001a886:	30 78       	mov	r8,7
8001a888:	00 00       	add	r0,r0
8001a88a:	00 00       	add	r0,r0
8001a88c:	55 6e       	stdsp	sp[0x158],lr
8001a88e:	65 78       	ld.w	r8,r2[0x5c]
8001a890:	70 65       	ld.w	r5,r8[0x18]
8001a892:	63 74       	ld.w	r4,r1[0x5c]
8001a894:	65 64       	ld.w	r4,r2[0x58]
8001a896:	20 4e       	sub	lr,4
8001a898:	41 56       	lddsp	r6,sp[0x54]
8001a89a:	20 6d       	sub	sp,24
8001a89c:	65 73       	ld.w	r3,r2[0x5c]
8001a89e:	73 61       	ld.w	r1,r9[0x58]
8001a8a0:	67 65       	ld.w	r5,r3[0x58]
8001a8a2:	2c 20       	sub	r0,-62
8001a8a4:	43 6c       	lddsp	r12,sp[0xd8]
8001a8a6:	61 73       	ld.w	r3,r0[0x5c]
8001a8a8:	73 3a       	ld.w	r10,r9[0x4c]
8001a8aa:	20 30       	sub	r0,3
8001a8ac:	78 00       	ld.w	r0,r12[0x0]
8001a8ae:	00 00       	add	r0,r0
8001a8b0:	2c 20       	sub	r0,-62
8001a8b2:	6d 73       	ld.w	r3,r6[0x5c]
8001a8b4:	67 20       	ld.w	r0,r3[0x48]
8001a8b6:	69 64       	ld.w	r4,r4[0x58]
8001a8b8:	3a 20       	mov	r0,-94
8001a8ba:	30 78       	mov	r8,7
8001a8bc:	00 00       	add	r0,r0
8001a8be:	00 00       	add	r0,r0
8001a8c0:	20 6f       	sub	pc,6
8001a8c2:	66 20       	ld.w	r0,r3[0x8]
8001a8c4:	73 69       	ld.w	r9,r9[0x58]
8001a8c6:	7a 65       	ld.w	r5,sp[0x18]
8001a8c8:	20 00       	sub	r0,0
8001a8ca:	00 00       	add	r0,r0
8001a8cc:	57 72       	stdsp	sp[0x1dc],r2
8001a8ce:	6f 6e       	ld.w	lr,r7[0x58]
8001a8d0:	67 20       	ld.w	r0,r3[0x48]
8001a8d2:	4e 61       	lddpc	r1,8001aa68 <ubx_read+0x32>
8001a8d4:	76 20       	ld.w	r0,r11[0x8]
8001a8d6:	53 65       	stdsp	sp[0xd8],r5
8001a8d8:	74 74       	ld.w	r4,r10[0x1c]
8001a8da:	69 6e       	ld.w	lr,r4[0x58]
8001a8dc:	67 73       	ld.w	r3,r3[0x5c]
8001a8de:	20 6d       	sub	sp,24
8001a8e0:	65 73       	ld.w	r3,r2[0x5c]
8001a8e2:	73 61       	ld.w	r1,r9[0x58]
8001a8e4:	67 65       	ld.w	r5,r3[0x58]
8001a8e6:	20 30       	sub	r0,3
8001a8e8:	78 00       	ld.w	r0,r12[0x0]
8001a8ea:	00 00       	add	r0,r0
8001a8ec:	57 72       	stdsp	sp[0x1dc],r2
8001a8ee:	6f 6e       	ld.w	lr,r7[0x58]
8001a8f0:	67 20       	ld.w	r0,r3[0x48]
8001a8f2:	43 46       	lddsp	r6,sp[0xd0]
8001a8f4:	47 20       	lddsp	r0,sp[0x1c8]
8001a8f6:	52 61       	stdsp	sp[0x98],r1
8001a8f8:	74 65       	ld.w	r5,r10[0x18]
8001a8fa:	20 6d       	sub	sp,24
8001a8fc:	65 73       	ld.w	r3,r2[0x5c]
8001a8fe:	73 61       	ld.w	r1,r9[0x58]
8001a900:	67 65       	ld.w	r5,r3[0x58]
8001a902:	20 30       	sub	r0,3
8001a904:	78 00       	ld.w	r0,r12[0x0]
8001a906:	00 00       	add	r0,r0
8001a908:	57 72       	stdsp	sp[0x1dc],r2
8001a90a:	6f 6e       	ld.w	lr,r7[0x58]
8001a90c:	67 20       	ld.w	r0,r3[0x48]
8001a90e:	43 46       	lddsp	r6,sp[0xd0]
8001a910:	47 20       	lddsp	r0,sp[0x1c8]
8001a912:	53 65       	stdsp	sp[0xd8],r5
8001a914:	74 2f       	ld.w	pc,r10[0x8]
8001a916:	67 65       	ld.w	r5,r3[0x58]
8001a918:	74 20       	ld.w	r0,r10[0x8]
8001a91a:	6d 65       	ld.w	r5,r6[0x58]
8001a91c:	73 73       	ld.w	r3,r9[0x5c]
8001a91e:	61 67       	ld.w	r7,r0[0x58]
8001a920:	65 20       	ld.w	r0,r2[0x48]
8001a922:	30 78       	mov	r8,7
8001a924:	00 00       	add	r0,r0
8001a926:	00 00       	add	r0,r0
8001a928:	55 6e       	stdsp	sp[0x158],lr
8001a92a:	65 78       	ld.w	r8,r2[0x5c]
8001a92c:	70 65       	ld.w	r5,r8[0x18]
8001a92e:	63 74       	ld.w	r4,r1[0x5c]
8001a930:	65 64       	ld.w	r4,r2[0x58]
8001a932:	20 43       	sub	r3,4
8001a934:	46 47       	lddsp	r7,sp[0x190]
8001a936:	20 6d       	sub	sp,24
8001a938:	65 73       	ld.w	r3,r2[0x5c]
8001a93a:	73 61       	ld.w	r1,r9[0x58]
8001a93c:	67 65       	ld.w	r5,r3[0x58]
8001a93e:	2c 20       	sub	r0,-62
8001a940:	43 6c       	lddsp	r12,sp[0xd8]
8001a942:	61 73       	ld.w	r3,r0[0x5c]
8001a944:	73 3a       	ld.w	r10,r9[0x4c]
8001a946:	20 30       	sub	r0,3
8001a948:	78 00       	ld.w	r0,r12[0x0]
8001a94a:	00 00       	add	r0,r0
8001a94c:	57 72       	stdsp	sp[0x1dc],r2
8001a94e:	6f 6e       	ld.w	lr,r7[0x58]
8001a950:	67 20       	ld.w	r0,r3[0x48]
8001a952:	4d 4f       	lddpc	pc,8001aaa0 <ubx_read+0x6a>
8001a954:	4e 20       	lddpc	r0,8001aadc <ubx_read+0xa6>
8001a956:	52 58       	stdsp	sp[0x94],r8
8001a958:	52 20       	stdsp	sp[0x88],r0
8001a95a:	6d 65       	ld.w	r5,r6[0x58]
8001a95c:	73 73       	ld.w	r3,r9[0x5c]
8001a95e:	61 67       	ld.w	r7,r0[0x58]
8001a960:	65 20       	ld.w	r0,r2[0x48]
8001a962:	30 78       	mov	r8,7
8001a964:	00 00       	add	r0,r0
8001a966:	00 00       	add	r0,r0
8001a968:	55 6e       	stdsp	sp[0x158],lr
8001a96a:	65 78       	ld.w	r8,r2[0x5c]
8001a96c:	70 65       	ld.w	r5,r8[0x18]
8001a96e:	63 74       	ld.w	r4,r1[0x5c]
8001a970:	65 64       	ld.w	r4,r2[0x58]
8001a972:	20 54       	sub	r4,5
8001a974:	49 4d       	lddpc	sp,8001a9c4 <init_gps_ubx+0x28c>
8001a976:	20 6d       	sub	sp,24
8001a978:	65 73       	ld.w	r3,r2[0x5c]
8001a97a:	73 61       	ld.w	r1,r9[0x58]
8001a97c:	67 65       	ld.w	r5,r3[0x58]
8001a97e:	2c 20       	sub	r0,-62
8001a980:	43 6c       	lddsp	r12,sp[0xd8]
8001a982:	61 73       	ld.w	r3,r0[0x5c]
8001a984:	73 3a       	ld.w	r10,r9[0x4c]
8001a986:	20 30       	sub	r0,3
8001a988:	78 00       	ld.w	r0,r12[0x0]
8001a98a:	00 00       	add	r0,r0
8001a98c:	20 73       	sub	r3,7
8001a98e:	68 6f       	ld.w	pc,r4[0x18]
8001a990:	75 6c       	ld.w	r12,r10[0x58]
8001a992:	64 20       	ld.w	r0,r2[0x8]
8001a994:	62 65       	ld.w	r5,r1[0x18]
8001a996:	20 3a       	sub	r10,3
8001a998:	00 00       	add	r0,r0
8001a99a:	00 00       	add	r0,r0
8001a99c:	57 72       	stdsp	sp[0x1dc],r2
8001a99e:	6f 6e       	ld.w	lr,r7[0x58]
8001a9a0:	67 20       	ld.w	r0,r3[0x48]
8001a9a2:	54 49       	stdsp	sp[0x110],r9
8001a9a4:	4d 20       	lddpc	r0,8001aaec <ubx_read+0xb6>
8001a9a6:	54 50       	stdsp	sp[0x114],r0
8001a9a8:	20 6d       	sub	sp,24
8001a9aa:	65 73       	ld.w	r3,r2[0x5c]
8001a9ac:	73 61       	ld.w	r1,r9[0x58]
8001a9ae:	67 65       	ld.w	r5,r3[0x58]
8001a9b0:	20 30       	sub	r0,3
8001a9b2:	78 00       	ld.w	r0,r12[0x0]
8001a9b4:	57 72       	stdsp	sp[0x1dc],r2
8001a9b6:	6f 6e       	ld.w	lr,r7[0x58]
8001a9b8:	67 20       	ld.w	r0,r3[0x48]
8001a9ba:	54 49       	stdsp	sp[0x110],r9
8001a9bc:	4d 20       	lddpc	r0,8001ab04 <ubx_read+0xce>
8001a9be:	56 52       	stdsp	sp[0x194],r2
8001a9c0:	46 59       	lddsp	r9,sp[0x194]
8001a9c2:	20 6d       	sub	sp,24
8001a9c4:	65 73       	ld.w	r3,r2[0x5c]
8001a9c6:	73 61       	ld.w	r1,r9[0x58]
8001a9c8:	67 65       	ld.w	r5,r3[0x58]
8001a9ca:	20 30       	sub	r0,3
8001a9cc:	78 00       	ld.w	r0,r12[0x0]
8001a9ce:	00 00       	add	r0,r0
8001a9d0:	55 6e       	stdsp	sp[0x158],lr
8001a9d2:	65 78       	ld.w	r8,r2[0x5c]
8001a9d4:	70 65       	ld.w	r5,r8[0x18]
8001a9d6:	63 74       	ld.w	r4,r1[0x5c]
8001a9d8:	65 64       	ld.w	r4,r2[0x58]
8001a9da:	20 6d       	sub	sp,24
8001a9dc:	65 73       	ld.w	r3,r2[0x5c]
8001a9de:	73 61       	ld.w	r1,r9[0x58]
8001a9e0:	67 65       	ld.w	r5,r3[0x58]
8001a9e2:	2c 20       	sub	r0,-62
8001a9e4:	43 6c       	lddsp	r12,sp[0xd8]
8001a9e6:	61 73       	ld.w	r3,r0[0x5c]
8001a9e8:	73 3a       	ld.w	r10,r9[0x4c]
8001a9ea:	20 30       	sub	r0,3
8001a9ec:	78 00       	ld.w	r0,r12[0x0]
8001a9ee:	00 00       	add	r0,r0
8001a9f0:	62 61       	ld.w	r1,r1[0x18]
8001a9f2:	64 20       	ld.w	r0,r2[0x8]
8001a9f4:	63 6b       	ld.w	r11,r1[0x58]
8001a9f6:	73 75       	ld.w	r5,r9[0x5c]
8001a9f8:	6d 5f       	ld.w	pc,r6[0x54]
8001a9fa:	61 20       	ld.w	r0,r0[0x48]
8001a9fc:	00 00       	add	r0,r0
8001a9fe:	00 00       	add	r0,r0
8001aa00:	20 73       	sub	r3,7
8001aa02:	68 6f       	ld.w	pc,r4[0x18]
8001aa04:	75 6c       	ld.w	r12,r10[0x58]
8001aa06:	64 20       	ld.w	r0,r2[0x8]
8001aa08:	62 65       	ld.w	r5,r1[0x18]
8001aa0a:	20 00       	sub	r0,0
8001aa0c:	20 63       	sub	r3,6
8001aa0e:	6c 61       	ld.w	r1,r6[0x18]
8001aa10:	73 73       	ld.w	r3,r9[0x5c]
8001aa12:	20 3a       	sub	r10,3
8001aa14:	20 30       	sub	r0,3
8001aa16:	78 00       	ld.w	r0,r12[0x0]
8001aa18:	20 6d       	sub	sp,24
8001aa1a:	73 67       	ld.w	r7,r9[0x58]
8001aa1c:	5f 69       	srmi	r9
8001aa1e:	64 20       	ld.w	r0,r2[0x8]
8001aa20:	3a 20       	mov	r0,-94
8001aa22:	30 78       	mov	r8,7
8001aa24:	00 00       	add	r0,r0
8001aa26:	00 00       	add	r0,r0
8001aa28:	62 61       	ld.w	r1,r1[0x18]
8001aa2a:	64 20       	ld.w	r0,r2[0x8]
8001aa2c:	63 6b       	ld.w	r11,r1[0x58]
8001aa2e:	73 75       	ld.w	r5,r9[0x5c]
8001aa30:	6d 5f       	ld.w	pc,r6[0x54]
8001aa32:	62 20       	ld.w	r0,r1[0x8]
	...

8001aa36 <ubx_read>:
re-processing it from the top, this is unavoidable. The parser
attempts to avoid this when possible.
************************************************************************************
*/
bool ubx_read(void)
{
8001aa36:	eb cd 40 c0 	pushm	r6-r7,lr
8001aa3a:	1a 97       	mov	r7,sp
8001aa3c:	20 2d       	sub	sp,8
8001aa3e:	fe f6 0c fa 	ld.w	r6,pc[3322]
8001aa42:	1e 26       	rsub	r6,pc
	uint8_t data;
	bool msg_ok = false;
8001aa44:	30 08       	mov	r8,0
8001aa46:	ef 68 ff fb 	st.b	r7[-5],r8
	//bool new_message = false;
	
	unsigned char * temporaryMessageForSwaping;
	
	while(buffer_bytes_available(&(centralData->gps_buffer)))
8001aa4a:	e0 8f 06 64 	bral	8001b712 <ubx_read+0xcdc>
	{
		data = buffer_get(&(centralData->gps_buffer));
8001aa4e:	ec f8 00 00 	ld.w	r8,r6[0]
8001aa52:	70 08       	ld.w	r8,r8[0x0]
8001aa54:	f0 c8 f6 2c 	sub	r8,r8,-2516
8001aa58:	10 9c       	mov	r12,r8
8001aa5a:	f0 16 00 44 	mcall	r6[272]
8001aa5e:	18 98       	mov	r8,r12
8001aa60:	ef 68 ff fa 	st.b	r7[-6],r8
		
// 		dbg_print(" 0x");
//  	dbg_print_num(data,16);
// 		dbg_print("\n");
		
		switch (step)
8001aa64:	ec f8 00 4c 	ld.w	r8,r6[76]
8001aa68:	11 88       	ld.ub	r8,r8[0x0]
8001aa6a:	58 88       	cp.w	r8,8
8001aa6c:	e0 8b 06 53 	brhi	8001b712 <ubx_read+0xcdc>
8001aa70:	fe c9 ff f8 	sub	r9,pc,-8
8001aa74:	f2 08 00 2f 	add	pc,r9,r8<<0x2
8001aa78:	e0 8f 00 26 	bral	8001aac4 <ubx_read+0x8e>
8001aa7c:	e0 8f 00 10 	bral	8001aa9c <ubx_read+0x66>
8001aa80:	e0 8f 00 38 	bral	8001aaf0 <ubx_read+0xba>
8001aa84:	e0 8f 00 50 	bral	8001ab24 <ubx_read+0xee>
8001aa88:	e0 8f 00 74 	bral	8001ab70 <ubx_read+0x13a>
8001aa8c:	e0 8f 00 98 	bral	8001abbc <ubx_read+0x186>
8001aa90:	e0 8f 05 68 	bral	8001b560 <ubx_read+0xb2a>
8001aa94:	e0 8f 05 ac 	bral	8001b5ec <ubx_read+0xbb6>
8001aa98:	e0 8f 05 f0 	bral	8001b678 <ubx_read+0xc42>
			// chances of recovering from a mismatch and makes it less
			// likely that we will be fooled by the preamble appearing
			// as data in some other message.
			//
		case 1:
			if (data == UBX_PREAMBLE2)
8001aa9c:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001aaa0:	36 28       	mov	r8,98
8001aaa2:	f0 09 18 00 	cp.b	r9,r8
8001aaa6:	c0 b1       	brne	8001aabc <ubx_read+0x86>
			{
				step++;
8001aaa8:	ec f8 00 4c 	ld.w	r8,r6[76]
8001aaac:	11 88       	ld.ub	r8,r8[0x0]
8001aaae:	2f f8       	sub	r8,-1
8001aab0:	5c 58       	castu.b	r8
8001aab2:	ec f9 00 4c 	ld.w	r9,r6[76]
8001aab6:	b2 88       	st.b	r9[0x0],r8
				break;
8001aab8:	e0 8f 06 2d 	bral	8001b712 <ubx_read+0xcdc>
			}
			step = 0;
8001aabc:	ec f9 00 4c 	ld.w	r9,r6[76]
8001aac0:	30 08       	mov	r8,0
8001aac2:	b2 88       	st.b	r9[0x0],r8
		case 0:
			if (data == UBX_PREAMBLE1)
8001aac4:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001aac8:	3b 58       	mov	r8,-75
8001aaca:	f0 09 18 00 	cp.b	r9,r8
8001aace:	c0 b1       	brne	8001aae4 <ubx_read+0xae>
			{
				step++;
8001aad0:	ec f8 00 4c 	ld.w	r8,r6[76]
8001aad4:	11 88       	ld.ub	r8,r8[0x0]
8001aad6:	2f f8       	sub	r8,-1
8001aad8:	5c 58       	castu.b	r8
8001aada:	ec f9 00 4c 	ld.w	r9,r6[76]
8001aade:	b2 88       	st.b	r9[0x0],r8
				break;
8001aae0:	e0 8f 06 19 	bral	8001b712 <ubx_read+0xcdc>
			}
			step = 0;
8001aae4:	ec f9 00 4c 	ld.w	r9,r6[76]
8001aae8:	30 08       	mov	r8,0
8001aaea:	b2 88       	st.b	r9[0x0],r8
			break;
8001aaec:	e0 8f 06 13 	bral	8001b712 <ubx_read+0xcdc>
		//
		// We always collect the length so that we can avoid being
		// fooled by preamble bytes in messages.
		//
		case 2:
			step++;
8001aaf0:	ec f8 00 4c 	ld.w	r8,r6[76]
8001aaf4:	11 88       	ld.ub	r8,r8[0x0]
8001aaf6:	2f f8       	sub	r8,-1
8001aaf8:	5c 58       	castu.b	r8
8001aafa:	ec f9 00 4c 	ld.w	r9,r6[76]
8001aafe:	b2 88       	st.b	r9[0x0],r8
			ubxclass = data;
8001ab00:	ec f9 00 60 	ld.w	r9,r6[96]
8001ab04:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001ab08:	b2 88       	st.b	r9[0x0],r8
			cksum_a = data;
8001ab0a:	ec f9 00 b0 	ld.w	r9,r6[176]
8001ab0e:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001ab12:	b2 88       	st.b	r9[0x0],r8
			cksum_b = cksum_a; // reset the checksum accumulators
8001ab14:	ec f8 00 b0 	ld.w	r8,r6[176]
8001ab18:	11 88       	ld.ub	r8,r8[0x0]
8001ab1a:	ec f9 01 0c 	ld.w	r9,r6[268]
8001ab1e:	b2 88       	st.b	r9[0x0],r8
			break;
8001ab20:	e0 8f 05 f9 	bral	8001b712 <ubx_read+0xcdc>
		case 3:
			step++;
8001ab24:	ec f8 00 4c 	ld.w	r8,r6[76]
8001ab28:	11 88       	ld.ub	r8,r8[0x0]
8001ab2a:	2f f8       	sub	r8,-1
8001ab2c:	5c 58       	castu.b	r8
8001ab2e:	ec f9 00 4c 	ld.w	r9,r6[76]
8001ab32:	b2 88       	st.b	r9[0x0],r8
			cksum_a += data;
8001ab34:	ec f8 00 b0 	ld.w	r8,r6[176]
8001ab38:	11 88       	ld.ub	r8,r8[0x0]
8001ab3a:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001ab3e:	f2 08 00 08 	add	r8,r9,r8
8001ab42:	5c 58       	castu.b	r8
8001ab44:	ec f9 00 b0 	ld.w	r9,r6[176]
8001ab48:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001ab4a:	ec f8 01 0c 	ld.w	r8,r6[268]
8001ab4e:	11 89       	ld.ub	r9,r8[0x0]
8001ab50:	ec f8 00 b0 	ld.w	r8,r6[176]
8001ab54:	11 88       	ld.ub	r8,r8[0x0]
8001ab56:	f2 08 00 08 	add	r8,r9,r8
8001ab5a:	5c 58       	castu.b	r8
8001ab5c:	ec f9 01 0c 	ld.w	r9,r6[268]
8001ab60:	b2 88       	st.b	r9[0x0],r8
			msg_id = data;
8001ab62:	ec f9 00 5c 	ld.w	r9,r6[92]
8001ab66:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001ab6a:	b2 88       	st.b	r9[0x0],r8
			break;
8001ab6c:	e0 8f 05 d3 	bral	8001b712 <ubx_read+0xcdc>
		case 4:
			step++;
8001ab70:	ec f8 00 4c 	ld.w	r8,r6[76]
8001ab74:	11 88       	ld.ub	r8,r8[0x0]
8001ab76:	2f f8       	sub	r8,-1
8001ab78:	5c 58       	castu.b	r8
8001ab7a:	ec f9 00 4c 	ld.w	r9,r6[76]
8001ab7e:	b2 88       	st.b	r9[0x0],r8
			cksum_a += data;
8001ab80:	ec f8 00 b0 	ld.w	r8,r6[176]
8001ab84:	11 88       	ld.ub	r8,r8[0x0]
8001ab86:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001ab8a:	f2 08 00 08 	add	r8,r9,r8
8001ab8e:	5c 58       	castu.b	r8
8001ab90:	ec f9 00 b0 	ld.w	r9,r6[176]
8001ab94:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001ab96:	ec f8 01 0c 	ld.w	r8,r6[268]
8001ab9a:	11 89       	ld.ub	r9,r8[0x0]
8001ab9c:	ec f8 00 b0 	ld.w	r8,r6[176]
8001aba0:	11 88       	ld.ub	r8,r8[0x0]
8001aba2:	f2 08 00 08 	add	r8,r9,r8
8001aba6:	5c 58       	castu.b	r8
8001aba8:	ec f9 01 0c 	ld.w	r9,r6[268]
8001abac:	b2 88       	st.b	r9[0x0],r8
			payload_length = data;
8001abae:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001abb2:	ec f9 00 58 	ld.w	r9,r6[88]
8001abb6:	b2 08       	st.h	r9[0x0],r8
			break;
8001abb8:	e0 8f 05 ad 	bral	8001b712 <ubx_read+0xcdc>
		case 5:
			step++;
8001abbc:	ec f8 00 4c 	ld.w	r8,r6[76]
8001abc0:	11 88       	ld.ub	r8,r8[0x0]
8001abc2:	2f f8       	sub	r8,-1
8001abc4:	5c 58       	castu.b	r8
8001abc6:	ec f9 00 4c 	ld.w	r9,r6[76]
8001abca:	b2 88       	st.b	r9[0x0],r8
			payload_length |= data<<8;
8001abcc:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001abd0:	a9 68       	lsl	r8,0x8
8001abd2:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001abd6:	ec f8 00 58 	ld.w	r8,r6[88]
8001abda:	90 08       	ld.sh	r8,r8[0x0]
8001abdc:	5c 88       	casts.h	r8
8001abde:	f3 e8 10 08 	or	r8,r9,r8
8001abe2:	5c 88       	casts.h	r8
8001abe4:	ec f9 00 58 	ld.w	r9,r6[88]
8001abe8:	b2 08       	st.h	r9[0x0],r8
			cksum_a += data;
8001abea:	ec f8 00 b0 	ld.w	r8,r6[176]
8001abee:	11 88       	ld.ub	r8,r8[0x0]
8001abf0:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001abf4:	f2 08 00 08 	add	r8,r9,r8
8001abf8:	5c 58       	castu.b	r8
8001abfa:	ec f9 00 b0 	ld.w	r9,r6[176]
8001abfe:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001ac00:	ec f8 01 0c 	ld.w	r8,r6[268]
8001ac04:	11 89       	ld.ub	r9,r8[0x0]
8001ac06:	ec f8 00 b0 	ld.w	r8,r6[176]
8001ac0a:	11 88       	ld.ub	r8,r8[0x0]
8001ac0c:	f2 08 00 08 	add	r8,r9,r8
8001ac10:	5c 58       	castu.b	r8
8001ac12:	ec f9 01 0c 	ld.w	r9,r6[268]
8001ac16:	b2 88       	st.b	r9[0x0],r8
// 			dbg_print(" large byte shifted");
// 			dbg_print_num(data<<8,10);
// 			dbg_print("\n");
			
			//payload_length |= (uint16_t)(data<<8);
			if (payload_length > 512)
8001ac18:	ec f8 00 58 	ld.w	r8,r6[88]
8001ac1c:	90 09       	ld.sh	r9,r8[0x0]
8001ac1e:	e0 68 02 00 	mov	r8,512
8001ac22:	f0 09 19 00 	cp.h	r9,r8
8001ac26:	e0 88 00 1b 	brls	8001ac5c <ubx_read+0x226>
			{
				// we assume very large payloads are line noise
				dbg_print("large payload: ");
8001ac2a:	fe cc 04 5e 	sub	r12,pc,1118
8001ac2e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(payload_length,10);
8001ac32:	ec f8 00 58 	ld.w	r8,r6[88]
8001ac36:	90 08       	ld.sh	r8,r8[0x0]
8001ac38:	5c 78       	castu.h	r8
8001ac3a:	30 ab       	mov	r11,10
8001ac3c:	10 9c       	mov	r12,r8
8001ac3e:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001ac42:	fe cc 04 66 	sub	r12,pc,1126
8001ac46:	f0 16 00 01 	mcall	r6[4]
				payload_length = 0;
8001ac4a:	ec f9 00 58 	ld.w	r9,r6[88]
8001ac4e:	30 08       	mov	r8,0
8001ac50:	b2 08       	st.h	r9[0x0],r8
				step = 0;
8001ac52:	ec f9 00 4c 	ld.w	r9,r6[76]
8001ac56:	30 08       	mov	r8,0
8001ac58:	b2 88       	st.b	r9[0x0],r8
				goto reset;
8001ac5a:	c0 5b       	rjmp	8001aa64 <ubx_read+0x2e>
			}
			payload_counter = 0; // prepare to receive payload
8001ac5c:	ec f9 01 c8 	ld.w	r9,r6[456]
8001ac60:	30 08       	mov	r8,0
8001ac62:	b2 08       	st.h	r9[0x0],r8
			
			if(ubxclass == UBX_CLASS_NAV)
8001ac64:	ec f8 00 60 	ld.w	r8,r6[96]
8001ac68:	11 89       	ld.ub	r9,r8[0x0]
8001ac6a:	30 18       	mov	r8,1
8001ac6c:	f0 09 18 00 	cp.b	r9,r8
8001ac70:	e0 81 01 c0 	brne	8001aff0 <ubx_read+0x5ba>
			{
				switch(msg_id)
8001ac74:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ac78:	11 88       	ld.ub	r8,r8[0x0]
8001ac7a:	58 68       	cp.w	r8,6
8001ac7c:	e0 80 00 ab 	breq	8001add2 <ubx_read+0x39c>
8001ac80:	e0 89 00 08 	brgt	8001ac90 <ubx_read+0x25a>
8001ac84:	58 28       	cp.w	r8,2
8001ac86:	c0 e0       	breq	8001aca2 <ubx_read+0x26c>
8001ac88:	58 38       	cp.w	r8,3
8001ac8a:	c5 80       	breq	8001ad3a <ubx_read+0x304>
8001ac8c:	e0 8f 01 84 	bral	8001af94 <ubx_read+0x55e>
8001ac90:	59 28       	cp.w	r8,18
8001ac92:	e0 80 00 eb 	breq	8001ae68 <ubx_read+0x432>
8001ac96:	e0 48 00 30 	cp.w	r8,48
8001ac9a:	e0 80 01 32 	breq	8001aefe <ubx_read+0x4c8>
8001ac9e:	e0 8f 01 7b 	bral	8001af94 <ubx_read+0x55e>
				{
				case MSG_NAV_POSLLH:
					if(payload_length == UBX_SIZE_NAV_POSLLH)
8001aca2:	ec f8 00 58 	ld.w	r8,r6[88]
8001aca6:	90 09       	ld.sh	r9,r8[0x0]
8001aca8:	31 c8       	mov	r8,28
8001acaa:	f0 09 19 00 	cp.h	r9,r8
8001acae:	c1 21       	brne	8001acd2 <ubx_read+0x29c>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentPosllhMessage;
8001acb0:	ec f9 07 94 	ld.w	r9,r6[1940]
8001acb4:	ec f8 00 dc 	ld.w	r8,r6[220]
8001acb8:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastPosllhMessage;
8001acba:	ec f9 03 74 	ld.w	r9,r6[884]
8001acbe:	ec f8 00 e8 	ld.w	r8,r6[232]
8001acc2:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidPosllhMessage;
8001acc4:	ec f8 00 fc 	ld.w	r8,r6[252]
8001acc8:	ec f9 04 7c 	ld.w	r9,r6[1148]
8001accc:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_POSLLH,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001acce:	e0 8f 01 8f 	bral	8001afec <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentPosllhMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastPosllhMessage;
						ubx_validMessage = &ubx_numberOfValidPosllhMessage;
					}else{
						dbg_print("Wrong Posllh message 0x");
8001acd2:	fe cc 04 f2 	sub	r12,pc,1266
8001acd6:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001acda:	ec f8 00 60 	ld.w	r8,r6[96]
8001acde:	11 88       	ld.ub	r8,r8[0x0]
8001ace0:	31 0b       	mov	r11,16
8001ace2:	10 9c       	mov	r12,r8
8001ace4:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001ace8:	fe cc 04 f0 	sub	r12,pc,1264
8001acec:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001acf0:	ec f8 00 5c 	ld.w	r8,r6[92]
8001acf4:	11 88       	ld.ub	r8,r8[0x0]
8001acf6:	31 0b       	mov	r11,16
8001acf8:	10 9c       	mov	r12,r8
8001acfa:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001acfe:	fe cc 04 fa 	sub	r12,pc,1274
8001ad02:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001ad06:	ec f8 00 58 	ld.w	r8,r6[88]
8001ad0a:	90 08       	ld.sh	r8,r8[0x0]
8001ad0c:	5c 78       	castu.h	r8
8001ad0e:	30 ab       	mov	r11,10
8001ad10:	10 9c       	mov	r12,r8
8001ad12:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001ad16:	fe cc 05 02 	sub	r12,pc,1282
8001ad1a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_POSLLH,10);
8001ad1e:	30 ab       	mov	r11,10
8001ad20:	31 cc       	mov	r12,28
8001ad22:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001ad26:	fe cc 05 4a 	sub	r12,pc,1354
8001ad2a:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001ad2e:	ec f9 00 4c 	ld.w	r9,r6[76]
8001ad32:	30 08       	mov	r8,0
8001ad34:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001ad36:	fe 9f fe 97 	bral	8001aa64 <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_STATUS:
					if(payload_length == UBX_SIZE_NAV_STATUS)
8001ad3a:	ec f8 00 58 	ld.w	r8,r6[88]
8001ad3e:	90 09       	ld.sh	r9,r8[0x0]
8001ad40:	31 08       	mov	r8,16
8001ad42:	f0 09 19 00 	cp.h	r9,r8
8001ad46:	c1 21       	brne	8001ad6a <ubx_read+0x334>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentStatusMessage;
8001ad48:	ec f9 06 2c 	ld.w	r9,r6[1580]
8001ad4c:	ec f8 00 dc 	ld.w	r8,r6[220]
8001ad50:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastStatusMessage;
8001ad52:	ec f9 03 78 	ld.w	r9,r6[888]
8001ad56:	ec f8 00 e8 	ld.w	r8,r6[232]
8001ad5a:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidStatusMessage;
8001ad5c:	ec f8 00 fc 	ld.w	r8,r6[252]
8001ad60:	ec f9 04 3c 	ld.w	r9,r6[1084]
8001ad64:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_STATUS,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001ad66:	e0 8f 01 43 	bral	8001afec <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentStatusMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastStatusMessage;
						ubx_validMessage = &ubx_numberOfValidStatusMessage;
					}else{
						dbg_print("Wrong Nav Status message 0x");
8001ad6a:	fe cc 05 4a 	sub	r12,pc,1354
8001ad6e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001ad72:	ec f8 00 60 	ld.w	r8,r6[96]
8001ad76:	11 88       	ld.ub	r8,r8[0x0]
8001ad78:	31 0b       	mov	r11,16
8001ad7a:	10 9c       	mov	r12,r8
8001ad7c:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001ad80:	fe cc 05 88 	sub	r12,pc,1416
8001ad84:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001ad88:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ad8c:	11 88       	ld.ub	r8,r8[0x0]
8001ad8e:	31 0b       	mov	r11,16
8001ad90:	10 9c       	mov	r12,r8
8001ad92:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001ad96:	fe cc 05 92 	sub	r12,pc,1426
8001ad9a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001ad9e:	ec f8 00 58 	ld.w	r8,r6[88]
8001ada2:	90 08       	ld.sh	r8,r8[0x0]
8001ada4:	5c 78       	castu.h	r8
8001ada6:	30 ab       	mov	r11,10
8001ada8:	10 9c       	mov	r12,r8
8001adaa:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001adae:	fe cc 05 9a 	sub	r12,pc,1434
8001adb2:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_STATUS,10);
8001adb6:	30 ab       	mov	r11,10
8001adb8:	31 0c       	mov	r12,16
8001adba:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001adbe:	fe cc 05 e2 	sub	r12,pc,1506
8001adc2:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001adc6:	ec f9 00 4c 	ld.w	r9,r6[76]
8001adca:	30 08       	mov	r8,0
8001adcc:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001adce:	fe 9f fe 4b 	bral	8001aa64 <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_SOL:
					if(payload_length == UBX_SIZE_NAV_SOL)
8001add2:	ec f8 00 58 	ld.w	r8,r6[88]
8001add6:	90 09       	ld.sh	r9,r8[0x0]
8001add8:	33 48       	mov	r8,52
8001adda:	f0 09 19 00 	cp.h	r9,r8
8001adde:	c1 11       	brne	8001ae00 <ubx_read+0x3ca>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSolutionMessage;
8001ade0:	ec f9 07 d8 	ld.w	r9,r6[2008]
8001ade4:	ec f8 00 dc 	ld.w	r8,r6[220]
8001ade8:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastSolutionMessage;
8001adea:	ec f9 03 e0 	ld.w	r9,r6[992]
8001adee:	ec f8 00 e8 	ld.w	r8,r6[232]
8001adf2:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidSolutionMessage;;
8001adf4:	ec f8 00 fc 	ld.w	r8,r6[252]
8001adf8:	ec f9 04 94 	ld.w	r9,r6[1172]
8001adfc:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_SOL,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001adfe:	cf 78       	rjmp	8001afec <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSolutionMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastSolutionMessage;
						ubx_validMessage = &ubx_numberOfValidSolutionMessage;;
					}else{
						dbg_print("Wrong Solution message 0x");
8001ae00:	fe cc 05 c4 	sub	r12,pc,1476
8001ae04:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001ae08:	ec f8 00 60 	ld.w	r8,r6[96]
8001ae0c:	11 88       	ld.ub	r8,r8[0x0]
8001ae0e:	31 0b       	mov	r11,16
8001ae10:	10 9c       	mov	r12,r8
8001ae12:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001ae16:	fe cc 06 1e 	sub	r12,pc,1566
8001ae1a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001ae1e:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ae22:	11 88       	ld.ub	r8,r8[0x0]
8001ae24:	31 0b       	mov	r11,16
8001ae26:	10 9c       	mov	r12,r8
8001ae28:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001ae2c:	fe cc 06 28 	sub	r12,pc,1576
8001ae30:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001ae34:	ec f8 00 58 	ld.w	r8,r6[88]
8001ae38:	90 08       	ld.sh	r8,r8[0x0]
8001ae3a:	5c 78       	castu.h	r8
8001ae3c:	30 ab       	mov	r11,10
8001ae3e:	10 9c       	mov	r12,r8
8001ae40:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001ae44:	fe cc 06 30 	sub	r12,pc,1584
8001ae48:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_SOL,10);
8001ae4c:	30 ab       	mov	r11,10
8001ae4e:	33 4c       	mov	r12,52
8001ae50:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001ae54:	fe cc 06 78 	sub	r12,pc,1656
8001ae58:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001ae5c:	ec f9 00 4c 	ld.w	r9,r6[76]
8001ae60:	30 08       	mov	r8,0
8001ae62:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001ae64:	fe 9f fe 00 	bral	8001aa64 <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_VELNED:
					if(payload_length == UBX_SIZE_NAV_VELNED)
8001ae68:	ec f8 00 58 	ld.w	r8,r6[88]
8001ae6c:	90 09       	ld.sh	r9,r8[0x0]
8001ae6e:	32 48       	mov	r8,36
8001ae70:	f0 09 19 00 	cp.h	r9,r8
8001ae74:	c1 11       	brne	8001ae96 <ubx_read+0x460>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentVelnedMessage;
8001ae76:	ec f9 05 b8 	ld.w	r9,r6[1464]
8001ae7a:	ec f8 00 dc 	ld.w	r8,r6[220]
8001ae7e:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastVelnedMessage;
8001ae80:	ec f9 04 90 	ld.w	r9,r6[1168]
8001ae84:	ec f8 00 e8 	ld.w	r8,r6[232]
8001ae88:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidVelnedMessage;
8001ae8a:	ec f8 00 fc 	ld.w	r8,r6[252]
8001ae8e:	ec f9 04 a0 	ld.w	r9,r6[1184]
8001ae92:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_VELNED,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001ae94:	ca c8       	rjmp	8001afec <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentVelnedMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastVelnedMessage;
						ubx_validMessage = &ubx_numberOfValidVelnedMessage;
					}else{
						dbg_print("Wrong Velned message 0x");
8001ae96:	fe cc 06 3e 	sub	r12,pc,1598
8001ae9a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001ae9e:	ec f8 00 60 	ld.w	r8,r6[96]
8001aea2:	11 88       	ld.ub	r8,r8[0x0]
8001aea4:	31 0b       	mov	r11,16
8001aea6:	10 9c       	mov	r12,r8
8001aea8:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001aeac:	fe cc 06 b4 	sub	r12,pc,1716
8001aeb0:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001aeb4:	ec f8 00 5c 	ld.w	r8,r6[92]
8001aeb8:	11 88       	ld.ub	r8,r8[0x0]
8001aeba:	31 0b       	mov	r11,16
8001aebc:	10 9c       	mov	r12,r8
8001aebe:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001aec2:	fe cc 06 be 	sub	r12,pc,1726
8001aec6:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001aeca:	ec f8 00 58 	ld.w	r8,r6[88]
8001aece:	90 08       	ld.sh	r8,r8[0x0]
8001aed0:	5c 78       	castu.h	r8
8001aed2:	30 ab       	mov	r11,10
8001aed4:	10 9c       	mov	r12,r8
8001aed6:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001aeda:	fe cc 06 c6 	sub	r12,pc,1734
8001aede:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_VELNED,10);
8001aee2:	30 ab       	mov	r11,10
8001aee4:	32 4c       	mov	r12,36
8001aee6:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001aeea:	fe cc 07 0e 	sub	r12,pc,1806
8001aeee:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001aef2:	ec f9 00 4c 	ld.w	r9,r6[76]
8001aef6:	30 08       	mov	r8,0
8001aef8:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001aefa:	fe 9f fd b5 	bral	8001aa64 <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_SVINFO:
					if(payload_length == UBX_SIZE_NAV_SVINFO)
8001aefe:	ec f8 00 58 	ld.w	r8,r6[88]
8001af02:	90 09       	ld.sh	r9,r8[0x0]
8001af04:	31 e8       	mov	r8,30
8001af06:	f0 09 19 00 	cp.h	r9,r8
8001af0a:	c1 11       	brne	8001af2c <ubx_read+0x4f6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSVInfoMessage;
8001af0c:	ec f9 04 e0 	ld.w	r9,r6[1248]
8001af10:	ec f8 00 dc 	ld.w	r8,r6[220]
8001af14:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastSVInfoMessage;
8001af16:	ec f9 04 74 	ld.w	r9,r6[1140]
8001af1a:	ec f8 00 e8 	ld.w	r8,r6[232]
8001af1e:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidSVInfoMessage;
8001af20:	ec f8 00 fc 	ld.w	r8,r6[252]
8001af24:	ec f9 03 a8 	ld.w	r9,r6[936]
8001af28:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_SVINFO,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001af2a:	c6 18       	rjmp	8001afec <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSVInfoMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastSVInfoMessage;
						ubx_validMessage = &ubx_numberOfValidSVInfoMessage;
					}else{
						dbg_print("Wrong SV Info message 0x");
8001af2c:	fe cc 06 bc 	sub	r12,pc,1724
8001af30:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001af34:	ec f8 00 60 	ld.w	r8,r6[96]
8001af38:	11 88       	ld.ub	r8,r8[0x0]
8001af3a:	31 0b       	mov	r11,16
8001af3c:	10 9c       	mov	r12,r8
8001af3e:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001af42:	fe cc 07 4a 	sub	r12,pc,1866
8001af46:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001af4a:	ec f8 00 5c 	ld.w	r8,r6[92]
8001af4e:	11 88       	ld.ub	r8,r8[0x0]
8001af50:	31 0b       	mov	r11,16
8001af52:	10 9c       	mov	r12,r8
8001af54:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001af58:	fe cc 07 54 	sub	r12,pc,1876
8001af5c:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001af60:	ec f8 00 58 	ld.w	r8,r6[88]
8001af64:	90 08       	ld.sh	r8,r8[0x0]
8001af66:	5c 78       	castu.h	r8
8001af68:	30 ab       	mov	r11,10
8001af6a:	10 9c       	mov	r12,r8
8001af6c:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001af70:	fe cc 07 5c 	sub	r12,pc,1884
8001af74:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_SVINFO,10);
8001af78:	30 ab       	mov	r11,10
8001af7a:	31 ec       	mov	r12,30
8001af7c:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001af80:	fe cc 07 a4 	sub	r12,pc,1956
8001af84:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001af88:	ec f9 00 4c 	ld.w	r9,r6[76]
8001af8c:	30 08       	mov	r8,0
8001af8e:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001af90:	fe 9f fd 6a 	bral	8001aa64 <ubx_read+0x2e>
					}
					break;
				default:
					step = 0;
8001af94:	ec f9 00 4c 	ld.w	r9,r6[76]
8001af98:	30 08       	mov	r8,0
8001af9a:	b2 88       	st.b	r9[0x0],r8
					dbg_print("Unexpected NAV message, Class: 0x");
8001af9c:	fe cc 07 10 	sub	r12,pc,1808
8001afa0:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(ubxclass,16);
8001afa4:	ec f8 00 60 	ld.w	r8,r6[96]
8001afa8:	11 88       	ld.ub	r8,r8[0x0]
8001afaa:	31 0b       	mov	r11,16
8001afac:	10 9c       	mov	r12,r8
8001afae:	f0 16 00 04 	mcall	r6[16]
					dbg_print(", msg id: 0x");
8001afb2:	fe cc 07 02 	sub	r12,pc,1794
8001afb6:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(msg_id,16);
8001afba:	ec f8 00 5c 	ld.w	r8,r6[92]
8001afbe:	11 88       	ld.ub	r8,r8[0x0]
8001afc0:	31 0b       	mov	r11,16
8001afc2:	10 9c       	mov	r12,r8
8001afc4:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of size ");
8001afc8:	fe cc 07 08 	sub	r12,pc,1800
8001afcc:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(payload_length,10);
8001afd0:	ec f8 00 58 	ld.w	r8,r6[88]
8001afd4:	90 08       	ld.sh	r8,r8[0x0]
8001afd6:	5c 78       	castu.h	r8
8001afd8:	30 ab       	mov	r11,10
8001afda:	10 9c       	mov	r12,r8
8001afdc:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001afe0:	fe cc 08 04 	sub	r12,pc,2052
8001afe4:	f0 16 00 01 	mcall	r6[4]
					goto reset;
8001afe8:	fe 9f fd 3e 	bral	8001aa64 <ubx_read+0x2e>
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001afec:	e0 8f 03 93 	bral	8001b712 <ubx_read+0xcdc>
					dbg_print(" of size ");
					dbg_print_num(payload_length,10);
					dbg_print("\n");
					goto reset;
				}	
			}else if(ubxclass == UBX_CLASS_CFG)
8001aff0:	ec f8 00 60 	ld.w	r8,r6[96]
8001aff4:	11 89       	ld.ub	r9,r8[0x0]
8001aff6:	30 68       	mov	r8,6
8001aff8:	f0 09 18 00 	cp.b	r9,r8
8001affc:	e0 81 01 1d 	brne	8001b236 <ubx_read+0x800>
// 				dbg_print_num(msg_id,16);
// 				dbg_print("payload_length :");
// 				dbg_print_num(payload_length,10);
// 				dbg_print("\n");
				
				switch(msg_id)
8001b000:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b004:	11 88       	ld.ub	r8,r8[0x0]
8001b006:	58 88       	cp.w	r8,8
8001b008:	c5 30       	breq	8001b0ae <ubx_read+0x678>
8001b00a:	e0 48 00 24 	cp.w	r8,36
8001b00e:	c0 50       	breq	8001b018 <ubx_read+0x5e2>
8001b010:	58 18       	cp.w	r8,1
8001b012:	e0 80 00 99 	breq	8001b144 <ubx_read+0x70e>
8001b016:	ce 28       	rjmp	8001b1da <ubx_read+0x7a4>
				{			
				case MSG_CFG_NAV_SETTINGS:
					if(payload_length == UBX_SIZE_NAV_SETTINGS)
8001b018:	ec f8 00 58 	ld.w	r8,r6[88]
8001b01c:	90 09       	ld.sh	r9,r8[0x0]
8001b01e:	32 48       	mov	r8,36
8001b020:	f0 09 19 00 	cp.h	r9,r8
8001b024:	c1 11       	brne	8001b046 <ubx_read+0x610>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentNavSettingsMessage;
8001b026:	ec f9 05 8c 	ld.w	r9,r6[1420]
8001b02a:	ec f8 00 dc 	ld.w	r8,r6[220]
8001b02e:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastNavSettingsMessage;
8001b030:	ec f9 04 88 	ld.w	r9,r6[1160]
8001b034:	ec f8 00 e8 	ld.w	r8,r6[232]
8001b038:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidNavSettingsMessage;
8001b03a:	ec f8 00 fc 	ld.w	r8,r6[252]
8001b03e:	ec f9 04 58 	ld.w	r9,r6[1112]
8001b042:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_SETTINGS,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;		
8001b044:	cf 78       	rjmp	8001b232 <ubx_read+0x7fc>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentNavSettingsMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastNavSettingsMessage;
						ubx_validMessage = &ubx_numberOfValidNavSettingsMessage;
					}else{
						dbg_print("Wrong Nav Settings message 0x");
8001b046:	fe cc 07 7a 	sub	r12,pc,1914
8001b04a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001b04e:	ec f8 00 60 	ld.w	r8,r6[96]
8001b052:	11 88       	ld.ub	r8,r8[0x0]
8001b054:	31 0b       	mov	r11,16
8001b056:	10 9c       	mov	r12,r8
8001b058:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001b05c:	fe cc 08 64 	sub	r12,pc,2148
8001b060:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001b064:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b068:	11 88       	ld.ub	r8,r8[0x0]
8001b06a:	31 0b       	mov	r11,16
8001b06c:	10 9c       	mov	r12,r8
8001b06e:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001b072:	fe cc 08 6e 	sub	r12,pc,2158
8001b076:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001b07a:	ec f8 00 58 	ld.w	r8,r6[88]
8001b07e:	90 08       	ld.sh	r8,r8[0x0]
8001b080:	5c 78       	castu.h	r8
8001b082:	30 ab       	mov	r11,10
8001b084:	10 9c       	mov	r12,r8
8001b086:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001b08a:	fe cc 08 76 	sub	r12,pc,2166
8001b08e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_SETTINGS,10);
8001b092:	30 ab       	mov	r11,10
8001b094:	32 4c       	mov	r12,36
8001b096:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001b09a:	fe cc 08 be 	sub	r12,pc,2238
8001b09e:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001b0a2:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b0a6:	30 08       	mov	r8,0
8001b0a8:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001b0aa:	fe 9f fc dd 	bral	8001aa64 <ubx_read+0x2e>
					}
					break;		
				case MSG_CFG_RATE:
					if(payload_length == UBX_SIZE_CFG_RATE)
8001b0ae:	ec f8 00 58 	ld.w	r8,r6[88]
8001b0b2:	90 09       	ld.sh	r9,r8[0x0]
8001b0b4:	30 68       	mov	r8,6
8001b0b6:	f0 09 19 00 	cp.h	r9,r8
8001b0ba:	c1 11       	brne	8001b0dc <ubx_read+0x6a6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGRateMessage;
8001b0bc:	ec f9 06 28 	ld.w	r9,r6[1576]
8001b0c0:	ec f8 00 dc 	ld.w	r8,r6[220]
8001b0c4:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGRateMessage;
8001b0c6:	ec f9 08 68 	ld.w	r9,r6[2152]
8001b0ca:	ec f8 00 e8 	ld.w	r8,r6[232]
8001b0ce:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidCFGRateMessage;
8001b0d0:	ec f8 00 fc 	ld.w	r8,r6[252]
8001b0d4:	ec f9 06 e4 	ld.w	r9,r6[1764]
8001b0d8:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_CFG_RATE,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001b0da:	ca c8       	rjmp	8001b232 <ubx_read+0x7fc>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGRateMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGRateMessage;
						ubx_validMessage = &ubx_numberOfValidCFGRateMessage;
					}else{
						dbg_print("Wrong CFG Rate message 0x");
8001b0dc:	fe cc 07 f0 	sub	r12,pc,2032
8001b0e0:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001b0e4:	ec f8 00 60 	ld.w	r8,r6[96]
8001b0e8:	11 88       	ld.ub	r8,r8[0x0]
8001b0ea:	31 0b       	mov	r11,16
8001b0ec:	10 9c       	mov	r12,r8
8001b0ee:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001b0f2:	fe cc 08 fa 	sub	r12,pc,2298
8001b0f6:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001b0fa:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b0fe:	11 88       	ld.ub	r8,r8[0x0]
8001b100:	31 0b       	mov	r11,16
8001b102:	10 9c       	mov	r12,r8
8001b104:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001b108:	fe cc 09 04 	sub	r12,pc,2308
8001b10c:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001b110:	ec f8 00 58 	ld.w	r8,r6[88]
8001b114:	90 08       	ld.sh	r8,r8[0x0]
8001b116:	5c 78       	castu.h	r8
8001b118:	30 ab       	mov	r11,10
8001b11a:	10 9c       	mov	r12,r8
8001b11c:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001b120:	fe cc 09 0c 	sub	r12,pc,2316
8001b124:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_CFG_RATE,10);
8001b128:	30 ab       	mov	r11,10
8001b12a:	30 6c       	mov	r12,6
8001b12c:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001b130:	fe cc 09 54 	sub	r12,pc,2388
8001b134:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001b138:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b13c:	30 08       	mov	r8,0
8001b13e:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001b140:	fe 9f fc 92 	bral	8001aa64 <ubx_read+0x2e>
					}
					break;
				case MSG_CFG_SET_RATE:
					if (payload_length == UBX_SIZE_CFG_GETSET_RATE)
8001b144:	ec f8 00 58 	ld.w	r8,r6[88]
8001b148:	90 09       	ld.sh	r9,r8[0x0]
8001b14a:	30 38       	mov	r8,3
8001b14c:	f0 09 19 00 	cp.h	r9,r8
8001b150:	c1 11       	brne	8001b172 <ubx_read+0x73c>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGSetGetRateMessage;
8001b152:	ec f9 06 48 	ld.w	r9,r6[1608]
8001b156:	ec f8 00 dc 	ld.w	r8,r6[220]
8001b15a:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGSetGetRateMessage;
8001b15c:	ec f9 03 f0 	ld.w	r9,r6[1008]
8001b160:	ec f8 00 e8 	ld.w	r8,r6[232]
8001b164:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidCFGSetGetRateMessage;
8001b166:	ec f8 00 fc 	ld.w	r8,r6[252]
8001b16a:	ec f9 04 b8 	ld.w	r9,r6[1208]
8001b16e:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_CFG_GETSET_RATE,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001b170:	c6 18       	rjmp	8001b232 <ubx_read+0x7fc>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGSetGetRateMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGSetGetRateMessage;
						ubx_validMessage = &ubx_numberOfValidCFGSetGetRateMessage;
					}else{
						dbg_print("Wrong CFG Set/get message 0x");
8001b172:	fe cc 08 6a 	sub	r12,pc,2154
8001b176:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001b17a:	ec f8 00 60 	ld.w	r8,r6[96]
8001b17e:	11 88       	ld.ub	r8,r8[0x0]
8001b180:	31 0b       	mov	r11,16
8001b182:	10 9c       	mov	r12,r8
8001b184:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001b188:	fe cc 09 90 	sub	r12,pc,2448
8001b18c:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001b190:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b194:	11 88       	ld.ub	r8,r8[0x0]
8001b196:	31 0b       	mov	r11,16
8001b198:	10 9c       	mov	r12,r8
8001b19a:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001b19e:	fe cc 09 9a 	sub	r12,pc,2458
8001b1a2:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001b1a6:	ec f8 00 58 	ld.w	r8,r6[88]
8001b1aa:	90 08       	ld.sh	r8,r8[0x0]
8001b1ac:	5c 78       	castu.h	r8
8001b1ae:	30 ab       	mov	r11,10
8001b1b0:	10 9c       	mov	r12,r8
8001b1b2:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001b1b6:	fe cc 09 a2 	sub	r12,pc,2466
8001b1ba:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_CFG_GETSET_RATE,10);
8001b1be:	30 ab       	mov	r11,10
8001b1c0:	30 3c       	mov	r12,3
8001b1c2:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001b1c6:	fe cc 09 ea 	sub	r12,pc,2538
8001b1ca:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001b1ce:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b1d2:	30 08       	mov	r8,0
8001b1d4:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001b1d6:	fe 9f fc 47 	bral	8001aa64 <ubx_read+0x2e>
					}
					break;
				default:
					step = 0;
8001b1da:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b1de:	30 08       	mov	r8,0
8001b1e0:	b2 88       	st.b	r9[0x0],r8
					dbg_print("Unexpected CFG message, Class: 0x");
8001b1e2:	fe cc 08 ba 	sub	r12,pc,2234
8001b1e6:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(ubxclass,16);
8001b1ea:	ec f8 00 60 	ld.w	r8,r6[96]
8001b1ee:	11 88       	ld.ub	r8,r8[0x0]
8001b1f0:	31 0b       	mov	r11,16
8001b1f2:	10 9c       	mov	r12,r8
8001b1f4:	f0 16 00 04 	mcall	r6[16]
					dbg_print(", msg id: 0x");
8001b1f8:	fe cc 09 48 	sub	r12,pc,2376
8001b1fc:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(msg_id,16);
8001b200:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b204:	11 88       	ld.ub	r8,r8[0x0]
8001b206:	31 0b       	mov	r11,16
8001b208:	10 9c       	mov	r12,r8
8001b20a:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of size ");
8001b20e:	fe cc 09 4e 	sub	r12,pc,2382
8001b212:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(payload_length,10);
8001b216:	ec f8 00 58 	ld.w	r8,r6[88]
8001b21a:	90 08       	ld.sh	r8,r8[0x0]
8001b21c:	5c 78       	castu.h	r8
8001b21e:	30 ab       	mov	r11,10
8001b220:	10 9c       	mov	r12,r8
8001b222:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001b226:	fe cc 0a 4a 	sub	r12,pc,2634
8001b22a:	f0 16 00 01 	mcall	r6[4]
					goto reset;
8001b22e:	fe 9f fc 1b 	bral	8001aa64 <ubx_read+0x2e>
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001b232:	e0 8f 02 70 	bral	8001b712 <ubx_read+0xcdc>
					dbg_print(" of size ");
					dbg_print_num(payload_length,10);
					dbg_print("\n");
					goto reset;
				}
			} else if (ubxclass == UBX_CLASS_MON)
8001b236:	ec f8 00 60 	ld.w	r8,r6[96]
8001b23a:	11 89       	ld.ub	r9,r8[0x0]
8001b23c:	30 a8       	mov	r8,10
8001b23e:	f0 09 18 00 	cp.b	r9,r8
8001b242:	e0 81 00 88 	brne	8001b352 <ubx_read+0x91c>
			{
 				switch (msg_id)
8001b246:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b24a:	11 88       	ld.ub	r8,r8[0x0]
8001b24c:	e0 48 00 21 	cp.w	r8,33
8001b250:	c4 d1       	brne	8001b2ea <ubx_read+0x8b4>
 				{
 				case MSG_MON_RXR:
 					if(payload_length == UBX_SIZE_MON_RXR)
8001b252:	ec f8 00 58 	ld.w	r8,r6[88]
8001b256:	90 09       	ld.sh	r9,r8[0x0]
8001b258:	30 18       	mov	r8,1
8001b25a:	f0 09 19 00 	cp.h	r9,r8
8001b25e:	c1 21       	brne	8001b282 <ubx_read+0x84c>
 					{
 						ubx_currentMessage = (unsigned char**)&ubx_currentMONRXRMessage;
8001b260:	ec f9 05 88 	ld.w	r9,r6[1416]
8001b264:	ec f8 00 dc 	ld.w	r8,r6[220]
8001b268:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastMONRXRMessage;
8001b26a:	ec f9 03 d8 	ld.w	r9,r6[984]
8001b26e:	ec f8 00 e8 	ld.w	r8,r6[232]
8001b272:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidMONRXRMessage;
8001b274:	ec f8 00 fc 	ld.w	r8,r6[252]
8001b278:	ec f9 04 9c 	ld.w	r9,r6[1180]
8001b27c:	91 09       	st.w	r8[0x0],r9
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001b27e:	e0 8f 02 4a 	bral	8001b712 <ubx_read+0xcdc>
 					{
 						ubx_currentMessage = (unsigned char**)&ubx_currentMONRXRMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastMONRXRMessage;
						ubx_validMessage = &ubx_numberOfValidMONRXRMessage;
 					}else{
 						dbg_print("Wrong MON RXR message 0x");
8001b282:	fe cc 09 36 	sub	r12,pc,2358
8001b286:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(ubxclass,16);
8001b28a:	ec f8 00 60 	ld.w	r8,r6[96]
8001b28e:	11 88       	ld.ub	r8,r8[0x0]
8001b290:	31 0b       	mov	r11,16
8001b292:	10 9c       	mov	r12,r8
8001b294:	f0 16 00 04 	mcall	r6[16]
 						dbg_print(" Msg id: 0x");
8001b298:	fe cc 0a a0 	sub	r12,pc,2720
8001b29c:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(msg_id,16);
8001b2a0:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b2a4:	11 88       	ld.ub	r8,r8[0x0]
8001b2a6:	31 0b       	mov	r11,16
8001b2a8:	10 9c       	mov	r12,r8
8001b2aa:	f0 16 00 04 	mcall	r6[16]
 						dbg_print(" Received size:");
8001b2ae:	fe cc 0a aa 	sub	r12,pc,2730
8001b2b2:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(payload_length,10);
8001b2b6:	ec f8 00 58 	ld.w	r8,r6[88]
8001b2ba:	90 08       	ld.sh	r8,r8[0x0]
8001b2bc:	5c 78       	castu.h	r8
8001b2be:	30 ab       	mov	r11,10
8001b2c0:	10 9c       	mov	r12,r8
8001b2c2:	f0 16 00 04 	mcall	r6[16]
 						dbg_print(" should be:");
8001b2c6:	fe cc 0a b2 	sub	r12,pc,2738
8001b2ca:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(UBX_SIZE_MON_RXR,10);
8001b2ce:	30 ab       	mov	r11,10
8001b2d0:	30 1c       	mov	r12,1
8001b2d2:	f0 16 00 04 	mcall	r6[16]
 						dbg_print("\n");
8001b2d6:	fe cc 0a fa 	sub	r12,pc,2810
8001b2da:	f0 16 00 01 	mcall	r6[4]
 						step = 0;
8001b2de:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b2e2:	30 08       	mov	r8,0
8001b2e4:	b2 88       	st.b	r9[0x0],r8
 						goto reset;
8001b2e6:	fe 9f fb bf 	bral	8001aa64 <ubx_read+0x2e>
 					}
					break;
 				default:
 					step = 0;
8001b2ea:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b2ee:	30 08       	mov	r8,0
8001b2f0:	b2 88       	st.b	r9[0x0],r8
 					dbg_print("Unexpected TIM message, Class: 0x");
8001b2f2:	fe cc 09 8a 	sub	r12,pc,2442
8001b2f6:	f0 16 00 01 	mcall	r6[4]
 					dbg_print_num(ubxclass,16);
8001b2fa:	ec f8 00 60 	ld.w	r8,r6[96]
8001b2fe:	11 88       	ld.ub	r8,r8[0x0]
8001b300:	31 0b       	mov	r11,16
8001b302:	10 9c       	mov	r12,r8
8001b304:	f0 16 00 04 	mcall	r6[16]
 					dbg_print(", msg id: 0x");
8001b308:	fe cc 0a 58 	sub	r12,pc,2648
8001b30c:	f0 16 00 01 	mcall	r6[4]
 					dbg_print_num(msg_id,16);
8001b310:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b314:	11 88       	ld.ub	r8,r8[0x0]
8001b316:	31 0b       	mov	r11,16
8001b318:	10 9c       	mov	r12,r8
8001b31a:	f0 16 00 04 	mcall	r6[16]
 					dbg_print(" of size ");
8001b31e:	fe cc 0a 5e 	sub	r12,pc,2654
8001b322:	f0 16 00 01 	mcall	r6[4]
 					dbg_print_num(payload_length,10);
8001b326:	ec f8 00 58 	ld.w	r8,r6[88]
8001b32a:	90 08       	ld.sh	r8,r8[0x0]
8001b32c:	5c 78       	castu.h	r8
8001b32e:	30 ab       	mov	r11,10
8001b330:	10 9c       	mov	r12,r8
8001b332:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" should be :");
8001b336:	fe cc 09 aa 	sub	r12,pc,2474
8001b33a:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(MSG_MON_RXR,16);
8001b33e:	31 0b       	mov	r11,16
8001b340:	32 1c       	mov	r12,33
8001b342:	f0 16 00 04 	mcall	r6[16]
 					dbg_print("\n");
8001b346:	fe cc 0b 6a 	sub	r12,pc,2922
8001b34a:	f0 16 00 01 	mcall	r6[4]
 					goto reset;
8001b34e:	fe 9f fb 8b 	bral	8001aa64 <ubx_read+0x2e>
 				}
				
			} else if(ubxclass == UBX_CLASS_TIM)
8001b352:	ec f8 00 60 	ld.w	r8,r6[96]
8001b356:	11 89       	ld.ub	r9,r8[0x0]
8001b358:	30 d8       	mov	r8,13
8001b35a:	f0 09 18 00 	cp.b	r9,r8
8001b35e:	e0 81 00 d5 	brne	8001b508 <ubx_read+0xad2>
			{
				switch(msg_id)
8001b362:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b366:	11 88       	ld.ub	r8,r8[0x0]
8001b368:	58 18       	cp.w	r8,1
8001b36a:	c0 40       	breq	8001b372 <ubx_read+0x93c>
8001b36c:	58 68       	cp.w	r8,6
8001b36e:	c4 d0       	breq	8001b408 <ubx_read+0x9d2>
8001b370:	c9 78       	rjmp	8001b49e <ubx_read+0xa68>
				{
				case MSG_TIM_TP:
					if (payload_length == UBX_SIZE_TIM_TP)
8001b372:	ec f8 00 58 	ld.w	r8,r6[88]
8001b376:	90 09       	ld.sh	r9,r8[0x0]
8001b378:	31 08       	mov	r8,16
8001b37a:	f0 09 19 00 	cp.h	r9,r8
8001b37e:	c1 11       	brne	8001b3a0 <ubx_read+0x96a>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimTPMessage;
8001b380:	ec f9 08 18 	ld.w	r9,r6[2072]
8001b384:	ec f8 00 dc 	ld.w	r8,r6[220]
8001b388:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastTimTPMessage;
8001b38a:	ec f9 04 18 	ld.w	r9,r6[1048]
8001b38e:	ec f8 00 e8 	ld.w	r8,r6[232]
8001b392:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidTimTPMessage;
8001b394:	ec f8 00 fc 	ld.w	r8,r6[252]
8001b398:	ec f9 04 5c 	ld.w	r9,r6[1116]
8001b39c:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_TIM_TP,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001b39e:	cb 48       	rjmp	8001b506 <ubx_read+0xad0>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimTPMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastTimTPMessage;
						ubx_validMessage = &ubx_numberOfValidTimTPMessage;
					}else{
						dbg_print("Wrong TIM TP message 0x");
8001b3a0:	fe cc 0a 04 	sub	r12,pc,2564
8001b3a4:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001b3a8:	ec f8 00 60 	ld.w	r8,r6[96]
8001b3ac:	11 88       	ld.ub	r8,r8[0x0]
8001b3ae:	31 0b       	mov	r11,16
8001b3b0:	10 9c       	mov	r12,r8
8001b3b2:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001b3b6:	fe cc 0b be 	sub	r12,pc,3006
8001b3ba:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001b3be:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b3c2:	11 88       	ld.ub	r8,r8[0x0]
8001b3c4:	31 0b       	mov	r11,16
8001b3c6:	10 9c       	mov	r12,r8
8001b3c8:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001b3cc:	fe cc 0b c8 	sub	r12,pc,3016
8001b3d0:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001b3d4:	ec f8 00 58 	ld.w	r8,r6[88]
8001b3d8:	90 08       	ld.sh	r8,r8[0x0]
8001b3da:	5c 78       	castu.h	r8
8001b3dc:	30 ab       	mov	r11,10
8001b3de:	10 9c       	mov	r12,r8
8001b3e0:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001b3e4:	fe cc 0b d0 	sub	r12,pc,3024
8001b3e8:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_TIM_TP,10);
8001b3ec:	30 ab       	mov	r11,10
8001b3ee:	31 0c       	mov	r12,16
8001b3f0:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001b3f4:	fe cc 0c 18 	sub	r12,pc,3096
8001b3f8:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001b3fc:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b400:	30 08       	mov	r8,0
8001b402:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001b404:	fe 9f fb 30 	bral	8001aa64 <ubx_read+0x2e>
					}
					break;
				case MSG_TIM_VRFY:
					if (payload_length == UBX_SIZE_TIM_VRFY)
8001b408:	ec f8 00 58 	ld.w	r8,r6[88]
8001b40c:	90 09       	ld.sh	r9,r8[0x0]
8001b40e:	31 48       	mov	r8,20
8001b410:	f0 09 19 00 	cp.h	r9,r8
8001b414:	c1 11       	brne	8001b436 <ubx_read+0xa00>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimVRFYMessage;
8001b416:	ec f9 08 88 	ld.w	r9,r6[2184]
8001b41a:	ec f8 00 dc 	ld.w	r8,r6[220]
8001b41e:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastTimVRFYMessage;
8001b420:	ec f9 04 30 	ld.w	r9,r6[1072]
8001b424:	ec f8 00 e8 	ld.w	r8,r6[232]
8001b428:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidTimVRFYMessage;
8001b42a:	ec f8 00 fc 	ld.w	r8,r6[252]
8001b42e:	ec f9 04 64 	ld.w	r9,r6[1124]
8001b432:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_TIM_VRFY,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001b434:	c6 98       	rjmp	8001b506 <ubx_read+0xad0>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimVRFYMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastTimVRFYMessage;
						ubx_validMessage = &ubx_numberOfValidTimVRFYMessage;
						}else{
						dbg_print("Wrong TIM VRFY message 0x");
8001b436:	fe cc 0a 82 	sub	r12,pc,2690
8001b43a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001b43e:	ec f8 00 60 	ld.w	r8,r6[96]
8001b442:	11 88       	ld.ub	r8,r8[0x0]
8001b444:	31 0b       	mov	r11,16
8001b446:	10 9c       	mov	r12,r8
8001b448:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001b44c:	fe cc 0c 54 	sub	r12,pc,3156
8001b450:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001b454:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b458:	11 88       	ld.ub	r8,r8[0x0]
8001b45a:	31 0b       	mov	r11,16
8001b45c:	10 9c       	mov	r12,r8
8001b45e:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001b462:	fe cc 0c 5e 	sub	r12,pc,3166
8001b466:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001b46a:	ec f8 00 58 	ld.w	r8,r6[88]
8001b46e:	90 08       	ld.sh	r8,r8[0x0]
8001b470:	5c 78       	castu.h	r8
8001b472:	30 ab       	mov	r11,10
8001b474:	10 9c       	mov	r12,r8
8001b476:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001b47a:	fe cc 0c 66 	sub	r12,pc,3174
8001b47e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_TIM_VRFY,10);
8001b482:	30 ab       	mov	r11,10
8001b484:	31 4c       	mov	r12,20
8001b486:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001b48a:	fe cc 0c ae 	sub	r12,pc,3246
8001b48e:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001b492:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b496:	30 08       	mov	r8,0
8001b498:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001b49a:	fe 9f fa e5 	bral	8001aa64 <ubx_read+0x2e>
					}
					break;
					
				default:
					step = 0;
8001b49e:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b4a2:	30 08       	mov	r8,0
8001b4a4:	b2 88       	st.b	r9[0x0],r8
					dbg_print("Unexpected TIM message, Class: 0x");
8001b4a6:	fe cc 0b 3e 	sub	r12,pc,2878
8001b4aa:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(ubxclass,16);
8001b4ae:	ec f8 00 60 	ld.w	r8,r6[96]
8001b4b2:	11 88       	ld.ub	r8,r8[0x0]
8001b4b4:	31 0b       	mov	r11,16
8001b4b6:	10 9c       	mov	r12,r8
8001b4b8:	f0 16 00 04 	mcall	r6[16]
					dbg_print(", msg id: 0x");
8001b4bc:	fe cc 0c 0c 	sub	r12,pc,3084
8001b4c0:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(msg_id,16);
8001b4c4:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b4c8:	11 88       	ld.ub	r8,r8[0x0]
8001b4ca:	31 0b       	mov	r11,16
8001b4cc:	10 9c       	mov	r12,r8
8001b4ce:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of size ");
8001b4d2:	fe cc 0c 12 	sub	r12,pc,3090
8001b4d6:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(payload_length,10);
8001b4da:	ec f8 00 58 	ld.w	r8,r6[88]
8001b4de:	90 08       	ld.sh	r8,r8[0x0]
8001b4e0:	5c 78       	castu.h	r8
8001b4e2:	30 ab       	mov	r11,10
8001b4e4:	10 9c       	mov	r12,r8
8001b4e6:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" should be :");
8001b4ea:	fe cc 0b 5e 	sub	r12,pc,2910
8001b4ee:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(MSG_TIM_TP,16);
8001b4f2:	31 0b       	mov	r11,16
8001b4f4:	30 1c       	mov	r12,1
8001b4f6:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001b4fa:	fe cc 0d 1e 	sub	r12,pc,3358
8001b4fe:	f0 16 00 01 	mcall	r6[4]
					goto reset;
8001b502:	fe 9f fa b1 	bral	8001aa64 <ubx_read+0x2e>
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001b506:	c0 69       	rjmp	8001b712 <ubx_read+0xcdc>
					dbg_print_num(MSG_TIM_TP,16);
					dbg_print("\n");
					goto reset;
				}
			}else{
				step = 0;
8001b508:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b50c:	30 08       	mov	r8,0
8001b50e:	b2 88       	st.b	r9[0x0],r8
				dbg_print("Unexpected message, Class: 0x");
8001b510:	fe cc 0b 40 	sub	r12,pc,2880
8001b514:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(ubxclass,16);
8001b518:	ec f8 00 60 	ld.w	r8,r6[96]
8001b51c:	11 88       	ld.ub	r8,r8[0x0]
8001b51e:	31 0b       	mov	r11,16
8001b520:	10 9c       	mov	r12,r8
8001b522:	f0 16 00 04 	mcall	r6[16]
				dbg_print(", msg id: 0x");
8001b526:	fe cc 0c 76 	sub	r12,pc,3190
8001b52a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(msg_id,16);
8001b52e:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b532:	11 88       	ld.ub	r8,r8[0x0]
8001b534:	31 0b       	mov	r11,16
8001b536:	10 9c       	mov	r12,r8
8001b538:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" of size ");
8001b53c:	fe cc 0c 7c 	sub	r12,pc,3196
8001b540:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(payload_length,10);
8001b544:	ec f8 00 58 	ld.w	r8,r6[88]
8001b548:	90 08       	ld.sh	r8,r8[0x0]
8001b54a:	5c 78       	castu.h	r8
8001b54c:	30 ab       	mov	r11,10
8001b54e:	10 9c       	mov	r12,r8
8001b550:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001b554:	fe cc 0d 78 	sub	r12,pc,3448
8001b558:	f0 16 00 01 	mcall	r6[4]
				goto reset;	
8001b55c:	fe 9f fa 84 	bral	8001aa64 <ubx_read+0x2e>
			}		
			break;
		case 6:
			
			cksum_a += data;
8001b560:	ec f8 00 b0 	ld.w	r8,r6[176]
8001b564:	11 88       	ld.ub	r8,r8[0x0]
8001b566:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001b56a:	f2 08 00 08 	add	r8,r9,r8
8001b56e:	5c 58       	castu.b	r8
8001b570:	ec f9 00 b0 	ld.w	r9,r6[176]
8001b574:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001b576:	ec f8 01 0c 	ld.w	r8,r6[268]
8001b57a:	11 89       	ld.ub	r9,r8[0x0]
8001b57c:	ec f8 00 b0 	ld.w	r8,r6[176]
8001b580:	11 88       	ld.ub	r8,r8[0x0]
8001b582:	f2 08 00 08 	add	r8,r9,r8
8001b586:	5c 58       	castu.b	r8
8001b588:	ec f9 01 0c 	ld.w	r9,r6[268]
8001b58c:	b2 88       	st.b	r9[0x0],r8
			
			#ifdef BIG_ENDIAN
				(*ubx_currentMessage)[payload_length - 1 - payload_counter] = data;
8001b58e:	ec f8 00 dc 	ld.w	r8,r6[220]
8001b592:	70 08       	ld.w	r8,r8[0x0]
8001b594:	70 09       	ld.w	r9,r8[0x0]
8001b596:	ec f8 00 58 	ld.w	r8,r6[88]
8001b59a:	90 08       	ld.sh	r8,r8[0x0]
8001b59c:	5c 78       	castu.h	r8
8001b59e:	f0 ca 00 01 	sub	r10,r8,1
8001b5a2:	ec f8 01 c8 	ld.w	r8,r6[456]
8001b5a6:	90 08       	ld.sh	r8,r8[0x0]
8001b5a8:	5c 78       	castu.h	r8
8001b5aa:	f4 08 01 08 	sub	r8,r10,r8
8001b5ae:	10 09       	add	r9,r8
8001b5b0:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001b5b4:	b2 88       	st.b	r9[0x0],r8
			#else
				(*ubx_currentMessage)[payload_counter] = data;
			#endif
			
			payload_counter++;
8001b5b6:	ec f8 01 c8 	ld.w	r8,r6[456]
8001b5ba:	90 08       	ld.sh	r8,r8[0x0]
8001b5bc:	2f f8       	sub	r8,-1
8001b5be:	5c 88       	casts.h	r8
8001b5c0:	ec f9 01 c8 	ld.w	r9,r6[456]
8001b5c4:	b2 08       	st.h	r9[0x0],r8
			
			if (payload_counter == payload_length)
8001b5c6:	ec f8 01 c8 	ld.w	r8,r6[456]
8001b5ca:	90 09       	ld.sh	r9,r8[0x0]
8001b5cc:	ec f8 00 58 	ld.w	r8,r6[88]
8001b5d0:	90 08       	ld.sh	r8,r8[0x0]
8001b5d2:	f0 09 19 00 	cp.h	r9,r8
8001b5d6:	e0 81 00 9b 	brne	8001b70c <ubx_read+0xcd6>
			{
				step++;
8001b5da:	ec f8 00 4c 	ld.w	r8,r6[76]
8001b5de:	11 88       	ld.ub	r8,r8[0x0]
8001b5e0:	2f f8       	sub	r8,-1
8001b5e2:	5c 58       	castu.b	r8
8001b5e4:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b5e8:	b2 88       	st.b	r9[0x0],r8
			}
			break;
8001b5ea:	c9 48       	rjmp	8001b712 <ubx_read+0xcdc>
		case 7:
			step++;
8001b5ec:	ec f8 00 4c 	ld.w	r8,r6[76]
8001b5f0:	11 88       	ld.ub	r8,r8[0x0]
8001b5f2:	2f f8       	sub	r8,-1
8001b5f4:	5c 58       	castu.b	r8
8001b5f6:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b5fa:	b2 88       	st.b	r9[0x0],r8
			if (cksum_a != data)
8001b5fc:	ec f8 00 b0 	ld.w	r8,r6[176]
8001b600:	11 88       	ld.ub	r8,r8[0x0]
8001b602:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001b606:	f0 09 18 00 	cp.b	r9,r8
8001b60a:	e0 80 00 83 	breq	8001b710 <ubx_read+0xcda>
			{
				dbg_print("bad cksum_a ");
8001b60e:	fe cc 0c 1e 	sub	r12,pc,3102
8001b612:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(data,16);
8001b616:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001b61a:	31 0b       	mov	r11,16
8001b61c:	10 9c       	mov	r12,r8
8001b61e:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" should be ");
8001b622:	fe cc 0c 22 	sub	r12,pc,3106
8001b626:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(cksum_a,16);
8001b62a:	ec f8 00 b0 	ld.w	r8,r6[176]
8001b62e:	11 88       	ld.ub	r8,r8[0x0]
8001b630:	31 0b       	mov	r11,16
8001b632:	10 9c       	mov	r12,r8
8001b634:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" class : 0x");
8001b638:	fe cc 0c 2c 	sub	r12,pc,3116
8001b63c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(ubxclass,16);
8001b640:	ec f8 00 60 	ld.w	r8,r6[96]
8001b644:	11 88       	ld.ub	r8,r8[0x0]
8001b646:	31 0b       	mov	r11,16
8001b648:	10 9c       	mov	r12,r8
8001b64a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" msg_id : 0x");
8001b64e:	fe cc 0c 36 	sub	r12,pc,3126
8001b652:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(msg_id,16);
8001b656:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b65a:	11 88       	ld.ub	r8,r8[0x0]
8001b65c:	31 0b       	mov	r11,16
8001b65e:	10 9c       	mov	r12,r8
8001b660:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001b664:	fe cc 0e 88 	sub	r12,pc,3720
8001b668:	f0 16 00 01 	mcall	r6[4]
				step = 0;
8001b66c:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b670:	30 08       	mov	r8,0
8001b672:	b2 88       	st.b	r9[0x0],r8
				goto reset;
8001b674:	fe 9f f9 f8 	bral	8001aa64 <ubx_read+0x2e>
			}
			break;
		case 8:
			step=0;
8001b678:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b67c:	30 08       	mov	r8,0
8001b67e:	b2 88       	st.b	r9[0x0],r8
			if (cksum_b != data)
8001b680:	ec f8 01 0c 	ld.w	r8,r6[268]
8001b684:	11 88       	ld.ub	r8,r8[0x0]
8001b686:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001b68a:	f0 09 18 00 	cp.b	r9,r8
8001b68e:	c1 b0       	breq	8001b6c4 <ubx_read+0xc8e>
			{
				dbg_print("bad cksum_b ");
8001b690:	fe cc 0c 68 	sub	r12,pc,3176
8001b694:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(data,16);
8001b698:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001b69c:	31 0b       	mov	r11,16
8001b69e:	10 9c       	mov	r12,r8
8001b6a0:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" should be ");
8001b6a4:	fe cc 0c a4 	sub	r12,pc,3236
8001b6a8:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(cksum_b,16);
8001b6ac:	ec f8 01 0c 	ld.w	r8,r6[268]
8001b6b0:	11 88       	ld.ub	r8,r8[0x0]
8001b6b2:	31 0b       	mov	r11,16
8001b6b4:	10 9c       	mov	r12,r8
8001b6b6:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001b6ba:	fe cc 0e de 	sub	r12,pc,3806
8001b6be:	f0 16 00 01 	mcall	r6[4]
				break;
8001b6c2:	c2 88       	rjmp	8001b712 <ubx_read+0xcdc>
			}
			++(*ubx_validMessage);
8001b6c4:	ec f8 00 fc 	ld.w	r8,r6[252]
8001b6c8:	70 08       	ld.w	r8,r8[0x0]
8001b6ca:	90 09       	ld.sh	r9,r8[0x0]
8001b6cc:	2f f9       	sub	r9,-1
8001b6ce:	5c 89       	casts.h	r9
8001b6d0:	b0 09       	st.h	r8[0x0],r9
			//dbg_print("Valid message");
			
			// swap message buffers, old message is discarded and becomes incoming buffer, new message become valid message (=old)
			temporaryMessageForSwaping = *ubx_currentMessage;
8001b6d2:	ec f8 00 dc 	ld.w	r8,r6[220]
8001b6d6:	70 08       	ld.w	r8,r8[0x0]
8001b6d8:	70 08       	ld.w	r8,r8[0x0]
8001b6da:	ef 48 ff fc 	st.w	r7[-4],r8
			*ubx_currentMessage = *ubx_lastMessage;
8001b6de:	ec f8 00 dc 	ld.w	r8,r6[220]
8001b6e2:	70 08       	ld.w	r8,r8[0x0]
8001b6e4:	ec f9 00 e8 	ld.w	r9,r6[232]
8001b6e8:	72 09       	ld.w	r9,r9[0x0]
8001b6ea:	72 09       	ld.w	r9,r9[0x0]
8001b6ec:	91 09       	st.w	r8[0x0],r9
			*ubx_lastMessage = temporaryMessageForSwaping;
8001b6ee:	ec f8 00 e8 	ld.w	r8,r6[232]
8001b6f2:	70 08       	ld.w	r8,r8[0x0]
8001b6f4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001b6f8:	91 09       	st.w	r8[0x0],r9
			
			if (ubx_process_data())
8001b6fa:	f0 16 02 0a 	mcall	r6[2088]
8001b6fe:	18 98       	mov	r8,r12
8001b700:	58 08       	cp.w	r8,0
8001b702:	c0 80       	breq	8001b712 <ubx_read+0xcdc>
			{
				msg_ok = true;
8001b704:	30 18       	mov	r8,1
8001b706:	ef 68 ff fb 	st.b	r7[-5],r8
8001b70a:	c0 48       	rjmp	8001b712 <ubx_read+0xcdc>
			
			if (payload_counter == payload_length)
			{
				step++;
			}
			break;
8001b70c:	d7 03       	nop
8001b70e:	c0 28       	rjmp	8001b712 <ubx_read+0xcdc>
				dbg_print_num(msg_id,16);
				dbg_print("\n");
				step = 0;
				goto reset;
			}
			break;
8001b710:	d7 03       	nop
	bool msg_ok = false;
	//bool new_message = false;
	
	unsigned char * temporaryMessageForSwaping;
	
	while(buffer_bytes_available(&(centralData->gps_buffer)))
8001b712:	ec f8 00 00 	ld.w	r8,r6[0]
8001b716:	70 08       	ld.w	r8,r8[0x0]
8001b718:	f0 c8 f6 2c 	sub	r8,r8,-2516
8001b71c:	10 9c       	mov	r12,r8
8001b71e:	f0 16 00 2e 	mcall	r6[184]
8001b722:	18 98       	mov	r8,r12
8001b724:	58 08       	cp.w	r8,0
8001b726:	fe 91 f9 94 	brne	8001aa4e <ubx_read+0x18>
				msg_ok = true;
			}
		}
		
	}
	return msg_ok;
8001b72a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
8001b72e:	10 9c       	mov	r12,r8
8001b730:	2f ed       	sub	sp,-8
8001b732:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001b736:	00 00       	add	r0,r0
8001b738:	80 01       	ld.sh	r1,r0[0x0]
8001b73a:	a8 c6       	st.b	r4[0x4],r6
8001b73c:	4d 53       	lddpc	r3,8001b890 <ubx_read+0xe5a>
8001b73e:	47 5f       	lddsp	pc,sp[0x1d4]
8001b740:	4d 4f       	lddpc	pc,8001b890 <ubx_read+0xe5a>
8001b742:	4e 20       	lddpc	r0,8001b8c8 <ubx_read+0xe92>
8001b744:	47 50       	lddsp	r0,sp[0x1d4]
8001b746:	53 20       	stdsp	sp[0xc8],r0
8001b748:	61 77       	ld.w	r7,r0[0x5c]
8001b74a:	61 6b       	ld.w	r11,r0[0x58]
8001b74c:	65 0a       	ld.w	r10,r2[0x40]
8001b74e:	00 00       	add	r0,r0
8001b750:	4d 53       	lddpc	r3,8001b8a4 <ubx_read+0xe6e>
8001b752:	47 5f       	lddsp	pc,sp[0x1d4]
8001b754:	54 49       	stdsp	sp[0x110],r9
8001b756:	4d 5f       	lddpc	pc,8001b8a8 <ubx_read+0xe72>
8001b758:	54 50       	stdsp	sp[0x114],r0
8001b75a:	20 47       	sub	r7,4
8001b75c:	50 53       	stdsp	sp[0x14],r3
8001b75e:	20 61       	sub	r1,6
8001b760:	77 61       	ld.w	r1,r11[0x58]
8001b762:	6b 65       	ld.w	r5,r5[0x58]
8001b764:	0a 00       	add	r0,r5
8001b766:	00 00       	add	r0,r0
8001b768:	4d 53       	lddpc	r3,8001b8bc <ubx_read+0xe86>
8001b76a:	47 5f       	lddsp	pc,sp[0x1d4]
8001b76c:	54 49       	stdsp	sp[0x110],r9
8001b76e:	4d 5f       	lddpc	pc,8001b8c0 <ubx_read+0xe8a>
8001b770:	56 52       	stdsp	sp[0x194],r2
8001b772:	46 59       	lddsp	r9,sp[0x194]
8001b774:	00 00       	add	r0,r0
8001b776:	00 00       	add	r0,r0
8001b778:	20 69       	sub	r9,6
8001b77a:	74 6f       	ld.w	pc,r10[0x18]
8001b77c:	77 20       	ld.w	r0,r11[0x48]
8001b77e:	3a 00       	mov	r0,-96
8001b780:	20 66       	sub	r6,6
8001b782:	72 61       	ld.w	r1,r9[0x18]
8001b784:	63 20       	ld.w	r0,r1[0x48]
8001b786:	3a 00       	mov	r0,-96
8001b788:	20 64       	sub	r4,6
8001b78a:	65 6c       	ld.w	r12,r2[0x58]
8001b78c:	74 61       	ld.w	r1,r10[0x18]
8001b78e:	4d 73       	lddpc	r3,8001b8e8 <ubx_read+0xeb2>
8001b790:	20 3a       	sub	r10,3
8001b792:	00 00       	add	r0,r0
8001b794:	20 64       	sub	r4,6
8001b796:	65 6c       	ld.w	r12,r2[0x58]
8001b798:	74 61       	ld.w	r1,r10[0x18]
8001b79a:	4e 73       	lddpc	r3,8001b934 <ubx_read+0xefe>
8001b79c:	20 3a       	sub	r10,3
8001b79e:	00 00       	add	r0,r0
8001b7a0:	47 6f       	lddsp	pc,sp[0x1d8]
8001b7a2:	74 20       	ld.w	r0,r10[0x8]
8001b7a4:	65 6e       	ld.w	lr,r2[0x58]
8001b7a6:	67 69       	ld.w	r9,r3[0x58]
8001b7a8:	6e 65       	ld.w	r5,r7[0x18]
8001b7aa:	20 73       	sub	r3,7
8001b7ac:	65 74       	ld.w	r4,r2[0x5c]
8001b7ae:	74 69       	ld.w	r9,r10[0x18]
8001b7b0:	6e 67       	ld.w	r7,r7[0x18]
8001b7b2:	73 20       	ld.w	r0,r9[0x48]
8001b7b4:	00 00       	add	r0,r0
8001b7b6:	00 00       	add	r0,r0
8001b7b8:	53 65       	stdsp	sp[0xd8],r5
8001b7ba:	6e 64       	ld.w	r4,r7[0x18]
8001b7bc:	20 4e       	sub	lr,4
8001b7be:	61 76       	ld.w	r6,r0[0x5c]
8001b7c0:	20 73       	sub	r3,7
8001b7c2:	65 74       	ld.w	r4,r2[0x5c]
8001b7c4:	74 69       	ld.w	r9,r10[0x18]
8001b7c6:	6e 67       	ld.w	r7,r7[0x18]
8001b7c8:	73 00       	ld.w	r0,r9[0x40]
8001b7ca:	00 00       	add	r0,r0
8001b7cc:	4e 6f       	lddpc	pc,8001b964 <ubx_read+0xf2e>
8001b7ce:	20 65       	sub	r5,6
8001b7d0:	6e 67       	ld.w	r7,r7[0x18]
8001b7d2:	69 6e       	ld.w	lr,r4[0x58]
8001b7d4:	65 20       	ld.w	r0,r2[0x48]
8001b7d6:	73 65       	ld.w	r5,r9[0x58]
8001b7d8:	74 74       	ld.w	r4,r10[0x1c]
8001b7da:	69 6e       	ld.w	lr,r4[0x58]
8001b7dc:	67 73       	ld.w	r3,r3[0x5c]
8001b7de:	20 72       	sub	r2,7
8001b7e0:	65 63       	ld.w	r3,r2[0x58]
8001b7e2:	65 69       	ld.w	r9,r2[0x58]
8001b7e4:	76 65       	ld.w	r5,r11[0x18]
8001b7e6:	64 20       	ld.w	r0,r2[0x8]
8001b7e8:	00 00       	add	r0,r0
8001b7ea:	00 00       	add	r0,r0
8001b7ec:	4d 65       	lddpc	r5,8001b944 <ubx_read+0xf0e>
8001b7ee:	73 73       	ld.w	r3,r9[0x5c]
8001b7f0:	61 67       	ld.w	r7,r0[0x58]
8001b7f2:	65 20       	ld.w	r0,r2[0x48]
8001b7f4:	43 46       	lddsp	r6,sp[0xd0]
8001b7f6:	47 20       	lddsp	r0,sp[0x1c8]
8001b7f8:	52 61       	stdsp	sp[0x98],r1
8001b7fa:	74 65       	ld.w	r5,r10[0x18]
8001b7fc:	20 30       	sub	r0,3
8001b7fe:	78 00       	ld.w	r0,r12[0x0]
8001b800:	55 6e       	stdsp	sp[0x158],lr
8001b802:	65 78       	ld.w	r8,r2[0x5c]
8001b804:	70 65       	ld.w	r5,r8[0x18]
8001b806:	63 74       	ld.w	r4,r1[0x5c]
8001b808:	65 64       	ld.w	r4,r2[0x58]
8001b80a:	20 6d       	sub	sp,24
8001b80c:	65 73       	ld.w	r3,r2[0x5c]
8001b80e:	73 61       	ld.w	r1,r9[0x58]
8001b810:	67 65       	ld.w	r5,r3[0x58]
8001b812:	20 30       	sub	r0,3
8001b814:	78 00       	ld.w	r0,r12[0x0]
8001b816:	00 00       	add	r0,r0
8001b818:	30 32       	mov	r2,3
8001b81a:	78 20       	ld.w	r0,r12[0x8]
8001b81c:	30 78       	mov	r8,7
8001b81e:	00 00       	add	r0,r0
8001b820:	30 32       	mov	r2,3
8001b822:	78 0a       	ld.w	r10,r12[0x0]
8001b824:	00 00       	add	r0,r0
8001b826:	00 00       	add	r0,r0
8001b828:	44 69       	lddsp	r9,sp[0x118]
8001b82a:	73 61       	ld.w	r1,r9[0x58]
8001b82c:	62 6c       	ld.w	r12,r1[0x18]
8001b82e:	69 6e       	ld.w	lr,r4[0x58]
8001b830:	67 20       	ld.w	r0,r3[0x48]
8001b832:	6d 65       	ld.w	r5,r6[0x58]
8001b834:	73 73       	ld.w	r3,r9[0x5c]
8001b836:	61 67       	ld.w	r7,r0[0x58]
8001b838:	65 20       	ld.w	r0,r2[0x48]
8001b83a:	30 78       	mov	r8,7
8001b83c:	00 00       	add	r0,r0
8001b83e:	00 00       	add	r0,r0
8001b840:	4d 53       	lddpc	r3,8001b994 <ubx_read+0xf5e>
8001b842:	47 5f       	lddsp	pc,sp[0x1d4]
8001b844:	4e 41       	lddpc	r1,8001b9d4 <ubx_read+0xf9e>
8001b846:	56 5f       	stdsp	sp[0x194],pc
8001b848:	50 4f       	stdsp	sp[0x10],pc
8001b84a:	53 4c       	stdsp	sp[0xd0],r12
8001b84c:	4c 48       	lddpc	r8,8001b95c <ubx_read+0xf26>
8001b84e:	00 00       	add	r0,r0
8001b850:	20 6c       	sub	r12,6
8001b852:	6f 6e       	ld.w	lr,r7[0x58]
8001b854:	67 69       	ld.w	r9,r3[0x58]
8001b856:	74 75       	ld.w	r5,r10[0x1c]
8001b858:	64 65       	ld.w	r5,r2[0x18]
8001b85a:	20 3a       	sub	r10,3
8001b85c:	00 00       	add	r0,r0
8001b85e:	00 00       	add	r0,r0
8001b860:	20 6c       	sub	r12,6
8001b862:	61 74       	ld.w	r4,r0[0x5c]
8001b864:	69 74       	ld.w	r4,r4[0x5c]
8001b866:	75 64       	ld.w	r4,r10[0x58]
8001b868:	65 20       	ld.w	r0,r2[0x48]
8001b86a:	3a 00       	mov	r0,-96
8001b86c:	20 61       	sub	r1,6
8001b86e:	6c 74       	ld.w	r4,r6[0x1c]
8001b870:	5f 65       	srmi	r5
8001b872:	6c 6c       	ld.w	r12,r6[0x18]
8001b874:	69 70       	ld.w	r0,r4[0x5c]
8001b876:	73 20       	ld.w	r0,r9[0x48]
8001b878:	3a 00       	mov	r0,-96
8001b87a:	00 00       	add	r0,r0
8001b87c:	20 61       	sub	r1,6
8001b87e:	6c 74       	ld.w	r4,r6[0x1c]
8001b880:	5f 6d       	srmi	sp
8001b882:	73 6c       	ld.w	r12,r9[0x58]
8001b884:	20 3a       	sub	r10,3
8001b886:	00 00       	add	r0,r0
8001b888:	20 68       	sub	r8,6
8001b88a:	6f 72       	ld.w	r2,r7[0x5c]
8001b88c:	7a 5f       	ld.w	pc,sp[0x14]
8001b88e:	61 63       	ld.w	r3,r0[0x58]
8001b890:	63 20       	ld.w	r0,r1[0x48]
8001b892:	3a 00       	mov	r0,-96
8001b894:	20 76       	sub	r6,7
8001b896:	65 72       	ld.w	r2,r2[0x5c]
8001b898:	74 5f       	ld.w	pc,r10[0x14]
8001b89a:	61 63       	ld.w	r3,r0[0x58]
8001b89c:	63 20       	ld.w	r0,r1[0x48]
8001b89e:	3a 00       	mov	r0,-96
8001b8a0:	4d 53       	lddpc	r3,8001b9f4 <ubx_read+0xfbe>
8001b8a2:	47 5f       	lddsp	pc,sp[0x1d4]
8001b8a4:	53 54       	stdsp	sp[0xd4],r4
8001b8a6:	41 54       	lddsp	r4,sp[0x54]
8001b8a8:	55 53       	stdsp	sp[0x154],r3
8001b8aa:	20 66       	sub	r6,6
8001b8ac:	69 78       	ld.w	r8,r4[0x5c]
8001b8ae:	5f 74       	srpl	r4
8001b8b0:	79 70       	ld.w	r0,r12[0x5c]
8001b8b2:	65 20       	ld.w	r0,r2[0x48]
8001b8b4:	3d 20       	mov	r0,-46
8001b8b6:	30 78       	mov	r8,7
8001b8b8:	00 00       	add	r0,r0
8001b8ba:	00 00       	add	r0,r0
8001b8bc:	2c 20       	sub	r0,-62
8001b8be:	75 70       	ld.w	r0,r10[0x5c]
8001b8c0:	74 69       	ld.w	r9,r10[0x18]
8001b8c2:	6d 65       	ld.w	r5,r6[0x58]
8001b8c4:	20 3d       	sub	sp,12
8001b8c6:	00 00       	add	r0,r0
8001b8c8:	4d 53       	lddpc	r3,8001ba1c <ubx_process_data+0xe>
8001b8ca:	47 5f       	lddsp	pc,sp[0x1d4]
8001b8cc:	53 4f       	stdsp	sp[0xd0],pc
8001b8ce:	4c 20       	lddpc	r0,8001b9d4 <ubx_read+0xf9e>
8001b8d0:	00 00       	add	r0,r0
8001b8d2:	00 00       	add	r0,r0
8001b8d4:	69 74       	ld.w	r4,r4[0x5c]
8001b8d6:	6f 77       	ld.w	r7,r7[0x5c]
8001b8d8:	20 3a       	sub	r10,3
8001b8da:	00 00       	add	r0,r0
8001b8dc:	20 77       	sub	r7,7
8001b8de:	65 65       	ld.w	r5,r2[0x58]
8001b8e0:	6b 20       	ld.w	r0,r5[0x48]
8001b8e2:	3a 00       	mov	r0,-96
8001b8e4:	20 66       	sub	r6,6
8001b8e6:	69 78       	ld.w	r8,r4[0x5c]
8001b8e8:	5f 74       	srpl	r4
8001b8ea:	79 70       	ld.w	r0,r12[0x5c]
8001b8ec:	65 20       	ld.w	r0,r2[0x48]
8001b8ee:	3d 20       	mov	r0,-46
8001b8f0:	30 78       	mov	r8,7
8001b8f2:	30 00       	mov	r0,0
8001b8f4:	20 70       	sub	r0,7
8001b8f6:	6f 73       	ld.w	r3,r7[0x5c]
8001b8f8:	5f 61       	srmi	r1
8001b8fa:	63 63       	ld.w	r3,r1[0x58]
8001b8fc:	5f 33       	srlo	r3
8001b8fe:	64 20       	ld.w	r0,r2[0x8]
8001b900:	3a 00       	mov	r0,-96
8001b902:	00 00       	add	r0,r0
8001b904:	20 65       	sub	r5,6
8001b906:	63 65       	ld.w	r5,r1[0x58]
8001b908:	66 78       	ld.w	r8,r3[0x1c]
8001b90a:	20 3a       	sub	r10,3
8001b90c:	00 00       	add	r0,r0
8001b90e:	00 00       	add	r0,r0
8001b910:	20 65       	sub	r5,6
8001b912:	63 65       	ld.w	r5,r1[0x58]
8001b914:	66 79       	ld.w	r9,r3[0x1c]
8001b916:	20 3a       	sub	r10,3
8001b918:	00 00       	add	r0,r0
8001b91a:	00 00       	add	r0,r0
8001b91c:	20 65       	sub	r5,6
8001b91e:	63 65       	ld.w	r5,r1[0x58]
8001b920:	66 7a       	ld.w	r10,r3[0x1c]
8001b922:	20 3a       	sub	r10,3
8001b924:	00 00       	add	r0,r0
8001b926:	00 00       	add	r0,r0
8001b928:	20 70       	sub	r0,7
8001b92a:	6f 73       	ld.w	r3,r7[0x5c]
8001b92c:	5f 44       	srge	r4
8001b92e:	4f 50       	lddpc	r0,8001bb00 <ubx_process_data+0xf2>
8001b930:	20 3a       	sub	r10,3
8001b932:	00 00       	add	r0,r0
8001b934:	20 6e       	sub	lr,6
8001b936:	75 6d       	ld.w	sp,r10[0x58]
8001b938:	20 73       	sub	r3,7
8001b93a:	61 74       	ld.w	r4,r0[0x5c]
8001b93c:	20 3a       	sub	r10,3
8001b93e:	00 00       	add	r0,r0
8001b940:	4d 53       	lddpc	r3,8001ba94 <ubx_process_data+0x86>
8001b942:	47 5f       	lddsp	pc,sp[0x1d4]
8001b944:	4e 41       	lddpc	r1,8001bad4 <ubx_process_data+0xc6>
8001b946:	56 5f       	stdsp	sp[0x194],pc
8001b948:	56 45       	stdsp	sp[0x190],r5
8001b94a:	4c 4e       	lddpc	lr,8001ba58 <ubx_process_data+0x4a>
8001b94c:	45 44       	lddsp	r4,sp[0x150]
8001b94e:	20 00       	sub	r0,0
8001b950:	20 6e       	sub	lr,6
8001b952:	65 64       	ld.w	r4,r2[0x58]
8001b954:	5f 6e       	srmi	lr
8001b956:	6f 72       	ld.w	r2,r7[0x5c]
8001b958:	74 68       	ld.w	r8,r10[0x18]
8001b95a:	20 3a       	sub	r10,3
8001b95c:	00 00       	add	r0,r0
8001b95e:	00 00       	add	r0,r0
8001b960:	20 6e       	sub	lr,6
8001b962:	65 64       	ld.w	r4,r2[0x58]
8001b964:	5f 65       	srmi	r5
8001b966:	61 73       	ld.w	r3,r0[0x5c]
8001b968:	74 20       	ld.w	r0,r10[0x8]
8001b96a:	3a 00       	mov	r0,-96
8001b96c:	20 6e       	sub	lr,6
8001b96e:	65 64       	ld.w	r4,r2[0x58]
8001b970:	5f 64       	srmi	r4
8001b972:	6f 77       	ld.w	r7,r7[0x5c]
8001b974:	6e 20       	ld.w	r0,r7[0x8]
8001b976:	3a 00       	mov	r0,-96
8001b978:	20 73       	sub	r3,7
8001b97a:	70 65       	ld.w	r5,r8[0x18]
8001b97c:	65 64       	ld.w	r4,r2[0x58]
8001b97e:	5f 33       	srlo	r3
8001b980:	64 20       	ld.w	r0,r2[0x8]
8001b982:	3a 00       	mov	r0,-96
8001b984:	20 68       	sub	r8,6
8001b986:	65 61       	ld.w	r1,r2[0x58]
8001b988:	64 69       	ld.w	r9,r2[0x18]
8001b98a:	6e 67       	ld.w	r7,r7[0x18]
8001b98c:	5f 32       	srlo	r2
8001b98e:	64 20       	ld.w	r0,r2[0x8]
8001b990:	3a 00       	mov	r0,-96
8001b992:	00 00       	add	r0,r0
8001b994:	20 73       	sub	r3,7
8001b996:	70 65       	ld.w	r5,r8[0x18]
8001b998:	65 64       	ld.w	r4,r2[0x58]
8001b99a:	5f 61       	srmi	r1
8001b99c:	63 63       	ld.w	r3,r1[0x58]
8001b99e:	75 72       	ld.w	r2,r10[0x5c]
8001b9a0:	61 63       	ld.w	r3,r0[0x58]
8001b9a2:	79 20       	ld.w	r0,r12[0x48]
8001b9a4:	3a 00       	mov	r0,-96
8001b9a6:	00 00       	add	r0,r0
8001b9a8:	20 68       	sub	r8,6
8001b9aa:	65 61       	ld.w	r1,r2[0x58]
8001b9ac:	64 69       	ld.w	r9,r2[0x18]
8001b9ae:	6e 67       	ld.w	r7,r7[0x18]
8001b9b0:	5f 61       	srmi	r1
8001b9b2:	63 63       	ld.w	r3,r1[0x58]
8001b9b4:	75 72       	ld.w	r2,r10[0x5c]
8001b9b6:	61 63       	ld.w	r3,r0[0x58]
8001b9b8:	79 20       	ld.w	r0,r12[0x48]
8001b9ba:	3a 00       	mov	r0,-96
8001b9bc:	4d 53       	lddpc	r3,8001bb10 <ubx_process_data+0x102>
8001b9be:	47 5f       	lddsp	pc,sp[0x1d4]
8001b9c0:	4e 41       	lddpc	r1,8001bb50 <ubx_process_data+0x142>
8001b9c2:	56 5f       	stdsp	sp[0x194],pc
8001b9c4:	53 56       	stdsp	sp[0xd4],r6
8001b9c6:	49 4e       	lddpc	lr,8001ba14 <ubx_process_data+0x6>
8001b9c8:	46 4f       	lddsp	pc,sp[0x190]
8001b9ca:	2c 20       	sub	r0,-62
8001b9cc:	6e 75       	ld.w	r5,r7[0x1c]
8001b9ce:	6d 43       	ld.w	r3,r6[0x50]
8001b9d0:	68 61       	ld.w	r1,r4[0x18]
8001b9d2:	6e 6e       	ld.w	lr,r7[0x18]
8001b9d4:	65 6c       	ld.w	r12,r2[0x58]
8001b9d6:	3a 00       	mov	r0,-96
8001b9d8:	55 6e       	stdsp	sp[0x158],lr
8001b9da:	65 78       	ld.w	r8,r2[0x5c]
8001b9dc:	70 65       	ld.w	r5,r8[0x18]
8001b9de:	63 74       	ld.w	r4,r1[0x5c]
8001b9e0:	65 64       	ld.w	r4,r2[0x58]
8001b9e2:	20 4e       	sub	lr,4
8001b9e4:	41 56       	lddsp	r6,sp[0x54]
8001b9e6:	20 6d       	sub	sp,24
8001b9e8:	65 73       	ld.w	r3,r2[0x5c]
8001b9ea:	73 61       	ld.w	r1,r9[0x58]
8001b9ec:	67 65       	ld.w	r5,r3[0x58]
8001b9ee:	20 30       	sub	r0,3
8001b9f0:	78 00       	ld.w	r0,r12[0x0]
8001b9f2:	00 00       	add	r0,r0
8001b9f4:	44 69       	lddsp	r9,sp[0x118]
8001b9f6:	73 61       	ld.w	r1,r9[0x58]
8001b9f8:	62 6c       	ld.w	r12,r1[0x18]
8001b9fa:	69 6e       	ld.w	lr,r4[0x58]
8001b9fc:	67 20       	ld.w	r0,r3[0x48]
8001b9fe:	4e 41       	lddpc	r1,8001bb8c <ubx_process_data+0x17e>
8001ba00:	56 20       	stdsp	sp[0x188],r0
8001ba02:	6d 65       	ld.w	r5,r6[0x58]
8001ba04:	73 73       	ld.w	r3,r9[0x5c]
8001ba06:	61 67       	ld.w	r7,r0[0x58]
8001ba08:	65 20       	ld.w	r0,r2[0x48]
8001ba0a:	30 78       	mov	r8,7
	...

8001ba0e <ubx_process_data>:
Process the new received message, class by class
return true if new position and velocity messages are received, false otherwise
************************************************************************************
*/
bool ubx_process_data(void)
{
8001ba0e:	eb cd 40 e0 	pushm	r5-r7,lr
8001ba12:	1a 97       	mov	r7,sp
8001ba14:	20 ad       	sub	sp,40
8001ba16:	fe f6 0a e6 	ld.w	r6,pc[2790]
8001ba1a:	1e 26       	rsub	r6,pc
	ubx_nav_velned *gpsVelned;
	ubx_nav_SVInfo *gpsSVInfo;
	
	//dbg_print("ubx_process_data\n");
	
	if (ubxclass == UBX_CLASS_ACK)
8001ba1c:	ec f8 00 60 	ld.w	r8,r6[96]
8001ba20:	11 89       	ld.ub	r9,r8[0x0]
8001ba22:	30 58       	mov	r8,5
8001ba24:	f0 09 18 00 	cp.b	r9,r8
8001ba28:	c0 f1       	brne	8001ba46 <ubx_process_data+0x38>
	{
		dbg_print_num(msg_id,10);
8001ba2a:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ba2e:	11 88       	ld.ub	r8,r8[0x0]
8001ba30:	30 ab       	mov	r11,10
8001ba32:	10 9c       	mov	r12,r8
8001ba34:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8001ba38:	fe cc 12 5c 	sub	r12,pc,4700
8001ba3c:	f0 16 00 01 	mcall	r6[4]
		return false;
8001ba40:	30 08       	mov	r8,0
8001ba42:	e0 8f 05 58 	bral	8001c4f2 <ubx_process_data+0xae4>
	}
 	if (ubxclass == UBX_CLASS_MON)
8001ba46:	ec f8 00 60 	ld.w	r8,r6[96]
8001ba4a:	11 89       	ld.ub	r9,r8[0x0]
8001ba4c:	30 a8       	mov	r8,10
8001ba4e:	f0 09 18 00 	cp.b	r9,r8
8001ba52:	c1 11       	brne	8001ba74 <ubx_process_data+0x66>
 	{
 		ubx_mon_rxr_struct *gpsRXR = ubx_GetMonRXR();
8001ba54:	f0 16 02 10 	mcall	r6[2112]
8001ba58:	18 98       	mov	r8,r12
8001ba5a:	ef 48 ff ec 	st.w	r7[-20],r8
 		if (gpsRXR)
8001ba5e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001ba62:	58 08       	cp.w	r8,0
8001ba64:	c0 50       	breq	8001ba6e <ubx_process_data+0x60>
 		{
 			dbg_print("MSG_MON GPS awake\n");
8001ba66:	fe cc 03 2a 	sub	r12,pc,810
8001ba6a:	f0 16 00 01 	mcall	r6[4]
 		}
		 return false;
8001ba6e:	30 08       	mov	r8,0
8001ba70:	e0 8f 05 41 	bral	8001c4f2 <ubx_process_data+0xae4>
 	}
	if (ubxclass == UBX_CLASS_TIM)
8001ba74:	ec f8 00 60 	ld.w	r8,r6[96]
8001ba78:	11 89       	ld.ub	r9,r8[0x0]
8001ba7a:	30 d8       	mov	r8,13
8001ba7c:	f0 09 18 00 	cp.b	r9,r8
8001ba80:	e0 81 00 89 	brne	8001bb92 <ubx_process_data+0x184>
	{
		ubx_tim_tp *gpsTimTP = ubx_GetTimTP();
8001ba84:	f0 16 01 4a 	mcall	r6[1320]
8001ba88:	18 98       	mov	r8,r12
8001ba8a:	ef 48 ff f0 	st.w	r7[-16],r8
		if (gpsTimTP)
8001ba8e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001ba92:	58 08       	cp.w	r8,0
8001ba94:	c2 40       	breq	8001badc <ubx_process_data+0xce>
		{
			loopTimTp = ++loopTimTp % numSkippedMsg;
8001ba96:	ec f8 02 00 	ld.w	r8,r6[512]
8001ba9a:	11 88       	ld.ub	r8,r8[0x0]
8001ba9c:	2f f8       	sub	r8,-1
8001ba9e:	5c 58       	castu.b	r8
8001baa0:	ec f9 02 00 	ld.w	r9,r6[512]
8001baa4:	b2 88       	st.b	r9[0x0],r8
8001baa6:	ec f8 02 00 	ld.w	r8,r6[512]
8001baaa:	11 88       	ld.ub	r8,r8[0x0]
8001baac:	ec f9 01 98 	ld.w	r9,r6[408]
8001bab0:	13 89       	ld.ub	r9,r9[0x0]
8001bab2:	f0 09 0d 08 	divu	r8,r8,r9
8001bab6:	12 98       	mov	r8,r9
8001bab8:	5c 58       	castu.b	r8
8001baba:	ec f9 02 00 	ld.w	r9,r6[512]
8001babe:	b2 88       	st.b	r9[0x0],r8
			if((printNavOnDebug)&&(loopTimTp == 0))
8001bac0:	ec f8 01 88 	ld.w	r8,r6[392]
8001bac4:	11 88       	ld.ub	r8,r8[0x0]
8001bac6:	58 08       	cp.w	r8,0
8001bac8:	c0 a0       	breq	8001badc <ubx_process_data+0xce>
8001baca:	ec f8 02 00 	ld.w	r8,r6[512]
8001bace:	11 88       	ld.ub	r8,r8[0x0]
8001bad0:	58 08       	cp.w	r8,0
8001bad2:	c0 51       	brne	8001badc <ubx_process_data+0xce>
			{
				dbg_print("MSG_TIM_TP GPS awake\n");
8001bad4:	fe cc 03 84 	sub	r12,pc,900
8001bad8:	f0 16 00 01 	mcall	r6[4]
			}
		}
		ubx_tim_vrfy *gpsTimVrfy = ubx_GetTimVRFY();
8001badc:	f0 16 02 12 	mcall	r6[2120]
8001bae0:	18 98       	mov	r8,r12
8001bae2:	ef 48 ff f4 	st.w	r7[-12],r8
		if (gpsTimVrfy)
8001bae6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001baea:	58 08       	cp.w	r8,0
8001baec:	c5 00       	breq	8001bb8c <ubx_process_data+0x17e>
		{
			loopTimVrfy = ++loopTimVrfy % numSkippedMsg;
8001baee:	ec f8 01 b8 	ld.w	r8,r6[440]
8001baf2:	11 88       	ld.ub	r8,r8[0x0]
8001baf4:	2f f8       	sub	r8,-1
8001baf6:	5c 58       	castu.b	r8
8001baf8:	ec f9 01 b8 	ld.w	r9,r6[440]
8001bafc:	b2 88       	st.b	r9[0x0],r8
8001bafe:	ec f8 01 b8 	ld.w	r8,r6[440]
8001bb02:	11 88       	ld.ub	r8,r8[0x0]
8001bb04:	ec f9 01 98 	ld.w	r9,r6[408]
8001bb08:	13 89       	ld.ub	r9,r9[0x0]
8001bb0a:	f0 09 0d 08 	divu	r8,r8,r9
8001bb0e:	12 98       	mov	r8,r9
8001bb10:	5c 58       	castu.b	r8
8001bb12:	ec f9 01 b8 	ld.w	r9,r6[440]
8001bb16:	b2 88       	st.b	r9[0x0],r8
			if((printNavOnDebug)&&(loopTimVrfy == 0))
8001bb18:	ec f8 01 88 	ld.w	r8,r6[392]
8001bb1c:	11 88       	ld.ub	r8,r8[0x0]
8001bb1e:	58 08       	cp.w	r8,0
8001bb20:	c3 60       	breq	8001bb8c <ubx_process_data+0x17e>
8001bb22:	ec f8 01 b8 	ld.w	r8,r6[440]
8001bb26:	11 88       	ld.ub	r8,r8[0x0]
8001bb28:	58 08       	cp.w	r8,0
8001bb2a:	c3 11       	brne	8001bb8c <ubx_process_data+0x17e>
			{
				dbg_print("MSG_TIM_VRFY");
8001bb2c:	fe cc 03 c4 	sub	r12,pc,964
8001bb30:	f0 16 00 01 	mcall	r6[4]
				dbg_print(" itow :");
8001bb34:	fe cc 03 bc 	sub	r12,pc,956
8001bb38:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->itow,10);
8001bb3c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001bb40:	70 48       	ld.w	r8,r8[0x10]
8001bb42:	30 ab       	mov	r11,10
8001bb44:	10 9c       	mov	r12,r8
8001bb46:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" frac :");
8001bb4a:	fe cc 03 ca 	sub	r12,pc,970
8001bb4e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->frac,10);
8001bb52:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001bb56:	70 38       	ld.w	r8,r8[0xc]
8001bb58:	30 ab       	mov	r11,10
8001bb5a:	10 9c       	mov	r12,r8
8001bb5c:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" deltaMs :");
8001bb60:	fe cc 03 d8 	sub	r12,pc,984
8001bb64:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->deltaMs,10);
8001bb68:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001bb6c:	70 28       	ld.w	r8,r8[0x8]
8001bb6e:	30 ab       	mov	r11,10
8001bb70:	10 9c       	mov	r12,r8
8001bb72:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" deltaNs :");
8001bb76:	fe cc 03 e2 	sub	r12,pc,994
8001bb7a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->deltaNs,10);
8001bb7e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001bb82:	70 18       	ld.w	r8,r8[0x4]
8001bb84:	30 ab       	mov	r11,10
8001bb86:	10 9c       	mov	r12,r8
8001bb88:	f0 16 00 04 	mcall	r6[16]
			}
			
		}
		return false;
8001bb8c:	30 08       	mov	r8,0
8001bb8e:	e0 8f 04 b2 	bral	8001c4f2 <ubx_process_data+0xae4>
	}
	 
	if (ubxclass == UBX_CLASS_CFG && msg_id == MSG_CFG_NAV_SETTINGS)
8001bb92:	ec f8 00 60 	ld.w	r8,r6[96]
8001bb96:	11 89       	ld.ub	r9,r8[0x0]
8001bb98:	30 68       	mov	r8,6
8001bb9a:	f0 09 18 00 	cp.b	r9,r8
8001bb9e:	c5 b1       	brne	8001bc54 <ubx_process_data+0x246>
8001bba0:	ec f8 00 5c 	ld.w	r8,r6[92]
8001bba4:	11 89       	ld.ub	r9,r8[0x0]
8001bba6:	32 48       	mov	r8,36
8001bba8:	f0 09 18 00 	cp.b	r9,r8
8001bbac:	c5 41       	brne	8001bc54 <ubx_process_data+0x246>
	{
		ubx_cfg_nav_settings *gpsNavSettings = ubx_GetNavSettings();
8001bbae:	f0 16 01 eb 	mcall	r6[1964]
8001bbb2:	18 98       	mov	r8,r12
8001bbb4:	ef 48 ff f8 	st.w	r7[-8],r8
		- 5 Sea
		- 6 Airborne with <1g Acceleration
		- 7 Airborne with <2g Acceleration
		- 8 Airborne with <4g Acceleration
		*/
		if(gpsNavSettings)
8001bbb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001bbbc:	58 08       	cp.w	r8,0
8001bbbe:	c1 20       	breq	8001bbe2 <ubx_process_data+0x1d4>
		{
			
			dbg_print("Got engine settings ");
8001bbc0:	fe cc 04 20 	sub	r12,pc,1056
8001bbc4:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(gpsNavSettings->dynModel,16);
8001bbc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001bbcc:	f1 38 00 21 	ld.ub	r8,r8[33]
8001bbd0:	31 0b       	mov	r11,16
8001bbd2:	10 9c       	mov	r12,r8
8001bbd4:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001bbd8:	fe cc 13 fc 	sub	r12,pc,5116
8001bbdc:	f0 16 00 01 	mcall	r6[4]
8001bbe0:	c3 78       	rjmp	8001bc4e <ubx_process_data+0x240>
		
		}else{
			if (engine_nav_setting != GPS_ENGINE_NONE && !gpsNavSettings)
8001bbe2:	ec f8 01 d8 	ld.w	r8,r6[472]
8001bbe6:	70 08       	ld.w	r8,r8[0x0]
8001bbe8:	5b f8       	cp.w	r8,-1
8001bbea:	c2 30       	breq	8001bc30 <ubx_process_data+0x222>
8001bbec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001bbf0:	58 08       	cp.w	r8,0
8001bbf2:	c1 f1       	brne	8001bc30 <ubx_process_data+0x222>
			{
				if(gpsNavSettings->dynModel != engine_nav_setting)
8001bbf4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001bbf8:	f1 38 00 21 	ld.ub	r8,r8[33]
8001bbfc:	10 99       	mov	r9,r8
8001bbfe:	ec f8 01 d8 	ld.w	r8,r6[472]
8001bc02:	70 08       	ld.w	r8,r8[0x0]
8001bc04:	10 39       	cp.w	r9,r8
8001bc06:	c1 50       	breq	8001bc30 <ubx_process_data+0x222>
				{
					nav_settings.dynModel = engine_nav_setting;
8001bc08:	ec f8 01 d8 	ld.w	r8,r6[472]
8001bc0c:	70 08       	ld.w	r8,r8[0x0]
8001bc0e:	5c 58       	castu.b	r8
8001bc10:	ec f9 03 98 	ld.w	r9,r6[920]
8001bc14:	f3 68 00 21 	st.b	r9[33],r8
					dbg_print("Send Nav settings");
8001bc18:	fe cc 04 60 	sub	r12,pc,1120
8001bc1c:	f0 16 00 01 	mcall	r6[4]
					ubx_send_message_nav_settings(UBX_CLASS_CFG,MSG_CFG_NAV_SETTINGS, &nav_settings,sizeof(nav_settings));
8001bc20:	ec f8 03 98 	ld.w	r8,r6[920]
8001bc24:	32 49       	mov	r9,36
8001bc26:	10 9a       	mov	r10,r8
8001bc28:	32 4b       	mov	r11,36
8001bc2a:	30 6c       	mov	r12,6
8001bc2c:	f0 16 00 fb 	mcall	r6[1004]
				}				
			}
			dbg_print("No engine settings received ");
8001bc30:	fe cc 04 64 	sub	r12,pc,1124
8001bc34:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(msg_id,16);
8001bc38:	ec f8 00 5c 	ld.w	r8,r6[92]
8001bc3c:	11 88       	ld.ub	r8,r8[0x0]
8001bc3e:	31 0b       	mov	r11,16
8001bc40:	10 9c       	mov	r12,r8
8001bc42:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001bc46:	fe cc 14 6a 	sub	r12,pc,5226
8001bc4a:	f0 16 00 01 	mcall	r6[4]
		}
		return false;
8001bc4e:	30 08       	mov	r8,0
8001bc50:	e0 8f 04 51 	bral	8001c4f2 <ubx_process_data+0xae4>
	}
	
	if (ubxclass == UBX_CLASS_CFG && msg_id == MSG_CFG_SET_RATE)
8001bc54:	ec f8 00 60 	ld.w	r8,r6[96]
8001bc58:	11 89       	ld.ub	r9,r8[0x0]
8001bc5a:	30 68       	mov	r8,6
8001bc5c:	f0 09 18 00 	cp.b	r9,r8
8001bc60:	c3 11       	brne	8001bcc2 <ubx_process_data+0x2b4>
8001bc62:	ec f8 00 5c 	ld.w	r8,r6[92]
8001bc66:	11 89       	ld.ub	r9,r8[0x0]
8001bc68:	30 18       	mov	r8,1
8001bc6a:	f0 09 18 00 	cp.b	r9,r8
8001bc6e:	c2 a1       	brne	8001bcc2 <ubx_process_data+0x2b4>
	{
		ubx_cfg_msg_rate *gpsMsgRate;
		gpsMsgRate = ubx_GetMsgRate();
8001bc70:	f0 16 01 91 	mcall	r6[1604]
8001bc74:	18 98       	mov	r8,r12
8001bc76:	ef 48 ff fc 	st.w	r7[-4],r8
		
		if (gpsMsgRate)
8001bc7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001bc7e:	58 08       	cp.w	r8,0
8001bc80:	c1 e0       	breq	8001bcbc <ubx_process_data+0x2ae>
		{
			dbg_print("Message CFG Rate 0x");
8001bc82:	fe cc 04 96 	sub	r12,pc,1174
8001bc86:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(gpsMsgRate->msg_class,16);
8001bc8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001bc8e:	11 a8       	ld.ub	r8,r8[0x2]
8001bc90:	31 0b       	mov	r11,16
8001bc92:	10 9c       	mov	r12,r8
8001bc94:	f0 16 00 04 	mcall	r6[16]
			dbg_print_num(gpsMsgRate->msg_id_rate,16);
8001bc98:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001bc9c:	11 98       	ld.ub	r8,r8[0x1]
8001bc9e:	31 0b       	mov	r11,16
8001bca0:	10 9c       	mov	r12,r8
8001bca2:	f0 16 00 04 	mcall	r6[16]
			dbg_print_num(gpsMsgRate->rate,10);
8001bca6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001bcaa:	11 88       	ld.ub	r8,r8[0x0]
8001bcac:	30 ab       	mov	r11,10
8001bcae:	10 9c       	mov	r12,r8
8001bcb0:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001bcb4:	fe cc 14 d8 	sub	r12,pc,5336
8001bcb8:	f0 16 00 01 	mcall	r6[4]
		}		
		return false;
8001bcbc:	30 08       	mov	r8,0
8001bcbe:	e0 8f 04 1a 	bral	8001c4f2 <ubx_process_data+0xae4>
	}
	
	if (ubxclass != UBX_CLASS_NAV)
8001bcc2:	ec f8 00 60 	ld.w	r8,r6[96]
8001bcc6:	11 89       	ld.ub	r9,r8[0x0]
8001bcc8:	30 18       	mov	r8,1
8001bcca:	f0 09 18 00 	cp.b	r9,r8
8001bcce:	c5 10       	breq	8001bd70 <ubx_process_data+0x362>
	{
		dbg_print("Unexpected message 0x");
8001bcd0:	fe cc 04 d0 	sub	r12,pc,1232
8001bcd4:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(ubxclass,16);
8001bcd8:	ec f8 00 60 	ld.w	r8,r6[96]
8001bcdc:	11 88       	ld.ub	r8,r8[0x0]
8001bcde:	31 0b       	mov	r11,16
8001bce0:	10 9c       	mov	r12,r8
8001bce2:	f0 16 00 04 	mcall	r6[16]
		dbg_print("02x 0x");
8001bce6:	fe cc 04 ce 	sub	r12,pc,1230
8001bcea:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(msg_id,10);
8001bcee:	ec f8 00 5c 	ld.w	r8,r6[92]
8001bcf2:	11 88       	ld.ub	r8,r8[0x0]
8001bcf4:	30 ab       	mov	r11,10
8001bcf6:	10 9c       	mov	r12,r8
8001bcf8:	f0 16 00 04 	mcall	r6[16]
		dbg_print("02x\n");
8001bcfc:	fe cc 04 dc 	sub	r12,pc,1244
8001bd00:	f0 16 00 01 	mcall	r6[4]
		if (++disable_counter == 0)
8001bd04:	ec f8 01 9c 	ld.w	r8,r6[412]
8001bd08:	11 88       	ld.ub	r8,r8[0x0]
8001bd0a:	2f f8       	sub	r8,-1
8001bd0c:	5c 58       	castu.b	r8
8001bd0e:	ec f9 01 9c 	ld.w	r9,r6[412]
8001bd12:	b2 88       	st.b	r9[0x0],r8
8001bd14:	ec f8 01 9c 	ld.w	r8,r6[412]
8001bd18:	11 88       	ld.ub	r8,r8[0x0]
8001bd1a:	58 08       	cp.w	r8,0
8001bd1c:	c2 71       	brne	8001bd6a <ubx_process_data+0x35c>
			// disable future sends of this message id, but
			// only do this every 256 messages, as some
			// message types can't be disabled and we don't
			// want to get into an ack war
			
			dbg_print("Disabling message 0x");
8001bd1e:	fe cc 04 f6 	sub	r12,pc,1270
8001bd22:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(ubxclass,16);
8001bd26:	ec f8 00 60 	ld.w	r8,r6[96]
8001bd2a:	11 88       	ld.ub	r8,r8[0x0]
8001bd2c:	31 0b       	mov	r11,16
8001bd2e:	10 9c       	mov	r12,r8
8001bd30:	f0 16 00 04 	mcall	r6[16]
			dbg_print("02x 0x");
8001bd34:	fe cc 05 1c 	sub	r12,pc,1308
8001bd38:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(msg_id,16);
8001bd3c:	ec f8 00 5c 	ld.w	r8,r6[92]
8001bd40:	11 88       	ld.ub	r8,r8[0x0]
8001bd42:	31 0b       	mov	r11,16
8001bd44:	10 9c       	mov	r12,r8
8001bd46:	f0 16 00 04 	mcall	r6[16]
			dbg_print("02x\n");
8001bd4a:	fe cc 05 2a 	sub	r12,pc,1322
8001bd4e:	f0 16 00 01 	mcall	r6[4]
			ubx_configure_message_rate(ubxclass, msg_id, 0);
8001bd52:	ec f8 00 5c 	ld.w	r8,r6[92]
8001bd56:	11 88       	ld.ub	r8,r8[0x0]
8001bd58:	10 99       	mov	r9,r8
8001bd5a:	ec f8 00 60 	ld.w	r8,r6[96]
8001bd5e:	11 88       	ld.ub	r8,r8[0x0]
8001bd60:	30 0a       	mov	r10,0
8001bd62:	12 9b       	mov	r11,r9
8001bd64:	10 9c       	mov	r12,r8
8001bd66:	f0 16 00 5c 	mcall	r6[368]
		}
		return false;
8001bd6a:	30 08       	mov	r8,0
8001bd6c:	e0 8f 03 c3 	bral	8001c4f2 <ubx_process_data+0xae4>
	}
	
	// Class NAV:
	switch (msg_id)
8001bd70:	ec f8 00 5c 	ld.w	r8,r6[92]
8001bd74:	11 88       	ld.ub	r8,r8[0x0]
8001bd76:	58 68       	cp.w	r8,6
8001bd78:	e0 80 01 6f 	breq	8001c056 <ubx_process_data+0x648>
8001bd7c:	e0 89 00 09 	brgt	8001bd8e <ubx_process_data+0x380>
8001bd80:	58 28       	cp.w	r8,2
8001bd82:	c0 f0       	breq	8001bda0 <ubx_process_data+0x392>
8001bd84:	58 38       	cp.w	r8,3
8001bd86:	e0 80 01 01 	breq	8001bf88 <ubx_process_data+0x57a>
8001bd8a:	e0 8f 03 63 	bral	8001c450 <ubx_process_data+0xa42>
8001bd8e:	59 28       	cp.w	r8,18
8001bd90:	e0 80 02 2c 	breq	8001c1e8 <ubx_process_data+0x7da>
8001bd94:	e0 48 00 30 	cp.w	r8,48
8001bd98:	e0 80 03 3e 	breq	8001c414 <ubx_process_data+0xa06>
8001bd9c:	e0 8f 03 5a 	bral	8001c450 <ubx_process_data+0xa42>
	{
	case MSG_NAV_POSLLH:
		gpsPosllh = ubx_GetPosllh();
8001bda0:	f0 16 01 72 	mcall	r6[1480]
8001bda4:	18 98       	mov	r8,r12
8001bda6:	ef 48 ff d8 	st.w	r7[-40],r8
		if (gpsPosllh)
8001bdaa:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001bdae:	58 08       	cp.w	r8,0
8001bdb0:	e0 80 03 85 	breq	8001c4ba <ubx_process_data+0xaac>
		{
			loopPosllh = ++loopPosllh % numSkippedMsg;
8001bdb4:	ec f8 01 f0 	ld.w	r8,r6[496]
8001bdb8:	11 88       	ld.ub	r8,r8[0x0]
8001bdba:	2f f8       	sub	r8,-1
8001bdbc:	5c 58       	castu.b	r8
8001bdbe:	ec f9 01 f0 	ld.w	r9,r6[496]
8001bdc2:	b2 88       	st.b	r9[0x0],r8
8001bdc4:	ec f8 01 f0 	ld.w	r8,r6[496]
8001bdc8:	11 88       	ld.ub	r8,r8[0x0]
8001bdca:	ec f9 01 98 	ld.w	r9,r6[408]
8001bdce:	13 89       	ld.ub	r9,r9[0x0]
8001bdd0:	f0 09 0d 08 	divu	r8,r8,r9
8001bdd4:	12 98       	mov	r8,r9
8001bdd6:	5c 58       	castu.b	r8
8001bdd8:	ec f9 01 f0 	ld.w	r9,r6[496]
8001bddc:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopPosllh == 0))
8001bdde:	ec f8 01 88 	ld.w	r8,r6[392]
8001bde2:	11 88       	ld.ub	r8,r8[0x0]
8001bde4:	58 08       	cp.w	r8,0
8001bde6:	c5 b0       	breq	8001be9c <ubx_process_data+0x48e>
8001bde8:	ec f8 01 f0 	ld.w	r8,r6[496]
8001bdec:	11 88       	ld.ub	r8,r8[0x0]
8001bdee:	58 08       	cp.w	r8,0
8001bdf0:	c5 61       	brne	8001be9c <ubx_process_data+0x48e>
			{
				dbg_print("MSG_NAV_POSLLH");
8001bdf2:	fe cc 05 b2 	sub	r12,pc,1458
8001bdf6:	f0 16 00 01 	mcall	r6[4]
				dbg_print(" itow :");
8001bdfa:	fe cc 06 82 	sub	r12,pc,1666
8001bdfe:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->itow,10);
8001be02:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001be06:	70 68       	ld.w	r8,r8[0x18]
8001be08:	30 ab       	mov	r11,10
8001be0a:	10 9c       	mov	r12,r8
8001be0c:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" longitude :");
8001be10:	fe cc 05 c0 	sub	r12,pc,1472
8001be14:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->longitude,10);
8001be18:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001be1c:	70 58       	ld.w	r8,r8[0x14]
8001be1e:	30 ab       	mov	r11,10
8001be20:	10 9c       	mov	r12,r8
8001be22:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" latitude :");
8001be26:	fe cc 05 c6 	sub	r12,pc,1478
8001be2a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->latitude,10);
8001be2e:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001be32:	70 48       	ld.w	r8,r8[0x10]
8001be34:	30 ab       	mov	r11,10
8001be36:	10 9c       	mov	r12,r8
8001be38:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" alt_ellips :");
8001be3c:	fe cc 05 d0 	sub	r12,pc,1488
8001be40:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->altitude_ellipsoid,10);
8001be44:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001be48:	70 38       	ld.w	r8,r8[0xc]
8001be4a:	30 ab       	mov	r11,10
8001be4c:	10 9c       	mov	r12,r8
8001be4e:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" alt_msl :");
8001be52:	fe cc 05 d6 	sub	r12,pc,1494
8001be56:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->altitude_msl,10);
8001be5a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001be5e:	70 28       	ld.w	r8,r8[0x8]
8001be60:	30 ab       	mov	r11,10
8001be62:	10 9c       	mov	r12,r8
8001be64:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" horz_acc :");
8001be68:	fe cc 05 e0 	sub	r12,pc,1504
8001be6c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->horizontal_accuracy,10);
8001be70:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001be74:	70 18       	ld.w	r8,r8[0x4]
8001be76:	30 ab       	mov	r11,10
8001be78:	10 9c       	mov	r12,r8
8001be7a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" vert_acc :");
8001be7e:	fe cc 05 ea 	sub	r12,pc,1514
8001be82:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->vertical_accuracy,10);
8001be86:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001be8a:	70 08       	ld.w	r8,r8[0x0]
8001be8c:	30 ab       	mov	r11,10
8001be8e:	10 9c       	mov	r12,r8
8001be90:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001be94:	fe cc 16 b8 	sub	r12,pc,5816
8001be98:	f0 16 00 01 	mcall	r6[4]
			}
			
			centralData->GPS_data.timegps = gpsPosllh->itow;
8001be9c:	ec f8 00 00 	ld.w	r8,r6[0]
8001bea0:	70 08       	ld.w	r8,r8[0x0]
8001bea2:	ee f9 ff d8 	ld.w	r9,r7[-40]
8001bea6:	72 69       	ld.w	r9,r9[0x18]
8001bea8:	f1 49 0b 50 	st.w	r8[2896],r9
			centralData->GPS_data.longitude = gpsPosllh->longitude / 10000000.0;
8001beac:	ec f8 00 00 	ld.w	r8,r6[0]
8001beb0:	70 05       	ld.w	r5,r8[0x0]
8001beb2:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001beb6:	70 58       	ld.w	r8,r8[0x14]
8001beb8:	10 9c       	mov	r12,r8
8001beba:	f0 16 00 1a 	mcall	r6[104]
8001bebe:	30 08       	mov	r8,0
8001bec0:	e0 69 12 d0 	mov	r9,4816
8001bec4:	ea 19 41 63 	orh	r9,0x4163
8001bec8:	f0 16 00 0c 	mcall	r6[48]
8001becc:	14 98       	mov	r8,r10
8001bece:	16 99       	mov	r9,r11
8001bed0:	ea e9 0b 10 	st.d	r5[2832],r8
			centralData->GPS_data.latitude = gpsPosllh->latitude / 10000000.0;
8001bed4:	ec f8 00 00 	ld.w	r8,r6[0]
8001bed8:	70 05       	ld.w	r5,r8[0x0]
8001beda:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001bede:	70 48       	ld.w	r8,r8[0x10]
8001bee0:	10 9c       	mov	r12,r8
8001bee2:	f0 16 00 1a 	mcall	r6[104]
8001bee6:	30 08       	mov	r8,0
8001bee8:	e0 69 12 d0 	mov	r9,4816
8001beec:	ea 19 41 63 	orh	r9,0x4163
8001bef0:	f0 16 00 0c 	mcall	r6[48]
8001bef4:	14 98       	mov	r8,r10
8001bef6:	16 99       	mov	r9,r11
8001bef8:	ea e9 0b 08 	st.d	r5[2824],r8
			centralData->GPS_data.alt_elips = ((float)gpsPosllh->altitude_ellipsoid) / 1000.0;
8001befc:	ec f8 00 00 	ld.w	r8,r6[0]
8001bf00:	70 05       	ld.w	r5,r8[0x0]
8001bf02:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001bf06:	70 38       	ld.w	r8,r8[0xc]
8001bf08:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001bf0c:	fc 1b 44 7a 	movh	r11,0x447a
8001bf10:	10 9c       	mov	r12,r8
8001bf12:	f0 16 00 08 	mcall	r6[32]
8001bf16:	18 98       	mov	r8,r12
8001bf18:	eb 48 0b 1c 	st.w	r5[2844],r8
			centralData->GPS_data.altitude = ((float)gpsPosllh->altitude_msl) / 1000.0;
8001bf1c:	ec f8 00 00 	ld.w	r8,r6[0]
8001bf20:	70 05       	ld.w	r5,r8[0x0]
8001bf22:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001bf26:	70 28       	ld.w	r8,r8[0x8]
8001bf28:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001bf2c:	fc 1b 44 7a 	movh	r11,0x447a
8001bf30:	10 9c       	mov	r12,r8
8001bf32:	f0 16 00 08 	mcall	r6[32]
8001bf36:	18 98       	mov	r8,r12
8001bf38:	eb 48 0b 18 	st.w	r5[2840],r8
			centralData->GPS_data.horizontalAccuracy = ((float)gpsPosllh->horizontal_accuracy) / 1000.0;
8001bf3c:	ec f8 00 00 	ld.w	r8,r6[0]
8001bf40:	70 05       	ld.w	r5,r8[0x0]
8001bf42:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001bf46:	70 18       	ld.w	r8,r8[0x4]
8001bf48:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001bf4c:	fc 1b 44 7a 	movh	r11,0x447a
8001bf50:	10 9c       	mov	r12,r8
8001bf52:	f0 16 00 08 	mcall	r6[32]
8001bf56:	18 98       	mov	r8,r12
8001bf58:	eb 48 0b 38 	st.w	r5[2872],r8
			centralData->GPS_data.verticalAccuracy = ((float)gpsPosllh->vertical_accuracy) / 1000.0;
8001bf5c:	ec f8 00 00 	ld.w	r8,r6[0]
8001bf60:	70 05       	ld.w	r5,r8[0x0]
8001bf62:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001bf66:	70 08       	ld.w	r8,r8[0x0]
8001bf68:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001bf6c:	fc 1b 44 7a 	movh	r11,0x447a
8001bf70:	10 9c       	mov	r12,r8
8001bf72:	f0 16 00 08 	mcall	r6[32]
8001bf76:	18 98       	mov	r8,r12
8001bf78:	eb 48 0b 3c 	st.w	r5[2876],r8
			//centralData->GPS_data.status = next_fix;
			
			new_position = true;
8001bf7c:	ec f9 02 4c 	ld.w	r9,r6[588]
8001bf80:	30 18       	mov	r8,1
8001bf82:	b2 88       	st.b	r9[0x0],r8
		}
		break;
8001bf84:	e0 8f 02 a2 	bral	8001c4c8 <ubx_process_data+0xaba>
	case MSG_NAV_STATUS:
		gpsStatus = ubx_GetStatus();
8001bf88:	f0 16 01 4e 	mcall	r6[1336]
8001bf8c:	18 98       	mov	r8,r12
8001bf8e:	ef 48 ff dc 	st.w	r7[-36],r8
		
		if (gpsStatus)
8001bf92:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001bf96:	58 08       	cp.w	r8,0
8001bf98:	e0 80 02 93 	breq	8001c4be <ubx_process_data+0xab0>
		{
			loopStatus = ++loopStatus % numSkippedMsg;
8001bf9c:	ec f8 01 cc 	ld.w	r8,r6[460]
8001bfa0:	11 88       	ld.ub	r8,r8[0x0]
8001bfa2:	2f f8       	sub	r8,-1
8001bfa4:	5c 58       	castu.b	r8
8001bfa6:	ec f9 01 cc 	ld.w	r9,r6[460]
8001bfaa:	b2 88       	st.b	r9[0x0],r8
8001bfac:	ec f8 01 cc 	ld.w	r8,r6[460]
8001bfb0:	11 88       	ld.ub	r8,r8[0x0]
8001bfb2:	ec f9 01 98 	ld.w	r9,r6[408]
8001bfb6:	13 89       	ld.ub	r9,r9[0x0]
8001bfb8:	f0 09 0d 08 	divu	r8,r8,r9
8001bfbc:	12 98       	mov	r8,r9
8001bfbe:	5c 58       	castu.b	r8
8001bfc0:	ec f9 01 cc 	ld.w	r9,r6[460]
8001bfc4:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopStatus == 0))
8001bfc6:	ec f8 01 88 	ld.w	r8,r6[392]
8001bfca:	11 88       	ld.ub	r8,r8[0x0]
8001bfcc:	58 08       	cp.w	r8,0
8001bfce:	c2 10       	breq	8001c010 <ubx_process_data+0x602>
8001bfd0:	ec f8 01 cc 	ld.w	r8,r6[460]
8001bfd4:	11 88       	ld.ub	r8,r8[0x0]
8001bfd6:	58 08       	cp.w	r8,0
8001bfd8:	c1 c1       	brne	8001c010 <ubx_process_data+0x602>
			{
				dbg_print("MSG_STATUS fix_type = 0x");
8001bfda:	fe cc 07 3a 	sub	r12,pc,1850
8001bfde:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsStatus->fix_type,16);
8001bfe2:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001bfe6:	f1 38 00 0b 	ld.ub	r8,r8[11]
8001bfea:	31 0b       	mov	r11,16
8001bfec:	10 9c       	mov	r12,r8
8001bfee:	f0 16 00 04 	mcall	r6[16]
//	 			dbg_print(" fix_status = 0x");
//	 			dbg_print_num(gpsStatus->fix_status,16);
				dbg_print(", uptime =");
8001bff2:	fe cc 07 36 	sub	r12,pc,1846
8001bff6:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsStatus->uptime,10);
8001bffa:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001bffe:	70 08       	ld.w	r8,r8[0x0]
8001c000:	30 ab       	mov	r11,10
8001c002:	10 9c       	mov	r12,r8
8001c004:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001c008:	fe cc 18 2c 	sub	r12,pc,6188
8001c00c:	f0 16 00 01 	mcall	r6[4]
			}		
		
			//next_fix = (gpsStatus->fix_status & NAV_STATUS_FIX_VALID) && (gpsStatus->fix_type == GPS_FIX_TYPE_3DFIX);
			next_fix = (gpsStatus->fix_type == GPS_FIX_TYPE_3DFIX);
8001c010:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001c014:	f1 39 00 0b 	ld.ub	r9,r8[11]
8001c018:	30 38       	mov	r8,3
8001c01a:	f0 09 18 00 	cp.b	r9,r8
8001c01e:	5f 08       	sreq	r8
8001c020:	5c 58       	castu.b	r8
8001c022:	ec f9 01 e4 	ld.w	r9,r6[484]
8001c026:	b2 88       	st.b	r9[0x0],r8
			if (!next_fix)
8001c028:	ec f8 01 e4 	ld.w	r8,r6[484]
8001c02c:	11 88       	ld.ub	r8,r8[0x0]
8001c02e:	ec 18 00 01 	eorl	r8,0x1
8001c032:	5c 58       	castu.b	r8
8001c034:	c0 90       	breq	8001c046 <ubx_process_data+0x638>
			{
				centralData->GPS_data.status = NO_FIX;
8001c036:	ec f8 00 00 	ld.w	r8,r6[0]
8001c03a:	70 09       	ld.w	r9,r8[0x0]
8001c03c:	30 18       	mov	r8,1
8001c03e:	f3 68 0b 54 	st.b	r9[2900],r8
			}else{
				centralData->GPS_data.status = GPS_OK;
			}
		}
		break;
8001c042:	e0 8f 02 43 	bral	8001c4c8 <ubx_process_data+0xaba>
			next_fix = (gpsStatus->fix_type == GPS_FIX_TYPE_3DFIX);
			if (!next_fix)
			{
				centralData->GPS_data.status = NO_FIX;
			}else{
				centralData->GPS_data.status = GPS_OK;
8001c046:	ec f8 00 00 	ld.w	r8,r6[0]
8001c04a:	70 09       	ld.w	r9,r8[0x0]
8001c04c:	30 28       	mov	r8,2
8001c04e:	f3 68 0b 54 	st.b	r9[2900],r8
			}
		}
		break;
8001c052:	e0 8f 02 3b 	bral	8001c4c8 <ubx_process_data+0xaba>
	case MSG_NAV_SOL:
		gpsSolution = ubx_GetSolution();
8001c056:	f0 16 01 7d 	mcall	r6[1524]
8001c05a:	18 98       	mov	r8,r12
8001c05c:	ef 48 ff e0 	st.w	r7[-32],r8
		
		if (gpsSolution)
8001c060:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001c064:	58 08       	cp.w	r8,0
8001c066:	e0 80 02 2e 	breq	8001c4c2 <ubx_process_data+0xab4>
		{
			loopSolution = ++loopSolution % numSkippedMsg;
8001c06a:	ec f8 01 c4 	ld.w	r8,r6[452]
8001c06e:	11 88       	ld.ub	r8,r8[0x0]
8001c070:	2f f8       	sub	r8,-1
8001c072:	5c 58       	castu.b	r8
8001c074:	ec f9 01 c4 	ld.w	r9,r6[452]
8001c078:	b2 88       	st.b	r9[0x0],r8
8001c07a:	ec f8 01 c4 	ld.w	r8,r6[452]
8001c07e:	11 88       	ld.ub	r8,r8[0x0]
8001c080:	ec f9 01 98 	ld.w	r9,r6[408]
8001c084:	13 89       	ld.ub	r9,r9[0x0]
8001c086:	f0 09 0d 08 	divu	r8,r8,r9
8001c08a:	12 98       	mov	r8,r9
8001c08c:	5c 58       	castu.b	r8
8001c08e:	ec f9 01 c4 	ld.w	r9,r6[452]
8001c092:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopSolution == 0))
8001c094:	ec f8 01 88 	ld.w	r8,r6[392]
8001c098:	11 88       	ld.ub	r8,r8[0x0]
8001c09a:	58 08       	cp.w	r8,0
8001c09c:	c7 40       	breq	8001c184 <ubx_process_data+0x776>
8001c09e:	ec f8 01 c4 	ld.w	r8,r6[452]
8001c0a2:	11 88       	ld.ub	r8,r8[0x0]
8001c0a4:	58 08       	cp.w	r8,0
8001c0a6:	c6 f1       	brne	8001c184 <ubx_process_data+0x776>
			{
				dbg_print("MSG_SOL ");
8001c0a8:	fe cc 07 e0 	sub	r12,pc,2016
8001c0ac:	f0 16 00 01 	mcall	r6[4]
				dbg_print("itow :");
8001c0b0:	fe cc 07 dc 	sub	r12,pc,2012
8001c0b4:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->itow,10);
8001c0b8:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001c0bc:	70 c8       	ld.w	r8,r8[0x30]
8001c0be:	30 ab       	mov	r11,10
8001c0c0:	10 9c       	mov	r12,r8
8001c0c2:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" week :");
8001c0c6:	fe cc 07 ea 	sub	r12,pc,2026
8001c0ca:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->week,10);
8001c0ce:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001c0d2:	f1 08 00 2a 	ld.sh	r8,r8[42]
8001c0d6:	30 ab       	mov	r11,10
8001c0d8:	10 9c       	mov	r12,r8
8001c0da:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" fix_type = 0x0");
8001c0de:	fe cc 07 fa 	sub	r12,pc,2042
8001c0e2:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->fix_type,16);
8001c0e6:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001c0ea:	f1 38 00 29 	ld.ub	r8,r8[41]
8001c0ee:	31 0b       	mov	r11,16
8001c0f0:	10 9c       	mov	r12,r8
8001c0f2:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" pos_acc_3d :");
8001c0f6:	fe cc 08 02 	sub	r12,pc,2050
8001c0fa:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->position_accuracy_3d,10);
8001c0fe:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001c102:	70 68       	ld.w	r8,r8[0x18]
8001c104:	30 ab       	mov	r11,10
8001c106:	10 9c       	mov	r12,r8
8001c108:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ecefx :");
8001c10c:	fe cc 08 08 	sub	r12,pc,2056
8001c110:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->ecef_x,10);
8001c114:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001c118:	70 98       	ld.w	r8,r8[0x24]
8001c11a:	30 ab       	mov	r11,10
8001c11c:	10 9c       	mov	r12,r8
8001c11e:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ecefy :");
8001c122:	fe cc 08 12 	sub	r12,pc,2066
8001c126:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->ecef_y,10);
8001c12a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001c12e:	70 88       	ld.w	r8,r8[0x20]
8001c130:	30 ab       	mov	r11,10
8001c132:	10 9c       	mov	r12,r8
8001c134:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ecefz :");
8001c138:	fe cc 08 1c 	sub	r12,pc,2076
8001c13c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->ecef_z,10);
8001c140:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001c144:	70 78       	ld.w	r8,r8[0x1c]
8001c146:	30 ab       	mov	r11,10
8001c148:	10 9c       	mov	r12,r8
8001c14a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" pos_DOP :");
8001c14e:	fe cc 08 26 	sub	r12,pc,2086
8001c152:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->position_DOP,10);
8001c156:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001c15a:	90 38       	ld.sh	r8,r8[0x6]
8001c15c:	5c 78       	castu.h	r8
8001c15e:	30 ab       	mov	r11,10
8001c160:	10 9c       	mov	r12,r8
8001c162:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" num sat :");
8001c166:	fe cc 08 32 	sub	r12,pc,2098
8001c16a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->satellites,10);
8001c16e:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001c172:	11 c8       	ld.ub	r8,r8[0x4]
8001c174:	30 ab       	mov	r11,10
8001c176:	10 9c       	mov	r12,r8
8001c178:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001c17c:	fe cc 19 a0 	sub	r12,pc,6560
8001c180:	f0 16 00 01 	mcall	r6[4]
			}
			//next_fix = (gpsSolution->fix_status & NAV_STATUS_FIX_VALID) && (gpsSolution->fix_type == GPS_FIX_TYPE_3DFIX);
			next_fix = (gpsSolution->fix_type == GPS_FIX_TYPE_3DFIX);
8001c184:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001c188:	f1 39 00 29 	ld.ub	r9,r8[41]
8001c18c:	30 38       	mov	r8,3
8001c18e:	f0 09 18 00 	cp.b	r9,r8
8001c192:	5f 08       	sreq	r8
8001c194:	5c 58       	castu.b	r8
8001c196:	ec f9 01 e4 	ld.w	r9,r6[484]
8001c19a:	b2 88       	st.b	r9[0x0],r8
			if (!next_fix)
8001c19c:	ec f8 01 e4 	ld.w	r8,r6[484]
8001c1a0:	11 88       	ld.ub	r8,r8[0x0]
8001c1a2:	ec 18 00 01 	eorl	r8,0x1
8001c1a6:	5c 58       	castu.b	r8
8001c1a8:	c0 80       	breq	8001c1b8 <ubx_process_data+0x7aa>
			{
				centralData->GPS_data.status = NO_FIX;
8001c1aa:	ec f8 00 00 	ld.w	r8,r6[0]
8001c1ae:	70 09       	ld.w	r9,r8[0x0]
8001c1b0:	30 18       	mov	r8,1
8001c1b2:	f3 68 0b 54 	st.b	r9[2900],r8
8001c1b6:	c0 78       	rjmp	8001c1c4 <ubx_process_data+0x7b6>
			}else{
				centralData->GPS_data.status = GPS_OK;
8001c1b8:	ec f8 00 00 	ld.w	r8,r6[0]
8001c1bc:	70 09       	ld.w	r9,r8[0x0]
8001c1be:	30 28       	mov	r8,2
8001c1c0:	f3 68 0b 54 	st.b	r9[2900],r8
			}
		
			centralData->GPS_data.num_sats = gpsSolution->satellites;
8001c1c4:	ec f8 00 00 	ld.w	r8,r6[0]
8001c1c8:	70 09       	ld.w	r9,r8[0x0]
8001c1ca:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001c1ce:	11 c8       	ld.ub	r8,r8[0x4]
8001c1d0:	f3 68 0b 48 	st.b	r9[2888],r8
			centralData->GPS_data.hdop = gpsSolution->position_DOP;
8001c1d4:	ec f8 00 00 	ld.w	r8,r6[0]
8001c1d8:	70 09       	ld.w	r9,r8[0x0]
8001c1da:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001c1de:	90 38       	ld.sh	r8,r8[0x6]
8001c1e0:	f3 58 0b 4a 	st.h	r9[2890],r8
		}
		break;
8001c1e4:	e0 8f 01 72 	bral	8001c4c8 <ubx_process_data+0xaba>
	case MSG_NAV_VELNED:
		gpsVelned = ubx_GetVelned();
8001c1e8:	f0 16 01 5e 	mcall	r6[1400]
8001c1ec:	18 98       	mov	r8,r12
8001c1ee:	ef 48 ff e4 	st.w	r7[-28],r8
		
		if (gpsVelned)
8001c1f2:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001c1f6:	58 08       	cp.w	r8,0
8001c1f8:	e0 80 01 67 	breq	8001c4c6 <ubx_process_data+0xab8>
		{
			loopVelned = ++loopVelned % numSkippedMsg;
8001c1fc:	ec f8 01 d0 	ld.w	r8,r6[464]
8001c200:	11 88       	ld.ub	r8,r8[0x0]
8001c202:	2f f8       	sub	r8,-1
8001c204:	5c 58       	castu.b	r8
8001c206:	ec f9 01 d0 	ld.w	r9,r6[464]
8001c20a:	b2 88       	st.b	r9[0x0],r8
8001c20c:	ec f8 01 d0 	ld.w	r8,r6[464]
8001c210:	11 88       	ld.ub	r8,r8[0x0]
8001c212:	ec f9 01 98 	ld.w	r9,r6[408]
8001c216:	13 89       	ld.ub	r9,r9[0x0]
8001c218:	f0 09 0d 08 	divu	r8,r8,r9
8001c21c:	12 98       	mov	r8,r9
8001c21e:	5c 58       	castu.b	r8
8001c220:	ec f9 01 d0 	ld.w	r9,r6[464]
8001c224:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopVelned == 0))
8001c226:	ec f8 01 88 	ld.w	r8,r6[392]
8001c22a:	11 88       	ld.ub	r8,r8[0x0]
8001c22c:	58 08       	cp.w	r8,0
8001c22e:	c6 60       	breq	8001c2fa <ubx_process_data+0x8ec>
8001c230:	ec f8 01 d0 	ld.w	r8,r6[464]
8001c234:	11 88       	ld.ub	r8,r8[0x0]
8001c236:	58 08       	cp.w	r8,0
8001c238:	c6 11       	brne	8001c2fa <ubx_process_data+0x8ec>
			{
			
				dbg_print("MSG_NAV_VELNED ");
8001c23a:	fe cc 08 fa 	sub	r12,pc,2298
8001c23e:	f0 16 00 01 	mcall	r6[4]
		
				dbg_print("itow :");
8001c242:	fe cc 09 6e 	sub	r12,pc,2414
8001c246:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->itow,10);
8001c24a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001c24e:	70 88       	ld.w	r8,r8[0x20]
8001c250:	30 ab       	mov	r11,10
8001c252:	10 9c       	mov	r12,r8
8001c254:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ned_north :");
8001c258:	fe cc 09 08 	sub	r12,pc,2312
8001c25c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->ned_north,10);
8001c260:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001c264:	70 78       	ld.w	r8,r8[0x1c]
8001c266:	30 ab       	mov	r11,10
8001c268:	10 9c       	mov	r12,r8
8001c26a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ned_east :");
8001c26e:	fe cc 09 0e 	sub	r12,pc,2318
8001c272:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->ned_east,10);
8001c276:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001c27a:	70 68       	ld.w	r8,r8[0x18]
8001c27c:	30 ab       	mov	r11,10
8001c27e:	10 9c       	mov	r12,r8
8001c280:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ned_down :");
8001c284:	fe cc 09 18 	sub	r12,pc,2328
8001c288:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->ned_down,10);
8001c28c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001c290:	70 58       	ld.w	r8,r8[0x14]
8001c292:	30 ab       	mov	r11,10
8001c294:	10 9c       	mov	r12,r8
8001c296:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" speed_3d :");
8001c29a:	fe cc 09 22 	sub	r12,pc,2338
8001c29e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->speed_3d,10);
8001c2a2:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001c2a6:	70 48       	ld.w	r8,r8[0x10]
8001c2a8:	30 ab       	mov	r11,10
8001c2aa:	10 9c       	mov	r12,r8
8001c2ac:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" heading_2d :");
8001c2b0:	fe cc 09 2c 	sub	r12,pc,2348
8001c2b4:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->heading_2d,10);
8001c2b8:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001c2bc:	70 28       	ld.w	r8,r8[0x8]
8001c2be:	30 ab       	mov	r11,10
8001c2c0:	10 9c       	mov	r12,r8
8001c2c2:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" speed_accuracy :");
8001c2c6:	fe cc 09 32 	sub	r12,pc,2354
8001c2ca:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->speed_accuracy,10);
8001c2ce:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001c2d2:	70 18       	ld.w	r8,r8[0x4]
8001c2d4:	30 ab       	mov	r11,10
8001c2d6:	10 9c       	mov	r12,r8
8001c2d8:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" heading_accuracy :");
8001c2dc:	fe cc 09 34 	sub	r12,pc,2356
8001c2e0:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->heading_accuracy,10);
8001c2e4:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001c2e8:	70 08       	ld.w	r8,r8[0x0]
8001c2ea:	30 ab       	mov	r11,10
8001c2ec:	10 9c       	mov	r12,r8
8001c2ee:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001c2f2:	fe cc 1b 16 	sub	r12,pc,6934
8001c2f6:	f0 16 00 01 	mcall	r6[4]
			}
			centralData->GPS_data.timegps = gpsVelned->itow;
8001c2fa:	ec f8 00 00 	ld.w	r8,r6[0]
8001c2fe:	70 08       	ld.w	r8,r8[0x0]
8001c300:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001c304:	72 89       	ld.w	r9,r9[0x20]
8001c306:	f1 49 0b 50 	st.w	r8[2896],r9
			centralData->GPS_data.speed        = ((float)gpsVelned->speed_3d)/100.; // m/s
8001c30a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c30e:	70 05       	ld.w	r5,r8[0x0]
8001c310:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001c314:	70 48       	ld.w	r8,r8[0x10]
8001c316:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001c31a:	fc 1b 42 c8 	movh	r11,0x42c8
8001c31e:	10 9c       	mov	r12,r8
8001c320:	f0 16 00 08 	mcall	r6[32]
8001c324:	18 98       	mov	r8,r12
8001c326:	eb 48 0b 20 	st.w	r5[2848],r8
			centralData->GPS_data.groundSpeed = ((float)gpsVelned->groundSpeed_2d) / 100.; // m/s
8001c32a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c32e:	70 05       	ld.w	r5,r8[0x0]
8001c330:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001c334:	70 38       	ld.w	r8,r8[0xc]
8001c336:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001c33a:	fc 1b 42 c8 	movh	r11,0x42c8
8001c33e:	10 9c       	mov	r12,r8
8001c340:	f0 16 00 08 	mcall	r6[32]
8001c344:	18 98       	mov	r8,r12
8001c346:	eb 48 0b 24 	st.w	r5[2852],r8
			centralData->GPS_data.course = ((float)gpsVelned->heading_2d) / 100000.; // Heading 2D deg * 100000 rescaled to deg * 100
8001c34a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c34e:	70 05       	ld.w	r5,r8[0x0]
8001c350:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001c354:	70 28       	ld.w	r8,r8[0x8]
8001c356:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001c35a:	e0 6b 50 00 	mov	r11,20480
8001c35e:	ea 1b 47 c3 	orh	r11,0x47c3
8001c362:	10 9c       	mov	r12,r8
8001c364:	f0 16 00 08 	mcall	r6[32]
8001c368:	18 98       	mov	r8,r12
8001c36a:	eb 48 0b 34 	st.w	r5[2868],r8
			have_raw_velocity = true;
8001c36e:	ec f9 03 b4 	ld.w	r9,r6[948]
8001c372:	30 18       	mov	r8,1
8001c374:	b2 88       	st.b	r9[0x0],r8
			centralData->GPS_data.northSpeed  = ((float)gpsVelned->ned_north) / 100.0;
8001c376:	ec f8 00 00 	ld.w	r8,r6[0]
8001c37a:	70 05       	ld.w	r5,r8[0x0]
8001c37c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001c380:	70 78       	ld.w	r8,r8[0x1c]
8001c382:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001c386:	fc 1b 42 c8 	movh	r11,0x42c8
8001c38a:	10 9c       	mov	r12,r8
8001c38c:	f0 16 00 08 	mcall	r6[32]
8001c390:	18 98       	mov	r8,r12
8001c392:	eb 48 0b 28 	st.w	r5[2856],r8
			centralData->GPS_data.eastSpeed   = ((float)gpsVelned->ned_east) / 100.;
8001c396:	ec f8 00 00 	ld.w	r8,r6[0]
8001c39a:	70 05       	ld.w	r5,r8[0x0]
8001c39c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001c3a0:	70 68       	ld.w	r8,r8[0x18]
8001c3a2:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001c3a6:	fc 1b 42 c8 	movh	r11,0x42c8
8001c3aa:	10 9c       	mov	r12,r8
8001c3ac:	f0 16 00 08 	mcall	r6[32]
8001c3b0:	18 98       	mov	r8,r12
8001c3b2:	eb 48 0b 2c 	st.w	r5[2860],r8
			centralData->GPS_data.verticalSpeed   = ((float)gpsVelned->ned_down) / 100.;
8001c3b6:	ec f8 00 00 	ld.w	r8,r6[0]
8001c3ba:	70 05       	ld.w	r5,r8[0x0]
8001c3bc:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001c3c0:	70 58       	ld.w	r8,r8[0x14]
8001c3c2:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001c3c6:	fc 1b 42 c8 	movh	r11,0x42c8
8001c3ca:	10 9c       	mov	r12,r8
8001c3cc:	f0 16 00 08 	mcall	r6[32]
8001c3d0:	18 98       	mov	r8,r12
8001c3d2:	eb 48 0b 30 	st.w	r5[2864],r8
			centralData->GPS_data.speedAccuracy = ((float)gpsVelned->speed_accuracy)/100.;
8001c3d6:	ec f8 00 00 	ld.w	r8,r6[0]
8001c3da:	70 05       	ld.w	r5,r8[0x0]
8001c3dc:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001c3e0:	70 18       	ld.w	r8,r8[0x4]
8001c3e2:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001c3e6:	fc 1b 42 c8 	movh	r11,0x42c8
8001c3ea:	10 9c       	mov	r12,r8
8001c3ec:	f0 16 00 08 	mcall	r6[32]
8001c3f0:	18 98       	mov	r8,r12
8001c3f2:	eb 48 0b 40 	st.w	r5[2880],r8
			centralData->GPS_data.headingAccuracy = gpsVelned->heading_accuracy;
8001c3f6:	ec f8 00 00 	ld.w	r8,r6[0]
8001c3fa:	70 08       	ld.w	r8,r8[0x0]
8001c3fc:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001c400:	72 09       	ld.w	r9,r9[0x0]
8001c402:	e5 a4 09 09 	cop	cp0,cr9,cr0,cr9,0x48
8001c406:	f1 49 0b 44 	st.w	r8[2884],r9
			new_speed = true;
8001c40a:	ec f9 02 18 	ld.w	r9,r6[536]
8001c40e:	30 18       	mov	r8,1
8001c410:	b2 88       	st.b	r9[0x0],r8
		}
		break;
8001c412:	c5 b8       	rjmp	8001c4c8 <ubx_process_data+0xaba>
	case MSG_NAV_SVINFO:
		gpsSVInfo = ubx_GetSVInfo();
8001c414:	f0 16 01 c9 	mcall	r6[1828]
8001c418:	18 98       	mov	r8,r12
8001c41a:	ef 48 ff e8 	st.w	r7[-24],r8
		
		if (gpsSVInfo)
8001c41e:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001c422:	58 08       	cp.w	r8,0
8001c424:	c1 60       	breq	8001c450 <ubx_process_data+0xa42>
		{
			if (printNavOnDebug)
8001c426:	ec f8 01 88 	ld.w	r8,r6[392]
8001c42a:	11 88       	ld.ub	r8,r8[0x0]
8001c42c:	58 08       	cp.w	r8,0
8001c42e:	c1 10       	breq	8001c450 <ubx_process_data+0xa42>
			{
				dbg_print("MSG_NAV_SVINFO, numChannel:");
8001c430:	fe cc 0a 74 	sub	r12,pc,2676
8001c434:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSVInfo->numCh,10);
8001c438:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001c43c:	f1 38 00 c3 	ld.ub	r8,r8[195]
8001c440:	30 ab       	mov	r11,10
8001c442:	10 9c       	mov	r12,r8
8001c444:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001c448:	fe cc 1c 6c 	sub	r12,pc,7276
8001c44c:	f0 16 00 01 	mcall	r6[4]
			}
		}
		
		
	default:
		dbg_print("Unexpected NAV message 0x");
8001c450:	fe cc 0a 78 	sub	r12,pc,2680
8001c454:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(msg_id,10);
8001c458:	ec f8 00 5c 	ld.w	r8,r6[92]
8001c45c:	11 88       	ld.ub	r8,r8[0x0]
8001c45e:	30 ab       	mov	r11,10
8001c460:	10 9c       	mov	r12,r8
8001c462:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8001c466:	fe cc 1c 8a 	sub	r12,pc,7306
8001c46a:	f0 16 00 01 	mcall	r6[4]
		
		if (++disable_counter == 0) {
8001c46e:	ec f8 01 9c 	ld.w	r8,r6[412]
8001c472:	11 88       	ld.ub	r8,r8[0x0]
8001c474:	2f f8       	sub	r8,-1
8001c476:	5c 58       	castu.b	r8
8001c478:	ec f9 01 9c 	ld.w	r9,r6[412]
8001c47c:	b2 88       	st.b	r9[0x0],r8
8001c47e:	ec f8 01 9c 	ld.w	r8,r6[412]
8001c482:	11 88       	ld.ub	r8,r8[0x0]
8001c484:	58 08       	cp.w	r8,0
8001c486:	c1 81       	brne	8001c4b6 <ubx_process_data+0xaa8>
			//Debug("Disabling NAV message 0x%02x", (unsigned)_msg_id);
			dbg_print("Disabling NAV message 0x");
8001c488:	fe cc 0a 94 	sub	r12,pc,2708
8001c48c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(msg_id,16);
8001c490:	ec f8 00 5c 	ld.w	r8,r6[92]
8001c494:	11 88       	ld.ub	r8,r8[0x0]
8001c496:	31 0b       	mov	r11,16
8001c498:	10 9c       	mov	r12,r8
8001c49a:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001c49e:	fe cc 1c c2 	sub	r12,pc,7362
8001c4a2:	f0 16 00 01 	mcall	r6[4]
			ubx_configure_message_rate(UBX_CLASS_NAV, msg_id, 0);
8001c4a6:	ec f8 00 5c 	ld.w	r8,r6[92]
8001c4aa:	11 88       	ld.ub	r8,r8[0x0]
8001c4ac:	30 0a       	mov	r10,0
8001c4ae:	10 9b       	mov	r11,r8
8001c4b0:	30 1c       	mov	r12,1
8001c4b2:	f0 16 00 5c 	mcall	r6[368]
		}
		return false;
8001c4b6:	30 08       	mov	r8,0
8001c4b8:	c1 d8       	rjmp	8001c4f2 <ubx_process_data+0xae4>
			centralData->GPS_data.verticalAccuracy = ((float)gpsPosllh->vertical_accuracy) / 1000.0;
			//centralData->GPS_data.status = next_fix;
			
			new_position = true;
		}
		break;
8001c4ba:	d7 03       	nop
8001c4bc:	c0 68       	rjmp	8001c4c8 <ubx_process_data+0xaba>
				centralData->GPS_data.status = NO_FIX;
			}else{
				centralData->GPS_data.status = GPS_OK;
			}
		}
		break;
8001c4be:	d7 03       	nop
8001c4c0:	c0 48       	rjmp	8001c4c8 <ubx_process_data+0xaba>
			}
		
			centralData->GPS_data.num_sats = gpsSolution->satellites;
			centralData->GPS_data.hdop = gpsSolution->position_DOP;
		}
		break;
8001c4c2:	d7 03       	nop
8001c4c4:	c0 28       	rjmp	8001c4c8 <ubx_process_data+0xaba>
			centralData->GPS_data.verticalSpeed   = ((float)gpsVelned->ned_down) / 100.;
			centralData->GPS_data.speedAccuracy = ((float)gpsVelned->speed_accuracy)/100.;
			centralData->GPS_data.headingAccuracy = gpsVelned->heading_accuracy;
			new_speed = true;
		}
		break;
8001c4c6:	d7 03       	nop
		}
		return false;
	}
	// we only return true when we get new position and speed data
	// this ensures we don't use stale data
	if (new_position && new_speed) {
8001c4c8:	ec f8 02 4c 	ld.w	r8,r6[588]
8001c4cc:	11 88       	ld.ub	r8,r8[0x0]
8001c4ce:	58 08       	cp.w	r8,0
8001c4d0:	c1 00       	breq	8001c4f0 <ubx_process_data+0xae2>
8001c4d2:	ec f8 02 18 	ld.w	r8,r6[536]
8001c4d6:	11 88       	ld.ub	r8,r8[0x0]
8001c4d8:	58 08       	cp.w	r8,0
8001c4da:	c0 b0       	breq	8001c4f0 <ubx_process_data+0xae2>
		new_speed = false;
8001c4dc:	ec f9 02 18 	ld.w	r9,r6[536]
8001c4e0:	30 08       	mov	r8,0
8001c4e2:	b2 88       	st.b	r9[0x0],r8
		new_position = false;
8001c4e4:	ec f9 02 4c 	ld.w	r9,r6[588]
8001c4e8:	30 08       	mov	r8,0
8001c4ea:	b2 88       	st.b	r9[0x0],r8
// 		if (fix_count == 100) {
// 			// ask for nav settings every 20 seconds
// 			dbg_print("Asking for engine setting\n");
// 			ubx_send_message(UBX_CLASS_CFG, MSG_CFG_NAV_SETTINGS, NULL, 0);
// 		}
		return true;
8001c4ec:	30 18       	mov	r8,1
8001c4ee:	c0 28       	rjmp	8001c4f2 <ubx_process_data+0xae4>
	}
	return false;
8001c4f0:	30 08       	mov	r8,0
}
8001c4f2:	10 9c       	mov	r12,r8
8001c4f4:	2f 6d       	sub	sp,-40
8001c4f6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001c4fa:	00 00       	add	r0,r0
8001c4fc:	80 01       	ld.sh	r1,r0[0x0]
8001c4fe:	b8 9e       	st.b	r12[0x1],lr

8001c500 <update_checksum>:
************************************************************************************
Checksum update
************************************************************************************
*/
void update_checksum(uint8_t *data, uint8_t len, uint8_t *ck_a, uint8_t *ck_b)
{
8001c500:	eb cd 40 80 	pushm	r7,lr
8001c504:	1a 97       	mov	r7,sp
8001c506:	20 4d       	sub	sp,16
8001c508:	ef 4c ff fc 	st.w	r7[-4],r12
8001c50c:	16 98       	mov	r8,r11
8001c50e:	ef 4a ff f4 	st.w	r7[-12],r10
8001c512:	ef 49 ff f0 	st.w	r7[-16],r9
8001c516:	ef 68 ff f8 	st.b	r7[-8],r8
	while (len--) {
8001c51a:	c1 e8       	rjmp	8001c556 <update_checksum+0x56>
		*ck_a += *data;
8001c51c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c520:	11 89       	ld.ub	r9,r8[0x0]
8001c522:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c526:	11 88       	ld.ub	r8,r8[0x0]
8001c528:	f2 08 00 08 	add	r8,r9,r8
8001c52c:	5c 58       	castu.b	r8
8001c52e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001c532:	b2 88       	st.b	r9[0x0],r8
		*ck_b += *ck_a;
8001c534:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001c538:	11 89       	ld.ub	r9,r8[0x0]
8001c53a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c53e:	11 88       	ld.ub	r8,r8[0x0]
8001c540:	f2 08 00 08 	add	r8,r9,r8
8001c544:	5c 58       	castu.b	r8
8001c546:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001c54a:	b2 88       	st.b	r9[0x0],r8
		data++;
8001c54c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c550:	2f f8       	sub	r8,-1
8001c552:	ef 48 ff fc 	st.w	r7[-4],r8
Checksum update
************************************************************************************
*/
void update_checksum(uint8_t *data, uint8_t len, uint8_t *ck_a, uint8_t *ck_b)
{
	while (len--) {
8001c556:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8001c55a:	30 08       	mov	r8,0
8001c55c:	f0 09 18 00 	cp.b	r9,r8
8001c560:	5f 18       	srne	r8
8001c562:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001c566:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001c56a:	20 18       	sub	r8,1
8001c56c:	ef 68 ff f8 	st.b	r7[-8],r8
8001c570:	58 09       	cp.w	r9,0
8001c572:	cd 51       	brne	8001c51c <update_checksum+0x1c>
		*ck_a += *data;
		*ck_b += *ck_a;
		data++;
	}
}
8001c574:	2f cd       	sub	sp,-16
8001c576:	e3 cd 80 80 	ldm	sp++,r7,pc

8001c57a <endian_lower_bytes_uint16>:
To send the lower byte of an uint16_t in the Little Endian format
************************************************************************************
*/

uint8_t endian_lower_bytes_uint16(uint16_t bytes)
{
8001c57a:	eb cd 40 80 	pushm	r7,lr
8001c57e:	1a 97       	mov	r7,sp
8001c580:	20 1d       	sub	sp,4
8001c582:	18 98       	mov	r8,r12
8001c584:	ef 58 ff fc 	st.h	r7[-4],r8
	return (bytes & 0x00FF);
8001c588:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8001c58c:	5c 58       	castu.b	r8
}
8001c58e:	10 9c       	mov	r12,r8
8001c590:	2f fd       	sub	sp,-4
8001c592:	e3 cd 80 80 	ldm	sp++,r7,pc

8001c596 <endian_higher_bytes_uint16>:
************************************************************************************
To send the higher byte of an uint16_t in the Little Endian format
************************************************************************************
*/
uint8_t endian_higher_bytes_uint16(uint16_t bytes)
{
8001c596:	eb cd 40 80 	pushm	r7,lr
8001c59a:	1a 97       	mov	r7,sp
8001c59c:	20 1d       	sub	sp,4
8001c59e:	18 98       	mov	r8,r12
8001c5a0:	ef 58 ff fc 	st.h	r7[-4],r8
	return (bytes & 0xFF00)>>8;
8001c5a4:	ef 18 ff fc 	ld.uh	r8,r7[-4]
8001c5a8:	a9 88       	lsr	r8,0x8
8001c5aa:	5c 88       	casts.h	r8
8001c5ac:	5c 58       	castu.b	r8
}
8001c5ae:	10 9c       	mov	r12,r8
8001c5b0:	2f fd       	sub	sp,-4
8001c5b2:	e3 cd 80 80 	ldm	sp++,r7,pc

8001c5b6 <ubx_send_header>:
************************************************************************************
To send the UBX header of all messages
************************************************************************************
*/
void ubx_send_header(uint8_t msg_class, uint8_t _msg_id, uint8_t size)
{
8001c5b6:	eb cd 40 c0 	pushm	r6-r7,lr
8001c5ba:	1a 97       	mov	r7,sp
8001c5bc:	20 5d       	sub	sp,20
8001c5be:	4b 76       	lddpc	r6,8001c698 <ubx_send_header+0xe2>
8001c5c0:	1e 26       	rsub	r6,pc
8001c5c2:	16 99       	mov	r9,r11
8001c5c4:	14 98       	mov	r8,r10
8001c5c6:	18 9a       	mov	r10,r12
8001c5c8:	ef 6a ff f4 	st.b	r7[-12],r10
8001c5cc:	ef 69 ff f0 	st.b	r7[-16],r9
8001c5d0:	ef 68 ff ec 	st.b	r7[-20],r8
	ubx_header header;
	header.preamble1		= UBX_PREAMBLE1;
8001c5d4:	3b 58       	mov	r8,-75
8001c5d6:	ef 68 ff ff 	st.b	r7[-1],r8
	header.preamble2		= UBX_PREAMBLE2;
8001c5da:	36 28       	mov	r8,98
8001c5dc:	ef 68 ff fe 	st.b	r7[-2],r8
	header.msg_class		= msg_class;
8001c5e0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001c5e4:	ef 68 ff fd 	st.b	r7[-3],r8
	header.msg_id_header    = _msg_id;
8001c5e8:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001c5ec:	ef 68 ff fc 	st.b	r7[-4],r8
	header.length			= size;
8001c5f0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001c5f4:	ef 58 ff fa 	st.h	r7[-6],r8
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,header.msg_id_header);
	//
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,(uint8_t) (header.length & 0x0F));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,(uint8_t) (header.length & 0xF0)>>8);
	
	putnum(&centralData->gps_stream_out,header.preamble1,16);
8001c5f8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001c5fc:	10 99       	mov	r9,r8
8001c5fe:	ec f8 00 00 	ld.w	r8,r6[0]
8001c602:	70 08       	ld.w	r8,r8[0x0]
8001c604:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c608:	31 0a       	mov	r10,16
8001c60a:	12 9b       	mov	r11,r9
8001c60c:	10 9c       	mov	r12,r8
8001c60e:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,header.preamble2,16);
8001c612:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001c616:	10 99       	mov	r9,r8
8001c618:	ec f8 00 00 	ld.w	r8,r6[0]
8001c61c:	70 08       	ld.w	r8,r8[0x0]
8001c61e:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c622:	31 0a       	mov	r10,16
8001c624:	12 9b       	mov	r11,r9
8001c626:	10 9c       	mov	r12,r8
8001c628:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,header.msg_class,10);
8001c62c:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8001c630:	10 99       	mov	r9,r8
8001c632:	ec f8 00 00 	ld.w	r8,r6[0]
8001c636:	70 08       	ld.w	r8,r8[0x0]
8001c638:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c63c:	30 aa       	mov	r10,10
8001c63e:	12 9b       	mov	r11,r9
8001c640:	10 9c       	mov	r12,r8
8001c642:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,header.msg_id_header,16);
8001c646:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001c64a:	10 99       	mov	r9,r8
8001c64c:	ec f8 00 00 	ld.w	r8,r6[0]
8001c650:	70 08       	ld.w	r8,r8[0x0]
8001c652:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c656:	31 0a       	mov	r10,16
8001c658:	12 9b       	mov	r11,r9
8001c65a:	10 9c       	mov	r12,r8
8001c65c:	f0 16 00 28 	mcall	r6[160]
	
	putnum(&centralData->gps_stream_out,(uint8_t) (header.length & 0x0F),16);
8001c660:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8001c664:	5c 58       	castu.b	r8
8001c666:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
8001c66a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c66e:	70 08       	ld.w	r8,r8[0x0]
8001c670:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c674:	31 0a       	mov	r10,16
8001c676:	12 9b       	mov	r11,r9
8001c678:	10 9c       	mov	r12,r8
8001c67a:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,(uint8_t) (header.length & 0xF0)>>8,16);
8001c67e:	ec f8 00 00 	ld.w	r8,r6[0]
8001c682:	70 08       	ld.w	r8,r8[0x0]
8001c684:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c688:	31 0a       	mov	r10,16
8001c68a:	30 0b       	mov	r11,0
8001c68c:	10 9c       	mov	r12,r8
8001c68e:	f0 16 00 28 	mcall	r6[160]
	
}
8001c692:	2f bd       	sub	sp,-20
8001c694:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c698:	80 01       	ld.sh	r1,r0[0x0]
8001c69a:	c4 44       	brge	8001c722 <ubx_send_message+0x32>

8001c69c <ubx_send_cksum>:
************************************************************************************
To send the checksum of every message
************************************************************************************
*/
void ubx_send_cksum(uint8_t ck_sum_a, uint8_t ck_sum_b)
{
8001c69c:	eb cd 40 c0 	pushm	r6-r7,lr
8001c6a0:	1a 97       	mov	r7,sp
8001c6a2:	20 2d       	sub	sp,8
8001c6a4:	49 26       	lddpc	r6,8001c6ec <ubx_send_cksum+0x50>
8001c6a6:	1e 26       	rsub	r6,pc
8001c6a8:	18 99       	mov	r9,r12
8001c6aa:	16 98       	mov	r8,r11
8001c6ac:	ef 69 ff fc 	st.b	r7[-4],r9
8001c6b0:	ef 68 ff f8 	st.b	r7[-8],r8
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,ck_sum_a);
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,ck_sum_b);
	
	putnum(&centralData->gps_stream_out,ck_sum_a,16);
8001c6b4:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8001c6b8:	ec f8 00 00 	ld.w	r8,r6[0]
8001c6bc:	70 08       	ld.w	r8,r8[0x0]
8001c6be:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c6c2:	31 0a       	mov	r10,16
8001c6c4:	12 9b       	mov	r11,r9
8001c6c6:	10 9c       	mov	r12,r8
8001c6c8:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,ck_sum_b,16);
8001c6cc:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8001c6d0:	ec f8 00 00 	ld.w	r8,r6[0]
8001c6d4:	70 08       	ld.w	r8,r8[0x0]
8001c6d6:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c6da:	31 0a       	mov	r10,16
8001c6dc:	12 9b       	mov	r11,r9
8001c6de:	10 9c       	mov	r12,r8
8001c6e0:	f0 16 00 28 	mcall	r6[160]
}
8001c6e4:	2f ed       	sub	sp,-8
8001c6e6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c6ea:	00 00       	add	r0,r0
8001c6ec:	80 01       	ld.sh	r1,r0[0x0]
8001c6ee:	c5 2a       	rjmp	8001c392 <ubx_process_data+0x984>

8001c6f0 <ubx_send_message>:
NOT USED ANYMORE
To send a message to the GPS
************************************************************************************
*/
void ubx_send_message(uint8_t msg_class, uint8_t _msg_id, void *msg, uint8_t size)
{
8001c6f0:	eb cd 40 c0 	pushm	r6-r7,lr
8001c6f4:	1a 97       	mov	r7,sp
8001c6f6:	20 6d       	sub	sp,24
8001c6f8:	4b 56       	lddpc	r6,8001c7cc <ubx_send_message+0xdc>
8001c6fa:	1e 26       	rsub	r6,pc
8001c6fc:	ef 4a ff ec 	st.w	r7[-20],r10
8001c700:	12 98       	mov	r8,r9
8001c702:	18 99       	mov	r9,r12
8001c704:	ef 69 ff f4 	st.b	r7[-12],r9
8001c708:	16 99       	mov	r9,r11
8001c70a:	ef 69 ff f0 	st.b	r7[-16],r9
8001c70e:	ef 68 ff e8 	st.b	r7[-24],r8
	ubx_header header;
	uint8_t ck_a=0, ck_b=0;
8001c712:	30 08       	mov	r8,0
8001c714:	ef 68 ff f9 	st.b	r7[-7],r8
8001c718:	30 08       	mov	r8,0
8001c71a:	ef 68 ff f8 	st.b	r7[-8],r8
	header.preamble1 = UBX_PREAMBLE1;
8001c71e:	3b 58       	mov	r8,-75
8001c720:	ef 68 ff ff 	st.b	r7[-1],r8
	header.preamble2 = UBX_PREAMBLE2;
8001c724:	36 28       	mov	r8,98
8001c726:	ef 68 ff fe 	st.b	r7[-2],r8
	header.msg_class = msg_class;
8001c72a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001c72e:	ef 68 ff fd 	st.b	r7[-3],r8
	header.msg_id_header    = _msg_id;
8001c732:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001c736:	ef 68 ff fc 	st.b	r7[-4],r8
	header.length    = size;
8001c73a:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8001c73e:	ef 58 ff fa 	st.h	r7[-6],r8
	
	update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
8001c742:	ee c9 00 08 	sub	r9,r7,8
8001c746:	ee ca 00 07 	sub	r10,r7,7
8001c74a:	ee c8 00 06 	sub	r8,r7,6
8001c74e:	2f d8       	sub	r8,-3
8001c750:	30 4b       	mov	r11,4
8001c752:	10 9c       	mov	r12,r8
8001c754:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)msg, size, &ck_a, &ck_b);
8001c758:	ef 3b ff e8 	ld.ub	r11,r7[-24]
8001c75c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001c760:	ee c9 00 08 	sub	r9,r7,8
8001c764:	ee ca 00 07 	sub	r10,r7,7
8001c768:	10 9c       	mov	r12,r8
8001c76a:	f0 16 00 35 	mcall	r6[212]
	
 	putstring(&(centralData->gps_stream_out),&header);
8001c76e:	ee c9 00 06 	sub	r9,r7,6
8001c772:	ec f8 00 00 	ld.w	r8,r6[0]
8001c776:	70 08       	ld.w	r8,r8[0x0]
8001c778:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c77c:	12 9b       	mov	r11,r9
8001c77e:	10 9c       	mov	r12,r8
8001c780:	f0 16 00 34 	mcall	r6[208]
 	putstring(&(centralData->gps_stream_out),(uint8_t *)msg);
8001c784:	ee f9 ff ec 	ld.w	r9,r7[-20]
8001c788:	ec f8 00 00 	ld.w	r8,r6[0]
8001c78c:	70 08       	ld.w	r8,r8[0x0]
8001c78e:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c792:	12 9b       	mov	r11,r9
8001c794:	10 9c       	mov	r12,r8
8001c796:	f0 16 00 34 	mcall	r6[208]
 	putstring(&(centralData->gps_stream_out),&ck_a);
8001c79a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c79e:	70 08       	ld.w	r8,r8[0x0]
8001c7a0:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c7a4:	ee c9 00 07 	sub	r9,r7,7
8001c7a8:	12 9b       	mov	r11,r9
8001c7aa:	10 9c       	mov	r12,r8
8001c7ac:	f0 16 00 34 	mcall	r6[208]
 	putstring(&(centralData->gps_stream_out),&ck_b);
8001c7b0:	ec f8 00 00 	ld.w	r8,r6[0]
8001c7b4:	70 08       	ld.w	r8,r8[0x0]
8001c7b6:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c7ba:	ee c9 00 08 	sub	r9,r7,8
8001c7be:	12 9b       	mov	r11,r9
8001c7c0:	10 9c       	mov	r12,r8
8001c7c2:	f0 16 00 34 	mcall	r6[208]
	
	//centralData->gps_stream_out.flush(&(centralData->gps_stream_out.data));
}
8001c7c6:	2f ad       	sub	sp,-24
8001c7c8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c7cc:	80 01       	ld.sh	r1,r0[0x0]
8001c7ce:	c5 7e       	rcall	8001c47c <ubx_process_data+0xa6e>

8001c7d0 <ubx_send_message_CFG_nav_rate>:
Class:		0x06	UBX_CLASS_CFG
Msg_id:		0x08	MSG_CFG_RATE
************************************************************************************
*/
void ubx_send_message_CFG_nav_rate(uint8_t msg_class, uint8_t _msg_id, ubx_cfg_nav_rate_send msg, uint8_t size)
{
8001c7d0:	eb cd 40 e0 	pushm	r5-r7,lr
8001c7d4:	1a 97       	mov	r7,sp
8001c7d6:	20 4d       	sub	sp,16
8001c7d8:	4d d6       	lddpc	r6,8001c94c <ubx_send_message_CFG_nav_rate+0x17c>
8001c7da:	1e 26       	rsub	r6,pc
8001c7dc:	ee c5 ff f0 	sub	r5,r7,-16
8001c7e0:	16 99       	mov	r9,r11
8001c7e2:	14 98       	mov	r8,r10
8001c7e4:	18 9a       	mov	r10,r12
8001c7e6:	ef 6a ff f8 	st.b	r7[-8],r10
8001c7ea:	ef 69 ff f4 	st.b	r7[-12],r9
8001c7ee:	ef 68 ff f0 	st.b	r7[-16],r8
	uint8_t ck_a=0, ck_b=0;
8001c7f2:	30 08       	mov	r8,0
8001c7f4:	ef 68 ff ff 	st.b	r7[-1],r8
8001c7f8:	30 08       	mov	r8,0
8001c7fa:	ef 68 ff fe 	st.b	r7[-2],r8
	
	update_checksum((uint8_t *)&msg_class, 1, &ck_a, &ck_b);
8001c7fe:	ee c9 00 02 	sub	r9,r7,2
8001c802:	ee ca 00 01 	sub	r10,r7,1
8001c806:	ee c8 00 08 	sub	r8,r7,8
8001c80a:	30 1b       	mov	r11,1
8001c80c:	10 9c       	mov	r12,r8
8001c80e:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)&_msg_id, 1, &ck_a, &ck_b);
8001c812:	ee c9 00 02 	sub	r9,r7,2
8001c816:	ee ca 00 01 	sub	r10,r7,1
8001c81a:	ee c8 00 0c 	sub	r8,r7,12
8001c81e:	30 1b       	mov	r11,1
8001c820:	10 9c       	mov	r12,r8
8001c822:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)&size, 1, &ck_a, &ck_b);
8001c826:	ee c9 00 02 	sub	r9,r7,2
8001c82a:	ee ca 00 01 	sub	r10,r7,1
8001c82e:	ee c8 00 10 	sub	r8,r7,16
8001c832:	30 1b       	mov	r11,1
8001c834:	10 9c       	mov	r12,r8
8001c836:	f0 16 00 35 	mcall	r6[212]

	//update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
	update_checksum((uint8_t *)&msg, size, &ck_a, &ck_b);
8001c83a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001c83e:	10 9b       	mov	r11,r8
8001c840:	0a 98       	mov	r8,r5
8001c842:	ee c9 00 02 	sub	r9,r7,2
8001c846:	ee ca 00 01 	sub	r10,r7,1
8001c84a:	10 9c       	mov	r12,r8
8001c84c:	f0 16 00 35 	mcall	r6[212]
	
	ubx_send_header(msg_class,_msg_id,size);
8001c850:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001c854:	10 9a       	mov	r10,r8
8001c856:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001c85a:	10 99       	mov	r9,r8
8001c85c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001c860:	12 9b       	mov	r11,r9
8001c862:	10 9c       	mov	r12,r8
8001c864:	f0 16 00 be 	mcall	r6[760]
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_lower_bytes_uint16(msg.nav_rate));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_higher_bytes_uint16(msg.nav_rate));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_lower_bytes_uint16(msg.timeref));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_higher_bytes_uint16(msg.timeref));	
	
	putnum(&centralData->gps_stream_out, endian_lower_bytes_uint16(msg.measure_rate_ms),16);
8001c868:	8a 08       	ld.sh	r8,r5[0x0]
8001c86a:	5c 78       	castu.h	r8
8001c86c:	10 9c       	mov	r12,r8
8001c86e:	f0 16 00 aa 	mcall	r6[680]
8001c872:	18 98       	mov	r8,r12
8001c874:	10 99       	mov	r9,r8
8001c876:	ec f8 00 00 	ld.w	r8,r6[0]
8001c87a:	70 08       	ld.w	r8,r8[0x0]
8001c87c:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c880:	31 0a       	mov	r10,16
8001c882:	12 9b       	mov	r11,r9
8001c884:	10 9c       	mov	r12,r8
8001c886:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_higher_bytes_uint16(msg.measure_rate_ms),16);
8001c88a:	8a 08       	ld.sh	r8,r5[0x0]
8001c88c:	5c 78       	castu.h	r8
8001c88e:	10 9c       	mov	r12,r8
8001c890:	f0 16 00 b1 	mcall	r6[708]
8001c894:	18 98       	mov	r8,r12
8001c896:	10 99       	mov	r9,r8
8001c898:	ec f8 00 00 	ld.w	r8,r6[0]
8001c89c:	70 08       	ld.w	r8,r8[0x0]
8001c89e:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c8a2:	31 0a       	mov	r10,16
8001c8a4:	12 9b       	mov	r11,r9
8001c8a6:	10 9c       	mov	r12,r8
8001c8a8:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_lower_bytes_uint16(msg.nav_rate),16);
8001c8ac:	8a 18       	ld.sh	r8,r5[0x2]
8001c8ae:	5c 78       	castu.h	r8
8001c8b0:	10 9c       	mov	r12,r8
8001c8b2:	f0 16 00 aa 	mcall	r6[680]
8001c8b6:	18 98       	mov	r8,r12
8001c8b8:	10 99       	mov	r9,r8
8001c8ba:	ec f8 00 00 	ld.w	r8,r6[0]
8001c8be:	70 08       	ld.w	r8,r8[0x0]
8001c8c0:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c8c4:	31 0a       	mov	r10,16
8001c8c6:	12 9b       	mov	r11,r9
8001c8c8:	10 9c       	mov	r12,r8
8001c8ca:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_higher_bytes_uint16(msg.nav_rate),16);
8001c8ce:	8a 18       	ld.sh	r8,r5[0x2]
8001c8d0:	5c 78       	castu.h	r8
8001c8d2:	10 9c       	mov	r12,r8
8001c8d4:	f0 16 00 b1 	mcall	r6[708]
8001c8d8:	18 98       	mov	r8,r12
8001c8da:	10 99       	mov	r9,r8
8001c8dc:	ec f8 00 00 	ld.w	r8,r6[0]
8001c8e0:	70 08       	ld.w	r8,r8[0x0]
8001c8e2:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c8e6:	31 0a       	mov	r10,16
8001c8e8:	12 9b       	mov	r11,r9
8001c8ea:	10 9c       	mov	r12,r8
8001c8ec:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_lower_bytes_uint16(msg.timeref),16);
8001c8f0:	8a 28       	ld.sh	r8,r5[0x4]
8001c8f2:	5c 78       	castu.h	r8
8001c8f4:	10 9c       	mov	r12,r8
8001c8f6:	f0 16 00 aa 	mcall	r6[680]
8001c8fa:	18 98       	mov	r8,r12
8001c8fc:	10 99       	mov	r9,r8
8001c8fe:	ec f8 00 00 	ld.w	r8,r6[0]
8001c902:	70 08       	ld.w	r8,r8[0x0]
8001c904:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c908:	31 0a       	mov	r10,16
8001c90a:	12 9b       	mov	r11,r9
8001c90c:	10 9c       	mov	r12,r8
8001c90e:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_higher_bytes_uint16(msg.timeref),16);
8001c912:	8a 28       	ld.sh	r8,r5[0x4]
8001c914:	5c 78       	castu.h	r8
8001c916:	10 9c       	mov	r12,r8
8001c918:	f0 16 00 b1 	mcall	r6[708]
8001c91c:	18 98       	mov	r8,r12
8001c91e:	10 99       	mov	r9,r8
8001c920:	ec f8 00 00 	ld.w	r8,r6[0]
8001c924:	70 08       	ld.w	r8,r8[0x0]
8001c926:	f0 c8 f5 10 	sub	r8,r8,-2800
8001c92a:	31 0a       	mov	r10,16
8001c92c:	12 9b       	mov	r11,r9
8001c92e:	10 9c       	mov	r12,r8
8001c930:	f0 16 00 28 	mcall	r6[160]
	
	ubx_send_cksum(ck_a,ck_b);
8001c934:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001c938:	10 99       	mov	r9,r8
8001c93a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001c93e:	12 9b       	mov	r11,r9
8001c940:	10 9c       	mov	r12,r8
8001c942:	f0 16 00 bc 	mcall	r6[752]
	
	//centralData->gps_stream_out.flush(&(centralData->gps_stream_out.data));
}
8001c946:	2f cd       	sub	sp,-16
8001c948:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001c94c:	80 01       	ld.sh	r1,r0[0x0]
8001c94e:	c6 5e       	rcall	8001c618 <ubx_send_header+0x62>

8001c950 <ubx_send_message_nav_settings>:
Class:		0x06	UBX_CLASS_CFG
Msg_id :	0x24	MSG_CFG_NAV_SETTINGS
************************************************************************************
*/
void ubx_send_message_nav_settings(uint8_t msg_class, uint8_t _msg_id, enum GPS_Engine_Setting *engine_settings, uint8_t size)
{
8001c950:	eb cd 40 c0 	pushm	r6-r7,lr
8001c954:	1a 97       	mov	r7,sp
8001c956:	20 5d       	sub	sp,20
8001c958:	4b 46       	lddpc	r6,8001ca28 <ubx_send_message_nav_settings+0xd8>
8001c95a:	1e 26       	rsub	r6,pc
8001c95c:	ef 4a ff f0 	st.w	r7[-16],r10
8001c960:	12 98       	mov	r8,r9
8001c962:	18 99       	mov	r9,r12
8001c964:	ef 69 ff f8 	st.b	r7[-8],r9
8001c968:	16 99       	mov	r9,r11
8001c96a:	ef 69 ff f4 	st.b	r7[-12],r9
8001c96e:	ef 68 ff ec 	st.b	r7[-20],r8
	uint8_t ck_a=0, ck_b=0;
8001c972:	30 08       	mov	r8,0
8001c974:	ef 68 ff ff 	st.b	r7[-1],r8
8001c978:	30 08       	mov	r8,0
8001c97a:	ef 68 ff fe 	st.b	r7[-2],r8
	
	update_checksum((uint8_t *)&msg_class, 1, &ck_a, &ck_b);
8001c97e:	ee c9 00 02 	sub	r9,r7,2
8001c982:	ee ca 00 01 	sub	r10,r7,1
8001c986:	ee c8 00 08 	sub	r8,r7,8
8001c98a:	30 1b       	mov	r11,1
8001c98c:	10 9c       	mov	r12,r8
8001c98e:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)&_msg_id, 1, &ck_a, &ck_b);
8001c992:	ee c9 00 02 	sub	r9,r7,2
8001c996:	ee ca 00 01 	sub	r10,r7,1
8001c99a:	ee c8 00 0c 	sub	r8,r7,12
8001c99e:	30 1b       	mov	r11,1
8001c9a0:	10 9c       	mov	r12,r8
8001c9a2:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)&size, 1, &ck_a, &ck_b);
8001c9a6:	ee c9 00 02 	sub	r9,r7,2
8001c9aa:	ee ca 00 01 	sub	r10,r7,1
8001c9ae:	ee c8 00 14 	sub	r8,r7,20
8001c9b2:	30 1b       	mov	r11,1
8001c9b4:	10 9c       	mov	r12,r8
8001c9b6:	f0 16 00 35 	mcall	r6[212]

	//update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
	
	
	ubx_send_header(msg_class,_msg_id,size);
8001c9ba:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001c9be:	10 9a       	mov	r10,r8
8001c9c0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001c9c4:	10 99       	mov	r9,r8
8001c9c6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001c9ca:	12 9b       	mov	r11,r9
8001c9cc:	10 9c       	mov	r12,r8
8001c9ce:	f0 16 00 be 	mcall	r6[760]
	
	if (engine_settings != NULL)
8001c9d2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001c9d6:	58 08       	cp.w	r8,0
8001c9d8:	c1 c0       	breq	8001ca10 <ubx_send_message_nav_settings+0xc0>
	{
		update_checksum((uint8_t *)engine_settings, size, &ck_a, &ck_b);
8001c9da:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001c9de:	10 9b       	mov	r11,r8
8001c9e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001c9e4:	ee c9 00 02 	sub	r9,r7,2
8001c9e8:	ee ca 00 01 	sub	r10,r7,1
8001c9ec:	10 9c       	mov	r12,r8
8001c9ee:	f0 16 00 35 	mcall	r6[212]
		//centralData->gps_stream_out.put(centralData->gps_stream_out.data, (uint8_t) *engine_settings);
		putnum(&centralData->gps_stream_out, (uint8_t) *engine_settings,10);
8001c9f2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001c9f6:	70 08       	ld.w	r8,r8[0x0]
8001c9f8:	5c 58       	castu.b	r8
8001c9fa:	10 99       	mov	r9,r8
8001c9fc:	ec f8 00 00 	ld.w	r8,r6[0]
8001ca00:	70 08       	ld.w	r8,r8[0x0]
8001ca02:	f0 c8 f5 10 	sub	r8,r8,-2800
8001ca06:	30 aa       	mov	r10,10
8001ca08:	12 9b       	mov	r11,r9
8001ca0a:	10 9c       	mov	r12,r8
8001ca0c:	f0 16 00 28 	mcall	r6[160]
	}
	
	ubx_send_cksum(ck_a,ck_b);
8001ca10:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001ca14:	10 99       	mov	r9,r8
8001ca16:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ca1a:	12 9b       	mov	r11,r9
8001ca1c:	10 9c       	mov	r12,r8
8001ca1e:	f0 16 00 bc 	mcall	r6[752]
	
	//centralData->gps_stream_out.flush(&(centralData->gps_stream_out.data));
}
8001ca22:	2f bd       	sub	sp,-20
8001ca24:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ca28:	80 01       	ld.sh	r1,r0[0x0]
8001ca2a:	c7 de       	rcall	8001c724 <ubx_send_message+0x34>

8001ca2c <ubx_configure_message_rate>:
Class:		0x06	UBX_CLASS_CFG
Msg_id :	0x01	MSG_CFG_SET_RATE
************************************************************************************
*/
void ubx_configure_message_rate(uint8_t msg_class, uint8_t _msg_id, uint8_t rate)
{
8001ca2c:	eb cd 40 c0 	pushm	r6-r7,lr
8001ca30:	1a 97       	mov	r7,sp
8001ca32:	20 5d       	sub	sp,20
8001ca34:	4c 16       	lddpc	r6,8001cb38 <ubx_configure_message_rate+0x10c>
8001ca36:	1e 26       	rsub	r6,pc
8001ca38:	16 99       	mov	r9,r11
8001ca3a:	14 98       	mov	r8,r10
8001ca3c:	18 9a       	mov	r10,r12
8001ca3e:	ef 6a ff f4 	st.b	r7[-12],r10
8001ca42:	ef 69 ff f0 	st.b	r7[-16],r9
8001ca46:	ef 68 ff ec 	st.b	r7[-20],r8
	uint8_t ck_a=0, ck_b=0;
8001ca4a:	30 08       	mov	r8,0
8001ca4c:	ef 68 ff ff 	st.b	r7[-1],r8
8001ca50:	30 08       	mov	r8,0
8001ca52:	ef 68 ff fe 	st.b	r7[-2],r8
	ubx_cfg_msg_rate_send msg;
	msg.msg_class = msg_class;
8001ca56:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001ca5a:	ef 68 ff fb 	st.b	r7[-5],r8
	msg.msg_id_rate    = _msg_id;
8001ca5e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001ca62:	ef 68 ff fc 	st.b	r7[-4],r8
	msg.rate          = rate;
8001ca66:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001ca6a:	ef 68 ff fd 	st.b	r7[-3],r8
	
	uint8_t size = sizeof(msg);
8001ca6e:	30 38       	mov	r8,3
8001ca70:	ef 68 ff fa 	st.b	r7[-6],r8
	
	update_checksum((uint8_t *)&msg_class, 1, &ck_a, &ck_b);
8001ca74:	ee c9 00 02 	sub	r9,r7,2
8001ca78:	ee ca 00 01 	sub	r10,r7,1
8001ca7c:	ee c8 00 0c 	sub	r8,r7,12
8001ca80:	30 1b       	mov	r11,1
8001ca82:	10 9c       	mov	r12,r8
8001ca84:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)&_msg_id, 1, &ck_a, &ck_b);
8001ca88:	ee c9 00 02 	sub	r9,r7,2
8001ca8c:	ee ca 00 01 	sub	r10,r7,1
8001ca90:	ee c8 00 10 	sub	r8,r7,16
8001ca94:	30 1b       	mov	r11,1
8001ca96:	10 9c       	mov	r12,r8
8001ca98:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)&size, 1, &ck_a, &ck_b);
8001ca9c:	ee c9 00 02 	sub	r9,r7,2
8001caa0:	ee ca 00 01 	sub	r10,r7,1
8001caa4:	ee c8 00 06 	sub	r8,r7,6
8001caa8:	30 1b       	mov	r11,1
8001caaa:	10 9c       	mov	r12,r8
8001caac:	f0 16 00 35 	mcall	r6[212]

	//update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
	update_checksum((uint8_t *)&msg, size, &ck_a, &ck_b);
8001cab0:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001cab4:	10 9b       	mov	r11,r8
8001cab6:	ee c9 00 02 	sub	r9,r7,2
8001caba:	ee ca 00 01 	sub	r10,r7,1
8001cabe:	ee c8 00 05 	sub	r8,r7,5
8001cac2:	10 9c       	mov	r12,r8
8001cac4:	f0 16 00 35 	mcall	r6[212]
	
	ubx_send_header(UBX_CLASS_CFG,MSG_CFG_SET_RATE,sizeof(msg));
8001cac8:	30 3a       	mov	r10,3
8001caca:	30 1b       	mov	r11,1
8001cacc:	30 6c       	mov	r12,6
8001cace:	f0 16 00 be 	mcall	r6[760]
	
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,msg.msg_class);
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,msg.msg_id_rate);
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,msg.rate);
	
	putnum(&centralData->gps_stream_out,msg.msg_class,16);
8001cad2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8001cad6:	10 99       	mov	r9,r8
8001cad8:	ec f8 00 00 	ld.w	r8,r6[0]
8001cadc:	70 08       	ld.w	r8,r8[0x0]
8001cade:	f0 c8 f5 10 	sub	r8,r8,-2800
8001cae2:	31 0a       	mov	r10,16
8001cae4:	12 9b       	mov	r11,r9
8001cae6:	10 9c       	mov	r12,r8
8001cae8:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,msg.msg_id_rate,16);
8001caec:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001caf0:	10 99       	mov	r9,r8
8001caf2:	ec f8 00 00 	ld.w	r8,r6[0]
8001caf6:	70 08       	ld.w	r8,r8[0x0]
8001caf8:	f0 c8 f5 10 	sub	r8,r8,-2800
8001cafc:	31 0a       	mov	r10,16
8001cafe:	12 9b       	mov	r11,r9
8001cb00:	10 9c       	mov	r12,r8
8001cb02:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,msg.rate,16);
8001cb06:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8001cb0a:	10 99       	mov	r9,r8
8001cb0c:	ec f8 00 00 	ld.w	r8,r6[0]
8001cb10:	70 08       	ld.w	r8,r8[0x0]
8001cb12:	f0 c8 f5 10 	sub	r8,r8,-2800
8001cb16:	31 0a       	mov	r10,16
8001cb18:	12 9b       	mov	r11,r9
8001cb1a:	10 9c       	mov	r12,r8
8001cb1c:	f0 16 00 28 	mcall	r6[160]
	
	ubx_send_cksum(ck_a,ck_b);
8001cb20:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001cb24:	10 99       	mov	r9,r8
8001cb26:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001cb2a:	12 9b       	mov	r11,r9
8001cb2c:	10 9c       	mov	r12,r8
8001cb2e:	f0 16 00 bc 	mcall	r6[752]
	//ubx_send_message(UBX_CLASS_CFG, MSG_CFG_SET_RATE, &msg, sizeof(msg));
	
	//centralData->gps_stream_out.flush(centralData->gps_stream_out.data);
}
8001cb32:	2f bd       	sub	sp,-20
8001cb34:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cb38:	80 01       	ld.sh	r1,r0[0x0]
8001cb3a:	c8 ba       	rjmp	8001c850 <ubx_send_message_CFG_nav_rate+0x80>
8001cb3c:	24 50       	sub	r0,69
8001cb3e:	55 42       	stdsp	sp[0x150],r2
8001cb40:	58 2c       	cp.w	r12,2
8001cb42:	34 31       	mov	r1,67
8001cb44:	2c 31       	sub	r1,-61
8001cb46:	2c 30       	sub	r0,-61
8001cb48:	30 30       	mov	r0,3
8001cb4a:	33 2c       	mov	r12,50
8001cb4c:	30 30       	mov	r0,3
8001cb4e:	30 31       	mov	r1,3
8001cb50:	2c 33       	sub	r3,-61
8001cb52:	38 34       	mov	r4,-125
8001cb54:	30 30       	mov	r0,3
8001cb56:	2c 30       	sub	r0,-61
8001cb58:	2a 32       	sub	r2,-93
8001cb5a:	35 0d       	mov	sp,80
8001cb5c:	0a 00       	add	r0,r5

8001cb5e <configure_gps>:
To configure the GPS in binary mode and the Navigation messages we want
The GPS and UART channel should already be configured in the good baudrate 38400U
************************************************************************************
*/
void configure_gps(void)
{
8001cb5e:	eb cd 40 c0 	pushm	r6-r7,lr
8001cb62:	1a 97       	mov	r7,sp
8001cb64:	20 3d       	sub	sp,12
8001cb66:	4a 66       	lddpc	r6,8001cbfc <configure_gps+0x9e>
8001cb68:	1e 26       	rsub	r6,pc
	ubx_cfg_nav_rate_send msg;
	const unsigned baudrates[4] = {9600U, 19200U, 38400U, 57600U};

	const char *set_binary = UBLOX_SET_BINARY;
8001cb6a:	fe c8 00 2e 	sub	r8,pc,46
8001cb6e:	ef 48 ff fc 	st.w	r7[-4],r8
// 	for (uint8_t i=0; i<4; i++)
// 	{
	
	//dbg_print("Set to binary mode ");
	//dbg_print(set_binary);
	putstring(&(centralData->gps_stream_out),set_binary);
8001cb72:	ec f8 00 00 	ld.w	r8,r6[0]
8001cb76:	70 08       	ld.w	r8,r8[0x0]
8001cb78:	f0 c8 f5 10 	sub	r8,r8,-2800
8001cb7c:	ee fb ff fc 	ld.w	r11,r7[-4]
8001cb80:	10 9c       	mov	r12,r8
8001cb82:	f0 16 00 34 	mcall	r6[208]
	
	
	//_port->begin(38400U);

	// ask for navigation solutions every 200ms
	msg.measure_rate_ms = 200;		// ms
8001cb86:	e0 68 00 c8 	mov	r8,200
8001cb8a:	ef 58 ff f6 	st.h	r7[-10],r8
	msg.nav_rate        = 1;		// constant equal to 1
8001cb8e:	30 18       	mov	r8,1
8001cb90:	ef 58 ff f8 	st.h	r7[-8],r8
	msg.timeref         = 0;		// 0:UTC time, 1:GPS time
8001cb94:	30 08       	mov	r8,0
8001cb96:	ef 58 ff fa 	st.h	r7[-6],r8
	
	ubx_send_message_CFG_nav_rate(UBX_CLASS_CFG, MSG_CFG_RATE, msg, sizeof(msg));
8001cb9a:	20 2d       	sub	sp,8
8001cb9c:	1a 98       	mov	r8,sp
8001cb9e:	ee c9 00 0a 	sub	r9,r7,10
8001cba2:	30 6a       	mov	r10,6
8001cba4:	12 9b       	mov	r11,r9
8001cba6:	10 9c       	mov	r12,r8
8001cba8:	f0 16 00 21 	mcall	r6[132]
8001cbac:	30 6a       	mov	r10,6
8001cbae:	30 8b       	mov	r11,8
8001cbb0:	30 6c       	mov	r12,6
8001cbb2:	f0 16 01 96 	mcall	r6[1624]
8001cbb6:	2f ed       	sub	sp,-8

	// ask for the messages we parse to be sent on every navigation solution
	//dbg_print("Set navigation messages\n");
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_POSLLH, 1);
8001cbb8:	30 1a       	mov	r10,1
8001cbba:	30 2b       	mov	r11,2
8001cbbc:	30 1c       	mov	r12,1
8001cbbe:	f0 16 00 5c 	mcall	r6[368]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_STATUS, 1);
8001cbc2:	30 1a       	mov	r10,1
8001cbc4:	30 3b       	mov	r11,3
8001cbc6:	30 1c       	mov	r12,1
8001cbc8:	f0 16 00 5c 	mcall	r6[368]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_SOL, 1);
8001cbcc:	30 1a       	mov	r10,1
8001cbce:	30 6b       	mov	r11,6
8001cbd0:	30 1c       	mov	r12,1
8001cbd2:	f0 16 00 5c 	mcall	r6[368]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_VELNED, 1);
8001cbd6:	30 1a       	mov	r10,1
8001cbd8:	31 2b       	mov	r11,18
8001cbda:	30 1c       	mov	r12,1
8001cbdc:	f0 16 00 5c 	mcall	r6[368]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_SVINFO, 1);
8001cbe0:	30 1a       	mov	r10,1
8001cbe2:	33 0b       	mov	r11,48
8001cbe4:	30 1c       	mov	r12,1
8001cbe6:	f0 16 00 5c 	mcall	r6[368]

	// ask for the current navigation settings
	//Debug("Asking for engine setting\n");
	//dbg_print("Asking for engine setting\n");
	ubx_send_message_nav_settings(UBX_CLASS_CFG, MSG_CFG_NAV_SETTINGS, NULL, 0);
8001cbea:	30 09       	mov	r9,0
8001cbec:	30 0a       	mov	r10,0
8001cbee:	32 4b       	mov	r11,36
8001cbf0:	30 6c       	mov	r12,6
8001cbf2:	f0 16 00 fb 	mcall	r6[1004]
}
8001cbf6:	2f dd       	sub	sp,-12
8001cbf8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cbfc:	80 01       	ld.sh	r1,r0[0x0]
8001cbfe:	c9 ec       	rcall	8001cd3a <gps_update+0x13a>

8001cc00 <gps_update>:
************************************************************************************
The function that needs to be called to get the GPS information
************************************************************************************
*/
void gps_update(void)
{
8001cc00:	eb cd 40 c0 	pushm	r6-r7,lr
8001cc04:	1a 97       	mov	r7,sp
8001cc06:	20 2d       	sub	sp,8
8001cc08:	fe f6 02 08 	ld.w	r6,pc[520]
8001cc0c:	1e 26       	rsub	r6,pc
	bool result;
	uint32_t tnow;
	
	result = ubx_read();
8001cc0e:	f0 16 01 9d 	mcall	r6[1652]
8001cc12:	18 98       	mov	r8,r12
8001cc14:	ef 68 ff fb 	st.b	r7[-5],r8
	
	tnow = get_millis();
8001cc18:	f0 16 00 0f 	mcall	r6[60]
8001cc1c:	18 98       	mov	r8,r12
8001cc1e:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if (! result)
8001cc22:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8001cc26:	ec 18 00 01 	eorl	r8,0x1
8001cc2a:	5c 58       	castu.b	r8
8001cc2c:	c1 f0       	breq	8001cc6a <gps_update+0x6a>
	{
		if ((tnow - idleTimer) > idleTimeout)
8001cc2e:	ec f8 03 1c 	ld.w	r8,r6[796]
8001cc32:	70 08       	ld.w	r8,r8[0x0]
8001cc34:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cc38:	10 19       	sub	r9,r8
8001cc3a:	ec f8 04 20 	ld.w	r8,r6[1056]
8001cc3e:	70 08       	ld.w	r8,r8[0x0]
8001cc40:	10 39       	cp.w	r9,r8
8001cc42:	e0 88 00 e3 	brls	8001ce08 <gps_update+0x208>
		{
			/*dbg_print("gps read timeout ");
			dbg_print_num(tnow,10);
			dbg_print("\n");
			*/
			centralData->GPS_data.status = NO_GPS;
8001cc46:	ec f8 00 00 	ld.w	r8,r6[0]
8001cc4a:	70 09       	ld.w	r9,r8[0x0]
8001cc4c:	30 08       	mov	r8,0
8001cc4e:	f3 68 0b 54 	st.b	r9[2900],r8
			
			init_gps_ubx(engine_nav_setting);
8001cc52:	ec f8 01 d8 	ld.w	r8,r6[472]
8001cc56:	70 08       	ld.w	r8,r8[0x0]
8001cc58:	10 9c       	mov	r12,r8
8001cc5a:	f0 16 01 66 	mcall	r6[1432]
			idleTimer = tnow;
8001cc5e:	ec f8 03 1c 	ld.w	r8,r6[796]
8001cc62:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cc66:	91 09       	st.w	r8[0x0],r9
8001cc68:	cd 08       	rjmp	8001ce08 <gps_update+0x208>
		
// 		valid_read = true;
// 		new_data = true;

		// reset the idle timer
		idleTimer = tnow;
8001cc6a:	ec f8 03 1c 	ld.w	r8,r6[796]
8001cc6e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cc72:	91 09       	st.w	r8[0x0],r9
		
		centralData->GPS_data.timeLastMsg = tnow;
8001cc74:	ec f8 00 00 	ld.w	r8,r6[0]
8001cc78:	70 08       	ld.w	r8,r8[0x0]
8001cc7a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cc7e:	f1 49 0b 4c 	st.w	r8[2892],r9
		
		if(centralData->GPS_data.status == GPS_OK)
8001cc82:	ec f8 00 00 	ld.w	r8,r6[0]
8001cc86:	70 08       	ld.w	r8,r8[0x0]
8001cc88:	f1 39 0b 54 	ld.ub	r9,r8[2900]
8001cc8c:	30 28       	mov	r8,2
8001cc8e:	f0 09 18 00 	cp.b	r9,r8
8001cc92:	e0 81 00 9d 	brne	8001cdcc <gps_update+0x1cc>
		{
			// Check for horizontal accuracy
			if (centralData->GPS_data.horizontalAccuracy < UBX_POSITION_PRECISION)
8001cc96:	ec f8 00 00 	ld.w	r8,r6[0]
8001cc9a:	70 08       	ld.w	r8,r8[0x0]
8001cc9c:	f0 fa 0b 38 	ld.w	r10,r8[2872]
8001cca0:	30 18       	mov	r8,1
8001cca2:	fc 19 41 a0 	movh	r9,0x41a0
8001cca6:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001ccaa:	e0 8c 00 03 	brvs	8001ccb0 <gps_update+0xb0>
8001ccae:	c0 25       	brlt	8001ccb2 <gps_update+0xb2>
8001ccb0:	30 08       	mov	r8,0
8001ccb2:	5c 58       	castu.b	r8
8001ccb4:	c0 80       	breq	8001ccc4 <gps_update+0xc4>
			{
				centralData->GPS_data.horizontalStatus = 1;
8001ccb6:	ec f8 00 00 	ld.w	r8,r6[0]
8001ccba:	70 09       	ld.w	r9,r8[0x0]
8001ccbc:	30 18       	mov	r8,1
8001ccbe:	f3 68 0b 55 	st.b	r9[2901],r8
8001ccc2:	c0 78       	rjmp	8001ccd0 <gps_update+0xd0>
			}else{  
				centralData->GPS_data.horizontalStatus = 0;
8001ccc4:	ec f8 00 00 	ld.w	r8,r6[0]
8001ccc8:	70 09       	ld.w	r9,r8[0x0]
8001ccca:	30 08       	mov	r8,0
8001cccc:	f3 68 0b 55 	st.b	r9[2901],r8
			}
			// Check for vertical accuracy
			if (centralData->GPS_data.verticalAccuracy < UBX_ALTITUDE_PRECISION)
8001ccd0:	ec f8 00 00 	ld.w	r8,r6[0]
8001ccd4:	70 08       	ld.w	r8,r8[0x0]
8001ccd6:	f0 fa 0b 3c 	ld.w	r10,r8[2876]
8001ccda:	30 18       	mov	r8,1
8001ccdc:	fc 19 41 a0 	movh	r9,0x41a0
8001cce0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001cce4:	e0 8c 00 03 	brvs	8001ccea <gps_update+0xea>
8001cce8:	c0 25       	brlt	8001ccec <gps_update+0xec>
8001ccea:	30 08       	mov	r8,0
8001ccec:	5c 58       	castu.b	r8
8001ccee:	c0 80       	breq	8001ccfe <gps_update+0xfe>
			{
				centralData->GPS_data.altitudeStatus = 1;
8001ccf0:	ec f8 00 00 	ld.w	r8,r6[0]
8001ccf4:	70 09       	ld.w	r9,r8[0x0]
8001ccf6:	30 18       	mov	r8,1
8001ccf8:	f3 68 0b 56 	st.b	r9[2902],r8
8001ccfc:	c0 78       	rjmp	8001cd0a <gps_update+0x10a>
			}else{
				centralData->GPS_data.altitudeStatus = 0;
8001ccfe:	ec f8 00 00 	ld.w	r8,r6[0]
8001cd02:	70 09       	ld.w	r9,r8[0x0]
8001cd04:	30 08       	mov	r8,0
8001cd06:	f3 68 0b 56 	st.b	r9[2902],r8
			}
			// Check for speed accuracy
			if (centralData->GPS_data.speedAccuracy < UBX_SPEED_PRECISION)
8001cd0a:	ec f8 00 00 	ld.w	r8,r6[0]
8001cd0e:	70 08       	ld.w	r8,r8[0x0]
8001cd10:	f0 fa 0b 40 	ld.w	r10,r8[2880]
8001cd14:	30 18       	mov	r8,1
8001cd16:	fc 19 40 a0 	movh	r9,0x40a0
8001cd1a:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001cd1e:	e0 8c 00 03 	brvs	8001cd24 <gps_update+0x124>
8001cd22:	c0 25       	brlt	8001cd26 <gps_update+0x126>
8001cd24:	30 08       	mov	r8,0
8001cd26:	5c 58       	castu.b	r8
8001cd28:	c0 80       	breq	8001cd38 <gps_update+0x138>
			{
				centralData->GPS_data.speedStatus = 1;
8001cd2a:	ec f8 00 00 	ld.w	r8,r6[0]
8001cd2e:	70 09       	ld.w	r9,r8[0x0]
8001cd30:	30 18       	mov	r8,1
8001cd32:	f3 68 0b 57 	st.b	r9[2903],r8
8001cd36:	c0 78       	rjmp	8001cd44 <gps_update+0x144>
			}else{
				centralData->GPS_data.speedStatus = 0;
8001cd38:	ec f8 00 00 	ld.w	r8,r6[0]
8001cd3c:	70 09       	ld.w	r9,r8[0x0]
8001cd3e:	30 08       	mov	r8,0
8001cd40:	f3 68 0b 57 	st.b	r9[2903],r8
			}
			// Check for heading accuracy
			if (centralData->GPS_data.headingAccuracy < UBX_HEADING_PRECISION)
8001cd44:	ec f8 00 00 	ld.w	r8,r6[0]
8001cd48:	70 08       	ld.w	r8,r8[0x0]
8001cd4a:	f0 fa 0b 44 	ld.w	r10,r8[2884]
8001cd4e:	30 18       	mov	r8,1
8001cd50:	e0 69 96 80 	mov	r9,38528
8001cd54:	ea 19 4a 98 	orh	r9,0x4a98
8001cd58:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001cd5c:	e0 8c 00 03 	brvs	8001cd62 <gps_update+0x162>
8001cd60:	c0 25       	brlt	8001cd64 <gps_update+0x164>
8001cd62:	30 08       	mov	r8,0
8001cd64:	5c 58       	castu.b	r8
8001cd66:	c0 80       	breq	8001cd76 <gps_update+0x176>
			{
				centralData->GPS_data.courseStatus = 1;
8001cd68:	ec f8 00 00 	ld.w	r8,r6[0]
8001cd6c:	70 09       	ld.w	r9,r8[0x0]
8001cd6e:	30 18       	mov	r8,1
8001cd70:	f3 68 0b 58 	st.b	r9[2904],r8
8001cd74:	c0 78       	rjmp	8001cd82 <gps_update+0x182>
				}else{
				centralData->GPS_data.courseStatus = 0;
8001cd76:	ec f8 00 00 	ld.w	r8,r6[0]
8001cd7a:	70 09       	ld.w	r9,r8[0x0]
8001cd7c:	30 08       	mov	r8,0
8001cd7e:	f3 68 0b 58 	st.b	r9[2904],r8
			}
			
			centralData->GPS_data.accuracyStatus = centralData->GPS_data.horizontalStatus & centralData->GPS_data.altitudeStatus & centralData->GPS_data.speedStatus & centralData->GPS_data.courseStatus;
8001cd82:	ec f8 00 00 	ld.w	r8,r6[0]
8001cd86:	70 09       	ld.w	r9,r8[0x0]
8001cd88:	ec f8 00 00 	ld.w	r8,r6[0]
8001cd8c:	70 08       	ld.w	r8,r8[0x0]
8001cd8e:	f1 3a 0b 55 	ld.ub	r10,r8[2901]
8001cd92:	ec f8 00 00 	ld.w	r8,r6[0]
8001cd96:	70 08       	ld.w	r8,r8[0x0]
8001cd98:	f1 38 0b 56 	ld.ub	r8,r8[2902]
8001cd9c:	f5 e8 00 08 	and	r8,r10,r8
8001cda0:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8001cda4:	ec f8 00 00 	ld.w	r8,r6[0]
8001cda8:	70 08       	ld.w	r8,r8[0x0]
8001cdaa:	f1 38 0b 57 	ld.ub	r8,r8[2903]
8001cdae:	f5 e8 00 08 	and	r8,r10,r8
8001cdb2:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8001cdb6:	ec f8 00 00 	ld.w	r8,r6[0]
8001cdba:	70 08       	ld.w	r8,r8[0x0]
8001cdbc:	f1 38 0b 58 	ld.ub	r8,r8[2904]
8001cdc0:	f5 e8 00 08 	and	r8,r10,r8
8001cdc4:	5c 58       	castu.b	r8
8001cdc6:	f3 68 0b 59 	st.b	r9[2905],r8
8001cdca:	c1 f8       	rjmp	8001ce08 <gps_update+0x208>
// 				
// 				// no good way to get descent rate
// 				centralData->GPS_data.verticalSpeed = 0;
// 			}
		}else{
			centralData->GPS_data.horizontalStatus = 0;
8001cdcc:	ec f8 00 00 	ld.w	r8,r6[0]
8001cdd0:	70 09       	ld.w	r9,r8[0x0]
8001cdd2:	30 08       	mov	r8,0
8001cdd4:	f3 68 0b 55 	st.b	r9[2901],r8
			centralData->GPS_data.altitudeStatus = 0;
8001cdd8:	ec f8 00 00 	ld.w	r8,r6[0]
8001cddc:	70 09       	ld.w	r9,r8[0x0]
8001cdde:	30 08       	mov	r8,0
8001cde0:	f3 68 0b 56 	st.b	r9[2902],r8
			centralData->GPS_data.speedStatus = 0;
8001cde4:	ec f8 00 00 	ld.w	r8,r6[0]
8001cde8:	70 09       	ld.w	r9,r8[0x0]
8001cdea:	30 08       	mov	r8,0
8001cdec:	f3 68 0b 57 	st.b	r9[2903],r8
			centralData->GPS_data.courseStatus = 0;
8001cdf0:	ec f8 00 00 	ld.w	r8,r6[0]
8001cdf4:	70 09       	ld.w	r9,r8[0x0]
8001cdf6:	30 08       	mov	r8,0
8001cdf8:	f3 68 0b 58 	st.b	r9[2904],r8
			
			centralData->GPS_data.accuracyStatus = 0;
8001cdfc:	ec f8 00 00 	ld.w	r8,r6[0]
8001ce00:	70 09       	ld.w	r9,r8[0x0]
8001ce02:	30 08       	mov	r8,0
8001ce04:	f3 68 0b 59 	st.b	r9[2905],r8
		}
	}
}
8001ce08:	2f ed       	sub	sp,-8
8001ce0a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ce0e:	00 00       	add	r0,r0
8001ce10:	80 01       	ld.sh	r1,r0[0x0]
8001ce12:	ca 90       	breq	8001cd64 <gps_update+0x164>

8001ce14 <newValidGpsMsg>:
/*
* This function returns true if there is a new valid GPS message that arrived at time tnow
* false otherwise
*/
bool newValidGpsMsg(uint32_t *prevGpsMsgTime)
{
8001ce14:	eb cd 40 c0 	pushm	r6-r7,lr
8001ce18:	1a 97       	mov	r7,sp
8001ce1a:	20 1d       	sub	sp,4
8001ce1c:	49 36       	lddpc	r6,8001ce68 <newValidGpsMsg+0x54>
8001ce1e:	1e 26       	rsub	r6,pc
8001ce20:	ef 4c ff fc 	st.w	r7[-4],r12
	
	
	if((*prevGpsMsgTime != centralData->GPS_data.timeLastMsg)&&(centralData->GPS_data.status == GPS_OK)//&&(centralData->GPS_data.accuracyStatus == 1)
8001ce24:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ce28:	70 09       	ld.w	r9,r8[0x0]
8001ce2a:	ec f8 00 00 	ld.w	r8,r6[0]
8001ce2e:	70 08       	ld.w	r8,r8[0x0]
8001ce30:	f0 f8 0b 4c 	ld.w	r8,r8[2892]
8001ce34:	10 39       	cp.w	r9,r8
8001ce36:	c1 40       	breq	8001ce5e <newValidGpsMsg+0x4a>
8001ce38:	ec f8 00 00 	ld.w	r8,r6[0]
8001ce3c:	70 08       	ld.w	r8,r8[0x0]
8001ce3e:	f1 39 0b 54 	ld.ub	r9,r8[2900]
8001ce42:	30 28       	mov	r8,2
8001ce44:	f0 09 18 00 	cp.b	r9,r8
8001ce48:	c0 b1       	brne	8001ce5e <newValidGpsMsg+0x4a>
	)
	{
		*prevGpsMsgTime = centralData->GPS_data.timeLastMsg;
8001ce4a:	ec f8 00 00 	ld.w	r8,r6[0]
8001ce4e:	70 08       	ld.w	r8,r8[0x0]
8001ce50:	f0 f9 0b 4c 	ld.w	r9,r8[2892]
8001ce54:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ce58:	91 09       	st.w	r8[0x0],r9
		return true;
8001ce5a:	30 18       	mov	r8,1
8001ce5c:	c0 28       	rjmp	8001ce60 <newValidGpsMsg+0x4c>
	}else{
		return false;
8001ce5e:	30 08       	mov	r8,0
	}
	
	
}
8001ce60:	10 9c       	mov	r12,r8
8001ce62:	2f fd       	sub	sp,-4
8001ce64:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ce68:	80 01       	ld.sh	r1,r0[0x0]
8001ce6a:	cc a2       	brcc	8001cdfe <gps_update+0x1fe>

8001ce6c <ubx_GetPosllh>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid posllh message, or 0.
*/
ubx_nav_posllh * ubx_GetPosllh()
{
8001ce6c:	eb cd 40 c0 	pushm	r6-r7,lr
8001ce70:	1a 97       	mov	r7,sp
8001ce72:	48 86       	lddpc	r6,8001ce90 <ubx_GetPosllh+0x24>
8001ce74:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidPosllhMessage)
8001ce76:	ec f8 04 7c 	ld.w	r8,r6[1148]
8001ce7a:	90 08       	ld.sh	r8,r8[0x0]
8001ce7c:	58 08       	cp.w	r8,0
8001ce7e:	c0 50       	breq	8001ce88 <ubx_GetPosllh+0x1c>
	return ubx_lastPosllhMessage;
8001ce80:	ec f8 03 74 	ld.w	r8,r6[884]
8001ce84:	70 08       	ld.w	r8,r8[0x0]
8001ce86:	c0 28       	rjmp	8001ce8a <ubx_GetPosllh+0x1e>
	else
	return 0;
8001ce88:	30 08       	mov	r8,0
}
8001ce8a:	10 9c       	mov	r12,r8
8001ce8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ce90:	80 01       	ld.sh	r1,r0[0x0]
8001ce92:	cc f8       	rjmp	8001d030 <ToRad+0x34>

8001ce94 <ubx_GetStatus>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_nav_status * ubx_GetStatus()
{
8001ce94:	eb cd 40 c0 	pushm	r6-r7,lr
8001ce98:	1a 97       	mov	r7,sp
8001ce9a:	48 86       	lddpc	r6,8001ceb8 <ubx_GetStatus+0x24>
8001ce9c:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidStatusMessage)
8001ce9e:	ec f8 04 3c 	ld.w	r8,r6[1084]
8001cea2:	90 08       	ld.sh	r8,r8[0x0]
8001cea4:	58 08       	cp.w	r8,0
8001cea6:	c0 50       	breq	8001ceb0 <ubx_GetStatus+0x1c>
	return ubx_lastStatusMessage;
8001cea8:	ec f8 03 78 	ld.w	r8,r6[888]
8001ceac:	70 08       	ld.w	r8,r8[0x0]
8001ceae:	c0 28       	rjmp	8001ceb2 <ubx_GetStatus+0x1e>
	else
	return 0;
8001ceb0:	30 08       	mov	r8,0
}
8001ceb2:	10 9c       	mov	r12,r8
8001ceb4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ceb8:	80 01       	ld.sh	r1,r0[0x0]
8001ceba:	cd 20       	breq	8001ce5e <newValidGpsMsg+0x4a>

8001cebc <ubx_GetSolution>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid velned message, or 0.
*/
ubx_nav_solution * ubx_GetSolution()
{
8001cebc:	eb cd 40 c0 	pushm	r6-r7,lr
8001cec0:	1a 97       	mov	r7,sp
8001cec2:	48 86       	lddpc	r6,8001cee0 <ubx_GetSolution+0x24>
8001cec4:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidSolutionMessage)
8001cec6:	ec f8 04 94 	ld.w	r8,r6[1172]
8001ceca:	90 08       	ld.sh	r8,r8[0x0]
8001cecc:	58 08       	cp.w	r8,0
8001cece:	c0 50       	breq	8001ced8 <ubx_GetSolution+0x1c>
	return ubx_lastSolutionMessage;
8001ced0:	ec f8 03 e0 	ld.w	r8,r6[992]
8001ced4:	70 08       	ld.w	r8,r8[0x0]
8001ced6:	c0 28       	rjmp	8001ceda <ubx_GetSolution+0x1e>
	else
	return 0;
8001ced8:	30 08       	mov	r8,0
}
8001ceda:	10 9c       	mov	r12,r8
8001cedc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cee0:	80 01       	ld.sh	r1,r0[0x0]
8001cee2:	cd 48       	rjmp	8001d08a <interpolate+0x32>

8001cee4 <ubx_GetVelned>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid velned message, or 0.
*/
ubx_nav_velned * ubx_GetVelned()
{
8001cee4:	eb cd 40 c0 	pushm	r6-r7,lr
8001cee8:	1a 97       	mov	r7,sp
8001ceea:	48 86       	lddpc	r6,8001cf08 <ubx_GetVelned+0x24>
8001ceec:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidVelnedMessage)
8001ceee:	ec f8 04 a0 	ld.w	r8,r6[1184]
8001cef2:	90 08       	ld.sh	r8,r8[0x0]
8001cef4:	58 08       	cp.w	r8,0
8001cef6:	c0 50       	breq	8001cf00 <ubx_GetVelned+0x1c>
	return ubx_lastVelnedMessage;
8001cef8:	ec f8 04 90 	ld.w	r8,r6[1168]
8001cefc:	70 08       	ld.w	r8,r8[0x0]
8001cefe:	c0 28       	rjmp	8001cf02 <ubx_GetVelned+0x1e>
	else
	return 0;
8001cf00:	30 08       	mov	r8,0
}
8001cf02:	10 9c       	mov	r12,r8
8001cf04:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cf08:	80 01       	ld.sh	r1,r0[0x0]
8001cf0a:	cd 70       	breq	8001ceb8 <ubx_GetStatus+0x24>

8001cf0c <ubx_GetSVInfo>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_nav_SVInfo * ubx_GetSVInfo()
{
8001cf0c:	eb cd 40 c0 	pushm	r6-r7,lr
8001cf10:	1a 97       	mov	r7,sp
8001cf12:	48 86       	lddpc	r6,8001cf30 <ubx_GetSVInfo+0x24>
8001cf14:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidSVInfoMessage)
8001cf16:	ec f8 03 a8 	ld.w	r8,r6[936]
8001cf1a:	90 08       	ld.sh	r8,r8[0x0]
8001cf1c:	58 08       	cp.w	r8,0
8001cf1e:	c0 50       	breq	8001cf28 <ubx_GetSVInfo+0x1c>
	return ubx_lastSVInfoMessage;
8001cf20:	ec f8 04 74 	ld.w	r8,r6[1140]
8001cf24:	70 08       	ld.w	r8,r8[0x0]
8001cf26:	c0 28       	rjmp	8001cf2a <ubx_GetSVInfo+0x1e>
	else
	return 0;
8001cf28:	30 08       	mov	r8,0
}
8001cf2a:	10 9c       	mov	r12,r8
8001cf2c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cf30:	80 01       	ld.sh	r1,r0[0x0]
8001cf32:	cd 98       	rjmp	8001d0e4 <init_imu+0x8>

8001cf34 <ubx_GetNavSettings>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_cfg_nav_settings * ubx_GetNavSettings()
{
8001cf34:	eb cd 40 c0 	pushm	r6-r7,lr
8001cf38:	1a 97       	mov	r7,sp
8001cf3a:	48 86       	lddpc	r6,8001cf58 <ubx_GetNavSettings+0x24>
8001cf3c:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidNavSettingsMessage)
8001cf3e:	ec f8 04 58 	ld.w	r8,r6[1112]
8001cf42:	90 08       	ld.sh	r8,r8[0x0]
8001cf44:	58 08       	cp.w	r8,0
8001cf46:	c0 50       	breq	8001cf50 <ubx_GetNavSettings+0x1c>
	return ubx_lastNavSettingsMessage;
8001cf48:	ec f8 04 88 	ld.w	r8,r6[1160]
8001cf4c:	70 08       	ld.w	r8,r8[0x0]
8001cf4e:	c0 28       	rjmp	8001cf52 <ubx_GetNavSettings+0x1e>
	else
	return 0;
8001cf50:	30 08       	mov	r8,0
}
8001cf52:	10 9c       	mov	r12,r8
8001cf54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cf58:	80 01       	ld.sh	r1,r0[0x0]
8001cf5a:	cd c0       	breq	8001cf12 <ubx_GetSVInfo+0x6>

8001cf5c <ubx_GetMsgRate>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_cfg_msg_rate * ubx_GetMsgRate()
{
8001cf5c:	eb cd 40 c0 	pushm	r6-r7,lr
8001cf60:	1a 97       	mov	r7,sp
8001cf62:	48 86       	lddpc	r6,8001cf80 <ubx_GetMsgRate+0x24>
8001cf64:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidCFGSetGetRateMessage)
8001cf66:	ec f8 04 b8 	ld.w	r8,r6[1208]
8001cf6a:	90 08       	ld.sh	r8,r8[0x0]
8001cf6c:	58 08       	cp.w	r8,0
8001cf6e:	c0 50       	breq	8001cf78 <ubx_GetMsgRate+0x1c>
	return ubx_lastCFGSetGetRateMessage;
8001cf70:	ec f8 03 f0 	ld.w	r8,r6[1008]
8001cf74:	70 08       	ld.w	r8,r8[0x0]
8001cf76:	c0 28       	rjmp	8001cf7a <ubx_GetMsgRate+0x1e>
	else
	return 0;
8001cf78:	30 08       	mov	r8,0
}
8001cf7a:	10 9c       	mov	r12,r8
8001cf7c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cf80:	80 01       	ld.sh	r1,r0[0x0]
8001cf82:	cd e8       	rjmp	8001d13e <init_imu+0x62>

8001cf84 <ubx_GetMonRXR>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_mon_rxr_struct * ubx_GetMonRXR()
{
8001cf84:	eb cd 40 c0 	pushm	r6-r7,lr
8001cf88:	1a 97       	mov	r7,sp
8001cf8a:	48 86       	lddpc	r6,8001cfa8 <ubx_GetMonRXR+0x24>
8001cf8c:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidMONRXRMessage)
8001cf8e:	ec f8 04 9c 	ld.w	r8,r6[1180]
8001cf92:	90 08       	ld.sh	r8,r8[0x0]
8001cf94:	58 08       	cp.w	r8,0
8001cf96:	c0 50       	breq	8001cfa0 <ubx_GetMonRXR+0x1c>
	return ubx_lastMONRXRMessage;
8001cf98:	ec f8 03 d8 	ld.w	r8,r6[984]
8001cf9c:	70 08       	ld.w	r8,r8[0x0]
8001cf9e:	c0 28       	rjmp	8001cfa2 <ubx_GetMonRXR+0x1e>
	else
	return 0;
8001cfa0:	30 08       	mov	r8,0
}
8001cfa2:	10 9c       	mov	r12,r8
8001cfa4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cfa8:	80 01       	ld.sh	r1,r0[0x0]
8001cfaa:	ce 10       	breq	8001cf6c <ubx_GetMsgRate+0x10>

8001cfac <ubx_GetTimTP>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_tim_tp * ubx_GetTimTP()
{
8001cfac:	eb cd 40 c0 	pushm	r6-r7,lr
8001cfb0:	1a 97       	mov	r7,sp
8001cfb2:	48 86       	lddpc	r6,8001cfd0 <ubx_GetTimTP+0x24>
8001cfb4:	1e 26       	rsub	r6,pc
	if(ubx_numberOfValidTimTPMessage)
8001cfb6:	ec f8 04 5c 	ld.w	r8,r6[1116]
8001cfba:	90 08       	ld.sh	r8,r8[0x0]
8001cfbc:	58 08       	cp.w	r8,0
8001cfbe:	c0 50       	breq	8001cfc8 <ubx_GetTimTP+0x1c>
	return ubx_lastTimTPMessage;
8001cfc0:	ec f8 04 18 	ld.w	r8,r6[1048]
8001cfc4:	70 08       	ld.w	r8,r8[0x0]
8001cfc6:	c0 28       	rjmp	8001cfca <ubx_GetTimTP+0x1e>
	else
	return 0;
8001cfc8:	30 08       	mov	r8,0
}
8001cfca:	10 9c       	mov	r12,r8
8001cfcc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cfd0:	80 01       	ld.sh	r1,r0[0x0]
8001cfd2:	ce 38       	rjmp	8001d198 <init_imu+0xbc>

8001cfd4 <ubx_GetTimVRFY>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_tim_vrfy * ubx_GetTimVRFY()
{
8001cfd4:	eb cd 40 c0 	pushm	r6-r7,lr
8001cfd8:	1a 97       	mov	r7,sp
8001cfda:	48 86       	lddpc	r6,8001cff8 <ubx_GetTimVRFY+0x24>
8001cfdc:	1e 26       	rsub	r6,pc
	if(ubx_numberOfValidTimVRFYMessage)
8001cfde:	ec f8 04 64 	ld.w	r8,r6[1124]
8001cfe2:	90 08       	ld.sh	r8,r8[0x0]
8001cfe4:	58 08       	cp.w	r8,0
8001cfe6:	c0 50       	breq	8001cff0 <ubx_GetTimVRFY+0x1c>
	return ubx_lastTimVRFYMessage;
8001cfe8:	ec f8 04 30 	ld.w	r8,r6[1072]
8001cfec:	70 08       	ld.w	r8,r8[0x0]
8001cfee:	c0 28       	rjmp	8001cff2 <ubx_GetTimVRFY+0x1e>
	else
	return 0;
8001cff0:	30 08       	mov	r8,0
}
8001cff2:	10 9c       	mov	r12,r8
8001cff4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cff8:	80 01       	ld.sh	r1,r0[0x0]
8001cffa:	ce 60       	breq	8001cfc6 <ubx_GetTimTP+0x1a>

8001cffc <ToRad>:

float ToRad(float numdeg)
{
8001cffc:	eb cd 40 c0 	pushm	r6-r7,lr
8001d000:	1a 97       	mov	r7,sp
8001d002:	20 1d       	sub	sp,4
8001d004:	49 46       	lddpc	r6,8001d054 <ToRad+0x58>
8001d006:	1e 26       	rsub	r6,pc
8001d008:	ef 4c ff fc 	st.w	r7[-4],r12
	return numdeg * DEG2RAD;
8001d00c:	ee fc ff fc 	ld.w	r12,r7[-4]
8001d010:	f0 16 00 02 	mcall	r6[8]
8001d014:	e0 68 2d 18 	mov	r8,11544
8001d018:	ea 18 54 44 	orh	r8,0x5444
8001d01c:	e0 69 21 fb 	mov	r9,8699
8001d020:	ea 19 40 09 	orh	r9,0x4009
8001d024:	f0 16 00 03 	mcall	r6[12]
8001d028:	14 98       	mov	r8,r10
8001d02a:	16 99       	mov	r9,r11
8001d02c:	10 9a       	mov	r10,r8
8001d02e:	12 9b       	mov	r11,r9
8001d030:	30 08       	mov	r8,0
8001d032:	e0 69 80 00 	mov	r9,32768
8001d036:	ea 19 40 66 	orh	r9,0x4066
8001d03a:	f0 16 00 0c 	mcall	r6[48]
8001d03e:	14 98       	mov	r8,r10
8001d040:	16 99       	mov	r9,r11
8001d042:	10 9a       	mov	r10,r8
8001d044:	12 9b       	mov	r11,r9
8001d046:	f0 16 00 09 	mcall	r6[36]
8001d04a:	18 98       	mov	r8,r12
8001d04c:	10 9c       	mov	r12,r8
8001d04e:	2f fd       	sub	sp,-4
8001d050:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d054:	80 01       	ld.sh	r1,r0[0x0]
8001d056:	ce 8a       	rjmp	8001ce26 <newValidGpsMsg+0x12>

8001d058 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8001d058:	eb cd 40 c0 	pushm	r6-r7,lr
8001d05c:	1a 97       	mov	r7,sp
8001d05e:	20 6d       	sub	sp,24
8001d060:	49 e6       	lddpc	r6,8001d0d8 <interpolate+0x80>
8001d062:	1e 26       	rsub	r6,pc
8001d064:	ef 4c ff f8 	st.w	r7[-8],r12
8001d068:	ef 4b ff f4 	st.w	r7[-12],r11
8001d06c:	ef 4a ff f0 	st.w	r7[-16],r10
8001d070:	ef 49 ff ec 	st.w	r7[-20],r9
8001d074:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001d078:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001d07c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001d080:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001d084:	c0 41       	brne	8001d08c <interpolate+0x34>
	{
		return y1;
8001d086:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d08a:	c2 38       	rjmp	8001d0d0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8001d08c:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001d090:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d094:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001d098:	ee fa ff f8 	ld.w	r10,r7[-8]
8001d09c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d0a0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001d0a4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d0a8:	ee fa ff f0 	ld.w	r10,r7[-16]
8001d0ac:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001d0b0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001d0b4:	12 9b       	mov	r11,r9
8001d0b6:	10 9c       	mov	r12,r8
8001d0b8:	f0 16 00 08 	mcall	r6[32]
8001d0bc:	18 98       	mov	r8,r12
8001d0be:	10 99       	mov	r9,r8
8001d0c0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d0c4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001d0c8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8001d0cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8001d0d0:	10 9c       	mov	r12,r8
8001d0d2:	2f ad       	sub	sp,-24
8001d0d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d0d8:	80 01       	ld.sh	r1,r0[0x0]
8001d0da:	ce e6       	brmi	8001d0b6 <interpolate+0x5e>

8001d0dc <init_imu>:
#include "time_keeper.h"
#include "print_util.h"
#include "position_estimation.h"

int ic;
void init_imu (Imu_Data_t *imu1) {
8001d0dc:	eb cd 40 c0 	pushm	r6-r7,lr
8001d0e0:	1a 97       	mov	r7,sp
8001d0e2:	20 1d       	sub	sp,4
8001d0e4:	4d 36       	lddpc	r6,8001d230 <init_imu+0x154>
8001d0e6:	1e 26       	rsub	r6,pc
8001d0e8:	ef 4c ff fc 	st.w	r7[-4],r12
	
	
	init_itg3200_slow();	
8001d0ec:	f0 16 02 16 	mcall	r6[2136]
	init_adxl345_slow();
8001d0f0:	f0 16 01 70 	mcall	r6[1472]
	//init_lsm330();
	
	init_hmc5883_slow();
8001d0f4:	f0 16 01 ee 	mcall	r6[1976]

	//calibrate_Gyros(imu1);
	imu1->raw_scale[0] =  RAW_GYRO_X_SCALE;
8001d0f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d0fc:	e0 69 e0 00 	mov	r9,57344
8001d100:	ea 19 46 44 	orh	r9,0x4644
8001d104:	f1 49 01 14 	st.w	r8[276],r9
	imu1->raw_scale[1] =  RAW_GYRO_Y_SCALE;
8001d108:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d10c:	e0 69 e0 00 	mov	r9,57344
8001d110:	ea 19 c6 44 	orh	r9,0xc644
8001d114:	f1 49 01 18 	st.w	r8[280],r9
	imu1->raw_scale[2] =  RAW_GYRO_Z_SCALE;
8001d118:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d11c:	e0 69 e0 00 	mov	r9,57344
8001d120:	ea 19 46 44 	orh	r9,0x4644
8001d124:	f1 49 01 1c 	st.w	r8[284],r9
	imu1->raw_scale[0+ACC_OFFSET] =  RAW_ACC_X_SCALE;
8001d128:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d12c:	e0 69 75 6a 	mov	r9,30058
8001d130:	ea 19 43 81 	orh	r9,0x4381
8001d134:	f1 49 01 20 	st.w	r8[288],r9
	imu1->raw_scale[1+ACC_OFFSET] =  RAW_ACC_Y_SCALE;
8001d138:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d13c:	e0 69 7e 1e 	mov	r9,32286
8001d140:	ea 19 43 81 	orh	r9,0x4381
8001d144:	f1 49 01 24 	st.w	r8[292],r9
	imu1->raw_scale[2+ACC_OFFSET] =  RAW_ACC_Z_SCALE;
8001d148:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d14c:	e0 69 0a 9c 	mov	r9,2716
8001d150:	ea 19 43 81 	orh	r9,0x4381
8001d154:	f1 49 01 28 	st.w	r8[296],r9
	imu1->raw_scale[0+COMPASS_OFFSET] =  RAW_MAG_X_SCALE;
8001d158:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d15c:	e0 69 91 bc 	mov	r9,37308
8001d160:	ea 19 44 04 	orh	r9,0x4404
8001d164:	f1 49 01 2c 	st.w	r8[300],r9
	imu1->raw_scale[1+COMPASS_OFFSET] =  RAW_MAG_Y_SCALE;
8001d168:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d16c:	e0 69 52 c7 	mov	r9,21191
8001d170:	ea 19 44 03 	orh	r9,0x4403
8001d174:	f1 49 01 30 	st.w	r8[304],r9
	imu1->raw_scale[2+COMPASS_OFFSET] =  RAW_MAG_Z_SCALE;
8001d178:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d17c:	e0 69 39 4b 	mov	r9,14667
8001d180:	ea 19 43 f9 	orh	r9,0x43f9
8001d184:	f1 49 01 34 	st.w	r8[308],r9
	
	imu1->raw_bias[0+GYRO_OFFSET]= 0.0;
8001d188:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d18c:	30 09       	mov	r9,0
8001d18e:	f1 49 00 f0 	st.w	r8[240],r9
	imu1->raw_bias[1+GYRO_OFFSET]= 0.0;
8001d192:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d196:	30 09       	mov	r9,0
8001d198:	f1 49 00 f4 	st.w	r8[244],r9
	imu1->raw_bias[2+GYRO_OFFSET]= 0.0;
8001d19c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d1a0:	30 09       	mov	r9,0
8001d1a2:	f1 49 00 f8 	st.w	r8[248],r9
	//myquad
	// acceleration biais
	imu1->raw_bias[0+ACC_OFFSET]= ACC_BIAIS_X;
8001d1a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d1aa:	fc 19 41 90 	movh	r9,0x4190
8001d1ae:	f1 49 00 fc 	st.w	r8[252],r9
	imu1->raw_bias[1+ACC_OFFSET]= ACC_BIAIS_Y;
8001d1b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d1b6:	fc 19 41 10 	movh	r9,0x4110
8001d1ba:	f1 49 01 00 	st.w	r8[256],r9
	imu1->raw_bias[2+ACC_OFFSET]= ACC_BIAIS_Z;
8001d1be:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d1c2:	fc 19 c1 80 	movh	r9,0xc180
8001d1c6:	f1 49 01 04 	st.w	r8[260],r9
	
	// magneto bias
	imu1->raw_bias[0+COMPASS_OFFSET]= MAG_BIAIS_X;
8001d1ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d1ce:	e0 69 c2 19 	mov	r9,49689
8001d1d2:	ea 19 43 03 	orh	r9,0x4303
8001d1d6:	f1 49 01 08 	st.w	r8[264],r9
	imu1->raw_bias[1+COMPASS_OFFSET]= MAG_BIAIS_Y;
8001d1da:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d1de:	e0 69 09 d5 	mov	r9,2517
8001d1e2:	ea 19 c1 d1 	orh	r9,0xc1d1
8001d1e6:	f1 49 01 0c 	st.w	r8[268],r9
	imu1->raw_bias[2+COMPASS_OFFSET]= MAG_BIAIS_Z;
8001d1ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d1ee:	e0 69 a8 8d 	mov	r9,43149
8001d1f2:	ea 19 42 74 	orh	r9,0x4274
8001d1f6:	f1 49 01 10 	st.w	r8[272],r9
	
	
	imu_last_update_init = false;
8001d1fa:	ec f9 02 ec 	ld.w	r9,r6[748]
8001d1fe:	30 08       	mov	r8,0
8001d200:	b2 88       	st.b	r9[0x0],r8
	
	qfInit(&imu1->attitude, imu1->raw_scale, imu1->raw_bias);
8001d202:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d206:	f0 ca ff 10 	sub	r10,r8,-240
8001d20a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d20e:	f0 c9 fe ec 	sub	r9,r8,-276
8001d212:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d216:	12 9b       	mov	r11,r9
8001d218:	10 9c       	mov	r12,r8
8001d21a:	f0 16 01 e8 	mcall	r6[1952]
	imu1->attitude.calibration_level=OFF;
8001d21e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d222:	30 08       	mov	r8,0
8001d224:	f3 68 00 b8 	st.b	r9[184],r8
}
8001d228:	2f fd       	sub	sp,-4
8001d22a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d22e:	00 00       	add	r0,r0
8001d230:	80 01       	ld.sh	r1,r0[0x0]
8001d232:	cf 6a       	rjmp	8001d01e <ToRad+0x22>

8001d234 <imu_get_raw_data>:


void imu_get_raw_data(Imu_Data_t *imu1) {
8001d234:	eb cd 40 c0 	pushm	r6-r7,lr
8001d238:	1a 97       	mov	r7,sp
8001d23a:	20 5d       	sub	sp,20
8001d23c:	4b 66       	lddpc	r6,8001d314 <imu_get_raw_data+0xe0>
8001d23e:	1e 26       	rsub	r6,pc
8001d240:	ef 4c ff ec 	st.w	r7[-20],r12
	int i=0;
8001d244:	30 08       	mov	r8,0
8001d246:	ef 48 ff f0 	st.w	r7[-16],r8
	
	gyro_data* gyros=get_gyro_data_slow();
8001d24a:	f0 16 01 d4 	mcall	r6[1872]
8001d24e:	18 98       	mov	r8,r12
8001d250:	ef 48 ff f4 	st.w	r7[-12],r8
	acc_data* accs=get_acc_data_slow();
8001d254:	f0 16 01 c0 	mcall	r6[1792]
8001d258:	18 98       	mov	r8,r12
8001d25a:	ef 48 ff f8 	st.w	r7[-8],r8
	
//	lsm_gyro_data_t* gyros=lsm330_get_gyro_data();
//	lsm_acc_data_t* accs=lsm330_get_acc_data();
	compass_data* compass=get_compass_data_slow();
8001d25e:	f0 16 01 39 	mcall	r6[1252]
8001d262:	18 98       	mov	r8,r12
8001d264:	ef 48 ff fc 	st.w	r7[-4],r8


	imu1->raw_channels[GYRO_OFFSET+IMU_X]=(float)gyros->axes[RAW_GYRO_X];
8001d268:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d26c:	90 28       	ld.sh	r8,r8[0x4]
8001d26e:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001d272:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d276:	f1 49 00 cc 	st.w	r8[204],r9
	imu1->raw_channels[GYRO_OFFSET+IMU_Y]=(float)gyros->axes[RAW_GYRO_Y];
8001d27a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d27e:	90 18       	ld.sh	r8,r8[0x2]
8001d280:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001d284:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d288:	f1 49 00 d0 	st.w	r8[208],r9
	imu1->raw_channels[GYRO_OFFSET+IMU_Z]=(float)gyros->axes[RAW_GYRO_Z];
8001d28c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d290:	90 38       	ld.sh	r8,r8[0x6]
8001d292:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001d296:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d29a:	f1 49 00 d4 	st.w	r8[212],r9

	imu1->raw_channels[ACC_OFFSET+IMU_X]=(float)accs->axes[RAW_ACC_X];
8001d29e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d2a2:	90 38       	ld.sh	r8,r8[0x6]
8001d2a4:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001d2a8:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d2ac:	f1 49 00 d8 	st.w	r8[216],r9
	imu1->raw_channels[ACC_OFFSET+IMU_Y]=(float)accs->axes[RAW_ACC_Y];
8001d2b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d2b4:	90 48       	ld.sh	r8,r8[0x8]
8001d2b6:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001d2ba:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d2be:	f1 49 00 dc 	st.w	r8[220],r9
	imu1->raw_channels[ACC_OFFSET+IMU_Z]=(float)accs->axes[RAW_ACC_Z];
8001d2c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d2c6:	90 58       	ld.sh	r8,r8[0xa]
8001d2c8:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001d2cc:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d2d0:	f1 49 00 e0 	st.w	r8[224],r9

	imu1->raw_channels[COMPASS_OFFSET+IMU_X]=(float)-compass->axes[RAW_COMPASS_X];
8001d2d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d2d8:	90 58       	ld.sh	r8,r8[0xa]
8001d2da:	5c 38       	neg	r8
8001d2dc:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001d2e0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d2e4:	f1 49 00 e4 	st.w	r8[228],r9
	imu1->raw_channels[COMPASS_OFFSET+IMU_Y]=(float)-compass->axes[RAW_COMPASS_Y];
8001d2e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d2ec:	90 38       	ld.sh	r8,r8[0x6]
8001d2ee:	5c 38       	neg	r8
8001d2f0:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001d2f4:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d2f8:	f1 49 00 e8 	st.w	r8[232],r9
	imu1->raw_channels[COMPASS_OFFSET+IMU_Z]=(float)compass->axes[RAW_COMPASS_Z];
8001d2fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d300:	90 48       	ld.sh	r8,r8[0x8]
8001d302:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001d306:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d30a:	f1 49 00 ec 	st.w	r8[236],r9
	
}
8001d30e:	2f bd       	sub	sp,-20
8001d310:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d314:	80 01       	ld.sh	r1,r0[0x0]
8001d316:	d0 c2       	popm	r8-r10

8001d318 <calibrate_Gyros>:

void calibrate_Gyros(Imu_Data_t *imu1) {
8001d318:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001d31c:	1a 97       	mov	r7,sp
8001d31e:	20 3d       	sub	sp,12
8001d320:	4e 86       	lddpc	r6,8001d4c0 <calibrate_Gyros+0x1a8>
8001d322:	1e 26       	rsub	r6,pc
8001d324:	ef 4c ff f4 	st.w	r7[-12],r12
	int i,j;
	imu_get_raw_data(imu1);
8001d328:	ee fc ff f4 	ld.w	r12,r7[-12]
8001d32c:	f0 16 00 95 	mcall	r6[596]
	for (j=0; j<3; j++) {
8001d330:	30 08       	mov	r8,0
8001d332:	ef 48 ff fc 	st.w	r7[-4],r8
8001d336:	c1 48       	rjmp	8001d35e <calibrate_Gyros+0x46>
		imu1->raw_bias[j]=(float)imu1->raw_channels[j];
8001d338:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d33c:	ee fa ff fc 	ld.w	r10,r7[-4]
8001d340:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d344:	2c da       	sub	r10,-51
8001d346:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8001d34a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d34e:	2c 49       	sub	r9,-60
8001d350:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}

void calibrate_Gyros(Imu_Data_t *imu1) {
	int i,j;
	imu_get_raw_data(imu1);
	for (j=0; j<3; j++) {
8001d354:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d358:	2f f8       	sub	r8,-1
8001d35a:	ef 48 ff fc 	st.w	r7[-4],r8
8001d35e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d362:	58 28       	cp.w	r8,2
8001d364:	fe 9a ff ea 	brle	8001d338 <calibrate_Gyros+0x20>
		imu1->raw_bias[j]=(float)imu1->raw_channels[j];
	}
	
	for (i=0; i<100; i++) {
8001d368:	30 08       	mov	r8,0
8001d36a:	ef 48 ff f8 	st.w	r7[-8],r8
8001d36e:	c9 f8       	rjmp	8001d4ac <calibrate_Gyros+0x194>
		imu_get_raw_data(imu1);
8001d370:	ee fc ff f4 	ld.w	r12,r7[-12]
8001d374:	f0 16 00 95 	mcall	r6[596]

		//imu1->raw_bias[0+ACC_OFFSET]  = (0.9*imu1->raw_bias[0+ACC_OFFSET]+0.1*(float)imu1->raw_channels[0+ACC_OFFSET]);
		//imu1->raw_bias[1+ACC_OFFSET]  = (0.9*imu1->raw_bias[1+ACC_OFFSET]+0.1*(float)imu1->raw_channels[1+ACC_OFFSET]);
		//imu1->raw_bias[2+ACC_OFFSET]  = (0.9*imu1->raw_bias[2+ACC_OFFSET]+0.1*((float)imu1->raw_channels[2+ACC_OFFSET]-imu1->raw_scale[2+ACC_OFFSET]));
		for (j=0; j<3; j++) {
8001d378:	30 08       	mov	r8,0
8001d37a:	ef 48 ff fc 	st.w	r7[-4],r8
8001d37e:	c8 a8       	rjmp	8001d492 <calibrate_Gyros+0x17a>
			imu1->raw_bias[j]=(0.9*imu1->raw_bias[j]+0.1*(float)imu1->raw_channels[j]);
8001d380:	ee f5 ff fc 	ld.w	r5,r7[-4]
8001d384:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d388:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d38c:	2c 49       	sub	r9,-60
8001d38e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001d392:	10 9c       	mov	r12,r8
8001d394:	f0 16 00 02 	mcall	r6[8]
8001d398:	e0 68 cc cd 	mov	r8,52429
8001d39c:	ea 18 cc cc 	orh	r8,0xcccc
8001d3a0:	e0 69 cc cc 	mov	r9,52428
8001d3a4:	ea 19 3f ec 	orh	r9,0x3fec
8001d3a8:	f0 16 00 03 	mcall	r6[12]
8001d3ac:	14 98       	mov	r8,r10
8001d3ae:	16 99       	mov	r9,r11
8001d3b0:	10 92       	mov	r2,r8
8001d3b2:	12 93       	mov	r3,r9
8001d3b4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d3b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d3bc:	2c d9       	sub	r9,-51
8001d3be:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001d3c2:	10 9c       	mov	r12,r8
8001d3c4:	f0 16 00 02 	mcall	r6[8]
8001d3c8:	e0 68 99 9a 	mov	r8,39322
8001d3cc:	ea 18 99 99 	orh	r8,0x9999
8001d3d0:	e0 69 99 99 	mov	r9,39321
8001d3d4:	ea 19 3f b9 	orh	r9,0x3fb9
8001d3d8:	f0 16 00 03 	mcall	r6[12]
8001d3dc:	14 98       	mov	r8,r10
8001d3de:	16 99       	mov	r9,r11
8001d3e0:	04 9a       	mov	r10,r2
8001d3e2:	06 9b       	mov	r11,r3
8001d3e4:	f0 16 00 05 	mcall	r6[20]
8001d3e8:	14 98       	mov	r8,r10
8001d3ea:	16 99       	mov	r9,r11
8001d3ec:	10 9a       	mov	r10,r8
8001d3ee:	12 9b       	mov	r11,r9
8001d3f0:	f0 16 00 09 	mcall	r6[36]
8001d3f4:	18 9a       	mov	r10,r12
8001d3f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d3fa:	ea c9 ff c4 	sub	r9,r5,-60
8001d3fe:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			imu1->attitude.raw_mag_mean[j] = (1.0-MAG_LPF)*imu1->attitude.raw_mag_mean[j]+MAG_LPF*((float)imu1->raw_channels[j+COMPASS_OFFSET]);
8001d402:	ee f5 ff fc 	ld.w	r5,r7[-4]
8001d406:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d40a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d40e:	2d 59       	sub	r9,-43
8001d410:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001d414:	10 9c       	mov	r12,r8
8001d416:	f0 16 00 02 	mcall	r6[8]
8001d41a:	e0 68 cc cd 	mov	r8,52429
8001d41e:	ea 18 cc cc 	orh	r8,0xcccc
8001d422:	e0 69 cc cc 	mov	r9,52428
8001d426:	ea 19 3f ec 	orh	r9,0x3fec
8001d42a:	f0 16 00 03 	mcall	r6[12]
8001d42e:	14 98       	mov	r8,r10
8001d430:	16 99       	mov	r9,r11
8001d432:	10 92       	mov	r2,r8
8001d434:	12 93       	mov	r3,r9
8001d436:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d43a:	f0 c9 ff fa 	sub	r9,r8,-6
8001d43e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d442:	2c d9       	sub	r9,-51
8001d444:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001d448:	10 9c       	mov	r12,r8
8001d44a:	f0 16 00 02 	mcall	r6[8]
8001d44e:	e0 68 99 9a 	mov	r8,39322
8001d452:	ea 18 99 99 	orh	r8,0x9999
8001d456:	e0 69 99 99 	mov	r9,39321
8001d45a:	ea 19 3f b9 	orh	r9,0x3fb9
8001d45e:	f0 16 00 03 	mcall	r6[12]
8001d462:	14 98       	mov	r8,r10
8001d464:	16 99       	mov	r9,r11
8001d466:	04 9a       	mov	r10,r2
8001d468:	06 9b       	mov	r11,r3
8001d46a:	f0 16 00 05 	mcall	r6[20]
8001d46e:	14 98       	mov	r8,r10
8001d470:	16 99       	mov	r9,r11
8001d472:	10 9a       	mov	r10,r8
8001d474:	12 9b       	mov	r11,r9
8001d476:	f0 16 00 09 	mcall	r6[36]
8001d47a:	18 9a       	mov	r10,r12
8001d47c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d480:	ea c9 ff d5 	sub	r9,r5,-43
8001d484:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		imu_get_raw_data(imu1);

		//imu1->raw_bias[0+ACC_OFFSET]  = (0.9*imu1->raw_bias[0+ACC_OFFSET]+0.1*(float)imu1->raw_channels[0+ACC_OFFSET]);
		//imu1->raw_bias[1+ACC_OFFSET]  = (0.9*imu1->raw_bias[1+ACC_OFFSET]+0.1*(float)imu1->raw_channels[1+ACC_OFFSET]);
		//imu1->raw_bias[2+ACC_OFFSET]  = (0.9*imu1->raw_bias[2+ACC_OFFSET]+0.1*((float)imu1->raw_channels[2+ACC_OFFSET]-imu1->raw_scale[2+ACC_OFFSET]));
		for (j=0; j<3; j++) {
8001d488:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d48c:	2f f8       	sub	r8,-1
8001d48e:	ef 48 ff fc 	st.w	r7[-4],r8
8001d492:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d496:	58 28       	cp.w	r8,2
8001d498:	fe 9a ff 74 	brle	8001d380 <calibrate_Gyros+0x68>
			imu1->raw_bias[j]=(0.9*imu1->raw_bias[j]+0.1*(float)imu1->raw_channels[j]);
			imu1->attitude.raw_mag_mean[j] = (1.0-MAG_LPF)*imu1->attitude.raw_mag_mean[j]+MAG_LPF*((float)imu1->raw_channels[j+COMPASS_OFFSET]);
		}
		delay_ms(4);
8001d49c:	30 4c       	mov	r12,4
8001d49e:	f0 16 01 02 	mcall	r6[1032]
	imu_get_raw_data(imu1);
	for (j=0; j<3; j++) {
		imu1->raw_bias[j]=(float)imu1->raw_channels[j];
	}
	
	for (i=0; i<100; i++) {
8001d4a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d4a6:	2f f8       	sub	r8,-1
8001d4a8:	ef 48 ff f8 	st.w	r7[-8],r8
8001d4ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d4b0:	e0 48 00 63 	cp.w	r8,99
8001d4b4:	fe 9a ff 5e 	brle	8001d370 <calibrate_Gyros+0x58>
		}
		delay_ms(4);
	}


}
8001d4b8:	2f dd       	sub	sp,-12
8001d4ba:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001d4be:	00 00       	add	r0,r0
8001d4c0:	80 01       	ld.sh	r1,r0[0x0]
8001d4c2:	d1 a6       	*unknown*

8001d4c4 <imu_update>:

void imu_update(Imu_Data_t *imu1, position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps){
8001d4c4:	eb cd 40 c0 	pushm	r6-r7,lr
8001d4c8:	1a 97       	mov	r7,sp
8001d4ca:	20 5d       	sub	sp,20
8001d4cc:	4b 46       	lddpc	r6,8001d59c <imu_update+0xd8>
8001d4ce:	1e 26       	rsub	r6,pc
8001d4d0:	ef 4c ff f8 	st.w	r7[-8],r12
8001d4d4:	ef 4b ff f4 	st.w	r7[-12],r11
8001d4d8:	ef 4a ff f0 	st.w	r7[-16],r10
8001d4dc:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t t=get_time_ticks();
8001d4e0:	f0 16 00 4d 	mcall	r6[308]
8001d4e4:	18 98       	mov	r8,r12
8001d4e6:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if (!imu_last_update_init)
8001d4ea:	ec f8 02 ec 	ld.w	r8,r6[748]
8001d4ee:	11 88       	ld.ub	r8,r8[0x0]
8001d4f0:	ec 18 00 01 	eorl	r8,0x1
8001d4f4:	5c 58       	castu.b	r8
8001d4f6:	c0 c0       	breq	8001d50e <imu_update+0x4a>
	{
		imu1->last_update = t;
8001d4f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d4fc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d500:	f1 49 01 38 	st.w	r8[312],r9
		imu_last_update_init = true;
8001d504:	ec f9 02 ec 	ld.w	r9,r6[748]
8001d508:	30 18       	mov	r8,1
8001d50a:	b2 88       	st.b	r9[0x0],r8
8001d50c:	c4 48       	rjmp	8001d594 <imu_update+0xd0>
	}else{
		imu1->dt=ticks_to_seconds(t - imu1->last_update);
8001d50e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d512:	f0 f8 01 38 	ld.w	r8,r8[312]
8001d516:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d51a:	f2 08 01 08 	sub	r8,r9,r8
8001d51e:	10 9c       	mov	r12,r8
8001d520:	f0 16 00 b9 	mcall	r6[740]
8001d524:	18 99       	mov	r9,r12
8001d526:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d52a:	f1 49 01 40 	st.w	r8[320],r9
		imu1->last_update=t;
8001d52e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d532:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d536:	f1 49 01 38 	st.w	r8[312],r9
		qfilter(&imu1->attitude, &imu1->raw_channels, imu1->dt, false);
8001d53a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d53e:	f0 fa 01 40 	ld.w	r10,r8[320]
8001d542:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d546:	f0 cb ff 34 	sub	r11,r8,-204
8001d54a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d54e:	30 09       	mov	r9,0
8001d550:	10 9c       	mov	r12,r8
8001d552:	f0 16 01 60 	mcall	r6[1408]
		if (imu1->attitude.calibration_level==OFF) {
8001d556:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d55a:	f1 38 00 b8 	ld.ub	r8,r8[184]
8001d55e:	58 08       	cp.w	r8,0
8001d560:	c1 a1       	brne	8001d594 <imu_update+0xd0>
			position_integration(pos_est, &imu1->attitude, imu1->dt);
8001d562:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d566:	f0 f9 01 40 	ld.w	r9,r8[320]
8001d56a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d56e:	12 9a       	mov	r10,r9
8001d570:	10 9b       	mov	r11,r8
8001d572:	ee fc ff f4 	ld.w	r12,r7[-12]
8001d576:	f0 16 02 04 	mcall	r6[2064]
			position_correction(pos_est, barometer, gps, imu1->dt);
8001d57a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d57e:	f0 f8 01 40 	ld.w	r8,r8[320]
8001d582:	10 99       	mov	r9,r8
8001d584:	ee fa ff ec 	ld.w	r10,r7[-20]
8001d588:	ee fb ff f0 	ld.w	r11,r7[-16]
8001d58c:	ee fc ff f4 	ld.w	r12,r7[-12]
8001d590:	f0 16 01 e4 	mcall	r6[1936]
		}
	}
}
8001d594:	2f bd       	sub	sp,-20
8001d596:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d59a:	00 00       	add	r0,r0
8001d59c:	80 01       	ld.sh	r1,r0[0x0]
8001d59e:	d3 52       	popm	r0-r3,r8-r9,r11-r12

8001d5a0 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8001d5a0:	eb cd 40 80 	pushm	r7,lr
8001d5a4:	1a 97       	mov	r7,sp
8001d5a6:	20 3d       	sub	sp,12
8001d5a8:	ef 4c ff f8 	st.w	r7[-8],r12
8001d5ac:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8001d5b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d5b4:	70 09       	ld.w	r9,r8[0x0]
8001d5b6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d5ba:	70 08       	ld.w	r8,r8[0x0]
8001d5bc:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001d5c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d5c4:	2f c8       	sub	r8,-4
8001d5c6:	70 0a       	ld.w	r10,r8[0x0]
8001d5c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d5cc:	2f c8       	sub	r8,-4
8001d5ce:	70 08       	ld.w	r8,r8[0x0]
8001d5d0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d5d4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d5d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d5dc:	2f 88       	sub	r8,-8
8001d5de:	70 0a       	ld.w	r10,r8[0x0]
8001d5e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d5e4:	2f 88       	sub	r8,-8
8001d5e6:	70 08       	ld.w	r8,r8[0x0]
8001d5e8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d5ec:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001d5f0:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8001d5f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001d5f8:	10 9c       	mov	r12,r8
8001d5fa:	2f dd       	sub	sp,-12
8001d5fc:	e3 cd 80 80 	ldm	sp++,r7,pc

8001d600 <quat_multi>:
	out[2] = u[0] * v[1] - u[1] * v[0];
}


UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
8001d600:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001d604:	1a 97       	mov	r7,sp
8001d606:	20 7d       	sub	sp,28
8001d608:	4b d6       	lddpc	r6,8001d6fc <quat_multi+0xfc>
8001d60a:	1e 26       	rsub	r6,pc
8001d60c:	ee c8 ff ec 	sub	r8,r7,-20
8001d610:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8001d612:	70 2a       	ld.w	r10,r8[0x8]
8001d614:	70 79       	ld.w	r9,r8[0x1c]
8001d616:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d61a:	70 3b       	ld.w	r11,r8[0xc]
8001d61c:	70 69       	ld.w	r9,r8[0x18]
8001d61e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d622:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001d626:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
8001d62a:	70 3a       	ld.w	r10,r8[0xc]
8001d62c:	70 59       	ld.w	r9,r8[0x14]
8001d62e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d632:	70 1b       	ld.w	r11,r8[0x4]
8001d634:	70 79       	ld.w	r9,r8[0x1c]
8001d636:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d63a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001d63e:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8001d642:	70 1a       	ld.w	r10,r8[0x4]
8001d644:	70 69       	ld.w	r9,r8[0x18]
8001d646:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d64a:	70 2b       	ld.w	r11,r8[0x8]
8001d64c:	70 59       	ld.w	r9,r8[0x14]
8001d64e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d652:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001d656:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
8001d65a:	70 4a       	ld.w	r10,r8[0x10]
8001d65c:	70 19       	ld.w	r9,r8[0x4]
8001d65e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d662:	70 0b       	ld.w	r11,r8[0x0]
8001d664:	70 59       	ld.w	r9,r8[0x14]
8001d666:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d66a:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8001d66e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001d672:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001d676:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
8001d67a:	70 4a       	ld.w	r10,r8[0x10]
8001d67c:	70 29       	ld.w	r9,r8[0x8]
8001d67e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d682:	70 0b       	ld.w	r11,r8[0x0]
8001d684:	70 69       	ld.w	r9,r8[0x18]
8001d686:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d68a:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8001d68e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001d692:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001d696:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8001d69a:	70 4a       	ld.w	r10,r8[0x10]
8001d69c:	70 39       	ld.w	r9,r8[0xc]
8001d69e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d6a2:	70 0b       	ld.w	r11,r8[0x0]
8001d6a4:	70 79       	ld.w	r9,r8[0x1c]
8001d6a6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d6aa:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8001d6ae:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d6b2:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001d6b6:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8001d6ba:	70 0a       	ld.w	r10,r8[0x0]
8001d6bc:	70 49       	ld.w	r9,r8[0x10]
8001d6be:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8001d6c2:	f0 c9 ff f0 	sub	r9,r8,-16
8001d6c6:	2f c9       	sub	r9,-4
8001d6c8:	2f c8       	sub	r8,-4
8001d6ca:	12 9b       	mov	r11,r9
8001d6cc:	10 9c       	mov	r12,r8
8001d6ce:	c6 9f       	rcall	8001d5a0 <scalar_product>
8001d6d0:	18 98       	mov	r8,r12
8001d6d2:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8001d6d6:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
8001d6da:	0a 98       	mov	r8,r5
8001d6dc:	ee c9 00 1c 	sub	r9,r7,28
8001d6e0:	20 08       	sub	r8,0
8001d6e2:	20 09       	sub	r9,0
8001d6e4:	72 0a       	ld.w	r10,r9[0x0]
8001d6e6:	91 0a       	st.w	r8[0x0],r10
8001d6e8:	72 1a       	ld.w	r10,r9[0x4]
8001d6ea:	91 1a       	st.w	r8[0x4],r10
8001d6ec:	72 2a       	ld.w	r10,r9[0x8]
8001d6ee:	91 2a       	st.w	r8[0x8],r10
8001d6f0:	72 39       	ld.w	r9,r9[0xc]
8001d6f2:	91 39       	st.w	r8[0xc],r9
}
8001d6f4:	0a 9c       	mov	r12,r5
8001d6f6:	2f 9d       	sub	sp,-28
8001d6f8:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001d6fc:	80 01       	ld.sh	r1,r0[0x0]
8001d6fe:	d4 8e       	*unknown*

8001d700 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
8001d700:	eb cd 40 80 	pushm	r7,lr
8001d704:	1a 97       	mov	r7,sp
8001d706:	20 5d       	sub	sp,20
8001d708:	ee c9 ff f8 	sub	r9,r7,-8
8001d70c:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
8001d70e:	72 08       	ld.w	r8,r9[0x0]
8001d710:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8001d714:	30 08       	mov	r8,0
8001d716:	ef 48 ff fc 	st.w	r7[-4],r8
8001d71a:	c1 58       	rjmp	8001d744 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
8001d71c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d720:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d724:	2f fb       	sub	r11,-1
8001d726:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
8001d72a:	ee 1b 80 00 	eorh	r11,0x8000
8001d72e:	2f f8       	sub	r8,-1
8001d730:	a3 68       	lsl	r8,0x2
8001d732:	ee 08 00 08 	add	r8,r7,r8
8001d736:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
8001d73a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d73e:	2f f8       	sub	r8,-1
8001d740:	ef 48 ff fc 	st.w	r7[-4],r8
8001d744:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d748:	58 28       	cp.w	r8,2
8001d74a:	fe 9a ff e9 	brle	8001d71c <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8001d74e:	14 98       	mov	r8,r10
8001d750:	ee c9 00 14 	sub	r9,r7,20
8001d754:	20 08       	sub	r8,0
8001d756:	20 09       	sub	r9,0
8001d758:	72 0b       	ld.w	r11,r9[0x0]
8001d75a:	91 0b       	st.w	r8[0x0],r11
8001d75c:	72 1b       	ld.w	r11,r9[0x4]
8001d75e:	91 1b       	st.w	r8[0x4],r11
8001d760:	72 2b       	ld.w	r11,r9[0x8]
8001d762:	91 2b       	st.w	r8[0x8],r11
8001d764:	72 39       	ld.w	r9,r9[0xc]
8001d766:	91 39       	st.w	r8[0xc],r9
}
8001d768:	14 9c       	mov	r12,r10
8001d76a:	2f bd       	sub	sp,-20
8001d76c:	e3 cd 80 80 	ldm	sp++,r7,pc

8001d770 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
8001d770:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001d774:	1a 97       	mov	r7,sp
8001d776:	20 cd       	sub	sp,48
8001d778:	4b c6       	lddpc	r6,8001d868 <quat_global_to_local+0xf8>
8001d77a:	1e 26       	rsub	r6,pc
8001d77c:	ee c5 ff ec 	sub	r5,r7,-20
8001d780:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8001d782:	ee ca 00 10 	sub	r10,r7,16
8001d786:	20 4d       	sub	sp,16
8001d788:	1a 98       	mov	r8,sp
8001d78a:	0a 99       	mov	r9,r5
8001d78c:	20 08       	sub	r8,0
8001d78e:	20 09       	sub	r9,0
8001d790:	72 0b       	ld.w	r11,r9[0x0]
8001d792:	91 0b       	st.w	r8[0x0],r11
8001d794:	72 1b       	ld.w	r11,r9[0x4]
8001d796:	91 1b       	st.w	r8[0x4],r11
8001d798:	72 2b       	ld.w	r11,r9[0x8]
8001d79a:	91 2b       	st.w	r8[0x8],r11
8001d79c:	72 39       	ld.w	r9,r9[0xc]
8001d79e:	91 39       	st.w	r8[0xc],r9
8001d7a0:	14 9c       	mov	r12,r10
8001d7a2:	ca ff       	rcall	8001d700 <quat_inv>
8001d7a4:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8001d7a6:	ee ca 00 20 	sub	r10,r7,32
8001d7aa:	20 4d       	sub	sp,16
8001d7ac:	1a 98       	mov	r8,sp
8001d7ae:	ea c9 ff f0 	sub	r9,r5,-16
8001d7b2:	20 08       	sub	r8,0
8001d7b4:	20 09       	sub	r9,0
8001d7b6:	72 0b       	ld.w	r11,r9[0x0]
8001d7b8:	91 0b       	st.w	r8[0x0],r11
8001d7ba:	72 1b       	ld.w	r11,r9[0x4]
8001d7bc:	91 1b       	st.w	r8[0x4],r11
8001d7be:	72 2b       	ld.w	r11,r9[0x8]
8001d7c0:	91 2b       	st.w	r8[0x8],r11
8001d7c2:	72 39       	ld.w	r9,r9[0xc]
8001d7c4:	91 39       	st.w	r8[0xc],r9
8001d7c6:	20 4d       	sub	sp,16
8001d7c8:	1a 98       	mov	r8,sp
8001d7ca:	ee c9 00 10 	sub	r9,r7,16
8001d7ce:	20 08       	sub	r8,0
8001d7d0:	20 09       	sub	r9,0
8001d7d2:	72 0b       	ld.w	r11,r9[0x0]
8001d7d4:	91 0b       	st.w	r8[0x0],r11
8001d7d6:	72 1b       	ld.w	r11,r9[0x4]
8001d7d8:	91 1b       	st.w	r8[0x4],r11
8001d7da:	72 2b       	ld.w	r11,r9[0x8]
8001d7dc:	91 2b       	st.w	r8[0x8],r11
8001d7de:	72 39       	ld.w	r9,r9[0xc]
8001d7e0:	91 39       	st.w	r8[0xc],r9
8001d7e2:	14 9c       	mov	r12,r10
8001d7e4:	c0 ef       	rcall	8001d600 <quat_multi>
8001d7e6:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
8001d7e8:	ee ca 00 30 	sub	r10,r7,48
8001d7ec:	20 4d       	sub	sp,16
8001d7ee:	1a 98       	mov	r8,sp
8001d7f0:	0a 99       	mov	r9,r5
8001d7f2:	20 08       	sub	r8,0
8001d7f4:	20 09       	sub	r9,0
8001d7f6:	72 0b       	ld.w	r11,r9[0x0]
8001d7f8:	91 0b       	st.w	r8[0x0],r11
8001d7fa:	72 1b       	ld.w	r11,r9[0x4]
8001d7fc:	91 1b       	st.w	r8[0x4],r11
8001d7fe:	72 2b       	ld.w	r11,r9[0x8]
8001d800:	91 2b       	st.w	r8[0x8],r11
8001d802:	72 39       	ld.w	r9,r9[0xc]
8001d804:	91 39       	st.w	r8[0xc],r9
8001d806:	20 4d       	sub	sp,16
8001d808:	1a 98       	mov	r8,sp
8001d80a:	ee c9 00 20 	sub	r9,r7,32
8001d80e:	20 08       	sub	r8,0
8001d810:	20 09       	sub	r9,0
8001d812:	72 0b       	ld.w	r11,r9[0x0]
8001d814:	91 0b       	st.w	r8[0x0],r11
8001d816:	72 1b       	ld.w	r11,r9[0x4]
8001d818:	91 1b       	st.w	r8[0x4],r11
8001d81a:	72 2b       	ld.w	r11,r9[0x8]
8001d81c:	91 2b       	st.w	r8[0x8],r11
8001d81e:	72 39       	ld.w	r9,r9[0xc]
8001d820:	91 39       	st.w	r8[0xc],r9
8001d822:	14 9c       	mov	r12,r10
8001d824:	ce ee       	rcall	8001d600 <quat_multi>
8001d826:	2f 8d       	sub	sp,-32
8001d828:	ee c8 00 20 	sub	r8,r7,32
8001d82c:	ee c9 00 30 	sub	r9,r7,48
8001d830:	20 08       	sub	r8,0
8001d832:	20 09       	sub	r9,0
8001d834:	72 0a       	ld.w	r10,r9[0x0]
8001d836:	91 0a       	st.w	r8[0x0],r10
8001d838:	72 1a       	ld.w	r10,r9[0x4]
8001d83a:	91 1a       	st.w	r8[0x4],r10
8001d83c:	72 2a       	ld.w	r10,r9[0x8]
8001d83e:	91 2a       	st.w	r8[0x8],r10
8001d840:	72 39       	ld.w	r9,r9[0xc]
8001d842:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8001d844:	06 98       	mov	r8,r3
8001d846:	ee c9 00 20 	sub	r9,r7,32
8001d84a:	20 08       	sub	r8,0
8001d84c:	20 09       	sub	r9,0
8001d84e:	72 0a       	ld.w	r10,r9[0x0]
8001d850:	91 0a       	st.w	r8[0x0],r10
8001d852:	72 1a       	ld.w	r10,r9[0x4]
8001d854:	91 1a       	st.w	r8[0x4],r10
8001d856:	72 2a       	ld.w	r10,r9[0x8]
8001d858:	91 2a       	st.w	r8[0x8],r10
8001d85a:	72 39       	ld.w	r9,r9[0xc]
8001d85c:	91 39       	st.w	r8[0xc],r9
}
8001d85e:	06 9c       	mov	r12,r3
8001d860:	2f 4d       	sub	sp,-48
8001d862:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001d866:	00 00       	add	r0,r0
8001d868:	80 01       	ld.sh	r1,r0[0x0]
8001d86a:	d5 fe       	*unknown*

8001d86c <quat_local_to_global>:

UQuat_t static inline quat_local_to_global(const UQuat_t qe, const UQuat_t qvect)
{
8001d86c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001d870:	1a 97       	mov	r7,sp
8001d872:	20 cd       	sub	sp,48
8001d874:	4b c6       	lddpc	r6,8001d964 <quat_local_to_global+0xf8>
8001d876:	1e 26       	rsub	r6,pc
8001d878:	ee c5 ff ec 	sub	r5,r7,-20
8001d87c:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8001d87e:	ee ca 00 10 	sub	r10,r7,16
8001d882:	20 4d       	sub	sp,16
8001d884:	1a 98       	mov	r8,sp
8001d886:	0a 99       	mov	r9,r5
8001d888:	20 08       	sub	r8,0
8001d88a:	20 09       	sub	r9,0
8001d88c:	72 0b       	ld.w	r11,r9[0x0]
8001d88e:	91 0b       	st.w	r8[0x0],r11
8001d890:	72 1b       	ld.w	r11,r9[0x4]
8001d892:	91 1b       	st.w	r8[0x4],r11
8001d894:	72 2b       	ld.w	r11,r9[0x8]
8001d896:	91 2b       	st.w	r8[0x8],r11
8001d898:	72 39       	ld.w	r9,r9[0xc]
8001d89a:	91 39       	st.w	r8[0xc],r9
8001d89c:	14 9c       	mov	r12,r10
8001d89e:	c3 1f       	rcall	8001d700 <quat_inv>
8001d8a0:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qe, qvect);
8001d8a2:	ee ca 00 20 	sub	r10,r7,32
8001d8a6:	20 4d       	sub	sp,16
8001d8a8:	1a 98       	mov	r8,sp
8001d8aa:	ea c9 ff f0 	sub	r9,r5,-16
8001d8ae:	20 08       	sub	r8,0
8001d8b0:	20 09       	sub	r9,0
8001d8b2:	72 0b       	ld.w	r11,r9[0x0]
8001d8b4:	91 0b       	st.w	r8[0x0],r11
8001d8b6:	72 1b       	ld.w	r11,r9[0x4]
8001d8b8:	91 1b       	st.w	r8[0x4],r11
8001d8ba:	72 2b       	ld.w	r11,r9[0x8]
8001d8bc:	91 2b       	st.w	r8[0x8],r11
8001d8be:	72 39       	ld.w	r9,r9[0xc]
8001d8c0:	91 39       	st.w	r8[0xc],r9
8001d8c2:	20 4d       	sub	sp,16
8001d8c4:	1a 98       	mov	r8,sp
8001d8c6:	0a 99       	mov	r9,r5
8001d8c8:	20 08       	sub	r8,0
8001d8ca:	20 09       	sub	r9,0
8001d8cc:	72 0b       	ld.w	r11,r9[0x0]
8001d8ce:	91 0b       	st.w	r8[0x0],r11
8001d8d0:	72 1b       	ld.w	r11,r9[0x4]
8001d8d2:	91 1b       	st.w	r8[0x4],r11
8001d8d4:	72 2b       	ld.w	r11,r9[0x8]
8001d8d6:	91 2b       	st.w	r8[0x8],r11
8001d8d8:	72 39       	ld.w	r9,r9[0xc]
8001d8da:	91 39       	st.w	r8[0xc],r9
8001d8dc:	14 9c       	mov	r12,r10
8001d8de:	c9 1e       	rcall	8001d600 <quat_multi>
8001d8e0:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp, qinv);
8001d8e2:	ee ca 00 30 	sub	r10,r7,48
8001d8e6:	20 4d       	sub	sp,16
8001d8e8:	1a 98       	mov	r8,sp
8001d8ea:	ee c9 00 10 	sub	r9,r7,16
8001d8ee:	20 08       	sub	r8,0
8001d8f0:	20 09       	sub	r9,0
8001d8f2:	72 0b       	ld.w	r11,r9[0x0]
8001d8f4:	91 0b       	st.w	r8[0x0],r11
8001d8f6:	72 1b       	ld.w	r11,r9[0x4]
8001d8f8:	91 1b       	st.w	r8[0x4],r11
8001d8fa:	72 2b       	ld.w	r11,r9[0x8]
8001d8fc:	91 2b       	st.w	r8[0x8],r11
8001d8fe:	72 39       	ld.w	r9,r9[0xc]
8001d900:	91 39       	st.w	r8[0xc],r9
8001d902:	20 4d       	sub	sp,16
8001d904:	1a 98       	mov	r8,sp
8001d906:	ee c9 00 20 	sub	r9,r7,32
8001d90a:	20 08       	sub	r8,0
8001d90c:	20 09       	sub	r9,0
8001d90e:	72 0b       	ld.w	r11,r9[0x0]
8001d910:	91 0b       	st.w	r8[0x0],r11
8001d912:	72 1b       	ld.w	r11,r9[0x4]
8001d914:	91 1b       	st.w	r8[0x4],r11
8001d916:	72 2b       	ld.w	r11,r9[0x8]
8001d918:	91 2b       	st.w	r8[0x8],r11
8001d91a:	72 39       	ld.w	r9,r9[0xc]
8001d91c:	91 39       	st.w	r8[0xc],r9
8001d91e:	14 9c       	mov	r12,r10
8001d920:	c7 0e       	rcall	8001d600 <quat_multi>
8001d922:	2f 8d       	sub	sp,-32
8001d924:	ee c8 00 20 	sub	r8,r7,32
8001d928:	ee c9 00 30 	sub	r9,r7,48
8001d92c:	20 08       	sub	r8,0
8001d92e:	20 09       	sub	r9,0
8001d930:	72 0a       	ld.w	r10,r9[0x0]
8001d932:	91 0a       	st.w	r8[0x0],r10
8001d934:	72 1a       	ld.w	r10,r9[0x4]
8001d936:	91 1a       	st.w	r8[0x4],r10
8001d938:	72 2a       	ld.w	r10,r9[0x8]
8001d93a:	91 2a       	st.w	r8[0x8],r10
8001d93c:	72 39       	ld.w	r9,r9[0xc]
8001d93e:	91 39       	st.w	r8[0xc],r9
	
	return qtmp;
8001d940:	06 98       	mov	r8,r3
8001d942:	ee c9 00 20 	sub	r9,r7,32
8001d946:	20 08       	sub	r8,0
8001d948:	20 09       	sub	r9,0
8001d94a:	72 0a       	ld.w	r10,r9[0x0]
8001d94c:	91 0a       	st.w	r8[0x0],r10
8001d94e:	72 1a       	ld.w	r10,r9[0x4]
8001d950:	91 1a       	st.w	r8[0x4],r10
8001d952:	72 2a       	ld.w	r10,r9[0x8]
8001d954:	91 2a       	st.w	r8[0x8],r10
8001d956:	72 39       	ld.w	r9,r9[0xc]
8001d958:	91 39       	st.w	r8[0xc],r9
}
8001d95a:	06 9c       	mov	r12,r3
8001d95c:	2f 4d       	sub	sp,-48
8001d95e:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001d962:	00 00       	add	r0,r0
8001d964:	80 01       	ld.sh	r1,r0[0x0]
8001d966:	d6 fa       	popm	r0-r10,r12,lr

8001d968 <fast_sqrt>:

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
8001d968:	eb cd 40 c0 	pushm	r6-r7,lr
8001d96c:	1a 97       	mov	r7,sp
8001d96e:	20 2d       	sub	sp,8
8001d970:	4b 26       	lddpc	r6,8001da38 <fast_sqrt+0xd0>
8001d972:	1e 26       	rsub	r6,pc
8001d974:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
8001d978:	30 18       	mov	r8,1
8001d97a:	ee fa ff f8 	ld.w	r10,r7[-8]
8001d97e:	30 09       	mov	r9,0
8001d980:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001d984:	e0 8c 00 03 	brvs	8001d98a <fast_sqrt+0x22>
8001d988:	c0 25       	brlt	8001d98c <fast_sqrt+0x24>
8001d98a:	30 08       	mov	r8,0
8001d98c:	5c 58       	castu.b	r8
8001d98e:	c0 30       	breq	8001d994 <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
8001d990:	30 08       	mov	r8,0
8001d992:	c4 f8       	rjmp	8001da30 <fast_sqrt+0xc8>
	}
	float result=1.0;
8001d994:	fc 18 3f 80 	movh	r8,0x3f80
8001d998:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001d99c:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d9a0:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d9a4:	f0 16 00 08 	mcall	r6[32]
8001d9a8:	18 98       	mov	r8,r12
8001d9aa:	10 99       	mov	r9,r8
8001d9ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d9b0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d9b4:	fc 18 3f 00 	movh	r8,0x3f00
8001d9b8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d9bc:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001d9c0:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d9c4:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d9c8:	f0 16 00 08 	mcall	r6[32]
8001d9cc:	18 98       	mov	r8,r12
8001d9ce:	10 99       	mov	r9,r8
8001d9d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d9d4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d9d8:	fc 18 3f 00 	movh	r8,0x3f00
8001d9dc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d9e0:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001d9e4:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d9e8:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d9ec:	f0 16 00 08 	mcall	r6[32]
8001d9f0:	18 98       	mov	r8,r12
8001d9f2:	10 99       	mov	r9,r8
8001d9f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d9f8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d9fc:	fc 18 3f 00 	movh	r8,0x3f00
8001da00:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001da04:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001da08:	ee fb ff fc 	ld.w	r11,r7[-4]
8001da0c:	ee fc ff f8 	ld.w	r12,r7[-8]
8001da10:	f0 16 00 08 	mcall	r6[32]
8001da14:	18 98       	mov	r8,r12
8001da16:	10 99       	mov	r9,r8
8001da18:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001da1c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001da20:	fc 18 3f 00 	movh	r8,0x3f00
8001da24:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001da28:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
8001da2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001da30:	10 9c       	mov	r12,r8
8001da32:	2f ed       	sub	sp,-8
8001da34:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001da38:	80 01       	ld.sh	r1,r0[0x0]
8001da3a:	d7 f6       	*unknown*

8001da3c <quat_normalise>:
	{
		u[i] = v[i] / norm;
	}
}

static inline UQuat_t quat_normalise(const UQuat_t q) {
8001da3c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001da40:	1a 97       	mov	r7,sp
8001da42:	20 6d       	sub	sp,24
8001da44:	4b f6       	lddpc	r6,8001db40 <quat_normalise+0x104>
8001da46:	1e 26       	rsub	r6,pc
8001da48:	ee c5 ff e8 	sub	r5,r7,-24
8001da4c:	18 92       	mov	r2,r12
	UQuat_t result={.s=1.0, .v={0.0, 0.0, 0.0} };
8001da4e:	fc 18 3f 80 	movh	r8,0x3f80
8001da52:	ef 48 ff e8 	st.w	r7[-24],r8
8001da56:	30 08       	mov	r8,0
8001da58:	ef 48 ff ec 	st.w	r7[-20],r8
8001da5c:	30 08       	mov	r8,0
8001da5e:	ef 48 ff f0 	st.w	r7[-16],r8
8001da62:	30 08       	mov	r8,0
8001da64:	ef 48 ff f4 	st.w	r7[-12],r8
	float snorm= SQR(q.s) + SQR(q.v[0]) + SQR(q.v[1]) + SQR(q.v[2]);
8001da68:	6a 09       	ld.w	r9,r5[0x0]
8001da6a:	6a 08       	ld.w	r8,r5[0x0]
8001da6c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001da70:	6a 1a       	ld.w	r10,r5[0x4]
8001da72:	6a 18       	ld.w	r8,r5[0x4]
8001da74:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001da78:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001da7c:	6a 2a       	ld.w	r10,r5[0x8]
8001da7e:	6a 28       	ld.w	r8,r5[0x8]
8001da80:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001da84:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001da88:	6a 3a       	ld.w	r10,r5[0xc]
8001da8a:	6a 38       	ld.w	r8,r5[0xc]
8001da8c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001da90:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001da94:	ef 48 ff f8 	st.w	r7[-8],r8
	if (snorm >0.0000001) {
8001da98:	ee fc ff f8 	ld.w	r12,r7[-8]
8001da9c:	f0 16 00 02 	mcall	r6[8]
8001daa0:	14 98       	mov	r8,r10
8001daa2:	16 99       	mov	r9,r11
8001daa4:	30 03       	mov	r3,0
8001daa6:	e0 6a af 48 	mov	r10,44872
8001daaa:	ea 1a 9a bc 	orh	r10,0x9abc
8001daae:	e0 6b d7 f2 	mov	r11,55282
8001dab2:	ea 1b 3e 7a 	orh	r11,0x3e7a
8001dab6:	f0 16 00 1d 	mcall	r6[116]
8001daba:	18 98       	mov	r8,r12
8001dabc:	58 08       	cp.w	r8,0
8001dabe:	c0 20       	breq	8001dac2 <quat_normalise+0x86>
8001dac0:	30 13       	mov	r3,1
8001dac2:	f1 d3 c0 08 	bfextu	r8,r3,0x0,0x8
8001dac6:	c2 b0       	breq	8001db1c <quat_normalise+0xe0>
		float norm=fast_sqrt(snorm);
8001dac8:	ee fc ff f8 	ld.w	r12,r7[-8]
8001dacc:	c4 ef       	rcall	8001d968 <fast_sqrt>
8001dace:	18 98       	mov	r8,r12
8001dad0:	ef 48 ff fc 	st.w	r7[-4],r8
		result.s=q.s/norm;
8001dad4:	6a 08       	ld.w	r8,r5[0x0]
8001dad6:	ee fb ff fc 	ld.w	r11,r7[-4]
8001dada:	10 9c       	mov	r12,r8
8001dadc:	f0 16 00 08 	mcall	r6[32]
8001dae0:	18 98       	mov	r8,r12
8001dae2:	ef 48 ff e8 	st.w	r7[-24],r8
		result.v[0]=q.v[0]/norm;		result.v[1]=q.v[1]/norm;		result.v[2]=q.v[2]/norm;
8001dae6:	6a 18       	ld.w	r8,r5[0x4]
8001dae8:	ee fb ff fc 	ld.w	r11,r7[-4]
8001daec:	10 9c       	mov	r12,r8
8001daee:	f0 16 00 08 	mcall	r6[32]
8001daf2:	18 98       	mov	r8,r12
8001daf4:	ef 48 ff ec 	st.w	r7[-20],r8
8001daf8:	6a 28       	ld.w	r8,r5[0x8]
8001dafa:	ee fb ff fc 	ld.w	r11,r7[-4]
8001dafe:	10 9c       	mov	r12,r8
8001db00:	f0 16 00 08 	mcall	r6[32]
8001db04:	18 98       	mov	r8,r12
8001db06:	ef 48 ff f0 	st.w	r7[-16],r8
8001db0a:	6a 38       	ld.w	r8,r5[0xc]
8001db0c:	ee fb ff fc 	ld.w	r11,r7[-4]
8001db10:	10 9c       	mov	r12,r8
8001db12:	f0 16 00 08 	mcall	r6[32]
8001db16:	18 98       	mov	r8,r12
8001db18:	ef 48 ff f4 	st.w	r7[-12],r8

	}
	return result;
8001db1c:	04 98       	mov	r8,r2
8001db1e:	ee c9 00 18 	sub	r9,r7,24
8001db22:	20 08       	sub	r8,0
8001db24:	20 09       	sub	r9,0
8001db26:	72 0a       	ld.w	r10,r9[0x0]
8001db28:	91 0a       	st.w	r8[0x0],r10
8001db2a:	72 1a       	ld.w	r10,r9[0x4]
8001db2c:	91 1a       	st.w	r8[0x4],r10
8001db2e:	72 2a       	ld.w	r10,r9[0x8]
8001db30:	91 2a       	st.w	r8[0x8],r10
8001db32:	72 39       	ld.w	r9,r9[0xc]
8001db34:	91 39       	st.w	r8[0xc],r9
}
8001db36:	04 9c       	mov	r12,r2
8001db38:	2f ad       	sub	sp,-24
8001db3a:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001db3e:	00 00       	add	r0,r0
8001db40:	80 01       	ld.sh	r1,r0[0x0]
8001db42:	d8 ca       	popm	r8-r10,pc,r12=0

8001db44 <clip>:
		return b;
	}
}


static float inline clip(float input_value, float clip_value) {
8001db44:	eb cd 40 80 	pushm	r7,lr
8001db48:	1a 97       	mov	r7,sp
8001db4a:	20 2d       	sub	sp,8
8001db4c:	ef 4c ff fc 	st.w	r7[-4],r12
8001db50:	ef 4b ff f8 	st.w	r7[-8],r11
	
	if (input_value>clip_value)  return clip_value;     
8001db54:	30 18       	mov	r8,1
8001db56:	ee fa ff fc 	ld.w	r10,r7[-4]
8001db5a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001db5e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001db62:	e0 8c 00 04 	brvs	8001db6a <clip+0x26>
8001db66:	e0 89 00 03 	brgt	8001db6c <clip+0x28>
8001db6a:	30 08       	mov	r8,0
8001db6c:	5c 58       	castu.b	r8
8001db6e:	c0 40       	breq	8001db76 <clip+0x32>
8001db70:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001db74:	c1 98       	rjmp	8001dba6 <clip+0x62>
	if (input_value<-clip_value) return -clip_value; 
8001db76:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001db7a:	10 9a       	mov	r10,r8
8001db7c:	ee 1a 80 00 	eorh	r10,0x8000
8001db80:	30 18       	mov	r8,1
8001db82:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001db86:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001db8a:	e0 8c 00 04 	brvs	8001db92 <clip+0x4e>
8001db8e:	e0 89 00 03 	brgt	8001db94 <clip+0x50>
8001db92:	30 08       	mov	r8,0
8001db94:	5c 58       	castu.b	r8
8001db96:	c0 60       	breq	8001dba2 <clip+0x5e>
8001db98:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001db9c:	ee 18 80 00 	eorh	r8,0x8000
8001dba0:	c0 38       	rjmp	8001dba6 <clip+0x62>
	return input_value;
8001dba2:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001dba6:	10 9c       	mov	r12,r8
8001dba8:	2f ed       	sub	sp,-8
8001dbaa:	e3 cd 80 80 	ldm	sp++,r7,pc

8001dbae <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8001dbae:	eb cd 40 c0 	pushm	r6-r7,lr
8001dbb2:	1a 97       	mov	r7,sp
8001dbb4:	20 6d       	sub	sp,24
8001dbb6:	49 f6       	lddpc	r6,8001dc30 <interpolate+0x82>
8001dbb8:	1e 26       	rsub	r6,pc
8001dbba:	ef 4c ff f8 	st.w	r7[-8],r12
8001dbbe:	ef 4b ff f4 	st.w	r7[-12],r11
8001dbc2:	ef 4a ff f0 	st.w	r7[-16],r10
8001dbc6:	ef 49 ff ec 	st.w	r7[-20],r9
8001dbca:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001dbce:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001dbd2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001dbd6:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001dbda:	c0 41       	brne	8001dbe2 <interpolate+0x34>
	{
		return y1;
8001dbdc:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001dbe0:	c2 38       	rjmp	8001dc26 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8001dbe2:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001dbe6:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001dbea:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001dbee:	ee fa ff f8 	ld.w	r10,r7[-8]
8001dbf2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001dbf6:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001dbfa:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001dbfe:	ee fa ff f0 	ld.w	r10,r7[-16]
8001dc02:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001dc06:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001dc0a:	12 9b       	mov	r11,r9
8001dc0c:	10 9c       	mov	r12,r8
8001dc0e:	f0 16 00 08 	mcall	r6[32]
8001dc12:	18 98       	mov	r8,r12
8001dc14:	10 99       	mov	r9,r8
8001dc16:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001dc1a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001dc1e:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8001dc22:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8001dc26:	10 9c       	mov	r12,r8
8001dc28:	2f ad       	sub	sp,-24
8001dc2a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001dc2e:	00 00       	add	r0,r0
8001dc30:	80 01       	ld.sh	r1,r0[0x0]
8001dc32:	da 3c       	*unknown*

8001dc34 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8001dc34:	eb cd 40 c0 	pushm	r6-r7,lr
8001dc38:	1a 97       	mov	r7,sp
8001dc3a:	20 3d       	sub	sp,12
8001dc3c:	49 06       	lddpc	r6,8001dc7c <mav_array_memcpy+0x48>
8001dc3e:	1e 26       	rsub	r6,pc
8001dc40:	ef 4c ff fc 	st.w	r7[-4],r12
8001dc44:	ef 4b ff f8 	st.w	r7[-8],r11
8001dc48:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8001dc4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001dc50:	58 08       	cp.w	r8,0
8001dc52:	c0 91       	brne	8001dc64 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8001dc54:	ee fa ff f4 	ld.w	r10,r7[-12]
8001dc58:	30 0b       	mov	r11,0
8001dc5a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001dc5e:	f0 16 00 31 	mcall	r6[196]
8001dc62:	c0 98       	rjmp	8001dc74 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8001dc64:	ee fa ff f4 	ld.w	r10,r7[-12]
8001dc68:	ee fb ff f8 	ld.w	r11,r7[-8]
8001dc6c:	ee fc ff fc 	ld.w	r12,r7[-4]
8001dc70:	f0 16 00 21 	mcall	r6[132]
	}
}
8001dc74:	2f dd       	sub	sp,-12
8001dc76:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001dc7a:	00 00       	add	r0,r0
8001dc7c:	80 01       	ld.sh	r1,r0[0x0]
8001dc7e:	da c2       	popm	r8-r10,r12,pc

8001dc80 <init_simulation>:
#include "coord_conventions.h"
#include "position_estimation.h"
#include "central_data.h"
#include "maths.h"

void init_simulation(simulation_model_t *sim, Quat_Attitude_t *start_attitude) {
8001dc80:	eb cd 40 c0 	pushm	r6-r7,lr
8001dc84:	1a 97       	mov	r7,sp
8001dc86:	20 3d       	sub	sp,12
8001dc88:	4b f6       	lddpc	r6,8001dd84 <init_simulation+0x104>
8001dc8a:	1e 26       	rsub	r6,pc
8001dc8c:	ef 4c ff f8 	st.w	r7[-8],r12
8001dc90:	ef 4b ff f4 	st.w	r7[-12],r11
	int i;
	(*sim)=vehicle_model_parameters;
8001dc94:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001dc98:	ec f9 08 a8 	ld.w	r9,r6[2216]
8001dc9c:	e0 6a 01 94 	mov	r10,404
8001dca0:	12 9b       	mov	r11,r9
8001dca2:	10 9c       	mov	r12,r8
8001dca4:	f0 16 00 21 	mcall	r6[132]
	for (i=0; i<3; i++) {
8001dca8:	30 08       	mov	r8,0
8001dcaa:	ef 48 ff fc 	st.w	r7[-4],r8
8001dcae:	c2 d8       	rjmp	8001dd08 <init_simulation+0x88>
		sim->rates_bf[i]=0;
8001dcb0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001dcb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001dcb8:	2f d9       	sub	r9,-3
8001dcba:	30 0a       	mov	r10,0
8001dcbc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->torques_bf[i]=0;
8001dcc0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001dcc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001dcc8:	30 0a       	mov	r10,0
8001dcca:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->lin_forces_bf[i]=0;
8001dcce:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001dcd2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001dcd6:	2f a9       	sub	r9,-6
8001dcd8:	30 0a       	mov	r10,0
8001dcda:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->vel_bf[i]=0.0;
8001dcde:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001dce2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001dce6:	2f 79       	sub	r9,-9
8001dce8:	30 0a       	mov	r10,0
8001dcea:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->pos[i]=0.0;
8001dcee:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001dcf2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001dcf6:	2f 19       	sub	r9,-15
8001dcf8:	30 0a       	mov	r10,0
8001dcfa:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
#include "maths.h"

void init_simulation(simulation_model_t *sim, Quat_Attitude_t *start_attitude) {
	int i;
	(*sim)=vehicle_model_parameters;
	for (i=0; i<3; i++) {
8001dcfe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001dd02:	2f f8       	sub	r8,-1
8001dd04:	ef 48 ff fc 	st.w	r7[-4],r8
8001dd08:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001dd0c:	58 28       	cp.w	r8,2
8001dd0e:	fe 9a ff d1 	brle	8001dcb0 <init_simulation+0x30>
		sim->pos[i]=0.0;
		
	}

	// set initial conditions to given attitude (including scalefactors and biases for simulated IMU)
	sim->attitude=*start_attitude;
8001dd12:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001dd16:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001dd1a:	2b 88       	sub	r8,-72
8001dd1c:	e0 6a 00 cc 	mov	r10,204
8001dd20:	12 9b       	mov	r11,r9
8001dd22:	10 9c       	mov	r12,r8
8001dd24:	f0 16 00 21 	mcall	r6[132]

	for (i=0; i<ROTORCOUNT; i++) {
8001dd28:	30 08       	mov	r8,0
8001dd2a:	ef 48 ff fc 	st.w	r7[-4],r8
8001dd2e:	c0 e8       	rjmp	8001dd4a <init_simulation+0xca>
		sim->rotorspeeds[i]=0.0;			
8001dd30:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001dd34:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001dd38:	2a f9       	sub	r9,-81
8001dd3a:	30 0a       	mov	r10,0
8001dd3c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}

	// set initial conditions to given attitude (including scalefactors and biases for simulated IMU)
	sim->attitude=*start_attitude;

	for (i=0; i<ROTORCOUNT; i++) {
8001dd40:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001dd44:	2f f8       	sub	r8,-1
8001dd46:	ef 48 ff fc 	st.w	r7[-4],r8
8001dd4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001dd4e:	58 38       	cp.w	r8,3
8001dd50:	fe 9a ff f0 	brle	8001dd30 <init_simulation+0xb0>
		sim->rotorspeeds[i]=0.0;			
	}
	sim->last_update=get_time();
8001dd54:	f0 16 01 ff 	mcall	r6[2044]
8001dd58:	14 98       	mov	r8,r10
8001dd5a:	16 99       	mov	r9,r11
8001dd5c:	10 9a       	mov	r10,r8
8001dd5e:	12 9b       	mov	r11,r9
8001dd60:	f0 16 00 7b 	mcall	r6[492]
8001dd64:	18 99       	mov	r9,r12
8001dd66:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001dd6a:	f1 49 01 8c 	st.w	r8[396],r9
	sim->dt=0.01;
8001dd6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001dd72:	e0 69 d7 0a 	mov	r9,55050
8001dd76:	ea 19 3c 23 	orh	r9,0x3c23
8001dd7a:	f1 49 01 90 	st.w	r8[400],r9
}
8001dd7e:	2f dd       	sub	sp,-12
8001dd80:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001dd84:	80 01       	ld.sh	r1,r0[0x0]
8001dd86:	db 0e       	*unknown*

8001dd88 <lift_drag_base>:



// inverse function of mix_to_servos in stabilisation to recover torques and forces

static inline float lift_drag_base(simulation_model_t *sim, float rpm, float sqr_lat_airspeed, float axial_airspeed) {
8001dd88:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001dd8c:	1a 97       	mov	r7,sp
8001dd8e:	20 6d       	sub	sp,24
8001dd90:	4e 26       	lddpc	r6,8001df18 <lift_drag_base+0x190>
8001dd92:	1e 26       	rsub	r6,pc
8001dd94:	ef 4c ff f4 	st.w	r7[-12],r12
8001dd98:	ef 4b ff f0 	st.w	r7[-16],r11
8001dd9c:	ef 4a ff ec 	st.w	r7[-20],r10
8001dda0:	ef 49 ff e8 	st.w	r7[-24],r9
	if (rpm < 0.1) return 0.0;
8001dda4:	ee fc ff f0 	ld.w	r12,r7[-16]
8001dda8:	f0 16 00 02 	mcall	r6[8]
8001ddac:	30 05       	mov	r5,0
8001ddae:	e0 68 99 9a 	mov	r8,39322
8001ddb2:	ea 18 99 99 	orh	r8,0x9999
8001ddb6:	e0 69 99 99 	mov	r9,39321
8001ddba:	ea 19 3f b9 	orh	r9,0x3fb9
8001ddbe:	f0 16 00 1d 	mcall	r6[116]
8001ddc2:	18 98       	mov	r8,r12
8001ddc4:	58 08       	cp.w	r8,0
8001ddc6:	c0 20       	breq	8001ddca <lift_drag_base+0x42>
8001ddc8:	30 15       	mov	r5,1
8001ddca:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8001ddce:	c0 30       	breq	8001ddd4 <lift_drag_base+0x4c>
8001ddd0:	30 08       	mov	r8,0
8001ddd2:	c9 f8       	rjmp	8001df10 <lift_drag_base+0x188>
	float mean_vel=sim->rotor_diameter *PI * rpm/60.0;
8001ddd4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ddd8:	f0 f8 01 68 	ld.w	r8,r8[360]
8001dddc:	10 9c       	mov	r12,r8
8001ddde:	f0 16 00 02 	mcall	r6[8]
8001dde2:	e0 68 2d 18 	mov	r8,11544
8001dde6:	ea 18 54 44 	orh	r8,0x5444
8001ddea:	e0 69 21 fb 	mov	r9,8699
8001ddee:	ea 19 40 09 	orh	r9,0x4009
8001ddf2:	f0 16 00 03 	mcall	r6[12]
8001ddf6:	14 98       	mov	r8,r10
8001ddf8:	16 99       	mov	r9,r11
8001ddfa:	10 92       	mov	r2,r8
8001ddfc:	12 93       	mov	r3,r9
8001ddfe:	ee fc ff f0 	ld.w	r12,r7[-16]
8001de02:	f0 16 00 02 	mcall	r6[8]
8001de06:	14 98       	mov	r8,r10
8001de08:	16 99       	mov	r9,r11
8001de0a:	04 9a       	mov	r10,r2
8001de0c:	06 9b       	mov	r11,r3
8001de0e:	f0 16 00 03 	mcall	r6[12]
8001de12:	14 98       	mov	r8,r10
8001de14:	16 99       	mov	r9,r11
8001de16:	10 9a       	mov	r10,r8
8001de18:	12 9b       	mov	r11,r9
8001de1a:	30 08       	mov	r8,0
8001de1c:	fc 19 40 4e 	movh	r9,0x404e
8001de20:	f0 16 00 0c 	mcall	r6[48]
8001de24:	14 98       	mov	r8,r10
8001de26:	16 99       	mov	r9,r11
8001de28:	10 9a       	mov	r10,r8
8001de2a:	12 9b       	mov	r11,r9
8001de2c:	f0 16 00 09 	mcall	r6[36]
8001de30:	18 98       	mov	r8,r12
8001de32:	ef 48 ff f8 	st.w	r7[-8],r8
	float exit_vel=rpm/60.0 *sim -> rotor_pitch;           
8001de36:	ee fc ff f0 	ld.w	r12,r7[-16]
8001de3a:	f0 16 00 02 	mcall	r6[8]
8001de3e:	30 08       	mov	r8,0
8001de40:	fc 19 40 4e 	movh	r9,0x404e
8001de44:	f0 16 00 0c 	mcall	r6[48]
8001de48:	14 98       	mov	r8,r10
8001de4a:	16 99       	mov	r9,r11
8001de4c:	10 92       	mov	r2,r8
8001de4e:	12 93       	mov	r3,r9
8001de50:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001de54:	f0 f8 01 70 	ld.w	r8,r8[368]
8001de58:	10 9c       	mov	r12,r8
8001de5a:	f0 16 00 02 	mcall	r6[8]
8001de5e:	14 98       	mov	r8,r10
8001de60:	16 99       	mov	r9,r11
8001de62:	04 9a       	mov	r10,r2
8001de64:	06 9b       	mov	r11,r3
8001de66:	f0 16 00 03 	mcall	r6[12]
8001de6a:	14 98       	mov	r8,r10
8001de6c:	16 99       	mov	r9,r11
8001de6e:	10 9a       	mov	r10,r8
8001de70:	12 9b       	mov	r11,r9
8001de72:	f0 16 00 09 	mcall	r6[36]
8001de76:	18 98       	mov	r8,r12
8001de78:	ef 48 ff fc 	st.w	r7[-4],r8
	return (0.5*AIR_DENSITY*(mean_vel*mean_vel +sqr_lat_airspeed) * sim->rotor_foil_area  * (1.0-(axial_airspeed/exit_vel)));
8001de7c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001de80:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001de84:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001de88:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001de8c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001de90:	10 9c       	mov	r12,r8
8001de92:	f0 16 00 02 	mcall	r6[8]
8001de96:	e0 68 33 33 	mov	r8,13107
8001de9a:	ea 18 33 33 	orh	r8,0x3333
8001de9e:	e0 69 33 33 	mov	r9,13107
8001dea2:	ea 19 3f e3 	orh	r9,0x3fe3
8001dea6:	f0 16 00 03 	mcall	r6[12]
8001deaa:	14 98       	mov	r8,r10
8001deac:	16 99       	mov	r9,r11
8001deae:	10 92       	mov	r2,r8
8001deb0:	12 93       	mov	r3,r9
8001deb2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001deb6:	f0 f8 01 6c 	ld.w	r8,r8[364]
8001deba:	10 9c       	mov	r12,r8
8001debc:	f0 16 00 02 	mcall	r6[8]
8001dec0:	14 98       	mov	r8,r10
8001dec2:	16 99       	mov	r9,r11
8001dec4:	04 9a       	mov	r10,r2
8001dec6:	06 9b       	mov	r11,r3
8001dec8:	f0 16 00 03 	mcall	r6[12]
8001decc:	14 98       	mov	r8,r10
8001dece:	16 99       	mov	r9,r11
8001ded0:	10 92       	mov	r2,r8
8001ded2:	12 93       	mov	r3,r9
8001ded4:	ee fb ff fc 	ld.w	r11,r7[-4]
8001ded8:	ee fc ff e8 	ld.w	r12,r7[-24]
8001dedc:	f0 16 00 08 	mcall	r6[32]
8001dee0:	18 98       	mov	r8,r12
8001dee2:	10 9c       	mov	r12,r8
8001dee4:	f0 16 00 02 	mcall	r6[8]
8001dee8:	14 98       	mov	r8,r10
8001deea:	16 99       	mov	r9,r11
8001deec:	30 0a       	mov	r10,0
8001deee:	fc 1b 3f f0 	movh	r11,0x3ff0
8001def2:	f0 16 00 11 	mcall	r6[68]
8001def6:	14 98       	mov	r8,r10
8001def8:	16 99       	mov	r9,r11
8001defa:	04 9a       	mov	r10,r2
8001defc:	06 9b       	mov	r11,r3
8001defe:	f0 16 00 03 	mcall	r6[12]
8001df02:	14 98       	mov	r8,r10
8001df04:	16 99       	mov	r9,r11
8001df06:	10 9a       	mov	r10,r8
8001df08:	12 9b       	mov	r11,r9
8001df0a:	f0 16 00 09 	mcall	r6[36]
8001df0e:	18 98       	mov	r8,r12
}
8001df10:	10 9c       	mov	r12,r8
8001df12:	2f ad       	sub	sp,-24
8001df14:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001df18:	80 01       	ld.sh	r1,r0[0x0]
8001df1a:	dc 16       	*unknown*

8001df1c <forces_from_servos_diag_quad>:


void forces_from_servos_diag_quad(simulation_model_t *sim, servo_output *servos){
8001df1c:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8001df20:	1a 97       	mov	r7,sp
8001df22:	21 dd       	sub	sp,116
8001df24:	fe f6 04 54 	ld.w	r6,pc[1108]
8001df28:	1e 26       	rsub	r6,pc
8001df2a:	ef 4c ff 90 	st.w	r7[-112],r12
8001df2e:	ef 4b ff 8c 	st.w	r7[-116],r11
	int i;
	float motor_command[4];
	float rotor_lifts[4], rotor_drags[4], rotor_inertia[4], rotor_lateral_drag[4];
	float ldb;
	
	float sqr_lateral_airspeed=SQR(sim->vel_bf[0]) + SQR(sim->vel_bf[1]*sim->vel_bf[1]);
8001df32:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001df36:	70 99       	ld.w	r9,r8[0x24]
8001df38:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001df3c:	70 98       	ld.w	r8,r8[0x24]
8001df3e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001df42:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001df46:	70 aa       	ld.w	r10,r8[0x28]
8001df48:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001df4c:	70 a8       	ld.w	r8,r8[0x28]
8001df4e:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8001df52:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001df56:	70 ab       	ld.w	r11,r8[0x28]
8001df58:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001df5c:	70 a8       	ld.w	r8,r8[0x28]
8001df5e:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8001df62:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001df66:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001df6a:	ef 48 ff ec 	st.w	r7[-20],r8
	float lateral_airspeed=sqrt(sqr_lateral_airspeed);
8001df6e:	ee fc ff ec 	ld.w	r12,r7[-20]
8001df72:	f0 16 00 02 	mcall	r6[8]
8001df76:	14 98       	mov	r8,r10
8001df78:	16 99       	mov	r9,r11
8001df7a:	10 9a       	mov	r10,r8
8001df7c:	12 9b       	mov	r11,r9
8001df7e:	f0 16 00 6b 	mcall	r6[428]
8001df82:	14 98       	mov	r8,r10
8001df84:	16 99       	mov	r9,r11
8001df86:	10 9a       	mov	r10,r8
8001df88:	12 9b       	mov	r11,r9
8001df8a:	f0 16 00 09 	mcall	r6[36]
8001df8e:	18 98       	mov	r8,r12
8001df90:	ef 48 ff f0 	st.w	r7[-16],r8
	
	for (i=0; i<4; i++) {
8001df94:	30 08       	mov	r8,0
8001df96:	ef 48 ff e4 	st.w	r7[-28],r8
8001df9a:	cb 28       	rjmp	8001e0fe <forces_from_servos_diag_quad+0x1e2>
		float old_rotor_speed;
		motor_command[i]=(float)servos[i].value/SERVO_SCALE - sim->rotor_rpm_offset;
8001df9c:	ee f5 ff e4 	ld.w	r5,r7[-28]
8001dfa0:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001dfa4:	a5 68       	lsl	r8,0x4
8001dfa6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8001dfaa:	f2 08 00 08 	add	r8,r9,r8
8001dfae:	70 08       	ld.w	r8,r8[0x0]
8001dfb0:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001dfb4:	fc 1b 43 fa 	movh	r11,0x43fa
8001dfb8:	10 9c       	mov	r12,r8
8001dfba:	f0 16 00 08 	mcall	r6[32]
8001dfbe:	18 98       	mov	r8,r12
8001dfc0:	10 99       	mov	r9,r8
8001dfc2:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dfc6:	f0 f8 01 5c 	ld.w	r8,r8[348]
8001dfca:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001dfce:	ea 08 15 02 	lsl	r8,r5,0x2
8001dfd2:	ee 08 00 08 	add	r8,r7,r8
8001dfd6:	f1 49 ff d4 	st.w	r8[-44],r9
		if (motor_command[i]<0.0) motor_command[i]=0;
8001dfda:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001dfde:	a3 68       	lsl	r8,0x2
8001dfe0:	ee 08 00 08 	add	r8,r7,r8
8001dfe4:	f0 fa ff d4 	ld.w	r10,r8[-44]
8001dfe8:	30 18       	mov	r8,1
8001dfea:	30 09       	mov	r9,0
8001dfec:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001dff0:	e0 8c 00 03 	brvs	8001dff6 <forces_from_servos_diag_quad+0xda>
8001dff4:	c0 25       	brlt	8001dff8 <forces_from_servos_diag_quad+0xdc>
8001dff6:	30 08       	mov	r8,0
8001dff8:	5c 58       	castu.b	r8
8001dffa:	c0 90       	breq	8001e00c <forces_from_servos_diag_quad+0xf0>
8001dffc:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001e000:	a3 68       	lsl	r8,0x2
8001e002:	ee 08 00 08 	add	r8,r7,r8
8001e006:	30 09       	mov	r9,0
8001e008:	f1 49 ff d4 	st.w	r8[-44],r9
		
		// temporarily save old rotor speeds
		old_rotor_speed=sim->rotorspeeds[i];
8001e00c:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001e010:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001e014:	2a f9       	sub	r9,-81
8001e016:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e01a:	ef 48 ff fc 	st.w	r7[-4],r8
		// estimate rotor speeds by low-pass filtering
		//sim->rotorspeeds[i]=(sim->rotor_lpf) * sim->rotorspeeds[i] + (1.0-sim->rotor_lpf) * (motor_command[i] * sim->rotor_rpm_gain);
		sim->rotorspeeds[i]=(motor_command[i] * sim->rotor_rpm_gain);
8001e01e:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001e022:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001e026:	a3 68       	lsl	r8,0x2
8001e028:	ee 08 00 08 	add	r8,r7,r8
8001e02c:	f0 fa ff d4 	ld.w	r10,r8[-44]
8001e030:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001e034:	f0 f8 01 58 	ld.w	r8,r8[344]
8001e038:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8001e03c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001e040:	2a f9       	sub	r9,-81
8001e042:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		// calculate torque created by rotor inertia
		rotor_inertia[i]=(sim->rotorspeeds[i] - old_rotor_speed)/sim->dt * sim->rotor_momentum;
8001e046:	ee f5 ff e4 	ld.w	r5,r7[-28]
8001e04a:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001e04e:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001e052:	2a f9       	sub	r9,-81
8001e054:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8001e058:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e05c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8001e060:	ee f9 ff 90 	ld.w	r9,r7[-112]
8001e064:	f2 f9 01 90 	ld.w	r9,r9[400]
8001e068:	12 9b       	mov	r11,r9
8001e06a:	10 9c       	mov	r12,r8
8001e06c:	f0 16 00 08 	mcall	r6[32]
8001e070:	18 98       	mov	r8,r12
8001e072:	10 99       	mov	r9,r8
8001e074:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001e078:	f0 f8 01 84 	ld.w	r8,r8[388]
8001e07c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e080:	ea 08 15 02 	lsl	r8,r5,0x2
8001e084:	ee 08 00 08 	add	r8,r7,r8
8001e088:	f1 49 ff a4 	st.w	r8[-92],r9
		
		ldb=lift_drag_base(sim, sim->rotorspeeds[i], sqr_lateral_airspeed, -sim->vel_bf[Z]);
8001e08c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001e090:	70 b8       	ld.w	r8,r8[0x2c]
8001e092:	10 99       	mov	r9,r8
8001e094:	ee 19 80 00 	eorh	r9,0x8000
8001e098:	ee fa ff e4 	ld.w	r10,r7[-28]
8001e09c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001e0a0:	2a fa       	sub	r10,-81
8001e0a2:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8001e0a6:	ee fa ff ec 	ld.w	r10,r7[-20]
8001e0aa:	10 9b       	mov	r11,r8
8001e0ac:	ee fc ff 90 	ld.w	r12,r7[-112]
8001e0b0:	c6 ce       	rcall	8001dd88 <lift_drag_base>
8001e0b2:	18 98       	mov	r8,r12
8001e0b4:	ef 48 ff e8 	st.w	r7[-24],r8
		//ldb=lift_drag_base(sim, sim->rotorspeeds[i], sqr_lateral_airspeed, 0.0);
		
		rotor_lifts[i]=ldb * sim->rotor_cl;
8001e0b8:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001e0bc:	ee f9 ff 90 	ld.w	r9,r7[-112]
8001e0c0:	f2 fa 01 64 	ld.w	r10,r9[356]
8001e0c4:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001e0c8:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
8001e0cc:	a3 68       	lsl	r8,0x2
8001e0ce:	ee 08 00 08 	add	r8,r7,r8
8001e0d2:	f1 49 ff c4 	st.w	r8[-60],r9
		rotor_drags[i]=ldb * sim->rotor_cd;
8001e0d6:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001e0da:	ee f9 ff 90 	ld.w	r9,r7[-112]
8001e0de:	f2 fa 01 60 	ld.w	r10,r9[352]
8001e0e2:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001e0e6:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
8001e0ea:	a3 68       	lsl	r8,0x2
8001e0ec:	ee 08 00 08 	add	r8,r7,r8
8001e0f0:	f1 49 ff b4 	st.w	r8[-76],r9
	float ldb;
	
	float sqr_lateral_airspeed=SQR(sim->vel_bf[0]) + SQR(sim->vel_bf[1]*sim->vel_bf[1]);
	float lateral_airspeed=sqrt(sqr_lateral_airspeed);
	
	for (i=0; i<4; i++) {
8001e0f4:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001e0f8:	2f f8       	sub	r8,-1
8001e0fa:	ef 48 ff e4 	st.w	r7[-28],r8
8001e0fe:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001e102:	58 38       	cp.w	r8,3
8001e104:	fe 9a ff 4c 	brle	8001df9c <forces_from_servos_diag_quad+0x80>
		
		rotor_lifts[i]=ldb * sim->rotor_cl;
		rotor_drags[i]=ldb * sim->rotor_cd;
	}
	
	float mpos_x=sim->rotor_arm_length / 1.4142;
8001e108:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001e10c:	f0 f8 01 88 	ld.w	r8,r8[392]
8001e110:	10 9c       	mov	r12,r8
8001e112:	f0 16 00 02 	mcall	r6[8]
8001e116:	e0 68 0d 1b 	mov	r8,3355
8001e11a:	ea 18 2d e0 	orh	r8,0x2de0
8001e11e:	e0 69 a0 90 	mov	r9,41104
8001e122:	ea 19 3f f6 	orh	r9,0x3ff6
8001e126:	f0 16 00 0c 	mcall	r6[48]
8001e12a:	14 98       	mov	r8,r10
8001e12c:	16 99       	mov	r9,r11
8001e12e:	10 9a       	mov	r10,r8
8001e130:	12 9b       	mov	r11,r9
8001e132:	f0 16 00 09 	mcall	r6[36]
8001e136:	18 98       	mov	r8,r12
8001e138:	ef 48 ff f4 	st.w	r7[-12],r8
	float mpos_y=sim->rotor_arm_length / 1.4142;
8001e13c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001e140:	f0 f8 01 88 	ld.w	r8,r8[392]
8001e144:	10 9c       	mov	r12,r8
8001e146:	f0 16 00 02 	mcall	r6[8]
8001e14a:	e0 68 0d 1b 	mov	r8,3355
8001e14e:	ea 18 2d e0 	orh	r8,0x2de0
8001e152:	e0 69 a0 90 	mov	r9,41104
8001e156:	ea 19 3f f6 	orh	r9,0x3ff6
8001e15a:	f0 16 00 0c 	mcall	r6[48]
8001e15e:	14 98       	mov	r8,r10
8001e160:	16 99       	mov	r9,r11
8001e162:	10 9a       	mov	r10,r8
8001e164:	12 9b       	mov	r11,r9
8001e166:	f0 16 00 09 	mcall	r6[36]
8001e16a:	18 98       	mov	r8,r12
8001e16c:	ef 48 ff f8 	st.w	r7[-8],r8
	
	// torque around x axis (roll)
	sim->torques_bf[ROLL]  = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_REAR_LEFT]  ) 
8001e170:	ee f9 ff cc 	ld.w	r9,r7[-52]
8001e174:	ee f8 ff d0 	ld.w	r8,r7[-48]
8001e178:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
						    - (rotor_lifts[M_FRONT_RIGHT] + rotor_lifts[M_REAR_RIGHT] )) * mpos_y;;
8001e17c:	ee fa ff c8 	ld.w	r10,r7[-56]
8001e180:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001e184:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
	
	float mpos_x=sim->rotor_arm_length / 1.4142;
	float mpos_y=sim->rotor_arm_length / 1.4142;
	
	// torque around x axis (roll)
	sim->torques_bf[ROLL]  = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_REAR_LEFT]  ) 
8001e188:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001e18c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e190:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e194:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001e198:	91 09       	st.w	r8[0x0],r9
						    - (rotor_lifts[M_FRONT_RIGHT] + rotor_lifts[M_REAR_RIGHT] )) * mpos_y;;

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
8001e19a:	ee f9 ff cc 	ld.w	r9,r7[-52]
8001e19e:	ee f8 ff c8 	ld.w	r8,r7[-56]
8001e1a2:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;
8001e1a6:	ee fa ff d0 	ld.w	r10,r7[-48]
8001e1aa:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001e1ae:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
	// torque around x axis (roll)
	sim->torques_bf[ROLL]  = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_REAR_LEFT]  ) 
						    - (rotor_lifts[M_FRONT_RIGHT] + rotor_lifts[M_REAR_RIGHT] )) * mpos_y;;

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
8001e1b2:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001e1b6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e1ba:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e1be:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001e1c2:	91 19       	st.w	r8[0x4],r9
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;

	sim->torques_bf[YAW]   = (M_FL_DIR*(10.0*rotor_drags[M_FRONT_LEFT]+rotor_inertia[M_FRONT_LEFT])  + M_FR_DIR*(10.0*rotor_drags[M_FRONT_RIGHT]+rotor_inertia[M_FRONT_RIGHT])
8001e1c4:	ee f8 ff b8 	ld.w	r8,r7[-72]
8001e1c8:	10 9c       	mov	r12,r8
8001e1ca:	f0 16 00 02 	mcall	r6[8]
8001e1ce:	30 08       	mov	r8,0
8001e1d0:	fc 19 40 24 	movh	r9,0x4024
8001e1d4:	f0 16 00 03 	mcall	r6[12]
8001e1d8:	14 98       	mov	r8,r10
8001e1da:	16 99       	mov	r9,r11
8001e1dc:	10 92       	mov	r2,r8
8001e1de:	12 93       	mov	r3,r9
8001e1e0:	ee f8 ff a8 	ld.w	r8,r7[-88]
							+ M_RL_DIR*(10.0*rotor_drags[M_REAR_LEFT] +rotor_inertia[M_REAR_LEFT])   + M_RR_DIR*(10.0*rotor_drags[M_REAR_RIGHT] +rotor_inertia[M_REAR_RIGHT] ))*  sim->rotor_diameter;
8001e1e4:	10 9c       	mov	r12,r8
8001e1e6:	f0 16 00 02 	mcall	r6[8]
8001e1ea:	14 98       	mov	r8,r10
8001e1ec:	16 99       	mov	r9,r11
8001e1ee:	04 9a       	mov	r10,r2
8001e1f0:	06 9b       	mov	r11,r3
8001e1f2:	f0 16 00 05 	mcall	r6[20]
8001e1f6:	14 98       	mov	r8,r10
8001e1f8:	16 99       	mov	r9,r11
8001e1fa:	10 92       	mov	r2,r8
8001e1fc:	12 93       	mov	r3,r9

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;

	sim->torques_bf[YAW]   = (M_FL_DIR*(10.0*rotor_drags[M_FRONT_LEFT]+rotor_inertia[M_FRONT_LEFT])  + M_FR_DIR*(10.0*rotor_drags[M_FRONT_RIGHT]+rotor_inertia[M_FRONT_RIGHT])
8001e1fe:	ee f8 ff bc 	ld.w	r8,r7[-68]
8001e202:	10 9c       	mov	r12,r8
8001e204:	f0 16 00 02 	mcall	r6[8]
8001e208:	30 08       	mov	r8,0
8001e20a:	fc 19 40 24 	movh	r9,0x4024
8001e20e:	f0 16 00 03 	mcall	r6[12]
8001e212:	14 98       	mov	r8,r10
8001e214:	16 99       	mov	r9,r11
8001e216:	10 90       	mov	r0,r8
8001e218:	12 91       	mov	r1,r9
8001e21a:	ee f8 ff ac 	ld.w	r8,r7[-84]
8001e21e:	10 9c       	mov	r12,r8
8001e220:	f0 16 00 02 	mcall	r6[8]
8001e224:	14 98       	mov	r8,r10
8001e226:	16 99       	mov	r9,r11
8001e228:	00 9a       	mov	r10,r0
8001e22a:	02 9b       	mov	r11,r1
8001e22c:	f0 16 00 05 	mcall	r6[20]
8001e230:	14 98       	mov	r8,r10
8001e232:	16 99       	mov	r9,r11
							+ M_RL_DIR*(10.0*rotor_drags[M_REAR_LEFT] +rotor_inertia[M_REAR_LEFT])   + M_RR_DIR*(10.0*rotor_drags[M_REAR_RIGHT] +rotor_inertia[M_REAR_RIGHT] ))*  sim->rotor_diameter;
8001e234:	04 9a       	mov	r10,r2
8001e236:	06 9b       	mov	r11,r3
8001e238:	f0 16 00 11 	mcall	r6[68]
8001e23c:	14 98       	mov	r8,r10
8001e23e:	16 99       	mov	r9,r11
8001e240:	10 92       	mov	r2,r8
8001e242:	12 93       	mov	r3,r9
8001e244:	ee f8 ff c0 	ld.w	r8,r7[-64]
8001e248:	10 9c       	mov	r12,r8
8001e24a:	f0 16 00 02 	mcall	r6[8]
8001e24e:	30 08       	mov	r8,0
8001e250:	fc 19 40 24 	movh	r9,0x4024
8001e254:	f0 16 00 03 	mcall	r6[12]
8001e258:	14 98       	mov	r8,r10
8001e25a:	16 99       	mov	r9,r11
8001e25c:	10 90       	mov	r0,r8
8001e25e:	12 91       	mov	r1,r9
8001e260:	ee f8 ff b0 	ld.w	r8,r7[-80]
8001e264:	10 9c       	mov	r12,r8
8001e266:	f0 16 00 02 	mcall	r6[8]
8001e26a:	14 98       	mov	r8,r10
8001e26c:	16 99       	mov	r9,r11
8001e26e:	00 9a       	mov	r10,r0
8001e270:	02 9b       	mov	r11,r1
8001e272:	f0 16 00 05 	mcall	r6[20]
8001e276:	14 98       	mov	r8,r10
8001e278:	16 99       	mov	r9,r11
8001e27a:	04 9a       	mov	r10,r2
8001e27c:	06 9b       	mov	r11,r3
8001e27e:	f0 16 00 05 	mcall	r6[20]
8001e282:	14 98       	mov	r8,r10
8001e284:	16 99       	mov	r9,r11
8001e286:	10 92       	mov	r2,r8
8001e288:	12 93       	mov	r3,r9
8001e28a:	ee f8 ff b4 	ld.w	r8,r7[-76]
8001e28e:	10 9c       	mov	r12,r8
8001e290:	f0 16 00 02 	mcall	r6[8]
8001e294:	30 08       	mov	r8,0
8001e296:	fc 19 40 24 	movh	r9,0x4024
8001e29a:	f0 16 00 03 	mcall	r6[12]
8001e29e:	14 98       	mov	r8,r10
8001e2a0:	16 99       	mov	r9,r11
8001e2a2:	10 90       	mov	r0,r8
8001e2a4:	12 91       	mov	r1,r9
8001e2a6:	ee f8 ff a4 	ld.w	r8,r7[-92]
8001e2aa:	10 9c       	mov	r12,r8
8001e2ac:	f0 16 00 02 	mcall	r6[8]
8001e2b0:	14 98       	mov	r8,r10
8001e2b2:	16 99       	mov	r9,r11
8001e2b4:	00 9a       	mov	r10,r0
8001e2b6:	02 9b       	mov	r11,r1
8001e2b8:	f0 16 00 05 	mcall	r6[20]
8001e2bc:	14 98       	mov	r8,r10
8001e2be:	16 99       	mov	r9,r11

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;

	sim->torques_bf[YAW]   = (M_FL_DIR*(10.0*rotor_drags[M_FRONT_LEFT]+rotor_inertia[M_FRONT_LEFT])  + M_FR_DIR*(10.0*rotor_drags[M_FRONT_RIGHT]+rotor_inertia[M_FRONT_RIGHT])
8001e2c0:	04 9a       	mov	r10,r2
8001e2c2:	06 9b       	mov	r11,r3
8001e2c4:	f0 16 00 11 	mcall	r6[68]
8001e2c8:	14 98       	mov	r8,r10
8001e2ca:	16 99       	mov	r9,r11
8001e2cc:	10 92       	mov	r2,r8
8001e2ce:	12 93       	mov	r3,r9
8001e2d0:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001e2d4:	f0 f8 01 68 	ld.w	r8,r8[360]
8001e2d8:	10 9c       	mov	r12,r8
8001e2da:	f0 16 00 02 	mcall	r6[8]
8001e2de:	14 98       	mov	r8,r10
8001e2e0:	16 99       	mov	r9,r11
8001e2e2:	04 9a       	mov	r10,r2
8001e2e4:	06 9b       	mov	r11,r3
8001e2e6:	f0 16 00 03 	mcall	r6[12]
8001e2ea:	14 98       	mov	r8,r10
8001e2ec:	16 99       	mov	r9,r11
8001e2ee:	10 9a       	mov	r10,r8
8001e2f0:	12 9b       	mov	r11,r9
8001e2f2:	f0 16 00 09 	mcall	r6[36]
8001e2f6:	18 99       	mov	r9,r12
8001e2f8:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001e2fc:	91 29       	st.w	r8[0x8],r9
							+ M_RL_DIR*(10.0*rotor_drags[M_REAR_LEFT] +rotor_inertia[M_REAR_LEFT])   + M_RR_DIR*(10.0*rotor_drags[M_REAR_RIGHT] +rotor_inertia[M_REAR_RIGHT] ))*  sim->rotor_diameter;
	

	
	sim->lin_forces_bf[X] = -sim->vel_bf[X]*lateral_airspeed* sim->vehicle_drag;  
8001e2fe:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001e302:	70 98       	ld.w	r8,r8[0x24]
8001e304:	10 99       	mov	r9,r8
8001e306:	ee 19 80 00 	eorh	r9,0x8000
8001e30a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001e30e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e312:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001e316:	f0 f8 01 78 	ld.w	r8,r8[376]
8001e31a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e31e:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001e322:	91 69       	st.w	r8[0x18],r9
	sim->lin_forces_bf[Y] = -sim->vel_bf[Y]*lateral_airspeed* sim->vehicle_drag;
8001e324:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001e328:	70 a8       	ld.w	r8,r8[0x28]
8001e32a:	10 99       	mov	r9,r8
8001e32c:	ee 19 80 00 	eorh	r9,0x8000
8001e330:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001e334:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e338:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001e33c:	f0 f8 01 78 	ld.w	r8,r8[376]
8001e340:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e344:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001e348:	91 79       	st.w	r8[0x1c],r9
	sim->lin_forces_bf[Z] = -(rotor_lifts[M_FRONT_LEFT]+ rotor_lifts[M_FRONT_RIGHT] +rotor_lifts[M_REAR_LEFT] +rotor_lifts[M_REAR_RIGHT]);
8001e34a:	ee f9 ff cc 	ld.w	r9,r7[-52]
8001e34e:	ee f8 ff c8 	ld.w	r8,r7[-56]
8001e352:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e356:	ee f8 ff d0 	ld.w	r8,r7[-48]
8001e35a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e35e:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001e362:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001e366:	10 99       	mov	r9,r8
8001e368:	ee 19 80 00 	eorh	r9,0x8000
8001e36c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001e370:	91 89       	st.w	r8[0x20],r9

}
8001e372:	2e 3d       	sub	sp,-116
8001e374:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8001e378:	80 01       	ld.sh	r1,r0[0x0]
8001e37a:	dd ac       	*unknown*

8001e37c <forces_from_servos_cross_quad>:


void forces_from_servos_cross_quad(simulation_model_t *sim, servo_output *servos){
8001e37c:	eb cd 40 80 	pushm	r7,lr
8001e380:	1a 97       	mov	r7,sp
8001e382:	20 7d       	sub	sp,28
8001e384:	ef 4c ff e8 	st.w	r7[-24],r12
8001e388:	ef 4b ff e4 	st.w	r7[-28],r11

	for (i=0; i<4; i++) {
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
	}
	*/
}
8001e38c:	2f 9d       	sub	sp,-28
8001e38e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001e392 <simu_update>:

void simu_update(simulation_model_t *sim, servo_output *servo_commands, Imu_Data_t *imu, position_estimator_t *pos_est) {
8001e392:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001e396:	1a 97       	mov	r7,sp
8001e398:	21 fd       	sub	sp,124
8001e39a:	fe f6 0b 7a 	ld.w	r6,pc[2938]
8001e39e:	1e 26       	rsub	r6,pc
8001e3a0:	ef 4c ff a0 	st.w	r7[-96],r12
8001e3a4:	ef 4b ff 9c 	st.w	r7[-100],r11
8001e3a8:	ef 4a ff 98 	st.w	r7[-104],r10
8001e3ac:	ef 49 ff 94 	st.w	r7[-108],r9
	int i;
	UQuat_t qtmp1, qvel_bf,  qed;
	const UQuat_t front = {.s=0.0, .v={1.0, 0.0, 0.0}};
8001e3b0:	30 08       	mov	r8,0
8001e3b2:	ef 48 ff b4 	st.w	r7[-76],r8
8001e3b6:	fc 18 3f 80 	movh	r8,0x3f80
8001e3ba:	ef 48 ff b8 	st.w	r7[-72],r8
8001e3be:	30 08       	mov	r8,0
8001e3c0:	ef 48 ff bc 	st.w	r7[-68],r8
8001e3c4:	30 08       	mov	r8,0
8001e3c6:	ef 48 ff c0 	st.w	r7[-64],r8
	const UQuat_t up = {.s=0.0, .v={UPVECTOR_X, UPVECTOR_Y, UPVECTOR_Z}};
8001e3ca:	30 08       	mov	r8,0
8001e3cc:	ef 48 ff a4 	st.w	r7[-92],r8
8001e3d0:	30 08       	mov	r8,0
8001e3d2:	ef 48 ff a8 	st.w	r7[-88],r8
8001e3d6:	30 08       	mov	r8,0
8001e3d8:	ef 48 ff ac 	st.w	r7[-84],r8
8001e3dc:	fc 18 bf 80 	movh	r8,0xbf80
8001e3e0:	ef 48 ff b0 	st.w	r7[-80],r8
	
	central_data_t *central_data;
	uint32_t now=get_micros();
8001e3e4:	f0 16 00 29 	mcall	r6[164]
8001e3e8:	18 98       	mov	r8,r12
8001e3ea:	ef 48 ff fc 	st.w	r7[-4],r8
	sim->dt=(now - sim->last_update)/1000000.0;
8001e3ee:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e3f2:	f0 f8 01 8c 	ld.w	r8,r8[396]
8001e3f6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001e3fa:	f2 08 01 08 	sub	r8,r9,r8
8001e3fe:	10 9c       	mov	r12,r8
8001e400:	f0 16 00 51 	mcall	r6[324]
8001e404:	30 08       	mov	r8,0
8001e406:	e0 69 84 80 	mov	r9,33920
8001e40a:	ea 19 41 2e 	orh	r9,0x412e
8001e40e:	f0 16 00 0c 	mcall	r6[48]
8001e412:	14 98       	mov	r8,r10
8001e414:	16 99       	mov	r9,r11
8001e416:	10 9a       	mov	r10,r8
8001e418:	12 9b       	mov	r11,r9
8001e41a:	f0 16 00 09 	mcall	r6[36]
8001e41e:	18 99       	mov	r9,r12
8001e420:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e424:	f1 49 01 90 	st.w	r8[400],r9
	sim->last_update=now;
8001e428:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e42c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001e430:	f1 49 01 8c 	st.w	r8[396],r9
	central_data=get_central_data();
8001e434:	f0 16 00 33 	mcall	r6[204]
8001e438:	18 98       	mov	r8,r12
8001e43a:	ef 48 ff f8 	st.w	r7[-8],r8
	// compute torques and forces based on servo commands
	#ifdef CONF_DIAG
	forces_from_servos_diag_quad(sim, servo_commands);
8001e43e:	ee fb ff 9c 	ld.w	r11,r7[-100]
8001e442:	ee fc ff a0 	ld.w	r12,r7[-96]
8001e446:	f0 16 01 e2 	mcall	r6[1928]
	forces_from_servos_cross_quad(sim, servo_commands);
	#endif
	
	// integrate torques to get simulated gyro rates (with some damping)
	//for (i=0; i<3; i++) {
	sim->rates_bf[0] = clip((1.0-0.1*sim->dt)*sim->rates_bf[0] + sim->dt * sim->torques_bf[0] /sim->roll_pitch_momentum, 10.0);
8001e44a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e44e:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e452:	10 9c       	mov	r12,r8
8001e454:	f0 16 00 02 	mcall	r6[8]
8001e458:	e0 68 99 9a 	mov	r8,39322
8001e45c:	ea 18 99 99 	orh	r8,0x9999
8001e460:	e0 69 99 99 	mov	r9,39321
8001e464:	ea 19 bf b9 	orh	r9,0xbfb9
8001e468:	f0 16 00 03 	mcall	r6[12]
8001e46c:	14 98       	mov	r8,r10
8001e46e:	16 99       	mov	r9,r11
8001e470:	10 9a       	mov	r10,r8
8001e472:	12 9b       	mov	r11,r9
8001e474:	30 08       	mov	r8,0
8001e476:	fc 19 3f f0 	movh	r9,0x3ff0
8001e47a:	f0 16 00 05 	mcall	r6[20]
8001e47e:	14 98       	mov	r8,r10
8001e480:	16 99       	mov	r9,r11
8001e482:	10 92       	mov	r2,r8
8001e484:	12 93       	mov	r3,r9
8001e486:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e48a:	70 38       	ld.w	r8,r8[0xc]
8001e48c:	10 9c       	mov	r12,r8
8001e48e:	f0 16 00 02 	mcall	r6[8]
8001e492:	14 98       	mov	r8,r10
8001e494:	16 99       	mov	r9,r11
8001e496:	04 9a       	mov	r10,r2
8001e498:	06 9b       	mov	r11,r3
8001e49a:	f0 16 00 03 	mcall	r6[12]
8001e49e:	14 98       	mov	r8,r10
8001e4a0:	16 99       	mov	r9,r11
8001e4a2:	10 92       	mov	r2,r8
8001e4a4:	12 93       	mov	r3,r9
8001e4a6:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e4aa:	f0 f9 01 90 	ld.w	r9,r8[400]
8001e4ae:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e4b2:	70 08       	ld.w	r8,r8[0x0]
8001e4b4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001e4b8:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e4bc:	f2 f9 01 7c 	ld.w	r9,r9[380]
8001e4c0:	12 9b       	mov	r11,r9
8001e4c2:	10 9c       	mov	r12,r8
8001e4c4:	f0 16 00 08 	mcall	r6[32]
8001e4c8:	18 98       	mov	r8,r12
8001e4ca:	10 9c       	mov	r12,r8
8001e4cc:	f0 16 00 02 	mcall	r6[8]
8001e4d0:	14 98       	mov	r8,r10
8001e4d2:	16 99       	mov	r9,r11
8001e4d4:	04 9a       	mov	r10,r2
8001e4d6:	06 9b       	mov	r11,r3
8001e4d8:	f0 16 00 05 	mcall	r6[20]
8001e4dc:	14 98       	mov	r8,r10
8001e4de:	16 99       	mov	r9,r11
8001e4e0:	10 9a       	mov	r10,r8
8001e4e2:	12 9b       	mov	r11,r9
8001e4e4:	f0 16 00 09 	mcall	r6[36]
8001e4e8:	18 98       	mov	r8,r12
8001e4ea:	fc 1b 41 20 	movh	r11,0x4120
8001e4ee:	10 9c       	mov	r12,r8
8001e4f0:	fe b0 fb 2a 	rcall	8001db44 <clip>
8001e4f4:	18 99       	mov	r9,r12
8001e4f6:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e4fa:	91 39       	st.w	r8[0xc],r9
	sim->rates_bf[1] = clip((1.0-0.1*sim->dt)*sim->rates_bf[1] + sim->dt * sim->torques_bf[1] /sim->roll_pitch_momentum, 10.0);
8001e4fc:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e500:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e504:	10 9c       	mov	r12,r8
8001e506:	f0 16 00 02 	mcall	r6[8]
8001e50a:	e0 68 99 9a 	mov	r8,39322
8001e50e:	ea 18 99 99 	orh	r8,0x9999
8001e512:	e0 69 99 99 	mov	r9,39321
8001e516:	ea 19 bf b9 	orh	r9,0xbfb9
8001e51a:	f0 16 00 03 	mcall	r6[12]
8001e51e:	14 98       	mov	r8,r10
8001e520:	16 99       	mov	r9,r11
8001e522:	10 9a       	mov	r10,r8
8001e524:	12 9b       	mov	r11,r9
8001e526:	30 08       	mov	r8,0
8001e528:	fc 19 3f f0 	movh	r9,0x3ff0
8001e52c:	f0 16 00 05 	mcall	r6[20]
8001e530:	14 98       	mov	r8,r10
8001e532:	16 99       	mov	r9,r11
8001e534:	10 92       	mov	r2,r8
8001e536:	12 93       	mov	r3,r9
8001e538:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e53c:	70 48       	ld.w	r8,r8[0x10]
8001e53e:	10 9c       	mov	r12,r8
8001e540:	f0 16 00 02 	mcall	r6[8]
8001e544:	14 98       	mov	r8,r10
8001e546:	16 99       	mov	r9,r11
8001e548:	04 9a       	mov	r10,r2
8001e54a:	06 9b       	mov	r11,r3
8001e54c:	f0 16 00 03 	mcall	r6[12]
8001e550:	14 98       	mov	r8,r10
8001e552:	16 99       	mov	r9,r11
8001e554:	10 92       	mov	r2,r8
8001e556:	12 93       	mov	r3,r9
8001e558:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e55c:	f0 f9 01 90 	ld.w	r9,r8[400]
8001e560:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e564:	70 18       	ld.w	r8,r8[0x4]
8001e566:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001e56a:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e56e:	f2 f9 01 7c 	ld.w	r9,r9[380]
8001e572:	12 9b       	mov	r11,r9
8001e574:	10 9c       	mov	r12,r8
8001e576:	f0 16 00 08 	mcall	r6[32]
8001e57a:	18 98       	mov	r8,r12
8001e57c:	10 9c       	mov	r12,r8
8001e57e:	f0 16 00 02 	mcall	r6[8]
8001e582:	14 98       	mov	r8,r10
8001e584:	16 99       	mov	r9,r11
8001e586:	04 9a       	mov	r10,r2
8001e588:	06 9b       	mov	r11,r3
8001e58a:	f0 16 00 05 	mcall	r6[20]
8001e58e:	14 98       	mov	r8,r10
8001e590:	16 99       	mov	r9,r11
8001e592:	10 9a       	mov	r10,r8
8001e594:	12 9b       	mov	r11,r9
8001e596:	f0 16 00 09 	mcall	r6[36]
8001e59a:	18 98       	mov	r8,r12
8001e59c:	fc 1b 41 20 	movh	r11,0x4120
8001e5a0:	10 9c       	mov	r12,r8
8001e5a2:	fe b0 fa d1 	rcall	8001db44 <clip>
8001e5a6:	18 99       	mov	r9,r12
8001e5a8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e5ac:	91 49       	st.w	r8[0x10],r9
	sim->rates_bf[2] = clip((1.0-0.1*sim->dt)*sim->rates_bf[2] + sim->dt * sim->torques_bf[2] /sim->yaw_momentum, 10.0);
8001e5ae:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e5b2:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e5b6:	10 9c       	mov	r12,r8
8001e5b8:	f0 16 00 02 	mcall	r6[8]
8001e5bc:	e0 68 99 9a 	mov	r8,39322
8001e5c0:	ea 18 99 99 	orh	r8,0x9999
8001e5c4:	e0 69 99 99 	mov	r9,39321
8001e5c8:	ea 19 bf b9 	orh	r9,0xbfb9
8001e5cc:	f0 16 00 03 	mcall	r6[12]
8001e5d0:	14 98       	mov	r8,r10
8001e5d2:	16 99       	mov	r9,r11
8001e5d4:	10 9a       	mov	r10,r8
8001e5d6:	12 9b       	mov	r11,r9
8001e5d8:	30 08       	mov	r8,0
8001e5da:	fc 19 3f f0 	movh	r9,0x3ff0
8001e5de:	f0 16 00 05 	mcall	r6[20]
8001e5e2:	14 98       	mov	r8,r10
8001e5e4:	16 99       	mov	r9,r11
8001e5e6:	10 92       	mov	r2,r8
8001e5e8:	12 93       	mov	r3,r9
8001e5ea:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e5ee:	70 58       	ld.w	r8,r8[0x14]
8001e5f0:	10 9c       	mov	r12,r8
8001e5f2:	f0 16 00 02 	mcall	r6[8]
8001e5f6:	14 98       	mov	r8,r10
8001e5f8:	16 99       	mov	r9,r11
8001e5fa:	04 9a       	mov	r10,r2
8001e5fc:	06 9b       	mov	r11,r3
8001e5fe:	f0 16 00 03 	mcall	r6[12]
8001e602:	14 98       	mov	r8,r10
8001e604:	16 99       	mov	r9,r11
8001e606:	10 92       	mov	r2,r8
8001e608:	12 93       	mov	r3,r9
8001e60a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e60e:	f0 f9 01 90 	ld.w	r9,r8[400]
8001e612:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e616:	70 28       	ld.w	r8,r8[0x8]
8001e618:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001e61c:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e620:	f2 f9 01 80 	ld.w	r9,r9[384]
8001e624:	12 9b       	mov	r11,r9
8001e626:	10 9c       	mov	r12,r8
8001e628:	f0 16 00 08 	mcall	r6[32]
8001e62c:	18 98       	mov	r8,r12
8001e62e:	10 9c       	mov	r12,r8
8001e630:	f0 16 00 02 	mcall	r6[8]
8001e634:	14 98       	mov	r8,r10
8001e636:	16 99       	mov	r9,r11
8001e638:	04 9a       	mov	r10,r2
8001e63a:	06 9b       	mov	r11,r3
8001e63c:	f0 16 00 05 	mcall	r6[20]
8001e640:	14 98       	mov	r8,r10
8001e642:	16 99       	mov	r9,r11
8001e644:	10 9a       	mov	r10,r8
8001e646:	12 9b       	mov	r11,r9
8001e648:	f0 16 00 09 	mcall	r6[36]
8001e64c:	18 98       	mov	r8,r12
8001e64e:	fc 1b 41 20 	movh	r11,0x4120
8001e652:	10 9c       	mov	r12,r8
8001e654:	fe b0 fa 78 	rcall	8001db44 <clip>
8001e658:	18 99       	mov	r9,r12
8001e65a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e65e:	91 59       	st.w	r8[0x14],r9
	//}
	
	
	for (i=0; i<3; i++){
8001e660:	30 08       	mov	r8,0
8001e662:	ef 48 ff f4 	st.w	r7[-12],r8
8001e666:	c1 58       	rjmp	8001e690 <simu_update+0x2fe>
			qtmp1.v[i] = sim->rates_bf[i];
8001e668:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e66c:	ee fa ff f4 	ld.w	r10,r7[-12]
8001e670:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e674:	2f da       	sub	r10,-3
8001e676:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8001e67a:	2f f8       	sub	r8,-1
8001e67c:	a3 68       	lsl	r8,0x2
8001e67e:	ee 08 00 08 	add	r8,r7,r8
8001e682:	f1 49 ff e4 	st.w	r8[-28],r9
	sim->rates_bf[1] = clip((1.0-0.1*sim->dt)*sim->rates_bf[1] + sim->dt * sim->torques_bf[1] /sim->roll_pitch_momentum, 10.0);
	sim->rates_bf[2] = clip((1.0-0.1*sim->dt)*sim->rates_bf[2] + sim->dt * sim->torques_bf[2] /sim->yaw_momentum, 10.0);
	//}
	
	
	for (i=0; i<3; i++){
8001e686:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e68a:	2f f8       	sub	r8,-1
8001e68c:	ef 48 ff f4 	st.w	r7[-12],r8
8001e690:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e694:	58 28       	cp.w	r8,2
8001e696:	fe 9a ff e9 	brle	8001e668 <simu_update+0x2d6>
			qtmp1.v[i] = sim->rates_bf[i];
	}
	qtmp1.s=0;
8001e69a:	30 08       	mov	r8,0
8001e69c:	ef 48 ff e4 	st.w	r7[-28],r8

	// apply step rotation 
	qed = quat_multi(sim->attitude.qe,qtmp1);
8001e6a0:	ee ca 00 3c 	sub	r10,r7,60
8001e6a4:	20 4d       	sub	sp,16
8001e6a6:	1a 98       	mov	r8,sp
8001e6a8:	ee c9 00 1c 	sub	r9,r7,28
8001e6ac:	20 08       	sub	r8,0
8001e6ae:	20 09       	sub	r9,0
8001e6b0:	72 0b       	ld.w	r11,r9[0x0]
8001e6b2:	91 0b       	st.w	r8[0x0],r11
8001e6b4:	72 1b       	ld.w	r11,r9[0x4]
8001e6b6:	91 1b       	st.w	r8[0x4],r11
8001e6b8:	72 2b       	ld.w	r11,r9[0x8]
8001e6ba:	91 2b       	st.w	r8[0x8],r11
8001e6bc:	72 39       	ld.w	r9,r9[0xc]
8001e6be:	91 39       	st.w	r8[0xc],r9
8001e6c0:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e6c4:	20 4d       	sub	sp,16
8001e6c6:	1a 98       	mov	r8,sp
8001e6c8:	2b 89       	sub	r9,-72
8001e6ca:	20 08       	sub	r8,0
8001e6cc:	20 09       	sub	r9,0
8001e6ce:	72 0b       	ld.w	r11,r9[0x0]
8001e6d0:	91 0b       	st.w	r8[0x0],r11
8001e6d2:	72 1b       	ld.w	r11,r9[0x4]
8001e6d4:	91 1b       	st.w	r8[0x4],r11
8001e6d6:	72 2b       	ld.w	r11,r9[0x8]
8001e6d8:	91 2b       	st.w	r8[0x8],r11
8001e6da:	72 39       	ld.w	r9,r9[0xc]
8001e6dc:	91 39       	st.w	r8[0xc],r9
8001e6de:	14 9c       	mov	r12,r10
8001e6e0:	fe b0 f7 90 	rcall	8001d600 <quat_multi>
8001e6e4:	2f 8d       	sub	sp,-32

	sim->attitude.qe.s=sim->attitude.qe.s+qed.s*sim->dt;
8001e6e6:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e6ea:	71 29       	ld.w	r9,r8[0x48]
8001e6ec:	ee fa ff c4 	ld.w	r10,r7[-60]
8001e6f0:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e6f4:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e6f8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e6fc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e700:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e704:	f1 49 00 48 	st.w	r8[72],r9
	sim->attitude.qe.v[0]+=qed.v[0]*sim->dt;
8001e708:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e70c:	71 39       	ld.w	r9,r8[0x4c]
8001e70e:	ee fa ff c8 	ld.w	r10,r7[-56]
8001e712:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e716:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e71a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e71e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e722:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e726:	f1 49 00 4c 	st.w	r8[76],r9
	sim->attitude.qe.v[1]+=qed.v[1]*sim->dt;
8001e72a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e72e:	71 49       	ld.w	r9,r8[0x50]
8001e730:	ee fa ff cc 	ld.w	r10,r7[-52]
8001e734:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e738:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e73c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e740:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e744:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e748:	f1 49 00 50 	st.w	r8[80],r9
	sim->attitude.qe.v[2]+=qed.v[2]*sim->dt;
8001e74c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e750:	71 59       	ld.w	r9,r8[0x54]
8001e752:	ee fa ff d0 	ld.w	r10,r7[-48]
8001e756:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e75a:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e75e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e762:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e766:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e76a:	f1 49 00 54 	st.w	r8[84],r9

	sim->attitude.qe = quat_normalise(sim->attitude.qe);
8001e76e:	ee f5 ff a0 	ld.w	r5,r7[-96]
8001e772:	ee ca 00 7c 	sub	r10,r7,124
8001e776:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e77a:	20 4d       	sub	sp,16
8001e77c:	1a 98       	mov	r8,sp
8001e77e:	2b 89       	sub	r9,-72
8001e780:	20 08       	sub	r8,0
8001e782:	20 09       	sub	r9,0
8001e784:	72 0b       	ld.w	r11,r9[0x0]
8001e786:	91 0b       	st.w	r8[0x0],r11
8001e788:	72 1b       	ld.w	r11,r9[0x4]
8001e78a:	91 1b       	st.w	r8[0x4],r11
8001e78c:	72 2b       	ld.w	r11,r9[0x8]
8001e78e:	91 2b       	st.w	r8[0x8],r11
8001e790:	72 39       	ld.w	r9,r9[0xc]
8001e792:	91 39       	st.w	r8[0xc],r9
8001e794:	14 9c       	mov	r12,r10
8001e796:	fe b0 f9 53 	rcall	8001da3c <quat_normalise>
8001e79a:	2f cd       	sub	sp,-16
8001e79c:	ea c8 ff b8 	sub	r8,r5,-72
8001e7a0:	ee c9 00 7c 	sub	r9,r7,124
8001e7a4:	20 08       	sub	r8,0
8001e7a6:	20 09       	sub	r9,0
8001e7a8:	72 0a       	ld.w	r10,r9[0x0]
8001e7aa:	91 0a       	st.w	r8[0x0],r10
8001e7ac:	72 1a       	ld.w	r10,r9[0x4]
8001e7ae:	91 1a       	st.w	r8[0x4],r10
8001e7b0:	72 2a       	ld.w	r10,r9[0x8]
8001e7b2:	91 2a       	st.w	r8[0x8],r10
8001e7b4:	72 39       	ld.w	r9,r9[0xc]
8001e7b6:	91 39       	st.w	r8[0xc],r9
	sim->attitude.up_vec = quat_global_to_local(sim->attitude.qe, up);
8001e7b8:	ee f5 ff a0 	ld.w	r5,r7[-96]
8001e7bc:	ee ca 00 7c 	sub	r10,r7,124
8001e7c0:	20 4d       	sub	sp,16
8001e7c2:	1a 98       	mov	r8,sp
8001e7c4:	ee c9 00 5c 	sub	r9,r7,92
8001e7c8:	20 08       	sub	r8,0
8001e7ca:	20 09       	sub	r9,0
8001e7cc:	72 0b       	ld.w	r11,r9[0x0]
8001e7ce:	91 0b       	st.w	r8[0x0],r11
8001e7d0:	72 1b       	ld.w	r11,r9[0x4]
8001e7d2:	91 1b       	st.w	r8[0x4],r11
8001e7d4:	72 2b       	ld.w	r11,r9[0x8]
8001e7d6:	91 2b       	st.w	r8[0x8],r11
8001e7d8:	72 39       	ld.w	r9,r9[0xc]
8001e7da:	91 39       	st.w	r8[0xc],r9
8001e7dc:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e7e0:	20 4d       	sub	sp,16
8001e7e2:	1a 98       	mov	r8,sp
8001e7e4:	2b 89       	sub	r9,-72
8001e7e6:	20 08       	sub	r8,0
8001e7e8:	20 09       	sub	r9,0
8001e7ea:	72 0b       	ld.w	r11,r9[0x0]
8001e7ec:	91 0b       	st.w	r8[0x0],r11
8001e7ee:	72 1b       	ld.w	r11,r9[0x4]
8001e7f0:	91 1b       	st.w	r8[0x4],r11
8001e7f2:	72 2b       	ld.w	r11,r9[0x8]
8001e7f4:	91 2b       	st.w	r8[0x8],r11
8001e7f6:	72 39       	ld.w	r9,r9[0xc]
8001e7f8:	91 39       	st.w	r8[0xc],r9
8001e7fa:	14 9c       	mov	r12,r10
8001e7fc:	fe b0 f7 ba 	rcall	8001d770 <quat_global_to_local>
8001e800:	2f 8d       	sub	sp,-32
8001e802:	ea c8 ff a8 	sub	r8,r5,-88
8001e806:	ee c9 00 7c 	sub	r9,r7,124
8001e80a:	20 08       	sub	r8,0
8001e80c:	20 09       	sub	r9,0
8001e80e:	72 0a       	ld.w	r10,r9[0x0]
8001e810:	91 0a       	st.w	r8[0x0],r10
8001e812:	72 1a       	ld.w	r10,r9[0x4]
8001e814:	91 1a       	st.w	r8[0x4],r10
8001e816:	72 2a       	ld.w	r10,r9[0x8]
8001e818:	91 2a       	st.w	r8[0x8],r10
8001e81a:	72 39       	ld.w	r9,r9[0xc]
8001e81c:	91 39       	st.w	r8[0xc],r9
	
	sim->attitude.north_vec=quat_global_to_local(sim->attitude.qe, front);	
8001e81e:	ee f5 ff a0 	ld.w	r5,r7[-96]
8001e822:	ee ca 00 7c 	sub	r10,r7,124
8001e826:	20 4d       	sub	sp,16
8001e828:	1a 98       	mov	r8,sp
8001e82a:	ee c9 00 4c 	sub	r9,r7,76
8001e82e:	20 08       	sub	r8,0
8001e830:	20 09       	sub	r9,0
8001e832:	72 0b       	ld.w	r11,r9[0x0]
8001e834:	91 0b       	st.w	r8[0x0],r11
8001e836:	72 1b       	ld.w	r11,r9[0x4]
8001e838:	91 1b       	st.w	r8[0x4],r11
8001e83a:	72 2b       	ld.w	r11,r9[0x8]
8001e83c:	91 2b       	st.w	r8[0x8],r11
8001e83e:	72 39       	ld.w	r9,r9[0xc]
8001e840:	91 39       	st.w	r8[0xc],r9
8001e842:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e846:	20 4d       	sub	sp,16
8001e848:	1a 98       	mov	r8,sp
8001e84a:	2b 89       	sub	r9,-72
8001e84c:	20 08       	sub	r8,0
8001e84e:	20 09       	sub	r9,0
8001e850:	72 0b       	ld.w	r11,r9[0x0]
8001e852:	91 0b       	st.w	r8[0x0],r11
8001e854:	72 1b       	ld.w	r11,r9[0x4]
8001e856:	91 1b       	st.w	r8[0x4],r11
8001e858:	72 2b       	ld.w	r11,r9[0x8]
8001e85a:	91 2b       	st.w	r8[0x8],r11
8001e85c:	72 39       	ld.w	r9,r9[0xc]
8001e85e:	91 39       	st.w	r8[0xc],r9
8001e860:	14 9c       	mov	r12,r10
8001e862:	fe b0 f7 87 	rcall	8001d770 <quat_global_to_local>
8001e866:	2f 8d       	sub	sp,-32
8001e868:	ea c8 ff 98 	sub	r8,r5,-104
8001e86c:	ee c9 00 7c 	sub	r9,r7,124
8001e870:	20 08       	sub	r8,0
8001e872:	20 09       	sub	r9,0
8001e874:	72 0a       	ld.w	r10,r9[0x0]
8001e876:	91 0a       	st.w	r8[0x0],r10
8001e878:	72 1a       	ld.w	r10,r9[0x4]
8001e87a:	91 1a       	st.w	r8[0x4],r10
8001e87c:	72 2a       	ld.w	r10,r9[0x8]
8001e87e:	91 2a       	st.w	r8[0x8],r10
8001e880:	72 39       	ld.w	r9,r9[0xc]
8001e882:	91 39       	st.w	r8[0xc],r9

	// velocity and position integration
	
	// check altitude - if it is lower than 0, clamp everything (this is in NED, assuming negative altitude)
	if (sim->localPosition.pos[Z] >0) {
8001e884:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e888:	f0 fa 01 1c 	ld.w	r10,r8[284]
8001e88c:	30 18       	mov	r8,1
8001e88e:	30 09       	mov	r9,0
8001e890:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001e894:	e0 8c 00 04 	brvs	8001e89c <simu_update+0x50a>
8001e898:	e0 89 00 03 	brgt	8001e89e <simu_update+0x50c>
8001e89c:	30 08       	mov	r8,0
8001e89e:	5c 58       	castu.b	r8
8001e8a0:	e0 80 00 85 	breq	8001e9aa <simu_update+0x618>
		sim->vel[Z]=0.0;
8001e8a4:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e8a8:	30 09       	mov	r9,0
8001e8aa:	91 e9       	st.w	r8[0x38],r9
		sim->localPosition.pos[Z]=0.0;
8001e8ac:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e8b0:	30 09       	mov	r9,0
8001e8b2:	f1 49 01 1c 	st.w	r8[284],r9

		// simulate "acceleration" caused by contact force with ground, compensating gravity
		for (i=0; i<3; i++) {
8001e8b6:	30 08       	mov	r8,0
8001e8b8:	ef 48 ff f4 	st.w	r7[-12],r8
8001e8bc:	c4 18       	rjmp	8001e93e <simu_update+0x5ac>
			sim->lin_forces_bf[i]+=sim->attitude.up_vec.v[i]*sim->total_mass *GRAVITY;
8001e8be:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001e8c2:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e8c6:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e8ca:	2f a9       	sub	r9,-6
8001e8cc:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e8d0:	10 9c       	mov	r12,r8
8001e8d2:	f0 16 00 02 	mcall	r6[8]
8001e8d6:	14 92       	mov	r2,r10
8001e8d8:	16 93       	mov	r3,r11
8001e8da:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e8de:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e8e2:	2e 99       	sub	r9,-23
8001e8e4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8001e8e8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e8ec:	f0 f8 01 74 	ld.w	r8,r8[372]
8001e8f0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001e8f4:	10 9c       	mov	r12,r8
8001e8f6:	f0 16 00 02 	mcall	r6[8]
8001e8fa:	e0 68 85 1f 	mov	r8,34079
8001e8fe:	ea 18 51 eb 	orh	r8,0x51eb
8001e902:	e0 69 9e b8 	mov	r9,40632
8001e906:	ea 19 40 23 	orh	r9,0x4023
8001e90a:	f0 16 00 03 	mcall	r6[12]
8001e90e:	14 98       	mov	r8,r10
8001e910:	16 99       	mov	r9,r11
8001e912:	04 9a       	mov	r10,r2
8001e914:	06 9b       	mov	r11,r3
8001e916:	f0 16 00 05 	mcall	r6[20]
8001e91a:	14 98       	mov	r8,r10
8001e91c:	16 99       	mov	r9,r11
8001e91e:	10 9a       	mov	r10,r8
8001e920:	12 9b       	mov	r11,r9
8001e922:	f0 16 00 09 	mcall	r6[36]
8001e926:	18 9a       	mov	r10,r12
8001e928:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e92c:	ea c9 ff fa 	sub	r9,r5,-6
8001e930:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	if (sim->localPosition.pos[Z] >0) {
		sim->vel[Z]=0.0;
		sim->localPosition.pos[Z]=0.0;

		// simulate "acceleration" caused by contact force with ground, compensating gravity
		for (i=0; i<3; i++) {
8001e934:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e938:	2f f8       	sub	r8,-1
8001e93a:	ef 48 ff f4 	st.w	r7[-12],r8
8001e93e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e942:	58 28       	cp.w	r8,2
8001e944:	fe 9a ff bd 	brle	8001e8be <simu_update+0x52c>
			sim->lin_forces_bf[i]+=sim->attitude.up_vec.v[i]*sim->total_mass *GRAVITY;
		}
				
		// slow down... (will make velocity slightly inconsistent until next update cycle, but shouldn't matter much)
		for (i=0; i<3; i++) {
8001e948:	30 08       	mov	r8,0
8001e94a:	ef 48 ff f4 	st.w	r7[-12],r8
8001e94e:	c2 98       	rjmp	8001e9a0 <simu_update+0x60e>
			sim->vel_bf[i]=0.95*sim->vel_bf[i];
8001e950:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001e954:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e958:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e95c:	2f 79       	sub	r9,-9
8001e95e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e962:	10 9c       	mov	r12,r8
8001e964:	f0 16 00 02 	mcall	r6[8]
8001e968:	e0 68 66 66 	mov	r8,26214
8001e96c:	ea 18 66 66 	orh	r8,0x6666
8001e970:	e0 69 66 66 	mov	r9,26214
8001e974:	ea 19 3f ee 	orh	r9,0x3fee
8001e978:	f0 16 00 03 	mcall	r6[12]
8001e97c:	14 98       	mov	r8,r10
8001e97e:	16 99       	mov	r9,r11
8001e980:	10 9a       	mov	r10,r8
8001e982:	12 9b       	mov	r11,r9
8001e984:	f0 16 00 09 	mcall	r6[36]
8001e988:	18 9a       	mov	r10,r12
8001e98a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e98e:	ea c9 ff f7 	sub	r9,r5,-9
8001e992:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		for (i=0; i<3; i++) {
			sim->lin_forces_bf[i]+=sim->attitude.up_vec.v[i]*sim->total_mass *GRAVITY;
		}
				
		// slow down... (will make velocity slightly inconsistent until next update cycle, but shouldn't matter much)
		for (i=0; i<3; i++) {
8001e996:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e99a:	2f f8       	sub	r8,-1
8001e99c:	ef 48 ff f4 	st.w	r7[-12],r8
8001e9a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e9a4:	58 28       	cp.w	r8,2
8001e9a6:	fe 9a ff d5 	brle	8001e950 <simu_update+0x5be>
			sim->vel_bf[i]=0.95*sim->vel_bf[i];
		}
	}
	
	for (i=0; i<3; i++){
8001e9aa:	30 08       	mov	r8,0
8001e9ac:	ef 48 ff f4 	st.w	r7[-12],r8
8001e9b0:	c1 58       	rjmp	8001e9da <simu_update+0x648>
			qtmp1.v[i] = sim->vel[i];
8001e9b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e9b6:	ee fa ff f4 	ld.w	r10,r7[-12]
8001e9ba:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e9be:	2f 4a       	sub	r10,-12
8001e9c0:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8001e9c4:	2f f8       	sub	r8,-1
8001e9c6:	a3 68       	lsl	r8,0x2
8001e9c8:	ee 08 00 08 	add	r8,r7,r8
8001e9cc:	f1 49 ff e4 	st.w	r8[-28],r9
		for (i=0; i<3; i++) {
			sim->vel_bf[i]=0.95*sim->vel_bf[i];
		}
	}
	
	for (i=0; i<3; i++){
8001e9d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e9d4:	2f f8       	sub	r8,-1
8001e9d6:	ef 48 ff f4 	st.w	r7[-12],r8
8001e9da:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e9de:	58 28       	cp.w	r8,2
8001e9e0:	fe 9a ff e9 	brle	8001e9b2 <simu_update+0x620>
			qtmp1.v[i] = sim->vel[i];
	}
	qtmp1.s=0.0;
8001e9e4:	30 08       	mov	r8,0
8001e9e6:	ef 48 ff e4 	st.w	r7[-28],r8
	qvel_bf=quat_global_to_local(sim->attitude.qe, qtmp1);
8001e9ea:	ee ca 00 7c 	sub	r10,r7,124
8001e9ee:	20 4d       	sub	sp,16
8001e9f0:	1a 98       	mov	r8,sp
8001e9f2:	ee c9 00 1c 	sub	r9,r7,28
8001e9f6:	20 08       	sub	r8,0
8001e9f8:	20 09       	sub	r9,0
8001e9fa:	72 0b       	ld.w	r11,r9[0x0]
8001e9fc:	91 0b       	st.w	r8[0x0],r11
8001e9fe:	72 1b       	ld.w	r11,r9[0x4]
8001ea00:	91 1b       	st.w	r8[0x4],r11
8001ea02:	72 2b       	ld.w	r11,r9[0x8]
8001ea04:	91 2b       	st.w	r8[0x8],r11
8001ea06:	72 39       	ld.w	r9,r9[0xc]
8001ea08:	91 39       	st.w	r8[0xc],r9
8001ea0a:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001ea0e:	20 4d       	sub	sp,16
8001ea10:	1a 98       	mov	r8,sp
8001ea12:	2b 89       	sub	r9,-72
8001ea14:	20 08       	sub	r8,0
8001ea16:	20 09       	sub	r9,0
8001ea18:	72 0b       	ld.w	r11,r9[0x0]
8001ea1a:	91 0b       	st.w	r8[0x0],r11
8001ea1c:	72 1b       	ld.w	r11,r9[0x4]
8001ea1e:	91 1b       	st.w	r8[0x4],r11
8001ea20:	72 2b       	ld.w	r11,r9[0x8]
8001ea22:	91 2b       	st.w	r8[0x8],r11
8001ea24:	72 39       	ld.w	r9,r9[0xc]
8001ea26:	91 39       	st.w	r8[0xc],r9
8001ea28:	14 9c       	mov	r12,r10
8001ea2a:	fe b0 f6 a3 	rcall	8001d770 <quat_global_to_local>
8001ea2e:	2f 8d       	sub	sp,-32
8001ea30:	ee c8 00 2c 	sub	r8,r7,44
8001ea34:	ee c9 00 7c 	sub	r9,r7,124
8001ea38:	20 08       	sub	r8,0
8001ea3a:	20 09       	sub	r9,0
8001ea3c:	72 0a       	ld.w	r10,r9[0x0]
8001ea3e:	91 0a       	st.w	r8[0x0],r10
8001ea40:	72 1a       	ld.w	r10,r9[0x4]
8001ea42:	91 1a       	st.w	r8[0x4],r10
8001ea44:	72 2a       	ld.w	r10,r9[0x8]
8001ea46:	91 2a       	st.w	r8[0x8],r10
8001ea48:	72 39       	ld.w	r9,r9[0xc]
8001ea4a:	91 39       	st.w	r8[0xc],r9
	for (i=0; i<3; i++) {
8001ea4c:	30 08       	mov	r8,0
8001ea4e:	ef 48 ff f4 	st.w	r7[-12],r8
8001ea52:	c8 08       	rjmp	8001eb52 <simu_update+0x7c0>
		sim->vel_bf[i]=qvel_bf.v[i];
8001ea54:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ea58:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ea5c:	2f f8       	sub	r8,-1
8001ea5e:	a3 68       	lsl	r8,0x2
8001ea60:	ee 08 00 08 	add	r8,r7,r8
8001ea64:	f0 fa ff d4 	ld.w	r10,r8[-44]
8001ea68:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ea6c:	2f 79       	sub	r9,-9
8001ea6e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		// following the convention in the IMU, this is the acceleration due to force, as measured
		sim->attitude.a[i]=sim->lin_forces_bf[i] / sim->total_mass;
8001ea72:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001ea76:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ea7a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ea7e:	2f a9       	sub	r9,-6
8001ea80:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001ea84:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001ea88:	f2 f9 01 74 	ld.w	r9,r9[372]
8001ea8c:	12 9b       	mov	r11,r9
8001ea8e:	10 9c       	mov	r12,r8
8001ea90:	f0 16 00 08 	mcall	r6[32]
8001ea94:	18 98       	mov	r8,r12
8001ea96:	10 9a       	mov	r10,r8
8001ea98:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ea9c:	ea c9 ff cd 	sub	r9,r5,-51
8001eaa0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		// this is the "clean" acceleration without gravity
		sim->attitude.acc_bf[i]=sim->attitude.a[i] - sim->attitude.up_vec.v[i] * GRAVITY;
8001eaa4:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001eaa8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001eaac:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001eab0:	2c d9       	sub	r9,-51
8001eab2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001eab6:	10 9c       	mov	r12,r8
8001eab8:	f0 16 00 02 	mcall	r6[8]
8001eabc:	14 92       	mov	r2,r10
8001eabe:	16 93       	mov	r3,r11
8001eac0:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001eac4:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001eac8:	2e 99       	sub	r9,-23
8001eaca:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001eace:	10 9c       	mov	r12,r8
8001ead0:	f0 16 00 02 	mcall	r6[8]
8001ead4:	e0 68 85 1f 	mov	r8,34079
8001ead8:	ea 18 51 eb 	orh	r8,0x51eb
8001eadc:	e0 69 9e b8 	mov	r9,40632
8001eae0:	ea 19 c0 23 	orh	r9,0xc023
8001eae4:	f0 16 00 03 	mcall	r6[12]
8001eae8:	14 98       	mov	r8,r10
8001eaea:	16 99       	mov	r9,r11
8001eaec:	04 9a       	mov	r10,r2
8001eaee:	06 9b       	mov	r11,r3
8001eaf0:	f0 16 00 05 	mcall	r6[20]
8001eaf4:	14 98       	mov	r8,r10
8001eaf6:	16 99       	mov	r9,r11
8001eaf8:	10 9a       	mov	r10,r8
8001eafa:	12 9b       	mov	r11,r9
8001eafc:	f0 16 00 09 	mcall	r6[36]
8001eb00:	18 9a       	mov	r10,r12
8001eb02:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001eb06:	ea c9 ff be 	sub	r9,r5,-66
8001eb0a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		sim->vel_bf[i]=sim->vel_bf[i] + sim->attitude.acc_bf[i] * sim->dt;
8001eb0e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001eb12:	ee fa ff f4 	ld.w	r10,r7[-12]
8001eb16:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001eb1a:	2f 7a       	sub	r10,-9
8001eb1c:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8001eb20:	ee fb ff f4 	ld.w	r11,r7[-12]
8001eb24:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001eb28:	2b eb       	sub	r11,-66
8001eb2a:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8001eb2e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001eb32:	f0 f8 01 90 	ld.w	r8,r8[400]
8001eb36:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8001eb3a:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8001eb3e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001eb42:	2f 79       	sub	r9,-9
8001eb44:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	for (i=0; i<3; i++){
			qtmp1.v[i] = sim->vel[i];
	}
	qtmp1.s=0.0;
	qvel_bf=quat_global_to_local(sim->attitude.qe, qtmp1);
	for (i=0; i<3; i++) {
8001eb48:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001eb4c:	2f f8       	sub	r8,-1
8001eb4e:	ef 48 ff f4 	st.w	r7[-12],r8
8001eb52:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001eb56:	58 28       	cp.w	r8,2
8001eb58:	fe 9a ff 7e 	brle	8001ea54 <simu_update+0x6c2>
		sim->vel_bf[i]=sim->vel_bf[i] + sim->attitude.acc_bf[i] * sim->dt;
	}
	
	// calculate velocity in global frame
	// vel = qe *vel_bf * qe-1
	qvel_bf.s= 0.0; qvel_bf.v[0]=sim->vel_bf[0]; qvel_bf.v[1]=sim->vel_bf[1]; qvel_bf.v[2]=sim->vel_bf[2];
8001eb5c:	30 08       	mov	r8,0
8001eb5e:	ef 48 ff d4 	st.w	r7[-44],r8
8001eb62:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001eb66:	70 98       	ld.w	r8,r8[0x24]
8001eb68:	ef 48 ff d8 	st.w	r7[-40],r8
8001eb6c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001eb70:	70 a8       	ld.w	r8,r8[0x28]
8001eb72:	ef 48 ff dc 	st.w	r7[-36],r8
8001eb76:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001eb7a:	70 b8       	ld.w	r8,r8[0x2c]
8001eb7c:	ef 48 ff e0 	st.w	r7[-32],r8
	qtmp1 = quat_local_to_global(sim->attitude.qe, qvel_bf);
8001eb80:	ee ca 00 7c 	sub	r10,r7,124
8001eb84:	20 4d       	sub	sp,16
8001eb86:	1a 98       	mov	r8,sp
8001eb88:	ee c9 00 2c 	sub	r9,r7,44
8001eb8c:	20 08       	sub	r8,0
8001eb8e:	20 09       	sub	r9,0
8001eb90:	72 0b       	ld.w	r11,r9[0x0]
8001eb92:	91 0b       	st.w	r8[0x0],r11
8001eb94:	72 1b       	ld.w	r11,r9[0x4]
8001eb96:	91 1b       	st.w	r8[0x4],r11
8001eb98:	72 2b       	ld.w	r11,r9[0x8]
8001eb9a:	91 2b       	st.w	r8[0x8],r11
8001eb9c:	72 39       	ld.w	r9,r9[0xc]
8001eb9e:	91 39       	st.w	r8[0xc],r9
8001eba0:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001eba4:	20 4d       	sub	sp,16
8001eba6:	1a 98       	mov	r8,sp
8001eba8:	2b 89       	sub	r9,-72
8001ebaa:	20 08       	sub	r8,0
8001ebac:	20 09       	sub	r9,0
8001ebae:	72 0b       	ld.w	r11,r9[0x0]
8001ebb0:	91 0b       	st.w	r8[0x0],r11
8001ebb2:	72 1b       	ld.w	r11,r9[0x4]
8001ebb4:	91 1b       	st.w	r8[0x4],r11
8001ebb6:	72 2b       	ld.w	r11,r9[0x8]
8001ebb8:	91 2b       	st.w	r8[0x8],r11
8001ebba:	72 39       	ld.w	r9,r9[0xc]
8001ebbc:	91 39       	st.w	r8[0xc],r9
8001ebbe:	14 9c       	mov	r12,r10
8001ebc0:	fe b0 f6 56 	rcall	8001d86c <quat_local_to_global>
8001ebc4:	2f 8d       	sub	sp,-32
8001ebc6:	ee c8 00 1c 	sub	r8,r7,28
8001ebca:	ee c9 00 7c 	sub	r9,r7,124
8001ebce:	20 08       	sub	r8,0
8001ebd0:	20 09       	sub	r9,0
8001ebd2:	72 0a       	ld.w	r10,r9[0x0]
8001ebd4:	91 0a       	st.w	r8[0x0],r10
8001ebd6:	72 1a       	ld.w	r10,r9[0x4]
8001ebd8:	91 1a       	st.w	r8[0x4],r10
8001ebda:	72 2a       	ld.w	r10,r9[0x8]
8001ebdc:	91 2a       	st.w	r8[0x8],r10
8001ebde:	72 39       	ld.w	r9,r9[0xc]
8001ebe0:	91 39       	st.w	r8[0xc],r9
	sim->vel[0]=qtmp1.v[0]; sim->vel[1]=qtmp1.v[1]; sim->vel[2]=qtmp1.v[2];
8001ebe2:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001ebe6:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ebea:	91 c9       	st.w	r8[0x30],r9
8001ebec:	ee f9 ff ec 	ld.w	r9,r7[-20]
8001ebf0:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ebf4:	91 d9       	st.w	r8[0x34],r9
8001ebf6:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001ebfa:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ebfe:	91 e9       	st.w	r8[0x38],r9
	
	for (i=0; i<3; i++) {
8001ec00:	30 08       	mov	r8,0
8001ec02:	ef 48 ff f4 	st.w	r7[-12],r8
8001ec06:	c2 38       	rjmp	8001ec4c <simu_update+0x8ba>
		sim->localPosition.pos[i] =sim->localPosition.pos[i] + sim->vel[i] * sim->dt;
8001ec08:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ec0c:	ee fa ff f4 	ld.w	r10,r7[-12]
8001ec10:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ec14:	2b ba       	sub	r10,-69
8001ec16:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8001ec1a:	ee fb ff f4 	ld.w	r11,r7[-12]
8001ec1e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ec22:	2f 4b       	sub	r11,-12
8001ec24:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8001ec28:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ec2c:	f0 f8 01 90 	ld.w	r8,r8[400]
8001ec30:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8001ec34:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8001ec38:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ec3c:	2b b9       	sub	r9,-69
8001ec3e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	// vel = qe *vel_bf * qe-1
	qvel_bf.s= 0.0; qvel_bf.v[0]=sim->vel_bf[0]; qvel_bf.v[1]=sim->vel_bf[1]; qvel_bf.v[2]=sim->vel_bf[2];
	qtmp1 = quat_local_to_global(sim->attitude.qe, qvel_bf);
	sim->vel[0]=qtmp1.v[0]; sim->vel[1]=qtmp1.v[1]; sim->vel[2]=qtmp1.v[2];
	
	for (i=0; i<3; i++) {
8001ec42:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ec46:	2f f8       	sub	r8,-1
8001ec48:	ef 48 ff f4 	st.w	r7[-12],r8
8001ec4c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ec50:	58 28       	cp.w	r8,2
8001ec52:	fe 9a ff db 	brle	8001ec08 <simu_update+0x876>



	// fill in simulated IMU values
	
	imu->raw_channels[GYRO_OFFSET+IMU_X]=sim->rates_bf[0] * imu->raw_scale[GYRO_OFFSET+IMU_X]+imu->raw_bias[GYRO_OFFSET+IMU_X];
8001ec56:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ec5a:	70 39       	ld.w	r9,r8[0xc]
8001ec5c:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ec60:	f0 f8 01 14 	ld.w	r8,r8[276]
8001ec64:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001ec68:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ec6c:	f0 f8 00 f0 	ld.w	r8,r8[240]
8001ec70:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001ec74:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ec78:	f1 49 00 cc 	st.w	r8[204],r9
	imu->raw_channels[GYRO_OFFSET+IMU_Y]=sim->rates_bf[1] * imu->raw_scale[GYRO_OFFSET+IMU_Y]+imu->raw_bias[GYRO_OFFSET+IMU_Y];
8001ec7c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ec80:	70 49       	ld.w	r9,r8[0x10]
8001ec82:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ec86:	f0 f8 01 18 	ld.w	r8,r8[280]
8001ec8a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001ec8e:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ec92:	f0 f8 00 f4 	ld.w	r8,r8[244]
8001ec96:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001ec9a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ec9e:	f1 49 00 d0 	st.w	r8[208],r9
	imu->raw_channels[GYRO_OFFSET+IMU_Z]=sim->rates_bf[2] * imu->raw_scale[GYRO_OFFSET+IMU_Z]+imu->raw_bias[GYRO_OFFSET+IMU_Z];
8001eca2:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001eca6:	70 59       	ld.w	r9,r8[0x14]
8001eca8:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ecac:	f0 f8 01 1c 	ld.w	r8,r8[284]
8001ecb0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001ecb4:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ecb8:	f0 f8 00 f8 	ld.w	r8,r8[248]
8001ecbc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001ecc0:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ecc4:	f1 49 00 d4 	st.w	r8[212],r9

	imu->raw_channels[ACC_OFFSET+IMU_X]=(sim->lin_forces_bf[0] / sim->total_mass / GRAVITY)*imu->raw_scale[ACC_OFFSET+IMU_X]+imu->raw_bias[ACC_OFFSET+IMU_X];
8001ecc8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001eccc:	70 68       	ld.w	r8,r8[0x18]
8001ecce:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001ecd2:	f2 f9 01 74 	ld.w	r9,r9[372]
8001ecd6:	12 9b       	mov	r11,r9
8001ecd8:	10 9c       	mov	r12,r8
8001ecda:	f0 16 00 08 	mcall	r6[32]
8001ecde:	18 98       	mov	r8,r12
8001ece0:	10 9c       	mov	r12,r8
8001ece2:	f0 16 00 02 	mcall	r6[8]
8001ece6:	e0 68 85 1f 	mov	r8,34079
8001ecea:	ea 18 51 eb 	orh	r8,0x51eb
8001ecee:	e0 69 9e b8 	mov	r9,40632
8001ecf2:	ea 19 40 23 	orh	r9,0x4023
8001ecf6:	f0 16 00 0c 	mcall	r6[48]
8001ecfa:	14 98       	mov	r8,r10
8001ecfc:	16 99       	mov	r9,r11
8001ecfe:	10 92       	mov	r2,r8
8001ed00:	12 93       	mov	r3,r9
8001ed02:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ed06:	f0 f8 01 20 	ld.w	r8,r8[288]
8001ed0a:	10 9c       	mov	r12,r8
8001ed0c:	f0 16 00 02 	mcall	r6[8]
8001ed10:	14 98       	mov	r8,r10
8001ed12:	16 99       	mov	r9,r11
8001ed14:	04 9a       	mov	r10,r2
8001ed16:	06 9b       	mov	r11,r3
8001ed18:	f0 16 00 03 	mcall	r6[12]
8001ed1c:	14 98       	mov	r8,r10
8001ed1e:	16 99       	mov	r9,r11
8001ed20:	10 92       	mov	r2,r8
8001ed22:	12 93       	mov	r3,r9
8001ed24:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ed28:	f0 f8 00 fc 	ld.w	r8,r8[252]
8001ed2c:	10 9c       	mov	r12,r8
8001ed2e:	f0 16 00 02 	mcall	r6[8]
8001ed32:	14 98       	mov	r8,r10
8001ed34:	16 99       	mov	r9,r11
8001ed36:	04 9a       	mov	r10,r2
8001ed38:	06 9b       	mov	r11,r3
8001ed3a:	f0 16 00 05 	mcall	r6[20]
8001ed3e:	14 98       	mov	r8,r10
8001ed40:	16 99       	mov	r9,r11
8001ed42:	10 9a       	mov	r10,r8
8001ed44:	12 9b       	mov	r11,r9
8001ed46:	f0 16 00 09 	mcall	r6[36]
8001ed4a:	18 99       	mov	r9,r12
8001ed4c:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ed50:	f1 49 00 d8 	st.w	r8[216],r9
	imu->raw_channels[ACC_OFFSET+IMU_Y]=(sim->lin_forces_bf[1] / sim->total_mass / GRAVITY)*imu->raw_scale[ACC_OFFSET+IMU_Y]+imu->raw_bias[ACC_OFFSET+IMU_Y];
8001ed54:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ed58:	70 78       	ld.w	r8,r8[0x1c]
8001ed5a:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001ed5e:	f2 f9 01 74 	ld.w	r9,r9[372]
8001ed62:	12 9b       	mov	r11,r9
8001ed64:	10 9c       	mov	r12,r8
8001ed66:	f0 16 00 08 	mcall	r6[32]
8001ed6a:	18 98       	mov	r8,r12
8001ed6c:	10 9c       	mov	r12,r8
8001ed6e:	f0 16 00 02 	mcall	r6[8]
8001ed72:	e0 68 85 1f 	mov	r8,34079
8001ed76:	ea 18 51 eb 	orh	r8,0x51eb
8001ed7a:	e0 69 9e b8 	mov	r9,40632
8001ed7e:	ea 19 40 23 	orh	r9,0x4023
8001ed82:	f0 16 00 0c 	mcall	r6[48]
8001ed86:	14 98       	mov	r8,r10
8001ed88:	16 99       	mov	r9,r11
8001ed8a:	10 92       	mov	r2,r8
8001ed8c:	12 93       	mov	r3,r9
8001ed8e:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ed92:	f0 f8 01 24 	ld.w	r8,r8[292]
8001ed96:	10 9c       	mov	r12,r8
8001ed98:	f0 16 00 02 	mcall	r6[8]
8001ed9c:	14 98       	mov	r8,r10
8001ed9e:	16 99       	mov	r9,r11
8001eda0:	04 9a       	mov	r10,r2
8001eda2:	06 9b       	mov	r11,r3
8001eda4:	f0 16 00 03 	mcall	r6[12]
8001eda8:	14 98       	mov	r8,r10
8001edaa:	16 99       	mov	r9,r11
8001edac:	10 92       	mov	r2,r8
8001edae:	12 93       	mov	r3,r9
8001edb0:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001edb4:	f0 f8 01 00 	ld.w	r8,r8[256]
8001edb8:	10 9c       	mov	r12,r8
8001edba:	f0 16 00 02 	mcall	r6[8]
8001edbe:	14 98       	mov	r8,r10
8001edc0:	16 99       	mov	r9,r11
8001edc2:	04 9a       	mov	r10,r2
8001edc4:	06 9b       	mov	r11,r3
8001edc6:	f0 16 00 05 	mcall	r6[20]
8001edca:	14 98       	mov	r8,r10
8001edcc:	16 99       	mov	r9,r11
8001edce:	10 9a       	mov	r10,r8
8001edd0:	12 9b       	mov	r11,r9
8001edd2:	f0 16 00 09 	mcall	r6[36]
8001edd6:	18 99       	mov	r9,r12
8001edd8:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001eddc:	f1 49 00 dc 	st.w	r8[220],r9
	imu->raw_channels[ACC_OFFSET+IMU_Z]=(sim->lin_forces_bf[2] / sim->total_mass / GRAVITY)*imu->raw_scale[ACC_OFFSET+IMU_Z]+imu->raw_bias[ACC_OFFSET+IMU_Z];
8001ede0:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ede4:	70 88       	ld.w	r8,r8[0x20]
8001ede6:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001edea:	f2 f9 01 74 	ld.w	r9,r9[372]
8001edee:	12 9b       	mov	r11,r9
8001edf0:	10 9c       	mov	r12,r8
8001edf2:	f0 16 00 08 	mcall	r6[32]
8001edf6:	18 98       	mov	r8,r12
8001edf8:	10 9c       	mov	r12,r8
8001edfa:	f0 16 00 02 	mcall	r6[8]
8001edfe:	e0 68 85 1f 	mov	r8,34079
8001ee02:	ea 18 51 eb 	orh	r8,0x51eb
8001ee06:	e0 69 9e b8 	mov	r9,40632
8001ee0a:	ea 19 40 23 	orh	r9,0x4023
8001ee0e:	f0 16 00 0c 	mcall	r6[48]
8001ee12:	14 98       	mov	r8,r10
8001ee14:	16 99       	mov	r9,r11
8001ee16:	10 92       	mov	r2,r8
8001ee18:	12 93       	mov	r3,r9
8001ee1a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ee1e:	f0 f8 01 28 	ld.w	r8,r8[296]
8001ee22:	10 9c       	mov	r12,r8
8001ee24:	f0 16 00 02 	mcall	r6[8]
8001ee28:	14 98       	mov	r8,r10
8001ee2a:	16 99       	mov	r9,r11
8001ee2c:	04 9a       	mov	r10,r2
8001ee2e:	06 9b       	mov	r11,r3
8001ee30:	f0 16 00 03 	mcall	r6[12]
8001ee34:	14 98       	mov	r8,r10
8001ee36:	16 99       	mov	r9,r11
8001ee38:	10 92       	mov	r2,r8
8001ee3a:	12 93       	mov	r3,r9
8001ee3c:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ee40:	f0 f8 01 04 	ld.w	r8,r8[260]
8001ee44:	10 9c       	mov	r12,r8
8001ee46:	f0 16 00 02 	mcall	r6[8]
8001ee4a:	14 98       	mov	r8,r10
8001ee4c:	16 99       	mov	r9,r11
8001ee4e:	04 9a       	mov	r10,r2
8001ee50:	06 9b       	mov	r11,r3
8001ee52:	f0 16 00 05 	mcall	r6[20]
8001ee56:	14 98       	mov	r8,r10
8001ee58:	16 99       	mov	r9,r11
8001ee5a:	10 9a       	mov	r10,r8
8001ee5c:	12 9b       	mov	r11,r9
8001ee5e:	f0 16 00 09 	mcall	r6[36]
8001ee62:	18 99       	mov	r9,r12
8001ee64:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ee68:	f1 49 00 e0 	st.w	r8[224],r9
	// cheating... provide true upvector instead of simulated forces
	//imu->raw_channels[ACC_OFFSET+IMU_X]=sim->attitude.up_vec.v[0] *imu->raw_scale[ACC_OFFSET+IMU_X]+imu->raw_bias[ACC_OFFSET+IMU_X];
	//imu->raw_channels[ACC_OFFSET+IMU_Y]=sim->attitude.up_vec.v[1] *imu->raw_scale[ACC_OFFSET+IMU_Y]+imu->raw_bias[ACC_OFFSET+IMU_Y];
	//imu->raw_channels[ACC_OFFSET+IMU_Z]=sim->attitude.up_vec.v[2] *imu->raw_scale[ACC_OFFSET+IMU_Z]+imu->raw_bias[ACC_OFFSET+IMU_Z];
	
	imu->raw_channels[COMPASS_OFFSET+IMU_X]=(sim->attitude.north_vec.v[0] )*imu->raw_scale[COMPASS_OFFSET+IMU_X]+imu->raw_bias[COMPASS_OFFSET+IMU_X];
8001ee6c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ee70:	71 b9       	ld.w	r9,r8[0x6c]
8001ee72:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ee76:	f0 f8 01 2c 	ld.w	r8,r8[300]
8001ee7a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001ee7e:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ee82:	f0 f8 01 08 	ld.w	r8,r8[264]
8001ee86:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001ee8a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ee8e:	f1 49 00 e4 	st.w	r8[228],r9
	imu->raw_channels[COMPASS_OFFSET+IMU_Y]=(sim->attitude.north_vec.v[1] )*imu->raw_scale[COMPASS_OFFSET+IMU_Y]+imu->raw_bias[COMPASS_OFFSET+IMU_Y];
8001ee92:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ee96:	71 c9       	ld.w	r9,r8[0x70]
8001ee98:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001ee9c:	f0 f8 01 30 	ld.w	r8,r8[304]
8001eea0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001eea4:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001eea8:	f0 f8 01 0c 	ld.w	r8,r8[268]
8001eeac:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001eeb0:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001eeb4:	f1 49 00 e8 	st.w	r8[232],r9
	imu->raw_channels[COMPASS_OFFSET+IMU_Z]=(sim->attitude.north_vec.v[2] )*imu->raw_scale[COMPASS_OFFSET+IMU_Z]+imu->raw_bias[COMPASS_OFFSET+IMU_Z];
8001eeb8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001eebc:	71 d9       	ld.w	r9,r8[0x74]
8001eebe:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001eec2:	f0 f8 01 34 	ld.w	r8,r8[308]
8001eec6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001eeca:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001eece:	f0 f8 01 10 	ld.w	r8,r8[272]
8001eed2:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001eed6:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001eeda:	f1 49 00 ec 	st.w	r8[236],r9
	
	
	//imu->dt=sim->dt;

	sim->localPosition.heading=get_yaw(sim->attitude.qe);
8001eede:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001eee2:	20 4d       	sub	sp,16
8001eee4:	1a 98       	mov	r8,sp
8001eee6:	2b 89       	sub	r9,-72
8001eee8:	20 08       	sub	r8,0
8001eeea:	20 09       	sub	r9,0
8001eeec:	72 0a       	ld.w	r10,r9[0x0]
8001eeee:	91 0a       	st.w	r8[0x0],r10
8001eef0:	72 1a       	ld.w	r10,r9[0x4]
8001eef2:	91 1a       	st.w	r8[0x4],r10
8001eef4:	72 2a       	ld.w	r10,r9[0x8]
8001eef6:	91 2a       	st.w	r8[0x8],r10
8001eef8:	72 39       	ld.w	r9,r9[0xc]
8001eefa:	91 39       	st.w	r8[0xc],r9
8001eefc:	f0 16 01 12 	mcall	r6[1096]
8001ef00:	2f cd       	sub	sp,-16
8001ef02:	18 99       	mov	r9,r12
8001ef04:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ef08:	f1 49 01 20 	st.w	r8[288],r9
	//pos_est->localPosition=sim->localPosition;
}
8001ef0c:	2e 1d       	sub	sp,-124
8001ef0e:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001ef12:	00 00       	add	r0,r0
8001ef14:	80 01       	ld.sh	r1,r0[0x0]
8001ef16:	e2 22 eb cd 	sub	r2,191437

8001ef18 <simulate_barometer>:

void simulate_barometer(simulation_model_t *sim, pressure_data *pressure) {
8001ef18:	eb cd 40 c0 	pushm	r6-r7,lr
8001ef1c:	1a 97       	mov	r7,sp
8001ef1e:	20 2d       	sub	sp,8
8001ef20:	49 36       	lddpc	r6,8001ef6c <simulate_barometer+0x54>
8001ef22:	1e 26       	rsub	r6,pc
8001ef24:	ef 4c ff fc 	st.w	r7[-4],r12
8001ef28:	ef 4b ff f8 	st.w	r7[-8],r11

		pressure->altitude=sim->localPosition.origin.altitude - sim->localPosition.pos[Z];
8001ef2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ef30:	f0 f9 01 34 	ld.w	r9,r8[308]
8001ef34:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ef38:	f0 f8 01 1c 	ld.w	r8,r8[284]
8001ef3c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001ef40:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ef44:	91 79       	st.w	r8[0x1c],r9
		pressure->vario_vz=sim->vel[Z];
8001ef46:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ef4a:	70 e9       	ld.w	r9,r8[0x38]
8001ef4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ef50:	91 99       	st.w	r8[0x24],r9
		pressure->last_update=get_millis();
8001ef52:	f0 16 00 0f 	mcall	r6[60]
8001ef56:	18 99       	mov	r9,r12
8001ef58:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ef5c:	91 a9       	st.w	r8[0x28],r9
		pressure->altitude_offset=0;
8001ef5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ef62:	30 09       	mov	r9,0
8001ef64:	91 89       	st.w	r8[0x20],r9
		
	}
8001ef66:	2f ed       	sub	sp,-8
8001ef68:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ef6c:	80 01       	ld.sh	r1,r0[0x0]
8001ef6e:	ed a6       	*unknown*

8001ef70 <simulate_gps>:
	
void simulate_gps(simulation_model_t *sim, gps_Data_type *gps) {
8001ef70:	eb cd 40 c0 	pushm	r6-r7,lr
8001ef74:	1a 97       	mov	r7,sp
8001ef76:	20 9d       	sub	sp,36
8001ef78:	4a b6       	lddpc	r6,8001f024 <simulate_gps+0xb4>
8001ef7a:	1e 26       	rsub	r6,pc
8001ef7c:	ef 4c ff e0 	st.w	r7[-32],r12
8001ef80:	ef 4b ff dc 	st.w	r7[-36],r11
		global_position_t gpos=local_to_global_position(sim->localPosition);
8001ef84:	ee cc 00 1c 	sub	r12,r7,28
8001ef88:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001ef8c:	20 cd       	sub	sp,48
8001ef8e:	1a 99       	mov	r9,sp
8001ef90:	12 9b       	mov	r11,r9
8001ef92:	f0 ca fe ec 	sub	r10,r8,-276
8001ef96:	f6 c8 00 00 	sub	r8,r11,0
8001ef9a:	f4 c9 00 00 	sub	r9,r10,0
8001ef9e:	72 0e       	ld.w	lr,r9[0x0]
8001efa0:	91 0e       	st.w	r8[0x0],lr
8001efa2:	72 1e       	ld.w	lr,r9[0x4]
8001efa4:	91 1e       	st.w	r8[0x4],lr
8001efa6:	72 2e       	ld.w	lr,r9[0x8]
8001efa8:	91 2e       	st.w	r8[0x8],lr
8001efaa:	72 39       	ld.w	r9,r9[0xc]
8001efac:	91 39       	st.w	r8[0xc],r9
8001efae:	f6 c8 ff f0 	sub	r8,r11,-16
8001efb2:	f4 c9 ff f0 	sub	r9,r10,-16
8001efb6:	72 0e       	ld.w	lr,r9[0x0]
8001efb8:	91 0e       	st.w	r8[0x0],lr
8001efba:	72 1e       	ld.w	lr,r9[0x4]
8001efbc:	91 1e       	st.w	r8[0x4],lr
8001efbe:	72 2e       	ld.w	lr,r9[0x8]
8001efc0:	91 2e       	st.w	r8[0x8],lr
8001efc2:	72 39       	ld.w	r9,r9[0xc]
8001efc4:	91 39       	st.w	r8[0xc],r9
8001efc6:	f6 c8 ff e0 	sub	r8,r11,-32
8001efca:	f4 c9 ff e0 	sub	r9,r10,-32
8001efce:	72 0a       	ld.w	r10,r9[0x0]
8001efd0:	91 0a       	st.w	r8[0x0],r10
8001efd2:	72 1a       	ld.w	r10,r9[0x4]
8001efd4:	91 1a       	st.w	r8[0x4],r10
8001efd6:	72 2a       	ld.w	r10,r9[0x8]
8001efd8:	91 2a       	st.w	r8[0x8],r10
8001efda:	72 39       	ld.w	r9,r9[0xc]
8001efdc:	91 39       	st.w	r8[0xc],r9
8001efde:	f0 16 00 88 	mcall	r6[544]
8001efe2:	2f 4d       	sub	sp,-48
	
		gps->altitude=gpos.altitude;
8001efe4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001efe8:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001efec:	91 49       	st.w	r8[0x10],r9
		gps->latitude=gpos.latitude;
8001efee:	ee e8 ff ec 	ld.d	r8,r7[-20]
8001eff2:	ee fa ff dc 	ld.w	r10,r7[-36]
8001eff6:	f4 e9 00 00 	st.d	r10[0],r8
		gps->longitude=gpos.longitude;
8001effa:	ee e8 ff e4 	ld.d	r8,r7[-28]
8001effe:	ee fa ff dc 	ld.w	r10,r7[-36]
8001f002:	f4 e9 00 08 	st.d	r10[8],r8
		gps->timeLastMsg=get_millis();
8001f006:	f0 16 00 0f 	mcall	r6[60]
8001f00a:	18 99       	mov	r9,r12
8001f00c:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001f010:	f1 49 00 44 	st.w	r8[68],r9
		gps->status=GPS_OK;
8001f014:	ee f9 ff dc 	ld.w	r9,r7[-36]
8001f018:	30 28       	mov	r8,2
8001f01a:	f3 68 00 4c 	st.b	r9[76],r8
	

}
8001f01e:	2f 7d       	sub	sp,-36
8001f020:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f024:	80 01       	ld.sh	r1,r0[0x0]
8001f026:	ed fe eb cd 	st.wqs	r6[0x734],lr

8001f028 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
8001f028:	eb cd 40 80 	pushm	r7,lr
8001f02c:	1a 97       	mov	r7,sp
8001f02e:	20 3d       	sub	sp,12
8001f030:	18 98       	mov	r8,r12
8001f032:	ef 4b ff f4 	st.w	r7[-12],r11
8001f036:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
8001f03a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f03e:	90 08       	ld.sh	r8,r8[0x0]
8001f040:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001f044:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001f048:	f3 e8 20 08 	eor	r8,r9,r8
8001f04c:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
8001f050:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001f054:	a5 68       	lsl	r8,0x4
8001f056:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001f05a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001f05e:	f3 e8 20 08 	eor	r8,r9,r8
8001f062:	5c 58       	castu.b	r8
8001f064:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
8001f068:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f06c:	90 08       	ld.sh	r8,r8[0x0]
8001f06e:	5c 78       	castu.h	r8
8001f070:	a9 88       	lsr	r8,0x8
8001f072:	5c 88       	casts.h	r8
8001f074:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001f078:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001f07c:	a9 68       	lsl	r8,0x8
8001f07e:	5c 88       	casts.h	r8
8001f080:	f3 e8 20 08 	eor	r8,r9,r8
8001f084:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001f088:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001f08c:	a3 78       	lsl	r8,0x3
8001f08e:	5c 88       	casts.h	r8
8001f090:	f3 e8 20 08 	eor	r8,r9,r8
8001f094:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001f098:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001f09c:	a5 88       	lsr	r8,0x4
8001f09e:	5c 58       	castu.b	r8
8001f0a0:	f3 e8 20 08 	eor	r8,r9,r8
8001f0a4:	5c 88       	casts.h	r8
8001f0a6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001f0aa:	b2 08       	st.h	r9[0x0],r8
}
8001f0ac:	2f dd       	sub	sp,-12
8001f0ae:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f0b2 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
8001f0b2:	eb cd 40 80 	pushm	r7,lr
8001f0b6:	1a 97       	mov	r7,sp
8001f0b8:	20 1d       	sub	sp,4
8001f0ba:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
8001f0be:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001f0c2:	3f f8       	mov	r8,-1
8001f0c4:	b2 08       	st.h	r9[0x0],r8
}
8001f0c6:	2f fd       	sub	sp,-4
8001f0c8:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f0cc <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
8001f0cc:	eb cd 40 c0 	pushm	r6-r7,lr
8001f0d0:	1a 97       	mov	r7,sp
8001f0d2:	20 3d       	sub	sp,12
8001f0d4:	49 76       	lddpc	r6,8001f130 <crc_calculate+0x64>
8001f0d6:	1e 26       	rsub	r6,pc
8001f0d8:	ef 4c ff f8 	st.w	r7[-8],r12
8001f0dc:	16 98       	mov	r8,r11
8001f0de:	ef 58 ff f4 	st.h	r7[-12],r8
        uint16_t crcTmp;
        crc_init(&crcTmp);
8001f0e2:	ee c8 00 02 	sub	r8,r7,2
8001f0e6:	10 9c       	mov	r12,r8
8001f0e8:	ce 5f       	rcall	8001f0b2 <crc_init>
	while (length--) {
8001f0ea:	c0 e8       	rjmp	8001f106 <crc_calculate+0x3a>
                crc_accumulate(*pBuffer++, &crcTmp);
8001f0ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f0f0:	11 88       	ld.ub	r8,r8[0x0]
8001f0f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f0f6:	2f f9       	sub	r9,-1
8001f0f8:	ef 49 ff f8 	st.w	r7[-8],r9
8001f0fc:	ee c9 00 02 	sub	r9,r7,2
8001f100:	12 9b       	mov	r11,r9
8001f102:	10 9c       	mov	r12,r8
8001f104:	c9 2f       	rcall	8001f028 <crc_accumulate>
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
8001f106:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8001f10a:	30 08       	mov	r8,0
8001f10c:	f0 09 19 00 	cp.h	r9,r8
8001f110:	5f 18       	srne	r8
8001f112:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001f116:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8001f11a:	20 18       	sub	r8,1
8001f11c:	ef 58 ff f4 	st.h	r7[-12],r8
8001f120:	58 09       	cp.w	r9,0
8001f122:	ce 51       	brne	8001f0ec <crc_calculate+0x20>
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
8001f124:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8001f128:	10 9c       	mov	r12,r8
8001f12a:	2f dd       	sub	sp,-12
8001f12c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f130:	80 01       	ld.sh	r1,r0[0x0]
8001f132:	ef 5a eb cd 	st.h	r7[-5171],r10

8001f134 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
8001f134:	eb cd 40 c0 	pushm	r6-r7,lr
8001f138:	1a 97       	mov	r7,sp
8001f13a:	20 4d       	sub	sp,16
8001f13c:	49 66       	lddpc	r6,8001f194 <crc_accumulate_buffer+0x60>
8001f13e:	1e 26       	rsub	r6,pc
8001f140:	ef 4c ff f8 	st.w	r7[-8],r12
8001f144:	ef 4b ff f4 	st.w	r7[-12],r11
8001f148:	14 98       	mov	r8,r10
8001f14a:	ef 68 ff f0 	st.b	r7[-16],r8
	const uint8_t *p = (const uint8_t *)pBuffer;
8001f14e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f152:	ef 48 ff fc 	st.w	r7[-4],r8
	while (length--) {
8001f156:	c0 d8       	rjmp	8001f170 <crc_accumulate_buffer+0x3c>
                crc_accumulate(*p++, crcAccum);
8001f158:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f15c:	11 88       	ld.ub	r8,r8[0x0]
8001f15e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001f162:	2f f9       	sub	r9,-1
8001f164:	ef 49 ff fc 	st.w	r7[-4],r9
8001f168:	ee fb ff f8 	ld.w	r11,r7[-8]
8001f16c:	10 9c       	mov	r12,r8
8001f16e:	c5 df       	rcall	8001f028 <crc_accumulate>
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
8001f170:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8001f174:	30 08       	mov	r8,0
8001f176:	f0 09 18 00 	cp.b	r9,r8
8001f17a:	5f 18       	srne	r8
8001f17c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001f180:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001f184:	20 18       	sub	r8,1
8001f186:	ef 68 ff f0 	st.b	r7[-16],r8
8001f18a:	58 09       	cp.w	r9,0
8001f18c:	ce 61       	brne	8001f158 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
        }
}
8001f18e:	2f cd       	sub	sp,-16
8001f190:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f194:	80 01       	ld.sh	r1,r0[0x0]
8001f196:	ef c2 eb cd 	stmts	--r2,r0,r2-r3,r6-r9,r11,sp-pc

8001f198 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
8001f198:	eb cd 40 c0 	pushm	r6-r7,lr
8001f19c:	1a 97       	mov	r7,sp
8001f19e:	20 1d       	sub	sp,4
8001f1a0:	48 96       	lddpc	r6,8001f1c4 <mavlink_get_channel_status+0x2c>
8001f1a2:	1e 26       	rsub	r6,pc
8001f1a4:	18 98       	mov	r8,r12
8001f1a6:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
8001f1aa:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001f1ae:	f0 09 15 04 	lsl	r9,r8,0x4
8001f1b2:	ec f8 08 a4 	ld.w	r8,r6[2212]
8001f1b6:	f2 08 00 08 	add	r8,r9,r8
}
8001f1ba:	10 9c       	mov	r12,r8
8001f1bc:	2f fd       	sub	sp,-4
8001f1be:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f1c2:	00 00       	add	r0,r0
8001f1c4:	80 01       	ld.sh	r1,r0[0x0]
8001f1c6:	f0 26 eb cd 	sub	r6,-988211

8001f1c8 <_mav_finalize_message_chan_send>:
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, 
						    uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, uint8_t length)
#endif
{
8001f1c8:	eb cd 40 c0 	pushm	r6-r7,lr
8001f1cc:	1a 97       	mov	r7,sp
8001f1ce:	20 9d       	sub	sp,36
8001f1d0:	4b d6       	lddpc	r6,8001f2c4 <_mav_finalize_message_chan_send+0xfc>
8001f1d2:	1e 26       	rsub	r6,pc
8001f1d4:	ef 4c ff ec 	st.w	r7[-20],r12
8001f1d8:	ef 4a ff e4 	st.w	r7[-28],r10
8001f1dc:	16 9a       	mov	r10,r11
8001f1de:	ef 6a ff e8 	st.b	r7[-24],r10
8001f1e2:	ef 69 ff e0 	st.b	r7[-32],r9
8001f1e6:	ef 68 ff dc 	st.b	r7[-36],r8
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
8001f1ea:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001f1ee:	5c 58       	castu.b	r8
8001f1f0:	10 9c       	mov	r12,r8
8001f1f2:	cd 3f       	rcall	8001f198 <mavlink_get_channel_status>
8001f1f4:	18 98       	mov	r8,r12
8001f1f6:	ef 48 ff fc 	st.w	r7[-4],r8
	buf[0] = MAVLINK_STX;
8001f1fa:	3f e8       	mov	r8,-2
8001f1fc:	ef 68 ff f4 	st.b	r7[-12],r8
	buf[1] = length;
8001f200:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8001f204:	ef 68 ff f5 	st.b	r7[-11],r8
	buf[2] = status->current_tx_seq;
8001f208:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f20c:	f1 38 00 0a 	ld.ub	r8,r8[10]
8001f210:	ef 68 ff f6 	st.b	r7[-10],r8
	buf[3] = mavlink_system.sysid;
8001f214:	ec f8 00 70 	ld.w	r8,r6[112]
8001f218:	11 88       	ld.ub	r8,r8[0x0]
8001f21a:	ef 68 ff f7 	st.b	r7[-9],r8
	buf[4] = mavlink_system.compid;
8001f21e:	ec f8 00 70 	ld.w	r8,r6[112]
8001f222:	11 98       	ld.ub	r8,r8[0x1]
8001f224:	ef 68 ff f8 	st.b	r7[-8],r8
	buf[5] = msgid;
8001f228:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8001f22c:	ef 68 ff f9 	st.b	r7[-7],r8
	status->current_tx_seq++;
8001f230:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f234:	f1 38 00 0a 	ld.ub	r8,r8[10]
8001f238:	2f f8       	sub	r8,-1
8001f23a:	5c 58       	castu.b	r8
8001f23c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001f240:	f3 68 00 0a 	st.b	r9[10],r8
	checksum = crc_calculate((uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
8001f244:	ee c8 00 0c 	sub	r8,r7,12
8001f248:	2f f8       	sub	r8,-1
8001f24a:	30 5b       	mov	r11,5
8001f24c:	10 9c       	mov	r12,r8
8001f24e:	c3 ff       	rcall	8001f0cc <crc_calculate>
8001f250:	18 98       	mov	r8,r12
8001f252:	5c 88       	casts.h	r8
8001f254:	ef 58 ff fa 	st.h	r7[-6],r8
	crc_accumulate_buffer(&checksum, packet, length);
8001f258:	ef 39 ff e0 	ld.ub	r9,r7[-32]
8001f25c:	ee c8 00 06 	sub	r8,r7,6
8001f260:	12 9a       	mov	r10,r9
8001f262:	ee fb ff e4 	ld.w	r11,r7[-28]
8001f266:	10 9c       	mov	r12,r8
8001f268:	c6 6f       	rcall	8001f134 <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
8001f26a:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8001f26e:	ee c9 00 06 	sub	r9,r7,6
8001f272:	12 9b       	mov	r11,r9
8001f274:	10 9c       	mov	r12,r8
8001f276:	cd 9e       	rcall	8001f028 <crc_accumulate>
#endif
	ck[0] = (uint8_t)(checksum & 0xFF);
8001f278:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8001f27c:	5c 58       	castu.b	r8
8001f27e:	ef 68 ff f0 	st.b	r7[-16],r8
	ck[1] = (uint8_t)(checksum >> 8);
8001f282:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8001f286:	5c 78       	castu.h	r8
8001f288:	a9 88       	lsr	r8,0x8
8001f28a:	5c 88       	casts.h	r8
8001f28c:	5c 58       	castu.b	r8
8001f28e:	ef 68 ff f1 	st.b	r7[-15],r8

	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
8001f292:	ee c8 00 0c 	sub	r8,r7,12
8001f296:	30 6a       	mov	r10,6
8001f298:	10 9b       	mov	r11,r8
8001f29a:	ee fc ff ec 	ld.w	r12,r7[-20]
8001f29e:	c1 5c       	rcall	8001f2c8 <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
8001f2a0:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8001f2a4:	10 9a       	mov	r10,r8
8001f2a6:	ee fb ff e4 	ld.w	r11,r7[-28]
8001f2aa:	ee fc ff ec 	ld.w	r12,r7[-20]
8001f2ae:	c0 dc       	rcall	8001f2c8 <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
8001f2b0:	ee c8 00 10 	sub	r8,r7,16
8001f2b4:	30 2a       	mov	r10,2
8001f2b6:	10 9b       	mov	r11,r8
8001f2b8:	ee fc ff ec 	ld.w	r12,r7[-20]
8001f2bc:	c0 6c       	rcall	8001f2c8 <_mavlink_send_uart>
	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
}
8001f2be:	2f 7d       	sub	sp,-36
8001f2c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f2c4:	80 01       	ld.sh	r1,r0[0x0]
8001f2c6:	f0 56 eb cd 	cp.w	r6,-922675

8001f2c8 <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
8001f2c8:	eb cd 40 c0 	pushm	r6-r7,lr
8001f2cc:	1a 97       	mov	r7,sp
8001f2ce:	20 4d       	sub	sp,16
8001f2d0:	49 46       	lddpc	r6,8001f320 <_mavlink_send_uart+0x58>
8001f2d2:	1e 26       	rsub	r6,pc
8001f2d4:	ef 4c ff f8 	st.w	r7[-8],r12
8001f2d8:	ef 4b ff f4 	st.w	r7[-12],r11
8001f2dc:	14 98       	mov	r8,r10
8001f2de:	ef 58 ff f0 	st.h	r7[-16],r8
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8001f2e2:	30 08       	mov	r8,0
8001f2e4:	ef 58 ff fe 	st.h	r7[-2],r8
8001f2e8:	c1 28       	rjmp	8001f30c <_mavlink_send_uart+0x44>
		comm_send_ch(chan, (uint8_t)buf[i]);
8001f2ea:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8001f2ee:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001f2f2:	f2 08 00 08 	add	r8,r9,r8
8001f2f6:	11 88       	ld.ub	r8,r8[0x0]
8001f2f8:	10 9b       	mov	r11,r8
8001f2fa:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f2fe:	f0 16 00 d5 	mcall	r6[852]
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8001f302:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001f306:	2f f8       	sub	r8,-1
8001f308:	ef 58 ff fe 	st.h	r7[-2],r8
8001f30c:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8001f310:	ef 08 ff f0 	ld.sh	r8,r7[-16]
8001f314:	f0 09 19 00 	cp.h	r9,r8
8001f318:	ce 93       	brcs	8001f2ea <_mavlink_send_uart+0x22>
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
8001f31a:	2f cd       	sub	sp,-16
8001f31c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f320:	80 01       	ld.sh	r1,r0[0x0]
8001f322:	f1 56 eb cd 	st.h	r8[-5171],r6

8001f324 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
8001f324:	eb cd 40 80 	pushm	r7,lr
8001f328:	1a 97       	mov	r7,sp
8001f32a:	20 2d       	sub	sp,8
8001f32c:	ef 4c ff fc 	st.w	r7[-4],r12
8001f330:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
8001f334:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f338:	2f f8       	sub	r8,-1
8001f33a:	11 88       	ld.ub	r8,r8[0x0]
8001f33c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001f340:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
8001f342:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f346:	f0 c9 ff ff 	sub	r9,r8,-1
8001f34a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f34e:	11 88       	ld.ub	r8,r8[0x0]
8001f350:	b2 88       	st.b	r9[0x0],r8
}
8001f352:	2f ed       	sub	sp,-8
8001f354:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f358 <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
8001f358:	eb cd 40 80 	pushm	r7,lr
8001f35c:	1a 97       	mov	r7,sp
8001f35e:	20 2d       	sub	sp,8
8001f360:	ef 4c ff fc 	st.w	r7[-4],r12
8001f364:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
8001f368:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f36c:	2f d8       	sub	r8,-3
8001f36e:	11 88       	ld.ub	r8,r8[0x0]
8001f370:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001f374:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
8001f376:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f37a:	f0 c9 ff ff 	sub	r9,r8,-1
8001f37e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f382:	2f e8       	sub	r8,-2
8001f384:	11 88       	ld.ub	r8,r8[0x0]
8001f386:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
8001f388:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f38c:	f0 c9 ff fe 	sub	r9,r8,-2
8001f390:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f394:	2f f8       	sub	r8,-1
8001f396:	11 88       	ld.ub	r8,r8[0x0]
8001f398:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
8001f39a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f39e:	f0 c9 ff fd 	sub	r9,r8,-3
8001f3a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f3a6:	11 88       	ld.ub	r8,r8[0x0]
8001f3a8:	b2 88       	st.b	r9[0x0],r8
}
8001f3aa:	2f ed       	sub	sp,-8
8001f3ac:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f3b0 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8001f3b0:	eb cd 40 c0 	pushm	r6-r7,lr
8001f3b4:	1a 97       	mov	r7,sp
8001f3b6:	20 3d       	sub	sp,12
8001f3b8:	49 06       	lddpc	r6,8001f3f8 <mav_array_memcpy+0x48>
8001f3ba:	1e 26       	rsub	r6,pc
8001f3bc:	ef 4c ff fc 	st.w	r7[-4],r12
8001f3c0:	ef 4b ff f8 	st.w	r7[-8],r11
8001f3c4:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8001f3c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f3cc:	58 08       	cp.w	r8,0
8001f3ce:	c0 91       	brne	8001f3e0 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8001f3d0:	ee fa ff f4 	ld.w	r10,r7[-12]
8001f3d4:	30 0b       	mov	r11,0
8001f3d6:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f3da:	f0 16 00 31 	mcall	r6[196]
8001f3de:	c0 98       	rjmp	8001f3f0 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8001f3e0:	ee fa ff f4 	ld.w	r10,r7[-12]
8001f3e4:	ee fb ff f8 	ld.w	r11,r7[-8]
8001f3e8:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f3ec:	f0 16 00 21 	mcall	r6[132]
	}
}
8001f3f0:	2f dd       	sub	sp,-12
8001f3f2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f3f6:	00 00       	add	r0,r0
8001f3f8:	80 01       	ld.sh	r1,r0[0x0]
8001f3fa:	f2 3e eb cd 	sub	lr,-791603

8001f3fc <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
8001f3fc:	eb cd 40 c0 	pushm	r6-r7,lr
8001f400:	1a 97       	mov	r7,sp
8001f402:	20 3d       	sub	sp,12
8001f404:	48 d6       	lddpc	r6,8001f438 <_MAV_RETURN_uint16_t+0x3c>
8001f406:	1e 26       	rsub	r6,pc
8001f408:	ef 4c ff f8 	st.w	r7[-8],r12
8001f40c:	16 98       	mov	r8,r11
8001f40e:	ef 68 ff f4 	st.b	r7[-12],r8
8001f412:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f416:	2f 88       	sub	r8,-8
8001f418:	10 99       	mov	r9,r8
8001f41a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001f41e:	10 09       	add	r9,r8
8001f420:	ee c8 00 02 	sub	r8,r7,2
8001f424:	12 9b       	mov	r11,r9
8001f426:	10 9c       	mov	r12,r8
8001f428:	c7 ef       	rcall	8001f324 <byte_swap_2>
8001f42a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001f42e:	10 9c       	mov	r12,r8
8001f430:	2f dd       	sub	sp,-12
8001f432:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f436:	00 00       	add	r0,r0
8001f438:	80 01       	ld.sh	r1,r0[0x0]
8001f43a:	f2 8a eb cd 	brle	7fe7cbd4 <_estack+0x7fe6cbd4>

8001f43c <_MAV_RETURN_uint32_t>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
8001f43c:	eb cd 40 c0 	pushm	r6-r7,lr
8001f440:	1a 97       	mov	r7,sp
8001f442:	20 3d       	sub	sp,12
8001f444:	48 d6       	lddpc	r6,8001f478 <_MAV_RETURN_uint32_t+0x3c>
8001f446:	1e 26       	rsub	r6,pc
8001f448:	ef 4c ff f8 	st.w	r7[-8],r12
8001f44c:	16 98       	mov	r8,r11
8001f44e:	ef 68 ff f4 	st.b	r7[-12],r8
8001f452:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f456:	2f 88       	sub	r8,-8
8001f458:	10 99       	mov	r9,r8
8001f45a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001f45e:	10 09       	add	r9,r8
8001f460:	ee c8 00 04 	sub	r8,r7,4
8001f464:	12 9b       	mov	r11,r9
8001f466:	10 9c       	mov	r12,r8
8001f468:	c7 8f       	rcall	8001f358 <byte_swap_4>
8001f46a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f46e:	10 9c       	mov	r12,r8
8001f470:	2f dd       	sub	sp,-12
8001f472:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f476:	00 00       	add	r0,r0
8001f478:	80 01       	ld.sh	r1,r0[0x0]
8001f47a:	f2 ca eb cd 	sub	r10,r9,-5171

8001f47c <_MAV_RETURN_float>:
_MAV_MSG_RETURN_TYPE(int32_t,  4)
_MAV_MSG_RETURN_TYPE(uint64_t, 8)
_MAV_MSG_RETURN_TYPE(int64_t,  8)
_MAV_MSG_RETURN_TYPE(float,    4)
8001f47c:	eb cd 40 c0 	pushm	r6-r7,lr
8001f480:	1a 97       	mov	r7,sp
8001f482:	20 3d       	sub	sp,12
8001f484:	48 d6       	lddpc	r6,8001f4b8 <_MAV_RETURN_float+0x3c>
8001f486:	1e 26       	rsub	r6,pc
8001f488:	ef 4c ff f8 	st.w	r7[-8],r12
8001f48c:	16 98       	mov	r8,r11
8001f48e:	ef 68 ff f4 	st.b	r7[-12],r8
8001f492:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f496:	2f 88       	sub	r8,-8
8001f498:	10 99       	mov	r9,r8
8001f49a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001f49e:	10 09       	add	r9,r8
8001f4a0:	ee c8 00 04 	sub	r8,r7,4
8001f4a4:	12 9b       	mov	r11,r9
8001f4a6:	10 9c       	mov	r12,r8
8001f4a8:	c5 8f       	rcall	8001f358 <byte_swap_4>
8001f4aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f4ae:	10 9c       	mov	r12,r8
8001f4b0:	2f dd       	sub	sp,-12
8001f4b2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f4b6:	00 00       	add	r0,r0
8001f4b8:	80 01       	ld.sh	r1,r0[0x0]
8001f4ba:	f3 0a eb cd 	ld.sh	r10,r9[-5171]

8001f4bc <mavlink_msg_set_mode_get_target_system>:
 * @brief Get field target_system from set_mode message
 *
 * @return The system setting the mode
 */
static inline uint8_t mavlink_msg_set_mode_get_target_system(const mavlink_message_t* msg)
{
8001f4bc:	eb cd 40 80 	pushm	r7,lr
8001f4c0:	1a 97       	mov	r7,sp
8001f4c2:	20 1d       	sub	sp,4
8001f4c4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  4);
8001f4c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f4cc:	2f 88       	sub	r8,-8
8001f4ce:	2f c8       	sub	r8,-4
8001f4d0:	11 88       	ld.ub	r8,r8[0x0]
}
8001f4d2:	10 9c       	mov	r12,r8
8001f4d4:	2f fd       	sub	sp,-4
8001f4d6:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f4da <mavlink_msg_set_mode_get_base_mode>:
 * @brief Get field base_mode from set_mode message
 *
 * @return The new base mode
 */
static inline uint8_t mavlink_msg_set_mode_get_base_mode(const mavlink_message_t* msg)
{
8001f4da:	eb cd 40 80 	pushm	r7,lr
8001f4de:	1a 97       	mov	r7,sp
8001f4e0:	20 1d       	sub	sp,4
8001f4e2:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  5);
8001f4e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f4ea:	2f 88       	sub	r8,-8
8001f4ec:	2f b8       	sub	r8,-5
8001f4ee:	11 88       	ld.ub	r8,r8[0x0]
}
8001f4f0:	10 9c       	mov	r12,r8
8001f4f2:	2f fd       	sub	sp,-4
8001f4f4:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f4f8 <mavlink_msg_set_mode_get_custom_mode>:
 * @brief Get field custom_mode from set_mode message
 *
 * @return The new autopilot-specific mode. This field can be ignored by an autopilot.
 */
static inline uint32_t mavlink_msg_set_mode_get_custom_mode(const mavlink_message_t* msg)
{
8001f4f8:	eb cd 40 c0 	pushm	r6-r7,lr
8001f4fc:	1a 97       	mov	r7,sp
8001f4fe:	20 1d       	sub	sp,4
8001f500:	48 76       	lddpc	r6,8001f51c <mavlink_msg_set_mode_get_custom_mode+0x24>
8001f502:	1e 26       	rsub	r6,pc
8001f504:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint32_t(msg,  0);
8001f508:	30 0b       	mov	r11,0
8001f50a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f50e:	c9 7f       	rcall	8001f43c <_MAV_RETURN_uint32_t>
8001f510:	18 98       	mov	r8,r12
}
8001f512:	10 9c       	mov	r12,r8
8001f514:	2f fd       	sub	sp,-4
8001f516:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f51a:	00 00       	add	r0,r0
8001f51c:	80 01       	ld.sh	r1,r0[0x0]
8001f51e:	f3 86       	*unknown*

8001f520 <mavlink_msg_set_mode_decode>:
 *
 * @param msg The message to decode
 * @param set_mode C-struct to decode the message contents into
 */
static inline void mavlink_msg_set_mode_decode(const mavlink_message_t* msg, mavlink_set_mode_t* set_mode)
{
8001f520:	eb cd 40 c0 	pushm	r6-r7,lr
8001f524:	1a 97       	mov	r7,sp
8001f526:	20 2d       	sub	sp,8
8001f528:	48 f6       	lddpc	r6,8001f564 <mavlink_msg_set_mode_decode+0x44>
8001f52a:	1e 26       	rsub	r6,pc
8001f52c:	ef 4c ff fc 	st.w	r7[-4],r12
8001f530:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	set_mode->custom_mode = mavlink_msg_set_mode_get_custom_mode(msg);
8001f534:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f538:	ce 0f       	rcall	8001f4f8 <mavlink_msg_set_mode_get_custom_mode>
8001f53a:	18 99       	mov	r9,r12
8001f53c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f540:	91 09       	st.w	r8[0x0],r9
	set_mode->target_system = mavlink_msg_set_mode_get_target_system(msg);
8001f542:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f546:	cb bf       	rcall	8001f4bc <mavlink_msg_set_mode_get_target_system>
8001f548:	18 98       	mov	r8,r12
8001f54a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f54e:	b2 c8       	st.b	r9[0x4],r8
	set_mode->base_mode = mavlink_msg_set_mode_get_base_mode(msg);
8001f550:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f554:	cc 3f       	rcall	8001f4da <mavlink_msg_set_mode_get_base_mode>
8001f556:	18 98       	mov	r8,r12
8001f558:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f55c:	b2 d8       	st.b	r9[0x5],r8
#else
	memcpy(set_mode, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_SET_MODE_LEN);
#endif
}
8001f55e:	2f ed       	sub	sp,-8
8001f560:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f564:	80 01       	ld.sh	r1,r0[0x0]
8001f566:	f3 ae       	*unknown*

8001f568 <mavlink_msg_mission_item_send>:
 * @param z PARAM7 / z position: global: altitude
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
{
8001f568:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001f56c:	1a 97       	mov	r7,sp
8001f56e:	21 2d       	sub	sp,72
8001f570:	4c 26       	lddpc	r6,8001f678 <mavlink_msg_mission_item_send+0x110>
8001f572:	1e 26       	rsub	r6,pc
8001f574:	ee c5 ff ec 	sub	r5,r7,-20
8001f578:	ef 4c ff d4 	st.w	r7[-44],r12
8001f57c:	16 93       	mov	r3,r11
8001f57e:	14 9e       	mov	lr,r10
8001f580:	12 9c       	mov	r12,r9
8001f582:	10 9b       	mov	r11,r8
8001f584:	6a 0a       	ld.w	r10,r5[0x0]
8001f586:	6a 19       	ld.w	r9,r5[0x4]
8001f588:	6a 28       	ld.w	r8,r5[0x8]
8001f58a:	ef 63 ff d0 	st.b	r7[-48],r3
8001f58e:	ef 6e ff cc 	st.b	r7[-52],lr
8001f592:	ef 5c ff c8 	st.h	r7[-56],r12
8001f596:	ef 6b ff c4 	st.b	r7[-60],r11
8001f59a:	ef 5a ff c0 	st.h	r7[-64],r10
8001f59e:	ef 69 ff bc 	st.b	r7[-68],r9
8001f5a2:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_ITEM_LEN];
	_mav_put_float(buf, 0, param1);
8001f5a6:	ea c9 ff f4 	sub	r9,r5,-12
8001f5aa:	ee c8 00 28 	sub	r8,r7,40
8001f5ae:	12 9b       	mov	r11,r9
8001f5b0:	10 9c       	mov	r12,r8
8001f5b2:	cd 3e       	rcall	8001f358 <byte_swap_4>
	_mav_put_float(buf, 4, param2);
8001f5b4:	ea c9 ff f0 	sub	r9,r5,-16
8001f5b8:	ee c8 00 28 	sub	r8,r7,40
8001f5bc:	2f c8       	sub	r8,-4
8001f5be:	12 9b       	mov	r11,r9
8001f5c0:	10 9c       	mov	r12,r8
8001f5c2:	cc be       	rcall	8001f358 <byte_swap_4>
	_mav_put_float(buf, 8, param3);
8001f5c4:	ea c9 ff ec 	sub	r9,r5,-20
8001f5c8:	ee c8 00 28 	sub	r8,r7,40
8001f5cc:	2f 88       	sub	r8,-8
8001f5ce:	12 9b       	mov	r11,r9
8001f5d0:	10 9c       	mov	r12,r8
8001f5d2:	cc 3e       	rcall	8001f358 <byte_swap_4>
	_mav_put_float(buf, 12, param4);
8001f5d4:	ea c9 ff e8 	sub	r9,r5,-24
8001f5d8:	ee c8 00 28 	sub	r8,r7,40
8001f5dc:	2f 48       	sub	r8,-12
8001f5de:	12 9b       	mov	r11,r9
8001f5e0:	10 9c       	mov	r12,r8
8001f5e2:	cb be       	rcall	8001f358 <byte_swap_4>
	_mav_put_float(buf, 16, x);
8001f5e4:	ea c9 ff e4 	sub	r9,r5,-28
8001f5e8:	ee c8 00 28 	sub	r8,r7,40
8001f5ec:	2f 08       	sub	r8,-16
8001f5ee:	12 9b       	mov	r11,r9
8001f5f0:	10 9c       	mov	r12,r8
8001f5f2:	cb 3e       	rcall	8001f358 <byte_swap_4>
	_mav_put_float(buf, 20, y);
8001f5f4:	ea c9 ff e0 	sub	r9,r5,-32
8001f5f8:	ee c8 00 28 	sub	r8,r7,40
8001f5fc:	2e c8       	sub	r8,-20
8001f5fe:	12 9b       	mov	r11,r9
8001f600:	10 9c       	mov	r12,r8
8001f602:	ca be       	rcall	8001f358 <byte_swap_4>
	_mav_put_float(buf, 24, z);
8001f604:	ea c9 ff dc 	sub	r9,r5,-36
8001f608:	ee c8 00 28 	sub	r8,r7,40
8001f60c:	2e 88       	sub	r8,-24
8001f60e:	12 9b       	mov	r11,r9
8001f610:	10 9c       	mov	r12,r8
8001f612:	ca 3e       	rcall	8001f358 <byte_swap_4>
	_mav_put_uint16_t(buf, 28, seq);
8001f614:	ee c9 00 38 	sub	r9,r7,56
8001f618:	ee c8 00 28 	sub	r8,r7,40
8001f61c:	2e 48       	sub	r8,-28
8001f61e:	12 9b       	mov	r11,r9
8001f620:	10 9c       	mov	r12,r8
8001f622:	c8 1e       	rcall	8001f324 <byte_swap_2>
	_mav_put_uint16_t(buf, 30, command);
8001f624:	ee c9 00 40 	sub	r9,r7,64
8001f628:	ee c8 00 28 	sub	r8,r7,40
8001f62c:	2e 28       	sub	r8,-30
8001f62e:	12 9b       	mov	r11,r9
8001f630:	10 9c       	mov	r12,r8
8001f632:	c7 9e       	rcall	8001f324 <byte_swap_2>
	_mav_put_uint8_t(buf, 32, target_system);
8001f634:	ef 38 ff d0 	ld.ub	r8,r7[-48]
8001f638:	ef 68 ff f8 	st.b	r7[-8],r8
	_mav_put_uint8_t(buf, 33, target_component);
8001f63c:	ef 38 ff cc 	ld.ub	r8,r7[-52]
8001f640:	ef 68 ff f9 	st.b	r7[-7],r8
	_mav_put_uint8_t(buf, 34, frame);
8001f644:	ef 38 ff c4 	ld.ub	r8,r7[-60]
8001f648:	ef 68 ff fa 	st.b	r7[-6],r8
	_mav_put_uint8_t(buf, 35, current);
8001f64c:	ef 38 ff bc 	ld.ub	r8,r7[-68]
8001f650:	ef 68 ff fb 	st.b	r7[-5],r8
	_mav_put_uint8_t(buf, 36, autocontinue);
8001f654:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8001f658:	ef 68 ff fc 	st.b	r7[-4],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM, buf, MAVLINK_MSG_ID_MISSION_ITEM_LEN, MAVLINK_MSG_ID_MISSION_ITEM_CRC);
8001f65c:	ee ca 00 28 	sub	r10,r7,40
8001f660:	e0 68 00 fe 	mov	r8,254
8001f664:	32 59       	mov	r9,37
8001f666:	32 7b       	mov	r11,39
8001f668:	ee fc ff d4 	ld.w	r12,r7[-44]
8001f66c:	fe b0 fd ae 	rcall	8001f1c8 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_LEN, MAVLINK_MSG_ID_MISSION_ITEM_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_LEN);
#endif
#endif
}
8001f670:	2e ed       	sub	sp,-72
8001f672:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001f676:	00 00       	add	r0,r0
8001f678:	80 01       	ld.sh	r1,r0[0x0]
8001f67a:	f3 f6 eb cd 	st.wqs	r9[0x734],r6

8001f67c <mavlink_msg_mission_item_get_target_system>:
 * @brief Get field target_system from mission_item message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_item_get_target_system(const mavlink_message_t* msg)
{
8001f67c:	eb cd 40 80 	pushm	r7,lr
8001f680:	1a 97       	mov	r7,sp
8001f682:	20 1d       	sub	sp,4
8001f684:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  32);
8001f688:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f68c:	2f 88       	sub	r8,-8
8001f68e:	2e 08       	sub	r8,-32
8001f690:	11 88       	ld.ub	r8,r8[0x0]
}
8001f692:	10 9c       	mov	r12,r8
8001f694:	2f fd       	sub	sp,-4
8001f696:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f69a <mavlink_msg_mission_item_get_target_component>:
 * @brief Get field target_component from mission_item message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_item_get_target_component(const mavlink_message_t* msg)
{
8001f69a:	eb cd 40 80 	pushm	r7,lr
8001f69e:	1a 97       	mov	r7,sp
8001f6a0:	20 1d       	sub	sp,4
8001f6a2:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  33);
8001f6a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f6aa:	2f 88       	sub	r8,-8
8001f6ac:	2d f8       	sub	r8,-33
8001f6ae:	11 88       	ld.ub	r8,r8[0x0]
}
8001f6b0:	10 9c       	mov	r12,r8
8001f6b2:	2f fd       	sub	sp,-4
8001f6b4:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f6b8 <mavlink_msg_mission_item_get_seq>:
 * @brief Get field seq from mission_item message
 *
 * @return Sequence
 */
static inline uint16_t mavlink_msg_mission_item_get_seq(const mavlink_message_t* msg)
{
8001f6b8:	eb cd 40 c0 	pushm	r6-r7,lr
8001f6bc:	1a 97       	mov	r7,sp
8001f6be:	20 1d       	sub	sp,4
8001f6c0:	48 86       	lddpc	r6,8001f6e0 <mavlink_msg_mission_item_get_seq+0x28>
8001f6c2:	1e 26       	rsub	r6,pc
8001f6c4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  28);
8001f6c8:	31 cb       	mov	r11,28
8001f6ca:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f6ce:	c9 7e       	rcall	8001f3fc <_MAV_RETURN_uint16_t>
8001f6d0:	18 98       	mov	r8,r12
8001f6d2:	5c 88       	casts.h	r8
8001f6d4:	5c 88       	casts.h	r8
}
8001f6d6:	10 9c       	mov	r12,r8
8001f6d8:	2f fd       	sub	sp,-4
8001f6da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f6de:	00 00       	add	r0,r0
8001f6e0:	80 01       	ld.sh	r1,r0[0x0]
8001f6e2:	f5 46 eb cd 	st.w	r10[-5171],r6

8001f6e4 <mavlink_msg_mission_item_get_frame>:
 * @brief Get field frame from mission_item message
 *
 * @return The coordinate system of the MISSION. see MAV_FRAME in mavlink_types.h
 */
static inline uint8_t mavlink_msg_mission_item_get_frame(const mavlink_message_t* msg)
{
8001f6e4:	eb cd 40 80 	pushm	r7,lr
8001f6e8:	1a 97       	mov	r7,sp
8001f6ea:	20 1d       	sub	sp,4
8001f6ec:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  34);
8001f6f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f6f4:	2f 88       	sub	r8,-8
8001f6f6:	2d e8       	sub	r8,-34
8001f6f8:	11 88       	ld.ub	r8,r8[0x0]
}
8001f6fa:	10 9c       	mov	r12,r8
8001f6fc:	2f fd       	sub	sp,-4
8001f6fe:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f702 <mavlink_msg_mission_item_get_command>:
 * @brief Get field command from mission_item message
 *
 * @return The scheduled action for the MISSION. see MAV_CMD in common.xml MAVLink specs
 */
static inline uint16_t mavlink_msg_mission_item_get_command(const mavlink_message_t* msg)
{
8001f702:	eb cd 40 c0 	pushm	r6-r7,lr
8001f706:	1a 97       	mov	r7,sp
8001f708:	20 1d       	sub	sp,4
8001f70a:	48 86       	lddpc	r6,8001f728 <mavlink_msg_mission_item_get_command+0x26>
8001f70c:	1e 26       	rsub	r6,pc
8001f70e:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  30);
8001f712:	31 eb       	mov	r11,30
8001f714:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f718:	c7 2e       	rcall	8001f3fc <_MAV_RETURN_uint16_t>
8001f71a:	18 98       	mov	r8,r12
8001f71c:	5c 88       	casts.h	r8
8001f71e:	5c 88       	casts.h	r8
}
8001f720:	10 9c       	mov	r12,r8
8001f722:	2f fd       	sub	sp,-4
8001f724:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f728:	80 01       	ld.sh	r1,r0[0x0]
8001f72a:	f5 90       	*unknown*

8001f72c <mavlink_msg_mission_item_get_current>:
 * @brief Get field current from mission_item message
 *
 * @return false:0, true:1
 */
static inline uint8_t mavlink_msg_mission_item_get_current(const mavlink_message_t* msg)
{
8001f72c:	eb cd 40 80 	pushm	r7,lr
8001f730:	1a 97       	mov	r7,sp
8001f732:	20 1d       	sub	sp,4
8001f734:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  35);
8001f738:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f73c:	2f 88       	sub	r8,-8
8001f73e:	2d d8       	sub	r8,-35
8001f740:	11 88       	ld.ub	r8,r8[0x0]
}
8001f742:	10 9c       	mov	r12,r8
8001f744:	2f fd       	sub	sp,-4
8001f746:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f74a <mavlink_msg_mission_item_get_autocontinue>:
 * @brief Get field autocontinue from mission_item message
 *
 * @return autocontinue to next wp
 */
static inline uint8_t mavlink_msg_mission_item_get_autocontinue(const mavlink_message_t* msg)
{
8001f74a:	eb cd 40 80 	pushm	r7,lr
8001f74e:	1a 97       	mov	r7,sp
8001f750:	20 1d       	sub	sp,4
8001f752:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  36);
8001f756:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f75a:	2f 88       	sub	r8,-8
8001f75c:	2d c8       	sub	r8,-36
8001f75e:	11 88       	ld.ub	r8,r8[0x0]
}
8001f760:	10 9c       	mov	r12,r8
8001f762:	2f fd       	sub	sp,-4
8001f764:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f768 <mavlink_msg_mission_item_get_param1>:
 * @brief Get field param1 from mission_item message
 *
 * @return PARAM1 / For NAV command MISSIONs: Radius in which the MISSION is accepted as reached, in meters
 */
static inline float mavlink_msg_mission_item_get_param1(const mavlink_message_t* msg)
{
8001f768:	eb cd 40 c0 	pushm	r6-r7,lr
8001f76c:	1a 97       	mov	r7,sp
8001f76e:	20 1d       	sub	sp,4
8001f770:	48 76       	lddpc	r6,8001f78c <mavlink_msg_mission_item_get_param1+0x24>
8001f772:	1e 26       	rsub	r6,pc
8001f774:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  0);
8001f778:	30 0b       	mov	r11,0
8001f77a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f77e:	c7 fe       	rcall	8001f47c <_MAV_RETURN_float>
8001f780:	18 98       	mov	r8,r12
}
8001f782:	10 9c       	mov	r12,r8
8001f784:	2f fd       	sub	sp,-4
8001f786:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f78a:	00 00       	add	r0,r0
8001f78c:	80 01       	ld.sh	r1,r0[0x0]
8001f78e:	f5 f6 eb cd 	st.wqs	r10[0x734],r6

8001f790 <mavlink_msg_mission_item_get_param2>:
 * @brief Get field param2 from mission_item message
 *
 * @return PARAM2 / For NAV command MISSIONs: Time that the MAV should stay inside the PARAM1 radius before advancing, in milliseconds
 */
static inline float mavlink_msg_mission_item_get_param2(const mavlink_message_t* msg)
{
8001f790:	eb cd 40 c0 	pushm	r6-r7,lr
8001f794:	1a 97       	mov	r7,sp
8001f796:	20 1d       	sub	sp,4
8001f798:	48 76       	lddpc	r6,8001f7b4 <mavlink_msg_mission_item_get_param2+0x24>
8001f79a:	1e 26       	rsub	r6,pc
8001f79c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  4);
8001f7a0:	30 4b       	mov	r11,4
8001f7a2:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f7a6:	c6 be       	rcall	8001f47c <_MAV_RETURN_float>
8001f7a8:	18 98       	mov	r8,r12
}
8001f7aa:	10 9c       	mov	r12,r8
8001f7ac:	2f fd       	sub	sp,-4
8001f7ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f7b2:	00 00       	add	r0,r0
8001f7b4:	80 01       	ld.sh	r1,r0[0x0]
8001f7b6:	f6 1e eb cd 	memc	-20684,0x1d

8001f7b8 <mavlink_msg_mission_item_get_param3>:
 * @brief Get field param3 from mission_item message
 *
 * @return PARAM3 / For LOITER command MISSIONs: Orbit to circle around the MISSION, in meters. If positive the orbit direction should be clockwise, if negative the orbit direction should be counter-clockwise.
 */
static inline float mavlink_msg_mission_item_get_param3(const mavlink_message_t* msg)
{
8001f7b8:	eb cd 40 c0 	pushm	r6-r7,lr
8001f7bc:	1a 97       	mov	r7,sp
8001f7be:	20 1d       	sub	sp,4
8001f7c0:	48 76       	lddpc	r6,8001f7dc <mavlink_msg_mission_item_get_param3+0x24>
8001f7c2:	1e 26       	rsub	r6,pc
8001f7c4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  8);
8001f7c8:	30 8b       	mov	r11,8
8001f7ca:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f7ce:	c5 7e       	rcall	8001f47c <_MAV_RETURN_float>
8001f7d0:	18 98       	mov	r8,r12
}
8001f7d2:	10 9c       	mov	r12,r8
8001f7d4:	2f fd       	sub	sp,-4
8001f7d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f7da:	00 00       	add	r0,r0
8001f7dc:	80 01       	ld.sh	r1,r0[0x0]
8001f7de:	f6 46 eb cd 	cp.w	r6,-594995

8001f7e0 <mavlink_msg_mission_item_get_param4>:
 * @brief Get field param4 from mission_item message
 *
 * @return PARAM4 / For NAV and LOITER command MISSIONs: Yaw orientation in degrees, [0..360] 0 = NORTH
 */
static inline float mavlink_msg_mission_item_get_param4(const mavlink_message_t* msg)
{
8001f7e0:	eb cd 40 c0 	pushm	r6-r7,lr
8001f7e4:	1a 97       	mov	r7,sp
8001f7e6:	20 1d       	sub	sp,4
8001f7e8:	48 76       	lddpc	r6,8001f804 <mavlink_msg_mission_item_get_param4+0x24>
8001f7ea:	1e 26       	rsub	r6,pc
8001f7ec:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  12);
8001f7f0:	30 cb       	mov	r11,12
8001f7f2:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f7f6:	c4 3e       	rcall	8001f47c <_MAV_RETURN_float>
8001f7f8:	18 98       	mov	r8,r12
}
8001f7fa:	10 9c       	mov	r12,r8
8001f7fc:	2f fd       	sub	sp,-4
8001f7fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f802:	00 00       	add	r0,r0
8001f804:	80 01       	ld.sh	r1,r0[0x0]
8001f806:	f6 6e eb cd 	mov	lr,-594995

8001f808 <mavlink_msg_mission_item_get_x>:
 * @brief Get field x from mission_item message
 *
 * @return PARAM5 / local: x position, global: latitude
 */
static inline float mavlink_msg_mission_item_get_x(const mavlink_message_t* msg)
{
8001f808:	eb cd 40 c0 	pushm	r6-r7,lr
8001f80c:	1a 97       	mov	r7,sp
8001f80e:	20 1d       	sub	sp,4
8001f810:	48 76       	lddpc	r6,8001f82c <mavlink_msg_mission_item_get_x+0x24>
8001f812:	1e 26       	rsub	r6,pc
8001f814:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  16);
8001f818:	31 0b       	mov	r11,16
8001f81a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f81e:	c2 fe       	rcall	8001f47c <_MAV_RETURN_float>
8001f820:	18 98       	mov	r8,r12
}
8001f822:	10 9c       	mov	r12,r8
8001f824:	2f fd       	sub	sp,-4
8001f826:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f82a:	00 00       	add	r0,r0
8001f82c:	80 01       	ld.sh	r1,r0[0x0]
8001f82e:	f6 96 eb cd 	brmi	7ff1cfc8 <_estack+0x7ff0cfc8>

8001f830 <mavlink_msg_mission_item_get_y>:
 * @brief Get field y from mission_item message
 *
 * @return PARAM6 / y position: global: longitude
 */
static inline float mavlink_msg_mission_item_get_y(const mavlink_message_t* msg)
{
8001f830:	eb cd 40 c0 	pushm	r6-r7,lr
8001f834:	1a 97       	mov	r7,sp
8001f836:	20 1d       	sub	sp,4
8001f838:	48 76       	lddpc	r6,8001f854 <mavlink_msg_mission_item_get_y+0x24>
8001f83a:	1e 26       	rsub	r6,pc
8001f83c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  20);
8001f840:	31 4b       	mov	r11,20
8001f842:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f846:	c1 be       	rcall	8001f47c <_MAV_RETURN_float>
8001f848:	18 98       	mov	r8,r12
}
8001f84a:	10 9c       	mov	r12,r8
8001f84c:	2f fd       	sub	sp,-4
8001f84e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f852:	00 00       	add	r0,r0
8001f854:	80 01       	ld.sh	r1,r0[0x0]
8001f856:	f6 be       	*unknown*

8001f858 <mavlink_msg_mission_item_get_z>:
 * @brief Get field z from mission_item message
 *
 * @return PARAM7 / z position: global: altitude
 */
static inline float mavlink_msg_mission_item_get_z(const mavlink_message_t* msg)
{
8001f858:	eb cd 40 c0 	pushm	r6-r7,lr
8001f85c:	1a 97       	mov	r7,sp
8001f85e:	20 1d       	sub	sp,4
8001f860:	48 76       	lddpc	r6,8001f87c <mavlink_msg_mission_item_get_z+0x24>
8001f862:	1e 26       	rsub	r6,pc
8001f864:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  24);
8001f868:	31 8b       	mov	r11,24
8001f86a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f86e:	c0 7e       	rcall	8001f47c <_MAV_RETURN_float>
8001f870:	18 98       	mov	r8,r12
}
8001f872:	10 9c       	mov	r12,r8
8001f874:	2f fd       	sub	sp,-4
8001f876:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f87a:	00 00       	add	r0,r0
8001f87c:	80 01       	ld.sh	r1,r0[0x0]
8001f87e:	f6 e6 eb cd 	ld.d	r6,r11[-5171]

8001f880 <mavlink_msg_mission_item_decode>:
 *
 * @param msg The message to decode
 * @param mission_item C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_item_decode(const mavlink_message_t* msg, mavlink_mission_item_t* mission_item)
{
8001f880:	eb cd 40 c0 	pushm	r6-r7,lr
8001f884:	1a 97       	mov	r7,sp
8001f886:	20 2d       	sub	sp,8
8001f888:	4b a6       	lddpc	r6,8001f970 <mavlink_msg_mission_item_decode+0xf0>
8001f88a:	1e 26       	rsub	r6,pc
8001f88c:	ef 4c ff fc 	st.w	r7[-4],r12
8001f890:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_item->param1 = mavlink_msg_mission_item_get_param1(msg);
8001f894:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f898:	c6 8f       	rcall	8001f768 <mavlink_msg_mission_item_get_param1>
8001f89a:	18 99       	mov	r9,r12
8001f89c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f8a0:	91 09       	st.w	r8[0x0],r9
	mission_item->param2 = mavlink_msg_mission_item_get_param2(msg);
8001f8a2:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f8a6:	c7 5f       	rcall	8001f790 <mavlink_msg_mission_item_get_param2>
8001f8a8:	18 99       	mov	r9,r12
8001f8aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f8ae:	91 19       	st.w	r8[0x4],r9
	mission_item->param3 = mavlink_msg_mission_item_get_param3(msg);
8001f8b0:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f8b4:	c8 2f       	rcall	8001f7b8 <mavlink_msg_mission_item_get_param3>
8001f8b6:	18 99       	mov	r9,r12
8001f8b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f8bc:	91 29       	st.w	r8[0x8],r9
	mission_item->param4 = mavlink_msg_mission_item_get_param4(msg);
8001f8be:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f8c2:	c8 ff       	rcall	8001f7e0 <mavlink_msg_mission_item_get_param4>
8001f8c4:	18 99       	mov	r9,r12
8001f8c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f8ca:	91 39       	st.w	r8[0xc],r9
	mission_item->x = mavlink_msg_mission_item_get_x(msg);
8001f8cc:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f8d0:	c9 cf       	rcall	8001f808 <mavlink_msg_mission_item_get_x>
8001f8d2:	18 99       	mov	r9,r12
8001f8d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f8d8:	91 49       	st.w	r8[0x10],r9
	mission_item->y = mavlink_msg_mission_item_get_y(msg);
8001f8da:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f8de:	ca 9f       	rcall	8001f830 <mavlink_msg_mission_item_get_y>
8001f8e0:	18 99       	mov	r9,r12
8001f8e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f8e6:	91 59       	st.w	r8[0x14],r9
	mission_item->z = mavlink_msg_mission_item_get_z(msg);
8001f8e8:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f8ec:	cb 6f       	rcall	8001f858 <mavlink_msg_mission_item_get_z>
8001f8ee:	18 99       	mov	r9,r12
8001f8f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f8f4:	91 69       	st.w	r8[0x18],r9
	mission_item->seq = mavlink_msg_mission_item_get_seq(msg);
8001f8f6:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f8fa:	cd fe       	rcall	8001f6b8 <mavlink_msg_mission_item_get_seq>
8001f8fc:	18 98       	mov	r8,r12
8001f8fe:	5c 88       	casts.h	r8
8001f900:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f904:	f3 58 00 1c 	st.h	r9[28],r8
	mission_item->command = mavlink_msg_mission_item_get_command(msg);
8001f908:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f90c:	cf be       	rcall	8001f702 <mavlink_msg_mission_item_get_command>
8001f90e:	18 98       	mov	r8,r12
8001f910:	5c 88       	casts.h	r8
8001f912:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f916:	f3 58 00 1e 	st.h	r9[30],r8
	mission_item->target_system = mavlink_msg_mission_item_get_target_system(msg);
8001f91a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f91e:	ca fe       	rcall	8001f67c <mavlink_msg_mission_item_get_target_system>
8001f920:	18 98       	mov	r8,r12
8001f922:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f926:	f3 68 00 20 	st.b	r9[32],r8
	mission_item->target_component = mavlink_msg_mission_item_get_target_component(msg);
8001f92a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f92e:	cb 6e       	rcall	8001f69a <mavlink_msg_mission_item_get_target_component>
8001f930:	18 98       	mov	r8,r12
8001f932:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f936:	f3 68 00 21 	st.b	r9[33],r8
	mission_item->frame = mavlink_msg_mission_item_get_frame(msg);
8001f93a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f93e:	cd 3e       	rcall	8001f6e4 <mavlink_msg_mission_item_get_frame>
8001f940:	18 98       	mov	r8,r12
8001f942:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f946:	f3 68 00 22 	st.b	r9[34],r8
	mission_item->current = mavlink_msg_mission_item_get_current(msg);
8001f94a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f94e:	ce fe       	rcall	8001f72c <mavlink_msg_mission_item_get_current>
8001f950:	18 98       	mov	r8,r12
8001f952:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f956:	f3 68 00 23 	st.b	r9[35],r8
	mission_item->autocontinue = mavlink_msg_mission_item_get_autocontinue(msg);
8001f95a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f95e:	cf 6e       	rcall	8001f74a <mavlink_msg_mission_item_get_autocontinue>
8001f960:	18 98       	mov	r8,r12
8001f962:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f966:	f3 68 00 24 	st.b	r9[36],r8
#else
	memcpy(mission_item, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_ITEM_LEN);
#endif
}
8001f96a:	2f ed       	sub	sp,-8
8001f96c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f970:	80 01       	ld.sh	r1,r0[0x0]
8001f972:	f7 0e eb cd 	ld.sh	lr,r11[-5171]

8001f974 <mavlink_msg_mission_request_send>:
 * @param seq Sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_request_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq)
{
8001f974:	eb cd 40 c0 	pushm	r6-r7,lr
8001f978:	1a 97       	mov	r7,sp
8001f97a:	20 5d       	sub	sp,20
8001f97c:	49 56       	lddpc	r6,8001f9d0 <mavlink_msg_mission_request_send+0x5c>
8001f97e:	1e 26       	rsub	r6,pc
8001f980:	ef 4c ff f8 	st.w	r7[-8],r12
8001f984:	12 98       	mov	r8,r9
8001f986:	16 99       	mov	r9,r11
8001f988:	ef 69 ff f4 	st.b	r7[-12],r9
8001f98c:	14 99       	mov	r9,r10
8001f98e:	ef 69 ff f0 	st.b	r7[-16],r9
8001f992:	ef 58 ff ec 	st.h	r7[-20],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_REQUEST_LEN];
	_mav_put_uint16_t(buf, 0, seq);
8001f996:	ee c9 00 14 	sub	r9,r7,20
8001f99a:	ee c8 00 04 	sub	r8,r7,4
8001f99e:	12 9b       	mov	r11,r9
8001f9a0:	10 9c       	mov	r12,r8
8001f9a2:	fe b0 fc c1 	rcall	8001f324 <byte_swap_2>
	_mav_put_uint8_t(buf, 2, target_system);
8001f9a6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001f9aa:	ef 68 ff fe 	st.b	r7[-2],r8
	_mav_put_uint8_t(buf, 3, target_component);
8001f9ae:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001f9b2:	ef 68 ff ff 	st.b	r7[-1],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_REQUEST, buf, MAVLINK_MSG_ID_MISSION_REQUEST_LEN, MAVLINK_MSG_ID_MISSION_REQUEST_CRC);
8001f9b6:	ee ca 00 04 	sub	r10,r7,4
8001f9ba:	e0 68 00 e6 	mov	r8,230
8001f9be:	30 49       	mov	r9,4
8001f9c0:	32 8b       	mov	r11,40
8001f9c2:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f9c6:	fe b0 fc 01 	rcall	8001f1c8 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_REQUEST, (const char *)&packet, MAVLINK_MSG_ID_MISSION_REQUEST_LEN, MAVLINK_MSG_ID_MISSION_REQUEST_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_REQUEST, (const char *)&packet, MAVLINK_MSG_ID_MISSION_REQUEST_LEN);
#endif
#endif
}
8001f9ca:	2f bd       	sub	sp,-20
8001f9cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f9d0:	80 01       	ld.sh	r1,r0[0x0]
8001f9d2:	f8 02       	*unknown*

8001f9d4 <mavlink_msg_mission_request_get_target_system>:
 * @brief Get field target_system from mission_request message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_request_get_target_system(const mavlink_message_t* msg)
{
8001f9d4:	eb cd 40 80 	pushm	r7,lr
8001f9d8:	1a 97       	mov	r7,sp
8001f9da:	20 1d       	sub	sp,4
8001f9dc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001f9e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f9e4:	2f 88       	sub	r8,-8
8001f9e6:	2f e8       	sub	r8,-2
8001f9e8:	11 88       	ld.ub	r8,r8[0x0]
}
8001f9ea:	10 9c       	mov	r12,r8
8001f9ec:	2f fd       	sub	sp,-4
8001f9ee:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f9f2 <mavlink_msg_mission_request_get_target_component>:
 * @brief Get field target_component from mission_request message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_request_get_target_component(const mavlink_message_t* msg)
{
8001f9f2:	eb cd 40 80 	pushm	r7,lr
8001f9f6:	1a 97       	mov	r7,sp
8001f9f8:	20 1d       	sub	sp,4
8001f9fa:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8001f9fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001fa02:	2f 88       	sub	r8,-8
8001fa04:	2f d8       	sub	r8,-3
8001fa06:	11 88       	ld.ub	r8,r8[0x0]
}
8001fa08:	10 9c       	mov	r12,r8
8001fa0a:	2f fd       	sub	sp,-4
8001fa0c:	e3 cd 80 80 	ldm	sp++,r7,pc

8001fa10 <mavlink_msg_mission_request_get_seq>:
 * @brief Get field seq from mission_request message
 *
 * @return Sequence
 */
static inline uint16_t mavlink_msg_mission_request_get_seq(const mavlink_message_t* msg)
{
8001fa10:	eb cd 40 c0 	pushm	r6-r7,lr
8001fa14:	1a 97       	mov	r7,sp
8001fa16:	20 1d       	sub	sp,4
8001fa18:	48 86       	lddpc	r6,8001fa38 <mavlink_msg_mission_request_get_seq+0x28>
8001fa1a:	1e 26       	rsub	r6,pc
8001fa1c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
8001fa20:	30 0b       	mov	r11,0
8001fa22:	ee fc ff fc 	ld.w	r12,r7[-4]
8001fa26:	fe b0 fc eb 	rcall	8001f3fc <_MAV_RETURN_uint16_t>
8001fa2a:	18 98       	mov	r8,r12
8001fa2c:	5c 88       	casts.h	r8
8001fa2e:	5c 88       	casts.h	r8
}
8001fa30:	10 9c       	mov	r12,r8
8001fa32:	2f fd       	sub	sp,-4
8001fa34:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fa38:	80 01       	ld.sh	r1,r0[0x0]
8001fa3a:	f8 9e eb cd 	brqs	7ff5d1d4 <_estack+0x7ff4d1d4>

8001fa3c <mavlink_msg_mission_request_decode>:
 *
 * @param msg The message to decode
 * @param mission_request C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_request_decode(const mavlink_message_t* msg, mavlink_mission_request_t* mission_request)
{
8001fa3c:	eb cd 40 c0 	pushm	r6-r7,lr
8001fa40:	1a 97       	mov	r7,sp
8001fa42:	20 2d       	sub	sp,8
8001fa44:	49 06       	lddpc	r6,8001fa84 <mavlink_msg_mission_request_decode+0x48>
8001fa46:	1e 26       	rsub	r6,pc
8001fa48:	ef 4c ff fc 	st.w	r7[-4],r12
8001fa4c:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_request->seq = mavlink_msg_mission_request_get_seq(msg);
8001fa50:	ee fc ff fc 	ld.w	r12,r7[-4]
8001fa54:	cd ef       	rcall	8001fa10 <mavlink_msg_mission_request_get_seq>
8001fa56:	18 98       	mov	r8,r12
8001fa58:	5c 88       	casts.h	r8
8001fa5a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001fa5e:	b2 08       	st.h	r9[0x0],r8
	mission_request->target_system = mavlink_msg_mission_request_get_target_system(msg);
8001fa60:	ee fc ff fc 	ld.w	r12,r7[-4]
8001fa64:	cb 8f       	rcall	8001f9d4 <mavlink_msg_mission_request_get_target_system>
8001fa66:	18 98       	mov	r8,r12
8001fa68:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001fa6c:	b2 a8       	st.b	r9[0x2],r8
	mission_request->target_component = mavlink_msg_mission_request_get_target_component(msg);
8001fa6e:	ee fc ff fc 	ld.w	r12,r7[-4]
8001fa72:	cc 0f       	rcall	8001f9f2 <mavlink_msg_mission_request_get_target_component>
8001fa74:	18 98       	mov	r8,r12
8001fa76:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001fa7a:	b2 b8       	st.b	r9[0x3],r8
#else
	memcpy(mission_request, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_REQUEST_LEN);
#endif
}
8001fa7c:	2f ed       	sub	sp,-8
8001fa7e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fa82:	00 00       	add	r0,r0
8001fa84:	80 01       	ld.sh	r1,r0[0x0]
8001fa86:	f8 ca eb cd 	sub	r10,r12,-5171

8001fa88 <mavlink_msg_mission_set_current_get_target_system>:
 * @brief Get field target_system from mission_set_current message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_set_current_get_target_system(const mavlink_message_t* msg)
{
8001fa88:	eb cd 40 80 	pushm	r7,lr
8001fa8c:	1a 97       	mov	r7,sp
8001fa8e:	20 1d       	sub	sp,4
8001fa90:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001fa94:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001fa98:	2f 88       	sub	r8,-8
8001fa9a:	2f e8       	sub	r8,-2
8001fa9c:	11 88       	ld.ub	r8,r8[0x0]
}
8001fa9e:	10 9c       	mov	r12,r8
8001faa0:	2f fd       	sub	sp,-4
8001faa2:	e3 cd 80 80 	ldm	sp++,r7,pc

8001faa6 <mavlink_msg_mission_set_current_get_target_component>:
 * @brief Get field target_component from mission_set_current message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_set_current_get_target_component(const mavlink_message_t* msg)
{
8001faa6:	eb cd 40 80 	pushm	r7,lr
8001faaa:	1a 97       	mov	r7,sp
8001faac:	20 1d       	sub	sp,4
8001faae:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8001fab2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001fab6:	2f 88       	sub	r8,-8
8001fab8:	2f d8       	sub	r8,-3
8001faba:	11 88       	ld.ub	r8,r8[0x0]
}
8001fabc:	10 9c       	mov	r12,r8
8001fabe:	2f fd       	sub	sp,-4
8001fac0:	e3 cd 80 80 	ldm	sp++,r7,pc

8001fac4 <mavlink_msg_mission_set_current_get_seq>:
 * @brief Get field seq from mission_set_current message
 *
 * @return Sequence
 */
static inline uint16_t mavlink_msg_mission_set_current_get_seq(const mavlink_message_t* msg)
{
8001fac4:	eb cd 40 c0 	pushm	r6-r7,lr
8001fac8:	1a 97       	mov	r7,sp
8001faca:	20 1d       	sub	sp,4
8001facc:	48 86       	lddpc	r6,8001faec <mavlink_msg_mission_set_current_get_seq+0x28>
8001face:	1e 26       	rsub	r6,pc
8001fad0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
8001fad4:	30 0b       	mov	r11,0
8001fad6:	ee fc ff fc 	ld.w	r12,r7[-4]
8001fada:	fe b0 fc 91 	rcall	8001f3fc <_MAV_RETURN_uint16_t>
8001fade:	18 98       	mov	r8,r12
8001fae0:	5c 88       	casts.h	r8
8001fae2:	5c 88       	casts.h	r8
}
8001fae4:	10 9c       	mov	r12,r8
8001fae6:	2f fd       	sub	sp,-4
8001fae8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001faec:	80 01       	ld.sh	r1,r0[0x0]
8001faee:	f9 52 eb cd 	st.h	r12[-5171],r2

8001faf0 <mavlink_msg_mission_set_current_decode>:
 *
 * @param msg The message to decode
 * @param mission_set_current C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_set_current_decode(const mavlink_message_t* msg, mavlink_mission_set_current_t* mission_set_current)
{
8001faf0:	eb cd 40 c0 	pushm	r6-r7,lr
8001faf4:	1a 97       	mov	r7,sp
8001faf6:	20 2d       	sub	sp,8
8001faf8:	49 06       	lddpc	r6,8001fb38 <mavlink_msg_mission_set_current_decode+0x48>
8001fafa:	1e 26       	rsub	r6,pc
8001fafc:	ef 4c ff fc 	st.w	r7[-4],r12
8001fb00:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_set_current->seq = mavlink_msg_mission_set_current_get_seq(msg);
8001fb04:	ee fc ff fc 	ld.w	r12,r7[-4]
8001fb08:	cd ef       	rcall	8001fac4 <mavlink_msg_mission_set_current_get_seq>
8001fb0a:	18 98       	mov	r8,r12
8001fb0c:	5c 88       	casts.h	r8
8001fb0e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001fb12:	b2 08       	st.h	r9[0x0],r8
	mission_set_current->target_system = mavlink_msg_mission_set_current_get_target_system(msg);
8001fb14:	ee fc ff fc 	ld.w	r12,r7[-4]
8001fb18:	cb 8f       	rcall	8001fa88 <mavlink_msg_mission_set_current_get_target_system>
8001fb1a:	18 98       	mov	r8,r12
8001fb1c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001fb20:	b2 a8       	st.b	r9[0x2],r8
	mission_set_current->target_component = mavlink_msg_mission_set_current_get_target_component(msg);
8001fb22:	ee fc ff fc 	ld.w	r12,r7[-4]
8001fb26:	cc 0f       	rcall	8001faa6 <mavlink_msg_mission_set_current_get_target_component>
8001fb28:	18 98       	mov	r8,r12
8001fb2a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001fb2e:	b2 b8       	st.b	r9[0x3],r8
#else
	memcpy(mission_set_current, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_SET_CURRENT_LEN);
#endif
}
8001fb30:	2f ed       	sub	sp,-8
8001fb32:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fb36:	00 00       	add	r0,r0
8001fb38:	80 01       	ld.sh	r1,r0[0x0]
8001fb3a:	f9 7e eb cd 	stcond	r12[-5171],lr

8001fb3c <mavlink_msg_mission_current_send>:
 * @param seq Sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_current_send(mavlink_channel_t chan, uint16_t seq)
{
8001fb3c:	eb cd 40 c0 	pushm	r6-r7,lr
8001fb40:	1a 97       	mov	r7,sp
8001fb42:	20 3d       	sub	sp,12
8001fb44:	48 e6       	lddpc	r6,8001fb7c <mavlink_msg_mission_current_send+0x40>
8001fb46:	1e 26       	rsub	r6,pc
8001fb48:	ef 4c ff f8 	st.w	r7[-8],r12
8001fb4c:	16 98       	mov	r8,r11
8001fb4e:	ef 58 ff f4 	st.h	r7[-12],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_CURRENT_LEN];
	_mav_put_uint16_t(buf, 0, seq);
8001fb52:	ee c9 00 0c 	sub	r9,r7,12
8001fb56:	ee c8 00 04 	sub	r8,r7,4
8001fb5a:	12 9b       	mov	r11,r9
8001fb5c:	10 9c       	mov	r12,r8
8001fb5e:	fe b0 fb e3 	rcall	8001f324 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_CURRENT, buf, MAVLINK_MSG_ID_MISSION_CURRENT_LEN, MAVLINK_MSG_ID_MISSION_CURRENT_CRC);
8001fb62:	ee ca 00 04 	sub	r10,r7,4
8001fb66:	31 c8       	mov	r8,28
8001fb68:	30 29       	mov	r9,2
8001fb6a:	32 ab       	mov	r11,42
8001fb6c:	ee fc ff f8 	ld.w	r12,r7[-8]
8001fb70:	fe b0 fb 2c 	rcall	8001f1c8 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_CURRENT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_CURRENT_LEN, MAVLINK_MSG_ID_MISSION_CURRENT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_CURRENT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_CURRENT_LEN);
#endif
#endif
}
8001fb74:	2f dd       	sub	sp,-12
8001fb76:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fb7a:	00 00       	add	r0,r0
8001fb7c:	80 01       	ld.sh	r1,r0[0x0]
8001fb7e:	f9 ca       	*unknown*

8001fb80 <mavlink_msg_mission_request_list_get_target_system>:
 * @brief Get field target_system from mission_request_list message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_request_list_get_target_system(const mavlink_message_t* msg)
{
8001fb80:	eb cd 40 80 	pushm	r7,lr
8001fb84:	1a 97       	mov	r7,sp
8001fb86:	20 1d       	sub	sp,4
8001fb88:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
8001fb8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001fb90:	2f 88       	sub	r8,-8
8001fb92:	11 88       	ld.ub	r8,r8[0x0]
}
8001fb94:	10 9c       	mov	r12,r8
8001fb96:	2f fd       	sub	sp,-4
8001fb98:	e3 cd 80 80 	ldm	sp++,r7,pc

8001fb9c <mavlink_msg_mission_request_list_get_target_component>:
 * @brief Get field target_component from mission_request_list message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_request_list_get_target_component(const mavlink_message_t* msg)
{
8001fb9c:	eb cd 40 80 	pushm	r7,lr
8001fba0:	1a 97       	mov	r7,sp
8001fba2:	20 1d       	sub	sp,4
8001fba4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
8001fba8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001fbac:	2f 88       	sub	r8,-8
8001fbae:	2f f8       	sub	r8,-1
8001fbb0:	11 88       	ld.ub	r8,r8[0x0]
}
8001fbb2:	10 9c       	mov	r12,r8
8001fbb4:	2f fd       	sub	sp,-4
8001fbb6:	e3 cd 80 80 	ldm	sp++,r7,pc

8001fbba <mavlink_msg_mission_request_list_decode>:
 *
 * @param msg The message to decode
 * @param mission_request_list C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_request_list_decode(const mavlink_message_t* msg, mavlink_mission_request_list_t* mission_request_list)
{
8001fbba:	eb cd 40 c0 	pushm	r6-r7,lr
8001fbbe:	1a 97       	mov	r7,sp
8001fbc0:	20 2d       	sub	sp,8
8001fbc2:	48 c6       	lddpc	r6,8001fbf0 <mavlink_msg_mission_request_list_decode+0x36>
8001fbc4:	1e 26       	rsub	r6,pc
8001fbc6:	ef 4c ff fc 	st.w	r7[-4],r12
8001fbca:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_request_list->target_system = mavlink_msg_mission_request_list_get_target_system(msg);
8001fbce:	ee fc ff fc 	ld.w	r12,r7[-4]
8001fbd2:	cd 7f       	rcall	8001fb80 <mavlink_msg_mission_request_list_get_target_system>
8001fbd4:	18 98       	mov	r8,r12
8001fbd6:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001fbda:	b2 88       	st.b	r9[0x0],r8
	mission_request_list->target_component = mavlink_msg_mission_request_list_get_target_component(msg);
8001fbdc:	ee fc ff fc 	ld.w	r12,r7[-4]
8001fbe0:	cd ef       	rcall	8001fb9c <mavlink_msg_mission_request_list_get_target_component>
8001fbe2:	18 98       	mov	r8,r12
8001fbe4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001fbe8:	b2 98       	st.b	r9[0x1],r8
#else
	memcpy(mission_request_list, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_REQUEST_LIST_LEN);
#endif
}
8001fbea:	2f ed       	sub	sp,-8
8001fbec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fbf0:	80 01       	ld.sh	r1,r0[0x0]
8001fbf2:	fa 48 eb cd 	cp.w	r8,-332851

8001fbf4 <mavlink_msg_mission_count_send>:
 * @param count Number of mission items in the sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_count_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t count)
{
8001fbf4:	eb cd 40 c0 	pushm	r6-r7,lr
8001fbf8:	1a 97       	mov	r7,sp
8001fbfa:	20 5d       	sub	sp,20
8001fbfc:	49 56       	lddpc	r6,8001fc50 <mavlink_msg_mission_count_send+0x5c>
8001fbfe:	1e 26       	rsub	r6,pc
8001fc00:	ef 4c ff f8 	st.w	r7[-8],r12
8001fc04:	12 98       	mov	r8,r9
8001fc06:	16 99       	mov	r9,r11
8001fc08:	ef 69 ff f4 	st.b	r7[-12],r9
8001fc0c:	14 99       	mov	r9,r10
8001fc0e:	ef 69 ff f0 	st.b	r7[-16],r9
8001fc12:	ef 58 ff ec 	st.h	r7[-20],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_COUNT_LEN];
	_mav_put_uint16_t(buf, 0, count);
8001fc16:	ee c9 00 14 	sub	r9,r7,20
8001fc1a:	ee c8 00 04 	sub	r8,r7,4
8001fc1e:	12 9b       	mov	r11,r9
8001fc20:	10 9c       	mov	r12,r8
8001fc22:	fe b0 fb 81 	rcall	8001f324 <byte_swap_2>
	_mav_put_uint8_t(buf, 2, target_system);
8001fc26:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001fc2a:	ef 68 ff fe 	st.b	r7[-2],r8
	_mav_put_uint8_t(buf, 3, target_component);
8001fc2e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001fc32:	ef 68 ff ff 	st.b	r7[-1],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_COUNT, buf, MAVLINK_MSG_ID_MISSION_COUNT_LEN, MAVLINK_MSG_ID_MISSION_COUNT_CRC);
8001fc36:	ee ca 00 04 	sub	r10,r7,4
8001fc3a:	e0 68 00 dd 	mov	r8,221
8001fc3e:	30 49       	mov	r9,4
8001fc40:	32 cb       	mov	r11,44
8001fc42:	ee fc ff f8 	ld.w	r12,r7[-8]
8001fc46:	fe b0 fa c1 	rcall	8001f1c8 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_COUNT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_COUNT_LEN, MAVLINK_MSG_ID_MISSION_COUNT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_COUNT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_COUNT_LEN);
#endif
#endif
}
8001fc4a:	2f bd       	sub	sp,-20
8001fc4c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fc50:	80 01       	ld.sh	r1,r0[0x0]
8001fc52:	fa 82 eb cd 	brhs	7ff7d3ec <_estack+0x7ff6d3ec>

8001fc54 <mavlink_msg_mission_count_get_target_system>:
 * @brief Get field target_system from mission_count message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_count_get_target_system(const mavlink_message_t* msg)
{
8001fc54:	eb cd 40 80 	pushm	r7,lr
8001fc58:	1a 97       	mov	r7,sp
8001fc5a:	20 1d       	sub	sp,4
8001fc5c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001fc60:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001fc64:	2f 88       	sub	r8,-8
8001fc66:	2f e8       	sub	r8,-2
8001fc68:	11 88       	ld.ub	r8,r8[0x0]
}
8001fc6a:	10 9c       	mov	r12,r8
8001fc6c:	2f fd       	sub	sp,-4
8001fc6e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001fc72 <mavlink_msg_mission_count_get_target_component>:
 * @brief Get field target_component from mission_count message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_count_get_target_component(const mavlink_message_t* msg)
{
8001fc72:	eb cd 40 80 	pushm	r7,lr
8001fc76:	1a 97       	mov	r7,sp
8001fc78:	20 1d       	sub	sp,4
8001fc7a:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8001fc7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001fc82:	2f 88       	sub	r8,-8
8001fc84:	2f d8       	sub	r8,-3
8001fc86:	11 88       	ld.ub	r8,r8[0x0]
}
8001fc88:	10 9c       	mov	r12,r8
8001fc8a:	2f fd       	sub	sp,-4
8001fc8c:	e3 cd 80 80 	ldm	sp++,r7,pc

8001fc90 <mavlink_msg_mission_count_get_count>:
 * @brief Get field count from mission_count message
 *
 * @return Number of mission items in the sequence
 */
static inline uint16_t mavlink_msg_mission_count_get_count(const mavlink_message_t* msg)
{
8001fc90:	eb cd 40 c0 	pushm	r6-r7,lr
8001fc94:	1a 97       	mov	r7,sp
8001fc96:	20 1d       	sub	sp,4
8001fc98:	48 86       	lddpc	r6,8001fcb8 <mavlink_msg_mission_count_get_count+0x28>
8001fc9a:	1e 26       	rsub	r6,pc
8001fc9c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
8001fca0:	30 0b       	mov	r11,0
8001fca2:	ee fc ff fc 	ld.w	r12,r7[-4]
8001fca6:	fe b0 fb ab 	rcall	8001f3fc <_MAV_RETURN_uint16_t>
8001fcaa:	18 98       	mov	r8,r12
8001fcac:	5c 88       	casts.h	r8
8001fcae:	5c 88       	casts.h	r8
}
8001fcb0:	10 9c       	mov	r12,r8
8001fcb2:	2f fd       	sub	sp,-4
8001fcb4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fcb8:	80 01       	ld.sh	r1,r0[0x0]
8001fcba:	fb 1e eb cd 	ld.uh	lr,sp[-5171]

8001fcbc <mavlink_msg_mission_count_decode>:
 *
 * @param msg The message to decode
 * @param mission_count C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_count_decode(const mavlink_message_t* msg, mavlink_mission_count_t* mission_count)
{
8001fcbc:	eb cd 40 c0 	pushm	r6-r7,lr
8001fcc0:	1a 97       	mov	r7,sp
8001fcc2:	20 2d       	sub	sp,8
8001fcc4:	49 06       	lddpc	r6,8001fd04 <mavlink_msg_mission_count_decode+0x48>
8001fcc6:	1e 26       	rsub	r6,pc
8001fcc8:	ef 4c ff fc 	st.w	r7[-4],r12
8001fccc:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_count->count = mavlink_msg_mission_count_get_count(msg);
8001fcd0:	ee fc ff fc 	ld.w	r12,r7[-4]
8001fcd4:	cd ef       	rcall	8001fc90 <mavlink_msg_mission_count_get_count>
8001fcd6:	18 98       	mov	r8,r12
8001fcd8:	5c 88       	casts.h	r8
8001fcda:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001fcde:	b2 08       	st.h	r9[0x0],r8
	mission_count->target_system = mavlink_msg_mission_count_get_target_system(msg);
8001fce0:	ee fc ff fc 	ld.w	r12,r7[-4]
8001fce4:	cb 8f       	rcall	8001fc54 <mavlink_msg_mission_count_get_target_system>
8001fce6:	18 98       	mov	r8,r12
8001fce8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001fcec:	b2 a8       	st.b	r9[0x2],r8
	mission_count->target_component = mavlink_msg_mission_count_get_target_component(msg);
8001fcee:	ee fc ff fc 	ld.w	r12,r7[-4]
8001fcf2:	cc 0f       	rcall	8001fc72 <mavlink_msg_mission_count_get_target_component>
8001fcf4:	18 98       	mov	r8,r12
8001fcf6:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001fcfa:	b2 b8       	st.b	r9[0x3],r8
#else
	memcpy(mission_count, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_COUNT_LEN);
#endif
}
8001fcfc:	2f ed       	sub	sp,-8
8001fcfe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fd02:	00 00       	add	r0,r0
8001fd04:	80 01       	ld.sh	r1,r0[0x0]
8001fd06:	fb 4a eb cd 	st.w	sp[-5171],r10

8001fd08 <mavlink_msg_mission_clear_all_get_target_system>:
 * @brief Get field target_system from mission_clear_all message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_clear_all_get_target_system(const mavlink_message_t* msg)
{
8001fd08:	eb cd 40 80 	pushm	r7,lr
8001fd0c:	1a 97       	mov	r7,sp
8001fd0e:	20 1d       	sub	sp,4
8001fd10:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
8001fd14:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001fd18:	2f 88       	sub	r8,-8
8001fd1a:	11 88       	ld.ub	r8,r8[0x0]
}
8001fd1c:	10 9c       	mov	r12,r8
8001fd1e:	2f fd       	sub	sp,-4
8001fd20:	e3 cd 80 80 	ldm	sp++,r7,pc

8001fd24 <mavlink_msg_mission_clear_all_get_target_component>:
 * @brief Get field target_component from mission_clear_all message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_clear_all_get_target_component(const mavlink_message_t* msg)
{
8001fd24:	eb cd 40 80 	pushm	r7,lr
8001fd28:	1a 97       	mov	r7,sp
8001fd2a:	20 1d       	sub	sp,4
8001fd2c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
8001fd30:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001fd34:	2f 88       	sub	r8,-8
8001fd36:	2f f8       	sub	r8,-1
8001fd38:	11 88       	ld.ub	r8,r8[0x0]
}
8001fd3a:	10 9c       	mov	r12,r8
8001fd3c:	2f fd       	sub	sp,-4
8001fd3e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001fd42 <mavlink_msg_mission_clear_all_decode>:
 *
 * @param msg The message to decode
 * @param mission_clear_all C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_clear_all_decode(const mavlink_message_t* msg, mavlink_mission_clear_all_t* mission_clear_all)
{
8001fd42:	eb cd 40 c0 	pushm	r6-r7,lr
8001fd46:	1a 97       	mov	r7,sp
8001fd48:	20 2d       	sub	sp,8
8001fd4a:	48 c6       	lddpc	r6,8001fd78 <mavlink_msg_mission_clear_all_decode+0x36>
8001fd4c:	1e 26       	rsub	r6,pc
8001fd4e:	ef 4c ff fc 	st.w	r7[-4],r12
8001fd52:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_clear_all->target_system = mavlink_msg_mission_clear_all_get_target_system(msg);
8001fd56:	ee fc ff fc 	ld.w	r12,r7[-4]
8001fd5a:	cd 7f       	rcall	8001fd08 <mavlink_msg_mission_clear_all_get_target_system>
8001fd5c:	18 98       	mov	r8,r12
8001fd5e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001fd62:	b2 88       	st.b	r9[0x0],r8
	mission_clear_all->target_component = mavlink_msg_mission_clear_all_get_target_component(msg);
8001fd64:	ee fc ff fc 	ld.w	r12,r7[-4]
8001fd68:	cd ef       	rcall	8001fd24 <mavlink_msg_mission_clear_all_get_target_component>
8001fd6a:	18 98       	mov	r8,r12
8001fd6c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001fd70:	b2 98       	st.b	r9[0x1],r8
#else
	memcpy(mission_clear_all, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_CLEAR_ALL_LEN);
#endif
}
8001fd72:	2f ed       	sub	sp,-8
8001fd74:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fd78:	80 01       	ld.sh	r1,r0[0x0]
8001fd7a:	fb d0       	*unknown*

8001fd7c <mavlink_msg_mission_item_reached_send>:
 * @param seq Sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_item_reached_send(mavlink_channel_t chan, uint16_t seq)
{
8001fd7c:	eb cd 40 c0 	pushm	r6-r7,lr
8001fd80:	1a 97       	mov	r7,sp
8001fd82:	20 3d       	sub	sp,12
8001fd84:	48 e6       	lddpc	r6,8001fdbc <mavlink_msg_mission_item_reached_send+0x40>
8001fd86:	1e 26       	rsub	r6,pc
8001fd88:	ef 4c ff f8 	st.w	r7[-8],r12
8001fd8c:	16 98       	mov	r8,r11
8001fd8e:	ef 58 ff f4 	st.h	r7[-12],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN];
	_mav_put_uint16_t(buf, 0, seq);
8001fd92:	ee c9 00 0c 	sub	r9,r7,12
8001fd96:	ee c8 00 04 	sub	r8,r7,4
8001fd9a:	12 9b       	mov	r11,r9
8001fd9c:	10 9c       	mov	r12,r8
8001fd9e:	fe b0 fa c3 	rcall	8001f324 <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM_REACHED, buf, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_CRC);
8001fda2:	ee ca 00 04 	sub	r10,r7,4
8001fda6:	30 b8       	mov	r8,11
8001fda8:	30 29       	mov	r9,2
8001fdaa:	32 eb       	mov	r11,46
8001fdac:	ee fc ff f8 	ld.w	r12,r7[-8]
8001fdb0:	fe b0 fa 0c 	rcall	8001f1c8 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM_REACHED, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM_REACHED, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN);
#endif
#endif
}
8001fdb4:	2f dd       	sub	sp,-12
8001fdb6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fdba:	00 00       	add	r0,r0
8001fdbc:	80 01       	ld.sh	r1,r0[0x0]
8001fdbe:	fc 0a       	*unknown*

8001fdc0 <mavlink_msg_mission_ack_send>:
 * @param type See MAV_MISSION_RESULT enum
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_ack_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t type)
{
8001fdc0:	eb cd 40 c0 	pushm	r6-r7,lr
8001fdc4:	1a 97       	mov	r7,sp
8001fdc6:	20 5d       	sub	sp,20
8001fdc8:	49 36       	lddpc	r6,8001fe14 <mavlink_msg_mission_ack_send+0x54>
8001fdca:	1e 26       	rsub	r6,pc
8001fdcc:	ef 4c ff f8 	st.w	r7[-8],r12
8001fdd0:	12 98       	mov	r8,r9
8001fdd2:	16 99       	mov	r9,r11
8001fdd4:	ef 69 ff f4 	st.b	r7[-12],r9
8001fdd8:	14 99       	mov	r9,r10
8001fdda:	ef 69 ff f0 	st.b	r7[-16],r9
8001fdde:	ef 68 ff ec 	st.b	r7[-20],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_ACK_LEN];
	_mav_put_uint8_t(buf, 0, target_system);
8001fde2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001fde6:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 1, target_component);
8001fdea:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001fdee:	ef 68 ff fd 	st.b	r7[-3],r8
	_mav_put_uint8_t(buf, 2, type);
8001fdf2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001fdf6:	ef 68 ff fe 	st.b	r7[-2],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ACK, buf, MAVLINK_MSG_ID_MISSION_ACK_LEN, MAVLINK_MSG_ID_MISSION_ACK_CRC);
8001fdfa:	ee ca 00 04 	sub	r10,r7,4
8001fdfe:	e0 68 00 99 	mov	r8,153
8001fe02:	30 39       	mov	r9,3
8001fe04:	32 fb       	mov	r11,47
8001fe06:	ee fc ff f8 	ld.w	r12,r7[-8]
8001fe0a:	fe b0 f9 df 	rcall	8001f1c8 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ACK, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ACK_LEN, MAVLINK_MSG_ID_MISSION_ACK_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ACK, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ACK_LEN);
#endif
#endif
}
8001fe0e:	2f bd       	sub	sp,-20
8001fe10:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001fe14:	80 01       	ld.sh	r1,r0[0x0]
8001fe16:	fc 4e eb cd 	cp.w	lr,-201779

8001fe18 <mavlink_msg_mission_ack_get_target_system>:
 * @brief Get field target_system from mission_ack message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_ack_get_target_system(const mavlink_message_t* msg)
{
8001fe18:	eb cd 40 80 	pushm	r7,lr
8001fe1c:	1a 97       	mov	r7,sp
8001fe1e:	20 1d       	sub	sp,4
8001fe20:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
8001fe24:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001fe28:	2f 88       	sub	r8,-8
8001fe2a:	11 88       	ld.ub	r8,r8[0x0]
}
8001fe2c:	10 9c       	mov	r12,r8
8001fe2e:	2f fd       	sub	sp,-4
8001fe30:	e3 cd 80 80 	ldm	sp++,r7,pc

8001fe34 <mavlink_msg_mission_ack_get_target_component>:
 * @brief Get field target_component from mission_ack message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_ack_get_target_component(const mavlink_message_t* msg)
{
8001fe34:	eb cd 40 80 	pushm	r7,lr
8001fe38:	1a 97       	mov	r7,sp
8001fe3a:	20 1d       	sub	sp,4
8001fe3c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
8001fe40:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001fe44:	2f 88       	sub	r8,-8
8001fe46:	2f f8       	sub	r8,-1
8001fe48:	11 88       	ld.ub	r8,r8[0x0]
}
8001fe4a:	10 9c       	mov	r12,r8
8001fe4c:	2f fd       	sub	sp,-4
8001fe4e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001fe52 <mavlink_msg_mission_ack_get_type>:
 * @brief Get field type from mission_ack message
 *
 * @return See MAV_MISSION_RESULT enum
 */
static inline uint8_t mavlink_msg_mission_ack_get_type(const mavlink_message_t* msg)
{
8001fe52:	eb cd 40 80 	pushm	r7,lr
8001fe56:	1a 97       	mov	r7,sp
8001fe58:	20 1d       	sub	sp,4
8001fe5a:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001fe5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001fe62:	2f 88       	sub	r8,-8
8001fe64:	2f e8       	sub	r8,-2
8001fe66:	11 88       	ld.ub	r8,r8[0x0]
}
8001fe68:	10 9c       	mov	r12,r8
8001fe6a:	2f fd       	sub	sp,-4
8001fe6c:	e3 cd 80 80 	ldm	sp++,r7,pc

8001fe70 <mavlink_msg_mission_ack_decode>:
 *
 * @param msg The message to decode
 * @param mission_ack C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_ack_decode(const mavlink_message_t* msg, mavlink_mission_ack_t* mission_ack)
{
8001fe70:	eb cd 40 c0 	pushm	r6-r7,lr
8001fe74:	1a 97       	mov	r7,sp
8001fe76:	20 2d       	sub	sp,8
8001fe78:	48 f6       	lddpc	r6,8001feb4 <mavlink_msg_mission_ack_decode+0x44>
8001fe7a:	1e 26       	rsub	r6,pc
8001fe7c:	ef 4c ff fc 	st.w	r7[-4],r12
8001fe80:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_ack->target_system = mavlink_msg_mission_ack_get_target_system(msg);
8001fe84:	ee fc ff fc 	ld.w	r12,r7[-4]
8001fe88:	cc 8f       	rcall	8001fe18 <mavlink_msg_mission_ack_get_target_system>
8001fe8a:	18 98       	mov	r8,r12
8001fe8c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001fe90:	b2 88       	st.b	r9[0x0],r8
	mission_ack->target_component = mavlink_msg_mission_ack_get_target_component(msg);
8001fe92:	ee fc ff fc 	ld.w	r12,r7[-4]
8001fe96:	cc ff       	rcall	8001fe34 <mavlink_msg_mission_ack_get_target_component>
8001fe98:	18 98       	mov	r8,r12
8001fe9a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001fe9e:	b2 98       	st.b	r9[0x1],r8
	mission_ack->type = mavlink_msg_mission_ack_get_type(msg);
8001fea0:	ee fc ff fc 	ld.w	r12,r7[-4]
8001fea4:	cd 7f       	rcall	8001fe52 <mavlink_msg_mission_ack_get_type>
8001fea6:	18 98       	mov	r8,r12
8001fea8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001feac:	b2 a8       	st.b	r9[0x2],r8
#else
	memcpy(mission_ack, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_ACK_LEN);
#endif
}
8001feae:	2f ed       	sub	sp,-8
8001feb0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001feb4:	80 01       	ld.sh	r1,r0[0x0]
8001feb6:	fc fe eb cd 	ld.w	lr,lr[-5171]

8001feb8 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8001feb8:	eb cd 40 80 	pushm	r7,lr
8001febc:	1a 97       	mov	r7,sp
8001febe:	20 3d       	sub	sp,12
8001fec0:	ef 4c ff f8 	st.w	r7[-8],r12
8001fec4:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8001fec8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001fecc:	70 09       	ld.w	r9,r8[0x0]
8001fece:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001fed2:	70 08       	ld.w	r8,r8[0x0]
8001fed4:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001fed8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001fedc:	2f c8       	sub	r8,-4
8001fede:	70 0a       	ld.w	r10,r8[0x0]
8001fee0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001fee4:	2f c8       	sub	r8,-4
8001fee6:	70 08       	ld.w	r8,r8[0x0]
8001fee8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001feec:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001fef0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001fef4:	2f 88       	sub	r8,-8
8001fef6:	70 0a       	ld.w	r10,r8[0x0]
8001fef8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001fefc:	2f 88       	sub	r8,-8
8001fefe:	70 08       	ld.w	r8,r8[0x0]
8001ff00:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001ff04:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001ff08:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8001ff0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001ff10:	10 9c       	mov	r12,r8
8001ff12:	2f dd       	sub	sp,-12
8001ff14:	e3 cd 80 80 	ldm	sp++,r7,pc

8001ff18 <vector_norm_sqr>:
	result=0.5*(result+(input/result));
	return result;
}

float static inline vector_norm_sqr(float u[])
{
8001ff18:	eb cd 40 c0 	pushm	r6-r7,lr
8001ff1c:	1a 97       	mov	r7,sp
8001ff1e:	20 2d       	sub	sp,8
8001ff20:	48 96       	lddpc	r6,8001ff44 <vector_norm_sqr+0x2c>
8001ff22:	1e 26       	rsub	r6,pc
8001ff24:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
8001ff28:	ee fb ff f8 	ld.w	r11,r7[-8]
8001ff2c:	ee fc ff f8 	ld.w	r12,r7[-8]
8001ff30:	cc 4f       	rcall	8001feb8 <scalar_product>
8001ff32:	18 98       	mov	r8,r12
8001ff34:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
8001ff38:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001ff3c:	10 9c       	mov	r12,r8
8001ff3e:	2f ed       	sub	sp,-8
8001ff40:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ff44:	80 01       	ld.sh	r1,r0[0x0]
8001ff46:	fd a6       	*unknown*

8001ff48 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8001ff48:	eb cd 40 c0 	pushm	r6-r7,lr
8001ff4c:	1a 97       	mov	r7,sp
8001ff4e:	20 6d       	sub	sp,24
8001ff50:	49 e6       	lddpc	r6,8001ffc8 <interpolate+0x80>
8001ff52:	1e 26       	rsub	r6,pc
8001ff54:	ef 4c ff f8 	st.w	r7[-8],r12
8001ff58:	ef 4b ff f4 	st.w	r7[-12],r11
8001ff5c:	ef 4a ff f0 	st.w	r7[-16],r10
8001ff60:	ef 49 ff ec 	st.w	r7[-20],r9
8001ff64:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8001ff68:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ff6c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001ff70:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001ff74:	c0 41       	brne	8001ff7c <interpolate+0x34>
	{
		return y1;
8001ff76:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001ff7a:	c2 38       	rjmp	8001ffc0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8001ff7c:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001ff80:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001ff84:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001ff88:	ee fa ff f8 	ld.w	r10,r7[-8]
8001ff8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ff90:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8001ff94:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001ff98:	ee fa ff f0 	ld.w	r10,r7[-16]
8001ff9c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ffa0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001ffa4:	12 9b       	mov	r11,r9
8001ffa6:	10 9c       	mov	r12,r8
8001ffa8:	f0 16 00 08 	mcall	r6[32]
8001ffac:	18 98       	mov	r8,r12
8001ffae:	10 99       	mov	r9,r8
8001ffb0:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001ffb4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001ffb8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8001ffbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8001ffc0:	10 9c       	mov	r12,r8
8001ffc2:	2f ad       	sub	sp,-24
8001ffc4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ffc8:	80 01       	ld.sh	r1,r0[0x0]
8001ffca:	fd d6       	*unknown*

8001ffcc <get_thrust_from_remote>:


static float inline get_roll_from_remote()	{return rc_get_channel_neutral(RC_ROLL)*RC_ROLL_DIR * RC_SCALEFACTOR; };
static float inline get_pitch_from_remote()	{return rc_get_channel_neutral(RC_PITCH)*RC_PITCH_DIR * RC_SCALEFACTOR; };
static float inline get_yaw_from_remote()	{return rc_get_channel_neutral(RC_YAW)*RC_YAW_DIR * RC_SCALEFACTOR; };
static float inline get_thrust_from_remote()	{return rc_get_channel(RC_THROTTLE)*RC_THROTTLE_DIR*RC_SCALEFACTOR; };
8001ffcc:	eb cd 40 c0 	pushm	r6-r7,lr
8001ffd0:	1a 97       	mov	r7,sp
8001ffd2:	48 e6       	lddpc	r6,80020008 <get_thrust_from_remote+0x3c>
8001ffd4:	1e 26       	rsub	r6,pc
8001ffd6:	30 0c       	mov	r12,0
8001ffd8:	f0 16 00 1b 	mcall	r6[108]
8001ffdc:	18 98       	mov	r8,r12
8001ffde:	10 9c       	mov	r12,r8
8001ffe0:	f0 16 00 1a 	mcall	r6[104]
8001ffe4:	30 08       	mov	r8,0
8001ffe6:	e0 69 60 00 	mov	r9,24576
8001ffea:	ea 19 40 7b 	orh	r9,0x407b
8001ffee:	f0 16 00 0c 	mcall	r6[48]
8001fff2:	14 98       	mov	r8,r10
8001fff4:	16 99       	mov	r9,r11
8001fff6:	10 9a       	mov	r10,r8
8001fff8:	12 9b       	mov	r11,r9
8001fffa:	f0 16 00 09 	mcall	r6[36]
8001fffe:	18 98       	mov	r8,r12
80020000:	10 9c       	mov	r12,r8
80020002:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020006:	00 00       	add	r0,r0
80020008:	80 01       	ld.sh	r1,r0[0x0]
8002000a:	fe 58 eb cd 	cp.w	r8,-5171

8002000c <init_waypoint_handler>:
central_data_t *centralData;

int int_loop_count = 0;

void init_waypoint_handler()
{
8002000c:	eb cd 40 c0 	pushm	r6-r7,lr
80020010:	1a 97       	mov	r7,sp
80020012:	49 c6       	lddpc	r6,80020080 <init_waypoint_handler+0x74>
80020014:	1e 26       	rsub	r6,pc
	start_timeout = get_millis();
80020016:	f0 16 00 0f 	mcall	r6[60]
8002001a:	18 99       	mov	r9,r12
8002001c:	ec f8 01 78 	ld.w	r8,r6[376]
80020020:	91 09       	st.w	r8[0x0],r9
	timeout_max_wp = 10000;
80020022:	ec f8 04 14 	ld.w	r8,r6[1044]
80020026:	e0 69 27 10 	mov	r9,10000
8002002a:	91 09       	st.w	r8[0x0],r9
	centralData = get_central_data();
8002002c:	f0 16 00 33 	mcall	r6[204]
80020030:	18 99       	mov	r9,r12
80020032:	ec f8 00 00 	ld.w	r8,r6[0]
80020036:	91 09       	st.w	r8[0x0],r9
	
	centralData->critical_behavior = CLIMB_TO_SAFE_ALT;
80020038:	ec f8 00 00 	ld.w	r8,r6[0]
8002003c:	70 08       	ld.w	r8,r8[0x0]
8002003e:	30 19       	mov	r9,1
80020040:	f1 49 12 e4 	st.w	r8[4836],r9
	centralData->critical_init = false;
80020044:	ec f8 00 00 	ld.w	r8,r6[0]
80020048:	70 09       	ld.w	r9,r8[0x0]
8002004a:	30 08       	mov	r8,0
8002004c:	f3 68 10 b9 	st.b	r9[4281],r8
	centralData->critical_next_state = false;
80020050:	ec f8 00 00 	ld.w	r8,r6[0]
80020054:	70 09       	ld.w	r9,r8[0x0]
80020056:	30 08       	mov	r8,0
80020058:	f3 68 10 ba 	st.b	r9[4282],r8
	
	init_waypoint_list(centralData->waypoint_list, &centralData->number_of_waypoints);
8002005c:	ec f8 00 00 	ld.w	r8,r6[0]
80020060:	70 08       	ld.w	r8,r8[0x0]
80020062:	f0 c9 ef e4 	sub	r9,r8,-4124
80020066:	ec f8 00 00 	ld.w	r8,r6[0]
8002006a:	70 08       	ld.w	r8,r8[0x0]
8002006c:	f0 c8 f1 f4 	sub	r8,r8,-3596
80020070:	12 9b       	mov	r11,r9
80020072:	10 9c       	mov	r12,r8
80020074:	f0 16 01 59 	mcall	r6[1380]
	init_wp();
80020078:	f0 16 00 8d 	mcall	r6[564]
}
8002007c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020080:	80 01       	ld.sh	r1,r0[0x0]
80020082:	fe 98 4e 61 	brls	80009d44 <e_kalman_update_position_hf+0x558>
80020086:	76 20       	ld.w	r0,r11[0x8]
80020088:	69 6e       	ld.w	lr,r4[0x58]
8002008a:	69 74       	ld.w	r4,r4[0x5c]
8002008c:	0a 00       	add	r0,r5
8002008e:	00 00       	add	r0,r0
80020090:	57 61       	stdsp	sp[0x1d8],r1
80020092:	79 70       	ld.w	r0,r12[0x5c]
80020094:	6f 69       	ld.w	r9,r7[0x58]
80020096:	6e 74       	ld.w	r4,r7[0x1c]
80020098:	20 4e       	sub	lr,4
8002009a:	72 00       	ld.w	r0,r9[0x0]
8002009c:	20 73       	sub	r3,7
8002009e:	65 74       	ld.w	r4,r2[0x5c]
800200a0:	2c 0a       	sub	r10,-64
	...

800200a4 <init_wp>:

void init_wp()
{
800200a4:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800200a8:	1a 97       	mov	r7,sp
800200aa:	21 0d       	sub	sp,64
800200ac:	fe f6 02 fc 	ld.w	r6,pc[764]
800200b0:	1e 26       	rsub	r6,pc
	uint8_t i,j;
	float rel_pos[3];
	
	if (int_loop_count==0)
800200b2:	ec f8 03 44 	ld.w	r8,r6[836]
800200b6:	70 08       	ld.w	r8,r8[0x0]
800200b8:	58 08       	cp.w	r8,0
800200ba:	c0 51       	brne	800200c4 <init_wp+0x20>
	{
		dbg_print("Nav init\n");
800200bc:	fe cc 00 38 	sub	r12,pc,56
800200c0:	f0 16 00 01 	mcall	r6[4]
	}
	int_loop_count=(int_loop_count+1)%1000;
800200c4:	ec f8 03 44 	ld.w	r8,r6[836]
800200c8:	70 08       	ld.w	r8,r8[0x0]
800200ca:	f0 c9 ff ff 	sub	r9,r8,-1
800200ce:	e0 68 4d d3 	mov	r8,19923
800200d2:	ea 18 10 62 	orh	r8,0x1062
800200d6:	f2 08 04 4a 	muls.d	r10,r9,r8
800200da:	f6 0a 14 06 	asr	r10,r11,0x6
800200de:	f2 08 14 1f 	asr	r8,r9,0x1f
800200e2:	f4 08 01 08 	sub	r8,r10,r8
800200e6:	e0 6a 03 e8 	mov	r10,1000
800200ea:	b5 38       	mul	r8,r10
800200ec:	f2 08 01 08 	sub	r8,r9,r8
800200f0:	ec f9 03 44 	ld.w	r9,r6[836]
800200f4:	93 08       	st.w	r9[0x0],r8
	
	if ((centralData->number_of_waypoints > 0) && (centralData->position_estimator.init_gps_position || centralData->simulation_mode) && centralData->waypoint_receiving == false)
800200f6:	ec f8 00 00 	ld.w	r8,r6[0]
800200fa:	70 08       	ld.w	r8,r8[0x0]
800200fc:	f1 08 10 1c 	ld.sh	r8,r8[4124]
80020100:	58 08       	cp.w	r8,0
80020102:	e0 80 01 4f 	breq	800203a0 <init_wp+0x2fc>
80020106:	ec f8 00 00 	ld.w	r8,r6[0]
8002010a:	70 08       	ld.w	r8,r8[0x0]
8002010c:	f1 38 0d 64 	ld.ub	r8,r8[3428]
80020110:	58 08       	cp.w	r8,0
80020112:	c0 91       	brne	80020124 <init_wp+0x80>
80020114:	ec f8 00 00 	ld.w	r8,r6[0]
80020118:	70 08       	ld.w	r8,r8[0x0]
8002011a:	f0 f8 10 c0 	ld.w	r8,r8[4288]
8002011e:	58 08       	cp.w	r8,0
80020120:	e0 80 01 40 	breq	800203a0 <init_wp+0x2fc>
80020124:	ec f8 00 00 	ld.w	r8,r6[0]
80020128:	70 08       	ld.w	r8,r8[0x0]
8002012a:	f1 38 10 b6 	ld.ub	r8,r8[4278]
8002012e:	ec 18 00 01 	eorl	r8,0x1
80020132:	5c 58       	castu.b	r8
80020134:	e0 80 01 36 	breq	800203a0 <init_wp+0x2fc>
	{
		for (i=0;i<centralData->number_of_waypoints;i++)
80020138:	30 08       	mov	r8,0
8002013a:	ef 68 ff fe 	st.b	r7[-2],r8
8002013e:	c2 69       	rjmp	8002038a <init_wp+0x2e6>
		{
			if ((centralData->waypoint_list[i].current == 1)&&(!centralData->waypoint_set))
80020140:	ec f8 00 00 	ld.w	r8,r6[0]
80020144:	70 0a       	ld.w	r10,r8[0x0]
80020146:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8002014a:	12 98       	mov	r8,r9
8002014c:	a1 78       	lsl	r8,0x1
8002014e:	12 08       	add	r8,r9
80020150:	a5 68       	lsl	r8,0x4
80020152:	f4 08 00 08 	add	r8,r10,r8
80020156:	f0 c8 f1 f0 	sub	r8,r8,-3600
8002015a:	11 89       	ld.ub	r9,r8[0x0]
8002015c:	30 18       	mov	r8,1
8002015e:	f0 09 18 00 	cp.b	r9,r8
80020162:	e0 81 01 0f 	brne	80020380 <init_wp+0x2dc>
80020166:	ec f8 00 00 	ld.w	r8,r6[0]
8002016a:	70 08       	ld.w	r8,r8[0x0]
8002016c:	f1 38 10 b4 	ld.ub	r8,r8[4276]
80020170:	ec 18 00 01 	eorl	r8,0x1
80020174:	5c 58       	castu.b	r8
80020176:	e0 80 01 05 	breq	80020380 <init_wp+0x2dc>
			{
				centralData->current_wp_count = i;
8002017a:	ec f8 00 00 	ld.w	r8,r6[0]
8002017e:	70 09       	ld.w	r9,r8[0x0]
80020180:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80020184:	f3 68 10 1e 	st.b	r9[4126],r8
				centralData->current_waypoint = centralData->waypoint_list[centralData->current_wp_count];
80020188:	ec f8 00 00 	ld.w	r8,r6[0]
8002018c:	70 0a       	ld.w	r10,r8[0x0]
8002018e:	ec f8 00 00 	ld.w	r8,r6[0]
80020192:	70 0b       	ld.w	r11,r8[0x0]
80020194:	ec f8 00 00 	ld.w	r8,r6[0]
80020198:	70 08       	ld.w	r8,r8[0x0]
8002019a:	f1 38 10 1e 	ld.ub	r8,r8[4126]
8002019e:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
800201a2:	12 98       	mov	r8,r9
800201a4:	a1 78       	lsl	r8,0x1
800201a6:	12 08       	add	r8,r9
800201a8:	a5 68       	lsl	r8,0x4
800201aa:	f6 08 00 08 	add	r8,r11,r8
800201ae:	f0 c8 f1 f4 	sub	r8,r8,-3596
800201b2:	f4 cb f0 14 	sub	r11,r10,-4076
800201b6:	10 9a       	mov	r10,r8
800201b8:	f6 c8 00 00 	sub	r8,r11,0
800201bc:	f4 c9 00 00 	sub	r9,r10,0
800201c0:	72 0c       	ld.w	r12,r9[0x0]
800201c2:	91 0c       	st.w	r8[0x0],r12
800201c4:	72 1c       	ld.w	r12,r9[0x4]
800201c6:	91 1c       	st.w	r8[0x4],r12
800201c8:	72 2c       	ld.w	r12,r9[0x8]
800201ca:	91 2c       	st.w	r8[0x8],r12
800201cc:	72 39       	ld.w	r9,r9[0xc]
800201ce:	91 39       	st.w	r8[0xc],r9
800201d0:	f6 c8 ff f0 	sub	r8,r11,-16
800201d4:	f4 c9 ff f0 	sub	r9,r10,-16
800201d8:	72 0c       	ld.w	r12,r9[0x0]
800201da:	91 0c       	st.w	r8[0x0],r12
800201dc:	72 1c       	ld.w	r12,r9[0x4]
800201de:	91 1c       	st.w	r8[0x4],r12
800201e0:	72 2c       	ld.w	r12,r9[0x8]
800201e2:	91 2c       	st.w	r8[0x8],r12
800201e4:	72 39       	ld.w	r9,r9[0xc]
800201e6:	91 39       	st.w	r8[0xc],r9
800201e8:	f6 c8 ff e0 	sub	r8,r11,-32
800201ec:	f4 c9 ff e0 	sub	r9,r10,-32
800201f0:	72 0a       	ld.w	r10,r9[0x0]
800201f2:	91 0a       	st.w	r8[0x0],r10
800201f4:	72 1a       	ld.w	r10,r9[0x4]
800201f6:	91 1a       	st.w	r8[0x4],r10
800201f8:	72 2a       	ld.w	r10,r9[0x8]
800201fa:	91 2a       	st.w	r8[0x8],r10
800201fc:	72 39       	ld.w	r9,r9[0xc]
800201fe:	91 39       	st.w	r8[0xc],r9
				centralData->waypoint_coordinates = set_waypoint_from_frame(centralData->current_waypoint,centralData->position_estimator.localPosition.origin);
80020200:	ec f8 00 00 	ld.w	r8,r6[0]
80020204:	70 05       	ld.w	r5,r8[0x0]
80020206:	ec f8 00 00 	ld.w	r8,r6[0]
8002020a:	70 08       	ld.w	r8,r8[0x0]
8002020c:	ec f9 00 00 	ld.w	r9,r6[0]
80020210:	72 0e       	ld.w	lr,r9[0x0]
80020212:	ee cc 00 40 	sub	r12,r7,64
80020216:	20 7d       	sub	sp,28
80020218:	1a 99       	mov	r9,sp
8002021a:	12 9a       	mov	r10,r9
8002021c:	f0 cb f2 54 	sub	r11,r8,-3500
80020220:	f4 c8 00 00 	sub	r8,r10,0
80020224:	f6 c9 00 00 	sub	r9,r11,0
80020228:	72 03       	ld.w	r3,r9[0x0]
8002022a:	91 03       	st.w	r8[0x0],r3
8002022c:	72 13       	ld.w	r3,r9[0x4]
8002022e:	91 13       	st.w	r8[0x4],r3
80020230:	72 23       	ld.w	r3,r9[0x8]
80020232:	91 23       	st.w	r8[0x8],r3
80020234:	72 39       	ld.w	r9,r9[0xc]
80020236:	91 39       	st.w	r8[0xc],r9
80020238:	f6 e8 00 10 	ld.d	r8,r11[16]
8002023c:	f4 e9 00 10 	st.d	r10[16],r8
80020240:	76 68       	ld.w	r8,r11[0x18]
80020242:	95 68       	st.w	r10[0x18],r8
80020244:	20 cd       	sub	sp,48
80020246:	1a 98       	mov	r8,sp
80020248:	10 9b       	mov	r11,r8
8002024a:	fc ca f0 14 	sub	r10,lr,-4076
8002024e:	f6 c8 00 00 	sub	r8,r11,0
80020252:	f4 c9 00 00 	sub	r9,r10,0
80020256:	72 0e       	ld.w	lr,r9[0x0]
80020258:	91 0e       	st.w	r8[0x0],lr
8002025a:	72 1e       	ld.w	lr,r9[0x4]
8002025c:	91 1e       	st.w	r8[0x4],lr
8002025e:	72 2e       	ld.w	lr,r9[0x8]
80020260:	91 2e       	st.w	r8[0x8],lr
80020262:	72 39       	ld.w	r9,r9[0xc]
80020264:	91 39       	st.w	r8[0xc],r9
80020266:	f6 c8 ff f0 	sub	r8,r11,-16
8002026a:	f4 c9 ff f0 	sub	r9,r10,-16
8002026e:	72 0e       	ld.w	lr,r9[0x0]
80020270:	91 0e       	st.w	r8[0x0],lr
80020272:	72 1e       	ld.w	lr,r9[0x4]
80020274:	91 1e       	st.w	r8[0x4],lr
80020276:	72 2e       	ld.w	lr,r9[0x8]
80020278:	91 2e       	st.w	r8[0x8],lr
8002027a:	72 39       	ld.w	r9,r9[0xc]
8002027c:	91 39       	st.w	r8[0xc],r9
8002027e:	f6 c8 ff e0 	sub	r8,r11,-32
80020282:	f4 c9 ff e0 	sub	r9,r10,-32
80020286:	72 0a       	ld.w	r10,r9[0x0]
80020288:	91 0a       	st.w	r8[0x0],r10
8002028a:	72 1a       	ld.w	r10,r9[0x4]
8002028c:	91 1a       	st.w	r8[0x4],r10
8002028e:	72 2a       	ld.w	r10,r9[0x8]
80020290:	91 2a       	st.w	r8[0x8],r10
80020292:	72 39       	ld.w	r9,r9[0xc]
80020294:	91 39       	st.w	r8[0xc],r9
80020296:	f0 16 00 fe 	mcall	r6[1016]
8002029a:	2e dd       	sub	sp,-76
8002029c:	ea cb ef e0 	sub	r11,r5,-4128
800202a0:	ee ca 00 40 	sub	r10,r7,64
800202a4:	f6 c8 00 00 	sub	r8,r11,0
800202a8:	f4 c9 00 00 	sub	r9,r10,0
800202ac:	72 0c       	ld.w	r12,r9[0x0]
800202ae:	91 0c       	st.w	r8[0x0],r12
800202b0:	72 1c       	ld.w	r12,r9[0x4]
800202b2:	91 1c       	st.w	r8[0x4],r12
800202b4:	72 2c       	ld.w	r12,r9[0x8]
800202b6:	91 2c       	st.w	r8[0x8],r12
800202b8:	72 39       	ld.w	r9,r9[0xc]
800202ba:	91 39       	st.w	r8[0xc],r9
800202bc:	f6 c8 ff f0 	sub	r8,r11,-16
800202c0:	f4 c9 ff f0 	sub	r9,r10,-16
800202c4:	72 0c       	ld.w	r12,r9[0x0]
800202c6:	91 0c       	st.w	r8[0x0],r12
800202c8:	72 1c       	ld.w	r12,r9[0x4]
800202ca:	91 1c       	st.w	r8[0x4],r12
800202cc:	72 2c       	ld.w	r12,r9[0x8]
800202ce:	91 2c       	st.w	r8[0x8],r12
800202d0:	72 39       	ld.w	r9,r9[0xc]
800202d2:	91 39       	st.w	r8[0xc],r9
800202d4:	f6 c8 ff e0 	sub	r8,r11,-32
800202d8:	f4 c9 ff e0 	sub	r9,r10,-32
800202dc:	72 0a       	ld.w	r10,r9[0x0]
800202de:	91 0a       	st.w	r8[0x0],r10
800202e0:	72 1a       	ld.w	r10,r9[0x4]
800202e2:	91 1a       	st.w	r8[0x4],r10
800202e4:	72 2a       	ld.w	r10,r9[0x8]
800202e6:	91 2a       	st.w	r8[0x8],r10
800202e8:	72 39       	ld.w	r9,r9[0xc]
800202ea:	91 39       	st.w	r8[0xc],r9
				
				dbg_print("Waypoint Nr");
800202ec:	fe cc 02 5c 	sub	r12,pc,604
800202f0:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(i,10);
800202f4:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800202f8:	30 ab       	mov	r11,10
800202fa:	10 9c       	mov	r12,r8
800202fc:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" set,\n");
80020300:	fe cc 02 64 	sub	r12,pc,612
80020304:	f0 16 00 01 	mcall	r6[4]
			
				centralData->waypoint_set = true;
80020308:	ec f8 00 00 	ld.w	r8,r6[0]
8002030c:	70 09       	ld.w	r9,r8[0x0]
8002030e:	30 18       	mov	r8,1
80020310:	f3 68 10 b4 	st.b	r9[4276],r8
				//waypoint_reached = false;
				
				for (j=0;j<3;j++)
80020314:	30 08       	mov	r8,0
80020316:	ef 68 ff ff 	st.b	r7[-1],r8
8002031a:	c2 18       	rjmp	8002035c <init_wp+0x2b8>
				{
					rel_pos[j] = centralData->waypoint_coordinates.pos[j]-centralData->position_estimator.localPosition.pos[j];
8002031c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80020320:	ec f9 00 00 	ld.w	r9,r6[0]
80020324:	72 09       	ld.w	r9,r9[0x0]
80020326:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8002032a:	f4 ca fb f8 	sub	r10,r10,-1032
8002032e:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80020332:	ec f9 00 00 	ld.w	r9,r6[0]
80020336:	72 09       	ld.w	r9,r9[0x0]
80020338:	ef 3b ff ff 	ld.ub	r11,r7[-1]
8002033c:	f6 cb fc 99 	sub	r11,r11,-871
80020340:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80020344:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80020348:	a3 68       	lsl	r8,0x2
8002034a:	ee 08 00 08 	add	r8,r7,r8
8002034e:	f1 49 ff f0 	st.w	r8[-16],r9
				dbg_print(" set,\n");
			
				centralData->waypoint_set = true;
				//waypoint_reached = false;
				
				for (j=0;j<3;j++)
80020352:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80020356:	2f f8       	sub	r8,-1
80020358:	ef 68 ff ff 	st.b	r7[-1],r8
8002035c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80020360:	30 28       	mov	r8,2
80020362:	f0 09 18 00 	cp.b	r9,r8
80020366:	fe 98 ff db 	brls	8002031c <init_wp+0x278>
				{
					rel_pos[j] = centralData->waypoint_coordinates.pos[j]-centralData->position_estimator.localPosition.pos[j];
				}
				centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
8002036a:	ec f8 00 00 	ld.w	r8,r6[0]
8002036e:	70 05       	ld.w	r5,r8[0x0]
80020370:	ee c8 00 10 	sub	r8,r7,16
80020374:	10 9c       	mov	r12,r8
80020376:	fe b0 fd d1 	rcall	8001ff18 <vector_norm_sqr>
8002037a:	18 98       	mov	r8,r12
8002037c:	eb 48 10 b0 	st.w	r5[4272],r8
	}
	int_loop_count=(int_loop_count+1)%1000;
	
	if ((centralData->number_of_waypoints > 0) && (centralData->position_estimator.init_gps_position || centralData->simulation_mode) && centralData->waypoint_receiving == false)
	{
		for (i=0;i<centralData->number_of_waypoints;i++)
80020380:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80020384:	2f f8       	sub	r8,-1
80020386:	ef 68 ff fe 	st.b	r7[-2],r8
8002038a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8002038e:	ec f8 00 00 	ld.w	r8,r6[0]
80020392:	70 08       	ld.w	r8,r8[0x0]
80020394:	f1 08 10 1c 	ld.sh	r8,r8[4124]
80020398:	f0 09 19 00 	cp.h	r9,r8
8002039c:	fe 93 fe d2 	brlo	80020140 <init_wp+0x9c>
				}
				centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
			}
		}
	}
}
800203a0:	2f 0d       	sub	sp,-64
800203a2:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800203a6:	00 00       	add	r0,r0
800203a8:	80 01       	ld.sh	r1,r0[0x0]
800203aa:	ff 34 4e 75 	ld.ub	r4,pc[20085]
800203ae:	6d 62       	ld.w	r2,r6[0x58]
800203b0:	65 72       	ld.w	r2,r2[0x5c]
800203b2:	20 6f       	sub	pc,6
800203b4:	66 20       	ld.w	r0,r3[0x8]
800203b6:	57 61       	stdsp	sp[0x1d8],r1
800203b8:	79 70       	ld.w	r0,r12[0x5c]
800203ba:	6f 69       	ld.w	r9,r7[0x58]
800203bc:	6e 74       	ld.w	r4,r7[0x1c]
800203be:	20 6f       	sub	pc,6
800203c0:	6e 62       	ld.w	r2,r7[0x18]
800203c2:	6f 61       	ld.w	r1,r7[0x58]
800203c4:	72 64       	ld.w	r4,r9[0x18]
800203c6:	3a 00       	mov	r0,-96
800203c8:	0a 00       	add	r0,r5

800203ca <init_waypoint_list>:


void init_waypoint_list(waypoint_struct waypoint_list[], uint16_t* number_of_waypoints)
{
800203ca:	eb cd 40 c0 	pushm	r6-r7,lr
800203ce:	1a 97       	mov	r7,sp
800203d0:	20 ed       	sub	sp,56
800203d2:	fe f6 03 1a 	ld.w	r6,pc[794]
800203d6:	1e 26       	rsub	r6,pc
800203d8:	ef 4c ff cc 	st.w	r7[-52],r12
800203dc:	ef 4b ff c8 	st.w	r7[-56],r11
	
	
	// Visit https://code.google.com/p/ardupilot-mega/wiki/MAVLink to have a description of all messages (or common.h)
	waypoint_struct waypoint;
	*number_of_waypoints = 4;
800203e0:	ee f9 ff c8 	ld.w	r9,r7[-56]
800203e4:	30 48       	mov	r8,4
800203e6:	b2 08       	st.h	r9[0x0],r8
	
	num_waypoint_onboard = *number_of_waypoints;
800203e8:	ee f8 ff c8 	ld.w	r8,r7[-56]
800203ec:	90 08       	ld.sh	r8,r8[0x0]
800203ee:	ec f9 01 24 	ld.w	r9,r6[292]
800203f2:	b2 08       	st.h	r9[0x0],r8
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
800203f4:	30 18       	mov	r8,1
800203f6:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 1;
800203fa:	30 18       	mov	r8,1
800203fc:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
80020400:	30 38       	mov	r8,3
80020402:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
80020406:	31 08       	mov	r8,16
80020408:	ef 58 ff d2 	st.h	r7[-46],r8
	
	waypoint.x =  465185223.6174 / 1.0e7f; // convert to deg
8002040c:	e0 68 f5 80 	mov	r8,62848
80020410:	ea 18 f0 d4 	orh	r8,0xf0d4
80020414:	e0 69 42 5e 	mov	r9,16990
80020418:	ea 19 40 47 	orh	r9,0x4047
8002041c:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65670560 / 1.0e7f; // convert to deg
80020420:	fc 18 60 00 	movh	r8,0x6000
80020424:	e0 69 44 aa 	mov	r9,17578
80020428:	ea 19 40 1a 	orh	r9,0x401a
8002042c:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 20; //m
80020430:	30 08       	mov	r8,0
80020432:	fc 19 40 34 	movh	r9,0x4034
80020436:	ee e9 ff f8 	st.d	r7[-8],r8
	
	waypoint.param1 = 10; // Hold time in decimal seconds
8002043a:	fc 18 41 20 	movh	r8,0x4120
8002043e:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 2; // Acceptance radius in meters
80020442:	fc 18 40 00 	movh	r8,0x4000
80020446:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
8002044a:	30 08       	mov	r8,0
8002044c:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
80020450:	fc 18 42 b4 	movh	r8,0x42b4
80020454:	ef 48 ff e4 	st.w	r7[-28],r8
	
	waypoint_list[0] = waypoint;
80020458:	ee f8 ff cc 	ld.w	r8,r7[-52]
8002045c:	10 9b       	mov	r11,r8
8002045e:	ee ca 00 30 	sub	r10,r7,48
80020462:	f6 c8 00 00 	sub	r8,r11,0
80020466:	f4 c9 00 00 	sub	r9,r10,0
8002046a:	72 0c       	ld.w	r12,r9[0x0]
8002046c:	91 0c       	st.w	r8[0x0],r12
8002046e:	72 1c       	ld.w	r12,r9[0x4]
80020470:	91 1c       	st.w	r8[0x4],r12
80020472:	72 2c       	ld.w	r12,r9[0x8]
80020474:	91 2c       	st.w	r8[0x8],r12
80020476:	72 39       	ld.w	r9,r9[0xc]
80020478:	91 39       	st.w	r8[0xc],r9
8002047a:	f6 c8 ff f0 	sub	r8,r11,-16
8002047e:	f4 c9 ff f0 	sub	r9,r10,-16
80020482:	72 0c       	ld.w	r12,r9[0x0]
80020484:	91 0c       	st.w	r8[0x0],r12
80020486:	72 1c       	ld.w	r12,r9[0x4]
80020488:	91 1c       	st.w	r8[0x4],r12
8002048a:	72 2c       	ld.w	r12,r9[0x8]
8002048c:	91 2c       	st.w	r8[0x8],r12
8002048e:	72 39       	ld.w	r9,r9[0xc]
80020490:	91 39       	st.w	r8[0xc],r9
80020492:	f6 c8 ff e0 	sub	r8,r11,-32
80020496:	f4 c9 ff e0 	sub	r9,r10,-32
8002049a:	72 0a       	ld.w	r10,r9[0x0]
8002049c:	91 0a       	st.w	r8[0x0],r10
8002049e:	72 1a       	ld.w	r10,r9[0x4]
800204a0:	91 1a       	st.w	r8[0x4],r10
800204a2:	72 2a       	ld.w	r10,r9[0x8]
800204a4:	91 2a       	st.w	r8[0x8],r10
800204a6:	72 39       	ld.w	r9,r9[0xc]
800204a8:	91 39       	st.w	r8[0xc],r9
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
800204aa:	30 18       	mov	r8,1
800204ac:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 0;
800204b0:	30 08       	mov	r8,0
800204b2:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
800204b6:	30 38       	mov	r8,3
800204b8:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
800204bc:	31 08       	mov	r8,16
800204be:	ef 58 ff d2 	st.h	r7[-46],r8
	
	waypoint.x = 465186816 / 1.0e7f; // convert to deg
800204c2:	fc 18 20 00 	movh	r8,0x2000
800204c6:	e0 69 42 64 	mov	r9,16996
800204ca:	ea 19 40 47 	orh	r9,0x4047
800204ce:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65670560 / 1.0e7f; // convert to deg
800204d2:	fc 18 60 00 	movh	r8,0x6000
800204d6:	e0 69 44 aa 	mov	r9,17578
800204da:	ea 19 40 1a 	orh	r9,0x401a
800204de:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 20; //m
800204e2:	30 08       	mov	r8,0
800204e4:	fc 19 40 34 	movh	r9,0x4034
800204e8:	ee e9 ff f8 	st.d	r7[-8],r8
	
	waypoint.param1 = 10; // Hold time in decimal seconds
800204ec:	fc 18 41 20 	movh	r8,0x4120
800204f0:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 4; // Acceptance radius in meters
800204f4:	fc 18 40 80 	movh	r8,0x4080
800204f8:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
800204fc:	30 08       	mov	r8,0
800204fe:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
80020502:	fc 18 42 b4 	movh	r8,0x42b4
80020506:	ef 48 ff e4 	st.w	r7[-28],r8
	
	waypoint_list[1] = waypoint;
8002050a:	ee f8 ff cc 	ld.w	r8,r7[-52]
8002050e:	2d 08       	sub	r8,-48
80020510:	10 9b       	mov	r11,r8
80020512:	ee ca 00 30 	sub	r10,r7,48
80020516:	f6 c8 00 00 	sub	r8,r11,0
8002051a:	f4 c9 00 00 	sub	r9,r10,0
8002051e:	72 0c       	ld.w	r12,r9[0x0]
80020520:	91 0c       	st.w	r8[0x0],r12
80020522:	72 1c       	ld.w	r12,r9[0x4]
80020524:	91 1c       	st.w	r8[0x4],r12
80020526:	72 2c       	ld.w	r12,r9[0x8]
80020528:	91 2c       	st.w	r8[0x8],r12
8002052a:	72 39       	ld.w	r9,r9[0xc]
8002052c:	91 39       	st.w	r8[0xc],r9
8002052e:	f6 c8 ff f0 	sub	r8,r11,-16
80020532:	f4 c9 ff f0 	sub	r9,r10,-16
80020536:	72 0c       	ld.w	r12,r9[0x0]
80020538:	91 0c       	st.w	r8[0x0],r12
8002053a:	72 1c       	ld.w	r12,r9[0x4]
8002053c:	91 1c       	st.w	r8[0x4],r12
8002053e:	72 2c       	ld.w	r12,r9[0x8]
80020540:	91 2c       	st.w	r8[0x8],r12
80020542:	72 39       	ld.w	r9,r9[0xc]
80020544:	91 39       	st.w	r8[0xc],r9
80020546:	f6 c8 ff e0 	sub	r8,r11,-32
8002054a:	f4 c9 ff e0 	sub	r9,r10,-32
8002054e:	72 0a       	ld.w	r10,r9[0x0]
80020550:	91 0a       	st.w	r8[0x0],r10
80020552:	72 1a       	ld.w	r10,r9[0x4]
80020554:	91 1a       	st.w	r8[0x4],r10
80020556:	72 2a       	ld.w	r10,r9[0x8]
80020558:	91 2a       	st.w	r8[0x8],r10
8002055a:	72 39       	ld.w	r9,r9[0xc]
8002055c:	91 39       	st.w	r8[0xc],r9
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
8002055e:	30 18       	mov	r8,1
80020560:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 0;
80020564:	30 08       	mov	r8,0
80020566:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
8002056a:	30 38       	mov	r8,3
8002056c:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
80020570:	31 08       	mov	r8,16
80020572:	ef 58 ff d2 	st.h	r7[-46],r8
	
	waypoint.x = 465186816 / 1.0e7f; // convert to deg
80020576:	fc 18 20 00 	movh	r8,0x2000
8002057a:	e0 69 42 64 	mov	r9,16996
8002057e:	ea 19 40 47 	orh	r9,0x4047
80020582:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65659084 / 1.0e7f; // convert to deg
80020586:	fc 18 80 00 	movh	r8,0x8000
8002058a:	e0 69 43 7d 	mov	r9,17277
8002058e:	ea 19 40 1a 	orh	r9,0x401a
80020592:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 40; //m
80020596:	30 08       	mov	r8,0
80020598:	fc 19 40 44 	movh	r9,0x4044
8002059c:	ee e9 ff f8 	st.d	r7[-8],r8
	
	waypoint.param1 = 10; // Hold time in decimal seconds
800205a0:	fc 18 41 20 	movh	r8,0x4120
800205a4:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 15; // Acceptance radius in meters
800205a8:	fc 18 41 70 	movh	r8,0x4170
800205ac:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
800205b0:	30 08       	mov	r8,0
800205b2:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
800205b6:	fc 18 42 b4 	movh	r8,0x42b4
800205ba:	ef 48 ff e4 	st.w	r7[-28],r8
	
	waypoint_list[2] = waypoint;
800205be:	ee f8 ff cc 	ld.w	r8,r7[-52]
800205c2:	2a 08       	sub	r8,-96
800205c4:	10 9b       	mov	r11,r8
800205c6:	ee ca 00 30 	sub	r10,r7,48
800205ca:	f6 c8 00 00 	sub	r8,r11,0
800205ce:	f4 c9 00 00 	sub	r9,r10,0
800205d2:	72 0c       	ld.w	r12,r9[0x0]
800205d4:	91 0c       	st.w	r8[0x0],r12
800205d6:	72 1c       	ld.w	r12,r9[0x4]
800205d8:	91 1c       	st.w	r8[0x4],r12
800205da:	72 2c       	ld.w	r12,r9[0x8]
800205dc:	91 2c       	st.w	r8[0x8],r12
800205de:	72 39       	ld.w	r9,r9[0xc]
800205e0:	91 39       	st.w	r8[0xc],r9
800205e2:	f6 c8 ff f0 	sub	r8,r11,-16
800205e6:	f4 c9 ff f0 	sub	r9,r10,-16
800205ea:	72 0c       	ld.w	r12,r9[0x0]
800205ec:	91 0c       	st.w	r8[0x0],r12
800205ee:	72 1c       	ld.w	r12,r9[0x4]
800205f0:	91 1c       	st.w	r8[0x4],r12
800205f2:	72 2c       	ld.w	r12,r9[0x8]
800205f4:	91 2c       	st.w	r8[0x8],r12
800205f6:	72 39       	ld.w	r9,r9[0xc]
800205f8:	91 39       	st.w	r8[0xc],r9
800205fa:	f6 c8 ff e0 	sub	r8,r11,-32
800205fe:	f4 c9 ff e0 	sub	r9,r10,-32
80020602:	72 0a       	ld.w	r10,r9[0x0]
80020604:	91 0a       	st.w	r8[0x0],r10
80020606:	72 1a       	ld.w	r10,r9[0x4]
80020608:	91 1a       	st.w	r8[0x4],r10
8002060a:	72 2a       	ld.w	r10,r9[0x8]
8002060c:	91 2a       	st.w	r8[0x8],r10
8002060e:	72 39       	ld.w	r9,r9[0xc]
80020610:	91 39       	st.w	r8[0xc],r9
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
80020612:	30 18       	mov	r8,1
80020614:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 0;
80020618:	30 08       	mov	r8,0
8002061a:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
8002061e:	30 38       	mov	r8,3
80020620:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
80020624:	31 08       	mov	r8,16
80020626:	ef 58 ff d2 	st.h	r7[-46],r8

	waypoint.x = 465182186 / 1.0e7f; // convert to deg
8002062a:	30 08       	mov	r8,0
8002062c:	e0 69 42 55 	mov	r9,16981
80020630:	ea 19 40 47 	orh	r9,0x4047
80020634:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65659084 / 1.0e7f; // convert to deg
80020638:	fc 18 80 00 	movh	r8,0x8000
8002063c:	e0 69 43 7d 	mov	r9,17277
80020640:	ea 19 40 1a 	orh	r9,0x401a
80020644:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 20; //m
80020648:	30 08       	mov	r8,0
8002064a:	fc 19 40 34 	movh	r9,0x4034
8002064e:	ee e9 ff f8 	st.d	r7[-8],r8

	waypoint.param1 = 10; // Hold time in decimal seconds
80020652:	fc 18 41 20 	movh	r8,0x4120
80020656:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 12; // Acceptance radius in meters
8002065a:	fc 18 41 40 	movh	r8,0x4140
8002065e:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
80020662:	30 08       	mov	r8,0
80020664:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
80020668:	fc 18 42 b4 	movh	r8,0x42b4
8002066c:	ef 48 ff e4 	st.w	r7[-28],r8

	waypoint_list[3] = waypoint;
80020670:	ee f8 ff cc 	ld.w	r8,r7[-52]
80020674:	f0 c8 ff 70 	sub	r8,r8,-144
80020678:	10 9b       	mov	r11,r8
8002067a:	ee ca 00 30 	sub	r10,r7,48
8002067e:	f6 c8 00 00 	sub	r8,r11,0
80020682:	f4 c9 00 00 	sub	r9,r10,0
80020686:	72 0c       	ld.w	r12,r9[0x0]
80020688:	91 0c       	st.w	r8[0x0],r12
8002068a:	72 1c       	ld.w	r12,r9[0x4]
8002068c:	91 1c       	st.w	r8[0x4],r12
8002068e:	72 2c       	ld.w	r12,r9[0x8]
80020690:	91 2c       	st.w	r8[0x8],r12
80020692:	72 39       	ld.w	r9,r9[0xc]
80020694:	91 39       	st.w	r8[0xc],r9
80020696:	f6 c8 ff f0 	sub	r8,r11,-16
8002069a:	f4 c9 ff f0 	sub	r9,r10,-16
8002069e:	72 0c       	ld.w	r12,r9[0x0]
800206a0:	91 0c       	st.w	r8[0x0],r12
800206a2:	72 1c       	ld.w	r12,r9[0x4]
800206a4:	91 1c       	st.w	r8[0x4],r12
800206a6:	72 2c       	ld.w	r12,r9[0x8]
800206a8:	91 2c       	st.w	r8[0x8],r12
800206aa:	72 39       	ld.w	r9,r9[0xc]
800206ac:	91 39       	st.w	r8[0xc],r9
800206ae:	f6 c8 ff e0 	sub	r8,r11,-32
800206b2:	f4 c9 ff e0 	sub	r9,r10,-32
800206b6:	72 0a       	ld.w	r10,r9[0x0]
800206b8:	91 0a       	st.w	r8[0x0],r10
800206ba:	72 1a       	ld.w	r10,r9[0x4]
800206bc:	91 1a       	st.w	r8[0x4],r10
800206be:	72 2a       	ld.w	r10,r9[0x8]
800206c0:	91 2a       	st.w	r8[0x8],r10
800206c2:	72 39       	ld.w	r9,r9[0xc]
800206c4:	91 39       	st.w	r8[0xc],r9
	//waypoint.param3 = 465186806 / 1.0e7f; // lat converted to deg
	//waypoint.param4 = 65659084 / 1.0e7f; // long converted to deg
	
	//waypoint_list[4] = waypoint;
	
	dbg_print("Number of Waypoint onboard:");
800206c6:	fe cc 03 1a 	sub	r12,pc,794
800206ca:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(num_waypoint_onboard,10);
800206ce:	ec f8 01 24 	ld.w	r8,r6[292]
800206d2:	90 08       	ld.sh	r8,r8[0x0]
800206d4:	5c 78       	castu.h	r8
800206d6:	30 ab       	mov	r11,10
800206d8:	10 9c       	mov	r12,r8
800206da:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
800206de:	fe cc 03 16 	sub	r12,pc,790
800206e2:	f0 16 00 01 	mcall	r6[4]
	
}
800206e6:	2f 2d       	sub	sp,-56
800206e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800206ec:	80 02       	ld.sh	r2,r0[0x0]
800206ee:	02 5a       	eor	r10,r1
800206f0:	57 69       	stdsp	sp[0x1d8],r9
800206f2:	6c 6c       	ld.w	r12,r6[0x18]
800206f4:	20 73       	sub	r3,7
800206f6:	65 6e       	ld.w	lr,r2[0x58]
800206f8:	64 20       	ld.w	r0,r2[0x8]
800206fa:	00 00       	add	r0,r0
800206fc:	20 77       	sub	r7,7
800206fe:	61 79       	ld.w	r9,r0[0x5c]
80020700:	70 6f       	ld.w	pc,r8[0x18]
80020702:	69 6e       	ld.w	lr,r4[0x58]
80020704:	74 73       	ld.w	r3,r10[0x1c]
80020706:	0a 00       	add	r0,r5

80020708 <send_count>:

void send_count(Mavlink_Received_t* rec, uint16_t num_of_waypoint, bool* waypoint_receiving, bool * waypoint_sending)
{
80020708:	eb cd 40 c0 	pushm	r6-r7,lr
8002070c:	1a 97       	mov	r7,sp
8002070e:	20 5d       	sub	sp,20
80020710:	4a d6       	lddpc	r6,800207c4 <send_count+0xbc>
80020712:	1e 26       	rsub	r6,pc
80020714:	ef 4c ff f8 	st.w	r7[-8],r12
80020718:	16 98       	mov	r8,r11
8002071a:	ef 4a ff f0 	st.w	r7[-16],r10
8002071e:	ef 49 ff ec 	st.w	r7[-20],r9
80020722:	ef 58 ff f4 	st.h	r7[-12],r8
	mavlink_mission_request_list_t packet;
	mavlink_msg_mission_request_list_decode(&rec->msg,&packet);
80020726:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002072a:	ee c9 00 02 	sub	r9,r7,2
8002072e:	12 9b       	mov	r11,r9
80020730:	10 9c       	mov	r12,r8
80020732:	fe b0 fa 44 	rcall	8001fbba <mavlink_msg_mission_request_list_decode>
	
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020736:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8002073a:	ec f8 00 c8 	ld.w	r8,r6[200]
8002073e:	11 88       	ld.ub	r8,r8[0x0]
{
	mavlink_mission_request_list_t packet;
	mavlink_msg_mission_request_list_decode(&rec->msg,&packet);
	
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80020740:	f0 09 18 00 	cp.b	r9,r8
80020744:	c3 c1       	brne	800207bc <send_count+0xb4>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020746:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002074a:	ec f8 00 c8 	ld.w	r8,r6[200]
8002074e:	11 98       	ld.ub	r8,r8[0x1]
{
	mavlink_mission_request_list_t packet;
	mavlink_msg_mission_request_list_decode(&rec->msg,&packet);
	
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80020750:	f0 09 18 00 	cp.b	r9,r8
80020754:	c3 41       	brne	800207bc <send_count+0xb4>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{	
		mavlink_msg_mission_count_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,num_of_waypoint);
80020756:	ef 19 ff f4 	ld.uh	r9,r7[-12]
8002075a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002075e:	11 e8       	ld.ub	r8,r8[0x6]
80020760:	10 9a       	mov	r10,r8
80020762:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020766:	11 d8       	ld.ub	r8,r8[0x5]
80020768:	10 9b       	mov	r11,r8
8002076a:	30 0c       	mov	r12,0
8002076c:	fe b0 fa 44 	rcall	8001fbf4 <mavlink_msg_mission_count_send>
		
		if (num_of_waypoint != 0)
80020770:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80020774:	30 08       	mov	r8,0
80020776:	f0 09 19 00 	cp.h	r9,r8
8002077a:	c0 f0       	breq	80020798 <send_count+0x90>
		{
			*waypoint_sending = true;
8002077c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020780:	30 18       	mov	r8,1
80020782:	b2 88       	st.b	r9[0x0],r8
			*waypoint_receiving = false;
80020784:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020788:	30 08       	mov	r8,0
8002078a:	b2 88       	st.b	r9[0x0],r8
			start_timeout = get_millis();
8002078c:	f0 16 00 0f 	mcall	r6[60]
80020790:	18 99       	mov	r9,r12
80020792:	ec f8 01 78 	ld.w	r8,r6[376]
80020796:	91 09       	st.w	r8[0x0],r9
		}
		
		sending_wp_num = 0;
80020798:	ec f8 00 ac 	ld.w	r8,r6[172]
8002079c:	30 09       	mov	r9,0
8002079e:	91 09       	st.w	r8[0x0],r9
		dbg_print("Will send ");
800207a0:	fe cc 00 b0 	sub	r12,pc,176
800207a4:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(num_of_waypoint,10);
800207a8:	ef 18 ff f4 	ld.uh	r8,r7[-12]
800207ac:	30 ab       	mov	r11,10
800207ae:	10 9c       	mov	r12,r8
800207b0:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" waypoints\n");
800207b4:	fe cc 00 b8 	sub	r12,pc,184
800207b8:	f0 16 00 01 	mcall	r6[4]
	}
}
800207bc:	2f bd       	sub	sp,-20
800207be:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800207c2:	00 00       	add	r0,r0
800207c4:	80 02       	ld.sh	r2,r0[0x0]
800207c6:	05 96       	ld.ub	r6,r2[0x1]
800207c8:	41 73       	lddsp	r3,sp[0x5c]
800207ca:	6b 69       	ld.w	r9,r5[0x58]
800207cc:	6e 67       	ld.w	r7,r7[0x18]
800207ce:	20 66       	sub	r6,6
800207d0:	6f 72       	ld.w	r2,r7[0x5c]
800207d2:	20 77       	sub	r7,7
800207d4:	61 79       	ld.w	r9,r0[0x5c]
800207d6:	70 6f       	ld.w	pc,r8[0x18]
800207d8:	69 6e       	ld.w	lr,r4[0x58]
800207da:	74 20       	ld.w	r0,r10[0x8]
800207dc:	6e 75       	ld.w	r5,r7[0x1c]
800207de:	6d 62       	ld.w	r2,r6[0x58]
800207e0:	65 72       	ld.w	r2,r2[0x5c]
800207e2:	20 00       	sub	r0,0
800207e4:	53 65       	stdsp	sp[0xd8],r5
800207e6:	6e 64       	ld.w	r4,r7[0x18]
800207e8:	69 6e       	ld.w	lr,r4[0x58]
800207ea:	67 20       	ld.w	r0,r3[0x48]
800207ec:	77 61       	ld.w	r1,r11[0x58]
800207ee:	79 70       	ld.w	r0,r12[0x5c]
800207f0:	6f 69       	ld.w	r9,r7[0x58]
800207f2:	6e 74       	ld.w	r4,r7[0x1c]
800207f4:	20 00       	sub	r0,0

800207f6 <send_waypoint>:

void send_waypoint(Mavlink_Received_t* rec, waypoint_struct waypoint[], uint16_t num_of_waypoint, bool* waypoint_sending)
{
800207f6:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
800207fa:	1a 97       	mov	r7,sp
800207fc:	20 9d       	sub	sp,36
800207fe:	fe f6 02 62 	ld.w	r6,pc[610]
80020802:	1e 26       	rsub	r6,pc
80020804:	ef 4c ff f8 	st.w	r7[-8],r12
80020808:	ef 4b ff f4 	st.w	r7[-12],r11
8002080c:	14 98       	mov	r8,r10
8002080e:	ef 49 ff ec 	st.w	r7[-20],r9
80020812:	ef 58 ff f0 	st.h	r7[-16],r8
	if (*waypoint_sending)
80020816:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002081a:	11 88       	ld.ub	r8,r8[0x0]
8002081c:	58 08       	cp.w	r8,0
8002081e:	e0 80 01 1e 	breq	80020a5a <send_waypoint+0x264>
	{
		mavlink_mission_request_t packet;
		mavlink_msg_mission_request_decode(&rec->msg,&packet);
80020822:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020826:	ee c9 00 04 	sub	r9,r7,4
8002082a:	12 9b       	mov	r11,r9
8002082c:	10 9c       	mov	r12,r8
8002082e:	fe b0 f9 07 	rcall	8001fa3c <mavlink_msg_mission_request_decode>
		
		dbg_print("Asking for waypoint number ");
80020832:	fe cc 00 6a 	sub	r12,pc,106
80020836:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.seq,10);
8002083a:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8002083e:	5c 78       	castu.h	r8
80020840:	30 ab       	mov	r11,10
80020842:	10 9c       	mov	r12,r8
80020844:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
80020848:	fe cc 04 80 	sub	r12,pc,1152
8002084c:	f0 16 00 01 	mcall	r6[4]
		
		// Check if this message is for this system and subsystem
		if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
		&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020850:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80020854:	ec f8 00 c8 	ld.w	r8,r6[200]
80020858:	11 88       	ld.ub	r8,r8[0x0]
		dbg_print("Asking for waypoint number ");
		dbg_print_num(packet.seq,10);
		dbg_print("\n");
		
		// Check if this message is for this system and subsystem
		if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
8002085a:	f0 09 18 00 	cp.b	r9,r8
8002085e:	e0 81 00 fe 	brne	80020a5a <send_waypoint+0x264>
		&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020862:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80020866:	ec f8 00 c8 	ld.w	r8,r6[200]
8002086a:	11 98       	ld.ub	r8,r8[0x1]
		dbg_print("Asking for waypoint number ");
		dbg_print_num(packet.seq,10);
		dbg_print("\n");
		
		// Check if this message is for this system and subsystem
		if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
8002086c:	f0 09 18 00 	cp.b	r9,r8
80020870:	e0 81 00 f5 	brne	80020a5a <send_waypoint+0x264>
		&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
		{
			sending_wp_num = packet.seq;
80020874:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80020878:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8002087c:	ec f8 00 ac 	ld.w	r8,r6[172]
80020880:	91 09       	st.w	r8[0x0],r9
			if (sending_wp_num < num_of_waypoint)
80020882:	ef 19 ff f0 	ld.uh	r9,r7[-16]
80020886:	ec f8 00 ac 	ld.w	r8,r6[172]
8002088a:	70 08       	ld.w	r8,r8[0x0]
8002088c:	10 39       	cp.w	r9,r8
8002088e:	e0 8a 00 e6 	brle	80020a5a <send_waypoint+0x264>
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
80020892:	ec f8 00 ac 	ld.w	r8,r6[172]
80020896:	70 08       	ld.w	r8,r8[0x0]
80020898:	10 99       	mov	r9,r8
8002089a:	12 98       	mov	r8,r9
8002089c:	a1 78       	lsl	r8,0x1
8002089e:	12 08       	add	r8,r9
800208a0:	a5 68       	lsl	r8,0x4
800208a2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800208a6:	f2 08 00 08 	add	r8,r9,r8
800208aa:	f0 e8 00 28 	ld.d	r8,r8[40]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800208ae:	10 9a       	mov	r10,r8
800208b0:	12 9b       	mov	r11,r9
800208b2:	f0 16 00 09 	mcall	r6[36]
800208b6:	18 95       	mov	r5,r12
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
800208b8:	ec f8 00 ac 	ld.w	r8,r6[172]
800208bc:	70 08       	ld.w	r8,r8[0x0]
800208be:	10 99       	mov	r9,r8
800208c0:	12 98       	mov	r8,r9
800208c2:	a1 78       	lsl	r8,0x1
800208c4:	12 08       	add	r8,r9
800208c6:	a5 68       	lsl	r8,0x4
800208c8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800208cc:	f2 08 00 08 	add	r8,r9,r8
800208d0:	f0 e8 00 20 	ld.d	r8,r8[32]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800208d4:	10 9a       	mov	r10,r8
800208d6:	12 9b       	mov	r11,r9
800208d8:	f0 16 00 09 	mcall	r6[36]
800208dc:	ef 4c ff dc 	st.w	r7[-36],r12
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
800208e0:	ec f8 00 ac 	ld.w	r8,r6[172]
800208e4:	70 08       	ld.w	r8,r8[0x0]
800208e6:	10 99       	mov	r9,r8
800208e8:	12 98       	mov	r8,r9
800208ea:	a1 78       	lsl	r8,0x1
800208ec:	12 08       	add	r8,r9
800208ee:	a5 68       	lsl	r8,0x4
800208f0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800208f4:	f2 08 00 08 	add	r8,r9,r8
800208f8:	f0 e8 00 18 	ld.d	r8,r8[24]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800208fc:	10 9a       	mov	r10,r8
800208fe:	12 9b       	mov	r11,r9
80020900:	f0 16 00 09 	mcall	r6[36]
80020904:	ef 4c ff e0 	st.w	r7[-32],r12
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
80020908:	ec f8 00 ac 	ld.w	r8,r6[172]
8002090c:	70 08       	ld.w	r8,r8[0x0]
8002090e:	10 99       	mov	r9,r8
80020910:	12 98       	mov	r8,r9
80020912:	a1 78       	lsl	r8,0x1
80020914:	12 08       	add	r8,r9
80020916:	a5 68       	lsl	r8,0x4
80020918:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002091c:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
80020920:	70 58       	ld.w	r8,r8[0x14]
80020922:	ef 48 ff e4 	st.w	r7[-28],r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
80020926:	ec f8 00 ac 	ld.w	r8,r6[172]
8002092a:	70 08       	ld.w	r8,r8[0x0]
8002092c:	10 99       	mov	r9,r8
8002092e:	12 98       	mov	r8,r9
80020930:	a1 78       	lsl	r8,0x1
80020932:	12 08       	add	r8,r9
80020934:	a5 68       	lsl	r8,0x4
80020936:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002093a:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8002093e:	70 48       	ld.w	r8,r8[0x10]
80020940:	ef 48 ff e8 	st.w	r7[-24],r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
80020944:	ec f8 00 ac 	ld.w	r8,r6[172]
80020948:	70 08       	ld.w	r8,r8[0x0]
8002094a:	10 99       	mov	r9,r8
8002094c:	12 98       	mov	r8,r9
8002094e:	a1 78       	lsl	r8,0x1
80020950:	12 08       	add	r8,r9
80020952:	a5 68       	lsl	r8,0x4
80020954:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020958:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8002095c:	70 30       	ld.w	r0,r8[0xc]
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
8002095e:	ec f8 00 ac 	ld.w	r8,r6[172]
80020962:	70 08       	ld.w	r8,r8[0x0]
80020964:	10 99       	mov	r9,r8
80020966:	12 98       	mov	r8,r9
80020968:	a1 78       	lsl	r8,0x1
8002096a:	12 08       	add	r8,r9
8002096c:	a5 68       	lsl	r8,0x4
8002096e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020972:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
80020976:	70 21       	ld.w	r1,r8[0x8]
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
80020978:	ec f8 00 ac 	ld.w	r8,r6[172]
8002097c:	70 08       	ld.w	r8,r8[0x0]
8002097e:	10 99       	mov	r9,r8
80020980:	12 98       	mov	r8,r9
80020982:	a1 78       	lsl	r8,0x1
80020984:	12 08       	add	r8,r9
80020986:	a5 68       	lsl	r8,0x4
80020988:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002098c:	f2 08 00 08 	add	r8,r9,r8
80020990:	11 d8       	ld.ub	r8,r8[0x5]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
80020992:	10 92       	mov	r2,r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
80020994:	ec f8 00 ac 	ld.w	r8,r6[172]
80020998:	70 08       	ld.w	r8,r8[0x0]
8002099a:	10 99       	mov	r9,r8
8002099c:	12 98       	mov	r8,r9
8002099e:	a1 78       	lsl	r8,0x1
800209a0:	12 08       	add	r8,r9
800209a2:	a5 68       	lsl	r8,0x4
800209a4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800209a8:	f2 08 00 08 	add	r8,r9,r8
800209ac:	11 c8       	ld.ub	r8,r8[0x4]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800209ae:	10 93       	mov	r3,r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
800209b0:	ec f8 00 ac 	ld.w	r8,r6[172]
800209b4:	70 08       	ld.w	r8,r8[0x0]
800209b6:	10 99       	mov	r9,r8
800209b8:	12 98       	mov	r8,r9
800209ba:	a1 78       	lsl	r8,0x1
800209bc:	12 08       	add	r8,r9
800209be:	a5 68       	lsl	r8,0x4
800209c0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800209c4:	f2 08 00 08 	add	r8,r9,r8
800209c8:	90 18       	ld.sh	r8,r8[0x2]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800209ca:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
800209ce:	ec f8 00 ac 	ld.w	r8,r6[172]
800209d2:	70 08       	ld.w	r8,r8[0x0]
800209d4:	10 99       	mov	r9,r8
800209d6:	12 98       	mov	r8,r9
800209d8:	a1 78       	lsl	r8,0x1
800209da:	12 08       	add	r8,r9
800209dc:	a5 68       	lsl	r8,0x4
800209de:	ee f9 ff f4 	ld.w	r9,r7[-12]
800209e2:	f2 08 00 08 	add	r8,r9,r8
800209e6:	11 88       	ld.ub	r8,r8[0x0]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800209e8:	10 9c       	mov	r12,r8
800209ea:	ef 08 ff fc 	ld.sh	r8,r7[-4]
800209ee:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800209f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800209f6:	11 e8       	ld.ub	r8,r8[0x6]
800209f8:	10 9a       	mov	r10,r8
800209fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800209fe:	11 d8       	ld.ub	r8,r8[0x5]
80020a00:	10 9b       	mov	r11,r8
80020a02:	1a d5       	st.w	--sp,r5
80020a04:	ee f8 ff dc 	ld.w	r8,r7[-36]
80020a08:	1a d8       	st.w	--sp,r8
80020a0a:	ee f8 ff e0 	ld.w	r8,r7[-32]
80020a0e:	1a d8       	st.w	--sp,r8
80020a10:	ee f8 ff e4 	ld.w	r8,r7[-28]
80020a14:	1a d8       	st.w	--sp,r8
80020a16:	ee f8 ff e8 	ld.w	r8,r7[-24]
80020a1a:	1a d8       	st.w	--sp,r8
80020a1c:	1a d0       	st.w	--sp,r0
80020a1e:	1a d1       	st.w	--sp,r1
80020a20:	1a d2       	st.w	--sp,r2
80020a22:	1a d3       	st.w	--sp,r3
80020a24:	1a de       	st.w	--sp,lr
80020a26:	18 98       	mov	r8,r12
80020a28:	30 0c       	mov	r12,0
80020a2a:	fe b0 f5 9f 	rcall	8001f568 <mavlink_msg_mission_item_send>
80020a2e:	2f 6d       	sub	sp,-40
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
				
				dbg_print("Sending waypoint ");
80020a30:	fe cc 02 4c 	sub	r12,pc,588
80020a34:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(sending_wp_num, 10);
80020a38:	ec f8 00 ac 	ld.w	r8,r6[172]
80020a3c:	70 08       	ld.w	r8,r8[0x0]
80020a3e:	30 ab       	mov	r11,10
80020a40:	10 9c       	mov	r12,r8
80020a42:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
80020a46:	fe cc 06 7e 	sub	r12,pc,1662
80020a4a:	f0 16 00 01 	mcall	r6[4]
				
				start_timeout = get_millis();
80020a4e:	f0 16 00 0f 	mcall	r6[60]
80020a52:	18 99       	mov	r9,r12
80020a54:	ec f8 01 78 	ld.w	r8,r6[376]
80020a58:	91 09       	st.w	r8[0x0],r9
				
				//sending_wp_num += 1;
			}			
		}
	}	
}
80020a5a:	2f 7d       	sub	sp,-36
80020a5c:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80020a60:	80 02       	ld.sh	r2,r0[0x0]
80020a62:	06 86       	andn	r6,r3
80020a64:	41 63       	lddsp	r3,sp[0x58]
80020a66:	6b 6e       	ld.w	lr,r5[0x58]
80020a68:	6f 77       	ld.w	r7,r7[0x5c]
80020a6a:	6c 65       	ld.w	r5,r6[0x18]
80020a6c:	64 67       	ld.w	r7,r2[0x18]
80020a6e:	6d 65       	ld.w	r5,r6[0x58]
80020a70:	6e 74       	ld.w	r4,r7[0x1c]
80020a72:	20 72       	sub	r2,7
80020a74:	65 63       	ld.w	r3,r2[0x58]
80020a76:	65 69       	ld.w	r9,r2[0x58]
80020a78:	76 65       	ld.w	r5,r11[0x18]
80020a7a:	64 2c       	ld.w	r12,r2[0x8]
80020a7c:	20 65       	sub	r5,6
80020a7e:	6e 64       	ld.w	r4,r7[0x18]
80020a80:	20 6f       	sub	pc,6
80020a82:	66 20       	ld.w	r0,r3[0x8]
80020a84:	77 61       	ld.w	r1,r11[0x58]
80020a86:	79 70       	ld.w	r0,r12[0x5c]
80020a88:	6f 69       	ld.w	r9,r7[0x58]
80020a8a:	6e 74       	ld.w	r4,r7[0x1c]
80020a8c:	20 73       	sub	r3,7
80020a8e:	65 6e       	ld.w	lr,r2[0x58]
80020a90:	64 69       	ld.w	r9,r2[0x18]
80020a92:	6e 67       	ld.w	r7,r7[0x18]
80020a94:	2e 0a       	sub	r10,-32
	...

80020a98 <receive_ack_msg>:

void receive_ack_msg(Mavlink_Received_t* rec, bool* waypoint_sending)
{
80020a98:	eb cd 40 c0 	pushm	r6-r7,lr
80020a9c:	1a 97       	mov	r7,sp
80020a9e:	20 3d       	sub	sp,12
80020aa0:	49 76       	lddpc	r6,80020afc <receive_ack_msg+0x64>
80020aa2:	1e 26       	rsub	r6,pc
80020aa4:	ef 4c ff f8 	st.w	r7[-8],r12
80020aa8:	ef 4b ff f4 	st.w	r7[-12],r11
	mavlink_mission_ack_t packet;
	mavlink_msg_mission_ack_decode(&rec->msg, &packet);
80020aac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020ab0:	ee c9 00 03 	sub	r9,r7,3
80020ab4:	12 9b       	mov	r11,r9
80020ab6:	10 9c       	mov	r12,r8
80020ab8:	fe b0 f9 dc 	rcall	8001fe70 <mavlink_msg_mission_ack_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020abc:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80020ac0:	ec f8 00 c8 	ld.w	r8,r6[200]
80020ac4:	11 88       	ld.ub	r8,r8[0x0]
void receive_ack_msg(Mavlink_Received_t* rec, bool* waypoint_sending)
{
	mavlink_mission_ack_t packet;
	mavlink_msg_mission_ack_decode(&rec->msg, &packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80020ac6:	f0 09 18 00 	cp.b	r9,r8
80020aca:	c1 51       	brne	80020af4 <receive_ack_msg+0x5c>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020acc:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80020ad0:	ec f8 00 c8 	ld.w	r8,r6[200]
80020ad4:	11 98       	ld.ub	r8,r8[0x1]
void receive_ack_msg(Mavlink_Received_t* rec, bool* waypoint_sending)
{
	mavlink_mission_ack_t packet;
	mavlink_msg_mission_ack_decode(&rec->msg, &packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80020ad6:	f0 09 18 00 	cp.b	r9,r8
80020ada:	c0 d1       	brne	80020af4 <receive_ack_msg+0x5c>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		*waypoint_sending = false;
80020adc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020ae0:	30 08       	mov	r8,0
80020ae2:	b2 88       	st.b	r9[0x0],r8
		sending_wp_num = 0;
80020ae4:	ec f8 00 ac 	ld.w	r8,r6[172]
80020ae8:	30 09       	mov	r9,0
80020aea:	91 09       	st.w	r8[0x0],r9
		dbg_print("Acknowledgment received, end of waypoint sending.\n");
80020aec:	fe cc 00 88 	sub	r12,pc,136
80020af0:	f0 16 00 01 	mcall	r6[4]
	}
}
80020af4:	2f dd       	sub	sp,-12
80020af6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020afa:	00 00       	add	r0,r0
80020afc:	80 02       	ld.sh	r2,r0[0x0]
80020afe:	09 26       	ld.uh	r6,r4++
80020b00:	52 65       	stdsp	sp[0x98],r5
80020b02:	63 65       	ld.w	r5,r1[0x58]
80020b04:	69 76       	ld.w	r6,r4[0x5c]
80020b06:	69 6e       	ld.w	lr,r4[0x58]
80020b08:	67 20       	ld.w	r0,r3[0x48]
80020b0a:	00 00       	add	r0,r0
80020b0c:	20 6e       	sub	lr,6
80020b0e:	65 77       	ld.w	r7,r2[0x5c]
80020b10:	20 77       	sub	r7,7
80020b12:	61 79       	ld.w	r9,r0[0x5c]
80020b14:	70 6f       	ld.w	pc,r8[0x18]
80020b16:	69 6e       	ld.w	lr,r4[0x58]
80020b18:	74 73       	ld.w	r3,r10[0x1c]
80020b1a:	2e 20       	sub	r0,-30
80020b1c:	00 00       	add	r0,r0
80020b1e:	00 00       	add	r0,r0
80020b20:	4e 65       	lddpc	r5,80020cb8 <receive_count+0x162>
80020b22:	77 20       	ld.w	r0,r11[0x48]
80020b24:	74 6f       	ld.w	pc,r10[0x18]
80020b26:	74 61       	ld.w	r1,r10[0x18]
80020b28:	6c 20       	ld.w	r0,r6[0x8]
80020b2a:	6e 75       	ld.w	r5,r7[0x1c]
80020b2c:	6d 62       	ld.w	r2,r6[0x58]
80020b2e:	65 72       	ld.w	r2,r2[0x5c]
80020b30:	20 6f       	sub	pc,6
80020b32:	66 20       	ld.w	r0,r3[0x8]
80020b34:	77 61       	ld.w	r1,r11[0x58]
80020b36:	79 70       	ld.w	r0,r12[0x5c]
80020b38:	6f 69       	ld.w	r9,r7[0x58]
80020b3a:	6e 74       	ld.w	r4,r7[0x1c]
80020b3c:	73 3a       	ld.w	r10,r9[0x4c]
80020b3e:	00 00       	add	r0,r0
80020b40:	41 73       	lddsp	r3,sp[0x5c]
80020b42:	6b 69       	ld.w	r9,r5[0x58]
80020b44:	6e 67       	ld.w	r7,r7[0x18]
80020b46:	20 66       	sub	r6,6
80020b48:	6f 72       	ld.w	r2,r7[0x5c]
80020b4a:	20 77       	sub	r7,7
80020b4c:	61 79       	ld.w	r9,r0[0x5c]
80020b4e:	70 6f       	ld.w	pc,r8[0x18]
80020b50:	69 6e       	ld.w	lr,r4[0x58]
80020b52:	74 20       	ld.w	r0,r10[0x8]
	...

80020b56 <receive_count>:

void receive_count(Mavlink_Received_t* rec, uint16_t* number_of_waypoints, bool* waypoint_receiving, bool* waypoint_sending)
{
80020b56:	eb cd 40 c0 	pushm	r6-r7,lr
80020b5a:	1a 97       	mov	r7,sp
80020b5c:	20 5d       	sub	sp,20
80020b5e:	4d 46       	lddpc	r6,80020cac <receive_count+0x156>
80020b60:	1e 26       	rsub	r6,pc
80020b62:	ef 4c ff f8 	st.w	r7[-8],r12
80020b66:	ef 4b ff f4 	st.w	r7[-12],r11
80020b6a:	ef 4a ff f0 	st.w	r7[-16],r10
80020b6e:	ef 49 ff ec 	st.w	r7[-20],r9
	mavlink_mission_count_t packet;
	mavlink_msg_mission_count_decode(&rec->msg, &packet);
80020b72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020b76:	ee c9 00 04 	sub	r9,r7,4
80020b7a:	12 9b       	mov	r11,r9
80020b7c:	10 9c       	mov	r12,r8
80020b7e:	fe b0 f8 9f 	rcall	8001fcbc <mavlink_msg_mission_count_decode>
	//dbg_print_num(mavlink_mission_planner.sysid,10);
	//dbg_print_num(packet.target_component,10);
	//dbg_print_num(mavlink_mission_planner.compid,10);
	//dbg_print("\n");
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020b82:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80020b86:	ec f8 00 c8 	ld.w	r8,r6[200]
80020b8a:	11 88       	ld.ub	r8,r8[0x0]
	//dbg_print_num(packet.target_system,10);
	//dbg_print_num(mavlink_mission_planner.sysid,10);
	//dbg_print_num(packet.target_component,10);
	//dbg_print_num(mavlink_mission_planner.compid,10);
	//dbg_print("\n");
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80020b8c:	f0 09 18 00 	cp.b	r9,r8
80020b90:	e0 81 00 8b 	brne	80020ca6 <receive_count+0x150>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020b94:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80020b98:	ec f8 00 c8 	ld.w	r8,r6[200]
80020b9c:	11 98       	ld.ub	r8,r8[0x1]
	//dbg_print_num(packet.target_system,10);
	//dbg_print_num(mavlink_mission_planner.sysid,10);
	//dbg_print_num(packet.target_component,10);
	//dbg_print_num(mavlink_mission_planner.compid,10);
	//dbg_print("\n");
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80020b9e:	f0 09 18 00 	cp.b	r9,r8
80020ba2:	e0 81 00 82 	brne	80020ca6 <receive_count+0x150>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		if (*waypoint_receiving == false)
80020ba6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80020baa:	11 88       	ld.ub	r8,r8[0x0]
80020bac:	ec 18 00 01 	eorl	r8,0x1
80020bb0:	5c 58       	castu.b	r8
80020bb2:	c5 a0       	breq	80020c66 <receive_count+0x110>
		{
			// comment these lines if you want to add new waypoints to the list instead of overwriting them
			num_waypoint_onboard = 0;
80020bb4:	ec f9 01 24 	ld.w	r9,r6[292]
80020bb8:	30 08       	mov	r8,0
80020bba:	b2 08       	st.h	r9[0x0],r8
			*number_of_waypoints =0;
80020bbc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020bc0:	30 08       	mov	r8,0
80020bc2:	b2 08       	st.h	r9[0x0],r8
			//---//
			
			if ((packet.count + *number_of_waypoints) > MAX_WAYPOINTS)
80020bc4:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80020bc8:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020bcc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020bd0:	90 08       	ld.sh	r8,r8[0x0]
80020bd2:	5c 78       	castu.h	r8
80020bd4:	f2 08 00 08 	add	r8,r9,r8
80020bd8:	58 a8       	cp.w	r8,10
80020bda:	e0 8a 00 0a 	brle	80020bee <receive_count+0x98>
			{
				packet.count = MAX_WAYPOINTS - *number_of_waypoints;
80020bde:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020be2:	90 08       	ld.sh	r8,r8[0x0]
80020be4:	f0 08 11 0a 	rsub	r8,r8,10
80020be8:	5c 88       	casts.h	r8
80020bea:	ef 58 ff fc 	st.h	r7[-4],r8
			}
			*number_of_waypoints =  packet.count+ *number_of_waypoints;
80020bee:	ef 09 ff fc 	ld.sh	r9,r7[-4]
80020bf2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020bf6:	90 08       	ld.sh	r8,r8[0x0]
80020bf8:	f2 08 00 08 	add	r8,r9,r8
80020bfc:	5c 88       	casts.h	r8
80020bfe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020c02:	b2 08       	st.h	r9[0x0],r8
			dbg_print("Receiving ");
80020c04:	fe cc 01 04 	sub	r12,pc,260
80020c08:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(packet.count,10);
80020c0c:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80020c10:	5c 78       	castu.h	r8
80020c12:	30 ab       	mov	r11,10
80020c14:	10 9c       	mov	r12,r8
80020c16:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" new waypoints. ");
80020c1a:	fe cc 01 0e 	sub	r12,pc,270
80020c1e:	f0 16 00 01 	mcall	r6[4]
			dbg_print("New total number of waypoints:");
80020c22:	fe cc 01 02 	sub	r12,pc,258
80020c26:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(*number_of_waypoints,10);
80020c2a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020c2e:	90 08       	ld.sh	r8,r8[0x0]
80020c30:	5c 78       	castu.h	r8
80020c32:	30 ab       	mov	r11,10
80020c34:	10 9c       	mov	r12,r8
80020c36:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80020c3a:	fe cc 08 72 	sub	r12,pc,2162
80020c3e:	f0 16 00 01 	mcall	r6[4]
			
			*waypoint_receiving   = true;
80020c42:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020c46:	30 18       	mov	r8,1
80020c48:	b2 88       	st.b	r9[0x0],r8
			*waypoint_sending     = false;
80020c4a:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020c4e:	30 08       	mov	r8,0
80020c50:	b2 88       	st.b	r9[0x0],r8
			waypoint_request_number = 0;
80020c52:	ec f8 01 00 	ld.w	r8,r6[256]
80020c56:	30 09       	mov	r9,0
80020c58:	91 09       	st.w	r8[0x0],r9
			
			
			start_timeout = get_millis();
80020c5a:	f0 16 00 0f 	mcall	r6[60]
80020c5e:	18 99       	mov	r9,r12
80020c60:	ec f8 01 78 	ld.w	r8,r6[376]
80020c64:	91 09       	st.w	r8[0x0],r9
		}
		
		mavlink_msg_mission_request_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,waypoint_request_number);
80020c66:	ec f8 01 00 	ld.w	r8,r6[256]
80020c6a:	70 08       	ld.w	r8,r8[0x0]
80020c6c:	5c 88       	casts.h	r8
80020c6e:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020c72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020c76:	11 e8       	ld.ub	r8,r8[0x6]
80020c78:	10 9a       	mov	r10,r8
80020c7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020c7e:	11 d8       	ld.ub	r8,r8[0x5]
80020c80:	10 9b       	mov	r11,r8
80020c82:	30 0c       	mov	r12,0
80020c84:	fe b0 f6 78 	rcall	8001f974 <mavlink_msg_mission_request_send>
		
		dbg_print("Asking for waypoint ");
80020c88:	fe cc 01 48 	sub	r12,pc,328
80020c8c:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(waypoint_request_number,10);
80020c90:	ec f8 01 00 	ld.w	r8,r6[256]
80020c94:	70 08       	ld.w	r8,r8[0x0]
80020c96:	30 ab       	mov	r11,10
80020c98:	10 9c       	mov	r12,r8
80020c9a:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");	
80020c9e:	fe cc 08 d6 	sub	r12,pc,2262
80020ca2:	f0 16 00 01 	mcall	r6[4]
	}
	
}
80020ca6:	2f bd       	sub	sp,-20
80020ca8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020cac:	80 02       	ld.sh	r2,r0[0x0]
80020cae:	09 e4       	ld.ub	r4,r4[0x6]
80020cb0:	4e 65       	lddpc	r5,80020e48 <receive_waypoint+0x102>
80020cb2:	77 20       	ld.w	r0,r11[0x48]
80020cb4:	77 61       	ld.w	r1,r11[0x58]
80020cb6:	79 70       	ld.w	r0,r12[0x5c]
80020cb8:	6f 69       	ld.w	r9,r7[0x58]
80020cba:	6e 74       	ld.w	r4,r7[0x1c]
80020cbc:	20 72       	sub	r2,7
80020cbe:	65 63       	ld.w	r3,r2[0x58]
80020cc0:	65 69       	ld.w	r9,r2[0x58]
80020cc2:	76 65       	ld.w	r5,r11[0x18]
80020cc4:	64 20       	ld.w	r0,r2[0x8]
80020cc6:	00 00       	add	r0,r0
80020cc8:	20 72       	sub	r2,7
80020cca:	65 71       	ld.w	r1,r2[0x5c]
80020ccc:	75 65       	ld.w	r5,r10[0x58]
80020cce:	73 74       	ld.w	r4,r9[0x5c]
80020cd0:	65 64       	ld.w	r4,r2[0x58]
80020cd2:	20 6e       	sub	lr,6
80020cd4:	75 6d       	ld.w	sp,r10[0x58]
80020cd6:	20 3a       	sub	r10,3
80020cd8:	00 00       	add	r0,r0
80020cda:	00 00       	add	r0,r0
80020cdc:	20 72       	sub	r2,7
80020cde:	65 63       	ld.w	r3,r2[0x58]
80020ce0:	65 69       	ld.w	r9,r2[0x58]
80020ce2:	76 69       	ld.w	r9,r11[0x18]
80020ce4:	6e 67       	ld.w	r7,r7[0x18]
80020ce6:	20 6e       	sub	lr,6
80020ce8:	75 6d       	ld.w	sp,r10[0x58]
80020cea:	20 3a       	sub	r10,3
80020cec:	00 00       	add	r0,r0
80020cee:	00 00       	add	r0,r0
80020cf0:	52 65       	stdsp	sp[0x98],r5
80020cf2:	63 65       	ld.w	r5,r1[0x58]
80020cf4:	69 76       	ld.w	r6,r4[0x5c]
80020cf6:	69 6e       	ld.w	lr,r4[0x58]
80020cf8:	67 20       	ld.w	r0,r3[0x48]
80020cfa:	67 6f       	ld.w	pc,r3[0x58]
80020cfc:	6f 64       	ld.w	r4,r7[0x58]
80020cfe:	20 77       	sub	r7,7
80020d00:	61 79       	ld.w	r9,r0[0x5c]
80020d02:	70 6f       	ld.w	pc,r8[0x18]
80020d04:	69 6e       	ld.w	lr,r4[0x58]
80020d06:	74 2c       	ld.w	r12,r10[0x8]
80020d08:	20 6e       	sub	lr,6
80020d0a:	75 6d       	ld.w	sp,r10[0x58]
80020d0c:	62 65       	ld.w	r5,r1[0x18]
80020d0e:	72 20       	ld.w	r0,r9[0x8]
80020d10:	00 00       	add	r0,r0
80020d12:	00 00       	add	r0,r0
80020d14:	20 6f       	sub	pc,6
80020d16:	66 20       	ld.w	r0,r3[0x8]
80020d18:	00 00       	add	r0,r0
80020d1a:	00 00       	add	r0,r0
80020d1c:	66 6c       	ld.w	r12,r3[0x18]
80020d1e:	69 67       	ld.w	r7,r4[0x58]
80020d20:	68 74       	ld.w	r4,r4[0x1c]
80020d22:	20 70       	sub	r0,7
80020d24:	6c 61       	ld.w	r1,r6[0x18]
80020d26:	6e 20       	ld.w	r0,r7[0x8]
80020d28:	72 65       	ld.w	r5,r9[0x18]
80020d2a:	63 65       	ld.w	r5,r1[0x58]
80020d2c:	69 76       	ld.w	r6,r4[0x5c]
80020d2e:	65 64       	ld.w	r4,r2[0x58]
80020d30:	21 0a       	sub	r10,16
80020d32:	00 00       	add	r0,r0
80020d34:	41 63       	lddsp	r3,sp[0x58]
80020d36:	6b 20       	ld.w	r0,r5[0x48]
80020d38:	6e 6f       	ld.w	pc,r7[0x18]
80020d3a:	74 20       	ld.w	r0,r10[0x8]
80020d3c:	72 65       	ld.w	r5,r9[0x18]
80020d3e:	63 65       	ld.w	r5,r1[0x58]
80020d40:	69 76       	ld.w	r6,r4[0x5c]
80020d42:	65 64       	ld.w	r4,r2[0x58]
80020d44:	21 00       	sub	r0,16

80020d46 <receive_waypoint>:

void receive_waypoint(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t number_of_waypoints, bool* waypoint_receiving)
{
80020d46:	eb cd 40 c0 	pushm	r6-r7,lr
80020d4a:	1a 97       	mov	r7,sp
80020d4c:	21 bd       	sub	sp,108
80020d4e:	fe f6 03 02 	ld.w	r6,pc[770]
80020d52:	1e 26       	rsub	r6,pc
80020d54:	ef 4c ff a0 	st.w	r7[-96],r12
80020d58:	ef 4b ff 9c 	st.w	r7[-100],r11
80020d5c:	14 98       	mov	r8,r10
80020d5e:	ef 49 ff 94 	st.w	r7[-108],r9
80020d62:	ef 58 ff 98 	st.h	r7[-104],r8
	mavlink_mission_item_t packet;
	mavlink_msg_mission_item_decode(&rec->msg,&packet);
80020d66:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020d6a:	ee c9 00 2c 	sub	r9,r7,44
80020d6e:	12 9b       	mov	r11,r9
80020d70:	10 9c       	mov	r12,r8
80020d72:	fe b0 f5 87 	rcall	8001f880 <mavlink_msg_mission_item_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020d76:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80020d7a:	ec f8 00 70 	ld.w	r8,r6[112]
80020d7e:	11 88       	ld.ub	r8,r8[0x0]
void receive_waypoint(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t number_of_waypoints, bool* waypoint_receiving)
{
	mavlink_mission_item_t packet;
	mavlink_msg_mission_item_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80020d80:	f0 09 18 00 	cp.b	r9,r8
80020d84:	e0 81 01 63 	brne	8002104a <receive_waypoint+0x304>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020d88:	ef 39 ff f5 	ld.ub	r9,r7[-11]
80020d8c:	ec f8 00 c8 	ld.w	r8,r6[200]
80020d90:	11 98       	ld.ub	r8,r8[0x1]
void receive_waypoint(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t number_of_waypoints, bool* waypoint_receiving)
{
	mavlink_mission_item_t packet;
	mavlink_msg_mission_item_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80020d92:	f0 09 18 00 	cp.b	r9,r8
80020d96:	e0 81 01 5a 	brne	8002104a <receive_waypoint+0x304>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		start_timeout = get_millis();
80020d9a:	f0 16 00 0f 	mcall	r6[60]
80020d9e:	18 99       	mov	r9,r12
80020da0:	ec f8 01 78 	ld.w	r8,r6[376]
80020da4:	91 09       	st.w	r8[0x0],r9
		
		waypoint_struct new_waypoint;
		
		new_waypoint.wp_id = packet.command;
80020da6:	ef 08 ff f2 	ld.sh	r8,r7[-14]
80020daa:	ef 58 ff a6 	st.h	r7[-90],r8
		
		new_waypoint.x = packet.x; // longitude
80020dae:	ee f8 ff e4 	ld.w	r8,r7[-28]
80020db2:	10 9c       	mov	r12,r8
80020db4:	f0 16 00 02 	mcall	r6[8]
80020db8:	14 98       	mov	r8,r10
80020dba:	16 99       	mov	r9,r11
80020dbc:	ee e9 ff bc 	st.d	r7[-68],r8
		new_waypoint.y = packet.y; // latitude 
80020dc0:	ee f8 ff e8 	ld.w	r8,r7[-24]
80020dc4:	10 9c       	mov	r12,r8
80020dc6:	f0 16 00 02 	mcall	r6[8]
80020dca:	14 98       	mov	r8,r10
80020dcc:	16 99       	mov	r9,r11
80020dce:	ee e9 ff c4 	st.d	r7[-60],r8
		new_waypoint.z = packet.z; // altitude
80020dd2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80020dd6:	10 9c       	mov	r12,r8
80020dd8:	f0 16 00 02 	mcall	r6[8]
80020ddc:	14 98       	mov	r8,r10
80020dde:	16 99       	mov	r9,r11
80020de0:	ee e9 ff cc 	st.d	r7[-52],r8
		
		new_waypoint.autocontinue = packet.autocontinue;
80020de4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80020de8:	ef 68 ff a9 	st.b	r7[-87],r8
		new_waypoint.frame = packet.frame;
80020dec:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80020df0:	ef 68 ff a4 	st.b	r7[-92],r8
		
		new_waypoint.current = packet.current;
80020df4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80020df8:	ef 68 ff a8 	st.b	r7[-88],r8
		
		new_waypoint.param1 = packet.param1;
80020dfc:	ee f8 ff d4 	ld.w	r8,r7[-44]
80020e00:	ef 48 ff ac 	st.w	r7[-84],r8
		new_waypoint.param2 = packet.param2;
80020e04:	ee f8 ff d8 	ld.w	r8,r7[-40]
80020e08:	ef 48 ff b0 	st.w	r7[-80],r8
		new_waypoint.param3 = packet.param3;
80020e0c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80020e10:	ef 48 ff b4 	st.w	r7[-76],r8
		new_waypoint.param4 = packet.param4;
80020e14:	ee f8 ff e0 	ld.w	r8,r7[-32]
80020e18:	ef 48 ff b8 	st.w	r7[-72],r8
		
		dbg_print("New waypoint received ");
80020e1c:	fe cc 01 6c 	sub	r12,pc,364
80020e20:	f0 16 00 01 	mcall	r6[4]
 		//dbg_print_num(packet.current,10);
 		//dbg_print(" Seq :");
 		//dbg_print_num(packet.seq,10);
		//dbg_print(" command id :");
		//dbg_print_num(packet.command,10);
		dbg_print(" requested num :");
80020e24:	fe cc 01 5c 	sub	r12,pc,348
80020e28:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(waypoint_request_number,10);
80020e2c:	ec f8 01 00 	ld.w	r8,r6[256]
80020e30:	70 08       	ld.w	r8,r8[0x0]
80020e32:	30 ab       	mov	r11,10
80020e34:	10 9c       	mov	r12,r8
80020e36:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" receiving num :");
80020e3a:	fe cc 01 5e 	sub	r12,pc,350
80020e3e:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.seq,10);
80020e42:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80020e46:	5c 78       	castu.h	r8
80020e48:	30 ab       	mov	r11,10
80020e4a:	10 9c       	mov	r12,r8
80020e4c:	f0 16 00 04 	mcall	r6[16]
		//dbg_print(" is it receiving :");
		//dbg_print_num(waypoint_receiving,10); // boolean value
		dbg_print("\n");
80020e50:	fe cc 0a 88 	sub	r12,pc,2696
80020e54:	f0 16 00 01 	mcall	r6[4]
			//new_waypoint.alt = packet.param2;
			//new_waypoint.param1 = packet.param1;
			//break;
		//}
		
		if(packet.current == 2) {                                               //current = 2 is a flag to tell us this is a "guided mode" waypoint and not for the mission
80020e58:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80020e5c:	30 28       	mov	r8,2
80020e5e:	f0 09 18 00 	cp.b	r9,r8
80020e62:	c0 e1       	brne	80020e7e <receive_waypoint+0x138>

			// set wp_nav's destination
			//wp_nav.set_destination(pv_location_to_vector(tell_command));

			// verify we received the command
			mavlink_msg_mission_ack_send(MAVLINK_COMM_0, rec->msg.sysid,rec->msg.compid, MAV_CMD_ACK_OK);
80020e64:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020e68:	11 e8       	ld.ub	r8,r8[0x6]
80020e6a:	10 9a       	mov	r10,r8
80020e6c:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020e70:	11 d8       	ld.ub	r8,r8[0x5]
80020e72:	30 19       	mov	r9,1
80020e74:	10 9b       	mov	r11,r8
80020e76:	30 0c       	mov	r12,0
80020e78:	fe b0 f7 a4 	rcall	8001fdc0 <mavlink_msg_mission_ack_send>
80020e7c:	ce 78       	rjmp	8002104a <receive_waypoint+0x304>

		} else if(packet.current == 3){                                    //current = 3 is a flag to tell us this is a alt change only
80020e7e:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80020e82:	30 38       	mov	r8,3
80020e84:	f0 09 18 00 	cp.b	r9,r8
80020e88:	c0 e1       	brne	80020ea4 <receive_waypoint+0x15e>
			// To-Do: update target altitude for loiter or waypoint controller depending upon nav mode
			// similar to how do_change_alt works
			//wp_nav.set_desired_alt(new_waypoint.alt);

			// verify we received the command
			mavlink_msg_mission_ack_send(MAVLINK_COMM_0, rec->msg.sysid,rec->msg.compid, MAV_CMD_ACK_OK);
80020e8a:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020e8e:	11 e8       	ld.ub	r8,r8[0x6]
80020e90:	10 9a       	mov	r10,r8
80020e92:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020e96:	11 d8       	ld.ub	r8,r8[0x5]
80020e98:	30 19       	mov	r9,1
80020e9a:	10 9b       	mov	r11,r8
80020e9c:	30 0c       	mov	r12,0
80020e9e:	fe b0 f7 91 	rcall	8001fdc0 <mavlink_msg_mission_ack_send>
80020ea2:	cd 48       	rjmp	8002104a <receive_waypoint+0x304>

		} else {
			// Check if receiving waypoints
			if (*waypoint_receiving){
80020ea4:	ee f8 ff 94 	ld.w	r8,r7[-108]
80020ea8:	11 88       	ld.ub	r8,r8[0x0]
80020eaa:	58 08       	cp.w	r8,0
80020eac:	e0 80 00 bb 	breq	80021022 <receive_waypoint+0x2dc>

				// check if this is the requested waypoint
				if (packet.seq == waypoint_request_number)
80020eb0:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80020eb4:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020eb8:	ec f8 01 00 	ld.w	r8,r6[256]
80020ebc:	70 08       	ld.w	r8,r8[0x0]
80020ebe:	10 39       	cp.w	r9,r8
80020ec0:	e0 81 00 c5 	brne	8002104a <receive_waypoint+0x304>
				{
					dbg_print("Receiving good waypoint, number ");
80020ec4:	fe cc 01 d4 	sub	r12,pc,468
80020ec8:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(waypoint_request_number,10);
80020ecc:	ec f8 01 00 	ld.w	r8,r6[256]
80020ed0:	70 08       	ld.w	r8,r8[0x0]
80020ed2:	30 ab       	mov	r11,10
80020ed4:	10 9c       	mov	r12,r8
80020ed6:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of ");
80020eda:	fe cc 01 c6 	sub	r12,pc,454
80020ede:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(number_of_waypoints-num_waypoint_onboard,10);
80020ee2:	ef 19 ff 98 	ld.uh	r9,r7[-104]
80020ee6:	ec f8 01 24 	ld.w	r8,r6[292]
80020eea:	90 08       	ld.sh	r8,r8[0x0]
80020eec:	5c 78       	castu.h	r8
80020eee:	f2 08 01 08 	sub	r8,r9,r8
80020ef2:	30 ab       	mov	r11,10
80020ef4:	10 9c       	mov	r12,r8
80020ef6:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
80020efa:	fe cc 0b 32 	sub	r12,pc,2866
80020efe:	f0 16 00 01 	mcall	r6[4]
					
				    waypoint_list[num_waypoint_onboard + waypoint_request_number] = new_waypoint;
80020f02:	ec f8 01 24 	ld.w	r8,r6[292]
80020f06:	90 08       	ld.sh	r8,r8[0x0]
80020f08:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020f0c:	ec f8 01 00 	ld.w	r8,r6[256]
80020f10:	70 08       	ld.w	r8,r8[0x0]
80020f12:	f2 08 00 08 	add	r8,r9,r8
80020f16:	10 99       	mov	r9,r8
80020f18:	12 98       	mov	r8,r9
80020f1a:	a1 78       	lsl	r8,0x1
80020f1c:	12 08       	add	r8,r9
80020f1e:	a5 68       	lsl	r8,0x4
80020f20:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80020f24:	f2 08 00 08 	add	r8,r9,r8
80020f28:	10 9b       	mov	r11,r8
80020f2a:	ee ca 00 5c 	sub	r10,r7,92
80020f2e:	f6 c8 00 00 	sub	r8,r11,0
80020f32:	f4 c9 00 00 	sub	r9,r10,0
80020f36:	72 0c       	ld.w	r12,r9[0x0]
80020f38:	91 0c       	st.w	r8[0x0],r12
80020f3a:	72 1c       	ld.w	r12,r9[0x4]
80020f3c:	91 1c       	st.w	r8[0x4],r12
80020f3e:	72 2c       	ld.w	r12,r9[0x8]
80020f40:	91 2c       	st.w	r8[0x8],r12
80020f42:	72 39       	ld.w	r9,r9[0xc]
80020f44:	91 39       	st.w	r8[0xc],r9
80020f46:	f6 c8 ff f0 	sub	r8,r11,-16
80020f4a:	f4 c9 ff f0 	sub	r9,r10,-16
80020f4e:	72 0c       	ld.w	r12,r9[0x0]
80020f50:	91 0c       	st.w	r8[0x0],r12
80020f52:	72 1c       	ld.w	r12,r9[0x4]
80020f54:	91 1c       	st.w	r8[0x4],r12
80020f56:	72 2c       	ld.w	r12,r9[0x8]
80020f58:	91 2c       	st.w	r8[0x8],r12
80020f5a:	72 39       	ld.w	r9,r9[0xc]
80020f5c:	91 39       	st.w	r8[0xc],r9
80020f5e:	f6 c8 ff e0 	sub	r8,r11,-32
80020f62:	f4 c9 ff e0 	sub	r9,r10,-32
80020f66:	72 0a       	ld.w	r10,r9[0x0]
80020f68:	91 0a       	st.w	r8[0x0],r10
80020f6a:	72 1a       	ld.w	r10,r9[0x4]
80020f6c:	91 1a       	st.w	r8[0x4],r10
80020f6e:	72 2a       	ld.w	r10,r9[0x8]
80020f70:	91 2a       	st.w	r8[0x8],r10
80020f72:	72 39       	ld.w	r9,r9[0xc]
80020f74:	91 39       	st.w	r8[0xc],r9
					waypoint_request_number++;
80020f76:	ec f8 01 00 	ld.w	r8,r6[256]
80020f7a:	70 08       	ld.w	r8,r8[0x0]
80020f7c:	f0 c9 ff ff 	sub	r9,r8,-1
80020f80:	ec f8 01 00 	ld.w	r8,r6[256]
80020f84:	91 09       	st.w	r8[0x0],r9
					
					if ((num_waypoint_onboard + waypoint_request_number) == number_of_waypoints) 
80020f86:	ec f8 01 24 	ld.w	r8,r6[292]
80020f8a:	90 08       	ld.sh	r8,r8[0x0]
80020f8c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020f90:	ec f8 01 00 	ld.w	r8,r6[256]
80020f94:	70 08       	ld.w	r8,r8[0x0]
80020f96:	10 09       	add	r9,r8
80020f98:	ef 18 ff 98 	ld.uh	r8,r7[-104]
80020f9c:	10 39       	cp.w	r9,r8
80020f9e:	c2 11       	brne	80020fe0 <receive_waypoint+0x29a>
					{
						
						uint8_t type = MAV_CMD_ACK_OK;                         // ok (0), error(1) ???
80020fa0:	30 18       	mov	r8,1
80020fa2:	ef 68 ff fe 	st.b	r7[-2],r8
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,mavlink_mission_planner.compid,type);
						mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,type);
80020fa6:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80020faa:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020fae:	11 e8       	ld.ub	r8,r8[0x6]
80020fb0:	10 9a       	mov	r10,r8
80020fb2:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020fb6:	11 d8       	ld.ub	r8,r8[0x5]
80020fb8:	10 9b       	mov	r11,r8
80020fba:	30 0c       	mov	r12,0
80020fbc:	fe b0 f7 02 	rcall	8001fdc0 <mavlink_msg_mission_ack_send>
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,0,type);
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,mavlink_system.compid,type);
						
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0, packet.target_system, packet.target_component,type);

						dbg_print("flight plan received!\n");
80020fc0:	fe cc 02 a4 	sub	r12,pc,676
80020fc4:	f0 16 00 01 	mcall	r6[4]
						*waypoint_receiving = false;
80020fc8:	ee f9 ff 94 	ld.w	r9,r7[-108]
80020fcc:	30 08       	mov	r8,0
80020fce:	b2 88       	st.b	r9[0x0],r8
						num_waypoint_onboard = number_of_waypoints;
80020fd0:	ec f9 01 24 	ld.w	r9,r6[292]
80020fd4:	ef 08 ff 98 	ld.sh	r8,r7[-104]
80020fd8:	b2 08       	st.h	r9[0x0],r8
						init_wp();
80020fda:	f0 16 00 8d 	mcall	r6[564]
80020fde:	c3 68       	rjmp	8002104a <receive_waypoint+0x304>
					}else{
						mavlink_msg_mission_request_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,waypoint_request_number);
80020fe0:	ec f8 01 00 	ld.w	r8,r6[256]
80020fe4:	70 08       	ld.w	r8,r8[0x0]
80020fe6:	5c 88       	casts.h	r8
80020fe8:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020fec:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020ff0:	11 e8       	ld.ub	r8,r8[0x6]
80020ff2:	10 9a       	mov	r10,r8
80020ff4:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020ff8:	11 d8       	ld.ub	r8,r8[0x5]
80020ffa:	10 9b       	mov	r11,r8
80020ffc:	30 0c       	mov	r12,0
80020ffe:	fe b0 f4 bb 	rcall	8001f974 <mavlink_msg_mission_request_send>
						
						dbg_print("Asking for waypoint ");
80021002:	fe cc 04 c2 	sub	r12,pc,1218
80021006:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(waypoint_request_number,10);
8002100a:	ec f8 01 00 	ld.w	r8,r6[256]
8002100e:	70 08       	ld.w	r8,r8[0x0]
80021010:	30 ab       	mov	r11,10
80021012:	10 9c       	mov	r12,r8
80021014:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
80021018:	fe cc 0c 50 	sub	r12,pc,3152
8002101c:	f0 16 00 01 	mcall	r6[4]
80021020:	c1 58       	rjmp	8002104a <receive_waypoint+0x304>
					}
				}
			}else{
				uint8_t type = MAV_CMD_ACK_OK; //MAV_CMD_ACK_ERR_FAIL;                         // ok (0), error(1)
80021022:	30 18       	mov	r8,1
80021024:	ef 68 ff ff 	st.b	r7[-1],r8
				dbg_print("Ack not received!");
80021028:	fe cc 02 f4 	sub	r12,pc,756
8002102c:	f0 16 00 01 	mcall	r6[4]
				mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,type);
80021030:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80021034:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021038:	11 e8       	ld.ub	r8,r8[0x6]
8002103a:	10 9a       	mov	r10,r8
8002103c:	ee f8 ff a0 	ld.w	r8,r7[-96]
80021040:	11 d8       	ld.ub	r8,r8[0x5]
80021042:	10 9b       	mov	r11,r8
80021044:	30 0c       	mov	r12,0
80021046:	fe b0 f6 bd 	rcall	8001fdc0 <mavlink_msg_mission_ack_send>
			}				
		}		
	}			
}		
8002104a:	2e 5d       	sub	sp,-108
8002104c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80021050:	80 02       	ld.sh	r2,r0[0x0]
80021052:	0b d6       	ld.ub	r6,r5[0x5]
80021054:	73 65       	ld.w	r5,r9[0x58]
80021056:	74 74       	ld.w	r4,r10[0x1c]
80021058:	69 6e       	ld.w	lr,r4[0x58]
8002105a:	67 20       	ld.w	r0,r3[0x48]
8002105c:	63 75       	ld.w	r5,r1[0x5c]
8002105e:	72 72       	ld.w	r2,r9[0x1c]
80021060:	65 6e       	ld.w	lr,r2[0x58]
80021062:	74 20       	ld.w	r0,r10[0x8]
80021064:	77 70       	ld.w	r0,r11[0x5c]
80021066:	00 00       	add	r0,r0
80021068:	53 65       	stdsp	sp[0xd8],r5
8002106a:	74 20       	ld.w	r0,r10[0x8]
8002106c:	63 75       	ld.w	r5,r1[0x5c]
8002106e:	72 72       	ld.w	r2,r9[0x1c]
80021070:	65 6e       	ld.w	lr,r2[0x58]
80021072:	74 20       	ld.w	r0,r10[0x8]
80021074:	77 61       	ld.w	r1,r11[0x58]
80021076:	79 70       	ld.w	r0,r12[0x5c]
80021078:	6f 69       	ld.w	r9,r7[0x58]
8002107a:	6e 74       	ld.w	r4,r7[0x1c]
8002107c:	20 74       	sub	r4,7
8002107e:	6f 20       	ld.w	r0,r7[0x48]
80021080:	6e 75       	ld.w	r5,r7[0x1c]
80021082:	6d 62       	ld.w	r2,r6[0x58]
80021084:	65 72       	ld.w	r2,r2[0x5c]
	...

80021088 <set_current_wp>:

void set_current_wp(Mavlink_Received_t* rec,  waypoint_struct* waypoint_list[], uint16_t num_of_waypoint)
{
80021088:	eb cd 40 c0 	pushm	r6-r7,lr
8002108c:	1a 97       	mov	r7,sp
8002108e:	20 5d       	sub	sp,20
80021090:	4c 06       	lddpc	r6,80021190 <set_current_wp+0x108>
80021092:	1e 26       	rsub	r6,pc
80021094:	ef 4c ff f4 	st.w	r7[-12],r12
80021098:	ef 4b ff f0 	st.w	r7[-16],r11
8002109c:	14 98       	mov	r8,r10
8002109e:	ef 58 ff ec 	st.h	r7[-20],r8
	mavlink_mission_set_current_t packet;
	mavlink_msg_mission_set_current_decode(&rec->msg,&packet);
800210a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800210a6:	ee c9 00 08 	sub	r9,r7,8
800210aa:	12 9b       	mov	r11,r9
800210ac:	10 9c       	mov	r12,r8
800210ae:	fe b0 f5 21 	rcall	8001faf0 <mavlink_msg_mission_set_current_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800210b2:	ef 39 ff fa 	ld.ub	r9,r7[-6]
800210b6:	ec f8 00 70 	ld.w	r8,r6[112]
800210ba:	11 88       	ld.ub	r8,r8[0x0]
void set_current_wp(Mavlink_Received_t* rec,  waypoint_struct* waypoint_list[], uint16_t num_of_waypoint)
{
	mavlink_mission_set_current_t packet;
	mavlink_msg_mission_set_current_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
800210bc:	f0 09 18 00 	cp.b	r9,r8
800210c0:	c6 41       	brne	80021188 <set_current_wp+0x100>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800210c2:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800210c6:	ec f8 00 c8 	ld.w	r8,r6[200]
800210ca:	11 98       	ld.ub	r8,r8[0x1]
void set_current_wp(Mavlink_Received_t* rec,  waypoint_struct* waypoint_list[], uint16_t num_of_waypoint)
{
	mavlink_mission_set_current_t packet;
	mavlink_msg_mission_set_current_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
800210cc:	f0 09 18 00 	cp.b	r9,r8
800210d0:	c5 c1       	brne	80021188 <set_current_wp+0x100>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		dbg_print("setting current wp");
800210d2:	fe cc 00 7e 	sub	r12,pc,126
800210d6:	f0 16 00 01 	mcall	r6[4]
		int i;
		for (i=0;i<num_of_waypoint;i++)
800210da:	30 08       	mov	r8,0
800210dc:	ef 48 ff fc 	st.w	r7[-4],r8
800210e0:	c1 08       	rjmp	80021100 <set_current_wp+0x78>
		{
			waypoint_list[i]->current = 0;
800210e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800210e6:	a3 68       	lsl	r8,0x2
800210e8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800210ec:	f2 08 00 08 	add	r8,r9,r8
800210f0:	70 09       	ld.w	r9,r8[0x0]
800210f2:	30 08       	mov	r8,0
800210f4:	b2 c8       	st.b	r9[0x4],r8
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		dbg_print("setting current wp");
		int i;
		for (i=0;i<num_of_waypoint;i++)
800210f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800210fa:	2f f8       	sub	r8,-1
800210fc:	ef 48 ff fc 	st.w	r7[-4],r8
80021100:	ef 19 ff ec 	ld.uh	r9,r7[-20]
80021104:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021108:	10 39       	cp.w	r9,r8
8002110a:	fe 99 ff ec 	brgt	800210e2 <set_current_wp+0x5a>
		{
			waypoint_list[i]->current = 0;
		}
		if (packet.seq < num_of_waypoint)
8002110e:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80021112:	ef 09 ff ec 	ld.sh	r9,r7[-20]
80021116:	f0 09 19 00 	cp.h	r9,r8
8002111a:	e0 88 00 2b 	brls	80021170 <set_current_wp+0xe8>
		{
			waypoint_list[packet.seq]->current = 1;
8002111e:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80021122:	5c 78       	castu.h	r8
80021124:	a3 68       	lsl	r8,0x2
80021126:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002112a:	f2 08 00 08 	add	r8,r9,r8
8002112e:	70 09       	ld.w	r9,r8[0x0]
80021130:	30 18       	mov	r8,1
80021132:	b2 c8       	st.b	r9[0x4],r8
			mavlink_msg_mission_current_send(MAVLINK_COMM_0,waypoint_list[packet.seq]->current);
80021134:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80021138:	5c 78       	castu.h	r8
8002113a:	a3 68       	lsl	r8,0x2
8002113c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80021140:	f2 08 00 08 	add	r8,r9,r8
80021144:	70 08       	ld.w	r8,r8[0x0]
80021146:	11 c8       	ld.ub	r8,r8[0x4]
80021148:	10 9b       	mov	r11,r8
8002114a:	30 0c       	mov	r12,0
8002114c:	fe b0 f4 f8 	rcall	8001fb3c <mavlink_msg_mission_current_send>
			
			dbg_print("Set current waypoint to number");
80021150:	fe cc 00 e8 	sub	r12,pc,232
80021154:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(packet.seq,10);
80021158:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8002115c:	5c 78       	castu.h	r8
8002115e:	30 ab       	mov	r11,10
80021160:	10 9c       	mov	r12,r8
80021162:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80021166:	fe cc 0d 9e 	sub	r12,pc,3486
8002116a:	f0 16 00 01 	mcall	r6[4]
8002116e:	c0 d8       	rjmp	80021188 <set_current_wp+0x100>
		}else{
			mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_CMD_ACK_ERR_ACCESS_DENIED);
80021170:	ee f8 ff f4 	ld.w	r8,r7[-12]
80021174:	11 e8       	ld.ub	r8,r8[0x6]
80021176:	10 9a       	mov	r10,r8
80021178:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002117c:	11 d8       	ld.ub	r8,r8[0x5]
8002117e:	30 39       	mov	r9,3
80021180:	10 9b       	mov	r11,r8
80021182:	30 0c       	mov	r12,0
80021184:	fe b0 f6 1e 	rcall	8001fdc0 <mavlink_msg_mission_ack_send>
		}
	}
}
80021188:	2f bd       	sub	sp,-20
8002118a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002118e:	00 00       	add	r0,r0
80021190:	80 02       	ld.sh	r2,r0[0x0]
80021192:	0f 16       	ld.sh	r6,r7++
80021194:	43 6c       	lddsp	r12,sp[0xd8]
80021196:	65 61       	ld.w	r1,r2[0x58]
80021198:	72 20       	ld.w	r0,r9[0x8]
8002119a:	57 61       	stdsp	sp[0x1d8],r1
8002119c:	79 70       	ld.w	r0,r12[0x5c]
8002119e:	6f 69       	ld.w	r9,r7[0x58]
800211a0:	6e 74       	ld.w	r4,r7[0x1c]
800211a2:	20 6c       	sub	r12,6
800211a4:	69 73       	ld.w	r3,r4[0x5c]
800211a6:	74 00       	ld.w	r0,r10[0x0]

800211a8 <clear_waypoint_list>:

void clear_waypoint_list(Mavlink_Received_t* rec,  uint16_t* number_of_waypoints, bool* waypoint_set)
{
800211a8:	eb cd 40 c0 	pushm	r6-r7,lr
800211ac:	1a 97       	mov	r7,sp
800211ae:	20 4d       	sub	sp,16
800211b0:	4a 06       	lddpc	r6,80021230 <clear_waypoint_list+0x88>
800211b2:	1e 26       	rsub	r6,pc
800211b4:	ef 4c ff f8 	st.w	r7[-8],r12
800211b8:	ef 4b ff f4 	st.w	r7[-12],r11
800211bc:	ef 4a ff f0 	st.w	r7[-16],r10
	mavlink_mission_clear_all_t packet;
	mavlink_msg_mission_clear_all_decode(&rec->msg,&packet);
800211c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800211c4:	ee c9 00 02 	sub	r9,r7,2
800211c8:	12 9b       	mov	r11,r9
800211ca:	10 9c       	mov	r12,r8
800211cc:	fe b0 f5 bb 	rcall	8001fd42 <mavlink_msg_mission_clear_all_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800211d0:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800211d4:	ec f8 00 70 	ld.w	r8,r6[112]
800211d8:	11 88       	ld.ub	r8,r8[0x0]
void clear_waypoint_list(Mavlink_Received_t* rec,  uint16_t* number_of_waypoints, bool* waypoint_set)
{
	mavlink_mission_clear_all_t packet;
	mavlink_msg_mission_clear_all_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
800211da:	f0 09 18 00 	cp.b	r9,r8
800211de:	c2 51       	brne	80021228 <clear_waypoint_list+0x80>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800211e0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800211e4:	ec f8 00 c8 	ld.w	r8,r6[200]
800211e8:	11 98       	ld.ub	r8,r8[0x1]
void clear_waypoint_list(Mavlink_Received_t* rec,  uint16_t* number_of_waypoints, bool* waypoint_set)
{
	mavlink_mission_clear_all_t packet;
	mavlink_msg_mission_clear_all_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
800211ea:	f0 09 18 00 	cp.b	r9,r8
800211ee:	c1 d1       	brne	80021228 <clear_waypoint_list+0x80>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		*number_of_waypoints = 0;
800211f0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800211f4:	30 08       	mov	r8,0
800211f6:	b2 08       	st.h	r9[0x0],r8
		num_waypoint_onboard = 0;
800211f8:	ec f9 01 24 	ld.w	r9,r6[292]
800211fc:	30 08       	mov	r8,0
800211fe:	b2 08       	st.h	r9[0x0],r8
		*waypoint_set = 0;
80021200:	ee f9 ff f0 	ld.w	r9,r7[-16]
80021204:	30 08       	mov	r8,0
80021206:	b2 88       	st.b	r9[0x0],r8
		mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_CMD_ACK_OK);
80021208:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002120c:	11 e8       	ld.ub	r8,r8[0x6]
8002120e:	10 9a       	mov	r10,r8
80021210:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021214:	11 d8       	ld.ub	r8,r8[0x5]
80021216:	30 19       	mov	r9,1
80021218:	10 9b       	mov	r11,r8
8002121a:	30 0c       	mov	r12,0
8002121c:	fe b0 f5 d2 	rcall	8001fdc0 <mavlink_msg_mission_ack_send>
		dbg_print("Clear Waypoint list");
80021220:	fe cc 00 8c 	sub	r12,pc,140
80021224:	f0 16 00 01 	mcall	r6[4]
	}		
}
80021228:	2f cd       	sub	sp,-16
8002122a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002122e:	00 00       	add	r0,r0
80021230:	80 02       	ld.sh	r2,r0[0x0]
80021232:	10 36       	cp.w	r6,r8
80021234:	62 61       	ld.w	r1,r1[0x18]
80021236:	73 65       	ld.w	r5,r9[0x58]
80021238:	5f 6d       	srmi	sp
8002123a:	6f 64       	ld.w	r4,r7[0x58]
8002123c:	65 3a       	ld.w	r10,r2[0x4c]
8002123e:	00 00       	add	r0,r0
80021240:	2c 20       	sub	r0,-62
80021242:	63 75       	ld.w	r5,r1[0x5c]
80021244:	73 74       	ld.w	r4,r9[0x5c]
80021246:	6f 6d       	ld.w	sp,r7[0x58]
80021248:	20 6d       	sub	sp,24
8002124a:	6f 64       	ld.w	r4,r7[0x58]
8002124c:	65 3a       	ld.w	r10,r2[0x4c]
	...

80021250 <set_mav_mode>:

void set_mav_mode(Mavlink_Received_t* rec, uint8_t* board_mav_mode, uint8_t* board_mav_state, uint8_t sim_mode)
{
80021250:	eb cd 40 e0 	pushm	r5-r7,lr
80021254:	1a 97       	mov	r7,sp
80021256:	20 6d       	sub	sp,24
80021258:	4e 26       	lddpc	r6,800213e0 <set_mav_mode+0x190>
8002125a:	1e 26       	rsub	r6,pc
8002125c:	ef 4c ff f4 	st.w	r7[-12],r12
80021260:	ef 4b ff f0 	st.w	r7[-16],r11
80021264:	ef 4a ff ec 	st.w	r7[-20],r10
80021268:	12 98       	mov	r8,r9
8002126a:	ef 68 ff e8 	st.b	r7[-24],r8
	mavlink_set_mode_t packet;
	mavlink_msg_set_mode_decode(&rec->msg,&packet);
8002126e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80021272:	ee c9 00 08 	sub	r9,r7,8
80021276:	12 9b       	mov	r11,r9
80021278:	10 9c       	mov	r12,r8
8002127a:	fe b0 f1 53 	rcall	8001f520 <mavlink_msg_set_mode_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid)
8002127e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80021282:	ec f8 00 70 	ld.w	r8,r6[112]
80021286:	11 88       	ld.ub	r8,r8[0x0]
80021288:	f0 09 18 00 	cp.b	r9,r8
8002128c:	e0 81 00 a6 	brne	800213d8 <set_mav_mode+0x188>
	{
		dbg_print("base_mode:");
80021290:	fe cc 00 5c 	sub	r12,pc,92
80021294:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.base_mode,10);
80021298:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8002129c:	30 ab       	mov	r11,10
8002129e:	10 9c       	mov	r12,r8
800212a0:	f0 16 00 04 	mcall	r6[16]
		dbg_print(", custom mode:");
800212a4:	fe cc 00 64 	sub	r12,pc,100
800212a8:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.custom_mode,10);
800212ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800212b0:	30 ab       	mov	r11,10
800212b2:	10 9c       	mov	r12,r8
800212b4:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
800212b8:	fe cc 0e f0 	sub	r12,pc,3824
800212bc:	f0 16 00 01 	mcall	r6[4]

		if (sim_mode == 0)
800212c0:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800212c4:	30 08       	mov	r8,0
800212c6:	f0 09 18 00 	cp.b	r9,r8
800212ca:	c3 e1       	brne	80021346 <set_mav_mode+0xf6>
		{
			switch(packet.base_mode)
800212cc:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800212d0:	e0 48 00 58 	cp.w	r8,88
800212d4:	c0 e0       	breq	800212f0 <set_mav_mode+0xa0>
800212d6:	e0 89 00 06 	brgt	800212e2 <set_mav_mode+0x92>
800212da:	e0 48 00 50 	cp.w	r8,80
800212de:	c0 90       	breq	800212f0 <set_mav_mode+0xa0>
				break;
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
					{
						*board_mav_state = MAV_STATE_ACTIVE;
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
800212e0:	c7 c8       	rjmp	800213d8 <set_mav_mode+0x188>
		dbg_print_num(packet.custom_mode,10);
		dbg_print("\n");

		if (sim_mode == 0)
		{
			switch(packet.base_mode)
800212e2:	e0 48 00 5c 	cp.w	r8,92
800212e6:	c0 50       	breq	800212f0 <set_mav_mode+0xa0>
800212e8:	e0 48 00 c0 	cp.w	r8,192
800212ec:	c0 c0       	breq	80021304 <set_mav_mode+0xb4>
				break;
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
					{
						*board_mav_state = MAV_STATE_ACTIVE;
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
800212ee:	c7 58       	rjmp	800213d8 <set_mav_mode+0x188>
			switch(packet.base_mode)
			{
				case MAV_MODE_STABILIZE_DISARMED:
				case MAV_MODE_GUIDED_DISARMED:
				case MAV_MODE_AUTO_DISARMED:
					*board_mav_state = MAV_STATE_STANDBY;
800212f0:	ee f9 ff ec 	ld.w	r9,r7[-20]
800212f4:	30 38       	mov	r8,3
800212f6:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_MANUAL_DISARMED;
800212f8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800212fc:	34 08       	mov	r8,64
800212fe:	b2 88       	st.b	r9[0x0],r8
				break;
80021300:	d7 03       	nop
80021302:	c6 b8       	rjmp	800213d8 <set_mav_mode+0x188>
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
80021304:	fe b0 f6 64 	rcall	8001ffcc <get_thrust_from_remote>
80021308:	18 98       	mov	r8,r12
8002130a:	10 9c       	mov	r12,r8
8002130c:	f0 16 00 02 	mcall	r6[8]
80021310:	30 05       	mov	r5,0
80021312:	e0 68 66 66 	mov	r8,26214
80021316:	ea 18 66 66 	orh	r8,0x6666
8002131a:	e0 69 66 66 	mov	r9,26214
8002131e:	ea 19 bf ee 	orh	r9,0xbfee
80021322:	f0 16 00 1d 	mcall	r6[116]
80021326:	18 98       	mov	r8,r12
80021328:	58 08       	cp.w	r8,0
8002132a:	c0 20       	breq	8002132e <set_mav_mode+0xde>
8002132c:	30 15       	mov	r5,1
8002132e:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80021332:	c5 20       	breq	800213d6 <set_mav_mode+0x186>
					{
						*board_mav_state = MAV_STATE_ACTIVE;
80021334:	ee f9 ff ec 	ld.w	r9,r7[-20]
80021338:	30 48       	mov	r8,4
8002133a:	b2 88       	st.b	r9[0x0],r8
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
8002133c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80021340:	3c 08       	mov	r8,-64
80021342:	b2 88       	st.b	r9[0x0],r8
80021344:	c4 a8       	rjmp	800213d8 <set_mav_mode+0x188>
					}
				break;
			}
		}else{
			switch(packet.base_mode)
80021346:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8002134a:	e0 48 00 c0 	cp.w	r8,192
8002134e:	c2 00       	breq	8002138e <set_mav_mode+0x13e>
80021350:	e0 89 00 0c 	brgt	80021368 <set_mav_mode+0x118>
80021354:	e0 48 00 58 	cp.w	r8,88
80021358:	c1 20       	breq	8002137c <set_mav_mode+0x12c>
8002135a:	e0 48 00 5c 	cp.w	r8,92
8002135e:	c0 f0       	breq	8002137c <set_mav_mode+0x12c>
80021360:	e0 48 00 50 	cp.w	r8,80
80021364:	c0 c0       	breq	8002137c <set_mav_mode+0x12c>
80021366:	c3 98       	rjmp	800213d8 <set_mav_mode+0x188>
80021368:	e0 48 00 d8 	cp.w	r8,216
8002136c:	c2 30       	breq	800213b2 <set_mav_mode+0x162>
8002136e:	e0 48 00 dc 	cp.w	r8,220
80021372:	c2 90       	breq	800213c4 <set_mav_mode+0x174>
80021374:	e0 48 00 d0 	cp.w	r8,208
80021378:	c1 40       	breq	800213a0 <set_mav_mode+0x150>
8002137a:	c2 f8       	rjmp	800213d8 <set_mav_mode+0x188>
			{
				case MAV_MODE_STABILIZE_DISARMED:
				case MAV_MODE_GUIDED_DISARMED:
				case MAV_MODE_AUTO_DISARMED:
					*board_mav_state = MAV_STATE_STANDBY;
8002137c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80021380:	30 38       	mov	r8,3
80021382:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_MANUAL_DISARMED;
80021384:	ee f9 ff f0 	ld.w	r9,r7[-16]
80021388:	34 08       	mov	r8,64
8002138a:	b2 88       	st.b	r9[0x0],r8
				break;
8002138c:	c2 68       	rjmp	800213d8 <set_mav_mode+0x188>
				case MAV_MODE_MANUAL_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
8002138e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80021392:	30 48       	mov	r8,4
80021394:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80021396:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002139a:	3c 08       	mov	r8,-64
8002139c:	b2 88       	st.b	r9[0x0],r8
				break;
8002139e:	c1 d8       	rjmp	800213d8 <set_mav_mode+0x188>
				case MAV_MODE_STABILIZE_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
800213a0:	ee f9 ff ec 	ld.w	r9,r7[-20]
800213a4:	30 48       	mov	r8,4
800213a6:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_STABILIZE_ARMED;
800213a8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800213ac:	3d 08       	mov	r8,-48
800213ae:	b2 88       	st.b	r9[0x0],r8
				break;
800213b0:	c1 48       	rjmp	800213d8 <set_mav_mode+0x188>
				case MAV_MODE_GUIDED_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
800213b2:	ee f9 ff ec 	ld.w	r9,r7[-20]
800213b6:	30 48       	mov	r8,4
800213b8:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_GUIDED_ARMED;
800213ba:	ee f9 ff f0 	ld.w	r9,r7[-16]
800213be:	3d 88       	mov	r8,-40
800213c0:	b2 88       	st.b	r9[0x0],r8
				break;
800213c2:	c0 b8       	rjmp	800213d8 <set_mav_mode+0x188>
				case MAV_MODE_AUTO_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
800213c4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800213c8:	30 48       	mov	r8,4
800213ca:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_AUTO_ARMED;
800213cc:	ee f9 ff f0 	ld.w	r9,r7[-16]
800213d0:	3d c8       	mov	r8,-36
800213d2:	b2 88       	st.b	r9[0x0],r8
800213d4:	c0 28       	rjmp	800213d8 <set_mav_mode+0x188>
				break;
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
					{
						*board_mav_state = MAV_STATE_ACTIVE;
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
800213d6:	d7 03       	nop
				break;
			}
		}
		
	}
}
800213d8:	2f ad       	sub	sp,-24
800213da:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800213de:	00 00       	add	r0,r0
800213e0:	80 02       	ld.sh	r2,r0[0x0]
800213e2:	10 de       	st.w	--r8,lr
800213e4:	53 65       	stdsp	sp[0xd8],r5
800213e6:	6e 64       	ld.w	r4,r7[0x18]
800213e8:	69 6e       	ld.w	lr,r4[0x58]
800213ea:	67 20       	ld.w	r0,r3[0x48]
800213ec:	77 61       	ld.w	r1,r11[0x58]
800213ee:	79 70       	ld.w	r0,r12[0x5c]
800213f0:	6f 69       	ld.w	r9,r7[0x58]
800213f2:	6e 74       	ld.w	r4,r7[0x1c]
800213f4:	20 74       	sub	r4,7
800213f6:	69 6d       	ld.w	sp,r4[0x58]
800213f8:	65 6f       	ld.w	pc,r2[0x58]
800213fa:	75 74       	ld.w	r4,r10[0x5c]
800213fc:	00 00       	add	r0,r0
800213fe:	00 00       	add	r0,r0
80021400:	52 65       	stdsp	sp[0x98],r5
80021402:	63 65       	ld.w	r5,r1[0x58]
80021404:	69 76       	ld.w	r6,r4[0x5c]
80021406:	69 6e       	ld.w	lr,r4[0x58]
80021408:	67 20       	ld.w	r0,r3[0x48]
8002140a:	77 61       	ld.w	r1,r11[0x58]
8002140c:	79 70       	ld.w	r0,r12[0x5c]
8002140e:	6f 69       	ld.w	r9,r7[0x58]
80021410:	6e 74       	ld.w	r4,r7[0x1c]
80021412:	20 74       	sub	r4,7
80021414:	69 6d       	ld.w	sp,r4[0x58]
80021416:	65 6f       	ld.w	pc,r2[0x58]
80021418:	75 74       	ld.w	r4,r10[0x5c]
	...

8002141c <control_time_out_waypoint_msg>:

void control_time_out_waypoint_msg(uint16_t* num_of_waypoint, bool* waypoint_receiving, bool* waypoint_sending)
{
8002141c:	eb cd 40 c0 	pushm	r6-r7,lr
80021420:	1a 97       	mov	r7,sp
80021422:	20 4d       	sub	sp,16
80021424:	4a 76       	lddpc	r6,800214c0 <control_time_out_waypoint_msg+0xa4>
80021426:	1e 26       	rsub	r6,pc
80021428:	ef 4c ff f8 	st.w	r7[-8],r12
8002142c:	ef 4b ff f4 	st.w	r7[-12],r11
80021430:	ef 4a ff f0 	st.w	r7[-16],r10
	if (*waypoint_sending || *waypoint_receiving)
80021434:	ee f8 ff f0 	ld.w	r8,r7[-16]
80021438:	11 88       	ld.ub	r8,r8[0x0]
8002143a:	58 08       	cp.w	r8,0
8002143c:	c0 61       	brne	80021448 <control_time_out_waypoint_msg+0x2c>
8002143e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80021442:	11 88       	ld.ub	r8,r8[0x0]
80021444:	58 08       	cp.w	r8,0
80021446:	c3 90       	breq	800214b8 <control_time_out_waypoint_msg+0x9c>
	{
		uint32_t tnow = get_millis();
80021448:	f0 16 00 0f 	mcall	r6[60]
8002144c:	18 98       	mov	r8,r12
8002144e:	ef 48 ff fc 	st.w	r7[-4],r8
		
		if ((tnow - start_timeout) > timeout_max_wp)
80021452:	ec f8 01 78 	ld.w	r8,r6[376]
80021456:	70 08       	ld.w	r8,r8[0x0]
80021458:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002145c:	10 19       	sub	r9,r8
8002145e:	ec f8 04 14 	ld.w	r8,r6[1044]
80021462:	70 08       	ld.w	r8,r8[0x0]
80021464:	10 39       	cp.w	r9,r8
80021466:	e0 88 00 29 	brls	800214b8 <control_time_out_waypoint_msg+0x9c>
		{
			start_timeout = tnow;
8002146a:	ec f8 01 78 	ld.w	r8,r6[376]
8002146e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80021472:	91 09       	st.w	r8[0x0],r9
			if (*waypoint_sending)
80021474:	ee f8 ff f0 	ld.w	r8,r7[-16]
80021478:	11 88       	ld.ub	r8,r8[0x0]
8002147a:	58 08       	cp.w	r8,0
8002147c:	c0 90       	breq	8002148e <control_time_out_waypoint_msg+0x72>
			{
				*waypoint_sending = false;
8002147e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80021482:	30 08       	mov	r8,0
80021484:	b2 88       	st.b	r9[0x0],r8
				dbg_print("Sending waypoint timeout");
80021486:	fe cc 00 a2 	sub	r12,pc,162
8002148a:	f0 16 00 01 	mcall	r6[4]
			}
			if (*waypoint_receiving)
8002148e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80021492:	11 88       	ld.ub	r8,r8[0x0]
80021494:	58 08       	cp.w	r8,0
80021496:	c1 10       	breq	800214b8 <control_time_out_waypoint_msg+0x9c>
			{
				*waypoint_receiving = false;
80021498:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002149c:	30 08       	mov	r8,0
8002149e:	b2 88       	st.b	r9[0x0],r8
				
				dbg_print("Receiving waypoint timeout");
800214a0:	fe cc 00 a0 	sub	r12,pc,160
800214a4:	f0 16 00 01 	mcall	r6[4]
				*num_of_waypoint = 0;
800214a8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800214ac:	30 08       	mov	r8,0
800214ae:	b2 08       	st.h	r9[0x0],r8
				num_waypoint_onboard = 0;
800214b0:	ec f9 01 24 	ld.w	r9,r6[292]
800214b4:	30 08       	mov	r8,0
800214b6:	b2 08       	st.h	r9[0x0],r8
				
			}
		}
	}
}
800214b8:	2f cd       	sub	sp,-16
800214ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800214be:	00 00       	add	r0,r0
800214c0:	80 02       	ld.sh	r2,r0[0x0]
800214c2:	12 aa       	st.w	r9++,r10
800214c4:	77 70       	ld.w	r0,r11[0x5c]
800214c6:	5f 67       	srmi	r7
800214c8:	6c 6f       	ld.w	pc,r6[0x18]
800214ca:	62 61       	ld.w	r1,r1[0x18]
800214cc:	6c 3a       	ld.w	r10,r6[0xc]
800214ce:	20 6c       	sub	r12,6
800214d0:	61 74       	ld.w	r4,r0[0x5c]
800214d2:	20 28       	sub	r8,2
800214d4:	78 31       	ld.w	r1,r12[0xc]
800214d6:	65 37       	ld.w	r7,r2[0x4c]
800214d8:	29 3a       	sub	r10,-109
800214da:	00 00       	add	r0,r0
800214dc:	20 6c       	sub	r12,6
800214de:	6f 6e       	ld.w	lr,r7[0x58]
800214e0:	67 20       	ld.w	r0,r3[0x48]
800214e2:	28 78       	sub	r8,-121
800214e4:	31 65       	mov	r5,22
800214e6:	37 29       	mov	r9,114
800214e8:	3a 00       	mov	r0,-96
800214ea:	00 00       	add	r0,r0
800214ec:	20 61       	sub	r1,6
800214ee:	6c 74       	ld.w	r4,r6[0x1c]
800214f0:	20 28       	sub	r8,2
800214f2:	78 31       	ld.w	r1,r12[0xc]
800214f4:	30 30       	mov	r0,3
800214f6:	30 29       	mov	r9,2
800214f8:	3a 00       	mov	r0,-96
800214fa:	00 00       	add	r0,r0
800214fc:	20 77       	sub	r7,7
800214fe:	70 5f       	ld.w	pc,r8[0x14]
80021500:	63 6f       	ld.w	pc,r1[0x58]
80021502:	6f 72       	ld.w	r2,r7[0x5c]
80021504:	3a 20       	mov	r0,-94
80021506:	78 20       	ld.w	r0,r12[0x8]
80021508:	28 78       	sub	r8,-121
8002150a:	31 30       	mov	r0,19
8002150c:	30 29       	mov	r9,2
8002150e:	3a 00       	mov	r0,-96
80021510:	2c 20       	sub	r0,-62
80021512:	79 20       	ld.w	r0,r12[0x48]
80021514:	28 78       	sub	r8,-121
80021516:	31 30       	mov	r0,19
80021518:	30 29       	mov	r9,2
8002151a:	3a 00       	mov	r0,-96
8002151c:	2c 20       	sub	r0,-62
8002151e:	7a 20       	ld.w	r0,sp[0x8]
80021520:	28 78       	sub	r8,-121
80021522:	31 30       	mov	r0,19
80021524:	30 29       	mov	r9,2
80021526:	3a 00       	mov	r0,-96
80021528:	20 6c       	sub	r12,6
8002152a:	6f 63       	ld.w	r3,r7[0x58]
8002152c:	61 6c       	ld.w	r12,r0[0x58]
8002152e:	4f 72       	lddpc	r2,80021708 <set_waypoint_from_frame+0x192>
80021530:	69 67       	ld.w	r7,r4[0x58]
80021532:	69 6e       	ld.w	lr,r4[0x58]
80021534:	20 6c       	sub	r12,6
80021536:	61 74       	ld.w	r4,r0[0x5c]
80021538:	20 28       	sub	r8,2
8002153a:	78 31       	ld.w	r1,r12[0xc]
8002153c:	65 37       	ld.w	r7,r2[0x4c]
8002153e:	29 3a       	sub	r10,-109
80021540:	00 00       	add	r0,r0
80021542:	00 00       	add	r0,r0
80021544:	4c 6f       	lddpc	pc,8002165c <set_waypoint_from_frame+0xe6>
80021546:	63 61       	ld.w	r1,r1[0x58]
80021548:	6c 4f       	ld.w	pc,r6[0x10]
8002154a:	72 69       	ld.w	r9,r9[0x18]
8002154c:	67 69       	ld.w	r9,r3[0x58]
8002154e:	6e 3a       	ld.w	r10,r7[0xc]
80021550:	20 6c       	sub	r12,6
80021552:	61 74       	ld.w	r4,r0[0x5c]
80021554:	20 28       	sub	r8,2
80021556:	78 31       	ld.w	r1,r12[0xc]
80021558:	65 37       	ld.w	r7,r2[0x4c]
8002155a:	29 3a       	sub	r10,-109
8002155c:	00 00       	add	r0,r0
8002155e:	00 00       	add	r0,r0
80021560:	20 67       	sub	r7,6
80021562:	6c 6f       	ld.w	pc,r6[0x18]
80021564:	62 61       	ld.w	r1,r1[0x18]
80021566:	6c 20       	ld.w	r0,r6[0x8]
80021568:	61 6c       	ld.w	r12,r0[0x58]
8002156a:	74 20       	ld.w	r0,r10[0x8]
8002156c:	28 78       	sub	r8,-121
8002156e:	31 30       	mov	r0,19
80021570:	30 30       	mov	r0,3
80021572:	29 3a       	sub	r10,-109
	...

80021576 <set_waypoint_from_frame>:

local_coordinates_t set_waypoint_from_frame(waypoint_struct current_wp, global_position_t origin)
{
80021576:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8002157a:	1a 97       	mov	r7,sp
8002157c:	fa cd 00 a8 	sub	sp,sp,168
80021580:	fe f6 05 f0 	ld.w	r6,pc[1520]
80021584:	1e 26       	rsub	r6,pc
80021586:	ee c5 ff ec 	sub	r5,r7,-20
8002158a:	18 93       	mov	r3,r12
	global_position_t waypoint_global;
	local_coordinates_t waypoint_coor;
	
	float rel_pos[3];
	
	for (i=0;i<3;i++)
8002158c:	30 08       	mov	r8,0
8002158e:	ef 68 ff ff 	st.b	r7[-1],r8
80021592:	c0 e8       	rjmp	800215ae <set_waypoint_from_frame+0x38>
	{
		waypoint_coor.pos[i] = 0.0;
80021594:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80021598:	a3 68       	lsl	r8,0x2
8002159a:	ee 08 00 08 	add	r8,r7,r8
8002159e:	30 09       	mov	r9,0
800215a0:	f1 49 ff b0 	st.w	r8[-80],r9
	global_position_t waypoint_global;
	local_coordinates_t waypoint_coor;
	
	float rel_pos[3];
	
	for (i=0;i<3;i++)
800215a4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800215a8:	2f f8       	sub	r8,-1
800215aa:	ef 68 ff ff 	st.b	r7[-1],r8
800215ae:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800215b2:	30 28       	mov	r8,2
800215b4:	f0 09 18 00 	cp.b	r9,r8
800215b8:	fe 98 ff ee 	brls	80021594 <set_waypoint_from_frame+0x1e>
	{
		waypoint_coor.pos[i] = 0.0;
	}

	switch(current_wp.frame)
800215bc:	0b 88       	ld.ub	r8,r5[0x0]
800215be:	58 18       	cp.w	r8,1
800215c0:	e0 80 01 31 	breq	80021822 <set_waypoint_from_frame+0x2ac>
800215c4:	e0 89 00 06 	brgt	800215d0 <set_waypoint_from_frame+0x5a>
800215c8:	58 08       	cp.w	r8,0
800215ca:	c0 b0       	breq	800215e0 <set_waypoint_from_frame+0x6a>
800215cc:	e0 8f 02 a7 	bral	80021b1a <set_waypoint_from_frame+0x5a4>
800215d0:	58 28       	cp.w	r8,2
800215d2:	e0 80 02 a3 	breq	80021b18 <set_waypoint_from_frame+0x5a2>
800215d6:	58 38       	cp.w	r8,3
800215d8:	e0 80 01 a7 	breq	80021926 <set_waypoint_from_frame+0x3b0>
800215dc:	e0 8f 02 9f 	bral	80021b1a <set_waypoint_from_frame+0x5a4>
	{
		case MAV_FRAME_GLOBAL:
			waypoint_global.latitude = current_wp.x;
800215e0:	ea e8 00 18 	ld.d	r8,r5[24]
800215e4:	ee e9 ff e8 	st.d	r7[-24],r8
			waypoint_global.longitude = current_wp.y;
800215e8:	ea e8 00 20 	ld.d	r8,r5[32]
800215ec:	ee e9 ff e0 	st.d	r7[-32],r8
			waypoint_global.altitude = current_wp.z;
800215f0:	ea e8 00 28 	ld.d	r8,r5[40]
800215f4:	10 9a       	mov	r10,r8
800215f6:	12 9b       	mov	r11,r9
800215f8:	f0 16 00 09 	mcall	r6[36]
800215fc:	18 98       	mov	r8,r12
800215fe:	ef 48 ff f0 	st.w	r7[-16],r8
			waypoint_coor = global_to_local_position(waypoint_global,origin);
80021602:	ee cc 00 a8 	sub	r12,r7,168
80021606:	20 7d       	sub	sp,28
80021608:	1a 98       	mov	r8,sp
8002160a:	10 9a       	mov	r10,r8
8002160c:	ea cb ff d0 	sub	r11,r5,-48
80021610:	f4 c8 00 00 	sub	r8,r10,0
80021614:	f6 c9 00 00 	sub	r9,r11,0
80021618:	72 0e       	ld.w	lr,r9[0x0]
8002161a:	91 0e       	st.w	r8[0x0],lr
8002161c:	72 1e       	ld.w	lr,r9[0x4]
8002161e:	91 1e       	st.w	r8[0x4],lr
80021620:	72 2e       	ld.w	lr,r9[0x8]
80021622:	91 2e       	st.w	r8[0x8],lr
80021624:	72 39       	ld.w	r9,r9[0xc]
80021626:	91 39       	st.w	r8[0xc],r9
80021628:	f6 e8 00 10 	ld.d	r8,r11[16]
8002162c:	f4 e9 00 10 	st.d	r10[16],r8
80021630:	76 68       	ld.w	r8,r11[0x18]
80021632:	95 68       	st.w	r10[0x18],r8
80021634:	20 7d       	sub	sp,28
80021636:	1a 98       	mov	r8,sp
80021638:	10 9a       	mov	r10,r8
8002163a:	ee cb 00 20 	sub	r11,r7,32
8002163e:	f4 c8 00 00 	sub	r8,r10,0
80021642:	f6 c9 00 00 	sub	r9,r11,0
80021646:	72 0e       	ld.w	lr,r9[0x0]
80021648:	91 0e       	st.w	r8[0x0],lr
8002164a:	72 1e       	ld.w	lr,r9[0x4]
8002164c:	91 1e       	st.w	r8[0x4],lr
8002164e:	72 2e       	ld.w	lr,r9[0x8]
80021650:	91 2e       	st.w	r8[0x8],lr
80021652:	72 39       	ld.w	r9,r9[0xc]
80021654:	91 39       	st.w	r8[0xc],r9
80021656:	f6 e8 00 10 	ld.d	r8,r11[16]
8002165a:	f4 e9 00 10 	st.d	r10[16],r8
8002165e:	76 68       	ld.w	r8,r11[0x18]
80021660:	95 68       	st.w	r10[0x18],r8
80021662:	f0 16 00 7a 	mcall	r6[488]
80021666:	2f 2d       	sub	sp,-56
80021668:	ee cb 00 50 	sub	r11,r7,80
8002166c:	ee ca 00 a8 	sub	r10,r7,168
80021670:	f6 c8 00 00 	sub	r8,r11,0
80021674:	f4 c9 00 00 	sub	r9,r10,0
80021678:	72 0c       	ld.w	r12,r9[0x0]
8002167a:	91 0c       	st.w	r8[0x0],r12
8002167c:	72 1c       	ld.w	r12,r9[0x4]
8002167e:	91 1c       	st.w	r8[0x4],r12
80021680:	72 2c       	ld.w	r12,r9[0x8]
80021682:	91 2c       	st.w	r8[0x8],r12
80021684:	72 39       	ld.w	r9,r9[0xc]
80021686:	91 39       	st.w	r8[0xc],r9
80021688:	f6 c8 ff f0 	sub	r8,r11,-16
8002168c:	f4 c9 ff f0 	sub	r9,r10,-16
80021690:	72 0c       	ld.w	r12,r9[0x0]
80021692:	91 0c       	st.w	r8[0x0],r12
80021694:	72 1c       	ld.w	r12,r9[0x4]
80021696:	91 1c       	st.w	r8[0x4],r12
80021698:	72 2c       	ld.w	r12,r9[0x8]
8002169a:	91 2c       	st.w	r8[0x8],r12
8002169c:	72 39       	ld.w	r9,r9[0xc]
8002169e:	91 39       	st.w	r8[0xc],r9
800216a0:	f6 c8 ff e0 	sub	r8,r11,-32
800216a4:	f4 c9 ff e0 	sub	r9,r10,-32
800216a8:	72 0a       	ld.w	r10,r9[0x0]
800216aa:	91 0a       	st.w	r8[0x0],r10
800216ac:	72 1a       	ld.w	r10,r9[0x4]
800216ae:	91 1a       	st.w	r8[0x4],r10
800216b0:	72 2a       	ld.w	r10,r9[0x8]
800216b2:	91 2a       	st.w	r8[0x8],r10
800216b4:	72 39       	ld.w	r9,r9[0xc]
800216b6:	91 39       	st.w	r8[0xc],r9
			
			dbg_print("wp_global: lat (x1e7):");
800216b8:	fe cc 01 f4 	sub	r12,pc,500
800216bc:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_global.latitude*10000000,10);
800216c0:	ee ea ff e8 	ld.d	r10,r7[-24]
800216c4:	30 08       	mov	r8,0
800216c6:	e0 69 12 d0 	mov	r9,4816
800216ca:	ea 19 41 63 	orh	r9,0x4163
800216ce:	f0 16 00 03 	mcall	r6[12]
800216d2:	14 98       	mov	r8,r10
800216d4:	16 99       	mov	r9,r11
800216d6:	10 9a       	mov	r10,r8
800216d8:	12 9b       	mov	r11,r9
800216da:	f0 16 00 14 	mcall	r6[80]
800216de:	18 98       	mov	r8,r12
800216e0:	30 ab       	mov	r11,10
800216e2:	10 9c       	mov	r12,r8
800216e4:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" long (x1e7):");
800216e8:	fe cc 02 0c 	sub	r12,pc,524
800216ec:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_global.longitude*10000000,10);
800216f0:	ee ea ff e0 	ld.d	r10,r7[-32]
800216f4:	30 08       	mov	r8,0
800216f6:	e0 69 12 d0 	mov	r9,4816
800216fa:	ea 19 41 63 	orh	r9,0x4163
800216fe:	f0 16 00 03 	mcall	r6[12]
80021702:	14 98       	mov	r8,r10
80021704:	16 99       	mov	r9,r11
80021706:	10 9a       	mov	r10,r8
80021708:	12 9b       	mov	r11,r9
8002170a:	f0 16 00 14 	mcall	r6[80]
8002170e:	18 98       	mov	r8,r12
80021710:	30 ab       	mov	r11,10
80021712:	10 9c       	mov	r12,r8
80021714:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" alt (x1000):");
80021718:	fe cc 02 2c 	sub	r12,pc,556
8002171c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_global.altitude*1000,10);
80021720:	ee f9 ff f0 	ld.w	r9,r7[-16]
80021724:	fc 18 44 7a 	movh	r8,0x447a
80021728:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002172c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021730:	30 ab       	mov	r11,10
80021732:	10 9c       	mov	r12,r8
80021734:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" wp_coor: x (x100):");
80021738:	fe cc 02 3c 	sub	r12,pc,572
8002173c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[X]*100,10);
80021740:	ee f9 ff b0 	ld.w	r9,r7[-80]
80021744:	fc 18 42 c8 	movh	r8,0x42c8
80021748:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002174c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021750:	30 ab       	mov	r11,10
80021752:	10 9c       	mov	r12,r8
80021754:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", y (x100):");
80021758:	fe cc 02 48 	sub	r12,pc,584
8002175c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Y]*100,10);
80021760:	ee f9 ff b4 	ld.w	r9,r7[-76]
80021764:	fc 18 42 c8 	movh	r8,0x42c8
80021768:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002176c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021770:	30 ab       	mov	r11,10
80021772:	10 9c       	mov	r12,r8
80021774:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", z (x100):");
80021778:	fe cc 02 5c 	sub	r12,pc,604
8002177c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Z]*100,10);
80021780:	ee f9 ff b8 	ld.w	r9,r7[-72]
80021784:	fc 18 42 c8 	movh	r8,0x42c8
80021788:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002178c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021790:	30 ab       	mov	r11,10
80021792:	10 9c       	mov	r12,r8
80021794:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" localOrigin lat (x1e7):");
80021798:	fe cc 02 70 	sub	r12,pc,624
8002179c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.latitude*10000000,10);
800217a0:	ea ea 00 38 	ld.d	r10,r5[56]
800217a4:	30 08       	mov	r8,0
800217a6:	e0 69 12 d0 	mov	r9,4816
800217aa:	ea 19 41 63 	orh	r9,0x4163
800217ae:	f0 16 00 03 	mcall	r6[12]
800217b2:	14 98       	mov	r8,r10
800217b4:	16 99       	mov	r9,r11
800217b6:	10 9a       	mov	r10,r8
800217b8:	12 9b       	mov	r11,r9
800217ba:	f0 16 00 14 	mcall	r6[80]
800217be:	18 98       	mov	r8,r12
800217c0:	30 ab       	mov	r11,10
800217c2:	10 9c       	mov	r12,r8
800217c4:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" long (x1e7):");
800217c8:	fe cc 02 ec 	sub	r12,pc,748
800217cc:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.longitude*10000000,10);
800217d0:	ea ea 00 30 	ld.d	r10,r5[48]
800217d4:	30 08       	mov	r8,0
800217d6:	e0 69 12 d0 	mov	r9,4816
800217da:	ea 19 41 63 	orh	r9,0x4163
800217de:	f0 16 00 03 	mcall	r6[12]
800217e2:	14 98       	mov	r8,r10
800217e4:	16 99       	mov	r9,r11
800217e6:	10 9a       	mov	r10,r8
800217e8:	12 9b       	mov	r11,r9
800217ea:	f0 16 00 14 	mcall	r6[80]
800217ee:	18 98       	mov	r8,r12
800217f0:	30 ab       	mov	r11,10
800217f2:	10 9c       	mov	r12,r8
800217f4:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" alt (x1000):");
800217f8:	fe cc 03 0c 	sub	r12,pc,780
800217fc:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.altitude*1000,10);
80021800:	6b 09       	ld.w	r9,r5[0x40]
80021802:	fc 18 44 7a 	movh	r8,0x447a
80021806:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002180a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8002180e:	30 ab       	mov	r11,10
80021810:	10 9c       	mov	r12,r8
80021812:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80021816:	fe cc 14 4e 	sub	r12,pc,5198
8002181a:	f0 16 00 01 	mcall	r6[4]
		
		break;
8002181e:	e0 8f 01 7e 	bral	80021b1a <set_waypoint_from_frame+0x5a4>
		case MAV_FRAME_LOCAL_NED:
			waypoint_coor.pos[X] = current_wp.x;
80021822:	ea e8 00 18 	ld.d	r8,r5[24]
80021826:	10 9a       	mov	r10,r8
80021828:	12 9b       	mov	r11,r9
8002182a:	f0 16 00 09 	mcall	r6[36]
8002182e:	18 98       	mov	r8,r12
80021830:	ef 48 ff b0 	st.w	r7[-80],r8
			waypoint_coor.pos[Y] = current_wp.y;
80021834:	ea e8 00 20 	ld.d	r8,r5[32]
80021838:	10 9a       	mov	r10,r8
8002183a:	12 9b       	mov	r11,r9
8002183c:	f0 16 00 09 	mcall	r6[36]
80021840:	18 98       	mov	r8,r12
80021842:	ef 48 ff b4 	st.w	r7[-76],r8
			waypoint_coor.pos[Z] = current_wp.z;
80021846:	ea e8 00 28 	ld.d	r8,r5[40]
8002184a:	10 9a       	mov	r10,r8
8002184c:	12 9b       	mov	r11,r9
8002184e:	f0 16 00 09 	mcall	r6[36]
80021852:	18 98       	mov	r8,r12
80021854:	ef 48 ff b8 	st.w	r7[-72],r8
			waypoint_coor.heading= deg_to_rad(current_wp.param4);
80021858:	6a 58       	ld.w	r8,r5[0x14]
8002185a:	10 9c       	mov	r12,r8
8002185c:	f0 16 00 02 	mcall	r6[8]
80021860:	e0 68 2d 18 	mov	r8,11544
80021864:	ea 18 54 44 	orh	r8,0x5444
80021868:	e0 69 21 fb 	mov	r9,8699
8002186c:	ea 19 40 09 	orh	r9,0x4009
80021870:	f0 16 00 03 	mcall	r6[12]
80021874:	14 98       	mov	r8,r10
80021876:	16 99       	mov	r9,r11
80021878:	10 9a       	mov	r10,r8
8002187a:	12 9b       	mov	r11,r9
8002187c:	30 08       	mov	r8,0
8002187e:	e0 69 80 00 	mov	r9,32768
80021882:	ea 19 40 66 	orh	r9,0x4066
80021886:	f0 16 00 0c 	mcall	r6[48]
8002188a:	14 98       	mov	r8,r10
8002188c:	16 99       	mov	r9,r11
8002188e:	10 9a       	mov	r10,r8
80021890:	12 9b       	mov	r11,r9
80021892:	f0 16 00 09 	mcall	r6[36]
80021896:	18 98       	mov	r8,r12
80021898:	ef 48 ff bc 	st.w	r7[-68],r8
			waypoint_coor.origin = local_to_global_position(waypoint_coor);
8002189c:	ee cc 00 a8 	sub	r12,r7,168
800218a0:	20 cd       	sub	sp,48
800218a2:	1a 98       	mov	r8,sp
800218a4:	10 9b       	mov	r11,r8
800218a6:	ee ca 00 50 	sub	r10,r7,80
800218aa:	f6 c8 00 00 	sub	r8,r11,0
800218ae:	f4 c9 00 00 	sub	r9,r10,0
800218b2:	72 0e       	ld.w	lr,r9[0x0]
800218b4:	91 0e       	st.w	r8[0x0],lr
800218b6:	72 1e       	ld.w	lr,r9[0x4]
800218b8:	91 1e       	st.w	r8[0x4],lr
800218ba:	72 2e       	ld.w	lr,r9[0x8]
800218bc:	91 2e       	st.w	r8[0x8],lr
800218be:	72 39       	ld.w	r9,r9[0xc]
800218c0:	91 39       	st.w	r8[0xc],r9
800218c2:	f6 c8 ff f0 	sub	r8,r11,-16
800218c6:	f4 c9 ff f0 	sub	r9,r10,-16
800218ca:	72 0e       	ld.w	lr,r9[0x0]
800218cc:	91 0e       	st.w	r8[0x0],lr
800218ce:	72 1e       	ld.w	lr,r9[0x4]
800218d0:	91 1e       	st.w	r8[0x4],lr
800218d2:	72 2e       	ld.w	lr,r9[0x8]
800218d4:	91 2e       	st.w	r8[0x8],lr
800218d6:	72 39       	ld.w	r9,r9[0xc]
800218d8:	91 39       	st.w	r8[0xc],r9
800218da:	f6 c8 ff e0 	sub	r8,r11,-32
800218de:	f4 c9 ff e0 	sub	r9,r10,-32
800218e2:	72 0a       	ld.w	r10,r9[0x0]
800218e4:	91 0a       	st.w	r8[0x0],r10
800218e6:	72 1a       	ld.w	r10,r9[0x4]
800218e8:	91 1a       	st.w	r8[0x4],r10
800218ea:	72 2a       	ld.w	r10,r9[0x8]
800218ec:	91 2a       	st.w	r8[0x8],r10
800218ee:	72 39       	ld.w	r9,r9[0xc]
800218f0:	91 39       	st.w	r8[0xc],r9
800218f2:	f0 16 00 88 	mcall	r6[544]
800218f6:	2f 4d       	sub	sp,-48
800218f8:	ee ca 00 40 	sub	r10,r7,64
800218fc:	ee cb 00 a8 	sub	r11,r7,168
80021900:	f4 c8 00 00 	sub	r8,r10,0
80021904:	f6 c9 00 00 	sub	r9,r11,0
80021908:	72 0c       	ld.w	r12,r9[0x0]
8002190a:	91 0c       	st.w	r8[0x0],r12
8002190c:	72 1c       	ld.w	r12,r9[0x4]
8002190e:	91 1c       	st.w	r8[0x4],r12
80021910:	72 2c       	ld.w	r12,r9[0x8]
80021912:	91 2c       	st.w	r8[0x8],r12
80021914:	72 39       	ld.w	r9,r9[0xc]
80021916:	91 39       	st.w	r8[0xc],r9
80021918:	f6 e8 00 10 	ld.d	r8,r11[16]
8002191c:	f4 e9 00 10 	st.d	r10[16],r8
80021920:	76 68       	ld.w	r8,r11[0x18]
80021922:	95 68       	st.w	r10[0x18],r8
		break;
80021924:	cf b8       	rjmp	80021b1a <set_waypoint_from_frame+0x5a4>
		case MAV_FRAME_MISSION:
			//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_RESULT_UNSUPPORTED);
		break;
		case MAV_FRAME_GLOBAL_RELATIVE_ALT:
			waypoint_global.latitude = current_wp.x;
80021926:	ea e8 00 18 	ld.d	r8,r5[24]
8002192a:	ee e9 ff e8 	st.d	r7[-24],r8
			waypoint_global.longitude = current_wp.y;
8002192e:	ea e8 00 20 	ld.d	r8,r5[32]
80021932:	ee e9 ff e0 	st.d	r7[-32],r8
			waypoint_global.altitude = current_wp.z;
80021936:	ea e8 00 28 	ld.d	r8,r5[40]
8002193a:	10 9a       	mov	r10,r8
8002193c:	12 9b       	mov	r11,r9
8002193e:	f0 16 00 09 	mcall	r6[36]
80021942:	18 98       	mov	r8,r12
80021944:	ef 48 ff f0 	st.w	r7[-16],r8
		
			global_position_t origin_relative_alt = origin;
80021948:	ee ca 00 78 	sub	r10,r7,120
8002194c:	ea cb ff d0 	sub	r11,r5,-48
80021950:	f4 c8 00 00 	sub	r8,r10,0
80021954:	f6 c9 00 00 	sub	r9,r11,0
80021958:	72 0c       	ld.w	r12,r9[0x0]
8002195a:	91 0c       	st.w	r8[0x0],r12
8002195c:	72 1c       	ld.w	r12,r9[0x4]
8002195e:	91 1c       	st.w	r8[0x4],r12
80021960:	72 2c       	ld.w	r12,r9[0x8]
80021962:	91 2c       	st.w	r8[0x8],r12
80021964:	72 39       	ld.w	r9,r9[0xc]
80021966:	91 39       	st.w	r8[0xc],r9
80021968:	f6 e8 00 10 	ld.d	r8,r11[16]
8002196c:	f4 e9 00 10 	st.d	r10[16],r8
80021970:	76 68       	ld.w	r8,r11[0x18]
80021972:	95 68       	st.w	r10[0x18],r8
			origin_relative_alt.altitude = 0.0;
80021974:	30 08       	mov	r8,0
80021976:	ef 48 ff 98 	st.w	r7[-104],r8
			waypoint_coor = global_to_local_position(waypoint_global,origin_relative_alt);
8002197a:	ee cc 00 a8 	sub	r12,r7,168
8002197e:	20 7d       	sub	sp,28
80021980:	1a 98       	mov	r8,sp
80021982:	10 9a       	mov	r10,r8
80021984:	ee cb 00 78 	sub	r11,r7,120
80021988:	f4 c8 00 00 	sub	r8,r10,0
8002198c:	f6 c9 00 00 	sub	r9,r11,0
80021990:	72 0e       	ld.w	lr,r9[0x0]
80021992:	91 0e       	st.w	r8[0x0],lr
80021994:	72 1e       	ld.w	lr,r9[0x4]
80021996:	91 1e       	st.w	r8[0x4],lr
80021998:	72 2e       	ld.w	lr,r9[0x8]
8002199a:	91 2e       	st.w	r8[0x8],lr
8002199c:	72 39       	ld.w	r9,r9[0xc]
8002199e:	91 39       	st.w	r8[0xc],r9
800219a0:	f6 e8 00 10 	ld.d	r8,r11[16]
800219a4:	f4 e9 00 10 	st.d	r10[16],r8
800219a8:	76 68       	ld.w	r8,r11[0x18]
800219aa:	95 68       	st.w	r10[0x18],r8
800219ac:	20 7d       	sub	sp,28
800219ae:	1a 98       	mov	r8,sp
800219b0:	10 9a       	mov	r10,r8
800219b2:	ee cb 00 20 	sub	r11,r7,32
800219b6:	f4 c8 00 00 	sub	r8,r10,0
800219ba:	f6 c9 00 00 	sub	r9,r11,0
800219be:	72 0e       	ld.w	lr,r9[0x0]
800219c0:	91 0e       	st.w	r8[0x0],lr
800219c2:	72 1e       	ld.w	lr,r9[0x4]
800219c4:	91 1e       	st.w	r8[0x4],lr
800219c6:	72 2e       	ld.w	lr,r9[0x8]
800219c8:	91 2e       	st.w	r8[0x8],lr
800219ca:	72 39       	ld.w	r9,r9[0xc]
800219cc:	91 39       	st.w	r8[0xc],r9
800219ce:	f6 e8 00 10 	ld.d	r8,r11[16]
800219d2:	f4 e9 00 10 	st.d	r10[16],r8
800219d6:	76 68       	ld.w	r8,r11[0x18]
800219d8:	95 68       	st.w	r10[0x18],r8
800219da:	f0 16 00 7a 	mcall	r6[488]
800219de:	2f 2d       	sub	sp,-56
800219e0:	ee cb 00 50 	sub	r11,r7,80
800219e4:	ee ca 00 a8 	sub	r10,r7,168
800219e8:	f6 c8 00 00 	sub	r8,r11,0
800219ec:	f4 c9 00 00 	sub	r9,r10,0
800219f0:	72 0c       	ld.w	r12,r9[0x0]
800219f2:	91 0c       	st.w	r8[0x0],r12
800219f4:	72 1c       	ld.w	r12,r9[0x4]
800219f6:	91 1c       	st.w	r8[0x4],r12
800219f8:	72 2c       	ld.w	r12,r9[0x8]
800219fa:	91 2c       	st.w	r8[0x8],r12
800219fc:	72 39       	ld.w	r9,r9[0xc]
800219fe:	91 39       	st.w	r8[0xc],r9
80021a00:	f6 c8 ff f0 	sub	r8,r11,-16
80021a04:	f4 c9 ff f0 	sub	r9,r10,-16
80021a08:	72 0c       	ld.w	r12,r9[0x0]
80021a0a:	91 0c       	st.w	r8[0x0],r12
80021a0c:	72 1c       	ld.w	r12,r9[0x4]
80021a0e:	91 1c       	st.w	r8[0x4],r12
80021a10:	72 2c       	ld.w	r12,r9[0x8]
80021a12:	91 2c       	st.w	r8[0x8],r12
80021a14:	72 39       	ld.w	r9,r9[0xc]
80021a16:	91 39       	st.w	r8[0xc],r9
80021a18:	f6 c8 ff e0 	sub	r8,r11,-32
80021a1c:	f4 c9 ff e0 	sub	r9,r10,-32
80021a20:	72 0a       	ld.w	r10,r9[0x0]
80021a22:	91 0a       	st.w	r8[0x0],r10
80021a24:	72 1a       	ld.w	r10,r9[0x4]
80021a26:	91 1a       	st.w	r8[0x4],r10
80021a28:	72 2a       	ld.w	r10,r9[0x8]
80021a2a:	91 2a       	st.w	r8[0x8],r10
80021a2c:	72 39       	ld.w	r9,r9[0xc]
80021a2e:	91 39       	st.w	r8[0xc],r9
		
			dbg_print("LocalOrigin: lat (x1e7):");
80021a30:	fe cc 04 ec 	sub	r12,pc,1260
80021a34:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin_relative_alt.latitude * 10000000,10);
80021a38:	ee ea ff 90 	ld.d	r10,r7[-112]
80021a3c:	30 08       	mov	r8,0
80021a3e:	e0 69 12 d0 	mov	r9,4816
80021a42:	ea 19 41 63 	orh	r9,0x4163
80021a46:	f0 16 00 03 	mcall	r6[12]
80021a4a:	14 98       	mov	r8,r10
80021a4c:	16 99       	mov	r9,r11
80021a4e:	10 9a       	mov	r10,r8
80021a50:	12 9b       	mov	r11,r9
80021a52:	f0 16 00 14 	mcall	r6[80]
80021a56:	18 98       	mov	r8,r12
80021a58:	30 ab       	mov	r11,10
80021a5a:	10 9c       	mov	r12,r8
80021a5c:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" long (x1e7):");
80021a60:	fe cc 05 84 	sub	r12,pc,1412
80021a64:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin_relative_alt.longitude * 10000000,10);
80021a68:	ee ea ff 88 	ld.d	r10,r7[-120]
80021a6c:	30 08       	mov	r8,0
80021a6e:	e0 69 12 d0 	mov	r9,4816
80021a72:	ea 19 41 63 	orh	r9,0x4163
80021a76:	f0 16 00 03 	mcall	r6[12]
80021a7a:	14 98       	mov	r8,r10
80021a7c:	16 99       	mov	r9,r11
80021a7e:	10 9a       	mov	r10,r8
80021a80:	12 9b       	mov	r11,r9
80021a82:	f0 16 00 14 	mcall	r6[80]
80021a86:	18 98       	mov	r8,r12
80021a88:	30 ab       	mov	r11,10
80021a8a:	10 9c       	mov	r12,r8
80021a8c:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" global alt (x1000):");
80021a90:	fe cc 05 30 	sub	r12,pc,1328
80021a94:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.altitude*1000,10);
80021a98:	6b 09       	ld.w	r9,r5[0x40]
80021a9a:	fc 18 44 7a 	movh	r8,0x447a
80021a9e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80021aa2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021aa6:	30 ab       	mov	r11,10
80021aa8:	10 9c       	mov	r12,r8
80021aaa:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" wp_coor: x (x100):");
80021aae:	fe cc 05 b2 	sub	r12,pc,1458
80021ab2:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[X]*100,10);
80021ab6:	ee f9 ff b0 	ld.w	r9,r7[-80]
80021aba:	fc 18 42 c8 	movh	r8,0x42c8
80021abe:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80021ac2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021ac6:	30 ab       	mov	r11,10
80021ac8:	10 9c       	mov	r12,r8
80021aca:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", y (x100):");
80021ace:	fe cc 05 be 	sub	r12,pc,1470
80021ad2:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Y]*100,10);
80021ad6:	ee f9 ff b4 	ld.w	r9,r7[-76]
80021ada:	fc 18 42 c8 	movh	r8,0x42c8
80021ade:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80021ae2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021ae6:	30 ab       	mov	r11,10
80021ae8:	10 9c       	mov	r12,r8
80021aea:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", z (x100):");
80021aee:	fe cc 05 d2 	sub	r12,pc,1490
80021af2:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Z]*100,10);
80021af6:	ee f9 ff b8 	ld.w	r9,r7[-72]
80021afa:	fc 18 42 c8 	movh	r8,0x42c8
80021afe:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80021b02:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021b06:	30 ab       	mov	r11,10
80021b08:	10 9c       	mov	r12,r8
80021b0a:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80021b0e:	fe cc 17 46 	sub	r12,pc,5958
80021b12:	f0 16 00 01 	mcall	r6[4]
80021b16:	c0 28       	rjmp	80021b1a <set_waypoint_from_frame+0x5a4>
			waypoint_coor.heading= deg_to_rad(current_wp.param4);
			waypoint_coor.origin = local_to_global_position(waypoint_coor);
		break;
		case MAV_FRAME_MISSION:
			//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_RESULT_UNSUPPORTED);
		break;
80021b18:	d7 03       	nop
		case MAV_FRAME_LOCAL_ENU:
			//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_RESULT_UNSUPPORTED);
		break;
	}
	
	return waypoint_coor;
80021b1a:	06 9b       	mov	r11,r3
80021b1c:	ee ca 00 50 	sub	r10,r7,80
80021b20:	f6 c8 00 00 	sub	r8,r11,0
80021b24:	f4 c9 00 00 	sub	r9,r10,0
80021b28:	72 0c       	ld.w	r12,r9[0x0]
80021b2a:	91 0c       	st.w	r8[0x0],r12
80021b2c:	72 1c       	ld.w	r12,r9[0x4]
80021b2e:	91 1c       	st.w	r8[0x4],r12
80021b30:	72 2c       	ld.w	r12,r9[0x8]
80021b32:	91 2c       	st.w	r8[0x8],r12
80021b34:	72 39       	ld.w	r9,r9[0xc]
80021b36:	91 39       	st.w	r8[0xc],r9
80021b38:	f6 c8 ff f0 	sub	r8,r11,-16
80021b3c:	f4 c9 ff f0 	sub	r9,r10,-16
80021b40:	72 0c       	ld.w	r12,r9[0x0]
80021b42:	91 0c       	st.w	r8[0x0],r12
80021b44:	72 1c       	ld.w	r12,r9[0x4]
80021b46:	91 1c       	st.w	r8[0x4],r12
80021b48:	72 2c       	ld.w	r12,r9[0x8]
80021b4a:	91 2c       	st.w	r8[0x8],r12
80021b4c:	72 39       	ld.w	r9,r9[0xc]
80021b4e:	91 39       	st.w	r8[0xc],r9
80021b50:	f6 c8 ff e0 	sub	r8,r11,-32
80021b54:	f4 c9 ff e0 	sub	r9,r10,-32
80021b58:	72 0a       	ld.w	r10,r9[0x0]
80021b5a:	91 0a       	st.w	r8[0x0],r10
80021b5c:	72 1a       	ld.w	r10,r9[0x4]
80021b5e:	91 1a       	st.w	r8[0x4],r10
80021b60:	72 2a       	ld.w	r10,r9[0x8]
80021b62:	91 2a       	st.w	r8[0x8],r10
80021b64:	72 39       	ld.w	r9,r9[0xc]
80021b66:	91 39       	st.w	r8[0xc],r9
}
80021b68:	06 9c       	mov	r12,r3
80021b6a:	2d 6d       	sub	sp,-168
80021b6c:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80021b70:	80 02       	ld.sh	r2,r0[0x0]
80021b72:	14 08       	add	r8,r10
80021b74:	50 6f       	stdsp	sp[0x18],pc
80021b76:	73 69       	ld.w	r9,r9[0x58]
80021b78:	74 69       	ld.w	r9,r10[0x18]
80021b7a:	6f 6e       	ld.w	lr,r7[0x58]
80021b7c:	20 68       	sub	r8,6
80021b7e:	6f 6c       	ld.w	r12,r7[0x58]
80021b80:	64 20       	ld.w	r0,r2[0x8]
80021b82:	61 74       	ld.w	r4,r0[0x5c]
80021b84:	3a 20       	mov	r0,-94
80021b86:	00 00       	add	r0,r0
80021b88:	29 0a       	sub	r10,-112
	...

80021b8c <wp_hold_init>:

void wp_hold_init()
{
80021b8c:	eb cd 40 c0 	pushm	r6-r7,lr
80021b90:	1a 97       	mov	r7,sp
80021b92:	20 3d       	sub	sp,12
80021b94:	4d 86       	lddpc	r6,80021cf4 <wp_hold_init+0x168>
80021b96:	1e 26       	rsub	r6,pc
	if (centralData->waypoint_hold_init == 0)
80021b98:	ec f8 00 00 	ld.w	r8,r6[0]
80021b9c:	70 08       	ld.w	r8,r8[0x0]
80021b9e:	f1 38 10 b7 	ld.ub	r8,r8[4279]
80021ba2:	ec 18 00 01 	eorl	r8,0x1
80021ba6:	5c 58       	castu.b	r8
80021ba8:	e0 80 00 a3 	breq	80021cee <wp_hold_init+0x162>
	{
		dbg_print("Position hold at: ");
80021bac:	fe cc 00 38 	sub	r12,pc,56
80021bb0:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(centralData->position_estimator.localPosition.pos[X],10);
80021bb4:	ec f8 00 00 	ld.w	r8,r6[0]
80021bb8:	70 08       	ld.w	r8,r8[0x0]
80021bba:	f0 f8 0d 9c 	ld.w	r8,r8[3484]
80021bbe:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021bc2:	30 ab       	mov	r11,10
80021bc4:	10 9c       	mov	r12,r8
80021bc6:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(centralData->position_estimator.localPosition.pos[Y],10);
80021bca:	ec f8 00 00 	ld.w	r8,r6[0]
80021bce:	70 08       	ld.w	r8,r8[0x0]
80021bd0:	f0 f8 0d a0 	ld.w	r8,r8[3488]
80021bd4:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021bd8:	30 ab       	mov	r11,10
80021bda:	10 9c       	mov	r12,r8
80021bdc:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(centralData->position_estimator.localPosition.pos[Z],10);
80021be0:	ec f8 00 00 	ld.w	r8,r6[0]
80021be4:	70 08       	ld.w	r8,r8[0x0]
80021be6:	f0 f8 0d a4 	ld.w	r8,r8[3492]
80021bea:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021bee:	30 ab       	mov	r11,10
80021bf0:	10 9c       	mov	r12,r8
80021bf2:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num((int)(centralData->position_estimator.localPosition.heading*180.0/3.14),10);
80021bf6:	ec f8 00 00 	ld.w	r8,r6[0]
80021bfa:	70 08       	ld.w	r8,r8[0x0]
80021bfc:	f0 f8 0d a8 	ld.w	r8,r8[3496]
80021c00:	10 9c       	mov	r12,r8
80021c02:	f0 16 00 02 	mcall	r6[8]
80021c06:	30 08       	mov	r8,0
80021c08:	e0 69 80 00 	mov	r9,32768
80021c0c:	ea 19 40 66 	orh	r9,0x4066
80021c10:	f0 16 00 03 	mcall	r6[12]
80021c14:	14 98       	mov	r8,r10
80021c16:	16 99       	mov	r9,r11
80021c18:	10 9a       	mov	r10,r8
80021c1a:	12 9b       	mov	r11,r9
80021c1c:	e0 68 85 1f 	mov	r8,34079
80021c20:	ea 18 51 eb 	orh	r8,0x51eb
80021c24:	e0 69 1e b8 	mov	r9,7864
80021c28:	ea 19 40 09 	orh	r9,0x4009
80021c2c:	f0 16 00 0c 	mcall	r6[48]
80021c30:	14 98       	mov	r8,r10
80021c32:	16 99       	mov	r9,r11
80021c34:	10 9a       	mov	r10,r8
80021c36:	12 9b       	mov	r11,r9
80021c38:	f0 16 00 14 	mcall	r6[80]
80021c3c:	18 98       	mov	r8,r12
80021c3e:	30 ab       	mov	r11,10
80021c40:	10 9c       	mov	r12,r8
80021c42:	f0 16 00 04 	mcall	r6[16]
		dbg_print(")\n");
80021c46:	fe cc 00 be 	sub	r12,pc,190
80021c4a:	f0 16 00 01 	mcall	r6[4]
		
		centralData->waypoint_hold_init = true;
80021c4e:	ec f8 00 00 	ld.w	r8,r6[0]
80021c52:	70 09       	ld.w	r9,r8[0x0]
80021c54:	30 18       	mov	r8,1
80021c56:	f3 68 10 b7 	st.b	r9[4279],r8
		centralData->waypoint_hold_coordinates = centralData->position_estimator.localPosition;
80021c5a:	ec f8 00 00 	ld.w	r8,r6[0]
80021c5e:	70 09       	ld.w	r9,r8[0x0]
80021c60:	ec f8 00 00 	ld.w	r8,r6[0]
80021c64:	70 08       	ld.w	r8,r8[0x0]
80021c66:	f2 cb ef b0 	sub	r11,r9,-4176
80021c6a:	f0 ca f2 64 	sub	r10,r8,-3484
80021c6e:	f6 c8 00 00 	sub	r8,r11,0
80021c72:	f4 c9 00 00 	sub	r9,r10,0
80021c76:	72 0c       	ld.w	r12,r9[0x0]
80021c78:	91 0c       	st.w	r8[0x0],r12
80021c7a:	72 1c       	ld.w	r12,r9[0x4]
80021c7c:	91 1c       	st.w	r8[0x4],r12
80021c7e:	72 2c       	ld.w	r12,r9[0x8]
80021c80:	91 2c       	st.w	r8[0x8],r12
80021c82:	72 39       	ld.w	r9,r9[0xc]
80021c84:	91 39       	st.w	r8[0xc],r9
80021c86:	f6 c8 ff f0 	sub	r8,r11,-16
80021c8a:	f4 c9 ff f0 	sub	r9,r10,-16
80021c8e:	72 0c       	ld.w	r12,r9[0x0]
80021c90:	91 0c       	st.w	r8[0x0],r12
80021c92:	72 1c       	ld.w	r12,r9[0x4]
80021c94:	91 1c       	st.w	r8[0x4],r12
80021c96:	72 2c       	ld.w	r12,r9[0x8]
80021c98:	91 2c       	st.w	r8[0x8],r12
80021c9a:	72 39       	ld.w	r9,r9[0xc]
80021c9c:	91 39       	st.w	r8[0xc],r9
80021c9e:	f6 c8 ff e0 	sub	r8,r11,-32
80021ca2:	f4 c9 ff e0 	sub	r9,r10,-32
80021ca6:	72 0a       	ld.w	r10,r9[0x0]
80021ca8:	91 0a       	st.w	r8[0x0],r10
80021caa:	72 1a       	ld.w	r10,r9[0x4]
80021cac:	91 1a       	st.w	r8[0x4],r10
80021cae:	72 2a       	ld.w	r10,r9[0x8]
80021cb0:	91 2a       	st.w	r8[0x8],r10
80021cb2:	72 39       	ld.w	r9,r9[0xc]
80021cb4:	91 39       	st.w	r8[0xc],r9
		
		Aero_Attitude_t aero_attitude;
		aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
80021cb6:	ec f8 00 00 	ld.w	r8,r6[0]
80021cba:	70 09       	ld.w	r9,r8[0x0]
80021cbc:	ee ca 00 0c 	sub	r10,r7,12
80021cc0:	20 4d       	sub	sp,16
80021cc2:	1a 98       	mov	r8,sp
80021cc4:	20 08       	sub	r8,0
80021cc6:	20 09       	sub	r9,0
80021cc8:	72 0b       	ld.w	r11,r9[0x0]
80021cca:	91 0b       	st.w	r8[0x0],r11
80021ccc:	72 1b       	ld.w	r11,r9[0x4]
80021cce:	91 1b       	st.w	r8[0x4],r11
80021cd0:	72 2b       	ld.w	r11,r9[0x8]
80021cd2:	91 2b       	st.w	r8[0x8],r11
80021cd4:	72 39       	ld.w	r9,r9[0xc]
80021cd6:	91 39       	st.w	r8[0xc],r9
80021cd8:	14 9c       	mov	r12,r10
80021cda:	f0 16 00 6d 	mcall	r6[436]
80021cde:	2f cd       	sub	sp,-16
		centralData->waypoint_hold_coordinates.heading = aero_attitude.rpy[2];
80021ce0:	ec f8 00 00 	ld.w	r8,r6[0]
80021ce4:	70 08       	ld.w	r8,r8[0x0]
80021ce6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80021cea:	f1 49 10 5c 	st.w	r8[4188],r9
	}
}
80021cee:	2f dd       	sub	sp,-12
80021cf0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80021cf4:	80 02       	ld.sh	r2,r0[0x0]
80021cf6:	1a 1a       	sub	r10,sp

80021cf8 <waypoint_hold_position_handler>:

void waypoint_hold_position_handler()
{
80021cf8:	eb cd 40 c0 	pushm	r6-r7,lr
80021cfc:	1a 97       	mov	r7,sp
80021cfe:	48 96       	lddpc	r6,80021d20 <waypoint_hold_position_handler+0x28>
80021d00:	1e 26       	rsub	r6,pc
	if (!centralData->waypoint_set)
80021d02:	ec f8 00 00 	ld.w	r8,r6[0]
80021d06:	70 08       	ld.w	r8,r8[0x0]
80021d08:	f1 38 10 b4 	ld.ub	r8,r8[4276]
80021d0c:	ec 18 00 01 	eorl	r8,0x1
80021d10:	5c 58       	castu.b	r8
80021d12:	c0 30       	breq	80021d18 <waypoint_hold_position_handler+0x20>
	{
		init_wp();
80021d14:	f0 16 00 8d 	mcall	r6[564]
	}
	wp_hold_init();
80021d18:	f0 16 00 b2 	mcall	r6[712]
}
80021d1c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80021d20:	80 02       	ld.sh	r2,r0[0x0]
80021d22:	1b 84       	ld.ub	r4,sp[0x0]
80021d24:	20 72       	sub	r2,7
80021d26:	65 61       	ld.w	r1,r2[0x58]
80021d28:	63 68       	ld.w	r8,r1[0x58]
80021d2a:	65 64       	ld.w	r4,r2[0x58]
80021d2c:	2c 20       	sub	r0,-62
80021d2e:	64 69       	ld.w	r9,r2[0x18]
80021d30:	73 74       	ld.w	r4,r9[0x5c]
80021d32:	61 6e       	ld.w	lr,r0[0x58]
80021d34:	63 65       	ld.w	r5,r1[0x58]
80021d36:	3a 00       	mov	r0,-96
80021d38:	20 6c       	sub	r12,6
80021d3a:	65 73       	ld.w	r3,r2[0x5c]
80021d3c:	73 20       	ld.w	r0,r9[0x48]
80021d3e:	74 68       	ld.w	r8,r10[0x18]
80021d40:	61 6e       	ld.w	lr,r0[0x58]
80021d42:	20 3a       	sub	r10,3
80021d44:	00 00       	add	r0,r0
80021d46:	00 00       	add	r0,r0
80021d48:	2e 0a       	sub	r10,-32
80021d4a:	00 00       	add	r0,r0
80021d4c:	41 75       	lddsp	r5,sp[0x5c]
80021d4e:	74 6f       	ld.w	pc,r10[0x18]
80021d50:	63 6f       	ld.w	pc,r1[0x58]
80021d52:	6e 74       	ld.w	r4,r7[0x1c]
80021d54:	69 6e       	ld.w	lr,r4[0x58]
80021d56:	75 65       	ld.w	r5,r10[0x58]
80021d58:	20 74       	sub	r4,7
80021d5a:	6f 77       	ld.w	r7,r7[0x5c]
80021d5c:	61 72       	ld.w	r2,r0[0x5c]
80021d5e:	64 73       	ld.w	r3,r2[0x1c]
80021d60:	20 77       	sub	r7,7
80021d62:	61 79       	ld.w	r9,r0[0x5c]
80021d64:	70 6f       	ld.w	pc,r8[0x18]
80021d66:	69 6e       	ld.w	lr,r4[0x58]
80021d68:	74 20       	ld.w	r0,r10[0x8]
80021d6a:	4e 72       	lddpc	r2,80021f04 <waypoint_navigation_handler+0x18e>
80021d6c:	00 00       	add	r0,r0
80021d6e:	00 00       	add	r0,r0
80021d70:	53 74       	stdsp	sp[0xdc],r4
80021d72:	6f 70       	ld.w	r0,r7[0x5c]
80021d74:	0a 00       	add	r0,r5

80021d76 <waypoint_navigation_handler>:

void waypoint_navigation_handler()
{
80021d76:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80021d7a:	1a 97       	mov	r7,sp
80021d7c:	21 0d       	sub	sp,64
80021d7e:	fe f6 03 ba 	ld.w	r6,pc[954]
80021d82:	1e 26       	rsub	r6,pc

	if (centralData->waypoint_set)
80021d84:	ec f8 00 00 	ld.w	r8,r6[0]
80021d88:	70 08       	ld.w	r8,r8[0x0]
80021d8a:	f1 38 10 b4 	ld.ub	r8,r8[4276]
80021d8e:	58 08       	cp.w	r8,0
80021d90:	e0 80 01 cd 	breq	8002212a <waypoint_navigation_handler+0x3b4>
	{
		uint8_t i;
		float rel_pos[3];
		for (i=0;i<3;i++)
80021d94:	30 08       	mov	r8,0
80021d96:	ef 68 ff ff 	st.b	r7[-1],r8
80021d9a:	c2 18       	rjmp	80021ddc <waypoint_navigation_handler+0x66>
		{
			rel_pos[i] = centralData->waypoint_coordinates.pos[i]-centralData->position_estimator.localPosition.pos[i];
80021d9c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80021da0:	ec f9 00 00 	ld.w	r9,r6[0]
80021da4:	72 09       	ld.w	r9,r9[0x0]
80021da6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80021daa:	f4 ca fb f8 	sub	r10,r10,-1032
80021dae:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80021db2:	ec f9 00 00 	ld.w	r9,r6[0]
80021db6:	72 09       	ld.w	r9,r9[0x0]
80021db8:	ef 3b ff ff 	ld.ub	r11,r7[-1]
80021dbc:	f6 cb fc 99 	sub	r11,r11,-871
80021dc0:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80021dc4:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80021dc8:	a3 68       	lsl	r8,0x2
80021dca:	ee 08 00 08 	add	r8,r7,r8
80021dce:	f1 49 ff f0 	st.w	r8[-16],r9

	if (centralData->waypoint_set)
	{
		uint8_t i;
		float rel_pos[3];
		for (i=0;i<3;i++)
80021dd2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80021dd6:	2f f8       	sub	r8,-1
80021dd8:	ef 68 ff ff 	st.b	r7[-1],r8
80021ddc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80021de0:	30 28       	mov	r8,2
80021de2:	f0 09 18 00 	cp.b	r9,r8
80021de6:	fe 98 ff db 	brls	80021d9c <waypoint_navigation_handler+0x26>
		{
			rel_pos[i] = centralData->waypoint_coordinates.pos[i]-centralData->position_estimator.localPosition.pos[i];
		}
		centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
80021dea:	ec f8 00 00 	ld.w	r8,r6[0]
80021dee:	70 05       	ld.w	r5,r8[0x0]
80021df0:	ee c8 00 10 	sub	r8,r7,16
80021df4:	10 9c       	mov	r12,r8
80021df6:	fe b0 f0 91 	rcall	8001ff18 <vector_norm_sqr>
80021dfa:	18 98       	mov	r8,r12
80021dfc:	eb 48 10 b0 	st.w	r5[4272],r8
		
		if (centralData->dist2wp_sqr < (centralData->current_waypoint.param2*centralData->current_waypoint.param2))
80021e00:	ec f8 00 00 	ld.w	r8,r6[0]
80021e04:	70 08       	ld.w	r8,r8[0x0]
80021e06:	f0 fa 10 b0 	ld.w	r10,r8[4272]
80021e0a:	ec f8 00 00 	ld.w	r8,r6[0]
80021e0e:	70 08       	ld.w	r8,r8[0x0]
80021e10:	f0 f9 0f f8 	ld.w	r9,r8[4088]
80021e14:	ec f8 00 00 	ld.w	r8,r6[0]
80021e18:	70 08       	ld.w	r8,r8[0x0]
80021e1a:	f0 f8 0f f8 	ld.w	r8,r8[4088]
80021e1e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80021e22:	30 18       	mov	r8,1
80021e24:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80021e28:	e0 8c 00 03 	brvs	80021e2e <waypoint_navigation_handler+0xb8>
80021e2c:	c0 25       	brlt	80021e30 <waypoint_navigation_handler+0xba>
80021e2e:	30 08       	mov	r8,0
80021e30:	5c 58       	castu.b	r8
80021e32:	e0 80 01 80 	breq	80022132 <waypoint_navigation_handler+0x3bc>
		{
			dbg_print("Waypoint Nr");
80021e36:	fe cc 1d a6 	sub	r12,pc,7590
80021e3a:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(centralData->current_wp_count,10);
80021e3e:	ec f8 00 00 	ld.w	r8,r6[0]
80021e42:	70 08       	ld.w	r8,r8[0x0]
80021e44:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80021e48:	5c 68       	casts.b	r8
80021e4a:	30 ab       	mov	r11,10
80021e4c:	10 9c       	mov	r12,r8
80021e4e:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" reached, distance:");
80021e52:	fe cc 01 2e 	sub	r12,pc,302
80021e56:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(sqrt(centralData->dist2wp_sqr),10);
80021e5a:	ec f8 00 00 	ld.w	r8,r6[0]
80021e5e:	70 08       	ld.w	r8,r8[0x0]
80021e60:	f0 f8 10 b0 	ld.w	r8,r8[4272]
80021e64:	10 9c       	mov	r12,r8
80021e66:	f0 16 00 02 	mcall	r6[8]
80021e6a:	14 98       	mov	r8,r10
80021e6c:	16 99       	mov	r9,r11
80021e6e:	10 9a       	mov	r10,r8
80021e70:	12 9b       	mov	r11,r9
80021e72:	f0 16 00 6b 	mcall	r6[428]
80021e76:	14 98       	mov	r8,r10
80021e78:	16 99       	mov	r9,r11
80021e7a:	10 9a       	mov	r10,r8
80021e7c:	12 9b       	mov	r11,r9
80021e7e:	f0 16 00 14 	mcall	r6[80]
80021e82:	18 98       	mov	r8,r12
80021e84:	30 ab       	mov	r11,10
80021e86:	10 9c       	mov	r12,r8
80021e88:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" less than :");
80021e8c:	fe cc 01 54 	sub	r12,pc,340
80021e90:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(centralData->current_waypoint.param2,10);
80021e94:	ec f8 00 00 	ld.w	r8,r6[0]
80021e98:	70 08       	ld.w	r8,r8[0x0]
80021e9a:	f0 f8 0f f8 	ld.w	r8,r8[4088]
80021e9e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021ea2:	30 ab       	mov	r11,10
80021ea4:	10 9c       	mov	r12,r8
80021ea6:	f0 16 00 04 	mcall	r6[16]
			dbg_print(".\n");
80021eaa:	fe cc 01 62 	sub	r12,pc,354
80021eae:	f0 16 00 01 	mcall	r6[4]
			mavlink_msg_mission_item_reached_send(MAVLINK_COMM_0,centralData->current_wp_count);
80021eb2:	ec f8 00 00 	ld.w	r8,r6[0]
80021eb6:	70 08       	ld.w	r8,r8[0x0]
80021eb8:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80021ebc:	5c 68       	casts.b	r8
80021ebe:	5c 88       	casts.h	r8
80021ec0:	5c 78       	castu.h	r8
80021ec2:	10 9b       	mov	r11,r8
80021ec4:	30 0c       	mov	r12,0
80021ec6:	fe b0 ef 5b 	rcall	8001fd7c <mavlink_msg_mission_item_reached_send>
			
			centralData->waypoint_list[centralData->current_wp_count].current = 0;
80021eca:	ec f8 00 00 	ld.w	r8,r6[0]
80021ece:	70 0a       	ld.w	r10,r8[0x0]
80021ed0:	ec f8 00 00 	ld.w	r8,r6[0]
80021ed4:	70 08       	ld.w	r8,r8[0x0]
80021ed6:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80021eda:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80021ede:	12 98       	mov	r8,r9
80021ee0:	a1 78       	lsl	r8,0x1
80021ee2:	12 08       	add	r8,r9
80021ee4:	a5 68       	lsl	r8,0x4
80021ee6:	f4 08 00 08 	add	r8,r10,r8
80021eea:	f0 c9 f1 f0 	sub	r9,r8,-3600
80021eee:	30 08       	mov	r8,0
80021ef0:	b2 88       	st.b	r9[0x0],r8
			if (centralData->current_waypoint.autocontinue == 1)
80021ef2:	ec f8 00 00 	ld.w	r8,r6[0]
80021ef6:	70 08       	ld.w	r8,r8[0x0]
80021ef8:	f1 39 0f f1 	ld.ub	r9,r8[4081]
80021efc:	30 18       	mov	r8,1
80021efe:	f0 09 18 00 	cp.b	r9,r8
80021f02:	e0 81 01 07 	brne	80022110 <waypoint_navigation_handler+0x39a>
			{
				dbg_print("Autocontinue towards waypoint Nr");
80021f06:	fe cc 01 ba 	sub	r12,pc,442
80021f0a:	f0 16 00 01 	mcall	r6[4]
				
				if (centralData->current_wp_count == (centralData->number_of_waypoints-1))
80021f0e:	ec f8 00 00 	ld.w	r8,r6[0]
80021f12:	70 08       	ld.w	r8,r8[0x0]
80021f14:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80021f18:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80021f1c:	ec f8 00 00 	ld.w	r8,r6[0]
80021f20:	70 08       	ld.w	r8,r8[0x0]
80021f22:	f1 08 10 1c 	ld.sh	r8,r8[4124]
80021f26:	5c 78       	castu.h	r8
80021f28:	20 18       	sub	r8,1
80021f2a:	10 39       	cp.w	r9,r8
80021f2c:	c0 81       	brne	80021f3c <waypoint_navigation_handler+0x1c6>
				{
					centralData->current_wp_count = 0;
80021f2e:	ec f8 00 00 	ld.w	r8,r6[0]
80021f32:	70 09       	ld.w	r9,r8[0x0]
80021f34:	30 08       	mov	r8,0
80021f36:	f3 68 10 1e 	st.b	r9[4126],r8
80021f3a:	c0 a8       	rjmp	80021f4e <waypoint_navigation_handler+0x1d8>
					}else{
					centralData->current_wp_count++;
80021f3c:	ec f8 00 00 	ld.w	r8,r6[0]
80021f40:	70 08       	ld.w	r8,r8[0x0]
80021f42:	f1 39 10 1e 	ld.ub	r9,r8[4126]
80021f46:	2f f9       	sub	r9,-1
80021f48:	5c 59       	castu.b	r9
80021f4a:	f1 69 10 1e 	st.b	r8[4126],r9
				}
				dbg_print_num(centralData->current_wp_count,10);
80021f4e:	ec f8 00 00 	ld.w	r8,r6[0]
80021f52:	70 08       	ld.w	r8,r8[0x0]
80021f54:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80021f58:	5c 68       	casts.b	r8
80021f5a:	30 ab       	mov	r11,10
80021f5c:	10 9c       	mov	r12,r8
80021f5e:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
80021f62:	fe cc 1b 9a 	sub	r12,pc,7066
80021f66:	f0 16 00 01 	mcall	r6[4]
				centralData->waypoint_list[centralData->current_wp_count].current = 1;
80021f6a:	ec f8 00 00 	ld.w	r8,r6[0]
80021f6e:	70 0a       	ld.w	r10,r8[0x0]
80021f70:	ec f8 00 00 	ld.w	r8,r6[0]
80021f74:	70 08       	ld.w	r8,r8[0x0]
80021f76:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80021f7a:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80021f7e:	12 98       	mov	r8,r9
80021f80:	a1 78       	lsl	r8,0x1
80021f82:	12 08       	add	r8,r9
80021f84:	a5 68       	lsl	r8,0x4
80021f86:	f4 08 00 08 	add	r8,r10,r8
80021f8a:	f0 c9 f1 f0 	sub	r9,r8,-3600
80021f8e:	30 18       	mov	r8,1
80021f90:	b2 88       	st.b	r9[0x0],r8
				centralData->current_waypoint = centralData->waypoint_list[centralData->current_wp_count];
80021f92:	ec f8 00 00 	ld.w	r8,r6[0]
80021f96:	70 0a       	ld.w	r10,r8[0x0]
80021f98:	ec f8 00 00 	ld.w	r8,r6[0]
80021f9c:	70 0b       	ld.w	r11,r8[0x0]
80021f9e:	ec f8 00 00 	ld.w	r8,r6[0]
80021fa2:	70 08       	ld.w	r8,r8[0x0]
80021fa4:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80021fa8:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80021fac:	12 98       	mov	r8,r9
80021fae:	a1 78       	lsl	r8,0x1
80021fb0:	12 08       	add	r8,r9
80021fb2:	a5 68       	lsl	r8,0x4
80021fb4:	f6 08 00 08 	add	r8,r11,r8
80021fb8:	f0 c8 f1 f4 	sub	r8,r8,-3596
80021fbc:	f4 cb f0 14 	sub	r11,r10,-4076
80021fc0:	10 9a       	mov	r10,r8
80021fc2:	f6 c8 00 00 	sub	r8,r11,0
80021fc6:	f4 c9 00 00 	sub	r9,r10,0
80021fca:	72 0c       	ld.w	r12,r9[0x0]
80021fcc:	91 0c       	st.w	r8[0x0],r12
80021fce:	72 1c       	ld.w	r12,r9[0x4]
80021fd0:	91 1c       	st.w	r8[0x4],r12
80021fd2:	72 2c       	ld.w	r12,r9[0x8]
80021fd4:	91 2c       	st.w	r8[0x8],r12
80021fd6:	72 39       	ld.w	r9,r9[0xc]
80021fd8:	91 39       	st.w	r8[0xc],r9
80021fda:	f6 c8 ff f0 	sub	r8,r11,-16
80021fde:	f4 c9 ff f0 	sub	r9,r10,-16
80021fe2:	72 0c       	ld.w	r12,r9[0x0]
80021fe4:	91 0c       	st.w	r8[0x0],r12
80021fe6:	72 1c       	ld.w	r12,r9[0x4]
80021fe8:	91 1c       	st.w	r8[0x4],r12
80021fea:	72 2c       	ld.w	r12,r9[0x8]
80021fec:	91 2c       	st.w	r8[0x8],r12
80021fee:	72 39       	ld.w	r9,r9[0xc]
80021ff0:	91 39       	st.w	r8[0xc],r9
80021ff2:	f6 c8 ff e0 	sub	r8,r11,-32
80021ff6:	f4 c9 ff e0 	sub	r9,r10,-32
80021ffa:	72 0a       	ld.w	r10,r9[0x0]
80021ffc:	91 0a       	st.w	r8[0x0],r10
80021ffe:	72 1a       	ld.w	r10,r9[0x4]
80022000:	91 1a       	st.w	r8[0x4],r10
80022002:	72 2a       	ld.w	r10,r9[0x8]
80022004:	91 2a       	st.w	r8[0x8],r10
80022006:	72 39       	ld.w	r9,r9[0xc]
80022008:	91 39       	st.w	r8[0xc],r9
				centralData->waypoint_coordinates = set_waypoint_from_frame(centralData->current_waypoint,centralData->position_estimator.localPosition.origin);
8002200a:	ec f8 00 00 	ld.w	r8,r6[0]
8002200e:	70 05       	ld.w	r5,r8[0x0]
80022010:	ec f8 00 00 	ld.w	r8,r6[0]
80022014:	70 08       	ld.w	r8,r8[0x0]
80022016:	ec f9 00 00 	ld.w	r9,r6[0]
8002201a:	72 0e       	ld.w	lr,r9[0x0]
8002201c:	ee cc 00 40 	sub	r12,r7,64
80022020:	20 7d       	sub	sp,28
80022022:	1a 99       	mov	r9,sp
80022024:	12 9a       	mov	r10,r9
80022026:	f0 cb f2 54 	sub	r11,r8,-3500
8002202a:	f4 c8 00 00 	sub	r8,r10,0
8002202e:	f6 c9 00 00 	sub	r9,r11,0
80022032:	72 03       	ld.w	r3,r9[0x0]
80022034:	91 03       	st.w	r8[0x0],r3
80022036:	72 13       	ld.w	r3,r9[0x4]
80022038:	91 13       	st.w	r8[0x4],r3
8002203a:	72 23       	ld.w	r3,r9[0x8]
8002203c:	91 23       	st.w	r8[0x8],r3
8002203e:	72 39       	ld.w	r9,r9[0xc]
80022040:	91 39       	st.w	r8[0xc],r9
80022042:	f6 e8 00 10 	ld.d	r8,r11[16]
80022046:	f4 e9 00 10 	st.d	r10[16],r8
8002204a:	76 68       	ld.w	r8,r11[0x18]
8002204c:	95 68       	st.w	r10[0x18],r8
8002204e:	20 cd       	sub	sp,48
80022050:	1a 98       	mov	r8,sp
80022052:	10 9b       	mov	r11,r8
80022054:	fc ca f0 14 	sub	r10,lr,-4076
80022058:	f6 c8 00 00 	sub	r8,r11,0
8002205c:	f4 c9 00 00 	sub	r9,r10,0
80022060:	72 0e       	ld.w	lr,r9[0x0]
80022062:	91 0e       	st.w	r8[0x0],lr
80022064:	72 1e       	ld.w	lr,r9[0x4]
80022066:	91 1e       	st.w	r8[0x4],lr
80022068:	72 2e       	ld.w	lr,r9[0x8]
8002206a:	91 2e       	st.w	r8[0x8],lr
8002206c:	72 39       	ld.w	r9,r9[0xc]
8002206e:	91 39       	st.w	r8[0xc],r9
80022070:	f6 c8 ff f0 	sub	r8,r11,-16
80022074:	f4 c9 ff f0 	sub	r9,r10,-16
80022078:	72 0e       	ld.w	lr,r9[0x0]
8002207a:	91 0e       	st.w	r8[0x0],lr
8002207c:	72 1e       	ld.w	lr,r9[0x4]
8002207e:	91 1e       	st.w	r8[0x4],lr
80022080:	72 2e       	ld.w	lr,r9[0x8]
80022082:	91 2e       	st.w	r8[0x8],lr
80022084:	72 39       	ld.w	r9,r9[0xc]
80022086:	91 39       	st.w	r8[0xc],r9
80022088:	f6 c8 ff e0 	sub	r8,r11,-32
8002208c:	f4 c9 ff e0 	sub	r9,r10,-32
80022090:	72 0a       	ld.w	r10,r9[0x0]
80022092:	91 0a       	st.w	r8[0x0],r10
80022094:	72 1a       	ld.w	r10,r9[0x4]
80022096:	91 1a       	st.w	r8[0x4],r10
80022098:	72 2a       	ld.w	r10,r9[0x8]
8002209a:	91 2a       	st.w	r8[0x8],r10
8002209c:	72 39       	ld.w	r9,r9[0xc]
8002209e:	91 39       	st.w	r8[0xc],r9
800220a0:	f0 16 00 fe 	mcall	r6[1016]
800220a4:	2e dd       	sub	sp,-76
800220a6:	ea cb ef e0 	sub	r11,r5,-4128
800220aa:	ee ca 00 40 	sub	r10,r7,64
800220ae:	f6 c8 00 00 	sub	r8,r11,0
800220b2:	f4 c9 00 00 	sub	r9,r10,0
800220b6:	72 0c       	ld.w	r12,r9[0x0]
800220b8:	91 0c       	st.w	r8[0x0],r12
800220ba:	72 1c       	ld.w	r12,r9[0x4]
800220bc:	91 1c       	st.w	r8[0x4],r12
800220be:	72 2c       	ld.w	r12,r9[0x8]
800220c0:	91 2c       	st.w	r8[0x8],r12
800220c2:	72 39       	ld.w	r9,r9[0xc]
800220c4:	91 39       	st.w	r8[0xc],r9
800220c6:	f6 c8 ff f0 	sub	r8,r11,-16
800220ca:	f4 c9 ff f0 	sub	r9,r10,-16
800220ce:	72 0c       	ld.w	r12,r9[0x0]
800220d0:	91 0c       	st.w	r8[0x0],r12
800220d2:	72 1c       	ld.w	r12,r9[0x4]
800220d4:	91 1c       	st.w	r8[0x4],r12
800220d6:	72 2c       	ld.w	r12,r9[0x8]
800220d8:	91 2c       	st.w	r8[0x8],r12
800220da:	72 39       	ld.w	r9,r9[0xc]
800220dc:	91 39       	st.w	r8[0xc],r9
800220de:	f6 c8 ff e0 	sub	r8,r11,-32
800220e2:	f4 c9 ff e0 	sub	r9,r10,-32
800220e6:	72 0a       	ld.w	r10,r9[0x0]
800220e8:	91 0a       	st.w	r8[0x0],r10
800220ea:	72 1a       	ld.w	r10,r9[0x4]
800220ec:	91 1a       	st.w	r8[0x4],r10
800220ee:	72 2a       	ld.w	r10,r9[0x8]
800220f0:	91 2a       	st.w	r8[0x8],r10
800220f2:	72 39       	ld.w	r9,r9[0xc]
800220f4:	91 39       	st.w	r8[0xc],r9
				
				mavlink_msg_mission_current_send(MAVLINK_COMM_0,centralData->current_wp_count);
800220f6:	ec f8 00 00 	ld.w	r8,r6[0]
800220fa:	70 08       	ld.w	r8,r8[0x0]
800220fc:	f1 38 10 1e 	ld.ub	r8,r8[4126]
80022100:	5c 68       	casts.b	r8
80022102:	5c 88       	casts.h	r8
80022104:	5c 78       	castu.h	r8
80022106:	10 9b       	mov	r11,r8
80022108:	30 0c       	mov	r12,0
8002210a:	fe b0 ed 19 	rcall	8001fb3c <mavlink_msg_mission_current_send>
8002210e:	c1 28       	rjmp	80022132 <waypoint_navigation_handler+0x3bc>
				
				}else{
				centralData->waypoint_set = false;
80022110:	ec f8 00 00 	ld.w	r8,r6[0]
80022114:	70 09       	ld.w	r9,r8[0x0]
80022116:	30 08       	mov	r8,0
80022118:	f3 68 10 b4 	st.b	r9[4276],r8
				dbg_print("Stop\n");
8002211c:	fe cc 03 ac 	sub	r12,pc,940
80022120:	f0 16 00 01 	mcall	r6[4]
				
				wp_hold_init();
80022124:	f0 16 00 b2 	mcall	r6[712]
80022128:	c0 58       	rjmp	80022132 <waypoint_navigation_handler+0x3bc>
			}
		}
	}else{
		init_wp();
8002212a:	f0 16 00 8d 	mcall	r6[564]
		wp_hold_init();
8002212e:	f0 16 00 b2 	mcall	r6[712]
	}
}
80022132:	2f 0d       	sub	sp,-64
80022134:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80022138:	80 02       	ld.sh	r2,r0[0x0]
8002213a:	1c 06       	add	r6,lr
8002213c:	43 72       	lddsp	r2,sp[0xdc]
8002213e:	69 74       	ld.w	r4,r4[0x5c]
80022140:	69 63       	ld.w	r3,r4[0x58]
80022142:	61 6c       	ld.w	r12,r0[0x58]
80022144:	20 53       	sub	r3,5
80022146:	74 61       	ld.w	r1,r10[0x18]
80022148:	74 65       	ld.w	r5,r10[0x18]
8002214a:	21 20       	sub	r0,18
8002214c:	43 6c       	lddsp	r12,sp[0xd8]
8002214e:	69 6d       	ld.w	sp,r4[0x58]
80022150:	62 69       	ld.w	r9,r1[0x18]
80022152:	6e 67       	ld.w	r7,r7[0x18]
80022154:	20 74       	sub	r4,7
80022156:	6f 20       	ld.w	r0,r7[0x48]
80022158:	73 61       	ld.w	r1,r9[0x58]
8002215a:	66 65       	ld.w	r5,r3[0x18]
8002215c:	20 61       	sub	r1,6
8002215e:	6c 74       	ld.w	r4,r6[0x1c]
80022160:	69 74       	ld.w	r4,r4[0x5c]
80022162:	75 64       	ld.w	r4,r10[0x58]
80022164:	65 2e       	ld.w	lr,r2[0x48]
80022166:	0a 00       	add	r0,r5
80022168:	43 72       	lddsp	r2,sp[0xdc]
8002216a:	69 74       	ld.w	r4,r4[0x5c]
8002216c:	69 63       	ld.w	r3,r4[0x58]
8002216e:	61 6c       	ld.w	r12,r0[0x58]
80022170:	20 53       	sub	r3,5
80022172:	74 61       	ld.w	r1,r10[0x18]
80022174:	74 65       	ld.w	r5,r10[0x18]
80022176:	21 20       	sub	r0,18
80022178:	46 6c       	lddsp	r12,sp[0x198]
8002217a:	79 69       	ld.w	r9,r12[0x58]
8002217c:	6e 67       	ld.w	r7,r7[0x18]
8002217e:	20 74       	sub	r4,7
80022180:	6f 20       	ld.w	r0,r7[0x48]
80022182:	68 6f       	ld.w	pc,r4[0x18]
80022184:	6d 65       	ld.w	r5,r6[0x58]
80022186:	20 77       	sub	r7,7
80022188:	61 79       	ld.w	r9,r0[0x5c]
8002218a:	70 6f       	ld.w	pc,r8[0x18]
8002218c:	69 6e       	ld.w	lr,r4[0x58]
8002218e:	74 2e       	ld.w	lr,r10[0x8]
80022190:	0a 00       	add	r0,r5
80022192:	00 00       	add	r0,r0
80022194:	43 72       	lddsp	r2,sp[0xdc]
80022196:	69 74       	ld.w	r4,r4[0x5c]
80022198:	69 63       	ld.w	r3,r4[0x58]
8002219a:	61 6c       	ld.w	r12,r0[0x58]
8002219c:	20 53       	sub	r3,5
8002219e:	74 61       	ld.w	r1,r10[0x18]
800221a0:	74 65       	ld.w	r5,r10[0x18]
800221a2:	21 20       	sub	r0,18
800221a4:	50 65       	stdsp	sp[0x18],r5
800221a6:	72 66       	ld.w	r6,r9[0x18]
800221a8:	6f 72       	ld.w	r2,r7[0x5c]
800221aa:	6d 69       	ld.w	r9,r6[0x58]
800221ac:	6e 67       	ld.w	r7,r7[0x18]
800221ae:	20 63       	sub	r3,6
800221b0:	72 69       	ld.w	r9,r9[0x18]
800221b2:	74 69       	ld.w	r9,r10[0x18]
800221b4:	63 61       	ld.w	r1,r1[0x58]
800221b6:	6c 20       	ld.w	r0,r6[0x8]
800221b8:	6c 61       	ld.w	r1,r6[0x18]
800221ba:	6e 64       	ld.w	r4,r7[0x18]
800221bc:	69 6e       	ld.w	lr,r4[0x58]
800221be:	67 2e       	ld.w	lr,r3[0x48]
800221c0:	0a 00       	add	r0,r5
800221c2:	00 00       	add	r0,r0
800221c4:	43 72       	lddsp	r2,sp[0xdc]
800221c6:	69 74       	ld.w	r4,r4[0x5c]
800221c8:	69 63       	ld.w	r3,r4[0x58]
800221ca:	61 6c       	ld.w	r12,r0[0x58]
800221cc:	20 53       	sub	r3,5
800221ce:	74 61       	ld.w	r1,r10[0x18]
800221d0:	74 65       	ld.w	r5,r10[0x18]
800221d2:	21 20       	sub	r0,18
800221d4:	4c 61       	lddpc	r1,800222ec <waypoint_critical_handler+0xe8>
800221d6:	6e 64       	ld.w	r4,r7[0x18]
800221d8:	65 64       	ld.w	r4,r2[0x58]
800221da:	2c 20       	sub	r0,-62
800221dc:	73 77       	ld.w	r7,r9[0x5c]
800221de:	69 74       	ld.w	r4,r4[0x5c]
800221e0:	63 68       	ld.w	r8,r1[0x58]
800221e2:	69 6e       	ld.w	lr,r4[0x58]
800221e4:	67 20       	ld.w	r0,r3[0x48]
800221e6:	6f 66       	ld.w	r6,r7[0x58]
800221e8:	66 20       	ld.w	r0,r3[0x8]
800221ea:	6d 6f       	ld.w	pc,r6[0x58]
800221ec:	74 6f       	ld.w	pc,r10[0x18]
800221ee:	72 73       	ld.w	r3,r9[0x1c]
800221f0:	2c 20       	sub	r0,-62
800221f2:	45 6d       	lddsp	sp,sp[0x158]
800221f4:	65 72       	ld.w	r2,r2[0x5c]
800221f6:	67 65       	ld.w	r5,r3[0x58]
800221f8:	6e 63       	ld.w	r3,r7[0x18]
800221fa:	79 20       	ld.w	r0,r12[0x48]
800221fc:	6d 6f       	ld.w	pc,r6[0x58]
800221fe:	64 65       	ld.w	r5,r2[0x18]
80022200:	2e 0a       	sub	r10,-32
	...

80022204 <waypoint_critical_handler>:

void waypoint_critical_handler()
{
80022204:	eb cd 40 e0 	pushm	r5-r7,lr
80022208:	1a 97       	mov	r7,sp
8002220a:	20 7d       	sub	sp,28
8002220c:	fe f6 02 20 	ld.w	r6,pc[544]
80022210:	1e 26       	rsub	r6,pc
	if (!(centralData->critical_init))
80022212:	ec f8 00 00 	ld.w	r8,r6[0]
80022216:	70 08       	ld.w	r8,r8[0x0]
80022218:	f1 38 10 b9 	ld.ub	r8,r8[4281]
8002221c:	ec 18 00 01 	eorl	r8,0x1
80022220:	5c 58       	castu.b	r8
80022222:	c1 10       	breq	80022244 <waypoint_critical_handler+0x40>
	{
		centralData->critical_init = true;
80022224:	ec f8 00 00 	ld.w	r8,r6[0]
80022228:	70 09       	ld.w	r9,r8[0x0]
8002222a:	30 18       	mov	r8,1
8002222c:	f3 68 10 b9 	st.b	r9[4281],r8
		dbg_print("Critical State! Climbing to safe altitude.\n");
80022230:	fe cc 00 f4 	sub	r12,pc,244
80022234:	f0 16 00 01 	mcall	r6[4]
		centralData->critical_behavior = CLIMB_TO_SAFE_ALT;
80022238:	ec f8 00 00 	ld.w	r8,r6[0]
8002223c:	70 08       	ld.w	r8,r8[0x0]
8002223e:	30 19       	mov	r9,1
80022240:	f1 49 12 e4 	st.w	r8[4836],r9
	}
	
	if (!(centralData->critical_next_state))
80022244:	ec f8 00 00 	ld.w	r8,r6[0]
80022248:	70 08       	ld.w	r8,r8[0x0]
8002224a:	f1 38 10 ba 	ld.ub	r8,r8[4282]
8002224e:	ec 18 00 01 	eorl	r8,0x1
80022252:	5c 58       	castu.b	r8
80022254:	e0 80 00 a7 	breq	800223a2 <waypoint_critical_handler+0x19e>
	{
		centralData->critical_next_state = true;
80022258:	ec f8 00 00 	ld.w	r8,r6[0]
8002225c:	70 09       	ld.w	r9,r8[0x0]
8002225e:	30 18       	mov	r8,1
80022260:	f3 68 10 ba 	st.b	r9[4282],r8
		
		Aero_Attitude_t aero_attitude;
		aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
80022264:	ec f8 00 00 	ld.w	r8,r6[0]
80022268:	70 09       	ld.w	r9,r8[0x0]
8002226a:	ee ca 00 10 	sub	r10,r7,16
8002226e:	20 4d       	sub	sp,16
80022270:	1a 98       	mov	r8,sp
80022272:	20 08       	sub	r8,0
80022274:	20 09       	sub	r9,0
80022276:	72 0b       	ld.w	r11,r9[0x0]
80022278:	91 0b       	st.w	r8[0x0],r11
8002227a:	72 1b       	ld.w	r11,r9[0x4]
8002227c:	91 1b       	st.w	r8[0x4],r11
8002227e:	72 2b       	ld.w	r11,r9[0x8]
80022280:	91 2b       	st.w	r8[0x8],r11
80022282:	72 39       	ld.w	r9,r9[0xc]
80022284:	91 39       	st.w	r8[0xc],r9
80022286:	14 9c       	mov	r12,r10
80022288:	f0 16 00 6d 	mcall	r6[436]
8002228c:	2f cd       	sub	sp,-16
		centralData->waypoint_critical_coordinates.heading = aero_attitude.rpy[2];
8002228e:	ec f8 00 00 	ld.w	r8,r6[0]
80022292:	70 08       	ld.w	r8,r8[0x0]
80022294:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022298:	f1 49 10 8c 	st.w	r8[4236],r9
		
		switch (centralData->critical_behavior)
8002229c:	ec f8 00 00 	ld.w	r8,r6[0]
800222a0:	70 08       	ld.w	r8,r8[0x0]
800222a2:	f0 f8 12 e4 	ld.w	r8,r8[4836]
800222a6:	58 28       	cp.w	r8,2
800222a8:	c2 10       	breq	800222ea <waypoint_critical_handler+0xe6>
800222aa:	58 38       	cp.w	r8,3
800222ac:	c3 30       	breq	80022312 <waypoint_critical_handler+0x10e>
800222ae:	58 18       	cp.w	r8,1
800222b0:	c4 31       	brne	80022336 <waypoint_critical_handler+0x132>
		{
			case CLIMB_TO_SAFE_ALT:
			centralData->waypoint_critical_coordinates.pos[X] = centralData->position_estimator.localPosition.pos[X];
800222b2:	ec f8 00 00 	ld.w	r8,r6[0]
800222b6:	70 08       	ld.w	r8,r8[0x0]
800222b8:	ec f9 00 00 	ld.w	r9,r6[0]
800222bc:	72 09       	ld.w	r9,r9[0x0]
800222be:	f2 f9 0d 9c 	ld.w	r9,r9[3484]
800222c2:	f1 49 10 80 	st.w	r8[4224],r9
			centralData->waypoint_critical_coordinates.pos[Y] = centralData->position_estimator.localPosition.pos[Y];
800222c6:	ec f8 00 00 	ld.w	r8,r6[0]
800222ca:	70 08       	ld.w	r8,r8[0x0]
800222cc:	ec f9 00 00 	ld.w	r9,r6[0]
800222d0:	72 09       	ld.w	r9,r9[0x0]
800222d2:	f2 f9 0d a0 	ld.w	r9,r9[3488]
800222d6:	f1 49 10 84 	st.w	r8[4228],r9
			centralData->waypoint_critical_coordinates.pos[Z] = -30.0;
800222da:	ec f8 00 00 	ld.w	r8,r6[0]
800222de:	70 08       	ld.w	r8,r8[0x0]
800222e0:	fc 19 c1 f0 	movh	r9,0xc1f0
800222e4:	f1 49 10 88 	st.w	r8[4232],r9
			
			break;
800222e8:	c2 78       	rjmp	80022336 <waypoint_critical_handler+0x132>
			case FLY_TO_HOME_WP:
			centralData->waypoint_critical_coordinates.pos[X] = 0.0;
800222ea:	ec f8 00 00 	ld.w	r8,r6[0]
800222ee:	70 08       	ld.w	r8,r8[0x0]
800222f0:	30 09       	mov	r9,0
800222f2:	f1 49 10 80 	st.w	r8[4224],r9
			centralData->waypoint_critical_coordinates.pos[Y] = 0.0;
800222f6:	ec f8 00 00 	ld.w	r8,r6[0]
800222fa:	70 08       	ld.w	r8,r8[0x0]
800222fc:	30 09       	mov	r9,0
800222fe:	f1 49 10 84 	st.w	r8[4228],r9
			centralData->waypoint_critical_coordinates.pos[Z] = -30.0;
80022302:	ec f8 00 00 	ld.w	r8,r6[0]
80022306:	70 08       	ld.w	r8,r8[0x0]
80022308:	fc 19 c1 f0 	movh	r9,0xc1f0
8002230c:	f1 49 10 88 	st.w	r8[4232],r9
			break;
80022310:	c1 38       	rjmp	80022336 <waypoint_critical_handler+0x132>
			case CRITICAL_LAND:
			centralData->waypoint_critical_coordinates.pos[X] = 0.0;
80022312:	ec f8 00 00 	ld.w	r8,r6[0]
80022316:	70 08       	ld.w	r8,r8[0x0]
80022318:	30 09       	mov	r9,0
8002231a:	f1 49 10 80 	st.w	r8[4224],r9
			centralData->waypoint_critical_coordinates.pos[Y] = 0.0;
8002231e:	ec f8 00 00 	ld.w	r8,r6[0]
80022322:	70 08       	ld.w	r8,r8[0x0]
80022324:	30 09       	mov	r9,0
80022326:	f1 49 10 84 	st.w	r8[4228],r9
			centralData->waypoint_critical_coordinates.pos[Z] = 0.0;
8002232a:	ec f8 00 00 	ld.w	r8,r6[0]
8002232e:	70 08       	ld.w	r8,r8[0x0]
80022330:	30 09       	mov	r9,0
80022332:	f1 49 10 88 	st.w	r8[4232],r9
			break;
		}
		float rel_pos[3];
		uint8_t i;
		for (i=0;i<3;i++)
80022336:	30 08       	mov	r8,0
80022338:	ef 68 ff ff 	st.b	r7[-1],r8
8002233c:	c2 18       	rjmp	8002237e <waypoint_critical_handler+0x17a>
		{
			rel_pos[i] = centralData->waypoint_critical_coordinates.pos[i] - centralData->position_estimator.localPosition.pos[i];
8002233e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80022342:	ec f9 00 00 	ld.w	r9,r6[0]
80022346:	72 09       	ld.w	r9,r9[0x0]
80022348:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8002234c:	f4 ca fb e0 	sub	r10,r10,-1056
80022350:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80022354:	ec f9 00 00 	ld.w	r9,r6[0]
80022358:	72 09       	ld.w	r9,r9[0x0]
8002235a:	ef 3b ff ff 	ld.ub	r11,r7[-1]
8002235e:	f6 cb fc 99 	sub	r11,r11,-871
80022362:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80022366:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8002236a:	a3 68       	lsl	r8,0x2
8002236c:	ee 08 00 08 	add	r8,r7,r8
80022370:	f1 49 ff e4 	st.w	r8[-28],r9
			centralData->waypoint_critical_coordinates.pos[Z] = 0.0;
			break;
		}
		float rel_pos[3];
		uint8_t i;
		for (i=0;i<3;i++)
80022374:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80022378:	2f f8       	sub	r8,-1
8002237a:	ef 68 ff ff 	st.b	r7[-1],r8
8002237e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80022382:	30 28       	mov	r8,2
80022384:	f0 09 18 00 	cp.b	r9,r8
80022388:	fe 98 ff db 	brls	8002233e <waypoint_critical_handler+0x13a>
		{
			rel_pos[i] = centralData->waypoint_critical_coordinates.pos[i] - centralData->position_estimator.localPosition.pos[i];
		}
		centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
8002238c:	ec f8 00 00 	ld.w	r8,r6[0]
80022390:	70 05       	ld.w	r5,r8[0x0]
80022392:	ee c8 00 1c 	sub	r8,r7,28
80022396:	10 9c       	mov	r12,r8
80022398:	fe b0 ed c0 	rcall	8001ff18 <vector_norm_sqr>
8002239c:	18 98       	mov	r8,r12
8002239e:	eb 48 10 b0 	st.w	r5[4272],r8
	}
	
	if (centralData->dist2wp_sqr < 3.0)
800223a2:	ec f8 00 00 	ld.w	r8,r6[0]
800223a6:	70 08       	ld.w	r8,r8[0x0]
800223a8:	f0 fa 10 b0 	ld.w	r10,r8[4272]
800223ac:	30 18       	mov	r8,1
800223ae:	fc 19 40 40 	movh	r9,0x4040
800223b2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800223b6:	e0 8c 00 03 	brvs	800223bc <waypoint_critical_handler+0x1b8>
800223ba:	c0 25       	brlt	800223be <waypoint_critical_handler+0x1ba>
800223bc:	30 08       	mov	r8,0
800223be:	5c 58       	castu.b	r8
800223c0:	c3 20       	breq	80022424 <waypoint_critical_handler+0x220>
	{
		centralData->critical_next_state = false;
800223c2:	ec f8 00 00 	ld.w	r8,r6[0]
800223c6:	70 09       	ld.w	r9,r8[0x0]
800223c8:	30 08       	mov	r8,0
800223ca:	f3 68 10 ba 	st.b	r9[4282],r8
		switch (centralData->critical_behavior)
800223ce:	ec f8 00 00 	ld.w	r8,r6[0]
800223d2:	70 08       	ld.w	r8,r8[0x0]
800223d4:	f0 f8 12 e4 	ld.w	r8,r8[4836]
800223d8:	58 28       	cp.w	r8,2
800223da:	c1 00       	breq	800223fa <waypoint_critical_handler+0x1f6>
800223dc:	58 38       	cp.w	r8,3
800223de:	c1 90       	breq	80022410 <waypoint_critical_handler+0x20c>
800223e0:	58 18       	cp.w	r8,1
800223e2:	c2 11       	brne	80022424 <waypoint_critical_handler+0x220>
		{
			case CLIMB_TO_SAFE_ALT:
			dbg_print("Critical State! Flying to home waypoint.\n");
800223e4:	fe cc 02 7c 	sub	r12,pc,636
800223e8:	f0 16 00 01 	mcall	r6[4]
			centralData->critical_behavior = FLY_TO_HOME_WP;
800223ec:	ec f8 00 00 	ld.w	r8,r6[0]
800223f0:	70 08       	ld.w	r8,r8[0x0]
800223f2:	30 29       	mov	r9,2
800223f4:	f1 49 12 e4 	st.w	r8[4836],r9
			break;
800223f8:	c1 68       	rjmp	80022424 <waypoint_critical_handler+0x220>
			case FLY_TO_HOME_WP:
			dbg_print("Critical State! Performing critical landing.\n");
800223fa:	fe cc 02 66 	sub	r12,pc,614
800223fe:	f0 16 00 01 	mcall	r6[4]
			centralData->critical_behavior = CRITICAL_LAND;
80022402:	ec f8 00 00 	ld.w	r8,r6[0]
80022406:	70 08       	ld.w	r8,r8[0x0]
80022408:	30 39       	mov	r9,3
8002240a:	f1 49 12 e4 	st.w	r8[4836],r9
			break;
8002240e:	c0 b8       	rjmp	80022424 <waypoint_critical_handler+0x220>
			case CRITICAL_LAND:
			dbg_print("Critical State! Landed, switching off motors, Emergency mode.\n");
80022410:	fe cc 02 4c 	sub	r12,pc,588
80022414:	f0 16 00 01 	mcall	r6[4]
			centralData->critical_landing = true;
80022418:	ec f8 00 00 	ld.w	r8,r6[0]
8002241c:	70 09       	ld.w	r9,r8[0x0]
8002241e:	30 18       	mov	r8,1
80022420:	f3 68 10 b8 	st.b	r9[4280],r8
			break;
		}
	}
80022424:	2f 9d       	sub	sp,-28
80022426:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8002242a:	00 00       	add	r0,r0
8002242c:	80 02       	ld.sh	r2,r0[0x0]
8002242e:	20 94       	sub	r4,9

80022430 <buffer_full>:


#include "buffer.h"


int8_t buffer_full(Buffer_t * buffer) {
80022430:	eb cd 40 80 	pushm	r7,lr
80022434:	1a 97       	mov	r7,sp
80022436:	20 1d       	sub	sp,4
80022438:	ef 4c ff fc 	st.w	r7[-4],r12
	return (((buffer->BufferHead+1)&BUFFER_MASK) == buffer->BufferTail);
8002243c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022440:	f1 38 01 00 	ld.ub	r8,r8[256]
80022444:	2f f8       	sub	r8,-1
80022446:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8002244a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002244e:	f1 38 01 01 	ld.ub	r8,r8[257]
80022452:	10 39       	cp.w	r9,r8
80022454:	5f 08       	sreq	r8
}
80022456:	10 9c       	mov	r12,r8
80022458:	2f fd       	sub	sp,-4
8002245a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002245e <buffer_put_lossy>:

void buffer_put_lossy(Buffer_t * buffer, uint8_t byte) {
8002245e:	eb cd 40 c0 	pushm	r6-r7,lr
80022462:	1a 97       	mov	r7,sp
80022464:	20 3d       	sub	sp,12
80022466:	4a 46       	lddpc	r6,800224f4 <buffer_put_lossy+0x96>
80022468:	1e 26       	rsub	r6,pc
8002246a:	ef 4c ff f8 	st.w	r7[-8],r12
8002246e:	16 98       	mov	r8,r11
80022470:	ef 68 ff f4 	st.b	r7[-12],r8
	uint8_t tmp;
	tmp=(buffer->BufferHead+1)&BUFFER_MASK;
80022474:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022478:	f1 38 01 00 	ld.ub	r8,r8[256]
8002247c:	2f f8       	sub	r8,-1
8002247e:	ef 68 ff ff 	st.b	r7[-1],r8

	if (tmp==buffer->BufferTail) {
80022482:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022486:	f1 38 01 01 	ld.ub	r8,r8[257]
8002248a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002248e:	f0 09 18 00 	cp.b	r9,r8
80022492:	c0 b1       	brne	800224a8 <buffer_put_lossy+0x4a>
		//error: receive buffer overflow!!
		// lose old incoming data at the end of the buffer
		buffer->BufferTail=(buffer->BufferTail+1)&BUFFER_MASK;
80022494:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022498:	f1 38 01 01 	ld.ub	r8,r8[257]
8002249c:	2f f8       	sub	r8,-1
8002249e:	5c 58       	castu.b	r8
800224a0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800224a4:	f3 68 01 01 	st.b	r9[257],r8
	}
	// store incoming data in buffer
	buffer->Buffer[buffer->BufferHead] = byte;
800224a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800224ac:	f1 38 01 00 	ld.ub	r8,r8[256]
800224b0:	10 99       	mov	r9,r8
800224b2:	ee fa ff f8 	ld.w	r10,r7[-8]
800224b6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800224ba:	f4 09 0b 08 	st.b	r10[r9],r8
	buffer->BufferHead=tmp;
800224be:	ee f9 ff f8 	ld.w	r9,r7[-8]
800224c2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800224c6:	f3 68 01 00 	st.b	r9[256],r8
	if (buffer_full(buffer)) buffer->full =1; else buffer->full=0;
800224ca:	ee fc ff f8 	ld.w	r12,r7[-8]
800224ce:	f0 16 00 fa 	mcall	r6[1000]
800224d2:	18 98       	mov	r8,r12
800224d4:	5c 58       	castu.b	r8
800224d6:	c0 70       	breq	800224e4 <buffer_put_lossy+0x86>
800224d8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800224dc:	30 18       	mov	r8,1
800224de:	f3 68 01 02 	st.b	r9[258],r8
800224e2:	c0 68       	rjmp	800224ee <buffer_put_lossy+0x90>
800224e4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800224e8:	30 08       	mov	r8,0
800224ea:	f3 68 01 02 	st.b	r9[258],r8
}
800224ee:	2f dd       	sub	sp,-12
800224f0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800224f4:	80 02       	ld.sh	r2,r0[0x0]
800224f6:	22 ec       	sub	r12,46

800224f8 <buffer_put>:

int8_t buffer_put(Buffer_t * buffer, uint8_t byte) {
800224f8:	eb cd 40 c0 	pushm	r6-r7,lr
800224fc:	1a 97       	mov	r7,sp
800224fe:	20 3d       	sub	sp,12
80022500:	4a 16       	lddpc	r6,80022584 <buffer_put+0x8c>
80022502:	1e 26       	rsub	r6,pc
80022504:	ef 4c ff f8 	st.w	r7[-8],r12
80022508:	16 98       	mov	r8,r11
8002250a:	ef 68 ff f4 	st.b	r7[-12],r8
	uint8_t tmp;
	tmp=(buffer->BufferHead+1)&BUFFER_MASK;
8002250e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022512:	f1 38 01 00 	ld.ub	r8,r8[256]
80022516:	2f f8       	sub	r8,-1
80022518:	ef 68 ff ff 	st.b	r7[-1],r8

	if (tmp==buffer->BufferTail) {
8002251c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022520:	f1 38 01 01 	ld.ub	r8,r8[257]
80022524:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80022528:	f0 09 18 00 	cp.b	r9,r8
8002252c:	c0 51       	brne	80022536 <buffer_put+0x3e>
		//error: buffer full! return -1
		return -1;
8002252e:	e0 68 00 ff 	mov	r8,255
	}
	// store incoming data in buffer
	buffer->Buffer[buffer->BufferHead] = byte;
	buffer->BufferHead=tmp;
	if (buffer_full(buffer)) buffer->full =1; else buffer->full=0;
}
80022532:	10 9c       	mov	r12,r8
80022534:	c2 48       	rjmp	8002257c <buffer_put+0x84>
	if (tmp==buffer->BufferTail) {
		//error: buffer full! return -1
		return -1;
	}
	// store incoming data in buffer
	buffer->Buffer[buffer->BufferHead] = byte;
80022536:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002253a:	f1 38 01 00 	ld.ub	r8,r8[256]
8002253e:	10 99       	mov	r9,r8
80022540:	ee fa ff f8 	ld.w	r10,r7[-8]
80022544:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80022548:	f4 09 0b 08 	st.b	r10[r9],r8
	buffer->BufferHead=tmp;
8002254c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022550:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80022554:	f3 68 01 00 	st.b	r9[256],r8
	if (buffer_full(buffer)) buffer->full =1; else buffer->full=0;
80022558:	ee fc ff f8 	ld.w	r12,r7[-8]
8002255c:	f0 16 00 fa 	mcall	r6[1000]
80022560:	18 98       	mov	r8,r12
80022562:	5c 58       	castu.b	r8
80022564:	c0 70       	breq	80022572 <buffer_put+0x7a>
80022566:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002256a:	30 18       	mov	r8,1
8002256c:	f3 68 01 02 	st.b	r9[258],r8
80022570:	c0 68       	rjmp	8002257c <buffer_put+0x84>
80022572:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022576:	30 08       	mov	r8,0
80022578:	f3 68 01 02 	st.b	r9[258],r8
}
8002257c:	2f dd       	sub	sp,-12
8002257e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022582:	00 00       	add	r0,r0
80022584:	80 02       	ld.sh	r2,r0[0x0]
80022586:	23 86       	sub	r6,56

80022588 <buffer_get>:


uint8_t buffer_get(Buffer_t * buffer) {
80022588:	eb cd 40 80 	pushm	r7,lr
8002258c:	1a 97       	mov	r7,sp
8002258e:	20 2d       	sub	sp,8
80022590:	ef 4c ff f8 	st.w	r7[-8],r12
	uint8_t ret=0;
80022594:	30 08       	mov	r8,0
80022596:	ef 68 ff ff 	st.b	r7[-1],r8
	if (buffer->BufferHead!=buffer->BufferTail){
8002259a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002259e:	f1 39 01 00 	ld.ub	r9,r8[256]
800225a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800225a6:	f1 38 01 01 	ld.ub	r8,r8[257]
800225aa:	f0 09 18 00 	cp.b	r9,r8
800225ae:	c1 a0       	breq	800225e2 <buffer_get+0x5a>
		ret=buffer->Buffer[buffer->BufferTail];
800225b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800225b4:	f1 38 01 01 	ld.ub	r8,r8[257]
800225b8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800225bc:	f2 08 07 08 	ld.ub	r8,r9[r8]
800225c0:	ef 68 ff ff 	st.b	r7[-1],r8
		buffer->BufferTail=  (buffer->BufferTail+1)&BUFFER_MASK;
800225c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800225c8:	f1 38 01 01 	ld.ub	r8,r8[257]
800225cc:	2f f8       	sub	r8,-1
800225ce:	5c 58       	castu.b	r8
800225d0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800225d4:	f3 68 01 01 	st.b	r9[257],r8
		buffer->full=0;
800225d8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800225dc:	30 08       	mov	r8,0
800225de:	f3 68 01 02 	st.b	r9[258],r8
	}
	return ret;
800225e2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
800225e6:	10 9c       	mov	r12,r8
800225e8:	2f ed       	sub	sp,-8
800225ea:	e3 cd 80 80 	ldm	sp++,r7,pc

800225ee <buffer_empty>:


int8_t buffer_empty(Buffer_t * buffer) {
800225ee:	eb cd 40 80 	pushm	r7,lr
800225f2:	1a 97       	mov	r7,sp
800225f4:	20 1d       	sub	sp,4
800225f6:	ef 4c ff fc 	st.w	r7[-4],r12
	return (buffer->BufferHead==buffer->BufferTail);
800225fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800225fe:	f1 39 01 00 	ld.ub	r9,r8[256]
80022602:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022606:	f1 38 01 01 	ld.ub	r8,r8[257]
8002260a:	f0 09 18 00 	cp.b	r9,r8
8002260e:	5f 08       	sreq	r8
}
80022610:	10 9c       	mov	r12,r8
80022612:	2f fd       	sub	sp,-4
80022614:	e3 cd 80 80 	ldm	sp++,r7,pc

80022618 <buffer_bytes_available>:

int buffer_bytes_available(Buffer_t * buffer) {
80022618:	eb cd 40 80 	pushm	r7,lr
8002261c:	1a 97       	mov	r7,sp
8002261e:	20 1d       	sub	sp,4
80022620:	ef 4c ff fc 	st.w	r7[-4],r12
	return (BUFFER_SIZE+buffer->BufferHead - buffer->BufferTail)&BUFFER_MASK;
80022624:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022628:	f1 38 01 00 	ld.ub	r8,r8[256]
8002262c:	f0 c9 ff 00 	sub	r9,r8,-256
80022630:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022634:	f1 38 01 01 	ld.ub	r8,r8[257]
80022638:	f2 08 01 08 	sub	r8,r9,r8
8002263c:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
}
80022640:	10 9c       	mov	r12,r8
80022642:	2f fd       	sub	sp,-4
80022644:	e3 cd 80 80 	ldm	sp++,r7,pc

80022648 <buffer_init>:

void buffer_init(Buffer_t * buffer) {
80022648:	eb cd 40 80 	pushm	r7,lr
8002264c:	1a 97       	mov	r7,sp
8002264e:	20 1d       	sub	sp,4
80022650:	ef 4c ff fc 	st.w	r7[-4],r12
	buffer->BufferHead=0;
80022654:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022658:	30 08       	mov	r8,0
8002265a:	f3 68 01 00 	st.b	r9[256],r8
	buffer->BufferTail=0;
8002265e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022662:	30 08       	mov	r8,0
80022664:	f3 68 01 01 	st.b	r9[257],r8
	buffer->full=0;
80022668:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002266c:	30 08       	mov	r8,0
8002266e:	f3 68 01 02 	st.b	r9[258],r8
}
80022672:	2f fd       	sub	sp,-4
80022674:	e3 cd 80 80 	ldm	sp++,r7,pc

80022678 <buffer_clear>:

void buffer_clear(Buffer_t * buffer) {
80022678:	eb cd 40 80 	pushm	r7,lr
8002267c:	1a 97       	mov	r7,sp
8002267e:	20 1d       	sub	sp,4
80022680:	ef 4c ff fc 	st.w	r7[-4],r12
	buffer->BufferHead=0;
80022684:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022688:	30 08       	mov	r8,0
8002268a:	f3 68 01 00 	st.b	r9[256],r8
	buffer->BufferTail=0;
8002268e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022692:	30 08       	mov	r8,0
80022694:	f3 68 01 01 	st.b	r9[257],r8
	buffer->full=0;
80022698:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002269c:	30 08       	mov	r8,0
8002269e:	f3 68 01 02 	st.b	r9[258],r8
}
800226a2:	2f fd       	sub	sp,-4
800226a4:	e3 cd 80 80 	ldm	sp++,r7,pc

800226a8 <make_buffered_stream>:

void make_buffered_stream(Buffer_t *buffer, byte_stream_t *stream) {
800226a8:	eb cd 40 c0 	pushm	r6-r7,lr
800226ac:	1a 97       	mov	r7,sp
800226ae:	20 2d       	sub	sp,8
800226b0:	49 16       	lddpc	r6,800226f4 <make_buffered_stream+0x4c>
800226b2:	1e 26       	rsub	r6,pc
800226b4:	ef 4c ff fc 	st.w	r7[-4],r12
800226b8:	ef 4b ff f8 	st.w	r7[-8],r11
	stream->get=&buffer_get;
800226bc:	ec f9 01 10 	ld.w	r9,r6[272]
800226c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800226c4:	91 09       	st.w	r8[0x0],r9
	stream->put=&buffer_put;
800226c6:	ec f9 01 4c 	ld.w	r9,r6[332]
800226ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800226ce:	91 19       	st.w	r8[0x4],r9
	stream->flush=NULL;
800226d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800226d4:	30 09       	mov	r9,0
800226d6:	91 29       	st.w	r8[0x8],r9
	stream->data=buffer;
800226d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800226dc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800226e0:	91 59       	st.w	r8[0x14],r9
	stream->bytes_available=&buffer_bytes_available;
800226e2:	ec f9 00 b8 	ld.w	r9,r6[184]
800226e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800226ea:	91 49       	st.w	r8[0x10],r9
}
800226ec:	2f ed       	sub	sp,-8
800226ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800226f2:	00 00       	add	r0,r0
800226f4:	80 02       	ld.sh	r2,r0[0x0]
800226f6:	25 36       	sub	r6,83

800226f8 <make_buffered_stream_lossy>:

void make_buffered_stream_lossy(Buffer_t *buffer, byte_stream_t *stream) {
800226f8:	eb cd 40 c0 	pushm	r6-r7,lr
800226fc:	1a 97       	mov	r7,sp
800226fe:	20 2d       	sub	sp,8
80022700:	49 16       	lddpc	r6,80022744 <make_buffered_stream_lossy+0x4c>
80022702:	1e 26       	rsub	r6,pc
80022704:	ef 4c ff fc 	st.w	r7[-4],r12
80022708:	ef 4b ff f8 	st.w	r7[-8],r11
	stream->get=&buffer_get;
8002270c:	ec f9 01 10 	ld.w	r9,r6[272]
80022710:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022714:	91 09       	st.w	r8[0x0],r9
	stream->put=&buffer_put_lossy;
80022716:	ec f9 05 08 	ld.w	r9,r6[1288]
8002271a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002271e:	91 19       	st.w	r8[0x4],r9
	stream->flush=NULL;
80022720:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022724:	30 09       	mov	r9,0
80022726:	91 29       	st.w	r8[0x8],r9
	stream->data=buffer;
80022728:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002272c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022730:	91 59       	st.w	r8[0x14],r9
	stream->bytes_available=&buffer_bytes_available;
80022732:	ec f9 00 b8 	ld.w	r9,r6[184]
80022736:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002273a:	91 49       	st.w	r8[0x10],r9
}
8002273c:	2f ed       	sub	sp,-8
8002273e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022742:	00 00       	add	r0,r0
80022744:	80 02       	ld.sh	r2,r0[0x0]
80022746:	25 86       	sub	r6,88

80022748 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80022748:	eb cd 40 c0 	pushm	r6-r7,lr
8002274c:	1a 97       	mov	r7,sp
8002274e:	20 6d       	sub	sp,24
80022750:	49 e6       	lddpc	r6,800227c8 <interpolate+0x80>
80022752:	1e 26       	rsub	r6,pc
80022754:	ef 4c ff f8 	st.w	r7[-8],r12
80022758:	ef 4b ff f4 	st.w	r7[-12],r11
8002275c:	ef 4a ff f0 	st.w	r7[-16],r10
80022760:	ef 49 ff ec 	st.w	r7[-20],r9
80022764:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80022768:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002276c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022770:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80022774:	c0 41       	brne	8002277c <interpolate+0x34>
	{
		return y1;
80022776:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002277a:	c2 38       	rjmp	800227c0 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8002277c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80022780:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022784:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80022788:	ee fa ff f8 	ld.w	r10,r7[-8]
8002278c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80022790:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80022794:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80022798:	ee fa ff f0 	ld.w	r10,r7[-16]
8002279c:	ee f9 ff f4 	ld.w	r9,r7[-12]
800227a0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800227a4:	12 9b       	mov	r11,r9
800227a6:	10 9c       	mov	r12,r8
800227a8:	f0 16 00 08 	mcall	r6[32]
800227ac:	18 98       	mov	r8,r12
800227ae:	10 99       	mov	r9,r8
800227b0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800227b4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800227b8:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
800227bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
800227c0:	10 9c       	mov	r12,r8
800227c2:	2f ad       	sub	sp,-24
800227c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800227c8:	80 02       	ld.sh	r2,r0[0x0]
800227ca:	25 d6       	sub	r6,93

800227cc <local_to_global_position>:
#include <math.h>
#include "print_util.h"
#include "conf_platform.h"

// convert local NED coordinates to global GPS coordinates (relative to origin given in local coordinate frame)
global_position_t local_to_global_position(local_coordinates_t input){
800227cc:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
800227d0:	1a 97       	mov	r7,sp
800227d2:	20 8d       	sub	sp,32
800227d4:	4d 96       	lddpc	r6,80022938 <local_to_global_position+0x16c>
800227d6:	1e 26       	rsub	r6,pc
800227d8:	ee c5 ff e0 	sub	r5,r7,-32
800227dc:	ef 4c ff e0 	st.w	r7[-32],r12
	global_position_t output;
	//output.latitude = input.origin.latitude  + rad_to_deg( input.pos[0] *2.0 / (PI * EARTH_RADIUS));
	//output.longitude= input.origin.longitude + rad_to_deg( input.pos[1] *2.0 / (PI * EARTH_RADIUS*cos(deg_to_rad(output.latitude))));
	output.latitude = input.origin.latitude  + rad_to_deg( input.pos[0] / EARTH_RADIUS);
800227e0:	ea e2 00 18 	ld.d	r2,r5[24]
800227e4:	6a 08       	ld.w	r8,r5[0x0]
800227e6:	10 9c       	mov	r12,r8
800227e8:	f0 16 00 02 	mcall	r6[8]
800227ec:	fc 18 40 00 	movh	r8,0x4000
800227f0:	e0 69 54 a6 	mov	r9,21670
800227f4:	ea 19 41 58 	orh	r9,0x4158
800227f8:	f0 16 00 0c 	mcall	r6[48]
800227fc:	14 98       	mov	r8,r10
800227fe:	16 99       	mov	r9,r11
80022800:	10 9a       	mov	r10,r8
80022802:	12 9b       	mov	r11,r9
80022804:	30 08       	mov	r8,0
80022806:	e0 69 80 00 	mov	r9,32768
8002280a:	ea 19 40 66 	orh	r9,0x4066
8002280e:	f0 16 00 03 	mcall	r6[12]
80022812:	14 98       	mov	r8,r10
80022814:	16 99       	mov	r9,r11
80022816:	10 9a       	mov	r10,r8
80022818:	12 9b       	mov	r11,r9
8002281a:	e0 68 2d 18 	mov	r8,11544
8002281e:	ea 18 54 44 	orh	r8,0x5444
80022822:	e0 69 21 fb 	mov	r9,8699
80022826:	ea 19 40 09 	orh	r9,0x4009
8002282a:	f0 16 00 0c 	mcall	r6[48]
8002282e:	14 98       	mov	r8,r10
80022830:	16 99       	mov	r9,r11
80022832:	04 9a       	mov	r10,r2
80022834:	06 9b       	mov	r11,r3
80022836:	f0 16 00 05 	mcall	r6[20]
8002283a:	14 98       	mov	r8,r10
8002283c:	16 99       	mov	r9,r11
8002283e:	ee e9 ff ec 	st.d	r7[-20],r8
	output.longitude= input.origin.longitude + rad_to_deg( input.pos[1] / ( EARTH_RADIUS*cos(deg_to_rad(output.latitude))));
80022842:	ea e2 00 10 	ld.d	r2,r5[16]
80022846:	6a 18       	ld.w	r8,r5[0x4]
80022848:	10 9c       	mov	r12,r8
8002284a:	f0 16 00 02 	mcall	r6[8]
8002284e:	14 90       	mov	r0,r10
80022850:	16 91       	mov	r1,r11
80022852:	ee ea ff ec 	ld.d	r10,r7[-20]
80022856:	e0 68 2d 18 	mov	r8,11544
8002285a:	ea 18 54 44 	orh	r8,0x5444
8002285e:	e0 69 21 fb 	mov	r9,8699
80022862:	ea 19 40 09 	orh	r9,0x4009
80022866:	f0 16 00 03 	mcall	r6[12]
8002286a:	14 98       	mov	r8,r10
8002286c:	16 99       	mov	r9,r11
8002286e:	10 9a       	mov	r10,r8
80022870:	12 9b       	mov	r11,r9
80022872:	30 08       	mov	r8,0
80022874:	e0 69 80 00 	mov	r9,32768
80022878:	ea 19 40 66 	orh	r9,0x4066
8002287c:	f0 16 00 0c 	mcall	r6[48]
80022880:	14 98       	mov	r8,r10
80022882:	16 99       	mov	r9,r11
80022884:	10 9a       	mov	r10,r8
80022886:	12 9b       	mov	r11,r9
80022888:	f0 16 00 ba 	mcall	r6[744]
8002288c:	fc 18 40 00 	movh	r8,0x4000
80022890:	e0 69 54 a6 	mov	r9,21670
80022894:	ea 19 41 58 	orh	r9,0x4158
80022898:	f0 16 00 03 	mcall	r6[12]
8002289c:	14 98       	mov	r8,r10
8002289e:	16 99       	mov	r9,r11
800228a0:	00 9a       	mov	r10,r0
800228a2:	02 9b       	mov	r11,r1
800228a4:	f0 16 00 0c 	mcall	r6[48]
800228a8:	14 98       	mov	r8,r10
800228aa:	16 99       	mov	r9,r11
800228ac:	10 9a       	mov	r10,r8
800228ae:	12 9b       	mov	r11,r9
800228b0:	30 08       	mov	r8,0
800228b2:	e0 69 80 00 	mov	r9,32768
800228b6:	ea 19 40 66 	orh	r9,0x4066
800228ba:	f0 16 00 03 	mcall	r6[12]
800228be:	14 98       	mov	r8,r10
800228c0:	16 99       	mov	r9,r11
800228c2:	10 9a       	mov	r10,r8
800228c4:	12 9b       	mov	r11,r9
800228c6:	e0 68 2d 18 	mov	r8,11544
800228ca:	ea 18 54 44 	orh	r8,0x5444
800228ce:	e0 69 21 fb 	mov	r9,8699
800228d2:	ea 19 40 09 	orh	r9,0x4009
800228d6:	f0 16 00 0c 	mcall	r6[48]
800228da:	14 98       	mov	r8,r10
800228dc:	16 99       	mov	r9,r11
800228de:	04 9a       	mov	r10,r2
800228e0:	06 9b       	mov	r11,r3
800228e2:	f0 16 00 05 	mcall	r6[20]
800228e6:	14 98       	mov	r8,r10
800228e8:	16 99       	mov	r9,r11
800228ea:	ee e9 ff e4 	st.d	r7[-28],r8
	output.altitude = -input.pos[2] + input.origin.altitude;
800228ee:	6a 89       	ld.w	r9,r5[0x20]
800228f0:	6a 28       	ld.w	r8,r5[0x8]
800228f2:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800228f6:	ef 48 ff f4 	st.w	r7[-12],r8
	output.heading=input.heading;
800228fa:	6a 38       	ld.w	r8,r5[0xc]
800228fc:	ef 48 ff f8 	st.w	r7[-8],r8

	return output;
80022900:	ee fa ff e0 	ld.w	r10,r7[-32]
80022904:	ee cb 00 1c 	sub	r11,r7,28
80022908:	f4 c8 00 00 	sub	r8,r10,0
8002290c:	f6 c9 00 00 	sub	r9,r11,0
80022910:	72 0c       	ld.w	r12,r9[0x0]
80022912:	91 0c       	st.w	r8[0x0],r12
80022914:	72 1c       	ld.w	r12,r9[0x4]
80022916:	91 1c       	st.w	r8[0x4],r12
80022918:	72 2c       	ld.w	r12,r9[0x8]
8002291a:	91 2c       	st.w	r8[0x8],r12
8002291c:	72 39       	ld.w	r9,r9[0xc]
8002291e:	91 39       	st.w	r8[0xc],r9
80022920:	f6 e8 00 10 	ld.d	r8,r11[16]
80022924:	f4 e9 00 10 	st.d	r10[16],r8
80022928:	76 68       	ld.w	r8,r11[0x18]
8002292a:	95 68       	st.w	r10[0x18],r8
}
8002292c:	ee fc ff e0 	ld.w	r12,r7[-32]
80022930:	2f 8d       	sub	sp,-32
80022932:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80022936:	00 00       	add	r0,r0
80022938:	80 02       	ld.sh	r2,r0[0x0]
8002293a:	26 5a       	sub	r10,101

8002293c <global_to_local_position>:

// convert a global position into a local coordinate frame around the given global origin
local_coordinates_t global_to_local_position(global_position_t position, global_position_t origin) {
8002293c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80022940:	1a 97       	mov	r7,sp
80022942:	20 ed       	sub	sp,56
80022944:	4f 16       	lddpc	r6,80022b08 <global_to_local_position+0x1cc>
80022946:	1e 26       	rsub	r6,pc
80022948:	ee c5 ff ec 	sub	r5,r7,-20
8002294c:	18 93       	mov	r3,r12
	local_coordinates_t output;
	output.origin=origin;
8002294e:	ee ca 00 28 	sub	r10,r7,40
80022952:	ea cb ff e4 	sub	r11,r5,-28
80022956:	f4 c8 00 00 	sub	r8,r10,0
8002295a:	f6 c9 00 00 	sub	r9,r11,0
8002295e:	72 0c       	ld.w	r12,r9[0x0]
80022960:	91 0c       	st.w	r8[0x0],r12
80022962:	72 1c       	ld.w	r12,r9[0x4]
80022964:	91 1c       	st.w	r8[0x4],r12
80022966:	72 2c       	ld.w	r12,r9[0x8]
80022968:	91 2c       	st.w	r8[0x8],r12
8002296a:	72 39       	ld.w	r9,r9[0xc]
8002296c:	91 39       	st.w	r8[0xc],r9
8002296e:	f6 e8 00 10 	ld.d	r8,r11[16]
80022972:	f4 e9 00 10 	st.d	r10[16],r8
80022976:	76 68       	ld.w	r8,r11[0x18]
80022978:	95 68       	st.w	r10[0x18],r8
	double small_radius=cos(deg_to_rad(position.latitude))*EARTH_RADIUS;
8002297a:	ea ea 00 08 	ld.d	r10,r5[8]
8002297e:	e0 68 2d 18 	mov	r8,11544
80022982:	ea 18 54 44 	orh	r8,0x5444
80022986:	e0 69 21 fb 	mov	r9,8699
8002298a:	ea 19 40 09 	orh	r9,0x4009
8002298e:	f0 16 00 03 	mcall	r6[12]
80022992:	14 98       	mov	r8,r10
80022994:	16 99       	mov	r9,r11
80022996:	10 9a       	mov	r10,r8
80022998:	12 9b       	mov	r11,r9
8002299a:	30 08       	mov	r8,0
8002299c:	e0 69 80 00 	mov	r9,32768
800229a0:	ea 19 40 66 	orh	r9,0x4066
800229a4:	f0 16 00 0c 	mcall	r6[48]
800229a8:	14 98       	mov	r8,r10
800229aa:	16 99       	mov	r9,r11
800229ac:	10 9a       	mov	r10,r8
800229ae:	12 9b       	mov	r11,r9
800229b0:	f0 16 00 ba 	mcall	r6[744]
800229b4:	fc 18 40 00 	movh	r8,0x4000
800229b8:	e0 69 54 a6 	mov	r9,21670
800229bc:	ea 19 41 58 	orh	r9,0x4158
800229c0:	f0 16 00 03 	mcall	r6[12]
800229c4:	14 98       	mov	r8,r10
800229c6:	16 99       	mov	r9,r11
800229c8:	ee e9 ff f8 	st.d	r7[-8],r8
	output.pos[X]=  (float)(sin(deg_to_rad((position.latitude-origin.latitude)))*EARTH_RADIUS);
800229cc:	ea ea 00 08 	ld.d	r10,r5[8]
800229d0:	ea e8 00 24 	ld.d	r8,r5[36]
800229d4:	f0 16 00 11 	mcall	r6[68]
800229d8:	14 98       	mov	r8,r10
800229da:	16 99       	mov	r9,r11
800229dc:	10 9a       	mov	r10,r8
800229de:	12 9b       	mov	r11,r9
800229e0:	e0 68 2d 18 	mov	r8,11544
800229e4:	ea 18 54 44 	orh	r8,0x5444
800229e8:	e0 69 21 fb 	mov	r9,8699
800229ec:	ea 19 40 09 	orh	r9,0x4009
800229f0:	f0 16 00 03 	mcall	r6[12]
800229f4:	14 98       	mov	r8,r10
800229f6:	16 99       	mov	r9,r11
800229f8:	10 9a       	mov	r10,r8
800229fa:	12 9b       	mov	r11,r9
800229fc:	30 08       	mov	r8,0
800229fe:	e0 69 80 00 	mov	r9,32768
80022a02:	ea 19 40 66 	orh	r9,0x4066
80022a06:	f0 16 00 0c 	mcall	r6[48]
80022a0a:	14 98       	mov	r8,r10
80022a0c:	16 99       	mov	r9,r11
80022a0e:	10 9a       	mov	r10,r8
80022a10:	12 9b       	mov	r11,r9
80022a12:	f0 16 00 b8 	mcall	r6[736]
80022a16:	fc 18 40 00 	movh	r8,0x4000
80022a1a:	e0 69 54 a6 	mov	r9,21670
80022a1e:	ea 19 41 58 	orh	r9,0x4158
80022a22:	f0 16 00 03 	mcall	r6[12]
80022a26:	14 98       	mov	r8,r10
80022a28:	16 99       	mov	r9,r11
80022a2a:	10 9a       	mov	r10,r8
80022a2c:	12 9b       	mov	r11,r9
80022a2e:	f0 16 00 09 	mcall	r6[36]
80022a32:	18 98       	mov	r8,r12
80022a34:	ef 48 ff c8 	st.w	r7[-56],r8
	output.pos[Y]=  (float)(sin(deg_to_rad((position.longitude-origin.longitude)))*small_radius);
80022a38:	ea ea 00 00 	ld.d	r10,r5[0]
80022a3c:	ea e8 00 1c 	ld.d	r8,r5[28]
80022a40:	f0 16 00 11 	mcall	r6[68]
80022a44:	14 98       	mov	r8,r10
80022a46:	16 99       	mov	r9,r11
80022a48:	10 9a       	mov	r10,r8
80022a4a:	12 9b       	mov	r11,r9
80022a4c:	e0 68 2d 18 	mov	r8,11544
80022a50:	ea 18 54 44 	orh	r8,0x5444
80022a54:	e0 69 21 fb 	mov	r9,8699
80022a58:	ea 19 40 09 	orh	r9,0x4009
80022a5c:	f0 16 00 03 	mcall	r6[12]
80022a60:	14 98       	mov	r8,r10
80022a62:	16 99       	mov	r9,r11
80022a64:	10 9a       	mov	r10,r8
80022a66:	12 9b       	mov	r11,r9
80022a68:	30 08       	mov	r8,0
80022a6a:	e0 69 80 00 	mov	r9,32768
80022a6e:	ea 19 40 66 	orh	r9,0x4066
80022a72:	f0 16 00 0c 	mcall	r6[48]
80022a76:	14 98       	mov	r8,r10
80022a78:	16 99       	mov	r9,r11
80022a7a:	10 9a       	mov	r10,r8
80022a7c:	12 9b       	mov	r11,r9
80022a7e:	f0 16 00 b8 	mcall	r6[736]
80022a82:	ee e8 ff f8 	ld.d	r8,r7[-8]
80022a86:	f0 16 00 03 	mcall	r6[12]
80022a8a:	14 98       	mov	r8,r10
80022a8c:	16 99       	mov	r9,r11
80022a8e:	10 9a       	mov	r10,r8
80022a90:	12 9b       	mov	r11,r9
80022a92:	f0 16 00 09 	mcall	r6[36]
80022a96:	18 98       	mov	r8,r12
80022a98:	ef 48 ff cc 	st.w	r7[-52],r8
	output.pos[Z]=  (float)(-(position.altitude - origin.altitude));
80022a9c:	6a 49       	ld.w	r9,r5[0x10]
80022a9e:	6a b8       	ld.w	r8,r5[0x2c]
80022aa0:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80022aa4:	ee 18 80 00 	eorh	r8,0x8000
80022aa8:	ef 48 ff d0 	st.w	r7[-48],r8
	output.heading=position.heading;
80022aac:	6a 58       	ld.w	r8,r5[0x14]
80022aae:	ef 48 ff d4 	st.w	r7[-44],r8
	//dbg_print_num(deg_to_rad((position.longitude-origin.longitude))*10000000,10);
	//dbg_print(", sin_long:");
	//dbg_print_num(sin(deg_to_rad((position.longitude-origin.longitude)))*small_radius*10000000,10);
	//dbg_print("\n");
	
	return output;
80022ab2:	06 9b       	mov	r11,r3
80022ab4:	ee ca 00 38 	sub	r10,r7,56
80022ab8:	f6 c8 00 00 	sub	r8,r11,0
80022abc:	f4 c9 00 00 	sub	r9,r10,0
80022ac0:	72 0c       	ld.w	r12,r9[0x0]
80022ac2:	91 0c       	st.w	r8[0x0],r12
80022ac4:	72 1c       	ld.w	r12,r9[0x4]
80022ac6:	91 1c       	st.w	r8[0x4],r12
80022ac8:	72 2c       	ld.w	r12,r9[0x8]
80022aca:	91 2c       	st.w	r8[0x8],r12
80022acc:	72 39       	ld.w	r9,r9[0xc]
80022ace:	91 39       	st.w	r8[0xc],r9
80022ad0:	f6 c8 ff f0 	sub	r8,r11,-16
80022ad4:	f4 c9 ff f0 	sub	r9,r10,-16
80022ad8:	72 0c       	ld.w	r12,r9[0x0]
80022ada:	91 0c       	st.w	r8[0x0],r12
80022adc:	72 1c       	ld.w	r12,r9[0x4]
80022ade:	91 1c       	st.w	r8[0x4],r12
80022ae0:	72 2c       	ld.w	r12,r9[0x8]
80022ae2:	91 2c       	st.w	r8[0x8],r12
80022ae4:	72 39       	ld.w	r9,r9[0xc]
80022ae6:	91 39       	st.w	r8[0xc],r9
80022ae8:	f6 c8 ff e0 	sub	r8,r11,-32
80022aec:	f4 c9 ff e0 	sub	r9,r10,-32
80022af0:	72 0a       	ld.w	r10,r9[0x0]
80022af2:	91 0a       	st.w	r8[0x0],r10
80022af4:	72 1a       	ld.w	r10,r9[0x4]
80022af6:	91 1a       	st.w	r8[0x4],r10
80022af8:	72 2a       	ld.w	r10,r9[0x8]
80022afa:	91 2a       	st.w	r8[0x8],r10
80022afc:	72 39       	ld.w	r9,r9[0xc]
80022afe:	91 39       	st.w	r8[0xc],r9
}
80022b00:	06 9c       	mov	r12,r3
80022b02:	2f 2d       	sub	sp,-56
80022b04:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80022b08:	80 02       	ld.sh	r2,r0[0x0]
80022b0a:	27 ca       	sub	r10,124

80022b0c <Quat_to_Aero>:

Aero_Attitude_t Quat_to_Aero(UQuat_t qe) {
80022b0c:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80022b10:	1a 97       	mov	r7,sp
80022b12:	20 3d       	sub	sp,12
80022b14:	4d 06       	lddpc	r6,80022c54 <Quat_to_Aero+0x148>
80022b16:	1e 26       	rsub	r6,pc
80022b18:	ee c5 ff e4 	sub	r5,r7,-28
80022b1c:	18 91       	mov	r1,r12
	Aero_Attitude_t aero;

	aero.rpy[0]= atan2(2*(qe.s*qe.v[0] + qe.v[1]*qe.v[2]) , (qe.s*qe.s - qe.v[0]*qe.v[0] - qe.v[1]*qe.v[1] + qe.v[2]*qe.v[2])); 
80022b1e:	6a 09       	ld.w	r9,r5[0x0]
80022b20:	6a 08       	ld.w	r8,r5[0x0]
80022b22:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80022b26:	6a 1a       	ld.w	r10,r5[0x4]
80022b28:	6a 18       	ld.w	r8,r5[0x4]
80022b2a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022b2e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80022b32:	6a 2a       	ld.w	r10,r5[0x8]
80022b34:	6a 28       	ld.w	r8,r5[0x8]
80022b36:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022b3a:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80022b3e:	6a 3a       	ld.w	r10,r5[0xc]
80022b40:	6a 38       	ld.w	r8,r5[0xc]
80022b42:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022b46:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80022b4a:	10 9c       	mov	r12,r8
80022b4c:	f0 16 00 02 	mcall	r6[8]
80022b50:	14 92       	mov	r2,r10
80022b52:	16 93       	mov	r3,r11
80022b54:	6a 09       	ld.w	r9,r5[0x0]
80022b56:	6a 18       	ld.w	r8,r5[0x4]
80022b58:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80022b5c:	6a 2a       	ld.w	r10,r5[0x8]
80022b5e:	6a 38       	ld.w	r8,r5[0xc]
80022b60:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022b64:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80022b68:	e5 a0 08 88 	cop	cp0,cr8,cr8,cr8,0x40
80022b6c:	10 9c       	mov	r12,r8
80022b6e:	f0 16 00 02 	mcall	r6[8]
80022b72:	04 98       	mov	r8,r2
80022b74:	06 99       	mov	r9,r3
80022b76:	f0 16 00 52 	mcall	r6[328]
80022b7a:	14 98       	mov	r8,r10
80022b7c:	16 99       	mov	r9,r11
80022b7e:	10 9a       	mov	r10,r8
80022b80:	12 9b       	mov	r11,r9
80022b82:	f0 16 00 09 	mcall	r6[36]
80022b86:	18 98       	mov	r8,r12
80022b88:	ef 48 ff f4 	st.w	r7[-12],r8
	aero.rpy[1]=-asin(2*(qe.v[0]*qe.v[2] - qe.s*qe.v[1]));
80022b8c:	6a 19       	ld.w	r9,r5[0x4]
80022b8e:	6a 38       	ld.w	r8,r5[0xc]
80022b90:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80022b94:	6a 0a       	ld.w	r10,r5[0x0]
80022b96:	6a 28       	ld.w	r8,r5[0x8]
80022b98:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022b9c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80022ba0:	fc 18 c0 00 	movh	r8,0xc000
80022ba4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80022ba8:	10 9c       	mov	r12,r8
80022baa:	f0 16 00 02 	mcall	r6[8]
80022bae:	14 98       	mov	r8,r10
80022bb0:	16 99       	mov	r9,r11
80022bb2:	10 9a       	mov	r10,r8
80022bb4:	12 9b       	mov	r11,r9
80022bb6:	f0 16 01 7c 	mcall	r6[1520]
80022bba:	14 98       	mov	r8,r10
80022bbc:	16 99       	mov	r9,r11
80022bbe:	10 9a       	mov	r10,r8
80022bc0:	12 9b       	mov	r11,r9
80022bc2:	f0 16 00 09 	mcall	r6[36]
80022bc6:	18 98       	mov	r8,r12
80022bc8:	ef 48 ff f8 	st.w	r7[-8],r8
	aero.rpy[2]= atan2(2*(qe.s*qe.v[2] + qe.v[0]*qe.v[1]) , (qe.s*qe.s + qe.v[0]*qe.v[0] - qe.v[1]*qe.v[1] - qe.v[2]*qe.v[2]));
80022bcc:	6a 09       	ld.w	r9,r5[0x0]
80022bce:	6a 08       	ld.w	r8,r5[0x0]
80022bd0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80022bd4:	6a 1a       	ld.w	r10,r5[0x4]
80022bd6:	6a 18       	ld.w	r8,r5[0x4]
80022bd8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022bdc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80022be0:	6a 2a       	ld.w	r10,r5[0x8]
80022be2:	6a 28       	ld.w	r8,r5[0x8]
80022be4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022be8:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80022bec:	6a 3a       	ld.w	r10,r5[0xc]
80022bee:	6a 38       	ld.w	r8,r5[0xc]
80022bf0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022bf4:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80022bf8:	10 9c       	mov	r12,r8
80022bfa:	f0 16 00 02 	mcall	r6[8]
80022bfe:	14 92       	mov	r2,r10
80022c00:	16 93       	mov	r3,r11
80022c02:	6a 09       	ld.w	r9,r5[0x0]
80022c04:	6a 38       	ld.w	r8,r5[0xc]
80022c06:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80022c0a:	6a 1a       	ld.w	r10,r5[0x4]
80022c0c:	6a 28       	ld.w	r8,r5[0x8]
80022c0e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022c12:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80022c16:	e5 a0 08 88 	cop	cp0,cr8,cr8,cr8,0x40
80022c1a:	10 9c       	mov	r12,r8
80022c1c:	f0 16 00 02 	mcall	r6[8]
80022c20:	04 98       	mov	r8,r2
80022c22:	06 99       	mov	r9,r3
80022c24:	f0 16 00 52 	mcall	r6[328]
80022c28:	14 98       	mov	r8,r10
80022c2a:	16 99       	mov	r9,r11
80022c2c:	10 9a       	mov	r10,r8
80022c2e:	12 9b       	mov	r11,r9
80022c30:	f0 16 00 09 	mcall	r6[36]
80022c34:	18 98       	mov	r8,r12
80022c36:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return aero;
80022c3a:	02 9a       	mov	r10,r1
80022c3c:	ee cb 00 0c 	sub	r11,r7,12
80022c40:	f6 e8 00 00 	ld.d	r8,r11[0]
80022c44:	f4 e9 00 00 	st.d	r10[0],r8
80022c48:	76 28       	ld.w	r8,r11[0x8]
80022c4a:	95 28       	st.w	r10[0x8],r8
}
80022c4c:	02 9c       	mov	r12,r1
80022c4e:	2f dd       	sub	sp,-12
80022c50:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
80022c54:	80 02       	ld.sh	r2,r0[0x0]
80022c56:	29 9a       	sub	r10,-103

80022c58 <get_yaw>:

float get_yaw(UQuat_t qe) {
80022c58:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80022c5c:	1a 97       	mov	r7,sp
80022c5e:	49 f6       	lddpc	r6,80022cd8 <get_yaw+0x80>
80022c60:	1e 26       	rsub	r6,pc
80022c62:	ee c5 ff e8 	sub	r5,r7,-24
	return  atan2(2*(qe.s*qe.v[2] + qe.v[0]*qe.v[1]) , (qe.s*qe.s + qe.v[0]*qe.v[0] - qe.v[1]*qe.v[1] - qe.v[2]*qe.v[2]));
80022c66:	6a 09       	ld.w	r9,r5[0x0]
80022c68:	6a 08       	ld.w	r8,r5[0x0]
80022c6a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80022c6e:	6a 1a       	ld.w	r10,r5[0x4]
80022c70:	6a 18       	ld.w	r8,r5[0x4]
80022c72:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022c76:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80022c7a:	6a 2a       	ld.w	r10,r5[0x8]
80022c7c:	6a 28       	ld.w	r8,r5[0x8]
80022c7e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022c82:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80022c86:	6a 3a       	ld.w	r10,r5[0xc]
80022c88:	6a 38       	ld.w	r8,r5[0xc]
80022c8a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022c8e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80022c92:	10 9c       	mov	r12,r8
80022c94:	f0 16 00 02 	mcall	r6[8]
80022c98:	14 92       	mov	r2,r10
80022c9a:	16 93       	mov	r3,r11
80022c9c:	6a 09       	ld.w	r9,r5[0x0]
80022c9e:	6a 38       	ld.w	r8,r5[0xc]
80022ca0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80022ca4:	6a 1a       	ld.w	r10,r5[0x4]
80022ca6:	6a 28       	ld.w	r8,r5[0x8]
80022ca8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022cac:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80022cb0:	e5 a0 08 88 	cop	cp0,cr8,cr8,cr8,0x40
80022cb4:	10 9c       	mov	r12,r8
80022cb6:	f0 16 00 02 	mcall	r6[8]
80022cba:	04 98       	mov	r8,r2
80022cbc:	06 99       	mov	r9,r3
80022cbe:	f0 16 00 52 	mcall	r6[328]
80022cc2:	14 98       	mov	r8,r10
80022cc4:	16 99       	mov	r9,r11
80022cc6:	10 9a       	mov	r10,r8
80022cc8:	12 9b       	mov	r11,r9
80022cca:	f0 16 00 09 	mcall	r6[36]
80022cce:	18 98       	mov	r8,r12
}
80022cd0:	10 9c       	mov	r12,r8
80022cd2:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80022cd6:	00 00       	add	r0,r0
80022cd8:	80 02       	ld.sh	r2,r0[0x0]
80022cda:	2a e4       	sub	r4,-82

80022cdc <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
80022cdc:	eb cd 40 c0 	pushm	r6-r7,lr
80022ce0:	1a 97       	mov	r7,sp
80022ce2:	20 6d       	sub	sp,24
80022ce4:	49 e6       	lddpc	r6,80022d5c <interpolate+0x80>
80022ce6:	1e 26       	rsub	r6,pc
80022ce8:	ef 4c ff f8 	st.w	r7[-8],r12
80022cec:	ef 4b ff f4 	st.w	r7[-12],r11
80022cf0:	ef 4a ff f0 	st.w	r7[-16],r10
80022cf4:	ef 49 ff ec 	st.w	r7[-20],r9
80022cf8:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
80022cfc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80022d00:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022d04:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80022d08:	c0 41       	brne	80022d10 <interpolate+0x34>
	{
		return y1;
80022d0a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022d0e:	c2 38       	rjmp	80022d54 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
80022d10:	ee f9 ff e8 	ld.w	r9,r7[-24]
80022d14:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022d18:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80022d1c:	ee fa ff f8 	ld.w	r10,r7[-8]
80022d20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80022d24:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80022d28:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80022d2c:	ee fa ff f0 	ld.w	r10,r7[-16]
80022d30:	ee f9 ff f4 	ld.w	r9,r7[-12]
80022d34:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80022d38:	12 9b       	mov	r11,r9
80022d3a:	10 9c       	mov	r12,r8
80022d3c:	f0 16 00 08 	mcall	r6[32]
80022d40:	18 98       	mov	r8,r12
80022d42:	10 99       	mov	r9,r8
80022d44:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022d48:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80022d4c:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
80022d50:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
80022d54:	10 9c       	mov	r12,r8
80022d56:	2f ad       	sub	sp,-24
80022d58:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022d5c:	80 02       	ld.sh	r2,r0[0x0]
80022d5e:	2b 6a       	sub	r10,-74

80022d60 <dbg_print_init>:

/**
 * \brief some utilities for printing strings and numbers 
 */
void dbg_print_init(byte_stream_t* debug_stream)
{
80022d60:	eb cd 40 c0 	pushm	r6-r7,lr
80022d64:	1a 97       	mov	r7,sp
80022d66:	20 1d       	sub	sp,4
80022d68:	48 66       	lddpc	r6,80022d80 <dbg_print_init+0x20>
80022d6a:	1e 26       	rsub	r6,pc
80022d6c:	ef 4c ff fc 	st.w	r7[-4],r12
	deb_stream=debug_stream;
80022d70:	ec f8 01 a8 	ld.w	r8,r6[424]
80022d74:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022d78:	91 09       	st.w	r8[0x0],r9
}
80022d7a:	2f fd       	sub	sp,-4
80022d7c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022d80:	80 02       	ld.sh	r2,r0[0x0]
80022d82:	2b ee       	sub	lr,-66

80022d84 <putstring>:

void putstring(byte_stream_t *out_stream, const char* s) {
80022d84:	eb cd 40 80 	pushm	r7,lr
80022d88:	1a 97       	mov	r7,sp
80022d8a:	20 2d       	sub	sp,8
80022d8c:	ef 4c ff fc 	st.w	r7[-4],r12
80022d90:	ef 4b ff f8 	st.w	r7[-8],r11
	if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022d94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022d98:	58 08       	cp.w	r8,0
80022d9a:	c2 10       	breq	80022ddc <putstring+0x58>
80022d9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022da0:	70 18       	ld.w	r8,r8[0x4]
80022da2:	58 08       	cp.w	r8,0
80022da4:	c1 51       	brne	80022dce <putstring+0x4a>
80022da6:	c1 c8       	rjmp	80022dde <putstring+0x5a>
	while (*s != 0) {
		out_stream->put(out_stream->data, *s);
80022da8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022dac:	70 18       	ld.w	r8,r8[0x4]
80022dae:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022db2:	13 89       	ld.ub	r9,r9[0x0]
80022db4:	12 9a       	mov	r10,r9
80022db6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022dba:	72 59       	ld.w	r9,r9[0x14]
80022dbc:	14 9b       	mov	r11,r10
80022dbe:	12 9c       	mov	r12,r9
80022dc0:	5d 18       	icall	r8
		s++;
80022dc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022dc6:	2f f8       	sub	r8,-1
80022dc8:	ef 48 ff f8 	st.w	r7[-8],r8
80022dcc:	c0 28       	rjmp	80022dd0 <putstring+0x4c>
	deb_stream=debug_stream;
}

void putstring(byte_stream_t *out_stream, const char* s) {
	if ((out_stream==NULL) || (out_stream->put==NULL)) return;
	while (*s != 0) {
80022dce:	d7 03       	nop
80022dd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022dd4:	11 88       	ld.ub	r8,r8[0x0]
80022dd6:	58 08       	cp.w	r8,0
80022dd8:	ce 81       	brne	80022da8 <putstring+0x24>
80022dda:	c0 28       	rjmp	80022dde <putstring+0x5a>
{
	deb_stream=debug_stream;
}

void putstring(byte_stream_t *out_stream, const char* s) {
	if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022ddc:	d7 03       	nop
	while (*s != 0) {
		out_stream->put(out_stream->data, *s);
		s++;
	}
}
80022dde:	2f ed       	sub	sp,-8
80022de0:	e3 cd 80 80 	ldm	sp++,r7,pc

80022de4 <putdigit>:

static const char alphabet[36] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

void putdigit(byte_stream_t *out_stream, unsigned c){
80022de4:	eb cd 40 c0 	pushm	r6-r7,lr
80022de8:	1a 97       	mov	r7,sp
80022dea:	20 2d       	sub	sp,8
80022dec:	49 76       	lddpc	r6,80022e48 <putdigit+0x64>
80022dee:	1e 26       	rsub	r6,pc
80022df0:	ef 4c ff fc 	st.w	r7[-4],r12
80022df4:	ef 4b ff f8 	st.w	r7[-8],r11
if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022df8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022dfc:	58 08       	cp.w	r8,0
80022dfe:	c1 d0       	breq	80022e38 <putdigit+0x54>
80022e00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022e04:	70 18       	ld.w	r8,r8[0x4]
80022e06:	58 08       	cp.w	r8,0
80022e08:	c1 a0       	breq	80022e3c <putdigit+0x58>
	
if (c > 35)
80022e0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022e0e:	e0 48 00 23 	cp.w	r8,35
80022e12:	e0 8b 00 17 	brhi	80022e40 <putdigit+0x5c>
    return;
  out_stream->put(out_stream->data,  alphabet[c]);
80022e16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022e1a:	70 18       	ld.w	r8,r8[0x4]
80022e1c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022e20:	ec fa 08 a0 	ld.w	r10,r6[2208]
80022e24:	f4 09 07 09 	ld.ub	r9,r10[r9]
80022e28:	12 9a       	mov	r10,r9
80022e2a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022e2e:	72 59       	ld.w	r9,r9[0x14]
80022e30:	14 9b       	mov	r11,r10
80022e32:	12 9c       	mov	r12,r9
80022e34:	5d 18       	icall	r8
80022e36:	c0 68       	rjmp	80022e42 <putdigit+0x5e>
}

static const char alphabet[36] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

void putdigit(byte_stream_t *out_stream, unsigned c){
if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022e38:	d7 03       	nop
80022e3a:	c0 48       	rjmp	80022e42 <putdigit+0x5e>
80022e3c:	d7 03       	nop
80022e3e:	c0 28       	rjmp	80022e42 <putdigit+0x5e>
	
if (c > 35)
    return;
80022e40:	d7 03       	nop
  out_stream->put(out_stream->data,  alphabet[c]);
}
80022e42:	2f ed       	sub	sp,-8
80022e44:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022e48:	80 02       	ld.sh	r2,r0[0x0]
80022e4a:	2c 72       	sub	r2,-57

80022e4c <putnum>:


/*
  Outputs numbers with less than 10 digits
*/
void putnum(byte_stream_t *out_stream, long c, char base){
80022e4c:	eb cd 40 c0 	pushm	r6-r7,lr
80022e50:	1a 97       	mov	r7,sp
80022e52:	20 7d       	sub	sp,28
80022e54:	4b 96       	lddpc	r6,80022f38 <putnum+0xec>
80022e56:	1e 26       	rsub	r6,pc
80022e58:	ef 4c ff ec 	st.w	r7[-20],r12
80022e5c:	ef 4b ff e8 	st.w	r7[-24],r11
80022e60:	14 98       	mov	r8,r10
80022e62:	ef 68 ff e4 	st.b	r7[-28],r8
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
80022e66:	30 a8       	mov	r8,10
80022e68:	ef 48 ff fc 	st.w	r7[-4],r8
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022e6c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022e70:	58 08       	cp.w	r8,0
80022e72:	c5 d0       	breq	80022f2c <putnum+0xe0>
80022e74:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022e78:	70 18       	ld.w	r8,r8[0x4]
80022e7a:	58 08       	cp.w	r8,0
80022e7c:	c5 a0       	breq	80022f30 <putnum+0xe4>
  /* Take Care of the sign */
  if(c < 0){
80022e7e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022e82:	58 08       	cp.w	r8,0
80022e84:	c1 04       	brge	80022ea4 <putnum+0x58>
    out_stream->put(out_stream->data,   '-');
80022e86:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022e8a:	70 18       	ld.w	r8,r8[0x4]
80022e8c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80022e90:	72 59       	ld.w	r9,r9[0x14]
80022e92:	32 db       	mov	r11,45
80022e94:	12 9c       	mov	r12,r9
80022e96:	5d 18       	icall	r8
    c = c*-1;
80022e98:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022e9c:	5c 38       	neg	r8
80022e9e:	ef 48 ff e8 	st.w	r7[-24],r8
80022ea2:	c0 a8       	rjmp	80022eb6 <putnum+0x6a>
  } else {
	  out_stream->put(out_stream->data,  ' ');
80022ea4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022ea8:	70 18       	ld.w	r8,r8[0x4]
80022eaa:	ee f9 ff ec 	ld.w	r9,r7[-20]
80022eae:	72 59       	ld.w	r9,r9[0x14]
80022eb0:	32 0b       	mov	r11,32
80022eb2:	12 9c       	mov	r12,r9
80022eb4:	5d 18       	icall	r8
    
  }

  do{
    i--;
80022eb6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022eba:	20 18       	sub	r8,1
80022ebc:	ef 48 ff fc 	st.w	r7[-4],r8
    storage[i] = c % base;
80022ec0:	ee fa ff fc 	ld.w	r10,r7[-4]
80022ec4:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022ec8:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022ecc:	f0 09 0c 08 	divs	r8,r8,r9
80022ed0:	12 98       	mov	r8,r9
80022ed2:	5c 58       	castu.b	r8
80022ed4:	ee 0a 00 09 	add	r9,r7,r10
80022ed8:	f3 68 ff f0 	st.b	r9[-16],r8
    c = c / base;
80022edc:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022ee0:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022ee4:	f0 09 0c 08 	divs	r8,r8,r9
80022ee8:	ef 48 ff e8 	st.w	r7[-24],r8
  }while((i >= 0) 
  && (c > 0)
  );
80022eec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022ef0:	58 08       	cp.w	r8,0
80022ef2:	c1 75       	brlt	80022f20 <putnum+0xd4>
80022ef4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022ef8:	58 08       	cp.w	r8,0
80022efa:	fe 99 ff de 	brgt	80022eb6 <putnum+0x6a>
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80022efe:	c1 18       	rjmp	80022f20 <putnum+0xd4>
     putdigit(out_stream, storage[i]);
80022f00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022f04:	ee 08 00 08 	add	r8,r7,r8
80022f08:	f1 38 ff f0 	ld.ub	r8,r8[-16]
80022f0c:	10 9b       	mov	r11,r8
80022f0e:	ee fc ff ec 	ld.w	r12,r7[-20]
80022f12:	f0 16 00 b0 	mcall	r6[704]
  && (c > 0)
  );
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80022f16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022f1a:	2f f8       	sub	r8,-1
80022f1c:	ef 48 ff fc 	st.w	r7[-4],r8
80022f20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022f24:	58 98       	cp.w	r8,9
80022f26:	fe 9a ff ed 	brle	80022f00 <putnum+0xb4>
80022f2a:	c0 48       	rjmp	80022f32 <putnum+0xe6>
  Outputs numbers with less than 10 digits
*/
void putnum(byte_stream_t *out_stream, long c, char base){
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022f2c:	d7 03       	nop
80022f2e:	c0 28       	rjmp	80022f32 <putnum+0xe6>
80022f30:	d7 03       	nop
  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
     putdigit(out_stream, storage[i]);
  }

}
80022f32:	2f 9d       	sub	sp,-28
80022f34:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022f38:	80 02       	ld.sh	r2,r0[0x0]
80022f3a:	2c da       	sub	r10,-51

80022f3c <putnum_tight>:

void putnum_tight(byte_stream_t *out_stream, long c, char base){
80022f3c:	eb cd 40 c0 	pushm	r6-r7,lr
80022f40:	1a 97       	mov	r7,sp
80022f42:	20 7d       	sub	sp,28
80022f44:	4b 46       	lddpc	r6,80023014 <putnum_tight+0xd8>
80022f46:	1e 26       	rsub	r6,pc
80022f48:	ef 4c ff ec 	st.w	r7[-20],r12
80022f4c:	ef 4b ff e8 	st.w	r7[-24],r11
80022f50:	14 98       	mov	r8,r10
80022f52:	ef 68 ff e4 	st.b	r7[-28],r8
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
80022f56:	30 a8       	mov	r8,10
80022f58:	ef 48 ff fc 	st.w	r7[-4],r8
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022f5c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022f60:	58 08       	cp.w	r8,0
80022f62:	c5 30       	breq	80023008 <putnum_tight+0xcc>
80022f64:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022f68:	70 18       	ld.w	r8,r8[0x4]
80022f6a:	58 08       	cp.w	r8,0
80022f6c:	c5 00       	breq	8002300c <putnum_tight+0xd0>
  /* Take Care of the sign */
  if(c < 0){
80022f6e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022f72:	58 08       	cp.w	r8,0
80022f74:	c0 f4       	brge	80022f92 <putnum_tight+0x56>
    out_stream->put(out_stream->data,   '-');
80022f76:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022f7a:	70 18       	ld.w	r8,r8[0x4]
80022f7c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80022f80:	72 59       	ld.w	r9,r9[0x14]
80022f82:	32 db       	mov	r11,45
80022f84:	12 9c       	mov	r12,r9
80022f86:	5d 18       	icall	r8
    c = c*-1;
80022f88:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022f8c:	5c 38       	neg	r8
80022f8e:	ef 48 ff e8 	st.w	r7[-24],r8
  } else {
    
  }

  do{
    i--;
80022f92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022f96:	20 18       	sub	r8,1
80022f98:	ef 48 ff fc 	st.w	r7[-4],r8
    storage[i] = c % base;
80022f9c:	ee fa ff fc 	ld.w	r10,r7[-4]
80022fa0:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022fa4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022fa8:	f0 09 0c 08 	divs	r8,r8,r9
80022fac:	12 98       	mov	r8,r9
80022fae:	5c 58       	castu.b	r8
80022fb0:	ee 0a 00 09 	add	r9,r7,r10
80022fb4:	f3 68 ff f0 	st.b	r9[-16],r8
    c = c / base;
80022fb8:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022fbc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022fc0:	f0 09 0c 08 	divs	r8,r8,r9
80022fc4:	ef 48 ff e8 	st.w	r7[-24],r8
  }while((i >= 0) 
  && (c > 0)
  );
80022fc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022fcc:	58 08       	cp.w	r8,0
80022fce:	c1 75       	brlt	80022ffc <putnum_tight+0xc0>
80022fd0:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022fd4:	58 08       	cp.w	r8,0
80022fd6:	fe 99 ff de 	brgt	80022f92 <putnum_tight+0x56>
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80022fda:	c1 18       	rjmp	80022ffc <putnum_tight+0xc0>
     putdigit(out_stream, storage[i]);
80022fdc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022fe0:	ee 08 00 08 	add	r8,r7,r8
80022fe4:	f1 38 ff f0 	ld.ub	r8,r8[-16]
80022fe8:	10 9b       	mov	r11,r8
80022fea:	ee fc ff ec 	ld.w	r12,r7[-20]
80022fee:	f0 16 00 b0 	mcall	r6[704]
  && (c > 0)
  );
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80022ff2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022ff6:	2f f8       	sub	r8,-1
80022ff8:	ef 48 ff fc 	st.w	r7[-4],r8
80022ffc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023000:	58 98       	cp.w	r8,9
80023002:	fe 9a ff ed 	brle	80022fdc <putnum_tight+0xa0>
80023006:	c0 48       	rjmp	8002300e <putnum_tight+0xd2>
}

void putnum_tight(byte_stream_t *out_stream, long c, char base){
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80023008:	d7 03       	nop
8002300a:	c0 28       	rjmp	8002300e <putnum_tight+0xd2>
8002300c:	d7 03       	nop
  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
     putdigit(out_stream, storage[i]);
  }

}
8002300e:	2f 9d       	sub	sp,-28
80023010:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023014:	80 02       	ld.sh	r2,r0[0x0]
80023016:	2d ca       	sub	r10,-36
80023018:	2d 00       	sub	r0,-48
8002301a:	00 00       	add	r0,r0
8002301c:	2e 00       	sub	r0,-32

8002301e <putfloat>:

void putfloat(byte_stream_t *out_stream, float c, int after_digits){
8002301e:	eb cd 40 c0 	pushm	r6-r7,lr
80023022:	1a 97       	mov	r7,sp
80023024:	20 8d       	sub	sp,32
80023026:	4b d6       	lddpc	r6,80023118 <putfloat+0xfa>
80023028:	1e 26       	rsub	r6,pc
8002302a:	ef 4c ff e8 	st.w	r7[-24],r12
8002302e:	ef 4b ff e4 	st.w	r7[-28],r11
80023032:	ef 4a ff e0 	st.w	r7[-32],r10
	int i;
	float num=c;
80023036:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002303a:	ef 48 ff f0 	st.w	r7[-16],r8
	if (c<0) {
8002303e:	30 18       	mov	r8,1
80023040:	ee fa ff e4 	ld.w	r10,r7[-28]
80023044:	30 09       	mov	r9,0
80023046:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8002304a:	e0 8c 00 03 	brvs	80023050 <putfloat+0x32>
8002304e:	c0 25       	brlt	80023052 <putfloat+0x34>
80023050:	30 08       	mov	r8,0
80023052:	5c 58       	castu.b	r8
80023054:	c0 d0       	breq	8002306e <putfloat+0x50>
		putstring(out_stream, "-");
80023056:	fe cb 00 3e 	sub	r11,pc,62
8002305a:	ee fc ff e8 	ld.w	r12,r7[-24]
8002305e:	f0 16 00 34 	mcall	r6[208]
		num=-c;
80023062:	ee f8 ff e4 	ld.w	r8,r7[-28]
80023066:	ee 18 80 00 	eorh	r8,0x8000
8002306a:	ef 48 ff f0 	st.w	r7[-16],r8
	}
	int whole=abs((int)num);
8002306e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023072:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80023076:	ef 48 ff fc 	st.w	r7[-4],r8
8002307a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002307e:	5c 48       	abs	r8
80023080:	ef 48 ff fc 	st.w	r7[-4],r8
80023084:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023088:	ef 48 ff f4 	st.w	r7[-12],r8
	float after=(num-(float)whole);
8002308c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023090:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80023094:	ee f9 ff f0 	ld.w	r9,r7[-16]
80023098:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8002309c:	ef 48 ff f8 	st.w	r7[-8],r8

	putnum_tight(out_stream, whole, 10);
800230a0:	30 aa       	mov	r10,10
800230a2:	ee fb ff f4 	ld.w	r11,r7[-12]
800230a6:	ee fc ff e8 	ld.w	r12,r7[-24]
800230aa:	f0 16 01 43 	mcall	r6[1292]
	putstring(out_stream, "."); 
800230ae:	fe cb 00 92 	sub	r11,pc,146
800230b2:	ee fc ff e8 	ld.w	r12,r7[-24]
800230b6:	f0 16 00 34 	mcall	r6[208]
	
	for (i=0; i<after_digits; i++) 
800230ba:	30 08       	mov	r8,0
800230bc:	ef 48 ff ec 	st.w	r7[-20],r8
800230c0:	c2 38       	rjmp	80023106 <putfloat+0xe8>
	{
		after*=10;
800230c2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800230c6:	fc 18 41 20 	movh	r8,0x4120
800230ca:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800230ce:	ef 48 ff f8 	st.w	r7[-8],r8
		putdigit(out_stream, (int)after);
800230d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800230d6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800230da:	10 9b       	mov	r11,r8
800230dc:	ee fc ff e8 	ld.w	r12,r7[-24]
800230e0:	f0 16 00 b0 	mcall	r6[704]
		after=after-(int)after;
800230e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800230e8:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800230ec:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
800230f0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800230f4:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800230f8:	ef 48 ff f8 	st.w	r7[-8],r8
	float after=(num-(float)whole);

	putnum_tight(out_stream, whole, 10);
	putstring(out_stream, "."); 
	
	for (i=0; i<after_digits; i++) 
800230fc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023100:	2f f8       	sub	r8,-1
80023102:	ef 48 ff ec 	st.w	r7[-20],r8
80023106:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002310a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002310e:	10 39       	cp.w	r9,r8
80023110:	cd 95       	brlt	800230c2 <putfloat+0xa4>
		after*=10;
		putdigit(out_stream, (int)after);
		after=after-(int)after;
	}
	
}
80023112:	2f 8d       	sub	sp,-32
80023114:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023118:	80 02       	ld.sh	r2,r0[0x0]
8002311a:	2e ac       	sub	r12,-22
8002311c:	28 00       	sub	r0,-128
8002311e:	00 00       	add	r0,r0
80023120:	2c 20       	sub	r0,-62
80023122:	00 00       	add	r0,r0
80023124:	29 20       	sub	r0,-110
	...

80023128 <print_vector>:


void print_vector(byte_stream_t *out_stream, float v[], int after_digits) {
80023128:	eb cd 40 c0 	pushm	r6-r7,lr
8002312c:	1a 97       	mov	r7,sp
8002312e:	20 4d       	sub	sp,16
80023130:	4a 06       	lddpc	r6,800231b0 <print_vector+0x88>
80023132:	1e 26       	rsub	r6,pc
80023134:	ef 4c ff f8 	st.w	r7[-8],r12
80023138:	ef 4b ff f4 	st.w	r7[-12],r11
8002313c:	ef 4a ff f0 	st.w	r7[-16],r10
	int i;
	putstring(out_stream, "(");
80023140:	fe cb 00 24 	sub	r11,pc,36
80023144:	ee fc ff f8 	ld.w	r12,r7[-8]
80023148:	f0 16 00 34 	mcall	r6[208]
	for (i=0; i<3; i++) {
8002314c:	30 08       	mov	r8,0
8002314e:	ef 48 ff fc 	st.w	r7[-4],r8
80023152:	c2 08       	rjmp	80023192 <print_vector+0x6a>
		putfloat(out_stream, v[i], after_digits);
80023154:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023158:	a3 68       	lsl	r8,0x2
8002315a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002315e:	f2 08 00 08 	add	r8,r9,r8
80023162:	70 08       	ld.w	r8,r8[0x0]
80023164:	ee fa ff f0 	ld.w	r10,r7[-16]
80023168:	10 9b       	mov	r11,r8
8002316a:	ee fc ff f8 	ld.w	r12,r7[-8]
8002316e:	f0 16 00 d3 	mcall	r6[844]
		if (i<2) putstring(out_stream, ", ");
80023172:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023176:	58 18       	cp.w	r8,1
80023178:	e0 89 00 08 	brgt	80023188 <print_vector+0x60>
8002317c:	fe cb 00 5c 	sub	r11,pc,92
80023180:	ee fc ff f8 	ld.w	r12,r7[-8]
80023184:	f0 16 00 34 	mcall	r6[208]


void print_vector(byte_stream_t *out_stream, float v[], int after_digits) {
	int i;
	putstring(out_stream, "(");
	for (i=0; i<3; i++) {
80023188:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002318c:	2f f8       	sub	r8,-1
8002318e:	ef 48 ff fc 	st.w	r7[-4],r8
80023192:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023196:	58 28       	cp.w	r8,2
80023198:	fe 9a ff de 	brle	80023154 <print_vector+0x2c>
		putfloat(out_stream, v[i], after_digits);
		if (i<2) putstring(out_stream, ", ");

	}
	putstring(out_stream, ") ");
8002319c:	fe cb 00 78 	sub	r11,pc,120
800231a0:	ee fc ff f8 	ld.w	r12,r7[-8]
800231a4:	f0 16 00 34 	mcall	r6[208]

}
800231a8:	2f cd       	sub	sp,-16
800231aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800231ae:	00 00       	add	r0,r0
800231b0:	80 02       	ld.sh	r2,r0[0x0]
800231b2:	2f b6       	sub	r6,-5

800231b4 <print_quaternion>:

void print_quaternion(byte_stream_t *out_stream, UQuat_t *quat, int after_digits) {
800231b4:	eb cd 40 c0 	pushm	r6-r7,lr
800231b8:	1a 97       	mov	r7,sp
800231ba:	20 3d       	sub	sp,12
800231bc:	49 96       	lddpc	r6,80023220 <print_quaternion+0x6c>
800231be:	1e 26       	rsub	r6,pc
800231c0:	ef 4c ff fc 	st.w	r7[-4],r12
800231c4:	ef 4b ff f8 	st.w	r7[-8],r11
800231c8:	ef 4a ff f4 	st.w	r7[-12],r10
	putstring(out_stream, "(");
800231cc:	fe cb 00 b0 	sub	r11,pc,176
800231d0:	ee fc ff fc 	ld.w	r12,r7[-4]
800231d4:	f0 16 00 34 	mcall	r6[208]
	putfloat(out_stream, quat->s, after_digits);
800231d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800231dc:	70 08       	ld.w	r8,r8[0x0]
800231de:	ee fa ff f4 	ld.w	r10,r7[-12]
800231e2:	10 9b       	mov	r11,r8
800231e4:	ee fc ff fc 	ld.w	r12,r7[-4]
800231e8:	f0 16 00 d3 	mcall	r6[844]
	putstring(out_stream, ", ");
800231ec:	fe cb 00 cc 	sub	r11,pc,204
800231f0:	ee fc ff fc 	ld.w	r12,r7[-4]
800231f4:	f0 16 00 34 	mcall	r6[208]
	print_vector(out_stream, quat->v, after_digits);
800231f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800231fc:	2f c8       	sub	r8,-4
800231fe:	ee fa ff f4 	ld.w	r10,r7[-12]
80023202:	10 9b       	mov	r11,r8
80023204:	ee fc ff fc 	ld.w	r12,r7[-4]
80023208:	f0 16 00 ef 	mcall	r6[956]
	putstring(out_stream, ") ");
8002320c:	fe cb 00 e8 	sub	r11,pc,232
80023210:	ee fc ff fc 	ld.w	r12,r7[-4]
80023214:	f0 16 00 34 	mcall	r6[208]
}
80023218:	2f dd       	sub	sp,-12
8002321a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002321e:	00 00       	add	r0,r0
80023220:	80 02       	ld.sh	r2,r0[0x0]
80023222:	30 42       	mov	r2,4

80023224 <dbg_print>:

void dbg_print(const char* s) {
80023224:	eb cd 40 c0 	pushm	r6-r7,lr
80023228:	1a 97       	mov	r7,sp
8002322a:	20 1d       	sub	sp,4
8002322c:	48 86       	lddpc	r6,8002324c <dbg_print+0x28>
8002322e:	1e 26       	rsub	r6,pc
80023230:	ef 4c ff fc 	st.w	r7[-4],r12
	putstring(deb_stream, s);
80023234:	ec f8 01 a8 	ld.w	r8,r6[424]
80023238:	70 08       	ld.w	r8,r8[0x0]
8002323a:	ee fb ff fc 	ld.w	r11,r7[-4]
8002323e:	10 9c       	mov	r12,r8
80023240:	f0 16 00 34 	mcall	r6[208]

}
80023244:	2f fd       	sub	sp,-4
80023246:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002324a:	00 00       	add	r0,r0
8002324c:	80 02       	ld.sh	r2,r0[0x0]
8002324e:	30 b2       	mov	r2,11

80023250 <dbg_print_num>:

void dbg_print_num(long c, char base) {
80023250:	eb cd 40 c0 	pushm	r6-r7,lr
80023254:	1a 97       	mov	r7,sp
80023256:	20 2d       	sub	sp,8
80023258:	48 b6       	lddpc	r6,80023284 <dbg_print_num+0x34>
8002325a:	1e 26       	rsub	r6,pc
8002325c:	ef 4c ff fc 	st.w	r7[-4],r12
80023260:	16 98       	mov	r8,r11
80023262:	ef 68 ff f8 	st.b	r7[-8],r8
	putnum(deb_stream, c, base);
80023266:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8002326a:	ec f8 01 a8 	ld.w	r8,r6[424]
8002326e:	70 08       	ld.w	r8,r8[0x0]
80023270:	12 9a       	mov	r10,r9
80023272:	ee fb ff fc 	ld.w	r11,r7[-4]
80023276:	10 9c       	mov	r12,r8
80023278:	f0 16 00 28 	mcall	r6[160]

}
8002327c:	2f ed       	sub	sp,-8
8002327e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023282:	00 00       	add	r0,r0
80023284:	80 02       	ld.sh	r2,r0[0x0]
80023286:	30 de       	mov	lr,13

80023288 <dbg_putfloat>:

void dbg_putfloat(float c, int after_digits) {
80023288:	eb cd 40 c0 	pushm	r6-r7,lr
8002328c:	1a 97       	mov	r7,sp
8002328e:	20 2d       	sub	sp,8
80023290:	48 a6       	lddpc	r6,800232b8 <dbg_putfloat+0x30>
80023292:	1e 26       	rsub	r6,pc
80023294:	ef 4c ff fc 	st.w	r7[-4],r12
80023298:	ef 4b ff f8 	st.w	r7[-8],r11
	putfloat(deb_stream, c, after_digits);
8002329c:	ec f8 01 a8 	ld.w	r8,r6[424]
800232a0:	70 08       	ld.w	r8,r8[0x0]
800232a2:	ee fa ff f8 	ld.w	r10,r7[-8]
800232a6:	ee fb ff fc 	ld.w	r11,r7[-4]
800232aa:	10 9c       	mov	r12,r8
800232ac:	f0 16 00 d3 	mcall	r6[844]
}
800232b0:	2f ed       	sub	sp,-8
800232b2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800232b6:	00 00       	add	r0,r0
800232b8:	80 02       	ld.sh	r2,r0[0x0]
800232ba:	31 16       	mov	r6,17

800232bc <dbg_print_vector>:

void dbg_print_vector(float v[], int after_digits) {
800232bc:	eb cd 40 c0 	pushm	r6-r7,lr
800232c0:	1a 97       	mov	r7,sp
800232c2:	20 2d       	sub	sp,8
800232c4:	48 a6       	lddpc	r6,800232ec <dbg_print_vector+0x30>
800232c6:	1e 26       	rsub	r6,pc
800232c8:	ef 4c ff fc 	st.w	r7[-4],r12
800232cc:	ef 4b ff f8 	st.w	r7[-8],r11
	print_vector(deb_stream, v, after_digits);
800232d0:	ec f8 01 a8 	ld.w	r8,r6[424]
800232d4:	70 08       	ld.w	r8,r8[0x0]
800232d6:	ee fa ff f8 	ld.w	r10,r7[-8]
800232da:	ee fb ff fc 	ld.w	r11,r7[-4]
800232de:	10 9c       	mov	r12,r8
800232e0:	f0 16 00 ef 	mcall	r6[956]
}
800232e4:	2f ed       	sub	sp,-8
800232e6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800232ea:	00 00       	add	r0,r0
800232ec:	80 02       	ld.sh	r2,r0[0x0]
800232ee:	31 4a       	mov	r10,20

800232f0 <dbg_print_quaternion>:

void dbg_print_quaternion(UQuat_t *quat, int after_digits) {
800232f0:	eb cd 40 c0 	pushm	r6-r7,lr
800232f4:	1a 97       	mov	r7,sp
800232f6:	20 2d       	sub	sp,8
800232f8:	48 a6       	lddpc	r6,80023320 <dbg_print_quaternion+0x30>
800232fa:	1e 26       	rsub	r6,pc
800232fc:	ef 4c ff fc 	st.w	r7[-4],r12
80023300:	ef 4b ff f8 	st.w	r7[-8],r11
	print_quaternion(deb_stream, quat, after_digits);
80023304:	ec f8 01 a8 	ld.w	r8,r6[424]
80023308:	70 08       	ld.w	r8,r8[0x0]
8002330a:	ee fa ff f8 	ld.w	r10,r7[-8]
8002330e:	ee fb ff fc 	ld.w	r11,r7[-4]
80023312:	10 9c       	mov	r12,r8
80023314:	f0 16 01 98 	mcall	r6[1632]
}
80023318:	2f ed       	sub	sp,-8
8002331a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002331e:	00 00       	add	r0,r0
80023320:	80 02       	ld.sh	r2,r0[0x0]
80023322:	31 7e       	mov	lr,23
80023324:	0a 00       	add	r0,r5

80023326 <dbg_log_value>:


void dbg_log_value(const char* msg, long value, char base) {
80023326:	eb cd 40 c0 	pushm	r6-r7,lr
8002332a:	1a 97       	mov	r7,sp
8002332c:	20 3d       	sub	sp,12
8002332e:	49 26       	lddpc	r6,80023374 <dbg_log_value+0x4e>
80023330:	1e 26       	rsub	r6,pc
80023332:	ef 4c ff fc 	st.w	r7[-4],r12
80023336:	ef 4b ff f8 	st.w	r7[-8],r11
8002333a:	14 98       	mov	r8,r10
8002333c:	ef 68 ff f4 	st.b	r7[-12],r8
	dbg_print(msg);
80023340:	ee fc ff fc 	ld.w	r12,r7[-4]
80023344:	f0 16 00 01 	mcall	r6[4]
	if (base>1) {
80023348:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8002334c:	30 18       	mov	r8,1
8002334e:	f0 09 18 00 	cp.b	r9,r8
80023352:	e0 88 00 09 	brls	80023364 <dbg_log_value+0x3e>
		dbg_print_num(value, base);
80023356:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002335a:	10 9b       	mov	r11,r8
8002335c:	ee fc ff f8 	ld.w	r12,r7[-8]
80023360:	f0 16 00 04 	mcall	r6[16]
	}
	dbg_print("\n");
80023364:	fe cc 00 40 	sub	r12,pc,64
80023368:	f0 16 00 01 	mcall	r6[4]

}
8002336c:	2f dd       	sub	sp,-12
8002336e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023372:	00 00       	add	r0,r0
80023374:	80 02       	ld.sh	r2,r0[0x0]
80023376:	31 b4       	mov	r4,27

80023378 <adcifa_get_calibration_data>:
#include "compiler.h"
#include "adcifa.h"

void adcifa_get_calibration_data(volatile avr32_adcifa_t * adcifa,
                                 adcifa_opt_t * p_adcifa_opt)
{
80023378:	eb cd 40 80 	pushm	r7,lr
8002337c:	1a 97       	mov	r7,sp
8002337e:	20 6d       	sub	sp,24
80023380:	ef 4c ff ec 	st.w	r7[-20],r12
80023384:	ef 4b ff e8 	st.w	r7[-24],r11
	// Get Offset Calibration
	signed int adc_ocal = (( *(volatile signed int*)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS + AVR32_FLASHC_FROW_OCAL_WORD)) &  AVR32_FLASHC_FROW_OCAL_MASK) >> AVR32_FLASHC_FROW_OCAL_OFFSET;
80023388:	e0 68 02 04 	mov	r8,516
8002338c:	ea 18 80 80 	orh	r8,0x8080
80023390:	70 08       	ld.w	r8,r8[0x0]
80023392:	e6 18 3f 00 	andh	r8,0x3f00,COH
80023396:	b9 48       	asr	r8,0x18
80023398:	ef 48 ff f0 	st.w	r7[-16],r8
	// Get Gain Calibration
	signed int adc_gcal = (( *(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS + AVR32_FLASHC_FROW_GCAL_WORD)) &  AVR32_FLASHC_FROW_GCAL_MASK) >> AVR32_FLASHC_FROW_GCAL_OFFSET;
8002339c:	e0 68 02 04 	mov	r8,516
800233a0:	ea 18 80 80 	orh	r8,0x8080
800233a4:	70 08       	ld.w	r8,r8[0x0]
800233a6:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
800233aa:	ef 48 ff f4 	st.w	r7[-12],r8
	//  Get S/H Calibration
	signed int adc_gain0 = (( *(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS + AVR32_FLASHC_FROW_GAIN0_WORD)) &  AVR32_FLASHC_FROW_GAIN0_MASK) >> AVR32_FLASHC_FROW_GAIN0_OFFSET;
800233ae:	e0 68 02 08 	mov	r8,520
800233b2:	ea 18 80 80 	orh	r8,0x8080
800233b6:	70 08       	ld.w	r8,r8[0x0]
800233b8:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
800233bc:	ef 48 ff f8 	st.w	r7[-8],r8
	signed int adc_gain1 = (( *(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS + AVR32_FLASHC_FROW_GAIN1_WORD)) &  AVR32_FLASHC_FROW_GAIN1_MASK) >> AVR32_FLASHC_FROW_GAIN1_OFFSET;
800233c0:	e0 68 02 08 	mov	r8,520
800233c4:	ea 18 80 80 	orh	r8,0x8080
800233c8:	70 08       	ld.w	r8,r8[0x0]
800233ca:	e6 18 03 ff 	andh	r8,0x3ff,COH
800233ce:	b1 48       	asr	r8,0x10
800233d0:	ef 48 ff fc 	st.w	r7[-4],r8

	// Get ADC Offset Calibration
	p_adcifa_opt->offset_calibration_value = adc_ocal;
800233d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800233d8:	5c 88       	casts.h	r8
800233da:	ee f9 ff e8 	ld.w	r9,r7[-24]
800233de:	b2 68       	st.h	r9[0xc],r8

	// Get ADC Gain Calibration
	p_adcifa_opt->gain_calibration_value = adc_gcal ;
800233e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800233e4:	5c 88       	casts.h	r8
800233e6:	ee f9 ff e8 	ld.w	r9,r7[-24]
800233ea:	b2 58       	st.h	r9[0xa],r8

	// Get Sample & Hold Gain Calibration for Seq 0
	p_adcifa_opt->sh0_calibration_value = adc_gain0;
800233ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800233f0:	5c 88       	casts.h	r8
800233f2:	ee f9 ff e8 	ld.w	r9,r7[-24]
800233f6:	b2 78       	st.h	r9[0xe],r8

	// Get Sample & Hold Gain Calibration for Seq 1
	p_adcifa_opt->sh1_calibration_value = adc_gain1;
800233f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800233fc:	5c 88       	casts.h	r8
800233fe:	ee f9 ff e8 	ld.w	r9,r7[-24]
80023402:	f3 58 00 10 	st.h	r9[16],r8
}
80023406:	2f ad       	sub	sp,-24
80023408:	e3 cd 80 80 	ldm	sp++,r7,pc

8002340c <adcifa_configure>:


U8 adcifa_configure(volatile avr32_adcifa_t * adcifa,
                    adcifa_opt_t * p_adcifa_opt,
                    U32 pb_hz)
{
8002340c:	eb cd 40 80 	pushm	r7,lr
80023410:	1a 97       	mov	r7,sp
80023412:	20 3d       	sub	sp,12
80023414:	ef 4c ff fc 	st.w	r7[-4],r12
80023418:	ef 4b ff f8 	st.w	r7[-8],r11
8002341c:	ef 4a ff f4 	st.w	r7[-12],r10

	// Sanity Check
	Assert( adcifa!=NULL );

	// Set the ADC configuration
	AVR32_ADCIFA.cfg = (p_adcifa_opt->sleep_mode_enable << AVR32_ADCIFA_CFG_SLEEP)
80023420:	fc 7a 24 00 	mov	r10,-187392
80023424:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023428:	f1 38 00 08 	ld.ub	r8,r8[8]
8002342c:	f0 09 15 02 	lsl	r9,r8,0x2
	                    | (p_adcifa_opt->single_sequencer_mode << AVR32_ADCIFA_CFG_SSMQ)
80023430:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023434:	11 e8       	ld.ub	r8,r8[0x6]
80023436:	a3 78       	lsl	r8,0x3
	                    | (p_adcifa_opt->free_running_mode_enable << AVR32_ADCIFA_CFG_FRM)
80023438:	10 49       	or	r9,r8
8002343a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002343e:	11 f8       	ld.ub	r8,r8[0x7]
80023440:	a5 68       	lsl	r8,0x4
	                    | (p_adcifa_opt->reference_source << AVR32_ADCIFA_CFG_RS)
80023442:	10 49       	or	r9,r8
80023444:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023448:	11 c8       	ld.ub	r8,r8[0x4]
8002344a:	a5 78       	lsl	r8,0x5
	                    | (p_adcifa_opt->sample_and_hold_disable << AVR32_ADCIFA_CFG_SHD)
8002344c:	10 49       	or	r9,r8
8002344e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023452:	11 d8       	ld.ub	r8,r8[0x5]
80023454:	a7 78       	lsl	r8,0x7
	                    | (((ADCIFA_START_UP_TIME * (p_adcifa_opt->frequency/1000))/32000) << AVR32_ADCIFA_CFG_SUT);
80023456:	f3 e8 10 08 	or	r8,r9,r8

	// Sanity Check
	Assert( adcifa!=NULL );

	// Set the ADC configuration
	AVR32_ADCIFA.cfg = (p_adcifa_opt->sleep_mode_enable << AVR32_ADCIFA_CFG_SLEEP)
8002345a:	10 9b       	mov	r11,r8
	                    | (p_adcifa_opt->single_sequencer_mode << AVR32_ADCIFA_CFG_SSMQ)
	                    | (p_adcifa_opt->free_running_mode_enable << AVR32_ADCIFA_CFG_FRM)
	                    | (p_adcifa_opt->reference_source << AVR32_ADCIFA_CFG_RS)
	                    | (p_adcifa_opt->sample_and_hold_disable << AVR32_ADCIFA_CFG_SHD)
	                    | (((ADCIFA_START_UP_TIME * (p_adcifa_opt->frequency/1000))/32000) << AVR32_ADCIFA_CFG_SUT);
8002345c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023460:	70 09       	ld.w	r9,r8[0x0]
80023462:	e0 68 4d d3 	mov	r8,19923
80023466:	ea 18 10 62 	orh	r8,0x1062
8002346a:	f2 08 06 48 	mulu.d	r8,r9,r8
8002346e:	a7 89       	lsr	r9,0x6
80023470:	e0 68 03 e8 	mov	r8,1000
80023474:	b1 39       	mul	r9,r8
80023476:	e0 68 4d d3 	mov	r8,19923
8002347a:	ea 18 10 62 	orh	r8,0x1062
8002347e:	f2 08 06 48 	mulu.d	r8,r9,r8
80023482:	f2 08 16 0b 	lsr	r8,r9,0xb
80023486:	b1 68       	lsl	r8,0x10

	// Sanity Check
	Assert( adcifa!=NULL );

	// Set the ADC configuration
	AVR32_ADCIFA.cfg = (p_adcifa_opt->sleep_mode_enable << AVR32_ADCIFA_CFG_SLEEP)
80023488:	f7 e8 10 08 	or	r8,r11,r8
8002348c:	95 18       	st.w	r10[0x4],r8
	                    | (p_adcifa_opt->reference_source << AVR32_ADCIFA_CFG_RS)
	                    | (p_adcifa_opt->sample_and_hold_disable << AVR32_ADCIFA_CFG_SHD)
	                    | (((ADCIFA_START_UP_TIME * (p_adcifa_opt->frequency/1000))/32000) << AVR32_ADCIFA_CFG_SUT);

	// Configure Clock  (rounded up)
	adcifa->ckdiv = (((pb_hz / (2*p_adcifa_opt->frequency))-1) << AVR32_ADCIFA_CKDIV_CNT_OFFSET) & AVR32_ADCIFA_CKDIV_CNT_MASK;
8002348e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023492:	70 08       	ld.w	r8,r8[0x0]
80023494:	f0 09 15 01 	lsl	r9,r8,0x1
80023498:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002349c:	f0 09 0d 08 	divu	r8,r8,r9
800234a0:	20 18       	sub	r8,1
800234a2:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
800234a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800234aa:	f1 49 00 44 	st.w	r8[68],r9

	// Set ADC Offset Calibration
	ADCIFA_set_offset_calibration(p_adcifa_opt->offset_calibration_value);
800234ae:	fc 78 24 00 	mov	r8,-187392
800234b2:	fc 79 24 00 	mov	r9,-187392
800234b6:	73 aa       	ld.w	r10,r9[0x68]
800234b8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800234bc:	92 69       	ld.sh	r9,r9[0xc]
800234be:	b9 69       	lsl	r9,0x18
800234c0:	e6 19 3f 00 	andh	r9,0x3f00,COH
800234c4:	f5 e9 10 09 	or	r9,r10,r9
800234c8:	f1 49 00 68 	st.w	r8[104],r9

	// Set ADC Gain Calibration
	ADCIFA_set_gain_calibration(p_adcifa_opt->gain_calibration_value);
800234cc:	fc 78 24 00 	mov	r8,-187392
800234d0:	fc 79 24 00 	mov	r9,-187392
800234d4:	73 aa       	ld.w	r10,r9[0x68]
800234d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800234da:	92 59       	ld.sh	r9,r9[0xa]
800234dc:	f3 d9 c0 0f 	bfextu	r9,r9,0x0,0xf
800234e0:	f5 e9 10 09 	or	r9,r10,r9
800234e4:	f1 49 00 68 	st.w	r8[104],r9

	// Set Sample & Hold Gain Calibration for seq 0
	ADCIFA_set_sh0_gain_calibration(p_adcifa_opt->sh0_calibration_value);
800234e8:	fc 78 24 00 	mov	r8,-187392
800234ec:	fc 79 24 00 	mov	r9,-187392
800234f0:	73 ba       	ld.w	r10,r9[0x6c]
800234f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800234f6:	92 79       	ld.sh	r9,r9[0xe]
800234f8:	f3 d9 c0 0a 	bfextu	r9,r9,0x0,0xa
800234fc:	f5 e9 10 09 	or	r9,r10,r9
80023500:	f1 49 00 6c 	st.w	r8[108],r9

	// Set Sample & Hold Gain Calibration for seq 1
	ADCIFA_set_sh1_gain_calibration(p_adcifa_opt->sh1_calibration_value);
80023504:	fc 78 24 00 	mov	r8,-187392
80023508:	fc 79 24 00 	mov	r9,-187392
8002350c:	73 ba       	ld.w	r10,r9[0x6c]
8002350e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023512:	f3 09 00 10 	ld.sh	r9,r9[16]
80023516:	b1 69       	lsl	r9,0x10
80023518:	e6 19 03 ff 	andh	r9,0x3ff,COH
8002351c:	f5 e9 10 09 	or	r9,r10,r9
80023520:	f1 49 00 6c 	st.w	r8[108],r9

	// Enable ADCIFA
	ADCIFA_enable();
80023524:	fc 78 24 00 	mov	r8,-187392
80023528:	fc 79 24 00 	mov	r9,-187392
8002352c:	72 19       	ld.w	r9,r9[0x4]
8002352e:	a1 a9       	sbr	r9,0x0
80023530:	91 19       	st.w	r8[0x4],r9
80023532:	c0 28       	rjmp	80023536 <adcifa_configure+0x12a>

	// Wait Startup Time
	while (1) {
		if (ADCIFA_is_startup_time()) break;
	}
80023534:	d7 03       	nop
	// Enable ADCIFA
	ADCIFA_enable();

	// Wait Startup Time
	while (1) {
		if (ADCIFA_is_startup_time()) break;
80023536:	fc 78 24 00 	mov	r8,-187392
8002353a:	70 28       	ld.w	r8,r8[0x8]
8002353c:	e2 18 40 00 	andl	r8,0x4000,COH
80023540:	cf a0       	breq	80023534 <adcifa_configure+0x128>
	}

	return ADCIFA_CONFIGURATION_ACCEPTED;
80023542:	30 18       	mov	r8,1
}
80023544:	10 9c       	mov	r12,r8
80023546:	2f dd       	sub	sp,-12
80023548:	e3 cd 80 80 	ldm	sp++,r7,pc

8002354c <adcifa_configure_sequencer>:

U8 adcifa_configure_sequencer(volatile avr32_adcifa_t * adcifa,
                              U8 sequencer,
                              adcifa_sequencer_opt_t * p_adcifa_sequencer_opt,
                              adcifa_sequencer_conversion_opt_t * p_adcifa_sequencer_conversion_opt)
{
8002354c:	eb cd 40 80 	pushm	r7,lr
80023550:	1a 97       	mov	r7,sp
80023552:	20 bd       	sub	sp,44
80023554:	ef 4c ff e0 	st.w	r7[-32],r12
80023558:	16 98       	mov	r8,r11
8002355a:	ef 4a ff d8 	st.w	r7[-40],r10
8002355e:	ef 49 ff d4 	st.w	r7[-44],r9
80023562:	ef 68 ff dc 	st.b	r7[-36],r8
	U8 g[8]={0};
80023566:	30 08       	mov	r8,0
80023568:	30 09       	mov	r9,0
8002356a:	ee e9 ff f4 	st.d	r7[-12],r8
	U8 mp[8]={0};
8002356e:	30 08       	mov	r8,0
80023570:	30 09       	mov	r9,0
80023572:	ee e9 ff ec 	st.d	r7[-20],r8
	U8 mn[8]={0};
80023576:	30 08       	mov	r8,0
80023578:	30 09       	mov	r9,0
8002357a:	ee e9 ff e4 	st.d	r7[-28],r8
	U8 i;
	// Sanity Check
	Assert( adcifa!=NULL );

	// Switch case with sequencer
	switch (sequencer) {
8002357e:	ef 38 ff dc 	ld.ub	r8,r7[-36]
80023582:	58 08       	cp.w	r8,0
80023584:	c0 60       	breq	80023590 <adcifa_configure_sequencer+0x44>
80023586:	58 18       	cp.w	r8,1
80023588:	e0 80 00 ed 	breq	80023762 <adcifa_configure_sequencer+0x216>
8002358c:	e0 8f 01 d7 	bral	8002393a <adcifa_configure_sequencer+0x3ee>
		// Sequencer 0
	case 0:
		// Configure Sequencer 0
		ADCIFA_configure_sequencer_0((p_adcifa_sequencer_opt->convnb-1),
80023590:	fc 78 24 00 	mov	r8,-187392
80023594:	ee f9 ff d8 	ld.w	r9,r7[-40]
80023598:	13 89       	ld.ub	r9,r9[0x0]
8002359a:	20 19       	sub	r9,1
8002359c:	f2 0a 15 10 	lsl	r10,r9,0x10
800235a0:	ee f9 ff d8 	ld.w	r9,r7[-40]
800235a4:	13 99       	ld.ub	r9,r9[0x1]
800235a6:	ad 69       	lsl	r9,0xc
800235a8:	12 4a       	or	r10,r9
800235aa:	ee f9 ff d8 	ld.w	r9,r7[-40]
800235ae:	13 a9       	ld.ub	r9,r9[0x2]
800235b0:	a9 69       	lsl	r9,0x8
800235b2:	12 4a       	or	r10,r9
800235b4:	ee f9 ff d8 	ld.w	r9,r7[-40]
800235b8:	13 b9       	ld.ub	r9,r9[0x3]
800235ba:	a3 69       	lsl	r9,0x2
800235bc:	12 4a       	or	r10,r9
800235be:	ee f9 ff d8 	ld.w	r9,r7[-40]
800235c2:	13 c9       	ld.ub	r9,r9[0x4]
800235c4:	a3 79       	lsl	r9,0x3
800235c6:	12 4a       	or	r10,r9
800235c8:	ee f9 ff d8 	ld.w	r9,r7[-40]
800235cc:	13 d9       	ld.ub	r9,r9[0x5]
800235ce:	a1 79       	lsl	r9,0x1
800235d0:	12 4a       	or	r10,r9
800235d2:	ee f9 ff d8 	ld.w	r9,r7[-40]
800235d6:	13 e9       	ld.ub	r9,r9[0x6]
800235d8:	f5 e9 10 09 	or	r9,r10,r9
800235dc:	91 59       	st.w	r8[0x14],r9
		                             (p_adcifa_sequencer_opt->sh_mode),
#endif
		                             (p_adcifa_sequencer_opt->half_word_adjustment),
		                             (p_adcifa_sequencer_opt->software_acknowledge));
		// Configure Gain for Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
800235de:	30 08       	mov	r8,0
800235e0:	ef 68 ff ff 	st.b	r7[-1],r8
800235e4:	c1 68       	rjmp	80023610 <adcifa_configure_sequencer+0xc4>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
800235e6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800235ea:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800235ee:	12 98       	mov	r8,r9
800235f0:	a1 78       	lsl	r8,0x1
800235f2:	12 08       	add	r8,r9
800235f4:	ee f9 ff d4 	ld.w	r9,r7[-44]
800235f8:	f2 08 00 08 	add	r8,r9,r8
800235fc:	11 a8       	ld.ub	r8,r8[0x2]
800235fe:	ee 0a 00 09 	add	r9,r7,r10
80023602:	f3 68 ff f4 	st.b	r9[-12],r8
		                             (p_adcifa_sequencer_opt->sh_mode),
#endif
		                             (p_adcifa_sequencer_opt->half_word_adjustment),
		                             (p_adcifa_sequencer_opt->software_acknowledge));
		// Configure Gain for Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
80023606:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002360a:	2f f8       	sub	r8,-1
8002360c:	ef 68 ff ff 	st.b	r7[-1],r8
80023610:	ee f8 ff d8 	ld.w	r8,r7[-40]
80023614:	11 88       	ld.ub	r8,r8[0x0]
80023616:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002361a:	f0 09 18 00 	cp.b	r9,r8
8002361e:	ce 43       	brcs	800235e6 <adcifa_configure_sequencer+0x9a>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2], g[1], g[0]);
80023620:	fc 78 24 00 	mov	r8,-187392
80023624:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80023628:	f2 0a 15 1c 	lsl	r10,r9,0x1c
8002362c:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80023630:	b9 69       	lsl	r9,0x18
80023632:	12 4a       	or	r10,r9
80023634:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80023638:	b5 69       	lsl	r9,0x14
8002363a:	12 4a       	or	r10,r9
8002363c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80023640:	b1 69       	lsl	r9,0x10
80023642:	12 4a       	or	r10,r9
80023644:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80023648:	ad 69       	lsl	r9,0xc
8002364a:	12 4a       	or	r10,r9
8002364c:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80023650:	a9 69       	lsl	r9,0x8
80023652:	12 4a       	or	r10,r9
80023654:	ef 39 ff f5 	ld.ub	r9,r7[-11]
80023658:	a5 69       	lsl	r9,0x4
8002365a:	12 4a       	or	r10,r9
8002365c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80023660:	f5 e9 10 09 	or	r9,r10,r9
80023664:	91 79       	st.w	r8[0x1c],r9

		// Configure Mux for Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80023666:	30 08       	mov	r8,0
80023668:	ef 68 ff ff 	st.b	r7[-1],r8
8002366c:	c2 68       	rjmp	800236b8 <adcifa_configure_sequencer+0x16c>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
8002366e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80023672:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80023676:	12 98       	mov	r8,r9
80023678:	a1 78       	lsl	r8,0x1
8002367a:	12 08       	add	r8,r9
8002367c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80023680:	f2 08 00 08 	add	r8,r9,r8
80023684:	11 88       	ld.ub	r8,r8[0x0]
80023686:	ee 0a 00 09 	add	r9,r7,r10
8002368a:	f3 68 ff ec 	st.b	r9[-20],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
8002368e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80023692:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80023696:	12 98       	mov	r8,r9
80023698:	a1 78       	lsl	r8,0x1
8002369a:	12 08       	add	r8,r9
8002369c:	ee f9 ff d4 	ld.w	r9,r7[-44]
800236a0:	f2 08 00 08 	add	r8,r9,r8
800236a4:	11 98       	ld.ub	r8,r8[0x1]
800236a6:	ee 0a 00 09 	add	r9,r7,r10
800236aa:	f3 68 ff e4 	st.b	r9[-28],r8
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2], g[1], g[0]);

		// Configure Mux for Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800236ae:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800236b2:	2f f8       	sub	r8,-1
800236b4:	ef 68 ff ff 	st.b	r7[-1],r8
800236b8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800236bc:	11 88       	ld.ub	r8,r8[0x0]
800236be:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800236c2:	f0 09 18 00 	cp.b	r9,r8
800236c6:	cd 43       	brcs	8002366e <adcifa_configure_sequencer+0x122>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel0p(mp[7], mp[6], mp[5], mp[4], mp[3], mp[2], mp[1], mp[0]);
800236c8:	fc 78 24 00 	mov	r8,-187392
800236cc:	ef 39 ff f3 	ld.ub	r9,r7[-13]
800236d0:	f2 0a 15 18 	lsl	r10,r9,0x18
800236d4:	ef 39 ff f2 	ld.ub	r9,r7[-14]
800236d8:	b1 69       	lsl	r9,0x10
800236da:	12 4a       	or	r10,r9
800236dc:	ef 39 ff f1 	ld.ub	r9,r7[-15]
800236e0:	a9 69       	lsl	r9,0x8
800236e2:	12 4a       	or	r10,r9
800236e4:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800236e8:	f5 e9 10 09 	or	r9,r10,r9
800236ec:	91 b9       	st.w	r8[0x2c],r9
800236ee:	fc 78 24 00 	mov	r8,-187392
800236f2:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800236f6:	f2 0a 15 18 	lsl	r10,r9,0x18
800236fa:	ef 39 ff ee 	ld.ub	r9,r7[-18]
800236fe:	b1 69       	lsl	r9,0x10
80023700:	12 4a       	or	r10,r9
80023702:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80023706:	a9 69       	lsl	r9,0x8
80023708:	12 4a       	or	r10,r9
8002370a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002370e:	f5 e9 10 09 	or	r9,r10,r9
80023712:	91 99       	st.w	r8[0x24],r9
		ADCIFA_configure_muxsel0n(mn[7], mn[6], mn[5], mn[4], mn[3], mn[2], mn[1], mn[0]);
80023714:	fc 78 24 00 	mov	r8,-187392
80023718:	ef 39 ff eb 	ld.ub	r9,r7[-21]
8002371c:	f2 0a 15 18 	lsl	r10,r9,0x18
80023720:	ef 39 ff ea 	ld.ub	r9,r7[-22]
80023724:	b1 69       	lsl	r9,0x10
80023726:	12 4a       	or	r10,r9
80023728:	ef 39 ff e9 	ld.ub	r9,r7[-23]
8002372c:	a9 69       	lsl	r9,0x8
8002372e:	12 4a       	or	r10,r9
80023730:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80023734:	f5 e9 10 09 	or	r9,r10,r9
80023738:	91 f9       	st.w	r8[0x3c],r9
8002373a:	fc 78 24 00 	mov	r8,-187392
8002373e:	ef 39 ff e7 	ld.ub	r9,r7[-25]
80023742:	f2 0a 15 18 	lsl	r10,r9,0x18
80023746:	ef 39 ff e6 	ld.ub	r9,r7[-26]
8002374a:	b1 69       	lsl	r9,0x10
8002374c:	12 4a       	or	r10,r9
8002374e:	ef 39 ff e5 	ld.ub	r9,r7[-27]
80023752:	a9 69       	lsl	r9,0x8
80023754:	12 4a       	or	r10,r9
80023756:	ef 39 ff e4 	ld.ub	r9,r7[-28]
8002375a:	f5 e9 10 09 	or	r9,r10,r9
8002375e:	91 d9       	st.w	r8[0x34],r9
		break;
80023760:	ce d8       	rjmp	8002393a <adcifa_configure_sequencer+0x3ee>
		// Sequencer 1
	case 1:
		// Configure Sequencer 1
		ADCIFA_configure_sequencer_1((p_adcifa_sequencer_opt->convnb-1),
80023762:	fc 78 24 00 	mov	r8,-187392
80023766:	ee f9 ff d8 	ld.w	r9,r7[-40]
8002376a:	13 89       	ld.ub	r9,r9[0x0]
8002376c:	20 19       	sub	r9,1
8002376e:	f2 0a 15 10 	lsl	r10,r9,0x10
80023772:	ee f9 ff d8 	ld.w	r9,r7[-40]
80023776:	13 99       	ld.ub	r9,r9[0x1]
80023778:	ad 69       	lsl	r9,0xc
8002377a:	12 4a       	or	r10,r9
8002377c:	ee f9 ff d8 	ld.w	r9,r7[-40]
80023780:	13 a9       	ld.ub	r9,r9[0x2]
80023782:	a9 69       	lsl	r9,0x8
80023784:	12 4a       	or	r10,r9
80023786:	ee f9 ff d8 	ld.w	r9,r7[-40]
8002378a:	13 b9       	ld.ub	r9,r9[0x3]
8002378c:	a3 69       	lsl	r9,0x2
8002378e:	12 4a       	or	r10,r9
80023790:	ee f9 ff d8 	ld.w	r9,r7[-40]
80023794:	13 c9       	ld.ub	r9,r9[0x4]
80023796:	a3 79       	lsl	r9,0x3
80023798:	12 4a       	or	r10,r9
8002379a:	ee f9 ff d8 	ld.w	r9,r7[-40]
8002379e:	13 d9       	ld.ub	r9,r9[0x5]
800237a0:	a1 79       	lsl	r9,0x1
800237a2:	f5 e9 10 09 	or	r9,r10,r9
800237a6:	12 9a       	mov	r10,r9
800237a8:	a5 aa       	sbr	r10,0x4
800237aa:	ee f9 ff d8 	ld.w	r9,r7[-40]
800237ae:	13 e9       	ld.ub	r9,r9[0x6]
800237b0:	f5 e9 10 09 	or	r9,r10,r9
800237b4:	91 69       	st.w	r8[0x18],r9
#endif
		                             (p_adcifa_sequencer_opt->half_word_adjustment),
		                             (p_adcifa_sequencer_opt->software_acknowledge));

		// Configure Gain for Sequencer 1
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
800237b6:	30 08       	mov	r8,0
800237b8:	ef 68 ff ff 	st.b	r7[-1],r8
800237bc:	c1 68       	rjmp	800237e8 <adcifa_configure_sequencer+0x29c>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
800237be:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800237c2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800237c6:	12 98       	mov	r8,r9
800237c8:	a1 78       	lsl	r8,0x1
800237ca:	12 08       	add	r8,r9
800237cc:	ee f9 ff d4 	ld.w	r9,r7[-44]
800237d0:	f2 08 00 08 	add	r8,r9,r8
800237d4:	11 a8       	ld.ub	r8,r8[0x2]
800237d6:	ee 0a 00 09 	add	r9,r7,r10
800237da:	f3 68 ff f4 	st.b	r9[-12],r8
#endif
		                             (p_adcifa_sequencer_opt->half_word_adjustment),
		                             (p_adcifa_sequencer_opt->software_acknowledge));

		// Configure Gain for Sequencer 1
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
800237de:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800237e2:	2f f8       	sub	r8,-1
800237e4:	ef 68 ff ff 	st.b	r7[-1],r8
800237e8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800237ec:	11 88       	ld.ub	r8,r8[0x0]
800237ee:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800237f2:	f0 09 18 00 	cp.b	r9,r8
800237f6:	ce 43       	brcs	800237be <adcifa_configure_sequencer+0x272>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2], g[1], g[0]);
800237f8:	fc 78 24 00 	mov	r8,-187392
800237fc:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80023800:	f2 0a 15 1c 	lsl	r10,r9,0x1c
80023804:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80023808:	b9 69       	lsl	r9,0x18
8002380a:	12 4a       	or	r10,r9
8002380c:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80023810:	b5 69       	lsl	r9,0x14
80023812:	12 4a       	or	r10,r9
80023814:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80023818:	b1 69       	lsl	r9,0x10
8002381a:	12 4a       	or	r10,r9
8002381c:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80023820:	ad 69       	lsl	r9,0xc
80023822:	12 4a       	or	r10,r9
80023824:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80023828:	a9 69       	lsl	r9,0x8
8002382a:	12 4a       	or	r10,r9
8002382c:	ef 39 ff f5 	ld.ub	r9,r7[-11]
80023830:	a5 69       	lsl	r9,0x4
80023832:	12 4a       	or	r10,r9
80023834:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80023838:	f5 e9 10 09 	or	r9,r10,r9
8002383c:	91 89       	st.w	r8[0x20],r9

		// Configure Mux for Sequencer 1
		for (i = 0 ; i < p_adcifa_sequencer_opt->convnb; i++) {
8002383e:	30 08       	mov	r8,0
80023840:	ef 68 ff ff 	st.b	r7[-1],r8
80023844:	c2 68       	rjmp	80023890 <adcifa_configure_sequencer+0x344>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
80023846:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8002384a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002384e:	12 98       	mov	r8,r9
80023850:	a1 78       	lsl	r8,0x1
80023852:	12 08       	add	r8,r9
80023854:	ee f9 ff d4 	ld.w	r9,r7[-44]
80023858:	f2 08 00 08 	add	r8,r9,r8
8002385c:	11 88       	ld.ub	r8,r8[0x0]
8002385e:	ee 0a 00 09 	add	r9,r7,r10
80023862:	f3 68 ff ec 	st.b	r9[-20],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
80023866:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8002386a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002386e:	12 98       	mov	r8,r9
80023870:	a1 78       	lsl	r8,0x1
80023872:	12 08       	add	r8,r9
80023874:	ee f9 ff d4 	ld.w	r9,r7[-44]
80023878:	f2 08 00 08 	add	r8,r9,r8
8002387c:	11 98       	ld.ub	r8,r8[0x1]
8002387e:	ee 0a 00 09 	add	r9,r7,r10
80023882:	f3 68 ff e4 	st.b	r9[-28],r8
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2], g[1], g[0]);

		// Configure Mux for Sequencer 1
		for (i = 0 ; i < p_adcifa_sequencer_opt->convnb; i++) {
80023886:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002388a:	2f f8       	sub	r8,-1
8002388c:	ef 68 ff ff 	st.b	r7[-1],r8
80023890:	ee f8 ff d8 	ld.w	r8,r7[-40]
80023894:	11 88       	ld.ub	r8,r8[0x0]
80023896:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002389a:	f0 09 18 00 	cp.b	r9,r8
8002389e:	cd 43       	brcs	80023846 <adcifa_configure_sequencer+0x2fa>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel1p(mp[7], mp[6], mp[5], mp[4], mp[3], mp[2], mp[1], mp[0]);
800238a0:	fc 78 24 00 	mov	r8,-187392
800238a4:	ef 39 ff f3 	ld.ub	r9,r7[-13]
800238a8:	f2 0a 15 18 	lsl	r10,r9,0x18
800238ac:	ef 39 ff f2 	ld.ub	r9,r7[-14]
800238b0:	b1 69       	lsl	r9,0x10
800238b2:	12 4a       	or	r10,r9
800238b4:	ef 39 ff f1 	ld.ub	r9,r7[-15]
800238b8:	a9 69       	lsl	r9,0x8
800238ba:	12 4a       	or	r10,r9
800238bc:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800238c0:	f5 e9 10 09 	or	r9,r10,r9
800238c4:	91 c9       	st.w	r8[0x30],r9
800238c6:	fc 78 24 00 	mov	r8,-187392
800238ca:	ef 39 ff ef 	ld.ub	r9,r7[-17]
800238ce:	f2 0a 15 18 	lsl	r10,r9,0x18
800238d2:	ef 39 ff ee 	ld.ub	r9,r7[-18]
800238d6:	b1 69       	lsl	r9,0x10
800238d8:	12 4a       	or	r10,r9
800238da:	ef 39 ff ed 	ld.ub	r9,r7[-19]
800238de:	a9 69       	lsl	r9,0x8
800238e0:	12 4a       	or	r10,r9
800238e2:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800238e6:	f5 e9 10 09 	or	r9,r10,r9
800238ea:	91 a9       	st.w	r8[0x28],r9
		ADCIFA_configure_muxsel1n(mn[7], mn[6], mn[5], mn[4], mn[3], mn[2], mn[1], mn[0]);
800238ec:	fc 78 24 00 	mov	r8,-187392
800238f0:	ef 39 ff eb 	ld.ub	r9,r7[-21]
800238f4:	f2 0a 15 18 	lsl	r10,r9,0x18
800238f8:	ef 39 ff ea 	ld.ub	r9,r7[-22]
800238fc:	b1 69       	lsl	r9,0x10
800238fe:	12 4a       	or	r10,r9
80023900:	ef 39 ff e9 	ld.ub	r9,r7[-23]
80023904:	a9 69       	lsl	r9,0x8
80023906:	12 4a       	or	r10,r9
80023908:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8002390c:	f5 e9 10 09 	or	r9,r10,r9
80023910:	f1 49 00 40 	st.w	r8[64],r9
80023914:	fc 78 24 00 	mov	r8,-187392
80023918:	ef 39 ff e7 	ld.ub	r9,r7[-25]
8002391c:	f2 0a 15 18 	lsl	r10,r9,0x18
80023920:	ef 39 ff e6 	ld.ub	r9,r7[-26]
80023924:	b1 69       	lsl	r9,0x10
80023926:	12 4a       	or	r10,r9
80023928:	ef 39 ff e5 	ld.ub	r9,r7[-27]
8002392c:	a9 69       	lsl	r9,0x8
8002392e:	12 4a       	or	r10,r9
80023930:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80023934:	f5 e9 10 09 	or	r9,r10,r9
80023938:	91 e9       	st.w	r8[0x38],r9
		break;
	default:
		break;
	}
	return ADCIFA_CONFIGURATION_ACCEPTED;
8002393a:	30 18       	mov	r8,1
}
8002393c:	10 9c       	mov	r12,r8
8002393e:	2f 5d       	sub	sp,-44
80023940:	e3 cd 80 80 	ldm	sp++,r7,pc

80023944 <adcifa_configure_window_monitor>:

void adcifa_configure_window_monitor( volatile avr32_adcifa_t * adcifa,
                                      U8 sequencer,
                                      adcifa_window_monitor_opt_t * adc_window_monitor_opt )
{
80023944:	eb cd 40 80 	pushm	r7,lr
80023948:	1a 97       	mov	r7,sp
8002394a:	20 4d       	sub	sp,16
8002394c:	ef 4c ff f8 	st.w	r7[-8],r12
80023950:	16 98       	mov	r8,r11
80023952:	ef 4a ff f0 	st.w	r7[-16],r10
80023956:	ef 68 ff f4 	st.b	r7[-12],r8
	switch (sequencer) {
8002395a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002395e:	58 08       	cp.w	r8,0
80023960:	c0 40       	breq	80023968 <adcifa_configure_window_monitor+0x24>
80023962:	58 18       	cp.w	r8,1
80023964:	c3 d0       	breq	800239de <adcifa_configure_window_monitor+0x9a>
80023966:	c7 68       	rjmp	80023a52 <adcifa_configure_window_monitor+0x10e>
	int temp;
	case 0:
		// Configure sequencer 0
		temp = adcifa->imr & AVR32_ADCIFA_WM0_MASK;
80023968:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002396c:	71 e8       	ld.w	r8,r8[0x78]
8002396e:	e2 18 04 00 	andl	r8,0x400,COH
80023972:	ef 48 ff fc 	st.w	r7[-4],r8
		adcifa->idr = temp;         // disable interrupt if it was enabled
80023976:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002397a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002397e:	f1 49 00 74 	st.w	r8[116],r9
		adcifa->wcfg0 = (adc_window_monitor_opt->source_index << AVR32_ADCIFA_WCFG0_SRC_OFFSET)
80023982:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023986:	11 98       	ld.ub	r8,r8[0x1]
80023988:	f0 09 15 1b 	lsl	r9,r8,0x1b
		              | (adc_window_monitor_opt->high_threshold << AVR32_ADCIFA_WCFG0_HT_OFFSET)
8002398c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023990:	90 28       	ld.sh	r8,r8[0x4]
80023992:	5c 78       	castu.h	r8
80023994:	ad 68       	lsl	r8,0xc
		              | (adc_window_monitor_opt->low_threshold << AVR32_ADCIFA_WCFG0_LT_OFFSET);
80023996:	10 49       	or	r9,r8
80023998:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002399c:	90 18       	ld.sh	r8,r8[0x2]
8002399e:	5c 78       	castu.h	r8
	int temp;
	case 0:
		// Configure sequencer 0
		temp = adcifa->imr & AVR32_ADCIFA_WM0_MASK;
		adcifa->idr = temp;         // disable interrupt if it was enabled
		adcifa->wcfg0 = (adc_window_monitor_opt->source_index << AVR32_ADCIFA_WCFG0_SRC_OFFSET)
800239a0:	f3 e8 10 08 	or	r8,r9,r8
800239a4:	10 99       	mov	r9,r8
800239a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800239aa:	f1 49 00 58 	st.w	r8[88],r9
		              | (adc_window_monitor_opt->high_threshold << AVR32_ADCIFA_WCFG0_HT_OFFSET)
		              | (adc_window_monitor_opt->low_threshold << AVR32_ADCIFA_WCFG0_LT_OFFSET);
		// Clear any pending interrupt before setting new mode
		adcifa->scr = AVR32_ADCIFA_WM0_MASK;
800239ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800239b2:	e0 69 04 00 	mov	r9,1024
800239b6:	91 39       	st.w	r8[0xc],r9
		adcifa->wcfg0 |= (adc_window_monitor_opt->mode << AVR32_ADCIFA_WCFG0_WM_OFFSET);
800239b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800239bc:	71 69       	ld.w	r9,r8[0x58]
800239be:	ee f8 ff f0 	ld.w	r8,r7[-16]
800239c2:	11 88       	ld.ub	r8,r8[0x0]
800239c4:	b9 68       	lsl	r8,0x18
800239c6:	10 49       	or	r9,r8
800239c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800239cc:	f1 49 00 58 	st.w	r8[88],r9
		adcifa->ier = temp;         // enable interrupt if it was enabled
800239d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800239d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800239d8:	f1 49 00 70 	st.w	r8[112],r9
		break;
800239dc:	c3 b8       	rjmp	80023a52 <adcifa_configure_window_monitor+0x10e>
	case 1:
		// Configure sequencer 1
		temp = adcifa->imr & AVR32_ADCIFA_WM1_MASK;
800239de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800239e2:	71 e8       	ld.w	r8,r8[0x78]
800239e4:	e2 18 08 00 	andl	r8,0x800,COH
800239e8:	ef 48 ff fc 	st.w	r7[-4],r8
		adcifa->idr = temp;         // disable interrupt if it was enabled
800239ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
800239f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800239f4:	f1 49 00 74 	st.w	r8[116],r9
		adcifa->wcfg1 = (adc_window_monitor_opt->source_index << AVR32_ADCIFA_WCFG1_SRC_OFFSET)
800239f8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800239fc:	11 98       	ld.ub	r8,r8[0x1]
800239fe:	f0 09 15 1b 	lsl	r9,r8,0x1b
		              | (adc_window_monitor_opt->high_threshold << AVR32_ADCIFA_WCFG1_HT_OFFSET)
80023a02:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023a06:	90 28       	ld.sh	r8,r8[0x4]
80023a08:	5c 78       	castu.h	r8
80023a0a:	ad 68       	lsl	r8,0xc
		              | (adc_window_monitor_opt->low_threshold << AVR32_ADCIFA_WCFG1_LT_OFFSET);
80023a0c:	10 49       	or	r9,r8
80023a0e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023a12:	90 18       	ld.sh	r8,r8[0x2]
80023a14:	5c 78       	castu.h	r8
		break;
	case 1:
		// Configure sequencer 1
		temp = adcifa->imr & AVR32_ADCIFA_WM1_MASK;
		adcifa->idr = temp;         // disable interrupt if it was enabled
		adcifa->wcfg1 = (adc_window_monitor_opt->source_index << AVR32_ADCIFA_WCFG1_SRC_OFFSET)
80023a16:	f3 e8 10 08 	or	r8,r9,r8
80023a1a:	10 99       	mov	r9,r8
80023a1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023a20:	f1 49 00 5c 	st.w	r8[92],r9
		              | (adc_window_monitor_opt->high_threshold << AVR32_ADCIFA_WCFG1_HT_OFFSET)
		              | (adc_window_monitor_opt->low_threshold << AVR32_ADCIFA_WCFG1_LT_OFFSET);
		// Clear any pending interrupt before setting new mode
		adcifa->scr = AVR32_ADCIFA_WM1_MASK;
80023a24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023a28:	e0 69 08 00 	mov	r9,2048
80023a2c:	91 39       	st.w	r8[0xc],r9
		adcifa->wcfg1 |= (adc_window_monitor_opt->mode << AVR32_ADCIFA_WCFG1_WM_OFFSET);
80023a2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023a32:	71 79       	ld.w	r9,r8[0x5c]
80023a34:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023a38:	11 88       	ld.ub	r8,r8[0x0]
80023a3a:	b9 68       	lsl	r8,0x18
80023a3c:	10 49       	or	r9,r8
80023a3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023a42:	f1 49 00 5c 	st.w	r8[92],r9
		adcifa->ier = temp;         // enable interrupt if it was enabled
80023a46:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023a4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023a4e:	f1 49 00 70 	st.w	r8[112],r9
		break;
	default:
		break;
	}
}
80023a52:	2f cd       	sub	sp,-16
80023a54:	e3 cd 80 80 	ldm	sp++,r7,pc

80023a58 <adcifa_start_sequencer>:


void adcifa_start_sequencer(volatile avr32_adcifa_t * adcifa, U8 sequencer)
{
80023a58:	eb cd 40 80 	pushm	r7,lr
80023a5c:	1a 97       	mov	r7,sp
80023a5e:	20 2d       	sub	sp,8
80023a60:	ef 4c ff fc 	st.w	r7[-4],r12
80023a64:	16 98       	mov	r8,r11
80023a66:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sanity Check
	Assert( adcifa!=NULL );

	// Switch Sequencer
	switch (sequencer) {
80023a6a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80023a6e:	58 18       	cp.w	r8,1
80023a70:	c0 a0       	breq	80023a84 <adcifa_start_sequencer+0x2c>
80023a72:	58 38       	cp.w	r8,3
80023a74:	c0 d0       	breq	80023a8e <adcifa_start_sequencer+0x36>
80023a76:	58 08       	cp.w	r8,0
80023a78:	c0 f1       	brne	80023a96 <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ0:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC0_MASK);
80023a7a:	fc 78 24 00 	mov	r8,-187392
80023a7e:	30 19       	mov	r9,1
80023a80:	91 09       	st.w	r8[0x0],r9
		break;
80023a82:	c0 a8       	rjmp	80023a96 <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ1:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC1_MASK);
80023a84:	fc 78 24 00 	mov	r8,-187392
80023a88:	30 29       	mov	r9,2
80023a8a:	91 09       	st.w	r8[0x0],r9
		break;
80023a8c:	c0 58       	rjmp	80023a96 <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ0_SEQ1:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC0_MASK | AVR32_ADCIFA_CR_SOC1_MASK);
80023a8e:	fc 78 24 00 	mov	r8,-187392
80023a92:	30 39       	mov	r9,3
80023a94:	91 09       	st.w	r8[0x0],r9
		break;
	default:
		break;
	}
}
80023a96:	2f ed       	sub	sp,-8
80023a98:	e3 cd 80 80 	ldm	sp++,r7,pc

80023a9c <adcifa_check_eoc>:


bool adcifa_check_eoc(volatile avr32_adcifa_t * adcifa, U8 sequencer)
{
80023a9c:	eb cd 40 80 	pushm	r7,lr
80023aa0:	1a 97       	mov	r7,sp
80023aa2:	20 2d       	sub	sp,8
80023aa4:	ef 4c ff fc 	st.w	r7[-4],r12
80023aa8:	16 98       	mov	r8,r11
80023aaa:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sanity Check
	Assert( adcifa!=NULL );

	// get SR register : EOC bit for channel
	switch (sequencer) {
80023aae:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80023ab2:	58 08       	cp.w	r8,0
80023ab4:	c0 40       	breq	80023abc <adcifa_check_eoc+0x20>
80023ab6:	58 18       	cp.w	r8,1
80023ab8:	c0 a0       	breq	80023acc <adcifa_check_eoc+0x30>
80023aba:	c1 18       	rjmp	80023adc <adcifa_check_eoc+0x40>
	case 0:
		return ((ADCIFA_is_eoc_sequencer_0()) ? true : false);
80023abc:	fc 78 24 00 	mov	r8,-187392
80023ac0:	70 28       	ld.w	r8,r8[0x8]
80023ac2:	e2 18 00 02 	andl	r8,0x2,COH
80023ac6:	5f 18       	srne	r8
80023ac8:	5c 58       	castu.b	r8
80023aca:	c0 a8       	rjmp	80023ade <adcifa_check_eoc+0x42>
	case 1:
		return ((ADCIFA_is_eoc_sequencer_1()) ? true : false);
80023acc:	fc 78 24 00 	mov	r8,-187392
80023ad0:	70 28       	ld.w	r8,r8[0x8]
80023ad2:	e2 18 00 20 	andl	r8,0x20,COH
80023ad6:	5f 18       	srne	r8
80023ad8:	5c 58       	castu.b	r8
80023ada:	c0 28       	rjmp	80023ade <adcifa_check_eoc+0x42>
	default:
		break;
	}
	return false;
80023adc:	30 08       	mov	r8,0
}
80023ade:	10 9c       	mov	r12,r8
80023ae0:	2f ed       	sub	sp,-8
80023ae2:	e3 cd 80 80 	ldm	sp++,r7,pc

80023ae6 <adcifa_check_eos>:

bool adcifa_check_eos(volatile avr32_adcifa_t * adcifa, U8 sequencer)
{
80023ae6:	eb cd 40 80 	pushm	r7,lr
80023aea:	1a 97       	mov	r7,sp
80023aec:	20 2d       	sub	sp,8
80023aee:	ef 4c ff fc 	st.w	r7[-4],r12
80023af2:	16 98       	mov	r8,r11
80023af4:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sanity Check
	Assert( adcifa!=NULL );

	// get SR register : EOS bit for channel
	switch (sequencer) {
80023af8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80023afc:	58 08       	cp.w	r8,0
80023afe:	c0 40       	breq	80023b06 <adcifa_check_eos+0x20>
80023b00:	58 18       	cp.w	r8,1
80023b02:	c0 90       	breq	80023b14 <adcifa_check_eos+0x2e>
80023b04:	c1 08       	rjmp	80023b24 <adcifa_check_eos+0x3e>
	case 0:
		return ((ADCIFA_is_eos_sequencer_0()) ? true : false);
80023b06:	fc 78 24 00 	mov	r8,-187392
80023b0a:	70 28       	ld.w	r8,r8[0x8]
80023b0c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80023b10:	5c 58       	castu.b	r8
80023b12:	c0 a8       	rjmp	80023b26 <adcifa_check_eos+0x40>
	case 1:
		return ((ADCIFA_is_eos_sequencer_1()) ? true : false);
80023b14:	fc 78 24 00 	mov	r8,-187392
80023b18:	70 28       	ld.w	r8,r8[0x8]
80023b1a:	e2 18 00 10 	andl	r8,0x10,COH
80023b1e:	5f 18       	srne	r8
80023b20:	5c 58       	castu.b	r8
80023b22:	c0 28       	rjmp	80023b26 <adcifa_check_eos+0x40>
	default:
		break;
	}
	return false;
80023b24:	30 08       	mov	r8,0
}
80023b26:	10 9c       	mov	r12,r8
80023b28:	2f ed       	sub	sp,-8
80023b2a:	e3 cd 80 80 	ldm	sp++,r7,pc

80023b2e <adcifa_get_values_from_sequencer>:

U8 adcifa_get_values_from_sequencer(volatile avr32_adcifa_t * adcifa,
                                    U8 sequencer,
                                    adcifa_sequencer_opt_t * p_adcifa_sequencer_opt,
                                    S16* adcifa_values)
{
80023b2e:	eb cd 40 c0 	pushm	r6-r7,lr
80023b32:	1a 97       	mov	r7,sp
80023b34:	20 5d       	sub	sp,20
80023b36:	4b 46       	lddpc	r6,80023c04 <adcifa_get_values_from_sequencer+0xd6>
80023b38:	1e 26       	rsub	r6,pc
80023b3a:	ef 4c ff f8 	st.w	r7[-8],r12
80023b3e:	16 98       	mov	r8,r11
80023b40:	ef 4a ff f0 	st.w	r7[-16],r10
80023b44:	ef 49 ff ec 	st.w	r7[-20],r9
80023b48:	ef 68 ff f4 	st.b	r7[-12],r8
	U8 i;
	// Sanity Check
	Assert( adcifa!=NULL );

	// wait for end of sequence
	if(adcifa_check_eos(adcifa, sequencer) != true)
80023b4c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80023b50:	10 9b       	mov	r11,r8
80023b52:	ee fc ff f8 	ld.w	r12,r7[-8]
80023b56:	f0 16 01 37 	mcall	r6[1244]
80023b5a:	18 98       	mov	r8,r12
80023b5c:	ec 18 00 01 	eorl	r8,0x1
80023b60:	5c 58       	castu.b	r8
80023b62:	c0 30       	breq	80023b68 <adcifa_get_values_from_sequencer+0x3a>
		return ADCIFA_STATUS_NOT_COMPLETED;
80023b64:	30 38       	mov	r8,3
80023b66:	c4 b8       	rjmp	80023bfc <adcifa_get_values_from_sequencer+0xce>

	switch (sequencer) {
80023b68:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80023b6c:	58 08       	cp.w	r8,0
80023b6e:	c0 40       	breq	80023b76 <adcifa_get_values_from_sequencer+0x48>
80023b70:	58 18       	cp.w	r8,1
80023b72:	c2 30       	breq	80023bb8 <adcifa_get_values_from_sequencer+0x8a>
80023b74:	c4 38       	rjmp	80023bfa <adcifa_get_values_from_sequencer+0xcc>
	case 0:
		// Read values from Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80023b76:	30 08       	mov	r8,0
80023b78:	ef 68 ff ff 	st.b	r7[-1],r8
80023b7c:	c1 58       	rjmp	80023ba6 <adcifa_get_values_from_sequencer+0x78>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
80023b7e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80023b82:	a1 78       	lsl	r8,0x1
80023b84:	ee f9 ff ec 	ld.w	r9,r7[-20]
80023b88:	10 09       	add	r9,r8
80023b8a:	fc 78 24 00 	mov	r8,-187392
80023b8e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80023b92:	2d fa       	sub	r10,-33
80023b94:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80023b98:	5c 88       	casts.h	r8
80023b9a:	b2 08       	st.h	r9[0x0],r8
		return ADCIFA_STATUS_NOT_COMPLETED;

	switch (sequencer) {
	case 0:
		// Read values from Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80023b9c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80023ba0:	2f f8       	sub	r8,-1
80023ba2:	ef 68 ff ff 	st.b	r7[-1],r8
80023ba6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023baa:	11 88       	ld.ub	r8,r8[0x0]
80023bac:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80023bb0:	f0 09 18 00 	cp.b	r9,r8
80023bb4:	ce 53       	brcs	80023b7e <adcifa_get_values_from_sequencer+0x50>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
		}
		break;
80023bb6:	c2 28       	rjmp	80023bfa <adcifa_get_values_from_sequencer+0xcc>
	case 1:
		// Read values from Sequencer 1
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80023bb8:	30 08       	mov	r8,0
80023bba:	ef 68 ff ff 	st.b	r7[-1],r8
80023bbe:	c1 68       	rjmp	80023bea <adcifa_get_values_from_sequencer+0xbc>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_1(i);
80023bc0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80023bc4:	a1 78       	lsl	r8,0x1
80023bc6:	ee f9 ff ec 	ld.w	r9,r7[-20]
80023bca:	10 09       	add	r9,r8
80023bcc:	fc 78 24 00 	mov	r8,-187392
80023bd0:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80023bd4:	2f 8a       	sub	r10,-8
80023bd6:	2d fa       	sub	r10,-33
80023bd8:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80023bdc:	5c 88       	casts.h	r8
80023bde:	b2 08       	st.h	r9[0x0],r8
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
		}
		break;
	case 1:
		// Read values from Sequencer 1
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80023be0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80023be4:	2f f8       	sub	r8,-1
80023be6:	ef 68 ff ff 	st.b	r7[-1],r8
80023bea:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023bee:	11 88       	ld.ub	r8,r8[0x0]
80023bf0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80023bf4:	f0 09 18 00 	cp.b	r9,r8
80023bf8:	ce 43       	brcs	80023bc0 <adcifa_get_values_from_sequencer+0x92>
		break;
	default:
		break;
	}

	return ADCIFA_STATUS_COMPLETED;
80023bfa:	30 28       	mov	r8,2
}
80023bfc:	10 9c       	mov	r12,r8
80023bfe:	2f bd       	sub	sp,-20
80023c00:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023c04:	80 02       	ld.sh	r2,r0[0x0]
80023c06:	39 bc       	mov	r12,-101

80023c08 <adcifa_start_itimer>:

void adcifa_start_itimer(volatile avr32_adcifa_t * adcifa,
                         uint32_t timer_count)
{
80023c08:	eb cd 40 80 	pushm	r7,lr
80023c0c:	1a 97       	mov	r7,sp
80023c0e:	20 2d       	sub	sp,8
80023c10:	ef 4c ff fc 	st.w	r7[-4],r12
80023c14:	ef 4b ff f8 	st.w	r7[-8],r11
	adcifa->itimer = timer_count;
80023c18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c1c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023c20:	f1 49 00 48 	st.w	r8[72],r9
	adcifa->cr = AVR32_ADCIFA_CR_TSTART_MASK;
80023c24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c28:	30 89       	mov	r9,8
80023c2a:	91 09       	st.w	r8[0x0],r9
}
80023c2c:	2f ed       	sub	sp,-8
80023c2e:	e3 cd 80 80 	ldm	sp++,r7,pc

80023c32 <adcifa_stop_itimer>:

void adcifa_stop_itimer(volatile avr32_adcifa_t * adcifa)
{
80023c32:	eb cd 40 80 	pushm	r7,lr
80023c36:	1a 97       	mov	r7,sp
80023c38:	20 1d       	sub	sp,4
80023c3a:	ef 4c ff fc 	st.w	r7[-4],r12
	adcifa->cr = AVR32_ADCIFA_CR_TSTOP_MASK;
80023c3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c42:	30 49       	mov	r9,4
80023c44:	91 09       	st.w	r8[0x0],r9
}
80023c46:	2f fd       	sub	sp,-4
80023c48:	e3 cd 80 80 	ldm	sp++,r7,pc

80023c4c <adcifa_enable_interrupt>:

void adcifa_enable_interrupt(volatile avr32_adcifa_t * adcifa,
                             uint32_t interrupt_flags)
{
80023c4c:	eb cd 40 80 	pushm	r7,lr
80023c50:	1a 97       	mov	r7,sp
80023c52:	20 2d       	sub	sp,8
80023c54:	ef 4c ff fc 	st.w	r7[-4],r12
80023c58:	ef 4b ff f8 	st.w	r7[-8],r11
	adcifa->ier = interrupt_flags;   // Interrupt Enable Register
80023c5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c60:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023c64:	f1 49 00 70 	st.w	r8[112],r9
}
80023c68:	2f ed       	sub	sp,-8
80023c6a:	e3 cd 80 80 	ldm	sp++,r7,pc

80023c6e <adcifa_disable_interrupt>:

void adcifa_disable_interrupt(volatile avr32_adcifa_t * adcifa,
                              uint32_t interrupt_flags)
{
80023c6e:	eb cd 40 80 	pushm	r7,lr
80023c72:	1a 97       	mov	r7,sp
80023c74:	20 2d       	sub	sp,8
80023c76:	ef 4c ff fc 	st.w	r7[-4],r12
80023c7a:	ef 4b ff f8 	st.w	r7[-8],r11
	adcifa->idr = interrupt_flags;   // Interrupt Disable Register
80023c7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c82:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023c86:	f1 49 00 74 	st.w	r8[116],r9
}
80023c8a:	2f ed       	sub	sp,-8
80023c8c:	e3 cd 80 80 	ldm	sp++,r7,pc

80023c90 <adcifa_clear_interrupt>:

void adcifa_clear_interrupt(volatile avr32_adcifa_t * adcifa,
                            uint32_t interrupt_flags)
{
80023c90:	eb cd 40 80 	pushm	r7,lr
80023c94:	1a 97       	mov	r7,sp
80023c96:	20 2d       	sub	sp,8
80023c98:	ef 4c ff fc 	st.w	r7[-4],r12
80023c9c:	ef 4b ff f8 	st.w	r7[-8],r11
	adcifa->scr = interrupt_flags;   // Status Clear Register
80023ca0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023ca4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023ca8:	91 39       	st.w	r8[0xc],r9
}
80023caa:	2f ed       	sub	sp,-8
80023cac:	e3 cd 80 80 	ldm	sp++,r7,pc

80023cb0 <ast_is_busy>:
#include <avr32/io.h>
#include "compiler.h"
#include "ast.h"

static int ast_is_busy(volatile avr32_ast_t *ast)
{
80023cb0:	eb cd 40 80 	pushm	r7,lr
80023cb4:	1a 97       	mov	r7,sp
80023cb6:	20 1d       	sub	sp,4
80023cb8:	ef 4c ff fc 	st.w	r7[-4],r12
	return (ast->sr & AVR32_AST_SR_BUSY_MASK) != 0;
80023cbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023cc0:	70 28       	ld.w	r8,r8[0x8]
80023cc2:	e6 18 01 00 	andh	r8,0x100,COH
80023cc6:	5f 18       	srne	r8
}
80023cc8:	10 9c       	mov	r12,r8
80023cca:	2f fd       	sub	sp,-4
80023ccc:	e3 cd 80 80 	ldm	sp++,r7,pc

80023cd0 <ast_is_clkbusy>:

static int ast_is_clkbusy(volatile avr32_ast_t *ast)
{
80023cd0:	eb cd 40 80 	pushm	r7,lr
80023cd4:	1a 97       	mov	r7,sp
80023cd6:	20 1d       	sub	sp,4
80023cd8:	ef 4c ff fc 	st.w	r7[-4],r12
	return (ast->sr & AVR32_AST_SR_CLKBUSY_MASK) != 0;
80023cdc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023ce0:	70 28       	ld.w	r8,r8[0x8]
80023ce2:	e6 18 10 00 	andh	r8,0x1000,COH
80023ce6:	5f 18       	srne	r8
}
80023ce8:	10 9c       	mov	r12,r8
80023cea:	2f fd       	sub	sp,-4
80023cec:	e3 cd 80 80 	ldm	sp++,r7,pc

80023cf0 <ast_init_calendar>:

int ast_init_calendar(volatile avr32_ast_t *ast,
                      unsigned char osc_type,
                      unsigned char psel,
                      ast_calendar_t ast_calendar)
{
80023cf0:	eb cd 40 c0 	pushm	r6-r7,lr
80023cf4:	1a 97       	mov	r7,sp
80023cf6:	20 4d       	sub	sp,16
80023cf8:	49 a6       	lddpc	r6,80023d60 <ast_init_calendar+0x70>
80023cfa:	1e 26       	rsub	r6,pc
80023cfc:	ef 4c ff fc 	st.w	r7[-4],r12
80023d00:	14 98       	mov	r8,r10
80023d02:	ef 49 ff f0 	st.w	r7[-16],r9
80023d06:	16 99       	mov	r9,r11
80023d08:	ef 69 ff f8 	st.b	r7[-8],r9
80023d0c:	ef 68 ff f4 	st.b	r7[-12],r8

	while (ast_is_clkbusy(ast));
80023d10:	ee fc ff fc 	ld.w	r12,r7[-4]
80023d14:	cd ef       	rcall	80023cd0 <ast_is_clkbusy>
80023d16:	18 98       	mov	r8,r12
80023d18:	58 08       	cp.w	r8,0
80023d1a:	cf b1       	brne	80023d10 <ast_init_calendar+0x20>
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;
80023d1c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80023d20:	a9 68       	lsl	r8,0x8
                      unsigned char psel,
                      ast_calendar_t ast_calendar)
{

	while (ast_is_clkbusy(ast));
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
80023d22:	a1 a8       	sbr	r8,0x0
80023d24:	10 99       	mov	r9,r8
80023d26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023d2a:	f1 49 00 40 	st.w	r8[64],r9
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;

	// Set the new AST configuration
	ast->cr =   AST_MODE_CALENDAR << AVR32_AST_CR_CAL_OFFSET |
		psel << AVR32_AST_CR_PSEL_OFFSET ;
80023d2e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80023d32:	b1 68       	lsl	r8,0x10
	while (ast_is_clkbusy(ast));
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;

	// Set the new AST configuration
	ast->cr =   AST_MODE_CALENDAR << AVR32_AST_CR_CAL_OFFSET |
80023d34:	a3 a8       	sbr	r8,0x2
80023d36:	10 99       	mov	r9,r8
80023d38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023d3c:	91 09       	st.w	r8[0x0],r9
		psel << AVR32_AST_CR_PSEL_OFFSET ;

	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023d3e:	ee fc ff fc 	ld.w	r12,r7[-4]
80023d42:	cb 7f       	rcall	80023cb0 <ast_is_busy>
80023d44:	18 98       	mov	r8,r12
80023d46:	58 08       	cp.w	r8,0
80023d48:	cf b1       	brne	80023d3e <ast_init_calendar+0x4e>

	// Set the calendar
	ast_set_calendar_value(ast, ast_calendar);
80023d4a:	ee fb ff f0 	ld.w	r11,r7[-16]
80023d4e:	ee fc ff fc 	ld.w	r12,r7[-4]
80023d52:	f0 16 01 c4 	mcall	r6[1808]

	return 1;
80023d56:	30 18       	mov	r8,1
}
80023d58:	10 9c       	mov	r12,r8
80023d5a:	2f cd       	sub	sp,-16
80023d5c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023d60:	80 02       	ld.sh	r2,r0[0x0]
80023d62:	3b 7e       	mov	lr,-73

80023d64 <ast_init_counter>:

int ast_init_counter(volatile avr32_ast_t *ast,
                     unsigned char osc_type,
                     unsigned char psel,
                     unsigned long ast_counter)
{
80023d64:	eb cd 40 c0 	pushm	r6-r7,lr
80023d68:	1a 97       	mov	r7,sp
80023d6a:	20 4d       	sub	sp,16
80023d6c:	49 46       	lddpc	r6,80023dbc <ast_init_counter+0x58>
80023d6e:	1e 26       	rsub	r6,pc
80023d70:	ef 4c ff fc 	st.w	r7[-4],r12
80023d74:	14 98       	mov	r8,r10
80023d76:	ef 49 ff f0 	st.w	r7[-16],r9
80023d7a:	16 99       	mov	r9,r11
80023d7c:	ef 69 ff f8 	st.b	r7[-8],r9
80023d80:	ef 68 ff f4 	st.b	r7[-12],r8

//	while (ast_is_clkbusy(ast));
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;
80023d84:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80023d88:	a9 68       	lsl	r8,0x8
                     unsigned char psel,
                     unsigned long ast_counter)
{

//	while (ast_is_clkbusy(ast));
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
80023d8a:	a1 a8       	sbr	r8,0x0
80023d8c:	10 99       	mov	r9,r8
80023d8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023d92:	f1 49 00 40 	st.w	r8[64],r9
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;

	// Set the new AST configuration
	ast->cr =   AST_MODE_COUNTER << AVR32_AST_CR_CAL_OFFSET |
80023d96:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80023d9a:	b1 68       	lsl	r8,0x10
80023d9c:	10 99       	mov	r9,r8
80023d9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023da2:	91 09       	st.w	r8[0x0],r9

	// Wait until the ast CTRL register is up-to-date
//	while (ast_is_busy(ast));

	// Set the calendar
	ast_set_counter_value(ast, ast_counter);
80023da4:	ee fb ff f0 	ld.w	r11,r7[-16]
80023da8:	ee fc ff fc 	ld.w	r12,r7[-4]
80023dac:	f0 16 02 17 	mcall	r6[2140]

	return 1;
80023db0:	30 18       	mov	r8,1
}
80023db2:	10 9c       	mov	r12,r8
80023db4:	2f cd       	sub	sp,-16
80023db6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023dba:	00 00       	add	r0,r0
80023dbc:	80 02       	ld.sh	r2,r0[0x0]
80023dbe:	3b f2       	mov	r2,-65

80023dc0 <ast_enable>:


void ast_enable(volatile avr32_ast_t *ast)
{
80023dc0:	eb cd 40 c0 	pushm	r6-r7,lr
80023dc4:	1a 97       	mov	r7,sp
80023dc6:	20 1d       	sub	sp,4
80023dc8:	48 e6       	lddpc	r6,80023e00 <ast_enable+0x40>
80023dca:	1e 26       	rsub	r6,pc
80023dcc:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023dd0:	ee fc ff fc 	ld.w	r12,r7[-4]
80023dd4:	c6 ef       	rcall	80023cb0 <ast_is_busy>
80023dd6:	18 98       	mov	r8,r12
80023dd8:	58 08       	cp.w	r8,0
80023dda:	cf b1       	brne	80023dd0 <ast_enable+0x10>
	// Enable the RTC
	ast->cr |= AVR32_AST_CR_EN_MASK;
80023ddc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023de0:	70 08       	ld.w	r8,r8[0x0]
80023de2:	10 99       	mov	r9,r8
80023de4:	a1 a9       	sbr	r9,0x0
80023de6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023dea:	91 09       	st.w	r8[0x0],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023dec:	ee fc ff fc 	ld.w	r12,r7[-4]
80023df0:	c6 0f       	rcall	80023cb0 <ast_is_busy>
80023df2:	18 98       	mov	r8,r12
80023df4:	58 08       	cp.w	r8,0
80023df6:	cf b1       	brne	80023dec <ast_enable+0x2c>
}
80023df8:	2f fd       	sub	sp,-4
80023dfa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023dfe:	00 00       	add	r0,r0
80023e00:	80 02       	ld.sh	r2,r0[0x0]
80023e02:	3c 4e       	mov	lr,-60

80023e04 <ast_set_calendar_value>:

void ast_set_calendar_value(volatile avr32_ast_t *ast,
                            ast_calendar_t ast_calendar)
{
80023e04:	eb cd 40 c0 	pushm	r6-r7,lr
80023e08:	1a 97       	mov	r7,sp
80023e0a:	20 2d       	sub	sp,8
80023e0c:	48 e6       	lddpc	r6,80023e44 <ast_set_calendar_value+0x40>
80023e0e:	1e 26       	rsub	r6,pc
80023e10:	ef 4c ff fc 	st.w	r7[-4],r12
80023e14:	ef 4b ff f8 	st.w	r7[-8],r11
	// Wait until we can write into the VAL register
	while (ast_is_busy(ast));
80023e18:	ee fc ff fc 	ld.w	r12,r7[-4]
80023e1c:	c4 af       	rcall	80023cb0 <ast_is_busy>
80023e1e:	18 98       	mov	r8,r12
80023e20:	58 08       	cp.w	r8,0
80023e22:	cf b1       	brne	80023e18 <ast_set_calendar_value+0x14>
	// Set the new val value
	ast->calv = ast_calendar.field;
80023e24:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023e28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e2c:	f1 49 00 54 	st.w	r8[84],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023e30:	ee fc ff fc 	ld.w	r12,r7[-4]
80023e34:	c3 ef       	rcall	80023cb0 <ast_is_busy>
80023e36:	18 98       	mov	r8,r12
80023e38:	58 08       	cp.w	r8,0
80023e3a:	cf b1       	brne	80023e30 <ast_set_calendar_value+0x2c>
}
80023e3c:	2f ed       	sub	sp,-8
80023e3e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023e42:	00 00       	add	r0,r0
80023e44:	80 02       	ld.sh	r2,r0[0x0]
80023e46:	3c 92       	mov	r2,-55

80023e48 <ast_set_counter_value>:

void ast_set_counter_value(volatile avr32_ast_t *ast, unsigned long ast_counter)
{
80023e48:	eb cd 40 c0 	pushm	r6-r7,lr
80023e4c:	1a 97       	mov	r7,sp
80023e4e:	20 2d       	sub	sp,8
80023e50:	48 d6       	lddpc	r6,80023e84 <ast_set_counter_value+0x3c>
80023e52:	1e 26       	rsub	r6,pc
80023e54:	ef 4c ff fc 	st.w	r7[-4],r12
80023e58:	ef 4b ff f8 	st.w	r7[-8],r11
	// Wait until we can write into the VAL register
	while (ast_is_busy(ast));
80023e5c:	ee fc ff fc 	ld.w	r12,r7[-4]
80023e60:	c2 8f       	rcall	80023cb0 <ast_is_busy>
80023e62:	18 98       	mov	r8,r12
80023e64:	58 08       	cp.w	r8,0
80023e66:	cf b1       	brne	80023e5c <ast_set_counter_value+0x14>
	// Set the new val value
	ast->cv = ast_counter;
80023e68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e6c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023e70:	91 19       	st.w	r8[0x4],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023e72:	ee fc ff fc 	ld.w	r12,r7[-4]
80023e76:	c1 df       	rcall	80023cb0 <ast_is_busy>
80023e78:	18 98       	mov	r8,r12
80023e7a:	58 08       	cp.w	r8,0
80023e7c:	cf b1       	brne	80023e72 <ast_set_counter_value+0x2a>
}
80023e7e:	2f ed       	sub	sp,-8
80023e80:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023e84:	80 02       	ld.sh	r2,r0[0x0]
80023e86:	3c d6       	mov	r6,-51

80023e88 <ast_get_calendar_value>:


ast_calendar_t ast_get_calendar_value(volatile avr32_ast_t *ast)
{
80023e88:	eb cd 40 80 	pushm	r7,lr
80023e8c:	1a 97       	mov	r7,sp
80023e8e:	20 2d       	sub	sp,8
80023e90:	ef 4c ff f8 	st.w	r7[-8],r12
	ast_calendar_t ast_calendar;
	ast_calendar.field = ast->calv;
80023e94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023e98:	71 58       	ld.w	r8,r8[0x54]
80023e9a:	ef 48 ff fc 	st.w	r7[-4],r8
	return ast_calendar;
80023e9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80023ea2:	10 9c       	mov	r12,r8
80023ea4:	2f ed       	sub	sp,-8
80023ea6:	e3 cd 80 80 	ldm	sp++,r7,pc

80023eaa <ast_get_counter_value>:


unsigned long ast_get_counter_value(volatile avr32_ast_t *ast)
{
80023eaa:	eb cd 40 80 	pushm	r7,lr
80023eae:	1a 97       	mov	r7,sp
80023eb0:	20 1d       	sub	sp,4
80023eb2:	ef 4c ff fc 	st.w	r7[-4],r12
	return ast->cv;
80023eb6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023eba:	70 18       	ld.w	r8,r8[0x4]
}
80023ebc:	10 9c       	mov	r12,r8
80023ebe:	2f fd       	sub	sp,-4
80023ec0:	e3 cd 80 80 	ldm	sp++,r7,pc

80023ec4 <ast_set_alarm0_value>:

void ast_set_alarm0_value(volatile avr32_ast_t *ast, U32 alarm_value)
{
80023ec4:	eb cd 40 80 	pushm	r7,lr
80023ec8:	1a 97       	mov	r7,sp
80023eca:	20 2d       	sub	sp,8
80023ecc:	ef 4c ff fc 	st.w	r7[-4],r12
80023ed0:	ef 4b ff f8 	st.w	r7[-8],r11
	// Set the new val value
	ast->ar0 = alarm_value;
80023ed4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023ed8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023edc:	91 89       	st.w	r8[0x20],r9
}
80023ede:	2f ed       	sub	sp,-8
80023ee0:	e3 cd 80 80 	ldm	sp++,r7,pc

80023ee4 <ast_set_alarm1_value>:


void ast_set_alarm1_value(volatile avr32_ast_t *ast, U32 alarm_value)
{
80023ee4:	eb cd 40 80 	pushm	r7,lr
80023ee8:	1a 97       	mov	r7,sp
80023eea:	20 2d       	sub	sp,8
80023eec:	ef 4c ff fc 	st.w	r7[-4],r12
80023ef0:	ef 4b ff f8 	st.w	r7[-8],r11
	// Set the new val value
	ast->ar1 = alarm_value;
80023ef4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023ef8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023efc:	91 99       	st.w	r8[0x24],r9
}
80023efe:	2f ed       	sub	sp,-8
80023f00:	e3 cd 80 80 	ldm	sp++,r7,pc

80023f04 <ast_enable_alarm0>:


void ast_enable_alarm0(volatile avr32_ast_t *ast)
{
80023f04:	eb cd 40 c0 	pushm	r6-r7,lr
80023f08:	1a 97       	mov	r7,sp
80023f0a:	20 1d       	sub	sp,4
80023f0c:	48 e6       	lddpc	r6,80023f44 <ast_enable_alarm0+0x40>
80023f0e:	1e 26       	rsub	r6,pc
80023f10:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023f14:	ee fc ff fc 	ld.w	r12,r7[-4]
80023f18:	cc ce       	rcall	80023cb0 <ast_is_busy>
80023f1a:	18 98       	mov	r8,r12
80023f1c:	58 08       	cp.w	r8,0
80023f1e:	cf b1       	brne	80023f14 <ast_enable_alarm0+0x10>
	// Enable the RTC
	ast->eve |= AVR32_AST_EVE_ALARM0_MASK;
80023f20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023f24:	71 28       	ld.w	r8,r8[0x48]
80023f26:	10 99       	mov	r9,r8
80023f28:	a9 a9       	sbr	r9,0x8
80023f2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023f2e:	f1 49 00 48 	st.w	r8[72],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023f32:	ee fc ff fc 	ld.w	r12,r7[-4]
80023f36:	cb de       	rcall	80023cb0 <ast_is_busy>
80023f38:	18 98       	mov	r8,r12
80023f3a:	58 08       	cp.w	r8,0
80023f3c:	cf b1       	brne	80023f32 <ast_enable_alarm0+0x2e>
}
80023f3e:	2f fd       	sub	sp,-4
80023f40:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023f44:	80 02       	ld.sh	r2,r0[0x0]
80023f46:	3d 92       	mov	r2,-39

80023f48 <ast_disable_alarm0>:


void ast_disable_alarm0(volatile avr32_ast_t *ast)
{
80023f48:	eb cd 40 c0 	pushm	r6-r7,lr
80023f4c:	1a 97       	mov	r7,sp
80023f4e:	20 1d       	sub	sp,4
80023f50:	48 e6       	lddpc	r6,80023f88 <ast_disable_alarm0+0x40>
80023f52:	1e 26       	rsub	r6,pc
80023f54:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023f58:	ee fc ff fc 	ld.w	r12,r7[-4]
80023f5c:	ca ae       	rcall	80023cb0 <ast_is_busy>
80023f5e:	18 98       	mov	r8,r12
80023f60:	58 08       	cp.w	r8,0
80023f62:	cf b1       	brne	80023f58 <ast_disable_alarm0+0x10>
	// Enable the RTC
	ast->evd |= AVR32_AST_EVE_ALARM0_MASK;
80023f64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023f68:	71 38       	ld.w	r8,r8[0x4c]
80023f6a:	10 99       	mov	r9,r8
80023f6c:	a9 a9       	sbr	r9,0x8
80023f6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023f72:	f1 49 00 4c 	st.w	r8[76],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023f76:	ee fc ff fc 	ld.w	r12,r7[-4]
80023f7a:	c9 be       	rcall	80023cb0 <ast_is_busy>
80023f7c:	18 98       	mov	r8,r12
80023f7e:	58 08       	cp.w	r8,0
80023f80:	cf b1       	brne	80023f76 <ast_disable_alarm0+0x2e>
}
80023f82:	2f fd       	sub	sp,-4
80023f84:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023f88:	80 02       	ld.sh	r2,r0[0x0]
80023f8a:	3d d6       	mov	r6,-35

80023f8c <ast_enable_alarm1>:


void ast_enable_alarm1(volatile avr32_ast_t *ast)
{
80023f8c:	eb cd 40 c0 	pushm	r6-r7,lr
80023f90:	1a 97       	mov	r7,sp
80023f92:	20 1d       	sub	sp,4
80023f94:	48 e6       	lddpc	r6,80023fcc <ast_enable_alarm1+0x40>
80023f96:	1e 26       	rsub	r6,pc
80023f98:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023f9c:	ee fc ff fc 	ld.w	r12,r7[-4]
80023fa0:	c8 8e       	rcall	80023cb0 <ast_is_busy>
80023fa2:	18 98       	mov	r8,r12
80023fa4:	58 08       	cp.w	r8,0
80023fa6:	cf b1       	brne	80023f9c <ast_enable_alarm1+0x10>
	// Enable the RTC
	ast->eve |= AVR32_AST_EVE_ALARM1_MASK;
80023fa8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023fac:	71 28       	ld.w	r8,r8[0x48]
80023fae:	10 99       	mov	r9,r8
80023fb0:	a9 b9       	sbr	r9,0x9
80023fb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023fb6:	f1 49 00 48 	st.w	r8[72],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023fba:	ee fc ff fc 	ld.w	r12,r7[-4]
80023fbe:	c7 9e       	rcall	80023cb0 <ast_is_busy>
80023fc0:	18 98       	mov	r8,r12
80023fc2:	58 08       	cp.w	r8,0
80023fc4:	cf b1       	brne	80023fba <ast_enable_alarm1+0x2e>
}
80023fc6:	2f fd       	sub	sp,-4
80023fc8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023fcc:	80 02       	ld.sh	r2,r0[0x0]
80023fce:	3e 1a       	mov	r10,-31

80023fd0 <ast_disable_alarm1>:


void ast_disable_alarm1(volatile avr32_ast_t *ast)
{
80023fd0:	eb cd 40 c0 	pushm	r6-r7,lr
80023fd4:	1a 97       	mov	r7,sp
80023fd6:	20 1d       	sub	sp,4
80023fd8:	48 e6       	lddpc	r6,80024010 <ast_disable_alarm1+0x40>
80023fda:	1e 26       	rsub	r6,pc
80023fdc:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023fe0:	ee fc ff fc 	ld.w	r12,r7[-4]
80023fe4:	c6 6e       	rcall	80023cb0 <ast_is_busy>
80023fe6:	18 98       	mov	r8,r12
80023fe8:	58 08       	cp.w	r8,0
80023fea:	cf b1       	brne	80023fe0 <ast_disable_alarm1+0x10>
	// Enable the RTC
	ast->evd |= AVR32_AST_EVE_ALARM1_MASK;
80023fec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023ff0:	71 38       	ld.w	r8,r8[0x4c]
80023ff2:	10 99       	mov	r9,r8
80023ff4:	a9 b9       	sbr	r9,0x9
80023ff6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023ffa:	f1 49 00 4c 	st.w	r8[76],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023ffe:	ee fc ff fc 	ld.w	r12,r7[-4]
80024002:	c5 7e       	rcall	80023cb0 <ast_is_busy>
80024004:	18 98       	mov	r8,r12
80024006:	58 08       	cp.w	r8,0
80024008:	cf b1       	brne	80023ffe <ast_disable_alarm1+0x2e>
}
8002400a:	2f fd       	sub	sp,-4
8002400c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024010:	80 02       	ld.sh	r2,r0[0x0]
80024012:	3e 5e       	mov	lr,-27

80024014 <ast_set_periodic0_value>:


void ast_set_periodic0_value(volatile avr32_ast_t *ast, avr32_ast_pir0_t pir)
{
80024014:	eb cd 40 80 	pushm	r7,lr
80024018:	1a 97       	mov	r7,sp
8002401a:	20 2d       	sub	sp,8
8002401c:	ef 4c ff fc 	st.w	r7[-4],r12
80024020:	ef 4b ff f8 	st.w	r7[-8],r11
	// Set the new val value
	ast->PIR0 = pir;
80024024:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024028:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002402c:	91 c9       	st.w	r8[0x30],r9
}
8002402e:	2f ed       	sub	sp,-8
80024030:	e3 cd 80 80 	ldm	sp++,r7,pc

80024034 <ast_set_periodic1_value>:


void ast_set_periodic1_value(volatile avr32_ast_t *ast, avr32_ast_pir1_t pir)
{
80024034:	eb cd 40 80 	pushm	r7,lr
80024038:	1a 97       	mov	r7,sp
8002403a:	20 2d       	sub	sp,8
8002403c:	ef 4c ff fc 	st.w	r7[-4],r12
80024040:	ef 4b ff f8 	st.w	r7[-8],r11
	// Set the new val value
	ast->PIR1 = pir;
80024044:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024048:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002404c:	91 d9       	st.w	r8[0x34],r9
}
8002404e:	2f ed       	sub	sp,-8
80024050:	e3 cd 80 80 	ldm	sp++,r7,pc

80024054 <ast_enable_periodic0>:


void ast_enable_periodic0(volatile avr32_ast_t *ast)
{
80024054:	eb cd 40 c0 	pushm	r6-r7,lr
80024058:	1a 97       	mov	r7,sp
8002405a:	20 1d       	sub	sp,4
8002405c:	48 e6       	lddpc	r6,80024094 <ast_enable_periodic0+0x40>
8002405e:	1e 26       	rsub	r6,pc
80024060:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80024064:	ee fc ff fc 	ld.w	r12,r7[-4]
80024068:	c2 4e       	rcall	80023cb0 <ast_is_busy>
8002406a:	18 98       	mov	r8,r12
8002406c:	58 08       	cp.w	r8,0
8002406e:	cf b1       	brne	80024064 <ast_enable_periodic0+0x10>
	// Enable the RTC
	ast->eve |= AVR32_AST_EVE_PER0_MASK;
80024070:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024074:	71 28       	ld.w	r8,r8[0x48]
80024076:	10 99       	mov	r9,r8
80024078:	b1 a9       	sbr	r9,0x10
8002407a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002407e:	f1 49 00 48 	st.w	r8[72],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80024082:	ee fc ff fc 	ld.w	r12,r7[-4]
80024086:	c1 5e       	rcall	80023cb0 <ast_is_busy>
80024088:	18 98       	mov	r8,r12
8002408a:	58 08       	cp.w	r8,0
8002408c:	cf b1       	brne	80024082 <ast_enable_periodic0+0x2e>
}
8002408e:	2f fd       	sub	sp,-4
80024090:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024094:	80 02       	ld.sh	r2,r0[0x0]
80024096:	3e e2       	mov	r2,-18

80024098 <ast_disable_periodic0>:


void ast_disable_periodic0(volatile avr32_ast_t *ast)
{
80024098:	eb cd 40 c0 	pushm	r6-r7,lr
8002409c:	1a 97       	mov	r7,sp
8002409e:	20 1d       	sub	sp,4
800240a0:	48 f6       	lddpc	r6,800240dc <ast_disable_periodic0+0x44>
800240a2:	1e 26       	rsub	r6,pc
800240a4:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
800240a8:	ee fc ff fc 	ld.w	r12,r7[-4]
800240ac:	c0 2e       	rcall	80023cb0 <ast_is_busy>
800240ae:	18 98       	mov	r8,r12
800240b0:	58 08       	cp.w	r8,0
800240b2:	cf b1       	brne	800240a8 <ast_disable_periodic0+0x10>
	// Enable the RTC
	ast->evd |= AVR32_AST_EVE_PER0_MASK;
800240b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800240b8:	71 38       	ld.w	r8,r8[0x4c]
800240ba:	10 99       	mov	r9,r8
800240bc:	b1 a9       	sbr	r9,0x10
800240be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800240c2:	f1 49 00 4c 	st.w	r8[76],r9
	// Wait until write is done
	while (ast_is_busy(ast));
800240c6:	ee fc ff fc 	ld.w	r12,r7[-4]
800240ca:	fe b0 fd f3 	rcall	80023cb0 <ast_is_busy>
800240ce:	18 98       	mov	r8,r12
800240d0:	58 08       	cp.w	r8,0
800240d2:	cf a1       	brne	800240c6 <ast_disable_periodic0+0x2e>
}
800240d4:	2f fd       	sub	sp,-4
800240d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800240da:	00 00       	add	r0,r0
800240dc:	80 02       	ld.sh	r2,r0[0x0]
800240de:	3f 26       	mov	r6,-14

800240e0 <ast_enable_periodic1>:


void ast_enable_periodic1(volatile avr32_ast_t *ast)
{
800240e0:	eb cd 40 c0 	pushm	r6-r7,lr
800240e4:	1a 97       	mov	r7,sp
800240e6:	20 1d       	sub	sp,4
800240e8:	48 f6       	lddpc	r6,80024124 <ast_enable_periodic1+0x44>
800240ea:	1e 26       	rsub	r6,pc
800240ec:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
800240f0:	ee fc ff fc 	ld.w	r12,r7[-4]
800240f4:	fe b0 fd de 	rcall	80023cb0 <ast_is_busy>
800240f8:	18 98       	mov	r8,r12
800240fa:	58 08       	cp.w	r8,0
800240fc:	cf a1       	brne	800240f0 <ast_enable_periodic1+0x10>
	// Enable the RTC
	ast->eve |= AVR32_AST_EVE_PER1_MASK;
800240fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024102:	71 28       	ld.w	r8,r8[0x48]
80024104:	10 99       	mov	r9,r8
80024106:	b1 b9       	sbr	r9,0x11
80024108:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002410c:	f1 49 00 48 	st.w	r8[72],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80024110:	ee fc ff fc 	ld.w	r12,r7[-4]
80024114:	fe b0 fd ce 	rcall	80023cb0 <ast_is_busy>
80024118:	18 98       	mov	r8,r12
8002411a:	58 08       	cp.w	r8,0
8002411c:	cf a1       	brne	80024110 <ast_enable_periodic1+0x30>
}
8002411e:	2f fd       	sub	sp,-4
80024120:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024124:	80 02       	ld.sh	r2,r0[0x0]
80024126:	3f 6e       	mov	lr,-10

80024128 <ast_disable_periodic1>:


void ast_disable_periodic1(volatile avr32_ast_t *ast)
{
80024128:	eb cd 40 c0 	pushm	r6-r7,lr
8002412c:	1a 97       	mov	r7,sp
8002412e:	20 1d       	sub	sp,4
80024130:	48 f6       	lddpc	r6,8002416c <ast_disable_periodic1+0x44>
80024132:	1e 26       	rsub	r6,pc
80024134:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80024138:	ee fc ff fc 	ld.w	r12,r7[-4]
8002413c:	fe b0 fd ba 	rcall	80023cb0 <ast_is_busy>
80024140:	18 98       	mov	r8,r12
80024142:	58 08       	cp.w	r8,0
80024144:	cf a1       	brne	80024138 <ast_disable_periodic1+0x10>
	// Enable the RTC
	ast->evd |= AVR32_AST_EVE_PER0_MASK;
80024146:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002414a:	71 38       	ld.w	r8,r8[0x4c]
8002414c:	10 99       	mov	r9,r8
8002414e:	b1 a9       	sbr	r9,0x10
80024150:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024154:	f1 49 00 4c 	st.w	r8[76],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80024158:	ee fc ff fc 	ld.w	r12,r7[-4]
8002415c:	fe b0 fd aa 	rcall	80023cb0 <ast_is_busy>
80024160:	18 98       	mov	r8,r12
80024162:	58 08       	cp.w	r8,0
80024164:	cf a1       	brne	80024158 <ast_disable_periodic1+0x30>
}
80024166:	2f fd       	sub	sp,-4
80024168:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002416c:	80 02       	ld.sh	r2,r0[0x0]
8002416e:	3f b6       	mov	r6,-5

80024170 <dacifb_us_delay>:
 *
 * \param us Number of microseconds to wait.
 * \param hsb_mhz_up Rounded-up HSB frequency in MHz.
 */
static void dacifb_us_delay(us, hsb_mhz_up)
{
80024170:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
80024174:	1a 97       	mov	r7,sp
80024176:	20 cd       	sub	sp,48
80024178:	4d 46       	lddpc	r6,800242c8 <dacifb_us_delay+0x158>
8002417a:	1e 26       	rsub	r6,pc
8002417c:	ef 4c ff d4 	st.w	r7[-44],r12
80024180:	ef 4b ff d0 	st.w	r7[-48],r11
	t_cpu_time timer;
    cpu_set_timeout( cpu_us_2_cy(us, hsb_mhz_up), &timer ); // timeout in 10 ms
80024184:	ee fa ff d0 	ld.w	r10,r7[-48]
80024188:	ee fb ff d4 	ld.w	r11,r7[-44]
8002418c:	ef 4b ff e8 	st.w	r7[-24],r11
80024190:	ef 4a ff e4 	st.w	r7[-28],r10
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
80024194:	ee f2 ff e8 	ld.w	r2,r7[-24]
80024198:	30 03       	mov	r3,0
8002419a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002419e:	30 09       	mov	r9,0
800241a0:	e6 08 02 4a 	mul	r10,r3,r8
800241a4:	f2 02 02 4b 	mul	r11,r9,r2
800241a8:	16 0a       	add	r10,r11
800241aa:	e4 08 06 48 	mulu.d	r8,r2,r8
800241ae:	12 0a       	add	r10,r9
800241b0:	14 99       	mov	r9,r10
800241b2:	ee 7a 42 3f 	mov	r10,999999
800241b6:	30 0b       	mov	r11,0
800241b8:	f0 0a 00 0a 	add	r10,r8,r10
800241bc:	f2 0b 00 4b 	adc	r11,r9,r11
800241c0:	ee 78 42 40 	mov	r8,1000000
800241c4:	30 09       	mov	r9,0
800241c6:	f0 16 01 00 	mcall	r6[1024]
800241ca:	14 98       	mov	r8,r10
800241cc:	16 99       	mov	r9,r11
800241ce:	ef 48 ff f0 	st.w	r7[-16],r8
800241d2:	ee c8 00 28 	sub	r8,r7,40
800241d6:	ef 48 ff ec 	st.w	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800241da:	e1 b8 00 42 	mfsr	r8,0x108
800241de:	10 99       	mov	r9,r8
800241e0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800241e4:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800241e6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800241ea:	70 09       	ld.w	r9,r8[0x0]
800241ec:	ee f8 ff f0 	ld.w	r8,r7[-16]
800241f0:	10 09       	add	r9,r8
800241f2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800241f6:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800241f8:	ee f9 ff ec 	ld.w	r9,r7[-20]
800241fc:	30 08       	mov	r8,0
800241fe:	f3 68 00 08 	st.b	r9[8],r8
80024202:	ee c8 00 28 	sub	r8,r7,40
80024206:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8002420a:	e1 b8 00 42 	mfsr	r8,0x108
8002420e:	ef 48 ff f8 	st.w	r7[-8],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80024212:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024216:	f1 39 00 08 	ld.ub	r9,r8[8]
8002421a:	30 28       	mov	r8,2
8002421c:	f0 09 18 00 	cp.b	r9,r8
80024220:	c0 31       	brne	80024226 <dacifb_us_delay+0xb6>
    return false;
80024222:	30 08       	mov	r8,0
80024224:	c4 38       	rjmp	800242aa <dacifb_us_delay+0x13a>

  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80024226:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002422a:	f1 39 00 08 	ld.ub	r9,r8[8]
8002422e:	30 18       	mov	r8,1
80024230:	f0 09 18 00 	cp.b	r9,r8
80024234:	c0 31       	brne	8002423a <dacifb_us_delay+0xca>
    return true;
80024236:	30 18       	mov	r8,1
80024238:	c3 98       	rjmp	800242aa <dacifb_us_delay+0x13a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8002423a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002423e:	70 09       	ld.w	r9,r8[0x0]
80024240:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024244:	70 18       	ld.w	r8,r8[0x4]
80024246:	10 39       	cp.w	r9,r8
80024248:	e0 88 00 1a 	brls	8002427c <dacifb_us_delay+0x10c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8002424c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024250:	70 08       	ld.w	r8,r8[0x0]
80024252:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024256:	10 39       	cp.w	r9,r8
80024258:	c1 02       	brcc	80024278 <dacifb_us_delay+0x108>
8002425a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002425e:	70 18       	ld.w	r8,r8[0x4]
80024260:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024264:	10 39       	cp.w	r9,r8
80024266:	e0 88 00 09 	brls	80024278 <dacifb_us_delay+0x108>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8002426a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002426e:	30 18       	mov	r8,1
80024270:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80024274:	30 18       	mov	r8,1
80024276:	c1 a8       	rjmp	800242aa <dacifb_us_delay+0x13a>
    }
    return false;
80024278:	30 08       	mov	r8,0
8002427a:	c1 88       	rjmp	800242aa <dacifb_us_delay+0x13a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8002427c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024280:	70 08       	ld.w	r8,r8[0x0]
80024282:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024286:	10 39       	cp.w	r9,r8
80024288:	c0 93       	brcs	8002429a <dacifb_us_delay+0x12a>
8002428a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002428e:	70 18       	ld.w	r8,r8[0x4]
80024290:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024294:	10 39       	cp.w	r9,r8
80024296:	e0 88 00 09 	brls	800242a8 <dacifb_us_delay+0x138>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8002429a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002429e:	30 18       	mov	r8,1
800242a0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800242a4:	30 18       	mov	r8,1
800242a6:	c0 28       	rjmp	800242aa <dacifb_us_delay+0x13a>
    }
    return false;
800242a8:	30 08       	mov	r8,0
    while(! cpu_is_timeout(&timer) );
800242aa:	58 08       	cp.w	r8,0
800242ac:	ca b0       	breq	80024202 <dacifb_us_delay+0x92>
800242ae:	ee c8 00 28 	sub	r8,r7,40
800242b2:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
800242b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800242ba:	30 28       	mov	r8,2
800242bc:	f3 68 00 08 	st.b	r9[8],r8
    cpu_stop_timeout(&timer);
}
800242c0:	2f 4d       	sub	sp,-48
800242c2:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
800242c6:	00 00       	add	r0,r0
800242c8:	80 02       	ld.sh	r2,r0[0x0]
800242ca:	3f fe       	mov	lr,-1

800242cc <dacifb_get_calibration_data>:
 */

void dacifb_get_calibration_data( volatile avr32_dacifb_t * dacifb,
                                dacifb_opt_t * p_dacifb_opt,
                                U8 instance)
{
800242cc:	eb cd 40 80 	pushm	r7,lr
800242d0:	1a 97       	mov	r7,sp
800242d2:	20 5d       	sub	sp,20
800242d4:	ef 4c ff f4 	st.w	r7[-12],r12
800242d8:	ef 4b ff f0 	st.w	r7[-16],r11
800242dc:	14 98       	mov	r8,r10
800242de:	ef 68 ff ec 	st.b	r7[-20],r8
  {
    p_dacifb_opt->offset_calibration_value = ((*calibration_data >> 16) & 0x000000FF);
    p_dacifb_opt->gain_calibration_value = ((*calibration_data >> 24) & 0x000000FF);    
  }
#else
  unsigned int* calibration_data_0 = (unsigned int*)AVR32_FLASHC_CALIBRATION_FOURTH_WORD_ADDRESS;
800242e2:	e0 68 02 0c 	mov	r8,524
800242e6:	ea 18 80 80 	orh	r8,0x8080
800242ea:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int* calibration_data_1 = (unsigned int*)AVR32_FLASHC_CALIBRATION_FIVETH_WORD_ADDRESS;
800242ee:	e0 68 02 14 	mov	r8,532
800242f2:	ea 18 80 80 	orh	r8,0x8080
800242f6:	ef 48 ff fc 	st.w	r7[-4],r8
  if (instance == 0)
800242fa:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800242fe:	30 08       	mov	r8,0
80024300:	f0 09 18 00 	cp.b	r9,r8
80024304:	c1 71       	brne	80024332 <dacifb_get_calibration_data+0x66>
  {
    p_dacifb_opt->offset_calibration_value = (*calibration_data_0 & 0x000001FF);
80024306:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002430a:	70 08       	ld.w	r8,r8[0x0]
8002430c:	5c 88       	casts.h	r8
8002430e:	5c 88       	casts.h	r8
80024310:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80024314:	ee f9 ff f0 	ld.w	r9,r7[-16]
80024318:	b2 28       	st.h	r9[0x4],r8
    p_dacifb_opt->gain_calibration_value = ((*calibration_data_0 >> 16) & 0x000000FF);  
8002431a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002431e:	70 08       	ld.w	r8,r8[0x0]
80024320:	b1 88       	lsr	r8,0x10
80024322:	5c 88       	casts.h	r8
80024324:	5c 88       	casts.h	r8
80024326:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8002432a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002432e:	b2 18       	st.h	r9[0x2],r8
80024330:	c1 68       	rjmp	8002435c <dacifb_get_calibration_data+0x90>
  }
  else
  {
    p_dacifb_opt->offset_calibration_value = ((*calibration_data_1) & 0x000001FF);
80024332:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024336:	70 08       	ld.w	r8,r8[0x0]
80024338:	5c 88       	casts.h	r8
8002433a:	5c 88       	casts.h	r8
8002433c:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80024340:	ee f9 ff f0 	ld.w	r9,r7[-16]
80024344:	b2 28       	st.h	r9[0x4],r8
    p_dacifb_opt->gain_calibration_value = ((*calibration_data_1 >> 16) & 0x000000FF);    
80024346:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002434a:	70 08       	ld.w	r8,r8[0x0]
8002434c:	b1 88       	lsr	r8,0x10
8002434e:	5c 88       	casts.h	r8
80024350:	5c 88       	casts.h	r8
80024352:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80024356:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002435a:	b2 18       	st.h	r9[0x2],r8
  }
#endif  
}
8002435c:	2f bd       	sub	sp,-20
8002435e:	e3 cd 80 80 	ldm	sp++,r7,pc

80024362 <dacifb_configure>:

U8 dacifb_configure(volatile avr32_dacifb_t * dacifb,
                           dacifb_opt_t * p_dacifb_opt,
                           U32 pb_hz)
{
80024362:	eb cd 40 80 	pushm	r7,lr
80024366:	1a 97       	mov	r7,sp
80024368:	20 5d       	sub	sp,20
8002436a:	ef 4c ff f4 	st.w	r7[-12],r12
8002436e:	ef 4b ff f0 	st.w	r7[-16],r11
80024372:	ef 4a ff ec 	st.w	r7[-20],r10
  U32 prescaler = 0;
80024376:	30 08       	mov	r8,0
80024378:	ef 48 ff f8 	st.w	r7[-8],r8
  U32 counter = 0;
8002437c:	30 08       	mov	r8,0
8002437e:	ef 48 ff fc 	st.w	r7[-4],r8
  
  Assert( dacifb!=NULL );
  
  // Calibration of DAC
  dacifb->goc = (((p_dacifb_opt->offset_calibration_value<<AVR32_DACIFB_GOC_OCR_OFFSET)&AVR32_DACIFB_GOC_OCR_MASK)|
80024382:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024386:	90 28       	ld.sh	r8,r8[0x4]
80024388:	5c 78       	castu.h	r8
8002438a:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
                 ((p_dacifb_opt->gain_calibration_value<<AVR32_DACIFB_GOC_GCR_OFFSET)&AVR32_DACIFB_GOC_GCR_MASK));
8002438e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024392:	90 18       	ld.sh	r8,r8[0x2]
80024394:	5c 78       	castu.h	r8
80024396:	b1 68       	lsl	r8,0x10
80024398:	e6 18 01 ff 	andh	r8,0x1ff,COH
  U32 counter = 0;
  
  Assert( dacifb!=NULL );
  
  // Calibration of DAC
  dacifb->goc = (((p_dacifb_opt->offset_calibration_value<<AVR32_DACIFB_GOC_OCR_OFFSET)&AVR32_DACIFB_GOC_OCR_MASK)|
8002439c:	f3 e8 10 08 	or	r8,r9,r8
800243a0:	10 99       	mov	r9,r8
800243a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800243a6:	91 d9       	st.w	r8[0x34],r9
                 ((p_dacifb_opt->gain_calibration_value<<AVR32_DACIFB_GOC_GCR_OFFSET)&AVR32_DACIFB_GOC_GCR_MASK));
  
  // Compute PRESC field
  prescaler = 31 - clz(pb_hz/p_dacifb_opt->prescaler_clock_hz);  
800243a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800243ac:	70 29       	ld.w	r9,r8[0x8]
800243ae:	ee f8 ff ec 	ld.w	r8,r7[-20]
800243b2:	f0 09 0d 08 	divu	r8,r8,r9
800243b6:	f0 08 12 00 	clz	r8,r8
800243ba:	f0 08 11 1f 	rsub	r8,r8,31
800243be:	ef 48 ff f8 	st.w	r7[-8],r8

  // Check PRESC value
  if (prescaler > (1<<AVR32_DACIFB_TCR_PRESC_SIZE))
800243c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800243c6:	58 88       	cp.w	r8,8
800243c8:	e0 88 00 04 	brls	800243d0 <dacifb_configure+0x6e>
    return DACIFB_CONFIGURATION_REFUSED;
800243cc:	30 08       	mov	r8,0
800243ce:	c6 d8       	rjmp	800244a8 <dacifb_configure+0x146>

  // Update prescaler_clock_hz value
  p_dacifb_opt->prescaler_clock_hz = pb_hz / (1<<prescaler);
800243d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800243d4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800243d8:	f2 08 0a 49 	lsr	r9,r9,r8
800243dc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800243e0:	91 29       	st.w	r8[0x8],r9
    
  // Compute CHI field  ( minimum value of 2us) 
  counter = (p_dacifb_opt->prescaler_clock_hz/DACIFB_CHI_MIN_VALUE);
800243e2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800243e6:	70 29       	ld.w	r9,r8[0x8]
800243e8:	e0 68 de 83 	mov	r8,56963
800243ec:	ea 18 43 1b 	orh	r8,0x431b
800243f0:	f2 08 06 48 	mulu.d	r8,r9,r8
800243f4:	f2 08 16 11 	lsr	r8,r9,0x11
800243f8:	ef 48 ff fc 	st.w	r7[-4],r8
  
  // Check CHI value
  if (counter > (1<<AVR32_DACIFB_TCR_CHI_SIZE))
800243fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024400:	e0 48 00 80 	cp.w	r8,128
80024404:	e0 88 00 04 	brls	8002440c <dacifb_configure+0xaa>
    return DACIFB_CONFIGURATION_REFUSED;
80024408:	30 08       	mov	r8,0
8002440a:	c4 f8       	rjmp	800244a8 <dacifb_configure+0x146>
  
  
  // Sampling Rate Frequency
  dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_PRESC_OFFSET)&AVR32_DACIFB_TCR_PRESC_MASK)|
8002440c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024410:	70 39       	ld.w	r9,r8[0xc]
80024412:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024416:	b9 68       	lsl	r8,0x18
80024418:	10 9a       	mov	r10,r8
8002441a:	e6 1a 07 00 	andh	r10,0x700,COH
                  ((counter<<AVR32_DACIFB_TCR_CHI_OFFSET)&AVR32_DACIFB_TCR_CHI_MASK) );
8002441e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024422:	b1 68       	lsl	r8,0x10
80024424:	e6 18 00 7f 	andh	r8,0x7f,COH
  if (counter > (1<<AVR32_DACIFB_TCR_CHI_SIZE))
    return DACIFB_CONFIGURATION_REFUSED;
  
  
  // Sampling Rate Frequency
  dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_PRESC_OFFSET)&AVR32_DACIFB_TCR_PRESC_MASK)|
80024428:	f5 e8 10 08 	or	r8,r10,r8
8002442c:	10 49       	or	r9,r8
8002442e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024432:	91 39       	st.w	r8[0xc],r9
                  ((counter<<AVR32_DACIFB_TCR_CHI_OFFSET)&AVR32_DACIFB_TCR_CHI_MASK) );
  
  // Channel Selection
  dacifb->cfr |= ((p_dacifb_opt->channel_selection<<AVR32_DACIFB_CFR_CHC_OFFSET)&AVR32_DACIFB_CFR_CHC_MASK);
80024434:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024438:	70 19       	ld.w	r9,r8[0x4]
8002443a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002443e:	11 98       	ld.ub	r8,r8[0x1]
80024440:	b9 68       	lsl	r8,0x18
80024442:	e6 18 03 00 	andh	r8,0x300,COH
80024446:	10 49       	or	r9,r8
80024448:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002444c:	91 19       	st.w	r8[0x4],r9
    
  // Reference Selection
  dacifb->cfr |= ((p_dacifb_opt->reference <<AVR32_DACIFB_CFR_REF_OFFSET)&AVR32_DACIFB_CFR_REF_MASK);
8002444e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024452:	70 19       	ld.w	r9,r8[0x4]
80024454:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024458:	11 88       	ld.ub	r8,r8[0x0]
8002445a:	a9 68       	lsl	r8,0x8
8002445c:	e2 18 01 00 	andl	r8,0x100,COH
80024460:	10 49       	or	r9,r8
80024462:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024466:	91 19       	st.w	r8[0x4],r9

  // Dual Data
  dacifb->cfr |= ((p_dacifb_opt->dual<<AVR32_DACIFB_CFR_DDA_OFFSET)&AVR32_DACIFB_CFR_DDA_MASK);
80024468:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002446c:	70 19       	ld.w	r9,r8[0x4]
8002446e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024472:	11 f8       	ld.ub	r8,r8[0x7]
80024474:	a1 78       	lsl	r8,0x1
80024476:	e2 18 00 02 	andl	r8,0x2,COH
8002447a:	10 49       	or	r9,r8
8002447c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024480:	91 19       	st.w	r8[0x4],r9
  
  // Low Power Mode
  dacifb->cfr |= ((p_dacifb_opt->low_power <<AVR32_DACIFB_CFR_LP_OFFSET)&AVR32_DACIFB_CFR_LP_MASK);
80024482:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024486:	70 19       	ld.w	r9,r8[0x4]
80024488:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002448c:	11 e8       	ld.ub	r8,r8[0x6]
8002448e:	10 49       	or	r9,r8
80024490:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024494:	91 19       	st.w	r8[0x4],r9
  
  // Enable DAC
  dacifb->cr |= AVR32_DACIFB_CR_EN_MASK;
80024496:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002449a:	70 08       	ld.w	r8,r8[0x0]
8002449c:	10 99       	mov	r9,r8
8002449e:	a1 a9       	sbr	r9,0x0
800244a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800244a4:	91 09       	st.w	r8[0x0],r9
  
  return DACIFB_CONFIGURATION_ACCEPTED;
800244a6:	30 18       	mov	r8,1
}
800244a8:	10 9c       	mov	r12,r8
800244aa:	2f bd       	sub	sp,-20
800244ac:	e3 cd 80 80 	ldm	sp++,r7,pc

800244b0 <dacifb_configure_channel>:

U8 dacifb_configure_channel( volatile avr32_dacifb_t * dacifb,
                             U8 channel,
                             dacifb_channel_opt_t * p_dacifb_channel_opt,
                             U32 prescaler_clock_hz)
{
800244b0:	eb cd 40 80 	pushm	r7,lr
800244b4:	1a 97       	mov	r7,sp
800244b6:	20 7d       	sub	sp,28
800244b8:	ef 4c ff f0 	st.w	r7[-16],r12
800244bc:	16 98       	mov	r8,r11
800244be:	ef 4a ff e8 	st.w	r7[-24],r10
800244c2:	ef 49 ff e4 	st.w	r7[-28],r9
800244c6:	ef 68 ff ec 	st.b	r7[-20],r8
  U32 prescaler_min = 0;
800244ca:	30 08       	mov	r8,0
800244cc:	ef 48 ff f4 	st.w	r7[-12],r8
  U32 prescaler_max = 0;
800244d0:	30 08       	mov	r8,0
800244d2:	ef 48 ff f8 	st.w	r7[-8],r8
  U32 prescaler = 0;
800244d6:	30 08       	mov	r8,0
800244d8:	ef 48 ff fc 	st.w	r7[-4],r8
  
  Assert( dacifb!=NULL );
  
  // Auto-refresh Mode
  if (p_dacifb_channel_opt->auto_refresh_mode == true)
800244dc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800244e0:	11 88       	ld.ub	r8,r8[0x0]
800244e2:	58 08       	cp.w	r8,0
800244e4:	c2 40       	breq	8002452c <dacifb_configure_channel+0x7c>
  {
    switch(channel)
800244e6:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800244ea:	58 28       	cp.w	r8,2
800244ec:	c0 e0       	breq	80024508 <dacifb_configure_channel+0x58>
800244ee:	58 38       	cp.w	r8,3
800244f0:	c1 50       	breq	8002451a <dacifb_configure_channel+0x6a>
800244f2:	58 18       	cp.w	r8,1
800244f4:	c1 c1       	brne	8002452c <dacifb_configure_channel+0x7c>
    {
      case DACIFB_CHANNEL_SELECTION_A:
           dacifb->cr |= (AVR32_DACIFB_CR_ARAE_MASK);      
800244f6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800244fa:	70 08       	ld.w	r8,r8[0x0]
800244fc:	10 99       	mov	r9,r8
800244fe:	bb a9       	sbr	r9,0x1a
80024500:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024504:	91 09       	st.w	r8[0x0],r9
        break;
80024506:	c1 38       	rjmp	8002452c <dacifb_configure_channel+0x7c>
      case DACIFB_CHANNEL_SELECTION_B:
           dacifb->cr |= (AVR32_DACIFB_CR_ARBE_MASK );
80024508:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002450c:	70 08       	ld.w	r8,r8[0x0]
8002450e:	10 99       	mov	r9,r8
80024510:	bb b9       	sbr	r9,0x1b
80024512:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024516:	91 09       	st.w	r8[0x0],r9
        break;  
80024518:	c0 a8       	rjmp	8002452c <dacifb_configure_channel+0x7c>
      case DACIFB_CHANNEL_SELECTION_AB:
           dacifb->cr |= (AVR32_DACIFB_CR_ARAE_MASK)|(AVR32_DACIFB_CR_ARBE_MASK );
8002451a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002451e:	70 08       	ld.w	r8,r8[0x0]
80024520:	10 99       	mov	r9,r8
80024522:	ea 19 0c 00 	orh	r9,0xc00
80024526:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002452a:	91 09       	st.w	r8[0x0],r9
        break;  
    }
  }
  
  // Compute CHRA/CHRB fields  ( min value of 25us) 
  prescaler_min = 31 - clz(prescaler_clock_hz/DACIFB_CHRx_MIN_VALUE); 
8002452c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80024530:	e0 68 17 59 	mov	r8,5977
80024534:	ea 18 d1 b7 	orh	r8,0xd1b7
80024538:	f2 08 06 48 	mulu.d	r8,r9,r8
8002453c:	f2 08 16 0f 	lsr	r8,r9,0xf
80024540:	f0 08 12 00 	clz	r8,r8
80024544:	f0 08 11 1f 	rsub	r8,r8,31
80024548:	ef 48 ff f4 	st.w	r7[-12],r8
  if (prescaler_min > 0) prescaler_min --;
8002454c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024550:	58 08       	cp.w	r8,0
80024552:	c0 60       	breq	8002455e <dacifb_configure_channel+0xae>
80024554:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024558:	20 18       	sub	r8,1
8002455a:	ef 48 ff f4 	st.w	r7[-12],r8
  
  // Check CHRA/CHRB fields
  if ( (prescaler_min > (1<<AVR32_DACIFB_TCR_CHRA_SIZE)) ||
8002455e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024562:	59 08       	cp.w	r8,16
80024564:	e0 8b 00 07 	brhi	80024572 <dacifb_configure_channel+0xc2>
80024568:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002456c:	59 08       	cp.w	r8,16
8002456e:	e0 88 00 05 	brls	80024578 <dacifb_configure_channel+0xc8>
       (prescaler_min > (1<<AVR32_DACIFB_TCR_CHRB_SIZE))  )
    return DACIFB_CONFIGURATION_REFUSED;
80024572:	30 08       	mov	r8,0
80024574:	e0 8f 01 87 	bral	80024882 <dacifb_configure_channel+0x3d2>
  
  // Compute CHRA/CHRB fields  ( max value of 35us) 
  prescaler_max = 31 - clz(prescaler_clock_hz/DACIFB_CHRx_MAX_VALUE); 
80024578:	ee f9 ff e4 	ld.w	r9,r7[-28]
8002457c:	e0 68 27 59 	mov	r8,10073
80024580:	ea 18 fb a9 	orh	r8,0xfba9
80024584:	f2 08 06 48 	mulu.d	r8,r9,r8
80024588:	f2 08 16 0f 	lsr	r8,r9,0xf
8002458c:	f0 08 12 00 	clz	r8,r8
80024590:	f0 08 11 1f 	rsub	r8,r8,31
80024594:	ef 48 ff f8 	st.w	r7[-8],r8
  if (prescaler_max > 0) prescaler_max --;
80024598:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002459c:	58 08       	cp.w	r8,0
8002459e:	c0 60       	breq	800245aa <dacifb_configure_channel+0xfa>
800245a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800245a4:	20 18       	sub	r8,1
800245a6:	ef 48 ff f8 	st.w	r7[-8],r8
  
  // Check CHRA/CHRB fields
  if ( (prescaler_max > (1<<AVR32_DACIFB_TCR_CHRA_SIZE)) ||
800245aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800245ae:	59 08       	cp.w	r8,16
800245b0:	e0 8b 00 07 	brhi	800245be <dacifb_configure_channel+0x10e>
800245b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800245b8:	59 08       	cp.w	r8,16
800245ba:	e0 88 00 04 	brls	800245c2 <dacifb_configure_channel+0x112>
       (prescaler_max > (1<<AVR32_DACIFB_TCR_CHRB_SIZE))  )
    return DACIFB_CONFIGURATION_REFUSED;      
800245be:	30 08       	mov	r8,0
800245c0:	c6 19       	rjmp	80024882 <dacifb_configure_channel+0x3d2>
      
  // Find value for CHRA/CHRB in the range min/max values 25us/35us and stop if it is not possible.
  prescaler = 0;
800245c2:	30 08       	mov	r8,0
800245c4:	ef 48 ff fc 	st.w	r7[-4],r8
  while ((prescaler<<1) < prescaler_min)
800245c8:	c0 68       	rjmp	800245d4 <dacifb_configure_channel+0x124>
  {
      prescaler++;
800245ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800245ce:	2f f8       	sub	r8,-1
800245d0:	ef 48 ff fc 	st.w	r7[-4],r8
       (prescaler_max > (1<<AVR32_DACIFB_TCR_CHRB_SIZE))  )
    return DACIFB_CONFIGURATION_REFUSED;      
      
  // Find value for CHRA/CHRB in the range min/max values 25us/35us and stop if it is not possible.
  prescaler = 0;
  while ((prescaler<<1) < prescaler_min)
800245d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800245d8:	f0 09 15 01 	lsl	r9,r8,0x1
800245dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800245e0:	10 39       	cp.w	r9,r8
800245e2:	cf 43       	brcs	800245ca <dacifb_configure_channel+0x11a>
  {
      prescaler++;
  } 
  // If value found is out of range, configuration refused 
  if ((prescaler<<1) > prescaler_max)  
800245e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800245e8:	f0 09 15 01 	lsl	r9,r8,0x1
800245ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800245f0:	10 39       	cp.w	r9,r8
800245f2:	e0 88 00 04 	brls	800245fa <dacifb_configure_channel+0x14a>
    return DACIFB_CONFIGURATION_REFUSED;    
800245f6:	30 08       	mov	r8,0
800245f8:	c4 59       	rjmp	80024882 <dacifb_configure_channel+0x3d2>
    
  // Refresh Time 
  switch(channel)
800245fa:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800245fe:	58 28       	cp.w	r8,2
80024600:	c1 10       	breq	80024622 <dacifb_configure_channel+0x172>
80024602:	58 38       	cp.w	r8,3
80024604:	c1 c0       	breq	8002463c <dacifb_configure_channel+0x18c>
80024606:	58 18       	cp.w	r8,1
80024608:	c2 c1       	brne	80024660 <dacifb_configure_channel+0x1b0>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->tcr |= ((prescaler<<AVR32_DACIFB_TCR_CHRA_OFFSET)&AVR32_DACIFB_TCR_CHRA_MASK);      
8002460a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002460e:	70 39       	ld.w	r9,r8[0xc]
80024610:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024614:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80024618:	10 49       	or	r9,r8
8002461a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002461e:	91 39       	st.w	r8[0xc],r9
      break;
80024620:	c2 08       	rjmp	80024660 <dacifb_configure_channel+0x1b0>
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->tcr |= ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK);
80024622:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024626:	70 39       	ld.w	r9,r8[0xc]
80024628:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002462c:	a9 68       	lsl	r8,0x8
8002462e:	e2 18 0f 00 	andl	r8,0xf00,COH
80024632:	10 49       	or	r9,r8
80024634:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024638:	91 39       	st.w	r8[0xc],r9
      break;  
8002463a:	c1 38       	rjmp	80024660 <dacifb_configure_channel+0x1b0>
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_CHRA_OFFSET)&AVR32_DACIFB_TCR_CHRA_MASK) |
8002463c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024640:	70 39       	ld.w	r9,r8[0xc]
80024642:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024646:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
                          ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK) );
8002464a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002464e:	a9 68       	lsl	r8,0x8
80024650:	e2 18 0f 00 	andl	r8,0xf00,COH
      break;
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->tcr |= ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK);
      break;  
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_CHRA_OFFSET)&AVR32_DACIFB_TCR_CHRA_MASK) |
80024654:	f5 e8 10 08 	or	r8,r10,r8
80024658:	10 49       	or	r9,r8
8002465a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002465e:	91 39       	st.w	r8[0xc],r9
                          ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK) );
      break;
  }

  // Trigger Mode
  switch(channel)
80024660:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80024664:	58 28       	cp.w	r8,2
80024666:	c3 30       	breq	800246cc <dacifb_configure_channel+0x21c>
80024668:	58 38       	cp.w	r8,3
8002466a:	c5 e0       	breq	80024726 <dacifb_configure_channel+0x276>
8002466c:	58 18       	cp.w	r8,1
8002466e:	e0 81 00 8f 	brne	8002478c <dacifb_configure_channel+0x2dc>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         if (p_dacifb_channel_opt->trigger_mode!=DACIFB_TRIGGER_MODE_MANUAL)
80024672:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024676:	11 98       	ld.ub	r8,r8[0x1]
80024678:	58 08       	cp.w	r8,0
8002467a:	c0 90       	breq	8002468c <dacifb_configure_channel+0x1dc>
         {
             dacifb->cfr |= (AVR32_DACIFB_CFR_AAE_MASK);
8002467c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024680:	70 18       	ld.w	r8,r8[0x4]
80024682:	10 99       	mov	r9,r8
80024684:	b1 a9       	sbr	r9,0x10
80024686:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002468a:	91 19       	st.w	r8[0x4],r9
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
8002468c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024690:	11 99       	ld.ub	r9,r8[0x1]
80024692:	30 28       	mov	r8,2
80024694:	f0 09 18 00 	cp.b	r9,r8
80024698:	c0 a1       	brne	800246ac <dacifb_configure_channel+0x1fc>
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLA_MASK);
8002469a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002469e:	70 28       	ld.w	r8,r8[0x8]
800246a0:	10 99       	mov	r9,r8
800246a2:	a1 a9       	sbr	r9,0x0
800246a4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800246a8:	91 29       	st.w	r8[0x8],r9
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRAE_MASK);
         }
      break;
800246aa:	c7 18       	rjmp	8002478c <dacifb_configure_channel+0x2dc>
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLA_MASK);
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
800246ac:	ee f8 ff e8 	ld.w	r8,r7[-24]
800246b0:	11 99       	ld.ub	r9,r8[0x1]
800246b2:	30 18       	mov	r8,1
800246b4:	f0 09 18 00 	cp.b	r9,r8
800246b8:	c6 71       	brne	80024786 <dacifb_configure_channel+0x2d6>
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRAE_MASK);
800246ba:	ee f8 ff f0 	ld.w	r8,r7[-16]
800246be:	70 08       	ld.w	r8,r8[0x0]
800246c0:	10 99       	mov	r9,r8
800246c2:	b9 a9       	sbr	r9,0x18
800246c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800246c8:	91 09       	st.w	r8[0x0],r9
         }
      break;
800246ca:	c6 18       	rjmp	8002478c <dacifb_configure_channel+0x2dc>
    case DACIFB_CHANNEL_SELECTION_B:
         if (p_dacifb_channel_opt->trigger_mode!=DACIFB_TRIGGER_MODE_MANUAL)
800246cc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800246d0:	11 98       	ld.ub	r8,r8[0x1]
800246d2:	58 08       	cp.w	r8,0
800246d4:	c0 90       	breq	800246e6 <dacifb_configure_channel+0x236>
         {
             dacifb->cfr |= (AVR32_DACIFB_CFR_ABE_MASK);
800246d6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800246da:	70 18       	ld.w	r8,r8[0x4]
800246dc:	10 99       	mov	r9,r8
800246de:	b1 b9       	sbr	r9,0x11
800246e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800246e4:	91 19       	st.w	r8[0x4],r9
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
800246e6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800246ea:	11 99       	ld.ub	r9,r8[0x1]
800246ec:	30 28       	mov	r8,2
800246ee:	f0 09 18 00 	cp.b	r9,r8
800246f2:	c0 a1       	brne	80024706 <dacifb_configure_channel+0x256>
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLB_MASK);
800246f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800246f8:	70 28       	ld.w	r8,r8[0x8]
800246fa:	10 99       	mov	r9,r8
800246fc:	a9 a9       	sbr	r9,0x8
800246fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024702:	91 29       	st.w	r8[0x8],r9
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRBE_MASK);
         }
      break;    
80024704:	c4 48       	rjmp	8002478c <dacifb_configure_channel+0x2dc>
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLB_MASK);
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
80024706:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002470a:	11 99       	ld.ub	r9,r8[0x1]
8002470c:	30 18       	mov	r8,1
8002470e:	f0 09 18 00 	cp.b	r9,r8
80024712:	c3 c1       	brne	8002478a <dacifb_configure_channel+0x2da>
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRBE_MASK);
80024714:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024718:	70 08       	ld.w	r8,r8[0x0]
8002471a:	10 99       	mov	r9,r8
8002471c:	b9 b9       	sbr	r9,0x19
8002471e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024722:	91 09       	st.w	r8[0x0],r9
         }
      break;    
80024724:	c3 48       	rjmp	8002478c <dacifb_configure_channel+0x2dc>
    case DACIFB_CHANNEL_SELECTION_AB:
         if (p_dacifb_channel_opt->trigger_mode!=DACIFB_TRIGGER_MODE_MANUAL)
80024726:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002472a:	11 98       	ld.ub	r8,r8[0x1]
8002472c:	58 08       	cp.w	r8,0
8002472e:	c0 a0       	breq	80024742 <dacifb_configure_channel+0x292>
         {
             dacifb->cfr |= (AVR32_DACIFB_CFR_AAE_MASK)|(AVR32_DACIFB_CFR_ABE_MASK);
80024730:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024734:	70 18       	ld.w	r8,r8[0x4]
80024736:	10 99       	mov	r9,r8
80024738:	ea 19 00 03 	orh	r9,0x3
8002473c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024740:	91 19       	st.w	r8[0x4],r9
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
80024742:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024746:	11 99       	ld.ub	r9,r8[0x1]
80024748:	30 28       	mov	r8,2
8002474a:	f0 09 18 00 	cp.b	r9,r8
8002474e:	c0 b1       	brne	80024764 <dacifb_configure_channel+0x2b4>
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLA_MASK)|(AVR32_DACIFB_ECR_ESLB_MASK);
80024750:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024754:	70 28       	ld.w	r8,r8[0x8]
80024756:	10 99       	mov	r9,r8
80024758:	e8 19 01 01 	orl	r9,0x101
8002475c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024760:	91 29       	st.w	r8[0x8],r9
80024762:	c1 58       	rjmp	8002478c <dacifb_configure_channel+0x2dc>
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
80024764:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024768:	11 99       	ld.ub	r9,r8[0x1]
8002476a:	30 18       	mov	r8,1
8002476c:	f0 09 18 00 	cp.b	r9,r8
80024770:	c0 e1       	brne	8002478c <dacifb_configure_channel+0x2dc>
         {
           dacifb->cr  |= (AVR32_DACIFB_CR_TRAE_MASK)|(AVR32_DACIFB_CR_TRBE_MASK);
80024772:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024776:	70 08       	ld.w	r8,r8[0x0]
80024778:	10 99       	mov	r9,r8
8002477a:	ea 19 03 00 	orh	r9,0x300
8002477e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024782:	91 09       	st.w	r8[0x0],r9
80024784:	c0 48       	rjmp	8002478c <dacifb_configure_channel+0x2dc>
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRAE_MASK);
         }
      break;
80024786:	d7 03       	nop
80024788:	c0 28       	rjmp	8002478c <dacifb_configure_channel+0x2dc>
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRBE_MASK);
         }
      break;    
8002478a:	d7 03       	nop
      break;  
  }
  
  
  // Left Adjust/ Shift Value / Data Rounding
  switch(channel)
8002478c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80024790:	58 28       	cp.w	r8,2
80024792:	c2 20       	breq	800247d6 <dacifb_configure_channel+0x326>
80024794:	58 38       	cp.w	r8,3
80024796:	c3 d0       	breq	80024810 <dacifb_configure_channel+0x360>
80024798:	58 18       	cp.w	r8,1
8002479a:	c7 31       	brne	80024880 <dacifb_configure_channel+0x3d0>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
8002479c:	ee f8 ff f0 	ld.w	r8,r7[-16]
800247a0:	70 99       	ld.w	r9,r8[0x24]
800247a2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800247a6:	11 a8       	ld.ub	r8,r8[0x2]
800247a8:	ab 78       	lsl	r8,0xb
800247aa:	10 9a       	mov	r10,r8
800247ac:	e2 1a 08 00 	andl	r10,0x800,COH
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
800247b0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800247b4:	11 b8       	ld.ub	r8,r8[0x3]
800247b6:	a9 68       	lsl	r8,0x8
800247b8:	e2 18 07 00 	andl	r8,0x700,COH
800247bc:	10 4a       	or	r10,r8
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));      
800247be:	ee f8 ff e8 	ld.w	r8,r7[-24]
800247c2:	11 c8       	ld.ub	r8,r8[0x4]
800247c4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
  
  // Left Adjust/ Shift Value / Data Rounding
  switch(channel)
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
800247c8:	f5 e8 10 08 	or	r8,r10,r8
800247cc:	10 49       	or	r9,r8
800247ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800247d2:	91 99       	st.w	r8[0x24],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));      
      break;
800247d4:	c5 68       	rjmp	80024880 <dacifb_configure_channel+0x3d0>
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
800247d6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800247da:	70 a9       	ld.w	r9,r8[0x28]
800247dc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800247e0:	11 a8       	ld.ub	r8,r8[0x2]
800247e2:	ab 78       	lsl	r8,0xb
800247e4:	10 9a       	mov	r10,r8
800247e6:	e2 1a 08 00 	andl	r10,0x800,COH
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
800247ea:	ee f8 ff e8 	ld.w	r8,r7[-24]
800247ee:	11 b8       	ld.ub	r8,r8[0x3]
800247f0:	a9 68       	lsl	r8,0x8
800247f2:	e2 18 07 00 	andl	r8,0x700,COH
800247f6:	10 4a       	or	r10,r8
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
800247f8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800247fc:	11 c8       	ld.ub	r8,r8[0x4]
800247fe:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));      
      break;
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
80024802:	f5 e8 10 08 	or	r8,r10,r8
80024806:	10 49       	or	r9,r8
80024808:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002480c:	91 a9       	st.w	r8[0x28],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
      break;    
8002480e:	c3 98       	rjmp	80024880 <dacifb_configure_channel+0x3d0>
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
80024810:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024814:	70 99       	ld.w	r9,r8[0x24]
80024816:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002481a:	11 a8       	ld.ub	r8,r8[0x2]
8002481c:	ab 78       	lsl	r8,0xb
8002481e:	10 9a       	mov	r10,r8
80024820:	e2 1a 08 00 	andl	r10,0x800,COH
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
80024824:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024828:	11 b8       	ld.ub	r8,r8[0x3]
8002482a:	a9 68       	lsl	r8,0x8
8002482c:	e2 18 07 00 	andl	r8,0x700,COH
80024830:	10 4a       	or	r10,r8
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));   
80024832:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024836:	11 c8       	ld.ub	r8,r8[0x4]
80024838:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
      break;    
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
8002483c:	f5 e8 10 08 	or	r8,r10,r8
80024840:	10 49       	or	r9,r8
80024842:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024846:	91 99       	st.w	r8[0x24],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));   
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
80024848:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002484c:	70 a9       	ld.w	r9,r8[0x28]
8002484e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024852:	11 a8       	ld.ub	r8,r8[0x2]
80024854:	ab 78       	lsl	r8,0xb
80024856:	10 9a       	mov	r10,r8
80024858:	e2 1a 08 00 	andl	r10,0x800,COH
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
8002485c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024860:	11 b8       	ld.ub	r8,r8[0x3]
80024862:	a9 68       	lsl	r8,0x8
80024864:	e2 18 07 00 	andl	r8,0x700,COH
80024868:	10 4a       	or	r10,r8
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
8002486a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002486e:	11 c8       	ld.ub	r8,r8[0x4]
80024870:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
      break;    
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));   
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
80024874:	f5 e8 10 08 	or	r8,r10,r8
80024878:	10 49       	or	r9,r8
8002487a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002487e:	91 a9       	st.w	r8[0x28],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
      break;   
  }
  return DACIFB_CONFIGURATION_ACCEPTED;
80024880:	30 18       	mov	r8,1
}
80024882:	10 9c       	mov	r12,r8
80024884:	2f 9d       	sub	sp,-28
80024886:	e3 cd 80 80 	ldm	sp++,r7,pc

8002488a <dacifb_start_channel>:

void dacifb_start_channel(volatile avr32_dacifb_t * dacifb, 
                          U8 channel,
                          U32 cpu_hz)
{
8002488a:	eb cd 40 c0 	pushm	r6-r7,lr
8002488e:	1a 97       	mov	r7,sp
80024890:	20 3d       	sub	sp,12
80024892:	49 b6       	lddpc	r6,800248fc <dacifb_start_channel+0x72>
80024894:	1e 26       	rsub	r6,pc
80024896:	ef 4c ff fc 	st.w	r7[-4],r12
8002489a:	16 98       	mov	r8,r11
8002489c:	ef 4a ff f4 	st.w	r7[-12],r10
800248a0:	ef 68 ff f8 	st.b	r7[-8],r8
  Assert( dacifb!=NULL );
  
  // Wait 2us
  dacifb_us_delay(2,cpu_hz);
800248a4:	ee fb ff f4 	ld.w	r11,r7[-12]
800248a8:	30 2c       	mov	r12,2
800248aa:	fe b0 fc 63 	rcall	80024170 <dacifb_us_delay>
  
  switch(channel)
800248ae:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800248b2:	58 28       	cp.w	r8,2
800248b4:	c0 e0       	breq	800248d0 <dacifb_start_channel+0x46>
800248b6:	58 38       	cp.w	r8,3
800248b8:	c1 50       	breq	800248e2 <dacifb_start_channel+0x58>
800248ba:	58 18       	cp.w	r8,1
800248bc:	c1 c1       	brne	800248f4 <dacifb_start_channel+0x6a>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->cr |= (AVR32_DACIFB_CR_AOE_MASK);      
800248be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800248c2:	70 08       	ld.w	r8,r8[0x0]
800248c4:	10 99       	mov	r9,r8
800248c6:	b1 a9       	sbr	r9,0x10
800248c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800248cc:	91 09       	st.w	r8[0x0],r9
      break;
800248ce:	c1 38       	rjmp	800248f4 <dacifb_start_channel+0x6a>
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->cr |= (AVR32_DACIFB_CR_BOE_MASK );
800248d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800248d4:	70 08       	ld.w	r8,r8[0x0]
800248d6:	10 99       	mov	r9,r8
800248d8:	b1 b9       	sbr	r9,0x11
800248da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800248de:	91 09       	st.w	r8[0x0],r9
      break;
800248e0:	c0 a8       	rjmp	800248f4 <dacifb_start_channel+0x6a>
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->cr |= (AVR32_DACIFB_CR_AOE_MASK | AVR32_DACIFB_CR_BOE_MASK );
800248e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800248e6:	70 08       	ld.w	r8,r8[0x0]
800248e8:	10 99       	mov	r9,r8
800248ea:	ea 19 00 03 	orh	r9,0x3
800248ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800248f2:	91 09       	st.w	r8[0x0],r9
      break;    
  }
  
}
800248f4:	2f dd       	sub	sp,-12
800248f6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800248fa:	00 00       	add	r0,r0
800248fc:	80 02       	ld.sh	r2,r0[0x0]
800248fe:	47 18       	lddsp	r8,sp[0x1c4]

80024900 <dacifb_check_eoc>:


bool dacifb_check_eoc(volatile avr32_dacifb_t * dacifb, 
                      U8 channel)
{
80024900:	eb cd 40 80 	pushm	r7,lr
80024904:	1a 97       	mov	r7,sp
80024906:	20 2d       	sub	sp,8
80024908:	ef 4c ff fc 	st.w	r7[-4],r12
8002490c:	16 98       	mov	r8,r11
8002490e:	ef 68 ff f8 	st.b	r7[-8],r8
  Assert( dacifb!=NULL );
     
  // get SR register : EOC bit for channel
  return ((((dacifb->sr)&(channel<<AVR32_DACIFB_SR_DEA_OFFSET))==(channel<<AVR32_DACIFB_SR_DEA_OFFSET))? DACIFB_STATUS_COMPLETED : DACIFB_STATUS_NOT_COMPLETED);
80024912:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024916:	70 78       	ld.w	r8,r8[0x1c]
80024918:	30 18       	mov	r8,1
}
8002491a:	10 9c       	mov	r12,r8
8002491c:	2f ed       	sub	sp,-8
8002491e:	e3 cd 80 80 	ldm	sp++,r7,pc

80024922 <dacifb_set_value>:

void dacifb_set_value(volatile avr32_dacifb_t * dacifb, 
                      U8 channel,
                      bool dual,
                      U32 value)
{
80024922:	eb cd 40 80 	pushm	r7,lr
80024926:	1a 97       	mov	r7,sp
80024928:	20 4d       	sub	sp,16
8002492a:	ef 4c ff fc 	st.w	r7[-4],r12
8002492e:	14 98       	mov	r8,r10
80024930:	ef 49 ff f0 	st.w	r7[-16],r9
80024934:	16 99       	mov	r9,r11
80024936:	ef 69 ff f8 	st.b	r7[-8],r9
8002493a:	ef 68 ff f4 	st.b	r7[-12],r8
  Assert( dacifb != NULL );

  // Set new conversion value
  switch(channel)
8002493e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80024942:	58 28       	cp.w	r8,2
80024944:	c0 b0       	breq	8002495a <dacifb_set_value+0x38>
80024946:	58 38       	cp.w	r8,3
80024948:	c0 f0       	breq	80024966 <dacifb_set_value+0x44>
8002494a:	58 18       	cp.w	r8,1
8002494c:	c2 01       	brne	8002498c <dacifb_set_value+0x6a>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->dr0 = (value);      
8002494e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024952:	ee f9 ff f0 	ld.w	r9,r7[-16]
80024956:	91 b9       	st.w	r8[0x2c],r9
      break;
80024958:	c1 a8       	rjmp	8002498c <dacifb_set_value+0x6a>
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->dr1 = (value);
8002495a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002495e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80024962:	91 c9       	st.w	r8[0x30],r9
      break;
80024964:	c1 48       	rjmp	8002498c <dacifb_set_value+0x6a>
    case DACIFB_CHANNEL_SELECTION_AB:
       if(dual==true)
80024966:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8002496a:	30 08       	mov	r8,0
8002496c:	f0 09 18 00 	cp.b	r9,r8
80024970:	c0 70       	breq	8002497e <dacifb_set_value+0x5c>
       {
         dacifb->dr0 = value;
80024972:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024976:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002497a:	91 b9       	st.w	r8[0x2c],r9
8002497c:	c0 88       	rjmp	8002498c <dacifb_set_value+0x6a>
       }
       else
       {
           dacifb->dr0 = ((value&0x00FF) | ( (value&0xFF00>>16)<<16));
8002497e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024982:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80024986:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002498a:	91 b9       	st.w	r8[0x2c],r9
       }
      break;    
  }
}
8002498c:	2f cd       	sub	sp,-16
8002498e:	e3 cd 80 80 	ldm	sp++,r7,pc

80024992 <dacifb_reload_timer>:

void dacifb_reload_timer(volatile avr32_dacifb_t * dacifb,
                         U8 channel,
                         U8 timer_us,
                         U32 prescaler_clock_hz)
{
80024992:	eb cd 40 80 	pushm	r7,lr
80024996:	1a 97       	mov	r7,sp
80024998:	20 5d       	sub	sp,20
8002499a:	ef 4c ff f8 	st.w	r7[-8],r12
8002499e:	14 98       	mov	r8,r10
800249a0:	ef 49 ff ec 	st.w	r7[-20],r9
800249a4:	16 99       	mov	r9,r11
800249a6:	ef 69 ff f4 	st.b	r7[-12],r9
800249aa:	ef 68 ff f0 	st.b	r7[-16],r8
    U32 timer;
    
    Assert( dacifb != NULL ); 
    
    timer = ( (timer_us * prescaler_clock_hz)/1000000);
800249ae:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800249b2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800249b6:	b1 39       	mul	r9,r8
800249b8:	e0 68 de 83 	mov	r8,56963
800249bc:	ea 18 43 1b 	orh	r8,0x431b
800249c0:	f2 08 06 48 	mulu.d	r8,r9,r8
800249c4:	f2 08 16 12 	lsr	r8,r9,0x12
800249c8:	ef 48 ff fc 	st.w	r7[-4],r8
    // Reload Timer Valuie
    switch(channel)
800249cc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800249d0:	58 28       	cp.w	r8,2
800249d2:	c0 f0       	breq	800249f0 <dacifb_reload_timer+0x5e>
800249d4:	58 38       	cp.w	r8,3
800249d6:	c1 70       	breq	80024a04 <dacifb_reload_timer+0x72>
800249d8:	58 18       	cp.w	r8,1
800249da:	c2 71       	brne	80024a28 <dacifb_reload_timer+0x96>
    {
      case DACIFB_CHANNEL_SELECTION_A:
           dacifb->tra = (AVR32_DACIFB_TRA_TRL_MASK)|((timer<<AVR32_DACIFB_TRA_TCD_OFFSET)&AVR32_DACIFB_TRA_TCD_MASK);      
800249dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800249e0:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
800249e4:	10 99       	mov	r9,r8
800249e6:	bf b9       	sbr	r9,0x1f
800249e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800249ec:	91 e9       	st.w	r8[0x38],r9
        break;
800249ee:	c1 d8       	rjmp	80024a28 <dacifb_reload_timer+0x96>
      case DACIFB_CHANNEL_SELECTION_B:
           dacifb->trb = (AVR32_DACIFB_TRB_TRL_MASK)|((timer<<AVR32_DACIFB_TRB_TCD_OFFSET)&AVR32_DACIFB_TRB_TCD_MASK);  
800249f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800249f4:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
800249f8:	10 99       	mov	r9,r8
800249fa:	bf b9       	sbr	r9,0x1f
800249fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024a00:	91 f9       	st.w	r8[0x3c],r9
        break;
80024a02:	c1 38       	rjmp	80024a28 <dacifb_reload_timer+0x96>
      case DACIFB_CHANNEL_SELECTION_AB:
           dacifb->tra = (AVR32_DACIFB_TRA_TRL_MASK)|((timer<<AVR32_DACIFB_TRA_TCD_OFFSET)&AVR32_DACIFB_TRA_TCD_MASK); 
80024a04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024a08:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80024a0c:	10 99       	mov	r9,r8
80024a0e:	bf b9       	sbr	r9,0x1f
80024a10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024a14:	91 e9       	st.w	r8[0x38],r9
           dacifb->trb = (AVR32_DACIFB_TRB_TRL_MASK)|((timer<<AVR32_DACIFB_TRB_TCD_OFFSET)&AVR32_DACIFB_TRB_TCD_MASK); 
80024a16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024a1a:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80024a1e:	10 99       	mov	r9,r8
80024a20:	bf b9       	sbr	r9,0x1f
80024a22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024a26:	91 f9       	st.w	r8[0x3c],r9
        break;    
    }    
}
80024a28:	2f bd       	sub	sp,-20
80024a2a:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80024a30 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80024a30:	eb cd 40 80 	pushm	r7,lr
80024a34:	1a 97       	mov	r7,sp
80024a36:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80024a38:	e1 b8 00 00 	mfsr	r8,0x0
80024a3c:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80024a40:	d3 03       	ssrf	0x10

	return flags;
80024a42:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80024a46:	10 9c       	mov	r12,r8
80024a48:	2f fd       	sub	sp,-4
80024a4a:	e3 cd 80 80 	ldm	sp++,r7,pc

80024a4e <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
80024a4e:	eb cd 40 80 	pushm	r7,lr
80024a52:	1a 97       	mov	r7,sp
80024a54:	20 1d       	sub	sp,4
80024a56:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80024a5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024a5e:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
80024a62:	2f fd       	sub	sp,-4
80024a64:	e3 cd 80 80 	ldm	sp++,r7,pc

80024a68 <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
80024a68:	eb cd 40 80 	pushm	r7,lr
80024a6c:	1a 97       	mov	r7,sp
80024a6e:	20 4d       	sub	sp,16
80024a70:	ef 4c ff f8 	st.w	r7[-8],r12
80024a74:	ef 4b ff f4 	st.w	r7[-12],r11
80024a78:	ef 4a ff f0 	st.w	r7[-16],r10
	int i;
	for (i = 0; i < nb_lines; i++)
80024a7c:	30 08       	mov	r8,0
80024a7e:	ef 48 ff fc 	st.w	r7[-4],r8
80024a82:	c2 89       	rjmp	80024cd2 <eic_init+0x26a>
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80024a84:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024a88:	12 98       	mov	r8,r9
80024a8a:	a1 78       	lsl	r8,0x1
80024a8c:	12 08       	add	r8,r9
80024a8e:	a1 78       	lsl	r8,0x1
80024a90:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024a94:	f2 08 00 08 	add	r8,r9,r8
80024a98:	11 99       	ld.ub	r9,r8[0x1]
80024a9a:	30 18       	mov	r8,1
80024a9c:	f0 09 18 00 	cp.b	r9,r8
80024aa0:	c1 51       	brne	80024aca <eic_init+0x62>
			? (eic->mode | (1 << opt[i].eic_line))
80024aa2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024aa6:	70 5a       	ld.w	r10,r8[0x14]
80024aa8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024aac:	12 98       	mov	r8,r9
80024aae:	a1 78       	lsl	r8,0x1
80024ab0:	12 08       	add	r8,r9
80024ab2:	a1 78       	lsl	r8,0x1
80024ab4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024ab8:	f2 08 00 08 	add	r8,r9,r8
80024abc:	11 88       	ld.ub	r8,r8[0x0]
80024abe:	30 19       	mov	r9,1
80024ac0:	f2 08 09 48 	lsl	r8,r9,r8
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80024ac4:	f5 e8 10 08 	or	r8,r10,r8
80024ac8:	c1 58       	rjmp	80024af2 <eic_init+0x8a>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
80024aca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024ace:	70 5a       	ld.w	r10,r8[0x14]
80024ad0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024ad4:	12 98       	mov	r8,r9
80024ad6:	a1 78       	lsl	r8,0x1
80024ad8:	12 08       	add	r8,r9
80024ada:	a1 78       	lsl	r8,0x1
80024adc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024ae0:	f2 08 00 08 	add	r8,r9,r8
80024ae4:	11 88       	ld.ub	r8,r8[0x0]
80024ae6:	30 19       	mov	r9,1
80024ae8:	f2 08 09 48 	lsl	r8,r9,r8
80024aec:	5c d8       	com	r8
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80024aee:	f5 e8 00 08 	and	r8,r10,r8
80024af2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024af6:	93 58       	st.w	r9[0x14],r8
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80024af8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024afc:	12 98       	mov	r8,r9
80024afe:	a1 78       	lsl	r8,0x1
80024b00:	12 08       	add	r8,r9
80024b02:	a1 78       	lsl	r8,0x1
80024b04:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024b08:	f2 08 00 08 	add	r8,r9,r8
80024b0c:	11 a9       	ld.ub	r9,r8[0x2]
80024b0e:	30 18       	mov	r8,1
80024b10:	f0 09 18 00 	cp.b	r9,r8
80024b14:	c1 51       	brne	80024b3e <eic_init+0xd6>
			? (eic->edge | (1 << opt[i].eic_line))
80024b16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024b1a:	70 6a       	ld.w	r10,r8[0x18]
80024b1c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024b20:	12 98       	mov	r8,r9
80024b22:	a1 78       	lsl	r8,0x1
80024b24:	12 08       	add	r8,r9
80024b26:	a1 78       	lsl	r8,0x1
80024b28:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024b2c:	f2 08 00 08 	add	r8,r9,r8
80024b30:	11 88       	ld.ub	r8,r8[0x0]
80024b32:	30 19       	mov	r9,1
80024b34:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80024b38:	f5 e8 10 08 	or	r8,r10,r8
80024b3c:	c1 58       	rjmp	80024b66 <eic_init+0xfe>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
80024b3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024b42:	70 6a       	ld.w	r10,r8[0x18]
80024b44:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024b48:	12 98       	mov	r8,r9
80024b4a:	a1 78       	lsl	r8,0x1
80024b4c:	12 08       	add	r8,r9
80024b4e:	a1 78       	lsl	r8,0x1
80024b50:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024b54:	f2 08 00 08 	add	r8,r9,r8
80024b58:	11 88       	ld.ub	r8,r8[0x0]
80024b5a:	30 19       	mov	r9,1
80024b5c:	f2 08 09 48 	lsl	r8,r9,r8
80024b60:	5c d8       	com	r8
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80024b62:	f5 e8 00 08 	and	r8,r10,r8
80024b66:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024b6a:	93 68       	st.w	r9[0x18],r8
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80024b6c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024b70:	12 98       	mov	r8,r9
80024b72:	a1 78       	lsl	r8,0x1
80024b74:	12 08       	add	r8,r9
80024b76:	a1 78       	lsl	r8,0x1
80024b78:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024b7c:	f2 08 00 08 	add	r8,r9,r8
80024b80:	11 b9       	ld.ub	r9,r8[0x3]
80024b82:	30 18       	mov	r8,1
80024b84:	f0 09 18 00 	cp.b	r9,r8
80024b88:	c1 51       	brne	80024bb2 <eic_init+0x14a>
			? (eic->level | (1 << opt[i].eic_line))
80024b8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024b8e:	70 7a       	ld.w	r10,r8[0x1c]
80024b90:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024b94:	12 98       	mov	r8,r9
80024b96:	a1 78       	lsl	r8,0x1
80024b98:	12 08       	add	r8,r9
80024b9a:	a1 78       	lsl	r8,0x1
80024b9c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024ba0:	f2 08 00 08 	add	r8,r9,r8
80024ba4:	11 88       	ld.ub	r8,r8[0x0]
80024ba6:	30 19       	mov	r9,1
80024ba8:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80024bac:	f5 e8 10 08 	or	r8,r10,r8
80024bb0:	c1 58       	rjmp	80024bda <eic_init+0x172>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
80024bb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024bb6:	70 7a       	ld.w	r10,r8[0x1c]
80024bb8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024bbc:	12 98       	mov	r8,r9
80024bbe:	a1 78       	lsl	r8,0x1
80024bc0:	12 08       	add	r8,r9
80024bc2:	a1 78       	lsl	r8,0x1
80024bc4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024bc8:	f2 08 00 08 	add	r8,r9,r8
80024bcc:	11 88       	ld.ub	r8,r8[0x0]
80024bce:	30 19       	mov	r9,1
80024bd0:	f2 08 09 48 	lsl	r8,r9,r8
80024bd4:	5c d8       	com	r8
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
80024bd6:	f5 e8 00 08 	and	r8,r10,r8
80024bda:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024bde:	93 78       	st.w	r9[0x1c],r8
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80024be0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024be4:	12 98       	mov	r8,r9
80024be6:	a1 78       	lsl	r8,0x1
80024be8:	12 08       	add	r8,r9
80024bea:	a1 78       	lsl	r8,0x1
80024bec:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024bf0:	f2 08 00 08 	add	r8,r9,r8
80024bf4:	11 c9       	ld.ub	r9,r8[0x4]
80024bf6:	30 18       	mov	r8,1
80024bf8:	f0 09 18 00 	cp.b	r9,r8
80024bfc:	c1 51       	brne	80024c26 <eic_init+0x1be>
			? (eic->filter | (1 << opt[i].eic_line))
80024bfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024c02:	70 8a       	ld.w	r10,r8[0x20]
80024c04:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024c08:	12 98       	mov	r8,r9
80024c0a:	a1 78       	lsl	r8,0x1
80024c0c:	12 08       	add	r8,r9
80024c0e:	a1 78       	lsl	r8,0x1
80024c10:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024c14:	f2 08 00 08 	add	r8,r9,r8
80024c18:	11 88       	ld.ub	r8,r8[0x0]
80024c1a:	30 19       	mov	r9,1
80024c1c:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80024c20:	f5 e8 10 08 	or	r8,r10,r8
80024c24:	c1 58       	rjmp	80024c4e <eic_init+0x1e6>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
80024c26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024c2a:	70 8a       	ld.w	r10,r8[0x20]
80024c2c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024c30:	12 98       	mov	r8,r9
80024c32:	a1 78       	lsl	r8,0x1
80024c34:	12 08       	add	r8,r9
80024c36:	a1 78       	lsl	r8,0x1
80024c38:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024c3c:	f2 08 00 08 	add	r8,r9,r8
80024c40:	11 88       	ld.ub	r8,r8[0x0]
80024c42:	30 19       	mov	r9,1
80024c44:	f2 08 09 48 	lsl	r8,r9,r8
80024c48:	5c d8       	com	r8
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80024c4a:	f5 e8 00 08 	and	r8,r10,r8
80024c4e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024c52:	93 88       	st.w	r9[0x20],r8
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80024c54:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024c58:	12 98       	mov	r8,r9
80024c5a:	a1 78       	lsl	r8,0x1
80024c5c:	12 08       	add	r8,r9
80024c5e:	a1 78       	lsl	r8,0x1
80024c60:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024c64:	f2 08 00 08 	add	r8,r9,r8
80024c68:	11 d9       	ld.ub	r9,r8[0x5]
80024c6a:	30 18       	mov	r8,1
80024c6c:	f0 09 18 00 	cp.b	r9,r8
80024c70:	c1 51       	brne	80024c9a <eic_init+0x232>
			? (eic->async | (1 << opt[i].eic_line))
80024c72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024c76:	70 aa       	ld.w	r10,r8[0x28]
80024c78:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024c7c:	12 98       	mov	r8,r9
80024c7e:	a1 78       	lsl	r8,0x1
80024c80:	12 08       	add	r8,r9
80024c82:	a1 78       	lsl	r8,0x1
80024c84:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024c88:	f2 08 00 08 	add	r8,r9,r8
80024c8c:	11 88       	ld.ub	r8,r8[0x0]
80024c8e:	30 19       	mov	r9,1
80024c90:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80024c94:	f5 e8 10 08 	or	r8,r10,r8
80024c98:	c1 58       	rjmp	80024cc2 <eic_init+0x25a>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
80024c9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024c9e:	70 aa       	ld.w	r10,r8[0x28]
80024ca0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024ca4:	12 98       	mov	r8,r9
80024ca6:	a1 78       	lsl	r8,0x1
80024ca8:	12 08       	add	r8,r9
80024caa:	a1 78       	lsl	r8,0x1
80024cac:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024cb0:	f2 08 00 08 	add	r8,r9,r8
80024cb4:	11 88       	ld.ub	r8,r8[0x0]
80024cb6:	30 19       	mov	r9,1
80024cb8:	f2 08 09 48 	lsl	r8,r9,r8
80024cbc:	5c d8       	com	r8
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80024cbe:	f5 e8 00 08 	and	r8,r10,r8
80024cc2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024cc6:	93 a8       	st.w	r9[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
80024cc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024ccc:	2f f8       	sub	r8,-1
80024cce:	ef 48 ff fc 	st.w	r7[-4],r8
80024cd2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024cd6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024cda:	10 39       	cp.w	r9,r8
80024cdc:	fe 93 fe d4 	brlo	80024a84 <eic_init+0x1c>
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
	}
}
80024ce0:	2f cd       	sub	sp,-16
80024ce2:	e3 cd 80 80 	ldm	sp++,r7,pc

80024ce6 <eic_enable_lines>:

void eic_enable_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
80024ce6:	eb cd 40 80 	pushm	r7,lr
80024cea:	1a 97       	mov	r7,sp
80024cec:	20 2d       	sub	sp,8
80024cee:	ef 4c ff fc 	st.w	r7[-4],r12
80024cf2:	ef 4b ff f8 	st.w	r7[-8],r11
	eic->en = mask_lines;
80024cf6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024cfa:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024cfe:	91 c9       	st.w	r8[0x30],r9
}
80024d00:	2f ed       	sub	sp,-8
80024d02:	e3 cd 80 80 	ldm	sp++,r7,pc

80024d06 <eic_enable_line>:

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024d06:	eb cd 40 80 	pushm	r7,lr
80024d0a:	1a 97       	mov	r7,sp
80024d0c:	20 2d       	sub	sp,8
80024d0e:	ef 4c ff fc 	st.w	r7[-4],r12
80024d12:	ef 4b ff f8 	st.w	r7[-8],r11
	// Enable line line_number
	eic->en = 1 << line_number;
80024d16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024d1a:	30 19       	mov	r9,1
80024d1c:	f2 08 09 48 	lsl	r8,r9,r8
80024d20:	10 99       	mov	r9,r8
80024d22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024d26:	91 c9       	st.w	r8[0x30],r9
}
80024d28:	2f ed       	sub	sp,-8
80024d2a:	e3 cd 80 80 	ldm	sp++,r7,pc

80024d2e <eic_disable_lines>:

void eic_disable_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
80024d2e:	eb cd 40 80 	pushm	r7,lr
80024d32:	1a 97       	mov	r7,sp
80024d34:	20 2d       	sub	sp,8
80024d36:	ef 4c ff fc 	st.w	r7[-4],r12
80024d3a:	ef 4b ff f8 	st.w	r7[-8],r11
	eic->dis = mask_lines;
80024d3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024d42:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024d46:	91 d9       	st.w	r8[0x34],r9
}
80024d48:	2f ed       	sub	sp,-8
80024d4a:	e3 cd 80 80 	ldm	sp++,r7,pc

80024d4e <eic_disable_line>:

void eic_disable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024d4e:	eb cd 40 80 	pushm	r7,lr
80024d52:	1a 97       	mov	r7,sp
80024d54:	20 2d       	sub	sp,8
80024d56:	ef 4c ff fc 	st.w	r7[-4],r12
80024d5a:	ef 4b ff f8 	st.w	r7[-8],r11
	// Disable line line_number
	eic->dis = 1 << line_number;
80024d5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024d62:	30 19       	mov	r9,1
80024d64:	f2 08 09 48 	lsl	r8,r9,r8
80024d68:	10 99       	mov	r9,r8
80024d6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024d6e:	91 d9       	st.w	r8[0x34],r9
}
80024d70:	2f ed       	sub	sp,-8
80024d72:	e3 cd 80 80 	ldm	sp++,r7,pc

80024d76 <eic_is_line_enabled>:

bool eic_is_line_enabled(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024d76:	eb cd 40 80 	pushm	r7,lr
80024d7a:	1a 97       	mov	r7,sp
80024d7c:	20 2d       	sub	sp,8
80024d7e:	ef 4c ff fc 	st.w	r7[-4],r12
80024d82:	ef 4b ff f8 	st.w	r7[-8],r11
	return (eic->ctrl & (1 << line_number)) != 0;
80024d86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024d8a:	70 e9       	ld.w	r9,r8[0x38]
80024d8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024d90:	30 1a       	mov	r10,1
80024d92:	f4 08 09 48 	lsl	r8,r10,r8
80024d96:	f3 e8 00 08 	and	r8,r9,r8
80024d9a:	5f 18       	srne	r8
80024d9c:	5c 58       	castu.b	r8
}
80024d9e:	10 9c       	mov	r12,r8
80024da0:	2f ed       	sub	sp,-8
80024da2:	e3 cd 80 80 	ldm	sp++,r7,pc

80024da6 <eic_enable_interrupt_lines>:

void eic_enable_interrupt_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
80024da6:	eb cd 40 80 	pushm	r7,lr
80024daa:	1a 97       	mov	r7,sp
80024dac:	20 2d       	sub	sp,8
80024dae:	ef 4c ff fc 	st.w	r7[-4],r12
80024db2:	ef 4b ff f8 	st.w	r7[-8],r11
	eic->ier = mask_lines;
80024db6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024dba:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024dbe:	91 09       	st.w	r8[0x0],r9
}
80024dc0:	2f ed       	sub	sp,-8
80024dc2:	e3 cd 80 80 	ldm	sp++,r7,pc

80024dc6 <eic_enable_interrupt_line>:

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024dc6:	eb cd 40 80 	pushm	r7,lr
80024dca:	1a 97       	mov	r7,sp
80024dcc:	20 2d       	sub	sp,8
80024dce:	ef 4c ff fc 	st.w	r7[-4],r12
80024dd2:	ef 4b ff f8 	st.w	r7[-8],r11
	// Enable line line_number
	eic->ier = 1 << line_number;
80024dd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024dda:	30 19       	mov	r9,1
80024ddc:	f2 08 09 48 	lsl	r8,r9,r8
80024de0:	10 99       	mov	r9,r8
80024de2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024de6:	91 09       	st.w	r8[0x0],r9
}
80024de8:	2f ed       	sub	sp,-8
80024dea:	e3 cd 80 80 	ldm	sp++,r7,pc

80024dee <eic_disable_interrupt_lines>:

void eic_disable_interrupt_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
80024dee:	eb cd 40 c0 	pushm	r6-r7,lr
80024df2:	1a 97       	mov	r7,sp
80024df4:	20 3d       	sub	sp,12
80024df6:	48 d6       	lddpc	r6,80024e28 <eic_disable_interrupt_lines+0x3a>
80024df8:	1e 26       	rsub	r6,pc
80024dfa:	ef 4c ff f8 	st.w	r7[-8],r12
80024dfe:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
80024e02:	c1 7e       	rcall	80024a30 <cpu_irq_save>
80024e04:	18 98       	mov	r8,r12
80024e06:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->idr = mask_lines;
80024e0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024e0e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024e12:	91 19       	st.w	r8[0x4],r9
	eic->imr;
80024e14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024e18:	70 28       	ld.w	r8,r8[0x8]
	cpu_irq_restore(flags);
80024e1a:	ee fc ff fc 	ld.w	r12,r7[-4]
80024e1e:	c1 8e       	rcall	80024a4e <cpu_irq_restore>
}
80024e20:	2f dd       	sub	sp,-12
80024e22:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024e26:	00 00       	add	r0,r0
80024e28:	80 02       	ld.sh	r2,r0[0x0]
80024e2a:	4c 7c       	lddpc	r12,80024f44 <eic_is_interrupt_line_pending+0x18>

80024e2c <eic_disable_interrupt_line>:

void eic_disable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024e2c:	eb cd 40 c0 	pushm	r6-r7,lr
80024e30:	1a 97       	mov	r7,sp
80024e32:	20 3d       	sub	sp,12
80024e34:	48 f6       	lddpc	r6,80024e70 <eic_disable_interrupt_line+0x44>
80024e36:	1e 26       	rsub	r6,pc
80024e38:	ef 4c ff f8 	st.w	r7[-8],r12
80024e3c:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
80024e40:	fe b0 fd f8 	rcall	80024a30 <cpu_irq_save>
80024e44:	18 98       	mov	r8,r12
80024e46:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->idr = 1 << line_number;
80024e4a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024e4e:	30 19       	mov	r9,1
80024e50:	f2 08 09 48 	lsl	r8,r9,r8
80024e54:	10 99       	mov	r9,r8
80024e56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024e5a:	91 19       	st.w	r8[0x4],r9
	eic->imr;
80024e5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024e60:	70 28       	ld.w	r8,r8[0x8]
	cpu_irq_restore(flags);
80024e62:	ee fc ff fc 	ld.w	r12,r7[-4]
80024e66:	fe b0 fd f4 	rcall	80024a4e <cpu_irq_restore>
}
80024e6a:	2f dd       	sub	sp,-12
80024e6c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024e70:	80 02       	ld.sh	r2,r0[0x0]
80024e72:	4c ba       	lddpc	r10,80024f9c <flashc_get_page_count+0x18>

80024e74 <eic_is_interrupt_line_enabled>:

bool eic_is_interrupt_line_enabled(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024e74:	eb cd 40 80 	pushm	r7,lr
80024e78:	1a 97       	mov	r7,sp
80024e7a:	20 2d       	sub	sp,8
80024e7c:	ef 4c ff fc 	st.w	r7[-4],r12
80024e80:	ef 4b ff f8 	st.w	r7[-8],r11
	return (eic->imr & (1 << line_number)) != 0;
80024e84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024e88:	70 29       	ld.w	r9,r8[0x8]
80024e8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024e8e:	30 1a       	mov	r10,1
80024e90:	f4 08 09 48 	lsl	r8,r10,r8
80024e94:	f3 e8 00 08 	and	r8,r9,r8
80024e98:	5f 18       	srne	r8
80024e9a:	5c 58       	castu.b	r8
}
80024e9c:	10 9c       	mov	r12,r8
80024e9e:	2f ed       	sub	sp,-8
80024ea0:	e3 cd 80 80 	ldm	sp++,r7,pc

80024ea4 <eic_clear_interrupt_lines>:

void eic_clear_interrupt_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
80024ea4:	eb cd 40 c0 	pushm	r6-r7,lr
80024ea8:	1a 97       	mov	r7,sp
80024eaa:	20 3d       	sub	sp,12
80024eac:	48 d6       	lddpc	r6,80024ee0 <eic_clear_interrupt_lines+0x3c>
80024eae:	1e 26       	rsub	r6,pc
80024eb0:	ef 4c ff f8 	st.w	r7[-8],r12
80024eb4:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
80024eb8:	fe b0 fd bc 	rcall	80024a30 <cpu_irq_save>
80024ebc:	18 98       	mov	r8,r12
80024ebe:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->icr = mask_lines;
80024ec2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024ec6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024eca:	91 49       	st.w	r8[0x10],r9
	eic->isr;
80024ecc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024ed0:	70 38       	ld.w	r8,r8[0xc]
	cpu_irq_restore(flags);
80024ed2:	ee fc ff fc 	ld.w	r12,r7[-4]
80024ed6:	fe b0 fd bc 	rcall	80024a4e <cpu_irq_restore>
}
80024eda:	2f dd       	sub	sp,-12
80024edc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024ee0:	80 02       	ld.sh	r2,r0[0x0]
80024ee2:	4d 32       	lddpc	r2,8002502c <flashc_get_wait_state+0x8>

80024ee4 <eic_clear_interrupt_line>:

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024ee4:	eb cd 40 c0 	pushm	r6-r7,lr
80024ee8:	1a 97       	mov	r7,sp
80024eea:	20 3d       	sub	sp,12
80024eec:	48 f6       	lddpc	r6,80024f28 <eic_clear_interrupt_line+0x44>
80024eee:	1e 26       	rsub	r6,pc
80024ef0:	ef 4c ff f8 	st.w	r7[-8],r12
80024ef4:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
80024ef8:	fe b0 fd 9c 	rcall	80024a30 <cpu_irq_save>
80024efc:	18 98       	mov	r8,r12
80024efe:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->icr = 1 << line_number;
80024f02:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024f06:	30 19       	mov	r9,1
80024f08:	f2 08 09 48 	lsl	r8,r9,r8
80024f0c:	10 99       	mov	r9,r8
80024f0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024f12:	91 49       	st.w	r8[0x10],r9
	eic->isr;
80024f14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024f18:	70 38       	ld.w	r8,r8[0xc]
	cpu_irq_restore(flags);
80024f1a:	ee fc ff fc 	ld.w	r12,r7[-4]
80024f1e:	fe b0 fd 98 	rcall	80024a4e <cpu_irq_restore>
}
80024f22:	2f dd       	sub	sp,-12
80024f24:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024f28:	80 02       	ld.sh	r2,r0[0x0]
80024f2a:	4d 72       	lddpc	r2,80025084 <flashc_set_bus_freq+0x2>

80024f2c <eic_is_interrupt_line_pending>:

bool eic_is_interrupt_line_pending(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024f2c:	eb cd 40 80 	pushm	r7,lr
80024f30:	1a 97       	mov	r7,sp
80024f32:	20 2d       	sub	sp,8
80024f34:	ef 4c ff fc 	st.w	r7[-4],r12
80024f38:	ef 4b ff f8 	st.w	r7[-8],r11
	return (eic->isr & (1 << line_number)) != 0;
80024f3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024f40:	70 39       	ld.w	r9,r8[0xc]
80024f42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024f46:	30 1a       	mov	r10,1
80024f48:	f4 08 09 48 	lsl	r8,r10,r8
80024f4c:	f3 e8 00 08 	and	r8,r9,r8
80024f50:	5f 18       	srne	r8
80024f52:	5c 58       	castu.b	r8
}
80024f54:	10 9c       	mov	r12,r8
80024f56:	2f ed       	sub	sp,-8
80024f58:	e3 cd 80 80 	ldm	sp++,r7,pc

80024f5c <flashc_get_flash_size>:
 */
//! @{


unsigned int flashc_get_flash_size(void)
{
80024f5c:	eb cd 40 c0 	pushm	r6-r7,lr
80024f60:	1a 97       	mov	r7,sp
80024f62:	48 86       	lddpc	r6,80024f80 <flashc_get_flash_size+0x24>
80024f64:	1e 26       	rsub	r6,pc
     512 << 10,
     768 << 10,
    1024 << 10,
    2048 << 10      
  };
  return FLASH_SIZE[(AVR32_FLASHC.pr & AVR32_FLASHC_PR_FSZ_MASK) >> AVR32_FLASHC_PR_FSZ_OFFSET];
80024f66:	fe 68 00 00 	mov	r8,-131072
80024f6a:	70 38       	ld.w	r8,r8[0xc]
80024f6c:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
80024f70:	ec f8 08 9c 	ld.w	r8,r6[2204]
80024f74:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
     768 << 10,
    1024 << 10
  };
  return FLASH_SIZE[(AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FSZ_MASK) >> AVR32_FLASHC_FSR_FSZ_OFFSET];
#endif  
}
80024f78:	10 9c       	mov	r12,r8
80024f7a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024f7e:	00 00       	add	r0,r0
80024f80:	80 02       	ld.sh	r2,r0[0x0]
80024f82:	4d e8       	lddpc	r8,800250f8 <flashc_enable_ready_int+0x24>

80024f84 <flashc_get_page_count>:


unsigned int flashc_get_page_count(void)
{
80024f84:	eb cd 40 c0 	pushm	r6-r7,lr
80024f88:	1a 97       	mov	r7,sp
80024f8a:	48 56       	lddpc	r6,80024f9c <flashc_get_page_count+0x18>
80024f8c:	1e 26       	rsub	r6,pc
  return flashc_get_flash_size() / AVR32_FLASHC_PAGE_SIZE;
80024f8e:	f0 16 00 c6 	mcall	r6[792]
80024f92:	18 98       	mov	r8,r12
80024f94:	a9 98       	lsr	r8,0x9
}
80024f96:	10 9c       	mov	r12,r8
80024f98:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024f9c:	80 02       	ld.sh	r2,r0[0x0]
80024f9e:	4e 10       	lddpc	r0,80025120 <flashc_is_lock_error_int_enabled+0xe>

80024fa0 <flashc_get_page_count_per_region>:


unsigned int flashc_get_page_count_per_region(void)
{
80024fa0:	eb cd 40 c0 	pushm	r6-r7,lr
80024fa4:	1a 97       	mov	r7,sp
80024fa6:	48 56       	lddpc	r6,80024fb8 <flashc_get_page_count_per_region+0x18>
80024fa8:	1e 26       	rsub	r6,pc
  return flashc_get_page_count() / AVR32_FLASHC_REGIONS;
80024faa:	f0 16 01 04 	mcall	r6[1040]
80024fae:	18 98       	mov	r8,r12
80024fb0:	a5 88       	lsr	r8,0x4
}
80024fb2:	10 9c       	mov	r12,r8
80024fb4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024fb8:	80 02       	ld.sh	r2,r0[0x0]
80024fba:	4e 2c       	lddpc	r12,80025140 <flashc_enable_lock_error_int+0x14>

80024fbc <flashc_get_page_region>:


unsigned int flashc_get_page_region(int page_number)
{
80024fbc:	eb cd 40 e0 	pushm	r5-r7,lr
80024fc0:	1a 97       	mov	r7,sp
80024fc2:	20 1d       	sub	sp,4
80024fc4:	48 c6       	lddpc	r6,80024ff4 <flashc_get_page_region+0x38>
80024fc6:	1e 26       	rsub	r6,pc
80024fc8:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((page_number >= 0) ? page_number : flashc_get_page_number()) / flashc_get_page_count_per_region();
80024fcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024fd0:	58 08       	cp.w	r8,0
80024fd2:	c0 45       	brlt	80024fda <flashc_get_page_region+0x1e>
80024fd4:	ee f5 ff fc 	ld.w	r5,r7[-4]
80024fd8:	c0 58       	rjmp	80024fe2 <flashc_get_page_region+0x26>
80024fda:	f0 16 01 88 	mcall	r6[1568]
80024fde:	18 98       	mov	r8,r12
80024fe0:	10 95       	mov	r5,r8
80024fe2:	f0 16 01 13 	mcall	r6[1100]
80024fe6:	18 98       	mov	r8,r12
80024fe8:	ea 08 0d 08 	divu	r8,r5,r8
}
80024fec:	10 9c       	mov	r12,r8
80024fee:	2f fd       	sub	sp,-4
80024ff0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80024ff4:	80 02       	ld.sh	r2,r0[0x0]
80024ff6:	4e 4a       	lddpc	r10,80025184 <flashc_enable_prog_error_int>

80024ff8 <flashc_get_region_first_page_number>:


unsigned int flashc_get_region_first_page_number(unsigned int region)
{
80024ff8:	eb cd 40 c0 	pushm	r6-r7,lr
80024ffc:	1a 97       	mov	r7,sp
80024ffe:	20 1d       	sub	sp,4
80025000:	48 86       	lddpc	r6,80025020 <flashc_get_region_first_page_number+0x28>
80025002:	1e 26       	rsub	r6,pc
80025004:	ef 4c ff fc 	st.w	r7[-4],r12
  return region * flashc_get_page_count_per_region();
80025008:	f0 16 01 13 	mcall	r6[1100]
8002500c:	18 99       	mov	r9,r12
8002500e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025012:	f2 08 02 48 	mul	r8,r9,r8
}
80025016:	10 9c       	mov	r12,r8
80025018:	2f fd       	sub	sp,-4
8002501a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002501e:	00 00       	add	r0,r0
80025020:	80 02       	ld.sh	r2,r0[0x0]
80025022:	4e 86       	lddpc	r6,800251c0 <flashc_enable_prog_error_int+0x3c>

80025024 <flashc_get_wait_state>:
 */
//! @{


unsigned int flashc_get_wait_state(void)
{
80025024:	eb cd 40 80 	pushm	r7,lr
80025028:	1a 97       	mov	r7,sp
  return (AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FWS_MASK) >> AVR32_FLASHC_FCR_FWS_OFFSET;
8002502a:	fe 68 00 00 	mov	r8,-131072
8002502e:	70 08       	ld.w	r8,r8[0x0]
80025030:	e2 18 00 40 	andl	r8,0x40,COH
80025034:	a7 88       	lsr	r8,0x6
}
80025036:	10 9c       	mov	r12,r8
80025038:	e3 cd 80 80 	ldm	sp++,r7,pc

8002503c <flashc_set_wait_state>:


void flashc_set_wait_state(unsigned int wait_state)
{
8002503c:	eb cd 40 80 	pushm	r7,lr
80025040:	1a 97       	mov	r7,sp
80025042:	20 2d       	sub	sp,8
80025044:	ef 4c ff f8 	st.w	r7[-8],r12
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80025048:	fe 68 00 00 	mov	r8,-131072
8002504c:	70 08       	ld.w	r8,r8[0x0]
8002504e:	30 09       	mov	r9,0
80025050:	ef 49 ff fc 	st.w	r7[-4],r9
80025054:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcr.FCR.fws = wait_state;
80025058:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002505c:	5c 58       	castu.b	r8
8002505e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80025062:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80025066:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002506a:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
8002506e:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80025072:	fe 68 00 00 	mov	r8,-131072
80025076:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002507a:	91 09       	st.w	r8[0x0],r9
}
8002507c:	2f ed       	sub	sp,-8
8002507e:	e3 cd 80 80 	ldm	sp++,r7,pc

80025082 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80025082:	eb cd 40 c0 	pushm	r6-r7,lr
80025086:	1a 97       	mov	r7,sp
80025088:	20 1d       	sub	sp,4
8002508a:	48 c6       	lddpc	r6,800250b8 <flashc_set_bus_freq+0x36>
8002508c:	1e 26       	rsub	r6,pc
8002508e:	ef 4c ff fc 	st.w	r7[-4],r12
  if(cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ)
80025092:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025096:	e0 69 8a 3f 	mov	r9,35391
8002509a:	ea 19 01 f7 	orh	r9,0x1f7
8002509e:	12 38       	cp.w	r8,r9
800250a0:	e0 88 00 06 	brls	800250ac <flashc_set_bus_freq+0x2a>
  {
    // Set 1 WS.
    flashc_set_wait_state(1);
800250a4:	30 1c       	mov	r12,1
800250a6:	f0 16 00 9b 	mcall	r6[620]
800250aa:	c0 48       	rjmp	800250b2 <flashc_set_bus_freq+0x30>
  }
  else
  {
    // Set 0 WS.
    flashc_set_wait_state(0);
800250ac:	30 0c       	mov	r12,0
800250ae:	f0 16 00 9b 	mcall	r6[620]
  }
}
800250b2:	2f fd       	sub	sp,-4
800250b4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800250b8:	80 02       	ld.sh	r2,r0[0x0]
800250ba:	4f 10       	lddpc	r0,8002527c <flashc_get_page_number+0xe>

800250bc <flashc_is_ready_int_enabled>:

bool flashc_is_ready_int_enabled(void)
{
800250bc:	eb cd 40 80 	pushm	r7,lr
800250c0:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FRDY_MASK) != 0);
800250c2:	fe 68 00 00 	mov	r8,-131072
800250c6:	70 08       	ld.w	r8,r8[0x0]
800250c8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800250cc:	5c 58       	castu.b	r8
}
800250ce:	10 9c       	mov	r12,r8
800250d0:	e3 cd 80 80 	ldm	sp++,r7,pc

800250d4 <flashc_enable_ready_int>:


void flashc_enable_ready_int(bool enable)
{
800250d4:	eb cd 40 80 	pushm	r7,lr
800250d8:	1a 97       	mov	r7,sp
800250da:	20 2d       	sub	sp,8
800250dc:	18 98       	mov	r8,r12
800250de:	ef 68 ff f8 	st.b	r7[-8],r8
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800250e2:	fe 68 00 00 	mov	r8,-131072
800250e6:	70 08       	ld.w	r8,r8[0x0]
800250e8:	30 09       	mov	r9,0
800250ea:	ef 49 ff fc 	st.w	r7[-4],r9
800250ee:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcr.FCR.frdy = (enable != false);
800250f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800250f6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800250fa:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800250fe:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80025102:	fe 68 00 00 	mov	r8,-131072
80025106:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002510a:	91 09       	st.w	r8[0x0],r9
}
8002510c:	2f ed       	sub	sp,-8
8002510e:	e3 cd 80 80 	ldm	sp++,r7,pc

80025112 <flashc_is_lock_error_int_enabled>:


bool flashc_is_lock_error_int_enabled(void)
{
80025112:	eb cd 40 80 	pushm	r7,lr
80025116:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_LOCKE_MASK) != 0);
80025118:	fe 68 00 00 	mov	r8,-131072
8002511c:	70 08       	ld.w	r8,r8[0x0]
8002511e:	e2 18 00 04 	andl	r8,0x4,COH
80025122:	5f 18       	srne	r8
80025124:	5c 58       	castu.b	r8
}
80025126:	10 9c       	mov	r12,r8
80025128:	e3 cd 80 80 	ldm	sp++,r7,pc

8002512c <flashc_enable_lock_error_int>:


void flashc_enable_lock_error_int(bool enable)
{
8002512c:	eb cd 40 80 	pushm	r7,lr
80025130:	1a 97       	mov	r7,sp
80025132:	20 2d       	sub	sp,8
80025134:	18 98       	mov	r8,r12
80025136:	ef 68 ff f8 	st.b	r7[-8],r8
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
8002513a:	fe 68 00 00 	mov	r8,-131072
8002513e:	70 08       	ld.w	r8,r8[0x0]
80025140:	30 09       	mov	r9,0
80025142:	ef 49 ff fc 	st.w	r7[-4],r9
80025146:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcr.FCR.locke = (enable != false);
8002514a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002514e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80025152:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
80025156:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8002515a:	fe 68 00 00 	mov	r8,-131072
8002515e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025162:	91 09       	st.w	r8[0x0],r9
}
80025164:	2f ed       	sub	sp,-8
80025166:	e3 cd 80 80 	ldm	sp++,r7,pc

8002516a <flashc_is_prog_error_int_enabled>:


bool flashc_is_prog_error_int_enabled(void)
{
8002516a:	eb cd 40 80 	pushm	r7,lr
8002516e:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_PROGE_MASK) != 0);
80025170:	fe 68 00 00 	mov	r8,-131072
80025174:	70 08       	ld.w	r8,r8[0x0]
80025176:	e2 18 00 08 	andl	r8,0x8,COH
8002517a:	5f 18       	srne	r8
8002517c:	5c 58       	castu.b	r8
}
8002517e:	10 9c       	mov	r12,r8
80025180:	e3 cd 80 80 	ldm	sp++,r7,pc

80025184 <flashc_enable_prog_error_int>:


void flashc_enable_prog_error_int(bool enable)
{
80025184:	eb cd 40 80 	pushm	r7,lr
80025188:	1a 97       	mov	r7,sp
8002518a:	20 2d       	sub	sp,8
8002518c:	18 98       	mov	r8,r12
8002518e:	ef 68 ff f8 	st.b	r7[-8],r8
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80025192:	fe 68 00 00 	mov	r8,-131072
80025196:	70 08       	ld.w	r8,r8[0x0]
80025198:	30 09       	mov	r9,0
8002519a:	ef 49 ff fc 	st.w	r7[-4],r9
8002519e:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcr.FCR.proge = (enable != false);
800251a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800251a6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800251aa:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
800251ae:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
800251b2:	fe 68 00 00 	mov	r8,-131072
800251b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800251ba:	91 09       	st.w	r8[0x0],r9
}
800251bc:	2f ed       	sub	sp,-8
800251be:	e3 cd 80 80 	ldm	sp++,r7,pc

800251c2 <flashc_is_ready>:
 */
//! @{


bool flashc_is_ready(void)
{
800251c2:	eb cd 40 80 	pushm	r7,lr
800251c6:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
800251c8:	fe 68 00 00 	mov	r8,-131072
800251cc:	70 28       	ld.w	r8,r8[0x8]
800251ce:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800251d2:	5c 58       	castu.b	r8
}
800251d4:	10 9c       	mov	r12,r8
800251d6:	e3 cd 80 80 	ldm	sp++,r7,pc

800251da <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
800251da:	eb cd 40 c0 	pushm	r6-r7,lr
800251de:	1a 97       	mov	r7,sp
800251e0:	48 66       	lddpc	r6,800251f8 <flashc_default_wait_until_ready+0x1e>
800251e2:	1e 26       	rsub	r6,pc
  while (!flashc_is_ready());
800251e4:	f0 16 01 a9 	mcall	r6[1700]
800251e8:	18 98       	mov	r8,r12
800251ea:	ec 18 00 01 	eorl	r8,0x1
800251ee:	5c 58       	castu.b	r8
800251f0:	cf a1       	brne	800251e4 <flashc_default_wait_until_ready+0xa>
}
800251f2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800251f6:	00 00       	add	r0,r0
800251f8:	80 02       	ld.sh	r2,r0[0x0]
800251fa:	50 66       	stdsp	sp[0x18],r6

800251fc <flashc_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
800251fc:	eb cd 40 80 	pushm	r7,lr
80025200:	1a 97       	mov	r7,sp
  return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80025202:	fe 68 00 00 	mov	r8,-131072
80025206:	70 28       	ld.w	r8,r8[0x8]
80025208:	e2 18 00 0c 	andl	r8,0xc,COH
                             AVR32_FLASHC_FSR_PROGE_MASK);
}
8002520c:	10 9c       	mov	r12,r8
8002520e:	e3 cd 80 80 	ldm	sp++,r7,pc

80025212 <flashc_is_lock_error>:
//! by a function.
static unsigned int flashc_error_status = 0;


bool flashc_is_lock_error(void)
{
80025212:	eb cd 40 c0 	pushm	r6-r7,lr
80025216:	1a 97       	mov	r7,sp
80025218:	48 66       	lddpc	r6,80025230 <flashc_is_lock_error+0x1e>
8002521a:	1e 26       	rsub	r6,pc
  return ((flashc_error_status & AVR32_FLASHC_FSR_LOCKE_MASK) != 0);
8002521c:	ec f8 00 54 	ld.w	r8,r6[84]
80025220:	70 08       	ld.w	r8,r8[0x0]
80025222:	e2 18 00 04 	andl	r8,0x4,COH
80025226:	5f 18       	srne	r8
80025228:	5c 58       	castu.b	r8
}
8002522a:	10 9c       	mov	r12,r8
8002522c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025230:	80 02       	ld.sh	r2,r0[0x0]
80025232:	50 9e       	stdsp	sp[0x24],lr

80025234 <flashc_is_programming_error>:


bool flashc_is_programming_error(void)
{
80025234:	eb cd 40 c0 	pushm	r6-r7,lr
80025238:	1a 97       	mov	r7,sp
8002523a:	48 76       	lddpc	r6,80025254 <flashc_is_programming_error+0x20>
8002523c:	1e 26       	rsub	r6,pc
  return ((flashc_error_status & AVR32_FLASHC_FSR_PROGE_MASK) != 0);
8002523e:	ec f8 00 54 	ld.w	r8,r6[84]
80025242:	70 08       	ld.w	r8,r8[0x0]
80025244:	e2 18 00 08 	andl	r8,0x8,COH
80025248:	5f 18       	srne	r8
8002524a:	5c 58       	castu.b	r8
}
8002524c:	10 9c       	mov	r12,r8
8002524e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025252:	00 00       	add	r0,r0
80025254:	80 02       	ld.sh	r2,r0[0x0]
80025256:	50 c0       	stdsp	sp[0x30],r0

80025258 <flashc_get_command>:
 */
//! @{


unsigned int flashc_get_command(void)
{
80025258:	eb cd 40 80 	pushm	r7,lr
8002525c:	1a 97       	mov	r7,sp
  return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_CMD_MASK) >> AVR32_FLASHC_FCMD_CMD_OFFSET;
8002525e:	fe 68 00 00 	mov	r8,-131072
80025262:	70 18       	ld.w	r8,r8[0x4]
80025264:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
}
80025268:	10 9c       	mov	r12,r8
8002526a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002526e <flashc_get_page_number>:


unsigned int flashc_get_page_number(void)
{
8002526e:	eb cd 40 80 	pushm	r7,lr
80025272:	1a 97       	mov	r7,sp
  return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
80025274:	fe 68 00 00 	mov	r8,-131072
80025278:	70 18       	ld.w	r8,r8[0x4]
8002527a:	e4 18 00 ff 	andh	r8,0xff
8002527e:	e0 18 ff 00 	andl	r8,0xff00
80025282:	a9 88       	lsr	r8,0x8
}
80025284:	10 9c       	mov	r12,r8
80025286:	e3 cd 80 80 	ldm	sp++,r7,pc

8002528a <flashc_issue_command>:


void flashc_issue_command(unsigned int command, int page_number)
{
8002528a:	eb cd 40 c0 	pushm	r6-r7,lr
8002528e:	1a 97       	mov	r7,sp
80025290:	20 3d       	sub	sp,12
80025292:	4a 06       	lddpc	r6,80025310 <flashc_issue_command+0x86>
80025294:	1e 26       	rsub	r6,pc
80025296:	ef 4c ff f8 	st.w	r7[-8],r12
8002529a:	ef 4b ff f4 	st.w	r7[-12],r11
  u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;
  flashc_wait_until_ready();
8002529e:	ec f8 04 a4 	ld.w	r8,r6[1188]
800252a2:	70 08       	ld.w	r8,r8[0x0]
800252a4:	5d 18       	icall	r8
  u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
800252a6:	fe 68 00 00 	mov	r8,-131072
800252aa:	70 18       	ld.w	r8,r8[0x4]
800252ac:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcmd.FCMD.cmd = command;
800252b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800252b4:	5c 58       	castu.b	r8
800252b6:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800252ba:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800252be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800252c2:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
800252c6:	ef 48 ff fc 	st.w	r7[-4],r8
  if (page_number >= 0) u_avr32_flashc_fcmd.FCMD.pagen = page_number;
800252ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800252ce:	58 08       	cp.w	r8,0
800252d0:	c0 b5       	brlt	800252e6 <flashc_issue_command+0x5c>
800252d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800252d6:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800252da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800252de:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
800252e2:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
800252e6:	3a 58       	mov	r8,-91
800252e8:	ef 68 ff fc 	st.b	r7[-4],r8
  AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
800252ec:	fe 68 00 00 	mov	r8,-131072
800252f0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800252f4:	91 19       	st.w	r8[0x4],r9
  flashc_error_status = flashc_get_error_status();
800252f6:	c8 3f       	rcall	800251fc <flashc_get_error_status>
800252f8:	18 99       	mov	r9,r12
800252fa:	ec f8 00 54 	ld.w	r8,r6[84]
800252fe:	91 09       	st.w	r8[0x0],r9
  flashc_wait_until_ready();
80025300:	ec f8 04 a4 	ld.w	r8,r6[1188]
80025304:	70 08       	ld.w	r8,r8[0x0]
80025306:	5d 18       	icall	r8
}
80025308:	2f dd       	sub	sp,-12
8002530a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002530e:	00 00       	add	r0,r0
80025310:	80 02       	ld.sh	r2,r0[0x0]
80025312:	51 18       	stdsp	sp[0x44],r8

80025314 <flashc_no_operation>:
 */
//! @{


void flashc_no_operation(void)
{
80025314:	eb cd 40 c0 	pushm	r6-r7,lr
80025318:	1a 97       	mov	r7,sp
8002531a:	48 56       	lddpc	r6,8002532c <flashc_no_operation+0x18>
8002531c:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_NOP, -1);
8002531e:	3f fb       	mov	r11,-1
80025320:	30 0c       	mov	r12,0
80025322:	f0 16 00 2a 	mcall	r6[168]
}
80025326:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002532a:	00 00       	add	r0,r0
8002532c:	80 02       	ld.sh	r2,r0[0x0]
8002532e:	51 a0       	stdsp	sp[0x68],r0

80025330 <flashc_erase_all>:


void flashc_erase_all(void)
{
80025330:	eb cd 40 c0 	pushm	r6-r7,lr
80025334:	1a 97       	mov	r7,sp
80025336:	48 56       	lddpc	r6,80025348 <flashc_erase_all+0x18>
80025338:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EA, -1);
8002533a:	3f fb       	mov	r11,-1
8002533c:	30 6c       	mov	r12,6
8002533e:	f0 16 00 2a 	mcall	r6[168]
}
80025342:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025346:	00 00       	add	r0,r0
80025348:	80 02       	ld.sh	r2,r0[0x0]
8002534a:	51 bc       	stdsp	sp[0x6c],r12

8002534c <flashc_is_security_bit_active>:
 */
//! @{


bool flashc_is_security_bit_active(void)
{
8002534c:	eb cd 40 80 	pushm	r7,lr
80025350:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_SECURITY_MASK) != 0);
80025352:	fe 68 00 00 	mov	r8,-131072
80025356:	70 28       	ld.w	r8,r8[0x8]
80025358:	e2 18 00 10 	andl	r8,0x10,COH
8002535c:	5f 18       	srne	r8
8002535e:	5c 58       	castu.b	r8
}
80025360:	10 9c       	mov	r12,r8
80025362:	e3 cd 80 80 	ldm	sp++,r7,pc

80025366 <flashc_activate_security_bit>:


void flashc_activate_security_bit(void)
{
80025366:	eb cd 40 c0 	pushm	r6-r7,lr
8002536a:	1a 97       	mov	r7,sp
8002536c:	48 46       	lddpc	r6,8002537c <flashc_activate_security_bit+0x16>
8002536e:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_SSB, -1);
80025370:	3f fb       	mov	r11,-1
80025372:	30 9c       	mov	r12,9
80025374:	f0 16 00 2a 	mcall	r6[168]
}
80025378:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002537c:	80 02       	ld.sh	r2,r0[0x0]
8002537e:	51 f2       	stdsp	sp[0x7c],r2

80025380 <flashc_get_bootloader_protected_size>:


unsigned int flashc_get_bootloader_protected_size(void)
{
80025380:	eb cd 40 c0 	pushm	r6-r7,lr
80025384:	1a 97       	mov	r7,sp
80025386:	20 1d       	sub	sp,4
80025388:	48 e6       	lddpc	r6,800253c0 <flashc_get_bootloader_protected_size+0x40>
8002538a:	1e 26       	rsub	r6,pc
  unsigned int bootprot = (1 << AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE) - 1 -
                          flashc_read_gp_fuse_bitfield(AVR32_FLASHC_FGPFRLO_BOOTPROT_OFFSET,
                                                       AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE);
8002538c:	30 3b       	mov	r11,3
8002538e:	31 1c       	mov	r12,17
80025390:	f0 16 01 2a 	mcall	r6[1192]
80025394:	14 98       	mov	r8,r10
80025396:	16 99       	mov	r9,r11
80025398:	f0 08 11 07 	rsub	r8,r8,7
8002539c:	ef 48 ff fc 	st.w	r7[-4],r8
  return (bootprot) ? AVR32_FLASHC_PAGE_SIZE << bootprot : 0;
800253a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800253a4:	58 08       	cp.w	r8,0
800253a6:	c0 80       	breq	800253b6 <flashc_get_bootloader_protected_size+0x36>
800253a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800253ac:	e0 69 02 00 	mov	r9,512
800253b0:	f2 08 09 48 	lsl	r8,r9,r8
800253b4:	c0 28       	rjmp	800253b8 <flashc_get_bootloader_protected_size+0x38>
800253b6:	30 08       	mov	r8,0
}
800253b8:	10 9c       	mov	r12,r8
800253ba:	2f fd       	sub	sp,-4
800253bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800253c0:	80 02       	ld.sh	r2,r0[0x0]
800253c2:	52 0e       	stdsp	sp[0x80],lr

800253c4 <flashc_set_bootloader_protected_size>:


unsigned int flashc_set_bootloader_protected_size(unsigned int bootprot_size)
{
800253c4:	eb cd 40 c0 	pushm	r6-r7,lr
800253c8:	1a 97       	mov	r7,sp
800253ca:	20 7d       	sub	sp,28
800253cc:	4a 46       	lddpc	r6,8002545c <flashc_set_bootloader_protected_size+0x98>
800253ce:	1e 26       	rsub	r6,pc
800253d0:	ef 4c ff e4 	st.w	r7[-28],r12
  flashc_set_gp_fuse_bitfield(AVR32_FLASHC_FGPFRLO_BOOTPROT_OFFSET,
800253d4:	ee fa ff e4 	ld.w	r10,r7[-28]
800253d8:	58 0a       	cp.w	r10,0
800253da:	c3 40       	breq	80025442 <flashc_set_bootloader_protected_size+0x7e>
                              AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE,
                              (1 << AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE) - 1 -
                              ((bootprot_size) ?
                               32 - clz((((min(max(bootprot_size, AVR32_FLASHC_PAGE_SIZE << 1),
800253dc:	ee fa ff e4 	ld.w	r10,r7[-28]
800253e0:	ef 4a ff f8 	st.w	r7[-8],r10
800253e4:	e0 6a 04 00 	mov	r10,1024
800253e8:	ef 4a ff fc 	st.w	r7[-4],r10
800253ec:	ee fa ff f8 	ld.w	r10,r7[-8]
800253f0:	ee fb ff fc 	ld.w	r11,r7[-4]
800253f4:	f4 0b 0c 4a 	max	r10,r10,r11
800253f8:	ef 4a ff f4 	st.w	r7[-12],r10
800253fc:	ee fa ff f4 	ld.w	r10,r7[-12]
80025400:	ef 4a ff ec 	st.w	r7[-20],r10
80025404:	e0 7a 00 00 	mov	r10,65536
80025408:	ef 4a ff f0 	st.w	r7[-16],r10
8002540c:	ee fa ff ec 	ld.w	r10,r7[-20]
80025410:	ee fb ff f0 	ld.w	r11,r7[-16]
80025414:	f4 0b 0d 4a 	min	r10,r10,r11
80025418:	ef 4a ff e8 	st.w	r7[-24],r10
8002541c:	ee fa ff e8 	ld.w	r10,r7[-24]
80025420:	f4 ca fe 01 	sub	r10,r10,-511
80025424:	f4 cb fe 01 	sub	r11,r10,-511
80025428:	58 0a       	cp.w	r10,0
8002542a:	f6 0a 17 50 	movlt	r10,r11
8002542e:	a9 5a       	asr	r10,0x9
80025430:	a1 7a       	lsl	r10,0x1
80025432:	20 1a       	sub	r10,1
}


unsigned int flashc_set_bootloader_protected_size(unsigned int bootprot_size)
{
  flashc_set_gp_fuse_bitfield(AVR32_FLASHC_FGPFRLO_BOOTPROT_OFFSET,
80025434:	f4 0a 12 00 	clz	r10,r10
80025438:	21 8a       	sub	r10,24
8002543a:	14 98       	mov	r8,r10
8002543c:	bf 5a       	asr	r10,0x1f
8002543e:	14 99       	mov	r9,r10
80025440:	c0 38       	rjmp	80025446 <flashc_set_bootloader_protected_size+0x82>
80025442:	30 78       	mov	r8,7
80025444:	30 09       	mov	r9,0
80025446:	30 3b       	mov	r11,3
80025448:	31 1c       	mov	r12,17
8002544a:	f0 16 01 56 	mcall	r6[1368]
                                               AVR32_FLASHC_PAGE_SIZE <<
                                               ((1 << AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE) - 1)) +
                                           AVR32_FLASHC_PAGE_SIZE - 1) /
                                          AVR32_FLASHC_PAGE_SIZE) << 1) - 1) - 1 :
                               0));
  return flashc_get_bootloader_protected_size();
8002544e:	f0 16 01 67 	mcall	r6[1436]
80025452:	18 98       	mov	r8,r12
}
80025454:	10 9c       	mov	r12,r8
80025456:	2f 9d       	sub	sp,-28
80025458:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002545c:	80 02       	ld.sh	r2,r0[0x0]
8002545e:	52 52       	stdsp	sp[0x94],r2

80025460 <flashc_is_external_privileged_fetch_locked>:


bool flashc_is_external_privileged_fetch_locked(void)
{
80025460:	eb cd 40 c0 	pushm	r6-r7,lr
80025464:	1a 97       	mov	r7,sp
80025466:	48 76       	lddpc	r6,80025480 <flashc_is_external_privileged_fetch_locked+0x20>
80025468:	1e 26       	rsub	r6,pc
  return (!flashc_read_gp_fuse_bit(AVR32_FLASHC_FGPFRLO_EPFL_OFFSET));
8002546a:	31 0c       	mov	r12,16
8002546c:	f0 16 00 f2 	mcall	r6[968]
80025470:	18 98       	mov	r8,r12
80025472:	ec 18 00 01 	eorl	r8,0x1
80025476:	5c 58       	castu.b	r8
80025478:	5c 58       	castu.b	r8
}
8002547a:	10 9c       	mov	r12,r8
8002547c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025480:	80 02       	ld.sh	r2,r0[0x0]
80025482:	52 ec       	stdsp	sp[0xb8],r12

80025484 <flashc_lock_external_privileged_fetch>:


void flashc_lock_external_privileged_fetch(bool lock)
{
80025484:	eb cd 40 c0 	pushm	r6-r7,lr
80025488:	1a 97       	mov	r7,sp
8002548a:	20 1d       	sub	sp,4
8002548c:	48 96       	lddpc	r6,800254b0 <flashc_lock_external_privileged_fetch+0x2c>
8002548e:	1e 26       	rsub	r6,pc
80025490:	18 98       	mov	r8,r12
80025492:	ef 68 ff fc 	st.b	r7[-4],r8
  flashc_set_gp_fuse_bit(AVR32_FLASHC_FGPFRLO_EPFL_OFFSET, !lock);
80025496:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002549a:	ec 18 00 01 	eorl	r8,0x1
8002549e:	5c 58       	castu.b	r8
800254a0:	5c 58       	castu.b	r8
800254a2:	10 9b       	mov	r11,r8
800254a4:	31 0c       	mov	r12,16
800254a6:	f0 16 01 1a 	mcall	r6[1128]
}
800254aa:	2f fd       	sub	sp,-4
800254ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800254b0:	80 02       	ld.sh	r2,r0[0x0]
800254b2:	53 12       	stdsp	sp[0xc4],r2

800254b4 <flashc_is_page_region_locked>:


bool flashc_is_page_region_locked(int page_number)
{
800254b4:	eb cd 40 c0 	pushm	r6-r7,lr
800254b8:	1a 97       	mov	r7,sp
800254ba:	20 1d       	sub	sp,4
800254bc:	48 96       	lddpc	r6,800254e0 <flashc_is_page_region_locked+0x2c>
800254be:	1e 26       	rsub	r6,pc
800254c0:	ef 4c ff fc 	st.w	r7[-4],r12
  return flashc_is_region_locked(flashc_get_page_region(page_number));
800254c4:	ee fc ff fc 	ld.w	r12,r7[-4]
800254c8:	f0 16 01 8f 	mcall	r6[1596]
800254cc:	18 98       	mov	r8,r12
800254ce:	10 9c       	mov	r12,r8
800254d0:	f0 16 01 3f 	mcall	r6[1276]
800254d4:	18 98       	mov	r8,r12
}
800254d6:	10 9c       	mov	r12,r8
800254d8:	2f fd       	sub	sp,-4
800254da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800254de:	00 00       	add	r0,r0
800254e0:	80 02       	ld.sh	r2,r0[0x0]
800254e2:	53 42       	stdsp	sp[0xd0],r2

800254e4 <flashc_is_region_locked>:


bool flashc_is_region_locked(unsigned int region)
{
800254e4:	eb cd 40 80 	pushm	r7,lr
800254e8:	1a 97       	mov	r7,sp
800254ea:	20 1d       	sub	sp,4
800254ec:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_LOCK0_MASK << (region & (AVR32_FLASHC_REGIONS - 1))) != 0);
800254f0:	fe 68 00 00 	mov	r8,-131072
800254f4:	70 29       	ld.w	r9,r8[0x8]
800254f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800254fa:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800254fe:	e0 7a 00 00 	mov	r10,65536
80025502:	f4 08 09 48 	lsl	r8,r10,r8
80025506:	f3 e8 00 08 	and	r8,r9,r8
8002550a:	5f 18       	srne	r8
8002550c:	5c 58       	castu.b	r8
}
8002550e:	10 9c       	mov	r12,r8
80025510:	2f fd       	sub	sp,-4
80025512:	e3 cd 80 80 	ldm	sp++,r7,pc

80025516 <flashc_lock_page_region>:


void flashc_lock_page_region(int page_number, bool lock)
{
80025516:	eb cd 40 c0 	pushm	r6-r7,lr
8002551a:	1a 97       	mov	r7,sp
8002551c:	20 2d       	sub	sp,8
8002551e:	48 d6       	lddpc	r6,80025550 <flashc_lock_page_region+0x3a>
80025520:	1e 26       	rsub	r6,pc
80025522:	ef 4c ff fc 	st.w	r7[-4],r12
80025526:	16 98       	mov	r8,r11
80025528:	ef 68 ff f8 	st.b	r7[-8],r8
  flashc_issue_command((lock) ? AVR32_FLASHC_FCMD_CMD_LP : AVR32_FLASHC_FCMD_CMD_UP, page_number);
8002552c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80025530:	30 08       	mov	r8,0
80025532:	f0 09 18 00 	cp.b	r9,r8
80025536:	c0 30       	breq	8002553c <flashc_lock_page_region+0x26>
80025538:	30 48       	mov	r8,4
8002553a:	c0 28       	rjmp	8002553e <flashc_lock_page_region+0x28>
8002553c:	30 58       	mov	r8,5
8002553e:	ee fb ff fc 	ld.w	r11,r7[-4]
80025542:	10 9c       	mov	r12,r8
80025544:	f0 16 00 2a 	mcall	r6[168]
}
80025548:	2f ed       	sub	sp,-8
8002554a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002554e:	00 00       	add	r0,r0
80025550:	80 02       	ld.sh	r2,r0[0x0]
80025552:	53 a4       	stdsp	sp[0xe8],r4

80025554 <flashc_lock_region>:


void flashc_lock_region(unsigned int region, bool lock)
{
80025554:	eb cd 40 e0 	pushm	r5-r7,lr
80025558:	1a 97       	mov	r7,sp
8002555a:	20 2d       	sub	sp,8
8002555c:	48 b6       	lddpc	r6,80025588 <flashc_lock_region+0x34>
8002555e:	1e 26       	rsub	r6,pc
80025560:	ef 4c ff fc 	st.w	r7[-4],r12
80025564:	16 98       	mov	r8,r11
80025566:	ef 68 ff f8 	st.b	r7[-8],r8
  flashc_lock_page_region(flashc_get_region_first_page_number(region), lock);
8002556a:	ef 35 ff f8 	ld.ub	r5,r7[-8]
8002556e:	ee fc ff fc 	ld.w	r12,r7[-4]
80025572:	f0 16 01 76 	mcall	r6[1496]
80025576:	18 98       	mov	r8,r12
80025578:	0a 9b       	mov	r11,r5
8002557a:	10 9c       	mov	r12,r8
8002557c:	f0 16 01 f5 	mcall	r6[2004]
}
80025580:	2f ed       	sub	sp,-8
80025582:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80025586:	00 00       	add	r0,r0
80025588:	80 02       	ld.sh	r2,r0[0x0]
8002558a:	53 e2       	stdsp	sp[0xf8],r2

8002558c <flashc_lock_all_regions>:


void flashc_lock_all_regions(bool lock)
{
8002558c:	eb cd 40 c0 	pushm	r6-r7,lr
80025590:	1a 97       	mov	r7,sp
80025592:	20 3d       	sub	sp,12
80025594:	49 76       	lddpc	r6,800255f0 <flashc_lock_all_regions+0x64>
80025596:	1e 26       	rsub	r6,pc
80025598:	18 98       	mov	r8,r12
8002559a:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned int error_status = 0;
8002559e:	30 08       	mov	r8,0
800255a0:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int region = AVR32_FLASHC_REGIONS;
800255a4:	31 08       	mov	r8,16
800255a6:	ef 48 ff fc 	st.w	r7[-4],r8
  while (region)
800255aa:	c1 68       	rjmp	800255d6 <flashc_lock_all_regions+0x4a>
  {
    flashc_lock_region(--region, lock);
800255ac:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800255b0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800255b4:	20 19       	sub	r9,1
800255b6:	ef 49 ff fc 	st.w	r7[-4],r9
800255ba:	10 9b       	mov	r11,r8
800255bc:	ee fc ff fc 	ld.w	r12,r7[-4]
800255c0:	f0 16 01 57 	mcall	r6[1372]
    error_status |= flashc_error_status;
800255c4:	ec f8 00 54 	ld.w	r8,r6[84]
800255c8:	70 08       	ld.w	r8,r8[0x0]
800255ca:	ee f9 ff f8 	ld.w	r9,r7[-8]
800255ce:	f3 e8 10 08 	or	r8,r9,r8
800255d2:	ef 48 ff f8 	st.w	r7[-8],r8

void flashc_lock_all_regions(bool lock)
{
  unsigned int error_status = 0;
  unsigned int region = AVR32_FLASHC_REGIONS;
  while (region)
800255d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800255da:	58 08       	cp.w	r8,0
800255dc:	ce 81       	brne	800255ac <flashc_lock_all_regions+0x20>
  {
    flashc_lock_region(--region, lock);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
800255de:	ec f8 00 54 	ld.w	r8,r6[84]
800255e2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800255e6:	91 09       	st.w	r8[0x0],r9
}
800255e8:	2f dd       	sub	sp,-12
800255ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800255ee:	00 00       	add	r0,r0
800255f0:	80 02       	ld.sh	r2,r0[0x0]
800255f2:	54 1a       	stdsp	sp[0x104],r10

800255f4 <flashc_read_gp_fuse_bit>:
 */
//! @{


bool flashc_read_gp_fuse_bit(unsigned int gp_fuse_bit)
{
800255f4:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
800255f8:	1a 97       	mov	r7,sp
800255fa:	20 1d       	sub	sp,4
800255fc:	49 66       	lddpc	r6,80025654 <flashc_read_gp_fuse_bit+0x60>
800255fe:	1e 26       	rsub	r6,pc
80025600:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((flashc_read_all_gp_fuses() & 1ULL << (gp_fuse_bit & 0x3F)) != 0);
80025604:	f0 16 00 77 	mcall	r6[476]
80025608:	14 98       	mov	r8,r10
8002560a:	16 99       	mov	r9,r11
8002560c:	ee fa ff fc 	ld.w	r10,r7[-4]
80025610:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
80025614:	14 9b       	mov	r11,r10
80025616:	e2 1b 00 20 	andl	r11,0x20,COH
8002561a:	30 0c       	mov	r12,0
8002561c:	f2 05 15 01 	lsl	r5,r9,0x1
80025620:	14 9e       	mov	lr,r10
80025622:	ee 1e ff ff 	eorh	lr,0xffff
80025626:	ec 1e ff ff 	eorl	lr,0xffff
8002562a:	ea 0e 09 4e 	lsl	lr,r5,lr
8002562e:	f0 0a 0a 42 	lsr	r2,r8,r10
80025632:	fd e2 10 02 	or	r2,lr,r2
80025636:	f2 0a 0a 43 	lsr	r3,r9,r10
8002563a:	58 0b       	cp.w	r11,0
8002563c:	e6 02 17 10 	movne	r2,r3
80025640:	f8 03 17 10 	movne	r3,r12
80025644:	04 98       	mov	r8,r2
80025646:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002564a:	5c 58       	castu.b	r8
}
8002564c:	10 9c       	mov	r12,r8
8002564e:	2f fd       	sub	sp,-4
80025650:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80025654:	80 02       	ld.sh	r2,r0[0x0]
80025656:	54 82       	stdsp	sp[0x120],r2

80025658 <flashc_read_gp_fuse_bitfield>:


U64 flashc_read_gp_fuse_bitfield(unsigned int pos, unsigned int width)
{
80025658:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8002565c:	1a 97       	mov	r7,sp
8002565e:	20 5d       	sub	sp,20
80025660:	4b 16       	lddpc	r6,80025724 <flashc_read_gp_fuse_bitfield+0xcc>
80025662:	1e 26       	rsub	r6,pc
80025664:	ef 4c ff f0 	st.w	r7[-16],r12
80025668:	ef 4b ff ec 	st.w	r7[-20],r11
  return flashc_read_all_gp_fuses() >> (pos & 0x3F) & ((1ULL << min(width, 64)) - 1);
8002566c:	f0 16 00 77 	mcall	r6[476]
80025670:	14 98       	mov	r8,r10
80025672:	16 99       	mov	r9,r11
80025674:	ee fa ff f0 	ld.w	r10,r7[-16]
80025678:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
8002567c:	14 9b       	mov	r11,r10
8002567e:	e2 1b 00 20 	andl	r11,0x20,COH
80025682:	30 0c       	mov	r12,0
80025684:	f2 05 15 01 	lsl	r5,r9,0x1
80025688:	14 9e       	mov	lr,r10
8002568a:	ee 1e ff ff 	eorh	lr,0xffff
8002568e:	ec 1e ff ff 	eorl	lr,0xffff
80025692:	ea 0e 09 4e 	lsl	lr,r5,lr
80025696:	f0 0a 0a 42 	lsr	r2,r8,r10
8002569a:	fd e2 10 02 	or	r2,lr,r2
8002569e:	f2 0a 0a 43 	lsr	r3,r9,r10
800256a2:	58 0b       	cp.w	r11,0
800256a4:	e6 02 17 10 	movne	r2,r3
800256a8:	f8 03 17 10 	movne	r3,r12
800256ac:	ee f8 ff ec 	ld.w	r8,r7[-20]
800256b0:	ef 48 ff f8 	st.w	r7[-8],r8
800256b4:	34 08       	mov	r8,64
800256b6:	ef 48 ff fc 	st.w	r7[-4],r8
800256ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800256be:	ee f9 ff fc 	ld.w	r9,r7[-4]
800256c2:	f0 09 0d 48 	min	r8,r8,r9
800256c6:	ef 48 ff f4 	st.w	r7[-12],r8
800256ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800256ce:	10 99       	mov	r9,r8
800256d0:	e2 19 00 20 	andl	r9,0x20,COH
800256d4:	30 0a       	mov	r10,0
800256d6:	30 1b       	mov	r11,1
800256d8:	f6 0c 16 01 	lsr	r12,r11,0x1
800256dc:	10 9b       	mov	r11,r8
800256de:	ee 1b ff ff 	eorh	r11,0xffff
800256e2:	ec 1b ff ff 	eorl	r11,0xffff
800256e6:	f8 0b 0a 4b 	lsr	r11,r12,r11
800256ea:	30 0c       	mov	r12,0
800256ec:	f8 08 09 41 	lsl	r1,r12,r8
800256f0:	f7 e1 10 01 	or	r1,r11,r1
800256f4:	30 1b       	mov	r11,1
800256f6:	f6 08 09 40 	lsl	r0,r11,r8
800256fa:	58 09       	cp.w	r9,0
800256fc:	e0 01 17 10 	movne	r1,r0
80025700:	f4 00 17 10 	movne	r0,r10
80025704:	3f f8       	mov	r8,-1
80025706:	3f f9       	mov	r9,-1
80025708:	e0 08 00 0a 	add	r10,r0,r8
8002570c:	e2 09 00 4b 	adc	r11,r1,r9
80025710:	e5 ea 00 08 	and	r8,r2,r10
80025714:	e7 eb 00 09 	and	r9,r3,r11
}
80025718:	10 9a       	mov	r10,r8
8002571a:	12 9b       	mov	r11,r9
8002571c:	2f bd       	sub	sp,-20
8002571e:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80025722:	00 00       	add	r0,r0
80025724:	80 02       	ld.sh	r2,r0[0x0]
80025726:	54 e6       	stdsp	sp[0x138],r6

80025728 <flashc_read_gp_fuse_byte>:


U8 flashc_read_gp_fuse_byte(unsigned int gp_fuse_byte)
{
80025728:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8002572c:	1a 97       	mov	r7,sp
8002572e:	20 1d       	sub	sp,4
80025730:	49 66       	lddpc	r6,80025788 <flashc_read_gp_fuse_byte+0x60>
80025732:	1e 26       	rsub	r6,pc
80025734:	ef 4c ff fc 	st.w	r7[-4],r12
  return flashc_read_all_gp_fuses() >> ((gp_fuse_byte & 0x07) << 3);
80025738:	f0 16 00 77 	mcall	r6[476]
8002573c:	14 98       	mov	r8,r10
8002573e:	16 99       	mov	r9,r11
80025740:	ee fa ff fc 	ld.w	r10,r7[-4]
80025744:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80025748:	a3 7a       	lsl	r10,0x3
8002574a:	14 9b       	mov	r11,r10
8002574c:	e2 1b 00 20 	andl	r11,0x20,COH
80025750:	30 0c       	mov	r12,0
80025752:	f2 05 15 01 	lsl	r5,r9,0x1
80025756:	14 9e       	mov	lr,r10
80025758:	ee 1e ff ff 	eorh	lr,0xffff
8002575c:	ec 1e ff ff 	eorl	lr,0xffff
80025760:	ea 0e 09 4e 	lsl	lr,r5,lr
80025764:	f0 0a 0a 42 	lsr	r2,r8,r10
80025768:	fd e2 10 02 	or	r2,lr,r2
8002576c:	f2 0a 0a 43 	lsr	r3,r9,r10
80025770:	58 0b       	cp.w	r11,0
80025772:	e6 02 17 10 	movne	r2,r3
80025776:	f8 03 17 10 	movne	r3,r12
8002577a:	f1 d2 c0 08 	bfextu	r8,r2,0x0,0x8
}
8002577e:	10 9c       	mov	r12,r8
80025780:	2f fd       	sub	sp,-4
80025782:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80025786:	00 00       	add	r0,r0
80025788:	80 02       	ld.sh	r2,r0[0x0]
8002578a:	55 b6       	stdsp	sp[0x16c],r6

8002578c <flashc_read_all_gp_fuses>:


U64 flashc_read_all_gp_fuses(void)
{
8002578c:	eb cd 40 8c 	pushm	r2-r3,r7,lr
80025790:	1a 97       	mov	r7,sp
  return AVR32_FLASHC.fgpfrlo | (U64)AVR32_FLASHC.fgpfrhi << 32;
80025792:	fe 6c 00 00 	mov	r12,-131072
80025796:	78 6c       	ld.w	r12,r12[0x18]
80025798:	18 9a       	mov	r10,r12
8002579a:	30 0b       	mov	r11,0
8002579c:	fe 6c 00 00 	mov	r12,-131072
800257a0:	78 5c       	ld.w	r12,r12[0x14]
800257a2:	18 92       	mov	r2,r12
800257a4:	30 03       	mov	r3,0
800257a6:	e4 09 15 00 	lsl	r9,r2,0x0
800257aa:	30 08       	mov	r8,0
800257ac:	f5 e8 10 02 	or	r2,r10,r8
800257b0:	f7 e9 10 03 	or	r3,r11,r9
800257b4:	04 98       	mov	r8,r2
800257b6:	06 99       	mov	r9,r3
}
800257b8:	10 9a       	mov	r10,r8
800257ba:	12 9b       	mov	r11,r9
800257bc:	e3 cd 80 8c 	ldm	sp++,r2-r3,r7,pc

800257c0 <flashc_erase_gp_fuse_bit>:


bool flashc_erase_gp_fuse_bit(unsigned int gp_fuse_bit, bool check)
{
800257c0:	eb cd 40 c0 	pushm	r6-r7,lr
800257c4:	1a 97       	mov	r7,sp
800257c6:	20 2d       	sub	sp,8
800257c8:	49 06       	lddpc	r6,80025808 <flashc_erase_gp_fuse_bit+0x48>
800257ca:	1e 26       	rsub	r6,pc
800257cc:	ef 4c ff fc 	st.w	r7[-4],r12
800257d0:	16 98       	mov	r8,r11
800257d2:	ef 68 ff f8 	st.b	r7[-8],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EGPB, gp_fuse_bit & 0x3F);
800257d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800257da:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800257de:	10 9b       	mov	r11,r8
800257e0:	30 8c       	mov	r12,8
800257e2:	f0 16 00 2a 	mcall	r6[168]
  return (check) ? flashc_read_gp_fuse_bit(gp_fuse_bit) : true;
800257e6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800257ea:	30 08       	mov	r8,0
800257ec:	f0 09 18 00 	cp.b	r9,r8
800257f0:	c0 70       	breq	800257fe <flashc_erase_gp_fuse_bit+0x3e>
800257f2:	ee fc ff fc 	ld.w	r12,r7[-4]
800257f6:	f0 16 00 f2 	mcall	r6[968]
800257fa:	18 98       	mov	r8,r12
800257fc:	c0 28       	rjmp	80025800 <flashc_erase_gp_fuse_bit+0x40>
800257fe:	30 18       	mov	r8,1
}
80025800:	10 9c       	mov	r12,r8
80025802:	2f ed       	sub	sp,-8
80025804:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025808:	80 02       	ld.sh	r2,r0[0x0]
8002580a:	56 4e       	stdsp	sp[0x190],lr

8002580c <flashc_erase_gp_fuse_bitfield>:


bool flashc_erase_gp_fuse_bitfield(unsigned int pos, unsigned int width, bool check)
{
8002580c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80025810:	1a 97       	mov	r7,sp
80025812:	20 8d       	sub	sp,32
80025814:	4c 36       	lddpc	r6,80025920 <flashc_erase_gp_fuse_bitfield+0x114>
80025816:	1e 26       	rsub	r6,pc
80025818:	ef 4c ff e8 	st.w	r7[-24],r12
8002581c:	ef 4b ff e4 	st.w	r7[-28],r11
80025820:	14 98       	mov	r8,r10
80025822:	ef 68 ff e0 	st.b	r7[-32],r8
  unsigned int error_status = 0;
80025826:	30 08       	mov	r8,0
80025828:	ef 48 ff ec 	st.w	r7[-20],r8
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
8002582c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025830:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80025834:	ef 48 ff e8 	st.w	r7[-24],r8
  width = min(width, 64);
80025838:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002583c:	ef 48 ff f8 	st.w	r7[-8],r8
80025840:	34 08       	mov	r8,64
80025842:	ef 48 ff fc 	st.w	r7[-4],r8
80025846:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002584a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002584e:	f0 09 0d 48 	min	r8,r8,r9
80025852:	ef 48 ff f4 	st.w	r7[-12],r8
80025856:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002585a:	ef 48 ff e4 	st.w	r7[-28],r8
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++)
8002585e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025862:	ef 48 ff f0 	st.w	r7[-16],r8
80025866:	c1 48       	rjmp	8002588e <flashc_erase_gp_fuse_bitfield+0x82>
  {
    flashc_erase_gp_fuse_bit(gp_fuse_bit, false);
80025868:	30 0b       	mov	r11,0
8002586a:	ee fc ff f0 	ld.w	r12,r7[-16]
8002586e:	f0 16 00 e9 	mcall	r6[932]
    error_status |= flashc_error_status;
80025872:	ec f8 00 54 	ld.w	r8,r6[84]
80025876:	70 08       	ld.w	r8,r8[0x0]
80025878:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002587c:	f3 e8 10 08 	or	r8,r9,r8
80025880:	ef 48 ff ec 	st.w	r7[-20],r8
{
  unsigned int error_status = 0;
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
  width = min(width, 64);
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++)
80025884:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025888:	2f f8       	sub	r8,-1
8002588a:	ef 48 ff f0 	st.w	r7[-16],r8
8002588e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80025892:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025896:	10 09       	add	r9,r8
80025898:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002589c:	10 39       	cp.w	r9,r8
8002589e:	fe 9b ff e5 	brhi	80025868 <flashc_erase_gp_fuse_bitfield+0x5c>
  {
    flashc_erase_gp_fuse_bit(gp_fuse_bit, false);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
800258a2:	ec f8 00 54 	ld.w	r8,r6[84]
800258a6:	ee f9 ff ec 	ld.w	r9,r7[-20]
800258aa:	91 09       	st.w	r8[0x0],r9
  return (check) ? (flashc_read_gp_fuse_bitfield(pos, width) == (1ULL << width) - 1) : true;
800258ac:	ef 39 ff e0 	ld.ub	r9,r7[-32]
800258b0:	30 08       	mov	r8,0
800258b2:	f0 09 18 00 	cp.b	r9,r8
800258b6:	c3 00       	breq	80025916 <flashc_erase_gp_fuse_bitfield+0x10a>
800258b8:	ee fb ff e4 	ld.w	r11,r7[-28]
800258bc:	ee fc ff e8 	ld.w	r12,r7[-24]
800258c0:	f0 16 01 2a 	mcall	r6[1192]
800258c4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800258c8:	10 99       	mov	r9,r8
800258ca:	e2 19 00 20 	andl	r9,0x20,COH
800258ce:	30 0c       	mov	r12,0
800258d0:	30 1e       	mov	lr,1
800258d2:	fc 05 16 01 	lsr	r5,lr,0x1
800258d6:	10 9e       	mov	lr,r8
800258d8:	ee 1e ff ff 	eorh	lr,0xffff
800258dc:	ec 1e ff ff 	eorl	lr,0xffff
800258e0:	ea 0e 0a 4e 	lsr	lr,r5,lr
800258e4:	30 05       	mov	r5,0
800258e6:	ea 08 09 43 	lsl	r3,r5,r8
800258ea:	fd e3 10 03 	or	r3,lr,r3
800258ee:	30 1e       	mov	lr,1
800258f0:	fc 08 09 42 	lsl	r2,lr,r8
800258f4:	58 09       	cp.w	r9,0
800258f6:	e4 03 17 10 	movne	r3,r2
800258fa:	f8 02 17 10 	movne	r2,r12
800258fe:	3f f8       	mov	r8,-1
80025900:	3f f9       	mov	r9,-1
80025902:	e4 08 00 08 	add	r8,r2,r8
80025906:	e6 09 00 49 	adc	r9,r3,r9
8002590a:	10 3a       	cp.w	r10,r8
8002590c:	f2 0b 13 00 	cpc	r11,r9
80025910:	5f 08       	sreq	r8
80025912:	5c 58       	castu.b	r8
80025914:	c0 28       	rjmp	80025918 <flashc_erase_gp_fuse_bitfield+0x10c>
80025916:	30 18       	mov	r8,1
}
80025918:	10 9c       	mov	r12,r8
8002591a:	2f 8d       	sub	sp,-32
8002591c:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80025920:	80 02       	ld.sh	r2,r0[0x0]
80025922:	56 9a       	stdsp	sp[0x1a4],r10

80025924 <flashc_erase_gp_fuse_byte>:


bool flashc_erase_gp_fuse_byte(unsigned int gp_fuse_byte, bool check)
{
80025924:	eb cd 40 c0 	pushm	r6-r7,lr
80025928:	1a 97       	mov	r7,sp
8002592a:	20 6d       	sub	sp,24
8002592c:	4b 26       	lddpc	r6,800259f4 <flashc_erase_gp_fuse_byte+0xd0>
8002592e:	1e 26       	rsub	r6,pc
80025930:	ef 4c ff ec 	st.w	r7[-20],r12
80025934:	16 98       	mov	r8,r11
80025936:	ef 68 ff e8 	st.b	r7[-24],r8
  unsigned int error_status;
  unsigned int current_gp_fuse_byte;
  U64 value = flashc_read_all_gp_fuses();
8002593a:	f0 16 00 77 	mcall	r6[476]
8002593e:	14 98       	mov	r8,r10
80025940:	16 99       	mov	r9,r11
80025942:	ee e9 ff f8 	st.d	r7[-8],r8
  flashc_erase_all_gp_fuses(false);
80025946:	30 0c       	mov	r12,0
80025948:	f0 16 00 d0 	mcall	r6[832]
  error_status = flashc_error_status;
8002594c:	ec f8 00 54 	ld.w	r8,r6[84]
80025950:	70 08       	ld.w	r8,r8[0x0]
80025952:	ef 48 ff f0 	st.w	r7[-16],r8
  for (current_gp_fuse_byte = 0; current_gp_fuse_byte < 8; current_gp_fuse_byte++, value >>= 8)
80025956:	30 08       	mov	r8,0
80025958:	ef 48 ff f4 	st.w	r7[-12],r8
8002595c:	c2 b8       	rjmp	800259b2 <flashc_erase_gp_fuse_byte+0x8e>
  {
    if (current_gp_fuse_byte != gp_fuse_byte)
8002595e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80025962:	ee f8 ff ec 	ld.w	r8,r7[-20]
80025966:	10 39       	cp.w	r9,r8
80025968:	c1 10       	breq	8002598a <flashc_erase_gp_fuse_byte+0x66>
    {
      flashc_write_gp_fuse_byte(current_gp_fuse_byte, value);
8002596a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002596e:	10 9b       	mov	r11,r8
80025970:	ee fc ff f4 	ld.w	r12,r7[-12]
80025974:	f0 16 00 8c 	mcall	r6[560]
      error_status |= flashc_error_status;
80025978:	ec f8 00 54 	ld.w	r8,r6[84]
8002597c:	70 08       	ld.w	r8,r8[0x0]
8002597e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80025982:	f3 e8 10 08 	or	r8,r9,r8
80025986:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int error_status;
  unsigned int current_gp_fuse_byte;
  U64 value = flashc_read_all_gp_fuses();
  flashc_erase_all_gp_fuses(false);
  error_status = flashc_error_status;
  for (current_gp_fuse_byte = 0; current_gp_fuse_byte < 8; current_gp_fuse_byte++, value >>= 8)
8002598a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002598e:	2f f8       	sub	r8,-1
80025990:	ef 48 ff f4 	st.w	r7[-12],r8
80025994:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025998:	b9 68       	lsl	r8,0x18
8002599a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002599e:	a9 89       	lsr	r9,0x8
800259a0:	f3 e8 10 08 	or	r8,r9,r8
800259a4:	ef 48 ff fc 	st.w	r7[-4],r8
800259a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800259ac:	a9 88       	lsr	r8,0x8
800259ae:	ef 48 ff f8 	st.w	r7[-8],r8
800259b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800259b6:	58 78       	cp.w	r8,7
800259b8:	fe 98 ff d3 	brls	8002595e <flashc_erase_gp_fuse_byte+0x3a>
    {
      flashc_write_gp_fuse_byte(current_gp_fuse_byte, value);
      error_status |= flashc_error_status;
    }
  }
  flashc_error_status = error_status;
800259bc:	ec f8 00 54 	ld.w	r8,r6[84]
800259c0:	ee f9 ff f0 	ld.w	r9,r7[-16]
800259c4:	91 09       	st.w	r8[0x0],r9
  return (check) ? (flashc_read_gp_fuse_byte(gp_fuse_byte) == 0xFF) : true;
800259c6:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800259ca:	30 08       	mov	r8,0
800259cc:	f0 09 18 00 	cp.b	r9,r8
800259d0:	c0 d0       	breq	800259ea <flashc_erase_gp_fuse_byte+0xc6>
800259d2:	ee fc ff ec 	ld.w	r12,r7[-20]
800259d6:	f0 16 02 1c 	mcall	r6[2160]
800259da:	18 98       	mov	r8,r12
800259dc:	10 99       	mov	r9,r8
800259de:	3f f8       	mov	r8,-1
800259e0:	f0 09 18 00 	cp.b	r9,r8
800259e4:	5f 08       	sreq	r8
800259e6:	5c 58       	castu.b	r8
800259e8:	c0 28       	rjmp	800259ec <flashc_erase_gp_fuse_byte+0xc8>
800259ea:	30 18       	mov	r8,1
}
800259ec:	10 9c       	mov	r12,r8
800259ee:	2f ad       	sub	sp,-24
800259f0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800259f4:	80 02       	ld.sh	r2,r0[0x0]
800259f6:	57 b2       	stdsp	sp[0x1ec],r2

800259f8 <flashc_erase_all_gp_fuses>:


bool flashc_erase_all_gp_fuses(bool check)
{
800259f8:	eb cd 40 c0 	pushm	r6-r7,lr
800259fc:	1a 97       	mov	r7,sp
800259fe:	20 1d       	sub	sp,4
80025a00:	48 f6       	lddpc	r6,80025a3c <flashc_erase_all_gp_fuses+0x44>
80025a02:	1e 26       	rsub	r6,pc
80025a04:	18 98       	mov	r8,r12
80025a06:	ef 68 ff fc 	st.b	r7[-4],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EAGPF, -1);
80025a0a:	3f fb       	mov	r11,-1
80025a0c:	30 bc       	mov	r12,11
80025a0e:	f0 16 00 2a 	mcall	r6[168]
  return (check) ? (flashc_read_all_gp_fuses() == 0xFFFFFFFFFFFFFFFFULL) : true;
80025a12:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80025a16:	30 08       	mov	r8,0
80025a18:	f0 09 18 00 	cp.b	r9,r8
80025a1c:	c0 b0       	breq	80025a32 <flashc_erase_all_gp_fuses+0x3a>
80025a1e:	f0 16 00 77 	mcall	r6[476]
80025a22:	14 98       	mov	r8,r10
80025a24:	16 99       	mov	r9,r11
80025a26:	f3 e8 00 08 	and	r8,r9,r8
80025a2a:	5b f8       	cp.w	r8,-1
80025a2c:	5f 08       	sreq	r8
80025a2e:	5c 58       	castu.b	r8
80025a30:	c0 28       	rjmp	80025a34 <flashc_erase_all_gp_fuses+0x3c>
80025a32:	30 18       	mov	r8,1
}
80025a34:	10 9c       	mov	r12,r8
80025a36:	2f fd       	sub	sp,-4
80025a38:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025a3c:	80 02       	ld.sh	r2,r0[0x0]
80025a3e:	58 86       	cp.w	r6,8

80025a40 <flashc_write_gp_fuse_bit>:


void flashc_write_gp_fuse_bit(unsigned int gp_fuse_bit, bool value)
{
80025a40:	eb cd 40 c0 	pushm	r6-r7,lr
80025a44:	1a 97       	mov	r7,sp
80025a46:	20 2d       	sub	sp,8
80025a48:	48 c6       	lddpc	r6,80025a78 <flashc_write_gp_fuse_bit+0x38>
80025a4a:	1e 26       	rsub	r6,pc
80025a4c:	ef 4c ff fc 	st.w	r7[-4],r12
80025a50:	16 98       	mov	r8,r11
80025a52:	ef 68 ff f8 	st.b	r7[-8],r8
  if (!value)
80025a56:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80025a5a:	ec 18 00 01 	eorl	r8,0x1
80025a5e:	5c 58       	castu.b	r8
80025a60:	c0 90       	breq	80025a72 <flashc_write_gp_fuse_bit+0x32>
    flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WGPB, gp_fuse_bit & 0x3F);
80025a62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025a66:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80025a6a:	10 9b       	mov	r11,r8
80025a6c:	30 7c       	mov	r12,7
80025a6e:	f0 16 00 2a 	mcall	r6[168]
}
80025a72:	2f ed       	sub	sp,-8
80025a74:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025a78:	80 02       	ld.sh	r2,r0[0x0]
80025a7a:	58 ce       	cp.w	lr,12

80025a7c <flashc_write_gp_fuse_bitfield>:


void flashc_write_gp_fuse_bitfield(unsigned int pos, unsigned int width, U64 value)
{
80025a7c:	eb cd 40 c0 	pushm	r6-r7,lr
80025a80:	1a 97       	mov	r7,sp
80025a82:	20 9d       	sub	sp,36
80025a84:	4b 16       	lddpc	r6,80025b48 <flashc_write_gp_fuse_bitfield+0xcc>
80025a86:	1e 26       	rsub	r6,pc
80025a88:	ef 4c ff e8 	st.w	r7[-24],r12
80025a8c:	ef 4b ff e4 	st.w	r7[-28],r11
80025a90:	ee e9 ff dc 	st.d	r7[-36],r8
  unsigned int error_status = 0;
80025a94:	30 08       	mov	r8,0
80025a96:	ef 48 ff ec 	st.w	r7[-20],r8
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
80025a9a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025a9e:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80025aa2:	ef 48 ff e8 	st.w	r7[-24],r8
  width = min(width, 64);
80025aa6:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025aaa:	ef 48 ff f8 	st.w	r7[-8],r8
80025aae:	34 08       	mov	r8,64
80025ab0:	ef 48 ff fc 	st.w	r7[-4],r8
80025ab4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025ab8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025abc:	f0 09 0d 48 	min	r8,r8,r9
80025ac0:	ef 48 ff f4 	st.w	r7[-12],r8
80025ac4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80025ac8:	ef 48 ff e4 	st.w	r7[-28],r8
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++, value >>= 1)
80025acc:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025ad0:	ef 48 ff f0 	st.w	r7[-16],r8
80025ad4:	c2 88       	rjmp	80025b24 <flashc_write_gp_fuse_bitfield+0xa8>
  {
    flashc_write_gp_fuse_bit(gp_fuse_bit, value & 0x01);
80025ad6:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025ada:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80025ade:	5c 58       	castu.b	r8
80025ae0:	10 9b       	mov	r11,r8
80025ae2:	ee fc ff f0 	ld.w	r12,r7[-16]
80025ae6:	f0 16 00 da 	mcall	r6[872]
    error_status |= flashc_error_status;
80025aea:	ec f8 00 54 	ld.w	r8,r6[84]
80025aee:	70 08       	ld.w	r8,r8[0x0]
80025af0:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025af4:	f3 e8 10 08 	or	r8,r9,r8
80025af8:	ef 48 ff ec 	st.w	r7[-20],r8
{
  unsigned int error_status = 0;
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
  width = min(width, 64);
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++, value >>= 1)
80025afc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025b00:	2f f8       	sub	r8,-1
80025b02:	ef 48 ff f0 	st.w	r7[-16],r8
80025b06:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025b0a:	bf 78       	lsl	r8,0x1f
80025b0c:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025b10:	a1 99       	lsr	r9,0x1
80025b12:	f3 e8 10 08 	or	r8,r9,r8
80025b16:	ef 48 ff e0 	st.w	r7[-32],r8
80025b1a:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025b1e:	a1 98       	lsr	r8,0x1
80025b20:	ef 48 ff dc 	st.w	r7[-36],r8
80025b24:	ee f9 ff e8 	ld.w	r9,r7[-24]
80025b28:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025b2c:	10 09       	add	r9,r8
80025b2e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025b32:	10 39       	cp.w	r9,r8
80025b34:	fe 9b ff d1 	brhi	80025ad6 <flashc_write_gp_fuse_bitfield+0x5a>
  {
    flashc_write_gp_fuse_bit(gp_fuse_bit, value & 0x01);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
80025b38:	ec f8 00 54 	ld.w	r8,r6[84]
80025b3c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025b40:	91 09       	st.w	r8[0x0],r9
}
80025b42:	2f 7d       	sub	sp,-36
80025b44:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025b48:	80 02       	ld.sh	r2,r0[0x0]
80025b4a:	59 0a       	cp.w	r10,16

80025b4c <flashc_write_gp_fuse_byte>:


void flashc_write_gp_fuse_byte(unsigned int gp_fuse_byte, U8 value)
{
80025b4c:	eb cd 40 c0 	pushm	r6-r7,lr
80025b50:	1a 97       	mov	r7,sp
80025b52:	20 2d       	sub	sp,8
80025b54:	48 c6       	lddpc	r6,80025b84 <flashc_write_gp_fuse_byte+0x38>
80025b56:	1e 26       	rsub	r6,pc
80025b58:	ef 4c ff fc 	st.w	r7[-4],r12
80025b5c:	16 98       	mov	r8,r11
80025b5e:	ef 68 ff f8 	st.b	r7[-8],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_PGPFB, (gp_fuse_byte & 0x07) | value << 3);
80025b62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025b66:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
80025b6a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80025b6e:	a3 78       	lsl	r8,0x3
80025b70:	f3 e8 10 08 	or	r8,r9,r8
80025b74:	10 9b       	mov	r11,r8
80025b76:	30 ac       	mov	r12,10
80025b78:	f0 16 00 2a 	mcall	r6[168]
}
80025b7c:	2f ed       	sub	sp,-8
80025b7e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025b82:	00 00       	add	r0,r0
80025b84:	80 02       	ld.sh	r2,r0[0x0]
80025b86:	59 da       	cp.w	r10,29

80025b88 <flashc_write_all_gp_fuses>:


void flashc_write_all_gp_fuses(U64 value)
{
80025b88:	eb cd 40 c0 	pushm	r6-r7,lr
80025b8c:	1a 97       	mov	r7,sp
80025b8e:	20 4d       	sub	sp,16
80025b90:	49 e6       	lddpc	r6,80025c08 <flashc_write_all_gp_fuses+0x80>
80025b92:	1e 26       	rsub	r6,pc
80025b94:	ee eb ff f0 	st.d	r7[-16],r10
  unsigned int error_status = 0;
80025b98:	30 08       	mov	r8,0
80025b9a:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int gp_fuse_byte;
  for (gp_fuse_byte = 0; gp_fuse_byte < 8; gp_fuse_byte++, value >>= 8)
80025b9e:	30 08       	mov	r8,0
80025ba0:	ef 48 ff fc 	st.w	r7[-4],r8
80025ba4:	c2 58       	rjmp	80025bee <flashc_write_all_gp_fuses+0x66>
  {
    flashc_write_gp_fuse_byte(gp_fuse_byte, value);
80025ba6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80025baa:	10 9b       	mov	r11,r8
80025bac:	ee fc ff fc 	ld.w	r12,r7[-4]
80025bb0:	f0 16 00 8c 	mcall	r6[560]
    error_status |= flashc_error_status;
80025bb4:	ec f8 00 54 	ld.w	r8,r6[84]
80025bb8:	70 08       	ld.w	r8,r8[0x0]
80025bba:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025bbe:	f3 e8 10 08 	or	r8,r9,r8
80025bc2:	ef 48 ff f8 	st.w	r7[-8],r8

void flashc_write_all_gp_fuses(U64 value)
{
  unsigned int error_status = 0;
  unsigned int gp_fuse_byte;
  for (gp_fuse_byte = 0; gp_fuse_byte < 8; gp_fuse_byte++, value >>= 8)
80025bc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025bca:	2f f8       	sub	r8,-1
80025bcc:	ef 48 ff fc 	st.w	r7[-4],r8
80025bd0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025bd4:	b9 68       	lsl	r8,0x18
80025bd6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80025bda:	a9 89       	lsr	r9,0x8
80025bdc:	f3 e8 10 08 	or	r8,r9,r8
80025be0:	ef 48 ff f4 	st.w	r7[-12],r8
80025be4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025be8:	a9 88       	lsr	r8,0x8
80025bea:	ef 48 ff f0 	st.w	r7[-16],r8
80025bee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025bf2:	58 78       	cp.w	r8,7
80025bf4:	fe 98 ff d9 	brls	80025ba6 <flashc_write_all_gp_fuses+0x1e>
  {
    flashc_write_gp_fuse_byte(gp_fuse_byte, value);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
80025bf8:	ec f8 00 54 	ld.w	r8,r6[84]
80025bfc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025c00:	91 09       	st.w	r8[0x0],r9
}
80025c02:	2f cd       	sub	sp,-16
80025c04:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025c08:	80 02       	ld.sh	r2,r0[0x0]
80025c0a:	5a 16       	cp.w	r6,-31

80025c0c <flashc_set_gp_fuse_bit>:


void flashc_set_gp_fuse_bit(unsigned int gp_fuse_bit, bool value)
{
80025c0c:	eb cd 40 c0 	pushm	r6-r7,lr
80025c10:	1a 97       	mov	r7,sp
80025c12:	20 2d       	sub	sp,8
80025c14:	48 e6       	lddpc	r6,80025c4c <flashc_set_gp_fuse_bit+0x40>
80025c16:	1e 26       	rsub	r6,pc
80025c18:	ef 4c ff fc 	st.w	r7[-4],r12
80025c1c:	16 98       	mov	r8,r11
80025c1e:	ef 68 ff f8 	st.b	r7[-8],r8
  if (value)
80025c22:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80025c26:	30 08       	mov	r8,0
80025c28:	f0 09 18 00 	cp.b	r9,r8
80025c2c:	c0 70       	breq	80025c3a <flashc_set_gp_fuse_bit+0x2e>
    flashc_erase_gp_fuse_bit(gp_fuse_bit, false);
80025c2e:	30 0b       	mov	r11,0
80025c30:	ee fc ff fc 	ld.w	r12,r7[-4]
80025c34:	f0 16 00 e9 	mcall	r6[932]
80025c38:	c0 68       	rjmp	80025c44 <flashc_set_gp_fuse_bit+0x38>
  else
    flashc_write_gp_fuse_bit(gp_fuse_bit, false);
80025c3a:	30 0b       	mov	r11,0
80025c3c:	ee fc ff fc 	ld.w	r12,r7[-4]
80025c40:	f0 16 00 da 	mcall	r6[872]
}
80025c44:	2f ed       	sub	sp,-8
80025c46:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025c4a:	00 00       	add	r0,r0
80025c4c:	80 02       	ld.sh	r2,r0[0x0]
80025c4e:	5a 9a       	cp.w	r10,-23

80025c50 <flashc_set_gp_fuse_bitfield>:


void flashc_set_gp_fuse_bitfield(unsigned int pos, unsigned int width, U64 value)
{
80025c50:	eb cd 40 c0 	pushm	r6-r7,lr
80025c54:	1a 97       	mov	r7,sp
80025c56:	20 9d       	sub	sp,36
80025c58:	4b 16       	lddpc	r6,80025d1c <flashc_set_gp_fuse_bitfield+0xcc>
80025c5a:	1e 26       	rsub	r6,pc
80025c5c:	ef 4c ff e8 	st.w	r7[-24],r12
80025c60:	ef 4b ff e4 	st.w	r7[-28],r11
80025c64:	ee e9 ff dc 	st.d	r7[-36],r8
  unsigned int error_status = 0;
80025c68:	30 08       	mov	r8,0
80025c6a:	ef 48 ff ec 	st.w	r7[-20],r8
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
80025c6e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025c72:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80025c76:	ef 48 ff e8 	st.w	r7[-24],r8
  width = min(width, 64);
80025c7a:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025c7e:	ef 48 ff f8 	st.w	r7[-8],r8
80025c82:	34 08       	mov	r8,64
80025c84:	ef 48 ff fc 	st.w	r7[-4],r8
80025c88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025c8c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025c90:	f0 09 0d 48 	min	r8,r8,r9
80025c94:	ef 48 ff f4 	st.w	r7[-12],r8
80025c98:	ee f8 ff f4 	ld.w	r8,r7[-12]
80025c9c:	ef 48 ff e4 	st.w	r7[-28],r8
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++, value >>= 1)
80025ca0:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025ca4:	ef 48 ff f0 	st.w	r7[-16],r8
80025ca8:	c2 88       	rjmp	80025cf8 <flashc_set_gp_fuse_bitfield+0xa8>
  {
    flashc_set_gp_fuse_bit(gp_fuse_bit, value & 0x01);
80025caa:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025cae:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80025cb2:	5c 58       	castu.b	r8
80025cb4:	10 9b       	mov	r11,r8
80025cb6:	ee fc ff f0 	ld.w	r12,r7[-16]
80025cba:	f0 16 01 1a 	mcall	r6[1128]
    error_status |= flashc_error_status;
80025cbe:	ec f8 00 54 	ld.w	r8,r6[84]
80025cc2:	70 08       	ld.w	r8,r8[0x0]
80025cc4:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025cc8:	f3 e8 10 08 	or	r8,r9,r8
80025ccc:	ef 48 ff ec 	st.w	r7[-20],r8
{
  unsigned int error_status = 0;
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
  width = min(width, 64);
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++, value >>= 1)
80025cd0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025cd4:	2f f8       	sub	r8,-1
80025cd6:	ef 48 ff f0 	st.w	r7[-16],r8
80025cda:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025cde:	bf 78       	lsl	r8,0x1f
80025ce0:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025ce4:	a1 99       	lsr	r9,0x1
80025ce6:	f3 e8 10 08 	or	r8,r9,r8
80025cea:	ef 48 ff e0 	st.w	r7[-32],r8
80025cee:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025cf2:	a1 98       	lsr	r8,0x1
80025cf4:	ef 48 ff dc 	st.w	r7[-36],r8
80025cf8:	ee f9 ff e8 	ld.w	r9,r7[-24]
80025cfc:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025d00:	10 09       	add	r9,r8
80025d02:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025d06:	10 39       	cp.w	r9,r8
80025d08:	fe 9b ff d1 	brhi	80025caa <flashc_set_gp_fuse_bitfield+0x5a>
  {
    flashc_set_gp_fuse_bit(gp_fuse_bit, value & 0x01);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
80025d0c:	ec f8 00 54 	ld.w	r8,r6[84]
80025d10:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025d14:	91 09       	st.w	r8[0x0],r9
}
80025d16:	2f 7d       	sub	sp,-36
80025d18:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025d1c:	80 02       	ld.sh	r2,r0[0x0]
80025d1e:	5a de       	cp.w	lr,-19

80025d20 <flashc_set_gp_fuse_byte>:


void flashc_set_gp_fuse_byte(unsigned int gp_fuse_byte, U8 value)
{
80025d20:	eb cd 40 c0 	pushm	r6-r7,lr
80025d24:	1a 97       	mov	r7,sp
80025d26:	20 3d       	sub	sp,12
80025d28:	49 c6       	lddpc	r6,80025d98 <flashc_set_gp_fuse_byte+0x78>
80025d2a:	1e 26       	rsub	r6,pc
80025d2c:	ef 4c ff f8 	st.w	r7[-8],r12
80025d30:	16 98       	mov	r8,r11
80025d32:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned int error_status;
  switch (value)
80025d36:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80025d3a:	58 08       	cp.w	r8,0
80025d3c:	c0 a0       	breq	80025d50 <flashc_set_gp_fuse_byte+0x30>
80025d3e:	e0 48 00 ff 	cp.w	r8,255
80025d42:	c0 d1       	brne	80025d5c <flashc_set_gp_fuse_byte+0x3c>
  {
  case 0xFF:
    flashc_erase_gp_fuse_byte(gp_fuse_byte, false);
80025d44:	30 0b       	mov	r11,0
80025d46:	ee fc ff f8 	ld.w	r12,r7[-8]
80025d4a:	f0 16 01 0e 	mcall	r6[1080]
    break;
80025d4e:	c2 18       	rjmp	80025d90 <flashc_set_gp_fuse_byte+0x70>
  case 0x00:
    flashc_write_gp_fuse_byte(gp_fuse_byte, 0x00);
80025d50:	30 0b       	mov	r11,0
80025d52:	ee fc ff f8 	ld.w	r12,r7[-8]
80025d56:	f0 16 00 8c 	mcall	r6[560]
    break;
80025d5a:	c1 b8       	rjmp	80025d90 <flashc_set_gp_fuse_byte+0x70>
  default:
    flashc_erase_gp_fuse_byte(gp_fuse_byte, false);
80025d5c:	30 0b       	mov	r11,0
80025d5e:	ee fc ff f8 	ld.w	r12,r7[-8]
80025d62:	f0 16 01 0e 	mcall	r6[1080]
    error_status = flashc_error_status;
80025d66:	ec f8 00 54 	ld.w	r8,r6[84]
80025d6a:	70 08       	ld.w	r8,r8[0x0]
80025d6c:	ef 48 ff fc 	st.w	r7[-4],r8
    flashc_write_gp_fuse_byte(gp_fuse_byte, value);
80025d70:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80025d74:	10 9b       	mov	r11,r8
80025d76:	ee fc ff f8 	ld.w	r12,r7[-8]
80025d7a:	f0 16 00 8c 	mcall	r6[560]
    flashc_error_status |= error_status;
80025d7e:	ec f8 00 54 	ld.w	r8,r6[84]
80025d82:	70 09       	ld.w	r9,r8[0x0]
80025d84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025d88:	10 49       	or	r9,r8
80025d8a:	ec f8 00 54 	ld.w	r8,r6[84]
80025d8e:	91 09       	st.w	r8[0x0],r9
  }
}
80025d90:	2f dd       	sub	sp,-12
80025d92:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025d96:	00 00       	add	r0,r0
80025d98:	80 02       	ld.sh	r2,r0[0x0]
80025d9a:	5b ae       	cp.w	lr,-6

80025d9c <flashc_set_all_gp_fuses>:


void flashc_set_all_gp_fuses(U64 value)
{
80025d9c:	eb cd 40 c0 	pushm	r6-r7,lr
80025da0:	1a 97       	mov	r7,sp
80025da2:	20 3d       	sub	sp,12
80025da4:	49 86       	lddpc	r6,80025e04 <flashc_set_all_gp_fuses+0x68>
80025da6:	1e 26       	rsub	r6,pc
80025da8:	ee eb ff f4 	st.d	r7[-12],r10
  unsigned int error_status;
  switch (value)
80025dac:	ee e8 ff f4 	ld.d	r8,r7[-12]
80025db0:	58 08       	cp.w	r8,0
80025db2:	5c 29       	cpc	r9
80025db4:	c0 b0       	breq	80025dca <flashc_set_all_gp_fuses+0x2e>
80025db6:	3f fa       	mov	r10,-1
80025db8:	3f fb       	mov	r11,-1
80025dba:	14 38       	cp.w	r8,r10
80025dbc:	f6 09 13 00 	cpc	r9,r11
80025dc0:	c0 a1       	brne	80025dd4 <flashc_set_all_gp_fuses+0x38>
  {
  case 0xFFFFFFFFFFFFFFFFULL:
    flashc_erase_all_gp_fuses(false);
80025dc2:	30 0c       	mov	r12,0
80025dc4:	f0 16 00 d0 	mcall	r6[832]
    break;
80025dc8:	c1 b8       	rjmp	80025dfe <flashc_set_all_gp_fuses+0x62>
  case 0x0000000000000000ULL:
    flashc_write_all_gp_fuses(0x0000000000000000ULL);
80025dca:	30 0a       	mov	r10,0
80025dcc:	30 0b       	mov	r11,0
80025dce:	f0 16 00 f1 	mcall	r6[964]
    break;
80025dd2:	c1 68       	rjmp	80025dfe <flashc_set_all_gp_fuses+0x62>
  default:
    flashc_erase_all_gp_fuses(false);
80025dd4:	30 0c       	mov	r12,0
80025dd6:	f0 16 00 d0 	mcall	r6[832]
    error_status = flashc_error_status;
80025dda:	ec f8 00 54 	ld.w	r8,r6[84]
80025dde:	70 08       	ld.w	r8,r8[0x0]
80025de0:	ef 48 ff fc 	st.w	r7[-4],r8
    flashc_write_all_gp_fuses(value);
80025de4:	ee ea ff f4 	ld.d	r10,r7[-12]
80025de8:	f0 16 00 f1 	mcall	r6[964]
    flashc_error_status |= error_status;
80025dec:	ec f8 00 54 	ld.w	r8,r6[84]
80025df0:	70 09       	ld.w	r9,r8[0x0]
80025df2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025df6:	10 49       	or	r9,r8
80025df8:	ec f8 00 54 	ld.w	r8,r6[84]
80025dfc:	91 09       	st.w	r8[0x0],r9
  }
}
80025dfe:	2f dd       	sub	sp,-12
80025e00:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025e04:	80 02       	ld.sh	r2,r0[0x0]
80025e06:	5c 2a       	cpc	r10

80025e08 <flashc_clear_page_buffer>:
 */
//! @{


void flashc_clear_page_buffer(void)
{
80025e08:	eb cd 40 c0 	pushm	r6-r7,lr
80025e0c:	1a 97       	mov	r7,sp
80025e0e:	48 56       	lddpc	r6,80025e20 <flashc_clear_page_buffer+0x18>
80025e10:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_CPB, -1);
80025e12:	3f fb       	mov	r11,-1
80025e14:	30 3c       	mov	r12,3
80025e16:	f0 16 00 2a 	mcall	r6[168]
}
80025e1a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025e1e:	00 00       	add	r0,r0
80025e20:	80 02       	ld.sh	r2,r0[0x0]
80025e22:	5c 94       	brev	r4

80025e24 <flashc_is_page_erased>:


bool flashc_is_page_erased(void)
{
80025e24:	eb cd 40 80 	pushm	r7,lr
80025e28:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
80025e2a:	fe 68 00 00 	mov	r8,-131072
80025e2e:	70 28       	ld.w	r8,r8[0x8]
80025e30:	e2 18 00 20 	andl	r8,0x20,COH
80025e34:	5f 18       	srne	r8
80025e36:	5c 58       	castu.b	r8
}
80025e38:	10 9c       	mov	r12,r8
80025e3a:	e3 cd 80 80 	ldm	sp++,r7,pc

80025e3e <flashc_quick_page_read>:


bool flashc_quick_page_read(int page_number)
{
80025e3e:	eb cd 40 c0 	pushm	r6-r7,lr
80025e42:	1a 97       	mov	r7,sp
80025e44:	20 1d       	sub	sp,4
80025e46:	48 96       	lddpc	r6,80025e68 <flashc_quick_page_read+0x2a>
80025e48:	1e 26       	rsub	r6,pc
80025e4a:	ef 4c ff fc 	st.w	r7[-4],r12
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
80025e4e:	ee fb ff fc 	ld.w	r11,r7[-4]
80025e52:	30 cc       	mov	r12,12
80025e54:	f0 16 00 2a 	mcall	r6[168]
  return flashc_is_page_erased();
80025e58:	f0 16 00 e0 	mcall	r6[896]
80025e5c:	18 98       	mov	r8,r12
}
80025e5e:	10 9c       	mov	r12,r8
80025e60:	2f fd       	sub	sp,-4
80025e62:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025e66:	00 00       	add	r0,r0
80025e68:	80 02       	ld.sh	r2,r0[0x0]
80025e6a:	5c cc       	swap.bh	r12

80025e6c <flashc_erase_page>:


bool flashc_erase_page(int page_number, bool check)
{
80025e6c:	eb cd 40 c0 	pushm	r6-r7,lr
80025e70:	1a 97       	mov	r7,sp
80025e72:	20 4d       	sub	sp,16
80025e74:	49 86       	lddpc	r6,80025ed4 <flashc_erase_page+0x68>
80025e76:	1e 26       	rsub	r6,pc
80025e78:	ef 4c ff f4 	st.w	r7[-12],r12
80025e7c:	16 98       	mov	r8,r11
80025e7e:	ef 68 ff f0 	st.b	r7[-16],r8
  bool page_erased = true;
80025e82:	30 18       	mov	r8,1
80025e84:	ef 68 ff fb 	st.b	r7[-5],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
80025e88:	ee fb ff f4 	ld.w	r11,r7[-12]
80025e8c:	30 2c       	mov	r12,2
80025e8e:	f0 16 00 2a 	mcall	r6[168]
  if (check)
80025e92:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80025e96:	30 08       	mov	r8,0
80025e98:	f0 09 18 00 	cp.b	r9,r8
80025e9c:	c1 50       	breq	80025ec6 <flashc_erase_page+0x5a>
  {
    unsigned int error_status = flashc_error_status;
80025e9e:	ec f8 00 54 	ld.w	r8,r6[84]
80025ea2:	70 08       	ld.w	r8,r8[0x0]
80025ea4:	ef 48 ff fc 	st.w	r7[-4],r8
    page_erased = flashc_quick_page_read(-1);
80025ea8:	3f fc       	mov	r12,-1
80025eaa:	f0 16 01 75 	mcall	r6[1492]
80025eae:	18 98       	mov	r8,r12
80025eb0:	ef 68 ff fb 	st.b	r7[-5],r8
    flashc_error_status |= error_status;
80025eb4:	ec f8 00 54 	ld.w	r8,r6[84]
80025eb8:	70 09       	ld.w	r9,r8[0x0]
80025eba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025ebe:	10 49       	or	r9,r8
80025ec0:	ec f8 00 54 	ld.w	r8,r6[84]
80025ec4:	91 09       	st.w	r8[0x0],r9
  }
  return page_erased;
80025ec6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
80025eca:	10 9c       	mov	r12,r8
80025ecc:	2f cd       	sub	sp,-16
80025ece:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025ed2:	00 00       	add	r0,r0
80025ed4:	80 02       	ld.sh	r2,r0[0x0]
80025ed6:	5c fa       	rol	r10

80025ed8 <flashc_erase_all_pages>:


bool flashc_erase_all_pages(bool check)
{
80025ed8:	eb cd 40 e0 	pushm	r5-r7,lr
80025edc:	1a 97       	mov	r7,sp
80025ede:	20 4d       	sub	sp,16
80025ee0:	49 f6       	lddpc	r6,80025f5c <flashc_erase_all_pages+0x84>
80025ee2:	1e 26       	rsub	r6,pc
80025ee4:	18 98       	mov	r8,r12
80025ee6:	ef 68 ff f0 	st.b	r7[-16],r8
  bool all_pages_erased = true;
80025eea:	30 18       	mov	r8,1
80025eec:	ef 68 ff f7 	st.b	r7[-9],r8
  unsigned int error_status = 0;
80025ef0:	30 08       	mov	r8,0
80025ef2:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int page_number = flashc_get_page_count();
80025ef6:	f0 16 01 04 	mcall	r6[1040]
80025efa:	18 98       	mov	r8,r12
80025efc:	ef 48 ff fc 	st.w	r7[-4],r8
  while (page_number)
80025f00:	c1 f8       	rjmp	80025f3e <flashc_erase_all_pages+0x66>
  {
    all_pages_erased &= flashc_erase_page(--page_number, check);
80025f02:	ef 35 ff f7 	ld.ub	r5,r7[-9]
80025f06:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80025f0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025f0e:	20 18       	sub	r8,1
80025f10:	ef 48 ff fc 	st.w	r7[-4],r8
80025f14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025f18:	12 9b       	mov	r11,r9
80025f1a:	10 9c       	mov	r12,r8
80025f1c:	f0 16 00 a2 	mcall	r6[648]
80025f20:	18 98       	mov	r8,r12
80025f22:	eb e8 00 08 	and	r8,r5,r8
80025f26:	5f 18       	srne	r8
80025f28:	ef 68 ff f7 	st.b	r7[-9],r8
    error_status |= flashc_error_status;
80025f2c:	ec f8 00 54 	ld.w	r8,r6[84]
80025f30:	70 08       	ld.w	r8,r8[0x0]
80025f32:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025f36:	f3 e8 10 08 	or	r8,r9,r8
80025f3a:	ef 48 ff f8 	st.w	r7[-8],r8
bool flashc_erase_all_pages(bool check)
{
  bool all_pages_erased = true;
  unsigned int error_status = 0;
  unsigned int page_number = flashc_get_page_count();
  while (page_number)
80025f3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025f42:	58 08       	cp.w	r8,0
80025f44:	cd f1       	brne	80025f02 <flashc_erase_all_pages+0x2a>
  {
    all_pages_erased &= flashc_erase_page(--page_number, check);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
80025f46:	ec f8 00 54 	ld.w	r8,r6[84]
80025f4a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025f4e:	91 09       	st.w	r8[0x0],r9
  return all_pages_erased;
80025f50:	ef 38 ff f7 	ld.ub	r8,r7[-9]
}
80025f54:	10 9c       	mov	r12,r8
80025f56:	2f cd       	sub	sp,-16
80025f58:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80025f5c:	80 02       	ld.sh	r2,r0[0x0]
80025f5e:	5d 66       	*unknown*

80025f60 <flashc_write_page>:


void flashc_write_page(int page_number)
{
80025f60:	eb cd 40 c0 	pushm	r6-r7,lr
80025f64:	1a 97       	mov	r7,sp
80025f66:	20 1d       	sub	sp,4
80025f68:	48 66       	lddpc	r6,80025f80 <flashc_write_page+0x20>
80025f6a:	1e 26       	rsub	r6,pc
80025f6c:	ef 4c ff fc 	st.w	r7[-4],r12
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WP, page_number);
80025f70:	ee fb ff fc 	ld.w	r11,r7[-4]
80025f74:	30 1c       	mov	r12,1
80025f76:	f0 16 00 2a 	mcall	r6[168]
}
80025f7a:	2f fd       	sub	sp,-4
80025f7c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025f80:	80 02       	ld.sh	r2,r0[0x0]
80025f82:	5d ee       	*unknown*

80025f84 <flashc_quick_user_page_read>:


bool flashc_quick_user_page_read(void)
{
80025f84:	eb cd 40 c0 	pushm	r6-r7,lr
80025f88:	1a 97       	mov	r7,sp
80025f8a:	48 76       	lddpc	r6,80025fa4 <flashc_quick_user_page_read+0x20>
80025f8c:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
80025f8e:	3f fb       	mov	r11,-1
80025f90:	30 fc       	mov	r12,15
80025f92:	f0 16 00 2a 	mcall	r6[168]
  return flashc_is_page_erased();
80025f96:	f0 16 00 e0 	mcall	r6[896]
80025f9a:	18 98       	mov	r8,r12
}
80025f9c:	10 9c       	mov	r12,r8
80025f9e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025fa2:	00 00       	add	r0,r0
80025fa4:	80 02       	ld.sh	r2,r0[0x0]
80025fa6:	5e 10       	retne	r0

80025fa8 <flashc_erase_user_page>:


bool flashc_erase_user_page(bool check)
{
80025fa8:	eb cd 40 c0 	pushm	r6-r7,lr
80025fac:	1a 97       	mov	r7,sp
80025fae:	20 1d       	sub	sp,4
80025fb0:	48 c6       	lddpc	r6,80025fe0 <flashc_erase_user_page+0x38>
80025fb2:	1e 26       	rsub	r6,pc
80025fb4:	18 98       	mov	r8,r12
80025fb6:	ef 68 ff fc 	st.b	r7[-4],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EUP, -1);
80025fba:	3f fb       	mov	r11,-1
80025fbc:	30 ec       	mov	r12,14
80025fbe:	f0 16 00 2a 	mcall	r6[168]
  return (check) ? flashc_quick_user_page_read() : true;
80025fc2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80025fc6:	30 08       	mov	r8,0
80025fc8:	f0 09 18 00 	cp.b	r9,r8
80025fcc:	c0 50       	breq	80025fd6 <flashc_erase_user_page+0x2e>
80025fce:	f0 16 02 13 	mcall	r6[2124]
80025fd2:	18 98       	mov	r8,r12
80025fd4:	c0 28       	rjmp	80025fd8 <flashc_erase_user_page+0x30>
80025fd6:	30 18       	mov	r8,1
}
80025fd8:	10 9c       	mov	r12,r8
80025fda:	2f fd       	sub	sp,-4
80025fdc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025fe0:	80 02       	ld.sh	r2,r0[0x0]
80025fe2:	5e 36       	retlo	r6

80025fe4 <flashc_write_user_page>:


void flashc_write_user_page(void)
{
80025fe4:	eb cd 40 c0 	pushm	r6-r7,lr
80025fe8:	1a 97       	mov	r7,sp
80025fea:	48 56       	lddpc	r6,80025ffc <flashc_write_user_page+0x18>
80025fec:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WUP, -1);
80025fee:	3f fb       	mov	r11,-1
80025ff0:	30 dc       	mov	r12,13
80025ff2:	f0 16 00 2a 	mcall	r6[168]
}
80025ff6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025ffa:	00 00       	add	r0,r0
80025ffc:	80 02       	ld.sh	r2,r0[0x0]
80025ffe:	5e 70       	retpl	r0

80026000 <flashc_memset8>:


volatile void *flashc_memset8(volatile void *dst, U8 src, size_t nbytes, bool erase)
{
80026000:	eb cd 40 c0 	pushm	r6-r7,lr
80026004:	1a 97       	mov	r7,sp
80026006:	20 4d       	sub	sp,16
80026008:	49 26       	lddpc	r6,80026050 <flashc_memset8+0x50>
8002600a:	1e 26       	rsub	r6,pc
8002600c:	ef 4c ff fc 	st.w	r7[-4],r12
80026010:	ef 4a ff f4 	st.w	r7[-12],r10
80026014:	12 98       	mov	r8,r9
80026016:	16 99       	mov	r9,r11
80026018:	ef 69 ff f8 	st.b	r7[-8],r9
8002601c:	ef 68 ff f0 	st.b	r7[-16],r8
  return flashc_memset16(dst, src | (U16)src << 8, nbytes, erase);
80026020:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80026024:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80026028:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002602c:	a9 68       	lsl	r8,0x8
8002602e:	5c 88       	casts.h	r8
80026030:	f5 e8 10 08 	or	r8,r10,r8
80026034:	5c 88       	casts.h	r8
80026036:	5c 78       	castu.h	r8
80026038:	ee fa ff f4 	ld.w	r10,r7[-12]
8002603c:	10 9b       	mov	r11,r8
8002603e:	ee fc ff fc 	ld.w	r12,r7[-4]
80026042:	f0 16 01 81 	mcall	r6[1540]
80026046:	18 98       	mov	r8,r12
}
80026048:	10 9c       	mov	r12,r8
8002604a:	2f cd       	sub	sp,-16
8002604c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026050:	80 02       	ld.sh	r2,r0[0x0]
80026052:	5e 8e       	retls	-1

80026054 <flashc_memset16>:


volatile void *flashc_memset16(volatile void *dst, U16 src, size_t nbytes, bool erase)
{
80026054:	eb cd 40 c0 	pushm	r6-r7,lr
80026058:	1a 97       	mov	r7,sp
8002605a:	20 4d       	sub	sp,16
8002605c:	49 16       	lddpc	r6,800260a0 <flashc_memset16+0x4c>
8002605e:	1e 26       	rsub	r6,pc
80026060:	ef 4c ff fc 	st.w	r7[-4],r12
80026064:	ef 4a ff f4 	st.w	r7[-12],r10
80026068:	12 98       	mov	r8,r9
8002606a:	16 99       	mov	r9,r11
8002606c:	ef 59 ff f8 	st.h	r7[-8],r9
80026070:	ef 68 ff f0 	st.b	r7[-16],r8
  return flashc_memset32(dst, src | (U32)src << 16, nbytes, erase);
80026074:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80026078:	ef 1a ff f8 	ld.uh	r10,r7[-8]
8002607c:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80026080:	b1 68       	lsl	r8,0x10
80026082:	f5 e8 10 08 	or	r8,r10,r8
80026086:	ee fa ff f4 	ld.w	r10,r7[-12]
8002608a:	10 9b       	mov	r11,r8
8002608c:	ee fc ff fc 	ld.w	r12,r7[-4]
80026090:	f0 16 01 bc 	mcall	r6[1776]
80026094:	18 98       	mov	r8,r12
}
80026096:	10 9c       	mov	r12,r8
80026098:	2f cd       	sub	sp,-16
8002609a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002609e:	00 00       	add	r0,r0
800260a0:	80 02       	ld.sh	r2,r0[0x0]
800260a2:	5e e2       	retqs	r2

800260a4 <flashc_memset32>:


volatile void *flashc_memset32(volatile void *dst, U32 src, size_t nbytes, bool erase)
{
800260a4:	eb cd 40 cf 	pushm	r0-r3,r6-r7,lr
800260a8:	1a 97       	mov	r7,sp
800260aa:	20 6d       	sub	sp,24
800260ac:	49 56       	lddpc	r6,80026100 <flashc_memset32+0x5c>
800260ae:	1e 26       	rsub	r6,pc
800260b0:	ef 4c ff fc 	st.w	r7[-4],r12
800260b4:	ef 4b ff f8 	st.w	r7[-8],r11
800260b8:	ef 4a ff f4 	st.w	r7[-12],r10
800260bc:	12 98       	mov	r8,r9
800260be:	ef 68 ff f0 	st.b	r7[-16],r8
  return flashc_memset64(dst, src | (U64)src << 32, nbytes, erase);
800260c2:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800260c6:	ee f0 ff f8 	ld.w	r0,r7[-8]
800260ca:	30 01       	mov	r1,0
800260cc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800260d0:	ef 49 ff ec 	st.w	r7[-20],r9
800260d4:	30 09       	mov	r9,0
800260d6:	ef 49 ff e8 	st.w	r7[-24],r9
800260da:	ee f3 ff ec 	ld.w	r3,r7[-20]
800260de:	a1 63       	lsl	r3,0x0
800260e0:	30 02       	mov	r2,0
800260e2:	e1 e2 10 0a 	or	r10,r0,r2
800260e6:	e3 e3 10 0b 	or	r11,r1,r3
800260ea:	ee f9 ff f4 	ld.w	r9,r7[-12]
800260ee:	ee fc ff fc 	ld.w	r12,r7[-4]
800260f2:	f0 16 01 a0 	mcall	r6[1664]
800260f6:	18 98       	mov	r8,r12
}
800260f8:	10 9c       	mov	r12,r8
800260fa:	2f ad       	sub	sp,-24
800260fc:	e3 cd 80 cf 	ldm	sp++,r0-r3,r6-r7,pc
80026100:	80 02       	ld.sh	r2,r0[0x0]
80026102:	5f 32       	srlo	r2

80026104 <flashc_memset64>:


volatile void *flashc_memset64(volatile void *dst, U64 src, size_t nbytes, bool erase)
{
80026104:	eb cd 40 c0 	pushm	r6-r7,lr
80026108:	1a 97       	mov	r7,sp
8002610a:	21 bd       	sub	sp,108
8002610c:	fe f6 04 14 	ld.w	r6,pc[1044]
80026110:	1e 26       	rsub	r6,pc
80026112:	ef 4c ff a4 	st.w	r7[-92],r12
80026116:	ee eb ff 9c 	st.d	r7[-100],r10
8002611a:	ef 49 ff 98 	st.w	r7[-104],r9
8002611e:	ef 68 ff 94 	st.b	r7[-108],r8
  // Use aggregated pointers to have several alignments available for a same address.
  UnionCVPtr flash_array_end;
  UnionVPtr dest;
  Union64 source = {0};
80026122:	30 08       	mov	r8,0
80026124:	30 09       	mov	r9,0
80026126:	ee e9 ff d8 	st.d	r7[-40],r8
  StructCVPtr dest_end;
  UnionCVPtr flash_page_source_end;
  bool incomplete_flash_page_end;
  Union64 flash_dword;
  UnionVPtr tmp;
  unsigned int error_status = 0;
8002612a:	30 08       	mov	r8,0
8002612c:	ef 48 ff ec 	st.w	r7[-20],r8
  unsigned int i;

  // Reformat arguments.
  flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
80026130:	f0 16 00 c6 	mcall	r6[792]
80026134:	18 99       	mov	r9,r12
80026136:	fc 18 80 00 	movh	r8,0x8000
8002613a:	f2 08 00 08 	add	r8,r9,r8
8002613e:	ef 48 ff e4 	st.w	r7[-28],r8
  dest.u8ptr = dst;
80026142:	ee f8 ff a4 	ld.w	r8,r7[-92]
80026146:	ef 48 ff e0 	st.w	r7[-32],r8
  for (i = (Get_align((U32)dest.u8ptr, sizeof(U64)) - 1) & (sizeof(U64) - 1);
8002614a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002614e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80026152:	20 18       	sub	r8,1
80026154:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80026158:	ef 48 ff f0 	st.w	r7[-16],r8
8002615c:	c1 f8       	rjmp	8002619a <flashc_memset64+0x96>
       src; i = (i - 1) & (sizeof(U64) - 1))
  {
    source.u8[i] = src;
8002615e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80026162:	ef 38 ff a3 	ld.ub	r8,r7[-93]
80026166:	ee 09 00 09 	add	r9,r7,r9
8002616a:	f3 68 ff d8 	st.b	r9[-40],r8
    src >>= 8;
8002616e:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80026172:	b9 68       	lsl	r8,0x18
80026174:	ee f9 ff a0 	ld.w	r9,r7[-96]
80026178:	a9 89       	lsr	r9,0x8
8002617a:	f3 e8 10 08 	or	r8,r9,r8
8002617e:	ef 48 ff a0 	st.w	r7[-96],r8
80026182:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80026186:	a9 88       	lsr	r8,0x8
80026188:	ef 48 ff 9c 	st.w	r7[-100],r8

  // Reformat arguments.
  flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
  dest.u8ptr = dst;
  for (i = (Get_align((U32)dest.u8ptr, sizeof(U64)) - 1) & (sizeof(U64) - 1);
       src; i = (i - 1) & (sizeof(U64) - 1))
8002618c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026190:	20 18       	sub	r8,1
80026192:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80026196:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int i;

  // Reformat arguments.
  flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
  dest.u8ptr = dst;
  for (i = (Get_align((U32)dest.u8ptr, sizeof(U64)) - 1) & (sizeof(U64) - 1);
8002619a:	ee e8 ff 9c 	ld.d	r8,r7[-100]
8002619e:	58 08       	cp.w	r8,0
800261a0:	5c 29       	cpc	r9
800261a2:	cd e1       	brne	8002615e <flashc_memset64+0x5a>
       src; i = (i - 1) & (sizeof(U64) - 1))
  {
    source.u8[i] = src;
    src >>= 8;
  }
  dest_end.u8ptr = dest.u8ptr + nbytes;
800261a4:	ee f9 ff e0 	ld.w	r9,r7[-32]
800261a8:	ee f8 ff 98 	ld.w	r8,r7[-104]
800261ac:	f2 08 00 08 	add	r8,r9,r8
800261b0:	ef 48 ff d4 	st.w	r7[-44],r8

  // If destination is outside flash, go to next flash page if any.
  if (dest.u8ptr < AVR32_FLASH)
800261b4:	ee f8 ff e0 	ld.w	r8,r7[-32]
800261b8:	e0 69 ff ff 	mov	r9,65535
800261bc:	ea 19 7f ff 	orh	r9,0x7fff
800261c0:	12 38       	cp.w	r8,r9
800261c2:	e0 8b 00 07 	brhi	800261d0 <flashc_memset64+0xcc>
  {
    dest.u8ptr = AVR32_FLASH;
800261c6:	fc 18 80 00 	movh	r8,0x8000
800261ca:	ef 48 ff e0 	st.w	r7[-32],r8
800261ce:	c1 58       	rjmp	800261f8 <flashc_memset64+0xf4>
  }
  else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE)
800261d0:	ee f9 ff e4 	ld.w	r9,r7[-28]
800261d4:	ee f8 ff e0 	ld.w	r8,r7[-32]
800261d8:	10 39       	cp.w	r9,r8
800261da:	e0 8b 00 0f 	brhi	800261f8 <flashc_memset64+0xf4>
800261de:	ee f8 ff e0 	ld.w	r8,r7[-32]
800261e2:	e0 69 ff ff 	mov	r9,65535
800261e6:	ea 19 80 7f 	orh	r9,0x807f
800261ea:	12 38       	cp.w	r8,r9
800261ec:	e0 8b 00 06 	brhi	800261f8 <flashc_memset64+0xf4>
  {
    dest.u8ptr = AVR32_FLASHC_USER_PAGE;
800261f0:	fc 18 80 80 	movh	r8,0x8080
800261f4:	ef 48 ff e0 	st.w	r7[-32],r8
  }

  // If end of destination is outside flash, move it to the end of the previous flash page if any.
  if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE)
800261f8:	ee f8 ff d4 	ld.w	r8,r7[-44]
800261fc:	e0 69 02 00 	mov	r9,512
80026200:	ea 19 80 80 	orh	r9,0x8080
80026204:	12 38       	cp.w	r8,r9
80026206:	e0 88 00 09 	brls	80026218 <flashc_memset64+0x114>
  {
    dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
8002620a:	e0 68 02 00 	mov	r8,512
8002620e:	ea 18 80 80 	orh	r8,0x8080
80026212:	ef 48 ff d4 	st.w	r7[-44],r8
80026216:	c1 38       	rjmp	8002623c <flashc_memset64+0x138>
  }
  else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr)
80026218:	ee f8 ff d4 	ld.w	r8,r7[-44]
8002621c:	fc 19 80 80 	movh	r9,0x8080
80026220:	12 38       	cp.w	r8,r9
80026222:	e0 8b 00 0d 	brhi	8002623c <flashc_memset64+0x138>
80026226:	ee f9 ff d4 	ld.w	r9,r7[-44]
8002622a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002622e:	10 39       	cp.w	r9,r8
80026230:	e0 88 00 06 	brls	8002623c <flashc_memset64+0x138>
  {
    dest_end.u8ptr = flash_array_end.u8ptr;
80026234:	ee f8 ff e4 	ld.w	r8,r7[-28]
80026238:	ef 48 ff d4 	st.w	r7[-44],r8
  }

  // Align each end of destination pointer with its natural boundary.
  dest_end.u16ptr = (U16 *)Align_down((U32)dest_end.u8ptr, sizeof(U16));
8002623c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80026240:	a1 c8       	cbr	r8,0x0
80026242:	ef 48 ff cc 	st.w	r7[-52],r8
  dest_end.u32ptr = (U32 *)Align_down((U32)dest_end.u16ptr, sizeof(U32));
80026246:	ee f8 ff cc 	ld.w	r8,r7[-52]
8002624a:	e0 18 ff fc 	andl	r8,0xfffc
8002624e:	ef 48 ff c4 	st.w	r7[-60],r8
  dest_end.u64ptr = (U64 *)Align_down((U32)dest_end.u32ptr, sizeof(U64));
80026252:	ee f8 ff c4 	ld.w	r8,r7[-60]
80026256:	e0 18 ff f8 	andl	r8,0xfff8
8002625a:	ef 48 ff bc 	st.w	r7[-68],r8

  // While end of destination is not reached...
  while (dest.u8ptr < dest_end.u8ptr)
8002625e:	c4 f9       	rjmp	800264fc <flashc_memset64+0x3f8>
  {
    // Clear the page buffer in order to prepare data for a flash page write.
    flashc_clear_page_buffer();
80026260:	f0 16 01 26 	mcall	r6[1176]
    error_status |= flashc_error_status;
80026264:	ec f8 00 54 	ld.w	r8,r6[84]
80026268:	70 08       	ld.w	r8,r8[0x0]
8002626a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002626e:	f3 e8 10 08 	or	r8,r9,r8
80026272:	ef 48 ff ec 	st.w	r7[-20],r8

    // Determine where the source data will end in the current flash page.
    flash_page_source_end.u64ptr =
      (U64 *)min((U32)dest_end.u64ptr,
80026276:	ee f8 ff bc 	ld.w	r8,r7[-68]
8002627a:	ef 48 ff f8 	st.w	r7[-8],r8
8002627e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80026282:	e0 18 fe 00 	andl	r8,0xfe00
80026286:	f0 c8 fe 00 	sub	r8,r8,-512
8002628a:	ef 48 ff fc 	st.w	r7[-4],r8
8002628e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026292:	ee f9 ff fc 	ld.w	r9,r7[-4]
80026296:	f0 09 0d 48 	min	r8,r8,r9
8002629a:	ef 48 ff f4 	st.w	r7[-12],r8
8002629e:	ee f8 ff f4 	ld.w	r8,r7[-12]
    // Clear the page buffer in order to prepare data for a flash page write.
    flashc_clear_page_buffer();
    error_status |= flashc_error_status;

    // Determine where the source data will end in the current flash page.
    flash_page_source_end.u64ptr =
800262a2:	ef 48 ff b4 	st.w	r7[-76],r8
      (U64 *)min((U32)dest_end.u64ptr,
                 Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

    // Determine if the current destination page has an incomplete end.
    incomplete_flash_page_end = (Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
800262a6:	ee f8 ff e0 	ld.w	r8,r7[-32]
800262aa:	10 9a       	mov	r10,r8
800262ac:	e0 1a fe 00 	andl	r10,0xfe00
                                 Align_down((U32)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));
800262b0:	ee f8 ff d4 	ld.w	r8,r7[-44]
800262b4:	10 99       	mov	r9,r8
800262b6:	e0 19 fe 00 	andl	r9,0xfe00
    flash_page_source_end.u64ptr =
      (U64 *)min((U32)dest_end.u64ptr,
                 Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

    // Determine if the current destination page has an incomplete end.
    incomplete_flash_page_end = (Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
800262ba:	30 18       	mov	r8,1
800262bc:	12 3a       	cp.w	r10,r9
800262be:	c0 22       	brcc	800262c2 <flashc_memset64+0x1be>
800262c0:	30 08       	mov	r8,0
800262c2:	ef 68 ff eb 	st.b	r7[-21],r8
                                 Align_down((U32)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

    // Use a flash double-word buffer to manage unaligned accesses.
    flash_dword.u64 = source.u64;
800262c6:	ee e8 ff d8 	ld.d	r8,r7[-40]
800262ca:	ee e9 ff ac 	st.d	r7[-84],r8

    // If destination does not point to the beginning of the current flash page...
    if (!Test_align((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE))
800262ce:	ee f8 ff e0 	ld.w	r8,r7[-32]
800262d2:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800262d6:	c5 b0       	breq	8002638c <flashc_memset64+0x288>
    {
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
800262d8:	ee f8 ff e0 	ld.w	r8,r7[-32]
800262dc:	e0 18 fe 00 	andl	r8,0xfe00
800262e0:	ef 48 ff a8 	st.w	r7[-88],r8
800262e4:	c0 e8       	rjmp	80026300 <flashc_memset64+0x1fc>
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
        *tmp.u64ptr = *tmp.u64ptr;
800262e6:	ee fa ff a8 	ld.w	r10,r7[-88]
800262ea:	ee f8 ff a8 	ld.w	r8,r7[-88]
800262ee:	f0 e8 00 00 	ld.d	r8,r8[0]
800262f2:	f4 e9 00 00 	st.d	r10[0],r8
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
800262f6:	ee f8 ff a8 	ld.w	r8,r7[-88]
800262fa:	2f 88       	sub	r8,-8
800262fc:	ef 48 ff a8 	st.w	r7[-88],r8
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
80026300:	ee f9 ff a8 	ld.w	r9,r7[-88]
80026304:	ee f8 ff e0 	ld.w	r8,r7[-32]
80026308:	e0 18 ff f8 	andl	r8,0xfff8
    {
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
8002630c:	10 39       	cp.w	r9,r8
8002630e:	ce c3       	brcs	800262e6 <flashc_memset64+0x1e2>
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
        *tmp.u64ptr = *tmp.u64ptr;

      // If destination is not 64-bit aligned...
      if (!Test_align((U32)dest.u8ptr, sizeof(U64)))
80026310:	ee f8 ff e0 	ld.w	r8,r7[-32]
80026314:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80026318:	c3 a0       	breq	8002638c <flashc_memset64+0x288>
        // Fill the beginning of the flash double-word buffer with the current
        // flash page data.
        // This is required by the hardware, even if page erase is not
        // requested, in order to be able to write successfully to erased parts
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
8002631a:	30 08       	mov	r8,0
8002631c:	ef 48 ff f0 	st.w	r7[-16],r8
80026320:	c1 38       	rjmp	80026346 <flashc_memset64+0x242>
          flash_dword.u8[i] = *tmp.u8ptr++;
80026322:	ee fa ff f0 	ld.w	r10,r7[-16]
80026326:	ee f8 ff a8 	ld.w	r8,r7[-88]
8002632a:	11 89       	ld.ub	r9,r8[0x0]
8002632c:	5c 59       	castu.b	r9
8002632e:	ee 0a 00 0a 	add	r10,r7,r10
80026332:	f5 69 ff ac 	st.b	r10[-84],r9
80026336:	2f f8       	sub	r8,-1
80026338:	ef 48 ff a8 	st.w	r7[-88],r8
        // Fill the beginning of the flash double-word buffer with the current
        // flash page data.
        // This is required by the hardware, even if page erase is not
        // requested, in order to be able to write successfully to erased parts
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
8002633c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026340:	2f f8       	sub	r8,-1
80026342:	ef 48 ff f0 	st.w	r7[-16],r8
80026346:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002634a:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
8002634e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026352:	10 39       	cp.w	r9,r8
80026354:	fe 9b ff e7 	brhi	80026322 <flashc_memset64+0x21e>
          flash_dword.u8[i] = *tmp.u8ptr++;

        // Align the destination pointer with its 64-bit boundary.
        dest.u64ptr = (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
80026358:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002635c:	e0 18 ff f8 	andl	r8,0xfff8
80026360:	ef 48 ff e0 	st.w	r7[-32],r8

        // If the current destination double-word is not the last one...
        if (dest.u64ptr < dest_end.u64ptr)
80026364:	ee f9 ff e0 	ld.w	r9,r7[-32]
80026368:	ee f8 ff bc 	ld.w	r8,r7[-68]
8002636c:	10 39       	cp.w	r9,r8
8002636e:	c0 f2       	brcc	8002638c <flashc_memset64+0x288>
        {
          // Write the flash double-word buffer to the page buffer and reinitialize it.
          *dest.u64ptr++ = flash_dword.u64;
80026370:	ee fa ff e0 	ld.w	r10,r7[-32]
80026374:	ee e8 ff ac 	ld.d	r8,r7[-84]
80026378:	f4 e9 00 00 	st.d	r10[0],r8
8002637c:	f4 c8 ff f8 	sub	r8,r10,-8
80026380:	ef 48 ff e0 	st.w	r7[-32],r8
          flash_dword.u64 = source.u64;
80026384:	ee e8 ff d8 	ld.d	r8,r7[-40]
80026388:	ee e9 ff ac 	st.d	r7[-84],r8
        }
      }
    }

    // Write the source data to the page buffer with 64-bit alignment.
    for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
8002638c:	ee f8 ff b4 	ld.w	r8,r7[-76]
80026390:	10 99       	mov	r9,r8
80026392:	ee f8 ff e0 	ld.w	r8,r7[-32]
80026396:	f2 08 01 08 	sub	r8,r9,r8
8002639a:	a3 58       	asr	r8,0x3
8002639c:	ef 48 ff f0 	st.w	r7[-16],r8
800263a0:	c1 08       	rjmp	800263c0 <flashc_memset64+0x2bc>
      *dest.u64ptr++ = source.u64;
800263a2:	ee fa ff e0 	ld.w	r10,r7[-32]
800263a6:	ee e8 ff d8 	ld.d	r8,r7[-40]
800263aa:	f4 e9 00 00 	st.d	r10[0],r8
800263ae:	f4 c8 ff f8 	sub	r8,r10,-8
800263b2:	ef 48 ff e0 	st.w	r7[-32],r8
        }
      }
    }

    // Write the source data to the page buffer with 64-bit alignment.
    for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
800263b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800263ba:	20 18       	sub	r8,1
800263bc:	ef 48 ff f0 	st.w	r7[-16],r8
800263c0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800263c4:	58 08       	cp.w	r8,0
800263c6:	ce e1       	brne	800263a2 <flashc_memset64+0x29e>
      *dest.u64ptr++ = source.u64;

    // If the current destination page has an incomplete end...
    if (incomplete_flash_page_end)
800263c8:	ef 39 ff eb 	ld.ub	r9,r7[-21]
800263cc:	30 08       	mov	r8,0
800263ce:	f0 09 18 00 	cp.b	r9,r8
800263d2:	c4 70       	breq	80026460 <flashc_memset64+0x35c>
    {
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      {
        tmp.u8ptr = (volatile U8 *)dest_end.u8ptr;
800263d4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800263d8:	ef 48 ff a8 	st.w	r7[-88],r8

        // If end of destination is not 64-bit aligned...
        if (!Test_align((U32)dest_end.u8ptr, sizeof(U64)))
800263dc:	ee f8 ff d4 	ld.w	r8,r7[-44]
800263e0:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800263e4:	c3 80       	breq	80026454 <flashc_memset64+0x350>
        {
          // Fill the end of the flash double-word buffer with the current flash page data.
          for (i = Get_align((U32)dest_end.u8ptr, sizeof(U64)); i < sizeof(U64); i++)
800263e6:	ee f8 ff d4 	ld.w	r8,r7[-44]
800263ea:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800263ee:	ef 48 ff f0 	st.w	r7[-16],r8
800263f2:	c1 38       	rjmp	80026418 <flashc_memset64+0x314>
            flash_dword.u8[i] = *tmp.u8ptr++;
800263f4:	ee fa ff f0 	ld.w	r10,r7[-16]
800263f8:	ee f8 ff a8 	ld.w	r8,r7[-88]
800263fc:	11 89       	ld.ub	r9,r8[0x0]
800263fe:	5c 59       	castu.b	r9
80026400:	ee 0a 00 0a 	add	r10,r7,r10
80026404:	f5 69 ff ac 	st.b	r10[-84],r9
80026408:	2f f8       	sub	r8,-1
8002640a:	ef 48 ff a8 	st.w	r7[-88],r8

        // If end of destination is not 64-bit aligned...
        if (!Test_align((U32)dest_end.u8ptr, sizeof(U64)))
        {
          // Fill the end of the flash double-word buffer with the current flash page data.
          for (i = Get_align((U32)dest_end.u8ptr, sizeof(U64)); i < sizeof(U64); i++)
8002640e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026412:	2f f8       	sub	r8,-1
80026414:	ef 48 ff f0 	st.w	r7[-16],r8
80026418:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002641c:	58 78       	cp.w	r8,7
8002641e:	fe 98 ff eb 	brls	800263f4 <flashc_memset64+0x2f0>
            flash_dword.u8[i] = *tmp.u8ptr++;

          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
80026422:	ee fa ff e0 	ld.w	r10,r7[-32]
80026426:	ee e8 ff ac 	ld.d	r8,r7[-84]
8002642a:	f4 e9 00 00 	st.d	r10[0],r8
8002642e:	f4 c8 ff f8 	sub	r8,r10,-8
80026432:	ef 48 ff e0 	st.w	r7[-32],r8
        }

        // Fill the end of the page buffer with the current flash page data.
        for (; !Test_align((U32)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++)
80026436:	c1 08       	rjmp	80026456 <flashc_memset64+0x352>
          *tmp.u64ptr = *tmp.u64ptr;
80026438:	ee fa ff a8 	ld.w	r10,r7[-88]
8002643c:	ee f8 ff a8 	ld.w	r8,r7[-88]
80026440:	f0 e8 00 00 	ld.d	r8,r8[0]
80026444:	f4 e9 00 00 	st.d	r10[0],r8
          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
        }

        // Fill the end of the page buffer with the current flash page data.
        for (; !Test_align((U32)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++)
80026448:	ee f8 ff a8 	ld.w	r8,r7[-88]
8002644c:	2f 88       	sub	r8,-8
8002644e:	ef 48 ff a8 	st.w	r7[-88],r8
80026452:	c0 28       	rjmp	80026456 <flashc_memset64+0x352>
80026454:	d7 03       	nop
80026456:	ee f8 ff a8 	ld.w	r8,r7[-88]
8002645a:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
8002645e:	ce d1       	brne	80026438 <flashc_memset64+0x334>
          *tmp.u64ptr = *tmp.u64ptr;
      }
    }

    // If the current flash page is in the flash array...
    if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE)
80026460:	ee f8 ff e0 	ld.w	r8,r7[-32]
80026464:	fc 19 80 80 	movh	r9,0x8080
80026468:	12 38       	cp.w	r8,r9
8002646a:	e0 8b 00 2c 	brhi	800264c2 <flashc_memset64+0x3be>
    {
      // Erase the current page if requested and write it from the page buffer.
      if (erase)
8002646e:	ef 39 ff 94 	ld.ub	r9,r7[-108]
80026472:	30 08       	mov	r8,0
80026474:	f0 09 18 00 	cp.b	r9,r8
80026478:	c0 e0       	breq	80026494 <flashc_memset64+0x390>
      {
        flashc_erase_page(-1, false);
8002647a:	30 0b       	mov	r11,0
8002647c:	3f fc       	mov	r12,-1
8002647e:	f0 16 00 a2 	mcall	r6[648]
        error_status |= flashc_error_status;
80026482:	ec f8 00 54 	ld.w	r8,r6[84]
80026486:	70 08       	ld.w	r8,r8[0x0]
80026488:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002648c:	f3 e8 10 08 	or	r8,r9,r8
80026490:	ef 48 ff ec 	st.w	r7[-20],r8
      }
      flashc_write_page(-1);
80026494:	3f fc       	mov	r12,-1
80026496:	f0 16 00 f5 	mcall	r6[980]
      error_status |= flashc_error_status;
8002649a:	ec f8 00 54 	ld.w	r8,r6[84]
8002649e:	70 08       	ld.w	r8,r8[0x0]
800264a0:	ee f9 ff ec 	ld.w	r9,r7[-20]
800264a4:	f3 e8 10 08 	or	r8,r9,r8
800264a8:	ef 48 ff ec 	st.w	r7[-20],r8

      // If the end of the flash array is reached, go to the User page.
      if (dest.u8ptr >= flash_array_end.u8ptr)
800264ac:	ee f9 ff e0 	ld.w	r9,r7[-32]
800264b0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800264b4:	10 39       	cp.w	r9,r8
800264b6:	c2 33       	brcs	800264fc <flashc_memset64+0x3f8>
        dest.u8ptr = AVR32_FLASHC_USER_PAGE;
800264b8:	fc 18 80 80 	movh	r8,0x8080
800264bc:	ef 48 ff e0 	st.w	r7[-32],r8
800264c0:	c1 e8       	rjmp	800264fc <flashc_memset64+0x3f8>
    }
    // If the current flash page is the User page...
    else
    {
      // Erase the User page if requested and write it from the page buffer.
      if (erase)
800264c2:	ef 39 ff 94 	ld.ub	r9,r7[-108]
800264c6:	30 08       	mov	r8,0
800264c8:	f0 09 18 00 	cp.b	r9,r8
800264cc:	c0 d0       	breq	800264e6 <flashc_memset64+0x3e2>
      {
        flashc_erase_user_page(false);
800264ce:	30 0c       	mov	r12,0
800264d0:	f0 16 01 2b 	mcall	r6[1196]
        error_status |= flashc_error_status;
800264d4:	ec f8 00 54 	ld.w	r8,r6[84]
800264d8:	70 08       	ld.w	r8,r8[0x0]
800264da:	ee f9 ff ec 	ld.w	r9,r7[-20]
800264de:	f3 e8 10 08 	or	r8,r9,r8
800264e2:	ef 48 ff ec 	st.w	r7[-20],r8
      }
      flashc_write_user_page();
800264e6:	f0 16 00 f4 	mcall	r6[976]
      error_status |= flashc_error_status;
800264ea:	ec f8 00 54 	ld.w	r8,r6[84]
800264ee:	70 08       	ld.w	r8,r8[0x0]
800264f0:	ee f9 ff ec 	ld.w	r9,r7[-20]
800264f4:	f3 e8 10 08 	or	r8,r9,r8
800264f8:	ef 48 ff ec 	st.w	r7[-20],r8
  dest_end.u16ptr = (U16 *)Align_down((U32)dest_end.u8ptr, sizeof(U16));
  dest_end.u32ptr = (U32 *)Align_down((U32)dest_end.u16ptr, sizeof(U32));
  dest_end.u64ptr = (U64 *)Align_down((U32)dest_end.u32ptr, sizeof(U64));

  // While end of destination is not reached...
  while (dest.u8ptr < dest_end.u8ptr)
800264fc:	ee f9 ff e0 	ld.w	r9,r7[-32]
80026500:	ee f8 ff d4 	ld.w	r8,r7[-44]
80026504:	10 39       	cp.w	r9,r8
80026506:	fe 93 fe ad 	brlo	80026260 <flashc_memset64+0x15c>
      error_status |= flashc_error_status;
    }
  }

  // Update the FLASHC error status.
  flashc_error_status = error_status;
8002650a:	ec f8 00 54 	ld.w	r8,r6[84]
8002650e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80026512:	91 09       	st.w	r8[0x0],r9

  // Return the initial destination pointer as the standard memset function does.
  return dst;
80026514:	ee f8 ff a4 	ld.w	r8,r7[-92]
}
80026518:	10 9c       	mov	r12,r8
8002651a:	2e 5d       	sub	sp,-108
8002651c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026520:	80 02       	ld.sh	r2,r0[0x0]
80026522:	5f 94       	srgt	r4

80026524 <flashc_memcpy>:


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
80026524:	eb cd 40 c0 	pushm	r6-r7,lr
80026528:	1a 97       	mov	r7,sp
8002652a:	21 ad       	sub	sp,104
8002652c:	fe f6 05 80 	ld.w	r6,pc[1408]
80026530:	1e 26       	rsub	r6,pc
80026532:	ef 4c ff a4 	st.w	r7[-92],r12
80026536:	ef 4b ff a0 	st.w	r7[-96],r11
8002653a:	ef 4a ff 9c 	st.w	r7[-100],r10
8002653e:	12 98       	mov	r8,r9
80026540:	ef 68 ff 98 	st.b	r7[-104],r8
  UnionCPtr source;
  StructCVPtr dest_end;
  UnionCVPtr flash_page_source_end;
  bool incomplete_flash_page_end;
  Union64 flash_dword;
  bool flash_dword_pending = false;
80026544:	30 08       	mov	r8,0
80026546:	ef 68 ff e7 	st.b	r7[-25],r8
  UnionVPtr tmp;
  unsigned int error_status = 0;
8002654a:	30 08       	mov	r8,0
8002654c:	ef 48 ff e8 	st.w	r7[-24],r8
  unsigned int i, j;

  // Reformat arguments.
  flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
80026550:	f0 16 00 c6 	mcall	r6[792]
80026554:	18 99       	mov	r9,r12
80026556:	fc 18 80 00 	movh	r8,0x8000
8002655a:	f2 08 00 08 	add	r8,r9,r8
8002655e:	ef 48 ff e0 	st.w	r7[-32],r8
  dest.u8ptr = dst;
80026562:	ee f8 ff a4 	ld.w	r8,r7[-92]
80026566:	ef 48 ff dc 	st.w	r7[-36],r8
  source.u8ptr = src;
8002656a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8002656e:	ef 48 ff d8 	st.w	r7[-40],r8
  dest_end.u8ptr = dest.u8ptr + nbytes;
80026572:	ee f9 ff dc 	ld.w	r9,r7[-36]
80026576:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8002657a:	f2 08 00 08 	add	r8,r9,r8
8002657e:	ef 48 ff d4 	st.w	r7[-44],r8

  // If destination is outside flash, go to next flash page if any.
  if (dest.u8ptr < AVR32_FLASH)
80026582:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026586:	e0 6a ff ff 	mov	r10,65535
8002658a:	ea 1a 7f ff 	orh	r10,0x7fff
8002658e:	14 38       	cp.w	r8,r10
80026590:	e0 8b 00 13 	brhi	800265b6 <flashc_memcpy+0x92>
  {
    source.u8ptr += AVR32_FLASH - dest.u8ptr;
80026594:	ee f9 ff d8 	ld.w	r9,r7[-40]
80026598:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002659c:	fc 1a 80 00 	movh	r10,0x8000
800265a0:	f4 08 01 08 	sub	r8,r10,r8
800265a4:	f2 08 00 08 	add	r8,r9,r8
800265a8:	ef 48 ff d8 	st.w	r7[-40],r8
    dest.u8ptr = AVR32_FLASH;
800265ac:	fc 18 80 00 	movh	r8,0x8000
800265b0:	ef 48 ff dc 	st.w	r7[-36],r8
800265b4:	c2 18       	rjmp	800265f6 <flashc_memcpy+0xd2>
  }
  else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE)
800265b6:	ee f9 ff e0 	ld.w	r9,r7[-32]
800265ba:	ee f8 ff dc 	ld.w	r8,r7[-36]
800265be:	10 39       	cp.w	r9,r8
800265c0:	e0 8b 00 1b 	brhi	800265f6 <flashc_memcpy+0xd2>
800265c4:	ee f8 ff dc 	ld.w	r8,r7[-36]
800265c8:	e0 69 ff ff 	mov	r9,65535
800265cc:	ea 19 80 7f 	orh	r9,0x807f
800265d0:	12 38       	cp.w	r8,r9
800265d2:	e0 8b 00 12 	brhi	800265f6 <flashc_memcpy+0xd2>
  {
    source.u8ptr += AVR32_FLASHC_USER_PAGE - dest.u8ptr;
800265d6:	ee f9 ff d8 	ld.w	r9,r7[-40]
800265da:	ee f8 ff dc 	ld.w	r8,r7[-36]
800265de:	fc 1a 80 80 	movh	r10,0x8080
800265e2:	f4 08 01 08 	sub	r8,r10,r8
800265e6:	f2 08 00 08 	add	r8,r9,r8
800265ea:	ef 48 ff d8 	st.w	r7[-40],r8
    dest.u8ptr = AVR32_FLASHC_USER_PAGE;
800265ee:	fc 18 80 80 	movh	r8,0x8080
800265f2:	ef 48 ff dc 	st.w	r7[-36],r8
  }

  // If end of destination is outside flash, move it to the end of the previous flash page if any.
  if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE)
800265f6:	ee f8 ff d4 	ld.w	r8,r7[-44]
800265fa:	e0 69 02 00 	mov	r9,512
800265fe:	ea 19 80 80 	orh	r9,0x8080
80026602:	12 38       	cp.w	r8,r9
80026604:	e0 88 00 09 	brls	80026616 <flashc_memcpy+0xf2>
  {
    dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
80026608:	e0 68 02 00 	mov	r8,512
8002660c:	ea 18 80 80 	orh	r8,0x8080
80026610:	ef 48 ff d4 	st.w	r7[-44],r8
80026614:	c1 38       	rjmp	8002663a <flashc_memcpy+0x116>
  }
  else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr)
80026616:	ee f8 ff d4 	ld.w	r8,r7[-44]
8002661a:	fc 1a 80 80 	movh	r10,0x8080
8002661e:	14 38       	cp.w	r8,r10
80026620:	e0 8b 00 0d 	brhi	8002663a <flashc_memcpy+0x116>
80026624:	ee f9 ff d4 	ld.w	r9,r7[-44]
80026628:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002662c:	10 39       	cp.w	r9,r8
8002662e:	e0 88 00 06 	brls	8002663a <flashc_memcpy+0x116>
  {
    dest_end.u8ptr = flash_array_end.u8ptr;
80026632:	ee f8 ff e0 	ld.w	r8,r7[-32]
80026636:	ef 48 ff d4 	st.w	r7[-44],r8
  }

  // Align each end of destination pointer with its natural boundary.
  dest_end.u16ptr = (U16 *)Align_down((U32)dest_end.u8ptr, sizeof(U16));
8002663a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8002663e:	a1 c8       	cbr	r8,0x0
80026640:	ef 48 ff cc 	st.w	r7[-52],r8
  dest_end.u32ptr = (U32 *)Align_down((U32)dest_end.u16ptr, sizeof(U32));
80026644:	ee f8 ff cc 	ld.w	r8,r7[-52]
80026648:	e0 18 ff fc 	andl	r8,0xfffc
8002664c:	ef 48 ff c4 	st.w	r7[-60],r8
  dest_end.u64ptr = (U64 *)Align_down((U32)dest_end.u32ptr, sizeof(U64));
80026650:	ee f8 ff c4 	ld.w	r8,r7[-60]
80026654:	e0 18 ff f8 	andl	r8,0xfff8
80026658:	ef 48 ff bc 	st.w	r7[-68],r8

  // While end of destination is not reached...
  while (dest.u8ptr < dest_end.u8ptr)
8002665c:	e0 8f 02 16 	bral	80026a88 <flashc_memcpy+0x564>
  {
    // Clear the page buffer in order to prepare data for a flash page write.
    flashc_clear_page_buffer();
80026660:	f0 16 01 26 	mcall	r6[1176]
    error_status |= flashc_error_status;
80026664:	ec f8 00 54 	ld.w	r8,r6[84]
80026668:	70 08       	ld.w	r8,r8[0x0]
8002666a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002666e:	f3 e8 10 08 	or	r8,r9,r8
80026672:	ef 48 ff e8 	st.w	r7[-24],r8

    // Determine where the source data will end in the current flash page.
    flash_page_source_end.u64ptr =
      (U64 *)min((U32)dest_end.u64ptr,
80026676:	ee f8 ff bc 	ld.w	r8,r7[-68]
8002667a:	ef 48 ff f8 	st.w	r7[-8],r8
8002667e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026682:	e0 18 fe 00 	andl	r8,0xfe00
80026686:	f0 c8 fe 00 	sub	r8,r8,-512
8002668a:	ef 48 ff fc 	st.w	r7[-4],r8
8002668e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026692:	ee f9 ff fc 	ld.w	r9,r7[-4]
80026696:	f0 09 0d 48 	min	r8,r8,r9
8002669a:	ef 48 ff f4 	st.w	r7[-12],r8
8002669e:	ee f8 ff f4 	ld.w	r8,r7[-12]
    // Clear the page buffer in order to prepare data for a flash page write.
    flashc_clear_page_buffer();
    error_status |= flashc_error_status;

    // Determine where the source data will end in the current flash page.
    flash_page_source_end.u64ptr =
800266a2:	ef 48 ff b4 	st.w	r7[-76],r8
      (U64 *)min((U32)dest_end.u64ptr,
                 Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

    // Determine if the current destination page has an incomplete end.
    incomplete_flash_page_end = (Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
800266a6:	ee f8 ff dc 	ld.w	r8,r7[-36]
800266aa:	10 9a       	mov	r10,r8
800266ac:	e0 1a fe 00 	andl	r10,0xfe00
                                 Align_down((U32)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));
800266b0:	ee f8 ff d4 	ld.w	r8,r7[-44]
800266b4:	10 99       	mov	r9,r8
800266b6:	e0 19 fe 00 	andl	r9,0xfe00
    flash_page_source_end.u64ptr =
      (U64 *)min((U32)dest_end.u64ptr,
                 Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

    // Determine if the current destination page has an incomplete end.
    incomplete_flash_page_end = (Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
800266ba:	30 18       	mov	r8,1
800266bc:	12 3a       	cp.w	r10,r9
800266be:	c0 22       	brcc	800266c2 <flashc_memcpy+0x19e>
800266c0:	30 08       	mov	r8,0
800266c2:	ef 68 ff e6 	st.b	r7[-26],r8
                                 Align_down((U32)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

    // If destination does not point to the beginning of the current flash page...
    if (!Test_align((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE))
800266c6:	ee f8 ff dc 	ld.w	r8,r7[-36]
800266ca:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800266ce:	c7 20       	breq	800267b2 <flashc_memcpy+0x28e>
    {
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
800266d0:	ee f8 ff dc 	ld.w	r8,r7[-36]
800266d4:	e0 18 fe 00 	andl	r8,0xfe00
800266d8:	ef 48 ff a8 	st.w	r7[-88],r8
800266dc:	c0 e8       	rjmp	800266f8 <flashc_memcpy+0x1d4>
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
        *tmp.u64ptr = *tmp.u64ptr;
800266de:	ee fa ff a8 	ld.w	r10,r7[-88]
800266e2:	ee f8 ff a8 	ld.w	r8,r7[-88]
800266e6:	f0 e8 00 00 	ld.d	r8,r8[0]
800266ea:	f4 e9 00 00 	st.d	r10[0],r8
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
800266ee:	ee f8 ff a8 	ld.w	r8,r7[-88]
800266f2:	2f 88       	sub	r8,-8
800266f4:	ef 48 ff a8 	st.w	r7[-88],r8
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
800266f8:	ee f9 ff a8 	ld.w	r9,r7[-88]
800266fc:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026700:	e0 18 ff f8 	andl	r8,0xfff8
    {
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80026704:	10 39       	cp.w	r9,r8
80026706:	ce c3       	brcs	800266de <flashc_memcpy+0x1ba>
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
        *tmp.u64ptr = *tmp.u64ptr;

      // If destination is not 64-bit aligned...
      if (!Test_align((U32)dest.u8ptr, sizeof(U64)))
80026708:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002670c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80026710:	c5 10       	breq	800267b2 <flashc_memcpy+0x28e>
        // Fill the beginning of the flash double-word buffer with the current
        // flash page data.
        // This is required by the hardware, even if page erase is not
        // requested, in order to be able to write successfully to erased parts
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
80026712:	30 08       	mov	r8,0
80026714:	ef 48 ff ec 	st.w	r7[-20],r8
80026718:	c1 38       	rjmp	8002673e <flashc_memcpy+0x21a>
          flash_dword.u8[i] = *tmp.u8ptr++;
8002671a:	ee fa ff ec 	ld.w	r10,r7[-20]
8002671e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80026722:	11 89       	ld.ub	r9,r8[0x0]
80026724:	5c 59       	castu.b	r9
80026726:	ee 0a 00 0a 	add	r10,r7,r10
8002672a:	f5 69 ff ac 	st.b	r10[-84],r9
8002672e:	2f f8       	sub	r8,-1
80026730:	ef 48 ff a8 	st.w	r7[-88],r8
        // Fill the beginning of the flash double-word buffer with the current
        // flash page data.
        // This is required by the hardware, even if page erase is not
        // requested, in order to be able to write successfully to erased parts
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
80026734:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026738:	2f f8       	sub	r8,-1
8002673a:	ef 48 ff ec 	st.w	r7[-20],r8
8002673e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026742:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
80026746:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002674a:	10 39       	cp.w	r9,r8
8002674c:	fe 9b ff e7 	brhi	8002671a <flashc_memcpy+0x1f6>
          flash_dword.u8[i] = *tmp.u8ptr++;

        // Fill the end of the flash double-word buffer with the source data.
        for (; i < sizeof(U64); i++)
80026750:	c1 28       	rjmp	80026774 <flashc_memcpy+0x250>
          flash_dword.u8[i] = *source.u8ptr++;
80026752:	ee fa ff ec 	ld.w	r10,r7[-20]
80026756:	ee f8 ff d8 	ld.w	r8,r7[-40]
8002675a:	11 89       	ld.ub	r9,r8[0x0]
8002675c:	ee 0a 00 0a 	add	r10,r7,r10
80026760:	f5 69 ff ac 	st.b	r10[-84],r9
80026764:	2f f8       	sub	r8,-1
80026766:	ef 48 ff d8 	st.w	r7[-40],r8
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
          flash_dword.u8[i] = *tmp.u8ptr++;

        // Fill the end of the flash double-word buffer with the source data.
        for (; i < sizeof(U64); i++)
8002676a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002676e:	2f f8       	sub	r8,-1
80026770:	ef 48 ff ec 	st.w	r7[-20],r8
80026774:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026778:	58 78       	cp.w	r8,7
8002677a:	fe 98 ff ec 	brls	80026752 <flashc_memcpy+0x22e>
          flash_dword.u8[i] = *source.u8ptr++;

        // Align the destination pointer with its 64-bit boundary.
        dest.u64ptr = (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
8002677e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026782:	e0 18 ff f8 	andl	r8,0xfff8
80026786:	ef 48 ff dc 	st.w	r7[-36],r8

        // If the current destination double-word is not the last one...
        if (dest.u64ptr < dest_end.u64ptr)
8002678a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8002678e:	ee f8 ff bc 	ld.w	r8,r7[-68]
80026792:	10 39       	cp.w	r9,r8
80026794:	c0 c2       	brcc	800267ac <flashc_memcpy+0x288>
        {
          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
80026796:	ee fa ff dc 	ld.w	r10,r7[-36]
8002679a:	ee e8 ff ac 	ld.d	r8,r7[-84]
8002679e:	f4 e9 00 00 	st.d	r10[0],r8
800267a2:	f4 c8 ff f8 	sub	r8,r10,-8
800267a6:	ef 48 ff dc 	st.w	r7[-36],r8
800267aa:	c0 48       	rjmp	800267b2 <flashc_memcpy+0x28e>
        }
        // If the current destination double-word is the last one, the flash
        // double-word buffer must be kept for later.
        else flash_dword_pending = true;
800267ac:	30 18       	mov	r8,1
800267ae:	ef 68 ff e7 	st.b	r7[-25],r8
      }
    }

    // Read the source data with the maximal possible alignment and write it to
    // the page buffer with 64-bit alignment.
    switch (Get_align((U32)source.u8ptr, sizeof(U32)))
800267b2:	ee f8 ff d8 	ld.w	r8,r7[-40]
800267b6:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800267ba:	c0 40       	breq	800267c2 <flashc_memcpy+0x29e>
800267bc:	58 28       	cp.w	r8,2
800267be:	c2 70       	breq	8002680c <flashc_memcpy+0x2e8>
800267c0:	c6 18       	rjmp	80026882 <flashc_memcpy+0x35e>
    {
    case 0:
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
800267c2:	ee f8 ff b4 	ld.w	r8,r7[-76]
800267c6:	10 99       	mov	r9,r8
800267c8:	ee f8 ff dc 	ld.w	r8,r7[-36]
800267cc:	f2 08 01 08 	sub	r8,r9,r8
800267d0:	a3 58       	asr	r8,0x3
800267d2:	ef 48 ff ec 	st.w	r7[-20],r8
800267d6:	c1 68       	rjmp	80026802 <flashc_memcpy+0x2de>
        *dest.u64ptr++ = *source.u64ptr++;
800267d8:	ee fb ff dc 	ld.w	r11,r7[-36]
800267dc:	ee fa ff d8 	ld.w	r10,r7[-40]
800267e0:	f4 e8 00 00 	ld.d	r8,r10[0]
800267e4:	f6 e9 00 00 	st.d	r11[0],r8
800267e8:	f6 c8 ff f8 	sub	r8,r11,-8
800267ec:	ef 48 ff dc 	st.w	r7[-36],r8
800267f0:	f4 c8 ff f8 	sub	r8,r10,-8
800267f4:	ef 48 ff d8 	st.w	r7[-40],r8
    // Read the source data with the maximal possible alignment and write it to
    // the page buffer with 64-bit alignment.
    switch (Get_align((U32)source.u8ptr, sizeof(U32)))
    {
    case 0:
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
800267f8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800267fc:	20 18       	sub	r8,1
800267fe:	ef 48 ff ec 	st.w	r7[-20],r8
80026802:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026806:	58 08       	cp.w	r8,0
80026808:	ce 81       	brne	800267d8 <flashc_memcpy+0x2b4>
        *dest.u64ptr++ = *source.u64ptr++;
      break;
8002680a:	c7 48       	rjmp	800268f2 <flashc_memcpy+0x3ce>

    case sizeof(U16):
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
8002680c:	ee f8 ff b4 	ld.w	r8,r7[-76]
80026810:	10 99       	mov	r9,r8
80026812:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026816:	f2 08 01 08 	sub	r8,r9,r8
8002681a:	a3 58       	asr	r8,0x3
8002681c:	ef 48 ff ec 	st.w	r7[-20],r8
80026820:	c2 c8       	rjmp	80026878 <flashc_memcpy+0x354>
      {
        for (j = 0; j < sizeof(U64) / sizeof(U16); j++) flash_dword.u16[j] = *source.u16ptr++;
80026822:	30 08       	mov	r8,0
80026824:	ef 48 ff f0 	st.w	r7[-16],r8
80026828:	c1 48       	rjmp	80026850 <flashc_memcpy+0x32c>
8002682a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002682e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80026832:	92 0a       	ld.sh	r10,r9[0x0]
80026834:	a1 78       	lsl	r8,0x1
80026836:	ee 08 00 08 	add	r8,r7,r8
8002683a:	f1 5a ff ac 	st.h	r8[-84],r10
8002683e:	f2 c8 ff fe 	sub	r8,r9,-2
80026842:	ef 48 ff d8 	st.w	r7[-40],r8
80026846:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002684a:	2f f8       	sub	r8,-1
8002684c:	ef 48 ff f0 	st.w	r7[-16],r8
80026850:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026854:	58 38       	cp.w	r8,3
80026856:	fe 98 ff ea 	brls	8002682a <flashc_memcpy+0x306>
        *dest.u64ptr++ = flash_dword.u64;
8002685a:	ee fa ff dc 	ld.w	r10,r7[-36]
8002685e:	ee e8 ff ac 	ld.d	r8,r7[-84]
80026862:	f4 e9 00 00 	st.d	r10[0],r8
80026866:	f4 c8 ff f8 	sub	r8,r10,-8
8002686a:	ef 48 ff dc 	st.w	r7[-36],r8
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
        *dest.u64ptr++ = *source.u64ptr++;
      break;

    case sizeof(U16):
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
8002686e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026872:	20 18       	sub	r8,1
80026874:	ef 48 ff ec 	st.w	r7[-20],r8
80026878:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002687c:	58 08       	cp.w	r8,0
8002687e:	cd 21       	brne	80026822 <flashc_memcpy+0x2fe>
      {
        for (j = 0; j < sizeof(U64) / sizeof(U16); j++) flash_dword.u16[j] = *source.u16ptr++;
        *dest.u64ptr++ = flash_dword.u64;
      }
      break;
80026880:	c3 98       	rjmp	800268f2 <flashc_memcpy+0x3ce>

    default:
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
80026882:	ee f8 ff b4 	ld.w	r8,r7[-76]
80026886:	10 99       	mov	r9,r8
80026888:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002688c:	f2 08 01 08 	sub	r8,r9,r8
80026890:	a3 58       	asr	r8,0x3
80026892:	ef 48 ff ec 	st.w	r7[-20],r8
80026896:	c2 a8       	rjmp	800268ea <flashc_memcpy+0x3c6>
      {
        for (j = 0; j < sizeof(U64); j++) flash_dword.u8[j] = *source.u8ptr++;
80026898:	30 08       	mov	r8,0
8002689a:	ef 48 ff f0 	st.w	r7[-16],r8
8002689e:	c1 28       	rjmp	800268c2 <flashc_memcpy+0x39e>
800268a0:	ee fa ff f0 	ld.w	r10,r7[-16]
800268a4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800268a8:	11 89       	ld.ub	r9,r8[0x0]
800268aa:	ee 0a 00 0a 	add	r10,r7,r10
800268ae:	f5 69 ff ac 	st.b	r10[-84],r9
800268b2:	2f f8       	sub	r8,-1
800268b4:	ef 48 ff d8 	st.w	r7[-40],r8
800268b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800268bc:	2f f8       	sub	r8,-1
800268be:	ef 48 ff f0 	st.w	r7[-16],r8
800268c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800268c6:	58 78       	cp.w	r8,7
800268c8:	fe 98 ff ec 	brls	800268a0 <flashc_memcpy+0x37c>
        *dest.u64ptr++ = flash_dword.u64;
800268cc:	ee fa ff dc 	ld.w	r10,r7[-36]
800268d0:	ee e8 ff ac 	ld.d	r8,r7[-84]
800268d4:	f4 e9 00 00 	st.d	r10[0],r8
800268d8:	f4 c8 ff f8 	sub	r8,r10,-8
800268dc:	ef 48 ff dc 	st.w	r7[-36],r8
        *dest.u64ptr++ = flash_dword.u64;
      }
      break;

    default:
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
800268e0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800268e4:	20 18       	sub	r8,1
800268e6:	ef 48 ff ec 	st.w	r7[-20],r8
800268ea:	ee f8 ff ec 	ld.w	r8,r7[-20]
800268ee:	58 08       	cp.w	r8,0
800268f0:	cd 41       	brne	80026898 <flashc_memcpy+0x374>
        *dest.u64ptr++ = flash_dword.u64;
      }
    }

    // If the current destination page has an incomplete end...
    if (incomplete_flash_page_end)
800268f2:	ef 39 ff e6 	ld.ub	r9,r7[-26]
800268f6:	30 08       	mov	r8,0
800268f8:	f0 09 18 00 	cp.b	r9,r8
800268fc:	c6 c0       	breq	800269d4 <flashc_memcpy+0x4b0>
    {
      // If the flash double-word buffer is in use, do not initialize it.
      if (flash_dword_pending) i = Get_align((U32)dest_end.u8ptr, sizeof(U64));
800268fe:	ef 39 ff e7 	ld.ub	r9,r7[-25]
80026902:	30 08       	mov	r8,0
80026904:	f0 09 18 00 	cp.b	r9,r8
80026908:	c0 80       	breq	80026918 <flashc_memcpy+0x3f4>
8002690a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8002690e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80026912:	ef 48 ff ec 	st.w	r7[-20],r8
80026916:	c1 f8       	rjmp	80026954 <flashc_memcpy+0x430>
      // If the flash double-word buffer is free...
      else
      {
        // Fill the beginning of the flash double-word buffer with the source data.
        for (i = 0; i < Get_align((U32)dest_end.u8ptr, sizeof(U64)); i++)
80026918:	30 08       	mov	r8,0
8002691a:	ef 48 ff ec 	st.w	r7[-20],r8
8002691e:	c1 28       	rjmp	80026942 <flashc_memcpy+0x41e>
          flash_dword.u8[i] = *source.u8ptr++;
80026920:	ee fa ff ec 	ld.w	r10,r7[-20]
80026924:	ee f8 ff d8 	ld.w	r8,r7[-40]
80026928:	11 89       	ld.ub	r9,r8[0x0]
8002692a:	ee 0a 00 0a 	add	r10,r7,r10
8002692e:	f5 69 ff ac 	st.b	r10[-84],r9
80026932:	2f f8       	sub	r8,-1
80026934:	ef 48 ff d8 	st.w	r7[-40],r8
      if (flash_dword_pending) i = Get_align((U32)dest_end.u8ptr, sizeof(U64));
      // If the flash double-word buffer is free...
      else
      {
        // Fill the beginning of the flash double-word buffer with the source data.
        for (i = 0; i < Get_align((U32)dest_end.u8ptr, sizeof(U64)); i++)
80026938:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002693c:	2f f8       	sub	r8,-1
8002693e:	ef 48 ff ec 	st.w	r7[-20],r8
80026942:	ee f8 ff d4 	ld.w	r8,r7[-44]
80026946:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
8002694a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002694e:	10 39       	cp.w	r9,r8
80026950:	fe 9b ff e8 	brhi	80026920 <flashc_memcpy+0x3fc>

      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      {
        tmp.u8ptr = (volatile U8 *)dest_end.u8ptr;
80026954:	ee f8 ff d4 	ld.w	r8,r7[-44]
80026958:	ef 48 ff a8 	st.w	r7[-88],r8

        // If end of destination is not 64-bit aligned...
        if (!Test_align((U32)dest_end.u8ptr, sizeof(U64)))
8002695c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80026960:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80026964:	c3 20       	breq	800269c8 <flashc_memcpy+0x4a4>
        {
          // Fill the end of the flash double-word buffer with the current flash page data.
          for (; i < sizeof(U64); i++)
80026966:	c1 38       	rjmp	8002698c <flashc_memcpy+0x468>
            flash_dword.u8[i] = *tmp.u8ptr++;
80026968:	ee fa ff ec 	ld.w	r10,r7[-20]
8002696c:	ee f8 ff a8 	ld.w	r8,r7[-88]
80026970:	11 89       	ld.ub	r9,r8[0x0]
80026972:	5c 59       	castu.b	r9
80026974:	ee 0a 00 0a 	add	r10,r7,r10
80026978:	f5 69 ff ac 	st.b	r10[-84],r9
8002697c:	2f f8       	sub	r8,-1
8002697e:	ef 48 ff a8 	st.w	r7[-88],r8

        // If end of destination is not 64-bit aligned...
        if (!Test_align((U32)dest_end.u8ptr, sizeof(U64)))
        {
          // Fill the end of the flash double-word buffer with the current flash page data.
          for (; i < sizeof(U64); i++)
80026982:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026986:	2f f8       	sub	r8,-1
80026988:	ef 48 ff ec 	st.w	r7[-20],r8
8002698c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026990:	58 78       	cp.w	r8,7
80026992:	fe 98 ff eb 	brls	80026968 <flashc_memcpy+0x444>
            flash_dword.u8[i] = *tmp.u8ptr++;

          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
80026996:	ee fa ff dc 	ld.w	r10,r7[-36]
8002699a:	ee e8 ff ac 	ld.d	r8,r7[-84]
8002699e:	f4 e9 00 00 	st.d	r10[0],r8
800269a2:	f4 c8 ff f8 	sub	r8,r10,-8
800269a6:	ef 48 ff dc 	st.w	r7[-36],r8
        }

        // Fill the end of the page buffer with the current flash page data.
        for (; !Test_align((U32)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++)
800269aa:	c1 08       	rjmp	800269ca <flashc_memcpy+0x4a6>
          *tmp.u64ptr = *tmp.u64ptr;
800269ac:	ee fa ff a8 	ld.w	r10,r7[-88]
800269b0:	ee f8 ff a8 	ld.w	r8,r7[-88]
800269b4:	f0 e8 00 00 	ld.d	r8,r8[0]
800269b8:	f4 e9 00 00 	st.d	r10[0],r8
          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
        }

        // Fill the end of the page buffer with the current flash page data.
        for (; !Test_align((U32)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++)
800269bc:	ee f8 ff a8 	ld.w	r8,r7[-88]
800269c0:	2f 88       	sub	r8,-8
800269c2:	ef 48 ff a8 	st.w	r7[-88],r8
800269c6:	c0 28       	rjmp	800269ca <flashc_memcpy+0x4a6>
800269c8:	d7 03       	nop
800269ca:	ee f8 ff a8 	ld.w	r8,r7[-88]
800269ce:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
800269d2:	ce d1       	brne	800269ac <flashc_memcpy+0x488>
          *tmp.u64ptr = *tmp.u64ptr;
      }
    }

    // If the current flash page is in the flash array...
    if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE)
800269d4:	ee f8 ff dc 	ld.w	r8,r7[-36]
800269d8:	fc 19 80 80 	movh	r9,0x8080
800269dc:	12 38       	cp.w	r8,r9
800269de:	e0 8b 00 38 	brhi	80026a4e <flashc_memcpy+0x52a>
    {
      // Erase the current page if requested and write it from the page buffer.
      if (erase)
800269e2:	ef 39 ff 98 	ld.ub	r9,r7[-104]
800269e6:	30 08       	mov	r8,0
800269e8:	f0 09 18 00 	cp.b	r9,r8
800269ec:	c0 e0       	breq	80026a08 <flashc_memcpy+0x4e4>
      {
        flashc_erase_page(-1, false);
800269ee:	30 0b       	mov	r11,0
800269f0:	3f fc       	mov	r12,-1
800269f2:	f0 16 00 a2 	mcall	r6[648]
        error_status |= flashc_error_status;
800269f6:	ec f8 00 54 	ld.w	r8,r6[84]
800269fa:	70 08       	ld.w	r8,r8[0x0]
800269fc:	ee f9 ff e8 	ld.w	r9,r7[-24]
80026a00:	f3 e8 10 08 	or	r8,r9,r8
80026a04:	ef 48 ff e8 	st.w	r7[-24],r8
      }
      flashc_write_page(-1);
80026a08:	3f fc       	mov	r12,-1
80026a0a:	f0 16 00 f5 	mcall	r6[980]
      error_status |= flashc_error_status;
80026a0e:	ec f8 00 54 	ld.w	r8,r6[84]
80026a12:	70 08       	ld.w	r8,r8[0x0]
80026a14:	ee f9 ff e8 	ld.w	r9,r7[-24]
80026a18:	f3 e8 10 08 	or	r8,r9,r8
80026a1c:	ef 48 ff e8 	st.w	r7[-24],r8

      // If the end of the flash array is reached, go to the User page.
      if (dest.u8ptr >= flash_array_end.u8ptr)
80026a20:	ee f9 ff dc 	ld.w	r9,r7[-36]
80026a24:	ee f8 ff e0 	ld.w	r8,r7[-32]
80026a28:	10 39       	cp.w	r9,r8
80026a2a:	c2 f3       	brcs	80026a88 <flashc_memcpy+0x564>
      {
        source.u8ptr += AVR32_FLASHC_USER_PAGE - dest.u8ptr;
80026a2c:	ee f9 ff d8 	ld.w	r9,r7[-40]
80026a30:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026a34:	fc 1a 80 80 	movh	r10,0x8080
80026a38:	f4 08 01 08 	sub	r8,r10,r8
80026a3c:	f2 08 00 08 	add	r8,r9,r8
80026a40:	ef 48 ff d8 	st.w	r7[-40],r8
        dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80026a44:	fc 18 80 80 	movh	r8,0x8080
80026a48:	ef 48 ff dc 	st.w	r7[-36],r8
80026a4c:	c1 e8       	rjmp	80026a88 <flashc_memcpy+0x564>
    }
    // If the current flash page is the User page...
    else
    {
      // Erase the User page if requested and write it from the page buffer.
      if (erase)
80026a4e:	ef 39 ff 98 	ld.ub	r9,r7[-104]
80026a52:	30 08       	mov	r8,0
80026a54:	f0 09 18 00 	cp.b	r9,r8
80026a58:	c0 d0       	breq	80026a72 <flashc_memcpy+0x54e>
      {
        flashc_erase_user_page(false);
80026a5a:	30 0c       	mov	r12,0
80026a5c:	f0 16 01 2b 	mcall	r6[1196]
        error_status |= flashc_error_status;
80026a60:	ec f8 00 54 	ld.w	r8,r6[84]
80026a64:	70 08       	ld.w	r8,r8[0x0]
80026a66:	ee f9 ff e8 	ld.w	r9,r7[-24]
80026a6a:	f3 e8 10 08 	or	r8,r9,r8
80026a6e:	ef 48 ff e8 	st.w	r7[-24],r8
      }
      flashc_write_user_page();
80026a72:	f0 16 00 f4 	mcall	r6[976]
      error_status |= flashc_error_status;
80026a76:	ec f8 00 54 	ld.w	r8,r6[84]
80026a7a:	70 08       	ld.w	r8,r8[0x0]
80026a7c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80026a80:	f3 e8 10 08 	or	r8,r9,r8
80026a84:	ef 48 ff e8 	st.w	r7[-24],r8
  dest_end.u16ptr = (U16 *)Align_down((U32)dest_end.u8ptr, sizeof(U16));
  dest_end.u32ptr = (U32 *)Align_down((U32)dest_end.u16ptr, sizeof(U32));
  dest_end.u64ptr = (U64 *)Align_down((U32)dest_end.u32ptr, sizeof(U64));

  // While end of destination is not reached...
  while (dest.u8ptr < dest_end.u8ptr)
80026a88:	ee f9 ff dc 	ld.w	r9,r7[-36]
80026a8c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80026a90:	10 39       	cp.w	r9,r8
80026a92:	fe 93 fd e7 	brlo	80026660 <flashc_memcpy+0x13c>
      error_status |= flashc_error_status;
    }
  }

  // Update the FLASHC error status.
  flashc_error_status = error_status;
80026a96:	ec f8 00 54 	ld.w	r8,r6[84]
80026a9a:	ee f9 ff e8 	ld.w	r9,r7[-24]
80026a9e:	91 09       	st.w	r8[0x0],r9

  // Return the initial destination pointer as the standard memcpy function does.
  return dst;
80026aa0:	ee f8 ff a4 	ld.w	r8,r7[-92]
}
80026aa4:	10 9c       	mov	r12,r8
80026aa6:	2e 6d       	sub	sp,-104
80026aa8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026aac:	80 02       	ld.sh	r2,r0[0x0]
80026aae:	63 b4       	ld.w	r4,r1[0x6c]

80026ab0 <flashc_set_flash_waitstate_and_readmode>:


#if UC3C
void flashc_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
80026ab0:	eb cd 40 c0 	pushm	r6-r7,lr
80026ab4:	1a 97       	mov	r7,sp
80026ab6:	20 1d       	sub	sp,4
80026ab8:	49 76       	lddpc	r6,80026b14 <flashc_set_flash_waitstate_and_readmode+0x64>
80026aba:	1e 26       	rsub	r6,pc
80026abc:	ef 4c ff fc 	st.w	r7[-4],r12
  #define AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ      33000000
  #define AVR32_FLASHC_HSEN_FWS_1_MAX_FREQ      72000000
  // These defines are missing from or wrong in the toolchain header files uc3cxxx.h
  // Put a Bugzilla 

  if(cpu_f_hz > AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ)    // > 33MHz
80026ac0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ac4:	e0 69 8a 40 	mov	r9,35392
80026ac8:	ea 19 01 f7 	orh	r9,0x1f7
80026acc:	12 38       	cp.w	r8,r9
80026ace:	e0 88 00 18 	brls	80026afe <flashc_set_flash_waitstate_and_readmode+0x4e>
  {
    // Set a wait-state
    flashc_set_wait_state(1);
80026ad2:	30 1c       	mov	r12,1
80026ad4:	f0 16 00 9b 	mcall	r6[620]
    if(cpu_f_hz <= AVR32_FLASHC_FWS_1_MAX_FREQ) // <= 66MHz and >33Mhz
80026ad8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026adc:	e0 69 14 80 	mov	r9,5248
80026ae0:	ea 19 03 ef 	orh	r9,0x3ef
80026ae4:	12 38       	cp.w	r8,r9
80026ae6:	e0 8b 00 07 	brhi	80026af4 <flashc_set_flash_waitstate_and_readmode+0x44>
    {
      // Disable the high-speed read mode.      
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
80026aea:	3f fb       	mov	r11,-1
80026aec:	31 1c       	mov	r12,17
80026aee:	f0 16 00 2a 	mcall	r6[168]
80026af2:	c0 d8       	rjmp	80026b0c <flashc_set_flash_waitstate_and_readmode+0x5c>
    }
    else // > 66Mhz
    {
      // Enable the high-speed read mode.
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSEN, -1);                     
80026af4:	3f fb       	mov	r11,-1
80026af6:	31 0c       	mov	r12,16
80026af8:	f0 16 00 2a 	mcall	r6[168]
80026afc:	c0 88       	rjmp	80026b0c <flashc_set_flash_waitstate_and_readmode+0x5c>
    }
  }
  else  // <= 33 MHz    
  {
    // Disable wait-state
    flashc_set_wait_state(0);
80026afe:	30 0c       	mov	r12,0
80026b00:	f0 16 00 9b 	mcall	r6[620]

    // Disable the high-speed read mode.
    flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
80026b04:	3f fb       	mov	r11,-1
80026b06:	31 1c       	mov	r12,17
80026b08:	f0 16 00 2a 	mcall	r6[168]
    
  }
}
80026b0c:	2f fd       	sub	sp,-4
80026b0e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026b12:	00 00       	add	r0,r0
80026b14:	80 02       	ld.sh	r2,r0[0x0]
80026b16:	69 3e       	ld.w	lr,r4[0x4c]

80026b18 <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80026b18:	eb cd 40 c0 	pushm	r6-r7,lr
80026b1c:	1a 97       	mov	r7,sp
80026b1e:	20 4d       	sub	sp,16
80026b20:	49 b6       	lddpc	r6,80026b8c <gpio_enable_module+0x74>
80026b22:	1e 26       	rsub	r6,pc
80026b24:	ef 4c ff f4 	st.w	r7[-12],r12
80026b28:	ef 4b ff f0 	st.w	r7[-16],r11
  int status = GPIO_SUCCESS;
80026b2c:	30 08       	mov	r8,0
80026b2e:	ef 48 ff f8 	st.w	r7[-8],r8
  uint32_t i;

  for (i = 0; i < size; i++)
80026b32:	30 08       	mov	r8,0
80026b34:	ef 48 ff fc 	st.w	r7[-4],r8
80026b38:	c1 d8       	rjmp	80026b72 <gpio_enable_module+0x5a>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80026b3a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026b3e:	11 98       	ld.ub	r8,r8[0x1]
80026b40:	10 99       	mov	r9,r8
80026b42:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026b46:	11 88       	ld.ub	r8,r8[0x0]
80026b48:	12 9b       	mov	r11,r9
80026b4a:	10 9c       	mov	r12,r8
80026b4c:	f0 16 00 3e 	mcall	r6[248]
80026b50:	18 98       	mov	r8,r12
80026b52:	ee f9 ff f8 	ld.w	r9,r7[-8]
80026b56:	f3 e8 10 08 	or	r8,r9,r8
80026b5a:	ef 48 ff f8 	st.w	r7[-8],r8
    gpiomap++;
80026b5e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026b62:	2f e8       	sub	r8,-2
80026b64:	ef 48 ff f4 	st.w	r7[-12],r8
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80026b68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b6c:	2f f8       	sub	r8,-1
80026b6e:	ef 48 ff fc 	st.w	r7[-4],r8
80026b72:	ee f9 ff fc 	ld.w	r9,r7[-4]
80026b76:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026b7a:	10 39       	cp.w	r9,r8
80026b7c:	cd f3       	brcs	80026b3a <gpio_enable_module+0x22>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
80026b7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80026b82:	10 9c       	mov	r12,r8
80026b84:	2f cd       	sub	sp,-16
80026b86:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026b8a:	00 00       	add	r0,r0
80026b8c:	80 02       	ld.sh	r2,r0[0x0]
80026b8e:	69 a6       	ld.w	r6,r4[0x68]

80026b90 <gpio_enable_module_pin>:


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
80026b90:	eb cd 40 c0 	pushm	r6-r7,lr
80026b94:	1a 97       	mov	r7,sp
80026b96:	20 3d       	sub	sp,12
80026b98:	fe f6 02 94 	ld.w	r6,pc[660]
80026b9c:	1e 26       	rsub	r6,pc
80026b9e:	ef 4c ff f8 	st.w	r7[-8],r12
80026ba2:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026ba6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026baa:	a5 98       	lsr	r8,0x5
80026bac:	a9 78       	lsl	r8,0x9
80026bae:	e0 28 e0 00 	sub	r8,57344
80026bb2:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the correct function.
  switch (function)
80026bb6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026bba:	58 78       	cp.w	r8,7
80026bbc:	e0 8b 01 26 	brhi	80026e08 <gpio_enable_module_pin+0x278>
80026bc0:	fe c9 ff f8 	sub	r9,pc,-8
80026bc4:	f2 08 00 2f 	add	pc,r9,r8<<0x2
80026bc8:	e0 8f 00 10 	bral	80026be8 <gpio_enable_module_pin+0x58>
80026bcc:	e0 8f 00 30 	bral	80026c2c <gpio_enable_module_pin+0x9c>
80026bd0:	e0 8f 00 50 	bral	80026c70 <gpio_enable_module_pin+0xe0>
80026bd4:	e0 8f 00 70 	bral	80026cb4 <gpio_enable_module_pin+0x124>
80026bd8:	e0 8f 00 90 	bral	80026cf8 <gpio_enable_module_pin+0x168>
80026bdc:	e0 8f 00 b0 	bral	80026d3c <gpio_enable_module_pin+0x1ac>
80026be0:	e0 8f 00 d0 	bral	80026d80 <gpio_enable_module_pin+0x1f0>
80026be4:	e0 8f 00 f0 	bral	80026dc4 <gpio_enable_module_pin+0x234>
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80026be8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026bec:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026bf0:	30 19       	mov	r9,1
80026bf2:	f2 08 09 48 	lsl	r8,r9,r8
80026bf6:	10 99       	mov	r9,r8
80026bf8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026bfc:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80026bfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c02:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026c06:	30 19       	mov	r9,1
80026c08:	f2 08 09 48 	lsl	r8,r9,r8
80026c0c:	10 99       	mov	r9,r8
80026c0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c12:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80026c14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c18:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026c1c:	30 19       	mov	r9,1
80026c1e:	f2 08 09 48 	lsl	r8,r9,r8
80026c22:	10 99       	mov	r9,r8
80026c24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c28:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80026c2a:	cf 18       	rjmp	80026e0c <gpio_enable_module_pin+0x27c>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80026c2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c30:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026c34:	30 19       	mov	r9,1
80026c36:	f2 08 09 48 	lsl	r8,r9,r8
80026c3a:	10 99       	mov	r9,r8
80026c3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c40:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80026c42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c46:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026c4a:	30 19       	mov	r9,1
80026c4c:	f2 08 09 48 	lsl	r8,r9,r8
80026c50:	10 99       	mov	r9,r8
80026c52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c56:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80026c58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c5c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026c60:	30 19       	mov	r9,1
80026c62:	f2 08 09 48 	lsl	r8,r9,r8
80026c66:	10 99       	mov	r9,r8
80026c68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c6c:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80026c6e:	cc f8       	rjmp	80026e0c <gpio_enable_module_pin+0x27c>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80026c70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c74:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026c78:	30 19       	mov	r9,1
80026c7a:	f2 08 09 48 	lsl	r8,r9,r8
80026c7e:	10 99       	mov	r9,r8
80026c80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c84:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80026c86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026c8a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026c8e:	30 19       	mov	r9,1
80026c90:	f2 08 09 48 	lsl	r8,r9,r8
80026c94:	10 99       	mov	r9,r8
80026c96:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c9a:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80026c9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ca0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ca4:	30 19       	mov	r9,1
80026ca6:	f2 08 09 48 	lsl	r8,r9,r8
80026caa:	10 99       	mov	r9,r8
80026cac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026cb0:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80026cb2:	ca d8       	rjmp	80026e0c <gpio_enable_module_pin+0x27c>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80026cb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026cb8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026cbc:	30 19       	mov	r9,1
80026cbe:	f2 08 09 48 	lsl	r8,r9,r8
80026cc2:	10 99       	mov	r9,r8
80026cc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026cc8:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80026cca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026cce:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026cd2:	30 19       	mov	r9,1
80026cd4:	f2 08 09 48 	lsl	r8,r9,r8
80026cd8:	10 99       	mov	r9,r8
80026cda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026cde:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80026ce0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ce4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ce8:	30 19       	mov	r9,1
80026cea:	f2 08 09 48 	lsl	r8,r9,r8
80026cee:	10 99       	mov	r9,r8
80026cf0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026cf4:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80026cf6:	c8 b8       	rjmp	80026e0c <gpio_enable_module_pin+0x27c>

#if (AVR32_GPIO_H_VERSION >= 210)
  case 4: // E function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80026cf8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026cfc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026d00:	30 19       	mov	r9,1
80026d02:	f2 08 09 48 	lsl	r8,r9,r8
80026d06:	10 99       	mov	r9,r8
80026d08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d0c:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80026d0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d12:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026d16:	30 19       	mov	r9,1
80026d18:	f2 08 09 48 	lsl	r8,r9,r8
80026d1c:	10 99       	mov	r9,r8
80026d1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d22:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80026d24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d28:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026d2c:	30 19       	mov	r9,1
80026d2e:	f2 08 09 48 	lsl	r8,r9,r8
80026d32:	10 99       	mov	r9,r8
80026d34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d38:	91 d9       	st.w	r8[0x34],r9
    break;
80026d3a:	c6 98       	rjmp	80026e0c <gpio_enable_module_pin+0x27c>
    
  case 5: // F function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80026d3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d40:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026d44:	30 19       	mov	r9,1
80026d46:	f2 08 09 48 	lsl	r8,r9,r8
80026d4a:	10 99       	mov	r9,r8
80026d4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d50:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80026d52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d56:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026d5a:	30 19       	mov	r9,1
80026d5c:	f2 08 09 48 	lsl	r8,r9,r8
80026d60:	10 99       	mov	r9,r8
80026d62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d66:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80026d68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d6c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026d70:	30 19       	mov	r9,1
80026d72:	f2 08 09 48 	lsl	r8,r9,r8
80026d76:	10 99       	mov	r9,r8
80026d78:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d7c:	91 d9       	st.w	r8[0x34],r9
    break;
80026d7e:	c4 78       	rjmp	80026e0c <gpio_enable_module_pin+0x27c>
    
  case 6: // G function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80026d80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d84:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026d88:	30 19       	mov	r9,1
80026d8a:	f2 08 09 48 	lsl	r8,r9,r8
80026d8e:	10 99       	mov	r9,r8
80026d90:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d94:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80026d96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d9a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026d9e:	30 19       	mov	r9,1
80026da0:	f2 08 09 48 	lsl	r8,r9,r8
80026da4:	10 99       	mov	r9,r8
80026da6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026daa:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80026dac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026db0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026db4:	30 19       	mov	r9,1
80026db6:	f2 08 09 48 	lsl	r8,r9,r8
80026dba:	10 99       	mov	r9,r8
80026dbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026dc0:	91 d9       	st.w	r8[0x34],r9
    break;
80026dc2:	c2 58       	rjmp	80026e0c <gpio_enable_module_pin+0x27c>
    
  case 7: // H function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80026dc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026dc8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026dcc:	30 19       	mov	r9,1
80026dce:	f2 08 09 48 	lsl	r8,r9,r8
80026dd2:	10 99       	mov	r9,r8
80026dd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026dd8:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80026dda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026dde:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026de2:	30 19       	mov	r9,1
80026de4:	f2 08 09 48 	lsl	r8,r9,r8
80026de8:	10 99       	mov	r9,r8
80026dea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026dee:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80026df0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026df4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026df8:	30 19       	mov	r9,1
80026dfa:	f2 08 09 48 	lsl	r8,r9,r8
80026dfe:	10 99       	mov	r9,r8
80026e00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e04:	91 d9       	st.w	r8[0x34],r9
    break;
80026e06:	c0 38       	rjmp	80026e0c <gpio_enable_module_pin+0x27c>
#endif

  default:
    return GPIO_INVALID_ARGUMENT;
80026e08:	30 18       	mov	r8,1
80026e0a:	c0 d8       	rjmp	80026e24 <gpio_enable_module_pin+0x294>
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80026e0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e10:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026e14:	30 19       	mov	r9,1
80026e16:	f2 08 09 48 	lsl	r8,r9,r8
80026e1a:	10 99       	mov	r9,r8
80026e1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e20:	91 29       	st.w	r8[0x8],r9

  return GPIO_SUCCESS;
80026e22:	30 08       	mov	r8,0
}
80026e24:	10 9c       	mov	r12,r8
80026e26:	2f dd       	sub	sp,-12
80026e28:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026e2c:	80 02       	ld.sh	r2,r0[0x0]
80026e2e:	6a 20       	ld.w	r0,r5[0x8]

80026e30 <gpio_enable_gpio>:


void gpio_enable_gpio(const gpio_map_t gpiomap, uint32_t size)
{
80026e30:	eb cd 40 c0 	pushm	r6-r7,lr
80026e34:	1a 97       	mov	r7,sp
80026e36:	20 3d       	sub	sp,12
80026e38:	49 26       	lddpc	r6,80026e80 <gpio_enable_gpio+0x50>
80026e3a:	1e 26       	rsub	r6,pc
80026e3c:	ef 4c ff f8 	st.w	r7[-8],r12
80026e40:	ef 4b ff f4 	st.w	r7[-12],r11
  uint32_t i;

  for (i = 0; i < size; i++)
80026e44:	30 08       	mov	r8,0
80026e46:	ef 48 ff fc 	st.w	r7[-4],r8
80026e4a:	c1 18       	rjmp	80026e6c <gpio_enable_gpio+0x3c>
  {
    gpio_enable_gpio_pin(gpiomap->pin);
80026e4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e50:	11 88       	ld.ub	r8,r8[0x0]
80026e52:	10 9c       	mov	r12,r8
80026e54:	f0 16 01 53 	mcall	r6[1356]
    gpiomap++;
80026e58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e5c:	2f e8       	sub	r8,-2
80026e5e:	ef 48 ff f8 	st.w	r7[-8],r8

void gpio_enable_gpio(const gpio_map_t gpiomap, uint32_t size)
{
  uint32_t i;

  for (i = 0; i < size; i++)
80026e62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e66:	2f f8       	sub	r8,-1
80026e68:	ef 48 ff fc 	st.w	r7[-4],r8
80026e6c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80026e70:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026e74:	10 39       	cp.w	r9,r8
80026e76:	ce b3       	brcs	80026e4c <gpio_enable_gpio+0x1c>
  {
    gpio_enable_gpio_pin(gpiomap->pin);
    gpiomap++;
  }
}
80026e78:	2f dd       	sub	sp,-12
80026e7a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026e7e:	00 00       	add	r0,r0
80026e80:	80 02       	ld.sh	r2,r0[0x0]
80026e82:	6c be       	ld.w	lr,r6[0x2c]

80026e84 <gpio_enable_gpio_pin>:


void gpio_enable_gpio_pin(uint32_t pin)
{
80026e84:	eb cd 40 80 	pushm	r7,lr
80026e88:	1a 97       	mov	r7,sp
80026e8a:	20 2d       	sub	sp,8
80026e8c:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026e90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e94:	a5 98       	lsr	r8,0x5
80026e96:	a9 78       	lsl	r8,0x9
80026e98:	e0 28 e0 00 	sub	r8,57344
80026e9c:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->oderc = 1 << (pin & 0x1F);
80026ea0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ea4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ea8:	30 19       	mov	r9,1
80026eaa:	f2 08 09 48 	lsl	r8,r9,r8
80026eae:	10 99       	mov	r9,r8
80026eb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026eb4:	f1 49 00 48 	st.w	r8[72],r9
  gpio_port->gpers = 1 << (pin & 0x1F);
80026eb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ebc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ec0:	30 19       	mov	r9,1
80026ec2:	f2 08 09 48 	lsl	r8,r9,r8
80026ec6:	10 99       	mov	r9,r8
80026ec8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ecc:	91 19       	st.w	r8[0x4],r9
}
80026ece:	2f ed       	sub	sp,-8
80026ed0:	e3 cd 80 80 	ldm	sp++,r7,pc

80026ed4 <gpio_enable_pin_pull_up>:

#endif


void gpio_enable_pin_pull_up(uint32_t pin)
{
80026ed4:	eb cd 40 80 	pushm	r7,lr
80026ed8:	1a 97       	mov	r7,sp
80026eda:	20 2d       	sub	sp,8
80026edc:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026ee0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ee4:	a5 98       	lsr	r8,0x5
80026ee6:	a9 78       	lsl	r8,0x9
80026ee8:	e0 28 e0 00 	sub	r8,57344
80026eec:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puers = 1 << (pin & 0x1F);
80026ef0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ef4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ef8:	30 19       	mov	r9,1
80026efa:	f2 08 09 48 	lsl	r8,r9,r8
80026efe:	10 99       	mov	r9,r8
80026f00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f04:	f1 49 00 74 	st.w	r8[116],r9
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
  gpio_port->pderc = 1 << (pin & 0x1F);
80026f08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f0c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026f10:	30 19       	mov	r9,1
80026f12:	f2 08 09 48 	lsl	r8,r9,r8
80026f16:	10 99       	mov	r9,r8
80026f18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f1c:	f1 49 00 88 	st.w	r8[136],r9
#endif
}
80026f20:	2f ed       	sub	sp,-8
80026f22:	e3 cd 80 80 	ldm	sp++,r7,pc

80026f26 <gpio_disable_pin_pull_up>:


void gpio_disable_pin_pull_up(uint32_t pin)
{
80026f26:	eb cd 40 80 	pushm	r7,lr
80026f2a:	1a 97       	mov	r7,sp
80026f2c:	20 2d       	sub	sp,8
80026f2e:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026f32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f36:	a5 98       	lsr	r8,0x5
80026f38:	a9 78       	lsl	r8,0x9
80026f3a:	e0 28 e0 00 	sub	r8,57344
80026f3e:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puerc = 1 << (pin & 0x1F);
80026f42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f46:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026f4a:	30 19       	mov	r9,1
80026f4c:	f2 08 09 48 	lsl	r8,r9,r8
80026f50:	10 99       	mov	r9,r8
80026f52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f56:	f1 49 00 78 	st.w	r8[120],r9
}
80026f5a:	2f ed       	sub	sp,-8
80026f5c:	e3 cd 80 80 	ldm	sp++,r7,pc

80026f60 <gpio_enable_pin_pull_down>:
/*! \brief Enables the pull-down resistor of a pin.
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_pull_down(uint32_t pin)
{
80026f60:	eb cd 40 80 	pushm	r7,lr
80026f64:	1a 97       	mov	r7,sp
80026f66:	20 2d       	sub	sp,8
80026f68:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026f6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f70:	a5 98       	lsr	r8,0x5
80026f72:	a9 78       	lsl	r8,0x9
80026f74:	e0 28 e0 00 	sub	r8,57344
80026f78:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puerc = 1 << (pin & 0x1F);
80026f7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f80:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026f84:	30 19       	mov	r9,1
80026f86:	f2 08 09 48 	lsl	r8,r9,r8
80026f8a:	10 99       	mov	r9,r8
80026f8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f90:	f1 49 00 78 	st.w	r8[120],r9
  gpio_port->pders = 1 << (pin & 0x1F);
80026f94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f98:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026f9c:	30 19       	mov	r9,1
80026f9e:	f2 08 09 48 	lsl	r8,r9,r8
80026fa2:	10 99       	mov	r9,r8
80026fa4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026fa8:	f1 49 00 84 	st.w	r8[132],r9
}
80026fac:	2f ed       	sub	sp,-8
80026fae:	e3 cd 80 80 	ldm	sp++,r7,pc

80026fb2 <gpio_disable_pin_pull_down>:
/*! \brief Disables the pull-down resistor of a pin.
 *
 * \param pin The pin number.
 */
void gpio_disable_pin_pull_down(uint32_t pin)
{
80026fb2:	eb cd 40 80 	pushm	r7,lr
80026fb6:	1a 97       	mov	r7,sp
80026fb8:	20 2d       	sub	sp,8
80026fba:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026fbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026fc2:	a5 98       	lsr	r8,0x5
80026fc4:	a9 78       	lsl	r8,0x9
80026fc6:	e0 28 e0 00 	sub	r8,57344
80026fca:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->pderc = 1 << (pin & 0x1F);
80026fce:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026fd2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026fd6:	30 19       	mov	r9,1
80026fd8:	f2 08 09 48 	lsl	r8,r9,r8
80026fdc:	10 99       	mov	r9,r8
80026fde:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026fe2:	f1 49 00 88 	st.w	r8[136],r9
}
80026fe6:	2f ed       	sub	sp,-8
80026fe8:	e3 cd 80 80 	ldm	sp++,r7,pc

80026fec <gpio_enable_pin_buskeeper>:
/*! \brief Enables the buskeeper functionality on a pin.
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_buskeeper(uint32_t pin)
{
80026fec:	eb cd 40 80 	pushm	r7,lr
80026ff0:	1a 97       	mov	r7,sp
80026ff2:	20 2d       	sub	sp,8
80026ff4:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026ff8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ffc:	a5 98       	lsr	r8,0x5
80026ffe:	a9 78       	lsl	r8,0x9
80027000:	e0 28 e0 00 	sub	r8,57344
80027004:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puers = 1 << (pin & 0x1F);
80027008:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002700c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027010:	30 19       	mov	r9,1
80027012:	f2 08 09 48 	lsl	r8,r9,r8
80027016:	10 99       	mov	r9,r8
80027018:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002701c:	f1 49 00 74 	st.w	r8[116],r9
  gpio_port->pders = 1 << (pin & 0x1F);
80027020:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027024:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027028:	30 19       	mov	r9,1
8002702a:	f2 08 09 48 	lsl	r8,r9,r8
8002702e:	10 99       	mov	r9,r8
80027030:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027034:	f1 49 00 84 	st.w	r8[132],r9
}
80027038:	2f ed       	sub	sp,-8
8002703a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002703e <gpio_disable_pin_buskeeper>:
/*! \brief Disables the buskeeper functionality on a pin.
 *
 * \param pin The pin number.
 */
void gpio_disable_pin_buskeeper(uint32_t pin)
{
8002703e:	eb cd 40 80 	pushm	r7,lr
80027042:	1a 97       	mov	r7,sp
80027044:	20 2d       	sub	sp,8
80027046:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002704a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002704e:	a5 98       	lsr	r8,0x5
80027050:	a9 78       	lsl	r8,0x9
80027052:	e0 28 e0 00 	sub	r8,57344
80027056:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puerc = 1 << (pin & 0x1F);
8002705a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002705e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027062:	30 19       	mov	r9,1
80027064:	f2 08 09 48 	lsl	r8,r9,r8
80027068:	10 99       	mov	r9,r8
8002706a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002706e:	f1 49 00 78 	st.w	r8[120],r9
  gpio_port->pderc = 1 << (pin & 0x1F);
80027072:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027076:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002707a:	30 19       	mov	r9,1
8002707c:	f2 08 09 48 	lsl	r8,r9,r8
80027080:	10 99       	mov	r9,r8
80027082:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027086:	f1 49 00 88 	st.w	r8[136],r9
}
8002708a:	2f ed       	sub	sp,-8
8002708c:	e3 cd 80 80 	ldm	sp++,r7,pc

80027090 <gpio_configure_pin>:

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
80027090:	eb cd 40 80 	pushm	r7,lr
80027094:	1a 97       	mov	r7,sp
80027096:	20 3d       	sub	sp,12
80027098:	ef 4c ff f8 	st.w	r7[-8],r12
8002709c:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
800270a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800270a4:	a5 98       	lsr	r8,0x5
800270a6:	a9 78       	lsl	r8,0x9
800270a8:	e0 28 e0 00 	sub	r8,57344
800270ac:	ef 48 ff fc 	st.w	r7[-4],r8

  /* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
    if (flags & GPIO_PULL_DOWN)
800270b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800270b4:	e2 18 00 08 	andl	r8,0x8,COH
800270b8:	c0 e0       	breq	800270d4 <gpio_configure_pin+0x44>
            gpio_port->pders = 1 << (pin & 0x1F);
800270ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800270be:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800270c2:	30 19       	mov	r9,1
800270c4:	f2 08 09 48 	lsl	r8,r9,r8
800270c8:	10 99       	mov	r9,r8
800270ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800270ce:	f1 49 00 84 	st.w	r8[132],r9
800270d2:	c0 d8       	rjmp	800270ec <gpio_configure_pin+0x5c>
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
800270d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800270d8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800270dc:	30 19       	mov	r9,1
800270de:	f2 08 09 48 	lsl	r8,r9,r8
800270e2:	10 99       	mov	r9,r8
800270e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800270e8:	f1 49 00 88 	st.w	r8[136],r9
#endif    
    if (flags & GPIO_PULL_UP)
800270ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800270f0:	e2 18 00 04 	andl	r8,0x4,COH
800270f4:	c0 e0       	breq	80027110 <gpio_configure_pin+0x80>
            gpio_port->puers = 1 << (pin & 0x1F);
800270f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800270fa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800270fe:	30 19       	mov	r9,1
80027100:	f2 08 09 48 	lsl	r8,r9,r8
80027104:	10 99       	mov	r9,r8
80027106:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002710a:	f1 49 00 74 	st.w	r8[116],r9
8002710e:	c0 d8       	rjmp	80027128 <gpio_configure_pin+0x98>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80027110:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027114:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027118:	30 19       	mov	r9,1
8002711a:	f2 08 09 48 	lsl	r8,r9,r8
8002711e:	10 99       	mov	r9,r8
80027120:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027124:	f1 49 00 78 	st.w	r8[120],r9

    /* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
            if (flags & GPIO_OPEN_DRAIN)
80027128:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002712c:	e2 18 00 40 	andl	r8,0x40,COH
80027130:	c0 e0       	breq	8002714c <gpio_configure_pin+0xbc>
                    gpio_port->odmers = 1 << (pin & 0x1F);
80027132:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027136:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002713a:	30 19       	mov	r9,1
8002713c:	f2 08 09 48 	lsl	r8,r9,r8
80027140:	10 99       	mov	r9,r8
80027142:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027146:	f1 49 00 e4 	st.w	r8[228],r9
8002714a:	c0 d8       	rjmp	80027164 <gpio_configure_pin+0xd4>
            else
                    gpio_port->odmerc = 1 << (pin & 0x1F);            
8002714c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027150:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027154:	30 19       	mov	r9,1
80027156:	f2 08 09 48 	lsl	r8,r9,r8
8002715a:	10 99       	mov	r9,r8
8002715c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027160:	f1 49 00 e8 	st.w	r8[232],r9

            if (flags & GPIO_OPEN_DRAIN)
80027164:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027168:	e2 18 00 40 	andl	r8,0x40,COH
8002716c:	c0 e0       	breq	80027188 <gpio_configure_pin+0xf8>
                    gpio_port->pders = 1 << (pin & 0x1F);
8002716e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027172:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027176:	30 19       	mov	r9,1
80027178:	f2 08 09 48 	lsl	r8,r9,r8
8002717c:	10 99       	mov	r9,r8
8002717e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027182:	f1 49 00 84 	st.w	r8[132],r9
80027186:	c0 d8       	rjmp	800271a0 <gpio_configure_pin+0x110>
            else
                    gpio_port->pderc = 1 << (pin & 0x1F);
80027188:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002718c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027190:	30 19       	mov	r9,1
80027192:	f2 08 09 48 	lsl	r8,r9,r8
80027196:	10 99       	mov	r9,r8
80027198:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002719c:	f1 49 00 88 	st.w	r8[136],r9
#endif 
            
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED) 
            /* Select drive strength */
            if (flags & GPIO_DRIVE_LOW)
800271a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800271a4:	e2 18 00 10 	andl	r8,0x10,COH
800271a8:	c0 e0       	breq	800271c4 <gpio_configure_pin+0x134>
                    gpio_port->odcr0s = 1 << (pin & 0x1F);
800271aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800271ae:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800271b2:	30 19       	mov	r9,1
800271b4:	f2 08 09 48 	lsl	r8,r9,r8
800271b8:	10 99       	mov	r9,r8
800271ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800271be:	f1 49 01 04 	st.w	r8[260],r9
800271c2:	c0 d8       	rjmp	800271dc <gpio_configure_pin+0x14c>
            else
                    gpio_port->odcr0c = 1 << (pin & 0x1F);
800271c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800271c8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800271cc:	30 19       	mov	r9,1
800271ce:	f2 08 09 48 	lsl	r8,r9,r8
800271d2:	10 99       	mov	r9,r8
800271d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800271d8:	f1 49 01 08 	st.w	r8[264],r9
            if (flags & GPIO_DRIVE_HIGH)
800271dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800271e0:	e2 18 00 20 	andl	r8,0x20,COH
800271e4:	c0 e0       	breq	80027200 <gpio_configure_pin+0x170>
                    gpio_port->odcr1s = 1 << (pin & 0x1F);
800271e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800271ea:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800271ee:	30 19       	mov	r9,1
800271f0:	f2 08 09 48 	lsl	r8,r9,r8
800271f4:	10 99       	mov	r9,r8
800271f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800271fa:	f1 49 01 14 	st.w	r8[276],r9
800271fe:	c0 d8       	rjmp	80027218 <gpio_configure_pin+0x188>
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
80027200:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027204:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027208:	30 19       	mov	r9,1
8002720a:	f2 08 09 48 	lsl	r8,r9,r8
8002720e:	10 99       	mov	r9,r8
80027210:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027214:	f1 49 01 18 	st.w	r8[280],r9
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80027218:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002721c:	e2 18 00 80 	andl	r8,0x80,COH
80027220:	c5 a0       	breq	800272d4 <gpio_configure_pin+0x244>
            if (flags & GPIO_BOTHEDGES)
80027222:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027226:	e2 18 01 80 	andl	r8,0x180,COH
8002722a:	c1 a0       	breq	8002725e <gpio_configure_pin+0x1ce>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
8002722c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027230:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027234:	30 19       	mov	r9,1
80027236:	f2 08 09 48 	lsl	r8,r9,r8
8002723a:	10 99       	mov	r9,r8
8002723c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027240:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80027244:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027248:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002724c:	30 19       	mov	r9,1
8002724e:	f2 08 09 48 	lsl	r8,r9,r8
80027252:	10 99       	mov	r9,r8
80027254:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027258:	f1 49 00 b8 	st.w	r8[184],r9
8002725c:	c3 c8       	rjmp	800272d4 <gpio_configure_pin+0x244>
            }
            else if (flags & GPIO_RISING)
8002725e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027262:	e2 18 02 80 	andl	r8,0x280,COH
80027266:	c1 a0       	breq	8002729a <gpio_configure_pin+0x20a>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
80027268:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002726c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027270:	30 19       	mov	r9,1
80027272:	f2 08 09 48 	lsl	r8,r9,r8
80027276:	10 99       	mov	r9,r8
80027278:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002727c:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80027280:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027284:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027288:	30 19       	mov	r9,1
8002728a:	f2 08 09 48 	lsl	r8,r9,r8
8002728e:	10 99       	mov	r9,r8
80027290:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027294:	f1 49 00 b8 	st.w	r8[184],r9
80027298:	c1 e8       	rjmp	800272d4 <gpio_configure_pin+0x244>
            }
            else if (flags & GPIO_FALLING)
8002729a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002729e:	e2 18 03 80 	andl	r8,0x380,COH
800272a2:	c1 90       	breq	800272d4 <gpio_configure_pin+0x244>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
800272a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800272a8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800272ac:	30 19       	mov	r9,1
800272ae:	f2 08 09 48 	lsl	r8,r9,r8
800272b2:	10 99       	mov	r9,r8
800272b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800272b8:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
800272bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800272c0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800272c4:	30 19       	mov	r9,1
800272c6:	f2 08 09 48 	lsl	r8,r9,r8
800272ca:	10 99       	mov	r9,r8
800272cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800272d0:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
800272d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800272d8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800272dc:	5c 58       	castu.b	r8
800272de:	c2 c0       	breq	80027336 <gpio_configure_pin+0x2a6>
            if (flags & GPIO_INIT_HIGH)
800272e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800272e4:	e2 18 00 02 	andl	r8,0x2,COH
800272e8:	c0 e0       	breq	80027304 <gpio_configure_pin+0x274>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
800272ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800272ee:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800272f2:	30 19       	mov	r9,1
800272f4:	f2 08 09 48 	lsl	r8,r9,r8
800272f8:	10 99       	mov	r9,r8
800272fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800272fe:	f1 49 00 54 	st.w	r8[84],r9
80027302:	c0 d8       	rjmp	8002731c <gpio_configure_pin+0x28c>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
80027304:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027308:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002730c:	30 19       	mov	r9,1
8002730e:	f2 08 09 48 	lsl	r8,r9,r8
80027312:	10 99       	mov	r9,r8
80027314:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027318:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
8002731c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027320:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027324:	30 19       	mov	r9,1
80027326:	f2 08 09 48 	lsl	r8,r9,r8
8002732a:	10 99       	mov	r9,r8
8002732c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027330:	f1 49 00 44 	st.w	r8[68],r9
80027334:	c0 d8       	rjmp	8002734e <gpio_configure_pin+0x2be>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
80027336:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002733a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002733e:	30 19       	mov	r9,1
80027340:	f2 08 09 48 	lsl	r8,r9,r8
80027344:	10 99       	mov	r9,r8
80027346:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002734a:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
8002734e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027352:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027356:	30 19       	mov	r9,1
80027358:	f2 08 09 48 	lsl	r8,r9,r8
8002735c:	10 99       	mov	r9,r8
8002735e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027362:	91 19       	st.w	r8[0x4],r9
}
80027364:	2f dd       	sub	sp,-12
80027366:	e3 cd 80 80 	ldm	sp++,r7,pc

8002736a <gpio_configure_group>:

void gpio_configure_group(uint32_t port, uint32_t mask, uint32_t flags)
{  
8002736a:	eb cd 40 80 	pushm	r7,lr
8002736e:	1a 97       	mov	r7,sp
80027370:	20 4d       	sub	sp,16
80027372:	ef 4c ff f8 	st.w	r7[-8],r12
80027376:	ef 4b ff f4 	st.w	r7[-12],r11
8002737a:	ef 4a ff f0 	st.w	r7[-16],r10
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];  
8002737e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027382:	a9 78       	lsl	r8,0x9
80027384:	e0 28 e0 00 	sub	r8,57344
80027388:	ef 48 ff fc 	st.w	r7[-4],r8

  /* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)  
    if (flags & GPIO_PULL_DOWN)
8002738c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027390:	e2 18 00 08 	andl	r8,0x8,COH
80027394:	c0 80       	breq	800273a4 <gpio_configure_group+0x3a>
            gpio_port->pders = mask;
80027396:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002739a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002739e:	f1 49 00 84 	st.w	r8[132],r9
800273a2:	c0 78       	rjmp	800273b0 <gpio_configure_group+0x46>
    else
            gpio_port->pderc = mask;
800273a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800273a8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800273ac:	f1 49 00 88 	st.w	r8[136],r9
#endif    
    if (flags & GPIO_PULL_UP)
800273b0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800273b4:	e2 18 00 04 	andl	r8,0x4,COH
800273b8:	c0 80       	breq	800273c8 <gpio_configure_group+0x5e>
            gpio_port->puers = mask;
800273ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800273be:	ee f9 ff f4 	ld.w	r9,r7[-12]
800273c2:	f1 49 00 74 	st.w	r8[116],r9
800273c6:	c0 78       	rjmp	800273d4 <gpio_configure_group+0x6a>
    else
            gpio_port->puerc = mask;
800273c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800273cc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800273d0:	f1 49 00 78 	st.w	r8[120],r9

    /* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)  
            if (flags & GPIO_OPEN_DRAIN)
800273d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800273d8:	e2 18 00 40 	andl	r8,0x40,COH
800273dc:	c0 80       	breq	800273ec <gpio_configure_group+0x82>
                    gpio_port->odmers = mask;
800273de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800273e2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800273e6:	f1 49 00 e4 	st.w	r8[228],r9
800273ea:	c0 78       	rjmp	800273f8 <gpio_configure_group+0x8e>
            else
                    gpio_port->odmerc = mask;            
800273ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800273f0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800273f4:	f1 49 00 e8 	st.w	r8[232],r9

            if (flags & GPIO_OPEN_DRAIN)
800273f8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800273fc:	e2 18 00 40 	andl	r8,0x40,COH
80027400:	c0 80       	breq	80027410 <gpio_configure_group+0xa6>
                    gpio_port->pders = mask;
80027402:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027406:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002740a:	f1 49 00 84 	st.w	r8[132],r9
8002740e:	c0 78       	rjmp	8002741c <gpio_configure_group+0xb2>
            else
                    gpio_port->pderc = mask;
80027410:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027414:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027418:	f1 49 00 88 	st.w	r8[136],r9
#endif 
            
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED) 
            /* Select drive strength */
            if (flags & GPIO_DRIVE_LOW)
8002741c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027420:	e2 18 00 10 	andl	r8,0x10,COH
80027424:	c0 80       	breq	80027434 <gpio_configure_group+0xca>
                    gpio_port->odcr0s = mask;
80027426:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002742a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002742e:	f1 49 01 04 	st.w	r8[260],r9
80027432:	c0 78       	rjmp	80027440 <gpio_configure_group+0xd6>
            else
                    gpio_port->odcr0c = mask;
80027434:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027438:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002743c:	f1 49 01 08 	st.w	r8[264],r9
            if (flags & GPIO_DRIVE_HIGH)
80027440:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027444:	e2 18 00 20 	andl	r8,0x20,COH
80027448:	c0 80       	breq	80027458 <gpio_configure_group+0xee>
                    gpio_port->odcr1s = mask;
8002744a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002744e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027452:	f1 49 01 14 	st.w	r8[276],r9
80027456:	c0 78       	rjmp	80027464 <gpio_configure_group+0xfa>
            else
                    gpio_port->odcr1c = mask;
80027458:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002745c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027460:	f1 49 01 18 	st.w	r8[280],r9
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80027464:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027468:	e2 18 00 80 	andl	r8,0x80,COH
8002746c:	c3 60       	breq	800274d8 <gpio_configure_group+0x16e>
            if (flags & GPIO_BOTHEDGES)
8002746e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027472:	e2 18 01 80 	andl	r8,0x180,COH
80027476:	c0 e0       	breq	80027492 <gpio_configure_group+0x128>
            {
                   gpio_port->imr0c = mask;
80027478:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002747c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027480:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = mask;
80027484:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027488:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002748c:	f1 49 00 b8 	st.w	r8[184],r9
80027490:	c2 48       	rjmp	800274d8 <gpio_configure_group+0x16e>
            }
            else if (flags & GPIO_RISING)
80027492:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027496:	e2 18 02 80 	andl	r8,0x280,COH
8002749a:	c0 e0       	breq	800274b6 <gpio_configure_group+0x14c>
            {
                   gpio_port->imr0s = mask;
8002749c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800274a0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800274a4:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = mask;
800274a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800274ac:	ee f9 ff f4 	ld.w	r9,r7[-12]
800274b0:	f1 49 00 b8 	st.w	r8[184],r9
800274b4:	c1 28       	rjmp	800274d8 <gpio_configure_group+0x16e>
            }
            else if (flags & GPIO_FALLING)
800274b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800274ba:	e2 18 03 80 	andl	r8,0x380,COH
800274be:	c0 d0       	breq	800274d8 <gpio_configure_group+0x16e>
            {
                   gpio_port->imr0c = mask;
800274c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800274c4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800274c8:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = mask;
800274cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800274d0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800274d4:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
800274d8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800274dc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800274e0:	5c 58       	castu.b	r8
800274e2:	c1 a0       	breq	80027516 <gpio_configure_group+0x1ac>
            if (flags & GPIO_INIT_HIGH)
800274e4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800274e8:	e2 18 00 02 	andl	r8,0x2,COH
800274ec:	c0 80       	breq	800274fc <gpio_configure_group+0x192>
                    gpio_port->ovrs = mask;
800274ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800274f2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800274f6:	f1 49 00 54 	st.w	r8[84],r9
800274fa:	c0 78       	rjmp	80027508 <gpio_configure_group+0x19e>
            else
                    gpio_port->ovrc = mask;
800274fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027500:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027504:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = mask;
80027508:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002750c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027510:	f1 49 00 44 	st.w	r8[68],r9
80027514:	c0 78       	rjmp	80027522 <gpio_configure_group+0x1b8>
    } else {
            gpio_port->oderc = mask;
80027516:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002751a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002751e:	f1 49 00 48 	st.w	r8[72],r9
    }
    
    /* Enable GPIO */
    gpio_port->gpers = mask;
80027522:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027526:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002752a:	91 19       	st.w	r8[0x4],r9
}
8002752c:	2f cd       	sub	sp,-16
8002752e:	e3 cd 80 80 	ldm	sp++,r7,pc

80027532 <gpio_get_pin_value>:

int gpio_get_pin_value(uint32_t pin)
{
80027532:	eb cd 40 80 	pushm	r7,lr
80027536:	1a 97       	mov	r7,sp
80027538:	20 2d       	sub	sp,8
8002753a:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002753e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027542:	a5 98       	lsr	r8,0x5
80027544:	a9 78       	lsl	r8,0x9
80027546:	e0 28 e0 00 	sub	r8,57344
8002754a:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
8002754e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027552:	71 89       	ld.w	r9,r8[0x60]
80027554:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027558:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002755c:	f2 08 0a 48 	lsr	r8,r9,r8
80027560:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
80027564:	10 9c       	mov	r12,r8
80027566:	2f ed       	sub	sp,-8
80027568:	e3 cd 80 80 	ldm	sp++,r7,pc

8002756c <gpio_get_gpio_pin_output_value>:


int gpio_get_gpio_pin_output_value(uint32_t pin)
{
8002756c:	eb cd 40 80 	pushm	r7,lr
80027570:	1a 97       	mov	r7,sp
80027572:	20 2d       	sub	sp,8
80027574:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027578:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002757c:	a5 98       	lsr	r8,0x5
8002757e:	a9 78       	lsl	r8,0x9
80027580:	e0 28 e0 00 	sub	r8,57344
80027584:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->ovr >> (pin & 0x1F)) & 1;
80027588:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002758c:	71 49       	ld.w	r9,r8[0x50]
8002758e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027592:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027596:	f2 08 0a 48 	lsr	r8,r9,r8
8002759a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
8002759e:	10 9c       	mov	r12,r8
800275a0:	2f ed       	sub	sp,-8
800275a2:	e3 cd 80 80 	ldm	sp++,r7,pc

800275a6 <gpio_get_gpio_open_drain_pin_output_value>:


int gpio_get_gpio_open_drain_pin_output_value(uint32_t pin)
{
800275a6:	eb cd 40 80 	pushm	r7,lr
800275aa:	1a 97       	mov	r7,sp
800275ac:	20 2d       	sub	sp,8
800275ae:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800275b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800275b6:	a5 98       	lsr	r8,0x5
800275b8:	a9 78       	lsl	r8,0x9
800275ba:	e0 28 e0 00 	sub	r8,57344
800275be:	ef 48 ff fc 	st.w	r7[-4],r8
  return ((gpio_port->oder >> (pin & 0x1F)) & 1) ^ 1;
800275c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800275c6:	71 09       	ld.w	r9,r8[0x40]
800275c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800275cc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800275d0:	f2 08 0a 48 	lsr	r8,r9,r8
800275d4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800275d8:	5f 08       	sreq	r8
}
800275da:	10 9c       	mov	r12,r8
800275dc:	2f ed       	sub	sp,-8
800275de:	e3 cd 80 80 	ldm	sp++,r7,pc

800275e2 <gpio_set_gpio_pin>:


void gpio_set_gpio_pin(uint32_t pin)
{
800275e2:	eb cd 40 80 	pushm	r7,lr
800275e6:	1a 97       	mov	r7,sp
800275e8:	20 2d       	sub	sp,8
800275ea:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800275ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800275f2:	a5 98       	lsr	r8,0x5
800275f4:	a9 78       	lsl	r8,0x9
800275f6:	e0 28 e0 00 	sub	r8,57344
800275fa:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
800275fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027602:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027606:	30 19       	mov	r9,1
80027608:	f2 08 09 48 	lsl	r8,r9,r8
8002760c:	10 99       	mov	r9,r8
8002760e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027612:	f1 49 00 54 	st.w	r8[84],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80027616:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002761a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002761e:	30 19       	mov	r9,1
80027620:	f2 08 09 48 	lsl	r8,r9,r8
80027624:	10 99       	mov	r9,r8
80027626:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002762a:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
8002762e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027632:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027636:	30 19       	mov	r9,1
80027638:	f2 08 09 48 	lsl	r8,r9,r8
8002763c:	10 99       	mov	r9,r8
8002763e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027642:	91 19       	st.w	r8[0x4],r9
}
80027644:	2f ed       	sub	sp,-8
80027646:	e3 cd 80 80 	ldm	sp++,r7,pc

8002764a <gpio_set_pin_high>:

void gpio_set_pin_high(uint32_t pin)
{
8002764a:	eb cd 40 80 	pushm	r7,lr
8002764e:	1a 97       	mov	r7,sp
80027650:	20 2d       	sub	sp,8
80027652:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027656:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002765a:	a5 98       	lsr	r8,0x5
8002765c:	a9 78       	lsl	r8,0x9
8002765e:	e0 28 e0 00 	sub	r8,57344
80027662:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80027666:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002766a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002766e:	30 19       	mov	r9,1
80027670:	f2 08 09 48 	lsl	r8,r9,r8
80027674:	10 99       	mov	r9,r8
80027676:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002767a:	f1 49 00 54 	st.w	r8[84],r9
}
8002767e:	2f ed       	sub	sp,-8
80027680:	e3 cd 80 80 	ldm	sp++,r7,pc

80027684 <gpio_set_group_high>:

void gpio_set_group_high(uint32_t port, uint32_t mask)
{
80027684:	eb cd 40 80 	pushm	r7,lr
80027688:	1a 97       	mov	r7,sp
8002768a:	20 3d       	sub	sp,12
8002768c:	ef 4c ff f8 	st.w	r7[-8],r12
80027690:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
80027694:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027698:	a9 78       	lsl	r8,0x9
8002769a:	e0 28 e0 00 	sub	r8,57344
8002769e:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = mask; // Value to be driven on the I/O group: 1.
800276a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800276a6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800276aa:	f1 49 00 54 	st.w	r8[84],r9
}
800276ae:	2f dd       	sub	sp,-12
800276b0:	e3 cd 80 80 	ldm	sp++,r7,pc

800276b4 <gpio_set_pin_low>:


void gpio_set_pin_low(uint32_t pin)
{
800276b4:	eb cd 40 80 	pushm	r7,lr
800276b8:	1a 97       	mov	r7,sp
800276ba:	20 2d       	sub	sp,8
800276bc:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800276c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800276c4:	a5 98       	lsr	r8,0x5
800276c6:	a9 78       	lsl	r8,0x9
800276c8:	e0 28 e0 00 	sub	r8,57344
800276cc:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
800276d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800276d4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800276d8:	30 19       	mov	r9,1
800276da:	f2 08 09 48 	lsl	r8,r9,r8
800276de:	10 99       	mov	r9,r8
800276e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800276e4:	f1 49 00 58 	st.w	r8[88],r9
}
800276e8:	2f ed       	sub	sp,-8
800276ea:	e3 cd 80 80 	ldm	sp++,r7,pc

800276ee <gpio_clr_gpio_pin>:

void gpio_clr_gpio_pin(uint32_t pin)
{
800276ee:	eb cd 40 80 	pushm	r7,lr
800276f2:	1a 97       	mov	r7,sp
800276f4:	20 2d       	sub	sp,8
800276f6:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800276fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800276fe:	a5 98       	lsr	r8,0x5
80027700:	a9 78       	lsl	r8,0x9
80027702:	e0 28 e0 00 	sub	r8,57344
80027706:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
8002770a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002770e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027712:	30 19       	mov	r9,1
80027714:	f2 08 09 48 	lsl	r8,r9,r8
80027718:	10 99       	mov	r9,r8
8002771a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002771e:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80027722:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027726:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002772a:	30 19       	mov	r9,1
8002772c:	f2 08 09 48 	lsl	r8,r9,r8
80027730:	10 99       	mov	r9,r8
80027732:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027736:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.  
8002773a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002773e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027742:	30 19       	mov	r9,1
80027744:	f2 08 09 48 	lsl	r8,r9,r8
80027748:	10 99       	mov	r9,r8
8002774a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002774e:	91 19       	st.w	r8[0x4],r9
}
80027750:	2f ed       	sub	sp,-8
80027752:	e3 cd 80 80 	ldm	sp++,r7,pc

80027756 <gpio_set_group_low>:

void gpio_set_group_low(uint32_t port, uint32_t mask)
{
80027756:	eb cd 40 80 	pushm	r7,lr
8002775a:	1a 97       	mov	r7,sp
8002775c:	20 3d       	sub	sp,12
8002775e:	ef 4c ff f8 	st.w	r7[-8],r12
80027762:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
80027766:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002776a:	a9 78       	lsl	r8,0x9
8002776c:	e0 28 e0 00 	sub	r8,57344
80027770:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = mask; // Value to be driven on the I/O group: 0.
80027774:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027778:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002777c:	f1 49 00 58 	st.w	r8[88],r9
}
80027780:	2f dd       	sub	sp,-12
80027782:	e3 cd 80 80 	ldm	sp++,r7,pc

80027786 <gpio_tgl_gpio_pin>:

void gpio_tgl_gpio_pin(uint32_t pin)
{
80027786:	eb cd 40 80 	pushm	r7,lr
8002778a:	1a 97       	mov	r7,sp
8002778c:	20 2d       	sub	sp,8
8002778e:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027792:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027796:	a5 98       	lsr	r8,0x5
80027798:	a9 78       	lsl	r8,0x9
8002779a:	e0 28 e0 00 	sub	r8,57344
8002779e:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
800277a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800277a6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800277aa:	30 19       	mov	r9,1
800277ac:	f2 08 09 48 	lsl	r8,r9,r8
800277b0:	10 99       	mov	r9,r8
800277b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800277b6:	f1 49 00 5c 	st.w	r8[92],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
800277ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800277be:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800277c2:	30 19       	mov	r9,1
800277c4:	f2 08 09 48 	lsl	r8,r9,r8
800277c8:	10 99       	mov	r9,r8
800277ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800277ce:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
800277d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800277d6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800277da:	30 19       	mov	r9,1
800277dc:	f2 08 09 48 	lsl	r8,r9,r8
800277e0:	10 99       	mov	r9,r8
800277e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800277e6:	91 19       	st.w	r8[0x4],r9
}
800277e8:	2f ed       	sub	sp,-8
800277ea:	e3 cd 80 80 	ldm	sp++,r7,pc

800277ee <gpio_toggle_pin>:

void gpio_toggle_pin(uint32_t pin)
{
800277ee:	eb cd 40 80 	pushm	r7,lr
800277f2:	1a 97       	mov	r7,sp
800277f4:	20 2d       	sub	sp,8
800277f6:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800277fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800277fe:	a5 98       	lsr	r8,0x5
80027800:	a9 78       	lsl	r8,0x9
80027802:	e0 28 e0 00 	sub	r8,57344
80027806:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
8002780a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002780e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027812:	30 19       	mov	r9,1
80027814:	f2 08 09 48 	lsl	r8,r9,r8
80027818:	10 99       	mov	r9,r8
8002781a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002781e:	f1 49 00 5c 	st.w	r8[92],r9
}
80027822:	2f ed       	sub	sp,-8
80027824:	e3 cd 80 80 	ldm	sp++,r7,pc

80027828 <gpio_toggle_group>:

void gpio_toggle_group(uint32_t port, uint32_t mask)
{
80027828:	eb cd 40 80 	pushm	r7,lr
8002782c:	1a 97       	mov	r7,sp
8002782e:	20 3d       	sub	sp,12
80027830:	ef 4c ff f8 	st.w	r7[-8],r12
80027834:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
80027838:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002783c:	a9 78       	lsl	r8,0x9
8002783e:	e0 28 e0 00 	sub	r8,57344
80027842:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = mask; // Toggle the I/O port.
80027846:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002784a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002784e:	f1 49 00 5c 	st.w	r8[92],r9
}
80027852:	2f dd       	sub	sp,-12
80027854:	e3 cd 80 80 	ldm	sp++,r7,pc

80027858 <gpio_set_gpio_open_drain_pin>:

void gpio_set_gpio_open_drain_pin(uint32_t pin)
{
80027858:	eb cd 40 80 	pushm	r7,lr
8002785c:	1a 97       	mov	r7,sp
8002785e:	20 2d       	sub	sp,8
80027860:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027864:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027868:	a5 98       	lsr	r8,0x5
8002786a:	a9 78       	lsl	r8,0x9
8002786c:	e0 28 e0 00 	sub	r8,57344
80027870:	ef 48 ff fc 	st.w	r7[-4],r8

  gpio_port->oderc = 1 << (pin & 0x1F); // The GPIO output driver is disabled for that pin.
80027874:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027878:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002787c:	30 19       	mov	r9,1
8002787e:	f2 08 09 48 	lsl	r8,r9,r8
80027882:	10 99       	mov	r9,r8
80027884:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027888:	f1 49 00 48 	st.w	r8[72],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
8002788c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027890:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027894:	30 19       	mov	r9,1
80027896:	f2 08 09 48 	lsl	r8,r9,r8
8002789a:	10 99       	mov	r9,r8
8002789c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800278a0:	91 19       	st.w	r8[0x4],r9
}
800278a2:	2f ed       	sub	sp,-8
800278a4:	e3 cd 80 80 	ldm	sp++,r7,pc

800278a8 <gpio_clr_gpio_open_drain_pin>:


void gpio_clr_gpio_open_drain_pin(uint32_t pin)
{
800278a8:	eb cd 40 80 	pushm	r7,lr
800278ac:	1a 97       	mov	r7,sp
800278ae:	20 2d       	sub	sp,8
800278b0:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800278b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800278b8:	a5 98       	lsr	r8,0x5
800278ba:	a9 78       	lsl	r8,0x9
800278bc:	e0 28 e0 00 	sub	r8,57344
800278c0:	ef 48 ff fc 	st.w	r7[-4],r8

  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
800278c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800278c8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800278cc:	30 19       	mov	r9,1
800278ce:	f2 08 09 48 	lsl	r8,r9,r8
800278d2:	10 99       	mov	r9,r8
800278d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800278d8:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
800278dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800278e0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800278e4:	30 19       	mov	r9,1
800278e6:	f2 08 09 48 	lsl	r8,r9,r8
800278ea:	10 99       	mov	r9,r8
800278ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800278f0:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
800278f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800278f8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800278fc:	30 19       	mov	r9,1
800278fe:	f2 08 09 48 	lsl	r8,r9,r8
80027902:	10 99       	mov	r9,r8
80027904:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027908:	91 19       	st.w	r8[0x4],r9
}
8002790a:	2f ed       	sub	sp,-8
8002790c:	e3 cd 80 80 	ldm	sp++,r7,pc

80027910 <gpio_tgl_gpio_open_drain_pin>:


void gpio_tgl_gpio_open_drain_pin(uint32_t pin)
{
80027910:	eb cd 40 80 	pushm	r7,lr
80027914:	1a 97       	mov	r7,sp
80027916:	20 2d       	sub	sp,8
80027918:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002791c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027920:	a5 98       	lsr	r8,0x5
80027922:	a9 78       	lsl	r8,0x9
80027924:	e0 28 e0 00 	sub	r8,57344
80027928:	ef 48 ff fc 	st.w	r7[-4],r8

  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line if the GPIO output driver is enabled: 0.
8002792c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027930:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027934:	30 19       	mov	r9,1
80027936:	f2 08 09 48 	lsl	r8,r9,r8
8002793a:	10 99       	mov	r9,r8
8002793c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027940:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->odert = 1 << (pin & 0x1F); // The GPIO output driver is toggled for that pin.
80027944:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027948:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002794c:	30 19       	mov	r9,1
8002794e:	f2 08 09 48 	lsl	r8,r9,r8
80027952:	10 99       	mov	r9,r8
80027954:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027958:	f1 49 00 4c 	st.w	r8[76],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
8002795c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027960:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027964:	30 19       	mov	r9,1
80027966:	f2 08 09 48 	lsl	r8,r9,r8
8002796a:	10 99       	mov	r9,r8
8002796c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027970:	91 19       	st.w	r8[0x4],r9
}
80027972:	2f ed       	sub	sp,-8
80027974:	e3 cd 80 80 	ldm	sp++,r7,pc

80027978 <gpio_enable_pin_glitch_filter>:


void gpio_enable_pin_glitch_filter(uint32_t pin)
{
80027978:	eb cd 40 80 	pushm	r7,lr
8002797c:	1a 97       	mov	r7,sp
8002797e:	20 2d       	sub	sp,8
80027980:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027984:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027988:	a5 98       	lsr	r8,0x5
8002798a:	a9 78       	lsl	r8,0x9
8002798c:	e0 28 e0 00 	sub	r8,57344
80027990:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->gfers = 1 << (pin & 0x1F);
80027994:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027998:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002799c:	30 19       	mov	r9,1
8002799e:	f2 08 09 48 	lsl	r8,r9,r8
800279a2:	10 99       	mov	r9,r8
800279a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800279a8:	f1 49 00 c4 	st.w	r8[196],r9
}
800279ac:	2f ed       	sub	sp,-8
800279ae:	e3 cd 80 80 	ldm	sp++,r7,pc

800279b2 <gpio_disable_pin_glitch_filter>:


void gpio_disable_pin_glitch_filter(uint32_t pin)
{
800279b2:	eb cd 40 80 	pushm	r7,lr
800279b6:	1a 97       	mov	r7,sp
800279b8:	20 2d       	sub	sp,8
800279ba:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800279be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800279c2:	a5 98       	lsr	r8,0x5
800279c4:	a9 78       	lsl	r8,0x9
800279c6:	e0 28 e0 00 	sub	r8,57344
800279ca:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->gferc = 1 << (pin & 0x1F);
800279ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800279d2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800279d6:	30 19       	mov	r9,1
800279d8:	f2 08 09 48 	lsl	r8,r9,r8
800279dc:	10 99       	mov	r9,r8
800279de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800279e2:	f1 49 00 c8 	st.w	r8[200],r9
}
800279e6:	2f ed       	sub	sp,-8
800279e8:	e3 cd 80 80 	ldm	sp++,r7,pc

800279ec <gpio_configure_edge_detector>:
 *             or \ref GPIO_FALLING_EDGE).
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
static int gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
800279ec:	eb cd 40 80 	pushm	r7,lr
800279f0:	1a 97       	mov	r7,sp
800279f2:	20 3d       	sub	sp,12
800279f4:	ef 4c ff f8 	st.w	r7[-8],r12
800279f8:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800279fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a00:	a5 98       	lsr	r8,0x5
80027a02:	a9 78       	lsl	r8,0x9
80027a04:	e0 28 e0 00 	sub	r8,57344
80027a08:	ef 48 ff fc 	st.w	r7[-4],r8
  
  // Configure the edge detector.
  switch (mode)
80027a0c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027a10:	58 18       	cp.w	r8,1
80027a12:	c1 e0       	breq	80027a4e <gpio_configure_edge_detector+0x62>
80027a14:	c0 43       	brcs	80027a1c <gpio_configure_edge_detector+0x30>
80027a16:	58 28       	cp.w	r8,2
80027a18:	c3 40       	breq	80027a80 <gpio_configure_edge_detector+0x94>
80027a1a:	c4 c8       	rjmp	80027ab2 <gpio_configure_edge_detector+0xc6>
  {
  case GPIO_PIN_CHANGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
80027a1c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a20:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027a24:	30 19       	mov	r9,1
80027a26:	f2 08 09 48 	lsl	r8,r9,r8
80027a2a:	10 99       	mov	r9,r8
80027a2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027a30:	f1 49 00 a8 	st.w	r8[168],r9
    gpio_port->imr1c = 1 << (pin & 0x1F);
80027a34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a38:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027a3c:	30 19       	mov	r9,1
80027a3e:	f2 08 09 48 	lsl	r8,r9,r8
80027a42:	10 99       	mov	r9,r8
80027a44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027a48:	f1 49 00 b8 	st.w	r8[184],r9
    break;
80027a4c:	c3 58       	rjmp	80027ab6 <gpio_configure_edge_detector+0xca>

  case GPIO_RISING_EDGE:
    gpio_port->imr0s = 1 << (pin & 0x1F);
80027a4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a52:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027a56:	30 19       	mov	r9,1
80027a58:	f2 08 09 48 	lsl	r8,r9,r8
80027a5c:	10 99       	mov	r9,r8
80027a5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027a62:	f1 49 00 a4 	st.w	r8[164],r9
    gpio_port->imr1c = 1 << (pin & 0x1F);
80027a66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a6a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027a6e:	30 19       	mov	r9,1
80027a70:	f2 08 09 48 	lsl	r8,r9,r8
80027a74:	10 99       	mov	r9,r8
80027a76:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027a7a:	f1 49 00 b8 	st.w	r8[184],r9
    break;
80027a7e:	c1 c8       	rjmp	80027ab6 <gpio_configure_edge_detector+0xca>

  case GPIO_FALLING_EDGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
80027a80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a84:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027a88:	30 19       	mov	r9,1
80027a8a:	f2 08 09 48 	lsl	r8,r9,r8
80027a8e:	10 99       	mov	r9,r8
80027a90:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027a94:	f1 49 00 a8 	st.w	r8[168],r9
    gpio_port->imr1s = 1 << (pin & 0x1F);
80027a98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a9c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027aa0:	30 19       	mov	r9,1
80027aa2:	f2 08 09 48 	lsl	r8,r9,r8
80027aa6:	10 99       	mov	r9,r8
80027aa8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027aac:	f1 49 00 b4 	st.w	r8[180],r9
    break;
80027ab0:	c0 38       	rjmp	80027ab6 <gpio_configure_edge_detector+0xca>

  default:
    return GPIO_INVALID_ARGUMENT;
80027ab2:	30 18       	mov	r8,1
80027ab4:	c0 28       	rjmp	80027ab8 <gpio_configure_edge_detector+0xcc>
  }

  return GPIO_SUCCESS;
80027ab6:	30 08       	mov	r8,0
}
80027ab8:	10 9c       	mov	r12,r8
80027aba:	2f dd       	sub	sp,-12
80027abc:	e3 cd 80 80 	ldm	sp++,r7,pc

80027ac0 <gpio_enable_pin_interrupt>:


int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
80027ac0:	eb cd 40 c0 	pushm	r6-r7,lr
80027ac4:	1a 97       	mov	r7,sp
80027ac6:	20 3d       	sub	sp,12
80027ac8:	49 b6       	lddpc	r6,80027b34 <gpio_enable_pin_interrupt+0x74>
80027aca:	1e 26       	rsub	r6,pc
80027acc:	ef 4c ff f8 	st.w	r7[-8],r12
80027ad0:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];
80027ad4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027ad8:	a5 98       	lsr	r8,0x5
80027ada:	a9 78       	lsl	r8,0x9
80027adc:	e0 28 e0 00 	sub	r8,57344
80027ae0:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
80027ae4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027ae8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027aec:	30 19       	mov	r9,1
80027aee:	f2 08 09 48 	lsl	r8,r9,r8
80027af2:	10 99       	mov	r9,r8
80027af4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027af8:	f1 49 00 c4 	st.w	r8[196],r9

  // Configure the edge detector.
  if(GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode))
80027afc:	ee fb ff f4 	ld.w	r11,r7[-12]
80027b00:	ee fc ff f8 	ld.w	r12,r7[-8]
80027b04:	c7 4f       	rcall	800279ec <gpio_configure_edge_detector>
80027b06:	18 98       	mov	r8,r12
80027b08:	58 18       	cp.w	r8,1
80027b0a:	c0 31       	brne	80027b10 <gpio_enable_pin_interrupt+0x50>
    return(GPIO_INVALID_ARGUMENT);
80027b0c:	30 18       	mov	r8,1
80027b0e:	c0 e8       	rjmp	80027b2a <gpio_enable_pin_interrupt+0x6a>

  // Enable interrupt.
  gpio_port->iers = 1 << (pin & 0x1F);
80027b10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b14:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027b18:	30 19       	mov	r9,1
80027b1a:	f2 08 09 48 	lsl	r8,r9,r8
80027b1e:	10 99       	mov	r9,r8
80027b20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027b24:	f1 49 00 94 	st.w	r8[148],r9

  return GPIO_SUCCESS;
80027b28:	30 08       	mov	r8,0
}
80027b2a:	10 9c       	mov	r12,r8
80027b2c:	2f dd       	sub	sp,-12
80027b2e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027b32:	00 00       	add	r0,r0
80027b34:	80 02       	ld.sh	r2,r0[0x0]
80027b36:	79 4e       	ld.w	lr,r12[0x50]

80027b38 <gpio_disable_pin_interrupt>:


void gpio_disable_pin_interrupt(uint32_t pin)
{
80027b38:	eb cd 40 80 	pushm	r7,lr
80027b3c:	1a 97       	mov	r7,sp
80027b3e:	20 2d       	sub	sp,8
80027b40:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027b44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b48:	a5 98       	lsr	r8,0x5
80027b4a:	a9 78       	lsl	r8,0x9
80027b4c:	e0 28 e0 00 	sub	r8,57344
80027b50:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ierc = 1 << (pin & 0x1F);
80027b54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b58:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027b5c:	30 19       	mov	r9,1
80027b5e:	f2 08 09 48 	lsl	r8,r9,r8
80027b62:	10 99       	mov	r9,r8
80027b64:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027b68:	f1 49 00 98 	st.w	r8[152],r9
}
80027b6c:	2f ed       	sub	sp,-8
80027b6e:	e3 cd 80 80 	ldm	sp++,r7,pc

80027b72 <gpio_get_pin_interrupt_flag>:


int gpio_get_pin_interrupt_flag(uint32_t pin)
{
80027b72:	eb cd 40 80 	pushm	r7,lr
80027b76:	1a 97       	mov	r7,sp
80027b78:	20 2d       	sub	sp,8
80027b7a:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027b7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b82:	a5 98       	lsr	r8,0x5
80027b84:	a9 78       	lsl	r8,0x9
80027b86:	e0 28 e0 00 	sub	r8,57344
80027b8a:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->ifr >> (pin & 0x1F)) & 1;
80027b8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027b92:	f0 f9 00 d0 	ld.w	r9,r8[208]
80027b96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b9a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027b9e:	f2 08 0a 48 	lsr	r8,r9,r8
80027ba2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
80027ba6:	10 9c       	mov	r12,r8
80027ba8:	2f ed       	sub	sp,-8
80027baa:	e3 cd 80 80 	ldm	sp++,r7,pc

80027bae <gpio_clear_pin_interrupt_flag>:


void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
80027bae:	eb cd 40 80 	pushm	r7,lr
80027bb2:	1a 97       	mov	r7,sp
80027bb4:	20 2d       	sub	sp,8
80027bb6:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027bba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027bbe:	a5 98       	lsr	r8,0x5
80027bc0:	a9 78       	lsl	r8,0x9
80027bc2:	e0 28 e0 00 	sub	r8,57344
80027bc6:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ifrc = 1 << (pin & 0x1F);

  // Restore interrupt enable register.
  gpio_port->ier = gpio_ier;
#else
  gpio_port->ifrc = 1 << (pin & 0x1F);
80027bca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027bce:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027bd2:	30 19       	mov	r9,1
80027bd4:	f2 08 09 48 	lsl	r8,r9,r8
80027bd8:	10 99       	mov	r9,r8
80027bda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027bde:	f1 49 00 d8 	st.w	r8[216],r9
#endif
}
80027be2:	2f ed       	sub	sp,-8
80027be4:	e3 cd 80 80 	ldm	sp++,r7,pc

80027be8 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80027be8:	eb cd 40 c0 	pushm	r6-r7,lr
80027bec:	1a 97       	mov	r7,sp
  // Catch unregistered interrupts.
  while (true);
80027bee:	c0 08       	rjmp	80027bee <_unhandled_interrupt+0x6>

80027bf0 <_get_interrupt_handler>:
 * \return Interrupt handler to execute.
 *
 * \note Taken and adapted from Newlib.
 */
__int_handler _get_interrupt_handler(unsigned int int_level)
{
80027bf0:	eb cd 40 c0 	pushm	r6-r7,lr
80027bf4:	1a 97       	mov	r7,sp
80027bf6:	20 3d       	sub	sp,12
80027bf8:	49 a6       	lddpc	r6,80027c60 <_get_interrupt_handler+0x70>
80027bfa:	1e 26       	rsub	r6,pc
80027bfc:	ef 4c ff f4 	st.w	r7[-12],r12
  // ICR3 is mapped first, ICR0 last.
  // Code in exception.S puts int_level in R12 which is used by AVR32-GCC to
  // pass a single argument to a function.
  unsigned int int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80027c00:	fe 78 00 00 	mov	r8,-65536
80027c04:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027c08:	f2 09 11 03 	rsub	r9,r9,3
80027c0c:	28 09       	sub	r9,-128
80027c0e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80027c12:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int int_req = AVR32_INTC.irr[int_grp];
80027c16:	fe 78 00 00 	mov	r8,-65536
80027c1a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027c1e:	2c 09       	sub	r9,-64
80027c20:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80027c24:	ef 48 ff fc 	st.w	r7[-4],r8
  // exception.S will provide the interrupt handler with a clean interrupt stack
  // frame, with nothing more pushed onto the stack. The interrupt handler must
  // manage the `rete' instruction, what can be done thanks to pure assembly,
  // inline assembly or the `__attribute__((__interrupt__))' C function
  // attribute.
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
80027c28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027c2c:	58 08       	cp.w	r8,0
80027c2e:	c1 40       	breq	80027c56 <_get_interrupt_handler+0x66>
80027c30:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027c34:	ec f8 02 78 	ld.w	r8,r6[632]
80027c38:	a1 79       	lsl	r9,0x1
80027c3a:	2f f9       	sub	r9,-1
80027c3c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80027c40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027c44:	f0 08 12 00 	clz	r8,r8
80027c48:	f0 08 11 1f 	rsub	r8,r8,31
80027c4c:	a3 68       	lsl	r8,0x2
80027c4e:	f2 08 00 08 	add	r8,r9,r8
80027c52:	70 08       	ld.w	r8,r8[0x0]
80027c54:	c0 28       	rjmp	80027c58 <_get_interrupt_handler+0x68>
80027c56:	30 08       	mov	r8,0
}
80027c58:	10 9c       	mov	r12,r8
80027c5a:	2f dd       	sub	sp,-12
80027c5c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027c60:	80 02       	ld.sh	r2,r0[0x0]
80027c62:	7a 7e       	ld.w	lr,sp[0x1c]

80027c64 <INTC_init_evba>:

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
80027c64:	eb cd 40 c0 	pushm	r6-r7,lr
80027c68:	1a 97       	mov	r7,sp
80027c6a:	48 56       	lddpc	r6,80027c7c <INTC_init_evba+0x18>
80027c6c:	1e 26       	rsub	r6,pc
  Set_system_register(AVR32_EVBA, (int)&_evba );
80027c6e:	ec f8 07 7c 	ld.w	r8,r6[1916]
80027c72:	e3 b8 00 01 	mtsr	0x4,r8
}
80027c76:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027c7a:	00 00       	add	r0,r0
80027c7c:	80 02       	ld.sh	r2,r0[0x0]
80027c7e:	7a f0       	ld.w	r0,sp[0x3c]

80027c80 <INTC_init_interrupts>:

void INTC_init_interrupts(void)
{
80027c80:	eb cd 40 c0 	pushm	r6-r7,lr
80027c84:	1a 97       	mov	r7,sp
80027c86:	20 2d       	sub	sp,8
80027c88:	4a 16       	lddpc	r6,80027d0c <INTC_init_interrupts+0x8c>
80027c8a:	1e 26       	rsub	r6,pc
  unsigned int int_grp, int_req;

  INTC_init_evba();
80027c8c:	ce cf       	rcall	80027c64 <INTC_init_evba>

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80027c8e:	30 08       	mov	r8,0
80027c90:	ef 48 ff f8 	st.w	r7[-8],r8
80027c94:	c3 38       	rjmp	80027cfa <INTC_init_interrupts+0x7a>
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80027c96:	30 08       	mov	r8,0
80027c98:	ef 48 ff fc 	st.w	r7[-4],r8
80027c9c:	c1 68       	rjmp	80027cc8 <INTC_init_interrupts+0x48>
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80027c9e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027ca2:	ec f8 02 78 	ld.w	r8,r6[632]
80027ca6:	a1 79       	lsl	r9,0x1
80027ca8:	2f f9       	sub	r9,-1
80027caa:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80027cae:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027cb2:	a3 68       	lsl	r8,0x2
80027cb4:	f2 08 00 08 	add	r8,r9,r8
80027cb8:	fe c9 00 d0 	sub	r9,pc,208
80027cbc:	91 09       	st.w	r8[0x0],r9

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80027cbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027cc2:	2f f8       	sub	r8,-1
80027cc4:	ef 48 ff fc 	st.w	r7[-4],r8
80027cc8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027ccc:	ec f8 02 78 	ld.w	r8,r6[632]
80027cd0:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]
80027cd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027cd8:	10 39       	cp.w	r9,r8
80027cda:	fe 9b ff e2 	brhi	80027c9e <INTC_init_interrupts+0x1e>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
80027cde:	fe 78 00 00 	mov	r8,-65536
80027ce2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027ce6:	ec fa 03 cc 	ld.w	r10,r6[972]
80027cea:	74 0a       	ld.w	r10,r10[0x0]
80027cec:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  unsigned int int_grp, int_req;

  INTC_init_evba();

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80027cf0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027cf4:	2f f8       	sub	r8,-1
80027cf6:	ef 48 ff f8 	st.w	r7[-8],r8
80027cfa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027cfe:	e0 48 00 2e 	cp.w	r8,46
80027d02:	fe 98 ff ca 	brls	80027c96 <INTC_init_interrupts+0x16>
    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
  }
}
80027d06:	2f ed       	sub	sp,-8
80027d08:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027d0c:	80 02       	ld.sh	r2,r0[0x0]
80027d0e:	7b 0e       	ld.w	lr,sp[0x40]

80027d10 <INTC_register_interrupt>:


void INTC_register_interrupt(__int_handler handler, unsigned int irq, unsigned int int_level)
{
80027d10:	eb cd 40 c0 	pushm	r6-r7,lr
80027d14:	1a 97       	mov	r7,sp
80027d16:	20 4d       	sub	sp,16
80027d18:	49 86       	lddpc	r6,80027d78 <INTC_register_interrupt+0x68>
80027d1a:	1e 26       	rsub	r6,pc
80027d1c:	ef 4c ff f8 	st.w	r7[-8],r12
80027d20:	ef 4b ff f4 	st.w	r7[-12],r11
80027d24:	ef 4a ff f0 	st.w	r7[-16],r10
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80027d28:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027d2c:	a5 98       	lsr	r8,0x5
80027d2e:	ef 48 ff fc 	st.w	r7[-4],r8

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
80027d32:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027d36:	ec f8 02 78 	ld.w	r8,r6[632]
80027d3a:	a1 79       	lsl	r9,0x1
80027d3c:	2f f9       	sub	r9,-1
80027d3e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80027d42:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027d46:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027d4a:	a3 68       	lsl	r8,0x2
80027d4c:	f2 08 00 08 	add	r8,r9,r8
80027d50:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027d54:	91 09       	st.w	r8[0x0],r9
  // Program the corresponding IPRX register to set the interrupt priority level
  // and the interrupt vector offset that will be fetched by the core interrupt
  // system.
  // NOTE: The _intx functions are intermediate assembly functions between the
  // core interrupt system and the user interrupt handler.
  AVR32_INTC.ipr[int_grp] = ipr_val[int_level & (AVR32_INTC_IPR_INTLEVEL_MASK >> AVR32_INTC_IPR_INTLEVEL_OFFSET)];
80027d56:	fe 78 00 00 	mov	r8,-65536
80027d5a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027d5e:	ee fa ff f0 	ld.w	r10,r7[-16]
80027d62:	f7 da c0 02 	bfextu	r11,r10,0x0,0x2
80027d66:	ec fa 03 cc 	ld.w	r10,r6[972]
80027d6a:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
80027d6e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80027d72:	2f cd       	sub	sp,-16
80027d74:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027d78:	80 02       	ld.sh	r2,r0[0x0]
80027d7a:	7b 9e       	ld.w	lr,sp[0x64]

80027d7c <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80027d7c:	eb cd 40 80 	pushm	r7,lr
80027d80:	1a 97       	mov	r7,sp
80027d82:	20 1d       	sub	sp,4
80027d84:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80027d88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027d8c:	e6 18 00 01 	andh	r8,0x1,COH
80027d90:	5f 08       	sreq	r8
80027d92:	5c 58       	castu.b	r8
}
80027d94:	10 9c       	mov	r12,r8
80027d96:	2f fd       	sub	sp,-4
80027d98:	e3 cd 80 80 	ldm	sp++,r7,pc

80027d9c <pdca_get_handler>:
#include "compiler.h"
#include "pdca.h"


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
80027d9c:	eb cd 40 80 	pushm	r7,lr
80027da0:	1a 97       	mov	r7,sp
80027da2:	20 2d       	sub	sp,8
80027da4:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
80027da8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027dac:	a7 68       	lsl	r8,0x6
80027dae:	e2 38 00 00 	sub	r8,196608
80027db2:	ef 48 ff fc 	st.w	r7[-4],r8

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
80027db6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027dba:	58 f8       	cp.w	r8,15
80027dbc:	e0 88 00 04 	brls	80027dc4 <pdca_get_handler+0x28>
    return (volatile avr32_pdca_channel_t *)PDCA_INVALID_ARGUMENT;
80027dc0:	3f f8       	mov	r8,-1
80027dc2:	c0 38       	rjmp	80027dc8 <pdca_get_handler+0x2c>

  return pdca_channel;
80027dc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80027dc8:	10 9c       	mov	r12,r8
80027dca:	2f ed       	sub	sp,-8
80027dcc:	e3 cd 80 80 	ldm	sp++,r7,pc

80027dd0 <pdca_init_channel>:


int pdca_init_channel(unsigned int pdca_ch_number, const pdca_channel_options_t *opt)
{
80027dd0:	eb cd 40 c0 	pushm	r6-r7,lr
80027dd4:	1a 97       	mov	r7,sp
80027dd6:	20 4d       	sub	sp,16
80027dd8:	4b 26       	lddpc	r6,80027ea0 <pdca_init_channel+0xd0>
80027dda:	1e 26       	rsub	r6,pc
80027ddc:	ef 4c ff f4 	st.w	r7[-12],r12
80027de0:	ef 4b ff f0 	st.w	r7[-16],r11
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027de4:	ee fc ff f4 	ld.w	r12,r7[-12]
80027de8:	f0 16 00 27 	mcall	r6[156]
80027dec:	18 98       	mov	r8,r12
80027dee:	ef 48 ff f8 	st.w	r7[-8],r8

  pdca_disable_interrupt_transfer_complete(pdca_ch_number); // disable channel interrupt
80027df2:	ee fc ff f4 	ld.w	r12,r7[-12]
80027df6:	f0 16 00 98 	mcall	r6[608]
  pdca_disable_interrupt_reload_counter_zero(pdca_ch_number); // disable channel interrupt
80027dfa:	ee fc ff f4 	ld.w	r12,r7[-12]
80027dfe:	f0 16 01 fe 	mcall	r6[2040]

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80027e02:	e1 b8 00 00 	mfsr	r8,0x0
80027e06:	10 9c       	mov	r12,r8
80027e08:	cb af       	rcall	80027d7c <cpu_irq_is_enabled_flags>
80027e0a:	18 98       	mov	r8,r12
80027e0c:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80027e10:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027e14:	30 08       	mov	r8,0
80027e16:	f0 09 18 00 	cp.b	r9,r8
80027e1a:	c0 20       	breq	80027e1e <pdca_init_channel+0x4e>
80027e1c:	d3 03       	ssrf	0x10
  pdca_channel->mar = (unsigned long)opt->addr;
80027e1e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027e22:	70 08       	ld.w	r8,r8[0x0]
80027e24:	10 99       	mov	r9,r8
80027e26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027e2a:	91 09       	st.w	r8[0x0],r9
  pdca_channel->tcr = opt->size;
80027e2c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027e30:	70 19       	ld.w	r9,r8[0x4]
80027e32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027e36:	91 29       	st.w	r8[0x8],r9
  pdca_channel->psr = opt->pid;
80027e38:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027e3c:	70 49       	ld.w	r9,r8[0x10]
80027e3e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027e42:	91 19       	st.w	r8[0x4],r9
  pdca_channel->marr = (unsigned long)opt->r_addr;
80027e44:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027e48:	70 28       	ld.w	r8,r8[0x8]
80027e4a:	10 99       	mov	r9,r8
80027e4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027e50:	91 39       	st.w	r8[0xc],r9
  pdca_channel->tcrr = opt->r_size;
80027e52:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027e56:	70 39       	ld.w	r9,r8[0xc]
80027e58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027e5c:	91 49       	st.w	r8[0x10],r9
  pdca_channel->mr =
#if (AVR32_PDCA_H_VERSION >= 120)
opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
80027e5e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027e62:	f1 38 00 18 	ld.ub	r8,r8[24]
80027e66:	a3 68       	lsl	r8,0x2
  pdca_channel->mar = (unsigned long)opt->addr;
  pdca_channel->tcr = opt->size;
  pdca_channel->psr = opt->pid;
  pdca_channel->marr = (unsigned long)opt->r_addr;
  pdca_channel->tcrr = opt->r_size;
  pdca_channel->mr =
80027e68:	10 99       	mov	r9,r8
80027e6a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027e6e:	70 58       	ld.w	r8,r8[0x14]
#if (AVR32_PDCA_H_VERSION >= 120)
opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
80027e70:	10 49       	or	r9,r8
  pdca_channel->mar = (unsigned long)opt->addr;
  pdca_channel->tcr = opt->size;
  pdca_channel->psr = opt->pid;
  pdca_channel->marr = (unsigned long)opt->r_addr;
  pdca_channel->tcrr = opt->r_size;
  pdca_channel->mr =
80027e72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027e76:	91 69       	st.w	r8[0x18],r9
#if (AVR32_PDCA_H_VERSION >= 120)
opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
#endif
                     opt->transfer_size << AVR32_PDCA_SIZE_OFFSET;
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80027e78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027e7c:	e0 69 01 00 	mov	r9,256
80027e80:	91 59       	st.w	r8[0x14],r9
  pdca_channel->isr;
80027e82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027e86:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80027e88:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027e8c:	30 08       	mov	r8,0
80027e8e:	f0 09 18 00 	cp.b	r9,r8
80027e92:	c0 20       	breq	80027e96 <pdca_init_channel+0xc6>
80027e94:	d5 03       	csrf	0x10

  return PDCA_SUCCESS;
80027e96:	30 08       	mov	r8,0
}
80027e98:	10 9c       	mov	r12,r8
80027e9a:	2f cd       	sub	sp,-16
80027e9c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027ea0:	80 02       	ld.sh	r2,r0[0x0]
80027ea2:	7c 5e       	ld.w	lr,lr[0x14]

80027ea4 <pdca_get_channel_status>:


unsigned int pdca_get_channel_status(unsigned int pdca_ch_number)
{
80027ea4:	eb cd 40 c0 	pushm	r6-r7,lr
80027ea8:	1a 97       	mov	r7,sp
80027eaa:	20 2d       	sub	sp,8
80027eac:	48 a6       	lddpc	r6,80027ed4 <pdca_get_channel_status+0x30>
80027eae:	1e 26       	rsub	r6,pc
80027eb0:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027eb4:	ee fc ff f8 	ld.w	r12,r7[-8]
80027eb8:	f0 16 00 27 	mcall	r6[156]
80027ebc:	18 98       	mov	r8,r12
80027ebe:	ef 48 ff fc 	st.w	r7[-4],r8

  return (pdca_channel->sr & AVR32_PDCA_TEN_MASK) != 0;
80027ec2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027ec6:	70 78       	ld.w	r8,r8[0x1c]
80027ec8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
80027ecc:	10 9c       	mov	r12,r8
80027ece:	2f ed       	sub	sp,-8
80027ed0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027ed4:	80 02       	ld.sh	r2,r0[0x0]
80027ed6:	7d 32       	ld.w	r2,lr[0x4c]

80027ed8 <pdca_disable>:


void pdca_disable(unsigned int pdca_ch_number)
{
80027ed8:	eb cd 40 c0 	pushm	r6-r7,lr
80027edc:	1a 97       	mov	r7,sp
80027ede:	20 2d       	sub	sp,8
80027ee0:	48 96       	lddpc	r6,80027f04 <pdca_disable+0x2c>
80027ee2:	1e 26       	rsub	r6,pc
80027ee4:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027ee8:	ee fc ff f8 	ld.w	r12,r7[-8]
80027eec:	f0 16 00 27 	mcall	r6[156]
80027ef0:	18 98       	mov	r8,r12
80027ef2:	ef 48 ff fc 	st.w	r7[-4],r8

  // Disable transfer
  pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
80027ef6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027efa:	30 29       	mov	r9,2
80027efc:	91 59       	st.w	r8[0x14],r9

}
80027efe:	2f ed       	sub	sp,-8
80027f00:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027f04:	80 02       	ld.sh	r2,r0[0x0]
80027f06:	7d 66       	ld.w	r6,lr[0x58]

80027f08 <pdca_enable>:


void pdca_enable(unsigned int pdca_ch_number)
{
80027f08:	eb cd 40 c0 	pushm	r6-r7,lr
80027f0c:	1a 97       	mov	r7,sp
80027f0e:	20 2d       	sub	sp,8
80027f10:	48 96       	lddpc	r6,80027f34 <pdca_enable+0x2c>
80027f12:	1e 26       	rsub	r6,pc
80027f14:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027f18:	ee fc ff f8 	ld.w	r12,r7[-8]
80027f1c:	f0 16 00 27 	mcall	r6[156]
80027f20:	18 98       	mov	r8,r12
80027f22:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable transfer
  pdca_channel->cr = AVR32_PDCA_TEN_MASK;
80027f26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027f2a:	30 19       	mov	r9,1
80027f2c:	91 59       	st.w	r8[0x14],r9
}
80027f2e:	2f ed       	sub	sp,-8
80027f30:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027f34:	80 02       	ld.sh	r2,r0[0x0]
80027f36:	7d 96       	ld.w	r6,lr[0x64]

80027f38 <pdca_get_load_size>:


unsigned int pdca_get_load_size(unsigned int pdca_ch_number)
{
80027f38:	eb cd 40 c0 	pushm	r6-r7,lr
80027f3c:	1a 97       	mov	r7,sp
80027f3e:	20 2d       	sub	sp,8
80027f40:	48 96       	lddpc	r6,80027f64 <pdca_get_load_size+0x2c>
80027f42:	1e 26       	rsub	r6,pc
80027f44:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027f48:	ee fc ff f8 	ld.w	r12,r7[-8]
80027f4c:	f0 16 00 27 	mcall	r6[156]
80027f50:	18 98       	mov	r8,r12
80027f52:	ef 48 ff fc 	st.w	r7[-4],r8

  return pdca_channel->tcr;
80027f56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027f5a:	70 28       	ld.w	r8,r8[0x8]
}
80027f5c:	10 9c       	mov	r12,r8
80027f5e:	2f ed       	sub	sp,-8
80027f60:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027f64:	80 02       	ld.sh	r2,r0[0x0]
80027f66:	7d c6       	ld.w	r6,lr[0x70]

80027f68 <pdca_load_channel>:


void pdca_load_channel(unsigned int pdca_ch_number, volatile void *addr, unsigned int size)
{
80027f68:	eb cd 40 c0 	pushm	r6-r7,lr
80027f6c:	1a 97       	mov	r7,sp
80027f6e:	20 5d       	sub	sp,20
80027f70:	49 d6       	lddpc	r6,80027fe4 <pdca_load_channel+0x7c>
80027f72:	1e 26       	rsub	r6,pc
80027f74:	ef 4c ff f4 	st.w	r7[-12],r12
80027f78:	ef 4b ff f0 	st.w	r7[-16],r11
80027f7c:	ef 4a ff ec 	st.w	r7[-20],r10
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027f80:	ee fc ff f4 	ld.w	r12,r7[-12]
80027f84:	f0 16 00 27 	mcall	r6[156]
80027f88:	18 98       	mov	r8,r12
80027f8a:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80027f8e:	e1 b8 00 00 	mfsr	r8,0x0
80027f92:	10 9c       	mov	r12,r8
80027f94:	cf 4e       	rcall	80027d7c <cpu_irq_is_enabled_flags>
80027f96:	18 98       	mov	r8,r12
80027f98:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80027f9c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027fa0:	30 08       	mov	r8,0
80027fa2:	f0 09 18 00 	cp.b	r9,r8
80027fa6:	c0 20       	breq	80027faa <pdca_load_channel+0x42>
80027fa8:	d3 03       	ssrf	0x10
  pdca_channel->mar = (unsigned long)addr;
80027faa:	ee f9 ff f0 	ld.w	r9,r7[-16]
80027fae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027fb2:	91 09       	st.w	r8[0x0],r9
  pdca_channel->tcr = size;
80027fb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027fb8:	ee f9 ff ec 	ld.w	r9,r7[-20]
80027fbc:	91 29       	st.w	r8[0x8],r9
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80027fbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027fc2:	e0 69 01 00 	mov	r9,256
80027fc6:	91 59       	st.w	r8[0x14],r9
  pdca_channel->isr;
80027fc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027fcc:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80027fce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027fd2:	30 08       	mov	r8,0
80027fd4:	f0 09 18 00 	cp.b	r9,r8
80027fd8:	c0 20       	breq	80027fdc <pdca_load_channel+0x74>
80027fda:	d5 03       	csrf	0x10
}
80027fdc:	2f bd       	sub	sp,-20
80027fde:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027fe2:	00 00       	add	r0,r0
80027fe4:	80 02       	ld.sh	r2,r0[0x0]
80027fe6:	7d f6       	ld.w	r6,lr[0x7c]

80027fe8 <pdca_get_reload_size>:


unsigned int pdca_get_reload_size(unsigned int pdca_ch_number)
{
80027fe8:	eb cd 40 c0 	pushm	r6-r7,lr
80027fec:	1a 97       	mov	r7,sp
80027fee:	20 2d       	sub	sp,8
80027ff0:	48 96       	lddpc	r6,80028014 <pdca_get_reload_size+0x2c>
80027ff2:	1e 26       	rsub	r6,pc
80027ff4:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027ff8:	ee fc ff f8 	ld.w	r12,r7[-8]
80027ffc:	f0 16 00 27 	mcall	r6[156]
80028000:	18 98       	mov	r8,r12
80028002:	ef 48 ff fc 	st.w	r7[-4],r8

  return pdca_channel->tcrr;
80028006:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002800a:	70 48       	ld.w	r8,r8[0x10]
}
8002800c:	10 9c       	mov	r12,r8
8002800e:	2f ed       	sub	sp,-8
80028010:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028014:	80 02       	ld.sh	r2,r0[0x0]
80028016:	7e 76       	ld.w	r6,pc[0x1c]

80028018 <pdca_reload_channel>:


void pdca_reload_channel(unsigned int pdca_ch_number, volatile void *addr, unsigned int size)
{
80028018:	eb cd 40 c0 	pushm	r6-r7,lr
8002801c:	1a 97       	mov	r7,sp
8002801e:	20 5d       	sub	sp,20
80028020:	49 d6       	lddpc	r6,80028094 <pdca_reload_channel+0x7c>
80028022:	1e 26       	rsub	r6,pc
80028024:	ef 4c ff f4 	st.w	r7[-12],r12
80028028:	ef 4b ff f0 	st.w	r7[-16],r11
8002802c:	ef 4a ff ec 	st.w	r7[-20],r10
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80028030:	ee fc ff f4 	ld.w	r12,r7[-12]
80028034:	f0 16 00 27 	mcall	r6[156]
80028038:	18 98       	mov	r8,r12
8002803a:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
8002803e:	e1 b8 00 00 	mfsr	r8,0x0
80028042:	10 9c       	mov	r12,r8
80028044:	c9 ce       	rcall	80027d7c <cpu_irq_is_enabled_flags>
80028046:	18 98       	mov	r8,r12
80028048:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
8002804c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028050:	30 08       	mov	r8,0
80028052:	f0 09 18 00 	cp.b	r9,r8
80028056:	c0 20       	breq	8002805a <pdca_reload_channel+0x42>
80028058:	d3 03       	ssrf	0x10
  // set up next memory address
  pdca_channel->marr = (unsigned long)addr;
8002805a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002805e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028062:	91 39       	st.w	r8[0xc],r9
  // set up next memory size
  pdca_channel->tcrr = size;
80028064:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028068:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002806c:	91 49       	st.w	r8[0x10],r9
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
8002806e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028072:	e0 69 01 00 	mov	r9,256
80028076:	91 59       	st.w	r8[0x14],r9
  pdca_channel->isr;
80028078:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002807c:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
8002807e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028082:	30 08       	mov	r8,0
80028084:	f0 09 18 00 	cp.b	r9,r8
80028088:	c0 20       	breq	8002808c <pdca_reload_channel+0x74>
8002808a:	d5 03       	csrf	0x10
}
8002808c:	2f bd       	sub	sp,-20
8002808e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028092:	00 00       	add	r0,r0
80028094:	80 02       	ld.sh	r2,r0[0x0]
80028096:	7e a6       	ld.w	r6,pc[0x28]

80028098 <pdca_set_peripheral_select>:


void pdca_set_peripheral_select(unsigned int pdca_ch_number, unsigned int pid)
{
80028098:	eb cd 40 c0 	pushm	r6-r7,lr
8002809c:	1a 97       	mov	r7,sp
8002809e:	20 3d       	sub	sp,12
800280a0:	48 b6       	lddpc	r6,800280cc <pdca_set_peripheral_select+0x34>
800280a2:	1e 26       	rsub	r6,pc
800280a4:	ef 4c ff f8 	st.w	r7[-8],r12
800280a8:	ef 4b ff f4 	st.w	r7[-12],r11
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
800280ac:	ee fc ff f8 	ld.w	r12,r7[-8]
800280b0:	f0 16 00 27 	mcall	r6[156]
800280b4:	18 98       	mov	r8,r12
800280b6:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->psr = pid;
800280ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800280be:	ee f9 ff f4 	ld.w	r9,r7[-12]
800280c2:	91 19       	st.w	r8[0x4],r9
}
800280c4:	2f dd       	sub	sp,-12
800280c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800280ca:	00 00       	add	r0,r0
800280cc:	80 02       	ld.sh	r2,r0[0x0]
800280ce:	7f 26       	ld.w	r6,pc[0x48]

800280d0 <pdca_set_transfer_size>:


void pdca_set_transfer_size(unsigned int pdca_ch_number, unsigned int transfer_size)
{
800280d0:	eb cd 40 c0 	pushm	r6-r7,lr
800280d4:	1a 97       	mov	r7,sp
800280d6:	20 3d       	sub	sp,12
800280d8:	48 e6       	lddpc	r6,80028110 <pdca_set_transfer_size+0x40>
800280da:	1e 26       	rsub	r6,pc
800280dc:	ef 4c ff f8 	st.w	r7[-8],r12
800280e0:	ef 4b ff f4 	st.w	r7[-12],r11
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
800280e4:	ee fc ff f8 	ld.w	r12,r7[-8]
800280e8:	f0 16 00 27 	mcall	r6[156]
800280ec:	18 98       	mov	r8,r12
800280ee:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->mr = (pdca_channel->mr & ~AVR32_PDCA_SIZE_MASK) |
800280f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800280f6:	70 68       	ld.w	r8,r8[0x18]
800280f8:	10 99       	mov	r9,r8
800280fa:	e0 19 ff fc 	andl	r9,0xfffc
800280fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028102:	10 49       	or	r9,r8
80028104:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028108:	91 69       	st.w	r8[0x18],r9
                     transfer_size << AVR32_PDCA_SIZE_OFFSET;
}
8002810a:	2f dd       	sub	sp,-12
8002810c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028110:	80 02       	ld.sh	r2,r0[0x0]
80028112:	7f 5e       	ld.w	lr,pc[0x54]

80028114 <pdca_disable_event_trigger>:

#if (AVR32_PDCA_H_VERSION >= 120)


void pdca_disable_event_trigger(unsigned int pdca_ch_number)
{
80028114:	eb cd 40 c0 	pushm	r6-r7,lr
80028118:	1a 97       	mov	r7,sp
8002811a:	20 2d       	sub	sp,8
8002811c:	48 b6       	lddpc	r6,80028148 <pdca_disable_event_trigger+0x34>
8002811e:	1e 26       	rsub	r6,pc
80028120:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80028124:	ee fc ff f8 	ld.w	r12,r7[-8]
80028128:	f0 16 00 27 	mcall	r6[156]
8002812c:	18 98       	mov	r8,r12
8002812e:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->mr &= ~AVR32_PDCA_ETRIG_MASK;
80028132:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028136:	70 68       	ld.w	r8,r8[0x18]
80028138:	10 99       	mov	r9,r8
8002813a:	a3 c9       	cbr	r9,0x2
8002813c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028140:	91 69       	st.w	r8[0x18],r9
}
80028142:	2f ed       	sub	sp,-8
80028144:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028148:	80 02       	ld.sh	r2,r0[0x0]
8002814a:	7f a2       	ld.w	r2,pc[0x68]

8002814c <pdca_enable_event_trigger>:


void pdca_enable_event_trigger(unsigned int pdca_ch_number)
{
8002814c:	eb cd 40 c0 	pushm	r6-r7,lr
80028150:	1a 97       	mov	r7,sp
80028152:	20 2d       	sub	sp,8
80028154:	48 b6       	lddpc	r6,80028180 <pdca_enable_event_trigger+0x34>
80028156:	1e 26       	rsub	r6,pc
80028158:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
8002815c:	ee fc ff f8 	ld.w	r12,r7[-8]
80028160:	f0 16 00 27 	mcall	r6[156]
80028164:	18 98       	mov	r8,r12
80028166:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->mr |= AVR32_PDCA_ETRIG_MASK;
8002816a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002816e:	70 68       	ld.w	r8,r8[0x18]
80028170:	10 99       	mov	r9,r8
80028172:	a3 a9       	sbr	r9,0x2
80028174:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028178:	91 69       	st.w	r8[0x18],r9
}
8002817a:	2f ed       	sub	sp,-8
8002817c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028180:	80 02       	ld.sh	r2,r0[0x0]
80028182:	7f da       	ld.w	r10,pc[0x74]

80028184 <pdca_disable_interrupt_transfer_error>:

#endif


void pdca_disable_interrupt_transfer_error(unsigned int pdca_ch_number)
{
80028184:	eb cd 40 c0 	pushm	r6-r7,lr
80028188:	1a 97       	mov	r7,sp
8002818a:	20 3d       	sub	sp,12
8002818c:	49 66       	lddpc	r6,800281e4 <pdca_disable_interrupt_transfer_error+0x60>
8002818e:	1e 26       	rsub	r6,pc
80028190:	ef 4c ff f4 	st.w	r7[-12],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80028194:	ee fc ff f4 	ld.w	r12,r7[-12]
80028198:	f0 16 00 27 	mcall	r6[156]
8002819c:	18 98       	mov	r8,r12
8002819e:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
800281a2:	e1 b8 00 00 	mfsr	r8,0x0
800281a6:	10 9c       	mov	r12,r8
800281a8:	fe b0 fd ea 	rcall	80027d7c <cpu_irq_is_enabled_flags>
800281ac:	18 98       	mov	r8,r12
800281ae:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
800281b2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800281b6:	30 08       	mov	r8,0
800281b8:	f0 09 18 00 	cp.b	r9,r8
800281bc:	c0 20       	breq	800281c0 <pdca_disable_interrupt_transfer_error+0x3c>
800281be:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_TERR_MASK;
800281c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800281c4:	30 49       	mov	r9,4
800281c6:	91 99       	st.w	r8[0x24],r9
  pdca_channel->isr;
800281c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800281cc:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
800281ce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800281d2:	30 08       	mov	r8,0
800281d4:	f0 09 18 00 	cp.b	r9,r8
800281d8:	c0 20       	breq	800281dc <pdca_disable_interrupt_transfer_error+0x58>
800281da:	d5 03       	csrf	0x10
}
800281dc:	2f dd       	sub	sp,-12
800281de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800281e2:	00 00       	add	r0,r0
800281e4:	80 02       	ld.sh	r2,r0[0x0]
800281e6:	80 12       	ld.sh	r2,r0[0x2]

800281e8 <pdca_enable_interrupt_transfer_error>:


void pdca_enable_interrupt_transfer_error(unsigned int pdca_ch_number)
{
800281e8:	eb cd 40 c0 	pushm	r6-r7,lr
800281ec:	1a 97       	mov	r7,sp
800281ee:	20 2d       	sub	sp,8
800281f0:	48 96       	lddpc	r6,80028214 <pdca_enable_interrupt_transfer_error+0x2c>
800281f2:	1e 26       	rsub	r6,pc
800281f4:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
800281f8:	ee fc ff f8 	ld.w	r12,r7[-8]
800281fc:	f0 16 00 27 	mcall	r6[156]
80028200:	18 98       	mov	r8,r12
80028202:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->ier = AVR32_PDCA_TERR_MASK;
80028206:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002820a:	30 49       	mov	r9,4
8002820c:	91 89       	st.w	r8[0x20],r9
}
8002820e:	2f ed       	sub	sp,-8
80028210:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028214:	80 02       	ld.sh	r2,r0[0x0]
80028216:	80 76       	ld.sh	r6,r0[0xe]

80028218 <pdca_disable_interrupt_transfer_complete>:


void pdca_disable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
80028218:	eb cd 40 c0 	pushm	r6-r7,lr
8002821c:	1a 97       	mov	r7,sp
8002821e:	20 3d       	sub	sp,12
80028220:	49 66       	lddpc	r6,80028278 <pdca_disable_interrupt_transfer_complete+0x60>
80028222:	1e 26       	rsub	r6,pc
80028224:	ef 4c ff f4 	st.w	r7[-12],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80028228:	ee fc ff f4 	ld.w	r12,r7[-12]
8002822c:	f0 16 00 27 	mcall	r6[156]
80028230:	18 98       	mov	r8,r12
80028232:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80028236:	e1 b8 00 00 	mfsr	r8,0x0
8002823a:	10 9c       	mov	r12,r8
8002823c:	fe b0 fd a0 	rcall	80027d7c <cpu_irq_is_enabled_flags>
80028240:	18 98       	mov	r8,r12
80028242:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80028246:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002824a:	30 08       	mov	r8,0
8002824c:	f0 09 18 00 	cp.b	r9,r8
80028250:	c0 20       	breq	80028254 <pdca_disable_interrupt_transfer_complete+0x3c>
80028252:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_TRC_MASK;
80028254:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028258:	30 29       	mov	r9,2
8002825a:	91 99       	st.w	r8[0x24],r9
  pdca_channel->isr;
8002825c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028260:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80028262:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028266:	30 08       	mov	r8,0
80028268:	f0 09 18 00 	cp.b	r9,r8
8002826c:	c0 20       	breq	80028270 <pdca_disable_interrupt_transfer_complete+0x58>
8002826e:	d5 03       	csrf	0x10
}
80028270:	2f dd       	sub	sp,-12
80028272:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028276:	00 00       	add	r0,r0
80028278:	80 02       	ld.sh	r2,r0[0x0]
8002827a:	80 a6       	ld.uh	r6,r0[0x4]

8002827c <pdca_enable_interrupt_transfer_complete>:


void pdca_enable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
8002827c:	eb cd 40 c0 	pushm	r6-r7,lr
80028280:	1a 97       	mov	r7,sp
80028282:	20 2d       	sub	sp,8
80028284:	48 96       	lddpc	r6,800282a8 <pdca_enable_interrupt_transfer_complete+0x2c>
80028286:	1e 26       	rsub	r6,pc
80028288:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
8002828c:	ee fc ff f8 	ld.w	r12,r7[-8]
80028290:	f0 16 00 27 	mcall	r6[156]
80028294:	18 98       	mov	r8,r12
80028296:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->ier = AVR32_PDCA_TRC_MASK;
8002829a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002829e:	30 29       	mov	r9,2
800282a0:	91 89       	st.w	r8[0x20],r9
}
800282a2:	2f ed       	sub	sp,-8
800282a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800282a8:	80 02       	ld.sh	r2,r0[0x0]
800282aa:	81 0a       	st.w	r0[0x0],r10

800282ac <pdca_disable_interrupt_reload_counter_zero>:


void pdca_disable_interrupt_reload_counter_zero(unsigned int pdca_ch_number)
{
800282ac:	eb cd 40 c0 	pushm	r6-r7,lr
800282b0:	1a 97       	mov	r7,sp
800282b2:	20 3d       	sub	sp,12
800282b4:	49 66       	lddpc	r6,8002830c <pdca_disable_interrupt_reload_counter_zero+0x60>
800282b6:	1e 26       	rsub	r6,pc
800282b8:	ef 4c ff f4 	st.w	r7[-12],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
800282bc:	ee fc ff f4 	ld.w	r12,r7[-12]
800282c0:	f0 16 00 27 	mcall	r6[156]
800282c4:	18 98       	mov	r8,r12
800282c6:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
800282ca:	e1 b8 00 00 	mfsr	r8,0x0
800282ce:	10 9c       	mov	r12,r8
800282d0:	fe b0 fd 56 	rcall	80027d7c <cpu_irq_is_enabled_flags>
800282d4:	18 98       	mov	r8,r12
800282d6:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
800282da:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800282de:	30 08       	mov	r8,0
800282e0:	f0 09 18 00 	cp.b	r9,r8
800282e4:	c0 20       	breq	800282e8 <pdca_disable_interrupt_reload_counter_zero+0x3c>
800282e6:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_RCZ_MASK;
800282e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800282ec:	30 19       	mov	r9,1
800282ee:	91 99       	st.w	r8[0x24],r9
  pdca_channel->isr;
800282f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800282f4:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
800282f6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800282fa:	30 08       	mov	r8,0
800282fc:	f0 09 18 00 	cp.b	r9,r8
80028300:	c0 20       	breq	80028304 <pdca_disable_interrupt_reload_counter_zero+0x58>
80028302:	d5 03       	csrf	0x10
}
80028304:	2f dd       	sub	sp,-12
80028306:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002830a:	00 00       	add	r0,r0
8002830c:	80 02       	ld.sh	r2,r0[0x0]
8002830e:	81 3a       	st.w	r0[0xc],r10

80028310 <pdca_enable_interrupt_reload_counter_zero>:


void pdca_enable_interrupt_reload_counter_zero(unsigned int pdca_ch_number)
{
80028310:	eb cd 40 c0 	pushm	r6-r7,lr
80028314:	1a 97       	mov	r7,sp
80028316:	20 2d       	sub	sp,8
80028318:	48 96       	lddpc	r6,8002833c <pdca_enable_interrupt_reload_counter_zero+0x2c>
8002831a:	1e 26       	rsub	r6,pc
8002831c:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80028320:	ee fc ff f8 	ld.w	r12,r7[-8]
80028324:	f0 16 00 27 	mcall	r6[156]
80028328:	18 98       	mov	r8,r12
8002832a:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->ier = AVR32_PDCA_RCZ_MASK;
8002832e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028332:	30 19       	mov	r9,1
80028334:	91 89       	st.w	r8[0x20],r9
}
80028336:	2f ed       	sub	sp,-8
80028338:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002833c:	80 02       	ld.sh	r2,r0[0x0]
8002833e:	81 9e       	st.w	r0[0x24],lr

80028340 <pdca_get_transfer_status>:


unsigned long pdca_get_transfer_status(unsigned int pdca_ch_number)
{
80028340:	eb cd 40 c0 	pushm	r6-r7,lr
80028344:	1a 97       	mov	r7,sp
80028346:	20 2d       	sub	sp,8
80028348:	48 96       	lddpc	r6,8002836c <pdca_get_transfer_status+0x2c>
8002834a:	1e 26       	rsub	r6,pc
8002834c:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80028350:	ee fc ff f8 	ld.w	r12,r7[-8]
80028354:	f0 16 00 27 	mcall	r6[156]
80028358:	18 98       	mov	r8,r12
8002835a:	ef 48 ff fc 	st.w	r7[-4],r8

  return pdca_channel->isr;
8002835e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028362:	70 b8       	ld.w	r8,r8[0x2c]
}
80028364:	10 9c       	mov	r12,r8
80028366:	2f ed       	sub	sp,-8
80028368:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002836c:	80 02       	ld.sh	r2,r0[0x0]
8002836e:	81 ce       	st.w	r0[0x30],lr

80028370 <pevc_channel_configure>:
// See comment header in pevc.h
bool pevc_channel_configure( volatile avr32_pevc_t *pevc,
                             unsigned short int chan_id,
                             unsigned short int gen_id,
                             const pevc_evs_opt_t *pevs )
{
80028370:	eb cd 40 80 	pushm	r7,lr
80028374:	1a 97       	mov	r7,sp
80028376:	20 4d       	sub	sp,16
80028378:	ef 4c ff fc 	st.w	r7[-4],r12
8002837c:	14 98       	mov	r8,r10
8002837e:	ef 49 ff f0 	st.w	r7[-16],r9
80028382:	16 99       	mov	r9,r11
80028384:	ef 59 ff f8 	st.h	r7[-8],r9
80028388:	ef 58 ff f4 	st.h	r7[-12],r8
  if( NULL != pevc )
8002838c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028390:	58 08       	cp.w	r8,0
80028392:	c6 90       	breq	80028464 <pevc_channel_configure+0xf4>
  {
    if(( gen_id < PEVC_NUMBER_OF_EVENT_GENERATORS )
80028394:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80028398:	32 18       	mov	r8,33
8002839a:	f0 09 19 00 	cp.h	r9,r8
8002839e:	e0 8b 00 61 	brhi	80028460 <pevc_channel_configure+0xf0>
800283a2:	ef 09 ff f8 	ld.sh	r9,r7[-8]
800283a6:	31 58       	mov	r8,21
800283a8:	f0 09 19 00 	cp.h	r9,r8
800283ac:	e0 8b 00 5a 	brhi	80028460 <pevc_channel_configure+0xf0>
    && ( chan_id < PEVC_NUMBER_OF_EVENT_USERS ))
    {
      // Connect the generator gen_id to the channel.
      pevc->CHMX[chan_id].evmx = gen_id;
800283b0:	ef 1a ff f8 	ld.uh	r10,r7[-8]
800283b4:	ef 08 ff f4 	ld.sh	r8,r7[-12]
800283b8:	5c 58       	castu.b	r8
800283ba:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800283be:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
800283c2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800283c6:	2c 0a       	sub	r10,-64
800283c8:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
800283cc:	f1 db d0 06 	bfins	r8,r11,0x0,0x6
800283d0:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8

      // Configure the event shaper for the channel.
      if( NULL != pevs )
800283d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800283d8:	58 08       	cp.w	r8,0
800283da:	c4 10       	breq	8002845c <pevc_channel_configure+0xec>
      {
        pevc->igfdr = pevs->igfdr;  // Only one divider for all EVS channels.
800283dc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800283e0:	11 88       	ld.ub	r8,r8[0x0]
800283e2:	10 99       	mov	r9,r8
800283e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800283e8:	91 29       	st.w	r8[0x8],r9
        pevc->EVS[gen_id].igf = pevs->igf;
800283ea:	ef 1a ff f4 	ld.uh	r10,r7[-12]
800283ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
800283f2:	70 18       	ld.w	r8,r8[0x4]
800283f4:	5c 58       	castu.b	r8
800283f6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800283fa:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
800283fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028402:	28 0a       	sub	r10,-128
80028404:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80028408:	f1 db d0 41 	bfins	r8,r11,0x2,0x1
8002840c:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
        pevc->EVS[gen_id].evf = pevs->evf;
80028410:	ef 1a ff f4 	ld.uh	r10,r7[-12]
80028414:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028418:	70 28       	ld.w	r8,r8[0x8]
8002841a:	5c 58       	castu.b	r8
8002841c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028420:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80028424:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028428:	28 0a       	sub	r10,-128
8002842a:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
8002842e:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
80028432:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
        pevc->EVS[gen_id].evr = pevs->evr;
80028436:	ef 1a ff f4 	ld.uh	r10,r7[-12]
8002843a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002843e:	70 38       	ld.w	r8,r8[0xc]
80028440:	5c 58       	castu.b	r8
80028442:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028446:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8002844a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002844e:	28 0a       	sub	r10,-128
80028450:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80028454:	f1 db d0 01 	bfins	r8,r11,0x0,0x1
80028458:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
      }
      return( PASS );
8002845c:	30 08       	mov	r8,0
8002845e:	c0 48       	rjmp	80028466 <pevc_channel_configure+0xf6>
    }
    else return( FAIL );
80028460:	30 18       	mov	r8,1
80028462:	c0 28       	rjmp	80028466 <pevc_channel_configure+0xf6>
  }
  else
    return( FAIL );
80028464:	30 18       	mov	r8,1
}
80028466:	10 9c       	mov	r12,r8
80028468:	2f cd       	sub	sp,-16
8002846a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002846e <pevc_igfd_set>:


// See comment header in pevc.h
void pevc_igfd_set( volatile avr32_pevc_t *pevc, unsigned char igfd )
{
8002846e:	eb cd 40 80 	pushm	r7,lr
80028472:	1a 97       	mov	r7,sp
80028474:	20 2d       	sub	sp,8
80028476:	ef 4c ff fc 	st.w	r7[-4],r12
8002847a:	16 98       	mov	r8,r11
8002847c:	ef 68 ff f8 	st.b	r7[-8],r8
  Assert( NULL != pevc );
  PEVC_IGFD_SET(pevc, igfd);
80028480:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80028484:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
80028488:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002848c:	91 29       	st.w	r8[0x8],r9
}
8002848e:	2f ed       	sub	sp,-8
80028490:	e3 cd 80 80 	ldm	sp++,r7,pc

80028494 <pevc_channels_enable>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
void pevc_channels_enable( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask )
{
80028494:	eb cd 40 80 	pushm	r7,lr
80028498:	1a 97       	mov	r7,sp
8002849a:	20 3d       	sub	sp,12
8002849c:	ef 4c ff fc 	st.w	r7[-4],r12
800284a0:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_ENABLE(pevc, chan_mask);
800284a4:	ee e8 ff f4 	ld.d	r8,r7[-12]
800284a8:	fc 1a 80 00 	movh	r10,0x8000
800284ac:	30 0b       	mov	r11,0
800284ae:	14 38       	cp.w	r8,r10
800284b0:	f6 09 13 00 	cpc	r9,r11
800284b4:	e0 8b 00 08 	brhi	800284c4 <pevc_channels_enable+0x30>
800284b8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800284bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800284c0:	91 89       	st.w	r8[0x20],r9
800284c2:	c0 68       	rjmp	800284ce <pevc_channels_enable+0x3a>
800284c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800284c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800284cc:	91 99       	st.w	r8[0x24],r9
}
800284ce:	2f dd       	sub	sp,-12
800284d0:	e3 cd 80 80 	ldm	sp++,r7,pc

800284d4 <pevc_channels_disable>:

// See comment header in pevc.h
void pevc_channels_disable( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask )
{
800284d4:	eb cd 40 80 	pushm	r7,lr
800284d8:	1a 97       	mov	r7,sp
800284da:	20 3d       	sub	sp,12
800284dc:	ef 4c ff fc 	st.w	r7[-4],r12
800284e0:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_DISABLE(pevc, chan_mask);
800284e4:	ee e8 ff f4 	ld.d	r8,r7[-12]
800284e8:	fc 1a 80 00 	movh	r10,0x8000
800284ec:	30 0b       	mov	r11,0
800284ee:	14 38       	cp.w	r8,r10
800284f0:	f6 09 13 00 	cpc	r9,r11
800284f4:	e0 8b 00 08 	brhi	80028504 <pevc_channels_disable+0x30>
800284f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800284fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028500:	91 c9       	st.w	r8[0x30],r9
80028502:	c0 68       	rjmp	8002850e <pevc_channels_disable+0x3a>
80028504:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028508:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002850c:	91 d9       	st.w	r8[0x34],r9
}
8002850e:	2f dd       	sub	sp,-12
80028510:	e3 cd 80 80 	ldm	sp++,r7,pc

80028514 <pevc_get_channel_status>:

// See comment header in pevc.h
bool pevc_get_channel_status( volatile avr32_pevc_t *pevc, unsigned short int chan_id )
{
80028514:	eb cd 40 80 	pushm	r7,lr
80028518:	1a 97       	mov	r7,sp
8002851a:	20 2d       	sub	sp,8
8002851c:	ef 4c ff fc 	st.w	r7[-4],r12
80028520:	16 98       	mov	r8,r11
80028522:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
80028526:	ef 09 ff f8 	ld.sh	r9,r7[-8]
8002852a:	31 f8       	mov	r8,31
8002852c:	f0 09 19 00 	cp.h	r9,r8
80028530:	e0 8b 00 12 	brhi	80028554 <pevc_get_channel_status+0x40>
    return( ((pevc->chsr0) & (1 << chan_id))>>chan_id );
80028534:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028538:	70 49       	ld.w	r9,r8[0x10]
8002853a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002853e:	30 1a       	mov	r10,1
80028540:	f4 08 09 48 	lsl	r8,r10,r8
80028544:	10 69       	and	r9,r8
80028546:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002854a:	f2 08 0a 48 	lsr	r8,r9,r8
8002854e:	5f 18       	srne	r8
80028550:	5c 58       	castu.b	r8
80028552:	c1 28       	rjmp	80028576 <pevc_get_channel_status+0x62>
  else
    return( ((pevc->chsr1) & (1 << (chan_id-32)))>>(chan_id-32) );
80028554:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028558:	70 59       	ld.w	r9,r8[0x14]
8002855a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002855e:	22 08       	sub	r8,32
80028560:	30 1a       	mov	r10,1
80028562:	f4 08 09 48 	lsl	r8,r10,r8
80028566:	10 69       	and	r9,r8
80028568:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002856c:	22 08       	sub	r8,32
8002856e:	f2 08 0a 48 	lsr	r8,r9,r8
80028572:	5f 18       	srne	r8
80028574:	5c 58       	castu.b	r8
}
80028576:	10 9c       	mov	r12,r8
80028578:	2f ed       	sub	sp,-8
8002857a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002857e <pevc_get_channel_state>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
bool pevc_get_channel_state(volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
8002857e:	eb cd 40 80 	pushm	r7,lr
80028582:	1a 97       	mov	r7,sp
80028584:	20 2d       	sub	sp,8
80028586:	ef 4c ff fc 	st.w	r7[-4],r12
8002858a:	16 98       	mov	r8,r11
8002858c:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
80028590:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80028594:	31 f8       	mov	r8,31
80028596:	f0 09 19 00 	cp.h	r9,r8
8002859a:	e0 8b 00 12 	brhi	800285be <pevc_get_channel_state+0x40>
    return( ((pevc->busy0) & (1 << chan_id))>>chan_id );
8002859e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800285a2:	71 49       	ld.w	r9,r8[0x50]
800285a4:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800285a8:	30 1a       	mov	r10,1
800285aa:	f4 08 09 48 	lsl	r8,r10,r8
800285ae:	10 69       	and	r9,r8
800285b0:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800285b4:	f2 08 0a 48 	lsr	r8,r9,r8
800285b8:	5f 18       	srne	r8
800285ba:	5c 58       	castu.b	r8
800285bc:	c1 28       	rjmp	800285e0 <pevc_get_channel_state+0x62>
  else
    return( ((pevc->busy1) & (1 << (chan_id-32)))>>(chan_id-32) );
800285be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800285c2:	71 59       	ld.w	r9,r8[0x54]
800285c4:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800285c8:	22 08       	sub	r8,32
800285ca:	30 1a       	mov	r10,1
800285cc:	f4 08 09 48 	lsl	r8,r10,r8
800285d0:	10 69       	and	r9,r8
800285d2:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800285d6:	22 08       	sub	r8,32
800285d8:	f2 08 0a 48 	lsr	r8,r9,r8
800285dc:	5f 18       	srne	r8
800285de:	5c 58       	castu.b	r8
}
800285e0:	10 9c       	mov	r12,r8
800285e2:	2f ed       	sub	sp,-8
800285e4:	e3 cd 80 80 	ldm	sp++,r7,pc

800285e8 <pevc_channel_sev_enable>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
void pevc_channel_sev_enable( volatile avr32_pevc_t *pevc, unsigned short int chan_id )
{
800285e8:	eb cd 40 80 	pushm	r7,lr
800285ec:	1a 97       	mov	r7,sp
800285ee:	20 2d       	sub	sp,8
800285f0:	ef 4c ff fc 	st.w	r7[-4],r12
800285f4:	16 98       	mov	r8,r11
800285f6:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  pevc->CHMX[chan_id].smx = ENABLE;
800285fa:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800285fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028602:	f0 ca ff c0 	sub	r10,r8,-64
80028606:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
8002860a:	30 1b       	mov	r11,1
8002860c:	f1 db d1 01 	bfins	r8,r11,0x8,0x1
80028610:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
}
80028614:	2f ed       	sub	sp,-8
80028616:	e3 cd 80 80 	ldm	sp++,r7,pc

8002861a <pevc_channels_trigger_sev>:

// See comment header in pevc.h
void pevc_channels_trigger_sev(volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
8002861a:	eb cd 40 80 	pushm	r7,lr
8002861e:	1a 97       	mov	r7,sp
80028620:	20 3d       	sub	sp,12
80028622:	ef 4c ff fc 	st.w	r7[-4],r12
80028626:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_TRIGGER_SEV(pevc, chan_mask);
8002862a:	ee e8 ff f4 	ld.d	r8,r7[-12]
8002862e:	fc 1a 80 00 	movh	r10,0x8000
80028632:	30 0b       	mov	r11,0
80028634:	14 38       	cp.w	r8,r10
80028636:	f6 09 13 00 	cpc	r9,r11
8002863a:	e0 8b 00 09 	brhi	8002864c <pevc_channels_trigger_sev+0x32>
8002863e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028642:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028646:	f1 49 00 40 	st.w	r8[64],r9
8002864a:	c0 78       	rjmp	80028658 <pevc_channels_trigger_sev+0x3e>
8002864c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028650:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028654:	f1 49 00 44 	st.w	r8[68],r9
}
80028658:	2f dd       	sub	sp,-12
8002865a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002865e <pevc_channel_sev_disable>:

// See comment header in pevc.h
void pevc_channel_sev_disable( volatile avr32_pevc_t *pevc, unsigned short int chan_id )
{
8002865e:	eb cd 40 80 	pushm	r7,lr
80028662:	1a 97       	mov	r7,sp
80028664:	20 2d       	sub	sp,8
80028666:	ef 4c ff fc 	st.w	r7[-4],r12
8002866a:	16 98       	mov	r8,r11
8002866c:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  pevc->CHMX[chan_id].smx = DISABLE;
80028670:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028674:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028678:	f0 ca ff c0 	sub	r10,r8,-64
8002867c:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80028680:	30 0b       	mov	r11,0
80028682:	f1 db d1 01 	bfins	r8,r11,0x8,0x1
80028686:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
}
8002868a:	2f ed       	sub	sp,-8
8002868c:	e3 cd 80 80 	ldm	sp++,r7,pc

80028690 <pevc_channels_enable_trigger_interrupt>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
void pevc_channels_enable_trigger_interrupt( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
80028690:	eb cd 40 80 	pushm	r7,lr
80028694:	1a 97       	mov	r7,sp
80028696:	20 3d       	sub	sp,12
80028698:	ef 4c ff fc 	st.w	r7[-4],r12
8002869c:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_ENABLE_TRIGGER_INTERRUPT(pevc, chan_mask);
800286a0:	ee e8 ff f4 	ld.d	r8,r7[-12]
800286a4:	fc 1a 80 00 	movh	r10,0x8000
800286a8:	30 0b       	mov	r11,0
800286aa:	14 38       	cp.w	r8,r10
800286ac:	f6 09 13 00 	cpc	r9,r11
800286b0:	e0 8b 00 09 	brhi	800286c2 <pevc_channels_enable_trigger_interrupt+0x32>
800286b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800286b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800286bc:	f1 49 00 90 	st.w	r8[144],r9
800286c0:	c0 78       	rjmp	800286ce <pevc_channels_enable_trigger_interrupt+0x3e>
800286c2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800286c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800286ca:	f1 49 00 94 	st.w	r8[148],r9
}
800286ce:	2f dd       	sub	sp,-12
800286d0:	e3 cd 80 80 	ldm	sp++,r7,pc

800286d4 <pevc_channels_disable_trigger_interrupt>:

// See comment header in pevc.h
void pevc_channels_disable_trigger_interrupt( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
800286d4:	eb cd 40 80 	pushm	r7,lr
800286d8:	1a 97       	mov	r7,sp
800286da:	20 3d       	sub	sp,12
800286dc:	ef 4c ff fc 	st.w	r7[-4],r12
800286e0:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_DISABLE_TRIGGER_INTERRUPT(pevc, chan_mask);
800286e4:	ee e8 ff f4 	ld.d	r8,r7[-12]
800286e8:	fc 1a 80 00 	movh	r10,0x8000
800286ec:	30 0b       	mov	r11,0
800286ee:	14 38       	cp.w	r8,r10
800286f0:	f6 09 13 00 	cpc	r9,r11
800286f4:	e0 8b 00 09 	brhi	80028706 <pevc_channels_disable_trigger_interrupt+0x32>
800286f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800286fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028700:	f1 49 00 a0 	st.w	r8[160],r9
80028704:	c0 78       	rjmp	80028712 <pevc_channels_disable_trigger_interrupt+0x3e>
80028706:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002870a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002870e:	f1 49 00 a4 	st.w	r8[164],r9
}
80028712:	2f dd       	sub	sp,-12
80028714:	e3 cd 80 80 	ldm	sp++,r7,pc

80028718 <pevc_channel_is_trigger_interrupt_enabled>:

// See comment header in pevc.h
bool pevc_channel_is_trigger_interrupt_enabled( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
80028718:	eb cd 40 80 	pushm	r7,lr
8002871c:	1a 97       	mov	r7,sp
8002871e:	20 2d       	sub	sp,8
80028720:	ef 4c ff fc 	st.w	r7[-4],r12
80028724:	16 98       	mov	r8,r11
80028726:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
8002872a:	ef 09 ff f8 	ld.sh	r9,r7[-8]
8002872e:	31 f8       	mov	r8,31
80028730:	f0 09 19 00 	cp.h	r9,r8
80028734:	e0 8b 00 13 	brhi	8002875a <pevc_channel_is_trigger_interrupt_enabled+0x42>
    return( ((pevc->trimr0) & (1 << chan_id))>>chan_id );
80028738:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002873c:	f0 f9 00 80 	ld.w	r9,r8[128]
80028740:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028744:	30 1a       	mov	r10,1
80028746:	f4 08 09 48 	lsl	r8,r10,r8
8002874a:	10 69       	and	r9,r8
8002874c:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028750:	f2 08 0a 48 	lsr	r8,r9,r8
80028754:	5f 18       	srne	r8
80028756:	5c 58       	castu.b	r8
80028758:	c1 38       	rjmp	8002877e <pevc_channel_is_trigger_interrupt_enabled+0x66>
  else
    return( ((pevc->trimr1) & (1 << (chan_id-32)))>>(chan_id-32) );
8002875a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002875e:	f0 f9 00 84 	ld.w	r9,r8[132]
80028762:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028766:	22 08       	sub	r8,32
80028768:	30 1a       	mov	r10,1
8002876a:	f4 08 09 48 	lsl	r8,r10,r8
8002876e:	10 69       	and	r9,r8
80028770:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028774:	22 08       	sub	r8,32
80028776:	f2 08 0a 48 	lsr	r8,r9,r8
8002877a:	5f 18       	srne	r8
8002877c:	5c 58       	castu.b	r8
}
8002877e:	10 9c       	mov	r12,r8
80028780:	2f ed       	sub	sp,-8
80028782:	e3 cd 80 80 	ldm	sp++,r7,pc

80028786 <pevc_channel_is_trigger_interrupt_raised>:

// See comment header in pevc.h
bool pevc_channel_is_trigger_interrupt_raised( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
80028786:	eb cd 40 80 	pushm	r7,lr
8002878a:	1a 97       	mov	r7,sp
8002878c:	20 2d       	sub	sp,8
8002878e:	ef 4c ff fc 	st.w	r7[-4],r12
80028792:	16 98       	mov	r8,r11
80028794:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
80028798:	ef 09 ff f8 	ld.sh	r9,r7[-8]
8002879c:	31 f8       	mov	r8,31
8002879e:	f0 09 19 00 	cp.h	r9,r8
800287a2:	e0 8b 00 12 	brhi	800287c6 <pevc_channel_is_trigger_interrupt_raised+0x40>
    return( ((pevc->trsr0) & (1 << chan_id))>>chan_id );
800287a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800287aa:	71 89       	ld.w	r9,r8[0x60]
800287ac:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800287b0:	30 1a       	mov	r10,1
800287b2:	f4 08 09 48 	lsl	r8,r10,r8
800287b6:	10 69       	and	r9,r8
800287b8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800287bc:	f2 08 0a 48 	lsr	r8,r9,r8
800287c0:	5f 18       	srne	r8
800287c2:	5c 58       	castu.b	r8
800287c4:	c1 28       	rjmp	800287e8 <pevc_channel_is_trigger_interrupt_raised+0x62>
  else
    return( ((pevc->trsr1) & (1 << (chan_id-32)))>>(chan_id-32) );
800287c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800287ca:	71 99       	ld.w	r9,r8[0x64]
800287cc:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800287d0:	22 08       	sub	r8,32
800287d2:	30 1a       	mov	r10,1
800287d4:	f4 08 09 48 	lsl	r8,r10,r8
800287d8:	10 69       	and	r9,r8
800287da:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800287de:	22 08       	sub	r8,32
800287e0:	f2 08 0a 48 	lsr	r8,r9,r8
800287e4:	5f 18       	srne	r8
800287e6:	5c 58       	castu.b	r8
}
800287e8:	10 9c       	mov	r12,r8
800287ea:	2f ed       	sub	sp,-8
800287ec:	e3 cd 80 80 	ldm	sp++,r7,pc

800287f0 <pevc_channel_clear_trigger_interrupt>:

// See comment header in pevc.h
void pevc_channel_clear_trigger_interrupt( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
800287f0:	eb cd 40 80 	pushm	r7,lr
800287f4:	1a 97       	mov	r7,sp
800287f6:	20 2d       	sub	sp,8
800287f8:	ef 4c ff fc 	st.w	r7[-4],r12
800287fc:	16 98       	mov	r8,r11
800287fe:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
80028802:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80028806:	31 f8       	mov	r8,31
80028808:	f0 09 19 00 	cp.h	r9,r8
8002880c:	e0 8b 00 0d 	brhi	80028826 <pevc_channel_clear_trigger_interrupt+0x36>
    pevc->trscr0 = (1 << chan_id);
80028810:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028814:	30 19       	mov	r9,1
80028816:	f2 08 09 48 	lsl	r8,r9,r8
8002881a:	10 99       	mov	r9,r8
8002881c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028820:	f1 49 00 70 	st.w	r8[112],r9
80028824:	c0 c8       	rjmp	8002883c <pevc_channel_clear_trigger_interrupt+0x4c>
  else
    pevc->trscr1 = (1 << (chan_id-32));
80028826:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002882a:	22 08       	sub	r8,32
8002882c:	30 19       	mov	r9,1
8002882e:	f2 08 09 48 	lsl	r8,r9,r8
80028832:	10 99       	mov	r9,r8
80028834:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028838:	f1 49 00 74 	st.w	r8[116],r9
}
8002883c:	2f ed       	sub	sp,-8
8002883e:	e3 cd 80 80 	ldm	sp++,r7,pc

80028842 <pevc_channels_enable_overrun_interrupt>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
void pevc_channels_enable_overrun_interrupt( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
80028842:	eb cd 40 80 	pushm	r7,lr
80028846:	1a 97       	mov	r7,sp
80028848:	20 3d       	sub	sp,12
8002884a:	ef 4c ff fc 	st.w	r7[-4],r12
8002884e:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_ENABLE_OVERRUN_INTERRUPT(pevc, chan_mask);
80028852:	ee e8 ff f4 	ld.d	r8,r7[-12]
80028856:	fc 1a 80 00 	movh	r10,0x8000
8002885a:	30 0b       	mov	r11,0
8002885c:	14 38       	cp.w	r8,r10
8002885e:	f6 09 13 00 	cpc	r9,r11
80028862:	e0 8b 00 09 	brhi	80028874 <pevc_channels_enable_overrun_interrupt+0x32>
80028866:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002886a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002886e:	f1 49 00 e0 	st.w	r8[224],r9
80028872:	c0 78       	rjmp	80028880 <pevc_channels_enable_overrun_interrupt+0x3e>
80028874:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028878:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002887c:	f1 49 00 e4 	st.w	r8[228],r9
}
80028880:	2f dd       	sub	sp,-12
80028882:	e3 cd 80 80 	ldm	sp++,r7,pc

80028886 <pevc_channels_disable_overrun_interrupt>:

// See comment header in pevc.h
void pevc_channels_disable_overrun_interrupt( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
80028886:	eb cd 40 80 	pushm	r7,lr
8002888a:	1a 97       	mov	r7,sp
8002888c:	20 3d       	sub	sp,12
8002888e:	ef 4c ff fc 	st.w	r7[-4],r12
80028892:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_DISABLE_OVERRUN_INTERRUPT(pevc, chan_mask);
80028896:	ee e8 ff f4 	ld.d	r8,r7[-12]
8002889a:	fc 1a 80 00 	movh	r10,0x8000
8002889e:	30 0b       	mov	r11,0
800288a0:	14 38       	cp.w	r8,r10
800288a2:	f6 09 13 00 	cpc	r9,r11
800288a6:	e0 8b 00 09 	brhi	800288b8 <pevc_channels_disable_overrun_interrupt+0x32>
800288aa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800288ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800288b2:	f1 49 00 f0 	st.w	r8[240],r9
800288b6:	c0 78       	rjmp	800288c4 <pevc_channels_disable_overrun_interrupt+0x3e>
800288b8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800288bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800288c0:	f1 49 00 f4 	st.w	r8[244],r9
}
800288c4:	2f dd       	sub	sp,-12
800288c6:	e3 cd 80 80 	ldm	sp++,r7,pc

800288ca <pevc_channel_is_overrun_interrupt_enabled>:

// See comment header in pevc.h
bool pevc_channel_is_overrun_interrupt_enabled( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
800288ca:	eb cd 40 80 	pushm	r7,lr
800288ce:	1a 97       	mov	r7,sp
800288d0:	20 2d       	sub	sp,8
800288d2:	ef 4c ff fc 	st.w	r7[-4],r12
800288d6:	16 98       	mov	r8,r11
800288d8:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
800288dc:	ef 09 ff f8 	ld.sh	r9,r7[-8]
800288e0:	31 f8       	mov	r8,31
800288e2:	f0 09 19 00 	cp.h	r9,r8
800288e6:	e0 8b 00 13 	brhi	8002890c <pevc_channel_is_overrun_interrupt_enabled+0x42>
    return( ((pevc->ovimr0) & (1 << chan_id))>>chan_id );
800288ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800288ee:	f0 f9 00 d0 	ld.w	r9,r8[208]
800288f2:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800288f6:	30 1a       	mov	r10,1
800288f8:	f4 08 09 48 	lsl	r8,r10,r8
800288fc:	10 69       	and	r9,r8
800288fe:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028902:	f2 08 0a 48 	lsr	r8,r9,r8
80028906:	5f 18       	srne	r8
80028908:	5c 58       	castu.b	r8
8002890a:	c1 38       	rjmp	80028930 <pevc_channel_is_overrun_interrupt_enabled+0x66>
  else
    return( ((pevc->ovimr1) & (1 << (chan_id-32)))>>(chan_id-32) );
8002890c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028910:	f0 f9 00 d4 	ld.w	r9,r8[212]
80028914:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028918:	22 08       	sub	r8,32
8002891a:	30 1a       	mov	r10,1
8002891c:	f4 08 09 48 	lsl	r8,r10,r8
80028920:	10 69       	and	r9,r8
80028922:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028926:	22 08       	sub	r8,32
80028928:	f2 08 0a 48 	lsr	r8,r9,r8
8002892c:	5f 18       	srne	r8
8002892e:	5c 58       	castu.b	r8
}
80028930:	10 9c       	mov	r12,r8
80028932:	2f ed       	sub	sp,-8
80028934:	e3 cd 80 80 	ldm	sp++,r7,pc

80028938 <pevc_channel_is_overrun_interrupt_raised>:

// See comment header in pevc.h
bool pevc_channel_is_overrun_interrupt_raised( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
80028938:	eb cd 40 80 	pushm	r7,lr
8002893c:	1a 97       	mov	r7,sp
8002893e:	20 2d       	sub	sp,8
80028940:	ef 4c ff fc 	st.w	r7[-4],r12
80028944:	16 98       	mov	r8,r11
80028946:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
8002894a:	ef 09 ff f8 	ld.sh	r9,r7[-8]
8002894e:	31 f8       	mov	r8,31
80028950:	f0 09 19 00 	cp.h	r9,r8
80028954:	e0 8b 00 13 	brhi	8002897a <pevc_channel_is_overrun_interrupt_raised+0x42>
    return( ((pevc->ovsr0) & (1 << chan_id))>>chan_id );
80028958:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002895c:	f0 f9 00 b0 	ld.w	r9,r8[176]
80028960:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028964:	30 1a       	mov	r10,1
80028966:	f4 08 09 48 	lsl	r8,r10,r8
8002896a:	10 69       	and	r9,r8
8002896c:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028970:	f2 08 0a 48 	lsr	r8,r9,r8
80028974:	5f 18       	srne	r8
80028976:	5c 58       	castu.b	r8
80028978:	c1 38       	rjmp	8002899e <pevc_channel_is_overrun_interrupt_raised+0x66>
  else
    return( ((pevc->ovsr1) & (1 << (chan_id-32)))>>(chan_id-32) );
8002897a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002897e:	f0 f9 00 b4 	ld.w	r9,r8[180]
80028982:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028986:	22 08       	sub	r8,32
80028988:	30 1a       	mov	r10,1
8002898a:	f4 08 09 48 	lsl	r8,r10,r8
8002898e:	10 69       	and	r9,r8
80028990:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028994:	22 08       	sub	r8,32
80028996:	f2 08 0a 48 	lsr	r8,r9,r8
8002899a:	5f 18       	srne	r8
8002899c:	5c 58       	castu.b	r8
}
8002899e:	10 9c       	mov	r12,r8
800289a0:	2f ed       	sub	sp,-8
800289a2:	e3 cd 80 80 	ldm	sp++,r7,pc

800289a6 <pevc_channel_clear_overrun_interrupt>:

// See comment header in pevc.h
void pevc_channel_clear_overrun_interrupt( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
800289a6:	eb cd 40 80 	pushm	r7,lr
800289aa:	1a 97       	mov	r7,sp
800289ac:	20 2d       	sub	sp,8
800289ae:	ef 4c ff fc 	st.w	r7[-4],r12
800289b2:	16 98       	mov	r8,r11
800289b4:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
800289b8:	ef 09 ff f8 	ld.sh	r9,r7[-8]
800289bc:	31 f8       	mov	r8,31
800289be:	f0 09 19 00 	cp.h	r9,r8
800289c2:	e0 8b 00 0d 	brhi	800289dc <pevc_channel_clear_overrun_interrupt+0x36>
    pevc->ovscr0 = (1 << chan_id);
800289c6:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800289ca:	30 19       	mov	r9,1
800289cc:	f2 08 09 48 	lsl	r8,r9,r8
800289d0:	10 99       	mov	r9,r8
800289d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800289d6:	f1 49 00 c0 	st.w	r8[192],r9
800289da:	c0 c8       	rjmp	800289f2 <pevc_channel_clear_overrun_interrupt+0x4c>
  else
    pevc->ovscr1 = (1 << (chan_id-32));
800289dc:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800289e0:	22 08       	sub	r8,32
800289e2:	30 19       	mov	r9,1
800289e4:	f2 08 09 48 	lsl	r8,r9,r8
800289e8:	10 99       	mov	r9,r8
800289ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800289ee:	f1 49 00 c4 	st.w	r8[196],r9
}
800289f2:	2f ed       	sub	sp,-8
800289f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800289f8 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800289f8:	eb cd 40 80 	pushm	r7,lr
800289fc:	1a 97       	mov	r7,sp
800289fe:	20 1d       	sub	sp,4
80028a00:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80028a04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028a08:	e6 18 00 01 	andh	r8,0x1,COH
80028a0c:	5f 08       	sreq	r8
80028a0e:	5c 58       	castu.b	r8
}
80028a10:	10 9c       	mov	r12,r8
80028a12:	2f fd       	sub	sp,-4
80028a14:	e3 cd 80 80 	ldm	sp++,r7,pc

80028a18 <scif_pclksr_statushigh_wait>:
 * \return Status.
 *   \retval 0   Status is high.
 *   \retval <0  SCIF_POLL_TIMEOUT Timeout expired before the status was high.
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
80028a18:	eb cd 40 80 	pushm	r7,lr
80028a1c:	1a 97       	mov	r7,sp
80028a1e:	20 2d       	sub	sp,8
80028a20:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
80028a24:	e0 78 86 a0 	mov	r8,100000
80028a28:	ef 48 ff fc 	st.w	r7[-4],r8
  
  while(!(AVR32_SCIF.pclksr & statusMask))
80028a2c:	c0 c8       	rjmp	80028a44 <scif_pclksr_statushigh_wait+0x2c>
  {
    if(--timeout == 0)
80028a2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028a32:	20 18       	sub	r8,1
80028a34:	ef 48 ff fc 	st.w	r7[-4],r8
80028a38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028a3c:	58 08       	cp.w	r8,0
80028a3e:	c0 31       	brne	80028a44 <scif_pclksr_statushigh_wait+0x2c>
      return -1;
80028a40:	3f f8       	mov	r8,-1
80028a42:	c0 a8       	rjmp	80028a56 <scif_pclksr_statushigh_wait+0x3e>
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
  
  while(!(AVR32_SCIF.pclksr & statusMask))
80028a44:	fe 78 08 00 	mov	r8,-63488
80028a48:	70 59       	ld.w	r9,r8[0x14]
80028a4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028a4e:	f3 e8 00 08 	and	r8,r9,r8
80028a52:	ce e0       	breq	80028a2e <scif_pclksr_statushigh_wait+0x16>
  {
    if(--timeout == 0)
      return -1;
  }
  return PASS;
80028a54:	30 08       	mov	r8,0
}
80028a56:	10 9c       	mov	r12,r8
80028a58:	2f ed       	sub	sp,-8
80028a5a:	e3 cd 80 80 	ldm	sp++,r7,pc

80028a5e <scif_read_gplp>:

unsigned long scif_read_gplp(unsigned long gplp)
{
80028a5e:	eb cd 40 80 	pushm	r7,lr
80028a62:	1a 97       	mov	r7,sp
80028a64:	20 1d       	sub	sp,4
80028a66:	ef 4c ff fc 	st.w	r7[-4],r12
  return AVR32_SCIF.gplp[gplp];
80028a6a:	fe 78 08 00 	mov	r8,-63488
80028a6e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028a72:	2e 99       	sub	r9,-23
80028a74:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
}
80028a78:	10 9c       	mov	r12,r8
80028a7a:	2f fd       	sub	sp,-4
80028a7c:	e3 cd 80 80 	ldm	sp++,r7,pc

80028a80 <scif_write_gplp>:


void scif_write_gplp(int gplp, unsigned long value)
{
80028a80:	eb cd 40 80 	pushm	r7,lr
80028a84:	1a 97       	mov	r7,sp
80028a86:	20 2d       	sub	sp,8
80028a88:	ef 4c ff fc 	st.w	r7[-4],r12
80028a8c:	ef 4b ff f8 	st.w	r7[-8],r11
  SCIF_UNLOCK(AVR32_SCIF_GPLP + 4*gplp); 
80028a90:	fe 78 08 00 	mov	r8,-63488
80028a94:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028a98:	2e 99       	sub	r9,-23
80028a9a:	a3 69       	lsl	r9,0x2
80028a9c:	ea 19 aa 00 	orh	r9,0xaa00
80028aa0:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.gplp[gplp] = value;
80028aa2:	fe 78 08 00 	mov	r8,-63488
80028aa6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028aaa:	2e 99       	sub	r9,-23
80028aac:	ee fa ff f8 	ld.w	r10,r7[-8]
80028ab0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80028ab4:	2f ed       	sub	sp,-8
80028ab6:	e3 cd 80 80 	ldm	sp++,r7,pc

80028aba <scif_start_osc>:
/**
 ** OSC0/OSC1 Functions
 **/

long int scif_start_osc(scif_osc_t osc, const scif_osc_opt_t *opt, bool wait_for_ready)
{
80028aba:	eb cd 40 c0 	pushm	r6-r7,lr
80028abe:	1a 97       	mov	r7,sp
80028ac0:	20 6d       	sub	sp,24
80028ac2:	4c c6       	lddpc	r6,80028bf0 <scif_start_osc+0x136>
80028ac4:	1e 26       	rsub	r6,pc
80028ac6:	ef 4c ff f0 	st.w	r7[-16],r12
80028aca:	ef 4b ff ec 	st.w	r7[-20],r11
80028ace:	14 98       	mov	r8,r10
80028ad0:	ef 68 ff e8 	st.b	r7[-24],r8
      return -1;
    }  
  }
#endif  // AVR32SFW_INPUT_CHECK
  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
80028ad4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028ad8:	fe 79 08 00 	mov	r9,-63488
80028adc:	ee fa ff f0 	ld.w	r10,r7[-16]
80028ae0:	a3 68       	lsl	r8,0x2
80028ae2:	ee 08 00 08 	add	r8,r7,r8
80028ae6:	2f 7a       	sub	r10,-9
80028ae8:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028aec:	f1 49 ff f4 	st.w	r8[-12],r9
  // Modify: Configure & start OSC0.
  u_avr32_scif_oscctrl.OSCCTRL[osc].mode = opt->mode;
80028af0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028af4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028af8:	70 18       	ld.w	r8,r8[0x4]
80028afa:	5c 58       	castu.b	r8
80028afc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028b00:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80028b04:	f2 08 15 02 	lsl	r8,r9,0x2
80028b08:	ee 08 00 08 	add	r8,r7,r8
80028b0c:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028b10:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80028b14:	f1 49 ff f4 	st.w	r8[-12],r9
  u_avr32_scif_oscctrl.OSCCTRL[osc].gain = opt->gain;
80028b18:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028b1c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028b20:	f1 38 00 09 	ld.ub	r8,r8[9]
80028b24:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80028b28:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80028b2c:	f2 08 15 02 	lsl	r8,r9,0x2
80028b30:	ee 08 00 08 	add	r8,r7,r8
80028b34:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028b38:	f3 da d0 22 	bfins	r9,r10,0x1,0x2
80028b3c:	f1 49 ff f4 	st.w	r8[-12],r9
  u_avr32_scif_oscctrl.OSCCTRL[osc].startup = opt->startup;
80028b40:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028b44:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028b48:	f1 38 00 08 	ld.ub	r8,r8[8]
80028b4c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80028b50:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80028b54:	f2 08 15 02 	lsl	r8,r9,0x2
80028b58:	ee 08 00 08 	add	r8,r7,r8
80028b5c:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028b60:	f3 da d1 04 	bfins	r9,r10,0x8,0x4
80028b64:	f1 49 ff f4 	st.w	r8[-12],r9
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
80028b68:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028b6c:	a3 68       	lsl	r8,0x2
80028b6e:	ee 08 00 08 	add	r8,r7,r8
80028b72:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028b76:	30 1a       	mov	r10,1
80028b78:	f3 da d2 01 	bfins	r9,r10,0x10,0x1
80028b7c:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80028b80:	e1 b8 00 00 	mfsr	r8,0x0
80028b84:	10 9c       	mov	r12,r8
80028b86:	c3 9f       	rcall	800289f8 <cpu_irq_is_enabled_flags>
80028b88:	18 98       	mov	r8,r12
80028b8a:	ef 68 ff ff 	st.b	r7[-1],r8
80028b8e:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);    
80028b90:	fe 78 08 00 	mov	r8,-63488
80028b94:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028b98:	2f 79       	sub	r9,-9
80028b9a:	a3 69       	lsl	r9,0x2
80028b9c:	ea 19 aa 00 	orh	r9,0xaa00
80028ba0:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80028ba2:	fe 79 08 00 	mov	r9,-63488
80028ba6:	ee fa ff f0 	ld.w	r10,r7[-16]
80028baa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028bae:	2f 7a       	sub	r10,-9
80028bb0:	a3 68       	lsl	r8,0x2
80028bb2:	ee 08 00 08 	add	r8,r7,r8
80028bb6:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028bba:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80028bbe:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028bc2:	30 08       	mov	r8,0
80028bc4:	f0 09 18 00 	cp.b	r9,r8
80028bc8:	c0 20       	breq	80028bcc <scif_start_osc+0x112>
80028bca:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80028bcc:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80028bd0:	30 08       	mov	r8,0
80028bd2:	f0 09 18 00 	cp.b	r9,r8
80028bd6:	c0 80       	breq	80028be6 <scif_start_osc+0x12c>
  {
    // Wait until OSC0 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
80028bd8:	30 1c       	mov	r12,1
80028bda:	c1 ff       	rcall	80028a18 <scif_pclksr_statushigh_wait>
80028bdc:	18 98       	mov	r8,r12
80028bde:	58 08       	cp.w	r8,0
80028be0:	c0 30       	breq	80028be6 <scif_start_osc+0x12c>
      return -1;
80028be2:	3f f8       	mov	r8,-1
80028be4:	c0 28       	rjmp	80028be8 <scif_start_osc+0x12e>
  }
  return PASS;
80028be6:	30 08       	mov	r8,0
}
80028be8:	10 9c       	mov	r12,r8
80028bea:	2f ad       	sub	sp,-24
80028bec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028bf0:	80 02       	ld.sh	r2,r0[0x0]
80028bf2:	89 48       	st.w	r4[0x10],r8

80028bf4 <scif_is_osc_ready>:


bool scif_is_osc_ready(scif_osc_t osc)
{
80028bf4:	eb cd 40 80 	pushm	r7,lr
80028bf8:	1a 97       	mov	r7,sp
80028bfa:	20 1d       	sub	sp,4
80028bfc:	ef 4c ff fc 	st.w	r7[-4],r12
  if (osc == SCIF_OSC0)
80028c00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028c04:	58 08       	cp.w	r8,0
80028c06:	c0 81       	brne	80028c16 <scif_is_osc_ready+0x22>
  {
    return((AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_OSC0RDY_MASK)>>AVR32_SCIF_PCLKSR_OSC0RDY_OFFSET);
80028c08:	fe 78 08 00 	mov	r8,-63488
80028c0c:	70 58       	ld.w	r8,r8[0x14]
80028c0e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028c12:	5c 58       	castu.b	r8
80028c14:	c0 98       	rjmp	80028c26 <scif_is_osc_ready+0x32>
  }
  else
  {
    return((AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_OSC1RDY_MASK)>>AVR32_SCIF_PCLKSR_OSC1RDY_OFFSET);  
80028c16:	fe 78 08 00 	mov	r8,-63488
80028c1a:	70 58       	ld.w	r8,r8[0x14]
80028c1c:	e2 18 00 02 	andl	r8,0x2,COH
80028c20:	a1 98       	lsr	r8,0x1
80028c22:	5f 18       	srne	r8
80028c24:	5c 58       	castu.b	r8
  }
}
80028c26:	10 9c       	mov	r12,r8
80028c28:	2f fd       	sub	sp,-4
80028c2a:	e3 cd 80 80 	ldm	sp++,r7,pc

80028c2e <scif_stop_osc>:


long int scif_stop_osc(scif_osc_t osc)
{
80028c2e:	eb cd 40 c0 	pushm	r6-r7,lr
80028c32:	1a 97       	mov	r7,sp
80028c34:	20 3d       	sub	sp,12
80028c36:	49 d6       	lddpc	r6,80028ca8 <scif_stop_osc+0x7a>
80028c38:	1e 26       	rsub	r6,pc
80028c3a:	ef 4c ff f4 	st.w	r7[-12],r12

  unsigned long temp;

  temp = AVR32_SCIF.oscctrl[osc];
80028c3e:	fe 78 08 00 	mov	r8,-63488
80028c42:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028c46:	2f 79       	sub	r9,-9
80028c48:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80028c4c:	ef 48 ff f8 	st.w	r7[-8],r8
  temp &= ~AVR32_SCIF_OSCCTRL_OSCEN_MASK;
80028c50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028c54:	b1 c8       	cbr	r8,0x10
80028c56:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80028c5a:	e1 b8 00 00 	mfsr	r8,0x0
80028c5e:	10 9c       	mov	r12,r8
80028c60:	cc ce       	rcall	800289f8 <cpu_irq_is_enabled_flags>
80028c62:	18 98       	mov	r8,r12
80028c64:	ef 68 ff ff 	st.b	r7[-1],r8
80028c68:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
80028c6a:	fe 78 08 00 	mov	r8,-63488
80028c6e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028c72:	2f 79       	sub	r9,-9
80028c74:	a3 69       	lsl	r9,0x2
80028c76:	ea 19 aa 00 	orh	r9,0xaa00
80028c7a:	91 69       	st.w	r8[0x18],r9
  // Stop OSC0.
  AVR32_SCIF.oscctrl[osc] = temp;
80028c7c:	fe 78 08 00 	mov	r8,-63488
80028c80:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028c84:	2f 79       	sub	r9,-9
80028c86:	ee fa ff f8 	ld.w	r10,r7[-8]
80028c8a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  AVR32_LEAVE_CRITICAL_REGION( );
80028c8e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028c92:	30 08       	mov	r8,0
80028c94:	f0 09 18 00 	cp.b	r9,r8
80028c98:	c0 20       	breq	80028c9c <scif_stop_osc+0x6e>
80028c9a:	d5 03       	csrf	0x10
      
  return PASS;
80028c9c:	30 08       	mov	r8,0
}
80028c9e:	10 9c       	mov	r12,r8
80028ca0:	2f dd       	sub	sp,-12
80028ca2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028ca6:	00 00       	add	r0,r0
80028ca8:	80 02       	ld.sh	r2,r0[0x0]
80028caa:	8a bc       	ld.uh	r12,r5[0x6]

80028cac <scif_configure_osc_crystalmode>:


long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
80028cac:	eb cd 40 c0 	pushm	r6-r7,lr
80028cb0:	1a 97       	mov	r7,sp
80028cb2:	20 5d       	sub	sp,20
80028cb4:	4d 46       	lddpc	r6,80028e04 <scif_configure_osc_crystalmode+0x158>
80028cb6:	1e 26       	rsub	r6,pc
80028cb8:	ef 4c ff f0 	st.w	r7[-16],r12
80028cbc:	ef 4b ff ec 	st.w	r7[-20],r11
  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;
  
  if (osc == SCIF_OSC0)
80028cc0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028cc4:	58 08       	cp.w	r8,0
80028cc6:	c4 e1       	brne	80028d62 <scif_configure_osc_crystalmode+0xb6>
  {    
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;    
80028cc8:	fe 78 08 00 	mov	r8,-63488
80028ccc:	70 98       	ld.w	r8,r8[0x24]
80028cce:	ef 48 ff f4 	st.w	r7[-12],r8
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // cyrstal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
80028cd2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028cd6:	30 19       	mov	r9,1
80028cd8:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80028cdc:	ef 48 ff f4 	st.w	r7[-12],r8
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  900000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80028ce0:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028ce4:	ec 58 bb 9f 	cp.w	r8,899999
80028ce8:	e0 88 00 1b 	brls	80028d1e <scif_configure_osc_crystalmode+0x72>
80028cec:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028cf0:	e0 69 c6 bf 	mov	r9,50879
80028cf4:	ea 19 00 2d 	orh	r9,0x2d
80028cf8:	12 38       	cp.w	r8,r9
80028cfa:	e0 88 00 0f 	brls	80028d18 <scif_configure_osc_crystalmode+0x6c>
80028cfe:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028d02:	e0 69 11 ff 	mov	r9,4607
80028d06:	ea 19 00 7a 	orh	r9,0x7a
80028d0a:	12 38       	cp.w	r8,r9
80028d0c:	e0 8b 00 04 	brhi	80028d14 <scif_configure_osc_crystalmode+0x68>
80028d10:	30 28       	mov	r8,2
80028d12:	c0 28       	rjmp	80028d16 <scif_configure_osc_crystalmode+0x6a>
80028d14:	30 38       	mov	r8,3
80028d16:	c0 28       	rjmp	80028d1a <scif_configure_osc_crystalmode+0x6e>
80028d18:	30 18       	mov	r8,1
80028d1a:	10 99       	mov	r9,r8
80028d1c:	c0 28       	rjmp	80028d20 <scif_configure_osc_crystalmode+0x74>
80028d1e:	30 09       	mov	r9,0
80028d20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028d24:	f1 d9 d0 22 	bfins	r8,r9,0x1,0x2
80028d28:	ef 48 ff f4 	st.w	r7[-12],r8
                                                   (fcrystal < 3000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                                   (fcrystal < 8000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G2 :
                                                                          AVR32_SCIF_OSCCTRL0_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
80028d2c:	e1 b8 00 00 	mfsr	r8,0x0
80028d30:	10 9c       	mov	r12,r8
80028d32:	c6 3e       	rcall	800289f8 <cpu_irq_is_enabled_flags>
80028d34:	18 98       	mov	r8,r12
80028d36:	ef 68 ff fe 	st.b	r7[-2],r8
80028d3a:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL0 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL);
80028d3c:	fe 78 08 00 	mov	r8,-63488
80028d40:	32 49       	mov	r9,36
80028d42:	ea 19 aa 00 	orh	r9,0xaa00
80028d46:	91 69       	st.w	r8[0x18],r9
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC0] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0];
80028d48:	fe 78 08 00 	mov	r8,-63488
80028d4c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028d50:	91 99       	st.w	r8[0x24],r9
    AVR32_LEAVE_CRITICAL_REGION( );
80028d52:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80028d56:	30 08       	mov	r8,0
80028d58:	f0 09 18 00 	cp.b	r9,r8
80028d5c:	c4 f0       	breq	80028dfa <scif_configure_osc_crystalmode+0x14e>
80028d5e:	d5 03       	csrf	0x10
80028d60:	c4 d8       	rjmp	80028dfa <scif_configure_osc_crystalmode+0x14e>
  }
  else
  { 
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;    
80028d62:	fe 78 08 00 	mov	r8,-63488
80028d66:	70 a8       	ld.w	r8,r8[0x28]
80028d68:	ef 48 ff f8 	st.w	r7[-8],r8
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // cyrstal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
80028d6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028d70:	30 19       	mov	r9,1
80028d72:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80028d76:	ef 48 ff f8 	st.w	r7[-8],r8
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  900000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
80028d7a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028d7e:	ec 58 bb 9f 	cp.w	r8,899999
80028d82:	e0 88 00 1b 	brls	80028db8 <scif_configure_osc_crystalmode+0x10c>
80028d86:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028d8a:	e0 69 c6 bf 	mov	r9,50879
80028d8e:	ea 19 00 2d 	orh	r9,0x2d
80028d92:	12 38       	cp.w	r8,r9
80028d94:	e0 88 00 0f 	brls	80028db2 <scif_configure_osc_crystalmode+0x106>
80028d98:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028d9c:	e0 69 11 ff 	mov	r9,4607
80028da0:	ea 19 00 7a 	orh	r9,0x7a
80028da4:	12 38       	cp.w	r8,r9
80028da6:	e0 8b 00 04 	brhi	80028dae <scif_configure_osc_crystalmode+0x102>
80028daa:	30 28       	mov	r8,2
80028dac:	c0 28       	rjmp	80028db0 <scif_configure_osc_crystalmode+0x104>
80028dae:	30 38       	mov	r8,3
80028db0:	c0 28       	rjmp	80028db4 <scif_configure_osc_crystalmode+0x108>
80028db2:	30 18       	mov	r8,1
80028db4:	10 99       	mov	r9,r8
80028db6:	c0 28       	rjmp	80028dba <scif_configure_osc_crystalmode+0x10e>
80028db8:	30 09       	mov	r9,0
80028dba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028dbe:	f1 d9 d0 22 	bfins	r8,r9,0x1,0x2
80028dc2:	ef 48 ff f8 	st.w	r7[-8],r8
                                                   (fcrystal < 3000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G1 :
                                                   (fcrystal < 8000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G2 :
                                                                          AVR32_SCIF_OSCCTRL1_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
80028dc6:	e1 b8 00 00 	mfsr	r8,0x0
80028dca:	10 9c       	mov	r12,r8
80028dcc:	c1 6e       	rcall	800289f8 <cpu_irq_is_enabled_flags>
80028dce:	18 98       	mov	r8,r12
80028dd0:	ef 68 ff ff 	st.b	r7[-1],r8
80028dd4:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL1 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4);
80028dd6:	fe 78 08 00 	mov	r8,-63488
80028dda:	32 89       	mov	r9,40
80028ddc:	ea 19 aa 00 	orh	r9,0xaa00
80028de0:	91 69       	st.w	r8[0x18],r9
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC1] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1];
80028de2:	fe 78 08 00 	mov	r8,-63488
80028de6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028dea:	91 a9       	st.w	r8[0x28],r9
    AVR32_LEAVE_CRITICAL_REGION( );
80028dec:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028df0:	30 08       	mov	r8,0
80028df2:	f0 09 18 00 	cp.b	r9,r8
80028df6:	c0 20       	breq	80028dfa <scif_configure_osc_crystalmode+0x14e>
80028df8:	d5 03       	csrf	0x10
  }

  return PASS;
80028dfa:	30 08       	mov	r8,0
}
80028dfc:	10 9c       	mov	r12,r8
80028dfe:	2f bd       	sub	sp,-20
80028e00:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028e04:	80 02       	ld.sh	r2,r0[0x0]
80028e06:	8b 3a       	st.w	r5[0xc],r10

80028e08 <scif_configure_osc_extmode>:

long int scif_configure_osc_extmode(scif_osc_t osc)
{
80028e08:	eb cd 40 c0 	pushm	r6-r7,lr
80028e0c:	1a 97       	mov	r7,sp
80028e0e:	20 4d       	sub	sp,16
80028e10:	4a 56       	lddpc	r6,80028ea4 <scif_configure_osc_extmode+0x9c>
80028e12:	1e 26       	rsub	r6,pc
80028e14:	ef 4c ff f0 	st.w	r7[-16],r12
  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;
  
      // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
80028e18:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028e1c:	fe 79 08 00 	mov	r9,-63488
80028e20:	ee fa ff f0 	ld.w	r10,r7[-16]
80028e24:	a3 68       	lsl	r8,0x2
80028e26:	ee 08 00 08 	add	r8,r7,r8
80028e2a:	2f 7a       	sub	r10,-9
80028e2c:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028e30:	f1 49 ff f4 	st.w	r8[-12],r9
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // cyrstal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[osc].mode = SCIF_OSC_MODE_EXT_CLK;
80028e34:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028e38:	a3 68       	lsl	r8,0x2
80028e3a:	ee 08 00 08 	add	r8,r7,r8
80028e3e:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028e42:	30 0a       	mov	r10,0
80028e44:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80028e48:	f1 49 ff f4 	st.w	r8[-12],r9
    AVR32_ENTER_CRITICAL_REGION( );
80028e4c:	e1 b8 00 00 	mfsr	r8,0x0
80028e50:	10 9c       	mov	r12,r8
80028e52:	fe b0 fd d3 	rcall	800289f8 <cpu_irq_is_enabled_flags>
80028e56:	18 98       	mov	r8,r12
80028e58:	ef 68 ff ff 	st.b	r7[-1],r8
80028e5c:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL0 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
80028e5e:	fe 78 08 00 	mov	r8,-63488
80028e62:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028e66:	2f 79       	sub	r9,-9
80028e68:	a3 69       	lsl	r9,0x2
80028e6a:	ea 19 aa 00 	orh	r9,0xaa00
80028e6e:	91 69       	st.w	r8[0x18],r9
    // Write Back
    AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80028e70:	fe 79 08 00 	mov	r9,-63488
80028e74:	ee fa ff f0 	ld.w	r10,r7[-16]
80028e78:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028e7c:	2f 7a       	sub	r10,-9
80028e7e:	a3 68       	lsl	r8,0x2
80028e80:	ee 08 00 08 	add	r8,r7,r8
80028e84:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028e88:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
    AVR32_LEAVE_CRITICAL_REGION( );
80028e8c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028e90:	30 08       	mov	r8,0
80028e92:	f0 09 18 00 	cp.b	r9,r8
80028e96:	c0 20       	breq	80028e9a <scif_configure_osc_extmode+0x92>
80028e98:	d5 03       	csrf	0x10

  return PASS;
80028e9a:	30 08       	mov	r8,0
}
80028e9c:	10 9c       	mov	r12,r8
80028e9e:	2f cd       	sub	sp,-16
80028ea0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028ea4:	80 02       	ld.sh	r2,r0[0x0]
80028ea6:	8c 96       	ld.uh	r6,r6[0x2]

80028ea8 <scif_enable_osc>:

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
80028ea8:	eb cd 40 c0 	pushm	r6-r7,lr
80028eac:	1a 97       	mov	r7,sp
80028eae:	20 6d       	sub	sp,24
80028eb0:	4b 86       	lddpc	r6,80028f90 <scif_enable_osc+0xe8>
80028eb2:	1e 26       	rsub	r6,pc
80028eb4:	ef 4c ff f0 	st.w	r7[-16],r12
80028eb8:	ef 4b ff ec 	st.w	r7[-20],r11
80028ebc:	14 98       	mov	r8,r10
80028ebe:	ef 68 ff e8 	st.b	r7[-24],r8

  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;      
80028ec2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028ec6:	fe 79 08 00 	mov	r9,-63488
80028eca:	ee fa ff f0 	ld.w	r10,r7[-16]
80028ece:	a3 68       	lsl	r8,0x2
80028ed0:	ee 08 00 08 	add	r8,r7,r8
80028ed4:	2f 7a       	sub	r10,-9
80028ed6:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028eda:	f1 49 ff f4 	st.w	r8[-12],r9
  // Modify: Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl.OSCCTRL[osc].startup = startup;
80028ede:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028ee2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028ee6:	5c 58       	castu.b	r8
80028ee8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80028eec:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80028ef0:	f2 08 15 02 	lsl	r8,r9,0x2
80028ef4:	ee 08 00 08 	add	r8,r7,r8
80028ef8:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028efc:	f3 da d1 04 	bfins	r9,r10,0x8,0x4
80028f00:	f1 49 ff f4 	st.w	r8[-12],r9
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
80028f04:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028f08:	a3 68       	lsl	r8,0x2
80028f0a:	ee 08 00 08 	add	r8,r7,r8
80028f0e:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028f12:	30 1a       	mov	r10,1
80028f14:	f3 da d2 01 	bfins	r9,r10,0x10,0x1
80028f18:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80028f1c:	e1 b8 00 00 	mfsr	r8,0x0
80028f20:	10 9c       	mov	r12,r8
80028f22:	fe b0 fd 6b 	rcall	800289f8 <cpu_irq_is_enabled_flags>
80028f26:	18 98       	mov	r8,r12
80028f28:	ef 68 ff ff 	st.b	r7[-1],r8
80028f2c:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
80028f2e:	fe 78 08 00 	mov	r8,-63488
80028f32:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028f36:	2f 79       	sub	r9,-9
80028f38:	a3 69       	lsl	r9,0x2
80028f3a:	ea 19 aa 00 	orh	r9,0xaa00
80028f3e:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80028f40:	fe 79 08 00 	mov	r9,-63488
80028f44:	ee fa ff f0 	ld.w	r10,r7[-16]
80028f48:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028f4c:	2f 7a       	sub	r10,-9
80028f4e:	a3 68       	lsl	r8,0x2
80028f50:	ee 08 00 08 	add	r8,r7,r8
80028f54:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028f58:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80028f5c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028f60:	30 08       	mov	r8,0
80028f62:	f0 09 18 00 	cp.b	r9,r8
80028f66:	c0 20       	breq	80028f6a <scif_enable_osc+0xc2>
80028f68:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80028f6a:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80028f6e:	30 08       	mov	r8,0
80028f70:	f0 09 18 00 	cp.b	r9,r8
80028f74:	c0 90       	breq	80028f86 <scif_enable_osc+0xde>
  {
    // Wait until OSC0 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
80028f76:	30 1c       	mov	r12,1
80028f78:	fe b0 fd 50 	rcall	80028a18 <scif_pclksr_statushigh_wait>
80028f7c:	18 98       	mov	r8,r12
80028f7e:	58 08       	cp.w	r8,0
80028f80:	c0 30       	breq	80028f86 <scif_enable_osc+0xde>
      return -1;
80028f82:	3f f8       	mov	r8,-1
80028f84:	c0 28       	rjmp	80028f88 <scif_enable_osc+0xe0>
  }
      
  return PASS;
80028f86:	30 08       	mov	r8,0
}
80028f88:	10 9c       	mov	r12,r8
80028f8a:	2f ad       	sub	sp,-24
80028f8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028f90:	80 02       	ld.sh	r2,r0[0x0]
80028f92:	8d 36       	st.w	r6[0xc],r6

80028f94 <scif_enable_extosc>:

long int scif_enable_extosc(scif_osc_t osc)
{
80028f94:	eb cd 40 c0 	pushm	r6-r7,lr
80028f98:	1a 97       	mov	r7,sp
80028f9a:	20 4d       	sub	sp,16
80028f9c:	4a 56       	lddpc	r6,80029030 <scif_enable_extosc+0x9c>
80028f9e:	1e 26       	rsub	r6,pc
80028fa0:	ef 4c ff f0 	st.w	r7[-16],r12

  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;    
80028fa4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028fa8:	fe 79 08 00 	mov	r9,-63488
80028fac:	ee fa ff f0 	ld.w	r10,r7[-16]
80028fb0:	a3 68       	lsl	r8,0x2
80028fb2:	ee 08 00 08 	add	r8,r7,r8
80028fb6:	2f 7a       	sub	r10,-9
80028fb8:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028fbc:	f1 49 ff f4 	st.w	r8[-12],r9
  // Modify : Enable the osc.
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
80028fc0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028fc4:	a3 68       	lsl	r8,0x2
80028fc6:	ee 08 00 08 	add	r8,r7,r8
80028fca:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028fce:	30 1a       	mov	r10,1
80028fd0:	f3 da d2 01 	bfins	r9,r10,0x10,0x1
80028fd4:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80028fd8:	e1 b8 00 00 	mfsr	r8,0x0
80028fdc:	10 9c       	mov	r12,r8
80028fde:	fe b0 fd 0d 	rcall	800289f8 <cpu_irq_is_enabled_flags>
80028fe2:	18 98       	mov	r8,r12
80028fe4:	ef 68 ff ff 	st.b	r7[-1],r8
80028fe8:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
80028fea:	fe 78 08 00 	mov	r8,-63488
80028fee:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028ff2:	2f 79       	sub	r9,-9
80028ff4:	a3 69       	lsl	r9,0x2
80028ff6:	ea 19 aa 00 	orh	r9,0xaa00
80028ffa:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80028ffc:	fe 79 08 00 	mov	r9,-63488
80029000:	ee fa ff f0 	ld.w	r10,r7[-16]
80029004:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029008:	2f 7a       	sub	r10,-9
8002900a:	a3 68       	lsl	r8,0x2
8002900c:	ee 08 00 08 	add	r8,r7,r8
80029010:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80029014:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80029018:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002901c:	30 08       	mov	r8,0
8002901e:	f0 09 18 00 	cp.b	r9,r8
80029022:	c0 20       	breq	80029026 <scif_enable_extosc+0x92>
80029024:	d5 03       	csrf	0x10
  
  return PASS;
80029026:	30 08       	mov	r8,0
}
80029028:	10 9c       	mov	r12,r8
8002902a:	2f cd       	sub	sp,-16
8002902c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029030:	80 02       	ld.sh	r2,r0[0x0]
80029032:	8e 22       	ld.sh	r2,r7[0x4]

80029034 <scif_pll_setup>:

/**
 ** PLL0/PLL1 Functions
 **/
long int scif_pll_setup(scif_pll_t pll, const scif_pll_opt_t opt)
{
80029034:	eb cd 40 c0 	pushm	r6-r7,lr
80029038:	1a 97       	mov	r7,sp
8002903a:	20 4d       	sub	sp,16
8002903c:	4d 46       	lddpc	r6,8002918c <scif_pll_setup+0x158>
8002903e:	1e 26       	rsub	r6,pc
80029040:	ee c8 ff f4 	sub	r8,r7,-12
80029044:	ef 4c ff f0 	st.w	r7[-16],r12

  u_avr32_scif_pll_t   u_avr32_scif_pll;

  // Read Register
  u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
80029048:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002904c:	fe 7a 08 00 	mov	r10,-63488
80029050:	ee fb ff f0 	ld.w	r11,r7[-16]
80029054:	a3 69       	lsl	r9,0x2
80029056:	ee 09 00 09 	add	r9,r7,r9
8002905a:	2f 9b       	sub	r11,-7
8002905c:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
80029060:	f3 4a ff f4 	st.w	r9[-12],r10
  // Modify Configuration 
  u_avr32_scif_pll.PLL[pll].pllosc  = opt.osc;
80029064:	ee fa ff f0 	ld.w	r10,r7[-16]
80029068:	f1 39 00 10 	ld.ub	r9,r8[16]
8002906c:	f3 d9 c0 02 	bfextu	r9,r9,0x0,0x2
80029070:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80029074:	f4 09 15 02 	lsl	r9,r10,0x2
80029078:	ee 09 00 09 	add	r9,r7,r9
8002907c:	f2 fa ff f4 	ld.w	r10,r9[-12]
80029080:	f5 db d0 22 	bfins	r10,r11,0x1,0x2
80029084:	f3 4a ff f4 	st.w	r9[-12],r10
  u_avr32_scif_pll.PLL[pll].pllopt  = opt.pll_freq | (opt.pll_div2 << 1) | (opt.pll_wbwdisable << 2);
80029088:	ee fc ff f0 	ld.w	r12,r7[-16]
8002908c:	11 89       	ld.ub	r9,r8[0x0]
8002908e:	12 9a       	mov	r10,r9
80029090:	11 a9       	ld.ub	r9,r8[0x2]
80029092:	a1 79       	lsl	r9,0x1
80029094:	5c 59       	castu.b	r9
80029096:	f5 e9 10 09 	or	r9,r10,r9
8002909a:	f5 d9 c0 08 	bfextu	r10,r9,0x0,0x8
8002909e:	11 99       	ld.ub	r9,r8[0x1]
800290a0:	a3 69       	lsl	r9,0x2
800290a2:	5c 59       	castu.b	r9
800290a4:	f5 e9 10 09 	or	r9,r10,r9
800290a8:	5c 59       	castu.b	r9
800290aa:	5c 59       	castu.b	r9
800290ac:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
800290b0:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
800290b4:	f8 09 15 02 	lsl	r9,r12,0x2
800290b8:	ee 09 00 09 	add	r9,r7,r9
800290bc:	f2 fa ff f4 	ld.w	r10,r9[-12]
800290c0:	f5 db d0 63 	bfins	r10,r11,0x3,0x3
800290c4:	f3 4a ff f4 	st.w	r9[-12],r10
  u_avr32_scif_pll.PLL[pll].plldiv   = opt.div;
800290c8:	ee fa ff f0 	ld.w	r10,r7[-16]
800290cc:	70 29       	ld.w	r9,r8[0x8]
800290ce:	5c 59       	castu.b	r9
800290d0:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
800290d4:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
800290d8:	f4 09 15 02 	lsl	r9,r10,0x2
800290dc:	ee 09 00 09 	add	r9,r7,r9
800290e0:	f2 fa ff f4 	ld.w	r10,r9[-12]
800290e4:	f5 db d1 04 	bfins	r10,r11,0x8,0x4
800290e8:	f3 4a ff f4 	st.w	r9[-12],r10
  u_avr32_scif_pll.PLL[pll].pllmul  = opt.mul;
800290ec:	ee fa ff f0 	ld.w	r10,r7[-16]
800290f0:	70 19       	ld.w	r9,r8[0x4]
800290f2:	5c 59       	castu.b	r9
800290f4:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
800290f8:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
800290fc:	f4 09 15 02 	lsl	r9,r10,0x2
80029100:	ee 09 00 09 	add	r9,r7,r9
80029104:	f2 fa ff f4 	ld.w	r10,r9[-12]
80029108:	f5 db d2 04 	bfins	r10,r11,0x10,0x4
8002910c:	f3 4a ff f4 	st.w	r9[-12],r10
  u_avr32_scif_pll.PLL[pll].pllcount= opt.lockcount;
80029110:	ee f9 ff f0 	ld.w	r9,r7[-16]
80029114:	70 38       	ld.w	r8,r8[0xc]
80029116:	5c 58       	castu.b	r8
80029118:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8002911c:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80029120:	f2 08 15 02 	lsl	r8,r9,0x2
80029124:	ee 08 00 08 	add	r8,r7,r8
80029128:	f0 f9 ff f4 	ld.w	r9,r8[-12]
8002912c:	f3 da d3 06 	bfins	r9,r10,0x18,0x6
80029130:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80029134:	e1 b8 00 00 	mfsr	r8,0x0
80029138:	10 9c       	mov	r12,r8
8002913a:	fe b0 fc 5f 	rcall	800289f8 <cpu_irq_is_enabled_flags>
8002913e:	18 98       	mov	r8,r12
80029140:	ef 68 ff ff 	st.b	r7[-1],r8
80029144:	d3 03       	ssrf	0x10
  // Unlock the write-protected PLL0 register
  SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll); 
80029146:	fe 78 08 00 	mov	r8,-63488
8002914a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002914e:	2f 99       	sub	r9,-7
80029150:	a3 69       	lsl	r9,0x2
80029152:	ea 19 aa 00 	orh	r9,0xaa00
80029156:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
80029158:	fe 79 08 00 	mov	r9,-63488
8002915c:	ee fa ff f0 	ld.w	r10,r7[-16]
80029160:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029164:	2f 9a       	sub	r10,-7
80029166:	a3 68       	lsl	r8,0x2
80029168:	ee 08 00 08 	add	r8,r7,r8
8002916c:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80029170:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80029174:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029178:	30 08       	mov	r8,0
8002917a:	f0 09 18 00 	cp.b	r9,r8
8002917e:	c0 20       	breq	80029182 <scif_pll_setup+0x14e>
80029180:	d5 03       	csrf	0x10

  return PASS;
80029182:	30 08       	mov	r8,0
}
80029184:	10 9c       	mov	r12,r8
80029186:	2f cd       	sub	sp,-16
80029188:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002918c:	80 02       	ld.sh	r2,r0[0x0]
8002918e:	8e c2       	ld.uh	r2,r7[0x8]

80029190 <scif_pll_enable>:

long int scif_pll_enable(scif_pll_t pll)
{
80029190:	eb cd 40 c0 	pushm	r6-r7,lr
80029194:	1a 97       	mov	r7,sp
80029196:	20 4d       	sub	sp,16
80029198:	4a 56       	lddpc	r6,8002922c <scif_pll_enable+0x9c>
8002919a:	1e 26       	rsub	r6,pc
8002919c:	ef 4c ff f0 	st.w	r7[-16],r12

  u_avr32_scif_pll_t   u_avr32_scif_pll;
  
    // Read Register
    u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
800291a0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800291a4:	fe 79 08 00 	mov	r9,-63488
800291a8:	ee fa ff f0 	ld.w	r10,r7[-16]
800291ac:	a3 68       	lsl	r8,0x2
800291ae:	ee 08 00 08 	add	r8,r7,r8
800291b2:	2f 9a       	sub	r10,-7
800291b4:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
800291b8:	f1 49 ff f4 	st.w	r8[-12],r9
    // Modify Configuration 
    u_avr32_scif_pll.PLL[pll].pllen = ENABLE;
800291bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800291c0:	a3 68       	lsl	r8,0x2
800291c2:	ee 08 00 08 	add	r8,r7,r8
800291c6:	f0 f9 ff f4 	ld.w	r9,r8[-12]
800291ca:	30 1a       	mov	r10,1
800291cc:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
800291d0:	f1 49 ff f4 	st.w	r8[-12],r9
    AVR32_ENTER_CRITICAL_REGION( );
800291d4:	e1 b8 00 00 	mfsr	r8,0x0
800291d8:	10 9c       	mov	r12,r8
800291da:	fe b0 fc 0f 	rcall	800289f8 <cpu_irq_is_enabled_flags>
800291de:	18 98       	mov	r8,r12
800291e0:	ef 68 ff ff 	st.b	r7[-1],r8
800291e4:	d3 03       	ssrf	0x10
    // Unlock the write-protected PLL0 register
    SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll); 
800291e6:	fe 78 08 00 	mov	r8,-63488
800291ea:	ee f9 ff f0 	ld.w	r9,r7[-16]
800291ee:	2f 99       	sub	r9,-7
800291f0:	a3 69       	lsl	r9,0x2
800291f2:	ea 19 aa 00 	orh	r9,0xaa00
800291f6:	91 69       	st.w	r8[0x18],r9
    // Write Back
    AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
800291f8:	fe 79 08 00 	mov	r9,-63488
800291fc:	ee fa ff f0 	ld.w	r10,r7[-16]
80029200:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029204:	2f 9a       	sub	r10,-7
80029206:	a3 68       	lsl	r8,0x2
80029208:	ee 08 00 08 	add	r8,r7,r8
8002920c:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80029210:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
    AVR32_LEAVE_CRITICAL_REGION( );
80029214:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029218:	30 08       	mov	r8,0
8002921a:	f0 09 18 00 	cp.b	r9,r8
8002921e:	c0 20       	breq	80029222 <scif_pll_enable+0x92>
80029220:	d5 03       	csrf	0x10
  
  return PASS;
80029222:	30 08       	mov	r8,0
}
80029224:	10 9c       	mov	r12,r8
80029226:	2f cd       	sub	sp,-16
80029228:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002922c:	80 02       	ld.sh	r2,r0[0x0]
8002922e:	90 1e       	ld.sh	lr,r8[0x2]

80029230 <scif_pll_disable>:

long int scif_pll_disable(scif_pll_t pll)
{
80029230:	eb cd 40 c0 	pushm	r6-r7,lr
80029234:	1a 97       	mov	r7,sp
80029236:	20 4d       	sub	sp,16
80029238:	4a 56       	lddpc	r6,800292cc <scif_pll_disable+0x9c>
8002923a:	1e 26       	rsub	r6,pc
8002923c:	ef 4c ff f0 	st.w	r7[-16],r12

  u_avr32_scif_pll_t   u_avr32_scif_pll;

  // Read Register
  u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
80029240:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029244:	fe 79 08 00 	mov	r9,-63488
80029248:	ee fa ff f0 	ld.w	r10,r7[-16]
8002924c:	a3 68       	lsl	r8,0x2
8002924e:	ee 08 00 08 	add	r8,r7,r8
80029252:	2f 9a       	sub	r10,-7
80029254:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80029258:	f1 49 ff f4 	st.w	r8[-12],r9
  // Modify Configuration 
  u_avr32_scif_pll.PLL[pll].pllen = DISABLE;
8002925c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029260:	a3 68       	lsl	r8,0x2
80029262:	ee 08 00 08 	add	r8,r7,r8
80029266:	f0 f9 ff f4 	ld.w	r9,r8[-12]
8002926a:	30 0a       	mov	r10,0
8002926c:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80029270:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80029274:	e1 b8 00 00 	mfsr	r8,0x0
80029278:	10 9c       	mov	r12,r8
8002927a:	fe b0 fb bf 	rcall	800289f8 <cpu_irq_is_enabled_flags>
8002927e:	18 98       	mov	r8,r12
80029280:	ef 68 ff ff 	st.b	r7[-1],r8
80029284:	d3 03       	ssrf	0x10
  // Unlock the write-protected PLL0 register
  SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll); 
80029286:	fe 78 08 00 	mov	r8,-63488
8002928a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002928e:	2f 99       	sub	r9,-7
80029290:	a3 69       	lsl	r9,0x2
80029292:	ea 19 aa 00 	orh	r9,0xaa00
80029296:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
80029298:	fe 79 08 00 	mov	r9,-63488
8002929c:	ee fa ff f0 	ld.w	r10,r7[-16]
800292a0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800292a4:	2f 9a       	sub	r10,-7
800292a6:	a3 68       	lsl	r8,0x2
800292a8:	ee 08 00 08 	add	r8,r7,r8
800292ac:	f0 f8 ff f4 	ld.w	r8,r8[-12]
800292b0:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
800292b4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800292b8:	30 08       	mov	r8,0
800292ba:	f0 09 18 00 	cp.b	r9,r8
800292be:	c0 20       	breq	800292c2 <scif_pll_disable+0x92>
800292c0:	d5 03       	csrf	0x10

  return PASS;
800292c2:	30 08       	mov	r8,0
}
800292c4:	10 9c       	mov	r12,r8
800292c6:	2f cd       	sub	sp,-16
800292c8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800292cc:	80 02       	ld.sh	r2,r0[0x0]
800292ce:	90 be       	ld.uh	lr,r8[0x6]

800292d0 <scif_wait_for_pll_locked>:

long int scif_wait_for_pll_locked(scif_pll_t pll)
{
800292d0:	eb cd 40 80 	pushm	r7,lr
800292d4:	1a 97       	mov	r7,sp
800292d6:	20 1d       	sub	sp,4
800292d8:	ef 4c ff fc 	st.w	r7[-4],r12
  
  if (pll == SCIF_PLL0)
800292dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800292e0:	58 08       	cp.w	r8,0
800292e2:	c0 81       	brne	800292f2 <scif_wait_for_pll_locked+0x22>
  { 
      // Wait until PLL0 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL0_LOCK_MASK));
800292e4:	fe 78 08 00 	mov	r8,-63488
800292e8:	70 58       	ld.w	r8,r8[0x14]
800292ea:	e2 18 00 10 	andl	r8,0x10,COH
800292ee:	cf b0       	breq	800292e4 <scif_wait_for_pll_locked+0x14>
800292f0:	c0 78       	rjmp	800292fe <scif_wait_for_pll_locked+0x2e>
  }
  else
  {
      // Wait until PLL1 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL1_LOCK_MASK));
800292f2:	fe 78 08 00 	mov	r8,-63488
800292f6:	70 58       	ld.w	r8,r8[0x14]
800292f8:	e2 18 00 20 	andl	r8,0x20,COH
800292fc:	cf b0       	breq	800292f2 <scif_wait_for_pll_locked+0x22>
  }
  
  return PASS;
800292fe:	30 08       	mov	r8,0
}
80029300:	10 9c       	mov	r12,r8
80029302:	2f fd       	sub	sp,-4
80029304:	e3 cd 80 80 	ldm	sp++,r7,pc

80029308 <scif_start_osc32>:
/**
 ** OSC32 Functions
 **/

long int scif_start_osc32(const scif_osc32_opt_t *opt, bool wait_for_ready)
{
80029308:	eb cd 40 c0 	pushm	r6-r7,lr
8002930c:	1a 97       	mov	r7,sp
8002930e:	20 4d       	sub	sp,16
80029310:	4a f6       	lddpc	r6,800293cc <scif_start_osc32+0xc4>
80029312:	1e 26       	rsub	r6,pc
80029314:	ef 4c ff f4 	st.w	r7[-12],r12
80029318:	16 98       	mov	r8,r11
8002931a:	ef 68 ff f0 	st.b	r7[-16],r8
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // Read Register
  u_avr32_scif_oscctrl32.oscctrl32 = AVR32_SCIF.oscctrl32 ;  
8002931e:	fe 78 08 00 	mov	r8,-63488
80029322:	71 38       	ld.w	r8,r8[0x4c]
80029324:	ef 48 ff f8 	st.w	r7[-8],r8
  
  // Modify : Configure & start OSC32.
  u_avr32_scif_oscctrl32.OSCCTRL32.mode = opt->mode;
80029328:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002932c:	70 18       	ld.w	r8,r8[0x4]
8002932e:	5c 58       	castu.b	r8
80029330:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80029334:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029338:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002933c:	f1 d9 d1 02 	bfins	r8,r9,0x8,0x2
80029340:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl32.OSCCTRL32.startup = opt->startup;
80029344:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029348:	f1 38 00 08 	ld.ub	r8,r8[8]
8002934c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80029350:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029354:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029358:	f1 d9 d2 03 	bfins	r8,r9,0x10,0x3
8002935c:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl32.OSCCTRL32.osc32en = ENABLE;
80029360:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029364:	30 19       	mov	r9,1
80029366:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
8002936a:	ef 48 ff f8 	st.w	r7[-8],r8
  
  AVR32_ENTER_CRITICAL_REGION( );
8002936e:	e1 b8 00 00 	mfsr	r8,0x0
80029372:	10 9c       	mov	r12,r8
80029374:	fe b0 fb 42 	rcall	800289f8 <cpu_irq_is_enabled_flags>
80029378:	18 98       	mov	r8,r12
8002937a:	ef 68 ff ff 	st.b	r7[-1],r8
8002937e:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL32 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL32);
80029380:	fe 78 08 00 	mov	r8,-63488
80029384:	34 c9       	mov	r9,76
80029386:	ea 19 aa 00 	orh	r9,0xaa00
8002938a:	91 69       	st.w	r8[0x18],r9
  
  // Write Back
  AVR32_SCIF.oscctrl32 = u_avr32_scif_oscctrl32.oscctrl32;
8002938c:	fe 78 08 00 	mov	r8,-63488
80029390:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029394:	f1 49 00 4c 	st.w	r8[76],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80029398:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002939c:	30 08       	mov	r8,0
8002939e:	f0 09 18 00 	cp.b	r9,r8
800293a2:	c0 20       	breq	800293a6 <scif_start_osc32+0x9e>
800293a4:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
800293a6:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800293aa:	30 08       	mov	r8,0
800293ac:	f0 09 18 00 	cp.b	r9,r8
800293b0:	c0 90       	breq	800293c2 <scif_start_osc32+0xba>
  {
    // Wait until OSC32 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC32RDY_MASK))
800293b2:	30 4c       	mov	r12,4
800293b4:	fe b0 fb 32 	rcall	80028a18 <scif_pclksr_statushigh_wait>
800293b8:	18 98       	mov	r8,r12
800293ba:	58 08       	cp.w	r8,0
800293bc:	c0 30       	breq	800293c2 <scif_start_osc32+0xba>
      return -1;
800293be:	3f f8       	mov	r8,-1
800293c0:	c0 28       	rjmp	800293c4 <scif_start_osc32+0xbc>
  }
  
  return PASS;
800293c2:	30 08       	mov	r8,0
}
800293c4:	10 9c       	mov	r12,r8
800293c6:	2f cd       	sub	sp,-16
800293c8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800293cc:	80 02       	ld.sh	r2,r0[0x0]
800293ce:	91 96       	st.w	r8[0x24],r6

800293d0 <scif_stop_osc32>:


long scif_stop_osc32()
{
800293d0:	eb cd 40 c0 	pushm	r6-r7,lr
800293d4:	1a 97       	mov	r7,sp
800293d6:	20 2d       	sub	sp,8
800293d8:	49 76       	lddpc	r6,80029434 <scif_stop_osc32+0x64>
800293da:	1e 26       	rsub	r6,pc
  unsigned long temp = AVR32_SCIF.oscctrl32;
800293dc:	fe 78 08 00 	mov	r8,-63488
800293e0:	71 38       	ld.w	r8,r8[0x4c]
800293e2:	ef 48 ff f8 	st.w	r7[-8],r8
  temp &= ~AVR32_SCIF_OSCCTRL32_OSC32EN_MASK;
800293e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800293ea:	a1 c8       	cbr	r8,0x0
800293ec:	ef 48 ff f8 	st.w	r7[-8],r8

  AVR32_ENTER_CRITICAL_REGION( );
800293f0:	e1 b8 00 00 	mfsr	r8,0x0
800293f4:	10 9c       	mov	r12,r8
800293f6:	fe b0 fb 01 	rcall	800289f8 <cpu_irq_is_enabled_flags>
800293fa:	18 98       	mov	r8,r12
800293fc:	ef 68 ff ff 	st.b	r7[-1],r8
80029400:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL32 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL32);
80029402:	fe 78 08 00 	mov	r8,-63488
80029406:	34 c9       	mov	r9,76
80029408:	ea 19 aa 00 	orh	r9,0xaa00
8002940c:	91 69       	st.w	r8[0x18],r9
  
  // Stop OSC32.
  AVR32_SCIF.oscctrl32 = temp;
8002940e:	fe 78 08 00 	mov	r8,-63488
80029412:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029416:	f1 49 00 4c 	st.w	r8[76],r9
  AVR32_LEAVE_CRITICAL_REGION( );
8002941a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002941e:	30 08       	mov	r8,0
80029420:	f0 09 18 00 	cp.b	r9,r8
80029424:	c0 20       	breq	80029428 <scif_stop_osc32+0x58>
80029426:	d5 03       	csrf	0x10

  return PASS;
80029428:	30 08       	mov	r8,0
}
8002942a:	10 9c       	mov	r12,r8
8002942c:	2f ed       	sub	sp,-8
8002942e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029432:	00 00       	add	r0,r0
80029434:	80 02       	ld.sh	r2,r0[0x0]
80029436:	92 5e       	ld.sh	lr,r9[0xa]

80029438 <scif_start_rc8M>:
/**
 ** 8MHz RCosc Functions
 **/

void scif_start_rc8M(void)
{
80029438:	eb cd 40 c0 	pushm	r6-r7,lr
8002943c:	1a 97       	mov	r7,sp
8002943e:	20 2d       	sub	sp,8
80029440:	49 66       	lddpc	r6,80029498 <scif_start_rc8M+0x60>
80029442:	1e 26       	rsub	r6,pc
  unsigned int* calibration_bits = (unsigned int*)0x80800200;
80029444:	e0 68 02 00 	mov	r8,512
80029448:	ea 18 80 80 	orh	r8,0x8080
8002944c:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80029450:	e1 b8 00 00 	mfsr	r8,0x0
80029454:	10 9c       	mov	r12,r8
80029456:	fe b0 fa d1 	rcall	800289f8 <cpu_irq_is_enabled_flags>
8002945a:	18 98       	mov	r8,r12
8002945c:	ef 68 ff ff 	st.b	r7[-1],r8
80029460:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC8MCR register
  SCIF_UNLOCK(AVR32_SCIF_RCCR8);
80029462:	fe 78 08 00 	mov	r8,-63488
80029466:	34 89       	mov	r9,72
80029468:	ea 19 aa 00 	orh	r9,0xaa00
8002946c:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.rccr8 = AVR32_SCIF_RCCR8_RCOSC8_EN_MASK | ((*calibration_bits)&AVR32_SCIF_RCCR8_CALIB_MASK);
8002946e:	fe 78 08 00 	mov	r8,-63488
80029472:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029476:	72 09       	ld.w	r9,r9[0x0]
80029478:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
8002947c:	b9 a9       	sbr	r9,0x18
8002947e:	f1 49 00 48 	st.w	r8[72],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80029482:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029486:	30 08       	mov	r8,0
80029488:	f0 09 18 00 	cp.b	r9,r8
8002948c:	c0 20       	breq	80029490 <scif_start_rc8M+0x58>
8002948e:	d5 03       	csrf	0x10
}
80029490:	2f ed       	sub	sp,-8
80029492:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029496:	00 00       	add	r0,r0
80029498:	80 02       	ld.sh	r2,r0[0x0]
8002949a:	92 c6       	ld.uh	r6,r9[0x8]

8002949c <scif_stop_rc8M>:

void scif_stop_rc8M(void)
{
8002949c:	eb cd 40 c0 	pushm	r6-r7,lr
800294a0:	1a 97       	mov	r7,sp
800294a2:	20 2d       	sub	sp,8
800294a4:	49 66       	lddpc	r6,800294fc <scif_stop_rc8M+0x60>
800294a6:	1e 26       	rsub	r6,pc
  unsigned long temp = AVR32_SCIF.rccr8;
800294a8:	fe 78 08 00 	mov	r8,-63488
800294ac:	71 28       	ld.w	r8,r8[0x48]
800294ae:	ef 48 ff f8 	st.w	r7[-8],r8
  
  AVR32_ENTER_CRITICAL_REGION( );
800294b2:	e1 b8 00 00 	mfsr	r8,0x0
800294b6:	10 9c       	mov	r12,r8
800294b8:	fe b0 fa a0 	rcall	800289f8 <cpu_irq_is_enabled_flags>
800294bc:	18 98       	mov	r8,r12
800294be:	ef 68 ff ff 	st.b	r7[-1],r8
800294c2:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC8MCR register
  SCIF_UNLOCK(AVR32_SCIF_RCCR8);
800294c4:	fe 78 08 00 	mov	r8,-63488
800294c8:	34 89       	mov	r9,72
800294ca:	ea 19 aa 00 	orh	r9,0xaa00
800294ce:	91 69       	st.w	r8[0x18],r9
  temp &= ~AVR32_SCIF_RCCR8_RCOSC8_EN_MASK;
800294d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800294d4:	b9 c8       	cbr	r8,0x18
800294d6:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_SCIF.rccr8 = temp;
800294da:	fe 78 08 00 	mov	r8,-63488
800294de:	ee f9 ff f8 	ld.w	r9,r7[-8]
800294e2:	f1 49 00 48 	st.w	r8[72],r9
  AVR32_LEAVE_CRITICAL_REGION( );
800294e6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800294ea:	30 08       	mov	r8,0
800294ec:	f0 09 18 00 	cp.b	r9,r8
800294f0:	c0 20       	breq	800294f4 <scif_stop_rc8M+0x58>
800294f2:	d5 03       	csrf	0x10
}
800294f4:	2f ed       	sub	sp,-8
800294f6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800294fa:	00 00       	add	r0,r0
800294fc:	80 02       	ld.sh	r2,r0[0x0]
800294fe:	93 2a       	st.w	r9[0x8],r10

80029500 <scif_start_rc120M>:
/**
 ** 120MHz RCosc Functions
 **/

void scif_start_rc120M(void)
{
80029500:	eb cd 40 c0 	pushm	r6-r7,lr
80029504:	1a 97       	mov	r7,sp
80029506:	20 1d       	sub	sp,4
80029508:	49 06       	lddpc	r6,80029548 <scif_start_rc120M+0x48>
8002950a:	1e 26       	rsub	r6,pc
  AVR32_ENTER_CRITICAL_REGION( );
8002950c:	e1 b8 00 00 	mfsr	r8,0x0
80029510:	10 9c       	mov	r12,r8
80029512:	fe b0 fa 73 	rcall	800289f8 <cpu_irq_is_enabled_flags>
80029516:	18 98       	mov	r8,r12
80029518:	ef 68 ff ff 	st.b	r7[-1],r8
8002951c:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC120MCR register
  SCIF_UNLOCK(AVR32_SCIF_RC120MCR);
8002951e:	fe 78 08 00 	mov	r8,-63488
80029522:	35 89       	mov	r9,88
80029524:	ea 19 aa 00 	orh	r9,0xaa00
80029528:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.rc120mcr = AVR32_SCIF_RC120MCR_EN_MASK;
8002952a:	fe 78 08 00 	mov	r8,-63488
8002952e:	30 19       	mov	r9,1
80029530:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80029534:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029538:	30 08       	mov	r8,0
8002953a:	f0 09 18 00 	cp.b	r9,r8
8002953e:	c0 20       	breq	80029542 <scif_start_rc120M+0x42>
80029540:	d5 03       	csrf	0x10
}
80029542:	2f fd       	sub	sp,-4
80029544:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029548:	80 02       	ld.sh	r2,r0[0x0]
8002954a:	93 8e       	st.w	r9[0x20],lr

8002954c <scif_stop_rc120M>:

void scif_stop_rc120M(void)
{
8002954c:	eb cd 40 c0 	pushm	r6-r7,lr
80029550:	1a 97       	mov	r7,sp
80029552:	20 2d       	sub	sp,8
80029554:	49 66       	lddpc	r6,800295ac <scif_stop_rc120M+0x60>
80029556:	1e 26       	rsub	r6,pc
  unsigned long temp = AVR32_SCIF.rc120mcr;
80029558:	fe 78 08 00 	mov	r8,-63488
8002955c:	71 68       	ld.w	r8,r8[0x58]
8002955e:	ef 48 ff f8 	st.w	r7[-8],r8

  AVR32_ENTER_CRITICAL_REGION( );
80029562:	e1 b8 00 00 	mfsr	r8,0x0
80029566:	10 9c       	mov	r12,r8
80029568:	fe b0 fa 48 	rcall	800289f8 <cpu_irq_is_enabled_flags>
8002956c:	18 98       	mov	r8,r12
8002956e:	ef 68 ff ff 	st.b	r7[-1],r8
80029572:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC120MCR register
  SCIF_UNLOCK(AVR32_SCIF_RC120MCR);
80029574:	fe 78 08 00 	mov	r8,-63488
80029578:	35 89       	mov	r9,88
8002957a:	ea 19 aa 00 	orh	r9,0xaa00
8002957e:	91 69       	st.w	r8[0x18],r9
  temp &= ~AVR32_SCIF_RC120MCR_EN_MASK;
80029580:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029584:	a1 c8       	cbr	r8,0x0
80029586:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_SCIF.rc120mcr = temp;
8002958a:	fe 78 08 00 	mov	r8,-63488
8002958e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029592:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80029596:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002959a:	30 08       	mov	r8,0
8002959c:	f0 09 18 00 	cp.b	r9,r8
800295a0:	c0 20       	breq	800295a4 <scif_stop_rc120M+0x58>
800295a2:	d5 03       	csrf	0x10
}
800295a4:	2f ed       	sub	sp,-8
800295a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800295aa:	00 00       	add	r0,r0
800295ac:	80 02       	ld.sh	r2,r0[0x0]
800295ae:	93 da       	st.w	r9[0x34],r10

800295b0 <scif_start_gclk>:
/**
 ** Generic Clock Functions
 **/

long int scif_start_gclk(unsigned int gclk, const scif_gclk_opt_t *opt)
{
800295b0:	eb cd 40 80 	pushm	r7,lr
800295b4:	1a 97       	mov	r7,sp
800295b6:	20 2d       	sub	sp,8
800295b8:	ef 4c ff fc 	st.w	r7[-4],r12
800295bc:	ef 4b ff f8 	st.w	r7[-8],r11
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
800295c0:	fe 78 08 00 	mov	r8,-63488
800295c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800295c8:	2e 79       	sub	r9,-25
800295ca:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800295ce:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800295d2:	5c 58       	castu.b	r8
800295d4:	c0 30       	breq	800295da <scif_start_gclk+0x2a>
    return -1;
800295d6:	3f f8       	mov	r8,-1
800295d8:	c2 08       	rjmp	80029618 <scif_start_gclk+0x68>

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
800295da:	fe 78 08 00 	mov	r8,-63488
800295de:	ee f9 ff fc 	ld.w	r9,r7[-4]
800295e2:	ee fa ff f8 	ld.w	r10,r7[-8]
800295e6:	74 1a       	ld.w	r10,r10[0x4]
800295e8:	b1 6a       	lsl	r10,0x10
800295ea:	14 9b       	mov	r11,r10
800295ec:	e6 1b 00 ff 	andh	r11,0xff,COH
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
800295f0:	ee fa ff f8 	ld.w	r10,r7[-8]
800295f4:	74 2a       	ld.w	r10,r10[0x8]
800295f6:	a1 7a       	lsl	r10,0x1
800295f8:	e2 1a 00 02 	andl	r10,0x2,COH
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
800295fc:	14 4b       	or	r11,r10
800295fe:	ee fa ff f8 	ld.w	r10,r7[-8]
80029602:	74 0a       	ld.w	r10,r10[0x0]
80029604:	a9 6a       	lsl	r10,0x8
80029606:	e2 1a 0f 00 	andl	r10,0xf00,COH
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);
8002960a:	f7 ea 10 0a 	or	r10,r11,r10
  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
    return -1;

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
8002960e:	a1 aa       	sbr	r10,0x0
80029610:	2e 79       	sub	r9,-25
80029612:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);

  return PASS;
80029616:	30 08       	mov	r8,0
}
80029618:	10 9c       	mov	r12,r8
8002961a:	2f ed       	sub	sp,-8
8002961c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029620 <scif_stop_gclk>:


long int scif_stop_gclk(unsigned int gclk)
{
80029620:	eb cd 40 80 	pushm	r7,lr
80029624:	1a 97       	mov	r7,sp
80029626:	20 2d       	sub	sp,8
80029628:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
8002962c:	e0 78 86 a0 	mov	r8,100000
80029630:	ef 48 ff fc 	st.w	r7[-4],r8
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;
80029634:	fe 78 08 00 	mov	r8,-63488
80029638:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002963c:	fe 7a 08 00 	mov	r10,-63488
80029640:	ee fb ff f8 	ld.w	r11,r7[-8]
80029644:	2e 7b       	sub	r11,-25
80029646:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
8002964a:	a1 ca       	cbr	r10,0x0
8002964c:	2e 79       	sub	r9,-25
8002964e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  
  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80029652:	c0 c8       	rjmp	8002966a <scif_stop_gclk+0x4a>
  {
    if(--timeout == 0)
80029654:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029658:	20 18       	sub	r8,1
8002965a:	ef 48 ff fc 	st.w	r7[-4],r8
8002965e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029662:	58 08       	cp.w	r8,0
80029664:	c0 31       	brne	8002966a <scif_stop_gclk+0x4a>
      return -1;
80029666:	3f f8       	mov	r8,-1
80029668:	c0 d8       	rjmp	80029682 <scif_stop_gclk+0x62>

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;
  
  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
8002966a:	fe 78 08 00 	mov	r8,-63488
8002966e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029672:	2e 79       	sub	r9,-25
80029674:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80029678:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002967c:	5c 58       	castu.b	r8
8002967e:	ce b1       	brne	80029654 <scif_stop_gclk+0x34>
  {
    if(--timeout == 0)
      return -1;
  }
  
  return PASS;
80029680:	30 08       	mov	r8,0
}
80029682:	10 9c       	mov	r12,r8
80029684:	2f ed       	sub	sp,-8
80029686:	e3 cd 80 80 	ldm	sp++,r7,pc

8002968a <scif_gc_setup>:


long int scif_gc_setup(unsigned int gclk, scif_gcctrl_oscsel_t clk_src, unsigned int diven, unsigned int divfactor)
{
8002968a:	eb cd 40 c0 	pushm	r6-r7,lr
8002968e:	1a 97       	mov	r7,sp
80029690:	20 5d       	sub	sp,20
80029692:	4a f6       	lddpc	r6,8002974c <scif_gc_setup+0xc2>
80029694:	1e 26       	rsub	r6,pc
80029696:	ef 4c ff f8 	st.w	r7[-8],r12
8002969a:	ef 4b ff f4 	st.w	r7[-12],r11
8002969e:	ef 4a ff f0 	st.w	r7[-16],r10
800296a2:	ef 49 ff ec 	st.w	r7[-20],r9
  int restart_gc = false;
800296a6:	30 08       	mov	r8,0
800296a8:	ef 48 ff fc 	st.w	r7[-4],r8
  
  
  // Change the division factor to conform to the equation: fgclk = fsrc/divfactor = fsrc/(2*(div+1))
  divfactor = (divfactor>>1) -1;
800296ac:	ee f8 ff ec 	ld.w	r8,r7[-20]
800296b0:	a1 98       	lsr	r8,0x1
800296b2:	20 18       	sub	r8,1
800296b4:	ef 48 ff ec 	st.w	r7[-20],r8
      return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, disable it before changing its setup.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
800296b8:	fe 78 08 00 	mov	r8,-63488
800296bc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800296c0:	2e 79       	sub	r9,-25
800296c2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800296c6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800296ca:	5c 58       	castu.b	r8
800296cc:	c0 d0       	breq	800296e6 <scif_gc_setup+0x5c>
  {
    restart_gc = true;
800296ce:	30 18       	mov	r8,1
800296d0:	ef 48 ff fc 	st.w	r7[-4],r8
    if(scif_stop_gclk(gclk) < 0)
800296d4:	ee fc ff f8 	ld.w	r12,r7[-8]
800296d8:	f0 16 02 19 	mcall	r6[2148]
800296dc:	18 98       	mov	r8,r12
800296de:	58 08       	cp.w	r8,0
800296e0:	c0 34       	brge	800296e6 <scif_gc_setup+0x5c>
      return -1;  // Could not stop the generic clock.
800296e2:	3f f8       	mov	r8,-1
800296e4:	c2 f8       	rjmp	80029742 <scif_gc_setup+0xb8>
  }

  // Setup the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((divfactor << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
800296e6:	fe 78 08 00 	mov	r8,-63488
800296ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
800296ee:	ee fa ff ec 	ld.w	r10,r7[-20]
800296f2:	b1 6a       	lsl	r10,0x10
800296f4:	14 9b       	mov	r11,r10
800296f6:	e6 1b 00 ff 	andh	r11,0xff,COH
                            |((diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
800296fa:	ee fa ff f0 	ld.w	r10,r7[-16]
800296fe:	a1 7a       	lsl	r10,0x1
80029700:	e2 1a 00 02 	andl	r10,0x2,COH
                            |((clk_src << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK);
80029704:	14 4b       	or	r11,r10
80029706:	ee fa ff f4 	ld.w	r10,r7[-12]
8002970a:	a9 6a       	lsl	r10,0x8
8002970c:	e2 1a 0f 00 	andl	r10,0xf00,COH
    if(scif_stop_gclk(gclk) < 0)
      return -1;  // Could not stop the generic clock.
  }

  // Setup the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((divfactor << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
80029710:	f7 ea 10 0a 	or	r10,r11,r10
80029714:	2e 79       	sub	r9,-25
80029716:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                            |((diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((clk_src << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK);
                            
  // Restart the gc if it previously was enabled.
  if(true == restart_gc)
8002971a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002971e:	58 18       	cp.w	r8,1
80029720:	c1 01       	brne	80029740 <scif_gc_setup+0xb6>
    AVR32_SCIF.gcctrl[gclk] |= AVR32_SCIF_GCCTRL_CEN_MASK ;
80029722:	fe 78 08 00 	mov	r8,-63488
80029726:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002972a:	fe 7a 08 00 	mov	r10,-63488
8002972e:	ee fb ff f8 	ld.w	r11,r7[-8]
80029732:	2e 7b       	sub	r11,-25
80029734:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
80029738:	a1 aa       	sbr	r10,0x0
8002973a:	2e 79       	sub	r9,-25
8002973c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

  return PASS;
80029740:	30 08       	mov	r8,0
}
80029742:	10 9c       	mov	r12,r8
80029744:	2f bd       	sub	sp,-20
80029746:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002974a:	00 00       	add	r0,r0
8002974c:	80 02       	ld.sh	r2,r0[0x0]
8002974e:	95 18       	st.w	r10[0x4],r8

80029750 <scif_gc_enable>:


long int scif_gc_enable(unsigned int gclk)
{
80029750:	eb cd 40 80 	pushm	r7,lr
80029754:	1a 97       	mov	r7,sp
80029756:	20 1d       	sub	sp,4
80029758:	ef 4c ff fc 	st.w	r7[-4],r12
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, do nothing.
  if(!(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK))
8002975c:	fe 78 08 00 	mov	r8,-63488
80029760:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029764:	2e 79       	sub	r9,-25
80029766:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8002976a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002976e:	c1 01       	brne	8002978e <scif_gc_enable+0x3e>
    AVR32_SCIF.gcctrl[gclk] |= AVR32_SCIF_GCCTRL_CEN_MASK;
80029770:	fe 78 08 00 	mov	r8,-63488
80029774:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029778:	fe 7a 08 00 	mov	r10,-63488
8002977c:	ee fb ff fc 	ld.w	r11,r7[-4]
80029780:	2e 7b       	sub	r11,-25
80029782:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
80029786:	a1 aa       	sbr	r10,0x0
80029788:	2e 79       	sub	r9,-25
8002978a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
    
  return PASS;
8002978e:	30 08       	mov	r8,0

}
80029790:	10 9c       	mov	r12,r8
80029792:	2f fd       	sub	sp,-4
80029794:	e3 cd 80 80 	ldm	sp++,r7,pc

80029798 <scif_bod18_enable_irq>:

void scif_bod18_enable_irq(void)
{
80029798:	eb cd 40 80 	pushm	r7,lr
8002979c:	1a 97       	mov	r7,sp
  AVR32_SCIF.ier = AVR32_SCIF_IER_BODDET_MASK ;
8002979e:	fe 78 08 00 	mov	r8,-63488
800297a2:	34 09       	mov	r9,64
800297a4:	91 09       	st.w	r8[0x0],r9
}
800297a6:	e3 cd 80 80 	ldm	sp++,r7,pc

800297aa <scif_bod18_disable_irq>:

void scif_bod18_disable_irq(void)
{
800297aa:	eb cd 40 c0 	pushm	r6-r7,lr
800297ae:	1a 97       	mov	r7,sp
800297b0:	20 1d       	sub	sp,4
800297b2:	49 26       	lddpc	r6,800297f8 <scif_bod18_disable_irq+0x4e>
800297b4:	1e 26       	rsub	r6,pc
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
800297b6:	e1 b8 00 00 	mfsr	r8,0x0
800297ba:	10 9c       	mov	r12,r8
800297bc:	fe b0 f9 1e 	rcall	800289f8 <cpu_irq_is_enabled_flags>
800297c0:	18 98       	mov	r8,r12
800297c2:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) Disable_global_interrupt();
800297c6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800297ca:	30 08       	mov	r8,0
800297cc:	f0 09 18 00 	cp.b	r9,r8
800297d0:	c0 20       	breq	800297d4 <scif_bod18_disable_irq+0x2a>
800297d2:	d3 03       	ssrf	0x10
  AVR32_SCIF.idr = AVR32_SCIF_IDR_BODDET_MASK;
800297d4:	fe 78 08 00 	mov	r8,-63488
800297d8:	34 09       	mov	r9,64
800297da:	91 19       	st.w	r8[0x4],r9
  AVR32_SCIF.isr;
800297dc:	fe 78 08 00 	mov	r8,-63488
800297e0:	70 38       	ld.w	r8,r8[0xc]
  if (global_interrupt_enabled) Enable_global_interrupt();
800297e2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800297e6:	30 08       	mov	r8,0
800297e8:	f0 09 18 00 	cp.b	r9,r8
800297ec:	c0 20       	breq	800297f0 <scif_bod18_disable_irq+0x46>
800297ee:	d5 03       	csrf	0x10
}
800297f0:	2f fd       	sub	sp,-4
800297f2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800297f6:	00 00       	add	r0,r0
800297f8:	80 02       	ld.sh	r2,r0[0x0]
800297fa:	96 38       	ld.sh	r8,r11[0x6]

800297fc <scif_bod18_clear_irq>:

void scif_bod18_clear_irq(void)
{
800297fc:	eb cd 40 80 	pushm	r7,lr
80029800:	1a 97       	mov	r7,sp
  AVR32_SCIF.icr = AVR32_SCIF_ICR_BODDET_MASK;
80029802:	fe 78 08 00 	mov	r8,-63488
80029806:	34 09       	mov	r9,64
80029808:	91 49       	st.w	r8[0x10],r9
}
8002980a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002980e <scif_bod18_get_irq_status>:

unsigned long scif_bod18_get_irq_status(void)
{
8002980e:	eb cd 40 80 	pushm	r7,lr
80029812:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.isr & AVR32_SCIF_ISR_BODDET_MASK) != 0);
80029814:	fe 78 08 00 	mov	r8,-63488
80029818:	70 38       	ld.w	r8,r8[0xc]
8002981a:	e2 18 00 40 	andl	r8,0x40,COH
8002981e:	5f 18       	srne	r8
}
80029820:	10 9c       	mov	r12,r8
80029822:	e3 cd 80 80 	ldm	sp++,r7,pc

80029826 <scif_bod18_get_irq_enable_bit>:

unsigned long scif_bod18_get_irq_enable_bit(void)
{
80029826:	eb cd 40 80 	pushm	r7,lr
8002982a:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.imr & AVR32_SCIF_IMR_BODDET_MASK) != 0);
8002982c:	fe 78 08 00 	mov	r8,-63488
80029830:	70 28       	ld.w	r8,r8[0x8]
80029832:	e2 18 00 40 	andl	r8,0x40,COH
80029836:	5f 18       	srne	r8
}
80029838:	10 9c       	mov	r12,r8
8002983a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002983e <scif_bod18_get_level>:

unsigned long scif_bod18_get_level(void)
{
8002983e:	eb cd 40 80 	pushm	r7,lr
80029842:	1a 97       	mov	r7,sp
  return (AVR32_SCIF.bod & AVR32_SCIF_BOD_LEVEL_MASK) >> AVR32_SCIF_BOD_LEVEL_OFFSET;
80029844:	fe 78 08 00 	mov	r8,-63488
80029848:	70 b8       	ld.w	r8,r8[0x2c]
8002984a:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
}
8002984e:	10 9c       	mov	r12,r8
80029850:	e3 cd 80 80 	ldm	sp++,r7,pc

80029854 <scif_bod33_enable_irq>:

void scif_bod33_enable_irq(void)
{
80029854:	eb cd 40 80 	pushm	r7,lr
80029858:	1a 97       	mov	r7,sp
  AVR32_SCIF.ier = AVR32_SCIF_IER_BOD33DET_MASK ;
8002985a:	fe 78 08 00 	mov	r8,-63488
8002985e:	e0 69 00 80 	mov	r9,128
80029862:	91 09       	st.w	r8[0x0],r9
}
80029864:	e3 cd 80 80 	ldm	sp++,r7,pc

80029868 <scif_bod33_disable_irq>:

void scif_bod33_disable_irq(void)
{
80029868:	eb cd 40 c0 	pushm	r6-r7,lr
8002986c:	1a 97       	mov	r7,sp
8002986e:	20 1d       	sub	sp,4
80029870:	49 26       	lddpc	r6,800298b8 <scif_bod33_disable_irq+0x50>
80029872:	1e 26       	rsub	r6,pc
   bool global_interrupt_enabled = Is_global_interrupt_enabled();
80029874:	e1 b8 00 00 	mfsr	r8,0x0
80029878:	10 9c       	mov	r12,r8
8002987a:	fe b0 f8 bf 	rcall	800289f8 <cpu_irq_is_enabled_flags>
8002987e:	18 98       	mov	r8,r12
80029880:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) Disable_global_interrupt();
80029884:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029888:	30 08       	mov	r8,0
8002988a:	f0 09 18 00 	cp.b	r9,r8
8002988e:	c0 20       	breq	80029892 <scif_bod33_disable_irq+0x2a>
80029890:	d3 03       	ssrf	0x10
  AVR32_SCIF.idr = AVR32_SCIF_IDR_BOD33DET_MASK;
80029892:	fe 78 08 00 	mov	r8,-63488
80029896:	e0 69 00 80 	mov	r9,128
8002989a:	91 19       	st.w	r8[0x4],r9
  AVR32_SCIF.isr;
8002989c:	fe 78 08 00 	mov	r8,-63488
800298a0:	70 38       	ld.w	r8,r8[0xc]
  if (global_interrupt_enabled) Enable_global_interrupt();
800298a2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800298a6:	30 08       	mov	r8,0
800298a8:	f0 09 18 00 	cp.b	r9,r8
800298ac:	c0 20       	breq	800298b0 <scif_bod33_disable_irq+0x48>
800298ae:	d5 03       	csrf	0x10
}
800298b0:	2f fd       	sub	sp,-4
800298b2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800298b6:	00 00       	add	r0,r0
800298b8:	80 02       	ld.sh	r2,r0[0x0]
800298ba:	96 f6       	ld.uh	r6,r11[0xe]

800298bc <scif_bod33_clear_irq>:
 
void scif_bod33_clear_irq(void)
{
800298bc:	eb cd 40 80 	pushm	r7,lr
800298c0:	1a 97       	mov	r7,sp
  AVR32_SCIF.icr = AVR32_SCIF_ICR_BOD33DET_MASK;
800298c2:	fe 78 08 00 	mov	r8,-63488
800298c6:	e0 69 00 80 	mov	r9,128
800298ca:	91 49       	st.w	r8[0x10],r9
}
800298cc:	e3 cd 80 80 	ldm	sp++,r7,pc

800298d0 <scif_bod33_get_irq_status>:
 
unsigned long scif_bod33_get_irq_status(void)
{
800298d0:	eb cd 40 80 	pushm	r7,lr
800298d4:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.isr & AVR32_SCIF_ISR_BOD33DET_MASK) != 0);
800298d6:	fe 78 08 00 	mov	r8,-63488
800298da:	70 38       	ld.w	r8,r8[0xc]
800298dc:	e2 18 00 80 	andl	r8,0x80,COH
800298e0:	5f 18       	srne	r8
}
800298e2:	10 9c       	mov	r12,r8
800298e4:	e3 cd 80 80 	ldm	sp++,r7,pc

800298e8 <scif_bod33_get_irq_enable_bit>:
 
unsigned long scif_bod33_get_irq_enable_bit(void)
{
800298e8:	eb cd 40 80 	pushm	r7,lr
800298ec:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.imr & AVR32_SCIF_IMR_BOD33DET_MASK) != 0);
800298ee:	fe 78 08 00 	mov	r8,-63488
800298f2:	70 28       	ld.w	r8,r8[0x8]
800298f4:	e2 18 00 80 	andl	r8,0x80,COH
800298f8:	5f 18       	srne	r8
}
800298fa:	10 9c       	mov	r12,r8
800298fc:	e3 cd 80 80 	ldm	sp++,r7,pc

80029900 <scif_bod33_get_level>:
 
unsigned long scif_bod33_get_level(void)
{
80029900:	eb cd 40 80 	pushm	r7,lr
80029904:	1a 97       	mov	r7,sp
  return (AVR32_SCIF.bod33 & AVR32_SCIF_BOD33_LEVEL_MASK) >> AVR32_SCIF_BOD33_LEVEL_OFFSET;
80029906:	fe 78 08 00 	mov	r8,-63488
8002990a:	70 d8       	ld.w	r8,r8[0x34]
8002990c:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
}
80029910:	10 9c       	mov	r12,r8
80029912:	e3 cd 80 80 	ldm	sp++,r7,pc

80029916 <scif_bod50_enable_irq>:

void scif_bod50_enable_irq(void)
{
80029916:	eb cd 40 80 	pushm	r7,lr
8002991a:	1a 97       	mov	r7,sp
  AVR32_SCIF.ier = AVR32_SCIF_IER_BOD50DET_MASK ;
8002991c:	fe 78 08 00 	mov	r8,-63488
80029920:	e0 69 01 00 	mov	r9,256
80029924:	91 09       	st.w	r8[0x0],r9
}
80029926:	e3 cd 80 80 	ldm	sp++,r7,pc

8002992a <scif_bod50_disable_irq>:

void scif_bod50_disable_irq(void)
{
8002992a:	eb cd 40 c0 	pushm	r6-r7,lr
8002992e:	1a 97       	mov	r7,sp
80029930:	20 1d       	sub	sp,4
80029932:	49 26       	lddpc	r6,80029978 <scif_bod50_disable_irq+0x4e>
80029934:	1e 26       	rsub	r6,pc
   bool global_interrupt_enabled = Is_global_interrupt_enabled();
80029936:	e1 b8 00 00 	mfsr	r8,0x0
8002993a:	10 9c       	mov	r12,r8
8002993c:	fe b0 f8 5e 	rcall	800289f8 <cpu_irq_is_enabled_flags>
80029940:	18 98       	mov	r8,r12
80029942:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) Disable_global_interrupt();
80029946:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002994a:	30 08       	mov	r8,0
8002994c:	f0 09 18 00 	cp.b	r9,r8
80029950:	c0 20       	breq	80029954 <scif_bod50_disable_irq+0x2a>
80029952:	d3 03       	ssrf	0x10
  AVR32_SCIF.idr = AVR32_SCIF_IDR_BOD50DET_MASK;
80029954:	fe 78 08 00 	mov	r8,-63488
80029958:	e0 69 01 00 	mov	r9,256
8002995c:	91 19       	st.w	r8[0x4],r9
  AVR32_SCIF.isr;
8002995e:	fe 78 08 00 	mov	r8,-63488
80029962:	70 38       	ld.w	r8,r8[0xc]
  if (global_interrupt_enabled) Enable_global_interrupt();
80029964:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029968:	30 08       	mov	r8,0
8002996a:	f0 09 18 00 	cp.b	r9,r8
8002996e:	c0 20       	breq	80029972 <scif_bod50_disable_irq+0x48>
80029970:	d5 03       	csrf	0x10
}
80029972:	2f fd       	sub	sp,-4
80029974:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029978:	80 02       	ld.sh	r2,r0[0x0]
8002997a:	97 b8       	st.w	r11[0x2c],r8

8002997c <scif_bod50_clear_irq>:
 
void scif_bod50_clear_irq(void)
{
8002997c:	eb cd 40 80 	pushm	r7,lr
80029980:	1a 97       	mov	r7,sp
  AVR32_SCIF.icr = AVR32_SCIF_ICR_BOD50DET_MASK;
80029982:	fe 78 08 00 	mov	r8,-63488
80029986:	e0 69 01 00 	mov	r9,256
8002998a:	91 49       	st.w	r8[0x10],r9
}
8002998c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029990 <scif_bod50_get_irq_status>:
 
unsigned long scif_bod50_get_irq_status(void)
{
80029990:	eb cd 40 80 	pushm	r7,lr
80029994:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.isr & AVR32_SCIF_ISR_BOD50DET_MASK) != 0);
80029996:	fe 78 08 00 	mov	r8,-63488
8002999a:	70 38       	ld.w	r8,r8[0xc]
8002999c:	e2 18 01 00 	andl	r8,0x100,COH
800299a0:	5f 18       	srne	r8
}
800299a2:	10 9c       	mov	r12,r8
800299a4:	e3 cd 80 80 	ldm	sp++,r7,pc

800299a8 <scif_bod50_get_irq_enable_bit>:
 
unsigned long scif_bod50_get_irq_enable_bit(void)
{
800299a8:	eb cd 40 80 	pushm	r7,lr
800299ac:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.imr & AVR32_SCIF_IMR_BOD50DET_MASK) != 0);
800299ae:	fe 78 08 00 	mov	r8,-63488
800299b2:	70 28       	ld.w	r8,r8[0x8]
800299b4:	e2 18 01 00 	andl	r8,0x100,COH
800299b8:	5f 18       	srne	r8
}
800299ba:	10 9c       	mov	r12,r8
800299bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800299c0 <scif_bod50_get_level>:
 
unsigned long scif_bod50_get_level(void)
{
800299c0:	eb cd 40 80 	pushm	r7,lr
800299c4:	1a 97       	mov	r7,sp
  return (AVR32_SCIF.bod50 & AVR32_SCIF_BOD50_LEVEL_MASK) >> AVR32_SCIF_BOD50_LEVEL_OFFSET;
800299c6:	fe 78 08 00 	mov	r8,-63488
800299ca:	70 e8       	ld.w	r8,r8[0x38]
800299cc:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
}
800299d0:	10 9c       	mov	r12,r8
800299d2:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

800299d8 <getBaudDiv>:

#endif


int16_t getBaudDiv(const unsigned int baudrate, uint32_t pba_hz)
{
800299d8:	eb cd 40 80 	pushm	r7,lr
800299dc:	1a 97       	mov	r7,sp
800299de:	20 3d       	sub	sp,12
800299e0:	ef 4c ff f8 	st.w	r7[-8],r12
800299e4:	ef 4b ff f4 	st.w	r7[-12],r11
  int baudDiv = (pba_hz + baudrate / 2) / baudrate;
800299e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800299ec:	f0 09 16 01 	lsr	r9,r8,0x1
800299f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800299f4:	f2 08 00 08 	add	r8,r9,r8
800299f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800299fc:	f0 09 0d 08 	divu	r8,r8,r9
80029a00:	ef 48 ff fc 	st.w	r7[-4],r8

  if (baudDiv <= 0 || baudDiv > 255) {
80029a04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029a08:	58 08       	cp.w	r8,0
80029a0a:	e0 8a 00 08 	brle	80029a1a <getBaudDiv+0x42>
80029a0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029a12:	e0 48 00 ff 	cp.w	r8,255
80029a16:	e0 8a 00 04 	brle	80029a1e <getBaudDiv+0x46>
    return -1;
80029a1a:	3f f8       	mov	r8,-1
80029a1c:	c0 48       	rjmp	80029a24 <getBaudDiv+0x4c>
  }

  return baudDiv;
80029a1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029a22:	5c 88       	casts.h	r8
}
80029a24:	10 9c       	mov	r12,r8
80029a26:	2f dd       	sub	sp,-12
80029a28:	e3 cd 80 80 	ldm	sp++,r7,pc

80029a2c <spi_initSlave>:

spi_status_t spi_initSlave(volatile avr32_spi_t *spi,
                           unsigned char bits,
                           unsigned char spi_mode)
{
80029a2c:	eb cd 40 80 	pushm	r7,lr
80029a30:	1a 97       	mov	r7,sp
80029a32:	20 3d       	sub	sp,12
80029a34:	ef 4c ff fc 	st.w	r7[-4],r12
80029a38:	16 99       	mov	r9,r11
80029a3a:	14 98       	mov	r8,r10
80029a3c:	ef 69 ff f8 	st.b	r7[-8],r9
80029a40:	ef 68 ff f4 	st.b	r7[-12],r8
  if (spi_mode > 3 ||
80029a44:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80029a48:	30 38       	mov	r8,3
80029a4a:	f0 09 18 00 	cp.b	r9,r8
80029a4e:	e0 8b 00 10 	brhi	80029a6e <spi_initSlave+0x42>
80029a52:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80029a56:	30 78       	mov	r8,7
80029a58:	f0 09 18 00 	cp.b	r9,r8
80029a5c:	e0 88 00 09 	brls	80029a6e <spi_initSlave+0x42>
80029a60:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80029a64:	31 08       	mov	r8,16
80029a66:	f0 09 18 00 	cp.b	r9,r8
80029a6a:	e0 88 00 04 	brls	80029a72 <spi_initSlave+0x46>
      bits < 8 || bits > 16) {
    return SPI_ERROR_ARGUMENT;
80029a6e:	30 28       	mov	r8,2
80029a70:	c1 f8       	rjmp	80029aae <spi_initSlave+0x82>
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
80029a72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029a76:	e0 69 00 80 	mov	r9,128
80029a7a:	91 09       	st.w	r8[0x0],r9

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  spi->csr0 = ((spi_mode >> 1) << AVR32_SPI_CSR0_CPOL_OFFSET) |
80029a7c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80029a80:	a1 98       	lsr	r8,0x1
80029a82:	5c 58       	castu.b	r8
80029a84:	10 99       	mov	r9,r8
              (((spi_mode & 0x1) ^ 0x1) << AVR32_SPI_CSR0_NCPHA_OFFSET) |
80029a86:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80029a8a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029a8e:	c0 31       	brne	80029a94 <spi_initSlave+0x68>
80029a90:	30 28       	mov	r8,2
80029a92:	c0 28       	rjmp	80029a96 <spi_initSlave+0x6a>
80029a94:	30 08       	mov	r8,0
80029a96:	10 49       	or	r9,r8
              ((bits - 8) << AVR32_SPI_CSR0_BITS_OFFSET);
80029a98:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80029a9c:	20 88       	sub	r8,8
80029a9e:	a5 68       	lsl	r8,0x4

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  spi->csr0 = ((spi_mode >> 1) << AVR32_SPI_CSR0_CPOL_OFFSET) |
80029aa0:	f3 e8 10 08 	or	r8,r9,r8
80029aa4:	10 99       	mov	r9,r8
80029aa6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029aaa:	91 c9       	st.w	r8[0x30],r9
              (((spi_mode & 0x1) ^ 0x1) << AVR32_SPI_CSR0_NCPHA_OFFSET) |
              ((bits - 8) << AVR32_SPI_CSR0_BITS_OFFSET);

  return SPI_OK;
80029aac:	30 08       	mov	r8,0
}
80029aae:	10 9c       	mov	r12,r8
80029ab0:	2f dd       	sub	sp,-12
80029ab2:	e3 cd 80 80 	ldm	sp++,r7,pc

80029ab6 <spi_initTest>:


spi_status_t spi_initTest(volatile avr32_spi_t *spi)
{
80029ab6:	eb cd 40 80 	pushm	r7,lr
80029aba:	1a 97       	mov	r7,sp
80029abc:	20 1d       	sub	sp,4
80029abe:	ef 4c ff fc 	st.w	r7[-4],r12
  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
80029ac2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029ac6:	e0 69 00 80 	mov	r9,128
80029aca:	91 09       	st.w	r8[0x0],r9
  spi->mr |= AVR32_SPI_MR_MSTR_MASK | // Master Mode.
80029acc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029ad0:	70 18       	ld.w	r8,r8[0x4]
80029ad2:	10 99       	mov	r9,r8
80029ad4:	e8 19 00 81 	orl	r9,0x81
80029ad8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029adc:	91 19       	st.w	r8[0x4],r9
             AVR32_SPI_MR_LLB_MASK;   // Local Loopback.

  return SPI_OK;
80029ade:	30 08       	mov	r8,0
}
80029ae0:	10 9c       	mov	r12,r8
80029ae2:	2f fd       	sub	sp,-4
80029ae4:	e3 cd 80 80 	ldm	sp++,r7,pc

80029ae8 <spi_initMaster>:


spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
80029ae8:	eb cd 40 80 	pushm	r7,lr
80029aec:	1a 97       	mov	r7,sp
80029aee:	20 3d       	sub	sp,12
80029af0:	ef 4c ff f8 	st.w	r7[-8],r12
80029af4:	ef 4b ff f4 	st.w	r7[-12],r11
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
80029af8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029afc:	f1 39 00 0d 	ld.ub	r9,r8[13]
80029b00:	30 18       	mov	r8,1
80029b02:	f0 09 18 00 	cp.b	r9,r8
80029b06:	e0 88 00 04 	brls	80029b0e <spi_initMaster+0x26>
    return SPI_ERROR_ARGUMENT;
80029b0a:	30 28       	mov	r8,2
80029b0c:	c3 48       	rjmp	80029b74 <spi_initMaster+0x8c>
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
80029b0e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029b12:	e0 69 00 80 	mov	r9,128
80029b16:	91 09       	st.w	r8[0x0],r9

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
80029b18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029b1c:	70 18       	ld.w	r8,r8[0x4]
80029b1e:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.mstr = 1;
80029b22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029b26:	30 19       	mov	r9,1
80029b28:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80029b2c:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
80029b30:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029b34:	f1 38 00 0d 	ld.ub	r8,r8[13]
80029b38:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029b3c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029b40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029b44:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
80029b48:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.llb = 0;
80029b4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029b50:	30 09       	mov	r9,0
80029b52:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80029b56:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80029b5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029b5e:	30 f9       	mov	r9,15
80029b60:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
80029b64:	ef 48 ff fc 	st.w	r7[-4],r8
  spi->mr = u_avr32_spi_mr.mr;
80029b68:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029b6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029b70:	91 19       	st.w	r8[0x4],r9

  return SPI_OK;
80029b72:	30 08       	mov	r8,0
}
80029b74:	10 9c       	mov	r12,r8
80029b76:	2f dd       	sub	sp,-12
80029b78:	e3 cd 80 80 	ldm	sp++,r7,pc

80029b7c <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
                               unsigned char variable_ps,
                               unsigned char pcs_decode,
                               unsigned char delay)
{
80029b7c:	eb cd 40 80 	pushm	r7,lr
80029b80:	1a 97       	mov	r7,sp
80029b82:	20 5d       	sub	sp,20
80029b84:	ef 4c ff f8 	st.w	r7[-8],r12
80029b88:	12 98       	mov	r8,r9
80029b8a:	16 99       	mov	r9,r11
80029b8c:	ef 69 ff f4 	st.b	r7[-12],r9
80029b90:	14 99       	mov	r9,r10
80029b92:	ef 69 ff f0 	st.b	r7[-16],r9
80029b96:	ef 68 ff ec 	st.b	r7[-20],r8
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
80029b9a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80029b9e:	30 18       	mov	r8,1
80029ba0:	f0 09 18 00 	cp.b	r9,r8
80029ba4:	e0 8b 00 09 	brhi	80029bb6 <spi_selectionMode+0x3a>
80029ba8:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80029bac:	30 18       	mov	r8,1
80029bae:	f0 09 18 00 	cp.b	r9,r8
80029bb2:	e0 88 00 04 	brls	80029bba <spi_selectionMode+0x3e>
      pcs_decode > 1) {
    return SPI_ERROR_ARGUMENT;
80029bb6:	30 28       	mov	r8,2
80029bb8:	c2 88       	rjmp	80029c08 <spi_selectionMode+0x8c>
  }

  u_avr32_spi_mr.mr = spi->mr;
80029bba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029bbe:	70 18       	ld.w	r8,r8[0x4]
80029bc0:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.ps = variable_ps;
80029bc4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80029bc8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029bcc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029bd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029bd4:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80029bd8:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80029bdc:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80029be0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029be4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029be8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029bec:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
80029bf0:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.dlybcs = delay;
80029bf4:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80029bf8:	ef 68 ff fc 	st.b	r7[-4],r8
  spi->mr = u_avr32_spi_mr.mr;
80029bfc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029c00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029c04:	91 19       	st.w	r8[0x4],r9

  return SPI_OK;
80029c06:	30 08       	mov	r8,0
}
80029c08:	10 9c       	mov	r12,r8
80029c0a:	2f bd       	sub	sp,-20
80029c0c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029c10 <spi_selectChip>:


spi_status_t spi_selectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
80029c10:	eb cd 40 80 	pushm	r7,lr
80029c14:	1a 97       	mov	r7,sp
80029c16:	20 2d       	sub	sp,8
80029c18:	ef 4c ff fc 	st.w	r7[-4],r12
80029c1c:	16 98       	mov	r8,r11
80029c1e:	ef 68 ff f8 	st.b	r7[-8],r8
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
80029c22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029c26:	70 18       	ld.w	r8,r8[0x4]
80029c28:	10 99       	mov	r9,r8
80029c2a:	ea 19 00 0f 	orh	r9,0xf
80029c2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029c32:	91 19       	st.w	r8[0x4],r9

  if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80029c34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029c38:	70 18       	ld.w	r8,r8[0x4]
80029c3a:	e2 18 00 04 	andl	r8,0x4,COH
80029c3e:	c1 90       	breq	80029c70 <spi_selectChip+0x60>
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
80029c40:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80029c44:	30 e8       	mov	r8,14
80029c46:	f0 09 18 00 	cp.b	r9,r8
80029c4a:	e0 88 00 04 	brls	80029c52 <spi_selectChip+0x42>
      return SPI_ERROR_ARGUMENT;
80029c4e:	30 28       	mov	r8,2
80029c50:	c2 88       	rjmp	80029ca0 <spi_selectChip+0x90>
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
80029c52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029c56:	70 19       	ld.w	r9,r8[0x4]
80029c58:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80029c5c:	b1 68       	lsl	r8,0x10
80029c5e:	ea 18 ff f0 	orh	r8,0xfff0
80029c62:	e8 18 ff ff 	orl	r8,0xffff
80029c66:	10 69       	and	r9,r8
80029c68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029c6c:	91 19       	st.w	r8[0x4],r9
80029c6e:	c1 88       	rjmp	80029c9e <spi_selectChip+0x8e>
  } else {
    if (chip > 3) {
80029c70:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80029c74:	30 38       	mov	r8,3
80029c76:	f0 09 18 00 	cp.b	r9,r8
80029c7a:	e0 88 00 04 	brls	80029c82 <spi_selectChip+0x72>
      return SPI_ERROR_ARGUMENT;
80029c7e:	30 28       	mov	r8,2
80029c80:	c1 08       	rjmp	80029ca0 <spi_selectChip+0x90>
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80029c82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029c86:	70 19       	ld.w	r9,r8[0x4]
80029c88:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80029c8c:	2f 08       	sub	r8,-16
80029c8e:	30 1a       	mov	r10,1
80029c90:	f4 08 09 48 	lsl	r8,r10,r8
80029c94:	5c d8       	com	r8
80029c96:	10 69       	and	r9,r8
80029c98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029c9c:	91 19       	st.w	r8[0x4],r9
  }

  return SPI_OK;
80029c9e:	30 08       	mov	r8,0
}
80029ca0:	10 9c       	mov	r12,r8
80029ca2:	2f ed       	sub	sp,-8
80029ca4:	e3 cd 80 80 	ldm	sp++,r7,pc

80029ca8 <spi_unselectChip>:


spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
80029ca8:	eb cd 40 80 	pushm	r7,lr
80029cac:	1a 97       	mov	r7,sp
80029cae:	20 3d       	sub	sp,12
80029cb0:	ef 4c ff f8 	st.w	r7[-8],r12
80029cb4:	16 98       	mov	r8,r11
80029cb6:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned int timeout = SPI_TIMEOUT;
80029cba:	e0 68 3a 98 	mov	r8,15000
80029cbe:	ef 48 ff fc 	st.w	r7[-4],r8

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80029cc2:	c0 f8       	rjmp	80029ce0 <spi_unselectChip+0x38>
    if (!timeout--) {
80029cc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029cc8:	58 08       	cp.w	r8,0
80029cca:	5f 08       	sreq	r8
80029ccc:	5c 58       	castu.b	r8
80029cce:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029cd2:	20 19       	sub	r9,1
80029cd4:	ef 49 ff fc 	st.w	r7[-4],r9
80029cd8:	58 08       	cp.w	r8,0
80029cda:	c0 30       	breq	80029ce0 <spi_unselectChip+0x38>
      return SPI_ERROR_TIMEOUT;
80029cdc:	30 18       	mov	r8,1
80029cde:	c1 68       	rjmp	80029d0a <spi_unselectChip+0x62>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80029ce0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029ce4:	70 48       	ld.w	r8,r8[0x10]
80029ce6:	e2 18 02 00 	andl	r8,0x200,COH
80029cea:	ce d0       	breq	80029cc4 <spi_unselectChip+0x1c>
      return SPI_ERROR_TIMEOUT;
    }
  }

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
80029cec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029cf0:	70 18       	ld.w	r8,r8[0x4]
80029cf2:	10 99       	mov	r9,r8
80029cf4:	ea 19 00 0f 	orh	r9,0xf
80029cf8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029cfc:	91 19       	st.w	r8[0x4],r9

  // Last transfer, so deassert the current NPCS if CSAAT is set.
  spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80029cfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029d02:	fc 19 01 00 	movh	r9,0x100
80029d06:	91 09       	st.w	r8[0x0],r9

#ifdef FREERTOS_USED
  xSemaphoreGive(xSPIMutex);
#endif

  return SPI_OK;
80029d08:	30 08       	mov	r8,0
}
80029d0a:	10 9c       	mov	r12,r8
80029d0c:	2f dd       	sub	sp,-12
80029d0e:	e3 cd 80 80 	ldm	sp++,r7,pc

80029d12 <spi_setupChipReg>:


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
80029d12:	eb cd 40 c0 	pushm	r6-r7,lr
80029d16:	1a 97       	mov	r7,sp
80029d18:	20 5d       	sub	sp,20
80029d1a:	4e 06       	lddpc	r6,80029e98 <spi_setupChipReg+0x186>
80029d1c:	1e 26       	rsub	r6,pc
80029d1e:	ef 4c ff f4 	st.w	r7[-12],r12
80029d22:	ef 4b ff f0 	st.w	r7[-16],r11
80029d26:	ef 4a ff ec 	st.w	r7[-20],r10
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80029d2a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029d2e:	f1 39 00 0c 	ld.ub	r9,r8[12]
80029d32:	30 38       	mov	r8,3
80029d34:	f0 09 18 00 	cp.b	r9,r8
80029d38:	e0 8b 00 1d 	brhi	80029d72 <spi_setupChipReg+0x60>
      options->stay_act > 1 ||
80029d3c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029d40:	f1 39 00 0b 	ld.ub	r9,r8[11]
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80029d44:	30 18       	mov	r8,1
80029d46:	f0 09 18 00 	cp.b	r9,r8
80029d4a:	e0 8b 00 14 	brhi	80029d72 <spi_setupChipReg+0x60>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
80029d4e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029d52:	f1 39 00 08 	ld.ub	r9,r8[8]
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80029d56:	30 78       	mov	r8,7
80029d58:	f0 09 18 00 	cp.b	r9,r8
80029d5c:	e0 88 00 0b 	brls	80029d72 <spi_setupChipReg+0x60>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
80029d60:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029d64:	f1 39 00 08 	ld.ub	r9,r8[8]
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80029d68:	31 08       	mov	r8,16
80029d6a:	f0 09 18 00 	cp.b	r9,r8
80029d6e:	e0 88 00 04 	brls	80029d76 <spi_setupChipReg+0x64>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
    return SPI_ERROR_ARGUMENT;
80029d72:	30 28       	mov	r8,2
80029d74:	c8 d8       	rjmp	80029e8e <spi_setupChipReg+0x17c>
  }

  int baudDiv = getBaudDiv(options->baudrate, pba_hz);
80029d76:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029d7a:	70 18       	ld.w	r8,r8[0x4]
80029d7c:	ee fb ff ec 	ld.w	r11,r7[-20]
80029d80:	10 9c       	mov	r12,r8
80029d82:	f0 16 01 21 	mcall	r6[1156]
80029d86:	18 98       	mov	r8,r12
80029d88:	ef 48 ff fc 	st.w	r7[-4],r8

  if (baudDiv < 0) {
80029d8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029d90:	58 08       	cp.w	r8,0
80029d92:	c0 34       	brge	80029d98 <spi_setupChipReg+0x86>
    return SPI_ERROR_ARGUMENT;
80029d94:	30 28       	mov	r8,2
80029d96:	c7 c8       	rjmp	80029e8e <spi_setupChipReg+0x17c>
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
80029d98:	30 08       	mov	r8,0
80029d9a:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80029d9e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029da2:	f1 38 00 0c 	ld.ub	r8,r8[12]
80029da6:	a1 98       	lsr	r8,0x1
80029da8:	5c 58       	castu.b	r8
80029daa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029dae:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029db2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029db6:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80029dba:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80029dbe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029dc2:	f1 38 00 0c 	ld.ub	r8,r8[12]
80029dc6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029dca:	5f 08       	sreq	r8
80029dcc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029dd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029dd4:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80029dd8:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80029ddc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029de0:	f1 38 00 0b 	ld.ub	r8,r8[11]
80029de4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029de8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029dec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029df0:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
80029df4:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80029df8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029dfc:	f1 38 00 08 	ld.ub	r8,r8[8]
80029e00:	20 88       	sub	r8,8
80029e02:	5c 58       	castu.b	r8
80029e04:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80029e08:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029e0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029e10:	f1 d9 d0 84 	bfins	r8,r9,0x4,0x4
80029e14:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
80029e18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029e1c:	5c 58       	castu.b	r8
80029e1e:	ef 68 ff fa 	st.b	r7[-6],r8
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80029e22:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029e26:	f1 38 00 09 	ld.ub	r8,r8[9]
80029e2a:	ef 68 ff f9 	st.b	r7[-7],r8
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80029e2e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029e32:	f1 38 00 0a 	ld.ub	r8,r8[10]
80029e36:	ef 68 ff f8 	st.b	r7[-8],r8

  switch(options->reg) {
80029e3a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029e3e:	11 88       	ld.ub	r8,r8[0x0]
80029e40:	58 18       	cp.w	r8,1
80029e42:	c1 10       	breq	80029e64 <spi_setupChipReg+0x152>
80029e44:	e0 89 00 05 	brgt	80029e4e <spi_setupChipReg+0x13c>
80029e48:	58 08       	cp.w	r8,0
80029e4a:	c0 70       	breq	80029e58 <spi_setupChipReg+0x146>
80029e4c:	c1 e8       	rjmp	80029e88 <spi_setupChipReg+0x176>
80029e4e:	58 28       	cp.w	r8,2
80029e50:	c1 00       	breq	80029e70 <spi_setupChipReg+0x15e>
80029e52:	58 38       	cp.w	r8,3
80029e54:	c1 40       	breq	80029e7c <spi_setupChipReg+0x16a>
80029e56:	c1 98       	rjmp	80029e88 <spi_setupChipReg+0x176>
    case 0:
      spi->csr0 = u_avr32_spi_csr.csr;
80029e58:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029e5c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029e60:	91 c9       	st.w	r8[0x30],r9
      break;
80029e62:	c1 58       	rjmp	80029e8c <spi_setupChipReg+0x17a>
    case 1:
      spi->csr1 = u_avr32_spi_csr.csr;
80029e64:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029e68:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029e6c:	91 d9       	st.w	r8[0x34],r9
      break;
80029e6e:	c0 f8       	rjmp	80029e8c <spi_setupChipReg+0x17a>
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
80029e70:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029e74:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029e78:	91 e9       	st.w	r8[0x38],r9
      break;
80029e7a:	c0 98       	rjmp	80029e8c <spi_setupChipReg+0x17a>
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
80029e7c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029e80:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029e84:	91 f9       	st.w	r8[0x3c],r9
      break;
80029e86:	c0 38       	rjmp	80029e8c <spi_setupChipReg+0x17a>
    default:
      return SPI_ERROR_ARGUMENT;
80029e88:	30 28       	mov	r8,2
80029e8a:	c0 28       	rjmp	80029e8e <spi_setupChipReg+0x17c>
      while(1);
    }
  }
#endif

  return SPI_OK;
80029e8c:	30 08       	mov	r8,0
}
80029e8e:	10 9c       	mov	r12,r8
80029e90:	2f bd       	sub	sp,-20
80029e92:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029e96:	00 00       	add	r0,r0
80029e98:	80 02       	ld.sh	r2,r0[0x0]
80029e9a:	9b a0       	st.w	sp[0x28],r0

80029e9c <spi_enable>:


void spi_enable(volatile avr32_spi_t *spi)
{
80029e9c:	eb cd 40 80 	pushm	r7,lr
80029ea0:	1a 97       	mov	r7,sp
80029ea2:	20 1d       	sub	sp,4
80029ea4:	ef 4c ff fc 	st.w	r7[-4],r12
  spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80029ea8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029eac:	30 19       	mov	r9,1
80029eae:	91 09       	st.w	r8[0x0],r9
}
80029eb0:	2f fd       	sub	sp,-4
80029eb2:	e3 cd 80 80 	ldm	sp++,r7,pc

80029eb6 <spi_disable>:


void spi_disable(volatile avr32_spi_t *spi)
{
80029eb6:	eb cd 40 80 	pushm	r7,lr
80029eba:	1a 97       	mov	r7,sp
80029ebc:	20 1d       	sub	sp,4
80029ebe:	ef 4c ff fc 	st.w	r7[-4],r12
  spi->cr = AVR32_SPI_CR_SPIDIS_MASK;
80029ec2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029ec6:	30 29       	mov	r9,2
80029ec8:	91 09       	st.w	r8[0x0],r9
}
80029eca:	2f fd       	sub	sp,-4
80029ecc:	e3 cd 80 80 	ldm	sp++,r7,pc

80029ed0 <spi_is_enabled>:


int spi_is_enabled(volatile avr32_spi_t *spi)
{
80029ed0:	eb cd 40 80 	pushm	r7,lr
80029ed4:	1a 97       	mov	r7,sp
80029ed6:	20 1d       	sub	sp,4
80029ed8:	ef 4c ff fc 	st.w	r7[-4],r12
  return (spi->sr & AVR32_SPI_SR_SPIENS_MASK) != 0;
80029edc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029ee0:	70 48       	ld.w	r8,r8[0x10]
80029ee2:	e6 18 00 01 	andh	r8,0x1,COH
80029ee6:	5f 18       	srne	r8
}
80029ee8:	10 9c       	mov	r12,r8
80029eea:	2f fd       	sub	sp,-4
80029eec:	e3 cd 80 80 	ldm	sp++,r7,pc

80029ef0 <spi_writeRegisterEmptyCheck>:

unsigned char spi_writeRegisterEmptyCheck(volatile avr32_spi_t *spi)
{
80029ef0:	eb cd 40 80 	pushm	r7,lr
80029ef4:	1a 97       	mov	r7,sp
80029ef6:	20 1d       	sub	sp,4
80029ef8:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
80029efc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029f00:	70 48       	ld.w	r8,r8[0x10]
80029f02:	e2 18 00 02 	andl	r8,0x2,COH
80029f06:	5f 18       	srne	r8
}
80029f08:	10 9c       	mov	r12,r8
80029f0a:	2f fd       	sub	sp,-4
80029f0c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029f10 <spi_write>:


spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80029f10:	eb cd 40 80 	pushm	r7,lr
80029f14:	1a 97       	mov	r7,sp
80029f16:	20 3d       	sub	sp,12
80029f18:	ef 4c ff f8 	st.w	r7[-8],r12
80029f1c:	16 98       	mov	r8,r11
80029f1e:	ef 58 ff f4 	st.h	r7[-12],r8
  unsigned int timeout = SPI_TIMEOUT;
80029f22:	e0 68 3a 98 	mov	r8,15000
80029f26:	ef 48 ff fc 	st.w	r7[-4],r8

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80029f2a:	c0 f8       	rjmp	80029f48 <spi_write+0x38>
    if (!timeout--) {
80029f2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029f30:	58 08       	cp.w	r8,0
80029f32:	5f 08       	sreq	r8
80029f34:	5c 58       	castu.b	r8
80029f36:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029f3a:	20 19       	sub	r9,1
80029f3c:	ef 49 ff fc 	st.w	r7[-4],r9
80029f40:	58 08       	cp.w	r8,0
80029f42:	c0 30       	breq	80029f48 <spi_write+0x38>
      return SPI_ERROR_TIMEOUT;
80029f44:	30 18       	mov	r8,1
80029f46:	c0 d8       	rjmp	80029f60 <spi_write+0x50>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80029f48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029f4c:	70 48       	ld.w	r8,r8[0x10]
80029f4e:	e2 18 00 02 	andl	r8,0x2,COH
80029f52:	ce d0       	breq	80029f2c <spi_write+0x1c>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80029f54:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80029f58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029f5c:	91 39       	st.w	r8[0xc],r9

  return SPI_OK;
80029f5e:	30 08       	mov	r8,0
}
80029f60:	10 9c       	mov	r12,r8
80029f62:	2f dd       	sub	sp,-12
80029f64:	e3 cd 80 80 	ldm	sp++,r7,pc

80029f68 <spi_variableSlaveWrite>:


spi_status_t spi_variableSlaveWrite(volatile avr32_spi_t *spi, uint16_t data,
                                    uint8_t pcs, uint8_t lastxfer)
{
80029f68:	eb cd 40 80 	pushm	r7,lr
80029f6c:	1a 97       	mov	r7,sp
80029f6e:	20 5d       	sub	sp,20
80029f70:	ef 4c ff f8 	st.w	r7[-8],r12
80029f74:	12 98       	mov	r8,r9
80029f76:	16 99       	mov	r9,r11
80029f78:	ef 59 ff f4 	st.h	r7[-12],r9
80029f7c:	14 99       	mov	r9,r10
80029f7e:	ef 69 ff f0 	st.b	r7[-16],r9
80029f82:	ef 68 ff ec 	st.b	r7[-20],r8
  unsigned int timeout = SPI_TIMEOUT;
80029f86:	e0 68 3a 98 	mov	r8,15000
80029f8a:	ef 48 ff fc 	st.w	r7[-4],r8

  if (pcs > 14 || lastxfer > 1) {
80029f8e:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80029f92:	30 e8       	mov	r8,14
80029f94:	f0 09 18 00 	cp.b	r9,r8
80029f98:	e0 8b 00 09 	brhi	80029faa <spi_variableSlaveWrite+0x42>
80029f9c:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80029fa0:	30 18       	mov	r8,1
80029fa2:	f0 09 18 00 	cp.b	r9,r8
80029fa6:	e0 88 00 12 	brls	80029fca <spi_variableSlaveWrite+0x62>
    return SPI_ERROR_ARGUMENT;
80029faa:	30 28       	mov	r8,2
80029fac:	c2 68       	rjmp	80029ff8 <spi_variableSlaveWrite+0x90>
  }

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
    if (!timeout--) {
80029fae:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029fb2:	58 08       	cp.w	r8,0
80029fb4:	5f 08       	sreq	r8
80029fb6:	5c 58       	castu.b	r8
80029fb8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029fbc:	20 19       	sub	r9,1
80029fbe:	ef 49 ff fc 	st.w	r7[-4],r9
80029fc2:	58 08       	cp.w	r8,0
80029fc4:	c0 40       	breq	80029fcc <spi_variableSlaveWrite+0x64>
      return SPI_ERROR_TIMEOUT;
80029fc6:	30 18       	mov	r8,1
80029fc8:	c1 88       	rjmp	80029ff8 <spi_variableSlaveWrite+0x90>

  if (pcs > 14 || lastxfer > 1) {
    return SPI_ERROR_ARGUMENT;
  }

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80029fca:	d7 03       	nop
80029fcc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029fd0:	70 48       	ld.w	r8,r8[0x10]
80029fd2:	e2 18 00 02 	andl	r8,0x2,COH
80029fd6:	ce c0       	breq	80029fae <spi_variableSlaveWrite+0x46>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = (data << AVR32_SPI_TDR_TD_OFFSET) |
80029fd8:	ef 19 ff f4 	ld.uh	r9,r7[-12]
             (pcs << AVR32_SPI_TDR_PCS_OFFSET) |
80029fdc:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80029fe0:	b1 68       	lsl	r8,0x10
80029fe2:	10 49       	or	r9,r8
             (lastxfer << AVR32_SPI_TDR_LASTXFER_OFFSET);
80029fe4:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80029fe8:	b9 68       	lsl	r8,0x18
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = (data << AVR32_SPI_TDR_TD_OFFSET) |
80029fea:	f3 e8 10 08 	or	r8,r9,r8
80029fee:	10 99       	mov	r9,r8
80029ff0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029ff4:	91 39       	st.w	r8[0xc],r9
             (pcs << AVR32_SPI_TDR_PCS_OFFSET) |
             (lastxfer << AVR32_SPI_TDR_LASTXFER_OFFSET);

  return SPI_OK;
80029ff6:	30 08       	mov	r8,0
}
80029ff8:	10 9c       	mov	r12,r8
80029ffa:	2f bd       	sub	sp,-20
80029ffc:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a000 <spi_writeEndCheck>:


unsigned char spi_writeEndCheck(volatile avr32_spi_t *spi)
{
8002a000:	eb cd 40 80 	pushm	r7,lr
8002a004:	1a 97       	mov	r7,sp
8002a006:	20 1d       	sub	sp,4
8002a008:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0);
8002a00c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a010:	70 48       	ld.w	r8,r8[0x10]
8002a012:	e2 18 02 00 	andl	r8,0x200,COH
8002a016:	5f 18       	srne	r8
}
8002a018:	10 9c       	mov	r12,r8
8002a01a:	2f fd       	sub	sp,-4
8002a01c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a020 <spi_readRegisterFullCheck>:


unsigned char spi_readRegisterFullCheck(volatile avr32_spi_t *spi)
{
8002a020:	eb cd 40 80 	pushm	r7,lr
8002a024:	1a 97       	mov	r7,sp
8002a026:	20 1d       	sub	sp,4
8002a028:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
8002a02c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a030:	70 48       	ld.w	r8,r8[0x10]
8002a032:	5c 58       	castu.b	r8
8002a034:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
8002a038:	10 9c       	mov	r12,r8
8002a03a:	2f fd       	sub	sp,-4
8002a03c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a040 <spi_read>:


spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
8002a040:	eb cd 40 80 	pushm	r7,lr
8002a044:	1a 97       	mov	r7,sp
8002a046:	20 3d       	sub	sp,12
8002a048:	ef 4c ff f8 	st.w	r7[-8],r12
8002a04c:	ef 4b ff f4 	st.w	r7[-12],r11
  unsigned int timeout = SPI_TIMEOUT;
8002a050:	e0 68 3a 98 	mov	r8,15000
8002a054:	ef 48 ff fc 	st.w	r7[-4],r8

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
8002a058:	c0 f8       	rjmp	8002a076 <spi_read+0x36>
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
8002a05a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a05e:	58 08       	cp.w	r8,0
8002a060:	5f 08       	sreq	r8
8002a062:	5c 58       	castu.b	r8
8002a064:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a068:	20 19       	sub	r9,1
8002a06a:	ef 49 ff fc 	st.w	r7[-4],r9
8002a06e:	58 08       	cp.w	r8,0
8002a070:	c0 30       	breq	8002a076 <spi_read+0x36>
      return SPI_ERROR_TIMEOUT;
8002a072:	30 18       	mov	r8,1
8002a074:	c1 18       	rjmp	8002a096 <spi_read+0x56>

spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
8002a076:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a07a:	70 48       	ld.w	r8,r8[0x10]
8002a07c:	e2 18 02 01 	andl	r8,0x201,COH
8002a080:	e0 48 02 01 	cp.w	r8,513
8002a084:	ce b1       	brne	8002a05a <spi_read+0x1a>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  *data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
8002a086:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a08a:	70 28       	ld.w	r8,r8[0x8]
8002a08c:	5c 88       	casts.h	r8
8002a08e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a092:	b2 08       	st.h	r9[0x0],r8

  return SPI_OK;
8002a094:	30 08       	mov	r8,0
}
8002a096:	10 9c       	mov	r12,r8
8002a098:	2f dd       	sub	sp,-12
8002a09a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a09e <spi_getStatus>:


unsigned char spi_getStatus(volatile avr32_spi_t *spi)
{
8002a09e:	eb cd 40 80 	pushm	r7,lr
8002a0a2:	1a 97       	mov	r7,sp
8002a0a4:	20 3d       	sub	sp,12
8002a0a6:	ef 4c ff f4 	st.w	r7[-12],r12
  spi_status_t ret = SPI_OK;
8002a0aa:	30 08       	mov	r8,0
8002a0ac:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned long sr = spi->sr;
8002a0b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a0b4:	70 48       	ld.w	r8,r8[0x10]
8002a0b6:	ef 48 ff fc 	st.w	r7[-4],r8

  if (sr & AVR32_SPI_SR_OVRES_MASK) {
8002a0ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a0be:	e2 18 00 08 	andl	r8,0x8,COH
8002a0c2:	c0 40       	breq	8002a0ca <spi_getStatus+0x2c>
    ret = SPI_ERROR_OVERRUN;
8002a0c4:	30 38       	mov	r8,3
8002a0c6:	ef 48 ff f8 	st.w	r7[-8],r8
  }

  if (sr & AVR32_SPI_SR_MODF_MASK) {
8002a0ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a0ce:	e2 18 00 04 	andl	r8,0x4,COH
8002a0d2:	c0 60       	breq	8002a0de <spi_getStatus+0x40>
    ret += SPI_ERROR_MODE_FAULT;
8002a0d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a0d8:	2f c8       	sub	r8,-4
8002a0da:	ef 48 ff f8 	st.w	r7[-8],r8
  }

  if (ret == (SPI_ERROR_OVERRUN + SPI_ERROR_MODE_FAULT)) {
8002a0de:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a0e2:	58 78       	cp.w	r8,7
8002a0e4:	c0 31       	brne	8002a0ea <spi_getStatus+0x4c>
    return SPI_ERROR_OVERRUN_AND_MODE_FAULT;
8002a0e6:	30 58       	mov	r8,5
8002a0e8:	c0 b8       	rjmp	8002a0fe <spi_getStatus+0x60>
  }
  else if (ret > 0) {
8002a0ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a0ee:	58 08       	cp.w	r8,0
8002a0f0:	e0 8a 00 06 	brle	8002a0fc <spi_getStatus+0x5e>
    return ret;
8002a0f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a0f8:	5c 58       	castu.b	r8
8002a0fa:	c0 28       	rjmp	8002a0fe <spi_getStatus+0x60>
  } else {
    return SPI_OK;
8002a0fc:	30 08       	mov	r8,0
  }
}
8002a0fe:	10 9c       	mov	r12,r8
8002a100:	2f dd       	sub	sp,-12
8002a102:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

8002a108 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8002a108:	eb cd 40 80 	pushm	r7,lr
8002a10c:	1a 97       	mov	r7,sp
8002a10e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8002a110:	e1 b8 00 00 	mfsr	r8,0x0
8002a114:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8002a118:	d3 03       	ssrf	0x10

	return flags;
8002a11a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002a11e:	10 9c       	mov	r12,r8
8002a120:	2f fd       	sub	sp,-4
8002a122:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a126 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
8002a126:	eb cd 40 80 	pushm	r7,lr
8002a12a:	1a 97       	mov	r7,sp
8002a12c:	20 1d       	sub	sp,4
8002a12e:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8002a132:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a136:	e6 18 00 01 	andh	r8,0x1,COH
8002a13a:	5f 08       	sreq	r8
8002a13c:	5c 58       	castu.b	r8
}
8002a13e:	10 9c       	mov	r12,r8
8002a140:	2f fd       	sub	sp,-4
8002a142:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a146 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
8002a146:	eb cd 40 80 	pushm	r7,lr
8002a14a:	1a 97       	mov	r7,sp
8002a14c:	20 1d       	sub	sp,4
8002a14e:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8002a152:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a156:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8002a15a:	2f fd       	sub	sp,-4
8002a15c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a160 <twim_master_interrupt_handler>:
/** 
 * \internal  
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
8002a160:	eb cd 40 c0 	pushm	r6-r7,lr
8002a164:	1a 97       	mov	r7,sp
8002a166:	20 1d       	sub	sp,4
8002a168:	4d 96       	lddpc	r6,8002a2cc <twim_master_interrupt_handler+0x16c>
8002a16a:	1e 26       	rsub	r6,pc
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
8002a16c:	ec f8 00 40 	ld.w	r8,r6[64]
8002a170:	70 08       	ld.w	r8,r8[0x0]
8002a172:	70 79       	ld.w	r9,r8[0x1c]
8002a174:	ec f8 01 04 	ld.w	r8,r6[260]
8002a178:	70 08       	ld.w	r8,r8[0x0]
8002a17a:	f3 e8 00 08 	and	r8,r9,r8
8002a17e:	ef 48 ff fc 	st.w	r7[-4],r8
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
8002a182:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a186:	e2 18 07 00 	andl	r8,0x700,COH
8002a18a:	c2 30       	breq	8002a1d0 <twim_master_interrupt_handler+0x70>
		//if we get a nak, clear the valid bit in cmdr, 
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ? 
8002a18c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a190:	e2 18 03 00 	andl	r8,0x300,COH
8002a194:	c0 30       	breq	8002a19a <twim_master_interrupt_handler+0x3a>
8002a196:	3f c8       	mov	r8,-4
8002a198:	c0 28       	rjmp	8002a19c <twim_master_interrupt_handler+0x3c>
8002a19a:	3f e8       	mov	r8,-2
8002a19c:	ec f9 00 78 	ld.w	r9,r6[120]
8002a1a0:	93 08       	st.w	r9[0x0],r8
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
8002a1a2:	ec f8 00 40 	ld.w	r8,r6[64]
8002a1a6:	70 09       	ld.w	r9,r8[0x0]
8002a1a8:	72 38       	ld.w	r8,r9[0xc]
8002a1aa:	30 0a       	mov	r10,0
8002a1ac:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
8002a1b0:	93 38       	st.w	r9[0xc],r8
		twim_inst->scr = ~0UL;
8002a1b2:	ec f8 00 40 	ld.w	r8,r6[64]
8002a1b6:	70 08       	ld.w	r8,r8[0x0]
8002a1b8:	3f f9       	mov	r9,-1
8002a1ba:	91 b9       	st.w	r8[0x2c],r9
		twim_inst->idr = ~0UL;
8002a1bc:	ec f8 00 40 	ld.w	r8,r6[64]
8002a1c0:	70 08       	ld.w	r8,r8[0x0]
8002a1c2:	3f f9       	mov	r9,-1
8002a1c4:	91 99       	st.w	r8[0x24],r9
		twim_next = false;
8002a1c6:	ec f9 00 bc 	ld.w	r9,r6[188]
8002a1ca:	30 08       	mov	r8,0
8002a1cc:	b2 88       	st.b	r9[0x0],r8
8002a1ce:	c7 a8       	rjmp	8002a2c2 <twim_master_interrupt_handler+0x162>
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
8002a1d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a1d4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002a1d8:	5c 58       	castu.b	r8
8002a1da:	c2 d0       	breq	8002a234 <twim_master_interrupt_handler+0xd4>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
8002a1dc:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a1e0:	70 09       	ld.w	r9,r8[0x0]
8002a1e2:	ec f8 00 40 	ld.w	r8,r6[64]
8002a1e6:	70 08       	ld.w	r8,r8[0x0]
8002a1e8:	70 58       	ld.w	r8,r8[0x14]
8002a1ea:	5c 58       	castu.b	r8
8002a1ec:	b2 88       	st.b	r9[0x0],r8
		twim_rx_data++;
8002a1ee:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a1f2:	70 08       	ld.w	r8,r8[0x0]
8002a1f4:	f0 c9 ff ff 	sub	r9,r8,-1
8002a1f8:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a1fc:	91 09       	st.w	r8[0x0],r9
		// decrease recieved bytes number
		twim_rx_nb_bytes--;
8002a1fe:	ec f8 01 50 	ld.w	r8,r6[336]
8002a202:	70 08       	ld.w	r8,r8[0x0]
8002a204:	f0 c9 00 01 	sub	r9,r8,1
8002a208:	ec f8 01 50 	ld.w	r8,r6[336]
8002a20c:	91 09       	st.w	r8[0x0],r9
		// receive complete
		if (twim_rx_nb_bytes == 0) {
8002a20e:	ec f8 01 50 	ld.w	r8,r6[336]
8002a212:	70 08       	ld.w	r8,r8[0x0]
8002a214:	58 08       	cp.w	r8,0
8002a216:	c5 61       	brne	8002a2c2 <twim_master_interrupt_handler+0x162>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
8002a218:	ec f8 00 40 	ld.w	r8,r6[64]
8002a21c:	70 08       	ld.w	r8,r8[0x0]
8002a21e:	30 19       	mov	r9,1
8002a220:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
8002a222:	ec f9 00 bc 	ld.w	r9,r6[188]
8002a226:	30 08       	mov	r8,0
8002a228:	b2 88       	st.b	r9[0x0],r8
			transfer_status=true;
8002a22a:	ec f8 00 78 	ld.w	r8,r6[120]
8002a22e:	30 19       	mov	r9,1
8002a230:	91 09       	st.w	r8[0x0],r9
8002a232:	c4 88       	rjmp	8002a2c2 <twim_master_interrupt_handler+0x162>
			
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
8002a234:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a238:	e2 18 00 02 	andl	r8,0x2,COH
8002a23c:	c4 30       	breq	8002a2c2 <twim_master_interrupt_handler+0x162>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
8002a23e:	ec f8 00 88 	ld.w	r8,r6[136]
8002a242:	70 08       	ld.w	r8,r8[0x0]
8002a244:	58 08       	cp.w	r8,0
8002a246:	c0 b1       	brne	8002a25c <twim_master_interrupt_handler+0xfc>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
8002a248:	ec f8 00 40 	ld.w	r8,r6[64]
8002a24c:	70 08       	ld.w	r8,r8[0x0]
8002a24e:	30 29       	mov	r9,2
8002a250:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
8002a252:	ec f9 00 bc 	ld.w	r9,r6[188]
8002a256:	30 08       	mov	r8,0
8002a258:	b2 88       	st.b	r9[0x0],r8
8002a25a:	c3 48       	rjmp	8002a2c2 <twim_master_interrupt_handler+0x162>
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
8002a25c:	ec f8 00 40 	ld.w	r8,r6[64]
8002a260:	70 0a       	ld.w	r10,r8[0x0]
8002a262:	ec f8 00 98 	ld.w	r8,r6[152]
8002a266:	70 08       	ld.w	r8,r8[0x0]
8002a268:	11 89       	ld.ub	r9,r8[0x0]
8002a26a:	5c 59       	castu.b	r9
8002a26c:	95 69       	st.w	r10[0x18],r9
8002a26e:	f0 c9 ff ff 	sub	r9,r8,-1
8002a272:	ec f8 00 98 	ld.w	r8,r6[152]
8002a276:	91 09       	st.w	r8[0x0],r9
			// decrease transmited bytes number
			twim_tx_nb_bytes--;
8002a278:	ec f8 00 88 	ld.w	r8,r6[136]
8002a27c:	70 08       	ld.w	r8,r8[0x0]
8002a27e:	f0 c9 00 01 	sub	r9,r8,1
8002a282:	ec f8 00 88 	ld.w	r8,r6[136]
8002a286:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
8002a288:	ec f8 00 88 	ld.w	r8,r6[136]
8002a28c:	70 08       	ld.w	r8,r8[0x0]
8002a28e:	58 08       	cp.w	r8,0
8002a290:	c1 91       	brne	8002a2c2 <twim_master_interrupt_handler+0x162>
				// Check for next transfer
				if(twim_next) {
8002a292:	ec f8 00 bc 	ld.w	r8,r6[188]
8002a296:	11 88       	ld.ub	r8,r8[0x0]
8002a298:	5c 58       	castu.b	r8
8002a29a:	c1 40       	breq	8002a2c2 <twim_master_interrupt_handler+0x162>
					twim_next = false;
8002a29c:	ec f9 00 bc 	ld.w	r9,r6[188]
8002a2a0:	30 08       	mov	r8,0
8002a2a2:	b2 88       	st.b	r9[0x0],r8
					twim_tx_nb_bytes = twim_package->length;
8002a2a4:	ec f8 02 04 	ld.w	r8,r6[516]
8002a2a8:	70 08       	ld.w	r8,r8[0x0]
8002a2aa:	70 49       	ld.w	r9,r8[0x10]
8002a2ac:	ec f8 00 88 	ld.w	r8,r6[136]
8002a2b0:	91 09       	st.w	r8[0x0],r9
					twim_tx_data = twim_package->buffer;
8002a2b2:	ec f8 02 04 	ld.w	r8,r6[516]
8002a2b6:	70 08       	ld.w	r8,r8[0x0]
8002a2b8:	70 38       	ld.w	r8,r8[0xc]
8002a2ba:	10 99       	mov	r9,r8
8002a2bc:	ec f8 00 98 	ld.w	r8,r6[152]
8002a2c0:	91 09       	st.w	r8[0x0],r9
				}
			}
		}
	}
	return;
}
8002a2c2:	2f fd       	sub	sp,-4
8002a2c4:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8002a2c8:	d6 03       	rete
8002a2ca:	00 00       	add	r0,r0
8002a2cc:	80 02       	ld.sh	r2,r0[0x0]
8002a2ce:	9f ee       	st.w	pc[0x38],lr

8002a2d0 <twim_master_interrupt_handler2>:
/** 
 * \internal  
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler2,AVR32_TWIM1_GROUP,CONF_TWIM_IRQ_LEVEL)
{
8002a2d0:	eb cd 40 c0 	pushm	r6-r7,lr
8002a2d4:	1a 97       	mov	r7,sp
8002a2d6:	20 1d       	sub	sp,4
8002a2d8:	4d 76       	lddpc	r6,8002a434 <twim_master_interrupt_handler2+0x164>
8002a2da:	1e 26       	rsub	r6,pc
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
8002a2dc:	ec f8 00 40 	ld.w	r8,r6[64]
8002a2e0:	70 08       	ld.w	r8,r8[0x0]
8002a2e2:	70 79       	ld.w	r9,r8[0x1c]
8002a2e4:	ec f8 01 04 	ld.w	r8,r6[260]
8002a2e8:	70 08       	ld.w	r8,r8[0x0]
8002a2ea:	f3 e8 00 08 	and	r8,r9,r8
8002a2ee:	ef 48 ff fc 	st.w	r7[-4],r8
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
8002a2f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a2f6:	e2 18 07 00 	andl	r8,0x700,COH
8002a2fa:	c2 30       	breq	8002a340 <twim_master_interrupt_handler2+0x70>
		//if we get a nak, clear the valid bit in cmdr, 
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ? 
8002a2fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a300:	e2 18 03 00 	andl	r8,0x300,COH
8002a304:	c0 30       	breq	8002a30a <twim_master_interrupt_handler2+0x3a>
8002a306:	3f c8       	mov	r8,-4
8002a308:	c0 28       	rjmp	8002a30c <twim_master_interrupt_handler2+0x3c>
8002a30a:	3f e8       	mov	r8,-2
8002a30c:	ec f9 00 78 	ld.w	r9,r6[120]
8002a310:	93 08       	st.w	r9[0x0],r8
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
8002a312:	ec f8 00 40 	ld.w	r8,r6[64]
8002a316:	70 09       	ld.w	r9,r8[0x0]
8002a318:	72 38       	ld.w	r8,r9[0xc]
8002a31a:	30 0a       	mov	r10,0
8002a31c:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
8002a320:	93 38       	st.w	r9[0xc],r8
		twim_inst->scr = ~0UL;
8002a322:	ec f8 00 40 	ld.w	r8,r6[64]
8002a326:	70 08       	ld.w	r8,r8[0x0]
8002a328:	3f f9       	mov	r9,-1
8002a32a:	91 b9       	st.w	r8[0x2c],r9
		twim_inst->idr = ~0UL;
8002a32c:	ec f8 00 40 	ld.w	r8,r6[64]
8002a330:	70 08       	ld.w	r8,r8[0x0]
8002a332:	3f f9       	mov	r9,-1
8002a334:	91 99       	st.w	r8[0x24],r9
		twim_next = false;
8002a336:	ec f9 00 bc 	ld.w	r9,r6[188]
8002a33a:	30 08       	mov	r8,0
8002a33c:	b2 88       	st.b	r9[0x0],r8
8002a33e:	c7 68       	rjmp	8002a42a <twim_master_interrupt_handler2+0x15a>
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
8002a340:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a344:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002a348:	5c 58       	castu.b	r8
8002a34a:	c2 90       	breq	8002a39c <twim_master_interrupt_handler2+0xcc>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
8002a34c:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a350:	70 09       	ld.w	r9,r8[0x0]
8002a352:	ec f8 00 40 	ld.w	r8,r6[64]
8002a356:	70 08       	ld.w	r8,r8[0x0]
8002a358:	70 58       	ld.w	r8,r8[0x14]
8002a35a:	5c 58       	castu.b	r8
8002a35c:	b2 88       	st.b	r9[0x0],r8
		twim_rx_data++;
8002a35e:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a362:	70 08       	ld.w	r8,r8[0x0]
8002a364:	f0 c9 ff ff 	sub	r9,r8,-1
8002a368:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a36c:	91 09       	st.w	r8[0x0],r9
		// decrease recieved bytes number
		twim_rx_nb_bytes--;
8002a36e:	ec f8 01 50 	ld.w	r8,r6[336]
8002a372:	70 08       	ld.w	r8,r8[0x0]
8002a374:	f0 c9 00 01 	sub	r9,r8,1
8002a378:	ec f8 01 50 	ld.w	r8,r6[336]
8002a37c:	91 09       	st.w	r8[0x0],r9
		// receive complete
		if (twim_rx_nb_bytes == 0) {
8002a37e:	ec f8 01 50 	ld.w	r8,r6[336]
8002a382:	70 08       	ld.w	r8,r8[0x0]
8002a384:	58 08       	cp.w	r8,0
8002a386:	c5 21       	brne	8002a42a <twim_master_interrupt_handler2+0x15a>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
8002a388:	ec f8 00 40 	ld.w	r8,r6[64]
8002a38c:	70 08       	ld.w	r8,r8[0x0]
8002a38e:	30 19       	mov	r9,1
8002a390:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
8002a392:	ec f9 00 bc 	ld.w	r9,r6[188]
8002a396:	30 08       	mov	r8,0
8002a398:	b2 88       	st.b	r9[0x0],r8
8002a39a:	c4 88       	rjmp	8002a42a <twim_master_interrupt_handler2+0x15a>
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
8002a39c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a3a0:	e2 18 00 02 	andl	r8,0x2,COH
8002a3a4:	c4 30       	breq	8002a42a <twim_master_interrupt_handler2+0x15a>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
8002a3a6:	ec f8 00 88 	ld.w	r8,r6[136]
8002a3aa:	70 08       	ld.w	r8,r8[0x0]
8002a3ac:	58 08       	cp.w	r8,0
8002a3ae:	c0 b1       	brne	8002a3c4 <twim_master_interrupt_handler2+0xf4>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
8002a3b0:	ec f8 00 40 	ld.w	r8,r6[64]
8002a3b4:	70 08       	ld.w	r8,r8[0x0]
8002a3b6:	30 29       	mov	r9,2
8002a3b8:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
8002a3ba:	ec f9 00 bc 	ld.w	r9,r6[188]
8002a3be:	30 08       	mov	r8,0
8002a3c0:	b2 88       	st.b	r9[0x0],r8
8002a3c2:	c3 48       	rjmp	8002a42a <twim_master_interrupt_handler2+0x15a>
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
8002a3c4:	ec f8 00 40 	ld.w	r8,r6[64]
8002a3c8:	70 0a       	ld.w	r10,r8[0x0]
8002a3ca:	ec f8 00 98 	ld.w	r8,r6[152]
8002a3ce:	70 08       	ld.w	r8,r8[0x0]
8002a3d0:	11 89       	ld.ub	r9,r8[0x0]
8002a3d2:	5c 59       	castu.b	r9
8002a3d4:	95 69       	st.w	r10[0x18],r9
8002a3d6:	f0 c9 ff ff 	sub	r9,r8,-1
8002a3da:	ec f8 00 98 	ld.w	r8,r6[152]
8002a3de:	91 09       	st.w	r8[0x0],r9
			// decrease transmited bytes number
			twim_tx_nb_bytes--;
8002a3e0:	ec f8 00 88 	ld.w	r8,r6[136]
8002a3e4:	70 08       	ld.w	r8,r8[0x0]
8002a3e6:	f0 c9 00 01 	sub	r9,r8,1
8002a3ea:	ec f8 00 88 	ld.w	r8,r6[136]
8002a3ee:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
8002a3f0:	ec f8 00 88 	ld.w	r8,r6[136]
8002a3f4:	70 08       	ld.w	r8,r8[0x0]
8002a3f6:	58 08       	cp.w	r8,0
8002a3f8:	c1 91       	brne	8002a42a <twim_master_interrupt_handler2+0x15a>
				// Check for next transfer
				if(twim_next) {
8002a3fa:	ec f8 00 bc 	ld.w	r8,r6[188]
8002a3fe:	11 88       	ld.ub	r8,r8[0x0]
8002a400:	5c 58       	castu.b	r8
8002a402:	c1 40       	breq	8002a42a <twim_master_interrupt_handler2+0x15a>
					twim_next = false;
8002a404:	ec f9 00 bc 	ld.w	r9,r6[188]
8002a408:	30 08       	mov	r8,0
8002a40a:	b2 88       	st.b	r9[0x0],r8
					twim_tx_nb_bytes = twim_package->length;
8002a40c:	ec f8 02 04 	ld.w	r8,r6[516]
8002a410:	70 08       	ld.w	r8,r8[0x0]
8002a412:	70 49       	ld.w	r9,r8[0x10]
8002a414:	ec f8 00 88 	ld.w	r8,r6[136]
8002a418:	91 09       	st.w	r8[0x0],r9
					twim_tx_data = twim_package->buffer;
8002a41a:	ec f8 02 04 	ld.w	r8,r6[516]
8002a41e:	70 08       	ld.w	r8,r8[0x0]
8002a420:	70 38       	ld.w	r8,r8[0xc]
8002a422:	10 99       	mov	r9,r8
8002a424:	ec f8 00 98 	ld.w	r8,r6[152]
8002a428:	91 09       	st.w	r8[0x0],r9
				}
			}
		}
	}
	return;
}
8002a42a:	2f fd       	sub	sp,-4
8002a42c:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8002a430:	d6 03       	rete
8002a432:	00 00       	add	r0,r0
8002a434:	80 02       	ld.sh	r2,r0[0x0]
8002a436:	a1 5e       	asr	lr,0x1

8002a438 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
8002a438:	eb cd 40 80 	pushm	r7,lr
8002a43c:	1a 97       	mov	r7,sp
8002a43e:	20 5d       	sub	sp,20
8002a440:	ef 4c ff f4 	st.w	r7[-12],r12
8002a444:	ef 4b ff f0 	st.w	r7[-16],r11
8002a448:	ef 4a ff ec 	st.w	r7[-20],r10
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
8002a44c:	30 08       	mov	r8,0
8002a44e:	ef 68 ff ff 	st.b	r7[-1],r8
	f_prescaled = (pba_hz / speed / 2);
8002a452:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002a456:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a45a:	f0 09 0d 08 	divu	r8,r8,r9
8002a45e:	a1 98       	lsr	r8,0x1
8002a460:	ef 48 ff f8 	st.w	r7[-8],r8
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
8002a464:	c0 b8       	rjmp	8002a47a <twim_set_speed+0x42>
		// increase clock divider
		cwgr_exp++;
8002a466:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002a46a:	2f f8       	sub	r8,-1
8002a46c:	ef 68 ff ff 	st.b	r7[-1],r8
		// divide f_prescaled value
		f_prescaled /= 2;
8002a470:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a474:	a1 98       	lsr	r8,0x1
8002a476:	ef 48 ff f8 	st.w	r7[-8],r8
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
8002a47a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a47e:	e0 48 00 ff 	cp.w	r8,255
8002a482:	e0 88 00 09 	brls	8002a494 <twim_set_speed+0x5c>
8002a486:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a48a:	30 78       	mov	r8,7
8002a48c:	f0 09 18 00 	cp.b	r9,r8
8002a490:	fe 98 ff eb 	brls	8002a466 <twim_set_speed+0x2e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
8002a494:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a498:	30 78       	mov	r8,7
8002a49a:	f0 09 18 00 	cp.b	r9,r8
8002a49e:	e0 88 00 04 	brls	8002a4a6 <twim_set_speed+0x6e>
		return ERR_INVALID_ARG;
8002a4a2:	3f 88       	mov	r8,-8
8002a4a4:	c1 a8       	rjmp	8002a4d8 <twim_set_speed+0xa0>
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
8002a4a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a4aa:	f0 09 16 01 	lsr	r9,r8,0x1
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
8002a4ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a4b2:	a1 98       	lsr	r8,0x1
8002a4b4:	ee fa ff f8 	ld.w	r10,r7[-8]
8002a4b8:	f4 08 01 08 	sub	r8,r10,r8
8002a4bc:	a9 68       	lsl	r8,0x8
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
8002a4be:	10 49       	or	r9,r8
8002a4c0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002a4c4:	bd 68       	lsl	r8,0x1c
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
8002a4c6:	10 49       	or	r9,r8
8002a4c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a4cc:	b1 68       	lsl	r8,0x10
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
8002a4ce:	10 49       	or	r9,r8
8002a4d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a4d4:	91 19       	st.w	r8[0x4],r9
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
	return STATUS_OK;
8002a4d6:	30 08       	mov	r8,0
}
8002a4d8:	10 9c       	mov	r12,r8
8002a4da:	2f bd       	sub	sp,-20
8002a4dc:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a4e0 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
8002a4e0:	eb cd 40 c0 	pushm	r6-r7,lr
8002a4e4:	1a 97       	mov	r7,sp
8002a4e6:	20 4d       	sub	sp,16
8002a4e8:	4c 06       	lddpc	r6,8002a5e8 <twim_master_init+0x108>
8002a4ea:	1e 26       	rsub	r6,pc
8002a4ec:	ef 4c ff f4 	st.w	r7[-12],r12
8002a4f0:	ef 4b ff f0 	st.w	r7[-16],r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8002a4f4:	e1 b8 00 00 	mfsr	r8,0x0
8002a4f8:	10 9c       	mov	r12,r8
8002a4fa:	c1 6e       	rcall	8002a126 <cpu_irq_is_enabled_flags>
8002a4fc:	18 98       	mov	r8,r12
8002a4fe:	ef 68 ff fb 	st.b	r7[-5],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002a502:	ec f8 00 78 	ld.w	r8,r6[120]
8002a506:	30 09       	mov	r9,0
8002a508:	91 09       	st.w	r8[0x0],r9
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
8002a50a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8002a50e:	30 08       	mov	r8,0
8002a510:	f0 09 18 00 	cp.b	r9,r8
8002a514:	c0 20       	breq	8002a518 <twim_master_init+0x38>
		cpu_irq_disable ();
8002a516:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
8002a518:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a51c:	3f f9       	mov	r9,-1
8002a51e:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a520:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a524:	30 19       	mov	r9,1
8002a526:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a528:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a52c:	e0 69 00 80 	mov	r9,128
8002a530:	91 09       	st.w	r8[0x0],r9
	if (global_interrupt_enabled) {
8002a532:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8002a536:	30 08       	mov	r8,0
8002a538:	f0 09 18 00 	cp.b	r9,r8
8002a53c:	c0 20       	breq	8002a540 <twim_master_init+0x60>
		cpu_irq_enable ();
8002a53e:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
8002a540:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a544:	3f f9       	mov	r9,-1
8002a546:	91 b9       	st.w	r8[0x2c],r9
	
	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
8002a548:	fe b0 fd e0 	rcall	8002a108 <cpu_irq_save>
8002a54c:	18 98       	mov	r8,r12
8002a54e:	ef 48 ff fc 	st.w	r7[-4],r8
	irq_register_handler(twim_master_interrupt_handler,
8002a552:	30 1a       	mov	r10,1
8002a554:	e0 6b 03 20 	mov	r11,800
8002a558:	fe cc 03 f8 	sub	r12,pc,1016
8002a55c:	f0 16 00 3b 	mcall	r6[236]
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	irq_register_handler(twim_master_interrupt_handler2,
8002a560:	30 1a       	mov	r10,1
8002a562:	e0 6b 03 40 	mov	r11,832
8002a566:	fe cc 02 96 	sub	r12,pc,662
8002a56a:	f0 16 00 3b 	mcall	r6[236]
	AVR32_TWIM1_IRQ , CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);
8002a56e:	ee fc ff fc 	ld.w	r12,r7[-4]
8002a572:	fe b0 fd ea 	rcall	8002a146 <cpu_irq_restore>
	
	if (opt->smbus) {
8002a576:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a57a:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a57e:	58 08       	cp.w	r8,0
8002a580:	c0 90       	breq	8002a592 <twim_master_init+0xb2>
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
8002a582:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a586:	31 09       	mov	r9,16
8002a588:	91 09       	st.w	r8[0x0],r9
		twim->smbtr = (uint32_t) -1;
8002a58a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a58e:	3f f9       	mov	r9,-1
8002a590:	91 29       	st.w	r8[0x8],r9
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) == 
8002a592:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a596:	70 09       	ld.w	r9,r8[0x0]
8002a598:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a59c:	70 18       	ld.w	r8,r8[0x4]
8002a59e:	12 9a       	mov	r10,r9
8002a5a0:	10 9b       	mov	r11,r8
8002a5a2:	ee fc ff f4 	ld.w	r12,r7[-12]
8002a5a6:	f0 16 01 2f 	mcall	r6[1212]
8002a5aa:	18 98       	mov	r8,r12
8002a5ac:	5b 88       	cp.w	r8,-8
8002a5ae:	c0 31       	brne	8002a5b4 <twim_master_init+0xd4>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
8002a5b0:	3f 88       	mov	r8,-8
8002a5b2:	c1 68       	rjmp	8002a5de <twim_master_init+0xfe>
	}
	// Probe the component
	twim_probe (twim, opt->chip);
8002a5b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a5b8:	70 28       	ld.w	r8,r8[0x8]
8002a5ba:	10 9b       	mov	r11,r8
8002a5bc:	ee fc ff f4 	ld.w	r12,r7[-12]
8002a5c0:	f0 16 01 07 	mcall	r6[1052]
	//Check for nack and abitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a5c4:	ec f8 00 78 	ld.w	r8,r6[120]
8002a5c8:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and abitration
	if (transfer_status == TWI_RECEIVE_NACK
8002a5ca:	5b c8       	cp.w	r8,-4
8002a5cc:	c0 60       	breq	8002a5d8 <twim_master_init+0xf8>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a5ce:	ec f8 00 78 	ld.w	r8,r6[120]
8002a5d2:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and abitration
	if (transfer_status == TWI_RECEIVE_NACK
8002a5d4:	5b e8       	cp.w	r8,-2
8002a5d6:	c0 31       	brne	8002a5dc <twim_master_init+0xfc>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002a5d8:	3f f8       	mov	r8,-1
8002a5da:	c0 28       	rjmp	8002a5de <twim_master_init+0xfe>
	}
	return STATUS_OK;
8002a5dc:	30 08       	mov	r8,0
}
8002a5de:	10 9c       	mov	r12,r8
8002a5e0:	2f cd       	sub	sp,-16
8002a5e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a5e6:	00 00       	add	r0,r0
8002a5e8:	80 02       	ld.sh	r2,r0[0x0]
8002a5ea:	a3 6e       	lsl	lr,0x2

8002a5ec <twim_disable_interrupt>:
 * \brief Disable the TWI interrupts and clear its status register
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
8002a5ec:	eb cd 40 c0 	pushm	r6-r7,lr
8002a5f0:	1a 97       	mov	r7,sp
8002a5f2:	20 2d       	sub	sp,8
8002a5f4:	48 f6       	lddpc	r6,8002a630 <twim_disable_interrupt+0x44>
8002a5f6:	1e 26       	rsub	r6,pc
8002a5f8:	ef 4c ff f8 	st.w	r7[-8],r12
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
8002a5fc:	e1 b8 00 00 	mfsr	r8,0x0
8002a600:	10 9c       	mov	r12,r8
8002a602:	fe b0 fd 92 	rcall	8002a126 <cpu_irq_is_enabled_flags>
8002a606:	18 98       	mov	r8,r12
8002a608:	ef 68 ff ff 	st.b	r7[-1],r8
	if (global_interrupt_enabled) {
8002a60c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002a610:	30 08       	mov	r8,0
8002a612:	f0 09 18 00 	cp.b	r9,r8
8002a616:	c0 20       	breq	8002a61a <twim_disable_interrupt+0x2e>
		cpu_irq_disable ();
8002a618:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
8002a61a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a61e:	3f f9       	mov	r9,-1
8002a620:	91 99       	st.w	r8[0x24],r9
	// Clear the status flags
	twim->scr = ~0UL;
8002a622:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a626:	3f f9       	mov	r9,-1
8002a628:	91 b9       	st.w	r8[0x2c],r9
}
8002a62a:	2f ed       	sub	sp,-8
8002a62c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a630:	80 02       	ld.sh	r2,r0[0x0]
8002a632:	a4 7a       	st.h	r2[0xe],r10

8002a634 <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
8002a634:	eb cd 40 c0 	pushm	r6-r7,lr
8002a638:	1a 97       	mov	r7,sp
8002a63a:	20 3d       	sub	sp,12
8002a63c:	48 c6       	lddpc	r6,8002a66c <twim_probe+0x38>
8002a63e:	1e 26       	rsub	r6,pc
8002a640:	ef 4c ff f8 	st.w	r7[-8],r12
8002a644:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t data[1] = { 0 };
8002a648:	30 08       	mov	r8,0
8002a64a:	ef 68 ff fc 	st.b	r7[-4],r8
	return (twim_write (twim,data,0,chip_addr,0));
8002a64e:	ee cb 00 04 	sub	r11,r7,4
8002a652:	30 08       	mov	r8,0
8002a654:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a658:	30 0a       	mov	r10,0
8002a65a:	ee fc ff f8 	ld.w	r12,r7[-8]
8002a65e:	f0 16 00 36 	mcall	r6[216]
8002a662:	18 98       	mov	r8,r12
}
8002a664:	10 9c       	mov	r12,r8
8002a666:	2f dd       	sub	sp,-12
8002a668:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a66c:	80 02       	ld.sh	r2,r0[0x0]
8002a66e:	a4 c2       	st.b	r2[0x4],r2

8002a670 <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
8002a670:	eb cd 40 c0 	pushm	r6-r7,lr
8002a674:	1a 97       	mov	r7,sp
8002a676:	20 2d       	sub	sp,8
8002a678:	4e 76       	lddpc	r6,8002a814 <twim_read_packet+0x1a4>
8002a67a:	1e 26       	rsub	r6,pc
8002a67c:	ef 4c ff fc 	st.w	r7[-4],r12
8002a680:	ef 4b ff f8 	st.w	r7[-8],r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a684:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a688:	30 29       	mov	r9,2
8002a68a:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002a68c:	ec f8 00 40 	ld.w	r8,r6[64]
8002a690:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a694:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002a696:	ec f8 00 40 	ld.w	r8,r6[64]
8002a69a:	70 08       	ld.w	r8,r8[0x0]
8002a69c:	10 9c       	mov	r12,r8
8002a69e:	f0 16 00 7f 	mcall	r6[508]
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
8002a6a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a6a6:	70 38       	ld.w	r8,r8[0xc]
8002a6a8:	10 99       	mov	r9,r8
8002a6aa:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a6ae:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
8002a6b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a6b4:	70 49       	ld.w	r9,r8[0x10]
8002a6b6:	ec f8 01 50 	ld.w	r8,r6[336]
8002a6ba:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
8002a6bc:	ec f9 00 bc 	ld.w	r9,r6[188]
8002a6c0:	30 08       	mov	r8,0
8002a6c2:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002a6c4:	ec f8 00 78 	ld.w	r8,r6[120]
8002a6c8:	30 09       	mov	r9,0
8002a6ca:	91 09       	st.w	r8[0x0],r9
	//check if internal address access is performed
	if (package->addr_length) {
8002a6cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a6d0:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a6d4:	58 08       	cp.w	r8,0
8002a6d6:	c5 60       	breq	8002a782 <twim_read_packet+0x112>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002a6d8:	ec f8 00 40 	ld.w	r8,r6[64]
8002a6dc:	70 08       	ld.w	r8,r8[0x0]
8002a6de:	30 19       	mov	r9,1
8002a6e0:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a6e2:	ec f8 00 40 	ld.w	r8,r6[64]
8002a6e6:	70 08       	ld.w	r8,r8[0x0]
8002a6e8:	e0 69 00 80 	mov	r9,128
8002a6ec:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a6ee:	ec f8 00 40 	ld.w	r8,r6[64]
8002a6f2:	70 08       	ld.w	r8,r8[0x0]
8002a6f4:	30 29       	mov	r9,2
8002a6f6:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = (uint8_t *) (&(package->addr));
8002a6f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a6fc:	2f c8       	sub	r8,-4
8002a6fe:	10 99       	mov	r9,r8
8002a700:	ec f8 00 98 	ld.w	r8,r6[152]
8002a704:	91 09       	st.w	r8[0x0],r9
		twim_tx_data += (4 - package->addr_length);
8002a706:	ec f8 00 98 	ld.w	r8,r6[152]
8002a70a:	70 09       	ld.w	r9,r8[0x0]
8002a70c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a710:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a714:	f0 08 11 04 	rsub	r8,r8,4
8002a718:	10 09       	add	r9,r8
8002a71a:	ec f8 00 98 	ld.w	r8,r6[152]
8002a71e:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
8002a720:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a724:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a728:	10 99       	mov	r9,r8
8002a72a:	ec f8 00 88 	ld.w	r8,r6[136]
8002a72e:	91 09       	st.w	r8[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | 
8002a730:	ec f8 01 04 	ld.w	r8,r6[260]
8002a734:	e0 69 07 03 	mov	r9,1795
8002a738:	91 09       	st.w	r8[0x0],r9
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a73a:	ec f8 00 40 	ld.w	r8,r6[64]
8002a73e:	70 08       	ld.w	r8,r8[0x0]
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a740:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a744:	72 09       	ld.w	r9,r9[0x0]
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | 
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a746:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a74a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a74e:	f3 39 00 08 	ld.ub	r9,r9[8]
8002a752:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a754:	f5 e9 10 09 	or	r9,r10,r9
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | 
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a758:	e8 19 a0 00 	orl	r9,0xa000
8002a75c:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a75e:	ec f8 00 40 	ld.w	r8,r6[64]
8002a762:	70 08       	ld.w	r8,r8[0x0]
8002a764:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a768:	72 09       	ld.w	r9,r9[0x0]
8002a76a:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a76e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a772:	72 49       	ld.w	r9,r9[0x10]
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a774:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a776:	f5 e9 10 09 	or	r9,r10,r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a77a:	e8 19 e0 01 	orl	r9,0xe001
8002a77e:	91 49       	st.w	r8[0x10],r9
8002a780:	c1 b8       	rjmp	8002a7b6 <twim_read_packet+0x146>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
8002a782:	ec f8 00 88 	ld.w	r8,r6[136]
8002a786:	30 09       	mov	r9,0
8002a788:	91 09       	st.w	r8[0x0],r9
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
8002a78a:	ec f8 01 04 	ld.w	r8,r6[260]
8002a78e:	e0 69 07 01 	mov	r9,1793
8002a792:	91 09       	st.w	r8[0x0],r9
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a794:	ec f8 00 40 	ld.w	r8,r6[64]
8002a798:	70 08       	ld.w	r8,r8[0x0]
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a79a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a79e:	72 09       	ld.w	r9,r9[0x0]
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a7a0:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a7a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a7a8:	72 49       	ld.w	r9,r9[0x10]
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a7aa:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a7ac:	f5 e9 10 09 	or	r9,r10,r9
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a7b0:	e8 19 e0 01 	orl	r9,0xe001
8002a7b4:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8002a7b6:	ec f8 00 40 	ld.w	r8,r6[64]
8002a7ba:	70 08       	ld.w	r8,r8[0x0]
8002a7bc:	ec f9 01 04 	ld.w	r9,r6[260]
8002a7c0:	72 09       	ld.w	r9,r9[0x0]
8002a7c2:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a7c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a7c8:	30 19       	mov	r9,1
8002a7ca:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8002a7cc:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8002a7ce:	c0 38       	rjmp	8002a7d4 <twim_read_packet+0x164>
		cpu_relax();
8002a7d0:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8002a7d4:	ec f8 00 78 	ld.w	r8,r6[120]
8002a7d8:	70 08       	ld.w	r8,r8[0x0]
8002a7da:	58 08       	cp.w	r8,0
8002a7dc:	c0 61       	brne	8002a7e8 <twim_read_packet+0x178>
8002a7de:	f0 16 00 6f 	mcall	r6[444]
8002a7e2:	18 98       	mov	r8,r12
8002a7e4:	58 08       	cp.w	r8,0
8002a7e6:	cf 50       	breq	8002a7d0 <twim_read_packet+0x160>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a7e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a7ec:	30 29       	mov	r9,2
8002a7ee:	91 09       	st.w	r8[0x0],r9
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a7f0:	ec f8 00 78 	ld.w	r8,r6[120]
8002a7f4:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
8002a7f6:	5b c8       	cp.w	r8,-4
8002a7f8:	c0 60       	breq	8002a804 <twim_read_packet+0x194>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a7fa:	ec f8 00 78 	ld.w	r8,r6[120]
8002a7fe:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
8002a800:	5b e8       	cp.w	r8,-2
8002a802:	c0 31       	brne	8002a808 <twim_read_packet+0x198>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002a804:	3f f8       	mov	r8,-1
8002a806:	c0 28       	rjmp	8002a80a <twim_read_packet+0x19a>
	}
	return STATUS_OK;
8002a808:	30 08       	mov	r8,0
}
8002a80a:	10 9c       	mov	r12,r8
8002a80c:	2f ed       	sub	sp,-8
8002a80e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a812:	00 00       	add	r0,r0
8002a814:	80 02       	ld.sh	r2,r0[0x0]
8002a816:	a4 fe       	st.b	r2[0x7],lr

8002a818 <twim_read>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read (volatile avr32_twim_t *twim, uint8_t *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
8002a818:	eb cd 40 c0 	pushm	r6-r7,lr
8002a81c:	1a 97       	mov	r7,sp
8002a81e:	20 5d       	sub	sp,20
8002a820:	4c c6       	lddpc	r6,8002a950 <twim_read+0x138>
8002a822:	1e 26       	rsub	r6,pc
8002a824:	ef 4c ff fc 	st.w	r7[-4],r12
8002a828:	ef 4b ff f8 	st.w	r7[-8],r11
8002a82c:	ef 4a ff f4 	st.w	r7[-12],r10
8002a830:	ef 49 ff f0 	st.w	r7[-16],r9
8002a834:	ef 68 ff ec 	st.b	r7[-20],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a838:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a83c:	30 19       	mov	r9,1
8002a83e:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a840:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a844:	e0 69 00 80 	mov	r9,128
8002a848:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a84a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a84e:	30 29       	mov	r9,2
8002a850:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002a852:	ec f8 00 40 	ld.w	r8,r6[64]
8002a856:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a85a:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002a85c:	ec f8 00 40 	ld.w	r8,r6[64]
8002a860:	70 08       	ld.w	r8,r8[0x0]
8002a862:	10 9c       	mov	r12,r8
8002a864:	f0 16 00 7f 	mcall	r6[508]
	// get a pointer to applicative data
	twim_rx_data = buffer;
8002a868:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a86c:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a870:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = nbytes;
8002a872:	ec f8 01 50 	ld.w	r8,r6[336]
8002a876:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a87a:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
8002a87c:	ec f9 00 bc 	ld.w	r9,r6[188]
8002a880:	30 08       	mov	r8,0
8002a882:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002a884:	ec f8 00 78 	ld.w	r8,r6[120]
8002a888:	30 09       	mov	r9,0
8002a88a:	91 09       	st.w	r8[0x0],r9
	//tenbit need special handling
	if (tenbit)	{
8002a88c:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002a890:	30 08       	mov	r8,0
8002a892:	f0 09 18 00 	cp.b	r9,r8
8002a896:	c1 a0       	breq	8002a8ca <twim_read+0xb2>
		twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a898:	ec f8 00 40 	ld.w	r8,r6[64]
8002a89c:	70 08       	ld.w	r8,r8[0x0]
8002a89e:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a8a2:	a1 79       	lsl	r9,0x1
8002a8a4:	e8 19 a8 00 	orl	r9,0xa800
8002a8a8:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim_inst->ncmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a8aa:	ec f8 00 40 	ld.w	r8,r6[64]
8002a8ae:	70 08       	ld.w	r8,r8[0x0]
8002a8b0:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a8b4:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a8b8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a8bc:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a8be:	f5 e9 10 09 	or	r9,r10,r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim_inst->ncmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a8c2:	e8 19 f8 01 	orl	r9,0xf801
8002a8c6:	91 49       	st.w	r8[0x10],r9
8002a8c8:	c1 08       	rjmp	8002a8e8 <twim_read+0xd0>
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a8ca:	ec f8 00 40 	ld.w	r8,r6[64]
8002a8ce:	70 08       	ld.w	r8,r8[0x0]
8002a8d0:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a8d4:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a8d8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a8dc:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a8de:	f5 e9 10 09 	or	r9,r10,r9
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a8e2:	e8 19 e0 01 	orl	r9,0xe001
8002a8e6:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (0 << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// mask NACK and RXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
8002a8e8:	ec f8 01 04 	ld.w	r8,r6[260]
8002a8ec:	e0 69 07 01 	mov	r9,1793
8002a8f0:	91 09       	st.w	r8[0x0],r9
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8002a8f2:	ec f8 00 40 	ld.w	r8,r6[64]
8002a8f6:	70 08       	ld.w	r8,r8[0x0]
8002a8f8:	ec f9 01 04 	ld.w	r9,r6[260]
8002a8fc:	72 09       	ld.w	r9,r9[0x0]
8002a8fe:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002a900:	ec f8 00 40 	ld.w	r8,r6[64]
8002a904:	70 08       	ld.w	r8,r8[0x0]
8002a906:	30 19       	mov	r9,1
8002a908:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8002a90a:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8002a90c:	c0 38       	rjmp	8002a912 <twim_read+0xfa>
		cpu_relax();
8002a90e:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8002a912:	ec f8 00 78 	ld.w	r8,r6[120]
8002a916:	70 08       	ld.w	r8,r8[0x0]
8002a918:	58 08       	cp.w	r8,0
8002a91a:	c0 61       	brne	8002a926 <twim_read+0x10e>
8002a91c:	f0 16 00 6f 	mcall	r6[444]
8002a920:	18 98       	mov	r8,r12
8002a922:	58 08       	cp.w	r8,0
8002a924:	cf 50       	breq	8002a90e <twim_read+0xf6>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a926:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a92a:	30 29       	mov	r9,2
8002a92c:	91 09       	st.w	r8[0x0],r9
	//Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a92e:	ec f8 00 78 	ld.w	r8,r6[120]
8002a932:	70 08       	ld.w	r8,r8[0x0]
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	//Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8002a934:	5b c8       	cp.w	r8,-4
8002a936:	c0 60       	breq	8002a942 <twim_read+0x12a>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a938:	ec f8 00 78 	ld.w	r8,r6[120]
8002a93c:	70 08       	ld.w	r8,r8[0x0]
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	//Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8002a93e:	5b e8       	cp.w	r8,-2
8002a940:	c0 31       	brne	8002a946 <twim_read+0x12e>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002a942:	3f f8       	mov	r8,-1
8002a944:	c0 28       	rjmp	8002a948 <twim_read+0x130>
	}
	return STATUS_OK;
8002a946:	30 08       	mov	r8,0
}
8002a948:	10 9c       	mov	r12,r8
8002a94a:	2f bd       	sub	sp,-20
8002a94c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a950:	80 02       	ld.sh	r2,r0[0x0]
8002a952:	a6 a6       	st.b	r3[0x2],r6

8002a954 <twim_write_packet>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
8002a954:	eb cd 40 c0 	pushm	r6-r7,lr
8002a958:	1a 97       	mov	r7,sp
8002a95a:	20 2d       	sub	sp,8
8002a95c:	4f 16       	lddpc	r6,8002ab20 <twim_write_packet+0x1cc>
8002a95e:	1e 26       	rsub	r6,pc
8002a960:	ef 4c ff fc 	st.w	r7[-4],r12
8002a964:	ef 4b ff f8 	st.w	r7[-8],r11
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a968:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a96c:	30 19       	mov	r9,1
8002a96e:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a970:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a974:	e0 69 00 80 	mov	r9,128
8002a978:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a97a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a97e:	30 29       	mov	r9,2
8002a980:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002a982:	ec f8 00 40 	ld.w	r8,r6[64]
8002a986:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a98a:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002a98c:	ec f8 00 40 	ld.w	r8,r6[64]
8002a990:	70 08       	ld.w	r8,r8[0x0]
8002a992:	10 9c       	mov	r12,r8
8002a994:	f0 16 00 7f 	mcall	r6[508]
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002a998:	ec f8 00 78 	ld.w	r8,r6[120]
8002a99c:	30 09       	mov	r9,0
8002a99e:	91 09       	st.w	r8[0x0],r9
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_TXRDY_MASK;
8002a9a0:	ec f8 01 04 	ld.w	r8,r6[260]
8002a9a4:	e0 69 07 02 	mov	r9,1794
8002a9a8:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
8002a9aa:	ec f9 00 bc 	ld.w	r9,r6[188]
8002a9ae:	30 08       	mov	r8,0
8002a9b0:	b2 88       	st.b	r9[0x0],r8
	//check if internal address access is performed
	if (package->addr_length) {
8002a9b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a9b6:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a9ba:	58 08       	cp.w	r8,0
8002a9bc:	c6 40       	breq	8002aa84 <twim_write_packet+0x130>
		// selection of first valid byte of the address
		twim_tx_data = (uint8_t *) (&(package->addr));
8002a9be:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a9c2:	2f c8       	sub	r8,-4
8002a9c4:	10 99       	mov	r9,r8
8002a9c6:	ec f8 00 98 	ld.w	r8,r6[152]
8002a9ca:	91 09       	st.w	r8[0x0],r9
		twim_tx_data += (4 - package->addr_length);
8002a9cc:	ec f8 00 98 	ld.w	r8,r6[152]
8002a9d0:	70 09       	ld.w	r9,r8[0x0]
8002a9d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a9d6:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a9da:	f0 08 11 04 	rsub	r8,r8,4
8002a9de:	10 09       	add	r9,r8
8002a9e0:	ec f8 00 98 	ld.w	r8,r6[152]
8002a9e4:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
8002a9e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a9ea:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a9ee:	10 99       	mov	r9,r8
8002a9f0:	ec f8 00 88 	ld.w	r8,r6[136]
8002a9f4:	91 09       	st.w	r8[0x0],r9
		// Initiate the transfer to send the internal address
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a9f6:	ec f8 00 40 	ld.w	r8,r6[64]
8002a9fa:	70 08       	ld.w	r8,r8[0x0]
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a9fc:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002aa00:	72 09       	ld.w	r9,r9[0x0]
		twim_tx_data = (uint8_t *) (&(package->addr));
		twim_tx_data += (4 - package->addr_length);
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
		// Initiate the transfer to send the internal address
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002aa02:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002aa06:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002aa0a:	f3 39 00 08 	ld.ub	r9,r9[8]
8002aa0e:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002aa10:	f5 e9 10 09 	or	r9,r10,r9
		twim_tx_data = (uint8_t *) (&(package->addr));
		twim_tx_data += (4 - package->addr_length);
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
		// Initiate the transfer to send the internal address
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002aa14:	e8 19 a0 00 	orl	r9,0xa000
8002aa18:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set next transfer to true
		twim_next = true;
8002aa1a:	ec f9 00 bc 	ld.w	r9,r6[188]
8002aa1e:	30 18       	mov	r8,1
8002aa20:	b2 88       	st.b	r9[0x0],r8
		// Set the number of bytes & address for next transfer
		twim_package = package;
8002aa22:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002aa26:	ec f8 02 04 	ld.w	r8,r6[516]
8002aa2a:	91 09       	st.w	r8[0x0],r9
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8002aa2c:	ec f8 00 40 	ld.w	r8,r6[64]
8002aa30:	70 08       	ld.w	r8,r8[0x0]
8002aa32:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002aa36:	72 09       	ld.w	r9,r9[0x0]
8002aa38:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002aa3c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002aa40:	72 49       	ld.w	r9,r9[0x10]
		twim_next = true;
		// Set the number of bytes & address for next transfer
		twim_package = package;
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002aa42:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002aa44:	f5 e9 10 09 	or	r9,r10,r9
		// set next transfer to true
		twim_next = true;
		// Set the number of bytes & address for next transfer
		twim_package = package;
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8002aa48:	e8 19 e0 00 	orl	r9,0xe000
8002aa4c:	91 49       	st.w	r8[0x10],r9
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// update IMR through IER
		twim_inst->ier = twim_it_mask;
8002aa4e:	ec f8 00 40 	ld.w	r8,r6[64]
8002aa52:	70 08       	ld.w	r8,r8[0x0]
8002aa54:	ec f9 01 04 	ld.w	r9,r6[260]
8002aa58:	72 09       	ld.w	r9,r9[0x0]
8002aa5a:	91 89       	st.w	r8[0x20],r9
		// Enable master transfer
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002aa5c:	ec f8 00 40 	ld.w	r8,r6[64]
8002aa60:	70 08       	ld.w	r8,r8[0x0]
8002aa62:	30 19       	mov	r9,1
8002aa64:	91 09       	st.w	r8[0x0],r9
		// Enable all interrupts
		cpu_irq_enable ();
8002aa66:	d5 03       	csrf	0x10
		// wait until Busy to be false
		while (!(transfer_status) && !(twim_status ())) {
8002aa68:	c0 38       	rjmp	8002aa6e <twim_write_packet+0x11a>
		cpu_relax();
8002aa6a:	fe cf ff fc 	sub	pc,pc,-4
		// Enable master transfer
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
		// Enable all interrupts
		cpu_irq_enable ();
		// wait until Busy to be false
		while (!(transfer_status) && !(twim_status ())) {
8002aa6e:	ec f8 00 78 	ld.w	r8,r6[120]
8002aa72:	70 08       	ld.w	r8,r8[0x0]
8002aa74:	58 08       	cp.w	r8,0
8002aa76:	c3 f1       	brne	8002aaf4 <twim_write_packet+0x1a0>
8002aa78:	f0 16 00 6f 	mcall	r6[444]
8002aa7c:	18 98       	mov	r8,r12
8002aa7e:	58 08       	cp.w	r8,0
8002aa80:	cf 50       	breq	8002aa6a <twim_write_packet+0x116>
8002aa82:	c3 98       	rjmp	8002aaf4 <twim_write_packet+0x1a0>
		cpu_relax();
		}
	} else {
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
8002aa84:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aa88:	70 38       	ld.w	r8,r8[0xc]
8002aa8a:	10 99       	mov	r9,r8
8002aa8c:	ec f8 00 98 	ld.w	r8,r6[152]
8002aa90:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
8002aa92:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aa96:	70 49       	ld.w	r9,r8[0x10]
8002aa98:	ec f8 00 88 	ld.w	r8,r6[136]
8002aa9c:	91 09       	st.w	r8[0x0],r9
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002aa9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aaa2:	70 08       	ld.w	r8,r8[0x0]
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002aaa4:	f0 09 15 01 	lsl	r9,r8,0x1
			| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002aaa8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aaac:	70 48       	ld.w	r8,r8[0x10]
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002aaae:	b1 68       	lsl	r8,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002aab0:	f3 e8 10 08 	or	r8,r9,r8
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002aab4:	10 99       	mov	r9,r8
8002aab6:	e8 19 e0 00 	orl	r9,0xe000
8002aaba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aabe:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_VALID_MASK)
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK) 
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8002aac0:	ec f8 00 40 	ld.w	r8,r6[64]
8002aac4:	70 08       	ld.w	r8,r8[0x0]
8002aac6:	ec f9 01 04 	ld.w	r9,r6[260]
8002aaca:	72 09       	ld.w	r9,r9[0x0]
8002aacc:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002aace:	ec f8 00 40 	ld.w	r8,r6[64]
8002aad2:	70 08       	ld.w	r8,r8[0x0]
8002aad4:	30 19       	mov	r9,1
8002aad6:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8002aad8:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8002aada:	c0 38       	rjmp	8002aae0 <twim_write_packet+0x18c>
		cpu_relax();
8002aadc:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8002aae0:	ec f8 00 78 	ld.w	r8,r6[120]
8002aae4:	70 08       	ld.w	r8,r8[0x0]
8002aae6:	58 08       	cp.w	r8,0
8002aae8:	c0 61       	brne	8002aaf4 <twim_write_packet+0x1a0>
8002aaea:	f0 16 00 6f 	mcall	r6[444]
8002aaee:	18 98       	mov	r8,r12
8002aaf0:	58 08       	cp.w	r8,0
8002aaf2:	cf 50       	breq	8002aadc <twim_write_packet+0x188>
		cpu_relax();
	}}
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002aaf4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aaf8:	30 29       	mov	r9,2
8002aafa:	91 09       	st.w	r8[0x0],r9
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002aafc:	ec f8 00 78 	ld.w	r8,r6[120]
8002ab00:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8002ab02:	5b c8       	cp.w	r8,-4
8002ab04:	c0 60       	breq	8002ab10 <twim_write_packet+0x1bc>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002ab06:	ec f8 00 78 	ld.w	r8,r6[120]
8002ab0a:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8002ab0c:	5b e8       	cp.w	r8,-2
8002ab0e:	c0 31       	brne	8002ab14 <twim_write_packet+0x1c0>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002ab10:	3f f8       	mov	r8,-1
8002ab12:	c0 28       	rjmp	8002ab16 <twim_write_packet+0x1c2>
	}
	return STATUS_OK;
8002ab14:	30 08       	mov	r8,0
}
8002ab16:	10 9c       	mov	r12,r8
8002ab18:	2f ed       	sub	sp,-8
8002ab1a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ab1e:	00 00       	add	r0,r0
8002ab20:	80 02       	ld.sh	r2,r0[0x0]
8002ab22:	a7 e2       	*unknown*

8002ab24 <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
8002ab24:	eb cd 40 c0 	pushm	r6-r7,lr
8002ab28:	1a 97       	mov	r7,sp
8002ab2a:	20 5d       	sub	sp,20
8002ab2c:	4b f6       	lddpc	r6,8002ac28 <twim_write+0x104>
8002ab2e:	1e 26       	rsub	r6,pc
8002ab30:	ef 4c ff fc 	st.w	r7[-4],r12
8002ab34:	ef 4b ff f8 	st.w	r7[-8],r11
8002ab38:	ef 4a ff f4 	st.w	r7[-12],r10
8002ab3c:	ef 49 ff f0 	st.w	r7[-16],r9
8002ab40:	ef 68 ff ec 	st.b	r7[-20],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002ab44:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ab48:	30 19       	mov	r9,1
8002ab4a:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002ab4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ab50:	e0 69 00 80 	mov	r9,128
8002ab54:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002ab56:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ab5a:	30 29       	mov	r9,2
8002ab5c:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002ab5e:	ec f8 00 40 	ld.w	r8,r6[64]
8002ab62:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ab66:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002ab68:	ec f8 00 40 	ld.w	r8,r6[64]
8002ab6c:	70 08       	ld.w	r8,r8[0x0]
8002ab6e:	10 9c       	mov	r12,r8
8002ab70:	f0 16 00 7f 	mcall	r6[508]
	// get a pointer to applicative data
	twim_tx_data = buffer;
8002ab74:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002ab78:	ec f8 00 98 	ld.w	r8,r6[152]
8002ab7c:	91 09       	st.w	r8[0x0],r9
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
8002ab7e:	ec f8 00 88 	ld.w	r8,r6[136]
8002ab82:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002ab86:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
8002ab88:	ec f9 00 bc 	ld.w	r9,r6[188]
8002ab8c:	30 08       	mov	r8,0
8002ab8e:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002ab90:	ec f8 00 78 	ld.w	r8,r6[120]
8002ab94:	30 09       	mov	r9,0
8002ab96:	91 09       	st.w	r8[0x0],r9
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002ab98:	ec f8 00 40 	ld.w	r8,r6[64]
8002ab9c:	70 08       	ld.w	r8,r8[0x0]
8002ab9e:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002aba2:	f2 0a 15 01 	lsl	r10,r9,0x1
			| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002aba6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002abaa:	b1 69       	lsl	r9,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002abac:	12 4a       	or	r10,r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
8002abae:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002abb2:	ab 79       	lsl	r9,0xb
	// Set next transfer to false
	twim_next = false;
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002abb4:	f5 e9 10 09 	or	r9,r10,r9
8002abb8:	e8 19 e0 00 	orl	r9,0xe000
8002abbc:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
8002abbe:	ec f8 01 04 	ld.w	r8,r6[260]
8002abc2:	e0 69 03 02 	mov	r9,770
8002abc6:	91 09       	st.w	r8[0x0],r9
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8002abc8:	ec f8 00 40 	ld.w	r8,r6[64]
8002abcc:	70 08       	ld.w	r8,r8[0x0]
8002abce:	ec f9 01 04 	ld.w	r9,r6[260]
8002abd2:	72 09       	ld.w	r9,r9[0x0]
8002abd4:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002abd6:	ec f8 00 40 	ld.w	r8,r6[64]
8002abda:	70 08       	ld.w	r8,r8[0x0]
8002abdc:	30 19       	mov	r9,1
8002abde:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8002abe0:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8002abe2:	c0 38       	rjmp	8002abe8 <twim_write+0xc4>
		cpu_relax();
8002abe4:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8002abe8:	ec f8 00 78 	ld.w	r8,r6[120]
8002abec:	70 08       	ld.w	r8,r8[0x0]
8002abee:	58 08       	cp.w	r8,0
8002abf0:	c0 61       	brne	8002abfc <twim_write+0xd8>
8002abf2:	f0 16 00 6f 	mcall	r6[444]
8002abf6:	18 98       	mov	r8,r12
8002abf8:	58 08       	cp.w	r8,0
8002abfa:	cf 50       	breq	8002abe4 <twim_write+0xc0>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002abfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac00:	30 29       	mov	r9,2
8002ac02:	91 09       	st.w	r8[0x0],r9
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002ac04:	ec f8 00 78 	ld.w	r8,r6[120]
8002ac08:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
8002ac0a:	5b c8       	cp.w	r8,-4
8002ac0c:	c0 60       	breq	8002ac18 <twim_write+0xf4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002ac0e:	ec f8 00 78 	ld.w	r8,r6[120]
8002ac12:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
8002ac14:	5b e8       	cp.w	r8,-2
8002ac16:	c0 31       	brne	8002ac1c <twim_write+0xf8>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002ac18:	3f f8       	mov	r8,-1
8002ac1a:	c0 28       	rjmp	8002ac1e <twim_write+0xfa>
	}
	return STATUS_OK;
8002ac1c:	30 08       	mov	r8,0
}
8002ac1e:	10 9c       	mov	r12,r8
8002ac20:	2f bd       	sub	sp,-20
8002ac22:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ac26:	00 00       	add	r0,r0
8002ac28:	80 02       	ld.sh	r2,r0[0x0]
8002ac2a:	a9 b2       	sbr	r2,0x9

8002ac2c <twim_chained_transfer>:
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_chained_transfer (volatile avr32_twim_t *twim,
		volatile twim_transfer_t *first,
		volatile twim_transfer_t *second, bool tenbit)
{
8002ac2c:	eb cd 40 c0 	pushm	r6-r7,lr
8002ac30:	1a 97       	mov	r7,sp
8002ac32:	20 4d       	sub	sp,16
8002ac34:	fe f6 03 4c 	ld.w	r6,pc[844]
8002ac38:	1e 26       	rsub	r6,pc
8002ac3a:	ef 4c ff fc 	st.w	r7[-4],r12
8002ac3e:	ef 4b ff f8 	st.w	r7[-8],r11
8002ac42:	ef 4a ff f4 	st.w	r7[-12],r10
8002ac46:	12 98       	mov	r8,r9
8002ac48:	ef 68 ff f0 	st.b	r7[-16],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002ac4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac50:	30 19       	mov	r9,1
8002ac52:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002ac54:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac58:	e0 69 00 80 	mov	r9,128
8002ac5c:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002ac5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac62:	30 29       	mov	r9,2
8002ac64:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002ac66:	ec f8 00 40 	ld.w	r8,r6[64]
8002ac6a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ac6e:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002ac70:	ec f8 00 40 	ld.w	r8,r6[64]
8002ac74:	70 08       	ld.w	r8,r8[0x0]
8002ac76:	10 9c       	mov	r12,r8
8002ac78:	f0 16 00 7f 	mcall	r6[508]
	// Set next transfer to false
	twim_next = false;
8002ac7c:	ec f9 00 bc 	ld.w	r9,r6[188]
8002ac80:	30 08       	mov	r8,0
8002ac82:	b2 88       	st.b	r9[0x0],r8
	transfer_status = TWI_SUCCESS;
8002ac84:	ec f8 00 78 	ld.w	r8,r6[120]
8002ac88:	30 09       	mov	r9,0
8002ac8a:	91 09       	st.w	r8[0x0],r9
	if (tenbit && first->read) {
8002ac8c:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002ac90:	30 08       	mov	r8,0
8002ac92:	f0 09 18 00 	cp.b	r9,r8
8002ac96:	c3 00       	breq	8002acf6 <twim_chained_transfer+0xca>
8002ac98:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ac9c:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002aca0:	5c 58       	castu.b	r8
8002aca2:	c2 a0       	breq	8002acf6 <twim_chained_transfer+0xca>
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (0 << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002aca4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aca8:	70 08       	ld.w	r8,r8[0x0]
	twim_disable_interrupt (twim_inst);
	// Set next transfer to false
	twim_next = false;
	transfer_status = TWI_SUCCESS;
	if (tenbit && first->read) {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002acaa:	a1 78       	lsl	r8,0x1
8002acac:	10 99       	mov	r9,r8
8002acae:	e8 19 a8 00 	orl	r9,0xa800
8002acb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002acb6:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim->ncmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002acb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002acbc:	70 08       	ld.w	r8,r8[0x0]
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim->ncmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002acbe:	f0 09 15 01 	lsl	r9,r8,0x1
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002acc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002acc6:	70 28       	ld.w	r8,r8[0x8]
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim->ncmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002acc8:	b1 68       	lsl	r8,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002acca:	f3 e8 10 08 	or	r8,r9,r8
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim->ncmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002acce:	10 99       	mov	r9,r8
8002acd0:	e8 19 b8 01 	orl	r9,0xb801
8002acd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002acd8:	91 49       	st.w	r8[0x10],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002acda:	c0 38       	rjmp	8002ace0 <twim_chained_transfer+0xb4>
			cpu_relax();
8002acdc:	fe cf ff fc 	sub	pc,pc,-4
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002ace0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ace4:	70 78       	ld.w	r8,r8[0x1c]
8002ace6:	e2 18 00 08 	andl	r8,0x8,COH
8002acea:	cf 90       	breq	8002acdc <twim_chained_transfer+0xb0>
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
8002acec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002acf0:	30 89       	mov	r9,8
8002acf2:	91 b9       	st.w	r8[0x2c],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
	// Set next transfer to false
	twim_next = false;
	transfer_status = TWI_SUCCESS;
	if (tenbit && first->read) {
8002acf4:	c1 c8       	rjmp	8002ad2c <twim_chained_transfer+0x100>
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002acf6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002acfa:	70 08       	ld.w	r8,r8[0x0]
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002acfc:	f0 09 15 01 	lsl	r9,r8,0x1
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002ad00:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad04:	70 28       	ld.w	r8,r8[0x8]
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002ad06:	b1 68       	lsl	r8,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002ad08:	10 49       	or	r9,r8
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
8002ad0a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8002ad0e:	ab 78       	lsl	r8,0xb
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002ad10:	10 49       	or	r9,r8
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
8002ad12:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad16:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002ad1a:	5c 58       	castu.b	r8
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002ad1c:	f3 e8 10 08 	or	r8,r9,r8
8002ad20:	10 99       	mov	r9,r8
8002ad22:	e8 19 a0 00 	orl	r9,0xa000
8002ad26:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad2a:	91 39       	st.w	r8[0xc],r9
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| (second->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002ad2c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ad30:	70 08       	ld.w	r8,r8[0x0]
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002ad32:	f0 09 15 01 	lsl	r9,r8,0x1
			| (second->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002ad36:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ad3a:	70 28       	ld.w	r8,r8[0x8]
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| (second->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002ad3c:	b1 68       	lsl	r8,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002ad3e:	10 49       	or	r9,r8
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
8002ad40:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8002ad44:	ab 78       	lsl	r8,0xb
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002ad46:	f3 e8 10 0a 	or	r10,r9,r8
			| (second->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (((tenbit && second->read) ? 1 : 0) 
8002ad4a:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002ad4e:	30 08       	mov	r8,0
8002ad50:	f0 09 18 00 	cp.b	r9,r8
8002ad54:	c0 90       	breq	8002ad66 <twim_chained_transfer+0x13a>
8002ad56:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ad5a:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002ad5e:	5c 58       	castu.b	r8
8002ad60:	c0 30       	breq	8002ad66 <twim_chained_transfer+0x13a>
8002ad62:	30 18       	mov	r8,1
8002ad64:	c0 28       	rjmp	8002ad68 <twim_chained_transfer+0x13c>
8002ad66:	30 08       	mov	r8,0
8002ad68:	ad 68       	lsl	r8,0xc
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002ad6a:	f5 e8 10 09 	or	r9,r10,r8
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (((tenbit && second->read) ? 1 : 0) 
			<< AVR32_TWIM_CMDR_REPSAME_OFFSET)
			| ((second->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
8002ad6e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ad72:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002ad76:	5c 58       	castu.b	r8
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002ad78:	f3 e8 10 08 	or	r8,r9,r8
8002ad7c:	10 99       	mov	r9,r8
8002ad7e:	e8 19 e0 00 	orl	r9,0xe000
8002ad82:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad86:	91 49       	st.w	r8[0x10],r9
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (((tenbit && second->read) ? 1 : 0) 
			<< AVR32_TWIM_CMDR_REPSAME_OFFSET)
			| ((second->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);

	if (first->read) {
8002ad88:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad8c:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002ad90:	5c 58       	castu.b	r8
8002ad92:	c3 80       	breq	8002ae02 <twim_chained_transfer+0x1d6>
		// get a pointer to applicative data
		twim_rx_data = first->buffer;
8002ad94:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad98:	70 18       	ld.w	r8,r8[0x4]
8002ad9a:	10 99       	mov	r9,r8
8002ad9c:	ec f8 00 c0 	ld.w	r8,r6[192]
8002ada0:	91 09       	st.w	r8[0x0],r9
		// get data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002ada2:	c1 58       	rjmp	8002adcc <twim_chained_transfer+0x1a0>
			if (twim->sr & AVR32_TWIM_SR_RXRDY_MASK) {
8002ada4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ada8:	70 78       	ld.w	r8,r8[0x1c]
8002adaa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002adae:	5c 58       	castu.b	r8
8002adb0:	c0 e0       	breq	8002adcc <twim_chained_transfer+0x1a0>
				*twim_rx_data++ = twim->rhr;
8002adb2:	ec f8 00 c0 	ld.w	r8,r6[192]
8002adb6:	70 08       	ld.w	r8,r8[0x0]
8002adb8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002adbc:	72 59       	ld.w	r9,r9[0x14]
8002adbe:	5c 59       	castu.b	r9
8002adc0:	b0 89       	st.b	r8[0x0],r9
8002adc2:	f0 c9 ff ff 	sub	r9,r8,-1
8002adc6:	ec f8 00 c0 	ld.w	r8,r6[192]
8002adca:	91 09       	st.w	r8[0x0],r9

	if (first->read) {
		// get a pointer to applicative data
		twim_rx_data = first->buffer;
		// get data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002adcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002add0:	70 78       	ld.w	r8,r8[0x1c]
8002add2:	e2 18 00 08 	andl	r8,0x8,COH
8002add6:	ce 70       	breq	8002ada4 <twim_chained_transfer+0x178>
			if (twim->sr & AVR32_TWIM_SR_RXRDY_MASK) {
				*twim_rx_data++ = twim->rhr;
			}
		}
		if (twim->sr & AVR32_TWIM_SR_RXRDY_MASK) {
8002add8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002addc:	70 78       	ld.w	r8,r8[0x1c]
8002adde:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ade2:	5c 58       	castu.b	r8
8002ade4:	c4 40       	breq	8002ae6c <twim_chained_transfer+0x240>
			*twim_rx_data++ = twim->rhr;
8002ade6:	ec f8 00 c0 	ld.w	r8,r6[192]
8002adea:	70 08       	ld.w	r8,r8[0x0]
8002adec:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002adf0:	72 59       	ld.w	r9,r9[0x14]
8002adf2:	5c 59       	castu.b	r9
8002adf4:	b0 89       	st.b	r8[0x0],r9
8002adf6:	f0 c9 ff ff 	sub	r9,r8,-1
8002adfa:	ec f8 00 c0 	ld.w	r8,r6[192]
8002adfe:	91 09       	st.w	r8[0x0],r9
8002ae00:	c3 68       	rjmp	8002ae6c <twim_chained_transfer+0x240>
		}
	} else {
		// get a pointer to applicative data
		twim_tx_data = first->buffer;
8002ae02:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ae06:	70 18       	ld.w	r8,r8[0x4]
8002ae08:	10 99       	mov	r9,r8
8002ae0a:	ec f8 00 98 	ld.w	r8,r6[152]
8002ae0e:	91 09       	st.w	r8[0x0],r9
		twim_tx_nb_bytes = first->length;
8002ae10:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ae14:	70 29       	ld.w	r9,r8[0x8]
8002ae16:	ec f8 00 88 	ld.w	r8,r6[136]
8002ae1a:	91 09       	st.w	r8[0x0],r9
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002ae1c:	c2 28       	rjmp	8002ae60 <twim_chained_transfer+0x234>
			if ((twim_tx_nb_bytes > 0) &&
8002ae1e:	ec f8 00 88 	ld.w	r8,r6[136]
8002ae22:	70 08       	ld.w	r8,r8[0x0]
8002ae24:	58 08       	cp.w	r8,0
8002ae26:	c1 d0       	breq	8002ae60 <twim_chained_transfer+0x234>
					(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)) {
8002ae28:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae2c:	70 78       	ld.w	r8,r8[0x1c]
8002ae2e:	e2 18 00 02 	andl	r8,0x2,COH
		// get a pointer to applicative data
		twim_tx_data = first->buffer;
		twim_tx_nb_bytes = first->length;
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
			if ((twim_tx_nb_bytes > 0) &&
8002ae32:	c1 70       	breq	8002ae60 <twim_chained_transfer+0x234>
					(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)) {
				twim->thr = *twim_tx_data++;
8002ae34:	ec f8 00 98 	ld.w	r8,r6[152]
8002ae38:	70 08       	ld.w	r8,r8[0x0]
8002ae3a:	11 89       	ld.ub	r9,r8[0x0]
8002ae3c:	5c 59       	castu.b	r9
8002ae3e:	12 9a       	mov	r10,r9
8002ae40:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ae44:	93 6a       	st.w	r9[0x18],r10
8002ae46:	f0 c9 ff ff 	sub	r9,r8,-1
8002ae4a:	ec f8 00 98 	ld.w	r8,r6[152]
8002ae4e:	91 09       	st.w	r8[0x0],r9
				twim_tx_nb_bytes--;
8002ae50:	ec f8 00 88 	ld.w	r8,r6[136]
8002ae54:	70 08       	ld.w	r8,r8[0x0]
8002ae56:	f0 c9 00 01 	sub	r9,r8,1
8002ae5a:	ec f8 00 88 	ld.w	r8,r6[136]
8002ae5e:	91 09       	st.w	r8[0x0],r9
	} else {
		// get a pointer to applicative data
		twim_tx_data = first->buffer;
		twim_tx_nb_bytes = first->length;
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002ae60:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae64:	70 78       	ld.w	r8,r8[0x1c]
8002ae66:	e2 18 00 08 	andl	r8,0x8,COH
8002ae6a:	cd a0       	breq	8002ae1e <twim_chained_transfer+0x1f2>
				twim_tx_nb_bytes--;
			}
		}
	}

	twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
8002ae6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae70:	30 89       	mov	r9,8
8002ae72:	91 b9       	st.w	r8[0x2c],r9

	if (second->read) {
8002ae74:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ae78:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002ae7c:	5c 58       	castu.b	r8
8002ae7e:	c2 40       	breq	8002aec6 <twim_chained_transfer+0x29a>
		// get a pointer to applicative data
		twim_rx_data = second->buffer;
8002ae80:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ae84:	70 18       	ld.w	r8,r8[0x4]
8002ae86:	10 99       	mov	r9,r8
8002ae88:	ec f8 00 c0 	ld.w	r8,r6[192]
8002ae8c:	91 09       	st.w	r8[0x0],r9
		// get data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
8002ae8e:	c1 58       	rjmp	8002aeb8 <twim_chained_transfer+0x28c>
			if (twim->sr & AVR32_TWIM_SR_RXRDY_MASK) {
8002ae90:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae94:	70 78       	ld.w	r8,r8[0x1c]
8002ae96:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ae9a:	5c 58       	castu.b	r8
8002ae9c:	c0 e0       	breq	8002aeb8 <twim_chained_transfer+0x28c>
				*twim_rx_data++ = twim->rhr;
8002ae9e:	ec f8 00 c0 	ld.w	r8,r6[192]
8002aea2:	70 08       	ld.w	r8,r8[0x0]
8002aea4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002aea8:	72 59       	ld.w	r9,r9[0x14]
8002aeaa:	5c 59       	castu.b	r9
8002aeac:	b0 89       	st.b	r8[0x0],r9
8002aeae:	f0 c9 ff ff 	sub	r9,r8,-1
8002aeb2:	ec f8 00 c0 	ld.w	r8,r6[192]
8002aeb6:	91 09       	st.w	r8[0x0],r9

	if (second->read) {
		// get a pointer to applicative data
		twim_rx_data = second->buffer;
		// get data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
8002aeb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aebc:	70 78       	ld.w	r8,r8[0x1c]
8002aebe:	e2 18 00 10 	andl	r8,0x10,COH
8002aec2:	ce 70       	breq	8002ae90 <twim_chained_transfer+0x264>
8002aec4:	c3 68       	rjmp	8002af30 <twim_chained_transfer+0x304>
				*twim_rx_data++ = twim->rhr;
			}
		}
	} else {
		// get a pointer to applicative data
		twim_tx_data = second->buffer;
8002aec6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002aeca:	70 18       	ld.w	r8,r8[0x4]
8002aecc:	10 99       	mov	r9,r8
8002aece:	ec f8 00 98 	ld.w	r8,r6[152]
8002aed2:	91 09       	st.w	r8[0x0],r9
		
		twim_tx_nb_bytes = second->length;
8002aed4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002aed8:	70 29       	ld.w	r9,r8[0x8]
8002aeda:	ec f8 00 88 	ld.w	r8,r6[136]
8002aede:	91 09       	st.w	r8[0x0],r9
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
8002aee0:	c2 28       	rjmp	8002af24 <twim_chained_transfer+0x2f8>
			if ((twim_tx_nb_bytes > 0) && 
8002aee2:	ec f8 00 88 	ld.w	r8,r6[136]
8002aee6:	70 08       	ld.w	r8,r8[0x0]
8002aee8:	58 08       	cp.w	r8,0
8002aeea:	c1 d0       	breq	8002af24 <twim_chained_transfer+0x2f8>
					(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)) {
8002aeec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aef0:	70 78       	ld.w	r8,r8[0x1c]
8002aef2:	e2 18 00 02 	andl	r8,0x2,COH
		twim_tx_data = second->buffer;
		
		twim_tx_nb_bytes = second->length;
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
			if ((twim_tx_nb_bytes > 0) && 
8002aef6:	c1 70       	breq	8002af24 <twim_chained_transfer+0x2f8>
					(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)) {
			twim->thr = *twim_tx_data++;
8002aef8:	ec f8 00 98 	ld.w	r8,r6[152]
8002aefc:	70 08       	ld.w	r8,r8[0x0]
8002aefe:	11 89       	ld.ub	r9,r8[0x0]
8002af00:	5c 59       	castu.b	r9
8002af02:	12 9a       	mov	r10,r9
8002af04:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002af08:	93 6a       	st.w	r9[0x18],r10
8002af0a:	f0 c9 ff ff 	sub	r9,r8,-1
8002af0e:	ec f8 00 98 	ld.w	r8,r6[152]
8002af12:	91 09       	st.w	r8[0x0],r9
			twim_tx_nb_bytes--;
8002af14:	ec f8 00 88 	ld.w	r8,r6[136]
8002af18:	70 08       	ld.w	r8,r8[0x0]
8002af1a:	f0 c9 00 01 	sub	r9,r8,1
8002af1e:	ec f8 00 88 	ld.w	r8,r6[136]
8002af22:	91 09       	st.w	r8[0x0],r9
		// get a pointer to applicative data
		twim_tx_data = second->buffer;
		
		twim_tx_nb_bytes = second->length;
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
8002af24:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af28:	70 78       	ld.w	r8,r8[0x1c]
8002af2a:	e2 18 00 10 	andl	r8,0x10,COH
8002af2e:	cd a0       	breq	8002aee2 <twim_chained_transfer+0x2b6>
			twim_tx_nb_bytes--;
			}
		}
	}

	if (twim->sr & AVR32_TWIM_SR_ARBLST_MASK) {
8002af30:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af34:	70 78       	ld.w	r8,r8[0x1c]
8002af36:	e2 18 04 00 	andl	r8,0x400,COH
8002af3a:	c0 80       	breq	8002af4a <twim_chained_transfer+0x31e>
		twim->scr = AVR32_TWIM_SCR_ARBLST_MASK;
8002af3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af40:	e0 69 04 00 	mov	r9,1024
8002af44:	91 b9       	st.w	r8[0x2c],r9
		return ERR_IO_ERROR;
8002af46:	3f f8       	mov	r8,-1
8002af48:	c1 88       	rjmp	8002af78 <twim_chained_transfer+0x34c>
	}

	if (twim->sr & AVR32_TWIM_SR_NAK_MASK) {
8002af4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af4e:	70 78       	ld.w	r8,r8[0x1c]
8002af50:	e2 18 03 00 	andl	r8,0x300,COH
8002af54:	c1 10       	breq	8002af76 <twim_chained_transfer+0x34a>
		twim->cmdr = twim->cmdr ^ AVR32_TWIM_CMDR_VALID_MASK;
8002af56:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af5a:	70 38       	ld.w	r8,r8[0xc]
8002af5c:	10 99       	mov	r9,r8
8002af5e:	ec 19 80 00 	eorl	r9,0x8000
8002af62:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af66:	91 39       	st.w	r8[0xc],r9
		twim->scr = AVR32_TWIM_SCR_NAK_MASK;
8002af68:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af6c:	e0 69 03 00 	mov	r9,768
8002af70:	91 b9       	st.w	r8[0x2c],r9
		return ERR_IO_ERROR;
8002af72:	3f f8       	mov	r8,-1
8002af74:	c0 28       	rjmp	8002af78 <twim_chained_transfer+0x34c>
	}
	return STATUS_OK;
8002af76:	30 08       	mov	r8,0
}
8002af78:	10 9c       	mov	r12,r8
8002af7a:	2f cd       	sub	sp,-16
8002af7c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002af80:	80 02       	ld.sh	r2,r0[0x0]
8002af82:	aa bc       	st.b	r5[0x3],r12

8002af84 <twim_status>:

/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
8002af84:	eb cd 40 c0 	pushm	r6-r7,lr
8002af88:	1a 97       	mov	r7,sp
8002af8a:	20 1d       	sub	sp,4
8002af8c:	48 a6       	lddpc	r6,8002afb4 <twim_status+0x30>
8002af8e:	1e 26       	rsub	r6,pc
	uint32_t status = twim_inst->sr;
8002af90:	ec f8 00 40 	ld.w	r8,r6[64]
8002af94:	70 08       	ld.w	r8,r8[0x0]
8002af96:	70 78       	ld.w	r8,r8[0x1c]
8002af98:	ef 48 ff fc 	st.w	r7[-4],r8
	if ((status & AVR32_TWIM_SR_IDLE_MASK)
8002af9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002afa0:	e2 18 00 10 	andl	r8,0x10,COH
8002afa4:	c0 30       	breq	8002afaa <twim_status+0x26>
#if AVR32_TWIM_H_VERSION > 101 ||(status&AVR32_TWIM_SR_BUSFREE_MASK)
#endif 
		) {
		return 1;
8002afa6:	30 18       	mov	r8,1
8002afa8:	c0 28       	rjmp	8002afac <twim_status+0x28>
	} else {
		return 0;
8002afaa:	30 08       	mov	r8,0
	}
}
8002afac:	10 9c       	mov	r12,r8
8002afae:	2f fd       	sub	sp,-4
8002afb0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002afb4:	80 02       	ld.sh	r2,r0[0x0]
8002afb6:	ae 12       	st.h	r7[0x2],r2

8002afb8 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
8002afb8:	eb cd 40 80 	pushm	r7,lr
8002afbc:	1a 97       	mov	r7,sp
8002afbe:	20 1d       	sub	sp,4
8002afc0:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8002afc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002afc8:	e6 18 00 01 	andh	r8,0x1,COH
8002afcc:	5f 08       	sreq	r8
8002afce:	5c 58       	castu.b	r8
}
8002afd0:	10 9c       	mov	r12,r8
8002afd2:	2f fd       	sub	sp,-4
8002afd4:	e3 cd 80 80 	ldm	sp++,r7,pc

8002afd8 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
8002afd8:	eb cd 40 80 	pushm	r7,lr
8002afdc:	1a 97       	mov	r7,sp
8002afde:	20 7d       	sub	sp,28
8002afe0:	ef 4c ff ec 	st.w	r7[-20],r12
8002afe4:	ef 4b ff e8 	st.w	r7[-24],r11
8002afe8:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
8002afec:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002aff0:	f0 09 15 04 	lsl	r9,r8,0x4
8002aff4:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002aff8:	10 39       	cp.w	r9,r8
8002affa:	e0 8b 00 04 	brhi	8002b002 <usart_set_async_baudrate+0x2a>
8002affe:	31 08       	mov	r8,16
8002b000:	c0 28       	rjmp	8002b004 <usart_set_async_baudrate+0x2c>
8002b002:	30 88       	mov	r8,8
8002b004:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
8002b008:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002b00c:	f0 09 15 03 	lsl	r9,r8,0x3
8002b010:	ee fa ff f0 	ld.w	r10,r7[-16]
8002b014:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002b018:	f4 08 02 48 	mul	r8,r10,r8
8002b01c:	a1 98       	lsr	r8,0x1
8002b01e:	f2 08 00 08 	add	r8,r9,r8
8002b022:	ee fa ff f0 	ld.w	r10,r7[-16]
8002b026:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002b02a:	f4 09 02 49 	mul	r9,r10,r9
8002b02e:	f0 09 0d 08 	divu	r8,r8,r9
8002b032:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
8002b036:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b03a:	a3 98       	lsr	r8,0x3
8002b03c:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
8002b040:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b044:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8002b048:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8002b04c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b050:	58 08       	cp.w	r8,0
8002b052:	c0 70       	breq	8002b060 <usart_set_async_baudrate+0x88>
8002b054:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b058:	e0 48 ff ff 	cp.w	r8,65535
8002b05c:	e0 88 00 04 	brls	8002b064 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
8002b060:	30 18       	mov	r8,1
8002b062:	c2 08       	rjmp	8002b0a2 <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
8002b064:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002b068:	70 18       	ld.w	r8,r8[0x4]
8002b06a:	10 99       	mov	r9,r8
8002b06c:	e4 19 ff f7 	andh	r9,0xfff7
8002b070:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
8002b074:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b078:	59 08       	cp.w	r8,16
8002b07a:	c0 40       	breq	8002b082 <usart_set_async_baudrate+0xaa>
8002b07c:	e8 68 00 00 	mov	r8,524288
8002b080:	c0 28       	rjmp	8002b084 <usart_set_async_baudrate+0xac>
8002b082:	30 08       	mov	r8,0
8002b084:	10 49       	or	r9,r8
8002b086:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002b08a:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
8002b08c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b090:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
8002b094:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b098:	10 49       	or	r9,r8
8002b09a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002b09e:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
8002b0a0:	30 08       	mov	r8,0
}
8002b0a2:	10 9c       	mov	r12,r8
8002b0a4:	2f 9d       	sub	sp,-28
8002b0a6:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b0aa <usart_set_sync_master_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_sync_master_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
8002b0aa:	eb cd 40 80 	pushm	r7,lr
8002b0ae:	1a 97       	mov	r7,sp
8002b0b0:	20 4d       	sub	sp,16
8002b0b2:	ef 4c ff f8 	st.w	r7[-8],r12
8002b0b6:	ef 4b ff f4 	st.w	r7[-12],r11
8002b0ba:	ef 4a ff f0 	st.w	r7[-16],r10
  unsigned int cd = (pba_hz + baudrate / 2) / baudrate;
8002b0be:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b0c2:	f0 09 16 01 	lsr	r9,r8,0x1
8002b0c6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b0ca:	f2 08 00 08 	add	r8,r9,r8
8002b0ce:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b0d2:	f0 09 0d 08 	divu	r8,r8,r9
8002b0d6:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8002b0da:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b0de:	58 08       	cp.w	r8,0
8002b0e0:	c0 70       	breq	8002b0ee <usart_set_sync_master_baudrate+0x44>
8002b0e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b0e6:	e0 48 ff ff 	cp.w	r8,65535
8002b0ea:	e0 88 00 04 	brls	8002b0f2 <usart_set_sync_master_baudrate+0x48>
    return USART_INVALID_INPUT;
8002b0ee:	30 18       	mov	r8,1
8002b0f0:	c1 18       	rjmp	8002b112 <usart_set_sync_master_baudrate+0x68>

  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
8002b0f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b0f6:	70 18       	ld.w	r8,r8[0x4]
8002b0f8:	e0 18 fe cf 	andl	r8,0xfecf
8002b0fc:	10 99       	mov	r9,r8
8002b0fe:	a9 a9       	sbr	r9,0x8
8002b100:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b104:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              AVR32_USART_MR_SYNC_MASK;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET;
8002b106:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b10a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002b10e:	91 89       	st.w	r8[0x20],r9

  return USART_SUCCESS;
8002b110:	30 08       	mov	r8,0
}
8002b112:	10 9c       	mov	r12,r8
8002b114:	2f cd       	sub	sp,-16
8002b116:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b11a <usart_set_sync_slave_baudrate>:
 * \param usart Base address of the USART instance.
 *
 * \retval USART_SUCCESS  Baud rate successfully initialized.
 */
static int usart_set_sync_slave_baudrate(volatile avr32_usart_t *usart)
{
8002b11a:	eb cd 40 80 	pushm	r7,lr
8002b11e:	1a 97       	mov	r7,sp
8002b120:	20 1d       	sub	sp,4
8002b122:	ef 4c ff fc 	st.w	r7[-4],r12
  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
8002b126:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b12a:	70 18       	ld.w	r8,r8[0x4]
8002b12c:	10 99       	mov	r9,r8
8002b12e:	e8 19 01 30 	orl	r9,0x130
8002b132:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b136:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_USCLKS_SCK << AVR32_USART_MR_USCLKS_OFFSET |
              AVR32_USART_MR_SYNC_MASK;

  return USART_SUCCESS;
8002b138:	30 08       	mov	r8,0
}
8002b13a:	10 9c       	mov	r12,r8
8002b13c:	2f fd       	sub	sp,-4
8002b13e:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b142 <usart_set_iso7816_clock>:
 *
 * \retval USART_SUCCESS        ISO7816 clock successfully initialized.
 * \retval USART_INVALID_INPUT  ISO7816 clock set point is out of range for the given input clock frequency.
 */
static int usart_set_iso7816_clock(volatile avr32_usart_t *usart, unsigned int clock, unsigned long pba_hz)
{
8002b142:	eb cd 40 80 	pushm	r7,lr
8002b146:	1a 97       	mov	r7,sp
8002b148:	20 4d       	sub	sp,16
8002b14a:	ef 4c ff f8 	st.w	r7[-8],r12
8002b14e:	ef 4b ff f4 	st.w	r7[-12],r11
8002b152:	ef 4a ff f0 	st.w	r7[-16],r10
  unsigned int cd = (pba_hz + clock / 2) / clock;
8002b156:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b15a:	f0 09 16 01 	lsr	r9,r8,0x1
8002b15e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b162:	f2 08 00 08 	add	r8,r9,r8
8002b166:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b16a:	f0 09 0d 08 	divu	r8,r8,r9
8002b16e:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8002b172:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b176:	58 08       	cp.w	r8,0
8002b178:	c0 70       	breq	8002b186 <usart_set_iso7816_clock+0x44>
8002b17a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b17e:	e0 48 ff ff 	cp.w	r8,65535
8002b182:	e0 88 00 04 	brls	8002b18a <usart_set_iso7816_clock+0x48>
    return USART_INVALID_INPUT;
8002b186:	30 18       	mov	r8,1
8002b188:	c1 28       	rjmp	8002b1ac <usart_set_iso7816_clock+0x6a>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
8002b18a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b18e:	70 18       	ld.w	r8,r8[0x4]
8002b190:	10 99       	mov	r9,r8
8002b192:	e4 19 ff f7 	andh	r9,0xfff7
8002b196:	e0 19 fe cf 	andl	r9,0xfecf
8002b19a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b19e:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              AVR32_USART_MR_OVER_X16 << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET;
8002b1a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b1a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002b1a8:	91 89       	st.w	r8[0x20],r9

  return USART_SUCCESS;
8002b1aa:	30 08       	mov	r8,0
}
8002b1ac:	10 9c       	mov	r12,r8
8002b1ae:	2f cd       	sub	sp,-16
8002b1b0:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b1b4 <usart_set_spi_master_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_spi_master_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
8002b1b4:	eb cd 40 80 	pushm	r7,lr
8002b1b8:	1a 97       	mov	r7,sp
8002b1ba:	20 4d       	sub	sp,16
8002b1bc:	ef 4c ff f8 	st.w	r7[-8],r12
8002b1c0:	ef 4b ff f4 	st.w	r7[-12],r11
8002b1c4:	ef 4a ff f0 	st.w	r7[-16],r10
  unsigned int cd = (pba_hz + baudrate / 2) / baudrate;
8002b1c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b1cc:	f0 09 16 01 	lsr	r9,r8,0x1
8002b1d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b1d4:	f2 08 00 08 	add	r8,r9,r8
8002b1d8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b1dc:	f0 09 0d 08 	divu	r8,r8,r9
8002b1e0:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 4 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8002b1e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b1e8:	58 38       	cp.w	r8,3
8002b1ea:	e0 88 00 08 	brls	8002b1fa <usart_set_spi_master_baudrate+0x46>
8002b1ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b1f2:	e0 48 ff ff 	cp.w	r8,65535
8002b1f6:	e0 88 00 04 	brls	8002b1fe <usart_set_spi_master_baudrate+0x4a>
    return USART_INVALID_INPUT;
8002b1fa:	30 18       	mov	r8,1
8002b1fc:	c1 08       	rjmp	8002b21c <usart_set_spi_master_baudrate+0x68>

  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
8002b1fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b202:	70 18       	ld.w	r8,r8[0x4]
8002b204:	10 99       	mov	r9,r8
8002b206:	e0 19 ff cf 	andl	r9,0xffcf
8002b20a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b20e:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET;
8002b210:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b214:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002b218:	91 89       	st.w	r8[0x20],r9

  return USART_SUCCESS;
8002b21a:	30 08       	mov	r8,0
}
8002b21c:	10 9c       	mov	r12,r8
8002b21e:	2f cd       	sub	sp,-16
8002b220:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b224 <usart_set_spi_slave_baudrate>:
 * \param usart Base address of the USART instance.
 *
 * \retval USART_SUCCESS  Baud rate successfully initialized.
 */
static int usart_set_spi_slave_baudrate(volatile avr32_usart_t *usart)
{
8002b224:	eb cd 40 80 	pushm	r7,lr
8002b228:	1a 97       	mov	r7,sp
8002b22a:	20 1d       	sub	sp,4
8002b22c:	ef 4c ff fc 	st.w	r7[-4],r12
  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
8002b230:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b234:	70 18       	ld.w	r8,r8[0x4]
8002b236:	10 99       	mov	r9,r8
8002b238:	e8 19 00 30 	orl	r9,0x30
8002b23c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b240:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_USCLKS_SCK << AVR32_USART_MR_USCLKS_OFFSET;

  return USART_SUCCESS;
8002b242:	30 08       	mov	r8,0
}
8002b244:	10 9c       	mov	r12,r8
8002b246:	2f fd       	sub	sp,-4
8002b248:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b24c <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
8002b24c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b250:	1a 97       	mov	r7,sp
8002b252:	20 2d       	sub	sp,8
8002b254:	49 a6       	lddpc	r6,8002b2bc <usart_reset+0x70>
8002b256:	1e 26       	rsub	r6,pc
8002b258:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
8002b25c:	e1 b8 00 00 	mfsr	r8,0x0
8002b260:	10 9c       	mov	r12,r8
8002b262:	ca be       	rcall	8002afb8 <cpu_irq_is_enabled_flags>
8002b264:	18 98       	mov	r8,r12
8002b266:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
8002b26a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002b26e:	30 08       	mov	r8,0
8002b270:	f0 09 18 00 	cp.b	r9,r8
8002b274:	c0 20       	breq	8002b278 <usart_reset+0x2c>
8002b276:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
8002b278:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b27c:	3f f9       	mov	r9,-1
8002b27e:	91 39       	st.w	r8[0xc],r9
  usart->csr;
8002b280:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b284:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
8002b286:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002b28a:	30 08       	mov	r8,0
8002b28c:	f0 09 18 00 	cp.b	r9,r8
8002b290:	c0 20       	breq	8002b294 <usart_reset+0x48>
8002b292:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
8002b294:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b298:	30 09       	mov	r9,0
8002b29a:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
8002b29c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b2a0:	30 09       	mov	r9,0
8002b2a2:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
8002b2a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b2a8:	30 09       	mov	r9,0
8002b2aa:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
8002b2ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b2b0:	ea 69 61 0c 	mov	r9,680204
8002b2b4:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
8002b2b6:	2f ed       	sub	sp,-8
8002b2b8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b2bc:	80 02       	ld.sh	r2,r0[0x0]
8002b2be:	b0 da       	st.b	r8[0x5],r10

8002b2c0 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b2c0:	eb cd 40 c0 	pushm	r6-r7,lr
8002b2c4:	1a 97       	mov	r7,sp
8002b2c6:	20 3d       	sub	sp,12
8002b2c8:	4d 86       	lddpc	r6,8002b428 <usart_init_rs232+0x168>
8002b2ca:	1e 26       	rsub	r6,pc
8002b2cc:	ef 4c ff fc 	st.w	r7[-4],r12
8002b2d0:	ef 4b ff f8 	st.w	r7[-8],r11
8002b2d4:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b2d8:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b2dc:	f0 16 00 4c 	mcall	r6[304]

  // Check input values.
  if (!opt || // Null pointer.
8002b2e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b2e4:	58 08       	cp.w	r8,0
8002b2e6:	c3 80       	breq	8002b356 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b2e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b2ec:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b2ee:	30 48       	mov	r8,4
8002b2f0:	f0 09 18 00 	cp.b	r9,r8
8002b2f4:	e0 88 00 31 	brls	8002b356 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b2f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b2fc:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b2fe:	30 98       	mov	r8,9
8002b300:	f0 09 18 00 	cp.b	r9,r8
8002b304:	e0 8b 00 29 	brhi	8002b356 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8002b308:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b30c:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b30e:	30 78       	mov	r8,7
8002b310:	f0 09 18 00 	cp.b	r9,r8
8002b314:	e0 8b 00 21 	brhi	8002b356 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
8002b318:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b31c:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b31e:	e0 68 01 01 	mov	r8,257
8002b322:	f0 09 19 00 	cp.h	r9,r8
8002b326:	e0 8b 00 18 	brhi	8002b356 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8002b32a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b32e:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b332:	30 38       	mov	r8,3
8002b334:	f0 09 18 00 	cp.b	r9,r8
8002b338:	e0 8b 00 0f 	brhi	8002b356 <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8002b33c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b340:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b344:	70 08       	ld.w	r8,r8[0x0]
8002b346:	12 9a       	mov	r10,r9
8002b348:	10 9b       	mov	r11,r8
8002b34a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b34e:	c4 5e       	rcall	8002afd8 <usart_set_async_baudrate>
8002b350:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b352:	58 18       	cp.w	r8,1
8002b354:	c0 31       	brne	8002b35a <usart_init_rs232+0x9a>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002b356:	30 18       	mov	r8,1
8002b358:	c6 48       	rjmp	8002b420 <usart_init_rs232+0x160>

  if (opt->charlength == 9)
8002b35a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b35e:	11 c9       	ld.ub	r9,r8[0x4]
8002b360:	30 98       	mov	r8,9
8002b362:	f0 09 18 00 	cp.b	r9,r8
8002b366:	c0 a1       	brne	8002b37a <usart_init_rs232+0xba>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002b368:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b36c:	70 18       	ld.w	r8,r8[0x4]
8002b36e:	10 99       	mov	r9,r8
8002b370:	b1 b9       	sbr	r9,0x11
8002b372:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b376:	91 19       	st.w	r8[0x4],r9
8002b378:	c0 d8       	rjmp	8002b392 <usart_init_rs232+0xd2>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002b37a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b37e:	70 19       	ld.w	r9,r8[0x4]
8002b380:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b384:	11 c8       	ld.ub	r8,r8[0x4]
8002b386:	20 58       	sub	r8,5
8002b388:	a7 68       	lsl	r8,0x6
8002b38a:	10 49       	or	r9,r8
8002b38c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b390:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b392:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b396:	70 19       	ld.w	r9,r8[0x4]
8002b398:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b39c:	11 d8       	ld.ub	r8,r8[0x5]
8002b39e:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8002b3a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b3a6:	f1 38 00 08 	ld.ub	r8,r8[8]
8002b3aa:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b3ac:	f5 e8 10 08 	or	r8,r10,r8
8002b3b0:	10 49       	or	r9,r8
8002b3b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b3b6:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8002b3b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b3bc:	90 39       	ld.sh	r9,r8[0x6]
8002b3be:	30 28       	mov	r8,2
8002b3c0:	f0 09 19 00 	cp.h	r9,r8
8002b3c4:	e0 88 00 14 	brls	8002b3ec <usart_init_rs232+0x12c>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8002b3c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b3cc:	70 18       	ld.w	r8,r8[0x4]
8002b3ce:	10 99       	mov	r9,r8
8002b3d0:	ad b9       	sbr	r9,0xd
8002b3d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b3d6:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8002b3d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b3dc:	90 38       	ld.sh	r8,r8[0x6]
8002b3de:	5c 78       	castu.h	r8
8002b3e0:	20 28       	sub	r8,2
8002b3e2:	10 99       	mov	r9,r8
8002b3e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b3e8:	91 a9       	st.w	r8[0x28],r9
8002b3ea:	c0 d8       	rjmp	8002b404 <usart_init_rs232+0x144>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8002b3ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b3f0:	70 19       	ld.w	r9,r8[0x4]
8002b3f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b3f6:	90 38       	ld.sh	r8,r8[0x6]
8002b3f8:	5c 78       	castu.h	r8
8002b3fa:	ad 68       	lsl	r8,0xc
8002b3fc:	10 49       	or	r9,r8
8002b3fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b402:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b404:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b408:	70 18       	ld.w	r8,r8[0x4]
8002b40a:	10 99       	mov	r9,r8
8002b40c:	e0 19 ff f0 	andl	r9,0xfff0
8002b410:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b414:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b416:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b41a:	35 09       	mov	r9,80
8002b41c:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b41e:	30 08       	mov	r8,0
}
8002b420:	10 9c       	mov	r12,r8
8002b422:	2f dd       	sub	sp,-12
8002b424:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b428:	80 02       	ld.sh	r2,r0[0x0]
8002b42a:	b1 4e       	asr	lr,0x10

8002b42c <usart_init_rs232_tx_only>:


int usart_init_rs232_tx_only(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b42c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b430:	1a 97       	mov	r7,sp
8002b432:	20 3d       	sub	sp,12
8002b434:	4d c6       	lddpc	r6,8002b5a4 <usart_init_rs232_tx_only+0x178>
8002b436:	1e 26       	rsub	r6,pc
8002b438:	ef 4c ff fc 	st.w	r7[-4],r12
8002b43c:	ef 4b ff f8 	st.w	r7[-8],r11
8002b440:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b444:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b448:	f0 16 00 4c 	mcall	r6[304]

  // Check input values.
  if (!opt || // Null pointer.
8002b44c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b450:	58 08       	cp.w	r8,0
8002b452:	c4 00       	breq	8002b4d2 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b454:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b458:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b45a:	30 48       	mov	r8,4
8002b45c:	f0 09 18 00 	cp.b	r9,r8
8002b460:	e0 88 00 39 	brls	8002b4d2 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b464:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b468:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b46a:	30 98       	mov	r8,9
8002b46c:	f0 09 18 00 	cp.b	r9,r8
8002b470:	e0 8b 00 31 	brhi	8002b4d2 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8002b474:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b478:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b47a:	30 78       	mov	r8,7
8002b47c:	f0 09 18 00 	cp.b	r9,r8
8002b480:	e0 8b 00 29 	brhi	8002b4d2 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002b484:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b488:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b48a:	30 18       	mov	r8,1
8002b48c:	f0 09 19 00 	cp.h	r9,r8
8002b490:	c2 10       	breq	8002b4d2 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002b492:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b496:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b498:	e0 68 01 01 	mov	r8,257
8002b49c:	f0 09 19 00 	cp.h	r9,r8
8002b4a0:	e0 8b 00 19 	brhi	8002b4d2 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8002b4a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b4a8:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b4ac:	30 38       	mov	r8,3
8002b4ae:	f0 09 18 00 	cp.b	r9,r8
8002b4b2:	e0 8b 00 10 	brhi	8002b4d2 <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8002b4b6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b4ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b4be:	70 08       	ld.w	r8,r8[0x0]
8002b4c0:	12 9a       	mov	r10,r9
8002b4c2:	10 9b       	mov	r11,r8
8002b4c4:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b4c8:	fe b0 fd f1 	rcall	8002b0aa <usart_set_sync_master_baudrate>
8002b4cc:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b4ce:	58 18       	cp.w	r8,1
8002b4d0:	c0 31       	brne	8002b4d6 <usart_init_rs232_tx_only+0xaa>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002b4d2:	30 18       	mov	r8,1
8002b4d4:	c6 48       	rjmp	8002b59c <usart_init_rs232_tx_only+0x170>

  if (opt->charlength == 9)
8002b4d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b4da:	11 c9       	ld.ub	r9,r8[0x4]
8002b4dc:	30 98       	mov	r8,9
8002b4de:	f0 09 18 00 	cp.b	r9,r8
8002b4e2:	c0 a1       	brne	8002b4f6 <usart_init_rs232_tx_only+0xca>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002b4e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4e8:	70 18       	ld.w	r8,r8[0x4]
8002b4ea:	10 99       	mov	r9,r8
8002b4ec:	b1 b9       	sbr	r9,0x11
8002b4ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4f2:	91 19       	st.w	r8[0x4],r9
8002b4f4:	c0 d8       	rjmp	8002b50e <usart_init_rs232_tx_only+0xe2>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002b4f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4fa:	70 19       	ld.w	r9,r8[0x4]
8002b4fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b500:	11 c8       	ld.ub	r8,r8[0x4]
8002b502:	20 58       	sub	r8,5
8002b504:	a7 68       	lsl	r8,0x6
8002b506:	10 49       	or	r9,r8
8002b508:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b50c:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b50e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b512:	70 19       	ld.w	r9,r8[0x4]
8002b514:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b518:	11 d8       	ld.ub	r8,r8[0x5]
8002b51a:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8002b51e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b522:	f1 38 00 08 	ld.ub	r8,r8[8]
8002b526:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b528:	f5 e8 10 08 	or	r8,r10,r8
8002b52c:	10 49       	or	r9,r8
8002b52e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b532:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8002b534:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b538:	90 39       	ld.sh	r9,r8[0x6]
8002b53a:	30 28       	mov	r8,2
8002b53c:	f0 09 19 00 	cp.h	r9,r8
8002b540:	e0 88 00 14 	brls	8002b568 <usart_init_rs232_tx_only+0x13c>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8002b544:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b548:	70 18       	ld.w	r8,r8[0x4]
8002b54a:	10 99       	mov	r9,r8
8002b54c:	ad b9       	sbr	r9,0xd
8002b54e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b552:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8002b554:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b558:	90 38       	ld.sh	r8,r8[0x6]
8002b55a:	5c 78       	castu.h	r8
8002b55c:	20 28       	sub	r8,2
8002b55e:	10 99       	mov	r9,r8
8002b560:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b564:	91 a9       	st.w	r8[0x28],r9
8002b566:	c0 d8       	rjmp	8002b580 <usart_init_rs232_tx_only+0x154>
  }
  else
    // Insert 1 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8002b568:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b56c:	70 19       	ld.w	r9,r8[0x4]
8002b56e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b572:	90 38       	ld.sh	r8,r8[0x6]
8002b574:	5c 78       	castu.h	r8
8002b576:	ad 68       	lsl	r8,0xc
8002b578:	10 49       	or	r9,r8
8002b57a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b57e:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b580:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b584:	70 18       	ld.w	r8,r8[0x4]
8002b586:	10 99       	mov	r9,r8
8002b588:	e0 19 ff f0 	andl	r9,0xfff0
8002b58c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b590:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable only output as input is not possible in synchronous mode without
  // transferring clock.
  usart->cr = AVR32_USART_CR_TXEN_MASK;
8002b592:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b596:	34 09       	mov	r9,64
8002b598:	91 09       	st.w	r8[0x0],r9

  return USART_SUCCESS;
8002b59a:	30 08       	mov	r8,0
}
8002b59c:	10 9c       	mov	r12,r8
8002b59e:	2f dd       	sub	sp,-12
8002b5a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b5a4:	80 02       	ld.sh	r2,r0[0x0]
8002b5a6:	b2 ba       	st.b	r9[0x3],r10

8002b5a8 <usart_init_hw_handshaking>:


int usart_init_hw_handshaking(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b5a8:	eb cd 40 c0 	pushm	r6-r7,lr
8002b5ac:	1a 97       	mov	r7,sp
8002b5ae:	20 3d       	sub	sp,12
8002b5b0:	49 26       	lddpc	r6,8002b5f8 <usart_init_hw_handshaking+0x50>
8002b5b2:	1e 26       	rsub	r6,pc
8002b5b4:	ef 4c ff fc 	st.w	r7[-4],r12
8002b5b8:	ef 4b ff f8 	st.w	r7[-8],r11
8002b5bc:	ef 4a ff f4 	st.w	r7[-12],r10
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
8002b5c0:	ee fa ff f4 	ld.w	r10,r7[-12]
8002b5c4:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b5c8:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b5cc:	f0 16 00 68 	mcall	r6[416]
8002b5d0:	18 98       	mov	r8,r12
8002b5d2:	58 18       	cp.w	r8,1
8002b5d4:	c0 31       	brne	8002b5da <usart_init_hw_handshaking+0x32>
    return USART_INVALID_INPUT;
8002b5d6:	30 18       	mov	r8,1
8002b5d8:	c0 c8       	rjmp	8002b5f0 <usart_init_hw_handshaking+0x48>

  // Set hardware handshaking mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b5da:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b5de:	70 18       	ld.w	r8,r8[0x4]
8002b5e0:	e0 18 ff f0 	andl	r8,0xfff0
8002b5e4:	10 99       	mov	r9,r8
8002b5e6:	a1 b9       	sbr	r9,0x1
8002b5e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b5ec:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_HARDWARE << AVR32_USART_MR_MODE_OFFSET;

  return USART_SUCCESS;
8002b5ee:	30 08       	mov	r8,0
}
8002b5f0:	10 9c       	mov	r12,r8
8002b5f2:	2f dd       	sub	sp,-12
8002b5f4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b5f8:	80 02       	ld.sh	r2,r0[0x0]
8002b5fa:	b4 36       	st.h	r10[0x6],r6

8002b5fc <usart_init_modem>:


int usart_init_modem(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b5fc:	eb cd 40 c0 	pushm	r6-r7,lr
8002b600:	1a 97       	mov	r7,sp
8002b602:	20 3d       	sub	sp,12
8002b604:	49 36       	lddpc	r6,8002b650 <usart_init_modem+0x54>
8002b606:	1e 26       	rsub	r6,pc
8002b608:	ef 4c ff fc 	st.w	r7[-4],r12
8002b60c:	ef 4b ff f8 	st.w	r7[-8],r11
8002b610:	ef 4a ff f4 	st.w	r7[-12],r10
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
8002b614:	ee fa ff f4 	ld.w	r10,r7[-12]
8002b618:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b61c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b620:	f0 16 00 68 	mcall	r6[416]
8002b624:	18 98       	mov	r8,r12
8002b626:	58 18       	cp.w	r8,1
8002b628:	c0 31       	brne	8002b62e <usart_init_modem+0x32>
    return USART_INVALID_INPUT;
8002b62a:	30 18       	mov	r8,1
8002b62c:	c0 d8       	rjmp	8002b646 <usart_init_modem+0x4a>

  // Set modem mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b62e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b632:	70 18       	ld.w	r8,r8[0x4]
8002b634:	e0 18 ff f0 	andl	r8,0xfff0
8002b638:	10 99       	mov	r9,r8
8002b63a:	e8 19 00 03 	orl	r9,0x3
8002b63e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b642:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_MODEM << AVR32_USART_MR_MODE_OFFSET;

  return USART_SUCCESS;
8002b644:	30 08       	mov	r8,0
}
8002b646:	10 9c       	mov	r12,r8
8002b648:	2f dd       	sub	sp,-12
8002b64a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b64e:	00 00       	add	r0,r0
8002b650:	80 02       	ld.sh	r2,r0[0x0]
8002b652:	b4 8a       	st.b	r10[0x0],r10

8002b654 <usart_init_sync_master>:


int usart_init_sync_master(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b654:	eb cd 40 c0 	pushm	r6-r7,lr
8002b658:	1a 97       	mov	r7,sp
8002b65a:	20 3d       	sub	sp,12
8002b65c:	4d e6       	lddpc	r6,8002b7d4 <usart_init_sync_master+0x180>
8002b65e:	1e 26       	rsub	r6,pc
8002b660:	ef 4c ff fc 	st.w	r7[-4],r12
8002b664:	ef 4b ff f8 	st.w	r7[-8],r11
8002b668:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b66c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b670:	f0 16 00 4c 	mcall	r6[304]

  // Check input values.
  if (!opt || // Null pointer.
8002b674:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b678:	58 08       	cp.w	r8,0
8002b67a:	c4 00       	breq	8002b6fa <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b67c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b680:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b682:	30 48       	mov	r8,4
8002b684:	f0 09 18 00 	cp.b	r9,r8
8002b688:	e0 88 00 39 	brls	8002b6fa <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b68c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b690:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b692:	30 98       	mov	r8,9
8002b694:	f0 09 18 00 	cp.b	r9,r8
8002b698:	e0 8b 00 31 	brhi	8002b6fa <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8002b69c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b6a0:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b6a2:	30 78       	mov	r8,7
8002b6a4:	f0 09 18 00 	cp.b	r9,r8
8002b6a8:	e0 8b 00 29 	brhi	8002b6fa <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002b6ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b6b0:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b6b2:	30 18       	mov	r8,1
8002b6b4:	f0 09 19 00 	cp.h	r9,r8
8002b6b8:	c2 10       	breq	8002b6fa <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002b6ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b6be:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b6c0:	e0 68 01 01 	mov	r8,257
8002b6c4:	f0 09 19 00 	cp.h	r9,r8
8002b6c8:	e0 8b 00 19 	brhi	8002b6fa <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8002b6cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b6d0:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b6d4:	30 38       	mov	r8,3
8002b6d6:	f0 09 18 00 	cp.b	r9,r8
8002b6da:	e0 8b 00 10 	brhi	8002b6fa <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8002b6de:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b6e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b6e6:	70 08       	ld.w	r8,r8[0x0]
8002b6e8:	12 9a       	mov	r10,r9
8002b6ea:	10 9b       	mov	r11,r8
8002b6ec:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b6f0:	fe b0 fc dd 	rcall	8002b0aa <usart_set_sync_master_baudrate>
8002b6f4:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b6f6:	58 18       	cp.w	r8,1
8002b6f8:	c0 31       	brne	8002b6fe <usart_init_sync_master+0xaa>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002b6fa:	30 18       	mov	r8,1
8002b6fc:	c6 78       	rjmp	8002b7ca <usart_init_sync_master+0x176>

  if (opt->charlength == 9)
8002b6fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b702:	11 c9       	ld.ub	r9,r8[0x4]
8002b704:	30 98       	mov	r8,9
8002b706:	f0 09 18 00 	cp.b	r9,r8
8002b70a:	c0 a1       	brne	8002b71e <usart_init_sync_master+0xca>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002b70c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b710:	70 18       	ld.w	r8,r8[0x4]
8002b712:	10 99       	mov	r9,r8
8002b714:	b1 b9       	sbr	r9,0x11
8002b716:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b71a:	91 19       	st.w	r8[0x4],r9
8002b71c:	c0 d8       	rjmp	8002b736 <usart_init_sync_master+0xe2>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002b71e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b722:	70 19       	ld.w	r9,r8[0x4]
8002b724:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b728:	11 c8       	ld.ub	r8,r8[0x4]
8002b72a:	20 58       	sub	r8,5
8002b72c:	a7 68       	lsl	r8,0x6
8002b72e:	10 49       	or	r9,r8
8002b730:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b734:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b736:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b73a:	70 19       	ld.w	r9,r8[0x4]
8002b73c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b740:	11 d8       	ld.ub	r8,r8[0x5]
8002b742:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8002b746:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b74a:	f1 38 00 08 	ld.ub	r8,r8[8]
8002b74e:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b750:	f5 e8 10 08 	or	r8,r10,r8
8002b754:	10 49       	or	r9,r8
8002b756:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b75a:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8002b75c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b760:	90 39       	ld.sh	r9,r8[0x6]
8002b762:	30 28       	mov	r8,2
8002b764:	f0 09 19 00 	cp.h	r9,r8
8002b768:	e0 88 00 14 	brls	8002b790 <usart_init_sync_master+0x13c>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8002b76c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b770:	70 18       	ld.w	r8,r8[0x4]
8002b772:	10 99       	mov	r9,r8
8002b774:	ad b9       	sbr	r9,0xd
8002b776:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b77a:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8002b77c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b780:	90 38       	ld.sh	r8,r8[0x6]
8002b782:	5c 78       	castu.h	r8
8002b784:	20 28       	sub	r8,2
8002b786:	10 99       	mov	r9,r8
8002b788:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b78c:	91 a9       	st.w	r8[0x28],r9
8002b78e:	c0 d8       	rjmp	8002b7a8 <usart_init_sync_master+0x154>
  }
  else
    // Insert 1 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8002b790:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b794:	70 19       	ld.w	r9,r8[0x4]
8002b796:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b79a:	90 38       	ld.sh	r8,r8[0x6]
8002b79c:	5c 78       	castu.h	r8
8002b79e:	ad 68       	lsl	r8,0xc
8002b7a0:	10 49       	or	r9,r8
8002b7a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b7a6:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b7a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b7ac:	70 18       	ld.w	r8,r8[0x4]
8002b7ae:	e4 18 ff fb 	andh	r8,0xfffb
8002b7b2:	e0 18 ff f0 	andl	r8,0xfff0
8002b7b6:	10 99       	mov	r9,r8
8002b7b8:	b3 a9       	sbr	r9,0x12
8002b7ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b7be:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET |
              AVR32_USART_MR_CLKO_MASK;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b7c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b7c4:	35 09       	mov	r9,80
8002b7c6:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b7c8:	30 08       	mov	r8,0
}
8002b7ca:	10 9c       	mov	r12,r8
8002b7cc:	2f dd       	sub	sp,-12
8002b7ce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b7d2:	00 00       	add	r0,r0
8002b7d4:	80 02       	ld.sh	r2,r0[0x0]
8002b7d6:	b4 e2       	st.b	r10[0x6],r2

8002b7d8 <usart_init_sync_slave>:


int usart_init_sync_slave(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b7d8:	eb cd 40 c0 	pushm	r6-r7,lr
8002b7dc:	1a 97       	mov	r7,sp
8002b7de:	20 3d       	sub	sp,12
8002b7e0:	4d 96       	lddpc	r6,8002b944 <usart_init_sync_slave+0x16c>
8002b7e2:	1e 26       	rsub	r6,pc
8002b7e4:	ef 4c ff fc 	st.w	r7[-4],r12
8002b7e8:	ef 4b ff f8 	st.w	r7[-8],r11
8002b7ec:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b7f0:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b7f4:	f0 16 00 4c 	mcall	r6[304]

  // Check input values.
  if (!opt || // Null pointer.
8002b7f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b7fc:	58 08       	cp.w	r8,0
8002b7fe:	c3 90       	breq	8002b870 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b800:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b804:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b806:	30 48       	mov	r8,4
8002b808:	f0 09 18 00 	cp.b	r9,r8
8002b80c:	e0 88 00 32 	brls	8002b870 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b810:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b814:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b816:	30 98       	mov	r8,9
8002b818:	f0 09 18 00 	cp.b	r9,r8
8002b81c:	e0 8b 00 2a 	brhi	8002b870 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8002b820:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b824:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b826:	30 78       	mov	r8,7
8002b828:	f0 09 18 00 	cp.b	r9,r8
8002b82c:	e0 8b 00 22 	brhi	8002b870 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002b830:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b834:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b836:	30 18       	mov	r8,1
8002b838:	f0 09 19 00 	cp.h	r9,r8
8002b83c:	c1 a0       	breq	8002b870 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002b83e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b842:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b844:	e0 68 01 01 	mov	r8,257
8002b848:	f0 09 19 00 	cp.h	r9,r8
8002b84c:	e0 8b 00 12 	brhi	8002b870 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8002b850:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b854:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b858:	30 38       	mov	r8,3
8002b85a:	f0 09 18 00 	cp.b	r9,r8
8002b85e:	e0 8b 00 09 	brhi	8002b870 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_slave_baudrate(usart) == USART_INVALID_INPUT)
8002b862:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b866:	fe b0 fc 5a 	rcall	8002b11a <usart_set_sync_slave_baudrate>
8002b86a:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b86c:	58 18       	cp.w	r8,1
8002b86e:	c0 31       	brne	8002b874 <usart_init_sync_slave+0x9c>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_slave_baudrate(usart) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002b870:	30 18       	mov	r8,1
8002b872:	c6 48       	rjmp	8002b93a <usart_init_sync_slave+0x162>

  if (opt->charlength == 9)
8002b874:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b878:	11 c9       	ld.ub	r9,r8[0x4]
8002b87a:	30 98       	mov	r8,9
8002b87c:	f0 09 18 00 	cp.b	r9,r8
8002b880:	c0 a1       	brne	8002b894 <usart_init_sync_slave+0xbc>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002b882:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b886:	70 18       	ld.w	r8,r8[0x4]
8002b888:	10 99       	mov	r9,r8
8002b88a:	b1 b9       	sbr	r9,0x11
8002b88c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b890:	91 19       	st.w	r8[0x4],r9
8002b892:	c0 d8       	rjmp	8002b8ac <usart_init_sync_slave+0xd4>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002b894:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b898:	70 19       	ld.w	r9,r8[0x4]
8002b89a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b89e:	11 c8       	ld.ub	r8,r8[0x4]
8002b8a0:	20 58       	sub	r8,5
8002b8a2:	a7 68       	lsl	r8,0x6
8002b8a4:	10 49       	or	r9,r8
8002b8a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b8aa:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b8ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b8b0:	70 19       	ld.w	r9,r8[0x4]
8002b8b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b8b6:	11 d8       	ld.ub	r8,r8[0x5]
8002b8b8:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8002b8bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b8c0:	f1 38 00 08 	ld.ub	r8,r8[8]
8002b8c4:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b8c6:	f5 e8 10 08 	or	r8,r10,r8
8002b8ca:	10 49       	or	r9,r8
8002b8cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b8d0:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8002b8d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b8d6:	90 39       	ld.sh	r9,r8[0x6]
8002b8d8:	30 28       	mov	r8,2
8002b8da:	f0 09 19 00 	cp.h	r9,r8
8002b8de:	e0 88 00 14 	brls	8002b906 <usart_init_sync_slave+0x12e>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8002b8e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b8e6:	70 18       	ld.w	r8,r8[0x4]
8002b8e8:	10 99       	mov	r9,r8
8002b8ea:	ad b9       	sbr	r9,0xd
8002b8ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b8f0:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8002b8f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b8f6:	90 38       	ld.sh	r8,r8[0x6]
8002b8f8:	5c 78       	castu.h	r8
8002b8fa:	20 28       	sub	r8,2
8002b8fc:	10 99       	mov	r9,r8
8002b8fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b902:	91 a9       	st.w	r8[0x28],r9
8002b904:	c0 d8       	rjmp	8002b91e <usart_init_sync_slave+0x146>
  }
  else
    // Insert 1 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8002b906:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b90a:	70 19       	ld.w	r9,r8[0x4]
8002b90c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b910:	90 38       	ld.sh	r8,r8[0x6]
8002b912:	5c 78       	castu.h	r8
8002b914:	ad 68       	lsl	r8,0xc
8002b916:	10 49       	or	r9,r8
8002b918:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b91c:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b91e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b922:	70 18       	ld.w	r8,r8[0x4]
8002b924:	10 99       	mov	r9,r8
8002b926:	e0 19 ff f0 	andl	r9,0xfff0
8002b92a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b92e:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b930:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b934:	35 09       	mov	r9,80
8002b936:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b938:	30 08       	mov	r8,0
}
8002b93a:	10 9c       	mov	r12,r8
8002b93c:	2f dd       	sub	sp,-12
8002b93e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b942:	00 00       	add	r0,r0
8002b944:	80 02       	ld.sh	r2,r0[0x0]
8002b946:	b6 66       	st.h	r11[0xc],r6

8002b948 <usart_init_rs485>:


int usart_init_rs485(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b948:	eb cd 40 c0 	pushm	r6-r7,lr
8002b94c:	1a 97       	mov	r7,sp
8002b94e:	20 3d       	sub	sp,12
8002b950:	49 26       	lddpc	r6,8002b998 <usart_init_rs485+0x50>
8002b952:	1e 26       	rsub	r6,pc
8002b954:	ef 4c ff fc 	st.w	r7[-4],r12
8002b958:	ef 4b ff f8 	st.w	r7[-8],r11
8002b95c:	ef 4a ff f4 	st.w	r7[-12],r10
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
8002b960:	ee fa ff f4 	ld.w	r10,r7[-12]
8002b964:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b968:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b96c:	f0 16 00 68 	mcall	r6[416]
8002b970:	18 98       	mov	r8,r12
8002b972:	58 18       	cp.w	r8,1
8002b974:	c0 31       	brne	8002b97a <usart_init_rs485+0x32>
    return USART_INVALID_INPUT;
8002b976:	30 18       	mov	r8,1
8002b978:	c0 c8       	rjmp	8002b990 <usart_init_rs485+0x48>

  // Set RS485 mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b97a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b97e:	70 18       	ld.w	r8,r8[0x4]
8002b980:	e0 18 ff f0 	andl	r8,0xfff0
8002b984:	10 99       	mov	r9,r8
8002b986:	a1 a9       	sbr	r9,0x0
8002b988:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b98c:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_RS485 << AVR32_USART_MR_MODE_OFFSET;

  return USART_SUCCESS;
8002b98e:	30 08       	mov	r8,0
}
8002b990:	10 9c       	mov	r12,r8
8002b992:	2f dd       	sub	sp,-12
8002b994:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b998:	80 02       	ld.sh	r2,r0[0x0]
8002b99a:	b7 d6       	cbr	r6,0x17

8002b99c <usart_init_IrDA>:


int usart_init_IrDA(volatile avr32_usart_t *usart, const usart_options_t *opt,
                    long pba_hz, unsigned char irda_filter)
{
8002b99c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b9a0:	1a 97       	mov	r7,sp
8002b9a2:	20 4d       	sub	sp,16
8002b9a4:	49 96       	lddpc	r6,8002ba08 <usart_init_IrDA+0x6c>
8002b9a6:	1e 26       	rsub	r6,pc
8002b9a8:	ef 4c ff fc 	st.w	r7[-4],r12
8002b9ac:	ef 4b ff f8 	st.w	r7[-8],r11
8002b9b0:	ef 4a ff f4 	st.w	r7[-12],r10
8002b9b4:	12 98       	mov	r8,r9
8002b9b6:	ef 68 ff f0 	st.b	r7[-16],r8
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
8002b9ba:	ee fa ff f4 	ld.w	r10,r7[-12]
8002b9be:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b9c2:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b9c6:	f0 16 00 68 	mcall	r6[416]
8002b9ca:	18 98       	mov	r8,r12
8002b9cc:	58 18       	cp.w	r8,1
8002b9ce:	c0 31       	brne	8002b9d4 <usart_init_IrDA+0x38>
    return USART_INVALID_INPUT;
8002b9d0:	30 18       	mov	r8,1
8002b9d2:	c1 78       	rjmp	8002ba00 <usart_init_IrDA+0x64>

  // Set IrDA filter.
  usart->ifr = irda_filter;
8002b9d4:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002b9d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b9dc:	f1 49 00 4c 	st.w	r8[76],r9

  // Set IrDA mode and activate filtering of input.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b9e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b9e4:	70 18       	ld.w	r8,r8[0x4]
8002b9e6:	e4 18 ef ff 	andh	r8,0xefff
8002b9ea:	e0 18 ff f0 	andl	r8,0xfff0
8002b9ee:	10 99       	mov	r9,r8
8002b9f0:	ea 19 10 00 	orh	r9,0x1000
8002b9f4:	e8 19 00 08 	orl	r9,0x8
8002b9f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b9fc:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MODE_IRDA << AVR32_USART_MR_MODE_OFFSET |
              AVR32_USART_MR_FILTER_MASK;

  return USART_SUCCESS;
8002b9fe:	30 08       	mov	r8,0
}
8002ba00:	10 9c       	mov	r12,r8
8002ba02:	2f cd       	sub	sp,-16
8002ba04:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ba08:	80 02       	ld.sh	r2,r0[0x0]
8002ba0a:	b8 2a       	st.h	r12[0x4],r10

8002ba0c <usart_init_iso7816>:


int usart_init_iso7816(volatile avr32_usart_t *usart, const usart_iso7816_options_t *opt, int t, long pba_hz)
{
8002ba0c:	eb cd 40 c0 	pushm	r6-r7,lr
8002ba10:	1a 97       	mov	r7,sp
8002ba12:	20 5d       	sub	sp,20
8002ba14:	4c 46       	lddpc	r6,8002bb24 <usart_init_iso7816+0x118>
8002ba16:	1e 26       	rsub	r6,pc
8002ba18:	ef 4c ff f8 	st.w	r7[-8],r12
8002ba1c:	ef 4b ff f4 	st.w	r7[-12],r11
8002ba20:	ef 4a ff f0 	st.w	r7[-16],r10
8002ba24:	ef 49 ff ec 	st.w	r7[-20],r9
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002ba28:	ee fc ff f8 	ld.w	r12,r7[-8]
8002ba2c:	f0 16 00 4c 	mcall	r6[304]

  // Check input values.
  if (!opt || // Null pointer.
8002ba30:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ba34:	58 08       	cp.w	r8,0
8002ba36:	c0 90       	breq	8002ba48 <usart_init_iso7816+0x3c>
      opt->paritytype > 1)
8002ba38:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ba3c:	11 e9       	ld.ub	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002ba3e:	30 18       	mov	r8,1
8002ba40:	f0 09 18 00 	cp.b	r9,r8
8002ba44:	e0 88 00 04 	brls	8002ba4c <usart_init_iso7816+0x40>
      opt->paritytype > 1)
    return USART_INVALID_INPUT;
8002ba48:	30 18       	mov	r8,1
8002ba4a:	c6 98       	rjmp	8002bb1c <usart_init_iso7816+0x110>

  if (t == 0)
8002ba4c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002ba50:	58 08       	cp.w	r8,0
8002ba52:	c0 c1       	brne	8002ba6a <usart_init_iso7816+0x5e>
  {
    // Set USART mode to ISO7816, T=0.
    // The T=0 protocol always uses 2 stop bits.
    usart->mr = AVR32_USART_MR_MODE_ISO7816_T0 << AVR32_USART_MR_MODE_OFFSET |
8002ba54:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ba58:	70 58       	ld.w	r8,r8[0x14]
                AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET |
                opt->bit_order << AVR32_USART_MR_MSBF_OFFSET; // Allow MSBF in T=0.
8002ba5a:	b1 68       	lsl	r8,0x10

  if (t == 0)
  {
    // Set USART mode to ISO7816, T=0.
    // The T=0 protocol always uses 2 stop bits.
    usart->mr = AVR32_USART_MR_MODE_ISO7816_T0 << AVR32_USART_MR_MODE_OFFSET |
8002ba5c:	e8 18 20 04 	orl	r8,0x2004
8002ba60:	10 99       	mov	r9,r8
8002ba62:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba66:	91 19       	st.w	r8[0x4],r9
8002ba68:	c1 98       	rjmp	8002ba9a <usart_init_iso7816+0x8e>
                AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET |
                opt->bit_order << AVR32_USART_MR_MSBF_OFFSET; // Allow MSBF in T=0.
  }
  else if (t == 1)
8002ba6a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002ba6e:	58 18       	cp.w	r8,1
8002ba70:	c1 31       	brne	8002ba96 <usart_init_iso7816+0x8a>
  {
    // Only LSB first in the T=1 protocol.
    // max_iterations field is only used in T=0 mode.
    if (opt->bit_order != 0 ||
8002ba72:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ba76:	70 58       	ld.w	r8,r8[0x14]
8002ba78:	58 08       	cp.w	r8,0
8002ba7a:	c0 71       	brne	8002ba88 <usart_init_iso7816+0x7c>
        opt->max_iterations != 0)
8002ba7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ba80:	f1 38 00 10 	ld.ub	r8,r8[16]
  }
  else if (t == 1)
  {
    // Only LSB first in the T=1 protocol.
    // max_iterations field is only used in T=0 mode.
    if (opt->bit_order != 0 ||
8002ba84:	58 08       	cp.w	r8,0
8002ba86:	c0 30       	breq	8002ba8c <usart_init_iso7816+0x80>
        opt->max_iterations != 0)
      return USART_INVALID_INPUT;
8002ba88:	30 18       	mov	r8,1
8002ba8a:	c4 98       	rjmp	8002bb1c <usart_init_iso7816+0x110>

    // Set USART mode to ISO7816, T=1.
    // The T=1 protocol always uses 1 stop bit.
    usart->mr = AVR32_USART_MR_MODE_ISO7816_T1 << AVR32_USART_MR_MODE_OFFSET |
8002ba8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba90:	30 69       	mov	r9,6
8002ba92:	91 19       	st.w	r8[0x4],r9
8002ba94:	c0 38       	rjmp	8002ba9a <usart_init_iso7816+0x8e>
                AVR32_USART_MR_NBSTOP_1 << AVR32_USART_MR_NBSTOP_OFFSET;
  }
  else
    return USART_INVALID_INPUT;
8002ba96:	30 18       	mov	r8,1
8002ba98:	c4 28       	rjmp	8002bb1c <usart_init_iso7816+0x110>

  if (usart_set_iso7816_clock(usart, opt->iso7816_hz, pba_hz) == USART_INVALID_INPUT)
8002ba9a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002ba9e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002baa2:	70 08       	ld.w	r8,r8[0x0]
8002baa4:	12 9a       	mov	r10,r9
8002baa6:	10 9b       	mov	r11,r8
8002baa8:	ee fc ff f8 	ld.w	r12,r7[-8]
8002baac:	fe b0 fb 4b 	rcall	8002b142 <usart_set_iso7816_clock>
8002bab0:	18 98       	mov	r8,r12
8002bab2:	58 18       	cp.w	r8,1
8002bab4:	c0 31       	brne	8002baba <usart_init_iso7816+0xae>
    return USART_INVALID_INPUT;
8002bab6:	30 18       	mov	r8,1
8002bab8:	c3 28       	rjmp	8002bb1c <usart_init_iso7816+0x110>

  // Set FIDI register: bit rate = selected clock/FI_DI_ratio/16.
  usart->fidi = opt->fidi_ratio;
8002baba:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002babe:	90 28       	ld.sh	r8,r8[0x4]
8002bac0:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8002bac4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bac8:	f1 49 00 40 	st.w	r8[64],r9

  // Set ISO7816 spesific options in the MODE register.
  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002bacc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bad0:	70 19       	ld.w	r9,r8[0x4]
8002bad2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bad6:	11 e8       	ld.ub	r8,r8[0x6]
8002bad8:	a9 78       	lsl	r8,0x9
               AVR32_USART_MR_CLKO_MASK | // Enable clock output.
8002bada:	10 9a       	mov	r10,r8
8002badc:	b3 aa       	sbr	r10,0x12
               opt->inhibit_nack << AVR32_USART_MR_INACK_OFFSET |
8002bade:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bae2:	70 28       	ld.w	r8,r8[0x8]
8002bae4:	b5 68       	lsl	r8,0x14
8002bae6:	10 4a       	or	r10,r8
               opt->dis_suc_nack << AVR32_USART_MR_DSNACK_OFFSET |
8002bae8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002baec:	70 38       	ld.w	r8,r8[0xc]
8002baee:	b5 78       	lsl	r8,0x15
8002baf0:	10 4a       	or	r10,r8
               opt->max_iterations << AVR32_USART_MR_MAX_ITERATION_OFFSET;
8002baf2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002baf6:	f1 38 00 10 	ld.ub	r8,r8[16]
8002bafa:	b9 68       	lsl	r8,0x18

  // Set FIDI register: bit rate = selected clock/FI_DI_ratio/16.
  usart->fidi = opt->fidi_ratio;

  // Set ISO7816 spesific options in the MODE register.
  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002bafc:	f5 e8 10 08 	or	r8,r10,r8
8002bb00:	10 49       	or	r9,r8
8002bb02:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bb06:	91 19       	st.w	r8[0x4],r9
8002bb08:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bb0c:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void usart_iso7816_enable_receiver(volatile avr32_usart_t *usart)
{
  usart->cr = AVR32_USART_CR_TXDIS_MASK | AVR32_USART_CR_RXEN_MASK;
8002bb10:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bb14:	e0 69 00 90 	mov	r9,144
8002bb18:	91 09       	st.w	r8[0x0],r9
               opt->max_iterations << AVR32_USART_MR_MAX_ITERATION_OFFSET;

  // Setup complete; enable the receiver by default.
  usart_iso7816_enable_receiver(usart);

  return USART_SUCCESS;
8002bb1a:	30 08       	mov	r8,0
}
8002bb1c:	10 9c       	mov	r12,r8
8002bb1e:	2f bd       	sub	sp,-20
8002bb20:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bb24:	80 02       	ld.sh	r2,r0[0x0]
8002bb26:	b8 9a       	st.b	r12[0x1],r10

8002bb28 <usart_init_lin_master>:
    defined(AVR32_USART_440_H_INCLUDED) || \
    defined(AVR32_USART_602_H_INCLUDED)


int usart_init_lin_master(volatile avr32_usart_t *usart, unsigned long baudrate, long pba_hz)
{
8002bb28:	eb cd 40 c0 	pushm	r6-r7,lr
8002bb2c:	1a 97       	mov	r7,sp
8002bb2e:	20 3d       	sub	sp,12
8002bb30:	49 66       	lddpc	r6,8002bb88 <usart_init_lin_master+0x60>
8002bb32:	1e 26       	rsub	r6,pc
8002bb34:	ef 4c ff fc 	st.w	r7[-4],r12
8002bb38:	ef 4b ff f8 	st.w	r7[-8],r11
8002bb3c:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002bb40:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bb44:	f0 16 00 4c 	mcall	r6[304]

  // Check input values.
  if (usart_set_async_baudrate(usart, baudrate, pba_hz) == USART_INVALID_INPUT)
8002bb48:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bb4c:	10 9a       	mov	r10,r8
8002bb4e:	ee fb ff f8 	ld.w	r11,r7[-8]
8002bb52:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bb56:	fe b0 fa 41 	rcall	8002afd8 <usart_set_async_baudrate>
8002bb5a:	18 98       	mov	r8,r12
8002bb5c:	58 18       	cp.w	r8,1
8002bb5e:	c0 31       	brne	8002bb64 <usart_init_lin_master+0x3c>
    return USART_INVALID_INPUT;
8002bb60:	30 18       	mov	r8,1
8002bb62:	c0 f8       	rjmp	8002bb80 <usart_init_lin_master+0x58>

  usart->mr |= AVR32_USART_MR_MODE_LIN_MASTER << AVR32_USART_MR_MODE_OFFSET;  // LIN master mode.
8002bb64:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bb68:	70 18       	ld.w	r8,r8[0x4]
8002bb6a:	10 99       	mov	r9,r8
8002bb6c:	e8 19 00 0a 	orl	r9,0xa
8002bb70:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bb74:	91 19       	st.w	r8[0x4],r9

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002bb76:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bb7a:	35 09       	mov	r9,80
8002bb7c:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002bb7e:	30 08       	mov	r8,0
}
8002bb80:	10 9c       	mov	r12,r8
8002bb82:	2f dd       	sub	sp,-12
8002bb84:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bb88:	80 02       	ld.sh	r2,r0[0x0]
8002bb8a:	b9 b6       	sbr	r6,0x19

8002bb8c <usart_init_lin_slave>:


int usart_init_lin_slave(volatile avr32_usart_t *usart, unsigned long baudrate, long pba_hz)
{
8002bb8c:	eb cd 40 c0 	pushm	r6-r7,lr
8002bb90:	1a 97       	mov	r7,sp
8002bb92:	20 3d       	sub	sp,12
8002bb94:	49 66       	lddpc	r6,8002bbec <usart_init_lin_slave+0x60>
8002bb96:	1e 26       	rsub	r6,pc
8002bb98:	ef 4c ff fc 	st.w	r7[-4],r12
8002bb9c:	ef 4b ff f8 	st.w	r7[-8],r11
8002bba0:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002bba4:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bba8:	f0 16 00 4c 	mcall	r6[304]

  // Check input values.
  if (usart_set_async_baudrate(usart, baudrate, pba_hz) == USART_INVALID_INPUT)
8002bbac:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bbb0:	10 9a       	mov	r10,r8
8002bbb2:	ee fb ff f8 	ld.w	r11,r7[-8]
8002bbb6:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bbba:	fe b0 fa 0f 	rcall	8002afd8 <usart_set_async_baudrate>
8002bbbe:	18 98       	mov	r8,r12
8002bbc0:	58 18       	cp.w	r8,1
8002bbc2:	c0 31       	brne	8002bbc8 <usart_init_lin_slave+0x3c>
    return USART_INVALID_INPUT;
8002bbc4:	30 18       	mov	r8,1
8002bbc6:	c0 f8       	rjmp	8002bbe4 <usart_init_lin_slave+0x58>

  usart->mr |= AVR32_USART_MR_MODE_LIN_SLAVE << AVR32_USART_MR_MODE_OFFSET; // LIN slave mode.
8002bbc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bbcc:	70 18       	ld.w	r8,r8[0x4]
8002bbce:	10 99       	mov	r9,r8
8002bbd0:	e8 19 00 0b 	orl	r9,0xb
8002bbd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bbd8:	91 19       	st.w	r8[0x4],r9

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002bbda:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bbde:	35 09       	mov	r9,80
8002bbe0:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002bbe2:	30 08       	mov	r8,0
}
8002bbe4:	10 9c       	mov	r12,r8
8002bbe6:	2f dd       	sub	sp,-12
8002bbe8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bbec:	80 02       	ld.sh	r2,r0[0x0]
8002bbee:	ba 1a       	st.h	sp[0x2],r10

8002bbf0 <usart_init_spi_master>:


int usart_init_spi_master(volatile avr32_usart_t *usart, const usart_spi_options_t *opt, long pba_hz)
{
8002bbf0:	eb cd 40 c0 	pushm	r6-r7,lr
8002bbf4:	1a 97       	mov	r7,sp
8002bbf6:	20 3d       	sub	sp,12
8002bbf8:	4c 46       	lddpc	r6,8002bd08 <usart_init_spi_master+0x118>
8002bbfa:	1e 26       	rsub	r6,pc
8002bbfc:	ef 4c ff fc 	st.w	r7[-4],r12
8002bc00:	ef 4b ff f8 	st.w	r7[-8],r11
8002bc04:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002bc08:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bc0c:	f0 16 00 4c 	mcall	r6[304]

  // Check input values.
  if (!opt || // Null pointer.
8002bc10:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bc14:	58 08       	cp.w	r8,0
8002bc16:	c2 f0       	breq	8002bc74 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
8002bc18:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bc1c:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002bc1e:	30 48       	mov	r8,4
8002bc20:	f0 09 18 00 	cp.b	r9,r8
8002bc24:	e0 88 00 28 	brls	8002bc74 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
8002bc28:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bc2c:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002bc2e:	30 98       	mov	r8,9
8002bc30:	f0 09 18 00 	cp.b	r9,r8
8002bc34:	e0 8b 00 20 	brhi	8002bc74 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
8002bc38:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bc3c:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002bc3e:	30 38       	mov	r8,3
8002bc40:	f0 09 18 00 	cp.b	r9,r8
8002bc44:	e0 8b 00 18 	brhi	8002bc74 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
8002bc48:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bc4c:	11 e9       	ld.ub	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002bc4e:	30 38       	mov	r8,3
8002bc50:	f0 09 18 00 	cp.b	r9,r8
8002bc54:	e0 8b 00 10 	brhi	8002bc74 <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8002bc58:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002bc5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bc60:	70 08       	ld.w	r8,r8[0x0]
8002bc62:	12 9a       	mov	r10,r9
8002bc64:	10 9b       	mov	r11,r8
8002bc66:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bc6a:	fe b0 fa a5 	rcall	8002b1b4 <usart_set_spi_master_baudrate>
8002bc6e:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002bc70:	58 18       	cp.w	r8,1
8002bc72:	c0 31       	brne	8002bc78 <usart_init_spi_master+0x88>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002bc74:	30 18       	mov	r8,1
8002bc76:	c4 48       	rjmp	8002bcfe <usart_init_spi_master+0x10e>

  if (opt->charlength == 9)
8002bc78:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bc7c:	11 c9       	ld.ub	r9,r8[0x4]
8002bc7e:	30 98       	mov	r8,9
8002bc80:	f0 09 18 00 	cp.b	r9,r8
8002bc84:	c0 a1       	brne	8002bc98 <usart_init_spi_master+0xa8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002bc86:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bc8a:	70 18       	ld.w	r8,r8[0x4]
8002bc8c:	10 99       	mov	r9,r8
8002bc8e:	b1 b9       	sbr	r9,0x11
8002bc90:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bc94:	91 19       	st.w	r8[0x4],r9
8002bc96:	c0 d8       	rjmp	8002bcb0 <usart_init_spi_master+0xc0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002bc98:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bc9c:	70 19       	ld.w	r9,r8[0x4]
8002bc9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bca2:	11 c8       	ld.ub	r8,r8[0x4]
8002bca4:	20 58       	sub	r8,5
8002bca6:	a7 68       	lsl	r8,0x6
8002bca8:	10 49       	or	r9,r8
8002bcaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bcae:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
8002bcb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bcb4:	70 19       	ld.w	r9,r8[0x4]
               ((opt->spimode & 0x1) ^ 0x1) << AVR32_USART_MR_SYNC_OFFSET |   // SPI clock phase.
8002bcb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bcba:	11 d8       	ld.ub	r8,r8[0x5]
8002bcbc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002bcc0:	c0 41       	brne	8002bcc8 <usart_init_spi_master+0xd8>
8002bcc2:	e0 68 01 0e 	mov	r8,270
8002bcc6:	c0 28       	rjmp	8002bcca <usart_init_spi_master+0xda>
8002bcc8:	30 e8       	mov	r8,14
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET |             // Channel mode.
8002bcca:	ee fa ff f8 	ld.w	r10,r7[-8]
8002bcce:	15 ea       	ld.ub	r10,r10[0x6]
8002bcd0:	af 6a       	lsl	r10,0xe
8002bcd2:	f1 ea 10 0a 	or	r10,r8,r10
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET |            // SPI clock polarity.
8002bcd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bcda:	11 d8       	ld.ub	r8,r8[0x5]
8002bcdc:	a1 98       	lsr	r8,0x1
8002bcde:	5c 58       	castu.b	r8
8002bce0:	b1 68       	lsl	r8,0x10
8002bce2:	f5 e8 10 08 	or	r8,r10,r8
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
8002bce6:	f3 e8 10 08 	or	r8,r9,r8
8002bcea:	10 99       	mov	r9,r8
8002bcec:	b3 a9       	sbr	r9,0x12
8002bcee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bcf2:	91 19       	st.w	r8[0x4],r9
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET |            // SPI clock polarity.
               AVR32_USART_MR_CLKO_MASK;                                      // Drive SCK pin.

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002bcf4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bcf8:	35 09       	mov	r9,80
8002bcfa:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002bcfc:	30 08       	mov	r8,0
}
8002bcfe:	10 9c       	mov	r12,r8
8002bd00:	2f dd       	sub	sp,-12
8002bd02:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bd06:	00 00       	add	r0,r0
8002bd08:	80 02       	ld.sh	r2,r0[0x0]
8002bd0a:	ba 7e       	st.h	sp[0xe],lr

8002bd0c <usart_init_spi_slave>:


int usart_init_spi_slave(volatile avr32_usart_t *usart, const usart_spi_options_t *opt, long pba_hz)
{
8002bd0c:	eb cd 40 c0 	pushm	r6-r7,lr
8002bd10:	1a 97       	mov	r7,sp
8002bd12:	20 3d       	sub	sp,12
8002bd14:	4b f6       	lddpc	r6,8002be10 <usart_init_spi_slave+0x104>
8002bd16:	1e 26       	rsub	r6,pc
8002bd18:	ef 4c ff fc 	st.w	r7[-4],r12
8002bd1c:	ef 4b ff f8 	st.w	r7[-8],r11
8002bd20:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002bd24:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bd28:	f0 16 00 4c 	mcall	r6[304]

  // Check input values.
  if (!opt || // Null pointer.
8002bd2c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bd30:	58 08       	cp.w	r8,0
8002bd32:	c2 80       	breq	8002bd82 <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
8002bd34:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bd38:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002bd3a:	30 48       	mov	r8,4
8002bd3c:	f0 09 18 00 	cp.b	r9,r8
8002bd40:	e0 88 00 21 	brls	8002bd82 <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
8002bd44:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bd48:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002bd4a:	30 98       	mov	r8,9
8002bd4c:	f0 09 18 00 	cp.b	r9,r8
8002bd50:	e0 8b 00 19 	brhi	8002bd82 <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
8002bd54:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bd58:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002bd5a:	30 38       	mov	r8,3
8002bd5c:	f0 09 18 00 	cp.b	r9,r8
8002bd60:	e0 8b 00 11 	brhi	8002bd82 <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
8002bd64:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bd68:	11 e9       	ld.ub	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002bd6a:	30 38       	mov	r8,3
8002bd6c:	f0 09 18 00 	cp.b	r9,r8
8002bd70:	e0 8b 00 09 	brhi	8002bd82 <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_slave_baudrate(usart) == USART_INVALID_INPUT)
8002bd74:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bd78:	fe b0 fa 56 	rcall	8002b224 <usart_set_spi_slave_baudrate>
8002bd7c:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002bd7e:	58 18       	cp.w	r8,1
8002bd80:	c0 31       	brne	8002bd86 <usart_init_spi_slave+0x7a>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_slave_baudrate(usart) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002bd82:	30 18       	mov	r8,1
8002bd84:	c4 18       	rjmp	8002be06 <usart_init_spi_slave+0xfa>

  if (opt->charlength == 9)
8002bd86:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bd8a:	11 c9       	ld.ub	r9,r8[0x4]
8002bd8c:	30 98       	mov	r8,9
8002bd8e:	f0 09 18 00 	cp.b	r9,r8
8002bd92:	c0 a1       	brne	8002bda6 <usart_init_spi_slave+0x9a>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002bd94:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bd98:	70 18       	ld.w	r8,r8[0x4]
8002bd9a:	10 99       	mov	r9,r8
8002bd9c:	b1 b9       	sbr	r9,0x11
8002bd9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bda2:	91 19       	st.w	r8[0x4],r9
8002bda4:	c0 d8       	rjmp	8002bdbe <usart_init_spi_slave+0xb2>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002bda6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bdaa:	70 19       	ld.w	r9,r8[0x4]
8002bdac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bdb0:	11 c8       	ld.ub	r8,r8[0x4]
8002bdb2:	20 58       	sub	r8,5
8002bdb4:	a7 68       	lsl	r8,0x6
8002bdb6:	10 49       	or	r9,r8
8002bdb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bdbc:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_SLAVE << AVR32_USART_MR_MODE_OFFSET |  // SPI slave mode.
8002bdbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bdc2:	70 19       	ld.w	r9,r8[0x4]
               ((opt->spimode & 0x1) ^ 0x1) << AVR32_USART_MR_SYNC_OFFSET |   // SPI clock phase.
8002bdc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bdc8:	11 d8       	ld.ub	r8,r8[0x5]
8002bdca:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002bdce:	c0 41       	brne	8002bdd6 <usart_init_spi_slave+0xca>
8002bdd0:	e0 68 01 0f 	mov	r8,271
8002bdd4:	c0 28       	rjmp	8002bdd8 <usart_init_spi_slave+0xcc>
8002bdd6:	30 f8       	mov	r8,15
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET |             // Channel mode.
8002bdd8:	ee fa ff f8 	ld.w	r10,r7[-8]
8002bddc:	15 ea       	ld.ub	r10,r10[0x6]
8002bdde:	af 6a       	lsl	r10,0xe
8002bde0:	f1 ea 10 0a 	or	r10,r8,r10
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET;             // SPI clock polarity.
8002bde4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bde8:	11 d8       	ld.ub	r8,r8[0x5]
8002bdea:	a1 98       	lsr	r8,0x1
8002bdec:	5c 58       	castu.b	r8
8002bdee:	b1 68       	lsl	r8,0x10
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_SLAVE << AVR32_USART_MR_MODE_OFFSET |  // SPI slave mode.
8002bdf0:	f5 e8 10 08 	or	r8,r10,r8
8002bdf4:	10 49       	or	r9,r8
8002bdf6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bdfa:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET |             // Channel mode.
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET;             // SPI clock polarity.

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002bdfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002be00:	35 09       	mov	r9,80
8002be02:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002be04:	30 08       	mov	r8,0
}
8002be06:	10 9c       	mov	r12,r8
8002be08:	2f dd       	sub	sp,-12
8002be0a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002be0e:	00 00       	add	r0,r0
8002be10:	80 02       	ld.sh	r2,r0[0x0]
8002be12:	bb 9a       	lsr	r10,0x1b

8002be14 <usart_spi_selectChip>:
 */
//! @{


int usart_spi_selectChip(volatile avr32_usart_t *usart)
{
8002be14:	eb cd 40 80 	pushm	r7,lr
8002be18:	1a 97       	mov	r7,sp
8002be1a:	20 1d       	sub	sp,4
8002be1c:	ef 4c ff fc 	st.w	r7[-4],r12
  // Force the SPI chip select.
  usart->cr = AVR32_USART_CR_RTSEN_MASK;
8002be20:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002be24:	e4 69 00 00 	mov	r9,262144
8002be28:	91 09       	st.w	r8[0x0],r9

  return USART_SUCCESS;
8002be2a:	30 08       	mov	r8,0
}
8002be2c:	10 9c       	mov	r12,r8
8002be2e:	2f fd       	sub	sp,-4
8002be30:	e3 cd 80 80 	ldm	sp++,r7,pc

8002be34 <usart_spi_unselectChip>:


int usart_spi_unselectChip(volatile avr32_usart_t *usart)
{
8002be34:	eb cd 40 80 	pushm	r7,lr
8002be38:	1a 97       	mov	r7,sp
8002be3a:	20 3d       	sub	sp,12
8002be3c:	ef 4c ff f4 	st.w	r7[-12],r12
  int timeout = USART_DEFAULT_TIMEOUT;
8002be40:	e0 68 27 10 	mov	r8,10000
8002be44:	ef 48 ff f8 	st.w	r7[-8],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
8002be48:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002be4c:	58 08       	cp.w	r8,0
8002be4e:	5f 08       	sreq	r8
8002be50:	5c 58       	castu.b	r8
8002be52:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002be56:	20 19       	sub	r9,1
8002be58:	ef 49 ff f8 	st.w	r7[-8],r9
8002be5c:	58 08       	cp.w	r8,0
8002be5e:	c0 30       	breq	8002be64 <usart_spi_unselectChip+0x30>
8002be60:	3f f8       	mov	r8,-1
8002be62:	c1 38       	rjmp	8002be88 <usart_spi_unselectChip+0x54>
8002be64:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002be68:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_empty(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXEMPTY_MASK) != 0;
8002be6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002be70:	70 58       	ld.w	r8,r8[0x14]
8002be72:	e2 18 02 00 	andl	r8,0x200,COH
8002be76:	5f 18       	srne	r8
  } while (!usart_tx_empty(usart));
8002be78:	58 08       	cp.w	r8,0
8002be7a:	ce 70       	breq	8002be48 <usart_spi_unselectChip+0x14>

  // Release the SPI chip select.
  usart->cr = AVR32_USART_CR_RTSDIS_MASK;
8002be7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002be80:	e8 69 00 00 	mov	r9,524288
8002be84:	91 09       	st.w	r8[0x0],r9

  return USART_SUCCESS;
8002be86:	30 08       	mov	r8,0
}
8002be88:	10 9c       	mov	r12,r8
8002be8a:	2f dd       	sub	sp,-12
8002be8c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002be90 <usart_send_address>:
 */
//! @{


int usart_send_address(volatile avr32_usart_t *usart, int address)
{
8002be90:	eb cd 40 c0 	pushm	r6-r7,lr
8002be94:	1a 97       	mov	r7,sp
8002be96:	20 5d       	sub	sp,20
8002be98:	49 96       	lddpc	r6,8002befc <usart_send_address+0x6c>
8002be9a:	1e 26       	rsub	r6,pc
8002be9c:	ef 4c ff f0 	st.w	r7[-16],r12
8002bea0:	ef 4b ff ec 	st.w	r7[-20],r11
8002bea4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002bea8:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ int usart_mode_is_multidrop(volatile avr32_usart_t *usart)
{
  return ((usart->mr >> AVR32_USART_MR_PAR_OFFSET) & AVR32_USART_MR_PAR_MULTI) == AVR32_USART_MR_PAR_MULTI;
8002beac:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002beb0:	70 18       	ld.w	r8,r8[0x4]
8002beb2:	a9 98       	lsr	r8,0x9
8002beb4:	e2 18 00 06 	andl	r8,0x6,COH
8002beb8:	58 68       	cp.w	r8,6
8002beba:	5f 08       	sreq	r8


int usart_send_address(volatile avr32_usart_t *usart, int address)
{
  // Check if USART is in multidrop / RS485 mode.
  if (!usart_mode_is_multidrop(usart)) return USART_MODE_FAULT;
8002bebc:	58 08       	cp.w	r8,0
8002bebe:	c0 31       	brne	8002bec4 <usart_send_address+0x34>
8002bec0:	30 58       	mov	r8,5
8002bec2:	c1 88       	rjmp	8002bef2 <usart_send_address+0x62>

  // Prepare to send an address.
  usart->cr = AVR32_USART_CR_SENDA_MASK;
8002bec4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002bec8:	e0 69 10 00 	mov	r9,4096
8002becc:	91 09       	st.w	r8[0x0],r9
8002bece:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002bed2:	ef 48 ff fc 	st.w	r7[-4],r8
8002bed6:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002beda:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void usart_bw_write_char(volatile avr32_usart_t *usart, int c)
{
  while (usart_write_char(usart, c) != USART_SUCCESS);
8002bede:	ee fb ff f8 	ld.w	r11,r7[-8]
8002bee2:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bee6:	f0 16 01 15 	mcall	r6[1108]
8002beea:	18 98       	mov	r8,r12
8002beec:	58 08       	cp.w	r8,0
8002beee:	cf 81       	brne	8002bede <usart_send_address+0x4e>

  // Write the address to TX.
  usart_bw_write_char(usart, address);

  return USART_SUCCESS;
8002bef0:	30 08       	mov	r8,0
}
8002bef2:	10 9c       	mov	r12,r8
8002bef4:	2f bd       	sub	sp,-20
8002bef6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002befa:	00 00       	add	r0,r0
8002befc:	80 02       	ld.sh	r2,r0[0x0]
8002befe:	bd 1e       	ld.d	lr,--lr

8002bf00 <usart_write_char>:


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
8002bf00:	eb cd 40 80 	pushm	r7,lr
8002bf04:	1a 97       	mov	r7,sp
8002bf06:	20 3d       	sub	sp,12
8002bf08:	ef 4c ff f8 	st.w	r7[-8],r12
8002bf0c:	ef 4b ff f4 	st.w	r7[-12],r11
8002bf10:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bf14:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
8002bf18:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bf1c:	70 58       	ld.w	r8,r8[0x14]
8002bf1e:	e2 18 00 02 	andl	r8,0x2,COH
8002bf22:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
8002bf24:	58 08       	cp.w	r8,0
8002bf26:	c0 a0       	breq	8002bf3a <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
8002bf28:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bf2c:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
8002bf30:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bf34:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
8002bf36:	30 08       	mov	r8,0
8002bf38:	c0 28       	rjmp	8002bf3c <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
8002bf3a:	30 28       	mov	r8,2
}
8002bf3c:	10 9c       	mov	r12,r8
8002bf3e:	2f dd       	sub	sp,-12
8002bf40:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bf44 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
8002bf44:	eb cd 40 c0 	pushm	r6-r7,lr
8002bf48:	1a 97       	mov	r7,sp
8002bf4a:	20 3d       	sub	sp,12
8002bf4c:	49 36       	lddpc	r6,8002bf98 <usart_putchar+0x54>
8002bf4e:	1e 26       	rsub	r6,pc
8002bf50:	ef 4c ff f8 	st.w	r7[-8],r12
8002bf54:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
8002bf58:	e0 68 27 10 	mov	r8,10000
8002bf5c:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
8002bf60:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bf64:	58 08       	cp.w	r8,0
8002bf66:	5f 08       	sreq	r8
8002bf68:	5c 58       	castu.b	r8
8002bf6a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bf6e:	20 19       	sub	r9,1
8002bf70:	ef 49 ff fc 	st.w	r7[-4],r9
8002bf74:	58 08       	cp.w	r8,0
8002bf76:	c0 30       	breq	8002bf7c <usart_putchar+0x38>
8002bf78:	3f f8       	mov	r8,-1
8002bf7a:	c0 b8       	rjmp	8002bf90 <usart_putchar+0x4c>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
8002bf7c:	ee fb ff f4 	ld.w	r11,r7[-12]
8002bf80:	ee fc ff f8 	ld.w	r12,r7[-8]
8002bf84:	f0 16 01 15 	mcall	r6[1108]
8002bf88:	18 98       	mov	r8,r12
8002bf8a:	58 08       	cp.w	r8,0
8002bf8c:	ce a1       	brne	8002bf60 <usart_putchar+0x1c>

  return USART_SUCCESS;
8002bf8e:	30 08       	mov	r8,0
}
8002bf90:	10 9c       	mov	r12,r8
8002bf92:	2f dd       	sub	sp,-12
8002bf94:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bf98:	80 02       	ld.sh	r2,r0[0x0]
8002bf9a:	bd d2       	cbr	r2,0x1d

8002bf9c <usart_read_char>:


int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
8002bf9c:	eb cd 40 80 	pushm	r7,lr
8002bfa0:	1a 97       	mov	r7,sp
8002bfa2:	20 3d       	sub	sp,12
8002bfa4:	ef 4c ff f8 	st.w	r7[-8],r12
8002bfa8:	ef 4b ff f4 	st.w	r7[-12],r11
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
8002bfac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bfb0:	70 58       	ld.w	r8,r8[0x14]
8002bfb2:	e2 18 00 e0 	andl	r8,0xe0,COH
8002bfb6:	c0 30       	breq	8002bfbc <usart_read_char+0x20>
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;
8002bfb8:	30 48       	mov	r8,4
8002bfba:	c1 68       	rjmp	8002bfe6 <usart_read_char+0x4a>
8002bfbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bfc0:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
8002bfc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bfc8:	70 58       	ld.w	r8,r8[0x14]
8002bfca:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
8002bfce:	c0 b0       	breq	8002bfe4 <usart_read_char+0x48>
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
8002bfd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bfd4:	70 68       	ld.w	r8,r8[0x18]
8002bfd6:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
8002bfda:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002bfde:	91 09       	st.w	r8[0x0],r9
    return USART_SUCCESS;
8002bfe0:	30 08       	mov	r8,0
8002bfe2:	c0 28       	rjmp	8002bfe6 <usart_read_char+0x4a>
  }
  else
    return USART_RX_EMPTY;
8002bfe4:	30 38       	mov	r8,3
}
8002bfe6:	10 9c       	mov	r12,r8
8002bfe8:	2f dd       	sub	sp,-12
8002bfea:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bfee <usart_getchar>:


int usart_getchar(volatile avr32_usart_t *usart)
{
8002bfee:	eb cd 40 c0 	pushm	r6-r7,lr
8002bff2:	1a 97       	mov	r7,sp
8002bff4:	20 3d       	sub	sp,12
8002bff6:	49 06       	lddpc	r6,8002c034 <usart_getchar+0x46>
8002bff8:	1e 26       	rsub	r6,pc
8002bffa:	ef 4c ff f4 	st.w	r7[-12],r12
  int c, ret;

  while ((ret = usart_read_char(usart, &c)) == USART_RX_EMPTY);
8002bffe:	ee c8 00 08 	sub	r8,r7,8
8002c002:	10 9b       	mov	r11,r8
8002c004:	ee fc ff f4 	ld.w	r12,r7[-12]
8002c008:	f0 16 01 f9 	mcall	r6[2020]
8002c00c:	18 98       	mov	r8,r12
8002c00e:	ef 48 ff fc 	st.w	r7[-4],r8
8002c012:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c016:	58 38       	cp.w	r8,3
8002c018:	cf 30       	breq	8002bffe <usart_getchar+0x10>

  if (ret == USART_RX_ERROR)
8002c01a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c01e:	58 48       	cp.w	r8,4
8002c020:	c0 31       	brne	8002c026 <usart_getchar+0x38>
    return USART_FAILURE;
8002c022:	3f f8       	mov	r8,-1
8002c024:	c0 38       	rjmp	8002c02a <usart_getchar+0x3c>

  return c;
8002c026:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8002c02a:	10 9c       	mov	r12,r8
8002c02c:	2f dd       	sub	sp,-12
8002c02e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c032:	00 00       	add	r0,r0
8002c034:	80 02       	ld.sh	r2,r0[0x0]
8002c036:	be 7c       	st.h	pc[0xe],r12

8002c038 <usart_write_line>:


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
8002c038:	eb cd 40 c0 	pushm	r6-r7,lr
8002c03c:	1a 97       	mov	r7,sp
8002c03e:	20 2d       	sub	sp,8
8002c040:	48 e6       	lddpc	r6,8002c078 <usart_write_line+0x40>
8002c042:	1e 26       	rsub	r6,pc
8002c044:	ef 4c ff fc 	st.w	r7[-4],r12
8002c048:	ef 4b ff f8 	st.w	r7[-8],r11
  while (*string != '\0')
8002c04c:	c0 e8       	rjmp	8002c068 <usart_write_line+0x30>
    usart_putchar(usart, *string++);
8002c04e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c052:	11 88       	ld.ub	r8,r8[0x0]
8002c054:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c058:	2f f9       	sub	r9,-1
8002c05a:	ef 49 ff f8 	st.w	r7[-8],r9
8002c05e:	10 9b       	mov	r11,r8
8002c060:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c064:	f0 16 00 a3 	mcall	r6[652]
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
8002c068:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c06c:	11 88       	ld.ub	r8,r8[0x0]
8002c06e:	58 08       	cp.w	r8,0
8002c070:	ce f1       	brne	8002c04e <usart_write_line+0x16>
    usart_putchar(usart, *string++);
}
8002c072:	2f ed       	sub	sp,-8
8002c074:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c078:	80 02       	ld.sh	r2,r0[0x0]
8002c07a:	be c6       	st.b	pc[0x4],r6
8002c07c:	45 72       	lddsp	r2,sp[0x15c]
8002c07e:	72 6f       	ld.w	pc,r9[0x18]
8002c080:	72 21       	ld.w	r1,r9[0x8]
8002c082:	21 21       	sub	r1,18
8002c084:	0d 0a       	ld.w	r10,r6++
	...

8002c088 <usart_get_echo_line>:


int usart_get_echo_line(volatile avr32_usart_t *usart)
{
8002c088:	eb cd 40 c0 	pushm	r6-r7,lr
8002c08c:	1a 97       	mov	r7,sp
8002c08e:	20 3d       	sub	sp,12
8002c090:	49 e6       	lddpc	r6,8002c108 <usart_get_echo_line+0x80>
8002c092:	1e 26       	rsub	r6,pc
8002c094:	ef 4c ff f4 	st.w	r7[-12],r12
  int rx_char;
  int retval = USART_SUCCESS;
8002c098:	30 08       	mov	r8,0
8002c09a:	ef 48 ff fc 	st.w	r7[-4],r8
8002c09e:	c0 28       	rjmp	8002c0a2 <usart_get_echo_line+0x1a>
    if (rx_char == '\r')
    { // Add a LF and consider this as the end of the line.
      usart_putchar(usart, '\n');
      break;
    }
  }
8002c0a0:	d7 03       	nop
  int rx_char;
  int retval = USART_SUCCESS;

  while (1)
  {
    rx_char = usart_getchar(usart);
8002c0a2:	ee fc ff f4 	ld.w	r12,r7[-12]
8002c0a6:	f0 16 01 c6 	mcall	r6[1816]
8002c0aa:	18 98       	mov	r8,r12
8002c0ac:	ef 48 ff f8 	st.w	r7[-8],r8
    if (rx_char == USART_FAILURE)
8002c0b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c0b4:	5b f8       	cp.w	r8,-1
8002c0b6:	c0 b1       	brne	8002c0cc <usart_get_echo_line+0x44>
    {
      usart_write_line(usart, "Error!!!\r\n");
8002c0b8:	fe cb 00 3c 	sub	r11,pc,60
8002c0bc:	ee fc ff f4 	ld.w	r12,r7[-12]
8002c0c0:	f0 16 01 5b 	mcall	r6[1388]
      retval = USART_FAILURE;
8002c0c4:	3f f8       	mov	r8,-1
8002c0c6:	ef 48 ff fc 	st.w	r7[-4],r8
      break;
8002c0ca:	c1 98       	rjmp	8002c0fc <usart_get_echo_line+0x74>
    }
    if (rx_char == '\x03')
8002c0cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c0d0:	58 38       	cp.w	r8,3
8002c0d2:	c0 51       	brne	8002c0dc <usart_get_echo_line+0x54>
    {
      retval = USART_FAILURE;
8002c0d4:	3f f8       	mov	r8,-1
8002c0d6:	ef 48 ff fc 	st.w	r7[-4],r8
      break;
8002c0da:	c1 18       	rjmp	8002c0fc <usart_get_echo_line+0x74>
    }
    usart_putchar(usart, rx_char);
8002c0dc:	ee fb ff f8 	ld.w	r11,r7[-8]
8002c0e0:	ee fc ff f4 	ld.w	r12,r7[-12]
8002c0e4:	f0 16 00 a3 	mcall	r6[652]
    if (rx_char == '\r')
8002c0e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c0ec:	58 d8       	cp.w	r8,13
8002c0ee:	cd 91       	brne	8002c0a0 <usart_get_echo_line+0x18>
    { // Add a LF and consider this as the end of the line.
      usart_putchar(usart, '\n');
8002c0f0:	30 ab       	mov	r11,10
8002c0f2:	ee fc ff f4 	ld.w	r12,r7[-12]
8002c0f6:	f0 16 00 a3 	mcall	r6[652]
      break;
8002c0fa:	d7 03       	nop
    }
  }

  return retval;
8002c0fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002c100:	10 9c       	mov	r12,r8
8002c102:	2f dd       	sub	sp,-12
8002c104:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c108:	80 02       	ld.sh	r2,r0[0x0]
8002c10a:	bf 16       	ld.d	r6,--pc

8002c10c <delay_init>:
#endif

//_____ D E C L A R A T I O N S ____________________________________________

void delay_init(unsigned long fcpu_hz)
{
8002c10c:	eb cd 40 c0 	pushm	r6-r7,lr
8002c110:	1a 97       	mov	r7,sp
8002c112:	20 1d       	sub	sp,4
8002c114:	48 66       	lddpc	r6,8002c12c <delay_init+0x20>
8002c116:	1e 26       	rsub	r6,pc
8002c118:	ef 4c ff fc 	st.w	r7[-4],r12
#ifndef FREERTOS_USED
  s_fcpu_hz = fcpu_hz;
8002c11c:	ec f8 04 c0 	ld.w	r8,r6[1216]
8002c120:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c124:	91 09       	st.w	r8[0x0],r9
#endif
}
8002c126:	2f fd       	sub	sp,-4
8002c128:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c12c:	80 02       	ld.sh	r2,r0[0x0]
8002c12e:	bf 9a       	lsr	r10,0x1f

8002c130 <delay_ms>:


void delay_ms(unsigned long delay)
{
8002c130:	eb cd 40 c0 	pushm	r6-r7,lr
8002c134:	1a 97       	mov	r7,sp
8002c136:	20 cd       	sub	sp,48
8002c138:	4d 36       	lddpc	r6,8002c284 <delay_ms+0x154>
8002c13a:	1e 26       	rsub	r6,pc
8002c13c:	ef 4c ff d0 	st.w	r7[-48],r12
#if (defined FREERTOS_USED)
  vTaskDelay( (portTickType)TASK_DELAY_MS(delay) );
#elif (defined NUTOS_USED)
  NutSleep(delay);
#else
  cpu_delay_ms(delay, s_fcpu_hz);
8002c140:	ec fc 04 c0 	ld.w	r12,r6[1216]
8002c144:	78 0c       	ld.w	r12,r12[0x0]
8002c146:	ee fe ff d0 	ld.w	lr,r7[-48]
8002c14a:	ef 4e ff e4 	st.w	r7[-28],lr
8002c14e:	ef 4c ff e0 	st.w	r7[-32],r12
8002c152:	ee fc ff e4 	ld.w	r12,r7[-28]
8002c156:	ef 4c ff ec 	st.w	r7[-20],r12
8002c15a:	ee fc ff e0 	ld.w	r12,r7[-32]
8002c15e:	ef 4c ff e8 	st.w	r7[-24],r12
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8002c162:	ee fa ff ec 	ld.w	r10,r7[-20]
8002c166:	30 0b       	mov	r11,0
8002c168:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002c16c:	30 09       	mov	r9,0
8002c16e:	f6 08 02 4c 	mul	r12,r11,r8
8002c172:	f2 0a 02 4e 	mul	lr,r9,r10
8002c176:	1c 0c       	add	r12,lr
8002c178:	f4 08 06 48 	mulu.d	r8,r10,r8
8002c17c:	12 0c       	add	r12,r9
8002c17e:	18 99       	mov	r9,r12
8002c180:	e0 6a 03 e7 	mov	r10,999
8002c184:	30 0b       	mov	r11,0
8002c186:	f0 0a 00 0a 	add	r10,r8,r10
8002c18a:	f2 0b 00 4b 	adc	r11,r9,r11
8002c18e:	e0 68 03 e8 	mov	r8,1000
8002c192:	30 09       	mov	r9,0
8002c194:	f0 16 01 00 	mcall	r6[1024]
8002c198:	14 98       	mov	r8,r10
8002c19a:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8002c19c:	ef 48 ff f4 	st.w	r7[-12],r8
8002c1a0:	ee c8 00 2c 	sub	r8,r7,44
8002c1a4:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8002c1a8:	e1 b8 00 42 	mfsr	r8,0x108
8002c1ac:	10 99       	mov	r9,r8
8002c1ae:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002c1b2:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8002c1b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002c1b8:	70 09       	ld.w	r9,r8[0x0]
8002c1ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c1be:	10 09       	add	r9,r8
8002c1c0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002c1c4:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8002c1c6:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002c1ca:	30 08       	mov	r8,0
8002c1cc:	f3 68 00 08 	st.b	r9[8],r8
8002c1d0:	ee c8 00 2c 	sub	r8,r7,44
8002c1d4:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8002c1d8:	e1 b8 00 42 	mfsr	r8,0x108
8002c1dc:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8002c1e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c1e4:	f1 39 00 08 	ld.ub	r9,r8[8]
8002c1e8:	30 28       	mov	r8,2
8002c1ea:	f0 09 18 00 	cp.b	r9,r8
8002c1ee:	c0 31       	brne	8002c1f4 <delay_ms+0xc4>
    return false;
8002c1f0:	30 08       	mov	r8,0
8002c1f2:	c4 38       	rjmp	8002c278 <delay_ms+0x148>

  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8002c1f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c1f8:	f1 39 00 08 	ld.ub	r9,r8[8]
8002c1fc:	30 18       	mov	r8,1
8002c1fe:	f0 09 18 00 	cp.b	r9,r8
8002c202:	c0 31       	brne	8002c208 <delay_ms+0xd8>
    return true;
8002c204:	30 18       	mov	r8,1
8002c206:	c3 98       	rjmp	8002c278 <delay_ms+0x148>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8002c208:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c20c:	70 09       	ld.w	r9,r8[0x0]
8002c20e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c212:	70 18       	ld.w	r8,r8[0x4]
8002c214:	10 39       	cp.w	r9,r8
8002c216:	e0 88 00 1a 	brls	8002c24a <delay_ms+0x11a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8002c21a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c21e:	70 08       	ld.w	r8,r8[0x0]
8002c220:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c224:	10 39       	cp.w	r9,r8
8002c226:	c1 02       	brcc	8002c246 <delay_ms+0x116>
8002c228:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c22c:	70 18       	ld.w	r8,r8[0x4]
8002c22e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c232:	10 39       	cp.w	r9,r8
8002c234:	e0 88 00 09 	brls	8002c246 <delay_ms+0x116>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8002c238:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c23c:	30 18       	mov	r8,1
8002c23e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8002c242:	30 18       	mov	r8,1
8002c244:	c1 a8       	rjmp	8002c278 <delay_ms+0x148>
    }
    return false;
8002c246:	30 08       	mov	r8,0
8002c248:	c1 88       	rjmp	8002c278 <delay_ms+0x148>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8002c24a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c24e:	70 08       	ld.w	r8,r8[0x0]
8002c250:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c254:	10 39       	cp.w	r9,r8
8002c256:	c0 93       	brcs	8002c268 <delay_ms+0x138>
8002c258:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c25c:	70 18       	ld.w	r8,r8[0x4]
8002c25e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c262:	10 39       	cp.w	r9,r8
8002c264:	e0 88 00 09 	brls	8002c276 <delay_ms+0x146>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8002c268:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c26c:	30 18       	mov	r8,1
8002c26e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8002c272:	30 18       	mov	r8,1
8002c274:	c0 28       	rjmp	8002c278 <delay_ms+0x148>
    }
    return false;
8002c276:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8002c278:	58 08       	cp.w	r8,0
8002c27a:	ca b0       	breq	8002c1d0 <delay_ms+0xa0>
#endif
}
8002c27c:	2f 4d       	sub	sp,-48
8002c27e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c282:	00 00       	add	r0,r0
8002c284:	80 02       	ld.sh	r2,r0[0x0]
8002c286:	bf be       	sbr	lr,0x1f

8002c288 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
8002c288:	48 dd       	lddpc	sp,8002c2bc <udata_clear_loop_end+0x4>

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
8002c28a:	fe c0 a8 8a 	sub	r0,pc,-22390
  mtsr    AVR32_EVBA, r0
8002c28e:	e3 b0 00 01 	mtsr	0x4,r0

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
8002c292:	d5 53       	csrf	0x15
  lda.w   r1, _edata
8002c294:	48 b0       	lddpc	r0,8002c2c0 <udata_clear_loop_end+0x8>
  cp      r0, r1
8002c296:	48 c1       	lddpc	r1,8002c2c4 <udata_clear_loop_end+0xc>
  brhs    idata_load_loop_end
8002c298:	02 30       	cp.w	r0,r1
  lda.w   r2, _data_lma
8002c29a:	c0 62       	brcc	8002c2a6 <idata_load_loop_end>
idata_load_loop:
  ld.d    r4, r2++
8002c29c:	48 b2       	lddpc	r2,8002c2c8 <udata_clear_loop_end+0x10>

8002c29e <idata_load_loop>:
  st.d    r0++, r4
8002c29e:	a5 05       	ld.d	r4,r2++
  cp      r0, r1
8002c2a0:	a1 24       	st.d	r0++,r4
  brlo    idata_load_loop
8002c2a2:	02 30       	cp.w	r0,r1
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
8002c2a4:	cf d3       	brcs	8002c29e <idata_load_loop>

8002c2a6 <idata_load_loop_end>:
  lda.w   r1, _end
8002c2a6:	48 a0       	lddpc	r0,8002c2cc <udata_clear_loop_end+0x14>
  cp      r0, r1
8002c2a8:	48 a1       	lddpc	r1,8002c2d0 <udata_clear_loop_end+0x18>
  brhs    udata_clear_loop_end
8002c2aa:	02 30       	cp.w	r0,r1
  mov     r2, 0
8002c2ac:	c0 62       	brcc	8002c2b8 <udata_clear_loop_end>
  mov     r3, 0
8002c2ae:	30 02       	mov	r2,0
udata_clear_loop:
  st.d    r0++, r2
8002c2b0:	30 03       	mov	r3,0

8002c2b2 <udata_clear_loop>:
  cp      r0, r1
8002c2b2:	a1 22       	st.d	r0++,r2
  brlo    udata_clear_loop
8002c2b4:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8002c2b6:	cf e3       	brcs	8002c2b2 <udata_clear_loop>

8002c2b8 <udata_clear_loop_end>:
8002c2b8:	fe cf e6 ec 	sub	pc,pc,-6420
8002c2bc:	00 01       	add	r1,r0
8002c2be:	00 00       	add	r0,r0
8002c2c0:	00 00       	add	r0,r0
8002c2c2:	00 04       	add	r4,r0
8002c2c4:	00 00       	add	r0,r0
8002c2c6:	24 78       	sub	r8,71
8002c2c8:	80 03       	ld.sh	r3,r0[0x0]
8002c2ca:	22 48       	sub	r8,36
8002c2cc:	00 00       	add	r0,r0
8002c2ce:	24 78       	sub	r8,71
8002c2d0:	00 00       	add	r0,r0
8002c2d2:	9a a8       	ld.uh	r8,sp[0x4]

8002c2d4 <board_init>:
8002c2d4:	eb cd 40 c0 	pushm	r6-r7,lr
#if defined (CONF_BOARD_AT45DBX)
#define AT45DBX_MEM_CNT             1
#endif

void board_init(void)
{
8002c2d8:	1a 97       	mov	r7,sp
8002c2da:	48 76       	lddpc	r6,8002c2f4 <board_init+0x20>
8002c2dc:	1e 26       	rsub	r6,pc
		sizeof(AT45DBX_SPI_GPIO_MAP) / sizeof(AT45DBX_SPI_GPIO_MAP[0]));
#endif

	// Configure the pins connected to LEDs as output and set their default
	// initial state to high (LEDs off).        
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
8002c2de:	30 1b       	mov	r11,1
8002c2e0:	32 0c       	mov	r12,32
8002c2e2:	f0 16 00 3c 	mcall	r6[240]
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
8002c2e6:	30 1b       	mov	r11,1
8002c2e8:	32 1c       	mov	r12,33
8002c2ea:	f0 16 00 3c 	mcall	r6[240]
  };

  // TWI gpio pins cofiguration
  gpio_enable_module(TWI_GPIO_MAP, sizeof(TWI_GPIO_MAP) / sizeof(TWI_GPIO_MAP[0]));
#endif
}
8002c2ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c2f2:	00 00       	add	r0,r0
8002c2f4:	80 02       	ld.sh	r2,r0[0x0]
8002c2f6:	c1 60       	breq	8002c322 <cpu_irq_restore+0xc>

8002c2f8 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8002c2f8:	eb cd 40 80 	pushm	r7,lr
8002c2fc:	1a 97       	mov	r7,sp
8002c2fe:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8002c300:	e1 b8 00 00 	mfsr	r8,0x0
8002c304:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8002c308:	d3 03       	ssrf	0x10

	return flags;
8002c30a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002c30e:	10 9c       	mov	r12,r8
8002c310:	2f fd       	sub	sp,-4
8002c312:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c316 <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8002c316:	eb cd 40 80 	pushm	r7,lr
8002c31a:	1a 97       	mov	r7,sp
8002c31c:	20 1d       	sub	sp,4
8002c31e:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8002c322:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c326:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8002c32a:	2f fd       	sub	sp,-4
8002c32c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c330 <osc_priv_enable_osc0>:
 */
#include <osc.h>

#ifdef BOARD_OSC0_HZ
void osc_priv_enable_osc0(void)
{
8002c330:	eb cd 40 c0 	pushm	r6-r7,lr
8002c334:	1a 97       	mov	r7,sp
8002c336:	20 1d       	sub	sp,4
8002c338:	48 c6       	lddpc	r6,8002c368 <osc_priv_enable_osc0+0x38>
8002c33a:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002c33c:	cd ef       	rcall	8002c2f8 <cpu_irq_save>
8002c33e:	18 98       	mov	r8,r12
8002c340:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL;
8002c344:	fe 78 08 00 	mov	r8,-63488
8002c348:	32 49       	mov	r9,36
8002c34a:	ea 19 aa 00 	orh	r9,0xaa00
8002c34e:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl[0] =
8002c350:	fe 78 08 00 	mov	r8,-63488
8002c354:	e0 79 0c 07 	mov	r9,68615
8002c358:	91 99       	st.w	r8[0x24],r9
			(OSC0_STARTUP_VALUE << AVR32_SCIF_OSCCTRL_STARTUP)
			| (OSC0_GAIN_VALUE << AVR32_SCIF_OSCCTRL_GAIN)
			| (OSC0_MODE_VALUE << AVR32_SCIF_OSCCTRL_MODE)
			| (1U << AVR32_SCIF_OSCCTRL_OSCEN);
	cpu_irq_restore(flags);
8002c35a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c35e:	cd cf       	rcall	8002c316 <cpu_irq_restore>
}
8002c360:	2f fd       	sub	sp,-4
8002c362:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c366:	00 00       	add	r0,r0
8002c368:	80 02       	ld.sh	r2,r0[0x0]
8002c36a:	c1 be       	rcall	8002bfa0 <usart_read_char+0x4>

8002c36c <osc_priv_disable_osc0>:

void osc_priv_disable_osc0(void)
{
8002c36c:	eb cd 40 c0 	pushm	r6-r7,lr
8002c370:	1a 97       	mov	r7,sp
8002c372:	20 1d       	sub	sp,4
8002c374:	48 b6       	lddpc	r6,8002c3a0 <osc_priv_disable_osc0+0x34>
8002c376:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002c378:	cc 0f       	rcall	8002c2f8 <cpu_irq_save>
8002c37a:	18 98       	mov	r8,r12
8002c37c:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL;
8002c380:	fe 78 08 00 	mov	r8,-63488
8002c384:	32 49       	mov	r9,36
8002c386:	ea 19 aa 00 	orh	r9,0xaa00
8002c38a:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl[0] = 0;
8002c38c:	fe 78 08 00 	mov	r8,-63488
8002c390:	30 09       	mov	r9,0
8002c392:	91 99       	st.w	r8[0x24],r9
	cpu_irq_restore(flags);
8002c394:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c398:	cb ff       	rcall	8002c316 <cpu_irq_restore>
}
8002c39a:	2f fd       	sub	sp,-4
8002c39c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c3a0:	80 02       	ld.sh	r2,r0[0x0]
8002c3a2:	c1 fa       	rjmp	8002bfe0 <usart_read_char+0x44>

8002c3a4 <osc_priv_enable_osc32>:
}
#endif /* BOARD_OSC0_HZ */

#ifdef BOARD_OSC32_HZ
void osc_priv_enable_osc32(void)
{
8002c3a4:	eb cd 40 c0 	pushm	r6-r7,lr
8002c3a8:	1a 97       	mov	r7,sp
8002c3aa:	20 1d       	sub	sp,4
8002c3ac:	48 c6       	lddpc	r6,8002c3dc <osc_priv_enable_osc32+0x38>
8002c3ae:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002c3b0:	ca 4f       	rcall	8002c2f8 <cpu_irq_save>
8002c3b2:	18 98       	mov	r8,r12
8002c3b4:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL32;
8002c3b8:	fe 78 08 00 	mov	r8,-63488
8002c3bc:	34 c9       	mov	r9,76
8002c3be:	ea 19 aa 00 	orh	r9,0xaa00
8002c3c2:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl32 =
8002c3c4:	fe 78 08 00 	mov	r8,-63488
8002c3c8:	e2 69 01 01 	mov	r9,131329
8002c3cc:	f1 49 00 4c 	st.w	r8[76],r9
			(OSC32_STARTUP_VALUE << AVR32_SCIF_OSCCTRL32_STARTUP)
			| (OSC32_MODE_VALUE << AVR32_SCIF_OSCCTRL32_MODE)
			| (1U << AVR32_SCIF_OSCCTRL32_OSC32EN);
	cpu_irq_restore(flags);
8002c3d0:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c3d4:	ca 1f       	rcall	8002c316 <cpu_irq_restore>
}
8002c3d6:	2f fd       	sub	sp,-4
8002c3d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c3dc:	80 02       	ld.sh	r2,r0[0x0]
8002c3de:	c2 32       	brcc	8002c424 <osc_priv_enable_rc8m+0x8>

8002c3e0 <osc_priv_disable_osc32>:

void osc_priv_disable_osc32(void)
{
8002c3e0:	eb cd 40 c0 	pushm	r6-r7,lr
8002c3e4:	1a 97       	mov	r7,sp
8002c3e6:	20 1d       	sub	sp,4
8002c3e8:	48 c6       	lddpc	r6,8002c418 <osc_priv_disable_osc32+0x38>
8002c3ea:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002c3ec:	c8 6f       	rcall	8002c2f8 <cpu_irq_save>
8002c3ee:	18 98       	mov	r8,r12
8002c3f0:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL32;
8002c3f4:	fe 78 08 00 	mov	r8,-63488
8002c3f8:	34 c9       	mov	r9,76
8002c3fa:	ea 19 aa 00 	orh	r9,0xaa00
8002c3fe:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl32 = 0;
8002c400:	fe 78 08 00 	mov	r8,-63488
8002c404:	30 09       	mov	r9,0
8002c406:	f1 49 00 4c 	st.w	r8[76],r9
	cpu_irq_restore(flags);
8002c40a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c40e:	c8 4f       	rcall	8002c316 <cpu_irq_restore>
}
8002c410:	2f fd       	sub	sp,-4
8002c412:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c416:	00 00       	add	r0,r0
8002c418:	80 02       	ld.sh	r2,r0[0x0]
8002c41a:	c2 6e       	rcall	8002c066 <usart_write_line+0x2e>

8002c41c <osc_priv_enable_rc8m>:
#endif /* BOARD_OSC0_HZ */

void osc_priv_enable_rc8m(void)
{
8002c41c:	eb cd 40 c0 	pushm	r6-r7,lr
8002c420:	1a 97       	mov	r7,sp
8002c422:	20 3d       	sub	sp,12
8002c424:	49 d6       	lddpc	r6,8002c498 <osc_priv_enable_rc8m+0x7c>
8002c426:	1e 26       	rsub	r6,pc
	irqflags_t flags;
	uint32_t   rccr8;
    uint32_t* calibration_bits = (uint32_t*)0x80800200;
8002c428:	e0 68 02 00 	mov	r8,512
8002c42c:	ea 18 80 80 	orh	r8,0x8080
8002c430:	ef 48 ff fc 	st.w	r7[-4],r8
	/* Wait for the CALIB field to be updated from fuses after reset */
	while (!(AVR32_SCIF.rccr8 & AVR32_SCIF_RCCR8_FCD_MASK)) {
8002c434:	fe 78 08 00 	mov	r8,-63488
8002c438:	71 28       	ld.w	r8,r8[0x48]
8002c43a:	e6 18 00 01 	andh	r8,0x1,COH
8002c43e:	cf b0       	breq	8002c434 <osc_priv_enable_rc8m+0x18>
		/* Do nothing */
	}

	/* Enable the oscillator without touching the CALIB and FCD fields */
	flags = cpu_irq_save();
8002c440:	c5 cf       	rcall	8002c2f8 <cpu_irq_save>
8002c442:	18 98       	mov	r8,r12
8002c444:	ef 48 ff f4 	st.w	r7[-12],r8
	rccr8 = AVR32_SCIF.rccr8;
8002c448:	fe 78 08 00 	mov	r8,-63488
8002c44c:	71 28       	ld.w	r8,r8[0x48]
8002c44e:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 &= AVR32_SCIF_RCCR8_FCD_MASK | ((*calibration_bits)&AVR32_SCIF_RCCR8_CALIB_MASK);
8002c452:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c456:	70 08       	ld.w	r8,r8[0x0]
8002c458:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8002c45c:	b1 a8       	sbr	r8,0x10
8002c45e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c462:	f3 e8 00 08 	and	r8,r9,r8
8002c466:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 |= 1U << AVR32_SCIF_RCOSC8_EN;
8002c46a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c46e:	b9 a8       	sbr	r8,0x18
8002c470:	ef 48 ff f8 	st.w	r7[-8],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RCCR8;
8002c474:	fe 78 08 00 	mov	r8,-63488
8002c478:	34 89       	mov	r9,72
8002c47a:	ea 19 aa 00 	orh	r9,0xaa00
8002c47e:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rccr8 = rccr8;
8002c480:	fe 78 08 00 	mov	r8,-63488
8002c484:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c488:	f1 49 00 48 	st.w	r8[72],r9
	cpu_irq_restore(flags);
8002c48c:	ee fc ff f4 	ld.w	r12,r7[-12]
8002c490:	c4 3f       	rcall	8002c316 <cpu_irq_restore>
}
8002c492:	2f dd       	sub	sp,-12
8002c494:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c498:	80 02       	ld.sh	r2,r0[0x0]
8002c49a:	c2 aa       	rjmp	8002c0ee <usart_get_echo_line+0x66>

8002c49c <osc_priv_disable_rc8m>:

void osc_priv_disable_rc8m(void)
{
8002c49c:	eb cd 40 c0 	pushm	r6-r7,lr
8002c4a0:	1a 97       	mov	r7,sp
8002c4a2:	20 2d       	sub	sp,8
8002c4a4:	49 36       	lddpc	r6,8002c4f0 <osc_priv_disable_rc8m+0x54>
8002c4a6:	1e 26       	rsub	r6,pc
	irqflags_t flags;
	uint32_t   rccr8;

	/* Disable the oscillator without touching the CALIB and FCD fields */
	flags = cpu_irq_save();
8002c4a8:	c2 8f       	rcall	8002c2f8 <cpu_irq_save>
8002c4aa:	18 98       	mov	r8,r12
8002c4ac:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 = AVR32_SCIF.rccr8;
8002c4b0:	fe 78 08 00 	mov	r8,-63488
8002c4b4:	71 28       	ld.w	r8,r8[0x48]
8002c4b6:	ef 48 ff fc 	st.w	r7[-4],r8
	rccr8 &= AVR32_SCIF_RCCR8_FCD_MASK | AVR32_SCIF_RCCR8_CALIB_MASK;
8002c4ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c4be:	e4 18 00 01 	andh	r8,0x1
8002c4c2:	e0 18 00 ff 	andl	r8,0xff
8002c4c6:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RCCR8;
8002c4ca:	fe 78 08 00 	mov	r8,-63488
8002c4ce:	34 89       	mov	r9,72
8002c4d0:	ea 19 aa 00 	orh	r9,0xaa00
8002c4d4:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rccr8 = rccr8;
8002c4d6:	fe 78 08 00 	mov	r8,-63488
8002c4da:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c4de:	f1 49 00 48 	st.w	r8[72],r9
	cpu_irq_restore(flags);
8002c4e2:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c4e6:	c1 8f       	rcall	8002c316 <cpu_irq_restore>
}
8002c4e8:	2f ed       	sub	sp,-8
8002c4ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c4ee:	00 00       	add	r0,r0
8002c4f0:	80 02       	ld.sh	r2,r0[0x0]
8002c4f2:	c3 2a       	rjmp	8002c156 <delay_ms+0x26>

8002c4f4 <osc_priv_enable_rc120m>:

void osc_priv_enable_rc120m(void)
{
8002c4f4:	eb cd 40 c0 	pushm	r6-r7,lr
8002c4f8:	1a 97       	mov	r7,sp
8002c4fa:	20 1d       	sub	sp,4
8002c4fc:	48 c6       	lddpc	r6,8002c52c <osc_priv_enable_rc120m+0x38>
8002c4fe:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002c500:	cf ce       	rcall	8002c2f8 <cpu_irq_save>
8002c502:	18 98       	mov	r8,r12
8002c504:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
8002c508:	fe 78 08 00 	mov	r8,-63488
8002c50c:	35 89       	mov	r9,88
8002c50e:	ea 19 aa 00 	orh	r9,0xaa00
8002c512:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc120mcr = 1U << AVR32_SCIF_RC120MCR_EN;
8002c514:	fe 78 08 00 	mov	r8,-63488
8002c518:	30 19       	mov	r9,1
8002c51a:	f1 49 00 58 	st.w	r8[88],r9
	cpu_irq_restore(flags);
8002c51e:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c522:	cf ae       	rcall	8002c316 <cpu_irq_restore>
}
8002c524:	2f fd       	sub	sp,-4
8002c526:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c52a:	00 00       	add	r0,r0
8002c52c:	80 02       	ld.sh	r2,r0[0x0]
8002c52e:	c3 82       	brcc	8002c59e <cpu_irq_restore+0x14>

8002c530 <osc_priv_disable_rc120m>:

void osc_priv_disable_rc120m(void)
{
8002c530:	eb cd 40 c0 	pushm	r6-r7,lr
8002c534:	1a 97       	mov	r7,sp
8002c536:	20 1d       	sub	sp,4
8002c538:	48 c6       	lddpc	r6,8002c568 <osc_priv_disable_rc120m+0x38>
8002c53a:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002c53c:	cd ee       	rcall	8002c2f8 <cpu_irq_save>
8002c53e:	18 98       	mov	r8,r12
8002c540:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
8002c544:	fe 78 08 00 	mov	r8,-63488
8002c548:	35 89       	mov	r9,88
8002c54a:	ea 19 aa 00 	orh	r9,0xaa00
8002c54e:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc120mcr = 0;
8002c550:	fe 78 08 00 	mov	r8,-63488
8002c554:	30 09       	mov	r9,0
8002c556:	f1 49 00 58 	st.w	r8[88],r9
	cpu_irq_restore(flags);
8002c55a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c55e:	cd ce       	rcall	8002c316 <cpu_irq_restore>
}
8002c560:	2f fd       	sub	sp,-4
8002c562:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c566:	00 00       	add	r0,r0
8002c568:	80 02       	ld.sh	r2,r0[0x0]
8002c56a:	c3 be       	rcall	8002c1e0 <delay_ms+0xb0>

8002c56c <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8002c56c:	eb cd 40 80 	pushm	r7,lr
8002c570:	1a 97       	mov	r7,sp
8002c572:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8002c574:	e1 b8 00 00 	mfsr	r8,0x0
8002c578:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8002c57c:	d3 03       	ssrf	0x10

	return flags;
8002c57e:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002c582:	10 9c       	mov	r12,r8
8002c584:	2f fd       	sub	sp,-4
8002c586:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c58a <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8002c58a:	eb cd 40 80 	pushm	r7,lr
8002c58e:	1a 97       	mov	r7,sp
8002c590:	20 1d       	sub	sp,4
8002c592:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8002c596:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c59a:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8002c59e:	2f fd       	sub	sp,-4
8002c5a0:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c5a4 <pll_config_write>:
#include <avr32/io.h>
#include <compiler.h>
#include <pll.h>

void pll_config_write(const struct pll_config *cfg, unsigned int pll_id)
{
8002c5a4:	eb cd 40 c0 	pushm	r6-r7,lr
8002c5a8:	1a 97       	mov	r7,sp
8002c5aa:	20 3d       	sub	sp,12
8002c5ac:	49 26       	lddpc	r6,8002c5f4 <pll_config_write+0x50>
8002c5ae:	1e 26       	rsub	r6,pc
8002c5b0:	ef 4c ff f8 	st.w	r7[-8],r12
8002c5b4:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
8002c5b8:	cd af       	rcall	8002c56c <cpu_irq_save>
8002c5ba:	18 98       	mov	r8,r12
8002c5bc:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
8002c5c0:	fe 78 08 00 	mov	r8,-63488
8002c5c4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c5c8:	2f 99       	sub	r9,-7
8002c5ca:	a3 69       	lsl	r9,0x2
8002c5cc:	ea 19 aa 00 	orh	r9,0xaa00
8002c5d0:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = cfg->ctrl;
8002c5d2:	fe 78 08 00 	mov	r8,-63488
8002c5d6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c5da:	ee fa ff f8 	ld.w	r10,r7[-8]
8002c5de:	74 0a       	ld.w	r10,r10[0x0]
8002c5e0:	2f 99       	sub	r9,-7
8002c5e2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
8002c5e6:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c5ea:	cd 0f       	rcall	8002c58a <cpu_irq_restore>
}
8002c5ec:	2f dd       	sub	sp,-12
8002c5ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c5f2:	00 00       	add	r0,r0
8002c5f4:	80 02       	ld.sh	r2,r0[0x0]
8002c5f6:	c4 32       	brcc	8002c67c <pll_disable+0x30>

8002c5f8 <pll_enable>:

void pll_enable(const struct pll_config *cfg, unsigned int pll_id)
{
8002c5f8:	eb cd 40 c0 	pushm	r6-r7,lr
8002c5fc:	1a 97       	mov	r7,sp
8002c5fe:	20 3d       	sub	sp,12
8002c600:	49 26       	lddpc	r6,8002c648 <pll_enable+0x50>
8002c602:	1e 26       	rsub	r6,pc
8002c604:	ef 4c ff f8 	st.w	r7[-8],r12
8002c608:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
8002c60c:	cb 0f       	rcall	8002c56c <cpu_irq_save>
8002c60e:	18 98       	mov	r8,r12
8002c610:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
8002c614:	fe 78 08 00 	mov	r8,-63488
8002c618:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c61c:	2f 99       	sub	r9,-7
8002c61e:	a3 69       	lsl	r9,0x2
8002c620:	ea 19 aa 00 	orh	r9,0xaa00
8002c624:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = cfg->ctrl | (1U << AVR32_SCIF_PLLEN);
8002c626:	fe 78 08 00 	mov	r8,-63488
8002c62a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c62e:	ee fa ff f8 	ld.w	r10,r7[-8]
8002c632:	74 0a       	ld.w	r10,r10[0x0]
8002c634:	a1 aa       	sbr	r10,0x0
8002c636:	2f 99       	sub	r9,-7
8002c638:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
8002c63c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c640:	ca 5f       	rcall	8002c58a <cpu_irq_restore>
}
8002c642:	2f dd       	sub	sp,-12
8002c644:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c648:	80 02       	ld.sh	r2,r0[0x0]
8002c64a:	c4 86       	brmi	8002c6da <osc_enable+0xa>

8002c64c <pll_disable>:

void pll_disable(unsigned int pll_id)
{
8002c64c:	eb cd 40 c0 	pushm	r6-r7,lr
8002c650:	1a 97       	mov	r7,sp
8002c652:	20 2d       	sub	sp,8
8002c654:	49 06       	lddpc	r6,8002c694 <pll_disable+0x48>
8002c656:	1e 26       	rsub	r6,pc
8002c658:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
8002c65c:	c8 8f       	rcall	8002c56c <cpu_irq_save>
8002c65e:	18 98       	mov	r8,r12
8002c660:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
8002c664:	fe 78 08 00 	mov	r8,-63488
8002c668:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c66c:	2f 99       	sub	r9,-7
8002c66e:	a3 69       	lsl	r9,0x2
8002c670:	ea 19 aa 00 	orh	r9,0xaa00
8002c674:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = 0;
8002c676:	fe 78 08 00 	mov	r8,-63488
8002c67a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c67e:	2f 99       	sub	r9,-7
8002c680:	30 0a       	mov	r10,0
8002c682:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
8002c686:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c68a:	c8 0f       	rcall	8002c58a <cpu_irq_restore>
}
8002c68c:	2f ed       	sub	sp,-8
8002c68e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c692:	00 00       	add	r0,r0
8002c694:	80 02       	ld.sh	r2,r0[0x0]
8002c696:	c4 da       	rjmp	8002c330 <osc_priv_enable_osc0>

8002c698 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8002c698:	eb cd 40 80 	pushm	r7,lr
8002c69c:	1a 97       	mov	r7,sp
8002c69e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8002c6a0:	e1 b8 00 00 	mfsr	r8,0x0
8002c6a4:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8002c6a8:	d3 03       	ssrf	0x10

	return flags;
8002c6aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002c6ae:	10 9c       	mov	r12,r8
8002c6b0:	2f fd       	sub	sp,-4
8002c6b2:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c6b6 <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8002c6b6:	eb cd 40 80 	pushm	r7,lr
8002c6ba:	1a 97       	mov	r7,sp
8002c6bc:	20 1d       	sub	sp,4
8002c6be:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8002c6c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c6c6:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8002c6ca:	2f fd       	sub	sp,-4
8002c6cc:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c6d0 <osc_enable>:
extern void osc_priv_enable_rc120m(void);
extern void osc_priv_disable_rc120m(void);
extern bool osc_priv_rc120m_is_ready(void);

static inline void osc_enable(uint8_t id)
{
8002c6d0:	eb cd 40 c0 	pushm	r6-r7,lr
8002c6d4:	1a 97       	mov	r7,sp
8002c6d6:	20 1d       	sub	sp,4
8002c6d8:	49 16       	lddpc	r6,8002c71c <osc_enable+0x4c>
8002c6da:	1e 26       	rsub	r6,pc
8002c6dc:	18 98       	mov	r8,r12
8002c6de:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002c6e2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002c6e6:	58 28       	cp.w	r8,2
8002c6e8:	c1 10       	breq	8002c70a <osc_enable+0x3a>
8002c6ea:	e0 89 00 05 	brgt	8002c6f4 <osc_enable+0x24>
8002c6ee:	58 08       	cp.w	r8,0
8002c6f0:	c0 70       	breq	8002c6fe <osc_enable+0x2e>
8002c6f2:	c1 18       	rjmp	8002c714 <osc_enable+0x44>
8002c6f4:	58 38       	cp.w	r8,3
8002c6f6:	c0 70       	breq	8002c704 <osc_enable+0x34>
8002c6f8:	58 48       	cp.w	r8,4
8002c6fa:	c0 b0       	breq	8002c710 <osc_enable+0x40>
8002c6fc:	c0 c8       	rjmp	8002c714 <osc_enable+0x44>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
8002c6fe:	f0 16 01 e1 	mcall	r6[1924]
		break;
8002c702:	c0 98       	rjmp	8002c714 <osc_enable+0x44>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
8002c704:	f0 16 01 d8 	mcall	r6[1888]
		break;
8002c708:	c0 68       	rjmp	8002c714 <osc_enable+0x44>
#endif

	case OSC_ID_RC8M:
		osc_priv_enable_rc8m();
8002c70a:	f0 16 01 6c 	mcall	r6[1456]
		break;
8002c70e:	c0 38       	rjmp	8002c714 <osc_enable+0x44>

	case OSC_ID_RC120M:
		osc_priv_enable_rc120m();
8002c710:	f0 16 01 97 	mcall	r6[1628]

	default:
		/* unhandled_case(id); */
		break;
	}
}
8002c714:	2f fd       	sub	sp,-4
8002c716:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c71a:	00 00       	add	r0,r0
8002c71c:	80 02       	ld.sh	r2,r0[0x0]
8002c71e:	c5 5e       	rcall	8002c3c8 <osc_priv_enable_osc32+0x24>

8002c720 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint8_t id)
{
8002c720:	eb cd 40 80 	pushm	r7,lr
8002c724:	1a 97       	mov	r7,sp
8002c726:	20 1d       	sub	sp,4
8002c728:	18 98       	mov	r8,r12
8002c72a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002c72e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002c732:	58 38       	cp.w	r8,3
8002c734:	c1 50       	breq	8002c75e <osc_is_ready+0x3e>
8002c736:	e0 89 00 07 	brgt	8002c744 <osc_is_ready+0x24>
8002c73a:	58 08       	cp.w	r8,0
8002c73c:	c0 90       	breq	8002c74e <osc_is_ready+0x2e>
8002c73e:	58 28       	cp.w	r8,2
8002c740:	c1 70       	breq	8002c76e <osc_is_ready+0x4e>
8002c742:	c2 88       	rjmp	8002c792 <osc_is_ready+0x72>
8002c744:	58 48       	cp.w	r8,4
8002c746:	c1 c0       	breq	8002c77e <osc_is_ready+0x5e>
8002c748:	58 58       	cp.w	r8,5
8002c74a:	c2 20       	breq	8002c78e <osc_is_ready+0x6e>
8002c74c:	c2 38       	rjmp	8002c792 <osc_is_ready+0x72>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC0RDY));
8002c74e:	fe 78 08 00 	mov	r8,-63488
8002c752:	70 58       	ld.w	r8,r8[0x14]
8002c754:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002c758:	5f 18       	srne	r8
8002c75a:	5c 58       	castu.b	r8
8002c75c:	c1 c8       	rjmp	8002c794 <osc_is_ready+0x74>
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC1RDY));
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC32RDY));
8002c75e:	fe 78 08 00 	mov	r8,-63488
8002c762:	70 58       	ld.w	r8,r8[0x14]
8002c764:	e2 18 00 04 	andl	r8,0x4,COH
8002c768:	5f 18       	srne	r8
8002c76a:	5c 58       	castu.b	r8
8002c76c:	c1 48       	rjmp	8002c794 <osc_is_ready+0x74>
#endif

	case OSC_ID_RC8M:
		return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_RCOSC8MRDY));
8002c76e:	fe 78 08 00 	mov	r8,-63488
8002c772:	70 58       	ld.w	r8,r8[0x14]
8002c774:	e2 18 00 08 	andl	r8,0x8,COH
8002c778:	5f 18       	srne	r8
8002c77a:	5c 58       	castu.b	r8
8002c77c:	c0 c8       	rjmp	8002c794 <osc_is_ready+0x74>

	case OSC_ID_RC120M:
		return !!(AVR32_SCIF.rc120mcr & (1 << AVR32_SCIF_RC120MCR_EN));
8002c77e:	fe 78 08 00 	mov	r8,-63488
8002c782:	71 68       	ld.w	r8,r8[0x58]
8002c784:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002c788:	5f 18       	srne	r8
8002c78a:	5c 58       	castu.b	r8
8002c78c:	c0 48       	rjmp	8002c794 <osc_is_ready+0x74>

	case OSC_ID_RCSYS:
		/* RCSYS is always ready */
		return true;
8002c78e:	30 18       	mov	r8,1
8002c790:	c0 28       	rjmp	8002c794 <osc_is_ready+0x74>

	default:
		/* unhandled_case(id); */
		return false;
8002c792:	30 08       	mov	r8,0
	}
}
8002c794:	10 9c       	mov	r12,r8
8002c796:	2f fd       	sub	sp,-4
8002c798:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c79c <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
8002c79c:	eb cd 40 80 	pushm	r7,lr
8002c7a0:	1a 97       	mov	r7,sp
8002c7a2:	20 1d       	sub	sp,4
8002c7a4:	18 98       	mov	r8,r12
8002c7a6:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002c7aa:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002c7ae:	58 38       	cp.w	r8,3
8002c7b0:	c1 20       	breq	8002c7d4 <osc_get_rate+0x38>
8002c7b2:	e0 89 00 07 	brgt	8002c7c0 <osc_get_rate+0x24>
8002c7b6:	58 08       	cp.w	r8,0
8002c7b8:	c0 90       	breq	8002c7ca <osc_get_rate+0x2e>
8002c7ba:	58 28       	cp.w	r8,2
8002c7bc:	c0 f0       	breq	8002c7da <osc_get_rate+0x3e>
8002c7be:	c1 b8       	rjmp	8002c7f4 <osc_get_rate+0x58>
8002c7c0:	58 48       	cp.w	r8,4
8002c7c2:	c1 10       	breq	8002c7e4 <osc_get_rate+0x48>
8002c7c4:	58 58       	cp.w	r8,5
8002c7c6:	c1 40       	breq	8002c7ee <osc_get_rate+0x52>
8002c7c8:	c1 68       	rjmp	8002c7f4 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8002c7ca:	e0 68 24 00 	mov	r8,9216
8002c7ce:	ea 18 00 f4 	orh	r8,0xf4
8002c7d2:	c1 28       	rjmp	8002c7f6 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8002c7d4:	e0 68 80 00 	mov	r8,32768
8002c7d8:	c0 f8       	rjmp	8002c7f6 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8002c7da:	e0 68 12 00 	mov	r8,4608
8002c7de:	ea 18 00 7a 	orh	r8,0x7a
8002c7e2:	c0 a8       	rjmp	8002c7f6 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8002c7e4:	e0 68 0e 00 	mov	r8,3584
8002c7e8:	ea 18 07 27 	orh	r8,0x727
8002c7ec:	c0 58       	rjmp	8002c7f6 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8002c7ee:	e0 78 c1 38 	mov	r8,115000
8002c7f2:	c0 28       	rjmp	8002c7f6 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
8002c7f4:	30 08       	mov	r8,0
	}
}
8002c7f6:	10 9c       	mov	r12,r8
8002c7f8:	2f fd       	sub	sp,-4
8002c7fa:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c7fe <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
8002c7fe:	eb cd 40 c0 	pushm	r6-r7,lr
8002c802:	1a 97       	mov	r7,sp
8002c804:	20 1d       	sub	sp,4
8002c806:	48 96       	lddpc	r6,8002c828 <osc_wait_ready+0x2a>
8002c808:	1e 26       	rsub	r6,pc
8002c80a:	18 98       	mov	r8,r12
8002c80c:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
8002c810:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002c814:	10 9c       	mov	r12,r8
8002c816:	c8 5f       	rcall	8002c720 <osc_is_ready>
8002c818:	18 98       	mov	r8,r12
8002c81a:	ec 18 00 01 	eorl	r8,0x1
8002c81e:	5c 58       	castu.b	r8
8002c820:	cf 81       	brne	8002c810 <osc_wait_ready+0x12>
		/* Do nothing */
	}
}
8002c822:	2f fd       	sub	sp,-4
8002c824:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c828:	80 02       	ld.sh	r2,r0[0x0]
8002c82a:	c6 8c       	rcall	8002c8fa <pll_config_init+0x9e>

8002c82c <pll_config_set_option>:
			* CONFIG_PLL##pll_id##_MUL)                            \
			/ CONFIG_PLL##pll_id##_DIV)

static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
8002c82c:	eb cd 40 80 	pushm	r7,lr
8002c830:	1a 97       	mov	r7,sp
8002c832:	20 2d       	sub	sp,8
8002c834:	ef 4c ff fc 	st.w	r7[-4],r12
8002c838:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_SCIF_PLLOPT + option);
8002c83c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c840:	70 09       	ld.w	r9,r8[0x0]
8002c842:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c846:	2f d8       	sub	r8,-3
8002c848:	30 1a       	mov	r10,1
8002c84a:	f4 08 09 48 	lsl	r8,r10,r8
8002c84e:	10 49       	or	r9,r8
8002c850:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c854:	91 09       	st.w	r8[0x0],r9
}
8002c856:	2f ed       	sub	sp,-8
8002c858:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c85c <pll_config_init>:
 * The PLL options #PLL_OPT_VCO_RANGE_LOW and #PLL_OPT_OUTPUT_DIV will
 * be set automatically based on the calculated target frequency.
 */
static inline void pll_config_init(struct pll_config *cfg,
		enum pll_source src, unsigned int div, unsigned int mul)
{
8002c85c:	eb cd 40 c0 	pushm	r6-r7,lr
8002c860:	1a 97       	mov	r7,sp
8002c862:	20 5d       	sub	sp,20
8002c864:	4b 46       	lddpc	r6,8002c934 <pll_config_init+0xd8>
8002c866:	1e 26       	rsub	r6,pc
8002c868:	ef 4c ff f8 	st.w	r7[-8],r12
8002c86c:	ef 4b ff f4 	st.w	r7[-12],r11
8002c870:	ef 4a ff f0 	st.w	r7[-16],r10
8002c874:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t vco_hz;

	Assert(src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(src) * mul;
8002c878:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c87c:	5c 58       	castu.b	r8
8002c87e:	10 9c       	mov	r12,r8
8002c880:	c8 ef       	rcall	8002c79c <osc_get_rate>
8002c882:	18 99       	mov	r9,r12
8002c884:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002c888:	f2 08 02 48 	mul	r8,r9,r8
8002c88c:	ef 48 ff fc 	st.w	r7[-4],r8
	vco_hz /= div;
8002c890:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c894:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002c898:	f0 09 0d 08 	divu	r8,r8,r9
8002c89c:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(vco_hz >= PLL_MIN_HZ);
	Assert(vco_hz <= PLL_MAX_HZ);

	cfg->ctrl = 0;
8002c8a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c8a4:	30 09       	mov	r9,0
8002c8a6:	91 09       	st.w	r8[0x0],r9

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
8002c8a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c8ac:	e0 69 b3 ff 	mov	r9,46079
8002c8b0:	ea 19 04 c4 	orh	r9,0x4c4
8002c8b4:	12 38       	cp.w	r8,r9
8002c8b6:	e0 8b 00 15 	brhi	8002c8e0 <pll_config_init+0x84>
8002c8ba:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002c8be:	58 88       	cp.w	r8,8
8002c8c0:	e0 8b 00 10 	brhi	8002c8e0 <pll_config_init+0x84>
		mul *= 2;
8002c8c4:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002c8c8:	a1 78       	lsl	r8,0x1
8002c8ca:	ef 48 ff ec 	st.w	r7[-20],r8
		vco_hz *= 2;
8002c8ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c8d2:	a1 78       	lsl	r8,0x1
8002c8d4:	ef 48 ff fc 	st.w	r7[-4],r8
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
8002c8d8:	30 1b       	mov	r11,1
8002c8da:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c8de:	ca 7f       	rcall	8002c82c <pll_config_set_option>
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
8002c8e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c8e4:	e0 69 fe 7f 	mov	r9,65151
8002c8e8:	ea 19 0a 21 	orh	r9,0xa21
8002c8ec:	12 38       	cp.w	r8,r9
8002c8ee:	e0 8b 00 06 	brhi	8002c8fa <pll_config_init+0x9e>
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);
8002c8f2:	30 0b       	mov	r11,0
8002c8f4:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c8f8:	c9 af       	rcall	8002c82c <pll_config_set_option>

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
8002c8fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c8fe:	70 09       	ld.w	r9,r8[0x0]
8002c900:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002c904:	20 18       	sub	r8,1
8002c906:	f0 0a 15 10 	lsl	r10,r8,0x10
		| (div << AVR32_SCIF_PLLDIV)
8002c90a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002c90e:	a9 68       	lsl	r8,0x8
		| (PLL_MAX_STARTUP_CYCLES << AVR32_SCIF_PLLCOUNT)
8002c910:	10 4a       	or	r10,r8
		| (src << AVR32_SCIF_PLLOSC);
8002c912:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c916:	a1 78       	lsl	r8,0x1
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
8002c918:	f5 e8 10 08 	or	r8,r10,r8
8002c91c:	f3 e8 10 08 	or	r8,r9,r8
8002c920:	10 99       	mov	r9,r8
8002c922:	ea 19 3f 00 	orh	r9,0x3f00
8002c926:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c92a:	91 09       	st.w	r8[0x0],r9
		| (div << AVR32_SCIF_PLLDIV)
		| (PLL_MAX_STARTUP_CYCLES << AVR32_SCIF_PLLCOUNT)
		| (src << AVR32_SCIF_PLLOSC);
}
8002c92c:	2f bd       	sub	sp,-20
8002c92e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c932:	00 00       	add	r0,r0
8002c934:	80 02       	ld.sh	r2,r0[0x0]
8002c936:	c6 ea       	rjmp	8002c612 <pll_enable+0x1a>

8002c938 <pll_is_locked>:
extern void pll_config_write(const struct pll_config *cfg, unsigned int pll_id);
extern void pll_enable(const struct pll_config *cfg, unsigned int pll_id);
extern void pll_disable(unsigned int pll_id);

static inline bool pll_is_locked(unsigned int pll_id)
{
8002c938:	eb cd 40 80 	pushm	r7,lr
8002c93c:	1a 97       	mov	r7,sp
8002c93e:	20 1d       	sub	sp,4
8002c940:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_SCIF.pclksr & (1U << (AVR32_SCIF_PLL0_LOCK + pll_id)));
8002c944:	fe 78 08 00 	mov	r8,-63488
8002c948:	70 59       	ld.w	r9,r8[0x14]
8002c94a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c94e:	2f c8       	sub	r8,-4
8002c950:	30 1a       	mov	r10,1
8002c952:	f4 08 09 48 	lsl	r8,r10,r8
8002c956:	f3 e8 00 08 	and	r8,r9,r8
8002c95a:	5f 18       	srne	r8
8002c95c:	5c 58       	castu.b	r8
}
8002c95e:	10 9c       	mov	r12,r8
8002c960:	2f fd       	sub	sp,-4
8002c962:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c966 <pll_enable_source_sync>:

static inline void pll_enable_source_sync(enum pll_source src)
{
8002c966:	eb cd 40 c0 	pushm	r6-r7,lr
8002c96a:	1a 97       	mov	r7,sp
8002c96c:	20 1d       	sub	sp,4
8002c96e:	49 06       	lddpc	r6,8002c9ac <pll_enable_source_sync+0x46>
8002c970:	1e 26       	rsub	r6,pc
8002c972:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
8002c976:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c97a:	58 18       	cp.w	r8,1
8002c97c:	e0 88 00 05 	brls	8002c986 <pll_enable_source_sync+0x20>
8002c980:	58 28       	cp.w	r8,2
8002c982:	c0 d0       	breq	8002c99c <pll_enable_source_sync+0x36>
8002c984:	c1 08       	rjmp	8002c9a4 <pll_enable_source_sync+0x3e>
	case PLL_SRC_OSC0: /* Fall through */
	case PLL_SRC_OSC1:
		osc_enable(src);
8002c986:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c98a:	5c 58       	castu.b	r8
8002c98c:	10 9c       	mov	r12,r8
8002c98e:	ca 1e       	rcall	8002c6d0 <osc_enable>
		osc_wait_ready(src);
8002c990:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c994:	5c 58       	castu.b	r8
8002c996:	10 9c       	mov	r12,r8
8002c998:	c3 3f       	rcall	8002c7fe <osc_wait_ready>
		break;
8002c99a:	c0 58       	rjmp	8002c9a4 <pll_enable_source_sync+0x3e>

	case PLL_SRC_RC8M:
		osc_enable(OSC_ID_RC8M);
8002c99c:	30 2c       	mov	r12,2
8002c99e:	c9 9e       	rcall	8002c6d0 <osc_enable>
		osc_wait_ready(OSC_ID_RC8M);
8002c9a0:	30 2c       	mov	r12,2
8002c9a2:	c2 ef       	rcall	8002c7fe <osc_wait_ready>

	default:
		// unhandled_case(src);
		break;
	}
}
8002c9a4:	2f fd       	sub	sp,-4
8002c9a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c9aa:	00 00       	add	r0,r0
8002c9ac:	80 02       	ld.sh	r2,r0[0x0]
8002c9ae:	c7 f4       	brge	8002caac <genclk_enable+0x1e>

8002c9b0 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
8002c9b0:	eb cd 40 c0 	pushm	r6-r7,lr
8002c9b4:	1a 97       	mov	r7,sp
8002c9b6:	20 1d       	sub	sp,4
8002c9b8:	48 96       	lddpc	r6,8002c9dc <pll_wait_for_lock+0x2c>
8002c9ba:	1e 26       	rsub	r6,pc
8002c9bc:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
8002c9c0:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c9c4:	cb af       	rcall	8002c938 <pll_is_locked>
8002c9c6:	18 98       	mov	r8,r12
8002c9c8:	ec 18 00 01 	eorl	r8,0x1
8002c9cc:	5c 58       	castu.b	r8
8002c9ce:	cf 91       	brne	8002c9c0 <pll_wait_for_lock+0x10>
		/* Do nothing */
	}

	return 0;
8002c9d0:	30 08       	mov	r8,0
}
8002c9d2:	10 9c       	mov	r12,r8
8002c9d4:	2f fd       	sub	sp,-4
8002c9d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c9da:	00 00       	add	r0,r0
8002c9dc:	80 02       	ld.sh	r2,r0[0x0]
8002c9de:	c8 3e       	rcall	8002c6e4 <osc_enable+0x14>

8002c9e0 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
8002c9e0:	eb cd 40 80 	pushm	r7,lr
8002c9e4:	1a 97       	mov	r7,sp
8002c9e6:	20 2d       	sub	sp,8
8002c9e8:	ef 4c ff fc 	st.w	r7[-4],r12
8002c9ec:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
8002c9f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c9f4:	30 09       	mov	r9,0
8002c9f6:	91 09       	st.w	r8[0x0],r9
}
8002c9f8:	2f ed       	sub	sp,-8
8002c9fa:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c9fe <genclk_config_set_source>:
	AVR32_SCIF.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
8002c9fe:	eb cd 40 80 	pushm	r7,lr
8002ca02:	1a 97       	mov	r7,sp
8002ca04:	20 2d       	sub	sp,8
8002ca06:	ef 4c ff fc 	st.w	r7[-4],r12
8002ca0a:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
8002ca0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ca12:	70 08       	ld.w	r8,r8[0x0]
8002ca14:	10 99       	mov	r9,r8
8002ca16:	e0 19 f0 ff 	andl	r9,0xf0ff
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
8002ca1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ca1e:	a9 68       	lsl	r8,0x8
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
8002ca20:	10 49       	or	r9,r8
8002ca22:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ca26:	91 09       	st.w	r8[0x0],r9
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
}
8002ca28:	2f ed       	sub	sp,-8
8002ca2a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ca2e <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
8002ca2e:	eb cd 40 80 	pushm	r7,lr
8002ca32:	1a 97       	mov	r7,sp
8002ca34:	20 2d       	sub	sp,8
8002ca36:	ef 4c ff fc 	st.w	r7[-4],r12
8002ca3a:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_SCIF_GCCTRL_DIVEN_MASK
8002ca3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ca42:	70 08       	ld.w	r8,r8[0x0]
8002ca44:	10 99       	mov	r9,r8
8002ca46:	e4 19 ff 00 	andh	r9,0xff00
8002ca4a:	e0 19 ff fd 	andl	r9,0xfffd
8002ca4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ca52:	91 09       	st.w	r8[0x0],r9
			| AVR32_SCIF_GCCTRL_DIV_MASK);

	if (divider > 1) {
8002ca54:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ca58:	58 18       	cp.w	r8,1
8002ca5a:	e0 88 00 17 	brls	8002ca88 <genclk_config_set_divider+0x5a>
		cfg->ctrl |= 1U << AVR32_SCIF_GCCTRL_DIVEN;
8002ca5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ca62:	70 08       	ld.w	r8,r8[0x0]
8002ca64:	10 99       	mov	r9,r8
8002ca66:	a1 b9       	sbr	r9,0x1
8002ca68:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ca6c:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_SCIF_GCCTRL_DIV;
8002ca6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ca72:	70 09       	ld.w	r9,r8[0x0]
8002ca74:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ca78:	2f f8       	sub	r8,-1
8002ca7a:	a1 98       	lsr	r8,0x1
8002ca7c:	20 18       	sub	r8,1
8002ca7e:	b1 68       	lsl	r8,0x10
8002ca80:	10 49       	or	r9,r8
8002ca82:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ca86:	91 09       	st.w	r8[0x0],r9
	}
}
8002ca88:	2f ed       	sub	sp,-8
8002ca8a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ca8e <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
8002ca8e:	eb cd 40 80 	pushm	r7,lr
8002ca92:	1a 97       	mov	r7,sp
8002ca94:	20 2d       	sub	sp,8
8002ca96:	ef 4c ff fc 	st.w	r7[-4],r12
8002ca9a:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
8002ca9e:	fe 78 08 00 	mov	r8,-63488
8002caa2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002caa6:	ee fa ff fc 	ld.w	r10,r7[-4]
8002caaa:	74 0a       	ld.w	r10,r10[0x0]
8002caac:	a1 aa       	sbr	r10,0x0
8002caae:	2e 79       	sub	r9,-25
8002cab0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8002cab4:	2f ed       	sub	sp,-8
8002cab6:	e3 cd 80 80 	ldm	sp++,r7,pc

8002caba <genclk_disable>:

static inline void genclk_disable(unsigned int id)
{
8002caba:	eb cd 40 80 	pushm	r7,lr
8002cabe:	1a 97       	mov	r7,sp
8002cac0:	20 1d       	sub	sp,4
8002cac2:	ef 4c ff fc 	st.w	r7[-4],r12
	AVR32_SCIF.gcctrl[id] = 0;
8002cac6:	fe 78 08 00 	mov	r8,-63488
8002caca:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cace:	2e 79       	sub	r9,-25
8002cad0:	30 0a       	mov	r10,0
8002cad2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8002cad6:	2f fd       	sub	sp,-4
8002cad8:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cadc <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8002cadc:	eb cd 40 c0 	pushm	r6-r7,lr
8002cae0:	1a 97       	mov	r7,sp
8002cae2:	48 56       	lddpc	r6,8002caf4 <sysclk_get_main_hz+0x18>
8002cae4:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8002cae6:	30 0c       	mov	r12,0
8002cae8:	c5 ae       	rcall	8002c79c <osc_get_rate>
8002caea:	18 98       	mov	r8,r12
8002caec:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8002caee:	10 9c       	mov	r12,r8
8002caf0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002caf4:	80 02       	ld.sh	r2,r0[0x0]
8002caf6:	c9 68       	rjmp	8002cc22 <sysclk_set_prescalers+0x26>

8002caf8 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
8002caf8:	eb cd 40 c0 	pushm	r6-r7,lr
8002cafc:	1a 97       	mov	r7,sp
8002cafe:	20 4d       	sub	sp,16
8002cb00:	49 d6       	lddpc	r6,8002cb74 <sysclk_priv_enable_module+0x7c>
8002cb02:	1e 26       	rsub	r6,pc
8002cb04:	ef 4c ff f4 	st.w	r7[-12],r12
8002cb08:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
8002cb0c:	fe b0 fd c6 	rcall	8002c698 <cpu_irq_save>
8002cb10:	18 98       	mov	r8,r12
8002cb12:	ef 48 ff f8 	st.w	r7[-8],r8

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8002cb16:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002cb1a:	a3 68       	lsl	r8,0x2
8002cb1c:	e0 28 fb e0 	sub	r8,64480
8002cb20:	70 08       	ld.w	r8,r8[0x0]
8002cb22:	ef 48 ff fc 	st.w	r7[-4],r8
	mask |= 1U << module_index;
8002cb26:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002cb2a:	30 19       	mov	r9,1
8002cb2c:	f2 08 09 48 	lsl	r8,r9,r8
8002cb30:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cb34:	f3 e8 10 08 	or	r8,r9,r8
8002cb38:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
8002cb3c:	fe 78 04 00 	mov	r8,-64512
8002cb40:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002cb44:	f2 0a 15 02 	lsl	r10,r9,0x2
8002cb48:	32 09       	mov	r9,32
8002cb4a:	ea 19 aa 00 	orh	r9,0xaa00
8002cb4e:	f4 09 00 09 	add	r9,r10,r9
8002cb52:	f1 49 00 58 	st.w	r8[88],r9
	*(&AVR32_PM.cpumask + bus_id) = mask;
8002cb56:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002cb5a:	a3 68       	lsl	r8,0x2
8002cb5c:	e0 28 fb e0 	sub	r8,64480
8002cb60:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cb64:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
8002cb66:	ee fc ff f8 	ld.w	r12,r7[-8]
8002cb6a:	fe b0 fd a6 	rcall	8002c6b6 <cpu_irq_restore>
}
8002cb6e:	2f cd       	sub	sp,-16
8002cb70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cb74:	80 02       	ld.sh	r2,r0[0x0]
8002cb76:	c9 86       	brmi	8002caa6 <genclk_enable+0x18>

8002cb78 <sysclk_priv_disable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be disabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_disable_module(unsigned int bus_id, unsigned int module_index)
{
8002cb78:	eb cd 40 c0 	pushm	r6-r7,lr
8002cb7c:	1a 97       	mov	r7,sp
8002cb7e:	20 4d       	sub	sp,16
8002cb80:	49 e6       	lddpc	r6,8002cbf8 <sysclk_priv_disable_module+0x80>
8002cb82:	1e 26       	rsub	r6,pc
8002cb84:	ef 4c ff f4 	st.w	r7[-12],r12
8002cb88:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
8002cb8c:	fe b0 fd 86 	rcall	8002c698 <cpu_irq_save>
8002cb90:	18 98       	mov	r8,r12
8002cb92:	ef 48 ff f8 	st.w	r7[-8],r8

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8002cb96:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002cb9a:	a3 68       	lsl	r8,0x2
8002cb9c:	e0 28 fb e0 	sub	r8,64480
8002cba0:	70 08       	ld.w	r8,r8[0x0]
8002cba2:	ef 48 ff fc 	st.w	r7[-4],r8
	mask &= ~(1U << module_index);
8002cba6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002cbaa:	30 19       	mov	r9,1
8002cbac:	f2 08 09 48 	lsl	r8,r9,r8
8002cbb0:	5c d8       	com	r8
8002cbb2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cbb6:	f3 e8 00 08 	and	r8,r9,r8
8002cbba:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
8002cbbe:	fe 78 04 00 	mov	r8,-64512
8002cbc2:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002cbc6:	f2 0a 15 02 	lsl	r10,r9,0x2
8002cbca:	32 09       	mov	r9,32
8002cbcc:	ea 19 aa 00 	orh	r9,0xaa00
8002cbd0:	f4 09 00 09 	add	r9,r10,r9
8002cbd4:	f1 49 00 58 	st.w	r8[88],r9
	*(&AVR32_PM.cpumask + bus_id) = mask;
8002cbd8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002cbdc:	a3 68       	lsl	r8,0x2
8002cbde:	e0 28 fb e0 	sub	r8,64480
8002cbe2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cbe6:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
8002cbe8:	ee fc ff f8 	ld.w	r12,r7[-8]
8002cbec:	fe b0 fd 65 	rcall	8002c6b6 <cpu_irq_restore>
}
8002cbf0:	2f cd       	sub	sp,-16
8002cbf2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cbf6:	00 00       	add	r0,r0
8002cbf8:	80 02       	ld.sh	r2,r0[0x0]
8002cbfa:	ca 06       	brmi	8002cb3a <sysclk_priv_enable_module+0x42>

8002cbfc <sysclk_set_prescalers>:
 * \param pbc_shift The PBC clock will be divided by \f$2^{pbc\_shift}\f$
 */
void sysclk_set_prescalers(unsigned int cpu_shift,
		unsigned int pba_shift, unsigned int pbb_shift,
		unsigned int pbc_shift)
{
8002cbfc:	eb cd 40 c0 	pushm	r6-r7,lr
8002cc00:	1a 97       	mov	r7,sp
8002cc02:	20 9d       	sub	sp,36
8002cc04:	4b f6       	lddpc	r6,8002cd00 <sysclk_set_prescalers+0x104>
8002cc06:	1e 26       	rsub	r6,pc
8002cc08:	ef 4c ff e8 	st.w	r7[-24],r12
8002cc0c:	ef 4b ff e4 	st.w	r7[-28],r11
8002cc10:	ef 4a ff e0 	st.w	r7[-32],r10
8002cc14:	ef 49 ff dc 	st.w	r7[-36],r9
	irqflags_t flags;
	uint32_t   cpu_cksel = 0;
8002cc18:	30 08       	mov	r8,0
8002cc1a:	ef 48 ff f0 	st.w	r7[-16],r8
	uint32_t   pba_cksel = 0;
8002cc1e:	30 08       	mov	r8,0
8002cc20:	ef 48 ff f4 	st.w	r7[-12],r8
	uint32_t   pbb_cksel = 0;
8002cc24:	30 08       	mov	r8,0
8002cc26:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t   pbc_cksel = 0;
8002cc2a:	30 08       	mov	r8,0
8002cc2c:	ef 48 ff fc 	st.w	r7[-4],r8

	Assert(cpu_shift <= pba_shift);
	Assert(cpu_shift <= pbb_shift);

	if (cpu_shift > 0)
8002cc30:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002cc34:	58 08       	cp.w	r8,0
8002cc36:	c0 80       	breq	8002cc46 <sysclk_set_prescalers+0x4a>
		cpu_cksel = ((cpu_shift - 1) << AVR32_PM_CPUSEL)
8002cc38:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002cc3c:	20 18       	sub	r8,1
8002cc3e:	a5 68       	lsl	r8,0x4
8002cc40:	a7 b8       	sbr	r8,0x7
8002cc42:	ef 48 ff f0 	st.w	r7[-16],r8
				| (1U << AVR32_PM_CPUDIV);

	if (pba_shift > 0)
8002cc46:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002cc4a:	58 08       	cp.w	r8,0
8002cc4c:	c0 80       	breq	8002cc5c <sysclk_set_prescalers+0x60>
		pba_cksel = ((pba_shift - 1) << AVR32_PM_PBASEL)
8002cc4e:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002cc52:	20 18       	sub	r8,1
8002cc54:	ad 68       	lsl	r8,0xc
8002cc56:	a7 b8       	sbr	r8,0x7
8002cc58:	ef 48 ff f4 	st.w	r7[-12],r8
				| (1U << AVR32_PM_PBADIV);

	if (pbb_shift > 0)
8002cc5c:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002cc60:	58 08       	cp.w	r8,0
8002cc62:	c0 80       	breq	8002cc72 <sysclk_set_prescalers+0x76>
		pbb_cksel = ((pbb_shift - 1) << AVR32_PM_PBBSEL)
8002cc64:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002cc68:	20 18       	sub	r8,1
8002cc6a:	b1 68       	lsl	r8,0x10
8002cc6c:	a7 b8       	sbr	r8,0x7
8002cc6e:	ef 48 ff f8 	st.w	r7[-8],r8
				| (1U << AVR32_PM_PBBDIV);

	if (pbc_shift > 0)
8002cc72:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002cc76:	58 08       	cp.w	r8,0
8002cc78:	c0 80       	breq	8002cc88 <sysclk_set_prescalers+0x8c>
		pbc_cksel = ((pbc_shift - 1) << AVR32_PM_PBCSEL)
8002cc7a:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002cc7e:	20 18       	sub	r8,1
8002cc80:	b5 68       	lsl	r8,0x14
8002cc82:	a7 b8       	sbr	r8,0x7
8002cc84:	ef 48 ff fc 	st.w	r7[-4],r8
				| (1U << AVR32_PM_PBCDIV);

	flags = cpu_irq_save();
8002cc88:	fe b0 fd 08 	rcall	8002c698 <cpu_irq_save>
8002cc8c:	18 98       	mov	r8,r12
8002cc8e:	ef 48 ff ec 	st.w	r7[-20],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_CPUSEL;
8002cc92:	fe 78 04 00 	mov	r8,-64512
8002cc96:	30 49       	mov	r9,4
8002cc98:	ea 19 aa 00 	orh	r9,0xaa00
8002cc9c:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.cpusel = cpu_cksel;
8002cca0:	fe 78 04 00 	mov	r8,-64512
8002cca4:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002cca8:	91 19       	st.w	r8[0x4],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBASEL;
8002ccaa:	fe 78 04 00 	mov	r8,-64512
8002ccae:	30 c9       	mov	r9,12
8002ccb0:	ea 19 aa 00 	orh	r9,0xaa00
8002ccb4:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbasel = pba_cksel;
8002ccb8:	fe 78 04 00 	mov	r8,-64512
8002ccbc:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002ccc0:	91 39       	st.w	r8[0xc],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBBSEL;
8002ccc2:	fe 78 04 00 	mov	r8,-64512
8002ccc6:	31 09       	mov	r9,16
8002ccc8:	ea 19 aa 00 	orh	r9,0xaa00
8002cccc:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbbsel = pbb_cksel;
8002ccd0:	fe 78 04 00 	mov	r8,-64512
8002ccd4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002ccd8:	91 49       	st.w	r8[0x10],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBCSEL;
8002ccda:	fe 78 04 00 	mov	r8,-64512
8002ccde:	31 49       	mov	r9,20
8002cce0:	ea 19 aa 00 	orh	r9,0xaa00
8002cce4:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbbsel = pbc_cksel;
8002cce8:	fe 78 04 00 	mov	r8,-64512
8002ccec:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ccf0:	91 49       	st.w	r8[0x10],r9
	cpu_irq_restore(flags);
8002ccf2:	ee fc ff ec 	ld.w	r12,r7[-20]
8002ccf6:	fe b0 fc e0 	rcall	8002c6b6 <cpu_irq_restore>
}
8002ccfa:	2f 7d       	sub	sp,-36
8002ccfc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cd00:	80 02       	ld.sh	r2,r0[0x0]
8002cd02:	ca 8a       	rjmp	8002ca52 <genclk_config_set_divider+0x24>

8002cd04 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint_fast8_t src)
{
8002cd04:	eb cd 40 c0 	pushm	r6-r7,lr
8002cd08:	1a 97       	mov	r7,sp
8002cd0a:	20 2d       	sub	sp,8
8002cd0c:	48 e6       	lddpc	r6,8002cd44 <sysclk_set_source+0x40>
8002cd0e:	1e 26       	rsub	r6,pc
8002cd10:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_RC8M);

	flags = cpu_irq_save();
8002cd14:	fe b0 fc c2 	rcall	8002c698 <cpu_irq_save>
8002cd18:	18 98       	mov	r8,r12
8002cd1a:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
8002cd1e:	fe 78 04 00 	mov	r8,-64512
8002cd22:	fc 19 aa 00 	movh	r9,0xaa00
8002cd26:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.mcctrl = src;
8002cd2a:	fe 78 04 00 	mov	r8,-64512
8002cd2e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002cd32:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8002cd34:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cd38:	fe b0 fc bf 	rcall	8002c6b6 <cpu_irq_restore>
}
8002cd3c:	2f ed       	sub	sp,-8
8002cd3e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cd42:	00 00       	add	r0,r0
8002cd44:	80 02       	ld.sh	r2,r0[0x0]
8002cd46:	cb 92       	brcc	8002ccb8 <sysclk_set_prescalers+0xbc>

8002cd48 <sysclk_enable_usb>:
 * \pre The USB generick clock must be configurated to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
8002cd48:	eb cd 40 c0 	pushm	r6-r7,lr
8002cd4c:	1a 97       	mov	r7,sp
8002cd4e:	20 3d       	sub	sp,12
8002cd50:	49 66       	lddpc	r6,8002cda8 <sysclk_enable_usb+0x60>
8002cd52:	1e 26       	rsub	r6,pc
	struct genclk_config gcfg;

	genclk_config_defaults(&gcfg, AVR32_USBC_GCLK_NUM);
8002cd54:	ee c8 00 04 	sub	r8,r7,4
8002cd58:	30 0b       	mov	r11,0
8002cd5a:	10 9c       	mov	r12,r8
8002cd5c:	c4 2e       	rcall	8002c9e0 <genclk_config_defaults>
#endif

#ifdef CONFIG_PLL1_SOURCE
	case USBCLK_SRC_PLL1: {
		struct pll_config pllcfg;
		pll_enable_source_sync(CONFIG_PLL1_SOURCE);
8002cd5e:	30 0c       	mov	r12,0
8002cd60:	c0 3e       	rcall	8002c966 <pll_enable_source_sync>
		pll_config_defaults(&pllcfg, 1);
8002cd62:	ee c8 00 0c 	sub	r8,r7,12
8002cd66:	30 39       	mov	r9,3
8002cd68:	30 1a       	mov	r10,1
8002cd6a:	30 0b       	mov	r11,0
8002cd6c:	10 9c       	mov	r12,r8
8002cd6e:	fe b0 fd 77 	rcall	8002c85c <pll_config_init>
		pll_enable(&pllcfg, 1);
8002cd72:	ee c8 00 0c 	sub	r8,r7,12
8002cd76:	30 1b       	mov	r11,1
8002cd78:	10 9c       	mov	r12,r8
8002cd7a:	f0 16 00 ac 	mcall	r6[688]
		pll_wait_for_lock(1);
8002cd7e:	30 1c       	mov	r12,1
8002cd80:	c1 8e       	rcall	8002c9b0 <pll_wait_for_lock>
		genclk_config_set_source(&gcfg, GENCLK_SRC_PLL1);
8002cd82:	ee c8 00 04 	sub	r8,r7,4
8002cd86:	30 6b       	mov	r11,6
8002cd88:	10 9c       	mov	r12,r8
8002cd8a:	c3 ae       	rcall	8002c9fe <genclk_config_set_source>
	default:
		/* unhandled_case(CONFIG_USBCLK_SOURCE); */
		break;
	}

	genclk_config_set_divider(&gcfg, CONFIG_USBCLK_DIV);
8002cd8c:	ee c8 00 04 	sub	r8,r7,4
8002cd90:	30 1b       	mov	r11,1
8002cd92:	10 9c       	mov	r12,r8
8002cd94:	c4 de       	rcall	8002ca2e <genclk_config_set_divider>
	genclk_enable(&gcfg, AVR32_USBC_GCLK_NUM);
8002cd96:	ee c8 00 04 	sub	r8,r7,4
8002cd9a:	30 0b       	mov	r11,0
8002cd9c:	10 9c       	mov	r12,r8
8002cd9e:	c7 8e       	rcall	8002ca8e <genclk_enable>
}
8002cda0:	2f dd       	sub	sp,-12
8002cda2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cda6:	00 00       	add	r0,r0
8002cda8:	80 02       	ld.sh	r2,r0[0x0]
8002cdaa:	cb d6       	brmi	8002cd24 <sysclk_set_source+0x20>

8002cdac <sysclk_disable_usb>:

/**
 * \brief Disable the USB generic clock
 */
void sysclk_disable_usb(void)
{
8002cdac:	eb cd 40 c0 	pushm	r6-r7,lr
8002cdb0:	1a 97       	mov	r7,sp
8002cdb2:	48 46       	lddpc	r6,8002cdc0 <sysclk_disable_usb+0x14>
8002cdb4:	1e 26       	rsub	r6,pc
   genclk_disable(AVR32_USBC_GCLK_NUM);
8002cdb6:	30 0c       	mov	r12,0
8002cdb8:	c8 1e       	rcall	8002caba <genclk_disable>
}
8002cdba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cdbe:	00 00       	add	r0,r0
8002cdc0:	80 02       	ld.sh	r2,r0[0x0]
8002cdc2:	cc 38       	rjmp	8002cf48 <spi_set_chipselect_delay_bct+0x74>

8002cdc4 <sysclk_init>:
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
8002cdc4:	eb cd 40 c0 	pushm	r6-r7,lr
8002cdc8:	1a 97       	mov	r7,sp
8002cdca:	20 2d       	sub	sp,8
8002cdcc:	49 b6       	lddpc	r6,8002ce38 <sysclk_init+0x74>
8002cdce:	1e 26       	rsub	r6,pc

#ifdef CONFIG_PLL0_SOURCE

		struct pll_config pllcfg;

		pll_enable_source_sync(CONFIG_PLL0_SOURCE);
8002cdd0:	30 0c       	mov	r12,0
8002cdd2:	fe b0 fd ca 	rcall	8002c966 <pll_enable_source_sync>
		pll_config_defaults(&pllcfg, 0);
8002cdd6:	ee c8 00 04 	sub	r8,r7,4
8002cdda:	30 49       	mov	r9,4
8002cddc:	30 1a       	mov	r10,1
8002cdde:	30 0b       	mov	r11,0
8002cde0:	10 9c       	mov	r12,r8
8002cde2:	fe b0 fd 3d 	rcall	8002c85c <pll_config_init>
		pll_enable(&pllcfg, 0);
8002cde6:	ee c8 00 04 	sub	r8,r7,4
8002cdea:	30 0b       	mov	r11,0
8002cdec:	10 9c       	mov	r12,r8
8002cdee:	f0 16 00 ac 	mcall	r6[688]
		pll_wait_for_lock(0);
8002cdf2:	30 0c       	mov	r12,0
8002cdf4:	fe b0 fd de 	rcall	8002c9b0 <pll_wait_for_lock>

#ifdef CONFIG_PLL1_SOURCE
	
		struct pll_config pllcfg1;

		pll_enable_source_sync(CONFIG_PLL1_SOURCE);
8002cdf8:	30 0c       	mov	r12,0
8002cdfa:	fe b0 fd b6 	rcall	8002c966 <pll_enable_source_sync>
		pll_config_defaults(&pllcfg1, 1);
8002cdfe:	ee c8 00 08 	sub	r8,r7,8
8002ce02:	30 39       	mov	r9,3
8002ce04:	30 1a       	mov	r10,1
8002ce06:	30 0b       	mov	r11,0
8002ce08:	10 9c       	mov	r12,r8
8002ce0a:	fe b0 fd 29 	rcall	8002c85c <pll_config_init>
		pll_enable(&pllcfg1, 1);
8002ce0e:	ee c8 00 08 	sub	r8,r7,8
8002ce12:	30 1b       	mov	r11,1
8002ce14:	10 9c       	mov	r12,r8
8002ce16:	f0 16 00 ac 	mcall	r6[688]
		pll_wait_for_lock(1);
8002ce1a:	30 1c       	mov	r12,1
8002ce1c:	fe b0 fd ca 	rcall	8002c9b0 <pll_wait_for_lock>


	case SYSCLK_SRC_PLL0: {

		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_main_hz());
8002ce20:	c5 ee       	rcall	8002cadc <sysclk_get_main_hz>
8002ce22:	18 98       	mov	r8,r12
8002ce24:	10 9c       	mov	r12,r8
8002ce26:	f0 16 01 5f 	mcall	r6[1404]
		sysclk_set_source(SYSCLK_SRC_PLL0);
8002ce2a:	30 3c       	mov	r12,3
8002ce2c:	f0 16 01 c5 	mcall	r6[1812]

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
8002ce30:	2f ed       	sub	sp,-8
8002ce32:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ce36:	00 00       	add	r0,r0
8002ce38:	80 02       	ld.sh	r2,r0[0x0]
8002ce3a:	cc 52       	brcc	8002cdc4 <sysclk_init>

8002ce3c <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
8002ce3c:	eb cd 40 80 	pushm	r7,lr
8002ce40:	1a 97       	mov	r7,sp
8002ce42:	20 1d       	sub	sp,4
8002ce44:	18 98       	mov	r8,r12
8002ce46:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002ce4a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002ce4e:	58 38       	cp.w	r8,3
8002ce50:	c1 20       	breq	8002ce74 <osc_get_rate+0x38>
8002ce52:	e0 89 00 07 	brgt	8002ce60 <osc_get_rate+0x24>
8002ce56:	58 08       	cp.w	r8,0
8002ce58:	c0 90       	breq	8002ce6a <osc_get_rate+0x2e>
8002ce5a:	58 28       	cp.w	r8,2
8002ce5c:	c0 f0       	breq	8002ce7a <osc_get_rate+0x3e>
8002ce5e:	c1 b8       	rjmp	8002ce94 <osc_get_rate+0x58>
8002ce60:	58 48       	cp.w	r8,4
8002ce62:	c1 10       	breq	8002ce84 <osc_get_rate+0x48>
8002ce64:	58 58       	cp.w	r8,5
8002ce66:	c1 40       	breq	8002ce8e <osc_get_rate+0x52>
8002ce68:	c1 68       	rjmp	8002ce94 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8002ce6a:	e0 68 24 00 	mov	r8,9216
8002ce6e:	ea 18 00 f4 	orh	r8,0xf4
8002ce72:	c1 28       	rjmp	8002ce96 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8002ce74:	e0 68 80 00 	mov	r8,32768
8002ce78:	c0 f8       	rjmp	8002ce96 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8002ce7a:	e0 68 12 00 	mov	r8,4608
8002ce7e:	ea 18 00 7a 	orh	r8,0x7a
8002ce82:	c0 a8       	rjmp	8002ce96 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8002ce84:	e0 68 0e 00 	mov	r8,3584
8002ce88:	ea 18 07 27 	orh	r8,0x727
8002ce8c:	c0 58       	rjmp	8002ce96 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8002ce8e:	e0 78 c1 38 	mov	r8,115000
8002ce92:	c0 28       	rjmp	8002ce96 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
8002ce94:	30 08       	mov	r8,0
	}
}
8002ce96:	10 9c       	mov	r12,r8
8002ce98:	2f fd       	sub	sp,-4
8002ce9a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ce9e <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8002ce9e:	eb cd 40 c0 	pushm	r6-r7,lr
8002cea2:	1a 97       	mov	r7,sp
8002cea4:	48 56       	lddpc	r6,8002ceb8 <sysclk_get_main_hz+0x1a>
8002cea6:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8002cea8:	30 0c       	mov	r12,0
8002ceaa:	cc 9f       	rcall	8002ce3c <osc_get_rate>
8002ceac:	18 98       	mov	r8,r12
8002ceae:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8002ceb0:	10 9c       	mov	r12,r8
8002ceb2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ceb6:	00 00       	add	r0,r0
8002ceb8:	80 02       	ld.sh	r2,r0[0x0]
8002ceba:	cd 2a       	rjmp	8002cc5e <sysclk_set_prescalers+0x62>

8002cebc <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
8002cebc:	eb cd 40 c0 	pushm	r6-r7,lr
8002cec0:	1a 97       	mov	r7,sp
8002cec2:	48 46       	lddpc	r6,8002ced0 <sysclk_get_pba_hz+0x14>
8002cec4:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
8002cec6:	ce cf       	rcall	8002ce9e <sysclk_get_main_hz>
8002cec8:	18 98       	mov	r8,r12
}
8002ceca:	10 9c       	mov	r12,r8
8002cecc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ced0:	80 02       	ld.sh	r2,r0[0x0]
8002ced2:	cd 48       	rjmp	8002d07a <spi_set_bits_per_transfer+0xa6>

8002ced4 <spi_set_chipselect_delay_bct>:
 * \param delay       Delay.
 */

static inline void spi_set_chipselect_delay_bct(volatile avr32_spi_t *spi,
                        uint8_t chip_select, uint8_t delay)
{
8002ced4:	eb cd 40 80 	pushm	r7,lr
8002ced8:	1a 97       	mov	r7,sp
8002ceda:	20 3d       	sub	sp,12
8002cedc:	ef 4c ff fc 	st.w	r7[-4],r12
8002cee0:	16 99       	mov	r9,r11
8002cee2:	14 98       	mov	r8,r10
8002cee4:	ef 69 ff f8 	st.b	r7[-8],r9
8002cee8:	ef 68 ff f4 	st.b	r7[-12],r8
  Assert(chip_select>3);
  switch(chip_select) {
8002ceec:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002cef0:	58 18       	cp.w	r8,1
8002cef2:	c1 40       	breq	8002cf1a <spi_set_chipselect_delay_bct+0x46>
8002cef4:	e0 89 00 05 	brgt	8002cefe <spi_set_chipselect_delay_bct+0x2a>
8002cef8:	58 08       	cp.w	r8,0
8002cefa:	c0 70       	breq	8002cf08 <spi_set_chipselect_delay_bct+0x34>
8002cefc:	c2 98       	rjmp	8002cf4e <spi_set_chipselect_delay_bct+0x7a>
8002cefe:	58 28       	cp.w	r8,2
8002cf00:	c1 60       	breq	8002cf2c <spi_set_chipselect_delay_bct+0x58>
8002cf02:	58 38       	cp.w	r8,3
8002cf04:	c1 d0       	breq	8002cf3e <spi_set_chipselect_delay_bct+0x6a>
8002cf06:	c2 48       	rjmp	8002cf4e <spi_set_chipselect_delay_bct+0x7a>
    case 0:
      spi->CSR0.dlybct = delay;
8002cf08:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cf0c:	72 c8       	ld.w	r8,r9[0x30]
8002cf0e:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cf12:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002cf16:	93 c8       	st.w	r9[0x30],r8
      break;
8002cf18:	c1 b8       	rjmp	8002cf4e <spi_set_chipselect_delay_bct+0x7a>
    case 1:
      spi->CSR1.dlybct  = delay;
8002cf1a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cf1e:	72 d8       	ld.w	r8,r9[0x34]
8002cf20:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cf24:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002cf28:	93 d8       	st.w	r9[0x34],r8
      break;
8002cf2a:	c1 28       	rjmp	8002cf4e <spi_set_chipselect_delay_bct+0x7a>
    case 2:
      spi->CSR2.dlybct  = delay;
8002cf2c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cf30:	72 e8       	ld.w	r8,r9[0x38]
8002cf32:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cf36:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002cf3a:	93 e8       	st.w	r9[0x38],r8
      break;
8002cf3c:	c0 98       	rjmp	8002cf4e <spi_set_chipselect_delay_bct+0x7a>
    case 3:
      spi->CSR3.dlybct  = delay;
8002cf3e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cf42:	72 f8       	ld.w	r8,r9[0x3c]
8002cf44:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cf48:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002cf4c:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002cf4e:	2f dd       	sub	sp,-12
8002cf50:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cf54 <spi_set_chipselect_delay_bs>:
 * \param chip_select Chip Select.
 * \param delay       Delay.
 */
static inline void spi_set_chipselect_delay_bs(volatile avr32_spi_t *spi,
                        uint8_t chip_select, uint8_t delay)
{
8002cf54:	eb cd 40 80 	pushm	r7,lr
8002cf58:	1a 97       	mov	r7,sp
8002cf5a:	20 3d       	sub	sp,12
8002cf5c:	ef 4c ff fc 	st.w	r7[-4],r12
8002cf60:	16 99       	mov	r9,r11
8002cf62:	14 98       	mov	r8,r10
8002cf64:	ef 69 ff f8 	st.b	r7[-8],r9
8002cf68:	ef 68 ff f4 	st.b	r7[-12],r8
  Assert(chip_select>3);
  switch(chip_select) {
8002cf6c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002cf70:	58 18       	cp.w	r8,1
8002cf72:	c1 40       	breq	8002cf9a <spi_set_chipselect_delay_bs+0x46>
8002cf74:	e0 89 00 05 	brgt	8002cf7e <spi_set_chipselect_delay_bs+0x2a>
8002cf78:	58 08       	cp.w	r8,0
8002cf7a:	c0 70       	breq	8002cf88 <spi_set_chipselect_delay_bs+0x34>
8002cf7c:	c2 98       	rjmp	8002cfce <spi_set_chipselect_delay_bs+0x7a>
8002cf7e:	58 28       	cp.w	r8,2
8002cf80:	c1 60       	breq	8002cfac <spi_set_chipselect_delay_bs+0x58>
8002cf82:	58 38       	cp.w	r8,3
8002cf84:	c1 d0       	breq	8002cfbe <spi_set_chipselect_delay_bs+0x6a>
8002cf86:	c2 48       	rjmp	8002cfce <spi_set_chipselect_delay_bs+0x7a>
    case 0:
      spi->CSR0.dlybs = delay;
8002cf88:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cf8c:	72 c8       	ld.w	r8,r9[0x30]
8002cf8e:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cf92:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002cf96:	93 c8       	st.w	r9[0x30],r8
      break;
8002cf98:	c1 b8       	rjmp	8002cfce <spi_set_chipselect_delay_bs+0x7a>
    case 1:
      spi->CSR1.dlybs  = delay;
8002cf9a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cf9e:	72 d8       	ld.w	r8,r9[0x34]
8002cfa0:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cfa4:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002cfa8:	93 d8       	st.w	r9[0x34],r8
      break;
8002cfaa:	c1 28       	rjmp	8002cfce <spi_set_chipselect_delay_bs+0x7a>
    case 2:
      spi->CSR2.dlybs  = delay;
8002cfac:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cfb0:	72 e8       	ld.w	r8,r9[0x38]
8002cfb2:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cfb6:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002cfba:	93 e8       	st.w	r9[0x38],r8
      break;
8002cfbc:	c0 98       	rjmp	8002cfce <spi_set_chipselect_delay_bs+0x7a>
    case 3:
      spi->CSR3.dlybs  = delay;
8002cfbe:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cfc2:	72 f8       	ld.w	r8,r9[0x3c]
8002cfc4:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002cfc8:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002cfcc:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002cfce:	2f dd       	sub	sp,-12
8002cfd0:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cfd4 <spi_set_bits_per_transfer>:
 * \param chip_select Chip Select.
 * \param len         Bits per Transfer [8...16].
 */
static inline void spi_set_bits_per_transfer(volatile avr32_spi_t *spi, uint8_t chip_select,
                        uint8_t len)
{
8002cfd4:	eb cd 40 80 	pushm	r7,lr
8002cfd8:	1a 97       	mov	r7,sp
8002cfda:	20 3d       	sub	sp,12
8002cfdc:	ef 4c ff fc 	st.w	r7[-4],r12
8002cfe0:	16 99       	mov	r9,r11
8002cfe2:	14 98       	mov	r8,r10
8002cfe4:	ef 69 ff f8 	st.b	r7[-8],r9
8002cfe8:	ef 68 ff f4 	st.b	r7[-12],r8
  Assert((len>8)&&(len<16));
  switch(chip_select) {
8002cfec:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002cff0:	58 18       	cp.w	r8,1
8002cff2:	c1 a0       	breq	8002d026 <spi_set_bits_per_transfer+0x52>
8002cff4:	e0 89 00 05 	brgt	8002cffe <spi_set_bits_per_transfer+0x2a>
8002cff8:	58 08       	cp.w	r8,0
8002cffa:	c0 70       	breq	8002d008 <spi_set_bits_per_transfer+0x34>
8002cffc:	c4 18       	rjmp	8002d07e <spi_set_bits_per_transfer+0xaa>
8002cffe:	58 28       	cp.w	r8,2
8002d000:	c2 20       	breq	8002d044 <spi_set_bits_per_transfer+0x70>
8002d002:	58 38       	cp.w	r8,3
8002d004:	c2 f0       	breq	8002d062 <spi_set_bits_per_transfer+0x8e>
8002d006:	c3 c8       	rjmp	8002d07e <spi_set_bits_per_transfer+0xaa>
    case 0:
      spi->CSR0.bits = len - 8;
8002d008:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002d00c:	20 88       	sub	r8,8
8002d00e:	5c 58       	castu.b	r8
8002d010:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002d014:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002d018:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d01c:	72 c8       	ld.w	r8,r9[0x30]
8002d01e:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002d022:	93 c8       	st.w	r9[0x30],r8
      break;
8002d024:	c2 d8       	rjmp	8002d07e <spi_set_bits_per_transfer+0xaa>
    case 1:
      spi->CSR1.bits  = len - 8;
8002d026:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002d02a:	20 88       	sub	r8,8
8002d02c:	5c 58       	castu.b	r8
8002d02e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002d032:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002d036:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d03a:	72 d8       	ld.w	r8,r9[0x34]
8002d03c:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002d040:	93 d8       	st.w	r9[0x34],r8
      break;
8002d042:	c1 e8       	rjmp	8002d07e <spi_set_bits_per_transfer+0xaa>
    case 2:
      spi->CSR2.bits  = len - 8;
8002d044:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002d048:	20 88       	sub	r8,8
8002d04a:	5c 58       	castu.b	r8
8002d04c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002d050:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002d054:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d058:	72 e8       	ld.w	r8,r9[0x38]
8002d05a:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002d05e:	93 e8       	st.w	r9[0x38],r8
      break;
8002d060:	c0 f8       	rjmp	8002d07e <spi_set_bits_per_transfer+0xaa>
    case 3:
      spi->CSR3.bits  = len - 8;
8002d062:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002d066:	20 88       	sub	r8,8
8002d068:	5c 58       	castu.b	r8
8002d06a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002d06e:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002d072:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d076:	72 f8       	ld.w	r8,r9[0x3c]
8002d078:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002d07c:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002d07e:	2f dd       	sub	sp,-12
8002d080:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d084 <spi_set_baudrate_register>:
 * \param chip_select Chip Select.
 * \param scbr        Baudrate Register.
 */
static inline void spi_set_baudrate_register(volatile avr32_spi_t *spi,uint8_t chip_select,
                        uint8_t scbr)
{
8002d084:	eb cd 40 80 	pushm	r7,lr
8002d088:	1a 97       	mov	r7,sp
8002d08a:	20 3d       	sub	sp,12
8002d08c:	ef 4c ff fc 	st.w	r7[-4],r12
8002d090:	16 99       	mov	r9,r11
8002d092:	14 98       	mov	r8,r10
8002d094:	ef 69 ff f8 	st.b	r7[-8],r9
8002d098:	ef 68 ff f4 	st.b	r7[-12],r8
  switch(chip_select) {
8002d09c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002d0a0:	58 18       	cp.w	r8,1
8002d0a2:	c1 40       	breq	8002d0ca <spi_set_baudrate_register+0x46>
8002d0a4:	e0 89 00 05 	brgt	8002d0ae <spi_set_baudrate_register+0x2a>
8002d0a8:	58 08       	cp.w	r8,0
8002d0aa:	c0 70       	breq	8002d0b8 <spi_set_baudrate_register+0x34>
8002d0ac:	c2 98       	rjmp	8002d0fe <spi_set_baudrate_register+0x7a>
8002d0ae:	58 28       	cp.w	r8,2
8002d0b0:	c1 60       	breq	8002d0dc <spi_set_baudrate_register+0x58>
8002d0b2:	58 38       	cp.w	r8,3
8002d0b4:	c1 d0       	breq	8002d0ee <spi_set_baudrate_register+0x6a>
8002d0b6:	c2 48       	rjmp	8002d0fe <spi_set_baudrate_register+0x7a>
    case 0:
      spi->CSR0.scbr = scbr;
8002d0b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d0bc:	72 c8       	ld.w	r8,r9[0x30]
8002d0be:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002d0c2:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002d0c6:	93 c8       	st.w	r9[0x30],r8
      break;
8002d0c8:	c1 b8       	rjmp	8002d0fe <spi_set_baudrate_register+0x7a>
    case 1:
      spi->CSR1.scbr  = scbr;
8002d0ca:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d0ce:	72 d8       	ld.w	r8,r9[0x34]
8002d0d0:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002d0d4:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002d0d8:	93 d8       	st.w	r9[0x34],r8
      break;
8002d0da:	c1 28       	rjmp	8002d0fe <spi_set_baudrate_register+0x7a>
    case 2:
      spi->CSR2.scbr  = scbr;
8002d0dc:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d0e0:	72 e8       	ld.w	r8,r9[0x38]
8002d0e2:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002d0e6:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002d0ea:	93 e8       	st.w	r9[0x38],r8
      break;
8002d0ec:	c0 98       	rjmp	8002d0fe <spi_set_baudrate_register+0x7a>
    case 3:
      spi->CSR3.scbr  = scbr;
8002d0ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d0f2:	72 f8       	ld.w	r8,r9[0x3c]
8002d0f4:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002d0f8:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002d0fc:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002d0fe:	2f dd       	sub	sp,-12
8002d100:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d104 <spi_enable_active_mode>:
 *
 * \param spi         Base address of the SPI instance.
 * \param chip_select Chip Select.
 */
static inline void spi_enable_active_mode(volatile avr32_spi_t *spi,uint8_t chip_select)
{
8002d104:	eb cd 40 80 	pushm	r7,lr
8002d108:	1a 97       	mov	r7,sp
8002d10a:	20 2d       	sub	sp,8
8002d10c:	ef 4c ff fc 	st.w	r7[-4],r12
8002d110:	16 98       	mov	r8,r11
8002d112:	ef 68 ff f8 	st.b	r7[-8],r8
  switch(chip_select) {
8002d116:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002d11a:	58 18       	cp.w	r8,1
8002d11c:	c1 30       	breq	8002d142 <spi_enable_active_mode+0x3e>
8002d11e:	e0 89 00 05 	brgt	8002d128 <spi_enable_active_mode+0x24>
8002d122:	58 08       	cp.w	r8,0
8002d124:	c0 70       	breq	8002d132 <spi_enable_active_mode+0x2e>
8002d126:	c2 58       	rjmp	8002d170 <spi_enable_active_mode+0x6c>
8002d128:	58 28       	cp.w	r8,2
8002d12a:	c1 40       	breq	8002d152 <spi_enable_active_mode+0x4e>
8002d12c:	58 38       	cp.w	r8,3
8002d12e:	c1 a0       	breq	8002d162 <spi_enable_active_mode+0x5e>
8002d130:	c2 08       	rjmp	8002d170 <spi_enable_active_mode+0x6c>
    case 0:
      spi->CSR0.csaat = 1;
8002d132:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d136:	72 c8       	ld.w	r8,r9[0x30]
8002d138:	30 1a       	mov	r10,1
8002d13a:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002d13e:	93 c8       	st.w	r9[0x30],r8
      break;
8002d140:	c1 88       	rjmp	8002d170 <spi_enable_active_mode+0x6c>
    case 1:
      spi->CSR1.csaat  = 1;
8002d142:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d146:	72 d8       	ld.w	r8,r9[0x34]
8002d148:	30 1a       	mov	r10,1
8002d14a:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002d14e:	93 d8       	st.w	r9[0x34],r8
      break;
8002d150:	c1 08       	rjmp	8002d170 <spi_enable_active_mode+0x6c>
    case 2:
      spi->CSR2.csaat  = 1;
8002d152:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d156:	72 e8       	ld.w	r8,r9[0x38]
8002d158:	30 1a       	mov	r10,1
8002d15a:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002d15e:	93 e8       	st.w	r9[0x38],r8
      break;
8002d160:	c0 88       	rjmp	8002d170 <spi_enable_active_mode+0x6c>
    case 3:
      spi->CSR3.csaat  = 1;
8002d162:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d166:	72 f8       	ld.w	r8,r9[0x3c]
8002d168:	30 1a       	mov	r10,1
8002d16a:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002d16e:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002d170:	2f ed       	sub	sp,-8
8002d172:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d176 <spi_set_mode>:
 * \param chip_select Chip Select.
 * \param flags       SPI Mode.
 */
static inline void spi_set_mode(volatile avr32_spi_t *spi,uint8_t chip_select,
                        uint8_t flags)
{
8002d176:	eb cd 40 80 	pushm	r7,lr
8002d17a:	1a 97       	mov	r7,sp
8002d17c:	20 3d       	sub	sp,12
8002d17e:	ef 4c ff fc 	st.w	r7[-4],r12
8002d182:	16 99       	mov	r9,r11
8002d184:	14 98       	mov	r8,r10
8002d186:	ef 69 ff f8 	st.b	r7[-8],r9
8002d18a:	ef 68 ff f4 	st.b	r7[-12],r8
  switch(chip_select) {
8002d18e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002d192:	58 18       	cp.w	r8,1
8002d194:	c2 70       	breq	8002d1e2 <spi_set_mode+0x6c>
8002d196:	e0 89 00 05 	brgt	8002d1a0 <spi_set_mode+0x2a>
8002d19a:	58 08       	cp.w	r8,0
8002d19c:	c0 70       	breq	8002d1aa <spi_set_mode+0x34>
8002d19e:	c7 58       	rjmp	8002d288 <spi_set_mode+0x112>
8002d1a0:	58 28       	cp.w	r8,2
8002d1a2:	c3 c0       	breq	8002d21a <spi_set_mode+0xa4>
8002d1a4:	58 38       	cp.w	r8,3
8002d1a6:	c5 60       	breq	8002d252 <spi_set_mode+0xdc>
8002d1a8:	c7 08       	rjmp	8002d288 <spi_set_mode+0x112>
    case 0:
      spi->CSR0.cpol = flags >> 1;
8002d1aa:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002d1ae:	a1 98       	lsr	r8,0x1
8002d1b0:	5c 58       	castu.b	r8
8002d1b2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002d1b6:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002d1ba:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d1be:	72 c8       	ld.w	r8,r9[0x30]
8002d1c0:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002d1c4:	93 c8       	st.w	r9[0x30],r8
      spi->CSR0.ncpha = (flags & 0x1) ^ 0x1;
8002d1c6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002d1ca:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002d1ce:	5f 08       	sreq	r8
8002d1d0:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002d1d4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d1d8:	72 c8       	ld.w	r8,r9[0x30]
8002d1da:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002d1de:	93 c8       	st.w	r9[0x30],r8
      break;
8002d1e0:	c5 48       	rjmp	8002d288 <spi_set_mode+0x112>
    case 1:
      spi->CSR1.cpol  = flags >> 1;
8002d1e2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002d1e6:	a1 98       	lsr	r8,0x1
8002d1e8:	5c 58       	castu.b	r8
8002d1ea:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002d1ee:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002d1f2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d1f6:	72 d8       	ld.w	r8,r9[0x34]
8002d1f8:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002d1fc:	93 d8       	st.w	r9[0x34],r8
      spi->CSR1.ncpha = (flags & 0x1) ^ 0x1;
8002d1fe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002d202:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002d206:	5f 08       	sreq	r8
8002d208:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002d20c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d210:	72 d8       	ld.w	r8,r9[0x34]
8002d212:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002d216:	93 d8       	st.w	r9[0x34],r8
      break;
8002d218:	c3 88       	rjmp	8002d288 <spi_set_mode+0x112>
    case 2:
      spi->CSR2.cpol  = flags >> 1;
8002d21a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002d21e:	a1 98       	lsr	r8,0x1
8002d220:	5c 58       	castu.b	r8
8002d222:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002d226:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002d22a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d22e:	72 e8       	ld.w	r8,r9[0x38]
8002d230:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002d234:	93 e8       	st.w	r9[0x38],r8
      spi->CSR2.ncpha = (flags & 0x1) ^ 0x1;
8002d236:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002d23a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002d23e:	5f 08       	sreq	r8
8002d240:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002d244:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d248:	72 e8       	ld.w	r8,r9[0x38]
8002d24a:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002d24e:	93 e8       	st.w	r9[0x38],r8
      break;
8002d250:	c1 c8       	rjmp	8002d288 <spi_set_mode+0x112>
    case 3:
      spi->CSR3.cpol  = flags >> 1;
8002d252:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002d256:	a1 98       	lsr	r8,0x1
8002d258:	5c 58       	castu.b	r8
8002d25a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002d25e:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002d262:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d266:	72 f8       	ld.w	r8,r9[0x3c]
8002d268:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002d26c:	93 f8       	st.w	r9[0x3c],r8
      spi->CSR3.ncpha = (flags & 0x1) ^ 0x1;
8002d26e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002d272:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002d276:	5f 08       	sreq	r8
8002d278:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002d27c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002d280:	72 f8       	ld.w	r8,r9[0x3c]
8002d282:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002d286:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002d288:	2f dd       	sub	sp,-12
8002d28a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d28e <spi_put>:
 * \param spi Base address of the SPI instance.
 * \param data The data byte to be loaded 
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
8002d28e:	eb cd 40 80 	pushm	r7,lr
8002d292:	1a 97       	mov	r7,sp
8002d294:	20 2d       	sub	sp,8
8002d296:	ef 4c ff fc 	st.w	r7[-4],r12
8002d29a:	16 98       	mov	r8,r11
8002d29c:	ef 58 ff f8 	st.h	r7[-8],r8
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
8002d2a0:	ef 19 ff f8 	ld.uh	r9,r7[-8]
8002d2a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d2a8:	91 39       	st.w	r8[0xc],r9
}
8002d2aa:	2f ed       	sub	sp,-8
8002d2ac:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d2b0 <spi_get>:
 * \param spi Base address of the SPI instance.
 * \return The data byte 
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
8002d2b0:	eb cd 40 80 	pushm	r7,lr
8002d2b4:	1a 97       	mov	r7,sp
8002d2b6:	20 1d       	sub	sp,4
8002d2b8:	ef 4c ff fc 	st.w	r7[-4],r12
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
8002d2bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d2c0:	70 28       	ld.w	r8,r8[0x8]
8002d2c2:	5c 88       	casts.h	r8
}
8002d2c4:	10 9c       	mov	r12,r8
8002d2c6:	2f fd       	sub	sp,-4
8002d2c8:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d2cc <spi_is_tx_ready>:
 * \return Status.
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
8002d2cc:	eb cd 40 80 	pushm	r7,lr
8002d2d0:	1a 97       	mov	r7,sp
8002d2d2:	20 1d       	sub	sp,4
8002d2d4:	ef 4c ff fc 	st.w	r7[-4],r12
  return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
8002d2d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d2dc:	70 48       	ld.w	r8,r8[0x10]
8002d2de:	e2 18 00 02 	andl	r8,0x2,COH
8002d2e2:	5f 18       	srne	r8
8002d2e4:	5c 58       	castu.b	r8
}
8002d2e6:	10 9c       	mov	r12,r8
8002d2e8:	2f fd       	sub	sp,-4
8002d2ea:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d2ee <spi_is_rx_ready>:
 * \param spi Base address of the SPI instance.
 *
 * \return \c 1 if the SPI Receiver is ready, otherwise \c 0.
 */
static inline bool spi_is_rx_ready(volatile avr32_spi_t *spi)
{
8002d2ee:	eb cd 40 80 	pushm	r7,lr
8002d2f2:	1a 97       	mov	r7,sp
8002d2f4:	20 1d       	sub	sp,4
8002d2f6:	ef 4c ff fc 	st.w	r7[-4],r12
  return (spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) ==
8002d2fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d2fe:	70 48       	ld.w	r8,r8[0x10]
8002d300:	e2 18 02 01 	andl	r8,0x201,COH
8002d304:	e0 48 02 01 	cp.w	r8,513
8002d308:	5f 08       	sreq	r8
8002d30a:	5c 58       	castu.b	r8
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK);
}
8002d30c:	10 9c       	mov	r12,r8
8002d30e:	2f fd       	sub	sp,-4
8002d310:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d314 <spi_write_single>:
 * \param spi    Base address of the SPI instance.
 * \param data   Data to write
 *
 */
static inline void spi_write_single(volatile avr32_spi_t *spi, uint8_t data)
{
8002d314:	eb cd 40 c0 	pushm	r6-r7,lr
8002d318:	1a 97       	mov	r7,sp
8002d31a:	20 2d       	sub	sp,8
8002d31c:	48 86       	lddpc	r6,8002d33c <spi_write_single+0x28>
8002d31e:	1e 26       	rsub	r6,pc
8002d320:	ef 4c ff fc 	st.w	r7[-4],r12
8002d324:	16 98       	mov	r8,r11
8002d326:	ef 68 ff f8 	st.b	r7[-8],r8
	spi_put(spi,(uint16_t)data);
8002d32a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002d32e:	10 9b       	mov	r11,r8
8002d330:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d334:	ca df       	rcall	8002d28e <spi_put>
}
8002d336:	2f ed       	sub	sp,-8
8002d338:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d33c:	80 02       	ld.sh	r2,r0[0x0]
8002d33e:	d1 a2       	popm	r4-r7,r10-r11

8002d340 <spi_read_single>:
 * \param spi    Base address of the SPI instance.
 * \param data   Data to read
 *
 */
static inline void spi_read_single(volatile avr32_spi_t *spi, uint8_t *data)
{
8002d340:	eb cd 40 c0 	pushm	r6-r7,lr
8002d344:	1a 97       	mov	r7,sp
8002d346:	20 2d       	sub	sp,8
8002d348:	48 96       	lddpc	r6,8002d36c <spi_read_single+0x2c>
8002d34a:	1e 26       	rsub	r6,pc
8002d34c:	ef 4c ff fc 	st.w	r7[-4],r12
8002d350:	ef 4b ff f8 	st.w	r7[-8],r11
	*data = (uint8_t)spi_get(spi);
8002d354:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d358:	ca cf       	rcall	8002d2b0 <spi_get>
8002d35a:	18 98       	mov	r8,r12
8002d35c:	5c 88       	casts.h	r8
8002d35e:	5c 58       	castu.b	r8
8002d360:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d364:	b2 88       	st.b	r9[0x0],r8
}
8002d366:	2f ed       	sub	sp,-8
8002d368:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d36c:	80 02       	ld.sh	r2,r0[0x0]
8002d36e:	d1 ce       	*unknown*

8002d370 <spi_master_setup_device>:


void spi_master_setup_device(volatile avr32_spi_t *spi, struct spi_device *device, 
     spi_flags_t flags, uint32_t baud_rate,
     board_spi_select_id_t sel_id)
{
8002d370:	eb cd 40 c0 	pushm	r6-r7,lr
8002d374:	1a 97       	mov	r7,sp
8002d376:	20 5d       	sub	sp,20
8002d378:	4a 76       	lddpc	r6,8002d414 <spi_master_setup_device+0xa4>
8002d37a:	1e 26       	rsub	r6,pc
8002d37c:	ef 4c ff fc 	st.w	r7[-4],r12
8002d380:	ef 4b ff f8 	st.w	r7[-8],r11
8002d384:	ef 49 ff f0 	st.w	r7[-16],r9
8002d388:	14 99       	mov	r9,r10
8002d38a:	ef 69 ff f4 	st.b	r7[-12],r9
8002d38e:	ef 68 ff ec 	st.b	r7[-20],r8
  spi_set_chipselect_delay_bct(spi,device->id,CONFIG_SPI_MASTER_DELAY_BCT);
8002d392:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d396:	11 88       	ld.ub	r8,r8[0x0]
8002d398:	30 0a       	mov	r10,0
8002d39a:	10 9b       	mov	r11,r8
8002d39c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d3a0:	fe b0 fd 9a 	rcall	8002ced4 <spi_set_chipselect_delay_bct>
  spi_set_chipselect_delay_bs(spi,device->id,CONFIG_SPI_MASTER_DELAY_BS);
8002d3a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d3a8:	11 88       	ld.ub	r8,r8[0x0]
8002d3aa:	30 0a       	mov	r10,0
8002d3ac:	10 9b       	mov	r11,r8
8002d3ae:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d3b2:	fe b0 fd d1 	rcall	8002cf54 <spi_set_chipselect_delay_bs>
  spi_set_bits_per_transfer(spi,device->id,CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
8002d3b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d3ba:	11 88       	ld.ub	r8,r8[0x0]
8002d3bc:	30 8a       	mov	r10,8
8002d3be:	10 9b       	mov	r11,r8
8002d3c0:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d3c4:	c0 8e       	rcall	8002cfd4 <spi_set_bits_per_transfer>
  spi_set_baudrate_register(spi,device->id,getBaudDiv(baud_rate, sysclk_get_pba_hz()));
8002d3c6:	fe b0 fd 7b 	rcall	8002cebc <sysclk_get_pba_hz>
8002d3ca:	18 98       	mov	r8,r12
8002d3cc:	10 9b       	mov	r11,r8
8002d3ce:	ee fc ff f0 	ld.w	r12,r7[-16]
8002d3d2:	f0 16 01 21 	mcall	r6[1156]
8002d3d6:	18 98       	mov	r8,r12
8002d3d8:	5c 58       	castu.b	r8
8002d3da:	10 99       	mov	r9,r8
8002d3dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d3e0:	11 88       	ld.ub	r8,r8[0x0]
8002d3e2:	12 9a       	mov	r10,r9
8002d3e4:	10 9b       	mov	r11,r8
8002d3e6:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d3ea:	c4 de       	rcall	8002d084 <spi_set_baudrate_register>
  spi_enable_active_mode(spi,device->id);
8002d3ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d3f0:	11 88       	ld.ub	r8,r8[0x0]
8002d3f2:	10 9b       	mov	r11,r8
8002d3f4:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d3f8:	c8 6e       	rcall	8002d104 <spi_enable_active_mode>
  spi_set_mode(spi,device->id,flags);
8002d3fa:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8002d3fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d402:	11 88       	ld.ub	r8,r8[0x0]
8002d404:	12 9a       	mov	r10,r9
8002d406:	10 9b       	mov	r11,r8
8002d408:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d40c:	cb 5e       	rcall	8002d176 <spi_set_mode>
    {
      while(1);
    }
  }
#endif
}
8002d40e:	2f bd       	sub	sp,-20
8002d410:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d414:	80 02       	ld.sh	r2,r0[0x0]
8002d416:	d1 fe       	*unknown*

8002d418 <spi_read_packet>:

status_code_t spi_read_packet(volatile avr32_spi_t *spi,uint8_t *data, size_t len)
{
8002d418:	eb cd 40 c0 	pushm	r6-r7,lr
8002d41c:	1a 97       	mov	r7,sp
8002d41e:	20 6d       	sub	sp,24
8002d420:	4b 66       	lddpc	r6,8002d4f8 <spi_read_packet+0xe0>
8002d422:	1e 26       	rsub	r6,pc
8002d424:	ef 4c ff f0 	st.w	r7[-16],r12
8002d428:	ef 4b ff ec 	st.w	r7[-20],r11
8002d42c:	ef 4a ff e8 	st.w	r7[-24],r10
  unsigned int timeout = SPI_TIMEOUT;
8002d430:	e0 68 3a 98 	mov	r8,15000
8002d434:	ef 48 ff f8 	st.w	r7[-8],r8
  uint8_t val;  
  size_t i=0;  
8002d438:	30 08       	mov	r8,0
8002d43a:	ef 48 ff fc 	st.w	r7[-4],r8
  while(len) {
8002d43e:	c5 48       	rjmp	8002d4e6 <spi_read_packet+0xce>
  	 timeout = SPI_TIMEOUT;
8002d440:	e0 68 3a 98 	mov	r8,15000
8002d444:	ef 48 ff f8 	st.w	r7[-8],r8
     while (!spi_is_tx_ready(spi)) {
8002d448:	c0 f8       	rjmp	8002d466 <spi_read_packet+0x4e>
       if (!timeout--) {
8002d44a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d44e:	58 08       	cp.w	r8,0
8002d450:	5f 08       	sreq	r8
8002d452:	5c 58       	castu.b	r8
8002d454:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d458:	20 19       	sub	r9,1
8002d45a:	ef 49 ff f8 	st.w	r7[-8],r9
8002d45e:	58 08       	cp.w	r8,0
8002d460:	c0 30       	breq	8002d466 <spi_read_packet+0x4e>
         return ERR_TIMEOUT;
8002d462:	3f d8       	mov	r8,-3
8002d464:	c4 68       	rjmp	8002d4f0 <spi_read_packet+0xd8>
  unsigned int timeout = SPI_TIMEOUT;
  uint8_t val;  
  size_t i=0;  
  while(len) {
  	 timeout = SPI_TIMEOUT;
     while (!spi_is_tx_ready(spi)) {
8002d466:	ee fc ff f0 	ld.w	r12,r7[-16]
8002d46a:	c3 1f       	rcall	8002d2cc <spi_is_tx_ready>
8002d46c:	18 98       	mov	r8,r12
8002d46e:	ec 18 00 01 	eorl	r8,0x1
8002d472:	5c 58       	castu.b	r8
8002d474:	ce b1       	brne	8002d44a <spi_read_packet+0x32>
       if (!timeout--) {
         return ERR_TIMEOUT;
       }
     }
     spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
8002d476:	e0 6b 00 ff 	mov	r11,255
8002d47a:	ee fc ff f0 	ld.w	r12,r7[-16]
8002d47e:	c4 bf       	rcall	8002d314 <spi_write_single>
     timeout = SPI_TIMEOUT;
8002d480:	e0 68 3a 98 	mov	r8,15000
8002d484:	ef 48 ff f8 	st.w	r7[-8],r8
     while (!spi_is_rx_ready(spi)) {
8002d488:	c0 f8       	rjmp	8002d4a6 <spi_read_packet+0x8e>
       if (!timeout--) {
8002d48a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d48e:	58 08       	cp.w	r8,0
8002d490:	5f 08       	sreq	r8
8002d492:	5c 58       	castu.b	r8
8002d494:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d498:	20 19       	sub	r9,1
8002d49a:	ef 49 ff f8 	st.w	r7[-8],r9
8002d49e:	58 08       	cp.w	r8,0
8002d4a0:	c0 30       	breq	8002d4a6 <spi_read_packet+0x8e>
         return ERR_TIMEOUT;
8002d4a2:	3f d8       	mov	r8,-3
8002d4a4:	c2 68       	rjmp	8002d4f0 <spi_read_packet+0xd8>
         return ERR_TIMEOUT;
       }
     }
     spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
     timeout = SPI_TIMEOUT;
     while (!spi_is_rx_ready(spi)) {
8002d4a6:	ee fc ff f0 	ld.w	r12,r7[-16]
8002d4aa:	c2 2f       	rcall	8002d2ee <spi_is_rx_ready>
8002d4ac:	18 98       	mov	r8,r12
8002d4ae:	ec 18 00 01 	eorl	r8,0x1
8002d4b2:	5c 58       	castu.b	r8
8002d4b4:	ce b1       	brne	8002d48a <spi_read_packet+0x72>
       if (!timeout--) {
         return ERR_TIMEOUT;
       }
     }
     spi_read_single(spi,&val);
8002d4b6:	ee c8 00 09 	sub	r8,r7,9
8002d4ba:	10 9b       	mov	r11,r8
8002d4bc:	ee fc ff f0 	ld.w	r12,r7[-16]
8002d4c0:	c4 0f       	rcall	8002d340 <spi_read_single>
     data[i] = val;
8002d4c2:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002d4c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d4ca:	10 09       	add	r9,r8
8002d4cc:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8002d4d0:	b2 88       	st.b	r9[0x0],r8
     i++;
8002d4d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002d4d6:	2f f8       	sub	r8,-1
8002d4d8:	ef 48 ff fc 	st.w	r7[-4],r8
     len--;
8002d4dc:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002d4e0:	20 18       	sub	r8,1
8002d4e2:	ef 48 ff e8 	st.w	r7[-24],r8
status_code_t spi_read_packet(volatile avr32_spi_t *spi,uint8_t *data, size_t len)
{
  unsigned int timeout = SPI_TIMEOUT;
  uint8_t val;  
  size_t i=0;  
  while(len) {
8002d4e6:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002d4ea:	58 08       	cp.w	r8,0
8002d4ec:	ca a1       	brne	8002d440 <spi_read_packet+0x28>
     spi_read_single(spi,&val);
     data[i] = val;
     i++;
     len--;
  }
  return STATUS_OK;
8002d4ee:	30 08       	mov	r8,0
}
8002d4f0:	10 9c       	mov	r12,r8
8002d4f2:	2f ad       	sub	sp,-24
8002d4f4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d4f8:	80 02       	ld.sh	r2,r0[0x0]
8002d4fa:	d2 a6       	*unknown*

8002d4fc <spi_write_packet>:

status_code_t spi_write_packet(volatile avr32_spi_t *spi, const uint8_t *data, size_t len)
{
8002d4fc:	eb cd 40 c0 	pushm	r6-r7,lr
8002d500:	1a 97       	mov	r7,sp
8002d502:	20 6d       	sub	sp,24
8002d504:	4a 76       	lddpc	r6,8002d5a0 <spi_write_packet+0xa4>
8002d506:	1e 26       	rsub	r6,pc
8002d508:	ef 4c ff f0 	st.w	r7[-16],r12
8002d50c:	ef 4b ff ec 	st.w	r7[-20],r11
8002d510:	ef 4a ff e8 	st.w	r7[-24],r10
  unsigned int timeout = SPI_TIMEOUT;
8002d514:	e0 68 3a 98 	mov	r8,15000
8002d518:	ef 48 ff f4 	st.w	r7[-12],r8
  size_t i=0;
8002d51c:	30 08       	mov	r8,0
8002d51e:	ef 48 ff f8 	st.w	r7[-8],r8
  uint8_t val;
  while(len) {
8002d522:	c3 58       	rjmp	8002d58c <spi_write_packet+0x90>
     timeout = SPI_TIMEOUT;
8002d524:	e0 68 3a 98 	mov	r8,15000
8002d528:	ef 48 ff f4 	st.w	r7[-12],r8
     while (!spi_is_tx_ready(spi)) {
8002d52c:	c0 f8       	rjmp	8002d54a <spi_write_packet+0x4e>
       if (!timeout--) {
8002d52e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d532:	58 08       	cp.w	r8,0
8002d534:	5f 08       	sreq	r8
8002d536:	5c 58       	castu.b	r8
8002d538:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d53c:	20 19       	sub	r9,1
8002d53e:	ef 49 ff f4 	st.w	r7[-12],r9
8002d542:	58 08       	cp.w	r8,0
8002d544:	c0 30       	breq	8002d54a <spi_write_packet+0x4e>
         return ERR_TIMEOUT;
8002d546:	3f d8       	mov	r8,-3
8002d548:	c2 78       	rjmp	8002d596 <spi_write_packet+0x9a>
  unsigned int timeout = SPI_TIMEOUT;
  size_t i=0;
  uint8_t val;
  while(len) {
     timeout = SPI_TIMEOUT;
     while (!spi_is_tx_ready(spi)) {
8002d54a:	ee fc ff f0 	ld.w	r12,r7[-16]
8002d54e:	cb fe       	rcall	8002d2cc <spi_is_tx_ready>
8002d550:	18 98       	mov	r8,r12
8002d552:	ec 18 00 01 	eorl	r8,0x1
8002d556:	5c 58       	castu.b	r8
8002d558:	ce b1       	brne	8002d52e <spi_write_packet+0x32>
       if (!timeout--) {
         return ERR_TIMEOUT;
       }
     }
     val = data[i];     
8002d55a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002d55e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d562:	f2 08 00 08 	add	r8,r9,r8
8002d566:	11 88       	ld.ub	r8,r8[0x0]
8002d568:	ef 68 ff ff 	st.b	r7[-1],r8
     spi_write_single(spi,val);
8002d56c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002d570:	10 9b       	mov	r11,r8
8002d572:	ee fc ff f0 	ld.w	r12,r7[-16]
8002d576:	cc fe       	rcall	8002d314 <spi_write_single>
     i++;
8002d578:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d57c:	2f f8       	sub	r8,-1
8002d57e:	ef 48 ff f8 	st.w	r7[-8],r8
     len--;
8002d582:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002d586:	20 18       	sub	r8,1
8002d588:	ef 48 ff e8 	st.w	r7[-24],r8
status_code_t spi_write_packet(volatile avr32_spi_t *spi, const uint8_t *data, size_t len)
{
  unsigned int timeout = SPI_TIMEOUT;
  size_t i=0;
  uint8_t val;
  while(len) {
8002d58c:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002d590:	58 08       	cp.w	r8,0
8002d592:	cc 91       	brne	8002d524 <spi_write_packet+0x28>
     val = data[i];     
     spi_write_single(spi,val);
     i++;
     len--;
  }
  return STATUS_OK;
8002d594:	30 08       	mov	r8,0
}
8002d596:	10 9c       	mov	r12,r8
8002d598:	2f ad       	sub	sp,-24
8002d59a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d59e:	00 00       	add	r0,r0
8002d5a0:	80 02       	ld.sh	r2,r0[0x0]
8002d5a2:	d3 8a       	popm	r10-r12

8002d5a4 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8002d5a4:	eb cd 40 c0 	pushm	r6-r7,lr
8002d5a8:	1a 97       	mov	r7,sp
8002d5aa:	20 6d       	sub	sp,24
8002d5ac:	49 e6       	lddpc	r6,8002d624 <interpolate+0x80>
8002d5ae:	1e 26       	rsub	r6,pc
8002d5b0:	ef 4c ff f8 	st.w	r7[-8],r12
8002d5b4:	ef 4b ff f4 	st.w	r7[-12],r11
8002d5b8:	ef 4a ff f0 	st.w	r7[-16],r10
8002d5bc:	ef 49 ff ec 	st.w	r7[-20],r9
8002d5c0:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8002d5c4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d5c8:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002d5cc:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8002d5d0:	c0 41       	brne	8002d5d8 <interpolate+0x34>
	{
		return y1;
8002d5d2:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d5d6:	c2 38       	rjmp	8002d61c <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8002d5d8:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002d5dc:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d5e0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8002d5e4:	ee fa ff f8 	ld.w	r10,r7[-8]
8002d5e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d5ec:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8002d5f0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002d5f4:	ee fa ff f0 	ld.w	r10,r7[-16]
8002d5f8:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d5fc:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8002d600:	12 9b       	mov	r11,r9
8002d602:	10 9c       	mov	r12,r8
8002d604:	f0 16 00 08 	mcall	r6[32]
8002d608:	18 98       	mov	r8,r12
8002d60a:	10 99       	mov	r9,r8
8002d60c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d610:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8002d614:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8002d618:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8002d61c:	10 9c       	mov	r12,r8
8002d61e:	2f ad       	sub	sp,-24
8002d620:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d624:	80 02       	ld.sh	r2,r0[0x0]
8002d626:	d4 32       	popm	r0-r7,lr

8002d628 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8002d628:	eb cd 40 c0 	pushm	r6-r7,lr
8002d62c:	1a 97       	mov	r7,sp
8002d62e:	20 3d       	sub	sp,12
8002d630:	49 06       	lddpc	r6,8002d670 <mav_array_memcpy+0x48>
8002d632:	1e 26       	rsub	r6,pc
8002d634:	ef 4c ff fc 	st.w	r7[-4],r12
8002d638:	ef 4b ff f8 	st.w	r7[-8],r11
8002d63c:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8002d640:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d644:	58 08       	cp.w	r8,0
8002d646:	c0 91       	brne	8002d658 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8002d648:	ee fa ff f4 	ld.w	r10,r7[-12]
8002d64c:	30 0b       	mov	r11,0
8002d64e:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d652:	f0 16 00 31 	mcall	r6[196]
8002d656:	c0 98       	rjmp	8002d668 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8002d658:	ee fa ff f4 	ld.w	r10,r7[-12]
8002d65c:	ee fb ff f8 	ld.w	r11,r7[-8]
8002d660:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d664:	f0 16 00 21 	mcall	r6[132]
	}
}
8002d668:	2f dd       	sub	sp,-12
8002d66a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d66e:	00 00       	add	r0,r0
8002d670:	80 02       	ld.sh	r2,r0[0x0]
8002d672:	d4 b6       	*unknown*

8002d674 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
8002d674:	eb cd 40 80 	pushm	r7,lr
8002d678:	1a 97       	mov	r7,sp
8002d67a:	20 1d       	sub	sp,4
8002d67c:	18 98       	mov	r8,r12
8002d67e:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002d682:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002d686:	58 38       	cp.w	r8,3
8002d688:	c1 20       	breq	8002d6ac <osc_get_rate+0x38>
8002d68a:	e0 89 00 07 	brgt	8002d698 <osc_get_rate+0x24>
8002d68e:	58 08       	cp.w	r8,0
8002d690:	c0 90       	breq	8002d6a2 <osc_get_rate+0x2e>
8002d692:	58 28       	cp.w	r8,2
8002d694:	c0 f0       	breq	8002d6b2 <osc_get_rate+0x3e>
8002d696:	c1 b8       	rjmp	8002d6cc <osc_get_rate+0x58>
8002d698:	58 48       	cp.w	r8,4
8002d69a:	c1 10       	breq	8002d6bc <osc_get_rate+0x48>
8002d69c:	58 58       	cp.w	r8,5
8002d69e:	c1 40       	breq	8002d6c6 <osc_get_rate+0x52>
8002d6a0:	c1 68       	rjmp	8002d6cc <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8002d6a2:	e0 68 24 00 	mov	r8,9216
8002d6a6:	ea 18 00 f4 	orh	r8,0xf4
8002d6aa:	c1 28       	rjmp	8002d6ce <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8002d6ac:	e0 68 80 00 	mov	r8,32768
8002d6b0:	c0 f8       	rjmp	8002d6ce <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8002d6b2:	e0 68 12 00 	mov	r8,4608
8002d6b6:	ea 18 00 7a 	orh	r8,0x7a
8002d6ba:	c0 a8       	rjmp	8002d6ce <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8002d6bc:	e0 68 0e 00 	mov	r8,3584
8002d6c0:	ea 18 07 27 	orh	r8,0x727
8002d6c4:	c0 58       	rjmp	8002d6ce <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8002d6c6:	e0 78 c1 38 	mov	r8,115000
8002d6ca:	c0 28       	rjmp	8002d6ce <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
8002d6cc:	30 08       	mov	r8,0
	}
}
8002d6ce:	10 9c       	mov	r12,r8
8002d6d0:	2f fd       	sub	sp,-4
8002d6d2:	e3 cd 80 80 	ldm	sp++,r7,pc

8002d6d6 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8002d6d6:	eb cd 40 c0 	pushm	r6-r7,lr
8002d6da:	1a 97       	mov	r7,sp
8002d6dc:	48 56       	lddpc	r6,8002d6f0 <sysclk_get_main_hz+0x1a>
8002d6de:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8002d6e0:	30 0c       	mov	r12,0
8002d6e2:	cc 9f       	rcall	8002d674 <osc_get_rate>
8002d6e4:	18 98       	mov	r8,r12
8002d6e6:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8002d6e8:	10 9c       	mov	r12,r8
8002d6ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d6ee:	00 00       	add	r0,r0
8002d6f0:	80 02       	ld.sh	r2,r0[0x0]
8002d6f2:	d5 62       	popm	r4-r9,r11,lr

8002d6f4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8002d6f4:	eb cd 40 c0 	pushm	r6-r7,lr
8002d6f8:	1a 97       	mov	r7,sp
8002d6fa:	48 46       	lddpc	r6,8002d708 <sysclk_get_cpu_hz+0x14>
8002d6fc:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8002d6fe:	ce cf       	rcall	8002d6d6 <sysclk_get_main_hz>
8002d700:	18 98       	mov	r8,r12
}
8002d702:	10 9c       	mov	r12,r8
8002d704:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d708:	80 02       	ld.sh	r2,r0[0x0]
8002d70a:	d5 80       	acall	0x58

8002d70c <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
8002d70c:	eb cd 40 c0 	pushm	r6-r7,lr
8002d710:	1a 97       	mov	r7,sp
8002d712:	20 1d       	sub	sp,4
8002d714:	49 06       	lddpc	r6,8002d754 <sleepmgr_init+0x48>
8002d716:	1e 26       	rsub	r6,pc
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8002d718:	30 08       	mov	r8,0
8002d71a:	ef 68 ff ff 	st.b	r7[-1],r8
8002d71e:	c0 d8       	rjmp	8002d738 <sleepmgr_init+0x2c>
		sleepmgr_locks[i] = 0;
8002d720:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002d724:	ec fa 03 f4 	ld.w	r10,r6[1012]
8002d728:	30 08       	mov	r8,0
8002d72a:	f4 09 0b 08 	st.b	r10[r9],r8
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8002d72e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002d732:	2f f8       	sub	r8,-1
8002d734:	ef 68 ff ff 	st.b	r7[-1],r8
8002d738:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002d73c:	30 58       	mov	r8,5
8002d73e:	f0 09 18 00 	cp.b	r9,r8
8002d742:	fe 98 ff ef 	brls	8002d720 <sleepmgr_init+0x14>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
8002d746:	ec f9 03 f4 	ld.w	r9,r6[1012]
8002d74a:	30 18       	mov	r8,1
8002d74c:	b2 e8       	st.b	r9[0x6],r8
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8002d74e:	2f fd       	sub	sp,-4
8002d750:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d754:	80 02       	ld.sh	r2,r0[0x0]
8002d756:	d5 9a       	popm	r0-r3,r10-r11,lr
8002d758:	42 6f       	lddsp	pc,sp[0x98]
8002d75a:	61 72       	ld.w	r2,r0[0x5c]
8002d75c:	64 20       	ld.w	r0,r2[0x8]
8002d75e:	69 6e       	ld.w	lr,r4[0x58]
8002d760:	69 74       	ld.w	r4,r4[0x5c]
8002d762:	69 61       	ld.w	r1,r4[0x58]
8002d764:	6c 69       	ld.w	r9,r6[0x18]
8002d766:	73 65       	ld.w	r5,r9[0x58]
8002d768:	64 2e       	ld.w	lr,r2[0x8]
8002d76a:	0a 00       	add	r0,r5

8002d76c <initialise_board>:
#include "bmp085.h"
#include "analog_monitor.h"

//static volatile board_hardware_t board_hardware;

void initialise_board(central_data_t *centralData) {
8002d76c:	eb cd 40 e0 	pushm	r5-r7,lr
8002d770:	1a 97       	mov	r7,sp
8002d772:	20 3d       	sub	sp,12
8002d774:	4f 66       	lddpc	r6,8002d94c <initialise_board+0x1e0>
8002d776:	1e 26       	rsub	r6,pc
8002d778:	ef 4c ff f4 	st.w	r7[-12],r12
	int i;
	enum GPS_Engine_Setting engine_nav_settings = GPS_ENGINE_AIRBORNE_4G;
8002d77c:	30 88       	mov	r8,8
8002d77e:	ef 48 ff fc 	st.w	r7[-4],r8

	irq_initialize_vectors();
8002d782:	f0 16 01 1b 	mcall	r6[1132]
	cpu_irq_enable();
8002d786:	d5 03       	csrf	0x10
	Disable_global_interrupt();
8002d788:	d3 03       	ssrf	0x10
		
	// Initialize the sleep manager
	sleepmgr_init();
8002d78a:	cc 1f       	rcall	8002d70c <sleepmgr_init>
	sysclk_init();
8002d78c:	f0 16 01 4b 	mcall	r6[1324]
	board_init();
8002d790:	f0 16 01 a4 	mcall	r6[1680]
	delay_init(sysclk_get_cpu_hz());
8002d794:	cb 0f       	rcall	8002d6f4 <sysclk_get_cpu_hz>
8002d796:	18 98       	mov	r8,r12
8002d798:	10 9c       	mov	r12,r8
8002d79a:	f0 16 01 b6 	mcall	r6[1752]
	init_time_keeper();
8002d79e:	f0 16 01 fc 	mcall	r6[2032]
		
	INTC_init_interrupts();
8002d7a2:	f0 16 01 1b 	mcall	r6[1132]
		
		
	if (init_i2c(0)!=STATUS_OK) {
8002d7a6:	30 0c       	mov	r12,0
8002d7a8:	f0 16 00 e2 	mcall	r6[904]
8002d7ac:	18 98       	mov	r8,r12
8002d7ae:	58 08       	cp.w	r8,0
8002d7b0:	c0 20       	breq	8002d7b4 <initialise_board+0x48>
		//putstring(STDOUT, "Error initialising I2C\n");
		while (1==1);
8002d7b2:	c0 08       	rjmp	8002d7b2 <initialise_board+0x46>
		} else {
		//putstring(STDOUT, "initialised I2C.\n");
	};
	if (init_i2c(1)!=STATUS_OK) {
8002d7b4:	30 1c       	mov	r12,1
8002d7b6:	f0 16 00 e2 	mcall	r6[904]
8002d7ba:	18 98       	mov	r8,r12
8002d7bc:	58 08       	cp.w	r8,0
8002d7be:	c0 20       	breq	8002d7c2 <initialise_board+0x56>
		//putstring(STDOUT, "Error initialising I2C\n");
		while (1==1);
8002d7c0:	c0 08       	rjmp	8002d7c0 <initialise_board+0x54>
		} else {
		//putstring(STDOUT, "initialised I2C.\n");
	};

	LED_Off(LED1);
8002d7c2:	30 2c       	mov	r12,2
8002d7c4:	f0 16 01 6a 	mcall	r6[1448]
	// Configure the pins connected to LEDs as output and set their default
	// initial state to high (LEDs off).
	//gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
	//gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);

	init_Servos();
8002d7c8:	f0 16 02 23 	mcall	r6[2188]
	set_servos(&servo_failsafe);
8002d7cc:	ec fc 08 98 	ld.w	r12,r6[2200]
8002d7d0:	f0 16 00 a9 	mcall	r6[676]
	
		
	init_UART_int(0);
8002d7d4:	30 0c       	mov	r12,0
8002d7d6:	f0 16 00 a5 	mcall	r6[660]
	register_write_stream(get_UART_handle(0), &(centralData->xbee_out_stream));
8002d7da:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d7de:	f0 c5 f6 8c 	sub	r5,r8,-2420
8002d7e2:	30 0c       	mov	r12,0
8002d7e4:	f0 16 00 69 	mcall	r6[420]
8002d7e8:	18 98       	mov	r8,r12
8002d7ea:	0a 9b       	mov	r11,r5
8002d7ec:	10 9c       	mov	r12,r8
8002d7ee:	f0 16 00 d4 	mcall	r6[848]
				
		
	init_UART_int(3);
8002d7f2:	30 3c       	mov	r12,3
8002d7f4:	f0 16 00 a5 	mcall	r6[660]
	make_buffered_stream(&(centralData->gps_buffer), &(centralData->gps_stream_in));
8002d7f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d7fc:	f0 c9 f5 28 	sub	r9,r8,-2776
8002d800:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d804:	f0 c8 f6 2c 	sub	r8,r8,-2516
8002d808:	12 9b       	mov	r11,r9
8002d80a:	10 9c       	mov	r12,r8
8002d80c:	f0 16 01 6d 	mcall	r6[1460]
	register_read_stream(get_UART_handle(3), &(centralData->gps_stream_in));
8002d810:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d814:	f0 c5 f5 28 	sub	r5,r8,-2776
8002d818:	30 3c       	mov	r12,3
8002d81a:	f0 16 00 69 	mcall	r6[420]
8002d81e:	18 98       	mov	r8,r12
8002d820:	0a 9b       	mov	r11,r5
8002d822:	10 9c       	mov	r12,r8
8002d824:	f0 16 00 c2 	mcall	r6[776]
	register_write_stream(get_UART_handle(3), &(centralData->gps_stream_out));
8002d828:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d82c:	f0 c5 f5 10 	sub	r5,r8,-2800
8002d830:	30 3c       	mov	r12,3
8002d832:	f0 16 00 69 	mcall	r6[420]
8002d836:	18 98       	mov	r8,r12
8002d838:	0a 9b       	mov	r11,r5
8002d83a:	10 9c       	mov	r12,r8
8002d83c:	f0 16 00 d4 	mcall	r6[848]
		
	init_UART_int(4);
8002d840:	30 4c       	mov	r12,4
8002d842:	f0 16 00 a5 	mcall	r6[660]
	register_write_stream(get_UART_handle(4), &(centralData->wired_out_stream));
8002d846:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d84a:	f0 c5 f6 5c 	sub	r5,r8,-2468
8002d84e:	30 4c       	mov	r12,4
8002d850:	f0 16 00 69 	mcall	r6[420]
8002d854:	18 98       	mov	r8,r12
8002d856:	0a 9b       	mov	r11,r5
8002d858:	10 9c       	mov	r12,r8
8002d85a:	f0 16 00 d4 	mcall	r6[848]


	make_buffered_stream_lossy(&(centralData->xbee_in_buffer), &(centralData->xbee_in_stream));
8002d85e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d862:	f0 c9 f6 74 	sub	r9,r8,-2444
8002d866:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d86a:	f0 c8 f8 94 	sub	r8,r8,-1900
8002d86e:	12 9b       	mov	r11,r9
8002d870:	10 9c       	mov	r12,r8
8002d872:	f0 16 00 f0 	mcall	r6[960]
	make_buffered_stream_lossy(&(centralData->wired_in_buffer), &(centralData->wired_in_stream));
8002d876:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d87a:	f0 c9 f6 44 	sub	r9,r8,-2492
8002d87e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d882:	f0 c8 f7 91 	sub	r8,r8,-2159
8002d886:	12 9b       	mov	r11,r9
8002d888:	10 9c       	mov	r12,r8
8002d88a:	f0 16 00 f0 	mcall	r6[960]
	register_read_stream(get_UART_handle(4), &(centralData->wired_in_stream));
8002d88e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d892:	f0 c5 f6 44 	sub	r5,r8,-2492
8002d896:	30 4c       	mov	r12,4
8002d898:	f0 16 00 69 	mcall	r6[420]
8002d89c:	18 98       	mov	r8,r12
8002d89e:	0a 9b       	mov	r11,r5
8002d8a0:	10 9c       	mov	r12,r8
8002d8a2:	f0 16 00 c2 	mcall	r6[776]
	register_read_stream(get_UART_handle(0), &(centralData->xbee_in_stream));
8002d8a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d8aa:	f0 c5 f6 74 	sub	r5,r8,-2444
8002d8ae:	30 0c       	mov	r12,0
8002d8b0:	f0 16 00 69 	mcall	r6[420]
8002d8b4:	18 98       	mov	r8,r12
8002d8b6:	0a 9b       	mov	r11,r5
8002d8b8:	10 9c       	mov	r12,r8
8002d8ba:	f0 16 00 c2 	mcall	r6[776]

		
	// connect abstracted aliases to hardware ports


	centralData->telemetry_down_stream=&(centralData->xbee_out_stream);
8002d8be:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d8c2:	f0 c9 f6 8c 	sub	r9,r8,-2420
8002d8c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d8ca:	f1 49 0d fc 	st.w	r8[3580],r9
	centralData->telemetry_up_stream=&(centralData->xbee_in_stream);
8002d8ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d8d2:	f0 c9 f6 74 	sub	r9,r8,-2444
8002d8d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d8da:	f1 49 0e 00 	st.w	r8[3584],r9
	centralData->debug_out_stream=&(centralData->wired_out_stream);
8002d8de:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d8e2:	f0 c9 f6 5c 	sub	r9,r8,-2468
8002d8e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d8ea:	f1 49 0e 04 	st.w	r8[3588],r9
	centralData->debug_in_stream=&(centralData->wired_in_stream);
8002d8ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d8f2:	f0 c9 f6 44 	sub	r9,r8,-2492
8002d8f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d8fa:	f1 49 0e 08 	st.w	r8[3592],r9
	centralData->telemetry_up_stream  =&(centralData->wired_in_stream);		
	centralData->debug_out_stream     =&(centralData->xbee_out_stream);
	centralData->debug_in_stream      =&(centralData->xbee_in_stream);
*/

	init_analog_monitor();
8002d8fe:	f0 16 01 c1 	mcall	r6[1796]
	// init mavlink
	init_mavlink(centralData->telemetry_down_stream, centralData->telemetry_up_stream, MAVLINK_SYS_ID);
8002d902:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d906:	f0 f9 0e 00 	ld.w	r9,r8[3584]
8002d90a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d90e:	f0 f8 0d fc 	ld.w	r8,r8[3580]
8002d912:	32 ca       	mov	r10,44
8002d914:	12 9b       	mov	r11,r9
8002d916:	10 9c       	mov	r12,r8
8002d918:	f0 16 01 ce 	mcall	r6[1848]
		
	// init debug output
	dbg_print_init(centralData->debug_out_stream);
8002d91c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d920:	f0 f8 0e 04 	ld.w	r8,r8[3588]
8002d924:	10 9c       	mov	r12,r8
8002d926:	f0 16 01 64 	mcall	r6[1424]
		
	init_imu(&(centralData->imu1));
8002d92a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d92e:	10 9c       	mov	r12,r8
8002d930:	f0 16 01 6f 	mcall	r6[1468]
	init_bmp085();
8002d934:	f0 16 01 e9 	mcall	r6[1956]

	rc_init();
8002d938:	f0 16 01 3a 	mcall	r6[1256]


	Enable_global_interrupt();
8002d93c:	d5 03       	csrf	0x10
	dbg_print("Board initialised.\n");
8002d93e:	fe cc 01 e6 	sub	r12,pc,486
8002d942:	f0 16 00 01 	mcall	r6[4]
}
8002d946:	2f dd       	sub	sp,-12
8002d948:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8002d94c:	80 02       	ld.sh	r2,r0[0x0]
8002d94e:	d5 fa       	popm	r0-r11,lr

8002d950 <interpolate>:

}


static float interpolate(float x, float x1, float x2, float y1, float y2)
{
8002d950:	eb cd 40 c0 	pushm	r6-r7,lr
8002d954:	1a 97       	mov	r7,sp
8002d956:	20 6d       	sub	sp,24
8002d958:	49 e6       	lddpc	r6,8002d9d0 <interpolate+0x80>
8002d95a:	1e 26       	rsub	r6,pc
8002d95c:	ef 4c ff f8 	st.w	r7[-8],r12
8002d960:	ef 4b ff f4 	st.w	r7[-12],r11
8002d964:	ef 4a ff f0 	st.w	r7[-16],r10
8002d968:	ef 49 ff ec 	st.w	r7[-20],r9
8002d96c:	ef 48 ff e8 	st.w	r7[-24],r8
	if (x1 == x2)
8002d970:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d974:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002d978:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8002d97c:	c0 41       	brne	8002d984 <interpolate+0x34>
	{
		return y1;
8002d97e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d982:	c2 38       	rjmp	8002d9c8 <interpolate+0x78>
	}
	else
	{
		float y = y1 + (y2 - y1) * (x - x1) / (x2 - x1); 
8002d984:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002d988:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d98c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8002d990:	ee fa ff f8 	ld.w	r10,r7[-8]
8002d994:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d998:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8002d99c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002d9a0:	ee fa ff f0 	ld.w	r10,r7[-16]
8002d9a4:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002d9a8:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8002d9ac:	12 9b       	mov	r11,r9
8002d9ae:	10 9c       	mov	r12,r8
8002d9b0:	f0 16 00 08 	mcall	r6[32]
8002d9b4:	18 98       	mov	r8,r12
8002d9b6:	10 99       	mov	r9,r8
8002d9b8:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002d9bc:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8002d9c0:	ef 48 ff fc 	st.w	r7[-4],r8
		return y;
8002d9c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
	}
}
8002d9c8:	10 9c       	mov	r12,r8
8002d9ca:	2f ad       	sub	sp,-24
8002d9cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d9d0:	80 02       	ld.sh	r2,r0[0x0]
8002d9d2:	d7 de       	*unknown*

8002d9d4 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8002d9d4:	eb cd 40 c0 	pushm	r6-r7,lr
8002d9d8:	1a 97       	mov	r7,sp
8002d9da:	20 3d       	sub	sp,12
8002d9dc:	49 06       	lddpc	r6,8002da1c <mav_array_memcpy+0x48>
8002d9de:	1e 26       	rsub	r6,pc
8002d9e0:	ef 4c ff fc 	st.w	r7[-4],r12
8002d9e4:	ef 4b ff f8 	st.w	r7[-8],r11
8002d9e8:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8002d9ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d9f0:	58 08       	cp.w	r8,0
8002d9f2:	c0 91       	brne	8002da04 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8002d9f4:	ee fa ff f4 	ld.w	r10,r7[-12]
8002d9f8:	30 0b       	mov	r11,0
8002d9fa:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d9fe:	f0 16 00 31 	mcall	r6[196]
8002da02:	c0 98       	rjmp	8002da14 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8002da04:	ee fa ff f4 	ld.w	r10,r7[-12]
8002da08:	ee fb ff f8 	ld.w	r11,r7[-8]
8002da0c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002da10:	f0 16 00 21 	mcall	r6[132]
	}
}
8002da14:	2f dd       	sub	sp,-12
8002da16:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002da1a:	00 00       	add	r0,r0
8002da1c:	80 02       	ld.sh	r2,r0[0x0]
8002da1e:	d8 62       	popm	r4-r9,pc
8002da20:	44 65       	lddsp	r5,sp[0x118]
8002da22:	62 75       	ld.w	r5,r1[0x1c]
8002da24:	67 20       	ld.w	r0,r3[0x48]
8002da26:	73 74       	ld.w	r4,r9[0x5c]
8002da28:	72 65       	ld.w	r5,r9[0x18]
8002da2a:	61 6d       	ld.w	sp,r0[0x58]
8002da2c:	20 69       	sub	r9,6
8002da2e:	6e 69       	ld.w	r9,r7[0x18]
8002da30:	74 69       	ld.w	r9,r10[0x18]
8002da32:	61 6c       	ld.w	r12,r0[0x58]
8002da34:	69 73       	ld.w	r3,r4[0x5c]
8002da36:	65 64       	ld.w	r4,r2[0x58]
8002da38:	0a 00       	add	r0,r5

8002da3a <initialisation>:
#include "orca.h"
//#include "flashvault.h"

central_data_t *centralData;

void initialisation() {
8002da3a:	eb cd 40 c0 	pushm	r6-r7,lr
8002da3e:	1a 97       	mov	r7,sp
8002da40:	20 2d       	sub	sp,8
8002da42:	4e 26       	lddpc	r6,8002dbc8 <initialisation+0x18e>
8002da44:	1e 26       	rsub	r6,pc
	int i;
	enum GPS_Engine_Setting engine_nav_settings = GPS_ENGINE_AIRBORNE_4G;
8002da46:	30 88       	mov	r8,8
8002da48:	ef 48 ff fc 	st.w	r7[-4],r8

	centralData = get_central_data();
8002da4c:	f0 16 00 33 	mcall	r6[204]
8002da50:	18 99       	mov	r9,r12
8002da52:	ec f8 00 00 	ld.w	r8,r6[0]
8002da56:	91 09       	st.w	r8[0x0],r9
	initialise_board(centralData);
8002da58:	ec f8 00 00 	ld.w	r8,r6[0]
8002da5c:	70 08       	ld.w	r8,r8[0x0]
8002da5e:	10 9c       	mov	r12,r8
8002da60:	f0 16 02 20 	mcall	r6[2176]
	initialise_central_data();
8002da64:	f0 16 01 b8 	mcall	r6[1760]
	

	init_radar_modules();
8002da68:	f0 16 01 6b 	mcall	r6[1452]
	dbg_print("Debug stream initialised\n");
8002da6c:	fe cc 00 4c 	sub	r12,pc,76
8002da70:	f0 16 00 01 	mcall	r6[4]

	//init_gps_ubx(engine_nav_settings);
	
	set_servos(&servo_failsafe);
8002da74:	ec fc 08 94 	ld.w	r12,r6[2196]
8002da78:	f0 16 00 a9 	mcall	r6[676]

	init_onboard_parameters();
8002da7c:	f0 16 01 e6 	mcall	r6[1944]
	init_mavlink_actions();
8002da80:	f0 16 01 d6 	mcall	r6[1880]
	init_pos_integration(&centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);
8002da84:	ec f8 00 00 	ld.w	r8,r6[0]
8002da88:	70 08       	ld.w	r8,r8[0x0]
8002da8a:	f0 ca f4 f8 	sub	r10,r8,-2824
8002da8e:	ec f8 00 00 	ld.w	r8,r6[0]
8002da92:	70 08       	ld.w	r8,r8[0x0]
8002da94:	f0 c9 ef 3c 	sub	r9,r8,-4292
8002da98:	ec f8 00 00 	ld.w	r8,r6[0]
8002da9c:	70 08       	ld.w	r8,r8[0x0]
8002da9e:	f0 c8 f2 c4 	sub	r8,r8,-3388
8002daa2:	12 9b       	mov	r11,r9
8002daa4:	10 9c       	mov	r12,r8
8002daa6:	f0 16 01 71 	mcall	r6[1476]
	
	centralData->imu1.attitude.calibration_level=LEVELING;	
8002daaa:	ec f8 00 00 	ld.w	r8,r6[0]
8002daae:	70 09       	ld.w	r9,r8[0x0]
8002dab0:	30 18       	mov	r8,1
8002dab2:	f3 68 00 b8 	st.b	r9[184],r8
	centralData->mav_state = MAV_STATE_CALIBRATING;
8002dab6:	ec f8 00 00 	ld.w	r8,r6[0]
8002daba:	70 09       	ld.w	r9,r8[0x0]
8002dabc:	30 28       	mov	r8,2
8002dabe:	f3 68 10 bd 	st.b	r9[4285],r8
	centralData->mav_mode = MAV_MODE_PREFLIGHT;
8002dac2:	ec f8 00 00 	ld.w	r8,r6[0]
8002dac6:	70 09       	ld.w	r9,r8[0x0]
8002dac8:	30 08       	mov	r8,0
8002daca:	f3 68 10 bc 	st.b	r9[4284],r8

//	calibrate_Gyros(&centralData->imu1);
	for (i=400; i>0; i--) {
8002dace:	e0 68 01 90 	mov	r8,400
8002dad2:	ef 48 ff f8 	st.w	r7[-8],r8
8002dad6:	c2 68       	rjmp	8002db22 <initialisation+0xe8>
		imu_get_raw_data(&(centralData->imu1));
8002dad8:	ec f8 00 00 	ld.w	r8,r6[0]
8002dadc:	70 08       	ld.w	r8,r8[0x0]
8002dade:	10 9c       	mov	r12,r8
8002dae0:	f0 16 00 95 	mcall	r6[596]
		imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);	
8002dae4:	ec f8 00 00 	ld.w	r8,r6[0]
8002dae8:	70 08       	ld.w	r8,r8[0x0]
8002daea:	f0 c9 f4 f8 	sub	r9,r8,-2824
8002daee:	ec f8 00 00 	ld.w	r8,r6[0]
8002daf2:	70 08       	ld.w	r8,r8[0x0]
8002daf4:	f0 ca ef 3c 	sub	r10,r8,-4292
8002daf8:	ec f8 00 00 	ld.w	r8,r6[0]
8002dafc:	70 08       	ld.w	r8,r8[0x0]
8002dafe:	f0 cb f2 c4 	sub	r11,r8,-3388
8002db02:	ec f8 00 00 	ld.w	r8,r6[0]
8002db06:	70 08       	ld.w	r8,r8[0x0]
8002db08:	10 9c       	mov	r12,r8
8002db0a:	f0 16 00 96 	mcall	r6[600]
		mavlink_protocol_update();	
8002db0e:	f0 16 00 e1 	mcall	r6[900]
		delay_ms(5);
8002db12:	30 5c       	mov	r12,5
8002db14:	f0 16 01 02 	mcall	r6[1032]
	centralData->imu1.attitude.calibration_level=LEVELING;	
	centralData->mav_state = MAV_STATE_CALIBRATING;
	centralData->mav_mode = MAV_MODE_PREFLIGHT;

//	calibrate_Gyros(&centralData->imu1);
	for (i=400; i>0; i--) {
8002db18:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002db1c:	20 18       	sub	r8,1
8002db1e:	ef 48 ff f8 	st.w	r7[-8],r8
8002db22:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002db26:	58 08       	cp.w	r8,0
8002db28:	e0 8c 00 04 	brvs	8002db30 <initialisation+0xf6>
8002db2c:	fe 99 ff d6 	brgt	8002dad8 <initialisation+0x9e>
	for (i=100; i>0; i--) {
		imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);	
		mavlink_protocol_update();			
		delay_ms(5);
	}*/
	centralData->imu1.attitude.calibration_level=OFF;
8002db30:	ec f8 00 00 	ld.w	r8,r6[0]
8002db34:	70 09       	ld.w	r9,r8[0x0]
8002db36:	30 08       	mov	r8,0
8002db38:	f3 68 00 b8 	st.b	r9[184],r8
	//reset position estimate
	for (i=0; i<3; i++) {
8002db3c:	30 08       	mov	r8,0
8002db3e:	ef 48 ff f8 	st.w	r7[-8],r8
8002db42:	c2 48       	rjmp	8002db8a <initialisation+0x150>
		// clean acceleration estimate without gravity:
		centralData->position_estimator.vel_bf[i]=0.0;
8002db44:	ec f8 00 00 	ld.w	r8,r6[0]
8002db48:	70 08       	ld.w	r8,r8[0x0]
8002db4a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002db4e:	f2 c9 fc a6 	sub	r9,r9,-858
8002db52:	30 0a       	mov	r10,0
8002db54:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		centralData->position_estimator.vel[i]=0.0;
8002db58:	ec f8 00 00 	ld.w	r8,r6[0]
8002db5c:	70 08       	ld.w	r8,r8[0x0]
8002db5e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002db62:	f2 c9 fc a3 	sub	r9,r9,-861
8002db66:	30 0a       	mov	r10,0
8002db68:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		centralData->position_estimator.localPosition.pos[i]=0.0;
8002db6c:	ec f8 00 00 	ld.w	r8,r6[0]
8002db70:	70 08       	ld.w	r8,r8[0x0]
8002db72:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002db76:	f2 c9 fc 99 	sub	r9,r9,-871
8002db7a:	30 0a       	mov	r10,0
8002db7c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		mavlink_protocol_update();			
		delay_ms(5);
	}*/
	centralData->imu1.attitude.calibration_level=OFF;
	//reset position estimate
	for (i=0; i<3; i++) {
8002db80:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002db84:	2f f8       	sub	r8,-1
8002db86:	ef 48 ff f8 	st.w	r7[-8],r8
8002db8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002db8e:	58 28       	cp.w	r8,2
8002db90:	fe 9a ff da 	brle	8002db44 <initialisation+0x10a>
		// clean acceleration estimate without gravity:
		centralData->position_estimator.vel_bf[i]=0.0;
		centralData->position_estimator.vel[i]=0.0;
		centralData->position_estimator.localPosition.pos[i]=0.0;
	}
	centralData->mav_state = MAV_STATE_STANDBY;
8002db94:	ec f8 00 00 	ld.w	r8,r6[0]
8002db98:	70 09       	ld.w	r9,r8[0x0]
8002db9a:	30 38       	mov	r8,3
8002db9c:	f3 68 10 bd 	st.b	r9[4285],r8
	centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
8002dba0:	ec f8 00 00 	ld.w	r8,r6[0]
8002dba4:	70 09       	ld.w	r9,r8[0x0]
8002dba6:	34 08       	mov	r8,64
8002dba8:	f3 68 10 bc 	st.b	r9[4284],r8
	init_nav();
8002dbac:	f0 16 01 bf 	mcall	r6[1788]
	init_waypoint_handler();
8002dbb0:	f0 16 01 5c 	mcall	r6[1392]
	//e_init();
	
	init_neighbors();
8002dbb4:	f0 16 01 8c 	mcall	r6[1584]
	init_orca();
8002dbb8:	f0 16 02 08 	mcall	r6[2080]
	
	LED_On(LED1);
8002dbbc:	30 2c       	mov	r12,2
8002dbbe:	f0 16 01 45 	mcall	r6[1300]
}
8002dbc2:	2f ed       	sub	sp,-8
8002dbc4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002dbc8:	80 02       	ld.sh	r2,r0[0x0]
8002dbca:	d8 c8       	*unknown*

8002dbcc <main>:



void main (void)
{
8002dbcc:	eb cd 40 c0 	pushm	r6-r7,lr
8002dbd0:	1a 97       	mov	r7,sp
8002dbd2:	48 b6       	lddpc	r6,8002dbfc <main+0x30>
8002dbd4:	1e 26       	rsub	r6,pc
	
	initialisation();
8002dbd6:	f0 16 01 da 	mcall	r6[1896]
	
	create_tasks();
8002dbda:	f0 16 02 15 	mcall	r6[2132]
	
	// turn on simulation mode: 1: simulation mode, 0: reality
	centralData->simulation_mode = 1;
8002dbde:	ec f8 00 00 	ld.w	r8,r6[0]
8002dbe2:	70 08       	ld.w	r8,r8[0x0]
8002dbe4:	30 19       	mov	r9,1
8002dbe6:	f1 49 10 c0 	st.w	r8[4288],r9
	// main loop
	
	while (1==1) {
		
		//run_scheduler_update(get_main_taskset(), FIXED_PRIORITY);
		run_scheduler_update(get_main_taskset(), ROUND_ROBIN);
8002dbea:	f0 16 01 03 	mcall	r6[1036]
8002dbee:	18 98       	mov	r8,r12
8002dbf0:	30 0b       	mov	r11,0
8002dbf2:	10 9c       	mov	r12,r8
8002dbf4:	f0 16 00 ec 	mcall	r6[944]
		
		//LED_On(LED1);

		
	}		
8002dbf8:	cf 9b       	rjmp	8002dbea <main+0x1e>
8002dbfa:	00 00       	add	r0,r0
8002dbfc:	80 02       	ld.sh	r2,r0[0x0]
8002dbfe:	da 58       	*unknown*

8002dc00 <cos>:
8002dc00:	d4 21       	pushm	r4-r7,lr
8002dc02:	20 4d       	sub	sp,16
8002dc04:	e0 6e 21 fb 	mov	lr,8699
8002dc08:	ea 1e 3f e9 	orh	lr,0x3fe9
8002dc0c:	14 98       	mov	r8,r10
8002dc0e:	16 99       	mov	r9,r11
8002dc10:	16 95       	mov	r5,r11
8002dc12:	14 96       	mov	r6,r10
8002dc14:	16 97       	mov	r7,r11
8002dc16:	16 94       	mov	r4,r11
8002dc18:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8002dc1c:	1c 3c       	cp.w	r12,lr
8002dc1e:	e0 89 00 05 	brgt	8002dc28 <cos+0x28>
8002dc22:	30 08       	mov	r8,0
8002dc24:	30 09       	mov	r9,0
8002dc26:	c1 a8       	rjmp	8002dc5a <cos+0x5a>
8002dc28:	e0 65 ff ff 	mov	r5,65535
8002dc2c:	ea 15 7f ef 	orh	r5,0x7fef
8002dc30:	0a 3c       	cp.w	r12,r5
8002dc32:	e0 8a 00 05 	brle	8002dc3c <cos+0x3c>
8002dc36:	e0 a0 17 bd 	rcall	80030bb0 <__avr32_f64_sub>
8002dc3a:	c2 68       	rjmp	8002dc86 <cos+0x86>
8002dc3c:	1a 9c       	mov	r12,sp
8002dc3e:	e0 a0 0b 47 	rcall	8002f2cc <__ieee754_rem_pio2>
8002dc42:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
8002dc46:	58 1c       	cp.w	r12,1
8002dc48:	c0 c0       	breq	8002dc60 <cos+0x60>
8002dc4a:	58 2c       	cp.w	r12,2
8002dc4c:	c1 10       	breq	8002dc6e <cos+0x6e>
8002dc4e:	fa e8 00 08 	ld.d	r8,sp[8]
8002dc52:	fa ea 00 00 	ld.d	r10,sp[0]
8002dc56:	58 0c       	cp.w	r12,0
8002dc58:	c1 41       	brne	8002dc80 <cos+0x80>
8002dc5a:	e0 a0 0e 37 	rcall	8002f8c8 <__kernel_cos>
8002dc5e:	c1 48       	rjmp	8002dc86 <cos+0x86>
8002dc60:	fa e8 00 08 	ld.d	r8,sp[8]
8002dc64:	fa ea 00 00 	ld.d	r10,sp[0]
8002dc68:	e0 a0 12 94 	rcall	80030190 <__kernel_sin>
8002dc6c:	c0 78       	rjmp	8002dc7a <cos+0x7a>
8002dc6e:	fa e8 00 08 	ld.d	r8,sp[8]
8002dc72:	fa ea 00 00 	ld.d	r10,sp[0]
8002dc76:	e0 a0 0e 29 	rcall	8002f8c8 <__kernel_cos>
8002dc7a:	ee 1b 80 00 	eorh	r11,0x8000
8002dc7e:	c0 48       	rjmp	8002dc86 <cos+0x86>
8002dc80:	30 1c       	mov	r12,1
8002dc82:	e0 a0 12 87 	rcall	80030190 <__kernel_sin>
8002dc86:	2f cd       	sub	sp,-16
8002dc88:	d8 22       	popm	r4-r7,pc
8002dc8a:	d7 03       	nop

8002dc8c <sin>:
8002dc8c:	d4 21       	pushm	r4-r7,lr
8002dc8e:	20 4d       	sub	sp,16
8002dc90:	e0 6e 21 fb 	mov	lr,8699
8002dc94:	ea 1e 3f e9 	orh	lr,0x3fe9
8002dc98:	14 98       	mov	r8,r10
8002dc9a:	16 99       	mov	r9,r11
8002dc9c:	16 95       	mov	r5,r11
8002dc9e:	14 96       	mov	r6,r10
8002dca0:	16 97       	mov	r7,r11
8002dca2:	16 94       	mov	r4,r11
8002dca4:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8002dca8:	1c 3c       	cp.w	r12,lr
8002dcaa:	e0 89 00 06 	brgt	8002dcb6 <sin+0x2a>
8002dcae:	30 0c       	mov	r12,0
8002dcb0:	30 08       	mov	r8,0
8002dcb2:	30 09       	mov	r9,0
8002dcb4:	c1 b8       	rjmp	8002dcea <sin+0x5e>
8002dcb6:	e0 65 ff ff 	mov	r5,65535
8002dcba:	ea 15 7f ef 	orh	r5,0x7fef
8002dcbe:	0a 3c       	cp.w	r12,r5
8002dcc0:	e0 8a 00 05 	brle	8002dcca <sin+0x3e>
8002dcc4:	e0 a0 17 76 	rcall	80030bb0 <__avr32_f64_sub>
8002dcc8:	c2 78       	rjmp	8002dd16 <sin+0x8a>
8002dcca:	1a 9c       	mov	r12,sp
8002dccc:	e0 a0 0b 00 	rcall	8002f2cc <__ieee754_rem_pio2>
8002dcd0:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
8002dcd4:	58 1c       	cp.w	r12,1
8002dcd6:	c0 d0       	breq	8002dcf0 <sin+0x64>
8002dcd8:	58 2c       	cp.w	r12,2
8002dcda:	c1 20       	breq	8002dcfe <sin+0x72>
8002dcdc:	fa e8 00 08 	ld.d	r8,sp[8]
8002dce0:	fa ea 00 00 	ld.d	r10,sp[0]
8002dce4:	58 0c       	cp.w	r12,0
8002dce6:	c1 41       	brne	8002dd0e <sin+0x82>
8002dce8:	30 1c       	mov	r12,1
8002dcea:	e0 a0 12 53 	rcall	80030190 <__kernel_sin>
8002dcee:	c1 48       	rjmp	8002dd16 <sin+0x8a>
8002dcf0:	fa e8 00 08 	ld.d	r8,sp[8]
8002dcf4:	fa ea 00 00 	ld.d	r10,sp[0]
8002dcf8:	e0 a0 0d e8 	rcall	8002f8c8 <__kernel_cos>
8002dcfc:	c0 d8       	rjmp	8002dd16 <sin+0x8a>
8002dcfe:	30 1c       	mov	r12,1
8002dd00:	fa e8 00 08 	ld.d	r8,sp[8]
8002dd04:	fa ea 00 00 	ld.d	r10,sp[0]
8002dd08:	e0 a0 12 44 	rcall	80030190 <__kernel_sin>
8002dd0c:	c0 38       	rjmp	8002dd12 <sin+0x86>
8002dd0e:	e0 a0 0d dd 	rcall	8002f8c8 <__kernel_cos>
8002dd12:	ee 1b 80 00 	eorh	r11,0x8000
8002dd16:	2f cd       	sub	sp,-16
8002dd18:	d8 22       	popm	r4-r7,pc
8002dd1a:	d7 03       	nop

8002dd1c <asin>:
8002dd1c:	d4 31       	pushm	r0-r7,lr
8002dd1e:	20 9d       	sub	sp,36
8002dd20:	4a 17       	lddpc	r7,8002dda4 <asin+0x88>
8002dd22:	14 94       	mov	r4,r10
8002dd24:	16 95       	mov	r5,r11
8002dd26:	cf 3d       	rcall	8002e10c <__ieee754_asin>
8002dd28:	6e 08       	ld.w	r8,r7[0x0]
8002dd2a:	14 92       	mov	r2,r10
8002dd2c:	16 93       	mov	r3,r11
8002dd2e:	5b f8       	cp.w	r8,-1
8002dd30:	c3 50       	breq	8002dd9a <asin+0x7e>
8002dd32:	08 9a       	mov	r10,r4
8002dd34:	0a 9b       	mov	r11,r5
8002dd36:	e0 a0 15 37 	rcall	800307a4 <__isnand>
8002dd3a:	18 96       	mov	r6,r12
8002dd3c:	c2 f1       	brne	8002dd9a <asin+0x7e>
8002dd3e:	08 9a       	mov	r10,r4
8002dd40:	0a 9b       	mov	r11,r5
8002dd42:	e0 a0 14 95 	rcall	8003066c <fabs>
8002dd46:	14 98       	mov	r8,r10
8002dd48:	16 99       	mov	r9,r11
8002dd4a:	30 0a       	mov	r10,0
8002dd4c:	fc 1b 3f f0 	movh	r11,0x3ff0
8002dd50:	e0 a0 19 56 	rcall	80030ffc <__avr32_f64_cmp_lt>
8002dd54:	c2 30       	breq	8002dd9a <asin+0x7e>
8002dd56:	30 18       	mov	r8,1
8002dd58:	50 08       	stdsp	sp[0x0],r8
8002dd5a:	49 48       	lddpc	r8,8002dda8 <asin+0x8c>
8002dd5c:	50 86       	stdsp	sp[0x20],r6
8002dd5e:	50 18       	stdsp	sp[0x4],r8
8002dd60:	fa e5 00 08 	st.d	sp[8],r4
8002dd64:	fa e5 00 10 	st.d	sp[16],r4
8002dd68:	49 1c       	lddpc	r12,8002ddac <asin+0x90>
8002dd6a:	e0 a0 15 2c 	rcall	800307c2 <nan>
8002dd6e:	fa eb 00 18 	st.d	sp[24],r10
8002dd72:	6e 08       	ld.w	r8,r7[0x0]
8002dd74:	58 28       	cp.w	r8,2
8002dd76:	c0 50       	breq	8002dd80 <asin+0x64>
8002dd78:	1a 9c       	mov	r12,sp
8002dd7a:	e0 a0 15 23 	rcall	800307c0 <matherr>
8002dd7e:	c0 51       	brne	8002dd88 <asin+0x6c>
8002dd80:	e0 a0 1d 56 	rcall	8003182c <__errno>
8002dd84:	32 18       	mov	r8,33
8002dd86:	99 08       	st.w	r12[0x0],r8
8002dd88:	40 88       	lddsp	r8,sp[0x20]
8002dd8a:	58 08       	cp.w	r8,0
8002dd8c:	c0 50       	breq	8002dd96 <asin+0x7a>
8002dd8e:	e0 a0 1d 4f 	rcall	8003182c <__errno>
8002dd92:	40 88       	lddsp	r8,sp[0x20]
8002dd94:	99 08       	st.w	r12[0x0],r8
8002dd96:	fa e2 00 18 	ld.d	r2,sp[24]
8002dd9a:	04 9a       	mov	r10,r2
8002dd9c:	06 9b       	mov	r11,r3
8002dd9e:	2f 7d       	sub	sp,-36
8002dda0:	d8 32       	popm	r0-r7,pc
8002dda2:	d7 03       	nop
8002dda4:	00 00       	add	r0,r0
8002dda6:	23 80       	sub	r0,56
8002dda8:	80 03       	ld.sh	r3,r0[0x0]
8002ddaa:	1f 74       	ld.ub	r4,--pc
8002ddac:	80 03       	ld.sh	r3,r0[0x0]
8002ddae:	1f 78       	ld.ub	r8,--pc

8002ddb0 <atan2>:
8002ddb0:	d4 01       	pushm	lr
8002ddb2:	e0 a0 04 25 	rcall	8002e5fc <__ieee754_atan2>
8002ddb6:	d8 02       	popm	pc

8002ddb8 <pow>:
8002ddb8:	d4 31       	pushm	r0-r7,lr
8002ddba:	20 cd       	sub	sp,48
8002ddbc:	10 94       	mov	r4,r8
8002ddbe:	14 92       	mov	r2,r10
8002ddc0:	16 93       	mov	r3,r11
8002ddc2:	12 95       	mov	r5,r9
8002ddc4:	e0 a0 05 32 	rcall	8002e828 <__ieee754_pow>
8002ddc8:	4b f6       	lddpc	r6,8002dec4 <pow+0x10c>
8002ddca:	14 90       	mov	r0,r10
8002ddcc:	16 91       	mov	r1,r11
8002ddce:	6c 08       	ld.w	r8,r6[0x0]
8002ddd0:	5b f8       	cp.w	r8,-1
8002ddd2:	e0 80 01 46 	breq	8002e05e <pow+0x2a6>
8002ddd6:	08 9a       	mov	r10,r4
8002ddd8:	0a 9b       	mov	r11,r5
8002ddda:	e0 a0 14 e5 	rcall	800307a4 <__isnand>
8002ddde:	50 2c       	stdsp	sp[0x8],r12
8002dde0:	e0 81 01 3f 	brne	8002e05e <pow+0x2a6>
8002dde4:	04 9a       	mov	r10,r2
8002dde6:	06 9b       	mov	r11,r3
8002dde8:	e0 a0 14 de 	rcall	800307a4 <__isnand>
8002ddec:	18 97       	mov	r7,r12
8002ddee:	c2 40       	breq	8002de36 <pow+0x7e>
8002ddf0:	30 08       	mov	r8,0
8002ddf2:	30 09       	mov	r9,0
8002ddf4:	08 9a       	mov	r10,r4
8002ddf6:	0a 9b       	mov	r11,r5
8002ddf8:	e0 a0 18 bb 	rcall	80030f6e <__avr32_f64_cmp_eq>
8002ddfc:	e0 80 01 31 	breq	8002e05e <pow+0x2a6>
8002de00:	30 18       	mov	r8,1
8002de02:	50 38       	stdsp	sp[0xc],r8
8002de04:	4b 18       	lddpc	r8,8002dec8 <pow+0x110>
8002de06:	40 2c       	lddsp	r12,sp[0x8]
8002de08:	50 48       	stdsp	sp[0x10],r8
8002de0a:	fc 19 3f f0 	movh	r9,0x3ff0
8002de0e:	30 08       	mov	r8,0
8002de10:	fa e3 00 14 	st.d	sp[20],r2
8002de14:	fa e5 00 1c 	st.d	sp[28],r4
8002de18:	50 bc       	stdsp	sp[0x2c],r12
8002de1a:	fa e9 00 24 	st.d	sp[36],r8
8002de1e:	6c 0a       	ld.w	r10,r6[0x0]
8002de20:	5b fa       	cp.w	r10,-1
8002de22:	5f 0b       	sreq	r11
8002de24:	58 2a       	cp.w	r10,2
8002de26:	5f 0a       	sreq	r10
8002de28:	f5 eb 10 0b 	or	r11,r10,r11
8002de2c:	f8 0b 18 00 	cp.b	r11,r12
8002de30:	e0 81 01 0e 	brne	8002e04c <pow+0x294>
8002de34:	c8 08       	rjmp	8002df34 <pow+0x17c>
8002de36:	30 08       	mov	r8,0
8002de38:	30 09       	mov	r9,0
8002de3a:	04 9a       	mov	r10,r2
8002de3c:	06 9b       	mov	r11,r3
8002de3e:	e0 a0 18 98 	rcall	80030f6e <__avr32_f64_cmp_eq>
8002de42:	c4 50       	breq	8002decc <pow+0x114>
8002de44:	30 08       	mov	r8,0
8002de46:	30 09       	mov	r9,0
8002de48:	08 9a       	mov	r10,r4
8002de4a:	0a 9b       	mov	r11,r5
8002de4c:	e0 a0 18 91 	rcall	80030f6e <__avr32_f64_cmp_eq>
8002de50:	c1 70       	breq	8002de7e <pow+0xc6>
8002de52:	30 18       	mov	r8,1
8002de54:	50 38       	stdsp	sp[0xc],r8
8002de56:	49 d8       	lddpc	r8,8002dec8 <pow+0x110>
8002de58:	30 09       	mov	r9,0
8002de5a:	50 48       	stdsp	sp[0x10],r8
8002de5c:	50 b7       	stdsp	sp[0x2c],r7
8002de5e:	30 08       	mov	r8,0
8002de60:	fa e3 00 14 	st.d	sp[20],r2
8002de64:	fa e9 00 24 	st.d	sp[36],r8
8002de68:	fa e5 00 1c 	st.d	sp[28],r4
8002de6c:	6c 08       	ld.w	r8,r6[0x0]
8002de6e:	58 08       	cp.w	r8,0
8002de70:	c6 20       	breq	8002df34 <pow+0x17c>
8002de72:	30 08       	mov	r8,0
8002de74:	fc 19 3f f0 	movh	r9,0x3ff0
8002de78:	fa e9 00 24 	st.d	sp[36],r8
8002de7c:	ce 88       	rjmp	8002e04c <pow+0x294>
8002de7e:	08 9a       	mov	r10,r4
8002de80:	0a 9b       	mov	r11,r5
8002de82:	e0 a0 13 f9 	rcall	80030674 <finite>
8002de86:	e0 80 00 ec 	breq	8002e05e <pow+0x2a6>
8002de8a:	30 08       	mov	r8,0
8002de8c:	30 09       	mov	r9,0
8002de8e:	08 9a       	mov	r10,r4
8002de90:	0a 9b       	mov	r11,r5
8002de92:	e0 a0 18 b5 	rcall	80030ffc <__avr32_f64_cmp_lt>
8002de96:	e0 80 00 e4 	breq	8002e05e <pow+0x2a6>
8002de9a:	30 18       	mov	r8,1
8002de9c:	50 b7       	stdsp	sp[0x2c],r7
8002de9e:	50 38       	stdsp	sp[0xc],r8
8002dea0:	fa e3 00 14 	st.d	sp[20],r2
8002dea4:	48 98       	lddpc	r8,8002dec8 <pow+0x110>
8002dea6:	fa e5 00 1c 	st.d	sp[28],r4
8002deaa:	50 48       	stdsp	sp[0x10],r8
8002deac:	6c 08       	ld.w	r8,r6[0x0]
8002deae:	58 08       	cp.w	r8,0
8002deb0:	c3 30       	breq	8002df16 <pow+0x15e>
8002deb2:	30 0a       	mov	r10,0
8002deb4:	f0 6b 00 00 	mov	r11,-1048576
8002deb8:	fa eb 00 24 	st.d	sp[36],r10
8002debc:	58 28       	cp.w	r8,2
8002debe:	c4 10       	breq	8002df40 <pow+0x188>
8002dec0:	c3 a8       	rjmp	8002df34 <pow+0x17c>
8002dec2:	d7 03       	nop
8002dec4:	00 00       	add	r0,r0
8002dec6:	23 80       	sub	r0,56
8002dec8:	80 03       	ld.sh	r3,r0[0x0]
8002deca:	1f 7c       	ld.ub	r12,--pc
8002decc:	00 9a       	mov	r10,r0
8002dece:	02 9b       	mov	r11,r1
8002ded0:	e0 a0 13 d2 	rcall	80030674 <finite>
8002ded4:	18 97       	mov	r7,r12
8002ded6:	e0 81 00 8f 	brne	8002dff4 <pow+0x23c>
8002deda:	04 9a       	mov	r10,r2
8002dedc:	06 9b       	mov	r11,r3
8002dede:	e0 a0 13 cb 	rcall	80030674 <finite>
8002dee2:	e0 80 00 89 	breq	8002dff4 <pow+0x23c>
8002dee6:	08 9a       	mov	r10,r4
8002dee8:	0a 9b       	mov	r11,r5
8002deea:	e0 a0 13 c5 	rcall	80030674 <finite>
8002deee:	e0 80 00 83 	breq	8002dff4 <pow+0x23c>
8002def2:	00 9a       	mov	r10,r0
8002def4:	02 9b       	mov	r11,r1
8002def6:	e0 a0 14 57 	rcall	800307a4 <__isnand>
8002defa:	4b e8       	lddpc	r8,8002dff0 <pow+0x238>
8002defc:	58 0c       	cp.w	r12,0
8002defe:	c2 50       	breq	8002df48 <pow+0x190>
8002df00:	50 48       	stdsp	sp[0x10],r8
8002df02:	50 b7       	stdsp	sp[0x2c],r7
8002df04:	30 18       	mov	r8,1
8002df06:	fa e3 00 14 	st.d	sp[20],r2
8002df0a:	fa e5 00 1c 	st.d	sp[28],r4
8002df0e:	50 38       	stdsp	sp[0xc],r8
8002df10:	6c 07       	ld.w	r7,r6[0x0]
8002df12:	58 07       	cp.w	r7,0
8002df14:	c0 61       	brne	8002df20 <pow+0x168>
8002df16:	30 08       	mov	r8,0
8002df18:	30 09       	mov	r9,0
8002df1a:	fa e9 00 24 	st.d	sp[36],r8
8002df1e:	c0 b8       	rjmp	8002df34 <pow+0x17c>
8002df20:	30 08       	mov	r8,0
8002df22:	30 09       	mov	r9,0
8002df24:	10 9a       	mov	r10,r8
8002df26:	12 9b       	mov	r11,r9
8002df28:	e0 a0 18 9e 	rcall	80031064 <__avr32_f64_div>
8002df2c:	fa eb 00 24 	st.d	sp[36],r10
8002df30:	58 27       	cp.w	r7,2
8002df32:	c0 70       	breq	8002df40 <pow+0x188>
8002df34:	fa cc ff f4 	sub	r12,sp,-12
8002df38:	e0 a0 14 44 	rcall	800307c0 <matherr>
8002df3c:	e0 81 00 88 	brne	8002e04c <pow+0x294>
8002df40:	e0 a0 1c 76 	rcall	8003182c <__errno>
8002df44:	32 18       	mov	r8,33
8002df46:	c8 28       	rjmp	8002e04a <pow+0x292>
8002df48:	50 48       	stdsp	sp[0x10],r8
8002df4a:	50 bc       	stdsp	sp[0x2c],r12
8002df4c:	30 38       	mov	r8,3
8002df4e:	fa e3 00 14 	st.d	sp[20],r2
8002df52:	50 38       	stdsp	sp[0xc],r8
8002df54:	fa e5 00 1c 	st.d	sp[28],r4
8002df58:	6c 08       	ld.w	r8,r6[0x0]
8002df5a:	58 08       	cp.w	r8,0
8002df5c:	c2 81       	brne	8002dfac <pow+0x1f4>
8002df5e:	fc 18 e0 00 	movh	r8,0xe000
8002df62:	e0 69 ff ff 	mov	r9,65535
8002df66:	ea 19 47 ef 	orh	r9,0x47ef
8002df6a:	04 9a       	mov	r10,r2
8002df6c:	fa e9 00 24 	st.d	sp[36],r8
8002df70:	06 9b       	mov	r11,r3
8002df72:	30 08       	mov	r8,0
8002df74:	30 09       	mov	r9,0
8002df76:	e0 a0 18 43 	rcall	80030ffc <__avr32_f64_cmp_lt>
8002df7a:	c5 c0       	breq	8002e032 <pow+0x27a>
8002df7c:	fc 19 3f e0 	movh	r9,0x3fe0
8002df80:	30 08       	mov	r8,0
8002df82:	08 9a       	mov	r10,r4
8002df84:	0a 9b       	mov	r11,r5
8002df86:	e0 a0 15 29 	rcall	800309d8 <__avr32_f64_mul>
8002df8a:	16 99       	mov	r9,r11
8002df8c:	50 0a       	stdsp	sp[0x0],r10
8002df8e:	50 19       	stdsp	sp[0x4],r9
8002df90:	e0 a0 14 1e 	rcall	800307cc <rint>
8002df94:	40 19       	lddsp	r9,sp[0x4]
8002df96:	40 08       	lddsp	r8,sp[0x0]
8002df98:	e0 a0 17 eb 	rcall	80030f6e <__avr32_f64_cmp_eq>
8002df9c:	c4 b1       	brne	8002e032 <pow+0x27a>
8002df9e:	fc 18 e0 00 	movh	r8,0xe000
8002dfa2:	e0 69 ff ff 	mov	r9,65535
8002dfa6:	ea 19 c7 ef 	orh	r9,0xc7ef
8002dfaa:	c4 28       	rjmp	8002e02e <pow+0x276>
8002dfac:	30 08       	mov	r8,0
8002dfae:	fc 19 7f f0 	movh	r9,0x7ff0
8002dfb2:	04 9a       	mov	r10,r2
8002dfb4:	fa e9 00 24 	st.d	sp[36],r8
8002dfb8:	06 9b       	mov	r11,r3
8002dfba:	30 08       	mov	r8,0
8002dfbc:	30 09       	mov	r9,0
8002dfbe:	e0 a0 18 1f 	rcall	80030ffc <__avr32_f64_cmp_lt>
8002dfc2:	c3 80       	breq	8002e032 <pow+0x27a>
8002dfc4:	fc 19 3f e0 	movh	r9,0x3fe0
8002dfc8:	30 08       	mov	r8,0
8002dfca:	08 9a       	mov	r10,r4
8002dfcc:	0a 9b       	mov	r11,r5
8002dfce:	e0 a0 15 05 	rcall	800309d8 <__avr32_f64_mul>
8002dfd2:	16 99       	mov	r9,r11
8002dfd4:	50 0a       	stdsp	sp[0x0],r10
8002dfd6:	50 19       	stdsp	sp[0x4],r9
8002dfd8:	e0 a0 13 fa 	rcall	800307cc <rint>
8002dfdc:	40 19       	lddsp	r9,sp[0x4]
8002dfde:	40 08       	lddsp	r8,sp[0x0]
8002dfe0:	e0 a0 17 c7 	rcall	80030f6e <__avr32_f64_cmp_eq>
8002dfe4:	c2 71       	brne	8002e032 <pow+0x27a>
8002dfe6:	30 08       	mov	r8,0
8002dfe8:	f0 69 00 00 	mov	r9,-1048576
8002dfec:	c2 18       	rjmp	8002e02e <pow+0x276>
8002dfee:	d7 03       	nop
8002dff0:	80 03       	ld.sh	r3,r0[0x0]
8002dff2:	1f 7c       	ld.ub	r12,--pc
8002dff4:	30 08       	mov	r8,0
8002dff6:	30 09       	mov	r9,0
8002dff8:	00 9a       	mov	r10,r0
8002dffa:	02 9b       	mov	r11,r1
8002dffc:	e0 a0 17 b9 	rcall	80030f6e <__avr32_f64_cmp_eq>
8002e000:	c2 f0       	breq	8002e05e <pow+0x2a6>
8002e002:	04 9a       	mov	r10,r2
8002e004:	06 9b       	mov	r11,r3
8002e006:	e0 a0 13 37 	rcall	80030674 <finite>
8002e00a:	c2 a0       	breq	8002e05e <pow+0x2a6>
8002e00c:	08 9a       	mov	r10,r4
8002e00e:	0a 9b       	mov	r11,r5
8002e010:	e0 a0 13 32 	rcall	80030674 <finite>
8002e014:	c2 50       	breq	8002e05e <pow+0x2a6>
8002e016:	30 48       	mov	r8,4
8002e018:	50 38       	stdsp	sp[0xc],r8
8002e01a:	49 48       	lddpc	r8,8002e068 <pow+0x2b0>
8002e01c:	50 48       	stdsp	sp[0x10],r8
8002e01e:	30 08       	mov	r8,0
8002e020:	fa e3 00 14 	st.d	sp[20],r2
8002e024:	50 b8       	stdsp	sp[0x2c],r8
8002e026:	fa e5 00 1c 	st.d	sp[28],r4
8002e02a:	30 08       	mov	r8,0
8002e02c:	30 09       	mov	r9,0
8002e02e:	fa e9 00 24 	st.d	sp[36],r8
8002e032:	48 f8       	lddpc	r8,8002e06c <pow+0x2b4>
8002e034:	70 08       	ld.w	r8,r8[0x0]
8002e036:	58 28       	cp.w	r8,2
8002e038:	c0 60       	breq	8002e044 <pow+0x28c>
8002e03a:	fa cc ff f4 	sub	r12,sp,-12
8002e03e:	e0 a0 13 c1 	rcall	800307c0 <matherr>
8002e042:	c0 51       	brne	8002e04c <pow+0x294>
8002e044:	e0 a0 1b f4 	rcall	8003182c <__errno>
8002e048:	32 28       	mov	r8,34
8002e04a:	99 08       	st.w	r12[0x0],r8
8002e04c:	40 b8       	lddsp	r8,sp[0x2c]
8002e04e:	58 08       	cp.w	r8,0
8002e050:	c0 50       	breq	8002e05a <pow+0x2a2>
8002e052:	e0 a0 1b ed 	rcall	8003182c <__errno>
8002e056:	40 b8       	lddsp	r8,sp[0x2c]
8002e058:	99 08       	st.w	r12[0x0],r8
8002e05a:	fa e0 00 24 	ld.d	r0,sp[36]
8002e05e:	00 9a       	mov	r10,r0
8002e060:	02 9b       	mov	r11,r1
8002e062:	2f 4d       	sub	sp,-48
8002e064:	d8 32       	popm	r0-r7,pc
8002e066:	d7 03       	nop
8002e068:	80 03       	ld.sh	r3,r0[0x0]
8002e06a:	1f 7c       	ld.ub	r12,--pc
8002e06c:	00 00       	add	r0,r0
8002e06e:	23 80       	sub	r0,56

8002e070 <sqrt>:
8002e070:	d4 31       	pushm	r0-r7,lr
8002e072:	20 9d       	sub	sp,36
8002e074:	4a 47       	lddpc	r7,8002e104 <sqrt+0x94>
8002e076:	14 94       	mov	r4,r10
8002e078:	16 95       	mov	r5,r11
8002e07a:	e0 a0 0b 61 	rcall	8002f73c <__ieee754_sqrt>
8002e07e:	6e 08       	ld.w	r8,r7[0x0]
8002e080:	14 92       	mov	r2,r10
8002e082:	16 93       	mov	r3,r11
8002e084:	5b f8       	cp.w	r8,-1
8002e086:	c3 a0       	breq	8002e0fa <sqrt+0x8a>
8002e088:	08 9a       	mov	r10,r4
8002e08a:	0a 9b       	mov	r11,r5
8002e08c:	e0 a0 13 8c 	rcall	800307a4 <__isnand>
8002e090:	18 96       	mov	r6,r12
8002e092:	c3 41       	brne	8002e0fa <sqrt+0x8a>
8002e094:	30 08       	mov	r8,0
8002e096:	30 09       	mov	r9,0
8002e098:	08 9a       	mov	r10,r4
8002e09a:	0a 9b       	mov	r11,r5
8002e09c:	e0 a0 17 b0 	rcall	80030ffc <__avr32_f64_cmp_lt>
8002e0a0:	c2 d0       	breq	8002e0fa <sqrt+0x8a>
8002e0a2:	30 18       	mov	r8,1
8002e0a4:	50 86       	stdsp	sp[0x20],r6
8002e0a6:	50 08       	stdsp	sp[0x0],r8
8002e0a8:	fa e5 00 08 	st.d	sp[8],r4
8002e0ac:	49 78       	lddpc	r8,8002e108 <sqrt+0x98>
8002e0ae:	fa e5 00 10 	st.d	sp[16],r4
8002e0b2:	50 18       	stdsp	sp[0x4],r8
8002e0b4:	6e 07       	ld.w	r7,r7[0x0]
8002e0b6:	58 07       	cp.w	r7,0
8002e0b8:	c0 61       	brne	8002e0c4 <sqrt+0x54>
8002e0ba:	30 08       	mov	r8,0
8002e0bc:	30 09       	mov	r9,0
8002e0be:	fa e9 00 18 	st.d	sp[24],r8
8002e0c2:	c0 b8       	rjmp	8002e0d8 <sqrt+0x68>
8002e0c4:	30 08       	mov	r8,0
8002e0c6:	30 09       	mov	r9,0
8002e0c8:	10 9a       	mov	r10,r8
8002e0ca:	12 9b       	mov	r11,r9
8002e0cc:	e0 a0 17 cc 	rcall	80031064 <__avr32_f64_div>
8002e0d0:	fa eb 00 18 	st.d	sp[24],r10
8002e0d4:	58 27       	cp.w	r7,2
8002e0d6:	c0 50       	breq	8002e0e0 <sqrt+0x70>
8002e0d8:	1a 9c       	mov	r12,sp
8002e0da:	e0 a0 13 73 	rcall	800307c0 <matherr>
8002e0de:	c0 51       	brne	8002e0e8 <sqrt+0x78>
8002e0e0:	e0 a0 1b a6 	rcall	8003182c <__errno>
8002e0e4:	32 18       	mov	r8,33
8002e0e6:	99 08       	st.w	r12[0x0],r8
8002e0e8:	40 88       	lddsp	r8,sp[0x20]
8002e0ea:	58 08       	cp.w	r8,0
8002e0ec:	c0 50       	breq	8002e0f6 <sqrt+0x86>
8002e0ee:	e0 a0 1b 9f 	rcall	8003182c <__errno>
8002e0f2:	40 88       	lddsp	r8,sp[0x20]
8002e0f4:	99 08       	st.w	r12[0x0],r8
8002e0f6:	fa e2 00 18 	ld.d	r2,sp[24]
8002e0fa:	04 9a       	mov	r10,r2
8002e0fc:	06 9b       	mov	r11,r3
8002e0fe:	2f 7d       	sub	sp,-36
8002e100:	d8 32       	popm	r0-r7,pc
8002e102:	d7 03       	nop
8002e104:	00 00       	add	r0,r0
8002e106:	23 80       	sub	r0,56
8002e108:	80 03       	ld.sh	r3,r0[0x0]
8002e10a:	1f 80       	ld.ub	r0,pc[0x0]

8002e10c <__ieee754_asin>:
8002e10c:	d4 31       	pushm	r0-r7,lr
8002e10e:	20 5d       	sub	sp,20
8002e110:	50 0b       	stdsp	sp[0x0],r11
8002e112:	16 96       	mov	r6,r11
8002e114:	14 97       	mov	r7,r10
8002e116:	eb db c0 1f 	bfextu	r5,r11,0x0,0x1f
8002e11a:	e0 68 ff ff 	mov	r8,65535
8002e11e:	ea 18 3f ef 	orh	r8,0x3fef
8002e122:	10 35       	cp.w	r5,r8
8002e124:	e0 8a 00 32 	brle	8002e188 <__ieee754_asin+0x7c>
8002e128:	fc 1a c0 10 	movh	r10,0xc010
8002e12c:	14 05       	add	r5,r10
8002e12e:	0e 45       	or	r5,r7
8002e130:	c1 f1       	brne	8002e16e <__ieee754_asin+0x62>
8002e132:	e0 68 2d 18 	mov	r8,11544
8002e136:	ea 18 54 44 	orh	r8,0x5444
8002e13a:	e0 69 21 fb 	mov	r9,8699
8002e13e:	ea 19 3f f9 	orh	r9,0x3ff9
8002e142:	0e 9a       	mov	r10,r7
8002e144:	e0 a0 14 4a 	rcall	800309d8 <__avr32_f64_mul>
8002e148:	e0 68 5c 07 	mov	r8,23559
8002e14c:	ea 18 33 14 	orh	r8,0x3314
8002e150:	14 94       	mov	r4,r10
8002e152:	16 95       	mov	r5,r11
8002e154:	e0 69 a6 26 	mov	r9,42534
8002e158:	ea 19 3c 91 	orh	r9,0x3c91
8002e15c:	0c 9b       	mov	r11,r6
8002e15e:	0e 9a       	mov	r10,r7
8002e160:	e0 a0 14 3c 	rcall	800309d8 <__avr32_f64_mul>
8002e164:	14 98       	mov	r8,r10
8002e166:	16 99       	mov	r9,r11
8002e168:	08 9a       	mov	r10,r4
8002e16a:	0a 9b       	mov	r11,r5
8002e16c:	ce 48       	rjmp	8002e334 <__ieee754_asin+0x228>
8002e16e:	0c 99       	mov	r9,r6
8002e170:	0e 98       	mov	r8,r7
8002e172:	0e 9a       	mov	r10,r7
8002e174:	e0 a0 15 1e 	rcall	80030bb0 <__avr32_f64_sub>
8002e178:	14 98       	mov	r8,r10
8002e17a:	16 99       	mov	r9,r11
8002e17c:	e0 a0 17 74 	rcall	80031064 <__avr32_f64_div>
8002e180:	16 96       	mov	r6,r11
8002e182:	14 97       	mov	r7,r10
8002e184:	e0 8f 02 37 	bral	8002e5f2 <__ieee754_asin+0x4e6>
8002e188:	e0 68 ff ff 	mov	r8,65535
8002e18c:	ea 18 3f df 	orh	r8,0x3fdf
8002e190:	10 35       	cp.w	r5,r8
8002e192:	e0 89 00 d4 	brgt	8002e33a <__ieee754_asin+0x22e>
8002e196:	e0 68 ff ff 	mov	r8,65535
8002e19a:	ea 18 3e 3f 	orh	r8,0x3e3f
8002e19e:	10 35       	cp.w	r5,r8
8002e1a0:	e0 89 00 17 	brgt	8002e1ce <__ieee754_asin+0xc2>
8002e1a4:	e0 68 75 9c 	mov	r8,30108
8002e1a8:	ea 18 88 00 	orh	r8,0x8800
8002e1ac:	e0 69 e4 3c 	mov	r9,58428
8002e1b0:	ea 19 7e 37 	orh	r9,0x7e37
8002e1b4:	e0 a0 15 cc 	rcall	80030d4c <__avr32_f64_add>
8002e1b8:	14 98       	mov	r8,r10
8002e1ba:	16 99       	mov	r9,r11
8002e1bc:	30 0a       	mov	r10,0
8002e1be:	fc 1b 3f f0 	movh	r11,0x3ff0
8002e1c2:	e0 a0 17 1d 	rcall	80030ffc <__avr32_f64_cmp_lt>
8002e1c6:	e0 80 00 ba 	breq	8002e33a <__ieee754_asin+0x22e>
8002e1ca:	e0 8f 02 14 	bral	8002e5f2 <__ieee754_asin+0x4e6>
8002e1ce:	16 99       	mov	r9,r11
8002e1d0:	14 98       	mov	r8,r10
8002e1d2:	e0 a0 14 03 	rcall	800309d8 <__avr32_f64_mul>
8002e1d6:	e0 68 f7 09 	mov	r8,63241
8002e1da:	ea 18 0d fd 	orh	r8,0xdfd
8002e1de:	14 94       	mov	r4,r10
8002e1e0:	16 95       	mov	r5,r11
8002e1e2:	e0 69 3d e1 	mov	r9,15841
8002e1e6:	ea 19 3f 02 	orh	r9,0x3f02
8002e1ea:	e0 a0 13 f7 	rcall	800309d8 <__avr32_f64_mul>
8002e1ee:	e0 68 b2 88 	mov	r8,45704
8002e1f2:	ea 18 75 01 	orh	r8,0x7501
8002e1f6:	e0 69 ef e0 	mov	r9,61408
8002e1fa:	ea 19 3f 49 	orh	r9,0x3f49
8002e1fe:	e0 a0 15 a7 	rcall	80030d4c <__avr32_f64_add>
8002e202:	14 98       	mov	r8,r10
8002e204:	16 99       	mov	r9,r11
8002e206:	08 9a       	mov	r10,r4
8002e208:	0a 9b       	mov	r11,r5
8002e20a:	e0 a0 13 e7 	rcall	800309d8 <__avr32_f64_mul>
8002e20e:	e0 68 8f 3b 	mov	r8,36667
8002e212:	ea 18 b5 68 	orh	r8,0xb568
8002e216:	e0 69 82 28 	mov	r9,33320
8002e21a:	ea 19 3f a4 	orh	r9,0x3fa4
8002e21e:	e0 a0 14 c9 	rcall	80030bb0 <__avr32_f64_sub>
8002e222:	14 98       	mov	r8,r10
8002e224:	16 99       	mov	r9,r11
8002e226:	08 9a       	mov	r10,r4
8002e228:	0a 9b       	mov	r11,r5
8002e22a:	e0 a0 13 d7 	rcall	800309d8 <__avr32_f64_mul>
8002e22e:	e0 68 44 55 	mov	r8,17493
8002e232:	ea 18 0e 88 	orh	r8,0xe88
8002e236:	e0 69 c1 55 	mov	r9,49493
8002e23a:	ea 19 3f c9 	orh	r9,0x3fc9
8002e23e:	e0 a0 15 87 	rcall	80030d4c <__avr32_f64_add>
8002e242:	14 98       	mov	r8,r10
8002e244:	16 99       	mov	r9,r11
8002e246:	08 9a       	mov	r10,r4
8002e248:	0a 9b       	mov	r11,r5
8002e24a:	e0 a0 13 c7 	rcall	800309d8 <__avr32_f64_mul>
8002e24e:	e0 68 6f 7d 	mov	r8,28541
8002e252:	ea 18 03 eb 	orh	r8,0x3eb
8002e256:	e0 69 d6 12 	mov	r9,54802
8002e25a:	ea 19 3f d4 	orh	r9,0x3fd4
8002e25e:	e0 a0 14 a9 	rcall	80030bb0 <__avr32_f64_sub>
8002e262:	14 98       	mov	r8,r10
8002e264:	16 99       	mov	r9,r11
8002e266:	08 9a       	mov	r10,r4
8002e268:	0a 9b       	mov	r11,r5
8002e26a:	e0 a0 13 b7 	rcall	800309d8 <__avr32_f64_mul>
8002e26e:	e0 68 55 55 	mov	r8,21845
8002e272:	ea 18 55 55 	orh	r8,0x5555
8002e276:	e0 69 55 55 	mov	r9,21845
8002e27a:	ea 19 3f c5 	orh	r9,0x3fc5
8002e27e:	e0 a0 15 67 	rcall	80030d4c <__avr32_f64_add>
8002e282:	14 98       	mov	r8,r10
8002e284:	16 99       	mov	r9,r11
8002e286:	08 9a       	mov	r10,r4
8002e288:	0a 9b       	mov	r11,r5
8002e28a:	e0 a0 13 a7 	rcall	800309d8 <__avr32_f64_mul>
8002e28e:	e0 68 92 82 	mov	r8,37506
8002e292:	ea 18 b1 2e 	orh	r8,0xb12e
8002e296:	14 92       	mov	r2,r10
8002e298:	16 93       	mov	r3,r11
8002e29a:	e0 69 b8 c5 	mov	r9,47301
8002e29e:	ea 19 3f b3 	orh	r9,0x3fb3
8002e2a2:	08 9a       	mov	r10,r4
8002e2a4:	0a 9b       	mov	r11,r5
8002e2a6:	e0 a0 13 99 	rcall	800309d8 <__avr32_f64_mul>
8002e2aa:	e0 68 01 59 	mov	r8,345
8002e2ae:	ea 18 1b 8d 	orh	r8,0x1b8d
8002e2b2:	e0 69 06 6c 	mov	r9,1644
8002e2b6:	ea 19 3f e6 	orh	r9,0x3fe6
8002e2ba:	e0 a0 14 7b 	rcall	80030bb0 <__avr32_f64_sub>
8002e2be:	14 98       	mov	r8,r10
8002e2c0:	16 99       	mov	r9,r11
8002e2c2:	08 9a       	mov	r10,r4
8002e2c4:	0a 9b       	mov	r11,r5
8002e2c6:	e0 a0 13 89 	rcall	800309d8 <__avr32_f64_mul>
8002e2ca:	e0 68 8a c8 	mov	r8,35528
8002e2ce:	ea 18 9c 59 	orh	r8,0x9c59
8002e2d2:	e0 69 2a e5 	mov	r9,10981
8002e2d6:	ea 19 40 00 	orh	r9,0x4000
8002e2da:	e0 a0 15 39 	rcall	80030d4c <__avr32_f64_add>
8002e2de:	14 98       	mov	r8,r10
8002e2e0:	16 99       	mov	r9,r11
8002e2e2:	08 9a       	mov	r10,r4
8002e2e4:	0a 9b       	mov	r11,r5
8002e2e6:	e0 a0 13 79 	rcall	800309d8 <__avr32_f64_mul>
8002e2ea:	e0 68 2d 4b 	mov	r8,11595
8002e2ee:	ea 18 1c 8a 	orh	r8,0x1c8a
8002e2f2:	e0 69 3a 27 	mov	r9,14887
8002e2f6:	ea 19 40 03 	orh	r9,0x4003
8002e2fa:	e0 a0 14 5b 	rcall	80030bb0 <__avr32_f64_sub>
8002e2fe:	14 98       	mov	r8,r10
8002e300:	16 99       	mov	r9,r11
8002e302:	08 9a       	mov	r10,r4
8002e304:	0a 9b       	mov	r11,r5
8002e306:	e0 a0 13 69 	rcall	800309d8 <__avr32_f64_mul>
8002e30a:	30 08       	mov	r8,0
8002e30c:	fc 19 3f f0 	movh	r9,0x3ff0
8002e310:	e0 a0 15 1e 	rcall	80030d4c <__avr32_f64_add>
8002e314:	14 98       	mov	r8,r10
8002e316:	16 99       	mov	r9,r11
8002e318:	04 9a       	mov	r10,r2
8002e31a:	06 9b       	mov	r11,r3
8002e31c:	e0 a0 16 a4 	rcall	80031064 <__avr32_f64_div>
8002e320:	14 98       	mov	r8,r10
8002e322:	16 99       	mov	r9,r11
8002e324:	0e 9a       	mov	r10,r7
8002e326:	0c 9b       	mov	r11,r6
8002e328:	e0 a0 13 58 	rcall	800309d8 <__avr32_f64_mul>
8002e32c:	14 98       	mov	r8,r10
8002e32e:	16 99       	mov	r9,r11
8002e330:	0e 9a       	mov	r10,r7
8002e332:	0c 9b       	mov	r11,r6
8002e334:	e0 a0 15 0c 	rcall	80030d4c <__avr32_f64_add>
8002e338:	c2 4b       	rjmp	8002e180 <__ieee754_asin+0x74>
8002e33a:	0c 9b       	mov	r11,r6
8002e33c:	0e 9a       	mov	r10,r7
8002e33e:	e0 a0 11 97 	rcall	8003066c <fabs>
8002e342:	14 98       	mov	r8,r10
8002e344:	16 99       	mov	r9,r11
8002e346:	30 0a       	mov	r10,0
8002e348:	fc 1b 3f f0 	movh	r11,0x3ff0
8002e34c:	e0 a0 14 32 	rcall	80030bb0 <__avr32_f64_sub>
8002e350:	30 08       	mov	r8,0
8002e352:	fc 19 3f e0 	movh	r9,0x3fe0
8002e356:	e0 a0 13 41 	rcall	800309d8 <__avr32_f64_mul>
8002e35a:	e0 68 f7 09 	mov	r8,63241
8002e35e:	ea 18 0d fd 	orh	r8,0xdfd
8002e362:	16 97       	mov	r7,r11
8002e364:	14 96       	mov	r6,r10
8002e366:	e0 69 3d e1 	mov	r9,15841
8002e36a:	ea 19 3f 02 	orh	r9,0x3f02
8002e36e:	e0 a0 13 35 	rcall	800309d8 <__avr32_f64_mul>
8002e372:	e0 68 b2 88 	mov	r8,45704
8002e376:	ea 18 75 01 	orh	r8,0x7501
8002e37a:	e0 69 ef e0 	mov	r9,61408
8002e37e:	ea 19 3f 49 	orh	r9,0x3f49
8002e382:	e0 a0 14 e5 	rcall	80030d4c <__avr32_f64_add>
8002e386:	14 98       	mov	r8,r10
8002e388:	16 99       	mov	r9,r11
8002e38a:	0c 9a       	mov	r10,r6
8002e38c:	0e 9b       	mov	r11,r7
8002e38e:	e0 a0 13 25 	rcall	800309d8 <__avr32_f64_mul>
8002e392:	e0 68 8f 3b 	mov	r8,36667
8002e396:	ea 18 b5 68 	orh	r8,0xb568
8002e39a:	e0 69 82 28 	mov	r9,33320
8002e39e:	ea 19 3f a4 	orh	r9,0x3fa4
8002e3a2:	e0 a0 14 07 	rcall	80030bb0 <__avr32_f64_sub>
8002e3a6:	14 98       	mov	r8,r10
8002e3a8:	16 99       	mov	r9,r11
8002e3aa:	0c 9a       	mov	r10,r6
8002e3ac:	0e 9b       	mov	r11,r7
8002e3ae:	e0 a0 13 15 	rcall	800309d8 <__avr32_f64_mul>
8002e3b2:	e0 68 44 55 	mov	r8,17493
8002e3b6:	ea 18 0e 88 	orh	r8,0xe88
8002e3ba:	e0 69 c1 55 	mov	r9,49493
8002e3be:	ea 19 3f c9 	orh	r9,0x3fc9
8002e3c2:	e0 a0 14 c5 	rcall	80030d4c <__avr32_f64_add>
8002e3c6:	14 98       	mov	r8,r10
8002e3c8:	16 99       	mov	r9,r11
8002e3ca:	0c 9a       	mov	r10,r6
8002e3cc:	0e 9b       	mov	r11,r7
8002e3ce:	e0 a0 13 05 	rcall	800309d8 <__avr32_f64_mul>
8002e3d2:	e0 68 6f 7d 	mov	r8,28541
8002e3d6:	ea 18 03 eb 	orh	r8,0x3eb
8002e3da:	e0 69 d6 12 	mov	r9,54802
8002e3de:	ea 19 3f d4 	orh	r9,0x3fd4
8002e3e2:	e0 a0 13 e7 	rcall	80030bb0 <__avr32_f64_sub>
8002e3e6:	14 98       	mov	r8,r10
8002e3e8:	16 99       	mov	r9,r11
8002e3ea:	0c 9a       	mov	r10,r6
8002e3ec:	0e 9b       	mov	r11,r7
8002e3ee:	e0 a0 12 f5 	rcall	800309d8 <__avr32_f64_mul>
8002e3f2:	e0 68 55 55 	mov	r8,21845
8002e3f6:	ea 18 55 55 	orh	r8,0x5555
8002e3fa:	e0 69 55 55 	mov	r9,21845
8002e3fe:	ea 19 3f c5 	orh	r9,0x3fc5
8002e402:	e0 a0 14 a5 	rcall	80030d4c <__avr32_f64_add>
8002e406:	14 98       	mov	r8,r10
8002e408:	16 99       	mov	r9,r11
8002e40a:	0c 9a       	mov	r10,r6
8002e40c:	0e 9b       	mov	r11,r7
8002e40e:	e0 a0 12 e5 	rcall	800309d8 <__avr32_f64_mul>
8002e412:	e0 68 92 82 	mov	r8,37506
8002e416:	ea 18 b1 2e 	orh	r8,0xb12e
8002e41a:	e0 69 b8 c5 	mov	r9,47301
8002e41e:	ea 19 3f b3 	orh	r9,0x3fb3
8002e422:	14 90       	mov	r0,r10
8002e424:	16 91       	mov	r1,r11
8002e426:	0c 9a       	mov	r10,r6
8002e428:	0e 9b       	mov	r11,r7
8002e42a:	e0 a0 12 d7 	rcall	800309d8 <__avr32_f64_mul>
8002e42e:	e0 68 01 59 	mov	r8,345
8002e432:	ea 18 1b 8d 	orh	r8,0x1b8d
8002e436:	e0 69 06 6c 	mov	r9,1644
8002e43a:	ea 19 3f e6 	orh	r9,0x3fe6
8002e43e:	e0 a0 13 b9 	rcall	80030bb0 <__avr32_f64_sub>
8002e442:	14 98       	mov	r8,r10
8002e444:	16 99       	mov	r9,r11
8002e446:	0c 9a       	mov	r10,r6
8002e448:	0e 9b       	mov	r11,r7
8002e44a:	e0 a0 12 c7 	rcall	800309d8 <__avr32_f64_mul>
8002e44e:	e0 68 8a c8 	mov	r8,35528
8002e452:	ea 18 9c 59 	orh	r8,0x9c59
8002e456:	e0 69 2a e5 	mov	r9,10981
8002e45a:	ea 19 40 00 	orh	r9,0x4000
8002e45e:	e0 a0 14 77 	rcall	80030d4c <__avr32_f64_add>
8002e462:	14 98       	mov	r8,r10
8002e464:	16 99       	mov	r9,r11
8002e466:	0c 9a       	mov	r10,r6
8002e468:	0e 9b       	mov	r11,r7
8002e46a:	e0 a0 12 b7 	rcall	800309d8 <__avr32_f64_mul>
8002e46e:	e0 68 2d 4b 	mov	r8,11595
8002e472:	ea 18 1c 8a 	orh	r8,0x1c8a
8002e476:	e0 69 3a 27 	mov	r9,14887
8002e47a:	ea 19 40 03 	orh	r9,0x4003
8002e47e:	e0 a0 13 99 	rcall	80030bb0 <__avr32_f64_sub>
8002e482:	14 98       	mov	r8,r10
8002e484:	16 99       	mov	r9,r11
8002e486:	0c 9a       	mov	r10,r6
8002e488:	0e 9b       	mov	r11,r7
8002e48a:	e0 a0 12 a7 	rcall	800309d8 <__avr32_f64_mul>
8002e48e:	30 08       	mov	r8,0
8002e490:	fc 19 3f f0 	movh	r9,0x3ff0
8002e494:	e0 a0 14 5c 	rcall	80030d4c <__avr32_f64_add>
8002e498:	fa eb 00 04 	st.d	sp[4],r10
8002e49c:	0c 9a       	mov	r10,r6
8002e49e:	0e 9b       	mov	r11,r7
8002e4a0:	e0 a0 09 4e 	rcall	8002f73c <__ieee754_sqrt>
8002e4a4:	e0 68 33 32 	mov	r8,13106
8002e4a8:	ea 18 3f ef 	orh	r8,0x3fef
8002e4ac:	14 92       	mov	r2,r10
8002e4ae:	16 93       	mov	r3,r11
8002e4b0:	10 35       	cp.w	r5,r8
8002e4b2:	e0 8a 00 2d 	brle	8002e50c <__ieee754_asin+0x400>
8002e4b6:	fa e8 00 04 	ld.d	r8,sp[4]
8002e4ba:	00 9a       	mov	r10,r0
8002e4bc:	02 9b       	mov	r11,r1
8002e4be:	e0 a0 15 d3 	rcall	80031064 <__avr32_f64_div>
8002e4c2:	14 98       	mov	r8,r10
8002e4c4:	16 99       	mov	r9,r11
8002e4c6:	04 9a       	mov	r10,r2
8002e4c8:	06 9b       	mov	r11,r3
8002e4ca:	e0 a0 12 87 	rcall	800309d8 <__avr32_f64_mul>
8002e4ce:	14 98       	mov	r8,r10
8002e4d0:	16 99       	mov	r9,r11
8002e4d2:	04 9a       	mov	r10,r2
8002e4d4:	06 9b       	mov	r11,r3
8002e4d6:	e0 a0 14 3b 	rcall	80030d4c <__avr32_f64_add>
8002e4da:	14 98       	mov	r8,r10
8002e4dc:	16 99       	mov	r9,r11
8002e4de:	e0 a0 14 37 	rcall	80030d4c <__avr32_f64_add>
8002e4e2:	e0 68 5c 07 	mov	r8,23559
8002e4e6:	ea 18 33 14 	orh	r8,0x3314
8002e4ea:	e0 69 a6 26 	mov	r9,42534
8002e4ee:	ea 19 3c 91 	orh	r9,0x3c91
8002e4f2:	e0 a0 13 5f 	rcall	80030bb0 <__avr32_f64_sub>
8002e4f6:	14 98       	mov	r8,r10
8002e4f8:	16 99       	mov	r9,r11
8002e4fa:	e0 6a 2d 18 	mov	r10,11544
8002e4fe:	ea 1a 54 44 	orh	r10,0x5444
8002e502:	e0 6b 21 fb 	mov	r11,8699
8002e506:	ea 1b 3f f9 	orh	r11,0x3ff9
8002e50a:	c6 98       	rjmp	8002e5dc <__ieee754_asin+0x4d0>
8002e50c:	14 98       	mov	r8,r10
8002e50e:	06 99       	mov	r9,r3
8002e510:	e0 a0 14 1e 	rcall	80030d4c <__avr32_f64_add>
8002e514:	fa e8 00 04 	ld.d	r8,sp[4]
8002e518:	fa eb 00 0c 	st.d	sp[12],r10
8002e51c:	00 9a       	mov	r10,r0
8002e51e:	02 9b       	mov	r11,r1
8002e520:	e0 a0 15 a2 	rcall	80031064 <__avr32_f64_div>
8002e524:	14 98       	mov	r8,r10
8002e526:	16 99       	mov	r9,r11
8002e528:	fa ea 00 0c 	ld.d	r10,sp[12]
8002e52c:	e0 a0 12 56 	rcall	800309d8 <__avr32_f64_mul>
8002e530:	30 04       	mov	r4,0
8002e532:	14 90       	mov	r0,r10
8002e534:	16 91       	mov	r1,r11
8002e536:	08 98       	mov	r8,r4
8002e538:	06 99       	mov	r9,r3
8002e53a:	08 9a       	mov	r10,r4
8002e53c:	06 9b       	mov	r11,r3
8002e53e:	e0 a0 12 4d 	rcall	800309d8 <__avr32_f64_mul>
8002e542:	14 98       	mov	r8,r10
8002e544:	16 99       	mov	r9,r11
8002e546:	0c 9a       	mov	r10,r6
8002e548:	0e 9b       	mov	r11,r7
8002e54a:	e0 a0 13 33 	rcall	80030bb0 <__avr32_f64_sub>
8002e54e:	08 98       	mov	r8,r4
8002e550:	16 97       	mov	r7,r11
8002e552:	14 96       	mov	r6,r10
8002e554:	06 99       	mov	r9,r3
8002e556:	04 9a       	mov	r10,r2
8002e558:	06 9b       	mov	r11,r3
8002e55a:	e0 a0 13 f9 	rcall	80030d4c <__avr32_f64_add>
8002e55e:	14 98       	mov	r8,r10
8002e560:	16 99       	mov	r9,r11
8002e562:	0c 9a       	mov	r10,r6
8002e564:	0e 9b       	mov	r11,r7
8002e566:	e0 a0 15 7f 	rcall	80031064 <__avr32_f64_div>
8002e56a:	30 08       	mov	r8,0
8002e56c:	fc 19 c0 00 	movh	r9,0xc000
8002e570:	e0 a0 12 34 	rcall	800309d8 <__avr32_f64_mul>
8002e574:	e0 68 5c 07 	mov	r8,23559
8002e578:	ea 18 33 14 	orh	r8,0x3314
8002e57c:	e0 69 a6 26 	mov	r9,42534
8002e580:	ea 19 3c 91 	orh	r9,0x3c91
8002e584:	e0 a0 13 e4 	rcall	80030d4c <__avr32_f64_add>
8002e588:	14 98       	mov	r8,r10
8002e58a:	16 99       	mov	r9,r11
8002e58c:	00 9a       	mov	r10,r0
8002e58e:	02 9b       	mov	r11,r1
8002e590:	e0 a0 13 10 	rcall	80030bb0 <__avr32_f64_sub>
8002e594:	30 08       	mov	r8,0
8002e596:	16 97       	mov	r7,r11
8002e598:	14 96       	mov	r6,r10
8002e59a:	fc 19 c0 00 	movh	r9,0xc000
8002e59e:	08 9a       	mov	r10,r4
8002e5a0:	06 9b       	mov	r11,r3
8002e5a2:	e0 a0 12 1b 	rcall	800309d8 <__avr32_f64_mul>
8002e5a6:	e0 68 2d 18 	mov	r8,11544
8002e5aa:	ea 18 54 44 	orh	r8,0x5444
8002e5ae:	e0 69 21 fb 	mov	r9,8699
8002e5b2:	ea 19 3f e9 	orh	r9,0x3fe9
8002e5b6:	e0 a0 13 cb 	rcall	80030d4c <__avr32_f64_add>
8002e5ba:	14 98       	mov	r8,r10
8002e5bc:	16 99       	mov	r9,r11
8002e5be:	0c 9a       	mov	r10,r6
8002e5c0:	0e 9b       	mov	r11,r7
8002e5c2:	e0 a0 12 f7 	rcall	80030bb0 <__avr32_f64_sub>
8002e5c6:	06 95       	mov	r5,r3
8002e5c8:	14 98       	mov	r8,r10
8002e5ca:	16 99       	mov	r9,r11
8002e5cc:	e0 6a 2d 18 	mov	r10,11544
8002e5d0:	ea 1a 54 44 	orh	r10,0x5444
8002e5d4:	e0 6b 21 fb 	mov	r11,8699
8002e5d8:	ea 1b 3f e9 	orh	r11,0x3fe9
8002e5dc:	e0 a0 12 ea 	rcall	80030bb0 <__avr32_f64_sub>
8002e5e0:	40 08       	lddsp	r8,sp[0x0]
8002e5e2:	16 96       	mov	r6,r11
8002e5e4:	14 97       	mov	r7,r10
8002e5e6:	ee 16 80 00 	eorh	r6,0x8000
8002e5ea:	58 08       	cp.w	r8,0
8002e5ec:	e0 8a 00 03 	brle	8002e5f2 <__ieee754_asin+0x4e6>
8002e5f0:	16 96       	mov	r6,r11
8002e5f2:	0c 9b       	mov	r11,r6
8002e5f4:	0e 9a       	mov	r10,r7
8002e5f6:	2f bd       	sub	sp,-20
8002e5f8:	d8 32       	popm	r0-r7,pc
8002e5fa:	d7 03       	nop

8002e5fc <__ieee754_atan2>:
8002e5fc:	d4 31       	pushm	r0-r7,lr
8002e5fe:	20 2d       	sub	sp,8
8002e600:	50 0b       	stdsp	sp[0x0],r11
8002e602:	10 96       	mov	r6,r8
8002e604:	10 92       	mov	r2,r8
8002e606:	fd d9 c0 1f 	bfextu	lr,r9,0x0,0x1f
8002e60a:	5c 38       	neg	r8
8002e60c:	14 94       	mov	r4,r10
8002e60e:	0c 48       	or	r8,r6
8002e610:	16 95       	mov	r5,r11
8002e612:	12 93       	mov	r3,r9
8002e614:	14 90       	mov	r0,r10
8002e616:	16 91       	mov	r1,r11
8002e618:	12 9c       	mov	r12,r9
8002e61a:	fd e8 13 f8 	or	r8,lr,r8>>0x1f
8002e61e:	fc 17 7f f0 	movh	r7,0x7ff0
8002e622:	0e 38       	cp.w	r8,r7
8002e624:	e0 8b 00 0e 	brhi	8002e640 <__ieee754_atan2+0x44>
8002e628:	f1 db c0 1f 	bfextu	r8,r11,0x0,0x1f
8002e62c:	f4 07 11 00 	rsub	r7,r10,0
8002e630:	fc 10 7f f0 	movh	r0,0x7ff0
8002e634:	14 47       	or	r7,r10
8002e636:	f1 e7 13 f7 	or	r7,r8,r7>>0x1f
8002e63a:	00 37       	cp.w	r7,r0
8002e63c:	e0 88 00 09 	brls	8002e64e <__ieee754_atan2+0x52>
8002e640:	04 98       	mov	r8,r2
8002e642:	06 99       	mov	r9,r3
8002e644:	08 9a       	mov	r10,r4
8002e646:	0a 9b       	mov	r11,r5
8002e648:	e0 a0 13 82 	rcall	80030d4c <__avr32_f64_add>
8002e64c:	ce 88       	rjmp	8002e81c <__ieee754_atan2+0x220>
8002e64e:	fc 17 c0 10 	movh	r7,0xc010
8002e652:	f8 07 00 07 	add	r7,r12,r7
8002e656:	0c 47       	or	r7,r6
8002e658:	c0 41       	brne	8002e660 <__ieee754_atan2+0x64>
8002e65a:	e0 a0 0e 65 	rcall	80030324 <atan>
8002e65e:	cd f8       	rjmp	8002e81c <__ieee754_atan2+0x220>
8002e660:	f8 07 14 1e 	asr	r7,r12,0x1e
8002e664:	f1 ea 10 09 	or	r9,r8,r10
8002e668:	e2 17 00 02 	andl	r7,0x2,COH
8002e66c:	ef eb 13 f7 	or	r7,r7,r11>>0x1f
8002e670:	58 09       	cp.w	r9,0
8002e672:	c0 71       	brne	8002e680 <__ieee754_atan2+0x84>
8002e674:	58 27       	cp.w	r7,2
8002e676:	c5 10       	breq	8002e718 <__ieee754_atan2+0x11c>
8002e678:	e0 8a 00 d4 	brle	8002e820 <__ieee754_atan2+0x224>
8002e67c:	58 37       	cp.w	r7,3
8002e67e:	c5 60       	breq	8002e72a <__ieee754_atan2+0x12e>
8002e680:	fd e6 10 06 	or	r6,lr,r6
8002e684:	c6 00       	breq	8002e744 <__ieee754_atan2+0x148>
8002e686:	fc 19 7f f0 	movh	r9,0x7ff0
8002e68a:	12 3e       	cp.w	lr,r9
8002e68c:	c5 81       	brne	8002e73c <__ieee754_atan2+0x140>
8002e68e:	12 38       	cp.w	r8,r9
8002e690:	c3 11       	brne	8002e6f2 <__ieee754_atan2+0xf6>
8002e692:	58 17       	cp.w	r7,1
8002e694:	c0 b0       	breq	8002e6aa <__ieee754_atan2+0xae>
8002e696:	e0 89 00 05 	brgt	8002e6a0 <__ieee754_atan2+0xa4>
8002e69a:	58 07       	cp.w	r7,0
8002e69c:	c1 00       	breq	8002e6bc <__ieee754_atan2+0xc0>
8002e69e:	c5 38       	rjmp	8002e744 <__ieee754_atan2+0x148>
8002e6a0:	58 27       	cp.w	r7,2
8002e6a2:	c1 60       	breq	8002e6ce <__ieee754_atan2+0xd2>
8002e6a4:	58 37       	cp.w	r7,3
8002e6a6:	c4 f1       	brne	8002e744 <__ieee754_atan2+0x148>
8002e6a8:	c1 c8       	rjmp	8002e6e0 <__ieee754_atan2+0xe4>
8002e6aa:	e0 64 2d 18 	mov	r4,11544
8002e6ae:	ea 14 54 44 	orh	r4,0x5444
8002e6b2:	e0 65 21 fb 	mov	r5,8699
8002e6b6:	ea 15 bf e9 	orh	r5,0xbfe9
8002e6ba:	cb 38       	rjmp	8002e820 <__ieee754_atan2+0x224>
8002e6bc:	e0 64 2d 18 	mov	r4,11544
8002e6c0:	ea 14 54 44 	orh	r4,0x5444
8002e6c4:	e0 65 21 fb 	mov	r5,8699
8002e6c8:	ea 15 3f e9 	orh	r5,0x3fe9
8002e6cc:	ca a8       	rjmp	8002e820 <__ieee754_atan2+0x224>
8002e6ce:	e0 64 21 d2 	mov	r4,8658
8002e6d2:	ea 14 7f 33 	orh	r4,0x7f33
8002e6d6:	e0 65 d9 7c 	mov	r5,55676
8002e6da:	ea 15 40 02 	orh	r5,0x4002
8002e6de:	ca 18       	rjmp	8002e820 <__ieee754_atan2+0x224>
8002e6e0:	e0 64 21 d2 	mov	r4,8658
8002e6e4:	ea 14 7f 33 	orh	r4,0x7f33
8002e6e8:	e0 65 d9 7c 	mov	r5,55676
8002e6ec:	ea 15 c0 02 	orh	r5,0xc002
8002e6f0:	c9 88       	rjmp	8002e820 <__ieee754_atan2+0x224>
8002e6f2:	58 17       	cp.w	r7,1
8002e6f4:	c0 b0       	breq	8002e70a <__ieee754_atan2+0x10e>
8002e6f6:	e0 89 00 05 	brgt	8002e700 <__ieee754_atan2+0x104>
8002e6fa:	58 07       	cp.w	r7,0
8002e6fc:	c0 b0       	breq	8002e712 <__ieee754_atan2+0x116>
8002e6fe:	c1 f8       	rjmp	8002e73c <__ieee754_atan2+0x140>
8002e700:	58 27       	cp.w	r7,2
8002e702:	c0 b0       	breq	8002e718 <__ieee754_atan2+0x11c>
8002e704:	58 37       	cp.w	r7,3
8002e706:	c1 b1       	brne	8002e73c <__ieee754_atan2+0x140>
8002e708:	c1 18       	rjmp	8002e72a <__ieee754_atan2+0x12e>
8002e70a:	30 04       	mov	r4,0
8002e70c:	fc 15 80 00 	movh	r5,0x8000
8002e710:	c8 88       	rjmp	8002e820 <__ieee754_atan2+0x224>
8002e712:	30 04       	mov	r4,0
8002e714:	30 05       	mov	r5,0
8002e716:	c8 58       	rjmp	8002e820 <__ieee754_atan2+0x224>
8002e718:	e0 64 2d 18 	mov	r4,11544
8002e71c:	ea 14 54 44 	orh	r4,0x5444
8002e720:	e0 65 21 fb 	mov	r5,8699
8002e724:	ea 15 40 09 	orh	r5,0x4009
8002e728:	c7 c8       	rjmp	8002e820 <__ieee754_atan2+0x224>
8002e72a:	e0 64 2d 18 	mov	r4,11544
8002e72e:	ea 14 54 44 	orh	r4,0x5444
8002e732:	e0 65 21 fb 	mov	r5,8699
8002e736:	ea 15 c0 09 	orh	r5,0xc009
8002e73a:	c7 38       	rjmp	8002e820 <__ieee754_atan2+0x224>
8002e73c:	fc 10 7f f0 	movh	r0,0x7ff0
8002e740:	00 38       	cp.w	r8,r0
8002e742:	c1 51       	brne	8002e76c <__ieee754_atan2+0x170>
8002e744:	58 01       	cp.w	r1,0
8002e746:	c0 a5       	brlt	8002e75a <__ieee754_atan2+0x15e>
8002e748:	e0 64 2d 18 	mov	r4,11544
8002e74c:	ea 14 54 44 	orh	r4,0x5444
8002e750:	e0 65 21 fb 	mov	r5,8699
8002e754:	ea 15 3f f9 	orh	r5,0x3ff9
8002e758:	c6 48       	rjmp	8002e820 <__ieee754_atan2+0x224>
8002e75a:	e0 64 2d 18 	mov	r4,11544
8002e75e:	ea 14 54 44 	orh	r4,0x5444
8002e762:	e0 65 21 fb 	mov	r5,8699
8002e766:	ea 15 bf f9 	orh	r5,0xbff9
8002e76a:	c5 b8       	rjmp	8002e820 <__ieee754_atan2+0x224>
8002e76c:	1c 18       	sub	r8,lr
8002e76e:	b5 48       	asr	r8,0x14
8002e770:	e0 48 00 3c 	cp.w	r8,60
8002e774:	e0 8a 00 0b 	brle	8002e78a <__ieee754_atan2+0x18e>
8002e778:	e0 6a 2d 18 	mov	r10,11544
8002e77c:	ea 1a 54 44 	orh	r10,0x5444
8002e780:	e0 6b 21 fb 	mov	r11,8699
8002e784:	ea 1b 3f f9 	orh	r11,0x3ff9
8002e788:	c1 48       	rjmp	8002e7b0 <__ieee754_atan2+0x1b4>
8002e78a:	fe 58 ff c4 	cp.w	r8,-60
8002e78e:	5f 58       	srlt	r8
8002e790:	f1 ec 03 fc 	and	r12,r8,r12>>0x1f
8002e794:	c0 40       	breq	8002e79c <__ieee754_atan2+0x1a0>
8002e796:	30 0a       	mov	r10,0
8002e798:	30 0b       	mov	r11,0
8002e79a:	c0 b8       	rjmp	8002e7b0 <__ieee754_atan2+0x1b4>
8002e79c:	04 98       	mov	r8,r2
8002e79e:	06 99       	mov	r9,r3
8002e7a0:	08 9a       	mov	r10,r4
8002e7a2:	0a 9b       	mov	r11,r5
8002e7a4:	e0 a0 14 60 	rcall	80031064 <__avr32_f64_div>
8002e7a8:	e0 a0 0f 62 	rcall	8003066c <fabs>
8002e7ac:	e0 a0 0d bc 	rcall	80030324 <atan>
8002e7b0:	58 17       	cp.w	r7,1
8002e7b2:	c0 60       	breq	8002e7be <__ieee754_atan2+0x1c2>
8002e7b4:	58 27       	cp.w	r7,2
8002e7b6:	c0 a0       	breq	8002e7ca <__ieee754_atan2+0x1ce>
8002e7b8:	58 07       	cp.w	r7,0
8002e7ba:	c1 d1       	brne	8002e7f4 <__ieee754_atan2+0x1f8>
8002e7bc:	c3 08       	rjmp	8002e81c <__ieee754_atan2+0x220>
8002e7be:	fc 18 80 00 	movh	r8,0x8000
8002e7c2:	14 94       	mov	r4,r10
8002e7c4:	f6 08 00 05 	add	r5,r11,r8
8002e7c8:	c2 c8       	rjmp	8002e820 <__ieee754_atan2+0x224>
8002e7ca:	e0 68 5c 07 	mov	r8,23559
8002e7ce:	ea 18 33 14 	orh	r8,0x3314
8002e7d2:	e0 69 a6 26 	mov	r9,42534
8002e7d6:	ea 19 3c a1 	orh	r9,0x3ca1
8002e7da:	e0 a0 11 eb 	rcall	80030bb0 <__avr32_f64_sub>
8002e7de:	14 98       	mov	r8,r10
8002e7e0:	16 99       	mov	r9,r11
8002e7e2:	e0 6a 2d 18 	mov	r10,11544
8002e7e6:	ea 1a 54 44 	orh	r10,0x5444
8002e7ea:	e0 6b 21 fb 	mov	r11,8699
8002e7ee:	ea 1b 40 09 	orh	r11,0x4009
8002e7f2:	c1 38       	rjmp	8002e818 <__ieee754_atan2+0x21c>
8002e7f4:	e0 68 5c 07 	mov	r8,23559
8002e7f8:	ea 18 33 14 	orh	r8,0x3314
8002e7fc:	e0 69 a6 26 	mov	r9,42534
8002e800:	ea 19 3c a1 	orh	r9,0x3ca1
8002e804:	e0 a0 11 d6 	rcall	80030bb0 <__avr32_f64_sub>
8002e808:	e0 68 2d 18 	mov	r8,11544
8002e80c:	ea 18 54 44 	orh	r8,0x5444
8002e810:	e0 69 21 fb 	mov	r9,8699
8002e814:	ea 19 40 09 	orh	r9,0x4009
8002e818:	e0 a0 11 cc 	rcall	80030bb0 <__avr32_f64_sub>
8002e81c:	14 94       	mov	r4,r10
8002e81e:	16 95       	mov	r5,r11
8002e820:	08 9a       	mov	r10,r4
8002e822:	0a 9b       	mov	r11,r5
8002e824:	2f ed       	sub	sp,-8
8002e826:	d8 32       	popm	r0-r7,pc

8002e828 <__ieee754_pow>:
8002e828:	d4 31       	pushm	r0-r7,lr
8002e82a:	20 ed       	sub	sp,56
8002e82c:	10 94       	mov	r4,r8
8002e82e:	12 95       	mov	r5,r9
8002e830:	50 7b       	stdsp	sp[0x1c],r11
8002e832:	fa e5 00 0c 	st.d	sp[12],r4
8002e836:	12 97       	mov	r7,r9
8002e838:	10 96       	mov	r6,r8
8002e83a:	40 31       	lddsp	r1,sp[0xc]
8002e83c:	40 49       	lddsp	r9,sp[0x10]
8002e83e:	e5 d1 c0 1f 	bfextu	r2,r1,0x0,0x1f
8002e842:	16 90       	mov	r0,r11
8002e844:	14 93       	mov	r3,r10
8002e846:	14 98       	mov	r8,r10
8002e848:	e5 e9 10 0c 	or	r12,r2,r9
8002e84c:	e0 80 05 33 	breq	8002f2b2 <__ieee754_pow+0xa8a>
8002e850:	50 1b       	stdsp	sp[0x4],r11
8002e852:	16 9e       	mov	lr,r11
8002e854:	e9 db c0 1f 	bfextu	r4,r11,0x0,0x1f
8002e858:	fc 1c 7f f0 	movh	r12,0x7ff0
8002e85c:	18 34       	cp.w	r4,r12
8002e85e:	e0 89 00 1a 	brgt	8002e892 <__ieee754_pow+0x6a>
8002e862:	5f 05       	sreq	r5
8002e864:	50 55       	stdsp	sp[0x14],r5
8002e866:	30 0c       	mov	r12,0
8002e868:	58 0a       	cp.w	r10,0
8002e86a:	5f 15       	srne	r5
8002e86c:	40 5e       	lddsp	lr,sp[0x14]
8002e86e:	fd e5 00 05 	and	r5,lr,r5
8002e872:	f8 05 18 00 	cp.b	r5,r12
8002e876:	c0 e1       	brne	8002e892 <__ieee754_pow+0x6a>
8002e878:	fc 1c 7f f0 	movh	r12,0x7ff0
8002e87c:	18 32       	cp.w	r2,r12
8002e87e:	e0 89 00 0a 	brgt	8002e892 <__ieee754_pow+0x6a>
8002e882:	5f 0c       	sreq	r12
8002e884:	58 09       	cp.w	r9,0
8002e886:	5f 1e       	srne	lr
8002e888:	f9 ee 00 0e 	and	lr,r12,lr
8002e88c:	ea 0e 18 00 	cp.b	lr,r5
8002e890:	c0 d0       	breq	8002e8aa <__ieee754_pow+0x82>
8002e892:	fc 19 c0 10 	movh	r9,0xc010
8002e896:	12 04       	add	r4,r9
8002e898:	e9 e8 10 08 	or	r8,r4,r8
8002e89c:	e0 80 05 0b 	breq	8002f2b2 <__ieee754_pow+0xa8a>
8002e8a0:	4d 6c       	lddpc	r12,8002e9f8 <__ieee754_pow+0x1d0>
8002e8a2:	e0 a0 0f 90 	rcall	800307c2 <nan>
8002e8a6:	e0 8f 05 03 	bral	8002f2ac <__ieee754_pow+0xa84>
8002e8aa:	58 0b       	cp.w	r11,0
8002e8ac:	c3 64       	brge	8002e918 <__ieee754_pow+0xf0>
8002e8ae:	e0 6b ff ff 	mov	r11,65535
8002e8b2:	ea 1b 43 3f 	orh	r11,0x433f
8002e8b6:	16 32       	cp.w	r2,r11
8002e8b8:	e0 8a 00 04 	brle	8002e8c0 <__ieee754_pow+0x98>
8002e8bc:	30 25       	mov	r5,2
8002e8be:	c2 e8       	rjmp	8002e91a <__ieee754_pow+0xf2>
8002e8c0:	e0 6a ff ff 	mov	r10,65535
8002e8c4:	ea 1a 3f ef 	orh	r10,0x3fef
8002e8c8:	14 32       	cp.w	r2,r10
8002e8ca:	e0 8a 00 27 	brle	8002e918 <__ieee754_pow+0xf0>
8002e8ce:	e4 0a 14 14 	asr	r10,r2,0x14
8002e8d2:	f4 ca 03 ff 	sub	r10,r10,1023
8002e8d6:	59 4a       	cp.w	r10,20
8002e8d8:	e0 8a 00 0f 	brle	8002e8f6 <__ieee754_pow+0xce>
8002e8dc:	f4 0a 11 34 	rsub	r10,r10,52
8002e8e0:	f2 0a 0a 45 	lsr	r5,r9,r10
8002e8e4:	ea 0a 09 4a 	lsl	r10,r5,r10
8002e8e8:	12 3a       	cp.w	r10,r9
8002e8ea:	c1 71       	brne	8002e918 <__ieee754_pow+0xf0>
8002e8ec:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8002e8f0:	ea 05 11 02 	rsub	r5,r5,2
8002e8f4:	c1 38       	rjmp	8002e91a <__ieee754_pow+0xf2>
8002e8f6:	40 49       	lddsp	r9,sp[0x10]
8002e8f8:	58 09       	cp.w	r9,0
8002e8fa:	c5 01       	brne	8002e99a <__ieee754_pow+0x172>
8002e8fc:	f4 0a 11 14 	rsub	r10,r10,20
8002e900:	e4 0a 08 45 	asr	r5,r2,r10
8002e904:	ea 0a 09 4a 	lsl	r10,r5,r10
8002e908:	04 3a       	cp.w	r10,r2
8002e90a:	e0 81 04 de 	brne	8002f2c6 <__ieee754_pow+0xa9e>
8002e90e:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8002e912:	ea 05 11 02 	rsub	r5,r5,2
8002e916:	c0 48       	rjmp	8002e91e <__ieee754_pow+0xf6>
8002e918:	30 05       	mov	r5,0
8002e91a:	58 09       	cp.w	r9,0
8002e91c:	c4 01       	brne	8002e99c <__ieee754_pow+0x174>
8002e91e:	58 0c       	cp.w	r12,0
8002e920:	c1 90       	breq	8002e952 <__ieee754_pow+0x12a>
8002e922:	fc 19 c0 10 	movh	r9,0xc010
8002e926:	e8 09 00 09 	add	r9,r4,r9
8002e92a:	f3 e8 10 08 	or	r8,r9,r8
8002e92e:	e0 80 04 c2 	breq	8002f2b2 <__ieee754_pow+0xa8a>
8002e932:	e0 68 ff ff 	mov	r8,65535
8002e936:	ea 18 3f ef 	orh	r8,0x3fef
8002e93a:	10 34       	cp.w	r4,r8
8002e93c:	e0 8a 00 07 	brle	8002e94a <__ieee754_pow+0x122>
8002e940:	58 01       	cp.w	r1,0
8002e942:	e0 84 04 be 	brge	8002f2be <__ieee754_pow+0xa96>
8002e946:	e0 8f 04 ba 	bral	8002f2ba <__ieee754_pow+0xa92>
8002e94a:	58 01       	cp.w	r1,0
8002e94c:	e0 84 04 b7 	brge	8002f2ba <__ieee754_pow+0xa92>
8002e950:	c5 98       	rjmp	8002ea02 <__ieee754_pow+0x1da>
8002e952:	fc 1e 3f f0 	movh	lr,0x3ff0
8002e956:	1c 32       	cp.w	r2,lr
8002e958:	c0 d1       	brne	8002e972 <__ieee754_pow+0x14a>
8002e95a:	58 01       	cp.w	r1,0
8002e95c:	c0 55       	brlt	8002e966 <__ieee754_pow+0x13e>
8002e95e:	00 97       	mov	r7,r0
8002e960:	06 96       	mov	r6,r3
8002e962:	e0 8f 04 ae 	bral	8002f2be <__ieee754_pow+0xa96>
8002e966:	00 99       	mov	r9,r0
8002e968:	06 98       	mov	r8,r3
8002e96a:	30 0a       	mov	r10,0
8002e96c:	fc 1b 3f f0 	movh	r11,0x3ff0
8002e970:	c5 c8       	rjmp	8002ea28 <__ieee754_pow+0x200>
8002e972:	fc 1c 40 00 	movh	r12,0x4000
8002e976:	18 31       	cp.w	r1,r12
8002e978:	c0 41       	brne	8002e980 <__ieee754_pow+0x158>
8002e97a:	00 99       	mov	r9,r0
8002e97c:	06 98       	mov	r8,r3
8002e97e:	c8 68       	rjmp	8002ea8a <__ieee754_pow+0x262>
8002e980:	fc 1b 3f e0 	movh	r11,0x3fe0
8002e984:	16 31       	cp.w	r1,r11
8002e986:	c0 b1       	brne	8002e99c <__ieee754_pow+0x174>
8002e988:	40 1a       	lddsp	r10,sp[0x4]
8002e98a:	58 0a       	cp.w	r10,0
8002e98c:	c0 85       	brlt	8002e99c <__ieee754_pow+0x174>
8002e98e:	00 9b       	mov	r11,r0
8002e990:	06 9a       	mov	r10,r3
8002e992:	e0 a0 06 d5 	rcall	8002f73c <__ieee754_sqrt>
8002e996:	e0 8f 04 8b 	bral	8002f2ac <__ieee754_pow+0xa84>
8002e99a:	30 05       	mov	r5,0
8002e99c:	50 08       	stdsp	sp[0x0],r8
8002e99e:	00 9b       	mov	r11,r0
8002e9a0:	06 9a       	mov	r10,r3
8002e9a2:	e0 a0 0e 65 	rcall	8003066c <fabs>
8002e9a6:	40 08       	lddsp	r8,sp[0x0]
8002e9a8:	58 08       	cp.w	r8,0
8002e9aa:	c3 01       	brne	8002ea0a <__ieee754_pow+0x1e2>
8002e9ac:	58 04       	cp.w	r4,0
8002e9ae:	5f 09       	sreq	r9
8002e9b0:	40 5e       	lddsp	lr,sp[0x14]
8002e9b2:	fd e9 10 09 	or	r9,lr,r9
8002e9b6:	f0 09 18 00 	cp.b	r9,r8
8002e9ba:	c0 51       	brne	8002e9c4 <__ieee754_pow+0x19c>
8002e9bc:	fc 1c 3f f0 	movh	r12,0x3ff0
8002e9c0:	18 34       	cp.w	r4,r12
8002e9c2:	c2 41       	brne	8002ea0a <__ieee754_pow+0x1e2>
8002e9c4:	58 01       	cp.w	r1,0
8002e9c6:	c0 84       	brge	8002e9d6 <__ieee754_pow+0x1ae>
8002e9c8:	16 99       	mov	r9,r11
8002e9ca:	14 98       	mov	r8,r10
8002e9cc:	fc 1b 3f f0 	movh	r11,0x3ff0
8002e9d0:	30 0a       	mov	r10,0
8002e9d2:	e0 a0 13 49 	rcall	80031064 <__avr32_f64_div>
8002e9d6:	16 97       	mov	r7,r11
8002e9d8:	14 96       	mov	r6,r10
8002e9da:	40 1b       	lddsp	r11,sp[0x4]
8002e9dc:	58 0b       	cp.w	r11,0
8002e9de:	e0 84 04 70 	brge	8002f2be <__ieee754_pow+0xa96>
8002e9e2:	fc 18 c0 10 	movh	r8,0xc010
8002e9e6:	10 04       	add	r4,r8
8002e9e8:	eb e4 10 04 	or	r4,r5,r4
8002e9ec:	c0 81       	brne	8002e9fc <__ieee754_pow+0x1d4>
8002e9ee:	0e 9b       	mov	r11,r7
8002e9f0:	0e 99       	mov	r9,r7
8002e9f2:	0c 98       	mov	r8,r6
8002e9f4:	c1 68       	rjmp	8002ea20 <__ieee754_pow+0x1f8>
8002e9f6:	d7 03       	nop
8002e9f8:	80 03       	ld.sh	r3,r0[0x0]
8002e9fa:	1f 78       	ld.ub	r8,--pc
8002e9fc:	58 15       	cp.w	r5,1
8002e9fe:	e0 81 04 60 	brne	8002f2be <__ieee754_pow+0xa96>
8002ea02:	ee 17 80 00 	eorh	r7,0x8000
8002ea06:	e0 8f 04 5c 	bral	8002f2be <__ieee754_pow+0xa96>
8002ea0a:	40 78       	lddsp	r8,sp[0x1c]
8002ea0c:	bf 98       	lsr	r8,0x1f
8002ea0e:	20 18       	sub	r8,1
8002ea10:	50 d8       	stdsp	sp[0x34],r8
8002ea12:	eb e8 10 08 	or	r8,r5,r8
8002ea16:	c0 d1       	brne	8002ea30 <__ieee754_pow+0x208>
8002ea18:	00 99       	mov	r9,r0
8002ea1a:	06 98       	mov	r8,r3
8002ea1c:	06 9a       	mov	r10,r3
8002ea1e:	00 9b       	mov	r11,r0
8002ea20:	e0 a0 10 c8 	rcall	80030bb0 <__avr32_f64_sub>
8002ea24:	14 98       	mov	r8,r10
8002ea26:	16 99       	mov	r9,r11
8002ea28:	e0 a0 13 1e 	rcall	80031064 <__avr32_f64_div>
8002ea2c:	e0 8f 04 40 	bral	8002f2ac <__ieee754_pow+0xa84>
8002ea30:	fc 19 41 e0 	movh	r9,0x41e0
8002ea34:	12 32       	cp.w	r2,r9
8002ea36:	e0 8a 00 9f 	brle	8002eb74 <__ieee754_pow+0x34c>
8002ea3a:	fc 18 43 f0 	movh	r8,0x43f0
8002ea3e:	10 32       	cp.w	r2,r8
8002ea40:	e0 8a 00 0a 	brle	8002ea54 <__ieee754_pow+0x22c>
8002ea44:	e0 65 ff ff 	mov	r5,65535
8002ea48:	ea 15 3f ef 	orh	r5,0x3fef
8002ea4c:	0a 34       	cp.w	r4,r5
8002ea4e:	e0 89 00 13 	brgt	8002ea74 <__ieee754_pow+0x24c>
8002ea52:	c0 88       	rjmp	8002ea62 <__ieee754_pow+0x23a>
8002ea54:	e0 60 ff fe 	mov	r0,65534
8002ea58:	ea 10 3f ef 	orh	r0,0x3fef
8002ea5c:	00 34       	cp.w	r4,r0
8002ea5e:	e0 89 00 06 	brgt	8002ea6a <__ieee754_pow+0x242>
8002ea62:	58 01       	cp.w	r1,0
8002ea64:	e0 84 04 2b 	brge	8002f2ba <__ieee754_pow+0xa92>
8002ea68:	c0 98       	rjmp	8002ea7a <__ieee754_pow+0x252>
8002ea6a:	fc 1e 3f f0 	movh	lr,0x3ff0
8002ea6e:	1c 34       	cp.w	r4,lr
8002ea70:	e0 8a 00 11 	brle	8002ea92 <__ieee754_pow+0x26a>
8002ea74:	58 01       	cp.w	r1,0
8002ea76:	e0 8a 04 22 	brle	8002f2ba <__ieee754_pow+0xa92>
8002ea7a:	e0 68 75 9c 	mov	r8,30108
8002ea7e:	ea 18 88 00 	orh	r8,0x8800
8002ea82:	e0 69 e4 3c 	mov	r9,58428
8002ea86:	ea 19 7e 37 	orh	r9,0x7e37
8002ea8a:	10 9a       	mov	r10,r8
8002ea8c:	12 9b       	mov	r11,r9
8002ea8e:	e0 8f 04 0d 	bral	8002f2a8 <__ieee754_pow+0xa80>
8002ea92:	30 08       	mov	r8,0
8002ea94:	fc 19 3f f0 	movh	r9,0x3ff0
8002ea98:	e0 a0 10 8c 	rcall	80030bb0 <__avr32_f64_sub>
8002ea9c:	fc 18 60 00 	movh	r8,0x6000
8002eaa0:	14 92       	mov	r2,r10
8002eaa2:	16 93       	mov	r3,r11
8002eaa4:	e0 69 15 47 	mov	r9,5447
8002eaa8:	ea 19 3f f7 	orh	r9,0x3ff7
8002eaac:	e0 a0 0f 96 	rcall	800309d8 <__avr32_f64_mul>
8002eab0:	e0 68 df 44 	mov	r8,57156
8002eab4:	ea 18 f8 5d 	orh	r8,0xf85d
8002eab8:	fa eb 00 0c 	st.d	sp[12],r10
8002eabc:	e0 69 ae 0b 	mov	r9,44555
8002eac0:	ea 19 3e 54 	orh	r9,0x3e54
8002eac4:	04 9a       	mov	r10,r2
8002eac6:	06 9b       	mov	r11,r3
8002eac8:	e0 a0 0f 88 	rcall	800309d8 <__avr32_f64_mul>
8002eacc:	04 98       	mov	r8,r2
8002eace:	fa eb 00 04 	st.d	sp[4],r10
8002ead2:	06 99       	mov	r9,r3
8002ead4:	04 9a       	mov	r10,r2
8002ead6:	06 9b       	mov	r11,r3
8002ead8:	e0 a0 0f 80 	rcall	800309d8 <__avr32_f64_mul>
8002eadc:	30 08       	mov	r8,0
8002eade:	14 90       	mov	r0,r10
8002eae0:	16 91       	mov	r1,r11
8002eae2:	fc 19 bf d0 	movh	r9,0xbfd0
8002eae6:	04 9a       	mov	r10,r2
8002eae8:	06 9b       	mov	r11,r3
8002eaea:	e0 a0 0f 77 	rcall	800309d8 <__avr32_f64_mul>
8002eaee:	e0 68 55 55 	mov	r8,21845
8002eaf2:	ea 18 55 55 	orh	r8,0x5555
8002eaf6:	e0 69 55 55 	mov	r9,21845
8002eafa:	ea 19 3f d5 	orh	r9,0x3fd5
8002eafe:	e0 a0 11 27 	rcall	80030d4c <__avr32_f64_add>
8002eb02:	14 98       	mov	r8,r10
8002eb04:	16 99       	mov	r9,r11
8002eb06:	04 9a       	mov	r10,r2
8002eb08:	06 9b       	mov	r11,r3
8002eb0a:	e0 a0 0f 67 	rcall	800309d8 <__avr32_f64_mul>
8002eb0e:	14 98       	mov	r8,r10
8002eb10:	16 99       	mov	r9,r11
8002eb12:	30 0a       	mov	r10,0
8002eb14:	fc 1b 3f e0 	movh	r11,0x3fe0
8002eb18:	e0 a0 10 4c 	rcall	80030bb0 <__avr32_f64_sub>
8002eb1c:	14 98       	mov	r8,r10
8002eb1e:	16 99       	mov	r9,r11
8002eb20:	00 9a       	mov	r10,r0
8002eb22:	02 9b       	mov	r11,r1
8002eb24:	e0 a0 0f 5a 	rcall	800309d8 <__avr32_f64_mul>
8002eb28:	e0 68 82 fe 	mov	r8,33534
8002eb2c:	ea 18 65 2b 	orh	r8,0x652b
8002eb30:	e0 69 15 47 	mov	r9,5447
8002eb34:	ea 19 bf f7 	orh	r9,0xbff7
8002eb38:	e0 a0 0f 50 	rcall	800309d8 <__avr32_f64_mul>
8002eb3c:	14 98       	mov	r8,r10
8002eb3e:	16 99       	mov	r9,r11
8002eb40:	fa ea 00 04 	ld.d	r10,sp[4]
8002eb44:	e0 a0 11 04 	rcall	80030d4c <__avr32_f64_add>
8002eb48:	16 91       	mov	r1,r11
8002eb4a:	14 98       	mov	r8,r10
8002eb4c:	14 90       	mov	r0,r10
8002eb4e:	02 99       	mov	r9,r1
8002eb50:	fa ea 00 0c 	ld.d	r10,sp[12]
8002eb54:	e0 a0 10 fc 	rcall	80030d4c <__avr32_f64_add>
8002eb58:	fa e8 00 0c 	ld.d	r8,sp[12]
8002eb5c:	16 93       	mov	r3,r11
8002eb5e:	30 02       	mov	r2,0
8002eb60:	06 9b       	mov	r11,r3
8002eb62:	04 9a       	mov	r10,r2
8002eb64:	e0 a0 10 26 	rcall	80030bb0 <__avr32_f64_sub>
8002eb68:	14 98       	mov	r8,r10
8002eb6a:	16 99       	mov	r9,r11
8002eb6c:	00 9a       	mov	r10,r0
8002eb6e:	02 9b       	mov	r11,r1
8002eb70:	e0 8f 01 c6 	bral	8002eefc <__ieee754_pow+0x6d4>
8002eb74:	ee 54 ff ff 	cp.w	r4,1048575
8002eb78:	e0 8a 00 04 	brle	8002eb80 <__ieee754_pow+0x358>
8002eb7c:	30 0c       	mov	r12,0
8002eb7e:	c0 98       	rjmp	8002eb90 <__ieee754_pow+0x368>
8002eb80:	fc 19 43 40 	movh	r9,0x4340
8002eb84:	30 08       	mov	r8,0
8002eb86:	e0 a0 0f 29 	rcall	800309d8 <__avr32_f64_mul>
8002eb8a:	3c bc       	mov	r12,-53
8002eb8c:	16 99       	mov	r9,r11
8002eb8e:	12 94       	mov	r4,r9
8002eb90:	f1 d4 c0 14 	bfextu	r8,r4,0x0,0x14
8002eb94:	f8 cc 03 ff 	sub	r12,r12,1023
8002eb98:	b5 44       	asr	r4,0x14
8002eb9a:	10 93       	mov	r3,r8
8002eb9c:	08 0c       	add	r12,r4
8002eb9e:	ea 13 3f f0 	orh	r3,0x3ff0
8002eba2:	e2 58 98 8e 	cp.w	r8,235662
8002eba6:	e0 8a 00 0c 	brle	8002ebbe <__ieee754_pow+0x396>
8002ebaa:	ea 58 b6 79 	cp.w	r8,767609
8002ebae:	e0 89 00 04 	brgt	8002ebb6 <__ieee754_pow+0x38e>
8002ebb2:	30 14       	mov	r4,1
8002ebb4:	c0 68       	rjmp	8002ebc0 <__ieee754_pow+0x398>
8002ebb6:	f0 68 00 00 	mov	r8,-1048576
8002ebba:	2f fc       	sub	r12,-1
8002ebbc:	10 03       	add	r3,r8
8002ebbe:	30 04       	mov	r4,0
8002ebc0:	14 98       	mov	r8,r10
8002ebc2:	06 99       	mov	r9,r3
8002ebc4:	4d ea       	lddpc	r10,8002ed3c <__ieee754_pow+0x514>
8002ebc6:	50 0c       	stdsp	sp[0x0],r12
8002ebc8:	f4 04 02 30 	ld.d	r0,r10[r4<<0x3]
8002ebcc:	fa e9 00 14 	st.d	sp[20],r8
8002ebd0:	fa e1 00 1c 	st.d	sp[28],r0
8002ebd4:	00 98       	mov	r8,r0
8002ebd6:	02 99       	mov	r9,r1
8002ebd8:	fa ea 00 14 	ld.d	r10,sp[20]
8002ebdc:	e0 a0 0f ea 	rcall	80030bb0 <__avr32_f64_sub>
8002ebe0:	fa e8 00 1c 	ld.d	r8,sp[28]
8002ebe4:	fa eb 00 24 	st.d	sp[36],r10
8002ebe8:	fa ea 00 14 	ld.d	r10,sp[20]
8002ebec:	e0 a0 10 b0 	rcall	80030d4c <__avr32_f64_add>
8002ebf0:	14 98       	mov	r8,r10
8002ebf2:	16 99       	mov	r9,r11
8002ebf4:	30 0a       	mov	r10,0
8002ebf6:	fc 1b 3f f0 	movh	r11,0x3ff0
8002ebfa:	e0 a0 12 35 	rcall	80031064 <__avr32_f64_div>
8002ebfe:	14 98       	mov	r8,r10
8002ec00:	16 99       	mov	r9,r11
8002ec02:	fa eb 00 2c 	st.d	sp[44],r10
8002ec06:	fa ea 00 24 	ld.d	r10,sp[36]
8002ec0a:	e0 a0 0e e7 	rcall	800309d8 <__avr32_f64_mul>
8002ec0e:	30 09       	mov	r9,0
8002ec10:	fa eb 00 0c 	st.d	sp[12],r10
8002ec14:	fa eb 00 04 	st.d	sp[4],r10
8002ec18:	a1 53       	asr	r3,0x1
8002ec1a:	30 0a       	mov	r10,0
8002ec1c:	bd b3       	sbr	r3,0x1d
8002ec1e:	e8 08 15 12 	lsl	r8,r4,0x12
8002ec22:	f8 28 00 00 	sub	r8,-524288
8002ec26:	f0 03 00 0b 	add	r11,r8,r3
8002ec2a:	50 49       	stdsp	sp[0x10],r9
8002ec2c:	14 92       	mov	r2,r10
8002ec2e:	fa e0 00 0c 	ld.d	r0,sp[12]
8002ec32:	16 93       	mov	r3,r11
8002ec34:	14 98       	mov	r8,r10
8002ec36:	16 99       	mov	r9,r11
8002ec38:	00 9a       	mov	r10,r0
8002ec3a:	02 9b       	mov	r11,r1
8002ec3c:	e0 a0 0e ce 	rcall	800309d8 <__avr32_f64_mul>
8002ec40:	14 98       	mov	r8,r10
8002ec42:	16 99       	mov	r9,r11
8002ec44:	fa ea 00 24 	ld.d	r10,sp[36]
8002ec48:	e0 a0 0f b4 	rcall	80030bb0 <__avr32_f64_sub>
8002ec4c:	fa e8 00 1c 	ld.d	r8,sp[28]
8002ec50:	fa eb 00 24 	st.d	sp[36],r10
8002ec54:	04 9a       	mov	r10,r2
8002ec56:	06 9b       	mov	r11,r3
8002ec58:	e0 a0 0f ac 	rcall	80030bb0 <__avr32_f64_sub>
8002ec5c:	14 98       	mov	r8,r10
8002ec5e:	16 99       	mov	r9,r11
8002ec60:	fa ea 00 14 	ld.d	r10,sp[20]
8002ec64:	e0 a0 0f a6 	rcall	80030bb0 <__avr32_f64_sub>
8002ec68:	14 98       	mov	r8,r10
8002ec6a:	16 99       	mov	r9,r11
8002ec6c:	00 9a       	mov	r10,r0
8002ec6e:	02 9b       	mov	r11,r1
8002ec70:	e0 a0 0e b4 	rcall	800309d8 <__avr32_f64_mul>
8002ec74:	14 98       	mov	r8,r10
8002ec76:	16 99       	mov	r9,r11
8002ec78:	fa ea 00 24 	ld.d	r10,sp[36]
8002ec7c:	e0 a0 0f 9a 	rcall	80030bb0 <__avr32_f64_sub>
8002ec80:	14 98       	mov	r8,r10
8002ec82:	16 99       	mov	r9,r11
8002ec84:	fa ea 00 2c 	ld.d	r10,sp[44]
8002ec88:	e0 a0 0e a8 	rcall	800309d8 <__avr32_f64_mul>
8002ec8c:	fa e8 00 04 	ld.d	r8,sp[4]
8002ec90:	fa eb 00 14 	st.d	sp[20],r10
8002ec94:	10 9a       	mov	r10,r8
8002ec96:	12 9b       	mov	r11,r9
8002ec98:	e0 a0 0e a0 	rcall	800309d8 <__avr32_f64_mul>
8002ec9c:	16 93       	mov	r3,r11
8002ec9e:	14 92       	mov	r2,r10
8002eca0:	06 99       	mov	r9,r3
8002eca2:	14 98       	mov	r8,r10
8002eca4:	e0 a0 0e 9a 	rcall	800309d8 <__avr32_f64_mul>
8002eca8:	e0 68 4e ef 	mov	r8,20207
8002ecac:	ea 18 4a 45 	orh	r8,0x4a45
8002ecb0:	fa eb 00 1c 	st.d	sp[28],r10
8002ecb4:	e0 69 7e 28 	mov	r9,32296
8002ecb8:	ea 19 3f ca 	orh	r9,0x3fca
8002ecbc:	04 9a       	mov	r10,r2
8002ecbe:	06 9b       	mov	r11,r3
8002ecc0:	e0 a0 0e 8c 	rcall	800309d8 <__avr32_f64_mul>
8002ecc4:	e0 68 db 65 	mov	r8,56165
8002ecc8:	ea 18 93 c9 	orh	r8,0x93c9
8002eccc:	e0 69 86 4a 	mov	r9,34378
8002ecd0:	ea 19 3f cd 	orh	r9,0x3fcd
8002ecd4:	e0 a0 10 3c 	rcall	80030d4c <__avr32_f64_add>
8002ecd8:	14 98       	mov	r8,r10
8002ecda:	16 99       	mov	r9,r11
8002ecdc:	04 9a       	mov	r10,r2
8002ecde:	06 9b       	mov	r11,r3
8002ece0:	e0 a0 0e 7c 	rcall	800309d8 <__avr32_f64_mul>
8002ece4:	e0 68 41 01 	mov	r8,16641
8002ece8:	ea 18 a9 1d 	orh	r8,0xa91d
8002ecec:	e0 69 74 60 	mov	r9,29792
8002ecf0:	ea 19 3f d1 	orh	r9,0x3fd1
8002ecf4:	e0 a0 10 2c 	rcall	80030d4c <__avr32_f64_add>
8002ecf8:	14 98       	mov	r8,r10
8002ecfa:	16 99       	mov	r9,r11
8002ecfc:	04 9a       	mov	r10,r2
8002ecfe:	06 9b       	mov	r11,r3
8002ed00:	e0 a0 0e 6c 	rcall	800309d8 <__avr32_f64_mul>
8002ed04:	e0 68 26 4d 	mov	r8,9805
8002ed08:	ea 18 51 8f 	orh	r8,0x518f
8002ed0c:	e0 69 55 55 	mov	r9,21845
8002ed10:	ea 19 3f d5 	orh	r9,0x3fd5
8002ed14:	e0 a0 10 1c 	rcall	80030d4c <__avr32_f64_add>
8002ed18:	14 98       	mov	r8,r10
8002ed1a:	16 99       	mov	r9,r11
8002ed1c:	04 9a       	mov	r10,r2
8002ed1e:	06 9b       	mov	r11,r3
8002ed20:	e0 a0 0e 5c 	rcall	800309d8 <__avr32_f64_mul>
8002ed24:	e0 68 ab ff 	mov	r8,44031
8002ed28:	ea 18 db 6f 	orh	r8,0xdb6f
8002ed2c:	e0 69 6d b6 	mov	r9,28086
8002ed30:	ea 19 3f db 	orh	r9,0x3fdb
8002ed34:	e0 a0 10 0c 	rcall	80030d4c <__avr32_f64_add>
8002ed38:	c0 48       	rjmp	8002ed40 <__ieee754_pow+0x518>
8002ed3a:	d7 03       	nop
8002ed3c:	80 03       	ld.sh	r3,r0[0x0]
8002ed3e:	1f a8       	ld.ub	r8,pc[0x2]
8002ed40:	14 98       	mov	r8,r10
8002ed42:	16 99       	mov	r9,r11
8002ed44:	04 9a       	mov	r10,r2
8002ed46:	06 9b       	mov	r11,r3
8002ed48:	e0 a0 0e 48 	rcall	800309d8 <__avr32_f64_mul>
8002ed4c:	e0 68 33 03 	mov	r8,13059
8002ed50:	ea 18 33 33 	orh	r8,0x3333
8002ed54:	e0 69 33 33 	mov	r9,13107
8002ed58:	ea 19 3f e3 	orh	r9,0x3fe3
8002ed5c:	e0 a0 0f f8 	rcall	80030d4c <__avr32_f64_add>
8002ed60:	14 98       	mov	r8,r10
8002ed62:	16 99       	mov	r9,r11
8002ed64:	fa ea 00 1c 	ld.d	r10,sp[28]
8002ed68:	e0 a0 0e 38 	rcall	800309d8 <__avr32_f64_mul>
8002ed6c:	fa e8 00 04 	ld.d	r8,sp[4]
8002ed70:	14 92       	mov	r2,r10
8002ed72:	16 93       	mov	r3,r11
8002ed74:	00 9a       	mov	r10,r0
8002ed76:	02 9b       	mov	r11,r1
8002ed78:	e0 a0 0f ea 	rcall	80030d4c <__avr32_f64_add>
8002ed7c:	14 98       	mov	r8,r10
8002ed7e:	16 99       	mov	r9,r11
8002ed80:	fa ea 00 14 	ld.d	r10,sp[20]
8002ed84:	e0 a0 0e 2a 	rcall	800309d8 <__avr32_f64_mul>
8002ed88:	14 98       	mov	r8,r10
8002ed8a:	16 99       	mov	r9,r11
8002ed8c:	04 9a       	mov	r10,r2
8002ed8e:	06 9b       	mov	r11,r3
8002ed90:	e0 a0 0f de 	rcall	80030d4c <__avr32_f64_add>
8002ed94:	00 98       	mov	r8,r0
8002ed96:	fa eb 00 1c 	st.d	sp[28],r10
8002ed9a:	02 99       	mov	r9,r1
8002ed9c:	00 9a       	mov	r10,r0
8002ed9e:	02 9b       	mov	r11,r1
8002eda0:	e0 a0 0e 1c 	rcall	800309d8 <__avr32_f64_mul>
8002eda4:	30 08       	mov	r8,0
8002eda6:	fc 19 40 08 	movh	r9,0x4008
8002edaa:	fa eb 00 2c 	st.d	sp[44],r10
8002edae:	e0 a0 0f cf 	rcall	80030d4c <__avr32_f64_add>
8002edb2:	fa e8 00 1c 	ld.d	r8,sp[28]
8002edb6:	e0 a0 0f cb 	rcall	80030d4c <__avr32_f64_add>
8002edba:	40 48       	lddsp	r8,sp[0x10]
8002edbc:	16 93       	mov	r3,r11
8002edbe:	10 92       	mov	r2,r8
8002edc0:	06 99       	mov	r9,r3
8002edc2:	00 9a       	mov	r10,r0
8002edc4:	02 9b       	mov	r11,r1
8002edc6:	e0 a0 0e 09 	rcall	800309d8 <__avr32_f64_mul>
8002edca:	04 98       	mov	r8,r2
8002edcc:	06 99       	mov	r9,r3
8002edce:	fa eb 00 24 	st.d	sp[36],r10
8002edd2:	fa ea 00 14 	ld.d	r10,sp[20]
8002edd6:	e0 a0 0e 01 	rcall	800309d8 <__avr32_f64_mul>
8002edda:	30 08       	mov	r8,0
8002eddc:	14 90       	mov	r0,r10
8002edde:	16 91       	mov	r1,r11
8002ede0:	04 9a       	mov	r10,r2
8002ede2:	06 9b       	mov	r11,r3
8002ede4:	fc 19 40 08 	movh	r9,0x4008
8002ede8:	e0 a0 0e e4 	rcall	80030bb0 <__avr32_f64_sub>
8002edec:	fa e8 00 2c 	ld.d	r8,sp[44]
8002edf0:	e0 a0 0e e0 	rcall	80030bb0 <__avr32_f64_sub>
8002edf4:	14 98       	mov	r8,r10
8002edf6:	16 99       	mov	r9,r11
8002edf8:	fa ea 00 1c 	ld.d	r10,sp[28]
8002edfc:	e0 a0 0e da 	rcall	80030bb0 <__avr32_f64_sub>
8002ee00:	fa e8 00 04 	ld.d	r8,sp[4]
8002ee04:	e0 a0 0d ea 	rcall	800309d8 <__avr32_f64_mul>
8002ee08:	14 98       	mov	r8,r10
8002ee0a:	16 99       	mov	r9,r11
8002ee0c:	00 9a       	mov	r10,r0
8002ee0e:	02 9b       	mov	r11,r1
8002ee10:	e0 a0 0f 9e 	rcall	80030d4c <__avr32_f64_add>
8002ee14:	16 91       	mov	r1,r11
8002ee16:	14 90       	mov	r0,r10
8002ee18:	14 98       	mov	r8,r10
8002ee1a:	02 99       	mov	r9,r1
8002ee1c:	fa ea 00 24 	ld.d	r10,sp[36]
8002ee20:	e0 a0 0f 96 	rcall	80030d4c <__avr32_f64_add>
8002ee24:	40 4e       	lddsp	lr,sp[0x10]
8002ee26:	16 93       	mov	r3,r11
8002ee28:	1c 92       	mov	r2,lr
8002ee2a:	1c 9a       	mov	r10,lr
8002ee2c:	fc 18 e0 00 	movh	r8,0xe000
8002ee30:	e0 69 c7 09 	mov	r9,50953
8002ee34:	ea 19 3f ee 	orh	r9,0x3fee
8002ee38:	06 9b       	mov	r11,r3
8002ee3a:	e0 a0 0d cf 	rcall	800309d8 <__avr32_f64_mul>
8002ee3e:	e0 68 01 f5 	mov	r8,501
8002ee42:	ea 18 14 5b 	orh	r8,0x145b
8002ee46:	fa eb 00 14 	st.d	sp[20],r10
8002ee4a:	e0 69 2f e0 	mov	r9,12256
8002ee4e:	ea 19 be 3e 	orh	r9,0xbe3e
8002ee52:	04 9a       	mov	r10,r2
8002ee54:	06 9b       	mov	r11,r3
8002ee56:	e0 a0 0d c1 	rcall	800309d8 <__avr32_f64_mul>
8002ee5a:	fa e8 00 24 	ld.d	r8,sp[36]
8002ee5e:	fa eb 00 04 	st.d	sp[4],r10
8002ee62:	04 9a       	mov	r10,r2
8002ee64:	06 9b       	mov	r11,r3
8002ee66:	e0 a0 0e a5 	rcall	80030bb0 <__avr32_f64_sub>
8002ee6a:	14 98       	mov	r8,r10
8002ee6c:	16 99       	mov	r9,r11
8002ee6e:	00 9a       	mov	r10,r0
8002ee70:	02 9b       	mov	r11,r1
8002ee72:	e0 a0 0e 9f 	rcall	80030bb0 <__avr32_f64_sub>
8002ee76:	e0 68 03 fd 	mov	r8,1021
8002ee7a:	ea 18 dc 3a 	orh	r8,0xdc3a
8002ee7e:	e0 69 c7 09 	mov	r9,50953
8002ee82:	ea 19 3f ee 	orh	r9,0x3fee
8002ee86:	e0 a0 0d a9 	rcall	800309d8 <__avr32_f64_mul>
8002ee8a:	14 98       	mov	r8,r10
8002ee8c:	16 99       	mov	r9,r11
8002ee8e:	fa ea 00 04 	ld.d	r10,sp[4]
8002ee92:	e0 a0 0f 5d 	rcall	80030d4c <__avr32_f64_add>
8002ee96:	4a 18       	lddpc	r8,8002ef18 <__ieee754_pow+0x6f0>
8002ee98:	f0 04 02 38 	ld.d	r8,r8[r4<<0x3]
8002ee9c:	e0 a0 0f 58 	rcall	80030d4c <__avr32_f64_add>
8002eea0:	40 0c       	lddsp	r12,sp[0x0]
8002eea2:	fa eb 00 1c 	st.d	sp[28],r10
8002eea6:	e0 a0 0f f4 	rcall	80030e8e <__avr32_s32_to_f64>
8002eeaa:	49 d8       	lddpc	r8,8002ef1c <__ieee754_pow+0x6f4>
8002eeac:	14 90       	mov	r0,r10
8002eeae:	16 91       	mov	r1,r11
8002eeb0:	f0 04 02 3a 	ld.d	r10,r8[r4<<0x3]
8002eeb4:	fa e8 00 1c 	ld.d	r8,sp[28]
8002eeb8:	fa eb 00 04 	st.d	sp[4],r10
8002eebc:	fa ea 00 14 	ld.d	r10,sp[20]
8002eec0:	e0 a0 0f 46 	rcall	80030d4c <__avr32_f64_add>
8002eec4:	fa e8 00 04 	ld.d	r8,sp[4]
8002eec8:	e0 a0 0f 42 	rcall	80030d4c <__avr32_f64_add>
8002eecc:	00 98       	mov	r8,r0
8002eece:	02 99       	mov	r9,r1
8002eed0:	e0 a0 0f 3e 	rcall	80030d4c <__avr32_f64_add>
8002eed4:	00 98       	mov	r8,r0
8002eed6:	02 99       	mov	r9,r1
8002eed8:	40 4a       	lddsp	r10,sp[0x10]
8002eeda:	16 93       	mov	r3,r11
8002eedc:	14 92       	mov	r2,r10
8002eede:	06 9b       	mov	r11,r3
8002eee0:	e0 a0 0e 68 	rcall	80030bb0 <__avr32_f64_sub>
8002eee4:	fa e8 00 04 	ld.d	r8,sp[4]
8002eee8:	e0 a0 0e 64 	rcall	80030bb0 <__avr32_f64_sub>
8002eeec:	fa e8 00 14 	ld.d	r8,sp[20]
8002eef0:	e0 a0 0e 60 	rcall	80030bb0 <__avr32_f64_sub>
8002eef4:	14 98       	mov	r8,r10
8002eef6:	16 99       	mov	r9,r11
8002eef8:	fa ea 00 1c 	ld.d	r10,sp[28]
8002eefc:	e0 a0 0e 5a 	rcall	80030bb0 <__avr32_f64_sub>
8002ef00:	20 15       	sub	r5,1
8002ef02:	40 d9       	lddsp	r9,sp[0x34]
8002ef04:	14 90       	mov	r0,r10
8002ef06:	16 91       	mov	r1,r11
8002ef08:	12 45       	or	r5,r9
8002ef0a:	c0 b0       	breq	8002ef20 <__ieee754_pow+0x6f8>
8002ef0c:	30 04       	mov	r4,0
8002ef0e:	fc 15 3f f0 	movh	r5,0x3ff0
8002ef12:	fa e5 00 0c 	st.d	sp[12],r4
8002ef16:	c0 a8       	rjmp	8002ef2a <__ieee754_pow+0x702>
8002ef18:	80 03       	ld.sh	r3,r0[0x0]
8002ef1a:	1f 98       	ld.ub	r8,pc[0x1]
8002ef1c:	80 03       	ld.sh	r3,r0[0x0]
8002ef1e:	1f 88       	ld.ub	r8,pc[0x0]
8002ef20:	30 0a       	mov	r10,0
8002ef22:	fc 1b bf f0 	movh	r11,0xbff0
8002ef26:	fa eb 00 0c 	st.d	sp[12],r10
8002ef2a:	0e 99       	mov	r9,r7
8002ef2c:	30 08       	mov	r8,0
8002ef2e:	0e 9b       	mov	r11,r7
8002ef30:	fa e9 00 04 	st.d	sp[4],r8
8002ef34:	0c 9a       	mov	r10,r6
8002ef36:	e0 a0 0e 3d 	rcall	80030bb0 <__avr32_f64_sub>
8002ef3a:	04 98       	mov	r8,r2
8002ef3c:	06 99       	mov	r9,r3
8002ef3e:	e0 a0 0d 4d 	rcall	800309d8 <__avr32_f64_mul>
8002ef42:	00 98       	mov	r8,r0
8002ef44:	14 94       	mov	r4,r10
8002ef46:	16 95       	mov	r5,r11
8002ef48:	02 99       	mov	r9,r1
8002ef4a:	0e 9b       	mov	r11,r7
8002ef4c:	0c 9a       	mov	r10,r6
8002ef4e:	e0 a0 0d 45 	rcall	800309d8 <__avr32_f64_mul>
8002ef52:	14 98       	mov	r8,r10
8002ef54:	16 99       	mov	r9,r11
8002ef56:	08 9a       	mov	r10,r4
8002ef58:	0a 9b       	mov	r11,r5
8002ef5a:	e0 a0 0e f9 	rcall	80030d4c <__avr32_f64_add>
8002ef5e:	04 98       	mov	r8,r2
8002ef60:	06 99       	mov	r9,r3
8002ef62:	14 90       	mov	r0,r10
8002ef64:	16 91       	mov	r1,r11
8002ef66:	fa ea 00 04 	ld.d	r10,sp[4]
8002ef6a:	e0 a0 0d 37 	rcall	800309d8 <__avr32_f64_mul>
8002ef6e:	14 94       	mov	r4,r10
8002ef70:	16 95       	mov	r5,r11
8002ef72:	08 98       	mov	r8,r4
8002ef74:	00 9a       	mov	r10,r0
8002ef76:	02 9b       	mov	r11,r1
8002ef78:	0a 99       	mov	r9,r5
8002ef7a:	fa e5 00 04 	st.d	sp[4],r4
8002ef7e:	e0 a0 0e e7 	rcall	80030d4c <__avr32_f64_add>
8002ef82:	e0 6e ff ff 	mov	lr,65535
8002ef86:	ea 1e 40 8f 	orh	lr,0x408f
8002ef8a:	16 93       	mov	r3,r11
8002ef8c:	14 92       	mov	r2,r10
8002ef8e:	06 97       	mov	r7,r3
8002ef90:	06 98       	mov	r8,r3
8002ef92:	1c 33       	cp.w	r3,lr
8002ef94:	e0 8a 00 36 	brle	8002f000 <__ieee754_pow+0x7d8>
8002ef98:	fc 1a bf 70 	movh	r10,0xbf70
8002ef9c:	14 08       	add	r8,r10
8002ef9e:	f1 e2 10 09 	or	r9,r8,r2
8002efa2:	c1 a1       	brne	8002efd6 <__ieee754_pow+0x7ae>
8002efa4:	e0 68 82 fe 	mov	r8,33534
8002efa8:	ea 18 65 2b 	orh	r8,0x652b
8002efac:	e0 69 15 47 	mov	r9,5447
8002efb0:	ea 19 3c 97 	orh	r9,0x3c97
8002efb4:	00 9a       	mov	r10,r0
8002efb6:	02 9b       	mov	r11,r1
8002efb8:	e0 a0 0e ca 	rcall	80030d4c <__avr32_f64_add>
8002efbc:	08 98       	mov	r8,r4
8002efbe:	fa eb 00 14 	st.d	sp[20],r10
8002efc2:	0a 99       	mov	r9,r5
8002efc4:	04 9a       	mov	r10,r2
8002efc6:	06 9b       	mov	r11,r3
8002efc8:	e0 a0 0d f4 	rcall	80030bb0 <__avr32_f64_sub>
8002efcc:	fa e8 00 14 	ld.d	r8,sp[20]
8002efd0:	e0 a0 10 16 	rcall	80030ffc <__avr32_f64_cmp_lt>
8002efd4:	c4 40       	breq	8002f05c <__ieee754_pow+0x834>
8002efd6:	e0 68 75 9c 	mov	r8,30108
8002efda:	ea 18 88 00 	orh	r8,0x8800
8002efde:	e0 69 e4 3c 	mov	r9,58428
8002efe2:	ea 19 7e 37 	orh	r9,0x7e37
8002efe6:	fa ea 00 0c 	ld.d	r10,sp[12]
8002efea:	e0 a0 0c f7 	rcall	800309d8 <__avr32_f64_mul>
8002efee:	e0 68 75 9c 	mov	r8,30108
8002eff2:	ea 18 88 00 	orh	r8,0x8800
8002eff6:	e0 69 e4 3c 	mov	r9,58428
8002effa:	ea 19 7e 37 	orh	r9,0x7e37
8002effe:	c5 59       	rjmp	8002f2a8 <__ieee754_pow+0xa80>
8002f000:	f9 d3 c0 1f 	bfextu	r12,r3,0x0,0x1f
8002f004:	e0 6e cb ff 	mov	lr,52223
8002f008:	ea 1e 40 90 	orh	lr,0x4090
8002f00c:	1c 3c       	cp.w	r12,lr
8002f00e:	e0 8a 00 27 	brle	8002f05c <__ieee754_pow+0x834>
8002f012:	e0 6c 34 00 	mov	r12,13312
8002f016:	ea 1c 3f 6f 	orh	r12,0x3f6f
8002f01a:	18 08       	add	r8,r12
8002f01c:	14 48       	or	r8,r10
8002f01e:	c0 a1       	brne	8002f032 <__ieee754_pow+0x80a>
8002f020:	08 98       	mov	r8,r4
8002f022:	0a 99       	mov	r9,r5
8002f024:	e0 a0 0d c6 	rcall	80030bb0 <__avr32_f64_sub>
8002f028:	00 98       	mov	r8,r0
8002f02a:	02 99       	mov	r9,r1
8002f02c:	e0 a0 0f b4 	rcall	80030f94 <__avr32_f64_cmp_ge>
8002f030:	c1 60       	breq	8002f05c <__ieee754_pow+0x834>
8002f032:	e0 68 f3 59 	mov	r8,62297
8002f036:	ea 18 c2 f8 	orh	r8,0xc2f8
8002f03a:	e0 69 6e 1f 	mov	r9,28191
8002f03e:	ea 19 01 a5 	orh	r9,0x1a5
8002f042:	fa ea 00 0c 	ld.d	r10,sp[12]
8002f046:	e0 a0 0c c9 	rcall	800309d8 <__avr32_f64_mul>
8002f04a:	e0 68 f3 59 	mov	r8,62297
8002f04e:	ea 18 c2 f8 	orh	r8,0xc2f8
8002f052:	e0 69 6e 1f 	mov	r9,28191
8002f056:	ea 19 01 a5 	orh	r9,0x1a5
8002f05a:	c2 79       	rjmp	8002f2a8 <__ieee754_pow+0xa80>
8002f05c:	f1 d7 c0 1f 	bfextu	r8,r7,0x0,0x1f
8002f060:	fc 1c 3f e0 	movh	r12,0x3fe0
8002f064:	18 38       	cp.w	r8,r12
8002f066:	e0 89 00 04 	brgt	8002f06e <__ieee754_pow+0x846>
8002f06a:	30 06       	mov	r6,0
8002f06c:	c2 78       	rjmp	8002f0ba <__ieee754_pow+0x892>
8002f06e:	fc 19 00 10 	movh	r9,0x10
8002f072:	b5 48       	asr	r8,0x14
8002f074:	f0 c8 03 fe 	sub	r8,r8,1022
8002f078:	f2 08 08 48 	asr	r8,r9,r8
8002f07c:	0e 08       	add	r8,r7
8002f07e:	f3 d8 c0 14 	bfextu	r9,r8,0x0,0x14
8002f082:	b5 a9       	sbr	r9,0x14
8002f084:	f9 d8 c2 8b 	bfextu	r12,r8,0x14,0xb
8002f088:	30 0a       	mov	r10,0
8002f08a:	f8 cc 03 ff 	sub	r12,r12,1023
8002f08e:	f8 06 11 14 	rsub	r6,r12,20
8002f092:	f2 06 08 46 	asr	r6,r9,r6
8002f096:	ee 79 ff ff 	mov	r9,1048575
8002f09a:	f2 0c 08 4c 	asr	r12,r9,r12
8002f09e:	5c dc       	com	r12
8002f0a0:	f9 e8 00 0b 	and	r11,r12,r8
8002f0a4:	58 07       	cp.w	r7,0
8002f0a6:	fb b6 05 00 	rsublt	r6,0
8002f0aa:	14 98       	mov	r8,r10
8002f0ac:	16 99       	mov	r9,r11
8002f0ae:	08 9a       	mov	r10,r4
8002f0b0:	0a 9b       	mov	r11,r5
8002f0b2:	e0 a0 0d 7f 	rcall	80030bb0 <__avr32_f64_sub>
8002f0b6:	fa eb 00 04 	st.d	sp[4],r10
8002f0ba:	fa e8 00 04 	ld.d	r8,sp[4]
8002f0be:	00 9a       	mov	r10,r0
8002f0c0:	02 9b       	mov	r11,r1
8002f0c2:	e0 a0 0e 45 	rcall	80030d4c <__avr32_f64_add>
8002f0c6:	30 04       	mov	r4,0
8002f0c8:	16 95       	mov	r5,r11
8002f0ca:	30 08       	mov	r8,0
8002f0cc:	e0 69 2e 43 	mov	r9,11843
8002f0d0:	ea 19 3f e6 	orh	r9,0x3fe6
8002f0d4:	08 9a       	mov	r10,r4
8002f0d6:	0a 9b       	mov	r11,r5
8002f0d8:	e0 a0 0c 80 	rcall	800309d8 <__avr32_f64_mul>
8002f0dc:	fa e8 00 04 	ld.d	r8,sp[4]
8002f0e0:	fa eb 00 14 	st.d	sp[20],r10
8002f0e4:	08 9a       	mov	r10,r4
8002f0e6:	0a 9b       	mov	r11,r5
8002f0e8:	e0 a0 0d 64 	rcall	80030bb0 <__avr32_f64_sub>
8002f0ec:	14 98       	mov	r8,r10
8002f0ee:	16 99       	mov	r9,r11
8002f0f0:	00 9a       	mov	r10,r0
8002f0f2:	02 9b       	mov	r11,r1
8002f0f4:	e0 a0 0d 5e 	rcall	80030bb0 <__avr32_f64_sub>
8002f0f8:	e0 68 39 ef 	mov	r8,14831
8002f0fc:	ea 18 fe fa 	orh	r8,0xfefa
8002f100:	e0 69 2e 42 	mov	r9,11842
8002f104:	ea 19 3f e6 	orh	r9,0x3fe6
8002f108:	e0 a0 0c 68 	rcall	800309d8 <__avr32_f64_mul>
8002f10c:	e0 68 6c 39 	mov	r8,27705
8002f110:	ea 18 0c a8 	orh	r8,0xca8
8002f114:	14 92       	mov	r2,r10
8002f116:	16 93       	mov	r3,r11
8002f118:	08 9a       	mov	r10,r4
8002f11a:	0a 9b       	mov	r11,r5
8002f11c:	e0 69 5c 61 	mov	r9,23649
8002f120:	ea 19 be 20 	orh	r9,0xbe20
8002f124:	e0 a0 0c 5a 	rcall	800309d8 <__avr32_f64_mul>
8002f128:	14 98       	mov	r8,r10
8002f12a:	16 99       	mov	r9,r11
8002f12c:	04 9a       	mov	r10,r2
8002f12e:	06 9b       	mov	r11,r3
8002f130:	e0 a0 0e 0e 	rcall	80030d4c <__avr32_f64_add>
8002f134:	16 93       	mov	r3,r11
8002f136:	14 92       	mov	r2,r10
8002f138:	14 98       	mov	r8,r10
8002f13a:	06 99       	mov	r9,r3
8002f13c:	fa ea 00 14 	ld.d	r10,sp[20]
8002f140:	e0 a0 0e 06 	rcall	80030d4c <__avr32_f64_add>
8002f144:	fa e8 00 14 	ld.d	r8,sp[20]
8002f148:	14 94       	mov	r4,r10
8002f14a:	16 95       	mov	r5,r11
8002f14c:	e0 a0 0d 32 	rcall	80030bb0 <__avr32_f64_sub>
8002f150:	14 98       	mov	r8,r10
8002f152:	16 99       	mov	r9,r11
8002f154:	04 9a       	mov	r10,r2
8002f156:	06 9b       	mov	r11,r3
8002f158:	e0 a0 0d 2c 	rcall	80030bb0 <__avr32_f64_sub>
8002f15c:	08 98       	mov	r8,r4
8002f15e:	fa eb 00 04 	st.d	sp[4],r10
8002f162:	0a 99       	mov	r9,r5
8002f164:	08 9a       	mov	r10,r4
8002f166:	0a 9b       	mov	r11,r5
8002f168:	e0 a0 0c 38 	rcall	800309d8 <__avr32_f64_mul>
8002f16c:	e0 68 a4 d0 	mov	r8,42192
8002f170:	ea 18 72 be 	orh	r8,0x72be
8002f174:	14 92       	mov	r2,r10
8002f176:	16 93       	mov	r3,r11
8002f178:	e0 69 37 69 	mov	r9,14185
8002f17c:	ea 19 3e 66 	orh	r9,0x3e66
8002f180:	e0 a0 0c 2c 	rcall	800309d8 <__avr32_f64_mul>
8002f184:	e0 68 6b f1 	mov	r8,27633
8002f188:	ea 18 c5 d2 	orh	r8,0xc5d2
8002f18c:	e0 69 bd 41 	mov	r9,48449
8002f190:	ea 19 3e bb 	orh	r9,0x3ebb
8002f194:	e0 a0 0d 0e 	rcall	80030bb0 <__avr32_f64_sub>
8002f198:	14 98       	mov	r8,r10
8002f19a:	16 99       	mov	r9,r11
8002f19c:	04 9a       	mov	r10,r2
8002f19e:	06 9b       	mov	r11,r3
8002f1a0:	e0 a0 0c 1c 	rcall	800309d8 <__avr32_f64_mul>
8002f1a4:	e0 68 de 2c 	mov	r8,56876
8002f1a8:	ea 18 af 25 	orh	r8,0xaf25
8002f1ac:	e0 69 56 6a 	mov	r9,22122
8002f1b0:	ea 19 3f 11 	orh	r9,0x3f11
8002f1b4:	e0 a0 0d cc 	rcall	80030d4c <__avr32_f64_add>
8002f1b8:	14 98       	mov	r8,r10
8002f1ba:	16 99       	mov	r9,r11
8002f1bc:	04 9a       	mov	r10,r2
8002f1be:	06 9b       	mov	r11,r3
8002f1c0:	e0 a0 0c 0c 	rcall	800309d8 <__avr32_f64_mul>
8002f1c4:	e0 68 bd 93 	mov	r8,48531
8002f1c8:	ea 18 16 be 	orh	r8,0x16be
8002f1cc:	e0 69 c1 6c 	mov	r9,49516
8002f1d0:	ea 19 3f 66 	orh	r9,0x3f66
8002f1d4:	e0 a0 0c ee 	rcall	80030bb0 <__avr32_f64_sub>
8002f1d8:	14 98       	mov	r8,r10
8002f1da:	16 99       	mov	r9,r11
8002f1dc:	04 9a       	mov	r10,r2
8002f1de:	06 9b       	mov	r11,r3
8002f1e0:	e0 a0 0b fc 	rcall	800309d8 <__avr32_f64_mul>
8002f1e4:	e0 68 55 3e 	mov	r8,21822
8002f1e8:	ea 18 55 55 	orh	r8,0x5555
8002f1ec:	e0 69 55 55 	mov	r9,21845
8002f1f0:	ea 19 3f c5 	orh	r9,0x3fc5
8002f1f4:	e0 a0 0d ac 	rcall	80030d4c <__avr32_f64_add>
8002f1f8:	14 98       	mov	r8,r10
8002f1fa:	16 99       	mov	r9,r11
8002f1fc:	04 9a       	mov	r10,r2
8002f1fe:	06 9b       	mov	r11,r3
8002f200:	e0 a0 0b ec 	rcall	800309d8 <__avr32_f64_mul>
8002f204:	14 98       	mov	r8,r10
8002f206:	16 99       	mov	r9,r11
8002f208:	08 9a       	mov	r10,r4
8002f20a:	0a 9b       	mov	r11,r5
8002f20c:	e0 a0 0c d2 	rcall	80030bb0 <__avr32_f64_sub>
8002f210:	16 93       	mov	r3,r11
8002f212:	14 92       	mov	r2,r10
8002f214:	14 98       	mov	r8,r10
8002f216:	06 99       	mov	r9,r3
8002f218:	08 9a       	mov	r10,r4
8002f21a:	0a 9b       	mov	r11,r5
8002f21c:	e0 a0 0b de 	rcall	800309d8 <__avr32_f64_mul>
8002f220:	30 08       	mov	r8,0
8002f222:	14 90       	mov	r0,r10
8002f224:	16 91       	mov	r1,r11
8002f226:	04 9a       	mov	r10,r2
8002f228:	06 9b       	mov	r11,r3
8002f22a:	fc 19 40 00 	movh	r9,0x4000
8002f22e:	e0 a0 0c c1 	rcall	80030bb0 <__avr32_f64_sub>
8002f232:	14 98       	mov	r8,r10
8002f234:	16 99       	mov	r9,r11
8002f236:	00 9a       	mov	r10,r0
8002f238:	02 9b       	mov	r11,r1
8002f23a:	e0 a0 0f 15 	rcall	80031064 <__avr32_f64_div>
8002f23e:	fa e8 00 04 	ld.d	r8,sp[4]
8002f242:	14 92       	mov	r2,r10
8002f244:	16 93       	mov	r3,r11
8002f246:	08 9a       	mov	r10,r4
8002f248:	0a 9b       	mov	r11,r5
8002f24a:	e0 a0 0b c7 	rcall	800309d8 <__avr32_f64_mul>
8002f24e:	14 98       	mov	r8,r10
8002f250:	16 99       	mov	r9,r11
8002f252:	fa ea 00 04 	ld.d	r10,sp[4]
8002f256:	e0 a0 0d 7b 	rcall	80030d4c <__avr32_f64_add>
8002f25a:	14 98       	mov	r8,r10
8002f25c:	16 99       	mov	r9,r11
8002f25e:	04 9a       	mov	r10,r2
8002f260:	06 9b       	mov	r11,r3
8002f262:	e0 a0 0c a7 	rcall	80030bb0 <__avr32_f64_sub>
8002f266:	08 98       	mov	r8,r4
8002f268:	0a 99       	mov	r9,r5
8002f26a:	e0 a0 0c a3 	rcall	80030bb0 <__avr32_f64_sub>
8002f26e:	14 98       	mov	r8,r10
8002f270:	16 99       	mov	r9,r11
8002f272:	30 0a       	mov	r10,0
8002f274:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f278:	e0 a0 0c 9c 	rcall	80030bb0 <__avr32_f64_sub>
8002f27c:	ec 0c 15 14 	lsl	r12,r6,0x14
8002f280:	16 95       	mov	r5,r11
8002f282:	14 94       	mov	r4,r10
8002f284:	f8 05 00 08 	add	r8,r12,r5
8002f288:	f0 09 14 14 	asr	r9,r8,0x14
8002f28c:	58 09       	cp.w	r9,0
8002f28e:	e0 89 00 08 	brgt	8002f29e <__ieee754_pow+0xa76>
8002f292:	0c 9c       	mov	r12,r6
8002f294:	e0 a0 0b 28 	rcall	800308e4 <scalbn>
8002f298:	14 98       	mov	r8,r10
8002f29a:	16 99       	mov	r9,r11
8002f29c:	c0 48       	rjmp	8002f2a4 <__ieee754_pow+0xa7c>
8002f29e:	10 95       	mov	r5,r8
8002f2a0:	14 98       	mov	r8,r10
8002f2a2:	0a 99       	mov	r9,r5
8002f2a4:	fa ea 00 0c 	ld.d	r10,sp[12]
8002f2a8:	e0 a0 0b 98 	rcall	800309d8 <__avr32_f64_mul>
8002f2ac:	16 97       	mov	r7,r11
8002f2ae:	14 96       	mov	r6,r10
8002f2b0:	c0 78       	rjmp	8002f2be <__ieee754_pow+0xa96>
8002f2b2:	fc 17 3f f0 	movh	r7,0x3ff0
8002f2b6:	30 06       	mov	r6,0
8002f2b8:	c0 38       	rjmp	8002f2be <__ieee754_pow+0xa96>
8002f2ba:	30 07       	mov	r7,0
8002f2bc:	0e 96       	mov	r6,r7
8002f2be:	0e 9b       	mov	r11,r7
8002f2c0:	0c 9a       	mov	r10,r6
8002f2c2:	2f 2d       	sub	sp,-56
8002f2c4:	d8 32       	popm	r0-r7,pc
8002f2c6:	30 05       	mov	r5,0
8002f2c8:	fe 9f fb 2b 	bral	8002e91e <__ieee754_pow+0xf6>

8002f2cc <__ieee754_rem_pio2>:
8002f2cc:	d4 31       	pushm	r0-r7,lr
8002f2ce:	20 ad       	sub	sp,40
8002f2d0:	50 3b       	stdsp	sp[0xc],r11
8002f2d2:	18 96       	mov	r6,r12
8002f2d4:	14 98       	mov	r8,r10
8002f2d6:	16 99       	mov	r9,r11
8002f2d8:	14 92       	mov	r2,r10
8002f2da:	16 93       	mov	r3,r11
8002f2dc:	eb db c0 1f 	bfextu	r5,r11,0x0,0x1f
8002f2e0:	e0 6c 21 fb 	mov	r12,8699
8002f2e4:	ea 1c 3f e9 	orh	r12,0x3fe9
8002f2e8:	18 35       	cp.w	r5,r12
8002f2ea:	e0 89 00 0b 	brgt	8002f300 <__ieee754_rem_pio2+0x34>
8002f2ee:	ec e9 00 00 	st.d	r6[0],r8
8002f2f2:	30 07       	mov	r7,0
8002f2f4:	30 08       	mov	r8,0
8002f2f6:	30 09       	mov	r9,0
8002f2f8:	ec e9 00 08 	st.d	r6[8],r8
8002f2fc:	e0 8f 02 1a 	bral	8002f730 <__ieee754_rem_pio2+0x464>
8002f300:	e0 6c d9 7b 	mov	r12,55675
8002f304:	ea 1c 40 02 	orh	r12,0x4002
8002f308:	18 35       	cp.w	r5,r12
8002f30a:	e0 89 00 b6 	brgt	8002f476 <__ieee754_rem_pio2+0x1aa>
8002f30e:	58 0b       	cp.w	r11,0
8002f310:	e0 8a 00 59 	brle	8002f3c2 <__ieee754_rem_pio2+0xf6>
8002f314:	fc 18 54 40 	movh	r8,0x5440
8002f318:	e0 69 21 fb 	mov	r9,8699
8002f31c:	ea 19 3f f9 	orh	r9,0x3ff9
8002f320:	e0 a0 0c 48 	rcall	80030bb0 <__avr32_f64_sub>
8002f324:	e0 68 21 fb 	mov	r8,8699
8002f328:	ea 18 3f f9 	orh	r8,0x3ff9
8002f32c:	14 92       	mov	r2,r10
8002f32e:	16 93       	mov	r3,r11
8002f330:	10 35       	cp.w	r5,r8
8002f332:	c1 e0       	breq	8002f36e <__ieee754_rem_pio2+0xa2>
8002f334:	e0 68 63 31 	mov	r8,25393
8002f338:	ea 18 1a 62 	orh	r8,0x1a62
8002f33c:	e0 69 b4 61 	mov	r9,46177
8002f340:	ea 19 3d d0 	orh	r9,0x3dd0
8002f344:	e0 a0 0c 36 	rcall	80030bb0 <__avr32_f64_sub>
8002f348:	14 94       	mov	r4,r10
8002f34a:	16 95       	mov	r5,r11
8002f34c:	08 98       	mov	r8,r4
8002f34e:	0a 99       	mov	r9,r5
8002f350:	04 9a       	mov	r10,r2
8002f352:	06 9b       	mov	r11,r3
8002f354:	ec e5 00 00 	st.d	r6[0],r4
8002f358:	e0 a0 0c 2c 	rcall	80030bb0 <__avr32_f64_sub>
8002f35c:	e0 68 63 31 	mov	r8,25393
8002f360:	ea 18 1a 62 	orh	r8,0x1a62
8002f364:	e0 69 b4 61 	mov	r9,46177
8002f368:	ea 19 3d d0 	orh	r9,0x3dd0
8002f36c:	c2 78       	rjmp	8002f3ba <__ieee754_rem_pio2+0xee>
8002f36e:	fc 18 1a 60 	movh	r8,0x1a60
8002f372:	e0 69 b4 61 	mov	r9,46177
8002f376:	ea 19 3d d0 	orh	r9,0x3dd0
8002f37a:	e0 a0 0c 1b 	rcall	80030bb0 <__avr32_f64_sub>
8002f37e:	e0 68 70 73 	mov	r8,28787
8002f382:	ea 18 2e 03 	orh	r8,0x2e03
8002f386:	14 94       	mov	r4,r10
8002f388:	16 95       	mov	r5,r11
8002f38a:	e0 69 19 8a 	mov	r9,6538
8002f38e:	ea 19 3b a3 	orh	r9,0x3ba3
8002f392:	e0 a0 0c 0f 	rcall	80030bb0 <__avr32_f64_sub>
8002f396:	14 92       	mov	r2,r10
8002f398:	16 93       	mov	r3,r11
8002f39a:	04 98       	mov	r8,r2
8002f39c:	06 99       	mov	r9,r3
8002f39e:	08 9a       	mov	r10,r4
8002f3a0:	0a 9b       	mov	r11,r5
8002f3a2:	ec e3 00 00 	st.d	r6[0],r2
8002f3a6:	e0 a0 0c 05 	rcall	80030bb0 <__avr32_f64_sub>
8002f3aa:	e0 68 70 73 	mov	r8,28787
8002f3ae:	ea 18 2e 03 	orh	r8,0x2e03
8002f3b2:	e0 69 19 8a 	mov	r9,6538
8002f3b6:	ea 19 3b a3 	orh	r9,0x3ba3
8002f3ba:	30 17       	mov	r7,1
8002f3bc:	e0 a0 0b fa 	rcall	80030bb0 <__avr32_f64_sub>
8002f3c0:	c3 08       	rjmp	8002f420 <__ieee754_rem_pio2+0x154>
8002f3c2:	fc 18 54 40 	movh	r8,0x5440
8002f3c6:	e0 69 21 fb 	mov	r9,8699
8002f3ca:	ea 19 3f f9 	orh	r9,0x3ff9
8002f3ce:	e0 a0 0c bf 	rcall	80030d4c <__avr32_f64_add>
8002f3d2:	e0 6c 21 fb 	mov	r12,8699
8002f3d6:	ea 1c 3f f9 	orh	r12,0x3ff9
8002f3da:	14 92       	mov	r2,r10
8002f3dc:	16 93       	mov	r3,r11
8002f3de:	18 35       	cp.w	r5,r12
8002f3e0:	c2 40       	breq	8002f428 <__ieee754_rem_pio2+0x15c>
8002f3e2:	e0 68 63 31 	mov	r8,25393
8002f3e6:	ea 18 1a 62 	orh	r8,0x1a62
8002f3ea:	e0 69 b4 61 	mov	r9,46177
8002f3ee:	ea 19 3d d0 	orh	r9,0x3dd0
8002f3f2:	e0 a0 0c ad 	rcall	80030d4c <__avr32_f64_add>
8002f3f6:	14 94       	mov	r4,r10
8002f3f8:	16 95       	mov	r5,r11
8002f3fa:	08 98       	mov	r8,r4
8002f3fc:	0a 99       	mov	r9,r5
8002f3fe:	04 9a       	mov	r10,r2
8002f400:	06 9b       	mov	r11,r3
8002f402:	ec e5 00 00 	st.d	r6[0],r4
8002f406:	e0 a0 0b d5 	rcall	80030bb0 <__avr32_f64_sub>
8002f40a:	e0 68 63 31 	mov	r8,25393
8002f40e:	ea 18 1a 62 	orh	r8,0x1a62
8002f412:	e0 69 b4 61 	mov	r9,46177
8002f416:	ea 19 3d d0 	orh	r9,0x3dd0
8002f41a:	3f f7       	mov	r7,-1
8002f41c:	e0 a0 0c 98 	rcall	80030d4c <__avr32_f64_add>
8002f420:	ec eb 00 08 	st.d	r6[8],r10
8002f424:	e0 8f 01 86 	bral	8002f730 <__ieee754_rem_pio2+0x464>
8002f428:	fc 18 1a 60 	movh	r8,0x1a60
8002f42c:	e0 69 b4 61 	mov	r9,46177
8002f430:	ea 19 3d d0 	orh	r9,0x3dd0
8002f434:	e0 a0 0c 8c 	rcall	80030d4c <__avr32_f64_add>
8002f438:	e0 68 70 73 	mov	r8,28787
8002f43c:	ea 18 2e 03 	orh	r8,0x2e03
8002f440:	14 94       	mov	r4,r10
8002f442:	16 95       	mov	r5,r11
8002f444:	e0 69 19 8a 	mov	r9,6538
8002f448:	ea 19 3b a3 	orh	r9,0x3ba3
8002f44c:	e0 a0 0c 80 	rcall	80030d4c <__avr32_f64_add>
8002f450:	14 92       	mov	r2,r10
8002f452:	16 93       	mov	r3,r11
8002f454:	04 98       	mov	r8,r2
8002f456:	06 99       	mov	r9,r3
8002f458:	08 9a       	mov	r10,r4
8002f45a:	0a 9b       	mov	r11,r5
8002f45c:	ec e3 00 00 	st.d	r6[0],r2
8002f460:	e0 a0 0b a8 	rcall	80030bb0 <__avr32_f64_sub>
8002f464:	e0 68 70 73 	mov	r8,28787
8002f468:	ea 18 2e 03 	orh	r8,0x2e03
8002f46c:	e0 69 19 8a 	mov	r9,6538
8002f470:	ea 19 3b a3 	orh	r9,0x3ba3
8002f474:	cd 3b       	rjmp	8002f41a <__ieee754_rem_pio2+0x14e>
8002f476:	e0 6c 21 fb 	mov	r12,8699
8002f47a:	ea 1c 41 39 	orh	r12,0x4139
8002f47e:	18 35       	cp.w	r5,r12
8002f480:	e0 89 00 f4 	brgt	8002f668 <__ieee754_rem_pio2+0x39c>
8002f484:	e0 a0 08 f4 	rcall	8003066c <fabs>
8002f488:	e0 68 c8 83 	mov	r8,51331
8002f48c:	ea 18 6d c9 	orh	r8,0x6dc9
8002f490:	14 92       	mov	r2,r10
8002f492:	16 93       	mov	r3,r11
8002f494:	e0 69 5f 30 	mov	r9,24368
8002f498:	ea 19 3f e4 	orh	r9,0x3fe4
8002f49c:	e0 a0 0a 9e 	rcall	800309d8 <__avr32_f64_mul>
8002f4a0:	30 08       	mov	r8,0
8002f4a2:	fc 19 3f e0 	movh	r9,0x3fe0
8002f4a6:	e0 a0 0c 53 	rcall	80030d4c <__avr32_f64_add>
8002f4aa:	e0 a0 0c db 	rcall	80030e60 <__avr32_f64_to_s32>
8002f4ae:	18 97       	mov	r7,r12
8002f4b0:	e0 a0 0c ef 	rcall	80030e8e <__avr32_s32_to_f64>
8002f4b4:	fc 18 54 40 	movh	r8,0x5440
8002f4b8:	e0 69 21 fb 	mov	r9,8699
8002f4bc:	ea 19 bf f9 	orh	r9,0xbff9
8002f4c0:	fa eb 00 04 	st.d	sp[4],r10
8002f4c4:	e0 a0 0a 8a 	rcall	800309d8 <__avr32_f64_mul>
8002f4c8:	14 98       	mov	r8,r10
8002f4ca:	16 99       	mov	r9,r11
8002f4cc:	04 9a       	mov	r10,r2
8002f4ce:	06 9b       	mov	r11,r3
8002f4d0:	e0 a0 0c 3e 	rcall	80030d4c <__avr32_f64_add>
8002f4d4:	e0 68 63 31 	mov	r8,25393
8002f4d8:	ea 18 1a 62 	orh	r8,0x1a62
8002f4dc:	14 92       	mov	r2,r10
8002f4de:	16 93       	mov	r3,r11
8002f4e0:	e0 69 b4 61 	mov	r9,46177
8002f4e4:	ea 19 3d d0 	orh	r9,0x3dd0
8002f4e8:	fa ea 00 04 	ld.d	r10,sp[4]
8002f4ec:	e0 a0 0a 76 	rcall	800309d8 <__avr32_f64_mul>
8002f4f0:	14 90       	mov	r0,r10
8002f4f2:	16 91       	mov	r1,r11
8002f4f4:	59 f7       	cp.w	r7,31
8002f4f6:	e0 89 00 0a 	brgt	8002f50a <__ieee754_rem_pio2+0x23e>
8002f4fa:	ee c9 00 01 	sub	r9,r7,1
8002f4fe:	4d a8       	lddpc	r8,8002f664 <__ieee754_rem_pio2+0x398>
8002f500:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8002f504:	10 35       	cp.w	r5,r8
8002f506:	e0 81 00 8b 	brne	8002f61c <__ieee754_rem_pio2+0x350>
8002f50a:	00 98       	mov	r8,r0
8002f50c:	02 99       	mov	r9,r1
8002f50e:	04 9a       	mov	r10,r2
8002f510:	06 9b       	mov	r11,r3
8002f512:	e0 a0 0b 4f 	rcall	80030bb0 <__avr32_f64_sub>
8002f516:	ec eb 00 00 	st.d	r6[0],r10
8002f51a:	ea 0c 14 14 	asr	r12,r5,0x14
8002f51e:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
8002f522:	f8 0b 01 0b 	sub	r11,r12,r11
8002f526:	59 0b       	cp.w	r11,16
8002f528:	e0 8a 00 82 	brle	8002f62c <__ieee754_rem_pio2+0x360>
8002f52c:	50 0c       	stdsp	sp[0x0],r12
8002f52e:	fc 18 1a 60 	movh	r8,0x1a60
8002f532:	e0 69 b4 61 	mov	r9,46177
8002f536:	ea 19 3d d0 	orh	r9,0x3dd0
8002f53a:	fa ea 00 04 	ld.d	r10,sp[4]
8002f53e:	e0 a0 0a 4d 	rcall	800309d8 <__avr32_f64_mul>
8002f542:	16 91       	mov	r1,r11
8002f544:	14 90       	mov	r0,r10
8002f546:	14 98       	mov	r8,r10
8002f548:	02 99       	mov	r9,r1
8002f54a:	04 9a       	mov	r10,r2
8002f54c:	06 9b       	mov	r11,r3
8002f54e:	e0 a0 0b 31 	rcall	80030bb0 <__avr32_f64_sub>
8002f552:	16 95       	mov	r5,r11
8002f554:	14 98       	mov	r8,r10
8002f556:	14 94       	mov	r4,r10
8002f558:	0a 99       	mov	r9,r5
8002f55a:	04 9a       	mov	r10,r2
8002f55c:	06 9b       	mov	r11,r3
8002f55e:	e0 a0 0b 29 	rcall	80030bb0 <__avr32_f64_sub>
8002f562:	00 98       	mov	r8,r0
8002f564:	02 99       	mov	r9,r1
8002f566:	e0 a0 0b 25 	rcall	80030bb0 <__avr32_f64_sub>
8002f56a:	e0 68 70 73 	mov	r8,28787
8002f56e:	ea 18 2e 03 	orh	r8,0x2e03
8002f572:	14 92       	mov	r2,r10
8002f574:	16 93       	mov	r3,r11
8002f576:	e0 69 19 8a 	mov	r9,6538
8002f57a:	ea 19 3b a3 	orh	r9,0x3ba3
8002f57e:	fa ea 00 04 	ld.d	r10,sp[4]
8002f582:	e0 a0 0a 2b 	rcall	800309d8 <__avr32_f64_mul>
8002f586:	04 98       	mov	r8,r2
8002f588:	06 99       	mov	r9,r3
8002f58a:	e0 a0 0b 13 	rcall	80030bb0 <__avr32_f64_sub>
8002f58e:	16 91       	mov	r1,r11
8002f590:	14 98       	mov	r8,r10
8002f592:	14 90       	mov	r0,r10
8002f594:	02 99       	mov	r9,r1
8002f596:	08 9a       	mov	r10,r4
8002f598:	0a 9b       	mov	r11,r5
8002f59a:	e0 a0 0b 0b 	rcall	80030bb0 <__avr32_f64_sub>
8002f59e:	ec eb 00 00 	st.d	r6[0],r10
8002f5a2:	40 0c       	lddsp	r12,sp[0x0]
8002f5a4:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
8002f5a8:	16 1c       	sub	r12,r11
8002f5aa:	e0 4c 00 31 	cp.w	r12,49
8002f5ae:	e0 89 00 05 	brgt	8002f5b8 <__ieee754_rem_pio2+0x2ec>
8002f5b2:	08 92       	mov	r2,r4
8002f5b4:	0a 93       	mov	r3,r5
8002f5b6:	c3 b8       	rjmp	8002f62c <__ieee754_rem_pio2+0x360>
8002f5b8:	fc 18 2e 00 	movh	r8,0x2e00
8002f5bc:	e0 69 19 8a 	mov	r9,6538
8002f5c0:	ea 19 3b a3 	orh	r9,0x3ba3
8002f5c4:	fa ea 00 04 	ld.d	r10,sp[4]
8002f5c8:	e0 a0 0a 08 	rcall	800309d8 <__avr32_f64_mul>
8002f5cc:	16 91       	mov	r1,r11
8002f5ce:	14 90       	mov	r0,r10
8002f5d0:	14 98       	mov	r8,r10
8002f5d2:	02 99       	mov	r9,r1
8002f5d4:	08 9a       	mov	r10,r4
8002f5d6:	0a 9b       	mov	r11,r5
8002f5d8:	e0 a0 0a ec 	rcall	80030bb0 <__avr32_f64_sub>
8002f5dc:	14 98       	mov	r8,r10
8002f5de:	16 93       	mov	r3,r11
8002f5e0:	14 92       	mov	r2,r10
8002f5e2:	06 99       	mov	r9,r3
8002f5e4:	08 9a       	mov	r10,r4
8002f5e6:	0a 9b       	mov	r11,r5
8002f5e8:	e0 a0 0a e4 	rcall	80030bb0 <__avr32_f64_sub>
8002f5ec:	00 98       	mov	r8,r0
8002f5ee:	02 99       	mov	r9,r1
8002f5f0:	e0 a0 0a e0 	rcall	80030bb0 <__avr32_f64_sub>
8002f5f4:	e0 68 49 c1 	mov	r8,18881
8002f5f8:	ea 18 25 20 	orh	r8,0x2520
8002f5fc:	14 94       	mov	r4,r10
8002f5fe:	16 95       	mov	r5,r11
8002f600:	e0 69 83 9a 	mov	r9,33690
8002f604:	ea 19 39 7b 	orh	r9,0x397b
8002f608:	fa ea 00 04 	ld.d	r10,sp[4]
8002f60c:	e0 a0 09 e6 	rcall	800309d8 <__avr32_f64_mul>
8002f610:	08 98       	mov	r8,r4
8002f612:	0a 99       	mov	r9,r5
8002f614:	e0 a0 0a ce 	rcall	80030bb0 <__avr32_f64_sub>
8002f618:	14 90       	mov	r0,r10
8002f61a:	16 91       	mov	r1,r11
8002f61c:	00 98       	mov	r8,r0
8002f61e:	02 99       	mov	r9,r1
8002f620:	04 9a       	mov	r10,r2
8002f622:	06 9b       	mov	r11,r3
8002f624:	e0 a0 0a c6 	rcall	80030bb0 <__avr32_f64_sub>
8002f628:	ec eb 00 00 	st.d	r6[0],r10
8002f62c:	ec e8 00 00 	ld.d	r8,r6[0]
8002f630:	04 9a       	mov	r10,r2
8002f632:	06 9b       	mov	r11,r3
8002f634:	e0 a0 0a be 	rcall	80030bb0 <__avr32_f64_sub>
8002f638:	00 98       	mov	r8,r0
8002f63a:	ec c5 ff f8 	sub	r5,r6,-8
8002f63e:	02 99       	mov	r9,r1
8002f640:	e0 a0 0a b8 	rcall	80030bb0 <__avr32_f64_sub>
8002f644:	ea eb 00 00 	st.d	r5[0],r10
8002f648:	40 38       	lddsp	r8,sp[0xc]
8002f64a:	58 08       	cp.w	r8,0
8002f64c:	c7 24       	brge	8002f730 <__ieee754_rem_pio2+0x464>
8002f64e:	6c 08       	ld.w	r8,r6[0x0]
8002f650:	ee 18 80 00 	eorh	r8,0x8000
8002f654:	8d 08       	st.w	r6[0x0],r8
8002f656:	5c 37       	neg	r7
8002f658:	6a 08       	ld.w	r8,r5[0x0]
8002f65a:	ee 18 80 00 	eorh	r8,0x8000
8002f65e:	8b 08       	st.w	r5[0x0],r8
8002f660:	c6 88       	rjmp	8002f730 <__ieee754_rem_pio2+0x464>
8002f662:	d7 03       	nop
8002f664:	80 03       	ld.sh	r3,r0[0x0]
8002f666:	1f b8       	ld.ub	r8,pc[0x3]
8002f668:	e0 6c ff ff 	mov	r12,65535
8002f66c:	ea 1c 7f ef 	orh	r12,0x7fef
8002f670:	18 35       	cp.w	r5,r12
8002f672:	e0 8a 00 08 	brle	8002f682 <__ieee754_rem_pio2+0x3b6>
8002f676:	30 07       	mov	r7,0
8002f678:	e0 a0 0a 9c 	rcall	80030bb0 <__avr32_f64_sub>
8002f67c:	ec eb 00 00 	st.d	r6[0],r10
8002f680:	cd 0a       	rjmp	8002f420 <__ieee754_rem_pio2+0x154>
8002f682:	ea 03 14 14 	asr	r3,r5,0x14
8002f686:	e6 c3 04 16 	sub	r3,r3,1046
8002f68a:	e6 08 15 14 	lsl	r8,r3,0x14
8002f68e:	ea 08 01 01 	sub	r1,r5,r8
8002f692:	02 9b       	mov	r11,r1
8002f694:	e0 a0 0b e6 	rcall	80030e60 <__avr32_f64_to_s32>
8002f698:	e0 a0 0b fb 	rcall	80030e8e <__avr32_s32_to_f64>
8002f69c:	14 94       	mov	r4,r10
8002f69e:	16 95       	mov	r5,r11
8002f6a0:	08 98       	mov	r8,r4
8002f6a2:	0a 99       	mov	r9,r5
8002f6a4:	fa e5 00 10 	st.d	sp[16],r4
8002f6a8:	02 9b       	mov	r11,r1
8002f6aa:	04 9a       	mov	r10,r2
8002f6ac:	e0 a0 0a 82 	rcall	80030bb0 <__avr32_f64_sub>
8002f6b0:	30 08       	mov	r8,0
8002f6b2:	fc 19 41 70 	movh	r9,0x4170
8002f6b6:	e0 a0 09 91 	rcall	800309d8 <__avr32_f64_mul>
8002f6ba:	14 90       	mov	r0,r10
8002f6bc:	16 91       	mov	r1,r11
8002f6be:	e0 a0 0b d1 	rcall	80030e60 <__avr32_f64_to_s32>
8002f6c2:	e0 a0 0b e6 	rcall	80030e8e <__avr32_s32_to_f64>
8002f6c6:	16 95       	mov	r5,r11
8002f6c8:	14 94       	mov	r4,r10
8002f6ca:	0a 99       	mov	r9,r5
8002f6cc:	08 98       	mov	r8,r4
8002f6ce:	fa e5 00 18 	st.d	sp[24],r4
8002f6d2:	00 9a       	mov	r10,r0
8002f6d4:	02 9b       	mov	r11,r1
8002f6d6:	e0 a0 0a 6d 	rcall	80030bb0 <__avr32_f64_sub>
8002f6da:	30 08       	mov	r8,0
8002f6dc:	fc 19 41 70 	movh	r9,0x4170
8002f6e0:	30 35       	mov	r5,3
8002f6e2:	e0 a0 09 7b 	rcall	800309d8 <__avr32_f64_mul>
8002f6e6:	fa c7 ff d8 	sub	r7,sp,-40
8002f6ea:	af 2b       	st.d	--r7,r10
8002f6ec:	ee ea 00 00 	ld.d	r10,r7[0]
8002f6f0:	0a 91       	mov	r1,r5
8002f6f2:	20 87       	sub	r7,8
8002f6f4:	20 15       	sub	r5,1
8002f6f6:	30 08       	mov	r8,0
8002f6f8:	30 09       	mov	r9,0
8002f6fa:	e0 a0 0c 3a 	rcall	80030f6e <__avr32_f64_cmp_eq>
8002f6fe:	cf 71       	brne	8002f6ec <__ieee754_rem_pio2+0x420>
8002f700:	48 e8       	lddpc	r8,8002f738 <__ieee754_rem_pio2+0x46c>
8002f702:	02 99       	mov	r9,r1
8002f704:	1a d8       	st.w	--sp,r8
8002f706:	06 9a       	mov	r10,r3
8002f708:	30 28       	mov	r8,2
8002f70a:	fa cc ff ec 	sub	r12,sp,-20
8002f70e:	0c 9b       	mov	r11,r6
8002f710:	cd 0d       	rcall	8002fab0 <__kernel_rem_pio2>
8002f712:	2f fd       	sub	sp,-4
8002f714:	18 97       	mov	r7,r12
8002f716:	40 38       	lddsp	r8,sp[0xc]
8002f718:	58 08       	cp.w	r8,0
8002f71a:	c0 b4       	brge	8002f730 <__ieee754_rem_pio2+0x464>
8002f71c:	6c 08       	ld.w	r8,r6[0x0]
8002f71e:	ee 18 80 00 	eorh	r8,0x8000
8002f722:	8d 08       	st.w	r6[0x0],r8
8002f724:	5c 37       	neg	r7
8002f726:	2f 86       	sub	r6,-8
8002f728:	6c 08       	ld.w	r8,r6[0x0]
8002f72a:	ee 18 80 00 	eorh	r8,0x8000
8002f72e:	8d 08       	st.w	r6[0x0],r8
8002f730:	0e 9c       	mov	r12,r7
8002f732:	2f 6d       	sub	sp,-40
8002f734:	d8 32       	popm	r0-r7,pc
8002f736:	d7 03       	nop
8002f738:	80 03       	ld.sh	r3,r0[0x0]
8002f73a:	20 38       	sub	r8,3

8002f73c <__ieee754_sqrt>:
8002f73c:	d4 31       	pushm	r0-r7,lr
8002f73e:	fc 1e 7f f0 	movh	lr,0x7ff0
8002f742:	16 9c       	mov	r12,r11
8002f744:	14 96       	mov	r6,r10
8002f746:	16 97       	mov	r7,r11
8002f748:	14 94       	mov	r4,r10
8002f74a:	16 95       	mov	r5,r11
8002f74c:	16 99       	mov	r9,r11
8002f74e:	14 98       	mov	r8,r10
8002f750:	e6 1c 7f f0 	andh	r12,0x7ff0,COH
8002f754:	1c 3c       	cp.w	r12,lr
8002f756:	c0 c1       	brne	8002f76e <__ieee754_sqrt+0x32>
8002f758:	14 98       	mov	r8,r10
8002f75a:	16 99       	mov	r9,r11
8002f75c:	e0 a0 09 3e 	rcall	800309d8 <__avr32_f64_mul>
8002f760:	14 98       	mov	r8,r10
8002f762:	16 99       	mov	r9,r11
8002f764:	0c 9a       	mov	r10,r6
8002f766:	0e 9b       	mov	r11,r7
8002f768:	e0 a0 0a f2 	rcall	80030d4c <__avr32_f64_add>
8002f76c:	c1 38       	rjmp	8002f792 <__ieee754_sqrt+0x56>
8002f76e:	58 0b       	cp.w	r11,0
8002f770:	e0 89 00 14 	brgt	8002f798 <__ieee754_sqrt+0x5c>
8002f774:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8002f778:	14 4c       	or	r12,r10
8002f77a:	e0 80 00 a3 	breq	8002f8c0 <__ieee754_sqrt+0x184>
8002f77e:	58 0b       	cp.w	r11,0
8002f780:	c0 c0       	breq	8002f798 <__ieee754_sqrt+0x5c>
8002f782:	14 98       	mov	r8,r10
8002f784:	16 99       	mov	r9,r11
8002f786:	e0 a0 0a 15 	rcall	80030bb0 <__avr32_f64_sub>
8002f78a:	14 98       	mov	r8,r10
8002f78c:	16 99       	mov	r9,r11
8002f78e:	e0 a0 0c 6b 	rcall	80031064 <__avr32_f64_div>
8002f792:	14 96       	mov	r6,r10
8002f794:	16 97       	mov	r7,r11
8002f796:	c9 58       	rjmp	8002f8c0 <__ieee754_sqrt+0x184>
8002f798:	f2 0a 14 14 	asr	r10,r9,0x14
8002f79c:	c0 60       	breq	8002f7a8 <__ieee754_sqrt+0x6c>
8002f79e:	c1 88       	rjmp	8002f7ce <__ieee754_sqrt+0x92>
8002f7a0:	f0 09 16 0b 	lsr	r9,r8,0xb
8002f7a4:	21 5a       	sub	r10,21
8002f7a6:	b5 78       	lsl	r8,0x15
8002f7a8:	58 09       	cp.w	r9,0
8002f7aa:	cf b0       	breq	8002f7a0 <__ieee754_sqrt+0x64>
8002f7ac:	30 0b       	mov	r11,0
8002f7ae:	c0 38       	rjmp	8002f7b4 <__ieee754_sqrt+0x78>
8002f7b0:	a1 79       	lsl	r9,0x1
8002f7b2:	2f fb       	sub	r11,-1
8002f7b4:	ed b9 00 14 	bld	r9,0x14
8002f7b8:	cf c1       	brne	8002f7b0 <__ieee754_sqrt+0x74>
8002f7ba:	2f fa       	sub	r10,-1
8002f7bc:	f6 0c 11 20 	rsub	r12,r11,32
8002f7c0:	16 1a       	sub	r10,r11
8002f7c2:	f0 0c 0a 4c 	lsr	r12,r8,r12
8002f7c6:	f0 0b 09 48 	lsl	r8,r8,r11
8002f7ca:	f9 e9 10 09 	or	r9,r12,r9
8002f7ce:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8002f7d2:	f4 c6 03 ff 	sub	r6,r10,1023
8002f7d6:	b5 a9       	sbr	r9,0x14
8002f7d8:	ed b6 00 00 	bld	r6,0x0
8002f7dc:	c0 61       	brne	8002f7e8 <__ieee754_sqrt+0xac>
8002f7de:	f0 0a 16 1f 	lsr	r10,r8,0x1f
8002f7e2:	a1 78       	lsl	r8,0x1
8002f7e4:	f4 09 00 19 	add	r9,r10,r9<<0x1
8002f7e8:	30 07       	mov	r7,0
8002f7ea:	f0 0a 15 01 	lsl	r10,r8,0x1
8002f7ee:	0e 9c       	mov	r12,r7
8002f7f0:	bf 98       	lsr	r8,0x1f
8002f7f2:	fc 1b 00 20 	movh	r11,0x20
8002f7f6:	f0 09 00 18 	add	r8,r8,r9<<0x1
8002f7fa:	0e 99       	mov	r9,r7
8002f7fc:	f2 0b 00 0e 	add	lr,r9,r11
8002f800:	2f f7       	sub	r7,-1
8002f802:	10 3e       	cp.w	lr,r8
8002f804:	f1 de ea 18 	suble	r8,r8,lr
8002f808:	f9 db ea 0c 	addle	r12,r12,r11
8002f80c:	fd db ea 09 	addle	r9,lr,r11
8002f810:	f4 0e 16 1f 	lsr	lr,r10,0x1f
8002f814:	a1 9b       	lsr	r11,0x1
8002f816:	fc 08 00 18 	add	r8,lr,r8<<0x1
8002f81a:	a1 7a       	lsl	r10,0x1
8002f81c:	59 67       	cp.w	r7,22
8002f81e:	ce f1       	brne	8002f7fc <__ieee754_sqrt+0xc0>
8002f820:	30 07       	mov	r7,0
8002f822:	fc 15 80 00 	movh	r5,0x8000
8002f826:	0e 9b       	mov	r11,r7
8002f828:	0e 94       	mov	r4,r7
8002f82a:	0e 92       	mov	r2,r7
8002f82c:	ea 04 00 0e 	add	lr,r5,r4
8002f830:	10 39       	cp.w	r9,r8
8002f832:	c0 95       	brlt	8002f844 <__ieee754_sqrt+0x108>
8002f834:	5f 03       	sreq	r3
8002f836:	14 3e       	cp.w	lr,r10
8002f838:	5f 81       	srls	r1
8002f83a:	e3 e3 00 03 	and	r3,r1,r3
8002f83e:	e4 03 18 00 	cp.b	r3,r2
8002f842:	c1 70       	breq	8002f870 <__ieee754_sqrt+0x134>
8002f844:	1c 93       	mov	r3,lr
8002f846:	fc 05 00 04 	add	r4,lr,r5
8002f84a:	e6 13 80 00 	andh	r3,0x8000,COH
8002f84e:	fc 11 80 00 	movh	r1,0x8000
8002f852:	02 33       	cp.w	r3,r1
8002f854:	c0 61       	brne	8002f860 <__ieee754_sqrt+0x124>
8002f856:	58 04       	cp.w	r4,0
8002f858:	c0 45       	brlt	8002f860 <__ieee754_sqrt+0x124>
8002f85a:	f2 c3 ff ff 	sub	r3,r9,-1
8002f85e:	c0 28       	rjmp	8002f862 <__ieee754_sqrt+0x126>
8002f860:	12 93       	mov	r3,r9
8002f862:	12 18       	sub	r8,r9
8002f864:	0a 0b       	add	r11,r5
8002f866:	1c 3a       	cp.w	r10,lr
8002f868:	f7 b8 03 01 	sublo	r8,1
8002f86c:	06 99       	mov	r9,r3
8002f86e:	1c 1a       	sub	r10,lr
8002f870:	f4 0e 16 1f 	lsr	lr,r10,0x1f
8002f874:	a1 95       	lsr	r5,0x1
8002f876:	2f f7       	sub	r7,-1
8002f878:	fc 08 00 18 	add	r8,lr,r8<<0x1
8002f87c:	a1 7a       	lsl	r10,0x1
8002f87e:	e0 47 00 20 	cp.w	r7,32
8002f882:	cd 51       	brne	8002f82c <__ieee754_sqrt+0xf0>
8002f884:	14 48       	or	r8,r10
8002f886:	c0 a0       	breq	8002f89a <__ieee754_sqrt+0x15e>
8002f888:	f1 db c0 01 	bfextu	r8,r11,0x0,0x1
8002f88c:	5b fb       	cp.w	r11,-1
8002f88e:	f7 bc 00 ff 	subeq	r12,-1
8002f892:	f9 bb 00 00 	moveq	r11,0
8002f896:	f1 db e1 0b 	addne	r11,r8,r11
8002f89a:	a1 9b       	lsr	r11,0x1
8002f89c:	16 99       	mov	r9,r11
8002f89e:	bf b9       	sbr	r9,0x1f
8002f8a0:	ec 0a 14 01 	asr	r10,r6,0x1
8002f8a4:	f8 08 14 01 	asr	r8,r12,0x1
8002f8a8:	b5 6a       	lsl	r10,0x14
8002f8aa:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8002f8ae:	f2 0b 17 10 	movne	r11,r9
8002f8b2:	fc 19 3f e0 	movh	r9,0x3fe0
8002f8b6:	16 96       	mov	r6,r11
8002f8b8:	12 0a       	add	r10,r9
8002f8ba:	f4 08 00 08 	add	r8,r10,r8
8002f8be:	10 97       	mov	r7,r8
8002f8c0:	0c 9a       	mov	r10,r6
8002f8c2:	0e 9b       	mov	r11,r7
8002f8c4:	d8 32       	popm	r0-r7,pc
8002f8c6:	d7 03       	nop

8002f8c8 <__kernel_cos>:
8002f8c8:	d4 31       	pushm	r0-r7,lr
8002f8ca:	20 6d       	sub	sp,24
8002f8cc:	fa e9 00 08 	st.d	sp[8],r8
8002f8d0:	14 92       	mov	r2,r10
8002f8d2:	16 93       	mov	r3,r11
8002f8d4:	14 96       	mov	r6,r10
8002f8d6:	ef db c0 1f 	bfextu	r7,r11,0x0,0x1f
8002f8da:	e0 69 ff ff 	mov	r9,65535
8002f8de:	ea 19 3e 3f 	orh	r9,0x3e3f
8002f8e2:	12 37       	cp.w	r7,r9
8002f8e4:	e0 89 00 09 	brgt	8002f8f6 <__kernel_cos+0x2e>
8002f8e8:	e0 a0 0a bc 	rcall	80030e60 <__avr32_f64_to_s32>
8002f8ec:	c0 51       	brne	8002f8f6 <__kernel_cos+0x2e>
8002f8ee:	30 0a       	mov	r10,0
8002f8f0:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f8f4:	cd b8       	rjmp	8002faaa <__kernel_cos+0x1e2>
8002f8f6:	04 98       	mov	r8,r2
8002f8f8:	06 99       	mov	r9,r3
8002f8fa:	04 9a       	mov	r10,r2
8002f8fc:	06 9b       	mov	r11,r3
8002f8fe:	e0 a0 08 6d 	rcall	800309d8 <__avr32_f64_mul>
8002f902:	e0 68 38 d4 	mov	r8,14548
8002f906:	ea 18 be 88 	orh	r8,0xbe88
8002f90a:	14 94       	mov	r4,r10
8002f90c:	16 95       	mov	r5,r11
8002f90e:	e0 69 fa e9 	mov	r9,64233
8002f912:	ea 19 bd a8 	orh	r9,0xbda8
8002f916:	e0 a0 08 61 	rcall	800309d8 <__avr32_f64_mul>
8002f91a:	e0 68 b1 c4 	mov	r8,45508
8002f91e:	ea 18 bd b4 	orh	r8,0xbdb4
8002f922:	e0 69 ee 9e 	mov	r9,61086
8002f926:	ea 19 3e 21 	orh	r9,0x3e21
8002f92a:	e0 a0 0a 11 	rcall	80030d4c <__avr32_f64_add>
8002f92e:	14 98       	mov	r8,r10
8002f930:	16 99       	mov	r9,r11
8002f932:	08 9a       	mov	r10,r4
8002f934:	0a 9b       	mov	r11,r5
8002f936:	e0 a0 08 51 	rcall	800309d8 <__avr32_f64_mul>
8002f93a:	e0 68 52 ad 	mov	r8,21165
8002f93e:	ea 18 80 9c 	orh	r8,0x809c
8002f942:	e0 69 7e 4f 	mov	r9,32335
8002f946:	ea 19 3e 92 	orh	r9,0x3e92
8002f94a:	e0 a0 09 33 	rcall	80030bb0 <__avr32_f64_sub>
8002f94e:	14 98       	mov	r8,r10
8002f950:	16 99       	mov	r9,r11
8002f952:	08 9a       	mov	r10,r4
8002f954:	0a 9b       	mov	r11,r5
8002f956:	e0 a0 08 41 	rcall	800309d8 <__avr32_f64_mul>
8002f95a:	e0 68 15 90 	mov	r8,5520
8002f95e:	ea 18 19 cb 	orh	r8,0x19cb
8002f962:	e0 69 01 a0 	mov	r9,416
8002f966:	ea 19 3e fa 	orh	r9,0x3efa
8002f96a:	e0 a0 09 f1 	rcall	80030d4c <__avr32_f64_add>
8002f96e:	14 98       	mov	r8,r10
8002f970:	16 99       	mov	r9,r11
8002f972:	08 9a       	mov	r10,r4
8002f974:	0a 9b       	mov	r11,r5
8002f976:	e0 a0 08 31 	rcall	800309d8 <__avr32_f64_mul>
8002f97a:	e0 68 51 77 	mov	r8,20855
8002f97e:	ea 18 16 c1 	orh	r8,0x16c1
8002f982:	e0 69 c1 6c 	mov	r9,49516
8002f986:	ea 19 3f 56 	orh	r9,0x3f56
8002f98a:	e0 a0 09 13 	rcall	80030bb0 <__avr32_f64_sub>
8002f98e:	14 98       	mov	r8,r10
8002f990:	16 99       	mov	r9,r11
8002f992:	08 9a       	mov	r10,r4
8002f994:	0a 9b       	mov	r11,r5
8002f996:	e0 a0 08 21 	rcall	800309d8 <__avr32_f64_mul>
8002f99a:	e0 68 55 4c 	mov	r8,21836
8002f99e:	ea 18 55 55 	orh	r8,0x5555
8002f9a2:	e0 69 55 55 	mov	r9,21845
8002f9a6:	ea 19 3f a5 	orh	r9,0x3fa5
8002f9aa:	e0 a0 09 d1 	rcall	80030d4c <__avr32_f64_add>
8002f9ae:	14 98       	mov	r8,r10
8002f9b0:	16 99       	mov	r9,r11
8002f9b2:	08 9a       	mov	r10,r4
8002f9b4:	0a 9b       	mov	r11,r5
8002f9b6:	e0 a0 08 11 	rcall	800309d8 <__avr32_f64_mul>
8002f9ba:	fa eb 00 00 	st.d	sp[0],r10
8002f9be:	e0 68 33 32 	mov	r8,13106
8002f9c2:	ea 18 3f d3 	orh	r8,0x3fd3
8002f9c6:	10 37       	cp.w	r7,r8
8002f9c8:	e0 89 00 2b 	brgt	8002fa1e <__kernel_cos+0x156>
8002f9cc:	30 08       	mov	r8,0
8002f9ce:	fc 19 3f e0 	movh	r9,0x3fe0
8002f9d2:	08 9a       	mov	r10,r4
8002f9d4:	0a 9b       	mov	r11,r5
8002f9d6:	e0 a0 08 01 	rcall	800309d8 <__avr32_f64_mul>
8002f9da:	fa e8 00 00 	ld.d	r8,sp[0]
8002f9de:	14 90       	mov	r0,r10
8002f9e0:	16 91       	mov	r1,r11
8002f9e2:	08 9a       	mov	r10,r4
8002f9e4:	0a 9b       	mov	r11,r5
8002f9e6:	e0 a0 07 f9 	rcall	800309d8 <__avr32_f64_mul>
8002f9ea:	fa e8 00 08 	ld.d	r8,sp[8]
8002f9ee:	16 97       	mov	r7,r11
8002f9f0:	14 96       	mov	r6,r10
8002f9f2:	06 9b       	mov	r11,r3
8002f9f4:	04 9a       	mov	r10,r2
8002f9f6:	e0 a0 07 f1 	rcall	800309d8 <__avr32_f64_mul>
8002f9fa:	14 98       	mov	r8,r10
8002f9fc:	16 99       	mov	r9,r11
8002f9fe:	0c 9a       	mov	r10,r6
8002fa00:	0e 9b       	mov	r11,r7
8002fa02:	e0 a0 08 d7 	rcall	80030bb0 <__avr32_f64_sub>
8002fa06:	14 98       	mov	r8,r10
8002fa08:	16 99       	mov	r9,r11
8002fa0a:	00 9a       	mov	r10,r0
8002fa0c:	02 9b       	mov	r11,r1
8002fa0e:	e0 a0 08 d1 	rcall	80030bb0 <__avr32_f64_sub>
8002fa12:	14 98       	mov	r8,r10
8002fa14:	16 99       	mov	r9,r11
8002fa16:	30 0a       	mov	r10,0
8002fa18:	fc 1b 3f f0 	movh	r11,0x3ff0
8002fa1c:	c4 58       	rjmp	8002faa6 <__kernel_cos+0x1de>
8002fa1e:	fc 19 3f e9 	movh	r9,0x3fe9
8002fa22:	12 37       	cp.w	r7,r9
8002fa24:	e0 8a 00 06 	brle	8002fa30 <__kernel_cos+0x168>
8002fa28:	30 06       	mov	r6,0
8002fa2a:	fc 17 3f d2 	movh	r7,0x3fd2
8002fa2e:	c0 88       	rjmp	8002fa3e <__kernel_cos+0x176>
8002fa30:	fc 1a ff e0 	movh	r10,0xffe0
8002fa34:	30 08       	mov	r8,0
8002fa36:	ee 0a 00 09 	add	r9,r7,r10
8002fa3a:	10 96       	mov	r6,r8
8002fa3c:	12 97       	mov	r7,r9
8002fa3e:	0c 98       	mov	r8,r6
8002fa40:	0e 99       	mov	r9,r7
8002fa42:	30 0a       	mov	r10,0
8002fa44:	fc 1b 3f f0 	movh	r11,0x3ff0
8002fa48:	e0 a0 08 b4 	rcall	80030bb0 <__avr32_f64_sub>
8002fa4c:	30 08       	mov	r8,0
8002fa4e:	fa eb 00 10 	st.d	sp[16],r10
8002fa52:	fc 19 3f e0 	movh	r9,0x3fe0
8002fa56:	08 9a       	mov	r10,r4
8002fa58:	0a 9b       	mov	r11,r5
8002fa5a:	e0 a0 07 bf 	rcall	800309d8 <__avr32_f64_mul>
8002fa5e:	0c 98       	mov	r8,r6
8002fa60:	0e 99       	mov	r9,r7
8002fa62:	e0 a0 08 a7 	rcall	80030bb0 <__avr32_f64_sub>
8002fa66:	fa e8 00 00 	ld.d	r8,sp[0]
8002fa6a:	14 90       	mov	r0,r10
8002fa6c:	16 91       	mov	r1,r11
8002fa6e:	08 9a       	mov	r10,r4
8002fa70:	0a 9b       	mov	r11,r5
8002fa72:	e0 a0 07 b3 	rcall	800309d8 <__avr32_f64_mul>
8002fa76:	fa e8 00 08 	ld.d	r8,sp[8]
8002fa7a:	16 97       	mov	r7,r11
8002fa7c:	14 96       	mov	r6,r10
8002fa7e:	06 9b       	mov	r11,r3
8002fa80:	04 9a       	mov	r10,r2
8002fa82:	e0 a0 07 ab 	rcall	800309d8 <__avr32_f64_mul>
8002fa86:	14 98       	mov	r8,r10
8002fa88:	16 99       	mov	r9,r11
8002fa8a:	0c 9a       	mov	r10,r6
8002fa8c:	0e 9b       	mov	r11,r7
8002fa8e:	e0 a0 08 91 	rcall	80030bb0 <__avr32_f64_sub>
8002fa92:	14 98       	mov	r8,r10
8002fa94:	16 99       	mov	r9,r11
8002fa96:	00 9a       	mov	r10,r0
8002fa98:	02 9b       	mov	r11,r1
8002fa9a:	e0 a0 08 8b 	rcall	80030bb0 <__avr32_f64_sub>
8002fa9e:	14 98       	mov	r8,r10
8002faa0:	16 99       	mov	r9,r11
8002faa2:	fa ea 00 10 	ld.d	r10,sp[16]
8002faa6:	e0 a0 08 85 	rcall	80030bb0 <__avr32_f64_sub>
8002faaa:	2f ad       	sub	sp,-24
8002faac:	d8 32       	popm	r0-r7,pc
8002faae:	d7 03       	nop

8002fab0 <__kernel_rem_pio2>:
8002fab0:	d4 31       	pushm	r0-r7,lr
8002fab2:	fa cd 02 70 	sub	sp,sp,624
8002fab6:	50 b9       	stdsp	sp[0x2c],r9
8002fab8:	fa f9 02 94 	ld.w	r9,sp[660]
8002fabc:	50 68       	stdsp	sp[0x18],r8
8002fabe:	50 c9       	stdsp	sp[0x30],r9
8002fac0:	16 94       	mov	r4,r11
8002fac2:	40 b8       	lddsp	r8,sp[0x2c]
8002fac4:	4b e9       	lddpc	r9,8002fbbc <__kernel_rem_pio2+0x10c>
8002fac6:	20 18       	sub	r8,1
8002fac8:	40 6b       	lddsp	r11,sp[0x18]
8002faca:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8002face:	50 58       	stdsp	sp[0x14],r8
8002fad0:	50 39       	stdsp	sp[0xc],r9
8002fad2:	30 08       	mov	r8,0
8002fad4:	f4 c9 00 03 	sub	r9,r10,3
8002fad8:	10 97       	mov	r7,r8
8002fada:	31 83       	mov	r3,24
8002fadc:	f2 03 0c 02 	divs	r2,r9,r3
8002fae0:	f0 02 0c 48 	max	r8,r8,r2
8002fae4:	40 59       	lddsp	r9,sp[0x14]
8002fae6:	10 96       	mov	r6,r8
8002fae8:	10 93       	mov	r3,r8
8002faea:	50 78       	stdsp	sp[0x1c],r8
8002faec:	40 31       	lddsp	r1,sp[0xc]
8002faee:	5c d6       	com	r6
8002faf0:	12 13       	sub	r3,r9
8002faf2:	ec 06 00 16 	add	r6,r6,r6<<0x1
8002faf6:	40 c8       	lddsp	r8,sp[0x30]
8002faf8:	50 ac       	stdsp	sp[0x28],r12
8002fafa:	12 01       	add	r1,r9
8002fafc:	f4 06 00 36 	add	r6,r10,r6<<0x3
8002fb00:	fa c2 fe 80 	sub	r2,sp,-384
8002fb04:	f0 03 00 25 	add	r5,r8,r3<<0x2
8002fb08:	c0 d8       	rjmp	8002fb22 <__kernel_rem_pio2+0x72>
8002fb0a:	ee 03 00 08 	add	r8,r7,r3
8002fb0e:	c0 47       	brpl	8002fb16 <__kernel_rem_pio2+0x66>
8002fb10:	30 0a       	mov	r10,0
8002fb12:	30 0b       	mov	r11,0
8002fb14:	c0 48       	rjmp	8002fb1c <__kernel_rem_pio2+0x6c>
8002fb16:	6a 0c       	ld.w	r12,r5[0x0]
8002fb18:	e0 a0 09 bb 	rcall	80030e8e <__avr32_s32_to_f64>
8002fb1c:	a5 2a       	st.d	r2++,r10
8002fb1e:	2f f7       	sub	r7,-1
8002fb20:	2f c5       	sub	r5,-4
8002fb22:	02 37       	cp.w	r7,r1
8002fb24:	fe 9a ff f3 	brle	8002fb0a <__kernel_rem_pio2+0x5a>
8002fb28:	fa c0 ff c0 	sub	r0,sp,-64
8002fb2c:	40 53       	lddsp	r3,sp[0x14]
8002fb2e:	30 02       	mov	r2,0
8002fb30:	fa cc fe 80 	sub	r12,sp,-384
8002fb34:	0c 95       	mov	r5,r6
8002fb36:	c1 b8       	rjmp	8002fb6c <__kernel_rem_pio2+0xbc>
8002fb38:	ee e8 00 00 	ld.d	r8,r7[0]
8002fb3c:	50 0c       	stdsp	sp[0x0],r12
8002fb3e:	20 87       	sub	r7,8
8002fb40:	a3 0b       	ld.d	r10,r1++
8002fb42:	e0 a0 07 4b 	rcall	800309d8 <__avr32_f64_mul>
8002fb46:	14 98       	mov	r8,r10
8002fb48:	16 99       	mov	r9,r11
8002fb4a:	fa ea 00 04 	ld.d	r10,sp[4]
8002fb4e:	e0 a0 08 ff 	rcall	80030d4c <__avr32_f64_add>
8002fb52:	2f f6       	sub	r6,-1
8002fb54:	fa eb 00 04 	st.d	sp[4],r10
8002fb58:	40 0c       	lddsp	r12,sp[0x0]
8002fb5a:	40 5b       	lddsp	r11,sp[0x14]
8002fb5c:	16 36       	cp.w	r6,r11
8002fb5e:	fe 9a ff ed 	brle	8002fb38 <__kernel_rem_pio2+0x88>
8002fb62:	fa e8 00 04 	ld.d	r8,sp[4]
8002fb66:	2f f2       	sub	r2,-1
8002fb68:	a1 28       	st.d	r0++,r8
8002fb6a:	2f f3       	sub	r3,-1
8002fb6c:	40 38       	lddsp	r8,sp[0xc]
8002fb6e:	10 32       	cp.w	r2,r8
8002fb70:	e0 89 00 0b 	brgt	8002fb86 <__kernel_rem_pio2+0xd6>
8002fb74:	30 0a       	mov	r10,0
8002fb76:	30 0b       	mov	r11,0
8002fb78:	40 a1       	lddsp	r1,sp[0x28]
8002fb7a:	f8 03 00 37 	add	r7,r12,r3<<0x3
8002fb7e:	fa eb 00 04 	st.d	sp[4],r10
8002fb82:	30 06       	mov	r6,0
8002fb84:	ce bb       	rjmp	8002fb5a <__kernel_rem_pio2+0xaa>
8002fb86:	40 38       	lddsp	r8,sp[0xc]
8002fb88:	fa ca fd e0 	sub	r10,sp,-544
8002fb8c:	20 18       	sub	r8,1
8002fb8e:	0a 96       	mov	r6,r5
8002fb90:	f4 08 00 2a 	add	r10,r10,r8<<0x2
8002fb94:	40 37       	lddsp	r7,sp[0xc]
8002fb96:	50 fa       	stdsp	sp[0x3c],r10
8002fb98:	50 e4       	stdsp	sp[0x38],r4
8002fb9a:	fa c9 fd 90 	sub	r9,sp,-624
8002fb9e:	f2 07 00 38 	add	r8,r9,r7<<0x3
8002fba2:	ee c5 00 01 	sub	r5,r7,1
8002fba6:	f0 e2 fd d0 	ld.d	r2,r8[-560]
8002fbaa:	fa c1 fd e0 	sub	r1,sp,-544
8002fbae:	fa c8 ff c0 	sub	r8,sp,-64
8002fbb2:	50 11       	stdsp	sp[0x4],r1
8002fbb4:	f0 05 00 34 	add	r4,r8,r5<<0x3
8002fbb8:	0e 90       	mov	r0,r7
8002fbba:	c2 58       	rjmp	8002fc04 <__kernel_rem_pio2+0x154>
8002fbbc:	80 03       	ld.sh	r3,r0[0x0]
8002fbbe:	21 40       	sub	r0,20
8002fbc0:	e0 a0 07 0c 	rcall	800309d8 <__avr32_f64_mul>
8002fbc4:	e0 a0 09 4e 	rcall	80030e60 <__avr32_f64_to_s32>
8002fbc8:	e0 a0 09 63 	rcall	80030e8e <__avr32_s32_to_f64>
8002fbcc:	30 08       	mov	r8,0
8002fbce:	fc 19 c1 70 	movh	r9,0xc170
8002fbd2:	fa eb 00 20 	st.d	sp[32],r10
8002fbd6:	e0 a0 07 01 	rcall	800309d8 <__avr32_f64_mul>
8002fbda:	14 98       	mov	r8,r10
8002fbdc:	16 99       	mov	r9,r11
8002fbde:	04 9a       	mov	r10,r2
8002fbe0:	06 9b       	mov	r11,r3
8002fbe2:	e0 a0 08 b5 	rcall	80030d4c <__avr32_f64_add>
8002fbe6:	e0 a0 09 3d 	rcall	80030e60 <__avr32_f64_to_s32>
8002fbea:	40 1a       	lddsp	r10,sp[0x4]
8002fbec:	14 ac       	st.w	r10++,r12
8002fbee:	e8 e8 00 00 	ld.d	r8,r4[0]
8002fbf2:	50 1a       	stdsp	sp[0x4],r10
8002fbf4:	20 10       	sub	r0,1
8002fbf6:	fa ea 00 20 	ld.d	r10,sp[32]
8002fbfa:	20 84       	sub	r4,8
8002fbfc:	e0 a0 08 a8 	rcall	80030d4c <__avr32_f64_add>
8002fc00:	14 92       	mov	r2,r10
8002fc02:	16 93       	mov	r3,r11
8002fc04:	30 08       	mov	r8,0
8002fc06:	fc 19 3e 70 	movh	r9,0x3e70
8002fc0a:	04 9a       	mov	r10,r2
8002fc0c:	06 9b       	mov	r11,r3
8002fc0e:	58 00       	cp.w	r0,0
8002fc10:	fe 99 ff d8 	brgt	8002fbc0 <__kernel_rem_pio2+0x110>
8002fc14:	0c 9c       	mov	r12,r6
8002fc16:	e0 a0 06 67 	rcall	800308e4 <scalbn>
8002fc1a:	30 08       	mov	r8,0
8002fc1c:	fc 19 3f c0 	movh	r9,0x3fc0
8002fc20:	14 92       	mov	r2,r10
8002fc22:	16 93       	mov	r3,r11
8002fc24:	e0 a0 06 da 	rcall	800309d8 <__avr32_f64_mul>
8002fc28:	e0 a0 05 2e 	rcall	80030684 <floor>
8002fc2c:	30 08       	mov	r8,0
8002fc2e:	fc 19 c0 20 	movh	r9,0xc020
8002fc32:	e0 a0 06 d3 	rcall	800309d8 <__avr32_f64_mul>
8002fc36:	14 98       	mov	r8,r10
8002fc38:	16 99       	mov	r9,r11
8002fc3a:	04 9a       	mov	r10,r2
8002fc3c:	06 9b       	mov	r11,r3
8002fc3e:	e0 a0 08 87 	rcall	80030d4c <__avr32_f64_add>
8002fc42:	14 92       	mov	r2,r10
8002fc44:	16 93       	mov	r3,r11
8002fc46:	e0 a0 09 0d 	rcall	80030e60 <__avr32_f64_to_s32>
8002fc4a:	18 90       	mov	r0,r12
8002fc4c:	e0 a0 09 21 	rcall	80030e8e <__avr32_s32_to_f64>
8002fc50:	14 98       	mov	r8,r10
8002fc52:	16 99       	mov	r9,r11
8002fc54:	04 9a       	mov	r10,r2
8002fc56:	06 9b       	mov	r11,r3
8002fc58:	e0 a0 07 ac 	rcall	80030bb0 <__avr32_f64_sub>
8002fc5c:	fa eb 00 04 	st.d	sp[4],r10
8002fc60:	58 06       	cp.w	r6,0
8002fc62:	e0 8a 00 18 	brle	8002fc92 <__kernel_rem_pio2+0x1e2>
8002fc66:	fa c8 fd 90 	sub	r8,sp,-624
8002fc6a:	ec 0b 11 18 	rsub	r11,r6,24
8002fc6e:	f0 05 00 29 	add	r9,r8,r5<<0x2
8002fc72:	ec 0c 11 17 	rsub	r12,r6,23
8002fc76:	f2 fa ff b0 	ld.w	r10,r9[-80]
8002fc7a:	f4 0b 08 48 	asr	r8,r10,r11
8002fc7e:	f0 0b 09 4b 	lsl	r11,r8,r11
8002fc82:	10 00       	add	r0,r8
8002fc84:	f4 0b 01 0b 	sub	r11,r10,r11
8002fc88:	f3 4b ff b0 	st.w	r9[-80],r11
8002fc8c:	f6 0c 08 44 	asr	r4,r11,r12
8002fc90:	c1 58       	rjmp	8002fcba <__kernel_rem_pio2+0x20a>
8002fc92:	58 06       	cp.w	r6,0
8002fc94:	c0 91       	brne	8002fca6 <__kernel_rem_pio2+0x1f6>
8002fc96:	fa cb fd 90 	sub	r11,sp,-624
8002fc9a:	f6 05 00 28 	add	r8,r11,r5<<0x2
8002fc9e:	f0 f4 ff b0 	ld.w	r4,r8[-80]
8002fca2:	b7 54       	asr	r4,0x17
8002fca4:	c0 b8       	rjmp	8002fcba <__kernel_rem_pio2+0x20a>
8002fca6:	30 08       	mov	r8,0
8002fca8:	fc 19 3f e0 	movh	r9,0x3fe0
8002fcac:	e0 a0 09 74 	rcall	80030f94 <__avr32_f64_cmp_ge>
8002fcb0:	c0 31       	brne	8002fcb6 <__kernel_rem_pio2+0x206>
8002fcb2:	30 04       	mov	r4,0
8002fcb4:	c5 58       	rjmp	8002fd5e <__kernel_rem_pio2+0x2ae>
8002fcb6:	30 24       	mov	r4,2
8002fcb8:	c0 48       	rjmp	8002fcc0 <__kernel_rem_pio2+0x210>
8002fcba:	58 04       	cp.w	r4,0
8002fcbc:	e0 8a 00 51 	brle	8002fd5e <__kernel_rem_pio2+0x2ae>
8002fcc0:	30 08       	mov	r8,0
8002fcc2:	2f f0       	sub	r0,-1
8002fcc4:	10 93       	mov	r3,r8
8002fcc6:	c1 48       	rjmp	8002fcee <__kernel_rem_pio2+0x23e>
8002fcc8:	62 09       	ld.w	r9,r1[0x0]
8002fcca:	58 03       	cp.w	r3,0
8002fccc:	c0 81       	brne	8002fcdc <__kernel_rem_pio2+0x22c>
8002fcce:	58 09       	cp.w	r9,0
8002fcd0:	c0 d0       	breq	8002fcea <__kernel_rem_pio2+0x23a>
8002fcd2:	fc 1a 01 00 	movh	r10,0x100
8002fcd6:	12 1a       	sub	r10,r9
8002fcd8:	83 0a       	st.w	r1[0x0],r10
8002fcda:	c0 78       	rjmp	8002fce8 <__kernel_rem_pio2+0x238>
8002fcdc:	e0 6b ff ff 	mov	r11,65535
8002fce0:	ea 1b 00 ff 	orh	r11,0xff
8002fce4:	12 1b       	sub	r11,r9
8002fce6:	83 0b       	st.w	r1[0x0],r11
8002fce8:	30 13       	mov	r3,1
8002fcea:	2f f8       	sub	r8,-1
8002fcec:	2f c1       	sub	r1,-4
8002fcee:	0e 38       	cp.w	r8,r7
8002fcf0:	ce c5       	brlt	8002fcc8 <__kernel_rem_pio2+0x218>
8002fcf2:	58 06       	cp.w	r6,0
8002fcf4:	e0 8a 00 1a 	brle	8002fd28 <__kernel_rem_pio2+0x278>
8002fcf8:	58 16       	cp.w	r6,1
8002fcfa:	c0 40       	breq	8002fd02 <__kernel_rem_pio2+0x252>
8002fcfc:	58 26       	cp.w	r6,2
8002fcfe:	c1 51       	brne	8002fd28 <__kernel_rem_pio2+0x278>
8002fd00:	c0 a8       	rjmp	8002fd14 <__kernel_rem_pio2+0x264>
8002fd02:	fa ca fd 90 	sub	r10,sp,-624
8002fd06:	f4 05 00 28 	add	r8,r10,r5<<0x2
8002fd0a:	f0 f9 ff b0 	ld.w	r9,r8[-80]
8002fd0e:	f3 d9 c0 17 	bfextu	r9,r9,0x0,0x17
8002fd12:	c0 98       	rjmp	8002fd24 <__kernel_rem_pio2+0x274>
8002fd14:	fa c9 fd 90 	sub	r9,sp,-624
8002fd18:	f2 05 00 28 	add	r8,r9,r5<<0x2
8002fd1c:	f0 f9 ff b0 	ld.w	r9,r8[-80]
8002fd20:	f3 d9 c0 16 	bfextu	r9,r9,0x0,0x16
8002fd24:	f1 49 ff b0 	st.w	r8[-80],r9
8002fd28:	58 24       	cp.w	r4,2
8002fd2a:	c1 a1       	brne	8002fd5e <__kernel_rem_pio2+0x2ae>
8002fd2c:	fa e8 00 04 	ld.d	r8,sp[4]
8002fd30:	30 0a       	mov	r10,0
8002fd32:	fc 1b 3f f0 	movh	r11,0x3ff0
8002fd36:	e0 a0 07 3d 	rcall	80030bb0 <__avr32_f64_sub>
8002fd3a:	fa eb 00 04 	st.d	sp[4],r10
8002fd3e:	58 03       	cp.w	r3,0
8002fd40:	c0 f0       	breq	8002fd5e <__kernel_rem_pio2+0x2ae>
8002fd42:	0c 9c       	mov	r12,r6
8002fd44:	30 0a       	mov	r10,0
8002fd46:	fc 1b 3f f0 	movh	r11,0x3ff0
8002fd4a:	e0 a0 05 cd 	rcall	800308e4 <scalbn>
8002fd4e:	14 98       	mov	r8,r10
8002fd50:	16 99       	mov	r9,r11
8002fd52:	fa ea 00 04 	ld.d	r10,sp[4]
8002fd56:	e0 a0 07 2d 	rcall	80030bb0 <__avr32_f64_sub>
8002fd5a:	fa eb 00 04 	st.d	sp[4],r10
8002fd5e:	30 08       	mov	r8,0
8002fd60:	30 09       	mov	r9,0
8002fd62:	fa ea 00 04 	ld.d	r10,sp[4]
8002fd66:	e0 a0 09 04 	rcall	80030f6e <__avr32_f64_cmp_eq>
8002fd6a:	c6 40       	breq	8002fe32 <__kernel_rem_pio2+0x382>
8002fd6c:	fa c8 fd e0 	sub	r8,sp,-544
8002fd70:	f0 05 00 29 	add	r9,r8,r5<<0x2
8002fd74:	30 08       	mov	r8,0
8002fd76:	c0 58       	rjmp	8002fd80 <__kernel_rem_pio2+0x2d0>
8002fd78:	72 0a       	ld.w	r10,r9[0x0]
8002fd7a:	20 15       	sub	r5,1
8002fd7c:	14 48       	or	r8,r10
8002fd7e:	20 49       	sub	r9,4
8002fd80:	40 3b       	lddsp	r11,sp[0xc]
8002fd82:	16 35       	cp.w	r5,r11
8002fd84:	cf a4       	brge	8002fd78 <__kernel_rem_pio2+0x2c8>
8002fd86:	58 08       	cp.w	r8,0
8002fd88:	c5 b1       	brne	8002fe3e <__kernel_rem_pio2+0x38e>
8002fd8a:	40 f9       	lddsp	r9,sp[0x3c]
8002fd8c:	30 18       	mov	r8,1
8002fd8e:	c0 28       	rjmp	8002fd92 <__kernel_rem_pio2+0x2e2>
8002fd90:	2f f8       	sub	r8,-1
8002fd92:	72 0a       	ld.w	r10,r9[0x0]
8002fd94:	20 49       	sub	r9,4
8002fd96:	58 0a       	cp.w	r10,0
8002fd98:	cf c0       	breq	8002fd90 <__kernel_rem_pio2+0x2e0>
8002fd9a:	0e 08       	add	r8,r7
8002fd9c:	40 ba       	lddsp	r10,sp[0x2c]
8002fd9e:	50 d8       	stdsp	sp[0x34],r8
8002fda0:	ee 0a 00 02 	add	r2,r7,r10
8002fda4:	fa c8 fe 80 	sub	r8,sp,-384
8002fda8:	04 91       	mov	r1,r2
8002fdaa:	ee c5 ff ff 	sub	r5,r7,-1
8002fdae:	40 73       	lddsp	r3,sp[0x1c]
8002fdb0:	40 c9       	lddsp	r9,sp[0x30]
8002fdb2:	2f f3       	sub	r3,-1
8002fdb4:	fa cb ff c0 	sub	r11,sp,-64
8002fdb8:	0e 03       	add	r3,r7
8002fdba:	f6 05 00 3b 	add	r11,r11,r5<<0x3
8002fdbe:	f2 03 00 23 	add	r3,r9,r3<<0x2
8002fdc2:	50 8b       	stdsp	sp[0x20],r11
8002fdc4:	f0 02 00 32 	add	r2,r8,r2<<0x3
8002fdc8:	0c 94       	mov	r4,r6
8002fdca:	c2 d8       	rjmp	8002fe24 <__kernel_rem_pio2+0x374>
8002fdcc:	66 0c       	ld.w	r12,r3[0x0]
8002fdce:	e0 a0 08 60 	rcall	80030e8e <__avr32_s32_to_f64>
8002fdd2:	30 08       	mov	r8,0
8002fdd4:	e4 eb 00 00 	st.d	r2[0],r10
8002fdd8:	30 09       	mov	r9,0
8002fdda:	fa ca fe 80 	sub	r10,sp,-384
8002fdde:	40 a0       	lddsp	r0,sp[0x28]
8002fde0:	f4 01 00 37 	add	r7,r10,r1<<0x3
8002fde4:	30 06       	mov	r6,0
8002fde6:	fa e9 00 04 	st.d	sp[4],r8
8002fdea:	c1 08       	rjmp	8002fe0a <__kernel_rem_pio2+0x35a>
8002fdec:	ee e8 00 00 	ld.d	r8,r7[0]
8002fdf0:	a1 0b       	ld.d	r10,r0++
8002fdf2:	20 87       	sub	r7,8
8002fdf4:	e0 a0 05 f2 	rcall	800309d8 <__avr32_f64_mul>
8002fdf8:	2f f6       	sub	r6,-1
8002fdfa:	14 98       	mov	r8,r10
8002fdfc:	16 99       	mov	r9,r11
8002fdfe:	fa ea 00 04 	ld.d	r10,sp[4]
8002fe02:	e0 a0 07 a5 	rcall	80030d4c <__avr32_f64_add>
8002fe06:	fa eb 00 04 	st.d	sp[4],r10
8002fe0a:	40 58       	lddsp	r8,sp[0x14]
8002fe0c:	10 36       	cp.w	r6,r8
8002fe0e:	fe 9a ff ef 	brle	8002fdec <__kernel_rem_pio2+0x33c>
8002fe12:	40 89       	lddsp	r9,sp[0x20]
8002fe14:	fa ea 00 04 	ld.d	r10,sp[4]
8002fe18:	2f f5       	sub	r5,-1
8002fe1a:	b3 2a       	st.d	r9++,r10
8002fe1c:	2f c3       	sub	r3,-4
8002fe1e:	50 89       	stdsp	sp[0x20],r9
8002fe20:	2f 82       	sub	r2,-8
8002fe22:	2f f1       	sub	r1,-1
8002fe24:	40 d8       	lddsp	r8,sp[0x34]
8002fe26:	10 35       	cp.w	r5,r8
8002fe28:	fe 9a ff d2 	brle	8002fdcc <__kernel_rem_pio2+0x31c>
8002fe2c:	08 96       	mov	r6,r4
8002fe2e:	10 97       	mov	r7,r8
8002fe30:	cb 5a       	rjmp	8002fb9a <__kernel_rem_pio2+0xea>
8002fe32:	50 50       	stdsp	sp[0x14],r0
8002fe34:	08 95       	mov	r5,r4
8002fe36:	40 e4       	lddsp	r4,sp[0x38]
8002fe38:	58 0c       	cp.w	r12,0
8002fe3a:	c1 30       	breq	8002fe60 <__kernel_rem_pio2+0x3b0>
8002fe3c:	c0 48       	rjmp	8002fe44 <__kernel_rem_pio2+0x394>
8002fe3e:	08 95       	mov	r5,r4
8002fe40:	50 50       	stdsp	sp[0x14],r0
8002fe42:	40 e4       	lddsp	r4,sp[0x38]
8002fe44:	20 17       	sub	r7,1
8002fe46:	fa c8 fd e0 	sub	r8,sp,-544
8002fe4a:	21 86       	sub	r6,24
8002fe4c:	f0 07 00 28 	add	r8,r8,r7<<0x2
8002fe50:	c0 38       	rjmp	8002fe56 <__kernel_rem_pio2+0x3a6>
8002fe52:	20 17       	sub	r7,1
8002fe54:	21 86       	sub	r6,24
8002fe56:	70 09       	ld.w	r9,r8[0x0]
8002fe58:	20 48       	sub	r8,4
8002fe5a:	58 09       	cp.w	r9,0
8002fe5c:	cf b0       	breq	8002fe52 <__kernel_rem_pio2+0x3a2>
8002fe5e:	c4 48       	rjmp	8002fee6 <__kernel_rem_pio2+0x436>
8002fe60:	fa ea 00 04 	ld.d	r10,sp[4]
8002fe64:	ec 0c 11 00 	rsub	r12,r6,0
8002fe68:	e0 a0 05 3e 	rcall	800308e4 <scalbn>
8002fe6c:	30 08       	mov	r8,0
8002fe6e:	14 90       	mov	r0,r10
8002fe70:	16 91       	mov	r1,r11
8002fe72:	fc 19 41 70 	movh	r9,0x4170
8002fe76:	ee 03 15 02 	lsl	r3,r7,0x2
8002fe7a:	e0 a0 08 8d 	rcall	80030f94 <__avr32_f64_cmp_ge>
8002fe7e:	c2 a0       	breq	8002fed2 <__kernel_rem_pio2+0x422>
8002fe80:	30 08       	mov	r8,0
8002fe82:	fc 19 3e 70 	movh	r9,0x3e70
8002fe86:	00 9a       	mov	r10,r0
8002fe88:	02 9b       	mov	r11,r1
8002fe8a:	e0 a0 05 a7 	rcall	800309d8 <__avr32_f64_mul>
8002fe8e:	e0 a0 07 e9 	rcall	80030e60 <__avr32_f64_to_s32>
8002fe92:	e0 a0 07 fe 	rcall	80030e8e <__avr32_s32_to_f64>
8002fe96:	30 08       	mov	r8,0
8002fe98:	fc 19 c1 70 	movh	r9,0xc170
8002fe9c:	fa eb 00 04 	st.d	sp[4],r10
8002fea0:	e0 a0 05 9c 	rcall	800309d8 <__avr32_f64_mul>
8002fea4:	16 99       	mov	r9,r11
8002fea6:	14 98       	mov	r8,r10
8002fea8:	02 9b       	mov	r11,r1
8002feaa:	00 9a       	mov	r10,r0
8002feac:	e0 a0 07 50 	rcall	80030d4c <__avr32_f64_add>
8002feb0:	e0 a0 07 d8 	rcall	80030e60 <__avr32_f64_to_s32>
8002feb4:	fa cb fd 90 	sub	r11,sp,-624
8002feb8:	f6 03 00 03 	add	r3,r11,r3
8002febc:	2f f7       	sub	r7,-1
8002febe:	e7 4c ff b0 	st.w	r3[-80],r12
8002fec2:	fa c9 fd 90 	sub	r9,sp,-624
8002fec6:	fa ea 00 04 	ld.d	r10,sp[4]
8002feca:	2e 86       	sub	r6,-24
8002fecc:	f2 07 00 23 	add	r3,r9,r7<<0x2
8002fed0:	c0 78       	rjmp	8002fede <__kernel_rem_pio2+0x42e>
8002fed2:	fa c8 fd 90 	sub	r8,sp,-624
8002fed6:	00 9a       	mov	r10,r0
8002fed8:	f0 03 00 03 	add	r3,r8,r3
8002fedc:	02 9b       	mov	r11,r1
8002fede:	e0 a0 07 c1 	rcall	80030e60 <__avr32_f64_to_s32>
8002fee2:	e7 4c ff b0 	st.w	r3[-80],r12
8002fee6:	0c 9c       	mov	r12,r6
8002fee8:	30 0a       	mov	r10,0
8002feea:	fc 1b 3f f0 	movh	r11,0x3ff0
8002feee:	fa c3 fd e0 	sub	r3,sp,-544
8002fef2:	e0 a0 04 f9 	rcall	800308e4 <scalbn>
8002fef6:	fa c2 ff c0 	sub	r2,sp,-64
8002fefa:	0e 96       	mov	r6,r7
8002fefc:	14 90       	mov	r0,r10
8002fefe:	16 91       	mov	r1,r11
8002ff00:	e6 07 00 23 	add	r3,r3,r7<<0x2
8002ff04:	e4 07 00 32 	add	r2,r2,r7<<0x3
8002ff08:	c1 88       	rjmp	8002ff38 <__kernel_rem_pio2+0x488>
8002ff0a:	66 0c       	ld.w	r12,r3[0x0]
8002ff0c:	e0 a0 07 c1 	rcall	80030e8e <__avr32_s32_to_f64>
8002ff10:	14 98       	mov	r8,r10
8002ff12:	16 99       	mov	r9,r11
8002ff14:	00 9a       	mov	r10,r0
8002ff16:	02 9b       	mov	r11,r1
8002ff18:	e0 a0 05 60 	rcall	800309d8 <__avr32_f64_mul>
8002ff1c:	30 08       	mov	r8,0
8002ff1e:	e4 eb 00 00 	st.d	r2[0],r10
8002ff22:	fc 19 3e 70 	movh	r9,0x3e70
8002ff26:	00 9a       	mov	r10,r0
8002ff28:	02 9b       	mov	r11,r1
8002ff2a:	20 16       	sub	r6,1
8002ff2c:	e0 a0 05 56 	rcall	800309d8 <__avr32_f64_mul>
8002ff30:	20 43       	sub	r3,4
8002ff32:	20 82       	sub	r2,8
8002ff34:	14 90       	mov	r0,r10
8002ff36:	16 91       	mov	r1,r11
8002ff38:	58 06       	cp.w	r6,0
8002ff3a:	ce 84       	brge	8002ff0a <__kernel_rem_pio2+0x45a>
8002ff3c:	fa cc ff 20 	sub	r12,sp,-224
8002ff40:	0a 91       	mov	r1,r5
8002ff42:	0e 93       	mov	r3,r7
8002ff44:	30 02       	mov	r2,0
8002ff46:	18 96       	mov	r6,r12
8002ff48:	0e 95       	mov	r5,r7
8002ff4a:	c1 c8       	rjmp	8002ff82 <__kernel_rem_pio2+0x4d2>
8002ff4c:	ad 09       	ld.d	r8,r6++
8002ff4e:	2f f7       	sub	r7,-1
8002ff50:	a1 0b       	ld.d	r10,r0++
8002ff52:	e0 a0 05 43 	rcall	800309d8 <__avr32_f64_mul>
8002ff56:	14 98       	mov	r8,r10
8002ff58:	16 99       	mov	r9,r11
8002ff5a:	fa ea 00 04 	ld.d	r10,sp[4]
8002ff5e:	e0 a0 06 f7 	rcall	80030d4c <__avr32_f64_add>
8002ff62:	fa eb 00 04 	st.d	sp[4],r10
8002ff66:	40 3b       	lddsp	r11,sp[0xc]
8002ff68:	16 37       	cp.w	r7,r11
8002ff6a:	e0 89 00 05 	brgt	8002ff74 <__kernel_rem_pio2+0x4c4>
8002ff6e:	04 37       	cp.w	r7,r2
8002ff70:	fe 9a ff ee 	brle	8002ff4c <__kernel_rem_pio2+0x49c>
8002ff74:	06 96       	mov	r6,r3
8002ff76:	fa e8 00 04 	ld.d	r8,sp[4]
8002ff7a:	40 73       	lddsp	r3,sp[0x1c]
8002ff7c:	ad 28       	st.d	r6++,r8
8002ff7e:	20 13       	sub	r3,1
8002ff80:	2f f2       	sub	r2,-1
8002ff82:	58 03       	cp.w	r3,0
8002ff84:	c0 f5       	brlt	8002ffa2 <__kernel_rem_pio2+0x4f2>
8002ff86:	fa c8 ff c0 	sub	r8,sp,-64
8002ff8a:	30 0a       	mov	r10,0
8002ff8c:	f0 03 00 3c 	add	r12,r8,r3<<0x3
8002ff90:	30 0b       	mov	r11,0
8002ff92:	50 73       	stdsp	sp[0x1c],r3
8002ff94:	4d 00       	lddpc	r0,800300d4 <__kernel_rem_pio2+0x624>
8002ff96:	0c 93       	mov	r3,r6
8002ff98:	fa eb 00 04 	st.d	sp[4],r10
8002ff9c:	30 07       	mov	r7,0
8002ff9e:	18 96       	mov	r6,r12
8002ffa0:	ce 3b       	rjmp	8002ff66 <__kernel_rem_pio2+0x4b6>
8002ffa2:	0a 97       	mov	r7,r5
8002ffa4:	40 6a       	lddsp	r10,sp[0x18]
8002ffa6:	02 95       	mov	r5,r1
8002ffa8:	58 2a       	cp.w	r10,2
8002ffaa:	e0 89 00 07 	brgt	8002ffb8 <__kernel_rem_pio2+0x508>
8002ffae:	58 1a       	cp.w	r10,1
8002ffb0:	c1 14       	brge	8002ffd2 <__kernel_rem_pio2+0x522>
8002ffb2:	58 0a       	cp.w	r10,0
8002ffb4:	c1 70       	breq	8002ffe2 <__kernel_rem_pio2+0x532>
8002ffb6:	ce 68       	rjmp	80030182 <__kernel_rem_pio2+0x6d2>
8002ffb8:	40 69       	lddsp	r9,sp[0x18]
8002ffba:	58 39       	cp.w	r9,3
8002ffbc:	e0 81 00 e3 	brne	80030182 <__kernel_rem_pio2+0x6d2>
8002ffc0:	ee c6 00 01 	sub	r6,r7,1
8002ffc4:	fa c8 ff 20 	sub	r8,sp,-224
8002ffc8:	0e 92       	mov	r2,r7
8002ffca:	f0 06 00 36 	add	r6,r8,r6<<0x3
8002ffce:	0c 93       	mov	r3,r6
8002ffd0:	c7 d8       	rjmp	800300ca <__kernel_rem_pio2+0x61a>
8002ffd2:	fa c6 ff 20 	sub	r6,sp,-224
8002ffd6:	30 0c       	mov	r12,0
8002ffd8:	ec 07 00 36 	add	r6,r6,r7<<0x3
8002ffdc:	0e 93       	mov	r3,r7
8002ffde:	18 9a       	mov	r10,r12
8002ffe0:	c2 98       	rjmp	80030032 <__kernel_rem_pio2+0x582>
8002ffe2:	40 6c       	lddsp	r12,sp[0x18]
8002ffe4:	0e 96       	mov	r6,r7
8002ffe6:	fa c8 ff 20 	sub	r8,sp,-224
8002ffea:	18 9a       	mov	r10,r12
8002ffec:	f0 07 00 37 	add	r7,r8,r7<<0x3
8002fff0:	c0 a8       	rjmp	80030004 <__kernel_rem_pio2+0x554>
8002fff2:	ee e8 00 00 	ld.d	r8,r7[0]
8002fff6:	18 9b       	mov	r11,r12
8002fff8:	20 87       	sub	r7,8
8002fffa:	06 9a       	mov	r10,r3
8002fffc:	20 16       	sub	r6,1
8002fffe:	e0 a0 06 a7 	rcall	80030d4c <__avr32_f64_add>
80030002:	16 9c       	mov	r12,r11
80030004:	14 93       	mov	r3,r10
80030006:	58 06       	cp.w	r6,0
80030008:	cf 54       	brge	8002fff2 <__kernel_rem_pio2+0x542>
8003000a:	18 98       	mov	r8,r12
8003000c:	ee 18 80 00 	eorh	r8,0x8000
80030010:	58 05       	cp.w	r5,0
80030012:	f0 0c 17 10 	movne	r12,r8
80030016:	14 98       	mov	r8,r10
80030018:	18 99       	mov	r9,r12
8003001a:	e8 e9 00 00 	st.d	r4[0],r8
8003001e:	cb 28       	rjmp	80030182 <__kernel_rem_pio2+0x6d2>
80030020:	ec e8 00 00 	ld.d	r8,r6[0]
80030024:	18 9b       	mov	r11,r12
80030026:	04 9a       	mov	r10,r2
80030028:	20 13       	sub	r3,1
8003002a:	e0 a0 06 91 	rcall	80030d4c <__avr32_f64_add>
8003002e:	20 86       	sub	r6,8
80030030:	16 9c       	mov	r12,r11
80030032:	14 92       	mov	r2,r10
80030034:	58 03       	cp.w	r3,0
80030036:	cf 54       	brge	80030020 <__kernel_rem_pio2+0x570>
80030038:	18 9b       	mov	r11,r12
8003003a:	18 98       	mov	r8,r12
8003003c:	ee 18 80 00 	eorh	r8,0x8000
80030040:	58 05       	cp.w	r5,0
80030042:	f0 0c 17 10 	movne	r12,r8
80030046:	18 93       	mov	r3,r12
80030048:	14 92       	mov	r2,r10
8003004a:	16 99       	mov	r9,r11
8003004c:	e8 e3 00 00 	st.d	r4[0],r2
80030050:	14 98       	mov	r8,r10
80030052:	fa c3 ff 18 	sub	r3,sp,-232
80030056:	fa ea 00 e0 	ld.d	r10,sp[224]
8003005a:	30 16       	mov	r6,1
8003005c:	e0 a0 05 aa 	rcall	80030bb0 <__avr32_f64_sub>
80030060:	c0 78       	rjmp	8003006e <__kernel_rem_pio2+0x5be>
80030062:	2f f6       	sub	r6,-1
80030064:	a7 09       	ld.d	r8,r3++
80030066:	18 9b       	mov	r11,r12
80030068:	04 9a       	mov	r10,r2
8003006a:	e0 a0 06 71 	rcall	80030d4c <__avr32_f64_add>
8003006e:	16 9c       	mov	r12,r11
80030070:	14 92       	mov	r2,r10
80030072:	0e 36       	cp.w	r6,r7
80030074:	fe 9a ff f7 	brle	80030062 <__kernel_rem_pio2+0x5b2>
80030078:	16 98       	mov	r8,r11
8003007a:	ee 18 80 00 	eorh	r8,0x8000
8003007e:	58 05       	cp.w	r5,0
80030080:	f0 0c 17 10 	movne	r12,r8
80030084:	14 98       	mov	r8,r10
80030086:	18 99       	mov	r9,r12
80030088:	e8 e9 00 08 	st.d	r4[8],r8
8003008c:	c7 b8       	rjmp	80030182 <__kernel_rem_pio2+0x6d2>
8003008e:	e6 e0 00 00 	ld.d	r0,r3[0]
80030092:	e6 e8 00 08 	ld.d	r8,r3[8]
80030096:	00 9a       	mov	r10,r0
80030098:	02 9b       	mov	r11,r1
8003009a:	e0 a0 06 59 	rcall	80030d4c <__avr32_f64_add>
8003009e:	fa eb 00 0c 	st.d	sp[12],r10
800300a2:	14 98       	mov	r8,r10
800300a4:	16 99       	mov	r9,r11
800300a6:	00 9a       	mov	r10,r0
800300a8:	02 9b       	mov	r11,r1
800300aa:	e0 a0 05 83 	rcall	80030bb0 <__avr32_f64_sub>
800300ae:	14 98       	mov	r8,r10
800300b0:	16 99       	mov	r9,r11
800300b2:	e6 ea 00 08 	ld.d	r10,r3[8]
800300b6:	e0 a0 06 4b 	rcall	80030d4c <__avr32_f64_add>
800300ba:	fa e8 00 0c 	ld.d	r8,sp[12]
800300be:	e6 eb 00 08 	st.d	r3[8],r10
800300c2:	e6 e9 00 00 	st.d	r3[0],r8
800300c6:	20 12       	sub	r2,1
800300c8:	20 83       	sub	r3,8
800300ca:	58 02       	cp.w	r2,0
800300cc:	fe 99 ff e1 	brgt	8003008e <__kernel_rem_pio2+0x5de>
800300d0:	0e 93       	mov	r3,r7
800300d2:	c2 18       	rjmp	80030114 <__kernel_rem_pio2+0x664>
800300d4:	80 03       	ld.sh	r3,r0[0x0]
800300d6:	21 50       	sub	r0,21
800300d8:	ec e0 00 00 	ld.d	r0,r6[0]
800300dc:	ec e8 00 08 	ld.d	r8,r6[8]
800300e0:	00 9a       	mov	r10,r0
800300e2:	02 9b       	mov	r11,r1
800300e4:	e0 a0 06 34 	rcall	80030d4c <__avr32_f64_add>
800300e8:	fa eb 00 0c 	st.d	sp[12],r10
800300ec:	14 98       	mov	r8,r10
800300ee:	16 99       	mov	r9,r11
800300f0:	00 9a       	mov	r10,r0
800300f2:	02 9b       	mov	r11,r1
800300f4:	e0 a0 05 5e 	rcall	80030bb0 <__avr32_f64_sub>
800300f8:	14 98       	mov	r8,r10
800300fa:	16 99       	mov	r9,r11
800300fc:	ec ea 00 08 	ld.d	r10,r6[8]
80030100:	e0 a0 06 26 	rcall	80030d4c <__avr32_f64_add>
80030104:	fa e8 00 0c 	ld.d	r8,sp[12]
80030108:	ec eb 00 08 	st.d	r6[8],r10
8003010c:	ec e9 00 00 	st.d	r6[0],r8
80030110:	20 13       	sub	r3,1
80030112:	20 86       	sub	r6,8
80030114:	58 13       	cp.w	r3,1
80030116:	fe 99 ff e1 	brgt	800300d8 <__kernel_rem_pio2+0x628>
8003011a:	0e 96       	mov	r6,r7
8003011c:	fa c8 ff 20 	sub	r8,sp,-224
80030120:	30 0c       	mov	r12,0
80030122:	f0 07 00 37 	add	r7,r8,r7<<0x3
80030126:	18 9a       	mov	r10,r12
80030128:	c0 a8       	rjmp	8003013c <__kernel_rem_pio2+0x68c>
8003012a:	ee e8 00 00 	ld.d	r8,r7[0]
8003012e:	18 9b       	mov	r11,r12
80030130:	20 87       	sub	r7,8
80030132:	06 9a       	mov	r10,r3
80030134:	20 16       	sub	r6,1
80030136:	e0 a0 06 0b 	rcall	80030d4c <__avr32_f64_add>
8003013a:	16 9c       	mov	r12,r11
8003013c:	14 93       	mov	r3,r10
8003013e:	58 16       	cp.w	r6,1
80030140:	fe 99 ff f5 	brgt	8003012a <__kernel_rem_pio2+0x67a>
80030144:	58 05       	cp.w	r5,0
80030146:	c0 e1       	brne	80030162 <__kernel_rem_pio2+0x6b2>
80030148:	fa e8 00 e0 	ld.d	r8,sp[224]
8003014c:	e8 e9 00 00 	st.d	r4[0],r8
80030150:	fa e8 00 e8 	ld.d	r8,sp[232]
80030154:	e8 e9 00 08 	st.d	r4[8],r8
80030158:	18 99       	mov	r9,r12
8003015a:	14 98       	mov	r8,r10
8003015c:	e8 e9 00 10 	st.d	r4[16],r8
80030160:	c1 18       	rjmp	80030182 <__kernel_rem_pio2+0x6d2>
80030162:	89 5a       	st.w	r4[0x14],r10
80030164:	ee 1c 80 00 	eorh	r12,0x8000
80030168:	89 4c       	st.w	r4[0x10],r12
8003016a:	43 88       	lddsp	r8,sp[0xe0]
8003016c:	ee 18 80 00 	eorh	r8,0x8000
80030170:	89 08       	st.w	r4[0x0],r8
80030172:	43 98       	lddsp	r8,sp[0xe4]
80030174:	89 18       	st.w	r4[0x4],r8
80030176:	43 a8       	lddsp	r8,sp[0xe8]
80030178:	ee 18 80 00 	eorh	r8,0x8000
8003017c:	89 28       	st.w	r4[0x8],r8
8003017e:	43 b8       	lddsp	r8,sp[0xec]
80030180:	89 38       	st.w	r4[0xc],r8
80030182:	40 58       	lddsp	r8,sp[0x14]
80030184:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80030188:	fe 3d fd 90 	sub	sp,-624
8003018c:	d8 32       	popm	r0-r7,pc
8003018e:	d7 03       	nop

80030190 <__kernel_sin>:
80030190:	d4 31       	pushm	r0-r7,lr
80030192:	20 4d       	sub	sp,16
80030194:	fa e9 00 08 	st.d	sp[8],r8
80030198:	50 0c       	stdsp	sp[0x0],r12
8003019a:	14 96       	mov	r6,r10
8003019c:	16 97       	mov	r7,r11
8003019e:	f1 db c0 1f 	bfextu	r8,r11,0x0,0x1f
800301a2:	e0 69 ff ff 	mov	r9,65535
800301a6:	ea 19 3e 3f 	orh	r9,0x3e3f
800301aa:	12 38       	cp.w	r8,r9
800301ac:	e0 89 00 06 	brgt	800301b8 <__kernel_sin+0x28>
800301b0:	e0 a0 06 58 	rcall	80030e60 <__avr32_f64_to_s32>
800301b4:	e0 80 00 b3 	breq	8003031a <__kernel_sin+0x18a>
800301b8:	0c 98       	mov	r8,r6
800301ba:	0e 99       	mov	r9,r7
800301bc:	0c 9a       	mov	r10,r6
800301be:	0e 9b       	mov	r11,r7
800301c0:	e0 a0 04 0c 	rcall	800309d8 <__avr32_f64_mul>
800301c4:	0c 98       	mov	r8,r6
800301c6:	14 94       	mov	r4,r10
800301c8:	16 95       	mov	r5,r11
800301ca:	0e 99       	mov	r9,r7
800301cc:	e0 a0 04 06 	rcall	800309d8 <__avr32_f64_mul>
800301d0:	e0 68 d5 7c 	mov	r8,54652
800301d4:	ea 18 5a cf 	orh	r8,0x5acf
800301d8:	e0 69 d9 3a 	mov	r9,55610
800301dc:	ea 19 3d e5 	orh	r9,0x3de5
800301e0:	14 90       	mov	r0,r10
800301e2:	16 91       	mov	r1,r11
800301e4:	08 9a       	mov	r10,r4
800301e6:	0a 9b       	mov	r11,r5
800301e8:	e0 a0 03 f8 	rcall	800309d8 <__avr32_f64_mul>
800301ec:	e0 68 9c eb 	mov	r8,40171
800301f0:	ea 18 8a 2b 	orh	r8,0x8a2b
800301f4:	e0 69 e5 e6 	mov	r9,58854
800301f8:	ea 19 3e 5a 	orh	r9,0x3e5a
800301fc:	e0 a0 04 da 	rcall	80030bb0 <__avr32_f64_sub>
80030200:	14 98       	mov	r8,r10
80030202:	16 99       	mov	r9,r11
80030204:	08 9a       	mov	r10,r4
80030206:	0a 9b       	mov	r11,r5
80030208:	e0 a0 03 e8 	rcall	800309d8 <__avr32_f64_mul>
8003020c:	e0 68 fe 7d 	mov	r8,65149
80030210:	ea 18 57 b1 	orh	r8,0x57b1
80030214:	e0 69 1d e3 	mov	r9,7651
80030218:	ea 19 3e c7 	orh	r9,0x3ec7
8003021c:	e0 a0 05 98 	rcall	80030d4c <__avr32_f64_add>
80030220:	14 98       	mov	r8,r10
80030222:	16 99       	mov	r9,r11
80030224:	08 9a       	mov	r10,r4
80030226:	0a 9b       	mov	r11,r5
80030228:	e0 a0 03 d8 	rcall	800309d8 <__avr32_f64_mul>
8003022c:	e0 68 61 d5 	mov	r8,25045
80030230:	ea 18 19 c1 	orh	r8,0x19c1
80030234:	e0 69 01 a0 	mov	r9,416
80030238:	ea 19 3f 2a 	orh	r9,0x3f2a
8003023c:	e0 a0 04 ba 	rcall	80030bb0 <__avr32_f64_sub>
80030240:	14 98       	mov	r8,r10
80030242:	16 99       	mov	r9,r11
80030244:	08 9a       	mov	r10,r4
80030246:	0a 9b       	mov	r11,r5
80030248:	e0 a0 03 c8 	rcall	800309d8 <__avr32_f64_mul>
8003024c:	e0 68 f8 a6 	mov	r8,63654
80030250:	ea 18 11 10 	orh	r8,0x1110
80030254:	e0 69 11 11 	mov	r9,4369
80030258:	ea 19 3f 81 	orh	r9,0x3f81
8003025c:	e0 a0 05 78 	rcall	80030d4c <__avr32_f64_add>
80030260:	40 08       	lddsp	r8,sp[0x0]
80030262:	14 92       	mov	r2,r10
80030264:	16 93       	mov	r3,r11
80030266:	58 08       	cp.w	r8,0
80030268:	c1 e1       	brne	800302a4 <__kernel_sin+0x114>
8003026a:	14 98       	mov	r8,r10
8003026c:	06 99       	mov	r9,r3
8003026e:	08 9a       	mov	r10,r4
80030270:	0a 9b       	mov	r11,r5
80030272:	e0 a0 03 b3 	rcall	800309d8 <__avr32_f64_mul>
80030276:	e0 68 55 49 	mov	r8,21833
8003027a:	ea 18 55 55 	orh	r8,0x5555
8003027e:	e0 69 55 55 	mov	r9,21845
80030282:	ea 19 3f c5 	orh	r9,0x3fc5
80030286:	e0 a0 04 95 	rcall	80030bb0 <__avr32_f64_sub>
8003028a:	14 98       	mov	r8,r10
8003028c:	16 99       	mov	r9,r11
8003028e:	00 9a       	mov	r10,r0
80030290:	02 9b       	mov	r11,r1
80030292:	e0 a0 03 a3 	rcall	800309d8 <__avr32_f64_mul>
80030296:	14 98       	mov	r8,r10
80030298:	16 99       	mov	r9,r11
8003029a:	0c 9a       	mov	r10,r6
8003029c:	0e 9b       	mov	r11,r7
8003029e:	e0 a0 05 57 	rcall	80030d4c <__avr32_f64_add>
800302a2:	c3 a8       	rjmp	80030316 <__kernel_sin+0x186>
800302a4:	30 08       	mov	r8,0
800302a6:	fc 19 3f e0 	movh	r9,0x3fe0
800302aa:	fa ea 00 08 	ld.d	r10,sp[8]
800302ae:	e0 a0 03 95 	rcall	800309d8 <__avr32_f64_mul>
800302b2:	04 98       	mov	r8,r2
800302b4:	fa eb 00 00 	st.d	sp[0],r10
800302b8:	06 99       	mov	r9,r3
800302ba:	00 9a       	mov	r10,r0
800302bc:	02 9b       	mov	r11,r1
800302be:	e0 a0 03 8d 	rcall	800309d8 <__avr32_f64_mul>
800302c2:	14 98       	mov	r8,r10
800302c4:	16 99       	mov	r9,r11
800302c6:	fa ea 00 00 	ld.d	r10,sp[0]
800302ca:	e0 a0 04 73 	rcall	80030bb0 <__avr32_f64_sub>
800302ce:	14 98       	mov	r8,r10
800302d0:	16 99       	mov	r9,r11
800302d2:	08 9a       	mov	r10,r4
800302d4:	0a 9b       	mov	r11,r5
800302d6:	e0 a0 03 81 	rcall	800309d8 <__avr32_f64_mul>
800302da:	fa e8 00 08 	ld.d	r8,sp[8]
800302de:	e0 a0 04 69 	rcall	80030bb0 <__avr32_f64_sub>
800302e2:	e0 68 55 49 	mov	r8,21833
800302e6:	ea 18 55 55 	orh	r8,0x5555
800302ea:	14 94       	mov	r4,r10
800302ec:	16 95       	mov	r5,r11
800302ee:	e0 69 55 55 	mov	r9,21845
800302f2:	ea 19 3f c5 	orh	r9,0x3fc5
800302f6:	00 9a       	mov	r10,r0
800302f8:	02 9b       	mov	r11,r1
800302fa:	e0 a0 03 6f 	rcall	800309d8 <__avr32_f64_mul>
800302fe:	14 98       	mov	r8,r10
80030300:	16 99       	mov	r9,r11
80030302:	08 9a       	mov	r10,r4
80030304:	0a 9b       	mov	r11,r5
80030306:	e0 a0 05 23 	rcall	80030d4c <__avr32_f64_add>
8003030a:	14 98       	mov	r8,r10
8003030c:	16 99       	mov	r9,r11
8003030e:	0c 9a       	mov	r10,r6
80030310:	0e 9b       	mov	r11,r7
80030312:	e0 a0 04 4f 	rcall	80030bb0 <__avr32_f64_sub>
80030316:	14 96       	mov	r6,r10
80030318:	16 97       	mov	r7,r11
8003031a:	0c 9a       	mov	r10,r6
8003031c:	0e 9b       	mov	r11,r7
8003031e:	2f cd       	sub	sp,-16
80030320:	d8 32       	popm	r0-r7,pc
80030322:	d7 03       	nop

80030324 <atan>:
80030324:	d4 31       	pushm	r0-r7,lr
80030326:	20 1d       	sub	sp,4
80030328:	50 0b       	stdsp	sp[0x0],r11
8003032a:	16 96       	mov	r6,r11
8003032c:	14 97       	mov	r7,r10
8003032e:	e7 db c0 1f 	bfextu	r3,r11,0x0,0x1f
80030332:	e0 68 ff ff 	mov	r8,65535
80030336:	ea 18 44 0f 	orh	r8,0x440f
8003033a:	10 33       	cp.w	r3,r8
8003033c:	e0 8a 00 24 	brle	80030384 <atan+0x60>
80030340:	fc 1c 7f f0 	movh	r12,0x7ff0
80030344:	18 33       	cp.w	r3,r12
80030346:	e0 89 00 08 	brgt	80030356 <atan+0x32>
8003034a:	5f 0c       	sreq	r12
8003034c:	58 0a       	cp.w	r10,0
8003034e:	5f 18       	srne	r8
80030350:	f9 e8 00 08 	and	r8,r12,r8
80030354:	c0 80       	breq	80030364 <atan+0x40>
80030356:	0c 9b       	mov	r11,r6
80030358:	0e 9a       	mov	r10,r7
8003035a:	0c 99       	mov	r9,r6
8003035c:	0e 98       	mov	r8,r7
8003035e:	e0 a0 04 f7 	rcall	80030d4c <__avr32_f64_add>
80030362:	c5 99       	rjmp	80030614 <atan+0x2f0>
80030364:	e0 68 21 fb 	mov	r8,8699
80030368:	ea 18 bf f9 	orh	r8,0xbff9
8003036c:	e0 66 21 fb 	mov	r6,8699
80030370:	ea 16 3f f9 	orh	r6,0x3ff9
80030374:	e0 67 2d 18 	mov	r7,11544
80030378:	ea 17 54 44 	orh	r7,0x5444
8003037c:	58 0b       	cp.w	r11,0
8003037e:	f0 06 17 a0 	movle	r6,r8
80030382:	c6 d9       	rjmp	8003065c <atan+0x338>
80030384:	e0 68 ff ff 	mov	r8,65535
80030388:	ea 18 3f db 	orh	r8,0x3fdb
8003038c:	10 33       	cp.w	r3,r8
8003038e:	e0 89 00 1d 	brgt	800303c8 <atan+0xa4>
80030392:	e0 6c ff ff 	mov	r12,65535
80030396:	ea 1c 3e 1f 	orh	r12,0x3e1f
8003039a:	18 33       	cp.w	r3,r12
8003039c:	e0 89 00 73 	brgt	80030482 <atan+0x15e>
800303a0:	e0 68 75 9c 	mov	r8,30108
800303a4:	ea 18 88 00 	orh	r8,0x8800
800303a8:	e0 69 e4 3c 	mov	r9,58428
800303ac:	ea 19 7e 37 	orh	r9,0x7e37
800303b0:	0c 9b       	mov	r11,r6
800303b2:	e0 a0 04 cd 	rcall	80030d4c <__avr32_f64_add>
800303b6:	14 98       	mov	r8,r10
800303b8:	16 99       	mov	r9,r11
800303ba:	30 0a       	mov	r10,0
800303bc:	fc 1b 3f f0 	movh	r11,0x3ff0
800303c0:	e0 a0 06 1e 	rcall	80030ffc <__avr32_f64_cmp_lt>
800303c4:	c5 f0       	breq	80030482 <atan+0x15e>
800303c6:	c4 b9       	rjmp	8003065c <atan+0x338>
800303c8:	0c 9b       	mov	r11,r6
800303ca:	c5 1d       	rcall	8003066c <fabs>
800303cc:	e0 68 ff ff 	mov	r8,65535
800303d0:	ea 18 3f f2 	orh	r8,0x3ff2
800303d4:	14 94       	mov	r4,r10
800303d6:	16 95       	mov	r5,r11
800303d8:	10 33       	cp.w	r3,r8
800303da:	e0 89 00 33 	brgt	80030440 <atan+0x11c>
800303de:	e0 6c ff ff 	mov	r12,65535
800303e2:	ea 1c 3f e5 	orh	r12,0x3fe5
800303e6:	18 33       	cp.w	r3,r12
800303e8:	e0 89 00 14 	brgt	80030410 <atan+0xec>
800303ec:	0a 99       	mov	r9,r5
800303ee:	14 98       	mov	r8,r10
800303f0:	e0 a0 04 ae 	rcall	80030d4c <__avr32_f64_add>
800303f4:	30 08       	mov	r8,0
800303f6:	fc 19 3f f0 	movh	r9,0x3ff0
800303fa:	e0 a0 03 db 	rcall	80030bb0 <__avr32_f64_sub>
800303fe:	30 08       	mov	r8,0
80030400:	14 96       	mov	r6,r10
80030402:	16 97       	mov	r7,r11
80030404:	08 9a       	mov	r10,r4
80030406:	0a 9b       	mov	r11,r5
80030408:	fc 19 40 00 	movh	r9,0x4000
8003040c:	30 05       	mov	r5,0
8003040e:	c0 e8       	rjmp	8003042a <atan+0x106>
80030410:	30 08       	mov	r8,0
80030412:	fc 19 3f f0 	movh	r9,0x3ff0
80030416:	e0 a0 03 cd 	rcall	80030bb0 <__avr32_f64_sub>
8003041a:	30 08       	mov	r8,0
8003041c:	14 96       	mov	r6,r10
8003041e:	16 97       	mov	r7,r11
80030420:	08 9a       	mov	r10,r4
80030422:	0a 9b       	mov	r11,r5
80030424:	fc 19 3f f0 	movh	r9,0x3ff0
80030428:	30 15       	mov	r5,1
8003042a:	e0 a0 04 91 	rcall	80030d4c <__avr32_f64_add>
8003042e:	14 98       	mov	r8,r10
80030430:	16 99       	mov	r9,r11
80030432:	0c 9a       	mov	r10,r6
80030434:	0e 9b       	mov	r11,r7
80030436:	e0 a0 06 17 	rcall	80031064 <__avr32_f64_div>
8003043a:	16 96       	mov	r6,r11
8003043c:	14 97       	mov	r7,r10
8003043e:	c2 38       	rjmp	80030484 <atan+0x160>
80030440:	e0 68 7f ff 	mov	r8,32767
80030444:	ea 18 40 03 	orh	r8,0x4003
80030448:	10 33       	cp.w	r3,r8
8003044a:	e0 89 00 15 	brgt	80030474 <atan+0x150>
8003044e:	30 08       	mov	r8,0
80030450:	fc 19 3f f8 	movh	r9,0x3ff8
80030454:	e0 a0 03 ae 	rcall	80030bb0 <__avr32_f64_sub>
80030458:	30 08       	mov	r8,0
8003045a:	16 97       	mov	r7,r11
8003045c:	fc 19 3f f8 	movh	r9,0x3ff8
80030460:	0a 9b       	mov	r11,r5
80030462:	14 96       	mov	r6,r10
80030464:	08 9a       	mov	r10,r4
80030466:	e0 a0 02 b9 	rcall	800309d8 <__avr32_f64_mul>
8003046a:	30 08       	mov	r8,0
8003046c:	fc 19 3f f0 	movh	r9,0x3ff0
80030470:	30 25       	mov	r5,2
80030472:	cd cb       	rjmp	8003042a <atan+0x106>
80030474:	14 98       	mov	r8,r10
80030476:	0a 99       	mov	r9,r5
80030478:	30 0a       	mov	r10,0
8003047a:	fc 1b bf f0 	movh	r11,0xbff0
8003047e:	30 35       	mov	r5,3
80030480:	cd bb       	rjmp	80030436 <atan+0x112>
80030482:	3f f5       	mov	r5,-1
80030484:	0c 99       	mov	r9,r6
80030486:	0e 98       	mov	r8,r7
80030488:	0c 9b       	mov	r11,r6
8003048a:	0e 9a       	mov	r10,r7
8003048c:	e0 a0 02 a6 	rcall	800309d8 <__avr32_f64_mul>
80030490:	16 91       	mov	r1,r11
80030492:	14 90       	mov	r0,r10
80030494:	02 99       	mov	r9,r1
80030496:	14 98       	mov	r8,r10
80030498:	e0 a0 02 a0 	rcall	800309d8 <__avr32_f64_mul>
8003049c:	e0 68 da 11 	mov	r8,55825
800304a0:	ea 18 e3 22 	orh	r8,0xe322
800304a4:	14 92       	mov	r2,r10
800304a6:	16 93       	mov	r3,r11
800304a8:	e0 69 ad 3a 	mov	r9,44346
800304ac:	ea 19 3f 90 	orh	r9,0x3f90
800304b0:	e0 a0 02 94 	rcall	800309d8 <__avr32_f64_mul>
800304b4:	e0 68 0d eb 	mov	r8,3563
800304b8:	ea 18 24 76 	orh	r8,0x2476
800304bc:	e0 69 7b 4b 	mov	r9,31563
800304c0:	ea 19 3f a9 	orh	r9,0x3fa9
800304c4:	e0 a0 04 44 	rcall	80030d4c <__avr32_f64_add>
800304c8:	14 98       	mov	r8,r10
800304ca:	16 99       	mov	r9,r11
800304cc:	04 9a       	mov	r10,r2
800304ce:	06 9b       	mov	r11,r3
800304d0:	e0 a0 02 84 	rcall	800309d8 <__avr32_f64_mul>
800304d4:	e0 68 3d 51 	mov	r8,15697
800304d8:	ea 18 a0 d0 	orh	r8,0xa0d0
800304dc:	e0 69 0d 66 	mov	r9,3430
800304e0:	ea 19 3f b1 	orh	r9,0x3fb1
800304e4:	e0 a0 04 34 	rcall	80030d4c <__avr32_f64_add>
800304e8:	14 98       	mov	r8,r10
800304ea:	16 99       	mov	r9,r11
800304ec:	04 9a       	mov	r10,r2
800304ee:	06 9b       	mov	r11,r3
800304f0:	e0 a0 02 74 	rcall	800309d8 <__avr32_f64_mul>
800304f4:	e0 68 20 6e 	mov	r8,8302
800304f8:	ea 18 c5 4c 	orh	r8,0xc54c
800304fc:	e0 69 45 cd 	mov	r9,17869
80030500:	ea 19 3f b7 	orh	r9,0x3fb7
80030504:	e0 a0 04 24 	rcall	80030d4c <__avr32_f64_add>
80030508:	14 98       	mov	r8,r10
8003050a:	16 99       	mov	r9,r11
8003050c:	04 9a       	mov	r10,r2
8003050e:	06 9b       	mov	r11,r3
80030510:	e0 a0 02 64 	rcall	800309d8 <__avr32_f64_mul>
80030514:	e0 68 83 ff 	mov	r8,33791
80030518:	ea 18 92 00 	orh	r8,0x9200
8003051c:	e0 69 49 24 	mov	r9,18724
80030520:	ea 19 3f c2 	orh	r9,0x3fc2
80030524:	e0 a0 04 14 	rcall	80030d4c <__avr32_f64_add>
80030528:	14 98       	mov	r8,r10
8003052a:	16 99       	mov	r9,r11
8003052c:	04 9a       	mov	r10,r2
8003052e:	06 9b       	mov	r11,r3
80030530:	e0 a0 02 54 	rcall	800309d8 <__avr32_f64_mul>
80030534:	e0 68 55 0d 	mov	r8,21773
80030538:	ea 18 55 55 	orh	r8,0x5555
8003053c:	e0 69 55 55 	mov	r9,21845
80030540:	ea 19 3f d5 	orh	r9,0x3fd5
80030544:	e0 a0 04 04 	rcall	80030d4c <__avr32_f64_add>
80030548:	14 98       	mov	r8,r10
8003054a:	16 99       	mov	r9,r11
8003054c:	00 9a       	mov	r10,r0
8003054e:	02 9b       	mov	r11,r1
80030550:	e0 a0 02 44 	rcall	800309d8 <__avr32_f64_mul>
80030554:	e0 68 6c 2f 	mov	r8,27695
80030558:	ea 18 2c 6a 	orh	r8,0x2c6a
8003055c:	e0 69 b4 44 	mov	r9,46148
80030560:	ea 19 bf a2 	orh	r9,0xbfa2
80030564:	14 90       	mov	r0,r10
80030566:	16 91       	mov	r1,r11
80030568:	04 9a       	mov	r10,r2
8003056a:	06 9b       	mov	r11,r3
8003056c:	e0 a0 02 36 	rcall	800309d8 <__avr32_f64_mul>
80030570:	e0 68 fd 9a 	mov	r8,64922
80030574:	ea 18 52 de 	orh	r8,0x52de
80030578:	e0 69 de 2d 	mov	r9,56877
8003057c:	ea 19 3f ad 	orh	r9,0x3fad
80030580:	e0 a0 03 18 	rcall	80030bb0 <__avr32_f64_sub>
80030584:	14 98       	mov	r8,r10
80030586:	16 99       	mov	r9,r11
80030588:	04 9a       	mov	r10,r2
8003058a:	06 9b       	mov	r11,r3
8003058c:	e0 a0 02 26 	rcall	800309d8 <__avr32_f64_mul>
80030590:	e0 68 9a 6d 	mov	r8,39533
80030594:	ea 18 af 74 	orh	r8,0xaf74
80030598:	e0 69 b0 f2 	mov	r9,45298
8003059c:	ea 19 3f b3 	orh	r9,0x3fb3
800305a0:	e0 a0 03 08 	rcall	80030bb0 <__avr32_f64_sub>
800305a4:	14 98       	mov	r8,r10
800305a6:	16 99       	mov	r9,r11
800305a8:	04 9a       	mov	r10,r2
800305aa:	06 9b       	mov	r11,r3
800305ac:	e0 a0 02 16 	rcall	800309d8 <__avr32_f64_mul>
800305b0:	e0 68 16 71 	mov	r8,5745
800305b4:	ea 18 fe 23 	orh	r8,0xfe23
800305b8:	e0 69 71 c6 	mov	r9,29126
800305bc:	ea 19 3f bc 	orh	r9,0x3fbc
800305c0:	e0 a0 02 f8 	rcall	80030bb0 <__avr32_f64_sub>
800305c4:	14 98       	mov	r8,r10
800305c6:	16 99       	mov	r9,r11
800305c8:	04 9a       	mov	r10,r2
800305ca:	06 9b       	mov	r11,r3
800305cc:	e0 a0 02 06 	rcall	800309d8 <__avr32_f64_mul>
800305d0:	e0 68 eb c4 	mov	r8,60356
800305d4:	ea 18 99 98 	orh	r8,0x9998
800305d8:	e0 69 99 99 	mov	r9,39321
800305dc:	ea 19 3f c9 	orh	r9,0x3fc9
800305e0:	e0 a0 02 e8 	rcall	80030bb0 <__avr32_f64_sub>
800305e4:	14 98       	mov	r8,r10
800305e6:	16 99       	mov	r9,r11
800305e8:	04 9a       	mov	r10,r2
800305ea:	06 9b       	mov	r11,r3
800305ec:	cf 6d       	rcall	800309d8 <__avr32_f64_mul>
800305ee:	14 98       	mov	r8,r10
800305f0:	16 99       	mov	r9,r11
800305f2:	5b f5       	cp.w	r5,-1
800305f4:	c1 31       	brne	8003061a <atan+0x2f6>
800305f6:	00 9a       	mov	r10,r0
800305f8:	02 9b       	mov	r11,r1
800305fa:	e0 a0 03 a9 	rcall	80030d4c <__avr32_f64_add>
800305fe:	14 98       	mov	r8,r10
80030600:	16 99       	mov	r9,r11
80030602:	0e 9a       	mov	r10,r7
80030604:	0c 9b       	mov	r11,r6
80030606:	ce 9d       	rcall	800309d8 <__avr32_f64_mul>
80030608:	14 98       	mov	r8,r10
8003060a:	16 99       	mov	r9,r11
8003060c:	0e 9a       	mov	r10,r7
8003060e:	0c 9b       	mov	r11,r6
80030610:	e0 a0 02 d0 	rcall	80030bb0 <__avr32_f64_sub>
80030614:	16 96       	mov	r6,r11
80030616:	14 97       	mov	r7,r10
80030618:	c2 28       	rjmp	8003065c <atan+0x338>
8003061a:	00 9a       	mov	r10,r0
8003061c:	02 9b       	mov	r11,r1
8003061e:	e0 a0 03 97 	rcall	80030d4c <__avr32_f64_add>
80030622:	14 98       	mov	r8,r10
80030624:	16 99       	mov	r9,r11
80030626:	0e 9a       	mov	r10,r7
80030628:	0c 9b       	mov	r11,r6
8003062a:	cd 7d       	rcall	800309d8 <__avr32_f64_mul>
8003062c:	48 e8       	lddpc	r8,80030664 <atan+0x340>
8003062e:	f0 05 02 38 	ld.d	r8,r8[r5<<0x3]
80030632:	e0 a0 02 bf 	rcall	80030bb0 <__avr32_f64_sub>
80030636:	0c 99       	mov	r9,r6
80030638:	0e 98       	mov	r8,r7
8003063a:	e0 a0 02 bb 	rcall	80030bb0 <__avr32_f64_sub>
8003063e:	14 98       	mov	r8,r10
80030640:	16 99       	mov	r9,r11
80030642:	48 aa       	lddpc	r10,80030668 <atan+0x344>
80030644:	f4 05 02 3a 	ld.d	r10,r10[r5<<0x3]
80030648:	e0 a0 02 b4 	rcall	80030bb0 <__avr32_f64_sub>
8003064c:	40 0c       	lddsp	r12,sp[0x0]
8003064e:	16 96       	mov	r6,r11
80030650:	14 97       	mov	r7,r10
80030652:	ee 16 80 00 	eorh	r6,0x8000
80030656:	58 0c       	cp.w	r12,0
80030658:	c0 25       	brlt	8003065c <atan+0x338>
8003065a:	16 96       	mov	r6,r11
8003065c:	0c 9b       	mov	r11,r6
8003065e:	0e 9a       	mov	r10,r7
80030660:	2f fd       	sub	sp,-4
80030662:	d8 32       	popm	r0-r7,pc
80030664:	80 03       	ld.sh	r3,r0[0x0]
80030666:	21 90       	sub	r0,25
80030668:	80 03       	ld.sh	r3,r0[0x0]
8003066a:	21 b0       	sub	r0,27

8003066c <fabs>:
8003066c:	f3 db c0 1f 	bfextu	r9,r11,0x0,0x1f
80030670:	12 9b       	mov	r11,r9
80030672:	5e fc       	retal	r12

80030674 <finite>:
80030674:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
80030678:	fc 18 80 10 	movh	r8,0x8010
8003067c:	f6 08 00 0c 	add	r12,r11,r8
80030680:	bf 9c       	lsr	r12,0x1f
80030682:	5e fc       	retal	r12

80030684 <floor>:
80030684:	d4 31       	pushm	r0-r7,lr
80030686:	e9 db c2 8b 	bfextu	r4,r11,0x14,0xb
8003068a:	14 98       	mov	r8,r10
8003068c:	16 99       	mov	r9,r11
8003068e:	14 92       	mov	r2,r10
80030690:	16 93       	mov	r3,r11
80030692:	16 97       	mov	r7,r11
80030694:	14 91       	mov	r1,r10
80030696:	14 96       	mov	r6,r10
80030698:	e8 c5 03 ff 	sub	r5,r4,1023
8003069c:	59 35       	cp.w	r5,19
8003069e:	e0 89 00 48 	brgt	8003072e <floor+0xaa>
800306a2:	58 05       	cp.w	r5,0
800306a4:	c2 04       	brge	800306e4 <floor+0x60>
800306a6:	e0 68 75 9c 	mov	r8,30108
800306aa:	ea 18 88 00 	orh	r8,0x8800
800306ae:	e0 69 e4 3c 	mov	r9,58428
800306b2:	ea 19 7e 37 	orh	r9,0x7e37
800306b6:	e0 a0 03 4b 	rcall	80030d4c <__avr32_f64_add>
800306ba:	14 98       	mov	r8,r10
800306bc:	16 99       	mov	r9,r11
800306be:	30 0a       	mov	r10,0
800306c0:	30 0b       	mov	r11,0
800306c2:	e0 a0 04 9d 	rcall	80030ffc <__avr32_f64_cmp_lt>
800306c6:	c6 a0       	breq	8003079a <floor+0x116>
800306c8:	58 03       	cp.w	r3,0
800306ca:	c0 45       	brlt	800306d2 <floor+0x4e>
800306cc:	30 06       	mov	r6,0
800306ce:	0c 97       	mov	r7,r6
800306d0:	c6 58       	rjmp	8003079a <floor+0x116>
800306d2:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
800306d6:	f1 e2 10 06 	or	r6,r8,r2
800306da:	fc 18 bf f0 	movh	r8,0xbff0
800306de:	f0 07 17 10 	movne	r7,r8
800306e2:	c2 48       	rjmp	8003072a <floor+0xa6>
800306e4:	ee 74 ff ff 	mov	r4,1048575
800306e8:	e8 05 08 44 	asr	r4,r4,r5
800306ec:	e9 eb 00 0c 	and	r12,r4,r11
800306f0:	f9 ea 10 01 	or	r1,r12,r10
800306f4:	c5 50       	breq	8003079e <floor+0x11a>
800306f6:	e0 68 75 9c 	mov	r8,30108
800306fa:	ea 18 88 00 	orh	r8,0x8800
800306fe:	e0 69 e4 3c 	mov	r9,58428
80030702:	ea 19 7e 37 	orh	r9,0x7e37
80030706:	e0 a0 03 23 	rcall	80030d4c <__avr32_f64_add>
8003070a:	14 98       	mov	r8,r10
8003070c:	16 99       	mov	r9,r11
8003070e:	30 0a       	mov	r10,0
80030710:	30 0b       	mov	r11,0
80030712:	e0 a0 04 75 	rcall	80030ffc <__avr32_f64_cmp_lt>
80030716:	c4 20       	breq	8003079a <floor+0x116>
80030718:	58 03       	cp.w	r3,0
8003071a:	c0 64       	brge	80030726 <floor+0xa2>
8003071c:	fc 18 00 10 	movh	r8,0x10
80030720:	f0 05 08 45 	asr	r5,r8,r5
80030724:	0a 07       	add	r7,r5
80030726:	5c d4       	com	r4
80030728:	08 67       	and	r7,r4
8003072a:	30 06       	mov	r6,0
8003072c:	c3 78       	rjmp	8003079a <floor+0x116>
8003072e:	e0 45 00 33 	cp.w	r5,51
80030732:	e0 8a 00 0a 	brle	80030746 <floor+0xc2>
80030736:	e0 45 04 00 	cp.w	r5,1024
8003073a:	c3 21       	brne	8003079e <floor+0x11a>
8003073c:	e0 a0 03 08 	rcall	80030d4c <__avr32_f64_add>
80030740:	14 98       	mov	r8,r10
80030742:	16 99       	mov	r9,r11
80030744:	c2 d8       	rjmp	8003079e <floor+0x11a>
80030746:	3f fc       	mov	r12,-1
80030748:	e8 c4 04 13 	sub	r4,r4,1043
8003074c:	f8 04 0a 44 	lsr	r4,r12,r4
80030750:	e9 ea 00 0c 	and	r12,r4,r10
80030754:	c2 50       	breq	8003079e <floor+0x11a>
80030756:	e0 68 75 9c 	mov	r8,30108
8003075a:	ea 18 88 00 	orh	r8,0x8800
8003075e:	e0 69 e4 3c 	mov	r9,58428
80030762:	ea 19 7e 37 	orh	r9,0x7e37
80030766:	e0 a0 02 f3 	rcall	80030d4c <__avr32_f64_add>
8003076a:	14 98       	mov	r8,r10
8003076c:	16 99       	mov	r9,r11
8003076e:	30 0a       	mov	r10,0
80030770:	30 0b       	mov	r11,0
80030772:	e0 a0 04 45 	rcall	80030ffc <__avr32_f64_cmp_lt>
80030776:	c1 20       	breq	8003079a <floor+0x116>
80030778:	58 03       	cp.w	r3,0
8003077a:	c0 e4       	brge	80030796 <floor+0x112>
8003077c:	59 45       	cp.w	r5,20
8003077e:	c0 31       	brne	80030784 <floor+0x100>
80030780:	2f f7       	sub	r7,-1
80030782:	c0 a8       	rjmp	80030796 <floor+0x112>
80030784:	30 18       	mov	r8,1
80030786:	ea 05 11 34 	rsub	r5,r5,52
8003078a:	f0 05 09 45 	lsl	r5,r8,r5
8003078e:	0a 06       	add	r6,r5
80030790:	04 36       	cp.w	r6,r2
80030792:	e7 d8 e3 07 	addcs	r7,r3,r8
80030796:	5c d4       	com	r4
80030798:	08 66       	and	r6,r4
8003079a:	0e 99       	mov	r9,r7
8003079c:	0c 98       	mov	r8,r6
8003079e:	10 9a       	mov	r10,r8
800307a0:	12 9b       	mov	r11,r9
800307a2:	d8 32       	popm	r0-r7,pc

800307a4 <__isnand>:
800307a4:	14 98       	mov	r8,r10
800307a6:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800307aa:	f0 0c 11 00 	rsub	r12,r8,0
800307ae:	10 4c       	or	r12,r8
800307b0:	fc 18 7f f0 	movh	r8,0x7ff0
800307b4:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
800307b8:	f0 0c 01 0c 	sub	r12,r8,r12
800307bc:	bf 9c       	lsr	r12,0x1f
800307be:	5e fc       	retal	r12

800307c0 <matherr>:
800307c0:	5e fd       	retal	0

800307c2 <nan>:
800307c2:	30 0a       	mov	r10,0
800307c4:	fc 1b 7f f8 	movh	r11,0x7ff8
800307c8:	5e fc       	retal	r12
800307ca:	d7 03       	nop

800307cc <rint>:
800307cc:	d4 21       	pushm	r4-r7,lr
800307ce:	20 2d       	sub	sp,8
800307d0:	ed db c2 8b 	bfextu	r6,r11,0x14,0xb
800307d4:	14 94       	mov	r4,r10
800307d6:	16 95       	mov	r5,r11
800307d8:	14 98       	mov	r8,r10
800307da:	16 9e       	mov	lr,r11
800307dc:	16 9c       	mov	r12,r11
800307de:	f6 07 16 1f 	lsr	r7,r11,0x1f
800307e2:	ec c9 03 ff 	sub	r9,r6,1023
800307e6:	59 39       	cp.w	r9,19
800307e8:	e0 89 00 49 	brgt	8003087a <rint+0xae>
800307ec:	58 09       	cp.w	r9,0
800307ee:	c2 b4       	brge	80030844 <rint+0x78>
800307f0:	f3 db c0 1f 	bfextu	r9,r11,0x0,0x1f
800307f4:	14 49       	or	r9,r10
800307f6:	c7 10       	breq	800308d8 <rint+0x10c>
800307f8:	fd db c0 14 	bfextu	lr,r11,0x0,0x14
800307fc:	4b 9c       	lddpc	r12,800308e0 <rint+0x114>
800307fe:	fd e4 10 08 	or	r8,lr,r4
80030802:	16 99       	mov	r9,r11
80030804:	f0 0e 11 00 	rsub	lr,r8,0
80030808:	e6 19 ff fe 	andh	r9,0xfffe,COH
8003080c:	fd e8 10 08 	or	r8,lr,r8
80030810:	ad 88       	lsr	r8,0xc
80030812:	e6 18 00 08 	andh	r8,0x8,COH
80030816:	f1 e9 10 0b 	or	r11,r8,r9
8003081a:	f8 07 02 34 	ld.d	r4,r12[r7<<0x3]
8003081e:	14 98       	mov	r8,r10
80030820:	16 99       	mov	r9,r11
80030822:	08 9a       	mov	r10,r4
80030824:	0a 9b       	mov	r11,r5
80030826:	e0 a0 02 93 	rcall	80030d4c <__avr32_f64_add>
8003082a:	08 98       	mov	r8,r4
8003082c:	fa eb 00 00 	st.d	sp[0],r10
80030830:	0a 99       	mov	r9,r5
80030832:	fa ea 00 00 	ld.d	r10,sp[0]
80030836:	cb dd       	rcall	80030bb0 <__avr32_f64_sub>
80030838:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
8003083c:	14 94       	mov	r4,r10
8003083e:	f7 e7 11 f5 	or	r5,r11,r7<<0x1f
80030842:	c4 b8       	rjmp	800308d8 <rint+0x10c>
80030844:	ee 7a ff ff 	mov	r10,1048575
80030848:	f4 09 08 4a 	asr	r10,r10,r9
8003084c:	f5 eb 00 0b 	and	r11,r10,r11
80030850:	08 4b       	or	r11,r4
80030852:	c4 30       	breq	800308d8 <rint+0x10c>
80030854:	a1 9a       	lsr	r10,0x1
80030856:	f5 e5 00 0b 	and	r11,r10,r5
8003085a:	08 4b       	or	r11,r4
8003085c:	c0 31       	brne	80030862 <rint+0x96>
8003085e:	16 98       	mov	r8,r11
80030860:	c2 b8       	rjmp	800308b6 <rint+0xea>
80030862:	59 39       	cp.w	r9,19
80030864:	c0 41       	brne	8003086c <rint+0xa0>
80030866:	fc 18 40 00 	movh	r8,0x4000
8003086a:	c2 68       	rjmp	800308b6 <rint+0xea>
8003086c:	14 8c       	andn	r12,r10
8003086e:	e2 6a 00 00 	mov	r10,131072
80030872:	f4 09 08 49 	asr	r9,r10,r9
80030876:	12 4c       	or	r12,r9
80030878:	c1 f8       	rjmp	800308b6 <rint+0xea>
8003087a:	e0 49 00 33 	cp.w	r9,51
8003087e:	e0 8a 00 0a 	brle	80030892 <rint+0xc6>
80030882:	e0 49 04 00 	cp.w	r9,1024
80030886:	c2 91       	brne	800308d8 <rint+0x10c>
80030888:	14 98       	mov	r8,r10
8003088a:	16 99       	mov	r9,r11
8003088c:	e0 a0 02 60 	rcall	80030d4c <__avr32_f64_add>
80030890:	c2 28       	rjmp	800308d4 <rint+0x108>
80030892:	ec c6 04 13 	sub	r6,r6,1043
80030896:	3f f9       	mov	r9,-1
80030898:	f2 06 0a 49 	lsr	r9,r9,r6
8003089c:	f3 ea 00 0a 	and	r10,r9,r10
800308a0:	c1 c0       	breq	800308d8 <rint+0x10c>
800308a2:	a1 99       	lsr	r9,0x1
800308a4:	f3 e4 00 0a 	and	r10,r9,r4
800308a8:	c0 70       	breq	800308b6 <rint+0xea>
800308aa:	12 88       	andn	r8,r9
800308ac:	fc 19 40 00 	movh	r9,0x4000
800308b0:	f2 06 08 46 	asr	r6,r9,r6
800308b4:	0c 48       	or	r8,r6
800308b6:	48 ba       	lddpc	r10,800308e0 <rint+0x114>
800308b8:	18 99       	mov	r9,r12
800308ba:	f4 07 02 36 	ld.d	r6,r10[r7<<0x3]
800308be:	0c 9a       	mov	r10,r6
800308c0:	0e 9b       	mov	r11,r7
800308c2:	e0 a0 02 45 	rcall	80030d4c <__avr32_f64_add>
800308c6:	0c 98       	mov	r8,r6
800308c8:	fa eb 00 00 	st.d	sp[0],r10
800308cc:	0e 99       	mov	r9,r7
800308ce:	fa ea 00 00 	ld.d	r10,sp[0]
800308d2:	c6 fd       	rcall	80030bb0 <__avr32_f64_sub>
800308d4:	14 94       	mov	r4,r10
800308d6:	16 95       	mov	r5,r11
800308d8:	08 9a       	mov	r10,r4
800308da:	0a 9b       	mov	r11,r5
800308dc:	2f ed       	sub	sp,-8
800308de:	d8 22       	popm	r4-r7,pc
800308e0:	80 03       	ld.sh	r3,r0[0x0]
800308e2:	21 d0       	sub	r0,29

800308e4 <scalbn>:
800308e4:	d4 21       	pushm	r4-r7,lr
800308e6:	18 97       	mov	r7,r12
800308e8:	14 98       	mov	r8,r10
800308ea:	16 99       	mov	r9,r11
800308ec:	14 94       	mov	r4,r10
800308ee:	16 95       	mov	r5,r11
800308f0:	14 96       	mov	r6,r10
800308f2:	16 9c       	mov	r12,r11
800308f4:	fd db c2 8b 	bfextu	lr,r11,0x14,0xb
800308f8:	c1 11       	brne	8003091a <scalbn+0x36>
800308fa:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
800308fe:	14 4c       	or	r12,r10
80030900:	c5 c0       	breq	800309b8 <scalbn+0xd4>
80030902:	30 08       	mov	r8,0
80030904:	fc 19 43 50 	movh	r9,0x4350
80030908:	c6 8c       	rcall	800309d8 <__avr32_f64_mul>
8003090a:	16 99       	mov	r9,r11
8003090c:	14 98       	mov	r8,r10
8003090e:	14 94       	mov	r4,r10
80030910:	12 95       	mov	r5,r9
80030912:	fe 57 3c b0 	cp.w	r7,-50000
80030916:	c0 84       	brge	80030926 <scalbn+0x42>
80030918:	c3 a8       	rjmp	8003098c <scalbn+0xa8>
8003091a:	e0 4e 07 ff 	cp.w	lr,2047
8003091e:	c0 81       	brne	8003092e <scalbn+0x4a>
80030920:	e0 a0 02 16 	rcall	80030d4c <__avr32_f64_add>
80030924:	c4 88       	rjmp	800309b4 <scalbn+0xd0>
80030926:	fd d9 c2 8b 	bfextu	lr,r9,0x14,0xb
8003092a:	12 9c       	mov	r12,r9
8003092c:	23 6e       	sub	lr,54
8003092e:	0e 0e       	add	lr,r7
80030930:	e0 4e 07 fe 	cp.w	lr,2046
80030934:	e0 89 00 11 	brgt	80030956 <scalbn+0x72>
80030938:	58 0e       	cp.w	lr,0
8003093a:	e0 8a 00 07 	brle	80030948 <scalbn+0x64>
8003093e:	e4 1c 80 0f 	andh	r12,0x800f
80030942:	f9 ee 11 49 	or	r9,r12,lr<<0x14
80030946:	c3 98       	rjmp	800309b8 <scalbn+0xd4>
80030948:	fe 5e ff cb 	cp.w	lr,-53
8003094c:	c2 94       	brge	8003099e <scalbn+0xba>
8003094e:	e0 47 c3 50 	cp.w	r7,50000
80030952:	e0 8a 00 14 	brle	8003097a <scalbn+0x96>
80030956:	e0 6a 75 9c 	mov	r10,30108
8003095a:	ea 1a 88 00 	orh	r10,0x8800
8003095e:	e0 6b e4 3c 	mov	r11,58428
80030962:	ea 1b 7e 37 	orh	r11,0x7e37
80030966:	c2 dc       	rcall	800309c0 <copysign>
80030968:	e0 68 75 9c 	mov	r8,30108
8003096c:	ea 18 88 00 	orh	r8,0x8800
80030970:	e0 69 e4 3c 	mov	r9,58428
80030974:	ea 19 7e 37 	orh	r9,0x7e37
80030978:	c1 d8       	rjmp	800309b2 <scalbn+0xce>
8003097a:	e0 6a f3 59 	mov	r10,62297
8003097e:	ea 1a c2 f8 	orh	r10,0xc2f8
80030982:	e0 6b 6e 1f 	mov	r11,28191
80030986:	ea 1b 01 a5 	orh	r11,0x1a5
8003098a:	c1 bc       	rcall	800309c0 <copysign>
8003098c:	e0 68 f3 59 	mov	r8,62297
80030990:	ea 18 c2 f8 	orh	r8,0xc2f8
80030994:	e0 69 6e 1f 	mov	r9,28191
80030998:	ea 19 01 a5 	orh	r9,0x1a5
8003099c:	c0 b8       	rjmp	800309b2 <scalbn+0xce>
8003099e:	2c ae       	sub	lr,-54
800309a0:	e4 1c 80 0f 	andh	r12,0x800f
800309a4:	f9 ee 11 49 	or	r9,r12,lr<<0x14
800309a8:	10 9a       	mov	r10,r8
800309aa:	12 9b       	mov	r11,r9
800309ac:	30 08       	mov	r8,0
800309ae:	fc 19 3c 90 	movh	r9,0x3c90
800309b2:	c1 3c       	rcall	800309d8 <__avr32_f64_mul>
800309b4:	14 98       	mov	r8,r10
800309b6:	16 99       	mov	r9,r11
800309b8:	10 9a       	mov	r10,r8
800309ba:	12 9b       	mov	r11,r9
800309bc:	d8 22       	popm	r4-r7,pc
800309be:	d7 03       	nop

800309c0 <copysign>:
800309c0:	d4 21       	pushm	r4-r7,lr
800309c2:	e6 19 80 00 	andh	r9,0x8000,COH
800309c6:	16 95       	mov	r5,r11
800309c8:	14 94       	mov	r4,r10
800309ca:	14 96       	mov	r6,r10
800309cc:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
800309d0:	f3 eb 10 0b 	or	r11,r9,r11
800309d4:	16 97       	mov	r7,r11
800309d6:	d8 22       	popm	r4-r7,pc

800309d8 <__avr32_f64_mul>:
800309d8:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
800309dc:	e0 80 00 dc 	breq	80030b94 <__avr32_f64_mul_op1_zero>
800309e0:	d4 21       	pushm	r4-r7,lr
800309e2:	f7 e9 20 0e 	eor	lr,r11,r9
800309e6:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800309ea:	30 15       	mov	r5,1
800309ec:	c4 30       	breq	80030a72 <__avr32_f64_mul_op1_subnormal>
800309ee:	ab 6b       	lsl	r11,0xa
800309f0:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
800309f4:	ab 6a       	lsl	r10,0xa
800309f6:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
800309fa:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
800309fe:	c5 c0       	breq	80030ab6 <__avr32_f64_mul_op2_subnormal>
80030a00:	a1 78       	lsl	r8,0x1
80030a02:	5c f9       	rol	r9
80030a04:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80030a08:	e0 47 07 ff 	cp.w	r7,2047
80030a0c:	c7 70       	breq	80030afa <__avr32_f64_mul_op_nan_or_inf>
80030a0e:	e0 46 07 ff 	cp.w	r6,2047
80030a12:	c7 40       	breq	80030afa <__avr32_f64_mul_op_nan_or_inf>
80030a14:	ee 06 00 0c 	add	r12,r7,r6
80030a18:	e0 2c 03 fe 	sub	r12,1022
80030a1c:	f6 08 06 44 	mulu.d	r4,r11,r8
80030a20:	f4 09 07 44 	macu.d	r4,r10,r9
80030a24:	f4 08 06 46 	mulu.d	r6,r10,r8
80030a28:	f6 09 06 4a 	mulu.d	r10,r11,r9
80030a2c:	08 07       	add	r7,r4
80030a2e:	f4 05 00 4a 	adc	r10,r10,r5
80030a32:	5c 0b       	acr	r11
80030a34:	ed bb 00 14 	bld	r11,0x14
80030a38:	c0 50       	breq	80030a42 <__avr32_f64_mul+0x6a>
80030a3a:	a1 77       	lsl	r7,0x1
80030a3c:	5c fa       	rol	r10
80030a3e:	5c fb       	rol	r11
80030a40:	20 1c       	sub	r12,1
80030a42:	58 0c       	cp.w	r12,0
80030a44:	e0 8a 00 6f 	brle	80030b22 <__avr32_f64_mul_res_subnormal>
80030a48:	e0 4c 07 ff 	cp.w	r12,2047
80030a4c:	e0 84 00 9c 	brge	80030b84 <__avr32_f64_mul_res_inf>
80030a50:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80030a54:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80030a58:	ef e6 12 17 	or	r7,r7,r6>>0x1
80030a5c:	ee 17 80 00 	eorh	r7,0x8000
80030a60:	f1 b7 04 20 	satu	r7,0x1
80030a64:	0e 0a       	add	r10,r7
80030a66:	5c 0b       	acr	r11
80030a68:	ed be 00 1f 	bld	lr,0x1f
80030a6c:	ef bb 00 1f 	bst	r11,0x1f
80030a70:	d8 22       	popm	r4-r7,pc

80030a72 <__avr32_f64_mul_op1_subnormal>:
80030a72:	e4 1b 00 0f 	andh	r11,0xf
80030a76:	f4 0c 12 00 	clz	r12,r10
80030a7a:	f6 06 12 00 	clz	r6,r11
80030a7e:	f7 bc 03 e1 	sublo	r12,-31
80030a82:	f8 06 17 30 	movlo	r6,r12
80030a86:	f7 b6 02 01 	subhs	r6,1
80030a8a:	e0 46 00 20 	cp.w	r6,32
80030a8e:	c0 d4       	brge	80030aa8 <__avr32_f64_mul_op1_subnormal+0x36>
80030a90:	ec 0c 11 20 	rsub	r12,r6,32
80030a94:	f6 06 09 4b 	lsl	r11,r11,r6
80030a98:	f4 0c 0a 4c 	lsr	r12,r10,r12
80030a9c:	18 4b       	or	r11,r12
80030a9e:	f4 06 09 4a 	lsl	r10,r10,r6
80030aa2:	20 b6       	sub	r6,11
80030aa4:	0c 17       	sub	r7,r6
80030aa6:	ca ab       	rjmp	800309fa <__avr32_f64_mul+0x22>
80030aa8:	f4 06 09 4b 	lsl	r11,r10,r6
80030aac:	c6 40       	breq	80030b74 <__avr32_f64_mul_res_zero>
80030aae:	30 0a       	mov	r10,0
80030ab0:	20 b6       	sub	r6,11
80030ab2:	0c 17       	sub	r7,r6
80030ab4:	ca 3b       	rjmp	800309fa <__avr32_f64_mul+0x22>

80030ab6 <__avr32_f64_mul_op2_subnormal>:
80030ab6:	e4 19 00 0f 	andh	r9,0xf
80030aba:	f0 0c 12 00 	clz	r12,r8
80030abe:	f2 05 12 00 	clz	r5,r9
80030ac2:	f7 bc 03 ea 	sublo	r12,-22
80030ac6:	f8 05 17 30 	movlo	r5,r12
80030aca:	f7 b5 02 0a 	subhs	r5,10
80030ace:	e0 45 00 20 	cp.w	r5,32
80030ad2:	c0 d4       	brge	80030aec <__avr32_f64_mul_op2_subnormal+0x36>
80030ad4:	ea 0c 11 20 	rsub	r12,r5,32
80030ad8:	f2 05 09 49 	lsl	r9,r9,r5
80030adc:	f0 0c 0a 4c 	lsr	r12,r8,r12
80030ae0:	18 49       	or	r9,r12
80030ae2:	f0 05 09 48 	lsl	r8,r8,r5
80030ae6:	20 25       	sub	r5,2
80030ae8:	0a 16       	sub	r6,r5
80030aea:	c8 fb       	rjmp	80030a08 <__avr32_f64_mul+0x30>
80030aec:	f0 05 09 49 	lsl	r9,r8,r5
80030af0:	c4 20       	breq	80030b74 <__avr32_f64_mul_res_zero>
80030af2:	30 08       	mov	r8,0
80030af4:	20 25       	sub	r5,2
80030af6:	0a 16       	sub	r6,r5
80030af8:	c8 8b       	rjmp	80030a08 <__avr32_f64_mul+0x30>

80030afa <__avr32_f64_mul_op_nan_or_inf>:
80030afa:	e4 19 00 0f 	andh	r9,0xf
80030afe:	e4 1b 00 0f 	andh	r11,0xf
80030b02:	14 4b       	or	r11,r10
80030b04:	10 49       	or	r9,r8
80030b06:	e0 47 07 ff 	cp.w	r7,2047
80030b0a:	c0 91       	brne	80030b1c <__avr32_f64_mul_op1_not_naninf>
80030b0c:	58 0b       	cp.w	r11,0
80030b0e:	c3 81       	brne	80030b7e <__avr32_f64_mul_res_nan>
80030b10:	e0 46 07 ff 	cp.w	r6,2047
80030b14:	c3 81       	brne	80030b84 <__avr32_f64_mul_res_inf>
80030b16:	58 09       	cp.w	r9,0
80030b18:	c3 60       	breq	80030b84 <__avr32_f64_mul_res_inf>
80030b1a:	c3 28       	rjmp	80030b7e <__avr32_f64_mul_res_nan>

80030b1c <__avr32_f64_mul_op1_not_naninf>:
80030b1c:	58 09       	cp.w	r9,0
80030b1e:	c3 30       	breq	80030b84 <__avr32_f64_mul_res_inf>
80030b20:	c2 f8       	rjmp	80030b7e <__avr32_f64_mul_res_nan>

80030b22 <__avr32_f64_mul_res_subnormal>:
80030b22:	5c 3c       	neg	r12
80030b24:	2f fc       	sub	r12,-1
80030b26:	f1 bc 04 c0 	satu	r12,0x6
80030b2a:	e0 4c 00 20 	cp.w	r12,32
80030b2e:	c1 14       	brge	80030b50 <__avr32_f64_mul_res_subnormal+0x2e>
80030b30:	f8 08 11 20 	rsub	r8,r12,32
80030b34:	0e 46       	or	r6,r7
80030b36:	ee 0c 0a 47 	lsr	r7,r7,r12
80030b3a:	f4 08 09 49 	lsl	r9,r10,r8
80030b3e:	12 47       	or	r7,r9
80030b40:	f4 0c 0a 4a 	lsr	r10,r10,r12
80030b44:	f6 08 09 49 	lsl	r9,r11,r8
80030b48:	12 4a       	or	r10,r9
80030b4a:	f6 0c 0a 4b 	lsr	r11,r11,r12
80030b4e:	c8 3b       	rjmp	80030a54 <__avr32_f64_mul+0x7c>
80030b50:	f8 08 11 20 	rsub	r8,r12,32
80030b54:	f9 b9 00 00 	moveq	r9,0
80030b58:	c0 30       	breq	80030b5e <__avr32_f64_mul_res_subnormal+0x3c>
80030b5a:	f6 08 09 49 	lsl	r9,r11,r8
80030b5e:	0e 46       	or	r6,r7
80030b60:	ed ea 10 16 	or	r6,r6,r10<<0x1
80030b64:	f4 0c 0a 4a 	lsr	r10,r10,r12
80030b68:	f3 ea 10 07 	or	r7,r9,r10
80030b6c:	f6 0c 0a 4a 	lsr	r10,r11,r12
80030b70:	30 0b       	mov	r11,0
80030b72:	c7 1b       	rjmp	80030a54 <__avr32_f64_mul+0x7c>

80030b74 <__avr32_f64_mul_res_zero>:
80030b74:	1c 9b       	mov	r11,lr
80030b76:	e6 1b 80 00 	andh	r11,0x8000,COH
80030b7a:	30 0a       	mov	r10,0
80030b7c:	d8 22       	popm	r4-r7,pc

80030b7e <__avr32_f64_mul_res_nan>:
80030b7e:	3f fb       	mov	r11,-1
80030b80:	3f fa       	mov	r10,-1
80030b82:	d8 22       	popm	r4-r7,pc

80030b84 <__avr32_f64_mul_res_inf>:
80030b84:	f0 6b 00 00 	mov	r11,-1048576
80030b88:	ed be 00 1f 	bld	lr,0x1f
80030b8c:	ef bb 00 1f 	bst	r11,0x1f
80030b90:	30 0a       	mov	r10,0
80030b92:	d8 22       	popm	r4-r7,pc

80030b94 <__avr32_f64_mul_op1_zero>:
80030b94:	f7 e9 20 0b 	eor	r11,r11,r9
80030b98:	e6 1b 80 00 	andh	r11,0x8000,COH
80030b9c:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80030ba0:	e0 4c 07 ff 	cp.w	r12,2047
80030ba4:	5e 1c       	retne	r12
80030ba6:	3f fa       	mov	r10,-1
80030ba8:	3f fb       	mov	r11,-1
80030baa:	5e fc       	retal	r12

80030bac <__avr32_f64_sub_from_add>:
80030bac:	ee 19 80 00 	eorh	r9,0x8000

80030bb0 <__avr32_f64_sub>:
80030bb0:	f7 e9 20 0c 	eor	r12,r11,r9
80030bb4:	e0 86 00 ca 	brmi	80030d48 <__avr32_f64_add_from_sub>
80030bb8:	eb cd 40 e0 	pushm	r5-r7,lr
80030bbc:	16 9c       	mov	r12,r11
80030bbe:	e6 1c 80 00 	andh	r12,0x8000,COH
80030bc2:	bf db       	cbr	r11,0x1f
80030bc4:	bf d9       	cbr	r9,0x1f
80030bc6:	10 3a       	cp.w	r10,r8
80030bc8:	f2 0b 13 00 	cpc	r11,r9
80030bcc:	c0 92       	brcc	80030bde <__avr32_f64_sub+0x2e>
80030bce:	16 97       	mov	r7,r11
80030bd0:	12 9b       	mov	r11,r9
80030bd2:	0e 99       	mov	r9,r7
80030bd4:	14 97       	mov	r7,r10
80030bd6:	10 9a       	mov	r10,r8
80030bd8:	0e 98       	mov	r8,r7
80030bda:	ee 1c 80 00 	eorh	r12,0x8000
80030bde:	f6 07 16 14 	lsr	r7,r11,0x14
80030be2:	ab 7b       	lsl	r11,0xb
80030be4:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80030be8:	ab 7a       	lsl	r10,0xb
80030bea:	bf bb       	sbr	r11,0x1f
80030bec:	f2 06 16 14 	lsr	r6,r9,0x14
80030bf0:	c4 40       	breq	80030c78 <__avr32_f64_sub_opL_subnormal>
80030bf2:	ab 79       	lsl	r9,0xb
80030bf4:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80030bf8:	ab 78       	lsl	r8,0xb
80030bfa:	bf b9       	sbr	r9,0x1f

80030bfc <__avr32_f64_sub_opL_subnormal_done>:
80030bfc:	e0 47 07 ff 	cp.w	r7,2047
80030c00:	c4 f0       	breq	80030c9e <__avr32_f64_sub_opH_nan_or_inf>
80030c02:	0e 26       	rsub	r6,r7
80030c04:	c1 20       	breq	80030c28 <__avr32_f64_sub_shift_done>
80030c06:	ec 05 11 20 	rsub	r5,r6,32
80030c0a:	e0 46 00 20 	cp.w	r6,32
80030c0e:	c7 c2       	brcc	80030d06 <__avr32_f64_sub_longshift>
80030c10:	f0 05 09 4e 	lsl	lr,r8,r5
80030c14:	f2 05 09 45 	lsl	r5,r9,r5
80030c18:	f0 06 0a 48 	lsr	r8,r8,r6
80030c1c:	f2 06 0a 49 	lsr	r9,r9,r6
80030c20:	0a 48       	or	r8,r5
80030c22:	58 0e       	cp.w	lr,0
80030c24:	5f 1e       	srne	lr
80030c26:	1c 48       	or	r8,lr

80030c28 <__avr32_f64_sub_shift_done>:
80030c28:	10 1a       	sub	r10,r8
80030c2a:	f6 09 01 4b 	sbc	r11,r11,r9
80030c2e:	f6 06 12 00 	clz	r6,r11
80030c32:	c0 e0       	breq	80030c4e <__avr32_f64_sub_longnormalize_done>
80030c34:	c7 83       	brcs	80030d24 <__avr32_f64_sub_longnormalize>
80030c36:	ec 0e 11 20 	rsub	lr,r6,32
80030c3a:	f6 06 09 4b 	lsl	r11,r11,r6
80030c3e:	f4 0e 0a 4e 	lsr	lr,r10,lr
80030c42:	1c 4b       	or	r11,lr
80030c44:	f4 06 09 4a 	lsl	r10,r10,r6
80030c48:	0c 17       	sub	r7,r6
80030c4a:	e0 8a 00 39 	brle	80030cbc <__avr32_f64_sub_subnormal_result>

80030c4e <__avr32_f64_sub_longnormalize_done>:
80030c4e:	f4 09 15 15 	lsl	r9,r10,0x15
80030c52:	ab 9a       	lsr	r10,0xb
80030c54:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80030c58:	ab 9b       	lsr	r11,0xb
80030c5a:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80030c5e:	18 4b       	or	r11,r12

80030c60 <__avr32_f64_sub_round>:
80030c60:	fc 17 80 00 	movh	r7,0x8000
80030c64:	ed ba 00 00 	bld	r10,0x0
80030c68:	f7 b7 01 ff 	subne	r7,-1
80030c6c:	0e 39       	cp.w	r9,r7
80030c6e:	5f 29       	srhs	r9
80030c70:	12 0a       	add	r10,r9
80030c72:	5c 0b       	acr	r11
80030c74:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030c78 <__avr32_f64_sub_opL_subnormal>:
80030c78:	ab 79       	lsl	r9,0xb
80030c7a:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80030c7e:	ab 78       	lsl	r8,0xb
80030c80:	f3 e8 10 0e 	or	lr,r9,r8
80030c84:	f9 b6 01 01 	movne	r6,1
80030c88:	ee 0e 11 00 	rsub	lr,r7,0
80030c8c:	f9 b7 00 01 	moveq	r7,1
80030c90:	ef bb 00 1f 	bst	r11,0x1f
80030c94:	f7 ea 10 0e 	or	lr,r11,r10
80030c98:	f9 b7 00 00 	moveq	r7,0
80030c9c:	cb 0b       	rjmp	80030bfc <__avr32_f64_sub_opL_subnormal_done>

80030c9e <__avr32_f64_sub_opH_nan_or_inf>:
80030c9e:	bf db       	cbr	r11,0x1f
80030ca0:	f7 ea 10 0e 	or	lr,r11,r10
80030ca4:	c0 81       	brne	80030cb4 <__avr32_f64_sub_return_nan>
80030ca6:	e0 46 07 ff 	cp.w	r6,2047
80030caa:	c0 50       	breq	80030cb4 <__avr32_f64_sub_return_nan>
80030cac:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80030cb0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030cb4 <__avr32_f64_sub_return_nan>:
80030cb4:	3f fa       	mov	r10,-1
80030cb6:	3f fb       	mov	r11,-1
80030cb8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030cbc <__avr32_f64_sub_subnormal_result>:
80030cbc:	5c 37       	neg	r7
80030cbe:	2f f7       	sub	r7,-1
80030cc0:	f1 b7 04 c0 	satu	r7,0x6
80030cc4:	e0 47 00 20 	cp.w	r7,32
80030cc8:	c1 14       	brge	80030cea <__avr32_f64_sub_subnormal_result+0x2e>
80030cca:	ee 08 11 20 	rsub	r8,r7,32
80030cce:	f4 08 09 49 	lsl	r9,r10,r8
80030cd2:	5f 16       	srne	r6
80030cd4:	f4 07 0a 4a 	lsr	r10,r10,r7
80030cd8:	0c 4a       	or	r10,r6
80030cda:	f6 08 09 49 	lsl	r9,r11,r8
80030cde:	f5 e9 10 0a 	or	r10,r10,r9
80030ce2:	f4 07 0a 4b 	lsr	r11,r10,r7
80030ce6:	30 07       	mov	r7,0
80030ce8:	cb 3b       	rjmp	80030c4e <__avr32_f64_sub_longnormalize_done>
80030cea:	ee 08 11 40 	rsub	r8,r7,64
80030cee:	f6 08 09 49 	lsl	r9,r11,r8
80030cf2:	14 49       	or	r9,r10
80030cf4:	5f 16       	srne	r6
80030cf6:	f6 07 0a 4a 	lsr	r10,r11,r7
80030cfa:	0c 4a       	or	r10,r6
80030cfc:	30 0b       	mov	r11,0
80030cfe:	30 07       	mov	r7,0
80030d00:	ca 7b       	rjmp	80030c4e <__avr32_f64_sub_longnormalize_done>
80030d02:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030d06 <__avr32_f64_sub_longshift>:
80030d06:	f1 b6 04 c0 	satu	r6,0x6
80030d0a:	f0 0e 17 00 	moveq	lr,r8
80030d0e:	c0 40       	breq	80030d16 <__avr32_f64_sub_longshift+0x10>
80030d10:	f2 05 09 4e 	lsl	lr,r9,r5
80030d14:	10 4e       	or	lr,r8
80030d16:	f2 06 0a 48 	lsr	r8,r9,r6
80030d1a:	30 09       	mov	r9,0
80030d1c:	58 0e       	cp.w	lr,0
80030d1e:	5f 1e       	srne	lr
80030d20:	1c 48       	or	r8,lr
80030d22:	c8 3b       	rjmp	80030c28 <__avr32_f64_sub_shift_done>

80030d24 <__avr32_f64_sub_longnormalize>:
80030d24:	f4 06 12 00 	clz	r6,r10
80030d28:	f9 b7 03 00 	movlo	r7,0
80030d2c:	f9 b6 03 00 	movlo	r6,0
80030d30:	f9 bc 03 00 	movlo	r12,0
80030d34:	f7 b6 02 e0 	subhs	r6,-32
80030d38:	f4 06 09 4b 	lsl	r11,r10,r6
80030d3c:	30 0a       	mov	r10,0
80030d3e:	0c 17       	sub	r7,r6
80030d40:	fe 9a ff be 	brle	80030cbc <__avr32_f64_sub_subnormal_result>
80030d44:	c8 5b       	rjmp	80030c4e <__avr32_f64_sub_longnormalize_done>
80030d46:	d7 03       	nop

80030d48 <__avr32_f64_add_from_sub>:
80030d48:	ee 19 80 00 	eorh	r9,0x8000

80030d4c <__avr32_f64_add>:
80030d4c:	f7 e9 20 0c 	eor	r12,r11,r9
80030d50:	fe 96 ff 2e 	brmi	80030bac <__avr32_f64_sub_from_add>
80030d54:	eb cd 40 e0 	pushm	r5-r7,lr
80030d58:	16 9c       	mov	r12,r11
80030d5a:	e6 1c 80 00 	andh	r12,0x8000,COH
80030d5e:	bf db       	cbr	r11,0x1f
80030d60:	bf d9       	cbr	r9,0x1f
80030d62:	12 3b       	cp.w	r11,r9
80030d64:	c0 72       	brcc	80030d72 <__avr32_f64_add+0x26>
80030d66:	16 97       	mov	r7,r11
80030d68:	12 9b       	mov	r11,r9
80030d6a:	0e 99       	mov	r9,r7
80030d6c:	14 97       	mov	r7,r10
80030d6e:	10 9a       	mov	r10,r8
80030d70:	0e 98       	mov	r8,r7
80030d72:	30 0e       	mov	lr,0
80030d74:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80030d78:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80030d7c:	b5 ab       	sbr	r11,0x14
80030d7e:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80030d82:	c6 20       	breq	80030e46 <__avr32_f64_add_op2_subnormal>
80030d84:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80030d88:	b5 a9       	sbr	r9,0x14
80030d8a:	e0 47 07 ff 	cp.w	r7,2047
80030d8e:	c2 80       	breq	80030dde <__avr32_f64_add_opH_nan_or_inf>
80030d90:	0e 26       	rsub	r6,r7
80030d92:	c1 20       	breq	80030db6 <__avr32_f64_add_shift_done>
80030d94:	e0 46 00 36 	cp.w	r6,54
80030d98:	c1 52       	brcc	80030dc2 <__avr32_f64_add_res_of_done>
80030d9a:	ec 05 11 20 	rsub	r5,r6,32
80030d9e:	e0 46 00 20 	cp.w	r6,32
80030da2:	c3 52       	brcc	80030e0c <__avr32_f64_add_longshift>
80030da4:	f0 05 09 4e 	lsl	lr,r8,r5
80030da8:	f2 05 09 45 	lsl	r5,r9,r5
80030dac:	f0 06 0a 48 	lsr	r8,r8,r6
80030db0:	f2 06 0a 49 	lsr	r9,r9,r6
80030db4:	0a 48       	or	r8,r5

80030db6 <__avr32_f64_add_shift_done>:
80030db6:	10 0a       	add	r10,r8
80030db8:	f6 09 00 4b 	adc	r11,r11,r9
80030dbc:	ed bb 00 15 	bld	r11,0x15
80030dc0:	c3 40       	breq	80030e28 <__avr32_f64_add_res_of>

80030dc2 <__avr32_f64_add_res_of_done>:
80030dc2:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80030dc6:	18 4b       	or	r11,r12

80030dc8 <__avr32_f64_add_round>:
80030dc8:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80030dcc:	18 4e       	or	lr,r12
80030dce:	ee 1e 80 00 	eorh	lr,0x8000
80030dd2:	f1 be 04 20 	satu	lr,0x1
80030dd6:	1c 0a       	add	r10,lr
80030dd8:	5c 0b       	acr	r11
80030dda:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030dde <__avr32_f64_add_opH_nan_or_inf>:
80030dde:	b5 cb       	cbr	r11,0x14
80030de0:	f7 ea 10 0e 	or	lr,r11,r10
80030de4:	c1 01       	brne	80030e04 <__avr32_f64_add_return_nan>
80030de6:	e0 46 07 ff 	cp.w	r6,2047
80030dea:	c0 30       	breq	80030df0 <__avr32_f64_add_opL_nan_or_inf>
80030dec:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030df0 <__avr32_f64_add_opL_nan_or_inf>:
80030df0:	b5 c9       	cbr	r9,0x14
80030df2:	f3 e8 10 0e 	or	lr,r9,r8
80030df6:	c0 71       	brne	80030e04 <__avr32_f64_add_return_nan>
80030df8:	30 0a       	mov	r10,0
80030dfa:	fc 1b 7f f0 	movh	r11,0x7ff0
80030dfe:	18 4b       	or	r11,r12
80030e00:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030e04 <__avr32_f64_add_return_nan>:
80030e04:	3f fa       	mov	r10,-1
80030e06:	3f fb       	mov	r11,-1
80030e08:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030e0c <__avr32_f64_add_longshift>:
80030e0c:	f1 b6 04 c0 	satu	r6,0x6
80030e10:	f0 0e 17 00 	moveq	lr,r8
80030e14:	c0 60       	breq	80030e20 <__avr32_f64_add_longshift+0x14>
80030e16:	f2 05 09 4e 	lsl	lr,r9,r5
80030e1a:	58 08       	cp.w	r8,0
80030e1c:	5f 18       	srne	r8
80030e1e:	10 4e       	or	lr,r8
80030e20:	f2 06 0a 48 	lsr	r8,r9,r6
80030e24:	30 09       	mov	r9,0
80030e26:	cc 8b       	rjmp	80030db6 <__avr32_f64_add_shift_done>

80030e28 <__avr32_f64_add_res_of>:
80030e28:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80030e2c:	a1 9b       	lsr	r11,0x1
80030e2e:	5d 0a       	ror	r10
80030e30:	5d 0e       	ror	lr
80030e32:	2f f7       	sub	r7,-1
80030e34:	e0 47 07 ff 	cp.w	r7,2047
80030e38:	f9 ba 00 00 	moveq	r10,0
80030e3c:	f9 bb 00 00 	moveq	r11,0
80030e40:	f9 be 00 00 	moveq	lr,0
80030e44:	cb fb       	rjmp	80030dc2 <__avr32_f64_add_res_of_done>

80030e46 <__avr32_f64_add_op2_subnormal>:
80030e46:	30 16       	mov	r6,1
80030e48:	58 07       	cp.w	r7,0
80030e4a:	ca 01       	brne	80030d8a <__avr32_f64_add+0x3e>
80030e4c:	b5 cb       	cbr	r11,0x14
80030e4e:	10 0a       	add	r10,r8
80030e50:	f6 09 00 4b 	adc	r11,r11,r9
80030e54:	18 4b       	or	r11,r12
80030e56:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80030e5a:	d7 03       	nop

80030e5c <__avr32_f64_to_u32>:
80030e5c:	58 0b       	cp.w	r11,0
80030e5e:	5e 6d       	retmi	0

80030e60 <__avr32_f64_to_s32>:
80030e60:	f6 0c 15 01 	lsl	r12,r11,0x1
80030e64:	b5 9c       	lsr	r12,0x15
80030e66:	e0 2c 03 ff 	sub	r12,1023
80030e6a:	5e 3d       	retlo	0
80030e6c:	f8 0c 11 1f 	rsub	r12,r12,31
80030e70:	16 99       	mov	r9,r11
80030e72:	ab 7b       	lsl	r11,0xb
80030e74:	bf bb       	sbr	r11,0x1f
80030e76:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80030e7a:	f6 0c 0a 4b 	lsr	r11,r11,r12
80030e7e:	a1 79       	lsl	r9,0x1
80030e80:	5e 2b       	reths	r11
80030e82:	5c 3b       	neg	r11
80030e84:	5e fb       	retal	r11

80030e86 <__avr32_u32_to_f64>:
80030e86:	f8 cb 00 00 	sub	r11,r12,0
80030e8a:	30 0c       	mov	r12,0
80030e8c:	c0 38       	rjmp	80030e92 <__avr32_s32_to_f64+0x4>

80030e8e <__avr32_s32_to_f64>:
80030e8e:	18 9b       	mov	r11,r12
80030e90:	5c 4b       	abs	r11
80030e92:	30 0a       	mov	r10,0
80030e94:	5e 0b       	reteq	r11
80030e96:	d4 01       	pushm	lr
80030e98:	e0 69 04 1e 	mov	r9,1054
80030e9c:	f6 08 12 00 	clz	r8,r11
80030ea0:	c1 70       	breq	80030ece <__avr32_s32_to_f64+0x40>
80030ea2:	c0 c3       	brcs	80030eba <__avr32_s32_to_f64+0x2c>
80030ea4:	f0 0e 11 20 	rsub	lr,r8,32
80030ea8:	f6 08 09 4b 	lsl	r11,r11,r8
80030eac:	f4 0e 0a 4e 	lsr	lr,r10,lr
80030eb0:	1c 4b       	or	r11,lr
80030eb2:	f4 08 09 4a 	lsl	r10,r10,r8
80030eb6:	10 19       	sub	r9,r8
80030eb8:	c0 b8       	rjmp	80030ece <__avr32_s32_to_f64+0x40>
80030eba:	f4 08 12 00 	clz	r8,r10
80030ebe:	f9 b8 03 00 	movlo	r8,0
80030ec2:	f7 b8 02 e0 	subhs	r8,-32
80030ec6:	f4 08 09 4b 	lsl	r11,r10,r8
80030eca:	30 0a       	mov	r10,0
80030ecc:	10 19       	sub	r9,r8
80030ece:	58 09       	cp.w	r9,0
80030ed0:	e0 89 00 30 	brgt	80030f30 <__avr32_s32_to_f64+0xa2>
80030ed4:	5c 39       	neg	r9
80030ed6:	2f f9       	sub	r9,-1
80030ed8:	e0 49 00 36 	cp.w	r9,54
80030edc:	c0 43       	brcs	80030ee4 <__avr32_s32_to_f64+0x56>
80030ede:	30 0b       	mov	r11,0
80030ee0:	30 0a       	mov	r10,0
80030ee2:	c2 68       	rjmp	80030f2e <__avr32_s32_to_f64+0xa0>
80030ee4:	2f 69       	sub	r9,-10
80030ee6:	f2 08 11 20 	rsub	r8,r9,32
80030eea:	e0 49 00 20 	cp.w	r9,32
80030eee:	c0 b2       	brcc	80030f04 <__avr32_s32_to_f64+0x76>
80030ef0:	f4 08 09 4e 	lsl	lr,r10,r8
80030ef4:	f6 08 09 48 	lsl	r8,r11,r8
80030ef8:	f4 09 0a 4a 	lsr	r10,r10,r9
80030efc:	f6 09 0a 4b 	lsr	r11,r11,r9
80030f00:	10 4b       	or	r11,r8
80030f02:	c0 88       	rjmp	80030f12 <__avr32_s32_to_f64+0x84>
80030f04:	f6 08 09 4e 	lsl	lr,r11,r8
80030f08:	14 4e       	or	lr,r10
80030f0a:	16 9a       	mov	r10,r11
80030f0c:	30 0b       	mov	r11,0
80030f0e:	f4 09 0a 4a 	lsr	r10,r10,r9
80030f12:	ed ba 00 00 	bld	r10,0x0
80030f16:	c0 92       	brcc	80030f28 <__avr32_s32_to_f64+0x9a>
80030f18:	1c 7e       	tst	lr,lr
80030f1a:	c0 41       	brne	80030f22 <__avr32_s32_to_f64+0x94>
80030f1c:	ed ba 00 01 	bld	r10,0x1
80030f20:	c0 42       	brcc	80030f28 <__avr32_s32_to_f64+0x9a>
80030f22:	2f fa       	sub	r10,-1
80030f24:	f7 bb 02 ff 	subhs	r11,-1
80030f28:	5c fc       	rol	r12
80030f2a:	5d 0b       	ror	r11
80030f2c:	5d 0a       	ror	r10
80030f2e:	d8 02       	popm	pc
80030f30:	e0 68 03 ff 	mov	r8,1023
80030f34:	ed ba 00 0b 	bld	r10,0xb
80030f38:	f7 b8 00 ff 	subeq	r8,-1
80030f3c:	10 0a       	add	r10,r8
80030f3e:	5c 0b       	acr	r11
80030f40:	f7 b9 03 fe 	sublo	r9,-2
80030f44:	e0 49 07 ff 	cp.w	r9,2047
80030f48:	c0 55       	brlt	80030f52 <__avr32_s32_to_f64+0xc4>
80030f4a:	30 0a       	mov	r10,0
80030f4c:	fc 1b ff e0 	movh	r11,0xffe0
80030f50:	c0 c8       	rjmp	80030f68 <__floatsidf_return_op1>
80030f52:	ed bb 00 1f 	bld	r11,0x1f
80030f56:	f7 b9 01 01 	subne	r9,1
80030f5a:	ab 9a       	lsr	r10,0xb
80030f5c:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80030f60:	a1 7b       	lsl	r11,0x1
80030f62:	ab 9b       	lsr	r11,0xb
80030f64:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80030f68 <__floatsidf_return_op1>:
80030f68:	a1 7c       	lsl	r12,0x1
80030f6a:	5d 0b       	ror	r11
80030f6c:	d8 02       	popm	pc

80030f6e <__avr32_f64_cmp_eq>:
80030f6e:	10 3a       	cp.w	r10,r8
80030f70:	f2 0b 13 00 	cpc	r11,r9
80030f74:	c0 80       	breq	80030f84 <__avr32_f64_cmp_eq+0x16>
80030f76:	a1 7b       	lsl	r11,0x1
80030f78:	a1 79       	lsl	r9,0x1
80030f7a:	14 4b       	or	r11,r10
80030f7c:	12 4b       	or	r11,r9
80030f7e:	10 4b       	or	r11,r8
80030f80:	5e 0f       	reteq	1
80030f82:	5e fd       	retal	0
80030f84:	a1 7b       	lsl	r11,0x1
80030f86:	fc 1c ff e0 	movh	r12,0xffe0
80030f8a:	58 0a       	cp.w	r10,0
80030f8c:	f8 0b 13 00 	cpc	r11,r12
80030f90:	5e 8f       	retls	1
80030f92:	5e fd       	retal	0

80030f94 <__avr32_f64_cmp_ge>:
80030f94:	1a de       	st.w	--sp,lr
80030f96:	1a d7       	st.w	--sp,r7
80030f98:	a1 7b       	lsl	r11,0x1
80030f9a:	5f 3c       	srlo	r12
80030f9c:	a1 79       	lsl	r9,0x1
80030f9e:	5f 37       	srlo	r7
80030fa0:	5c fc       	rol	r12
80030fa2:	fc 1e ff e0 	movh	lr,0xffe0
80030fa6:	58 0a       	cp.w	r10,0
80030fa8:	fc 0b 13 00 	cpc	r11,lr
80030fac:	e0 8b 00 1d 	brhi	80030fe6 <__avr32_f64_cmp_ge+0x52>
80030fb0:	58 08       	cp.w	r8,0
80030fb2:	fc 09 13 00 	cpc	r9,lr
80030fb6:	e0 8b 00 18 	brhi	80030fe6 <__avr32_f64_cmp_ge+0x52>
80030fba:	58 0b       	cp.w	r11,0
80030fbc:	f5 ba 00 00 	subfeq	r10,0
80030fc0:	c1 50       	breq	80030fea <__avr32_f64_cmp_ge+0x56>
80030fc2:	1b 07       	ld.w	r7,sp++
80030fc4:	1b 0e       	ld.w	lr,sp++
80030fc6:	58 3c       	cp.w	r12,3
80030fc8:	c0 a0       	breq	80030fdc <__avr32_f64_cmp_ge+0x48>
80030fca:	58 1c       	cp.w	r12,1
80030fcc:	c0 33       	brcs	80030fd2 <__avr32_f64_cmp_ge+0x3e>
80030fce:	5e 0f       	reteq	1
80030fd0:	5e 1d       	retne	0
80030fd2:	10 3a       	cp.w	r10,r8
80030fd4:	f2 0b 13 00 	cpc	r11,r9
80030fd8:	5e 2f       	reths	1
80030fda:	5e 3d       	retlo	0
80030fdc:	14 38       	cp.w	r8,r10
80030fde:	f6 09 13 00 	cpc	r9,r11
80030fe2:	5e 2f       	reths	1
80030fe4:	5e 3d       	retlo	0
80030fe6:	1b 07       	ld.w	r7,sp++
80030fe8:	d8 0a       	popm	pc,r12=0
80030fea:	58 17       	cp.w	r7,1
80030fec:	5f 0c       	sreq	r12
80030fee:	58 09       	cp.w	r9,0
80030ff0:	f5 b8 00 00 	subfeq	r8,0
80030ff4:	1b 07       	ld.w	r7,sp++
80030ff6:	1b 0e       	ld.w	lr,sp++
80030ff8:	5e 0f       	reteq	1
80030ffa:	5e fc       	retal	r12

80030ffc <__avr32_f64_cmp_lt>:
80030ffc:	1a de       	st.w	--sp,lr
80030ffe:	1a d7       	st.w	--sp,r7
80031000:	a1 7b       	lsl	r11,0x1
80031002:	5f 3c       	srlo	r12
80031004:	a1 79       	lsl	r9,0x1
80031006:	5f 37       	srlo	r7
80031008:	5c fc       	rol	r12
8003100a:	fc 1e ff e0 	movh	lr,0xffe0
8003100e:	58 0a       	cp.w	r10,0
80031010:	fc 0b 13 00 	cpc	r11,lr
80031014:	e0 8b 00 1d 	brhi	8003104e <__avr32_f64_cmp_lt+0x52>
80031018:	58 08       	cp.w	r8,0
8003101a:	fc 09 13 00 	cpc	r9,lr
8003101e:	e0 8b 00 18 	brhi	8003104e <__avr32_f64_cmp_lt+0x52>
80031022:	58 0b       	cp.w	r11,0
80031024:	f5 ba 00 00 	subfeq	r10,0
80031028:	c1 50       	breq	80031052 <__avr32_f64_cmp_lt+0x56>
8003102a:	1b 07       	ld.w	r7,sp++
8003102c:	1b 0e       	ld.w	lr,sp++
8003102e:	58 3c       	cp.w	r12,3
80031030:	c0 a0       	breq	80031044 <__avr32_f64_cmp_lt+0x48>
80031032:	58 1c       	cp.w	r12,1
80031034:	c0 33       	brcs	8003103a <__avr32_f64_cmp_lt+0x3e>
80031036:	5e 0d       	reteq	0
80031038:	5e 1f       	retne	1
8003103a:	10 3a       	cp.w	r10,r8
8003103c:	f2 0b 13 00 	cpc	r11,r9
80031040:	5e 2d       	reths	0
80031042:	5e 3f       	retlo	1
80031044:	14 38       	cp.w	r8,r10
80031046:	f6 09 13 00 	cpc	r9,r11
8003104a:	5e 2d       	reths	0
8003104c:	5e 3f       	retlo	1
8003104e:	1b 07       	ld.w	r7,sp++
80031050:	d8 0a       	popm	pc,r12=0
80031052:	58 17       	cp.w	r7,1
80031054:	5f 1c       	srne	r12
80031056:	58 09       	cp.w	r9,0
80031058:	f5 b8 00 00 	subfeq	r8,0
8003105c:	1b 07       	ld.w	r7,sp++
8003105e:	1b 0e       	ld.w	lr,sp++
80031060:	5e 0d       	reteq	0
80031062:	5e fc       	retal	r12

80031064 <__avr32_f64_div>:
80031064:	eb cd 40 ff 	pushm	r0-r7,lr
80031068:	f7 e9 20 0e 	eor	lr,r11,r9
8003106c:	f6 07 16 14 	lsr	r7,r11,0x14
80031070:	a9 7b       	lsl	r11,0x9
80031072:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
80031076:	a9 7a       	lsl	r10,0x9
80031078:	bd bb       	sbr	r11,0x1d
8003107a:	e4 1b 3f ff 	andh	r11,0x3fff
8003107e:	ab d7       	cbr	r7,0xb
80031080:	e0 80 00 cc 	breq	80031218 <__avr32_f64_div_round_subnormal+0x54>
80031084:	e0 47 07 ff 	cp.w	r7,2047
80031088:	e0 84 00 b5 	brge	800311f2 <__avr32_f64_div_round_subnormal+0x2e>
8003108c:	f2 06 16 14 	lsr	r6,r9,0x14
80031090:	a9 79       	lsl	r9,0x9
80031092:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80031096:	a9 78       	lsl	r8,0x9
80031098:	bd b9       	sbr	r9,0x1d
8003109a:	e4 19 3f ff 	andh	r9,0x3fff
8003109e:	ab d6       	cbr	r6,0xb
800310a0:	e0 80 00 e2 	breq	80031264 <__avr32_f64_div_round_subnormal+0xa0>
800310a4:	e0 46 07 ff 	cp.w	r6,2047
800310a8:	e0 84 00 b2 	brge	8003120c <__avr32_f64_div_round_subnormal+0x48>
800310ac:	0c 17       	sub	r7,r6
800310ae:	fe 37 fc 01 	sub	r7,-1023
800310b2:	fc 1c 80 00 	movh	r12,0x8000
800310b6:	f8 03 16 01 	lsr	r3,r12,0x1
800310ba:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
800310be:	5c d4       	com	r4
800310c0:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
800310c4:	e6 09 06 44 	mulu.d	r4,r3,r9
800310c8:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800310cc:	e6 05 06 44 	mulu.d	r4,r3,r5
800310d0:	ea 03 15 02 	lsl	r3,r5,0x2
800310d4:	e6 09 06 44 	mulu.d	r4,r3,r9
800310d8:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800310dc:	e6 05 06 44 	mulu.d	r4,r3,r5
800310e0:	ea 03 15 02 	lsl	r3,r5,0x2
800310e4:	e6 09 06 44 	mulu.d	r4,r3,r9
800310e8:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800310ec:	e6 05 06 44 	mulu.d	r4,r3,r5
800310f0:	ea 03 15 02 	lsl	r3,r5,0x2
800310f4:	e6 08 06 40 	mulu.d	r0,r3,r8
800310f8:	e4 09 07 40 	macu.d	r0,r2,r9
800310fc:	e6 09 06 44 	mulu.d	r4,r3,r9
80031100:	02 04       	add	r4,r1
80031102:	5c 05       	acr	r5
80031104:	a3 65       	lsl	r5,0x2
80031106:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8003110a:	a3 64       	lsl	r4,0x2
8003110c:	5c 34       	neg	r4
8003110e:	f8 05 01 45 	sbc	r5,r12,r5
80031112:	e6 04 06 40 	mulu.d	r0,r3,r4
80031116:	e4 05 07 40 	macu.d	r0,r2,r5
8003111a:	e6 05 06 44 	mulu.d	r4,r3,r5
8003111e:	02 04       	add	r4,r1
80031120:	5c 05       	acr	r5
80031122:	ea 03 15 02 	lsl	r3,r5,0x2
80031126:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8003112a:	e8 02 15 02 	lsl	r2,r4,0x2
8003112e:	e6 08 06 40 	mulu.d	r0,r3,r8
80031132:	e4 09 07 40 	macu.d	r0,r2,r9
80031136:	e6 09 06 44 	mulu.d	r4,r3,r9
8003113a:	02 04       	add	r4,r1
8003113c:	5c 05       	acr	r5
8003113e:	a3 65       	lsl	r5,0x2
80031140:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80031144:	a3 64       	lsl	r4,0x2
80031146:	5c 34       	neg	r4
80031148:	f8 05 01 45 	sbc	r5,r12,r5
8003114c:	e6 04 06 40 	mulu.d	r0,r3,r4
80031150:	e4 05 07 40 	macu.d	r0,r2,r5
80031154:	e6 05 06 44 	mulu.d	r4,r3,r5
80031158:	02 04       	add	r4,r1
8003115a:	5c 05       	acr	r5
8003115c:	ea 03 15 02 	lsl	r3,r5,0x2
80031160:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80031164:	e8 02 15 02 	lsl	r2,r4,0x2
80031168:	e6 0a 06 40 	mulu.d	r0,r3,r10
8003116c:	e4 0b 07 40 	macu.d	r0,r2,r11
80031170:	e6 0b 06 42 	mulu.d	r2,r3,r11
80031174:	02 02       	add	r2,r1
80031176:	5c 03       	acr	r3
80031178:	ed b3 00 1c 	bld	r3,0x1c
8003117c:	c0 90       	breq	8003118e <__avr32_f64_div+0x12a>
8003117e:	a1 72       	lsl	r2,0x1
80031180:	5c f3       	rol	r3
80031182:	20 17       	sub	r7,1
80031184:	a3 9a       	lsr	r10,0x3
80031186:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8003118a:	a3 9b       	lsr	r11,0x3
8003118c:	c0 58       	rjmp	80031196 <__avr32_f64_div+0x132>
8003118e:	a5 8a       	lsr	r10,0x4
80031190:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80031194:	a5 8b       	lsr	r11,0x4
80031196:	58 07       	cp.w	r7,0
80031198:	e0 8a 00 8b 	brle	800312ae <__avr32_f64_div_res_subnormal>
8003119c:	e0 12 ff 00 	andl	r2,0xff00
800311a0:	e8 12 00 80 	orl	r2,0x80
800311a4:	e6 08 06 40 	mulu.d	r0,r3,r8
800311a8:	e4 09 07 40 	macu.d	r0,r2,r9
800311ac:	e4 08 06 44 	mulu.d	r4,r2,r8
800311b0:	e6 09 06 48 	mulu.d	r8,r3,r9
800311b4:	00 05       	add	r5,r0
800311b6:	f0 01 00 48 	adc	r8,r8,r1
800311ba:	5c 09       	acr	r9
800311bc:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
800311c0:	58 04       	cp.w	r4,0
800311c2:	5c 25       	cpc	r5

800311c4 <__avr32_f64_div_round_subnormal>:
800311c4:	f4 08 13 00 	cpc	r8,r10
800311c8:	f6 09 13 00 	cpc	r9,r11
800311cc:	5f 36       	srlo	r6
800311ce:	f8 06 17 00 	moveq	r6,r12
800311d2:	e4 0a 16 08 	lsr	r10,r2,0x8
800311d6:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
800311da:	e6 0b 16 08 	lsr	r11,r3,0x8
800311de:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800311e2:	ed be 00 1f 	bld	lr,0x1f
800311e6:	ef bb 00 1f 	bst	r11,0x1f
800311ea:	0c 0a       	add	r10,r6
800311ec:	5c 0b       	acr	r11
800311ee:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800311f2:	e4 1b 00 0f 	andh	r11,0xf
800311f6:	14 4b       	or	r11,r10
800311f8:	e0 81 00 a7 	brne	80031346 <__avr32_f64_div_res_subnormal+0x98>
800311fc:	f2 06 16 14 	lsr	r6,r9,0x14
80031200:	ab d6       	cbr	r6,0xb
80031202:	e0 46 07 ff 	cp.w	r6,2047
80031206:	e0 81 00 a4 	brne	8003134e <__avr32_f64_div_res_subnormal+0xa0>
8003120a:	c9 e8       	rjmp	80031346 <__avr32_f64_div_res_subnormal+0x98>
8003120c:	e4 19 00 0f 	andh	r9,0xf
80031210:	10 49       	or	r9,r8
80031212:	e0 81 00 9a 	brne	80031346 <__avr32_f64_div_res_subnormal+0x98>
80031216:	c9 28       	rjmp	8003133a <__avr32_f64_div_res_subnormal+0x8c>
80031218:	a3 7b       	lsl	r11,0x3
8003121a:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8003121e:	a3 7a       	lsl	r10,0x3
80031220:	f5 eb 10 04 	or	r4,r10,r11
80031224:	e0 80 00 a0 	breq	80031364 <__avr32_f64_div_op1_zero>
80031228:	f6 04 12 00 	clz	r4,r11
8003122c:	c1 70       	breq	8003125a <__avr32_f64_div_round_subnormal+0x96>
8003122e:	c0 c3       	brcs	80031246 <__avr32_f64_div_round_subnormal+0x82>
80031230:	e8 05 11 20 	rsub	r5,r4,32
80031234:	f6 04 09 4b 	lsl	r11,r11,r4
80031238:	f4 05 0a 45 	lsr	r5,r10,r5
8003123c:	0a 4b       	or	r11,r5
8003123e:	f4 04 09 4a 	lsl	r10,r10,r4
80031242:	08 17       	sub	r7,r4
80031244:	c0 b8       	rjmp	8003125a <__avr32_f64_div_round_subnormal+0x96>
80031246:	f4 04 12 00 	clz	r4,r10
8003124a:	f9 b4 03 00 	movlo	r4,0
8003124e:	f7 b4 02 e0 	subhs	r4,-32
80031252:	f4 04 09 4b 	lsl	r11,r10,r4
80031256:	30 0a       	mov	r10,0
80031258:	08 17       	sub	r7,r4
8003125a:	a3 8a       	lsr	r10,0x2
8003125c:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80031260:	a3 8b       	lsr	r11,0x2
80031262:	c1 1b       	rjmp	80031084 <__avr32_f64_div+0x20>
80031264:	a3 79       	lsl	r9,0x3
80031266:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8003126a:	a3 78       	lsl	r8,0x3
8003126c:	f3 e8 10 04 	or	r4,r9,r8
80031270:	c6 f0       	breq	8003134e <__avr32_f64_div_res_subnormal+0xa0>
80031272:	f2 04 12 00 	clz	r4,r9
80031276:	c1 70       	breq	800312a4 <__avr32_f64_div_round_subnormal+0xe0>
80031278:	c0 c3       	brcs	80031290 <__avr32_f64_div_round_subnormal+0xcc>
8003127a:	e8 05 11 20 	rsub	r5,r4,32
8003127e:	f2 04 09 49 	lsl	r9,r9,r4
80031282:	f0 05 0a 45 	lsr	r5,r8,r5
80031286:	0a 49       	or	r9,r5
80031288:	f0 04 09 48 	lsl	r8,r8,r4
8003128c:	08 16       	sub	r6,r4
8003128e:	c0 b8       	rjmp	800312a4 <__avr32_f64_div_round_subnormal+0xe0>
80031290:	f0 04 12 00 	clz	r4,r8
80031294:	f9 b4 03 00 	movlo	r4,0
80031298:	f7 b4 02 e0 	subhs	r4,-32
8003129c:	f0 04 09 49 	lsl	r9,r8,r4
800312a0:	30 08       	mov	r8,0
800312a2:	08 16       	sub	r6,r4
800312a4:	a3 88       	lsr	r8,0x2
800312a6:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
800312aa:	a3 89       	lsr	r9,0x2
800312ac:	cf ca       	rjmp	800310a4 <__avr32_f64_div+0x40>

800312ae <__avr32_f64_div_res_subnormal>:
800312ae:	5c 37       	neg	r7
800312b0:	2f f7       	sub	r7,-1
800312b2:	f1 b7 04 c0 	satu	r7,0x6
800312b6:	e0 47 00 20 	cp.w	r7,32
800312ba:	c1 54       	brge	800312e4 <__avr32_f64_div_res_subnormal+0x36>
800312bc:	ee 06 11 20 	rsub	r6,r7,32
800312c0:	e4 07 0a 42 	lsr	r2,r2,r7
800312c4:	e6 06 09 4c 	lsl	r12,r3,r6
800312c8:	18 42       	or	r2,r12
800312ca:	e6 07 0a 43 	lsr	r3,r3,r7
800312ce:	f4 06 09 41 	lsl	r1,r10,r6
800312d2:	f4 07 0a 4a 	lsr	r10,r10,r7
800312d6:	f6 06 09 4c 	lsl	r12,r11,r6
800312da:	18 4a       	or	r10,r12
800312dc:	f6 07 0a 4b 	lsr	r11,r11,r7
800312e0:	30 00       	mov	r0,0
800312e2:	c1 58       	rjmp	8003130c <__avr32_f64_div_res_subnormal+0x5e>
800312e4:	ee 06 11 20 	rsub	r6,r7,32
800312e8:	f9 b0 00 00 	moveq	r0,0
800312ec:	f9 bc 00 00 	moveq	r12,0
800312f0:	c0 50       	breq	800312fa <__avr32_f64_div_res_subnormal+0x4c>
800312f2:	f4 06 09 40 	lsl	r0,r10,r6
800312f6:	f6 06 09 4c 	lsl	r12,r11,r6
800312fa:	e6 07 0a 42 	lsr	r2,r3,r7
800312fe:	30 03       	mov	r3,0
80031300:	f4 07 0a 41 	lsr	r1,r10,r7
80031304:	18 41       	or	r1,r12
80031306:	f6 07 0a 4a 	lsr	r10,r11,r7
8003130a:	30 0b       	mov	r11,0
8003130c:	e0 12 ff 00 	andl	r2,0xff00
80031310:	e8 12 00 80 	orl	r2,0x80
80031314:	e6 08 06 46 	mulu.d	r6,r3,r8
80031318:	e4 09 07 46 	macu.d	r6,r2,r9
8003131c:	e4 08 06 44 	mulu.d	r4,r2,r8
80031320:	e6 09 06 48 	mulu.d	r8,r3,r9
80031324:	0c 05       	add	r5,r6
80031326:	f0 07 00 48 	adc	r8,r8,r7
8003132a:	5c 09       	acr	r9
8003132c:	30 07       	mov	r7,0
8003132e:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80031332:	00 34       	cp.w	r4,r0
80031334:	e2 05 13 00 	cpc	r5,r1
80031338:	c4 6b       	rjmp	800311c4 <__avr32_f64_div_round_subnormal>
8003133a:	1c 9b       	mov	r11,lr
8003133c:	e6 1b 80 00 	andh	r11,0x8000,COH
80031340:	30 0a       	mov	r10,0
80031342:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80031346:	3f fb       	mov	r11,-1
80031348:	30 0a       	mov	r10,0
8003134a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8003134e:	f5 eb 10 04 	or	r4,r10,r11
80031352:	c0 90       	breq	80031364 <__avr32_f64_div_op1_zero>
80031354:	1c 9b       	mov	r11,lr
80031356:	e6 1b 80 00 	andh	r11,0x8000,COH
8003135a:	ea 1b 7f f0 	orh	r11,0x7ff0
8003135e:	30 0a       	mov	r10,0
80031360:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80031364 <__avr32_f64_div_op1_zero>:
80031364:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80031368:	ce f0       	breq	80031346 <__avr32_f64_div_res_subnormal+0x98>
8003136a:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8003136e:	e0 44 07 ff 	cp.w	r4,2047
80031372:	ce 41       	brne	8003133a <__avr32_f64_div_res_subnormal+0x8c>
80031374:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80031378:	ce 10       	breq	8003133a <__avr32_f64_div_res_subnormal+0x8c>
8003137a:	ce 6b       	rjmp	80031346 <__avr32_f64_div_res_subnormal+0x98>

8003137c <__avr32_f32_div>:
8003137c:	f7 ec 20 08 	eor	r8,r11,r12
80031380:	a1 7c       	lsl	r12,0x1
80031382:	a1 7b       	lsl	r11,0x1
80031384:	c7 a0       	breq	80031478 <__divsf_return_op1+0x16>
80031386:	18 7c       	tst	r12,r12
80031388:	f9 b9 00 00 	moveq	r9,0
8003138c:	c0 90       	breq	8003139e <__avr32_f32_div+0x22>
8003138e:	f8 09 16 18 	lsr	r9,r12,0x18
80031392:	c7 e0       	breq	8003148e <__divsf_return_op1+0x2c>
80031394:	e0 49 00 ff 	cp.w	r9,255
80031398:	c6 82       	brcc	80031468 <__divsf_return_op1+0x6>
8003139a:	a7 7c       	lsl	r12,0x7
8003139c:	bf bc       	sbr	r12,0x1f
8003139e:	f6 0a 16 18 	lsr	r10,r11,0x18
800313a2:	c7 e0       	breq	8003149e <__divsf_return_op1+0x3c>
800313a4:	e0 4a 00 ff 	cp.w	r10,255
800313a8:	c6 62       	brcc	80031474 <__divsf_return_op1+0x12>
800313aa:	a7 7b       	lsl	r11,0x7
800313ac:	bf bb       	sbr	r11,0x1f
800313ae:	58 09       	cp.w	r9,0
800313b0:	f5 bc 00 00 	subfeq	r12,0
800313b4:	5e 0d       	reteq	0
800313b6:	1a d5       	st.w	--sp,r5
800313b8:	bb 27       	st.d	--sp,r6
800313ba:	14 19       	sub	r9,r10
800313bc:	28 19       	sub	r9,-127
800313be:	fc 1a 80 00 	movh	r10,0x8000
800313c2:	a3 8c       	lsr	r12,0x2
800313c4:	f6 05 16 02 	lsr	r5,r11,0x2
800313c8:	f4 0b 16 01 	lsr	r11,r10,0x1
800313cc:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
800313d0:	5c d6       	com	r6
800313d2:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
800313d6:	f6 05 06 46 	mulu.d	r6,r11,r5
800313da:	f4 07 01 27 	sub	r7,r10,r7<<0x2
800313de:	f6 07 06 46 	mulu.d	r6,r11,r7
800313e2:	ee 0b 15 02 	lsl	r11,r7,0x2
800313e6:	f6 05 06 46 	mulu.d	r6,r11,r5
800313ea:	f4 07 01 27 	sub	r7,r10,r7<<0x2
800313ee:	f6 07 06 46 	mulu.d	r6,r11,r7
800313f2:	ee 0b 15 02 	lsl	r11,r7,0x2
800313f6:	f6 05 06 46 	mulu.d	r6,r11,r5
800313fa:	f4 07 01 27 	sub	r7,r10,r7<<0x2
800313fe:	f6 07 06 46 	mulu.d	r6,r11,r7
80031402:	ee 0b 15 02 	lsl	r11,r7,0x2
80031406:	f6 05 06 46 	mulu.d	r6,r11,r5
8003140a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8003140e:	f6 07 06 46 	mulu.d	r6,r11,r7
80031412:	ee 0b 15 02 	lsl	r11,r7,0x2
80031416:	f6 0c 06 46 	mulu.d	r6,r11,r12
8003141a:	a5 8c       	lsr	r12,0x4
8003141c:	ed b7 00 1c 	bld	r7,0x1c
80031420:	c0 40       	breq	80031428 <__avr32_f32_div+0xac>
80031422:	a1 77       	lsl	r7,0x1
80031424:	20 19       	sub	r9,1
80031426:	a1 7c       	lsl	r12,0x1
80031428:	58 09       	cp.w	r9,0
8003142a:	e0 8a 00 42 	brle	800314ae <__avr32_f32_div_res_subnormal>
8003142e:	e0 17 ff e0 	andl	r7,0xffe0
80031432:	e8 17 00 10 	orl	r7,0x10
80031436:	ea 07 06 4a 	mulu.d	r10,r5,r7
8003143a:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8003143e:	58 0a       	cp.w	r10,0

80031440 <__avr32_f32_div_round_subnormal>:
80031440:	f8 0b 13 00 	cpc	r11,r12
80031444:	5f 3b       	srlo	r11
80031446:	ea 0b 17 00 	moveq	r11,r5
8003144a:	ee 0c 16 05 	lsr	r12,r7,0x5
8003144e:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
80031452:	bb 07       	ld.d	r6,sp++
80031454:	1b 05       	ld.w	r5,sp++
80031456:	ed b8 00 1f 	bld	r8,0x1f
8003145a:	ef bc 00 1f 	bst	r12,0x1f
8003145e:	16 0c       	add	r12,r11
80031460:	5e fc       	retal	r12

80031462 <__divsf_return_op1>:
80031462:	a1 78       	lsl	r8,0x1
80031464:	5d 0c       	ror	r12
80031466:	5e fc       	retal	r12
80031468:	5e 1e       	retne	-1
8003146a:	fc 19 ff 00 	movh	r9,0xff00
8003146e:	12 3b       	cp.w	r11,r9
80031470:	cf 93       	brcs	80031462 <__divsf_return_op1>
80031472:	5e fe       	retal	-1
80031474:	5e 0d       	reteq	0
80031476:	5e fe       	retal	-1
80031478:	18 7c       	tst	r12,r12
8003147a:	5e 0e       	reteq	-1
8003147c:	f8 09 16 18 	lsr	r9,r12,0x18
80031480:	c0 70       	breq	8003148e <__divsf_return_op1+0x2c>
80031482:	e0 49 00 ff 	cp.w	r9,255
80031486:	cf 12       	brcc	80031468 <__divsf_return_op1+0x6>
80031488:	fc 1c ff 00 	movh	r12,0xff00
8003148c:	ce bb       	rjmp	80031462 <__divsf_return_op1>
8003148e:	a7 7c       	lsl	r12,0x7
80031490:	f8 09 12 00 	clz	r9,r12
80031494:	f8 09 09 4c 	lsl	r12,r12,r9
80031498:	f2 09 11 01 	rsub	r9,r9,1
8003149c:	c8 1b       	rjmp	8003139e <__avr32_f32_div+0x22>
8003149e:	a7 7b       	lsl	r11,0x7
800314a0:	f6 0a 12 00 	clz	r10,r11
800314a4:	f6 0a 09 4b 	lsl	r11,r11,r10
800314a8:	f4 0a 11 01 	rsub	r10,r10,1
800314ac:	c8 5b       	rjmp	800313b6 <__avr32_f32_div+0x3a>

800314ae <__avr32_f32_div_res_subnormal>:
800314ae:	5c 39       	neg	r9
800314b0:	2f f9       	sub	r9,-1
800314b2:	f1 b9 04 a0 	satu	r9,0x5
800314b6:	f2 0a 11 20 	rsub	r10,r9,32
800314ba:	ee 09 0a 47 	lsr	r7,r7,r9
800314be:	f8 0a 09 46 	lsl	r6,r12,r10
800314c2:	f8 09 0a 4c 	lsr	r12,r12,r9
800314c6:	e0 17 ff e0 	andl	r7,0xffe0
800314ca:	e8 17 00 10 	orl	r7,0x10
800314ce:	ea 07 06 4a 	mulu.d	r10,r5,r7
800314d2:	30 09       	mov	r9,0
800314d4:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
800314d8:	0c 3a       	cp.w	r10,r6
800314da:	cb 3b       	rjmp	80031440 <__avr32_f32_div_round_subnormal>

800314dc <__avr32_f32_to_f64>:
800314dc:	f8 0b 15 01 	lsl	r11,r12,0x1
800314e0:	f9 ba 00 00 	moveq	r10,0
800314e4:	5e 0b       	reteq	r11
800314e6:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
800314ea:	e0 49 00 ff 	cp.w	r9,255
800314ee:	c1 e0       	breq	8003152a <__extendsfdf_return_op1+0x6>
800314f0:	a7 7b       	lsl	r11,0x7
800314f2:	30 0a       	mov	r10,0
800314f4:	58 09       	cp.w	r9,0
800314f6:	f7 b9 00 ff 	subeq	r9,-1
800314fa:	5f 18       	srne	r8
800314fc:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
80031500:	fe 39 fc 80 	sub	r9,-896
80031504:	f6 08 12 00 	clz	r8,r11
80031508:	10 19       	sub	r9,r8
8003150a:	f6 08 09 4b 	lsl	r11,r11,r8
8003150e:	ed bb 00 1f 	bld	r11,0x1f
80031512:	f7 b9 01 01 	subne	r9,1
80031516:	ab 9a       	lsr	r10,0xb
80031518:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8003151c:	a1 7b       	lsl	r11,0x1
8003151e:	ab 9b       	lsr	r11,0xb
80031520:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80031524 <__extendsfdf_return_op1>:
80031524:	a1 7c       	lsl	r12,0x1
80031526:	5d 0b       	ror	r11
80031528:	5e fb       	retal	r11
8003152a:	fc 1a ff e0 	movh	r10,0xffe0
8003152e:	a9 6b       	lsl	r11,0x8
80031530:	f9 bb 01 ff 	movne	r11,-1
80031534:	f4 0b 17 00 	moveq	r11,r10
80031538:	30 0a       	mov	r10,0
8003153a:	cf 5b       	rjmp	80031524 <__extendsfdf_return_op1>

8003153c <__avr32_f64_to_f32>:
8003153c:	f6 09 15 01 	lsl	r9,r11,0x1
80031540:	b5 99       	lsr	r9,0x15
80031542:	5e 0d       	reteq	0
80031544:	f6 08 15 0a 	lsl	r8,r11,0xa
80031548:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
8003154c:	ab 6a       	lsl	r10,0xa
8003154e:	5c 3a       	neg	r10
80031550:	5c fc       	rol	r12
80031552:	e0 49 07 ff 	cp.w	r9,2047
80031556:	c1 a0       	breq	8003158a <__truncdfsf_return_op1+0x6>
80031558:	e0 29 03 80 	sub	r9,896
8003155c:	bf bc       	sbr	r12,0x1f
8003155e:	58 09       	cp.w	r9,0
80031560:	e0 8a 00 1a 	brle	80031594 <__truncdfsf_return_op1+0x10>
80031564:	37 fa       	mov	r10,127
80031566:	ed bc 00 08 	bld	r12,0x8
8003156a:	f7 ba 00 ff 	subeq	r10,-1
8003156e:	14 0c       	add	r12,r10
80031570:	f7 b9 03 fe 	sublo	r9,-2
80031574:	ed bc 00 1f 	bld	r12,0x1f
80031578:	f7 b9 01 01 	subne	r9,1
8003157c:	f8 0c 16 07 	lsr	r12,r12,0x7
80031580:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

80031584 <__truncdfsf_return_op1>:
80031584:	a1 7b       	lsl	r11,0x1
80031586:	5d 0c       	ror	r12
80031588:	5e fc       	retal	r12
8003158a:	bf dc       	cbr	r12,0x1f
8003158c:	5e 1e       	retne	-1
8003158e:	fc 1c 7f 80 	movh	r12,0x7f80
80031592:	5e fc       	retal	r12
80031594:	f2 09 11 01 	rsub	r9,r9,1
80031598:	59 99       	cp.w	r9,25
8003159a:	f9 bc 02 00 	movhs	r12,0
8003159e:	c1 32       	brcc	800315c4 <__truncdfsf_return_op1+0x40>
800315a0:	f2 0a 11 20 	rsub	r10,r9,32
800315a4:	f8 0a 09 4a 	lsl	r10,r12,r10
800315a8:	5f 1a       	srne	r10
800315aa:	f8 09 0a 4c 	lsr	r12,r12,r9
800315ae:	14 4c       	or	r12,r10
800315b0:	37 fa       	mov	r10,127
800315b2:	ed bc 00 08 	bld	r12,0x8
800315b6:	f7 ba 00 ff 	subeq	r10,-1
800315ba:	14 0c       	add	r12,r10
800315bc:	f8 0c 16 07 	lsr	r12,r12,0x7
800315c0:	a1 7b       	lsl	r11,0x1
800315c2:	5d 0c       	ror	r12
800315c4:	5e fc       	retal	r12

800315c6 <__avr32_udiv64>:
800315c6:	d4 31       	pushm	r0-r7,lr
800315c8:	1a 97       	mov	r7,sp
800315ca:	20 3d       	sub	sp,12
800315cc:	10 9c       	mov	r12,r8
800315ce:	12 9e       	mov	lr,r9
800315d0:	14 93       	mov	r3,r10
800315d2:	58 09       	cp.w	r9,0
800315d4:	e0 81 00 bd 	brne	8003174e <__avr32_udiv64+0x188>
800315d8:	16 38       	cp.w	r8,r11
800315da:	e0 88 00 40 	brls	8003165a <__avr32_udiv64+0x94>
800315de:	f0 08 12 00 	clz	r8,r8
800315e2:	c0 d0       	breq	800315fc <__avr32_udiv64+0x36>
800315e4:	f6 08 09 4b 	lsl	r11,r11,r8
800315e8:	f0 09 11 20 	rsub	r9,r8,32
800315ec:	f8 08 09 4c 	lsl	r12,r12,r8
800315f0:	f4 09 0a 49 	lsr	r9,r10,r9
800315f4:	f4 08 09 43 	lsl	r3,r10,r8
800315f8:	f3 eb 10 0b 	or	r11,r9,r11
800315fc:	f8 0e 16 10 	lsr	lr,r12,0x10
80031600:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80031604:	f6 0e 0d 00 	divu	r0,r11,lr
80031608:	e6 0b 16 10 	lsr	r11,r3,0x10
8003160c:	00 99       	mov	r9,r0
8003160e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80031612:	e0 0a 02 48 	mul	r8,r0,r10
80031616:	10 3b       	cp.w	r11,r8
80031618:	c0 a2       	brcc	8003162c <__avr32_udiv64+0x66>
8003161a:	20 19       	sub	r9,1
8003161c:	18 0b       	add	r11,r12
8003161e:	18 3b       	cp.w	r11,r12
80031620:	c0 63       	brcs	8003162c <__avr32_udiv64+0x66>
80031622:	10 3b       	cp.w	r11,r8
80031624:	f7 b9 03 01 	sublo	r9,1
80031628:	f7 dc e3 0b 	addcs	r11,r11,r12
8003162c:	f6 08 01 01 	sub	r1,r11,r8
80031630:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80031634:	e2 0e 0d 00 	divu	r0,r1,lr
80031638:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8003163c:	00 98       	mov	r8,r0
8003163e:	e0 0a 02 4a 	mul	r10,r0,r10
80031642:	14 33       	cp.w	r3,r10
80031644:	c0 82       	brcc	80031654 <__avr32_udiv64+0x8e>
80031646:	20 18       	sub	r8,1
80031648:	18 03       	add	r3,r12
8003164a:	18 33       	cp.w	r3,r12
8003164c:	c0 43       	brcs	80031654 <__avr32_udiv64+0x8e>
8003164e:	14 33       	cp.w	r3,r10
80031650:	f7 b8 03 01 	sublo	r8,1
80031654:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80031658:	cd f8       	rjmp	80031816 <__avr32_udiv64+0x250>
8003165a:	58 08       	cp.w	r8,0
8003165c:	c0 51       	brne	80031666 <__avr32_udiv64+0xa0>
8003165e:	30 19       	mov	r9,1
80031660:	f2 08 0d 08 	divu	r8,r9,r8
80031664:	10 9c       	mov	r12,r8
80031666:	f8 06 12 00 	clz	r6,r12
8003166a:	c0 41       	brne	80031672 <__avr32_udiv64+0xac>
8003166c:	18 1b       	sub	r11,r12
8003166e:	30 19       	mov	r9,1
80031670:	c4 08       	rjmp	800316f0 <__avr32_udiv64+0x12a>
80031672:	ec 01 11 20 	rsub	r1,r6,32
80031676:	f4 01 0a 49 	lsr	r9,r10,r1
8003167a:	f8 06 09 4c 	lsl	r12,r12,r6
8003167e:	f6 06 09 48 	lsl	r8,r11,r6
80031682:	f6 01 0a 41 	lsr	r1,r11,r1
80031686:	f3 e8 10 08 	or	r8,r9,r8
8003168a:	f8 03 16 10 	lsr	r3,r12,0x10
8003168e:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80031692:	e2 03 0d 00 	divu	r0,r1,r3
80031696:	f0 0b 16 10 	lsr	r11,r8,0x10
8003169a:	00 9e       	mov	lr,r0
8003169c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800316a0:	e0 05 02 49 	mul	r9,r0,r5
800316a4:	12 3b       	cp.w	r11,r9
800316a6:	c0 a2       	brcc	800316ba <__avr32_udiv64+0xf4>
800316a8:	20 1e       	sub	lr,1
800316aa:	18 0b       	add	r11,r12
800316ac:	18 3b       	cp.w	r11,r12
800316ae:	c0 63       	brcs	800316ba <__avr32_udiv64+0xf4>
800316b0:	12 3b       	cp.w	r11,r9
800316b2:	f7 be 03 01 	sublo	lr,1
800316b6:	f7 dc e3 0b 	addcs	r11,r11,r12
800316ba:	12 1b       	sub	r11,r9
800316bc:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
800316c0:	f6 03 0d 02 	divu	r2,r11,r3
800316c4:	f1 e3 11 08 	or	r8,r8,r3<<0x10
800316c8:	04 99       	mov	r9,r2
800316ca:	e4 05 02 4b 	mul	r11,r2,r5
800316ce:	16 38       	cp.w	r8,r11
800316d0:	c0 a2       	brcc	800316e4 <__avr32_udiv64+0x11e>
800316d2:	20 19       	sub	r9,1
800316d4:	18 08       	add	r8,r12
800316d6:	18 38       	cp.w	r8,r12
800316d8:	c0 63       	brcs	800316e4 <__avr32_udiv64+0x11e>
800316da:	16 38       	cp.w	r8,r11
800316dc:	f7 b9 03 01 	sublo	r9,1
800316e0:	f1 dc e3 08 	addcs	r8,r8,r12
800316e4:	f4 06 09 43 	lsl	r3,r10,r6
800316e8:	f0 0b 01 0b 	sub	r11,r8,r11
800316ec:	f3 ee 11 09 	or	r9,r9,lr<<0x10
800316f0:	f8 06 16 10 	lsr	r6,r12,0x10
800316f4:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
800316f8:	f6 06 0d 00 	divu	r0,r11,r6
800316fc:	e6 0b 16 10 	lsr	r11,r3,0x10
80031700:	00 9a       	mov	r10,r0
80031702:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80031706:	e0 0e 02 48 	mul	r8,r0,lr
8003170a:	10 3b       	cp.w	r11,r8
8003170c:	c0 a2       	brcc	80031720 <__avr32_udiv64+0x15a>
8003170e:	20 1a       	sub	r10,1
80031710:	18 0b       	add	r11,r12
80031712:	18 3b       	cp.w	r11,r12
80031714:	c0 63       	brcs	80031720 <__avr32_udiv64+0x15a>
80031716:	10 3b       	cp.w	r11,r8
80031718:	f7 ba 03 01 	sublo	r10,1
8003171c:	f7 dc e3 0b 	addcs	r11,r11,r12
80031720:	f6 08 01 01 	sub	r1,r11,r8
80031724:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80031728:	e2 06 0d 00 	divu	r0,r1,r6
8003172c:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80031730:	00 98       	mov	r8,r0
80031732:	e0 0e 02 4b 	mul	r11,r0,lr
80031736:	16 33       	cp.w	r3,r11
80031738:	c0 82       	brcc	80031748 <__avr32_udiv64+0x182>
8003173a:	20 18       	sub	r8,1
8003173c:	18 03       	add	r3,r12
8003173e:	18 33       	cp.w	r3,r12
80031740:	c0 43       	brcs	80031748 <__avr32_udiv64+0x182>
80031742:	16 33       	cp.w	r3,r11
80031744:	f7 b8 03 01 	sublo	r8,1
80031748:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8003174c:	c6 98       	rjmp	8003181e <__avr32_udiv64+0x258>
8003174e:	16 39       	cp.w	r9,r11
80031750:	e0 8b 00 65 	brhi	8003181a <__avr32_udiv64+0x254>
80031754:	f2 09 12 00 	clz	r9,r9
80031758:	c0 b1       	brne	8003176e <__avr32_udiv64+0x1a8>
8003175a:	10 3a       	cp.w	r10,r8
8003175c:	5f 2a       	srhs	r10
8003175e:	1c 3b       	cp.w	r11,lr
80031760:	5f b8       	srhi	r8
80031762:	10 4a       	or	r10,r8
80031764:	f2 0a 18 00 	cp.b	r10,r9
80031768:	c5 90       	breq	8003181a <__avr32_udiv64+0x254>
8003176a:	30 18       	mov	r8,1
8003176c:	c5 98       	rjmp	8003181e <__avr32_udiv64+0x258>
8003176e:	f0 09 09 46 	lsl	r6,r8,r9
80031772:	f2 03 11 20 	rsub	r3,r9,32
80031776:	fc 09 09 4e 	lsl	lr,lr,r9
8003177a:	f0 03 0a 48 	lsr	r8,r8,r3
8003177e:	f6 09 09 4c 	lsl	r12,r11,r9
80031782:	f4 03 0a 42 	lsr	r2,r10,r3
80031786:	ef 46 ff f4 	st.w	r7[-12],r6
8003178a:	f6 03 0a 43 	lsr	r3,r11,r3
8003178e:	18 42       	or	r2,r12
80031790:	f1 ee 10 0c 	or	r12,r8,lr
80031794:	f8 01 16 10 	lsr	r1,r12,0x10
80031798:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8003179c:	e6 01 0d 04 	divu	r4,r3,r1
800317a0:	e4 03 16 10 	lsr	r3,r2,0x10
800317a4:	08 9e       	mov	lr,r4
800317a6:	e7 e5 11 03 	or	r3,r3,r5<<0x10
800317aa:	e8 06 02 48 	mul	r8,r4,r6
800317ae:	10 33       	cp.w	r3,r8
800317b0:	c0 a2       	brcc	800317c4 <__avr32_udiv64+0x1fe>
800317b2:	20 1e       	sub	lr,1
800317b4:	18 03       	add	r3,r12
800317b6:	18 33       	cp.w	r3,r12
800317b8:	c0 63       	brcs	800317c4 <__avr32_udiv64+0x1fe>
800317ba:	10 33       	cp.w	r3,r8
800317bc:	f7 be 03 01 	sublo	lr,1
800317c0:	e7 dc e3 03 	addcs	r3,r3,r12
800317c4:	10 13       	sub	r3,r8
800317c6:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
800317ca:	e6 01 0d 00 	divu	r0,r3,r1
800317ce:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800317d2:	00 98       	mov	r8,r0
800317d4:	e0 06 02 46 	mul	r6,r0,r6
800317d8:	0c 3b       	cp.w	r11,r6
800317da:	c0 a2       	brcc	800317ee <__avr32_udiv64+0x228>
800317dc:	20 18       	sub	r8,1
800317de:	18 0b       	add	r11,r12
800317e0:	18 3b       	cp.w	r11,r12
800317e2:	c0 63       	brcs	800317ee <__avr32_udiv64+0x228>
800317e4:	0c 3b       	cp.w	r11,r6
800317e6:	f7 dc e3 0b 	addcs	r11,r11,r12
800317ea:	f7 b8 03 01 	sublo	r8,1
800317ee:	f1 ee 11 08 	or	r8,r8,lr<<0x10
800317f2:	ee f4 ff f4 	ld.w	r4,r7[-12]
800317f6:	0c 1b       	sub	r11,r6
800317f8:	f0 04 06 42 	mulu.d	r2,r8,r4
800317fc:	06 95       	mov	r5,r3
800317fe:	16 35       	cp.w	r5,r11
80031800:	e0 8b 00 0a 	brhi	80031814 <__avr32_udiv64+0x24e>
80031804:	5f 0b       	sreq	r11
80031806:	f4 09 09 49 	lsl	r9,r10,r9
8003180a:	12 32       	cp.w	r2,r9
8003180c:	5f b9       	srhi	r9
8003180e:	f7 e9 00 09 	and	r9,r11,r9
80031812:	c0 60       	breq	8003181e <__avr32_udiv64+0x258>
80031814:	20 18       	sub	r8,1
80031816:	30 09       	mov	r9,0
80031818:	c0 38       	rjmp	8003181e <__avr32_udiv64+0x258>
8003181a:	30 09       	mov	r9,0
8003181c:	12 98       	mov	r8,r9
8003181e:	10 9a       	mov	r10,r8
80031820:	12 93       	mov	r3,r9
80031822:	10 92       	mov	r2,r8
80031824:	12 9b       	mov	r11,r9
80031826:	2f dd       	sub	sp,-12
80031828:	d8 32       	popm	r0-r7,pc
8003182a:	d7 03       	nop

8003182c <__errno>:
8003182c:	48 28       	lddpc	r8,80031834 <__errno+0x8>
8003182e:	70 0c       	ld.w	r12,r8[0x0]
80031830:	2f 4c       	sub	r12,-12
80031832:	5e fc       	retal	r12
80031834:	00 00       	add	r0,r0
80031836:	24 74       	sub	r4,71

80031838 <memcpy>:
80031838:	58 8a       	cp.w	r10,8
8003183a:	c2 f5       	brlt	80031898 <memcpy+0x60>
8003183c:	f9 eb 10 09 	or	r9,r12,r11
80031840:	e2 19 00 03 	andl	r9,0x3,COH
80031844:	e0 81 00 97 	brne	80031972 <memcpy+0x13a>
80031848:	e0 4a 00 20 	cp.w	r10,32
8003184c:	c3 b4       	brge	800318c2 <memcpy+0x8a>
8003184e:	f4 08 14 02 	asr	r8,r10,0x2
80031852:	f0 09 11 08 	rsub	r9,r8,8
80031856:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8003185a:	76 69       	ld.w	r9,r11[0x18]
8003185c:	99 69       	st.w	r12[0x18],r9
8003185e:	76 59       	ld.w	r9,r11[0x14]
80031860:	99 59       	st.w	r12[0x14],r9
80031862:	76 49       	ld.w	r9,r11[0x10]
80031864:	99 49       	st.w	r12[0x10],r9
80031866:	76 39       	ld.w	r9,r11[0xc]
80031868:	99 39       	st.w	r12[0xc],r9
8003186a:	76 29       	ld.w	r9,r11[0x8]
8003186c:	99 29       	st.w	r12[0x8],r9
8003186e:	76 19       	ld.w	r9,r11[0x4]
80031870:	99 19       	st.w	r12[0x4],r9
80031872:	76 09       	ld.w	r9,r11[0x0]
80031874:	99 09       	st.w	r12[0x0],r9
80031876:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8003187a:	f8 08 00 28 	add	r8,r12,r8<<0x2
8003187e:	e0 1a 00 03 	andl	r10,0x3
80031882:	f4 0a 11 04 	rsub	r10,r10,4
80031886:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8003188a:	17 a9       	ld.ub	r9,r11[0x2]
8003188c:	b0 a9       	st.b	r8[0x2],r9
8003188e:	17 99       	ld.ub	r9,r11[0x1]
80031890:	b0 99       	st.b	r8[0x1],r9
80031892:	17 89       	ld.ub	r9,r11[0x0]
80031894:	b0 89       	st.b	r8[0x0],r9
80031896:	5e fc       	retal	r12
80031898:	f4 0a 11 09 	rsub	r10,r10,9
8003189c:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800318a0:	17 f9       	ld.ub	r9,r11[0x7]
800318a2:	b8 f9       	st.b	r12[0x7],r9
800318a4:	17 e9       	ld.ub	r9,r11[0x6]
800318a6:	b8 e9       	st.b	r12[0x6],r9
800318a8:	17 d9       	ld.ub	r9,r11[0x5]
800318aa:	b8 d9       	st.b	r12[0x5],r9
800318ac:	17 c9       	ld.ub	r9,r11[0x4]
800318ae:	b8 c9       	st.b	r12[0x4],r9
800318b0:	17 b9       	ld.ub	r9,r11[0x3]
800318b2:	b8 b9       	st.b	r12[0x3],r9
800318b4:	17 a9       	ld.ub	r9,r11[0x2]
800318b6:	b8 a9       	st.b	r12[0x2],r9
800318b8:	17 99       	ld.ub	r9,r11[0x1]
800318ba:	b8 99       	st.b	r12[0x1],r9
800318bc:	17 89       	ld.ub	r9,r11[0x0]
800318be:	b8 89       	st.b	r12[0x0],r9
800318c0:	5e fc       	retal	r12
800318c2:	eb cd 40 c0 	pushm	r6-r7,lr
800318c6:	18 99       	mov	r9,r12
800318c8:	22 0a       	sub	r10,32
800318ca:	b7 07       	ld.d	r6,r11++
800318cc:	b3 26       	st.d	r9++,r6
800318ce:	b7 07       	ld.d	r6,r11++
800318d0:	b3 26       	st.d	r9++,r6
800318d2:	b7 07       	ld.d	r6,r11++
800318d4:	b3 26       	st.d	r9++,r6
800318d6:	b7 07       	ld.d	r6,r11++
800318d8:	b3 26       	st.d	r9++,r6
800318da:	22 0a       	sub	r10,32
800318dc:	cf 74       	brge	800318ca <memcpy+0x92>
800318de:	2f 0a       	sub	r10,-16
800318e0:	c0 65       	brlt	800318ec <memcpy+0xb4>
800318e2:	b7 07       	ld.d	r6,r11++
800318e4:	b3 26       	st.d	r9++,r6
800318e6:	b7 07       	ld.d	r6,r11++
800318e8:	b3 26       	st.d	r9++,r6
800318ea:	21 0a       	sub	r10,16
800318ec:	5c 3a       	neg	r10
800318ee:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
800318f2:	d7 03       	nop
800318f4:	d7 03       	nop
800318f6:	f7 36 00 0e 	ld.ub	r6,r11[14]
800318fa:	f3 66 00 0e 	st.b	r9[14],r6
800318fe:	f7 36 00 0d 	ld.ub	r6,r11[13]
80031902:	f3 66 00 0d 	st.b	r9[13],r6
80031906:	f7 36 00 0c 	ld.ub	r6,r11[12]
8003190a:	f3 66 00 0c 	st.b	r9[12],r6
8003190e:	f7 36 00 0b 	ld.ub	r6,r11[11]
80031912:	f3 66 00 0b 	st.b	r9[11],r6
80031916:	f7 36 00 0a 	ld.ub	r6,r11[10]
8003191a:	f3 66 00 0a 	st.b	r9[10],r6
8003191e:	f7 36 00 09 	ld.ub	r6,r11[9]
80031922:	f3 66 00 09 	st.b	r9[9],r6
80031926:	f7 36 00 08 	ld.ub	r6,r11[8]
8003192a:	f3 66 00 08 	st.b	r9[8],r6
8003192e:	f7 36 00 07 	ld.ub	r6,r11[7]
80031932:	f3 66 00 07 	st.b	r9[7],r6
80031936:	f7 36 00 06 	ld.ub	r6,r11[6]
8003193a:	f3 66 00 06 	st.b	r9[6],r6
8003193e:	f7 36 00 05 	ld.ub	r6,r11[5]
80031942:	f3 66 00 05 	st.b	r9[5],r6
80031946:	f7 36 00 04 	ld.ub	r6,r11[4]
8003194a:	f3 66 00 04 	st.b	r9[4],r6
8003194e:	f7 36 00 03 	ld.ub	r6,r11[3]
80031952:	f3 66 00 03 	st.b	r9[3],r6
80031956:	f7 36 00 02 	ld.ub	r6,r11[2]
8003195a:	f3 66 00 02 	st.b	r9[2],r6
8003195e:	f7 36 00 01 	ld.ub	r6,r11[1]
80031962:	f3 66 00 01 	st.b	r9[1],r6
80031966:	f7 36 00 00 	ld.ub	r6,r11[0]
8003196a:	f3 66 00 00 	st.b	r9[0],r6
8003196e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80031972:	20 1a       	sub	r10,1
80031974:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80031978:	f8 0a 0b 09 	st.b	r12[r10],r9
8003197c:	cf b1       	brne	80031972 <memcpy+0x13a>
8003197e:	5e fc       	retal	r12

80031980 <memset>:
80031980:	18 98       	mov	r8,r12
80031982:	c0 38       	rjmp	80031988 <memset+0x8>
80031984:	10 cb       	st.b	r8++,r11
80031986:	20 1a       	sub	r10,1
80031988:	58 0a       	cp.w	r10,0
8003198a:	cf d1       	brne	80031984 <memset+0x4>
8003198c:	5e fc       	retal	r12

8003198e <strcpy>:
8003198e:	30 08       	mov	r8,0
80031990:	f6 08 07 09 	ld.ub	r9,r11[r8]
80031994:	f8 08 0b 09 	st.b	r12[r8],r9
80031998:	2f f8       	sub	r8,-1
8003199a:	58 09       	cp.w	r9,0
8003199c:	cf a1       	brne	80031990 <strcpy+0x2>
8003199e:	5e fc       	retal	r12

800319a0 <strlen>:
800319a0:	30 09       	mov	r9,0
800319a2:	18 98       	mov	r8,r12
800319a4:	c0 28       	rjmp	800319a8 <strlen+0x8>
800319a6:	2f f8       	sub	r8,-1
800319a8:	11 8a       	ld.ub	r10,r8[0x0]
800319aa:	f2 0a 18 00 	cp.b	r10,r9
800319ae:	cf c1       	brne	800319a6 <strlen+0x6>
800319b0:	f0 0c 01 0c 	sub	r12,r8,r12
800319b4:	5e fc       	retal	r12

Disassembly of section .exception:

80031a00 <_evba>:
_evba:

        .org  0x000
        // Unrecoverable Exception.
_handle_Unrecoverable_Exception:
        rjmp $
80031a00:	c0 08       	rjmp	80031a00 <_evba>
	...

80031a04 <_handle_TLB_Multiple_Hit>:

        .org  0x004
        // TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
        rjmp $
80031a04:	c0 08       	rjmp	80031a04 <_handle_TLB_Multiple_Hit>
	...

80031a08 <_handle_Bus_Error_Data_Fetch>:

        .org  0x008
        // Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
        rjmp $
80031a08:	c0 08       	rjmp	80031a08 <_handle_Bus_Error_Data_Fetch>
	...

80031a0c <_handle_Bus_Error_Instruction_Fetch>:

        .org  0x00C
         // Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
        rjmp $
80031a0c:	c0 08       	rjmp	80031a0c <_handle_Bus_Error_Instruction_Fetch>
	...

80031a10 <_handle_NMI>:

        .org  0x010
        // NMI.
_handle_NMI:
		lda.w   pc, eic_nmi_handler
80031a10:	4c ff       	lddpc	pc,80031b4c <ipr_val+0x10>
	...

80031a14 <_handle_Instruction_Address>:
        .org  0x014
        // Instruction Address.
_handle_Instruction_Address:
        rjmp $
80031a14:	c0 08       	rjmp	80031a14 <_handle_Instruction_Address>
	...

80031a18 <_handle_ITLB_Protection>:

        .org  0x018
        // ITLB Protection.
_handle_ITLB_Protection:
        rjmp $
80031a18:	c0 08       	rjmp	80031a18 <_handle_ITLB_Protection>
	...

80031a1c <_handle_Breakpoint>:

        .org  0x01C
        // Breakpoint.
_handle_Breakpoint:
        rjmp $
80031a1c:	c0 08       	rjmp	80031a1c <_handle_Breakpoint>
	...

80031a20 <_handle_Illegal_Opcode>:

        .org  0x020
        // Illegal Opcode.
_handle_Illegal_Opcode:
        rjmp $
80031a20:	c0 08       	rjmp	80031a20 <_handle_Illegal_Opcode>
	...

80031a24 <_handle_Unimplemented_Instruction>:

        .org  0x024
        // Unimplemented Instruction.
_handle_Unimplemented_Instruction:
        rjmp $
80031a24:	c0 08       	rjmp	80031a24 <_handle_Unimplemented_Instruction>
	...

80031a28 <_handle_Privilege_Violation>:

        .org  0x028
        // Privilege Violation.
_handle_Privilege_Violation:
        rjmp $
80031a28:	c0 08       	rjmp	80031a28 <_handle_Privilege_Violation>
	...

80031a2c <_handle_Floating_Point>:

        .org  0x02C
        // Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
        rjmp $
80031a2c:	c0 08       	rjmp	80031a2c <_handle_Floating_Point>
	...

80031a30 <_handle_Coprocessor_Absent>:

        .org  0x030
        // Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
        rjmp $
80031a30:	c0 08       	rjmp	80031a30 <_handle_Coprocessor_Absent>
	...

80031a34 <_handle_Data_Address_Read>:

        .org  0x034
        // Data Address (Read).
_handle_Data_Address_Read:
        rjmp $
80031a34:	c0 08       	rjmp	80031a34 <_handle_Data_Address_Read>
	...

80031a38 <_handle_Data_Address_Write>:

        .org  0x038
        // Data Address (Write).
_handle_Data_Address_Write:
        rjmp $
80031a38:	c0 08       	rjmp	80031a38 <_handle_Data_Address_Write>
	...

80031a3c <_handle_DTLB_Protection_Read>:

        .org  0x03C
        // DTLB Protection (Read).
_handle_DTLB_Protection_Read:
        rjmp $
80031a3c:	c0 08       	rjmp	80031a3c <_handle_DTLB_Protection_Read>
	...

80031a40 <_handle_DTLB_Protection_Write>:

        .org  0x040
        // DTLB Protection (Write).
_handle_DTLB_Protection_Write:
        rjmp $
80031a40:	c0 08       	rjmp	80031a40 <_handle_DTLB_Protection_Write>
	...

80031a44 <_handle_DTLB_Modified>:

        .org  0x044
        // DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
        rjmp $
80031a44:	c0 08       	rjmp	80031a44 <_handle_DTLB_Modified>
	...

80031a50 <_handle_ITLB_Miss>:

        .org  0x050
        // ITLB Miss.
_handle_ITLB_Miss:
        rjmp $
80031a50:	c0 08       	rjmp	80031a50 <_handle_ITLB_Miss>
	...

80031a60 <_handle_DTLB_Miss_Read>:

        .org  0x060
        // DTLB Miss (Read).
_handle_DTLB_Miss_Read:
        rjmp $
80031a60:	c0 08       	rjmp	80031a60 <_handle_DTLB_Miss_Read>
	...

80031a70 <_handle_DTLB_Miss_Write>:

        .org  0x070
        // DTLB Miss (Write).
_handle_DTLB_Miss_Write:
        rjmp $
80031a70:	c0 08       	rjmp	80031a70 <_handle_DTLB_Miss_Write>
	...

80031b00 <_handle_Supervisor_Call>:

        .org  0x100
        // Supervisor Call.
_handle_Supervisor_Call:
        rjmp $
80031b00:	c0 08       	rjmp	80031b00 <_handle_Supervisor_Call>
80031b02:	d7 03       	nop

80031b04 <_int0>:
  // CPU upon interrupt entry. No other register is saved by hardware.
#elif __AVR32_AP__
  // PC and SR are automatically saved in respectively RAR_INTx and RSR_INTx by
  // the CPU upon interrupt entry. No other register is saved by hardware.
  pushm   r8-r12, lr
#endif
80031b04:	30 0c       	mov	r12,0
80031b06:	fe b0 b0 75 	rcall	80027bf0 <_get_interrupt_handler>
80031b0a:	58 0c       	cp.w	r12,0
80031b0c:	f8 0f 17 10 	movne	pc,r12
80031b10:	d6 03       	rete

80031b12 <_int1>:
80031b12:	30 1c       	mov	r12,1
80031b14:	fe b0 b0 6e 	rcall	80027bf0 <_get_interrupt_handler>
80031b18:	58 0c       	cp.w	r12,0
80031b1a:	f8 0f 17 10 	movne	pc,r12
80031b1e:	d6 03       	rete

80031b20 <_int2>:
80031b20:	30 2c       	mov	r12,2
80031b22:	fe b0 b0 67 	rcall	80027bf0 <_get_interrupt_handler>
80031b26:	58 0c       	cp.w	r12,0
80031b28:	f8 0f 17 10 	movne	pc,r12
80031b2c:	d6 03       	rete

80031b2e <_int3>:
80031b2e:	30 3c       	mov	r12,3
80031b30:	fe b0 b0 60 	rcall	80027bf0 <_get_interrupt_handler>
80031b34:	58 0c       	cp.w	r12,0
80031b36:	f8 0f 17 10 	movne	pc,r12
80031b3a:	d6 03       	rete

80031b3c <ipr_val>:
80031b3c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
80031b4c:	80 01 5a f0 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ..Z.............
80031b5c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80031b6c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80031b7c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80031b8c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80031b9c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80031bac:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80031bbc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80031bcc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80031bdc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80031bec:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80031bfc:	d7 03 d7 03                                         ....
